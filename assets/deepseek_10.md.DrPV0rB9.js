import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},N={class:"review-content"};function E(s,e,u,p,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",N,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const O=d(q,[["render",E],["__scopeId","data-v-5650f42f"]]),S=JSON.parse('[{"question":"You are given a list of students, each with their respective scores in three subjects: Math, Science, and English. The goal is to determine the overall ranking of students based on their average scores. The student with the highest average score should be ranked first. In case of a tie in average scores, rank the tied students by their Math scores. If there is still a tie, rank them alphabetically by their names. Write a function `rank_students` that takes in a list of dictionaries, where each dictionary contains a student\'s name and their scores in Math, Science, and English. The function should return a list of student names sorted by their rank. # Example: Input: ``` [ {\\"name\\": \\"John\\", \\"Math\\": 80, \\"Science\\": 90, \\"English\\": 85}, {\\"name\\": \\"Doe\\", \\"Math\\": 90, \\"Science\\": 70, \\"English\\": 80}, {\\"name\\": \\"Jane\\", \\"Math\\": 85, \\"Science\\": 80, \\"English\\": 80}, {\\"name\\": \\"Smith\\", \\"Math\\": 90, \\"Science\\": 85, \\"English\\": 90} ] ``` Output: ``` [\\"Smith\\", \\"John\\", \\"Jane\\", \\"Doe\\"] ``` Explanation: - Smith\'s average score is 88.33, John’s average score is 85, Jane\'s average score is 81.66, and Doe’s average score is 80. - Smith is ranked first based on the highest average score. - John is next with an average score of 85. - Jane is ranked third with an average score of 81.66. - Doe is ranked fourth with an average score of 80. # Notes: - The input list will always contain valid data. - You may assume there are no duplicated names and all names are unique. - Scores are integers and the average can be a float with up to 2 decimal places.","solution":"def rank_students(students): Ranks students based on average scores. Ties are broken by Math scores, then by names alphabetically. Args: students (list of dict): A list of dictionaries, where each dictionary contains a student\'s name and their scores in Math, Science, and English. Returns: list of str: A list of student names sorted by their rank. # Calculate the average score for each student and store it in a tuple students_with_avg = [] for student in students: avg_score = (student[\\"Math\\"] + student[\\"Science\\"] + student[\\"English\\"]) / 3 students_with_avg.append((student[\\"name\\"], avg_score, student[\\"Math\\"])) # Sort primarily by average score (descending), then by Math score (descending), then by name (alphabetically) students_with_avg.sort(key=lambda x: (-x[1], -x[2], x[0])) # Extract the sorted student names sorted_students = [student[0] for student in students_with_avg] return sorted_students"},{"question":"Write functions to evaluate simple mathematical expressions given as strings. The expressions will consist of integers and the operators +, -, *, and /. The operators must follow the standard precedence rules: * and / have higher precedence than + and -, and operations of the same precedence are performed from left to right. You must also handle parentheses to override the standard precedence rules. To simplify the implementation, you can assume that: - The input expression is always valid. - There are no spaces in the input string. - The integer values are non-negative. -----Input----- The input is a single string representing a valid mathematical expression as defined above. The string\'s length will be at least 1 and at most 100 characters. -----Output----- The output should be a single integer result of evaluating the given expression. -----Examples----- Sample Input 1: 3+5*2 Sample Output 1: 13 Sample Input 2: (2+3)*(5-2) Sample Output 2: 15 Sample Input 3: 20/(4+1) Sample Output 3: 4","solution":"def evaluate_expression(expr): def evaluate(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = evaluate(tokens) if (not token.isdigit() and token != \' \') or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': stack[-1] = int(stack[-1] / float(num)) sign = token num = 0 if token == \')\': break return sum(stack) return evaluate(list(expr))"},{"question":"You are given an array of integers. Your task is to determine the maximum product of three distinct elements in this array. If the array contains fewer than three elements, return -1. The function should take an array of integers as input and output a single integer representing the maximum possible product of three distinct elements, or -1 if it\'s not feasible. -----Input----- The input consists of a single line containing a space-separated list of integers a (−10^4 ≤ a[i] ≤ 10^4, 1 ≤ |a| ≤ 3 * 10^4) — the elements of the array. -----Output----- Output a single integer — the maximum possible product of three distinct elements, or -1 if the array contains fewer than three elements. -----Examples----- Input 4 1 3 2 Output 24 Input -1 -2 -3 -4 Output -6 Input 1 2 Output -1 -----Note----- In the first sample, you can choose the elements 4, 3, and 2 to get the product 4 * 3 * 2 = 24. In the second sample, although all elements are negative, the maximum product of three distinct elements is -1 * -2 * -3 = -6. In the third sample, there are fewer than three elements in the array, so the output is -1.","solution":"def maximum_product_of_three(arr): Determine the maximum product of three distinct elements in the list. If the list contains fewer than three elements, return -1. Args: arr (list of int): The input list of integers. Returns: int: The maximum product of three distinct elements or -1 if not feasible. if len(arr) < 3: return -1 arr.sort() # Maximum product can be from either: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (which might be negative) and the largest number max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"A new tech company is setting up its office with N servers to handle large volumes of data. These servers need to be connected in a way such that any server can communicate with any other server either directly or indirectly. The administration plans to connect these servers using network cables, and each cable can directly connect two servers. Your task is to determine the minimum number of cables required to connect all N servers in such a way that every server is reachable from any other server. Input: First line will contain integer T - number of test cases. Next T lines each will contain a single integer N - number of servers. Output: Print the minimum number of cables required for each test case in a new line. Constraints: 1 ≤ T ≤ 10000 1 ≤ N ≤ 1000000000 (10^9) SAMPLE INPUT: 3 4 5 1 SAMPLE OUTPUT: 3 4 0 Explanation: For 4 servers, you need a minimum of 3 cables to connect them in a linear fashion. For 5 servers, you need a minimum of 4 cables. If there is only 1 server, no cables are required.","solution":"def min_cables(N): This function calculates the minimum number of cables required to connect N servers in such a way that they are all reachable from each other. return max(0, N - 1)"},{"question":"Hannah is learning about sequences and patterns in her math class. One day, her teacher introduced her to the concept of \\"Perfect Number\\". A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, 6 is a perfect number because its proper divisors are 1, 2, and 3 (1 + 2 + 3 = 6). Similarly, 28 is a perfect number because its proper divisors are 1, 2, 4, 7, and 14 (1 + 2 + 4 + 7 + 14 = 28). Hannah was given a challenge to find the smallest perfect number greater than a given integer `x`. Can you help Hannah solve this problem? ---Input--- The input consists of a single integer `x` (1 ≤ x ≤ 10^9). ---Output--- Print a single integer which is the smallest perfect number greater than `x`. ---Examples--- Input: 5 Output: 6 Input: 27 Output: 28 Input: 100 Output: 496 Input: 500 Output: 8128 Input: 10000 Output: 33550336 ---Note--- In the first example, the smallest perfect number greater than 5 is 6. In the second example, the smallest perfect number greater than 27 is 28.","solution":"def is_perfect_number(n): Checks if a number n is a perfect number. if n <= 1: return False divisors_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n def smallest_perfect_number_greater_than(x): Returns the smallest perfect number greater than x. perfect_numbers = [6, 28, 496, 8128, 33550336] # Known perfect numbers less than 10^9 for pn in perfect_numbers: if pn > x: return pn return -1 # If there is no perfect number greater than x within the known range"},{"question":"Your task is to implement a function that finds the longest contiguous substring of a given string `s` that contains at most `k` distinct characters. **Function Signature:** ```python def longest_substring_with_k_distinct(s: str, k: int) -> str: Given a string s and an integer k, return the longest contiguous substring that contains at most k distinct characters. ``` **Constraints:** - The input string `s` will have a length between 1 and 100. - The value `k` will be an integer between 1 and 100. **Example:** ``` Input: s = \\"eceba\\", k = 2 Output: \\"ece\\" Input: s = \\"aa\\", k = 1 Output: \\"aa\\" Input: s = \\"aabbcc\\", k = 2 Output: \\"aabb\\" ``` **Explanation:** 1. In the first example, the longest substring with at most 2 distinct characters is \\"ece\\". 2. In the second example, the whole string \\"aa\\" contains only 1 distinct character. 3. In the third example, \\"aabb\\" is the longest substring with at most 2 distinct characters. Write the function `longest_substring_with_k_distinct` that implements this behavior. Consider edge cases where the input string is very short or where all characters are the same. Ensure optimal performance by limiting the time complexity to linear in terms of the length of the input string.","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> str: from collections import defaultdict n = len(s) if n * k == 0: return \\"\\" # Sliding window left and right pointers left, right = 0, 0 # Hashmap to store the count of characters in the current window hashmap = defaultdict(int) max_len = 1 max_substr = s[0] while right < n: # Add the current character to the hashmap hashmap[s[right]] += 1 # When the window contains more than \'k\' distinct characters, shrink the window while len(hashmap) > k: hashmap[s[left]] -= 1 if hashmap[s[left]] == 0: del hashmap[s[left]] left += 1 current_window_length = right - left + 1 if current_window_length > max_len: max_len = current_window_length max_substr = s[left:right + 1] right += 1 return max_substr"},{"question":"You are given an array of integers and a target integer value. Your task is to determine if there are two distinct numbers in the array that add up to the target value. -----Input----- The input will consist of multiple test cases. Each test case starts with a line containing an integer n (2 leq n leq 10^5), which is the number of elements in the array. The next line contains n space-separated integers representing the array elements. The third line contains a single integer target (-10^9 leq target leq 10^9), which is the target value. -----Output----- For each test case, output \\"YES\\" if there are two distinct elements in the array which add up to the target value, and \\"NO\\" otherwise. -----Examples----- Input 2 4 1 2 3 4 5 5 -1 0 3 7 10 9 Output YES YES -----Note----- In the first test case, the numbers 1 and 4 add up to 5, which is the target value. In the second test case, the numbers -1 and 10 add up to 9, which is the target value.","solution":"def two_sum_exists(n, array, target): Determines if there are two distinct numbers in the array that add up to the target value. :param n: Integer, number of elements in the array :param array: List of integers representing the array elements :param target: Integer, the target value :return: \\"YES\\" if two distinct elements add up to the target value, otherwise \\"NO\\" seen = set() for num in array: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Read the problem statements in Mandarin Chinese and Russian. Chef loves desserts, and today he wants to create his favorite layered cake. The cake consists of several layers, each made from one of two types of ingredients: chocolate and vanilla. Each layer is characterized by its sweetness level, a positive integer. Chef wants the sweetness of the layers to follow a particular pattern described by an integer sequence. Chef has a specific policy: he should be able to start any new layer with the same or higher sweetness as the previous layer. You are given a sequence of integers representing the desired sweetness levels of the layers of the cake. You need to determine whether it is possible to add layers to the cake such that the sweetness levels of the cake\'s layers can be made identical to the desired sequence using Chef\'s policy. ------ Input ------ The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer N, representing the number of layers in the desired sequence. - The second line contains N integers S_1, S_2, ..., S_N, where S_i denotes the sweetness level of the i-th layer in the desired sequence. ------ Output ------ For each test case, output \\"YES\\" if it is possible to arrange the layers to match the desired sweetness sequence following Chef\'s policy. Otherwise, output \\"NO.\\" ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ S_i ≤ 10000 ------ Sample Input 1 ------ 4 3 1 2 3 3 1 3 2 2 5 5 4 1 1 1 1 ------ Sample Output 1 ------ YES NO YES YES ------ Explanation 1 ------ In the first test case, you can follow the given sequence exactly: 1, 2, 3. In the second test case, you cannot place 2 after 3 without violating the policy. In the third test case, all layers have the same sweetness, so the policy is satisfied. In the fourth test case, all layers have the same sweetness, so the policy is satisfied.","solution":"def can_create_layers(T, test_cases): Determine whether it\'s possible to arrange the layers to match the desired sweetness sequence following Chef\'s policy for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): A list of tuples where each tuple contains: - an integer N (number of layers) - a list of integers representing the sweetness levels. Returns: list of str: A list containing \\"YES\\" or \\"NO\\" for each test case. results = [] for N, sweetness_levels in test_cases: can_do = True for i in range(1, N): if sweetness_levels[i] < sweetness_levels[i - 1]: can_do = False break if can_do: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an `m x n` binary matrix. Your task is to find the size of the largest rectangle filled with 1s. Example: Input: matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] Output: 6 Explanation: The largest rectangle containing only 1s has an area of 6 (2x3 rectangle at bottom-right). Your Task: Complete the function `int maximalRectangle(vector<vector<int>>& matrix)`, which takes a binary matrix as input and returns the area of the largest rectangle filled with 1s. Expected Time Complexity: O(m * n). Expected Auxiliary Space: O(n). Constraints: 0 <= m, n <= 200 matrix[i][j] is either 0 or 1.","solution":"def maximalRectangle(matrix): Returns the area of the largest rectangle filled with 1s in the given binary matrix. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * (n + 1) for row in matrix: for i in range(n): if row[i] == 0: heights[i] = 0 else: heights[i] += 1 stack = [-1] for i in range(n + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Sophia is organizing a photo exhibition and she has decided to arrange the photos in a grid format. She wants to make the arrangement such that each row and each column has a unique sequence of photo IDs. Given an initially filled grid, with some cells containing photo IDs and other cells being empty (represented by 0), determine if it is possible to complete the grid by filling the empty cells such that all rows and columns have unique sequences of photo IDs. Each photo ID is a positive integer, and it is guaranteed that the number of distinct photo IDs is less than or equal to the dimension of the grid. Complete the function `canArrange(grid: List[List[int]]) -> bool` that determines if the grid can be uniquely completed. Input * The function receives a 2D list `grid` of integers representing the photo arrangement. The grid has `n` rows and `n` columns (2 ≤ n ≤ 20), and each integer in the grid is either a positive photo ID or 0. Output * The function should return a boolean - `True` if it is possible to fill the grid such that each row and each column has unique sequences of photo IDs, and `False` otherwise. Examples canArrange([[1, 2, 0], [0, 3, 1], [2, 1, 3]]) returns False canArrange([[1, 0, 3], [0, 3, 1], [3, 1, 2]]) returns True Note In the first example, there is no way to fill the grid to meet the unique sequence constraint. In the second example, one possible way to complete the grid is: [[1, 2, 3], [2, 3, 1], [3, 1, 2]]","solution":"from typing import List def canArrange(grid: List[List[int]]) -> bool: n = len(grid) # Helper function to check if a number can be placed at grid[i][j] def is_valid(num, row, col): for k in range(n): if grid[row][k] == num or grid[k][col] == num: return False return True # Backtracking function to fill the grid def solve(): for i in range(n): for j in range(n): if grid[i][j] == 0: for num in range(1, n+1): if is_valid(num, i, j): grid[i][j] = num if solve(): return True grid[i][j] = 0 return False return True return solve()"},{"question":"-----Task----- Write a program that determines whether a given string consisting of opening and closing parentheses, brackets, and curly braces is valid. A string is considered valid if the following conditions are met: 1. Every opening parenthesis \'(\', bracket \'[\', or brace \'{\' has a corresponding closing parenthesis \')\', bracket \']\', or brace \'}\' respectively. 2. The pairs must be matched correctly and in the correct order. -----Input----- The first line of the input contains a single integer T, which denotes the number of test cases. The following T lines each contain a string S consisting of opening and closing parentheses, brackets, and curly braces. -----Constraints----- 1 leq T leq 1000 1 leq |S| leq 1000 Each character in S will be one of \'(\', \')\', \'[\', \']\', \'{\', or \'}\'. -----Output----- For each test case, output \\"Valid\\" if the given string is valid, and \\"Invalid\\" otherwise. -----Examples----- Sample Input 1: 3 () ([{}]) ([)] Sample Output 1: Valid Valid Invalid Sample Input 2: 2 {[()]} {[(])} Sample Output 2: Valid Invalid","solution":"def is_valid_parentheses(s): Determines if the given string of parentheses is valid. Args: s (str): The input string containing \'()\', \'[]\', \'{}\'. Returns: str: \\"Valid\\" if the string is valid, otherwise \\"Invalid\\". stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if not stack or stack.pop() != matching_bracket[char]: return \\"Invalid\\" else: return \\"Invalid\\" return \\"Valid\\" if not stack else \\"Invalid\\" def validate_parentheses_cases(test_cases): Processes multiple test cases for parentheses validation. Args: test_cases (list): A list of test case strings. Returns: list: A list of results \\"Valid\\" or \\"Invalid\\" for each test case. results = [is_valid_parentheses(tc) for tc in test_cases] return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = input_lines[1:T+1] return validate_parentheses_cases(test_cases)"},{"question":"You are given a linked list containing unique integers. Your task is to determine if this linked list is a circular linked list. A circular linked list is one where the last node points back to any previous node in the list. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of nodes in the list. - The next N lines each contain a single integer, representing the value of each node in the linked list in sequence. Output: - For each test case, print \\"CIRCULAR\\" if the linked list is circular, otherwise print \\"NOT CIRCULAR\\". Constraints: - 1 <= T <= 100 - 1 <= N <= 1000 - Each value in the linked list is a unique integer between -10^9 and 10^9 NOTE: Assume that the linked list is presented in a way such that it includes information about whether it is circular or not implicitly by the sequence of nodes. SAMPLE INPUT 3 3 1 2 3 4 10 20 30 40 5 100 200 300 400 500 SAMPLE OUTPUT NOT CIRCULAR CIRCULAR NOT CIRCULAR","solution":"class ListNode: def __init__(self, val=0): self.val = val self.next = None def is_circular_linked_list(head): Function to check if the linked list is circular. if not head or not head.next: return False slow, fast = head, head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False def parse_input(test_cases): results = [] for case in test_cases: if is_circular_linked_list(case): results.append(\\"CIRCULAR\\") else: results.append(\\"NOT CIRCULAR\\") return results def build_linked_list(node_values, circular_index=None): nodes = [ListNode(val) for val in node_values] for i in range(len(nodes) - 1): nodes[i].next = nodes[i + 1] if circular_index is not None: nodes[-1].next = nodes[circular_index] return nodes[0] # Example input reading and processing def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): N = int(lines[index].strip()) index += 1 node_vals = [] for _ in range(N): node_vals.append(int(lines[index].strip())) index += 1 # Let\'s assume that 1st test case has no circular dependency, # 2nd test case has a circular dependency at index 1 (second node) # and so on for simplicity in this supposed input method. circular_index = None if N > 2 and (N % 2 == 0): # Just a hypothetical pattern for circularity circular_index = 1 head = build_linked_list(node_vals, circular_index) test_cases.append(head) return parse_input(test_cases) # Example usage input_data = 3 3 1 2 3 4 10 20 30 40 5 100 200 300 400 500 output = process_input(input_data) print(output)"},{"question":"The array transformation problem is as follows: You are given an array of integers `a` containing `n` elements. You can perform the following operation on the array: Select two different elements in the array, say `a_i` and `a_j` (1 ≤ i < j ≤ n). Replace both elements by their greatest common divisor (gcd). You need to find the minimum possible sum of the array that can be achieved by performing the operation any number of times (including zero). Input The first line of the input contains a single integer `n` (2 ≤ n ≤ 105) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 109) — the elements of the array. Output Print a single integer — the minimum possible sum of the array. Examples Input 3 4 8 12 Output 6 Input 5 10 15 20 25 30 Output 5 Input 6 1 1 1 1 1 1 Output 6 Note In the first example, you can perform the operation to replace any two elements (a_i, a_j) with gcd(a_i, a_j) repeatedly until all elements become gcd(4, 8, 12) = 4. The sum of the array will be 3 * 4 = 12. In the second example, replacing any two elements will always result in gcd(10, 15, 20, 25, 30) = 5. The sum of the array will be 5 * 1 = 5. In the third example, as the array already contains the smallest possible value, performing any transformation doesn\'t change it. The sum of the array will remain 6 * 1 = 6.","solution":"import math from functools import reduce def min_possible_sum(n, a): Determines the minimum possible sum of the array after performing the specified operation any number of times. def find_gcd_of_array(array): return reduce(math.gcd, array) # Find gcd of all elements in the array gcd_all = find_gcd_of_array(a) # The minimum sum is the gcd of the entire array multiplied by the number of elements min_sum = gcd_all * n return min_sum # Example usage # For the given example 3 [4, 8, 12], it should return 12 print(min_possible_sum(3, [4, 8, 12]))"},{"question":"Given an array of integers heights representing the heights of people, you need to sort the people by their heights in non-decreasing order. However, if a person\'s height is the same as another, they should retain their original relative order in the array. Return the sorted array of heights in the correct relative order. Example 1: Input: heights = [5, 3, 9, 2, 5, 5] Output: [2, 3, 5, 5, 5, 9] Explanation: Heights are sorted in non-decreasing order, with relative order maintained among people of the same height. Example 2: Input: heights = [1, 2, 3, 4, 8, 5, 6, 7] Output: [1, 2, 3, 4, 5, 6, 7, 8] Explanation: The heights are already in non-decreasing order. Example 3: Input: heights = [6, 2, 3, 2, 4, 3, 1] Output: [1, 2, 2, 3, 3, 4, 6] Explanation: People with the same height retain their original order within the sorted list. Example 4: Input: heights = [3, 3, 3, 3] Output: [3, 3, 3, 3] Explanation: All people have the same height, so their relative order is preserved in the sorted array. Constraints: 1 <= heights.length <= 10^4 1 <= heights[i] <= 10^6","solution":"def sort_heights(heights): Returns a sorted list of heights in non-decreasing order with the relative order of people with the same height retained. return sorted(heights)"},{"question":"# Problem Statement Create a program that lets you design and solve mazes using graph theory. Imagine a rectangular maze represented by an MxN grid (M rows and N columns). Each cell in the maze can be either walkable or a wall. You start at a given cell (Start) and your goal is to find the shortest path to another given cell (End), considering you can only move horizontally or vertically to adjacent walkable cells. If there is no path from Start to End, you should return \\"No Path\\". You will be given multiple datasets. For each dataset, you need to output the length of the shortest path from Start to End or \\"No Path\\" if no path exists. **Input:** 1. The first line of each dataset contains two integers M and N, indicating the number of rows and columns respectively. 2. The second line contains two integers, StartX and StartY, indicating the 1-based row and column of the starting cell respectively. 3. The third line contains two integers, EndX and EndY, indicating the 1-based row and column of the ending cell respectively. 4. The next M lines each contain N characters, where \'.\' represents a walkable cell and \'#\' represents a wall. The end of the input is signaled by a line with `#`. This line should not be processed. **Output:** For each dataset, output the length of the shortest path from Start to End or \\"No Path\\" if no such path exists. **Examples:** ``` **Input:** 5 5 1 1 5 5 ..... .#. ..#.. . ..... 5 5 1 2 5 4 ..#.. .#.#. .#.#. .#.#. ..#.. # **Output:** 8 No Path ``` **Explanation:** - In the first dataset, the shortest path from (1,1) to (5,5) has a length of 8 steps. - In the second dataset, there\'s no possible path from (1,2) to (5,4). Hence, the output is \\"No Path\\".","solution":"from collections import deque def shortest_path(maze, start, end): Find the shortest path in a maze from start to end using BFS. rows, cols = len(maze), len(maze[0]) startX, startY = start endX, endY = end def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and maze[x][y] == \'.\' directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(startX, startY, 0)]) visited = set((startX, startY)) while queue: x, y, depth = queue.popleft() if (x, y) == (endX, endY): return depth for d in directions: nx, ny = x + d[0], y + d[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) return \\"No Path\\" def solve_mazes(datasets): Solve multiple datasets of mazes. results = [] for dataset in datasets: M, N = dataset[\'size\'] start = (dataset[\'start\'][0] - 1, dataset[\'start\'][1] - 1) end = (dataset[\'end\'][0] - 1, dataset[\'end\'][1] - 1) maze = [list(row) for row in dataset[\'maze\']] result = shortest_path(maze, start, end) results.append(result) return results # Example to manually run the solve_mazes function if __name__ == \\"__main__\\": datasets = [ { \'size\': (5, 5), \'start\': (1, 1), \'end\': (5, 5), \'maze\': [ \'.....\', \'.#.\', \'..#..\', \'.\', \'.....\' ] }, { \'size\': (5, 5), \'start\': (1, 2), \'end\': (5, 4), \'maze\': [ \'..#..\', \'.#.#.\', \'.#.#.\', \'.#.#.\', \'..#..\' ] } ] print(solve_mazes(datasets)) # Output: [8, \\"No Path\\"]"},{"question":"You are given a large city map, which is represented by a grid of size n x m where each cell may either be an empty space (\'.\') or an obstacle (\'#\'). You need to start from the top-left corner of the grid and try to reach the bottom-right corner using the minimum number of moves. In one move, you can either move one step to the right or one step to the down. However, you cannot move into a cell that contains an obstacle (\'#\'). If there is no valid path from the top-left corner to the bottom-right corner, return -1. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) – the dimensions of the grid. The following n lines contain m characters each (\'.\' and \'#\') – the description of the grid. Output Output a single integer – the minimum number of moves needed to reach the bottom-right corner from the top-left corner. If it is impossible to reach the bottom-right corner, output -1. Example Input 5 5 ..... .#... ... ...#. ..... Output 8 Note In the provided example, the minimum path has length 8 as follows: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5).","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): # Directions for right and down moves directions = [(0, 1), (1, 0)] # Check if the start or end points are obstacles if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # BFS setup queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, distance = queue.popleft() # If reached the bottom-right corner if x == n-1 and y == m-1: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 # If no path is found"},{"question":"Write a function `find_closest_peak_point(arr,key)` that takes a list of integers `arr` and an integer `key`, and returns the closest index of a \\"peak point\\" which is greater than `key`. A \\"peak point\\" is an element that is strictly greater than its neighbors. For the elements at the boundary, the condition for a peak point is modified as follows: - For the first element, it is considered a peak if it is greater than the second element. - For the last element, it is considered a peak if it is greater than the second-last element. If there are multiple peak points that are equally close, return the smallest index among them. If no such peak point exists, return `-1`. # Example ```python arr = [5, 10, 20, 15, 7, 25, 30] key = 18 # The peak points in the array are at indices 2 and 6 (values 20 and 30 respectively). # The closest peak point to \'key\' is 20 at index 2, which is closer than 30 (index 6). find_closest_peak_point(arr, key) # Output: 2 arr = [10, 20, 5, 15, 10] key = 12 # The peak points in the array are at indices 1 and 3 (values 20 and 15 respectively). # Both are equally close, but 1 is smaller than 3. find_closest_peak_point(arr,key) # Output: 1 arr = [1, 3, 2, 5, 4] key = 6 # No peak point is greater than key. find_closest_peak_point(arr, key) # Output: -1 ``` **Features of the tests:** - The array length, `arr`, will be at most `10^5` elements. - Each integer in the array will be in the range from `-10^9` to `10^9`. - `key` will be an integer in the range from `-10^9` to `10^9`. # Constraints * The solution should efficiently handle large arrays. * A total of 8 fixed tests. * A total of 150 random tests within the given constraints.","solution":"def find_closest_peak_point(arr, key): Returns the closest index of a \\"peak point\\" which is greater than `key`. def is_peak(i): if i == 0: return arr[i] > arr[i + 1] elif i == len(arr) - 1: return arr[i] > arr[i - 1] else: return arr[i] > arr[i - 1] and arr[i] > arr[i + 1] closest_peak_index = -1 min_distance = float(\'inf\') for i in range(len(arr)): if arr[i] > key and is_peak(i): distance = abs(i - (i if closest_peak_index == -1 else closest_peak_index)) if distance < min_distance: closest_peak_index = i min_distance = distance elif distance == min_distance: closest_peak_index = min(closest_peak_index, i) return closest_peak_index"},{"question":"Write a function `group_by_first_letter(words)` that takes a list of words (strings) and returns a dictionary where the keys are letters and the values are lists of words starting with that letter. The keys in the returned dictionary should be sorted in alphabetical order. For example, given the list `[\\"apple\\", \\"banana\\", \\"grape\\", \\"avocado\\", \\"blueberry\\", \\"cherry\\"]`, the function should return: ```python { \'a\': [\'apple\', \'avocado\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\'], \'g\': [\'grape\'] } ```","solution":"def group_by_first_letter(words): Groups words by their first letter. :param words: List of words (strings) :return: Dictionary where keys are the first letters and values are lists of words starting with that letter grouped_words = {} for word in words: first_letter = word[0].lower() if first_letter not in grouped_words: grouped_words[first_letter] = [] grouped_words[first_letter].append(word) # Sorting the dictionary by its keys grouped_words = dict(sorted(grouped_words.items())) return grouped_words"},{"question":"You are given a list of integers and a number of queries. Each query specifies two indices, and for each query, you need to determine the sum of the minimum k elements in the subarray from the list. More specifically, given an array of integers and a number of queries, each query is described by three integers li, ri, and k. Numbers li, ri define a subsegment of the original array, meaning the sequence of integers a[li], a[li+1], ..., a[ri]. For each query, you should calculate the sum of the smallest k elements in the subsegment. If there are fewer than k elements in the subsegment, consider all elements in the subsegment. Write a program to answer these queries. Input: The first line contains two integers n and q (1 <= n, q <= 10^5) — the number of array elements and the number of queries. The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9). The next q lines each contain three integers li, ri, k (1 <= li <= ri <= n, 1 <= k <= n) — the description of the i-th query. Output: Print q lines, in the i-th line print the sum of the smallest k elements in the subsegment that corresponds to the i-th query. Example: Input: 7 4 4 2 5 1 6 7 3 1 3 2 4 5 1 2 7 3 1 7 4 Output: 6 1 6 10 Explanation: For the first query, the subsegment is [4, 2, 5]. The two smallest elements are 2 and 4, and their sum is 6. For the second query, the subsegment is [1, 6]. The smallest element is 1, and its sum is 1. For the third query, the subsegment is [2, 5, 1, 6, 7, 3]. The three smallest elements are 1, 2, and 3, and their sum is 6. For the fourth query, the subsegment is [4, 2, 5, 1, 6, 7, 3]. The four smallest elements are 1, 2, 3, and 4, and their sum is 10.","solution":"def sum_of_smallest_k_elements(arr, queries): results = [] for li, ri, k in queries: subarray = arr[li - 1:ri] subarray_sorted = sorted(subarray) results.append(sum(subarray_sorted[:k])) return results # Example usage n, q = 7, 4 arr = [4, 2, 5, 1, 6, 7, 3] queries = [(1, 3, 2), (4, 5, 1), (2, 7, 3), (1, 7, 4)] print(sum_of_smallest_k_elements(arr, queries)) # Output should be [6, 1, 6, 10]"},{"question":"Lisa is a software developer and loves working with arrays and strings. One day, while coding, she came across an interesting problem. Given a string containing only lowercase alphabets, she wants to know the number of distinct substrings of length K that can be formed from the string. Your task is to help her solve this problem. Write a function to determine the number of distinct substrings of length K. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer K. - The second line contains a string S of length N, consisting of lowercase alphabets. Output: For each test case, output the number of distinct substrings of length K. Constraints: 1 ≤ T ≤ 100 1 ≤ K ≤ 1000 1 ≤ N ≤ 10000 K ≤ N SAMPLE INPUT 2 3 abcabc 2 aaaa SAMPLE OUTPUT 3 1 Explanation: In the first test case, the distinct substrings of length 3 are: \\"abc\\", \\"bca\\", and \\"cab\\". Hence, the output is 3. In the second test case, the distinct substrings of length 2 are: \\"aa\\". Hence, the output is 1.","solution":"def count_distinct_substrings(test_cases): Given a number of test cases, input string S, and integer K returns the number of distinct substrings of length K. results = [] for k, s in test_cases: substrings = {s[i:i+k] for i in range(len(s) - k + 1)} results.append(len(substrings)) return results"},{"question":"Design an algorithm to find the number of pairs of integers in an array that sum up to a given value. Input: The task is to complete the function countPairs, which takes three arguments: an array of integers A[ ], its size N, and an integer sum. The function should return the count of pairs (i, j) such that A[i] + A[j] equals sum and i < j. Output: Return the integer count of such pairs. Example: Input (To be used only for expected output) 1 4 1 5 7 -1 6 Output: 2 Explanation 1. Pairs that add up to 6 are (1, 5) and (7, -1). 2. Each pair is counted once. Constraints: 1<=T<=100 1<=N<=10^3 -10^9<=A[i]<=10^9","solution":"def countPairs(arr, n, sum_val): Returns the count of pairs in array `arr` of size `n` that sum up to `sum_val`. count = 0 complement_map = {} for num in arr: complement = sum_val - num if complement in complement_map: count += complement_map[complement] if num in complement_map: complement_map[num] += 1 else: complement_map[num] = 1 return count"},{"question":"A number is called Palprime if it is both a palindrome and a prime number. Given a number N, check whether it is a Palprime or not. Example 1: Input: N = 131 Output: 1 Explanation: 131 is a prime number and also a palindrome. Thus 131 is a Palprime and so, the answer is 1. Example 2: Input: N = 37 Output: 0 Explanation: 37 is a prime number but not a palindrome. So, 37 is not a Palprime and thus, the answer is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPalprime() which takes a number N as input parameter and returns 1 if it is a Palprime number. Otherwise, it returns 0. Expected Time Complexity: O(sqrt(N)) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{9}","solution":"def is_palindrome(n): Helper function to check if a number is a palindrome. return str(n) == str(n)[::-1] def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def isPalprime(N): Function to check if the given number N is both a palindrome and a prime number. Returns 1 if it is a Palprime, otherwise returns 0. if is_palindrome(N) and is_prime(N): return 1 return 0"},{"question":"You are given a list of products with each product being represented by a string. Each product name starts with a single alphabetical character, followed by a series of numeric characters. The alphabetical character represents the product category and the numeric characters represent the sub-category and specific product code within that category. Write a function `filter_products` that takes three parameters: - A list of product names (`product_list`). - A category character (`category`). - A sub-category minimum threshold (`sub_cat_min`). The function should return a list of all product names from the input list that belong to the given category and have a sub-category value greater than or equal to the given threshold. The product names in the output list should appear in the order they were present in the input list. For simplicity, we assume: - All product names follow the format described. - The sub-category numeric value is always the first numeric character(s) after the initial alphabetical character. Example: ```python product_list = [\\"A1234\\", \\"B5678\\", \\"A4321\\", \\"C9999\\", \\"A1111\\", \\"B3333\\"] category = \\"A\\" sub_cat_min = 1500 filter_products(product_list, category, sub_cat_min) ``` Output: ```python [\\"A1234\\", \\"A4321\\"] Explanation: Product \\"A1234\\" and \\"A4321\\" belong to category \'A\' and their sub-category values (1234 and 4321) are greater than the sub-category minimum threshold of 1500. ```","solution":"def filter_products(product_list, category, sub_cat_min): Filters the products based on given category and sub-category minimum threshold. Args: product_list (list): List of product names. category (str): Category character. sub_cat_min (int): Sub-category minimum threshold. Returns: list: List of products that belong to the given category and have sub-category value >= sub_cat_min. filtered_products = [] for product in product_list: if product[0] == category and int(product[1:]) >= sub_cat_min: filtered_products.append(product) return filtered_products"},{"question":"You are given an ordered list of integers. Your task is to find the length of the longest subsequence in which the difference between consecutive elements is the same. -----Input----- The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of elements in the list. The second line contains N integers separated by spaces, representing the elements of the list. -----Output----- For each test case, output a single integer, the length of the longest arithmetic subsequence. -----Constraints----- - 1 ≤ T ≤ 50 - 2 ≤ N ≤ 1000 - -10000 ≤ elements ≤ 10000 -----Sample Input----- 2 5 1 7 10 15 27 6 1 5 7 8 5 15 -----Sample Output----- 2 3 -----Explanation----- In the first test case, the longest subsequence with an identical consecutive element difference is either [7, 15] or [10, 27], giving us a length of 2. In the second test case, the sequence [1, 5, 7] forms a subsequence in which the difference between consecutive elements is 4, giving us a length of 3.","solution":"def longest_arithmetic_subsequence(arr): Returns the length of the longest arithmetic subsequence where the difference between consecutive elements is the same. if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [{} for _ in range(n)] longest_len = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest_len = max(longest_len, dp[i][diff]) return longest_len def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr = case result = longest_arithmetic_subsequence(arr) results.append(result) return results"},{"question":"------ Problem Statement ------ Write a program that accepts a list of words and prints the word with the maximum length. If multiple words have the maximum length, print the first one encountered. ------ Input ------ First line contains the number of words, N. The next N lines each contain one word. ------ Output ------ Print the word with the maximum length from the input list. If there are multiple words with the maximum length, print the first one. ------ Constraints ------ 1 ≤ N ≤ 10 1 ≤ length of each word ≤ 100 ----- Sample Input 1 ------ 5 apple banana grapefruit orange fig ----- Sample Output 1 ------ grapefruit","solution":"def get_max_length_word(words): Returns the word with the maximum length from the input list of words. If multiple words have the maximum length, returns the first one encountered. if not words: return \\"\\" max_length_word = words[0] for word in words[1:]: if len(word) > len(max_length_word): max_length_word = word return max_length_word"},{"question":"Alan is a biologist studying the migratory patterns of birds within a rectangular reserve. To understand how birds move across this habitat, he wants to analyze the regions where different species of birds coexist. Specifically, he aims to identify the coordinates that are visited by both Species A and Species B. -----Input----- The input begins with a single line containing four integers N_a and N_b, representing the number of GPS coordinates recorded for Species A and Species B, and W and H, the width and height of the rectangular reserve in meters, respectively. The next N_a lines contain pairs of integers representing the x and y coordinates of the movements of Species A within the reserve. The following N_b lines contain similar coordinates for Species B. -----Output----- Output the number of unique points of overlap between the movements of Species A and Species B. Each point should be a unique integer pair within the boundaries of the reserve. -----Limits----- - 1 leq N_a, N_b leq 1000 - 0 leq x, y < W, H leq 1000 -----Examples----- Sample Input: 4 3 20 20 10 15 15 10 5 5 10 10 15 10 10 15 5 5 Sample Output: 3","solution":"def overlapping_coordinates(Na, Nb, W, H, coords_A, coords_B): Returns the number of unique points of overlap between the movements of Species A and Species B. # Convert list of coordinates to set to find unique coordinates set_A = set(map(tuple, coords_A)) set_B = set(map(tuple, coords_B)) # Calculate the intersection of the two sets to get the overlapping coordinates overlap = set_A & set_B # Return the number of overlapping coordinates return len(overlap)"},{"question":"You are given a string s and a list of words w_1, w_2, ldots, w_m. The string contains only lowercase English letters, and the words in the list are unique and also contain only lowercase English letters. Your task is to determine if the string s can be segmented into a space-separated sequence of one or more words from the list. A string segmentation is valid if and only if it is possible to segment the entire string into one or more words from the word list without any leftovers. -----Input----- The first line contains a single string s (1 le text{len}(s) le 100000). The second line contains an integer m (1 le m le 10000) — the number of words in the list. The following m lines each contain one word from the list w_i (1 le text{len}(w_i) le 100). -----Output----- Print \\"True\\" (without quotes) if the string s can be segmented into a space-separated sequence of one or more words from the list. Otherwise, print \\"False\\" (without quotes). -----Examples----- Input leetcode 2 leet code Output True Input applepenapple 2 apple pen Output True Input catsandog 5 cats dog sand and cat Output False -----Note----- In the first example, the string s can be segmented as \\"leet code\\" which are both in the word list. In the second example, the string s can be segmented as \\"apple pen apple\\" which are all in the word list. In the third example, the string s cannot be segmented into a sequence of one or more words from the list because there is no way to match the entire string.","solution":"def can_segment_string(s, m, word_list): Determine if string s can be segmented into a space-separated sequence of one or more words from word_list. Args: s (str): The input string. m (int): The number of words in word_list. word_list (list): List of unique words to use for segmentation. Returns: bool: True if the string can be segmented, False otherwise. word_set = set(word_list) dp = [False] * (len(s) + 1) dp[0] = True # An empty string can be segmented in zero ways for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"In a city, there are N buildings aligned in a row along a straight road. Each building has a certain height denoted by h_i (1 ≤ i ≤ N). The city planning committee has decided to install a giant digital billboard on the sides of some consecutive buildings. The billboard will be erected on buildings between positions L and R (inclusive) such that the height of each building from L to R is the same, and the size of the billboard will be R - L + 1. Your task is to calculate the maximum possible size of such a billboard that can be installed. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 1000 - 1 ≤ h_i ≤ 100 -----Input----- Input is given from Standard Input in the following format: N h_1 h_2 h_3 ... h_N -----Output----- Print the maximum possible size of the billboard. -----Sample Input----- 7 1 2 2 2 1 1 1 -----Sample Output----- 3 The maximum size of the billboard can be 3 if it is installed on the buildings at positions 2, 3, and 4 or positions 5, 6, and 7.","solution":"def max_billboard_size(N, heights): Calculates the maximum possible size of a billboard that can be installed on buildings. The billboard can be installed on consecutive buildings that have the same height. :param N: Number of buildings :param heights: List of building heights :return: Maximum size of the billboard max_size = 1 current_size = 1 for i in range(1, N): if heights[i] == heights[i - 1]: current_size += 1 max_size = max(max_size, current_size) else: current_size = 1 return max_size"},{"question":"Given a set of words, you are to categorize them based on their first letter and count how many words fall under each category. -----Input----- The input contains a single line with space-separated words. Each word consists of only lowercase English letters, and has a length between 1 and 15 characters. There will be at least 1 word and at most 100 words. -----Output----- The output should be a list of tuples, each containing a letter and the number of words that start with that letter. The list should be sorted alphabetically by the letter. -----Examples----- Sample Input 1: apple banana apricot orange olive Sample Output 1: [(\'a\', 2), (\'b\', 1), (\'o\', 2)] Sample Input 2: zebra xylophone xenon yak yellow zoo Sample Output 2: [(\'x\', 2), (\'y\', 2), (\'z\', 2)] Note: - Ensure the output is sorted alphabetically by the letter. - If no words start with a certain letter from the alphabet, do not include it in the output.","solution":"def categorize_words_by_first_letter(words): Categorizes words based on their first letter and counts how many words fall under each category. Args: words (str): Space-separated words. Returns: list: List of tuples, each containing a letter and the number of words that start with that letter. if not words: return [] word_list = words.split() category_count = {} for word in word_list: first_letter = word[0] if first_letter in category_count: category_count[first_letter] += 1 else: category_count[first_letter] = 1 return sorted(category_count.items())"},{"question":"A music streaming service wants to categorize their songs based on genres. They have a training dataset where each song belongs to one of three genres: 1 for Pop, 2 for Rock, and 3 for Jazz. Each genre has its own characteristics in terms of keywords that frequently appear in the lyrics. The training dataset can be downloaded from the following link: http://download4.musicclassify.com/training.zip. The archive contains three directories named \\"Pop\\", \\"Rock\\", and \\"Jazz\\". Each directory contains several txt files, each representing a song. The first line of each file contains the song identifier, the second line contains the song name, and the subsequent lines contain the lyrics. You need to write a program that will predict the genre of a given song based on its lyrics. You can assume that all words in the lyrics are separated by spaces and are in lowercase. The test set includes songs not found in the training set. Input The first line contains integer id (0 ≤ id ≤ 106) — the song identifier. The second line contains the name of the song. The third and subsequent lines contain the lyrics of the song until the end of the input. The size of any given song\'s lyrics will not exceed 50 kilobytes. Output Print an integer from 1 to 3, inclusive — the genre number the given song belongs to. Examples","solution":"import os from collections import Counter, defaultdict def load_training_data(training_directory): genres = {\\"Pop\\": 1, \\"Rock\\": 2, \\"Jazz\\": 3} genre_words = defaultdict(Counter) for genre, genre_id in genres.items(): genre_dir = os.path.join(training_directory, genre) for filename in os.listdir(genre_dir): with open(os.path.join(genre_dir, filename), \'r\', encoding=\'utf-8\') as file: lines = file.readlines() lyrics = \\" \\".join(line.strip() for line in lines[2:]) words = lyrics.split() genre_words[genre_id].update(words) return genre_words def predict_genre(song_lyrics, genre_words): words = song_lyrics.split() word_frequencies = Counter(words) genre_scores = {genre: 0 for genre in genre_words} for word, count in word_frequencies.items(): for genre, counter in genre_words.items(): genre_scores[genre] += counter[word] * count return max(genre_scores, key=genre_scores.get) # Load training data once # Replace \'path_to_training_directory\' with the actual path where the training data is extracted # genre_words = load_training_data(\'path_to_training_directory\') def classify_song(id, song_name, lyrics): # genre_words variable should be available here after loading training data # For example, the function should look like: # return predict_genre(lyrics, genre_words) pass"},{"question":"Write a function countAnagramPairs() that takes a list of strings and returns the total number of pairs of strings that are anagrams of each other. Two strings are anagrams if one string can be formed by rearranging the letters of another. For example, \\"listen\\" and \\"silent\\" are anagrams. The function should consider only pairs (i, j) where i < j to avoid counting the same pair twice or considering a string as an anagram of itself. Example input: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"evil\\", \\"vile\\", \\"live\\"] ``` Example output: ```python countAnagramPairs(words) # Output: 5 ``` Explanation: There are 5 anagram pairs in the list: (\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), (\\"silent\\", \\"enlist\\"), (\\"google\\", \\"gogole\\"), (\\"evil\\", \\"vile\\"), (\\"evil\\", \\"live\\"), (\\"vile\\", \\"live\\").","solution":"def countAnagramPairs(words): Returns the total number of pairs of strings that are anagrams of each other from the given list. from collections import defaultdict # Dictionary to store sorted version of words as keys and their indices as values. anagram_dict = defaultdict(list) # Iterate over the list to populate the anagram_dict for i, word in enumerate(words): sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(i) # Calculate the number of anagram pairs from the anagram_dict count = 0 for indices in anagram_dict.values(): n = len(indices) if n > 1: count += (n * (n - 1)) // 2 # Calculate number of pairs return count"},{"question":"A bookstore is organizing a reading challenge. There are N participants and each participant reads a list of books. Each book has a unique ID, and some books have a higher score than others based on predetermined criteria. You are given an array B of length M where B[i] represents the score of the book with ID i+1. You are also given the reading lists of each participant. Each participant\'s reading list contains the IDs of the books they read. Your goal is to calculate the total score for each participant based on their reading list. ------ Input: ------ The first line of input contains a single integer T, denoting the number of test cases. Then the test cases follow. The first line of each test case contains two space-separated integers, N and M, denoting the number of participants and the number of unique books respectively. The second line contains M space-separated integers - B_{1}, B_{2}, ldots, B_{M} where B_{i} denotes the score of the (i+1)^{th} book. Each of the next N lines contains a sequence of space-separated integers representing the IDs of the books read by the participant. Each participant\'s reading list may vary in length and may be empty. ------ Output: ------ For each test case, print N lines, each containing a single integer that represents the total score of the corresponding participant. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ B le 10^{4} 1 ≤ ID_{ij} ≤ M Sum of the lengths of all reading lists in a test case does not exceed 10^{4} 1 ≤ N, M ------ Sample Input: ------ 2 2 3 4 5 6 1 2 2 3 3 2 7 8 1 2 3 2 3 1 ------ Sample Output: ------ 9 11 0 18 ------ Explanation: ------ In the first test case: - First participant reads books 1 and 2, which have scores 4 and 5 respectively. Their total score is 4 + 5 = 9. - Second participant reads books 2 and 3, which have scores 5 and 6 respectively. Their total score is 5 + 6 = 11. In the second test case: - First participant does not read any books, so their total score is 0. - Second participant reads books 2 and 3 and 1, which have scores 7, 8 and 3 respectively. Their total score is 7 + 8 + 3 = 18.","solution":"def calculate_total_scores(T, test_cases): For each test case, calculates the total score for each participant based on their reading lists. Parameters: T : int Number of test cases. test_cases : list of dict Each dict contains the number of participants (N), number of unique books (M), scores array (B), and reading lists of each particpant (lists_of_books_read). Returns: list of list of int Total scores for each participant in all test cases. results = [] for case in test_cases: N = case[\'N\'] M = case[\'M\'] B = case[\'B\'] reading_lists = case[\'reading_lists\'] # Calculate the total scores for each participant scores = [] for reading_list in reading_lists: total_score = 0 for book_id in reading_list: total_score += B[book_id - 1] scores.append(total_score) results.append(scores) return results # Example Usage if __name__ == \\"__main__\\": T = 2 test_cases = [ { \'N\': 2, \'M\': 3, \'B\': [4, 5, 6], \'reading_lists\': [ [1, 2], [2, 3] ] }, { \'N\': 3, \'M\': 2, \'B\': [7, 8], \'reading_lists\': [ [], [2, 3, 1] ] } ] results = calculate_total_scores(T, test_cases) for result in results: for score in result: print(score)"},{"question":"Given a list of strings, where each string represents a file path from a file system with nested directories, provide a function that returns the length of the longest absolute path to a file in the file system. Assume that the input format is as follows: - A string representing a file or directory, where \'n\' separates lines. - A \'t\' character represents the depth of a file or directory. A file is identified by a dot in its name, like \\"file.txt\\". A directory does not contain a dot in its name. The length is defined as the number of characters in the path from the root directory to the file (including \'/\'), but not the number of \'t\' characters. If there are no files in the input, the function should return 0. Example 1: Input: \\"dirntsubdir1ntsubdir2nttfile.ext\\" Output: 20 (\\"dir/subdir2/file.ext\\") Example 2: Input: \\"dirntsubdir1nttfile1.extnttsubsubdir1ntsubdir2nttsubsubdir2ntttfile2.ext\\" Output: 32 (\\"dir/subdir2/subsubdir2/file2.ext\\") Follow up: Can you solve it in a single pass, keeping track of the current directories and their depths in constant extra space?","solution":"def length_longest_path(input): Returns the length of the longest absolute path to a file in the file system represented by the given input string. max_length = 0 path_length = {0: 0} for line in input.split(\'n\'): name = line.lstrip(\\"t\\") depth = len(line) - len(name) if \'.\' in name: # It\'s a file max_length = max(max_length, path_length[depth] + len(name)) else: # It\'s a directory path_length[depth + 1] = path_length[depth] + len(name) + 1 return max_length"},{"question":"A string of round brackets and square brackets is given. Your task is to find the length of the longest substring that contains balanced and properly nested brackets only. Properly nested and balanced brackets mean every opening bracket has a corresponding closing bracket in correct order. Input format: An integer t, 1 ≤ t ≤ 100, denoting the number of testcases, followed by t lines, each containing a single string s, length of each string 1 ≤ |s| ≤ 10^6. Output format: For each string given as input, output the length of the longest balanced substring. SAMPLE INPUT 3 [][()] [[]][] [[][()]] SAMPLE OUTPUT 6 6 8","solution":"def longest_balanced_substring(s): max_length = 0 stack = [] start = -1 for i, char in enumerate(s): if char in \\"([\\": # When we encounter an opening bracket stack.append(i) else: # When we encounter a closing bracket if stack: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: max_length = max(max_length, i - start) else: start = i return max_length def process_input(test_cases): results = [] for s in test_cases: results.append(longest_balanced_substring(s)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) cases = data[1:t+1] results = process_input(cases) for result in results: print(result)"},{"question":"Alice is preparing for a coding competition and has come across a new type of problem that involves transforming a string. She needs to determine the smallest number of operations required to transform a given string `A` into another string `B`. An operation is defined as one of the following actions: 1. Inserting a single character into any position of the string. 2. Deleting a single character from any position of the string. 3. Replacing a single character at any position of the string with another character. Alice has challenged you to write a function that will compute the minimum number of operations required to transform string `A` into string `B`. Input The input consists of a single dataset, which is formatted as follows: A B A and B are the two strings to be transformed. Each string contains only lowercase alphabetical characters (\'a\' - \'z\'). The length of both strings will not exceed 1000 characters. Output For the given dataset, print a single line that contains the minimum number of operations required to transform string `A` into string `B`. Example Input kitten sitting Output 3 Explanation 1. Replace \'k\' with \'s\': \\"kitten\\" -> \\"sitten\\" 2. Replace \'e\' with \'i\': \\"sitten\\" -> \\"sittin\\" 3. Insert \'g\' at the end: \\"sittin\\" -> \\"sitting\\"","solution":"def min_operations(A, B): Returns the minimum number of operations required to transform string A into string B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Min. operations = j (all insertions) elif j == 0: dp[i][j] = i # Min. operations = i (all deletions) elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"Sarah loves arranging books on her bookshelf according to their height. Currently, she has a collection of N books, each with a distinct height. She is only willing to rearrange the books following a specific rule: she can only swap two books if their current heights differ by at most K units. Given the initial arrangement of the books and the desired arrangement, determine if it is possible to achieve the desired arrangement following Sarah\'s rule. -----Input----- The first line contains the integer N, the number of books. The second line contains N integers representing the initial arrangement of the books. The third line contains N integers representing the desired arrangement of the books. The fourth line contains the integer K, the maximum allowed height difference for swapping two books. -----Output----- Print \\"YES\\" if it is possible to achieve the desired arrangement, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ Book height ≤ 10000 - 0 ≤ K ≤ 10000 -----Example----- Input: 5 3 1 4 2 5 1 2 3 4 5 3 Output: YES Explanation: Sarah can rearrange the books as follows: Swap book 1 (height 3) with book 2 (height 1) -> 1, 3, 4, 2, 5 Swap book 3 (height 4) with book 4 (height 2) -> 1, 3, 2, 4, 5 Swap book 2 (height 3) with book 3 (height 2) -> 1, 2, 3, 4, 5 Since all swaps followed the rule (height difference ≤ 3), the desired arrangement is possible, thus output \\"YES\\".","solution":"def can_rearrange_books(N, initial, desired, K): Determines if it is possible to rearrange books to match the desired arrangement given the constraint on height difference K. def can_be_swapped(i, j): return abs(initial[i] - initial[j]) <= K indexed_initial = sorted((height, idx) for idx, height in enumerate(initial)) indexed_desired = sorted((height, idx) for idx, height in enumerate(desired)) if [height for height, _ in indexed_initial] != [height for height, _ in indexed_desired]: return \\"NO\\" pos = {height: idx for idx, (height, _) in enumerate(indexed_initial)} visited = [False] * N for i in range(N): if visited[i] or indexed_initial[i][1] == indexed_desired[i][1]: visited[i] = True continue cycle = [] current = i while not visited[current]: visited[current] = True cycle.append(current) current = indexed_initial[current][1] for j in range(len(cycle) - 1): if not can_be_swapped(cycle[j], cycle[j + 1]): return \\"NO\\" return \\"YES\\""},{"question":"Given an integer array nums of size n, determine if any of its subarrays form a magic square. A subarray is defined as a contiguous portion of the array. A magic square in this context refers to a square where the sums of the numbers in each row, each column, and both main diagonals are the same. Input The first line of input contains an integer n (1 ≤ n ≤ 1·10^5), the size of the array. The second line contains n integers nums[i] (-10^5 ≤ nums[i] ≤ 10^5). Output If any subarray of nums forms a magic square, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input 4 2 7 6 9 Output NO Input 9 4 9 2 3 5 7 8 1 6 Output YES Note A subarray is a contiguous block of the original array. A magic square is a square where the sum of numbers remains consistent across rows, columns, and the main diagonals.","solution":"def is_magic_square(square): Checks if a given 2D list represents a magic square. # Check if all rows have the same sum target_sum = sum(square[0]) for row in square: if sum(row) != target_sum: return False # Check if all columns have the same sum for col in range(len(square[0])): if sum(square[row][col] for row in range(len(square))) != target_sum: return False # Check if diagonals have the same sum if sum(square[i][i] for i in range(len(square))) != target_sum: return False if sum(square[i][len(square)-i-1] for i in range(len(square))) != target_sum: return False return True def check_magic_square_in_array(nums): Determines if any subarray of nums forms a magic square. n = len(nums) if n < 9: return \\"NO\\" for i in range(n - 8): subarray = nums[i:i+9] square = [subarray[j:j+3] for j in range(0, 9, 3)] if is_magic_square(square): return \\"YES\\" return \\"NO\\" # Example usage: # nums = [4, 9, 2, 3, 5, 7, 8, 1, 6] # print(check_magic_square_in_array(nums)) # Outputs: \\"YES\\""},{"question":"Joanna is participating in a programming competition, and she loves solving problems on string manipulations. One of the problems she encountered is to process a string by replacing certain substrings according to specific rules provided. Can you help Joanna solve this problem? -----Input----- The first line contains a single integer r (1 ≤ r ≤ 100) — the number of replacement rules. The next r lines contain a pair of strings s_i and t_i. String s_i (1 ≤ |s_i| ≤ 100) is the substring to be replaced, and string t_i (0 ≤ |t_i| ≤ 100) is the replacement string. It is guaranteed that no two s_i are the same. The following line contains a single integer q (1 ≤ q ≤ 100) — the number of queries. Each of the next q lines contains a string u (1 ≤ |u| ≤ 1000) — the original string for the corresponding query. -----Output----- For each query, output the string obtained after applying all the replacement rules in the given order. If multiple rules can be applied on the same segment of the string, apply the one that appears first in the input. -----Examples----- Input 3 abc xy bc yz a x 2 abcde abcabc Output xyde xyxy","solution":"def process_string(replacement_rules, queries): def apply_rules(s, rules): for old, new in rules: s = s.replace(old, new) return s results = [] for query in queries: result = apply_rules(query, replacement_rules) results.append(result) return results # Example usage: replacement_rules = [(\\"abc\\", \\"xy\\"), (\\"bc\\", \\"yz\\"), (\\"a\\", \\"x\\")] queries = [\\"abcde\\", \\"abcabc\\"] print(process_string(replacement_rules, queries)) # Output: [\'xyde\', \'xyxy\']"},{"question":"Task Write a function that takes a list of integers and returns a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. Solve this without using division and in O(n) time complexity. Examples ```python [1, 2, 3, 4] => [24, 12, 8, 6] [2, 3, 4, 5] => [60, 40, 30, 24] ``` Note - Ensure you handle cases where the input list might be empty. - Do not use division to solve this problem.","solution":"def product_except_self(nums): Given a list of integers, returns a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. Args: nums (List[int]): List of integers Returns: List[int]: List of products n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Boboniu is organizing a charity auction event and needs your help to maximize the total donation collected. There are `n` items, each with a starting bid `b_i` and a premium factor `p_i`. A bidder can place a bid on an item which will increase the donation by `p_i` if the bid exceeds `b_i`. However, there\'s a twist: for each item, once a valid bid is placed (i.e., a bid higher than `b_i`), no other bids on that item will contribute to the donation further. Boboniu can only accept `k` bids in total. Help him determine the maximum possible donation. -----Input----- The first line contains two integers `n` and `k` (1 le n le 1000, 1 le k le n). The next `n` lines each contain two integers `b_i` and `p_i` (0 le b_i, p_i le 10^9). -----Output----- Print one integer: the maximum total donation. -----Examples----- Input 5 3 10 5 20 10 30 15 40 20 50 25 Output 60 Input 4 2 100 50 200 70 300 60 400 80 Output 150 -----Note----- In the first example, you can select the items with the highest premium factors: `50`, `25`, and `20`. The total donation is 5 + 10 + 15 + 20 = 60. In the second example, selecting the items with the highest premium factors between the first and second items i.e. 70 and 80. The total donation is 50 + 70 = 150.","solution":"def max_donation(n, k, items): Returns the maximum total donation by selecting up to k items with the highest premium factors. Parameters: n (int): The number of items. k (int): The number of bids Boboniu can accept. items (list of tuples): Each tuple contains two integers b_i (starting bid) and p_i (premium factor). Returns: int: The maximum total donation possible. # Sort the items by premium factor in descending order items.sort(key=lambda x: x[1], reverse=True) # Sum the highest k premium factors total_donation = sum(item[1] for item in items[:k]) return total_donation"},{"question":"You are given a grid of size `N x N` filled with uppercase English letters. Your task is to find the longest string that can be formed by starting from any cell and moving to its neighboring cells in any of the 8 possible directions (horizontally, vertically, or diagonally) such that the characters in the string are in alphabetical order. You can visit each cell only once in the path. For example: ``` Grid: A B C D Z Y X W A B C D B C D E The longest path is B -> C -> D -> E -> D with length 5 ``` You need to write a function `longest_alphabetical_path(n, grid)` that takes an integer `n` and a 2D list `grid` representing the `N x N` grid, and returns the length of the longest alphabetical path. # Function Signature ```python def longest_alphabetical_path(n, grid): ``` # Input - `n`: An integer `N` (2 <= N <= 50), the size of the grid. - `grid`: A 2D list of characters of size `N x N` # Output - Return an integer representing the length of the longest alphabetical path. # Example ```python grid = [ [\'A\', \'B\', \'C\', \'D\'], [\'Z\', \'Y\', \'X\', \'W\'], [\'A\', \'B\', \'C\', \'D\'], [\'B\', \'C\', \'D\', \'E\'] ] longest_alphabetical_path(4, grid) # Returns 5 ``` # Constraints - The grid size `N` will be such that `2 <= N <= 50`. - Each cell in the grid will contain an uppercase English letter, \'A\' to \'Z\'. - A valid, different path should be found for each grid. - The function should be optimal and run within reasonable time limits. # Notes - You may implement any auxiliary functions to help you solve the problem. - Use depth-first search (DFS) or dynamic programming to optimize your search for the longest path.","solution":"def longest_alphabetical_path(n, grid): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def dfs(x, y, previous_char, memo): if memo[x][y] != -1: return memo[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and ord(grid[nx][ny]) == ord(previous_char) + 1: max_length = max(max_length, 1 + dfs(nx, ny, grid[nx][ny], memo)) memo[x][y] = max_length return max_length memo = [[-1] * n for _ in range(n)] result = 0 for i in range(n): for j in range(n): result = max(result, dfs(i, j, grid[i][j], memo)) return result"},{"question":"Write a function that takes a string representing a mathematical expression with positive integers, \'+\', \'-\', \'*\' (multiplication), and \'/\' (division) operations. The function should evaluate the expression and return the result. Ensure the function handles operator precedence and parentheses correctly. For example: - Input: \\"2 + 3 * 4\\" Output: 14 - Input: \\"10 + (2 * 3) - 4\\" Output: 12 - Input: \\"10 / 2 + 3 * 2\\" Output: 11 If the string contains invalid characters or the expression is malformed, the function should return \\"invalid expression\\".","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result. Handles integer numbers, \'+\', \'-\', \'*\', \'/\' and parentheses. Returns the result of the expression if valid, otherwise returns \\"invalid expression\\". try: # Using eval in a controlled environment return eval(expression, {\\"__builtins__\\": None}, {}) except: return \\"invalid expression\\""},{"question":"Write a function that reads an alphanumeric string and returns a version of the string with all duplicate characters removed. The order of characters should be the same as their first occurrence in the input. Constraints * The input string will contain only alphanumeric characters and have a length between 1 and 10000. Input A single alphanumeric string. Output A single string with duplicates removed, keeping only the first occurrence of each character. Example Input programming Output progamin Input aabbcc Output abc","solution":"def remove_duplicates(s): Returns a string with all duplicate characters removed, keeping only the first occurrence of each character. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are given an array of integers. You can perform operations to increase or decrease the value of any element in the array by 1. Given an integer k, determine the minimum number of operations required to make all elements in the array equal. -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^4) — the number of elements in the array and the maximum number of operations that can be performed. The second line contains n integers, representing the elements of the array. -----Output----- Print the minimum number of operations required to make all elements in the array equal, or -1 if it is not possible with the given k operations. -----Examples----- Input 5 6 1 2 3 4 5 Output 6 Input 3 1 1 5 3 Output -1 -----Note----- In the first sample, you can perform 1 operation to reduce 2 to 1, 2 operations to reduce 3 to 1, 3 operations to reduce 4 to 1, and 4 operations to reduce 5 to 1, totaling 10 operations. But by increasing 1 to 3, reducing 4 to 3, and reducing 5 to 3, you can do it with 6 operations. In the second sample, it is not possible to make all elements equal within 1 operation.","solution":"def minimum_operations_to_equal_elements(n, k, arr): Determines the minimum number of operations required to make all elements in the array equal. Returns -1 if it is not possible with the given k operations. Parameters: n (int): Number of elements in the array. k (int): Maximum number of operations that can be performed. arr (list of int): The elements of the array. Returns: int: The minimum number of operations required or -1 if it is not possible. arr.sort() median = arr[n // 2] total_operations = sum(abs(x - median) for x in arr) if total_operations <= k: return total_operations return -1"},{"question":"#Task: Write a function `find_common_prefix` that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. # Example: ```python >>> find_common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) \\"fl\\" >>> find_common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) \\"\\" ``` # Constraints: * All inputs will be a list of strings with a length between 0 and 200. * All strings in the input list will be non-empty and will consist of lowercase English letters (\'a\' to \'z\') only. * The returned common prefix should also be in lowercase letters. # Notes: * The implementation should be efficient enough to handle edge cases, including when the list is empty or contains strings with varying lengths. * Consider using string and list manipulation techniques to solve the problem in an optimized way. * Avoid using unnecessary loops or recursive methods that might increase the complexity and lead to performance issues.","solution":"def find_common_prefix(strs): Returns the longest common prefix among a list of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Find the shortest string in the list shortest_str = min(strs, key=len) for i, ch in enumerate(shortest_str): for other in strs: if other[i] != ch: return shortest_str[:i] return shortest_str"},{"question":"John is a software developer who likes to practice his problem-solving skills. He has a collection of programming challenges. Each challenge is represented by a string Ci of length less than or equal to 100 (len(Ci) leq 100). John plans to solve some challenges. Given a string T of size M, John determines his success rate by finding the count of unique subsequences of T that match any challenge in his collection. Note: Subsequences are derived from deleting zero or more characters from a string without changing the order of the remaining characters. -----Input:----- - First line will contain K, the number of challenges. - Next K lines will contain a challenge string. - K+2 line contains the M - length of string T - The following line contains the string T. -----Output:----- For each testcase, output in a single line the number of unique subsequences of T that match any challenge in John\'s collection. -----Constraints----- - 1 leq K leq 50 - 2 leq len(Ci) leq 100 - 2 leq M leq 100 -----Sample Input:----- 3 abc def ghi 6 abcdeg -----Sample Output:----- 1 -----Sample Input:----- 3 abc def deg 6 abcdeg -----Sample Output:----- 2 -----EXPLANATION:----- TestCase 1: Only the subsequence \\"abc\\" from \\"abcdeg\\" matches a challenge in the collection. So the answer is 1. TestCase 2: The subsequences \\"abc\\" and \\"def\\" from \\"abcdeg\\" match challenges in the collection. So the answer is 2.","solution":"def count_matching_subsequences(challenges, T): Returns the count of unique subsequences of T that match any challenge in the collection. from itertools import combinations def subsequences(s): sub_seq_set = set() for i in range(len(s) + 1): for combo in combinations(s, i): sub_seq_set.add(\'\'.join(combo)) return sub_seq_set T_subsequences = subsequences(T) count = 0 for challenge in challenges: if challenge in T_subsequences: count += 1 return count"},{"question":"At a prestigious company, employees work in teams to complete various projects. Each team comprises \'n\' employees, and each employee has a unique ID from 1 to n. The progress of the projects is tracked periodically, and for each project, the company evaluates the productivity of its teams. You are given a list of project completion percentages for each team. Each team works on multiple projects, and each project has a unique ID from 1 to k. Each employee\'s productivity contribution to a project is given as a percentage. The company wants to identify the least productive team for a given set of projects. To determine the least productive team, a combination of multiple projects is considered. The productivity is evaluated in the order of priority of projects. Initially, the productivity of teams in the first project is considered. Only those teams which have the lowest productivity in this project (there might be a tie) are further considered for the next project in the sequence. This continues until all the projects in the combination are evaluated. If, after considering all the projects, there\'s still a tie, the team with the smallest total completion percentage across all projects in the combination is declared the least productive. Help the company to determine the least productive team based on the given criteria. Input Format: - First line contains \'n\', the number of employees, and \'k\', the total number of projects. - The next \'n\' lines contain \'k\' integers denoting the completion percentages of projects by each employee. - The next line contains \'q\', the number of queries. - Each query contains a value \'x\' which indicates the number of projects to be considered, followed by \'x\' distinct integers indicating the projects to be considered arranged priority-wise. Output Format: For each query, output the unique ID of the least productive team. Constraints: 1 ≤ n ≤ 1000 1 ≤ k ≤ 20 0 ≤ completion percentage ≤ 100 1 ≤ q ≤ 1000 SAMPLE INPUT 4 4 75 60 80 55 65 75 60 85 80 70 50 60 90 55 65 75 3 2 1 2 3 2 3 4 1 4 SAMPLE OUTPUT 2 4 1 Explanation: In query 1, we have to consider 2 projects. The first project to consider is 1, and the least productive employee based on this project is 2. Since there is no tie, this is the final answer. In query 2, we have to consider 3 projects. The first project to consider is 2, and the least productive employee based on this project is 4. Since there\'s a tie on the first project, we then consider project 3, and 4 remains the least productive. In query 3, we have to consider only 1 project which is project 4. The least productivity is of employee 1 based on this project.","solution":"def find_least_productive_team(n, k, project_data, queries): results = [] for query in queries: x = query[0] project_indices = query[1:] # Initialize sets of team indices remaining_teams = set(range(n)) for project_index in project_indices: # Find the minimum productivity for the current project min_productivity = min(project_data[team][project_index - 1] for team in remaining_teams) # Filter out teams that have a higher productivity than the minimum for the current project remaining_teams = {team for team in remaining_teams if project_data[team][project_index - 1] == min_productivity} # Early exit if a single team remains if len(remaining_teams) == 1: break # If there\'s still a tie, resolve by the smallest total completion percentage across the projects in the combination if len(remaining_teams) > 1: total_completion_percentages = { team: sum(project_data[team][project_index - 1] for project_index in project_indices) for team in remaining_teams } least_productive_team = min(total_completion_percentages, key=total_completion_percentages.get) else: least_productive_team = min(remaining_teams) # The team IDs are 1-indexed results.append(least_productive_team + 1) return results"},{"question":"We are developing an automated system to manage reservations for a small library with a limited number of study rooms. Each study room can be reserved for any duration between 9 AM to 5 PM. Multiple rooms cannot overlap in reservations, i.e., no two reservations can have any period of time in common in the same room. Your task is to write a function that, given a list of reservations, determines if a new reservation can be made without conflicting with any existing reservations. ----- Input ----- The input consists of two parts: 1. An integer N (0 ≤ N ≤ 50), the number of existing reservations. 2. A list of N tuples, each containing two strings representing the start and end times in \\"HH:MM\\" 24-hour format. The times will always be within the 9 AM to 5 PM range, making the acceptable times from \\"09:00\\" to \\"17:00\\". 3. A tuple containing the start and end time of the new reservation. ----- Output ----- Output a single string, \\"YES\\" if the new reservation can be made without conflicts, or \\"NO\\" if it overlaps with any existing reservation. ----- Example ----- Sample Input: 3 [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"12:00\\"), (\\"13:00\\", \\"15:00\\")] (\\"12:00\\", \\"13:00\\") Sample Output: YES Sample Input: 3 [(\\"09:00\\", \\"10:30\\"), (\\"10:30\\", \\"12:00\\"), (\\"13:00\\", \\"15:00\\")] (\\"11:00\\", \\"12:30\\") Sample Output: NO ----- Constraints ----- - Ensure that the solution handles edge cases where times are exactly at the boundary of existing reservations (e.g., a reservation ending at \\"10:30\\" and another starting at \\"10:30\\" do not overlap). - Assume that times given in input are always valid and correctly formatted.","solution":"def can_reserve(N, reservations, new_reservation): Determines if a new reservation can be made without conflicting with any existing reservations. Parameters: - N: int, number of existing reservations - reservations: list of tuples, each tuple contains start and end times in \\"HH:MM\\" 24-hour format - new_reservation: tuple, start and end time of the new reservation in \\"HH:MM\\" 24-hour format Returns: - \\"YES\\" if the new reservation can be made without conflicts, \\"NO\\" otherwise new_start, new_end = new_reservation for start, end in reservations: # Check if there is any overlap if not (new_end <= start or new_start >= end): return \\"NO\\" return \\"YES\\""},{"question":"David is working on a project where he needs to analyze the frequency of elements in a list. He wants to know how many times the most frequent element appears. Can you help him write a function to determine this? Given an integer array `arr` of size `N`, return the count of the most frequent element in the array. Input: - The first line contains a single integer `N` (1 ≤ N ≤ 10^5), the number of elements in the array. - The second line contains `N` integers representing the elements of the array (1 ≤ arr[i] ≤ 10^6). Output: - Output a single integer, the count of the most frequent element in the array. SAMPLE INPUT 7 1 3 1 3 2 1 3 SAMPLE OUTPUT 3 Explanation The element `1` appears `3` times and the element `3` also appears `3` times, which is the highest frequency. Therefore the output is `3`. Note: You are required to develop an efficient solution, as a naive approach might not run within the time limits for large values of `N`.","solution":"def most_frequent_element_count(arr): Given a list of integers, returns the count of the most frequent element. from collections import Counter # Using counter to count the frequency of elements frequency_count = Counter(arr) # Getting the maximum frequency max_frequency = max(frequency_count.values()) return max_frequency # Example usage: # N = 7 # arr = [1, 3, 1, 3, 2, 1, 3] # print(most_frequent_element_count(arr)) # Output: 3"},{"question":"Create a function that accepts a string and returns a dictionary with the counts of each character in the string. The case of the characters should be ignored, meaning \'A\' and \'a\' are considered the same character. For example: ``` character_count(\'Hello, World!\') ``` should return: ``` {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` **Notes:** - Ignore non-alphabetic characters. - The function should be case-insensitive. - The dictionary should have lowercase characters as keys. Here\'s a step-by-step outline of what the function should do: 1. Convert the string to lowercase. 2. Iterate over each character in the string. 3. If the character is an alphabetic character, increment its count in the dictionary. 4. Return the dictionary with the character counts.","solution":"def character_count(s): Returns a dictionary with counts of each character in the string, ignoring case and non-alphabetic characters. Parameters: s (str): The input string Returns: dict: A dictionary where keys are characters and values are their counts. # Convert the string to lowercase to ignore case s = s.lower() # Initialize an empty dictionary to store the character counts counts = {} # Iterate over each character in the string for char in s: # Check if the character is alphabetic if char.isalpha(): # Increment the character count in the dictionary if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"question":"Lisa is tracking the stock prices of a company over n days, represented as an array of integers where the i-th element is the stock price on day i. She wants to determine the maximum possible profit she can achieve by buying and selling the stock exactly once. Note that she must buy the stock before selling it. Help Lisa find the maximum profit she can achieve from these stock prices. -----Input----- The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (2 leq n leq 10^5) — the number of days. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the stock prices on each day. The sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer representing the maximum profit Lisa can achieve. If no profit can be made, print 0. -----Examples----- Input 3 6 7 1 5 3 6 4 5 7 6 4 3 1 4 1 2 90 10 Output 5 0 89 -----Note----- In the first test case, the optimal strategy is to buy on day 2 (price 1) and sell on day 5 (price 6) for a profit of 6 - 1 = 5. In the second test case, there is no day where the stock price is higher than any previous day, so no profit can be made. In the third test case, the optimal strategy is to buy on day 1 (price 1) and sell on day 3 (price 90) for a profit of 90 - 1 = 89.","solution":"def max_profit(prices): Returns the maximum profit achievable by buying and selling the stock exactly once. If no profit can be made, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: max_profit = max(max_profit, price - min_price) min_price = min(min_price, price) return max_profit def solve(test_cases): Solves the problem for all test cases and prints the results. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"Sarah is passionate about string manipulation and she is currently working on a problem where she needs to determine if two strings are anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Sarah needs a program that can quickly determine if two given strings are anagrams. -----Input----- The input consists of two lines. Each line contains a string S_i (1 leq length(S_i) leq 100000). The input strings contain only lowercase English letters. -----Output----- Output “Anagram” if the strings are anagrams of each other, otherwise “Not Anagram”. -----Examples----- Sample Input: listen silent Sample Output: Anagram Sample Input: apple pale Sample Output: Not Anagram","solution":"def are_anagrams(str1, str2): Returns \'Anagram\' if str1 and str2 are anagrams of each other, otherwise returns \'Not Anagram\'. if sorted(str1) == sorted(str2): return \\"Anagram\\" else: return \\"Not Anagram\\""},{"question":"You are given a sequence of integers. You need to perform operations in such a way that after each operation, the sum of the entire sequence increases while keeping all elements of the sequence non-negative. An operation consists of choosing any integer in the sequence, removing it, and then inserting one or more integers that sum up to the removed integer. Write a program to perform the operations until it is no longer possible to increase the sum of the sequence. -----Input----- The first line contains a positive integer n (1 leq n leq 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the sequence. -----Output----- Output a single integer — the maximum possible sum of the sequence after performing the operations. -----Example----- Input: 5 1 2 3 4 5 Output: 14 -----Note----- In the example, you can perform the following operations: - Choose 1, and replace it with 1 and 1. The sequence becomes [1, 1, 2, 3, 4, 5] with sum 16. - Choose 1 again, and replace it with 1 and 1. The sequence becomes [1, 1, 1, 2, 3, 4, 5] with sum 17. However, repeating this will not increase the sum further without violating the non-negative condition.","solution":"def max_possible_sum(n, sequence): # As replacement of an element with any combination adds to the replaced element # itself, there is no chance to increase the sum. Just return the sum of the elements. return sum(sequence)"},{"question":"An escape room contains a series of interconnected rooms arranged in a rectangular grid. Each room may contain a key, and some keys may be required to unlock certain doors between rooms. Your task is to find the minimum number of keys required to unlock all the rooms in order to escape. You start in the top left corner of the grid and must find a way to the bottom right corner. You can move up, down, left, or right. Some rooms contain keys needed to unlock a subset of doors between rooms, while other keys are not required for any doors. Constraints * 2 ≤ n, m ≤ 10 * Each room may contain at most one key. * The grid is always solvable, meaning there is always at least one valid path from start to finish. * All required keys are somewhere on the grid. * The starting room (top left corner) and the ending room (bottom right corner) do not contain keys. Input The first line contains two integers n and m — the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, either: * \'.\' (indicating an empty room), * \'#\' (indicating a locked door), or * \'K\' (indicating a room containing a key). An additional line follows, containing an integer q, detailing the number of locked doors on the grid. The last q lines each contain three integers: r1, c1, r2, c2, representing a door that can be unlocked by a key, connecting the room at row r1, column c1, and the room at row r2, column c2. Output Print the minimum number of keys required to unlock all the doors and escape from the top left corner to the bottom right corner of the grid. Examples Input 3 3 . K . # . # K K . 1 0 1 1 1 Output 2 Input 4 4 . K # K # . . # K K . K . # K . 2 0 2 1 2 2 1 3 1 Output 3","solution":"def min_keys_to_escape(n, m, grid, q, doors): from collections import deque, defaultdict def is_valid(x, y, n, m): return 0 <= x < n and 0 <= y < m def bfs(start, end, grid, required_doors): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start[0], start[1], set())]) visited = set((start[0], start[1])) while queue: x, y, keys = queue.popleft() if (x, y) == end: return len(keys) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m) and (nx, ny) not in visited: if grid[nx][ny] == \'#\': if (x, y, nx, ny) in required_doors and required_doors[(x, y, nx, ny)] in keys: queue.append((nx, ny, keys)) visited.add((nx, ny)) else: new_keys = keys.copy() if grid[nx][ny] == \'K\': new_keys.add((nx, ny)) queue.append((nx, ny, new_keys)) visited.add((nx, ny)) return -1 required_doors = defaultdict(set) for r1, c1, r2, c2 in doors: if grid[r1][c1] == \'K\': required_doors[(r1, c1, r2, c2)] = (r1, c1) elif grid[r2][c2] == \'K\': required_doors[(r1, c1, r2, c2)] = (r2, c2) return bfs((0, 0), (n-1, m-1), grid, required_doors)"},{"question":"In a rectangular garden, there are a variety of plants arranged in a grid formation. The garden has n rows and m columns, and each cell in the grid represents a plant. A plant can either be healthy (represented by 1) or unhealthy (represented by 0). A plant is said to be healthy if it is 1, and unhealthy if it is 0. However, every night due to a specific condition, any unhealthy plant that is adjacent (top, bottom, left, or right) to a healthy plant will turn healthy. Your task is to determine the number of nights it will take for all plants in the garden to become healthy. If it is not possible for all plants to become healthy, return -1. --- Constraints --- 1 ≤ n, m ≤ 50 The grid will contain at least one unhealthy plant (0). --- Input --- Input is given from Standard Input in the following format: n m grid (consisting of n lines with m integers separated by space) --- Output --- Print the number of nights it will take for all plants to become healthy, or -1 if it is not possible. --- Sample Input --- 3 3 1 0 1 0 0 0 1 0 1 --- Sample Output --- 2 Explanation: Night 1: 1 1 1 1 0 1 1 1 1 Night 2: 1 1 1 1 1 1 1 1 1","solution":"def nights_to_all_healthy(n, m, grid): from collections import deque # Direction vectors for adjacent cells (top, bottom, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() unhealthy_count = 0 # Initialize queue with all healthy plants positions and count unhealthy plants for i in range(n): for j in range(m): if grid[i][j] == 1: queue.append((i, j)) else: unhealthy_count += 1 # If no unhealthy plant is present if unhealthy_count == 0: return 0 nights = 0 # BFS to spread healthiness while queue and unhealthy_count > 0: nights += 1 for _ in range(len(queue)): x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0: grid[nx][ny] = 1 queue.append((nx, ny)) unhealthy_count -= 1 # If there are still unhealthy plants left return nights if unhealthy_count == 0 else -1 # Parsing input for testing purposes def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) grid = [list(map(int, line.split())) for line in input_lines[1:]] return n, m, grid"},{"question":"Write a function, `transformList(lst)`, that takes a list of integers as input and returns a new list where each element is the product of all the elements in the original list except for the element at the current index. For example, given `lst = [1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` because: - The first element is the product of the elements at indices 1, 2, and 3: `2 * 3 * 4 = 24`. - The second element is the product of the elements at indices 0, 2, and 3: `1 * 3 * 4 = 12`. - The third element is the product of the elements at indices 0, 1, and 3: `1 * 2 * 4 = 8`. - The fourth element is the product of the elements at indices 0, 1, and 2: `1 * 2 * 3 = 6`. Note: - Do not use division in your solution. - Aim for a time complexity of O(n). Implement the `transformList(lst)` function to achieve the described transformation.","solution":"def transformList(lst): Returns a list where each element is the product of all elements in the original list except for the element at the current index, without using division. n = len(lst) if n == 0: return [] # Initialize two lists for prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * lst[i - 1] # Calculate suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * lst[i + 1] # Calculate the result by multiplying prefix and suffix products result = [0] * n for i in range(n): result[i] = prefix_products[i] * suffix_products[i] return result"},{"question":"Anna is a librarian and wants to organize a list of book titles in alphabetical order for her new catalog system. Each title is a string that may contain spaces and punctuation. Write a program to sort the list of book titles in lexicographical order. -----Constraints----- - The number of book titles will not exceed 1000. - Each title will contain between 1 and 100 characters. -----Input----- The input is given from Standard Input in the following format: - The first line contains an integer N, the number of book titles. - The next N lines contain one book title per line. -----Output----- Print N lines where each line contains one book title in lexicographical order. -----Sample Input----- 3 The Great Gatsby To Kill a Mockingbird 1984 -----Sample Output----- 1984 The Great Gatsby To Kill a Mockingbird","solution":"def sort_titles(titles): Sorts a list of book titles in lexicographical order. Args: titles (list): A list of strings containing book titles. Returns: list: A list of book titles sorted in lexicographical order. return sorted(titles) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split(\'n\') n = int(data[0]) titles = data[1:n+1] sorted_titles = sort_titles(titles) for title in sorted_titles: print(title)"},{"question":"You are given a string consisting of lowercase English letters and an integer, k. Your task is to determine whether it is possible to rearrange the letters of the string such that any two adjacent characters are at least distance k apart. Input: The first line contains the string s (1 ≤ |s| ≤ 10^5), which consists of lowercase English letters. The second line contains the integer k (1 ≤ k ≤ |s|). Output: Print \\"YES\\" if it is possible to rearrange the string so that no two adjacent characters are less than distance k apart. Otherwise, print \\"NO\\". Examples: Input: aabbcc 2 Output: YES Input: aaabc 3 Output: NO Input: aaadbbcc 2 Output: YES Note: In the first sample, one possible valid arrangement is \\"abacbc\\". In the second sample, it is not possible to rearrange the string such that no two adjacent occurrences of \'a\' are less than distance 3 apart. In the third sample, one possible valid arrangement is \\"abacabdc\\". Your approach should focus on using a priority queue to attempt to place the most frequent characters first and ensure the k-distancing constraint.","solution":"from collections import Counter import heapq def can_rearrange_string(s, k): if k == 0: return \\"YES\\" frequency = Counter(s) max_heap = [(-count, char) for char, count in frequency.items()] heapq.heapify(max_heap) result = [] heap = [] while max_heap: to_append = [] for _ in range(k): if max_heap: count, char = heapq.heappop(max_heap) result.append(char) if -count > 1: to_append.append((count + 1, char)) elif to_append: return \\"NO\\" for item in to_append: heapq.heappush(max_heap, item) return \\"YES\\""},{"question":"Given a binary tree, return all root-to-leaf paths as a list of strings. A leaf is a node with no children. The binary tree is represented as follows: - Each node has a unique integer value. - The tree structure is given as a list of tuples, where each tuple contains two integer values representing a node and its child. Example 1: Input: nodes = [(1, 2), (1, 3), (2, 4), (3, 5), (3, 6)] Output: [\\"1->2->4\\", \\"1->3->5\\", \\"1->3->6\\"] Explanation: The tree structure is as follows: 1 / 2 3 / / 4 5 6 The root-to-leaf paths are: \\"1->2->4\\", \\"1->3->5\\", \\"1->3->6\\". Example 2: Input: nodes = [(7, 2), (7, 3), (2, 5), (3, 1)] Output: [\\"7->2->5\\", \\"7->3->1\\"] Explanation: The tree structure is: 7 / 2 3 / 5 1 The root-to-leaf paths are: \\"7->2->5\\", \\"7->3->1\\". Your Task: You don\'t need to read or print anything. Your task is to complete the function `binaryTreePaths()` which takes the list of tuples representing tree nodes as input parameter, constructs the binary tree, and returns a list of all root-to-leaf paths as strings. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 ≤ |nodes| ≤ 200 1 ≤ node values ≤ 10^4","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): from collections import defaultdict tree = {} children = set() for parent, child in nodes: if parent not in tree: tree[parent] = TreeNode(parent) if child not in tree: tree[child] = TreeNode(child) children.add(child) if tree[parent].left is None: tree[parent].left = tree[child] else: tree[parent].right = tree[child] root_val = (set(tree.keys()) - children).pop() return tree[root_val] def binaryTreePaths(nodes): if not nodes: return [] root = build_tree(nodes) def dfs(node, path, paths): if node: if not node.left and not node.right: # If it\'s a leaf paths.append(path + str(node.val)) if node.left: dfs(node.left, path + str(node.val) + \\"->\\", paths) if node.right: dfs(node.right, path + str(node.val) + \\"->\\", paths) paths = [] dfs(root, \\"\\", paths) return paths"},{"question":"You are given a string and a list of words. Your task is to determine if the string can be segmented into a sequence of one or more dictionary words from the given list. -----Input----- The first line contains a single string s, consisting of lowercase English letters (1 leq |s| leq 10^4) — the string to be segmented. The second line contains an integer n (1 leq n leq 10^3) — the number of words in the word list. Each of the next n lines contains a word, consisting of lowercase English letters (1 leq |word_i| leq 20) — the words in the list. -----Output----- Print \\"YES\\" (without quotes) if the string can be segmented into a sequence of one or more dictionary words from the list. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input leetcode 4 leet code apple pen Output YES Input applepenapple 4 apple pen pine taco Output YES Input catsanddog 5 cats dog sand and cat Output YES Input catsandog 5 cats dog sand and cat Output NO -----Note----- In the first test, the string \\"leetcode\\" can be segmented as \\"leet code\\". In the second test, the string \\"applepenapple\\" can be segmented as \\"apple pen apple\\". In the third test, the string \\"catsanddog\\" can be segmented as \\"cats and dog\\". In the fourth test, there is no way to segment the string \\"catsandog\\" to use only the words from the list.","solution":"def can_segment_string(s, word_list): word_set = set(word_list) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[-1] else \\"NO\\""},{"question":"Given an array of integers, find the minimum subarray length such that the sum of its elements is greater than or equal to a given target value. Example `arr = [2, 3, 1, 2, 4, 3], target = 7` The minimum subarray length is `2`. One such subarray is `[4, 3]`. Function Description Complete the `minSubArrayLen` function in the editor below. `minSubArrayLen` has the following parameters: - `int target`: the target sum - `int[] arr`: the list of integers Returns `int`: the minimum length of a subarray with sum at least `target`, or `0` if no such subarray exists. Input Format The first line contains an integer `target`, the target sum. The second line contains an integer `n`, the size of the array. The next line contains `n` space-separated integers representing the elements of the array. Constraints - 1 leq n leq 10^5 - 1 leq arr[i] leq 10^4 - 1 leq target leq 10^9 Sample Input 0 7 6 2 3 1 2 4 3 Sample Output 0 2 Explanation 0 The task is to find the minimum subarray length of the array `[2, 3, 1, 2, 4, 3]` such that the sum is at least `7`. The subarray `[4, 3]` has sum `7` and length `2`, which is the minimum possible. Sample Input 1 15 5 1 2 3 4 5 Sample Output 1 5 Explanation 1 The task is to find the minimum subarray length of the array `[1, 2, 3, 4, 5]` such that the sum is at least `15`. The only subarray that meets the criteria is the array itself, with a length of `5`.","solution":"def minSubArrayLen(target, arr): Returns the minimum length of a subarray such that its sum is at least target. If no such subarray exists, returns 0. n = len(arr) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given a list of integers representing the heights of N buildings arranged in a line. You are also given an integer K which is the number of consecutive buildings you can consider as a group. Your task is to find the maximum possible height difference between the tallest and shortest building in any group of K consecutive buildings. -----Constraints----- - 1 leq N leq 1000 - 1 leq K leq N - 1 leq height_i leq 10^6 - Each height_i is an integer. -----Input----- The input is given from Standard Input in the following format: N K height_1 height_2 ... height_N -----Output----- Print one line containing the maximum possible height difference in any group of K consecutive buildings. -----Sample Input----- 5 3 1 5 9 3 8 -----Sample Output----- 6 In this example, considering the subsequence of K=3 buildings we have the maximum height differences as follows: - Heights [1, 5, 9]: Difference is 8 (9-1) - Heights [5, 9, 3]: Difference is 6 (9-3) - Heights [9, 3, 8]: Difference is 6 (9-3) Thus, the maximum possible height difference is 6.","solution":"def max_height_difference(N, K, heights): Returns the maximum possible height difference between the tallest and shortest building in any group of K consecutive buildings. :param N: Integer, number of buildings :param K: Integer, number of consecutive buildings to consider :param heights: List of integers, heights of the buildings :return: Integer, the maximum height difference max_diff = 0 for i in range(N - K + 1): current_group = heights[i:i + K] current_diff = max(current_group) - min(current_group) max_diff = max(max_diff, current_diff) return max_diff # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) heights = list(map(int, data[2:])) print(max_height_difference(N, K, heights))"},{"question":"-----Input----- The first line of input contains a single integer N (1 ≤ N ≤ 100) — the number of strings you have. The next N lines contain a single word each, consisting only of lowercase English letters. Each word is between 1 and 10 characters long. -----Output----- Output a single line containing the longest palindromic substring found among all the words. If multiple longest palindromic substrings exist, output the one that appears first lexicographically. -----Examples----- Input 5 racecar level radar refer deified Output deified Input 3 banana civic rotor Output anana","solution":"def longest_palindromic_substring(n, words): def is_palindrome(word): return word == word[::-1] # Initialize the variable to store the longest palindromic substring longest_palindrome = \\"\\" for word in words: length = len(word) for i in range(length): for j in range(i + 1, length + 1): substring = word[i:j] if is_palindrome(substring): # Check if the current palindrome is longer than the stored one # or if they are the same length but lexicographically smaller if (len(substring) > len(longest_palindrome) or (len(substring) == len(longest_palindrome) and substring < longest_palindrome)): longest_palindrome = substring return longest_palindrome"},{"question":"A company has a large-scale auction system. The auction system has several ongoing auctions, and each auction has multiple bids being placed throughout its duration. Your task is to analyze the auction activities to determine the highest bid placed in each auction. -----Input----- The first line contains the integer N (1 leq N leq 100), the number of auctions. Each of the next N lines starts with an integer M (1 leq M leq 100), the number of bids in that auction followed by M integers representing the bid amounts. -----Output----- Output N lines, each containing a single integer representing the highest bid in each respective auction. -----Examples----- Sample Input 1: 2 3 50 65 77 4 80 90 55 45 Sample Output 1: 77 90 Sample Input 2: 1 5 20 30 25 35 40 Sample Output 2: 40","solution":"def highest_bids_per_auction(auction_data): This function takes auction data and returns the highest bid from each auction. Parameters: auction_data (list of list of int): A list where each sublist represents an auction, and contains bids for that auction. Returns: list of int: A list containing the highest bid from each auction. highest_bids = [] for auction in auction_data: highest_bids.append(max(auction)) return highest_bids def parse_input(input_str): This function takes a formatted string input, parses it, and returns the auction data. Parameters: input_str (str): Formatted input string representing the number of auctions and their bids. Returns: list of list of int: Parsed auction data. lines = input_str.strip().split(\'n\') number_of_auctions = int(lines[0]) auction_data = [] for i in range(1, number_of_auctions + 1): auction_bids = list(map(int, lines[i].split()[1:])) auction_data.append(auction_bids) return auction_data def main(input_str): Main function to process the input string and return the highest bids for each auction. Parameters: input_str (str): Formatted input string representing the number of auctions and their bids. Returns: list of int: List of highest bids for each auction. auction_data = parse_input(input_str) return highest_bids_per_auction(auction_data)"},{"question":"Given a number n, check if it can be expressed as the sum of two prime numbers. -----Input:----- - N — the number to check for the prime sum representation. -----Output:----- - Print \\"YES\\" if the number can be expressed as the sum of two prime numbers. - Otherwise, print \\"NO\\". -----Constraints----- - 4 leq N leq 10^6 -----Sample Input:----- 34 -----Sample Output:----- YES","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_be_expressed_as_sum_of_two_primes(n): Check if the number n can be expressed as the sum of two prime numbers. for i in range(2, n // 2 + 1): if is_prime(i) and is_prime(n - i): return \\"YES\\" return \\"NO\\""},{"question":"A subsequence of a string is called a palindrome if it reads the same forward and backward. A subsequence is derived from the original string by deleting some or none of the characters without changing the order of the remaining characters. You are given a string S and you need to answer Q queries. Each query is given by a substring S[L:R] where you need to find the length of the longest palindromic subsequence that can be derived from this substring. -----Input----- - The first line of the input contains a single integer Q denoting the number of queries. - The second line contains a single string S. - Each of the next Q lines contains two space-separated integers L and R describing a query. -----Output----- For each query, print a single line containing the length of the longest palindromic subsequence for the given substring. -----Constraints----- - 1 le Q le 10^4 - 1 le |S| le 10^4 - 1 le L le R le |S| - S contains only lowercase English letters -----Example Input----- 3 banana 1 3 1 6 3 6 -----Example Output----- 1 5 3","solution":"def longest_palindromic_subsequence(S, queries): n = len(S) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) results = [] for L, R in queries: results.append(dp[L - 1][R - 1]) return results"},{"question":"You are given an integer array \'A\' of size \'N\'. Your task is to perform the following operations using NumPy and produce the respective outputs: 1. Compute the cumulative sum of the elements in \'A\'. 2. Compute the cumulative product of the elements in \'A\'. 3. Compute the mean of the elements in \'A\'. 4. Compute the variance of the elements in \'A\'. 5. Compute the standard deviation of the elements in \'A\'. Input Format: - The first line contains an integer \'N\', the size of the array. - The second line contains \'N\' space-separated integers representing the array \'A\'. Output Format: Print the result of each operation on a new line in the given order specified in the Task. Sample Input: 5 1 2 3 4 5 Sample Output: [ 1 3 6 10 15] [ 1 2 6 24 120] 3.0 2.0 1.4142135623730951 Note: - Use the numpy.cumsum() function to compute the cumulative sum. - Use the numpy.cumprod() function to compute the cumulative product. - Use the numpy.mean() function to compute the mean. - Use the numpy.var() function to compute the variance. - Use the numpy.std() function to compute the standard deviation.","solution":"import numpy as np def process_array(N, A): cum_sum = np.cumsum(A) cum_prod = np.cumprod(A) mean = np.mean(A) variance = np.var(A) std_dev = np.std(A) return cum_sum, cum_prod, mean, variance, std_dev"},{"question":"Alice is playing a game with a string, `s`, composed of lowercase English letters. She can perform the following operation any number of times (including zero): Select two consecutive same characters in `s` and remove them from the string. For example, given the string \\"abccba\\", Alice can remove the \\"cc\\" to get \\"abba\\". Alice wants to know the length of the final string after she performs the operation as many times as possible. -----Input----- The input consists of a single string `s` (1 leq |s| leq 100,000) composed of lowercase English letters. -----Output----- Output a single integer — the length of the final string after performing the operation as many times as possible. -----Examples----- Input abbaca Output 3 Input aab Output 1 -----Note----- In the first example \\"abbaca\\", the operations can be applied as follows: - Remove \\"bb\\" to get \\"aaca\\" - Remove \\"aa\\" to get \\"ca\\" The final string \\"ca\\" has a length of 2. In the second example \\"aab\\", the operations can be applied as follows: - Remove \\"aa\\" to get \\"b\\" The final string \\"b\\" has a length of 1.","solution":"def final_string_length(s): Returns the length of the final string after performing the operation as many times as possible. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"The kingdom of Arithmoria consists of N cities, which are identified by consecutive integers from 1 to N. As the newly appointed Minister of Transportation, your task is to optimize the construction of train routes between specified pairs of cities. Each train route incurs a maintenance cost per kilometer, which is given for the route. Your goal is to identify a set of train routes that allow every city to be reached from any other city while minimizing the total maintenance cost, considering the given distance limits. Formulate a program that computes the minimum total maintenance cost to achieve this. If it is impossible to connect all cities, your program should return \\"Impossible\\". Input The input is given in the following format: ``` N M u1 v1 d1 u2 v2 d2 ... uM vM dM ``` - The first line contains two integers N (2 leq N leq 10^5) and M (1 leq M leq 2 times 10^5), representing the number of cities and the number of train routes respectively. - Each of the following M lines contains three integers u_i, v_i, and d_i (1 leq u_i, v_i leq N and 1 leq d_i leq 10^6), where u_i and v_i are the cities connected by the train route, and d_i is the distance of the route in kilometers. Output Output the minimum total maintenance cost as an integer. If it is not possible to connect all cities, output \\"Impossible\\". Example Input ``` 4 5 1 2 3 2 3 4 3 4 5 1 3 8 2 4 2 ``` Output ``` 9 ``` Input ``` 4 2 1 2 3 3 4 5 ``` Output ``` Impossible ```","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def min_maintenance_cost(N, M, edges): parent = [] rank = [] for node in range(N): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) result = [] e = 0 i = 0 while e < N - 1: if i >= M: return \\"Impossible\\" u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) min_cost = 0 for u, v, weight in result: min_cost += weight return min_cost"},{"question":"You are given two strings, `a` and `b`, both of the same length. Alice and Bob play a game with these strings, where they take turns to modify the strings according to the following rules: 1. **Alice** can choose any character `a[i]` and change it to a character that comes alphabetically after it. 2. **Bob** can choose any character `b[i]` and change it to a character that comes alphabetically before it. Alice always goes first and the players alternate turns until the strings are identical or no more moves can be made. The player unable to make a move loses the game. Write a function to determine which player will win if they both play optimally. Input: - `a` and `b` are given as strings of lowercase English letters. - The lengths of `a` and `b` are equal and range from 1 to 1000. Output: - Output \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. Examples: Input: ``` abc bcd ``` Output: ``` Alice ``` Input: ``` zzz aaa ``` Output: ``` Bob ``` Input: ``` abc bac ``` Output: ``` Bob ```","solution":"def determine_winner(a, b): Determines the winner of the game played by Alice and Bob. Alice can only increment characters in string `a` while Bob can only decrement characters in string `b`. :param a: string a :param b: string b :return: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins score = 0 for char_a, char_b in zip(a, b): if char_a == char_b: continue elif char_a > char_b: score -= 1 else: score += 1 if score > 0: return \\"Alice\\" elif score < 0: return \\"Bob\\" else: # If score is 0, it means strings are already the same or balanced moves are made return \\"Bob\\""},{"question":"Given an array of integers nums and an integer k, return the number of unique contiguous subarrays that sum to k. Example 1: Input: nums = [1, 1, 1], k = 2 Output: 2 Explanation: The subarrays [1, 1] and [1, 1] both sum to 2. Example 2: Input: nums = [1, 2, 3], k = 3 Output: 2 Explanation: The subarrays [1, 2] and [3] both sum to 3. Example 3: Input: nums = [-1, -1, 1], k = 0 Output: 1 Explanation: The subarray [-1, 1] sums to 0. Note: The length of the input array is in the range [1, 10000] and the range of the integers can be [-1000, 1000].","solution":"def subarraySum(nums, k): Return the number of unique contiguous subarrays that sum to k. Args: nums: List of integers. k: Integer, the target sum. Returns: Integer, the number of unique contiguous subarrays that sum to k. count = 0 sum_count = {0: 1} current_sum = 0 for num in nums: current_sum += num if current_sum - k in sum_count: count += sum_count[current_sum - k] if current_sum in sum_count: sum_count[current_sum] += 1 else: sum_count[current_sum] = 1 return count"},{"question":"Given a Binary Search Tree (BST) of size N, your task is to complete the function isBalanced() that should determine if the BST is balanced or not. A BST is considered balanced if the height difference between the left and right subtrees of every node is not more than 1. Input: First line of input contains the number of test cases T. For each test case, there will be three lines: First line of each test case will be an integer N denoting the number of nodes. Second line of each test case will contain N space-separated integers denoting the elements of the BST in the order they are inserted. Third line of each test case will print the level order traversal of the tree in the form of (int, int char) tuples. Each tuple will contain three space-separated elements of the form (parent, child, char). - The first integer element will be the value of parent. - The second integer will be the value which is the corresponding child. If the child is null, this value will be -1. - The third element of the tuple which is a character can take any of the three values ‘L’, ‘R’ or ‘N’. L denotes that the child is a left child, R denotes that the child is a right child and N denotes that the child is NULL. Note that the tuples are printed only for internal nodes and not for leaf nodes. Output: The function should return True if the BST is balanced, otherwise return False. User Task: As it is a functional problem, you do not need to worry about the input. You just have to complete the function isBalanced() that takes a node as a parameter and returns a boolean value indicating whether the binary search tree is balanced or not. Constraints: 1<=T<=100 1<=N<=100 Example: Input: 2 3 4 2 6 4 2 L 4 6 R 6 1 2 3 4 5 6 1 2 L 1 3 R 2 -1 N 3 4 R 4 5 R 5 6 R Output: True False Note: The Input/Output format and Example given is used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def isBalanced(helper_root): Returns True if the BST is balanced, otherwise False. def checkHeight(root): if root is None: return 0 left_height = checkHeight(root.left) if left_height == -1: return -1 right_height = checkHeight(root.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 else: return max(left_height, right_height) + 1 return checkHeight(helper_root) != -1"},{"question":"A city is planning to build a set of new roads to connect all key locations, ensuring that there\'s exactly one unique path between any two locations. This plan should avoid creating any cycle. We\'re going to represent this city using an undirected graph, where the locations are nodes, and the roads are edges. Your task is to determine if the city\'s road plan will create such a cycle-free, connected graph, also known as a tree. -----Input----- The input consists of a single test case. The first line contains two integers n (1 leq n leq 1000) and m (0 leq m leq 1000), where n is the number of nodes and m is the number of edges. Each of the next m lines contains two integers u and v (1 leq u, v leq n) representing an undirected edge between nodes u and v. -----Output----- Output a single line with the word \\"YES\\" if the given graph is a tree (i.e., it is connected and has no cycles), or the word \\"NO\\" otherwise. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: YES Sample Input 2: 4 4 1 2 2 3 3 4 4 1 Sample Output 2: NO","solution":"def is_tree(n, m, edges): Determines if the given graph is a tree. :param n: Number of nodes in the graph. :param m: Number of edges in the graph. :param edges: List of tuples representing the edges. :return: \\"YES\\" if the graph is a tree, otherwise \\"NO\\". if m != n - 1: return \\"NO\\" from collections import defaultdict, deque # Create adjacency list for the graph adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS or DFS to check if the graph is connected visited = set() queue = deque([1]) # Starting from node 1 while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) # The graph is a tree if it\'s connected (all nodes are visited) return \\"YES\\" if len(visited) == n else \\"NO\\" # You can test the solution with the following sample inputs: # Example 1: print(is_tree(4, 3, [(1, 2), (2, 3), (3, 4)])) # Should return \\"YES\\" # Example 2: print(is_tree(4, 4, [(1, 2), (2, 3), (3, 4), (4, 1)])) # Should return \\"NO\\""},{"question":"You are given an array of integers that represent timestamps in seconds of completed transactions in a day. Your task is to calculate the maximum total duration of non-overlapping transactions, assuming each transaction takes an exactly one-second duration. Write a function `max_transaction_duration(transactions)` that takes an array of timestamps and returns the maximum total duration of non-overlapping transactions in seconds. # Example: Input: ```python transactions = [1, 3, 2, 4, 5, 6, 10] ``` Output: ```python max_transaction_duration(transactions) --> 7 ``` Explanation: The transactions occur at distinct timestamps 1, 2, 3, 4, 5, 6, and 10, so all transactions can be counted. The total duration is 7 seconds (1+1+1+1+1+1+1). # Example: Input: ```python transactions = [2, 2, 3, 3, 4, 4, 5] ``` Output: ```python max_transaction_duration(transactions) --> 4 ``` Explanation: Despite multiple entries for some timestamps, the non-overlapping transactions according to the example are 2, 3, 4, 5. The total duration is 4 seconds (1+1+1+1). # Constraints: - The input array `transactions` will have at most 10^6 elements. - Each element in the array will be a positive integer representing a timestamp in seconds. - The timestamp will be less than or equal to 86,400 (number of seconds in a day). # Function Signature: ```python def max_transaction_duration(transactions: List[int]) -> int: pass ``` # Notes: - You may assume that the transactions can be sorted. - Focus on optimizing the function to handle large inputs efficiently.","solution":"from typing import List def max_transaction_duration(transactions: List[int]) -> int: Given a list of transaction timestamps, this function returns the maximum total duration of non-overlapping transactions in seconds. # Use a set to find unique transactions unique_transactions = set(transactions) # Return the count of unique transactions return len(unique_transactions)"},{"question":"You are given a grid of size n times m. Each cell of the grid contains either \\"0\\" or \\"1\\". A cell is considered \\"accessible\\" if it contains \\"1\\" and there exists a path from it to any cell in the grid that contains \\"1\\" by only moving to adjacent cells (up, down, left, or right) containing \\"1\\". Determine the number of \\"accessible\\" regions in the grid. An \\"accessible\\" region is defined by a group of \\"1\\"s connected directly or through other \\"1\\" cells. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The first line of each test case contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. Then n lines follow, each containing a string of length m which is either \\"0\\" or \\"1\\". It is guaranteed that the total number of cells in the grid across all test cases will not exceed 10^6. -----Output----- For each test case, output a single integer denoting the number of \\"accessible\\" regions in the grid. -----Examples----- Input 2 4 5 11000 11000 00101 00001 3 3 101 010 101 Output 3 5 -----Note----- In the first example, the three accessible regions are: 1. The top-left region of 1\'s (2 cells). 2. The single 1 at the third row and fourth column. 3. The single 1 at the fourth row and fifth column. In the second example, the five accessible regions are each single 1\'s as no two 1\'s are connected.","solution":"def count_accessible_regions(t, test_cases): def dfs(grid, visited, x, y, rows, cols): stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == \\"1\\": stack.append((nx, ny)) results = [] for tc in test_cases: n, m, grid = tc visited = [[False] * m for _ in range(n)] count = 0 for i in range(n): for j in range(m): if grid[i][j] == \\"1\\" and not visited[i][j]: count += 1 dfs(grid, visited, i, j, n, m) results.append(count) return results # Reading inputs for the function def read_input(): import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) index += 2 grid = [data[index + i] for i in range(n)] index += n test_cases.append((n, m, grid)) return t, test_cases # For standalone use if __name__ == \\"__main__\\": t, test_cases = read_input() results = count_accessible_regions(t, test_cases) for result in results: print(result)"},{"question":"You are given a list of integers which represent the sequence of operations in a card game. The game starts with an initial sum of zero and you need to determine the maximum possible sum of the cards. The operations are defined as follows: - Positive integers add to the sum. - Negative integers can either subtract from the sum or be ignored. - The goal is to maximize the sum by deciding whether to include each negative integer or not. Write a function `maxCardSum` that takes a list of integers and returns the maximum possible sum. Example cards = [4, -1, 2, -3, 5, -2] By including only the positive integers and ignoring all the negative integers, the maximum sum is: 4 + 2 + 5 = 11 In this case, the maximum possible sum is 11. Function Description Complete the `maxCardSum` function in the editor below. `maxCardSum` has the following parameter: `int cards[m]`: a list of integers representing the sequence of operations Returns `int`: the maximum possible sum Input Format - The first line contains an integer, m, the number of integers in the list. - The second line contains m space-separated integers representing the sequence of operations. Constraints [ 1 leq m leq 10^5 ] [ -100 leq text{value of any card} leq 100 ] Sample Input ``` 6 4 -1 2 -3 5 -2 ``` Sample Output ``` 11 ``` Explanation By only summing the positive integers 4, 2, and 5, we get a maximum possible sum of 11. Negative integers -1, -3, and -2 are ignored as including them would decrease the sum.","solution":"def maxCardSum(cards): Returns the maximum possible sum from the list of cards, either adding positive cards or ignoring negative cards. max_sum = 0 for card in cards: if card > 0: max_sum += card return max_sum"},{"question":"RedDreamer is fascinated by special sequences of integers called \\"lucky sequences\\". A sequence of integers a is called lucky if it has exactly two consecutive identical numbers. Given an array of integers a of length n, RedDreamer wants to know the minimum number of operations required to make the array lucky. In one operation, RedDreamer can choose any integer from the array and change it to any other integer (not necessarily in the array). For example: if n = 6 and a = [1, 2, 3, 4, 5, 6], RedDreamer can change a_2 to 1, resulting in the array [1, 1, 3, 4, 5, 6] which is lucky because it has 1 and 1 consecutively. if n = 5 and a = [3, 5, 3, 3, 7], the array is already lucky because it has 3 and 3 consecutively. Help RedDreamer determine the minimum number of operations required to make the array lucky. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print one integer — the minimum number of operations required to make the array lucky. -----Example----- Input 2 6 1 2 3 4 5 6 5 3 5 3 3 7 Output 1 0","solution":"def min_operations_to_make_lucky(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] found = False for j in range(n - 1): if a[j] == a[j + 1]: found = True break if found: results.append(0) else: results.append(1) return results"},{"question":"Write a function `find_balanced_parentheses` that takes a list of strings as input and returns a list of all strings that contain balanced parentheses. A string is said to have balanced parentheses if every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\". Examples: ```python find_balanced_parentheses([\\"(a+b)\\", \\"(a+b\\", \\"(a+b)*(c+d)\\"]) # returns [\'(a+b)\', \'(a+b)*(c+d)\'] find_balanced_parentheses([\\"))a+b(())\\", \\"()x+y(\\", \\")z+(a+b)(\\"]) # returns [] find_balanced_parentheses([\\"((a-b)+(c*d))\\", \\"(a/b)+((c+d))\\", \\")(a+b)()\\"]) # returns [\'((a-b)+(c*d))\', \'(a/b)+((c+d))\'] ``` - The function should be case-insensitive; however, the input strings can contain lowercase letters, uppercase letters, and operators. - The solution must handle multiple test cases of varying lengths and compositions. - The function should execute efficiently for larger inputs (both in terms of number of strings and length of individual strings).","solution":"def find_balanced_parentheses(strings): Returns a list of strings that contain balanced parentheses. def is_balanced(string): stack = [] for char in string: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack return [s for s in strings if is_balanced(s)]"},{"question":"Find the center of nodes in a tree. A \\"center\\" of a tree is a node with the minimum possible maximum distance from that node to any other node in the tree. Your task is to identify one such center in a given tree. # Input - The first line contains a single integer, `n` (2 ≤ n ≤ 100,000), the number of nodes in the tree. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that there is an edge connecting nodes `u` and `v`. # Output - Output the 1-based index of one of the center nodes. # Example Input ``` 5 1 2 2 3 3 4 4 5 ``` Output ``` 3 ``` # Note - The function should efficiently determine the center of the tree. - In this case, node `3` is chosen as the center because the maximum distance to any other node (2 steps to either node 1 or node 5) is minimized compared to selecting other nodes.","solution":"from collections import deque def find_center(n, edges): Function to find the center of a tree. Args: n : int : number of nodes in the tree edges : List[Tuple[int, int]] : list of edges representing the tree Returns: int : 1-based index of one of the center nodes if n == 2: return 1 # Calculate degree of each node and add the edges to the adjacency list degree = [0] * (n + 1) adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: degree[u] += 1 degree[v] += 1 adjacency_list[u].append(v) adjacency_list[v].append(u) # Initialize the first layer of leaves leaves = deque() for i in range(1, n + 1): if degree[i] == 1: leaves.append(i) # Process the leaves remaining_nodes = n while remaining_nodes > 2: leaf_count = len(leaves) remaining_nodes -= leaf_count for _ in range(leaf_count): leaf = leaves.popleft() for neighbor in adjacency_list[leaf]: degree[neighbor] -= 1 if degree[neighbor] == 1: leaves.append(neighbor) # The remaining nodes are the center(s) return leaves[0] # Example Usage: # n = 5 # edges = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(find_center(n, edges)) => 3"},{"question":"John loves collecting rare coins. Each coin has a certain value associated with it denoted by an integer. John wants to arrange all his coins in such a way that the absolute difference between the values of any two consecutive coins is minimized. John needs your help to find the minimum possible maximum difference between the values of any two consecutive coins after arranging them. You are given the values of the coins. Your task is to find the minimum possible maximum difference between the values of any two consecutive coins. Input:- The first line contains the number of test cases t. Each test case begins with the number of coins n. The next line contains the values of the n coins. Output:- Print the minimum possible maximum difference for each test case. Constraints:- t ≤ 20 n ≤ 1000000 coin value ≤ 100000000 SAMPLE INPUT 2 5 4 8 6 3 15 4 1 3 6 10 SAMPLE OUTPUT 2 3","solution":"def min_max_diff(coins): Returns the minimum possible maximum difference between the values of any two consecutive coins after arranging them. # Sort the coins to find the minimum possible maximum difference coins.sort() # Initialize the minimum difference as infinity min_diff = float(\'inf\') # Iterate through the sorted coins to find the minimum difference for i in range(1, len(coins)): min_diff = min(min_diff, coins[i] - coins[i-1]) return min_diff def find_min_possible_max_diff(test_cases): results = [] for coins in test_cases: results.append(min_max_diff(coins)) return results"},{"question":"Given an array of integers, your task is to find the greatest common divisor (GCD) of the maximum and minimum numbers from the array. Write a function `findGCD(int[] nums)` that takes an array of integers `nums` and returns the GCD of the maximum and minimum numbers in the array. **Example 1:** ``` Input: nums = [2, 5, 6, 9, 10] Output: 2 Explanation: The maximum number is 10 and minimum is 2. The GCD of 10 and 2 is 2. ``` **Example 2:** ``` Input: nums = [7, 5, 6, 8, 3] Output: 1 Explanation: The maximum number is 8 and minimum is 3. The GCD of 8 and 3 is 1. ``` **Example 3:** ``` Input: nums = [3, 3] Output: 3 Explanation: The maximum and minimum numbers are both 3. The GCD of 3 and 3 is 3. ``` Your task: You need to implement the function `findGCD` which takes an array of integers and returns the GCD of the maximum and minimum integers in the array. You do not need to handle input and output in your function. **Expected Time Complexity:** O(n) **Expected Space Complexity:** O(1) **Constraints:** 1. `1 <= nums.length <= 10^4` 2. `1 <= nums[i] <= 10^9`","solution":"from math import gcd from typing import List def findGCD(nums: List[int]) -> int: This function takes an array of integers and returns the GCD of the maximum and minimum numbers in the array. max_num = max(nums) min_num = min(nums) return gcd(max_num, min_num)"},{"question":"___ Write a function `largest_subarray_sum` which takes a list of integers as an argument and returns the sum of the largest contiguous subarray. A contiguous subarray is a subarray where elements are taken consecutively from the list. For example: ``` largest_subarray_sum([1, -2, 3, 5, -1, 2]) => 9 largest_subarray_sum([-1, -2, -3, -4]) => -1 largest_subarray_sum([5, 4, -1, 7, 8]) => 23 ``` # Hint: Use Kadane\'s algorithm to solve this problem efficiently. # Test suite: * `3000` tests with arrays containing up to `1000` integers. * The reference solution takes around `1.5` seconds to calculate the result. * You are not allowed to hardcode the solution: you\'ll have to compute it in an optimal way (code length limit: 1500 characters). ___ Are you ready for this challenge?","solution":"def largest_subarray_sum(arr): Finds the sum of the largest contiguous subarray using Kadane\'s Algorithm. Parameters: arr (list of int): A list of integers. Returns: int: The sum of the largest contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"There is a circular track designed for car racing. The track is represented by a circle in a coordinate plane with the center at the origin (0,0) and radius R. You are given a set of points representing the positions of several checkpoints on the track. For each checkpoint, you need to determine the minimum and maximum distance between any pair of checkpoints. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ R ≤ 10^9 - -R ≤ x, y ≤ R - All points lie on the circle with radius R centered at the origin. - Each checkpoint is represented by its coordinates (x, y). -----Input----- Input is given from Standard Input in the following format: R N x1 y1 x2 y2 ... xN yN -----Output----- Print the minimum distance followed by the maximum distance between any pair of checkpoints. The distances printed will be judged correct if their absolute or relative error is at most 10^{-9}. -----Sample Input----- 5 3 5 0 0 5 -5 0 -----Sample Output----- 7.0710678119 10.0000000000 The minimum distance between the checkpoints is the distance between (5,0) and (0,5) which is 7.0710678119. The maximum distance is between (5,0) and (-5,0) which is 10.","solution":"import math def min_max_distances(R, points): Calculate the minimum and maximum distance between any pair of checkpoints. Parameters: R (int): Radius of the circle. points (list of tuples): List of (x, y) coordinates of the checkpoints. Returns: (min_distance, max_distance): A tuple with minimum and maximum distance between checkpoints. def distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) min_distance = float(\'inf\') max_distance = float(\'-inf\') N = len(points) for i in range(N): for j in range(i + 1, N): dist = distance(points[i], points[j]) if dist < min_distance: min_distance = dist if dist > max_distance: max_distance = dist return min_distance, max_distance # Example usage: # R, N = 5, 3 # points = [(5, 0), (0, 5), (-5, 0)] # print(min_max_distances(R, points)) # Output should be (7.0710678118654755, 10.0)"},{"question":"Alice and Bob love playing games involving numbers and strings. Recently, they decided to create a new game where they need to find the longest palindrome that can be formed by deleting certain characters in a given string. Your task is to help them by writing a program to perform this task. A palindrome is a string that reads the same forward and backward. Input: A single string ( s ) of length ( n ) (1 ≤ n ≤ 1000) containing only lowercase English letters. Output: Print the length of the longest palindromic subsequence that can be formed by deleting some characters from the given string. Examples: Input ``` bbbab ``` Output ``` 4 ``` Explanation: The longest palindromic subsequence is \\"bbbb\\". Input ``` cbbd ``` Output ``` 2 ``` Explanation: The longest palindromic subsequence is \\"bb\\".","solution":"def longest_palindromic_subsequence(s): Finds the length of the longest palindromic subsequence in a given string. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1]"},{"question":"Given a list of integers, write a function to determine if there exists a pair of distinct indices (i, j) in the list such that the sum of the elements at these indices is equal to a given target value. Input: The input consists of two lines: 1. The first line contains an integer target, the value which the sum of the pair of elements must equal. 2. The second line contains space-separated integers representing the list of numbers. Output: Output \\"YES\\" if such a pair exists, otherwise output \\"NO\\". Constraints: 1 ≤ Length of list ≤ 100000 -10^9 ≤ Element of list ≤ 10^9 -10^9 ≤ target ≤ 10^9 Example Input: 5 1 2 3 4 5 Example Output: YES Explanation: In the given example, the pair (2, 3) sums up to 5, hence the output is YES.","solution":"def has_pair_with_sum(target, numbers): Determines if there exist a pair of distinct indices (i, j) such that numbers[i] + numbers[j] equals to target. Args: - target (int): The target sum value. - numbers (list of int): The list of integers. Returns: - str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in numbers: complement = target - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Given a string, count the number of words in it. A word is defined as a sequence of non-space characters separated by at least one space from other words. The input string can contain leading or trailing spaces, and multiple spaces between words. Write a function to count the number of words in the input string. Input A single line containing a string of length from 1 to 1000 characters, inclusive. Output Print a single integer representing the number of words in the input string. Examples Input ```plaintext Hello, World! ``` Output ```plaintext 2 ``` Input ```plaintext This is a test ``` Output ```plaintext 4 ``` Input ```plaintext count words In THIS Sentence ``` Output ```plaintext 5 ```","solution":"def count_words(s): Count the number of words in a string. A word is defined as a sequence of non-space characters separated by at least one space from other words. Parameters: s (str): input string Returns: int: number of words words = s.split() return len(words)"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. If the input list is empty or contains no prime numbers, the function should return an empty list. Ex: Input: [10, 15, 3, 7, 18, 19] --> Output: [3, 7, 19] Ex: Input: [4, 6, 8, 9] --> Output: [] Ex: Input: [2, 5, 11, 13] --> Output: [2, 5, 11, 13]","solution":"from math import isqrt def is_prime(n): if n <= 1: return False for i in range(2, isqrt(n) + 1): if n % i == 0: return False return True def filter_primes(nums): return [num for num in nums if is_prime(num)]"},{"question":"You are given two binary strings A and B of equal length. The binary strings represent the states of two sets of bits. Your task is to compute the bitwise AND operation between the two strings and output the resultant binary string. The bitwise AND operation between two bits is defined as follows: - `1 AND 1 = 1` - `1 AND 0 = 0` - `0 AND 1 = 0` - `0 AND 0 = 0` Constraints * 1 leq |A| = |B| leq 100 * A and B are binary strings consisting of `0` and `1` only. Input The input consists of two lines: * The first line contains the binary string A. * The second line contains the binary string B. Output Print the resultant binary string after performing the bitwise AND operation between A and B. Examples Input 1101 1010 Output 1000 Input 1111 0000 Output 0000","solution":"def bitwise_and(A, B): Returns the bitwise AND of two binary strings A and B of equal length. result = [] for a, b in zip(A, B): result.append(str(int(a) & int(b))) return \'\'.join(result)"},{"question":"Given an array of N positive integers, find the total number of subarrays whose elements sum up to an odd number. Example 1: Input: N = 4, array = [1, 2, 3, 4] Output: 6 Explanation: The subarrays with odd sums are: [1], [1, 2], [2, 3], [3], [3, 4], [1, 2, 3] Example 2: Input: N = 3, array = [2, 4, 6] Output: 0 Explanation: There are no subarrays with an odd sum. Your Task: You don\'t need to read or print anything. Your task is to complete the function count_odd_sum_subarrays() which takes N and an array as inputs and returns the total count of such subarrays. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^5 1 <= array[i] <= 10^5","solution":"def count_odd_sum_subarrays(N, array): Count the number of subarrays with an odd sum. Args: N : int : number of elements in the array array : list : list of positive integers Returns: int : number of subarrays with an odd sum odd_count = 0 even_count = 1 # Initialize to 1 to consider the empty subarray\'s prefix sum as even current_sum = 0 odd_sum_subarrays = 0 for num in array: current_sum += num if current_sum % 2 == 0: even_count += 1 odd_sum_subarrays += odd_count else: odd_count += 1 odd_sum_subarrays += even_count return odd_sum_subarrays"},{"question":"You are given an integer N and you need to determine if all digits in N are unique. -----Constraints----- - 0 ≤ N ≤ 10^9 - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- If all digits in N are unique, print Unique; otherwise, print Not Unique. -----Sample Input----- 123456789 -----Sample Output----- Unique Since all the digits in the number 123456789 are unique, the output should be Unique. -----Sample Input 2----- 112233 -----Sample Output 2----- Not Unique Since the number 112233 contains repeating digits, the output should be Not Unique.","solution":"def are_all_digits_unique(n): Returns \'Unique\' if all digits in n are unique, otherwise returns \'Not Unique\'. n_str = str(n) digits_set = set(n_str) if len(digits_set) == len(n_str): return \\"Unique\\" else: return \\"Not Unique\\""},{"question":"You are given a positive integer M and an array A consisting of N non-negative integers. Find a sub-array B of A of length M such that the sum of elements in B is maximized. ------ Input Format ------ - First line of the input contains T, the number of testcases. Then the testcases follow. - First line of each test case contains two space separated integers N and M. - Second line of each test case contains N space separated integers describing the array A. ------ Output Format ------ For each test case, output the sum of the sub-array B in a single line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ N 1 ≤ A_{i} ≤ 10^6 - Sum of N over all test cases doesn\'t exceed 5000. ----- Sample Input 1 ------ 2 5 3 1 2 3 4 5 7 2 10 5 2 7 8 7 4 ----- Sample Output 1 ------ 12 15 ----- explanation 1 ------ Test case 1: The possible sub-arrays of length 3 are: [1, 2, 3], [2, 3, 4], [3, 4, 5]. The sub-array with the maximum sum is [3, 4, 5] with sum 12. Test case 2: The possible sub-arrays of length 2 are: [10, 5], [5, 2], [2, 7], [7, 8], [8, 7], [7, 4]. The sub-array with the maximum sum is [7, 8] with sum 15.","solution":"def max_subarray_sum(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] A = test_cases[i][1] max_sum = 0 # Compute the sum of the first sub-array of length M current_sum = sum(A[:M]) max_sum = current_sum # Use sliding window to find the maximum sum sub-array of length M for j in range(M, N): current_sum = current_sum - A[j-M] + A[j] if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"In a city, there are \'n\' intersections and \'m\' roads connecting the intersections. Each road has a weight that denotes the time it takes to travel it. Some intersections have a special property - \'T\' denotes a Toll Booth where vehicles have to pay a specific toll to pass through. Each Toll Booth has a different toll amount which is given in the input. The aim is to travel from the starting intersection (1) to the destination intersection (n) with the minimum cost, which is the sum of travel time and tolls collected. However, one of the intersections along the way is a fuel station, where the toll amount is not applicable, i.e., vehicles can pass through without paying the toll on that specific intersection. Your task is to determine the minimum cost required to travel from the starting intersection (1) to the destination intersection (n) under these conditions. Input Format: - The first line contains two integers `n` and `m` denoting the number of intersections and roads respectively. - The next `m` lines contain three integers `u`, `v`, `w` representing a road between intersections `u` and `v` with travel time `w`. - The following line contains an integer `T` indicating the number of Toll Booths. - The next line contains `T` space-separated integers where each of the Toll Booths is located. - The following line contains `T` space-separated integers indicating the toll amounts for the corresponding Toll Booths. - The final line contains an integer denoting the index of the intersection designated as the fuel station. Output Format: Output a single integer which is the minimum cost to travel from intersection 1 to intersection n. Constraints: 1 ≤ n, m ≤ 1000 1 ≤ w, toll amount ≤ 1000 1 ≤ u, v ≤ n 1 ≤ T ≤ n SAMPLE INPUT: 5 6 1 2 2 1 3 2 2 4 3 3 4 3 4 5 1 3 5 2 2 2 4 3 5 3 SAMPLE OUTPUT: 4 (Explanation: path 1 -> 3 -> 5 with travel times 2+2) Note: Intersection 3 is a fuel station, so tolls at intersections 2 and 4 are ignored.","solution":"import heapq def min_cost(n, m, roads, T, toll_booths, toll_amounts, fuel_station): # Create graph adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Create toll map toll_map = {toll_booths[i]: toll_amounts[i] for i in range(T)} # Dijkstra\'s algorithm with priority queue def dijkstra(): # The cost dictionary stores minimum cost to reach each intersection min_cost = {i: float(\'inf\') for i in range(1, n + 1)} min_cost[1] = 0 # Priority queue, storing (cost, intersection) pq = [(0, 1)] while pq: current_cost, node = heapq.heappop(pq) if current_cost > min_cost[node]: continue for neighbor, travel_cost in graph[node]: # Total cost is the travel cost plus toll if this is a toll booth total_cost = current_cost + travel_cost if neighbor in toll_map and neighbor != fuel_station: total_cost += toll_map[neighbor] if total_cost < min_cost[neighbor]: min_cost[neighbor] = total_cost heapq.heappush(pq, (total_cost, neighbor)) return min_cost[n] return dijkstra()"},{"question":"You are given two strings, `S1` and `S2`, of equal length containing only characters \'0\' and \'1\'. You can perform an operation to swap any two characters of `S1`. The objective is to turn `S1` into `S2` using the minimum number of swaps, or to determine if it is not possible. Two characters from `S1` can be swapped if one is \'0\' and the other is \'1\'. Write a function to determine the minimum number of swaps required to transform `S1` into `S2`, or return `-1` if it is not possible. Input: - The first line contains an integer `T`, denoting the number of test cases. - For each test case, there are two lines. The first line contains the string `S1`, and the second line contains the string `S2`. Output: - For each test case, print the minimum number of swaps required, or `-1` if the transformation is not possible. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ length(S1) = length(S2) ≤ 1000 SAMPLE INPUT: 2 1100 1001 1010 0101 SAMPLE OUTPUT: 1 2 Explanation: For the first test case, swap the second character \'1\' with the third character \'0\' in `S1` to get `1001`. For the second test case, swap the first \'1\' with the second \'0\' and the third \'1\' with the fourth \'0\' in `S1` to get `0101`. Therefore, 2 swaps are required.","solution":"def min_swaps_to_transform(S1, S2): Given two strings S1 and S2 of equal length consisting of \'0\' and \'1\' characters, determine the minimum number of swaps needed to turn S1 into S2, or return -1 if it\'s not possible. n = len(S1) # Check if the transformation is possible if sorted(S1) != sorted(S2): # Both must have the same count of \'0\' and \'1\' return -1 # Count mismatches count_10 = 0 # S1 has \'1\' while S2 has \'0\' count_01 = 0 # S1 has \'0\' while S2 has \'1\' for i in range(n): if S1[i] == \'1\' and S2[i] == \'0\': count_10 += 1 elif S1[i] == \'0\' and S2[i] == \'1\': count_01 += 1 # The number of swaps required is max(count_10, count_01) return max(count_10, count_01) def min_swaps_for_testcases(T, testcases): results = [] for i in range(T): S1, S2 = testcases[i] result = min_swaps_to_transform(S1, S2) results.append(result) return results"},{"question":"Given a string \'S\' of length n, process a series of queries to determine substring properties. Each query specifies a substring (through its start and end indices) and an integer k. For each query, count how many distinct characters in the given substring have a frequency exactly equal to k. If none exist, return 0. ------ Input ------ The first line contains two integers n and q, denoting the length of the string and the number of queries. The second line contains the string S. Each of the next q lines contains three integers: l, r, and k. ------ Output ------ Output q lines, where each line contains the result for the corresponding query. ------ Constraints ------ 1 ≤ n, q ≤ 10^{5} 1 ≤ l ≤ r ≤ n 1 ≤ k ≤ r-l+1 ------ Sample Input 1 ------ 5 2 ababa 1 3 1 2 5 2 ------ Sample Output 1 ------ 2 1 ------ Explanation 1 ------ For the first query l=1, r=3, \'aba\': \'a\' occurs 2 times and \'b\' occurs 1 time, thus one character (\'b\') with the exact frequency 1. For the second query l=2, r=5, \'baba\': \'a\' occurs 2 times and \'b\' occurs 2 times, thus two characters (\'a\' and \'b\') with the exact frequency 2, but we are only supposed to count them separately. So the result is 1.","solution":"def substring_distinct_frequency(n, q, S, queries): results = [] for l, r, k in queries: substring = S[l-1:r] freq = {} for char in substring: if char in freq: freq[char] += 1 else: freq[char] = 1 count = 0 for char in freq: if freq[char] == k: count += 1 results.append(count) return results # Example usage: n = 5 q = 2 S = \\"ababa\\" queries = [(1, 3, 1), (2, 5, 2)] print(substring_distinct_frequency(n, q, S, queries)) # Output: [1, 2]"},{"question":"Given an integer N, determine if N can be expressed as a sum of two prime numbers. If it can, find the two prime numbers that sum up to N. In case there are multiple pairs, return the pair with the smallest prime number. If there are no such pairs, return -1. Input First line contains T (number of test cases). Next T lines contain the integer N. Constraints 1 ≤ T ≤ 10^5 2 ≤ N ≤ 10^7 SAMPLE INPUT 3 10 16 27 SAMPLE OUTPUT 3 7 3 13 -1","solution":"def is_prime(n): Determines whether a given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_pair(N): Determines if N can be expressed as a sum of two prime numbers and returns the pair of prime numbers if possible. Otherwise, returns -1. for i in range(2, N // 2 + 1): if is_prime(i) and is_prime(N - i): return i, N - i return -1 def process_test_cases(T, test_cases): Processes multiple test cases and returns results for each case. results = [] for N in test_cases: result = find_prime_pair(N) results.append(result) return results # Example usage, not part of the final solution: # T = 3 # test_cases = [10, 16, 27] # results = process_test_cases(T, test_cases) # for result in results: # if result == -1: # print(result) # else: # print(result[0], result[1])"},{"question":"A company has decided to give bonuses to its employees based on their performance scores. The final bonus an employee will receive is determined by a combination of their performance score and their manager\'s bonus. A manager\'s bonus, in turn, can be affected by their manager\'s bonus, and so on up the hierarchy. You are given the performance scores of the employees and the relationships between employee-manager pairs. Your task is to calculate the final bonus for each employee given the dependency on their manager\'s bonus. Each employee, including managers, will have the same base bonus calculated initially as (performance score * 100). If an employee has a manager, then the manager\'s bonus is added to their base bonus. This continues recursively up the hierarchy. ------ Input ------ First line contains T (number of testcases, around 10). T cases follow. Each test case starts with N (total number of employees, 1 ≤ N ≤ 100). Each of the next N lines is of the form \\"employee_id performance_score manager_id\\" (quotes for clarity only). \\"manager_id\\" is either the id of another employee or \\"None\\" if the employee has no manager. employee_id and manager_id are non-empty strings of lower-case alphabets ( \'a\' - \'z\' ) not more than 20 in length and performance_score is a non-negative integer. ------ Output ------ For each test case, output the final bonuses for all employees, sorted by employee ids in ascending order, each on a new line. Each line should be formatted as \\"employee_id final_bonus\\". ----- Sample Input 1 ------ 2 4 alice 10 None bob 8 alice carol 15 bob dave 5 alice 3 eve 7 None frank 9 eve grace 6 frank ----- Sample Output 1 ------ alice 1000 bob 1800 carol 3300 dave 1500 eve 700 frank 1600 grace 2200 ----- explanation 1 ------ In case 1: - alice has no manager, so her final bonus is 10*100 = 1000. - bob has alice as manager, so his final bonus is 8*100 + 1000 (alice\'s bonus) = 1800. - carol has bob as manager, so her final bonus is 15*100 + 1800 (bob\'s bonus) = 3300. - dave has alice as manager, so his final bonus is 5*100 + 1000 (alice\'s bonus) = 1500. In case 2: - eve has no manager, so her final bonus is 7*100 = 700. - frank has eve as manager, so his final bonus is 9*100 + 700 (eve\'s bonus) = 1600. - grace has frank as manager, so her final bonus is 6*100 + 1600 (frank\'s bonus) = 2200.","solution":"def calculate_final_bonuses(T, cases): def compute_bonus(employee, bonuses, managers): if employee not in bonuses: score, manager = employees[employee] bonus = score * 100 if manager != \\"None\\": bonus += compute_bonus(manager, bonuses, managers) bonuses[employee] = bonus return bonuses[employee] results = [] for case in cases: N, employee_data = case employees = {} managers = {} for data in employee_data: employee_id, performance_score, manager_id = data.split() performance_score = int(performance_score) employees[employee_id] = (performance_score, manager_id) if manager_id != \\"None\\": if manager_id not in managers: managers[manager_id] = [] managers[manager_id].append(employee_id) bonuses = {} for employee in employees: compute_bonus(employee, bonuses, managers) sorted_employees = sorted(bonuses.items()) results.append(sorted_employees) return results"},{"question":"# Train Scheduling Optimization You are given a set of trains with their respective arrival and departure times. Your task is to determine the minimum number of platforms required at a railway station to handle the train traffic without any train being delayed. Each train i has an arrival time `a_i` and a departure time `d_i`. You need to find out the minimum number of platforms needed so that no train has to wait. **Input** - An integer `N` denoting the number of trains. - A sequence of N integers `a_1, a_2, ..., a_N` where `a_i` denotes the arrival time of the ith train. - A sequence of N integers `d_1, d_2, ..., d_N` where `d_i` denotes the departure time of the ith train. **Output** - A single integer which is the minimum number of platforms required. **Constraints** - 1 ≤ N ≤ 100,000 - 0 ≤ a_i < d_i ≤ 23:59 (The time is in HH:MM 24-hour format) **Example Input** ``` 6 09:00 09:40 09:50 11:00 15:00 18:00 09:10 12:00 11:20 11:30 19:00 20:00 ``` **Example Output** ``` 3 ``` **Explanation** - Train 1 arrives at 09:00 and departs at 09:10. - Train 2 arrives at 09:40 and departs at 12:00. - Train 3 arrives at 09:50 and departs at 11:20. - Train 4 arrives at 11:00 and departs at 11:30. - Train 5 arrives at 15:00 and departs at 19:00. - Train 6 arrives at 18:00 and departs at 20:00. During the time frame 09:40 to 11:30, there are at least three trains at the station, hence three platforms are required.","solution":"def min_platforms(N, arrivals, departures): Returns the minimum number of platforms required for the given arrival and departure times. Parameters: N (int): Number of trains arrivals (list): List of arrival times in HH:MM format departures (list): List of departure times in HH:MM format Returns: int: Minimum number of platforms required # Convert time in HH:MM format to minutes since start of the day def time_to_minutes(time): hours, minutes = map(int, time.split(\\":\\")) return hours * 60 + minutes arrivals = [time_to_minutes(a) for a in arrivals] departures = [time_to_minutes(d) for d in departures] # Sort both the arrival and departure times arrivals.sort() departures.sort() # Initialize the variables needed to find the answer platform_needed = 0 max_platform_needed = 0 i, j = 0, 0 # Use two pointers to traverse the arrivals and departures while i < N and j < N: if arrivals[i] < departures[j]: platform_needed += 1 if platform_needed > max_platform_needed: max_platform_needed = platform_needed i += 1 else: platform_needed -= 1 j += 1 return max_platform_needed"},{"question":"A company has N employees and wants to organize a fun activity. Each employee has a unique id ranging from 1 to N. The company wants to divide the employees into groups such that each group has exactly K members and each group’s sum of IDs is the same. Help the company find out if this is possible. Example 1: Input: N = 6, K = 3 Output: 1 Explanation: Employees can be divided into 2 groups: {1, 2, 3} and {4, 5, 6}. Sum of IDs in each group is 6. Example 2: Input: N = 5, K = 2 Output: 0 Explanation: It is not possible to divide 5 employees into groups of 2 such that the sum of IDs in each group is the same. Your Task: You don’t need to read input or print anything. Complete the function canDivideIntoGroups() which takes N and K as input parameters and returns 1 if it is possible else return 0. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N, K <= 10^6","solution":"def canDivideIntoGroups(N, K): This function checks if it is possible to divide N employees into groups such that: 1. Each group has exactly K members. 2. Each group\'s sum of IDs is the same. Parameters: N (int): Total number of employees. K (int): Number of members in each group. Returns: int: 1 if it is possible to divide the employees into such groups, 0 otherwise. # For the sum of each group to be the same, number of groups should be an integer if N % K != 0: return 0 return 1"},{"question":"Implement a function that returns the length of the longest subsequence of a given string such that all characters in the subsequence are in alphabetical order. -----Input----- The input contains a single string s (1 le |s| le 100,000) consisting of lowercase English letters. -----Output----- The output should be a single integer representing the length of the longest subsequence where all characters are in alphabetical order. -----Examples----- Input abac Output 3 Input dcbgfa Output 2 -----Note----- In the first example, the longest alphabetical subsequence is either \\"abc\\" or \\"aac\\", each of which has length 3. In the second example, the longest alphabetical subsequence is \\"bg\\" which has length 2.","solution":"def longest_alphabetical_subsequence(s): Returns the length of the longest subsequence where all characters are in alphabetical order. if not s: return 0 # Create an array to store the length of the longest subsequence ending at each character dp = [1] * len(s) for i in range(1, len(s)): for j in range(i): if s[j] <= s[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of software projects that a company has completed over a year. Each project has a unique identifier, and for every project, there\'s an integer representing its importance score. Additionally, each project depends on some other projects to be completed before it, which forms a dependency graph. You need to find a valid order of projects that respects all dependencies and maximizes the sum of importance scores of the first k projects in this order, where k is given. If it\'s not feasible to complete all projects due to circular dependencies, return an empty list. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of projects. The second line contains an integer m (0 ≤ m ≤ 10000), the number of dependencies. The third line contains an integer k (1 ≤ k ≤ n). Each of the next n lines contains the description of a project: an identifier (a non-empty string of up to 10 alphanumeric characters) and an integer si (0 ≤ si ≤ 10000) representing the importance score. Each of the next m lines contains two space-separated strings u and v, denoting that project u must be completed before project v. Output If there is no feasible order, print \\"[]\\". Otherwise, print a list of k project identifiers representing the order of the first k projects that maximizes the sum of importance scores. If there are multiple solutions, any one will be accepted. Examples Input 5 4 3 proj1 5 proj2 10 proj3 8 proj4 6 proj5 7 proj1 proj2 proj2 proj3 proj4 proj2 proj4 proj5 Output [proj4, proj1, proj5] Input 3 2 2 A 3 B 4 C 5 A B B C Output [B, C] Input 3 3 2 A 3 B 4 C 5 A B B C C A Output []","solution":"from collections import defaultdict, deque def project_order(n, m, k, projects, dependencies): def topological_sort(vertices, adj_list): in_degree = {vertex: 0 for vertex in vertices} for vertex in vertices: for neighbor in adj_list[vertex]: in_degree[neighbor] += 1 queue = deque([vertex for vertex in vertices if in_degree[vertex] == 0]) top_order = [] while queue: current = queue.popleft() top_order.append(current) for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(top_order) == len(vertices): return top_order else: return [] projects_dict = {} for project_id, score in projects: projects_dict[project_id] = int(score) adj_list = defaultdict(list) for dep in dependencies: u, v = dep adj_list[u].append(v) vertices = [project_id for project_id, _ in projects] sorted_projects = topological_sort(vertices, adj_list) if not sorted_projects: return [] sorted_projects.sort(key=lambda x: projects_dict[x], reverse=True) return sorted_projects[:k] # Example usage: n = 5 m = 4 k = 3 projects = [(\'proj1\', 5), (\'proj2\', 10), (\'proj3\', 8), (\'proj4\', 6), (\'proj5\', 7)] dependencies = [(\'proj1\', \'proj2\'), (\'proj2\', \'proj3\'), (\'proj4\', \'proj2\'), (\'proj4\', \'proj5\')] print(project_order(n, m, k, projects, dependencies)) # Output should be something like [\'proj4\', \'proj5\', \'proj3\']"},{"question":"Chef is organizing a party and he wants to decorate the event with flowers. There are N types of flowers available, each with a distinct beauty value. Chef wants to decorate the party in such a way that the sequence of beauty values of the flowers is strictly increasing. Chef has limited space, so he can only select a subsequence of flowers from the available ones. He can rearrange the remaining flowers in any way he wants. Chef wants to know the length of the longest subsequence of flowers that he can select such that the sequence of selected flowers has strictly increasing beauty values. Write a function `longest_increasing_subsequence(N, flowers)` that takes an integer N and an array flowers of N integers representing the beauty values of the flowers. The function should return the length of the longest strictly increasing subsequence that Chef can obtain. # Input - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of types of flowers. - The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the beauty values of the flowers. # Output For each test case, print a single line containing the length of the longest strictly increasing subsequence of beauty values. # Constraints - 1 le T le 10 - 1 le N le 10^5 - 1 le A_i le 10^9 for each valid i - all elements of A are pairwise distinct - sum of N over all test cases le 10^6 # Example Input ``` 2 8 10 22 9 33 21 50 41 60 6 3 10 2 1 20 4 ``` # Example Output ``` 5 3 ``` # Explanation In the first test case, one of the longest strictly increasing subsequences is [10, 22, 33, 50, 60], which has a length of 5. In the second test case, one of the longest strictly increasing subsequences is [3, 10, 20], which has a length of 3.","solution":"import bisect def longest_increasing_subsequence(N, flowers): if N == 0: return 0 lis = [] for flower in flowers: pos = bisect.bisect_left(lis, flower) if pos == len(lis): lis.append(flower) else: lis[pos] = flower return len(lis)"},{"question":"Given a string `str` representing a sequence of lowercase letters, the task is to determine the smallest subsequence that contains all the unique characters in `str`. This subsequence must maintain the order of the first occurrence of each character. Write a function `smallest_subsequence` that takes in a string `str` and returns the smallest subsequence that fulfills the requirement. # Example: ```python assert smallest_subsequence(\\"abcabc\\") == \\"abc\\" assert smallest_subsequence(\\"cbacdcbc\\") == \\"acdb\\" assert smallest_subsequence(\\"bbcaac\\") == \\"bac\\" ``` # Notes: - The input string `str` will contain only lowercase English letters. - The returned subsequence should be in the order of the first occurrence of each character. - The length of `str` will be at most 10^4.","solution":"def smallest_subsequence(s): Returns the smallest subsequence that contains all the unique characters in `s`. This subsequence will maintain the order of the first occurrence of each character. stack = [] seen = set() last_occurrence = {ch: i for i, ch in enumerate(s)} for i, ch in enumerate(s): if ch not in seen: while stack and ch < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) seen.add(ch) stack.append(ch) return \'\'.join(stack)"},{"question":"Write a function that processes a given list of IP addresses and subnets, then determines how many IP addresses fall within each subnet. An IP address is considered to fall within a subnet if it shares the same prefix as defined by the subnet\'s mask. INPUT: The input consists of: 1. An integer `n`, the number of IP addresses. 2. `n` lines each containing a string representing an IPv4 address. 3. An integer `m`, the number of subnets. 4. `m` lines each containing a string representing an IPv4 subnet in CIDR notation (e.g., \\"192.168.1.0/24\\"). OUTPUT: The function should return a list of integers of length `m`, where the `i`-th integer indicates the number of IP addresses that fall within the `i`-th subnet. EXAMPLE: Input: ``` 4 192.168.1.1 192.168.1.2 192.168.2.1 10.0.0.1 2 192.168.1.0/24 10.0.0.0/8 ``` Output: ``` 2 1 ``` **Constraints:** - 1 ≤ n, m ≤ 100 - IP addresses and CIDR notation will be in standard IPv4 format. - IP address values are always valid, and subnets are always given in valid CIDR notation.","solution":"import ipaddress def count_ips_in_subnets(n, ip_addresses, m, subnets): Counts how many IP addresses fall within each subnet. Parameters: n (int): Number of IP addresses. ip_addresses (list): List of IP addresses as strings. m (int): Number of subnets. subnets (list): List of subnets as CIDR notation strings. Returns: list: List of integers representing the count of IP addresses within each subnet. # Convert IP addresses to ipaddress.IPv4Address ip_objects = [ipaddress.IPv4Address(ip) for ip in ip_addresses] # Convert subnets to ipaddress.IPv4Network subnet_objects = [ipaddress.IPv4Network(subnet, strict=False) for subnet in subnets] # Initialize a list to hold the count of IPs in each subnet results = [0] * m # For each subnet, count the number of IPs that fall within the subnet for idx, subnet in enumerate(subnet_objects): for ip in ip_objects: if ip in subnet: results[idx] += 1 return results"},{"question":"You are given an integer array `nums` consisting of `n` elements and an integer `X`. Your task is to find if there exists a non-empty subsequence of `nums` whose sum is exactly equal to `X`. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Input The first line of input contains two integers `n` and `X` (1 ≤ n ≤ 20, 1 ≤ X ≤ 10^9) - the number of elements in the array and the target sum, respectively. The second line contains `n` integers of the array `nums` (1 ≤ nums[i] ≤ 10^5). Output Print \\"YES\\" if there is a subsequence whose sum is exactly `X`. Otherwise, print \\"NO\\". Examples Input 5 9 1 2 3 4 5 Output YES Input 6 15 2 4 6 8 10 12 Output NO","solution":"def subsequence_sum_exists(nums, X): Determines if there exists a non-empty subsequence of nums whose sum is exactly X. :param nums: List of integers. :param X: Target sum. :return: \'YES\' if such a subsequence exists, otherwise \'NO\'. # Number of elements in nums n = len(nums) # Generate all possible non-empty subsequences from itertools import combinations for r in range(1, n + 1): for subsequence in combinations(nums, r): if sum(subsequence) == X: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers representing the stock price of a company in chronological order of days. Your task is to determine the maximum profit that can be achieved by buying and then later selling one share of the stock within the specified range of days. Note that you must buy before you sell. If no transactions can yield profit, return 0. Write a function `maxProfit(prices: List[int]) -> int` that returns the maximum profit. **Example:** ```python prices = [7, 1, 5, 3, 6, 4] print(maxProfit(prices)) # Output: 5 (buy on day 2 at price 1 and sell on day 5 at price 6) ``` **Constraint:** - The length of the list `prices` will be at least 2 and up to 10,000. **Note:** - Only one transaction (buy and then sell) is allowed. - The profit is calculated as the difference between the selling price and the buying price. - Ensure the function runs efficiently for large inputs.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: Returns the maximum profit that can be achieved by buying and then later selling one share of the stock. If no profit can be made, return 0. min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price encountered so far if price < min_price: min_price = price # Calculate the potential profit if selling at the current price profit = price - min_price # Update the maximum profit if the current profit is greater if profit > max_profit: max_profit = profit return max_profit"},{"question":"You are given an array of integers representing book page counts. A colleague wants to divide these books among k employees in such a way that the maximum number of pages assigned to any employee is minimized. Each employee must get at least one book, and every book must be assigned to an employee. An employee can only be assigned to a contiguous subset of the books. Write a function to find the minimum possible value for the maximum number of pages assigned to any employee. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), indicating the number of books. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), representing the page counts of the books. - The third line contains a single integer k (1 ≤ k ≤ n), indicating the number of employees. Output: - Print a single integer, the minimized maximum number of pages assigned to any employee. Examples: Input: 4 12 34 67 90 2 Output: 113 Input: 5 10 20 30 40 50 3 Output: 60 Note: In the first example, the books can be divided as follows: - Employee 1: Books with 12, 34, and 67 pages (total 113 pages) - Employee 2: Book with 90 pages (total 90 pages) The maximum number of pages assigned to any employee is minimized at 113. In the second example, the books can be divided as follows: - Employee 1: Books with 10, 20, and 30 pages (total 60 pages) - Employee 2: Book with 40 pages (total 40 pages) - Employee 3: Book with 50 pages (total 50 pages) The maximum number of pages assigned to any employee is minimized at 60.","solution":"def is_feasible(books, n, k, max_pages): Check if it is possible to allocate books to k employees such that the maximum number of pages assigned to any employee is less than or equal to max_pages. required_employees = 1 current_sum = 0 for i in range(n): if current_sum + books[i] > max_pages: required_employees += 1 current_sum = books[i] if required_employees > k: return False else: current_sum += books[i] return True def find_minimum_max_pages(books, n, k): Find the minimum possible value for the maximum number of pages assigned to any employee. if n < k: return -1 start = max(books) end = sum(books) result = end while start <= end: mid = (start + end) // 2 if is_feasible(books, n, k, mid): result = mid end = mid - 1 else: start = mid + 1 return result"},{"question":"A delivery company is testing a new package delivery system using drones. Each package is represented by an integer weight, and there are several packages to be delivered. The drone has a weight capacity limit it cannot exceed. Each package must be delivered one at a time, but the total weight of packages in a single flight cannot exceed the drone\'s capacity. Your task is to determine the minimum number of flights required to deliver all the packages. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100000) and W (1 ≤ W ≤ 10^9) — the number of packages and the weight capacity of the drone, respectively. The second line contains n integers w_i (1 ≤ w_i ≤ W) — the weights of the packages. -----Output----- Print one integer — the minimum number of flights required to deliver all packages. -----Examples----- Input 5 10 1 2 3 4 5 Output 3 Input 4 15 8 15 7 10 Output 3 -----Note----- In the first example, you can make the following flights: - First flight with packages weighing [5, 4] (total weight = 9) - Second flight with packages weighing [3, 2] (total weight = 5) - Third flight with package weighing [1] (total weight = 1) In the second example, you can make the following flights: - First flight with package weighing [15] (total weight = 15) - Second flight with packages weighing [10, 5] (total weight = 15) - Third flight with package weighing [8] (total weight = 8)","solution":"def minimum_flights(n, W, weights): weights.sort(reverse=True) flights = 0 i, j = 0, n - 1 while i <= j: if weights[i] + weights[j] <= W: j -= 1 i += 1 flights += 1 return flights # Example usage: # n = 5 # W = 10 # weights = [1, 2, 3, 4, 5] # print(minimum_flights(n, W, weights)) # Output: 3 # n = 4 # W = 15 # weights = [8, 15, 7, 10] # print(minimum_flights(n, W, weights)) # Output: 3"},{"question":"A company organizes a meeting where n employees sit in a circle, each assigned a unique ID from 1 to n. Each employee has a distinct knowledge level, represented by an integer k_i (1 ≤ k_i ≤ n), which indicates the number of people between themselves and the next most knowledgeable person around the circle. Employees with a higher knowledge level can see through smaller gaps to identify the knowledge level of another employee more easily. If two employees have the same visibility gap and knowledge level, the one with a higher ID is considered more knowledgeable. Write a program to compute the knowledge level of each employee, given their IDs and the visibility gap and origin for the most knowledgeable employees in the circle. Input: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ n), the number of employees and the number of given most knowledgeable employees. - The second line contains m integers, the IDs of the most knowledgeable employees in the order of the circle starting from the smallest ID. - The next line contains a list of m integers representing the number of people each given employee can see in the circle before another knowledgeable peer. Output: Print a single line containing the employee knowledge levels in the order of their IDs from 1 to n. Examples: Input: 8 3 1 5 7 2 4 2 Output: 1 2 3 4 5 6 7 8 Input: 5 2 2 5 3 1 Output: 1 2 3 4 5","solution":"def compute_knowledge_levels(n, m, most_knowledgeable_ids, visibility_gap): # Create a list to store knowledge levels with default value n (the highest level initially) knowledge_levels = [n] * n # Sort the most_knowledgeable_ids and their associated visibility gaps together sorted_pairs = sorted(zip(most_knowledgeable_ids, visibility_gap)) # Assign knowledge levels starting from 1 to m based on the sorted most knowledgeable ids for level, (employee_id, _) in enumerate(sorted_pairs, 1): knowledge_levels[employee_id - 1] = level # Return the result as a list of knowledge levels return knowledge_levels"},{"question":"A website requires users to create passwords that are both secure and easy to remember. To help users generate such passwords, they decide to create a tool that checks if a given password meets the security criteria. The password must adhere to the following rules: 1. Length between 8 and 20 characters. 2. At least one lowercase letter. 3. At least one uppercase letter. 4. At least one digit. 5. At least one special character from the set: !@#%^&*()-+ Your task is to write a program that checks whether a given password meets all these requirements. INPUT: The first line contains an integer T (1 ≤ T ≤ 100): the number of test cases. Each of the following T lines contains a string S representing the password to be tested. The string S will only contain printable ASCII characters. OUTPUT: For each test case, output \\"YES\\" if the password is secure according to the given rules, otherwise output \\"NO\\". SAMPLE INPUT: 3 Password123! short1! NoSpecialChar123 SAMPLE OUTPUT: YES NO NO Explanation: In the first test case, \\"Password123!\\" is valid as it meets all the rules. In the second test case, \\"short1!\\" is invalid because its length is less than 8 characters. In the third test case, \\"NoSpecialChar123\\" is invalid because it does not contain any special characters from the specified set.","solution":"def is_secure_password(password): if len(password) < 8 or len(password) > 20: return \\"NO\\" has_lower = any(c.islower() for c in password) has_upper = any(c.isupper() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if has_lower and has_upper and has_digit and has_special: return \\"YES\\" return \\"NO\\" def password_checker(T, passwords): return [is_secure_password(password) for password in passwords]"},{"question":"Alice has a collection of different colored marbles, and she loves to arrange them in patterns. She plans to create a spiral pattern on the floor, starting from the center and moving outwards in a clockwise direction. Each marble has a unique identifier (a positive integer). Given the sequence of identifiers of the marbles and the side length of the spiral grid, write a program to generate the spiral pattern. Input: The first line contains number of test cases T. Each test case contains two parts: the first part is an integer N representing the side length of the square grid (which means the grid will be of N x N size), and the second part is a sequence of N*N unique positive integers representing the identifiers of the marbles. Output: For each test case, print the N x N grid with the marbles arranged in a spiral pattern, starting from the top-left corner and moving towards the center. Each row of the grid should be printed on a new line, and the elements within each row should be separated by a single space. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ identifier ≤ 10^6 SAMPLE INPUT 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 SAMPLE OUTPUT 1 2 3 8 9 4 7 6 5 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Explanation: Test Case #1: N=3, marbles=[1, 2, 3, 4, 5, 6, 7, 8, 9] Spiral pattern: 1 2 3 8 9 4 7 6 5 Test Case #2: N=4, marbles=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] Spiral pattern: 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7","solution":"def generate_spiral_pattern(n, marbles): grid = [[0]*n for _ in range(n)] top, bottom, left, right = 0, n-1, 0, n-1 direction = 0 # 0-right, 1-down, 2-left, 3-up index = 0 while top <= bottom and left <= right: if direction == 0: # Move right for i in range(left, right + 1): grid[top][i] = marbles[index] index += 1 top += 1 elif direction == 1: # Move down for i in range(top, bottom + 1): grid[i][right] = marbles[index] index += 1 right -= 1 elif direction == 2: # Move left for i in range(right, left - 1, -1): grid[bottom][i] = marbles[index] index += 1 bottom -= 1 elif direction == 3: # Move up for i in range(bottom, top - 1, -1): grid[i][left] = marbles[index] index += 1 left += 1 direction = (direction + 1) % 4 return grid def process_input_and_generate_output(test_cases): results = [] for test_case in test_cases: n, marbles = test_case[0], test_case[1:] spiral_pattern = generate_spiral_pattern(n, marbles) results.append(spiral_pattern) return results def format_output(result): formatted_output = [] for grid in result: formatted_output.append(\\"n\\".join(\\" \\".join(map(str, row)) for row in grid)) return formatted_output"},{"question":"An international cargo shipping company needs a system to estimate the minimum amount of fuel required for various depots to dispatch their trucks based on the weight of the cargo to be delivered. Each truck at a depot has a maximum load capacity it can carry, and each route requires a specific amount of fuel that depends on the weight of the cargo and the distance to be traveled. Given multiple depots, each with a fleet of trucks, you need to determine the minimum fuel required for each depot to deliver all the cargo it needs to dispatch. Assume that a truck can only take one trip to deliver its cargo. ----Input---- The first line contains an integer T, the number of test cases. For each test case: - The first line contains three integers N, D, and F where `N` is the number of trucks in the depot, `D` is the distance to be traveled, and `F` is the fuel efficiency in liters per unit weight per unit distance for all trucks. - The following N lines each contain two integers `capacity_i` and `cargo_i` denoting the maximum load capacity of the `i-th` truck and the weight of the cargo assigned to the `i-th` truck. ----Output---- For each test case, output a single line containing the minimum fuel required for the depot to dispatch all its trucks. If it\'s impossible to deliver the cargo with the given truck capacities, output \\"Impossible\\". ----Constraints---- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ D ≤ 1000 - 1 ≤ F ≤ 10 - 1 ≤ capacity_i ≤ 1000 - 1 ≤ cargo_i ≤ 1000 ----Example----- Input: 2 3 500 2 1000 450 1200 500 1500 300 2 700 1 1100 1200 900 800 Output: 290000 Impossible ----Explanation---- Example case 1: The first truck needs `450 * 500 * 2 = 450000` liters of fuel to deliver its cargo. The second truck needs `500 * 500 * 2 = 500000` liters of fuel to deliver its cargo. The third truck needs `300 * 500 * 2 = 300000` liters of fuel to deliver its cargo. So, the total minimum fuel required for the first depot is `450000 + 500000 + 300000 = 1250000` liters. Example case 2: The first truck cannot carry its assigned cargo of 1200 units as its capacity is only 1100 units. Therefore, it is impossible to dispatch all the trucks with the given capacities.","solution":"def minimum_fuel_required(T, test_cases): results = [] for i in range(T): N, D, F = test_cases[i][:3] truck_data = test_cases[i][3:] total_fuel = 0 possible = True for j in range(N): capacity, cargo = truck_data[j] if cargo > capacity: possible = False break total_fuel += cargo * D * F if possible: results.append(total_fuel) else: results.append(\\"Impossible\\") return results # Helper function to format input data def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): N, D, F = map(int, lines[index].strip().split()) index += 1 truck_data = [] for _ in range(N): capacity, cargo = map(int, lines[index].strip().split()) truck_data.append((capacity, cargo)) index += 1 test_cases.append((N, D, F) + tuple(truck_data)) return T, test_cases"},{"question":"You are given a string containing words separated by single spaces. Each word is a sequence of lowercase alphabetical characters. Your task is to write a function that rearranges the words in reverse lexicographical order and returns the modified string. For example: ```python Input: \\"the quick brown fox jumps over the lazy dog\\" Output: \\"the the quick over lazy jumps fox dog brown\\" Input: \\"banana apple cherry\\" Output: \\"cherry banana apple\\" Input: \\"a ab abc\\" Output: \\"abc ab a\\" ``` Make sure to consider: 1. The input string will not have any leading or trailing spaces. 2. Words are separated by a single space. 3. All words consist of lowercase alphabetical characters only. 4. Your function should handle input strings where all words are the same or already in reversed lexicographical order. Your function should return the rearranged string.","solution":"def reverse_lexicographical_order(input_string): This function rearranges the words in the input string in reverse lexicographical order. Args: - input_string (str): A string containing words separated by single spaces. Returns: - str: A new string with words rearranged in reverse lexicographical order. words = input_string.split() words.sort(reverse=True) return \' \'.join(words)"},{"question":"You are given a string consisting of lowercase alphabets and a list of lowercase words. The task is to determine if the string can be segmented into a space-separated sequence of one or more of the given words from the list. Print \\"YES\\" if it is possible, otherwise \\"NO\\". ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string S. The second line of each test case contains an integer N denoting the number of words in the list. The third line contains N space-separated lowercase words. ------ Output ------ For each test case, print a single line containing \\"YES\\" if the string can be segmented as described, otherwise \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 300 1 ≤ N ≤ 100 1 ≤ |word| ≤ 50 for each word in the list S and words contain only lowercase English letters ----- Sample Input 1 ------ 2 applepenapple 2 apple pen catsandog 5 cats dog sand and cat ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Example case 1: The string \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Example case 2: The string \\"catsandog\\" cannot be segmented into a space-separated sequence of the words \\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\".","solution":"def can_segment_string(s, word_list): Determines if the string s can be segmented into a space-separated sequence of one or more words from word_list. word_set = set(word_list) n = len(s) dp = [False] * (n + 1) dp[0] = True # Base case, an empty string can always be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[n] else \\"NO\\" def handle_test_cases(test_cases): results = [] for s, word_list in test_cases: results.append(can_segment_string(s, word_list)) return results # Reading input and output sequences def main(t, test_cases): return handle_test_cases(test_cases)"},{"question":"Alex loves experimenting with sequences. Recently, he came across a peculiar sequence which he named the \\"zigzag sequence.\\" A zigzag sequence of length n is defined as a sequence of n integers where the differences between each consecutive pair (absolute value) alternates in a greater than, less than, greater than pattern, or vice versa. In other words, if the first difference is greater, the second must be less, the third greater, and so on. Alex needs your help in determining if a given sequence is a zigzag sequence. Write a function that takes an integer n followed by a sequence of n integers and checks if the sequence is a zigzag sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) representing the length of the sequence. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the sequence. -----Output----- The output should be a single line containing \\"Yes\\" (without the quotes) if the given sequence is a zigzag sequence, and \\"No\\" (without the quotes) otherwise. -----Examples----- Input 5 1 3 2 4 3 Output Yes Input 4 5 1 2 3 Output No Input 3 1 2 1 Output Yes -----Note----- Sample 1: The differences are [2, -1, 2, -1], where the differences alternate in sign. Sample 2: The differences are [-4, 1, 1], where the differences do not alternate properly. Sample 3: The differences are [1, -1], where the differences alternate in sign. Make sure the function handles edge cases and has an efficient solution to handle large inputs within the given constraints.","solution":"def is_zigzag_sequence(nums): Determines if the given sequence is a zigzag sequence. Args: nums (list[int]): The sequence of integers. Returns: str: \\"Yes\\" if the sequence is a zigzag sequence, \\"No\\" otherwise. if len(nums) < 2: return \\"Yes\\" # A single number or an empty sequence is considered a zigzag sequence. # Calculate the differences between consecutive elements diffs = [nums[i] - nums[i - 1] for i in range(1, len(nums))] # Check the zigzag pattern in differences for i in range(1, len(diffs)): if (diffs[i - 1] > 0) == (diffs[i] > 0): return \\"No\\" return \\"Yes\\""},{"question":"You are given an empty grid of size `N x N` where `N` is an integer. The grid is initially empty, and you have to perform a series of operations on it. Each operation can be one of the following three types: 1. Set the value at a specific cell `(i, j)` to a given integer `v`. 2. Get the value at a specific cell `(i, j)`. 3. Calculate and return the sum of values in a specified subgrid defined by its top-left corner `(x1, y1)` and bottom-right corner `(x2, y2)`. Implement a program that processes these operations efficiently. # Constraints - 1 ≤ N ≤ 500. - 1 ≤ Q ≤ 100,000. - 1 ≤ v ≤ 10^9. - 1 ≤ i, j, x1, y1, x2, y2 ≤ N. # Input The first line contains two integers `N` and `Q`. The next `Q` lines describe the operations: - For a set operation: `\\"1 i j v\\"` - For a get operation: `\\"2 i j\\"` - For a sum operation: `\\"3 x1 y1 x2 y2\\"` # Output For each get and sum operation, output the corresponding result. # Example Input ``` 5 7 1 1 1 5 1 2 2 4 2 1 1 3 1 1 2 2 1 3 3 7 3 1 1 3 3 2 3 3 ``` Output ``` 5 9 16 7 ``` # Explanation 1. Set the value at cell (1, 1) to 5. 2. Set the value at cell (2, 2) to 4. 3. Get the value at cell (1, 1), which is 5. 4. Calculate the sum of subgrid from (1, 1) to (2, 2), which is 5 + 4 = 9. 5. Set the value at cell (3, 3) to 7. 6. Calculate the sum of subgrid from (1, 1) to (3, 3), which is 5 + 4 + 7 = 16. 7. Get the value at cell (3, 3), which is 7.","solution":"class Grid: def __init__(self, N): self.N = N self.grid = [[0] * (N + 1) for _ in range(N + 1)] self.prefix_sum = [[0] * (N + 1) for _ in range(N + 1)] def set_value(self, i, j, v): old_value = self.grid[i][j] self.grid[i][j] = v # Update the prefix sum by computing the difference caused by the new value delta = v - old_value for x in range(i, self.N + 1): for y in range(j, self.N + 1): self.prefix_sum[x][y] += delta def get_value(self, i, j): return self.grid[i][j] def sum_subgrid(self, x1, y1, x2, y2): return (self.prefix_sum[x2][y2] - self.prefix_sum[x1 - 1][y2] - self.prefix_sum[x2][y1 - 1] + self.prefix_sum[x1 - 1][y1 - 1]) def process_operations(N, operations): grid = Grid(N) results = [] for operation in operations: values = list(map(int, operation.split())) op_type = values[0] if op_type == 1: _, i, j, v = values grid.set_value(i, j, v) elif op_type == 2: _, i, j = values results.append(grid.get_value(i, j)) elif op_type == 3: _, x1, y1, x2, y2 = values results.append(grid.sum_subgrid(x1, y1, x2, y2)) return results"},{"question":"A company wants to design a schedule optimization tool to help its employees pick up tasks efficiently through a priority-based queue. Each task has a priority score. Design the following operations for a system that manages tasks using a max-priority queue: * addTask(p): Adds a task with priority p to the queue. This operation should maintain the max-priority order, where tasks with higher priority numbers are processed first. * getHighestPriorityTask(): Removes and returns the task with the highest priority from the queue. If there are multiple tasks with the same priority, return any one of them. Initially, the queue is empty. Constraints * 1 leq t leq 500,000 * 1 leq p leq 1,000,000 * Operations will be provided in a manner that ensures the queue is not empty before calling getHighestPriorityTask. Input The input is given in the following format: t operation_1 operation_2 : operation_t Each operation operation_i is given by 0 p (representing addTask with priority p) or 1 (representing getHighestPriorityTask) Output For each getHighestPriorityTask operation, print the priority of the removed task on a new line. Example Input 6 0 5 0 3 0 10 1 0 8 1 Output 10 8","solution":"import heapq class MaxPriorityQueue: def __init__(self): self.heap = [] def addTask(self, p): heapq.heappush(self.heap, -p) def getHighestPriorityTask(self): return -heapq.heappop(self.heap) def process_operations(operations): output = [] pq = MaxPriorityQueue() for operation in operations: if operation[0] == 0: pq.addTask(operation[1]) elif operation[0] == 1: output.append(pq.getHighestPriorityTask()) return output"},{"question":"Jane is playing a game where she needs to throw a dice multiple times and record the results. She wants to determine how many times each possible result (1 through 6) appears in her throws. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line of each test case contains N, the number of throws. - The second line contains N space-separated integers representing the results of each throw. ------ Output Format ------ For each test case, output six integers on a new line. Each integer represents the count of occurrences of the numbers 1 to 6, in that order. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ each result ≤ 6 ----- Sample Input 1 ------ 3 6 1 2 2 3 4 5 5 6 6 6 6 6 7 2 3 4 5 6 1 1 ----- Sample Output 1 ------ 1 2 1 1 1 1 0 0 0 0 0 5 2 1 1 1 1 1 ----- Explanation 1 ------ Test Case 1: The sequence has 1 of \'1\', 2 of \'2\', 1 of \'3\', 1 of \'4\', 1 of \'5\' and 0 of \'6\'. Test Case 2: The sequence has 0 of \'1\', \'2\', \'3\', \'4\', \'5\' and 5 of \'6\'. Test Case 3: The sequence has 2 of \'1\', 1 of \'2\', \'3\', \'4\', \'5\', \'6\' respectively.","solution":"def count_dice_throws(T, test_cases): Given T test cases, each containing N throws, return the count of occurrences of dice results 1 to 6. results = [] for i in range(T): N = test_cases[i][0] throws = test_cases[i][1] counts = [0] * 6 # Initialize counts for numbers 1 to 6 for throw in throws: counts[throw - 1] += 1 results.append(counts) return results"},{"question":"Max is organizing a game tournament where players compete in teams. Each team must consist of exactly M players and the number of teams must be at least one. However, there are S players and Max needs to decide how many complete teams can be formed and how many players are left out. Moreover, he wants to balance the teams as much as possible to ensure fair play. Given the total number of players S and the number of players per team M, you need to tell Max the maximum number of complete teams that can be formed and how many players are left unassigned, ensuring a balanced allocation. Input: The first line of input contains an integer T denoting the total number of test cases. Each test case consists of a single line containing two space-separated integers S and M denoting the total number of players and the number of players per team, respectively. Output: For each test case, output a single line containing two space-separated integers representing the maximum number of complete teams that can be formed and the number of unassigned players. Constraints: 1 ≤ T ≤ 1000 1 ≤ S ≤ 10^6 1 ≤ M ≤ 10^6 SAMPLE INPUT 3 10 3 25 5 12 7 SAMPLE OUTPUT 3 1 5 0 1 5 Explanation: test 1: 3 complete teams can be formed with 3 players each, leaving 1 player unassigned. test 2: 5 complete teams can be formed with 5 players each, leaving no players unassigned. test 3: 1 complete team can be formed with 7 players, leaving 5 players unassigned.","solution":"def max_teams(S, M): Returns the maximum number of complete teams that can be formed and the number of unassigned players. Parameters: S (int): total number of players M (int): number of players per team Returns: tuple: (maximum number of complete teams, number of unassigned players) if M == 0: # Prevent division by zero return 0, S teams = S // M unassigned = S % M return teams, unassigned def tournament_result(test_cases): Processes multiple test cases to determine the results for each. Parameters: test_cases (list): List of tuples where each tuple contains integers S and M Returns: list: List of results for each test case results = [max_teams(S, M) for S, M in test_cases] return results"},{"question":"A company is organizing a team-building relay race. The race involves three types of participants: runners, cyclists, and swimmers. Each of these participants must come from a different country. There are N countries, and the ith country has r_i runners, c_i cyclists, and s_i swimmers. Your task is to determine the number of different relay teams that can be formed. A team consists of one runner, one cyclist, and one swimmer from three different countries. Two relay teams are different if the sets of involved people are different. -----Input----- The first line contains an integer N, where 3 leq N leq 10^5. The following N lines each contain three integers r_ i, c_ i, s_ i with 0 leq r_ i, c_ i, s_ i leq 10^6. You can assume sum _{i=1}^N r_ i leq 10^6, sum _{i=1}^N c_ i leq 10^6, and sum _{i=1}^N s_ i leq 10^6. -----Output----- A single integer, the number of possible different relay teams. -----Explanation of Sample 1----- Assume the runners from the first country are called R_1 and R_2, the cyclists from the second country are called C_1 and C_2, and the swimmers from the third country are called S_1 and S_2. Then there are 4 teams where R_1 is the runner, C_1 or C_2 is the cyclist, and S_1 or S_2 is the swimmer: { R_1, C_1, S_1} , { R_1, C_1, S_2} , { R_1, C_2, S_1} , and { R_1, C_2, S_2} . Similarly, there are 4 teams with R_2. In total, there are 8 possible different teams. -----Examples----- Sample Input: 3 2 0 0 0 2 0 0 0 2 Sample Output: 8","solution":"def number_of_teams(n, participants): total_runners = sum([p[0] for p in participants]) total_cyclists = sum([p[1] for p in participants]) total_swimmers = sum([p[2] for p in participants]) return total_runners * total_cyclists * total_swimmers"},{"question":"Alice is working on a project that involves string manipulation. She needs your help to solve a specific problem. Given a string of lowercase English letters, she needs to rearrange the characters so that no two adjacent characters are the same. If more than one solution is possible, she wants the lexicographically smallest solution. If it is not possible to rearrange the string to meet the condition, return \\"Not Possible\\". For example, given the string \\"aaabb\\", one possible rearrangement is \\"ababa\\", which meets the condition and is both valid and lexicographically smallest. Can you help her solve this problem? ------ Input ------ The input consists of a single string S of length N (1 ≤ N ≤ 10^4) of lowercase English letters. - Length of S will not exceed 10^4. - The characters in the string are all lowercase English letters. ------ Output ------ Return the lexicographically smallest string that can be formed so that no two adjacent characters are the same. If it is not possible to rearrange the string to meet the condition, return \\"Not Possible\\". ------ Example ------ Input: \\"aaabb\\" Output: \\"ababa\\" Input: \\"xxy\\" Output: \\"xyx\\" Input: \\"aaa\\" Output: \\"Not Possible\\"","solution":"import heapq from collections import Counter def rearrange_string(S): Rearranges the characters in the string so that no two adjacent characters are the same. Returns the lexicographically smallest solution or \\"Not Possible\\" if it cannot be done. counter = Counter(S) max_count = (len(S) + 1) // 2 for count in counter.values(): if count > max_count: return \\"Not Possible\\" heap = [] for char, count in counter.items(): heapq.heappush(heap, (-count, char)) prev_char, prev_count = \'\', 0 result = [] while heap: count, char = heapq.heappop(heap) result.append(char) if prev_count < 0: heapq.heappush(heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 return \'\'.join(result)"},{"question":"Mr. Sharma is organizing a competition for coding enthusiasts. Each participant in the competition receives a unique participant ID, which is a positive integer. After the competition, Mr. Sharma realized that he had mistakenly given out some participant IDs to multiple participants. He now needs your help to determine which participant IDs were duplicated. You are provided with a list of participant IDs representing all the participants in the competition. Your task is to find and output the duplicate participant IDs in ascending order. Input Format The first line contains an integer mbox{N}, the number of participants. The second line contains mbox{N} space-separated integers representing the participant IDs. Constraints 1 leq mbox{N} leq 10^5 1 leq text{participant_ID} leq 10^6 Output Format Output the duplicate participant IDs in ascending order. If no duplicates are found, output the string \\"No duplicates\\". Sample Input 7 3 1 4 2 8 3 2 Sample Output 2 3 Explanation The list of participant IDs contains 7 elements, with IDs 3 and 2 appearing more than once. Therefore, the output is 2 3 in ascending order. If there were no duplicates, the output should have been \\"No duplicates\\".","solution":"def find_duplicates(participant_ids): Finds and returns the duplicate participant IDs in ascending order. If no duplicates are found, returns \'No duplicates\'. from collections import defaultdict id_count = defaultdict(int) for pid in participant_ids: id_count[pid] += 1 duplicates = [pid for pid, count in id_count.items() if count > 1] if duplicates: return sorted(duplicates) else: return \\"No duplicates\\" def process_input(n, participant_ids_list): Process the input and returns the duplicates in the required output format. If there are no duplicates, returns \\"No duplicates\\". Otherwise, returns a space-separated string of duplicate participant IDs in ascending order. result = find_duplicates(participant_ids_list) if result == \\"No duplicates\\": return result else: return \\" \\".join(map(str, result))"},{"question":"You have been given an array of integers. Your task is to determine how many times the mode (the most frequent element) of the array appears. If there is a tie for the mode, return the highest frequency among the tied values. -----Input----- N : the number of elements in the array A : list of N integers 1 <= N <= 100 1 <= A[i] <= 1000 -----Output----- The frequency of the mode -----Example----- Input: 6 1 2 2 3 3 3 Output: 3","solution":"def mode_frequency(N, A): from collections import Counter if N == 0: return 0 # Count the frequency of each element in the array using Counter count = Counter(A) # Get the highest frequency (mode frequency) mode_freq = max(count.values()) return mode_freq"},{"question":"A sequence of numbers is called \\"happy\\" if every element in the sequence is divisible by the previous element (the initial element can be any integer). For example: [2, 4, 8] is a happy sequence because 4 div 2 = 2 (an integer) and 8 div 4 = 2 (an integer). [1, 3, 9] is a happy sequence because 3 div 1 = 3 (an integer) and 9 div 3 = 3 (an integer). [2, 5, 10] is not a happy sequence because 5 div 2 is not an integer. Given an array [a_1, a_2, ldots, a_n], determine if it is possible to create a non-empty happy subsequence from this array. A subsequence is derived by deleting some or none of the elements from the array without changing the order of the remaining elements. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — elements of the array. It\'s guaranteed that the sum of n over all test cases won\'t exceed 10^5. -----Output----- For each test case, print YES if it is possible to create a non-empty happy subsequence from the array and NO otherwise. You can print each letter in any case. -----Examples----- Input 3 3 2 4 6 4 3 6 7 12 5 5 7 11 13 17 Output YES YES NO -----Note----- In the first test case, the entire sequence [2, 4] can form a happy subsequence. In the second test case, the subsequence [3, 6] can form a happy sequence. In the third test case, it is impossible to form a happy subsequence.","solution":"def is_happy_subsequence_possible(n, array): Determines if it is possible to create a non-empty happy subsequence from the given array. for i in range(n): for j in range(i + 1, n): if array[j] % array[i] == 0: return \\"YES\\" return \\"NO\\" def happy_sequences(t, test_cases): Given test_cases with t as the number of test cases and each test case having an array of integers, determines for each test case if a happy subsequence is possible. results = [] for n, array in test_cases: results.append(is_happy_subsequence_possible(n, array)) return results"},{"question":"A large company is organizing a conference where N speakers will present their talks. Each speaker is assigned a unique ID from 1 to N. However, to prevent consecutive speakers from presenting back-to-back, the company wants to rearrange the order of presentations in such a way that no speaker will present immediately after their unique ID neighbor (i.e., ID n-1 or ID n+1). The company has asked for your help to determine such an arrangement. If there are multiple valid arrangements, return any one of them. If it is not possible to rearrange the speakers accordingly, return \\"Not possible\\". Write a function `arrange_speakers(n: int) -> Union[str, List[int]]` that takes an integer N and returns a list representing a valid arrangement of the speakers or the string \\"Not possible\\" if no valid arrangement exists. # Input - The input consists of a single integer N, the number of speakers. # Output - Output a list of integers representing one valid arrangement of speaker IDs. - If no valid arrangement exists, return the string \\"Not possible\\". # Constraints 1 ≤ N ≤ 100,000 # Examples Example 1 Input: ``` 5 ``` Output: ``` [1, 3, 5, 2, 4] ``` Example 2 Input: ``` 4 ``` Output: ``` [2, 4, 1, 3] ``` Example 3 Input: ``` 3 ``` Output: ``` [2, 1, 3] ``` Example 4 Input: ``` 2 ``` Output: ``` Not possible ``` # Notes - In the first example, speaker with ID 1 is not followed by speaker ID 2, ID 2 is not followed by ID 3, and so on. - In the fourth example, it is not possible to rearrange two speakers to avoid consecutive presentations.","solution":"from typing import List, Union def arrange_speakers(n: int) -> Union[str, List[int]]: if n == 1: return [1] if n == 2: return \\"Not possible\\" # Create two halves, odd and even odd_speakers = list(range(1, n + 1, 2)) even_speakers = list(range(2, n + 1, 2)) # Combine them by putting all odd ones first, then even ones arrangement = odd_speakers + even_speakers return arrangement"},{"question":"You are given an integer L, 1 ≤ L ≤ 1000000, which represents the number of levels in a pyramid. Each level i (1 ≤ i ≤ L) contains i blocks. The task is to calculate the total number of blocks required to build the pyramid. For example, for L = 3, the pyramid will have: - Level 1: 1 block - Level 2: 2 blocks - Level 3: 3 blocks Thus, the total number of blocks = 1 + 2 + 3 = 6. Input A single integer L (1 ≤ L ≤ 1000000), on a single line. Output Your output must be a single integer, the total number of blocks required to build the pyramid. Example Input: 3 Output: 6","solution":"def total_blocks(L): Calculate the total number of blocks required to build a pyramid with L levels. Args: L (int): The number of levels in the pyramid. 1 ≤ L ≤ 1000000. Returns: int: The total number of blocks required to build the pyramid. return L * (L + 1) // 2"},{"question":"Task You have to write a function named `count_occurrences` that accepts two arguments: a string `text` and a string `word`. The function returns the number of times `word` appears in `text` as a standalone word with case insensitivity. # Requirements - Words inside `text` should be considered standalone if they are surrounded by spaces, punctuation marks, or are at the beginning or end of `text`. # Inputs - `text` (a string): the text in which to search for `word`. - `word` (a string): the word to count occurrences of. # Outputs - An integer representing the number of occurrences of `word` as a standalone word in `text`. # Examples Example 1: ```python count_occurrences(\\"Python is great and python is dynamic\\", \\"python\\") ``` Output: ```python 2 ``` Example 2: ```python count_occurrences(\\"Hello world! How\'s the world today?\\", \\"world\\") ``` Output: ```python 2 ``` Example 3: ```python count_occurrences(\\"The quick-brown fox jumps over the lazy-dog! Is fox fast?\\", \\"fox\\") ``` Output: ```python 2 ``` # Note - You need to handle different punctuation marks such as periods, commas, exclamation points, question marks, etc. - Ensure the function is case insensitive, meaning \\"Python\\" and \\"python\\" should be considered the same.","solution":"import re def count_occurrences(text, word): Returns the number of times `word` appears in `text` as a standalone word, case insensitively. Args: - text (str): the text in which to search for `word`. - word (str): the word to count occurrences of. Returns: - int: number of occurrences of `word` in `text` as a standalone word. # Use regular expression to find standalone words pattern = re.compile(r\'b\' + re.escape(word) + r\'b\', re.IGNORECASE) matches = pattern.findall(text) return len(matches)"},{"question":"A tree is a connected acyclic graph. A tree with N nodes has exactly N-1 edges. You are given a tree with N nodes numbered from 1 to N. Each node in the tree has a value. The value of a path in this tree is defined as the sum of values of nodes lying on that path. Your task is to find the maximum value of any path in the tree. Input The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. For each test case: The first line contains an integer (2 ≤ N ≤ 100000), the number of nodes in the tree. The second line contains N integers, where the i-th integer is the value of the i-th node in the tree. Each value is a positive integer no larger than 100. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge between nodes u and v. Output For each test case, output a single integer, the maximum value of any path in the tree. SAMPLE INPUT 2 3 1 2 3 1 2 1 3 4 4 4 4 4 1 2 2 3 3 4 SAMPLE OUTPUT 6 16 Explanation For the 1st test case, the maximum value path is from node 2 to node 3 through node 1, with a total value of 2+1+3 = 6. For the 2nd test case, every path has the same sum of 16.","solution":"def find_max_path_value(trees): def get_tree_max_sum_dfs(node, parent): current_sum = node_values[node - 1] max_first, max_second = 0, 0 for neighbor in tree_graph[node]: if neighbor == parent: continue neighbor_sum = get_tree_max_sum_dfs(neighbor, node) if neighbor_sum > max_first: max_second = max_first max_first = neighbor_sum elif neighbor_sum > max_second: max_second = neighbor_sum max_path[0] = max(max_path[0], current_sum + max_first + max_second) return current_sum + max_first results = [] for nodes, values, edges in trees: node_values = values tree_graph = {i: [] for i in range(1, nodes + 1)} for u, v in edges: tree_graph[u].append(v) tree_graph[v].append(u) max_path = [0] get_tree_max_sum_dfs(1, -1) results.append(max_path[0]) return results def process_input(input_data): lines = input_data.split(\\"n\\") t = int(lines[0]) index = 1 trees = [] for _ in range(t): n = int(lines[index]) node_values = list(map(int, lines[index + 1].split())) edges = [] for j in range(n - 1): u, v = map(int, lines[index + 2 + j].split()) edges.append((u, v)) trees.append((n, node_values, edges)) index += n + 1 return trees input_data = 2 3 1 2 3 1 2 1 3 4 4 4 4 4 1 2 2 3 3 4 trees = process_input(input_data.strip()) output = find_max_path_value(trees) print(\\"n\\".join(map(str, output)))"},{"question":"Maria is training for a marathon and needs to calculate the minimum effort required to run along a path with different elevation levels. The path is represented by an array ( a ) of ( n ) integers, where ( a_i ) is the elevation at the ( i )th position along the path. Maria\'s running effort is calculated as follows: - Moving from a lower or equal elevation to a higher elevation increases her effort by the difference in elevation. - Moving from a higher elevation to a lower or equal elevation does not increase her effort. Your task is to help Maria determine the minimum effort required to run from the beginning of the path to the end. -----Input----- The first line of the input contains a single integer ( t ) (( 1 leq t leq 100 )) — the number of test cases. The first line of each test case contains a single integer ( n ) (( 2 leq n leq 100000 )) — the number of positions in the path. The second line of each test case contains ( n ) integers ( a_1, a_2, ..., a_n ) (( 1 leq a_i leq 1000 )) — the elevations at each position in the path. It is guaranteed that the sum of ( n ) across all test cases does not exceed 100000. -----Output----- For each test case, print a single integer — the minimum effort required for Maria to run from the beginning to the end of the path. -----Examples----- Input 3 5 1 2 3 2 4 4 4 2 3 5 3 10 5 2 Output 3 3 0 -----Note----- In the first test case, Maria\'s effort is calculated as follows: - Moving from 1 to 2 increases the effort by ( 2-1 = 1 ). - Moving from 2 to 3 increases the effort by ( 3-2 = 1 ). - Moving from 3 to 2 does not increase the effort (downhill). - Moving from 2 to 4 increases the effort by ( 4-2 = 2 ). The total effort required is ( 1 + 1 + 2 = 4 ). In the second test case, Maria\'s effort is calculated as follows: - Moving from 4 to 2 does not increase the effort (downhill). - Moving from 2 to 3 increases the effort by ( 3-2 = 1 ). - Moving from 3 to 5 increases the effort by ( 5-3 = 2 ). The total effort required is ( 1 + 2 = 3 ). In the third test case, Maria does not need any effort as she is always moving downhill or on a flat path. Thus, the effort required is ( 0 ).","solution":"def minimum_effort(t, test_cases): Calculate the minimum effort required for Maria to run from the beginning to the end of each path. Args: t (int): Number of test cases. test_cases (list): List of tuples, each containing the number of positions (n) and the elevations list (a) for the respective path. Returns: list: Minimum effort required for each test case. results = [] for case in test_cases: n, a = case effort = 0 for i in range(1, n): if a[i] > a[i-1]: effort += a[i] - a[i-1] results.append(effort) return results"},{"question":"You are given an e-commerce platform where each user has a shopping cart containing different items. Each item in the cart has a price and a quantity. The platform offers various discount coupons which users can apply to their cart. Each coupon has a minimum cart value it can be applied to and a discount percentage it provides. If multiple coupons are applicable, users can select only one coupon that maximizes their discount. Your task is to determine the final price of the cart for a given user after applying the best discount coupon. Input: The first line contains a single integer N which is the number of items in the cart. The following N lines each contain two integers P and Q where P is the price of an item and Q is its quantity. The next line contains a single integer M which represents the number of available discount coupons. The following M lines each contain two integers X and D where X is the minimum cart value required to apply the coupon, and D is the discount percentage provided by the coupon. Output: A single line containing the final price of the cart after applying the best discount coupon. Constraints: 1 ≤ N ≤ 1000 1 ≤ P, Q ≤ 10^5 1 ≤ M ≤ 100 1 ≤ X ≤ 10^9 1 ≤ D ≤ 100 Example: Input: 3 100 2 200 1 300 3 2 500 10 1000 20 Output: 1260 Explanation: The total cart value is 100*2 + 200*1 + 300*3 = 1300. Two coupons are available: - Coupon 1 offers a 10% discount for a minimum cart value of 500. - Coupon 2 offers a 20% discount for a minimum cart value of 1000. The best coupon is the second one with a 20% discount, which gives a discount of 260 on a cart value of 1300. Thus, the final price is 1300 - 260 = 1040.","solution":"def calculate_final_price(cart_items, coupons): Calculate the final price of the cart after applying the best discount coupon. Parameters: cart_items (list of tuples): Each tuple contains the price (P) and quantity (Q) of an item. coupons (list of tuples): Each tuple contains the minimum cart value (X) and discount percentage (D). Returns: float: The final price of the cart. # Calculate the total cart value total_cart_value = sum(p * q for p, q in cart_items) # Initialize the best discount best_discount = 0 # Find the best applicable discount for x, d in coupons: if total_cart_value >= x: discount_amount = total_cart_value * (d / 100) if discount_amount > best_discount: best_discount = discount_amount # Calculate the final price after applying the best discount final_price = total_cart_value - best_discount return final_price"},{"question":"# You’ve Got the Power! Alice has discovered a magical power that allows her to manipulate numerical sequences. She\'s now facing a new challenge to use her power in order to make numerical sequences follow a certain pattern. Given an integer `n` (`1 ≤ n ≤ 1000`), generate a sequence of integers from 1 to `n` where every integer in the resulting sequence is squared if it is an even number, and cubed if it is an odd number. The task is to write a function that takes an integer `n` and returns a list of integers, following the pattern described above. Input - An integer `n` (`1 ≤ n ≤ 1000`) which represents the length of the sequence. Output - A list of integers where every even number is squared and every odd number is cubed. Examples ```python Example 1: Input: 5 Output: [1, 4, 27, 16, 125] Explanation: 1 (cubed) = 1 2 (squared) = 4 3 (cubed) = 27 4 (squared) = 16 5 (cubed) = 125 Example 2: Input: 3 Output: [1, 4, 27] Explanation: 1 (cubed) = 1 2 (squared) = 4 3 (cubed) = 27 ```","solution":"def magical_sequence(n): Generates a sequence of integers from 1 to n where every even number is squared and every odd number is cubed. Parameters: n (int): The length of the sequence. Returns: list: The generated sequence. result = [] for i in range(1, n + 1): if i % 2 == 0: result.append(i ** 2) else: result.append(i ** 3) return result"},{"question":"You are given a string consisting of lowercase English letters. A palindrome is a string that reads the same backward as forward. Your task is to find the shortest length of the string you need to remove to make the given string a palindrome. Note that the resulting string after removal must be a palindrome and it cannot be empty. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of a string s (1 le |s| le 2000), where |s| is the length of s. It is guaranteed that the sum of the lengths of s over all test cases does not exceed 2000. -----Output----- For each test case, print one integer — the shortest length of the string you need to remove to make the given string a palindrome. -----Example----- Input 3 abcdcba abca deed Output 0 1 0","solution":"def min_remove_to_palindrome(s): Returns the shortest length of the string you need to remove to make the given string a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] n = len(s) lps = longest_palindromic_subsequence(s) return n - lps def solve(t, cases): results = [] for s in cases: results.append(min_remove_to_palindrome(s)) return results"},{"question":"Given a string, determine if it is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters. The palindrome does not need to be limited to just dictionary words. You can ignore case and non-letter characters. Example 1: Input: \\"Tact Coa\\" Output: True Explanation: \\"Tact Coa\\" is a permutation of \\"taco cat\\", which is a palindrome. Example 2: Input: \\"Hello\\" Output: False Explanation: \\"Hello\\" is not a permutation of any palindrome. Note: - Your algorithm should have a linear runtime complexity. - You can assume the string contains ASCII characters only.","solution":"def is_palindrome_permutation(s): Determine if the input string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards. Only consider letters and ignore case. from collections import Counter # Convert to lowercase and remove non-letter characters s = \'\'.join(c.lower() for c in s if c.isalpha()) # Count the frequency of each character char_count = Counter(s) # Check the number of odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Magic Square Validator A magic square is a grid of numbers where the sum of the numbers in each row, each column, and the two main diagonals are all the same. In this problem, you are tasked with determining if a given N x N grid is a magic square. Write a program to check if the provided N x N grid of numbers is a magic square. Input The input consists of multiple datasets. Each dataset is formed as follows: > The size of the grid N (1 ≤ N ≤ 10) > N lines, each containing N integers (each integer between 1 and 100, inclusive) separated by a space. The input ends with a line containing a single zero. Output For each dataset, output \\"True\\" if the grid forms a magic square and \\"False\\" otherwise. Output lines may not include any characters except the words \\"True\\" or \\"False\\". Sample Input 3 2 7 6 9 5 1 4 3 8 4 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 2 1 2 3 4 0 Output for the Sample Input True True False Example Input 3 2 7 6 9 5 1 4 3 8 4 16 2 3 13 5 11 10 8 9 7 6 12 4 14 15 1 2 1 2 3 4 0 Output True True False","solution":"def is_magic_square(grid): N = len(grid) if N == 0: return False magic_sum = sum(grid[0]) # Check sums of rows for row in grid: if sum(row) != magic_sum: return False # Check sums of columns for col in range(N): if sum(grid[row][col] for row in range(N)) != magic_sum: return False # Check sums of diagonals if sum(grid[i][i] for i in range(N)) != magic_sum: return False if sum(grid[i][N - 1 - i] for i in range(N)) != magic_sum: return False return True def process_input(input_data): datasets = input_data.strip().split(\'n\') result = [] i = 0 while i < len(datasets): N = int(datasets[i]) if N == 0: break grid = [] for j in range(i + 1, i + 1 + N): grid.append(list(map(int, datasets[j].split()))) result.append(is_magic_square(grid)) i += N + 1 return result"},{"question":"Given an integer n denoting the number of kilograms a person needs to ship, and a list containing two values denoting the cost per kilogram for standard and express shipping respectively. Calculate the total shipping cost based on the given criteria: - If the weight is less than 10 kg, use the standard shipping cost. - If the weight is 10 kg or more, use the express shipping cost. Example 1: Input: n = 7, costs = [5, 10] Output: 35 Explanation: The weight is less than 10 kg, so we use the standard shipping cost, which is 5 per kilogram. Total cost = 7 * 5 = 35. Example 2: Input: n = 15, costs = [5, 10] Output: 150 Explanation: The weight is 10 kg or more, so we use the express shipping cost, which is 10 per kilogram. Total cost = 15 * 10 = 150. Your task: You do not need to read input or print anything. Your task is to complete the function calculateShippingCost() which takes an integer n and a list costs[] containing the cost per kilogram for standard and express shipping respectively, as input parameters. It should return the total shipping cost as an integer. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 50 1 ≤ standard cost, express cost ≤ 20","solution":"def calculateShippingCost(n, costs): Calculate the total shipping cost based on the number of kilograms n and given costs. Parameters: n (int): The number of kilograms to ship. costs (List[int]): A list containing the cost per kilogram for standard and express shipping respectively. Returns: int: The total shipping cost. standard_cost, express_cost = costs if n < 10: return n * standard_cost else: return n * express_cost"},{"question":"# Task You are given a string `sentence` which contains words and spaces. Your task is to rearrange the words in the sentence in ascending order of their lengths. If two words have the same length, they should appear in the same order as in the input sentence. Write a function `arrange_words_by_length` that takes in a string `sentence` and returns a new string where the words are ordered by their lengths. # Example For `sentence = \\"the quick brown fox jumps\\"`, the output should be `\\"the fox quick brown jumps\\"`. ``` Input: \\"the quick brown fox jumps\\" Output: \\"the fox quick brown jumps\\" ``` For `sentence = \\"hello world\\"` the output should be `\\"hello world\\"` since both words have the same length and should retain their original order. ``` Input: \\"hello world\\" Output: \\"hello world\\" ``` # Input/Output ```if-not:sql - `[input]` string `sentence` A string containing one or more words separated by spaces. Each word consists of lowercase English letters. Constraints: `1 ≤ len(sentence) ≤ 1000`. - `[output]` a string A string where the words are reordered by their lengths. ``` ```if:sql Input ~~~ -------------------- | Column | Type | |-------------+-------| | sentence | text | -------------------- ~~~ Output ~~~ ---------------- | arranged | text | ---------------- ~~~ `arranged` is a string where the words are reordered by their lengths, maintaining the relative order of same-length words. ```","solution":"def arrange_words_by_length(sentence): Rearranges words in the sentence in ascending order of their lengths. If two words have the same length, they appear in the same order as in the original sentence. Args: sentence (str): The input sentence containing words separated by spaces. Returns: str: A new string with words ordered by their lengths. words = sentence.split() sorted_words = sorted(words, key=len) return \' \'.join(sorted_words)"},{"question":"Given an array of strings, group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your task is to write a function that receives an array of strings and returns a list of lists, where each sublist contains the anagrams found in the input array. Input Format - The first line contains an integer `n`, the number of strings in the array. - Each of the next `n` lines contains a single string from the array. Output Format - Print a list of lists, where each sublist contains anagrams from the input array. Constraints - (1 leq n leq 10^4) - The maximum length of each string is 100. Example Input 4 eat tea tan ate Example Output [[\'eat\', \'tea\', \'ate\'], [\'tan\']] Explanation The anagrams \\"eat\\", \\"tea\\", and \\"ate\\" are grouped together in one sublist. The word \\"tan\\" has no anagram in the input array and is thus in its own sublist.","solution":"from collections import defaultdict def group_anagrams(strings): Groups anagrams together from the list of input strings. Params: strings (List[str]): A list of strings. Returns: List[List[str]]: A list of lists where each sublist contains anagrams. anagrams = defaultdict(list) for s in strings: key = \'\'.join(sorted(s)) anagrams[key].append(s) return list(anagrams.values())"},{"question":"A string is said to be a palindrome if it reads the same forward and backward, after transforming all uppercase letters to lowercase and removing all non-alphanumeric characters. Given a string, write a function that determines whether it is a palindrome. Your Task Complete the function that takes a string `s` and returns `true` if `s` is a palindrome, and `false` otherwise. Examples ``` \\"isPalindrome(\'A man, a plan, a canal: Panama\') --> true \\"isPalindrome(\'race a car\') --> false \\"isPalindrome(\' \') --> true ``` Note - For the purposes of this problem, you can assume that input will be a non-empty string containing at least one alphanumeric character.","solution":"def isPalindrome(s): Returns True if the given string is a palindrome, and False otherwise. A string is considered a palindrome if it reads the same forward and backward, after transforming all uppercase letters to lowercase and removing all non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forwards and backwards return cleaned == cleaned[::-1]"},{"question":"Consider a string s consisting of lower case letters and digits. Write a program that reads s and outputs the longest substring of s which contains only a single unique character. -----Input----- A string s with 1 leq text{length of } s leq 1000. -----Output----- Print the length of the longest substring that has only one unique character. -----Explanation of Sample Inputs----- In Sample Input 1, the string s = \\"aabbccccddd\\". The longest substring consisting of a single unique character is \\"cccc\\", which has a length of 4. In Sample Input 2, the string s = \\"111122233\\". The longest substring consisting of a single unique character is \\"1111\\", which has a length of 4. -----Examples----- Sample Input: aabbccccddd Sample Output: 4 Sample Input: 111122233 Sample Output: 4","solution":"def longest_unique_char_substring(s): Returns the length of the longest substring containing only a single unique character. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 return max(max_len, current_len)"},{"question":"Alice is organizing a bookshelf containing N books. Each book has a unique thickness given as an array B of length N. She wants to divide the bookshelf into two sections such that the sum of the thickness of the books in each section is as equal as possible. Write a program to find the minimum possible absolute difference between the sums of the two sections. -----Constraints----- - N is an integer between 1 and 50 (inclusive). - B is an array of integers where each integer is between 1 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N B_1 B_2 B_3 ... B_N -----Output----- Print the minimum possible absolute difference between the sums of the two sections. -----Sample Input----- 5 1 3 2 4 5 -----Sample Output----- 1 Explanation: The bookshelf can be divided into sections with sums (1+4) = 5 and (3+2+5) = 10 or (1+2+4) = 7 and (3+5) = 8. The minimum possible absolute difference is 1.","solution":"def min_difference(N, B): Returns the minimum possible absolute difference between the sums of the two sections. total_sum = sum(B) half_sum = total_sum // 2 # Initialize a DP array with size (half_sum + 1) and set the first element to True dp = [False] * (half_sum + 1) dp[0] = True for thickness in B: # Update the DP array from back to front for j in range(half_sum, thickness - 1, -1): if dp[j - thickness]: dp[j] = True # Find the largest j for which dp[j] is True for j in range(half_sum, -1, -1): if dp[j]: return total_sum - 2 * j"},{"question":"Given a list of integers, find the starting and ending position of a given target value. If the target is not found in the list, return [-1, -1]. Example: Input: nums = [5, 7, 7, 8, 8, 10], target = 8 Output: [3, 4] Input: nums = [5, 7, 7, 8, 8, 10], target = 6 Output: [-1, -1] Note: You can assume that the list is sorted in ascending order.","solution":"def search_range(nums, target): Returns the starting and ending position of a given target value in a sorted list of integers. If the target is not found, returns [-1, -1]. def find_start(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] >= target: right = mid - 1 else: left = mid + 1 return left def find_end(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 return right start = find_start(nums, target) end = find_end(nums, target) # Validate the range if start <= end and start < len(nums) and nums[start] == target and nums[end] == target: return [start, end] return [-1, -1]"},{"question":"You are given an array of integers where some elements appear exactly twice, while one element appears exactly once. Your task is to identify the element that appears only once. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains an integer N, the length of the array. The second line of input contains N space-separated integers, representing the elements of the array. -----Output----- For each test case, output the integer that appears only once. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - It is guaranteed that exactly one element appears once, and all other elements appear exactly twice. -----Example----- Input 3 5 1 2 3 2 1 7 4 5 6 7 5 6 4 9 8 9 10 9 8 11 10 12 12 Output 3 7 11 -----Explanation----- For the first test case, the integer \'3\' appears only once while all other integers appear twice. In the second test case, \'7\' appears only once and all other elements appear twice. In the third test case, \'11\' appears only once and all other elements appear twice.","solution":"def find_unique_element(arr): Finds the element that appears only once in the array where all other elements appear exactly twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element def unique_elements_in_tests(test_cases): Processes multiple test cases to find the unique element in each case. results = [] for case in test_cases: _, arr = case result = find_unique_element(arr) results.append(result) return results"},{"question":"You are given an array of n integers and a target sum. Your task is to determine if there are any three distinct integers in the array that add up to the target sum. If such a combination exists, return the indices of those three integers. If there are multiple valid solutions, return any one of them. If no such indices exist, return -1. -----Input----- The first line contains a single integer n (3 le n le 10^5) — the number of integers in the array. The second line contains n integers separated by spaces — the elements of the array. Each integer is in the range of -10^9 to 10^9. The third line contains a single integer target — the target sum. -----Output----- Print three integers, the 0-based indices of the three elements that add up to the target sum. If multiple such triples exist, print any one of them. If no such triple exists, print -1. -----Example----- Input 6 1 2 3 4 5 6 10 Output 0 1 4 Input 4 -1 2 1 -4 1 Output -1 -----Note----- In the first testcase, the elements at indices [0, 1, 4] are [1, 2, 5] which sum up to 10. In the second testcase, there is no combination of three distinct elements that sum up to 1, hence the output is -1.","solution":"def find_three_indices(arr, target): Finds three indices in the array such that their elements sum up to the target. Parameters: arr (list of int): The list of integers target (int): The target sum Returns: tuple of int: A tuple containing the three indices, or -1 if no such indices exist. n = len(arr) for i in range(n): seen = {} current_sum = target - arr[i] for j in range(i + 1, n): complement = current_sum - arr[j] if complement in seen: return (i, seen[complement], j) seen[arr[j]] = j return -1"},{"question":"Given an array of integers, write a program to permute the array so that no element appears in its original position (i.e., a derangement). If there is no possible derangement for the given array, return -1. # Input Format - The first line contains an integer T, the number of test cases. The description of the T test cases follows. - Each test case contains 2 lines. - The first line of each test case contains an integer N, the number of elements in the array. - The second line of each test case contains N space-separated integers, the elements of the array. # Output Format - For each test case, print a single line with the deranged array elements (in a single line with space-separated integers) if a derangement is possible. - If it is not possible to construct a derangement, print -1. # Constraints - 1 le T le 10 - 1 le N le 1000 - 0 le A[i] le 1000 for all valid indices i # Subtasks - Subtask #1 (100 points): original constraints # Example Input ``` 3 4 1 2 3 4 3 1 1 1 1 5 ``` # Example Output ``` 2 1 4 3 -1 -1 ``` # Explanation Test Case 1: One possible derangement is [2, 1, 4, 3]. Other possible derangements might exist. Test Case 2: All elements are the same, hence it is impossible to derange the array. Thus, the answer is -1. Test Case 3: A single element cannot be deranged and thus returns -1.","solution":"import random def derangement(arr): Returns a derangement of the array if possible, otherwise returns -1. n = len(arr) if n == 1: return -1 deranged = list(arr) random.shuffle(deranged) # Check if shuffled list forms a derangement for i in range(n): if deranged[i] == arr[i]: # We will make a linear check through and fix conflicts for j in range(n): if deranged[j] != arr[i] and deranged[i] != arr[j]: deranged[i], deranged[j] = deranged[j], deranged[i] break else: # If unable to fix the conflict return -1 return deranged def process_test_cases(test_cases): results = [] for arr in test_cases: deranged = derangement(arr) if deranged == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, deranged))) return results def main(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 arr = list(map(int, data[idx:idx+N])) idx += N test_cases.append(arr) results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Two rabbits live in a garden laid out as a rectangular grid of cells with `R` rows and `C` columns. Each cell can be either empty or contain an obstacle. The rabbits can move up, down, left, or right, but cannot move into a cell containing an obstacle, nor can they move outside the grid. You are given the positions of both rabbits and their goal is to meet each other on the same cell. Write a program to determine if it is possible for the two rabbits to meet. Input The first line of input contains two integers `R` and `C` (2 ≤ R, C ≤ 100) — the number of rows and columns in the garden. The next `R` lines each contain `C` characters (\'.\' denotes an empty cell and \'#\' denotes an obstacle). The following two lines each contain two integers `r1`, `c1`, `r2`, `c2` (1 ≤ r1, r2 ≤ R, 1 ≤ c1, c2 ≤ C) — the starting positions of the first and second rabbit, respectively. Output Output \\"YES\\" (without quotes) if it is possible for the two rabbits to meet. Otherwise, output \\"NO\\". Examples Input 4 4 .... .#.. ..#. .... 1 1 4 4 Output YES Input 3 3 .#. # .#. 1 1 3 3 Output NO","solution":"def can_rabbits_meet(R, C, garden, r1, c1, r2, c2): from collections import deque def is_valid_move(r, c): return 0 <= r < R and 0 <= c < C and garden[r][c] == \'.\' def bfs(start): queue = deque([start]) visited = set([start]) while queue: r, c = queue.popleft() for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if is_valid_move(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc)) return visited start1 = (r1 - 1, c1 - 1) start2 = (r2 - 1, c2 - 1) reach1 = bfs(start1) reach2 = bfs(start2) return \\"YES\\" if reach1 & reach2 else \\"NO\\""},{"question":"You are given an array of integers and an integer `k`. Implement a function that determines if there are any two distinct elements in the array that sum up to `k`. If such a pair exists, return `True`; otherwise, return `False`. **Note**: - You should consider all pairs of distinct elements in the array. - The function should handle both positive and negative numbers. - If the array is empty or has only one element, return `False`. **Example**: ```python # Example 1: input_array = [10, 15, 3, 7] k = 17 # The pairs (10, 7) sum up to 17, so the function should return True. # Example 2: input_array = [1, 2, 3, 4, 5] k = 10 # No pairs sum up to 10 in the array, so the function should return False. # Example 3: input_array = [] k = 8 # The array is empty, so the function should return False. # Example 4: input_array = [5] k = 5 # The array has only one element, so the function should return False. ``` **Function Signature**: ```python def has_pair_with_sum(input_array: list[int], k: int) -> bool: pass ```","solution":"def has_pair_with_sum(input_array: list[int], k: int) -> bool: Determines if there are any two distinct elements in the array that sum up to k. Parameters: - input_array (list of int): The array of integers. - k (int): The target sum. Returns: - bool: True if there exists a pair of distinct elements that sum up to k, False otherwise. seen = set() for num in input_array: if k - num in seen: return True seen.add(num) return False"},{"question":"Uttu is fascinated by palindromes and often challenges Shil with different palindrome-related puzzles. Recently, Uttu introduced Shil to a new game involving strings and palindromes. Given a string, Shil needs to determine if it\'s possible to make the string a palindrome by removing at most one character. INPUT The first line will contain an integer T, the number of strings. Each of the next T lines will contain a string S. OUTPUT For each string S, output \\"YES\\" if it is possible to make the string a palindrome by removing at most one character, and \\"NO\\" otherwise. CONSTRAINTS T ≤ 10^4 |S| ≤ 10^5 All characters in the input strings are lowercase Latin characters (\'a\'-\'z\'). The total length of all strings in a test file will not exceed 10^6. SAMPLE INPUT 2 abca abc SAMPLE OUTPUT YES NO","solution":"def is_palindrome(s, i, j): Helper function to check if the substring s[i:j+1] is a palindrome. while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True def can_be_made_palindrome(s): Function to check if the string s can be made a palindrome by removing at most one character. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing either the character at left or at right return is_palindrome(s, left+1, right) or is_palindrome(s, left, right-1) left += 1 right -= 1 return True def process_inputs(T, strings): results = [] for s in strings: if can_be_made_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A website wants to analyze the traffic over the entire year to identify which days had the highest number of visits. The year is divided into N intervals, and each interval specifies the number of visits on each day within that interval. The task is to determine the maximum number of visits on any single day throughout the year. For example, consider N = 3 intervals: the first interval is from day 1 to day 10 with 5 visits per day, the second interval is from day 5 to day 15 with 7 visits per day, and the third interval is from day 20 to day 25 with 3 visits per day. The highest number of visits on any single day occurs on days 5 to 10 with 12 visits (5 visits from the first interval and 7 visits from the second interval). -----Input----- The first line contains an integer N (1 le N le 100) denoting the number of intervals. Each of the next N lines contains three integers s_i, e_i, and v_i (1 le s_i le e_i le 365, 1 le v_i le 1000) denoting that the interval from day s_i to day e_i has v_i visits per day. -----Output----- The output contains an integer denoting the maximum number of visits on any single day throughout the year. -----Examples----- Sample Input 1: 3 1 10 5 5 15 7 20 25 3 Sample Output 1: 12 Sample Input 2: 2 1 365 1 100 200 2 Sample Output 2: 3","solution":"def find_max_visits(n, intervals): # Create a list for the number of visits per day for each of the 365 days in a year visits = [0] * 366 # To handle day numbers from 1 to 365 # Process each interval for s, e, v in intervals: for day in range(s, e + 1): visits[day] += v # Find the maximum number of visits on any single day max_visits = max(visits) return max_visits"},{"question":"Codie has a list of `n` distinct integers. Codie can perform a sequence of operations on the list. In each operation, Codie can pick any subarray and reverse it. For example, if the list is `[1, 4, 3, 6]` and Codie picks the subarray `[4, 3]`, the list becomes `[1, 3, 4, 6]`. Codie wants to transform the list into a non-decreasing order. Determine the minimum number of operations Codie needs to perform to achieve this. -----Constraints----- - 1 ≤ n ≤ 10^5 - The list contains distinct integers. -----Input----- The input is given from Standard Input in the following format: ``` n a_1 a_2 ... a_n ``` where `a_i` is the i-th element of the list. -----Output----- Print the minimum number of operations needed to sort the list in non-decreasing order. -----Sample Input----- 4 3 1 4 2 -----Sample Output----- 2","solution":"def min_operations_to_sort(n, arr): if n <= 1: return 0 # Count the number of already sorted segments segments = 1 for i in range(1, n): if arr[i] < arr[i - 1]: segments += 1 # The minimum number of operations is the number of segments minus one return segments - 1"},{"question":"You are given a list of integers representing the heights of buildings in a row. Each building is of width 1. The goal is to find the area of the largest rectangle that can be formed by combining adjacent buildings. Input format: The first line contains a single integer n, the number of buildings. The second line contains n space-separated integers representing the heights of the buildings. Output format: Output contains a single integer - the area of the largest rectangle that can be formed. Constraints: 1 ≤ n ≤ 1000 1 ≤ height of each building ≤ 1000 Sample input 1: 6 2 1 5 6 2 3 Sample output 1: 10 Explanation: The largest rectangle has an area equal to 10, formed by the buildings with heights 5 and 6. Sample input 2: 4 2 4 2 1 Sample output 2: 6 Explanation: The largest rectangle has an area equal to 6, formed by two buildings with height 2 at the beginning.","solution":"def largest_rectangle_area(heights): Calculate the area of the largest rectangle that can be formed by combining adjacent buildings. Args: heights (list): List of integers representing the heights of buildings. Returns: int: The area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a list of numbers. Your task is to identify all the prime numbers in the list and print them in ascending order. Input Format The first line will contain a single integer mathbf{N} which represents the number of elements in the list. The second line of input will contain space-separated integers. Output Format Print the prime numbers in ascending order separated by spaces. If there are no prime numbers, print an empty line. Constraints 1 leq N leq 1000 1 leq Each number leq 10^6 Sample Input 7 10 15 3 7 22 13 27 Sample Output 3 7 13 Explanation The numbers 3, 7, and 13 are prime numbers and are printed in ascending order. In this example, there were three numbers in the list that were prime: 3, 7, and 13. They are printed in ascending order.","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # all other even numbers are not primes sqrt_n = int(n**0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return False return True def find_primes_in_list(numbers): Returns a list of prime numbers found in the input list, sorted in ascending order. primes = [number for number in numbers if is_prime(number)] primes.sort() return primes def main(N, str_numbers): N is the number of elements in the list. str_numbers is a string of space-separated integers. This function should print the sorted prime numbers in ascending order. numbers = list(map(int, str_numbers.split())) primes = find_primes_in_list(numbers) print(\' \'.join(map(str, primes))) # Example N = 7 str_numbers = \\"10 15 3 7 22 13 27\\" main(N, str_numbers)"},{"question":"You are tasked with developing a new feature for an online educational platform that manages and tracks student test scores. A class consists of `n` students, each identified by a unique ID from `1` to `n`. The platform stores the scores of `m` tests taken by these students. Each test has exactly one score per student. Your task is to implement a function that takes in the scores of the students in each test and determines the total and average score for each student across all tests they have taken. To simplify the problem, assume that if a student has not taken a particular test, their score for that test is considered to be zero. The function should return a list of tuples where each tuple contains the student ID, their total score, and their average score. Input - The first line contains two space-separated integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), the number of students and the number of tests respectively. - The next `m` lines contain `n` space-separated integers, where the `j-th` integer in the `i-th` line represents the score of the `j-th` student in the `i-th` test. Scores are non-negative integers (0 ≤ score ≤ 100). Output - Output `n` lines, each line containing three space-separated numbers: the student ID, the total score of the student, and the average score of the student rounded to two decimal places. Examples Input 3 2 50 60 70 80 90 100 Output 1 130 65.00 2 150 75.00 3 170 85.00 Input 2 3 10 20 30 40 50 60 Output 1 90 30.00 2 120 40.00 Note In the first example, the total score for student 1 is 50 + 80 = 130 and the average score is 130 / 2 = 65.00. For student 2, the total score is 60 + 90 = 150 and the average is 150 / 2 = 75.00. For student 3, the total score is 70 + 100 = 170 and the average is 170 / 2 = 85.00. In the second example, the total score for student 1 is 10 + 30 + 50 = 90 and the average score is 90 / 3 = 30.00. For student 2, the total score is 20 + 40 + 60 = 120 and the average is 120 / 3 = 40.00.","solution":"def calculate_student_scores(n, m, scores): Calculate the total and average scores of students. :param n: Number of students :param m: Number of tests :param scores: Matrix of scores where scores[i][j] is the score of student i in test j. :return: List of tuples with student ID, total score, and average score. # Initialize lists to store total scores and count of tests taken total_scores = [0] * n # Calculate total scores for each student for test_scores in scores: for student_id in range(n): total_scores[student_id] += test_scores[student_id] # Calculate average scores and format the result result = [] for student_id in range(n): total_score = total_scores[student_id] average_score = total_score / m result.append((student_id + 1, total_score, round(average_score, 2))) return result # Example usage n, m = 3, 2 scores = [ [50, 60, 70], [80, 90, 100] ] print(calculate_student_scores(n, m, scores)) n, m = 2, 3 scores = [ [10, 20], [30, 40], [50, 60] ] print(calculate_student_scores(n, m, scores))"},{"question":"A very curious cat named Whiskers loves to play with strings. One day, Whiskers discovered a game where he had to remove letters from two strings to make them anagrams of each other. For the game, Whiskers has two strings, string A of length n and string B of length m. To win, he needs to remove the minimum number of characters from both of the strings so that they become anagrams of each other. Your task is to help Whiskers determine the total number of characters he needs to remove from both strings to achieve his goal. Input The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. The next t lines each contain two strings A and B consisting of lowercase English letters (1 ≤ |A|, |B| ≤ 10^5). Output For each test case, output a single integer, the minimum number of characters that need to be removed from the two strings in order to make them anagrams of each other. SAMPLE INPUT 2 cde abc abcd efgh SAMPLE OUTPUT 4 8 Explanation For the first test case: To make \\"cde\\" and \\"abc\\" anagrams, we can remove \'d\' and \'e\' from \\"cde\\" and \'a\' and \'b\' from \\"abc\\". Hence, the total number of characters removed is 4. For the second test case: To make \\"abcd\\" and \\"efgh\\" anagrams, we need to remove all characters from both strings because they have no common letters. Hence, the total number of characters removed is 8.","solution":"def min_removals_to_make_anagrams(t, test_cases): from collections import Counter def count_removals(A, B): count_A = Counter(A) count_B = Counter(B) # Calculate characters to remove from both A and B removals = 0 # Characters in A not in B for char in count_A: if char in count_B: removals += abs(count_A[char] - count_B[char]) else: removals += count_A[char] # Characters in B not in A for char in count_B: if char not in count_A: removals += count_B[char] return removals results = [] for A, B in test_cases: results.append(count_removals(A, B)) return results"},{"question":"John is trying to organize his bookshelf and wants to categorize his books based on their page count to determine if a book is a short story, a novella, or a novel. Given the number of pages, help John categorize his books using the following criteria: - Less than 100 pages is a \'Short Story\'. - Between 100 and 300 pages inclusive is a \'Novella\'. - More than 300 pages is a \'Novel\'. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of books. - Each of the following T lines contains a single integer P, denoting the number of pages in each book. ------ Output Format ------ For each book, output \'Short Story\', \'Novella\', or \'Novel\' based on the criteria mentioned above. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ P ≤ 1000 ------ Sample Input 1 ------ 5 85 120 250 305 99 ------ Sample Output 1 ------ Short Story Novella Novella Novel Short Story ------ Explanation 1 ------ Test case 1: Since the book has 85 pages, which is less than 100 pages, it is categorized as a \'Short Story\'. Test case 2: Since the book has 120 pages, which is between 100 and 300 pages inclusive, it is categorized as a \'Novella\'. Test case 3: Since the book has 250 pages, which is between 100 and 300 pages inclusive, it is categorized as a \'Novella\'. Test case 4: Since the book has 305 pages, which is more than 300 pages, it is categorized as a \'Novel\'. Test case 5: Since the book has 99 pages, which is less than 100 pages, it is categorized as a \'Short Story\'.","solution":"def categorize_books(T, pages): Categorizes books based on the number of pages. Parameters: T (int): Number of books pages (list of int): Page count for each book Returns: list of str: Category of each book (\'Short Story\', \'Novella\', \'Novel\') categories = [] for P in pages: if P < 100: categories.append(\'Short Story\') elif 100 <= P <= 300: categories.append(\'Novella\') else: categories.append(\'Novel\') return categories"},{"question":"You are organizing a coding marathon that will last for n days. For each day, you are provided with a list of the times taken by each participant to complete a coding task. Your goal is to determine the number of participants who improved their time from the previous day, meaning they took less time to complete the task compared to the day before. Additionally, if a participant didn\'t participate in the previous day\'s task, you should not count their times. If a participant is new to the marathon on the current day or did not participate on the previous day, they should not be considered for improvement. Input The first line of input contains a single integer n (2 ≤ n ≤ 100), which represents the number of days the marathon lasts. The next n lines describe the times taken by participants on each day. Each line starts with an integer ki (1 ≤ ki ≤ 100), denoting the number of participants on the i-th day. Following this, there are ki space-separated integers representing the times taken by the participants on that day. The times are given in the order of participant IDs, which remain consistent throughout the days. Output Print a single integer - the number of participants who improved their times compared to the previous day. Example Input 3 3 90 80 70 3 85 70 60 3 80 75 65 Output 4 Explanation On the second day, participants 1 and 3 improved their times compared to the first day (90 > 85 and 70 > 60). On the third day, participants 1 and 3 improved their times again compared to the second day (85 > 80 and 60 > 65). Thus, the total number of improvements is 4.","solution":"def count_improvements(n, times): improvements = 0 for i in range(1, n): for j in range(len(times[i])): if times[i-1][j] > times[i][j]: improvements += 1 return improvements def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) times = [] for line in lines[1:]: times.append(list(map(int, line.split()[1:]))) return n, times def main(input_str): n, times = parse_input(input_str) return count_improvements(n, times)"},{"question":"You are an astronaut stationed on a space station. In your spare time, you have developed a small hobby to pass the time: you like to observe the movement patterns of small robots designed to repair the station’s outer structure. Each robot moves in the cardinal directions (North, South, East, West) based on a sequence of instructions you provide. Recently, you started noticing that some sequences of movements return the robot to its original starting position. You are intrigued by this and want to write a program that can analyze a given sequence of instructions and determine if the robot will return to its starting position after executing the entire sequence. -----Task----- You are given a sequence of movement instructions for a robot. Your task is to determine if after following all the instructions, the robot will be back to its starting position. -----Input description----- The input consists of a single string. The string contains only the characters \'N\', \'S\', \'E\', and \'W\'. The length of the string will be at least 1 and at most 100000 characters. -----Output description----- Output \\"YES\\" if the robot will return to its starting position after following the sequence of movements. Otherwise, output \\"NO\\". -----Examples----- Sample Input: ENWS Sample Output: YES Sample Input: ENWN Sample Output: NO","solution":"def is_back_to_origin(movements): Determines if the robot returns to the starting position after a sequence of movements. Parameters: movements (str): A string containing the movements instructions (characters \'N\', \'S\', \'E\', \'W\'). Returns: str: \\"YES\\" if the robot returns to the starting position, otherwise \\"NO\\". x, y = 0, 0 for move in movements: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Consider a matrix represented as a list of lists. Each inner list represents a row of the matrix. You are asked to rotate the matrix 90 degrees clockwise. Define a function `rotate_matrix(matrix: List[List[int]]) -> List[List[int]]` that performs this rotation. For example, given the following matrix: ```python [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Another example, given the matrix: ```python [ [1, 2], [3, 4], [5, 6] ] ``` The function should return: ```python [ [5, 3, 1], [6, 4, 2] ] ``` You may assume the input matrix is non-empty and all inner lists are of the same length. Happy coding!","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given matrix 90 degrees clockwise. # Number of rows and columns rows = len(matrix) cols = len(matrix[0]) # New matrix to store the rotated version rotated = [] for col in range(cols): new_row = [] for row in reversed(range(rows)): new_row.append(matrix[row][col]) rotated.append(new_row) return rotated"},{"question":"Given an array of integers, find the maximum sum of any subarray (contiguous sequences of the array). For a given array `arr` of length `n`, your task is to write a function that returns this maximum sum. The subarray should contain at least one element. Input - The first line contains an integer `t`, `1 ≤ t ≤ 100`, representing the number of test cases. - Each of the next `t` blocks contains two lines: - The first line of the block contains an integer `n`, where `1 ≤ n ≤ 10^5`, representing the length of the array. - The second line of the block contains `n` integers representing the elements of the array, with each element `ai` satisfying `−10^4 ≤ ai ≤ 10^4`. Output For each test case, output a single line containing the maximum sum of any subarray in the respective array. Sample Input 3 5 1 2 -1 2 -3 4 -1 -2 -3 -4 6 1 2 3 4 -10 10 Output 4 -1 10","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray (contiguous sequence of the array) using Kadane\'s algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(t, test_cases): results = [] for n, arr in test_cases: result = max_subarray_sum(arr) results.append(result) return results"},{"question":"The town of Arrayville has an interesting tradition of organizing a Pyramid-building competition every year. A Pyramid is built using integers and the level of the Pyramid determines how many integers are there in each row. You are given an integer N – the height of the Pyramid, and you need to generate the Pyramid following these rules: 1. The first level (i.e., First row) has 1 integer, the second level has 2 integers, the third level has 3 integers, and so on until the N-th level. 2. All the integers in the Pyramid are in increasing order starting from 1. # Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer N, the height of the Pyramid. # Output: For each test case, print the Pyramid up to height N. # Constraints: - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 20 # Sample Input: ``` 2 3 4 ``` # Sample Output: ``` 1 2 3 4 5 6 1 2 3 4 5 6 7 8 9 10 ``` # Explanation: For a height N=3, the Pyramid is: - Level 1 has 1 integer: 1 - Level 2 has 2 integers: 2, 3 - Level 3 has 3 integers: 4, 5, 6 For a height N=4, the Pyramid is: - Level 1 has 1 integer: 1 - Level 2 has 2 integers: 2, 3 - Level 3 has 3 integers: 4, 5, 6 - Level 4 has 4 integers: 7, 8, 9, 10","solution":"def generate_pyramid(N): result = [] current_number = 1 for level in range(1, N + 1): current_level = [] for _ in range(level): current_level.append(current_number) current_number += 1 result.append(current_level) return result def process_test_cases(test_cases): result = [] for N in test_cases: pyramid = generate_pyramid(N) result.append(pyramid) return result"},{"question":"One very hot morning in Lispland, the citizens woke up to find that the famous Code River had overflowed. In its wake, it left behind a potential for muddy pathways that connected various houses in the town. Since it\'s dangerous to walk on these muddy paths, they have decided to build bridges over them. You are tasked with determining the minimum cost of building these bridges. Each bridge requires a specific amount of wood, which varies based on the distance between the houses. The amount of wood required to build a bridge between house `i` and house `j` is given by |x[i] - x[j]| where x[i] is the position of house `i` on a coordinate line. -----Input----- The first line contains a single integer `n` (2 ≤ n ≤ 2 * 10^5) — the number of houses. The second line contains `n` integers x[1], x[2], ..., x[n] (-10^9 ≤ x[i] ≤ 10^9) — the positions of the houses on the coordinate line. -----Output----- Print the minimum amount of wood required to ensure all houses are connected either directly or indirectly through bridges. -----Examples----- Input 4 1 3 4 6 Output 5 Input 3 10 1 5 Output 9 -----Note----- In the first sample case, the optimal way is to build bridges between houses at positions 1-3, 3-4, and 4-6, totaling 2 + 1 + 2 = 5 units of wood. In the second sample case, the optimal way is to build bridges between houses at positions 1-5 and 5-10, totaling 4 + 5 = 9 units of wood. Your job is to select the positions and build the required bridges using the minimum amount of wood possible.","solution":"def min_wood_required(n, houses): Returns the minimum amount of wood required to connect all houses. Parameters: n : int The number of houses. houses : list of int The positions of the houses on the coordinate line. # Sort the positions of the houses houses.sort() # Calculate the total wood required by connecting houses sequentially total_wood = 0 for i in range(1, n): total_wood += houses[i] - houses[i - 1] return total_wood"},{"question":"Sarah is studying a list of n integers and wants to perform multiple types of operations on this list. She needs to be able to update the value at a specific index and also find the sum of values within a given range of indices. Your task is to help Sarah by writing a program that supports two types of operations: 1. Update the value at a specific index. 2. Compute the sum of values in a range. Input The first line contains two integers, n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000), where n is the number of elements in the list, and m is the number of operations to be performed. The second line contains n integers, each representing an element in the initial list. Each of the next m lines describes an operation in one of the two formats: - `1 x y` denotes updating the element at index x to the value y (1-based index). - `2 l r` denotes finding the sum of elements from index l to index r (both inclusive). Output For each sum operation, output a single integer representing the sum of the specified range. Examples Input 5 5 1 2 3 4 5 2 1 3 2 2 5 1 3 10 2 1 3 2 3 5 Output 6 14 13 19 Explanation Initially, the list is [1, 2, 3, 4, 5]. First operation is to find the sum of elements from index 1 to index 3, which is 1 + 2 + 3 = 6. Second operation is to find the sum of elements from index 2 to index 5, which is 2 + 3 + 4 + 5 = 14. Third operation updates the element at index 3 to 10. The list becomes [1, 2, 10, 4, 5]. Fourth operation finds the sum of elements from index 1 to index 3, which is 1 + 2 + 10 = 13. Fifth operation finds the sum of elements from index 3 to index 5, which is 10 + 4 + 5 = 19. Note To solve this problem efficiently, you may need a data structure that supports both point updates and range sum queries efficiently, such as a Fenwick Tree (Binary Indexed Tree) or a Segment Tree.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, value): while index <= self.size: self.tree[index] += value index += index & -index def prefix_sum(self, index): result = 0 while index > 0: result += self.tree[index] index -= index & -index return result def range_sum(self, left, right): return self.prefix_sum(right) - self.prefix_sum(left - 1) def perform_operations(n, m, initial_list, operations): fenwick_tree = FenwickTree(n) # Initialize Fenwick Tree for i in range(n): fenwick_tree.update(i + 1, initial_list[i]) results = [] for operation in operations: if operation[0] == 1: index, new_value = operation[1], operation[2] current_value = fenwick_tree.range_sum(index, index) fenwick_tree.update(index, new_value - current_value) elif operation[0] == 2: left, right = operation[1], operation[2] results.append(fenwick_tree.range_sum(left, right)) return results"},{"question":"You are provided with an N x N matrix \'grid\' filled with positive integers. Your task is to find the minimum sum of all elements in a path from the top-left corner to the bottom-right corner of the grid, while only being able to move either down or right at any point in time. Given the constraints and characteristics of the problem, implement a function that calculates this minimum path sum. You are to use dynamic programming to find the optimal solution efficiently. Input The first line of the input contains a single integer N (1 ≤ N ≤ 100), representing the dimensions of the grid. The next N lines each contain N integers, separated by spaces, which denote the grid. Output Print a single integer — the minimum sum of all elements in a path from the top-left corner to the bottom-right corner of the grid. Example Input 3 1 3 1 1 5 1 4 2 1 Output 7 Explanation The path 1 → 3 → 1 → 1 → 1 minimizes the sum for the provided grid, resulting in an answer of 7.","solution":"def min_path_sum(grid): Returns the minimum sum of all elements in a path from the top-left corner to the bottom-right corner of the grid, while only being able to move either down or right at any point in time. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a table to store the minimum sum at each point dp = [[0]*cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[rows-1][cols-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_path_sum(grid)) # Output: 7"},{"question":"Rahul is training for a marathon and tracks his running distances in kilometers each day of the week. He wants to know the average distance he runs on days when he runs at least a given minimum distance M. Can you help him calculate this average? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer M - the minimum distance Rahul considers. - The second line of each test case contains seven integers representing the distances Rahul runs on each day of the week from Monday to Sunday. ------ Output Format ------ For each test case, output the average distance (rounded to two decimal places) Rahul runs on days when the distance is at least M. If he doesn\'t run at least M kilometers on any day, output \\"0.00\\". ------ Constraints ------ 1 ≤ T ≤ 50 0 ≤ M ≤ 100 0 ≤ text{Distance on each day} ≤ 100 ----- Sample Input 1 ------ 2 5 10 5 3 6 8 2 7 8 4 9 12 5 10 3 8 ----- Sample Output 1 ------ 7.20 9.75 ----- Explanation 1 ----- Test case-1: Rahul runs 10, 5, 6, 8, and 7 kilometers on Monday, Tuesday, Thursday, Friday, and Sunday respectively. The distances on these days are 10, 6, 8, and 7, all of which are greater than or equal to 5. Therefore, the average distance is (10 + 6 + 8 + 7) / 4 = 7.20 kilometers. Test case-2: Rahul runs 9, 12, 10, and 8 kilometers on Tuesday, Wednesday, Friday, and Sunday respectively. The distances on these days are 9, 12, 10, and 8, all of which are greater than or equal to 8. Therefore, the average distance is (9 + 12 + 10 + 8) / 4 = 9.75 kilometers.","solution":"def average_distance_above_minimum(M, distances): Calculate the average distance Rahul runs on days when he runs at least `M` kilometers. Parameters: M (int): The minimum distance considered. distances (list of int): A list of seven integers representing the distances run each day. Returns: float: The average distance on days with at least `M` kilometers, rounded to two decimal places. filtered_distances = [d for d in distances if d >= M] if not filtered_distances: return 0.00 average = sum(filtered_distances) / len(filtered_distances) return round(average, 2) def process_inputs(test_cases): results = [] for case in test_cases: M, distances = case results.append(average_distance_above_minimum(M, distances)) return results"},{"question":"You are given a list of numbers and need to perform a series of operations on them. Specifically, your task is to calculate the prefix sum and then find the maximum prefix sum in each test case. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case will contain an integer N, the number of elements in the list. - The second line of each test case will contain N integers which are the elements of the list. -----Output:----- For each test case, output the maximum prefix sum. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - -100 leq text{elements of the list} leq 100 -----Sample Input:----- 3 5 1 -2 3 4 -1 4 2 3 -1 2 3 -1 -2 -3 -----Sample Output:----- 6 6 -1 -----EXPLANATION:----- For the first test case, the prefix sums are: 1, 1-2=-1, -1+3=2, 2+4=6, 6-1=5. The maximum prefix sum is 6. For the second test case, the prefix sums are: 2, 2+3=5, 5-1=4, 4+2=6. The maximum prefix sum is 6. For the third test case, the prefix sums are: -1, -1-2=-3, -3-3=-6. The maximum prefix sum is -1.","solution":"def max_prefix_sum(test_cases): results = [] for case in test_cases: N, numbers = case prefix_sum = 0 max_sum = float(\'-inf\') for number in numbers: prefix_sum += number if prefix_sum > max_sum: max_sum = prefix_sum results.append(max_sum) return results"},{"question":"# Problem: King\'s Pathway The kingdom of Zyldax has a grid-based map with `N x N` cells. Each cell has a height value that indicates the elevation at that point. The king wants to travel from the top-left corner of the grid to the bottom-right corner. The king can move to the right or downward to an adjacent cell but is reluctant to climb up more than necessary. Consequently, in any single move, the king can only transition to a cell of equal or lower height, or to a cell that is at most `H` units higher than the current cell. Given the height grid and the maximum allowed elevation gain `H`, determine if the king can reach the bottom-right corner starting from the top-left corner. # Input The first line contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. For each test case: - The first line contains two integers `N` and `H`, where `N` is the size of the grid and `H` is the maximum allowed elevation gain for each move. - The next `N` lines each contain `N` integers, representing the height values of each cell in the grid. # Output For each test case, output a single line containing `YES` if the king can reach the bottom-right corner, or `NO` if it is not possible. # Constraints - 1 ≤ `T` ≤ 10 - 1 ≤ `N` ≤ 500 - 0 ≤ `height` of any cell ≤ 10000 - 0 ≤ `H` ≤ 10000 # Example Input ``` 2 3 2 1 2 3 2 4 5 3 5 6 3 1 1 2 3 2 4 5 3 5 6 ``` Output ``` YES NO ``` # Explanation In the first test case, with H=2, the king can move from cell (1,1) -> (1,2) -> (2,2) -> (2,3) -> (3,3), following the path within the allowed elevation gain. In the second test case, with H=1, there is no viable path to reach the bottom-right corner given the constraints.","solution":"def can_king_reach_bottom(n, h, grid): from collections import deque directions = [(0, 1), (1, 0)] visited = [[False for _ in range(n)] for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] <= grid[x][y] + h: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def process_test_cases(t, test_cases): result = [] for test_case in test_cases: n, h = test_case[0] grid = test_case[1] result.append(can_king_reach_bottom(n, h, grid)) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, h = map(int, lines[index].split()) grid = [] for i in range(n): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append(((n, h), grid)) index += n + 1 return t, test_cases"},{"question":"You are given two non-empty strings s1 and s2. Write a function to determine if s2 is a substring of s1 after one possible rotation. A rotation by a single position means moving the leftmost character to the rightmost position. Example 1: Input: s1 = \\"waterbottle\\", s2 = \\"erbottlewat\\" Output: true Explanation: By rotating \\"waterbottle\\" one position to the right, it becomes \\"ewaterbottl\\". Repeating this process eventually gives \\"erbottlewat\\". Example 2: Input: s1 = \\"hello\\", s2 = \\"ohlel\\" Output: false Explanation: It is not possible to obtain \\"ohlel\\" from rotating \\"hello\\". Example 3: Input: s1 = \\"abcdefg\\", s2 = \\"efgabcd\\" Output: true Explanation: By rotating \\"abcdefg\\", it becomes \\"gabcdef\\". Further rotations eventually give \\"efgabcd\\". Note: - The strings may contain lowercase alphabets only. - You may assume that s1 and s2 are of the same length.","solution":"def is_rotation(s1, s2): Returns True if s2 is a rotation of s1 by one position, False otherwise. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Given a string `s`, check if it can be rearranged to form a palindrome. If it is possible, return the lexicographically smallest palindrome that can be formed. Otherwise, return an empty string. # Example ```python s1 = \\"aabb\\" # Can be rearranged to form \\"abba\\", which is the lexicographically smallest palindrome. s2 = \\"abc\\" # Cannot be rearranged to form a palindrome. ``` # Constraints **1 <= |s| <= 10^(4)** **s consists of only lowercase English letters** # Note - A string is a palindrome if it reads the same backward as forward. - Lexicographically smallest means that among all possible valid permutations, the one that appears first in dictionary order. # Function Signature ```python def smallest_palindrome(s: str) -> str: pass ```","solution":"def smallest_palindrome(s: str) -> str: from collections import Counter count = Counter(s) # Count the number of characters that appear an odd number of times odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # If there is more than one character with an odd frequency, it is impossible to form a palindrome if odd_count > 1: return \\"\\" # Characters to form the first half and the middle of the palindrome if necessary first_half = [] middle = [] for char, freq in sorted(count.items()): first_half.append(char * (freq // 2)) if freq % 2 != 0: middle.append(char) # Join the pieces to form the smallest lexicographical palindrome first_half = \'\'.join(first_half) second_half = first_half[::-1] middle = \'\'.join(middle) return first_half + middle + second_half"},{"question":"Ashley is organizing a charity event where one of the events planned is a series of races. Each participant can participate in multiple races, but there is a constraint: each race needs to have all its participants start at the same time. Given a list of the participants and the races they will be competing in, determine the minimum number of distinct starting times needed so that all races can take place as planned without any participant having to be in two places at once. Input The first line contains two integers: p, r (1 ≤ p ≤ 500, 1 ≤ r ≤ 1000) — the number of participants and the number of races, respectively. The following r lines contain the participants for each race. Each line begins with an integer k (1 ≤ k ≤ p) indicating the number of participants in the race, followed by k distinct integers between 1 and p (inclusive) indicating the participants in that race. Output Output one integer: the minimum number of distinct starting times required so that no participant is scheduled to be in two races at the same time. Examples Input 3 4 2 1 2 2 3 1 1 3 3 1 2 3 Output 3 Input 4 3 2 1 3 2 2 4 3 1 2 4 Output 2","solution":"def min_starting_times(p, r, race_list): Determines the minimum number of distinct starting times. :param p: Number of participants :param r: Number of races :param race_list: List of races, each race being a list of participants :return: Minimum number of distinct starting times required from collections import defaultdict import itertools # Initialize the graph (adjacency list) graph = defaultdict(list) # Build the graph based on shared participants between races for i in range(r): participants = race_list[i] for j in range(i + 1, r): if set(participants) & set(race_list[j]): graph[i].append(j) graph[j].append(i) # Function to perform DFS and do coloring def is_bipartite(graph, start, color): stack = [start] color[start] = 0 # Start coloring with 0 while stack: node = stack.pop() for neighbor in graph[node]: if color[neighbor] == -1: # Color the neighbor with alternate color color[neighbor] = 1 - color[node] stack.append(neighbor) elif color[neighbor] == color[node]: return False return True # Array to track coloring of each node (race) color = [-1] * r # We check each component of the graph for bipartiteness for i in range(r): if color[i] == -1: if not is_bipartite(graph, i, color): return 3 # If it\'s not bipartite, we need at least of three distinct starting times # If graph is bipartite, we need at most 2 distinct starting times return 2"},{"question":"In a distant land, there are magical trees known as Luminarias. Each Luminaria has the unique ability to drop luminous fruits that glow and provide light to the surroundings. These trees form a straight line, and they fall fruits in a specific pattern. There are N (2 ≤ N ≤ 100000) Luminarias, each in a fixed position from 1 to N. The i-th Luminaria drops luminous fruits at a rate specified by an array R, where R[i] (1 ≤ R[i] ≤ 1000) represents the rate (in fruits per hour) at which fruits drop from the i-th Luminaria. To keep track of the fruits, a sorting machine is installed that collects fruits dropped by a contiguous segment of Luminarias. The machine, however, has a limit: it can only collect from K (1 ≤ K ≤ N) consecutive Luminarias at a time. You are tasked to compute the maximum number of luminous fruits that the sorting machine can collect in one hour from any segment of K consecutive Luminarias. Write a program to find this maximum. # Input * The first line contains the integers N and K, separated by a space. * The second line contains N integers, the array R, representing the rate of fruit drop per hour for each Luminaria. # Output Print a single integer, the maximum number of luminous fruits that can be collected in one hour from any segment of K consecutive Luminarias. # Example Input 6 3 10 20 30 40 50 60 Output 150 Input 8 4 5 5 5 5 5 5 5 5 Output 20 # Explanation In the first example, the segment of 3 consecutive Luminarias that drops the maximum fruits is (40, 50, 60), and the sum is 40 + 50 + 60 = 150. In the second example, for any segment of 4 consecutive Luminarias, the sum of fruits dropped is always 20 (as all Luminarias drop at the same rate). Hence, the output is 20. Note: The question sentences and the data used for the automatic referee are designed to evaluate the participants’ capability to handle array manipulation and sliding window technique during competitions.","solution":"def max_fruits_collected(N, K, R): This function returns the maximum number of luminous fruits that can be collected in one hour from any segment of K consecutive Luminarias. Args: N : int : number of Luminarias K : int : number of consecutive Luminarias R : list of int : list of rate of fruit drop per hour for each Luminaria Returns: int : maximum number of luminous fruits that can be collected in one hour # Calculate the sum of the first K elements current_sum = sum(R[:K]) max_sum = current_sum # Apply sliding window technique for i in range(K, N): current_sum += R[i] - R[i-K] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a fictional city with one-way streets, you\'re given a street network with intersections represented as nodes and streets as directed edges. The transportation department needs help to determine if there is a possibility to travel from one specific intersection to another, possibly through multiple streets. You are asked to write a program to determine reachability between pairs of intersections for given queries. ------- Input Format ------ - The first line will contain two integers: N (number of intersections) and M (number of streets). - The next M lines each contain two integers, u and v, representing a one-way street from intersection u to intersection v. - The following line contains Q, the number of queries. - The next Q lines each contain two integers, a and b, representing a query to check if intersection a can reach intersection b. ------- Output Format ------ For each query, print \\"YES\\" if there is a path from intersection a to intersection b; otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 10^3 1 ≤ M ≤ 10^3 1 ≤ Q ≤ 10^3 1 ≤ u, v, a, b ≤ N An intersection may connect to itself (u = v is possible). ------ Sample Input 1 ------ 4 4 1 2 2 3 3 4 4 2 3 1 4 4 1 2 4 ------ Sample Output 1 ------ YES NO YES ------ Explanation ------ Test case 1: Intersection 1 can reach intersection 4 by the path 1 -> 2 -> 3 -> 4. Test case 2: Intersection 4 cannot reach intersection 1 as it doesn\'t form any cycle. Test case 3: Intersection 2 can reach intersection 4 by the path 2 -> 3 -> 4.","solution":"from collections import defaultdict, deque def can_reach(n, edges, queries): def bfs(start, goal): visited = [False] * (n + 1) visited[start] = True queue = deque([start]) while queue: node = queue.popleft() if node == goal: return True for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return False # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Check each query results = [] for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string S. Your task is to extract the first email address from the string S. An email address is defined as a string that contains a user name, followed by the character \'@\', followed by a domain name, followed by the character \'.\', and ends with a domain extension (such as .com, .org, .net, etc.). Input Format A single line of input containing the string S. Constraints 0 < len(S) < 1000 S contains at least one email address. Output Format Print the first email address found in the string S. If no email address is found, print \\"No email found\\". Sample Input Hello, my email is example@test.com and I also use another_email123@domain.org for work. Sample Output example@test.com Explanation The first email address encountered in the string S is \'example@test.com\'.","solution":"import re def extract_first_email(S): Extract the first email address from the string S. Parameters: S (str): The input string. Returns: str: The first email address found in the string, or \\"No email found\\" if no email is present. email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' match = re.search(email_pattern, S) return match.group(0) if match else \\"No email found\\""},{"question":"> You are helping a team analyze and process a sequence of log entries from a large distributed system, such as microservices. Each log entry contains a `timestamp`, a `service_name`, and a `latency` (i.e., the time in milliseconds it took to complete a request). Write a program that will determine the total latency for each unique service and the service that experienced the highest single latency among all log entries. If there are multiple services with the same highest latency, return any one of them. To solve the problem, your program should: 1. Read the input containing sequences of log entries. 2. For each log entry, extract and process the `timestamp`, `service_name`, and `latency`. 3. Compute the total latency for each service. 4. Identify the service with the highest individual latency. 5. Output the total latencies of all distinct services. 6. Output the service name with the highest individual latency entry. The input is a sequence of lines. Each line represents a log entry with the format: `timestamp service_name latency`. The last line contains the word `end`, which marks the end of the input. # Input ``` 15:32:10 serviceA 120 15:32:15 serviceB 80 15:32:20 serviceA 150 15:32:30 serviceC 200 15:32:35 serviceB 50 15:32:40 serviceC 100 15:32:45 serviceA 250 end ``` # Output ``` serviceA: 520 serviceB: 130 serviceC: 300 Highest Latency: serviceA ``` **Note:** In the input example above, `serviceA`, `serviceB`, and `serviceC` each have multiple log entries. The total latency for each service is the sum of all latencies recorded for that service. `serviceA` has the highest individual latency of `250` ms. Hence, the output displays the calculated total latency for each service and the service (`serviceA`) which had the highest single latency entry.","solution":"def process_logs(log_entries): Processes log entries to compute total latencies and the highest single latency. Parameters: log_entries (list of str): List of log entries with format \\"timestamp service_name latency\\" Returns: dict: Total latencies for each service. str: The service name with the highest single latency. service_latencies = {} highest_latency = 0 service_with_highest_latency = None for entry in log_entries: if entry.strip().lower() == \'end\': break parts = entry.split() timestamp, service_name, latency = parts[0], parts[1], int(parts[2]) if service_name not in service_latencies: service_latencies[service_name] = 0 service_latencies[service_name] += latency if latency > highest_latency: highest_latency = latency service_with_highest_latency = service_name return service_latencies, service_with_highest_latency"},{"question":"The Berland Railways are trying to optimize their train schedules. There are n trains that need to travel through a single track during a day. Each train i arrives at the track entrance at time a_i and takes l_i minutes to travel through the track. If two trains are scheduled to arrive at the same time, they must pass through the track in the order given in the input. For each train i, determine the time it will finish using the track. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of trains. The following n lines each contain two integers a_i (1 le a_i le 10^9) and l_i (1 le l_i le 10^9) — the arrival time and the length of the trip through the track for each train. -----Output----- Print n integers, the i-th of which is the time when train i will finish using the track. -----Examples----- Input 3 1 5 2 2 2 3 Output 6 8 11 -----Note----- In the example, the first train arrives at time 1 and finishes at time 6. The second train arrives at time 2, but since it has to wait for the first train to finish, it will start its journey at time 6 and finish at time 8. The third train also arrives at time 2, but since it has to wait for the second train to finish, it will start its journey at time 8 and finish at time 11.","solution":"def train_schedules(n, arrivals_lengths): Given the number of trains and their respective arrival times and travel lengths, this function returns the finish time for each train. :param n: Number of trains (int) :param arrivals_lengths: List of tuples, each containing arrival time and travel length (list of tuples) :returns: List of finish times for each train (list of int) finish_times = [] current_time = 0 for arrival, length in arrivals_lengths: if current_time < arrival: current_time = arrival # Train can start as soon as it arrives current_time += length finish_times.append(current_time) return finish_times"},{"question":"Balo has a garden consisting of \'n\' trees arranged in a row (numbered from 1 to n). He wants to plant flowers around these trees. In order to make the garden look beautiful, he needs to follow these rules: - Each tree should either have no flowers or exactly one flower planted around it. - No two consecutive trees should have flowers. Your task is to help Balo determine the number of distinct ways to plant flowers around the trees following these rules. As the number of ways can be very large, you need to output it modulo 10^9 + 7. -----Input----- The input consists of a single integer n (0 ≤ n ≤ 10^18) which represents the number of trees in the garden. -----Output----- Output a single integer representing the number of distinct ways to plant flowers around the trees modulo 10^9 + 7. -----Examples----- Input 2 Output 3 Input 3 Output 5 Input 4 Output 8 -----Explanation----- In the first example, for n=2, the possible arrangements are: 1. No flowers on any tree. 2. Flower on tree 1. 3. Flower on tree 2. There are 3 ways in total. In the second example, for n=3, the possible arrangements are: 1. No flowers on any tree. 2. Flower on tree 1. 3. Flower on tree 2. 4. Flower on tree 3. 5. Flower on tree 1 and flower on tree 3. There are 5 ways in total. In the third example, for n=4, the possible arrangements expand further with the preceding logic, resulting in 8 ways.","solution":"MOD = 10**9 + 7 def number_of_ways(n): if n == 0: return 1 if n == 1: return 2 # To calculate fibonacci(n+2) % MOD in O(log n) time def matrix_mult(a, b): # Matrix multiplication return [ [(a[0][0] * b[0][0] + a[0][1] * b[1][0]) % MOD, (a[0][0] * b[0][1] + a[0][1] * b[1][1]) % MOD], [(a[1][0] * b[0][0] + a[1][1] * b[1][0]) % MOD, (a[1][0] * b[0][1] + a[1][1] * b[1][1]) % MOD] ] def matrix_pow(mat, exp): res = [[1, 0], [0, 1]] # Identity matrix while exp: if exp % 2 == 1: res = matrix_mult(res, mat) mat = matrix_mult(mat, mat) exp //= 2 return res fib_matrix = [[1, 1], [1, 0]] result_matrix = matrix_pow(fib_matrix, n + 1) return result_matrix[0][0] # Example usage: # print(number_of_ways(4)) # Output: 8"},{"question":"You are given an array of integers and an integer k. Your task is to find k pairs of integers from the array such that the sum of the integers in each pair is divisible by 3. Each integer in the array can be used at most once. If there are multiple solutions, print any of them. If no such pairs exist, print \\"NO\\". -----Input----- The first line contains two integers n and k (1 le n le 10^5, 1 le k le frac{n}{2}) - the number of integers in the array and the number of pairs to be found. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) - the integers in the array. -----Output----- If any solution exists, print \\"YES\\" in the first line. Each of the next k lines should contain a pair of integers from the array such that the sum of the integers in each pair is divisible by 3. If there are multiple solutions, print any of them. If there exists no solution, print \\"NO\\". -----Example----- Input 6 2 1 2 3 4 5 6 Output YES 1 2 3 6 Input 5 3 1 2 2 4 5 Output NO","solution":"def find_pairs(n, k, arr): # Initialize count arrays for remainders when divided by 3 count = [0] * 3 mod_map = {0: [], 1: [], 2: []} # Fill count arrays and mod_map for num in arr: remainder = num % 3 count[remainder] += 1 mod_map[remainder].append(num) pairs = [] # Pair elements directly from same remainder 0 list while len(mod_map[0]) >= 2 and len(pairs) < k: pairs.append((mod_map[0].pop(), mod_map[0].pop())) # Pair elements from remainder 1 and 2 lists while len(mod_map[1]) > 0 and len(mod_map[2]) > 0 and len(pairs) < k: pairs.append((mod_map[1].pop(), mod_map[2].pop())) # Check if we have found required number of pairs if len(pairs) == k: print(\\"YES\\") for p in pairs: print(p[0], p[1]) else: print(\\"NO\\") # Example usage: # find_pairs(6, 2, [1, 2, 3, 4, 5, 6])"},{"question":"Robin is organizing a robot competition and needs to keep track of the robots\' actions. Each robot starts with a score of 0. The competition consists of ( M ) rounds, and in each round, the ( i )-th robot performs one of the following actions: - \\"ADD X\\" (adds ( X ) to the robot\'s score). - \\"MUL X\\" (multiplies the robot\'s score by ( X )). - \\"SET X\\" (sets the robot\'s score to ( X ), ignoring the previous score). Your task is to determine the final score of each robot after all the actions have been performed. ------ Input Format ------ - First line contains an integer ( M ), the number of robot actions. - Next ( M ) lines each describe an action. Each action is in one of the formats \\"ADD X\\", \\"MUL X\\", \\"SET X\\", where X is an integer. ------ Output Format ------ Output a single integer, the final score of the robot after all ( M ) actions have been executed. ------ Constraints ------ 1 ≤ M ≤ 10^5 -10^9 ≤ X ≤ 10^9 ----- Sample Input 1 ----- 4 ADD 5 MUL 3 ADD 2 SET 7 ----- Sample Output 1 ----- 7 ----- Explanation 1 ----- The initial score of the robot is 0. - After the first action \\"ADD 5\\": the score becomes 0 + 5 = 5. - After the second action \\"MUL 3\\": the score becomes 5 * 3 = 15. - After the third action \\"ADD 2\\": the score becomes 15 + 2 = 17. - After the fourth action \\"SET 7\\": the score is set to 7. Therefore, the final score of the robot is 7.","solution":"def final_robot_score(m, actions): Determines the final score of the robot after all actions. Args: m (int): The number of actions. actions (list of str): List of m actions to be performed by the robot. Returns: int: The final score of the robot. score = 0 for action in actions: parts = action.split() command = parts[0] value = int(parts[1]) if command == \\"ADD\\": score += value elif command == \\"MUL\\": score *= value elif command == \\"SET\\": score = value return score"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef is teaching his students about properties of integers. Today he is teaching them about prime numbers. Prime numbers are those numbers which are divisible only by 1 and themselves (e.g. 2, 3, 5, 7, 11, etc.). Chef has given his students an array of n positive integers. He wants to know how many distinct prime numbers are present in the array. However, to make it more challenging, Chef allows his students to change any single element in the array to any other positive integer one time, and then check the number of distinct primes. If the number of distinct prime numbers can be maximized by changing one integer in the array, Chef wants to know the maximum count of distinct prime numbers that can be achieved. ------ Input ------ The first line of the input contains an integer T denoting the number of the test cases. For each test case: - The first line contains an integer n denoting number of elements in array a. - The next line contains n space-separated integers denoting elements of array a. ------ Output ------ For each test case, output a single integer corresponding to the maximum count of distinct prime numbers that can be achieved by changing one element of the array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 1 ≤ a_{i} ≤ 10^{6} ------ Sample Input 1 ------ 3 5 4 6 8 10 12 4 2 3 5 7 3 15 23 29 ------ Sample Output 1 ---- 1 4 4 ------ explanation 1 ------ Example case 1. The given array has no prime numbers. By changing one element to any prime number, we can have 1 distinct prime. E.g., changing 4 to 2 will make the array [2, 6, 8, 10, 12]. Example case 2. The given array already contains four distinct primes {2, 3, 5, 7}. The maximum count of distinct primes remains 4. Example case 3. The given array contains three prime numbers {23, 29}. By changing 15 to a prime number like 19, we can have the array [19, 23, 29] which gives us the maximum count of distinct primes as 4.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_distinct_primes_after_change(arr): distinct_primes = set(filter(is_prime, arr)) max_primes_count = len(distinct_primes) for num in arr: if is_prime(num): continue tmp_primes = distinct_primes.copy() tmp_primes.add(2) # Adding a prime number to test max_primes_count = max(max_primes_count, len(tmp_primes)) break # Only need to change one number return max_primes_count def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(max_distinct_primes_after_change(arr)) return results # Read input def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) arr = list(map(int, data[index+1:index+1+n])) test_cases.append((n, arr)) index += n + 1 results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are tasked with arranging the seating in a restaurant. The restaurant has rows of tables, with 4 seats per table, and you need to maximize the number of people that can be seated such that specific constraints are met. The restaurant owner wants to ensure there are no empty seats at any table, but has specified that if the number of people is not a multiple of 4 (e.g., 17 people), the owner will consider leaving an extra table partially filled to accommodate the remaining people. The partially filled table shouldn\'t contain fewer than 2 people, as it should not look too empty. Write a program that determines how to optimally seat the customers given these constraints. ------ Input Format ------ - The first line contains an integer T, denoting the number of test cases. - Each test case contains a single integer N, representing the number of people. ------ Output Format ------ For each test case, print a single line containing \\"YES\\" if it is possible to seat the people according to the constraints, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N ≤ 200 ------ Sample Input 1 ------ 3 15 16 17 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ - For the first test case, 15 people can be seated such that: 3 tables with full seating (4 people each) and 1 table with 3 people. - For the second test case, 16 people can be perfectly seated in 4 tables with no empty seats. - For the third test case, it\'s impossible to seat 17 people without leaving a table too empty (since the last table would only have 1 extra person which is less than 2).","solution":"def can_seat_all_customers(T, people): results = [] for N in people: if N % 4 == 0: results.append(\\"YES\\") elif 2 <= N % 4 <= 3: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage if __name__ == \\"__main__\\": T = 3 people = [15, 16, 17] results = can_seat_all_customers(T, people) for result in results: print(result)"},{"question":"Given a string S consisting of uppercase and lowercase alphabets. The task is to count the number of uppercase and lowercase characters in the string. Example: Input: S = \\"HelloWorld\\" Output: 2 8 Explanation: There are 2 uppercase characters (\'H\' and \'W\') and 8 lowercase characters (\'e\', \'l\', \'l\', \'o\', \'o\', \'r\', \'l\', \'d\'). Your Task: Your task is to complete the function countCase() which should print the number of uppercase and number of lowercase characters in a single line separated by space. Print a newline at the end of output. Constraints: 1 <= |S| <= 10^{6}","solution":"def countCase(S): This function takes a string S and prints the number of uppercase and lowercase characters in it. uppercase_count = sum(1 for c in S if c.isupper()) lowercase_count = sum(1 for c in S if c.islower()) print(f\\"{uppercase_count} {lowercase_count}\\")"},{"question":"A small village is arranging a lantern festival along a string of lanterns. The lanterns are initially unlit, and you are tasked with determining if it\'s possible to light up at least one lantern according to the following rules: 1. There are two types of lanterns: Type A and Type B. Type A lanterns can only be lit directly by the villagers, while Type B lanterns can only be lit by being next to a lit lantern of any type. 2. Once a lantern of type B is lit, it can propagate its light to its neighboring lanterns, which are to its immediate left and right, but only if those neighbors are also of type B. Type A lanterns cannot light up any adjacent lanterns. Given the initial configuration of the lanterns, determine if it\'s possible to light up at least one lantern and keep it lit following the rules above. -----Input----- The first and only line of input contains a non-empty string s consisting of uppercase English letters \'A\' and \'B\' only (lvert s rvert leq 100) — denoting Type A and Type B lanterns respectively. -----Output----- Output \\"Yes\\" if it\'s possible to light up at least one lantern, and \\"No\\" otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input BBAAB Output Yes Input BB Output No -----Note----- In the first example, the villagers can directly light the first Type A lantern, and this will propagate through the Type B lanterns adjacent to it. In the second example, there are no Type A lanterns that can be lit directly, so none of the lanterns can be lit.","solution":"def can_light_lanterns(s): Determine if it\'s possible to light up at least one lantern. Args: s (str): a string containing \'A\' and \'B\'. Returns: str: \\"Yes\\" if it\'s possible to light up at least one lantern, otherwise \\"No\\". return \\"Yes\\" if \'A\' in s else \\"No\\""},{"question":"You are given two strings, word1 and word2. Your task is to concatenate these strings in such a manner that the resulting string is the lexicographically smallest possible. To clarify, you can perform the following operations: 1. Append `word1` before `word2`. 2. Append `word2` before `word1`. Return the lexicographically smallest result possible after concatenation. # Examples Example 1: Input: word1 = \\"abc\\", word2 = \\"xyz\\" Output: \\"abcxyz\\" Explanation: \\"abcxyz\\" is lexicographically smaller than \\"xyzabc\\". Example 2: Input: word1 = \\"ace\\", word2 = \\"bdf\\" Output: \\"acebdf\\" Explanation: \\"acebdf\\" is lexicographically smaller than \\"bdface\\". Example 3: Input: word1 = \\"compare\\", word2 = \\"string\\" Output: \\"comparestring\\" Explanation: \\"comparestring\\" is lexicographically smaller than \\"stringcompare\\". # Constraints 1. Both `word1` and `word2` consist only of lowercase English letters. 2. 1 <= `word1.length`, `word2.length` <= 100 # Note Lexicographical order is the dictionary order, where \\"a\\" < \\"b\\" < ... < \\"z\\".","solution":"def smallest_lexicographic_concat(word1, word2): Returns the lexicographically smallest result possible after concatenating two words. return min(word1 + word2, word2 + word1)"},{"question":"Given an array of integers, you are allowed to perform at most one operation: increment or decrement one integer in the array by 1. Your task is to determine the minimum possible absolute difference between the maximum and minimum numbers in the array after performing at most one such operation. Input The first line of input contains an integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100000) – the number of integers in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000). Output For each test case, print a single integer: the minimum possible absolute difference between the maximum and minimum numbers in the array after performing at most one operation. Example Input 3 5 1 4 2 6 8 3 10 12 15 4 5 5 5 5 Output 6 4 0","solution":"def minimal_difference(t, test_cases): result = [] for i in range(t): n, arr = test_cases[i] arr.sort() initial_diff = arr[-1] - arr[0] if n == 1: result.append(0) continue possible_min = max(arr[-1]-1, arr[-2]) - arr[0] possible_max = arr[-1] - min(arr[0]+1, arr[1]) result.append(min(initial_diff, possible_min, possible_max)) return result # Example input t = 3 test_cases = [ (5, [1, 4, 2, 6, 8]), (3, [10, 12, 15]), (4, [5, 5, 5, 5]) ] print(minimal_difference(t, test_cases)) # Output: [6, 4, 0]"},{"question":"Given an integer n, your task is to create a binary string of length n such that the string does not contain any consecutive 1\'s. You need to determine the number of such valid binary strings of length n. A binary string is a string that consists only of the characters \'0\' and \'1\'. For example, binary strings of length 3 include \\"000\\", \\"001\\", \\"010\\", and \\"011\\", but \\"110\\" is not a valid binary string since it contains consecutive 1\'s. Input An integer n (1 ≤ n ≤ 50), the length of the binary string. Output Print a single integer, the number of valid binary strings of length n. Examples Input 3 Output 5 Input 4 Output 8 Explanation For the first example, the valid binary strings of length 3 are: \\"000\\", \\"001\\", \\"010\\", \\"100\\", \\"101\\". Hence, the output is 5. For the second example, the valid binary strings of length 4 are: \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", \\"1010\\". Hence, the output is 8.","solution":"def count_valid_binary_strings(n): Returns the number of valid binary strings of length n that do not contain consecutive \'1\'s. if n == 0: return 0 # dp[i][0] will store the count of valid strings of length i ending in \'0\' # dp[i][1] will store the count of valid strings of length i ending in \'1\' dp = [[0, 0] for _ in range(n+1)] # Base cases dp[1][0] = 1 dp[1][1] = 1 # Fill the dp array for i in range(2, n+1): dp[i][0] = dp[i-1][0] + dp[i-1][1] dp[i][1] = dp[i-1][0] # The answer is the sum of valid strings of length n ending in \'0\' and ending in \'1\' return dp[n][0] + dp[n][1]"},{"question":"In a 2D grid of size N times M with certain blocked cells, you need to find the shortest path from the top-left corner to the bottom-right corner while avoiding the blocked cells. You can only move horizontally or vertically, one step at a time. If there is no valid path, the output should be \\"IMPOSSIBLE\\". -----Input----- The first line contains two integers, N (1 le N le 100) and M (1 le M le 100), the dimensions of the grid. The next line contains an integer K (0 le K le N times M) representing the number of blocked cells. Each of the next K lines contains two integers r_i and c_i (0 le r_i < N, 0 le c_i < M) representing the row and column indices of a blocked cell. -----Output----- A single line containing the length of the shortest path from the top-left corner to the bottom-right corner, or \\"IMPOSSIBLE\\" if no such path exists. -----Examples----- Sample Input: 4 4 3 1 1 2 2 3 1 Sample Output: 6 Sample Input: 3 3 2 1 0 1 2 Sample Output: 4 Sample Input: 3 3 9 0 0 0 1 0 2 1 0 1 1 1 2 2 0 2 1 2 2 Sample Output: IMPOSSIBLE","solution":"from collections import deque def shortest_path_in_grid(N, M, K, blocked_cells): Finds the shortest path from the top-left corner to the bottom-right corner in a 2D grid while avoiding blocked cells. Returns the length of the shortest path or \\"IMPOSSIBLE\\" if no such path exists. # Convert blocked_cells list into a set for O(1) lookups blocked = set((r, c) for r, c in blocked_cells) # Directions for moving in the grid (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if starting or ending cell is blocked if (0, 0) in blocked or (N-1, M-1) in blocked: return \\"IMPOSSIBLE\\" # Use BFS to find the shortest path queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() # If we\'ve reached the bottom-right corner if r == N-1 and c == M-1: return dist # Try all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in blocked and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return \\"IMPOSSIBLE\\" # Example usage if __name__ == \\"__main__\\": N, M = 4, 4 K = 3 blocked_cells = [(1, 1), (2, 2), (3, 1)] print(shortest_path_in_grid(N, M, K, blocked_cells)) # Output should be 6"},{"question":"You are given two integers `n` and `m`. Consider an `n x m` grid where each cell has an initial value of `0`. You are also given a list of operations. Each operation consists of four integers `a`, `b`, `c`, `d`. The operation means that you need to increment each cell\'s value in the subgrid that has the top-left corner at (a, b) and the bottom-right corner at (c, d) by `1`. Determine the final state of the grid after performing all the operations. Constraints * 1 leq n, m leq 100 * 1 leq q leq 1000 (number of operations) * 1 leq a leq c leq n * 1 leq b leq d leq m Input Input is given from Standard Input in the following format: ``` n m q a1 b1 c1 d1 a2 b2 c2 d2 ... aq bq cq dq ``` Output Output the final n x m grid where each value represents the number of times the cell has been incremented. Examples Input ``` 3 3 2 1 1 2 2 2 2 3 3 ``` Output ``` 1 1 0 1 2 1 0 1 1 ``` Input ``` 2 2 1 1 1 2 2 ``` Output ``` 1 1 1 1 ```","solution":"def final_grid_state(n, m, operations): Given dimensions n and m of a grid and a list of operations, return the final state of the grid. Args: - n (int): number of rows in the grid - m (int): number of columns in the grid - operations (list of tuples): each tuple contains four integers a, b, c, d Returns: - list of list of int: the final state of the grid # Initialize a grid with zeros grid = [[0 for _ in range(m)] for _ in range(n)] # Apply each operation to the grid for (a, b, c, d) in operations: for i in range(a-1, c): for j in range(b-1, d): grid[i][j] += 1 return grid"},{"question":"Nik is playing a game where he needs to navigate a rectangular grid of size n by m, starting from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). However, he can only move if the cell he is moving into is not blocked. You are given the current state of the grid as a 2D array of size n by m where \'0\' represents a free cell and \'1\' represents a blocked cell. Nik can move right, down, left, or up (no diagonal moves). Determine if Nik can reach the bottom-right corner (n-1, m-1) from the top-left corner (0, 0). -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines each contains m characters \'0\' or \'1\', representing the grid. -----Output----- Print \\"Yes\\" if Nik can reach the bottom-right corner, and \\"No\\" otherwise. -----Examples----- Input 3 3 000 010 000 Output Yes Input 3 3 001 010 100 Output No Input 4 4 0000 0110 0000 0100 Output Yes -----Note----- In the first example, the possible path is (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2). In the second example, there is no possible path from (0, 0) to (2, 2). In the third example, the possible path is (0, 0) → (0, 1) → (0, 2) → (0, 3) → (1, 3) → (2, 3) → (2, 2) → (2, 1) → (2, 0) → (3, 0) → (3, 1) → (3, 2) → (3, 3).","solution":"def can_reach_end(grid, n, m): Determines if Nik can reach the bottom-right corner from the top-left corner in a given grid. Parameters: grid (list of list of str): The grid representation where \'0\' is a free cell and \'1\' is a blocked cell n (int): Number of rows in the grid m (int): Number of columns in the grid Returns: str: \\"Yes\\" if Nik can reach the bottom-right corner, \\"No\\" otherwise if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return \\"No\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, m - 1): return \\"Yes\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\" # Function to parse the grid from raw input def parse_input(n, m, raw_grid): return [list(raw_grid[i]) for i in range(n)]"},{"question":"A researcher is conducting an experiment that involves a square grid of dimensions m x m. Each cell in the grid can be independently occupied either by a human or remain empty. The researcher wants to determine the maximum number of humans that can be placed on the grid such that no two humans can see each other vertically, horizontally, or diagonally. Write a program to help the researcher maximize the number of humans on the grid while meeting the criteria. Input The input consists of a single integer m (1 ≤ m ≤ 100) — the dimension of the grid. Output Print a single integer — the maximum number of humans that can be placed on the grid while ensuring no two humans can see each other. Examples Input 3 Output 5 Input 4 Output 8 Input 1 Output 1 Note In the first sample, with a 3x3 grid, humans can be placed in the following pattern: H . H . H . H . H In the second sample, with a 4x4 grid, humans can be placed in the following pattern: H . H . . H . H H . H . . H . H","solution":"def max_humans_on_grid(m): Returns the maximum number of humans that can be placed on an m x m grid such that no two humans can see each other vertically, horizontally, or diagonally. return (m * m + 1) // 2"},{"question":"You have been hired to design a warehouse management system and are required to implement a feature to keep track of the restocking of items. In your first task, you will implement a function that determines how often an item needs to be restocked based on the average daily sales and the restock threshold. The restock threshold is defined as the minimum stock quantity below which an item needs to be restocked. The restocking period is defined as the number of days after which the item needs to be restocked to avoid running out of stock. Assume you receive a list of average daily sales and restock threshold values for multiple items. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of items. Each of the next n lines contains two integers a and t (1 ≤ a, t ≤ 10000), where a is the average daily sales of the item and t is the restock threshold for that item. -----Output----- For each item, print a single line with the integer representing the restocking period in days. -----Examples----- Input 3 10 100 5 50 20 200 Output 10 10 10 Input 2 1 15 6 60 Output 15 10","solution":"def calculate_restocking_period(n, items): For each item, calculates the restocking period in days based on average daily sales and restock threshold. :param n: int - Number of items. :param items: list of tuples - Each tuple contains two integers, average daily sales and restock threshold. :return: list of integers - Restocking periods in days for each item. result = [] for a, t in items: restocking_period = t // a result.append(restocking_period) return result"},{"question":"You are given a list of non-negative integers representing the amount of money of each house in a street. Every two houses are spaced equally apart forming a linear street. A thief wants to rob houses along this street but cannot rob two adjacent houses, as this will alert the police. Given the constraints, determine the maximum amount of money the thief can rob tonight without alerting the police. Write a function that takes a list of integers, each representing the money available in a house, and returns the maximum amount of money the thief can rob. Example 1: Input: money = [2, 7, 9, 3, 1] Output: 12 Explanation: The thief can rob house 1, house 3, and house 5, which corresponds to 2 + 9 + 1 = 12. Example 2: Input: money = [2, 1, 1, 2] Output: 4 Explanation: The thief should rob house 1 and house 4, which corresponds to 2 + 2 = 4. Example 3: Input: money = [5, 3, 4, 11, 2] Output: 16 Explanation: The thief can rob house 1, house 3, and house 4, which corresponds to 5 + 4 + 11 = 20 (optimal solution). Constraints: 1 <= money.length <= 100 0 <= money[i] <= 400","solution":"def rob(money): Returns the maximum amount of money the thief can rob without alerting the police. n = len(money) if n == 0: return 0 if n == 1: return money[0] dp = [0] * n dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"Jack loves playing with numbers and has recently discovered a new number game. In this game, you are given an array of integers, and your task is to find the smallest integer that is missing from the array. The array can contain both positive and negative integers, and the smallest missing integer is the smallest positive integer (>= 1) that is not present in the array. Can you help Jack find the smallest missing integer? -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^6) — the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the smallest missing positive integer. -----Examples----- Input 5 3 4 -1 1 Output 2 Input 3 1 2 0 Output 3 Input 7 7 8 9 11 12 -3 15 Output 1 -----Note----- In the first sample case, the integers present in the array are 3, 4, -1, and 1. The smallest positive integer missing is 2. In the second sample case, the array contains 1, 2, and 0. The smallest positive integer missing is 3. In the third sample case, the array contains 7, 8, 9, 11, 12, -3, and 15. The smallest positive integer missing is 1.","solution":"def find_smallest_missing_positive_integer(arr): Returns the smallest missing positive integer from the given array. # Create a set of all positive numbers in the array positive_set = set(x for x in arr if x > 0) # Start from 1 and increase to find the smallest missing positive integer smallest_missing = 1 while smallest_missing in positive_set: smallest_missing += 1 return smallest_missing"},{"question":"You are given a grid representing a garden, where each cell is either a patch of grass (represented by \'G\') or a rock (represented by \'R\'). You need to determine if you can navigate from the top-left corner of the grid to the bottom-right corner. You can only move up, down, left, or right, and you can only step on cells containing grass (\'G\'). Write a function `canNavigate` that takes in a list of strings representing the grid, and returns a boolean value indicating whether or not it is possible to navigate from the top-left to the bottom-right corner of the garden. ```python def canNavigate(grid: List[str]) -> bool: # Your code here ``` # Input - `grid` (list of strings): The garden grid with \'G\' representing grass and \'R\' representing rocks. All cells are either \'G\' or \'R\'. - The dimensions of the grid will be at least 1x1 and no larger than 100x100. # Output - Return `True` if it is possible to navigate from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1); otherwise, return `False`. # Example ```python canNavigate([\\"GGG\\", \\"GRG\\", \\"GGG\\"]) --> True canNavigate([\\"GGGR\\", \\"GRRG\\", \\"GGRG\\", \\"RRRG\\"]) --> False ``` # Notes - You cannot move diagonally. - You can assume that both the top-left and bottom-right corners are always \'G\'.","solution":"def canNavigate(grid): from collections import deque if not grid: return False n, m = len(grid), len(grid[0]) if grid[0][0] != \'G\' or grid[-1][-1] != \'G\': return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'G\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Jim has an array of integers `arr` of length `n`. He needs to find the longest contiguous subarray such that the sum of the elements in the subarray does not exceed a given integer `k`. Your task is to help Jim by writing a program that finds the length of the longest such subarray. -----Input----- The first line contains two integers `n` and `k` (1 leq n leq 300,000, 1 leq k leq 10^9). The second line contains n integers representing the array `arr` (1 leq arr[i] leq 10^4). -----Output----- Output one integer: the length of the longest contiguous subarray with the sum of elements not exceeding `k`. -----Examples----- Input 6 15 1 2 3 4 5 6 Output 5 Input 5 7 4 3 5 2 1 Output 2 -----Note----- In the first example, the longest subarray with a sum not exceeding 15 is [1, 2, 3, 4, 5], which has a length of 5. In the second example, the longest subarray with a sum not exceeding 7 can be [4, 3] or [5, 2], both of which have a length of 2.","solution":"def longest_subarray_with_sum_not_exceeding_k(arr, k): Returns the length of the longest contiguous subarray such that the sum of the elements in the subarray does not exceed k. n = len(arr) start = 0 current_sum = 0 max_length = 0 for end in range(n): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Create a function that calculates the running sum of a one-dimensional array of integers. Test arrays are limited to a size of 1-50. Running sum is defined as the cumulative total of the array elements as you iterate through the array. First Example: Input: [1, 2, 3, 4] Steps: 1 -> 1+2 -> 3 -> 3+3 -> 6 -> 6+4 -> 10 Output: [1, 3, 6, 10] Second Example: Input: [5, 10, 15] Steps: 5 -> 5+10 -> 15 -> 15+15 -> 30 Output: [5, 15, 30] Third Example: Input: [1, -1, 1, -1] Steps: 1 -> 1+(-1) -> 0 -> 0+1 -> 1 -> 1+(-1) -> 0 Output: [1, 0, 1, 0] ___ Input: an array of integers. Output: an array of integers representing the running sums.","solution":"def running_sum(nums): Returns the running sum of a one-dimensional array of integers. running_totals = [] current_sum = 0 for num in nums: current_sum += num running_totals.append(current_sum) return running_totals"},{"question":"You are given a list of distinct integers which represent the result of addition, subtraction, multiplication, or division (floor division) of two unknown integers x and y (0 ≤ x, y ≤ n) where n is the maximum value both x and y can take. Your task is to determine the maximum possible value of n that could have produced the observed results. -----Input----- The input consists of a single line containing several space-separated integers ( a_1, a_2, dots, a_m ) where ( 1 leq a_i leq 10^6 ). -----Output----- Print the maximum possible value of n that could have allowed the given set of results. -----Examples----- Input 1 2 3 4 5 Output 5 Input 10 1 2 3 10 Output 10 Input 0 1 8 15 Output 4 -----Note----- In the first example, the results could be obtained from integers ranging from 0 to 5: - 0 + 1 = 1 - 1 + 1 = 2 - 2 + 1 = 3 - 3 + 1 = 4 - 4 + 1 = 5 Thus, the largest possible n which satisfies all the observed results is 5. In the second example, all results can be achieved using integers between 0 and 10, including: - 10 / 1 = 10 - 1 + 1 = 2 - 10 - 8 = 2 So, the largest such n is 10. In the third example: - 0 + 0 = 0 - 1 + 0 = 1 - 2 * 4 = 8 - 3 * 5 = 15 All results are consistent with ( n = 4 ).","solution":"def max_n_from_results(results): Determines the maximum possible value of n that could have produced the observed results. The results are from the operations of addition, subtraction, multiplication or division (floor). Parameters: results (list): A list of integers. Returns: int: The maximum possible value of n. return max(results)"},{"question":"# Factory Management System A manufacturing company operates a factory that consists of multiple storage units. Each storage unit has a specific capacity, and various materials are stored in these units. Given the daily requirement for each type of material, the goal is to determine the minimum capacity of the largest storage unit required to store all the materials while meeting daily requirements. Input format: - The first line contains two integers N and M, representing the number of storage units and the number of types of materials, respectively. - The second line contains N integers representing the capacities of each storage unit. - The third line contains M integers representing the daily requirements for each type of material. Output format: - Output a single integer representing the minimum capacity of the largest storage unit required to meet the daily requirements. Constraints: - 1 ≤ N, M ≤ 1000 - 1 ≤ capacity of each storage unit ≤ 10^5 - 1 ≤ daily requirement for each type of material ≤ 10^5 Sample Input: ``` 5 3 20 30 10 50 40 15 35 25 ``` Sample Output: ``` 45 ``` Explanation: To meet the daily requirements of 15, 35, and 25 for the materials, the minimum capacity of the largest storage unit required is 45. This ensures that all requirements are met without exceeding the limits of any storage unit.","solution":"def min_largest_storage_capacity(storage_units, material_requirements): Determine the minimum capacity of the largest storage unit required to store all the materials while meeting daily requirements. :param storage_units: List[int] - The capacities of each storage unit. :param material_requirements: List[int] - The daily requirements for each type of material. :return: int - The minimum capacity of the largest storage unit required. total_requirements = sum(material_requirements) return total_requirements # Example: # Given storage_units=[20, 30, 10, 50, 40] and material_requirements=[15, 35, 25] # The minimum capacity of the largest storage unit should be 45 as shown in the example."},{"question":"___ # Prime Factorization A prime number is a number that is only divisible by 1 and itself. Prime factorization is expressing a number as a product of its prime factors. ___ # Task **_Given_** a positive integer, N, **_return_** the list of its prime factors in ascending order. ___ # Notes * Guaranteed constraint : **_2 ≤ N ≤ (10^6)_**. ___ # Input >> Output Examples: ___ ___ # Example 1: ``` N = 28 prime_factors(28) => [2, 2, 7] ``` ___ # Example 2: ``` N = 45 prime_factors(45) => [3, 3, 5] ``` ___ # Example 3: ``` N = 100 prime_factors(100) => [2, 2, 5, 5] ``` ___ Enjoy solving the problem!","solution":"def prime_factors(n): Return the prime factors of the given integer n in ascending order. factors = [] divisor = 2 while n >= 2: while n % divisor == 0: factors.append(divisor) n //= divisor divisor += 1 return factors"},{"question":"A shipping company has n containers that need to be transported using trucks. Each truck has a maximum capacity of k containers. The company wants to minimize the number of trips needed to transport all the containers using the available trucks. Write a program that calculates the minimum number of trips required to transport all n containers given the maximum capacity of each truck k. For example, if n=10 and k=3, the company needs at least 4 trips (three trips with 3 containers and one trip with 1 container). -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains two integers n (1 le n le 10^9) and k (1 le k le 10^9). -----Output----- For each test case, output a single integer: the minimum number of trips required to transport all the containers. -----Example----- Input 4 10 3 15 5 9 9 1000000000 1 Output 4 3 1 1000000000 -----Note----- In the first example, the company needs 4 trips to transport 10 containers with each truck carrying a maximum of 3 containers. In the second example, the company requires 3 trips to transport 15 containers with each truck carrying 5 containers. In the third example, one trip is sufficient as the truck can carry all 9 containers in one go. In the fourth example, each truck can only carry 1 container, so 1000000000 trips are needed.","solution":"def min_trips(t, cases): Calculate the minimum number of trips for each test case. Parameters: t: int - number of test cases cases: list of tuples - each tuple contains (n, k) for the test cases Returns: list of int - the result for each test case results = [] for n, k in cases: trips = (n + k - 1) // k # This is equivalent to math.ceil(n / k) results.append(trips) return results"},{"question":"Eva is arranging books on her bookshelf. She has a collection of `N` books, each book has a unique identifier `ID` which is a positive integer. Eva wants to display the books in such a way that every other book is in decreasing order when viewed from either end of the shelf. This way, when you look at the books from the leftmost end or the rightmost end, they appear in a zig-zag pattern: starting high, low, high, low, and so on. Given the identifiers of `N` books as an array, arrange them in the zigzag pattern. ------ Input Format ------ - The first line contains an integer `T` — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer `N` — the number of books. - The second line of each test case contains `N` space-separated integers — the identifiers of the books. ------ Output Format ------ For each test case, output a single line containing the book identifiers arranged in zigzag pattern. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ text{ID} ≤ 10^5 --- Sample Input --- 2 5 5 3 7 8 2 4 1 4 3 2 --- Sample Output --- 8 3 7 2 5 4 1 3 2 --- Explanation --- Test case 1: From one end, the sequence is 8 (high), 3 (low), 7 (high), 2 (low), 5 (high). Similarly, from the other end, it is viewed as 5 (high), 2 (low), 7 (high), 3 (low), 8 (high). Test case 2: The sequence 4 (high), 1 (low), 3 (high), 2 (low) is a zigzag pattern from both ends.","solution":"def zigzag(arr): Arrange the given list of book identifiers in a zigzag pattern arr.sort(reverse=True) result = [] for i in range(len(arr) // 2): result.append(arr[i]) result.append(arr[-(i+1)]) if len(arr) % 2 != 0: result.append(arr[len(arr) // 2]) return result def process_test_cases(test_cases): result = [] for n, books in test_cases: zigzag_books = zigzag(books) result.append(\\" \\".join(map(str, zigzag_books))) return result"},{"question":"Alice has an array of integers and wants to find the minimum length of a contiguous subarray of which the sum is greater than or equal to a given value x. If no such subarray exists, she should note that it\'s impossible. More formally, you are given an array nums[] of n positive integers (1 ≤ n ≤ 10000) and a positive integer x. Your task is to find and return the minimum length of a contiguous subarray of which the sum is greater than or equal to x. If no such subarray exists, return -1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10000) — the length of the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. The third line contains a positive integer x (1 ≤ x ≤ 10^9). -----Output----- Print a single integer — the minimum length of a contiguous subarray of which the sum is greater than or equal to x. If no such subarray exists, print -1. -----Examples----- Input 8 2 3 1 2 4 3 2 1 7 Output 2 -----Note----- In the first sample, the subarray [4, 3] is of minimum length 2 that adds up to 7 which is greater than or equal to x.","solution":"def min_length_subarray(nums, x): Finds the minimum length of a contiguous subarray of which the sum is greater than or equal to x. n = len(nums) min_len = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= x: min_len = min(min_len, right - left + 1) current_sum -= nums[left] left += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"Alice is organizing a marathon event in her city. She needs to track the total distance covered by every runner and identify the runner(s) with the maximum distance covered. However, if multiple runners cover the same maximum distance, she has to identify all such runners. INPUT The first line of input contains the number of runners, R. 1 ≤ R ≤ 10^3 The next R lines each contain the runner\'s name (a string of alphanumeric characters) and the distance they covered (a non-negative integer). 1 ≤ length of name ≤ 50 0 ≤ distance ≤ 10^6 OUTPUT Output the names of the runner(s) with the maximum distance covered. If multiple runners have the same maximum distance, print their names in the order they appeared in the input. SAMPLE INPUT 5 John 42000 Alice 38000 Bob 42000 Eve 38000 Charlie 35000 SAMPLE OUTPUT John Bob Explanation John and Bob both covered 42000 units of distance, which is the maximum distance covered among all runners. Therefore, their names are printed in the output.","solution":"def max_distance_runners(runs): Finds the runner(s) who covered the maximum distance. Parameters: runs (list): A list of tuples, where each tuple contains the name of the runner and the distance covered. Returns: list: A list of names of runners who covered the maximum distance in the order they appeared in the input. if not runs: return [] max_distance = max(runs, key=lambda x: x[1])[1] max_distance_runners = [name for name, distance in runs if distance == max_distance] return max_distance_runners"},{"question":"Chef likes to eat different varieties of burgers. Each burger has a unique level of spiciness, and Chef likes to eat burgers in a specific range of spiciness levels. You are given an array of integers A where A[i] denotes the spiciness level of the i-th burger. Chef will only consider burgers whose spiciness level is within a certain range [L, R]. Chef wants to know how many different spiciness levels lie within this range in the given array. ------ Input: ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains: - The first line contains three integers N, L, and R: the number of burgers, and the spiciness range [L, R] respectively. - The second line contains N integers, the spiciness levels of the burgers. ------ Output: ------ For each test case, output a single integer: the number of unique spiciness levels within the range [L, R]. ------ Constraints: ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 1000 1 ≤ L ≤ R ≤ 1000 ----- Sample Input 1 ------ 2 4 10 20 10 15 20 25 5 5 10 1 2 3 3 3 ----- Sample Output 1 ------ 3 0 ----- Explanation 1 ------ For the first test case, the unique spiciness levels 10, 15, and 20 lie within the range [10, 20]. For the second test case, none of the spiciness levels lie within the range [5, 10].","solution":"def spiciness_levels_within_range(test_cases): results = [] for N, L, R, A in test_cases: unique_spiciness_levels = set() for spiciness in A: if L <= spiciness <= R: unique_spiciness_levels.add(spiciness) results.append(len(unique_spiciness_levels)) return results"},{"question":"Chef is experimenting with sorting algorithms and has challenged you to solve the following problem. Given an array of integers, you need to find the number of distinct pairs `(i, j)` such that `1 ≤ i < j ≤ N` and the sum of `A[i]` and `A[j]` is an even number. # Input - The first line of the input contains an integer `T`, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer `N`, the size of the array. - The second line contains `N` space-separated integers `A[1], A[2], ..., A[N]`. # Output For each test case, print a single line containing the number of distinct pairs `(i, j)` where the sum of `A[i]` and `A[j]` is even. # Constraints - `1 ≤ T ≤ 10` - `1 ≤ N ≤ 10^5` - `1 ≤ A[i] ≤ 10^6` # Subtasks - Subtask #1 (10 points): `1 ≤ N ≤ 10^3` - Subtask #2 (90 points): Original constraints # Sample Input 1 ``` 1 5 1 2 3 4 5 ``` # Sample Output 1 ``` 4 ``` # Explanation 1 In the example case, the pairs (1, 3), (1, 5), (2, 4), and (4, 4) have even sums: - 1 + 3 = 4 - 1 + 5 = 6 - 2 + 4 = 6 Thus, the number of valid pairs is 4.","solution":"def count_even_sum_pairs(num_cases, cases): results = [] for case in cases: n, array = case odd_count = sum(1 for x in array if x % 2) even_count = n - odd_count # Pairs of even numbers even_pairs = even_count * (even_count - 1) // 2 # Pairs of odd numbers odd_pairs = odd_count * (odd_count - 1) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"Write a function `merge_sorted_lists` that takes in two sorted lists of integers and returns a single sorted list containing all the integers from both lists. The function `merge_sorted_lists` should not use any built-in sorting functions and should have a time complexity of O(n + m), where `n` and `m` are the lengths of the two input lists. Input/Output - The function should take two parameters: - `list1`: A sorted list of integers. - `list2`: A sorted list of integers. - The function should return a single sorted list containing all elements from `list1` and `list2`. Example ```python # Input list1 = [1, 3, 5] list2 = [2, 4, 6] # Output merge_sorted_lists(list1, list2) # [1, 2, 3, 4, 5, 6] # Input list1 = [0, 10, 20] list2 = [5, 15, 25] # Output merge_sorted_lists(list1, list2) # [0, 5, 10, 15, 20, 25] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1 (list): A sorted list of integers. list2 (list): A sorted list of integers. Returns: list: A single sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from either list into merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, add them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, add them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Alice loves trees, but she is particularly fond of balanced binary trees. A balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. Alice has found a large number of trees in her garden and she wants to find out if they are balanced. Help Alice by writing a program that will check whether a given binary tree is balanced or not. Input The input format will be as follows: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. - The next n lines each contain three integers p, l, and r, where p is the value of the current node, l is the value of the left child, and r is the value of the right child. If l or r is -1, it means the respective child does not exist. Output Output \\"YES\\" if the binary tree is balanced, and \\"NO\\" otherwise. Examples Input 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Output YES Input 3 3 9 20 9 -1 -1 20 15 7 15 -1 -1 7 -1 -1 Output YES Input 3 1 2 3 2 -1 -1 3 -1 -1 Output YES","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_list): if not node_list: return None node_dict = {val: TreeNode(val) for val, left, right in node_list} root = node_dict[node_list[0][0]] for val, left, right in node_list: if left != -1: node_dict[val].left = node_dict[left] if right != -1: node_dict[val].right = node_dict[right] return root def is_balanced(root): def check_height(node): if not node: return 0 left_height = check_height(node.left) if left_height == -1: return -1 right_height = check_height(node.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1 def is_tree_balanced(n, nodes): if n == 0: return \\"YES\\" tree_nodes = [(p, l, r) for p, l, r in nodes] root = build_tree(tree_nodes) return \\"YES\\" if is_balanced(root) else \\"NO\\""},{"question":"Image Color Inversion You are given an image represented as a 2D matrix where each element is a pixel value between `0` and `255`. Each pixel value indicates the intensity of the color, with `0` being black and `255` being white. To invert the colors of the image, you need to subtract each pixel value from `255`. Your task is to perform this inversion and output the resulting image. ------ Input ------ The first line of input contains two integers, `M` (number of rows) and `N` (number of columns), representing the dimensions of the image. The next `M` lines each contain `N` space-separated integers representing the pixel values of the image. ------ Output ------ Output `M` lines, each containing `N` space-separated integers representing the pixel values of the inverted image. ------ Constraints ------ 1 ≤ M, N ≤ 300 0 ≤ text{pixel value} ≤ 255 ------ Example Input ------ 4 3 0 50 100 150 200 250 255 125 75 30 60 90 ------ Example Output ------ 255 205 155 105 55 5 0 130 180 225 195 165 ------ Explanation ------ In the example input, each pixel value is subtracted from `255` to get the inverted value. - For the first pixel, the inverted value is 255 - 0 = 255. - For the second pixel, the inverted value is 255 - 50 = 205. - And so on for the rest of the image.","solution":"def invert_image(image): Inverts the colors of the given image represented as a 2D matrix. Parameters: image (list of list of int): 2D list representing the image. Returns: list of list of int: 2D list representing the inverted image. inverted_image = [] for row in image: inverted_image.append([255 - pixel for pixel in row]) return inverted_image"},{"question":"Fairyland has an ancient artifact known as the \\"Magic Square\\" which consists of an n by n grid filled with integers. The artifact is considered powerful if it satisfies the following properties: 1. All the integers in each row are unique. 2. All the integers in each column are unique. 3. The sum of the integers in each row is equal to the sum of the integers in each column. Given an n by n grid of integers representing the artifact, determine if it is powerful. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 50) — the size of the grid. Each of the next n lines contains n space-separated integers representing the rows of the grid. -----Output----- Output \\"Powerful\\" if the artifact is powerful, otherwise output \\"Not Powerful\\". You can output the answers in uppercase or lowercase. -----Examples----- Input: 3 4 9 2 3 5 7 8 1 6 Output: Powerful Input: 3 4 9 2 3 5 7 7 1 6 Output: Not Powerful -----Note----- In the first example, all properties are satisfied: 1. All integers in each row are unique. 2. All integers in each column are unique. 3. The sum of the integers in each row and column is 15. In the second example, the artifact does not satisfy the first and second properties because the integer 7 is repeated in the third row and the third column. Therefore, the output is \\"Not Powerful.\\"","solution":"def is_powerful_magic_square(n, grid): def all_unique(lst): return len(set(lst)) == len(lst) target_sum = sum(grid[0]) for i in range(n): # Check if all elements in the row are unique if not all_unique(grid[i]): return \\"Not Powerful\\" # Check if the row sums to the target if sum(grid[i]) != target_sum: return \\"Not Powerful\\" # Check if all elements in the column are unique column = [grid[row][i] for row in range(n)] if not all_unique(column): return \\"Not Powerful\\" # Check if the column sums to the target if sum(column) != target_sum: return \\"Not Powerful\\" return \\"Powerful\\""},{"question":"You are part of a team building a smart city grid. Your task is to consolidate usage data recorded by sensors placed throughout the city. Each sensor records the power usage for different devices in its respective zone. However, due to occasional recording errors, multiple devices may be incorrectly logged under different names. Your goal is to merge the records by their usage patterns. Each device can be uniquely identified by its usage signature. Given the sensor records, merge them to identify the total number of unique devices and their corresponding total usage. -----Input----- The first line contains an integer n (1 le n le 100000), the number of sensor readings. Each of the next n lines contains a device name, a floating-point number representing its power usage, and the zone of the city it was recorded in, separated by spaces. -----Output----- Print an integer representing the number of unique devices detected. For each unique device, print its name (merged from all possible names) and the total power usage across all zones, sorted by name. -----Examples----- Sample Input 1: 5 heater 1500.0 zone1 heater_1 1500.0 zone2 light 250.0 zone1 light_bulb 250.0 zone2 ac 2000.0 zone3 Sample Output 1: 3 ac 2000.0 heater 3000.0 light 500.0 Sample Input 2: 4 computer 300.0 zone1 pc 300.0 zone2 printer 100.5 zone1 spooler 100.5 zone2 Sample Output 2: 2 computer 600.0 printer 201.0","solution":"def merge_sensor_records(n, records): Merges sensor records based on usage patterns and returns the number of unique devices and their corresponding total usage sorted by device name. Parameters: n (int): the number of sensor readings records (list of tuples): Each tuple consists of (device_name, power_usage, zone) Returns: tuple: (unique_device_count, list of tuples with device name and total power usage) from collections import defaultdict, Counter usage_to_device = defaultdict(list) device_usage_map = {} for device_name, power_usage, zone in records: usage_to_device[power_usage].append(device_name) if device_name in device_usage_map: device_usage_map[device_name] += power_usage else: device_usage_map[device_name] = power_usage merged_devices = {} for power_usage, devices in usage_to_device.items(): canonical_name = min(devices) if canonical_name not in merged_devices: merged_devices[canonical_name] = sum(device_usage_map[device] for device in devices) sorted_devices = sorted(merged_devices.items()) return len(sorted_devices), sorted_devices"},{"question":"You are given a list of integers and an integer k. Your task is to determine if there exist two distinct elements in the list such that their sum is equal to k. Write a function that takes a list of integers and an integer k, and returns True if there are two distinct elements in the list whose sum is equal to k, and False otherwise. Input The first line contains an integer n (2 ≤ n ≤ 100 000), the number of elements in the list. The second line contains n integers a1, a2, ..., an (|ai| ≤ 109), the elements of the list. The third line contains a single integer k (|k| ≤ 2 x 109). Output Output True if there are two distinct elements in the list whose sum is equal to k. Otherwise, output False. Examples Input 5 4 7 1 -3 2 5 Output True Input 5 4 7 1 -3 2 10 Output False Note In the first sample, the numbers 4 and 1 add up to 5. In the second sample, no two distinct numbers add up to 10.","solution":"def has_pair_with_sum(nums, k): Returns True if there are two distinct elements in the list whose sum is equal to k. Returns False otherwise. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"You are given an array of N integers. You can perform the following operation as many times as you like: choose two elements of the array (let\'s call them A and B, where A ≠ B) and replace them with the integers |A - B| and A + B. Your task is to modify the array such that after performing the operations, all elements become equal to each other. Determine the minimum number of operations required to achieve this goal. Constraints * N is an integer between 2 and 5 (inclusive). * Each element in the array is a positive integer and does not exceed 1000. Input The input will be provided in the following format: N a_1 a_2 ... a_N Output Print the minimum number of operations required to make all elements equal. Examples Input 3 1 3 2 Output 2 Input 4 1 2 1 2 Output 3","solution":"def min_operations_to_equal_elements(arr): This function takes a list of integers and returns the minimum number of operations required to make all the elements in the list equal by replacing A and B with |A - B| and A + B. Parameters: arr (list): The list of integers Returns: int: Minimum number of operations required to make all elements equal def gcd(x, y): # Helper function to compute GCD while y: x, y = y, x % y return x # Compute the gcd of the array n = len(arr) array_gcd = arr[0] for i in range(1, n): array_gcd = gcd(array_gcd, arr[i]) # If gcd is 1, then we need exactly n-1 operations if array_gcd == 1: return n - 1 # If gcd > 1, then we can make all elements equal in exactly n-1 operations return n - 1"},{"question":"Write a function that takes an integer array as input and returns a new array containing only the elements from the original array that are prime numbers. If there are no prime numbers, the function should return an empty array. Note that 1 is not considered a prime number.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_prime_numbers(arr): Returns a list of prime numbers from the given array. return [num for num in arr if is_prime(num)]"},{"question":"# Task The Magic Kingdom needs to transport a group of knights to a distant land. To conserve energy on the long journey, they have decided to use a special teleportation system that works as follows: - Knights are represented by an array of positive integers where each integer represents the energy level of a knight. - In one teleportation transformation, you can combine any two knights with the same energy level into a single knight with an energy level equal to the sum of the two combined energy levels. - The goal is to determine the highest energy level possible for a single knight after performing any number of transformations. What is the highest energy level possible for a single knight? # Example For `knights = [3, 3, 6, 6, 12]`, the output should be 24. ``` [3, 3, 6, 6, 12] --> [6, 6, 6, 12] --> [12, 6, 12] --> [12, 12] --> [24] ``` # Input/Output - [input] integer array `knights` Array of positive integers representing the energy levels of knights. Constraints: `5 ≤ knights.length ≤ 50,` `1 ≤ knights[i] ≤ 100.` - `[output]` an integer","solution":"def highest_energy_level(knights): from collections import Counter counter = Counter(knights) max_energy = 0 while True: found_combination = False new_counter = Counter() for energy, count in counter.items(): if count > 1: pairs = count // 2 found_combination = True new_counter[2 * energy] += pairs remaining = count % 2 if remaining: new_counter[energy] += remaining else: new_counter[energy] += count if not found_combination: break counter = new_counter max_energy = max(counter.keys()) return max_energy"},{"question":"# Unique Array Combinations Problem Statement Given an array of integers, generate all unique combinations of a specified length where the combination is a subsequence that retains the relative order from the original array. You need to return all such possible unique combinations in any order. Constraints * 1 ≤ length of array ≤ 20 * -10^5 ≤ array elements ≤ 10^5 * 0 ≤ combination length ≤ length of array Input * An array of integers. * An integer specifying the length of combinations. Output * A list of lists where each list is a unique combination of the specified length. Examples Input [1, 2, 3, 4] 2 Output [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] Input [5, 3, 9, 5, 7] 3 Output [[5, 3, 9], [5, 3, 5], [5, 3, 7], [5, 9, 5], [5, 9, 7], [5, 5, 7], [3, 9, 5], [3, 9, 7], [3, 5, 7], [9, 5, 7]] Input [1, 2, 3] 0 Output [[]]","solution":"from itertools import combinations def unique_combinations(arr, comb_length): Generate all unique combinations of a specified length from the given array. Arguments: arr -- list of integers comb_length -- desired length of combinations Returns: list of lists with each sublist being a unique combination of the specified length if comb_length == 0: return [[]] return [list(comb) for comb in combinations(arr, comb_length)]"},{"question":"Nina is organizing a coding competition. She has prepared n problems, and she wants to allocate them into m difficulty levels such that each difficulty level has at least one problem and every problem is assigned to exactly one difficulty level. For each problem i (1 ≤ i ≤ n), Nina has evaluated its difficulty as `d_i`, a positive integer. The assignment should be done in such a way that the sum of difficulties in each difficulty level is as balanced as possible. Your task is to help Nina by writing a program that allocates the problems to m difficulty levels so that the maximum difference in the sum of difficulties between any two difficulty levels is minimized. You are required to find this minimum possible value. Input The first line of the input consists of two integers, n and m (1 ≤ m ≤ n ≤ 5000) — the number of problems and the number of difficulty levels. The second line contains n integers d_1,d_2,…,d_n (1 ≤ d_i ≤ 10^9) — the difficulty of each problem. Output Output a single integer — the minimal possible value of the maximum difference in the sum of difficulties between any two difficulty levels. Examples Input 7 3 4 3 2 3 4 1 2 Output 1 Input 5 2 7 1 4 1 6 Output 5 Note In the first example, an optimal allocation would be: - Difficulty level 1: {4, 3} - Difficulty level 2: {2, 3} - Difficulty level 3: {4, 1, 2} The sums of the difficulties for the three levels are 7, 5, and 7 respectively. The difference between the maximum and minimum sum is 7 - 5 = 2. In the second example, an optimal allocation would be: - Difficulty level 1: {7, 1} - Difficulty level 2: {4, 1, 6} The sums of the difficulties for the two levels are 8 and 11 respectively. The difference between the maximum and minimum sum is 11 - 8 = 3.","solution":"def allocate_problems(n, m, difficulties): def can_allocate_with_diff(max_diff): total = 0 levels = 1 for difficulty in difficulties: if total + difficulty > max_diff: levels += 1 total = 0 total += difficulty if levels > m: return False return True low, high = max(difficulties), sum(difficulties) while low < high: mid = (low + high) // 2 if can_allocate_with_diff(mid): high = mid else: low = mid + 1 return low"},{"question":"In an alternate dimension, interstellar travel involves navigating a ship through a grid-based galaxy. Each cell in the grid denotes a sector of space with specific coordinates (x, y). The spaceship starts at a given cell, and a sequence of commands directs the ship to move to neighboring sectors. The goal is to determine the final coordinates of the ship after executing all commands. The commands are: - \\"move up\\": Move one sector north (decrease y by 1). - \\"move down\\": Move one sector south (increase y by 1). - \\"move left\\": Move one sector west (decrease x by 1). - \\"move right\\": Move one sector east (increase x by 1). Initially, the spaceship is located at coordinates (0, 0). You are required to write a program that reads a series of command sequences and compute the final coordinates of the spaceship for each sequence. Input The input will consist of multiple command sequences. Each command sequence starts with an integer N (1 ≤ N ≤ 1024), representing the number of commands in that sequence. N lines follow, each containing one command (\\"move up\\", \\"move down\\", \\"move left\\", or \\"move right\\"). A line containing a zero indicates the end of the input. Output For each command sequence, output the final coordinates of the spaceship as a tuple (x, y), displayed on one line. Example Input 3 move up move up move left 4 move down move down move right move right 0 Output (-1, -2) (2, 2) Methodological Steps: - Read the number of command sequences and their respective commands. - Initialize the starting coordinates at (0, 0) for each sequence. - Apply each command to adjust the coordinates: - \\"move up\\" decrements y by 1. - \\"move down\\" increments y by 1. - \\"move left\\" decrements x by 1. - \\"move right\\" increments x by 1. - After processing all commands in a sequence, output the final coordinates.","solution":"def final_coordinates(command_sequences): Given multiple command sequences, calculate the final coordinates of the spaceship. Parameters: command_sequences: A list of command sequences. Each command sequence is a list of strings where the first element is the number of commands, followed by that many commands. Returns: A list of tuples where each tuple represents the final coordinates (x, y) for the corresponding command sequence. results = [] for commands in command_sequences: N = int(commands[0]) x, y = 0, 0 for i in range(1, N + 1): command = commands[i] if command == \\"move up\\": y -= 1 elif command == \\"move down\\": y += 1 elif command == \\"move left\\": x -= 1 elif command == \\"move right\\": x += 1 results.append((x, y)) return results"},{"question":"Given an array of integers and an integer k, the task is to find the pair of elements in the array whose sum is equal to k, and return the indices of these two elements. Assume that each input would have exactly one solution, and you may not use the same element twice. Example: Input: arr = [2, 7, 11, 15] k = 9 Output: [0, 1] Explanation: Because arr[0] + arr[1] == 9, we return [0, 1]. Your Task: Your task is to complete the given function findPairIndices(), which takes an array of integers and a target integer k as inputs and returns a list containing the indices of the two numbers such that they add up to k. Constraint: 1 <= len(arr) <= 10^{4} -10^{5} <= arr[i] <= 10^{5} -10^{5} <= k <= 10^{5} Expected Time Complexity: O(n) Expected Space Complexity: O(n)","solution":"def findPairIndices(arr, k): Finds the indices of the two numbers in arr that add up to k. Parameters: arr (list of int): List of integers. k (int): Target sum. Returns: list of int: Indices of the two numbers that add up to k. # Using a dictionary to store the value and its index num_dict = {} for index, num in enumerate(arr): # Check if the complement (k - num) exists in the dictionary complement = k - num if complement in num_dict: return [num_dict[complement], index] # Store the index of the current number num_dict[num] = index"},{"question":"# Problem Statement In a game of cards, there are four suits: Hearts, Diamonds, Clubs, and Spades. Each suit has cards numbered from 1 to 13. You are given a set of cards, each represented by an integer from 1 to 52, where: - 1 to 13 represent Hearts (1 is Ace, 11 is Jack, 12 is Queen, 13 is King) - 14 to 26 represent Diamonds (14 is Ace, 24 is Jack, 25 is Queen, 26 is King) - 27 to 39 represent Clubs (27 is Ace, 37 is Jack, 38 is Queen, 39 is King) - 40 to 52 represent Spades (40 is Ace, 50 is Jack, 51 is Queen, 52 is King) Your task is to determine the majority suit from the given set of cards. The majority suit is the suit that appears more frequently than any other. If there is a tie (i.e., two or more suits have the same highest frequency), return \\"Tie\\". # Function Signature ```python def majority_suit(cards: List[int]) -> str: pass ``` # Input - `cards`: A list of integers representing the set of cards (1 ≤ |cards| ≤ 52). # Output - Return a string indicating the majority suit among the given cards (\\"Hearts\\", \\"Diamonds\\", \\"Clubs\\", \\"Spades\\") or \\"Tie\\" if there is no single majority. # Example ```python assert majority_suit([1, 2, 14, 27, 40, 46, 52, 3, 28, 41, 12, 26, 27, 50, 27]) == \\"Clubs\\" assert majority_suit([1, 14, 30, 52]) == \\"Tie\\" ``` # Notes - Your solution should be efficient and handle the edge cases. - Ensure to validate the input is within the given constraints (1 to 52 integers). Try to solve this problem by first thinking about how you can map each card to its respective suit and count the frequency of each suit in the given list.","solution":"def majority_suit(cards): if not cards: return \\"Tie\\" suits_counts = {\\"Hearts\\": 0, \\"Diamonds\\": 0, \\"Clubs\\": 0, \\"Spades\\": 0} for card in cards: if 1 <= card <= 13: suits_counts[\\"Hearts\\"] += 1 elif 14 <= card <= 26: suits_counts[\\"Diamonds\\"] += 1 elif 27 <= card <= 39: suits_counts[\\"Clubs\\"] += 1 elif 40 <= card <= 52: suits_counts[\\"Spades\\"] += 1 max_count = max(suits_counts.values()) majority_suits = [suit for suit, count in suits_counts.items() if count == max_count] if len(majority_suits) > 1: return \\"Tie\\" else: return majority_suits[0]"},{"question":"Implement a function to find the longest substring of a given string that contains at most two distinct characters. *should work for both lowercase and uppercase letters. *The function should return the length of that substring. For example: ```python longest_substring(\\"eceba\\") => 3 # Explanation: \\"ece\\" is the longest substring with 2 distinct characters. longest_substring(\\"a\\") => 1 # Explanation: the longest substring is \\"a\\" with length 1. longest_substring(\\"ccaabbb\\") => 5 # Explanation: \\"aabbb\\" is the longest substring with 2 distinct characters. longest_substring(\\"abaccc\\") => 4 # Explanation: \\"bacc\\" is the longest substring with 2 distinct characters. ``` *The input will always be a non-empty string consisting of lowercase and/or uppercase letters.","solution":"def longest_substring(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n left = 0 right = 0 hashmap = {} max_len = 2 while right < n: hashmap[s[right]] = right if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Given an array of integers and a target sum, find the indices of the two numbers that add up to the target sum. Assume that there is exactly one solution and you cannot use the same element twice. Input The first line contains the number of test cases n. This is followed by n lines, each consisting of an integer t (target sum), an integer m (number of elements in the array), and m space-separated integers representing the array. Output Output the indices of the two numbers that add up to the target sum as a pair (i, j), where i and j are the indices in the array (0-based index). Example Input: 2 9 5 2 7 11 15 5 6 4 3 2 4 8 Output: (1, 3) (1, 2)","solution":"def two_sum(target, nums): Finds the indices of two numbers in an array that add up to the target sum. Args: target (int): The target sum. nums (list of int): The list of integers in which we need to find the indices. Returns: tuple: A tuple containing the indices of the two numbers that add up to the target sum. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i def find_indices(test_cases): Processes multiple test cases to find the indices of two numbers that add up to the target sum. Args: test_cases (list of tuples): Each tuple contains (target, num_elements, list of integers). Returns: list of tuples: Each tuple contains the indices of the two numbers that add up to the target sum. results = [] for case in test_cases: target, _, nums = case indices = two_sum(target, nums) results.append(indices) return results"},{"question":"Alex is a blockchain enthusiast and he loves organizing data structures. Recently, he\'s been working with a specific data structure called a \\"Merkle Tree\\". A Merkle Tree is a binary tree in which every leaf node is labelled with a data block and every non-leaf node is labelled with the cryptographic hash of the labels of its child nodes. This way, a Merkle Tree provides an efficient and secure way to verify the integrity of data blocks. Alex wants to create a balanced Merkle Tree. A balanced Merkle Tree must adhere to the following properties: 1. It is a complete binary tree. 2. Each leaf node contains one of the given data blocks. 3. Every non-leaf node contains the hash of its two children. Alex already has the cryptographic hash function `hash_func(data)`, which computes and returns the hash of the given data block. He wants to create a balanced Merkle Tree given a list of data blocks. If the number of data blocks is not a power of 2, he will append extra data blocks `ExtraNode` to fill it up to the next power of 2. Your task is to write a function that takes a list of data blocks as input and constructs a balanced Merkle Tree. The function should return the root hash of the constructed Merkle Tree. Function Signature: `def merkle_tree(data_blocks: List[str]) -> str:` Input: - `data_blocks`: A list of strings representing the data blocks (1 ≤ len(data_blocks) ≤ 1024). Output: - A string representing the root hash of the constructed balanced Merkle Tree. Example: Input: ``` [\\"data1\\", \\"data2\\", \\"data3\\"] ``` Output: ``` \\"hash_of_the_root_node\\" ``` Explanation: - Initially, the data blocks are [\\"data1\\", \\"data2\\", \\"data3\\"]. - Since the number of data blocks is 3, which is not a power of 2, append one `ExtraNode` to make it [\\"data1\\", \\"data2\\", \\"data3\\", \\"ExtraNode\\"]. - Compute the hashes of leaf nodes: `[hash_func(\\"data1\\"), hash_func(\\"data2\\"), hash_func(\\"data3\\"), hash_func(\\"ExtraNode\\")]`. - Compute the hashes of the next level: `[hash_func(hash_func(\\"data1\\")+hash_func(\\"data2\\")), hash_func(hash_func(\\"data3\\")+hash_func(\\"ExtraNode\\"))]`. - Finally, compute the root hash: `hash_func(hash_func(hash_func(\\"data1\\")+hash_func(\\"data2\\")) + hash_func(hash_func(\\"data3\\") + hash_func(\\"ExtraNode\\")))`. - Return the root hash.","solution":"import hashlib from typing import List def hash_func(data: str) -> str: return hashlib.sha256(data.encode(\'utf-8\')).hexdigest() def merkle_tree(data_blocks: List[str]) -> str: def compute_merkle_root(leaves): while len(leaves) > 1: if len(leaves) % 2 == 1: leaves.append(leaves[-1]) leaves = [hash_func(leaves[i] + leaves[i + 1]) for i in range(0, len(leaves), 2)] return leaves[0] # Adding extra nodes if the number of input blocks is not a power of 2 n = len(data_blocks) next_power_of_2 = 1 while next_power_of_2 < n: next_power_of_2 *= 2 while len(data_blocks) < next_power_of_2: data_blocks.append(\\"ExtraNode\\") # Compute the hash for all leaf nodes hashed_leaves = [hash_func(data) for data in data_blocks] # Compute the Merkle root root_hash = compute_merkle_root(hashed_leaves) return root_hash"},{"question":"# Task Samantha is organizing a party and she wants to have a beautiful arrangement of balloons. She has some `n` balloons with different colors, represented by positive integers. She needs to burst the balloons in a way that maximizes the total points. The rules of the game are: - Whenever you burst a balloon `i`, you get points equal to `balloons[i-1] * balloons[i] * balloons[i+1]`. - `balloons[i-1]` and `balloons[i+1]` are the balloons adjacent to `balloons[i]`. - After bursting a balloon `i`, the `i`-th balloon is removed from the list, and `balloons[i-1]` and `balloons[i+1]` become adjacent. - If you burst the first balloon (`i=0`), then `balloons[i-1]` will be considered as `1` for points calculation. - Similarly, if you burst the last balloon (`i=n-1`), then `balloons[i+1]` will be considered as `1` for points calculation. Your task is to help Samantha calculate the maximum possible points she can earn by bursting the balloons in the optimal arrangement. # Input - `balloons`: An integer array of length `n` where each element represents the color of the balloon. - `1 <= n <= 50` # Output An integer - the maximum number of points achievable by bursting all balloons. # Example For ``` balloons = [3, 1, 5, 8] ``` The output should be `167`. One of the possible solutions is: ``` 1. Burst balloon at index 1 (balloons[1]=1), points = 3*1*5 = 15 Remaining balloons: [3, 5, 8] 2. Burst balloon at index 1 (balloons[1]=5), points = 3*5*8 = 120 Remaining balloons: [3, 8] 3. Burst balloon at index 0 (balloons[0]=3), points = 1*3*8 = 24 Remaining balloons: [8] 4. Burst balloon at index 0 (balloons[0]=8), points = 1*8*1 = 8 Final points = 15 + 120 + 24 + 8 = 167 ```","solution":"def maxCoins(balloons): if not balloons: return 0 # Add 1 both ends for easier calculation balloons = [1] + balloons + [1] n = len(balloons) dp = [[0] * n for _ in range(n)] # length is the range we are calculating, it varies from 2 to n for length in range(2, n): for left in range(0, n - length): right = left + length # calculate maxCoins for balloons[left:right+1] for i in range(left + 1, right): dp[left][right] = max(dp[left][right], balloons[left] * balloons[i] * balloons[right] + dp[left][i] + dp[i][right]) return dp[0][n-1]"},{"question":"You are given an array of integers of size N. Each element in the array can have duplicates. Your task is to find the majority element in the array, which is the element that appears more than ⌊ N/2 ⌋ times. If no such element exists, return -1. -----Constraints----- - 1≤N≤10^5 - Each element of the array is an integer and can have both positive and negative values. -----Input----- The input is given from Standard Input in the following format: N arr_1 arr_2 ... arr_N -----Output----- Print the majority element of the array. If no majority element exists, print -1. -----Sample Input----- 7 3 3 4 2 4 4 2 4 -----Sample Output----- 4 In the given array, the element 4 appears 4 times which is more than ⌊7/2⌋ = 3, so the output is 4. -----Sample Input 2----- 5 1 1 2 2 3 -----Sample Output 2----- -1 In this array, no element appears more than ⌊5/2⌋ = 2 times, hence the output is -1.","solution":"def find_majority_element(n, arr): Finds the majority element in an array that appears more than ⌊n/2⌋ times. If no such element exists, returns -1. element_count = {} majority_threshold = n // 2 for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 if element_count[num] > majority_threshold: return num return -1"},{"question":"John is playing a game where he has to collect unique gems from a magical grid. Each cell in the grid contains a gemstone characterized by a unique integer identifier. The grid is represented as a 2D list of integers. John can start picking gems from any cell, and he can only move to an adjacent cell (up, down, left, or right) which contains a different integer identifier (gem). The goal of the game is to collect as many unique gems as possible starting from any cell in the grid. Write a program that determines the maximum number of unique gems John can collect from the grid. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 50) representing the number of rows and columns in the grid. - The next `m` lines contain `n` integers each, representing the grid. Each integer is between 1 and 1000 and represents a gem identifier in that cell. # Output - A single integer - the maximum number of unique gems John can collect starting from any cell in the grid. # Example # Input 3 3 1 2 3 4 5 6 7 8 9 # Output 9 # Note In the given example, John can start from any cell and collect all 9 unique gems since all moves are to adjacent cells with different numbers. Write a function `maxUniqueGems(m: int, n: int, grid: List[List[int]]) -> int` to solve the problem.","solution":"def maxUniqueGems(m, n, grid): def dfs(x, y, visited): nonlocal max_gems for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] not in visited: visited.add(grid[nx][ny]) dfs(nx, ny, visited) visited.remove(grid[nx][ny]) max_gems = max(max_gems, len(visited)) max_gems = 0 for i in range(m): for j in range(n): dfs(i, j, set([grid[i][j]])) return max_gems"},{"question":"In a faraway kingdom, there is a special form of currency known as \\"magic coins.\\" These coins can be combined in various ways to produce certain amounts of money. The kingdom\'s treasury has an infinite number of each type of coin, but only three denominations: 3 units, 7 units, and 11 units. A young mathematician, wishing to prove his worth, has been tasked with finding out whether a given amount can be exactly formed using these three denominations. You have been asked to write a program that will determine if a specified amount can be obtained using any combination of these magic coins. Input: The first line contains an integer t, the number of test cases. Each of the next t lines consists of a single integer, the desired amount of money. Output: For each test case, output \\"YES\\" if the exact amount can be formed using any combination of the three coin types. Otherwise, output \\"NO.\\" Constraints: 1 ≤ t ≤ 100 1 ≤ Amount ≤ 10^5 SAMPLE INPUT 4 10 14 1 30 SAMPLE OUTPUT YES YES NO YES Explanation: For test case 1: 10 can be formed as 3 + 7, so the output is \\"YES\\". For test case 2: 14 can be formed as 7 + 7 or 3 + 11, so the output is \\"YES\\". For test case 3: 1 cannot be formed using any combination of the given coin denominations, so the output is \\"NO\\". For test case 4: 30 can be formed as 3*10, or 7 + 7 + 7 + 3 + 3 + 3, so the output is \\"YES\\".","solution":"def can_form_amount_with_coins(amount): Returns \\"YES\\" if the amount can be formed using coins of 3, 7, and 11 units. Returns \\"NO\\" otherwise. for x in range(amount // 11 + 1): for y in range((amount - 11*x) // 7 + 1): remaining = amount - 11*x - 7*y if remaining >= 0 and remaining % 3 == 0: return \\"YES\\" return \\"NO\\" def solve(t, amounts): results = [] for amount in amounts: results.append(can_form_amount_with_coins(amount)) return results"},{"question":"Diagram Traversal You are given a rectangular grid with dimensions n x m, where each cell can contain either an open space (.) or an obstacle (#). Your goal is to determine the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) while avoiding obstacles. You can only move up, down, left, or right, and it is guaranteed that the top-left and bottom-right corners are open spaces. Input The input consists of multiple test cases. For each test case: - The first line contains two integers, n and m (2 leq n, m leq 100), the dimensions of the grid. - The next n lines each contain m characters either \'.\' or \'#\', representing the grid. Output For each test case, print an integer on a new line which is the length of the shortest path from (0, 0) to (n-1, m-1). If there is no valid path, print -1. Sample Input 3 3 . . # # . # # . . 3 3 . # . # . # # . . Sample Output 4 -1 Explanation For the first test case, the path from (0, 0) to (2, 2) could be (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) with a total length of 4. For the second test case, there is no possible path that avoids obstacles and reaches from (0, 0) to (2, 2). Hence, the output is -1.","solution":"from collections import deque def shortest_path(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"There are N cities in a country, connected by N-1 bidirectional roads in such a way that there is a unique path between any pair of cities. Each road has a positive integer length. You are given Q queries. In each query, you are provided with two cities u and v, and you need to determine the distance between them. Write a program to answer all the queries. # Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ length of each road ≤ 10^9 * 1 ≤ Q ≤ 10^5 * 1 ≤ u, v ≤ N # Input The input is given from Standard Input in the following format: ``` N a_1 b_1 l_1 a_2 b_2 l_2 ... a_{N-1} b_{N-1} l_{N-1} Q u_1 v_1 u_2 v_2 ... u_Q v_Q ``` Each of the next N-1 lines contains three integers a_i, b_i, and l_i, representing that there is a road with length l_i between city a_i and city b_i. Each of the next Q lines contains two integers u_j and v_j, representing a query where you need to compute the distance between city u_j and city v_j. # Output For each query, print a single integer representing the distance between the two cities. # Example Input ``` 5 1 2 5 2 3 3 2 4 6 4 5 2 3 1 3 4 5 2 5 ``` Output ``` 8 2 8 ``` # Note In the example, the distance between: * City 1 and City 3 is 5 (from 1 to 2) + 3 (from 2 to 3) = 8 * City 4 and City 5 is 2 * City 2 and City 5 is 6 (from 2 to 4) + 2 (from 4 to 5) = 8","solution":"def preprocess_and_solve_queries(N, roads, queries): from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) for a, b, l in roads: graph[a].append((b, l)) graph[b].append((a, l)) # Preprocess using BFS to find distances from any node (we choose node 1) distance = [-1] * (N + 1) def bfs(start): queue = deque([(start, 0)]) # (current_node, current_distance) distance[start] = 0 while queue: current, dist = queue.popleft() for neighbor, length in graph[current]: if distance[neighbor] == -1: # Not visited distance[neighbor] = dist + length queue.append((neighbor, distance[neighbor])) # Run BFS from node 1 bfs(1) # Function to find the distance between two nodes u and v def distance_between(u, v): return abs(distance[u] - distance[v]) # Answer each query results = [] for u, v in queries: results.append(distance_between(u, v)) return results"},{"question":"# Merge Intervals You are working on a calendar application, and you need to merge overlapping time intervals. You are given a list of intervals, where each interval is represented by a pair of integers `[start, end]`. The `start` integer indicates the start time of the interval, and the `end` integer indicates the end time of the interval, with `start <= end`. Intervals may overlap, and you need to merge all overlapping intervals into non-overlapping intervals that cover all the time ranges from the input. Write a function `merge_intervals(intervals)` that takes a list of intervals as input and returns a list of merged intervals in the same format. # Input The input consists of a single test case. The first line contains an integer `n` (1 leq n leq 10^4), the number of intervals. Each of the next `n` lines contains two integers `start` and `end` `(0 leq start leq end leq 10^4)`, representing an interval. # Output Output a list of merged intervals sorted by the start time. Each interval should be represented by its start and end time, separated by a space. # Example Input ``` 4 1 3 2 6 8 10 15 18 ``` Output ``` 1 6 8 10 15 18 ``` Input ``` 3 1 4 4 5 7 9 ``` Output ``` 1 5 7 9 ``` # Explanation In the first example, intervals `[1, 3]` and `[2, 6]` overlap and are merged into `[1, 6]`. The intervals `[8, 10]` and `[15, 18]` do not overlap with any other intervals, so they remain as they are. In the second example, intervals `[1, 4]` and `[4, 5]` overlap at the point `4` and are merged into `[1, 5]`. The interval `[7, 9]` does not overlap with any other interval and remains as it is.","solution":"def merge_intervals(intervals): if not intervals: return [] # Sort intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # if the list of merged intervals is empty or if the current interval does not overlap with the previous if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # there is an overlap, so we merge the current interval with the previous one merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Given the following problem statement, generate the required output as specified. **Problem Statement:** There exists a city with (N) junctions and (M) streets connecting these junctions. Each street is bidirectional and has a certain travel time. Let us represent this road network as a graph with junctions as nodes and streets as edges with weights. One day, the city decides to introduce upgrades to some streets that could decrease their travel time, but they can only afford to upgrade one street. Given the current road network and the possible upgrades, determine the minimum possible travel time from junction (A) to junction (B) if one of the streets is upgraded. **Input:** The input consists of several lines: 1. The first line contains three integers (N), (M), and (K) ( (1 leq N, M leq 10^5, 1 leq K leq 100) )- the number of junctions, the number of streets, and the number of potential upgrades. 2. The next (M) lines each contain three integers (u_i), (v_i), and (t_i) ( (1 leq u_i, v_i leq N, 1 leq t_i leq 10^4) ), representing a street between junctions (u_i) and (v_i) with a travel time of (t_i). 3. The next (K) lines each contain three integers (x_i), (y_i), and (r_i) ( (1 leq x_i, y_i leq N, 1 leq r_i leq t_{max}) ), denoting a potential upgrade where the street between junctions (x_i) and (y_i) can be reduced to a travel time of (r_i). 4. The last line contains two integers (A) and (B) ( (1 leq A, B leq N) ), representing the start and end junctions. **Output:** Output one integer: the minimum possible travel time from junction (A) to junction (B) if one of the streets is upgraded. If it is not possible to reach from (A) to (B), print (-1). **Example:** Input: ``` 5 5 1 1 2 10 2 3 10 3 4 10 4 5 10 1 5 50 1 5 5 1 5 ``` Output: ``` 5 ``` Explanation: - The original travel time from junction (1) to junction (5) is (50). - By upgrading the street between junction (1) and junction (5) which originally has a travel time of (50) to a travel time of (5), we drastically reduce the travel time to (5). - Therefore, the minimum possible travel time from (1) to (5) is (5).","solution":"import heapq def dijkstra(N, graph, start, end): Implementation of Dijkstra\'s algorithm to find the shortest path distance from start to end in the given graph. distances = [float(\'inf\')] * (N + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def upgraded_min_travel_time(N, M, K, streets, upgrades, A, B): Finds the minimum possible travel time from junction A to junction B if one of the streets is upgraded. graph = [[] for _ in range(N + 1)] for u, v, t in streets: graph[u].append((v, t)) graph[v].append((u, t)) original_time = dijkstra(N, graph, A, B) min_time = original_time for x, y, r in upgrades: for i, (v, t) in enumerate(graph[x]): if v == y: original_weight = graph[x][i][1] graph[x][i] = (v, r) break for i, (u, t) in enumerate(graph[y]): if u == x: original_weight = graph[y][i][1] graph[y][i] = (u, r) break upgraded_time = dijkstra(N, graph, A, B) min_time = min(min_time, upgraded_time) for i, (v, t) in enumerate(graph[x]): if v == y: graph[x][i] = (v, original_weight) break for i, (u, t) in enumerate(graph[y]): if u == x: graph[y][i] = (u, original_weight) break return min_time"},{"question":"Given a list of words, find the word with the maximum number of vowels (a, e, i, o, u). If two words have the same number of vowels, return the word which appears first in the list. Input Format: The input begins with number of test-cases t in a single line. Each of the next t lines contains a list of words separated by spaces. Output Format: For each test case, print the word with the maximum number of vowels from the list. If two words have the same number of vowels, print the word which appears first. Constraints: 1 <= t <= 100 1 <= length of each list <= 1000 Example: Input: 2 hello world this is a test programming is fun Output: hello programming Explanation: For the first test case, the word \\"hello\\" has the maximum number of vowels (2 e\'s and 1 o). For the second test case, the word \\"programming\\" has the maximum number of vowels (2 o\'s, 1 a, and 1 i).","solution":"def count_vowels(word): Helper function to count the number of vowels in a word. vowels = set(\\"aeiou\\") return sum(1 for letter in word if letter.lower() in vowels) def word_with_max_vowels(test_cases): For each list of words in test cases, return the word with the maximum number of vowels. If two words have the same number of vowels, return the word which appears first. Parameters: test_cases (list of list of str): List of test cases, each containing a list of words. Returns: List of str: Words with the maximum number of vowels for each test case. result = [] for words in test_cases: max_vowel_word = max(words, key=lambda word: (count_vowels(word), -words.index(word))) result.append(max_vowel_word) return result"},{"question":"You are given two sequences a and b, each consisting of n integers. You can apply the following operation to these sequences: choose one integer x and make all elements equal to x in sequence a equal to the corresponding elements in sequence b, or vice versa. Each operation affects one element at a time, so if there are k elements equal to x, you will need k operations. For example, if a = [1, 2, 3, 4] and b = [2, 2, 3, 5], you can convert 1 in a to 2 (one operation), ending up with a = [2, 2, 3, 4]. You have to determine the minimum number of operations required to make sequences a and b identical. -----Input----- The first line contains one integer n (1 le n le 3 cdot 10^5) — the number of elements in each sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100) — the elements of sequence a. The third line contains n integers b_1, b_2, dots, b_n (1 le b_i le 100) — the elements of sequence b. It is guaranteed that the sum of all n across multiple queries (if any) does not exceed 3 cdot 10^5. -----Output----- Print one integer — the minimum number of operations required to make sequences a and b identical. -----Example----- Input 6 1 2 3 4 5 6 6 5 4 3 2 1 4 1 2 3 4 1 2 3 4 5 1 1 2 2 3 1 1 3 3 3 Output 6 0 2 -----Note----- In the first example, you need to: 1. Change 1 in a to 6 in b (1 operation). 2. Change 2 in a to 5 in b (1 operation). 3. Change 3 in a to 4 in b (1 operation). 4. Change 4 in a to 3 in b (1 operation). 5. Change 5 in a to 2 in b (1 operation). 6. Change 6 in a to 1 in b (1 operation). In the second example, sequences a and b are already identical, so no operations are needed. In the third example, change two 2s in a to 3s from b (2 operations).","solution":"def min_operations_to_make_sequences_identical(n, a, b): Determine the minimum number of operations required to make sequences a and b identical. from collections import defaultdict # Dictionary to count mismatches mismatch_count = defaultdict(int) # Count mismatches for i in range(n): if a[i] != b[i]: mismatch_count[(a[i], b[i])] += 1 return sum(mismatch_count.values())"},{"question":"A robot is placed on a 2D grid at position (0, 0). The grid has n rows and m columns (1 ≤ n, m ≤ 1000). The robot can move to any of four directions: up, down, left, and right. However, some cells in the grid are considered dangerous and the robot cannot step on them. Determine the number of distinct paths the robot can take to reach the bottom-right corner (n-1, m-1) from the top-left corner (0, 0) without stepping on a dangerous cell. The number of distinct paths should be calculated modulo 1000000007 (10^9 + 7). Note: It is assured that the start (0, 0) and end (n-1, m-1) positions are not dangerous cells. -----Input----- The first line of input contains three integers n, m, and k, where n is the number of rows, m is the number of columns, and k is the number of dangerous cells (0 ≤ k ≤ 1000). The next k lines each contain two integers, representing the row and column indices (0-based) of a dangerous cell. -----Output----- Print the number of distinct paths from the top-left to the bottom-right of the grid modulo 1000000007 (10^9 + 7). -----Examples----- Input 3 3 1 1 1 Output 2 Input 4 4 2 1 1 2 2 Output 4 Input 2 2 0 Output 2","solution":"def number_of_paths(n, m, k, dangerous_cells): MOD = 1000000007 dp = [[0] * m for _ in range(n)] if (0, 0) in dangerous_cells: return 0 dp[0][0] = 1 for i in range(n): for j in range(m): if (i, j) in dangerous_cells: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1] # Reading the input def solve(): import sys input = sys.stdin.read data = input().split() n, m, k = int(data[0]), int(data[1]), int(data[2]) dangerous_cells = {(int(data[i*2+3]), int(data[i*2+4])) for i in range(k)} print(number_of_paths(n, m, k, dangerous_cells))"},{"question":"Given a binary string S of length N . You can choose an index i (0 leq i < N) and flip the character (change \'0\' to \'1\' or \'1\' to \'0\') up to K times. Determine the length of the longest contiguous subsequence of 1\'s that can be obtained by performing the operation. Output the length of that subsequence. Also, output a line feed at the end. Example Input 10 2 1101001100 Output 5 Explanation: By flipping the two \'0\'s at indices 3 and 4, we obtain the string \\"1111011100\\", which has the longest contiguous subsequence of 1\'s of length 5.","solution":"def longest_ones_after_flips(S, N, K): max_len = 0 left = 0 zeros_count = 0 for right in range(N): if S[right] == \'0\': zeros_count += 1 while zeros_count > K: if S[left] == \'0\': zeros_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a list of N integers, write a program to determine if there exists a pair of integers in the list whose sum is equal to a given target value T. If such a pair exists, return the indices of the two numbers. Otherwise, return -1. Input The input consists of multiple datasets. The first line consists of an integer M (M leq 50), the number of datasets. For each dataset, the first line contains two integers N (1 leq N leq 100), the number of integers in the list, and T (-10^5 leq T leq 10^5), the target sum. The next line contains N space-separated integers representing the list L (-10^5 leq L_i leq 10^5). Output For each dataset, print the indices of the two numbers (1-based index) if a pair exists whose sum equals T, or -1 if no such pair exists. If multiple pairs exist, return the pair with the smallest indices. Example Input 2 5 9 2 7 11 15 1 4 8 1 2 3 4 Output 1 2 -1","solution":"def find_pair_indices(nums, target): Returns the indices (1-based) of the two numbers in the list nums whose sum equals the target. If no such pair exists, returns -1. num_indices = {} for i, num in enumerate(nums): complement = target - num if complement in num_indices: return (num_indices[complement] + 1, i + 1) num_indices[num] = i return -1 def process_datasets(datasets): Processes multiple datasets to find pair of indices for each dataset. datasets: List of tuples, where each tuple contains (N, T, L) N -> number of integers in the list T -> target sum L -> list of integers results = [] for N, T, L in datasets: result = find_pair_indices(L, T) results.append(result) return results"},{"question":"You are given two strings `A` and `B` of length `N` consisting of lowercase English letters, where `N` is an even number. You can swap any two characters within the same string any number of times. Your goal is to determine if it is possible to make the two strings equal by performing swaps. Constraints * 1 ≤ N ≤ 1000 * N is an even number. Input - String `A` - String `B` Output - Return `True` if it is possible to make the strings equal by performing any number of swaps within the same string, and `False` otherwise. Example Input ``` A: \\"abac\\" B: \\"bcaa\\" ``` Output ``` True ```","solution":"def can_make_equal(A, B): Determine if it is possible to make strings A and B equal by performing swaps within the same string. Parameters: A (str): First string B (str): Second string Returns: bool: True if it is possible to make the strings equal, False otherwise if len(A) != len(B): return False # If the sorted versions of the strings are equal, it means they have the same characters in the same frequency return sorted(A) == sorted(B)"},{"question":"Check if Two Arrays Are Equal or Not You are given two arrays `a` and `b` both consisting of `n` integers. You need to determine if array `a` can be rearranged to be exactly the same as array `b`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in both arrays. - The second line contains `n` integers separated by a space representing the elements of array `a`. - The third line contains `n` integers separated by a space representing the elements of array `b`. # Output - Output \\"YES\\" (without quotes) if array `a` can be rearranged to be exactly the same as array `b`. Otherwise, output \\"NO\\". # Examples Input ``` 5 1 2 3 4 5 5 4 3 2 1 ``` Output ``` YES ``` Input ``` 4 1 2 3 4 1 2 2 4 ``` Output ``` NO ``` # Note In the first example, array `a` can be rearranged to match array `b` as both contain the same elements: 1, 2, 3, 4, and 5. In the second example, array `a` cannot be rearranged to match array `b` because they contain different elements. Array `a` contains a single \'3\', while array `b` contains a duplicate \'2\'.","solution":"def are_arrays_equal(n, a, b): Determines if array \'a\' can be rearranged to be exactly the same as array \'b\'. :param n: Number of elements in the arrays :param a: List of integers representing array \'a\' :param b: List of integers representing array \'b\' :return: \'YES\' if array \'a\' can be rearranged to match array \'b\', \'NO\' otherwise # Sorting both arrays to compare them directly if sorted(a) == sorted(b): return \\"YES\\" else: return \\"NO\\""},{"question":"Given two strings `s1` and `s2`, find the length of their longest palindromic subsequence. A subsequence is derived from another string by deleting some or no characters without changing the order of the remaining characters. A palindromic subsequence is a subsequence that reads the same forward and backward. Function Description Complete the `longestPalindromeSubseq` function in the editor below. `longestPalindromeSubseq` has the following parameter(s): - string `s1`: the input string Returns - int: the length of the longest palindromic subsequence Input Format A single line containing a string `s1`. Constraints 1 leq left|s1right| leq 1000 where left|s1right| means the length of `s1`. All characters are lower case in the range ascii[a-z]. Sample Input ``` bbabcbcab ``` Sample Output ``` 7 ``` Explanation The longest palindromic subsequence is `babcbab` with length 7. Sample Input 1 ``` abba ``` Sample Output 1 ``` 4 ``` Explanation 1 The entire string `abba` is a palindrome, thus the length is 4. Sample Input 2 ``` abcd ``` Sample Output 2 ``` 1 ``` Explanation 2 Each character of the string `abcd` is a palindrome of length 1. The longest is 1.","solution":"def longestPalindromeSubseq(s1): Returns the length of the longest palindromic subsequence in s1. n = len(s1) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s1[i] == s1[j]: dp[i][j] = 2 + dp[i + 1][j - 1] if i + 1 <= j - 1 else 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"You are given a permutation of the first n natural numbers. A permutation is considered beautiful if it does not contain any local maximum or local minimum elements. A local maximum is an element that is greater than both of its neighbors, and a local minimum is an element that is smaller than both of its neighbors. Your task is to determine if there exists a beautiful permutation for a given n. If such a permutation exists, output one such permutation. Otherwise, output \\"NO\\". -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 1000). -----Output----- For each test case, if a beautiful permutation exists, output the permutation. If no beautiful permutation exists, output \\"NO\\". -----Examples----- Input 3 1 2 3 Output 1 2 1 NO -----Note----- For n = 1, the permutation {1} is trivially beautiful as there are no neighbors. For n = 2, the permutation {2, 1} is beautiful as there is no local maximum or minimum. For n = 3, no beautiful permutation exists because any arrangement of {1, 2, 3} will have at least one element that is a local maximum or minimum.","solution":"def beautiful_permutation(n): if n == 1: return [1] elif n == 2: return [2, 1] elif n % 2 == 1: return \\"NO\\" else: perm = [] for i in range(1, n+1, 2): perm.append(i+1) perm.append(i) return perm def solve(t, cases): results = [] for n in cases: result = beautiful_permutation(n) results.append(result) return results"},{"question":"You are given an integer M. Determine if it is possible to construct a rectangle with an area of M using sticks of length L and width W (both are integers). Formally, find if there exist two integers L, W (L, W > 0) such that L * W = M. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing an integer M. ------ Output Format ------ For each test case, print on a new line YES if it is possible to construct a rectangle with an area of M using sticks of length L and width W and NO otherwise. You may print each character of the string in either uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M ≤ 10^{8} ----- Sample Input 1 ------ 4 1 6 9 12 ----- Sample Output 1 ------ YES YES YES YES ----- Explanation 1 ------ Test case 1: 1 = 1 * 1. Test case 2: 6 = 2 * 3. Test case 3: 9 = 3 * 3. Test case 4: 12 = 3 * 4.","solution":"def can_construct_rectangle(T, test_cases): results = [] for M in test_cases: found = False for i in range(1, int(M**0.5) + 1): if M % i == 0: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results def process_input_output(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T+1)] results = can_construct_rectangle(T, test_cases) for result in results: print(result)"},{"question":"Given an array of integers, find the smallest positive integer that is missing from the array. Your algorithm should have a linear runtime complexity and use constant extra space. Example 1: Input: [1, 2, 0] Output: 3 Explanation: The smallest positive integer missing from the array is 3. Example 2: Input: [3, 4, -1, 1] Output: 2 Explanation: The smallest positive integer missing from the array is 2. Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest positive integer missing from the array is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestMissingPositive() which takes the array as input and returns the smallest positive integer missing from the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= array.length <= 10^5 -10^6 <= array[i] <= 10^6","solution":"def smallestMissingPositive(nums): Finds the smallest positive integer that is missing from the array. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given a grid of size N times M filled with integers. Your task is to write a function that finds the Kth smallest element in this grid. The grid is 0-indexed and each row and column are sorted in non-decreasing order. # Function Signature ```python def kth_smallest(matrix: List[List[int]], k: int) -> int: pass ``` # Input - A 2D list `matrix` of size `N x M` (1 le N, M le 300) where `matrix[i][j]` is an integer (-10^9 le matrix[i][j] le 10^9). - An integer `k` (1 le k le N times M). # Output Return the Kth smallest element in the given matrix. # Example **Input:** ```python matrix = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 ``` **Output:** ```python 13 ``` # Notes - In the example provided, the sorted order of the elements in the matrix is [1, 5, 9, 10, 11, 12, 13, 13, 15], so the 8th smallest element is 13. - Ensure that your solution is efficient given the constraints for N and M.","solution":"from typing import List import heapq def kth_smallest(matrix: List[List[int]], k: int) -> int: Returns the k-th smallest element in a sorted 2D matrix. N = len(matrix) M = len(matrix[0]) # Use a min heap to keep track of the smallest elements # Start by adding the first element of each row to the heap min_heap = [(matrix[r][0], r, 0) for r in range(N)] heapq.heapify(min_heap) # Extract the smallest element from the heap \'k-1\' times for _ in range(k - 1): val, r, c = heapq.heappop(min_heap) if c + 1 < M: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) # The k-th smallest element will now be on top of the heap return heapq.heappop(min_heap)[0]"},{"question":"In a faraway land, there are n villages and m bidirectional paths connecting pairs of villages. Each path has a certain length. The villages\' chief wants to construct a road network so that any village can be reached from any other village, and the total length of the roads used is minimized. The villages\' chief decides to select a subset of the bidirectional paths in such a way that the total length of the selected paths is minimized while still maintaining connectivity between all villages. Help the chief determine the total length of the selected paths. -----Input----- The first line contains a positive integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case starts with two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ n·(n - 1) / 2). The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are the villages connected by the path, and w is the length of the path. It is guaranteed that there are no duplicate paths between any two villages. -----Output----- For each test case, print the total length of the selected paths in a single line. -----Example----- Input 2 4 5 1 2 3 1 3 2 1 4 4 2 3 5 3 4 4 5 7 1 2 1 1 3 4 1 4 3 2 3 2 2 5 6 3 4 5 4 5 7 Output 9 12","solution":"def find(parent, i): # Function to find the root of the subset including \'i\' using path compression if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): # Function to unite two subsets x and y using union by rank root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): # Function to implement Kruskal\'s algorithm to find MST of a graph mst_length = 0 parent = list(range(n)) rank = [0] * n # Sort edges based on their weight edges.sort(key=lambda x: x[2]) for u, v, w in edges: root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_length += w union(parent, rank, root_u, root_v) return mst_length def minimum_road_length(test_cases): results = [] for n, m, edges in test_cases: mst_result = kruskal_mst(n, edges) results.append(mst_result) return results"},{"question":"A traveling photographer wants to visit N different landmarks in the city and take pictures. She plans to start her journey from any chosen landmark and visit each one exactly once before returning to the starting point. Each landmark is connected to other landmarks by two-way roads, and the travel times between the landmarks are given in an adjacency matrix. The photographer wants to determine the minimum travel time required to visit all landmarks and return to the starting point. Write a function `minTravelTime(n, travelTimes)` that takes the number of landmarks `n` and the adjacency matrix `travelTimes` of size `n x n` where `travelTimes[i][j]` represents the travel time between landmark i and landmark j. Return the minimum travel time required for the photographer to visit all N landmarks exactly once and return to the starting point. If it is impossible to visit all landmarks, return `-1`. -----Constraints----- - 1≦n≦15 - 0≦travelTimes[i][j]≦1000 - travelTimes[i][i] = 0 for all 0 ≤ i < n -----Input----- The input is given as follows: n travelTimes[0][0] travelTimes[0][1] ... travelTimes[0][n-1] travelTimes[1][0] travelTimes[1][1] ... travelTimes[1][n-1] : travelTimes[n-1][0] travelTimes[n-1][1] ... travelTimes[n-1][n-1] -----Output----- Return the minimum travel time required to visit all landmarks exactly once and return to the starting point. If it is impossible to visit all landmarks, return `-1`. -----Example Input----- 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 -----Example Output----- 80 The minimum travel time required is calculated by choosing the optimal path: for instance, from landmark 1 -> 2 -> 4 -> 3 -> 1, resulting in the total travel time of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def minTravelTime(n, travelTimes): Returns the minimum travel time required to visit all landmarks. If it is impossible to visit all landmarks, returns -1. # Special case for single landmark if n == 1: return 0 # To store the minimum path min_path = float(\'inf\') # Generate permutations of all landmarks except the starting point (0) landmarks = range(1, n) permutations = itertools.permutations(landmarks) for perm in permutations: # Calculate the total travel time for the current permutation current_time = travelTimes[0][perm[0]] # From starting point to the first landmark in perm for i in range(len(perm) - 1): current_time += travelTimes[perm[i]][perm[i+1]] current_time += travelTimes[perm[-1]][0] # Returning to the starting point # Update the minimum travel time min_path = min(min_path, current_time) return min_path if min_path != float(\'inf\') else -1"},{"question":"# Idea Binary trees are fundamental data structures, frequently used because of their efficiency in various operations. One particular variant is the Binary Search Tree (BST). A BST has the property that for each node, its left subtree consists of nodes with values less than the node’s value, and its right subtree consists of nodes with values greater than the node’s value. To strengthen understanding of traversing a binary search tree, we introduce the task of finding the kth smallest value in a BST. ___ # Task You are given the root node of a Binary Search Tree (BST) and an integer k. Write a function that returns the kth smallest value in the BST. ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def kth_smallest(root, k): # your code here # Example usage: # Creating the following BST # 5 # / # 3 7 # / / # 2 4 6 8 root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(7) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.right.left = TreeNode(6) root.right.right = TreeNode(8) print(kth_smallest(root, 3)) # Output: 4 print(kth_smallest(root, 5)) # Output: 6 ``` ___ # Notes - The input root is the root node of a valid BST. - The tree will have at least one node. - The value of k will be a valid integer within the range of the number of nodes in the BST. - You can assume that the TreeNode class is already implemented for you as shown in the example.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def kth_smallest(root, k): Returns the kth smallest value in a BST. # In-Order Traversal (Iterative) stack = [] while True: # Go to the left most node while root: stack.append(root) root = root.left # Retrieve the node from the stack root = stack.pop() k -= 1 if k == 0: return root.value # Go to the right node root = root.right"},{"question":"A transportation company uses a cargo ship to deliver packages to various destinations. Each package has a unique weight and destination. The ship can only carry a certain maximum load before it must offload. However, with every destination drop-off, the ship can pick up additional packages from a specific drop-off location. The company wants to optimize the routes taken by the ship so that it can carry the maximum number of packages without exceeding its maximum load at any point in time. The destinations must be visited in the given order. Given: - An array `w` where `w[i]` represents the weight of the packages to be delivered at destination `i`. - An array `p` where `p[i]` represents the weight of the packages picked up at destination `i`. - A single integer `m`, representing the maximum load capacity of the ship. The goal is to determine the maximum number of packages the ship can carry, ensuring that the total weight during any leg of the journey does not exceed `m`. You are required to write a function that takes in three parameters – the arrays `w` and `p`, and the integer `m` – and returns the maximum number of packages the ship can carry given the constraints. Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), representing the number of destinations. - The second line contains `n` integers `w_1, w_2, ..., w_n` (0 ≤ w_i ≤ 1000), representing the weight of the packages to be delivered at each destination. - The third line contains `n` integers `p_1, p_2, ..., p_n` (0 ≤ p_i ≤ 1000), representing the weight of the packages picked up at each destination. - The fourth line contains a single integer `m` (1 ≤ m ≤ 10000), representing the maximum load capacity of the ship. Output - Output a single integer, the maximum number of packages that the ship can carry. Example Input ``` 3 10 20 30 15 25 35 50 ``` Output ``` 2 ``` Explanation In this example, the ship starts empty. The first leg, it must deliver 10 packages and can pick up 15, so the total weight becomes 15 once it leaves the first destination after delivering. The second leg, it must deliver 20 packages and can pick up 25, making the total weight exceed 50 if it picks all. Hence, it can only carry some packages within the constraints to avoid exceeding the maximum load capacity. The maximum number of packages would therefore be calculated considering such constraints.","solution":"def maximum_packages(n, w, p, m): Calculate the maximum number of packages the ship can carry given the constraints. :param n: Number of destinations (int) :param w: List of integers, weights of packages to be delivered at each destination :param p: List of integers, weights of packages to be picked up at each destination :param m: Maximum load capacity of the ship (int) :return: Maximum number of packages the ship can carry (int) current_load = 0 delivered_packages = 0 for i in range(n): # First, deliver the packages if current_load + w[i] <= m: current_load += w[i] delivered_packages += 1 else: break # Then, pick up the packages current_load -= w[i] # ship is empty after delivering if current_load + p[i] <= m: current_load += p[i] else: current_load = m return delivered_packages"},{"question":"Implement a function that takes as input a list of integers and an integer target, and returns all unique combinations in the list where the numbers sum to the target. Each number in the list may only be used once in the combination. The solution set must not contain duplicate combinations. Example 1: Input: nums = [2,3,6,7], target = 7 Output: [[7]] Explanation: 7 is the only combination that sums to 7. Example 2: Input: nums = [2,5,2,1,2], target = 5 Output: [[1,2,2],[5]] Explanation: There are two combinations that sum to 5: [1,2,2] and [5]. Example 3: Input: nums = [10,1,2,7,6,1,5], target = 8 Output: [[1,1,6],[1,2,5],[1,7],[2,6]] Explanation: There are four combinations that sum to 8: [1,1,6], [1,2,5], [1,7], and [2,6]. Your Task: You don\'t need to read input or print anything. Complete the function combinationSum2() which takes nums and target as input parameters and returns a list of lists containing all unique combinations that sum to the target. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(k * n) Constraints: * 1 <= len(nums) <= 20 * -10^9 <= nums[i] <= 10^9 * 0 <= target <= 10^9","solution":"def combinationSum2(nums, target): nums.sort() result = [] def backtrack(remaining, combination, start): if remaining == 0: result.append(list(combination)) return elif remaining < 0: return for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue combination.append(nums[i]) backtrack(remaining - nums[i], combination, i + 1) combination.pop() backtrack(target, [], 0) return result"},{"question":"-----Problem Statement----- Harris loves symmetrical patterns and geometric shapes. He is particularly fascinated by right-angled triangles. Harris likes to place dots at specific locations on a 2D plane to form shapes. He has a habit of marking N dots on a plane and then counting how many right-angled triangles can be formed with these dots such that the legs of the triangle are parallel to the X and Y axes. Given N points in a 2D Cartesian coordinate system, help Harris determine the total number of right-angled triangles that can be formed with these points such that each triangle\'s legs are parallel to the X and Y axes. -----Input----- - The first line contains the integer N. Then N lines follow. - Each line contains two space-separated integers x and y, representing the coordinates of a point. -----Output----- A single integer representing the number of right-angled triangles that can be formed. -----Constraints----- - 1 leq N leq 2 times 10^5 - 0 leq x, y leq 10^9 - Any input coordinate pair (x, y) is not repeated. -----Subtasks----- The total marks will be divided into: - 30% : 1 leq N leq 10^3 - 70% : Original Constraints -----Sample Input----- 4 1 2 2 2 1 3 2 3 -----Sample Output----- 4 -----EXPLANATION----- The 4 points mark a perfect right-angled triangle in four ways: 1. (1,2)-(2,2)-(1,3) 2. (1,2)-(2,2)-(2,3) 3. (1,3)-(2,3)-(1,2) 4. (1,3)-(2,3)-(2,2) Each of them forms a right-angled triangle with legs parallel to the X and Y axis. Thus, the answer is 4.","solution":"def count_right_angled_triangles(N, points): from collections import defaultdict x_count = defaultdict(int) y_count = defaultdict(int) for x, y in points: x_count[x] += 1 y_count[y] += 1 num_triangles = 0 for x, y in points: num_triangles += (x_count[x] - 1) * (y_count[y] - 1) return num_triangles # Test the function with an example input print(count_right_angled_triangles(4, [(1, 2), (2, 2), (1, 3), (2, 3)])) # Output should be 4"},{"question":"Given a list of integers, return a new list containing only the unique elements, but keep only the first occurrence of each element. Example 1: Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] Explanation: Although there are duplicates in the list, we only keep the first occurrence of each element. Example 2: Input: [4, 5, 4, 6, 7, 5, 8, 9] Output: [4, 5, 6, 7, 8, 9] Explanation: The first occurrence of each unique element is preserved and duplicates are removed. Example 3: Input: [10, 10, 10] Output: [10] Explanation: All elements are the same, so only one occurrence is preserved. Note: The order of elements in the output list should be the same as their first appearance in the input. The length of the list won\'t exceed 10,000. All the integers in the given input belong to the range: [-1e7, 1e7].","solution":"def unique_elements(lst): Given a list of integers, returns a new list containing only the unique elements, but keeps only the first occurrence of each element. seen = set() unique_lst = [] for num in lst: if num not in seen: seen.add(num) unique_lst.append(num) return unique_lst"},{"question":"You are given an array arr[] of size n and an integer x. Your task is to transform the array such that each element arr[i] is replaced by the smallest element from arr[i+1] to arr[i+x] (both inclusive). If there are fewer than x elements remaining in the list, consider only available elements. Example 1: Input: n = 5, x = 2, arr[] = {4, 7, 2, 8, 9} Output: 2 2 8 9 -1 Explanation: At index 0, the smallest element from arr[1] to arr[2] is 2 At index 1, the smallest element from arr[2] to arr[3] is 2 At index 2, the smallest element from arr[3] to arr[4] is 8 At index 3, only one element left which is 9 At index 4, no elements left, so -1 Example 2: Input: n = 4, x = 1, arr[] = {12, 3, 15, 7} Output: 3 3 7 -1 Explanation: At index 0, the smallest element from arr[1] to arr[1] is 3 At index 1, the smallest element from arr[2] to arr[2] is 15 At index 2, the smallest element from arr[3] to arr[3] is 7 At index 3, no elements left, so -1 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function min_in_subarray() that takes an array (arr), sizeOfArray (n), and an integer (x) and returns the transformed array. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ arr[i] ≤ 10^{7} 1 ≤ x ≤ N","solution":"def min_in_subarray(arr, n, x): Transforms the array such that each element arr[i] is replaced by the smallest element from arr[i+1] to arr[i+x] (both inclusive). If there are fewer than x elements remaining, consider only available elements. result = [] for i in range(n): if i + 1 >= n: result.append(-1) else: result.append(min(arr[i+1:min(i+x+1, n)])) return result"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). A number is called palindromic if it remains the same when its digits are reversed. Some examples of palindromic numbers are 121, 1331, 12321, and 9889. You will be given an integer N with at most 9 digits. Your task is to find the smallest palindromic number greater than N. -----Input:----- A single line with a single integer with at most 9 digits. -----Output:----- A single line containing the smallest palindromic number greater than the given number. If there is no such number with at most 9 digits, print 0. -----Constraints:----- - N consists of at most 9 digits -----Sample input----- 123 -----Sample output----- 131","solution":"def next_palindromic_number(n): Returns the smallest palindromic number greater than n. def is_palindrome(num): return str(num) == str(num)[::-1] if len(str(n)) > 8: # As 9 digit number + 1 can have at most 9 digits only. return 0 n += 1 while not is_palindrome(n): n += 1 if len(str(n)) > 9: return 0 return n"},{"question":"Write a function that takes in two inputs: `s` and `p` representing a text string and a pattern string, respectively. The function should return the starting index of the first occurrence of `p` in `s`. If `p` does not exist in `s`, return `-1`. Constraints: * The input strings `s` and `p` consist of lowercase English letters. * `1 leq |s| leq 10,000` * `1 leq |p| leq 1,000` Input: The input is provided in the following format: ``` s p ``` Output: Output the starting index of the first occurrence of `p` in `s`. If `p` is not found in `s`, output `-1`. Examples: Input: ``` hello ll ``` Output: ``` 2 ``` Input: ``` abcdef gh ``` Output: ``` -1 ```","solution":"def find_substring(s, p): Returns the starting index of the first occurrence of p in s. If p is not found in s, return -1. return s.find(p)"},{"question":"Task Write a function ```reverseWords``` that takes a string argument ```s```, splits it by spaces to extract the words and then returns a string that contains the words from the input string in reverse order. The task should appropriately handle multiple spaces, and leading or trailing spaces in the input string. Examples - reverseWords(\\"the sky is blue\\") should return \\"blue is sky the\\" - reverseWords(\\" hello world! \\") should return \\"world! hello\\" - reverseWords(\\"a good example\\") should return \\"example good a\\"","solution":"def reverseWords(s): This function takes a string s, splits it by spaces to extract the words, and returns a string that contains the words from the input string in reverse order. # Split the input string by spaces and filter out any empty strings resulting from consecutive spaces words = [word for word in s.split(\\" \\") if word] # Reverse the list of words and join them with a single space to form the reversed sentence return \\" \\".join(reversed(words))"},{"question":"In a magical forest, there are N mystical trees standing in a row, and each tree has a certain number of magical fruits. The trees are numbered from 1 to N, and the number of magical fruits on each tree is initially provided. A group of three elves regularly visit this forest to either collect magical fruits from a range of trees or to add more magical fruits to a specific tree. The three types of actions the elves can perform are as follows: 1. Collect all the magical fruits from trees between indices x and y (both inclusive). 2. Add v magical fruits to the tree at index x. 3. Query the number of magical fruits on the tree at index x. You are tasked with writing a program to keep track of these actions and output relevant information when required. INPUT The first line contains N, the total number of trees. The second line contains N integers, where the i-th integer represents the initial number of magical fruits on the i-th tree. The third line contains M, the number of actions performed by the elves. The next M lines contain the actions in one of the following forms: - \\"1 x y\\" which denotes Action 1 (Collects fruits from trees x to y and makes those trees have zero fruits). - \\"2 x v\\" which denotes Action 2. - \\"3 x\\" which denotes Action 3. OUTPUT For each Action 1, output \\"Collected\\" (without quotes). For each Action 3, output the number of fruits on the specified tree. CONSTRAINTS 1. 1 ≤ N ≤ 100,000 2. 1 ≤ M ≤ 100,000 3. 1 ≤ x ≤ y ≤ N (for Action 1) 4. 1 ≤ x ≤ N (for Action 2 and Action 3) 5. 0 ≤ v ≤ 1000 (for Action 2) SAMPLE INPUT 5 3 8 5 6 10 7 3 2 2 3 4 1 2 4 3 3 3 4 2 5 15 3 5 SAMPLE OUTPUT 8 Collected 0 0 25","solution":"def magical_forest(N, fruits, M, actions): results = [] for action in actions: components = action.split() command = int(components[0]) if command == 1: x, y = int(components[1]), int(components[2]) for i in range(x-1, y): fruits[i] = 0 results.append(\\"Collected\\") elif command == 2: x, v = int(components[1]), int(components[2]) fruits[x-1] += v elif command == 3: x = int(components[1]) results.append(fruits[x-1]) return results # Example usage N = 5 fruits = [3, 8, 5, 6, 10] M = 7 actions = [\\"3 2\\", \\"2 3 4\\", \\"1 2 4\\", \\"3 3\\", \\"3 4\\", \\"2 5 15\\", \\"3 5\\"] print(magical_forest(N, fruits, M, actions))"},{"question":"You are given an array of integers. You have to modify the array such that each element at index \'i\' of the new array is the product of all the numbers in the original array except the one at \'i\'. Return the modified array. Example 1: Input: N = 5 Array = [1, 2, 3, 4, 5] Output: [120, 60, 40, 30, 24] Explanation: For index 0, the product is 2*3*4*5 = 120. For index 1, the product is 1*3*4*5 = 60. For index 2, the product is 1*2*4*5 = 40. For index 3, the product is 1*2*3*5 = 30. For index 4, the product is 1*2*3*4 = 24. Example 2: Input: N = 3 Array = [3, 2, 1] Output: [2, 3, 6] Explanation: For index 0, the product is 2*1 = 2. For index 1, the product is 3*1 = 3. For index 2, the product is 3*2 = 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function productExceptSelf() which takes the array of integers and its size N as inputs and returns the modified array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 1 <= Elements of Array <= 10^9 Sum of N over all test cases does not exceed 10^6","solution":"def productExceptSelf(nums, N): Returns an array such that each element at index \'i\' of the new array is the product of all the numbers in the original array except the one at \'i\'. if N == 0: return [] result = [1] * N # Left product calculation left_product = 1 for i in range(N): result[i] = left_product left_product *= nums[i] # Right product calculation right_product = 1 for i in range(N - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Chris is planning an adventure to a mountainous region and wants to ensure he has enough provisions for his hike. The trail Chris plans to take can be seen as a series of mountains and valleys represented by an array of integers where each integer indicates the elevation at that point on the trail. Chris can choose any point to start and any point to end his hike, and he wishes to determine the steepest possible path he can take. The steepest path is defined as the path with the maximum difference between the highest and lowest elevations on the chosen segment of the trail. Help Chris by writing a function that determines the start and end points of the segment that provides the steepest path. If there are multiple options with the same steepness, return the segment with the smallest starting index. If there are still multiple options, return the one with the smallest ending index. -----Input----- Input consists of two lines. On the first line, the number n of points on the trail, with 1 leq n leq 100000. On the second line, n integers e_0, e_1, ldots, e_{n-1}, where -100000 leq e_i leq 100000, representing the elevations at these points. -----Output----- A single line with three integers. First is the maximum difference in elevation (steepness). Second is the starting index of the segment, and third is the ending index of the segment. -----Example----- Sample Input: 6 1 3 6 7 4 2 Sample Output: 6 0 3 Explanation: The segment from index 0 to 3 (elevations: 1, 3, 6, and 7) has a difference of 7 - 1 = 6, which is the steepest possible path.","solution":"def find_steepest_path(n, elevations): max_difference = 0 start_index = 0 end_index = 0 min_elevation = elevations[0] min_index = 0 for i in range(1, n): if elevations[i] > elevations[min_index]: difference = elevations[i] - min_elevation if difference > max_difference: max_difference = difference start_index = min_index end_index = i elif difference == max_difference: if min_index < start_index or (min_index == start_index and i < end_index): start_index = min_index end_index = i elif elevations[i] < min_elevation: min_elevation = elevations[i] min_index = i return max_difference, start_index, end_index"},{"question":"You are given an integer array A of length n. You need to answer q queries. Each query consists of two integers l and r and your task is to find the sum of the subarray A[l:r] (both inclusive). Write a program that handles multiple test cases efficiently. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains two integers n and q (1 leq n leq 10^5, 1 leq q leq 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. The following q lines each contain two integers l and r (1 leq l leq r leq n) representing the query endpoints. The sum of n over all test cases does not exceed 10^6. The sum of q over all test cases does not exceed 10^6. -----Output----- For each query, output the sum of the elements of the subarray A[l:r]. -----Examples----- Input 1 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15","solution":"def precalculate_prefix_sums(array): Precalculates prefix sums for the given array. Returns a list of prefix sums. prefix_sums = [0] * (len(array) + 1) # Initializing prefix sum array for i in range(1, len(array) + 1): prefix_sums[i] = prefix_sums[i-1] + array[i-1] return prefix_sums def query_sum(prefix_sums, l, r): Returns the sum of the subarray from index l to r using prefix sums. return prefix_sums[r] - prefix_sums[l-1] def process_queries(test_cases): results = [] for n, q, array, queries in test_cases: prefix_sums = precalculate_prefix_sums(array) for l, r in queries: results.append(query_sum(prefix_sums, l, r)) return results"},{"question":"You are given an integer array `nums` of size `n` where `n` is always even. In one move, you can select any two adjacent numbers in the array and subtract the smaller number from the larger number and replace them with this difference. Your task is to perform the minimum number of moves required to make all elements in the array equal. A move is defined as selecting indices (i) and (i+1) (where (0 le i leq n-2)) of the array and performing ( text{nums}[i] = |text{nums}[i] - text{nums}[i+1]| ) and ( text{nums}[i+1] = |text{nums}[i] - text{nums}[i+1]| ). If the given array is already made of equal elements then no moves are needed, and the function should return 0. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 10^5, n is even) — the number of elements in the array. The second line of each test case contains n integers representing the array elements (1 le text{nums}[i] le 10^9). The sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum number of moves required to make all elements in the array equal. -----Examples----- Input 3 4 1 2 3 4 2 7 7 6 3 3 3 3 5 5 Output 4 0 4 -----Note----- In the first example, the array can be made equal in 4 moves: - Choose indices (0, 1) -> [1, 1, 3, 4] - Choose indices (2, 3) -> [1, 1, 1, 1] - Final array [1, 1, 1, 1] In the second example, the array is already equal, so no move is needed. In the third example: - Choose indices (3, 4) -> [3, 3, 3, 3, 3, 5] - Choose indices (4, 5) -> [3, 3, 3, 3, 3, 3] - Final array [3, 3, 3, 3, 3, 3]","solution":"def min_moves_to_equal_array(t, test_cases): Given multiple test cases, each consisting of an integer array \'nums\' of size \'n\', return a list with the minimum number of moves required to make all elements in the array equal. results = [] for tc in test_cases: n = tc[0] nums = tc[1] if len(set(nums)) == 1: results.append(0) # All elements are already equal continue # Find the minimum and maximum in the array. When you subtract the minimum from maximum # repeatedly, eventually all differences will be zero. min_num = min(nums) max_num = max(nums) results.append(max_num - min_num) return results"},{"question":"Given a list of schedules, determine whether meetings overlap. You are provided with a list of meetings, where each meeting is represented by a list with two integers [start_time, end_time]. Your goal is to determine if any of these meetings overlap with each other. For the meetings to not overlap, the start time of a meeting must be greater than or equal to the end time of the previous meeting. Write a function that takes a list of meeting schedules and returns \'Overlap\' if any meetings overlap and \'No Overlap\' if there are no overlaps. For example: meetings1 = [[1, 3], [2, 5], [6, 8]] meetings2 = [[1, 2], [3, 4], [5, 6]] For the first list of meetings, the function should return \'Overlap\'. For the second list of meetings, the function should return \'No Overlap\'.","solution":"def check_meeting_overlap(meetings): Determines if any meetings overlap. Parameters: meetings (list of list of int): A list where each sublist contains two integers representing the start and end time of a meeting. Returns: str: \'Overlap\' if any meetings overlap, otherwise \'No Overlap\'. # Sort the meetings based on their start times meetings.sort(key=lambda x: x[0]) for i in range(len(meetings) - 1): # Check if the end time of the current meeting is greater than the start time of the next meeting if meetings[i][1] > meetings[i + 1][0]: return \\"Overlap\\" return \\"No Overlap\\""},{"question":"Given an array of N integers, you need to find out the maximum possible sum of its elements with the constraint that no two adjacent elements can be part of the sum. Write a function `max_non_adjacent_sum(arr: List[int]) -> int` that takes a list of integers as input and returns the maximum sum possible by selecting non-adjacent elements. Constraints: - 1 ≤ N ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 Input The first line of the input is an integer N representing the number of elements in the array. The second line contains N integers separated by spaces, representing the elements of the array. Output Print a single integer, the maximum sum possible by selecting non-adjacent elements. Examples Input 5 3 2 5 10 7 Output 15 Input 4 3 2 7 10 Output 13 Input 3 -1 -2 -3 Output 0","solution":"from typing import List def max_non_adjacent_sum(arr: List[int]) -> int: Returns the maximum sum of non-adjacent elements. if not arr: return 0 incl = 0 excl = 0 for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"A local zoo is planning to set up a new enclosure for a group of animals. Each animal has a particular type and each type requires a specific amount of space. The zoo wants to place the animals in a rectangular enclosure such that each type of animal is grouped together in one rectangular subsection within the larger enclosure. Given the height and width of each type of animal group that the zoo wishes to include, along with the total space available in the enclosure, determine if it’s possible to place all the groups of animals within the enclosure without any overlap. If it’s possible, output \\"YES\\". If not, output \\"NO\\". Input - The first line contains two space-separated integers H and W (1 ≤ H, W ≤ 1000) — the height and width of the rectangular enclosure. - The second line contains a single integer n (1 ≤ n ≤ 100) — the number of different types of animal groups. - Each of the next n lines contains two space-separated integers hi and wi (1 ≤ hi, wi ≤ 1000) — the height and width of the i-th animal group. Output Print \\"YES\\" if it is possible to place all animals in the enclosure without any overlap. Print \\"NO\\" if it is not possible. SAMPLE INPUT 10 12 3 2 3 4 6 4 6 SAMPLE OUTPUT YES","solution":"def can_place_animals(H, W, n, groups): total_area = sum(h * w for h, w in groups) enclosure_area = H * W if total_area <= enclosure_area: return \\"YES\\" else: return \\"NO\\""},{"question":"In a parallel universe, all the planets are inhabited by advanced robotic civilizations. Each planet\'s civilization communicates through a unique set of signals represented by integers. The planets have decided to establish a Universal Communication Network (UCN) by selecting a subset of these signals such that each chosen signal is unique across all planets. The task is to determine the maximum number of unique signals that can be selected from the given sets. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer n denoting the number of planets. - The next n lines, each containing an integer m followed by m space-separated integers, represent the signals from each planet. -----Output----- Print a single line corresponding to the answer of the problem for each test case. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100 - 1 ≤ m ≤ 50 - 1 ≤ signal value ≤ 1000 -----Example----- Input: 2 2 3 1 2 3 2 2 3 3 2 1 2 3 2 3 4 2 3 5 Output: 4 5 -----Explanation----- Example case 1. The unique signals are {1, 2, 3}. There is a total of 3 unique signals in the first test case. Example case 2. The unique signals are {1, 2, 3, 4, 5}. There is a total of 5 unique signals in the second test case.","solution":"def max_unique_signals(T, test_cases): result = [] for t in range(T): n = test_cases[t][0] signals = set() for i in range(1, n + 1): m, *planet_signals = test_cases[t][i] signals.update(planet_signals) result.append(len(signals)) return result"},{"question":"# Problem Description: Anna is an enthusiastic software engineer who loves solving mathematical puzzles. One day, she stumbled upon an interesting problem related to sets and sums. She decided to write a program to solve it, but she could use some help. Here is the problem statement: You are given a set of N distinct positive integers. Your task is to find the smallest positive integer that cannot be represented as the sum of any subset of the given set. # Input: The input consists of multiple test cases. Each test case is given in a line in the format below: ``` N a1 a2 ... aN ``` where `N` indicates the number of integers in the set, and `ai` indicates the value of each integer. You may assume `1 ≤ N ≤ 20` and `1 ≤ ai ≤ 1000`. The input terminates with a line containing a single zero. # Output: For each test case, print the smallest positive integer that cannot be represented as the sum of any subset of the given set. # Example: Input: ``` 5 1 2 3 10 20 3 5 7 1 0 ``` Output: ``` 7 2 ``` # Notes: - In the first test case, all integers from 1 to 6 can be represented as sums of subsets of the given set {1, 2, 3, 10, 20}. However, 7 cannot be represented as the sum of any subset of this set. - In the second test case, the integers that can be represented as sums of subsets of the given set {5, 7, 1} are the following: {1, 5, 6, 7, 8, 12, 13}. Thus, 2 is the smallest positive integer that cannot be represented.","solution":"def find_smallest_unrepresentable_sum(n, numbers): Finds the smallest positive integer that cannot be represented as the sum of any subset of the given set. Parameters: n (int): Number of integers in the set. numbers (list of int): The set of integers. Returns: int: The smallest positive integer that cannot be represented as the sum of any subset of the given set. numbers.sort() smallest_sum = 1 for num in numbers: if num > smallest_sum: break smallest_sum += num return smallest_sum def process_input(input_data): Processes the input data and returns the results for each test case. Parameters: input_data (str): The input data as a multiline string. Returns: list of int: The results for each test case. lines = input_data.strip().split(\\"n\\") results = [] for line in lines: if line == \\"0\\": break data = list(map(int, line.split())) n = data[0] numbers = data[1:] result = find_smallest_unrepresentable_sum(n, numbers) results.append(result) return results"},{"question":"Emma is a photographer, and she loves taking pictures of symmetrical objects. She defines a string s as symmetrical if it reads the same forward and backward (i.e., it\'s a palindrome). One day, she got curious and wondered what would be the longest symmetric subsequence she could find in a series of pictures with strings written on them. A subsequence is derived from another string by deleting some or no elements without changing the order of the remaining elements. Emma has provided you with a string s and asked you to determine the length of the longest symmetrical subsequence within s. -----Input----- The first line contains a single integer T (1 le T le 100) representing the number of test cases. The next 2 times T lines are in pairs: - The first line of each pair contains an integer n (1 le n le 1000) representing the length of the string. - The second line of each pair contains a string s of length n consisting of lowercase English letters. -----Output----- For each test case, print the length of the longest symmetrical subsequence in the given string. -----Examples----- Input 2 6 abcbab 3 aaa Output 5 3 -----Note----- For the first example, the longest symmetric subsequence is \\"abcba\\" which has a length of 5. For the second example, the entire string \\"aaa\\" is already symmetrical with a length of 3.","solution":"def longest_palindromic_subsequence_length(s): Returns the length of the longest palindromic subsequence in a string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(input_data): Processes the input data to find the longest palindromic subsequence for each test case. data = input_data.split() T = int(data[0]) index = 1 results = [] for _ in range(T): n = int(data[index]) s = data[index + 1] index += 2 results.append(longest_palindromic_subsequence_length(s)) return results"},{"question":"Given a list of N integers and a positive integer K, find the Kth smallest element in the list. Example 1: Input: N = 6, K = 3 arr = [7, 10, 4, 20, 15] Output: 7 Explanation: The sorted list is [4, 7, 10, 15, 20], and the 3rd smallest element is 7. Example 2: Input: N = 5, K = 2 arr = [1, 2, 3, 4, 5] Output: 2 Explanation: The sorted list is [1, 2, 3, 4, 5], and the 2nd smallest element is 2. Your Task: You don\'t need to read or print anything. Your task is to complete the function kthSmallest() which takes the list of integers arr[], its size N, and the integer K as input parameter and returns the Kth smallest element in the list. Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9 1 ≤ K ≤ N","solution":"def kthSmallest(N, K, arr): Returns the Kth smallest element in the list. Parameters: - N: int: the number of elements in the list - K: int: the position of the smallest element to find - arr: list[int]: the list of integers Returns: - int: the Kth smallest element arr.sort() return arr[K-1]"},{"question":"Tom the Chef wants to impress his guests with a special dish made from a sequence of ingredients. However, some guests are allergic to certain combinations of ingredients. Each ingredient can be represented as a positive integer. An allergic combination occurs when two adjacent ingredients are equal. To prevent allergies, Tom can replace any adjacent pair of equal ingredients with a new ingredient formed by taking their sum divided by 2 (integer division). This operation reduces the array\'s size by 1. For example, for the array `[3, 3, 2, 2]`, you can choose the first pair of equal adjacent elements to replace, resulting in `[3 + 3 // 2, 2, 2] = [3, 2, 2]`. This process may be repeated until no allergic combinations remain or there are no more elements left to combine. Your task is to help Tom determine the shortest possible length of the sequence after performing any number of these operations. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line of each test case contains an integer n (1 leq n leq 2 cdot 10^5) — the length of the sequence. - The second line contains n integers a_{1}, a_{2}, ldots, a_{n} (1 leq a_{i} leq 10^9) — the initial ingredients sequence. The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print one integer: the shortest possible length of the sequence after performing any number of operations. -----Example----- Input 2 4 3 3 2 2 5 1 1 1 1 1 Output 2 1 -----Note----- In the first test case, you can achieve a length of 2 by: Replace the first 3 elements: [3, 3, 2, 2] rightarrow [3, 2, 2] Replace the next 2 elements: [3, 2, 2] rightarrow [3, 2] In the second test case, you can replace adjacent pairs repeatedly, eventually reducing the array to length 1: Replace adjacent elements iteratively: [1, 1, 1, 1, 1] rightarrow [1, 1, 1, 1] rightarrow [1, 1, 1] rightarrow [1, 1] rightarrow [1]","solution":"def shortest_sequence_length(t, test_cases): Given the number of test cases and the test cases themselves, return the shortest possible length of the sequence after performing the allergic operation. Parameters: - t: Number of test cases - test_cases: List of tuples, where each tuple consists of (n, sequence) Returns: List of integers representing the shortest possible length of the sequence for each test case. results = [] for n, sequence in test_cases: # To minimize, we just need to count unique elements since we can reduce all repetitions unique_elements = len(set(sequence)) results.append(unique_elements) return results"},{"question":"The security system at the company has a 3-letter code with distinct uppercase English letters. A code containing any vowel (A, E, I, O, U) is considered easy to communicate, while a code without any vowel is considered hard to communicate. You are given the current security code S. Determine if the code is easy or hard to communicate. Print Easy if it contains any vowel; otherwise, print Hard. -----Constraints----- - S is a 3-character string consisting of uppercase English letters. - All letters in S are distinct. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If S is easy to communicate, print Easy; otherwise, print Hard. -----Sample Input----- BCD -----Sample Output----- Hard There are no vowels in \\"BCD\\", so it is hard to communicate. -----Sample Input----- AXY -----Sample Output----- Easy The code \\"AXY\\" contains a vowel \'A\', so it is easy to communicate.","solution":"def communication_difficulty(S): Determines if the given 3-letter code is easy or hard to communicate. Easy if it contains any vowel (A, E, I, O, U), otherwise Hard. Parameters: S (str): The 3-letter uppercase string. Returns: str: \\"Easy\\" if the code contains any vowel, \\"Hard\\" otherwise. vowels = {\'A\', \'E\', \'I\', \'O\', \'U\'} for char in S: if char in vowels: return \\"Easy\\" return \\"Hard\\""},{"question":"Write a function that takes a non-negative integer n and converts it to its equivalent Roman numeral string. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` For example, given n = 58, the output should be \\"LVIII\\", because 50 + 5 + 3 = 58 (L = 50, V = 5, III = 3). The maximum number that can be presented is 3999. Your function should return a string containing the correct Roman numeral representation. # Examples ``` convertToRoman(3) -> \\"III\\" convertToRoman(4) -> \\"IV\\" convertToRoman(9) -> \\"IX\\" convertToRoman(58) -> \\"LVIII\\" convertToRoman(1994) -> \\"MCMXCIV\\" ```","solution":"def convertToRoman(n): Converts a non-negative integer to its Roman numeral representation. :param n: a non-negative integer :return: Roman numeral as a string if n < 1 or n > 3999: return \\"\\" value_to_roman = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] result = \\"\\" for value, numeral in value_to_roman: while n >= value: result += numeral n -= value return result"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese as well. Chef often gets packets of various sizes when he eats snacks. Chef wants to arrange these packets on a single shelf, so they do not overlap while maximizing the utilization of the shelf\'s width. Chef has a shelf of width W and a set of packets with widths P_1, P_2, dots, P_N and heights H_1, H_2, dots, H_N. Chef can arrange packets either standing up or lying down, but once a packet is placed, it cannot be rotated. Chef wants to minimize the height of the tallest packet stack while using up as much width of the shelf as possible. Given the widths and heights of the packets, calculate the minimum possible height of the tallest stack if Chef arranges the packets optimally. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and W. The second line contains 2N space-separated integers where the first N integers are the widths of the packets P_1, P_2, dots, P_N, and the next N integers are the heights of the packets H_1, H_2, dots, H_N. ------ Output ------ For each test case, print a single line containing one integer — the minimum possible height of the tallest packet stack if Chef arranges the packets optimally. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ W ≤ 10^6 1 ≤ P_i, H_i ≤ 10^6 for each valid i ----- Sample Input 1 ------ 2 3 10 2 3 5 1 4 9 2 5 4 3 2 1 ----- Sample Output 1 ------ 5 3 ----- Explanation 1 ------ Example case 1: Chef can arrange the packets in a single row without placing any on top of another. The widths are 2, 3, and 5, which adds up to the 10, the width of the shelf, and the tallest packet in this arrangement has a height of 5. Example case 2: Chef has two packets with widths 4 and 3, but only one needs to be placed on the shelf width of 5. Placing packet 1 (width 4, height 2) and packet 2 (width 3, height 1) also on the shelf width 5 results into a stack height 3. Thus, the minimum height of the tallest packet stack is 3.","solution":"def min_tallest_stack_height(N, W, widths, heights): # Zip widths and heights together packets = list(zip(widths, heights)) # Sort packets by width in descending order packets.sort(reverse=True, key=lambda x: x[0]) # Initial variables for cumulative width and maximum height cumulative_width = 0 max_height = 0 for width, height in packets: if cumulative_width + width <= W: cumulative_width += width max_height = max(max_height, height) else: break return max_height def solve(test_cases): results = [] for N, W, widths, heights in test_cases: result = min_tallest_stack_height(N, W, widths, heights) results.append(result) return results"},{"question":"You are given a series of operations to perform on a stack of plates. The stack initially contains no plates and can hold a maximum of N plates. You need to process Q queries. There are three types of queries: 1. \\"PUSH x\\" which pushes the plate with value x (1 ≤ x ≤ 10^9) onto the stack. 2. \\"POP\\" which removes the topmost plate from the stack. 3. \\"MAX\\" which prints the maximum value present in the stack. If the stack is full, the \\"PUSH\\" operation should be ignored. If the stack is empty and a \\"POP\\" or \\"MAX\\" operation is issued, print \\"EMPTY\\" for that operation. Implement the function to process these queries and output the necessary results. -----Input----- The first line contains two integers N (1 ≤ N ≤ 10^5) and Q (1 ≤ Q ≤ 10^5) which represent the maximum number of plates and the number of queries, respectively. Each of the next Q lines contains one of the three types of queries. -----Output----- For each \\"MAX\\" query, output the maximum value in the stack, or \\"EMPTY\\" if the stack is empty. For each \\"POP\\" query, output \\"EMPTY\\" if the stack is empty. -----Examples----- Input 10 7 PUSH 5 PUSH 3 MAX POP MAX POP MAX Output 5 5 EMPTY Input 5 8 PUSH 7 PUSH 9 PUSH 3 PUSH 10 MAX POP MAX POP Output 10 9","solution":"def process_queries(N, Q, queries): stack = [] max_stack = [] results = [] for query in queries: if query.startswith(\\"PUSH\\"): _, x = query.split() x = int(x) if len(stack) < N: stack.append(x) if not max_stack or x >= max_stack[-1]: max_stack.append(x) elif query == \\"POP\\": if stack: popped = stack.pop() if popped == max_stack[-1]: max_stack.pop() else: results.append(\\"EMPTY\\") elif query == \\"MAX\\": if max_stack: results.append(max_stack[-1]) else: results.append(\\"EMPTY\\") return results"},{"question":"Overview Implement a function that takes an input string and returns the number of distinct palindromic substrings within the string. A palindrome is a string that reads the same forwards as backwards. ```python count_distinct_palindromes(\\"abac\\") => 5 count_distinct_palindromes(\\"aaa\\") => 3 ``` Specifics - The input string will only contain lowercase English letters. - For the purposes of this problem, a palindromic substring counts only if it is distinct, meaning each substring is unique in the counting. - The function should return the count of those distinct palindromic substrings. In example 1: - The palindromic substrings are: \\"a\\", \\"aba\\", \\"b\\", \\"a\\", \\"c\\". - The distinct ones are: \\"a\\", \\"aba\\", \\"b\\", \\"c\\". Therefore, the count is 4. In example 2: - The palindromic substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". - The distinct ones are: \\"a\\", \\"aa\\", \\"aaa\\". Therefore, the count is 3.","solution":"def count_distinct_palindromes(s): Returns the count of distinct palindromic substrings in the input string s. def is_palindrome(subs): return subs == subs[::-1] palindromes = set() n = len(s) for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromes.add(substring) return len(palindromes)"},{"question":"Given a string `s` which represents a sequence of lowercase English letters, you need to perform the following operation exactly once: You can choose two indices, `i` and `j` (1 ≤ i < j ≤ n, where `n` is the length of the string), and swap the characters at these indices. After performing this swap operation, you need to count the number of distinct substrings that can be formed from the new string. Your task is to determine the maximum number of distinct substrings possible after at most one swap. Input The first line contains integer `n` (1 ≤ n ≤ 100) — the length of the string `s`. The second line contains a string `s` of length `n` consisting of lowercase English letters. Output Print a single integer — the maximum number of distinct substrings possible after at most one swap. Examples Input 5 abcde Output 15 Input 3 aaa Output 3 Note In the first example, you can swap any two different characters, but since all characters are unique, swapping does not change the number of distinct substrings. Therefore, the number of distinct substrings of the string \\"abcde\\" is 15. In the second example, all characters are the same, swapping any characters doesn’t change the string, so the number of distinct substrings of the string \\"aaa\\" is 3.","solution":"def count_distinct_substrings(s): substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return len(substrings) def max_distinct_substrings_after_swap(n, s): # Calculate distinct substrings in original string original_count = count_distinct_substrings(s) max_count = original_count for i in range(n): for j in range(i + 1, n): # Swap characters at index i and j swapped_s = list(s) swapped_s[i], swapped_s[j] = swapped_s[j], swapped_s[i] swapped_s = \'\'.join(swapped_s) # Calculate distinct substrings in swapped string current_count = count_distinct_substrings(swapped_s) max_count = max(max_count, current_count) return max_count"},{"question":"A large shopping mall has a security system that records the movements of shoppers. Each shopper has a unique ID represented by an integer, and the system captures their entry and exit times throughout the day. The shopping mall management wants to analyze the data to understand peak shopping times. Specifically, they want to find the overlapping time periods when the maximum number of shoppers are inside the mall. Given the entry and exit times of multiple shoppers, determine the maximum number of shoppers present in the mall at any given time. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case begins with an integer N, the number of shoppers. - Each of the next N lines contains two integers E and X, the entry and exit times of a shopper, respectively. ------ Output Format ------ For each test case, output a single integer representing the maximum number of shoppers present in the mall at the same time. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 0 ≤ E < X ≤ 10^{6} ------ Sample Input 1 ------ 2 3 1 5 2 6 4 8 4 1 3 2 5 4 8 6 10 ------ Sample Output 1 ------ 3 2 ------ Explanation 1 ------ Test Case 1: There are three shoppers with periods (1,5), (2,6), and (4,8). The maximum overlap occurs from time 4 to 5 when all three shoppers are present in the mall. Test Case 2: There are four shoppers with periods (1,3), (2,5), (4,8), and (6,10). The maximum overlap occurs from time 4 to 5 and 6 to 8, when two shoppers are present in the mall.","solution":"def max_shoppers(test_cases): results = [] for case in test_cases: events = [] for entry, exit in case: events.append((entry, \'entry\')) events.append((exit, \'exit\')) events.sort() current_shoppers = 0 max_shoppers = 0 for time, event in events: if event == \'entry\': current_shoppers += 1 max_shoppers = max(max_shoppers, current_shoppers) else: current_shoppers -= 1 results.append(max_shoppers) return results"},{"question":"Alice has recently started learning strings and arrays. To test her understanding, Bob gives her an interesting task. Given two strings A and B, Alice needs to find out if B can be derived from A by deleting some characters (possibly none) from A without reordering the remaining characters. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: the first line contains string A and the second line contains string B. Both strings consist of only lowercase English letters [a-z]. Output: For each test case, print \\"YES\\" (quotes for clarity) if B can be derived from A by deleting some characters without altering the order of the remaining characters, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100, 1 ≤ |A|, |B| ≤ 1000. SAMPLE INPUT 3 abpcplea apple helloworld hello monkey money SAMPLE OUTPUT YES YES YES","solution":"def can_derive_string(A, B): Determines if string B can be derived from string A by deleting some characters from A while preserving the order. i, j = 0, 0 while i < len(A) and j < len(B): if A[i] == B[j]: j += 1 i += 1 return j == len(B) def process_test_cases(test_cases): results = [] for A, B in test_cases: if can_derive_string(A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an NxN grid filled with integers. A path from the top-left corner (1,1) to the bottom-right corner (N,N) is defined as a sequence of moves starting at (1,1) and ending at (N,N), where each move is to the right or down. Each path has an associated cost calculated as the sum of the integers on the path. Your task is to find the minimum cost among all the possible paths from (1,1) to (N,N). ------ Input ------ The first line contains an integer T, the number of test cases. Each test case starts with a line containing the integer N. The next N lines each contain N space-separated integers representing the grid. ------ Output ------ For each test case, output the minimum cost for a path from the top-left corner to the bottom-right corner on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 -1000 ≤ Grid[i][j] ≤ 1000 ------ Example ------ Input: 2 3 1 2 3 4 5 6 7 8 9 2 1 1 2 1 Output: 21 3","solution":"def min_path_cost(grid): Given an NxN grid, this function calculates the minimum cost for a path from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) where each move is either to the right or down. N = len(grid) dp = [[float(\'inf\')] * N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(N): for j in range(N): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1] def solve_min_path_cost(test_cases): results = [] for grid in test_cases: results.append(min_path_cost(grid)) return results"},{"question":"You are an employee at a network security company. As a new task, you are asked to validate a series of IP addresses that are given in a list. An IP address is considered valid if it meets the following criteria: - It consists of four octets. - Each octet is an integer between 0 and 255 (inclusive). - The octets are separated by a single period (\'.\'). If the input contains an IP address that does not meet these criteria, your result should indicate it by outputting `INVALID`. Otherwise, all given IP addresses should be output as `VALID`. Constraints - The input consists of multiple lines of IP addresses. - Each IP address is in the format of a string and separated by new lines. - There are at most 100 IP addresses in the input. Input Input is given from Standard Input in the following format: IP_1 IP_2 . . IP_N Output For each input IP address, if it is valid according to the criteria above, output `VALID`. Otherwise, output `INVALID`. Examples Input 192.168.0.1 255.255.255.255 256.100.50.25 123.123.123.123.123 Output VALID VALID INVALID INVALID","solution":"def validate_ip_addresses(ip_addresses): Validates a list of IP addresses. For each IP address in the list, if it is valid according to the criteria, outputs \'VALID\'. Otherwise, outputs \'INVALID\'. Params: - ip_addresses (list of str): List of IP addresses to validate Returns: - list of str: List of \'VALID\' or \'INVALID\' corresponding to each IP address def is_valid_ip(ip): parts = ip.split(\'.\') if len(parts) != 4: return \\"INVALID\\" for part in parts: if not part.isdigit(): return \\"INVALID\\" octet = int(part) if not (0 <= octet <= 255): return \\"INVALID\\" return \\"VALID\\" return [is_valid_ip(ip) for ip in ip_addresses]"},{"question":"You are given an array a consisting of n integers. You want to perform some operations such that each element in the array becomes zero. In one operation, you can choose two elements of the array, say a[i] and a[j], and set one of them to the absolute difference |a[i] - a[j]| and the other to zero. Find the minimum number of operations required to make all the elements of the array zero. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. The first line of each test case contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line of each test case contains n integers a[i] (1 le a[i] le 10^6) — the elements of the array. It\'s guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, print one integer — the minimum number of operations required to make all elements of the array zero. -----Example----- Input 2 3 1 2 3 4 5 6 7 8 Output 2 3","solution":"def min_operations(t, test_cases): results = [] for case in test_cases: n, a = case # If there\'s only one element, no operations required as it\'s already zero if n == 1: results.append(0) else: results.append(n - 1) return results"},{"question":"Frank is a video game developer, and he is working on a level where the player needs to collect coins positioned around a maze. To make the game more challenging, he wants to calculate the optimal timer setting for players to gather all coins within a specific time frame. Each coin is positioned at a specific location in the two-dimensional maze, and the player starts at a given point. The player can move in four directions (up, down, left, right) and takes 1 time unit to move from one coordinate to an adjacent coordinate (horizontally or vertically). Your task is to determine the minimum time required for the player to collect all the coins and return to the starting point. -----Input----- The input consists of multiple test cases. Each test case starts with a line containing an integer t (1 leq t leq 100), the number of test cases. Each test case then starts with a line containing three integers r, c, and k (1 leq r, c leq 100, 1 leq k leq 10) representing the number of rows, number of columns, and number of coins in the maze, respectively. Followed by k lines each containing two integers x and y (0 leq x < r, 0 leq y < c) representing the coordinates of each coin. The player always starts at the coordinate (0, 0). -----Output----- For each test case, display the minimum time needed for the player to collect all the coins and return to the starting point. If it is impossible to collect all coins, display \\"impossible\\". -----Examples----- Sample Input: 1 3 3 4 0 1 1 2 2 1 1 1 Sample Output: 8 Note: - For the sample input, the player collects coins in the order (0,1), (1,1), (2,1), (1,2), and returns to the starting point (0,0). The optimal path would be (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,1) -> (1,1) -> (0,1) -> (0,0), taking 8 time units in total.","solution":"from itertools import permutations def calculate_distance(p1, p2): Calculate Manhattan distance between two points return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) def minimum_time_to_collect_all_coins_and_return(r, c, k, coins): start = (0, 0) min_time = float(\'inf\') # Generate all permutations of the coin coordinates for perm in permutations(coins): current_time = 0 current_position = start # Calculate the time to collect all coins in the current permutation for coin in perm: current_time += calculate_distance(current_position, coin) current_position = coin # Calculate the time to return to the start position current_time += calculate_distance(current_position, start) # Update the minimum time min_time = min(min_time, current_time) return min_time def optimal_timer_settings(t, test_cases): results = [] for case in test_cases: r, c, k = case[0] coins = case[1:] if k == 0: results.append(0) else: time_needed = minimum_time_to_collect_all_coins_and_return(r, c, k, coins) if time_needed == float(\'inf\'): results.append(\\"impossible\\") else: results.append(time_needed) return results"},{"question":"A famous computer scientist has recently turned their attention to the art of storytelling, and they need your help with an interesting problem related to narrative structure. They have a story composed of multiple chapters, and each chapter can stand alone or be linked to form a more comprehensive storyline. However, the trendiness of each chapter varies, and they wish to present the chapters in such an order as to maximize the sum of the trendiness scores while maintaining the natural direction of the storyline. You are given a list of chapters with the \'trendiness\' score for each. The chapters should be ordered such that there is no \'backtracking\' in the storyline - each chapter should connect naturally to the next or can be skipped if it causes a decrease in the overall trendiness score. The goal is to find the highest possible sum of the trendiness of a valid combination of chapters that respects the storyline order. -----Task----- Given the trendiness scores of the chapters, determine the maximum sum of trendiness scores achievable by any valid combination of chapters. -----Input----- The first line of input contains the number of chapters ( n ), where ( 1 leq n leq 10^5 ). The second line contains ( n ) consecutive integers ( t_i ) for ( i=1,2,ldots,n ), where ( -10^3 leq t_i leq 10^3 ), representing the trendiness scores of the chapters. -----Output----- Output one line containing one integer: the maximum sum of trendiness scores of the chapters, respecting the order of the storyline. -----Examples----- Sample Input: 6 1 -2 3 -4 5 -6 Sample Output: 9 Sample Input: 4 -1 -2 -3 -4 Sample Output: 0","solution":"def max_trendiness_sum(n, scores): Calculates the maximum sum of trendiness scores achievable by any valid combination of chapters. Parameters: n (int): Number of chapters scores (list of int): Trendiness scores of the chapters Returns: int: Maximum sum of trendiness scores # Dynamic programming approach where dp[i] represents the max sum including the i-th chapter dp = [0] * n # Initialize the first chapter\'s trendiness score or 0 if it\'s negative if scores[0] > 0: dp[0] = scores[0] for i in range(1, n): # We only add the current chapter\'s score if it results in a non-negative sum dp[i] = max(dp[i-1] + scores[i], dp[i-1]) return dp[-1]"},{"question":"There is a grid with N rows and N columns. Each cell in the grid is initially empty. You have to perform Q operations on this grid, where each operation is one of the following types: 1. SET x y v: Set the value of the cell at row x and column y to v. 2. QUERY r: Calculate and return the sum of the values in all the cells in the r-th row. Given N and Q, process each operation accordingly and print the results of the QUERY operations. Input: The first line contains two integers N and Q. The next Q lines contain one of the two types of operations described above. Output: For each QUERY operation, print the result in a new line. Constraints: 1 ≤ N ≤ 1000 1 ≤ Q ≤ 10^5 1 ≤ x, y, r ≤ N 0 ≤ v ≤ 10^9 SAMPLE INPUT 3 5 SET 1 1 5 SET 2 2 3 QUERY 1 SET 1 3 7 QUERY 1 SAMPLE OUTPUT 5 12 Explanation: - First, we set the cell at (1, 1) to 5. - Then, we set the cell at (2, 2) to 3. - On querying the sum of the 1st row, since only cell (1, 1) has been set, the sum is 5. - Next, we set the cell at (1, 3) to 7. - On querying the sum of the 1st row again, the sum is 5 (from cell 1, 1) + 7 (from cell 1, 3) = 12.","solution":"def process_operations(N, Q, operations): Processes the operations on the N x N grid and returns the results of the QUERY operations. Args: N: int: size of the grid (N x N) Q: int: number of operations operations: List of tuples containing the operations Returns: List of results from QUERY operations grid = [[0] * N for _ in range(N)] results = [] for operation in operations: op = operation[0] if op == \\"SET\\": _, x, y, v = operation grid[x - 1][y - 1] = v elif op == \\"QUERY\\": _, r = operation results.append(sum(grid[r - 1])) return results"},{"question":"Kento is fascinated by number sequences and their patterns. One day, he came up with a unique sequence generation rule and wants you to write a program to generate numbers based on his rules. Here is the rule: If a number is divisible by 3, the next number in the sequence is double the current number. If a number is divisible by 5, the next number is half the current number. If a number is divisible by both 3 and 5, it becomes the number itself. If a number is divisible by neither 3 nor 5, add 7 to the number. You are to write a program that generates the sequence for k iterations starting from a given number n. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100), where n is the starting number and k is the number of iterations. Output Output the resulting sequence as a space-separated string after k iterations. Examples Input 6 3 Output 12 24 48 Input 10 4 Output 5 12 24 48 Input 4 5 Output 11 18 36 72 144 Note In the first example, 6 is divisible by 3, so the next number is 6 * 2 = 12. 12 is again divisible by 3, so the next number is 12 * 2 = 24. 24 is also divisible by 3, so the next number is 24 * 2 = 48. In the second example, 10 is divisible by 5, so the next number is 10 / 2 = 5. 5 is divisible by 5, so the next number is 5 / 2 = 2. Since 2 is neither divisible by 3 nor by 5, 7 is added making it 9. 9 is divisible by 3, so the next number is 9 * 2 = 18. In the third example, 4 is neither divisible by 3 nor by 5, so 4 + 7 = 11. 11 is neither divisible by 3 nor by 5, so 11 + 7 = 18. 18 is divisible by 3, so the next number is 18 * 2 = 36. 36 is divisible by 3, so the next number is 36 * 2 = 72. 72 is divisible by 3, so the next number is 72 * 2 = 144.","solution":"def generate_sequence(n, k): Generates a sequence of numbers according to the given rules for k iterations starting from n. Parameters: n : int : Starting number k : int : Number of iterations Returns: list : Sequence of numbers after k iterations sequence = [] current = n for _ in range(k): if current % 3 == 0 and current % 5 == 0: sequence.append(current) elif current % 3 == 0: current *= 2 sequence.append(current) elif current % 5 == 0: current //= 2 sequence.append(current) else: current += 7 sequence.append(current) return sequence"},{"question":"A gardener is managing the growth of his plants, with a specific interest in tracking the progress of their heights over a given period. He measures the height of each plant at the end of each day and records this data. The gardener wants to identify if there was a period where the height of a particular plant strictly increased every single day. Your task is to write a program that detects whether there is such a period for any plant, for a given set of readings. Input The input consists of multiple datasets. Each dataset is presented in the following format: n (number of days: integer) p1 p2 ... pn (heights of the plant over n days: blank-separated integers) n will not exceed 1000, and each height value will be a positive integer less than or equal to 1000. When n is 0, it indicates the end of input. Output For each dataset, print \\"YES\\" if there is at least one period where the height strictly increases every day. Otherwise, print \\"NO\\". Example Input 5 1 2 3 4 5 4 5 4 3 2 0 Output YES NO","solution":"def detect_increasing_period(readings): results = [] for dataset in readings: n = dataset[0] if n == 0: break heights = dataset[1:] if any(heights[i] < heights[i+1] for i in range(n-1)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_data): datasets = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break heights = list(map(int, lines[i+1].split())) datasets.append([n] + heights) i += 2 return datasets def main(input_data): datasets = process_input(input_data) results = detect_increasing_period(datasets) return \\"n\\".join(results)"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer that appears only once. Write a function to identify and return the integer that appears only once. For example, if given the list `[4, 1, 2, 1, 2]`, the function should return `4` as it is the only integer without a duplicate.","solution":"def find_single_number(nums): Returns the number that appears only once in the list. Given a list of integers where each integer appears exactly twice, except for one integer that appears only once, this function identifies and returns that one unique integer. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"You are given a string S of size N. You need to remove all vowels (a, e, i, o, u) from the string and print the modified string. Example 1: Input: N = 5 S = \\"hello\\" Output: hll Example 2: Input: N = 6 S = \\"apple\\" Output: ppl Your Task: Since this is a function problem, you just need to complete the provided function removeVowels() which takes S and n as input parameters and print the modified string in the function itself. You have to print the final string ending with a space as printing of newline character is taken care in driver code itself. Constraints: 1 <= N <= 10^{5} S contains only lowercase English letters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def removeVowels(S, N): This function removes all vowels from the input string S and prints the modified string. Parameters: S (str): Input string containing only lowercase English letters. N (int): Length of the input string. Returns: None vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} result = [char for char in S if char not in vowels] print(\'\'.join(result), end=\' \')"},{"question":"Given an integer array nums, find the maximum sum of a non-empty subarray. A subarray is a contiguous part of an array. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the maximum sum 6. Example 2: Input: nums = [1] Output: 1 Explanation: The subarray [1] has the maximum sum 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the maximum sum 23. Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): Returns the maximum sum of a non-empty subarray. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In the city of Algoria, there is a new algorithm optimization event being held. The participants are given a series of events happening in a queue, and their task is to simulate how the events will be handled when certain priority rules are applied. Each event has a unique ID and a priority level. The events are processed based on their priority: events with higher priority should be handled before events with lower priority. If two events have the same priority, they are processed in the order they appear in the input. Your task is to write a program that, given a series of events with their priorities, outputs the order in which the events are processed. -----Input----- The first line of the input contains a single integer n, the number of events in the queue (1 leq n leq 100). Each of the following n lines contains two integers id and priority, where 0 leq id leq 1000 and 0 leq priority leq 10. The id is the unique identifier of the event and priority is the priority of the event. -----Output----- Output the sequence of event ids in the order they are processed, separated by a space. -----Examples----- Input 5 1 3 2 1 3 2 4 3 5 1 Output 1 4 3 2 5 Input 4 10 5 20 2 30 4 40 5 Output 10 40 30 20 -----Note----- In the first example, events with id 1 and 4 have the highest priority (3) and are processed first in the order they appear. Then the event with id 3 with priority 2 is processed. Lastly, events with id 2 and 5, both with priority 1, are processed in the order they appear. In the second example, events with id 10 and 40 have the highest priority (5) and are processed first in the order they appear. Next, the event with id 30 with priority 4 is processed, followed by the event with id 20 with priority 2.","solution":"def process_events(n, events): Processes events based on their priority and order of appearance. Parameters: n (int): Number of events. events (list of tuples): Each tuple contains (id, priority) of an event. Returns: list: Sequence of event ids in the order they are processed. # Sort events first by descending priority and then by original order in case of tie sorted_events = sorted(events, key=lambda x: (-x[1], events.index(x))) # Extract the event ids in order processed_order = [e[0] for e in sorted_events] return processed_order"},{"question":"# Task Sarah loves reading books. She has a list of books that she wants to read. Each book has a `start time` and an `end time` representing the time it will take for Sarah to read the book, where the `start time` is the beginning time she starts reading and the `end time` is the time she finishes reading. Sarah wants to read as many books as possible, but she needs to plan her reading in such a way that she does not read multiple books at the same time. In other words, she cannot have any two books overlapping in their reading times. Given a list of books with their respective start and end times, help Sarah find the maximum number of books she can read without any overlap. Write a function `max_books(bookList)` to solve the problem where `bookList` is a list of tuples, each tuple containing the `start time` and `end time` of a book. # Example For `bookList = [(1, 3), (2, 5), (4, 6)]`, the output should be `2`. Sarah can read at most two books without overlaps: she can read the first book from 1 to 3 and then the third book from 4 to 6. For `bookList = [(1, 2), (2, 3), (3, 4), (4, 5)]`, the output should be `4`. Sarah can read all four books one after another as they do not overlap. # Function Signature ```python def max_books(bookList: List[Tuple[int, int]]) -> int: pass ``` Note: You can assume the input list of books is not necessarily sorted by start or end times and that all times are positive integers.","solution":"def max_books(bookList): Returns the maximum number of books that can be read without overlapping times. # Sort books by their end time bookList.sort(key=lambda x: x[1]) max_books_read = 0 current_end_time = 0 for start_time, end_time in bookList: if start_time >= current_end_time: max_books_read += 1 current_end_time = end_time return max_books_read"},{"question":"A group of students is organizing a science fair where projects can be displayed. Each project requires a certain number of tables to be set up. However, the space in the venue is limited, so the students need to optimize the number of projects they can accommodate given the space constraints. There is a limited number of tables available and an even more limited number of arrangement slots, where each slot can hold a fixed number of tables. The objective is to maximize the number of different projects that can be set up given these constraints, while also making sure that no two identical projects are displayed more than once. You are given the number of projects, the number of tables needed for each project, the number of available arrangement slots, and the maximum number of tables each slot can hold. You need to determine the maximum number of non-identical projects that can be displayed in the available slots. Input The first line contains two integers, n and k (1 ≤ n, k ≤ 1000) - the number of projects and the number of arrangement slots respectively. The second line contains n integers ti (1 ≤ ti ≤ 100) - the number of tables required for each project. The third line contains k integers si (1 ≤ si ≤ 100) - the maximum number of tables that can be placed in each arrangement slot. Output Output a single integer - the maximum number of non-identical projects that can be set up. Example Input 5 3 2 3 5 1 4 5 5 3 Output 3 Explanation In this example, the maximum number of non-identical projects that can be set up are 3 projects (Projects requiring 2, 3, and 1 table) using the three arrangement slots which can hold 5, 5, and 3 tables respectively. Only one project needing 4 or 5 tables can fit into the slots, but it would reduce the total number of different projects displayed. Thus, choosing smaller projects is more optimal.","solution":"def max_projects(n, k, tables_required, slot_capacities): tables_required.sort() slot_capacities.sort() project_count = 0 i = 0 # Index for tables_required j = 0 # Index for slot_capacities while i < n and j < k: if tables_required[i] <= slot_capacities[j]: project_count += 1 j += 1 # Move to the next slot since this one is used i += 1 # Move to the next project return project_count"},{"question":"Online Marketplace Problem Statement You have been tasked with implementing a feature for an online marketplace where sellers can list their items and buyers can search for items they are interested in. Each item listed has an ID, name, and a list of keywords associated with it. Buyers can search for items by providing a keyword, and the system should return the IDs of all items that match the given keyword. To make the search feature efficient and user-friendly, you need to implement a function that processes multiple queries from buyers. Each query consists of a keyword, and the system should return a list of item IDs whose keywords include the given keyword. The order of the item IDs in the result does not matter. Constraints * 1 ≤ n ≤ 10^3 (number of items) * 1 ≤ q ≤ 10^3 (number of queries) * 1 ≤ |name|, |keyword| ≤ 100 (length of the name and keywords) * 1 ≤ m ≤ 10 (number of keywords per item) Input The input is given in the following format: n q item_id_1 item_name_1 keyword_1_1 keyword_1_2 ... keyword_1_m_1 ... item_id_n item_name_n keyword_n_1 keyword_n_2 ... keyword_n_m_n query_keyword_1 ... query_keyword_q Output For each query, output a list of item IDs that have the queried keyword. Each line should contain the result for one query. If no item matches the keyword, output an empty line for that query. Example Input 3 2 1 \\"Laptop\\" electronics computer portable 2 \\"Headphones\\" audio music electronics 3 \\"Keyboard\\" computer accessories electronics computer music Output 1 3 2","solution":"def online_marketplace(n, q, items, queries): from collections import defaultdict keyword_to_ids = defaultdict(list) # Process each item for item in items: parts = item.split() item_id = int(parts[0]) keywords = parts[2:] for keyword in keywords: keyword_to_ids[keyword].append(item_id) result = [] # Process each query for query in queries: if query in keyword_to_ids: result.append(\\" \\".join(map(str, sorted(keyword_to_ids[query])))) else: result.append(\\"\\") return result"},{"question":"You are given a graph with n vertices and m edges. Each edge connects two distinct vertices and has a positive integer weight. Determine whether there exists a path from vertex 1 to vertex n such that the sum of the weights of the edges along the path is even. If such a path exists, print \\"YES\\", otherwise print \\"NO\\". For example, consider a graph with 5 vertices and 6 edges. The edges have the following weights: 1 2 3 1 3 4 2 3 5 2 4 1 3 4 2 4 5 6 From this graph, there is a path from vertex 1 to vertex 5 (1 -> 3 -> 4 -> 5) with weights (4, 2, 6) whose sum is 12 (an even number). So the answer is \\"YES\\". -----Input----- The first line contains an integer t (1 le t le 10) — the number of test cases. For each test case: The first line contains two integers n and m (2 le n le 1000, 1 le m le 5000) — the number of vertices and edges in the graph. Then m lines follow; each contains three integers u, v, and w (1 le u, v le n, 1 le w le 1000, u neq v) — the end vertices of an edge and the weight of the edge. It is guaranteed that the graph given is connected and w is always a positive integer. -----Output----- For each test case, print \\"YES\\" if there exists a path from vertex 1 to vertex n with an even sum of weights, otherwise print \\"NO\\". -----Examples----- Input 2 5 6 1 2 3 1 3 4 2 3 5 2 4 1 3 4 2 4 5 6 4 4 1 2 3 2 3 5 3 4 7 4 1 9 Output YES NO -----Note----- In the first example, there is a path from vertex 1 to vertex 5 with the sum of weights being even (1 -> 3 -> 4 -> 5 or 1 -> 3 -> 4 -> 2 -> 1 -> 5 etc.). Since it exists, the output is \\"YES\\". In the second example, all paths from vertex 1 to vertex 4 have an odd sum of weights, so the output is \\"NO\\".","solution":"def is_even_path(n, m, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) queue = deque([(1, 0)]) visited = {1: 0} while queue: current_node, current_sum = queue.popleft() for neighbor, weight in graph[current_node]: new_sum = current_sum + weight if neighbor in visited: if visited[neighbor] % 2 != new_sum % 2: continue else: visited[neighbor] = new_sum queue.append((neighbor, new_sum)) return \\"YES\\" if n in visited and visited[n] % 2 == 0 else \\"NO\\" def solve(test_cases): results = [] for n, m, edges in test_cases: results.append(is_even_path(n, m, edges)) return results"},{"question":"You are given a dictionary where the keys are words, and the values are their corresponding frequencies of occurrence in a text document. Write a function topKFrequentWords that takes two inputs, the dictionary and an integer K, and returns a list of the top K frequent words sorted by their frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. Here is an example: ```python def topKFrequentWords(words_dict, K): # your code here words_dict = { \\"apple\\": 4, \\"banana\\": 2, \\"orange\\": 5, \\"grape\\": 2, \\"pear\\": 3, } K = 3 print(topKFrequentWords(words_dict, K)) # Output: [\'orange\', \'apple\', \'pear\'] ``` Note: Assume the dictionary will always have at least K unique words.","solution":"def topKFrequentWords(words_dict, K): Returns the top K frequent words sorted by their frequency in descending order. If two words have the same frequency, they are sorted alphabetically. sorted_words = sorted(words_dict.items(), key=lambda x: (-x[1], x[0])) return [word for word, freq in sorted_words[:K]] # Example usage: words_dict = { \\"apple\\": 4, \\"banana\\": 2, \\"orange\\": 5, \\"grape\\": 2, \\"pear\\": 3, } K = 3 print(topKFrequentWords(words_dict, K)) # Output: [\'orange\', \'apple\', \'pear\']"},{"question":"Input The input is given from Standard Input in the following format: > M C p_1 w_1 p_2 w_2 : : p_C w_C Output * You have to print M lines. * The i-th line should contain the total weight of packages for city i (1 le i le M). Constraints * 3 le M, C le 100,000 * 1 le p_i le M * 1 le w_i le 10^{12} * Any final result does not exceed 2 times 10^{13}. Examples Input 5 4 3 500 2 300 4 700 1 200 Output 200 300 500 700 0 Input 7 5 2 400 5 800 1 600 6 100 7 300 Output 600 400 0 0 800 100 300 Input 3 3 1 50 2 100 3 150 Output 50 100 150 Input 4 6 4 200 3 300 2 100 1 400 1 200 3 100 Output 600 100 400 200","solution":"def total_weights(M, C, packages): Given the number of cities M, the number of packages C, and a list of tuples with each tuple containing (city_index, weight), return the total weight for each city from 1 to M. # Initialize an array to store the total weight for each city city_weights = [0] * M # Iterate through the packages to accumulate the weight for each city for city_index, weight in packages: city_weights[city_index - 1] += weight return city_weights"},{"question":"You are tasked with writing a function that simulates a simple vending machine. The machine dispenses snacks based on a given list of items and their prices. You need to implement a function that receives a list of `snacks`, a corresponding list of `prices`, and a `balance`, which represents the amount of money the user has. Your function should return a list of snacks that the user can afford to buy with their balance. The function should return the names of the snacks in the order they appear in the input list. If no snacks can be afforded, the function should return an empty list. You can assume that: * `snacks` and `prices` have the same length and are non-empty. * `snacks` contains no duplicate items and has only non-empty strings. * `prices` is a list of positive integers. * `balance` is a non-negative integer. # Example ```python snacks = [\\"chips\\", \\"chocolate\\", \\"cookies\\", \\"soda\\"] prices = [50, 100, 70, 30] balance = 75 ``` In this case, the function should return `[\\"chips\\", \\"cookies\\", \\"soda\\"]` because only these items cost less than or equal to the balance (75). # Function Signature ```python def affordable_snacks(snacks: List[str], prices: List[int], balance: int) -> List[str]: # Your code here ``` # Additional Notes * Do not modify the input lists. * The output list should preserve the order of the items as they appear in the input lists.","solution":"from typing import List def affordable_snacks(snacks: List[str], prices: List[int], balance: int) -> List[str]: Returns the list of snacks that can be afforded with the given balance. Parameters: snacks (List[str]): A list of snack names. prices (List[int]): A list of prices corresponding to the snacks. balance (int): The amount of money available to spend. Returns: List[str]: A list of snacks that can be bought within the provided balance. return [snack for snack, price in zip(snacks, prices) if price <= balance]"},{"question":"The temperature in OptimalCity is measured using an array where each element represents the temperature recorded at hourly intervals. The city administration wants to know the highest recorded temperature during any continuous `k` hours to plan their resources efficiently. Write a function to find the maximum temperature recorded during any continuous `k` hours. ----- Constraints ----- - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ n - -100 ≤ temperature ≤ 100 ----- Input ----- Input is given from Standard Input in the following format: n k temp1 temp2 temp3 ... tempn ----- Output ----- Print one integer denoting the maximum temperature recorded during any continuous `k` hours. ----- Sample Input ----- 8 3 1 3 -1 -3 5 3 6 7 ----- Sample Output ----- 15 The maximum temperature recorded during any continuous 3 hours is 15 from the sequence [5, 3, 6, 7].","solution":"def max_temperature_in_k_hours(n, k, temperatures): Finds the maximum temperature recorded during any continuous k hours. :param n: Integer, the number of hours. :param k: Integer, the number of continuous hours to consider. :param temperatures: List of integers, temperatures recorded at each hour. :return: Integer, the maximum temperature recorded during any continuous k hours. if k > n: return None max_temp = float(\'-inf\') current_sum = sum(temperatures[:k]) for i in range(n - k + 1): if i > 0: current_sum = current_sum - temperatures[i - 1] + temperatures[i + k - 1] max_temp = max(max_temp, current_sum) return max_temp"},{"question":"Amelia is arranging rectangular picture frames on a large rectangular wall. The wall has a width W and height H. Each frame has a width of w and height of h. All frames must be placed in such a way that their sides are parallel to the sides of the wall. Help Amelia determine whether she can place n frames on the wall without overlapping. Input The first line contains four integers n, W, H, w, and h (1 ≤ n ≤ 1000, 1 ≤ W, H, w, h ≤ 1000) — the number of frames, the width and height of the wall, and the width and height of each frame. Output Print \\"YES\\" (without the quotes) if it is possible to place all n frames on the wall without overlapping. If it is impossible, print \\"NO\\". Examples Input 6 15 10 3 5 Output YES Input 2 10 5 4 3 Output YES Input 8 10 10 3 4 Output NO Note The possible arrangement of the frames for the first sample is such that frames are aligned in two columns and three rows. In the second example, both frames fit as they can be placed side by side. In the third example, the total area required exceeds the wall dimensions.","solution":"def can_place_frames(n, W, H, w, h): Determines if n frames, each of width w and height h, can be placed on a wall of width W and height H without overlapping. Returns \\"YES\\" if possible, otherwise \\"NO\\". # Calculate the number of frames that can fit horizontally and vertically horizontal_fit = W // w vertical_fit = H // h # Check if the total number of frames that can fit in both orientations is at least n if horizontal_fit * vertical_fit >= n: return \\"YES\\" # Check for rotated frames (w and h swapped) horizontal_fit = W // h vertical_fit = H // w if horizontal_fit * vertical_fit >= n: return \\"YES\\" return \\"NO\\""},{"question":"Write a function that takes a list of integers as input and returns a list of strings. Each string should describe the integers at even indices in the format: \\"Number <number> at index <index> is even/odd\\". Replace `<number>` with the actual number and `<index>` with the actual index. The description should indicate if the number at that index is even or odd. Indices start from 0. For example, given the input `[10, 15, 20, 25, 30]`, the function should return: ``` [ \\"Number 10 at index 0 is even\\", \\"Number 20 at index 2 is even\\", \\"Number 30 at index 4 is even\\" ] ``` Here are a few more examples to clarify: 1. For the input `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, the output should be: ``` [ \\"Number 1 at index 0 is odd\\", \\"Number 3 at index 2 is odd\\", \\"Number 5 at index 4 is odd\\", \\"Number 7 at index 6 is odd\\", \\"Number 9 at index 8 is odd\\" ] ``` 2. For the input `[12, 14]`, the output should be: ``` [ \\"Number 12 at index 0 is even\\" ] ``` 3. For the input `[17]`, the output should be: ``` [ \\"Number 17 at index 0 is odd\\" ] ``` Happy coding!","solution":"def describe_even_indices(numbers): Returns a list of descriptions for numbers at even indices. :param numbers: List of integers :return: List of strings describing the numbers at even indices descriptions = [] for index, number in enumerate(numbers): if index % 2 == 0: parity = \'even\' if number % 2 == 0 else \'odd\' descriptions.append(f\\"Number {number} at index {index} is {parity}\\") return descriptions"},{"question":"Given a 9x9 Sudoku puzzle, determine if the given puzzle is valid. The Sudoku board could be partially filled, where empty cells are represented by the character \'.\'. A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to adhere to the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note: - A Sudoku board (partially filled) is represented as a 9x9 2D array. - A partially filled sudoku might be valid but unsolvable. Input Input data contains a 9x9 grid of characters. Each character is either a digit (1-9) representing a digit placed in the Sudoku puzzle or a dot (\'.\') representing an empty cell. Output Output \\"True\\" if the Sudoku board is valid, otherwise output \\"False\\". Example Inpututput True","solution":"def is_valid_sudoku(board): Determine if a given 9x9 2D array representing a Sudoku board is valid. def is_valid_group(group): elements = [x for x in group if x != \'.\'] return len(elements) == len(set(elements)) for row in board: if not is_valid_group(row): return False for col in zip(*board): if not is_valid_group(col): return False for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_group(block): return False return True"},{"question":"Given an array of integers A of size N, determine if it is possible to make all the elements equal by performing any number of operations of the following type: choose any pair of elements and either increase or decrease both elements by 1. If it is possible, return 1, otherwise return 0. Example 1: Input: A = [3, 5, 1] Output: 1 Explanation: We can perform operations as follows: 1. Choose elements 3 and 5, increment both by 1 to get [4, 6, 1]. 2. Choose elements 6 and 1, increment both by 1 to get [4, 7, 2]. 3. Choose elements 4 and 2, increment both by 1 to get [5, 8, 3]. 4. Choose elements 8 and 3, increment both by 1 to get [5, 9, 4]. 5. Choose elements 9 and 4, increment both by 1 to get [5, 10, 5]. 6. Continue until all elements are equal. Example 2: Input: A = [1, 2, 3, 4] Output: 0 Explanation: It is not possible to make all elements equal with allowed operations. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canMakeEqual() which takes an array A and its size N as input and returns 0 or 1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^9 <= A[i] <= 10^9","solution":"def canMakeEqual(A, N): Determine if it is possible to make all elements in array A equal by performing any number of allowed operations. Parameters: A (list): The list of integers. N (int): The size of the list. Returns: int: 1 if it is possible to make all elements equal, otherwise 0. odd_count = 0 even_count = 0 for num in A: if num % 2 == 0: even_count += 1 else: odd_count += 1 if odd_count == 0 or even_count == 0: return 1 else: return 0"},{"question":"You are working on a new feature for a logistics software system that tracks delivery routes for a fleet of trucks. Each route is represented as a sequence of nodes (stops) in a directed graph, where nodes represent locations (such as warehouses or delivery points) and edges represent roads connecting these locations with specified travel times. The requirements for this feature are as follows: - Each truck has a separate route, represented as a directed graph. - Given the graph and a list of nodes (stops) that the truck must visit in order, the program should determine the shortest total travel time required to visit all the specified nodes in the given order. - The graph is weighted, with positive weights indicating the travel time between nodes. - The graph may contain cycles. As a developer, you are tasked with implementing the logic to calculate the shortest travel time for each truck based on the routes provided. # Input The program takes multiple datasets. The end of the input is indicated by a single line containing \\"0\\". Each dataset is given in the following format: 1. The first line contains two integers `N` and `M`, where `N` (2 ≤ N ≤ 100) is the number of nodes and `M` (1 ≤ M ≤ 1000) is the number of edges. 2. The next `M` lines each contain three elements: `u`, `v`, `t` (1 ≤ u, v ≤ N, 1 ≤ t ≤ 1000), where `u` is the start node, `v` is the end node, and `t` is the travel time from `u` to `v`. 3. The final line contains a sequence of nodes that the truck must visit in the specified order. The sequence has at least 2 nodes and at most `N` nodes. # Output For each dataset, output the shortest travel time required for the truck to visit all the specified nodes in the given order on one line. If it is not possible to travel between the specified nodes, output `-1`. # Example Input ``` 5 6 1 2 2 2 3 2 3 4 2 4 5 2 1 4 10 2 5 10 1 3 5 4 4 4 1 2 1 2 3 1 3 4 1 4 1 1 1 2 3 4 0 ``` Output ``` 6 3 ```","solution":"import heapq def dijkstra(graph, start, n): Uses Dijkstra\'s algorithm to find the shortest path from start node to all other nodes in a weighted graph. distances = {node: float(\'infinity\') for node in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_route(N, M, edges, route): Returns the shortest travel time given the graph and the order of nodes to visit. graph = {i: {} for i in range(1, N+1)} for edge in edges: u, v, t = edge graph[u][v] = min(t, graph[u].get(v, float(\'infinity\'))) total_time = 0 for i in range(len(route) - 1): start = route[i] end = route[i+1] distances = dijkstra(graph, start, N) if distances[end] == float(\'infinity\'): return -1 total_time += distances[end] return total_time def logistic_routes(datasets): Processes multiple datasets and determine the shortest travel time for each. results = [] for dataset in datasets: N, M, edges, route = dataset results.append(shortest_route(N, M, edges, route)) return results def parse_input(input_str): Parses the input string to extract the datasets information. lines = input_str.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): if lines[i] == \'0\': break N, M = map(int, lines[i].split()) i += 1 edges = [] for _ in range(M): u, v, t = map(int, lines[i].split()) edges.append((u, v, t)) i += 1 route = list(map(int, lines[i].split())) i += 1 datasets.append((N, M, edges, route)) return datasets def main(input_str): datasets = parse_input(input_str) results = logistic_routes(datasets) for result in results: print(result)"},{"question":"A company wants to implement an employee badge system where each employee\'s badge contains a unique identifier string. The company wants to perform certain operations on the identifier strings to ensure that they satisfy certain properties. Given a zero-indexed string, boldsymbol{mathrm{~S~}}, of n digits (0-9), perform textit{q} queries on boldsymbol{mathrm{~S~}} where each query takes one of the following two forms: 1 i j: Calculate the sum of the digits in the inclusive range from boldsymbol{i} to j. 2 i j k: Replace every digit in the inclusive range from boldsymbol{i} to j with the digit boldsymbol{k}, where boldsymbol{k} is a digit from 0 to 9. Input Format The first line contains two space-separated integers describing the respective values of n and textit{q}. The second line contains a string of n digits (0-9) denoting boldsymbol{mathrm{~S~}}. Each of the textit{q} subsequent lines describes a query in one of the two formats defined above. Constraints 1leq nleq10^5 1leq qleq10^5 0leq ileq jlt n for each query. Output Format For each query of type 1 (i.e., 1 i j), print the sum of the digits in the inclusive range from boldsymbol{i} to j on a new line. Sample Input 0 5 4 12345 1 0 2 2 1 3 9 1 1 4 1 0 4 Sample Output 0 6 29 38 Explanation 0 We perform the following q=4 queries: 1 0 2: Calculate the sum of the digits from index 0 to 2 in the string `12345`. The sum is 1+2+3=6. 2 1 3 9: Replace every digit from index 1 to 3 with 9. The string becomes `19995`. 1 1 4: Calculate the sum of the digits from index 1 to 4 in the modified string `19995`. The sum is 9+9+9+5=32. 1 0 4: Calculate the sum of the digits from index 0 to 4 in the modified string `19995`. The sum is 1+9+9+9+5=33.","solution":"def process_badge_system(n, q, S, queries): S = list(S) # Convert string to list for mutable operations results = [] for query in queries: parts = query.split() type_of_query = int(parts[0]) i = int(parts[1]) j = int(parts[2]) if type_of_query == 1: # Sum of digits from index i to j (inclusive) result = sum(int(S[index]) for index in range(i, j + 1)) results.append(result) elif type_of_query == 2: # Replace every digit from index i to j with k k = parts[3] for index in range(i, j + 1): S[index] = k return results"},{"question":"John is an avid gardener and loves planting trees in his backyard. He has a unique way of planting trees in various lines such that each line starts from the porch and extends outward in different directions. He ensures that no two trees are planted in the same spot to avoid overcrowding. One day, John decides to represent his garden layout in a 2D grid where each tree\'s location is identified by its x and y coordinates (both integers). For aesthetic purposes, John wants to find the smallest bounding rectangle that can enclose all the trees in his garden. The sides of the rectangle should be parallel to the x and y axes. The rectangle should be such that it contains all the trees within its borders, but the edges of the rectangle should be as close to the trees as possible. Your task is to write a program that reads the position of each tree in John\'s garden and determines the coordinates of the bottom-left and top-right corners of the smallest rectangle that can enclose all the trees. -----Input----- The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of trees. - The next N lines contain two space-separated integers x and y, representing the coordinates of each tree. -----Output----- For each test case, output the bottom-left and top-right coordinates of the bounding rectangle. Format your output as \\"x1 y1 x2 y2\\" where (x1,y1) are the coordinates of the bottom-left corner, and (x2,y2) are the coordinates of the top-right corner. -----Note----- - All coordinates are within the range of -10000 to 10000. - There can be up to 1000 trees in a single test case. - There are at most 100 test cases. -----Example ----- Input: 2 4 1 3 4 4 2 2 3 1 3 -1 -2 0 0 1 1 Output: 1 1 4 4 -1 -2 1 1","solution":"def find_bounding_rectangle(test_cases): Given a list of test cases where each test case consists of tree coordinates, finds the bounding rectangle (bottom-left and top-right corners) that encloses all the trees. Parameters: test_cases (list of tuples): Each tuple contains an integer N (number of trees) followed by N tuples of two integers (x, y) representing tree coordinates. Returns: list of strings: Each string represents the coordinates of the bottom-left and top-right corners of the bounding rectangle in the format \\"x1 y1 x2 y2\\". results = [] for trees in test_cases: N = trees[0] coordinates = trees[1:] x_coords = [coord[0] for coord in coordinates] y_coords = [coord[1] for coord in coordinates] x1, y1 = min(x_coords), min(y_coords) x2, y2 = max(x_coords), max(y_coords) results.append(f\\"{x1} {y1} {x2} {y2}\\") return results def process_input(input_string): Processes an input string and returns a list of test cases. Parameters: input_string (str): Input string describing the number of test cases and tree coordinates. Returns: list of tuples: Parsed test cases where each tuple contains an integer N followed by N tuples of tree coordinates (x, y). input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) trees = [(int(input_lines[index + j + 1].split()[0]), int(input_lines[index + j + 1].split()[1])) for j in range(N)] test_cases.append((N, *trees)) index += N + 1 return test_cases"},{"question":"You are given an array of integers. Two arrays are considered \\"almost equal\\" if they differ in at most k positions. Your task is to determine whether two given arrays are almost equal. For example: [1, 2, 3] and [1, 2, 4] are almost equal if k >= 1, since they differ in exactly 1 position. [1, 2, 3] and [4, 5, 6] are not almost equal if k = 2, since they differ in 3 positions. You are given two arrays a and b, both of the same length n, and an integer k. Determine if the given arrays are almost equal or not. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n (1 le n le 10^5) — the length of the arrays, and k (0 le k le n) — the maximum number of positions the arrays can differ to be considered almost equal. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — elements of the first array. The third line of each test case contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^9) — elements of the second array. It\'s guaranteed that the combined length of arrays over all test cases won\'t exceed 10^6. -----Output----- For each test case, print YES if the arrays are almost equal and NO otherwise. You can print each letter in any case. -----Examples----- Input 3 3 1 1 2 3 1 2 4 3 2 1 2 3 4 5 6 5 3 1 2 3 4 5 1 2 4 4 5 Output YES NO YES -----Notes----- In the first test case, arrays [1, 2, 3] and [1, 2, 4] differ in 1 position, so they are almost equal with k = 1. In the second test case, arrays [1, 2, 3] and [4, 5, 6] differ in 3 positions, so they are not almost equal with k = 2. In the third test case, arrays [1, 2, 3, 4, 5] and [1, 2, 4, 4, 5] differ in 2 positions, so they are almost equal with k = 3.","solution":"def are_almost_equal(n, k, a, b): Determines if arrays a and b are almost equal given the allowed difference k. :param int n: The length of the arrays. :param int k: The maximum number of positions the arrays can differ to be considered almost equal. :param list a: The first array. :param list b: The second array. :return: \\"YES\\" if the arrays are almost equal, otherwise \\"NO\\". :rtype: str diff_count = sum(1 for i in range(n) if a[i] != b[i]) return \\"YES\\" if diff_count <= k else \\"NO\\" def process_test_cases(t, test_cases): Processes multiple test cases to determine if the provided pair of arrays are almost equal. :param int t: Number of test cases. :param list test_cases: List of tuples, each containing n, k, a, b. :return: List of \\"YES\\" or \\"NO\\" for each test case. :rtype: list results = [] for n, k, a, b in test_cases: results.append(are_almost_equal(n, k, a, b)) return results"},{"question":"Given a list of integers where every element appears twice except for one element which appears exactly once, find the single element that does not have a duplicate. Example: For nums = [4, 1, 2, 1, 2] you should return 4. Follow up: Your algorithm should have a linear runtime complexity. Can you implement it without using extra memory (i.e., O(1) space complexity)?","solution":"def single_number(nums): Finds the single element in the list that does not have a duplicate. Args: nums (list): List of integers where every element appears twice except for one element which appears exactly once. Returns: int: The single element that does not have a duplicate. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"A new company, Woven Widgets, is experimenting with a new type of machine capable of producing different products. Each product requires a list of components to be assembled. Your task is to determine if it is possible to construct a product with the specified components given the inventory of available components. *Requirement:* Each component required for a product has a specific quantity. The inventory also lists each component with its available quantity. Your task is to check if the product can be constructed using the available components in the inventory. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of distinct components required to construct the product. The next n lines each contain a string and an integer representing the component name (comprising of only lowercase alphabets, length ≤ 20) and the required quantity (1 ≤ quantity ≤ 1000). Followed by a single line containing an integer m (1 ≤ m ≤ 1000) — the number of distinct components available in the inventory. The next m lines each contain a string and an integer representing the component name (same format as above) and the available quantity (0 ≤ quantity ≤ 1000). -----Output----- Output \\"Yes\\" if it is possible to construct the product with the given components, otherwise output \\"No\\". -----Examples----- Input 3 steel 4 screws 10 wood 3 4 steel 5 screws 10 wood 2 paint 5 Output No Input 2 plastic 3 rubber 2 2 plastic 3 rubber 2 Output Yes","solution":"def can_construct_product(required_components, available_inventory): for component, required_quantity in required_components.items(): if available_inventory.get(component, 0) < required_quantity: return \\"No\\" return \\"Yes\\" def process_input_and_check_construction(inputs): n = int(inputs[0]) required_components = {} index = 1 for _ in range(n): component, quantity = inputs[index].split() required_components[component] = int(quantity) index += 1 m = int(inputs[index]) available_inventory = {} index += 1 for _ in range(m): component, quantity = inputs[index].split() available_inventory[component] = int(quantity) index += 1 return can_construct_product(required_components, available_inventory)"},{"question":"Write a function that takes a list of integers and an integer target, and returns all unique pairs of integers from the list that sum up to the target. Each pair in the output list should be sorted (smaller number first), and the output list should be sorted in ascending order based on the first element of each pair. If there are no such pairs, return an empty list.","solution":"def find_pairs_with_sum(nums, target): Returns all unique pairs of integers from the list that sum up to the target. Each pair is sorted and the output list is sorted based on the first element of each pair. seen = {} pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen[num] = True return sorted(list(pairs))"},{"question":"You are given an array of integers of size n and a sliding window of size k. You need to find the maximum sum of any contiguous subarray of size k. The sliding window slides from the start of the array to the end, but you can adjust at most m elements in the array to enhance the maximum sum achievable. -----Input----- The first line of the input contains three integers n, k, and m (1 ≤ k ≤ n ≤ 100 000, 0 ≤ m ≤ n) — the size of the array, the size of the sliding window, and the maximum number of adjustments allowed. The second line contains n integers representing the elements of the array. -----Output----- Print the only integer — the maximum sum of any contiguous subarray of size k that can be achieved by modifying no more than m elements. -----Examples----- Input 8 3 2 1 2 3 -4 -5 6 7 8 Output 21 Input 5 2 1 1 -2 3 4 5 Output 9 -----Note----- In the first sample, Vasya can adjust the −4 and −5 to 6 and 7 respectively. Thus, the maximum sum of any sliding window of size 3 can be achieved as [5, 6, 7] with total sum 21. In the second sample, Vasya can adjust -2 to 4, thus achieving the maximum sum of 9 in the window [4, 5].","solution":"def max_sliding_window_sum_with_adjustments(n, k, m, arr): # We start by calculating the maximum sum we can get with no adjustments. max_sum = float(\'-inf\') current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] max_sum = max(max_sum, current_sum) # Try to improve the current sum by adjusting elements. improvements = [] for i in range(n): improvements.append((arr[i], i)) improvements.sort() for i in range(min(m, len(improvements))): current_sum = sum(arr[:k]) max_sum = max(max_sum, current_sum) arr[improvements[i][1]] = max(arr[improvements[i][1]], 0) # Adjust - make it zero or itself, whichever is max for positive sum consideration return max_sum # Example usage: # print(max_sliding_window_sum_with_adjustments(8, 3, 2, [1, 2, 3, -4, -5, 6, 7, 8])) # Output: 21 # print(max_sliding_window_sum_with_adjustments(5, 2, 1, [1, -2, 3, 4, 5])) # Output: 9"},{"question":"Grandma Sandy loves organizing her photo albums. She has n photo albums placed on a shelf, each with a distinct number from 1 to n. Grandma Sandy wants to order her photo albums in a very specific way: she wants them to be sorted such that no photo album numbered i is at position i on the shelf. This type of arrangement is called a \\"derangement\\". Given a number n, help Grandma Sandy find out how many possible derangements of her photo albums exist. As the answer can be quite large, print the answer modulo 1000000007 (10^9 + 7). Input A single line contains a single positive integer n (1 ≤ n ≤ 10^6) — the number of photo albums. Output In a single line, print a single integer — the number of derangements of n photo albums modulo 1000000007. Examples Input 3 Output 2 Input 4 Output 9","solution":"MOD = 1000000007 def count_derangements(n): Returns the number of derangements of n photo albums. if n == 1: return 0 elif n == 2: return 1 derangements = [0] * (n + 1) derangements[1] = 0 derangements[2] = 1 for i in range(3, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) % MOD return derangements[n]"},{"question":"Given a string `message` and a dictionary `word_dict`, your task is to determine if `message` can be segmented into a sequence of one or more dictionary words from `word_dict`. Implement a function `canSegmentMessage(message, word_dict)` that takes: - `message`: A non-empty string containing only lowercase alphabetical characters. - `word_dict`: A set of strings representing the dictionary words. The function should return `True` if the `message` can be segmented into a sequence of one or more dictionary words from `word_dict`, and `False` otherwise. # Example ```python message = \\"applepie\\" word_dict = {\\"apple\\", \\"pie\\"} canSegmentMessage(message, word_dict) # Output: True # Explanation: The message can be segmented as \\"apple pie\\". message = \\"catsandog\\" word_dict = {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"} canSegmentMessage(message, word_dict) # Output: False # Explanation: The message cannot be segmented into dictionary words based on \'word_dict\'. ``` # Notes - The same word can appear in the `word_dict` more than once. - `word_dict` is guaranteed to be non-empty.","solution":"def canSegmentMessage(message, word_dict): Determines if the message can be segmented into a sequence of one or more dictionary words. :param message: str - The message string containing only lowercase alphabetical characters. :param word_dict: set - The set of dictionary words. :return: bool - True if the message can be segmented into dictionary words, otherwise False. n = len(message) dp = [False] * (n + 1) dp[0] = True # Empty string can always be segmented for i in range(1, n + 1): for j in range(i): if dp[j] and message[j:i] in word_dict: dp[i] = True break return dp[n]"},{"question":"You are given an undirected graph with N vertices and M edges. A simple cycle is a cycle with no repeated vertices or edges except the starting/ending vertex. Your task is to determine the number of simple cycles in the graph. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 300 - 1 ≤ u_i, v_i ≤ N -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- Print the number of simple cycles in the graph. -----Sample Input----- 5 6 1 2 2 3 3 4 4 1 2 4 3 5 -----Sample Output----- 3 The three simple cycles are (1-2-4-1), (2-3-4-2), and (3-4-1-2-3).","solution":"def count_simple_cycles(N, M, edges): from itertools import permutations from collections import defaultdict # Function to check if a given permutation forms a simple cycle def is_cycle(perm, edges_set): for i in range(len(perm)): if (perm[i], perm[(i + 1) % len(perm)]) not in edges_set and (perm[(i + 1) % len(perm)], perm[i]) not in edges_set: return False return True # Build edge set for quick lookup edges_set = set((u, v) for u, v in edges) # Adjacency list adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # List to store cycles found simple_cycles = set() # Check all permutation of vertices of length 3 to N for length in range(3, N + 1): for perm in permutations(range(1, N + 1), length): if perm[0] < perm[-1]: # To avoid cycles being counted multiple times # Check if perm is a valid simple cycle if is_cycle(perm, edges_set) and len(set(perm)) == length and perm[0] in adj[perm[-1]]: simple_cycles.add(tuple(sorted(perm))) return len(simple_cycles)"},{"question":"Alice is a computer science student and she loves working with graphs. Recently, she learned about weighted directed graphs and shortest paths. For her latest project, she encountered a problem where she needs to find the shortest path in a weighted directed graph, but with a twist. Given a weighted directed graph with n nodes and m edges, and a damaged node d, Alice needs to find the shortest path from the starting node s to the target node t, such that the path cannot pass through the damaged node d. The graph is represented as follows: - An integer n representing the number of nodes (1 ≤ n ≤ 100,000). - An integer m representing the number of edges (1 ≤ m ≤ 200,000). - An integer d representing the damaged node (1 ≤ d ≤ n). - An integer s representing the starting node (1 ≤ s ≤ n). - An integer t representing the target node (1 ≤ t ≤ n). The following m lines describe the edges of the graph. Each edge is represented by three integers u, v, w, where u and v are the endpoints of the edge, and w is the weight of the edge (1 ≤ u, v ≤ n; 0 ≤ w ≤ 10,000). Your task is to write a program that finds the shortest path from node s to node t without passing through node d. If there\'s no such path, print \\"-1\\" (without quotes). Input The first line contains four integers n, m, d, s and t. Each of the next m lines contains three integers u, v and w, describing an edge. Output Print one line with the length of the shortest path from s to t that does not pass through node d, or \\"-1\\" if no such path exists. Examples Input 6 7 3 1 6 1 2 4 1 3 2 2 3 1 2 4 7 3 4 3 4 5 1 5 6 5 Output 17 Input 4 4 2 1 4 1 2 10 2 3 5 3 4 1 1 3 20 Output 21 Note In the first example, the shortest path from node 1 to node 6 cannot pass through node 3. The path 1 -> 2 -> 4 -> 5 -> 6 has a total cost of 17. In the second example, node 2 is the damaged node. The shortest path from node 1 to node 4 is 1 -> 3 -> 4 with a total cost of 21.","solution":"import heapq def shortest_path_with_damaged_node(n, m, d, s, t, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) def dijkstra(source, target): pq = [(0, source)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[source] = 0 visited = set() while pq: current_dist, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, weight in graph[u]: if v == d: continue new_dist = current_dist + weight if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) return dist[target] if dist[target] != float(\'inf\') else -1 return dijkstra(s, t)"},{"question":"You are given an array of n positive integers and an integer k. Your task is to rearrange the array in such a way that the difference between the maximum and minimum values of every contiguous subarray of length k is minimized. If there are multiple arrangements that produce the same minimum difference, return the lexicographically smallest array. -----Input----- You will be given an integer t (1 <= t <= 20) representing the number of test cases. For each test case, the first line contains the integers n (1 <= n <= 100000) and k (1 <= k <= n). The following line contains n integers representing the elements of the array. Each element of the array is between 1 and 100000 inclusive. -----Output----- For each test case, output the minimized difference and the lexicographically smallest array that achieves this minimized difference. Each test case\'s output should be on a new line. -----Example----- Input: 2 5 2 1 5 3 9 2 4 3 4 1 2 7 Output: 1 [1, 2, 3, 5, 9] 3 [1, 2, 4, 7] Explanation: - In the first test case, the possible subarrays of length 2 in the resulting array [1, 2, 3, 5, 9] are [1, 2], [2, 3], [3, 5], and [5, 9]. The maximum difference in any of these subarrays is 1, which is minimized. - In the second test case, the possible subarrays of length 3 in the resulting array [1, 2, 4, 7] are [1, 2, 4] and [2, 4, 7]. The maximum difference in any of these subarrays is 3, which is minimized.","solution":"def minimized_difference_arrays(t, test_cases): results = [] for case in test_cases: n, k, arr = case arr.sort() # Initialize minimum difference and the best subarray min_diff = float(\'inf\') best_start = 0 # Calculate minimum difference for subarrays for i in range(n - k + 1): current_diff = arr[i + k - 1] - arr[i] if current_diff < min_diff: min_diff = current_diff best_start = i # Get the best array order result_array = arr[best_start:best_start + k] + sorted(arr[:best_start] + arr[best_start + k:]) results.append((min_diff, result_array)) return results"},{"question":"The ancient city\'s underground labyrinth consists of a maze of tunnels that connect various chambers. Archaeologists have been exploring this labyrinth and they use robots to navigate through the maze. A robot starts from a specified chamber and must visit all given chambers in a specific order to collect artifacts. Each chamber is represented as a unique identifier (an integer), and the robot can only travel between directly connected chambers. The robot follows a pre-determined order of chambers, and it may return to previously visited chambers along the way. The robot, however, faces a problem: it can only carry a limited amount of battery power, which is denoted as `B`. Every time it moves from one chamber to another, it consumes 1 unit of battery power. If the robot runs out of battery power before visiting all chambers in the specified order, it can\'t complete its task. Your task is to determine if the robot can visit all specified chambers in order starting from the initial chamber, given its battery constraints. If it can, output \\"Possible\\", otherwise, output \\"Impossible\\". For simplicity, you can assume that the labyrinth does not have any loops (it\'s a tree structure), and there\'s exactly one unique path between any two chambers. The robot can start with full battery power of `B` units, and no more battery can be added. Input Given multiple datasets. Each dataset is in the following format: ``` n m B c1 k c2 c3 ... ck a1 b1 a2 b2 ... am bm ``` The first line represents: - `n`: the number of chambers. - `m`: the number of direct connections between chambers. - `B`: the battery units available. The second line represents the initial chamber `c1` where the robot starts. The third line represents the sequence of chambers `c2, c3, ..., ck` that the robot needs to visit in order. The next `m` lines represent the direct connections between chambers. Each connection is provided as a pair of integers `ai bi`, where `ai` and `bi` are connected. The input ends with a dataset where `n`, `m`, and `B` are all zero. Output For each dataset, print \\"Possible\\" if the robot can visit all the chambers in the specified order starting from the initial chamber without running out of battery power. Otherwise, print \\"Impossible\\". Example Input ``` 5 4 10 1 3 2 5 4 1 2 3 1 5 3 4 5 0 0 0 ``` Output ``` Possible ```","solution":"def is_possible(n, m, B, c1, targets, connections): from collections import defaultdict, deque graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) if n == 0: return \\"Impossible\\" sequence = [c1] + targets def bfs_distance(start, end): if start == end: return 0 queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: node, distance = queue.popleft() for neighbor in graph[node]: if neighbor == end: return distance + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return float(\'inf\') total_distance = 0 for i in range(len(sequence) - 1): distance = bfs_distance(sequence[i], sequence[i + 1]) total_distance += distance if total_distance > B: return \\"Impossible\\" return \\"Possible\\" def labyrinth_challenge(datasets): result = [] for dataset in datasets: n, m, B = dataset[\'n\'], dataset[\'m\'], dataset[\'B\'] c1 = dataset[\'c1\'] targets = dataset[\'targets\'] connections = dataset[\'connections\'] result.append(is_possible(n, m, B, c1, targets, connections)) return result"},{"question":"Given an array of integers, you need to determine if you can partition the array into two non-empty subarrays such that the sum of the elements in the left subarray is equal to the sum of the elements in the right subarray. The partitioning point can be any index in the array except the first and the last index. -----Input----- The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^4) — the elements of the array. -----Output----- Print \\"YES\\" if it\'s possible to partition the array this way, and \\"NO\\" otherwise. -----Example----- Input 5 1 2 3 4 5 Output NO Input 4 2 4 2 4 Output YES Explanation: In the second example, you can partition the array after the second element: [2, 4] and [2, 4]. Both subarrays have the same sum, which is 6. Thus, the output is \\"YES\\".","solution":"def can_partition_array(n, arr): total_sum = sum(arr) left_sum = 0 for i in range(n - 1): # We don\'t consider the last element as a partition point left_sum += arr[i] if left_sum == total_sum - left_sum: return \\"YES\\" return \\"NO\\""},{"question":"Given a string consisting of lowercase and uppercase characters, return the count of distinct substrings that start and end with the same character. Example 1: Input: str = \\"abcab\\" Output: 7 Explanation: The distinct substrings are: \\"a\\", \\"abca\\", \\"b\\", \\"bcab\\", \\"c\\", \\"a\\", \\"b\\". Example 2: Input: str = \\"aaa\\" Output: 6 Explanation: The distinct substrings are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctSubstrings() which takes a single string str as a parameter and returns the count of distinct substrings that start and end with the same character. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |str| ≤ 1000 The input string consists of lowercase and uppercase characters.","solution":"def countDistinctSubstrings(s: str) -> int: Returns the count of distinct substrings that start and end with the same character. n = len(s) substr_count = 0 # Check all possible substrings for i in range(n): for j in range(i, n): if s[i] == s[j]: substr_count += 1 return substr_count"},{"question":"Alex is very interested in patterns and sequences. One of his recent discoveries is the sequence of triangular numbers. The nth triangular number is defined as the sum of the first n natural numbers. For example, the 5th triangular number is 1+2+3+4+5=15. Alex wants to find out which triangular number is the closest to a given integer N. Write a program that, for each test case, gets the integer N, and finds and returns which triangular number is the closest to N. If two triangular numbers are equally close, return the smaller one. Note: The first triangular number is 1, the second is 3, the third is 6, and so on. INPUT The first line contains the number of test cases 1 <= t <= 100. Each of the next t lines contains one integer N, 1 <= N <= 10^9. OUTPUT For each test case, print one line containing the closest triangular number to the given integer N. SAMPLE INPUT 2 10 20 SAMPLE OUTPUT 10 21 Explanation For the first test case: The closest triangular numbers to 10 are 10 itself and 15. Since 10 is closer to 10 than 15, the output is 10. For the second test case: The closest triangular numbers to 20 are 15 and 21. Since 21 is closer to 20 than 15, and if two are equally close, return the smaller one, the output is 21.","solution":"def closest_triangular_number(N): k = int(((8 * N + 1)**0.5 - 1) / 2) lower_triangular = k * (k + 1) // 2 higher_triangular = (k + 1) * (k + 2) // 2 if abs(lower_triangular - N) <= abs(higher_triangular - N): return lower_triangular else: return higher_triangular def find_closest_triangular_numbers(test_cases): results = [] for N in test_cases: results.append(closest_triangular_number(N)) return results # Sample usage t = 2 test_cases = [10, 20] results = find_closest_triangular_numbers(test_cases) for result in results: print(result)"},{"question":"Given a sequence of numbers, your task is to determine if there exists a contiguous subsequence (a subsequence is a sequence derived from another sequence by deleting zero or more elements, from the original sequence, without changing the order of the remaining elements) whose sum is an odd number. Input The input consists of: - A single integer, n (1 ≤ n ≤ 10^5), representing the number of elements in the sequence. - A sequence of n integers, each of absolute value not greater than 10^4. Output Print \\"YES\\" (without quotes) if there exists a contiguous subsequence whose sum is an odd number. Otherwise, print \\"NO\\" (without quotes). Examples Input 5 1 2 3 4 5 Output YES Input 4 2 4 6 8 Output NO Explanation: In the first example, there are multiple ways to form an odd sum subsequence. For instance, the subsequence [1] has a sum of 1, which is odd. In the second example, there is no way to form an odd sum with the given subsequences, all numbers being even.","solution":"def has_odd_sum_subsequence(n, sequence): Determines if there exists a contiguous subsequence whose sum is an odd number. :param n: int - the number of elements in the sequence :param sequence: list of int - the sequence of numbers :return: str - \\"YES\\" if such a subsequence exists, \\"NO\\" otherwise # Check if any odd number exists in the sequence for num in sequence: if num % 2 != 0: return \\"YES\\" # If no odd number exists, return \\"NO\\" return \\"NO\\""},{"question":"Implement a function to determine if a given string can be segmented into a space-separated sequence of one or more dictionary words. ------ Input ------ The function first receives a dictionary of words given as a list of strings `dict`. It then receives space-separated test cases, each consisting of a single string. ------ Output ------ The function should output \\"YES\\" if the string can be segmented into dictionary words, and \\"NO\\" otherwise. ------ Constraints ------ 1. String length <= 1000 2. Dictionary length <= 10000 3. Each word in the dictionary has a maximum length of 20. ------ Subtasks ------ Subtask #1 (100 points): original constraints ------ Example ------ ```python dict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] test_cases = [\\"applepenapple\\", \\"pineapplepenapple\\", \\"catsandog\\"] ``` For the input above, the function should output: ``` YES YES NO ``` Explanation: - For the first test case, the string \\"applepenapple\\" can be segmented as \\"apple pen apple\\", which are all dictionary words. - For the second test case, the string \\"pineapplepenapple\\" can be segmented as \\"pineapple pen apple\\" which are all dictionary words. - For the third test case, \\"catsandog\\" cannot be segmented into dictionary words. \\"cat\\", \\"sand\\", \\"and\\", \\"dog\\" are in the dictionary, but no combination of these forms the input string.","solution":"def can_segment_string(dict, test_cases): word_set = set(dict) def can_segment(s): dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[-1] else \\"NO\\" results = [] for test in test_cases: results.append(can_segment(test)) return results"},{"question":"Find Itinerary from Tickets You are given a list of flight tickets represented by pairs of departure and arrival airports [from, to]. Write a function to reconstruct the itinerary in order. All of the tickets belong to a man who departs from \\"JFK\\". Hence, the itinerary must begin with \\"JFK\\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. The requirement is to use all the given tickets and only once. **Example:** **Input:** [[\'MUC\', \'LHR\'], [\'JFK\', \'MUC\'], [\'SFO\', \'SJC\'], [\'LHR\', \'SFO\']] **Output:** [\'JFK\', \'MUC\', \'LHR\', \'SFO\', \'SJC\'] **Input:** [[\'JFK\', \'SFO\'], [\'JFK\', \'ATL\'], [\'SFO\', \'ATL\'], [\'ATL\', \'JFK\'], [\'ATL\', \'SFO\']] **Output:** [\'JFK\', \'ATL\', \'JFK\', \'SFO\', \'ATL\', \'SFO\'] **Note:** 1. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. 2. All airports are represented by three capital letters (IATA code). 3. The given graph is guaranteed to be connected.","solution":"from collections import defaultdict, deque def find_itinerary(tickets): Finds the itinerary using all the given tickets exactly once and starting at \'JFK\'. Returns the itinerary in lexical order if multiple valid itineraries exist. graph = defaultdict(deque) # Sort the tickets and create the graph for start, end in sorted(tickets): graph[start].append(end) route, stack = [], [\'JFK\'] while stack: while graph[stack[-1]]: stack.append(graph[stack[-1]].popleft()) route.append(stack.pop()) return route[::-1]"},{"question":"You are given an integer array `arr` that contains both positive and negative integers. Your task is to identify the maximum possible sum of any subarray of the given array. A subarray is a contiguous part of an array. -----Input Format----- - The first line contains an integer `n`, the number of elements in the array `arr`. - The second line contains `n` space-separated integers which represent the elements of the array `arr`. -----Output Format----- - Print a single integer representing the maximum possible sum of any subarray of the given array. -----Constraints----- - 1 leq n leq 10^5 - -10^4 leq arr[i] leq 10^4 -----Sample Input 1----- 8 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output 1----- 6 -----Sample Input 2----- 5 -1 -2 -3 -4 -5 -----Sample Output 2----- -1 -----EXPLANATION:----- Sample Testcase 1: The subarray with the maximum sum is [4, -1, 2, 1], and the sum is 6. Sample Testcase 2: The best we can do with all negative numbers is to pick the least negative number, hence the maximum sum of any subarray is -1.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray using Kadane\'s algorithm. max_so_far = -float(\'inf\') max_ending_here = 0 for num in arr: max_ending_here += num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"A software company has developed a new compression algorithm. The algorithm compresses an array of integers by replacing each element of the array with the sum of its neighboring elements, including itself. Specifically, for each element arr[i], it will be replaced by arr[i-1] + arr[i] + arr[i+1]. The first and the last elements of the array are special cases: the first element arr[0] is replaced by arr[0] + arr[1], and the last element arr[N-1] is replaced by arr[N-2] + arr[N-1]. Given an array of integers, apply the compression algorithm exactly once and return the resulting array. Input: First line contains a single integer N, denoting the number of elements in the array. Next line contains N space separated integers denoting the elements of the array. Output: Print the new array after applying the compression algorithm exactly once. Constraints: 1 ≤ N ≤ 100000 1 ≤ Elements ≤ 1000 SAMPLE INPUT: 5 1 2 3 4 5 SAMPLE OUTPUT: 3 6 9 12 9 Explanation: - The first element becomes 1+2 = 3. - The second element becomes 1+2+3 = 6. - The third element becomes 2+3+4 = 9. - The fourth element becomes 3+4+5 = 12. - The fifth element becomes 4+5 = 9.","solution":"def compress_array(N, arr): if N == 1: return arr # No compression possible with single element new_arr = [0] * N new_arr[0] = arr[0] + arr[1] new_arr[N-1] = arr[N-2] + arr[N-1] for i in range(1, N-1): new_arr[i] = arr[i-1] + arr[i] + arr[i+1] return new_arr"},{"question":"Kate is putting together a special gift for her friend. She has a collection of M gift boxes each with a certain value of goodies. She wants to select some of these boxes such that their combined value matches exactly her desired value V. However, from the selection of these boxes, there must be no two adjacent boxes as per the given sequence (i.e., she can\'t pick both boxes at index i and i+1). You are given: - M: the number of gift boxes. - V: the desired combined value of selected boxes. - A[]: an array of integers representing the value of goodies in M gift boxes. Determine if it\'s possible for Kate to pick gift boxes such that their total value is exactly V without selecting two adjacent boxes. # Example 1: Input: M = 5, V = 9 A[] = [3, 2, 5, 10, 7] Output: Yes Explanation: Kate can select gift boxes with values 3 and 5 and 1 (at index 0, 2, 4), which sum up to 9. # Example 2: Input: M = 3, V = 10 A[] = [1, 2, 3] Output: No Explanation: There\'s no way to select boxes such that the sum is 10 without picking adjacent boxes. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `canPickGiftBoxes()` which takes integers M, V, and an array A[] as input parameters and returns \\"Yes\\" if it\'s possible to select such boxes, otherwise returns \\"No\\". # Expected Time Complexity: O(M*V) # Expected Auxiliary Space: O(M*V) # Constraints: 1 ≤ M ≤ 50 0 ≤ V ≤ 5000 1 ≤ value of each box in A ≤ 100","solution":"def canPickGiftBoxes(M, V, A): Determines if it\'s possible to select gift boxes such that their total value matches exactly V without selecting two adjacent boxes. # Initialize DP table with False dp = [[False] * (V + 1) for _ in range(M + 1)] # Base case: It\'s possible to achieve a value of 0 by selecting no boxes for i in range(M + 1): dp[i][0] = True # Fill the DP table for i in range(1, M + 1): for j in range(1, V + 1): # Option 1: Don\'t pick the i-th box dp[i][j] = dp[i-1][j] # Option 2: Pick the i-th box if it doesn\'t we exceed the required value and doesn\'t cause adjacent selection if j >= A[i-1] and (i == 1 or dp[i-2][j - A[i-1]]): dp[i][j] = dp[i][j] or dp[i-2][j - A[i-1]] # The answer is found in dp[M][V] return \\"Yes\\" if dp[M][V] else \\"No\\""},{"question":"Maria recently acquired a unique lockbox that can only be unlocked by solving a programming puzzle. The lockbox contains an array of integers. Your task is to determine if there exists a non-empty subarray (i.e. a contiguous subsequence) whose sum is zero. If such a subarray exists, output the starting and ending indices of the first occurring subarray (1-based index), otherwise output \\"NO\\". -----Input----- - The first line contains a single integer T, representing the number of test cases. - The first line of each test case contains a single integer N (the length of the array). - The second line of each test case contains N space-separated integers representing the array elements. -----Output----- For each test case, if there is a subarray with sum zero, output two integers representing the (1-based) starting and ending indices of the subarray. If there is no such subarray, output \\"NO\\". -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^9 le text{Array elements} le 10^9 -----Example Input----- 2 5 1 2 -3 4 5 4 1 2 3 4 -----Example Output----- 1 3 NO -----Explanation----- Example case 1: The sum of the subarray from index 1 to 3 (1, 2, -3) is zero. Example case 2: No subarray with sum zero exists.","solution":"def find_zero_sum_subarray(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] prefix_sum = {} current_sum = 0 for index in range(n): current_sum += arr[index] if current_sum == 0: results.append((1, index + 1)) break if current_sum in prefix_sum: results.append((prefix_sum[current_sum] + 2, index + 1)) break prefix_sum[current_sum] = index else: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((N, arr)) index += 2 return T, test_cases"},{"question":"You are given a string consisting of lowercase English letters. You need to find the length of the longest subsequence that can be generated by removing some (possibly none) of the characters from the string such that the subsequence forms a palindrome. CONSTRAINTS 1 ≤ length of string ≤ 10^5 INPUT The first and only line contains a single string s. OUTPUT Print one integer, the length of the longest palindromic subsequence. SAMPLE INPUT bbabcbcab SAMPLE OUTPUT 7 Explanation One of the longest palindromic subsequences that can be formed is \\"babcbab\\".","solution":"def longest_palindromic_subsequence(s): This function returns the length of the longest palindromic subsequence in the given string s. n = len(s) if n == 0: return 0 # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Strings of length 1 are palindromic of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for cl in range(2, n + 1): # cl is the length of the substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of LPS is the last entry in the table return dp[0][n - 1]"},{"question":"Alice has a list of N integers and wants to calculate the minimum cost to make all the elements of the list equal. The cost of making two elements equal is defined as the absolute difference between the elements. Alice can pick any two elements of the list and pay the cost to make one of them equal to the other. If there are multiple ways to minimize the cost, any will be acceptable. -----Input----- The first line contains T, the number of test cases. Each test case contains two lines: - The first line contains a single integer N denoting the number of integers in the list. - The second line contains N integers separated by spaces, representing the list of integers. -----Output----- For each test case, output a single integer - the minimum cost required to make all the elements equal. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ List elements ≤ 109 -----Example----- Input: 2 3 4 8 6 4 10 10 10 10 Output: 4 0 -----Explanation----- Test case 1: One possible way is to: - Choose 4 and 6, cost is 2, making the list (4, 6, 6) - Choose 6 and 8, cost is 2, making the list (6, 6, 6) The total cost is 2 + 2 = 4, which is minimum. Test case 2: All elements are already equal, so the cost is 0.","solution":"def min_cost_to_make_equal(num_cases, cases): Returns a list of minimum costs required to make all the elements of each list equal. Arguments: num_cases : int - number of test cases cases : list of tuples - each tuple contains a list of integers Return: list of int - each integer is the minimum cost for the corresponding test case def calculate_cost(nums): # The most optimal way of making all elements equal is making them equal to the median. sorted_nums = sorted(nums) median = sorted_nums[len(nums) // 2] return sum(abs(x - median) for x in nums) results = [] for lst in cases: results.append(calculate_cost(lst)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) lst = list(map(int, input_lines[index + 1].split())) cases.append(lst) index += 2 return T, cases def generate_output(costs): return \'n\'.join(map(str, costs))"},{"question":"You are given two strings ( a ) and ( b ) consisting of lowercase English letters. You need to determine the minimum number of operations required to make the strings equal. In one operation, you can choose any character in the string ( a ) and replace it with any other lowercase English letter. -----Input----- The first line contains a single integer ( T ) (( 1 le T le 100 )) — the number of queries. Next ( 2T ) lines contain a description of queries: two lines per query. The first line contains the string ( a ) (1 ≤ |a| ≤ 10^5). The second line contains the string ( b ) (1 ≤ |b| ≤ 10^5). It\'s guaranteed that the total length of all strings in all queries does not exceed 10^5. -----Output----- Print ( T ) integers (one per query). For each query, print the minimum number of operations required to make the strings ( a ) and ( b ) equal. -----Example----- Input 3 abc bcd aaa bbb abcdef ghijkl Output 3 3 6 -----Note----- In the first query, you can change each character of ( a ) to match the characters in ( b ): - Change \'a\' to \'b\' ((1 ) operation) - Change \'b\' to \'c\' ((1 ) operation) - Change \'c\' to \'d\' ((1 ) operation) In the second query, you need 3 operations to change each \'a\' in ( a ) to \'b\'. In the third query, you need 6 operations to change each character in ( a ) to match the respective characters in ( b ).","solution":"def min_operations_to_equal_strings(a, b): Given two strings a and b of the same length, this function calculates the minimum number of operations required to make the strings equal by replacing any character in the string `a` with any other lowercase English letter. # Since both strings have the same length, we simply count the different characters return sum(1 for i in range(len(a)) if a[i] != b[i]) # Function to handle multiple queries def process_queries(T, queries): results = [] for i in range(T): a = queries[2 * i] b = queries[2 * i + 1] results.append(min_operations_to_equal_strings(a, b)) return results"},{"question":"You are given an array of integers representing the strengths of monsters in a dungeon. Each monster has a unique strength value. Your objective is to defeat all the monsters while following these rules: 1. You can only defeat one monster at a time. 2. The strength of the first monster you defeat must be less than the strength of the second monster, and so on. Return the maximum number of monsters you can defeat in one pass through the array. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of monsters. The second line contains n integers, each representing the strength of a monster. The strengths are unique and given in arbitrary order. -----Output----- Print the maximum number of monsters you can defeat in one pass. -----Examples----- Input 6 4 2 5 1 3 6 Output 6 Input 4 7 10 2 8 Output 3 -----Note----- In the first sample, you can defeat monsters in the following order of their strengths: 1, 2, 3, 4, 5, 6. In the second sample, one way to achieve the maximum is to defeat monsters in this order of strengths: 2, 7, 8, or 2, 8, 10.","solution":"def max_monsters_defeated(n, strengths): Returns the maximum number of monsters that can be defeated in one pass. sorted_strengths = sorted(strengths) return len(sorted_strengths)"},{"question":"A wildlife photographer is organizing a set of photos that were taken at different timestamps throughout the day. To present the photos in the chronological order of the animal sightings, they wanted to sort the photos by the exact time they were taken. Each photo has a timestamp in the format \\"HH:MM:SS\\", where \\"HH\\" represents the hours in 24-hour format, \\"MM\\" is the minutes, and \\"SS\\" is the seconds. Write a program that will take a list of these timestamps and sort them in ascending order. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of timestamps. The next n lines contain the timestamps, one timestamp per line in the format \\"HH:MM:SS\\". -----Output----- Print the sorted list of timestamps in ascending order, each timestamp on a new line. -----Examples----- Input 5 13:45:30 09:15:45 23:59:59 00:00:01 13:45:31 Output 00:00:01 09:15:45 13:45:30 13:45:31 23:59:59","solution":"def sort_timestamps(timestamps): Accepts a list of timestamps in \\"HH:MM:SS\\" format and returns the list sorted in ascending order. return sorted(timestamps) # Sample usage if __name__ == \\"__main__\\": n = int(input()) timestamps = [input().strip() for _ in range(n)] sorted_timestamps = sort_timestamps(timestamps) for ts in sorted_timestamps: print(ts)"},{"question":"You are given an array of n integers. Your task is to find the maximum possible sum of a subarray of the given array such that the sum is less than or equal to a given integer S. A subarray is a contiguous part of an array that can be of any length from 1 to n. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and S (1 le n le 10^5, 1 le S le 10^9). The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, print the answer: the maximum possible sum of a subarray that is less than or equal to S. -----Example----- Input 3 5 10 1 2 3 4 5 4 5 2 -1 2 3 6 15 1 -2 3 10 -4 7 Output 10 4 15 -----Note----- In the first test case of the example, the subarray [1, 2, 3, 4] has the sum 10 which is the maximum possible subarray sum less than or equal to 10. In the second test case of the example, the subarray [2, -1, 2, 1] has the sum 4 which is the maximum possible subarray sum less than or equal to 5. In the third test case of the example, the subarray [1, -2, 3, 10, -4, 7] has the sum 15 which is the maximum possible subarray sum less than or equal to 15.","solution":"def max_subarray_sum_less_equal(t, test_cases): results = [] for n, S, arr in test_cases: current_sum = 0 max_sum = float(\'-inf\') start = 0 for end in range(n): current_sum += arr[end] while current_sum > S and start <= end: current_sum -= arr[start] start += 1 if current_sum <= S: max_sum = max(max_sum, current_sum) results.append(max_sum if max_sum != float(\'-inf\') else 0) return results"},{"question":"In a distant land called Primenation, the residents love prime numbers. They consider a number to be \\"prime-friend\\" if the sum of its digits is a prime number. Given a list of integers, determine how many of them are prime-friend. Input The input will consist of the first line containing the number of test cases \'t\' followed by t lines of test cases. Each line contains an integer n. Output For each test case, print the count of prime-friend numbers. Example Input: 3 29 31 42 57 11 15 13 23 25 100 101 102 103 Output: 2 4 1 Explanation: - For the first test case, the numbers with prime sums are 29 (2+9=11), 31 (3+1=4), 42 (4+2=6), 57 (5+7=12). Only 29 has a prime sum (11). - For the second test case, the numbers with prime sums are 11 (1+1=2), 15 (1+5=6), 13 (1+3=4), 23 (2+3=5), 25 (2+5=7). Prime sums are 2 (for 11), 5 (for 23), and 7 (for 25). Therefore, the count is 3. - For the third test case, the numbers with prime sums are 100 (1+0+0=1), 101 (1+0+1=2), 102 (1+0+2=3), 103 (1+0+3=4). Only 101 has a prime sum (2).","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def digit_sum(n): Helper function to calculate the sum of digits of a number. return sum(int(digit) for digit in str(n)) def prime_friend_count(numbers): Count how many numbers are prime-friend (sum of digits is prime). return sum(1 for number in numbers if is_prime(digit_sum(number))) def count_prime_friend_numbers(test_cases): For each test case, count how many numbers are prime-friend. results = [] for numbers in test_cases: results.append(prime_friend_count(numbers)) return results"},{"question":"You are given an array of N integers. The array can contain duplicate elements. You need to find the smallest window (a contiguous subarray) in the array that contains all the distinct elements of the array. Input: The first line will contain an integer \'T\' (number of test cases). For each test case: - The first line will contain an integer \'N\' (number of elements in the array). - The next line will contain N integers (elements of the array). Output: For each test case, output the length of the smallest window that contains all distinct elements of the given array. Constraints: T ≤ 10 1 ≤ N ≤ 100000 1 ≤ array[i] ≤ 100000 Problem Setter: Jane Doe SAMPLE INPUT 2 7 1 2 2 3 2 1 4 4 1 2 2 2 SAMPLE OUTPUT 4 2","solution":"def smallest_window_with_all_distinct_elements(arr): Returns the length of the smallest window (contiguous subarray) in the array that contains all the distinct elements of the array. n = len(arr) distinct_elements = set(arr) num_distinct = len(distinct_elements) left = 0 min_length = float(\'inf\') current_window = {} unique_in_window = 0 for right in range(n): if arr[right] in current_window: current_window[arr[right]] += 1 else: current_window[arr[right]] = 1 unique_in_window += 1 while unique_in_window == num_distinct: min_length = min(min_length, right - left + 1) current_window[arr[left]] -= 1 if current_window[arr[left]] == 0: unique_in_window -= 1 del current_window[arr[left]] left += 1 return min_length def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(smallest_window_with_all_distinct_elements(arr)) return results"},{"question":"You are a highly skilled adventurer in the magical land of Algora, and you have been tasked with saving the kingdom from an imminent threat. You are given a powerful artifact, the Teleportation Stone, that allows you to move between specified landmarks in the kingdom. The kingdom of Algora can be represented as a graph with n landmarks and m bidirectional magical portals between them. Each portal connects two distinct landmarks and can be traversed in both directions. Each landmark has a unique positive integer identifier from 1 to n. Using the Teleportation Stone, you can instantly move from one landmark to another, but only if there is a direct portal connecting them. In addition to the portals, there is a sequence of targets you must visit in order to save the kingdom. The sequence contains k landmarks, where the first landmark is your starting point and the last landmark is the final destination. The sequence must be followed exactly as given. Your mission is to determine whether it is possible to visit all the landmarks in the given sequence using the portals. If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains two integers n and m (2 le n le 10^5, 1 le m le 10^5) — the number of landmarks and the number of portals in the kingdom, respectively. Then m lines follow, each describing a portal. Each line contains two integers u and v (1 le u, v le n, u ne v) denoting a portal that connects landmark u and landmark v. All portals in the kingdom are bidirectional and unique. The following line contains one integer k (2 le k le n) — the number of landmarks in the sequence you must visit. The last line contains k integers p_1, p_2, ..., p_k (1 le p_i le n) — the sequence of landmarks you need to visit in the exact given order. -----Output----- Print \\"YES\\" if it is possible to visit all the landmarks in the given sequence using the portals, otherwise print \\"NO\\". -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 5 1 2 3 4 5 Output YES Input 5 3 1 2 2 3 3 4 5 1 2 3 5 4 Output NO Input 6 7 1 2 2 3 3 4 4 5 5 6 1 3 3 6 4 1 3 6 5 Output YES","solution":"def can_visit_all_landmarks(n, m, portals, k, sequence): from collections import defaultdict, deque # Create an adjacency list for the graph adj_list = defaultdict(list) for u, v in portals: adj_list[u].append(v) adj_list[v].append(u) # Function to perform BFS/DFS to find if there\'s a path between two nodes def bfs(start, end): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) for neighbour in adj_list[node]: if neighbour not in visited: queue.append(neighbour) return False # Check the sequence pairwise for i in range(k - 1): if not bfs(sequence[i], sequence[i + 1]): return \\"NO\\" return \\"YES\\""},{"question":"Alex is a budding programmer who loves working with strings. However, he recently encountered a challenge that he needs your help with. The problem involves Alex\'s favorite topic: Palindromes. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Your task is to determine whether an input string is a palindrome or not. But there\'s a twist: you have to do this without using extra space for another copy of the input string. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of alphanumeric characters and/or spaces. Output: For each test case, output \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Note: The comparison should ignore spaces and be case-insensitive. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of S ≤ 1000 SAMPLE INPUT 3 A man a plan a canal Panama Race Car hello world SAMPLE OUTPUT YES YES NO Explanation In the first case \\"A man a plan a canal Panama\\" becomes \\"amanaplanacanalpanama\\" when spaces are ignored and characters are converted to lowercase, which is a palindrome. In the second case \\"Race Car\\" becomes \\"racecar\\" when spaces are ignored and characters are converted to lowercase, which is also a palindrome. In the third case \\"hello world\\" becomes \\"helloworld\\" when spaces are ignored and characters are converted to lowercase, which is not a palindrome.","solution":"def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces and case. # Remove spaces and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is a palindrome return cleaned == cleaned[::-1] def process_test_cases(test_cases): results = [] for s in test_cases: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, determine whether the list can be sorted into non-decreasing order by performing the following operation zero or more times: * Select a contiguous subarray and reverse it. Constraints * 1 ≤ length of list ≤ 10^5 * -10^9 ≤ list elements ≤ 10^9 Input The input is given in the following format: n a1 a2 ... an Where n is the length of the list and ai represents the elements of the list. Output Print `YES` if the list can be sorted into non-decreasing order by reversing any number of contiguous subarrays. Otherwise, print `NO`. Examples Input 5 1 3 2 4 5 Output YES Input 4 4 3 2 1 Output YES Input 3 3 1 2 Output NO","solution":"def can_sort_by_reversing_subarray(n, arr): Determines if the array can be sorted into non-decreasing order by reversing any number of contiguous subarrays. Parameters: n (int): The length of the array arr (List[int]): The array of integers Returns: str: \'YES\' if the array can be sorted as described, otherwise \'NO\' # Find the first and last place where the array is out of order first, last = -1, -1 for i in range(n - 1): if arr[i] > arr[i + 1]: if first == -1: first = i last = i + 1 # If no such subarray is found, the array is already sorted if first == -1: return \'YES\' # Reverse the subarray and check if the whole array becomes sorted reversed_subarray = arr[:first] + arr[first:last+1][::-1] + arr[last+1:] if reversed_subarray == sorted(arr): return \'YES\' else: return \'NO\'"},{"question":"Given a linked list, determine if it has a cycle in it. Example: Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the second node. Follow up: Could you solve it using O(1) (i.e., constant) memory?","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head): Determine if a linked list has a cycle using Floyd\'s Tortoise and Hare algorithm. :param head: ListNode, the head of the linked list :return: bool, whether the linked list contains a cycle if not head: return False slow = head fast = head.next while slow != fast: if fast is None or fast.next is None: return False slow = slow.next fast = fast.next.next return True"},{"question":"Given a series of transactions involving various accounts, it\'s required to generate an overall statement which indicates the balance of each account at the end of the given transactions. Each transaction is represented as a tuple: (\'account_id\', \'transaction_type\', amount) Where: - \'account_id\' is a string representing the unique identifier of the account. - \'transaction_type\' is either \'deposit\' or \'withdraw\'. - amount is an integer representing the amount of the transaction. Write a function called `generateStatement` that takes a list of transactions as input and returns a dictionary where each key is an \'account_id\' and each value is the end balance of that account after all transactions. For example, given the list of transactions: [ (\'A123\', \'deposit\', 100), (\'B456\', \'withdraw\', 50), (\'A123\', \'withdraw\', 40), (\'A123\', \'deposit\', 300), (\'B456\', \'deposit\', 200) ] The function should return: { \'A123\': 360, \'B456\': 150 } Assume all withdrawals will always be valid (i.e., there will be enough balance to support the withdrawal).","solution":"def generateStatement(transactions): Generate the overall statement indicating the balance of each account after the given list of transactions. Parameters: - transactions (list of tuples): List of transactions where each transaction is represented as a tuple (account_id, transaction_type, amount) Returns: - dict: Dictionary where each key is an \'account_id\' and each value is the end balance of that account after all transactions. account_balances = {} for account_id, transaction_type, amount in transactions: if account_id not in account_balances: account_balances[account_id] = 0 if transaction_type == \'deposit\': account_balances[account_id] += amount elif transaction_type == \'withdraw\': account_balances[account_id] -= amount return account_balances"},{"question":"You are given a list of integers. Your task is to find the smallest positive integer that is missing from the list. The list can contain duplicates and negative numbers. Example 1: Input: nums = [3, 4, -1, 1] Output: 2 Example 2: Input: nums = [1, 2, 0] Output: 3 Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Constraints: - The length of the list will be between 1 and 10^5. - Each element in the list will be between -10^6 and 10^6.","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is missing from the list. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Implement a function that takes a positive integer `n` and outputs the `n`-th Fibonacci number. The function should be optimized using dynamic programming to avoid the exponential time complexity of the naive recursive solution. The Fibonacci sequence is defined as follows: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n-1) + F(n-2)` for `n > 1` # Example: Input: `n = 5` Output: `5` Explanation: The Fibonacci sequence up to the 5th term is 0, 1, 1, 2, 3, 5. Therefore, the 5th Fibonacci number is 5. Input: `n = 10` Output: `55` Explanation: The Fibonacci sequence up to the 10th term is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Therefore, the 10th Fibonacci number is 55. Input: `n = 15` Output: `610` Explanation: The Fibonacci sequence up to the 15th term is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610. Therefore, the 15th Fibonacci number is 610. The function should handle large values of `n` efficiently.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Ana is organizing a multi-stage server maintenance process for her company. Each server has its own starting time, maintenance time, and recovery time. The maintenance process must be scheduled such that no two servers are on maintenance at the same time, but they can start their recovery process simultaneously. Ana aims to determine the minimum total time required to complete the maintenance of all servers, including their recovery times. Given a list of servers with their respective starting time, maintenance time, and recovery time, calculate the earliest completion time for the last server\'s recovery process. Input Format First line contains the integer T, the number of test cases. Each test case consists of an integer N, the number of servers. Next N lines each contain three integers: si, mi, ri representing the start time, maintenance time, and recovery time of the i-th server respectively. Output Format For each test case, print the minimum total time required to complete the maintenance and recovery of all servers. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 1000 0 ≤ si, mi, ri ≤ 10^9 Note: Each server\'s maintenance can only start at or after its start time si and no two servers can have overlapping maintenance periods. However, their recovery periods can overlap and start immediately after their maintenance ends. SAMPLE INPUT 2 2 0 3 2 5 4 1 3 2 6 3 1 5 2 4 2 3 SAMPLE OUTPUT 9 11 Explanation In the first test case: - The first server starts at time 0, takes 3 units of time for maintenance, and then 2 units of time for recovery. It completes at time 5. - The second server starts at time 5 and takes 4 units of time for maintenance and 1 unit of time for recovery, completing at time 10. The maximum time taken is 10. In the second test case: - The optimal schedule is: - Start the second server\'s maintenance at time 1, finish at time 6, and complete recovery at time 8. - Start the first server\'s maintenance at time 6, finish at time 12, and complete recovery at time 15. - Start the third server\'s maintenance at time 12, finish at time 14, and complete recovery at time 17. The maximum time taken is 17.","solution":"def minimum_total_time_all_cases(test_cases): results = [] for servers in test_cases: servers.sort(key=lambda x: x[0]) current_time = 0 max_recovery_time = 0 for start, maintenance, recovery in servers: current_time = max(current_time, start) # Ensure we account for the server\'s start time current_time += maintenance # Add the maintenance time max_recovery_time = max(max_recovery_time, current_time + recovery) results.append(max_recovery_time) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 servers = [] for _ in range(N): si, mi, ri = map(int, lines[index].split()) index += 1 servers.append((si, mi, ri)) test_cases.append(servers) return test_cases def solve(input_text): test_cases = parse_input(input_text) results = minimum_total_time_all_cases(test_cases) return results"},{"question":"The Adventure Company arranges various adventure trips and collects feedback from participants on a scale of 1 to 10. Based on the feedback rating, they classify the trip experience into categories: - POOR, if the rating is less than 4. - AVERAGE, if the rating is between 4 and 6 inclusive. - GOOD, if the rating is between 7 and 9 inclusive. - EXCELLENT, if the rating is 10. Given the feedback ratings from multiple participants for a trip, determine the categorization for each rating. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of feedback ratings. - Each feedback rating is provided as a single integer R on a new line. ------ Output Format ------ For each feedback rating, output on a new line, whether the experience is POOR, AVERAGE, GOOD, or EXCELLENT. You may print each character in lowercase or uppercase. For example, POOR, poor, Poor, and poOr are all identical. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ R ≤ 10 ----- Sample Input 1 ------ 5 1 5 7 10 3 ----- Sample Output 1 ------ POOR AVERAGE GOOD EXCELLENT POOR ----- Explanation 1 ------ Test case 1: The feedback rating is less than 4. Thus, the experience is POOR. Test case 2: The feedback rating is between 4 and 6 inclusive. Thus, the experience is AVERAGE. Test case 3: The feedback rating is between 7 and 9 inclusive. Thus, the experience is GOOD. Test case 4: The feedback rating is 10. Thus, the experience is EXCELLENT. Test case 5: The feedback rating is less than 4. Thus, the experience is POOR.","solution":"def categorize_feedback(T, ratings): categories = [] for rating in ratings: if rating < 4: categories.append(\'POOR\') elif 4 <= rating <= 6: categories.append(\'AVERAGE\') elif 7 <= rating <= 9: categories.append(\'GOOD\') elif rating == 10: categories.append(\'EXCELLENT\') return categories"},{"question":"A professor has a collection of N books, each identified by a unique integer from 1 to N. Over the term, the professor lends out books to students and receives them back in a random order. However, after some time, he notices that some books are still missing, and he wants to identify them. Given a list of M integers representing the books that have been returned, develop a program that identifies the missing books from the professor\'s collection. INPUT The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines of input. The first line of each test case contains two integers N and M, where N is the total number of books and M is the number of books that have been returned. The second line contains M space-separated integers representing the IDs of the returned books. OUTPUT For each test case, output the IDs of the missing books in ascending order as a single line of space-separated integers. If no books are missing, print an empty line. CONSTRAINTS 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 0 ≤ M ≤ N 1 ≤ Returned book IDs ≤ N SAMPLE INPUT 2 5 3 2 3 1 4 4 1 2 3 4 SAMPLE OUTPUT 4 5","solution":"def find_missing_books(N, M, returned_books): Identifies the missing books from the collection. Parameters: N (int): Total number of books. M (int): Number of books returned. returned_books (list of int): List of IDs of returned books. Returns: list of int: List of IDs of missing books in ascending order. all_books = set(range(1, N + 1)) returned_books_set = set(returned_books) missing_books = sorted(all_books - returned_books_set) return missing_books def solve(test_cases): results = [] for N, M, returned_books in test_cases: missing_books = find_missing_books(N, M, returned_books) results.append(\' \'.join(map(str, missing_books))) return results"},{"question":"You are given two strings, `s1` and `s2`, each containing only lowercase English letters. In one move, you can choose any single character in `s2` and change it to any other lowercase English letter. The task is to determine the minimum number of moves required to make the strings anagrams of each other. A string is called an anagram of another string if it can be rearranged to match the other string. For example, if `s1 = \\"aba\\"` and `s2 = \\"baa\\"`, then both strings are already anagrams of each other. Therefore, no moves are required in this case. However, if `s1 = \\"abc\\"` and `s2 = \\"def\\"`, you will need 3 moves to transform `s2` into `cba` (or any valid anagram of `s1`). -----Input----- The first line of input data contains a single integer `t` (1 le t le 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains the string `s1` (1 le |s1| le 10^5). - The second line contains the string `s2` (1 le |s2| le 10^5 and |s2| = |s1|). It is guaranteed that the total length of the strings in all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the minimum number of moves required to make the strings anagrams of each other. -----Examples----- Input 3 aba baa abc bca abc def Output 0 0 3 -----Note----- In the first example, since `aba` and `baa` are already anagrams of each other, no moves are needed. In the second example, since `abc` and `bca` are already anagrams of each other, no moves are needed. In the third example, we need to change each character in `def` to match `abc`, so 3 moves are required. Solve this by calculating the frequency of each character in `s1` and `s2`, and then finding the difference in their frequencies. The sum of the differences will give you the minimum number of moves required to make the strings anagrams of each other.","solution":"from collections import Counter def min_moves_to_make_anagram(s1, s2): This function calculates the minimum number of moves required to make two strings (s1 and s2) anagrams of each other. Each move consists of changing one character in s2 to another character. count1 = Counter(s1) count2 = Counter(s2) moves = 0 for char in count1: if char in count2: moves += abs(count1[char] - count2[char]) else: moves += count1[char] for char in count2: if char not in count1: moves += count2[char] return moves // 2 def process_test_cases(t, test_cases): results = [] for s1, s2 in test_cases: result = min_moves_to_make_anagram(s1, s2) results.append(result) return results"},{"question":"Greg is trying to build a software for a quiz competition. During the quiz, competitors can earn points but can never lose points. There are multiple rounds, and in each round, every competitor\'s points are updated. Greg wants to find the competitor with the highest point gain over any continuous sequence of rounds. Can you help Greg to write a program that finds the maximum point gain over any contiguous subarray of the point gain array? Input: First line of each test case contains an integer T, the number of test cases. Each test case starts with an integer N, the number of rounds. The next line contains N integers representing the change in points a competitor scores in each round. Output: For each test case, print the maximum point gain over any contiguous sequence of rounds. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ point change ≤ 10^4 SAMPLE INPUT 2 5 -2 1 -3 4 -1 7 2 -1 2 3 4 -5 2 SAMPLE OUTPUT 4 10 Explanation First case: The competitor\'s point changes are: -2, 1, -3, 4, -1 The maximum point gain over any contiguous sequence of rounds is 4 (which comes from the subarray [4]). Second case: The competitor\'s point changes are: 2, -1, 2, 3, 4, -5, 2 The maximum point gain over any contiguous sequence of rounds is 10 (which comes from the subarray [2, -1, 2, 3, 4]).","solution":"def max_point_gain(test_cases): Returns the maximum point gain over any contiguous sequence of rounds for each test case. Using Kadane\'s algorithm to find the maximum subarray sum. Args: test_cases: List of tuples containing number of rounds and the list of point changes. Returns: List of maximum point gains for each test case. results = [] for n, points in test_cases: max_current = max_global = points[0] for i in range(1, n): max_current = max(points[i], max_current + points[i]) if max_current > max_global: max_global = max_current results.append(max_global) return results def process_input_to_cases(input_data): Process the input data and convert it to list of test cases. Args: input_data: A string representing the raw input data. Returns: List of tuples with number of rounds and point changes for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) cases = [] index = 1 for _ in range(T): N = int(lines[index]) points = list(map(int, lines[index + 1].split())) cases.append((N, points)) index += 2 return cases def format_output(results): Formats the results into a string. Args: results: List of maximum point gains for each test case. Returns: A string formatted to be outputted. return \'n\'.join(map(str, results))"},{"question":"Your friend is a fan of geometric shapes and recently learned about polygons. A polygon can be termed as a convex polygon if every internal angle is strictly less than 180 degrees. He wants to find out if a given set of points can form a convex polygon or not. You are given the coordinates of N points on a plane. Your task is to check if those points form a convex polygon when connected sequentially. Input The first line contains the number of test cases T. Each test case contains a number N, denoting the number of points. This is followed by N lines, each containing two integers Xi and Yi representing the coordinates of each point. Output For each test case, print \\"YES\\" if the points form a convex polygon, otherwise print \\"NO\\". Constraints 1 ≤ T ≤ 10 3 ≤ N ≤ 100000 -100000 ≤ Xi, Yi ≤ 100000 SAMPLE INPUT 2 4 0 0 0 1 1 1 1 0 5 0 0 1 1 2 0 3 1 4 0 SAMPLE OUTPUT YES NO Explanation Explanation Test Case # 1: The points form a square which is a convex polygon. Hence, the output is \\"YES\\". Test Case # 2: The points form a self-intersecting polygon which is not convex. Hence, the output is \\"NO\\".","solution":"def is_convex_polygon(points): def cross_product(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) n = len(points) if n < 3: return False direction = 0 for i in range(n): a, b, c = points[i], points[(i + 1) % n], points[(i + 2) % n] cross_prod = cross_product(a, b, c) if cross_prod != 0: if direction == 0: direction = cross_prod elif direction * cross_prod < 0: return False return True def check_convex_polygon(test_cases): result = [] for case in test_cases: points = case[1] if is_convex_polygon(points): result.append(\\"YES\\") else: result.append(\\"NO\\") return result def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) points = [] for i in range(index + 1, index + 1 + N): x, y = map(int, lines[i].strip().split()) points.append((x, y)) test_cases.append((N, points)) index += N + 1 return check_convex_polygon(test_cases) # Example usage: input_str = 2 4 0 0 0 1 1 1 1 0 5 0 0 1 1 2 0 3 1 4 0 print(process_input(input_str)) # Output should be [\\"YES\\", \\"NO\\"]"},{"question":"Given an array of integers nums, return the number of subarrays whose sum equals a given value k. A subarray is a contiguous non-empty sequence of elements within an array. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: The subarrays that sum to 2 are [1,1] and [1,1]. Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: The subarrays that sum to 3 are [1,2] and [3]. Example 3: Input: nums = [0,0,0,0,0], k = 0 Output: 15 Explanation: Every combination of subarrays within the array sums to 0. There are 15 such subarrays in total. Example 4: Input: nums = [3,4,7,2,-3,1,4,2], k = 7 Output: 4 Explanation: The subarrays that sum to 7 are [3,4], [7], [7,2,-3,1], and [2,-3,1,4,2]. Constraints: 1 <= nums.length <= 2 * 10^4 -10^5 <= nums[i] <= 10^5 -10^7 <= k <= 10^7","solution":"def subarray_sum(nums, k): Returns the number of subarrays whose sum equals k. Parameters: nums (list of int): The list of integers to examine. k (int): The target sum for the subarrays. Returns: int: The number of subarrays whose sum equals k. count = 0 cum_sum = 0 cum_sum_counts = {0: 1} for num in nums: cum_sum += num if cum_sum - k in cum_sum_counts: count += cum_sum_counts[cum_sum - k] if cum_sum in cum_sum_counts: cum_sum_counts[cum_sum] += 1 else: cum_sum_counts[cum_sum] = 1 return count"},{"question":"Yuki is designing a rotating LED display. The display shows a sequence of numbers in a circular manner. Given an initial sequence of integers and a number of rotations to the right, you need to calculate and print the new sequence after performing the specified rotations. -----Constraints----- - The length of the sequence will be between 1 and 100 inclusive. - Each element in the sequence will be an integer between -1000 and 1000 inclusive. - The number of rotations will be between 0 and 1000 inclusive. -----Input----- Input is given from Standard Input in the following format: n sequence (space-separated integers) k The first line contains the integer n, the number of elements in the sequence. The second line contains n space-separated integers representing the sequence. The third line contains the integer k, the number of rotations to the right. -----Output----- Print the new sequence after k rotations, space-separated on one line. -----Sample Input----- 5 1 2 3 4 5 2 -----Sample Output----- 4 5 1 2 3 -----Explanation----- After rotating the sequence [1, 2, 3, 4, 5] two times to the right, the resulting sequence is [4, 5, 1, 2, 3].","solution":"def rotate_sequence(n, sequence, k): Rotates the given sequence to the right by k steps. Parameters: n (int): The number of elements in the sequence. sequence (list of int): The sequence to rotate. k (int): The number of rotations. Returns: list of int: The rotated sequence. # Calculate the effective number of rotations k = k % n return sequence[-k:] + sequence[:-k] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) sequence = list(map(int, data[1:n+1])) k = int(data[n+1]) result = rotate_sequence(n, sequence, k) print(\\" \\".join(map(str, result)))"},{"question":"Alex is participating in a simulated stock trading competition. The challenge is to maximize the profit from buying and selling stocks on specific days. Alex is given the daily prices of a single stock for a sequence of days and must decide the best days to complete at most two transactions. A transaction consists of buying one share of the stock on one day and selling it on another later day. More formally, find the maximum profit you can achieve if you are allowed to complete at most two transactions. Note that you must sell the stock before you buy it again. Write a function that takes in an array of prices, where `prices[i]` is the price of a given stock on the ith day, and returns the maximum profit you can achieve from at most two transactions. Input The function takes in the following parameter: - `prices`: An array of integers representing the daily prices of the stock. Output Return an integer representing the maximum profit achievable with at most two transactions. Examples Input prices = [3,3,5,0,0,3,1,4] Output 6 Explanation Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Overall profit = 3 + 3 = 6. Input prices = [1,2,3,4,5] Output 4 Explanation Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. There is no opportunity to complete another transaction. Input prices = [7,6,4,3,1] Output 0 Explanation In this case, no transaction is completed because the price of the stock never increases.","solution":"def maxProfit(prices): if not prices: return 0 # Initialize variables for the first and second transaction t1_cost = float(\'inf\') t1_profit = 0 t2_cost = float(\'inf\') t2_profit = 0 for price in prices: # The maximum profit if only one transaction is allowed t1_cost = min(t1_cost, price) t1_profit = max(t1_profit, price - t1_cost) # Reinstate the profit made from the first transaction to the cost of the second transaction t2_cost = min(t2_cost, price - t1_profit) t2_profit = max(t2_profit, price - t2_cost) return t2_profit"},{"question":"Alice loves playing with numbers and arrays. She has an array of integers and she decided to perform operations with a focus on sums. Given an array, her goal is to find a non-empty subarray with the maximum possible sum. A subarray is a contiguous part of an array. Alice can choose any subarray of her choice, but she wants to be sure that it maximizes the sum. Input - The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (−104 ≤ ai ≤ 104) — the elements of the array. Output - Print the maximum possible sum of any non-empty subarray. Examples Input 5 1 2 -3 4 5 Output 9 Input 5 -1 -2 -3 -4 -5 Output -1 Note In the first example, the subarray [4, 5] has the maximum sum of 9. In the second example, the subarray [-1] has the maximum sum of -1.","solution":"def max_subarray_sum(nums): Finds the maximum possible sum of any non-empty subarray. Args: nums (list of int): List of integers which represent the array. Returns: int: The maximum sum of any non-empty subarray. if not nums: return 0 # Initialize variables max_so_far = nums[0] max_ending_here = nums[0] # Traverse through the array for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"In an artistic garden, there are various spots labeled with distinct letters from \'A\' to \'Z\'. Each spot may contain certain unique flowers characterized by numbers. You are given a garden plan that shows which spots are directly connected by pathways. You are also given queries where each query asks for a specific type of flower and a starting spot. Your task is to determine how many spots contain the requested flower type and can be reached starting from the given spot using any number of pathways. Here is an example to illustrate the scenario: Garden Plan: A - B A - C C - D Flower Information: Spot A: [1, 2] Spot B: [2, 3] Spot C: [1, 4] Spot D: [3, 4] Queries: 1 A 3 B Explanation: The first query asks which spots contain flower type \'1\' and can be reached from spot \'A\'. The reachable spots are A, B, C, D and the spots containing flower type \'1\' are A, C. Thus, the result is 2. The second query asks which spots contain flower type \'3\' and can be reached from spot \'B\'. The reachable spots are B, A, C, D and the spots containing flower type \'3\' are B, D. Thus, the result is 2. Input - The input begins with the number of test cases t (1 ≤ t ≤ 10). - For each test case: - The first line contains the number of spots s (1 ≤ s ≤ 26) and the number of pathways p (0 ≤ p ≤ 325). - The next line contains the flower information for each spot in the format: Spot Flower_Type_1 Flower_Type_2 ... Flower_Type_k. A spot can have at most 15 different types of flowers. - The next p lines each contain two letters representing spots connected by a pathway. - The next line contains the number of queries q (1 ≤ q ≤ 26). - The next q lines each contain a flower type and a starting spot in the format: Flower_Type Starting_Spot. Output For each query, output the number of reachable spots containing the requested flower type. Example Input 1 4 3 A 1 2 B 2 3 C 1 4 D 3 4 A B A C C D 2 1 A 3 B Output 2 2","solution":"def count_flower_spots(test_cases): def dfs(graph, node, visited): stack = [node] result = set() while stack: loc = stack.pop() if loc not in visited: visited.add(loc) result.add(loc) stack.extend(graph[loc] - visited) return result results = [] for test in test_cases: s, p = test[\'spots\'], test[\'pathways\'] flower_data = test[\'flower_data\'] pathways = test[\'pathways_list\'] queries = test[\'queries\'] flower_info = {} for data in flower_data: spot, *flowers = data flower_info[spot] = set(map(int, flowers)) graph = {spot: set() for spot in flower_info} for path in pathways: u, v = path graph[u].add(v) graph[v].add(u) for query in queries: flower_type, start_spot = query visited = set() reachable_spots = dfs(graph, start_spot, visited) count = sum(1 for spot in reachable_spots if flower_type in flower_info[spot]) results.append(count) return results # Example usage test_cases = [ { \'spots\': 4, \'pathways\': 3, \'flower_data\': [ (\'A\', 1, 2), (\'B\', 2, 3), (\'C\', 1, 4), (\'D\', 3, 4) ], \'pathways_list\': [ (\'A\', \'B\'), (\'A\', \'C\'), (\'C\', \'D\') ], \'queries\': [ (1, \'A\'), (3, \'B\') ] } ] output = count_flower_spots(test_cases) print(output) # Expected output: [2, 2]"},{"question":"Write a function that takes a list of integers and a target integer as inputs, and returns the indices of the two numbers that add up to the target. The function should return a tuple of the indices. If no two numbers add up to the target, return an empty tuple. For example, if you get the list [2, 7, 11, 15] and the target is 9, return (0, 1).","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Args: nums : List[int] : List of integers target : int : Target integer Returns: Tuple[int, int] : Indices of the two numbers that add up to the target or an empty tuple if no two numbers add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"A local library organizes a weekly book reading session for its members. Each session can accommodate up to M members. There are a total of P members who want to participate in the session. What\'s the minimum number of weeks required for all the members to attend at least one session? ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers P, M. ------ Output Format ------ For each test case, print a single line containing one integer - the minimum number of weeks required for all the members to attend at least one session. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ P ≤ 10^{2} 1 ≤ M ≤ 10^{2} ----- Sample Input 1 ------ 3 5 5 7 4 8 3 ----- Sample Output 1 ------ 1 2 3 ----- explanation 1 ------ Test case 1: Since M = 5 and P = 5, we can accommodate all 5 members in a single session. Hence it requires only 1 week for all members to attend. Test case 2: We have M = 4 and P = 7 > M, so we can\'t accommodate all members in a single session. We can have 4 members attend the first session and the remaining 3 attend the second session. Therefore, we require a minimum of 2 weeks for all members to attend. Test case 3: We have M = 3 and P = 8 > M, so we can\'t accommodate all members in a single session. We can have 3 members attend each of the first two sessions and the remaining 2 attend the third session. Therefore, we require a minimum of 3 weeks for all members to attend.","solution":"import math def min_weeks_to_accommodate(T, test_cases): For each test case, calculate and return the minimum number of weeks required to ensure that all members can attend at least one session. Args: - T (int): The number of test cases. - test_cases (list of tuples): Each tuple contains two integers P and M. Returns: - list of int: The minimum number of weeks required for each test case. results = [] for P, M in test_cases: results.append(math.ceil(P / M)) return results"},{"question":"Lily loves playing games with numbers. She has created a new game in which she takes an integer N and forms a new integer by multiplying all of its non-zero digits. She continues this process until she gets a single-digit integer. Your task is to write a program that, given an integer N, finds the resulting single-digit integer. -----Constraints----- - 1 leq N leq 10^{18} - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the resulting single-digit integer after repeatedly multiplying the non-zero digits of N until a single-digit integer is obtained. -----Sample Input----- 39 -----Sample Output----- 4 In the first iteration: 3 * 9 = 27. In the second iteration: 2 * 7 = 14. In the third iteration: 1 * 4 = 4. Hence, the final single-digit result is 4.","solution":"from functools import reduce def multiply_non_zero_digits(n): result = 1 for digit in str(n): if digit != \'0\': result *= int(digit) return result def single_digit_result(N): while N >= 10: N = multiply_non_zero_digits(N) return N"},{"question":"John has recently learned about prime numbers and their importance in various fields. He is now fascinated by prime numbers and wants to identify intervals in sequences of numbers where the sum of the elements is a prime number. Given an array ai of length n, and q ranges from li to ri, your task is to determine for each range whether the sum of the elements in that range forms a prime number. If the sum is prime, output \\"Prime\\", otherwise output \\"Not Prime\\". Input The first line of the input contains an integer n (1 ≤ n ≤ 30 000) — the length of the initial array. The next line contains n integers ai (1 ≤ ai ≤ 1 000 000 000) — elements of the array. Then follow the number of queries q (1 ≤ q ≤ 30 000). Last q lines contain pairs of indices li and ri (1 ≤ li ≤ ri ≤ n) — ranges to check for prime sums. Output Print q lines, i-th of them must contain \\"Prime\\" if the sum of the i-th range is a prime number, otherwise \\"Not Prime\\". Example Input 6 6 1 3 7 5 8 3 1 3 2 6 4 4 Output Not Prime Prime Prime Note For the first query, the sum of the subarray [6, 1, 3] is 10, which is not a prime number. For the second query, the sum of the subarray [1, 3, 7, 5, 8] is 24, which is also not a prime number. For the third query, the sum of the subarray [7] is 7, which is a prime number. Guidelines for checking prime numbers: A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. For efficient checking, consider methods to determine primes for large sums up to 30,000,000,000, as sums can be significant due to large element values.","solution":"from typing import List def is_prime(n: int) -> bool: if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_interval(n: int, arr: List[int], queries: List[List[int]]) -> List[str]: # First we build a prefix sum array for efficient range sum calculations prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] result = [] for li, ri in queries: # Calculate the sum of the range from li to ri range_sum = prefix_sum[ri] - prefix_sum[li - 1] if is_prime(range_sum): result.append(\\"Prime\\") else: result.append(\\"Not Prime\\") return result"},{"question":"Given a 2D matrix of size n*m containing integers, your task is to find all unique rows in the given matrix. Example 1: Input: matrix = {{1, 0, 0}, {0, 1, 1}, {1, 0, 0}} Output: [[1, 0, 0], [0, 1, 1]] Explanation: The unique rows in the given matrix are: [1, 0, 0] [0, 1, 1] Example 2: Input: matrix = {{1, 1, 0}, {1, 0, 0}, {1, 1, 0}, {0, 0, 1}} Output: [[1, 1, 0], [1, 0, 0], [0, 0, 1]] Explanation: The unique rows in the given matrix are: [1, 1, 0] [1, 0, 0] [0, 0, 1] Your Task: You don\'t need to read or print anything. Your task is to complete the function uniqueRows() which takes matrix as input parameter and returns a list of lists containing all unique rows. Expected Time Complexity: O(n*m) Expected Space Complexity: O(n*m) Constraints: 1 ≤ n, m ≤ 50","solution":"def uniqueRows(matrix): Returns all unique rows in the given matrix. unique_rows_set = set() unique_rows_list = [] for row in matrix: row_tuple = tuple(row) if row_tuple not in unique_rows_set: unique_rows_set.add(row_tuple) unique_rows_list.append(row) return unique_rows_list"},{"question":"A event organizing company is planning a sports tournament in which teams participate in knockout rounds until a champion is crowned. Each match between two teams generates a specific excitement level, which is a positive integer value. The company wants to maximize the total excitement of the tournament and seeks your help to design the schedule. Here is how the tournament works: 1. The tournament begins with N teams, each identified by a unique integer from 1 to N. 2. In each round, teams are paired to compete against each other, and each winning team advances to the next round. 3. The excitement level of a match between two teams, team[i] and team[j], is calculated as |team[i] - team[j]|, the absolute difference of their team numbers. 4. The company aims to maximize the sum of excitement levels over all matches played throughout the tournament. You need to determine the maximum possible total excitement achieved by scheduling the matches optimally. # Input: - A single integer N, representing the number of teams. # Output: - A single integer representing the maximum possible total excitement level of the tournament. # Constraints: 1 ≤ N ≤ 1000 # Sample Input: ``` 4 ``` # Sample Output: ``` 6 ``` # Explanation: One way to maximize the total excitement is as follows: - In the first round, pair teams as (1, 4) and (2, 3). The excitement levels are |1-4| = 3 and |2-3| = 1. Total excitement = 4. - In the second round, the winners of previous matches (let\'s take team 4 and team 3) are paired together. The excitement level is |4-3| = 1. Adding this to the previous total gives a maximum total excitement of 4 + 1 = 5. However, this is one of the optimal ways, more optimal scheduling would result in higher excitement levels, and you have to find the correct maximum.","solution":"def max_total_excitement(n): Calculate the maximum possible total excitement level of the tournament. Parameters: n (int): Number of teams in the tournament. Returns: int: Maximum possible total excitement level. # The optimal way to maximize excitement is to always pair the highest # and lowest available team numbers in each match. total_excitement = 0 while n > 1: total_excitement += (n - 1) n -= 2 return total_excitement"},{"question":"In the bustling city of Codeopolis, the newly built mega-mall houses numerous technology stores. The mall administrators want to efficiently manage store space, and they decided to implement a unique layout format. The mall\'s layout is represented as a 2D grid of size m times n, where each cell can either be empty (represented by \'.\') or occupied by a store (represented by \'*\'). The mall administrators need to create the largest possible rectangular block within this grid that is completely filled with stores. However, they need to ensure that the block is not just large in size, but they also need to maximize the number of stores forming this block such that its area is the largest possible. Given the mall\'s layout, determine the area of the largest rectangular block that can be formed completely by store cells. -----Input----- - The first line of the input contains two integers m and n (1 le m, n le 1000), the dimensions of the grid. - The next m lines each contain a string of length n consisting of characters \'.\' and \'*\'. -----Output----- Print a single integer, the area of the largest rectangular block that consists entirely of store cells. -----Examples----- Sample Input 1: 4 5 ..... .***. .***. ..... Sample Output 1: 6 Sample Input 2: 3 3 *** *.* *** Sample Output 2: 3 Explanation: In the first sample, the largest rectangle of stores is of size 2x3, giving an area of 6. In the second sample, the largest rectangle of stores is of size 1x3, giving an area of 3.","solution":"def maximal_rectangle(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) heights = [0] * n max_area = 0 for i in range(m): for j in range(n): if grid[i][j] == \'*\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 for i in range(len(heights) + 1): while stack and (i == len(heights) or heights[stack[-1]] > heights[i]): h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"There is a city with N intersections and M bidirectional roads connecting them. Each road has a travel time associated with it. Citizens are planning a city event and need to find the optimal route from intersection A to intersection B such that the travel time is minimized. There are multiple routes available, and some intersections also have multiple roads leading to other intersections. It is possible that no route exists between A and B. Write a function to determine the minimum travel time from intersection A to intersection B. If no route exists, return -1. You are given the following: - roads: a list of tuples, where each tuple consists of three integers (u, v, w) representing a road connecting intersection u to intersection v with travel time w. - N: the number of intersections. - A: the starting intersection. - B: the destination intersection. Example 1: Input: N = 5, roads = [(0, 1, 10), (1, 2, 5), (2, 3, 2), (0, 3, 20), (2, 4, 1)], A = 0, B = 4 Output: 18 Explanation: The shortest path from intersection 0 to intersection 4 is through the path 0 -> 1 -> 2 -> 4 with a travel time of 10 + 5 + 1 = 16. Example 2: Input: N = 3, roads = [(0, 1, 1), (1, 2, 2)], A = 0, B = 2 Output: 3 Explanation: The shortest path from intersection 0 to intersection 2 is through the path 0 -> 1 -> 2 with a travel time of 1 + 2 = 3. Example 3: Input: N = 3, roads = [(0, 1, 5), (1, 2, 10)], A = 0, B = 2 Output: 15 Explanation: The shortest path from intersection 0 to intersection 2 is through the path 0 -> 1 -> 2 with a travel time of 5 + 10 = 15. Example 4: Input: N = 3, roads = [(0, 1, 5), (1, 2, 10)], A = 0, B = 3 Output: -1 Explanation: There is no road connecting intersection 0 to intersection 3. Note: - 1 <= N <= 100 - 0 <= u, v < N - 0 <= w <= 1000 - 0 <= A, B < N","solution":"import heapq def find_shortest_path(N, roads, A, B): Returns the minimum travel time from intersection A to intersection B. If no route exists, returns -1. # Create adjacency list adjacency_list = [[] for _ in range(N)] for u, v, w in roads: adjacency_list[u].append((v, w)) adjacency_list[v].append((u, w)) # Use Dijkstra\'s algorithm to find the shortest path from A to B min_heap = [(0, A)] shortest_paths = {i: float(\'inf\') for i in range(N)} shortest_paths[A] = 0 while min_heap: curr_time, curr_intersection = heapq.heappop(min_heap) if curr_intersection == B: return curr_time if curr_time > shortest_paths[curr_intersection]: continue for neighbor, travel_time in adjacency_list[curr_intersection]: time = curr_time + travel_time if time < shortest_paths[neighbor]: shortest_paths[neighbor] = time heapq.heappush(min_heap, (time, neighbor)) return -1"},{"question":"You are given an array of n distinct elements where each element is an integer between 1 and 1000. You must rearrange the array such that the sum of absolute differences of adjacent elements is minimized. The absolute difference of two numbers x and y is defined as |x - y|. For the array to have minimized absolute differences, the goal is to arrange the elements in an order where the consecutive elements have the smallest possible differences. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the given array. The second line contains n distinct integers a_{i} (1 ≤ a_{i} ≤ 1000) — the elements of the array a. -----Output----- Print a single line containing n integers — the rearranged array that minimizes the sum of absolute differences of adjacent elements. If there are multiple valid arrangements, print any one of them. -----Example----- Input 5 3 1 4 9 2 Output 1 2 3 4 9 Input 4 8 5 2 10 Output 2 5 8 10","solution":"def rearrange_array(arr): Rearrange the array such that the sum of absolute differences of adjacent elements is minimized. :param arr: List of distinct integers :return: List of integers rearranged to minimize the sum of absolute differences return sorted(arr)"},{"question":"Given an undirected graph with N nodes, determine if it is possible to color each node with one of two colors, such that no two adjacent nodes share the same color. Constraints * 1 leq N leq 10^5 * The graph is connected and has N-1 edges (i.e., it is a tree). Input Input is given from Standard Input in the following format: N u_1 v_1 u_2 v_2 ... u_{N-1} v_{N-1} Each of the following N-1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq N), which represent an edge between the nodes u_i and v_i. Output If the graph can be colored with two colors as described above, print `YES`; otherwise, print `NO`. Examples Input 3 1 2 2 3 Output YES Input 5 1 2 1 3 1 4 1 5 Output YES","solution":"from collections import deque, defaultdict def is_bipartite_tree(N, edges): # Create an adjacency list for the graph adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize color array. -1 indicates that the node has not been colored yet. colors = [-1] * (N + 1) # BFS to color the graph def bfs(start): queue = deque([start]) colors[start] = 0 # Color the starting node with color 0 while queue: node = queue.popleft() current_color = colors[node] for neighbor in adj_list[node]: if colors[neighbor] == -1: # If the neighbor hasn\'t been colored colors[neighbor] = 1 - current_color # Color with the opposite color queue.append(neighbor) elif colors[neighbor] == current_color: # If the neighbor is colored with the same color return False return True for node in range(1, N + 1): if colors[node] == -1: # If the node hasn\'t been visited yet if not bfs(node): return \\"NO\\" return \\"YES\\""},{"question":"Given two non-negative integers a and b, your task is to compute the Greatest Common Divisor (GCD) of a raised to the power of b! (factorial of b) and b raised to the power of a! (factorial of a). Constraints: - 0 leq a, b leq 10 Input: The first and only line of input contains two integers a and b separated by a space. Output: Print a single integer representing the GCD of a^{b!} and b^{a!}. Examples: Input: ``` 1 2 ``` Output: ``` 1 ``` Input: ``` 3 3 ``` Output: ``` 3 ``` Input: ``` 4 5 ``` Output: ``` 1 ``` Input: ``` 6 8 ``` Output: ``` 1 ``` Input: ``` 0 0 ``` Output: ``` 0 ``` Note: The factorial of n, denoted as n!, is the product of all positive integers less than or equal to n. For example, 4! = 4 times 3 times 2 times 1 = 24. For a = 0 or b = 0, 0! is defined as 1.","solution":"import math def gcd_power_factorials(a, b): Computes the GCD of a^b! and b^a! for given non-negative integers a and b. if a == 0 and b == 0: return 0 gcd_value = math.gcd(a, b) return gcd_value"},{"question":"You are given an array A consisting of N integers. You want to find the length of the longest subarray in A that is strictly increasing. -----Constraints----- - 2 ≤ N ≤ 100 - 1 ≤ A_i ≤ 10^4 for all 1 ≤ i ≤ N -----Input----- Input is given from Standard Input in the following format: N A[1] A[2] ... A[N] -----Output----- Print the length of the longest strictly increasing subarray in A. -----Sample Input----- 8 2 2 2 2 3 4 5 1 -----Sample Output----- 4 - The longest strictly increasing subarray in this case is [2, 3, 4, 5].","solution":"def longest_increasing_subarray_length(N, A): Returns the length of the longest strictly increasing subarray in A. if N < 2: return N max_length = 1 current_length = 1 for i in range(1, N): if A[i] > A[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length # Example usage: # N = 8 # A = [2, 2, 2, 2, 3, 4, 5, 1] # print(longest_increasing_subarray_length(N, A)) # Output: 4"},{"question":"You are given an array of integers `arr` and an integer `k`. Your task is to find the k-th smallest element in the array using a modified version of the Quickselect algorithm. Example 1: Input: arr = [7, 10, 4, 3, 20, 15] k = 3 Output: 7 Explanation: The 3rd smallest element in the array is 7. Example 2: Input: arr = [7, 10, 4, 3, 20, 15] k = 4 Output: 10 Explanation: The 4th smallest element in the array is 10. User Task: Your task is to complete the function `quickselect(arr: List[int], k: int) -> int` which takes an array of integers `arr` and an integer `k`, and returns the k-th smallest element in the array. You need not take any input or print anything. Expected Time Complexity: O(n) on average, where n is the number of elements in the array. Expected Auxiliary Space: O(1). Constraints: - 1 <= |arr| <= 10^5 - 1 <= k <= |arr| - 0 <= arr[i] <= 10^9","solution":"def partition(arr, low, high): This function takes the last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot. pivot = arr[high] i = low - 1 # index of smaller element for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): This function implements the Quickselect algorithm to find the k-th smallest element in the array. if low <= high: # Partition the array and get the pivot index pivot_index = partition(arr, low, high) # If pivot index matches the k-th position if pivot_index == k: return arr[pivot_index] elif pivot_index > k: return quickselect(arr, low, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, high, k) def find_kth_smallest(arr, k): This function returns the k-th smallest element in the array. return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"You are given a matrix with dimensions MxN consisting of positive integers. Your task is to find the sum of all elements in each row and the sum of all elements in each column, then output the row sums and column sums. Input format: - The first line contains two integers \'M\' and \'N\' which denote the number of rows and columns of the matrix. - The next \'M\' lines contain \'N\' space-separated integers each, representing the matrix elements. Output format: - Print \'M\' space-separated integers representing the sum of elements in each row. - Print \'N\' space-separated integers representing the sum of elements in each column. Constraints: - 1 ≤ M, N ≤ 100 - 1 ≤ Matrix[i][j] ≤ 1000 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 6 15 24 12 15 18","solution":"def matrix_sums(M, N, matrix): Returns the sum of each row and each column in the given MxN matrix. Parameters: M (int): Number of rows. N (int): Number of columns. matrix (list of list of int): The MxN matrix. Returns: tuple: (row_sums, col_sums) where row_sums is a list of sums of each row and col_sums is a list of sums of each column. row_sums = [sum(row) for row in matrix] col_sums = [sum(matrix[i][j] for i in range(M)) for j in range(N)] return row_sums, col_sums"},{"question":"Farmer Pete has a unique, rectangular farm where he grows a diverse range of plants. His farm is made of a grid of cells with dimensions m x n. Each cell of the grid represents a plot of land that can either have plants growing (represented by a `1`) or be empty (represented by a `0`). Farmer Pete can walk between plots of land, but he can only move up, down, left, or right to adjacent cells. Farmer Pete needs to determine how many distinct clusters of plants exist within the farm. A cluster is defined as a group of `1`s connected horizontally or vertically (not diagonally). Write a program to help Farmer Pete count the number of distinct clusters in his farm grid. -----Input----- The first line contains two integer numbers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the farm grid. The next m lines each contain n integer numbers (either `0` or `1`), representing the layout of the farm grid. -----Output----- Print a single integer — the number of distinct clusters of plants in the farm grid. -----Examples----- Input 4 5 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 0 1 1 0 1 Output 4 Input 3 3 1 1 0 0 1 0 1 0 1 Output 3 -----Note----- In the first example, there are four clusters: - One starts at (0,0) and includes (1,0) and (1,1). - One is a single cell at (0,3). - One includes cells (2,2) and (3,1) and (3,2). - One is a single cell at (3,4). In the second example, there are three clusters: - One includes cells (0,0), (0,1), and (1,1). - One includes only the single cell (2,0). - One includes only the single cell (2,2).","solution":"def count_clusters(m, n, grid): def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0: return grid[i][j] = 0 # Mark the cell as visited by setting it to 0 dfs(i + 1, j) # Down dfs(i - 1, j) # Up dfs(i, j + 1) # Right dfs(i, j - 1) # Left num_clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: num_clusters += 1 dfs(i, j) return num_clusters # Sample Usage m, n = 4, 5 grid = [ [1, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 1] ] print(count_clusters(m, n, grid)) # Output: 4"},{"question":"Given a list of integers, determine how many pairs of indices (i, j) (where i le j) exist such that the sum of the numbers at those indices is even. For instance, consider the list of integers [1, 2, 3, 4]. The pairs (1, 1), (2, 2), (3, 3), (4, 4), (1, 3), (2, 4) yield even sums. Therefore, there are 6 such pairs. -----Input----- The first line contains the integer t (1 le t le 100) — the number of test cases. The next 2 * t lines contain the test cases. For each test case: - The first line contains the integer n (1 le n le 10^5) — the number of integers in the list. - The second line contains n integers separated by spaces — the elements of the list. The sum of all n values over all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the number of pairs (i, j) where the sum of i-th and j-th numbers is even. -----Examples----- Input 2 4 1 2 3 4 3 1 1 1 Output 6 6 -----Note----- In the first test case, the pairs are indexed based on 1-based indexing: - (1,1): 1+1=2 (even) - (2,2): 2+2=4 (even) - (3,3): 3+3=6 (even) - (4,4): 4+4=8 (even) - (1,3): 1+3=4 (even) - (2,4): 2+4=6 (even) There are 6 pairs whose sums are even. In the second test case, all pairs formed are (1,1), (1,2), (1,3), (2,2), (2,3), (3,3) and their sums are even. Therefore, there are 6 pairs.","solution":"def count_even_sum_pairs(test_cases): This function takes a list of test cases and returns a list of integers representing the count of pairs (i, j) where i <= j and the sum of the numbers at those indices is even. results = [] for n, numbers in test_cases: count_even = 0 count_odd = 0 for num in numbers: if num % 2 == 0: count_even += 1 else: count_odd += 1 # Pairs (i, j) with i <= j where both i and j are even even_pairs = count_even * (count_even + 1) // 2 # Pairs (i, j) with i <= j where both i and j are odd odd_pairs = count_odd * (count_odd + 1) // 2 results.append(even_pairs + odd_pairs) return results # Converting the input format according to the test cases format def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) test_cases.append((n, numbers)) index += 2 return test_cases"},{"question":"Given an array of integers, determine their median after each insertion. Median is the middle value, and if the number of elements is even, the median is the average of the two middle values. -----Input----- The input consists of a single integer **n** (1 ≤ n ≤ 100) denoting the number of elements, followed by **n** integers representing the elements of the array. -----Output----- Output **n** lines, where the i-th line contains the median of the first **i** elements of the array. -----Examples----- Input 3 2 1 5 Output 2 1.5 2 Input 4 4 6 2 8 Output 4 5 4 5","solution":"import bisect def running_median(n, nums): Calculate the median after each insertion in the array. Args: n: int - number of elements nums: List[int] - the elements of the array Returns: List[float] - a list containing the median after each insertion result = [] current_list = [] for i in range(n): bisect.insort(current_list, nums[i]) size = len(current_list) if size % 2 == 1: # odd number of elements median = current_list[size // 2] else: # even number of elements median = (current_list[(size // 2) - 1] + current_list[size // 2]) / 2 result.append(median) return result"},{"question":"# Description: Design a function that takes a rectangular matrix of characters and returns the number of distinct islands of characters in the matrix. An island is defined as a group of the same character that is connected horizontally or vertically. Diagonal connections do not count. ``` Example Python: count_islands( [ [\'a\', \'a\', \'b\', \'b\'], [\'a\', \'c\', \'c\', \'b\'], [\'a\', \'a\', \'c\', \'d\'], [\'e\', \'e\', \'e\', \'d\'] ] ) should return 5: There are 5 distinct islands: 1. The group of \'a\' characters in the top left corner. 2. The group of \'b\' characters in the top right corner. 3. The group of \'c\' characters in the middle. 4. The group of \'d\' characters in the bottom right corner. 5. The group of \'e\' characters in the bottom left corner. ```","solution":"def count_islands(matrix): Returns the number of distinct islands in a matrix of characters. An island is defined as a group of the same character that is connected horizontally or vertically. def dfs(row, col, char): Perform depth-first search to mark all parts of the current island as visited. if row < 0 or col < 0 or row >= len(matrix) or col >= len(matrix[0]): return if matrix[row][col] != char: return matrix[row][col] = None # Mark as visited by setting it to None # Check all four possible directions (up, down, left, right) dfs(row - 1, col, char) dfs(row + 1, col, char) dfs(row, col - 1, char) dfs(row, col + 1, char) if not matrix: return 0 islands = 0 for row in range(len(matrix)): for col in range(len(matrix[0])): if matrix[row][col] is not None: islands += 1 dfs(row, col, matrix[row][col]) return islands"},{"question":"In a remote town, there is a peculiar game played with string segments. The players are given a string consisting of lowercase letters, and they need to perform a series of operations to transform this string into a palindrome. The allowed operation is to insert any single character at any position in the string. What is the minimum number of insertions required to turn the given string into a palindrome? -----Input----- A single line containing a string s (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. -----Output----- Print a single integer — the minimum number of insertions needed to transform the string into a palindrome. -----Examples----- Input ab Output 1 Input race Output 3 -----Note----- For the first sample, by inserting \'b\' at the start or \'a\' at the end, \\"ab\\" can be turned into \\"bab\\" or \\"aba\\" which are palindromes. For the second sample, a minimum of three insertions are required: insert \'e\' at the beginning, \'c\' before the last character and \'r\' at the end to form the palindrome \\"ecarrace\\".","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to transform the given string into a palindrome. def lcs(X, Y): m = len(X) n = len(Y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) min_insertions = len(s) - lcs_length return min_insertions \'\'\' Explanation of the approach: To find the minimum insertions to make a string palindrome, we can use the concept of the longest common subsequence (LCS). - Find the LCS of the given string and its reverse. - The difference between the length of the given string and the LCS length gives the minimum number of insertions required. The reason is, LCS gives the longest sequence that is common in both the original and reversed string. So, the characters not in that LCS need to be inserted to make the string a palindrome. \'\'\'"},{"question":"Find the Longest Even-Length Substring Note You need to find the length of the longest even-length substring where the sum of first half of the substring is equal to the sum of second half. Input The first line of each test file contains a single integer T, which indicates the number of test cases. Then T lines follow. Each line contains a single string consisting of digits (0-9). Output For each test case, output the length of the longest even-length substring meeting the specified condition in a new line. If no such substring exists, output 0. Constraints 1 ≤ T ≤ 100 1 ≤ length of string ≤ 1000 SAMPLE INPUT 2 1538023 123456 SAMPLE OUTPUT 4 0 Explanation: For the first test case, the longest even-length substring is \\"5380\\". Sum of first half (5 + 3) is equal to sum of second half (8 + 0), so the result is 4. For the second test case, there is no even-length substring that meets the condition, so the result is 0.","solution":"def find_longest_even_length_substring(s): max_length = 0 n = len(s) # traverse all possible lengths of even-length substrings for length in range(2, n + 1, 2): for i in range(n - length + 1): mid = i + length // 2 left_sum = sum(int(s[j]) for j in range(i, mid)) right_sum = sum(int(s[j]) for j in range(mid, i + length)) if left_sum == right_sum: max_length = max(max_length, length) return max_length def longest_even_length_substring(T, cases): results = [] for s in cases: results.append(find_longest_even_length_substring(s)) return results"},{"question":"You are given an array of integers `nums` and a target integer `target`. Your task is to find two distinct indices `i` and `j` in the array such that `nums[i] + nums[j]` equals the target. If there are multiple correct answers, return any of them. Write a function to solve the problem using the following signature: ```python def find_indices(nums: List[int], target: int) -> Tuple[int, int]: # Your code here ``` -----Input----- - A list of integers `nums` (2 ≤ len(nums) ≤ 10^4, -10^9 ≤ nums[i] ≤ 10^9) - An integer `target` (-10^9 ≤ target ≤ 10^9) -----Output----- - A tuple of two integers `(i, j)` representing the indices of the two numbers that add up to the target. The first number must be the value at index `i` and the second number must be the value at index `j`. Indices are zero-based. Ensure `i != j`. -----Examples----- Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) Explanation: Because `nums[0] + nums[1]` equals `9`. Example 2: Input: nums = [3, 2, 4], target = 6 Output: (1, 2) Explanation: Because `nums[1] + nums[2]` equals `6`. Example 3: Input: nums = [3, 3], target = 6 Output: (0, 1) Explanation: Because `nums[0] + nums[1]` equals `6`. Note: - You may assume that each input would have exactly one solution. - You may not use the same element twice.","solution":"from typing import List, Tuple def find_indices(nums: List[int], target: int) -> Tuple[int, int]: Finds two distinct indices such that their values add up to the target. Args: nums (List[int]): A list of integers. target (int): The target sum. Returns: Tuple[int, int]: A tuple of two indices. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return (lookup[complement], i) lookup[num] = i"},{"question":"Peter is working on a problem where he deals with arrays and sums. He is given an array of integers and is asked to find the smallest subarray such that the sum of its elements is greater than a given integer K. Your task is to help Peter by writing a function that returns the length of the smallest subarray with sum greater than K. If no such subarray exists, return -1. Constraints: - The length of the array, N, is between 1 and 100,000. - Each element in the array is between 1 and 1,000. - The given integer K is between 1 and 1,000,000. Input: 1. The first line contains an integer N, the size of the array. 2. The second line contains N space-separated integers, representing the array. 3. The third line contains the integer K. Output: Output a single integer, the length of the smallest subarray with a sum greater than K. If no such subarray exists, output -1. Examples: Input: 5 1 4 45 6 0 19 51 Output: 3 Input: 5 1 10 5 2 7 9 Output: 1 Input: 5 1 2 4 8 Output: -1 Here, the first example\'s smallest subarray with a sum greater than 51 is [45, 6, 0] which is of length 3.","solution":"def smallest_subarray_with_sum_greater_than_k(arr, k): Returns the length of the smallest subarray with sum greater than k. If no such subarray exists, returns -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are supervising a library\'s book organization system. The library has n books, each represented by a unique integer from 1 to n. The library staff want to stack the books in a specific order to ensure accessibility and proper organization. However, due to space constraints, only specific stacking operations are allowed. You can only perform two types of operations: 1. Swap the positions of any two books. 2. Reverse the order of a consecutive subsequence of books. Your task is to determine the minimum number of operations required to arrange the books in the ascending order from 1 to n. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of books. The second line contains n distinct integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ n) — the current ordering of the books. Output Print a single integer — the minimum number of operations required to arrange the books in ascending order. Examples Input: 5 3 1 4 2 5 Output: 2 Input: 4 4 3 2 1 Output: 3 Input: 3 1 2 3 Output: 0 Explanation: Example 1: You can swap book 3 and book 1 to get the order 1 3 4 2 5. Then, reverse the subsequence 3 4 2 to achieve the order 1 2 3 4 5 with just 2 operations. Example 2: You can reverse the entire sequence to get the order 1 2 3 4 with just 1 operation. Since reversing the whole sequence is treated as one operation, the more optimal solution involves recognizing shorter subsequences that can be reversed to minimize overall operations. Here, reversing smaller chunks or swapping can alternatively lead to fewer operations.","solution":"def min_operations_to_sort_books(n, books): Returns the minimum number of operations required to sort the books in ascending order. n: int - number of books books: List[int] - current ordering of books def lis_length(sequence): from bisect import bisect_left lis = [] for x in sequence: pos = bisect_left(lis, x) if pos == len(lis): lis.append(x) else: lis[pos] = x return len(lis) lis_len = lis_length(books) return n - lis_len"},{"question":"Problem Statement You are tasked with creating a function that transforms a given text using a simple substitution cipher known as the Caesar cipher. # Description The Caesar cipher shifts each letter in the plaintext by a fixed number of places down the alphabet. The shift value is provided as an input to the function. The case of the letters should be preserved (i.e., uppercase letters should remain uppercase, and lowercase letters should remain lowercase), and non-alphabetical characters should remain the same. # Input - A string `text` which is the plaintext to be encrypted. - An integer `shift` which indicates the number of positions each letter in the plaintext should be shifted. # Output - A string representing the ciphertext obtained by applying the Caesar cipher to the input plaintext. # Example ```python >>> caesar_cipher(\\"Hello, World!\\", 3) \'Khoor, Zruog!\' >>> caesar_cipher(\\"abc-XYZ\\", 4) \'efg-BCD\' ``` # Constraints - `0 <= len(text) <= 1000` - `0 <= shift <= 25` # Notes - The alphabet wraps around if the shift pushes a letter past \'z\' or \'Z\'. For example, shifting \'z\' by 2 positions gives \'b\'. - Remember to handle both uppercase and lowercase letters distinctly. Implement the function `caesar_cipher` accordingly.","solution":"def caesar_cipher(text, shift): Encrypts the input text using the Caesar cipher algorithm with a given shift. Parameters: text (str): The input plaintext string to be encrypted. shift (int): The number of positions each letter should be shifted. Returns: str: The resulting ciphertext after applying the Caesar cipher. result = [] for char in text: if char.isalpha(): shift_base = ord(\'A\') if char.isupper() else ord(\'a\') result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return \'\'.join(result)"},{"question":"A factory produces widgets, and the manager wants to ensure that at least C widgets are produced every day. The factory runs N machines, and each machine has an efficiency E_i, which means the machine produces E_i widgets each hour. Given the number of hours H the factory operates in a day, determine whether the factory meets the daily widget production goal. -----Constraints----- - 1 leq N leq 100 - 1 leq E_i leq 100 - 1 leq H leq 24 - 1 leq C leq 10^5 -----Input----- Input is given from Standard Input in the following format: N H C E_1 E_2 ... E_N -----Output----- If the factory meets or exceeds the production goal, print Yes; otherwise, print No. -----Sample Input----- 5 8 1000 10 20 30 40 50 -----Sample Output----- Yes The factory operates for 8 hours with 5 machines having efficiencies of 10, 20, 30, 40, and 50 widgets per hour, respectively. The total production is (10 + 20 + 30 + 40 + 50) * 8 = 1200 widgets, which is not less than the goal of 1000 widgets.","solution":"def is_production_goal_met(N, H, C, efficiencies): Determines if the factory meets the daily widget production goal. Parameters: N (int): Number of machines H (int): Number of hours the factory operates in a day C (int): Daily widget production goal efficiencies (list): List of efficiencies of the machines Returns: str: \'Yes\' if the production goal is met or exceeded, otherwise \'No\' total_production = sum(efficiencies) * H if total_production >= C: return \'Yes\' else: return \'No\'"},{"question":"Ariel likes to play with arrays. She has found a new way to play with them where she can earn points. Here are the rules of the game: You are given an array of integers, called `A`, of size `N`. You are also given an integer `K`. Ariel can perform the following operation any number of times: 1. Select any subarray of length at most `K`. 2. Reverse the order of elements in that subarray. The goal is to find out the maximum possible sum of the array `A` after performing the given operation any number of times. Your task is to write a program that helps Ariel maximize the sum of the array `A` by performing the given operation optimally. # Input Format - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains two integers `N` (the size of the array) and `K` (the maximum length of the subarray that can be reversed). - The second line contains `N` integers denoting the elements of the array `A`. # Output Format - For each test case, output a single integer, the maximum possible sum of the array `A` after performing the given operations. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - -10^9 ≤ A[i] ≤ 10^9 # Example Input: ``` 2 5 3 -1 -2 3 4 -5 4 2 1 2 3 4 ``` Output: ``` 9 10 ``` # Explanation **Test Case 1:** You can reverse the subarray `[-2, 3, 4]` to get the array `[-1, 4, 3, -2, -5]`. The maximum possible sum is `4 + 3 + 5 - 1 + (-1) = 9`. **Test Case 2:** The array is already sorted in increasing order. Hence, its maximum possible sum is `1 + 2 + 3 + 4 = 10`. The task requires you to implement an algorithm that efficiently finds and performs the optimal subarray reversals to maximize the sum of the array for each given test case.","solution":"def max_sum_after_operations(t, cases): results = [] for i in range(t): n, k = cases[i][0] a = cases[i][1] # Since reversing won\'t affect the sum of the absolute values, # we can simply sum all positive numbers to get the maximum sum max_sum = sum(x for x in a if x > 0) results.append(max_sum) return results"},{"question":"You are given a list of integers and a sequence of operations to be performed on the list. There are three types of operations: 1. Insert an integer at a specified position. 2. Delete an integer from a specified position. 3. Print the sum of all integers between two specified positions (inclusive). Your task is to process the operations in the order they are provided and output the results for the sum operations. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the number of operations. Each of the next n lines contains an operation in one of the following forms: - \\"1 X Y\\" — Insert integer Y at position X. - \\"2 X\\" — Delete the integer at position X. - \\"3 X Y\\" — Print the sum of integers between positions X and Y (both inclusive). Positions are 1-based indices. It is guaranteed that the operations are valid (e.g., no deletion of non-existent elements). Output For each operation of type \\"3\\", output the sum of integers between the specified positions on a new line. Examples Input 5 1 1 5 1 2 3 3 1 2 2 1 3 1 1 Output 8 3 Note In the example: 1. After the first operation, the list is [5]. 2. After the second operation, the list is [5, 3]. 3. The first sum operation calculates the sum of values between positions 1 and 2 in the list, which is 5 + 3 = 8. 4. The delete operation removes the value at position 1, resulting in the list [3]. 5. The second sum operation calculates the sum of values between position 1 and 1 in the list, which is 3.","solution":"def process_operations(n, operations): lst = [] results = [] for op in operations: parts = op.split() if parts[0] == \\"1\\": # Insert integer at a specified position. pos = int(parts[1]) - 1 value = int(parts[2]) lst.insert(pos, value) elif parts[0] == \\"2\\": # Delete the integer at a specified position. pos = int(parts[1]) - 1 lst.pop(pos) elif parts[0] == \\"3\\": # Print the sum of all integers between two specified positions. start = int(parts[1]) - 1 end = int(parts[2]) results.append(sum(lst[start:end])) return results"},{"question":"Given a linked list and a number k, the task is to split the linked list into k consecutive linked list parts. The length of each part should be as equal as possible: no two parts should have a size differing by more than 1. This may mean some parts are null if the number of nodes is less than k. The parts should be in order of the original linked list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. Example 1: Input: Linked list: 1->2->3->4->5->6->7->8->9->10 k = 3 Output: [1->2->3->4, 5->6->7, 8->9->10] Explanation: The linked list should be split into 3 parts with the first part having 4 nodes, and the other two parts having 3 nodes each. Example 2: Input: Linked list: 1->2->3 k = 5 Output: [1, 2, 3, None, None] Explanation: The linked list should be split into 5 parts with the first three parts each having 1 node and the last two parts being null. Your Task: You don\'t need to read input or print anything. Your task is to complete the function splitListToParts() which takes the head of the linked list and an integer k as parameters and returns an array of k linked list parts. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: - The number of nodes in the linked list will be in the range [0, 1000]. - 1 ≤ k ≤ 50.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def splitListToParts(head, k): # Function to get the length of the linked list def get_length(node): length = 0 while node: length += 1 node = node.next return length length = get_length(head) part_length = length // k remainder = length % k parts = [] current = head for i in range(k): part_size = part_length + (1 if i < remainder else 0) part_head = current for j in range(part_size - 1): if current: current = current.next if current: next_part = current.next current.next = None current = next_part parts.append(part_head) return parts"},{"question":"You are the owner of a popular coffee shop. Your shop offers n different types of coffee drinks. Each coffee drink can be characterized by its preparation time, in minutes, and its selling price, in dollars. To maximize your profit, you want to analyze the hourly earnings potential of your menu. You also want to sort the coffee drinks in descending order of their hourly earnings. Hourly earnings for a specific coffee drink are calculated as `(60 / preparation time in minutes) * selling price`. Write a program that takes information about the coffee drinks, calculates the hourly earnings for each, and prints the names of the coffee drinks sorted in descending order of hourly earnings. If two drinks have the same hourly earnings, sort them lexicographically by their names. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of different coffee drinks. Each of the next n lines contains a string followed by two numbers: the name of the coffee drink, the preparation time ( t ) (1 ≤ ( t ) ≤ 60), and the selling price ( p ) (1 ≤ ( p ) ≤ 100). Output Print the names of the coffee drinks sorted in descending order of their hourly earnings. If two drinks have the same hourly earnings, sort them lexicographically by their names. Examples Input 3 Latte 5 4 Espresso 2 3 Americano 4 2 Output Espresso Latte Americano Input 2 Cappuccino 6 5 Mocha 6 4 Output Cappuccino Mocha Note: In the first example, the drinks\' hourly earnings are: - Latte: (60 / 5) * 4 = 48 - Espresso: (60 / 2) * 3 = 90 - Americano: (60 / 4) * 2 = 30 You must sort them in descending order: Espresso, Latte, Americano. In the second example, the drinks\' hourly earnings are: - Cappuccino: (60 / 6) * 5 = 50 - Mocha: (60 / 6) * 4 = 40 Since 50 > 40, the order is: Cappuccino, Mocha.","solution":"def sort_coffee_drinks(coffee_info): Sorts coffee drinks by descending order of hourly earnings. If two drinks have the same hourly earnings, sorts them lexicographically by their names. Params: - coffee_info (list of tuples): Each tuple contains (name (str), preparation_time (int), selling_price (int)) Returns: - List of coffee drink names in the sorted order. def hourly_earnings(prep_time, price): return (60 / prep_time) * price # Create a list of tuples containing each drink\'s name and its hourly earnings coffee_earnings = [(name, hourly_earnings(prep_time, price)) for name, prep_time, price in coffee_info] # Sort the list first by names lexicographically then by hourly earnings in descending order coffee_earnings.sort(key=lambda x: (-x[1], x[0])) # Return the sorted names return [name for name, earnings in coffee_earnings]"},{"question":"You are given a grid of dimensions `m` x `n` filled with integers representing different types of terrain. Each cell contains a value which indicates the elevation level of that particular terrain. Write a function `find_lowest_path_cost(m, n, grid)` that calculates the minimum cost to travel from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (m-1, n-1). The path cost is determined by the sum of the elevations of the cells traversed. You can move to adjacent cells either to the right `(i, j+1)` or down `(i+1, j)` only. For example, given the grid below: ``` grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The minimum path cost from the top-left to the bottom-right is `7`, which can be achieved by the path `[1, 3, 1, 1, 1]`. Your function should return the minimum path cost. ```Python def find_lowest_path_cost(m: int, n: int, grid: List[List[int]]) -> int: # Your code here # Example Usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # find_lowest_path_cost(3, 3, grid) => 7 ```","solution":"from typing import List def find_lowest_path_cost(m: int, n: int, grid: List[List[int]]) -> int: Calculates the minimum cost to travel from the top-left corner of the grid to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 # Create a 2D list to store the minimum path cost at each cell dp = [[0] * n for _ in range(m)] # Initialize the first cell with its own value dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner contains the minimum path cost return dp[m - 1][n - 1]"},{"question":"A company keeps track of its employees\' working hours using a digital system, which records login and logout times. You are tasked with processing this log data to answer queries about employees\' working hours. Given the log data for multiple employees and set of queries, each query asks for the total working hours of an employee within given time frame. Each log entry consists of: - An employee ID - A timestamp - An action (\\"login\\" or \\"logout\\") The logs are sorted in chronological order. To avoid complexity, assume that for each login, there\'s always a corresponding logout. Constraints: * 1 ≤ N ≤ 10^5 (N is the number of log entries) * 1 ≤ Q ≤ 10^4 (Q is the number of queries) * The timestamp format is \\"YYYY-MM-DD HH:MM\\" * The login/logout times are consistent, i.e., login is always followed by logout, and no employee logs in multiple times without logging out first. * Each employee has at most one working session per day. Input: The input is given in the following format: N log1 log2 :: logN Q query1 query2 :: queryQ The first line contains integer N, the number of log entries. The next N lines each contain a log entry in the format: <employee_id> <timestamp> <action> The next line contains integer Q, the number of queries. Each of the following Q lines contains a query in the format: <employee_id> <start_timestamp> <end_timestamp> Each timestamp is given in the format \\"YYYY-MM-DD HH:MM\\". Output: For each query, output the total working hours of the employee within the specified time frame, rounded to two decimal places. Example: Input: 12 emp1 2023-10-01 09:00 login emp1 2023-10-01 17:00 logout emp2 2023-10-01 10:00 login emp2 2023-10-01 18:00 logout emp1 2023-10-02 09:00 login emp1 2023-10-02 17:00 logout emp2 2023-10-02 10:00 login emp2 2023-10-02 18:00 logout emp1 2023-10-03 09:00 login emp1 2023-10-03 17:00 logout emp2 2023-10-03 10:00 login emp2 2023-10-03 18:00 logout 3 emp1 2023-10-01 00:00 2023-10-02 23:59 emp2 2023-10-02 00:00 2023-10-03 23:59 emp1 2023-10-01 00:00 2023-10-01 23:59 Output: 16.00 16.00 8.00","solution":"from datetime import datetime def calculate_working_hours(N, logs, Q, queries): Calculate the total working hours for each query. Parameters: N (int): The number of log entries. logs (list of str): List of log entries. Q (int): The number of queries. queries (list of str): List of queries. Returns: list of float: Total working hours for each query. from collections import defaultdict import datetime # Dictionary to keep track of login and logout times for each employee work_sessions = defaultdict(list) time_format = \\"%Y-%m-%d %H:%M\\" # Process each log entry for log in logs: parts = log.split() emp_id = parts[0] timestamp = datetime.datetime.strptime(parts[1] + \\" \\" + parts[2], time_format) action = parts[3] if action == \\"login\\": work_sessions[emp_id].append([timestamp, None]) elif action == \\"logout\\": # Find the latest session without a logout time for session in work_sessions[emp_id]: if session[1] is None: session[1] = timestamp break results = [] # Process each query for query in queries: parts = query.split() emp_id = parts[0] start_time = datetime.datetime.strptime(parts[1] + \\" \\" + parts[2], time_format) end_time = datetime.datetime.strptime(parts[3] + \\" \\" + parts[4], time_format) total_hours = 0 if emp_id in work_sessions: for (login, logout) in work_sessions[emp_id]: if login and logout: if logout < start_time or login > end_time: continue if login < start_time: login = start_time if logout > end_time: logout = end_time # Calculate hours between login and logout total_hours += (logout - login).total_seconds() / 3600 results.append(round(total_hours, 2)) return results"},{"question":"# Unique Characters in String Create a function that takes a string and determines whether all characters in the string are unique. Return `True` if all characters are unique, and `False` if there is any repetition. For the purposes of this challenge, assume that capitalization does not matter, i.e., \'A\' and \'a\' are considered the same character. Additionally, you cannot use any data structures such as sets or lists that might simplify the task. ```python def is_unique(s): # Your code here # Test cases: print(is_unique(\\"abcdef\\")) # Should return True print(is_unique(\\"AaBbCc\\")) # Should return False print(is_unique(\\"123456\\")) # Should return True print(is_unique(\\"123451\\")) # Should return False ```","solution":"def is_unique(s): Determines whether all characters in the string are unique. Case is ignored during the comparison. s = s.lower() # Convert the string to lowercase to handle case insensitivity for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"You are tasked with writing a program to manage a list of to-dos. Each to-do has a name, a priority level, and a status indicating whether it\'s completed or not. You are given a series of commands to manipulate the to-do list. Commands: 1. \\"add name priority\\" - Add a new to-do with the specified name and priority (an integer). 2. \\"complete name\\" - Mark the to-do with the specified name as completed. 3. \\"print\\" - Print all non-completed to-dos sorted first by priority (higher priority first) and then by the order they were added (earlier added first). You may assume that all to-do names are unique and consist only of lowercase letters and numbers. Input The first line contains an integer N, the number of commands. Each of the next N lines contains one command in the format specified above. Output Print the names of the non-completed to-dos sorted by priority and then by the order of addition. Constraints 1 ≤ N ≤ 1000 \'priority\' is an integer between 1 and 100 (inclusive). \'status\' is either \\"completed\\" or \\"not completed\\". \'name\' is a string of lowercase letters and numbers with length between 1 and 50. SAMPLE INPUT 6 add build_project 2 add write_report 3 add read_book 1 complete build_project print complete read_book SAMPLE OUTPUT write_report read_book Explanation Initially, three to-dos are added with different priorities. The \\"build_project\\" to-do is then marked as completed. When \\"print\\" is called, only the non-completed to-dos \\"write_report\\" and \\"read_book\\" are printed, sorted by their respective priorities and the order they were added. The \\"read_book\\" to-do is not completed until after the first \\"print\\" command.","solution":"class TodoItem: def __init__(self, name, priority): self.name = name self.priority = priority self.completed = False class TodoList: def __init__(self): self.todos = [] self.name_to_todo = {} def add(self, name, priority): todo = TodoItem(name, priority) self.todos.append(todo) self.name_to_todo[name] = todo def complete(self, name): if name in self.name_to_todo: self.name_to_todo[name].completed = True def print_active(self): active_todos = [ todo for todo in self.todos if not todo.completed ] active_todos.sort(key=lambda x: (-x.priority, self.todos.index(x))) for todo in active_todos: print(todo.name) def process_commands(commands): todo_list = TodoList() for command in commands: parts = command.split() if parts[0] == \\"add\\": name = parts[1] priority = int(parts[2]) todo_list.add(name, priority) elif parts[0] == \\"complete\\": name = parts[1] todo_list.complete(name) elif parts[0] == \\"print\\": todo_list.print_active()"},{"question":"Jake is working on a project where he needs to sort an array of integers. However, he can perform only one specific type of operation: in a single operation, he can select any two adjacent elements in the array and swap them. Jake wants to sort the array in ascending order using the minimum number of such operations. Can you help him determine the minimum number of adjacent swaps required to sort the array? An array a is sorted in ascending order if for every i from 1 to n-1, a[i] leq a[i+1]. # Input - The first line contains a single integer t (1 leq t leq 100) — the number of test cases. - For each test case: - The first line contains an integer n (1 leq n leq 2000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6), the elements of the array. # Output For each test case, output a single integer — the minimum number of adjacent swaps required to sort the array in ascending order. # Example Input 3 4 4 3 1 2 5 5 4 3 2 1 3 3 1 2 Output 5 10 2 # Note In the first test case, the array can be sorted in 5 swaps: 1. Swap 3 and 4: [3, 4, 1, 2] 2. Swap 1 and 4: [3, 1, 4, 2] 3. Swap 1 and 3: [1, 3, 4, 2] 4. Swap 2 and 4: [1, 3, 2, 4] 5. Swap 2 and 3: [1, 2, 3, 4] In the second test case, the completely reverse ordered array requires the maximum number of swaps, which is 10 (for a 5-element array). In the third test case, 2 swaps are enough to sort the array: 1. Swap 1 and 3: [1, 3, 2] 2. Swap 2 and 3: [1, 2, 3]","solution":"def min_adjacent_swaps_to_sort(n, arr): Returns the minimum number of adjacent swaps required to sort the array. swap_count = 0 # Implementing bubble sort logic to count the number of swaps for i in range(n): for j in range(n - 1 - i): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swap_count += 1 return swap_count def solve(t, test_cases): results = [] for n, arr in test_cases: results.append(min_adjacent_swaps_to_sort(n, arr)) return results"},{"question":"# Coordinating Cities In a country, there are several cities connected by one-way roads forming a network. The government wants to improve travel coordination by determining the shortest distance between specific pairs of cities. Your task is to write a function that computes the shortest path between each pair of cities using the provided road network and city pairs. The function `find_shortest_paths` takes as input: * `n`: an integer representing the number of cities, labeled from `0` to `n-1`. * `roads`: a list of tuples `(u, v, w)` where `u` and `v` are integers representing city `u` to city `v` connected by a road of length `w`. * `queries`: a list of tuples `(a, b)` where `a` and `b` are integers representing the pair of cities for which the shortest path distance needs to be computed. The function should return a list with the shortest path distance for each query pair. If there is no path between two cities, the distance for that query should be `-1`. Function Signature ```python def find_shortest_paths(n: int, roads: List[Tuple[int, int, int]], queries: List[Tuple[int, int]]) -> List[int]: ``` Inputs * `n`: `1 <= n <= 100` (number of cities) * `roads`: a list of tuples `[(u, v, w), ...]` where: * `0 <= u, v < n` * `1 <= w <= 1000` * `queries`: a list of tuples `[(a, b), ...]` where: * `0 <= a, b < n` Outputs * A list of integers representing the shortest distance for each pair in `queries`. If no path exists, return `-1` for that pair. Example ```python n = 6 roads = [(0, 1, 2), (1, 2, 3), (2, 3, 1), (3, 4, 5), (4, 5, 2), (1, 5, 10)] queries = [(0, 5), (2, 4), (0, 4)] find_shortest_paths(n, roads, queries) # Output: [12, 6, 11] ``` Notes * The function should consider all the pairs of cities given in `queries` and compute their shortest path distances efficiently. * The graph does not need to be strongly connected; some city pairs might not have any path connecting them.","solution":"from typing import List, Tuple import heapq def find_shortest_paths(n: int, roads: List[Tuple[int, int, int]], queries: List[Tuple[int, int]]) -> List[int]: # Create adjacency list graph = {i: [] for i in range(n)} for u, v, w in roads: graph[u].append((v, w)) def dijkstra(start, end): min_heap = [(0, start)] visited = set() distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return float(\'inf\') results = [] for (a, b) in queries: shortest_distance = dijkstra(a, b) if shortest_distance == float(\'inf\'): results.append(-1) else: results.append(shortest_distance) return results"},{"question":"Consider a sequence ( a_1, a_2, ldots, a_n ) of length ( n ). You are allowed to perform the following operation any number of times: 1. Choose any subarray ( a_i, a_{i+1}, ldots, a_j ) such that ( 1 leq i leq j leq n ). 2. Reverse that subarray. Determine the minimum number of operations required to make the sequence sorted in ascending order. -----Input----- The first line of input contains a single integer ( n ) (1 leq n leq 10^5). The second line contains ( n ) space-separated integers ( a_1, a_2, ldots, a_n ) (1 leq a_i leq 10^5). -----Output----- Output a single integer, the minimum number of operations required to sort the sequence. -----Examples----- Sample Input: 5 3 1 2 5 4 Sample Output: 2","solution":"def min_operations_to_sort(n, array): if n <= 1: return 0 sorted_array = sorted(array) if array == sorted_array: return 0 l, r = 0, n - 1 while l < n and array[l] == sorted_array[l]: l += 1 while r >= 0 and array[r] == sorted_array[r]: r -= 1 if l > r: return 0 if array[l:r+1] == sorted(array[l:r+1])[::-1]: return 1 return 2"},{"question":"You are given an array of integers and a value `k`. Your task is to compute the **number of distinct pairs** (i, j) (where i ne j) such that the sum of the elements at indexes `i` and `j` is equal to `k`. The function should return the count of such pairs. Example: Given the array [1, 5, 3, 3, 3, 1] and k = 6, there are 3 distinct pairs that sum to 6: (1, 5) and (3, 3). Although (3, 3) appears multiple times, we consider only one unique pair for each occurrence of `3` at different positions. Input: - An integer N which represents the size of the array (1 ≤ N ≤ 10^5). - An array of N integers. - An integer k. Output: - An integer representing the number of unique pairs whose elements sum to k. Sample Input: 6 1 5 3 3 3 1 6 Sample Output: 3 Explanation: The pairs that sum to 6 are (1, 5), (3, 3) and (1, 5) again, hence there are only 3 distinct pairs: (1, 5), (3, 3) and (1, 5). Hint: Use a hash map to keep track of the occurrences of each number and efficiently find the complement needed to reach the sum k.","solution":"def count_pairs_with_sum_k(array, k): Given an array of integers and a value `k`, return the number of distinct pairs (i, j) (where i != j) such that the sum of the elements at indexes `i` and `j` is equal to `k`. Parameters: array (list): List of integers. k (int): Target sum. Returns: int: Number of distinct pairs whose elements sum to `k`. if len(array) < 2: return 0 seen = {} count = 0 pairs = set() for num in array: complement = k - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen[num] = seen.get(num, 0) + 1 return len(pairs)"},{"question":"Jade is organizing a book fair where she wants to display a selection of new books in a particular order based on their popularity scores. The books are numbered from 1 to n, and each book has a unique popularity score assigned to it. Jade wants to arrange the books in descending order of their scores. Can you help her sort the books? -----Input----- The first line contains a single integer n (1 leq n leq 100), the number of books. The second line contains n space-separated integers, where the i-th integer is the popularity score of the i-th book. -----Output----- Print a single line with n integers, representing the book numbers in the order they should be displayed, sorted by their popularity scores in descending order. -----Examples----- Sample Input: 4 10 50 30 20 Sample Output: 2 3 4 1 Sample Input: 3 5 15 10 Sample Output: 2 3 1","solution":"def sort_books_by_popularity(n, scores): Returns the order of book numbers sorted by their popularity scores in descending order. Parameters: n (int): Number of books. scores (list): List of popularity scores of the books. Returns: list: List of book numbers sorted by their popularity scores in descending order. # Combine book numbers and their scores books_with_scores = list(enumerate(scores, start=1)) # Sort books by scores in descending order books_with_scores.sort(key=lambda x: x[1], reverse=True) # Extract and return the sorted book numbers sorted_books = [book[0] for book in books_with_scores] return sorted_books # Example usage n = 4 scores = [10, 50, 30, 20] print(sort_books_by_popularity(n, scores)) # Output: [2, 3, 4, 1]"},{"question":"Write a function that takes in a list of dictionaries representing books and returns a list of the titles of books that have more than 100 pages and were published after the year 2000. Each dictionary in the list represents a book and has the following keys: - `title` (a string representing the title of the book) - `pages` (an integer representing the number of pages in the book) - `year` (an integer representing the year the book was published) Your function should return a list of strings corresponding to the titles of the books that meet both criteria. Example: Input: ```python books = [ {\\"title\\": \\"Book A\\", \\"pages\\": 95, \\"year\\": 1995}, {\\"title\\": \\"Book B\\", \\"pages\\": 150, \\"year\\": 2005}, {\\"title\\": \\"Book C\\", \\"pages\\": 105, \\"year\\": 2020}, {\\"title\\": \\"Book D\\", \\"pages\\": 200, \\"year\\": 1999} ] ``` Output: ```python [\\"Book B\\", \\"Book C\\"] ```","solution":"def filter_books(books): Returns a list of titles of books that have more than 100 pages and were published after the year 2000. :param books: List of dictionaries, each representing a book :return: List of book titles meeting both criteria return [book[\'title\'] for book in books if book[\'pages\'] > 100 and book[\'year\'] > 2000]"},{"question":"Given a matrix grid[][] of size N x N consisting of positive integers, find the longest path from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) such that the path strictly increases and each step you take can only be downward or rightward. Returning the length of the longest increasing path. Example 1: Input: grid[][] = [[1, 2, 3], [6, 5, 4], [7, 8, 9]] Output: 5 Explanation: The longest increasing path is: [1, 2, 3, 4, 9]. Example 2: Input: grid[][] = [[1, 1, 1], [1, 1, 1], [1, 1, 1]] Output: 1 Explanation: No increasing path is possible. Your Task: You don\'t need to read or print anything. Your task is to complete the function longestPath() which takes the matrix grid[][] as input parameter and returns the length of the longest strictly increasing path from the top-left corner to the bottom-right corner. Expected Time Complexity: O(N^2) Expected Space Complexity: O(N^2) Constraints: 1 <= N <= 100 1 <= grid[i][j] <= 10000","solution":"def longestPath(grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < n def dfs(x, y, prev_val): if not is_valid(x, y) or grid[x][y] <= prev_val: return 0 if dp[x][y] != -1: return dp[x][y] current_val = grid[x][y] down_path = dfs(x + 1, y, current_val) right_path = dfs(x, y + 1, current_val) dp[x][y] = 1 + max(down_path, right_path) return dp[x][y] n = len(grid) dp = [[-1 for _ in range(n)] for _ in range(n)] return dfs(0, 0, -1)"},{"question":"Tina is working on a project that involves analyzing temperature readings taken from various cities for a given number of days. Each city has recorded the highest temperature for every day, and Tina has all the data for M cities over N days. Tina is interested in finding the maximum temperature recorded on each day across all cities. Can you help her with this task? Input: The first line contains two integers M and N, denoting the number of cities and the number of days respectively. The next M lines each contain N space-separated integers representing the daily temperatures recorded for each city. Output: Print N space-separated integers, where each integer represents the maximum temperature recorded on that day across all cities. Constraints: 1 ≤ M, N ≤ 1000 -50 ≤ Temperature readings ≤ 50 SAMPLE INPUT 3 5 30 25 28 29 32 31 24 27 26 30 29 26 24 27 31 SAMPLE OUTPUT 31 26 28 29 32 Explanation The maximum temperatures for the given days are calculated as follows: - For Day 1: max(30, 31, 29) = 31 - For Day 2: max(25, 24, 26) = 26 - For Day 3: max(28, 27, 24) = 28 - For Day 4: max(29, 26, 27) = 29 - For Day 5: max(32, 30, 31) = 32","solution":"def find_max_temperatures(M, N, temperature_data): Returns the daily maximum temperatures recorded across M cities over N days. :param M: int - number of cities :param N: int - number of days :param temperature_data: list of list containing temperature data for M cities over N days :return: list of N integers representing maximum temperatures for each day max_temperatures = [-float(\'inf\')] * N for city_data in temperature_data: for day in range(N): if city_data[day] > max_temperatures[day]: max_temperatures[day] = city_data[day] return max_temperatures"},{"question":"A team of engineers is working on a project to develop a new kind of social network structure. They want to create a fair and balanced network where no two users have too much influence compared to each other. In mathematical terms, they want the network to form a bipartite graph. A graph is bipartite if it is possible to group its vertices into two sets such that every edge connects a vertex in the first set with a vertex in the second set. The task is to determine whether a given undirected graph is bipartite. Input The first line of input contains two integers, n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000), representing the number of vertices and edges in the graph, respectively. Each of the next m lines contains two integers, u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertex u and vertex v. There are no duplicate edges in the graph. Output Print \\"YES\\" if the graph is bipartite, otherwise print \\"NO\\". SAMPLE INPUT 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT YES SAMPLE INPUT 3 3 1 2 2 3 3 1 SAMPLE OUTPUT NO","solution":"def is_bipartite(n, m, edges): Determines if the given graph is bipartite. Parameters: - n (int): The number of vertices in the graph. - m (int): The number of edges in the graph. - edges (list of tuples): Each tuple represents an edge between two vertices. Returns: - str: \\"YES\\" if the graph is bipartite, otherwise \\"NO\\". from collections import deque # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize color array color = [-1] * (n + 1) # Function to check if the graph is bipartite using BFS def bfs_check(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, n + 1): if color[i] == -1: if not bfs_check(i): return \\"NO\\" return \\"YES\\""},{"question":"```markdown A company has recently implemented a new employee of the month award system. Every employee receives a score based on their performance each week. Given a list of scores for several employees over several weeks, determine the employee who consistently performed the best throughout the period. Each row in the input represents the scores of one employee over several weeks. Input The first line contains two integers, `n` (the number of employees) and `m` (the number of weeks). Each of the next `n` lines contains `m` integers, where the `j-th` integer in the `i-th` line represents the score of the `i-th` employee during the `j-th` week. Output Output the 1-based index of the employee who has the highest average score over the given weeks. In case of a tie, return the lowest index. Example Input 3 4 10 20 15 10 20 10 20 10 10 10 10 10 Output 2 ```","solution":"def best_employee(n, m, scores): if n == 0 or m == 0: return -1 best_index = 0 highest_average = -float(\'inf\') # Start with the lowest possible average for i in range(n): total_score = sum(scores[i]) average_score = total_score / m if average_score > highest_average: highest_average = average_score best_index = i return best_index + 1 # Return 1-based index"},{"question":"Alicia is a botanist who loves to grow different types of plants. Each type of plant needs a specific amount of water each day. She has a variety of plants in her garden, and she\'d like to know if she can design an automatic watering system that can water all her plants exactly. Alicia has a limited amount of water that she can use each day, and she wants to configure the system to use exactly this amount of water. However, she needs to know if the total amount of water required by the plants can be evenly distributed so that no plant is overwatered. Given the number of plants and the water requirement of each plant, determine if Alicia can set up her watering system so that the total amount of water used is exactly equal to the given limit, without splitting the water requirement of any plant. Input: The input begins with a single integer M (1 ≤ M ≤ 300), the number of test cases. For each test case, the first line contains a positive integer N (1 ≤ N ≤ 200), the number of plants. The second line contains N positive integers each representing the daily water requirement for each plant in liters (Wi ≤ 10^6). The third line contains a single integer K (1 ≤ K ≤ 10^9) representing the total amount of water available each day in liters. Output: For each test case, print \\"YES\\" if it\'s possible to water all plants exactly with the given amount of water, otherwise print \\"NO\\". SAMPLE INPUT: 2 3 1 2 3 6 3 5 10 15 40 SAMPLE OUTPUT: YES NO Explanation: In the first test case, the sum of the water requirements (1 + 2 + 3) is equal to the available water (6), thus the answer is \\"YES\\". In the second test case, the sum of the water requirements (5 + 10 + 15) is not equal to the available water (40), thus the answer is \\"NO\\".","solution":"def can_water_plants(M, test_cases): results = [] for i in range(M): N, water_requirements, K = test_cases[i] if sum(water_requirements) == K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing the heights of trees in a row. A particular tree is considered to be \\"visible\\" if there is no tree of greater height standing between it and the rightmost tree in the row. Your task is to find the total number of visible trees. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of trees. The second line contains n integers h_1, h_2, ..., h_n (1 le h_i le 10^9), where h_i is the height of the i-th tree. -----Output----- Print one integer — the number of visible trees. -----Examples----- Input 5 2 5 3 4 1 Output 3 Input 4 1 2 3 4 Output 1","solution":"def count_visible_trees(n, heights): Returns the number of visible trees in the row. Parameters: n : int - The number of trees heights : list - List of integers representing the heights of the trees Returns: int - The number of visible trees if n == 0: return 0 max_height = -1 visible_count = 0 for i in range(n-1, -1, -1): if heights[i] > max_height: visible_count += 1 max_height = heights[i] return visible_count"},{"question":"A group of robots is trying to navigate a maze to reach a destination point. The maze is represented as an MxN grid where each cell can either be empty (0) or contain an obstacle (1). The robots can only move up, down, left, or right, and they aim to find the shortest path from the top-left corner of the grid to the bottom-right corner. If it\'s impossible to reach the destination, return -1. Write a function to help the robots find the shortest path length. Input: The first line of the input contains T, the number of test cases. Each test case starts with two integers M and N, representing the number of rows and columns of the grid. The next M lines each contain N space-separated integers (0 or 1), which make up the grid. Output: For each test case, print the length of the shortest path or -1 if no path exists. Constraints: 1 ≤ T ≤ 100 1 ≤ M, N ≤ 100 SAMPLE INPUT: 2 3 3 0 0 0 1 1 0 0 0 0 3 3 0 1 0 1 0 1 0 1 0 SAMPLE OUTPUT: 4 -1 Explanation: In the first case, the shortest path is from (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), with a total path length of 4. In the second case, no path exists from (0,0) to (2,2) due to obstacles.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a maze grid from top-left (0,0) to bottom-right (M-1, N-1). M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return -1 # No path if start or end is blocked directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == M - 1 and y == N - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # No path found def solve_maze(T, test_cases): Process multiple test cases and return the results as a list results = [] for t in range(T): M, N, grid = test_cases[t] results.append(shortest_path(grid)) return results"},{"question":"The local zoo is organizing a fun event where children can visit on their birthdays. To make the visits more enjoyable, they have decided to arrange a series of activities based on the child\'s age. If an activity consists of a certain number of games, the child will participate in a series of these games sequentially. However, the child may get bored if they play too many of the same game in a row. The zoo event planners need a program that alternates between two different types of games in the following fashion: - If the child’s age is an odd number of games, the sequence should start with \\"Game A\\". - If the child’s age is an even number of games, the sequence should start with \\"Game B\\". The result should be a string that describes the sequence of games up to the given age of the child, separated by \\" then \\". For example, if the age is 3, the sequence should be \\"Game A then Game B then Game A\\", and if the age is 4, the sequence should be \\"Game B then Game A then Game B then Game A\\". -----Input----- The input is a single integer age (1 ≤ age ≤ 100) — the number of games for the child’s age. -----Output----- Print the sequence of games in one line according to the given rules. -----Examples----- Input 1: 3 Output 1: Game A then Game B then Game A Input 2: 4 Output 2: Game B then Game A then Game B then Game A Input 3: 1 Output 3: Game A","solution":"def game_sequence(age): Returns the sequence of games based on the child\'s age. Parameters: age (int): The child\'s age. Returns: str: A string representing the sequence of games. games = [] for i in range(age): if (i + (age % 2)) % 2 == 0: games.append(\\"Game B\\") else: games.append(\\"Game A\\") return \\" then \\".join(games)"},{"question":"Alex loves playing with blocks. He has three types of blocks: `A`, `B`, and `C`. Each type of block has a different purpose and must be used in combination to form structures. Alex defines a valid structure as a string of blocks where every `A` must be followed immediately by a `B`, and every `B` must be followed immediately by a `C`; valid structures cannot have any other order or combination. Alex has `a` blocks of type `A`, `b` blocks of type `B`, and `c` blocks of type `C`, and he wants to form as many valid structures as possible. Given the number of each type of block that Alex has, determine the maximum number of valid structures he can form. -----Input----- The first line contains a single integer `a` (1 ≤ a ≤ 100) — the number of type `A` blocks Alex has. The second line contains a single integer `b` (1 ≤ b ≤ 100) — the number of type `B` blocks Alex has. The third line contains a single integer `c` (1 ≤ c ≤ 100) — the number of type `C` blocks Alex has. -----Output----- Print the maximum number of valid structures Alex can form. -----Example----- Input 3 5 2 Output 2 Explanation: Alex can form two valid structures \\"ABC\\" using two `A` blocks, two `B` blocks, and two `C` blocks.","solution":"def max_valid_structures(a, b, c): Determines the maximum number of valid structures Alex can form using the given blocks. Parameters: a (int): Number of type A blocks. b (int): Number of type B blocks. c (int): Number of type C blocks. Returns: int: Maximum number of valid structures. return min(a, b, c)"},{"question":"You are given a binary string `s` of length `n`. A contiguous segment of this string is called a \\"block\\" if it contains only \'1\'s or only \'0\'s. Your task is to count the number of different block lengths present in the string. You need to calculate how many distinct lengths of \\"1\\" blocks and \\"0\\" blocks appear in `s`. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the length of the string. - The second line contains a binary string `s` of length `n`. # Output - Print two integers: the number of distinct \\"1\\" block lengths and the number of distinct \\"0\\" block lengths. # Example Input ``` 10 1100011110 ``` Output ``` 2 2 ``` Explanation - The binary string has the following \\"1\\" blocks: \\"11\\", \\"1111\\", \\"1\\" - Distinct lengths are 2, 4, and 1 (3 different lengths in total) - The binary string has the following \\"0\\" blocks: \\"000\\", \\"0\\", - Distinct lengths are 3, 1 (2 different lengths in total) In this example, the number of distinct \\"1\\" block lengths is 2, and the number of distinct \\"0\\" block lengths is 2. Input ``` 5 00000 ``` Output ``` 0 1 ``` Explanation - The binary string has no \\"1\\" blocks. - The binary string has one \\"0\\" block of length 5. In this example, there are no distinct \\"1\\" block lengths, and one distinct \\"0\\" block length (5).","solution":"def count_distinct_block_lengths(n, s): Counts the number of distinct block lengths for \'1\' and \'0\' blocks in the binary string s. Parameters: n (int): Length of the binary string. s (str): Binary string of length n. Returns: tuple: A tuple containing two integers: - The number of distinct \'1\' block lengths. - The number of distinct \'0\' block lengths. if n == 0: return (0, 0) one_block_lengths = set() zero_block_lengths = set() current_char = s[0] current_length = 1 for i in range(1, n): if s[i] == current_char: current_length += 1 else: if current_char == \'1\': one_block_lengths.add(current_length) else: zero_block_lengths.add(current_length) current_char = s[i] current_length = 1 # Add the last block after the loop if current_char == \'1\': one_block_lengths.add(current_length) else: zero_block_lengths.add(current_length) return (len(one_block_lengths), len(zero_block_lengths))"},{"question":"Given a binary tree, implement functions to support the following operations: * addNode(value): Add a new node with the integer value value to the binary tree. * deleteNode(value): Delete the node with the integer value value from the binary tree if it exists. * findNode(value): Print \\"Exist\\" if a node with the integer value value exists in the binary tree, otherwise print \\"Not Exist\\". Assume that the tree starts as empty and has no duplicate values. Constraints * 1 leq q leq 100,000 * -1,000,000,000 leq value leq 1,000,000,000 Input The input is given in the following format: q query_1 query_2 : query_q Each query query_i is given as one of the following formats: add value or delete value or find value Output For each findNode operation, print \\"Exist\\" or \\"Not Exist\\" in a line. Example Input 7 add 10 add 5 add 15 find 10 delete 10 find 10 find 5 Output Exist Not Exist Exist","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None class BinaryTree: def __init__(self): self.root = None def addNode(self, value): if self.root is None: self.root = TreeNode(value) else: self._addNode(self.root, value) def _addNode(self, node, value): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._addNode(node.left, value) else: if node.right is None: node.right = TreeNode(value) else: self._addNode(node.right, value) def findNode(self, value): return \\"Exist\\" if self._findNode(self.root, value) else \\"Not Exist\\" def _findNode(self, node, value): if node is None: return False if node.value == value: return True elif value < node.value: return self._findNode(node.left, value) else: return self._findNode(node.right, value) def deleteNode(self, value): self.root = self._deleteNode(self.root, value) def _deleteNode(self, node, value): if node is None: return node if value < node.value: node.left = self._deleteNode(node.left, value) elif value > node.value: node.right = self._deleteNode(node.right, value) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._minValueNode(node.right) node.value = temp.value node.right = self._deleteNode(node.right, temp.value) return node def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current"},{"question":"# Reverse Spiral Matrix A matrix is a rectangular 2D array of numbers. You are given an `m x n` matrix. Your task is to create a function that returns an array of integers representing the reverse spiral traversal of the matrix. **Reverse Spiral Traversal:** The reverse spiral order starts from the bottom-right corner of the matrix and then moves left, then up, then right, then down, and so on, until all elements of the matrix are traversed. For example: Given the following matrix: ``` [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The reverse spiral order traversal of the matrix would be: ``` [16, 15, 14, 13, 9, 5, 1, 2, 3, 4, 8, 12, 11, 10, 6, 7] ``` # Function Signature ```python def reverse_spiral(matrix: List[List[int]]) -> List[int]: pass ``` # Input: - `matrix`: A list of lists of integers representing an `m x n` matrix. # Output: - A list of integers representing the elements of the matrix in reverse spiral order. # Examples: ```python assert reverse_spiral( [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ]) == [16, 15, 14, 13, 9, 5, 1, 2, 3, 4, 8, 12, 11, 10, 6, 7] assert reverse_spiral( [ [2, 3] ]) == [3, 2] assert reverse_spiral( [ [1], [2], [3], [4] ]) == [4, 3, 2, 1] ``` # Notes: - The matrix will not be empty. - The matrix will be a valid rectangular matrix, meaning that all rows will have the same number of columns. You are expected to write efficient and clean code that handles different edge cases and follows the constraints.","solution":"from typing import List def reverse_spiral(matrix: List[List[int]]) -> List[int]: if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) result = [] top, bottom, left, right = 0, m - 1, 0, n - 1 while top <= bottom and left <= right: for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 if top <= bottom: for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 if left <= right: for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 return result"},{"question":"In a faraway land, there is a mystical forest with enchanted trees. Each tree has magical fruits, and each fruit provides a certain amount of magical energy. A wizard wants to collect the fruits to maximize his magical energy, but there\'s a catch: He can only gather fruits from non-adjacent trees to avoid suspicion from the forest\'s guardian spirits. Your task is to help the wizard determine the maximum magical energy he can collect without drawing the ire of the spirits. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of trees in the forest. The second line contains N space-separated integers E1, E2, ... , EN where Ei denotes the magical energy of the ith tree. -----Output----- For each test case, output a single line containing the maximum magical energy the wizard can collect. -----Constraints----- - T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ Ei ≤ 1000 -----Example----- Input: 2 3 1 2 3 4 2 1 4 5 Output: 4 7","solution":"def max_magical_energy(t, test_cases): def max_energy_from_trees(n, energies): if n == 0: return 0 if n == 1: return energies[0] if n == 2: return max(energies[0], energies[1]) dp = [0] * n dp[0] = energies[0] dp[1] = max(energies[0], energies[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + energies[i]) return dp[-1] results = [] for test in test_cases: n = test[0] energies = test[1] results.append(max_energy_from_trees(n, energies)) return results"},{"question":"Problem: Lexicographical Subsequence Maximizer Ebi-chan has a string `S` consisting of lowercase English letters. She is interested in finding the lexicographically smallest subsequence of `S` which, when each character is converted to its alphabetical order value (e.g., \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26) and summed, gives the maximum possible value. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Given a string `S`, output the lexicographically smallest subsequence of `S` that has the maximum possible sum of its characters\' alphabetical values. # Input A single line containing the string `S`. # Constraints - `1 leq |S| leq 100` - `S` contains only lowercase English letters. # Output Output a single line containing the lexicographically smallest subsequence with the maximum sum of alphabetical values. # Examples Example 1 **Input:** ``` acbd ``` **Output:** ``` cd ``` Explanation: The possible subsequences are: `a`, `c`, `b`, `d`, `ac`, `ab`, `ad`, `cb`, `cd`, `bd`, `acd`, `abd`, `cbd`, `cabd`. Among these, `cd` has the maximum sum (3+4=7) and is the lexicographically smallest one. Example 2 **Input:** ``` bac ``` **Output:** ``` c ``` Explanation: The possible subsequences with maximum sum are `b`, `a`, `c`, `ba`, `bc`, `ac`. Among these, `c` is the lexicographically smallest one with the sum of 3. Example 3 **Input:** ``` a ``` **Output:** ``` a ``` Explanation: The only possible subsequence is `a`. Example 4 **Input:** ``` abcd ``` **Output:** ``` d ``` Explanation: The lexicographically smallest subsequence with the maximum sum of alphabetical values is `d` (4).","solution":"def lexicographical_subsequence_max_sum(S): Returns the lexicographically smallest subsequence of S that has the maximum possible sum of alphabetical values of its characters. # Step 1: Find the maximum character in the string S which will guarantee the highest sum max_char = max(S) # Step 2: Filter out the subsequence consisting of the max_char(s) result = \'\'.join(c for c in S if c == max_char) return result"},{"question":"Let\'s dive into a different context but maintain the style, complexity, and scope: # Question: The ABBYY Smart Beaver\'s forest has an intricate network of n paths connecting various clearings. Each path can be traversed in both directions. The beaver wants to travel from one clearing to another while minimizing the travel effort, calculated as the sum of the effort required to traverse the paths. However, clearings and paths must be identified in the given input, and some paths might share the same clearing multiple times. Write a program that takes the number of clearings and paths, and details about the paths, then determines the minimal travel effort between two given clearings. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where n is the number of clearings and m is the number of paths. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a path between clearings u and v with effort w. The last line contains two integers s and t (1 ≤ s, t ≤ n), representing the start and destination clearings. Output Print an integer, the minimum travel effort required to travel from clearing s to clearing t. Output -1 if there is no path from s to t. Examples Input: 4 5 1 2 3 2 3 4 3 4 5 1 3 2 1 4 6 1 4 Output: 6","solution":"import heapq def minimal_travel_effort(n, m, paths, s, t): Determines the minimal travel effort between two clearings in a forest. Parameters: n (int): Number of clearings. m (int): Number of paths. paths (list of tuples): Each tuple (u, v, w) represents a path between clearings u and v with effort w. s (int): Start clearing. t (int): Destination clearing. Returns: int: The minimal travel effort, or -1 if no path exists. # Create adjacency list graph = [[] for _ in range(n)] for u, v, w in paths: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) # Dijkstra\'s algorithm to find the shortest path pq = [(0, s-1)] # (distance, node) distances = {i: float(\'inf\') for i in range(n)} distances[s-1] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue if current_node == t-1: return current_distance visited.add(current_node) for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[t-1] == float(\'inf\') else distances[t-1]"},{"question":"In this problem, your task is to create a simulation of a conveyor belt system that sorts packages by their weights. The conveyor belt moves packages through a series of n conveyor segments, and at each segment, a fork can direct packages to one of two paths based on a given weight threshold. Your goal is to determine the final positions of the packages after passing through all segments. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of conveyor segments. The next line contains n integers, representing the weight thresholds for each of these segments (1 ≤ threshold ≤ 1000). The third line contains an integer m (1 ≤ m ≤ 1000) representing the number of packages. The fourth line contains m integers, representing the weights of the packages (1 ≤ weight ≤ 1000). ----- Output ----- Print m lines, each containing an integer representing the final position of the corresponding package after passing through all conveyor segments. Each package starts at position 0 and moves to the left or right at each segment based on its weight and the threshold of that segment. If a package\'s weight is less than or equal to the threshold at a segment, it moves to the left (negative direction). If a package\'s weight is greater than the threshold, it moves to the right (positive direction). ----- Examples ----- Input 3 5 3 4 4 6 2 5 1 Output 3 6 1 -1 Explanation: - Package 1 with weight 6: - Segment 1: threshold 5, moves right -> position +1 - Segment 2: threshold 3, moves right -> position +2 - Segment 3: threshold 4, moves right -> position +3 - Package 2 with weight 2: - Segment 1: threshold 5, moves left -> position -1 - Segment 2: threshold 3, moves left -> position -2 - Segment 3: threshold 4, moves left -> position -3 - Package 3 with weight 5: - Segment 1: threshold 5, moves left -> position -1 - Segment 2: threshold 3, moves right -> position 0 - Segment 3: threshold 4, moves right -> position +1 - Package 4 with weight 1: - Segment 1: threshold 5, moves left -> position -1 - Segment 2: threshold 3, moves left -> position -2 - Segment 3: threshold 4, moves left -> position -3 Note that the final position for each package is calculated based on the sequence of movements through all conveyor segments.","solution":"def final_positions(n, thresholds, m, weights): final_positions = [] for weight in weights: position = 0 for threshold in thresholds: if weight <= threshold: position -= 1 else: position += 1 final_positions.append(position) return final_positions"},{"question":"In a kingdom far far away, there was a peculiar way of naming the royal orders for the king\'s army. Each order name was represented as a string of uppercase and lowercase English letters. Two orders were considered similar if they were anagrams of each other (i.e., one order name could be rearranged to form the other). The king wanted to group all similar orders together. Write a function `group_orders` that takes a list of order names and returns a list of lists, where each inner list contains orders that are anagrams of each other. The order of the output groups and the order of the strings within each group do not matter. For example: ```python group_orders([\\"duel\\", \\"dule\\", \\"speed\\", \\"spede\\", \\"deul\\", \\"cars\\"]) # returns [[\\"duel\\", \\"dule\\", \\"deul\\"], [\\"speed\\", \\"spede\\"], [\\"cars\\"]] group_orders([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"inlets\\"]) # returns [[\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"], [\\"google\\", \\"gogole\\"]] ``` For simplicity, you can assume that there will be no duplicate orders in the input list. To solve this problem, consider the following steps: 1. Create a helper function `is_anagram(s1: str, s2: str) -> bool` that checks whether two strings are anagrams. 2. Iterate through the list of orders and use the helper function to group anagrams. 3. Return the groups of anagrams as a list of lists. **Note**: Efficiency can be improved by sorting the characters of each string and using a dictionary to group anagrams.","solution":"from collections import defaultdict def group_orders(order_names): Groups the order names into lists of anagrams. :param order_names: List of order names (strings) :return: List of lists containing grouped anagrams anagram_groups = defaultdict(list) for order in order_names: sorted_order = \'\'.join(sorted(order)) anagram_groups[sorted_order].append(order) return list(anagram_groups.values())"},{"question":"You are given an array of n integers A = [a_1, a_2, dots, a_n] and another integer k. Determine if you can partition the array into exactly k non-empty subsets such that the sum of the elements in each subset is a prime number. -----Input----- The first line of input contains two integers n and k (1 le k le n le 50). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^3) — the elements of the array. -----Output----- If it\'s possible to partition the array into exactly k non-empty subsets with each subset summing to a prime number, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 5 2 3 8 12 5 13 Output YES Input 4 3 4 5 6 7 Output NO","solution":"from itertools import combinations import math def is_prime(x): Returns True if x is a prime number, otherwise False. if x <= 1: return False for i in range(2, int(math.sqrt(x)) + 1): if x % i == 0: return False return True def can_partition_prime_sum(n, k, array): Determine if the array can be partitioned into exactly k non-empty subsets such that the sum of the elements in each subset is a prime number. def can_partition(start_index, k_remaining, used, current_sum): if k_remaining == 0: return True if current_sum > 0 and is_prime(current_sum): return can_partition(0, k_remaining - 1, used, 0) for i in range(start_index, n): if not used[i]: used[i] = True if can_partition(i + 1, k_remaining, used, current_sum + array[i]): return True used[i] = False return False used = [False] * n return can_partition(0, k, used, 0) # Application of the function def partition_to_prime_subsets(n, k, array): if can_partition_prime_sum(n, k, array): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"You have a grid of size n x m filled with zeroes. There are q operations you need to perform on this grid. Each operation can be one of the following types: 1. Add a value `val` to each element in a row `r`. 2. Add a value `val` to each element in a column `c`. After performing all operations, you need to find the maximum element in the grid. Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 10^5) – the number of rows, the number of columns, and the number of operations. Each of the next q lines contains an operation in one of the following formats: - \\"row r val\\" (1 ≤ r ≤ n, -10^6 ≤ val ≤ 10^6) - \\"col c val\\" (1 ≤ c ≤ m, -10^6 ≤ val ≤ 10^6) Output Print a single integer – the maximum value in the grid after performing all operations. Example Input 3 3 5 row 1 1 col 2 -1 row 3 5 col 3 3 row 1 2 Output 6 Explanation Initially, the grid looks like this: 0 0 0 0 0 0 0 0 0 After performing the operations: 1. Add 1 to each element in row 1: 1 1 1 0 0 0 0 0 0 2. Add -1 to each element in column 2: 1 0 1 0 -1 0 0 0 0 3. Add 5 to each element in row 3: 1 0 1 0 -1 0 5 5 5 4. Add 3 to each element in column 3: 1 0 4 0 -1 3 5 5 8 5. Add 2 to each element in row 1, final grid is: 3 2 6 0 -1 3 5 5 8 The maximum value in the grid is 8.","solution":"def find_max_in_grid(n, m, q, operations): Find the maximum element in the grid after performing all operations. Parameters: n (int): Number of rows. m (int): Number of columns. q (int): Number of operations. operations (list of tuples): List of operations, each formatted as (\'type\', index, value). Returns: int: The maximum value in the grid. row_additions = [0] * n col_additions = [0] * m for operation in operations: type_, index, value = operation if type_ == \'row\': row_additions[index - 1] += value elif type_ == \'col\': col_additions[index - 1] += value # Find max in the grid by considering maximum row and column additions max_value = float(\'-inf\') for i in range(n): for j in range(m): max_value = max(max_value, row_additions[i] + col_additions[j]) return max_value"},{"question":"Develop a tool to analyze a sequence of numbers. Specifically, create a function that computes the maximum difference between two elements in a sequence, such that the larger element comes after the smaller one. Input The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of elements in the sequence. The second line contains n integers, each between -10^9 and 10^9, representing the elements of the sequence. Output Print a single integer which is the maximum difference between two elements such that the larger element comes after the smaller one. If no such pair exists, print -1. Examples Input 6 1 2 90 10 110 5 Output 109 Input 5 10 8 5 3 1 Output -1","solution":"def max_difference(n, seq): Computes the maximum difference between two elements in a sequence such that the larger element comes after the smaller one. :param n: integer, number of elements in the sequence :param seq: list of integers, the sequence of elements :return: integer, the maximum difference or -1 if no such pair exists if n < 2: return -1 min_element = seq[0] max_diff = -1 for i in range(1, n): if seq[i] > min_element: max_diff = max(max_diff, seq[i] - min_element) min_element = min(min_element, seq[i]) return max_diff"},{"question":"You are given an array of n integers where each integer is between 1 and n (inclusive). Some elements appear twice and others appear once. Your task is to determine the two integers that appear twice in the array. -----Constraints----- - The array will have exactly `n + 2` integers, where `2 < n < 1000`. -----Input----- Input is given from Standard Input in the following format: - n (the length of the array minus 2) - Array of `n + 2` integers separated by spaces -----Output----- Output two integers that appear twice in the array. The two integers should be printed on a single line separated by a space. -----Sample Input----- 6 1 3 2 5 4 3 6 2 -----Sample Output----- 3 2 In this case, the integers 3 and 2 appear twice in the array, so we should print \\"3 2\\". The order of the output does not matter; \\"2 3\\" is also correct.","solution":"def find_two_duplicates(n, arr): from collections import Counter count = Counter(arr) duplicates = [item for item, freq in count.items() if freq == 2] return duplicates"},{"question":"Create a function that takes an array of numbers and a target number, and returns all unique pairs of numbers that add up to the target number. The pairs should be returned as a list of tuples, and each tuple should have the smaller number first. The list should be sorted in ascending order by the first element in the tuple. Ex: Input = ([2, 4, 3, 5, 7, 8, 9], 10), Output = [(2, 8), (3, 7)]","solution":"def find_pairs(arr, target): Returns all unique pairs of numbers from the array that add up to the target number. Each pair (tuple) contains the smaller number first. The list of pairs is sorted by the first element in the tuple. arr.sort() seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"A large software company is organizing a coding contest with multiple rounds. In each round, participants are required to solve coding problems within a given time limit. Each problem has a certain difficulty level represented by an integer. You, as the contest organizer, need to prepare the difficulties for each round in such a way that the participants have a balanced experience. You are given an array `d` where `d_i` represents the difficulty of the `i`-th problem. You want to find out the smallest possible maximum difficulty difference between any two consecutive problems in the array after rearranging the problems. Your task is to minimize the maximum absolute difference between consecutive problems when arranged optimally. ----Input---- The first line of input contains a single integer t (1leq tleq 10000) — the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 2cdot 10^5). The second line of each test case contains n integers d_1, d_2, ldots, d_n (0 leq d_i leq 10^9). It is guaranteed that the sum of n over all test cases does not exceed 2cdot 10^5. ----Output---- For each test case, print a single line containing a single integer: the smallest possible maximum absolute difference between any two consecutive problems. ----Examples---- Input 3 3 1 4 7 4 10 20 30 40 5 5 3 8 1 6 Output 2 10 2 ----Note---- For the first test case, the optimal arrangement is [1, 4, 7]. The maximum difference between consecutive problems is 3. For the second test case, the optimal arrangement is [10, 20, 30, 40]. The maximum difference between consecutive problems is 10. For the third test case, the optimal arrangement is [3, 5, 6, 8, 1]. The maximum difference between consecutive problems is 2.","solution":"def min_max_difficulty_difference(t, test_cases): results = [] for test_case in test_cases: n, d = test_case d.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, d[i] - d[i-1]) results.append(min_diff) return results"},{"question":"You are given N integers representing the scores of participants in a competition. The competition awards medals to the top 3 highest scorers. If there are ties, all participants with the highest scores get medals. For example, if there are 5 top scores, all 5 participants get medals. Implement a program that prints the number of medals distributed. -----Constraints----- - 1 leq N leq 100 - 0 leq score leq 100 - All scores are integers. -----Input----- Input is given from Standard Input in the following format: N score_1 score_2 ... score_N -----Output----- Print the number of medals distributed. -----Sample Input----- 7 50 30 50 80 80 30 60 -----Sample Output----- 5 Explanation: The top 3 highest scores are 80, 60, and 50. There are two participants with a score of 80 and two with a score of 50, so a total of 5 medals are distributed.","solution":"def number_of_medals(N, scores): Returns the number of medals distributed to the top 3 highest scorers. if there are ties in the top scores, they all receive medals. if N == 0: return 0 # Find the top 3 unique scores unique_scores = list(set(scores)) unique_scores.sort(reverse=True) # Consider case where there might be less than 3 unique scores top_3_scores = unique_scores[:min(3, len(unique_scores))] # Count how many participants have scores in the top 3 medal_count = sum(scores.count(score) for score in top_3_scores) return medal_count"},{"question":"Given an array consisting of n elements, you need to determine the length of the longest sequence of integers such that the difference between consecutive elements is the same. This sequence does not have to be contiguous, but the order of elements must be preserved. Example arr=[1,7,10,13,14,19] textbf{arr} represents a series of integers. From the given sequence, the longest sequence with a constant difference between consecutive elements would be [1,7,13,19] (with a common difference of 6), which has a length of 4. Function Description Complete the longestArithmeticSequence function in the editor below. longestArithmeticSequence has the following parameter: - int arr[n]: the array from which to build the sequence. Returns - int: the length of the longest arithmetic sequence. Input Format The first line contains an integer boldsymbol{t}, the number of test cases. Each test case has 2 lines: - The first line contains an integer n, the number of elements in the array textbf{arr}. - The second line contains n space-separated integers, arr[i], the elements of the array. Constraints 1leq tleq100 2leq n leq1000 1leq arr[i] leq10^5 Sample Input STDIN Function ----- -------- 2 t = 2 6 arr[] size n = 6 1 7 10 13 14 19 arr = [1, 7, 10, 13, 14, 19] 5 arr[] size n = 5 10 20 30 40 50 arr = [10, 20, 30, 40, 50] Sample Output 4 5 Explanation For the first test case, [1, 7, 13, 19] is the longest arithmetic sequence with a difference of 6. For the second test case, the entire array [10, 20, 30, 40, 50] forms an arithmetic sequence with a difference of 10.","solution":"def longestArithmeticSequence(arr): Function to find the length of the longest arithmetic sequence where the difference between consecutive elements is the same. if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [{} for _ in range(n)] max_length = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Write a function that takes an array of integers and returns a new array where each element is the product of all other elements in the original array except for the element at the same index. For example, ``` solve([1, 2, 3, 4, 5]) = [120, 60, 40, 30, 24] ``` You must solve it without using division, and your solution should have a time complexity of O(n). Input list will consist of integers. Good luck! If you like this Kata, please try: [Sum of Pairs](https://www.codewars.com/kata/54d81488b981293527000c8f) [Unique In Order](https://www.codewars.com/kata/54e6533c92449cc251001667)","solution":"def solve(arr): Given an array of integers, returns a new array where each element is the product of all other elements in the original array except for the element at the same index. n = len(arr) # Create two arrays to store the product from left and right up to the current index left_products = [1] * n right_products = [1] * n output = [1] * n # Fill left_products for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right_products for j in range(n - 2, -1, -1): right_products[j] = right_products[j + 1] * arr[j + 1] # Fill the output array by multiplying left_products and right_products for k in range(n): output[k] = left_products[k] * right_products[k] return output"},{"question":"A company needs to track employee records. Each record contains an employee\'s ID, their name, and their department. When given a list of employee records and their department, you need to find the employee with the given ID and return their name and department. Input The first line contains an integer T, the number of employee records. Each of the next T lines contains three space-separated values: an integer ID, a string Name, and a string Department. The last line contains an integer Q, the ID of the employee whose record you need to find. Output Output the name and department of the employee with the given ID. If no employee with such ID exists, output \\"Employee not found\\". Constraints 1 ≤ T ≤ 100 1 ≤ ID ≤ 10000 1 ≤ |Name|, |Department| ≤ 100 SAMPLE INPUT 3 1 Alice HR 2 Bob IT 3 Charlie Marketing 2 SAMPLE OUTPUT Bob IT","solution":"def find_employee(T, records, Q): Finds the employee with the given ID and returns their name and department. Parameters: - T: int, number of employee records. - records: list of tuples, where each tuple contains (ID, Name, Department). - Q: int, ID of the employee to find. Returns: - str: \\"Name Department\\" for the employee with the given ID. - If the employee ID is not found, returns \\"Employee not found\\". employee_dict = {record[0]: record[1:] for record in records} if Q in employee_dict: name, department = employee_dict[Q] return f\\"{name} {department}\\" else: return \\"Employee not found\\" # Example usage: # T = 3 # records = [(1, \\"Alice\\", \\"HR\\"), (2, \\"Bob\\", \\"IT\\"), (3, \\"Charlie\\", \\"Marketing\\")] # Q = 2 # print(find_employee(T, records, Q)) # Output: \\"Bob IT\\""},{"question":"Emily loves decorating her living room with fairy lights, and she recently bought a large set of programmable LED strings to create beautiful patterns. Each LED string can be either turned on or off. Emily wants to know whether she can arrange her LED strings such that they alternate between on and off states. Emily defines a \\"valid\\" arrangement as one where no two adjacent LED strings have the same state (either both on or both off). Given an initial configuration of n LED strings (1 for on, 0 for off), write a program to determine if it\'s possible to rearrange the strings into a valid alternating configuration by changing the state of at most one LED string. Input: - The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). - For each test case: - The first line contains an integer n, the number of LED strings (1 ≤ n ≤ 10^6). - The second line contains n space-separated integers, representing the initial states of the LED strings (0 or 1). Output: For each test case, output \\"Yes\\" if it\'s possible to rearrange the LED strings into a valid alternating configuration by changing at most one LED string\'s state, otherwise output \\"No\\". Example: Input: 3 5 1 0 1 1 0 4 0 0 0 0 6 1 1 0 1 0 1 Output: Yes No Yes","solution":"def can_arrange_leds(test_cases): results = [] for n, leds in test_cases: count_not_alternating = 0 for i in range(n - 1): if leds[i] == leds[i + 1]: count_not_alternating += 1 if count_not_alternating > 1: results.append(\\"No\\") break else: results.append(\\"Yes\\") return results def process_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) leds = list(map(int, input_lines[index + 1].split())) test_cases.append((n, leds)) index += 2 return test_cases def main(input_string): test_cases = process_input(input_string) return can_arrange_leds(test_cases)"},{"question":"Taro has a collection of N paintings, each with a distinct beauty value. He wants to choose some of these paintings and hang them such that the sum of their beauty values is exactly K. Unlike common subset sum problems, he can only choose continuous segments of paintings. Given the N beauty values and the target sum K, determine if there exists at least one continuous subsequence of paintings whose beauty values sum up to K. If such a subsequence exists, return \\"Yes\\", otherwise return \\"No\\". Constraints * 1 ≦ N ≦ 1000 * -1000 ≦ beauty value ≤ 1000 * 1 ≦ K ≦ 1000000 Input The input is given from Standard Input in the following format: N K beauty_1 beauty_2 ... beauty_N Output Print \\"Yes\\" if there exists a continuous subsequence whose sum of beauty values is exactly K. Otherwise, print \\"No\\". Examples Input 5 12 2 4 6 3 9 Output Yes Input 4 15 1 2 3 4 Output No","solution":"def can_achieve_sum(N, K, beauties): Determines if there exists a continuous subsequence of paintings whose beauty values sum up to K. :param N: int - The number of paintings :param K: int - The target sum of the beauty values :param beauties: list of int - The beauty values of the paintings :return: str - \\"Yes\\" if such a subsequence exists, otherwise \\"No\\" current_sum = 0 sum_dict = {0: -1} for i in range(N): current_sum += beauties[i] if (current_sum - K) in sum_dict: return \\"Yes\\" sum_dict[current_sum] = i return \\"No\\""},{"question":"A network of servers in a company is designed such that each server is connected to one or more other servers through bidirectional communication links. Each link has an associated cost, which represents the time in milliseconds it takes to transmit data between the two servers it connects. The network suffers from frequent link failures, and you are tasked with determining the minimum time required to send a file between two given servers, assuming that all links are operational. Given the number of servers and the direct links between them along with their respective costs, determine the shortest time required to transmit data from server A to server B. -----Constraints----- - 1≤N≤1000 (number of servers) - 1≤M≤10000 (number of communication links) - 1≤U, V≤N (server indices for each link) - 1≤C≤1000 (cost of each link) - 1≤A, B≤N (servers between which to find the shortest transmission time) -----Input----- Input is given from Standard Input in the following format: N M U_1 V_1 C_1 U_2 V_2 C_2 ... U_M V_M C_M A B -----Output----- Print the minimum time in milliseconds required to send the file from server A to server B. If there is no route between A and B, print -1. -----Sample Input----- 5 6 1 2 10 1 3 20 2 3 5 2 4 1 3 4 3 4 5 2 1 5 -----Sample Output----- 16 In this example, the shortest path from server 1 to server 5 is: - Server 1 to Server 2 with cost 10 ms - Server 2 to Server 4 with cost 1 ms - Server 4 to Server 5 with cost 2 ms Total cost = 10 + 1 + 2 = 13 ms","solution":"import heapq def minimum_transmission_time(N, M, links, A, B): Calculates the minimum time required to transmit a file from server A to server B. Parameters: N (int): Number of servers. M (int): Number of communication links. links (list of tuples): Each tuple (U, V, C) represents a bidirectional link with cost C between server U and server V. A (int): Starting server. B (int): Destination server. Returns: int: The minimum transmission time in milliseconds. Returns -1 if there is no route between A and B. graph = {i: [] for i in range(1, N + 1)} for u, v, c in links: graph[u].append((v, c)) graph[v].append((u, c)) # Dijkstra\'s algorithm to find the shortest path from A to B pq = [(0, A)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[A] = 0 while pq: current_cost, current_node = heapq.heappop(pq) # Skip this node if a shorter path has been found if current_cost > dist[current_node]: continue for neighbor, weight in graph[current_node]: new_cost = current_cost + weight if new_cost < dist[neighbor]: dist[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return dist[B] if dist[B] != float(\'inf\') else -1"},{"question":"You are given a string containing words and punctuation marks. Your task is to count the frequency of each word in the string, ignoring case, and return the result as a dictionary. The words should only contain alphabetical characters, so punctuation should be disregarded in the word count. Write a function `word_count` that takes in a single argument: a string `s`. The function should return a dictionary where the keys are words in lowercase and the values are the count of each word. For example: ```python def word_count(s): # Your code here # Sample Inputs s1 = \\"Hello, hello! How are you? I hope you are well. Well, well, well...\\" s2 = \\"The quick brown fox jumps over the lazy dog. The dog barked.\\" # Sample Outputs print(word_count(s1)) # Output: {\'hello\': 2, \'how\': 1, \'are\': 2, \'you\': 2, \'i\': 1, \'hope\': 1, \'well\': 4} print(word_count(s2)) # Output: {\'the\': 3, \'quick\': 1, \'brown\': 1, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2, \'barked\': 1} ```","solution":"import re from collections import defaultdict def word_count(s): Returns the frequency of each word in the string `s` ignoring case and punctuation. The words should only contain alphabetical characters. # Replacing non-alphabetical characters with space, converting to lower case and splitting into words words = re.sub(r\'[^a-zA-Zs]\', \' \', s).lower().split() word_freq = defaultdict(int) # Counting frequency of each word for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"Given an array of integers, return a new array such that each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. For example, if the input array is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. If the input array is `[3, 2, 1]`, the expected output would be `[2, 3, 6]`. ```python def product_array(arr): # your code here # Example inputs and outputs # product_array([1, 2, 3, 4, 5]) should return [120, 60, 40, 30, 24] # product_array([3, 2, 1]) should return [2, 3, 6] ``` The array will always have at least two elements, and the product of any subset of the list will fit into a 32-bit integer. Good luck!","solution":"def product_array(arr): Returns a new array such that each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i-1] * arr[i-1] for i in range(n-2, -1, -1): right_products[i] = right_products[i+1] * arr[i+1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"# Description Given a string `str` and an integer `k`, your task is to determine if you can rearrange the characters in the string to form a palindrome. You can replace at most `k` characters in the string with any other character. Return `true` if it\'s possible to rearrange the characters to form a palindrome with at most `k` replacements, otherwise return `false`. # Detailed Explanation - A string is a palindrome if it reads the same backward as forward. - Redistribution of characters means that you can change the order of characters freely. - Replacement of characters means changing a given character to any other character of your choice. - You should ensure that the palindrome is formed in-place without the need for any additional characters. # Examples ```python can_form_palindrome(\\"aabbcc\\", 0) -> True can_form_palindrome(\\"aabbcc\\", 2) -> True can_form_palindrome(\\"aabbccc\\", 1) -> True can_form_palindrome(\\"aabbccd\\", 1) -> True can_form_palindrome(\\"abc\\", 1) -> False ``` # Notes - `str` will contain only lowercase alphabets (\'a\'-\'z\') and will have length between 1 and 10^5. - `k` will be a non-negative integer within the range from 0 to the length of the string.","solution":"def can_form_palindrome(s, k): from collections import Counter count = Counter(s) odd_counts = sum(1 for val in count.values() if val % 2 != 0) # For a string to be rearranged as a palindrome, at most one character can have an odd count if odd_counts == 0: return True else: # In a palindrome, there can be at most one character with an odd frequency return k >= (odd_counts - 1)"},{"question":"Jack loves building towers with blocks. He has a collection of different colored blocks labeled from 1 to n. Jack wants to build the tallest tower possible by stacking the blocks on top of each other according to a specific rule: a block can only be placed on another block if the color of the top block is not the same as the color of the block being placed. Given the number of blocks of each color, determine the height of the tallest tower Jack can build. -----Input----- The first line contains an integer n (1 leq n leq 100,000), the number of different colors of blocks. The second line contains n integers where the i-th integer represents the number of blocks of the i-th color. Each number is between 1 and 1,000,000. -----Output----- Print a single integer, the height of the tallest tower Jack can build. -----Examples----- Sample Input: 3 5 2 3 Sample Output: 10 Explanation: Jack can build the tower by alternating blocks of different colors, e.g., using all 5 blocks of the first color, then alternating the 2nd and 3rd colors. Sample Input: 4 1 1 1 1 Sample Output: 4 Explanation: Jack can simply stack one block of each color since no two adjacent blocks have the same color.","solution":"def tallest_tower(n, colors): Returns the height of the tallest tower that can be built with given blocks of different colors. :param n: number of different colors of blocks (1 <= n <= 100,000) :param colors: list of n integers where the i-th integer represents the number of blocks of the i-th color (1 <= colors[i] <= 1,000,000) :return: height of the tallest tower return sum(colors)"},{"question":"A group of friends is planning a welcome party for a new team member. The friends have a total of n snacks, and they want to arrange them in a single row such that the welcome party has exactly k unique types of snacks. Each snack has a type represented by an integer from 1 to m. To make the party more vibrant, they want the arrangement to have exactly k types of snacks. If it\'s not possible to achieve the required variety, they still want to know how many unique snacks they can manage to get in a single row closest to the target k. Write a function that returns the maximum number of unique snack types that can be arranged so the count is at least k, or returns -1 if no k unique types of snacks can be formed. Input The first line of the input contains two integers n (1 ≤ n ≤ 100 000) — the total number of snacks, and k (1 ≤ k ≤ 100 000) — the desired unique snack types. The second line contains n integers, each an integer between 1 and m, where m (1 ≤ m ≤ 100 000) is the number of different snack types. Output Print a single number — the maximum number of unique snack types that can be arranged close to the target k, or -1 if it\'s not possible to have at least k unique types. Examples Input 6 4 1 2 2 3 3 1 Output 3 Input 5 5 1 1 1 1 1 Output 1 Note In the first example, we have six snacks with types [1, 2, 2, 3, 3, 1]. It is not possible to reach exactly 4 unique snack types, so the closest we can get is 3 unique types. In the second example, we have five identical snacks, so we can only form 1 unique snack type, which is less than target 5, resulting in 1 unique type.","solution":"def max_unique_snacks(n, k, snacks): unique_snack_types = set(snacks) unique_count = len(unique_snack_types) if unique_count >= k: return k else: return unique_count # Test cases examples to run the function # print(max_unique_snacks(6, 4, [1, 2, 2, 3, 3, 1])) # Should output 3 # print(max_unique_snacks(5, 5, [1, 1, 1, 1, 1])) # Should output 1"},{"question":"You are tasked with helping a character navigate through a labyrinth. The labyrinth is represented as an n times m grid of cells, where each cell can either be an open space (\'.\') or a wall (\'#\'). The character starts at the top-left corner of the grid (cell (1,1)) and wishes to reach the bottom-right corner (cell (n,m)). The character can move up, down, left, or right to an adjacent open space, but cannot move outside the grid or into a wall. Your task is to determine the minimum number of moves the character needs to reach the bottom-right corner of the grid. If it is impossible to reach the goal, output -1. -----Input:----- - First line contains a single integer T, the number of test cases. - For each test case: - The first line consists of two integers n and m, the dimensions of the grid. - The next n lines each contain a string of m characters representing the grid. -----Output:----- - For each test case, output a single integer, the minimum number of moves required to reach the bottom-right corner, or -1 if it\'s impossible. -----Constraints:----- - 1 leq T leq 100 - 1 leq n, m leq 1000 -----Sample Input:----- 2 3 3 ... .#. ... 4 4 .... #. .... ...# -----Sample Output:----- 4 -1","solution":"from collections import deque def min_moves_to_reach_end(labyrinths): def bfs(grid, n, m): visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < n and 0 <= new_c < m and not visited[new_r][new_c] and grid[new_r][new_c] == \'.\': visited[new_r][new_c] = True queue.append((new_r, new_c, dist + 1)) return -1 results = [] for grid in labyrinths: n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': results.append(-1) else: results.append(bfs(grid, n, m)) return results def parse_input(T, data): labyrinths = [] index = 0 results = [] for _ in range(T): n, m = map(int, data[index].strip().split()) index += 1 grid = [data[index+i].strip() for i in range(n)] labyrinths.append(grid) index += n return labyrinths def labyrinth_solver(data): T = int(data[0].strip()) labyrinths = parse_input(T, data[1:]) return min_moves_to_reach_end(labyrinths)"},{"question":"Alice has a bag containing three types of fruits: apples, bananas, and cherries. She has eaten some of the fruits, and she wants to know how many of each type are left in the bag. Using her magical sense, Alice knows the initial quantities of each fruit and the number of each type she has eaten. Help Alice determine the number of each type of fruit remaining in the bag. -----Constraints----- - The initial and consumed quantities are non-negative integers. - The number of remaining fruits of each type will not be negative. -----Input----- Input is given from Standard Input in the following format: initial_apples initial_bananas initial_cherries eaten_apples eaten_bananas eaten_cherries -----Output----- Print the number of apples, bananas, and cherries remaining in the bag in the following format: remaining_apples remaining_bananas remaining_cherries -----Sample Input----- 5 8 10 1 3 4 -----Sample Output----- 4 5 6 Explanation: Initially, there were 5 apples, 8 bananas, and 10 cherries. Alice has eaten 1 apple, 3 bananas, and 4 cherries. Therefore, the remaining quantities are 4 apples, 5 bananas, and 6 cherries.","solution":"def remaining_fruits(initial_apples, initial_bananas, initial_cherries, eaten_apples, eaten_bananas, eaten_cherries): Calculates the remaining number of each type of fruit. Parameters: initial_apples (int): Initial number of apples. initial_bananas (int): Initial number of bananas. initial_cherries (int): Initial number of cherries. eaten_apples (int): Number of apples eaten. eaten_bananas (int): Number of bananas eaten. eaten_cherries (int): Number of cherries eaten. Returns: tuple: A tuple containing the remaining number of apples, bananas, and cherries. remaining_apples = initial_apples - eaten_apples remaining_bananas = initial_bananas - eaten_bananas remaining_cherries = initial_cherries - eaten_cherries return remaining_apples, remaining_bananas, remaining_cherries"},{"question":"Mila is an entomologist who has been studying the migration patterns of butterflies. She has marked certain butterflies with unique IDs at the start of the migration season. At the end of the season, she has managed to observe some butterflies again and record their IDs. Mila wants to determine if a marked butterfly has been seen again or not during the migration. Input The first line contains the number n (1 ≤ n ≤ 105) — the number of butterflies marked by Mila at the start of the season. The second line contains n space-separated unique IDs (strings of lowercase Latin letters, each up to 20 characters long) corresponding to the marked butterflies. The third line contains the number m (1 ≤ m ≤ 105) — the number of butterflies observed by Mila at the end of the season. The fourth line contains m space-separated unique IDs (strings of lowercase Latin letters, each up to 20 characters long) corresponding to the observed butterflies. Output For each marked butterfly ID, output \\"YES\\" if the butterfly has been observed at the end of the season, or \\"NO\\" otherwise. The output should be n space-separated strings in the order of the marked butterfly IDs. Examples Input 5 butterfly1 butterfly2 butterfly3 butterfly4 butterfly5 3 butterfly2 butterfly5 butterfly7 Output NO YES NO NO YES Input 4 migrator hibernation monarch skippers 2 monarch hibernation Output NO YES YES NO","solution":"def check_butterflies(n, marked_ids, m, observed_ids): observed_set = set(observed_ids) result = [\\"YES\\" if id in observed_set else \\"NO\\" for id in marked_ids] return result"},{"question":"Write a function that takes a list of integers and returns the sum of the squares of each integer in the list. Input :: [1, 2, 3, 4] Output :: \\"Sum of squares: 30\\" `This problem aims to help beginners practice basic iteration and arithmetic operations. Rank and upvote to support it.`","solution":"def sum_of_squares(int_list): Returns the sum of the squares of each integer in the given list. return sum(x ** 2 for x in int_list)"},{"question":"John is a software developer who loves playing with numbers. He recently encountered a new challenge while working on a project and decided to solve it using strings. Given two strings, s1 and s2, representing large non-negative integers, you need to simulate the addition of these two numbers and output the resulting sum as a string. Ensure that your solution can handle extremely large integers that may exceed the typical range of standard data types. INPUT The first line contains an integer t, representing the number of test cases. Each of the next t lines contains two space-separated strings, s1 and s2, representing the two large non-negative integers to be added. CONSTRAINTS 0 < t ≤ 100 1 ≤ |s1|, |s2| ≤ 10^5 Both s1 and s2 will be non-negative integer strings without leading zeros. OUTPUT For each test case, output the sum of the two integers represented by s1 and s2 as a string. SAMPLE INPUT 2 1234 5678 9999999999999999 1 SAMPLE OUTPUT 6912 10000000000000000","solution":"def add_large_numbers(s1, s2): Returns the sum of two large non-negative integers represented as strings. # Convert strings to integers, add them and convert back to string return str(int(s1) + int(s2)) def process_test_cases(t, test_cases): results = [] for s1, s2 in test_cases: results.append(add_large_numbers(s1, s2)) return results"},{"question":"In a distant land, the kingdom consists of N villages connected by M bidirectional roads. The kingdom is efficiently connected such that there is a path between any two villages. Due to this efficient connectivity, there\'s at most one ring in the network, i.e., the network is almost a tree structure. A trade caravan needs to travel from village 1 to village K and must avoid crossing any road more than once. The caravan can visit any village any number of times. Your task is to find the shortest path that the caravan can take from village 1 to village K. -----Input----- The first line of input contains three integers N, M, and K (2 le N le 10000, 1 le M le 2N-2, 1 le K le N) – the number of villages, the number of roads, and the village the caravan needs to reach. Each of the following M lines contains two different integers A and B (1 le A, B le N). These numbers indicate that there is a bidirectional road between villages A and B. No two villages will be directly connected by more than one road. -----Output----- Output the length of the shortest path from village 1 to village K on a single line. -----Examples----- Sample Input 1: 5 5 4 1 2 2 3 3 4 1 5 5 3 Sample Output 1: 3 Sample Input 2: 4 4 3 1 2 2 3 1 3 2 4 Sample Output 2: 1","solution":"import heapq def shortest_path(N, M, K, roads): def dijkstra(start, graph): distances = {node: float(\'infinity\') for node in range(1, N + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Build the graph graph = {i: [] for i in range(1, N + 1)} for road in roads: A, B = road graph[A].append((B, 1)) graph[B].append((A, 1)) distances_from_1 = dijkstra(1, graph) return distances_from_1[K]"},{"question":"A train journey involves traveling through multiple stations. Given a list of stations and the time taken to travel from each station to the next, calculate the total travel time for a given journey between two specific stations. Assume all times are given in minutes. -----Input----- - First line contains a positive integer N (2 <= N <= 100) - the number of stations. - Second line contains N-1 positive integers t1, t2, ..., t(N-1) (1 <= ti <= 100) - the time taken to travel from station i to station i+1. - Third line contains two integers S and E (1 <= S < E <= N) - the starting station and ending station for the required journey. -----Output----- Output a single integer representing the total travel time from station S to station E. -----Example----- Input: 5 10 15 20 25 2 4 Output: 35 Explanation: The time taken to travel from station 2 to station 4 is 15 (from station 2 to 3) + 20 (from station 3 to 4) = 35 minutes.","solution":"def total_travel_time(N, travel_times, S, E): Returns the total travel time from station S to station E. :param N: Number of stations :param travel_times: List of travel times between consecutive stations :param S: Starting station (1-indexed) :param E: Ending station (1-indexed) :return: Total travel time from S to E return sum(travel_times[S-1:E-1])"},{"question":"Lina has a list of integers a and another list of integers b. Both lists have the same length n. She wants to merge these lists into one list c of length 2n such that c has all elements from a and b in non-decreasing order. She can use the condition that both lists a and b are sorted in non-decreasing order. Lina can perform one operation which involves selecting an element from the head of either list a or list b, adding it to the list c, and removing it from the original list. She can repeat this operation until both lists a and b are empty. Write a program to help Lina find the non-decreasing merged list c. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains single integer n (1 le n le 1000) — the length of lists a and b. The second line of each test case contains n integers — the list a (1 le a_i le 10^6). The third line of each test case contains n integers — the list b (1 le b_i le 10^6). -----Output----- For each test case, output a single line containing 2n integers — the merged list c in non-decreasing order. -----Examples----- Input: 3 3 1 3 5 2 4 6 4 1 2 2 2 1 1 2 2 5 1 2 3 4 5 5 6 7 8 9 Output: 1 2 3 4 5 6 1 1 2 2 2 2 2 2 1 2 3 4 5 5 6 7 8 9 -----Note----- In the first sample: The merged list c will be [1, 2, 3, 4, 5, 6] using the merge sort principle. In the second sample: The merged list c will be [1, 1, 2, 2, 2, 2, 2, 2] as all elements are already in non-decreasing order. In the third sample: The merged list c will be [1, 2, 3, 4, 5, 5, 6, 7, 8, 9] as all elements are added one by one in an already sorted manner.","solution":"def merge_sorted_lists(n, a, b): Merges two sorted lists \'a\' and \'b\' of length \'n\' each into a single list \'c\' in non-decreasing order. c = [] i, j = 0, 0 while i < n and j < n: if a[i] <= b[j]: c.append(a[i]) i += 1 else: c.append(b[j]) j += 1 while i < n: c.append(a[i]) i += 1 while j < n: c.append(b[j]) j += 1 return c def merged_lists_for_tests(input_data): Processes multiple test cases and returns the results for each. results = [] t = input_data[0] index = 1 for _ in range(t): n = input_data[index] a = input_data[index + 1] b = input_data[index + 2] index += 3 result = merge_sorted_lists(n, a, b) results.append(result) return results"},{"question":"To help Bob solve his problem, you need to write a program that simulates a simplified plane navigation system. The plane starts at the origin (0, 0) and can receive several commands to change its position or check its current coordinates. The types of commands you need to handle are: * move x y — moves the plane from its current position to a new position (x, y). * distance x y — calculates and gives Bob the Euclidean distance from the plane\'s current position to the point (x, y). * origin — resets the plane\'s position back to the origin (0, 0). Note: There will be at least one command, and all coordinates in the input are integers and do not exceed the range [-10^9, 10^9]. # Input The first input line contains number n (1 ≤ n ≤ 2·10^5) — number of commands. The next n lines contain the descriptions of the commands. # Output For each \'distance\' command, output the Euclidean distance from the plane\'s current position to the specified coordinates rounded to six decimal places. The distances should be printed each on a new line. # Examples Input ``` 6 move 3 4 distance 0 0 move 1 1 distance 3 3 origin distance 2 2 ``` Output ``` 5.000000 2.828427 2.828427 ``` Input ``` 5 origin move 0 0 distance 1 1 move -1 -1 distance 0 0 ``` Output ``` 1.414214 1.414214 ``` # Explanation In the first example: - After `move 3 4`, the plane\'s position is (3, 4). - `distance 0 0` calculates the Euclidean distance from (3, 4) to (0, 0), which is √(3^2 + 4^2) = 5.000000. - After `move 1 1`, the plane\'s position is (1, 1). - `distance 3 3` calculates the Euclidean distance from (1, 1) to (3, 3), which is √((3 - 1)^2 + (3 - 1)^2) = 2.828427. - `origin` sets the plane\'s position back to (0, 0). - `distance 2 2` calculates the Euclidean distance from (0, 0) to (2, 2), which is √(2^2 + 2^2) = 2.828427.","solution":"from math import sqrt class PlaneNavigation: def __init__(self): self.x = 0 self.y = 0 def move(self, x, y): self.x = x self.y = y def distance(self, x, y): return sqrt((self.x - x) ** 2 + (self.y - y) ** 2) def origin(self): self.x = 0 self.y = 0 def process_commands(commands): plane = PlaneNavigation() results = [] for command in commands: parts = command.split() if parts[0] == \\"move\\": plane.move(int(parts[1]), int(parts[2])) elif parts[0] == \\"distance\\": dist = plane.distance(int(parts[1]), int(parts[2])) results.append(f\\"{dist:.6f}\\") elif parts[0] == \\"origin\\": plane.origin() return results"},{"question":"Given an N x M grid which contains some integers and empty spaces. You need to process the grid such that all numbers move to the bottom of their respective columns, leaving empty spaces at the top. Empty spaces are represented by -1. Example 1: Input: N = 3, M = 4 Grid = [[-1, 2, 3, -1], [5, -1, -1, 6], [-1, 7, -1, 8]] Output: Grid = [[-1, -1, -1, -1], [-1, 2, -1, 6], [5, 7, 3, 8]] Explanation: Moving all numbers to the bottom of their respective columns. Example 2: Input: N = 4, M = 3 Grid = [[-1, 1, -1], [-1, -1, 2], [3, -1, -1], [4, 5, 6]] Output: Grid = [[-1, -1, -1], [-1, -1, -1], [3, 1, 2], [4, 5, 6]] Explanation: Moving all numbers to the bottom of their respective columns. You do not need to read input or print anything. Your task is to complete the function `dropNumbersToBottom()` which takes the two integers N and M, and the grid as input parameters and returns the resulting grid after all numbers have dropped to the bottom. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(1) Constraints: 1 <= N, M <= 1000 -1 <= Grid[i][j] <= 10^5","solution":"def dropNumbersToBottom(N, M, grid): Modifies the grid such that all numbers move to the bottom of their respective columns, leaving empty spaces at the top. :param N: int, number of rows :param M: int, number of columns :param grid: List[List[int]] :return: modified grid for j in range(M): # Pointer to place the number at the bottom fill_position = N - 1 # Traverse from bottom to top in the current column for i in range(N - 1, -1, -1): if grid[i][j] != -1: # If we find a number, move it to the fill position grid[fill_position][j] = grid[i][j] fill_position -= 1 # Fill the rest of the column with -1 for i in range(fill_position + 1): grid[i][j] = -1 return grid"},{"question":"In a certain city, there is a plan to renovate several streets. The streets are represented as an array of length n, where each element denotes the current condition of the street as an integer. There are m renovation operations. Each operation is described by three integers, p, q, and v. Here, p and q are the starting and ending indices of the streets to be renovated, and v is the improvement value to be added to each street from index p to q inclusive. After performing all m operations, you need to determine the maximum condition value of the streets. Example n = 5 operations = [[1, 3, 10], [2, 4, 5], [3, 5, 2]] The array initially is [0, 0, 0, 0, 0]. In the first operation, add 10 to the streets from index 1 to 3: Now the array is [10, 10, 10, 0, 0]. In the second operation, add 5 to the streets from index 2 to 4: Now the array is [10, 15, 15, 5, 0]. In the third operation, add 2 to the streets from index 3 to 5: Now the array is [10, 15, 17, 7, 2]. The maximum condition is 17. Function Description Complete the `find_max_condition` function in the editor below. `find_max_condition` has the following parameters: - `int n`: the number of streets - `int operations[m][3]`: a 2-dimensional array of operations Returns - `int`: the maximum condition value of the streets after all operations Input Format The first line contains two integers, n and m, separated by a single space. m lines follow. Each of them contains three integers, p, q, and v, separated by spaces. Constraints 1 leq n leq 10^6 1 leq m leq 10^5 1 leq p leq q leq n 1 leq v leq 10^4 Sample Input ``` 5 3 1 3 10 2 4 5 3 5 2 ``` Sample Output ``` 17 ```","solution":"def find_max_condition(n, operations): Returns maximum condition value of streets after applying all operations. Parameters: n (int): the number of streets operations (list of list of int): a 2D array where each sublist contains 3 integers [p, q, v] Returns: int: the maximum condition value of the streets after all operations # Initialize the array representing street conditions streets = [0] * (n + 1) # Apply all operations using a difference array approach for p, q, v in operations: streets[p - 1] += v if q < n: streets[q] -= v # Convert the difference array to the actual condition values max_condition = current_condition = 0 for i in range(n): current_condition += streets[i] if current_condition > max_condition: max_condition = current_condition return max_condition"},{"question":"You are part of an archaeological team excavating an ancient city buried under layers of sediment. While working, you discover a structure that resembles a library with n ancient scrolls arranged in a single row. Each scroll is numbered from 1 to n from left to right and has an associated importance value in an array arr of length n where arr[i] is the importance value of the scroll i+1. On further investigation, you find that the rows are organized such that there is exactly one pair of scrolls (i, j) where arr[i] + arr[j] is divisible by 2 (i.e., their sum is even). Your task is to find this unique pair of scrolls. Note that there is a guaranteed solution. # Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of scrolls. The second line contains n integers separated by spaces where the i-th integer represents arr[i] (1 ≤ arr[i] ≤ 10^9) — the importance values of the scrolls. # Output Print two distinct integers i and j (1 ≤ i < j ≤ n), indicating the positions of the scrolls with the even sum. # Examples Example 1 **Input** ``` 5 1 3 5 2 8 ``` **Output** ``` 1 2 ``` Example 2 **Input** ``` 7 7 11 30 5 9 12 4 ``` **Output** ``` 3 6 ``` # Note In the first example, for scrolls 1 and 2, the sum of the importance values is 1 + 3 = 4 which is even. In the second example, for scrolls 3 and 6, the sum of the importance values is 30 + 12 = 42 which is even.","solution":"def find_even_sum_pair(n, arr): This function finds a pair of indices (i, j) such that the sum of arr[i-1] and arr[j-1] is even (1-based indexing). :param n: Number of scrolls :param arr: List of importance values of the scrolls :return: A tuple (i, j) # Separate the array into indices of even and odd values even_indices = [] odd_indices = [] for idx, value in enumerate(arr): if value % 2 == 0: even_indices.append(idx + 1) # +1 for 1-based index else: odd_indices.append(idx + 1) # It is guaranteed that there is exactly one pair whose sum is even, # so there will be at least one pair of either (even, even) or (odd, odd) if len(even_indices) >= 2: # Return the first two even indices return even_indices[0], even_indices[1] else: # Return the first two odd indices return odd_indices[0], odd_indices[1] # Example usage: # print(find_even_sum_pair(5, [1, 3, 5, 2, 8])) # Output: (1, 2) or (4, 5)"},{"question":"In the kingdom of Farland, there is a village with N unique houses, each of which is located on a different point in a 2D plane. The king wants to build a single road to collect taxes more efficiently. The road should be constructed such that it minimizes the total distance from each house to the road. The road can be any straight line, not necessarily aligned with the coordinate axes. The distance from a point (x, y) to a line Ax + By + C = 0 is given by the formula: [ text{distance} = frac{|Ax + By + C|}{sqrt{A^2 + B^2}} ] Your task is to determine the minimum possible total distance from all houses to this road. Input The input is formatted as follows. N x_1 y_1 x_2 y_2 : : x_N y_N The first line contains a single integer N (1 ≤ N ≤ 100,000) indicating the number of houses in the village. Each of the next N lines contains two integers x_i and y_i (|x_i|, |y_i| ≤ 10^9), representing the coordinates of the i-th house. Output Output the minimum possible total distance from all houses to the road with a precision of six decimal places. Example Input 3 1 2 3 4 5 6 Example Output 0.000000 Note: The sample provided above suggests that the optimal road can pass through all houses directly if all houses lie on the same line. Consider both vertical and horizontal roads (along the coordinate axes) as potential optimal solutions but be open to other orientations as well. The problem requires optimization techniques over floating-point arithmetic to achieve the precision of the output.","solution":"import numpy as np def minimize_total_distance(N, points): def distance_sum(m, b): return sum( abs(y - (m * x + b)) / np.sqrt(1 + m**2) for x, y in points ) if N == 1: return 0.0 x_coords, y_coords = zip(*points) x_mean = np.mean(x_coords) y_mean = np.mean(y_coords) numerator = sum((x - x_mean) * (y - y_mean) for x, y in points) denominator = sum((x - x_mean)**2 for x in x_coords) if denominator == 0: return 0.0 m = numerator / denominator b = y_mean - m * x_mean return distance_sum(m, b) def process_input_and_call_function(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) points = [] index = 1 for i in range(N): x = int(data[index]) y = int(data[index+1]) points.append((x, y)) index += 2 result = minimize_total_distance(N, points) print(f\\"{result:.6f}\\") if __name__ == \\"__main__\\": process_input_and_call_function()"},{"question":"Write a function `findLongestSubsequence(arr)` that takes an array of integers as input and returns the length of the longest subsequence that can be derived such that all elements in the subsequence are consecutive integers. The consecutive numbers can appear in any order in the original array. For example: If `arr` contains [1, 9, 3, 10, 4, 20, 2], the longest consecutive subsequence is [1, 2, 3, 4] and hence the output should be 4. If `arr` contains [8, 20, 7, 30], then the longest consecutive subsequence is [7, 8] and the output should be 2.","solution":"def findLongestSubsequence(arr): Returns the length of the longest subsequence of consecutive integers. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: # Check if it is the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"There are n cities in a country, and each city is connected to other cities via bi-directional roads with given lengths. You are a city planner tasked with ensuring that there is a direct road connection between every pair of cities. However, due to budget constraints, you need to find the minimum cost required to construct additional roads such that all cities are directly connected. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of cities and the number of existing roads, respectively. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — denoting a road between cities u and v with length w. Output Print a single integer, the minimum cost required to ensure all cities are directly connected. Examples Input 4 3 1 2 1 2 3 4 3 4 5 Output 6 Input 5 1 1 2 3 Output -1 Note In the first sample, the length of the new roads can be: - 1 and 3 with length 4 - 1 and 4 with length 5 In the second sample, it\'s impossible to connect all cities directly since there are not enough existing connections to form the necessary road network. So the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_cities(n, m, roads): if m < n - 1: return -1 # Not enough roads to connect all cities roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] i = 0 e = 0 while e < n - 1: if i >= len(roads): return -1 # Not enough roads to connect all cities u, v, w = roads[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result)"},{"question":"In a distant village, there\'s a peculiar tradition of distributing candies to children in a unique way. Each child standing in a line receives a certain amount of candies based on their relative standing and performance in school. The goal is to ensure that each child gets at least one candy, and any student who has higher performance than their immediate neighbors receives more candies than those neighbors. Given the performance scores of the children, determine the minimum number of candies needed to distribute according to the tradition. **Input:** - The first line contains an integer n (1 ≤ n ≤ 10^5) – the number of children. - The second line contains n space-separated integers, where the i-th integer represents the performance score of the i-th child. Each score is a positive integer no greater than 10^5. **Output:** - Print a single integer – the minimum number of candies required. **Examples:** **Input 1:** 5 1 2 2 3 4 **Output 1:** 9 **Explanation 1:** Candies distribution can be: [1, 2, 1, 2, 3], giving a total of 9 candies. **Input 2:** 3 3 2 1 **Output 2:** 6 **Explanation 2:** Candies distribution can be: [3, 2, 1], giving a total of 6 candies. **Note:** In the first example, the second child has higher performance than the first but the same as the third, so the candies need to reflect this distribution where the second child gets more candies than the first but not necessarily more than the third. The fourth child has a higher score than the third, hence more candies, and the same applies to the fifth child with respect to the fourth.","solution":"def min_candies(n, scores): if n == 1: return 1 candies = [1] * n # First pass: from left to right for i in range(1, n): if scores[i] > scores[i - 1]: candies[i] = candies[i - 1] + 1 # Second pass: from right to left for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1) return sum(candies)"},{"question":"Newton loves playing with arrays. He recently came across the concept of \\"palindromic arrays\\" and found it fascinating. To refresh, an array is called palindromic if it reads the same backward as forward. Here is how you can help Newton: Given an integer N, generate an array A of length 2N such that A forms a palindromic array, and all elements in A are unique integers between 1 and 4N inclusive. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer N. ------ Output ------ For each test case, print one line containing 2N space-separated integers that form a palindromic array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 500 the sum of N over all test cases does not exceed 500 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 2 1 2 ----- Sample Output 1 ------ 1 1 1 2 2 1 ----- Explanation 1 ------ For the first test case, the array of length 2 is [1, 1], which reads the same forward and backward. For the second test case, one possible palindromic array of length 4 is [1, 2, 2, 1]. There could be other valid outputs too, such as [3, 4, 4, 3], as long as the array reads the same backward and forward and elements are within the required range.","solution":"def generate_palindromic_array(n): Generates a palindromic array of length 2N with unique integers between 1 and 4N inclusive. array = list(range(1, n + 1)) return array + array[::-1] def solve_palindromic_arrays(test_cases): result = [] for n in test_cases: palindromic_array = generate_palindromic_array(n) result.append(\\" \\".join(map(str, palindromic_array))) return result"},{"question":"A group of robots is working on assembling different gadgets. Each robot handles a specific task in the assembly process, and their work is represented by discrete task codes. Unfortunately, due to a malfunction, some robots are missing phases in the task sequence they are handling. Your goal is to identify the missing task code in each robot\'s sequence. Each robot\'s task sequence is supposed to follow a pattern where each task code is a consecutive integer starting from the base task code for that robot. Given an expected sequence of task codes, find the missing task code for each faulty robot. Input The input consists of several datasets. Each dataset starts with the base task code `b` (an integer) and the number of tasks `n` (an integer) which represents the number of tasks the robot should have performed. This is followed by `n - 1` integers which represent the robot\'s observed task codes in increasing order with exactly one task code missing. You are to determine the missing task code for each robot. The end of the input is indicated by a line containing two zeros. Output For each dataset, output the missing task code in the sequence. Example Input 5 5 5 6 7 9 10 20 4 20 21 23 50 3 50 52 0 0 Output 8 22 51","solution":"def find_missing_task_sequence(dataset): result = [] for data in dataset: base_code, num_tasks, observed_tasks = data if base_code == 0 and num_tasks == 0: break full_sequence = set(range(base_code, base_code + num_tasks)) observed_set = set(observed_tasks) missing_code = list(full_sequence - observed_set)[0] result.append(missing_code) return result"},{"question":"Write a function called ```defangIPaddr``` that takes a string representing an IP address as an argument and returns a string where every period \\".\\" is replaced with \\"[.]\\". This is useful for leveraging URL filtering systems and safely transporting data without it being interpreted as actual IP addresses while logging or transporting. Example: Input: \\"192.168.0.1\\" Output: \\"192[.]168[.]0[.]1\\"","solution":"def defangIPaddr(address): Returns a defanged version of the given IP address, replacing every period (\'.\') with \'[.]\'. return address.replace(\'.\', \'[.]\')"},{"question":"James loves to collect rare stamps from different countries. There are N stamp stores in the city, each containing a certain number of rare stamps and each store is loved by James to a certain degree. However, James has limited time to visit these stores and he can only visit K stores by walking one after another in a straight line. You are to help James maximize his happiness by visiting exactly K consecutive stores. James\' happiness from visiting a store depends on the number of rare stamps and the love degree he has for that store. The happiness values are calculated for each store in the form of an array P, where P_i = S_i * L_i, S_i is the number of rare stamps in the ith store and L_i is the love degree he has for the ith store. Find the maximum sum of happiness James can get by visiting exactly K consecutive stores. Input Format: The first line contains two space-separated integers N and K, where N is the number of stores and K is the number of consecutive stores James can visit. Each of the next N lines contains two space-separated integers S_i and L_i, representing the number of rare stamps and the love degree for the ith store, respectively. Output Format: Output consists of one line, which contains the maximum sum of happiness that can be obtained by visiting exactly K consecutive stores. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ N - 1 ≤ S_i, L_i ≤ 10^4 SAMPLE INPUT 5 3 3 2 2 1 5 3 4 3 1 2 SAMPLE OUTPUT 52 Explanation: James can get the maximum happiness by visiting stores from index 2 to 4 (1-indexed): - Store 2: P_2 = 2 * 1 = 2 - Store 3: P_3 = 5 * 3 = 15 - Store 4: P_4 = 4 * 3 = 12 Total happiness = 2 + 15 + 12 = 39 But the correct selection is stores 3 to 5: - Store 3: P_3 = 5 * 3 = 15 - Store 4: P_4 = 4 * 3 = 12 - Store 5: P_5 = 1 * 2 = 2 Total happiness = 15 + 12 + 2 = 29","solution":"def max_happiness(N, K, stores): # Calculate happiness P for each store P = [S * L for S, L in stores] # Calculate the initial sum of the first K stores current_sum = sum(P[:K]) max_sum = current_sum # Use a sliding window to calculate the sum of happiness for each consecutive K-length subarray for i in range(K, N): current_sum += P[i] - P[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given an array a of size n consisting of integers. Your task is to reorder the elements of the array such that the difference between the maximum and minimum values of any two consecutive elements is minimized. In other words, you need to find the maximum difference between adjacent elements in the reordered array and minimize this maximum difference. -----Input----- The first line of the input contains one integer n (2 le n le 1000) — the size of the array. The second line contains n integers a_i (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the minimized maximum difference between consecutive elements. -----Examples----- Input 4 1 2 3 4 Output 1 Input 5 8 9 6 2 4 Output 2 -----Note----- In the first example, you can reorder the array as 1, 2, 3, 4, where the maximum difference between consecutive elements is 1. In the second example, you can reorder the array as 2, 4, 6, 8, 9, where the maximum difference between consecutive elements is 2.","solution":"def minimize_max_difference(arr): Reorders the array so that the maximum difference between consecutive elements is minimized. Arguments: arr -- list of integers representing the array to be reordered Returns: int -- the minimized maximum difference between consecutive elements # Sort the array arr.sort() # Initialize the minimum maximum difference min_max_difference = float(\'inf\') # Calculate the differences between consecutive elements for i in range(1, len(arr)): min_max_difference = min(min_max_difference, arr[i] - arr[i - 1]) return min_max_difference"},{"question":"Jessica loves collecting rare gemstones. She has a collection of gemstones, each of which has a specific color. Jessica wants to know if she can create a special sequence of gemstones with the same color but in such a way that the sequence forms a palindrome. You are given a list of gemstone colors in the form of strings. Determine if it\'s possible to rearrange the gemstones to form a palindromic sequence. Input The first line contains an integer n (1 ≤ n ≤ 1000), where n is the number of gemstones. The next line contains n space-separated strings, each representing the color of a gemstone. Each string consists of lowercase English letters only and has a length of at most 20 characters. Output If it is possible to rearrange the gemstones to form a palindromic sequence, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Examples Input 3 blue red blue Output POSSIBLE Input 4 green red yellow blue Output IMPOSSIBLE","solution":"from collections import Counter def is_palindrome_possible(n, colors): Determines if it\'s possible to rearrange the gemstones to form a palindromic sequence. Args: n (int): Number of gemstones. colors (list of str): List of gemstone colors. Returns: str: \\"POSSIBLE\\" if a palindromic arrangement is possible, otherwise \\"IMPOSSIBLE\\". color_count = Counter(colors) odd_count = sum(1 for count in color_count.values() if count % 2 != 0) # A palindrome can have at most one color count with an odd number of gemstones if odd_count > 1: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"**Write a method `longest_unique_substring(s)` that takes a string `s` as its argument and returns the longest substring of `s` that contains only unique characters. In case of ties (i.e., more than one substring of maximum length), return the first one that appears.** **Properties:** - The input `s` will be a string containing only ASCII characters. - Return an empty string if the input is empty. - The method should be case-sensitive (`\'A\'` and `\'a\'` are considered different characters). - The solution should be efficient in terms of time complexity. **Example Input and Output:** ``` longest_unique_substring(\\"abcabcbb\\") Output: \\"abc\\" longest_unique_substring(\\"bbbbb\\") Output: \\"\\" longest_unique_substring(\\"pwwkew\\") Output: \\"wke\\" longest_unique_substring(\\"\\") Output: \\"\\" ```","solution":"def longest_unique_substring(s): Returns the longest substring of `s` that contains only unique characters. If there are ties, the first one that appears is returned. if not s: return \\"\\" start, max_len, max_sub = 0, 0, \\"\\" char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_sub = s[start:end + 1] return max_sub"},{"question":"*** Vector Magnitude *** In this task, you are required to write a function that calculates the magnitude of a vector in an n-dimensional space. The magnitude of a vector is the square root of the sum of the squares of its components. Given a vector represented as an array of numbers, calculate its magnitude. For example: ```python vector_magnitude([3, 4]) -> 5 vector_magnitude([1, 2, 2]) -> 3 vector_magnitude([5, 12]) -> 13 vector_magnitude([0, 0, 0]) -> 0 ``` # Function Signature ```python def vector_magnitude(vector: List[int]) -> float: ``` # Constraints - The input vector will have at least one component. - Each component will be an integer within the range of -1000 to 1000. - The result should be a floating point number rounded to two decimal places (if applicable).","solution":"import math from typing import List def vector_magnitude(vector: List[int]) -> float: Calculate the magnitude of a vector in n-dimensional space. Parameters: vector (List[int]): A list of integers representing the vector components. Returns: float: The magnitude of the vector. magnitude = math.sqrt(sum(x**2 for x in vector)) return round(magnitude, 2)"},{"question":"A workshop organizer is planning to place n tables in a straight line for a coding competition. Each table has a different number of seats available for participants. The organizer also has specific constraints regarding the maximum allowed distance between any two consecutive tables. Given the number of tables and the maximum allowed distance between any two consecutive tables, the organizer needs to place the tables in such a way that the distances between consecutive tables do not exceed the given constraint, and the total number of available seats is maximized. Write a program to help the organizer determine the maximum number of seats that can be made available by placing the tables under the given constraints. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) and d (1 ≤ d ≤ 1000) — the number of tables and the maximum allowed distance between any two consecutive tables. The second line contains n space-separated integers: s_1, s_2, ..., s_n (1 ≤ s_i ≤ 1000), where s_i is the number of seats available on the i-th table. -----Output----- Print a single integer — the maximum number of seats the organizer can make available under the given constraints. -----Examples----- Input 5 10 3 5 8 2 6 Output 24 Input 3 5 1 10 1 Output 11 -----Note----- In the first test example, the organizer can place all five tables such that the maximum allowed distance of 10 units between any two consecutive tables is not exceeded, resulting in a total of 3 + 5 + 8 + 2 + 6 = 24 seats available. In the second test example, the organizer can place the first and second table (1 + 10 = 11 seats) or the second and third table (10 + 1 = 11 seats) without exceeding the maximum allowed distance of 5 units between any two consecutive tables.","solution":"def max_seats(n, d, seats): Returns the maximum number of seats that can be placed under the given constraints. :param n: int - the number of tables :param d: int - maximum allowed distance between any two consecutive tables :param seats: List[int] - list of integers representing the number of seats available on each table :return: int - maximum number of seats total_seats = sum(seats) return total_seats"},{"question":"In a faraway kingdom, a wise king has created a maze for his knights to test their problem solving skills. The maze is represented by an m x n grid of cells, where each cell is either empty (represented by \'.\') or contains an obstacle (represented by \'*\'). The knights can move up, down, left, or right, but cannot move through obstacles. The challenge is to determine the length of the shortest path from the upper-left corner of the grid (cell (1,1)) to the lower-right corner of the grid (cell (m,n)). If no such path exists, return -1. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next m lines contains n characters which are either \'.\' or \'*\'. Output Output a single integer - the length of the shortest path from the upper-left corner to the lower-right corner, or -1 if no such path exists. Examples Input 3 3 . . * * . * . . . Output 5 Input 3 3 * * * * * * * * * Output -1 Input 2 2 . * * . Output -1","solution":"from collections import deque def shortest_path_in_maze(m, n, grid): Returns the length of the shortest path from the upper-left corner (1,1) to the lower-right corner (m,n). If no such path exists, returns -1. if grid[0][0] == \'*\' or grid[m-1][n-1] == \'*\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == m-1 and col == n-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < m and 0 <= new_col < n and (new_row, new_col) not in visited: if grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"You are given an n x n matrix filled with integers. Your task is to rotate the matrix 90 degrees clockwise. For example, the matrix: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, will become: ``` 7 4 1 8 5 2 9 6 3 ``` -----Input----- Each input will contain a single test case. Note that your program may be run multiple times on different inputs. The first line of each test case will contain the integer n (1 le n le 100), the size of the n x n matrix. The next n lines will each contain n integers separated by spaces, representing the matrix. -----Output----- Output the n x n matrix after rotating it 90 degrees clockwise. Each row of the output matrix should be printed on a separate line with n integers separated by spaces. -----Examples----- Sample Input 1: 3 1 2 3 4 5 6 7 8 9 Sample Output 1: 7 4 1 8 5 2 9 6 3 Sample Input 2: 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 2: 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. n = len(matrix) # Create a new matrix to store the result rotated_matrix = [[0]*n for _ in range(n)] # Fill the rotated matrix for row in range(n): for col in range(n): rotated_matrix[col][n-1-row] = matrix[row][col] return rotated_matrix def format_matrix(matrix): Converts a matrix into a formatted string for printing. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) def main(matrix_input): Main function to read input matrix, rotate it and print the result. n = matrix_input[0] matrix = [list(map(int, row.split())) for row in matrix_input[1:]] rotated_matrix = rotate_matrix_90_clockwise(matrix) return format_matrix(rotated_matrix)"},{"question":"A furniture retailer wants to automate the process of arranging shelves in their store. The shelves are in a straight line, and each shelf has a predefined height and a maximum weight capacity. The goal is to determine the maximum number of shelves that can be used without exceeding the weight capacity when adding an item to the shelf. The shelves and items are represented as follows: - Shelves: Each shelf has a maximum weight capacity and a height. - Items: Each item has a weight and a height requirement. You need to write a program to calculate the maximum number of shelves that can accommodate the items without exceeding the weight capacity and ensuring the items fit within the height of the shelf. Input: An integer n representing the number of shelves (1 ≤ n ≤ 100). Each of the next n lines contains two integers, wi and hi (1 ≤ wi, hi ≤ 1000), representing the weight capacity and height of the i-th shelf. An integer m representing the number of items (1 ≤ m ≤ 100). Each of the next m lines contains two integers, wj and hj (1 ≤ wj, hj ≤ 1000), representing the weight and height requirement of the j-th item. A single line containing an integer k representing the number of items (0 ≤ k ≤ m) you want to place on the shelves. The items you want to place are always the first k items in the list of items. Output: An integer representing the maximum number of shelves that can accommodate all k items without exceeding the weight capacity and ensuring the items fit within the height of the shelf. Example: Input: 5 100 50 200 75 150 60 180 100 120 80 6 50 40 70 50 80 60 60 45 90 70 40 35 4 Output: 3 Explanation: When placing the first 4 items: - Shelf 1 can hold the first item (50 <= 100 and 40 <= 50) - Shelf 2 can hold the second item (70 <= 200 and 50 <= 75) - Shelf 3 can hold the third item (80 <= 150 and 60 <= 60) - Shelf 1 can hold the fourth item (60 <= 100 - 50 and 45 <= 50) The maximum number of shelves needed is 3, as all 4 items can be accommodated without exceeding the weight capacity or height limit of any shelf.","solution":"def max_shelves_for_items(n, shelves, m, items, k): shelves = sorted(shelves, key=lambda x: x[0]) # Sort shelves by height item_counter = [0] * n # Keeps track of items weight on each shelf max_used_shelves = 0 for i in range(k): item_weight, item_height = items[i] for j in range(n): shelf_capacity, shelf_height = shelves[j] if item_counter[j] + item_weight <= shelf_capacity and item_height <= shelf_height: item_counter[j] += item_weight max_used_shelves = max(max_used_shelves, j + 1) break return max_used_shelves"},{"question":"You are given a grid of size n x m where each cell contains an integer that denotes the height of a building. You need to identify a point on the grid such that the height at that point is greater than or equal to the height of its neighboring points (i.e., left, right, up, and down). If there are multiple such points, you may output any one of them. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and the number of columns in the grid. The next n lines contain m integers each. The j-th element in the i-th line is h_i,j (1 ≤ h_i,j ≤ 10^6) — the height of the building at position (i, j). -----Output----- Output two integers r and c — the zero-based row and column indices of the grid cell that meets the criteria. If no such point exists, print \\"-1 -1\\". -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 2 2 Input 4 4 10 10 10 10 10 15 14 10 10 14 15 10 10 10 10 10 Output 1 1 Input 2 2 5 5 5 5 Output 0 0","solution":"def find_peak_point(grid, n, m): def is_peak(i, j): Determines if grid[i][j] is a peak neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)] for ni, nj in neighbors: if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] > grid[i][j]: return False return True for i in range(n): for j in range(m): if is_peak(i, j): return i, j return -1, -1 def parse_input_and_find_peak(input_string): data = input_string.strip().split(\'n\') n, m = map(int, data[0].split()) grid = [list(map(int, row.split())) for row in data[1:]] return find_peak_point(grid, n, m)"},{"question":"Given a string S of lowercase English letters, the task is to remove duplicates from the string such that each character appears only once and return the resultant string in lexicographical order. Example 1: Input: S = \\"bcabc\\" Output: \\"abc\\" Explanation: The string \\"bcabc\\" has duplicates \'b\' and \'c\'. After removing duplicates and sorting lexicographically, the string becomes \\"abc\\". Example 2: Input: S = \\"cbacdcbc\\" Output: \\"acdb\\" Explanation: The string \\"cbacdcbc\\" has duplicates \'c\', \'b\' and \'c\'. After removing duplicates and sorting lexicographically, the string becomes \\"acdb\\". Your Task: The task is to complete the function removeDuplicates() which takes the string as input parameter and returns the resultant string with duplicates removed in lexicographical order. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def removeDuplicates(S): Removes duplicates from the string such that each character appears only once and returns the resultant string in lexicographical order. # Getting the unique characters in sorted order unique_chars = sorted(set(S)) return \'\'.join(unique_chars)"},{"question":"A cafe has limited seating and follows a unique seating arrangement. There are N tables in the cafe placed in a single row, numbered from 1 to N. When a new customer arrives, they always choose a table that maximizes their distance to the nearest occupied table. If there are multiple such tables, they choose the one with the smallest number. You need to simulate this seating process as customers arrive one by one, and you\'re given the number of tables (N) and the number of customers (C) arriving at the cafe. After all the customers have been seated, you need to return the occupied table numbers in the order they were chosen. Input: Two integers N and C, the number of tables and the number of customers respectively. Output: A list of integers representing the table numbers chosen by each customer in the order of their arrival. Constraints: 1 ≤ N, C ≤ 1000 SAMPLE INPUT 5 3 SAMPLE OUTPUT [1, 5, 3] Explanation: 1. The first customer will choose table 1 as it is the smallest numbered table. 2. The second customer will choose table 5 as it is the farthest from table 1. 3. The third customer will choose table 3 as it maximizes the distance to the nearest occupied table (which are tables 1 and 5 now). Problem Setter: [Your Name]","solution":"def choose_tables(N, C): Simulates the seating process in a cafe and returns the list of occupied table numbers in the order they were chosen. Parameters: N (int): Number of tables C (int): Number of customers Returns: List[int]: List of table numbers chosen by each customer in order of their arrival # To store the chosen table numbers chosen_tables = [] # Set of occupied tables occupied = set() for _ in range(C): max_distance = -1 chosen_table = -1 for i in range(1, N + 1): if i not in occupied: # Find the minimum distance to the nearest occupied table min_distance_to_nearest = float(\'inf\') for occupied_table in occupied: min_distance_to_nearest = min(min_distance_to_nearest, abs(i - occupied_table)) # If this table maximizes the distance to the nearest occupied table, # or it\'s the same distance but a smaller table number, choose this table if min_distance_to_nearest > max_distance or (min_distance_to_nearest == max_distance and i < chosen_table): max_distance = min_distance_to_nearest chosen_table = i # Mark this table as occupied occupied.add(chosen_table) chosen_tables.append(chosen_table) return chosen_tables"},{"question":"In a candy factory, candies are produced and sorted into boxes. There are three types of candies: A, B, and C, and each box can only contain one type of candy. The factory keeps a record of how many boxes of each type of candy it produces per day. You are given the daily production record for a certain number of days, with the number of boxes of each type of candy produced on each day. Determine on how many days the production of boxes of type A was strictly greater than the production of boxes of type B or type C (excluding days where production was equal). ------ Input Format ------ - The first line contains a single integer D - the number of days for which production data is available. - The next D lines each contain three integers A_{i}, B_{i}, and C_{i} - the number of boxes of candies A, B, and C produced on the i-th day, respectively. ------ Output Format ------ Output a single integer - the number of days on which the production of boxes of candies of type A was strictly greater than both the production of boxes of candies of type B and type C. ------ Constraints ------ 1 ≤ D ≤ 1000 0 ≤ A_{i}, B_{i}, C_{i} ≤ 100 ----- Sample Input 1 ------ 4 15 10 5 8 12 10 20 15 30 25 5 10 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ Day 1: The production of candy A (15 boxes) is greater than the production of candy B (10 boxes) and candy C (5 boxes). Day 2: The production of candy A (8 boxes) is not greater than the production of candy B (12 boxes) or candy C (10 boxes). Day 3: The production of candy A (20 boxes) is not greater than the production of candy B (15 boxes) or candy C (30 boxes). Day 4: The production of candy A (25 boxes) is greater than the production of candy B (5 boxes) and candy C (10 boxes). Hence, there are 2 days when the production of candy A was strictly greater than both candy B and candy C.","solution":"def count_days_with_high_production(d, production_data): This function counts the number of days when the production of candy A was strictly greater than the production of both candy B and candy C. :param d: Number of days. :param production_data: List of tuples where each tuple contains three integers, the production of candies A, B, and C for a day. :return: Number of days when the production of candy A was strictly greater than the production of both candy B and candy C. count = 0 for a, b, c in production_data: if a > b and a > c: count += 1 return count"},{"question":"You are given an undirected connected graph with n nodes and m edges. Your task is to assign positive weights to the edges such that the sum of the weights of all edges is minimized, given that the shortest path between any two nodes should be the same as the given initial edge lengths. Input: The first line contains two integers n (2 ≤ n ≤ 1000) and m (n-1 ≤ m ≤ 1000) — the number of nodes and edges, respectively. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10^6), meaning that there is an edge between nodes u and v with initial length l. Output: Output m lines, each containing three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), which will mean that you wrote number w on the edge between u, v. The sum of all w must be minimized and the shortest path between any two nodes in the weighted graph must be the same as the initial lengths. Examples Input: 5 6 1 2 3 1 3 5 2 3 4 3 4 1 3 5 2 4 5 7 Output: 1 2 3 1 3 5 2 3 4 3 4 1 3 5 2 4 5 7 Input: 4 4 1 2 2 2 3 1 3 4 5 1 4 7 Output: 1 2 2 2 3 1 3 4 5 1 4 7","solution":"def assign_weights(edges): Assign the positive weights to the edges such that the sum of the weights of all edges is minimized while maintaining the given shortest paths. Parameters: edges (list of tuple): Each tuple contains three integers (u, v, l) representing an edge between nodes u and v with initial length l. Returns: list of tuple: Output of m lines, each containing three integers (u, v, w). Here, w is the same as the initial length l, to maintain the shortest path lengths. return edges"},{"question":"A software company is organizing a coding competition where participants must solve a variety of programming challenges. The organizers want to distribute prizes based on the uniqueness of the solutions submitted. Each solution is represented as a string of lowercase letters. Two solutions are considered unique if the strings are not anagrams of each other. Given a list of solutions, determine how many unique solutions were submitted, i.e., how many of the submissions are not anagrams of one another. Example sol = [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"yxz\\", \\"zxy\\", \\"ddd\\"] There are two groups of anagrams in this list: [\\"abc\\", \\"bca\\", \\"cab\\"] and [\\"xyz\\", \\"yxz\\", \\"zxy\\"]. The solution \\"ddd\\" is not an anagram of any other solution. Therefore, there are 3 unique solutions: [\\"abc\\", \\"xyz\\", \\"ddd\\"]. Function Description Complete the `countUniqueSolutions` function below. It should return an integer representing the number of unique solutions. `countUniqueSolutions` has the following parameter(s): - solutions: an array of strings representing the submitted solutions Returns - int: the number of unique solutions in the list Input Format The first line contains an integer `n`, the number of solutions submitted. Each of the next `n` lines contains a string representing a solution. Constraints 1 ≤ n ≤ 10^5 1 ≤ length of each solution ≤ 100 Sample Input 7 abc bca cab xyz yxz zxy ddd Sample Output 3 Explanation There are 3 unique solutions: \\"abc\\" (with its anagrams \\"bca\\", \\"cab\\"), \\"xyz\\" (with its anagrams \\"yxz\\", \\"zxy\\"), and \\"ddd\\". Hence, the function should return 3.","solution":"def countUniqueSolutions(solutions): Returns the number of unique solutions (anagram groups) from a list of solutions. unique_solutions = set() for solution in solutions: sorted_solution = \'\'.join(sorted(solution)) unique_solutions.add(sorted_solution) return len(unique_solutions)"},{"question":"You are given a list of integers representing a sequence of stock prices over consecutive days. Your task is to determine the maximum profit you can achieve by making exactly one purchase and one sale of the stock. Note that you cannot sell a stock before you buy one. # Task Write a function that takes a list of integers `prices` where `prices[i]` represents the stock price on the `i-th` day. Return the maximum profit you can achieve from one transaction. If no profit can be achieved, return 0. # Example For `prices = [7, 1, 5, 3, 6, 4]`, the output should be `5`. For `prices = [7, 6, 4, 3, 1]`, the output should be `0`. For `prices = [1, 2, 3, 4, 5]`, the output should be `4`. For `prices = [3, 3, 3, 3, 3]`, the output should be `0`. # Note - `prices` will contain at least two elements. - The maximum profit is the difference between the highest selling price and the lowest buying price within the specified constraints. # Constraints - You may assume that all the elements in `prices` are non-negative. - The elements in the `prices` array (the stock prices) are unique. Happy Coding `^_^`","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and then selling the stock exactly once. If no profit can be achieved, returns 0. if len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"A company wants to analyze its network of employees connected by a specific hierarchy. The company can be represented by an undirected graph, where each node corresponds to an employee and each edge represents a direct line of communication between two employees. The CEO is the central node and has a direct connection with exactly three directors. Each director in turn manages exactly three managers, and each manager supervises exactly three junior employees. You need to verify if the given company structure is correct based on the above hierarchy. Specifically, you should check if it forms a 4-layer hierarchy rooted at the CEO. Input The first line of input consists of a single integer n (1 ≤ n ≤ 10^{5}), the number of employees in the company. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), which indicate a direct line of communication between employees u and v. Output Print \\"Valid\\" (without quotes) if the company structure forms the specified 4-layer hierarchy, and \\"Invalid\\" (without quotes) otherwise. Examples Input 13 1 2 1 3 1 4 2 5 2 6 2 7 3 8 3 9 3 10 4 11 4 12 4 13 Output Valid Input 7 1 2 2 3 3 4 4 5 5 6 6 7 Output Invalid Explanation In the first example, employee 1 is the CEO with three directors (2, 3, 4). Each director manages three managers, resulting in a total of 13 employees, which corresponds to the required 4-layer hierarchy. In the second example, the structure forms a chain and does not meet the criteria for the company\'s hierarchical structure, so the result is \\"Invalid\\".","solution":"from collections import defaultdict, deque def is_valid_hierarchy(n, connections): if n != 1 + 3 + 9 + 27: # Check the exact number of nodes required for a 4-layer hierarchy rooted at the CEO return \\"Invalid\\" # Create adjacency list from the connections graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Find the root (which should connect exactly 3 directors) for node in graph: if len(graph[node]) == 3: root = node break else: return \\"Invalid\\" def bfs_check_levels(root): visited = set() queue = deque([(root, 0)]) levels = defaultdict(int) while queue: current, level = queue.popleft() if current in visited: continue visited.add(current) levels[level] += 1 for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, level + 1)) # Check exact number of nodes at each level return levels[0] == 1 and levels[1] == 3 and levels[2] == 9 and levels[3] == 27 if bfs_check_levels(root): return \\"Valid\\" else: return \\"Invalid\\""},{"question":"You are given a binary tree with N nodes. Each node is indexed with a unique integer from 1 to N. Each node may have at most two children and the tree is rooted at node 1. Each node has a value associated with it. You need to perform Q queries on this tree. Each query can be of two types: 1. `1 u k` - Increase the value of node `u` and its descendants by `k`. 2. `2 u` - Output the value of node `u`. Please write a function to process the given queries and return the results for each query of type `2`. ------ Input Format ------ - The first line contains an integer N, the number of nodes in the tree. - The second line contains N space-separated integers, where the ith integer represents the value of the ith node. - The next N-1 lines each contain two integers `u` and `v`, representing an edge between node `u` and node `v`. - The next line contains an integer Q, the number of queries. - Each of the next Q lines contains one of the following: - `1 u k` - `2 u` ------ Output Format ------ For each query of type `2 u`, output the value of node `u`. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ k ≤ 10^9 1 ≤ u, v, value ≤ 10^6 ------ Sample Input 1 ------ 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 10 2 4 2 1 ------ Sample Output 1 ------ 14 1 ----- Explanation 1 ------ Initially, the values at nodes {1, 2, 3, 4, 5} are {1, 2, 3, 4, 5} respectively. 1. Query `1 3 10`: Increase the values of node 3 and its descendants {3, 4, 5} by 10. - New values are {1, 2, 13, 14, 15}. 2. Query `2 4`: Output value of node 4, which is 14. 3. Query `2 1`: Output value of node 1, which remains unchanged as 1.","solution":"from collections import defaultdict class Tree: def __init__(self, N, values, edges): self.N = N self.values = values self.children = defaultdict(list) for u, v in edges: self.children[u].append(v) self.children[v].append(u) self.parent = [-1] * (N + 1) self.build_tree(1, -1) def build_tree(self, node, par): self.parent[node] = par for child in self.children[node]: if child != par: self.build_tree(child, node) def increase_subtree(self, node, k): stack = [node] while stack: current = stack.pop() self.values[current-1] += k for child in self.children[current]: if child != self.parent[current]: stack.append(child) def get_value(self, node): return self.values[node-1] def process_queries(N, values, edges, queries): tree = Tree(N, values, edges) results = [] for query in queries: parts = query.split() query_type = int(parts[0]) u = int(parts[1]) if query_type == 1: k = int(parts[2]) tree.increase_subtree(u, k) elif query_type == 2: results.append(tree.get_value(u)) return results"},{"question":"Ivy is designing a maze for a new puzzle game, and she needs your help. The maze is represented as a grid with dimensions `m` by `n` where some cells are empty, and some are blocked by walls. The goal is to determine if there exists a path from the start cell to the end cell. You can move up, down, left, or right, but cannot move through walls. Write a program that checks if such a path exists in the maze. -----Input----- The first line contains two integers `m` and `n`, the dimensions of the maze grid (1 ≤ m, n ≤ 1000). The next `m` lines each contain `n` characters. Each character is either: - `S` for the start cell (exactly one `S` in the grid), - `E` for the end cell (exactly one `E` in the grid), - `.` for an empty cell, - `#` for a wall. -----Output----- The output is a single line \\"YES\\" if there exists a path from `S` to `E` and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 5 5 S...# ..#.# ..#.# ..... #...E Sample Output 1: YES Sample Input 2: 4 4 S. .#.. .#E. .. Sample Output 2: NO","solution":"def can_escape_maze(m, n, maze): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and maze[x][y] != \'#\' def dfs(x, y): if not is_valid(x, y) or visited[x][y]: return False if maze[x][y] == \'E\': return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # up, down, left, right if dfs(x + dx, y + dy): return True return False # Find start position \'S\' start_x = start_y = None for i in range(m): for j in range(n): if maze[i][j] == \'S\': start_x, start_y = i, j break if start_x is not None: break # Initialize visited matrix visited = [[False] * n for _ in range(m)] # Start DFS from the start position return \\"YES\\" if dfs(start_x, start_y) else \\"NO\\""},{"question":"As a budding architect, you have been asked to build a system that aggregates and uniquely identifies items in a shop. Every item can be described by the following details: an item code, a name, and a unique identifier (UID). There may be multiple items with the same item code and name but differing UIDs. Your task is to generate a consolidated list of items with unique identifiers concatenated together. For example, given the following list of items description: ``` [(\\"item1\\", \\"apple\\", \\"001\\"), (\\"item2\\", \\"banana\\", \\"002\\"), (\\"item1\\", \\"apple\\", \\"003\\"), (\\"item3\\", \\"cherry\\", \\"004\\"), (\\"item2\\", \\"banana\\", \\"005\\")] ``` The expected output would be: ``` [(\\"item1\\", \\"apple\\", \\"001-003\\"), (\\"item2\\", \\"banana\\", \\"002-005\\"), (\\"item3\\", \\"cherry\\", \\"004\\")] ``` Function Signature: ```python def consolidate_items(items: List[Tuple[str, str, str]]) -> List[Tuple[str, str, str]]: pass ``` # Examples: ```Python # Example 1 items = [(\\"item1\\", \\"apple\\", \\"001\\"), (\\"item2\\", \\"banana\\", \\"002\\"), (\\"item1\\", \\"apple\\", \\"003\\"), (\\"item3\\", \\"cherry\\", \\"004\\"), (\\"item2\\", \\"banana\\", \\"005\\")] consolidate_items(items) # Expected output: [(\\"item1\\", \\"apple\\", \\"001-003\\"), # (\\"item2\\", \\"banana\\", \\"002-005\\"), # (\\"item3\\", \\"cherry\\", \\"004\\")] # Example 2: items = [(\\"item4\\", \\"grape\\", \\"123\\"), (\\"item4\\", \\"grape\\", \\"122\\"), (\\"item5\\", \\"pear\\", \\"130\\")] consolidate_items(items) # Expected output: [(\\"item4\\", \\"grape\\", \\"122-123\\"), # (\\"item5\\", \\"pear\\", \\"130\\")] # Example 3: items = [(\\"item6\\", \\"melon\\", \\"010\\")] consolidate_items(items) # Expected output: [(\\"item6\\", \\"melon\\", \\"010\\")] ```","solution":"from typing import List, Tuple from collections import defaultdict def consolidate_items(items: List[Tuple[str, str, str]]) -> List[Tuple[str, str, str]]: item_dict = defaultdict(list) for item_code, name, uid in items: key = (item_code, name) item_dict[key].append(uid) consolidated_items = [] for (item_code, name), uids in item_dict.items(): uids.sort() concatenated_uids = \'-\'.join(uids) consolidated_items.append((item_code, name, concatenated_uids)) return consolidated_items"},{"question":"You are given a large integer number \'num\' represented as a string. Your task is to determine the smallest integer (other than 1) that is a divisor of \'num\'. Given the large nature of the number, conventional methods to find the smallest divisor may not be efficient. You need to consider an efficient approach. Input: - A single line containing the string representation of the large integer \'num\' (1 ≤ length of num ≤ 10^5). Output: - A single integer denoting the smallest divisor of the number (other than 1). Example: Input: 123456789101112 Output: 2 Explanation: The given number is 123456789101112. - 2 divides 123456789101112 perfectly, hence the smallest divisor other than 1 is 2. Input: 999999999999989 Output: 999999999999989 Explanation: The given number is 999999999999989 which is a prime number. - The smallest divisor other than 1 is 999999999999989 itself. Constraints: - The input number is a large integer represented as a string. - The length of the number is between 1 and 100000. - The number will always be a positive integer. **Note**: You may use efficient algorithms such as trial division combined with optimizations to determine the smallest divisor in a manageable time.","solution":"def smallest_divisor(num_str): Returns the smallest divisor of the large integer (other than 1) represented as a string. num = int(num_str) # Checking divisibility from 2 up to sqrt(num) if num % 2 == 0: return 2 for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return i return num # if no divisor found, the number itself is prime"},{"question":"Given an n x n matrix grid of integers, where each cell represents the height of a terrain, determine the minimum effort required to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). You can move up, down, left, or right, and the effort of a path is defined as the maximum absolute difference in heights between two consecutive cells in the path. Constraints * 2 ≤ n ≤ 100 * 0 ≤ grid[i][j] ≤ 10,000 Input The first line contains an integer n, the size of the n x n matrix. The next n lines each contain n integers, representing the height values of each cell in the matrix. Output Print the minimum effort required to travel from the top-left corner to the bottom-right corner. Examples Input 3 1 2 2 3 8 2 5 3 5 Output 2 Input 4 1 2 3 4 2 2 3 4 1 2 3 4 4 4 4 4 Output 1","solution":"import heapq def minimum_effort_path(grid): Returns the minimum effort required to travel from the top-left to the bottom-right cell in the grid. n = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] effort_to = [[float(\'inf\')] * n for _ in range(n)] effort_to[0][0] = 0 min_heap = [(0, 0, 0)] while min_heap: effort, x, y = heapq.heappop(min_heap) if x == n - 1 and y == n - 1: return effort for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < n and 0 <= new_y < n: new_effort = max(effort, abs(grid[new_x][new_y] - grid[x][y])) if new_effort < effort_to[new_x][new_y]: effort_to[new_x][new_y] = new_effort heapq.heappush(min_heap, (new_effort, new_x, new_y)) return -1 # Should never be reached, as the path from top-left to bottom-right is guaranteed to exist. # Example usage: # n = 3 # grid = [ # [1, 2, 2], # [3, 8, 2], # [5, 3, 5] # ] # print(minimum_effort_path(grid)) # Output: 2"},{"question":"Marie is trying to organize her bookshelf. Her bookshelf contains n books, each with a unique integer ID number. She wants to arrange the books so that for any two consecutive books on the shelf, the difference in their ID numbers is always the same. Marie can perform the following operation any number of times: she can pick any book and move it to any position on the shelf. Help Marie determine if it’s possible to arrange the books in the required manner. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of books. The second line contains n integers representing the IDs of the books. -----Output----- If it\'s possible to arrange the books so that the difference between the ID numbers of any two consecutive books is the same, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). You can print each letter in arbitrary case (upper or lower). -----Examples----- Input 3 1 4 7 Output YES Input 3 4 10 1 Output NO -----Note----- In the first example, Marie can arrange the books in the following order: [1, 4, 7]. The difference between consecutive ID numbers is always 3. In the second example, there isn’t any way to arrange the books so that the difference between consecutive ID numbers is the same.","solution":"def can_arrange_books(n, book_ids): Determines if the books can be arranged such that the difference between the ID numbers of any two consecutive books is the same. Parameters: n (int): Number of books. book_ids (list of int): List of unique integer ID numbers of the books. Returns: str: \\"YES\\" if the books can be arranged as described, otherwise \\"NO\\". if n == 1: return \\"YES\\" # Only one book, trivially true book_ids.sort() difference = book_ids[1] - book_ids[0] for i in range(1, n): if book_ids[i] - book_ids[i - 1] != difference: return \\"NO\\" return \\"YES\\""},{"question":"Imagine you are working with an encoding system that converts plain text into a sequence of numbers based on the positions of characters in the reverse alphabetical order (where \'z\' is 1, \'y\' is 2, ..., \'a\' is 26). You are provided with a plain text message and you need to convert it using this encoding system. Write a program to encode a given message according to the reverse alphabetical order rule and calculate the sum of the encoded values for each message. Input The first line contains an integer t, the number of test cases. 1 ≤ t ≤ 50. Each of the next t lines contains a single plain text message consisting of lowercase letters only. The length of each message will not exceed 100 characters. Output For each test case, output a single integer which represents the sum of the encoded values of the message. Example Input: 2 hello abc Output: 52 78 Explanation For the message \\"hello\\", the encoding is: h=19, e=22, l=15, l=15, o=12. The sum is 19+22+15+15+12 = 83. For the message \\"abc\\", the encoding is: a=26, b=25, c=24. The sum is 26+25+24 = 75.","solution":"def encode_message(message): Encode a given message according to the reverse alphabetical order rule and calculate the sum of the encoded values. Args: message (str): The plain text message consisting of lowercase letters only. Returns: int: Sum of the encoded values of the message. return sum(27 - (ord(char) - ord(\'a\') + 1) for char in message) def process_test_cases(t, messages): Process multiple test cases, encoding each message and calculating the sum of the encoded values. Args: t (int): Number of test cases. messages (list): List of plain text messages. Returns: list: List of sums of encoded values for each message. return [encode_message(message) for message in messages]"},{"question":"David is exploring an enchanted forest and he encounters N mystical trees, each with an associated magical power value. David wants to find two trees such that the difference in their power values is maximized. To make things interesting, if there are multiple pairs of trees with the same difference, he wants the pair with the smallest sum of power values. Can you help David find the optimal pair? Input: - First line contains an integer T - number of test cases. - Each test case consists of two lines: - First line contains an integer N - number of trees. - Second line contains N space-separated integers, representing the power values of the trees. Output: For each test case, print two space-separated integers: - The maximum difference in power values. - The smallest sum of the pair of trees that share this maximum difference. Constraints: 1 ≤ T ≤ 10^5 2 ≤ N ≤ 10^6 (over all test cases) -10^9 ≤ Power value of each tree ≤ 10^9 SAMPLE INPUT: 2 3 1 5 9 4 -1 7 3 9 SAMPLE OUTPUT: 8 10 10 6","solution":"def find_max_difference_and_min_sum_pairs(t, test_cases): results = [] for case in test_cases: N, powers = case powers.sort() max_diff = powers[-1] - powers[0] min_sum = powers[0] + powers[1] results.append((max_diff, min_sum)) return results"},{"question":"You are given a sequence consisting of N integers. You have to choose the start and end indices of a contiguous subsequence such that the sum of the subsequence is maximized. Additionally, if there are multiple subsequences with the same maximum sum, choose the one with the smallest length. If there are still multiple subsequences, choose the one that appears first in the sequence. Constraints: * 1 ≤ N ≤ 10^5 * -10^9 ≤ integer ≤ 10^9 Input: The input consists of the following two lines: The first line contains a single integer N. The second line contains N space-separated integers. Output: Print two integers separated by a single space: the starting and ending indices (1-based) of the contiguous subsequence with the maximum sum. If there are multiple subsequences meeting the criteria, print the one with the smallest length. If there are still ties, print the one that appears first. Example: Input: 8 -2 -3 4 -1 -2 1 5 -3 Output: 3 7 Explanation: The subsequence with the maximum sum is [4, -1, -2, 1, 5]. It has a sum of 7 and appears between indices 3 and 7.","solution":"def max_subsequence_indices(N, sequence): Returns the 1-based starting and ending indices of the contiguous subsequence with the maximum sum. If there are multiple subsequences with the same maximum sum, the smallest-length subsequence is returned. If there are further ties, the subsequence that appears first is returned. max_sum = -float(\'inf\') current_sum = 0 start_index = 0 result_start = result_end = 0 min_length = float(\'inf\') for i in range(N): if current_sum <= 0: current_sum = sequence[i] start_index = i else: current_sum += sequence[i] if current_sum > max_sum or (current_sum == max_sum and (i - start_index) < min_length): max_sum = current_sum result_start = start_index result_end = i min_length = i - start_index return (result_start + 1, result_end + 1)"},{"question":"You have been given a list of time intervals where each interval is represented as a tuple (start, end) indicating the start and end times of a meeting. Write a function `canAttendAllMeetings(intervals)` that returns True if a person can attend all the given meetings without any overlap, and False otherwise. Example 1: Input: intervals = [(1, 3), (2, 4), (5, 6)] Output: False Explanation: There is an overlap between (1, 3) and (2, 4), thus it\'s not possible to attend all meetings. Example 2: Input: intervals = [(0, 1), (3, 5), (6, 8)] Output: True Explanation: There is no overlap between the meetings, so it\'s possible to attend all meetings. Example 3: Input: intervals = [(3, 4), (4, 5), (5, 6)] Output: True Explanation: There is no overlap between the meetings, so it\'s possible to attend all meetings. Your Task: You don\'t need to read or print anything. Your task is to complete the function `canAttendAllMeetings(intervals)` which takes the list of intervals as input and returns a boolean value. Expected Time Complexity: O(N log N) where N is the number of intervals. Expected Space Complexity: O(1) Constraints: 1 ≤ number of intervals ≤ 10^4 0 ≤ start < end ≤ 10^6","solution":"def canAttendAllMeetings(intervals): Returns True if a person can attend all given meetings without any overlap, False otherwise. # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Check for overlap for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Pari and Arya are learning about binary trees and came across the concept of tree traversal. They want to find the longest path in a binary tree, which is called the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. Can you help Pari and Arya write a program to compute the diameter of a given binary tree? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of nodes in the binary tree. Each of the next n lines contains three integers v, l, r (0 ≤ v, l, r ≤ n), where v is the value of the node, l is the left child of node v, and r is the right child of node v. If a node does not have a left child or right child, the respective value will be 0. -----Output----- Print a single integer, the diameter of the given binary tree. -----Examples----- Input 5 1 2 3 2 4 5 3 0 0 4 0 0 5 0 0 Output 3 Input 3 1 2 0 2 3 0 3 0 0 Output 2 -----Note----- In the first example, the longest path is 4 -> 2 -> 1 -> 3, making the diameter equal to 3. In the second example, the longest path is 3 -> 2 -> 1, making the diameter equal to 2.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(edges): nodes = {} for v, l, r in edges: if v not in nodes: nodes[v] = TreeNode(val=v) if l != 0: nodes[l] = TreeNode(val=l) nodes[v].left = nodes[l] if r != 0: nodes[r] = TreeNode(val=r) nodes[v].right = nodes[r] return nodes[1] if 1 in nodes else None def diameter_of_binary_tree(root): def depth(node): nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 depth(root) return diameter def find_diameter(n, edges): root = build_tree(edges) return diameter_of_binary_tree(root)"},{"question":"**City Park Lighting** The city council has decided to install new lights in the city park to improve safety at night. The park is represented as a grid of n rows and m columns. Each cell in the grid can either be empty (\'.\') or contain an obstacle (\'#\'). The council wants to place the lights in the empty cells of the grid such that every empty cell is illuminated. A light placed in an empty cell will illuminate all the empty cells in the same row and the same column until it hits an obstacle or the boundary of the grid. Your task is to find the minimum number of lights required to illuminate the entire park. Input The input consists of multiple test cases. Each test case starts with a line containing two integers n and m (1 ≤ n, m ≤ 100), which represent the number of rows and columns of the grid, respectively. The following n lines each contain a string of length m, representing the grid. The end of the input is indicated by a line containing two zeros separated by a single space. Output For each test case, output the minimum number of lights required to illuminate the entire park. Example Input 4 5 .#. .#.#. .#.#. .#. 3 3 # #.. # 2 2 0 0 Output 3 1 0","solution":"def min_lights_to_illuminate(grid): n = len(grid) m = len(grid[0]) if n > 0 else 0 # To track the cells which are already illuminated illuminated = [[False] * m for _ in range(n)] light_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not illuminated[i][j]: # Place a light light_count += 1 # Illuminate the cells in the same row for k in range(j, m): if grid[i][k] == \'#\': break illuminated[i][k] = True for k in range(j, -1, -1): if grid[i][k] == \'#\': break illuminated[i][k] = True # Illuminate the cells in the same column for k in range(i, n): if grid[k][j] == \'#\': break illuminated[k][j] = True for k in range(i, -1, -1): if grid[k][j] == \'#\': break illuminated[k][j] = True return light_count def process_test_cases(input_data): index = 0 results = [] while index < len(input_data): n, m = map(int, input_data[index].split()) index += 1 if n == 0 and m == 0: break grid = [] for _ in range(n): grid.append(input_data[index]) index += 1 results.append(min_lights_to_illuminate(grid)) return results"},{"question":"Little Alice loves painting and she is constructing a rainbow pattern on a very large grid. The grid is of size n by m, where the element in the i-th row and j-th column contains a height value that represents the level of paint. Alice wants to find out if her paint levels form a valid rainbow pattern. A valid rainbow pattern has the following characteristics: 1. Each row and each column should contain continuous non-decreasing values. 2. The grid must contain distinct levels of paint (1 through n*m, without repetition). Your task is to help Alice determine whether the grid forms a valid rainbow pattern. Input: - The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. - The next n lines each contain m integers, representing the heights in the grid. Each height will be an integer between 1 and n*m inclusive. Output: - Print \\"YES\\" if the grid forms a valid rainbow pattern, otherwise print \\"NO\\". Example: Input: 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output: YES Input: 3 3 3 1 2 6 4 5 9 7 8 Output: NO Note: In the first example, every row and column is strictly increasing and the grid contains all levels 1 through 12. In the second example, the values are not in strict increasing order and not continuous in columns, thus it\'s not a valid rainbow pattern.","solution":"def is_valid_rainbow_pattern(n, m, grid): Returns \'YES\' if the grid forms a valid rainbow pattern, otherwise \'NO\'. # Check each row for non-decreasing order for row in grid: if row != sorted(row): return \\"NO\\" # Check each column for non-decreasing order for col in range(m): col_values = [grid[row][col] for row in range(n)] if col_values != sorted(col_values): return \\"NO\\" # Check for distinct values from 1 through n * m all_values = [grid[row][col] for row in range(n) for col in range(m)] if sorted(all_values) != list(range(1, n * m + 1)): return \\"NO\\" return \\"YES\\" # Example usage: # n, m = 4, 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9], # [10, 11, 12] # ] # print(is_valid_rainbow_pattern(n, m, grid)) # Output: \\"YES\\""},{"question":"A [Kaprekar number](https://en.wikipedia.org/wiki/Kaprekar_number) is a non-negative integer, the representation of whose square can be split into two parts that add up to the original number. For instance, 45 is a Kaprekar number, because `45^2 = 2025`, and `20 + 25 = 45`. Write a function that determines if a given number is a Kaprekar number. The function should return `true` if the number is a Kaprekar number and `false` otherwise. Your function should handle numbers up to 2147483647 (the maximum value for a 32-bit signed integer). **Examples** ``` n = 45 45^2 = 2025 20 + 25 = 45 result: True ``` ``` n = 297 297^2 = 88209 88 + 209 = 297 result: True ``` ``` n = 10 10^2 = 100 1 + 00 != 10 result: False ``` ```python def is_kaprekar_number(n): # Your code here ```","solution":"def is_kaprekar_number(n): if n < 0: return False n_squared = n**2 str_n_squared = str(n_squared) len_n = len(str(n)) right_part = str_n_squared[-len_n:] left_part = str_n_squared[:-len_n] or \'0\' return n == int(left_part) + int(right_part)"},{"question":"Alexa is managing the tech support team at a software company. There are n support tickets that must be resolved today. Each ticket has a priority level ranging from 1 (lowest priority) to 5 (highest priority). The support team has a priority rule. Tickets must be assigned in non-increasing order of their priority levels, meaning all tickets with a higher priority should be assigned before tickets with a lower priority. Additionally, the team can only handle one ticket per hour. However, due to system constraints, tickets can only be started at certain hours of the day. Specifically, the j-th ticket can start at the j-th multiple of m minutes past 8:00 AM. For example, if m = 15, then the first ticket can start at 8:15 AM, the second ticket at 8:30 AM, and so on. Given the priority levels of the tickets and the starting hours, your task is to find an optimal order for resolving the tickets that keeps the workday as efficient as possible. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 60), here n is the number of support tickets, and m is the interval in minutes. The second line contains n integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 5), here p_{i} is the priority level of the i-th ticket. -----Output----- Output the order of ticket numbers that should be resolved to meet the priority and time constraints. If there are several optimal schedules, print any of them. -----Example----- Input 5 15 3 5 2 4 1 Output 2 4 1 3 5 -----Note----- In this example, there are five tickets, with priorities [3, 5, 2, 4, 1], and the interval m is 15 minutes. The order 2 4 1 3 5 obeys the priority rule of resolving higher priority tickets first. Ticket 2 (priority 5) is resolved first, then ticket 4 (priority 4), and so on. This keeps the team\'s workflow from 8:15 AM, 8:30 AM, ..., etc., in line with the priority constraints.","solution":"def optimal_ticket_order(n, m, priorities): Determines the optimal order of ticket resolution based on priority and time constraints. :param n: int - number of tickets :param m: int - interval in minutes :param priorities: List[int] - priority levels of each ticket :return: List[int] - An optimal order of tickets to be resolved # Create a list of (priority, index) tuples indexed_priorities = [(priorities[i], i + 1) for i in range(n)] # Sort by priority in descending order and by index in ascending order in case of ties indexed_priorities.sort(key=lambda x: (-x[0], x[1])) # Extract the ticket indices from the sorted list optimal_order = [index for _, index in indexed_priorities] return optimal_order"},{"question":"You are given an array of integers and an integer k. You need to find the length of the longest subarray where the sum of its elements is less than or equal to k. However, if there are multiple subarrays of the same maximum length, return the smallest possible sum of the subarrays with the maximum length. Input format The input consists of multiple test cases. The number of test cases is T, and the i-th test case contains an integer n (the length of the array), followed by an array of n integers, and then an integer k. T n_1 array_1 k_1 ... n_T array_T k_T Output format The output consists of T lines. The output at line i is the smallest possible sum of the longest subarray whose sum is less than or equal to k for the i-th test case. Constraint * 1 ≤ T ≤ 100 * 1 ≤ n_i ≤ 100 * 0 ≤ array_i[j] ≤ 10^4 (0-based index) * 1 ≤ k_i ≤ 10^5 * All input values are integers. Examples Input 3 4 1 2 3 4 6 5 3 1 2 1 1 4 6 1 2 3 4 5 6 10 Output 6 4 10 Input None Output None","solution":"def find_longest_subarray_sum_less_equal_k(n, array, k): left = 0 sum_ = 0 max_length = 0 min_sum = float(\'inf\') for right in range(n): sum_ += array[right] while sum_ > k and left <= right: sum_ -= array[left] left += 1 current_length = right - left + 1 if current_length > max_length: max_length = current_length min_sum = sum_ elif current_length == max_length: min_sum = min(min_sum, sum_) return min_sum def process_test_cases(test_cases): results = [] for case in test_cases: n, array, k = case result = find_longest_subarray_sum_less_equal_k(n, array, k) results.append(result) return results def read_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(input_lines[index]) array = list(map(int, input_lines[index+1].split())) k = int(input_lines[index+2]) test_cases.append((n, array, k)) index += 3 return test_cases def main(input_string): test_cases = read_input(input_string) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"A company wants to reward its top-performing employees with a bonus at the end of the year. Each employee has a performance score based on various factors like punctuality, productivity, teamwork, etc. The performance score is given as an integer value. The company has decided that the bonus will be distributed in such a way that the top k employees receive the maximum bonus amount. If two or more employees have the same performance score, they will all receive the maximum bonus, and the next few top performers will receive slightly lesser bonus amounts. You are required to write a program that calculates the maximum possible bonus distribution. INPUT The first line of input contains two integers n and k, the number of employees and the number of top performers who should receive the maximum bonus. The second line contains n space-separated integers, each representing the performance score of an employee. OUTPUT Print one floating point number representing the maximum possible bonus distribution. CONSTRAINTS 1 ≤ n ≤ 1000 1 ≤ k ≤ n 1 ≤ performance score ≤ 100 SAMPLE INPUT 8 3 70 80 80 90 70 60 90 85 SAMPLE OUTPUT 3.000000 Explanation The top 3 performers have the following performance scores: 90, 90, 85. Even though the employees have tied scores, they all are considered part of the top k performers. The distribution, therefore, accommodates these ties and the top 3 unique highest scores are 90, 90, and 85. Consequently, the bonus distribution count is 3.","solution":"def max_bonus_distribution(n, k, performance_scores): Returns the maximum possible bonus distribution considering the top k performers. # Sort the performance scores in descending order performance_scores.sort(reverse=True) # The kth score in the sorted list might be a tie kth_score = performance_scores[k-1] # Count how many employees have scores >= kth_score count = sum(score >= kth_score for score in performance_scores) return float(count)"},{"question":"Read problem statements in [Spanish] and [Hindi]. A palindrome is a word that reads the same forward and backward. Given a string s, determine if s is a palindrome. ------ Input Format ------ The only line of the input contains a single string s. ------ Output Format ------ Output \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. ------ Constraints ------ 1 ≤ length(s) ≤ 100 The string contains only lowercase English letters. ----- Sample Input 1 ------ radar ----- Sample Output 1 ------ Yes ----- explanation 1 ------ The string \\"radar\\" reads the same forward and backward, hence it is a palindrome and the output is \\"Yes\\". ----- Sample Input 2 ------ coder ----- Sample Output 2 ------ No ----- explanation 2 ------ The string \\"coder\\" does not read the same forward and backward, hence it is not a palindrome and the output is \\"No\\".","solution":"def is_palindrome(s): Determine if the string s is a palindrome. Returns \\"Yes\\" for palindrome and \\"No\\" otherwise. return \\"Yes\\" if s == s[::-1] else \\"No\\""},{"question":"In a distant kingdom, there are N cities and M bidirectional roads connecting some of these cities. The kingdom\'s ruler wants to ensure that every city is accessible from every other city directly or indirectly via other cities. Unfortunately, due to frequent natural disasters, the roads are failing unpredictably. To safeguard against this, the ruler has decided to reinforce some roads such that even if one road is destroyed, the connectivity between all cities remains intact. You must determine and output the minimum number of roads that need reinforcement to ensure the kingdom remains connected even after the failure of any one road. Constraints: * 2 ≤ N ≤ 10^5 * 1 ≤ M ≤ 10^5 Input The input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M Each of the following M lines contains two integers u_i and v_i, which indicates that there is a road connecting the cities u_i and v_i (1 ≤ u_i, v_i ≤ N). Output Print the minimum number of roads that need to be reinforced. Examples Input 4 4 1 2 2 3 3 4 4 2 Output 1 Input 5 6 1 2 2 3 3 4 4 1 1 3 2 4 Output 0","solution":"def find_bridges(N, edges): from collections import defaultdict def dfs(node, parent, discovery_times, low_times, visited, adj, bridges, time): visited[node] = True discovery_times[node] = low_times[node] = time[0] time[0] += 1 for neighbor in adj[node]: if not visited[neighbor]: dfs(neighbor, node, discovery_times, low_times, visited, adj, bridges, time) low_times[node] = min(low_times[node], low_times[neighbor]) if low_times[neighbor] > discovery_times[node]: bridges.append((node, neighbor)) elif neighbor != parent: low_times[node] = min(low_times[node], discovery_times[neighbor]) adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) discovery_times = [-1] * (N+1) low_times = [-1] * (N+1) visited = [False] * (N+1) bridges = [] time = [0] for i in range(1, N+1): if not visited[i]: dfs(i, -1, discovery_times, low_times, visited, adj, bridges, time) return len(bridges) # Input handling def minimum_roads_to_reinforce(N, M, roads): return find_bridges(N, roads)"},{"question":"Oliver has an interesting puzzle for you. He has an array of integers where every element appears twice except for one element which appears only once. He wants you to help him find this unique element in the most efficient manner. Can you solve this problem using bit manipulation? [INPUT]: First line of input contains a single integer T denoting the number of test cases. First line of each test case contains a single integer N denoting the number of elements in the array. Next line contains N space separated integers denoting elements of the array. [OUTPUT]: Output consists of T lines. Each line contains the unique element for the respective test case. [CONSTRAINTS]: 1 ≤ T ≤ 10000 1 ≤ N ≤ 10^6 (N is always odd, ensuring there is one unique element) |A[i]| ≤ 10^9 sum of N over all test cases will not exceed 4*10^6 SAMPLE INPUT 2 3 1 2 1 5 4 4 2 3 3 SAMPLE OUTPUT 2 2 Explanation For the first test case, the only unique element in the array is 2. For the second test case, the only unique element in the array is also 2.","solution":"def find_unique_element(arr): Finds the unique element in an array where every element except one appears twice. Args: arr: List[int] - List of integers with one unique element and all others appearing exactly twice. Returns: int - The unique element. unique_element = 0 for num in arr: unique_element ^= num return unique_element def solve_puzzle(T, cases): Processes multiple test cases to find unique elements in given arrays. Args: T: int - Number of test cases. cases: List[Tuple[int, List[int]]] - List of tuples, where each tuple contains an integer N (number of elements) and a list of integers (elements of the array). Returns: List[int] - List of unique elements for each test case. results = [] for N, arr in cases: results.append(find_unique_element(arr)) return results"},{"question":"Given an integer n that represents a number of students in a classroom. Each student took a test and their scores are given in the form of an array. Your task is to determine if there exist at least two students with the exact same score. -----Constraints----- - 1 leq n leq 100 - 0 leq score[i] leq 100 -----Input----- Input is given from Standard Input in the following format: n score1 score2 ... scoreN -----Output----- Print \\"YES\\" if there are at least two students with the same score. Otherwise, print \\"NO\\". -----Sample Input----- 5 45 78 89 45 66 -----Sample Output----- YES","solution":"def has_duplicate_scores(n, scores): Returns \'YES\' if there are at least two students with the same score, otherwise \'NO\'. score_set = set() for score in scores: if score in score_set: return \\"YES\\" score_set.add(score) return \\"NO\\""},{"question":"A security system developer is working on a problem where they need to evaluate the safety of a new password scheme. The system administrators have come up with several rules for creating passwords, and they want to ensure every password adheres to these rules. The rules are as follows: 1. The password must be at least 6 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set `!@#%^&*()-+`. Write a function to check if a given password meets all these requirements. The function should return True if the password is valid according to the rules, and False otherwise. Function Signature: ```python def is_valid_password(password: str) -> bool: pass ``` Input - A single string `password` representing the password to be checked. The length of the string is at most 100 characters. Output - A boolean value: True if the password is valid, False otherwise. Examples Input ```python password = \\"Aa1!aa\\" ``` Output ```python True ``` Input ```python password = \\"Aa1\\" ``` Output ```python False ``` Input ```python password = \\"Aa!!!aaa\\" ``` Output ```python False ``` Input ```python password = \\"Aaaaaa\\" ``` Output ```python False ``` Notes - In the first example, the password meets all the criteria: it is at least 6 characters long, includes an uppercase letter, a lowercase letter, a digit, and a special character. - In the second example, the password is not valid because it is shorter than 6 characters. - In the third example, the password does not contain any digits. - In the fourth example, the password does not contain any digits or special characters.","solution":"def is_valid_password(password: str) -> bool: if len(password) < 6: return False has_uppercase = any(char.isupper() for char in password) has_lowercase = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) special_characters = set(\\"!@#%^&*()-+\\") has_special_char = any(char in special_characters for char in password) return has_uppercase and has_lowercase and has_digit and has_special_char"},{"question":"A group of aliens are arranging their communication posts in a circular layout. Each post can communicate with its two nearest neighbors: the one immediately clockwise and the one immediately counterclockwise. You are given the angles of each post relative to the center of the circle, in degrees. The angles are unique and in increasing order. The aliens want to know the shortest communication path between two specific posts. -----Input----- The first line contains an integer n (3 le n le 1000), the number of communication posts. The second line contains n integers angles[0], angles[1], ..., angles[n-1] (0 le angles[i] < 360). These integers are in increasing order and represent the angles of the posts. The third line contains two integers start and end (1 le start, end le n and start neq end), representing the starting and ending posts by their 1-based index in the angles array. -----Output----- Output a single integer, the minimum number of posts that must be traversed, including the starting and ending posts, to communicate from the starting post to the ending post. -----Examples----- Sample Input 1: 6 10 50 90 130 170 310 1 4 Sample Output 1: 4 Sample Input 2: 5 0 72 144 216 288 2 5 Sample Output 2: 3","solution":"def min_posts_to_traverse(n, angles, start, end): # Convert to 0-based index start -= 1 end -= 1 if start > end: start, end = end, start clockwise_path = end - start + 1 counterclockwise_path = start + (n - end) + 1 return min(clockwise_path, counterclockwise_path)"},{"question":"# Task Write a Python function that takes a single integer input, n, and prints the first n terms of the Fibonacci sequence. The Fibonacci sequence is defined as follows: text{Fibonacci}(0) = 0 text{Fibonacci}(1) = 1 text{Fibonacci}(n) = text{Fibonacci}(n-1) + text{Fibonacci}(n-2) for n geq 2 Input Format - An integer n representing the number of terms to print. Output Format Print the first n terms of the Fibonacci sequence, each term on a new line. Constraints 1 leq n leq 20 Sample Input 0 5 Sample Output 0 0 1 1 2 3 Explanation 0 The first 5 terms of the Fibonacci sequence are 0, 1, 1, 2, and 3. Each term is printed on a new line.","solution":"def print_fibonacci(n): Prints the first n terms of the Fibonacci sequence. if n <= 0: return fib_sequence = [] # Initialize the first two terms if n >= 1: fib_sequence.append(0) if n >= 2: fib_sequence.append(1) # Calculate rest of the terms for i in range(2, n): next_term = fib_sequence[i-1] + fib_sequence[i-2] fib_sequence.append(next_term) for term in fib_sequence: print(term)"},{"question":"You are given a sequence of integers where each integer represents the height of a building. Your task is to determine the maximum amount of water that can be trapped between the buildings after a rain. Each building is represented by a non-negative integer that indicates the height of the building. Input The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of buildings. The second line contains n space-separated non-negative integers — the heights of the buildings. Output Print a single integer denoting the maximum amount of water that can be trapped between the buildings after a rain. Examples Input 6 0 1 3 0 1 2 Output 3 Input 4 3 0 0 3 Output 6 Input 7 4 2 0 3 2 5 0 Output 9 Note In the first sample, water will be trapped between the buildings with heights 3, 0, and 1. Specifically: - 1 unit of water above the first \'0\' height. - 2 units of water above the second \'0\' height. Total water trapped = 1 + 2 = 3 units. In the second sample, water is trapped between all the buildings: - 3 units between the first and last buildings with height 3. - 3 units between the first and last buildings with height 0. Total water trapped = 3 + 3 = 6 units. In the third sample: - Water is trapped between the buildings with heights 4, 2, 0, 3, and 5: - 2 units above the first \'2\'. - 3 units above the \'0\'. - 2 units above the second \'2\'. Total water trapped = 2 + 3 + 2 + 2 = 9 units.","solution":"def max_water_trapped(buildings): Given a list of building heights, returns the maximum amount of water that can be trapped. n = len(buildings) if n == 0: return 0 left = [0] * n right = [0] * n water = 0 left[0] = buildings[0] for i in range(1, n): left[i] = max(left[i - 1], buildings[i]) right[n - 1] = buildings[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], buildings[i]) for i in range(n): water += min(left[i], right[i]) - buildings[i] return water"},{"question":"You are given a list of positive integers. Write a function to determine the \\"balance point\\" of the list, if one exists, and return its index. A balance point is an index where the sum of all elements to the left of the index is equal to the sum of all elements to the right of the index. For example, in the list `[1, 2, 3, 4, 3, 2, 1]`, the balance point is at index 3 because the sum of elements before it `(1+2+3)` is equal to the sum of elements after it `(3+2+1)`. If there are multiple balance points, return the first one. If no balance point exists, return -1.","solution":"def find_balance_point(lst): Returns the index of the balance point in the list if it exists, otherwise -1. The balance point is an index where the sum of all elements to the left is equal to the sum of all elements to the right. total_sum = sum(lst) left_sum = 0 for i, num in enumerate(lst): # right_sum is total_sum minus the current element minus left_sum right_sum = total_sum - left_sum - num if left_sum == right_sum: return i left_sum += num return -1"},{"question":"Henry is organizing a marathon and needs to distribute T-shirts of different sizes to the participants. The available sizes are Small, Medium, and Large. Given the number of participants requiring each size, determine the total number of T-shirts Henry needs to order. ------ Input Format ------ - The first line contains three space-separated integers S, M, and L, denoting the number of participants requiring Small, Medium, and Large T-shirts respectively. ------ Output Format ------ Output in a single line, the total number of T-shirts Henry needs to order. ------ Constraints ------ 1 ≤ S, M, L ≤ 10^{4} ----- Sample Input 1 ------ 150 200 100 ----- Sample Output 1 ------ 450 ----- explanation 1 ------ Henry needs to order 150 + 200 + 100 = 450 T-shirts in total for the participants. ----- Sample Input 2 ------ 3000 2500 4500 ----- Sample Output 2 ------ 10000 ----- explanation 2 ------ Henry needs to order 3000 + 2500 + 4500 = 10000 T-shirts in total for the participants.","solution":"def total_tshirts(S, M, L): Calculates the total number of T-shirts needed. Args: S (int): Number of participants requiring Small T-shirts. M (int): Number of participants requiring Medium T-shirts. L (int): Number of participants requiring Large T-shirts. Returns: int: Total number of T-shirts needed. return S + M + L"},{"question":"Given a non-empty array of integers, write a function `findSingleNumber` that returns the single number that appears only once in the array. Every other number appears exactly twice. Your solution should have a linear runtime complexity (O(n)) and use only constant extra space (O(1)). Example: ``` Input: [2, 2, 1] Output: 1 Input: [4, 1, 2, 1, 2] Output: 4 ``` Note: You can solve this using bitwise operations.","solution":"def findSingleNumber(nums): Returns the single number that appears only once in the array. Every other number appears exactly twice. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"John is in charge of organizing a coding competition. There are exactly K coding tasks, and N participants registered for the event. John wants to distribute these K tasks among participants as evenly as possible. Each participant should receive the same number of tasks or one task less than the others. Help John determine if it is possible to distribute K tasks in such a way among N participants. If it is possible, output the number of participants who would receive the greater number of tasks and the number of participants who would receive fewer tasks. If it is not possible, output \\"NO\\". -----Input----- The first line contains two integers N and K, where N is the number of participants and K is the number of tasks respectively. -----Output----- If it is possible to distribute the tasks as described, output two integers on the first line: the number of participants who would receive the greater number of tasks, followed by the number of participants who would receive fewer tasks. If it is not possible, output \\"NO\\". -----Constraints----- 1 ≤ N ≤ 100 000; 1 ≤ K ≤ 10^9. -----Examples----- Input: 5 12 Output: 2 3 Input: 4 10 Output: NO","solution":"def distribute_tasks(N, K): Determine if it\'s possible to distribute K tasks among N participants such that the distribution is as even as possible. Parameters: N (int): Number of participants. K (int): Number of tasks. Returns: str or tuple: If possible, returns tuple of two integers representing the number of participants with greater tasks and fewer tasks. Otherwise, returns \\"NO\\". if K < N: return \\"NO\\" tasks_per_participant = K // N remaining_tasks = K % N num_with_more_tasks = remaining_tasks num_with_less_tasks = N - remaining_tasks return (num_with_more_tasks, num_with_less_tasks)"},{"question":"A company is organizing a logistics plan involving delivery drones. Each drone can carry only one package at a time, however, the flights have to be scheduled in a way that maximizes the number of deliveries made within a certain time frame. Each flight is specified by a start and end time, and a drone can start its next flight immediately after finishing a current flight. You need to help the company determine the maximum number of deliveries that can be completed within a day. -----Input----- The first line of the input contains an integer n which represents the number of flights. Each of the next n lines contains two integers s and e that represent the start and end times of a flight, respectively. All times are in the range from 0 to 1440 (inclusive), corresponding to the minutes of a 24-hour day. -----Output----- Output a single integer representing the maximum number of non-overlapping deliveries that can be completed within the given time frame. -----Examples----- Sample Input: 3 1 4 2 3 3 5 Sample Output: 2 Sample Input: 4 0 60 60 120 120 180 180 240 Sample Output: 4","solution":"def max_deliveries(flights): Determines the maximum number of non-overlapping deliveries that can be completed within a given time frame. Parameters: flights: A list of tuples, each containing the start and end times of a flight. Returns: The maximum number of non-overlapping deliveries. # Sort flights based on their end times flights.sort(key=lambda x: x[1]) max_deliveries_count = 0 last_end_time = -1 for start, end in flights: if start >= last_end_time: max_deliveries_count += 1 last_end_time = end return max_deliveries_count"},{"question":"The Floyd\'s Triangle is a right-angled triangular array of natural numbers. It is defined by filling the rows of the triangle with consecutive numbers, starting with a 1 in the top left corner. For example, a Floyd\'s Triangle with 5 rows looks like this: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ``` # Task Write a method that returns a list of lists representing Floyd\'s Triangle with the given number of rows. ```python > floyds_triangle(1) == [[1]] > floyds_triangle(2) == [[1], [2, 3]] > floyds_triangle(3) == [[1], [2, 3], [4, 5, 6]] > floyds_triangle(5) == [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]] ```","solution":"def floyds_triangle(rows): Returns Floyd\'s Triangle with the given number of rows. Each row is a list of consecutive natural numbers. triangle = [] current_number = 1 for row in range(1, rows + 1): current_row = [] for _ in range(row): current_row.append(current_number) current_number += 1 triangle.append(current_row) return triangle"},{"question":"You are to create a function that takes a string containing an alphanumeric expression and checks whether the expression contains valid nested parentheses. The function should return a boolean indicating whether the parentheses are nested correctly and no characters other than parentheses are present between any parentheses pairs. Valid characters inside parentheses: `{}`, `[]`, `()` # Examples: ```python check_parentheses(\\"(a+b)[c*d]{e/f}\\") => True check_parentheses(\\"{[(a+b)*(c+d)]}\\") => True check_parentheses(\\"({[a+b]*[c+d]})\\") => True check_parentheses(\\"{[a+b]*[c+d]}\\") => True check_parentheses(\\"[a+b]*(x+y))\\") => False check_parentheses(\\"[(a+b]*[c+d)]\\") => False check_parentheses(\\"((a+b)*(c+d)))\\") => False ``` # Notes: 1. Each type of parentheses should be properly nested and opened/closed in a balanced manner. 2. Characters like `a`, `b`, `+`, `*`, etc., are acceptable inside the expression but an expression should purely be alphanumeric without any special characters other than parentheses. 3. Empty parentheses like `()`, `{}`, and `[]` are considered valid. Your function should adhere to these specifications and validate the given expressions accordingly.","solution":"def check_parentheses(expression): Checks whether an alphanumeric expression contains valid nested parentheses. Args: expression (str): The alphanumeric expression. Returns: bool: True if parentheses are correctly nested, False otherwise. stack = [] matching_parenthesis = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack.pop() != matching_parenthesis[char]: return False elif not char.isalnum() and char not in \'+-*/ \': return False return len(stack) == 0"},{"question":"You are given an array of integers. You can perform the following operation on the array up to k times: choose a subarray and sort it in non-decreasing order. Your task is to determine the minimum possible value of the array after performing at most k operations. Some examples: if you have an array [3, 2, 4, 5] and k = 1, you may choose the subarray [2, 4] and sort it to get the array [3, 2, 4, 5]. The minimum possible value of this array after one operation is 2. If you have an array [5, 2, 9, 1] and k = 2, you may choose the subarrays [5, 2] and [1, 9] to get the array [2, 5, 1, 9], and then sort it to get [1, 2, 5, 9]. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 le k le n) — the size of the array and the number of operations you can perform. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i is the initial value of the i-th element in the array. It is guaranteed that the total sum of n over test cases does not exceed 10^5. -----Output----- For each test case, print one integer — the minimum possible value of the array after at most k operations. -----Example----- Input 2 4 1 3 2 4 5 4 2 5 2 9 1 Output 2 1","solution":"def min_possible_value(arr, k): Given an array of integers and a number k, this function returns the minimum possible value in the array after performing at most k operations where a subarray can be sorted in non-decreasing order. return sorted(arr)[0] def process_test_cases(t, test_cases): results = [] for n, k, arr in test_cases: results.append(min_possible_value(arr, k)) return results"},{"question":"You are in charge of managing a small warehouse that stores different types of products. Each type of product occupies a specified amount of space, and you have a limited total storage capacity. Your task is to optimize the way products are stored such that as much storage capacity is utilized as possible without exceeding the limit. Given the number of products, the space required for each product, and the total storage capacity, write a program to determine the maximum storage space that can be used without exceeding the capacity. You can store multiple units of each type of product, but you do not need to store all types of products, and the storage space should be completely utilized or as close as possible to the capacity. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: n c s1 s2 :: sn On the first line, the number of product types n (1 ≤ n ≤ 50) and the total storage capacity c (1 ≤ c ≤ 1000000) are given, separated by a space. The next n lines each contain an integer si (1 ≤ si ≤ 1000000), which represents the space occupied by one unit of the i-th type of product. The number of datasets does not exceed 50. Output For each dataset, print the maximum storage space that can be utilized without exceeding the total storage capacity on one line. If it is not possible to store any products, output 0. Example Input 3 50 10 20 30 2 10000 500 700 5 1234 10 20 30 40 50 0 Output 50 10000 1230","solution":"def max_storage_utilization(n, c, s): Given the number of product types `n`, the total storage capacity `c`, and a list of product spaces `s`, return the maximum storage space that can be utilized without exceeding the total storage capacity, using a dynamic programming approach. dp = [0] * (c + 1) for si in s: for j in range(si, c + 1): dp[j] = max(dp[j], dp[j - si] + si) return dp[c] def process_warehouses(data): Processes multiple datasets and returns the results for the maximum storage space utilization for each dataset. results = [] for item in data: n, c = item[0] s = item[1] results.append(max_storage_utilization(n, c, s)) return results def parse_input(input_data): Parses the input data and returns structured information. lines = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): if lines[i] == \'0\': break n, c = map(int, lines[i].split()) s = [int(lines[i + j + 1]) for j in range(n)] datasets.append(((n, c), s)) i += n + 1 return datasets def main(input_data): datasets = parse_input(input_data) results = process_warehouses(datasets) for res in results: print(res)"},{"question":"Determine if a given year is a leap year. -----Constraints----- - 1 leq year leq 9999 - year is an integer. -----Input----- Input is given from Standard Input in the following format: year -----Output----- Print \\"Leap Year\\" if the input year is a leap year, otherwise print \\"Not a Leap Year\\". -----Sample Input----- 2000 -----Sample Output----- Leap Year A leap year is: - Exactly divisible by 4, and - either not divisible by 100, or exactly divisible by 400.","solution":"def is_leap_year(year): Determines if the given year is a leap year. Args: year (int): The year to check. Returns: str: \\"Leap Year\\" if the year is a leap year, \\"Not a Leap Year\\" otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Leap Year\\" else: return \\"Not a Leap Year\\""},{"question":"In a small town, there is an annual pumpkin-growing contest where the goal is to grow the heaviest pumpkin. Each participant submits the weight of their pumpkin in pounds. To add an extra challenge, the weights must be unique. The committee needs a program to determine the winner and the second-place contestant from the given data. Write a program that reads the weights of pumpkins in the contest and determines the participant with the heaviest pumpkin and the second heaviest pumpkin. Input The input consists of multiple datasets. Each dataset is a list of positive integer weights provided in a single line separated by spaces. The end of the input is indicated by a line with a single zero. Output For each dataset, output two lines. The first line should contain the weight of the heaviest pumpkin and the second line should contain the weight of the second-heaviest pumpkin. Assumptions: - Each dataset will contain at least two weights. - Weights are unique and are positive integers. Example Input 155 200 123 301 276 450 123 789 656 341 0 Output 301 276 789 656","solution":"def find_heaviest_pumpkins(datasets): This function takes a list of string datasets, each representing weights of pumpkins. Returns a list of tuples where each tuple contains the heaviest and the second heaviest pumpkin weights. results = [] for data in datasets: if data == \\"0\\": break weights = list(map(int, data.split())) weights.sort(reverse=True) heaviest, second_heaviest = weights[0], weights[1] results.append((heaviest, second_heaviest)) return results def format_output(results): This function formats the output from the find_heaviest_pumpkins function to the required output format. for res in results: print(res[0]) print(res[1])"},{"question":"A startup is developing a new database system optimized for handling multiple search queries efficiently. The final stage of development involves checking the database operation by means of a series of search queries. Each search query returns a list of items from a large collection. The goal is to determine the minimum number of queries required to retrieve a target list of items by combining the results of any subset of the queries. Given multiple search queries, each query returns a set of unique items. Find the smallest number of these queries needed to form a target list containing all specified items. Each item in the target list must be present in at least one of the chosen queries. ------ Input ------ The input consists of multiple test cases. The first line contains a single integer K (1 ≤ K ≤ 20), indicating the number of test cases. Each test case begins with two integers N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 1000), representing the number of queries and the number of items in the target list, respectively. The next line contains M distinct items representing the target list. The following N lines each contain a list of items returned by a query, starting with an integer Li, the number of items returned by the query, followed by Li items. ------ Output ------ For each test case, output a single integer representing the minimum number of queries required to retrieve all items in the target list. If it is not possible to retrieve all items using any combination of given queries, output -1. ----- Sample Input 1 ------ 2 3 5 item1 item2 item3 item4 item5 3 item1 item3 item5 2 item2 item4 1 item3 2 3 item1 item2 item3 2 item1 item2 2 item2 item3 ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ Test case 1: The first and second queries together contain all items in the target list. Test case 2: Both queries are needed to retrieve all items in the target list. Test case 1: The first and second queries together contain all items in the target list (item1, item2, item3, item4, item5). Test case 2: Both queries are needed to retrieve all items in the target list (item1, item2, item3).","solution":"from itertools import combinations def min_queries_to_retrieve_items(k, test_cases): result = [] for case in test_cases: n, m, target_items, queries = case target_set = set(target_items) min_queries = float(\'inf\') found = False for i in range(1, n+1): for comb in combinations(queries, i): combined_items = set() for q in comb: combined_items.update(q) if target_set.issubset(combined_items): min_queries = min(min_queries, i) found = True if found: result.append(min_queries) else: result.append(-1) return result # Helper function to parse input def parse_input(input_string): lines = input_string.strip().split(\'n\') k = int(lines[0]) index = 1 test_cases = [] for _ in range(k): n, m = map(int, lines[index].split()) index += 1 target_items = lines[index].split() index += 1 queries = [] for _ in range(n): items = lines[index].split()[1:] queries.append(items) index += 1 test_cases.append((n, m, target_items, queries)) return k, test_cases def run(input_string): k, test_cases = parse_input(input_string) return min_queries_to_retrieve_items(k, test_cases)"},{"question":"Write a function that takes a positive integer `n` and returns the nth value in a modified Fibonacci sequence where, instead of the classic addition, the next number in the sequence is the result of the bitwise XOR of the previous two numbers in the sequence. Assume the first two values in this sequence are 1 and 1. Input A single positive integer n (1 ≤ n ≤ 30). Output Return the nth value in the modified Fibonacci sequence described. Examples Input 1 Output 1 Input 2 Output 1 Input 3 Output 0 Input 4 Output 1 Explanation: 1-th value is 1 (base case). 2-th value is 1 (base case). 3-th value is 1 XOR 1 = 0. 4-th value is 1 XOR 0 = 1. ...","solution":"def modified_fibonacci(n): Returns the nth value in the modified Fibonacci sequence where the next number is the result of the bitwise XOR of the previous two numbers. Parameters: n (int): The position in the sequence. Returns: int: The nth value of the modified Fibonacci sequence. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a ^ b return b"},{"question":"Captain Flint decided to further test the skills of potential crew members by giving them another challenge involving prime numbers. Let\'s define a positive integer m as a prime square if it can be represented as p^2, where p is a prime number. For example, numbers 4 (2^2), 9 (3^2), and 25 (5^2) are prime squares. Captain Flint has provided an integer k and a list of k integers. He wants you to find out how many of these integers are prime squares. -----Input----- The first line contains a single integer k (1 le k le 1000) — the number of integers in the list. The second line contains k space-separated integers a_1, a_2, ..., a_k (1 le a_i le 10^6) — the integers in the list. -----Output----- Print a single integer that represents the number of prime squares in the list. -----Example----- Input 5 4 10 25 16 9 Output 3 -----Note----- In the example, the prime squares are 4 (2^2), 25 (5^2), and 9 (3^2). Number 16 is not a prime square because 4 is not a prime number. Number 10 is not a prime square as it cannot be written as p^2 with p being a prime number. Hence the output is 3.","solution":"import math def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def count_prime_squares(k, numbers): Returns the count of prime squares in the list of numbers. prime_squares_count = 0 for number in numbers: sqrt_number = int(math.isqrt(number)) if sqrt_number * sqrt_number == number and is_prime(sqrt_number): prime_squares_count += 1 return prime_squares_count"},{"question":"Given an array of integers, your task is to find the length of the longest subsequence that consists of consecutive integers in sorted order. The subsequence must be strictly increasing or strictly decreasing. Input The first line of input contains an integer t (1 ≤ t ≤ 40), the number of test cases. The following lines describe t test cases, each starting with an integer n (1 ≤ n ≤ 100000), the length of the array, followed by a line containing n space-separated integers. Output For each test case, print a single integer representing the length of the longest subsequence of consecutive integers in sorted order. Example Input: 2 6 1 3 2 2 4 3 5 10 12 11 14 15 Output: 4 3 Explanation In the first test case, the longest subsequence of consecutive integers in sorted order can be [1, 2, 3, 4] or [3, 2, 2, 3]. In the second test case, the subsequence [10, 11, 12] is the longest subsequence of consecutive integers in sorted order.","solution":"def longest_consecutive_subsequence(arr): if not arr: return 0 arr = sorted(set(arr)) longest_streak = 1 current_streak = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(longest_consecutive_subsequence(arr)) return results"},{"question":"Write a function that takes as input a matrix of integers and an integer k, and returns the kth smallest element in the matrix. The matrix is sorted in non-decreasing order both row-wise and column-wise. Constraints: * 1 leq n, m leq 300 * -10^9 leq matrix[i][j] leq 10^9 * 1 leq k leq n times m Input: The input is given in the following format: - The first line contains two integers, n and m, the dimensions of the matrix. - The next n lines each contain m integers, representing the elements of the matrix. - The last line contains a single integer k, representing the position of the desired smallest element. Output: Output the kth smallest element in the matrix. Example: Input: ``` 3 3 1 5 9 10 11 13 12 13 15 8 ``` Output: ``` 13 ```","solution":"import heapq def kth_smallest_element(matrix, k): Returns the kth smallest element in a matrix that is sorted row-wise and column-wise. Enqueues elements from the matrix into a min-heap and extracts the kth smallest one. n = len(matrix) m = len(matrix[0]) min_heap = [] # Add the first element of each row to the heap for i in range(min(n, k)): heapq.heappush(min_heap, (matrix[i][0], i, 0)) # Extract min element from heap k times count = 0 while min_heap: element, r, c = heapq.heappop(min_heap) count += 1 if count == k: return element # If there is another element in the row, push into the heap if c+1 < m: heapq.heappush(min_heap, (matrix[r][c+1], r, c+1))"},{"question":"Dora is a skilled treasure hunter in the mystical land of Pandoria. The land is divided into a grid of size n x m, and each cell either contains a treasure or is empty. Dora has a map of the entire grid and she starts at the cell (0, 0). Each turn, she can move one cell to the right or one cell down, if those cells exist within the grid. She wants to collect as many treasures as possible on her way from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). Given the grid, write a program to find out the maximum number of treasures Dora can collect on her path. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line is 0 if the cell (i, j) is empty and 1 if it contains a treasure. -----Output----- Print the maximum number of treasures Dora can collect on her path. -----Examples----- Input 3 3 1 0 0 0 1 0 0 0 1 Output 3 Input 2 2 1 1 1 1 Output 3 -----Note----- In the first example, Dora can follow the path (0,0) -> (1,0) -> (1,1) -> (2,2) to collect a total of 3 treasures. In the second example, Dora can follow the path (0,0) -> (1,0) -> (1,1) to collect a total of 3 treasures. She can also follow other paths that collect the same amount of treasures.","solution":"def max_treasures(n, m, grid): Returns the maximum number of treasures Dora can collect on her path. # Initialize a DP table with 0s dp = [[0] * m for _ in range(n)] # Fill the DP table for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given a list of tasks to be performed. Each task has a start time, an end time, and a value. You can select tasks in such a way that no two tasks overlap, with the goal of maximizing the sum of the values of the selected tasks. Write a program to determine the maximum sum you can achieve. Tasks are given as a list of tuples, where each tuple consists of three integers: start time, end time, and value. input The first line of the input contains an integer N (1 ≤ N ≤ 100000), representing the number of tasks. Each of the next N lines contains three integers: start time, end time, and value (0 ≤ start time < end time ≤ 1000000, 1 ≤ value ≤ 100000). Output Output a single integer representing the maximum sum of the values of the selected tasks. Example Input 3 1 3 50 2 5 20 4 6 70 Output 120","solution":"from bisect import bisect_right def max_task_value(tasks): # Sort tasks by end time tasks.sort(key=lambda x: x[1]) # Initialize dp array where dp[i] is the max value considering the first i tasks dp = [0] * (len(tasks) + 1) end_times = [task[1] for task in tasks] for i in range(1, len(tasks) + 1): start, end, value = tasks[i-1] # Find the index of last task that doesn\'t conflict j = bisect_right(end_times, start) dp[i] = max(dp[i-1], dp[j] + value) return dp[-1] # Example usage: tasks = [ (1, 3, 50), (2, 5, 20), (4, 6, 70) ] print(max_task_value(tasks)) # Output: 120"},{"question":"Tommy is practicing his card shuffling skills. He decides to start with a sorted deck of N cards, each numbered from 1 to N. Tommy uses a specific shuffling technique that works as follows: 1. Split the deck into two equal halves. If N is odd, the extra card will go to the second half. 2. Take cards alternately from each half, starting with the first card of the first half, then the first card of the second half, then the second card of the first half, and so on. Tommy repeats this shuffling technique until the deck returns to its original sorted state. How many times does Tommy need to shuffle the deck in order to return it to its original order? Input Format A single integer N representing the number of cards in the deck. Constraints 2 leq N leq 1000 Output Format Print the number of times Tommy needs to shuffle the deck to return it to its original order. Sample Input 6 Sample Output 4 Explanation The deck is initially [1, 2, 3, 4, 5, 6]. After each shuffle, the order of the cards changes as follows: 1. [1, 4, 2, 5, 3, 6] 2. [1, 3, 4, 2, 5, 6] 3. [1, 5, 3, 6, 4, 2] 4. [1, 2, 3, 4, 5, 6] Thus, it takes 4 shuffles to return the deck to its original order.","solution":"def shuffle_count(N): Returns the number of shuffles needed to return the deck to its original order. original_deck = list(range(1, N + 1)) current_deck = original_deck[:] shuffles = 0 while True: mid = (N + 1) // 2 first_half = current_deck[:mid] second_half = current_deck[mid:] shuffled_deck = [] for i in range(mid): shuffled_deck.append(first_half[i]) if i < len(second_half): shuffled_deck.append(second_half[i]) current_deck = shuffled_deck shuffles += 1 if current_deck == original_deck: break return shuffles"},{"question":"A robotics team is programming a robot to traverse a grid. The grid is an m x n grid represented by a matrix where each cell can either be 0 (passable) or 1 (blocked). The robot can move in four directions: up, down, left, or right, but it cannot move diagonally. The robot starts at the top-left corner of the grid, and the goal is to find the shortest path to the bottom-right corner. If the bottom-right corner is unreachable, return -1. Input The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the grid. The next m lines each contain n integers (0 or 1) representing the cells of the grid. The top-left and bottom-right corners of the grid are always passable (0). Output Output the length of the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, output -1. Examples Input 3 3 0 1 0 0 1 0 0 0 0 Output 5 Input 3 3 0 1 1 1 1 1 1 0 0 Output -1 Input 5 6 0 0 0 1 1 1 0 1 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1 0 1 1 1 0 0 0 Output 10","solution":"from collections import deque def shortest_path(grid): Find the shortest path in a grid from top-left to bottom-right corner. if not grid or not grid[0]: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == 0 queue = deque([(0, 0, 1)]) # store (x, y, distance) grid[0][0] = 1 # mark as visited while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): grid[nx][ny] = 1 # mark as visited queue.append((nx, ny, dist + 1)) return -1 def main(m, n, grid): return shortest_path(grid)"},{"question":"Lisa loves reading books and wants to keep track of her reading progress. She has a list of N books, each with a certain number of pages. Lisa reads books in the order they are presented in the list. Each day, she reads exactly M pages. If Lisa reaches the end of a book, she immediately starts reading the next one. We want to determine how many total days it will take for Lisa to finish reading all the books on her list. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing two space-separated integers N and M. - The next line will contain N space-separated integers representing the number of pages in each book. ------ Output Format ------ For each test case, output on a new line the number of days it will take Lisa to finish all the books. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ M ≤ 100 1 ≤ (number of pages in a book) ≤ 1000 ----- Sample Input 1 ------ 3 3 15 30 45 60 2 50 75 100 4 20 10 20 30 40 ----- Sample Output 1 ------ 9 4 5","solution":"def reading_days(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] pages = test_cases[i][1] total_pages = sum(pages) days = (total_pages + M - 1) // M # Ceiling division results.append(days) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Vertices are numbered from 1 to n and each vertex is assigned a positive integer weight. The weight of a simple path is defined as the sum of the weights of the vertices in that path. A path is a simple path if all vertices in the path are distinct. For each vertex, output the maximum possible weight of a simple path starting from that vertex. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and the number of edges in the graph. The second line contains n integers w1, w2, ..., wn, where wi (1 ≤ wi ≤ 1000) is the weight of the i-th vertex. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) denoting an edge between vertices u and v. Output Print n integers in a single line, the i-th of which is the maximum possible weight of a simple path starting from vertex i. Examples Input 4 4 10 20 30 40 1 2 2 3 3 4 4 2 Output 100 90 70 40 Input 3 2 1 2 3 1 2 2 3 Output 6 5 3 Note In the first sample, the following paths have the maximum weights starting from each vertex: 1 -> 2 -> 4 -> 3: Weight = 10 + 20 + 40 + 30 = 100 2 -> 4 -> 3: Weight = 20 + 40 + 30 = 90 3 -> 4: Weight = 30 + 40 = 70 4: Weight = 40","solution":"from collections import defaultdict def max_path_weight(n, m, weights, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_weights = [0] * n visited = [False] * n def dfs(node): if visited[node]: return max_weights[node] visited[node] = True max_weight = weights[node] for neighbor in graph[node + 1]: max_weight = max(max_weight, weights[node] + dfs(neighbor - 1)) max_weights[node] = max_weight return max_weight for i in range(n): if not visited[i]: dfs(i) return max_weights # Example usage n = 4 m = 4 weights = [10, 20, 30, 40] edges = [(1, 2), (2, 3), (3, 4), (4, 2)] print(max_path_weight(n, m, weights, edges)) # Output: [100, 90, 70, 40]"},{"question":"You are given a list of integers. Your task is to find the length of the longest subsequence such that the sum of any two elements in this subsequence is not divisible by a given integer K. ------ Input ------ The first line of the input contains two integers N and K, where N is the number of elements in the list and K is the integer used for the divisibility condition. The second line of the input contains N integers, the elements of the list. ------ Output ------ Print a single integer denoting the length of the longest subsequence that satisfies the given condition. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ 100 1 ≤ Elements of the list ≤ 10^{9} ------ Sample Input 1 ------ 6 4 19 10 12 24 25 22 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ In this example, the longest subsequence that satisfies the condition is [19, 10, 25], since: - 19 + 10 = 29 (not divisible by 4) - 19 + 25 = 44 (not divisible by 4) - 10 + 25 = 35 (not divisible by 4) No longer subsequence satisfies the condition.","solution":"def longest_subsequence_length(N, K, arr): Returns the length of the longest subsequence such that the sum of any two elements in this subsequence is not divisible by K. # Frequency array to count the modulo K values freq = [0] * K # Fill the frequency array with counts of each modulo K value for num in arr: freq[num % K] += 1 # Start by picking at most one element from the group where num % K == 0 count = min(freq[0], 1) # Loop from 1 to K // 2 and try to pick the most elements between i and K - i for i in range(1, (K // 2) + 1): if i != K - i: count += max(freq[i], freq[K - i]) else: count += 1 return count # Example usage # Sample Input: 6 4 [19, 10, 12, 24, 25, 22] # Expected Output: 3"},{"question":"A palindrome sequence is a sequence that reads the same forwards and backwards. For example, \\"radar\\", \\"level\\", and \\"aibohphobia\\" are all palindrome sequences. Chef is fascinated by palindrome sequences and keeps a list of words that he wants to check for this property. He wants to know how many palindrome sequences are in his list. To make it a bit challenging, Chef is only interested in words that are considered palindrome sequences when ignoring case and non-alphanumeric characters. For example, \\"A man, a plan, a canal, Panama!\\" should be considered a palindrome sequence. Can you help Chef by writing a program that takes a list of words and tells him how many of them are palindrome sequences? ------ Input ------ The first line contains a single number T, the number of test cases. Each test case consists of one word W, which can contain letters, numbers, punctuation, and spaces. ------ Output ------ For each test case, output \\"YES\\" if the word is a palindrome sequence, \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ Length of W ≤ 1000 ------ Sample Input ------ 3 radar A man, a plan, a canal, Panama! hello ------ Sample Output ------ YES YES NO ------ Explanation ------ - \\"radar\\" is a straightforward palindrome. - \\"A man, a plan, a canal, Panama!\\" becomes \\"amanaplanacanalpanama\\" when non-alphanumeric characters are removed and case is ignored, which is a palindrome. - \\"hello\\" is not a palindrome.","solution":"import re def is_palindrome(word): Check if a given word is a palindrome sequence, ignoring cases and non-alphanumeric characters. # Remove non-alphanumeric characters and convert to lowercase cleaned_word = re.sub(r\'[^a-zA-Z0-9]\', \'\', word).lower() # Check if the cleaned word is equal to its reverse return cleaned_word == cleaned_word[::-1] def check_palindrome_sequences(test_cases): results = [] for word in test_cases: if is_palindrome(word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the minimum number of letters you need to remove from the string so that each remaining letter appears at most twice consecutively. For example, if the input string is \\"aaabbbc\\", you will need to remove one \'a\' and one \'b\', resulting in the string \\"aabbc\\". -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. -----Output----- Print the minimum number of letters you need to remove so that each remaining letter appears at most twice consecutively. -----Examples----- Input aaabbbc Output 2 Input aabbcc Output 0 Input aaa Output 1","solution":"def min_removals_to_ensure_two_consecutive(s): Function to determine the minimum number of letters to remove so that each letter appears at most twice consecutively. removals = 0 count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 if count > 2: removals += 1 else: count = 1 return removals"},{"question":"Create a function `find_missing_number` that takes a list of unique integers where each integer is within a consecutive range and is passed in as an argument. The function should return the single missing integer from the list. For example: ```python find_missing_number([1, 2, 4, 5]) -> 3 find_missing_number([10, 11, 13]) -> 12 find_missing_number([0, 1, 2, 4]) -> 3 ``` **Key assumptions:** - You can assume that the input list will have at least two integers. - The integers in the given list are unique and not duplicated. **Hints:** - Think about mathematical properties such as summation to solve the problem efficiently. - Consider the range and the expected summation of numbers within that range.","solution":"def find_missing_number(nums): Returns the single missing integer from a list of unique consecutive integers. Args: nums (list of int): List containing the consecutive integers with one missing. Returns: int: The missing integer. n = len(nums) + 1 total_sum = n * (min(nums) + max(nums)) // 2 # Sum of an arithmetic series actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Many multi-level marketing companies employ a hierarchical structure where a distributor may have multiple recruits beneath them, who in turn may also have their own recruits, forming a tree-like hierarchy. These companies often calculate the total sales of each distributor by summing up the sales generated not only by themselves but also by all their recruits at all levels beneath them in the hierarchy. The Challenge Given the hierarchical structure of a group of distributors along with their individual sales, write a function to calculate the total sales of each distributor. You are provided with: 1. A dictionary `sales` where the keys are distributor IDs (strings) and the values are the sales generated by that distributor initially (integers). 2. A dictionary `recruits` where the keys are distributor IDs (strings) and the values are lists of distributor IDs who are recruited directly by the key distributor. You need to return a dictionary where the keys are distributor IDs and the values are their total sales (initial sales plus the sales of all their recruits at all levels). # Example: ```python sales = { \\"A\\": 100, \\"B\\": 50, \\"C\\": 40, \\"D\\": 30, \\"E\\": 20 } recruits = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"D\\", \\"E\\"], \\"C\\": [], \\"D\\": [], \\"E\\": [] } ``` For the given example, the total sales would be: ```python { \\"A\\": 240, \\"B\\": 100, \\"C\\": 40, \\"D\\": 30, \\"E\\": 20 } ``` # Function Signature: ```python def calculate_total_sales(sales: dict, recruits: dict) -> dict: pass ``` # Constraint: - Each distributor\'s ID is a unique string. - All sales values are non-negative integers. - Each distributor\'s recruit list contains unique IDs. - You can assume that there are no cyclic dependencies in the recruit relationships.","solution":"def calculate_total_sales(sales, recruits): def get_total_sales(distributor, visited): if distributor in visited: return 0 visited.add(distributor) total = sales.get(distributor, 0) for recruit in recruits.get(distributor, []): total += get_total_sales(recruit, visited) return total total_sales = {} for distributor in sales: visited = set() total_sales[distributor] = get_total_sales(distributor, visited) return total_sales"},{"question":"Chris wants to form all possible unique substrings from a given string. He needs to find out the total number of unique substrings he can generate. Help Chris by writing a program that calculates the total number of unique substrings for a given string. Input: - The first line contains a single integer \'T\', the number of test cases. - Each of the next \'T\' lines contains a single string \'S\'. Output: - For each test case, output the total number of unique substrings of the given string. Constraints: - 1 <= T <= 50 - 1 <= length of S <= 100 Example Input: 3 abc aaa abcd Output: 6 3 10 Explanation: For the string \\"abc\\": The unique substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". So, the output is 6. For the string \\"aaa\\": The unique substrings are \\"a\\", \\"aa\\", and \\"aaa\\". So, the output is 3. For the string \\"abcd\\": The unique substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", and \\"abcd\\". So, the output is 10.","solution":"def count_unique_substrings(s): Returns the count of unique substrings of the given string s. unique_subs = set() n = len(s) # Generate all possible substrings for i in range(n): for j in range(i + 1, n + 1): unique_subs.add(s[i:j]) return len(unique_subs) def process_test_cases(T, test_cases): Processes T test cases and returns a list with the count of unique substrings for each test case. results = [] for s in test_cases: results.append(count_unique_substrings(s)) return results"},{"question":"A tech company is designing a new software that requires the efficient management of user preferences. They want to implement a system where they can easily find the most popular preference among a set of users. Each user has a list of preferences, ranked in order of their desirability. The company wants to find the most popular preference across all users, defined as the preference that appears first in the preferences list of the most users. If there is a tie, the preference that appears earlier in the preferences lists should be chosen. Write an efficient function to determine the most popular preference. -----Input----- - The first line contains an integer n (1 <= n <= 200,000), which is the number of users. - The second line contains an integer m (1 <= m <= 100), which is the number of preferences for each user. - The following n lines each contain m integers each, representing the preferences list of the i-th user. Each integer is positive and represents a unique preference id. -----Output----- - Output one integer, which is the id of the most popular preference. -----Examples----- Input 3 3 1 2 3 3 1 2 2 3 1 Output 1 Input 4 4 1 2 3 4 4 1 2 3 3 4 1 2 2 3 4 1 Output 1 -----Note----- In the first example, preference 1 is the most popular since it appears first in the preferences list of 2 users (in first and second lists). In the second example, preference 1 is also the most popular appearing first in the preferences list of 2 users. Even though multiple preferences have the same count, preference 1 appears first in the list. Your task is to design the function to find the most popular preference taking into account the above constraints and requirements.","solution":"def most_popular_preference(n, m, preferences): Returns the id of the most popular preference. n: number of users m: number of preferences for each user preferences: list of lists where each sublist represents the preferences of a user preference_count = {} # Count the number of times each preference is the first choice. for user_prefs in preferences: first_pref = user_prefs[0] if first_pref in preference_count: preference_count[first_pref] += 1 else: preference_count[first_pref] = 1 # Find the preference with the maximum count, and resolve ties by selecting the preference with the smallest id most_popular = None max_count = 0 for preference, count in preference_count.items(): if count > max_count or (count == max_count and (most_popular is None or preference < most_popular)): most_popular = preference max_count = count return most_popular"},{"question":"Given a list of distinct integers, write a function that rearranges the elements of the list in such a way that no two adjacent elements have a difference of exactly 1. If such an arrangement is not possible, return an empty list. If multiple arrangements are possible, return any one of them.","solution":"def rearrange_list(nums): Rearranges the elements of the given list so that no two adjacent elements have a difference of exactly 1. If such an arrangement is not possible, returns an empty list. if not nums: return [] nums.sort() half = (len(nums) + 1) // 2 small = nums[:half] large = nums[half:] result = [] while small and large: result.append(large.pop()) result.append(small.pop()) result += small[::-1] + large[::-1] for i in range(1, len(result)): if abs(result[i] - result[i - 1]) == 1: return [] return result"},{"question":"Write a function that receives a list of integers and returns two lists sorted in ascending order. The first list should only contain the even numbers from the input list and the second list should only contain the odd numbers from the input list. If the input list is empty or contains no even or odd numbers, the function should return an empty list for that corresponding category. Example 1: Input: nums = [4, 1, 7, 10, 3, 8, 5] Output: [[4, 8, 10], [1, 3, 5, 7]] Example 2: Input: nums = [6, 3, 2, 1, 9] Output: [[2, 6], [1, 3, 9]] Example 3: Input: nums = [7, 11, 5] Output: [[], [5, 7, 11]] Example 4: Input: nums = [] Output: [[], []] Example 5: Input: nums = [4, 8, 12] Output: [[4, 8, 12], []] Constraints: 1. All elements in the input list are integers between -10^6 and 10^6. 2. The input list can have at most 10^5 elements.","solution":"def partition_and_sort(nums): Receives a list of integers and returns two lists sorted in ascending order. The first list contains only the even numbers from the input list. The second list contains only the odd numbers from the input list. evens = sorted([num for num in nums if num % 2 == 0]) odds = sorted([num for num in nums if num % 2 != 0]) return [evens, odds]"},{"question":"Tom and Jerry are playing a game on a rectangular grid of size N by M. The grid consists of cells, each of which is either an obstacle or a free space. Tom starts at the top-left corner of the grid, and Jerry starts at the bottom-right corner. Tom wants to catch Jerry by reaching Jerry\'s starting cell. However, Tom can move only right or down in each step, while Jerry can move only left or up in each step. Both Tom and Jerry avoid obstacles. We need to determine if Tom can catch Jerry, assuming that both players can move simultaneously. -----Input----- The first line of input contains two integers N and M (1 le N, M le 1000), number of rows and columns respectively. The next N lines each contain M characters representing the grid. Each character is either \'.\' (a free space) or \'#\' (an obstacle). -----Output----- Output a single word \\"YES\\" if Tom can catch Jerry, otherwise print \\"NO\\". -----Examples----- Sample Input 1: 3 4 ..#. ...# #... Sample Output 1: YES Sample Input 2: 3 4 ..#. .#.. #... Sample Output 2: NO","solution":"def can_tom_catch_jerry(N, M, grid): def is_reachable(start_row, start_col, end_row, end_col): queue = [(start_row, start_col)] visited = set() directions = [(1, 0), (0, 1)] # right, down while queue: current_row, current_col = queue.pop(0) if (current_row, current_col) == (end_row, end_col): return True for dr, dc in directions: new_row, new_col = current_row + dr, current_col + dc if 0 <= new_row < N and 0 <= new_col < M and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: queue.append((new_row, new_col)) visited.add((new_row, new_col)) return False tom_can_reach = is_reachable(0, 0, N-1, M-1) def transpose(grid): return [\\"\\".join(row) for row in zip(*grid)] def reverse_grid(grid): return [row[::-1] for row in grid][::-1] reversed_grid = reverse_grid(transpose(grid)) jerry_can_reach = is_reachable(0, 0, N-1, M-1) return \\"YES\\" if tom_can_reach and jerry_can_reach else \\"NO\\""},{"question":"Write a function `sumPairs(ints, s)` that takes a list of integers `ints` and an integer `s`. The goal of the function is to find the first pair of integers in the list that sum up to `s`. The function should return a tuple containing this pair of integers. If there are no pairs of integers that sum up to `s`, return `None`. # Some Examples of Return: ``` sumPairs([1, 4, 8, 7, 3, 15], 8) # should return (1, 7), since 1 + 7 = 8 and 1 appears before 7 in the list sumPairs([1, -2, 3, 0, -6, 1], -6) # should return (0, -6), since 0 + (-6) = -6 sumPairs([20, -13, 40], -7) # should return None, since no two numbers sum up to -7 sumPairs([10, 5, 2, 3, 7, 5], 10) # should return (3, 7), since 3 + 7 = 10 and 3 appears before 7 ``` # Note: - You can see examples for your language in \\"Sample Tests\\". - If several pairs sum up to the same number, only the first occurring pair should be returned. - Only unpaired integers are considered, that is, each integer in the list should be used only once even if it appears multiple times in different combinations that sum to `s`.","solution":"def sumPairs(ints, s): Finds the first pair of integers in the list that sums up to s. Parameters: ints (list): A list of integers. s (int): The target sum. Returns: tuple: A tuple containing the first pair of integers that sum to s or None if no such pair exists. seen = set() for number in ints: complement = s - number if complement in seen: return (complement, number) seen.add(number) return None"},{"question":"You are tasked with delivering pizza to hungry customers. Each customer specifies a time by which they must receive the pizza, and if you deliver it exactly on time, you will receive a tip. However, you can only deliver to one customer at a time. Given the times by which each customer expects their delivery, determine the fewest number of deliveries you need to make to keep every customer satisfied. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N — the number of customers. - The second line of each test case contains N integers, the expected delivery times of the customers. ------ Output Format ------ For each test case, output the minimum number of deliveries you need to make to keep all customers satisfied. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Expected Delivery Time ≤ 10^9 (expected delivery times are not necessarily unique) ------ Sample Input 1 ------ 2 3 1 2 3 4 1 2 2 3 ------ Sample Output 1 ------ 3 3 ------ Explanation 1 ------ Test case 1: Three customers with delivery times of 1, 2, and 3. Each delivery can be made exactly on time, and thus 3 deliveries are needed. Test case 2: Four customers with delivery times of 1, 2, 2, and 3. Here, you can combine the deliveries for the two customers expecting their pizza at time 2 into one delivery, thus requiring only 3 deliveries in total (one for time 1, one for time 2, and one for time 3).","solution":"def min_deliveries(t, cases): Calculate the minimum number of deliveries required to keep all customers satisfied. :param t: Number of test cases (int) :param cases: List of tuples containing number of customers and their expected delivery times. :return: List containing the minimum number of deliveries for each test case. results = [] for case in cases: n, delivery_times = case unique_times = set(delivery_times) results.append(len(unique_times)) return results"},{"question":"Given a matrix of size M x N that contains integers, determine whether there is a path from the top-left corner to the bottom-right corner, where you can only move down or right at any point in time, such that the values along the path form a strictly increasing sequence. Return a boolean value: `True` if such a path exists, otherwise `False`. Example 1: Input: M = 3, N = 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: True Explanation: One possible path is 1 -> 2 -> 3 -> 6 -> 9. Example 2: Input: M = 3, N = 3 matrix = [ [9, 1, 2], [6, 5, 4], [3, 2, 1] ] Output: False Explanation: There is no path such that the values are in strictly increasing order. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isIncreasingPath()` which takes the integers M and N and a 2D list `matrix` as input and returns `True` if there is a path from the top-left to the bottom-right corner with strictly increasing values, otherwise `False`. Expected Time Complexity: O(M * N) Expected Space Complexity: O(M * N) Constraints: 1 <= M, N <= 100 -10^4 <= matrix[i][j] <= 10^4","solution":"def isIncreasingPath(M, N, matrix): Determines if there is a path from the top-left corner to the bottom-right corner in the matrix such that all values along the path are in strictly increasing order. Parameters: 1. M (int): the number of rows in the matrix 2. N (int): the number of columns in the matrix 3. matrix (List[List[int]]): the matrix of integers Returns: bool: True if there is an increasing path, otherwise False. # If the matrix is empty, return False if M == 0 or N == 0: return False # A 2D list to keep track of the paths that have been validated dp = [[False] * N for _ in range(M)] dp[0][0] = True for i in range(M): for j in range(N): if i > 0 and dp[i-1][j] and matrix[i][j] > matrix[i-1][j]: dp[i][j] = True if j > 0 and dp[i][j-1] and matrix[i][j] > matrix[i][j-1]: dp[i][j] = True return dp[M-1][N-1]"},{"question":"Zara is working on a project that requires analyzing times from marathon races. She has two tasks that she needs help with. First, she needs a function that, given the total time taken in seconds and the total number of kilometers run, will return the average speed in meters per second (m/s), rounded to 2 decimal places. Second, she needs a function that, given a list of split times (in seconds) and the corresponding distances (in kilometers), will return a list of tuples where each tuple contains the split time and the cumulative time up to that point, both rounded to 2 decimal places. For example, if the split times are [3600, 2700, 3800] corresponding to distances [10, 7, 5], the result should be [(3600.00, 3600.00), (2700.00, 6300.00), (3800.00, 10100.00)]. Exploratory note: Assume the marathons have at least one split time and distance, and all times and distances are in positive numbers.","solution":"def average_speed(total_seconds, total_kilometers): Returns the average speed in meters per second (m/s) given the total time in seconds and the total distance in kilometers. total_meters = total_kilometers * 1000 speed = total_meters / total_seconds return round(speed, 2) def cumulative_split_times(split_times, distances): Returns a list of tuples where each tuple contains the split time and the cumulative time up to that point, both rounded to 2 decimal places. cumulative_time = 0 result = [] for time in split_times: cumulative_time += time result.append((round(time, 2), round(cumulative_time, 2))) return result"},{"question":"Write a function that takes a string as input and returns the string with each character sorted according to the frequency of their occurrences in descending order. If two characters have the same frequency, they should appear in the order they first appear in the input string. # Examples: ```python frequency_sort(\\"tree\\") //=> \\"eert\\" frequency_sort(\\"cccaaa\\") //=> \\"cccaaa\\" || \\"aaaccc\\" frequency_sort(\\"Aabb\\") //=> \\"bbAa\\" ``` # Documentation: ```python frequency_sort(s) ``` - s - the input string The function should count the frequency of each character in the string and then sort the characters based on their frequencies in descending order. If multiple characters have the same frequency, they should appear in the same order as they first appear in the input string.","solution":"from collections import Counter def frequency_sort(s): Returns the string with characters sorted according to their frequency of appearance in descending order. If two characters have the same frequency, they appear in the order they first appear in \'s\'. :param s: Input string :return: String sorted by frequency of characters count = Counter(s) # Sorting based on frequency (descending) and order of first appearance (ascending) sorted_characters = sorted(s, key=lambda x: (-count[x], s.index(x))) return \'\'.join(sorted_characters)"},{"question":"You are given a list of integers representing the heights of buildings, where each building is of unit width. The task is to calculate how much water will be trapped between the buildings after a rainfall. Example 1: Input: heights = [3, 0, 2, 0, 4] Output: 7 Explanation: The buildings form the following structure: # # # # # Water trapped will be 3 units between heights 3 and 2, 1 unit between heights 2 and 4, and 3 more units between heights 2 and 4, totalling to 7 units. Example 2: Input: heights = [2, 1, 2] Output: 1 Explanation: The buildings form the following structure: # # # Water trapped will be 1 unit between the two heights of 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function calculateTrappedWater() which takes a list of integers heights representing the height of buildings and return the total amount of water trapped after the rainfall. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N), where N is the number of buildings in the input list Constraints: 1 <= len(heights) <= 10000 0 <= heights[i] <= 1000","solution":"def calculateTrappedWater(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A square matrix is called special if the sum of the elements in each row and each column is the same. Given an integer N and a sequence of N^2 integers, determine whether it is possible to rearrange these integers into a special N x N matrix. -----Constraints----- - 1 leq N leq 10 - Each element in the sequence is an integer between 1 and 100 -----Input----- Input is given from Standard Input in the following format: N a1 a2 a3 ... a(N^2) -----Output----- Print \\"Yes\\" if it is possible to rearrange the given sequence into a special N x N matrix, otherwise print \\"No\\". -----Sample Input----- 3 2 7 6 9 5 1 4 3 8 -----Sample Output----- Yes The given sequence can be rearranged into the following special matrix: 2 7 6 9 5 1 4 3 8","solution":"def can_form_special_matrix(N, elements): Determine if it is possible to rearrange the sequence of N^2 integers into a special N x N matrix. Args: N : int - the dimension of the matrix elements : list of int - the sequence of N^2 integers Returns: str - \\"Yes\\" if it is possible to rearrange into a special matrix, otherwise \\"No\\" from itertools import permutations target_sum = sum(elements) // N # This is the target sum for each row/column def is_special_matrix(matrix): for row in matrix: if sum(row) != target_sum: return False for col in zip(*matrix): if sum(col) != target_sum: return False return True # Try all permutations to see if any can form a special matrix for perm in permutations(elements): matrix = [perm[i * N:(i + 1) * N] for i in range(N)] if is_special_matrix(matrix): return \\"Yes\\" return \\"No\\" # Example usage (though not part of the function to be tested): # print(can_form_special_matrix(3, [2, 7, 6, 9, 5, 1, 4, 3, 8])) # Expected \\"Yes\\""},{"question":"Write a function that determines whether a given string of parentheses is valid. A string is considered valid if all parentheses are correctly closed and nested. The input string will contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and will have a maximum length of 10,000 characters. Constraints - 1 ≤ length of string ≤ 10,000 - The string only contains \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Input The input consists of a single string s, which contains the sequence of parentheses. Output Print \\"YES\\" if the string is valid, and \\"NO\\" otherwise. Examples Input \\"()\\" Output \\"YES\\" Input \\"([)]\\" Output \\"NO\\" Input \\"{[()]}\\" Output \\"YES\\"","solution":"def is_valid_parentheses(s): Determines if a given string of parentheses is valid. Args: s (str): a string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Returns: str: \\"YES\\" if the string is valid, otherwise \\"NO\\" stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses: top_element = stack.pop() if stack else \'#\' if matching_parentheses[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"# Task You have been assigned the task of programming a simple text editor with undo and redo functionality. The text editor contains a document initialized to an empty string. The editor supports a series of operations which can be applied consecutively. However, after executing any operation or series of operations, you must also support undoing a specific number of operations and redoing a specific number of previously undone operations. Each supported operation is one of the following: - append(str) : add the string `str` to the end of the document. - delete(n) : remove the last `n` characters from the document. - undo() : undo the last performed operation that is not already undone. - redo() : redo the last undone operation that hasn\'t been redone. Given a series of operations in sequence including undo and redo, write a function to determine the final state of the document. # Example For the input operations `[\\"append(hello)\\",\\"append( world)\\",\\"delete(6)\\",\\"undo()\\",\\"redo()\\"]`, the output should be `\\"hello \\"`. Here\'s the resulting sequence of operations: Initially the document is `\\"\\"`. ``` 1. append(\\"hello\\") -> document is \\"hello\\" 2. append(\\" world\\") -> document is \\"hello world\\" 3. delete(6) -> document is \\"hello\\" 4. undo() -> document is \\"hello world\\" 5. redo() -> document is \\"hello\\" ``` # Input/Output - `[input]` array of strings `operations` An array of strings representing the operations and their arguments (if any). Constraints: Each operation will be one of the following: `\\"append(str)\\"`, `\\"delete(n)\\"`, `\\"undo()\\"`, `\\"redo()\\"`. You can assume the input is well-formed. - `[output]` string The final state of the document. # Initial code template ```python def text_editor(operations): # Implement your solution here pass ```","solution":"def text_editor(operations): document = \\"\\" history = [] undone = [] for operation in operations: if operation.startswith(\\"append(\\"): string = operation[7:-1] history.append((operation, document)) document += string undone = [] elif operation.startswith(\\"delete(\\"): n = int(operation[7:-1]) history.append((operation, document)) document = document[:-n] undone = [] elif operation == \\"undo()\\": if history: last_op, last_doc = history.pop() undone.append((last_op, document)) document = last_doc elif operation == \\"redo()\\": if undone: last_undone_op, last_undone_doc = undone.pop() history.append((last_undone_op, document)) if last_undone_op.startswith(\\"append(\\"): string = last_undone_op[7:-1] document += string elif last_undone_op.startswith(\\"delete(\\"): n = int(last_undone_op[7:-1]) document = document[:-n] return document"},{"question":"Marcus is archiving a sequence of numbers and has devised a novel way to compress his data. Marcus\' new algorithm involves grouping consecutive duplicate numbers together and representing each group by a single instance of the number along with the count of its occurrences. However, Marcus is facing an issue in counting these groups efficiently. He needs your help to write a program that can compress the sequence according to his method. Given an array of integers, compress it by combining consecutive duplicate numbers and representing the count of each combination. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) - the length of the array. The second line contains n space-separated integers representing the array elements. -----Output----- Output the compressed sequence in the format where each unique number is followed by the count of its consecutive occurrences, separated by a space. -----Examples----- Input 6 1 1 2 2 2 3 Output 1 2 2 3 3 1 Input 5 4 4 4 4 4 Output 4 5 Input 8 1 2 2 3 3 3 4 4 Output 1 1 2 2 3 3 4 2 -----Note----- In the first example, the number 1 appears twice consecutively, followed by the number 2 appearing three times consecutively, and then the number 3 appears once. In the third example, each pair of consecutive duplicates is counted and combined in the resulting output sequence.","solution":"def compress_sequence(n, array): Compresses the sequence by combining consecutive duplicate numbers and representing the count of each combination. Parameters: n (int): The length of the array. array (list of int): The array elements. Returns: list of int: The compressed sequence in the format where each unique number is followed by the count of its consecutive occurrences. if n == 0: return [] compressed = [] current_num = array[0] count = 1 for i in range(1, n): if array[i] == current_num: count += 1 else: compressed.append(current_num) compressed.append(count) current_num = array[i] count = 1 compressed.append(current_num) compressed.append(count) return compressed"},{"question":"Susan is practicing problem-solving with binary strings and comes across the following task: You are given a binary string s consisting of only \'0\'s and \'1\'s. Your task is to find the minimum number of substrings you can split the string into such that each substring is a palindrome. A palindrome is a string that reads the same forwards and backwards. Input The first line of input contains an integer T (1 ≤ T ≤ 10^4) denoting the number of test cases. Each of the next T lines contains a binary string s of length between 1 and 10^5. It is guaranteed that the total length of all strings in all test cases does not exceed 10^6. Output For each test case, output a single line containing the minimum number of palindromic substrings. Example Input 3 11011 1001 00010 Output 3 2 5","solution":"def min_palindromic_substrings(T, cases): results = [] for s in cases: # If the whole string is a palindrome, the answer is 1 if s == s[::-1]: results.append(1) else: results.append(2) return results"},{"question":"Write a function to determine if a series of strings can form a valid pyramid. Each string in the series must be exactly one character longer than its predecessor, and each subsequent string must start with the same characters as the previous string. For example, consider the following series of strings: - \\"a\\" - \\"ab\\" - \\"abc\\" - \\"abcd\\" This series forms a valid pyramid because each string is one character longer than the last and starts with the same characters as the previous string. If the series were: - \\"a\\" - \\"ab\\" - \\"ac\\" This series would not form a valid pyramid because \\"ac\\" does not start with \\"ab\\". Write a function that takes a list of strings and returns \\"valid\\" if they form a valid pyramid and \\"invalid\\" otherwise. -----Input Specification----- The input contains several test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100). Then a series of n strings follows, each on a new line. You can assume that the strings contain only lowercase English letters and have lengths between 1 and 100 inclusive. The last test case is followed by a zero. -----Output Specification----- For each test case, output \\"valid\\" if the series forms a valid pyramid, and \\"invalid\\" otherwise. Adhere to the format shown in the sample output. -----Sample Input----- 3 a ab abc 4 x xq xqe xqel 4 m ma man max 0 -----Sample Output----- valid valid invalid","solution":"def is_valid_pyramid(n, words): Determines whether the series of words forms a valid pyramid. :param n: An integer representing the number of words :param words: A list of strings :return: \\"valid\\" if the series forms a valid pyramid, \\"invalid\\" otherwise if n == 0: return \\"invalid\\" for i in range(1, n): if len(words[i]) != len(words[i - 1]) + 1: return \\"invalid\\" if not words[i].startswith(words[i - 1]): return \\"invalid\\" return \\"valid\\" def process_input(input_data): Process input data to determine the validity of multiple test cases. :param input_data: A string representing the input :return: A list of results for each test case results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break words = lines[i+1:i+1+n] results.append(is_valid_pyramid(n, words)) i += n + 1 return results if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result)"},{"question":"Given an array of N integers, the goal is to find the number of unique absolute differences that can be formed between any two elements in the array. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N - the size of the array. - The second line of each test case contains N space-separated integers. ------ Output Format ------ For each test case, output a single line: the number of unique absolute differences. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 -10^5 ≤ A[i] ≤ 10^5 ----- Sample Input 1 ------ 2 3 10 20 30 4 -5 0 5 10 ----- Sample Output 1 ------ 3 4 ----- Explanation 1 ------ - Test case 1: From the array [10, 20, 30], the possible differences are |20-10|=10, |30-10|=20, and |30-20|=10. The unique differences are 10 and 20. Hence, the total number of unique differences is 2. - Test case 2: From the array [-5, 0, 5, 10], the possible differences are |0 + 5|=5, |5 + 5|=10, |10 + 5|=15, |0 - 5|=5, |5 - 10|=5, |0 + 10|=10. The unique differences are 5, 10, and 15. Hence, the total number of unique differences is 3.","solution":"def unique_absolute_differences(test_cases): results = [] for t in test_cases: N, array = t unique_diffs = set() for i in range(N): for j in range(i + 1, N): abs_diff = abs(array[i] - array[j]) unique_diffs.add(abs_diff) results.append(len(unique_diffs)) return results # For directly running in the solution segment if __name__ == \\"__main__\\": T = int(input().strip()) test_cases = [] for _ in range(T): N = int(input().strip()) array = list(map(int, input().strip().split())) test_cases.append((N, array)) results = unique_absolute_differences(test_cases) for result in results: print(result)"},{"question":"Write a function `count_valid_parentheses(n)`, where `n` is an integer. This function returns the number of distinct valid parentheses combinations of length `2n`. A valid combination of parentheses is one in which every opening parenthesis has a corresponding closing parenthesis, and the number of closing parentheses never exceeds the number of opening parentheses at any point in the combination. For example, if `n = 3`, the possible valid combinations of length `6` (2n) are: - \\"((()))\\" - \\"(()())\\" - \\"(())()\\" - \\"()(())\\" - \\"()()()\\" Hence, the function should return `5` for `n = 3`. # Input An integer `n` (`1 <= n <= 10`). # Output An integer representing the number of distinct valid parentheses combinations of length `2n`. # Example Input ``` 3 ``` Output ``` 5 ``` Input ``` 4 ``` Output ``` 14 ``` You can implement this function using any suitable algorithm or data structure, such as recursion with memoization, dynamic programming, or an iterative approach.","solution":"def count_valid_parentheses(n): Returns the number of distinct valid parentheses combinations of length 2n. def catalan_number(n): if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0] = catalan[1] = 1 for i in range(2, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - 1 - j] return catalan[n] return catalan_number(n)"},{"question":"Given an integer array representing the heights of different buildings, you are required to determine the number of buildings that can view the sunset. The buildings point towards the west where sunset happens. A building can see the sunset if there are no taller buildings to its west. Example 1: Input: N = 5 buildings[] = {4, 7, 2, 5, 8} Output: 3 Explanation: Buildings with heights 4, 7, and 8 can see the sunset. Building with height 5 is blocked by the building with height 7. Example 2: Input: N = 4 buildings[] = {12, 15, 10, 8} Output: 2 Explanation: Only buildings with heights 12 and 15 can see the sunset, as the 15 blocks buildings 10 and 8. Example 3: Input: N = 6 buildings[] = {3, 6, 3, 5, 7, 2} Output: 3 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sunsetViews() which takes the array buildings[] and its size N as inputs and returns the desired output. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ buildings[i] ≤ 10^5","solution":"def sunsetViews(buildings): Returns the number of buildings that can view the sunset. max_height = 0 count = 0 for height in buildings: if height > max_height: max_height = height count += 1 return count"},{"question":"In an enchanted forest, there are several types of magical fruits placed on a tree. Each type of fruit can either grant you magic power or decrease your magic power. A magician wants to gather as much magic power as possible by choosing a contiguous segment of fruits from the tree. Determine the maximum magic power the magician can gather. You are given an array where each element represents the magic power of a fruit on the tree. Positive values increase the magic power, while negative values decrease it. Find the sum of the contiguous subarray with the maximum sum of magic power. Input: The first line contains an integer T that specifies the number of test cases. For each test case: - The first line contains an integer N which is the number of magical fruits. - The second line contains N space-separated integers representing the magic power values of each fruit. Output: For each test case, print a single line containing the maximum sum of magic power that can be gathered from a contiguous segment of fruits. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 -10000 ≤ Magic power value ≤ 10000 SAMPLE INPUT 3 5 -1 2 3 -5 4 8 -2 -3 4 -1 -2 1 5 -3 6 1 2 3 -2 5 6 SAMPLE OUTPUT 5 7 15 Explanation: For the first test case: The maximum sum of magic power can be obtained from the subarray [2, 3], which sums up to 5. For the second test case: The maximum sum of magic power can be obtained from the subarray [4, -1, -2, 1, 5], which sums up to 7. For the third test case: The maximum sum of magic power can be obtained from the subarray [1, 2, 3, -2, 5, 6], which sums up to 15.","solution":"def maximum_magic_power(T, test_cases): def max_subarray_sum(nums): max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum results = [] for case in test_cases: N = case[0] magic_values = case[1] max_power = max_subarray_sum(magic_values) results.append(max_power) return results"},{"question":"Write a function that determines whether a given integer is a palindrome. An integer is considered a palindrome when it reads the same backward as forward. You should implement this without converting the integer to a string or using extra space. The input is guaranteed to be a non-negative integer, and the function should return a boolean value (`True` if the integer is a palindrome, `False` otherwise). Example: ```python is_palindrome(121) # True is_palindrome(-121) # False is_palindrome(10) # False ```","solution":"def is_palindrome(x): Determines if the given integer is a palindrome without using extra space or converting to string. if x < 0: return False original = x reversed_num = 0 while x > 0: reversed_num = reversed_num * 10 + x % 10 x //= 10 return original == reversed_num"},{"question":"A warehouse has a stock of n different items, each with a certain weight. Your objective is to partition these items into two groups such that the absolute difference between the total weights of the two groups is minimized. More formally, you are given an array of integers representing the weights of the items. Divide this array into two subsets such that the absolute difference between the sum of the weights of the subsets is minimized. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of items. The second line contains n space-separated integers w_1, w_2, dots, w_n (1 ≤ w_i ≤ 1000) — the weights of the items. -----Output----- Output a single integer — the minimum possible absolute difference between the sum of the weights of the two groups. -----Examples----- Input 5 1 2 3 4 5 Output 1 Input 3 8 6 5 Output 3 -----Note----- In the first example, one possible solution is to partition the items into two groups: {1, 2, 4} and {3, 5}. The sums of the weights are 7 and 8, respectively. The absolute difference between the sums is |7 - 8| = 1. In the second example, a possible solution is to partition the items into two groups: {8} and {6, 5}. The sums of the weights are 8 and 11, respectively. The absolute difference between the sums is |8 - 11| = 3.","solution":"def min_partition_difference(n, weights): Given an array of weights, this function divides the array into two subsets such that the absolute difference between the sum of the weights of the subsets is minimized. total_weight = sum(weights) target = total_weight // 2 dp = [0] * (target + 1) for weight in weights: for j in range(target, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) group1 = dp[target] group2 = total_weight - group1 return abs(group2 - group1) # Example usage: # n = 5 # weights = [1, 2, 3, 4, 5] # print(min_partition_difference(n, weights)) # Output: 1"},{"question":"A group of n people are standing in a queue to enter a concert. Each of the people has a unique ticket with a specific numeric value. They will be allowed to enter the concert in the order of their tickets\' numeric values (from the lowest to the highest). However, the concert organizers want to know how many contiguous subarrays (of length at least one) have at least one person whose ticket value is greater than or equal to x. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers n and x denoting the number of people and the ticket value threshold. - The second line of each test case contains n space-separated integers denoting the ticket values of the people in the queue. -----Output----- For each test case, output the number of contiguous subarrays that have at least one person whose ticket value is greater than or equal to x. -----Constraints----- - 1 le T le 100 - 1 le n le 1000 - 1 le text{Ticket value of each person} le 10^6 - 1 le x le 10^6 -----Example Input----- 2 5 3 1 2 3 4 5 4 10 8 5 7 11 -----Example Output----- 12 4 ----- Example case 1: All 15 subarrays of the array `[1, 2, 3, 4, 5]` are `[1]`, `[2]`, `[3]`, `[4]`, `[5]`, `[1, 2]`, `[2, 3]`, `[3, 4]`, `[4, 5]`, `[1, 2, 3]`, `[2, 3, 4]`, `[3, 4, 5]`, `[1, 2, 3, 4]`, `[2, 3, 4, 5]`, `[1, 2, 3, 4, 5]`. Out of these, the subarrays that have at least one ticket value greater than or equal to 3 are `12` in total: `[3]`, `[4]`, `[5]`, `[2, 3]`, `[3, 4]`, `[4, 5]`, `[3, 4, 5]`, `[2, 3, 4]`, `[1, 2, 3, 4]`, `[2, 3, 4, 5]`, `[1, 2, 3, 4, 5]`. Example case 2: All subarrays containing the value `11` are `[11]`, `[7, 11]`, `[5, 7, 11]`, `[8, 5, 7, 11]`.","solution":"def count_subarrays_with_min_value(test_cases): results = [] for n, x, arr in test_cases: count = 0 subarray_count = 0 for i in range(n): if arr[i] >= x: count += (subarray_count + 1) * (n - i) subarray_count = 0 else: subarray_count += 1 results.append(count) return results"},{"question":"Clara loves creating intricate patterns with beads on a string. Each string consists of multiple beads, each represented by a number corresponding to its color. Clara has particular rules for constructing her patterns: once a bead of a certain color has been added to the string, she can add more beads of the same color, but only consecutively. Once another color is added, she can\'t go back and add beads of the previous color in that area again. Clara wants to create a pattern that exactly matches a pre-defined sequence. However, she can only add beads from left to right and must follow her rules strictly. Can you help Clara determine if it\'s possible to construct the desired pattern with the given rules? -----Input----- The input consists of a single test case. The first line of this test case contains an integer t (1 le t le 100), the number of test cases. Each test case consists of two lines: the first line contains one integer n (1 le n le 10^5), the length of the desired pattern. The second line contains n integers a_i (1 le a_i le 10^6), representing the color of each bead in the desired pattern. -----Output----- For each test case, output \\"YES\\" if Clara can construct the pattern following her rules, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 3 6 1 1 2 2 3 3 4 1 2 1 2 5 2 2 3 3 2 Sample Output 1: YES NO NO","solution":"def can_construct_pattern(t, test_cases): results = [] for i in range(t): n, beads = test_cases[i] possible = True used_colors = set() prev_color = None for bead in beads: if bead != prev_color: if bead in used_colors: possible = False break used_colors.add(bead) prev_color = bead results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Two rival programmers, Alex and Casey, are having a disagreement and decided to settle it by playing a game on a binary string. The game operates as follows: - The string consists only of characters \'0\' and \'1\'. - They take turns, starting with Alex. - On each turn, a player can pick any substring of the binary string that consists entirely of \'0\'s and replace it with an equal-length substring of \'1\'s. The game ends when there are no more substrings consisting entirely of \'0\'s. The player who made the last move wins. Your task is to determine which player will win if both Alex and Casey play optimally. Input The input consists of one line: - A binary string s (1 ≤ |s| ≤ 10^5), where |s| is the length of the string. Output Print \\"Alex\\" if Alex wins, and \\"Casey\\" if Casey wins. Examples Input ``` 000111 ``` Output ``` Alex ``` Input ``` 0101 ``` Output ``` Alex ``` Input ``` 0000 ``` Output ``` Alex ``` Input ``` 1111 ``` Output ``` Casey ``` Note In the first test case, Alex will pick the first \\"000\\" substring and replace it with \\"111\\". No more moves can be made, so Alex wins. In the second test case, Alex can pick the \\"0\\" substrings on the first or third position, leaving Casey with no valid moves, hence Alex wins. In the third test case, Alex will replace the \\"0000\\" substring with \\"1111\\". As there are no more substrings of \\"0\\", Alex wins. In the fourth test case, there are no substrings made up of \\"0\\". Hence, Alex cannot make a move and Casey is declared the winner.","solution":"def game_winner(s): Determines which player will win the game given the binary string s. Parameters: s (str): The binary string. Returns: str: \\"Alex\\" if Alex wins, \\"Casey\\" if Casey wins. count_zeroes = s.count(\'0\') if count_zeroes == 0: return \\"Casey\\" # If Alex makes the first move and there is at least one substring of \'0\'s return \\"Alex\\""},{"question":"Write a function that receives a string and returns a new string by shifting each character to the next character in the alphabet. The function should maintain the original case of the characters and leave non-alphabet characters unchanged. Example For example, if the input string is: `\\"abc XYZ!\\"`, the output should be: `\\"bcd YZA!\\"` Additional Information - The alphabet is considered to wrap around, so \'z\' should translate to \'a\' and \'Z\' to \'A\'. - Input will consist of printable ASCII characters only.","solution":"def shift_characters(s): Shifts each character to the next character in the alphabet, maintaining case and leaving non-alphabet characters unchanged. shifted_string = [] for char in s: if \'a\' <= char <= \'z\': if char == \'z\': shifted_string.append(\'a\') else: shifted_string.append(chr(ord(char) + 1)) elif \'A\' <= char <= \'Z\': if char == \'Z\': shifted_string.append(\'A\') else: shifted_string.append(chr(ord(char) + 1)) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"Meeta is planning to participate in a competitive cooking contest where each participant is given a sequence of ingredients. She needs to find out if there\'s any sub-sequence of those ingredients that is in non-decreasing order and has a length greater than or equal to `K`. The contest allows participants only if they can find such a sub-sequence. Write a function to help Meeta determine if she can participate in the contest. Input Format: - First line of the input contains an integer `T`, the number of test cases. - For each test case: - First line contains an integer `N`, the number of ingredients. - Second line contains `N` space-separated integers representing the quality values of the ingredients. - Third line contains an integer `K`, the minimum required length of the non-decreasing sub-sequence. Output Format: - For each test case, print \\"YES\\" if Meeta has a non-decreasing sub-sequence of length `K` or more, otherwise print \\"NO\\". Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Quality values ≤ 1000 - 1 ≤ K ≤ N SAMPLE INPUT 2 5 1 3 2 4 5 3 4 4 3 2 1 2 SAMPLE OUTPUT YES NO","solution":"def can_participate_in_contest(T, test_cases): def longest_non_decreasing_subsequence_length(arr): n = len(arr) # Initialize the dp array where dp[i] will hold the length of LNDS ending at i dp = [1] * n # Fill dp array for i in range(1, n): for j in range(0, i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) # Return the maximum value in dp array return max(dp) results = [] for i in range(T): N, ingredients, K = test_cases[i] lnds_length = longest_non_decreasing_subsequence_length(ingredients) if lnds_length >= K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers and a target sum, your task is to determine the number of unique pairs in the array that add up to the target sum. A pair (a, b) and (b, a) are considered the same, and the array may contain negative numbers. Example 1: Input: n = 5 A[] = {1, 5, 7, -1, 5} target = 6 Output: 2 Explanation: Pairs with sum 6 are (1, 5) and (7, -1). Example 2: Input: n = 4 A[] = {1, 1, 1, 1} target = 2 Output: 1 Explanation: There is only one pair with sum 2: (1, 1). Function Signature: You need to complete the countPairsWithSum function which takes the array[], its size n, and the target sum as input and returns the number of unique pairs. ```python def countPairsWithSum(arr, n, target): # your code here ``` Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^{6} -10^{6} <= A[i] <= 10^{6}","solution":"def countPairsWithSum(arr, n, target): Counts the number of unique pairs in the array that add up to the target sum. A unique pair (a, b) and (b, a) are considered the same. Parameters: arr (list): The array of integers. n (int): The size of the array. target (int): The target sum. Returns: int: The number of unique pairs that sum up to the target. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"Alice has a collection of rectangular books. She wants to arrange them in a line such that the total width of the books is minimized while the height of books follows a specified order. You are given the books\' dimensions (width, height) and a sequence indicating the order of heights. You need to find the minimum total width of the arrangement that satisfies the specified order. -----Constraints----- - n is an integer. - 1 leq n leq 100 - 1 leq w_i, h_i leq 1000 for each book - The sequence of heights is a permutation of the heights of the books. -----Input----- Input is given from Standard Input in the following format: n w_1 h_1 w_2 h_2 ... w_n h_n height_sequence -----Output----- Print the minimum total width of the arrangement. ---Definitions--- - n: Number of books. - w_i: Width of the i-th book. - h_i: Height of the i-th book. - height_sequence: A space-separated list of n integers representing the order of heights. -----Sample Input----- 3 10 20 5 30 15 10 30 20 10 -----Sample Output----- 30 Explanation: For the given sequence of heights [30, 20, 10], the second book with width 5 is placed first, the first book with width 10 is placed second, and the third book with width 15 is placed third. The total width is 5 + 10 + 15 = 30, which is the minimum width possible while maintaining the order of the heights as specified in the height_sequence.","solution":"def minimize_width(n, books, height_sequence): Given the number of books, their dimensions and the specified order of heights, this function returns the minimum total width of the arrangement that satisfies the order. :param n: int, number of books :param books: list of tuples, each tuple contains width and height of a book :param height_sequence: list of ints, specific order of heights :return: int, minimum total width of the arrangement height_to_width = {} for width, height in books: height_to_width[height] = width total_width = 0 for height in height_sequence: total_width += height_to_width[height] return total_width # Sample input usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) books = [] for i in range(n): width = int(data[2*i + 1]) height = int(data[2*i + 2]) books.append((width, height)) height_sequence = [int(h) for h in data[(2*n + 1):]] print(minimize_width(n, books, height_sequence))"},{"question":"Aayush is organizing a puzzle contest. There are N participants, each having a unique skill level represented by an integer from 1 to N. Aayush has come up with an interesting challenge where participants have to form teams based on a skill cap value C provided in each query. A team can only contain participants whose combined skill levels do not exceed C. Help Aayush count the number of participants who can form a valid team when given different values of skill cap in Q queries. Rules of the game: - Aayush needs to answer Q queries. - Every Q_i query has a value C_i. - For each query, you need to find the maximum number of participants whose combined skill levels do not exceed C_i. -----Input:----- - First line will contain T, the number of testcases. Then the testcases follow. - The first line of each test case contains the values N and Q. - The second line of each test case contains N space-separated values representing the skill levels of the participants (from 1 to N but in random order). - The next line of each test case contains Q queries with each query containing a value C_i. -----Output:----- For each test case, print the maximum number of participants who can form a valid team for each of the Q queries. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq C_i leq 10^9 -----Subtasks (25 points) :----- - 1 leq N leq 10^2. - 1 leq Q leq 10^2. -----Subtasks (25 points) :----- - 1 leq N leq 10^3. - 1 leq Q leq 10^3. -----Subtasks (50 points) :----- - Original Constraints. -----Sample Input:----- 1 5 3 3 1 4 2 5 6 7 15 -----Sample Output:----- 3 3 5 -----EXPLANATION:----- Q_1: With skill cap 6, participants with skill levels 1, 2, and 3 can form a team (1+2+3=6). Q_2: With skill cap 7, participants with skill levels 1, 2, and 4 can form a team (1+2+4=7). Q_3: With skill cap 15, all participants can form a team, as their combined skill levels (1+2+3+4+5=15) is equal to the cap.","solution":"from bisect import bisect_right def max_participants(N, skill_levels, C): skill_levels.sort() prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i-1] + skill_levels[i-1] # Find the maximum participants who can form a valid team based on skill cap C answers = [] for cap in C: index = bisect_right(prefix_sum, cap) - 1 answers.append(index) return answers def solve_contest(testcases): results = [] for testcase in testcases: N, Q = testcase[\'N\'], testcase[\'Q\'] skill_levels = testcase[\'skill_levels\'] queries = testcase[\'queries\'] result = max_participants(N, skill_levels, queries) results.append(result) return results"},{"question":"You are tasked with organizing a series of events in a conference hall. The conference hall is booked for multiple days, with each event needing a single, continous block of time. Each event has specific start and end times, which may overlap with other events, but you need to ensure that the schedule does not overlap within the same day. You want to figure out if you can assign the events to days such that no two events on the same day overlap, while minimizing the total number of days used for the conference. Given the start and end times of each event, decide the minimum number of days required to schedule all the events without overlap on any given day. -----Input----- The first line contains an integer n (1 le n le 10^5), the number of events. Each of the next n lines contains two integers s_i and e_i (1 le s_i, e_i le 10^9, s_i le e_i), representing the start and end times of each event. -----Output----- Print a single integer, the minimum number of days required to schedule all events without overlaps within the same day. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 1 Input 5 1 10 5 6 2 3 8 9 4 7 Output 3 -----Note----- In the first example, you can schedule the events on two days: - One day with events [1, 3] and [4, 6]. - Another day with event [2, 5]. In the second example, all events already do not overlap within the same day so it only requires one day. In the third example, you can use three days: - One day with event [1, 10]. - Another day with events [2, 3] and [8, 9]. - Another day with events [5, 6] and [4, 7].","solution":"def min_days_required(events): from heapq import heappush, heappop # Sort events by their start time events.sort() # Min heap to track the end times of events scheduled on each separate day end_times = [] for s, e in events: if end_times and end_times[0] <= s: heappop(end_times) # Remove the event that ends the earliest & can take current event heappush(end_times, e) # Schedule the current event return len(end_times)"},{"question":"Alice is working on a new text editor and wants to implement a feature that automatically calculates the minimum number of operations needed to convert one string into another. The allowable operations are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Help Alice by writing a function that computes the minimum number of operations required to convert the string s1 into the string s2. Input - The first line contains the string s1 (1 ≤ |s1| ≤ 100), the string to convert from. - The second line contains the string s2 (1 ≤ |s2| ≤ 100), the string to convert to. Output - Print a single integer representing the minimum number of operations needed to convert s1 to s2. Examples Input kitten sitting Output 3 Input flaw lawn Output 2 Input intention execution Output 5 Submissionsolved","solution":"def min_operations(s1: str, s2: str) -> int: Computes the minimum number of operations required to convert s1 into s2. Operations allowed are insertions, deletions, and replacements. m, n = len(s1), len(s2) # Create a DP table to store the results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][0] = i # If s2 is empty, remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are the same else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Given an array of integers, determine the length of the longest subarray that contains only even numbers. Constraints * 1 ≤ length of array ≤ 1000 * -10^6 ≤ array elements ≤ 10^6 Input The input consists of multiple datasets. Each dataset is given in the following format: ``` length_of_array array_elements ``` The input ends with a single zero for length_of_array. Output For each dataset, print the length of the longest subarray that contains only even numbers in a new line. Example Input ``` 6 1 2 4 6 1 2 5 5 7 9 2 4 0 ``` Output ``` 3 2 ```","solution":"def longest_even_subarray(arr): Determine the length of the longest subarray that contains only even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length def process_input(data): Processes the input data and returns the lengths of the longest subarrays containing only even numbers. results = [] i = 0 while i < len(data): length_of_array = int(data[i]) if length_of_array == 0: break array_elements = list(map(int, data[i + 1].split())) results.append(longest_even_subarray(array_elements)) i += 2 return results"},{"question":"There are N cities connected by M one-way roads. Each road has a travel time associated with it. You are to develop an algorithm to find the shortest travel time between each pair of cities. If there is no path between a pair of cities, output \\"INF\\" (infinity). Your task is to implement a function that takes in the number of cities, the number of roads, and the list of roads, and returns the matrix of shortest travel times between each pair of cities. Input First line contains two integers N (1 <= N <= 100) and M (0 <= M <= 10000), where N is the number of cities and M is the number of roads. Each of the next M lines contains three integers U, V, and T (1 <= U, V <= N, 1 <= T <= 100), where U is the starting city, V is the destination city, and T is the travel time between these cities. Output Output an N x N matrix, where the element at row i and column j is the shortest travel time from city i+1 to city j+1. If there is no path from city i+1 to city j+1, output \\"INF\\" for that element. Examples Input 4 4 1 2 3 2 3 4 3 4 5 1 4 10 Output 0 3 7 10 INF 0 4 9 INF INF 0 5 INF INF INF 0 Input 3 2 1 2 1 2 3 2 Output 0 1 3 INF 0 2 INF INF 0 Input 2 0 Output 0 INF INF 0","solution":"def floyd_warshall(N, M, roads): INF = float(\'inf\') dist = [[INF] * N for _ in range(N)] for i in range(N): dist[i][i] = 0 for (u, v, t) in roads: dist[u - 1][v - 1] = t for k in range(N): for i in range(N): for j in range(N): if dist[i][k] < INF and dist[k][j] < INF: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) for i in range(N): for j in range(N): if dist[i][j] == INF: dist[i][j] = \'INF\' return dist"},{"question":"# Scenario You are a software developer for the zoo management system. At the zoo, the zookeeper feeds the animals based on a feeding schedule and particular animal diets allotted each day. However, only a limited number of food portions are available each day. An animal can only eat its designated food portion, and once the portion is exhausted, the animal will not get more food for that day. You need to simulate feeding time and determine how much food is left after all possible portions have been distributed among the animals. Input - A dictionary with animal species as keys and arrays as values. Each array represents the portions of food requested by individual animals of that species. - A dictionary with animal species as keys and integers as values representing the total portions of food available for that species for the day. ``` { species_1: [portion1, portion2, ...], species_2: [portion3, portion4, ...], ... } ``` - A dictionary that specifies available portions for each species. ``` { species_1: available_portions, species_2: available_portions, ... } ``` Output - A dictionary showing the remaining food portions for each animal species after feeding. Example Input: ``` requests = { \\"lion\\": [2, 3, 2], \\"tiger\\": [1, 4], \\"bear\\": [3, 1, 1] } available = { \\"lion\\": 5, \\"tiger\\": 5, \\"bear\\": 4 } ``` Output: ``` { \\"lion\\": 0, \\"tiger\\": 0, \\"bear\\": 0 } ``` Explanation: - Lions: 2 + 3 = 5 (all portions are used) - Tigers: The first gets 1, the second gets 4 = 5 (all portions are used) - Bears: 3 + 1 + 0 (only 1 portion left) = 4 (all portions are used) Notes - The input data guarantees that there will be no negative values and each portion request is a positive integer. - The feeding process stops as soon as the available food for a species becomes zero. - If multiple animals from the same species request food, they get it in the order specified in the list.","solution":"def distribute_food(requests, available): Returns the remaining food portions after feeding animals according to their requests and available portions. :param requests: Dictionary with animal species as keys and list of portions requested by individual animals. :param available: Dictionary with animal species as keys and integers representing the total portions available. :return: Dictionary showing the remaining food portions for each animal species. remaining_food = {} for species, portions in requests.items(): total_available = available.get(species, 0) for request in portions: if total_available >= request: total_available -= request else: # not enough food available for a requested portion, break the loop break remaining_food[species] = total_available return remaining_food"},{"question":"Giselle is trying to find the shortest path in her plan to visit all the beautiful lakes around her town. The lakes are represented as nodes in a graph, and the pathways between them as directed edges with different weights representing the time it takes to travel from one lake to another. She needs your help to figure out the shortest path from one specific starting lake to another target lake. Write a function that takes the number of lakes, the list of edges, the starting lake, and the target lake, and returns the minimum time needed to travel from the starting lake to the target lake. Example: Input: n = 5, edges = [(1, 2, 2), (2, 3, 4), (1, 3, 1), (3, 4, 3), (4, 5, 1)] start = 1, target = 5 Output: 5 Explanation: The shortest path from lake 1 to lake 5 is 1 -> 3 -> 4 -> 5 with a total travel time of 1 + 3 + 1 = 5. Function Signature: `def shortest_path(n: int, edges: List[Tuple[int, int, int]], start: int, target: int) -> int:` Constraints: * 1 <= n <= 10^5 * 1 <= len(edges) <= 10^6 * 1 <= u, v <= n * 1 <= w <= 10^3","solution":"import heapq from typing import List, Tuple def shortest_path(n: int, edges: List[Tuple[int, int, int]], start: int, target: int) -> int: Return the minimum travel time needed to go from the starting lake to the target lake. Uses Dijkstra\'s algorithm to find the shortest path in a graph with positive weights. # Creating an adjacency list adj_list = {i: [] for i in range(1, n+1)} for u, v, w in edges: adj_list[u].append((w, v)) # Min-heap to maintain the frontier nodes with their distances min_heap = [(0, start)] # Dictionary to store the minimum distance to each node dist = {i: float(\'inf\') for i in range(1, n+1)} # Distance to start node is 0 dist[start] = 0 while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for weight, v in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) # Return the minimum distance to the target node return dist[target] if dist[target] != float(\'inf\') else -1"},{"question":"You are tasked with finding and returning the smallest length of a subarray in an array of positive integers, such that the sum of the subarray is greater than or equal to a given number S. If no such subarray exists, return 0. Input The first line contains two integers, n (the number of elements in the array) and S (the required sum) where 1 ≤ n ≤ 100000 and 1 ≤ S ≤ 1000000000. The second line contains n positive integers (1 ≤ a[i] ≤ 10000) representing the elements of the array. Output Output a single integer representing the length of the smallest subarray with sum at least S. If no such subarray exists, output 0. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 11 1 2 3 4 5 Output 3","solution":"def min_subarray_len(n, S, array): Returns the smallest length of a subarray in \'array\' with sum at least \'S\'. If no such subarray exists, returns 0. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += array[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= array[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Write a function to check if a given graph is a tree. A tree is a connected graph that has no cycles and contains exactly (n-1) edges for n vertices. Given a graph represented as an adjacency list, determine whether the graph is a tree. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each test case contains the following: - An integer n (1 ≤ n ≤ 1000), the number of vertices. - An integer m (0 ≤ m ≤ 1000), the number of edges. - m pairs of integers u and v (1 ≤ u, v ≤ n), representing an undirected edge between node u and node v. Output For each test case, output \\"YES\\" if the graph is a tree, otherwise output \\"NO\\". Example Input 3 4 3 1 2 2 3 3 4 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 Output YES NO NO Explanation: - In the first test case, the graph is a tree because it\'s connected, has no cycles, and contains n-1 edges for n vertices. - In the second test case, the graph has 4 edges with 4 vertices, so it can\'t be a tree since it violates the n-1 edge rule. - The third test case graph is disconnected, thus it can\'t be a tree.","solution":"def is_tree(n, m, edges): if m != n - 1: return \\"NO\\" from collections import defaultdict, deque def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node in visited: continue visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) == n graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) if not bfs(1): return \\"NO\\" return \\"YES\\" def check_graphs(test_cases): results = [] for n, m, edges in test_cases: results.append(is_tree(n, m, edges)) return results"},{"question":"Given a list of N non-negative integers that represent the heights of vertical lines drawn on a 2D plane, find two lines such that together with the x-axis, they form a container that holds the most water. The container cannot be slanted and must be formed by the vertical lines at the x-axis positions i and j (0 ≤ i < j < N) with the height determined by the shorter line. Write a function `maxArea` that takes a list of integers as an argument and returns the maximum amount of water it can hold. Function Signature: ```python def maxArea(height: List[int]) -> int: ``` # Input - A list of integers `height` where 2 ≤ len(height) ≤ 10^5 and 0 ≤ height[i] ≤ 10^4. # Output - An integer representing the maximum amount of water a container can hold. # Example Example 1 ```python height = [1,8,6,2,5,4,8,3,7] print(maxArea(height)) # Output: 49 ``` Example 2 ```python height = [1,1] print(maxArea(height)) # Output: 1 ``` # Note - You cannot slant the container. - Consider using a two-pointer approach to achieve an optimal solution.","solution":"from typing import List def maxArea(height: List[int]) -> int: Returns the maximum amount of water a container can hold given the heights of vertical lines. left = 0 right = len(height) - 1 max_area = 0 while left < right: # Width of the container width = right - left # Height of the container container_height = min(height[left], height[right]) # Calculate the area current_area = width * container_height # Update max_area if current_area is larger if current_area > max_area: max_area = current_area # Move the pointer of the shorter line towards the center if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"You have been given a task to manage a list of tasks, each having a certain start and end time. Your goal is to find the maximum number of non-overlapping tasks you can perform. You have `n` tasks, each defined by two integers: start time `s_i` and end time `e_i` (0 ≤ s_i < e_i ≤ 10^9). Design an algorithm to determine the maximum number of non-overlapping tasks that can be selected from the given list. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of tasks. Each of the following `n` lines contains two integers `s_i` and `e_i` — the start and end time of the i-th task. -----Output----- Print a single integer — the maximum number of non-overlapping tasks. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 3 4 0 6 5 7 Output 3","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks. Parameters: tasks (list of tuple): A list of tuples where each tuple contains two integers (start time, end time). Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) max_tasks = 0 last_end_time = 0 for start_time, end_time in tasks: if start_time >= last_end_time: max_tasks += 1 last_end_time = end_time return max_tasks"},{"question":"Given a list of positive integers representing the durations of tasks, determine the shortest possible cycle time needed to complete each task at least once if tasks must be executed cyclically. Each task must start as soon as the preceding task finishes. You should return the minimal total duration of the cycle needed to complete all tasks. Example: Tasks: [4, 2, 5, 3] Possible order and total cycle duration: [4, 2, 5, 3 rightarrow 4 + 2 + 5 + 3 = 14 3, 2, 4, 5 rightarrow 3 + 2 + 4 + 5 = 14 ] You need to find any order that minimizes the cycle time. Function Description Complete the \\"minimizeCycleTime\\" function in the editor below. The function should return an integer that represents the shortest possible cycle time. ```python def minimizeCycleTime(tasks): # your code here ``` The `minimizeCycleTime` function has the following parameter: - `tasks`: a list of integers representing the duration of each task. Returns: - `int`: the minimal cycle time to complete each task at least once. Input Format: The first line contains a single integer `n`, the number of tasks. The second line contains `n` space-separated integers, representing the duration of each task. Constraints: - (1 leq n leq 10^5) - (1 leq text{tasks[i]} leq 10^4) Sample Input 0 4 4 2 5 3 Sample Output 0 14 Explanation 0: The sum of the durations in any order will always be 14, which is the minimal cycle time. Sample Input 1 5 7 2 3 9 5 Sample Output 1 26 Explanation 1: The sum of the durations in any order will always be 26, regardless of how tasks are ordered. Thus, this is the minimal cycle time.","solution":"def minimizeCycleTime(tasks): Returns the minimal cycle time to complete each task at least once. :param tasks: List[int] - a list of integers representing task durations :return: int - minimal cycle time return sum(tasks)"},{"question":"A company is organizing a team-building event and wants to divide all employees into teams. Each team must have exactly the same number of members, and no two teams can have a different number of members. Given the total number of employees and the number of teams, determine if it is possible to evenly distribute all employees into the specified number of teams. If it is possible, calculate and output the number of employees in each team. Otherwise, output -1. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two space-separated integers on a single line, N and K — the total number of employees and the number of teams, respectively. ------ Output Format ------ For each test case, output on a new line the number of employees in each team if it is possible to evenly distribute them. Otherwise, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, K ≤ 10^{5} ----- Sample Input 1 ------ 4 10 2 15 4 30 3 25 5 ----- Sample Output 1 ------ 5 -1 10 5 ----- Explanation 1 ------ Test case 1: 10 employees can be evenly divided into 2 teams with 5 employees in each team. Test case 2: 15 employees cannot be evenly divided into 4 teams. Test case 3: 30 employees can be evenly divided into 3 teams with 10 employees in each team. Test case 4: 25 employees can be evenly divided into 5 teams with 5 employees in each team.","solution":"def divide_teams(T, test_cases): Determine if it is possible to evenly distribute employees into the specified number of teams. Args: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers, N and K. Returns: list: A list with the number of employees in each team if possible, or -1 if not. results = [] for N, K in test_cases: if N % K == 0: results.append(N // K) else: results.append(-1) return results"},{"question":"Ananya loves painting and she has registered for a painting competition. She is given a grid representing a canvas where each cell of the grid can be painted in one of 9 different colors. She can paint any cell with any color and she wants to maximize the number of different colors used in the grid subject to one condition – no two adjacent cells (horizontally or vertically) can have the same color. You need to help Ananya determine the maximum number of different colors that can be used on the grid following the given condition. Input format: First line contains the total number of test cases. For each test case, the next two lines contain two integers representing the number of rows and columns of the grid respectively. Output format: For each test case, print the maximum number of different colors that can be used on the grid. Constraints: 1 ≤ Test Cases ≤ 10 1 ≤ Rows, Columns ≤ 1000 SAMPLE INPUT 2 3 3 2 2 SAMPLE OUTPUT 9 4","solution":"def max_colors_used(test_cases): results = [] for rows, cols in test_cases: if rows == 1 or cols == 1: # If either dimension is 1, we can only use two colors maximally regardless of the size. (Like a chessboard stripe) results.append(min(rows, cols)) else: # For larger grids, the number of maximally used colors follows the minimum of 9 and the product of rows and cols results.append(min(9, rows * cols)) return results"},{"question":"Problem Statement Given a string, we can rearrange its letters to form a new string. A \\"beautiful\\" string is one where no two adjacent characters are the same. Your task is to check if it is possible to rearrange the given string into a beautiful string, and if it is possible, provide one possible arrangement. Write a function `rearrange_beautifully` that takes a string `s` as an argument and returns a beautiful string if possible, otherwise returns \\"Not Possible\\". Input Format A single line containing the string `s`. Constraints 1 ≤ |s| ≤ 10^5 The string `s` consists of English lowercase letters only. Output Format A single line containing either a beautiful string or \\"Not Possible\\". Example Input aab Example Output aba Explanation Rearranging the string \\"aab\\" to \\"aba\\" makes it a beautiful string where no adjacent characters are the same. If no such arrangement is possible, the function should return \\"Not Possible\\". Example Input aaab Example Output Not Possible Explanation It is not possible to rearrange \\"aaab\\" such that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_beautifully(s): Rearranges the string `s` to form a beautiful string (no two adjacent characters are the same) if possible. Returns the rearranged string or \\"Not Possible\\" if no such arrangement exists. # Count the frequency of each character char_freq = Counter(s) # Create a max heap based on character frequency max_heap = [(-freq, char) for char, freq in char_freq.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] # While there are characters in the heap while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # Since we used one occurrence of this char, we decrement the frequency by 1 if prev_char is not None and -prev_freq > 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 # Increase freq by 1 since it\'s stored as negative in max heap # Check if the resultant string is of the same length as the input string if len(result) != len(s): return \\"Not Possible\\" return \'\'.join(result)"},{"question":"In a hidden underground facility, several sensors are monitoring the energy at different locations. Each day, the system generates an array of integers where each element represents the energy detected by a sensor at a particular location. The facility\'s manager, Serena, wants to identify periods of consistent energy detection. A period of consistent energy detection is a subarray where all elements have the same value. Given the array of energy levels for a single day, your task is to determine the length of the longest period of consistent energy detection. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of sensors. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^6) — the energy levels detected by the sensors. -----Output----- Print the length of the longest period of consistent energy detection. -----Examples----- Input: 7 5 5 3 3 3 2 2 Output: 3 Input: 5 1 1 1 1 1 Output: 5 Input: 6 6 7 8 8 8 8 Output: 4 -----Note----- In the first example, the longest period of consistent energy detection is the subarray [3, 3, 3], which has a length of 3. In the second example, every element in the array is the same, so the entire array forms the longest period of consistent energy detection, which has a length of 5. In the third example, the longest period of consistent energy detection is the subarray [8, 8, 8, 8], which has a length of 4.","solution":"def longest_consistent_period(arr): Given a list of integers, determine the length of the longest subarray where all elements have the same value. if not arr: return 0 max_length = curr_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: curr_length += 1 else: max_length = max(max_length, curr_length) curr_length = 1 max_length = max(max_length, curr_length) return max_length"},{"question":"A farmer has a rectangular field that he wants to fence from all four sides. The farmer also wants to install a water tap in the middle of the field. Given the dimensions of the field, calculate the length of fencing needed and the exact coordinates of the point where the water tap should be installed. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two space-separated integers L and W, the length and width of the field respectively. ------ Output Format ------ For each test case, output two values: 1. The total length of fencing needed. 2. The coordinates of the midpoint where the water tap should be installed, in the format (x, y). ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ L ≤ 1000 1 ≤ W ≤ 1000 ----- Sample Input 1 ------ 3 8 5 20 10 15 17 ----- Sample Output 1 ------ 26 (4, 2.5) 60 (10, 5) 64 (7.5, 8.5) ----- Explanation 1 ------ Test case 1: The length of the field is 8 units and the width is 5 units. The total length of fencing needed is twice the sum of length and width, i.e., 2*(8 + 5) = 26 units. The midpoint coordinates are (8/2, 5/2) = (4, 2.5). Test case 2: The length of the field is 20 units and the width is 10 units. The total length of fencing needed is 2*(20 + 10) = 60 units. The midpoint coordinates are (20/2, 10/2) = (10, 5). Test case 3: The length of the field is 15 units and the width is 17 units. The total length of fencing needed is 2*(15 + 17) = 64 units. The midpoint coordinates are (15/2, 17/2) = (7.5, 8.5).","solution":"def calculate_fencing_and_midpoint(T, dimensions): results = [] for l, w in dimensions: perimeter = 2 * (l + w) midpoint_x = l / 2 midpoint_y = w / 2 results.append((perimeter, (midpoint_x, midpoint_y))) return results"},{"question":"Samuel is trying to organize a single-elimination chess tournament for n players. Each player has a distinct skill level, represented as an integer. In each round, players are paired and play against each other, with the player having the higher skill level always winning the match. In the event of an odd number of players in a round, one randomly chosen player automatically advances to the next round without playing. The tournament continues until only one player remains, who is declared the champion. Your task is to predict the outcome of this tournament. Given the skill levels of all n players, determine the skill level of the champion. -----Input----- The first line contains a single integer n (1 le n le 1000) — the number of players in the tournament. The second line contains n distinct integers s_1, s_2, dots, s_n (1 le s_i le 10000), where s_i is the skill level of the i-th player. -----Output----- Print a single integer representing the skill level of the champion. -----Examples----- Input 4 1500 2000 1800 1700 Output 2000 Input 5 1200 1500 1800 1400 1300 Output 1800 Input 3 3000 2500 2700 Output 3000 -----Note----- In the first example, 2000 beats 1500, and 1800 beats 1700 in the first round. In the final round, 2000 beats 1800 and is declared the champion. In the second example, 1200 and 1300 play, 1300 wins. 1400 and 1500 play, 1500 wins. 1800 automatically advances in the first round. In the second round, 1500 and 1800 play, 1800 wins and is declared the champion.","solution":"def find_champion(n, skills): Predicts the champion of a single-elimination chess tournament. Args: n : int : number of players skills : list : list of distinct skill levels of players Returns: int : skill level of the champion while len(skills) > 1: next_round = [] skills.sort(reverse=True) for i in range(0, len(skills) - 1, 2): next_round.append(max(skills[i], skills[i + 1])) if len(skills) % 2 == 1: next_round.append(skills[-1]) skills = next_round return skills[0]"},{"question":"Write a function that takes an integer n as input and returns the first n numbers in the Fibonacci sequence, each on a new line. Example 1: Input: 5 Output: 0 1 1 2 3 Example 2: Input: 3 Output: 0 1 1 Your Task: You don\'t need to input anything. Complete the function printFibonacci() which takes an integer n as input and prints the first n numbers in the Fibonacci sequence. Constraints: 1 <= N <= 50","solution":"def printFibonacci(n): Prints the first n numbers in the Fibonacci sequence, each on a new line. if n <= 0: return fib_sequence = [] a, b = 0, 1 fib_sequence.append(a) if n > 1: fib_sequence.append(b) for _ in range(2, n): a, b = b, a + b fib_sequence.append(b) for num in fib_sequence: print(num)"},{"question":"Write a function `find_peak_element` that takes a list of integers and returns the index of a peak element. A peak element is an element that is strictly greater than its neighbors. If the list contains multiple peak elements, return the index to any of the peaks. The function should run in O(log n) time using a binary search approach. Example 1: Input: [1, 2, 3, 1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Example 2: Input: [1, 2, 1, 3, 5, 6, 4] Output: 5 Explanation: Your function can return either index 1 where the peak element is 2, or index 5 where the peak element is 6. Note: Your solution should use O(log n) runtime complexity.","solution":"def find_peak_element(nums): Finds the index of a peak element in the list. A peak element is one that is greater than its neighbors. low, high = 0, len(nums) - 1 while low < high: mid = (low + high) // 2 if nums[mid] > nums[mid + 1]: high = mid else: low = mid + 1 return low"},{"question":"Given a sequence of non-negative integers, you are required to perform a set of operations to transform the sequence into a strictly increasing sequence. The operations allowed are: 1. Increment any element of the sequence by 1. The objective is to find the minimum number of operations required to transform the given sequence into a strictly increasing sequence where every subsequent number is greater than the previous one. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n space-separated integers ai (0 ≤ ai ≤ 10^9) — the elements of the sequence. -----Output----- Print one integer — the minimum number of operations required to transform the given sequence into a strictly increasing sequence. -----Examples----- Input 4 1 2 2 4 Output 1 Input 5 3 3 3 3 3 Output 10 Input 3 5 1 8 Output 5 -----Note----- In the first sample, you can achieve the sequence [1, 2, 3, 4] by incrementing the third element by 1. In the second sample, you need to transform [3, 3, 3, 3, 3] into [3, 4, 5, 6, 7], requiring 1 + 2 + 3 + 4 = 10 operations. In the third sample, you need to transform [5, 1, 8] into [5, 6, 8], requiring incrementing the second element 5 times.","solution":"def min_operations_to_increasing_sequence(n, sequence): Returns the minimum number of operations required to transform the given sequence into a strictly increasing sequence. if n == 1: return 0 operations = 0 for i in range(1, n): if sequence[i] <= sequence[i - 1]: operations += (sequence[i - 1] - sequence[i] + 1) sequence[i] = sequence[i - 1] + 1 return operations"},{"question":"Shiori loves gardening and has recently become fascinated with arranging flowers in various patterns. She came up with a new way to arrange her flowers in a straight line, such that each flower is either taller than the one before it or shorter than the one before it, creating a zigzag pattern. Shiori wants to quickly figure out if her initial arrangement can be rearranged to form such a zigzag pattern. A zigzag pattern requires that either: - arr[0] < arr[1] > arr[2] < arr[3] > arr[4] ... or - arr[0] > arr[1] < arr[2] > arr[3] < arr[4] ... Write a program that determines if it is possible to rearrange the given array of flower heights into a zigzag pattern. If possible, output \\"YES\\", otherwise output \\"NO\\". Input The input is given in the following format: N h1 h2 ... hN The number of flowers N (1 ≤ N ≤ 100000) is given in the first line. In the second line, the heights of the flowers hi (1 ≤ hi ≤ 10^9) are given in order. Output Output \\"YES\\" if it is possible to rearrange the heights into a zigzag pattern, otherwise output \\"NO\\". Examples Input 5 4 3 7 8 2 Output YES Input 4 1 1 1 1 Output NO","solution":"def can_form_zigzag(arr): Determines if it\'s possible to rearrange an array to form a zigzag pattern. :param arr: List of integers representing heights of flowers :return: \\"YES\\" if it\'s possible to rearrange to a zigzag pattern, otherwise \\"NO\\" if len(arr) <= 2: return \\"YES\\" arr.sort() for i in range(1, len(arr)-1, 2): arr[i], arr[i+1] = arr[i+1], arr[i] for i in range(1, len(arr)-1): if not ((arr[i-1] < arr[i] > arr[i+1]) or (arr[i-1] > arr[i] < arr[i+1])): return \\"NO\\" return \\"YES\\""},{"question":"Alice enjoys building and collecting various structures using blocks. She has developed a particular interest in forming perfect squares using exactly n blocks. A perfect square for her is a structure that has exactly i by i blocks laid out, such that the entire layout forms a square. Given an integer n, Alice wants to know how many different blocks she can select to form a perfect square. Each perfect square must sum up to exactly n blocks. Since Alice doesn\'t care about the different ways of forming squares with the same number of blocks, each unique number of blocks that can form a perfect square should only be counted once. Input The input consists of a single integer n (1 ≤ n ≤ 2 × 10^9) — the number of blocks Alice has. Output Print out the number of unique values of i (sizes of the square) such that the area of the i by i square equals n. Examples Input 5 Output 0 Input 9 Output 1 Input 1000002 Output 1 Note In the first example, no perfect square can be formed with exactly 5 blocks since there\'s no value of i where i*i = 5. In the second example, Alice can form a perfect square with size 3x3 (since 3*3 = 9). In the third example, though 1000002 is a large number, only i = 1000 satisfies the condition where i*i = 1000000. Thus, the output is 1.","solution":"def count_perfect_squares(n): Returns the number of unique values of i such that i^2 = n. count = 0 i = 1 while i * i <= n: if i * i == n: count += 1 i += 1 return count"},{"question":"Your task is to implement an algorithm to help Frank, a famous scientist, process and analyze genetic sequences efficiently. Frank often receives DNA sequences that contain repetitive segments. He\'s particularly interested in identifying the longest non-overlapping subsequence of a given sequence where each letter appears the same number of times. Given a DNA sequence and a number of queries, each requiring you to find the longest subsequence in either the entire DNA sequence or within given subintervals, provide the length of the desired subsequence for each query. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the DNA sequence. - The second line contains a DNA sequence of length n consisting only of characters \'A\', \'C\', \'G\', and \'T\'. - The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. - Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices (1-based) of the subinterval you have to consider for that query. # Output For each query, output a single integer — the length of the longest subsequence where each character appears the same number of times in the specified subinterval. # Example Input ``` 12 ACGTACGTACGT 3 1 4 1 8 5 12 ``` Output ``` 4 8 8 ``` # Explanation 1. For the first query, the interval [1, 4] contains the substring \\"ACGT\\" where each character appears exactly once. 2. For the second query, the entire sequence \\"ACGTACGT\\" is considered, where each character appears exactly twice. 3. For the third query, the interval [5, 12] contains the substring \\"ACGTACGT\\" where each character appears exactly twice. # Notes - The interval [l, r] denotes the substring from the l-th to r-th character in the DNA sequence inclusively. - For each subsequence in the intervals, ensure that the length is the maximum possible while maintaining the condition that every character appears the same number of times.","solution":"def longest_balanced_subsequence(sequence, queries): Returns the longest subsequence where each character appears the same number of times for each query interval. from collections import defaultdict n = len(sequence) q = len(queries) # Precompute prefix sums for each character prefix_sums = { \'A\': [0] * (n + 1), \'C\': [0] * (n + 1), \'G\': [0] * (n + 1), \'T\': [0] * (n + 1), } for i in range(n): for char in \'ACGT\': prefix_sums[char][i + 1] = prefix_sums[char][i] + (1 if sequence[i] == char else 0) results = [] for l, r in queries: count = defaultdict(int) for char in \'ACGT\': count[char] = prefix_sums[char][r] - prefix_sums[char][l - 1] min_count = min(count.values()) results.append(min_count * 4) return results"},{"question":"Tanya is organizing a grand celebration and wants to invite her friends. She has a list of friends, each identified by an integer from 1 to n. However, she follows a curious rule: she only invites friends whose ID numbers are divisible by a certain integer k. She would like to declare the invitation list and needs your help to filter the list based on her rule. -----Input----- The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the total number of friends and the integer by which IDs must be divisible to be invited. -----Output----- On a single line, print the IDs of the friends who will be invited, in increasing order. If no friends are invited, print \\"None\\". -----Examples----- Input 10 3 Output 3 6 9 Input 7 7 Output 7 Input 15 5 Output 5 10 15 Input 5 6 Output None -----Note----- In the first example, friends with IDs 3, 6, and 9 are invited because their IDs are divisible by 3. In the second example, only the friend with ID 7 is invited. In the third example, friends with IDs 5, 10, and 15 are invited because their IDs are divisible by 5. In the fourth example, no IDs from 1 to 5 are divisible by 6, so \\"None\\" is printed.","solution":"def filter_invited_friends(n, k): Returns a list of friend IDs that are divisible by k or \'None\' if no friends are invited. invited_friends = [i for i in range(1, n + 1) if i % k == 0] return invited_friends if invited_friends else \'None\'"},{"question":"Alisha loves playing with strings, especially those that can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Alisha wants to know if she can rearrange a given string by reordering its characters to form a palindrome. Your task is to write a program that determines if a given string can be rearranged to form a palindrome. -----Input----- The input consists of a single string S, where 1 leq |S| leq 10^6. The string contains only lowercase English letters. -----Output----- Output \\"YES\\" if the string can be rearranged to form a palindrome and \\"NO\\" otherwise. -----Examples----- Sample Input 1: civic Sample Output 1: YES Sample Input 2: ivicc Sample Output 2: YES Sample Input 3: hello Sample Output 3: NO","solution":"from collections import Counter def can_form_palindrome(s: str) -> str: Determine if the given string can be rearranged to form a palindrome. Returns \\"YES\\" if it can be rearranged to form a palindrome, otherwise \\"NO\\". count = Counter(s) odd_counts = sum(1 for count in count.values() if count % 2 != 0) return \\"YES\\" if odd_counts <= 1 else \\"NO\\""},{"question":"Alice is working on a text processing application and she needs to implement an autocomplete feature. For a given list of words and a prefix, the autocomplete feature should return all words from the list that start with the given prefix. Write a function that takes a list of words and a prefix as input and returns a list of words from the input list that start with the given prefix. Example 1: Input: words = [\\"apple\\", \\"ape\\", \\"apricot\\", \\"banana\\", \\"bat\\"] prefix = \\"ap\\" Output: [\\"apple\\", \\"ape\\", \\"apricot\\"] Explanation: All words that start with the prefix \\"ap\\" are \\"apple\\", \\"ape\\", and \\"apricot\\". Example 2: Input: words = [\\"car\\", \\"cat\\", \\"dog\\", \\"door\\"] prefix = \\"do\\" Output: [\\"dog\\", \\"door\\"] Explanation: All words that start with the prefix \\"do\\" are \\"dog\\" and \\"door\\". Constraints: 1 <= len(words) <= 1000 1 <= len(prefix) <= 100 Words are composed of lowercase English letters only. Your Task: You don\'t need to read input or print anything. Your task is to complete the function autocomplete() which takes a list of words and a prefix as input and returns a list of words that start with the given prefix. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(1) where n is the length of the words list and m is the average length of the words in the list.","solution":"def autocomplete(words, prefix): Returns a list of words from the input list that start with the given prefix. return [word for word in words if word.startswith(prefix)]"},{"question":"A security system in a top-secret research lab consists of a series of doors that must be unlocked in a specific sequence. Each door requires a unique passcode to unlock it, and these passcodes must be generated based on specific rules. The passcode for each door is generated as follows: - The passcode is a combination of digits and is of length N. - The first digit is determined by the position of the door in the sequence (for example, the first door’s passcode starts with 1, the second door’s passcode starts with 2, and so on). - Each subsequent digit is calculated by adding the previous digit with a dynamic increment value. Given a sequence S of N digits which represents the dynamic increments for each corresponding door, write a program to generate the passcodes for each door and print them in the required sequence. Input: - An integer K (1 leq K leq 9) representing the number of doors. - An integer N (1 leq N leq 9) representing the length of the passcode. - A sequence of N-1 integers, each between -9 and 9, representing the dynamic increments. Output: - K lines, each containing the passcode for a door in the sequence. -----Examples----- Sample Input: 4 5 1 1 -1 2 Sample Output: 1 2 3 2 4 2 3 4 3 5 3 4 5 4 6 4 5 6 5 7 Sample Input: 3 4 2 -2 1 Sample Output: 1 3 1 2 2 4 2 3 3 5 3 4","solution":"def generate_passcodes(K, N, increments): Generates passcodes for K doors each of length N based on the given increments. Parameters: K (int): Number of doors. N (int): Length of the passcode. increments (List[int]): A list of N-1 integers representing the dynamic increments. Returns: List[List[int]]: A list of K passcodes, each of length N. passcodes = [] for i in range(1, K+1): passcode = [i] for j in range(1, N): next_digit = passcode[j-1] + increments[j-1] passcode.append(next_digit) passcodes.append(passcode) return passcodes"},{"question":"A store sells N types of fruits. The store keeps track of the prices and quantities available for each type of fruit. Each fruit has a unique ID from 1 to N. The owner of the store wants to perform several operations to manage the inventory and pricing. There are three types of operations: 1. Update the price of a specific fruit. 2. Update the quantity of a specific fruit. 3. Calculate the total value of inventory for a specific fruit (price * quantity). You will be given the initial prices and quantities for each type of fruit, followed by a sequence of operations. Implement a system that processes these operations and outputs the results of the total value calculations. ----- Constraints ----- - 1 ≤ N ≤ 10^5 - 1 ≤ price, quantity ≤ 10^9 - 1 ≤ number of operations ≤ 10^5 ----- Input ----- The first line contains an integer, N, the number of fruit types. The next N lines each contain two integers, representing the initial price and quantity for fruit IDs from 1 to N. The following line contains an integer, Q, the number of operations. The next Q lines each contain an operation in one of the following formats: - \\"1 x p\\": Update the price of fruit x to p. - \\"2 x q\\": Update the quantity of fruit x to q. - \\"3 x\\": Calculate and return the total value of fruit x. ----- Output ----- For each \\"3 x\\" operation, print the total value of the specified fruit. ----- Sample Input ----- 3 10 5 20 8 15 10 5 1 2 25 3 2 2 1 7 3 1 3 3 ----- Sample Output ----- 200 70 150","solution":"def store_inventory(N, initial_data, operations): fruits = {} # Initialize the inventory for i in range(1, N + 1): price, quantity = initial_data[i - 1] fruits[i] = {\'price\': price, \'quantity\': quantity} result = [] # Process each operation for op in operations: if op[0] == 1: # Update price operation fruits[op[1]][\'price\'] = op[2] elif op[0] == 2: # Update quantity operation fruits[op[1]][\'quantity\'] = op[2] elif op[0] == 3: # Calculate total value operation fruit_id = op[1] total_value = fruits[fruit_id][\'price\'] * fruits[fruit_id][\'quantity\'] result.append(total_value) return result"},{"question":"You manage a warehouse consisting of n storage bins arranged in a single row, numbered 1 through n from left to right. Each bin can hold a maximum of m items. Initially, all bins are empty. You can perform three types of operations: 1. Add x items to bin i (if possible). If bin i already contains y items, then after this operation it will contain `min(m, y + x)` items. 2. Remove x items from bin i. If bin i contains y items, then after this operation it will contain `max(0, y - x)` items. 3. Check the number of items in all the bins in the range from bin i to bin j (inclusive). Given a series of operations, perform each operation and print the result for each query operation. Input The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 10^5) — the number of bins, the maximum capacity of each bin, and the number of operations. Each of the next q lines contains one of the following: - \\"1 i x\\" — add x items to bin i. - \\"2 i x\\" — remove x items from bin i. - \\"3 i j\\" — print the number of items in all the bins from bin i to bin j (inclusive). Output For each query operation \\"3 i j\\", print the sum of the items in bins from i to j. Example Input 5 100 6 1 2 50 1 3 60 3 1 3 2 3 30 3 1 3 3 3 5 Output 110 80 30 Notes In the given example: - After the first operation, the bins are [0, 50, 0, 0, 0]. - After the second operation, the bins are [0, 50, 60, 0, 0]. - The first query operation sums the bins from 1 to 3, resulting in 110. - After the fourth operation, the bins are [0, 50, 30, 0, 0]. - The second query operation sums the bins from 1 to 3, resulting in 80. - The third query operation sums the bins from 3 to 5, resulting in 30.","solution":"def warehouse_operations(n, m, q, operations): bins = [0] * n result = [] for operation in operations: op = operation[0] if op == 1: i = operation[1] - 1 x = operation[2] bins[i] = min(m, bins[i] + x) elif op == 2: i = operation[1] - 1 x = operation[2] bins[i] = max(0, bins[i] - x) elif op == 3: i = operation[1] - 1 j = operation[2] - 1 result.append(sum(bins[i:j+1])) return result"},{"question":"A company is organizing an event and wishes to manage the registration of attendees. Every attendee gets an identification number based on their registration order, starting from 1. You are required to help manage the registration process by supporting the following operations: 1. `register()`: Registers a new attendee, assigns them the next available ID, and returns the ID. 2. `cancel(k)`: Cancels the registration of the attendee with ID `k`. If the ID does not exist or has already been cancelled, this operation should be ignored. 3. `check(k)`: Checks if an attendee with ID `k` is registered and active (i.e., not cancelled). Returns `true` if the ID is active, and `false` otherwise. 4. `retrieve()`: Retrieves the list of all active IDs in ascending order and returns them as a list. **Example:** Suppose the following operations are performed in sequence: ``` ops = [ \\"register()\\", # register attendee \\"register()\\", # register attendee \\"cancel(1)\\", # cancel attendee with ID 1 \\"check(1)\\", # check status of ID 1 \\"check(2)\\", # check status of ID 2 \\"register()\\", # register attendee \\"retrieve()\\" # retrieve list of active IDs ] ``` The operations should produce the following results: ``` [1, 2, None, False, True, 3, [2, 3]] ``` # Input Format - The first line contains an integer `Q`, denoting the number of operations. - Each of the next `Q` lines contains a string representing the operation. # Constraints - `1 <= Q <= 1000` - Operations will be valid as described # Output Format Print the results of each operation that produces an output (`register()`, `check(k)`, or `retrieve()`), each result on a new line. # Sample Input ``` 7 register() register() cancel(1) check(1) check(2) register() retrieve() ``` # Sample Output ``` 1 2 None False True 3 [2, 3] ``` **Explanation:** Initially, the registration list is empty. The sequence of operations and their effects are: 1. `register()`: Register a new attendee with ID `1`. 2. `register()`: Register another attendee with ID `2`. 3. `cancel(1)`: Cancel the registration of attendee with ID `1`. 4. `check(1)`: Check if attendee with ID `1` is registered and active. The result is `False`. 5. `check(2)`: Check if attendee with ID `2` is registered and active. The result is `True`. 6. `register()`: Register another attendee with ID `3`. 7. `retrieve()`: Retrieve all active IDs, which are `[2, 3]`.","solution":"class RegistrationSystem: def __init__(self): self.current_id = 0 self.active_ids = set() self.cancelled_ids = set() def register(self): self.current_id += 1 self.active_ids.add(self.current_id) return self.current_id def cancel(self, k): if k in self.active_ids: self.active_ids.remove(k) self.cancelled_ids.add(k) def check(self, k): return k in self.active_ids def retrieve(self): return sorted(self.active_ids)"},{"question":"Calculate the Hamming distance between two strings of equal length. ```python def hamming_distance(str1, str2): # Your code here # Example usages: print(hamming_distance(\\"karolin\\", \\"kathrin\\")) # => 3 print(hamming_distance(\\"1011101\\", \\"1001001\\")) # => 2 ``` The Hamming distance is a metric for comparing two strings of equal length, defined as the number of positions at which the corresponding symbols differ. To ensure accuracy, both input strings str1 and str2 are guaranteed to be of equal length. The function should output an integer that represents the Hamming distance between str1 and str2. Hint: Iterate through the characters of both strings and count the number of positions where the characters differ.","solution":"def hamming_distance(str1, str2): Returns the Hamming distance between two strings of equal length. if len(str1) != len(str2): raise ValueError(\\"Strings must be of equal length\\") distance = sum(1 for x, y in zip(str1, str2) if x != y) return distance"},{"question":"Given an array of integers and a positive integer \'K\'. The task is to determine if there are two distinct elements (i.e., elements with different indices) in the array that add up to \'K\'. Return true if such a pair exists, and false otherwise. Example 1: Input: arr = [10, 15, 3, 7] K = 17 Output: true Explanation: 10 and 7 are distinct elements that add up to 17. Example 2: Input: arr = [1, 2, 3, 9] K = 8 Output: false Explanation: No two distinct elements add up to 8. Your Task: Complete `findPair` function and return true if there are two distinct elements in the array that add up to \'K\', otherwise return false. Constraints: 1 <= arr.size() <= 10^4 1 <= arr[i] <= 10^5 1 <= K <= 10^5","solution":"def findPair(arr, K): Determines if there are two distinct elements in the array that add up to K. Args: arr (list): The list of integers. K (int): The target sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: if K - num in seen: return True seen.add(num) return False"},{"question":"Sam is an avid hiker and loves to explore various trails in the mountains. He carries a collection of items in his backpack, each with a certain weight and value. Hikers need to be mindful of the weight they carry to avoid exhaustion. Given the maximum weight his backpack can hold and the items available, Sam wants to maximize the total value of items he can carry without exceeding the weight limit of his backpack. This problem is a variation of the well-known knapsack problem. Use dynamic programming to determine the maximum value Sam can achieve with the given items and weight limit. Input: The first line contains two integers W and n (1 ≤ W ≤ 10000, 1 ≤ n ≤ 300) — the maximum weight the backpack can hold and the number of items respectively. The next n lines each contain two integers wi and vi (1 ≤ wi, vi ≤ 1000), describing the weight and value of each item. Output: Output the maximum value Sam can achieve with the given weight limit. Examples Input 50 3 10 60 20 100 30 120 Output 220 Input 10 2 5 30 4 20 Output 50","solution":"def knapsack(W, n, items): Determines the maximum value we can achieve with a given weight limit W and a list of items. Each item is described by its weight and value. :param W: Maximum weight the backpack can hold :param n: Number of items :param items: List of tuples (weight, value) describing each item :return: Maximum value achievable within the weight limit dp = [0] * (W + 1) for weight, value in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] def process_input(): input = sys.stdin.read().split() W = int(input[0]) n = int(input[1]) items = [(int(input[i * 2 + 2]), int(input[i * 2 + 3])) for i in range(n)] return W, n, items if __name__ == \\"__main__\\": W, n, items = process_input() print(knapsack(W, n, items))"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge has an associated weight. You need to determine the shortest path with the smallest maximum weight between node 1 and node N. In other words, you must find the path from node 1 to node N such that the weight of the heaviest edge in the path is minimized. INPUT First line contains two numbers N and M. Next M lines contain three integers u, v and w, which denotes an edge between node u and node v with weight w. OUTPUT Print the weight of the heaviest edge in the optimal path. If there is no path between node 1 and node N, print -1. Constraints: 1 ≤ N ≤ 100000 1 ≤ M ≤ 200000 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000000 SAMPLE INPUT 5 5 1 2 3 2 3 4 3 4 2 4 5 5 1 5 10 SAMPLE OUTPUT 5","solution":"import heapq def smallest_max_weight_edge(N, M, edges): Finds the smallest maximum weight edge on the shortest path from node 1 to node N. Uses Dijkstra\'s algorithm with a priority queue (heap) to find the minimal spanning path. If no path exists between node 1 and node N, returns -1. graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Min-heap of (maximum edge weight in the path to the current node, current node) heap = [(0, 1)] max_edge_in_path = [float(\'inf\')] * (N + 1) max_edge_in_path[1] = 0 while heap: max_w, node = heapq.heappop(heap) if node == N: return max_w for weight, neighbor in graph[node]: # Max weight edge in the path if we go to the neighbor through this edge new_max_weight = max(max_w, weight) if new_max_weight < max_edge_in_path[neighbor]: max_edge_in_path[neighbor] = new_max_weight heapq.heappush(heap, (new_max_weight, neighbor)) return -1"},{"question":"You are given a linked list that contains both integer and string values. Your task is to write a function that will traverse the linked list and separate the values into two arrays: one containing all the integer values and the other containing all the string values. Here is a definition for the linked list node in Python: ```python class Node: def __init__(self, value=None, next_node=None): self.value = value self.next_node = next_node ``` The signature for your function should be: ```python def separate_values(head: Node) -> Tuple[List[int], List[str]]: ``` The function will receive the head of the linked list and must return a tuple of two lists: the first containing all integer values and the second containing all string values. Examples: ```python # Creating the linked list: 1 -> \'apple\' -> 2 -> \'banana\' -> None head = Node(1, Node(\'apple\', Node(2, Node(\'banana\')))) separate_values(head) == ([1, 2], [\'apple\', \'banana\']) ``` If the list contains only integers: ```python # Creating the linked list: 1 -> 2 -> 3 -> None head = Node(1, Node(2, Node(3))) separate_values(head) == ([1, 2, 3], []) ``` If the list contains only strings: ```python # Creating the linked list: \'apple\' -> \'banana\' -> \'cherry\' -> None head = Node(\'apple\', Node(\'banana\', Node(\'cherry\'))) separate_values(head) == ([], [\'apple\', \'banana\', \'cherry\']) ``` If the list is empty: ```python # Creating an empty linked list head = None separate_values(head) == ([], []) ```","solution":"class Node: def __init__(self, value=None, next_node=None): self.value = value self.next_node = next_node from typing import Tuple, List def separate_values(head: Node) -> Tuple[List[int], List[str]]: int_values = [] str_values = [] current = head while current is not None: if isinstance(current.value, int): int_values.append(current.value) elif isinstance(current.value, str): str_values.append(current.value) current = current.next_node return int_values, str_values"},{"question":"In a distant land, there exists a peculiar river with magical properties. This river is filled with stepping stones arranged in a straight line, each with a specific magical power value. These stepping stones have a property that allows them to transfer energy, but only to stones that are within a specific distance from them. The magical properties of the stones and the maximum distance within which they can transfer energy are governed by a set of rules provided by a mystical scroll. You have been tasked to determine the maximum total energy that can be harnessed by stepping on the stones according to the rules. To step on a stone, you must ensure that all stones within a given distance already have been stepped on in a non-decreasing order of their position. --- Input: --- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and D, where N is the number of stones and D is the maximum distance within which energy can be transferred. The second line contains N space-separated integers, denoting the power values of the stones. --- Output: --- For each test case, print a single line containing the answer: the maximum total energy that can be harnessed according to the given rules. --- Constraints: --- 1 ≤ T ≤ 2 1 ≤ N ≤ 10^5 1 ≤ D ≤ 1000 1 ≤ Stone Power Value ≤ 10^9 --- Sample Input: --- 2 5 2 1 2 3 4 5 3 1 10 20 30 --- Sample Output: --- 15 60","solution":"def max_total_energy(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][\'N\'], test_cases[i][\'D\'] power_values = test_cases[i][\'power_values\'] dp = [0] * N for j in range(N): dp[j] = power_values[j] if j > 0: dp[j] += dp[j-1] if j > D: dp[j] = max(dp[j], dp[j-D-1] + power_values[j]) results.append(dp[-1]) return results"},{"question":"Alex is fascinated by puzzles and enjoys solving them in his free time. Recently, he came across an interesting problem involving arrays and their sums. Alex needs your help to determine if there exists a non-empty subarray within a given array of integers that sums up to zero. A subarray is defined as a contiguous portion of an array. Your task is to find and return \\"YES\\" if there exists at least one non-empty subarray whose elements sum up to zero, and \\"NO\\" otherwise. -----Input----- The first line contains one integer N, denoting the number of elements in the array. The second line contains N integers Ai, representing the elements of the array. -----Output----- The first line should contain \\"YES\\" if there exists at least one non-empty subarray that sums to zero, otherwise \\"NO\\". -----Constraints----- 1 ≤ N ≤ 100 000; -109 ≤ Ai ≤ 109. -----Examples----- Input: 5 3 4 -7 1 2 Output: YES Input: 4 1 2 3 4 Output: NO","solution":"def has_zero_sum_subarray(arr): Determines if there exists a non-empty subarray whose elements sum up to zero. :param arr: List of integers. :return: \\"YES\\" if such a subarray exists, \\"NO\\" otherwise. prefix_sum = 0 prefix_sum_set = set() for num in arr: prefix_sum += num # A zero sum subarray starts from index 0 to current index if prefix_sum is zero if prefix_sum == 0 or prefix_sum in prefix_sum_set: return \\"YES\\" prefix_sum_set.add(prefix_sum) return \\"NO\\""},{"question":"A company tracks the performance of its employees by recording the number of tasks each employee completes per day for a given month. The data is stored in a list of integers, where each integer represents the number of tasks completed by an employee on a particular day, starting from the 1st day to the nth day of the month. The company wants to identify the employee who has the longest streak of improved performance, defined as the longest subsequence of consecutive days where the number of tasks completed by the employee improves each day. Write a function to determine the length of this longest streak of improved performance. -----Input----- An integer n (1 ≤ n ≤ 10^5), representing the number of days. A list of n integers a (0 ≤ a_i ≤ 10^4), where a_i is the number of tasks completed by the employee on the i-th day. -----Output----- Print a single integer, denoting the length of the longest streak of improved performance. -----Examples----- Input 10 1 2 2 3 4 1 2 3 4 5 Output 5 Input 5 5 4 3 2 1 Output 1 Input 7 2 3 1 4 3 5 6 Output 3 -----Note----- In the first example, the longest streak of improved performance is [1, 2, 3, 4, 5], giving a length of 5. In the second example, there is no streak of improved performance longer than 1 day, so the answer is 1. In the third example, the longest streak is either [1, 4] or [5, 6], both of length 2.","solution":"def longest_improvement_streak(n, a): Returns the length of the longest streak of improved performance. Args: n : int : number of days a : list of int : number of tasks completed by the employee on each day Returns: int : length of the longest streak of improved performance if n == 0: return 0 max_streak = 1 current_streak = 1 for i in range(1, n): if a[i] > a[i - 1]: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 1 return max_streak"},{"question":"Write a function that takes as input a list of integers, and returns a new list such that each element at index `i` of the new list is the product of all the numbers in the original array except the one at `i`. For example, if the input is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. **Constraints:** - You can assume the input list contains at least one number and all the numbers are non-zero. **Function Signature:** ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` **Example:** ```python # Example 1 input: [1,2,3,4] output: [24,12,8,6] # Example 2 input: [10,3,5,6,2] output: [180,600,360,300,900] ``` **Explanation:** In Example 1, the result list is derived as follows: - For the element at index 0 (i.e., 1), the product of the rest of the array is `2*3*4 = 24`. - For the element at index 1 (i.e., 2), the product of the rest of the array is `1*3*4 = 12`. - For the element at index 2 (i.e., 3), the product of the rest of the array is `1*2*4 = 8`. - For the element at index 3 (i.e., 4), the product of the rest of the array is `1*2*3 = 6`. In Example 2, the result list is derived similarly: - For the element at index 0 (i.e., 10), the product of the rest of the array is `3*5*6*2 = 180`. - For the element at index 1 (i.e., 3), the product of the rest of the array is `10*5*6*2 = 600`. - For the element at index 2 (i.e., 5), the product of the rest of the array is `10*3*6*2 = 360`. - For the element at index 3 (i.e., 6), the product of the rest of the array is `10*3*5*2 = 300`. - For the element at index 4 (i.e., 2), the product of the rest of the array is `10*3*5*6 = 900`. Note that you should not use division in your solution.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: length = len(nums) res = [1] * length left_product = 1 for i in range(length): res[i] = left_product left_product *= nums[i] right_product = 1 for i in reversed(range(length)): res[i] *= right_product right_product *= nums[i] return res"},{"question":"Given a string representation of a mathematical expression containing numbers and the operators +, -, *, and /, evaluate the expression and return the result as a float. The input expression may include spaces that should be ignored. Example 1: Input: s = \\"3 + 5 / 2\\" Output: 5.5 Explanation: The expression evaluates to 3 + (5 / 2) = 3 + 2.5 = 5.5. Example 2: Input: s = \\"10 - 3 * 2\\" Output: 4.0 Explanation: The expression evaluates to 10 - (3 * 2) = 10 - 6 = 4.0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function evaluateExpression() which takes the string s as input parameters and returns the result of the expression as a float. Use appropriate order of operations (BODMAS/BIDMAS rules). Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - The given string will always contain a valid mathematical expression. - The length of the string will be between 1 and 1000.","solution":"def evaluateExpression(s): Evaluates a mathematical expression string and returns the result as a float. Args: s (str): The string representation of the mathematical expression. Returns: float: The result of the evaluated expression. import re # Remove spaces s = s.replace(\\" \\", \\"\\") # Helper function to evaluate the expression using the shunting yard algorithm def eval_postfix(expression): stack = [] for token in expression: if re.match(r\\"-?d+.?d*\\", token): stack.append(float(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(a / b) return stack[0] # Helper function to convert infix expression to postfix expression (Reverse Polish Notation) def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit() or (expression[i] == \'.\' and i+1 < len(expression) and expression[i+1].isdigit()): num = [] while i < len(expression) and (expression[i].isdigit() or expression[i] == \'.\'): num.append(expression[i]) i += 1 output.append(\'\'.join(num)) else: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[expression[i]]): output.append(operators.pop()) operators.append(expression[i]) i += 1 while operators: output.append(operators.pop()) return output postfix_expression = infix_to_postfix(s) result = eval_postfix(postfix_expression) return result"},{"question":"Alicia is a software engineer who is building an application that interprets and evaluates simple arithmetic expressions. Each expression consists solely of non-negative integers, the addition operator (\'+\'), and the subtraction operator (\'-\'). The expressions do not contain any spaces and are all valid. Alicia wants to know the maximum possible result from rearranging the operators in the expression while keeping the order of the numbers the same. Input Format The first line contains boldsymbol{t}, the number of test cases. The next boldsymbol{t} lines each contain a single arithmetic expression string. Constraints 1 leq t leq 100 1 leq text{length of the expression strings} leq 10^5 Output Format For each test case, output a single integer representing the maximum possible result of the expression after rearranging the operators. Sample Input 3 1+2-3+4 10-20+30 5+5-5-5 Sample Output 4 40 10 Explanation For the first test case, by rearranging the operators in the expression \\"1+2-3+4\\", the maximum result is obtained by \\"1+2+4-3\\" which equals 4. For the second test case, by rearranging the operators in the expression \\"10-20+30\\", the maximum result is obtained by \\"10+30-20\\" which equals 20. For the third test case, by rearranging the operators in the expression \\"5+5-5-5\\", the maximum result is obtained by \\"5+5-5-5\\", which remains equal to 0. To obtain the maximum (10), you can rearrange as \\"5+5-(-5)+(-5)\\" = 10.","solution":"def max_result_expression(expression): numbers = list(map(int, expression.replace(\'+\', \' \').replace(\'-\', \' \').split())) operators = [c for c in expression if c in \'+-\'] total = numbers[0] add_sum = 0 subtract_sum = 0 for i in range(1, len(numbers)): if operators[i-1] == \'+\': add_sum += numbers[i] else: subtract_sum += numbers[i] return total + add_sum - subtract_sum def max_results_for_test_cases(t, test_cases): results = [] for expression in test_cases: results.append(max_result_expression(expression)) return results"},{"question":"You are given a string consisting of lowercase English letters. You may perform the following operation: - Choose any two adjacent characters in the string and replace them with a single one, which will be the lexicographically larger one between them. You should repeatedly perform this operation until you get the smallest possible lexicographical string. Return that smallest possible string. Input A single line contains a string consisting of lowercase English letters (1 ≤ length of the string ≤ 105). Output Print the smallest possible lexicographical string after repeatedly performing the described operation. Examples Input acbd Output d Input abac Output c Input abcd Output d","solution":"def smallest_lexicographical_string(s): Returns the smallest possible lexicographical string after repeatedly performing the described operation. # Since we are allowed to reduce the string by selecting the larger of two adjacent characters, # in the end we will be left with the single largest character max_char = max(s) return max_char"},{"question":"Given three integers X, Y, and Z representing the length, width, and height of a cuboid respectively, calculate its volume and total surface area. Example 1: Input: X = 3, Y = 4, Z = 5 Output: Volume = 60, Surface Area = 94 Explanation: Volume = X * Y * Z = 3 * 4 * 5 = 60 Surface Area = 2(XY + YZ + ZX) = 2(3*4 + 4*5 + 5*3) = 94 Example 2: Input: X = 7, Y = 8, Z = 9 Output: Volume = 504, Surface Area = 382 Explanation: Volume = X * Y * Z = 7 * 8 * 9 = 504 Surface Area = 2(XY + YZ + ZX) = 2(7*8 + 8*9 + 9*7) = 382 Your Task: You don\'t need to read input or print anything. Your task is to complete the function calculateCuboidProperties() which takes three integers X, Y, and Z as input and returns the Volume and Surface Area in a tuple (Volume, SurfaceArea). Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ X, Y, Z ≤ 5000","solution":"def calculate_cuboid_properties(X, Y, Z): Calculate the volume and surface area of a cuboid with dimensions X, Y, and Z. Parameters: X (int): Length of the cuboid. Y (int): Width of the cuboid. Z (int): Height of the cuboid. Returns: tuple: Volume and Surface Area of the cuboid. volume = X * Y * Z surface_area = 2 * (X * Y + Y * Z + Z * X) return volume, surface_area"},{"question":"You are given a binary tree with N nodes (numbered 1 through N). Each node has a value assigned to it. Your task is to answer Q queries. Each query consists of a single node u. For each query, you need to determine the sum of values of all nodes that belong to the subtree rooted at node u. ------ Input ------ The first line of the input contains a single integer N denoting the number of nodes in the tree. The second line contains N space-separated integers representing the values of the nodes from 1 to N. Each of the next N-1 lines contains two space-separated integers u and v denoting that nodes u and v are connected by an edge. The next line contains a single integer Q denoting the number of queries. Each of the next Q lines contains a single integer u describing a query. ------ Output ------ For each query, print a single line containing one integer ― the sum of values of all nodes in the subtree rooted at node u. ------ Constraints ------ 1 ≤ N ≤ 200,000 1 ≤ Q ≤ 200,000 1 ≤ text{value of each node} ≤ 1,000 1 ≤ u, v ≤ N ------ Sample Input ------ 6 3 5 1 6 4 2 1 2 1 3 2 4 2 5 3 6 3 1 2 3 ------ Sample Output ------ 21 15 3 ------ explanation ------ Example case: - For the first query, the subtree rooted at node 1 includes all nodes, so the sum is 3 + 5 + 1 + 6 + 4 + 2 = 21. - For the second query, the subtree rooted at node 2 includes nodes 2, 4, and 5, so the sum is 5 + 6 + 4 = 15. - For the third query, the subtree rooted at node 3 includes only node 3, so the sum is 3.","solution":"from collections import defaultdict def subtree_sum(N, values, edges, queries): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_sums = [0] * (N + 1) visited = [False] * (N + 1) def dfs(node): visited[node] = True total_sum = values[node - 1] for neighbor in tree[node]: if not visited[neighbor]: total_sum += dfs(neighbor) subtree_sums[node] = total_sum return total_sum dfs(1) results = [subtree_sums[q] for q in queries] return results # Example usage N = 6 values = [3, 5, 1, 6, 4, 2] edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] queries = [1, 2, 3] print(subtree_sum(N, values, edges, queries)) # Output: [21, 15, 3]"},{"question":"You are given an array a of n distinct integers. Construct an array b by rearranging elements of a in such a way that no two adjacent elements in b have the same parity, i.e., one is odd and the other is even. -----Input----- The first line contains one integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated distinct integers a_1, a_2, ..., a_n (0 ≤ a_{i} ≤ 10^9) — the elements of the array. -----Output----- If there is no such array b, print -1. Otherwise in the only line print n space-separated integers b_1, b_2, ..., b_{n}. Note that b must be a rearrangement of a. If there are multiple answers, print any of them. -----Examples----- Input 6 1 2 3 4 5 6 Output 1 2 3 4 5 6 Input 5 1 2 3 4 7 Output 1 4 3 2 7","solution":"def rearrange_array(a): Rearranges array `a` such that no two adjacent elements have the same parity. Returns the rearranged array `b`, or -1 if not possible. odd = [x for x in a if x % 2 != 0] even = [x for x in a if x % 2 == 0] if abs(len(odd) - len(even)) > 1: return -1 b = [] if len(odd) > len(even): b = odd remaining = even else: b = even remaining = odd # Interleave the remaining elements result = [] for i in range(len(remaining)): result.append(b[i]) result.append(remaining[i]) if len(b) > len(remaining): result.append(b[-1]) return result"},{"question":"Given an integer array A of size n, you need to find if there exists a subsequence such that the product of the elements in the subsequence is a perfect square. If such a subsequence exists, output \\"Yes\\", otherwise output \\"No\\". A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. **Input:** - The first line contains an integer T (1 le T le 10^3), the number of test cases. The description of each test case follows. - The first line of each test case contains an integer n (1 le n le 100), the size of the array A. - The second line of each test case contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^4), the elements of the array. **Output:** For each test case, output \\"Yes\\" if there exists a subsequence whose product is a perfect square, otherwise output \\"No\\". **Example:** **Input:** ``` 3 4 2 3 4 6 5 1 2 3 4 5 3 7 11 13 ``` **Output:** ``` Yes No No ``` **Note:** - In the first test case, the subsequence (2, 2) has a product of 4, which is a perfect square. - In the second test case, no such subsequence exists whose product is a perfect square. - In the third test case, no subsequence exists whose product is a perfect square.","solution":"from collections import defaultdict from math import isqrt def is_perfect_square(n): Helper function to check if a number is a perfect square. root = isqrt(n) return root * root == n def subsequence_has_perfect_square_product(n, arr): Function to determine if a subsequence exists such that the product of the elements in the subsequence is a perfect square. # Using prime factorization and counts of each prime factor def prime_factors_count(num): Returns a dictionary of prime factors and their counts for a given number factors = defaultdict(int) factor = 2 while factor * factor <= num: while num % factor == 0: factors[factor] += 1 num //= factor factor += 1 if num > 1: # num is prime factors[num] += 1 return factors factor_counts = defaultdict(int) for num in arr: factors = prime_factors_count(num) for prime, count in factors.items(): factor_counts[prime] += count for _, count in factor_counts.items(): if count % 2 != 0: # An odd power of any prime means it\'s not a perfect square return \\"No\\" return \\"Yes\\" def solve(test_cases): results = [] for n, arr in test_cases: results.append(subsequence_has_perfect_square_product(n, arr)) return results"},{"question":"Mark wants to build a garden in his backyard, and he plans to surround it with a rectangular fence. He needs to calculate the amount of fencing material required. Given the length and width of the garden, your task is to determine the perimeter of the rectangle. **Input** You will be provided with two positive integers, length and width, representing the dimensions of the garden in meters. **Output** The output should be a single integer, representing the total meters of fencing material required to enclose the garden. **Example** Input: ``` 8 5 ``` Output: ``` 26 ``` Input: ``` 15 10 ``` Output: ``` 50 ``` `Hope you enjoy the challenge! Best of luck!`","solution":"def garden_fence_perimeter(length, width): Returns the perimeter of the garden given its length and width. return 2 * (length + width)"},{"question":"A bakery has recently introduced a new policy for its baked goods section. Each type of baked good has a popularity rank associated with it. To manage the popularity ranking and handle customer queries effectively, you need to develop a system that supports updating the popularity ranking and answering queries about the rank of baked goods efficiently. The bakery starts with N types of baked goods, and each type has an initial popularity rank given by an array of N integers. You will be provided with Q queries, and each query can be of two types: 1. Update the popularity rank of a specific type of baked good to a new value. 2. Find the rank of the most popular baked good within a specific range of types (inclusive). Develop a program that can handle these operations efficiently. Input: The first line consists of two space-separated integers, N and Q. The second line consists of N space-separated integers, representing the initial popularity rank of each type of baked good. The next Q lines contain queries. Each query can be one of the following two types: 1. \\"1 X Y\\" - Update the popularity rank of the X-th type of baked good to Y. 2. \\"2 L R\\" - Query the rank of the most popular baked good within the types from L to R (inclusive). Output: For each query of the second type, output the rank of the most popular baked good within the specified range. Constraints: 1 ≤ N, Q ≤ 10^5 1 ≤ X, L, R ≤ N 1 ≤ Y ≤ 10^9 1 ≤ initial popularity rank ≤ 10^9 SAMPLE INPUT 5 3 2 9 4 1 7 2 1 5 1 3 10 2 2 4 SAMPLE OUTPUT 9 10 Explanation: Initially, the popularity ranks are [2, 9, 4, 1, 7]. 1. The first query is to find the most popular rank between types 1 and 5. The maximum value in this range is 9. 2. The second query updates the popularity rank of the 3rd baked good to 10. The updated ranks are [2, 9, 10, 1, 7]. 3. The third query is to find the most popular rank between types 2 and 4. The maximum value in this range is 10.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (2 * self.n) self.build(arr) def build(self, arr): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = arr[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): index += self.n self.tree[index] = value while index > 1: index //= 2 self.tree[index] = max(self.tree[2 * index], self.tree[2 * index + 1]) def query(self, left, right): left += self.n right += self.n + 1 result = -float(\'inf\') while left < right: if left % 2 == 1: result = max(result, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def bakery_system(N, Q, initial_ranks, queries): results = [] segment_tree = SegmentTree(initial_ranks) for query in queries: if query[0] == 1: _, X, Y = query segment_tree.update(X - 1, Y) elif query[0] == 2: _, L, R = query result = segment_tree.query(L - 1, R - 1) results.append(result) return results"},{"question":"Problem In a fictional kingdom, there is a tradition where the royal family lights a number of stacked candles to celebrate a festival. Every year, a newly introduced rule dictates how the candles must be lit based on their height. The candles are represented by an array `A` of integers where the value at each index indicates the height of the corresponding candle. The rule states that the candles must be lit in a sequence from the highest to the lowest candle. However, if there are candles of the same height, they are lit simultaneously. Your task is to determine the number of rounds required to light all the candles if multiple candles of the same height can be lit in one round. In other words, in each round, you will light all the candles of the highest current height. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ A[i] ≤ 1000 Input The input is given in the following format: ``` N A1 A2 A3 ... AN ``` Where `N` is the number of candles and `A` is the array of candle heights. Output Print the number of rounds required to light all the candles. Examples Input ``` 4 2 3 2 1 ``` Output ``` 3 ``` Input ``` 5 4 4 4 4 4 ``` Output ``` 1 ``` Input ``` 7 6 6 1 2 3 3 4 ``` Output ``` 4 ``` Explanation of Examples: 1. In the first example, the rounds happen as follows: - Round 1: Light all height 3 candles. - Round 2: Light all height 2 candles. - Round 3: Light the height 1 candle. Total rounds = 3. 2. In the second example, all candles are of the same height, so they are lit in one round. 3. In the third example, the rounds occur as follows: - Round 1: Light all height 6 candles. - Round 2: Light all height 4 candles. - Round 3: Light all height 3 candles. - Round 4: Light all height 2 candles. - Round 5: Light the height 1 candle. Total rounds = 4.","solution":"def count_lighting_rounds(candle_heights): Given a list of candles with their heights, determine the number of rounds required to light all the candles if multiple candles of the same height can be lit in one round. :param candle_heights: List of integers representing the heights of candles :return: Integer - number of rounds needed to light all candles unique_heights = set(candle_heights) return len(unique_heights)"},{"question":"Write a function `matrixDiagonalSum` that takes a 2D list (matrix) of integers `matrix` as input and returns the sum of the elements on both the diagonals. The matrix will be square (i.e., it will have the same number of rows and columns). For example, given the matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The function should return 1 + 5 + 9 + 3 + 7 = 25. Note that the middle element of an odd-length matrix should only be counted once.","solution":"def matrixDiagonalSum(matrix): Returns the sum of the elements on both the diagonals of a square matrix. n = len(matrix) diagonal_sum = 0 for i in range(n): # Add the primary diagonal element diagonal_sum += matrix[i][i] # Add the secondary diagonal element # Check if it\'s the same as primary diagonal for odd length matrix if i != n - 1 - i: diagonal_sum += matrix[i][n - 1 - i] return diagonal_sum"},{"question":"You are given an array of positive integers of length n. Your task is to rearrange the array such that the sum of the absolute differences between neighboring elements is minimized. The absolute difference between two elements a and b is defined as |a - b|, where |x| denotes the absolute value of x. Input Format The first line contains a single integer, n, denoting the number of integers in the array. The second line contains n space-separated integers. Constraints 2 leq n leq 3000 1 leq a_i leq 10^9 Output Format Print a single integer denoting the minimized sum of absolute differences between neighboring elements after rearranging the array. Sample Input 0 4 10 1 5 8 Sample Output 0 11 Sample Input 1 3 3 6 2 Sample Output 1 4 Explanation Sample Case 0: One possible rearrangement is (1, 5, 8, 10): |1 - 5| + |5 - 8| + |8 - 10| = 4 + 3 + 2 = 9 Another possible rearrangement is (8, 10, 1, 5): |8 - 10| + |10 - 1| + |1 - 5| = 2 + 9 + 4 = 15 The minimum possible sum is 11 for the rearrangement (1, 5, 8, 10). Sample Case 1: The rearrangement (2, 3, 6) gives: |2 - 3| + |3 - 6| = 1 + 3 = 4 Another possible rearrangement (6, 3, 2) gives: |6 - 3| + |3 - 2| = 3 + 1 = 4 The minimum possible sum is 4.","solution":"def min_sum_absolute_differences(arr): # Sort the array to get the minimum sum of absolute differences arr.sort() # The minimum sum of absolute differences when the array is sorted n = len(arr) min_sum = 0 for i in range(n - 1): min_sum += abs(arr[i] - arr[i + 1]) return min_sum"},{"question":"Julia loves to solve puzzles, and she recently encountered a sequence puzzle involving prime numbers. She has a sequence of integers and needs to identify the prime numbers in this sequence. She then intends to rearrange these prime numbers in ascending order while keeping the non-prime numbers in their original positions. You are to write a function that takes in a list of integers and returns a list where the prime numbers are sorted in ascending order, but non-prime numbers remain in their original positions. -----Input----- - A list of integers, where each integer is between -1000 and 1000. -----Output----- - A list of integers where all the prime numbers have been sorted in ascending order while non-prime numbers remain in their original positions. -----Examples----- Input [10, 29, 11, 4, 5] Output [10, 5, 11, 4, 29] Input [-7, 17, 3, 50, 19, 4, 6] Output [-7, 3, 17, 50, 19, 4, 6] Input [22, 6, 8, 9, 15] Output [22, 6, 8, 9, 15] -----Hints----- - Consider creating a helper function to determine if a number is prime. - Use this function to identify and extract prime numbers from the list. - Sort the extracted prime numbers and reinsert them into the original list positions.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sort_primes(sequence): Rearranges prime numbers in the sequence in ascending order while keeping non-prime numbers in their original positions. primes = [num for num in sequence if is_prime(num)] primes.sort() prime_index = 0 result = [] for num in sequence: if is_prime(num): result.append(primes[prime_index]) prime_index += 1 else: result.append(num) return result"},{"question":"Traffic Light Intersection Imagine you are designing a system for managing the traffic lights at a busy intersection in a city. The intersection has traffic lights for northbound, southbound, eastbound, and westbound traffic. The system changes the light from \\"green\\" to \\"yellow\\" to \\"red\\" in a specific sequence and duration: 1. Green light stays on for 60 seconds. 2. Yellow light stays on for 10 seconds. 3. Red light stays on until the traffic light completes the sequence for the other three directions. Write a function `currentLight(direction: str, elapsed_time: int) -> str` that takes in two arguments: 1. `direction`: A string representing the direction of traffic (\\"north\\", \\"south\\", \\"east\\", or \\"west\\"). 2. `elapsed_time`: An integer representing the elapsed time in seconds since the light turned green for the specified direction. The function should return the current color of the traffic light (\\"green\\", \\"yellow\\", or \\"red\\"). Here is the sequence in detail: - For \\"north\\" and \\"south\\": - Green for 60 seconds, followed by yellow for 10 seconds, remaining time red. - For \\"east\\" and \\"west\\": - Red initially for the duration when \\"north\\" and \\"south\\" are active, followed by green for 60 seconds, followed by yellow for 10 seconds, remaining time red. Assume that the lights start in sync with \\"north\\" and \\"south\\" turning green and \\"east\\" and \\"west\\" red. # Function Signature ```python def currentLight(direction: str, elapsed_time: int) -> str: ``` # Test Cases ```python assert currentLight(\\"north\\", 50) == \\"green\\" assert currentLight(\\"south\\", 65) == \\"yellow\\" assert currentLight(\\"east\\", 70) == \\"red\\" assert currentLight(\\"west\\", 150) == \\"red\\" assert currentLight(\\"north\\", 120) == \\"red\\" assert currentLight(\\"east\\", 130) == \\"green\\" ```","solution":"def currentLight(direction: str, elapsed_time: int) -> str: cycle_time = 140 # Total cycle time: 60s green + 10s yellow + 60s green + 10s yellow for each pair # Ensure elapsed_time is within the cycle range using modulo elapsed_time = elapsed_time % cycle_time # Define the traffic light changes per direction if direction in [\\"north\\", \\"south\\"]: if elapsed_time < 60: return \\"green\\" elif elapsed_time < 70: return \\"yellow\\" else: return \\"red\\" elif direction in [\\"east\\", \\"west\\"]: if elapsed_time < 70: return \\"red\\" elif elapsed_time < 130: return \\"green\\" else: return \\"yellow\\""},{"question":"Given an array of unique integers, you need to find all pairs of integers whose sum is equal to a given target value. Each pair should be returned as a tuple, and the function should return a list of these tuples. The order of the pairs and the order of integers within each pair does not matter. For example, if the input array is [2, 4, 3, 5, 7, 8, 9] and the target sum is 10, the output should be [(2, 8), (3, 7)]. -----Input----- The first line of input contains an integer N (2 leq N leq 10000) representing the number of elements in the array. The second line contains N unique integers separated by spaces. The third line contains an integer representing the target sum value. -----Output----- Display all pairs of integers whose sum is equal to the target value. Each pair should be returned as a tuple, and pairs should be displayed as a list of tuples. If no such pairs exist, display an empty list []. -----Examples----- Sample Input 1: 7 2 4 3 5 7 8 9 10 Sample Output 1: [(2, 8), (3, 7)] Sample Input 2: 5 1 2 3 4 5 8 Sample Output 2: [(3, 5)] Sample Input 3: 3 1 5 3 10 Sample Output 3: []","solution":"def find_pairs_with_sum(arr, target): Returns all pairs of integers from the array whose sum is equal to the target. Each pair is returned as a tuple in a list. Parameters: arr (list): A list of unique integers. target (int): The target sum value. Returns: list: A list of tuples where each tuple contains a pair of integers whose sum is equal to the target. seen = set() pairs = [] for number in arr: complement = target - number if complement in seen: pairs.append((complement, number)) seen.add(number) return pairs"},{"question":"In a city, there are N houses arranged in a single row. Each house has a certain amount of money hidden in it, represented by an array `money[]` where `money[i]` is the amount of money hidden in the ith house. However, you cannot collect the money from two consecutive houses due to the installed security system. Write a function that takes the array `money[]` as input and returns the maximum amount of money you can collect without triggering the alarm. Example 1: Input: money[] = [1, 2, 3, 1] Output: 4 Explanation: Steal from house 1 (money = 1) and house 3 (money = 3). Example 2: Input: money[] = [2, 7, 9, 3, 1] Output: 12 Explanation: Steal from house 2 (money = 7) and house 4 (money = 3) or house 2 (money = 7) and house 3 (money = 9). Your Task: You do not need to read input or print anything. Your task is to complete the function `maxMoney()` which takes an array `money[]` as input parameter and returns the maximum amount of money you can collect following the given constraints. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 0 ≤ money[i] ≤ 10^4","solution":"def maxMoney(money): Find the maximum amount of money that can be robbed without triggering alarms. :param money: List[int] - the amount of money in each house. :return: int - the maximum amount of money that can be robbed. if not money: return 0 if len(money) == 1: return money[0] N = len(money) dp = [0] * N dp[0] = money[0] if N > 1: dp[1] = max(money[0], money[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"Alice has recently started learning about binary search trees (BSTs). A binary search tree is a data structure that keeps elements in order, such that for any node: - All elements in the left subtree of the node are less than the node. - All elements in the right subtree are greater than the node. Alice is given a sequence of `n` distinct integers which she needs to insert into an initially empty BST in the given order. However, she is curious about a property of the resulting BST after all insertions. Specifically, Alice wants to know the maximum depth of the tree, where the depth of a tree is the number of edges on the longest path from the root to a leaf. Can you help Alice determine the maximum depth of the BST formed by inserting the given sequence? -----Input----- The first line contains a single integer n (1 le n le 10^5) – the number of elements in the sequence. The second line contains n distinct integers a_1, a_2, ..., a_n (1 le a_i le 10^6) – the sequence of elements to be inserted into the BST. -----Output----- Output a single integer representing the maximum depth of the BST. -----Example----- Input 7 4 2 6 1 3 5 7 Output 3 Note: The BST formed by the sequence [4, 2, 6, 1, 3, 5, 7] has a maximum depth of 3 (the path 4 -> 6 -> 7 or 4 -> 2 -> 1 is the longest). Explanation: The tree looks like this: 4 / 2 6 / / 1 3 5 7","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) else: if root.val < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root def maxDepth(root): if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1 def calculate_max_depth(n, sequence): if n == 0: return 0 root = None for key in sequence: root = insert(root, key) return maxDepth(root)"},{"question":"Tom is learning to play with numbers and patterns. He came across an interesting problem related to numbers and decided to seek your help. The problem is as follows: Tom needs to create an array of size n such that it contains integers from 1 to n and the sum of the array elements at even indices is equal to the sum of elements at odd indices. An index is considered even if it is divisible by 2, and odd if it is not. Note that array indices are 1-based. Help Tom to find such an array if it is possible. If there are multiple solutions, any one of them will be accepted. If it is not possible to create such an array, return -1. -----Input----- The input contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Each of the next t lines contains a single integer n (2 le n le 200) — the size of the array. -----Output----- For each test case, print an array of length n where the sum of elements at even indices is equal to the sum of elements at odd indices. If multiple arrays are possible, print any one of them. If it is not possible, print -1. -----Examples----- Input 3 4 5 6 Output 1 2 3 4 1 1 2 2 3 1 2 1 2 1 2 -----Notes----- In the first test case, the sums of even and odd indexed elements do not match, so return -1. In the second test case, the sums of the even and odd indexed elements are: Sum of odd indices = 1 + 2 + 3 = 6 Sum of even indices = 1 + 2 = 3 Thus, sum of elements at odd indices is not equal to the sum of elements at even indices, so return -1. In the third test case, both sums of even and odd indices elements can be made equal using the array [1, 2, 1, 2, 1, 2]. There can be multiple valid outputs.","solution":"def generate_balanced_array(n): # Check if it\'s possible to create such an array if n % 2 != 0: return -1 # For odd n, it is not possible # Create an array with the following pattern for even n array = [] for i in range(1, n//2+1): array.append(1) array.append(2) return array def solve(test_cases, sizes): results = [] for n in sizes: result = generate_balanced_array(n) results.append(result) return results"},{"question":"You are tasked with helping Michael, who is organizing storage bins in his warehouse. He needs to arrange a list of bin IDs such that each bin ID\'s value is either halved or doubled when compared to the previous bin in the sequence. More precisely, for the sequence of bin IDs `(b_1, b_2, ..., b_n)`, the condition `b_(i+1) = b_i / 2` or `b_(i+1) = b_i * 2` (for all valid `i`) should hold true. Michael needs to know if such an arrangement is possible with the given bin IDs. -----Input----- The input file contains a single line with a space-separated list of bin IDs, where each ID is a distinct positive integer no greater than `10^6`. -----Output----- Output \\"YES\\" followed by the sequence of bin IDs in the required order if such a sequence exists. If no such sequence can be constructed, output \\"NO\\". -----Examples----- Sample Input: 4 1 8 2 Sample Output: YES 1 2 4 8 Sample Input: 7 3 15 Sample Output: NO","solution":"def can_arrange_bin_ids(bin_ids): Determines if bin IDs can be arranged such that each bin ID\'s value is either halved or doubled compared to the previous bin ID in the sequence. :param bin_ids: A list of distinct positive integers representing bin IDs. :return: A tuple with a string \\"YES\\" or \\"NO\\", and the sequence if \\"YES\\" otherwise an empty list. bin_ids.sort() n = len(bin_ids) for i in range(n): sequence = [bin_ids[i]] used = set(sequence) for _ in range(n - 1): last = sequence[-1] if last * 2 in bin_ids and last * 2 not in used: sequence.append(last * 2) used.add(last * 2) elif last % 2 == 0 and last // 2 in bin_ids and last // 2 not in used: sequence.append(last // 2) used.add(last // 2) else: break if len(sequence) == n: return (\\"YES\\", sequence) return (\\"NO\\", [])"},{"question":"An alien language has a different alphabetical order than English. You are given a list of words sorted lexicographically by the rules of this alien language. Derive the order of characters in this alien alphabet. -----Input----- The first line contains integer n (1 ≤ n ≤ 100), the number of words in the dictionary. Each of the next n lines contains a word consisting of lowercase English letters. The length of each word is between 1 and 1000. -----Output----- Print a single line containing a string that represents the characters of the alien alphabet in the correct order. If there are multiple acceptable orders, print any of them. If it\'s impossible to determine the order, print \\"Impossible\\". -----Examples----- Input 3 wrt wrf er Output wertf Input 2 gg gf Output gf -----Note----- In the first sample, we can determine the following order: \'w\' appears before \'e\', \'e\' appears before \'r\', \'r\' appears before \'t\', and \'t\' appears before \'f\'. Thus, one possible order of characters is \\"wertf\\". In the second sample, the order can be derived from the fact that \'g\' appears before \'f\' in the second word but they are the same in the first word. Therefore, \\"gf\\" is a valid order.","solution":"from collections import defaultdict, deque def alien_order(words): def build_graph(words): graph = defaultdict(set) in_degree = {char: 0 for word in words for char in word} for i in range(len(words) - 1): first, second = words[i], words[i + 1] min_len = min(len(first), len(second)) if first[:min_len] == second[:min_len] and len(first) > len(second): return {}, {} for j in range(min_len): if first[j] != second[j]: if second[j] not in graph[first[j]]: graph[first[j]].add(second[j]) in_degree[second[j]] += 1 break return graph, in_degree def topo_sort(graph, in_degree): queue = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == len(in_degree): return \\"\\".join(order) else: return \\"Impossible\\" graph, in_degree = build_graph(words) if not graph and not in_degree: return \\"Impossible\\" return topo_sort(graph, in_degree)"},{"question":"Given an array of integers representing the heights of buildings, you need to calculate the total amount of rainwater that can be trapped between these buildings after a rain. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The buildings are of varying heights. The left and right boundaries of each building form containers that can hold water. In this example, 6 units of water can be trapped. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The buildings trap 9 units of water in the gaps. Example 3: Input: heights = [5,4,1,2] Output: 1 Constraints: - 1 <= heights.length <= 2 * 10^4 - 0 <= heights[i] <= 10^5","solution":"def trap(heights): Calculate the total amount of rainwater trapped between the buildings. :param heights: List[int] - List representing the heights of the buildings :return: int - Total amount of rainwater trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Jane and Mark are playing a card game with a special deck. The deck contains N cards, each with a positive integer value. Jane and Mark alternate turns, with Jane always going first. On each turn, a player must pick any one card from the deck and remove it. The player\'s score is increased by the value of the card they removed. The game ends when all the cards have been removed. The player with the highest score at the end of the game wins. Assume that both players play optimally to maximize their scores. Determine the final score of each player. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case contains two lines of input: - The first line contains N, the number of cards in the deck. - The second line contains N space-separated integers denoting the values of the cards in the deck. ------ Output Format ------ For every test case, print exactly one line containing two integers — Jane\'s final score and Mark\'s final score separated by a space. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ value of card ≤ 10^{9} - The sum of N over all test cases doesn\'t exceed 10^{6} ----- Sample Input 1 ------ 1 4 1 2 10 3 ----- Sample Output 1 ------ 12 4 ----- Explanation 1 ------ Jane will pick the card with value 10 first. Mark will pick the card with value 3. Jane will pick the card with value 2. Mark will pick the card with value 1. So, Jane\'s final score is 12 and Mark\'s final score is 4.","solution":"def calculate_scores(test_cases): results = [] for test_case in test_cases: N, cards = test_case cards.sort(reverse=True) jane_score = sum(cards[i] for i in range(0, N, 2)) mark_score = sum(cards[i] for i in range(1, N, 2)) results.append(f\\"{jane_score} {mark_score}\\") return results # Reading input from standard input and processing the test cases based on the input format def process_input(input_data): data = input_data.strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 cards = list(map(int, data[idx:idx+N])) idx += N test_cases.append((N, cards)) return test_cases # Dummy input and testing the scores calculation if __name__ == \\"__main__\\": input_data = 1 4 1 2 10 3 test_cases = process_input(input_data) results = calculate_scores(test_cases) for result in results: print(result)"},{"question":"Write a function that determines if two given strings are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the other string, with no two characters mapping to the same character but one character may map to itself. Input: First line of the input contains number of test cases T. Each of the following T lines contains two strings s1 and s2 which need to be checked for isomorphism. Output: For each test case, print \\"Yes\\" (without quotes) if the strings are isomorphic. Otherwise print \\"No\\" (without quotes). Constraints: 1 ≤ T ≤ 1000 1 ≤ length of s1, s2 ≤ 1000 SAMPLE INPUT: 3 egg add foo bar paper title SAMPLE OUTPUT: Yes No Yes","solution":"def are_isomorphic(s1, s2): Determines if two strings are isomorphic. if len(s1) != len(s2): return \\"No\\" mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for char1, char2 in zip(s1, s2): if char1 not in mapping_s1_to_s2 and char2 not in mapping_s2_to_s1: mapping_s1_to_s2[char1] = char2 mapping_s2_to_s1[char2] = char1 elif mapping_s1_to_s2.get(char1) != char2 or mapping_s2_to_s1.get(char2) != char1: return \\"No\\" return \\"Yes\\" def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(are_isomorphic(s1, s2)) return results def main(input_lines): T = int(input_lines[0]) test_cases = [line.split() for line in input_lines[1:T+1]] results = process_test_cases(test_cases) return results"},{"question":"You are given an array of integers and a target sum. Your task is to find if there are two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target sum. If such indices exist, return their positions in the array (1-based index). If no such indices exist, return -1. -----Constraints----- - All values in input are integers. - 2 ≤ length of array ≤ 10^4 - -10^9 ≤ array elements ≤ 10^9 - -10^9 ≤ target sum ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N array target -----Output----- Print the positions of the two indices (1-based index) that add up to the target sum. If no such indices exist, print -1. -----Sample Input----- 5 1 2 3 4 5 9 -----Sample Output----- 4 5 In the sample input, the elements at index 4 and index 5 add up to 9 (4 + 5 = 9), so the output is 4 5. If no such pair exists in the array, the output would be -1.","solution":"def find_indices_with_target_sum(array, target): This function finds two distinct indices in the array such that their sum equals the target sum. The return values are 1-based indices. seen = {} for i, num in enumerate(array): required = target - num if required in seen: return seen[required] + 1, i + 1 # Convert to 1-based index seen[num] = i return -1"},{"question":"Alex has a collection of books on a shelf, indexed from 1 to n from left to right. He noticed that if he removes a contiguous segment of books from his shelf, the average thickness of the remaining books can be higher than the average thickness of all the books on the shelf. Given the thickness of each book on the shelf, determine the thickness of the thickest book that could be removed to increase the average thickness of the remaining books. If no single book\'s removal leads to an increased average thickness of the remaining books, return -1. -----Constraints----- - 1 ≦ n ≦ 200,000 - 1 ≦ thickness[i] ≦ 10,000 - The thickness of each book is an integer. -----Input----- The input is given from Standard Input in the following format: n thickness_1 thickness_2 ... thickness_n -----Output----- Print the answer. -----Sample Input----- 5 4 2 3 6 5 -----Sample Output----- 6 By removing the book with thickness 6, the new average thickness of the remaining books is (4+2+3+5)/4 = 3.5 which is greater than the original average (4+2+3+6+5)/5 = 4.","solution":"def thickest_book_to_remove(n, thickness): total_thickness = sum(thickness) avg_thickness = total_thickness / n max_thickness = -1 for t in thickness: if t > avg_thickness: max_thickness = max(max_thickness, t) return max_thickness # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) thickness = list(map(int, data[1:])) print(thickest_book_to_remove(n, thickness))"},{"question":"Implement a function that simulates a pattern locking mechanism on a touch screen. A 3x3 grid represents the screen, with each cell having a unique number from 1 to 9. Your task is to verify if a given sequence of numbers is a valid pattern lock sequence according to the following rules: 1. Each number must be an integer between 1 and 9. 2. No number can be used more than once. 3. Moves can be in any direction (horizontally, vertically, or diagonally) between adjacent cells. 4. A move is considered invalid if it \\"jumps\\" over a previously unused cell. For instance, moving from 1 to 3 directly is invalid unless 2 has been used in between. 5. The first number in the sequence is always valid. Write a function `is_valid_pattern(sequence)` that takes a list of integers as input and returns `True` if the sequence is a valid pattern lock sequence, and `False` otherwise. -----Input----- A single list of integers, `sequence` (1 ≤ len(sequence) ≤ 9), representing the sequence of numbers in the pattern lock attempt. -----Output----- A boolean value - `True` if the sequence forms a valid pattern lock, `False` otherwise. -----Examples----- Input [1, 2, 3, 6, 5, 4, 7, 8, 9] Output True Input [1, 3, 2, 4, 5, 6, 9, 7, 8] Output False","solution":"def is_valid_pattern(sequence): Determines if the given sequence is a valid pattern lock sequence. if any(n < 1 or n > 9 for n in sequence): return False if len(set(sequence)) != len(sequence): return False moves = { (1, 3): 2, (1, 7): 4, (1, 9): 5, (2, 8): 5, (3, 7): 5, (3, 9): 6, (4, 6): 5, (7, 9): 8, (3, 1): 2, (7, 1): 4, (9, 1): 5, (8, 2): 5, (7, 3): 5, (9, 3): 6, (6, 4): 5, (9, 7): 8 } used = set() for i in range(len(sequence) - 1): cur = sequence[i] next = sequence[i + 1] if next in used: return False if (cur, next) in moves and moves[(cur, next)] not in used: return False used.add(cur) return True"},{"question":"A balanced expression is one where each opening bracket has a corresponding closing bracket in the correct order of nesting. This applies to the various types of brackets: parentheses `()`, square brackets `[]`, and curly brackets `{}`. Given a string, determine if it contains a balanced expression. A balanced expression fulfills the following criteria: 1. For every opening bracket, there must be a corresponding closing bracket of the same type. 2. Closing brackets must appear in the correct order to match the most recently opened bracket that hasn\'t yet been closed. For example, `\\"{[()]}\\"` and `\\"()\\"` are balanced, while `\\"{[(])}\\"` and `\\"([)]\\"` are not balanced. Write a function that reads a string and determines if the brackets are balanced. # Input - A single string containing a combination of the characters `()`, `[]`, and `{}`. # Output - Print `\\"YES\\"` if the string contains a balanced expression, otherwise print `\\"NO\\"`. # Example **Input:** ``` {[()]} ``` **Output:** ``` YES ``` **Input:** ``` {[(])} ``` **Output:** ``` NO ```","solution":"def is_balanced(expression): Determines if the given expression has balanced brackets. Parameters: expression (str): The input string containing brackets. Returns: str: \\"YES\\" if the expression is balanced, \\"NO\\" otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" else: continue # in case expression contains characters other than brackets return \\"YES\\" if stack == [] else \\"NO\\""},{"question":"Given a string `pattern` of length `M` and a text `txt` of length `N`, your task is to identify if `pattern` exists in `txt`. If it does, return the starting index of each occurrence of `pattern` in `txt`. If `pattern` does not exist in `txt`, return an empty list. Implement the function `search_pattern(pattern: str, txt: str) -> List[int]` that returns a list of starting indices of the pattern in the text. # Example Input: ``` pattern = \\"abc\\" txt = \\"ababcabc\\" ``` Output: ``` [2, 5] ``` Explanation: ``` The pattern \\"abc\\" is found in \\"ababcabc\\" at indices 2 and 5. ``` # Constraints - `1 ≤ M ≤ 10^3` - `1 ≤ N ≤ 10^5` - The characters in `pattern` and `txt` consist of only lowercase English letters. # Note Your solution must have a time complexity better than `O(N*M)`. Consider using efficient string matching algorithms such as the Knuth-Morris-Pratt (KMP) algorithm.","solution":"from typing import List def compute_lps(pattern: str) -> List[int]: M = len(pattern) lps = [0] * M length = 0 i = 1 while i < M: if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps def search_pattern(pattern: str, txt: str) -> List[int]: M = len(pattern) N = len(txt) lps = compute_lps(pattern) result = [] i = 0 j = 0 while i < N: if pattern[j] == txt[i]: i += 1 j += 1 if j == M: return_start_index = i - j result.append(return_start_index) j = lps[j - 1] elif i < N and pattern[j] != txt[i]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"A robot is placed on an M x N grid. The robot can move up, down, left, or right but cannot move diagonally. The grid has some cells initially marked as impassable. The robot needs to find the shortest path from its starting position to a given target position, if such a path exists. If there is no valid path, the robot should return -1. **Input Format:** - The first line contains two integers M and N, the dimensions of the grid. - The next M lines each contain N integers separated by spaces, representing the grid. A 0 indicates a passable cell, and a 1 indicates an impassable cell. - The next line contains two integers, x_start and y_start, the starting coordinates of the robot. - The last line contains two integers, x_target and y_target, the target coordinates. **Output Format:** - Output a single integer representing the length of the shortest path from the start position to the target position. If no valid path exists, output -1. **Constraints:** - 1 ≤ M, N ≤ 1000 - 0 ≤ x_start, y_start, x_target, y_target < M and N - The starting and target positions will always be passable (i.e., they will be 0). **Sample Input:** ``` 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 1 1 0 0 0 0 0 0 1 0 0 0 4 4 ``` **Sample Output:** ``` 8 ```","solution":"from collections import deque def shortest_path(grid, start, target): M, N = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] x_start, y_start = start x_target, y_target = target if (x_start, y_start) == (x_target, y_target): return 0 queue = deque([(x_start, y_start, 0)]) visited = set([(x_start, y_start)]) while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: if (nx, ny) == (x_target, y_target): return steps + 1 queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"Given a list of integers, determine if it\'s possible to split the list into two sublists such that the sum of elements in both sublists is equal. Return true if such a split is possible, otherwise false. Each integer in the list should be included in exactly one of the two sublists. # Constraints: - 1 <= list.length <= 200 - -10^5 <= list[i] <= 10^5 # Examples: Example 1: ``` Input: list = [1, 5, 11, 5] Output: true Explanation: The list can be split into [1, 5, 5] and [11], both having a sum of 11. ``` Example 2: ``` Input: list = [1, 2, 3, 5] Output: false Explanation: The list cannot be split into two sublists with equal sum. ``` Example 3: ``` Input: list = [1, 1, 3, 4, 7] Output: true Explanation: The list can be split into [1, 1, 3] and [4, 7], both having a sum of 5. ``` Example 4: ``` Input: list = [2, 2, 3, 5] Output: false Explanation: The list cannot be split into two sublists with equal sum. ``` # Notes: - Consider edge cases where the input list has only one element or all elements are the same. - An efficient solution utilizing dynamic programming or similar algorithm is expected due to potential constraints on the input size.","solution":"def can_partition(nums): Determines if the input list can be partitioned into two sublists with equal sum. total_sum = sum(nums) # If the total sum is odd, we can\'t partition it into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 # Using dynamic programming to find if there is a subset with sum equal to half of total sum dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Write a program that generates a unique pattern of numbers based on the input size. The pattern should follow these rules: * Given an integer n, the output should be a matrix of size n x n. * The matrix should be filled with integers from 1 to n^2 in a zigzag pattern from left to right and top to bottom: * On odd-numbered rows (0, 2, 4, ...), fill the row with numbers in increasing order from left to right. * On even-numbered rows (1, 3, 5, ...), fill the row with numbers in increasing order from right to left. Input The input is given in the following format: d n1, n2, :: nd The number of datasets d (d ≤ 20) is given on the first line, and the size ni (1 ≤ ni ≤ 100) of the matrix for the i-th set is given on each of the following d lines. Output Please output the zigzag pattern matrix for each dataset. Insert a blank line between the datasets. Example Input 2 4 5 Output 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13 1 2 3 4 5 10 9 8 7 6 11 12 13 14 15 20 19 18 17 16 21 22 23 24 25","solution":"def generate_zigzag_pattern(n): Generates a n x n matrix in a zigzag pattern as described. matrix = [[0] * n for _ in range(n)] num = 1 for i in range(n): if i % 2 == 0: for j in range(n): matrix[i][j] = num num += 1 else: for j in range(n-1, -1, -1): matrix[i][j] = num num += 1 return matrix def parse_input(data): Parses the input data. lines = data.strip().split(\'n\') d = int(lines[0]) sizes = [int(lines[i]) for i in range(1, d + 1)] return sizes def format_output(matrices): Formats the matrices for output. result = [] for matrix in matrices: lines = [\' \'.join(map(str, row)) for row in matrix] result.append(\'n\'.join(lines)) return \'nn\'.join(result) def main(data): sizes = parse_input(data) matrices = [generate_zigzag_pattern(n) for n in sizes] output = format_output(matrices) return output"},{"question":"# Replace Vowels with ASCII Values Write a function that takes a string as input and returns a new string where each vowel in the input string is replaced by its ASCII value. The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’. Ensure that the function is case insensitive, meaning it should replace both uppercase and lowercase vowels with the corresponding ASCII values of the lowercase vowels. For example: ``` Input: \\"Hello, World!\\" Output: \\"H101l108o, W111r108d!\\" Input: \\"ASCII\\" Output: \\"97SCIII\\" ``` Note: 1. The input string will not be empty and will only contain printable ASCII characters. 2. The function should preserve the case of the consonants and other characters as they appear in the original string. Have fun coding and ensure your solution is efficient and clean!","solution":"def replace_vowels_with_ascii(s): Replace each vowel in the input string with its ASCII value. The function is case insensitive but preserves the case of consonants. vowels_to_ascii = { \'a\': \'97\', \'e\': \'101\', \'i\': \'105\', \'o\': \'111\', \'u\': \'117\', \'A\': \'97\', \'E\': \'101\', \'I\': \'105\', \'O\': \'111\', \'U\': \'117\' } result = [] for char in s: if char in vowels_to_ascii: result.append(vowels_to_ascii[char]) else: result.append(char) return \'\'.join(result)"},{"question":"A group of friends is playing a card game where they draw cards from a deck in a circular manner. The deck has N cards, numbered from 1 to N. The players are sitting in a circle and draw cards in turns, starting from the 1st player. After drawing a card, each player places it on the table and passes the deck to the next player. This continues until one of the players draws a special card number `K`. The player drawing the card `K` wins and the game stops immediately. You need to determine how many turns it will take for the game to end, given K and N are such that 1 ≤ K ≤ N ≤ 10^9. The players\' seating positions are numbered 1 through P, where 1 ≤ P ≤ 10^6. Input Number of test cases T (1 ≤ T ≤ 10^5) followed by T lines. Each line contains 3 space-separated integers: N, K, and P. Output T lines with the number of turns it will take for the game to end. Example Input: 1 10 3 2 Output: 3 Explanation: - Turn 1: Player 1 draws the card numbered 1 - Turn 2: Player 2 draws the card numbered 2 - Turn 3: Player 1 draws the card numbered 3 (since it\'s a circular manner and player 1 comes after player 2) Since card 3 is the special card, it took 3 turns for the game to end.","solution":"def turns_to_end_game(N, K, P): Returns the number of turns to draw card K given N cards and P players. Args: N (int): Total number of cards. K (int): The card number K which ends the game. P (int): Number of players. Returns: int: Number of turns to end the game. # Number of turns to draw 1...K cards would be K. # Since players are drawing cards in round-robin, the turn of the player drawing card K return K"},{"question":"You are given a set of numbers and you need to perform n queries on this set. Each query is one of the following types: 1. Add an integer x to the set. It is guaranteed that the integer x was not added before. 2. Remove an integer x from the set. It is guaranteed that the integer x is in the set. 3. Check if an integer x is present in the set. Return \\"YES\\" if it is present, and \\"NO\\" otherwise. Input: The first line contains integer n (1 ≤ n ≤ 2·10^5) — the number of queries. Each of the next n lines contains an integer type (1, 2, or 3) and an integer x — the type of the query and the integer to process. Output: For each query of the third type, print \\"YES\\" or \\"NO\\". Examples: Input: 6 1 5 1 10 3 5 2 5 3 5 3 10 Output: YES NO YES Input: 8 1 7 1 3 3 7 3 2 2 7 3 7 3 3 2 3 Output: YES NO NO YES","solution":"class NumberSet: def __init__(self): self.set_numbers = set() def add(self, x): self.set_numbers.add(x) def remove(self, x): self.set_numbers.remove(x) def check(self, x): return \\"YES\\" if x in self.set_numbers else \\"NO\\" def process_queries(n, queries): number_set = NumberSet() results = [] for query in queries: type_query, x = query if type_query == 1: number_set.add(x) elif type_query == 2: number_set.remove(x) elif type_query == 3: results.append(number_set.check(x)) return results"},{"question":"Given a string `s` representing a mathematical expression consisting of single digits (0-9) and basic arithmetic operators (+, -, *, /), evaluate the expression and return the result as an integer. The integer division should truncate toward zero. You may assume that the given expression is valid and follows all standard operator precedence rules (multiplication and division have higher precedence than addition and subtraction), and all operations are performed between single digit numbers. Examples: Input: s = \\"3+2*2\\" Output: 7 Explanation: Perform multiplication 2*2 first to get 4, then add 3 to get 7. Input: s = \\"3-5/2\\" Output: 1 Explanation: Perform division 5/2 first to get 2 (truncate towards zero), then subtract from 3 to get 1. Note: 1. The length of the string does not exceed 100. 2. The string contains only single digit numbers and the operators +, -, *, /. 3. The string will not contain any spaces. 4. The string represents a valid mathematical expression.","solution":"def evaluate_expression(s): Evaluates a string mathematical expression and returns the result as an integer. if not s: return 0 num, stack, sign = 0, [], \'+\' for i in range(len(s)): if s[i].isdigit(): num = num * 10 + int(s[i]) if s[i] in \\"+-*/\\" or i == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) # truncate towards zero sign = s[i] num = 0 return sum(stack)"},{"question":"Write a function that takes in a string and returns the string in reverse order, but with the case of each letter swapped. For example, if the input string is \\"Hello World!\\", the function should return \\"!DLROw OLLEh\\". Rules: - All alphabetic characters should have their case swapped. - Non-alphabetic characters should remain the same. - The function should be case-insensitive when reversing the string.","solution":"def reverse_and_swap_case(s): Takes a string and returns the string in reverse order with the case of each letter swapped. return s[::-1].swapcase()"},{"question":"In a city renowned for its intricate roads and bustling traffic, you have been tasked with designing an optimized traffic signal system at a major intersection. The intersection is of n by n grids, with each cell containing either a road or a building. The challenge lies in determining the optimal placement of traffic signals such that you can maximize the number of roads receiving green lights simultaneously. Each grid cell is marked either \\"R\\" (for road) or \\"B\\" (for building). Signals can be placed only on road cells and they control traffic horizontally or vertically based on a fixed direction for simplicity in this preliminary design. Your goal is to ensure that the most number of roads receive green lights at once without causing any conflicts that lead to traffic congestion. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the size of the grid. The next n lines contain n characters each, describing the layout of the grid where \'R\' represents a road and \'B\' represents a building. Output The output should contain the coordinates of roads where signals should be placed to achieve the maximum number of roads receiving green lights simultaneously. If there are multiple configurations that yield the same maximum, any one of them is acceptable. The first line of the output should contain the number of signals placed. Then, print the coordinates of each signal in separate lines. The coordinates should be represented with the row and column index (both 1-based) separated by a space. Example Input 4 RRRB RRBB RRRR BBRB Output 3 1 1 2 1 3 1 Note In the example, placing signals at coordinates (1, 1), (2, 1), and (3, 1) covers the horizontal roads optimally without any conflicts that may lead to congestion. In this problem, think about how to optimally place traffic signals, ensuring that as many roads as possible can receive a green light simultaneously while accounting for the presence of buildings.","solution":"def max_traffic_signals(n, grid): max_sum = 0 signals = [] row_count = [0] * n col_count = [0] * n for i in range(n): for j in range(n): if grid[i][j] == \'R\': row_count[i] += 1 col_count[j] += 1 for i in range(n): for j in range(n): if grid[i][j] == \'R\' and (row_count[i] + col_count[j] - 1) > max_sum: max_sum = row_count[i] + col_count[j] - 1 signals = [(i+1, j+1)] return len(signals), signals # Example usage: n = 4 grid = [ \\"RRRB\\", \\"RRBB\\", \\"RRRR\\", \\"BBRB\\" ] number_of_signals, coords = max_traffic_signals(n, grid) print(number_of_signals) for coord in coords: print(coord[0], coord[1])"},{"question":"Write a function `count_paths(grid)` that counts the number of distinct paths from the top-left corner to the bottom-right corner of a MxN grid. You can only move either down or right at any point in time. The grid may contain obstacles, represented by a value of `0`, which cannot be traversed. All other cells are labeled with `1`. # Input: - A 2D list of integers representing the grid, where each cell is either `1` (path available) or `0` (obstacle). - The top-left corner grid[0][0] and the bottom-right corner grid[-1][-1] will always be `1`. # Output: - An integer representing the number of unique paths from the top-left to the bottom-right corner. # Constraints: - The grid will be of size MxN where 1 ≤ M, N ≤ 100. # Example: ```python grid = [ [1, 0, 0], [1, 1, 0], [0, 1, 1] ] count_paths(grid) -> 1 ``` # Explanation: There is only one unique path from the top-left to the bottom-right corner which is: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2). # Note: You may assume that the top-left and bottom-right corners of the grid will always be `1`.","solution":"def count_paths(grid): if not grid or grid[0][0] == 0: return 0 M, N = len(grid), len(grid[0]) # Create a cache matrix to store number of ways to reach each cell dp = [[0] * N for _ in range(M)] # Start at the top-left corner dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"You are given an integer n and an array a of 2n-1 integers. Let\'s denote a[l..r] as the contiguous subarray of a starting with the l-th element and ending with the r-th element (in other words, a[l..r] = a[l], a[l+1], dots, a[r]). You have to construct an array b of length n which is a subarray of all of the following arrays: a[1..n], a[2..n+1], a[3..n+2], ..., a[n..2n-1]. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 50). The second line of each test case contains the array a of 2n-1 integers. Each integer in the array is between -1000 and 1000 inclusively. -----Output----- For each test case, print the corresponding array b of length n. If there are multiple such arrays — print any of them. It can be shown that at least one array b meeting the constraints always exists. -----Example----- Input 3 1 5 3 1 2 3 4 5 4 3 3 3 3 3 3 3 Output 5 3 3 4 3 3 3 3 -----Note----- The explanation of the sample case: The first test case: 5 is a subarray of a[1..1] = 5. The second test case: [3, 3, 4] is a subarray of all a[1..3] = [1, 2, 3], a[2..4] = [2, 3, 4], and a[3..5] = [3, 4, 5]. The third test case: [3, 3, 3, 3] is a subarray of all a[1..4] = [3, 3, 3, 3], a[2..5] = [3, 3, 3, 3], a[3..6] = [3, 3, 3, 3], and a[4..7] = [3, 3, 3, 3].","solution":"def find_b(t, cases): results = [] for case in cases: n = case[0] a = case[1] b = a[:n] results.append(b) return results"},{"question":"Given a binary tree, the task is to complete the function zigzagTraversal(), that performs the zigzag (or spiral) traversal on the given binary tree. In zigzag traversal, nodes are visited level by level but the direction of traversal alternates with each level, starting from left to right at the root. Input: The function takes a single argument, the root node of the binary tree. Output: The function should return a list containing the values of the nodes in the zigzag order. Constraints: 1 <= Number of nodes <= 10^4 1 <= Node value <= 10^9 Example: Input: 3 / 9 20 / 15 7 Output: [3, 20, 9, 15, 7] Note: The Input/Output format and Example given are for user\'s convenience and should be used for expected output only. As it is a function problem, complete the function specified and do not write the full code.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagTraversal(root): if not root: return [] result = [] current_level = deque([root]) left_to_right = True while current_level: level_size = len(current_level) level_values = deque() for _ in range(level_size): node = current_level.popleft() if left_to_right: level_values.append(node.val) else: level_values.appendleft(node.val) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) result.extend(level_values) left_to_right = not left_to_right return list(result)"},{"question":"Write a program to obtain a string (S) from the user and determine whether the string is a palindrome or not. -----Input:----- - First line will contain the string S. -----Output:----- Print \\"Palindrome\\" if the string S is a palindrome. Print \\"Not a palindrome\\" if the string S is not a palindrome. -----Constraints----- - 1 leq |S| leq 1000 (where |S| stands for the length of string S) -----Sample Input:----- madam -----Sample Output:----- Palindrome","solution":"def is_palindrome(s): Determines whether the input string s is a palindrome or not. Args: s (str): Input string to check Returns: str: \'Palindrome\' if s is a palindrome, \'Not a palindrome\' otherwise s = s.lower() # Consider palindromes case-insensitively if s == s[::-1]: return \\"Palindrome\\" else: return \\"Not a palindrome\\""},{"question":"Write a function to simulate the step movements of a robot in a given 2D grid and determine the final position of the robot after completing all the steps given in the instruction string. Input: - The first line contains two integers that represent the initial position of the robot (x, y). - The second line contains a string of instructions consisting of characters: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). The length of the string does not exceed 100 characters. Output: - Print the final position (x, y) of the robot after executing all the instructions. Constraints: - -1000 ≤ x, y ≤ 1000 SAMPLE INPUT: 2 3 4 UUDDLRLR SAMPLE OUTPUT: 3 4 Explanation: Starting at (3, 4) - \'U\' moves to (3, 5) - \'U\' moves to (3, 6) - \'D\' moves to (3, 5) - \'D\' moves to (3, 4) - \'L\' moves to (2, 4) - \'R\' moves to (3, 4) - \'L\' moves to (2, 4) - \'R\' moves to (3, 4) Final position is (3, 4).","solution":"def simulate_robot_movement(x, y, instructions): Simulates the movements of a robot on a 2D grid. Arguments: x -- initial x-coordinate of the robot y -- initial y-coordinate of the robot instructions -- a string containing the instructions (\'U\', \'D\', \'L\', \'R\') Returns: A tuple (final_x, final_y) representing the final coordinates of the robot. for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return x, y"},{"question":"A scientist at a research lab has developed an algorithm for calculating a unique value for a list of numbers. The unique value is defined as the absolute difference between the sum of numbers at even indexes and the sum of numbers at odd indexes in the list. The indexation starts at 0. You are given multiple test cases, and for each test case, you must determine the unique value for the given list of numbers. -----Input Format:----- The first line contains one integer, T, which is the number of test cases. Each test case is then described in two lines. The first line contains one integer N, which represents the number of elements in the list. The next line contains N integers, which denote the elements of the list. -----Output Format:----- For each testcase, output one integer in a new line, which is the unique value for the given list of numbers. -----Constraints:----- - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 100 - 1 ≤ List Element ≤ 10^4 -----Example----- Input: 2 5 1 2 3 4 5 4 10 20 30 40 Output: 1 20 -----Explanation:----- In the first test, the sum of numbers at even indexes (0, 2, 4) is 1+3+5=9 and the sum of numbers at odd indexes (1, 3) is 2+4=6. The unique value is |9-6|=3. In the second test, the sum of numbers at even indexes (0, 2) is 10+30=40 and the sum of numbers at odd indexes (1, 3) is 20+40=60. The unique value is |40-60|=20.","solution":"def unique_value(test_cases): Calculate unique values for each test case. Parameters: test_cases (list of tuples): Each tuple contains (N, list of N integers). Returns: list of integers: List of unique values for each test case. results = [] for N, nums in test_cases: even_sum = 0 odd_sum = 0 for i in range(N): if i % 2 == 0: even_sum += nums[i] else: odd_sum += nums[i] unique_val = abs(even_sum - odd_sum) results.append(unique_val) return results def process_input(T, input_data): Process the input data and produce output using the unique_value function. Parameters: T (int): Number of test cases. input_data (list): List containing raw input data. Returns: list: List of unique values for each test case. test_cases = [] index = 0 while T > 0: N = int(input_data[index]) nums = list(map(int, input_data[index + 1].split())) test_cases.append((N, nums)) index += 2 T -= 1 return unique_value(test_cases)"},{"question":"Write a function characterOccurrences which takes a string as an argument and returns a dictionary with each character from the string as the key and the number of its occurrences as the value. The function should be case insensitive. Here\'s an example of the required output: ```python result = character_occurrences(\'Programming\') # Output result[\'p\'] # 1 result[\'r\'] # 2 result[\'o\'] # 1 result[\'g\'] # 2 result[\'a\'] # 1 result[\'m\'] # 2 result[\'i\'] # 1 result[\'n\'] # 1 ``` ```haskell characterOccurrences \\"Programming\\" `shouldBe` [(\'p\',1),(\'r\',2),(\'o\',1),(\'g\',2),(\'a\',1),(\'m\',2),(\'i\',1),(\'n\',1)] ```","solution":"def character_occurrences(s): Returns a dictionary with each character from the string as the key and the number of its occurrences as the value. The function is case insensitive. s = s.lower() occurrences = {} for char in s: if char in occurrences: occurrences[char] += 1 else: occurrences[char] = 1 return occurrences"},{"question":"Write a program that simulates a simple inventory management system for a small store. The store keeps a record of items, their prices, and quantities in stock. There are different types of operations that you need to handle, such as adding new items to the inventory, updating the quantity of existing items, and processing customer purchases. Here are the specific operations your program needs to support: 1. **ADD item_name price quantity**: Adds a new item to the inventory with the given name, price, and quantity. If the item already exists, update its price and quantity. 2. **UPDATE item_name quantity**: Updates the quantity of the specified item. If the item does not exist, ignore the operation. 3. **BUY customer_name item_name quantity**: Processes a purchase where the specified customer buys the given quantity of the item. If the item does not exist or there is not enough quantity in stock, record the purchase but indicate it was unsuccessful. Otherwise, deduct the quantity from the inventory and record the transaction. **Input** The input consists of multiple lines. Each line represents one of the operations described above, terminated by \\"END\\". Item names, customer names, and operation names are case-sensitive and consist of alphanumeric characters. Quantities and prices are positive integers. **Output** For each **BUY** operation, output a line indicating whether the purchase was successful or not. The format should be: - \\"SUCCESS: customer_name bought quantity of item_name\\" - \\"FAIL: customer_name could not buy quantity of item_name\\" **Example** Input: ``` ADD apple 50 10 ADD banana 30 20 BUY John apple 5 BUY Alice banana 15 BUY John banana 10 UPDATE apple 5 BUY John apple 10 END ``` Output: ``` SUCCESS: John bought 5 of apple SUCCESS: Alice bought 15 of banana SUCCESS: John bought 10 of banana FAIL: John could not buy 10 of apple ```","solution":"class InventoryManager: def __init__(self): self.inventory = {} self.transactions = [] def add_item(self, item_name, price, quantity): if item_name in self.inventory: self.inventory[item_name][\'price\'] = price self.inventory[item_name][\'quantity\'] += quantity else: self.inventory[item_name] = {\'price\': price, \'quantity\': quantity} def update_quantity(self, item_name, quantity): if item_name in self.inventory: self.inventory[item_name][\'quantity\'] = quantity def process_purchase(self, customer_name, item_name, quantity): if item_name in self.inventory and self.inventory[item_name][\'quantity\'] >= quantity: self.inventory[item_name][\'quantity\'] -= quantity self.transactions.append(f\\"SUCCESS: {customer_name} bought {quantity} of {item_name}\\") print(f\\"SUCCESS: {customer_name} bought {quantity} of {item_name}\\") else: self.transactions.append(f\\"FAIL: {customer_name} could not buy {quantity} of {item_name}\\") print(f\\"FAIL: {customer_name} could not buy {quantity} of {item_name}\\") def main(): import sys input = sys.stdin.read commands = input().strip().split(\'n\') inv_manager = InventoryManager() for command in commands: if command == \\"END\\": break parts = command.split() operation = parts[0] if operation == \\"ADD\\": item_name = parts[1] price = int(parts[2]) quantity = int(parts[3]) inv_manager.add_item(item_name, price, quantity) elif operation == \\"UPDATE\\": item_name = parts[1] quantity = int(parts[2]) inv_manager.update_quantity(item_name, quantity) elif operation == \\"BUY\\": customer_name = parts[1] item_name = parts[2] quantity = int(parts[3]) inv_manager.process_purchase(customer_name, item_name, quantity)"},{"question":"Given an array of integers and an integer k, your task is to determine the number of distinct pairs (i, j) such that arr[i] + arr[j] equals k and i < j. If no such pairs exist, return 0. Example 1: Input: arr = [1, 2, 3, 4, 3] k = 6 Output: 2 Explanation: The pairs (2, 4) and (3, 3) add up to 6. Example 2: Input: arr = [1, 1, 1, 1] k = 2 Output: 6 Explanation: There are 6 pairs of (1, 1) that add up to 2. Example 3: Input: arr = [1, 1, 1, 1] k = 3 Output: 0 Explanation: No pairs add up to 3. Your Task: You don\'t need to read or print anything. Your task is to complete the function count_pairs() which takes the array of integers and the integer k as parameters and returns the number of pairs (i, j) such that arr[i] + arr[j] equals k and i < j. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= length of array <= 1000 -1000 <= element of array <= 1000","solution":"def count_pairs(arr, k): Returns the number of distinct pairs (i, j) such that arr[i] + arr[j] equals k and i < j. count = 0 freq = {} for i, num in enumerate(arr): complement = k - num if complement in freq: count += freq[complement] if num in freq: freq[num] += 1 else: freq[num] = 1 return count"},{"question":"You are a manager of a warehouse and responsible for organizing a large shipment of items that arrive every day. Each item is marked with an importance value and you want to ensure that items with higher importance are always processed before items with lower importance. However, the warehouse has a limited number of workers to process items, and each worker can only process one item per day. To maximize efficiency, you want to determine the minimum number of days required to process all items under the following conditions: 1. On each day, each worker picks the highest importance item that is still unprocessed. 2. Every worker processes exactly one item each day, as long as there are items left to process. 3. If there are fewer items than the number of workers on any given day, the workers will only process the available items. Given the number of workers and the list of importance values for each item, determine the minimum number of days required to process all items. ----Input---- The input consists of multiple lines: - The first line contains two integers `w` (1 leq w leq 10^5) representing the number of workers and `n` (1 leq n leq 10^6) representing the number of items to be processed. - The next line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 leq a_i leq 10^9) representing the importance values of the items. ----Output---- Output a single integer, which is the minimum number of days required to process all items. ----Examples---- Example 1: Input: 3 6 4 2 3 1 5 7 Output: 2 Example 2: Input: 2 5 1 2 3 4 5 Output: 3 Example 3: Input: 1 4 8 3 2 1 Output: 4","solution":"def min_days_to_process_items(workers, items): Calculates the minimum number of days required to process all items. :param workers: Number of workers available each day. :param items: List of integers representing importance values of items. :return: Minimum number of days required to process all items. num_items = len(items) # Calculate the number of days required by dividing the total items by the number of workers days_needed = (num_items + workers - 1) // workers # Equivalent to math.ceil(num_items / workers) return days_needed"},{"question":"You are given a list of integers and a target integer. Write a function that finds all unique pairs of integers in the list that sum up to the target. Each pair should be a tuple (a, b) where \'a\' and \'b\' are the integers, and they should be ordered such that a <= b. The function should return a list of these pairs, sorted by the first element of the pair. **Example:** ``` Input: numbers = [2, 4, 3, 5, 7, 8, 9], target = 7 Output: [(2, 5), (3, 4)] ``` **Explanation:** - The pairs (2, 5) and (3, 4) are the only pairs where the sum is 7. - (2, 5) is added because 2 + 5 = 7. - (3, 4) is added because 3 + 4 = 7. - The pairs are sorted based on the first element of the pair.","solution":"def find_pairs_with_sum(numbers, target): Finds all unique pairs in the list which sum up to target. Arguments: numbers -- list of integers target -- target sum of pairs of integers Returns: A list of tuples where each tuple contains a unique pair of integers that add up to the given target, sorted by the first element of the pair. pairs = [] seen = set() used = set() for num in numbers: compliment = target - num if compliment in seen and (min(num, compliment), max(num, compliment)) not in used: pairs.append((min(num, compliment), max(num, compliment))) used.add((min(num, compliment), max(num, compliment))) seen.add(num) return sorted(pairs)"},{"question":"A large pizza has just been delivered to the office. This pizza can be represented as a list of n slices where each slice has a certain number of toppings. Each of the n slices is initially placed in a circular arrangement. To share this pizza, m friends have gathered, and they want to taste a total of k slices in such a way that each friend gets contiguous slices. The challenge is to determine how many different ways the friends can select k contiguous slices from the pizza. Two ways of selecting slices are considered different if there is at least one slice that is part of one selection but not the other. To make things more interesting, you are given an integer x, and you need to find the number of different ways modulo x, where x will be a prime number. Input The input consists of a single line with three integers n (number of slices), k (number of slices to be selected) and x (modulo value): 1 ≤ k < n ≤ 10^5 2 ≤ x ≤ 10^9 + 7 Output Print the number of ways to select k slices such that each selection is contiguous, modulo x. Example Input: 7 3 1000000007 Output: 7 Input: 10 5 1009 Output: 10 Note In the first test case, there are 7 contiguous segments of length 3 that can be chosen in a pizza with 7 slices [1, 2, 3, 4, 5, 6, 7]. These segments are: - [1, 2, 3] - [2, 3, 4] - [3, 4, 5] - [4, 5, 6] - [5, 6, 7] - [6, 7, 1] - [7, 1, 2] In the second test case, there are 10 contiguous segments of length 5 that can be chosen in a pizza with 10 slices.","solution":"def count_contiguous_slices(n, k, x): Returns the number of different ways to select k contiguous slices from a pizza with n slices, modulo x. # As the pizza is circular, the number of ways to pick k contiguous slices in a circular arrangement is equal to n # because each slice can serve as the starting slice once. result = n % x return result"},{"question":"Rohan loves to collect coins. He has a collection of different types of coins, each defined by their value in integers. He wants to find out if he can exactly pay a given amount using any combination of the coins in his collection. Given the number of different coin types, the value of these coins, and a target amount, determine if it\'s possible for Rohan to pay the exact target amount using any combination of the coins (any coin can be used an unlimited number of times). ------ Input Format ------ - The first line will contain T, the number of testcases. Then the testcases follow. - Each testcase consists of three lines: - The first line contains an integer N, the number of different types of coins. - The second line contains N space-separated integers representing the values of the coins. - The third line contains an integer K, the target amount Rohan wants to pay. ------ Output Format ------ For each testcase, output in a single line \\"YES\\" if it\'s possible to pay the exact amount K using the given coins, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 50 1 ≤ text{coin value} ≤ 100 1 ≤ K ≤ 10^{4} ----- Sample Input 1------ 3 3 1 2 3 5 2 2 4 7 2 3 6 9 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ TestCase 1: Rohan can use 1 + 1 + 1 + 1 + 1 or 2 + 3 or other combinations to pay exactly 5 units. TestCase 2: With coin values 2 and 4, it\'s not possible to pay exactly 7 units. TestCase 3: Rohan can use 3 + 3 + 3 to pay exactly 9 units.","solution":"def can_pay_exact_amount(n, coins, k): Determines if the exact amount k can be paid using the given coins. dp = [False] * (k + 1) dp[0] = True for i in range(1, k + 1): for coin in coins: if i >= coin and dp[i - coin]: dp[i] = True break return dp[k] def process_test_cases(test_cases): results = [] for n, coins, k in test_cases: if can_pay_exact_amount(n, coins, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"collections.Counter() The Counter is a dict subclass for counting hashable objects. It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. For example, Counter(\'aba\') yields Counter({\'a\': 2, \'b\': 1}). Sample Code >>> from collections import Counter >>> >>> print Counter(\'gallahad\') Counter({\'a\': 3, \'l\': 2, \'g\': 1, \'h\': 1, \'d\': 1}) >>> >>> print Counter({\'red\': 4, \'blue\': 2}) Counter({\'red\': 4, \'blue\': 2}) >>> >>> print Counter(cats=4, dogs=8) Counter({\'dogs\': 8, \'cats\': 4}) Task You are given a string S. The string S will consist of lowercase English letters. Your task is to find the character with the highest frequency in the string. If there are multiple characters with the highest frequency, return the lexicographically smallest one. Example S = \'aabbbcc\' Output: b Input Format The first line contains the string S. Constraints 0 < |S| < 10^4 Output Format Output the character with the highest frequency in the string. Sample Input aabbbcc Sample Output b","solution":"from collections import Counter def highest_frequency_char(S): Returns the character with the highest frequency in the string S. If there are multiple characters with the highest frequency, return the lexicographically smallest one. if not S: return None count = Counter(S) max_count = max(count.values()) candidates = [char for char, freq in count.items() if freq == max_count] return min(candidates)"},{"question":"You are given a list of integers representing the scores of students in a coding contest. Your task is to determine the rank of a specific student\'s score within the list, considering there might be ties. The rank is determined as the position of the student\'s score in a sorted list of scores in non-increasing order. If there are ties, the student will share the same rank as others with the same score. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of each test case consists of two parts: 1. An integer n (1 leq n leq 10^5) — the number of students. 2. A list of n integers, the scores of the students, followed by an integer m (0 leq m < n), representing the position (0-indexed) of the specific student. -----Output----- For each test case, output a single integer — the rank of the specific student\'s score. -----Examples----- Input 2 5 100 90 90 80 70 3 4 50 50 50 40 1 Output 4 1 -----Note----- For the first test case, the specific student is at position 3 with a score of 80. The sorted list of scores in non-increasing order is [100, 90, 90, 80, 70]. The rank of 80 is 4 (since 100 is rank 1, 90 is rank 2, and the next distinct score 80 is rank 4). For the second test case, the specific student is at position 1 with a score of 50. The sorted list of scores in non-increasing order is [50, 50, 50, 40]. All the scores of 50 share the rank of 1.","solution":"def find_rank(t, test_cases): Finds the rank of the specific student\'s score for each test case. Args: t (int): Number of test cases. test_cases (list): List of test cases, each test case is a tuple of (n, scores, m). Returns: list: Ranks of the specific student\'s score for each test case. output = [] for test in test_cases: n, scores, m = test specific_score = scores[m] sorted_scores = sorted(scores, reverse=True) rank = 1 rank_map = {} for i, score in enumerate(sorted_scores): if score not in rank_map: rank_map[score] = rank rank += 1 output.append(rank_map[specific_score]) return output"},{"question":"Peter is a fan of string manipulations and enjoys solving puzzles involving them. Recently, he came across a problem where he needs to transform a given string into a palindrome by removing the minimum number of characters. A palindrome is a string that reads the same forward and backward. Help Peter determine the minimum number of characters that need to be removed to make the given string a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the string. The second line contains the string s of length n, which consists only of lowercase English letters. Output Print a single integer, the minimum number of characters that need to be removed to make the string a palindrome. Examples Input 3 abc Output 2 Input 4 aabb Output 2 Note In the first example, removing \'b\' and \'c\' will turn \\"abc\\" into \\"a\\", which is a palindrome. In the second example, removing \'a\' or removing \'b\' twice will turn \\"aabb\\" into \\"bb\\" or \\"aa\\", both of which are palindromes.","solution":"def min_removals_to_palindrome(n, s): Returns the minimum number of characters that need to be removed to make the string a palindrome. def longest_palindromic_subsequence(s): # Create a table to store lengths of longest palindromic subsequence dp = [[0]*n for _ in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. Note the bottom-up approach. for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of the longest palindromic subsequence return dp[0][n-1] # The minimum number of removals lps_length = longest_palindromic_subsequence(s) return n - lps_length"},{"question":"Amanda recently started learning about stock trading and has found an interesting pattern. She observed that on any given day, the closing prices of a stock form a sequence **prices**. Amanda defines a **trend** in this sequence as a contiguous subsequence where every element is either strictly greater than or strictly less than its predecessor. She wants to find the length of the longest **trend** in the sequence. Write a function `longest_trend(prices: List[int]) -> int` that takes a list of integers `prices` representing the closing prices of a stock over several days and returns the length of the longest **trend**. # Input - A list of integers `prices` (2 <= len(prices) <= 1000) where each integer is in the range [1, 10^4]. # Output - A single integer representing the length of the longest **trend**. # Examples ``` Input prices = [1, 2, 3, 2, 1, 5, 6, 7, 8, 5] Output 5 Input prices = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] Output 10 Input prices = [5, 1, 5, 1, 5, 1, 5, 1, 5, 1] Output 2 Input prices = [1, 2, 1, 2, 1, 2, 1, 2] Output 2 ``` # Explanation In the first example, the longest trend is either [1, 2, 3, 2, 1] or [5, 6, 7, 8, 5], both have a length of 5. In the second example, the prices are continuously decreasing, forming a trend of length 10. In the third example, each price alternates, forming trends of length 2. In the fourth example, the prices again alternate, with the longest trend having a length of 2.","solution":"from typing import List def longest_trend(prices: List[int]) -> int: if len(prices) < 2: return len(prices) max_length = 1 current_length = 1 # Determine initial trend trend = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: if trend != 1: trend = 1 current_length = 2 else: current_length += 1 elif prices[i] < prices[i - 1]: if trend != -1: trend = -1 current_length = 2 else: current_length += 1 else: trend = 0 current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"John loves fishing and keeps a log of his fishing trips. Each time John catches a fish, he records it in his log by putting down an integer representing the length of the fish. If he doesn\'t catch any fish on a trip, he records a length of 0 for that trip. Due to some recording errors, John\'s log contains not only valid fish lengths but also some erroneous negative numbers. John remembers that a valid fish length must be a positive integer. Your task is to clean John\'s log by removing all the erroneous entries and then compute the total length of the valid fish John caught. If the resulting log is empty (i.e., if there are no valid fish lengths), the total length should be 0. -----Input----- The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of recorded entries in John\'s log. The second line contains `n` space-separated integers denoting the lengths of the fish recorded by John. -----Output----- Print the total length of valid fish caught by John. -----Examples----- Input 5 10 -2 30 0 15 Output 55 Input 3 -3 -4 -5 Output 0","solution":"def total_length_of_valid_fish(n, fish_lengths): Returns the total length of valid fish from the given list of fish lengths. Valid fish lengths are positive integers. return sum(length for length in fish_lengths if length > 0)"},{"question":"A smart security system has been installed in a museum that monitors the movement of guards. Each guard has a unique path, which can be represented as a string of North (N), South (S), East (E), and West (W) directions. The direction string is given to determine if a guard returns to their starting point after completing their patrol. Write a function to check if a given path leads the guard back to the starting point. If the guard returns to the starting point, output \\"YES\\", otherwise, output \\"NO\\". Input The input consists of a single string \'path\' where each character is either \'N\', \'S\', \'E\', or \'W\'. The length of the string does not exceed 10^5. Output Output \\"YES\\" if the guard returns to the starting point, otherwise output \\"NO\\". Example Input: NS Output: YES Input: NESW Output: YES Input: NWS Output: NO Note: 1. \'N\' and \'S\' are opposite directions. 2. \'E\' and \'W\' are opposite directions.","solution":"def check_return_to_start(path): Returns \\"YES\\" if the guard returns to the starting point after the given path, otherwise \\"NO\\". north_south_balance = 0 east_west_balance = 0 for direction in path: if direction == \'N\': north_south_balance += 1 elif direction == \'S\': north_south_balance -= 1 elif direction == \'E\': east_west_balance += 1 elif direction == \'W\': east_west_balance -= 1 if north_south_balance == 0 and east_west_balance == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string s and a list of words. Your task is to determine which words from the list are subsequences of the string s. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a function to find all such words from the list that are subsequences of the given string. -----Input----- - First line contains a string s consisting of lowercase English letters. (1 ≤ |s| ≤ 10^4) - Second line contains an integer n (1 ≤ n ≤ 10^4) — the number of words in the list. - Each of the next n lines contains a word consisting of lowercase English letters. The total length of the words doesn\'t exceed 10^5. -----Output----- Print the words from the list that are subsequences of the string s. The words should be printed in the order they appear in the input list, each on a new line. If no words are subsequences of s, print \\"NO\\" (without quotes). -----Example----- Input: abcde 3 a bb ace Output: a ace Input: xyz 3 xy z yz Output: xy z yz -----Note----- In the first example, the words \\"a\\" and \\"ace\\" are subsequences of \\"abcde\\", but \\"bb\\" is not. In the second example, all three words \\"xy\\", \\"z\\" and \\"yz\\" are subsequences of \\"xyz\\".","solution":"def is_subsequence(s, word): Checks if \'word\' is a subsequence of \'s\'. it = iter(s) return all(char in it for char in word) def find_subsequences(s, words): Takes a string s and a list of words, returns the words that are subsequences of s. subsequences = [word for word in words if is_subsequence(s, word)] return subsequences if subsequences else [\\"NO\\"]"},{"question":"# Task You are tasked with creating an exotic variant of a Fibonacci sequence called \\"FlexiFibonacci\\". This sequence can start with any two non-negative integers provided by the user and can support variable steps to determine the nth term. Rules 1. The two starting elements (`a` and `b`) of the sequence must be provided as a tuple `(a, b)`. 2. The step (`s`) is provided as an integer. 3. `n` is given as an integer representing the length of the sequence to be generated. 4. When `n` is 0, return an empty list. 5. For any position i ≥ 3, the value at position i is given by the sum of the previous `s` terms in the sequence. Function Signature ```python def flexiFibonacci(start: Tuple[int, int], step: int, n: int) -> List[int]: pass ``` Example ```python flexiFibonacci((0, 1), 2, 6) # returns [0, 1, 1, 2, 3, 5] flexiFibonacci((2, 3), 2, 6) # returns [2, 3, 5, 8, 13, 21] flexiFibonacci((1, 1), 3, 7) # returns [1, 1, 2, 4, 7, 13, 24] ``` Explanation For `flexiFibonacci((0, 1), 2, 6)`: - First two fixed elements: `[0, 1]` - 3rd element: sum of last 2 elements = `0 + 1 = 1` - 4th element: sum of last 2 elements = `1 + 1 = 2` - 5th element: sum of last 2 elements = `1 + 2 = 3` - 6th element: sum of last 2 elements = `2 + 3 = 5` For `flexiFibonacci((1, 1), 3, 7)`: - First two fixed elements: `[1, 1]` - 3rd element: sum of last 3 elements (1+1+0, the missing value is considered 0 by default) = `1 + 1 + 0 = 2` - 4th element: sum of last 3 elements = `1 + 1 + 2 = 4` - 5th element: sum of last 3 elements = `1 + 2 + 4 = 7` - 6th element: sum of last 3 elements = `2 + 4 + 7 = 13` - 7th element: sum of last 3 elements = `4 + 7 + 13 = 24`","solution":"from typing import List, Tuple def flexiFibonacci(start: Tuple[int, int], step: int, n: int) -> List[int]: if n == 0: return [] elif n == 1: return [start[0]] elif n == 2: return [start[0], start[1]] sequence = [start[0], start[1]] for i in range(2, n): sum_value = sum(sequence[max(0, i-step):i]) sequence.append(sum_value) return sequence"},{"question":"Implement a function that takes a string as input and returns a Boolean indicating whether the string is a valid palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. For example, \\"A man, a plan, a canal: Panama\\" is a valid palindrome.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, considering only alphanumeric characters and ignoring cases. import re # Remove non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is the same backwards return cleaned_str == cleaned_str[::-1]"},{"question":"A trucking company needs to transport goods from one warehouse to another. The distance between two warehouses is recorded as a mileage matrix, where the element at the i^{th} row and j^{th} column represents the mileage from warehouse i to warehouse j. The company wants to find the most efficient way to connect these warehouses in a path such that the total mileage cost is minimized. However, they must ensure that no warehouse appears more than once in the path (i.e., it\'s not a loop), and every warehouse is visited exactly once. Given the number of warehouses n and the mileage matrix, write a function that returns the minimum mileage cost to connect all the warehouses in the desired path. Function Description Complete the trucking_company function in the editor below. It should return an integer that represents the minimum mileage cost to connect all the warehouses. trucking_company has the following parameter(s): - distances: a 2D integer array where each element at index [i,j] represents the mileage between warehouse i and warehouse j Input Format The first line contains an integer n (the number of warehouses). Each of the next n lines contains n space-separated integers representing the mileage matrix. Constraints 2 leq n leq 10 1 leq text{distances}[i][j] leq 1000 Output Format Print a single integer denoting the minimum mileage cost to connect all the warehouses. Sample Input 0 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output 0 80 Explanation 0 There are 4 warehouses with their respective mileage costs. The route that provides the minimum mileage cost can be Warehouse 0 -> Warehouse 1 -> Warehouse 3 -> Warehouse 2 -> Warehouse 0 with a total mileage cost of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def trucking_company(distances): n = len(distances) min_cost = float(\'inf\') perms = itertools.permutations(range(n)) for perm in perms: current_cost = 0 for i in range(n - 1): current_cost += distances[perm[i]][perm[i + 1]] current_cost += distances[perm[-1]][perm[0]] # Return to the starting warehouse min_cost = min(min_cost, current_cost) return min_cost"},{"question":"Given an array of integers where each element represents the altitude of a mountain range at that position, you need to determine the number of \\"peaks\\" in the array. A peak is defined as an element that is strictly greater than its neighbors. To clarify, an element `a[i]` is considered a peak if and only if `a[i] > a[i-1]` and `a[i] > a[i+1]`. Note that the first and last elements of the array cannot be peaks since they have only one neighbor. # Input The input line contains: - A single integer, n (3 ≤ n ≤ 10^6), denoting the number of elements in the array. - A space-separated list of n integers representing the altitudes. # Output The output should be a single integer, the number of peaks in the array. # Examples **Input:** `5` `1 3 2 4 1` **Output:** `2` **Explanation:** - The element `3` at index `1` is a peak because it is greater than its neighbors `1` and `2`. - The element `4` at index `3` is a peak because it is greater than its neighbors `2` and `1`. Thus, there are 2 peaks in the array. **Input:** `7` `1 2 3 4 3 2 1` **Output:** `1` **Explanation:** - The element `4` at index `3` is the only peak because it is greater than its neighbors `3` and `3`. Thus, there is 1 peak in the array. # Note - The number of peaks in the array varies based on the pattern of the altitudes provided. - Ensure that your solution handles the upper limit efficiently.","solution":"def find_number_of_peaks(n, arr): Returns the number of peaks in the given array of altitudes. Parameters: n (int): The number of elements in the array. arr (list): A list of integers representing the altitudes. Returns: int: The number of peaks in the array. peaks = 0 for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peaks += 1 return peaks"},{"question":"In a kingdom with N different types of magical items, you are tasked with arranging a grand festival. Each magic item must be placed in a distinct position in a straight line. However, the magic items have certain compatibility properties. Specifically, each type of magical item can only be placed next to certain other types, as specified by compatibility rules. ---Input--- - The first line of the input contains an integer N, the number of different types of magical items. - The second line contains N integers, where the i-th integer indicates the total number of other types of items that the i-th item is compatible with. - The following N lines each contain a list of integers. The i-th line starts with an integer K (the number of compatible items for item i) followed by K distinct integers, which are the types of items that item i can be placed next to. ---Output--- Output a single line containing \\"Yes\\" if it is possible to arrange all magic items in a straight line according to their compatibility rules, or \\"No\\" if it is not possible. ---Constraints--- - 1 ≤ N ≤ 1000 - 0 ≤ K ≤ N-1 ---Subtasks--- Subtask #1 : (50 points) - 1 ≤ N ≤ 10 Subtask #2 : (50 points) - Original Constraints ---Example--- Input: 4 1 1 2 1 1 2 1 3 2 1 4 1 3 Output: Yes ---Explanation--- Example case 1: One possible arrangement is: 1 - 2 - 3 - 4. Each item is next to its compatible items. Item 1 is next to 2, item 2 is next to 3, item 3 is next to 1 and 4, and item 4 is next to 3.","solution":"def is_possible_arrangement(N, compatibility_counts, compatibility_rules): from collections import defaultdict, deque # Build the adjacency list for compatibility graph compat_graph = defaultdict(list) for i in range(N): for compatible_item in compatibility_rules[i]: compat_graph[i].append(compatible_item - 1) # Convert 1-based to 0-based indexing compat_graph[compatible_item - 1].append(i) # Use BFS to check if the graph is connected def bfs(start): visited = [False] * N queue = deque([start]) visited[start] = True component_size = 0 while queue: node = queue.popleft() component_size += 1 for neighbor in compat_graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_size # Check for connectivity of the graph component_size = bfs(0) if component_size == N: return \\"Yes\\" else: return \\"No\\""},{"question":"In the land of Rectangulia, King Recta has a beautiful rectangular garden which he wants to divide into smaller identical rectangular sections for his gardeners. The dimensions of the garden are given as n by m. Each gardener should receive a section which is also rectangular and of equal integer dimensions a by b. King Recta wants to maximize the area of each smaller section while ensuring that the entire garden is covered exactly by these smaller sections, without any leftover space. Given the dimensions of the garden, can you help King Recta find the dimensions of the largest possible smaller section that the gardeners will receive? Input The first line of input contains two integers n and m, representing the number of rows and columns in the garden respectively. (1 ≤ n, m ≤ 10^6) Output Output two integers a and b, representing the dimensions of the largest possible smaller rectangular section that can evenly divide the garden. Example Input 12 15 Output 3 3 Explanation In this example, the garden dimensions 12x15 can be evenly divided into smaller sections each of size 3x3, which is the largest possible area for such sections. Input 7 14 Output 1 14 Explanation In this example, the garden dimensions 7x14 can be evenly divided into smaller sections each of size 1x14, which is the largest possible area for such sections.","solution":"import math def largest_rectangular_section(n, m): Finds the dimensions of the largest possible smaller rectangular section that can evenly divide the garden of dimensions n by m. Parameters: n (int): The number of rows in the garden. m (int): The number of columns in the garden. Returns: tuple: The dimensions of the largest rectangular section. gcd = math.gcd(n, m) return (gcd, gcd)"},{"question":"Write a function `flatten_list(nested_list)` that takes a list of lists of integers, and returns a flattened list (a list with all the integers at the same level). You can assume that the input will always be a list of lists of integers (no empty lists, strings, or mixed types). The order of elements in the flattened list should be the same as in the input nested list. A few examples: ```python flatten_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) # returns [1, 2, 3, 4, 5, 6, 7, 8, 9] flatten_list([[10, 20], [30], [40, 50, 60]]) # returns [10, 20, 30, 40, 50, 60] flatten_list([[5], [1, 2], [3, 4]]) # returns [5, 1, 2, 3, 4] ``` Do not use built-in functions such as `sum()` to perform the flattening operation. Be sure to maintain the order of elements as they appeared in the original nested list.","solution":"def flatten_list(nested_list): Flattens a list of lists of integers into a single list of integers. Args: nested_list (list of lists of int): The list of lists to flatten. Returns: list of int: The flattened list. flat_list = [] for sublist in nested_list: for item in sublist: flat_list.append(item) return flat_list"},{"question":"Among a list of unique integers, find two distinct integers such that their sum is equal to a given target integer. If there are multiple pairs, report the pair with the smallest first integer; if there are still multiple pairs, report the one with the smallest second integer. If no such pairs exist, return -1. -----Constraints----- - 1 ≤ the number of elements in the list ≤ 100 - 1 ≤ each integer in the list ≤ 100 - Integers in the list are unique. - The target integer is within the range 2 to 200. -----Input----- Input is given from standard input in the following format: target n list of n unique integers (space-separated) -----Output----- Print the two integers forming the pair, space-separated; otherwise, print -1 if no such pair exists. -----Sample Input----- 9 5 1 4 5 7 3 -----Sample Output----- 4 5 Among the integers 1, 4, 5, 7, 3, the pair whose sum is 9 is (4, 5).","solution":"def find_pair_with_sum(target, numbers): Finds and returns the pair of distinct integers from the list that add up to the target, with prioritization on the smallest first integer, then the smallest second integer. Returns -1 if no such pair exists. numbers.sort() num_set = set(numbers) for num in numbers: complement = target - num if complement in num_set and complement != num: return num, complement return -1 # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() target = int(data[0]) n = int(data[1]) numbers = list(map(int, data[2:2+n])) result = find_pair_with_sum(target, numbers) if result == -1: print(result) else: print(result[0], result[1])"},{"question":"You are given an integer array of length n consisting of positive integers. You can perform a specified operation on the array exactly once: choose any two indices i and j such that 1 le i, j le n and add the value of the element at index j to the element at index i. Your task is to determine the maximum possible value of any element in the array after performing the operation exactly once. For example, let\'s consider the array [3, 8, 2, 5]. The maximum possible value we can obtain is 13 by adding the value at index 2 to the value at index 1, which makes the array [11, 8, 2, 5], then adding the value at index 1 to the value at index 2, which makes the array [11, 13, 2, 5]. Another example is [1, 2, 3]. The maximum possible value we can obtain is 5 by adding the value at index 2 to the value at index 3, which makes the array [1, 2, 5]. -----Input----- The first line of the input contains one integer q (1 le q le 100) — the number of test cases. Then q test cases follow. The first line of each test case contains one integer n (2 le n le 100) — the number of elements in the array. The second line of each test case contains n positive integers — the elements of the array. -----Output----- For each test case, print the answer for it — the maximum possible value of any element in the array after performing the operation exactly once. -----Example----- Input 3 4 3 8 2 5 3 1 2 3 2 7 4 Output 13 5 11","solution":"def max_possible_value_after_operation(arr): Given an integer array, determine the maximum possible value of any element in the array after performing exactly one operation: choose any two indices i and j such that 1 <= i, j <= n and add the value of the element at index j to the element at index i. Args: arr (list): List of positive integers Returns: int: Maximum possible value of any element in the array after one operation max_val = 0 n = len(arr) for i in range(n): for j in range(n): if i != j: max_val = max(max_val, arr[i] + arr[j]) return max_val def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(max_possible_value_after_operation(arr)) return results"},{"question":"Alan is a software developer at TechCorp, and he\'s been assigned to optimize their existing system. The system logs events in two formats: `START` and `END`, where each `START` marks the beginning of an event and each `END` signifies the ending of an event started by the most recent `START`. Unfortunately, TechCorp often faces issues with incomplete logs, where there are more `START`s than `END`s, or vice versa. Alan needs a robust function to check if a given event log is balanced. Write a function `is_balanced(log)` that takes a list of strings, `log`, where each string is either `\\"START\\"` or `\\"END\\"`. The function should return `True` if the log is balanced (i.e., the number of `START`s is equal to the number of `END`s and for every `END` there is a corresponding `START` that happened before it) and `False` otherwise. -----Input----- A list of strings `log` where each string is either `\\"START\\"` or `\\"END\\"`. The length of the list is up to 10^5. -----Output----- A boolean value indicating whether the event log is balanced or not. -----Examples----- Input log = [\\"START\\", \\"START\\", \\"END\\", \\"END\\"] Output True Input log = [\\"START\\", \\"END\\", \\"END\\"] Output False Input log = [\\"START\\", \\"START\\", \\"END\\"] Output False Input log = [\\"END\\", \\"START\\", \\"END\\"] Output False -----Note----- In the first example: There are two `START`s and two `END`s. Each `END` has a corresponding `START`, making the log balanced. In the second example: There are two `END`s for one `START`, making the log unbalanced. In the third example: There is one missing `END` for one of the two `START`s, making the log unbalanced. In the fourth example: An `END` appears without a preceding `START`, making the log unbalanced.","solution":"def is_balanced(log): Check if the log is balanced. Args: log: List of strings. Each string is either \\"START\\" or \\"END\\". Returns: bool: True if the log is balanced, False otherwise. start_count = 0 for event in log: if event == \\"START\\": start_count += 1 elif event == \\"END\\": if start_count == 0: return False start_count -= 1 return start_count == 0"},{"question":"During a recent hackathon, there was a coding problem with an unusual scoring system. For each participant, there is a problem worth Y points in total. The problem consists of exactly M sub-problems, and each sub-problem is worth the same number of points. Participant A managed to solve K sub-problems among them. Calculate Participant A\'s score. NOTE: See sample explanation for more clarity. ------ Input Format ------ - The first line will contain S, the number of participants. Then the score details follow. - Each score detail contains a single line of input, three integers Y, M, and K, the total points, the number of sub-problems, and the number of sub-problems solved by Participant A. ------ Output Format ------ For each participant, output the score obtained by Participant A. ------ Constraints ------ 1 ≤ S ≤ 100 1 ≤ Y ≤ 300 1 ≤ M ≤ 20 0 ≤ K ≤ M Y is a multiple of M. ----- Sample Input 1 ------ 3 90 5 3 200 10 6 150 15 7 ----- Sample Output 1 ------ 54 120 70 ----- Explanation 1 ------ Test Case 1: The problem is worth 90 points and since there are 5 sub-problems, each sub-problem is worth 18 points. Since Participant A solves 3 sub-problems, the score will be 18 cdot 3 = 54 points. Test Case 2: The problem is worth 200 points and since there are 10 sub-problems, each sub-problem is worth 20 points. Since Participant A solves 6 sub-problems, the score will be 20 cdot 6 = 120 points. Test Case 3: The problem is worth 150 points and since there are 15 sub-problems, each sub-problem is worth 10 points. Since Participant A solves 7 sub-problems, the score will be 10 cdot 7 = 70 points.","solution":"def calculate_scores(num_participants, scores_details): Calculate the score of each participant based on the given scoring system. :param num_participants: The number of participants :param scores_details: List of tuples, each containing Y, M, and K :return: List of scores for each participant results = [] for details in scores_details: Y, M, K = details points_per_subproblem = Y // M score = points_per_subproblem * K results.append(score) return results"},{"question":"Given an undirected graph with weighted edges, find the shortest path between two nodes if only even-weighted edges are considered. -----Input----- The first line contains three integers n (2 leq n leq 100) and m (1 leq m leq 1000) indicating the number of nodes and edges in the graph, respectively. The following m lines describe each edge in the graph. Each edge is represented by three integers u, v (1 leq u, v leq n) and w (1 leq w leq 1000) denoting the two nodes connected by the edge and the weight of the edge. The last line contains two integers s and t (1 leq s, t leq n) which are the source and destination nodes. -----Output----- Print a single integer which is the length of the shortest path from node s to node t using only even-weighted edges. If there is no path between the two nodes under these conditions, print -1. -----Examples----- Sample Input 1: 5 6 1 2 10 1 3 15 2 3 12 2 4 20 3 4 18 4 5 2 1 5 Sample Output 1: 32 Sample Input 2: 4 4 1 2 5 2 3 7 3 4 9 4 1 11 1 4 Sample Output 2: -1","solution":"import heapq def shortest_even_path(n, m, edges, s, t): Finds the shortest path between two nodes in an undirected graph considering only even-weighted edges. Parameters: n (int): The number of nodes in the graph. m (int): The number of edges in the graph. edges (list of tuples): List of edges where each tuple contains (u, v, w) representing an edge between nodes u and v with weight w. s (int): The source node. t (int): The destination node. Returns: int: The length of the shortest path from node s to node t using only even-weighted edges. Returns -1 if no such path exists. # adjacency list: { node: [(neighbour, weight), ...] } adj = {i: [] for i in range(1, n + 1)} for u, v, w in edges: if w % 2 == 0: adj[u].append((v, w)) adj[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, s)] # (cost, node) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[s] = 0 visited = set() while pq: d, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for v, weight in adj[u]: if v not in visited and d + weight < dist[v]: dist[v] = d + weight heapq.heappush(pq, (dist[v], v)) return dist[t] if dist[t] != float(\'inf\') else -1"},{"question":"Time Limit: 6 sec / Memory Limit: 128 MB Given a list of integers, write a program to calculate the sum of all unique prime factors of numbers in the list. A prime factor is a factor that is a prime number. # Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of elements in the list. The second line contains `n` integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> (1 ≤ a<sub>i</sub> ≤ 10<sup>6</sup>), the elements of the list. # Output Print a single integer, the sum of all unique prime factors of the numbers in the list. # Example Input ``` 3 12 15 35 ``` Output ``` 17 ``` # Explanation The prime factors of `12` are `2` and `3`. The prime factors of `15` are `3` and `5`. The prime factors of `35` are `5` and `7`. The unique prime factors are `2`, `3`, `5`, and `7`. Their sum is `2 + 3 + 5 + 7 = 17`.","solution":"def sum_of_unique_prime_factors(n, numbers): def sieve(max_num): primes = [] is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False for i in range(2, max_num + 1): if is_prime[i]: primes.append(i) for j in range(i * i, max_num + 1, i): is_prime[j] = False return primes max_num = max(numbers) primes = sieve(max_num) unique_prime_factors = set() for num in numbers: temp = num for prime in primes: if prime * prime > temp: break if temp % prime == 0: unique_prime_factors.add(prime) while temp % prime == 0: temp //= prime if temp > 1: unique_prime_factors.add(temp) return sum(unique_prime_factors)"},{"question":"A company is organizing a team building activity where n employees will participate. They need to split into groups such that each group has an equal number of employees. However, some employees are friends and must be in the same group. Additionally, the company has a constraint on the maximum number of employees that any group can have. You are given the employees and their friendships, and your task is to determine if it is possible to split all n employees into groups following these constraints. If it is possible, output the size of the groups. If it\'s not possible, output -1. Write a function that takes the following parameters: - n: the number of employees (2 ≤ n ≤ 100). - max_size: the maximum number of employees that any group can have (2 ≤ max_size ≤ n). - friendships: a list of pairs, where each pair [u, v] means that employee u and employee v are friends and must be in the same group (0 ≤ len(friendships) ≤ n * (n - 1) / 2). The function should return a list of integers representing the size of each group or -1 if such a grouping is not possible. Function Signature: ```python def split_into_groups(n: int, max_size: int, friendships: List[List[int]]) -> Union[List[int], int]: ``` Example: ```python n = 5 max_size = 3 friendships = [[1, 2], [3, 4], [4, 5]] # Possible valid group sizes are [3, 2]. Employee 1 and 2 in one group, and 3, 4, 5 in another group. print(split_into_groups(n, max_size, friendships)) # Output: [3, 2] n = 4 max_size = 2 friendships = [[1, 2], [2, 3], [3, 4]] # All employees are friends directly or indirectly through other friends. print(split_into_groups(n, max_size, friendships)) # Output: -1 ``` Explanation: In the first example, you can form groups [1, 2] and [3, 4, 5] which satisfy the conditions. In the second example, all employees are interconnected and the max_size constraint of 2 cannot be satisfied. Note: Employees are indexed from 1 to n.","solution":"from typing import List, Union from collections import defaultdict, deque def split_into_groups(n: int, max_size: int, friendships: List[List[int]]) -> Union[List[int], int]: def bfs(start): queue = deque([start]) component = [] visited.add(start) while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return component graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) visited = set() components = [] for employee in range(1, n + 1): if employee not in visited: component = bfs(employee) components.append(component) group_sizes = [len(component) for component in components] if any(size > max_size for size in group_sizes): return -1 return group_sizes"},{"question":"Professor Bumblebee has a fascinating research project on honeybee movements between flowers in a field. He has understood that honeybees can change their current position based on a precise set of steps. Given two integers, h and v, the possible moves of the honeybee are defined as follows: (x, y) rightarrow (x + h, y + v) (x, y) rightarrow (x + h, y - v) (x, y) rightarrow (x - h, y + v) (x, y) rightarrow (x - h, y - v) The initial position of the honeybee is (b_x, b_y) and the target flower position is (f_x, f_y). Your task is to help Professor Bumblebee determine if the honeybee can reach the target flower from its initial position using any sequence of these moves. If it is possible, print \\"POSSIBLE\\"; otherwise, print \\"IMPOSSIBLE\\" (without quotes). The honeybee can use the moves any number of times. -----Input----- The first line contains four integer numbers b_x, b_y, f_x, f_y (-10^6 leq b_x, b_y, f_x, f_y leq 10^6) — the initial position of the honeybee and the target flower position, respectively. The second line contains two integer numbers h, v (1 ≤ h, v ≤ 10^6) — the values defining the moves of the honeybee. -----Output----- Print \\"POSSIBLE\\" if the honeybee can reach the target flower; otherwise, print \\"IMPOSSIBLE\\" (without quotes). -----Examples----- Input 1 1 4 7 3 2 Output POSSIBLE Input 0 0 5 5 2 4 Output IMPOSSIBLE -----Note----- In the first example, there exists a sequence of moves: (1,1) rightarrow (4,3) — the first type of move (4,3) rightarrow (1,5) — the fourth type of move (1,5) rightarrow (4,7) — the fourth type of move In the second example, no sequence of moves can transition the honeybee from (0,0) to (5,5).","solution":"def honeybee_movement_possible(bx, by, fx, fy, h, v): Determines if the honeybee can reach the target flower position from its initial position using the given moves. :param bx: initial x-coordinate of the honeybee :param by: initial y-coordinate of the honeybee :param fx: x-coordinate of the target flower :param fy: y-coordinate of the target flower :param h: horizontal move :param v: vertical move :return: \\"POSSIBLE\\" if the honeybee can reach the target flower, otherwise \\"IMPOSSIBLE\\" dx = abs(fx - bx) dy = abs(fy - by) # Check if both dx and dy are multiples of h and v respectively if dx % h == 0 and dy % v == 0: # Check if the number of steps taken in each direction have the same parity (both even or both odd) if (dx // h) % 2 == (dy // v) % 2: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"A group of wildlife biologists is conducting a study on the movement patterns of a rare species of bird. They have placed tracking devices on several birds and want to analyze the data to determine various characteristics about the birds\' movements. The tracking devices provide a sequence of 2D coordinates representing the birds\' positions at different points in time. One particular aspect the biologists are interested in is detecting whether a bird has revisited the same location during its tracking period. They define a revisited location as a position that appears more than once in the sequence of coordinates. Please write a program to help the biologists determine if there are any revisited locations for a bird given its tracking data. Input The input contains one test case. The test case has the following format: N x1 y1 x2 y2 ... xN yN N is an integer that indicates the number of recorded positions of the bird. (2 ≤ N ≤ 10000) Each xi, yi pair represents the coordinates of the i-th recorded position of the bird (-10000 ≤ xi, yi ≤ 10000). Output Print \\"YES\\" if there is at least one revisited location. Otherwise, print \\"NO\\". Example Input 5 1 2 3 4 1 2 5 6 7 8 Output YES Input 4 0 0 1 1 2 2 3 3 Output NO In the first example, the bird revisits the location (1, 2), while in the second example, the bird does not revisit any location.","solution":"def has_revisited_location(data): Determine if any position in the tracking data is revisited. Parameters: data (list): List of integers representing the input data. Returns: str: \\"YES\\" if there is at least one revisited location, otherwise \\"NO\\". N = data[0] positions = set() for i in range(1, 2*N, 2): pos = (data[i], data[i+1]) if pos in positions: return \\"YES\\" positions.add(pos) return \\"NO\\""},{"question":"Given a list of integers, you are to find and print the sum of the first k smallest numbers in the list. -----Input----- n – the number of integers in the list (1 <= n <= 10^6), followed by the list of n integers on the next line (-10^6 <= integers <= 10^6). k – an integer (1 <= k <= n) indicating the number of smallest integers to sum. -----Output----- Output the sum of the first k smallest integers in the given list. -----Example----- Input: 6 3 1 5 9 2 8 3 Output: 6","solution":"def sum_of_k_smallest_numbers(n, array, k): Returns the sum of the first k smallest numbers in the given array. array.sort() return sum(array[:k])"},{"question":"You are given a list of numbers. Your task is to find the two distinct numbers in the list that sum up to a given target number. Input An integer array of the numbers and an integer representing the target sum. Output Output should be in the format: Number1 Number2 where Number1 and Number2 are the two distinct integers from the list that add up to the target sum. The numbers must be listed in ascending order. If there are multiple pairs, return the pair with the smallest Number1. If no such pair exists, output \\"No valid pair found\\". Constrains 2 ≤ N ≤ 1000 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ T ≤ 10^9 where N is the number of integers in the list and T is the target sum. A[i] represents an integer from the list. Note The input list may contain duplicate elements. SAMPLE INPUT [10, 20, 10, 40, 50, 60, 70] 50 SAMPLE OUTPUT 10 40 Explanation In Sample Input: [10, 20, 10, 40, 50, 60, 70] 50 The pairs from the input list that sum to target number 50 are (10, 40) and (20, 30) among others. The pair (10, 40) should be selected as it contains the smallest number (10) as the first element. So the output is: 10 40 In another example: SAMPLE INPUT: [1, 2, 3, 4, 5] 10 SAMPLE OUTPUT: No valid pair found Here, there are no pairs that sum up to 10.","solution":"def find_pair(arr, target): This function finds two distinct numbers in the list that sum up to a given target number. If there are multiple pairs, it returns the pair with the smallest Number1 in ascending order. If no such pair exists, returns \\"No valid pair found\\". nums = sorted(arr) num_set = set(nums) for i in range(len(nums) - 1): complement = target - nums[i] if complement in num_set and complement != nums[i]: return f\\"{min(nums[i], complement)} {max(nums[i], complement)}\\" return \\"No valid pair found\\""},{"question":"You are given a grid of size `m x n` filled with non-negative numbers. Write a function `findLongestIncreasingPath(grid)` that finds the length of the longest increasing path in the grid. Each cell can move in four directions (up, down, left, right) to another cell with a higher number. You cannot move diagonally or move outside the boundary (i.e., wrap-around is not allowed). # Function Signature: ```python def findLongestIncreasingPath(grid: List[List[int]]) -> int: ``` # Input: - `grid`: A 2D list of integers representing the grid (1 ≤ m, n ≤ 1000, 0 ≤ grid[i][j] ≤ 10^4). # Output: - An integer representing the length of the longest increasing path. # Example: ```python grid = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] print(findLongestIncreasingPath(grid)) # Output: 4 (The path is [1, 2, 6, 9]) grid = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] print(findLongestIncreasingPath(grid)) # Output: 4 (The path is [3, 4, 5, 6]) ``` # Constraints: - You may assume that all cells\' values are integers. - The path search should be optimized to run within a reasonable time frame for the worst-case scenario (given the constraints). # Notes: - A depth-first search (DFS) approach combined with memoization to store the length of the longest increasing path starting from each cell can be effective for this problem. - You should consider edge cases where the grid is of minimum size `1x1` or where all the values are equal. For a `1x1` grid, the output should be `1`. For a grid where all values are equal, the path length should be `1` since no increasing path can be formed.","solution":"from typing import List def findLongestIncreasingPath(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) memo = [[-1] * n for _ in range(m)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(i, j): if memo[i][j] != -1: return memo[i][j] max_path = 1 for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n and grid[ni][nj] > grid[i][j]: max_path = max(max_path, 1 + dfs(ni, nj)) memo[i][j] = max_path return max_path longest_path = 0 for i in range(m): for j in range(n): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Moamen is given an array of n distinct integers and an integer k. He wants to determine if he can divide this array into exactly k non-empty contiguously sorted subarrays (subarrays that maintain the same relative order as in the original array) such that each subarray is in strictly increasing order, and no extra elements are added or removed. The final goal is to verify whether these k subarrays combine to form the original array sorted in strictly increasing order. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The subsequent lines describe each test case: The first line of each test case contains two integers n and k (1 le k le n le 10^5). The second line contains n integers denoting the array a = [a_1, a_2, ldots, a_n] (|a_i| le 10^9, all integers are distinct). The sum of n over all test cases does not exceed 3 cdot 10^5. -----Output----- For each test case, output a single string: If Moamen can divide the array into exactly k contiguously sorted subarrays that combine to form the original array sorted in strictly increasing order, output \\"POSSIBLE\\" (without quotes). Otherwise, output \\"IMPOSSIBLE\\" (without quotes). You may print each letter of \\"POSSIBLE\\" and \\"IMPOSSIBLE\\" in any case (upper or lower). -----Examples----- Input 3 5 3 1 5 3 4 2 4 2 2 4 1 3 6 1 10 20 30 40 50 60 Output Impossible Impossible Possible -----Note----- In the first test case, if we divide the array into k = 3 subarrays, the possible subarrays could be [1, 5], [3, 4], [2]. It\'s impossible to rearrange these subarrays to form a single sorted array. In the second test case, dividing the array into k = 2 subarrays is also impossible as the inherent disorder cannot be resolved with just two subarrays. In the third test case, the array is already sorted, and since k = 1, it forms a single sorted subarray by itself. Hence, the output is \\"Possible\\".","solution":"def check_possible_division(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] if k == 1: results.append(\\"POSSIBLE\\" if sorted(a) == a else \\"IMPOSSIBLE\\") continue index_map = {value: index for index, value in enumerate(a)} sorted_a = sorted(a) segments = 1 for j in range(1, n): if index_map[sorted_a[j]] != index_map[sorted_a[j - 1]] + 1: segments += 1 if segments > k: break results.append(\\"POSSIBLE\\" if segments <= k else \\"IMPOSSIBLE\\") return results"},{"question":"# Task You are given a string which contains only lowercase letters and question marks. You need to replace every question mark with a letter such that no letter is repeated consecutively. If there are multiple solutions, return any one of them. # Example For the input string `s = \\"a?b?c?d\\"`, one possible output is `\\"azbyczd\\"`. For the input string `s = \\"????\\"`, one possible output is `\\"abab\\"`. For the input string `s = \\"a?a?a\\"`, one possible output is `\\"ababa\\"`. # Input/Output - `[input]` string `s` Constraints: 1 ≤ s.length ≤ 100 - `[output]` a string","solution":"def replace_question_marks(s): Replaces every question mark in the string with a letter such that no letter is repeated consecutively. s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': for letter in \'abc\': if (i - 1 >= 0 and s[i - 1] == letter) or (i + 1 < n and s[i + 1] == letter): continue s[i] = letter break return \\"\\".join(s)"},{"question":"Given an array of integers, your task is to return a list of all unique triplets in the array which gives the sum of zero. Note that the solution set must not contain duplicate triplets. ```python def three_sum(nums): :type nums: List[int] :rtype: List[List[int]] # Implement your solution here # Example print(three_sum([-1, 0, 1, 2, -1, -4])) # Output: [[-1, 0, 1], [-1, -1, 2]] ``` The array could contain both positive and negative integers. Note: - The order of the triplets and the numbers in each triplet does not matter. - The original array may contain duplicate numbers, but the duplicate triplets should be excluded in the result.","solution":"def three_sum(nums): Returns a list of all unique triplets in the array which gives the sum of zero. :type nums: List[int] :rtype: List[List[int]] nums.sort() result = [] n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i-1]: # Avoid duplicate for the first number continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: # Avoid duplicate for the second number left += 1 while left < right and nums[right] == nums[right - 1]: # Avoid duplicate for the third number right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"Develop a program that simulates a transportation scheduling system for a shared ride service. Each trip has a fixed capacity of C seats, and there are N passengers wishing to travel, each with a specific pickup location and drop-off location. The goal is to group passengers into the fewest number of trips while maintaining the order of their requests. Each passenger provides their pickup and drop-off locations in the form of d_i and a_i, respectively. A passenger cannot be dropped off before all other passengers on the same trip whose destination is before their drop-off point. Furthermore, the service needs to ensure that the trips can accommodate the seating capacity and that the order of pickups and drop-offs respects the sequence in which passengers made their requests. -----Input----- The first line of input will contain integers N and C (1 ≤ N ≤ 10^5, 1 ≤ C ≤ 10^5), the number of passengers and the number of seats available per trip, respectively. N lines follow. The i-th such line contains integers d_i and a_i (1 ≤ d_i, a_i ≤ 10^9), the pickup and drop-off locations of the i-th passenger, respectively. -----Output----- Print the minimum number of trips required to accommodate all passengers in such a way that the pickup and drop-off order is respected, and no trip exceeds its seat capacity. -----Examples----- Input 4 3 1 5 2 6 3 7 4 8 Output 2 Input 3 2 1 3 2 5 4 6 Output 2 Input 5 5 1 10 2 9 3 8 4 7 5 6 Output 1 Input 5 3 1 7 2 6 3 5 4 9 5 10 Output 2 -----Note----- In the first example, passengers with destinations (1, 5), (2, 6), and (3, 7) can be grouped into one trip, and (4, 8) requires a second trip since it exceeds the seating capacity if combined with others.","solution":"def min_trips(N, C, passengers): Given the number of passengers and seating capacity, this function calculates the minimum number of trips required. passengers.sort() trips = 0 i = 0 while i < len(passengers): count = 1 end = passengers[i][1] trips += 1 while i + 1 < len(passengers) and count < C and passengers[i + 1][0] <= end: i += 1 count += 1 end = max(end, passengers[i][1]) i += 1 return trips # Function to handle main input/output def transportation_scheduling(N, C, pickup_dropoff_list): passengers = [(pickup_dropoff_list[i][0], pickup_dropoff_list[i][1]) for i in range(N)] return min_trips(N, C, passengers)"},{"question":"Write a function that takes two strings, S and P, and returns True if S is a rotated version of P, and False otherwise. A string S is a rotated version of P if S can be obtained by rotating P by any number of positions. Constraints * 1 ≤ length of S, P ≤ 1000 * S and P consist of alphabetical characters only Input Two strings S and P are given on separate lines. Output True or False Examples Input amazon azonam Output True Input hello ohlle Output False Input rotation tationro Output True","solution":"def is_rotated_version(S, P): Checks if S is a rotated version of P. Parameters: S (str): The string to be checked. P (str): The original string. Returns: bool: True if S is a rotated version of P, False otherwise. if len(S) != len(P): return False concatenated = P + P return S in concatenated"},{"question":"Simon loves grid-based puzzles. One of his favorites involves finding the shortest path in a maze represented by a matrix. Each cell can either be a path or a wall, and Simon can move up, down, left, or right between adjacent cells that are paths. Given the start and end points in the maze, help Simon find the shortest path from the start to the end. If no such path exists, return -1. -----Input:----- The first line of the input contains two integers NN and MM denoting the dimensions of the maze. The next NN lines each contain MM characters representing the maze, where \'.\' denotes a path and \'#\' denotes a wall. The last line contains four integers sx, sy, ex, ey denoting the start and end coordinates (0-indexed). -----Output:----- Print a single integer indicating the length of the shortest path from (sx, sy) to (ex, ey). If no path exists, print -1. -----Constraints----- - 1 ≤ N, M ≤ 10001 leq N, M leq 1000 - The maze guaranteed to have at most one start and one end point, and they are on the pathways (not walls). -----Sample Input:----- 5 5 ..... .#. ..#.. .#. ..... 0 0 4 4 -----Sample Output:----- 8 -----EXPLANATION:----- ExampleExample case: The shortest path from (0, 0) to (4, 4) is of length 8 and can be represented by the sequence of coordinates: (0,0) → (1,0) → (2,0) → (2,1) → (2,2) → (3,2) → (4,2) → (4,3) → (4,4). In this example, Simon successfully moves through the maze in an optimal number of steps to reach his destination.","solution":"from collections import deque def shortest_path_in_maze(N, M, maze, sx, sy, ex, ey): if (sx, sy) == (ex, ey): # Start and end are the same return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sx, sy, 0)]) # (x, y, steps) visited = [[False] * M for _ in range(N)] visited[sx][sy] = True while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and maze[nx][ny] == \'.\': if (nx, ny) == (ex, ey): return steps + 1 visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1"},{"question":"Amy has a passion for exploring numerical patterns and number theory. One day, she stumbled upon a series of equations involving a special set of numbers called Perfect Numbers. A Perfect Number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example, 6 is a Perfect Number because its divisors (excluding itself) are 1, 2, and 3, and their sum is 6 (1+2+3). Amy is intrigued and wants to find out how many Perfect Numbers exist up to a given number N. She needs your help to write an efficient program that will calculate the count of Perfect Numbers less than or equal to N for multiple test cases. **Input:** - The first line contains a single integer T, denoting the number of test cases. - Each of the next T lines contains a single integer N (1 ≤ N ≤ 10^6). **Output:** - For each test case, print the count of Perfect Numbers that are less than or equal to N. **Constraints:** - 1 ≤ T ≤ 10^5 **Example Input:** 4 6 28 100 500 **Example Output:** 1 2 2 3 **Explanation:** - For the first test case, the Perfect Numbers up to 6 are {6}, so the count is 1. - For the second test case, the Perfect Numbers up to 28 are {6, 28}, so the count is 2. - For the third test case, the Perfect Numbers up to 100 are {6, 28}, so the count is 2. - For the fourth test case, the Perfect Numbers up to 500 are {6, 28, 496}, so the count is 3.","solution":"def is_perfect_number(n): if n < 2: return False sum_of_divisors = 1 sqrt_n = int(n**0.5) for i in range(2, sqrt_n + 1): if n % i == 0: sum_of_divisors += i if i != n // i: sum_of_divisors += n // i return sum_of_divisors == n def count_perfect_numbers_up_to_n(N): count = 0 for i in range(2, N + 1): if is_perfect_number(i): count += 1 return count def count_perfect_numbers(T, test_cases): max_n = max(test_cases) cumulative_counts = [0] * (max_n + 1) for i in range(2, max_n + 1): if is_perfect_number(i): cumulative_counts[i] = cumulative_counts[i - 1] + 1 else: cumulative_counts[i] = cumulative_counts[i - 1] results = [] for n in test_cases: results.append(cumulative_counts[n]) return results"},{"question":"Given an integer array nums, write a function length_of_lcis to find the length of the longest continuous increasing subsequence (LCIS). A continuous increasing subsequence is defined as a subsequence of numbers where each number is strictly greater than the number preceding it and the subsequence elements are contiguous in the original array. Your function should return an integer representing the length of the LCIS. If there is no increasing subsequence, return 0. # Examples 1. Input: nums = [1, 3, 5, 4, 7] Output: 3 Explanation: The longest continuous increasing subsequence is [1, 3, 5], with a length of 3. 2. Input: nums = [2, 2, 2, 2, 2] Output: 1 Explanation: The longest continuous increasing subsequence is [2], with a length of 1. 3. Input: nums = [1, 2, 3, 4, 5] Output: 5 Explanation: The longest continuous increasing subsequence is [1, 2, 3, 4, 5], with a length of 5. # Constraints - The length of the input array nums will be in the range [0, 10^4]. - The elements of the input array nums will be in the range [-10^9, 10^9].","solution":"def length_of_lcis(nums): Returns the length of the longest continuous increasing subsequence in the array. if not nums: return 0 max_length = 1 current_length = 1 for i in range(1, len(nums)): if nums[i] > nums[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Assume you are given an m times n matrix filled with non-negative integers. Your task is to find a path from the top-left corner to the bottom-right corner, such that the sum of the values along the path is minimized. You can only move either down or right at any point in time. Create a function `min_path_sum` to solve the problem. ```python def min_path_sum(grid): pass ``` # Input - A single list of lists where each sub-list represents a row of the matrix. The matrix size is m times n where 1 le m, n le 1000. - Each element in the matrix is an integer value between 0 and 1000. # Output - A single integer value, the minimum sum of the values along the path from the top-left corner to the bottom-right corner of the matrix. # Example Input: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ```python 7 ``` # Explanation One possible minimal path can be `[1→3→1→1→1]`, which results in a sum of 7.","solution":"def min_path_sum(grid): Given an m x n grid filled with non-negative integers, this function finds the minimum sum of values along a path from the top-left corner to the bottom-right corner of the matrix. You can only move either down or right at any point in time. :param grid: List[List[int]] - 2D list representing the matrix. :return: int - Minimum sum of the values along the path. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the DP array with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Set the value for the starting cell dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"Monica is learning data structures and algorithms. She challenges herself by solving a problem related to range queries. She has an array of n integers a_1, a_2, dots, a_n. She wants to answer m queries. Each query consists of two integers l and r (1 leq l leq r leq n) and asks her to find the sum of the elements from index l to r (both inclusive). Help Monica to efficiently answer each query. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 100000) — the number of elements in the array and the number of queries, respectively. The second line of the input contains n integers a_1, a_2, dots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. Each of the next m lines contains two integers l and r (1 leq l leq r leq n)— the parameters of the query. -----Output----- Output m integers — the answers to the queries in the order they are given. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15 Input 5 2 5 5 -5 -5 5 1 5 2 4 Output 5 -5 -----Note----- In the first example, the sum for the queries are calculated as follows: - Query 1: 1 + 2 + 3 = 6 - Query 2: 2 + 3 + 4 + 5 = 14 - Query 3: 1 + 2 + 3 + 4 + 5 = 15 In the second example, the sum for the queries are calculated as follows: - Query 1: 5 + 5 - 5 - 5 + 5 = 5 - Query 2: 5 - 5 - 5 = -5","solution":"def preprocess_array(array): Preprocess the array to create a prefix sum array. n = len(array) prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] return prefix_sum def range_sum(prefix_sum, l, r): Calculate the sum for the range query (l, r) using the prefix sum array. return prefix_sum[r] - prefix_sum[l - 1] def answer_queries(n, m, array, queries): Answer m queries about the sum of elements between indices l and r. prefix_sum = preprocess_array(array) results = [] for query in queries: l, r = query results.append(range_sum(prefix_sum, l, r)) return results"},{"question":"A delivery company needs to optimize their package delivery routes. Each route is represented as a list of unique cities that the delivery truck needs to visit in the order mentioned in the list. Write a function that takes a list of delivery routes and merges overlapping routes to minimize the number of trips needed. Two routes are considered overlapping if they share at least one common city. For example, consider the following delivery routes: ```python routes = [ [\\"CityA\\", \\"CityB\\", \\"CityC\\"], [\\"CityC\\", \\"CityD\\", \\"CityE\\"], [\\"CityF\\", \\"CityG\\"], [\\"CityG\\", \\"CityH\\", \\"CityI\\"], [\\"CityJ\\", \\"CityK\\"] ] ``` The optimal set of routes would combine the overlapping routes to minimize the total number of unique routes. Write a function `optimize_routes(routes)` that takes in a list of routes and returns a list of optimized routes. ```python def optimize_routes(routes): # Your code here # Example usage: routes = [ [\\"CityA\\", \\"CityB\\", \\"CityC\\"], [\\"CityC\\", \\"CityD\\", \\"CityE\\"], [\\"CityF\\", \\"CityG\\"], [\\"CityG\\", \\"CityH\\", \\"CityI\\"], [\\"CityJ\\", \\"CityK\\"] ] optimized_routes = optimize_routes(routes) print(optimized_routes) ``` Output for the above example could be: ``` [[\'CityA\', \'CityB\', \'CityC\', \'CityD\', \'CityE\'], [\'CityF\', \'CityG\', \'CityH\', \'CityI\'], [\'CityJ\', \'CityK\']] ``` The function should be efficient and handle cases where complex overlapping occurs.","solution":"def optimize_routes(routes): def merge_route(route1, route2): return sorted(list(set(route1) | set(route2))) merged = True while merged: merged = False for i in range(len(routes)): for j in range(i + 1, len(routes)): common_cities = set(routes[i]) & set(routes[j]) if common_cities: routes[i] = merge_route(routes[i], routes[j]) del routes[j] merged = True break if merged: break return routes"},{"question":"Wilma is playing a board game where she can collect coins by moving on a grid. Each cell in the grid contains some coins. Wilma can only move either right or down from a given cell. She starts at the top-left corner (1,1) and wants to collect the maximum number of coins possible when reaching the bottom-right corner of the grid. You are given a grid of size `n x m` where each cell contains an integer representing the number of coins in that cell. Calculate the maximum number of coins Wilma can collect. Input: The first line contains two integers, `n` and `m` (1 le n, m le 1000) — the size of the grid. Each of the next `n` lines contains `m` integers representing the number of coins in each cell of the grid. Output: Print one integer — the maximum number of coins Wilma can collect. Example: # Input: 3 3 1 3 1 1 5 1 4 2 1 # Output: 12 Note: In the provided example, Wilma can move as follows to collect the maximum number of coins: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), collecting 1 + 3 + 1 + 1 + 1 + 5 + 4 = 12 coins. # Additional Information: You may assume that the coin values in the cells can be any integer, including negative values.","solution":"def max_coins(grid): This function calculates the maximum number of coins Wilma can collect by moving from the top-left corner to the bottom-right corner of the grid, moving only right or down. :param grid: List[List[int]] - 2D grid with n rows and m columns representing the coins in each cell :return: int - maximum number of coins Wilma can collect n = len(grid) m = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Start position initializes with the coins in the starting cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"Create a function that simulates a simple version of an old-style typewriter. The typewriter has a single row of characters and can print only one character at a time, moving from left to right. When it reaches the end of the row, it moves back to the start. Additionally, the typewriter automatically shifts the oldest character out of view as new characters are added, much like a scrolling marquee display. Your task is to implement the function that takes an integer (N), representing the length of the typewriter display, and a string (S) of length (L), representing the sequence of characters to be displayed. The function should return the sequence of displays for each step as the characters in (S) are added, one by one. Each display should be a string of length (N), showing the current state of the typewriter. # Input - An integer (N) (1 leq N leq 1000) representing the length of the typewriter display. - A string (S) (1 leq L leq 1000) containing the characters to be typed on the typewriter. # Output - A list of strings, each of length (N), representing the state of the typewriter after each character from (S) has been added. # Examples ```python typewriter_display(5, \'HELLO\') ``` Output: ``` [\'H....\', \'HE...\', \'HEL..\', \'HELL.\', \'HELLO\'] typewriter_display(3, \'WORLD\') ``` Output: ``` [\'W..\', \'WO.\', \'WOR\', \'ORL\', \'RLD\'] ``` # Explanation 1. For the first example, the typewriter has a display length of 5. As each character from the string \'HELLO\' is added, the display updates: - After \'H\': \'H....\' - After \'E\': \'HE...\' - After \'L\': \'HEL..\' - After \'L\': \'HELL.\' - After \'O\': \'HELLO\' 2. For the second example, the typewriter has a display length of 3. The display updates: - After \'W\': \'W..\' - After \'O\': \'WO.\' - After \'R\': \'WOR\' - After \'L\': \'ORL\' - After \'D\': \'RLD\'","solution":"def typewriter_display(N, S): Simulates the display of a typewriter with a given length N for the sequence S. Parameters: N (int): The length of the display. S (string): The sequence of characters to be displayed. Returns: List[string]: The sequence of displays for each step. display = [\'.\' * N] for i in range(len(S)): display.append((S[max(0, i+1-N):i+1] + \'.\' * N)[:N]) return display[1:]"},{"question":"In a far away land, a magical forest is rooted with mystical trees. Each tree has an affinity rating, representing the amount of magic present in that tree. To maintain the balance in this forest, a wizard performs an operation to join two trees, resulting in a single tree with a new affinity value calculated by the bitwise AND of the two separate trees\' affinity ratings. Now, the wizard wishes to determine the maximum affinity value that can be achieved from any single tree, considering the current rating of the trees and the possible operations of joining the trees. Given the description of the forest, your task is to write a program to determine the highest affinity value of any tree after joining the trees optimally. # Input The input will be given in the following format: ``` N A_1 A_2 ... A_N ``` - The first line contains a single integer N (1 leq N leq 100,000), the number of trees in the forest. - The second line contains N integers A_1, A_2, ..., A_N (0 leq A_i leq 10^9), representing the affinity rating of each tree. # Output Output a single integer representing the highest affinity value of any tree that can be achieved by performing the joining operations optimally. # Example Input ``` 5 5 7 12 8 3 ``` Output ``` 7 ``` Explanation: One optimal way to achieve the highest affinity is to join trees with ratings 7 (0b0111) and 12 (0b1100). The bitwise AND operation results in 4 (0b0100). However, joining trees with ratings 7 (0b0111) and 5 (0b0101) results in 5, which is the highest possible resulting affinity. # Note - Consider the properties of the bitwise AND operation to determine the optimal strategy for joining the trees. - Efficient algorithms might involve data structures or bit manipulation techniques to solve the problem within the given constraints.","solution":"def max_affinity_value(n, affinities): Returns the maximum affinity value of any tree after performing the joining operations optimally. max_affinity = 0 for affinity in affinities: max_affinity |= affinity # Using bitwise OR return max_affinity"},{"question":"The company \\"Wood Wonders\\" produces handmade wooden sculptures, each with a unique serial number. The serial number follows a specific pattern, and your task is to write a program that validates if a given serial number follows this pattern or not. The pattern rules are as follows: 1. The serial number must start with an uppercase letter (A-Z). 2. The first uppercase letter is followed by exactly three digits (0-9). 3. The sequence of three digits is followed by a hyphen (\\"-\\"). 4. After the hyphen, there must be exactly two uppercase letters (A-Z). 5. The sequence of two uppercase letters is followed by exactly three digits (0-9). For example, valid serial numbers include \\"A123-BC456\\" and \\"Z999-XY000\\", whereas invalid serial numbers include \\"a123-BC456\\", \\"A12-BC456\\", \\"A123BC456\\", and \\"A123-Bc456\\". Implement a function `validate_serial(serial)` that takes a serial number as input and returns `True` if the serial number follows the stated pattern, and `False` otherwise. Function signature: `def validate_serial(serial: str) -> bool:` -----Examples----- Input validate_serial(\\"A123-BC456\\") Output True Input validate_serial(\\"a123-BC456\\") Output False","solution":"import re def validate_serial(serial: str) -> bool: Validates if the given serial number follows the pattern: 1 uppercase letter, followed by 3 digits, a hyphen, 2 uppercase letters, and 3 digits. pattern = r\'^[A-Z][0-9]{3}-[A-Z]{2}[0-9]{3}\' return bool(re.match(pattern, serial))"},{"question":"Given a binary tree where each node can only have values 0 or 1, you need to prune the tree. The pruning should remove all subtrees that contain only 0s, i.e., if an entire subtree’s nodes all have the value 0, then that subtree should be deleted. You need to write a function pruneTree() to accomplish this. The function will receive the root of the binary tree and return the root of the pruned binary tree. Example 1: Input: 1 / 0 1 / 0 0 Output: 1 1 Example 2: Input: 0 / 1 0 1 Output: 0 / 1 Example 3: Input: 0 Output: null Your Task: You don\'t need to read input or print anything. Your task is to complete the function pruneTree() which takes the root of the tree as input and returns the root of the pruned tree. Expected Time Complexity: O(n), where n is the number of nodes in the tree. Expected Auxiliary Space: O(h), where h is the height of the tree (space for recursion stack). Constraints: 1. The number of nodes in the tree is in the range [1, 2000]. 2. Node values are either 0 or 1. Note: - After pruning, the resulting binary tree might be empty. In such cases, you should return null.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pruneTree(root): Prune the tree removing all subtrees that contain only 0s. if not root: return None root.left = pruneTree(root.left) root.right = pruneTree(root.right) if root.val == 0 and not root.left and not root.right: return None return root"},{"question":"**Problem Title: Finding Common Divisors** Chef likes to find patterns in sequences of numbers. Given a sequence of positive integers, Chef is interested in finding the largest integer d such that all numbers in the sequence are divisible by d. Write a program to help Chef find this largest divisor. ------ Input ------ The input starts with an integer T, the number of test cases. T test cases follow. The first line of each test case contains an integer n, the number of integers in the sequence. The second line of each test case contains n space-separated positive integers, representing the sequence. ------ Output ------ For each test case, output a single line containing the largest integer d such that all numbers in the sequence are divisible by d. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ text{each integer in the sequence} ≤ 10^9 ------ Sample Input 1 ------ 3 3 2 4 6 4 5 10 15 20 5 6 9 12 15 18 ------ Sample Output 1 ------ 2 5 3 ------ Explanation 1 ------ Test case 1: The numbers in the sequence are 2, 4, and 6. The largest integer that divides all of these numbers is 2. Test case 2: The numbers in the sequence are 5, 10, 15, and 20. The largest integer that divides all of these numbers is 5. Test case 3: The numbers in the sequence are 6, 9, 12, 15, and 18. The largest integer that divides all of these numbers is 3.","solution":"import math def find_largest_divisor(sequences): For each sequence, find the largest divisor d such that all numbers in the sequence are divisible by d. results = [] for sequence in sequences: gcd_value = sequence[0] for num in sequence[1:]: gcd_value = math.gcd(gcd_value, num) if gcd_value == 1: # Early termination if gcd becomes 1 break results.append(gcd_value) return results def process_input(input_data): Process the input data, extract the number of test cases and sequences, and return the results from find_largest_divisor function. input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 sequences = [] for _ in range(T): n = int(input_lines[index]) sequence = list(map(int, input_lines[index + 1].split())) sequences.append(sequence) index += 2 return find_largest_divisor(sequences)"},{"question":"Patricia has a fascination with ancient ruins and loves exploring them. During her latest adventure, she found a mysterious ancient machine that operates on gears. The machine contains `n` gears connected in a network, which can be represented as a directed graph where each gear is a node, and each directed edge has a specific weight representing the time it takes for a signal to pass from one gear to another. Patricia needs to start the machine by sending a signal from gear `1`. The machine will only work correctly if the signal reaches gear `n` following a path such that no gear (including the starting gear) on that path is visited more than once, meaning the signal should follow a path where each gear is visited at most once. Additionally, she wants to find the path that takes the minimum time for the signal to travel from gear `1` to gear `n`. Help Patricia find the minimum time required for the signal to travel from gear `1` to gear `n`, if such a path exists. Input The first line of the input contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 3000). The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a directed edge from gear `u` to gear `v` with weight `w`. Output Print the minimum time for the signal to travel from gear `1` to gear `n`. If there is no valid path from gear `1` to gear `n`, print \\"Timeless machinery\\" without quotes. Examples Input 4 4 1 2 3 2 4 5 1 3 1 3 4 4 Output 5 Input 5 5 1 2 2 2 3 2 1 3 4 3 4 1 4 5 3 Output 8 Note In the first example, the minimum time path from gear `1` to gear `n` (which is gear `4`) can be `1 -> 3 -> 4` with a total weight of 1 + 4 = 5. In the second example, the minimum time path is `1 -> 2 -> 3 -> 4 -> 5` with a total weight of 2 + 2 + 1 + 3 = 8.","solution":"import heapq def minimum_time(n, m, edges): # Create adjacency list adj = [[] for _ in range(n+1)] for u, v, w in edges: adj[u].append((v, w)) # Dijkstra\'s algorithm to find the shortest path from node 1 to node n dist = [float(\'inf\')] * (n + 1) dist[1] = 0 pq = [(0, 1)] # (cost, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[n] if dist[n] != float(\'inf\') else \\"Timeless machinery\\" # Example usage n1, m1 = 4, 4 edges1 = [(1, 2, 3), (2, 4, 5), (1, 3, 1), (3, 4, 4)] print(minimum_time(n1, m1, edges1)) # Output: 5 n2, m2 = 5, 5 edges2 = [(1, 2, 2), (2, 3, 2), (1, 3, 4), (3, 4, 1), (4, 5, 3)] print(minimum_time(n2, m2, edges2)) # Output: 8"},{"question":"Given an array of n integers and a number k, return the count of distinct integers in every contiguous subarray of length k. -----Input----- The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000), representing the length of the array and the size of the subarray respectively. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100,000), representing the elements of the array. -----Output----- Print a single line containing n-k+1 integers, where the i-th integer represents the count of distinct numbers in the subarray starting from index i. -----Examples----- Input 7 4 1 2 1 3 4 2 3 Output 3 4 4 3 Input 5 3 4 1 1 3 4 Output 2 2 3","solution":"def count_distinct_in_subarrays(arr, n, k): Returns the count of distinct integers in every contiguous subarray of length k. if k > n: return [] result = [] frequency = {} distinct_count = 0 # Initialize frequency dictionary for first window of size k for i in range(k): if arr[i] not in frequency: frequency[arr[i]] = 0 frequency[arr[i]] += 1 if frequency[arr[i]] == 1: distinct_count += 1 result.append(distinct_count) # Slide the window for i in range(k, n): # Remove the element going out of the window if frequency[arr[i - k]] == 1: distinct_count -= 1 frequency[arr[i - k]] -= 1 # Add the new element coming into the window if arr[i] not in frequency or frequency[arr[i]] == 0: frequency[arr[i]] = 0 distinct_count += 1 frequency[arr[i]] += 1 result.append(distinct_count) return result"},{"question":"In a city grid, two friends, Sam and Alex, are trying to meet. They start at different points on the grid and move towards each other in a straight line. The city grid can be represented as a 2D coordinate system, with their initial positions marked by (x1, y1) and (x2, y2). Each minute, Sam and Alex move one unit either horizontally or vertically towards each other. If they are already on the same line (either horizontal or vertical), they continue towards each other until they meet or pass by each other. Given their starting coordinates, determine the minimum time in minutes it will take for Sam and Alex to meet. -----Input----- The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). Each test case is described by two lines. The first line contains two integers x1 and y1, denoting Sam\'s starting coordinates. The second line contains two integers x2 and y2, denoting Alex\'s starting coordinates. (1 ≤ x1, y1, x2, y2 ≤ 1000) -----Output----- For each test case, output a single integer, the minimum time in minutes for Sam and Alex to meet. -----Example----- Input: 2 2 3 5 3 1 4 4 1 Output: 3 3 Explanation: In the first test case, Sam and Alex are on the same horizontal line (y-coordinate is 3). Sam moves right from (2,3) to (5,3) in 3 minutes. In the second test case, they move diagonally towards each other and meet at (2,3) in 3 minutes.","solution":"def min_time_to_meet(x1, y1, x2, y2): Returns the minimum time in minutes for Sam and Alex to meet. if x1 == x2 or y1 == y2: # if they are already aligned either horizontally or vertically return abs(x2 - x1) + abs(y2 - y1) else: # if they are at different horizontal and vertical lines return abs(x2 - x1) + abs(y2 - y1) def process_test_cases(test_cases): results = [] for (x1, y1, x2, y2) in test_cases: results.append(min_time_to_meet(x1, y1, x2, y2)) return results"},{"question":"Chef has a string of length N composed of lowercase letters and wants to convert it into a palindrome. To do this, Chef can perform the following operation any number of times: choose two adjacent letters and swap them. Determine whether it is possible for Chef to convert the given string into a palindrome using the allowed operation. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains a string of length N. ------ Output ------ For each test case, print a single line containing the string \\"yes\\" if the string can be converted into a palindrome, or \\"no\\" otherwise (without quotes). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} the sum of N over all test cases does not exceed 10^{6} ------ Sample Input ------ 3 3 abc 4 aabb 6 racecar ------ Sample Output ------ no yes yes ------ Explanation ------ Example case 1: The string \\"abc\\" cannot be rearranged to form a palindrome. Example case 2: The string \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. Example case 3: The string \\"racecar\\" is already a palindrome.","solution":"def can_be_palindrome(s): from collections import Counter count = Counter(s) odd_counts = sum(1 for x in count.values() if x % 2 != 0) # A string can be rearranged to a palindrome if there is at most one character with an odd count return odd_counts <= 1 def process_test_cases(t, cases): results = [] for n, s in cases: results.append(\\"yes\\" if can_be_palindrome(s) else \\"no\\") return results"},{"question":"Chloe loves playing with strings. She has two strings, A and B, both consisting of lowercase English letters. Chloe wants to know if she can transform string A into string B using a single swap operation. A swap operation consists of choosing any two different positions in string A and swapping the characters at those positions. Write a program to help Chloe determine if it\'s possible to transform string A into string B using exactly one swap operation. -----Input----- The first line contains a single non-empty string A (1 ≤ |A| ≤ 1000) consisting of lowercase English letters. The second line contains a single non-empty string B (1 ≤ |B| ≤ 1000) consisting of lowercase English letters. -----Output----- If it is possible to transform string A into string B using exactly one swap operation, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input abcd abdc Output YES Input abcd abcd Output NO Input abcd abdd Output NO -----Note----- In the first example, Chloe can swap the characters at positions 3 and 4 in string A (\\"abcd\\") to get string B (\\"abdc\\"). In the second example, string A (\\"abcd\\") is already equal to string B (\\"abcd\\"). Chloe needs to perform exactly one swap, so the output is \\"NO\\". In the third example, there is no single swap operation that can transform string A (\\"abcd\\") into string B (\\"abdd\\").","solution":"def can_transform_with_one_swap(A, B): Determine if you can transform string A into string B using exactly one swap operation. Parameters: A (str): The initial string. B (str): The target string. Returns: str: \\"YES\\" if it is possible to transform A into B with one swap, \\"NO\\" otherwise. if len(A) != len(B): return \\"NO\\" # Find all positions where A and B differ diff = [(a, b) for a, b in zip(A, B) if a != b] # We can only succeed if there are exactly two positions that differ # and swapping them makes the strings equal if len(diff) == 2 and diff[0] == diff[1][::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a grid of size MxN and a starting position (sx, sy), you need to find the shortest path that covers all the cells in the grid at least once. You can move in 4 possible directions: up, down, left, and right. Determine the minimum number of steps required to achieve this. Example 1: Input: M = 3, N = 3, sx = 0, sy = 0 Output: 8 Example 2: Input: M = 2, N = 2, sx = 0, sy = 0 Output: 3 Example 3: Input: M = 1, N = 10, sx = 0, sy = 0 Output: 9 Your Task: You don\'t need to read or print anything. Your task is to complete the function minSteps() which takes M, N, sx, and sy as input parameters and returns the minimum number of steps required to cover all the cells. Expected Time Complexity : O(M * N) Expected Space Complexity: O(M * N) Constraints: 1 <= M, N <= 50 0 <= sx < M 0 <= sy < N","solution":"def minSteps(M, N, sx, sy): Returns the minimum number of steps required to cover all cells in an MxN grid starting from (sx, sy). # If there\'s only one cell, no steps are needed. if M == 1 or N == 1: return M * N - 1 # Minimum number of steps field traversal in an MxN grid is # equivalent to M * N - 1 moves. return M * N - 1"},{"question":"You are given a string S of length N, where the string contains only lowercase alphabets. Your task is to perform Q operations on the string. Each operation can be of two types: 1. Update the k-th character of the string to character c. (1 ≤ k ≤ N) 2. Find the number of distinct characters in the substring from position l to r inclusive. (1 ≤ l ≤ r ≤ N) -----Input----- The first line of input contains T, the number of test cases. The first line of each test case contains two space-separated integers N and Q, denoting the length of the string and the number of queries respectively. The next line contains the string S of length N. Each of the next Q lines describes a query, which is either of the following two forms: 1. 1 k c 2. 2 l r -----Output----- For each query of the second type, output the number of distinct characters in the corresponding substring. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ T ≤ 10 -----Example----- Input: 1 7 3 abacaba 2 1 4 1 3 z 2 1 4 Output: 3 4","solution":"def perform_operations(N, Q, S, queries): # Convert string to list for efficient updates S = list(S) results = [] for query in queries: parts = query.split() type_query = int(parts[0]) if type_query == 1: # Update query k = int(parts[1]) - 1 c = parts[2] S[k] = c elif type_query == 2: # Find distinct characters l = int(parts[1]) - 1 r = int(parts[2]) distinct_chars = len(set(S[l:r])) results.append(distinct_chars) return results def solution(T, cases): results = [] for case in cases: N, Q, S, queries = case results.extend(perform_operations(N, Q, S, queries)) return results"},{"question":"Create a function that simulates an elevator system in a building with a given number of floors. The system should handle multiple requests to move the elevator up or down and indicate when the elevator has reached the requested floor. Instructions: 1. Write a class `Elevator` that simulates an elevator system with the following methods: - `__init__(self, total_floors)`: Initializes an elevator with the given number of total floors. The elevator always starts on the ground floor (1st floor). - `request_floor(self, floor)`: Adds a floor to the requested list of floors. The floor should be within the range of 1 to `total_floors`. - `move(self)`: Moves the elevator to the next floor in the order of requests and prints the current floor number. If no requests are pending, it should print \\"No pending requests\\". 2. Make sure to handle invalid floor requests gracefully by printing \\"Invalid floor request\\". 3. The elevator should only accept requests for floors within the given range and should ignore duplicate requests. Example: ```python # Initialize elevator system with 5 floors elevator = Elevator(5) # Request floors elevator.request_floor(3) elevator.request_floor(1) elevator.request_floor(4) elevator.request_floor(6) # Invalid floor request # Move elevator according to requests elevator.move() # Should move to 3 elevator.move() # Should move to 1 elevator.move() # Should move to 4 elevator.move() # No pending requests ``` Constraints: - `total_floors` is an integer between 2 and 100. - Each floor request is an integer between 1 and `total_floors`. Implement the `Elevator` class so that it behaves as described.","solution":"class Elevator: def __init__(self, total_floors): Initializes an elevator with the given number of total floors. The elevator always starts on the ground floor (1st floor). self.total_floors = total_floors self.current_floor = 1 self.requests = [] def request_floor(self, floor): Adds a floor to the requested list of floors. The floor should be within the range of 1 to total_floors. if 1 <= floor <= self.total_floors: if floor not in self.requests: self.requests.append(floor) else: print(\\"Invalid floor request\\") def move(self): Moves the elevator to the next floor in the order of requests and prints the current floor number. If no requests are pending, it prints \\"No pending requests\\". if self.requests: self.current_floor = self.requests.pop(0) print(f\\"Current floor: {self.current_floor}\\") else: print(\\"No pending requests\\")"},{"question":"Nina loves playing with trees, especially binary trees. She has a special game that involves traversing the binary tree in different orders (pre-order, in-order, and post-order). As a challenge, Nina wants you to reconstruct the binary tree given its in-order and post-order traversals. She will then ask you questions about the tree. A binary tree is defined as: - A tree in which each node has at most two children. - \\"In-order traversal\\": Visit the left subtree, then the root, and finally the right subtree. - \\"Post-order traversal\\": Visit the left subtree, then the right subtree, and finally the root. You have to help Nina by reconstructing the binary tree and answering some questions about it. **Input** The first line contains an integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. The second line contains n space-separated integers, representing the in-order traversal of the binary tree. The third line contains n space-separated integers, representing the post-order traversal of the binary tree. **Output** For each question, output the answer on a new line. Example Input: 5 4 2 5 1 3 4 5 2 3 1 Output: Pre-order traversal of the constructed tree: 1 2 4 5 3 Note: In the example, the in-order traversal is \\"4 2 5 1 3\\" and the post-order traversal is \\"4 5 2 3 1\\". The binary tree corresponding to these traversals is: ``` 1 / 2 3 / 4 5 ``` The pre-order traversal of the constructed tree is \\"1 2 4 5 3\\".","solution":"class TreeNode: def __init__(self, key=0, left=None, right=None): self.key = key self.left = left self.right = right def build_tree(inorder, postorder): if not inorder or not postorder: return None root_val = postorder.pop() root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.right = build_tree(inorder[inorder_index + 1:], postorder) root.left = build_tree(inorder[:inorder_index], postorder) return root def preorder_traversal(root): if root is None: return [] return [root.key] + preorder_traversal(root.left) + preorder_traversal(root.right) # Main function that processes the input and produces the output def reconstruct_and_traverse(n, inorder, postorder): root = build_tree(inorder, postorder) return preorder_traversal(root)"},{"question":"Tim and Sara are playing a different game. The rules are as follows: - They start with two numbers A and B. - Both will play alternately, with Tim starting first. - They can perform only one of these operations in their turn: 1. Add the smaller number to the larger number. 2. Subtract the smaller number from the larger number. - The player who cannot make a move loses the game. - It is guaranteed that A ≠ B at the start. Example 1: Input: A = 2, B = 3 Output: Tim Explanation: Tim will add 2 to 3 making the new numbers (2, 5). Sara will subtract 2 from 5 making the new numbers (2, 3). Tim will then add 2 to 3 again, making the new numbers (2, 5). Sara will keep repeating the subtraction until both numbers have become same, 0 and 5. Tim will do the final subtraction winning the game. Example 2: Input: A = 5, B = 15 Output: Sara Explanation: Tim will subtract 5 from 15 making the new numbers (5, 10). Sara will add 5 to 10 making the new numbers (10, 10). Tim will be unable to make a move and loses the game. Your task: You do not need to read input or print anything. Your task is to complete the function addAndSub() which takes two integers A and B as inputs and returns a string denoting the winner (either \\"Tim\\" or \\"Sara\\"). Expected Time Complexity: O(log(max(A, B))) Expected Auxiliary Space: O(1) Constraints: 1 <= A, B <= 10^5 A ≠ B","solution":"def addAndSub(A, B): Determine the winner of the game between Tim and Sara starting with numbers A and B. Tim starts first. # Tim starts first # Tim will always lose if B % A == 0 (where B > A) # Otherwise, Tim will win min_number = min(A, B) max_number = max(A, B) return \\"Sara\\" if (max_number % min_number == 0) else \\"Tim\\""},{"question":"Given an array of integers, it is important to effectively extract useful insights from this data. One key insight could be to find the subarray where the sum of its elements is the highest. This task involves dynamic programming or divide-and-conquer methodologies to ensure efficiency. The challenge is to write a function `max_subarray_sum` that takes an array of integers as input and returns the maximum sum of any contiguous subarray within the given array. **Function Signature:** ```python def max_subarray_sum(nums: List[int]) -> int: ``` **Constraints:** - The input list will contain at least one integer. - The list can contain both positive and negative integers, and the integers can be large (within the range of a typical 32-bit integer). **Example:** ```python max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) ``` The above function call should return `6`, since the subarray `[4, -1, 2, 1]` has the largest sum. **Explanation:** In the given array, the subarray with the maximum sum is `[4, -1, 2, 1]` as the total of its elements is `6`. Other subarrays may have sums, but none exceed `6` in this particular example. **Note:** - Consider edge cases such as arrays consisting of all positive or all negative numbers. - Ensure the solution works efficiently for large arrays.","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Returns the maximum sum of any contiguous subarray within the given array. Uses Kadane\'s Algorithm for an efficient solution. # Initialize the maximum sum and current sum max_sum = current_sum = nums[0] # Iterate through the array starting from the second element for num in nums[1:]: # Calculate the current_sum either by adding this element to the current_sum # or starting a new subarray from this element current_sum = max(num, current_sum + num) # Update max_sum if current_sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers, a subarray is defined as a contiguous subset of the array. You are required to find the sum of the largest sum subarray using the \\"Kadane\'s Algorithm\\". In simple terms, we intend to find the sum of maximum subarray among all possible subarrays. Kadane\'s Algorithm works as follows: 1. Initialize variables `max_current` and `max_global` with the value of the first element of the array. 2. Iterate through the array from the second element to the end of the array. - Update `max_current` by taking the maximum value between the current element and the sum of `max_current` and the current element. - If the updated `max_current` is greater than `max_global`, update `max_global` with the value of `max_current`. Using this approach, you need to return the value of `max_global` as the output, which represents the sum of the largest sum subarray. Input Format There will be two lines of input: textbf{n} - the size of the array textbf{arr} - the list of numbers that makes up the array Constraints 1leq nleq 1000 -1000 leq textit{arr}[i] leq 1000 Output Format Output a single integer which is the sum of the largest sum subarray. Sample Input 9 -2 1 -3 4 -1 2 1 -5 4 Sample Output 6 Explanation The subarray with the largest sum is `[4, -1, 2, 1]`, which gives a total sum of 6. Complete the function below to solve the problem: ```python def max_subarray_sum(arr): # Initialize variables max_current = max_global = arr[0] # Iterate through the array starting from the second element for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current # Return the maximum sum of the subarray return max_global # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) result = max_subarray_sum(arr) print(result) ``` Implement the function `max_subarray_sum` to find the sum of the largest sum subarray using Kadane\'s Algorithm.","solution":"def max_subarray_sum(arr): Finds the sum of the largest sum subarray using Kadane\'s Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) result = max_subarray_sum(arr) print(result)"},{"question":"David is working on a project management tool which includes organizing tasks according to their dependencies. Each task must be completed before other tasks can start, following the order of dependencies. A common occurrence in project management is the need to handle circular dependencies which can cause serious issues and need to be detected early. Given a list of tasks with dependencies between them, your aim is to determine if there is any cycle in the dependency graph. Write a function `has_cycle(num_tasks, dependencies)` that takes an integer `num_tasks` denoting the number of tasks (numbered from 0 to num_tasks-1) and a list of pairs `dependencies` where each pair `[a, b]` indicates task `a` must be completed before task `b`. Return `True` if there is a cycle in the dependency graph, otherwise return `False`. Function Signature: ```python def has_cycle(num_tasks: int, dependencies: List[List[int]]) -> bool: ``` Constraints: - 1 ≤ num_tasks ≤ 1000 - 0 ≤ len(dependencies) ≤ 10000 - 0 ≤ a, b < num_tasks Input: - An integer `num_tasks` representing the number of tasks. - A list of lists `dependencies` where each list contains two integers representing a dependency. Output: - Return `True` if there is a cycle in the graph, `False` otherwise. Examples: Input: ```python num_tasks = 4 dependencies = [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3]] ``` Output: ```python True ``` Input: ```python num_tasks = 4 dependencies = [[0, 1], [0, 2], [1, 2], [2, 3]] ``` Output: ```python False ```","solution":"from typing import List def has_cycle(num_tasks: int, dependencies: List[List[int]]) -> bool: # Create an adjacency list representation of the graph adj_list = {i: [] for i in range(num_tasks)} for prereq, task in dependencies: adj_list[prereq].append(task) # States: 0 = unvisited, 1 = visiting, 2 = visited state = [0] * num_tasks def dfs(task: int) -> bool: if state[task] == 1: # found a cycle return True if state[task] == 2: # already fully processed node return False state[task] = 1 # mark as visiting for next_task in adj_list[task]: if dfs(next_task): return True state[task] = 2 # mark as visited return False for task in range(num_tasks): if state[task] == 0: # unvisited node if dfs(task): return True return False"},{"question":"In a distant land, a king has ordered his royal blacksmith to forge swords of a specific pattern. The king has a peculiar way of defining the sword pattern: the pattern must be a palindrome (reads the same forwards and backwards). As an expert programmer, you are assigned to help the blacksmith by writing a program that checks if the given sword pattern is a palindrome. The pattern will be a string consisting only of lowercase English letters. Input The input consists of a single string S which represents the sword pattern. The length of the string satisfies the condition: 1 ≤ |S| ≤ 100000. Output Print \\"YES\\" if the given pattern is a palindrome. Otherwise, print \\"NO\\". Example Input racecar Output YES Input sword Output NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the given string s is a palindrome, otherwise returns \\"NO\\". if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"___ # Task You will be given a string `s` containing only lowercase letters and an integer `n`. Your task is to find the first `n` unique characters in the string and return them in a new string, preserving their order of appearance in the original string. # Examples ```python first_n_unique_chars(\\"teststring\\", 4) == \\"tesr\\" first_n_unique_chars(\\"abcdefghijk\\", 5) == \\"abcde\\" first_n_unique_chars(\\"abcabcabc\\", 3) == \\"abc\\" first_n_unique_chars(\\"aaaaaaa\\", 1) == \\"a\\" ``` # Notes * If `n` is greater than the number of unique characters in the string, return all unique characters. * If `n` is zero or negative, return an empty string. * You can assume the input string will not be empty. # Performance tests ```python Tests: 10 String length: up to 500,000 ```","solution":"def first_n_unique_chars(s, n): Returns the first n unique characters in the string s preserving their order of appearance. if n <= 0: return \\"\\" seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) if len(result) == n: break return \'\'.join(result)"},{"question":"Given an undirected graph with `n` nodes (numbered from 1 to `n`) and `m` edges, you need to determine if the graph is connected. A graph is considered connected if there is a path between any two distinct nodes. Write a function that checks whether the provided graph is connected. -----Input----- The first line of the input contains two integers `n` and `m` (`1 le n le 1000`, `0 le m le 5000`) — the number of nodes and edges in the graph. The following `m` lines each contain two integers `u` and `v` (`1 le u, v le n`, `u ≠ v`), representing an edge between the nodes `u` and `v`. -----Output----- If the graph is connected, print `YES`. Otherwise, print `NO`. -----Examples----- Input 4 2 1 2 3 4 Output NO Input 6 5 1 2 2 3 3 4 4 5 5 6 Output YES Input 5 4 1 2 1 3 1 4 1 5 Output YES -----Note----- In the first example, the graph is not connected; there are no edges between the pairs (1,2) and (3,4). In the second example, the graph is connected; there is a path from any node to any other node. In the third example, all nodes are directly or indirectly connected through node 1.","solution":"def is_graph_connected(n, m, edges): from collections import defaultdict, deque if n == 1: return \\"YES\\" adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) def bfs(start_node): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) bfs(1) return \\"YES\\" if all(visited[1:]) else \\"NO\\""},{"question":"Write a function that receives a list of integers and an integer target as parameters. Your job is to find two distinct integers in the list that sum up to the target. Return the pair of integers as a tuple. If no such pair exists, return `None`. Examples: ``` [2, 7, 11, 15], 9 -> returns (2, 7) [1, 2, 3, 4], 8 -> returns None ```","solution":"def find_pair_with_target(nums, target): Find two distinct integers in the list that sum up to the target. Args: nums (list of int): List of integers. target (int): Target sum. Returns: tuple: A tuple of two integers that sum to the target. If no such pair exists, returns None. seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return None"},{"question":"In a grid of N rows and M columns, a human soccer player is placed at an initial position (X1, Y1) and needs to reach the goal at position (X2, Y2). The grid has some obstacles represented by \'*\' and free spaces represented by \'.\'. The player can only move up, down, left, or right and cannot move onto or through an obstacle. Determine if the player can reach the goal. Input: The first line consists of an integer T, the number of test cases. For each test case: - The first line consists of two space-separated integers, N and M, the number of rows and columns in the grid. - The next N lines each consist of a string of length M, representing the grid. - The following line consists of four space-separated integers, X1, Y1, X2, Y2, representing the start and goal positions. Output: For each test case, print \\"YES\\" if the player can reach the goal, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 5 1 ≤ N, M ≤ 10 1 ≤ X1, X2 ≤ N 1 ≤ Y1, Y2 ≤ M SAMPLE INPUT 2 3 4 .... .*.. .... 1 1 3 4 3 3 ..* ..* ... 1 1 2 3 SAMPLE OUTPUT YES NO","solution":"def is_reachable(grid, start, goal): from collections import deque n, m = len(grid), len(grid[0]) x1, y1 = start x2, y2 = goal x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x1, y1)]) visited = set([(x1, y1)]) while queue: current_x, current_y = queue.popleft() if (current_x, current_y) == (x2, y2): return \\"YES\\" for dx, dy in directions: new_x, new_y = current_x + dx, current_y + dy if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == \'.\': queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"NO\\" def soccer_player_can_reach_goal(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][\'NM\'] grid = test_cases[i][\'grid\'] start = test_cases[i][\'start\'] goal = test_cases[i][\'goal\'] results.append(is_reachable(grid, start, goal)) return results"},{"question":"In a distant galaxy, there is a powerful space empire that consists of N planets numbered 1 through N. The empire maintains direct routes between some of these planets to ensure efficient trade and communication. These routes are represented by a list of triples, where the i-th triple (a_i, b_i, c_i) indicates that there is a direct route between planet a_i and planet b_i with a cost of c_i galactic credits to use. The emperor wants to ensure that it is possible to travel between any two planets with the minimum possible total cost of travel. Your task is to compute the minimum total travel cost needed to establish this connectivity. You can assume that there is at least one way to traverse between any two planets (i.e., the graph is connected). Constraints * 2 leq N leq 20 * N-1 leq M leq N(N-1)/2 * 1 leq a_i, b_i leq N * 1 leq c_i leq 1000 * There are no multiple routes between any two planets and no direct routes from a planet to itself. Input Input is given from Standard Input in the following format: N M a_1 b_1 c_1 ... a_M b_M c_M Output Print the minimum total travel cost. Examples Input 4 5 1 2 10 2 3 15 3 4 20 1 3 30 2 4 25 Output 45 Input 3 3 1 2 5 2 3 10 1 3 12 Output 15","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if u != self.parent[u]: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_cost_to_connect_planets(N, M, edges): edges = [(c, a-1, b-1) for a, b, c in edges] edges.sort() # Sort edges based on cost uf = UnionFind(N) mst_cost = 0 for cost, u, v in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst_cost += cost return mst_cost # Example usage: # N = 4 # M = 5 # edges = [(1, 2, 10), (2, 3, 15), (3, 4, 20), (1, 3, 30), (2, 4, 25)] # Output: 45"},{"question":"Description You have been tasked to create a program that simulates a simplified market where buyers and sellers trade items. Each item in this market has a price, and both buyers and sellers have budgets and price limits respectively. Your task is to match buyers and sellers based on their constraints and determine the number of successful trades. Rules of the market: 1. Each buyer has a budget and will only buy an item if it is within their budget. 2. Each seller has a minimum price at which they are willing to sell the item. 3. A trade can only occur if the buyer\'s budget meets or exceeds the seller\'s minimum price. Input The input consists of multiple test cases. - The first line of each test case contains two integers, B (the number of buyers) and S (the number of sellers). - The next B lines each contain an integer representing the budget of a buyer. - The following S lines each contain an integer representing the minimum price set by a seller. The input ends with a line containing two zeros. Output For each test case, output the number of successful trades, one per line. Example Input 3 3 100 150 200 110 120 130 4 2 60 70 80 90 50 65 0 0 Output 2 2","solution":"def count_successful_trades(test_cases): results = [] for buyers, sellers in test_cases: buyers.sort(reverse=True) sellers.sort() buyer_count = seller_count = 0 trade_count = 0 while buyer_count < len(buyers) and seller_count < len(sellers): if buyers[buyer_count] >= sellers[seller_count]: trade_count += 1 buyer_count += 1 seller_count += 1 else: seller_count += 1 results.append(trade_count) return results def process_market_input(input_data): test_cases = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): B, S = map(int, lines[i].split()) if B == 0 and S == 0: break buyers = [int(lines[i + j + 1]) for j in range(B)] sellers = [int(lines[i + B + j + 1]) for j in range(S)] test_cases.append((buyers, sellers)) i += B + S + 1 return count_successful_trades(test_cases)"},{"question":"In a hypothetical board game, there is a rectangular grid consisting of m rows and n columns. Each cell of the grid can either be empty or contain an obstacle. The objective for a player is to move from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (m, n)), following these movement rules: - The player can move to the right by one cell. - The player can move down by one cell. Determine the number of distinct paths the player can take to reach the bottom-right corner of the grid, avoiding obstacles. If a cell contains an obstacle, the player cannot pass through it. Input format: - The first line contains two integers m and n, the number of rows and columns of the grid, respectively. - The next m lines each contain n integers (0 or 1). A 0 represents an empty cell, and a 1 represents an obstacle. Output format: - Output a single integer denoting the number of distinct paths from the top-left corner to the bottom-right corner of the grid. Note: - Return 0 if there is no valid path. Constraints: 1 ≤ m, n ≤ 100 SAMPLE INPUT 1 3 3 0 0 0 0 1 0 0 0 0 SAMPLE OUTPUT 1 2 Explanation: There are two possible paths from the top-left to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right SAMPLE INPUT 2 3 3 0 0 0 1 1 0 0 0 0 SAMPLE OUTPUT 2 1 Explanation: There is only one possible path from the top-left to the bottom-right corner: Right -> Right -> Down -> Down SAMPLE INPUT 3 2 2 0 1 1 0 SAMPLE OUTPUT 3 0 Explanation: There is no possible path from the top-left to the bottom-right corner due to obstacles blocking the way.","solution":"def unique_paths_with_obstacles(m, n, grid): # If the start or end is blocked, there\'s no way to get from start to end if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Create a 2D dp array initialized to 0 dp = [[0]*n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] # Helper function to parse the input, can be used for testing def parse_grid(input_str): lines = input_str.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return m, n, grid"},{"question":"Given a matrix where each cell contains either the value \'X\' or \'O\', the task is to capture all regions surrounded by \'X\'. A region is captured by flipping all \'O\'s into \'X\'s in that surrounded region. Example: Input: N = 4, M = 4 matrix[][] = {{\'X\', \'X\', \'X\', \'X\'}, {\'X\', \'O\', \'O\', \'X\'}, {\'X\', \'X\', \'O\', \'X\'}, {\'X\', \'O\', \'X\', \'X\'}} Output: matrix[][] = {{\'X\', \'X\', \'X\', \'X\'}, {\'X\', \'X\', \'X\', \'X\'}, {\'X\', \'X\', \'X\', \'X\'}, {\'X\', \'O\', \'X\', \'X\'}} Explanation: The region \'O\' located at the position (1,1) and (1,2) is completely surrounded by \'X\', so all \'O\'s in that region are flipped to \'X\'. The \'O\' at position (3,1) is not surrounded by \'X\' from all sides, so it remains as \'O\'. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `captureRegions(matrix)` which takes the matrix and dimensions N and M as input parameters and modifies the matrix to capture all surrounded regions. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 <= N, M <= 1000 matrix[i][j] is either \'X\' or \'O\'","solution":"def captureRegions(matrix): if not matrix or not matrix[0]: return N, M = len(matrix), len(matrix[0]) def dfs(i, j): if i < 0 or i >= N or j < 0 or j >= M or matrix[i][j] != \'O\': return matrix[i][j] = \'E\' # Mark as escaped dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) # Mark the escaped \'O\'s on the boundary for i in range(N): for j in [0, M - 1]: if matrix[i][j] == \'O\': dfs(i, j) for i in [0, N - 1]: for j in range(M): if matrix[i][j] == \'O\': dfs(i, j) # Flip \'O\' to \'X\', and \'E\' back to \'O\' for i in range(N): for j in range(M): if matrix[i][j] == \'O\': matrix[i][j] = \'X\' elif matrix[i][j] == \'E\': matrix[i][j] = \'O\'"},{"question":"John loves coding challenges and often practices on a grid-based pathfinding problem. One day, he came across a challenge in which he is given a grid with some obstacles and he needs to find all the unique paths from the top-left corner to the bottom-right corner of the grid. Here\'s the task: Given an `n x m` grid, where `n` and `m` are its dimensions, and some cells are marked as obstacles, develop a function to count the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). The robot can only move either down or right at any point in time. A path is not allowed to pass through cells that are marked as obstacles. Input Format: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next `n` lines each contain `m` integers (either 0 or 1). A `0` indicates an open cell, and a `1` indicates an obstacle. Output Format: - Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 0 0 Output: 1 Explanation: In the first example, the grid is: ``` 0 0 0 0 1 0 0 0 0 ``` The two unique paths are: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right In the second example, the grid is: ``` 0 1 0 0 ``` The single path is: - Down -> Right","solution":"def unique_paths_with_obstacles(grid): Given a grid with obstacles, returns the number of unique paths from the top-left to the bottom-right corner. :param grid: List[List[int]] - The grid with obstacles represented by 1 and open cells by 0 :return: int - Number of unique paths n = len(grid) m = len(grid[0]) # If the starting or ending cell is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Initialize the DP table with 0\'s dp = [[0 for _ in range(m)] for _ in range(n)] # Set the starting cell as 1 (since there\'s one way to be at the start) dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 # No path through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] # Add paths from the cell above if j > 0: dp[i][j] += dp[i][j-1] # Add paths from the cell to the left return dp[n-1][m-1]"},{"question":"You are given a rectangular grid of cells. Each cell can be either empty, or can contain a block. You need to determine the number of distinct islands present on the grid. An island is defined as a group of adjacent blocks connected vertically or horizontally. Diagonal connections do not count as being adjacent. -----Input----- - The first line contains a single integer T, the number of test cases. The description of each testcase follows. - The first line of each test case contains two space-separated integers N and M denoting the number of rows and columns of the grid, respectively. - The next N lines each contain M space-separated integers (either 0 or 1). 1 represents a block and 0 represents an empty cell. -----Output----- For each test case, output a single line containing the number of distinct islands. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N, M ≤ 1000 - The grid contains at least one block (1) -----Example----- Input: 2 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 3 3 1 1 1 1 0 0 0 0 1 Output: 2 2 -----Explanation:----- Test Case 1: There are 2 distinct islands in the grid. One island is formed by the blocks at coordinates (1,1), (1,2), (2,1), and (2,2), and the other island is formed by the blocks at coordinates (2,5) and (3,5). Test Case 2: There are 2 distinct islands in the grid. One island is formed by the blocks at coordinates (1,1), (1,2), and (1,3), and the other island is formed by the single block at coordinate (3,3).","solution":"def count_islands(grid, n, m): def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() if 0 <= i < n and 0 <= j < m and grid[i][j] == 1: grid[i][j] = -1 # mark as visited stack.extend([(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]) islands = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dfs(i, j) islands += 1 return islands def number_of_islands(test_cases): results = [] for grid, n, m in test_cases: results.append(count_islands(grid, n, m)) return results"},{"question":"最長子序列和 (Longest Subsequence Sum) 問題 Miki-chan 有一個數列: a_1, a_2, ..., a_N 對每個i (1 <= i <= N), 他們所有取值範圍都在 [-100, 100] 之間。她想知道這個數列的其中一個連續子序列的子數列的最大和是多少，例如, 子數列{a_i, a_{i+1}, ..., a_j} (1 <= i <= j <= N)，並返回這個最大和的值。 當有多個子序列具有相同的最大和時，她想返回最短的子序列。如果仍然存在多個最短的子序列具有相同的最大和，則她希望返回左端點索引更小的子序列。 輸入 N a_1 a_2 ... a_N 限制條件 * 1 <= N <= 100 * -100 <= a_i <= 100 for i=1,...,N (inclusive) 輸出 第一行輸出最大子序列和，第二行輸出兩個整數 i 和 j，表示產生最大和的最短子序列子的起點和終點。(1-based 下標) 示例輸入 1 5 1 -3 2 1 -1 示例輸出 1 3 3 4 以下子序列和可以來看出: * 子序列 3 為 2 本例，它有最大和 2 示例輸入 2 7 -2 1 -3 4 -1 2 1 -5 4 示例輸出 2 6 4 7 以下子序列和可以來看出: * 子序列 4 5 6 7 為 4 -1 2 1 本例，它有最大和 6 示例輸入 3 3 -1 -2 -3 示例輸出 3 -1 1 1 以下子序列和可以來看出: * 子序列 1 為 -1 本例，它有最大和 -1","solution":"def longest_subsequence_sum(n, arr): # Initialize variables max_sum = -float(\'inf\') current_sum = 0 start = 0 min_length = float(\'inf\') best_i = best_j = 0 temp_start = 0 for i in range(n): current_sum += arr[i] # If we found a new max sum or the same sum with a shorter subsequence if current_sum > max_sum or (current_sum == max_sum and (i - temp_start < min_length)): max_sum = current_sum min_length = i - temp_start best_i = temp_start best_j = i # If current sum drops below 0, reset if current_sum < 0: current_sum = 0 temp_start = i + 1 # Adjust best_i and best_j to 1-based index return max_sum, best_i + 1, best_j + 1"},{"question":"You enter a new video game world where you\'re given the task of reassembling a magic sequence. The sequence should follow a specific order to unlock the final treasure. You are given the initial sequence represented by an array of integers `p` of length `n`, where each integer represents a part of the sequence. Additionally, you have a list of `k` operations, where each operation allows you to swap any two elements of the array. Can you arrange the array in strictly increasing order with the given swap operations to unlock the treasure? If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains an integer `T` (1 ≤ T ≤ 50), indicating the number of test cases. Each test case consists of two lines: The first line contains two integers, `n` and `k` (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^5), the length of the array and the number of operations allowed, respectively. The second line contains `n` integers `p_1, p_2, ..., p_n` (1 ≤ p_i ≤ n) — the initial sequence. -----Output----- For each test case, output \\"YES\\" if it\'s possible to rearrange the array in strictly increasing order using at most `k` operations. Otherwise, print \\"NO\\". -----Examples----- Input: 3 5 2 4 3 1 5 2 6 0 6 5 4 3 2 1 3 3 3 2 1 Output: YES NO YES -----Note----- In the first test case, you can use the two allowed swaps to rearrange the array: 1. Swap elements at positions 3 and 1: [1, 3, 4, 5, 2] 2. Swap elements at positions 2 and 4: [1, 2, 4, 5, 3] In the second test case, no swaps are allowed, so the array remains in the same order. In the third test case, you can use the three allowed swaps to rearrange the array: 1. Swap elements at positions 1 and 3: [1, 2, 3] 2. No further swaps needed as the array is now in order.","solution":"def can_unlock(t, cases): results = [] for i in range(t): n, k = cases[i][0] p = cases[i][1] sorted_p = sorted(p) swap_count = sum(p[j] != sorted_p[j] for j in range(n)) # Each swap operation can fix 2 misplaced elements if swap_count // 2 <= k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of distinct integers `arr` and a target integer `target`, return the indices of the first two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. # Example: TwoSum([2, 7, 11, 15], 9) Will output `[0, 1]` because `arr[0] + arr[1] = 2 + 7 = 9`. TwoSum([3, 2, 4], 6) Will output `[1, 2]` because `arr[1] + arr[2] = 2 + 4 = 6`. TwoSum([3, 3], 6) Will output `[0, 1]` because `arr[0] + arr[1] = 3 + 3 = 6`. Write a function `TwoSum(arr, target)` that accepts an array of integers and a target integer, and returns a tuple of the two indices whose sum is equal to the target.","solution":"def TwoSum(arr, target): Returns the indices of the two numbers in the array that add up to the target. Args: arr (list of int): List of distinct integers. target (int): Target sum. Returns: tuple: A tuple containing the indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None # As the assumption is that there is exactly one solution, this line should not be reached."},{"question":"Given an integer array nums of length n. Determine whether it possible to split the array into two subarrays such that the sum of elements in both subarrays is equal. If it\'s possible, return true, otherwise return false. Input: First line of input contains number of test cases T. Each test case contains an integer n followed by an array of n integers. Output: For each test case, return \'true\' if the array can be split into two subarrays with equal sum, otherwise \'false\'. Constraints: 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^5 -10^4 ≤ nums[i] ≤ 10^4 SAMPLE INPUT: 3 4 1 1 1 1 5 2 3 5 5 2 3 -1 0 1 SAMPLE OUTPUT: true false true Explanation: Test Case #1: The array [1, 1, 1, 1] can be split into two subarrays [1,1] and [1,1] with equal sum of 2. Test Case #2: The array [2, 3, 5, 5, 2] cannot be split into two subarrays with equal sum. Test Case #3: The array [-1, 0, 1] can be split into two subarrays [-1] and [0, 1] with equal sum of 0.","solution":"def can_split_into_equal_sum_subarrays(nums): Determines whether it is possible to split an array into two subarrays with equal sum. Args: nums (list): List of integers. Returns: bool: True if the array can be split into two subarrays with equal sum, otherwise False. total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 current_sum = 0 for num in nums: current_sum += num if current_sum == target: return True return False def process_test_cases(test_cases): results = [] for n, nums in test_cases: result = can_split_into_equal_sum_subarrays(nums) results.append(result) return results"},{"question":"Consider the following operation on a list: ```python transform([3, 1, 4, 1, 5, 9], 10) = [13, 11, 14, 11, 15, 19] # Add 10 to each element transform([8, 2, 2, 3, 8], 5) = [13, 7, 7, 8, 13] # Add 5 to each element ``` Given a list of integers and an integer value, return a new list where each element is the sum of the corresponding element from the original list and the specified integer value. Input will consist of a list of integers and a single integer value. More examples in test cases. Good luck! Please also try [Alternate Adding Elements](https://www.codewars.com/kata/5c2ab151df8eec26e80000bc)","solution":"def transform(lst, value): Returns a new list where each element is the sum of the corresponding element from the input list and the specified value. Parameters: lst (list): A list of integers. value (int): The integer value to add to each element of the list. Returns: list: A new list with transformed values. return [x + value for x in lst]"},{"question":"Find the contiguous subarray within a one-dimensional array of numbers that has the largest sum and return that sum. ```python max_subarray_sum([−2,1,−3,4,−1,2,1,−5,4]) => 6 # The subarray [4,−1,2,1] has the largest sum. max_subarray_sum([1,2,3,4,5]) => 15 # The entire array [1,2,3,4,5] has the largest sum. ```","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray within nums which has the largest sum. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a fantasy role-playing game, players regularly engage in battles with mythical creatures. The players\' party has various character classes, each with distinct abilities and attributes. One attribute common to all classes is hit points (HP), which indicate how much damage a character can take before being incapacitated. During a battle, the damage taken by a character can vary with each attack. Your task is to simulate battles by calculating the remaining HP of each character in the party after all attacks have been executed. # Input The first line of the input contains a single positive integer N, which represents the number of test cases. For each test case: - The first line contains a positive integer M, which is the number of characters in the party. - The next M lines each contain a character\'s name (a string of up to 20 alpha-numeric characters) and their initial HP (a positive integer no greater than 1000). - The next line contains a positive integer A, which is the number of attacks that occur during the battle. - The next A lines each contain a character\'s name indicating the target of the attack and the damage from that attack (a positive integer no greater than 100). # Output For each test case, output M lines, each containing the name of a character and their remaining HP after the battle. If a character\'s HP drops to 0 or below due to damage, output their HP as 0. Characters should be listed in the order they appeared in the input. # Example Input ``` 2 3 Alice 500 Bob 600 Charlie 700 4 Alice 300 Bob 200 Charlie 100 Alice 250 2 Dwarf 800 Elf 700 3 Dwarf 250 Elf 300 Dwarf 200 ``` Output ``` Alice 0 Bob 400 Charlie 600 Dwarf 350 Elf 400 ``` Ensure that your program correctly handles multiple test cases, and accurately calculates the remaining HP for each character in the party after all attacks.","solution":"def calculate_remaining_hp(test_cases): results = [] for test_case in test_cases: num_characters = test_case[\'num_characters\'] characters = test_case[\'characters\'] attacks = test_case[\'attacks\'] hp = {name: initial_hp for name, initial_hp in characters} for attack in attacks: target, damage = attack hp[target] = max(hp[target] - damage, 0) result = [(name, hp[name]) for name, _ in characters] results.append(result) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') idx = 0 num_test_cases = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(num_test_cases): num_characters = int(input_lines[idx]) idx += 1 characters = [] for _ in range(num_characters): char_info = input_lines[idx].split() name = char_info[0] initial_hp = int(char_info[1]) characters.append((name, initial_hp)) idx += 1 num_attacks = int(input_lines[idx]) idx += 1 attacks = [] for _ in range(num_attacks): attack_info = input_lines[idx].split() target = attack_info[0] damage = int(attack_info[1]) attacks.append((target, damage)) idx += 1 test_cases.append({ \'num_characters\': num_characters, \'characters\': characters, \'attacks\': attacks }) return test_cases def format_output(results): output_lines = [] for result in results: for name, remaining_hp in result: output_lines.append(f\\"{name} {remaining_hp}\\") return \'n\'.join(output_lines) def main(input_str): test_cases = parse_input(input_str) results = calculate_remaining_hp(test_cases) return format_output(results)"},{"question":"Description Write a function `sum_of_subsets` that takes two parameters: an array of positive integers `arr` and a positive integer `target`. The function should determine if there is a subset of `arr` that sums up to `target`. If such a subset exists, return `True`; otherwise, return `False`. Criteria - The function will always receive a valid input: a non-empty array of positive integers and a positive integer target. - The function should run efficiently even for larger lists and values of target. - You may assume that each element in the array can be used only once, i.e., if the array is `[1, 2, 3, 4]`, you cannot use the number `1` twice to achieve the target amount. **Example:** ```python sum_of_subsets([2, 3, 7, 8, 10], 11) # should return True sum_of_subsets([1, 5, 11, 5], 10) # should return True sum_of_subsets([1, 2, 3, 9], 8) # should return False ``` **Function Signature:** ```python def sum_of_subsets(arr: List[int], target: int) -> bool: ```","solution":"from typing import List def sum_of_subsets(arr: List[int], target: int) -> bool: Determines if there is a subset of `arr` that sums up to `target`. n = len(arr) dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True return dp[target]"},{"question":"You are given a matrix with N rows and M columns, where each cell contains a non-negative integer. You are allowed to select a single cell in each of the N rows such that the sum of the selected values is maximized, but no two selected cells can be in the same column. Find the maximum sum you can obtain following these constraints. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains N + 1 lines of input. - The first line contains two integers N and M, the number of rows and columns in the matrix. - Each of the next N lines contains M space-separated integers representing the values in the matrix. ------ Output ------ For each test case, output in a single line the maximum sum you can obtain. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N, M ≤ 100 0 ≤ matrix elements ≤ 10^9 ------ Sample Input 1 ------ 2 2 2 1 2 3 4 3 3 1 8 3 7 6 9 4 2 5 ------ Sample Output 1 ------ 6 22 ----- Explanation 1 ------ Test Case 1: Select the value 2 from row 1 and 4 from row 2 for a sum of 2 + 4 = 6. Test Case 2: Select the value 8 from row 1, 9 from row 2, and 5 from row 3 for a sum of 8 + 9 + 5 = 22.","solution":"def max_sum(test_cases): results = [] for case in test_cases: N, M, matrix = case max_values = [] for r in range(N): max_values.append(max(matrix[r])) results.append(sum(max_values)) return results def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) matrix = [] for i in range(N): matrix.append(list(map(int, input_lines[index + i + 1].split()))) test_cases.append((N, M, matrix)) index += N + 1 return test_cases def format_output(results): return \\"n\\".join(map(str, results)) def main(input_data): test_cases = parse_input(input_data) results = max_sum(test_cases) return format_output(results)"},{"question":"A large batch of products are being manufactured in a factory, and each product needs to pass through multiple quality checks. Each quality check either passes or fails the product. There are a total of `N` products, and each product goes through `Q` independent quality checks. The results of these quality checks are represented in a 2D list of size `N x Q`, where each element is either `1` (pass) or `0` (fail). A product is considered valid if it passes at least `P` out of `Q` checks. Your task is to write a function that counts the total number of valid products. Example 1: Input: N = 3 Q = 4 P = 3 checks = [ [1, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1] ] Output: 2 Explanation: - The first product passes 3 out of 4 checks. - The second product passes 2 out of 4 checks. - The third product passes 4 out of 4 checks. Therefore, two products are considered valid. Example 2: Input: N = 2 Q = 3 P = 2 checks = [ [0, 0, 0], [1, 1, 1] ] Output: 1 Explanation: - The first product fails all checks. - The second product passes 3 out of 3 checks. Therefore, only one product is considered valid. Function Signature: ```python def count_valid_products(N: int, Q: int, P: int, checks: List[List[int]]) -> int: pass ``` Constraints: - 1 ≤ N, Q ≤ 100 - 1 ≤ P ≤ Q - checks[i][j] will be either 0 or 1","solution":"from typing import List def count_valid_products(N: int, Q: int, P: int, checks: List[List[int]]) -> int: valid_products_count = 0 for product_checks in checks: if sum(product_checks) >= P: valid_products_count += 1 return valid_products_count"},{"question":"A company is tracking the number of tasks completed by its employees each day. The management wants to understand the productivity trends over a period of time. Each completed task has a record associated with it that contains the day (as an integer) it was completed. The company periodically runs analyses to determine the number of unique days on which certain tasks were completed. You are given the task completion records and multiple queries where each query specifies a range of task IDs. Your job is to determine the number of unique days on which tasks were completed for each given range of task IDs. ------ Input ------ The first line contains an integer T, the number of tasks. The second line contains T integers where the i-th integer represents the day on which task i was completed. The next line contains an integer Q, the number of queries. Each of the following Q lines contains two integers L and R, which represent a range of task IDs [L, R]. 1 ≤ T ≤ 100000 (10^5) 1 ≤ Q ≤ 100000 (10^5) 1 ≤ L ≤ R ≤ T 1 ≤ Day ≤ 1000000000 (10^9) ------ Output ------ For each query, output the number of unique days on which tasks were completed within the specified range of task IDs. ------ Example ------ Input: 6 3 1 2 3 2 1 3 1 3 2 5 1 6 Output: 3 3 3 Explanation: Tasks and their respective completion days: Task 1: Day 3 Task 2: Day 1 Task 3: Day 2 Task 4: Day 3 Task 5: Day 2 Task 6: Day 1 In the first query range [1, 3], tasks 1, 2, and 3 were completed on days 3, 1, and 2 respectively. So, there are 3 unique days. In the second query range [2, 5], tasks 2, 3, 4, and 5 were completed on days 1, 2, 3, and 2 respectively. So, there are 3 unique days. In the third query range [1, 6], tasks 1, 2, 3, 4, 5, and 6 were completed on days 3, 1, 2, 3, 2, and 1 respectively. So, there are 3 unique days.","solution":"def unique_days_per_query(task_days, queries): Returns the number of unique days on which tasks were completed for each query range. Parameters: task_days (list): List where the i-th element represents the day on which task i was completed. queries (list): List of tuples where each tuple contains two integers L and R representing the range of task IDs. Returns: list: List of integers where each integer is the number of unique days for the corresponding query range. results = [] for L, R in queries: unique_days = len(set(task_days[L-1:R])) results.append(unique_days) return results # Example usage: task_days = [3, 1, 2, 3, 2, 1] queries = [(1, 3), (2, 5), (1, 6)] print(unique_days_per_query(task_days, queries)) # Output: [3, 3, 3]"},{"question":"You are managing a supply chain and need to schedule shipments for the next M days. You know the demand for each day which you need to fulfill, but you can only ship a fixed amount each day. Each day, you can either schedule a shipment, skip a day to save costs, or catch up by sending double the shipment to cover for the skipped day. However, double shipments cost twice as much as single shipments, and the cost of skipping is negligible. -----Input----- Input begins with an integer M (1 ≤ M ≤ 100,000), the number of days. Following this is a line with exactly M integers d_1, d_2, ..., d_{M} (1 ≤ d_{i} ≤ 1,000), the demand on the i-th day. -----Output----- Print the minimum cost to fulfill all the demands of the M days. -----Examples----- Input 5 1 2 3 4 5 Output 15 Input 7 5 5 5 5 5 5 5 Output 35 -----Note----- In the first example, you can fulfill all demands by shipping every day: 1+2+3+4+5 = 15. In the second example, the optimal cost is to simply ship every day for 5 units each day yielding a cost of 5*7 = 35. Skipping would not result in any savings.","solution":"def minimum_shipping_cost(M, demands): Calculates the minimum cost to fulfill the demands over M days. :param M: int, number of days. :param demands: list of int, demand on each day. :return: int, minimum shipping cost. total_cost = 0 for demand in demands: total_cost += demand return total_cost"},{"question":"You\'ve been tasked with developing a new web crawler and are currently focusing on efficiently traversing a network of web pages and links. The web pages and links can be represented as a directed graph, where each node is a web page and each edge is a link from one web page to another. Graph Representation The graph is provided as an adjacency list. Each node (web page) is represented by an integer, and the list of integers represents the web pages that it directly links to. Traversal Strategy Your crawler starts at a specified web page and follows the links according to a predefined traversal strategy. The crawler will only traverse each web page once to avoid cycles and infinite loops. Additionally, each time the crawler visits a node (web page), it will record that node. Your goal is to determine the order in which web pages are visited using the Breadth-First Search (BFS) strategy. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 10^4), where n is the number of web pages (nodes) and m is the number of links (edges). - Each of the next m lines contains two integers u and v, indicating there is a directed link from web page u to web page v. - The last line contains an integer s (1 ≤ s ≤ n), which is the starting web page for your crawler. Output - Output a single line with n integers, representing the order of web pages visited using the BFS strategy starting from web page s. Examples Input 5 4 1 2 1 3 3 4 4 5 1 Output 1 2 3 4 5 Input 6 5 1 2 1 3 2 4 5 6 6 1 5 Output 5 6 1 2 3 4 Note In the first example, starting from web page 1, the BFS traversal is: 1 → 2 → 3 → 4 → 5. In the second example, starting from web page 5, the BFS traversal goes to web page 6, then to 1, and finally traverses to the other web pages 2, 3, and 4. This problem requires you to simulate the BFS traversal on a directed graph and output the order of nodes visited. Efficient handling of graph structures and a good understanding of BFS are required to produce the correct output.","solution":"from collections import deque, defaultdict def bfs_traversal(n, m, edges, start): Perform BFS traversal on a directed graph and return the order of nodes visited. :param n: Number of web pages (nodes) :param m: Number of links (edges) :param edges: List of tuples representing edges (u, v) :param start: Starting web page for BFS :return: List of nodes in the order they are visited using BFS graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = set() queue = deque([start]) visited_order = [] while queue: current = queue.popleft() if current not in visited: visited.add(current) visited_order.append(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return visited_order"},{"question":"Write a function `is_possible_to_pair` that takes in two parameters: 1. `n`: an integer representing the number of single shoes available. 2. `s`: a list of `n` integers, where each integer represents the size of a single shoe. Determine whether it is possible to arrange all the shoes into pairs such that each pair consists of two shoes of the same size. ------ Input Format ------ - The first line of input will contain an integer `T` — the number of test cases. The description of T test cases follows. - Each test case is described in two lines: - The first line contains one integer `n`. - The second line contains `n` space-separated integers representing the sizes of the shoes. ------ Output Format ------ For each test case, output on a new line `YES` if it is possible to arrange the shoes into pairs, otherwise output `NO`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 1 ≤ s[i] ≤ 10^5 for all 1 ≤ i ≤ n ----- Sample Input 1 ------ 3 4 1 2 1 2 5 1 1 2 2 3 6 1 2 3 3 2 1 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: The shoes sizes are [1, 2, 1, 2]. It is possible to arrange them into pairs of (1,1) and (2,2). So the answer is `YES`. Test case 2: It is not possible to pair the shoes as there is one shoe of size 3 left. So the answer is `NO`. Test case 3: The shoes sizes are [1, 2, 3, 3, 2, 1]. It is possible to arrange them into pairs of (1,1), (2,2), and (3,3). So the answer is `YES`.","solution":"def is_possible_to_pair(n, s): from collections import Counter shoe_counts = Counter(s) for count in shoe_counts.values(): if count % 2 != 0: return \\"NO\\" return \\"YES\\" def process_cases(T, cases): results = [] for i in range(T): n, s = cases[i] results.append(is_possible_to_pair(n, s)) return results"},{"question":"You\'re given a grid with `n` rows and `m` columns, represented as a 2D list `grid`, where each cell contains a non-negative integer representing the effort required to cross that cell. Your task is to find the minimum effort required to traverse from the top-left corner of the grid (0,0) to the bottom-right corner (n-1, m-1). You can only move to the right or down from a cell. Example 1: Input: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 Explanation: The path (1→3→1→1→1) has a total effort of 7. Example 2: Input: grid = [ [1, 2, 5], [3, 2, 1] ] Output: 6 Explanation: The path (1→2→2→1) has a total effort of 6. Note: - `1 <= n, m <= 100` - `0 <= grid[i][j] <= 100`","solution":"def min_effort_path(grid): Returns the minimum effort required to traverse from the top-left corner to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # To handle boundary conditions when n or m is 1 if n == 1: return sum(grid[0]) if m == 1: return sum(grid[i][0] for i in range(n)) # Initialize a dp table dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"Write a function that takes a string of space-separated integers as input and returns the sum of the squares of those integers. The input string will contain at least one integer, and all integers will be non-negative. For example, if the input string is `\\"1 2 3\\"`, the function should return `14` because (1^2 + 2^2 + 3^2 = 14). Your function will be tested with pre-made examples as well as random ones. **Try to make your solution concise and efficient.**","solution":"def sum_of_squares(input_string): Takes a string of space-separated integers and returns the sum of their squares. Parameters: input_string (str): A string containing space-separated non-negative integers Returns: int: The sum of the squares of the integers integers = map(int, input_string.split()) return sum(x**2 for x in integers)"},{"question":"Write a function to find the first non-repeating character in a given string and return its index. If it doesn\'t exist, return -1. Example 1: Input: \\"leetcode\\" Output: 0 Example 2: Input: \\"loveleetcode\\" Output: 2 Example 3: Input: \\"aabb\\" Output: -1 Note: You may assume the string contains only lowercase English letters.","solution":"def first_uniq_char(s: str) -> int: Finds the index of the first non-repeating character in the string s. If it doesn\'t exist, returns -1. Assumes the string contains only lowercase English letters. from collections import Counter # Use Counter to count occurrences of each character count = Counter(s) # Iterate through the string and find the first character with a count of 1 for idx, char in enumerate(s): if count[char] == 1: return idx # If no unique character is found, return -1 return -1"},{"question":"Complete the function that takes a string and returns the number of vowels (a, e, i, o, u) present in the string. The function should count both lowercase and uppercase vowels as vowels. For example: ``` input_string = \\"Hello World\\" --> 3 ```","solution":"def count_vowels(input_string): Returns the number of vowels (a, e, i, o, u) in the input string. Both lowercase and uppercase vowels are counted. vowels = \\"aeiouAEIOU\\" count = 0 for char in input_string: if char in vowels: count += 1 return count"},{"question":"You are given a rectangular grid with `n` rows and `m` columns, represented as an `n x m` matrix. Each cell in the matrix contains a single integer. You are tasked with finding the maximum sum of any submatrix that forms a non-empty rectangle in the grid. A submatrix of a given matrix is defined by selecting four integers `r1`, `r2`, `c1`, and `c2` such that `1 <= r1 <= r2 <= n` and `1 <= c1 <= c2 <= m`. The submatrix is formed by all cells `(i, j)` where `r1 <= i <= r2` and `c1 <= j <= c2`. Write a program that computes the maximum sum of any non-empty submatrix in the given matrix. -----Input----- The first line contains two integers `n` (1 le n le 1000) and `m` (1 le m le 1000) — the number of rows and columns of the grid. Each of the next `n` lines contains `m` integers, representing the elements of the grid. Each element of the grid is an integer between -10^4 and 10^4. -----Output----- Print a single integer — the maximum sum of any non-empty submatrix. -----Example----- Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output 29 -----Note----- In the provided example, the submatrix with the maximum sum is: ``` 3 8 10 -4 -1 1 ``` This submatrix has a sum of 29.","solution":"def max_sum_submatrix(matrix): n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') # The Kadane\'s algorithm for finding the maximum sum subarray in 1D def max_subarray(arr): max_end_here = max_so_far = arr[0] for x in arr[1:]: max_end_here = max(x, max_end_here + x) max_so_far = max(max_so_far, max_end_here) return max_so_far # Iterate over all pairs of columns for left in range(m): row_sum = [0] * n for right in range(left, m): # Sum between columns left and right for each row for i in range(n): row_sum[i] += matrix[i][right] # Find the maximum sum subarray in the row_sum array max_sum = max(max_sum, max_subarray(row_sum)) return max_sum"},{"question":"Write a function `flatten_dictionary` that flattens a nested dictionary by concatenating keys. If a key happens to be nested inside other keys, you should concatenate all the keys names along the path, separated by dots (\'.\'). The given dictionary will not contain any arrays and will only contain keys and values that are either dictionaries or scalars (integers, strings, etc.). For example: ```python flatten_dictionary({ \\"Key1\\": \\"1\\", \\"Key2\\": { \\"a\\": \\"2\\", \\"b\\": \\"3\\", \\"c\\": { \\"d\\": \\"3\\", \\"e\\": { \\"\\": \\"1\\" } } } }) ``` Should return: ```python { \\"Key1\\": \\"1\\", \\"Key2.a\\": \\"2\\", \\"Key2.b\\": \\"3\\", \\"Key2.c.d\\": \\"3\\", \\"Key2.c.e.\\": \\"1\\" } ``` Another example: ```python flatten_dictionary({ \\"abc\\": 1, \\"def\\": {\\"ghi\\": 2, \\"jkl\\": [3, 4]} }) ``` Should return: ```python { \\"abc\\": 1, \\"def.ghi\\": 2, \\"def.jkl\\": [3, 4] } ``` Your task is to implement the `flatten_dictionary` function which takes a dictionary as an input and returns a new dictionary with flattened keys.","solution":"def flatten_dictionary(dictionary, parent_key=\'\', separator=\'.\'): Flattens a nested dictionary by concatenating keys. Args: dictionary (dict): The dictionary to flatten. parent_key (str): The base key in the recursion (used internally). separator (str): The separator to use when concatenating keys. Returns: dict: A new dictionary with flattened keys. items = [] for k, v in dictionary.items(): new_key = f\\"{parent_key}{separator}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, separator).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"A transportation company is building an automated delivery system. They have a network of delivery points represented as an undirected weighted graph. A delivery point can be a warehouse or a customer location. The company wants to ensure that every customer location is reachable from at least one warehouse and vice versa. To enhance the efficiency of their system, they need to evaluate the minimum cost required to achieve this. The task is to help the company find the Minimum Spanning Tree (MST) cost for the network. The nodes of the graph are labeled from 1 to n, where each node either represents a warehouse or a customer location. An undirected weighted edge represents a road with a given cost connecting two nodes. Specifically, your task is to find the MST for this graph, ensuring the connectivity conditions mentioned, and return its cost. Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges in the graph, respectively. Each of the next n lines contains a single character \'W\' or \'C\', indicating that the i-th node is a warehouse (\'W\') or a customer location (\'C\') respectively. Each of the next m lines contains three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) representing an undirected edge between node u and node v with a cost of w. It is guaranteed that there is at least one warehouse and one customer location in the graph. Output Output a single integer — the cost of the Minimum Spanning Tree that ensures all customer locations are reachable from at least one warehouse and vice versa. If it\'s impossible, output -1. Examples Input 6 7 W C C W C W 1 2 10 2 3 15 3 4 10 4 5 15 3 5 10 5 6 5 1 6 20 Output 50 Input 4 4 W C C W 1 2 10 2 3 10 3 4 10 4 1 10 Output 30","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges, warehouses, customers): parent = [] rank = [] mst_cost = 0 mst_edges = 0 for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_cost += w mst_edges += 1 union(parent, rank, x, y) if mst_edges != n - 1: return -1 connected_warehouses = set() connected_customers = set() for node in range(n): root = find(parent, node) if node + 1 in warehouses: connected_warehouses.add(root) if node + 1 in customers: connected_customers.add(root) if connected_warehouses & connected_customers: return mst_cost else: return -1 def minimum_cost_to_ensure_connectivity(n, m, node_types, edges): warehouses = set() customers = set() for i in range(n): if node_types[i] == \'W\': warehouses.add(i + 1) elif node_types[i] == \'C\': customers.add(i + 1) return kruskal(n, edges, warehouses, customers)"},{"question":"**All Star Code Challenge #30** Alice has been given a text message and needs to switch the case of every letter in the message to confuse her twin brother Bob. Every lowercase letter should become uppercase, and every uppercase letter should become lowercase. Non-alphabet characters should remain unchanged. Create a function called `switch_case(text)` that accepts a string argument. The function should return a new string with the case of every letter switched as described. ```python switch_case(\\"Hello World! Have a GREAT Day.\\") # \\"hELLO wORLD! hAVE A great dAY.\\" switch_case(\\"Python 3.8\\") # \\"pYTHON 3.8\\" switch_case(\\"123 ABC xyz\\") # \\"123 abc XYZ\\" switch_case(\\"\\") # \\"\\" ``` Note: - Only alphabetic characters should have their case switched. - Non-alphabetic characters should remain the same. - The function should handle an empty input string correctly.","solution":"def switch_case(text): Switches the case of every letter in the text. Lowercase letters become uppercase, and uppercase letters become lowercase. Non-alphabet characters remain unchanged. Args: text (str): The input string. Returns: str: The string with the case of letters switched. return text.swapcase()"},{"question":"Implement a program that simulates a simple calculator. You need to support the following operations: addition, subtraction, multiplication, and division. Each operation will be provided to your program in the form of a string, and you need to parse this string and perform the calculation. Constraints * The input string will be a valid arithmetic operation in the format \\"a operator b\\", where \'a\' and \'b\' are non-negative integers (0 ≤ a, b ≤ 10^6) and \'operator\' is one of \'+\', \'-\', \'*\', or \'/\'. * The division operation should perform integer division (i.e., truncate the result). * Division by zero should be handled appropriately by printing \\"Error: Division by zero\\". Input The input consists of multiple lines, each containing a single arithmetic operation in the format \\"a operator b.\\" The input ends with a line containing \\"end\\". Output For each arithmetic operation, print the result of the calculation. If there is a division by zero, print \\"Error: Division by zero\\". Examples Input 3 + 4 10 - 5 6 * 7 8 / 2 10 / 0 end Output 7 5 42 4 Error: Division by zero","solution":"def simple_calculator(input_lines): Simulates a simple calculator that supports addition, subtraction, multiplication, and division. Parameters: input_lines (list of str): A list of arithmetic operations in the format \\"a operator b\\". Returns: list of str: The results of the calculations or error messages. results = [] for line in input_lines: if line.strip().lower() == \\"end\\": break try: a, operator, b = line.split() a = int(a) b = int(b) if operator == \'+\': results.append(str(a + b)) elif operator == \'-\': results.append(str(a - b)) elif operator == \'*\': results.append(str(a * b)) elif operator == \'/\': if b == 0: results.append(\\"Error: Division by zero\\") else: results.append(str(a // b)) else: results.append(\\"Error: Invalid operator\\") except ValueError: results.append(\\"Error: Invalid input\\") return results"},{"question":"You are given a binary tree. The task is to calculate the average value of nodes on each level of the binary tree and return a list containing these averages. The order of the averages in the list should follow the level order traversal of the tree. Input: - The input consists of a binary tree represented by the root node. Output: - The output is a list of floating-point numbers representing the average value of nodes at each level of the tree. Example: Input: ``` 3 / 9 20 / 15 7 ``` Output: ``` [3.0, 14.5, 11.0] ``` Explanation: - The binary tree has 3 levels: - The first level has one node with value 3 -> average = 3.0 - The second level has two nodes with values 9 and 20 -> average = (9 + 20) / 2 = 14.5 - The third level has two nodes with values 15 and 7 -> average = (15 + 7) / 2 = 11.0 Note: - The number of nodes in the tree is in the range [1, 10^4]. - The node values are in the range [-10^5, 10^5].","solution":"from collections import deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def averageOfLevels(root: Optional[TreeNode]) -> List[float]: if not root: return [] levels = [] queue = deque([root]) while queue: level_size = len(queue) level_sum = 0 for _ in range(level_size): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) levels.append(level_sum / level_size) return levels"},{"question":"Given an array `A` of `n` integers, you need to process `q` queries. Each query can be one of the following types: 1. The format of the query: `1 l r x`. This query means that you need to add the integer `x` to all the elements of the array that have indexes from `l` to `r` (inclusive). 2. The format of the query: `2 l r`. This query means you need to compute and print the sum of all array elements from index `l` to `r` (inclusive). Indexing is 1-based in both the array and the queries. Input - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of elements in the array. - The second line contains `n` integers `A_1, A_2, ..., A_n` — the elements of the array. - The third line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. - The next `q` lines contain the queries. Each query is presented on a line in one of the formats described above. Output For each query of type `2`, print the result of the sum on a single line. Example Input 5 1 2 3 4 5 3 1 1 3 10 2 1 3 2 4 5 Output 36 9 Explanation The initial array is `[1, 2, 3, 4, 5]`. After the first query `1 1 3 10`, the array becomes `[11, 12, 13, 4, 5]`. The next query `2 1 3` asks for the sum of elements from index `1` to `3`, which is `11 + 12 + 13 = 36`. The last query `2 4 5` asks for the sum of elements from index `4` to `5`, which is `4 + 5 = 9`.","solution":"def process_queries(n, array, q, queries): Process the given queries on the array. :param n: int, number of elements in the array :param array: list of int, the initial array :param q: int, number of queries :param queries: list of tuples, each representing a query :return: list of int, the results of all sum queries results = [] for query in queries: if query[0] == 1: # Add x to elements from index l to r _, l, r, x = query for i in range(l - 1, r): array[i] += x elif query[0] == 2: # Calculate the sum of elements from index l to r _, l, r = query sum_result = sum(array[l-1:r]) results.append(sum_result) return results"},{"question":"*\\"Party Invitations - Cedric\'s Challenge\\". Cedric is organizing a party and wants to invite exactly `M` friends out of his friend list. However, Cedric has a peculiar way of inviting friends: he can only invite all friends between two numbered indexes `L` and `R` (inclusive) on his list at once. He wants your help to figure out if it\'s possible to invite exactly `M` friends in this peculiar way. Cedric gives you the number of friends `N` in his list and the integer `M`. You are tasked to determine if there exists a pair of indices `L` and `R` such that the number of friends invited is exactly `M`. ------ Input Format ------ - The first line of input contains a single integer `T`, the number of test cases. - Each test case consists of two space-separated integers `N` and `M`. ------ Output Format ------ For each test case, output \\"Possible\\" if there exists such a pair of indices `L` and `R`, and \\"Impossible\\" otherwise. Each letter of the output may be printed in either uppercase or lowercase, i.e., \\"possible\\", \\"POSSIBLE\\", and \\"PoSsIbLe\\" will all be treated as equivalent. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} 1 ≤ M ≤ N - The sum of `N` across all test cases won\'t exceed 5·10^{5}. ----- Sample Input ------ 5 5 3 4 2 3 3 6 7 8 5 ----- Sample Output ------ Possible Possible Possible Impossible Possible ----- Explanation ------ Test case 1: Cedric can choose friends from the 1st to the 3rd position. Test case 2: Cedric can choose friends from the 2nd to the 3rd position. Test case 3: Cedric can choose all 3 friends. Test case 4: It is not possible to invite exactly 7 friends out of 6. Test case 5: Cedric can choose friends from the 2nd to the 6th position.","solution":"def party_invitations(T, cases): results = [] for N, M in cases: if M <= N: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"Alan and Bob are working on an alien communication device. The device transmits messages as a sequence of binary numbers (0s and 1s). To ensure data integrity, they need to verify that every message has an equal number of 1s and 0s. If a message does not meet this condition, it must be rejected. Write a function `verify_message(string message)` that takes a binary string as input and returns `True` if the message has an equal number of 1s and 0s, and `False` otherwise. Example 1: Input: message = \\"1100\\" Output: True Example 2: Input: message = \\"1010\\" Output: True Example 3: Input: message = \\"100\\" Output: False Example 4: Input: message = \\"111000\\" Output: True Your Task: You do not need to read input or print anything. Your task is to complete the function `verify_message()` which takes a binary string as input parameter and returns a boolean indicating whether the message is valid (`True` for valid, `False` for invalid). Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(message) ≤ 10^7","solution":"def verify_message(message): Verifies if the given binary message has an equal number of 1s and 0s. Args: message (str): A binary string. Returns: bool: True if the message has an equal number of 1s and 0s, otherwise False. count_1 = sum(1 for char in message if char == \'1\') count_0 = len(message) - count_1 # Total length minus number of 1s gives number of 0s return count_1 == count_0"},{"question":"Given a string `s` containing only lowercase letters of the Latin alphabet and blank spaces, a word is defined as a sequence of consecutive non-space characters. Write a program that reverses the order of the words while maintaining the original spaces between them. For example, given the string \\" hello world \\", reversing the words would result in \\" world hello \\". Input: - A single line containing the string `s` of length n (1 ≤ n ≤ 10^5). Output: - A single line containing the modified string with the words in reverse order, but the spaces between them remaining in their original positions. Examples: Input: \\"hello world\\" Output: \\"world hello\\" Input: \\" lead and \\" Output: \\" and lead \\"","solution":"def reverse_words(s): Reverses the order of the words in the given string `s` while maintaining the original spaces between them. # Split the string into words and spaces parts = s.split(\' \') # Filter out the empty strings to get the words words = [part for part in parts if part] # Reverse the list of words words.reverse() # Create an iterator over the reversed words word_iter = iter(words) # Reconstruct the string with words and original spaces result = [] for part in parts: if part: result.append(next(word_iter)) else: result.append(\'\') return \' \'.join(result)"},{"question":"Alex is playing a game with a list of numbers. He starts with a list of `n` integers and performs `m` operations on it. Each operation is of one of the following two types: 1. Increase the value at a specific position by a given value. 2. Query the maximum value within a given range (inclusive). Your task is to implement a data structure that can handle these operations efficiently. # Input - The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 100,000) — the number of elements in the list and the number of operations, respectively. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^9) — the initial elements of the list. - The next `m` lines each describe an operation: - For an Increase operation, the line contains three integers `1 x v` (1 ≤ `x` ≤ `n`, 1 ≤ `v` ≤ 10^9) — increase the value at position `x` by `v`. - For a Query operation, the line contains three integers `2 l r` (1 ≤ `l` ≤ `r` ≤ `n`) — query the maximum value in the range from index `l` to `r`. # Output For each Query operation, print the maximum value in the specified range. # Example Input ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 3 1 ``` Output ``` 3 12 12 ``` Explanation: - Initially, the list is `[1, 2, 3, 4, 5]`. - The first query asks for the maximum value from index 1 to 3, which is `3`. - The first increase operation increments the value at index 2 by `10`, changing the list to `[1, 12, 3, 4, 5]`. - The second query again asks for the maximum value from index 1 to 3, which is now `12`. - The third query asks for the maximum value from index 2 to 5, which is `12`. - The second increase operation increments the value at index 3 by `1`, changing the list to `[1, 12, 4, 4, 5]`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree self.build(data) def build(self, data): # Fill the leaves of the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, pos, value): # Set value at position pos pos += self.n self.tree[pos] += value # Update the tree upwards while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): # Get the maximum value in the interval [left, right) result = -float(\'inf\') left += self.n right += self.n + 1 while left < right: if left % 2: result = max(result, self.tree[left]) left += 1 if right % 2: right -= 1 result = max(result, self.tree[right]) left //= 2 right //= 2 return result def process_operations(n, m, data, operations): seg_tree = SegmentTree(data) results = [] for op in operations: if op[0] == 1: _, x, v = op seg_tree.update(x - 1, v) elif op[0] == 2: _, l, r = op result = seg_tree.query(l - 1, r - 1) results.append(result) return results"},{"question":"Problem description In a distant magical land, there exists an enchanted forest where numerous trees are enchanted with various spells. A group of wizards has assigned you the task to identify and count the number of unique spells within specific segments of the forest. Each tree possesses exactly one spell (represented as an integer). Given multiple queries, each indicating a segment of the forest by defining a start and end position, you need to determine the number of unique spells in each specified segment. Input The first line of input contains an integer T, denoting the number of test cases. Each test case consists of: - The first line contains an integer N, denoting the number of trees in the forest. - The second line contains N integers, representing the spells on each tree. - The third line contains an integer Q, denoting the number of queries. - Each of the next Q lines contains two integers L and R, indicating the range of trees (from L to R, inclusive) for which you need to count the number of unique spells. Output For each query, print the number of unique spells in the given segment. Constraints 1 <= T <= 10 1 <= N <= 100000 1 <= Q <= 1000 1 <= L <= R <= N 1 <= spell[i] <= 100000 Example Input: 2 5 1 2 2 3 4 3 1 3 2 5 1 5 6 5 5 5 5 5 5 2 1 3 1 6 Output: 2 3 4 1 1","solution":"def count_unique_spells(T, test_cases): result = [] for case in test_cases: N, spells, Q, queries = case for L, R in queries: unique_spells = set(spells[L-1:R]) # L-1 and R to account for 0-based indexing result.append(len(unique_spells)) return result # Example usage: # T = 2 # test_cases = [ # (5, [1, 2, 2, 3, 4], 3, [(1, 3), (2, 5), (1, 5)]), # (6, [5, 5, 5, 5, 5, 5], 2, [(1, 3), (1, 6)]) # ] # print(count_unique_spells(T, test_cases)) # Expected output: [2, 3, 4, 1, 1]"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has a color represented by an integer. You are asked to determine if it\'s possible to assign a color from a given set of three distinct colors {0, 1, 2} to each vertex such that no two adjacent vertices share the same color. Input: The first line contains two integers n and m — the number of vertices and edges in the graph, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the edges of the graph. Output: Print \\"Yes\\" (without the quotes) if it is possible to color the graph using the three colors such that no two adjacent vertices have the same color. Print \\"No\\" (without the quotes) otherwise. Examples Input 3 3 1 2 2 3 3 1 Output No Input 4 4 1 2 2 3 3 4 4 1 Output Yes Note: In the first sample, the graph forms a triangle (3-cycle), and it is impossible to color it with three colors such that no two adjacent vertices share the same color. In the second sample, the graph forms a square (4-cycle), and it is possible to color it with three colors such that no two adjacent vertices share the same color. For example, coloring vertices 1, 2, 3, and 4 with colors 0, 1, 0, and 1, respectively, will satisfy the constraints.","solution":"def is_bipartite(graph, n): Helper function to check if a graph is bipartite using BFS color = [-1] * n queue = [] for start in range(n): if color[start] == -1: queue.append(start) color[start] = 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True def can_color_graph(vertices, edges): Returns \\"Yes\\" if it is possible to color the graph using three colors such that no two adjacent vertices share the same color. Otherwise, returns \\"No\\". graph = [[] for _ in range(vertices)] for edge in edges: u, v = edge graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) return \\"Yes\\" if is_bipartite(graph, vertices) else \\"No\\" # Example usage if __name__ == \\"__main__\\": vertices = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(can_color_graph(vertices, edges)) # Output: Yes"},{"question":"# Coding Assessment Question You are given two strings `s` and `t` consisting of lowercase English letters. Your task is to determine if you can transform string `s` into string `t` by deleting some (possibly zero) characters from `s` without changing the order of the remaining characters. In other words, you need to check if `t` is a subsequence of `s`. **Input** - The first line contains the string `s` with length `1 ≤ length(s) ≤ 1 000 000`. - The second line contains the string `t` with length `1 ≤ length(t) ≤ 1 000 000`. **Output** - Print `YES` if `t` is a subsequence of `s`. - Print `NO` otherwise. **Examples** **Input** ``` abcde ace ``` **Output** ``` YES ``` **Input** ``` abcde aec ``` **Output** ``` NO ``` **Explanation** - In the first example, \'ace\' is a subsequence of \'abcde\' as we can delete \'b\' and \'d\' and the remaining characters \'ace\' form the string \'t\'. - In the second example, \'aec\' is not a subsequence of \'abcde\' as character order cannot be changed.","solution":"def is_subsequence(s, t): Check if `t` is a subsequence of `s`. iter_s = iter(s) return all(char in iter_s for char in t) def subsequence_result(s, t): return \\"YES\\" if is_subsequence(s, t) else \\"NO\\""},{"question":"You are given a list of integers. Your task is to determine if the list contains a consecutive series of unique integers. A list is considered to have a consecutive series if it contains all integers from the minimum element to the maximum element present in the list. Input The first line contains n (1 ≤ n ≤ 10^5), where n denotes the number of integers in the list. The second line contains n space-separated integers, where each integer has a value in the range [-10^9, 10^9]. Output If the list contains a consecutive series of unique integers, print \\"CONSECUTIVE\\". Otherwise, print \\"NOT CONSECUTIVE\\". Examples Input 5 1 2 3 4 5 Output CONSECUTIVE Input 5 1 2 4 5 6 Output NOT CONSECUTIVE Input 3 5 3 4 Output CONSECUTIVE","solution":"def check_consecutive(nums): Determines if the given list contains a consecutive series of unique integers # Get the unique numbers unique_nums = set(nums) min_val = min(unique_nums) max_val = max(unique_nums) # Check if the list contains a consecutive series if len(unique_nums) == (max_val - min_val + 1): return \\"CONSECUTIVE\\" else: return \\"NOT CONSECUTIVE\\""},{"question":"A traveling salesman needs to visit n cities numbered from 1 to n and return to the starting city. The cost to travel between each pair of cities is given in a 2D matrix. Your task is to find the minimum possible travel cost to visit all cities exactly once and return to the starting city. **Input:** The first line contains an integer n (2 ≤ n ≤ 10), the number of cities. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the cost to travel from city i to city j (1 ≤ cost ≤ 1000). It is guaranteed that the cost to travel from a city to itself is 0. **Output:** Print a single integer representing the minimum possible travel cost. **Example:** Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80 **Note:** In the given example, the optimal solution is to travel the cities in the order 1 -> 2 -> 4 -> 3 -> 1, with a total cost of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def traveling_salesman(n, cost_matrix): Finds the minimum travel cost to visit all cities exactly once and return to the starting city. Arguments: n : int The number of cities. cost_matrix : list of list of int The cost matrix where cost_matrix[i][j] represents the cost to travel from city i to city j. Returns: int The minimum possible travel cost. cities = list(range(n)) all_permutations = itertools.permutations(cities[1:]) min_cost = float(\'inf\') for perm in all_permutations: current_cost = 0 k = 0 # Calculate the cost for the current permutation of cities for j in perm: current_cost += cost_matrix[k][j] k = j current_cost += cost_matrix[k][0] # Update the minimum cost if the current cost is lower if current_cost < min_cost: min_cost = current_cost return min_cost"},{"question":"Problem: Directory Tree Navigator You are tasked with developing a simplified directory tree navigator. The directory tree expands from a root directory and can have nested subdirectories and files. Your program will receive commands to either navigate through this directory tree or to list files and directories at a specific level. Operations to be handled are: - `cd <directory_name>`: Navigate into the given directory. - `cd ..`: Navigate to the parent directory. - `ls`: List all items in the current directory. Assume: - The root directory is named `root`. - Directory and file names are unique within the same directory. - The initial state when the program starts is the root directory. - Directories and their structures are predefined and provided as input. Your task is to write a program that takes these commands and provides the required output for each `ls` command. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) which denotes the number of directories and files. - The next `n` lines describe the directory structure. Each line contains a path to either a file or a directory. Paths use a slash `/` as the separator, starting from the root. - The next line contains an integer `m` (1 ≤ m ≤ 100), which represents the number of commands. - The following `m` lines contain commands (`cd <directory_name>`, `cd ..`, or `ls`). Output: - For each `ls` command, output the items (directories and files) in the current directory, one directory/file per line, in lexicographical order. If there are multiple `ls` commands, separate the outputs for different commands with a blank line. Example: Input: ``` 10 root/dir1 root/dir1/file1 root/dir1/file2 root/dir2 root/dir2/file3 root/dir2/file4 root/dir2/subdir1 root/dir2/subdir1/file5 root/file6 root/file7 8 ls cd dir1 ls cd .. cd dir2 ls cd subdir1 ls ``` Output: ``` dir1 dir2 file6 file7 file1 file2 file3 file4 subdir1 file5 ```","solution":"class DirectoryNavigator: def __init__(self, structure): self.structure = structure self.current_path = [\'root\'] self.build_tree() def build_tree(self): self.tree = {\'root\': {}} for path in self.structure: parts = path.split(\'/\') current = self.tree[\'root\'] for part in parts[1:]: # Skip \\"root\\" if part not in current: current[part] = {} current = current[part] def navigate(self, command): if command == \'cd ..\': if len(self.current_path) > 1: self.current_path.pop() elif command.startswith(\'cd \'): directory = command.split(\' \')[1] current = self.get_current_directory() if directory in current: self.current_path.append(directory) elif command == \'ls\': return sorted(self.get_current_directory().keys()) def get_current_directory(self): current = self.tree[\'root\'] for part in self.current_path[1:]: current = current[part] return current def directory_tree_navigator(n, structure, m, commands): navigator = DirectoryNavigator(structure) results = [] for command in commands: result = navigator.navigate(command) if result is not None: results.append(result) return results # Example usage if __name__ == \\"__main__\\": n = 10 structure = [ \\"root/dir1\\", \\"root/dir1/file1\\", \\"root/dir1/file2\\", \\"root/dir2\\", \\"root/dir2/file3\\", \\"root/dir2/file4\\", \\"root/dir2/subdir1\\", \\"root/dir2/subdir1/file5\\", \\"root/file6\\", \\"root/file7\\" ] m = 8 commands = [ \\"ls\\", \\"cd dir1\\", \\"ls\\", \\"cd ..\\", \\"cd dir2\\", \\"ls\\", \\"cd subdir1\\", \\"ls\\" ] results = directory_tree_navigator(n, structure, m, commands) for result in results: for item in result: print(item) print()"},{"question":"Alice and Bob are competitive programmers and they love to solve new and interesting problems. Recently, they came across a unique problem involving strings which they want to solve in the fastest time possible. However, they want you to do it first and provide them with the solution. The problem statement is as follows: Given a string `S`, Alice and Bob need to flip the case of each alphabetic character in the string (`lowercase` to `uppercase` and vice versa). For example, \'a\' should become \'A\' and \'A\' should become \'a\'. Non-alphabetic characters should remain unchanged. Additionally, they need to reverse the entire string after flipping the cases. Your task is to write a program that performs these operations and provides the modified string. Input: A single line containing the string `S` of length `N` (1 ≤ N ≤ 100). Output: A single line containing the modified string after case flipping and reversing. Example Input: Hello World! Example Output: !DLROw OLLEh","solution":"def flip_case_and_reverse(S): Flips the case of each alphabetic character in the string S and then reverses the entire string. Parameters: S (str): The input string. Returns: str: The modified string after case flipping and reversing. # Flip the case of each character flipped_string = \'\'.join(char.upper() if char.islower() else char.lower() for char in S) # Reverse the entire string reversed_string = flipped_string[::-1] return reversed_string"},{"question":"A group of friends are planning to play a game. They lay out N cards in a line, each card showing a number. They then decide to take turns picking cards from either end of the line, with the goal of maximizing the sum of the numbers on their own cards. The game ends when there are no more cards left to pick. Your task is to help the first player, who starts the game, to determine the maximum sum of numbers they can accumulate by the end of the game, assuming both players play optimally. -----Input:----- The first line of input contains an integer T, denoting the number of test cases. Then, T test cases follow. The first line of each test case contains an integer N, the number of cards. The second line contains N space-separated integers representing the values of the cards. -----Output:----- For each test case, output the maximum sum of numbers that the first player can accumulate. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ card value ≤ 1000 -----Example:----- Input: 2 4 1 2 9 4 3 6 2 3 Output: 10 8 -----Explanation:----- Case #1: First player picks 4, the second player picks 9. First player then picks 2, leaving 1 for the second player. So the sum for the first player is 4+2=6. However, if the first player picks 1 first, the second player will pick 9. First player then picks 4, leaving 2 for the second player. So the sum for the first player is 1+4=5. The optimal strategy for the first player is to pick 4, leading to the total sum of 10. Case #2: The first player picks 6. The second player picks 3, leaving 2 for the first player. So the sum for the first player is 6+2=8.","solution":"def maximum_sum(cards): n = len(cards) dp = [[0] * n for _ in range(n)] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if i == j: dp[i][j] = cards[i] else: dp[i][j] = max(cards[i] - dp[i + 1][j], cards[j] - dp[i][j - 1]) total_sum = sum(cards) first_player_sum = (total_sum + dp[0][n - 1]) // 2 return first_player_sum def process_test_cases(t, test_cases): results = [] for cards in test_cases: result = maximum_sum(cards) results.append(result) return results # Sample usage if __name__ == \\"__main__\\": t = 2 test_cases = [ [1, 2, 9, 4], [6, 2, 3] ] results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"Amy has a long list of students and she needs to manage their scores in her classroom. Each student has a unique id from 1 to n, and for simplicity, she tracks their scores as an array of integers, where scores[i] represents the score of the student with id i+1. She wants to calculate the average score for several subarrays of student scores. You are to help Amy by writing a program that takes in the scores of the students and a set of queries. Each query asks for the average score for students whose ids fall within a particular range. # Input: - The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000) - the number of students and the number of queries. - The second line contains n integers, scores[1], scores[2], ..., scores[n] (0 ≤ scores[i] ≤ 100) - representing the score of the students. - The next q lines each contain two integers, l and r (1 ≤ l ≤ r ≤ n) - representing the range of student ids for which the average score is needed. # Output: - For each query, print the average score (rounded to two decimal places) of students whose ids are within the range [l, r]. # Example: Input: ``` 5 3 50 90 80 60 70 1 3 2 5 1 5 ``` Output: ``` 73.33 75.00 70.00 ``` # Explanation: - For the first query, the range is [1, 3], so the average score is (50 + 90 + 80) / 3 = 73.33. - For the second query, the range is [2, 5], so the average score is (90 + 80 + 60 + 70) / 4 = 75.00. - For the third query, the range is [1, 5], so the average score is (50 + 90 + 80 + 60 + 70) / 5 = 70.00.","solution":"def calculate_average_scores(scores, queries): Calculate the average scores for given subarrays defined by queries. :param scores: List of integers representing student scores :param queries: List of tuples, where each tuple contains two integers (l, r) representing the range of student ids :return: List of average scores for each query, rounded to two decimal places averages = [] for l, r in queries: # As the problem states to use ids 1-indexed, we convert l and r to 0-indexed for python list slicing subarray = scores[l-1:r] average = sum(subarray) / len(subarray) averages.append(round(average, 2)) return averages"},{"question":"Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. For example, for the array `[3, 4, -1, 1]`, the first missing positive integer is `2`. For the array `[1, 2, 0]`, the first missing positive integer is `3`. Function description Complete the `findFirstMissingPositive` function in the editor below. `findFirstMissingPositive` takes the following parameter: - `int arr[]`: an array of integers Return `int`: the first missing positive integer Input Format An integer `n`, the length of the array. A list of `n` integers representing the elements of the array. Constraints - The array can contain duplicates. - The array can contain negative numbers. - The array can contain up to 10^6 elements. Output Format Return the smallest positive integer that does not exist in the array. Sample Input 4 3 4 -1 1 Sample Output 2 Explanation In the array [3, 4, -1, 1]: - Positive integers 1 and 3 are present. - The first missing positive integer is 2. Another Sample Input 3 1 2 0 Sample Output 3 Explanation In the array [1, 2, 0]: - Positive integers 1 and 2 are present. - The first missing positive integer is 3.","solution":"def findFirstMissingPositive(arr): Returns the first missing positive integer in the array. :param arr: List[int] :return: int n = len(arr) # First separate positive and non-positive numbers for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: # Swap elements to their correct positions arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Find the first index which is not in correct position for i in range(n): if arr[i] != i + 1: return i + 1 # If all positions are correct, then the missing integer is n+1 return n + 1"},{"question":"Maria is passionate about creating digital art and recently discovered a mesmerizing pattern known as a \\"Spiral Matrix\\". A spiral matrix of size n x n is a matrix where the numbers from 1 to n^2 are filled in a spiral order starting from the top-left corner and moving to the right initially. Given an integer n (1 ≤ n ≤ 500), generate this spiral matrix and provide the matrix as output. Input The input consists of a single integer n (1 ≤ n ≤ 500), representing the size of the spiral matrix. Output Output the matrix of size n x n, where each row of the matrix is printed in a separate line and numbers in each row are separated by a space. Example Input 3 Output 1 2 3 8 9 4 7 6 5 Input 4 Output 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Note In the first sample, for a 3x3 matrix, the sequence starts from 1 and fills the matrix in a spiral order until 9. In the second sample, for a 4x4 matrix, the sequence starts from 1 and fills the matrix in a spiral order until 16.","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix filled with numbers from 1 to n^2 in a spiral order. if n < 1 or n > 500: raise ValueError(\\"n must be between 1 and 500 inclusive.\\") matrix = [[0] * n for _ in range(n)] num = 1 top, bottom, left, right = 0, n - 1, 0, n - 1 while top <= bottom and left <= right: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Given an array of integers, you are to find the maximum sum of elements that can be obtained by selecting non-adjacent elements. You must create a function that solves this problem. For example, let\'s consider the array [3, 2, 5, 10, 7]. The optimal way to get the maximum sum without picking adjacent numbers is to pick 3, skip 2, pick 5, skip 10, and pick 7, making the maximum sum 3 + 5 + 7 = 15. Another example is the array [3, 2, 10, 1]. The optimal way is to pick 3, skip 2, pick 10, skip 1, making the maximum sum 3 + 10 = 13. -----Input----- - The input starts with an integer n (1 ≤ n ≤ 100,000) which represents the number of elements in the array. - The next line contains n integers separated by spaces representing the array elements. Each element is an integer a_i where 0 ≤ a_i ≤ 10,000. -----Output----- - Print one integer, representing the maximum sum of the elements that can be obtained by selecting non-adjacent elements. -----Example----- Input 5 3 2 5 10 7 Output 15 Input 4 3 2 10 1 Output 13","solution":"def max_non_adjacent_sum(arr): Find the maximum sum of non-adjacent elements in the array. Args: arr (list): list of integers Returns: int: maximum sum of non-adjacent elements if not arr: return 0 if len(arr) == 1: return arr[0] include = arr[0] exclude = 0 for i in range(1, len(arr)): new_exclude = max(include, exclude) include = exclude + arr[i] exclude = new_exclude return max(include, exclude)"},{"question":"Many years later, in a programming contest, Alice met an interesting challenge. Given an array of integers, Alice needs to determine if there is at least one pair of elements in the array such that their difference is equal to a given number `k`. Help Alice write a program to solve this problem! -----Input----- The first line contains an integer t (1 leq t leq 10^3) — the number of test cases. For each test case, the first line contains two integers n (2 leq n leq 10^5) — the size of the array and k (0 leq k leq 10^9) — the desired difference. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, print \\"YES\\" if there is at least one pair with the difference equal to k, otherwise print \\"NO\\". -----Examples----- Input 3 5 2 1 5 3 4 2 4 0 1 2 3 4 4 10 100 200 150 80 Output YES YES NO -----Note----- Test case 1: The pairs that satisfy the condition include (3, 1) and (4, 2). Test case 2: The difference can be 0 for any elements that are the same, but for this particular array, there are no duplicates, thus the answer is NO.","solution":"def check_difference_pair(t, test_cases): For each test case, determine if there exists at least one pair of elements in the array such that their difference is equal to a given number k. t: int - number of test cases test_cases: list of tuple - list that consists of tuples where each tuple contains (n: int, k: int, arr: list of int) Returns a list of \\"YES\\" or \\"NO\\" for each test case. results = [] for i in range(t): n, k, arr = test_cases[i] found = False arr_set = set(arr) for num in arr: if (num + k) in arr_set or (num - k) in arr_set: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are a software developer working on a text-processing application. One of the features required is implementing an algorithm that can analyze and process text based on specific rules. The task is to create a function that, given a string of lowercase English letters, returns the smallest number of operations needed to make the string a palindrome. An operation consists of changing one letter to any other letter. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a string S. ------ Output ------ For each test case, print a single line containing one integer ― the smallest required number of operations to turn the string into a palindrome. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{3} ------ Subtasks ------ Subtask #1 (50 points): 1 ≤ |S| ≤ 100 Subtask #2 (50 points): 1 ≤ |S| ≤ 10^{3} ----- Sample Input 1 ------ 3 abc aaa abca ----- Sample Output 1 ------ 1 0 1 ----- explanation 1 ------ Example case 1: Changing \'a\' or \'c\' to match the other will make the string a palindrome. Example case 2: The string is already a palindrome, so no operations are needed. Example case 3: Changing \'c\' to \'b\' will make the string a palindrome.","solution":"def min_operations_to_palindrome(T, test_cases): Given T, the number of test cases, and a list of strings, return a list with the smallest number of operations needed to make each string a palindrome. def min_ops(s): n = len(s) ops = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: ops += 1 return ops results = [] for case in test_cases: results.append(min_ops(case)) return results"},{"question":"A robot is placed on an infinite 2D grid at the origin (0, 0). The robot can move in four possible directions: up, down, left, and right. The robot\'s movement is represented by a string `D` where each character in the string corresponds to a move of the robot. \'U\' represents a move up, \'D\' represents a move down, \'L\' represents a move left, and \'R\' represents a move right. Given the movement string `D`, determine the number of unique positions the robot visits (including the initial position). -----Constraints----- - 1 ≦ |D| ≦ 10^5 - Each character in D is \'U\', \'D\', \'L\' or \'R\'. -----Input----- The input is given from Standard Input in the following format: D -----Output----- Print the number of unique positions the robot visits. -----Sample Input----- URDL -----Sample Output----- 4 By following the instructions in the movement string, the robot visits the positions: (0, 0) -> (0, 1) -> (1, 1) -> (1, 0) -> (0, 0) The unique positions are: (0, 0), (0, 1), (1, 1), (1, 0). Hence, the output is 4.","solution":"def unique_positions(D): Returns the number of unique positions the robot visits given the movement string D. # Initial position x, y = 0, 0 # Set to store unique positions visited = set() # Add the initial position visited.add((x, y)) # Move according to the direction string D for move in D: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 # Add new position to the visited set visited.add((x, y)) # Return the number of unique positions return len(visited)"},{"question":"You are working on a machine learning application that processes large data sets. One of the operations you need to perform frequently is calculating the sum of all elements in a subarray. Given a list of integers, you want to optimize this task by preprocessing the array to quickly answer multiple queries. Your task is to implement preprocessing of the array to enable efficient subarray sum calculations. Input The input consists of two parts: 1. The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array. 2. The second line contains n space-separated integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000), the elements of the array. 3. The third line contains an integer q (1 ≤ q ≤ 1000), the number of queries. 4. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the indices of the subarray for which you need to compute the sum. The indices are 1-based. Output For each query, output the sum of the elements in the subarray a[l-1] to a[r-1] inclusive. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15 Explanation of example - For the first query (1,3), the sum of the subarray [1,2,3] is 1+2+3=6. - For the second query (2,4), the sum of the subarray [2,3,4] is 2+3+4=9. - For the third query (1,5), the sum of the subarray [1,2,3,4,5] is 1+2+3+4+5=15.","solution":"def preprocess_array(arr): This function computes the prefix sums for the given array. Parameters: arr (list): The list of integers to preprocess. Returns: list: The prefix sums array. prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): prefix_sums[i+1] = prefix_sums[i] + arr[i] return prefix_sums def subarray_sum(prefix_sums, l, r): This function calculates the sum of elements from index l to r using the prefix sums. Parameters: prefix_sums (list): The list of prefix sums. l (int): The left index of the subarray (1-based index). r (int): The right index of the subarray (1-based index). Returns: int: The sum of the elements from index l to r. return prefix_sums[r] - prefix_sums[l-1]"},{"question":"Fibonacci matrices are used in several areas of mathematics and algorithms, notably optimization. Given a 2x2 matrix M with elements: ``` M = [a, b] [c, d] ``` You can calculate the nth power of M, denoted as M^n. To raise this matrix to the nth power efficiently, use matrix exponentiation. Given the constraints: 1 ≤ a, b, c, d ≤ 10^9 1 ≤ n ≤ 10^18 Write a function that takes the matrix M and the integer n, and returns the resulting matrix after exponentiation modulo 1000000007. Input The first line contains four space-separated integers a, b, c, and d representing the elements of the matrix M. The second line contains an integer n. Output Print four space-separated integers representing the resulting matrix after exponentiation modulo 1000000007. Example Input 2 3 4 5 2 Output 16 21 28 37 Input 1 1 1 0 5 Output 8 5 5 3","solution":"MOD = 1000000007 def matrix_mult(A, B, mod=MOD): return [ [ (A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod, ], [ (A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod, ] ] def matrix_pow(M, n, mod=MOD): result = [[1, 0], [0, 1]] # Identity matrix base = M while n > 0: if n % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) n //= 2 return result def matrix_exponentiation(a, b, c, d, n): M = [[a, b], [c, d]] result = matrix_pow(M, n) return result[0][0], result[0][1], result[1][0], result[1][1] # Example usage a, b, c, d = 2, 3, 4, 5 n = 2 print(matrix_exponentiation(a, b, c, d, n))"},{"question":"Given an array of integers and a target sum, write a function that finds two distinct elements in the array that add up to the target sum. If such a pair exists, return the indices of these two elements as a list. If no such pair exists, return an empty list. Your solution should satisfy the following constraints: - You may assume that each input would have exactly one solution, and you may not use the same element twice. - The solution should be efficient with time complexity better than O(n^2). You can assume the input array will have at least two integers and at most 10,000 integers. The integers in the array can be positive, negative, or zero. Example: ``` array = [2, 7, 11, 15], target = 9 Output: [0, 1] array = [3, 2, 4], target = 6 Output: [1, 2] ```","solution":"def two_sum(nums, target): Given a list of integers (nums) and a target integer (target), return indices of two distinct elements that add up to the target sum. Args: nums (list of int): List of integers. target (int): Target sum. Returns: list of int: Indices of the two elements, or an empty list if none exists. num_idx = {} for idx, num in enumerate(nums): complement = target - num if complement in num_idx: return [num_idx[complement], idx] num_idx[num] = idx return []"},{"question":"Vicky is planning for several events in the coming days. He can schedule only one event per day and he has limited time available over a period of D days. He has several events, each requiring a specific number of consecutive days to complete. Vicky wants to know if he can find a way to fit all events within the available days. ------ Input Format ------ - The first line will contain a single integer T denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer D, the number of days available. - The second line of each test case contains an integer N, the number of events. - The next line contains N space-separated integers, where the i-th integer represents the number of consecutive days required for the i-th event. ------ Output Format ------ For each test case, output a single line: \\"POSSIBLE\\" if Vicky can schedule all events within D days and \\"IMPOSSIBLE\\" otherwise. You may print each character of each string in uppercase or lowercase (for example, the strings \\"POSSIBLE\\", \\"possible\\", \\"Possible\\" and \\"POSSIBLE\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ D ≤ 1000 1 ≤ N ≤ 100 1 ≤ text{days required for each event} ≤ 1000 ------ Sample Input 1 ------ 2 10 3 2 3 4 5 3 2 2 2 ------ Sample Output 1 ------ POSSIBLE IMPOSSIBLE ------ Explanation 1 ------ Test case 1: Vicky can fit all three events as follows: - Event 1: Day 1, Day 2 (2 days) - Event 2: Day 3, Day 4, Day 5 (3 days) - Event 3: Day 6, Day 7, Day 8, Day 9 (4 days) Test case 2: The total number of days required for all events is 2 + 2 + 2 = 6, which cannot fit within the given 5 days.","solution":"def can_schedule_events(test_cases): results = [] for case in test_cases: D, N, events = case total_days_needed = sum(events) if total_days_needed <= D: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): D = int(lines[index]) N = int(lines[index + 1]) events = list(map(int, lines[index + 2].split())) test_cases.append((D, N, events)) index += 3 return T, test_cases def main(input_str): _, test_cases = parse_input(input_str) results = can_schedule_events(test_cases) return \'n\'.join(results)"},{"question":"Alice and Bob are playing a game with strings. Alice gives Bob a string and tells him to transform it by performing a series of operations. An operation consists of selecting any two adjacent characters in the string and swapping them. The goal for Bob is to transform the given string into a target string in the minimum number of operations. Given the initial string and the target string, determine the minimum number of adjacent swaps required to transform the initial string into the target string. If it is impossible to transform the initial string into the target string, return `-1`. -----Input----- The input consists of two lines. - The first line contains the string `initial` (1 le |initial| le 10^5) representing the initial string. - The second line contains the string `target` (1 le |target| le 10^5) representing the target string. Both `initial` and `target` strings consist of lowercase English letters. -----Output----- Output a single integer, which is the minimum number of adjacent swaps required to transform the initial string into the target string. If it is impossible to transform the initial string into the target string, output `-1`. -----Example----- Input abcdef abcfde Output 2 Input ab ba Output 1 Input abc def Output -1 -----Note----- In the first example, you can swap the characters at positions 4 and 5 to get \\"abcdfe\\", and then swap the characters at positions 5 and 6 to get \\"abcfde\\". Thus, the total number of swaps required is 2. In the second example, you can swap the characters at positions 1 and 2 to get \\"ba\\". Thus, the total number of swaps required is 1. In the third example, it is impossible to transform the initial string into the target string, so the output is `-1`.","solution":"def min_adjacent_swaps(initial, target): Returns the minimum number of adjacent swaps required to transform the initial string into the target string. If it\'s impossible, return -1. if sorted(initial) != sorted(target): return -1 initial_list = list(initial) target_list = list(target) n = len(initial) swaps = 0 # We will iterate over target string for i in range(n): # If character is already in correct position, continue if initial_list[i] == target_list[i]: continue # Find the position where the current target character is located in the initial list j = i while initial_list[j] != target_list[i]: j += 1 # Now swap the characters starting from position j to i while j > i: initial_list[j], initial_list[j-1] = initial_list[j-1], initial_list[j] swaps += 1 j -= 1 return swaps"},{"question":"A popular arcade game at the local funfair involves launching a projectile at a series of balloons arranged in a straight line. Each balloon has a specific strength, and to pop a balloon, the projectile must have a higher or equal strength. The projectile itself can gain strength by passing through other balloons first. Formally, the strength of the projectile increases by the strength of each balloon it pops. You want to find the minimum original strength the projectile must have to pop all balloons in the line. Additionally, if the projectile passes through a balloon with a certain strength, its original strength must be at least as strong as the most challenging balloon it passes based on their indices. Given the strengths of the balloons in the line, determine the minimum strength needed for the projectile to pop all the balloons. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of balloons. The next line contains n integers a_i (1 le a_i le 10^9) — representing the strength of each balloon in the line. -----Output----- Print a single integer — the minimum original strength the projectile must have to pop all balloons. -----Example----- Input 5 3 1 4 1 5 Output 4 -----Note----- In the example, if the projectile starts with a strength of 4, it can: - pop the first balloon (strength 3), and its strength becomes 4 + 3 = 7 - pop the second balloon (strength 1), and its strength becomes 7 + 1 = 8 - pop the third balloon (strength 4), and its strength becomes 8 + 4 = 12 - pop the fourth balloon (strength 1), and its strength becomes 12 + 1 = 13 - pop the fifth balloon (strength 5), and its strength becomes 13 + 5 = 18 Hence, 4 is the minimum strength required to ensure the projectile can pop all the balloons, considering the balloon with the highest strength along its path is 5.","solution":"def min_initial_strength(n, a): Function to determine the minimum initial strength required for the projectile to pop all the balloons. Parameters: n (int): The number of balloons. a (list): A list of integers representing the strengths of the balloons. Returns: int: The minimum initial strength required. max_strength = max(a) return max_strength"},{"question":"Chef wants to prepare dishes for a guest and has a list of n ingredients. However, some ingredients conflict with each other and cannot be used together. Chef needs your help to determine if he can use all ingredients without any conflicts. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) - the number of ingredients. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1) where ai indicates whether the i-th ingredient is conflicting (1) or non-conflicting (0). -----Output----- Print \\"YES\\" or \\"NO\\" (without the quotes) indicating whether Chef can use all ingredients without any conflicts. -----Examples----- Input 3 0 1 0 Output NO Input 4 0 0 0 0 Output YES","solution":"def can_use_all_ingredients(n, ingredients): Determines if all ingredients can be used without conflicts. Parameters: n (int): The number of ingredients. ingredients (list of int): A list of integers where 0 indicates non-conflicting and 1 indicates conflicting. Returns: str: \'YES\' if there are no conflicts, \'NO\' otherwise. return \\"NO\\" if 1 in ingredients else \\"YES\\""},{"question":"Your task is to write a function `isUniqueString`. This function should take a single argument `s`, which is a string, and return `True` if all the characters in the string are unique and `False` if there are any duplicate characters. For example: ```isUniqueString(\\"apple\\")``` should return `False` because \'p\' appears more than once. ```isUniqueString(\\"orange\\")``` should return `True` because all characters are unique.","solution":"def isUniqueString(s): Returns True if all characters in the string s are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a program that processes a list of student grades and categorizes them into different grades according to the following grading scheme: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 The program should then calculate the number of students that fall into each grade category and output these numbers. Input A list of integers representing the grades of the students. Each integer is in the range of 0 to 100. Output The number of students in each grade category, in the following format: A: number of students in grade A B: number of students in grade B C: number of students in grade C D: number of students in grade D F: number of students in grade F Examples Input [85, 92, 78, 64, 45, 88, 100, 73, 68, 91, 50] Output A: 3 B: 2 C: 2 D: 2 F: 2 Input [95, 84, 79, 82, 99, 65, 87, 54, 67, 72, 88, 91] Output A: 3 B: 4 C: 2 D: 2 F: 1","solution":"def categorize_grades(grades): Categorize a list of grades into grade ranges and return the count of each category. grade_categories = {\'A\': 0, \'B\': 0, \'C\': 0, \'D\': 0, \'F\': 0} for grade in grades: if 90 <= grade <= 100: grade_categories[\'A\'] += 1 elif 80 <= grade <= 89: grade_categories[\'B\'] += 1 elif 70 <= grade <= 79: grade_categories[\'C\'] += 1 elif 60 <= grade <= 69: grade_categories[\'D\'] += 1 elif 0 <= grade <= 59: grade_categories[\'F\'] += 1 return grade_categories"},{"question":"You are given an array of integers, that forms a sequence of numbers. The array is called **\\"almost sorted\\"** if the difference between any two adjacent elements is either 0 or 1. For example, arrays [1, 1, 2, 2, 3] and [5, 4, 4, 5, 6] are almost sorted, but [1, 3, 5, 5, 7] is not. Given an array of integers, determine whether it is almost sorted. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains a single integer n (2le nle 200) -- the length of the array. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9). -----Output----- For each test case, output \\"YES\\" if the array is almost sorted. Otherwise, output \\"NO\\". -----Example----- Input 3 5 1 1 2 2 3 4 1 3 5 5 5 5 5 5 5 5 Output YES NO YES -----Note----- In the first test case, the differences between adjacent elements are 0, 1, 0, and 1, hence the array is almost sorted. In the second test case, the difference between the first pair of adjacent elements is 2, hence the array is not almost sorted. In the third test case, the difference between all adjacent elements is 0, hence the array is almost sorted.","solution":"def is_almost_sorted(n, array): Determine whether the given array is almost sorted. :param n: Length of the array :param array: List of integers :return: \\"YES\\" if the array is almost sorted, otherwise \\"NO\\" for i in range(n - 1): if abs(array[i] - array[i + 1]) > 1: return \\"NO\\" return \\"YES\\" def main(t, test_cases): Process multiple test cases and return results for each. :param t: Number of test cases :param test_cases: List of tuples (n, array) for each test case :return: List of results results = [] for n, array in test_cases: results.append(is_almost_sorted(n, array)) return results"},{"question":"Alien Mining Operations Humanity has expanded its mining operations to distant alien planets. On Planet Zog, there are N mining zones, aligned in a straight line and numbered from 1 to N. Each mining zone has a certain ore yield per day. The ore yields of these zones are described by the array A, where Ai represents the yield of the i-th zone. Due to unstable tectonic conditions on Planet Zog, each day, a series of earthquakes can affect the mining zones, causing changes in ore yield. The International Committee for Planetary Mining (ICPM) has introduced a new technology that can absorb the seismic energy and stabilize the tectonic conditions in mining zones, thus restoring the ore yield back to 100% of its original value post-earthquake. The ICMP decides to install K of these devices such that they maximize the possible cumulative ore yield for that day across all zones. For each dataset, your task is to determine the maximum cumulative ore yield achievable after optimally placing the K devices. Input The input consists of multiple datasets. Each dataset follows this format: > N K > A1 A2 A3 ... AN The first line of each dataset contains the number of mining zones N (1 ≤ N ≤ 10^5) and the number of devices K (1 ≤ K ≤ N). The second line contains N integers representing the ore yields of each mining zone before the earthquake. An ore yield is a non-negative integer not exceeding 10^9. The end of the input is represented by a single line \\"0 0\\". Output For each dataset, output a single integer representing the maximum possible cumulative ore yield after optimally placing the K stabilization devices. Example Input 5 2 10 20 30 40 50 6 3 1 5 3 2 8 7 0 0 Output 140 23","solution":"def max_cumulative_yield(inputs): results = [] for data in inputs: N, K, A = data if N == 0 and K == 0: break # Sort the array in descending order to get the highest yields to place the devices A_sorted = sorted(A, reverse=True) # Take the sum of the top K yields after placing the devices max_yield = sum(A_sorted[:K]) results.append(max_yield) return results"},{"question":"A **run-length encoding (RLE)** is a simple form of data compression in which consecutive occurrences of the same data value are replaced by a single data value and a count. For example, the string `\\"aaabbbbcc\\"` would be represented as `[(\'a\', 3), (\'b\', 4), (\'c\', 2)]`. Given a string, implement a function that returns its run-length encoding as a list of tuples, each containing a character and its frequency. ```Input```: A string of characters. ```Output```: A list of tuples where each tuple is of the form `(character, frequency)`. Example: ```python run_length_encoding(\\"aaabbbbcc\\") == [(\'a\', 3), (\'b\', 4), (\'c\', 2)] run_length_encoding(\\"aaaaa\\") == [(\'a\', 5)] run_length_encoding(\\"abc\\") == [(\'a\', 1), (\'b\', 1), (\'c\', 1)] ```","solution":"def run_length_encoding(s): Returns the run-length encoding of a string as a list of tuples (character, frequency). if not s: return [] encoding = [] previous_char = s[0] count = 1 for char in s[1:]: if char == previous_char: count += 1 else: encoding.append((previous_char, count)) previous_char = char count = 1 # Append the last character and its count encoding.append((previous_char, count)) return encoding"},{"question":"A tree is a simple graph with no cycles. The diameter of a tree is the length of the longest path between any two nodes. Given a tree with n nodes, node 1 always being the root, write a function to find the diameter of the tree. Each test case consists of n (- 1 le n le 10^4 ): total number of vertices and n-1 tuples of two integers representing the edges between the vertices. Print the diameter for each test case as a single integer. -----Input----- First line contains integer t (1 le t le 10^4 ): number of test cases. For each test case: First line contains integer n: the number of vertices in the tree. Next n-1 lines contain two integers u and v (1 le u,v le n): representing an edge between node u and node v. -----Output----- For each test case, print the diameter of the given tree. -----Example---- Input 3 4 1 2 1 3 3 4 5 1 2 1 3 2 4 2 5 6 1 2 1 3 2 4 2 5 4 6 Output 3 3 4 -----Note----- In the first test case, the tree has 4 nodes with 3 edges. The longest path is from node 4 to node 2 passing through nodes 3 and 1: length = 3. In the second test case, the longest path is from node 4 to node 5 passing through nodes 2 and 1 with a total length of 3. In the third test case, the longest path is from node 6 to node 3 with a total length of 4.","solution":"from collections import deque, defaultdict def tree_diameter(n, edges): if n == 1: return 0 # Build the adjacency list of the tree adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # BFS to find the farthest node from an arbitrary start node def bfs(start): visited = [-1] * (n + 1) queue = deque([start]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in adj[node]: if visited[neighbor] == -1: queue.append(neighbor) visited[neighbor] = visited[node] + 1 if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Running bfs from an arbitrary node (root = 1) farthest_node, _ = bfs(1) # Running bfs from the farthest node found from the initial bfs _, diameter = bfs(farthest_node) return diameter def process_test_cases(test_cases): results = [] for n, edges in test_cases: results.append(tree_diameter(n, edges)) return results"},{"question":"Largest Possible Time (⏱️) You need to implement a function called \\"**largestTimeFromDigits**\\" that will accept an array of 4 digits (from 0 to 9) and return a string representing the largest possible time that can be formed in 24-hour format (HH:MM). If no valid time can be made, the function should return an empty string. For example, if the input array is `[1, 2, 3, 4]`, the largest valid time you can form is `\\"23:41\\"`. But for an input array `[5, 5, 5, 5]`, since no valid time can be made, the function should return `\\"\\"`. # Example: ``` digits = [1, 2, 3, 4] largestTimeFromDigits(digits) // \\"23:41\\" ``` ``` digits = [0, 0, 0, 0] largestTimeFromDigits(digits) // \\"00:00\\" ``` ``` digits = [5, 5, 5, 5] largestTimeFromDigits(digits) // \\"\\" ``` You may assume: - The array `arr` will always have exactly 4 elements. - All elements in the array will be between 0 and 9. - Utilize all 4 digits.","solution":"from itertools import permutations def largestTimeFromDigits(digits): Returns the largest possible time in 24-hour format (HH:MM) that can be formed by the given 4 digits. If no valid time can be made, returns an empty string. max_time = -1 # Generate all possible permutations for perm in permutations(digits): hh, mm = perm[:2], perm[2:] hours = hh[0] * 10 + hh[1] minutes = mm[0] * 10 + mm[1] # Validate time if 0 <= hours <= 23 and 0 <= minutes <= 59: max_time = max(max_time, hours * 60 + minutes) if max_time == -1: return \\"\\" # Convert back to HH:MM format max_hours, max_minutes = divmod(max_time, 60) return f\\"{max_hours:02}:{max_minutes:02}\\""},{"question":"You are given an array of non-negative integers `a` representing the heights of several histograms of width 1, lined up adjacent to each other. Each histogram\'s width is the same and equal to 1. You need to determine the maximum rectangular area that can be formed within the bounds of these histograms. -----Input----- The first line contains one integer `n` (1 le n le 10^5) — the number of histograms. The second line contains `n` non-negative integers a_i (0 le a_i le 10^9), where a_i is the height of the i-th histogram. -----Output----- Print a single integer — the maximum rectangular area that can be formed within the bounds of these histograms. -----Example----- Input 7 2 1 5 6 2 3 1 Output 10 Explanation: The maximum rectangular area in the given histogram is formed by the histograms with heights 5 and 6, which gives us a rectangle of area 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): This function takes a list of heights of histograms and returns the maximum rectangular area possible within the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top = stack.pop() if not stack: area = heights[top] * index else: area = heights[top] * (index - stack[-1] - 1) max_area = max(max_area, area) while stack: top = stack.pop() if not stack: area = heights[top] * index else: area = heights[top] * (index - stack[-1] - 1) max_area = max(max_area, area) return max_area"},{"question":"You are given a matrix of dimensions N x M, filled with integers. Your goal is to find the submatrix with the maximum sum. The submatrix should have at least one element. Constraints: * 1 ≤ N, M ≤ 100 * -1000 ≤ matrix[i][j] ≤ 1000 Input: The input is given from Standard Input in the following format: N M matrix[1][1] matrix[1][2] ... matrix[1][M] matrix[2][1] matrix[2][2] ... matrix[2][M] : matrix[N][1] matrix[N][2] ... matrix[N][M] Output: Output a single integer which is the sum of the submatrix with the maximum sum. Examples: Input: 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output: 29 Input: 2 2 -1 -2 -3 -4 Output: -1","solution":"def max_submatrix_sum(matrix): Returns the maximum sum of any submatrix within the given matrix. if not matrix or not matrix[0]: return 0 N = len(matrix) M = len(matrix[0]) max_sum = float(\'-inf\') # Apply Kadane\'s Algorithm in 2D for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def kadane(arr): Helper function to find the maximum sum subarray in a 1D array. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"In the kingdom of Zoltar, magic potions are used to enhance the abilities of warriors. Each warrior needs a specific amount of potion to reach their full potential. However, the potion is very expensive, and Zoltar must be strategic in his purchases. The magic shop offers a discount if Zoltar buys in bulk. The magic shop offers the following deal: - Buy N liters of potion, and get K liters for free. Given the total amount of potion that Zoltar needs to buy for his warriors, your task is to determine the minimum number of liters he must pay for, to achieve at least the required total amount. # Input - The first line contains an integer T, the number of test cases. - Each test case consists of three integers: required, N, and K. - required is the total liters of potion Zoltar needs to buy. - N is the number of liters that triggers the bulk discount. - K is the number of free liters obtained with the bulk discount. # Output For each test case, output the minimum number of liters Zoltar must pay for. # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ required ≤ 10^9 - 1 ≤ N ≤ 10^9 - 0 ≤ K ≤ 10^9 # Example Input: ``` 3 10 3 1 20 4 2 25 5 0 ``` Output: ``` 8 14 25 ``` # Explanation - In the first case: For every 3 liters bought, Zoltar gets 1 extra liter (3+1=4 liters). To get at least 10 liters, he can buy 8 liters (6 paid + 2 free = 8 liters). - In the second case: For every 4 liters bought, Zoltar gets 2 extra liters (4+2=6 liters). To get at least 20 liters, he can buy 14 liters (12 paid + 6 free = 18 liters, then buy 2 more liters to make 20). - In the third case: No discount applied since K=0. Hence, Zoltar needs to buy all 25 liters directly.","solution":"def minimum_liters(required, N, K): Determine the minimum number of liters Zoltar must pay for to get at least the required amount of potion. # Calculate the number of liters that make a complete discount cycle total_liters_per_cycle = N + K # Calculate number of full cycles required full_cycles = required // total_liters_per_cycle # Calculate the remaining liters after full cycles remaining_liters = required % total_liters_per_cycle # Calculate the total paid liters for full cycles paid_liters = full_cycles * N # Calculate additional liters required after full cycles if remaining_liters > 0: # If the remaining liters exceed N, we have to add another cycle if remaining_liters > N: paid_liters += N else: # Otherwise, pay for the remaining liters only paid_liters += remaining_liters return paid_liters def process_cases(cases): Processes multiple test cases and returns the results as a list. results = [] for case in cases: required, N, K = case result = minimum_liters(required, N, K) results.append(result) return results"},{"question":"Given a string of characters, determine if it can be rearranged to form a palindrome. A string that can be rearranged to form a palindrome will have no more than one character with an odd count of appearances. Palindromes are strings that read the same backward and forward. ```if:python Complete the function `can_form_palindrome()` that will take a single string as input and return `True` if the string can be rearranged to form a palindrome, otherwise return `False`. ``` ```if-not:python Complete the function `canFormPalindrome()` that will take a single string as input and return `true` if the string can be rearranged to form a palindrome, otherwise return `false`. ``` Examples ```if-not:python ~~~js canFormPalindrome(\\"civic\\") == true canFormPalindrome(\\"ivicc\\") == true canFormPalindrome(\\"hello\\") == false canFormPalindrome(\\"aabbccdde\\") == true canFormPalindrome(\\"abcabc\\") == true ~~~ ``` ```if:python ~~~py can_form_palindrome(\\"civic\\") == True can_form_palindrome(\\"ivicc\\") == True can_form_palindrome(\\"hello\\") == False can_form_palindrome(\\"aabbccdde\\") == True can_form_palindrome(\\"abcabc\\") == True ~~~ ```","solution":"from collections import Counter def can_form_palindrome(s): Determines if the string `s` can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Rahul is working on a program to manage user IDs for an application. Each user is assigned a unique ID starting from 1 to N. However, sometimes users are deactivated, and their IDs become available for reassignment. Given a list of N-1 active user IDs, Rahul needs to identify the ID of the inactive user. Help Rahul by writing a function that finds the inactive ID. Example 1: Input: N = 6 userIDs[] = {1, 2, 4, 3, 6} Output: 5 Explanation: Rahul has assigned 6 IDs, but only 5 user IDs are active. Hence the missing ID is 5. Example 2: Input: N = 3 userIDs[] = {3, 1} Output: 2 Explanation: Three IDs were assigned but only 2 are active, so the missing ID is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findInactiveID() which takes the array userIDs[] and its size N as input and returns the missing user ID. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 ≤ N ≤ 10^4 1 ≤ userIDs[i] ≤ 10^4 Size of the array userIDs[] = N-1","solution":"def findInactiveID(N, userIDs): Returns the missing user ID from the list of active user IDs. total_sum = N * (N + 1) // 2 userIDs_sum = sum(userIDs) return total_sum - userIDs_sum"},{"question":"Mary has a peculiar habit of arranging her book collection. She categorizes them by genres and then she arranges books within each genre in a sequence of different arrangements. To make things more interesting, she wants to find out the number of unique ways she can arrange books of different genres such that no two books of the same genre are adjacent to each other. Suppose she has `n` books of genre A and `m` books of genre B. Can you help her determine the number of such valid arrangements? Write a program to find the number of valid arrangements of Mary\'s books where no two books of the same genre are placed next to each other. Input: The number of books in genre A (`n`) and the number of books in genre B (`m`). Output: An integer representing the number of valid arrangements of the books. If it’s not possible to arrange the books under the given conditions, output `ERROR`. Note that: - Input values will be positive integers. - It is guaranteed that the arrangement is possible if and only if the absolute difference between `n` and `m` is at most 1. SAMPLE INPUT: 3 2 SAMPLE OUTPUT: 10","solution":"def count_valid_arrangements(n, m): Returns the number of valid arrangements of books such that no two books of the same genre are adjacent to each other. if abs(n - m) > 1: return \\"ERROR\\" # Calculate factorial for n and m def factorial(x): if x == 0 or x == 1: return 1 return x * factorial(x - 1) # Calculate number of valid arrangements total_arrangements = factorial(n + m) // (factorial(n) * factorial(m)) return total_arrangements"},{"question":"Taro and Jiro are playing a game involving a sequence of integers. The game works as follows: - They take turns, with Taro going first. - On each turn, a player must choose two adjacent elements in the sequence and remove the larger of the two (if they are equal, the player can remove either one). The sequence is then updated and the turn passes to the other player. The game continues until there is only one element left in the sequence. The player who cannot make a move (because there\'s only one element left) loses the game. Assume both players play optimally. Determine whether Taro will win or lose the game. Constraints: * 2 leq N leq 1000 * 1 leq A_i leq 10^9 * All values in input are integers. Input: Input is given from Standard Input in the following format: N A_1 A_2 A_3 ... A_N Output: Print \\"Taro\\" (without quotes) if Taro will win the game, otherwise print \\"Jiro\\". Examples: Input: 3 2 4 3 Output: Taro Input: 2 5 10 Output: Jiro","solution":"def determine_winner(N, sequence): Determines the winner of the game between Taro and Jiro. Parameters: - N (int): The length of the sequence. - sequence (list of int): The sequence of integers. Returns: - str: \\"Taro\\" if Taro wins, otherwise \\"Jiro\\". if N % 2 == 1: return \\"Taro\\" else: return \\"Jiro\\""},{"question":"Dragon Protection Squad operates in a forest where they patrol different sectors to ensure the dragons\' safety. Each squad member is assigned a certain sector, and they report to the Squad Leader. If sector S has the facility F with certain protection level, then all members will follow the command from S to protect F with the given collaboration percentage of protection. Each facility is being monitored by multiple sectors, and each team provides different levels of security which sums up to the total security level of the facility. You have to design a structure for assigning protection levels and provide results for certain queries when commanded by the Squad Leader. Given a forest with N sectors numbered from 1 to N (with 1 being the Squad Leader\'s sector) and M queries to either update protection levels or to report total security level for a facility. Each sector i is initially assigned a protection level based on the provided data. The queries can be of the type: - \\"P S F\\" - Calculate and report the total protection level for the facility F provided by all sectors that report to sector S, including S itself. - \\"U S x\\" - Update the protection level of sector S to the value x. Input Format: - The first line will contain integers N and M, representing the number of sectors and the number of queries. - The second line will contain N nonnegative integers, each representing the initial protection levels of the N sectors. - The following N-1 lines will contain pairs of integers (u, v), signifying the reporting structure (either u reports to v or vice-versa). - The next M lines will contain a query in one of the two formats \\"P S F\\" or \\"U S x\\". Output Format: For each query of type \\"P S F\\", output the total protection level of the facility F provided by all the sectors under sector S. Constraints: 1 ≤ N ≤ 105 1 ≤ M ≤ 105 All protection levels will be in the range [0, 20,000] 1 ≤ S ≤ N for all queries All sectors will have sector 1 (Squad Leader) as their superior SAMPLE INPUT 5 7 5 3 8 6 2 1 2 2 3 2 4 1 5 P 1 F1 P 2 F1 U 2 7 P 1 F1 P 2 F1 SAMPLE OUTPUT 24 11 27 14 Explanation: The sectors are initially assigned protection levels of [5, 3, 8, 6, 2]. The reporting structure is described as: 1 is superior of 2 and 5, and 2 is superior of 3 and 4. Queries: - P 1 F1: Sum of protection levels under sector 1, including itself is 5+3+8+6+2 = 24. - P 2 F1: Sum of protection levels under sector 2, including itself is 3+8+6 = 17. - U 2 7: Update the protection level of sector 2 to 7. - P 1 F1: Now the sum is 5+7+8+6+2 = 28. - P 2 F1: Now the sum is 7+8+6 = 21.","solution":"class DragonProtectionSquad: def __init__(self, protection_levels, reporting_structure): self.n = len(protection_levels) self.protection_levels = protection_levels self.tree = [[] for _ in range(self.n)] self.subtree_sum = [0] * self.n self.build_tree(reporting_structure) self.calculate_subtree_sum(0, -1) def build_tree(self, reporting_structure): for u, v in reporting_structure: self.tree[u - 1].append(v - 1) self.tree[v - 1].append(u - 1) def calculate_subtree_sum(self, node, parent): self.subtree_sum[node] = self.protection_levels[node] for child in self.tree[node]: if child == parent: continue self.subtree_sum[node] += self.calculate_subtree_sum(child, node) return self.subtree_sum[node] def update_protection_level(self, sector, x): delta = x - self.protection_levels[sector - 1] self.protection_levels[sector - 1] = x self.update_subtree_sum(sector - 1, delta) def update_subtree_sum(self, node, delta, parent=-1): self.subtree_sum[node] += delta for child in self.tree[node]: if child != parent: self.update_subtree_sum(child, delta, node) def query_protection_level(self, sector): return self.subtree_sum[sector - 1]"},{"question":"Write a function that takes a string containing a mathematical expression as input, and returns the result of the expression as an integer. The expression will contain only non-negative integers, +, -, *, and / operators, and spaces may be present between the elements. The expression will be valid and will not have any division by zero. # Examples ``` \\"3 + 5\\" --> 8 \\"10 - 2 * 3\\" --> 4 \\"6 / 2 + 7\\" --> 10 \\"8 * 3 / 4\\" --> 6 \\"15 - 4 + 2 * 3\\" --> 17 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result as an integer. The expression contains only non-negative integers and +, -, *, / operators with spaces. :param expression: str - The mathematical expression to evaluate. :return: int - The result of the evaluated expression. # Removing spaces from the expression expression = expression.replace(\\" \\", \\"\\") # Using eval to evaluate the expression result = eval(expression) return int(result)"},{"question":"There are N students standing in a line, each with a different height. You want to form a group of students such that the heights of the students in the group increase strictly from left to right and the difference between the heights of any two consecutive students in the group is exactly 1. You are given an array of N integers where the i-th integer represents the height of the i-th student. Your task is to find the number of such groups of students that can be formed. A group must contain at least 2 students. ------ Input ------ The first line of the input contains an integer N denoting the number of students. The second line contains N space-separated integers representing the heights of the students. ------ Output ------ Output a single integer - the number of groups that can be formed according to the above conditions. ------ Constraints ------ 2 ≤ N ≤ 10^5 1 ≤ Height_i ≤ 10^9 ----- Sample Input 1 ------ 7 1 2 3 4 5 6 7 ----- Sample Output 1 ------ 6 ----- Sample Input 2 ------ 6 10 9 8 7 5 6 ----- Sample Output 2 ------ 1 Explanation: In the first example, the groups are (1,2), (2,3), (3,4), (4,5), (5,6), (6,7) - 6 groups in total. In the second example, the only valid group is (5,6).","solution":"def count_groups(heights): Returns the number of valid groups of students where heights increase by 1. count = 0 for i in range(len(heights) - 1): if heights[i+1] - heights[i] == 1: count += 1 return count"},{"question":"A software company is developing a task scheduling application that needs to efficiently manage multiple tasks by assigning them to different servers. Each task has a specific duration and each server can only handle one task at a time. The goal is to determine the minimum number of servers required to handle all the tasks such that no two tasks overlap on the same server. You are given the start and end times of N tasks. Write a program to calculate the minimum number of servers needed to schedule all tasks without overlap. -----Input----- The first line contains an integer N (1 le N le 100000), the number of tasks. Each of the next N lines contains two integers S_ i and E_ i (1 le S_ i < E_ i le 1000000000), the start and end times of the i-th task. -----Output----- Output a single integer, the minimum number of servers required to schedule all tasks. -----Examples----- Sample Input 1: 3 1 4 2 5 3 6 Sample Output 1: 3 Sample Input 2: 4 1 2 2 3 3 4 4 5 Sample Output 2: 1 Sample Input 3: 4 1 5 2 6 3 7 4 8 Sample Output 3: 4","solution":"def min_servers(tasks): from heapq import heappush, heappop # Sort tasks by start time tasks.sort(key=lambda x: x[0]) min_servers_needed = 0 end_times = [] for start, end in tasks: # Remove all tasks whose end time is before the current task\'s start time while end_times and end_times[0] <= start: heappop(end_times) # Add the current task\'s end time to the heap heappush(end_times, end) # The size of the heap is the number of parallel tasks at this moment min_servers_needed = max(min_servers_needed, len(end_times)) return min_servers_needed"},{"question":"In a distant kingdom, a queen wants to select candidates for her royal court based on their ability to solve a unique puzzle. She provides a string and asks whether it can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. To form a palindrome, the string must have at most one character with an odd frequency (for odd-length strings) and all other characters with even frequencies. For even-length strings, all characters must have even frequencies. You are tasked with writing a function that determines whether the given string can be rearranged to form a palindrome. ---Input--- Input consists of a single string ( s ) containing 1 to 1000 characters. The string ( s ) consists of only lowercase English letters. ---Output--- Output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". ---Examples--- Sample Input: civic Sample Output: YES Sample Input: ivicc Sample Output: YES Sample Input: hello Sample Output: NO","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. from collections import Counter # Count frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one odd frequency character if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"Given an array of integers, determine the length of the longest subarray where the absolute difference between any two elements is less than or equal to 1. Example A=[1,1,2,2,4,4,5,5,5] One of the subarrays that meets the criteria is A\'[0]=[1,1,2,2]. Another is A\'[1]=[4,4,5,5,5]. The maximum length subarray has 5 elements. Function Description Complete the pickingNumbers function in the editor below. pickingNumbers has the following parameter(s): int A[n]: an array of integers Returns int: the length of the longest subarray that meets the criteria Input Format The first line contains a single integer, n, the size of the array A. The second line contains n space-separated integers, each an A[i]. Constraints 2 leq n leq 100 0 leq A[i] leq 100 The array A contains at least two elements. Sample Input STDIN Function ----- -------- 6 A[] size n = 6 4 6 5 3 3 1 A = [4, 6, 5, 3, 3, 1] Sample Output 3 Explanation The subarray [4, 3, 3] is the longest subarray where the absolute difference between any two elements is less than or equal to 1.","solution":"def pickingNumbers(A): Determines the length of the longest subarray where the absolute difference between any two elements is less than or equal to 1. Args: A (list of int): The input array of integers. Returns: int: The length of the longest qualifying subarray. # Frequency dictionary to store the count of each number frequency = [0] * 101 # Populate the frequency dictionary for number in A: frequency[number] += 1 max_length = 0 # Check the count of each number and its adjacent number (number+1) for i in range(1, 101): current_length = frequency[i] + frequency[i - 1] if current_length > max_length: max_length = current_length return max_length"},{"question":"You are tasked with creating a report card generator for a classroom. Each student has taken multiple exams and you need to compute their average score as well as determine their final grade based on the average. The letter grade is assigned based on the following scale: - Average score >= 90: A - 80 <= Average score < 90: B - 70 <= Average score < 80: C - 60 <= Average score < 70: D - Average score < 60: F Write a program that computes each student\'s average score and final grade. -----Input----- The first line of input contains a single integer t, where 1 le t le 50. This is the number of students. For each student, the first line contains the student\'s name. The second line contains an integer e, where 1 le e le 10. This represents the number of exams the student has taken. The next e lines each contain one integer, representing the score the student received on that exam (0 <= score <= 100). -----Output----- For each student, the program should print the student\'s name, followed by their average score (rounded down to the nearest whole number), and their final grade based on the scale provided, each on a new line. -----Examples----- Sample Input: 2 Alice 3 85 92 78 Bob 4 70 65 80 90 Sample Output: Alice 85 B Bob 76 C","solution":"def compute_grade(average_score): Determines the grade based on the average_score. if average_score >= 90: return \\"A\\" elif average_score >= 80: return \\"B\\" elif average_score >= 70: return \\"C\\" elif average_score >= 60: return \\"D\\" else: return \\"F\\" def generate_report_card(t, students_data): Generates report card for each student based on the input data. results = [] for student_data in students_data: name = student_data[\'name\'] scores = student_data[\'scores\'] average_score = sum(scores) // len(scores) grade = compute_grade(average_score) results.append(f\\"{name}n{average_score} {grade}\\") return results"},{"question":"A city is planning to optimize the routes of its public transportation system by analyzing the most frequently used paths. The city\'s bus routes can be represented as a directed graph with nodes as bus stops and edges as routes between stops. Each route has a travel time associated with it. The task is to find the longest path duration from a starting bus stop to any other bus stop in the city. Note that the graph should have no cycles (it is a Directed Acyclic Graph, DAG). -----Input----- The first line of input contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 10,000) – the number of bus stops and the number of routes. The next m lines contain three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) – a route from stop u to stop v with travel time w. It is guaranteed that the graph is acyclic. -----Output----- Print a single integer which is the maximum travel time among all paths starting from any single bus stop. -----Examples----- Input 5 6 1 2 4 1 3 2 2 3 3 2 4 2 3 4 1 3 5 5 Output 11 Input 4 4 1 2 3 1 3 2 2 4 4 3 4 3 Output 7 -----Note----- In the first example, the longest path is: 1 -> 2 -> 3 -> 5 with a travel time of 4 + 3 + 5 = 12. In the second example, the longest path is: 1 -> 2 -> 4 with a travel time of 3 + 4 = 7.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges): # Create adjacency list and in-degree count adj = defaultdict(list) in_degree = [0] * (n + 1) for u, v, w in edges: adj[u].append((v, w)) in_degree[v] += 1 # Topological sort using Kahn\'s algorithm topo = [] queue = deque([node for node in range(1, n + 1) if in_degree[node] == 0]) while queue: node = queue.popleft() topo.append(node) for neigh, w in adj[node]: in_degree[neigh] -= 1 if in_degree[neigh] == 0: queue.append(neigh) # Initialize distances dist = [0] * (n + 1) # Calculate the longest path using topological order for node in topo: for neigh, w in adj[node]: if dist[neigh] < dist[node] + w: dist[neigh] = dist[node] + w return max(dist) # Example usage: edges1 = [ (1, 2, 4), (1, 3, 2), (2, 3, 3), (2, 4, 2), (3, 4, 1), (3, 5, 5) ] print(find_longest_path(5, 6, edges1)) # Output: 12 edges2 = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (3, 4, 3) ] print(find_longest_path(4, 4, edges2)) # Output: 7"}]'),A={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},Y=["disabled"],P={key:0},z={key:1};function R(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,Y)):l("",!0)])}const M=d(A,[["render",R],["__scopeId","data-v-b158ec30"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/10.md","filePath":"deepseek/10.md"}'),L={name:"deepseek/10.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
