import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(r,e,l,m,s,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const O=d(k,[["render",N],["__scopeId","data-v-1f3c919f"]]),A=JSON.parse('[{"question":"Note: This question carries 200 points In the mystical land of Zephyria, there exist ancient portals that connect various cities in a hidden pattern. To unlock these portals, a unique key needs to be formed by combining the attributes of two cities. Given the attributes of city A and city B, your task is to find how many unique ways the portals can be unlocked following a specific rule. Given two integers P and Q representing the attributes of city A and city B respectively, you have to determine the number of pairs (a, b) such that 1 leq a leq P and 1 leq b leq Q, for which the condition a^2 + b^3 = a oplus b holds true, where oplus denotes the bitwise XOR operation. Also, find the number of distinct values of a that can participate in valid pairs. -----Input :----- - The first line contains T denoting the number of test cases. - Each test case contains two integers P and Q. -----Output :----- - For each test case, print two integers: the number of pairs (a, b) and the number of distinct values of a. -----Constraints :----- - 1 ≤ T ≤ 3000 - 1 ≤ P, Q ≤ 10^8 -----Sample Input :----- 1 2 5 -----Sample Output :----- 1 1 -----Explanation :----- For the given test case with P=2 and Q=5, there is only one pair (2,1) that satisfies the condition: 2^2 + 1^3 = 4 + 1 = 5 and 2 oplus 1 = 3, so the condition does not hold, implying no valid pairs. The sample incorrect output is just an illustrative example.","solution":"def count_pairs_and_unique_a(P, Q): unique_pairs = 0 unique_a_values = set() for a in range(1, P + 1): for b in range(1, Q + 1): if a**2 + b**3 == (a ^ b): unique_pairs += 1 unique_a_values.add(a) return unique_pairs, len(unique_a_values) def process_test_cases(T, test_cases): results = [] for i in range(T): P, Q = test_cases[i] result = count_pairs_and_unique_a(P, Q) results.append(result) return results"},{"question":"Polycarp enjoys creating string patterns based on mathematical operations. He starts with a string consisting of digits \'1\' to \'9\' and performs a series of operations until he reaches a desired length. He can perform two types of operations on the string: - Append the string to itself. - Remove the first character of the string. Given an integer n signifying the desired length, your task is to determine the minimum initial string length required so that by performing the above operations, Polycarp can obtain a string of length exactly n. -----Input:----- - A single integer n indicating the desired length of the string. -----Output:----- Print a single integer which is the minimum initial string length required. -----Constraints----- - 1 leq n leq 10^6 -----Sample Input:----- 5 -----Sample Output:----- 3 -----EXPLANATION:----- In the example, Polycarp can start with the initial string \\"123\\". He performs the following operations: 1. Initial string \\"123\\" 2. Append string to itself: \\"123123\\" 3. Remove the first character: \\"23123\\" The final string \\"23123\\" has the desired length of 5. The minimal initial string length Polycarp needed was 3.","solution":"def minimum_initial_length(n): Returns the minimum initial string length required to achieve a string of length n by performing the specified operations. length = 1 while length * (length + 1) // 2 < n: length += 1 return length"},{"question":"In a faraway forest, there are several magical creatures called Elphins who like to cast spells on each other. Each Elphin is positioned on a unique magical coordinate along a 1-dimensional axis and can cast spells either to the right or to the left. The distance of their spell cast is fixed for each Elphin and does not vary. The head wizard wants to know if there is any pair of Elphins that can cast spells and hit each other simultaneously. Help the head wizard determine if such a pair exists. Each Elphin has a specific fixed position and a spell range, which indicates how far their spell can reach in either direction. -----Input:----- - The first line contains an integer n (1 <= n <= 100) - the number of Elphins in the forest. - Each of the next n lines contains two integers p(i) and r(i) (-10^4 <= p(i) <= 10^4, 1 <= |r(i)| <= 2 * 10^4) - where p(i) is the position of the i-th Elphin, and r(i) is the distance it can cast spells. Positive values of r(i) indicate the spell is cast to the right, and negative values indicate the spell is cast to the left. No two Elphins stand at the same position. -----Output:----- If there is any pair of Elphins that can cast spells and hit each other simultaneously, output \\"TRUE\\", otherwise output \\"FALSE\\". -----Sample Input:----- 3 2 3 5 -3 6 4 -----Sample Output:----- TRUE","solution":"def can_elphins_hit_each_other(n, elphins): Determine if any pair of Elphins can cast spells and hit each other simultaneously. Parameters: n (int): Number of Elphins. elphins (List[Tuple[int, int]]): List of tuples, each containing the position (p) and spell range (r) of each Elphin. Returns: str: \\"TRUE\\" if any pair of Elphins can hit each other, otherwise \\"FALSE\\". spell_ranges = {} for position, range in elphins: # Calculate the target positions each Elphin can hit target_position = position + range # Check if there\'s an Elphin that can hit \'position\' from \'target_position\' if target_position in spell_ranges and spell_ranges[target_position] == position: return \\"TRUE\\" # Store the target positions and their corresponding Elphin positions spell_ranges[position] = target_position return \\"FALSE\\""},{"question":"In a small seaside town, there is a bustling fish market where the daily business revolves around fishermen bringing their catches of fresh fish. Each day, fishermen sell their catches, and the fish market keeps a record of each sale. The fish market wants to analyze the sales data to identify which day had the highest aggregate weight of the fish sold. Each sale record includes the day identifier and the weight of the fish sold on that day. Your task is to write a program that processes the records of these sales and determines the day with the highest aggregate weight of the fish sold. If there are multiple days with the same maximum aggregate weight, the earliest day identifier should be returned. -----Input----- The first line of input contains a single integer T - the number of test cases. Each test case is structured as follows: - The first line contains a single integer N — the number of sales records. - The next N lines contain the sales records in the format \\"day weight\\", where - `day` is a string representing the unique identifier of the day. - `weight` is an integer representing the weight of the fish sold on that day. -----Output----- For each test case, output a single line with the identifier of the day that has the highest aggregate weight of the fish sold. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ `weight` ≤ 1000 - The length of `day` will not exceed 10 characters. - All day identifiers in a single test case are unique. -----Example----- Input: 2 5 Monday 100 Tuesday 200 Monday 150 Wednesday 300 Tuesday 100 3 Friday 100 Saturday 400 Sunday 400 Output: Monday Saturday Explanation: In the first test case, Monday has a total weight of 250, Tuesday has a total weight of 300, and Wednesday has 300. Since Tuesday and Wednesday have the same aggregate weight, the earliest day identifier, Tuesday, is selected. In the second test case, both Saturday and Sunday have the same weight of 400, and since Saturday comes earlier, it is selected.","solution":"def find_highest_weight_day(T, test_cases): results = [] for i in range(T): sales = test_cases[i] weight_per_day = {} for record in sales: day, weight = record if day not in weight_per_day: weight_per_day[day] = 0 weight_per_day[day] += int(weight) max_weight = max(weight_per_day.values()) highest_weight_days = [day for day, weight in weight_per_day.items() if weight == max_weight] results.append(sorted(highest_weight_days)[0]) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. The graph has no self-loops and no multiple edges between any pair of nodes. Your task is to find a subset of edges that forms a tree with the maximum possible sum of weights while still ensuring that the tree is spanning (includes all n nodes). In other words, you want to find a spanning tree with the maximum sum of edge weights. # Input - The first line contains two integers n and m (2 le n le 1000, 1 le m le 10^5) – the number of nodes and edges, respectively. - The next m lines contain three integers u, v, and w (1 le u, v le n, u neq v, 0 le w le 10^4) – representing an edge between nodes u and v with weight w. # Output - If it is possible to construct a spanning tree, print the maximum possible sum of edge weights in the spanning tree. If it is not possible to construct a spanning tree, print `-1`. # Example Input ``` 4 5 1 2 3 2 3 4 3 4 5 4 1 6 1 3 2 ``` Output ``` 15 ``` # Explanation In the example, one of the possible spanning trees with the maximum sum of edge weights is formed by the edges (1, 2) with weight 3, (2, 3) with weight 4, and (4, 1) with weight 6. The total sum is 3 + 4 + 6 = 13. Another possible spanning tree with the same maximum sum includes the edges (3, 4) with weight 5, (4, 1) with weight 6, and (2, 3) with weight 4. The total sum again is 15. Edges considered: - (1, 2) with weight 3, - (2, 3) with weight 4, - (4, 1) with weight 6. Sum: 3 + 6 + 4 = 13","solution":"def find_maximum_spanning_tree(n, m, edges): # Using Kruskal\'s algorithm to find the maximum spanning tree def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort edges in descending order of their weights edges.sort(key=lambda x: x[2], reverse=True) parent = list(range(n)) rank = [0] * n maximum_spanning_tree_weight = 0 selected_edges = 0 for u, v, w in edges: u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) maximum_spanning_tree_weight += w selected_edges += 1 if selected_edges == n - 1: break if selected_edges != n - 1: return -1 return maximum_spanning_tree_weight"},{"question":"Implement a function that takes a list of integers and returns a new list with the same integers, but in ascending order. You are not allowed to use the built-in sort function. For example, if the input list is [34, 7, 23, 32, 5, 62], the function should return [5, 7, 23, 32, 34, 62]. Use one of the sorting algorithms such as Bubble Sort, Selection Sort, or Insertion Sort to accomplish this. ```python def custom_sort(arr): # Implement the sorting algorithm here return sorted_arr ```","solution":"def custom_sort(arr): Sorts a list of integers in ascending order using the Selection Sort algorithm. if not arr: return arr n = len(arr) for i in range(n): # Assume the current position holds the minimum min_idx = i # Traverse the unsorted sublist for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element of the unsorted sublist arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Implement a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". Note: All given inputs are in lowercase letters a-z. The length of each input string does not exceed 200. The total number of strings in the array does not exceed 200.","solution":"def longest_common_prefix(strs): Returns the longest common prefix string among an array of strings. If there is no common prefix, returns an empty string \\"\\". Args: strs (List[str]): List of input strings Returns: str: Longest common prefix if not strs: return \\"\\" # Initialize the prefix to the first string prefix = strs[0] # Iterate over all strings in the array for string in strs[1:]: # Reduce the prefix while it is not a prefix of the string while string[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] # If there is no common prefix, return an empty string if not prefix: return \\"\\" return prefix"},{"question":"In a video game, you control a character navigating a grid representing a map. The grid consists of n rows and m columns. Each cell of the grid can be either passable denoted by \'.\' or impassable denoted by \'#\'. You start at the top-left corner of the grid (1, 1) and want to reach the bottom-right corner (n, m). Your task is to determine whether it\'s possible to reach the destination. You can move in four possible directions: left, right, up, and down, but only to passable cells. Additionally, you have a limited number of bombs, k, which allow you to destroy impassable cells (`#`) and convert them into passable cells (`.`). Write a function to determine if it\'s possible to reach the bottom-right corner of the grid using up to k bombs. -----Input----- The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 1000; 0 ≤ k ≤ 10) — the size of the grid and the number of bombs available. Each of the next n lines contains m characters representing the grid. Each character is either \'.\' or \'#\'. -----Output----- Print \\"YES\\" if it\'s possible to reach the destination using up to k bombs. Otherwise, print \\"NO\\". -----Examples----- Input 5 5 2 ..... ..#.. .#. ..#.. ..... Output YES Input 3 3 0 # .#. # Output NO -----Note----- In the first example, the path from (1, 1) to (5, 5) is initially blocked by two impassable cells at (2, 3) and (4, 3). With two bombs, these cells can be converted to passable ones, allowing the character to reach the destination. In the second example, there are no bombs available, and there is no path from (1, 1) to (3, 3) because it is entirely blocked by impassable cells.","solution":"from collections import deque def can_reach_destination(n, m, k, grid): # Directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS queue queue = deque([(0, 0, 0)]) # (x, y, bombs_used) visited = {(0, 0): 0} while queue: x, y, bombs_used = queue.popleft() # Reached destination if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: next_bombs_used = bombs_used + (1 if grid[nx][ny] == \'#\' else 0) if next_bombs_used <= k and (nx, ny) not in visited: visited[(nx, ny)] = next_bombs_used queue.append((nx, ny, next_bombs_used)) elif next_bombs_used <= k and (nx, ny) in visited and visited[(nx, ny)] > next_bombs_used: queue.append((nx, ny, next_bombs_used)) visited[(nx, ny)] = next_bombs_used return \\"NO\\""},{"question":"In a grid-based game, you have a grid of size N x M filled with \'.\' and \'#\'. Each \'.\' represents an open space, and each \'#\' represents an obstacle. You can move between open spaces horizontally or vertically, but not diagonally. Your goal is to write a program that finds the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) of the grid. Note: 1. The input grid will always have at least one open path from the top-left to the bottom-right. 2. You can move to adjacent open spaces (\'.\') but cannot move into obstacles (\'#\'). ------Input------ The first line of input contains two integers N and M (1 ≤ N, M ≤ 1000). The following N lines contain M characters each, representing the grid. ------Output------ Output a single integer representing the length of the shortest path from the top-left to the bottom-right corner. If there\'s no path, output -1 (though in this problem context, there will always be a valid path). ------Example------ Input: 5 5 ..... .#. ..... .#. ..... Output: 8","solution":"from collections import deque def shortest_path_in_grid(grid): Find the shortest path from the top-left to the bottom-right corner of the grid. :param grid: List of strings representing the grid where \'.\' is open space and \'#\' is obstacle. :return: Length of the shortest path. n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"You are given a string of parentheses containing only characters `(` and `)`. Write a function to find the minimum number of parentheses you need to insert to make the string valid. A string is considered valid if: - Open brackets must be closed by the corresponding closing brackets, in the correct order. Examples: ``` \\"(()\\" => 1 \\"))((\\" => 4 \\"((()))()\\" => 0 ```","solution":"def minAddToMakeValid(S): Returns the minimum number of parentheses needed to make the input string valid. left_needed = 0 right_needed = 0 for char in S: if char == \'(\': right_needed += 1 elif char == \')\': if right_needed > 0: right_needed -= 1 else: left_needed += 1 return left_needed + right_needed"},{"question":"Given a directed graph represented by an adjacency list, write a function to determine if the graph contains a cycle. If so, return `True`; otherwise, return `False`. # Input Format: - The function should take a single argument: an adjacency list representing the directed graph, where: - The vertices of the graph are represented as `integer` values starting from `0`. - The adjacency list is provided as a list of lists. `graph[i]` contains the list of vertices that vertex `i` has edges to. # Output Format: - The function should return a boolean value (`True` or `False`). # Example: ```python def has_cycle(graph): # Your code here # Example 1: graph1 = [ [1, 2], # Vertex 0 has edges to vertex 1 and vertex 2 [2], # Vertex 1 has an edge to vertex 2 [0, 3], # Vertex 2 has edges to vertex 0 and vertex 3 [3] # Vertex 3 has an edge to itself ] print(has_cycle(graph1)) # True # Example 2: graph2 = [ [1], # Vertex 0 has an edge to vertex 1 [2], # Vertex 1 has an edge to vertex 2 [] # Vertex 2 has no edge ] print(has_cycle(graph2)) # False ``` # Constraints: - The graph will have at most `1000` vertices. - The graph can be empty. # Notes: - You can use Depth-First Search (DFS) to detect cycles in the graph. - Be mindful of nodes already visited in the current path to detect cycles effectively. Complete the function `has_cycle` as specified above.","solution":"def has_cycle(graph): Determines if the directed graph contains a cycle. def dfs(v): Depth-First Search to detect a cycle. if visited[v] == 1: # Visiting the node currently implies a cycle. return True if visited[v] == 2: # Already visited node in a previous path return False visited[v] = 1 for neighbor in graph[v]: if dfs(neighbor): return True visited[v] = 2 return False visited = [0] * len(graph) for vertex in range(len(graph)): if visited[vertex] == 0: if dfs(vertex): return True return False"},{"question":"Create a function `remove_duplicates` that takes a list of integers and returns a new list with duplicate values removed, retaining the order of first occurrences. ```python remove_duplicates([1, 2, 3, 4, 3, 2, 5, 1]) # returns [1, 2, 3, 4, 5] ```","solution":"def remove_duplicates(lst): Returns a new list with duplicate values removed, retaining the order of first occurrences. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function ```python string_compression(text) ``` that takes in a string ```str```(```text``` in Python) and returns the compressed version of the string using the counts of repeated characters. For example: ```python string_compression(\'aaabbcc\') == \'a3b2c2\' string_compression(\'abcd\') == \'abcd\' string_compression(\'aabbccddeee\') == \'a2b2c2d2e3\' ``` If the compressed string is not shorter than the original string, the function should return the original string.","solution":"def string_compression(text): Compresses the input text by counting consecutive repeated characters. if not text: return text compressed = [] count = 1 for i in range(1, len(text)): if text[i] == text[i - 1]: count += 1 else: compressed.append(text[i - 1] + str(count)) count = 1 # Add the last group compressed.append(text[-1] + str(count)) # Join the compressed list into a string compressed_string = \'\'.join(compressed) # Return the original string if compressed string is not shorter return compressed_string if len(compressed_string) < len(text) else text"},{"question":"Given an array of integers representing the altitude of each point on a hiking trail, determine the number of distinct peaks. A peak is defined as a point that is strictly greater than its immediately adjacent elements. Example 1: Input: [2, 4, 2, 1, 2, 6, 3, 2] Output: 2 Explanation: There are two distinct peaks in the array, which are 4 and 6. Example 2: Input: [1, 2, 3, 4, 5] Output: 0 Explanation: The array is strictly increasing, hence there are no peaks. Note: - The length of the input array is in the range [1, 10,000]. - An altitude array of length less than 3 cannot contain a peak.","solution":"def count_peaks(altitudes): Returns the number of distinct peaks in the array. A peak is defined as a point that is strictly greater than its immediately adjacent elements. if len(altitudes) < 3: return 0 peaks_count = 0 for i in range(1, len(altitudes) - 1): if altitudes[i] > altitudes[i - 1] and altitudes[i] > altitudes[i + 1]: peaks_count += 1 return peaks_count"},{"question":"You are given an integer array of even length where different numbers in this array represent different kinds of candies. Each number represents a unique type of candy. You need to distribute these candies equally between two people, ensuring that each person gets an equal number of candies. Your task is to maximize the number of different types of candies one person can get. Return the maximum number of different types of candies one person can get. Example 1: Input: candies = [1,1,2,2,3,3] Output: 3 Explanation: You can give [1,2,3] to one person and [1,2,3] to another. Each person gets 3 different types. Example 2: Input: candies = [1,1,2,3] Output: 2 Explanation: You can give [2,3] to one person and [1,1] to another. The first person gets 2 different types and the second person gets 1 type. Example 3: Input: candies = [6,6,6,6] Output: 1 Explanation: You can only give the same type to one person, and hence one person will get 1 type of candy which is the maximum possible. Constraints: - The length of the given array is in the range [2, 10^4] and will always be even. - The number in the given array is in the range [1, 10^5].","solution":"def max_candies(candies): Given a list of candies represented by integers, returns the maximum number of different types of candies one person can get by distributing them equally. unique_candies = set(candies) max_types_per_person = len(candies) // 2 return min(len(unique_candies), max_types_per_person)"},{"question":"# Task Given a dictionary where the keys are student names and the values are their scores, your task is to find the name(s) of the student(s) who are tied for the highest score. If there are multiple students with the same highest score, return their names in alphabetical order. # Example For the dictionary `scores = {\\"Alice\\": 91, \\"Bob\\": 86, \\"Charlie\\": 91, \\"David\\": 75}`, the output should be `[\\"Alice\\", \\"Charlie\\"]`. - \\"Alice\\" and \\"Charlie\\" both have the highest score of 91, and they should be returned in alphabetical order. # Input/Output - `[input]` dictionary `scores` A dictionary with student names as keys and their scores as values. Constraints: `1 ≤ len(scores) ≤ 50, 0 ≤ scores[student] ≤ 100` - `[output]` an array of strings An array containing the name(s) of the student(s) with the highest score, sorted in alphabetical order.","solution":"def top_scorers(scores): Returns the names of the student(s) with the highest score, sorted in alphabetical order. Args: scores (dict): Dictionary with student names as keys and their scores as values. Returns: list: List of names with the highest score in alphabetical order. if not scores: return [] max_score = max(scores.values()) top_scorers = [student for student, score in scores.items() if score == max_score] return sorted(top_scorers)"},{"question":"A famous treasure hunter has discovered a room filled with chests. Each chest can either be locked or unlocked, and each chest contains a specific number of keys which are used to unlock other chests. There are N chests in total, each indexed from 1 to N. The treasure hunter begins with a collection of keys that can unlock some subsets of these chests directly. The challenge is to determine the minimum number of chests the treasure hunter needs to open such that all possible chests in the room can be accessed. -----Input:----- - The first line contains an integer N, the number of chests. - The second line contains a binary string of length N where each character is either \'1\' (indicating the chest is initially unlocked) or \'0\' (indicating the chest is initially locked). - The next N lines: each line i starts with an integer K_i (the number of chests that can be unlocked by opening chest i), followed by a list of K_i integers representing the indices of the chests that can be unlocked. -----Output:----- Output a single integer, the minimum number of chests that need to be opened initially so that all chests can be accessed. If it\'s impossible to access all chests, return -1. -----Constraints----- - 1 leq N leq 1000 - 0 leq K_i leq N - Each index provided in the unlocking list for a chest is between 1 and N -----Sample Input:----- 4 1000 1 2 1 3 1 4 0 -----Sample Output:----- 1 -----EXPLANATION:----- - Chest 1 is already unlocked. By opening it, you can unlock Chest 2. - Opening Chest 2 allows you to unlock Chest 3. - Similarly, opening Chest 3 allows you to unlock Chest 4. Thus, you need to open only 1 chest initially (Chest 1) to ensure all chests can be accessed.","solution":"def min_chests_to_open(N, initial_state, unlocks): Determines the minimum number of chests that need to be opened initially so that all chests can be accessed. :param N: int - Number of chests. :param initial_state: str - Binary string representing the initial unlock state of chests. :param unlocks: list of list - Each sublist contains the chests that can be unlocked by a given chest. :return: int - Minimum number of chests to open initially, or -1 if not possible to access all chests. from collections import deque # Create a graph for the chests graph = [[] for _ in range(N)] for i in range(N): for chest in unlocks[i]: graph[i].append(chest - 1) # Convert 1-indexed to 0-indexed visited = [False] * N queue = deque() # Initialize the queue with already unlocked chests for i in range(N): if initial_state[i] == \'1\': queue.append(i) visited[i] = True opened_count = 0 while queue: current = queue.popleft() opened_count += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) if all(visited): return initial_state.count(\'1\') # Count of initial \'1\' characters else: return -1"},{"question":"You are given an array of integers (arr) and an integer (k). Your task is to find the k-th smallest element in the array. If k is out of bounds, return -1. Write a function that achieves this. Example 1: Input: arr = [7, 10, 4, 3, 20, 15], k = 3 Output: 7 Example 2: Input: arr = [7, 10, 4, 3, 20, 15], k = 4 Output: 10 Example 3: Input: arr = [7, 10, 4, 3, 20, 15], k = 0 Output: -1 Constraints: - The array (arr) will contain between 1 and 10^5 elements. - Each element in the array will be between -10^9 and 10^9. - k will be a non-negative integer.","solution":"def kth_smallest_element(arr, k): Returns the k-th smallest element in the array. If k is out of bounds, returns -1. if k < 1 or k > len(arr): return -1 arr.sort() return arr[k - 1]"},{"question":"You are given an integer sequence of length N: a_1, a_2, ..., a_N and an integer K. Your task is to find the length of the longest contiguous subarray whose sum is less than or equal to K. -----Constraints----- - All input values are integers. - 1 leq N leq 100,000 - -10^9 leq a_i leq 10^9 - 0 leq K leq 10^18 -----Input----- Input is given from Standard Input in the following format: N K a_1 a_2 ... a_N -----Output----- Print the length of the longest contiguous subarray whose sum is less than or equal to K. If no such subarray exists, print 0. -----Sample Input----- 5 10 1 2 3 4 5 -----Sample Output----- 4 In the sequence [1, 2, 3, 4, 5], the longest contiguous subarray whose sum is less than or equal to 10 is [1, 2, 3, 4]. The sum of this subarray is 10, and its length is 4.","solution":"def longest_subarray_length(N, K, arr): Returns the length of the longest contiguous subarray whose sum is less than or equal to K. max_length = 0 current_sum = 0 start = 0 for end in range(N): current_sum += arr[end] while current_sum > K and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A famous city council has decided to build a new subway network connecting the city\'s important locations denoted as nodes. The problem is to find the shortest path between two specified locations via subway lines. Each direct connection between two locations has a travel time associated with it. You need to help the council by implementing a program that calculates the shortest travel time between two specified locations. -----Input Format:------ - First line contains T, the number of test cases. - For each test case: - The first line contains two integers N and M - the number of locations (nodes) and the number of direct subway connections between locations respectively. - The next M lines each contain three integers u_i, v_i, w_i - indicating there is a direct subway connection from location u_i to location v_i which takes w_i minutes. - The next line contains two integers S and D - the start and destination locations for which the shortest travel time needs to be calculated. -----Constraints:------ - 1 le T le 50 - 2 le N le 1000 - 1 le M le 10,000 - 1 le u_i, v_i, S, D le N - 1 le w_i le 100 - The input guarantees that there is at least one path from S to D. -----Output Format:------ For each test case, print a single integer representing the shortest time in minutes to travel from start location S to destination location D. -----Sample Input----- 1 4 4 1 2 4 1 3 2 2 3 5 3 4 1 1 4 -----Sample Output----- 3 -----Explanation:----- From location 1 to location 4: - Path from 1 to 3 takes 2 minutes. - Path from 3 to 4 takes 1 minute. Thus, the shortest travel time from location 1 to 4 is 2 + 1 = 3 minutes.","solution":"import heapq def shortest_path(num_cases, cases): results = [] for case in cases: N, M, connections, S, D = case graph = [[] for _ in range(N + 1)] for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) # Because the subway connection is bidirectional # Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): min_heap = [(0, start)] dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[start] = 0 while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) return dist[end] shortest_time = dijkstra(S, D) results.append(shortest_time) return results"},{"question":"Task: You need to write a function `binary_pattern` that generates a binary pattern up to a specified number of rows. The function should return the pattern as a single string, including line breaks. Parameters: binary_pattern(n) ^ | Number of rows of the binary pattern Rules: 1. Each row consists of repeated sequences of \\"01\\" until the length of the row is equal to or exceeds `n`. 2. The pattern should be symmetric vertically and horizontally. 3. If `n` is less than 1, the function should return an empty string. 4. The function should not use external libraries for pattern generation. 5. Handle edge cases like `n = 0` and `n = 1` appropriately. Examples: # binary_pattern(5): ``` 0110 1010 110 1 ``` # binary_pattern(8): ``` 01010101 0101010 101010 10101 0101 101 10 1 ``` # binary_pattern(3): ``` 010 10 1 ```","solution":"def binary_pattern(n): Generates a binary pattern up to a specified number of rows. Parameters: n (int): Number of rows of the binary pattern. Returns: str: The binary pattern as a single string, including line breaks. if n < 1: return \\"\\" pattern = [] base_pattern = \\"01\\" * ((n + 1) // 2) for i in range(n): row_pattern = base_pattern[:n - i] pattern.append(row_pattern) return \\"n\\".join(pattern)"},{"question":"There are n devices connected in a network. Each device is identified by a unique integer ID from 1 to n. Over a period of m days, we log the communication events between these devices. On day i, device x_i sends a message to device y_i. We know the immediate history of each device\'s communications, but the communication is not transitive—if device a communicates with device b and device b communicates with device c, it does not imply that device a communicates with device c. We want to determine the largest group of devices that are connected via communication by the end of each day i. A group is defined as a set of devices in which each device can communicate directly with any other device in the group. -----Input----- The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 10^5) — the number of devices and the number of days. The i-th (1 leq i leq m) of the next m lines contains two integers x_i and y_i (1 leq x_i, y_i leq n, x_i ne y_i), meaning that device x_i sends a message to device y_i on the i-th day. -----Output----- Print exactly m lines, where the i-th of them (1 leq i leq m) contains the size of the largest group of connected devices by the end of the day i. -----Examples----- Input 5 5 1 2 2 3 4 5 1 3 2 4 Output 2 3 3 3 5 Input 6 4 3 4 1 2 2 3 5 6 Output 2 2 4 4 Input 7 7 1 2 2 3 4 5 6 7 1 4 2 5 3 6 Output 2 3 3 3 5 5 7 -----Note----- In the first example, by the end of day 2, the largest group of connected devices is {1, 2, 3} of size 3. By the end of day 5, all devices are connected as a single group of size 5. In the second example, by the end of day 3, the largest group of connected devices is {1, 2, 3, 4} of size 4. By the end of day 4, it remains the same since devices 5 and 6 form a separate group. In the third example, by the end of day 6, the largest group of connected devices is {1, 2, 3, 4, 5} of size 5. By the end of day 7, all devices are connected as a single group of size 7.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size self.max_group_size = 1 def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) # Path compression return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: # Union by rank if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u self.rank[root_u] += self.rank[root_v] self.max_group_size = max(self.max_group_size, self.rank[root_u]) else: self.parent[root_u] = root_v self.rank[root_v] += self.rank[root_u] self.max_group_size = max(self.max_group_size, self.rank[root_v]) return self.max_group_size def largest_groups(n, m, connections): uf = UnionFind(n) results = [] for x, y in connections: max_group_size = uf.union(x - 1, y - 1) results.append(max_group_size) return results"},{"question":"A sequence of numbers is called a \\"zigzag sequence\\" if the differences between successive numbers strictly alternate between positive and negative. In other words, for a sequence to be a zigzag sequence, it must be that for all consecutive elements `a, b, c`: - `(b - a) * (c - b) < 0` Given an array of `n` integers, determine the longest contiguous subarray which is a zigzag sequence. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 100000) — the length of the input array. - The next line contains `n` integers separated by space, which form the initial array. # Output - Output one integer — the length of the longest contiguous subarray which is a zigzag sequence. # Example ``` Input: 10 1 7 4 9 2 5 1 4 8 3 Output: 9 ``` In this example, the longest subarray which forms a zigzag sequence is [1, 7, 4, 9, 2, 5, 1, 4, 8], with a length of 9. The 3 at the end breaks the zigzag pattern, hence it is not included.","solution":"def longest_zigzag_sequence(arr): Finds the length of the longest contiguous subarray which is a zigzag sequence. n = len(arr) if n < 2: return n # Initialize lengths of the longest zig-zag ending at each position up = 1 down = 1 max_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: up = down + 1 max_length = max(max_length, up) elif arr[i] < arr[i - 1]: down = up + 1 max_length = max(max_length, down) return max_length"},{"question":"Create a function that takes an integer n and returns the number of structurally unique full binary trees having exactly n nodes where each node has either 0 or 2 children. A full binary tree is a binary tree in which every node has exactly 0 or 2 children. Example: Input: 7 Output: 5 Explanation: There are 5 structurally unique full binary trees with 7 nodes: 1 1 1 1 1 / / / / / 1 1 1 1 1 1 1 1 1 1 / / / / / / / / / / 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1","solution":"from functools import lru_cache @lru_cache(None) def numFullBinaryTrees(n): if n % 2 == 0: return 0 # A full binary tree must have an odd number of nodes if n == 1: return 1 # A full binary tree with one node is just the root total_trees = 0 for left_nodes in range(1, n, 2): right_nodes = n - 1 - left_nodes left_trees = numFullBinaryTrees(left_nodes) right_trees = numFullBinaryTrees(right_nodes) total_trees += left_trees * right_trees return total_trees"},{"question":"Description: #Task: Write a function that reverses the words in a given sentence without changing the order of the characters within each word. The function should take a string as input and return a new string with the words reversed. #Examples: ``` input(\\"Hello World\\") => returns \\"World Hello\\" input(\\"Coding is fun\\") => returns \\"fun is Coding\\" input(\\"Python is awesome\\") => returns \\"awesome is Python\\" input(\\"a b c\\") => returns \\"c b a\\" ``` Note: The input string will contain only alphabetical characters and spaces, and there will be no leading or trailing spaces in the input string.","solution":"def reverse_sentence(sentence): Reverses the words in the given sentence without changing the order of characters within each word. Args: sentence (str): The sentence to reverse. Returns: str: The sentence with words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You are given an array of strings. Each string represents a timestamp in the format \\"YYYY-MM-DD hh:mm:ss\\". Your task is to sort the timestamps in chronological order. For example: ``` [\\"2022-01-02 12:30:45\\", \\"2021-12-31 23:59:59\\", \\"2022-01-01 00:00:00\\"] ``` should be sorted to: ``` [\\"2021-12-31 23:59:59\\", \\"2022-01-01 00:00:00\\", \\"2022-01-02 12:30:45\\"] ``` If the array is empty, you should return an empty array. Additionally: - Handle the input such that if the format is violated (not in \\"YYYY-MM-DD hh:mm:ss\\" format), return an error message \\"Invalid input format\\".","solution":"from datetime import datetime def sort_timestamps(timestamps): Sorts an array of timestamps in chronological order. Returns an error message if the format of any timestamp is invalid. try: # Check for valid format and convert to datetime objects datetime_objects = [ datetime.strptime(ts, \\"%Y-%m-%d %H:%M:%S\\") for ts in timestamps ] except ValueError: # Raised when format is violated return \\"Invalid input format\\" # Sort datetime objects and convert back to string format sorted_timestamps = sorted(datetime_objects) return [dt.strftime(\\"%Y-%m-%d %H:%M:%S\\") for dt in sorted_timestamps]"},{"question":"Given a binary tree, return the vertical order traversal of its nodes as an array of arrays. Each sub-array represents the nodes at a specific horizontal distance from the root, ordered by level, then by left-to-right order. For example: ``` Input: 3 / 9 20 / 15 7 Output: [[9], [3, 15], [20], [7]] Explanation: - Nodes 9 are at distance -1 from the root, - Nodes 3, 15 are at distance 0, - Node 20 is at distance 1, - Node 7 is at distance 2. ``` Note: - Your solution should handle any binary tree structure, including edge cases such as single-node trees or more complex arrangements. - Implement the `verticalOrderTraversal(root)` function.","solution":"from collections import defaultdict, deque from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def verticalOrderTraversal(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] node_map = defaultdict(list) queue = deque([(root, 0)]) while queue: node, hd = queue.popleft() node_map[hd].append(node.val) if node.left: queue.append((node.left, hd-1)) if node.right: queue.append((node.right, hd+1)) sorted_hd = sorted(node_map.keys()) return [node_map[hd] for hd in sorted_hd]"},{"question":"You are developing software for a logistics company to efficiently manage their deliveries. The company uses trucks to transport different packages, and each truck has a weight limit. Given the list of package weights the company needs to deliver and the weight limit for each truck, your task is to determine the minimum number of trucks required to transport all the packages. Implement a function that receives a list of package weights and an integer representing the weight limit of each truck. The function should return the minimum number of trucks needed to deliver all the packages without exceeding the weight limit of any truck. ```python def min_trucks(package_weights: List[int], truck_limit: int) -> int: # Function implementation here # Example usage packages = [4, 8, 15, 16, 23, 42] limit = 50 print(min_trucks(packages, limit)) # Expected output: 3 # Explanation: One possible way to load the trucks is: # Truck 1: [4, 8, 15, 16] (total weight = 43) # Truck 2: [23] (total weight = 23) # Truck 3: [42] (total weight = 42) ```","solution":"from typing import List def min_trucks(package_weights: List[int], truck_limit: int) -> int: Determines the minimum number of trucks required to transport all the packages without exceeding the weight limit of any truck. Args: package_weights (List[int]): List of package weights. truck_limit (int): Weight limit of each truck. Returns: int: Minimum number of trucks needed. package_weights.sort(reverse=True) trucks = [] for weight in package_weights: placed = False for i in range(len(trucks)): if trucks[i] + weight <= truck_limit: trucks[i] += weight placed = True break if not placed: trucks.append(weight) return len(trucks)"},{"question":"In this problem, you are asked to implement a function that calculates the maximum sum of a contiguous subarray within a one-dimensional array of numbers, which might also contain both positive and negative elements. Your task is to implement the function `maxSubArraySum(arr)` that receives an array of integers `arr` and returns the maximum sum of any contiguous subarray of `arr`. Your solution should have a time complexity of O(n), where n is the length of the input array. # Tips: - Use the [Kadane\'s Algorithm](https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane\'s_algorithm) for an efficient solution. # Function Signature: ```python def maxSubArraySum(arr: List[int]) -> int: ``` # Input: - An array of integers `arr`, where 1 ≤ len(arr) ≤ 10^5 and -10^4 ≤ arr[i] ≤ 10^4. # Output: - An integer representing the maximum sum of a contiguous subarray. # Example: ```python print(maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4])) # Output: 6 # Explanation: The subarray [4,-1,2,1] has the largest sum = 6. print(maxSubArraySum([1])) # Output: 1 # Explanation: The array itself is the largest sum subarray. print(maxSubArraySum([5,4,-1,7,8])) # Output: 23 # Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. ```","solution":"from typing import List def maxSubArraySum(arr: List[int]) -> int: Returns the maximum sum of a contiguous subarray. max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a binary tree represented in an array format where each node is either a number or the value `-1` representing a null node. Your task is to implement a function that finds the maximum width of any level in the binary tree. The width of a level is defined as the number of non-null nodes present at that level. For example, in an array `[1, 3, 2, 5, 3, -1, 9]` which represents the tree: ``` 1 / 3 2 / 5 3 9 ``` The width of the levels are: - Level 1: `1` (node `1`) - Level 2: `2` (nodes `3` and `2`) - Level 3: `3` (nodes `5`, `3` and `9`) So the maximum width is `3`. Implement the function `maxWidth(tree: List[int]) -> int` to compute the result for the given array representing the binary tree. # Input - The input is provided as a list `tree` where each element is an integer or `-1`. # Output - The function should return an integer representing the maximum width of the binary tree. # Example ```python # Example 1 print(maxWidth([1, 3, 2, 5, 3, -1, 9])) # Output: 3 # Example 2 print(maxWidth([1, 2, 3, 4, -1, -1, -1, 5, 6])) # Output: 2 # Example 3 print(maxWidth([1, -1, 2, -1, -1, -1, 3])) # Output: 1 ```","solution":"from typing import List def maxWidth(tree: List[int]) -> int: if not tree or tree[0] == -1: return 0 max_width = 0 current_level = 0 queue = [(0, tree[0])] # (index, value) while queue: level_length = len(queue) current_width = 0 for _ in range(level_length): index, value = queue.pop(0) if value != -1: current_width += 1 left_index = 2 * index + 1 right_index = 2 * index + 2 if left_index < len(tree): queue.append((left_index, tree[left_index])) if right_index < len(tree): queue.append((right_index, tree[right_index])) max_width = max(max_width, current_width) return max_width"},{"question":"# Background The concept of recursion is fundamental in computer science. Recursion involves a function calling itself to solve smaller instances of the same problem. A classic example of recursion is calculating the factorial of a number. # Task Write a function `reverse_string` that takes a string as input and returns the string reversed using recursion. Your function should be designed as follows: - Base Case: If the input string is empty or contains a single character, return it as is. - Recursive Case: Take the first character of the string and append it to the result of the function called with the rest of the string (excluding the first character). Example: Input: `\\"hello\\"` Output: `\\"olleh\\"` Input: `\\"recursion\\"` Output: `\\"noisrucer\\"` # Constraints: - The input string will only contain alphabets (both uppercase and lowercase) and spaces. - The maximum length of the input string will be 100 characters. # Requirements: - Implement the `reverse_string` function using recursion. - Do not use any built-in reverse functions or slicing operations. # Function Signature: ```python def reverse_string(s: str) -> str: # Your code here pass ``` # Examples: ```python assert reverse_string(\\"hello\\") == \\"olleh\\" assert reverse_string(\\"recursion\\") == \\"noisrucer\\" assert reverse_string(\\"a\\") == \\"a\\" assert reverse_string(\\"\\") == \\"\\" assert reverse_string(\\"A man a plan a canal Panama\\") == \\"amanaP lanac a nalp a nam A\\" ```","solution":"def reverse_string(s: str) -> str: Recursively reverses a given string. Args: s (str): The string to be reversed. Returns: str: The reversed string. if len(s) <= 1: # Base case: If the string is empty or has one character, return it as is. return s else: # Recursive case: Take the last character and add it to the reverse of the rest of the string. return s[-1] + reverse_string(s[:-1])"},{"question":"Given a string `s` and an integer `k`, your task is to find the length of the longest substring of `s` that contains at most `k` distinct characters. - Write a function `longest_substring_k_distinct(s, k)` that takes a string `s` and an integer `k` as input. - The function should return an integer representing the length of the longest substring that contains at most `k` distinct characters. # Example ``` Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The substring is \\"ece\\" with length 3. ``` ``` Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The substring is \\"aa\\" with length 2. ``` # Constraints - The input string `s` will be non-empty and will consist only of lowercase English letters. - 0 <= `k` <= 26 # Notes - If `k` is 0 or if the string is empty, the function should return 0. - Use sliding window and hash map techniques for an efficient solution.","solution":"def longest_substring_k_distinct(s: str, k: int) -> int: Finds the length of the longest substring with at most k distinct characters. Arguments: s -- input string (only lowercase English letters) k -- number of distinct characters allowed in the substring Returns: Integer representing the length of the longest substring containing at most k distinct characters. if k == 0 or not s: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"In the kingdom of Mathland, there are n villages connected by m bidirectional paths. Each path connects two distinct villages. The number of the i-th village is i (1 leq i leq n). Currently, a school is being built in a village c (1 leq c leq n). Your task is to find the shortest distance from any village to the new school. The distance between two villages is the minimum number of paths one must travel to get from one village to the other. -----Input----- The first line of the input contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 2 cdot 10^5) — the number of villages and the number of paths between them. The next line contains an integer c (1 leq c leq n) — the village where the school is being built. Each of the next m lines contains two integers u_i and v_i (1 leq u_i, v_i leq n, u_i ne v_i) — indicating that there is a path between villages u_i and v_i. It is guaranteed that there is a path between any two villages, meaning the graph is connected. -----Output----- Print n space-separated integers. The i-th integer should be the shortest distance from village i to the school in village c. -----Example----- Input 6 7 3 1 2 2 3 1 3 3 4 4 5 5 6 4 6 Output 1 1 0 1 2 2","solution":"from collections import deque def shortest_distances_to_school(n, m, c, paths): # Create adjacency list for the graph adj_list = [[] for _ in range(n + 1)] for u, v in paths: adj_list[u].append(v) adj_list[v].append(u) # Initialize distances with infinity distances = [-1] * (n + 1) # BFS initialization queue = deque([c]) distances[c] = 0 # Perform BFS while queue: current_village = queue.popleft() current_distance = distances[current_village] for neighbor in adj_list[current_village]: if distances[neighbor] == -1: # not visited yet distances[neighbor] = current_distance + 1 queue.append(neighbor) return distances[1:] # we ignore the 0-th index as village numbers are 1-based"},{"question":"Complete the function `is_palindrome`/`isPalindrome` (or equivalent, depending on your language) that determines if a given string is a [palindrome](https://en.wikipedia.org/wiki/Palindrome). A palindrome is a string that reads the same backward as forward. You may assume the input is a valid string containing only alphanumeric characters and is of a reasonable length. Examples ```python is_palindrome(\\"racecar\\") ==> True is_palindrome(\\"level\\") ==> True is_palindrome(\\"hello\\") ==> False ``` Your function should be case-insensitive, and ignore non-alphanumeric characters. ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") ==> True is_palindrome(\\"No \'x\' in Nixon\\") ==> True ```","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, ignoring case and non-alphanumeric characters. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Given an array of integers, write a function that returns the count of elements that are palindromic. A palindromic number is a number that reads the same backward as forward. Example 1: Input: nums = [121, 131, 123, 22] Output: 3 Explanation: 121 is a palindrome. 131 is a palindrome. 123 is not a palindrome. 22 is a palindrome. Therefore, there are 3 palindromic numbers. Example 2: Input: nums = [345, 901, 484, 1771] Output: 2 Explanation: 345 is not a palindrome. 901 is not a palindrome. 484 is a palindrome. 1771 is a palindrome. Therefore, there are 2 palindromic numbers. Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 10^6","solution":"def count_palindromic_numbers(nums): Returns the count of palindromic numbers in the given list. A palindromic number is a number that reads the same backward as forward. def is_palindrome(n): s = str(n) return s == s[::-1] return sum(1 for num in nums if is_palindrome(num))"},{"question":"You are given a string containing only lowercase alphabets. Your task is to determine if the string can be rearranged to form a palindrome. Return \\"True\\" if it is possible, otherwise return \\"False\\". ``` canFormPalindrome(s) canFormPalindrome(\\"carrace\\") \\"carrace\\" can be rearranged to \\"racecar\\" which is a palindrome. Therefore, it returns True. canFormPalindrome(\\"hello\\") It is not possible to rearrange \\"hello\\" to form a palindrome. Therefore, it returns False. ``` The input string is non-empty and has a length of up to 10^5 characters.","solution":"from collections import Counter def canFormPalindrome(s): Checks if the input string can be rearranged to form a palindrome. Args: s (str): The input string consisting of only lowercase alphabets. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. count = Counter(s) odd_count = sum(1 for count in count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function that simulates the roll of a pair of dice. However, this function has a twist: you can specify a probability distribution for each side of the dice. This means some numbers can be more likely to appear than others. Your function should accept two lists of six probabilities each, representing the probability of each side appearing for dice 1 and dice 2 respectively. Each probability list will be represented as `[p1, p2, p3, p4, p5, p6]` where `pi` is the probability of the `i-th` side. The function should return the sum of the numbers rolled on the two dice. **Requirements:** 1. Ensure that the sums of each list of probabilities are equal to 1.0. 2. If any input does not meet the probability constraints, raise a `ValueError`. Example: ```python # List representation of dice probabilities where each position indicates the probability of each side (1 through 6) die1_probs = [0.1, 0.2, 0.3, 0.1, 0.2, 0.1] die2_probs = [0.2, 0.2, 0.2, 0.1, 0.1, 0.2] # Roll the dice and get the sum using the specified probabilities result = custom_dice_roll(die1_probs, die2_probs) print(result) # Outputs: Sum of rolled values based on the given probabilities ``` Note: You may assume that the input probabilities are always valid and sum up to 1.0 for the purpose of this task.","solution":"import random def custom_dice_roll(die1_probs, die2_probs): Simulates the roll of a pair of dice with specified probability distributions. Parameters: die1_probs (list): Probabilities for each side of dice 1. die2_probs (list): Probabilities for each side of dice 2. Returns: int: Sum of numbers rolled on the two dice. Raises: ValueError: If the sum of probabilities is not equal to 1.0 for both dice. if len(die1_probs) != 6 or len(die2_probs) != 6: raise ValueError(\\"Probability lists must contain 6 elements.\\") if not (abs(sum(die1_probs) - 1.0) < 1e-6 and abs(sum(die2_probs) - 1.0) < 1e-6): raise ValueError(\\"The probabilities must sum to 1.0\\") sides = [1, 2, 3, 4, 5, 6] roll1 = random.choices(sides, die1_probs)[0] roll2 = random.choices(sides, die2_probs)[0] return roll1 + roll2"},{"question":"Implement a function that determines the minimum number of meeting rooms required to host a given set of meetings. Each meeting is represented by a tuple consisting of a start time and an end time. Meetings can overlap, and in such cases, additional meeting rooms will be required. The function should take a list of tuples as input, where each tuple represents the start and end times of a meeting. It should return an integer representing the minimum number of meeting rooms required. # Examples: ```python min_meeting_rooms([(0, 30), (5, 10), (15, 20)]) # returns 2 (Two meetings overlap) min_meeting_rooms([(7, 10), (2, 4)]) # returns 1 (No overlap) min_meeting_rooms([(1, 3), (2, 6), (8, 10)]) # returns 2 (One meeting overlaps with another) min_meeting_rooms([(2, 4), (1, 5), (6, 8), (5, 9)]) # returns 2 (Two meetings overlap with others) ``` **Note:** - Each tuple represents a meeting with a start time and an end time. - The times are given as integers representing minutes (e.g. from 0 to 1440, where 0 is 00:00 and 1440 is 24:00). - It is guaranteed that the start time of a meeting is less than its end time.","solution":"def min_meeting_rooms(meetings): Determines the minimum number of meeting rooms required to host given meetings. Parameters: meetings (list of tuples): Each tuple contains (start_time, end_time) of a meeting. Returns: int: Minimum number of meeting rooms required. if not meetings: return 0 # Separate start and end times starts = sorted(meeting[0] for meeting in meetings) ends = sorted(meeting[1] for meeting in meetings) start_pointer = 0 end_pointer = 0 used_rooms = 0 while start_pointer < len(meetings): # A new meeting starts after the last one ended, no new room needed if starts[start_pointer] >= ends[end_pointer]: end_pointer += 1 else: used_rooms += 1 start_pointer += 1 return used_rooms"},{"question":"Functionality of an old arithmetic calculator needs to be recreated in a modern programming language. This calculator only handles integers and the following operations: addition, subtraction, multiplication, and division. The division operation returns a truncated integer result without considering any remainder (similar to floor division). Create a function **simple_calculator**, which takes three arguments: - **operand1**: an integer, the first operand. - **operator**: a string, representing the operation to be performed. It can be one of the following: \'+\', \'-\', \'*\', \'/\'. - **operand2**: an integer, the second operand. The function should return the result of the operation. *Note that* - The function should handle division by zero by returning the string \\"Error: Division by zero\\". - The input operands will always be integers. # Example ```python simple_calculator(10, \'+\', 5) => 15 simple_calculator(10, \'-\', 5) => 5 simple_calculator(10, \'*\', 5) => 50 simple_calculator(10, \'/\', 5) => 2 simple_calculator(10, \'/\', 0) => \\"Error: Division by zero\\" ``` Recreate the old calculator and bring it to life in the digital era!","solution":"def simple_calculator(operand1, operator, operand2): Performs basic arithmetic operations between two integers. Parameters: operand1 (int): The first operand. operator (str): The operation to be performed. It can be \'+\', \'-\', \'*\', \'/\'. operand2 (int): The second operand. Returns: int/str: The result of the operation, or an error message in case of division by zero. if operator == \'+\': return operand1 + operand2 elif operator == \'-\': return operand1 - operand2 elif operator == \'*\': return operand1 * operand2 elif operator == \'/\': if operand2 == 0: return \\"Error: Division by zero\\" return operand1 // operand2 else: return \\"Error: Invalid operator\\""},{"question":"#Task Write a function to validate a string that contains only parentheses. The function should return a boolean indicating whether the string is valid. A string containing only parentheses is considered valid if: 1. Every opening parenthesis has a corresponding closing parenthesis. 2. Parentheses are properly nested. Examples: ``` Input: \\"()\\" => Output: True Input: \\"()()\\" => Output: True Input: \\"(()())\\" => Output: True Input: \\"(()\\" => Output: False Input: \\"())\\" => Output: False Input: \\"(()))(()\\" => Output: False ```","solution":"def validate_parentheses(s: str) -> bool: Validate if a given string containing only parentheses is valid. A string is considered valid if: 1. Every opening parenthesis has a corresponding closing parenthesis. 2. Parentheses are properly nested. :param s: String containing only parentheses. :return: True if the string is valid, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function that takes a string s as input and returns all possible substrings that are palindromes. A palindromic string is one that reads the same forward and backwards. The substrings should be returned in an array in lexicographical order and should not contain duplicates. For example, given the input string \\"aabaa\\", the function should return [\\"a\\", \\"aa\\", \\"aabaa\\", \\"aba\\", \\"b\\"]. The input string will contain only lowercase letters and will have a maximum length of 20 characters.","solution":"def is_palindrome(s): Checks if a given string is a palindrome. return s == s[::-1] def palindromic_substrings(s): Returns all unique palindromic substrings of the input string in lexicographical order. palindromes = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) return sorted(palindromes)"},{"question":"In a 2D grid of size `m x n`, each cell represents a plot of land. A cell can either be a 1 (representing land) or a 0 (representing water). An island is a group of adjacent (horizontally or vertically) land cells. Given the grid `grid`, determine the number of distinct islands. Two islands are considered to be the same if one island can be translated (shifted some number of cells up, down, left, or right) to exactly match the other island\'s shape and position. Write a function `distinct_islands(grid: List[List[int]]) -> int` to compute the number of distinct islands. Examples: ``` python distinct_islands([[1, 1, 0, 0], [1, 0, 0, 1], [0, 0, 1, 1], [0, 1, 0, 1]]) == 3 distinct_islands([[1, 1, 0, 0], [1, 0, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]]) == 2 ``` Features of the random tests for `distinct_islands(grid)`: ``` number of Tests = 50 maximum value for m, n = 100 ``` You do not have to check the validity of the input. The input grid will always be a valid 2D list representing land and water cells. Happy coding!!","solution":"from typing import List def distinct_islands(grid: List[List[int]]) -> int: def dfs(r, c, origin, shape): stack = [(r, c)] visited.add((r, c)) shape.append((r - origin[0], c - origin[1])) while stack: cr, cc = stack.pop() for dr, dc in directions: nr, nc = cr + dr, cc + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 1: visited.add((nr, nc)) shape.append((nr - origin[0], nc - origin[1])) stack.append((nr, nc)) m, n = len(grid), len(grid[0]) visited = set() unique_islands = set() directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for r in range(m): for c in range(n): if grid[r][c] == 1 and (r, c) not in visited: shape = [] dfs(r, c, (r, c), shape) unique_islands.add(tuple(shape)) return len(unique_islands)"},{"question":"The city of Codeville has decided to upgrade its public transportation system with buses that can travel through multiple bus stops in a specific order. For simplicity, each bus route can be represented as a directed acyclic graph (DAG), where each node represents a bus stop and each edge represents a direct route from one stop to another. Your task is to help plan the least number of buses required to ensure that there is a valid route from the first stop to the last stop on each bus route in Codeville\'s new system. However, instead of optimizing the whole system, you should answer for each query if the given bus stop can serve as a transfer point — meaning it is the only point where all passengers can transfer to another bus route directly within all the provided routes. Specifically, a transfer point is a bus stop where: 1. All paths from the first to the last stop pass through this bus stop. Input: - The first line contains an integer T (1 ≤ T ≤ 1000), representing the number of queries. - Each query begins with two integers N and M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 50000), where N is the number of bus stops, and M is the number of direct routes between the stops. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing a directed route from bus stop u to bus stop v. - The last line of each query contains a single integer x (1 ≤ x ≤ N), representing the bus stop being queried as the potential transfer point. Output: - For each query, output \\"YES\\" if the bus stop x can serve as a transfer point, and \\"NO\\" otherwise. Example: Input: 3 5 4 1 2 2 3 3 4 4 5 3 6 7 1 2 1 3 2 4 3 4 4 5 4 6 5 6 2 4 3 1 2 2 3 3 4 4 Output: NO NO YES Explanation: 1. For the first query, stop 3 is not a transfer point as there exist multiple paths from the first (1) to the last (5) stop, not all passing through stop 3. 2. For the second query, stop 2 is also not a transfer point because there are different paths from the first (1) to the last (6) stop that do not all pass through stop 2. 3. For the third query, stop 4 is a transfer point as it is the only point where all paths from the first (1) and the last (4) stops must pass.","solution":"def can_serve_as_transfer_point(T, queries): from collections import defaultdict, deque def topological_sort(graph, N): in_degree = [0] * (N + 1) for u in graph: for v in graph[u]: in_degree[v] += 1 queue = deque() for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return topo_order results = [] for i in range(T): N, M, edges, x = queries[i] graph = defaultdict(list) rev_graph = defaultdict(list) for u, v in edges: graph[u].append(v) rev_graph[v].append(u) topo_order = topological_sort(graph, N) if not topo_order: results.append(\\"NO\\") continue def bfs_from_node(start, target): visited = [False] * (N + 1) queue = deque([start]) while queue: node = queue.popleft() if node == target: return True visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return False if not bfs_from_node(1, N): results.append(\\"NO\\") continue def all_paths_pass_through_x(): if not bfs_from_node(1, x): return False reverse_topo_order = topo_order[::-1] visited = [False] * (N + 1) def dfs(node): if node == x: return True visited[node] = True for neighbor in rev_graph[node]: if not visited[neighbor]: if dfs(neighbor): return True return False for node in reverse_topo_order: if not visited[node]: if node != N: if dfs(node): return False return True if all_paths_pass_through_x(): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a city, there is a grid of size N times M representing a network of roads. Each cell in the grid can be either empty or blocked. The coordinates (1, 1) and (N, M) represent the start and end positions respectively. The city planner wants to know if there is a way to travel from the start position to the end position using the roads (empty cells) and avoiding any blocked cells. Determine if it is possible to travel from the start to the end position. -----Input:----- - The first line of the input contains two integers N and M denoting the dimensions of the grid. - The next N lines contain M characters each, representing the grid. A cell is either \'.\' for empty or \'#\' for blocked. -----Output:----- Print \\"YES\\" if it is possible to travel from (1, 1) to (N, M), otherwise print \\"NO\\". -----Constraints----- - 1 leq N, M leq 1000 - The cell (1, 1) and (N, M) are always empty (\'.\') -----Sample Input:----- 4 4 .... ..#. ..#. .... -----Sample Output:----- YES -----Sample Input 2:----- 4 4 .... .... .... -----Sample Output 2:----- NO -----Explanation:----- In the first example, there is a clear path from the start to the end. In the second example, the path is blocked in the middle and there is no way to reach from (1, 1) to (N, M).","solution":"def is_path_possible(N, M, grid): Determines if there is a valid path from the top-left corner (1,1) to the bottom-right corner (N,M) in the given grid. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. grid (List[str]): A list of strings representing the grid, where \'.\' denotes an empty cell and \'#\' denotes a blocked cell. Returns: str: \'YES\' if a path is possible, otherwise \'NO\'. from collections import deque def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Write a function that takes a list of strings, counts the frequency of each word, and returns a dictionary with words as keys and their respective frequencies as values. The function should ignore case and punctuation. Input - A list of strings where each string may contain words separated by spaces. Output - A dictionary with words as keys and their frequency as values. Constraints - 1 <= len(list) <= 50 - 0 <= len(string) <= 1000 - Strings can contain letters (a-z, A-Z), digits (0-9), and punctuation marks (!, ., ?, etc.) Example Input [\\"Hello world!\\", \\"This is a test. Hello again.\\", \\"Is this working? Yes, it is working!\\"] Example Output {\'hello\': 2, \'world\': 1, \'this\': 2, \'is\': 3, \'a\': 1, \'test\': 1, \'again\': 1, \'working\': 2, \'yes\': 1, \'it\': 1} Explanation - In the given example, \\"Hello\\" appears twice (in a case-insensitive manner). - The function should strip punctuation and count occurrences of each word in a case-insensitive manner. - The final output is the frequency dictionary of the words.","solution":"import string def word_frequency(strings): Computes the frequency of each word in a list of strings, ignoring case and punctuation. Args: - strings (list of str): List of strings where each string may contain words separated by spaces. Returns: - dict: Dictionary with words as keys and their frequency as values. frequency_dict = {} translator = str.maketrans(\'\', \'\', string.punctuation) for s in strings: words = s.translate(translator).lower().split() for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"Write a function `flatten_dict()` that takes a nested dictionary and returns a flattened dictionary. The keys of the flattened dictionary should be the full paths to each value in the original dictionary, using dots to separate levels of nesting. For example, if the input is: ```python { \\"a\\": { \\"b\\": { \\"c\\": 12, \\"d\\": \\"Hello World\\" } }, \\"x\\": 42 } ``` The output should be: ```python { \\"a.b.c\\": 12, \\"a.b.d\\": \\"Hello World\\", \\"x\\": 42 } ``` Your function should handle dictionaries with arbitrary nesting.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Keys in the flattened dictionary are the concatenation of keys in the nested dictionary, separated by a separator. Parameters: d (dict): The nested dictionary to flatten. parent_key (str): The base key for the current level of nesting. sep (str): The separator to use between keys. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"___ # Task **_Given_** a *string `s`*, **_return_** a new string in which the case of each letter is swapped, i.e., uppercase letters become lowercase and lowercase letters become uppercase. ___ # Notes * **_String_** `s` will **_contain only alphabetic characters_** (no spaces, numbers, or special characters). * **_String\'s length_** is *at least 1*. ___ # Input >> Output Examples ``` swapCase(\\"Hello\\") ==> return \\"hELLO\\" ``` **_Explanation_**: * The first character **_H_** is uppercase, so it becomes **_h_**. * The second character **_e_** is lowercase, so it becomes **_E_**. * The third character **_l_** is lowercase, so it becomes **_L_**. * The fourth character **_l_** is lowercase, so it becomes **_L_**. * The fifth character **_o_** is lowercase, so it becomes **_O_**. ___ ``` swapCase(\\"WORLD\\") ==> return \\"world\\" ``` **_Explanation_**: * All characters in **_WORLD_** are uppercase, so they all become lowercase: **_world_**. ___ ``` swapCase(\\"CodeWars\\") ==> return \\"cODEwARS\\" ``` **_Explanation_**: * The first character **_C_** is uppercase, so it becomes **_c_**. * The next three characters **_ode_** are lowercase, so they become **_ODE_**. * The next character **_W_** is uppercase, so it becomes **_w_**. * The last three characters **_ars_** are lowercase, so they become **_ARS_**. ___ **Enjoy Coding!**","solution":"def swapCase(s): Returns a new string where the case of each letter in the input string s is swapped. return s.swapcase()"},{"question":"Reverse a String Write a function that takes a string as input and returns the string reversed. Information Reversing a string means arranging the characters in the opposite order. For an example string `hello` 1. Reverse the characters in the string. ``` olleh ``` 2. The function should return the reversed string. ``` olleh ```","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"=====Problem Statement===== Write a code that reads an integer n from STDIN and prints a right-aligned staircase of height n using the \'#\' character. =====Example===== n = 4 Output should be: ``` # # ``` =====Input Format===== A single integer n from STDIN. =====Constraints===== 1 ≤ n ≤ 100 =====Output Format===== Print a staircase of height n using the \'#\' character, right-aligned, with each line ending in a newline character.","solution":"def print_staircase(n): Prints a right-aligned staircase of height n using the \'#\' character. for i in range(1, n + 1): print(\' \' * (n - i) + \'#\' * i)"},{"question":"Julia has recently started working on a search engine and needs to design a feature that suggests search phrases based on user input. Julia will receive a list of search phrases and their popularity, which is a number representing how frequently that phrase has been searched. Her goal is to implement a system that suggests the top k most popular search phrases that start with a given prefix. Each search phrase consists of lowercase English letters and has a unique popularity value. If fewer than k phrases start with the given prefix, return all such phrases. Phrases should be sorted in descending order of popularity. If multiple phrases have the same popularity, they should be sorted lexicographically. Help Julia design the feature. -----Input----- The first line contains two integers, n and k (1 le n le 10^5, 1 le k le n) – the number of search phrases and the number of suggestions required, respectively. The next n lines each contain a search phrase followed by an integer p_i (1 le p_i le 10^9), which represents the popularity of that phrase. The last line contains a single string prefix consisting of lowercase English letters. -----Output----- Output a single line containing the top k most popular search phrases that start with the given prefix. If fewer than k such phrases exist, output all of them. The phrases should be separated by spaces. -----Examples----- Input 5 3 apple 100 appetizer 200 application 150 banana 300 appliance 250 app Output appliance appetizer application Input 4 2 dog 500 cat 400 dogmatic 600 catalog 500 dog Output dogmatic dog Input 3 1 test 100 exam 200 quiz 300 ex Output exam Input 4 3 interview 500 internet 400 interval 300 internal 600 in Output internal interview internet","solution":"def suggest_phrases(n, k, phrases, prefix): Suggest the top k most popular search phrases that start with the given prefix. :param n: int - Number of search phrases :param k: int - Number of suggestions required :param phrases: List[Tuple[str, int]] - List of tuples containing search phrases and their popularity :param prefix: str - The given prefix :return: List[str] - List of suggested search phrases filtered_phrases = [phrase for phrase in phrases if phrase[0].startswith(prefix)] # Sort by popularity (descending) and lexicographically sorted_phrases = sorted(filtered_phrases, key=lambda x: (-x[1], x[0])) # Get top k phrases suggested_phrases = [phrase[0] for phrase in sorted_phrases[:k]] return suggested_phrases"},{"question":"Given a list of integers, write a function called `count_inversions(lst)` that returns the number of inversions in the list. An inversion is a pair of elements where the first element is greater than the second one and the first element appears before the second one in the list. For example, in the list `[2, 4, 1, 3, 5]`, there are three inversions: `(2, 1)`, `(4, 1)`, and `(4, 3)`.","solution":"def count_inversions(lst): Returns the number of inversions in the list. An inversion is a pair of elements where the first element is greater than the second one and the first element appears before the second one in the list. inversions = 0 n = len(lst) for i in range(n): for j in range(i + 1, n): if lst[i] > lst[j]: inversions += 1 return inversions"},{"question":"# Description: Write a function that checks if a string is a palindrome, considering only alphanumeric characters and ignoring cases. # Examples ``` is_palindrome(\\"A man, a plan, a canal: Panama\\") == True is_palindrome(\\"race a car\\") == False is_palindrome(\\" \\") == True is_palindrome(\\"0P\\") == False ```","solution":"def is_palindrome(s): Checks if a string is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"You are given an array of integers and a value, and you need to implement a function that partitions the array (in-place) such that all elements less than the given value appear before all elements equal to the value, which appear before all elements greater than the value. The relative order of elements less than and greater than the given value need not be maintained. However, the relative order of elements equal to the value should be preserved in the resulting array. The partition should be done in O(n) time complexity, where n is the number of elements in the array. -----Function Signature----- ```python def dutch_flag_partition(arr: List[int], pivot: int) -> None: pass ``` -----Input----- - An array **arr** of integers where 1 leq |arr| leq 10^6. - An integer **pivot** representing the value to partition around, where all elements less than this value come before all elements equal to this value, which precede all elements greater than this value. -----Output----- - The function should modify the array **in-place** and should not return anything. -----Example----- ```python # Example 1: arr = [4, 2, 3, 1, 3, 2, 4, 5] pivot = 3 dutch_flag_partition(arr, pivot) print(arr) # Output: [2, 1, 2, 3, 3, 4, 5, 4] # Explanation: Elements less than 3 are [2, 1, 2], # elements equal to 3 are [3, 3], # and elements greater than 3 are [4, 5, 4]. # Example 2: arr = [1, 3, 2, 3, 6, 3, 4, 5] pivot = 3 dutch_flag_partition(arr, pivot) print(arr) # Output: [1, 2, 3, 3, 3, 6, 4, 5] # Explanation: Elements less than 3 are [1, 2], # elements equal to 3 are [3, 3, 3], # and elements greater than 3 are [6, 4, 5]. ``` -----Note----- - The function should work in-place, modifying the input array directly. - The output may have multiple valid solutions as long as the partitioning rule is respected. - Try to achieve the partition in one pass over the array for optimal performance.","solution":"def dutch_flag_partition(arr, pivot): Partitions the array around the pivot into three groups: - Elements less than the pivot - Elements equal to the pivot - Elements greater than the pivot The function modifies the array in-place. Parameters: arr (List[int]): List of integers to be partitioned. pivot (int): The pivot value around which the partition is done. Returns: None smaller, equal, larger = 0, 0, len(arr) while equal < larger: if arr[equal] < pivot: arr[smaller], arr[equal] = arr[equal], arr[smaller] smaller += 1 equal += 1 elif arr[equal] == pivot: equal += 1 else: larger -= 1 arr[equal], arr[larger] = arr[larger], arr[equal]"},{"question":"=====Function Descriptions===== itertools.permutations() This tool returns successive r-length permutations of elements in the iterable. If r is not specified, then r defaults to the length of the iterable, and all possible full-length permutations are generated. Sample Code >>> from itertools import permutations >>> >>> print list(permutations([\'a\', \'b\', \'c\'])) [(\'a\', \'b\', \'c\'), (\'a\', \'c\', \'b\'), (\'b\', \'a\', \'c\'), (\'b\', \'c\', \'a\'), (\'c\', \'a\', \'b\'), (\'c\', \'b\', \'a\')] >>> >>> print list(permutations([\'a\', \'b\', \'c\'], 2)) [(\'a\', \'b\'), (\'a\', \'c\'), (\'b\', \'a\'), (\'b\', \'c\'), (\'c\', \'a\'), (\'c\', \'b\'), (\'c\', \'b\')] >>> >>> print list(permutations(\'123\')) [(\'1\', \'2\', \'3\'), (\'1\', \'3\', \'2\'), (\'2\', \'1\', \'3\'), (\'2\', \'3\', \'1\'), (\'3\', \'1\', \'2\'), (\'3\', \'2\', \'1\')] =====Problem Statement===== You are given a list A. Your task is to compute all possible permutations of length r of the list A. Example A = [1, 2, 3] r = 2 Permutations of length r = 2 : [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)] Note: A is a sorted list, and the permutations should also maintain the sorted order of the original list. =====Input Format===== The first line contains the space separated elements of list A. The second line contains the integer r. =====Constraints===== 0 < len(A) < 10 1 < r ≤ len(A) =====Output Format===== Output the space-separated tuples of permutations of length r.","solution":"from itertools import permutations def get_permutations(A, r): Returns all permutations of length r for the given list A. return list(permutations(A, r)) # Example Usage: # A = [1, 2, 3] # r = 2 # print(get_permutations(A, r)) # Output: [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to rearrange the list so that all negative numbers appear before the positive numbers while maintaining the original order (preserving relative positions of negative and positive numbers). =====Input Format===== A single line of input containing space-separated integers. =====Constraints===== -10^5 <= Each integer <= 10^5 1 <= Number of integers in the list <= 1000 =====Output Format===== Output the rearranged list as space-separated integers.","solution":"def rearrange_list(nums): This function takes a list of integers and rearranges it so that all negative numbers appear before the positive numbers (maintaining the original order). negatives = [n for n in nums if n < 0] non_negatives = [n for n in nums if n >= 0] return negatives + non_negatives"},{"question":"Bessie loves playing with numbers, and today she has given her friend Daisy a challenging task. Daisy has a set of n integers and she has to find a special subset of them. Specifically, Daisy needs to find if there exists a subset of exactly k integers from this set whose sum is equal to a given value s. If such a subset exists, Daisy should print \\"YES\\", otherwise \\"NO\\". -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 1000) — the number of test cases. Next 3t lines describe the test cases. The first line of each test case contains three integers n, k, and s (1 le n le 100, 1 le k le n, 1 le s le 10^4) — the number of integers in the set, the number of integers to be chosen in the subset, and the required sum, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^3) — the integers in the set. It is guaranteed that the sum of n over all the test cases will not exceed 10^4. -----Output----- For each test case, print \\"YES\\" if there exists a subset of exactly k integers whose sum is equal to s, otherwise print \\"NO\\". -----Example----- Input 4 5 3 9 1 2 3 4 5 4 2 7 1 4 2 6 6 4 15 2 3 5 7 8 9 3 1 10 10 20 30 Output YES YES NO YES -----Note----- In the first test case, a possible subset of 3 integers that sum to 9 is {2, 3, 4}. In the second test case, a possible subset of 2 integers that sum to 7 is {1, 6}. In the third test case, there is no subset of 4 integers that sum to 15. In the fourth test case, there is a single integer 10 in the set which is equal to the required sum, so the subset contains only this integer.","solution":"from itertools import combinations def find_special_subsets(t, test_cases): results = [] for i in range(t): n, k, s = test_cases[i][0] arr = test_cases[i][1] found = False for comb in combinations(arr, k): if sum(comb) == s: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers where some elements appear twice and others appear once. Your task is to find all the integers that appear exactly twice. You must implement a function that returns a list of integers which appear exactly twice in the input array. Your function should have optimal time complexity and should not use extra space for another data structure (you can modify the input array and use it for your solution). Write a function `findDuplicates` that takes a list of integers as input and returns a list of integers that appear twice. # Example: Input: ```python findDuplicates([4,3,2,7,8,2,3,1]) ``` Output: ```python [2, 3] ``` Explanation: The integers 2 and 3 appear exactly twice in the given array. # Constraints: - The input array will have a length between 1 and 10^5. - The elements of the array will be integers where 1 <= element <= length of the array.","solution":"def findDuplicates(nums): Finds all numbers in the array that appear exactly twice. Args: nums: List[int] - List of integers where some elements appear twice and others once. Returns: List[int] - List of integers that appear exactly twice. res = [] for num in nums: index = abs(num) - 1 if nums[index] < 0: res.append(abs(num)) else: nums[index] = -nums[index] return res"},{"question":"Matthew loves organizing his bookshelf. He arranges his books in non-decreasing order of their heights. One day, Matthew purchased a set of new books and added them randomly to his bookshelf. Now, some books on the shelf are out of order. To restore order, he wants to know the minimum number of books he needs to move to ensure all books are arranged in non-decreasing order of their heights. -----Input:----- - The first line consists of the number T representing the number of test cases. - Each test case consists of 2 lines. - The first line contains the number N representing the number of books. - The second line contains N space-separated integers (H1, H2, ..., HN) representing the heights of the books in the current order on the shelf. -----Output:----- For each test case, you must print the minimum number of books Matthew needs to move to achieve the desired non-decreasing order. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq H_i leq 10^9 -----Sample Input:----- 3 4 4 3 2 1 5 10 20 20 10 30 6 2 1 2 3 2 2 -----Sample Output:----- 3 1 2","solution":"def min_books_to_move(test_cases): results = [] for n, heights in test_cases: # Find the longest non-decreasing subsequence lis = [] for h in heights: pos = binary_search_lis(lis, h) if pos == len(lis): lis.append(h) else: lis[pos] = h results.append(n - len(lis)) return results # Helper function. Finds the position to replace in the LIS. def binary_search_lis(lis, height): low, high = 0, len(lis) while low < high: mid = (low + high) // 2 if lis[mid] <= height: low = mid + 1 else: high = mid return low"},{"question":"Create a function named `deep_search` which takes a nested dictionary and a target value as inputs. The function should search through all levels of the dictionary to determine if the target value exists. If the target value is found, the function should return True. Otherwise, it should return False. Consider that the dictionary may contain lists as values, and these lists may also contain nested dictionaries. The following are examples of how this function would be used and what the expected results would be: ```python data = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } }, \\"g\\": [5, 6, {\\"h\\": 7}] } deep_search(data, 4) # returns True deep_search(data, 8) # returns False deep_search(data, 7) # returns True deep_search(data, \\"e\\") # returns False ```","solution":"def deep_search(data, target): Recursively searches through all levels of a nested dictionary or list to determine if the target value exists. Returns True if the value is found, False otherwise. if isinstance(data, dict): for value in data.values(): if deep_search(value, target): return True elif isinstance(data, list): for item in data: if deep_search(item, target): return True else: return data == target return False"},{"question":"Complete the function that takes in a string of words and returns the length of the shortest word(s). The input string consists of alphabetic characters and spaces only. Ensure you handle edge cases where the input string might be empty. Example ```python input string: \\"A quick brown fox jumps over the lazy dog\\" output: 1 ``` The shortest word in the input string is \\"A\\", and its length is `1`.","solution":"def find_shortest_word_length(sentence): Returns the length of the shortest word(s) in the given sentence. :param sentence: String containing words separated by spaces :return: Length of the shortest word if not sentence.strip(): return 0 words = sentence.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You are given a simple array transformation problem. You have an array of N integers and a set of Q operations. Each operation can either increase each element of the array by 1 or find the minimum element of the array. You need to execute these operations in the given order. - \'+\': Increase each element of the array by 1 - \'?\': Find and report the minimum element in the array Answer all queries of the second type. -----Input----- - The first line of input contains two space-separated integers N and Q. - The second line contains N space-separated integers, representing the array. - The third line contains a string with length Q describing operations. Each character in this string is either \'+\', denoting an increase operation, or \'?\', denoting a query operation. -----Output----- For each query operation (\'?\'), print a single integer—the minimum element in the current state of the array. -----Constraints----- - 1 le N le 10^5 - 1 le Q le 10^5 - -10^9 le A_i le 10^9 for each valid i - S contains only characters \'+\' and \'?\' -----Subtasks----- Subtask #1 (30 points): - 1 le N le 10^3 - 1 le Q le 10^3 Subtask #2 (70 points): original constraints -----Example Input----- 5 5 3 1 4 1 5 +?++ -----Example Output----- 4","solution":"def array_transformation(n, q, arr, operations): min_results = [] increment = 0 for op in operations: if op == \'+\': increment += 1 elif op == \'?\': current_min = min(arr) + increment min_results.append(current_min) return min_results # Example use case n, q = 5, 5 arr = [3, 1, 4, 1, 5] operations = \\"+?++?\\" results = array_transformation(n, q, arr, operations) for result in results: print(result)"},{"question":"\\"Anagram Checker\\" involves determining if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in the same frequency, but can be in different orders. Your task is as follows. Given two strings, return `True` if they are anagrams, and `False` otherwise. For example, given the strings `\\"listen\\"` and `\\"silent\\"`: * Both strings contain the characters `l`, `i`, `s`, `t`, `e`, `n` with the same frequency. So ```python are_anagrams(\\"listen\\", \\"silent\\") == True ``` Given the strings `\\"triangle\\"` and `\\"integral\\"`: * Both strings contain the characters `t`, `r`, `i`, `a`, `n`, `g`, `l`, `e` with the same frequency. So ```python are_anagrams(\\"triangle\\", \\"integral\\") == True ``` Given the strings `\\"apple\\"` and `\\"pale\\"`: * The first string contains the characters `a`, `p`, `p`, `l`, `e` * The second string contains the characters `p`, `a`, `l`, `e` Since the frequency of `p` is different, they are not anagrams. So ```python are_anagrams(\\"apple\\", \\"pale\\") == False ``` You can assume the input strings will only contain lowercase alphabets.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. # If lengths of the strings are not equal, they cannot be anagrams if len(s1) != len(s2): return False # Create dictionaries to count the frequency of each character in both strings count1 = {} count2 = {} for char in s1: count1[char] = count1.get(char, 0) + 1 for char in s2: count2[char] = count2.get(char, 0) + 1 # Compare frequency dictionaries return count1 == count2"},{"question":"You are given an uninhabited island represented as an n x m grid. Each cell in the grid is either land (\'L\') or water (\'W\'). You need to determine the number of distinct islands present on the island. An island is a group of \'L\' cells connected vertically or horizontally (not diagonally). Water cells (\'W\') are not part of any island. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. Each of the next n lines contains a string of m characters representing the grid, where each character is either \'L\' or \'W\'. -----Output----- Output a single integer — the number of distinct islands. -----Examples----- Input 4 5 LWLWL WLWLW LWLWL WLWLW Output 10 Input 3 3 LLW LLW WWW Output 1","solution":"def num_distinct_islands(n, m, grid): def dfs(i, j): stack = [(i, j)] while stack: x, y = stack.pop() if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\': continue grid[x][y] = \'W\' stack.append((x+1, y)) stack.append((x-1, y)) stack.append((x, y+1)) stack.append((x, y-1)) count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': dfs(i, j) count += 1 return count"},{"question":"Write a function `mergeSortedArrays` that takes two sorted arrays as input and returns a new array that contains all the elements from both input arrays, sorted in ascending order. Make sure your solution handles edge cases, such as one or both input arrays being empty. For example: ```python def mergeSortedArrays(arr1, arr2): # Your code here # Test cases print(mergeSortedArrays([1, 3, 5], [2, 4, 6])) # Should return [1, 2, 3, 4, 5, 6] print(mergeSortedArrays([1, 2, 3], [])) # Should return [1, 2, 3] print(mergeSortedArrays([], [4, 5, 6])) # Should return [4, 5, 6] print(mergeSortedArrays([], [])) # Should return [] ```","solution":"def mergeSortedArrays(arr1, arr2): Merges two sorted arrays arr1 and arr2 into a new array, sorted in ascending order. merged = [] i, j = 0, 0 # Traverse both arrays and append smaller element from either array to merged while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1, append them to merged while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are remaining elements in arr2, append them to merged while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"The gardener at Mr. Green\'s mansion used to record the number of diverse species of plants in the garden every year. The gardener noticed a pattern in the recordings. Given the number of species in a particular year, he could predict the number of additional species recorded in the subsequent year. Help the gardener by finding the total number of species in the garden for the given year if it follows a specific pattern. Example to identify the pattern: Input Output 3 6 5 15 2 3 4 10 -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing an integer N which represents the number of species recorded in the previous year. -----Output:----- For each test case, output on a single line the total number of species that will be in the garden this year. -----Constraints----- - 1 leq T leq 10^6 - 1 leq N leq 10^6 -----Sample Input:----- 2 6 3 -----Sample Output:----- 21 6","solution":"def total_species(N): Given the number of species N in the previous year, returns the total number of species this year. return (N * (N + 1)) // 2 def batch_total_species(test_cases): Given a list of test cases, returns the total number of species for each test case. results = [] for N in test_cases: results.append(total_species(N)) return results"},{"question":"Given a string containing a list of space-separated words, return the length of the shortest word(s). The input string will be non-empty and will contain at least one word. For example: ``` (\\"Word lengths are fun to calculate\\") => 2 (\\"I love programming challenges!\\") => 1 (\\"Shortest word length\\") => 4 ```","solution":"def shortest_word_length(s): Returns the length of the shortest word in the string s. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Task You are given a large list of integers where every integer appears twice except for one integer that appears only once. Your task is to find the integer that appears only once. Write a single function `find_single_number` that takes a list of integers as input and returns the integer that appears only once. # Input - A list of integers, `numbers`, containing 2*n + 1 elements (where n >= 0) such that every element appears exactly twice except for one element that appears only once. # Output - Return the single integer that appears only once in the list. # Examples ```python find_single_number([2, 2, 1]) => 1 find_single_number([4, 1, 2, 1, 2]) => 4 find_single_number([1, 3, 1, 3, 5]) => 5 ``` # Constraints - The algorithm should have a linear runtime complexity. - Try to implement the solution using constant extra space.","solution":"def find_single_number(numbers): Returns the integer that appears only once in a given list where every other integer appears exactly twice. result = 0 for num in numbers: result ^= num return result"},{"question":"Create a method `swap_language_greeting` that takes a string which is a sentence with a greeting in one of the following languages: English, Spanish, or French. The method should swap the greeting in those languages to a different greeting in the same language, cycling through in a predefined manner. If English, change \\"Hello\\" to \\"Hi\\". If Spanish, change \\"Hola\\" to \\"Buenos días\\". If French, change \\"Bonjour\\" to \\"Salut\\". Example: ```python swap_language_greeting(\\"Hello there!\\") ``` This example will return the string `Hi there!`. ```python swap_language_greeting(\\"Hola amigo!\\") ``` This example will return the string `Buenos días amigo!`. ```python swap_language_greeting(\\"Bonjour tout le monde!\\") ``` This example will return the string `Salut tout le monde!`.","solution":"def swap_language_greeting(sentence): Swaps the greeting in the sentence based on predefined greetings. If the sentence contains \\"Hello\\", change it to \\"Hi\\". If the sentence contains \\"Hola\\", change it to \\"Buenos días\\". If the sentence contains \\"Bonjour\\", change it to \\"Salut\\". :param sentence: String containing the input sentence :return: String with the swapped greeting if \\"Hello\\" in sentence: return sentence.replace(\\"Hello\\", \\"Hi\\") elif \\"Hola\\" in sentence: return sentence.replace(\\"Hola\\", \\"Buenos días\\") elif \\"Bonjour\\" in sentence: return sentence.replace(\\"Bonjour\\", \\"Salut\\") else: return sentence"},{"question":"Write a function that will encode a given string using a simple Caesar Cipher with a shift of 3. In a Caesar Cipher, each letter in the plaintext is \'shifted\' a certain number of places down or up the alphabet. For this question, shift all letters 3 places to the right. For example, \'A\' becomes \'D\', \'B\' becomes \'E\', etc. Note that the alphabet wraps around: after \'Z\' comes \'A\'. Spaces should remain as they are. The input will be a valid string containing only uppercase letters and spaces. Examples ```python caesar_cipher(\'A\') # \\"D\\" caesar_cipher(\'XYZ\') # \\"ABC\\" caesar_cipher(\'HELLO WORLD\') # \\"KHOOR ZRUOG\\" caesar_cipher(\'CAESAR CIPHER\') # \\"FDHVDU FLSKHU\\" ```","solution":"def caesar_cipher(text): Encodes a given string using a Caesar Cipher with a shift of 3. Parameters: text (str): The input string containing only uppercase letters and spaces. Returns: str: The encoded string. result = [] for char in text: if char == \' \': result.append(char) else: result.append(chr((ord(char) - ord(\'A\') + 3) % 26 + ord(\'A\'))) return \'\'.join(result)"},{"question":"Unique Paths in a Grid In a 2D grid, you are located at the top-left corner of the grid (marked as \'Start\') and need to find a path to the bottom-right corner (marked as \'End\'). The grid is represented as a matrix where each cell is either open (indicated by `0`) or blocked (indicated by `1`). You can move up, down, left, or right, but cannot move diagonally. From each open cell, you can move to any of the four adjacent cells that are also open. Write a function `uniquePaths(grid)` that takes a 2D list `grid` as input and returns the number of unique paths from the \'Start\' position to the \'End\' position. If no such path exists, the function should return `0`. # Constraints - The dimensions of `grid` will be between 2x2 and 100x100. - Each cell in the grid is either `0` (open) or `1` (blocked). # Examples Basic Tests ``` Input: [[0, 0, 0], [0, 1, 0], [0, 0, 0]] Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ``` ``` Input: [[0, 1], [0, 0]] Output: 1 Explanation: Only one path: 1. Down -> Right ``` ``` Input: [[0, 0, 1], [0, 0, 0], [1, 0, 0]] Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Down -> Right ``` Edge Cases ``` Input: [[0, 0, 0], [0, 0, 0], [0, 0, 0]] Output: 6 Explanation: There are 6 unique paths: ``` ``` Input: [[0, 1], [1, 0]] Output: 0 Explanation: No valid paths. ``` ``` Input: [[0, 0], [0, 0]] Output: 2 Explanation: There are 2 unique paths: 1. Right -> Down 2. Down -> Right ``` # Testing Along with the example tests given, additional tests will cover: - Grids with all cells open. - Grids with only one open path. - Grids with varying sizes within the given constraints. Ensure your solution handles all edge cases and performs efficiently for the largest grid sizes.","solution":"def uniquePaths(grid): def is_in_bounds(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) def dfs(x, y): if not is_in_bounds(x, y) or grid[x][y] == 1: return 0 if (x, y) == (len(grid) - 1, len(grid[0]) - 1): return 1 if (x, y) in memo: return memo[(x, y)] grid[x][y] = 1 paths = dfs(x + 1, y) + dfs(x - 1, y) + dfs(x, y + 1) + dfs(x, y - 1) grid[x][y] = 0 memo[(x, y)] = paths return paths if grid[0][0] == 1 or grid[-1][-1] == 1: return 0 memo = {} return dfs(0, 0)"},{"question":"You are given an array of integers, where every element appears three times except for one, which appears exactly once. Implement a function that finds and returns the element that appears exactly once. **Example:** Input: ``` arr = [2, 2, 3, 2] ``` Output: ``` 3 ``` Input: ``` arr = [0, 1, 0, 1, 0, 1, 99] ``` Output: ``` 99 ``` **Note:** - Your solution should have a linear runtime complexity. - Use only constant extra space.","solution":"def single_number(arr): Finds the element that appears exactly once in an array where every other element appears three times. result = 0 for i in range(32): bit_sum = 0 for num in arr: bit_sum += (num >> i) & 1 bit_sum %= 3 if bit_sum != 0: result |= bit_sum << i if result >= 2**31: result -= 2**32 return result"},{"question":"Implement a Python class `RobotPath` that simulates the movement of a robot on an infinite grid starting at position `(0, 0)`. The grid is represented by x and y coordinates, where the robot can move up, down, left, or right. The robot can be given a command string, where each character in the string represents a movement instruction: - \'U\' -> move up (y coordinate increases by 1) - \'D\' -> move down (y coordinate decreases by 1) - \'L\' -> move left (x coordinate decreases by 1) - \'R\' -> move right (x coordinate increases by 1) The class should have the following methods: - `__init__`: Initializes the robot at the starting position `(0, 0)`. - `move`: Takes a command string and updates the robot\'s position based on the instructions. - `current_position`: Returns the robot\'s current position as a tuple `(x, y)`. # Example ```python # Initialize the robot robot = RobotPath() # Robot\'s initial position print(robot.current_position()) # Output: (0, 0) # Move the robot with commands \'UUDDLRLR\' robot.move(\\"UUDDLRLR\\") # Robot\'s position after movements print(robot.current_position()) # Output: (0, 0) # Move the robot with command \'UUU\' robot.move(\\"UUU\\") # Robot\'s position after movements print(robot.current_position()) # Output: (0, 3) ```","solution":"class RobotPath: def __init__(self): Initializes the robot at the starting position (0, 0). self.position = [0, 0] # x, y position def move(self, commands): Update the robot\'s position based on the movement commands. :param commands: A string where each character is a movement instruction for command in commands: if command == \'U\': self.position[1] += 1 elif command == \'D\': self.position[1] -= 1 elif command == \'L\': self.position[0] -= 1 elif command == \'R\': self.position[0] += 1 def current_position(self): Returns the robot\'s current position as a tuple (x, y). :return: (x, y) position of the robot return tuple(self.position)"},{"question":"You have recently taken over the task of managing the daily sales report for a small chain of cafes. Each day, the sales data from each cafe locations are stored in a list of dictionaries, with each dictionary containing `location`, `items_sold`, and `revenue` fields. Your task is to generate a summary report at the end of each day which calculates: 1. Total items sold across all locations. 2. Total revenue from all locations. 3. The average revenue per item sold (rounded to two decimal places). Write a function `generate_report(sales_data)` that takes in a list of dictionaries as described and returns a summary report as a dictionary with the keys `total_items_sold`, `total_revenue`, and `average_revenue_per_item`. Example: ``` sales_data = [ {\'location\': \'Cafe A\', \'items_sold\': 120, \'revenue\': 300.0}, {\'location\': \'Cafe B\', \'items_sold\': 150, \'revenue\': 450.0}, {\'location\': \'Cafe C\', \'items_sold\': 200, \'revenue\': 600.0}, ] generate_report(sales_data) ``` Expected Output: ``` { \'total_items_sold\': 470, \'total_revenue\': 1350.0, \'average_revenue_per_item\': 2.87 } ```","solution":"def generate_report(sales_data): Generates a summary report from the daily sales data. Parameters: sales_data (list): List of dictionaries, each containing \'location\', \'items_sold\', and \'revenue\'. Returns: dict: A summary report containing \'total_items_sold\', \'total_revenue\', and \'average_revenue_per_item\'. total_items_sold = sum(location_data[\'items_sold\'] for location_data in sales_data) total_revenue = sum(location_data[\'revenue\'] for location_data in sales_data) average_revenue_per_item = round(total_revenue / total_items_sold, 2) if total_items_sold else 0.0 return { \'total_items_sold\': total_items_sold, \'total_revenue\': total_revenue, \'average_revenue_per_item\': average_revenue_per_item }"},{"question":"Polycarp has a garden represented as a grid with n rows and m columns. The garden can either be empty (represented by a 0) or have weeds (represented by a 1). Polycarp wants to plant a rectangular section of flowers in the garden. You need to determine the size of the largest rectangular section of the garden that only contains empty spaces (0s) and plant the flowers there. The boundaries of the rectangle should be parallel to the sides of the grid. ----Input----- In the first line, you are given an integer t (1 le t le 10^4) — the number of test cases. In the next lines, for each test case, the first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns of the garden. Each of the next n lines contains m integers (either 0 or 1) — representing the garden. ----Output----- Print t integers — the answers for each test case. Each answer should contain an integer equal to the maximal possible area (in cells) of a rectangular section of the garden that only contains empty spaces (0s). ----Example----- Input: 2 3 4 1 0 0 0 0 0 0 1 0 1 0 0 2 5 0 1 1 0 1 0 0 0 0 0 Output: 4 5 ----Note---- In the first test case, the 3x4 garden has a largest rectangular section containing only 0s with an area of 4 cells. In the second test case, the 2x5 garden has a largest rectangular section containing only 0s with an area of 5 cells.","solution":"def maximal_rectangle(grid): This function takes a grid as input and returns the area of the largest rectangle containing only 0s. if not grid: return 0 n, m = len(grid), len(grid[0]) dp = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == 0: dp[j] += 1 else: dp[j] = 0 stack = [] for j in range(m + 1): while stack and (j == m or dp[stack[-1]] > dp[j]): height = dp[stack.pop()] width = j if not stack else j - stack[-1] - 1 max_area = max(max_area, width * height) stack.append(j) return max_area def largest_rectangles(test_cases): results = [] for grid in test_cases: results.append(maximal_rectangle(grid)) return results def process_input(t, test_cases_input): This function processes the raw input data and invokes the `largest_rectangles` function. test_cases = [] index = 0 for _ in range(t): n, m = map(int, test_cases_input[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, test_cases_input[index].split()))) index += 1 test_cases.append(grid) return largest_rectangles(test_cases)"},{"question":"A company wants to organize its database of employees based on their performance scores. Each employee has a unique ID (an integer) and a performance score (an integer). The company wants to identify groups of employees whose performance scores fall within a specific range and whose combined performance score sum is maximized without any overlap between groups. Given an array of tuples where each tuple contains an employee ID and their performance score, and a target range [minRange, maxRange], write a function to find the maximum sum of performance scores for the non-overlapping groups that fall entirely within the given range. Return the maximum sum of performance scores. If no valid groups can be formed, return 0. Example 1: Input: employeeScores = [(1, 50), (2, 30), (3, 70), (4, 90)], minRange = 50, maxRange = 100 Output: 210 Explanation: The groups (1, 50), (3, 70), and (4, 90) fall within the range and their combined sum is 210. Example 2: Input: employeeScores = [(1, 40), (2, 60), (3, 55), (4, 75)], minRange = 50, maxRange = 65 Output: 115 Explanation: The groups (2, 60) and (3, 55) fall within the range and their combined sum is 115. The employee (4, 75) exceeds the maxRange of 65. Example 3: Input: employeeScores = [(1, 20), (2, 35), (3, 50)], minRange = 40, maxRange = 60 Output: 50 Explanation: Only the employee (3, 50) falls within the range. Example 4: Input: employeeScores = [(1, 200), (2, 250), (3, 300)], minRange = 100, maxRange = 150 Output: 0 Explanation: No employee performance scores fall within the range [100, 150]. Constraints: 1 <= len(employeeScores) <= 10^5 0 <= employee ID, performance score <= 10^9 0 <= minRange <= maxRange <= 10^9","solution":"def max_performance_sum(employeeScores, minRange, maxRange): Given a list of employee scores and a range, returns the maximum sum of performance scores for non-overlapping groups that fall entirely within the range. max_sum = 0 for _, score in employeeScores: if minRange <= score <= maxRange: max_sum += score return max_sum"},{"question":"Implement a class `MinStack` that supports stack operations and can retrieve the minimum element in constant time. The class should support the following operations: - `push(val)`: Pushes an item val onto the stack. - `pop()`: Removes the element on the top of the stack. - `top()`: Retrieves the top element of the stack. - `getMin()`: Retrieves the minimum element in the stack. All the operations must be performed in O(1) time complexity. Example: ```python # Your MinStack object will be serialized and deserialized with these methods: # Initialize an empty stack. minStack = MinStack() # Pushes -2 onto the stack minStack.push(-2) # Pushes 0 onto the stack minStack.push(0) # Pushes -3 onto the stack minStack.push(-3) # Retrieves the minimum element in the stack, which is -3 assert minStack.getMin() == -3 # Removes the element on top, which is -3 minStack.pop() # Retrieves the top element, which is now 0 assert minStack.top() == 0 # Retrieves the minimum element in the stack, which is now -2 assert minStack.getMin() == -2 ```","solution":"class MinStack: def __init__(self): Initialize your data structure here. self.stack = [] self.min_stack = [] def push(self, val: int) -> None: self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self) -> None: if self.stack: if self.stack[-1] == self.min_stack[-1]: self.min_stack.pop() self.stack.pop() def top(self) -> int: if self.stack: return self.stack[-1] return None def getMin(self) -> int: if self.min_stack: return self.min_stack[-1] return None"},{"question":"# Task Emma the Engineer has an interesting problem at work. She needs to create a software that helps with positioning satellites optimally in a 2D plane. Each satellite operates within a certain coverage radius. Given multiple satellites, their respective coverage radii, and the coordinates of the base station which needs uninterrupted communication with at least one satellite, Emma\'s task is to verify if there is indeed a satellite that covers the base station. The satellites can overlap with each other in terms of coverage areas. Your task is to write a function to determine whether any satellite\'s coverage includes the base station. # Example Given `satellites = [(0, 0, 10), (5, 5, 5), (10, 10, 2)]` and `base_station = (3, 3)`, the result should be `True`. Given `satellites = [(0, 0, 1), (2, 2, 1)]` and `base_station = (5, 5)`, the result should be `False`. # Input/Output - `[input]` list of tuples `satellites` Each tuple contains three integers `(x, y, r)`, representing: - `x`: the x-coordinate of the satellite position. - `y`: the y-coordinate of the satellite position. - `r`: the radius of the satellite\'s coverage area. `-100 <= x, y <= 100` and `1 <= r <= 100`. - `[input]` tuple `base_station` A tuple containing two integers representing the x and y coordinates of the base station. `-100 <= x, y <= 100`. - `[output]` a boolean value `True` if the base station is within the coverage of at least one satellite. `False` otherwise.","solution":"def is_base_station_covered(satellites, base_station): Determines whether any satellite\'s coverage includes the base station. Parameters: satellites (list of tuples): Each tuple contains (x, y, r) representing the coordinates and radius of the satellite. base_station (tuple): A tuple containing (x, y) coordinates of the base station. Returns: bool: True if the base station is covered by at least one satellite, False otherwise. base_x, base_y = base_station for x, y, r in satellites: distance_squared = (x - base_x) ** 2 + (y - base_y) ** 2 if distance_squared <= r ** 2: return True return False"},{"question":"Write a function `find_substring_indices(s, substring)` that takes two arguments: a string `s` and a string `substring`. The function should return a list of all starting indices where `substring` appears in `s`. If `substring` does not appear in `s`, the function should return an empty list. For example, calling `find_substring_indices(\\"abracadabra\\", \\"abra\\")` should return `[0, 7]`, while calling `find_substring_indices(\\"hello world\\", \\"world\\")` should return `[6]`. Calling `find_substring_indices(\\"hello\\", \\"bye\\")` should return `[]`. _hint: consider using the `str.find()` method within a loop to locate all the indices._","solution":"def find_substring_indices(s, substring): Returns a list of starting indices where substring appears in s. If substring does not appear in s, returns an empty list. if not substring: # Handle the case where substring is empty return [] indices = [] index = s.find(substring) while index != -1: indices.append(index) index = s.find(substring, index + 1) return indices"},{"question":"Create a function that takes a string as input and returns the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. The function should efficiently find the length of the longest substring that consists of unique characters. # Examples - With input \\"abrkaabcdefghijjxxx\\", the result should be 10 (since the longest substring without repeating characters is \\"abcdefghij\\"). - With input \\"abcabcbb\\", the result should be 3 (since the longest substring without repeating characters is \\"abc\\"). - With input \\"bbbbb\\", the result should be 1 (since the longest substring without repeating characters is \\"b\\").","solution":"def longest_unique_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) longest = 0 char_index_map = {} start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"#Task: Create a function `product_sign` that determines the sign of the product of three given integers, a, b, and c. The function should return `\'positive\'` if the product of the three numbers is positive, `\'negative\'` if the product is negative, and `\'zero\'` if any of the numbers is zero. Examples: ```python >>> product_sign(1, 2, 3) \'positive\' >>> product_sign(-1, 2, 3) \'negative\' >>> product_sign(2, 0, -3) \'zero\' >>> product_sign(-1, -2, -3) \'negative\' ``` Notes: * The function should work efficiently for any valid integers. * You are not allowed to use any built-in sign functions (`math.copysign`, `numpy.sign`, etc.). * Consider edge cases where one or more numbers might be negative or zero. Hints: * Think about the properties of multiplication and the impact of negative numbers. * You may want to count the number of negative numbers in the input, as this will help determine the overall sign of the product.","solution":"def product_sign(a, b, c): if a == 0 or b == 0 or c == 0: return \'zero\' negative_count = sum(x < 0 for x in [a, b, c]) if negative_count % 2 == 0: return \'positive\' else: return \'negative\'"},{"question":"Anna is organizing a science fair at her school, and she needs to create schedules for the various presentations. Each presentation has a specific start time and end time, and no two presentations can overlap. Anna wants to maximize the number of presentations that can be scheduled. Given a list of presentations, each with a start and end time, write a function that determines the maximum number of non-overlapping presentations that can be scheduled. Input - A list of tuples, where each tuple consists of two integers `(start_time, end_time)`. - The `start_time` and `end_time` satisfy `0 <= start_time < end_time <= 10^9`. - The length of the list is between `1` and `100`. Output - An integer representing the maximum number of non-overlapping presentations that can be scheduled. Examples ```python max_presentations([(1, 3), (2, 5), (4, 8), (6, 7)]) # => 2 (e.g., presentations (1, 3) and (6, 7)) max_presentations([(0, 1), (3, 5), (4, 6), (7, 8), (9, 11)]) # => 4 (e.g., presentations (0, 1), (3, 5), (7, 8), and (9, 11)) ``` Function Signature ```python def max_presentations(presentations): pass ```","solution":"def max_presentations(presentations): Determines the maximum number of non-overlapping presentations that can be scheduled. Args: presentations (list of tuple): A list where each tuple contains the start and end time of a presentation. Returns: int: The maximum number of non-overlapping presentations. # Sort presentations by their end times presentations.sort(key=lambda x: x[1]) max_count = 0 last_end_time = 0 for start_time, end_time in presentations: if start_time >= last_end_time: last_end_time = end_time max_count += 1 return max_count"},{"question":"Write a function `smallest_sum_pair(nums)` that takes a list of integers and returns a tuple containing the two integers from the list whose sum is the smallest among all possible pairs. Ensure the function returns the pair with the smallest integers first in case of ties. # Function Signature ```python def smallest_sum_pair(nums: List[int]) -> Tuple[int, int]: ``` # Example ```python assert smallest_sum_pair([4, 2, 6, 3, 8]) == (2, 3) assert smallest_sum_pair([0, -1, 5, -3]) == (-3, -1) ``` # Constraints - The input list will contain at least two elements. - The elements in the list are integers, both positive and negative. - If multiple pairs have the same sum, return the pair with the smallest individual integers first.","solution":"from typing import List, Tuple def smallest_sum_pair(nums: List[int]) -> Tuple[int, int]: Finds the pair of integers in the given list whose sum is the smallest. Args: nums: A list of integers containing at least two elements. Returns: A tuple containing the two integers whose sum is the smallest. min_sum = float(\'inf\') pair = () nums.sort() # Sort the list to ensure the smallest pair comes first in case of ties for i in range(len(nums) - 1): current_sum = nums[i] + nums[i + 1] if current_sum < min_sum: min_sum = current_sum pair = (nums[i], nums[i + 1]) return pair"},{"question":"In a racing tournament, racers compete to complete a series of laps around a track. Each racer\'s lap times are recorded in milliseconds. Given the lap times of all racers, your task is to determine the racer with the shortest average lap time. If multiple racers have the same average lap time, return the racer with the smallest ID. -----Input:----- - First line contains an integer N, the number of racers. - Following N lines, each containing first an integer ID (unique identifier of the racer) followed by an integer M (number of laps completed) and M integers representing the lap times in milliseconds. -----Output:----- Print the ID of the racer with the shortest average lap time. -----Constraints----- - N can take value from 1 to 1000 - ID can take value upto 10000 - M can take value from 1 to 50 - Each lap time can take value upto 10^6 milliseconds -----Sample Input:----- 3 1 3 1000 1500 1200 2 3 900 1500 1300 3 4 1100 1400 1000 1200 -----Sample Output:----- 3 -----EXPLANATION:----- The average lap times for the racers are: - Racer 1: (1000 + 1500 + 1200) / 3 = 1233.33 milliseconds - Racer 2: (900 + 1500 + 1300) / 3 = 1233.33 milliseconds - Racer 3: (1100 + 1400 + 1000 + 1200) / 4 = 1175 milliseconds Racer 3 has the shortest average lap time.","solution":"def racer_with_shortest_average_lap_time(N, racers_data): Given the number of racers (N) and their corresponding lap times, returns the racer ID with the shortest average lap time. If multiple racers have the same average lap time, returns the racer with the smallest ID. Parameters: N (int): Number of racers racers_data (list): List of tuples. Each tuple contains the racer ID (int), number of laps (int) and the lap times (list of ints) Returns: int: Racer ID with the shortest average lap time min_avg_time = float(\'inf\') racer_id_with_min_avg_time = float(\'inf\') for data in racers_data: racer_id = data[0] lap_times = data[2:] average_time = sum(lap_times) / len(lap_times) if average_time < min_avg_time or (average_time == min_avg_time and racer_id < racer_id_with_min_avg_time): min_avg_time = average_time racer_id_with_min_avg_time = racer_id return racer_id_with_min_avg_time"},{"question":"Write a function `next_greater_element(arr)` that takes a list of integers `arr` and returns a list such that each element in the output list is the next greater element of the corresponding input element. The next greater element of an element x in the list is the first greater element to its right. If there is no greater element to the right, return -1 for that position. The function should aim to achieve efficient performance. Examples: ``` next_greater_element([4, 5, 2, 25]) --> [5, 25, 25, -1] next_greater_element([13, 7, 6, 12]) --> [ -1, 12, 12, -1] next_greater_element([11, 13, 21, 3]) --> [13, 21, -1, -1] ``` ```python def next_greater_element(arr): # Return your implementation here pass ```","solution":"def next_greater_element(arr): Function to find the next greater element for each element in the array. If there is no greater element to the right, return -1 for that position. Parameters: arr (list): List of integers Returns: list: List of integers where each element is the next greater element of the corresponding input element or -1 if there is no greater element. n = len(arr) res = [-1] * n # Initialize result array with -1 stack = [] for i in range(n): # While stack is not empty and the current element is greater than # element represented by index stored on top of stack, then this # element is next greater element for the element represented by index on top of stack while stack and arr[i] > arr[stack[-1]]: index = stack.pop() res[index] = arr[i] stack.append(i) return res"},{"question":"You are given an array of N integers. You need to perform Q queries on the array. In each query, - You are given two integers L and R. You need to determine how many distinct prime numbers are there in the subarray from index L to R inclusive. Input: - The first line contains two integers N and Q, the number of elements in the array and the number of queries respectively. - The second line contains N space-separated integers, representing the elements of the array. - The next Q lines each contain two integers L and R, representing a query. Output: - For each query, output the number of distinct prime numbers in the specified subarray. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ Ai ≤ 10^6 - 1 ≤ L ≤ R ≤ N Sample Input: 6 3 2 3 4 5 6 7 1 4 2 6 1 6 Sample Output: 3 3 4","solution":"def generate_primes_up_to(n): Sieve of Eratosthenes to generate all primes up to n. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return {num for num in range(2, n + 1) if is_prime[num]} def count_distinct_primes(array, queries): max_value = max(array) primes = generate_primes_up_to(max_value) def is_prime(x): return x in primes results = [] for L, R in queries: subarray = array[L-1:R] distinct_primes = {num for num in subarray if is_prime(num)} results.append(len(distinct_primes)) return results # Function to read input and call the primary function def main(n, q, array, queries): return count_distinct_primes(array, queries)"},{"question":"Write a function that takes an integer `n` and returns a list of all prime numbers less than `n`. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Your function should be efficient and able to handle large values of `n`. Example: primesLessThan(20) should return `[2, 3, 5, 7, 11, 13, 17, 19]` Note: The algorithm should not use brute force approach and should be optimized for performance. Describe the efficiency of your approach in terms of time complexity.","solution":"def primesLessThan(n): Returns a list of all prime numbers less than n. Uses the Sieve of Eratosthenes algorithm for efficient computation. if n <= 2: return [] # Initialize the sieve sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers # Implement the sieve algorithm for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False # Collect all prime numbers primes = [num for num in range(n) if sieve[num]] return primes"},{"question":"# Factorial Sum *Find the sum of the digits of the factorial of a given number.* ___ # Task **_Given_** *a number N* , **_calculate the sum of the digits of N!_**. ___ # Notes * **_Only positive_** numbers *will be passed (N > 0)* . * **_Factorial (N!)_** is the product of all positive integers less than or equal to N. ___ # Input >> Output Examples: ``` 1- sumFactorialDigits(5) ==> return (3) ``` **_Explanation_**: **_Since_** *the passed number is (5)* , **_factorial of 5_** *should be calculated as* ```5! = 5 * 4 * 3 * 2 * 1 = 120 .``` **_Then_** *the sum of the digits of 120 should be* ```1 + 2 + 0 = 3``` . ___ ``` 2- sumFactorialDigits(10) ==> return (27) ``` **_Explanation_**: **_Since_** *the passed number is (10)* , **_factorial of 10_** *should be calculated as* ```10! = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 3628800 .``` **_Then_** *the sum of the digits of 3628800 should be* ```3 + 6 + 2 + 8 + 8 + 0 + 0 = 27``` . ___ ``` 3- sumFactorialDigits(15) ==> return (45) ``` **_Explanation_**: **_Since_** *the passed number is (15)* , **_factorial of 15_** *should be calculated as* ```15! = 1307674368000 .``` **_Then_** *the sum of the digits of 1307674368000 should be* ```1 + 3 + 0 + 7 + 6 + 7 + 4 + 3 + 6 + 8 + 0 + 0 + 0 = 45``` . ___ ALL translations are welcomed Enjoy Learning !!","solution":"def sumFactorialDigits(n): Given a number n, calculates the sum of the digits of n!. from math import factorial # Calculate the factorial of n fact = factorial(n) # Convert the factorial result into a string and sum its digits sum_of_digits = sum(int(digit) for digit in str(fact)) return sum_of_digits"},{"question":"Your task is to find the maximum possible value of a pair (nums[i] and nums[j]) in an array `nums`, where `nums[i] ≠ nums[j]` (1-based index). In other words, you need to find the pair of elements in the array where the product of the two elements is the maximum possible, and the indices of these elements should not be the same. Example 1: Input: nums = [3,4,5,2] Output: 20 Explanation: The maximum product is 5 * 4 = 20. Example 2: Input: nums = [1,5,4,5] Output: 25 Explanation: The maximum product is 5 * 5 = 25. Example 3: Input: nums = [3,7] Output: 21 Explanation: The maximum product is 3 * 7 = 21. Constraints: - 2 <= nums.length <= 10^5 - 1 <= nums[i] <= 10^4","solution":"def maxProduct(nums): Finds the maximum product of any two distinct elements in the list. # Sort the list to find the two largest elements nums_sorted = sorted(nums, reverse=True) # Return the product of the two largest elements in the sorted list return nums_sorted[0] * nums_sorted[1]"},{"question":"You are given an array of integers. A subarray of this array is a contiguous block of elements. We define the beauty of a subarray to be the absolute difference between the maximum and minimum element in the subarray. Your task is to find the maximum beauty of any subarray of the given array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of elements in the array. - The second line contains N space-separated integers denoting the elements of the array. -----Output----- For each test case, print a single line containing the maximum beauty of any subarray of the array. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - the sum of N over all test cases does not exceed 10^6 - for each valid i, 1 ≤ Ai ≤ 10^9 -----Example Input----- 2 5 1 3 2 5 4 4 8 2 7 3 -----Example Output----- 4 6","solution":"def max_beauty_of_subarray(test_cases): results = [] for arr in test_cases: max_elem = max(arr) min_elem = min(arr) beauty = max_elem - min_elem results.append(beauty) return results def parse_input(input_data): data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 arr = list(map(int, data[index: index + N])) index += N test_cases.append(arr) return test_cases"},{"question":"Task Write a function that accepts a positive integer and returns a string with the number rephrased in a specific pattern. The pattern consists of the digits being rounded successively to the nearest 10 and reduced by a fraction each time. If a digit crosses below zero, it wraps around to 9. # Example Given the input number `145`, the pattern of rephrasing will be: 1. Start with the number `145`. 2. Round each digit to the nearest 10: - `1` rounds to `0` - `4` rounds to `0` - `5` rounds to `10` (which becomes `0` since it\'s a single digit) Thus, the number becomes `000`. 3. Reduce each digit by 1/2 of its value: - `0` - `0` - `0` Thus, the number remains `000`. 4. Repeat step 2 and onward until the resulting number no longer changes. # Input - An integer `n` where `0 < n <= 10^9`. # Output - A string representing the final transformed number as described above. # Examples 1. `123` -> `000` 2. `987` -> `000` 3. `555` -> `555` (remains the same in this case) # Notes - For simplicity, you can assume the input number does not have leading zeros. - Implement the function in any programming language of your choice.","solution":"def rephrase_number(n): def round_digit(digit): # Round digit to the nearest 10 if digit < 5: return 0 else: return 0 def reduce_digit(digit): reduced = digit - digit // 2 if reduced < 0: return 9 + reduced + 1 return reduced digits = [int(x) for x in str(n)] while True: rounded_digits = [round_digit(digit) for digit in digits] reduced_digits = [reduce_digit(digit) for digit in rounded_digits] if rounded_digits == digits: break digits = rounded_digits return \'\'.join(map(str, digits))"},{"question":"Write a function that determines whether a string `s` can be formed by concatenating one string `sub` multiple times. The input will be a non-empty string `s` and a potential substring `sub`. The function should return `true` if `s` can be constructed by repeating `sub`, otherwise, it should return `false`. ```JS Examples: 1) s = \\"ababab\\", sub = \\"ab\\" => true because \\"ababab\\" is \\"ab\\" repeated 3 times 2) s = \\"aaaa\\", sub = \\"a\\" => true because \\"aaaa\\" is \\"a\\" repeated 4 times 3) s = \\"abcdef\\", sub = \\"abc\\" => false because \\"abcdef\\" is not \\"abc\\" repeated any number of times 4) s = \\"xyzxyzxyz\\", sub = \\"xyz\\" => true because \\"xyzxyzxyz\\" is \\"xyz\\" repeated 3 times ```","solution":"def is_repeated_substring(s, sub): Determines whether the string `s` can be formed by concatenating `sub` multiple times. :param s: The main string to be checked :param sub: The potential substring :return: True if `s` can be formed by repeating `sub`, False otherwise if len(s) % len(sub) != 0: return False concatenated_sub = sub * (len(s) // len(sub)) return concatenated_sub == s"},{"question":"# Task You are given a rectangular grid of `m x n` cells, where each cell contains a lowercase letter. Your task is to determine if there exists a path from the top-left cell to the bottom-right cell such that the path spells out an entire word from a given list of words. You can move to the adjacent cells (up, down, left, or right) and you cannot visit the same cell twice on the same path. # Input/Output - `[input]` list of str `grid` and list of str `words` A grid of lowercase letters where each element of the grid is a string of length `n` and the grid contains `m` such strings (0 < m, n ≤ 50). `words` is a list of strings of lowercase letters. - `[output]` boolean Return `True` if such a path exists for any word, otherwise return `False`. # Example For `grid = [\\"abce\\", \\"sfcs\\", \\"adee\\"]` and `words = [\\"abc\\", \\"abfb\\", \\"see\\"]`, the output should be `True`. - The path for the word `\\"abc\\"` is `[(0, 0), (0, 1), (0, 2)]`. - The word `\\"abfb\\"` cannot be formed since you would need to revisit cell `(0, 1)`. - The path for the word `\\"see\\"` is `[(2, 2), (2, 3), (1, 3)]`. For `grid = [\\"abc\\", \\"def\\", \\"ghi\\"]` and `words = [\\"xyz\\", \\"kpi\\", \\"ghi\\"]`, the output should be `True`. - The path for the word `\\"ghi\\"` is `[(2, 0), (2, 1), (2, 2)]`. For `grid = [\\"abc\\", \\"def\\", \\"ghi\\"]` and `words = [\\"xyz\\", \\"kpi\\"]`, the output should be `False`. - None of the words `[\\"xyz\\", \\"kpi\\"]` can be formed from any path in the grid.","solution":"def exist_path_in_grid(grid, words): Determine if there exists a path in the grid that spells out any of the given words. def is_valid(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) def dfs(x, y, word, index, visited): if index == len(word): return True if not is_valid(x, y) or word[index] != grid[x][y] or visited[x][y]: return False visited[x][y] = True if (dfs(x+1, y, word, index+1, visited) or dfs(x-1, y, word, index+1, visited) or dfs(x, y+1, word, index+1, visited) or dfs(x, y-1, word, index+1, visited)): return True visited[x][y] = False return False for word in words: for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == word[0]: visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))] if dfs(i, j, word, 0, visited): return True return False"},{"question":"You are working on a tool that formats and validates email addresses. You want to create a class that will help you manage email objects. Write a Python class called `Email` that represents an email address and provides several methods to interact with it. # Specifications: 1. **Constructor**: The constructor should initialize the following attributes: - `local_part`: the portion of the email address before the `@` symbol. - `domain`: the portion of the email address after the `@` symbol. - `full_email`: the full email address. ```python e = Email(\'john.doe\', \'example.com\') print(e.full_email) # Output: \'john.doe@example.com\' ``` 2. **Validation**: The class should provide a method called `is_valid` to check if the email address is valid based on the following simple rules: - The local part of the email must not be empty. - The domain must contain at least one `.` character. ```python e = Email(\'john.doe\', \'example.com\') print(e.is_valid()) # Output: True e2 = Email(\'john.doe\', \'examplecom\') print(e2.is_valid()) # Output: False ``` 3. **Format to Lower Case**: The class should provide a method called `to_lower` that converts the entire email address to lower case. ```python e = Email(\'John.Doe\', \'Example.COM\') e.to_lower() print(e.full_email) # Output: \'john.doe@example.com\' ``` 4. **Change Domain**: The class should provide a method called `change_domain` that takes a new domain as an argument and updates the email address. ```python e = Email(\'john.doe\', \'example.com\') e.change_domain(\'newdomain.org\') print(e.full_email) # Output: \'john.doe@newdomain.org\' ``` 5. **String Representation**: Implement the `__str__` method to return the full email address. ```python e = Email(\'john.doe\', \'example.com\') print(str(e)) # Output: \'john.doe@example.com\' ``` # Constraints: - You do not need to handle very detailed validations like ensuring proper character sets within the local part or domain. Focus on the simple rules provided. - Assume the email addresses given to the constructor are in a reasonably valid format apart from the simple checks specified.","solution":"class Email: def __init__(self, local_part, domain): self.local_part = local_part self.domain = domain self.full_email = f\\"{local_part}@{domain}\\" def is_valid(self): Validate the email address based on the simple rules: - local part must not be empty. - domain must contain at least one dot character. if not self.local_part: return False if \'.\' not in self.domain: return False return True def to_lower(self): Convert the entire email address to lower case. self.local_part = self.local_part.lower() self.domain = self.domain.lower() self.full_email = f\\"{self.local_part}@{self.domain}\\" def change_domain(self, new_domain): Change the domain of the email address. self.domain = new_domain self.full_email = f\\"{self.local_part}@{new_domain}\\" def __str__(self): Return the full email address as a string. return self.full_email"},{"question":"Given a string consisting of lowercase alphabets and spaces, you are to count the frequency of each unique word in the string. -----Input----- s – the input string which can have up to 10^5 characters. Each word in the string is separated by one or more spaces. The words consists of lowercase alphabets only. -----Output----- Output each unique word along with its frequency in the string, sorted in alphabetical order of words. -----Example----- Input: this is a test this is only a test Output: a 2 is 2 only 1 test 2 this 2","solution":"def word_frequency(s): Returns a dictionary with each unique word and its frequency from the input string s. The words are sorted in alphabetical order in the final dictionary. words = s.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 sorted_frequency = dict(sorted(frequency.items())) return sorted_frequency"},{"question":"You are given an array of positive integers. You have to determine if there is a way to partition this array into two subsets such that the sums of the elements in both subsets are equal. For example, for the array [1, 5, 11, 5], the answer is \\"YES\\" because we can divide the array into [1, 5, 5] and [11], both having sums equal to 11. For the array [1, 3, 5], the answer is \\"NO\\" because there is no way to partition it into two subsets with equal sums. -----Input----- The first line contains an integer n (1 le n le 100), the number of elements in the array. The second line contains n positive integers a_1, a_2, ldots, a_n (1 le a_i le 1000), the elements of the array. -----Output----- Output \\"YES\\" if it is possible to partition the array into two subsets with equal sums. Otherwise, output \\"NO\\". -----Examples----- Input 4 1 5 11 5 Output YES Input 3 1 3 5 Output NO","solution":"def can_partition(nums): Given a list of positive integers, determines if the list can be partitioned into two subsets with equal sums. total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\" # Example usage print(can_partition([1, 5, 11, 5])) # Output: \\"YES\\" print(can_partition([1, 3, 5])) # Output: \\"NO\\""},{"question":"Given a list of integers, write a function find_pair_with_sum(lst, target_sum) that returns True if there are two distinct elements in the list that add up to target_sum, and False otherwise. For example: - find_pair_with_sum([2, 4, 3, 5], 7) should return True because 4 + 3 = 7. - find_pair_with_sum([1, 2, 3, 4], 8) should return False because no pair adds up to 8. You can assume that the input list contains only integers and has at least two elements.","solution":"def find_pair_with_sum(lst, target_sum): Returns True if there are two distinct elements in lst that add up to target_sum, False otherwise seen_numbers = set() for number in lst: required_number = target_sum - number if required_number in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"A mysterious island is inhabited by elves, who love to play games to test their mathematical prowess. One such game is called \\"Elf\'s Number Spiral\\". The game involves constructing a square spiral of size n × n filled with integers starting from 1 and spiraling outwards in a clockwise direction. The size n is always an odd number. Here is an example of a 5x5 spiral: ``` 17 16 15 14 13 18 5 4 3 12 19 6 1 2 11 20 7 8 9 10 21 22 23 24 25 ``` Given such a spiral matrix of size n, you need to answer t queries where each query asks for the integer at the (i, j)-th position of the spiral. Write a function to answer these queries. -----Input----- The first line contains two integers n and t (1le nle 99, 1le tle 1000), representing the size of the spiral (which is always an odd number) and the number of queries, respectively. Each of the following t lines contains two integers i and j (1le i,jle n), representing row and column indices of the cell in the spiral. -----Output----- Print t lines, where each line contains the integer found at the (i, j)-th position in the spiral matrix. -----Examples----- Input 5 3 1 1 2 3 5 4 Output 17 4 24 Input 3 4 1 3 2 2 3 1 3 3 Output 3 1 7 9 Input 1 1 1 1 Output 1","solution":"def generate_spiral_matrix(n): spiral = [[0] * n for _ in range(n)] x, y = n // 2, n // 2 # starting at the center of the matrix spiral[x][y] = 1 number = 2 for layer in range(1, (n // 2) + 1): y += 1 # move right to the first new cell in this layer spiral[x][y] = number number += 1 # Move up - top edge of current layer for _ in range(2 * layer - 1): x -= 1 spiral[x][y] = number number += 1 # Move left - top-left to bottom-left for _ in range(2 * layer): y -= 1 spiral[x][y] = number number += 1 # Move down - bottom-left to bottom-right for _ in range(2 * layer): x += 1 spiral[x][y] = number number += 1 # Move right - bottom-right to top-right for _ in range(2 * layer): y += 1 spiral[x][y] = number number += 1 return spiral def elf_number_spiral(n, queries): spiral = generate_spiral_matrix(n) results = [] for i, j in queries: results.append(spiral[i-1][j-1]) return results"},{"question":"Task Given two strings, `A` and `B`, determine whether it is possible to transform `A` into `B` using a series of operations. You can perform the following operations any number of times (including zero times): 1. Remove a character from the beginning or end of `A`. 2. Insert any character at the beginning or end of `A`. Return `True` if it is possible to transform `A` into `B`, and `False` otherwise. **Examples** ``` A = \\"abc\\", B = \\"cab\\" True A = \\"abc\\", B = \\"abcd\\" True A = \\"abc\\", B = \\"abd\\" False A = \\"\\", B = \\"a\\" True ``` **Constraints** - `1 <= len(A), len(B) <= 1000`","solution":"def can_transform(A, B): Determines if it is possible to transform string A into string B using the given operations: removing a character from the beginning or end of A, or inserting any character at the beginning or end of A. Args: A (str): The original string. B (str): The target string. Returns: bool: True if A can be transformed into B, False otherwise. from collections import Counter # The condition to transform A into B is that they should have the same # character frequencies. return Counter(A) == Counter(B)"},{"question":"You have been given an array of integers followed by Q queries. Each query consists of an integer X, and you need to check if there exists any pair of elements in the array whose sum is exactly X. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". -----Input:----- - First line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the array. - Second line contains N space-separated integers A_i (1 ≤ A_i ≤ 10^9), the elements of the array. - Third line contains an integer Q (1 ≤ Q ≤ 10^5), the number of queries. - Next Q lines contain a single integer X (1 ≤ X ≤ 2*10^9), the sum to be checked. -----Output:----- For each query, output \\"YES\\" if there exists any pair of elements whose sum equals to X, otherwise print \\"NO\\". -----Sample Input:----- 5 1 5 3 7 9 3 8 12 20 -----Sample Output:----- YES YES NO","solution":"def check_pairs_with_sum(arr, queries): For each query, check if there exists a pair of elements in the array whose sum equals the query value. Parameters: arr (list): The array of integers. queries (list): The list of query integers. Returns: list: List of strings \\"YES\\" or \\"NO\\" corresponding to each query. result = [] arr_set = set(arr) for X in queries: found = False for num in arr: complement = X - num if complement in arr_set and complement != num: found = True break result.append(\\"YES\\" if found else \\"NO\\") return result"},{"question":"# The Problem You are tasked with implementing a library checkout system where users can borrow books for a limited period and return them on time. Each book can only be borrowed by one user at a time. Write a function `canBorrowBook` that takes three arguments: * a `libraryRecords` array of objects, where each object represents a currently borrowed book with the properties \\"bookId\\" (a unique identifier for the book), \\"dueDate\\" (a string representing the due date in \\"yyyy-mm-dd\\" format), and \\"borrowerId\\" (an ID of the person who has borrowed the book). * a `bookId` string representing the unique ID of the book the user wants to borrow. * a `currentDate` string representing the current date in \\"yyyy-mm-dd\\" format. The function should return `true` if the book is available for borrowing on the `currentDate` (i.e., it is not currently borrowed), or return the `dueDate` as a string if the book is currently borrowed. # Examples `canBorrowBook([{bookId: \\"1\\", dueDate: \\"2023-10-15\\", borrowerId: \\"1001\\"}, {bookId: \\"2\\", dueDate: \\"2023-10-20\\", borrowerId: \\"1002\\"}], \\"1\\", \\"2023-10-10\\");` should return `\\"2023-10-15\\"` `canBorrowBook([{bookId: \\"1\\", dueDate: \\"2023-10-15\\", borrowerId: \\"1001\\"}, {bookId: \\"2\\", dueDate: \\"2023-10-20\\", borrowerId: \\"1002\\"}], \\"3\\", \\"2023-10-10\\");` should return `true` `canBorrowBook([], \\"1\\", \\"2023-10-10\\");` should return `true` *You can expect the input to contain valid and relevant data for the problem.","solution":"def canBorrowBook(libraryRecords, bookId, currentDate): Check if a book is available for borrowing on the current date. :param libraryRecords: List of dictionaries, where each dictionary represents a borrowed book. :param bookId: String, the unique ID of the book the user wants to borrow. :param currentDate: String, the current date in \\"yyyy-mm-dd\\" format. :return: True if the book is available, else the due date as a string. for record in libraryRecords: if record[\'bookId\'] == bookId: return record[\'dueDate\'] return True"},{"question":"You are given a string consisting of lowercase English letters and an integer `k`. Your task is to create a function that performs the following operations: 1. Split the given string into substrings of length `k`. 2. Reverse the characters in each substring. 3. Concatenate all the reversed substrings to form the final modified string. If the length of the string is not a multiple of `k`, the last substring will contain the remaining characters. Function signature: ```python def reverse_substrings(s: str, k: int) -> str: ``` # Example: ```python # Input s = \\"abcdefghi\\" k = 3 # Output \\"cbafedihg\\" ``` Explanation: The string \\"abcdefghi\\" is split into the substrings [\\"abc\\", \\"def\\", \\"ghi\\"]. Reversing each substring gives [\\"cba\\", \\"fed\\", \\"ihg\\"]. Concatenating these gives \\"cbafedihg\\".","solution":"def reverse_substrings(s: str, k: int) -> str: This function splits the input string `s` into substrings of length `k`, reverses each substring, and then concatenates them to form the final modified string. # Splitting the string into chunks of k characters substrings = [s[i:i+k] for i in range(0, len(s), k)] # Reversing each substring reversed_substrings = [substring[::-1] for substring in substrings] # Concatenating the reversed substrings return \'\'.join(reversed_substrings)"},{"question":"We need you to create a scheduling application that can process multiple tasks and allocate time slots accordingly. Each task has a start time, an end time, and a description. The input is a list of tasks provided as strings in the following format: ``` \\"TaskDescription,StartTime,EndTime\\" ``` - TaskDescription: A brief title of the task, consisting of alphabetic characters only. - StartTime, EndTime: The start and end times of the task in a 24-hour format without delimiters (e.g., 0900 for 9:00 AM, 1530 for 3:30 PM) Your task is to identify and return any conflict among the tasks based on their scheduling times. Specifically, a conflict arises if the time intervals of two tasks overlap. The output should be a list of tuples, each containing the descriptions of two conflicting tasks. If no conflicts are found, return an empty list. # Example Input: ```python tasks = [ \\"Meeting,0900,1100\\", \\"Workshop,1030,1230\\", \\"Launch,1300,1400\\", \\"Review,1200,1300\\" ] ``` Output: ```python [(\\"Meeting\\", \\"Workshop\\"), (\\"Launch\\", \\"Review\\")] ``` Explanation: - \\"Meeting\\" (09:00-11:00) and \\"Workshop\\" (10:30-12:30) overlap, so they form a conflict. - \\"Launch\\" (13:00-14:00) and \\"Review\\" (12:00-13:00) do not overlap, so no conflict there. - In this scenario, there are other non-overlapping tasks. # Function Signature ```python def find_task_conflicts(tasks: List[str]) -> List[Tuple[str, str]]: pass ``` Implement the function `find_task_conflicts` to process the given list of tasks and return a list of conflicting task pairs based on their scheduled times.","solution":"from typing import List, Tuple def find_task_conflicts(tasks: List[str]) -> List[Tuple[str, str]]: conflicts = [] # Parse tasks into a more usable structure parsed_tasks = [] for task in tasks: description, start_time, end_time = task.split(\',\') parsed_tasks.append((description, int(start_time), int(end_time))) # Check for conflicts between tasks for i in range(len(parsed_tasks)): for j in range(i + 1, len(parsed_tasks)): desc1, start1, end1 = parsed_tasks[i] desc2, start2, end2 = parsed_tasks[j] # Check if tasks overlap if (start1 < end2 and start2 < end1): conflicts.append((desc1, desc2)) return conflicts"},{"question":"You are given a string of letters. Your task is to determine the longest substring consisting of unique characters. For instance: ```Haskell solve(\\"abcabcbb\\") = 3, the longest substring is \\"abc\\". solve(\\"bbbbb\\") = 1, the longest substring is \\"b\\". solve(\\"pwwkew\\") = 3, the longest substring is \\"wke\\". solve(\\"\\") = 0, the longest substring is \\"\\". solve(\\"dvdf\\") = 3, the longest substring is \\"vdf\\". ``` Constraints: - The input string will have a length between 0 and 10**4.","solution":"def solve(s: str) -> int: Finds the length of the longest substring without repeating characters. char_map = {} left = 0 max_len = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_len = max(max_len, right - left + 1) return max_len"},{"question":"# Subarray with Maximum Sum Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. If the length of the input array is `0`, the return value must be `0`. # Example: ``` [1] -> 1 [-2,1,-3,4,-1,2,1,-5,4] -> 6 (subarray [4,-1,2,1] has the largest sum) [5,4,-1,7,8] -> 23 (subarray [5,4,-1,7,8] has the largest sum) [] -> 0 ``` # Note: You may assume the input is a list of integers and can be of both positive and negative values including zero. Implement the function in any programming language of your choice.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray with the largest sum in the given list of integers. If the list is empty, returns 0. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Your Task You are given a non-negative integer array that represents the heights of buildings, where the width of each building is `1`. The array represents a skyline silhouette. You need to design a function to compute the maximum rectangle area in the skyline. For example, if you have the following histogram: ``` [2, 1, 5, 6, 2, 3] ``` The largest rectangular area is `10` (buildings with height `5` and `6` from the third and fourth positions). Develop a function that computes and returns this maximum rectangular area. # Function Signature ```python def max_rect_area(heights: List[int]) -> int: ``` # Input - `heights`: a list of integers representing the height of each building. # Output - Returns an integer which is the maximum rectangular area that can be formed in the skyline histogram. # Examples ```python max_rect_area([2, 1, 5, 6, 2, 3]) == 10 max_rect_area([1, 2, 3, 4, 5]) == 9 max_rect_area([5, 4, 3, 2, 1]) == 9 max_rect_area([2, 4]) == 4 ``` # Explanation - In the first example, `[2, 1, 5, 6, 2, 3]`, the largest rectangle has an area of `10`, which is obtained from heights `5` and `6`. - In the second example, `[1, 2, 3, 4, 5]`, the largest rectangle area is `9` from heights `3`, `4`, and `5`. - In the third example, `[5, 4, 3, 2, 1]`, the largest rectangle area is `9` from heights `5`, `4`, and `3`. - In the fourth example, `[2, 4]`, the largest rectangle area is `4` from height `4`.","solution":"from typing import List def max_rect_area(heights: List[int]) -> int: Computes the maximum rectangular area in the histogram represented by heights. n = len(heights) if n == 0: return 0 # Create an empty stack. The stack holds indexes of heights array. stack = [] max_area = 0 # Traverse all buildings in heights index = 0 while index < n: # If stack is empty or the current height is greater than or equal to the height of the building index at the top of the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest or minimum height area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with every popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"*** Generate Ranges *** Write a function `find_ranges` that receives a sorted list of integers. Your task is to identify and return a string representation of the ranges formed by consecutive numbers in the list. Each range is represented by the starting and ending numbers, separated by a hyphen. If the range contains only one number, it is represented by that single number without a hyphen. For example, given the list: `[1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 15]`, the function should return `\\"1-3,6-8,10,12-15\\"`. **Constraints:** - The input list will contain only integers. - The integers in the list are sorted in ascending order. - The input list can be empty. # Examples: ```python find_ranges([1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 15]) # Output: \\"1-3,6-8,10,12-15\\" find_ranges([4, 5, 7, 8, 10]) # Output: \\"4-5,7-8,10\\" find_ranges([1, 3, 5, 7, 9]) # Output: \\"1,3,5,7,9\\" find_ranges([]) # Output: \\"\\" ```","solution":"def find_ranges(nums): if not nums: return \\"\\" ranges = [] start = nums[0] end = nums[0] for num in nums[1:]: if num == end + 1: end = num else: if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") start = num end = num if start == end: ranges.append(f\\"{start}\\") else: ranges.append(f\\"{start}-{end}\\") return \\",\\".join(ranges)"},{"question":"-----Problem----- Kyla has been hooked on painting labyrinths! Every labyrinth is represented as a matrix of characters, where each character is either \'.\' (a path), \'#\' (a wall), \'S\' (the starting point), or \'E\' (the exit). Kyla is now interested in determining whether it is possible to find a path from the starting point \'S\' to the exit \'E\' by moving only up, down, left, or right and passing only through the paths (\'.\'). Can you help Kyla solve this conundrum and determine if such a path exists? -----Input----- - The first line of the input contains two integers N and M, representing the number of rows and columns of the labyrinth matrix, respectively. - The next N lines each contain a string of M characters, representing the labyrinth. -----Output----- - Output \\"YES\\" if there is a path from \'S\' to \'E\'. Output \\"NO\\" otherwise. -----Constraints----- - 2 ≤ N, M ≤ 500 - There is exactly one \'S\' and one \'E\' in the matrix. - There are no other characters in the matrix besides \'.\', \'#\', \'S\', and \'E\'. -----Sample Input----- 5 5 # #S..# #.# #..E# # -----Sample Output----- YES -----Explanation----- A possible path from \'S\' to \'E\' is moving right three times and then down once. -----Sample Input----- 5 5 # #S# #.# #..E# # -----Sample Output----- NO -----Explanation----- There is no way to reach the exit \'E\' from the starting point \'S\' due to walls blocking every possible path.","solution":"def is_path_exist(matrix, N, M): from collections import deque def bfs(start): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set() visited.add(start) while queue: r, c = queue.popleft() if matrix[r][c] == \'E\': return True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and matrix[nr][nc] != \'#\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc)) return False # Find the starting point \'S\' start = None for i in range(N): for j in range(M): if matrix[i][j] == \'S\': start = (i, j) break if start: break return \\"YES\\" if bfs(start) else \\"NO\\""},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to write a function that finds all unique triplets in the list which gives the sum of the target. Each triplet in the result must be an ordered tuple (a, b, c) such that `a <= b <= c` and the triplets themselves must be ordered in ascending order. The solution set must not contain duplicate triplets. Function Signature: ```python def find_triplets(nums: List[int], target: int) -> List[Tuple[int, int, int]]: pass ``` Example: ```python find_triplets([1, 0, -1, 2, -1, -4], 0) # Returns: [(-1, -1, 2), (-1, 0, 1)] find_triplets([], 0) # Returns: [] find_triplets([1, 2, 3, 4, 5], 9) # Returns: [(1, 3, 5), (2, 3, 4)] ``` Note: - The solution should have a time complexity better than O(n^3). - You can assume that the input list has at most 2000 elements. - You cannot use the same element twice.","solution":"from typing import List, Tuple def find_triplets(nums: List[int], target: int) -> List[Tuple[int, int, int]]: nums.sort() triplets = [] n = len(nums) for i in range(n-2): # Skip the same elements to avoid duplicate triplets. if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, n - 1 while left < right: temp_sum = nums[i] + nums[left] + nums[right] if temp_sum == target: triplets.append((nums[i], nums[left], nums[right])) left += 1 right -= 1 # Skip the same elements to avoid duplicate triplets. while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif temp_sum < target: left += 1 else: right -= 1 return triplets"},{"question":"In a fictional city, there are several houses arranged in a line, and each house has a certain amount of gold. A thief wants to rob houses, but cannot rob two adjacent houses, as it would alert the police. You need to help the thief determine the maximum amount of gold he can rob without alerting the police. -----Input----- The first line contains an integer N representing the number of houses. The second line contains N space-separated integers G1, G2, ..., GN where Gi represents the amount of gold in the i-th house. -----Output----- Output a single integer, the maximum amount of gold the thief can rob without robbing two adjacent houses. -----Constraints----- - 1 ≤ N ≤ 105 - 0 ≤ Gi ≤ 109 -----Example----- Input: 4 1 2 3 1 Output: 4 -----Explanation----- Example case 1: The thief can rob the first and the third houses (gold = 1 + 3 = 4), or the second and the fourth houses (gold = 2 + 1 = 3). The maximum gold is 4.","solution":"def max_gold(houses): Returns the maximum amount of gold the thief can rob without alerting the police. :param houses: List[int] - List of integers where each integer represents the amount of gold in a house. :return: int - Maximum amount of gold that can be robbed. if not houses: return 0 if len(houses) == 1: return houses[0] prev1 = 0 prev2 = 0 for gold in houses: current = max(prev2 + gold, prev1) prev2 = prev1 prev1 = current return prev1"},{"question":"Given a 2D matrix of size m x n, your task is to find the maximum sum of any rectangle within the matrix. A rectangle in the matrix is defined by selecting two rows and two columns, and includes all the elements between and including the intersections of these rows and columns. Example 1: Input: [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] Output: 29 Explanation: The maximum sum rectangle is: [ [3, 8, 10], [-4, -1, 1] ] Example 2: Input: [ [2, 1, -3, -4, 5], [0, 6, 3, 4, 1], [2, -2, -1, 4, -5], [-3, 3, 1, 0, 3] ] Output: 18 Explanation: The maximum sum rectangle is: [ [0, 6, 3, 4, 1], [2, -2, -1, 4, -5], [-3, 3, 1, 0, 3] ] Note: The dimensions of the matrix m and n will not exceed 100.","solution":"def maximum_sum_rectangle(matrix): Returns the maximum sum of any rectangle within the given 2D matrix. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += matrix[i][right] current_sum = kadane(temp) max_sum = max(max_sum, current_sum) return max_sum def kadane(arr): Helper function to find the maximum sum of any contiguous subarray using Kadane\'s algorithm. max_so_far = arr[0] max_ending_here = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a function that takes a list of integers and checks if there exists a pair of numbers in the list whose product is equal to a given target value. The function should return `True` if such a pair exists, and `False` if it does not. ```text For example: Input: nums = [10, 2, 4, 5, 7], target = 20 Output: True Explanation: The pair (10, 2) has a product of 20. Input: nums = [3, 1, 7, 11], target = 10 Output: False Explanation: There is no pair of numbers that multiply to 10. ```","solution":"def has_pair_with_product(nums, target): Returns True if there exists a pair of numbers in the list \'nums\' whose product is equal to \'target\'. Otherwise, returns False. if target == 0: return 0 in nums and nums.count(0) > 1 num_set = set() for num in nums: if num != 0 and target % num == 0: complement = target // num if complement in num_set: return True num_set.add(num) return False"},{"question":"*HQ9+ Interpreter* # Objective Your task is to implement an interpreter for the esoteric programming language *HQ9+*. *HQ9+* is a minimalist programming language with only four commands: - `H` - prints \\"Hello, World!\\" - `Q` - prints the source code of the program itself - `9` - prints the lyrics of \\"99 Bottles of Beer\\" song - `+` - increments an internal accumulator (which is initially set to zero and is not used for anything else) # Input The input will be a single string representing an *HQ9+* program. You can assume that the input will always be a valid *HQ9+* program and only consist of the characters `H`, `Q`, `9`, and `+`. # Output The expected output for each command is mentioned above. # Examples ```python # Example 1: Interpreter for `HQ9+` language program = \\"HQ9\\" # This should produce the following output: # \\"Hello, World!\\" # \\"HQ9\\" # Prints the \\"99 Bottles of Beer\\" song lyrics # Example 2: Interpreter for `HQ9+` language program = \\"H+Q+\\" # This should produce the following output: # \\"Hello, World!\\" # (Internal accumulator incremented) # \\"H+Q+\\" # (Internal accumulator incremented) ```","solution":"def hq9plus_interpreter(program): Interpret and execute the given HQ9+ program. Args: program (str): The HQ9+ program as a string. Returns: List of strings representing the output of the program. def bottles_of_beer(): lyrics = \\"\\" for i in range(99, 0, -1): lyrics += f\\"{i} bottles of beer on the wall, {i} bottles of beer.n\\" if i == 1: lyrics += \\"Take one down and pass it around, no more bottles of beer on the wall.n\\" else: lyrics += f\\"Take one down and pass it around, {i-1} bottles of beer on the wall.n\\" lyrics += \\"No more bottles of beer on the wall, no more bottles of beer.n\\" lyrics += \\"Go to the store and buy some more, 99 bottles of beer on the wall.n\\" return lyrics output = [] accumulator = 0 for command in program: if command == \'H\': output.append(\\"Hello, World!\\") elif command == \'Q\': output.append(program) elif command == \'9\': output.append(bottles_of_beer()) elif command == \'+\': accumulator += 1 return output"},{"question":"You are given an array of N integers and a set of Q queries. In each query, you are given two integers L and R, and you need to find the length of the longest subarray within the range [L, R] that contains unique elements. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and Q. - The second line contains N space-separated integers representing the array. - Each of the next Q lines contains two space-separated integers L and R describing a query. -----Output----- For each query, print a single line containing one integer ― the length of the longest subarray within range [L, R] that contains unique elements. -----Constraints----- - 1≤T≤100 - 1≤N≤100,000 - 1≤Q≤100,000 - 1≤L≤R≤N - the sum of N over all test cases does not exceed 1,000,000 - the sum of Q over all test cases does not exceed 1,000,000 - 1≤ array elements ≤ 10^9 -----Example Input----- 1 5 3 1 2 1 3 4 1 3 2 5 1 5 -----Example Output----- 2 4 4","solution":"def longest_unique_subarray(arr, queries): results = [] for L, R in queries: L -= 1 # Convert to zero-indexed R -= 1 # Convert to zero-indexed max_len = 0 current_set = set() left_pointer = L for right_pointer in range(L, R + 1): while arr[right_pointer] in current_set: current_set.remove(arr[left_pointer]) left_pointer += 1 current_set.add(arr[right_pointer]) max_len = max(max_len, right_pointer - left_pointer + 1) results.append(max_len) return results def process_test_cases(T, cases): all_results = [] for i in range(T): N, Q = cases[i][\'N\'], cases[i][\'Q\'] array = cases[i][\'array\'] queries = cases[i][\'queries\'] results = longest_unique_subarray(array, queries) all_results.append(results) return all_results"},{"question":"In a forest, there are several trees positioned in a 2D plane. Each tree is represented by its coordinates (x, y) on the plane. You need to cut down some trees such that the remaining trees form the vertices of the convex hull enclosing the maximum possible area in the forest. The convex hull of a set of points is the smallest convex polygon that can enclose all the points. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of trees. - N lines follow. Each of these lines contains two space-separated integers x and y denoting the coordinates of a tree. -----Output----- For each test case, print a single integer representing the maximum possible number of trees that form the convex hull. -----Constraints----- - 1 le T le 100 - 3 le N le 1000 - -10^4 le x, y le 10^4 -----Example Input----- 2 5 0 0 10 0 10 10 0 10 5 5 4 1 2 2 3 3 4 4 5 -----Example Output----- 4 4 -----Explanation----- Example case 1: The trees are positioned to form a square with one tree inside it at (5, 5). The maximum possible number of trees that form the convex hull is 4 (forming the square boundary). Example case 2: All the trees are aligned in a straight line. The convex hull can include all 4 trees since they form a segment of a line which is their own convex hull.","solution":"from typing import List, Tuple # Utility function to compute cross product of two vectors OA and OB # A positive cross product indicates a counter-clockwise direction, whereas # a negative cross product indicates a clockwise direction. def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) def convex_hull(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Returns the points that form the convex hull using Andrew\'s monotone chain algorithm. The returned list is in counter-clockwise order starting with the leftmost point. points = sorted(set(points)) # Build the convex hull using the monotone chain algorithm if len(points) <= 1: return points # Lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Remove the last point because it is repeated at the beginning of the other half return lower[:-1] + upper[:-1] def trees_in_convex_hull(tree_count: int, tree_positions: List[Tuple[int, int]]) -> int: hull = convex_hull(tree_positions) return len(hull) def solve(test_cases: List[Tuple[int, List[Tuple[int,int]]]]) -> List[int]: results = [] for tree_count, tree_positions in test_cases: results.append(trees_in_convex_hull(tree_count, tree_positions)) return results # Example usage if __name__ == \\"__main__\\": T = int(input()) test_cases = [] for _ in range(T): N = int(input()) trees = [] for _ in range(N): x, y = map(int, input().split()) trees.append((x, y)) test_cases.append((N, trees)) results = solve(test_cases) for result in results: print(result)"},{"question":"Write a function that receives an integer array and returns the sum of the longest contiguous subarray with the maximum sum. A contiguous subarray is a subarray of consecutive elements from the original array. For example: ``` Given the array [−2,1,−3,4,−1,2,1,−5,4], the longest contiguous subarray with the maximum sum is [4,−1,2,1], with the maximum sum being 6. So, the function should return 6. Given the array [1,2,3,4,−10], the longest contiguous subarray with the maximum sum is [1,2,3,4], with the maximum sum being 10. So, the function should return 10. Given the array [−1,−2,−3,−4], the longest contiguous subarray with the maximum sum is [-1], with the maximum sum being -1. So, the function should return -1. ``` Examples: ``` [-2,1,-3,4,-1,2,1,-5,4] => 6 [1,2,3,4,-10] => 10 [-1,-2,-3,-4] => -1 [2,3,-2,-3,4,5] => 11 [0,0,0,0] => 0 ``` Make sure your function works efficiently on large arrays.","solution":"def max_subarray_sum(arr): Returns the sum of the longest contiguous subarray with the maximum sum. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of integers. You need to process a series of queries, each containing a single integer, and determine the number of occurrences of this integer in the list. -----Input----- - The first line of the input contains a single integer N denoting the number of elements in the list. - The second line contains N space-separated integers a_1, a_2, ..., a_N representing the list of integers. - The third line contains a single integer Q denoting the number of queries. - The next Q lines each contain one integer x representing a query. -----Output----- For each query, print a single line containing one integer – the number of times the queried integer x appears in the list. -----Constraints----- - 1 le N le 10^5 - 1 le a_i le 10^9 - 1 le Q le 10^5 - 1 le x le 10^9 -----Subtasks----- Subtask #1 (20 points): N, Q le 1000 Subtask #2 (80 points): original constraints -----Example Input----- 5 1 2 2 3 4 3 2 3 5 -----Example Output----- 2 1 0 -----Explanation----- Example case 1: - Querying for 2 returns 2 since 2 appears twice in the list. - Querying for 3 returns 1 since 3 appears once in the list. - Querying for 5 returns 0 since 5 does not appear in the list.","solution":"def count_occurrences(N, arr, Q, queries): Given a list of integers and a series of queries, returns the number of occurrences of each queried integer in the list. Parameters: N (int): The number of elements in the list. arr (list of int): The list of integers. Q (int): The number of queries. queries (list of int): The list of queried integers. Returns: list of int: The results of each query, i.e., number of occurrences. from collections import Counter counts = Counter(arr) results = [] for query in queries: results.append(counts.get(query, 0)) return results"},{"question":"Robot Movement Simulator You are tasked with writing a function `simulate_robot_movements` to simulate the movements of a robot on a 2D grid. The robot starts at the origin point (0, 0) facing north. The function will take a string of commands and return the robot\'s final position and direction. The commands are: - \'G\' - move forward one unit in the direction the robot is currently facing. - \'L\' - turn left 90 degrees. - \'R\' - turn right 90 degrees. The directions are: - North (initially facing) - East - South - West # Example Input: `\\"GLGR\\"` Output: `(-1, 1, \'North\')` # Detailed Explanation - Initial position: (0, 0), direction: North - \'G\': Move forward to (0, 1) - \'L\': Turn left to face West - \'G\': Move forward to (-1, 1) - \'R\': Turn right to face North - Final position: (-1, 1), direction: North Write a function `simulate_robot_movements(commands)` that takes a string of commands and returns a tuple representing the robot\'s final (x, y) position and its direction.","solution":"def simulate_robot_movements(commands): Simulates the movements of a robot on a 2D grid and returns its final position and direction. Parameters: - commands (str): A string of commands consisting of \'G\', \'L\', and \'R\' Returns: - tuple: A tuple (x, y, direction) representing the final position (x, y) and direction of the robot. # Initial position and direction x, y = 0, 0 direction_index = 0 # 0: North, 1: East, 2: South, 3: West directions = [\\"North\\", \\"East\\", \\"South\\", \\"West\\"] movements = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Corresponding to N, E, S, W for command in commands: if command == \'G\': x += movements[direction_index][0] y += movements[direction_index][1] elif command == \'L\': direction_index = (direction_index - 1) % 4 elif command == \'R\': direction_index = (direction_index + 1) % 4 return (x, y, directions[direction_index])"},{"question":"Implement a function that accepts a list of integers and returns a list of tuples containing pairs of indices where the sum of the corresponding values at those indices is zero. The solution should be efficient, with a time complexity of at most O(n log n). -----Input----- The function receives a single parameter: - `numbers`: a list of integers (1 leq text{length of numbers} leq 100,000). The integers are not necessarily unique and can be positive, negative, or zero. -----Output----- The function should return a list of tuples. Each tuple should contain two integers, representing the indices of the elements in the input list that sum to zero. Indices should be zero-based and each pair should appear at most once, with the smaller index appearing first in the tuple. Pairs should be sorted in ascending order of the first index. -----Examples----- ```python numbers = [1, -1, 2, -2, 3, -3] result = [(0, 1), (2, 3), (4, 5)] ``` ```python numbers = [3, 1, -4, -1, -3, 2] result = [(0, 4), (1, 3)] ``` ```python numbers = [1, 2, 3, 4, 5] result = [] ``` -----Note----- In the first example, the pairs of indices (0, 1), (2, 3), and (4, 5) correspond to the values whose sums are 0: 1 + (-1), 2 + (-2), and 3 + (-3). Other pairs are not considered since they do not sum to zero. In the second example, the pairs of indices (0, 4) and (1, 3) have their values summing to zero: 3 + (-3) and 1 + (-1). In the third example, there are no pairs of indices summing to zero, thus the result is an empty list.","solution":"def zero_sum_pairs(numbers): This function returns a list of tuples containing pairs of indices where the sum of the corresponding values at those indices is zero. num_to_indices = {} pairs = [] for index, num in enumerate(numbers): if -num in num_to_indices: for partner_index in num_to_indices[-num]: pairs.append((partner_index, index)) if num in num_to_indices: num_to_indices[num].append(index) else: num_to_indices[num] = [index] pairs.sort() return pairs"},{"question":"=====Problem Statement===== The re.findall() tool finds all occurrences of matches in a given text and returns a list of strings representing the matches. Learn more about re.findall(). Finding Digits and Words Code import re # Extracting all digits from a string text = \\"The room numbers are 123, 456, and 789.\\" digits = re.findall(r\'d+\', text) print(digits) Output [\'123\', \'456\', \'789\'] Extracting words from a string Code import re text = \\"The quick brown fox jumps over the lazy dog.\\" words = re.findall(r\'bw+b\', text) print(words) Output [\'The\', \'quick\', \'brown\', \'fox\', \'jumps\', \'over\', \'the\', \'lazy\', \'dog\'] =====Problem Statement===== You are given a string containing both alphabets and numbers. Your task is to sort the alphabets in the string in alphabetical order while preserving the positions of the numbers. =====Input Format===== A single string S containing alphanumeric characters. =====Constraints===== 1 <= len(S) <= 1000 =====Output Format===== Output a string where the alphabets are sorted, and the numbers remain in their original positions. =====Sample Input===== a1c3b2 =====Sample Output===== a1b3c2 =====Explanation===== In the given input, after sorting the alphabets \'a\', \'b\', and \'c\', while keeping the numbers \'1\', \'3\', and \'2\' at their original positions, the output should be \'a1b3c2\'.","solution":"import re def sort_alphabets_preserve_numbers(s): Returns a string where the alphabets are sorted alphabetically, and the numbers remain in their original positions. # Extract all alphabets and sort them alphabets = sorted(re.findall(r\'[a-zA-Z]\', s)) # Create a list of the same length as input string result = list(s) # Iterate through result and replace alphabets with sorted ones alpha_index = 0 for i in range(len(result)): if result[i].isalpha(): result[i] = alphabets[alpha_index] alpha_index += 1 return \'\'.join(result)"},{"question":"Write a function that takes a list of strings as an input and returns a list of those strings ordered by their length in ascending order. If two strings have the same length, maintain their original relative order as in the input list. You can expect all test case inputs to be lists of non-empty strings. Example: ``` [\\"apple\\", \\"pie\\", \\"bananas\\", \\"hi\\"] -> [\\"hi\\", \\"pie\\", \\"apple\\", \\"bananas\\"] [\\"hello\\", \\"world\\", \\"!\\", \\"python\\", \\"fun\\"] -> [\\"!\\", \\"fun\\", \\"hello\\", \\"world\\", \\"python\\"] [\\"a\\", \\"bbb\\", \\"cc\\", \\"dddd\\"] -> [\\"a\\", \\"cc\\", \\"bbb\\", \\"dddd\\"] ```","solution":"def sort_by_length(strings): Returns a list of strings ordered by their length in ascending order. If two strings have the same length, their original relative order is maintained. return sorted(strings, key=len)"},{"question":"You are given an array of integers A with N elements. You can perform the following operation zero or more times on the array: - Choose an element A_i (1 ≤ i ≤ N) and replace it with lceil A_i / 2 rceil. Calculate and print the minimum sum of the array you can get after performing any number of such operations. -----Input----- - The first line contains an integer T (number of test cases). - The first line of each test case contains a single integer N. - The second line contains N integers representing the elements of the array A. -----Output----- For each test case, print the minimum sum of the array you can get. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le A_i le 10^9 for each valid i -----Example Input----- 2 3 10 20 30 4 1 2 2 1 -----Example Output----- 3 4 -----Explanation----- Example case 1: If we repeatedly perform the operation on all elements, we can reduce each number to 1. The sum of the array then becomes 1 + 1 + 1 = 3. Example case 2: All elements are already at their minimum value of 1. Thus, the sum of the array is 1 + 1 + 1 + 1 = 4.","solution":"import math def minimum_sum_of_array(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] # Since we can keep on replacing each element with ceil(Ai / 2) until Ai becomes 1. min_sum = N # Because each element can be reduced to 1 results.append(min_sum) return results"},{"question":"Task: You need to write a function `findLongestUniqueSubstring` that takes a string as input and returns the longest substring without repeating characters. Note: * The input string will contain only ASCII characters. * If there are multiple substrings of the same length, return the one which appears first. Examples: ``` findLongestUniqueSubstring(\'abcabcbb\'); => \'abc\' findLongestUniqueSubstring(\'bbbbb\'); => \'b\' findLongestUniqueSubstring(\'pwwkew\'); => \'wke\' ```","solution":"def findLongestUniqueSubstring(s): Returns the longest substring without repeating characters. If there are multiple substrings of the same length, returns the one which appears first. start = 0 max_length = 0 max_substring = \'\' char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: # Move the start position right past the last occurrence of the current character to keep substring unique start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:end + 1] return max_substring"},{"question":"Write a function that takes a non-negative integer `n` and returns a list of prime numbers less than `n`. If `n` is less than or equal to 2, the function should return an empty list. For example: - Input: `10` - Output: `[2, 3, 5, 7]` - Input: `1` - Output: `[]` Note: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def primes_less_than(n): Returns a list of prime numbers less than n. if n <= 2: return [] primes = [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, n): if sieve[start]: primes.append(start) for i in range(start * start, n, start): sieve[i] = False return primes"},{"question":"Ana loves exploring graphs and recently discovered a fascinating concept called DFS (Depth-First Search) traversals. She wants to experiment with different types of DFS traversals on an undirected graph and analyze the results. Each node in the graph has an integer value associated with it. The graph supports two types of queries: \\"1 x y\\" — check if there is a path between node x and node y; \\"2 x y val\\" — increase the value of every node on the path from node x to node y (if it exists) by val. Your task is to help Ana by answering these queries. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100000), denoting the number of nodes and edges in the graph, respectively. The second line contains n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 1000), representing the initial values of the nodes. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating that there is an edge between nodes u and v. The next line contains an integer q (1 ≤ q ≤ 100000), the number of queries. Each of the next q lines contains a query in one of the described formats. -----Output----- For each query of type \\"1 x y\\", print \\"YES\\" if there is a path between those nodes, otherwise print \\"NO\\". For each query of type \\"2 x y val\\", apply the operations as described without printing any output. -----Examples----- Input 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 3 1 1 5 2 1 4 2 1 1 5 Output YES YES -----Note----- Initially, the values of the nodes are [1, 2, 3, 4, 5]. First query checks if there is a path between node 1 and node 5. The result is \\"YES\\" because the path exists: 1-2-3-4-5. Second query adds value 2 to each node on the path from node 1 to node 4. The new values of the nodes are [3, 4, 5, 6, 5]. Third query again checks if there is a path between node 1 and node 5, which is still \\"YES\\". You can learn more about DFS here: https://en.wikipedia.org/wiki/Depth-first_search","solution":"class Graph: def __init__(self, n, node_values): self.nodes = n self.adj_list = [[] for _ in range(n)] self.values = node_values def add_edge(self, u, v): self.adj_list[u].append(v) self.adj_list[v].append(u) def dfs(self, start, visited): stack = [start] path = [] while stack: node = stack.pop() if not visited[node]: visited[node] = True path.append(node) for neighbor in self.adj_list[node]: if not visited[neighbor]: stack.append(neighbor) return path def query_one(self, x, y): visited = [False] * self.nodes path = self.dfs(x, visited) return y in path def query_two(self, x, y, val): visited = [False] * self.nodes path = self.dfs(x, visited) if y in path: path_to_y = path[:path.index(y) + 1] for node in path_to_y: self.values[node] += val def graph_from_input(n, m, node_values, edges): graph = Graph(n, node_values) for u, v in edges: graph.add_edge(u - 1, v - 1) # converting to 0-based index return graph def process_queries(graph, queries): results = [] for query in queries: query = query.split() if query[0] == \\"1\\": x, y = int(query[1]) - 1, int(query[2]) - 1 # converting to 0-based index if graph.query_one(x, y): results.append(\\"YES\\") else: results.append(\\"NO\\") elif query[0] == \\"2\\": x, y, val = int(query[1]) - 1, int(query[2]) - 1, int(query[3]) # converting to 0-based index graph.query_two(x, y, val) return results"},{"question":"You are given an array of integers where each element represents the price of a house on a particular day. Calvin wants to buy one house and then sell it on any future date to maximize his profit. Write a function that returns the maximum profit he can achieve from this transaction. If no profit can be achieved, return 0. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of days. - The second line contains N integers, each representing the price of the house on that day. -----Output----- - For each test case, print the maximum profit Calvin can achieve. If no profit is possible, print 0. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 105 - 0 ≤ House Prices ≤ 105 - The sum of N over all test cases will not exceed 2 * 105 -----Example----- Input: 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Output: 5 0 -----Explanation----- In the first test case, Calvin can: - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. In the second test case, no transaction is done and the profit is 0.","solution":"def max_profit(prices): if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price profit = price - min_price if profit > max_profit: max_profit = profit return max_profit def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] prices = test_cases[i][1] result = max_profit(prices) results.append(result) return results"},{"question":"Write a function that simulates the management of a simple task queue for a single-threaded processor. The processor executes tasks in the order they arrive. Each task has a specific duration it needs to run for, represented in milliseconds. The task execution must be simulated to produce the total run time of the processor from start until all tasks are completed. The tasks will be inputted as a list of tuples where the first element in the tuple is the task name (a string), and the second element is the task duration (an integer in milliseconds). You need to write a function `task_scheduler` that takes this list of tasks and returns the total run time of the processor. The processor can only run one task at a time and will process tasks strictly in the order they appear in the list. Example: Given the following list of tasks: tasks = [(\'Task1\', 150), (\'Task2\', 200), (\'Task3\', 50)] The total run time will be: 150 + 200 + 50 = 400 milliseconds Another example: tasks = [(\'Alpha\', 60), (\'Bravo\', 90), (\'Charlie\', 120), (\'Delta\', 30)] The total run time will be: 60 + 90 + 120 + 30 = 300 milliseconds Function signature: ```python def task_scheduler(tasks: List[Tuple[str, int]]) -> int: pass ``` **Constraints:** - The number of tasks (n) will be in the range [1, 10^4]. - The duration for each task (d) will be in the range [1, 10^6] milliseconds. **Input** - A list of tuples where each tuple consists of a task name (string) and task duration (integer). **Output** - An integer representing the total run time of the processor. ```python # Example usage: tasks = [(\'Task1\', 150), (\'Task2\', 200), (\'Task3\', 50)] print(task_scheduler(tasks)) # Should print 400 tasks2 = [(\'Alpha\', 60), (\'Bravo\', 90), (\'Charlie\', 120), (\'Delta\', 30)] print(task_scheduler(tasks2)) # Should print 300 ```","solution":"from typing import List, Tuple def task_scheduler(tasks: List[Tuple[str, int]]) -> int: This function accepts a list of tasks where each task is a tuple containing the task name and its duration in milliseconds. It returns the total runtime of the processor to complete all tasks. total_run_time = 0 for task in tasks: _, duration = task total_run_time += duration return total_run_time # Example usage: tasks = [(\'Task1\', 150), (\'Task2\', 200), (\'Task3\', 50)] print(task_scheduler(tasks)) # Should print 400 tasks2 = [(\'Alpha\', 60), (\'Bravo\', 90), (\'Charlie\', 120), (\'Delta\', 30)] print(task_scheduler(tasks2)) # Should print 300"},{"question":"You are given a rectangular grid of size MxN and a robot that can only move either down or right at any point in time. The robot is initially located at the top-left corner of the grid (1,1) and its goal is to reach the bottom-right corner of the grid (M,N). However, there are some obstacles on the grid that the robot cannot pass through. The obstacles are denoted by \'1\' and the empty spaces are denoted by \'0\'. Write a function to find out the number of unique paths that the robot can take to reach the bottom-right corner of the grid. The function should return the total number of unique paths modulo 10^9 + 7. If no such path exists, the function should return 0. -----Input----- - An integer T, the number of test cases. - For each test case: - Two integers M and N, the dimensions of the grid. - M lines each containing N integers (either 0 or 1). -----Output----- - For each test case, output a single integer denoting the number of unique paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M, N ≤ 100 - (1,1) and (M,N) will always be empty (i.e., grid[1][1] = 0, grid[M][N] = 0) -----Example----- Input: 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 Output: 2 1","solution":"def number_of_unique_paths(grid): Finds the number of unique paths from the top-left to the bottom-right corner of the grid. The robot can move either down or right at any point in time. M = len(grid) N = len(grid[0]) MODULO = 10**9 + 7 if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0]*N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: continue if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MODULO if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MODULO return dp[M-1][N-1] def unique_paths_robot(T, test_cases): results = [] for m, n, grid in test_cases: results.append(number_of_unique_paths(grid)) return results"},{"question":"Given an integer array nums and an integer k, return the k-th largest element in the array using the Quickselect algorithm. Note: You may assume k is always valid, 1 ≤ k ≤ nums.length. Example: Input: nums: [3, 2, 1, 5, 6, 4] k: 2 Output: 5 Explanation: The sorted array is [1, 2, 3, 4, 5, 6], so the second largest number is 5.","solution":"def quickselect(nums, k): Returns the k-th largest element in the array using the Quickselect algorithm. def partition(left, right, pivot_index): pivot_value = nums[pivot_index] # Move pivot to end nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left # Move all larger elements to the left for i in range(left, right): if nums[i] > nums[right]: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 # Move pivot to its final place nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def select(left, right, k): Returns the k-th largest element in the nums within left..right. if left == right: return nums[left] pivot_index = (left + right) // 2 pivot_index = partition(left, right, pivot_index) if k == pivot_index: return nums[k] elif k < pivot_index: return select(left, pivot_index - 1, k) else: return select(pivot_index + 1, right, k) return select(0, len(nums) - 1, k - 1)"},{"question":"In this problem, we are interested in generating a specific kind of nested list structure based on the input integer. Given an integer `n`, create a function `generate_nested_list()` that constructs a nested list. The structure follows these rules: 1. Start with an empty list. 2. For each integer from 1 to `n` inclusive, add a new list `[i]` as the innermost element of the existing list. For example: ``` generate_nested_list(3) Output: [[1,[2,[3,[]]]]] ``` Explanation: - For `n = 1`, the list would be `[[1]]` - For `n = 2`, the list would be `[[1, [2, []]]]` - For `n = 3`, the list would be `[[1, [2, [3, []]]]]]` Your task is to implement the function `generate_nested_list(n)` that returns this structure as described. Here are a few additional examples for better understanding: ```python print(generate_nested_list(1)) # Output: [[1]] print(generate_nested_list(2)) # Output: [[1, [2, []]]] print(generate_nested_list(3)) # Output: [[1, [2, [3, []]]]] print(generate_nested_list(4)) # Output: [[1, [2, [3, [4, []]]]] ``` You can assume the input `n` will always be a positive integer.","solution":"def generate_nested_list(n): Generates a nested list structure based on the input integer n. Args: n : int : positive integer Returns: list : nested list structure nested_list = [] current = nested_list for i in range(1, n + 1): current.append(i) new_list = [] current.append(new_list) current = new_list return nested_list"},{"question":"You are the head developer for a software company, and you are tasked with logging activity on your new software feature. The activity log consists of recorded events where users interacted with the feature. Each recorded event contains a unique user ID and timestamp (the time when the user interacted with the feature). Your task is to determine the maximum number of unique users who interacted with the feature in any given window of k consecutive events. Write a function `max_unique_users` that takes two arguments: - `events`: a list of tuples, where each tuple contains two elements: a string representing the user ID and an integer representing the timestamp. - `k`: an integer that indicates the length of the window in number of events. Return the maximum number of unique users in any window of k consecutive events. If there are fewer than k events in total, return the number of unique users that appear across all events. -----Input----- The `events` list contains n tuples, where 1 ≤ n ≤ 10^5. Each tuple contains a string of user ID and an integer timestamp. The value of `k` is an integer, 1 ≤ k ≤ 10^5. It is guaranteed that all timestamps in the events list are distinct. -----Output----- Return an integer representing the maximum number of unique users in any window of k consecutive events. -----Examples----- Input events = [(\\"user1\\", 1), (\\"user2\\", 2), (\\"user1\\", 3), (\\"user3\\", 4), (\\"user4\\", 5)] k = 3 Output 3 Input events = [(\\"user5\\", 1), (\\"user6\\", 2), (\\"user7\\", 3), (\\"user8\\", 4), (\\"user9\\", 5), (\\"user10\\", 6)] k = 2 Output 2 -----Explanation----- In the first example, the maximum number of unique users in any window of 3 consecutive events are 3, appearing in the window: [(\\"user2\\", 2), (\\"user1\\", 3), (\\"user3\\", 4)]. In the second example, the maximum number of unique users in any window of 2 consecutive events are 2, which is achieved by all windows generated from the event list.","solution":"def max_unique_users(events, k): Returns the maximum number of unique users in any window of k consecutive events. :param events: List of tuples, where each tuple contains two elements: a user ID (string) and a timestamp (integer). :param k: Integer indicating the length of the window in the number of events. :return: Maximum number of unique users in any window of k consecutive events. if k > len(events): return len(set(user for user, _ in events)) user_count = {} unique_users = 0 max_unique = 0 for i in range(len(events)): user_id, _ = events[i] if user_id in user_count: user_count[user_id] += 1 else: user_count[user_id] = 1 unique_users += 1 if i >= k: old_user_id, _ = events[i - k] user_count[old_user_id] -= 1 if user_count[old_user_id] == 0: del user_count[old_user_id] unique_users -= 1 if i >= k - 1: max_unique = max(max_unique, unique_users) return max_unique"},{"question":"You are given an array representing the heights of buildings and the maximum number of bricks and ladders you can use to move from one building to another. You start at the first building and can move one building to the right until you reach the last building or cannot move further. Every time you move from building `i` to building `i + 1`, if the height of the next building is greater than the current one, you need to compensate for the difference in height by using bricks or ladders. Each ladder can be used to avoid using bricks for one move. Your goal is to determine the furthest building you can reach. Implement a function `furthestBuilding` that takes in: - an array of integers `heights` where `heights[i]` is the height of the building at position `i` - an integer `bricks` representing the total number of bricks available - an integer `ladders` representing the total number of ladders available The function should return the index of the furthest building you can reach using the given set of bricks and ladders. # Constraints - `1 <= heights.length <= 10^5` - `1 <= heights[i] <= 10^6` - `0 <= bricks <= 10^9` - `0 <= ladders <= heights.length` # Example - **Input**: `heights = [4, 2, 7, 6, 9, 14, 12]`, `bricks = 5`, `ladders = 1` - **Output**: `4` - **Explanation**: Starting from building 0 (height 4): - Jump to building 1 (height 2), no bricks or ladders needed. - Jump to building 2 (height 7), use 5 bricks (difference 7 - 2 = 5). - Jump to building 3 (height 6), no bricks or ladders needed. - Jump to building 4 (height 9), use 1 ladder. - Cannot move to building 5 (height 14) because no bricks or ladders left (difference 14 - 9 = 5). - **Input**: `heights = [4,12,2,7,3,18,20,3,19]`, `bricks = 10`, `ladders = 2` - **Output**: `7` - **Explanation**: Starting from building 0 (height 4): - Jump to building 1 (height 12), use 8 bricks (difference 12 - 4 = 8). - Jump to building 2 (height 2), no bricks or ladders needed. - Jump to building 3 (height 7), use 5 bricks (difference 7 - 2 = 5). - Jump to building 4 (height 3), no bricks or ladders needed. - Jump to building 5 (height 18), use 1 ladder. - Jump to building 6 (height 20), use 1 ladder. - Jump to building 7 (height 3), no bricks or ladders needed. - Cannot move to building 8 (height 19) because no bricks or ladders left (difference 19 - 3 = 16). # Note: Consider strategies involving a priority queue or greedy algorithms to optimize the use of bricks and ladders effectively.","solution":"import heapq def furthestBuilding(heights, bricks, ladders): Determine the furthest building you can reach using the given bricks and ladders. min_heap = [] for i in range(len(heights) - 1): # Calculate the difference in height diff = heights[i + 1] - heights[i] if diff > 0: heapq.heappush(min_heap, diff) if len(min_heap) > ladders: bricks -= heapq.heappop(min_heap) if bricks < 0: return i return len(heights) - 1"},{"question":"Farmer Ben runs a small organic farm where he grows a variety of vegetables. Recently, he started an online subscription service for weekly vegetable boxes. Each week, he must pack a certain number of boxes with the vegetables he harvests. Ben wants to make sure that each vegetable type is evenly distributed among the boxes, but it\'s been challenging to manage so far. - Farmer Ben packs 5 types of vegetables: carrots, tomatoes, cucumbers, potatoes, and bell peppers. - Each week, he harvests various numbers of each vegetable type, and every type must be evenly distributed across all the boxes. - If there are any leftover vegetables that can\'t be evenly distributed, they are stored for the following week. The input for the function `distributeVegetables` will be provided as: 1. An array of five integers representing the number of each type of vegetable harvested that week. 2. An integer representing the number of boxes that need to be packed. The aim is to calculate how many of each type of vegetable will be packed in each box and how many of each type will be leftover after packing. The function should return a dictionary with the following structure: ```python { \'carrots\': {\'per_box\': x, \'leftover\': y}, \'tomatoes\': {\'per_box\': x, \'leftover\': y}, \'cucumbers\': {\'per_box\': x, \'leftover\': y}, \'potatoes\': {\'per_box\': x, \'leftover\': y}, \'bell_peppers\': {\'per_box\': x, \'leftover\': y} } ``` Where `x` is the number of vegetables per box and `y` is the leftover vegetables for that type.","solution":"def distributeVegetables(harvested, num_boxes): Distributes harvested vegetables into boxes evenly. Parameters: harvested (list): List of integers representing the number of each type of vegetable harvested. num_boxes (int): The number of boxes to pack. Returns: dict: A dictionary with distribution details. vegetable_types = [\\"carrots\\", \\"tomatoes\\", \\"cucumbers\\", \\"potatoes\\", \\"bell_peppers\\"] distribution = {} for i, vegetable in enumerate(vegetable_types): per_box = harvested[i] // num_boxes leftover = harvested[i] % num_boxes distribution[vegetable] = {\'per_box\': per_box, \'leftover\': leftover} return distribution"},{"question":"Given a matrix, check if it is a Toeplitz matrix. _____________________________________ A Toeplitz matrix is a matrix where each descending diagonal from left to right is constant. For example, the following matrix is a Toeplitz matrix: ``` [[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1]] ``` In this matrix, each descending diagonal from left to right is composed of the same elements. Input: A 2D list of integers representing the matrix. Output: Boolean value: `True` if the matrix is a Toeplitz matrix, `False` otherwise. Example: ```python Toelipitz_matrix([ [1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1] ]) -> True Toelipitz_matrix([ [1, 2, 3, 4], [5, 1, 9, 3], [6, 5, 1, 2], [7, 6, 5, 1] ]) -> False ```","solution":"def is_toeplitz_matrix(matrix): Returns True if the matrix is a Toeplitz matrix, otherwise False. rows = len(matrix) if rows == 0: return True cols = len(matrix[0]) for row in range(rows - 1): for col in range(cols - 1): if matrix[row][col] != matrix[row + 1][col + 1]: return False return True"},{"question":"The landlord is facing an expensive problem. He has a number M, the budget to fix broken rooms in a line of N rooms. Each room has a cost to fix it, represented by an array of N costs. The landlord wants to know the maximum number of consecutive rooms that can be fixed within his budget M. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input. - The first line contains two integers M, N. - The second line contains N space-separated integers, representing the cost to fix each room. -----Output:----- For each test case, output in a single line the maximum number of consecutive rooms that can be fixed within the given budget M. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 10^5 - 1 leq N leq 10^5 - 0 leq cost of fixing each room leq 10^5 -----Sample Input:----- 2 10 6 2 1 3 4 5 6 5 6 1 2 2 2 1 1 -----Sample Output:----- 4 3 -----EXPLANATION:----- For 1) The maximum number of consecutive rooms that can be fixed within a budget of 10 is achieved by fixing the rooms with costs [2, 1, 3, 4], which adds up to 10. For 2) The maximum number of consecutive rooms that can be fixed within a budget of 5 is achieved by fixing the rooms with costs [2, 2, 1], which adds up to 5.","solution":"def max_consecutive_rooms(M, N, costs): Returns the maximum number of consecutive rooms that can be fixed within a given budget M. max_rooms = 0 current_sum = 0 start = 0 for end in range(N): current_sum += costs[end] while current_sum > M: current_sum -= costs[start] start += 1 max_rooms = max(max_rooms, end - start + 1) return max_rooms def solve(test_cases): Processes multiple test cases and returns the results in a list. results = [] for M, N, costs in test_cases: result = max_consecutive_rooms(M, N, costs) results.append(result) return results"},{"question":"Given a string of words separated by spaces, write a function that finds all palindromic words (words that read the same backward as forward) in the string and returns them in a list. If there are no palindromic words, return an empty list. The function should be case-insensitive and consider only alphabetic characters. For example: ```python palindromic_words(\\"Madam Arora teaches malayalam\\") ``` should return: ```python [\'Madam\', \'Arora\', \'malayalam\'] ``` and ```python palindromic_words(\\"Nurses run\\") ``` should return: ```python [] ```","solution":"def palindromic_words(sentence): Given a string of words separated by spaces, the function returns a list of all palindromic words. import re words = re.findall(r\'bw+b\', sentence) result = [word for word in words if word.lower() == word.lower()[::-1]] return result"},{"question":"Create a function that takes a list of integers and returns the sum of all integers that have an **odd number of digits**. **Function Signature:** `def sum_odd_digit_numbers(nums: List[int]) -> int:` **Examples:** ``` sum_odd_digit_numbers([123, 4567, 89, 2]) = 124 # Explanation: 123 and 2 have odd digits. sum_odd_digit_numbers([1, 22, 333, 4444]) = 334 # Explanation: 1 and 333 have odd digits. sum_odd_digit_numbers([12, 345, 67, 8901]) = 412 # Explanation: Only 345 has odd digits. ``` **Constraints:** - The list will contain at least one integer. - Each integer is in the range of -10^9 to 10^9. - Do not consider negative signs as a digit when counting the number of digits.","solution":"from typing import List def sum_odd_digit_numbers(nums: List[int]) -> int: Returns the sum of all integers in the list that have an odd number of digits. Args: nums (List[int]): List of integers. Returns: int: Sum of integers with an odd number of digits. def is_odd_digit_count(n: int) -> bool: # Convert number to string and remove the sign if negative n_str = str(abs(n)) return len(n_str) % 2 != 0 return sum(num for num in nums if is_odd_digit_count(num))"},{"question":"Write a function to rotate a given 2D array (matrix) 90 degrees clockwise. The function should take a 2D array as input and return a new 2D array which is the original array rotated by 90 degrees clockwise. Example: rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => [[7, 4, 1], [8, 5, 2], [9, 6, 3]] rotate_matrix([[1, 2], [3, 4], [5, 6]]) => [[5, 3, 1], [6, 4, 2]] The input may not always be a square matrix (i.e., number of rows and columns may differ). Ensure your function can handle such cases.","solution":"def rotate_matrix(matrix): Rotates the given 2D matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The 2D matrix to be rotated. Returns: list of list of int: The rotated matrix. if not matrix or not matrix[0]: return [] rotated_matrix = [] num_rows = len(matrix) num_cols = len(matrix[0]) for col in range(num_cols): new_row = [] for row in reversed(range(num_rows)): new_row.append(matrix[row][col]) rotated_matrix.append(new_row) return rotated_matrix"},{"question":"Write a function that takes a list of integers as input and returns a dictionary with two keys: \\"even\\" and \\"odd\\". The value corresponding to each key should be a list containing all even or odd numbers from the input list, respectively. The order of numbers in the output lists should match the order in the input list. Example: ```python separate_even_odd([1, 2, 3, 4, 5, 6]) => {\'even\': [2, 4, 6], \'odd\': [1, 3, 5]} separate_even_odd([10, 11, 12, 13, 14, 15]) => {\'even\': [10, 12, 14], \'odd\': [11, 13, 15]} ``` Important note: If there are no even or odd numbers in the input list, the corresponding list in the output dictionary should be empty.","solution":"def separate_even_odd(numbers): Separates the even and odd numbers from the input list and returns them in a dictionary. Args: numbers (list of int): The list of integers to separate. Returns: dict: A dictionary with keys \\"even\\" and \\"odd\\" containing lists of even and odd numbers respectively. result = {\'even\': [], \'odd\': []} for num in numbers: if num % 2 == 0: result[\'even\'].append(num) else: result[\'odd\'].append(num) return result"},{"question":"Alice is an avid collector of antique coins. She has recently come across a collection of N antique coins. Each coin has a distinct weight. Alice wants to organize her collection by storing them in boxes where the difference in the number of coins between any two boxes is at most 1. The number of coins in each box must be a non-negative integer. Given the total number of coins N, can you determine the minimum and maximum number of boxes she can use to store all the coins? -----Input----- The first line of input contains a single integer T denoting the number of test cases. The first and the only line of each test case contains an integer N denoting the number of coins Alice has. -----Output----- For each test case, output a single line containing two integers separated by a space: the minimum and maximum number of boxes Alice can use. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 109 -----Subtasks----- - Subtask 1 (50 points) : 1 ≤ N ≤ 105 - Subtask 2 (50 points) : 1 ≤ N ≤ 109 -----Example----- Input3 5 12 25 Output5 5 4 12 5 25 -----Explanation----- - Test 1: For N = 5 coins, Alice can use exactly 5 boxes each containing 1 coin, or 5 boxes each containing 1 coin and there is no other organization possible, so the answer is 5 5. - Test 2: For N = 12 coins, the minimum number of boxes is 4 if each box contains 3 coins (making the count uniform), and the maximum number of boxes is 12 each containing 1 coin. - Test 3: For N = 25 coins, the minimum number of boxes is 5 (each containing 5 coins), and the maximum number of boxes is 25 with each containing 1 coin.","solution":"def min_max_boxes(N): Given N coins, returns a tuple containing the minimum and maximum number of boxes Alice can use. # Maximum number of boxes is N (1 coin in each box) max_boxes = N # Minimum number of boxes can be derived as follows: # If N = k * x where x is coins in each box and k is number of boxes # We need to find the smallest k such that k * (k - 1) / 2 < N <= k * (k + 1) / 2, simplifying for k gives # k >= sqrt(2 * N + 1/4) - 1/2 import math min_boxes = math.ceil(math.sqrt(2 * N + 0.25) - 0.5) return (min_boxes, max_boxes) def process_input_cases(T, cases): results = [] for i in range(T): N = cases[i] min_boxes, max_boxes = min_max_boxes(N) results.append(f\\"{min_boxes} {max_boxes}\\") return results"},{"question":"Design a function that, given a string with letters and digits, rearranges the characters so that all the digits come before all the letters. The digits should remain in their original relative order, and the letters should remain in their original relative order as well. Example 1: Input: \\"a1b2c3\\" Output: \\"123abc\\" Example 2: Input: \\"abc123\\" Output: \\"123abc\\" Example 3: Input: \\"3a7b1\\" Output: \\"371ab\\" Note: You may assume the given string contains only lowercase letters and digits.","solution":"def rearrange_string(s): Rearranges the characters in a string so that all the digits come before the letters. Digits and letters remain in their original relative order. Parameters: s (str): The input string containing letters and digits only. Returns: str: The rearranged string with digits first, followed by letters. digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(digits) + \'\'.join(letters)"},{"question":"Write a function `add_sparse_matrices` that takes two sparse matrices represented as dictionaries of dictionaries, where `mat[i][j]` contains the value at row `i` and column `j`, if the entry is non-zero. The function should return a new sparse matrix, also in the dictionary of dictionaries format, which is the result of adding the two input sparse matrices. Assume that the input matrices have the same dimensions. For example: ``` mat1 = { 0: {1: 3, 4: 5}, 1: {2: -2}, } mat2 = { 0: {1: 2, 3: 4}, 1: {2: 3, 3: 1}, 2: {0: 4} } add_sparse_matrices(mat1, mat2) ``` Possible output: ``` { 0: {1: 5, 3: 4, 4: 5}, 1: {2: 1, 3: 1}, 2: {0: 4} } ``` Notes: - The function should handle cases where certain rows or columns are present in one matrix but not the other. - The resulting matrix should not have any zero values stored explicitly. - Be mindful of the efficiency of your solution, given the potentially large number of elements.","solution":"def add_sparse_matrices(mat1, mat2): Adds two sparse matrices represented as dictionaries of dictionaries. Args: mat1 (dict): The first sparse matrix. mat2 (dict): The second sparse matrix. Returns: dict: The resulting sparse matrix. result = {} # Update result with entries of mat1 for i, row in mat1.items(): if i not in result: result[i] = {} for j, value in row.items(): result[i][j] = result[i].get(j, 0) + value # Update result with entries of mat2 for i, row in mat2.items(): if i not in result: result[i] = {} for j, value in row.items(): result[i][j] = result[i].get(j, 0) + value # Remove entries with zero values for i in list(result.keys()): for j in list(result[i].keys()): if result[i][j] == 0: del result[i][j] if not result[i]: del result[i] return result"},{"question":"Design a function `tribonacci` to compute and return the nth Tribonacci number. The Tribonacci series is similar to the Fibonacci series, but instead of starting with two predetermined terms, the Tribonacci series starts with three predetermined terms and progresses based on the sum of the preceding three terms. The Tribonacci sequence is defined as follows: - T(0) = 0 - T(1) = 1 - T(2) = 1 - T(n) = T(n - 1) + T(n - 2) + T(n - 3) for n >= 3 **Function Signature** ``` def tribonacci(n: int) -> int: ``` **Input** - An integer `n` (0 ≤ n ≤ 37) **Output** - Return the nth Tribonacci number. **Examples** - `tribonacci(0)` should return `0` - `tribonacci(1)` should return `1` - `tribonacci(2)` should return `1` - `tribonacci(3)` should return `2` - `tribonacci(4)` should return `4` Note: Make sure your solution is efficient and avoids redundant calculations to handle the upper limit constraint efficiently.","solution":"def tribonacci(n: int) -> int: Compute the nth Tribonacci number. The Tribonacci sequence is defined as: - T(0) = 0 - T(1) = 1 - T(2) = 1 - T(n) = T(n - 1) + T(n - 2) + T(n - 3) for n >= 3 :param n: An integer (0 ≤ n ≤ 37). :return: The nth Tribonacci number. if n == 0: return 0 if n == 1 or n == 2: return 1 # Initializing the first three tribonacci numbers trib_0, trib_1, trib_2 = 0, 1, 1 # Using an iterative approach to compute the nth tribonacci number for _ in range(3, n + 1): trib_next = trib_0 + trib_1 + trib_2 trib_0, trib_1, trib_2 = trib_1, trib_2, trib_next return trib_2"},{"question":"Given a grid of size m times n, you have to find the maximum area of an island. An island is a group of adjacent cells filled with \'1\'s (representing land) connected 4-directionally (horizontal or vertical). Cells with a \'0\' represent water. Your task is to write an algorithm that will determine the maximum area of an island in the grid. -----Input:----- - The first line contains an integer T, the number of test cases. Then T test cases follow. - For each test case, the first line contains two integers m and n, the dimensions of the grid. - The next m lines each contain n integers, with each integer being either 0 or 1 representing the grid. -----Output:----- For each test case, print the maximum area of an island in the grid. -----Sample Input:----- 1 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 1 0 -----Sample Output:----- 4 -----Constraints----- - 1 leq T leq 50 - 1 leq m, n leq 50 - Grid elements are either 0 or 1 Note: The area of an island is the total number of 1\'s forming that island.","solution":"def max_area_of_island(grid): Returns the maximum area of an island in the given grid. def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return 0 grid[i][j] = 0 area = 1 for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]: area += dfs(grid, x, y) return area max_area = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_area = max(max_area, dfs(grid, i, j)) return max_area def max_area_of_island_in_grids(T, test_cases): results = [] for tc in range(T): m, n, grid = test_cases[tc] results.append(max_area_of_island(grid)) return results"},{"question":"The doomsday asteroid is on a collision course with Earth, and the Astronomical Society needs a quick algorithm to predict the potential impact zones. The asteroid will break down into N fragments upon entering the atmosphere, with each fragment heading in a linear trajectory. Each fragment\'s movement can be described in a 2D plane by its coordinates (x, y) and its velocity vector (vx, vy). Given the initial coordinates and velocities, calculate the coordinates of each fragment after T seconds. -----Input:----- - The first line will contain an integer T, the time in seconds after which the positions are to be calculated. - The second line will contain an integer N, the number of fragments. - The next N lines will each contain four integers x, y, vx, vy, representing the initial coordinates and velocity vectors of each fragment. -----Output:----- - Output N lines, each containing the coordinates of a fragment after T seconds, rounded to the nearest integer. -----Constraints----- - 1 leq N leq 100 - 1 leq T leq 1,000 - -10^3 leq x, y, vx, vy leq 10^3 -----Sample Input:----- 2 3 0 0 1 1 1 2 -1 0 -1 -2 0 -3 -----Sample Output:----- 2 2 -1 2 -1 -8 -----EXPLANATION:----- After 2 seconds: - Fragment 1: (0 + 2 * 1, 0 + 2 * 1) = (2, 2) - Fragment 2: (1 + 2 * (-1), 2 + 0 * 2) = (-1, 2) - Fragment 3: (-1 + 0 * 2, -2 + 2 * (-3)) = (-1, -8)","solution":"def compute_fragment_positions(T, N, fragments): result = [] for fragment in fragments: x, y, vx, vy = fragment new_x = x + T * vx new_y = y + T * vy result.append((round(new_x), round(new_y))) return result"},{"question":"# Task: Write a function **find_maximum_subarray_sum** that finds the maximum sum of a contiguous subarray within a given one-dimensional numeric array. Rules/Note: * The array will contain at least one number. * The function should handle both positive and negative numbers. * The function should return an integer, which is the maximum sum of the contiguous subarray. # Examples: find_maximum_subarray_sum([−2,1,−3,4,−1,2,1,−5,4]): 6 Explanation: [4,−1,2,1] has the largest sum = 6. find_maximum_subarray_sum([1]): 1 Explanation: The largest sum is 1 (only one element). find_maximum_subarray_sum([−1,−2,−3]): -1 Explanation: The largest (maximum) sum is -1 (only one element). find_maximum_subarray_sum([5,4,−1,7,8]): 23 Explanation: [5,4,−1,7,8] has the largest sum = 23.","solution":"def find_maximum_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the given numeric array. max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are designing a new voting system for a small committee and you need to determine the result of the vote. Each member of the committee casts one vote for one of the available candidates. The candidate who receives the most votes wins. If there is a tie, the candidate whose name comes first in alphabetical order wins. Write a function to calculate the result of the vote. Your function should receive an array of strings representing the votes, where each string is a name of a candidate. The function should return the name of the winning candidate. Example: ```python def tally_votes(votes): # Your code here # Example usage: votes = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Charlie\\", \\"Bob\\", \\"Alice\\"] print(tally_votes(votes)) # Output: \\"Alice\\" ``` In the example above, \\"Alice\\" wins with 3 votes, while \\"Bob\\" gets 2 votes and \\"Charlie\\" gets 1 vote. If there is a tie, choose the candidate whose name comes first alphabetically.","solution":"def tally_votes(votes): Determines the result of the vote by counting the votes for each candidate and returns the name of the winning candidate. In case of a tie, the candidate whose name comes first alphabetically wins. Parameters: votes (list of str): List of votes where each vote is the name of a candidate. Returns: str: Name of the winning candidate. from collections import defaultdict vote_count = defaultdict(int) # Count the votes for each candidate for vote in votes: vote_count[vote] += 1 # Determine the candidate with the most votes, breaking ties alphabetically winner = None for candidate in vote_count: if (winner is None or vote_count[candidate] > vote_count[winner] or (vote_count[candidate] == vote_count[winner] and candidate < winner)): winner = candidate return winner"},{"question":"=====Function Descriptions===== Handling strings in Python is facilitated by numerous built-in functions and methods. For instance: 1. `str.lower()` returns a copy of the string with all the cased characters converted to lowercase. 2. `str.capitalize()` returns a copy of the string with its first character capitalized and the rest lowercased. 3. `str.swapcase()` returns a copy of the string with uppercase characters converted to lowercase and vice versa. Example: ```python s = \\"Hello, World!\\" print(s.lower()) # Output: \\"hello, world!\\" print(s.capitalize()) # Output: \\"Hello, world!\\" print(s.swapcase()) # Output: \\"hELLO, wORLD!\\" ``` =====Problem Statement===== You are given a string S. Your task is to perform the following string transformations: 1. Convert the string to lowercase. 2. Capitalize the string. 3. Swap the case of each character in the string. =====Input Format===== A single line contains the input string S. =====Output Format===== Print the result of each transformation on a new line. =====Sample Input===== Hello, World! =====Sample Output===== hello, world! Hello, world! hELLO, wORLD!","solution":"def string_transformations(s): Takes a string s and prints three transformations: 1. The string in lowercase. 2. The string with the first letter capitalized and the rest in lowercase. 3. The string with each letter\'s case swapped. lowercase_s = s.lower() capitalized_s = s.capitalize() swappedcase_s = s.swapcase() # Print the transformations print(lowercase_s) print(capitalized_s) print(swappedcase_s) return lowercase_s, capitalized_s, swappedcase_s"},{"question":"Write a function that converts a given string into `snake_case`. Snake case is a convention in which all letters of a string are lowercase and spaces between words are replaced by underscores. You need to handle camel case inputs, which means: - Replace any capital letter with an underscore followed by the lowercase equivalent letter, unless it is the first letter of the string. - Change all spaces to underscores. - Convert the entire string to lowercase. For example: * \\"thisIsAnExample\\" should be converted to \\"this_is_an_example\\" * \\"Hello World\\" should be converted to \\"hello_world\\" * \\"snakeCase\\" should be converted to \\"snake_case\\" Notes: * The input string can contain alphabets and spaces only. * The output string must not start or end with an underscore. Examples ``` \\"thisIsAnExample\\" --> \\"this_is_an_example\\" \\"Hello World\\" --> \\"hello_world\\" \\"snakeCase\\" --> \\"snake_case\\" ```","solution":"def to_snake_case(s): Converts a given string into snake_case. Parameters: s (str): The input string to be converted. Returns: str: The converted snake_case string. result = \\"\\" previous_char_space = False for i, char in enumerate(s): if char.isupper(): if i != 0 and not previous_char_space: result += \\"_\\" result += char.lower() previous_char_space = False elif char == \\" \\": if previous_char_space: continue result += \\"_\\" previous_char_space = True else: result += char previous_char_space = False return result.strip(\'_\')"},{"question":"Task Write a function named `countUniqueChars`/`count_unique_chars` that takes in an array of strings and returns an array of integers. Each integer should represent the count of unique characters in the corresponding string of the input array. Input 1. An array of strings of arbitrary length, where each string may contain any printable ASCII characters. Output 1. An array of integers where each integer denotes the number of unique characters in the corresponding input string. Example ```python count_unique_chars([\\"hello\\", \\"world\\", \\"abc\\", \\"aabbcc\\"]) # returns [4, 5, 3, 3] count_unique_chars([\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\"]) # returns [1, 2, 3, 4] ``` Edge Cases 1. If the input array is empty, the output should be an empty array. 2. If a string within the input array contains only repeated characters, the result should correspond to the number of unique characters. For example, \\"aaaa\\" should count as 1.","solution":"def count_unique_chars(strings): Takes an array of strings and returns an array of integers representing the count of unique characters in each string. return [len(set(string)) for string in strings]"},{"question":"Write a function that takes a string containing a mathematical expression with only addition and subtraction, and returns the evaluated result as an integer. The expression will only contain numerals (0-9), spaces and the operators \'+\' and \'-\'. No parentheses, multiplication, division, or other operators will be present. Examples: \\"3 + 5\\" => 8 \\"10 - 2 + 3\\" => 11 \\"1 + 2 - 3 + 4 - 5\\" => -1 \\"100 - 200 + 300 - 400\\" => -200 \\"7\\" => 7 (Note: Ensure that the function correctly handles spaces and multiple operations.)","solution":"def evaluate_expression(expression): Evaluates a mathematical expression with addition and subtraction. Parameters: expression (str): The input string containing the expression. Returns: int: The evaluated result. tokens = expression.split() result = int(tokens[0]) i = 1 while i < len(tokens): if tokens[i] == \'+\': result += int(tokens[i + 1]) elif tokens[i] == \'-\': result -= int(tokens[i + 1]) i += 2 return result"},{"question":"You are given a list of strings. A string is considered \\"unique\\" if it does not have any repeated characters. Your task is to find the longest unique string from the given list. If there are multiple strings with the same length, return the one that appears first in the list. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case starts with an integer N, the number of strings in the list. - The next N lines each contain a single string of length at most 1000 comprising only lowercase English letters. -----Output:----- For each test case, output a single line containing the longest unique string. If none of the strings are unique, output `NONE`. -----Constraints:----- - 1 leq T leq 1000 - 1 leq N leq 100 - The total length of all strings in a test case does not exceed 10000 -----Sample Input:----- 2 3 abcdef abbac abade 2 mmnop qrstuv -----Sample Output:----- abcdef qrstuv","solution":"def is_unique(s): Check if all characters in the string are unique. return len(s) == len(set(s)) def longest_unique_string(test_cases): For each test case, return the longest string with all unique characters. If no such string exists, return \'NONE\'. results = [] for strings in test_cases: max_len = 0 longest_unique = \'NONE\' for s in strings: if is_unique(s): if len(s) > max_len: max_len = len(s) longest_unique = s results.append(longest_unique) return results"},{"question":"Given an array pairs of integers where each pairs[i] = [start_i, end_i] represents an interval, return the length of the longest chain of pairs you can achieve. Each pair (a, b) can be in the chain if and only if b < c for every (a, b) and (c, d) in the chain. You can select pairs in any order. **Example 1:** Input: pairs = [[1, 2], [2, 3], [3, 4]] Output: 2 Explanation: The longest chain you can construct is [1, 2] -> [3, 4]. **Example 2:** Input: pairs = [[1, 2], [7, 8], [4, 5]] Output: 3 Explanation: The longest chain you can construct is [1, 2] -> [4, 5] -> [7, 8]. **Note:** - The length of pairs will not exceed 1000. - Each pairs[i] = [start_i, end_i] will be in the range [-1000, 1000].","solution":"def findLongestChain(pairs): Returns the length of the longest chain of pairs you can achieve. pairs.sort(key=lambda x: x[1]) # Sort pairs by their end value current_end = float(\'-inf\') longest_chain = 0 for pair in pairs: if current_end < pair[0]: current_end = pair[1] longest_chain += 1 return longest_chain"},{"question":"In the realm of text processing, we\'ve all been fascinated by the ability to manipulate and analyze strings in various ways. Imagine you are provided with a long string and a short string, and your task is to determine if the characters of the short string can form a contiguous subarray of the characters in the long string. -----Input----- The first line contains the string S consisting of lowercase English letters (1 ≤ |S| ≤ 1000) – the long string. The second line contains the string P consisting of lowercase English letters (1 ≤ |P| ≤ 100) – the short string. -----Output----- Print \\"YES\\" if the string P can form a contiguous subarray within S, and \\"NO\\" otherwise. You can print each letter in arbitrary case (upper or lower). -----Examples----- Input hellothere there Output YES Input abcdefghijk gfed Output NO Input substringcheck check Output YES -----Note----- In the first example, the string \\"there\\" is exactly present as a contiguous subarray within \\"hellothere\\". Hence, the output is \\"YES\\". In the second example, although the characters \\"gfed\\" are present in the string \\"abcdefghijk\\", they are not in a contiguous manner. So, the output is \\"NO\\". In the third example, \\"check\\" is present as a contiguous subarray within \\"substringcheck\\", thus the output is \\"YES\\".","solution":"def can_form_contiguous_subarray(S, P): Determines if the short string P can form a contiguous subarray within the long string S. Args: S (str): The long string consisting of lowercase English letters. P (str): The short string consisting of lowercase English letters. Returns: str: \\"YES\\" if P can form a contiguous subarray within S, otherwise \\"NO\\". if P in S: return \\"YES\\" else: return \\"NO\\""},{"question":"Create a function that receives an array of integers and a target integer. The function should return the smallest subarray length for which the sum is greater than or equal to the target. If no such subarray exists, return `0`. ```Python For example: smallest_subarray_length([2, 3, 1, 2, 4, 3], 7) == 2 because the subarray [4, 3] has a sum of 7. smallest_subarray_length([1, 4, 4], 8) == 2 because the subarray [4, 4] has a sum of 8. smallest_subarray_length([1, 1, 1, 1, 1, 1, 1], 11) == 0 because there is no subarray with a sum of 11. smallest_subarray_length([1, 2, 3, 4, 5], 11) == 3 because the subarray [3, 4, 5] has a sum of 12 which is greater than 11. smallest_subarray_length([3, 1, 4, 1, 5, 9], 15) == 3 because the subarray [4, 1, 5, 9] has a sum of 19. ``` More examples in the test cases. Good luck!","solution":"def smallest_subarray_length(arr, target): Find the smallest subarray length for which the sum is greater than or equal to the target. If no such subarray exists, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"# Arrays - Max Consecutive Sum Implement a function `maxConsecutiveSum(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns the maximum sum of `k` consecutive elements in the array. The function should be efficient, taking care of edge cases where the array length is less than `k` by raising an `ArgumentException`. For example, given the array `[2, 1, 5, 1, 3, 2]` and `k = 3`, the function should return `9` (since the subarray `[5, 1, 3]` has the largest sum of any consecutive subarray of length 3). Guidelines: 1. The array `arr` should not be empty, and the integer `k` should be greater than 0. 2. The function should raise an `ArgumentException` if `k` is greater than the length of the array. 3. Edge cases where the array is empty or `k` is non-positive should also trigger an `ArgumentException`. Example Test Cases: ```python assert maxConsecutiveSum([2, 1, 5, 1, 3, 2], 3) == 9 assert maxConsecutiveSum([1, 3, 2, 1, 4, 1, 5, 3], 4) == 13 assert maxConsecutiveSum([-1, -2, -3, -4], 2) == -3 ``` This function assesses the ability to work with array manipulations, sliding window techniques, and handling exceptions for invalid inputs.","solution":"def maxConsecutiveSum(arr, k): Returns the maximum sum of k consecutive elements in the array `arr`. If `arr` length is smaller than `k`, raise an ArgumentException. if len(arr) < k or k <= 0 or len(arr) == 0: raise Exception(\\"Invalid input\\") max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a string `str`, write a function `longest_palindromic_substring(str)` that finds and returns the longest palindromic substring within `str`. A palindrome is a string that reads the same forwards and backwards. The substring you\'re looking for should be the longest sequence of characters in `str` that forms a palindrome. The function should handle cases where there are multiple substrings of maximum length by returning the first longest palindromic substring found. You may assume that the input string will contain only alphabetic characters (both uppercase and lowercase) and will have at least one character. # Examples: - For `str = \\"babad\\"`, the function should return `\\"bab\\"` or `\\"aba\\"`. - For `str = \\"cbbd\\"`, the function should return `\\"bb\\"`. - For `str = \\"a\\"`, the function should return `\\"a\\"`. - For `str = \\"ac\\"`, the function should return `\\"a\\"` or `\\"c\\"`. # Constraints: - `1 <= len(str) <= 1000` - The function should have a time complexity better than O(n^2) if possible. # Hints: - Consider using a two-pointer technique to expand around the centers. - Account for both odd-length and even-length palindromes.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. if not s: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(i, i) if len(palindrome1) > len(longest): longest = palindrome1 # Even length palindromes palindrome2 = expand_around_center(i, i + 1) if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"Given an undirected graph with N nodes and M edges, each node initially holds a value (which could be positive or negative). You need to find the maximum possible sum of values you can achieve by performing a series of operations. An operation consists of choosing two nodes u and v that are connected by an edge and swapping their values. -----Input----- - The first line of the input contains two integers N and M, denoting the number of nodes and edges in the graph. - The second line contains N space-separated integers representing the values of nodes. - The next M lines each contain two integers u and v, representing an undirected edge between nodes u and v. -----Output----- Print a single integer, the maximum sum of values that can be achieved after performing the operations. -----Constraints----- - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 10000 - -1000 ≤ value of each node ≤ 1000 - 1 ≤ u, v ≤ N -----Example----- **Input:** ``` 5 4 1 -2 3 -4 5 1 2 2 3 3 4 4 5 ``` **Output:** ``` 3 ``` **Explanation:** You can swap the values 1 and -2 between node 1 and node 2, then the values -2 and 3 between node 2 and node 3, then -2 and -4 between node 3 and node 4, finally -2 and 5 between node 4 and node 5 to get the configuration [1, 3, -4, 5, -2] which has the maximum sum 1 + 3 - 4 + 5 - 2 = 3.","solution":"def max_possible_sum(N, M, values, edges): from collections import defaultdict # Helper function for DFS to find connected components def dfs(node, component): stack = [node] while stack: current = stack.pop() if current not in visited: visited.add(current) component.append(current) for neighbor in graph[current]: if neighbor not in visited: stack.append(neighbor) # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components = [] # Find all connected components for i in range(1, N + 1): if i not in visited: component = [] dfs(i, component) components.append(component) # Calculate maximum possible sum by taking only the positive values in each component total_sum = 0 for component in components: total_sum += sum(value for node in component for value in [values[node - 1]] if value > 0) return total_sum"},{"question":"Maria is playing a solitary game with a 2D grid of size n times m. Each cell in the grid contains either a 0 or a 1. The goal is to transform the grid such that all cells contain 0. To achieve this, Maria can perform the following operation any number of times: - Select a sub-grid of size 2 times 2 and if all four cells in the sub-grid contain 1, turn all four cells to 0. Determine if it is possible for Maria to transform the entire grid to all 0s using the described operation. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line contains two integers n and m (2 le n, m le 100) – the dimensions of the grid. The next n lines contain m characters each (\'0\' or \'1\'), representing the initial state of the grid. -----Output----- Print \\"YES\\" if Maria can transform the entire grid to all 0s. Otherwise, print \\"NO\\". -----Example----- Input 3 3 110 111 011 Output YES Input 2 2 11 10 Output NO -----Note----- In the first example, Maria can perform the following steps: 1. Select the top-left 2 times 2 sub-grid to turn it to all 0s: ``` 11 11 ``` 2. The grid becomes: ``` 00 01 ``` 3. Select the bottom-right 2 times 2 sub-grid to turn it to all 0s: ``` 01 ``` 4. The grid becomes: ``` 00 00 ```","solution":"def can_transform_grid(n, m, grid): Determine if the entire grid can be transformed to all 0s using the specified operation. Args: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of str): initial state of the grid which is a list of strings Returns: str: \\"YES\\" if the grid can be transformed to all 0s, \\"NO\\" otherwise # Check the grid to identify any isolated 1s which cannot be part of a 2x2 sub-grid for i in range(n - 1): for j in range(m - 1): # Looking at a 2x2 grid starting at (i, j) if grid[i][j] == \'1\' and grid[i][j+1] == \'1\' and grid[i+1][j] == \'1\' and grid[i+1][j+1] == \'1\': continue # Check for remaining 1s for i in range(n): for j in range(m): if grid[i][j] == \'1\': # Check if this 1 can be part of any 2x2 block possible = False if i > 0 and j > 0 and grid[i-1][j-1] == \'1\' and grid[i-1][j] == \'1\' and grid[i][j-1] == \'1\': possible = True if i > 0 and j < m-1 and grid[i-1][j] == \'1\' and grid[i-1][j+1] == \'1\' and grid[i][j+1] == \'1\': possible = True if i < n-1 and j > 0 and grid[i][j-1] == \'1\' and grid[i+1][j-1] == \'1\' and grid[i+1][j] == \'1\': possible = True if i < n-1 and j < m-1 and grid[i][j+1] == \'1\' and grid[i+1][j] == \'1\' and grid[i+1][j+1] == \'1\': possible = True if not possible: return \\"NO\\" return \\"YES\\""},{"question":"A strong password is considered to have at least one uppercase letter, one lowercase letter, one digit, and one special character (e.g., !, @, #, , %, ^, &, *). Write a function named `is_strong_password` that takes a string as input and returns a boolean indicating whether the string satisfies the criteria for a strong password. The function should have a time complexity of O(n), where n is the length of the password. Consider edge cases such as empty strings or very short strings.","solution":"import re def is_strong_password(password): Returns True if the password is strong. A strong password has at least one uppercase letter, one lowercase letter, one digit, and one special character. if len(password) < 1: return False has_upper = re.search(r\'[A-Z]\', password) is not None has_lower = re.search(r\'[a-z]\', password) is not None has_digit = re.search(r\'d\', password) is not None has_special = re.search(r\'[!@#%^&*]\', password) is not None return has_upper and has_lower and has_digit and has_special"},{"question":"Create a function to calculate the \\"quasi-palindrome\\" status of a given integer. A quasi-palindrome number is one that can be rearranged to form a palindrome, a sequence that reads the same backward as forward. The function should take an integer as input. Determine the frequency of each digit in the number, and identify whether any rearrangement of the digits can result in a palindrome. For example, the integer 12421 is a quasi-palindrome since it can be rearranged to form the palindrome 12221. The general rule is: - Every digit must have an even count, except for at most one digit, which can appear an odd number of times. Write a function `is_quasi_palindrome(n)` that takes an integer `n` and returns a boolean indicating whether the number is a quasi-palindrome. Example: ```python is_quasi_palindrome(12421) # Output: True is_quasi_palindrome(12345) # Output: False ``` Note: Assume the input integer `n` will always be non-negative.","solution":"def is_quasi_palindrome(n): Determine if the given integer n is a quasi-palindrome. A quasi-palindrome number is one that can be rearranged to form a palindrome. Args: n (int): The input integer. Returns: bool: True if n is a quasi-palindrome, False otherwise. from collections import Counter # Convert the integer to a string to count the frequency of each digit digit_counts = Counter(str(n)) # Ensure there\'s at most one digit with an odd frequency count odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Given an array of integers, `nums`, and an integer `target`, return the starting and ending position of a given `target` value in a non-decreasing array. If the target is not found in the array, return [-1, -1]. # Notes * You must write an algorithm with O(log n) runtime complexity. * The input array will not contain any duplicate numbers. * If the target value does not exist in the array, return [-1, -1]. Examples ```python search_range([5, 7, 7, 8, 8, 10], 8) == [3, 4] search_range([5, 7, 7, 8, 8, 10], 6) == [-1, -1] search_range([], 0) == [-1, -1] search_range([1], 1) == [0, 0] ```","solution":"def search_range(nums, target): def find_left(nums, target): low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] < target: low = mid + 1 else: high = mid - 1 return low def find_right(nums, target): low, high = 0, len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] <= target: low = mid + 1 else: high = mid - 1 return high left_index = find_left(nums, target) right_index = find_right(nums, target) if left_index <= right_index: return [left_index, right_index] else: return [-1, -1]"},{"question":"# Task Write a function that takes a string, determines the smallest lexicographical rotation of the string, and returns it. The smallest lexicographical rotation of a string is the smallest string that can be formed by rotating the characters and comparing lexicographically (dictionary order). # Example For `s = \\"bca\\"`, the output should be `\\"abc\\"`. The possible rotations are: - \\"bca\\" - \\"cab\\" - \\"abc\\" The smallest lexicographical rotation is \\"abc\\". # Input/Output - `[input]` string `s` Constraints: `1 ≤ s.length ≤ 100`. - `[output]` a string","solution":"def smallest_lexicographical_rotation(s): Returns the smallest lexicographical rotation of the string s. n = len(s) rotations = [s[i:] + s[:i] for i in range(n)] return min(rotations) # Example Usage # s = \\"bca\\" # Output should be \\"abc\\" smallest_lexicographical_rotation(\\"bca\\")"},{"question":"Write a function ```calculateFactorial``` that takes an integer input and returns the factorial of that number using recursion. Example: ```python calculateFactorial(5) -> 120 calculateFactorial(3) -> 6 ```","solution":"def calculateFactorial(n): Returns the factorial of the given number n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 return n * calculateFactorial(n - 1)"},{"question":"Imagine you are trying to automate the process of validating a binary string. A binary string consists of only \'0\'s and \'1\'s. You need to determine if the binary string is \\"valid\\". A binary string is considered valid if it: 1. Contains an equal number of \'0\'s and \'1\'s. 2. Can be divided into substrings, each of which contains an equal number of \'0\'s and \'1\'s. For example, the binary string \\"1100\\" is valid because it can be divided into the substrings \\"11\\" and \\"00\\", both of which contain an equal number of \'0\'s and \'1\'s. The string \\"11001100\\" is also valid because it can be divided into substrings \\"1100\\" and \\"1100\\". Write a function `isValidBinaryString` that takes a binary string `s` and returns `true` if the string is valid, and `false` otherwise. -----Input----- - A single binary string `s` of length `n` consisting of only \'0\'s and \'1\'s. -----Output----- - Return a boolean value `true` if the binary string is valid, otherwise return `false`. -----Function Signature----- ```python def isValidBinaryString(s: str) -> bool ``` -----Constraints----- - 1 le n le 10^6 - The length of the string `n` is even. -----Example Input----- \\"1100\\" \\"1010\\" \\"1001\\" \\"110011\\" -----Example Output----- True True True False -----Explanation----- Example case 1: \\"1100\\" can be split into \\"11\\", \\"00\\". Example case 2: \\"1010\\" can be split into \\"10\\", \\"10\\". Example case 4: \\"110011\\" cannot be split such that every substring contains an equal number of \'0\'s and \'1\'s.","solution":"def isValidBinaryString(s: str) -> bool: # First check if the string has an equal number of \'0\'s and \'1\'s if s.count(\'0\') != s.count(\'1\'): return False # Initialize counters count_0 = 0 count_1 = 0 # Traverse the string and make sure every substring can also be divided as required for char in s: if char == \'0\': count_0 += 1 if char == \'1\': count_1 += 1 if count_0 == count_1: count_0 = 0 count_1 = 0 # In a valid binary string this should end at zero return count_0 == 0 and count_1 == 0"},{"question":"A telecommunication company maintains a record of daily call durations for its customers, measured in minutes. The company wishes to identify both the top three longest call durations and the top three shortest call durations for each customer in a month (30 days). Write a function ```call_durations(durations)``` that, given a list of integers ```durations``` returns a tuple containing two lists: - The first list should have the top three longest call durations (in descending order). - The second list should have the top three shortest call durations (in ascending order). If there are fewer than three call durations in ```durations```, simply return the longest and shortest durations available without raising an error. For example: ```python call_durations([23, 5, 88, 36, 8, 15, 77, 92, 49, 12, 18, 31, 30, 41]) = ([92, 88, 77], [5, 8, 12]) call_durations([10, 20]) = ([20, 10], [10, 20]) ``` Note: - ```durations``` will always be a valid list of 1 to 30 positive integers.","solution":"def call_durations(durations): Returns a tuple containing two lists: - The first list: top three longest call durations in descending order. - The second list: top three shortest call durations in ascending order. durations_sorted_desc = sorted(durations, reverse=True) durations_sorted_asc = sorted(durations) top_three_longest = durations_sorted_desc[:3] top_three_shortest = durations_sorted_asc[:3] return (top_three_longest, top_three_shortest)"},{"question":"Susan is organizing her bookshelf and wants to optimize the space usage by only including books that fit within her shelf\'s size constraints. She has a list of books, each with a specific width. The shelf has a maximum width capacity and she aims to maximize the total width of the books she can place on the shelf without exceeding this capacity. - Every book can either be selected or not. - Once a book is placed on the shelf, it cannot be removed. Help Susan determine the maximum total width of books that can be placed on the shelf. For example, suppose there are 5 books with widths [2, 3, 5, 7, 1] and the shelf capacity is 10. The optimal way to maximize the total width without exceeding the shelf capacity is to pick books with widths [2, 3, 5], resulting in a total width of 10. -----Input format----- - Line 1: Two space-separated integers, N (number of books) and C (capacity of the shelf). - Line 2: A space-separated sequence of N integers, representing the widths of the books. -----Output format----- A single line with a single integer, representing the maximum total width of books that can be placed on the shelf without exceeding the capacity. -----Test Data----- The test data is grouped into two subtasks with the following constraints on the inputs. - Subtask 1 [30 points]: 1 ≤ N ≤ 300, 1 ≤ C ≤ 1000. - Subtask 2 [70 points]: 1 ≤ N ≤ 1000, 1 ≤ C ≤ 100000. In all subtasks, each width of the books is between 1 and 1000 inclusive. -----Example----- Here is the sample input and output corresponding to the example above. -----Sample input----- 5 10 2 3 5 7 1 -----Sample output----- 10 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def max_books_width(N, C, widths): Determine the maximum total width of books that can be placed on the shelf without exceeding the capacity. Parameters: N (int): Number of books. C (int): Capacity of the shelf. widths (list): List of widths of books. Returns: int: Maximum total width of books that can be placed on the shelf. # Using dynamic programming to solve the problem dp = [0] * (C + 1) for width in widths: for j in range(C, width - 1, -1): dp[j] = max(dp[j], dp[j - width] + width) return dp[C] # Example usage: # N = 5 # C = 10 # widths = [2, 3, 5, 7, 1] # print(max_books_width(N, C, widths)) # Output: 10"},{"question":"A company hosts a programming competition annually with two participants — John and Jane. The competition consists of N challenges. For each i (1 ≤ i ≤ N), John scored Ji points in the i-th challenge, while Jane scored Ki points in the i-th challenge. The participant with the highest total score wins. If both participants have the same total score, the competition is declared a draw. Both John and Jane have an extra opportunity to boost their final score. They can each select a single challenge that will have double the score for them. Note that John and Jane\'s choices are independent of each other (i.e., John’s choice does not affect Jane\'s score and vice versa). You, as the referee, need to determine the result of the competition, assuming both John and Jane choose their challenges optimally to maximize their total scores. Please help decide the result! -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers J1, J2, ..., JN representing John\'s scores. - The third line contains N space-separated integers K1, K2, ..., KN representing Jane\'s scores. -----Output----- For each test case, print a single line containing the string \\"John\\" if John wins, \\"Jane\\" if Jane wins or \\"Draw\\" if the result is a draw (without quotes). -----Constraints----- - 1 ≤ T ≤ 50 - 2 ≤ N ≤ 50 - 1 ≤ Ji, Ki ≤ 100 for each valid i -----Example----- Input: 2 3 5 6 7 4 5 6 3 2 4 8 9 1 3 Output: John Jane -----Explanation----- Example case 1: John can double his score in the third challenge, resulting in a total score of 5 + 6 + 14 = 25. Jane can choose to double her score in the same third challenge, resulting in a total score of 4 + 5 + 12 = 21. Since John\'s total score is higher, John wins. Example case 2: John can double his score in the third challenge, resulting in a total score of 2 + 4 + 16 = 22. Jane can choose the first challenge to double her score, resulting in a total score of 18 + 1 + 3 = 22. Since their total scores are equal, the competition is a draw.","solution":"def determine_winner(T, test_cases): results = [] for case in test_cases: N = case[\'N\'] John_scores = case[\'John\'] Jane_scores = case[\'Jane\'] total_John = sum(John_scores) total_Jane = sum(Jane_scores) max_John_boost = max(total_John + John_scores[i] for i in range(N)) max_Jane_boost = max(total_Jane + Jane_scores[i] for i in range(N)) if max_John_boost > max_Jane_boost: results.append(\\"John\\") elif max_John_boost < max_Jane_boost: results.append(\\"Jane\\") else: results.append(\\"Draw\\") return results # Example Usage T = 2 test_cases = [ {\'N\': 3, \'John\': [5, 6, 7], \'Jane\': [4, 5, 6]}, {\'N\': 3, \'John\': [2, 4, 8], \'Jane\': [9, 1, 3]} ] print(determine_winner(T, test_cases))"},{"question":"===== Function Descriptions ===== sort The sort function is used to arrange elements of a list in ascending or descending order. (a) Using sort to sort a list in ascending order my_list = [4, 1, 3, 5, 2] my_list.sort() print(my_list) # Output: [1, 2, 3, 4, 5] (b) Using sort to sort a list in descending order my_list = [4, 1, 3, 5, 2] my_list.sort(reverse=True) print(my_list) # Output: [5, 4, 3, 2, 1] sorted The sorted function returns a new sorted list from the elements of any iterable. It creates a new list without modifying the original one. import numpy my_list = [4, 1, 3, 5, 2] sorted_list = sorted(my_list) print(sorted_list) # Output: [1, 2, 3, 4, 5] ===== Problem Statement ===== You are given a string containing space-separated integers. Your task is to convert this string into a list of integers, sort the list in ascending order, and print the sorted list. ===== Input Format ===== A single line of input containing space-separated integers. ===== Output Format ===== Print the sorted list of integers in ascending order.","solution":"def sort_integers(input_string): Converts a space-separated string of integers to a list of integers, sorts it in ascending order, and returns the sorted list. :param input_string: A string containing space-separated integers. :return: A sorted list of integers. # Convert the input string into a list of integers integer_list = list(map(int, input_string.split())) # Sort the list in ascending order integer_list.sort() # Return the sorted list return integer_list"},{"question":"In a supermarket, each item has a price and a discount label that represents the percentage discount applicable on that item. The discount is applied to the price during checkout. Your task is to create a function that takes two lists as input - one for the prices and one for the discount labels (in the same order as the prices). Return a list of the final prices after applying the discounts. Example: Input: prices = [100, 50, 200], discounts = [10, 20, 0] Output: [90.0, 40.0, 200.0]","solution":"def apply_discounts(prices, discounts): Calculates the final prices after applying the discounts. Arguments: prices : list of float/int : original prices of items discounts : list of float/int : discount percentages Returns: list of float : final prices after discounts final_prices = [] for price, discount in zip(prices, discounts): final_price = price - (price * discount / 100) final_prices.append(final_price) return final_prices"},{"question":"Given an integer `n`, return the `n`th triangular number. # Definition: - The nth triangular number is the sum of the first n natural numbers. # Examples: - Input: 3 - Output: 6 - Explanation: 1 + 2 + 3 = 6 - Input: 5 - Output: 15 - Explanation: 1 + 2 + 3 + 4 + 5 = 15 # Constraints: - 1 ≤ n ≤ 10^5 ```python def triangular_number(n: int) -> int: # Please implement this function to return the nth triangular number pass ```","solution":"def triangular_number(n: int) -> int: Returns the nth triangular number. The nth triangular number is the sum of the first n natural numbers. Formula for nth triangular number: n * (n + 1) / 2 return n * (n + 1) // 2"},{"question":"You are given a directed graph represented by N nodes and M weighted edges. Each edge has a weight associated with it. The nodes are numbered from 1 to N. Your task is to find the shortest path from a start node S to an end node E in this graph. If there is no path from S to E, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, M, and S where S is the start node. - The second line of each test case contains a single integer E where E is the end node. - Each of the next M lines contains three space-separated integers u, v, and w denoting a directed edge from node u to node v with weight w. -----Output----- For each test case, print a single line containing one integer ― the length of the shortest path from S to E. If there is no path, return -1. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 0 leq M leq 10^6 - 1 leq u, v, S, E leq N - 1 leq w leq 10^6 -----Subtasks----- Subtask #1 (50 points): 2 leq N leq 100, 0 leq M leq 1000 Subtask #2 (50 points): 1 leq N leq 10^5, 0 leq M leq 10^6 -----Example Input----- 2 4 4 1 3 1 2 1 2 3 2 1 3 4 3 4 1 5 5 1 5 1 2 2 2 3 1 3 4 3 4 5 4 1 5 10 -----Example Output----- 3 10","solution":"import heapq def dijkstra(graph, start, end, N): # Initialize distances with infinity distance = {i: float(\'inf\') for i in range(1, N+1)} distance[start] = 0 # Priority queue for the nodes to visit pq = [(0, start)] # (distance, node) while pq: current_distance, u = heapq.heappop(pq) if current_distance > distance[u]: continue for v, weight in graph[u]: distance_through_u = current_distance + weight if distance_through_u < distance[v]: distance[v] = distance_through_u heapq.heappush(pq, (distance_through_u, v)) return distance[end] if distance[end] != float(\'inf\') else -1 def shortest_path(T, test_cases): results = [] for case in test_cases: N, M, S = case[\'meta\'] E = case[\'end\'] edges = case[\'edges\'] graph = {i: [] for i in range(1, N+1)} for u, v, w in edges: graph[u].append((v, w)) shortest_distance = dijkstra(graph, S, E, N) results.append(shortest_distance) return results"},{"question":"JSON Data Formatter You are given a JSON object containing data that can be either a dictionary of key-value pairs, a list of values, or a nested combination of both. The task is to write a function that formats and prints this JSON object in a sorted, indented, and readable format. The function should handle sorting the keys in dictionaries alphabetically and indenting nested dictionaries and lists appropriately. # Input - A JSON object containing nested structures. # Output - A formatted string where the keys in dictionaries are sorted alphabetically, and the JSON structure is indented to make it human-readable. # Example Input ```json { \\"name\\": \\"John\\", \\"age\\": 30, \\"children\\": [ { \\"name\\": \\"Alice\\", \\"age\\": 10 }, { \\"name\\": \\"Bob\\", \\"age\\": 8 } ], \\"education\\": { \\"degree\\": \\"Masters\\", \\"university\\": \\"XYZ University\\" } } ``` # Example Output ``` { \\"age\\": 30, \\"children\\": [ { \\"age\\": 10, \\"name\\": \\"Alice\\" }, { \\"age\\": 8, \\"name\\": \\"Bob\\" } ], \\"education\\": { \\"degree\\": \\"Masters\\", \\"university\\": \\"XYZ University\\" }, \\"name\\": \\"John\\" } ``` # Constraints 1. The JSON object will not exceed a depth of 10. 2. All JSON keys will be strings, and values will be either strings, numbers, lists, or other dictionaries. 3. The input JSON object will always be valid. # Notes - Indentation should use 4 spaces per level. - The order of keys should be case-sensitive, meaning \'A\' comes before \'a\'.","solution":"import json def format_json(data): Formats a JSON object into a sorted and indented string. Args: data (dict): JSON object containing nested structures. Returns: str: formatted and sorted JSON string. return json.dumps(data, sort_keys=True, indent=4)"},{"question":"Write a function that flattens a nested list of integers into a single list of integers. For example: ```python flatten([1, [2, [3, [4]]]]) -> [1, 2, 3, 4] ```","solution":"def flatten(nested_list): Flattens a nested list of integers. Args: nested_list (list): A list that may contain nested lists. Returns: list: A flattened list containing all integers from the nested list. # Create an empty list to store the flattened result flat_list = [] # Define a helper function to handle recursion def _flatten(sub_list): for item in sub_list: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Create a function that takes a list of strings and returns a new list containing only the strings that can be rearranged to form palindromes. A palindrome is a word that reads the same forwards and backwards. Examples: ```python can_form_palindromes([\\"civic\\", \\"ivic\\", \\"deed\\", \\"car\\", \\"madam\\", \\"hello\\"]) == [\\"civic\\", \\"deed\\", \\"madam\\"] can_form_palindromes([\\"aaa\\", \\"bbbb\\", \\"cc\\", \\"abcd\\"]) == [\\"aaa\\", \\"bbbb\\", \\"cc\\"] can_form_palindromes([\\"aabbcc\\", \\"abc\\", \\"xyz\\", \\"noon\\", \\"level\\"]) == [\\"aabbcc\\", \\"noon\\", \\"level\\"] can_form_palindromes([\\"racecar\\", \\"palindrome\\", \\"radar\\", \\"refer\\", \\"stats\\"]) == [\\"racecar\\", \\"radar\\", \\"refer\\", \\"stats\\"] ```","solution":"from collections import Counter def can_form_palindromes(words): Takes a list of strings and returns a new list containing only the strings that can be rearranged to form palindromes. result = [] for word in words: counts = Counter(word) odd_count = sum(1 for count in counts.values() if count % 2 != 0) if odd_count <= 1: result.append(word) return result"},{"question":"Given a string s that contains only digits (0-9), remove all leading zeros of the string and return the resultant string. If the string is composed entirely of zeros, return a single \\"0\\". Example 1: Input: \\"000123\\" Output: \\"123\\" Example 2: Input: \\"0000\\" Output: \\"0\\" Example 3: Input: \\"100200\\" Output: \\"100200\\" Example 4: Input: \\"0012300450067\\" Output: \\"12300450067\\" Note: - 1 <= s.length <= 100000 - The given string contains only digits (0-9).","solution":"def remove_leading_zeros(s): Removes all leading zeros from the string s. If the string is composed entirely of zeros, return a single \\"0\\". :param s: str - A string that contains only digits (0-9) :return: str - Resultant string with leading zeros removed stripped_string = s.lstrip(\'0\') return stripped_string if stripped_string else \'0\'"},{"question":"=====Class Descriptions===== You are given a class definition of `Library` that manages a list of books with their titles and authors. The Library class has the following methods: - `__init__()`: Initializes an empty list of books. - `add_book(title, author)`: Adds a book with a given title and author to the list. - `get_books_by_author(author)`: Returns a list of all titles by the given author from the list. =====Example===== >>> library = Library() >>> library.add_book(\'To Kill a Mockingbird\', \'Harper Lee\') >>> library.add_book(\'1984\', \'George Orwell\') >>> library.add_book(\'Animal Farm\', \'George Orwell\') >>> print(library.get_books_by_author(\'George Orwell\')) [\'1984\', \'Animal Farm\'] =====Problem Statement===== Implement the Library class as described above. Focus on the correct implementation of the methods to manage the list of books efficiently. =====Input Format===== You will not need to handle any input directly. Instead, you should focus on writing the class and its methods correctly. =====Constraints===== - Title and author names are strings with a maximum length of 100 characters. - Book titles and author names are case-sensitive. =====Output Format===== You will not need to handle any output directly. Instead, your class methods should perform the required operations correctly and return the appropriate results when necessary.","solution":"class Library: def __init__(self): Initializes an empty list of books. self.books = [] def add_book(self, title, author): Adds a book with the given title and author to the list. :param title: str, the title of the book :param author: str, the author of the book self.books.append({\'title\': title, \'author\': author}) def get_books_by_author(self, author): Returns a list of all titles by the given author from the list. :param author: str, the author to lookup :return: list of titles by the given author return [book[\'title\'] for book in self.books if book[\'author\'] == author]"},{"question":"=====Problem Statement===== Write a function that takes a list of integers and returns the largest sum of any contiguous subarray within the list. For example, for the list `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum which is `6`. =====Input Format===== A single list of integers. =====Constraints===== - The length of the list will be between 1 and 10^5. - Each integer in the list will be between -10^4 and 10^4. =====Output Format===== An integer representing the largest sum of any contiguous subarray within the given list.","solution":"def max_subarray_sum(nums): Returns the largest sum of any contiguous subarray within the list. max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function named `bouncer_count` that takes in a list of tuples representing people trying to enter a club. Each tuple contains a name (string) and an age (integer). The function should return an integer representing the number of people denied entry based on the following rules: 1. Only people aged 21 or older are allowed entry. 2. If a person has the same name as someone already inside, they are denied entry regardless of age. 3. Nicknames are defined as strings that can match the first 3 letters of another name. For instance, \\"Alex\\" and \\"Alexander\\" are considered the same person. For example: ``` bouncer_count([(\\"Alex\\", 22), (\\"Bob\\", 20), (\\"Alice\\", 25), (\\"Alexander\\", 21), (\\"Alicia\\", 22)]) ``` This should return `3` because: - \\"Bob\\" is denied for being underage. - \\"Alexander\\" is denied because \\"Alex\\" is already inside. - \\"Alicia\\" is denied because \\"Alice\\" is already inside. The function should be case-insensitive when comparing names and nicknames. Note: You may assume that names have at least 3 characters. ```python def bouncer_count(people): allowed_names = set() denied_count = 0 for name, age in people: name_lower = name.lower() nickname = name_lower[:3] if age < 21 or any(name.startswith(nickname) for name in allowed_names): denied_count += 1 else: allowed_names.add(name_lower) return denied_count ```","solution":"def bouncer_count(people): Return the number of people denied entry based on age and name/nickname rules. allowed_names = set() denied_count = 0 for name, age in people: name_lower = name.lower() nickname = name_lower[:3] if age < 21 or any(existing_name.startswith(nickname) for existing_name in allowed_names): denied_count += 1 else: allowed_names.add(name_lower) return denied_count"},{"question":"Write a function that takes an integer `n` and returns the sum of all unique prime factors of `n`. Prime factors are the prime numbers that divide `n` without leaving a remainder. For example, the number 28 has the prime factors 2 and 7, so the function should return 9 (2+7). If the input number is 1 or less, the function should return 0. Happy Coding!","solution":"def sum_of_unique_prime_factors(n): Returns the sum of all unique prime factors of n. if n <= 1: return 0 prime_factors = set() divisor = 2 while n > 1: while n % divisor == 0: prime_factors.add(divisor) n //= divisor divisor += 1 if divisor * divisor > n and n > 1: prime_factors.add(n) break return sum(prime_factors)"},{"question":"Design a function `longest_unique_substring(s)` that takes a string `s` and returns the longest substring without repeating characters. The function should return the substring itself and not its length. Examples: ```python longest_unique_substring(\\"abcabcbb\\") == \\"abc\\" longest_unique_substring(\\"bbbbb\\") == \\"b\\" longest_unique_substring(\\"pwwkew\\") == \\"wke\\" longest_unique_substring(\\"dvdf\\") == \\"vdf\\" ``` Features of the random tests for `longest_unique_substring(s)`: ``` number of Tests = 100 strings consist of ASCII characters between 32 (space) and 126 (tilde) length of the string `s` can go up to 1000 characters ``` You do not have to check the input, the string `s` will always contain at least one character. Avoid importing additional libraries or modules. Happy coding!","solution":"def longest_unique_substring(s): Function to find the longest substring without repeating characters. Parameters: s (str): Input string Returns: str: Longest substring without repeating characters n = len(s) if n == 0: return \\"\\" start, max_len = 0, 0 longest = \\"\\" used_chars = {} for i in range(n): if s[i] in used_chars and start <= used_chars[s[i]]: start = used_chars[s[i]] + 1 else: if i - start + 1 > max_len: max_len = i - start + 1 longest = s[start:i+1] used_chars[s[i]] = i return longest"},{"question":"Write a function that takes a list of integers and a target sum. The function should return all unique pairs of integers from the list that add up to the target sum. Each pair should be sorted in ascending order, and the list of pairs should be sorted lexicographically. For example, given the list: ``` [1, 2, -2, 0, -1, 1, 2] ``` and the target sum: ``` 0 ``` the output should be: ``` [(-2, 2), (-1, 1)] ``` The function should handle lists with both positive and negative integers, and should not count the same pair more than once. Function signature: `def find_pairs(lst: List[int], target: int) -> List[Tuple[int, int]]`","solution":"from typing import List, Tuple def find_pairs(lst: List[int], target: int) -> List[Tuple[int, int]]: Returns all unique pairs of integers from the list that add up to the target sum. Each pair is sorted in ascending order, and the list of pairs is sorted lexicographically. seen = set() output = set() for number in lst: needed = target - number if needed in seen: pair = tuple(sorted((number, needed))) output.add(pair) seen.add(number) return sorted(output)"},{"question":"You are tasked with cracking a safe lock by finding a sequence of movements using a combination lock. The lock has digits from 0 to 9 and you can rotate each digit to increase (+1) or decrease (-1) its value, wrapping around if necessary (e.g., decreasing 0 results in 9 and increasing 9 results in 0). You are given a start sequence and a target sequence, and need to determine the minimum number of moves required to unlock the safe. If the safety lock is already at the target sequence, return 0. # Function Signature ```python def min_moves_to_unlock(start_sequence: str, target_sequence: str) -> int: ``` # Input/Output Example **Example 1:** ```python start_sequence = \'1234\' target_sequence = \'5678\' min_moves_to_unlock(start_sequence, target_sequence) ``` **Output:** ``` 16 ``` **Example 2:** ```python start_sequence = \'0000\' target_sequence = \'9999\' min_moves_to_unlock(start_sequence, target_sequence) ``` **Output:** ``` 4 ``` # Constraints: - Both `start_sequence` and `target_sequence` are of same length. - Each sequence contains only digits (0-9). - 1 ≤ length of `start_sequence` ≤ 1000 # Explanation of Example 1: - Change 1 to 5, which can be achieved in 4 moves (1 -> 2 -> 3 -> 4 -> 5). - Change 2 to 6, which can be achieved in 4 moves (2 -> 3 -> 4 -> 5 -> 6). - Change 3 to 7, which can be achieved in 4 moves (3 -> 4 -> 5 -> 6 -> 7). - Change 4 to 8, which can be achieved in 4 moves (4 -> 5 -> 6 -> 7 -> 8). - Thus, total moves = 4 + 4 + 4 + 4 = 16. # Explanation of Example 2: - Change 0 to 9, which can be achieved in 1 move (0 -> 9). - This operation is the same for all digits. - Thus, total moves = 1 + 1 + 1 + 1 = 4.","solution":"def min_moves_to_unlock(start_sequence: str, target_sequence: str) -> int: total_moves = 0 for s, t in zip(start_sequence, target_sequence): s_digit = int(s) t_digit = int(t) diff = abs(s_digit - t_digit) total_moves += min(diff, 10 - diff) return total_moves"},{"question":"Calculate the number of islands in a given binary matrix. An island consists of 1s (representing land) connected horizontally or vertically (not diagonally). The matrix is surrounded by water (0s), and it is guaranteed that the borders of the matrix are all water. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains two integers N and M denoting the number of rows and columns in the matrix, respectively. Each of the next N lines contains M integers (0s or 1s) with no space between them. -----Output----- For each test case, output a single line containing one integer — the number of islands in the matrix. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 50 - The input matrix is surrounded by 0\'s. -----Example----- Input: 2 4 5 11110 11010 11000 00000 4 4 1100 1100 0010 0000 Output: 1 2 -----Explanation----- Test case 1. We have a matrix: 11110 11010 11000 00000 There is a single island in the matrix. Test case 2. We have a matrix: 1100 1100 0010 0000 There are two islands in this matrix. The first island is in the top-left part, and the second island is in the third row.","solution":"def num_islands(matrix): def dfs(i, j): if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or matrix[i][j] == \'0\': return matrix[i][j] = \'0\' dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) if not matrix: return 0 island_count = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): if matrix[i][j] == \'1\': island_count += 1 dfs(i, j) return island_count def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) idx = 1 results = [] for _ in range(T): N, M = map(int, input_lines[idx].split()) matrix = [list(input_lines[idx + i + 1]) for i in range(N)] results.append(str(num_islands(matrix))) idx += N + 1 return \\"n\\".join(results)"},{"question":"Chef wants to conduct a programming contest and he needs to prepare a problem set with a variety of difficulty levels. He wants to ensure that the order of problems in the set adheres to a specific criteria. The problems are arranged in a sequence of difficulty levels, and Chef has the following requirements: 1. The first problem should have the smallest difficulty level. 2. The last problem should have the largest difficulty level. 3. Each intermediate problem should have a difficulty level greater than or equal to the previous problem\'s difficulty level and less than or equal to the next problem\'s difficulty level. Given is an array of integers where each integer denotes the difficulty level of a problem. Your task is to determine whether it is possible to form such a sequence of problems. -----Input----- The first line of the input contains an integer, n, the number of problems (2 ≤ n ≤ 2 * 105). The second line contains n space-separated integers denoting the difficulty levels of the problems (1 ≤ difficulty ≤ 109). -----Output----- If it is possible to arrange the problems according to Chef\'s requirements, print \\"YES\\". Otherwise, print \\"NO\\". -----Example----- Input: 5 1 3 2 4 5 Output: YES Explanation: The sequence {1, 2, 3, 4, 5} can be rearranged to {1, 2, 3, 4, 5} which satisfies all the conditions mentioned. -----Example----- Input: 4 5 3 4 2 Output: NO Explanation: The difficulty level 5 cannot be placed at the first position since it needs to be the largest. Similarly, difficulty level 2 cannot be placed at the last position since it needs to be the smallest in an ascending order. -----Constraints----- - 2 ≤ n ≤ 2 * 105 - 1 ≤ difficulty ≤ 109","solution":"def can_form_sequence(difficulties): Determines if it is possible to arrange the problems to match the criteria: - The first problem should have the smallest difficulty level. - The last problem should have the largest difficulty level. - Each intermediate problem should have a difficulty level greater than or equal to the previous problem\'s difficulty level and less than or equal to the next problem\'s difficulty level. # Finding the minimum and maximum difficulty level min_difficulty = min(difficulties) max_difficulty = max(difficulties) # Check if the minimum and maximum difficulties are at the start and end, respectively return difficulties[0] == min_difficulty and difficulties[-1] == max_difficulty"},{"question":"Task Write a function named `findMostFrequentCharacter` that accepts a string as its parameter. The function should return the character that appears the most frequently in the string. In case of a tie, return the character that appears first in the string. Make sure to consider all characters including punctuation and spaces, and handle both uppercase and lowercase as distinct characters. Input * A single string parameter, which may consist of a mix of letters, digits, spaces, and punctuation. For example, given the input string: `\\"hello world!\\"`, the function should return `\\"l\\"` (because `l` appears 3 times, more than any other character).","solution":"def findMostFrequentCharacter(s): Returns the character that appears most frequently in the string. In case of a tie, returns the character that appears first in the string. :param s: A string which may consist of letters, digits, spaces, and punctuation. :return: The character that appears the most frequently. if not s: return None frequency = {} max_count = 0 most_frequent_char = s[0] for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 if frequency[char] > max_count: max_count = frequency[char] most_frequent_char = char elif frequency[char] == max_count: # tie case, return the char that appears first which is already stored in most_frequent_char continue return most_frequent_char"},{"question":"Problem Statement You have been hired by a company that builds automatic light control systems for smart homes. One of their upcoming products is a lighting system that changes the color of the lights dynamically based on specific rules. Your task is to implement a function that helps determine the color of the light at any given minute based on the time of the day. # Detailed Requirements The lights will follow these rules: - From 6:00 AM to 6:59 PM, the lights will be \\"blue\\". - From 7:00 PM to 9:59 PM, the lights will be \\"red\\". - From 10:00 PM to 5:59 AM, the lights will be \\"green\\". # Your Task Write a function `getLightColor` that takes a single integer parameter representing the time in minutes since midnight and returns the color of the light based on the rules above. Midnight is considered to be 0 minutes. # Examples - `getLightColor(360)` should return `\\"blue\\"` because 360 minutes since midnight corresponds to 6:00 AM. - `getLightColor(1200)` should return `\\"blue\\"` because 1200 minutes since midnight corresponds to 8:00 PM. - `getLightColor(1380)` should return `\\"green\\"` because 1380 minutes since midnight corresponds to 11:00 PM. - `getLightColor(300)` should return `\\"green\\"` because 300 minutes since midnight corresponds to 5:00 AM. # Constraints - 0 ≤ `minutes` < 1440 # Function Signature ```python def getLightColor(minutes: int) -> str: pass ``` # Notes - Each test case represents a different time of day expressed as the number of minutes since midnight. - Make sure to handle edge cases, such as transition times exactly at 6:00 AM, 7:00 PM, and 10:00 PM.","solution":"def getLightColor(minutes: int) -> str: Determines the color of the light based on the number of minutes since midnight. :param minutes: int - The number of minutes since midnight :return: str - The color of the light (\\"blue\\", \\"red\\", or \\"green\\") if 360 <= minutes < 1140: # 6:00 AM to 6:59 PM return \\"blue\\" elif 1140 <= minutes < 1320: # 7:00 PM to 9:59 PM return \\"red\\" else: # 10:00 PM to 5:59 AM return \\"green\\""},{"question":"You are given an array of strings words where each word consists of lowercase English letters. The task is to group all anagrams together. An anagram is a word formed by rearranging the letters of another word. Each group of anagrams should be represented as a list of strings. Return the list of all the anagram groups without organizing the groups in any particular order. Example 1: Input: words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\",\\"tea\\",\\"ate\\"], [\\"tan\\",\\"nat\\"], [\\"bat\\"]] Example 2: Input: words = [\\"\\"] Output: [[\\"\\"]] Example 3: Input: words = [\\"a\\"] Output: [[\\"a\\"]] Example 4: Input: words = [\\"ab\\", \\"ba\\", \\"abc\\", \\"cba\\", \\"bca\\", \\"cab\\", \\"a\\"] Output: [[\\"ab\\",\\"ba\\"], [\\"abc\\",\\"cba\\",\\"bca\\",\\"cab\\"], [\\"a\\"]] Constraints: 1. 1 <= words.length <= 10^4 2. 0 <= words[i].length <= 100 3. words[i] consists of lowercase English letters.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from the given list of words. Args: words: List[str] - List of words Returns: List[List[str]] - List of groups of anagrams anagram_map = defaultdict(list) for word in words: # Create a sorted tuple of the word\'s characters key = tuple(sorted(word)) anagram_map[key].append(word) return list(anagram_map.values())"},{"question":"Given an array of N integers, you are required to process Q queries. In each query, you are given two integers L and R (1-based index), and you need to calculate the number of distinct elements in the subarray A[L..R]. -----Input----- - The first line of the input contains two integers N and Q, denoting the number of elements in the array and the number of queries, respectively. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. - Each of the following Q lines contains two space-separated integers L and R, representing a query. -----Output----- For each query, print a single integer ― the number of distinct elements in the subarray A[L..R]. -----Constraints----- - 1 le N le 1000 - 1 le Q le 1000 - 1 le L le R le N - 1 le A_i le 10^5 for each valid i ------Example Input------ 5 3 1 2 1 3 2 1 3 2 4 1 5 -----Example Output----- 2 3 3 -----Explanation----- Example case 1: The subarray is (1, 2, 1). Distinct elements are 1 and 2. Example case 2: The subarray is (2, 1, 3). Distinct elements are 2, 1, and 3. Example case 3: The subarray is (1, 2, 1, 3, 2). Distinct elements are 1, 2, and 3.","solution":"def count_distinct_in_subarray(arr, queries): Returns the number of distinct elements in the subarray arr[L..R] for each [L, R] pair in queries. :param arr: List[int] - The input array :param queries: List[Tuple[int, int]] - The list of queries where each query is a tuple (L, R) :return: List[int] - The list with count of distinct elements for each query distinct_counts = [] for L, R in queries: subarray = arr[L-1:R] distinct_counts.append(len(set(subarray))) return distinct_counts"},{"question":"A city is organizing a series of culture festival events. Each event can be attended by kids of different age groups. The city council wants to ensure that the maximum number of kids can attend the events over a period of time without any event having age conflicts. Given a list of n events, each event i has a starting age a_i and an ending age b_i (inclusive). Two events have an age conflict if their age ranges overlap, i.e., if a_k ≤ b_j and a_j ≤ b_k for any events j and k. Your task is to determine the maximum number of non-conflicting events that can be attended by the kids. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of events. Each of the next n lines contains two integers a_i and b_i (1 ≤ a_i ≤ b_i ≤ 10^9) representing the age range for the i-th event. -----Output----- Output a single integer, the maximum number of non-conflicting events that the kids can attend. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 10 2 9 11 15 16 20 Output 3 Input 5 1 2 3 4 5 6 1 5 6 7 Output 3","solution":"def max_non_conflicting_events(events): Determines the maximum number of non-conflicting events that can be attended by the kids. :param events: List of tuples representing the events with (start_age, end_age) :return: Maximum number of non-conflicting events # Sort events by their end age primarily, and start age secondarily events.sort(key=lambda x: (x[1], x[0])) count = 0 last_end = -1 for start, end in events: if start > last_end: count += 1 last_end = end return count"},{"question":"Todd works at a software company, and he is responsible for optimizing the company\'s applications. He has identified a recurring problem involving the checking of balanced parentheses. He decided to create a function that takes a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and it should determine if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. Todd has asked for your help to write a function that solves this problem. -----Input----- The input consists of a single integer T (1 leq T leq 10^3), the number of test cases. The following T lines each contains a single string s (1 leq |s| leq 10^4), the string of parentheses. -----Output----- For each test case, output \\"Yes\\" if the string is valid, otherwise output \\"No\\". You may print every letter in \\"Yes\\" and \\"No\\" in any case you want (so, for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\", and \\"YES\\" will all be recognized as positive answer). -----Example----- Input 6 () ()[]{} (] ([)] {[()]} {{[[(())]]}} Output Yes Yes No No Yes Yes -----Note----- In the first example, the string \\"()” is valid since each open bracket has a corresponding closing bracket. In the second example, the string \\"()[]{}” is valid as it contains three sets of correctly matched open and close brackets. In the third example, the string \\"(]\\" is not valid because the open bracket \'(\' is not closed by the corresponding bracket type. In the fourth example, the string \\"([)]” is not valid because the open brackets are not closed in the correct order. In the fifth example, the string \\"{[()]}\\" is valid as it contains correctly nested brackets. In the sixth example, the string \\"{{[[(())]]}}\\" is valid as it contains multiple layers of correctly matched and nested brackets.","solution":"def is_valid_parentheses(T, test_cases): def is_valid(s): stack = [] matching = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching: top_element = stack.pop() if stack else \'#\' if matching[char] != top_element: return False else: stack.append(char) return not stack results = [] for s in test_cases: if is_valid(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given an array called `ratings` which contains N integers representing the ratings of students. You are supposed to assign candies to each student such that: 1. Each student must have at least one candy. 2. Students with a higher rating get more candies than their neighbors. Determine the minimum number of candies you need to distribute in order to meet the above requirements. Function signature: ```python def distribute_candies(ratings: List[int]) -> int: ``` **Input:** - The function accepts a single argument, a list `ratings` of length `N` (2 ≤ N ≤ 10^5). **Output:** - The function should return an integer representing the minimum number of candies required. **Example:** - Input: `[1, 0, 2]` - Output: `5` Explanation: - The optimal distribution is [2, 1, 2] with a total of 5 candies. - Input: `[1, 2, 2]` - Output: `4` Explanation: - The optimal distribution is [1, 2, 1] with a total of 4 candies. Note that the second student has a rating equal to the third student, so they get the same number of candies, which satisfies the requirements. Any other distribution would require more candies.","solution":"from typing import List def distribute_candies(ratings: List[int]) -> int: if not ratings: return 0 # Step 1: Initialize candies array with 1 for each student n = len(ratings) candies = [1] * n # Step 2: Left to right pass - ensure right-rated higher gets more candies than left-rated for i in range(1, n): if ratings[i] > ratings[i - 1]: candies[i] = candies[i - 1] + 1 # Step 3: Right to left pass - ensure left-rated higher gets more candies than right-rated for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1) # The minimum number of candies required is the sum of the candies array return sum(candies)"},{"question":"You are given a network of pipes represented as an undirected graph with `n` nodes and `m` edges. Each edge has a weight representing the capacity of the pipe. Water flows from node `a` to node `b` through the network. Your task is to determine the maximum flow from node `a` to node `b` using the Edmonds-Karp algorithm, which is an implementation of the Ford-Fulkerson method for computing the maximum flow in a flow network. Implement a function `max_flow(n, m, edges, a, b)` that takes the following parameters: - `n`: an integer representing the number of nodes. - `m`: an integer representing the number of edges. - `edges`: a list of tuples `(u, v, w)` where `u` and `v` are nodes connected by a bidirectional pipe with weight `w` (capacity of the pipe). - `a`: the source node where water starts. - `b`: the sink node where water ends. Return the maximum flow from node `a` to node `b`. # Input: - The first line of input contains two integers `n` and `m`. - The next `m` lines each contain three integers `u`, `v`, and `w` denoting that there is a pipe between node `u` and node `v` with capacity `w`. - The last line contains two integers `a` and `b`, the source and sink nodes respectively. # Output: - Output a single integer, the maximum water flow from node `a` to node `b`. # Constraints: - `1 <= n <= 500` - `1 <= m <= 10^4` - `1 <= w <= 10^5` - `1 <= u, v, a, b <= n` - `u != v` # Example Input: ``` 4 5 1 2 100 1 3 100 2 3 1 2 4 100 3 4 100 1 4 ``` # Example Output: ``` 200 ``` # Explanation: In the given example, the nodes and pipes form the following network: ``` (100) (100) 1 ------ 2 ------ 4 / ^ (100) (1) (100) / / 3 ----- ``` The maximum capacity path from node 1 to node 4 is via the paths `1-2-4` and `1-3-4`, each contributing a flow of 100 units. The total maximum flow from node 1 to node 4 is 200 units.","solution":"from collections import deque, defaultdict def bfs(capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: current = queue.popleft() for neighbor in capacity[current]: if neighbor not in visited and capacity[current][neighbor] > 0: parent[neighbor] = current if neighbor == sink: return True queue.append(neighbor) visited.add(neighbor) return False def edmonds_karp(capacity, source, sink): parent = {} max_flow = 0 while bfs(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_flow(n, m, edges, a, b): capacity = defaultdict(lambda: defaultdict(int)) for u, v, w in edges: capacity[u][v] += w capacity[v][u] += w return edmonds_karp(capacity, a, b)"},{"question":"You\'re given a list of integers. Your task is to sort the list in such a way that all the odd numbers come before all the even numbers while maintaining their relative order of appearance in the original list. Write a function `odd_even_sort` that takes a list of integers as input and returns a new list with the odd numbers at the beginning followed by the even numbers, preserving their relative order. # Function signature `def odd_even_sort(arr: List[int]) -> List[int]:` # Input - A list of integers, `arr`. (0 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) # Output - A list of integers sorted such that all odd numbers are at the beginning and all even numbers are at the end, maintaining their relative order. # Example ```python odd_even_sort([3, 1, 2, 4, 5]) -> [3, 1, 5, 2, 4] odd_even_sort([0, 2, 1, 3, 4]) -> [1, 3, 0, 2, 4] odd_even_sort([6, 8, 5, 7, 10]) -> [5, 7, 6, 8, 10] odd_even_sort([]) -> [] ``` # Note - Make sure the solution is efficient since the length of the list can be up to 100,000.","solution":"from typing import List def odd_even_sort(arr: List[int]) -> List[int]: Returns a new list with all odd numbers first and all even numbers last, maintaining their relative order of appearance in the original list. odds = [x for x in arr if x % 2 != 0] evens = [x for x in arr if x % 2 == 0] return odds + evens"},{"question":"A warehouse manager needs to keep track of the quantities of various items available in their warehouse. The manager has a list of items with their corresponding quantities. Occasionally, they receive restocks for some items, which they need to add to the current quantities. Write a program that manages the inventory updates and answers queries about the current quantity of specific items. -----Input:----- - The first line contains an integer N which denotes the number of different items in the warehouse. - The next N lines contain two space-separated values I_i and Q_i, where I_i is the item ID (a unique integer) and Q_i is the quantity of that item. - The next line contains an integer M which denotes the number of restock operations. - The next M lines contain two space-separated values I_j and R_j, where I_j is the item ID and R_j is the restock quantity. If an item ID does not exist in the initial list, it should be added to the warehouse with the restock quantity. - The next line contains an integer K which denotes the number of queries. - The next K lines contain a single integer Q_p, the item ID for which the current quantity is being queried. -----Output:----- - For each query, print the current quantity of the item with the queried item ID. If an item ID does not exist in the inventory, print 0. -----Constraints:----- - 1 leq N leq 1000 - 1 leq I_i, I_j, Q_p leq 10^5 - 1 leq Q_i, R_j leq 10^9 - 1 leq M, K leq 1000 -----Sample Input:----- 3 101 20 102 15 103 40 2 101 30 104 50 3 101 104 105 -----Sample Output:----- 50 50 0 -----Explanation:----- - Initially, item 101 has a quantity of 20, item 102 has a quantity of 15, and item 103 has a quantity of 40. - After the restocks, item 101’s quantity becomes 20+30=50, and item 104 is added with a quantity of 50. - For the queries, item 101’s updated quantity is 50, item 104’s updated quantity is 50, and item 105 does not exist in the inventory, so the output is 0.","solution":"def manage_inventory(N, initial_items, M, restock_operations, K, queries): Manages inventory updates and answers queries about the current quantity of specific items. Parameters: N (int): number of different items in the warehouse initially initial_items (list of tuples): (item ID, quantity) for the initial items M (int): number of restock operations restock_operations (list of tuples): (item ID, restock quantity) for the restock operations K (int): number of queries queries (list of int): item IDs for which the current quantity is being queried Returns: list of int: current quantities of the queried item IDs inventory = {} # Add initial items to inventory for item_id, quantity in initial_items: inventory[item_id] = quantity # Process restock operations for item_id, restock_quantity in restock_operations: if item_id in inventory: inventory[item_id] += restock_quantity else: inventory[item_id] = restock_quantity # Answer queries results = [] for query in queries: results.append(inventory.get(query, 0)) return results"},{"question":"You are given a string consisting of lowercase alphabets and spaces. Your task is to find the most frequent word in the string. If two or more words have the same frequency, return the word that appears first in the string. input // \\"the quick brown fox jumps over the lazy dog the quick fox\\" output // \\"the\\" input // \\"hello world hello\\" output // \\"hello\\" input // \\"a a a b b b b c c\\" output // \\"b\\" input // \\"coding coding coding code code\\" output // \\"coding\\" input // \\"apple banana apple banana banana\\" output // \\"banana\\"","solution":"def most_frequent_word(s): Returns the most frequent word in the string s. If two words have the same frequency, it returns the first appearing one. :param s: Input string consisting of lowercase alphabets and spaces :return: The most frequent word in the string words = s.split() frequency = {} first_occurrences = {} for index, word in enumerate(words): if word in frequency: frequency[word] += 1 else: frequency[word] = 1 first_occurrences[word] = index max_freq = 0 most_frequent = None for word, freq in frequency.items(): if freq > max_freq or (freq == max_freq and first_occurrences[word] < first_occurrences[most_frequent]): max_freq = freq most_frequent = word return most_frequent"},{"question":"Write a function called `normalize_date` that takes a date string as input. The date string could be in any one of the following formats: 1. \\"YYYY/MM/DD\\" 2. \\"DD-MM-YYYY\\" 3. \\"MM.DD.YYYY\\" Your task is to convert the given date string to the format \\"YYYY-MM-DD\\". If the date string is already in the correct format, return it as is. Examples: ``` normalize_date(\\"2023/03/15\\") -> \\"2023-03-15\\" normalize_date(\\"15-03-2023\\") -> \\"2023-03-15\\" normalize_date(\\"03.15.2023\\") -> \\"2023-03-15\\" normalize_date(\\"2023-03-15\\") -> \\"2023-03-15\\" ``` Assume all input dates are valid and represent existing days.","solution":"def normalize_date(date_str): Converts date string to the format \\"YYYY-MM-DD\\". The input date string can be in any one of the formats: \\"YYYY/MM/DD\\", \\"DD-MM-YYYY\\", \\"MM.DD.YYYY\\". if \'/\' in date_str: # Format is \\"YYYY/MM/DD\\" year, month, day = date_str.split(\'/\') return f\\"{year}-{month}-{day}\\" elif \'-\' in date_str: parts = date_str.split(\'-\') if len(parts[0]) == 4: # Format is already \\"YYYY-MM-DD\\" return date_str else: # Format is \\"DD-MM-YYYY\\" day, month, year = parts return f\\"{year}-{month}-{day}\\" elif \'.\' in date_str: # Format is \\"MM.DD.YYYY\\" month, day, year = date_str.split(\'.\') return f\\"{year}-{month}-{day}\\" # Example usage: # print(normalize_date(\\"2023/03/15\\")) # Output: \\"2023-03-15\\" # print(normalize_date(\\"15-03-2023\\")) # Output: \\"2023-03-15\\" # print(normalize_date(\\"03.15.2023\\")) # Output: \\"2023-03-15\\" # print(normalize_date(\\"2023-03-15\\")) # Output: \\"2023-03-15\\""},{"question":"Write a program that takes a positive integer N and generates a spiral matrix of size N x N filled with integers from 1 to N*N in a counter-clockwise direction starting from the top left corner. A spiral matrix of size 3 would be: ``` 1 2 3 8 9 4 7 6 5 ``` Input A single integer N which represents the size of the matrix. Output N lines with each line containing N integers. Each integer should be right-aligned in a field of width 3 to maintain proper formatting. Example Input: ``` 3 ``` Output: ``` 1 2 3 8 9 4 7 6 5 ``` If N is 0, return an empty string.","solution":"def generate_spiral_matrix(N): if N == 0: return [] spiral_matrix = [[0] * N for _ in range(N)] x, y = 0, 0 dx, dy = 0, 1 for i in range(1, N * N + 1): spiral_matrix[x][y] = i if not (0 <= x + dx < N and 0 <= y + dy < N and spiral_matrix[x + dx][y + dy] == 0): dx, dy = dy, -dx # Change direction counter-clockwise x += dx y += dy return spiral_matrix def print_spiral_matrix(matrix): result = \\"n\\".join([\\" \\".join([f\\"{num:3}\\" for num in row]) for row in matrix]) return result"},{"question":"# Task **_Given_** a number, **_Find if it is Palindromic Prime or not_**. ____ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * **_Number_** *passed is always* **_Positive_**. * **_Return_** *the result as* **_String_** ___ # Input >> Output Examples ``` palindromicPrime(131) ==> return \\"Palindromic Prime !!\\" ``` **_Explanation_**: * 131 is **_palindromic_** since **_131 reversed is 131_**. * 131 is also a **_prime number_**, since it has no divisors other than 1 and itself. Thus, the output is `\\"Palindromic Prime !!\\"` ___ ``` palindromicPrime(133) ==> return \\"Not !!\\" ``` **_Explanation_**: * 133 is **_not palindromic_** since **_133 reversed is 331_**. * 133 is also **_not a prime number_**, since it can be divided by **_7 and 19_**. Thus, the output is `\\"Not !!\\"` ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def palindromicPrime(n): Returns \\"Palindromic Prime !!\\" if n is both palindromic and prime, otherwise returns \\"Not !!\\". str_n = str(n) if str_n == str_n[::-1] and is_prime(n): return \\"Palindromic Prime !!\\" else: return \\"Not !!\\""},{"question":"You are given a string representing a simple arithmetic expression which consists of non-negative integers, and the operators \'+\', \'-\', \'*\', \'/\'. The operators follow standard order of operations: multiplication and division are performed before addition and subtraction. Your task is to evaluate the expression and return the result as an integer. For example: - For the input \\"3+2*2\\", the output should be 7. - For the input \\" 3/2\\", the output should be 1. - For the input \\" 3+5 / 2 \\", the output should be 5. Assumptions: - The given string is non-empty and contains only digits and the \'+\', \'-\', \'*\', \'/\' operators. - The integer division should truncate toward zero. - There\'s no exponentiation or parentheses. You are required to write a function to evaluate this expression. Function signature: ```python def evaluate_expression(expression: str) -> int: pass ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a simple arithmetic expression containing non-negative integers and the operators \'+\', \'-\', \'*\', \'/\' and returns the result as an integer. tokens = [] num = 0 sign = \'+\' expression = expression.replace(\\" \\", \\"\\") # Remove any whitespaces for i, char in enumerate(expression): if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if sign == \'+\': tokens.append(num) elif sign == \'-\': tokens.append(-num) elif sign == \'*\': tokens[-1] = tokens[-1] * num elif sign == \'/\': tokens[-1] = int(tokens[-1] / num) # Truncate towards zero sign = char num = 0 return sum(tokens)"},{"question":"Task Consider the problem of rotation of an NxN matrix, where N is a positive integer. When you rotate a matrix by 90 degrees, each element of the matrix is moved to its corresponding position in the rotated matrix. For example, rotating a 3x3 matrix by 90 degrees clockwise: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` will result in: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Task You are required to implement two functions: # Function 1: rotate_matrix_clockwise(matrix) This function should take a matrix (a list of lists) as an argument and return a new matrix that represents the input matrix rotated by 90 degrees clockwise. # Function 2: rotate_matrix_counterclockwise(matrix) This function should take a matrix (a list of lists) as an argument and return a new matrix that represents the input matrix rotated by 90 degrees counterclockwise. # Constraints - The matrix will always be square (NxN) and N will be at least 1. - The elements of the matrix will be integers. # Examples Rotating the following matrix by 90 degrees clockwise: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Rotating the following matrix by 90 degrees counterclockwise: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` should return: ``` [ [3, 6, 9], [2, 5, 8], [1, 4, 7] ] ```","solution":"def rotate_matrix_clockwise(matrix): Rotates a given NxN matrix by 90 degrees clockwise. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix def rotate_matrix_counterclockwise(matrix): Rotates a given NxN matrix by 90 degrees counterclockwise. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[N-1-j][i] = matrix[i][j] return rotated_matrix"},{"question":"`Prime Selection` You\'re given multiple requests for selecting prime numbers from a given list, and your task is to respond to each request efficiently. ---Input--- The input consists of multiple lines: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of elements in the list and the number of requests. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^5) — the elements of the list. - The next `q` lines each contain a single integer `k` (1 ≤ k ≤ 10^5), representing the `k`-th smallest prime number in the given list to be output. ---Output--- For each request, output the `k`-th smallest prime number in the list if it exists, otherwise output `-1`. ---Examples--- Input: 6 3 2 17 11 4 7 20 1 3 5 Output: 2 11 -1 Input: 5 2 1 5 3 9 6 2 1 Output: 3 5 **Note:** In the first example: - The primes in the list are [2, 7, 11, 17]. - For `k=1`, the output is 2. - For `k=3`, the output is 11. - For `k=5`, there is no fifth prime in the list, so the output is -1. In the second example: - The primes in the list are [3, 5]. - For `k=2`, the output is 5. - For `k=1`, the output is 3.","solution":"import bisect def sieve_of_eratosthenes(max_num): is_prime = [True] * (max_num + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return is_prime def prime_selection(n, q, elements, queries): max_element = max(elements) is_prime = sieve_of_eratosthenes(max_element) primes = sorted([x for x in elements if is_prime[x]]) results = [] for k in queries: if k <= len(primes): results.append(primes[k - 1]) else: results.append(-1) return results"},{"question":"A mysterious traveler has stumbled upon a magical garden. Amidst the verdant foliage and vibrant flowers, surreal voices echo with enigmatic math problems. One such voice whispers: \\"In this realm lies a special type of number known as the \'Frond Number\'. A Frond Number is defined by a unique property: the sum of the factorials of its digits equals the number itself. For instance: - 145 is a Frond Number because 1! + 4! + 5! equals 145. - 40585 is also a Frond Number because 4! + 0! + 5! + 8! + 5! equals 40585. Many of these numbers are hidden within the range from 1 to 100,000. Your task is to write a function that finds all Frond Numbers within a given range.\\" ```python def find_frond_numbers(start, end): # your code here # Example usage: # find_frond_numbers(1, 100000) # Output: [1, 2, 145, 40585] ``` The voice subsides, only to leave a deep curiosity in the traveler\'s heart. What lies in your quest is to unveil all Frond Numbers hidden within the specified range, for they hold secrets to the garden\'s true nature.","solution":"import math def is_frond_number(n): Check if a number is a Frond Number. A Frond Number is defined as a number for which the sum of the factorials of its digits equals the number itself. return n == sum(math.factorial(int(digit)) for digit in str(n)) def find_frond_numbers(start, end): Find all Frond Numbers between start and end inclusive. return [num for num in range(start, end + 1) if is_frond_number(num)] # Example usage: # find_frond_numbers(1, 100000) # Output: [1, 2, 145, 40585]"},{"question":"John is working on a new program that processes a long list of user IDs. Each user ID is a string of lowercase English letters. John needs to identify groups of user IDs that contain exactly the same set of characters, but not necessarily in the same order (i.e., anagrams). Your task is to help John by writing a program that will: 1. Read an integer n which indicates the number of user IDs. 2. Read the n user IDs. 3. Determine the number of unique groups of anagrams. Two user IDs belong to the same group if one of the IDs can be rearranged to form the other ID. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of user IDs. The next n lines each contain a single user ID consisting of lowercase English letters. Each user ID has a length of between 1 and 20 characters inclusive. -----Output----- Print a single integer — the number of unique groups of anagrams. -----Examples----- Input 6 abcd bcad dcba abdc xyz zyx Output 2 Input 5 abc bca cab ab ba Output 2 Input 3 aaa aa aaa Output 2 -----Note----- In the first test case, there are six user IDs. The first four user IDs (\\"abcd\\", \\"bcad\\", \\"dcba\\", \\"abdc\\") are all anagrams of each other and form one group. The last two user IDs (\\"xyz\\", \\"zyx\\") are anagrams of each other and form another group. So, the output is 2. In the second test case, the first three user IDs (\\"abc\\", \\"bca\\", \\"cab\\") are anagrams and form one group. The last two user IDs (\\"ab\\", \\"ba\\") are also anagrams and form another group. So, the output is 2. In the third test case, there are three user IDs. The first and last user IDs (\\"aaa\\", \\"aaa\\") are the same and thus anagrams. The second user ID \\"aa\\" is different from the other two. So, there are two anagram groups.","solution":"def count_anagram_groups(n, user_ids): Returns the number of unique groups of anagrams. anagram_dict = {} for user_id in user_ids: sorted_id = \'\'.join(sorted(user_id)) if sorted_id in anagram_dict: anagram_dict[sorted_id] += 1 else: anagram_dict[sorted_id] = 1 return len(anagram_dict)"},{"question":"Complete the function that accepts a list of integers, and returns a new list where each element is the product of all the integers in the original list except the element at the corresponding position. Examples ``` [1, 2, 3, 4] ==> [24, 12, 8, 6] [2, 3, 4, 5] ==> [60, 40, 30, 24] ``` # Note - You must solve the problem without using division. - Your solution should run in O(n) time complexity.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the integers in the original list except the element at the corresponding position. length = len(nums) answer = [1] * length prefix = 1 for i in range(length): answer[i] = prefix prefix *= nums[i] suffix = 1 for i in range(length - 1, -1, -1): answer[i] *= suffix suffix *= nums[i] return answer"},{"question":"Task ======= Write a function that encodes a given string using the Modified Run-Length Encoding (MRLE) technique. This technique represents consecutive occurrences of the same character by one instance of the character followed by the number of occurrences, only if the number of consecutive occurrences exceeds 1. Syntax/Info ======== The MRLE technique compresses strings by reducing the size of sequences. For example: - \\"aaabbc\\" becomes \\"a3b2c\\" - \\"abcd\\" remains \\"abcd\\" - \\"aabbcc\\" becomes \\"a2b2c2\\" Your function should take a string and return its Modified Run-Length Encoded form. Function Signature ======== ```python def mrle_encode(input_string: str) -> str: pass ``` Examples ======== ```python mrle_encode(\\"aaabbc\\") # returns \\"a3b2c\\" mrle_encode(\\"abcd\\") # returns \\"abcd\\" mrle_encode(\\"aabbcc\\") # returns \\"a2b2c2\\" mrle_encode(\\"a\\") # returns \\"a\\" mrle_encode(\\"aaaabbbbcc\\") # returns \\"a4b4c2\\" ``` Constraints ======== - The input string will only contain ASCII characters. - The input string can be empty, in which case the function should return an empty string. - The length of the input string will not exceed 10^5.","solution":"def mrle_encode(input_string: str) -> str: Encodes a given string using the Modified Run-Length Encoding (MRLE) technique. if not input_string: return \\"\\" encoded_str = \\"\\" current_char = input_string[0] count = 1 for char in input_string[1:]: if char == current_char: count += 1 else: if count > 1: encoded_str += f\\"{current_char}{count}\\" else: encoded_str += current_char current_char = char count = 1 # Handle the last set of characters if count > 1: encoded_str += f\\"{current_char}{count}\\" else: encoded_str += current_char return encoded_str"},{"question":"There is a string which contains digits from 0-9. Ramu wants to replace all the digits in the string with some other characters based on the following rules: 1. If the digit is an even number (0, 2, 4, 6, or 8), replace it with the character \'*\'. 2. If the digit is an odd number (1, 3, 5, 7, or 9), replace it with the character \'#\'. Write a function that takes a single string input and modifies it according to the above rules. -----Input:----- - The input contains a single string S containing digits from 0-9. -----Output:----- - Print the modified string after replacing digits as per the rules. -----Constraints----- - 1leq |S| leq 10^5 -----Sample Input:----- 1234567890 -----Sample Output:----- #*#*#*#*# Note: - The string only contains numeric digits. - Ensure your solution is efficient and can handle large input sizes.","solution":"def replace_digits(s): Replaces digits in the string with \'*\' for even numbers and \'#\' for odd numbers. Args: s (str): The input string containing digits. Returns: str: The modified string after replacing digits based on the rules. # Mapping function for easy replacement def replace(char): if char in \'02468\': return \'*\' else: return \'#\' # Using list comprehension for efficient string transformation return \'\'.join(replace(char) for char in s)"},{"question":"Write a function that can generate all possible strings of length `n` that can be formed using characters from a given string `s`. Each character in the string `s` can be used any number of times. The function should return the list of all possible strings in lexicographical order. **Function Signature:** ```python def generate_strings(s: str, n: int) -> list: ... ``` **Parameters:** - `s` (string): A string containing unique characters. - `n` (int): The length of the strings to generate. **Returns:** - list: A list containing all possible strings of length `n` formed using the characters from `s`. **Example:** ```python generate_strings(\\"ab\\", 2) ``` **Output:** ```python [\\"aa\\", \\"ab\\", \\"ba\\", \\"bb\\"] ``` **Example:** ```python generate_strings(\\"abc\\", 3) ``` **Output:** ```python [\\"aaa\\", \\"aab\\", \\"aac\\", \\"aba\\", \\"abb\\", \\"abc\\", \\"aca\\", \\"acb\\", \\"acc\\", \\"baa\\", \\"bab\\", \\"bac\\", \\"bba\\", \\"bbb\\", \\"bbc\\", \\"bca\\", \\"bcb\\", \\"bcc\\", \\"caa\\", \\"cab\\", \\"cac\\", \\"cba\\", \\"cbb\\", \\"cbc\\", \\"cca\\", \\"ccb\\", \\"ccc\\"] ``` **Notes:** - The function should handle input strings `s` of length up to 10. - The length `n` will not exceed 5.","solution":"from itertools import product def generate_strings(s: str, n: int) -> list: Generates all possible strings of length n that can be formed using characters from string s in lexicographical order. s = sorted(s) # Ensure the characters in s are sorted to get lexicographical order return [\'\'.join(p) for p in product(s, repeat=n)]"},{"question":"Implement a function that determines whether a given string containing only uppercase letters is a valid identifier in a hypothetical programming language. The rules for a valid identifier are as follows: 1. The identifier must start with an uppercase letter. 2. The identifier can only consist of uppercase letters and underscores (`_`). 3. No consecutive underscores are allowed. 4. The identifier cannot end with an underscore. 5. The length of the identifier must be between 1 and 20 characters, inclusive. Your task is to write the function `is_valid_identifier(identifier: str) -> bool` that checks if the given identifier meets all the above criteria and returns `True` if it does, `False` otherwise. Examples ```python is_valid_identifier(\\"HELLO_WORLD\\") # => True is_valid_identifier(\\"HELLO__WORLD\\") # => False (consecutive underscores) is_valid_identifier(\\"HELLO_WORLD_\\") # => False (ends with underscore) is_valid_identifier(\\"HELLO WORLD\\") # => False (contains space) is_valid_identifier(\\"HELLOWORLD123\\") # => False (contains numbers) is_valid_identifier(\\"H\\") # => True is_valid_identifier(\\"\\") # => False (length less than 1) is_valid_identifier(\\"A_VERY_LONG_IDENTIFIER_NAME\\") # => False (length more than 20) ``` Good Luck!","solution":"def is_valid_identifier(identifier: str) -> bool: Determines if the given identifier is valid based on specific rules. Parameters: identifier (str): The identifier string to check Returns: bool: True if the identifier is valid, False otherwise if len(identifier) < 1 or len(identifier) > 20: return False if not identifier[0].isupper(): return False if identifier[-1] == \'_\': return False if \'__\' in identifier: return False for char in identifier: if not (char.isupper() or char == \'_\'): return False return True"},{"question":"Implement a class `SlidingWindowMaximum` that provides functionality to find the maximum value in a sliding window of a given size over an array. The class should have the following methods: 1. `__init__(self, nums: List[int], k: int)`: Initialize the object with the array `nums` and the size of the sliding window `k`. 2. `maxSlidingWindow(self) -> List[int]`: Return a list of the maximum values in each sliding window of size `k` in the array `nums`. The sliding window moves from the left to the right of the array `nums`. # Example ```python # initialize with nums = [1,3,-1,-3,5,3,6,7] and k = 3 swm = SlidingWindowMaximum([1,3,-1,-3,5,3,6,7], 3) # get the maximums in the sliding windows assert swm.maxSlidingWindow() == [3, 3, 5, 5, 6, 7] # Explanation: # Window positions at each step and their maximum: # [1, 3, -1] -> 3 # [3, -1, -3] -> 3 # [-1, -3, 5] -> 5 # [-3, 5, 3] -> 5 # [5, 3, 6] -> 6 # [3, 6, 7] -> 7 ``` Note: You may assume `k` is always valid, i.e., `1 <= k <= len(nums)`.","solution":"from collections import deque from typing import List class SlidingWindowMaximum: def __init__(self, nums: List[int], k: int): self.nums = nums self.k = k def maxSlidingWindow(self) -> List[int]: result = [] dq = deque() # We will store indices here for i in range(len(self.nums)): # Remove elements not within the sliding window if dq and dq[0] < i - self.k + 1: dq.popleft() # Remove elements which are not required while dq and self.nums[dq[-1]] < self.nums[i]: dq.pop() # Add current element\'s index dq.append(i) # Start adding results to output list when we at least have one valid window if i >= self.k - 1: result.append(self.nums[dq[0]]) return result"},{"question":"# Task Write a function `findAnagrams`/`find_anagrams()` that takes in two parameters: - `word` - a string to find anagrams for. - `candidates` - a list of strings to be tested as anagrams. Your function should return a list of candidates that are anagrams of the `word`. An anagram is a rearrangement of the letters of a word to produce a new word. The new word must use all the original letters exactly once. For example, `\'listen\'` and `\'silent\'` are anagrams of each other, while `\'triangle\'` and `\'integral\'` are also anagrams. # Examples ```python find_anagrams(\'listen\', [\'enlists\', \'google\', \'inlets\', \'banana\']) # returns [\'inlets\'] find_anagrams(\'evil\', [\'vile\', \'live\', \'veil\', \'villain\']) # returns [\'vile\', \'live\', \'veil\'] ``` # Constraints - The function should be case-insensitive, meaning \'Listen\' and \'silent\' should be considered anagrams. - The input word and candidates will only contain alphabetic characters. - The word and all candidates will have a length of at least 1 and at most 100.","solution":"def find_anagrams(word, candidates): Returns a list of candidates that are anagrams of the input word. Parameters: word (str): The word to find anagrams for. candidates (list of str): A list of candidate words to check. Returns: list of str: A list of anagrams of the word from the candidates. # Normalize the word by making it lowercase and sorting its characters normalized_word = sorted(word.lower()) # Initialize an empty list to store the anagrams anagrams = [] # Iterate over each candidate to check if it is an anagram for candidate in candidates: # Normalize the candidate by making it lowercase and sorting its characters normalized_candidate = sorted(candidate.lower()) # If the normalized word and candidate are the same, then it\'s an anagram if normalized_word == normalized_candidate: anagrams.append(candidate) return anagrams"},{"question":"In a small town, there are n houses aligned in a row, and each house is assigned a certain amount of money. A thief is planning to rob the houses, but he cannot rob two consecutive houses, as it will alert the police. The thief wants to maximize the amount of money he can rob without triggering the alarms by robbing two consecutive houses. Help the thief determine the maximum amount of money he can rob. -----Input----- The first line contains an integer n (1 leq n leq 100,000): the number of houses in the town. The next line contains n integers m_1, m_2, ldots, m_n (0 leq m_i leq 1000): the amount of money in each house. -----Output----- Output one integer: the maximum amount of money the thief can rob without robbing any two consecutive houses. -----Examples----- Input 5 2 7 9 3 1 Output 12 Input 4 1 2 3 1 Output 4 -----Note----- For the first test, the optimal houses to rob are {2, 9, 1}. The total money is 2 + 9 + 1 = 12. For the second test, the optimal houses to rob are {1, 3}. The total money is 1 + 3 = 4.","solution":"def max_robbery(n, money): if n == 0: return 0 if n == 1: return money[0] if n == 2: return max(money[0], money[1]) dp = [0] * n dp[0] = money[0] dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"Write a function `longest_common_subsequence(str1, str2)` that returns the length of the longest subsequence common to both input strings `str1` and `str2`. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguously. Examples: longest_common_subsequence(\\"abcde\\", \\"ace\\") -> 3 # The longest common subsequence is \\"ace\\" longest_common_subsequence(\\"abc\\", \\"xyz\\") -> 0 # There is no common subsequence longest_common_subsequence(\\"abc\\", \\"abc\\") -> 3 # The longest common subsequence is \\"abc\\" Note: - `str1` and `str2` consist only of lowercase English letters. - The length of `str1` and `str2` will not exceed 1000 characters. Your task is to implement the function using dynamic programming techniques to ensure efficiency.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest subsequence common to both input strings str1 and str2. m = len(str1) n = len(str2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a function that calculates the maximum length of a sequence of unique characters from a given string. The function should return an integer representing the maximal number of unique consecutive characters. Your function should take a single argument: - input_string: a string representing the input The function should return an integer. # For example: Given the input string \\"abcabcbb\\", the function should return 3, as the longest sequence of unique characters is \\"abc\\". Given the input string \\"bbbbb\\", the function should return 1, as the longest sequence of unique characters is \\"b\\". Given the input string \\"pwwkew\\", the function should return 3, as the longest sequence of unique characters is \\"wke\\". calculate_max_unique_sequence(\\"abcabcbb\\") => 3 calculate_max_unique_sequence(\\"bbbbb\\") => 1 calculate_max_unique_sequence(\\"pwwkew\\") => 3","solution":"def calculate_max_unique_sequence(input_string): Returns the maximum length of a sequence of unique characters from the given string. char_index_map = {} max_length = 0 start = 0 for end, char in enumerate(input_string): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"=====Problem Statement===== You are given a list of integers representing the heights of buildings in a skyline. Your task is to determine the total number of \\"gaps\\" between consecutive buildings where the height difference is greater than a specified threshold. =====Input Format===== The first line contains two integers N and K, where N is the number of buildings and K is the height difference threshold. The second line contains N integers representing the heights of the buildings. =====Constraints===== 1 ≤ N ≤ 100 1 ≤ K ≤ 100 1 ≤ height of each building ≤ 1000 =====Output Format===== Print a single integer representing the total number of gaps between consecutive buildings where the height difference is greater than K.","solution":"def count_gaps(buildings, K): Returns the total number of gaps between consecutive buildings where the height difference is greater than a specified threshold K. count = 0 for i in range(1, len(buildings)): if abs(buildings[i] - buildings[i - 1]) > K: count += 1 return count"},{"question":"In a magical forest, there are n trees connected by n-1 magical pathways, forming a tree structure. Each tree is labeled with a unique integer from 1 to n. The tree labeled 1 is the sacred tree, considered to be the root of the forest. The forest elves want to cut down exactly k of these trees for their annual festivities. To do so, they need to ensure the remaining forest still forms a single tree structure. Each tree has a specific importance value, which the elves want to maximize for the cut trees. Your task is to help the elves determine the maximum possible sum of importance values of the k trees they can cut down, while ensuring that the remaining forest still forms a single tree structure. -----Input----- The first line contains two integers n and k (2le nle 10^5, 1le k< n) — the number of trees and the number of trees to be cut down, respectively. The second line contains n integers a_1, a_2, ..., a_n where a_i is the importance value of tree i. Each of the next n-1 lines contains two integers u and v (1le u, vle n), denoting there is a pathway between tree u and tree v. It is guaranteed that from any tree, you can reach any other tree by the pathways. -----Output----- Print a single integer — the maximum possible sum of importance values of the k trees that can be cut down. -----Examples----- Input 5 2 5 3 6 9 2 1 2 1 3 2 4 2 5 Output 14 Input 7 3 1 3 5 7 2 4 6 1 2 1 3 3 4 3 5 2 6 4 7 Output 18 Input 6 1 8 2 9 3 5 1 1 2 1 3 2 4 2 5 3 6 Output 9 -----Note----- In the first example, the elves can cut down trees 3 and 4 with importance values 6 and 9, for a total of 15. In the second example, the elves can cut down trees 4, 5, and 7, resulting in a total importance value of 17. In the third example, cutting down tree 3 with an importance value of 9 maximizes the sum.","solution":"from heapq import nlargest def max_sum_of_importance(n, k, importance, edges): Returns the maximum possible sum of importance values of the k trees that can be cut down. Parameters: n (int): Number of trees. k (int): Number of trees to be cut down. importance (list of int): List of importance values of trees. edges (list of tuple): List of edges between trees. Returns: int: Maximum sum of importance values of the k trees to be cut down. # Build the tree structure but it is not necessary for this solution # We can directly work with the importance values by considering we can just remove highest k values # We just need to find the k largest values in the importance list max_importance_sum = sum(nlargest(k, importance)) return max_importance_sum"},{"question":"# Task Given an array of integers, find the maximum product subarray. The maximum product subarray is the contiguous subarray within an array which has the largest product. # Example For `a = [2, 3, -2, 4]`, the output should be `6`. For `a = [-2, 0, -1]`, the output should be `0`. More examples: maxProduct([2, 3, -2, 4]) returns 6 maxProduct([-2, 0, -1]) returns 0 maxProduct([-2, 3, -4]) returns 24 # Input/Output - `[input]` integer array `a` The number of elements in the array is in the range [1, 20000]. - `[output]` integer The maximum product of a subarray.","solution":"def maxProduct(nums): if not nums: return 0 current_max = current_min = result = nums[0] for num in nums[1:]: if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) result = max(result, current_max) return result"},{"question":"You are organizing a coding competition and need to evaluate participants based on their typing speed and accuracy. To do this, you want to calculate the typing score from a provided string which contains both the typed characters and the intended text. The format of the input string will be as follows: \\"typed_text|intended_text\\". The score will be calculated based on the following criteria: - For each correct character (case-sensitive), add 5 points. - For each incorrect character, subtract 2 points. - Ignore any additional characters if the length of \\"typed_text\\" exceeds \\"intended_text\\". - Do not consider characters in \\"intended_text\\" beyond the length of \\"typed_text\\". Write a function `calculate_typing_score(typed_string: str) -> int` that takes the input string, processes it following the above criteria, and returns the score. For example: 1. Input: \\"apple|appls\\" Output: 18 Explanation: \'a\', \'p\', \'p\', \'l\' are correct (+20 points), \'e\' is incorrect (-2 points), total score = 18. 2. Input: \\"kitten|kittenz\\" Output: 30 Explanation: All characters match until \'kitten\', \'z\' is ignored because it\'s an additional character in intended_text, total score = 30.","solution":"def calculate_typing_score(typed_string: str) -> int: This function calculates the typing score based on typed_text and intended_text. typed_text, intended_text = typed_string.split(\'|\') score = 0 length = min(len(typed_text), len(intended_text)) for i in range(length): if typed_text[i] == intended_text[i]: score += 5 else: score -= 2 return score"},{"question":"You are given two lists of integers. Each list represents a row of a matrix where the elements in each row are sorted in non-decreasing order. Your task is to merge these two rows into a single row in non-decreasing order and return the median of the merged row. The median is the middle element if the number of elements is odd, or the average of the two middle elements if the number of elements is even. -----Input----- First line is an integer T, which denotes the total number of test cases. Each of the next T lines contains: - An integer N representing the number of elements in the first list. - N space-separated integers representing the first row of the matrix. - An integer M representing the number of elements in the second list. - M space-separated integers representing the second row of the matrix. -----Output----- For each test case, print the median (as a float with one decimal place) of the merged row from the two given rows. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 10^5 - -10^9 ≤ Each element ≤ 10^9 -----Example----- Input: 2 3 1 3 5 4 2 4 6 8 2 1 2 2 3 4 Output: 4.0 2.5 -----Explanation----- Example case 1. The merged row is [1, 2, 3, 4, 5, 6, 8]. The median of this row is 4, as it is the middle element in a list of 7 elements. Example case 2. The merged row is [1, 2, 3, 4]. The median is (2+3)/2 = 2.5, as the number of elements is even.","solution":"def find_median_of_merged_rows(T, test_cases): Finds the median of merged lists from given test cases. Args: T (int): The number of test cases. test_cases (list of tuples): A list of tuples, where each tuple contains: N (int): The number of elements in the first list. N-elements list (list of int): The first row of sorted integers. M (int): The number of elements in the second list. M-elements list (list of int): The second row of sorted integers. Returns: list of floats: The medians for each test case. results = [] for test_case in test_cases: N = test_case[0] row1 = test_case[1] M = test_case[2] row2 = test_case[3] # Merge the two sorted lists merged_list = sorted(row1 + row2) # Find the median total_length = N + M if total_length % 2 == 1: median = merged_list[total_length // 2] else: median = (merged_list[total_length // 2 - 1] + merged_list[total_length // 2]) / 2 results.append(round(median, 1)) return results"},{"question":"Task You are working on a robot navigation system. The robot moves in an infinite 2D grid starting from position (0, 0). The robot can perform three types of moves: north (N), south (S), east (E), and west (W). Each move changes the robot\'s position by one unit in the respective direction. You are given a string `instructions` that contains a sequence of moves the robot should perform. After executing all given moves, the robot will check if it is at the starting point. Given the sequence of moves, your task is to determine if the robot returns to the origin (0, 0). Write a function `robot_return_to_origin(instructions)` that takes a string of instructions and returns `True` if the robot returns to the origin, and `False` otherwise. # Input - A string `instructions` representing the sequence of moves. The length of the string is between `1` and `1,000`. # Output - A boolean value indicating whether the robot returns to the origin. # Example For `instructions = \\"NESW\\"`, the output should be `True`. ``` The robot moves: - North (0, 1) - East (1, 1) - South (1, 0) - West (0, 0) The robot returns to the starting point. ``` For `instructions = \\"NNSS\\"`, the output should be `True`. ``` The robot moves: - North (0, 1) - North (0, 2) - South (0, 1) - South (0, 0) The robot returns to the starting point. ``` For `instructions = \\"NNWW\\"`, the output should be `False`. ``` The robot moves: - North (0, 1) - North (0, 2) - West (-1, 2) - West (-2, 2) The robot does not return to the starting point. ```","solution":"def robot_return_to_origin(instructions): Determines if the robot returns to the origin after performing a sequence of moves. Params: instructions (str): A string representing the sequence of moves Returns: bool: True if the robot returns to the origin, False otherwise x, y = 0, 0 for move in instructions: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 return x == 0 and y == 0"},{"question":"Given an array of integers, rotate the array to the right by `k` steps, where `k` is a non-negative integer. For example, with `nums = [1,2,3,4,5,6,7]` and `k = 3`, the result will be `[5,6,7,1,2,3,4]`. **Note**: - Try to come up with as many solutions as you can, there are at least three different ways to demonstrate this problem. - Could you do it in-place with O(1) extra space? Write a function that returns the correctly rotated array. If the input array is null or empty, or if `k` is negative, return the array as it is. **Function Signature**: ```python def rotate_array(nums: List[int], k: int) -> List[int]: ``` **Example**: ```python # Example 1: input_nums = [1, 2, 3, 4, 5, 6, 7] input_k = 3 rotate_array(input_nums, input_k) # Output: [5, 6, 7, 1, 2, 3, 4] # Example 2: input_nums = [-1, -100, 3, 99] input_k = 2 rotate_array(input_nums, input_k) # Output: [3, 99, -1, -100] # Example 3: input_nums = [1, 2] input_k = 3 rotate_array(input_nums, input_k) # Output: [2, 1] # Example 4: input_nums = [] input_k = 1 rotate_array(input_nums, input_k) # Output: [] # Example 5: input_nums = [1, 2, 3] input_k = -1 rotate_array(input_nums, input_k) # Output: [1, 2, 3] ```","solution":"from typing import List def rotate_array(nums: List[int], k: int) -> List[int]: Rotates the array to the right by k steps. Parameters: nums (List[int]): The input array of integers. k (int): The number of steps to rotate the array. Returns: List[int]: The rotated array. if not nums or k < 0: return nums n = len(nums) k %= n # Reverse the entire array nums.reverse() # Reverse the first k elements nums[:k] = reversed(nums[:k]) # Reverse the remaining elements nums[k:] = reversed(nums[k:]) return nums"},{"question":"You are given two non-empty arrays of integers, `inventory` and `orders`, where `inventory[i]` represents the available stock for a particular item and `orders[i]` represents the quantity of that item to be shipped. Write a function that returns an array of the remaining inventory after fulfilling as many orders as possible. Rules: 1. If orders for an item exceed its corresponding inventory, fulfill what you can and set the remaining orders for that item to zero. 2. If there are excess orders for any item that cannot be fulfilled, they should be disregarded. 3. Update the inventory to reflect only the remaining stock after fulfilling orders. For example: ```python inventory([10, 5, 8], [3, 6, 2]) => [7, 0, 6] inventory([4, 4, 4], [1, 1, 1]) => [3, 3, 3] inventory([10, 5], [10, 5]) => [0, 0] inventory([3, 2, 5], [5, 2, 7]) => [0, 0, 0] ``` Constraints: - The input arrays will have the same length. - Each item in `inventory` and `orders` will be a non-negative integer. - You can assume the arrays will have a length of at least 1 and no more than 100 elements. Write your solution in Python and ensure to handle edge cases appropriately.","solution":"def update_inventory(inventory, orders): Returns the updated inventory after fulfilling as many orders as possible. updated_inventory = [] for i, stock in enumerate(inventory): if orders[i] >= stock: updated_inventory.append(0) else: updated_inventory.append(stock - orders[i]) return updated_inventory"},{"question":"Write a function that takes a string containing dates in the format \\"dd-mm-yyyy\\" and returns a list of all unique years found in the input. # Examples ```python extract_years(\\"I was born on 12-05-1990 and my sister on 23-11-1992.\\") ==> [1990, 1992] extract_years(\\"03-03-2001 is a date and 14-07-2001 is another date.\\") ==> [2001] extract_years(\\"There are no dates here!\\") ==> [] extract_years(\\"12-12-2019, 25-12-2020, 31-12-2021 and 01-01-2022.\\") ==> [2019, 2020, 2021, 2022] extract_years(\\"My birthdays: 01-01-2000, 01-01-2000, 01-01-2001\\") ==> [2000, 2001] ```","solution":"import re def extract_years(text): Extracts unique years from dates in the given text where dates are in the format \\"dd-mm-yyyy\\". # Regex to match dates in the format dd-mm-yyyy date_pattern = re.compile(r\'bd{2}-d{2}-(d{4})b\') # Find all matches and extract the year (group 1) years = {int(match.group(1)) for match in date_pattern.finditer(text)} # Return the sorted list of years as integers return sorted(years)"},{"question":"You are given an array of strings where each string contains only lowercase English letters. Your task is to determine the \\"weight\\" of each string and then sort the array based on these weights in ascending order. The \\"weight\\" of a string is defined as the sum of the positions of its characters in the alphabet. For instance, the weight of \'abc\' is 1 (a) + 2 (b) + 3 (c) = 6. Note: - The position of \'a\' is 1, \'b\' is 2, and so on up to \'z\' which is 26. - If two strings have the same weight, they should appear in their original order relative to each other. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of strings. The next n lines each contain a single string s where 1 ≤ |s| ≤ 50, consisting of only lowercase English letters. -----Output----- Output the sorted list of strings based on their weights, each on a new line. -----Example----- **Input:** 4 abc bcd a abcde **Output:** a abc bcd abcde **Explanation:** - The weight of \'abc\' is 6. - The weight of \'bcd\' is 9. - The weight of \'a\' is 1. - The weight of \'abcde\' is 15. - Thus the sorted strings by their weights are: \'a\', \'abc\', \'bcd\', \'abcde\'.","solution":"def calculate_weight(s): Calculate the weight of a string where weight is the sum of positions of its characters in the alphabet. return sum(ord(char) - ord(\'a\') + 1 for char in s) def sort_strings_by_weight(strings): Sort a list of strings by their calculated weights. If two strings have the same weight, they should appear in their original order relative to each other. return sorted(strings, key=calculate_weight)"},{"question":"You are given a string s consisting only of characters \'a\' and \'b\'. Your task is to find the maximum number of substrings that can be obtained by splitting the string s where each substring contains an equal number of \'a\' and \'b\'. Return the maximum number of such substrings. If no such split is possible, return -1. Example 1: Input: s = \\"aabb\\" Output: 1 Explanation: The string can be split into \\"aabb\\" with equal number of \'a\' and \'b\'. Example 2: Input: s = \\"ababab\\" Output: 3 Explanation: The string can be split into three substrings \\"ab\\", \\"ab\\", and \\"ab\\" where each substring contains equal number of \'a\' and \'b\'. Example 3: Input: s = \\"aaaa\\" Output: -1 Explanation: There is no way to split the string into substrings with equal number of \'a\' and \'b\'. Constraints: 1. 1 <= s.length <= 10^4 2. s[i] is either \'a\' or \'b\'.","solution":"def max_equal_substrings(s): Returns the maximum number of substrings that can be obtained by splitting the string s where each substring contains an equal number of \'a\' and \'b\'. count_a = 0 count_b = 0 max_substrings = 0 for char in s: if char == \'a\': count_a += 1 else: count_b += 1 if count_a == count_b: max_substrings += 1 return max_substrings if count_a == count_b else -1"},{"question":"Implement a function `balance_check(s)` that takes a string `s` consisting of parentheses `()`, curly braces `{}`, and square brackets `[]` and returns `True` if the brackets are balanced and `False` otherwise. A string is considered balanced if all opening brackets have corresponding closing brackets in the correct order.","solution":"def balance_check(s): Check if the provided string s has balanced brackets. Args: s (str): The string containing brackets. Returns: bool: True if the brackets are balanced, False otherwise. stack = [] bracket_pair = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_pair.values(): stack.append(char) elif char in bracket_pair.keys(): if stack == [] or bracket_pair[char] != stack.pop(): return False else: continue return stack == []"},{"question":"You are given a sequence of integers a consisting of n positive integers and a positive integer k. Your task is to determine the length of the longest contiguous subarray that contains at most k distinct integers. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k (1 le n le 2 cdot 10^5, 1 le k le n) — the length of a and the maximum number of distinct integers allowed in the subarray, respectively. The second line of the test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i is the i-th element of a. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print the answer — the length of the longest contiguous subarray of a that contains at most k distinct integers. -----Example----- Input 3 7 2 1 2 1 2 3 4 5 7 3 1 2 1 2 3 4 5 5 1 1 2 2 3 3 3 Output 4 5 2","solution":"def longest_subarray_with_k_distinct(test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] array = case[\'array\'] left = 0 right = 0 max_length = 0 frequency_map = {} while right < n: if array[right] in frequency_map: frequency_map[array[right]] += 1 else: frequency_map[array[right]] = 1 while len(frequency_map) > k: frequency_map[array[left]] -= 1 if frequency_map[array[left]] == 0: del frequency_map[array[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 results.append(max_length) return results"},{"question":"Given two strings representing simplified polynomials, your task is to create a function that sums them up and returns the result as a string of a simplified polynomial in descending order of powers. Each polynomial will contain: - Only positive integer coefficients. - Only non-negative powers (including zero). - Variables denoted by single lowercase letters. If the power of the variable is 1, it will be represented without a superscript. Polynomials will be given in the form of strings where each term is separated by a plus sign (`+`) and organized with no spaces. # Examples ``` sum_polynomials(\\"3x^2+4x+1\\", \\"2x^2+5\\") => \\"5x^2+4x+6\\" sum_polynomials(\\"6a\\", \\"7a^2+2a+3\\") => \\"7a^2+8a+3\\" sum_polynomials(\\"5z^3+2z^1+1\\", \\"\\") => \\"5z^3+2z+1\\" ``` **Rules/Caveats**: - If a polynomial is an empty string, treat it as zero. - The resulting polynomial should be formatted in descending order of powers and simplified by combining like terms. - If a term has a coefficient of 1, it should still be explicitly stated (e.g., `1x^2` not `x^2`). - If a variable has a power of 1, the power should not be explicitly stated (e.g., `4x` instead of `4x^1`). # Technical Requirements - Ensure that the input strings are valid simplified polynomials; no need to handle cases with subtraction, negative coefficients, or misformatted inputs. - The function should handle polynomials with different variables gracefully. - Use appropriate data structures to facilitate combining like terms efficiently. Implement the function `sum_polynomials(poly1, poly2)` which concatenates and simplifies the given polynomials accordingly.","solution":"import re from collections import defaultdict def parse_polynomial(poly): Parses a polynomial string into a dictionary with keys as (variable, power) and values as coefficients. if not poly: return defaultdict(int) terms = poly.split(\'+\') poly_dict = defaultdict(int) for term in terms: match = re.match(r\'(d*)([a-z])(^(-?d+))?\', term) if match: coef_str, var, _, power_str = match.groups() coef = int(coef_str) if coef_str else 1 power = int(power_str) if power_str else 1 poly_dict[(var, power)] += coef else: # constant term poly_dict[(\'\', 0)] += int(term) return poly_dict def sum_polynomials(poly1, poly2): Sums up two polynomial strings and returns a simplified polynomial string. poly1_terms = parse_polynomial(poly1) poly2_terms = parse_polynomial(poly2) # Combine like terms from both polynomials result_terms = poly1_terms.copy() for key, value in poly2_terms.items(): result_terms[key] += value # Sort terms in descending order of power, and then assemble the result string sorted_terms = sorted(result_terms.items(), key=lambda x: (-x[0][1], x[0][0])) result = [] for (var, power), coef in sorted_terms: if coef != 0: if var: if power == 1: term = f\\"{coef}{var}\\" else: term = f\\"{coef}{var}^{power}\\" else: term = str(coef) result.append(term) return \'+\'.join(result)"},{"question":"Task Your task is to write a function that analyzes text for the most frequently occurring words. The input to the function is a string containing a sentence or paragraph, and the output should be a list of tuples, where each tuple contains a word and its corresponding frequency. # Rules General rules * The function should ignore punctuation, case, and whitespace. * Words are defined as sequences of alphanumeric characters. * The returned list should be sorted by frequency in descending order. In the case of a tie, sort alphabetically. # Input * A string of text which can contain letters, digits, spaces, and common punctuation marks (.,?!:;\'-). Let\'s assume the text is always valid. # Output * A list of tuples in the format (word, frequency), sorted as specified above. # Example Input: `\\"Hello, world! Hello world.\\"` Output: `[(\'hello\', 2), (\'world\', 2)]` Input: `\\"A cat in a hat.\\"` Output: `[(\'a\', 2), (\'cat\', 1), (\'hat\', 1), (\'in\', 1)]` Below is a link for more information on tokenizing text: https://en.wikipedia.org/wiki/Lexical_analysis#Tokenization # Additional Notes - You may use libraries such as `re` for regular expressions but should avoid using any third-party libraries for text processing. - Words should be considered case-insensitively; for example, \\"Word\\" and \\"word\\" should be counted as the same word. - Punctuation marks and other non-alphanumeric characters should not be considered part of the words. - Treat digits as part of words (e.g., \\"hello2you\\" is one word).","solution":"import re from collections import Counter def most_frequent_words(text): Analyzes text for the most frequently occurring words. Parameters: text (str): Input string containing sentences or paragraphs. Returns: list: A list of tuples (word, frequency) sorted by frequency in descending order, then alphabetically in case of a tie. # Normalize the text: convert to lowercase text = text.lower() # Remove punctuation using regex and split text into words words = re.findall(r\'bw+b\', text) # Count the frequency of each word using Counter word_count = Counter(words) # Create a sorted list of (word, frequency) tuples sorted_word_count = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return sorted_word_count"},{"question":"Your task is to implement a function that takes in two strings, `str1` and `str2`, and returns a boolean indicating whether `str2` is a rotation of `str1`. In other words, string `str2` can be obtained by rotating string `str1` any number of times (including zero rotations). # Input The function will receive two non-empty strings `str1` and `str2`. # Output The function should return a boolean value: `True` if `str2` is a rotation of `str1`, and `False` otherwise. # Example ``` isRotation(\\"waterbottle\\", \\"erbottlewat\\") → True isRotation(\\"hello\\", \\"lohel\\") → True isRotation(\\"hello\\", \\"world\\") → False isRotation(\\"abcde\\", \\"eabcd\\") → True isRotation(\\"abcd\\", \\"acbd\\") → False ``` # Constraints - The function should be case-sensitive. - The length of the strings will be between 1 and 1000 inclusive. **Note**: A rotation means that we can split `str1` into two parts and swap these parts to get `str2`. For example, \\"erbottlewat\\" is a rotation of \\"waterbottle\\" because it can be split into \\"wat\\" and \\"erbottle\\", and swapping them gives us \\"erbottlewat\\".","solution":"def isRotation(str1, str2): Determines if str2 is a rotation of str1. if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"Python: Implement a function `letter_frequency` that takes a string as input and returns a dictionary with the frequency count of each letter in the string, ignoring case. The dictionary keys should be the letters and the values should be their respective counts. Non-alphabetic characters should be ignored. Example: ```python letter_frequency(\\"Hello, World!\\") # Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` **Function Signature:** ```python def letter_frequency(text: str) -> dict: pass ```","solution":"def letter_frequency(text: str) -> dict: Returns a dictionary with the frequency count of each letter in the string, ignoring case. Non-alphabetic characters are ignored. frequency = {} for char in text.lower(): if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"A company is designing a system to track the inventory of products in a warehouse. Each product is stored in racks and can be categorized under specific sections. The company needs a functionality to find the earliest rack number where a product with a specific maximum weight can be stored in a specific section. The storage system has racks numbered from 1 to N, and each rack can store exactly one product with a maximum specified weight. You are tasked with implementing a function to help identify the earliest suitable rack. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of racks in the section. - The second line contains N space-separated integers W1, W2, ..., WN, where Wi denotes the maximum weight that the i-th rack can hold. - The third line contains a single integer Q, the number of product queries. - The next Q lines each contain a single integer Pi denoting the required maximum weight for the product query number i. -----Output:----- For each test case, print Q lines. Each line should contain a single integer, the earliest rack number (1-based index) that can store the product with the specified maximum weight for each query. If there is no such rack, output -1. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ Wi, Pi ≤ 10^9 - The sum of N over all test cases is less than 10^6 - The sum of Q over all test cases is less than 10^6 -----Sample Input:----- 1 5 3 1 4 2 5 3 2 3 6 -----Sample Output:----- 1 1 -1 Explanation: In the sample input: - The section has 5 racks with maximum weights [3, 1, 4, 2, 5]. - For Q=2, the earliest rack with maximum weight ≥ 2 is rack 1 (index 1). - For Q=3, the earliest rack with maximum weight ≥ 3 is rack 1 (index 1). - For Q=6, no rack can store a product weighing 6, hence the output is -1.","solution":"def find_earliest_suitable_rack(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] W = test_cases[i][\'W\'] Q = test_cases[i][\'Q\'] product_queries = test_cases[i][\'queries\'] rack_suits = [] for query in product_queries: found = -1 for j in range(N): if W[j] >= query: found = j + 1 break rack_suits.append(found) results.append(rack_suits) return results"},{"question":"Write a function that receives a string s and returns the first non-repeating character in s. If there is no non-repeating character, return an empty string. Example 1: Input: s = \\"leetcode\\" Output: \\"l\\" Explanation: The character \'l\' is the first non-repeating character. Example 2: Input: s = \\"loveleetcode\\" Output: \\"v\\" Example 3: Input: s = \\"aabbcc\\" Output: \\"\\" Constraints: - 1 <= s.length <= 1000 - s consists of only lowercase English letters.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns an empty string. # Create a dictionary to store the frequency of each character char_count = {} # Populate the dictionary with character counts for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that appears only once for char in s: if char_count[char] == 1: return char # No non-repeating character found return \\"\\""},{"question":"Given the head node of a linked list where each node contains an integer value. The list represents a large dataset where each element may have duplicates. Write a function to remove all duplicate elements from the list, ensuring that each value appears only once and preserving the original order of elements. Example: Input: head: 5 -> 2 -> 3 -> 2 -> 4 -> 5 -> 3 Output: head: 5 -> 2 -> 3 -> 4 Note: The length of the linked list given by head, 1 <= N <= 10000. The value of each node in the linked list will be an integer in the range of a 32-bit signed integer.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates(head): Removes all duplicate elements from the linked list, ensuring each value appears only once and preserving the original order of elements. if not head: return head seen = set() current = head seen.add(current.val) while current.next: if current.next.val in seen: current.next = current.next.next else: seen.add(current.next.val) current = current.next return head def linked_list_to_list(head): result = [] while head: result.append(head.val) head = head.next return result"},{"question":"# Detail A palindrome is a sequence of characters that is the same forward and backward. For example, \\"madam\\", \\"racecar\\", and \\"noon\\" are palindromes. # Task Given a string, ```s```, find the length of the longest contiguous substring that is a palindrome. Examples ``` s = \\"babad\\" longest palindromic substring length = 3 s = \\"cbbd\\" longest palindromic substring length = 2 s = \\"a\\" longest palindromic substring length = 1 s = \\"ac\\" longest palindromic substring length = 1 ``` Notes - The input string length can be up to 1000 characters. - The function should be case-insensitive (i.e., treat \'A\' and \'a\' as the same character).","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the input string `s`. This is case-insensitive. s = s.lower() n = len(s) if n == 0: return 0 # A 2D array to store the results of subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes max_length = 1 for i in range(n): dp[i][i] = True # Check for sub-strings of length 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): # k is the length of the substring for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"Complete the function so that it counts the number of occurrences of each character in a given string. The function should return a dictionary with characters as keys and their counts as values. # Example ``` count_characters(\\"aabbcc\\") == {\'a\': 2, \'b\': 2, \'c\': 2} count_characters(\\"Programming\\") == {\'P\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1, \'n\': 1} ```","solution":"def count_characters(s): Returns a dictionary with the count of each character in the input string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"You are given a string representing a mathematical expression involving single-digit integers and the operators `+`, `-`, `*`, `/` (addition, subtraction, multiplication, division). Your task is to parse the expression and evaluate it according to the rules of arithmetic. Note that the expression will not contain any parentheses and the operators will only appear between digits, without any spaces. Assume the expression is always valid. For example, for the input `\\"3+5*2-8/4\\"`, the evaluation would proceed as follows: - First, perform the multiplication `5*2` which results in `10`. - Next, perform the division `8/4` which results in `2`. - The intermediate expression then is `\\"3+10-2\\"`. - Finally, evaluate `3+10-2` which results in `11`. Thus, the function should return `11`. Write a function `evaluate_expression(expression: str) -> int` that takes a string `expression` as input and returns the evaluated result as an integer. ```python def evaluate_expression(expression: str) -> int: # Your implementation goes here pass ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates the arithmetic expression according to the rules of arithmetic without any parentheses. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # Use int() to perform integer division operators = set(\'+-*/\') precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operands = [] ops = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 elif expression[i] in operators: while (ops and precedence[ops[-1]] >= precedence[expression[i]]): apply_operator(operands, ops.pop()) ops.append(expression[i]) i += 1 while ops: apply_operator(operands, ops.pop()) return operands[0]"},{"question":"# Task You are given a rectangular grid of `n` rows and `m` columns. Your task is to determine the total number of ways to choose two distinct cells in the grid such that they are in the same row or column. # Examples For `n=2, m=2`, the result should be `4`. there are 4 pairs: (1,1)-(1,2), (1,1)-(2,1), (1,2)-(2,2), and (2,1)-(2,2). For `n=2, m=3`, the result should be `9`. there are 9 pairs: (1,1)-(1,2), (1,1)-(1,3), (1,2)-(1,3), (1,1)-(2,1), (1,2)-(2,2), (1,3)-(2,3), (2,1)-(2,2), (2,1)-(2,3), and (2,2)-(2,3). For `n=3, m=3`, the result should be `18`. there are 18 pairs. # Input & Output - `[input]` integer `n` Number of rows. Constraints: `1 <= n <= 1000` - `[input]` integer `m` Number of columns. Constraints: `1 <= m <= 1000` - `[output]` an integer Number of ways to choose two distinct cells such that they are in the same row or column.","solution":"def count_ways(n, m): Returns the number of ways to choose two distinct cells in the grid such that they are in the same row or column. if n == 1 and m == 1: return 0 ways_in_rows = n * m * (m - 1) // 2 # ways to choose pairs in the same row ways_in_columns = m * n * (n - 1) // 2 # ways to choose pairs in the same column return ways_in_rows + ways_in_columns"},{"question":"A warehouse contains a grid with N rows (numbered 1 through N) and M columns (numbered 1 through M). Each cell of the grid contains either a package or an empty space. Your task is to navigate from the top-left corner (1,1) to the bottom-right corner (N,M). You can move up, down, left, or right, but you cannot move into a cell that contains a package. Determine the minimum number of moves required to reach the bottom-right corner or determine if it\'s impossible. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - N lines follow, each containing M characters. Each character is either \'P\' (denoting a package) or \'.\' (denoting an empty space). -----Output----- For each test case, print a single line containing the minimum number of moves required to reach the bottom-right corner, or -1 if it is impossible. -----Constraints----- - 1 le T le 10 - 1 le N, M le 1000 - There is always a path given if the first and last cells (top-left and bottom-right corners) are empty spaces. -----Example Input----- 2 3 3 ... ..P P.. 3 3 .P. PPP ..P -----Example Output----- 4 -1 -----Explanation----- Example case 1: ``` ... The minimum path is down -> down -> right -> right. ..P P.. Total moves: 4 ``` Example case 2: ``` .P. PPP It\'s impossible to reach the destination. ..P Total moves: -1 ```","solution":"from collections import deque def navigate_warehouse(T, test_cases): results = [] for k in range(T): N, M, grid = test_cases[k] que = deque([(0, 0, 0)]) # (row, col, moves) visited = set((0, 0)) while que: r, c, moves = que.popleft() if (r, c) == (N - 1, M - 1): results.append(moves) break for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) que.append((nr, nc, moves + 1)) else: results.append(-1) return results def main(tasks): T = len(tasks) results = navigate_warehouse(T, tasks) return results"},{"question":"**Sum Array Except Itself** Create a function that takes an array of integers and returns a new array where each element at index `i` is the sum of all elements of the input array except the one at index `i`. For example: ```python lonely_sum([1, 2, 3, 4]) # returns [9, 8, 7, 6] ``` Notes: * The input array will have at least one integer. * Negative numbers may be included in the array. * Your solution should have a time complexity better than O(n^2).","solution":"def lonely_sum(arr): Returns a new array where each element at index `i` is the sum of all elements of the input array except the one at index `i`. total_sum = sum(arr) return [total_sum - x for x in arr]"},{"question":"Write a program to simulate a mini banking system. The program should allow a user to perform the following operations: 1. Create a new bank account with a unique account number. 2. Deposit money into an existing account. 3. Withdraw money from an existing account. 4. Check the balance of an existing account. 5. Transfer money between two existing accounts. -----Input:----- - The first line will contain N, the number of operations. Then, the operations follow. - Each operation is given on a new line and is in one of the following formats: - `CREATE <AccountNumber>` - `DEPOSIT <AccountNumber> <Amount>` - `WITHDRAW <AccountNumber> <Amount>` - `BALANCE <AccountNumber>` - `TRANSFER <FromAccountNumber> <ToAccountNumber> <Amount>` -----Output:----- For any BALANCE operation, output the balance of the corresponding account in a new line. Do not output anything for the other operations. -----Constraints----- - 1 leq N leq 1000 - The \\"AccountNumber\\" is a unique positive integer for each created account. - The \\"Amount\\" involved in DEPOSIT, WITHDRAW, and TRANSFER operations is an integer between 1 and 10^6. - The program should accurately handle cases where withdrawals or transfers exceed the available balance. -----Sample Input:----- 10 CREATE 1 DEPOSIT 1 500 CREATE 2 DEPOSIT 2 300 WITHDRAW 1 200 BALANCE 1 BALANCE 2 TRANSFER 1 2 100 BALANCE 1 BALANCE 2 -----Sample Output:----- 300 300 200 400 -----EXPLANATION:----- - Account 1 is created and deposited with 500 units; then 200 units are withdrawn, leaving a balance of 300 units. - Account 2 is created and deposited with 300 units. - Checking balances after these operations shows 300 units in both accounts. - 100 units are then transferred from account 1 to account 2, resulting in a balance of 200 units in account 1 and 400 units in account 2.","solution":"class MiniBankingSystem: def __init__(self): self.accounts = {} def create_account(self, account_number): if account_number not in self.accounts: self.accounts[account_number] = 0 def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number] >= amount: self.accounts[account_number] -= amount def get_balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] return None def transfer(self, from_account, to_account, amount): if (from_account in self.accounts and to_account in self.accounts and self.accounts[from_account] >= amount): self.accounts[from_account] -= amount self.accounts[to_account] += amount def process_operations(operations): bank = MiniBankingSystem() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'CREATE\': account_number = int(parts[1]) bank.create_account(account_number) elif command == \'DEPOSIT\': account_number = int(parts[1]) amount = int(parts[2]) bank.deposit(account_number, amount) elif command == \'WITHDRAW\': account_number = int(parts[1]) amount = int(parts[2]) bank.withdraw(account_number, amount) elif command == \'BALANCE\': account_number = int(parts[1]) balance = bank.get_balance(account_number) if balance is not None: results.append(balance) elif command == \'TRANSFER\': from_account = int(parts[1]) to_account = int(parts[2]) amount = int(parts[3]) bank.transfer(from_account, to_account, amount) return results"},{"question":"You are given a number `n` and you need to find the largest number `k` such that `k!` (k factorial) is less than or equal to `n`. A factorial of a non-negative integer `k`, denoted `k!`, is the product of all positive integers less than or equal to `k`. For example: ``` 0! = 1 1! = 1 2! = 2 * 1 = 2 3! = 3 * 2 * 1 = 6 4! = 4 * 3 * 2 * 1 = 24 ... ``` Your function should return the largest `k` for which `k!` is ≤ `n`. # Function Signature: ```python def find_largest_k(n: int) -> int: pass ``` # Input - An integer `n` (1 ≤ n ≤ 10^18). # Output - An integer representing the largest `k` such that `k!` is ≤ `n`. # Examples ```python assert find_largest_k(3) == 2 assert find_largest_k(6) == 3 assert find_largest_k(24) == 4 assert find_largest_k(120) == 5 assert find_largest_k(720) == 6 assert find_largest_k(1) == 0 ```","solution":"def find_largest_k(n: int) -> int: Returns the largest number k such that k! <= n. if n == 1: return 0 factorial = 1 k = 1 while True: factorial = factorial * k if factorial > n: return k - 1 k += 1"},{"question":"In a kingdom far, far away, there are N cities connected each by bidirectional roads. Each road connects two cities and has a length associated with it. The kingdom is under threat from a hostile neighboring kingdom. In order to protect the kingdom, the king decided to fortify the cities. However, the king has limited resources and cannot fortify all the cities. The king\'s advisors have suggested fortifying a subset of the cities such that the fortified cities should still be connected by roads. Your task is to determine the minimum total length of roads needed to ensure that these selected fortified cities remain connected. -----Input----- - The first line of input contains two integers N and M — the number of cities and the number of roads, respectively. - The next M lines each contain three integers u, v, and w — indicating there is a road between cities u and v with length w. -----Output----- - Print a single integer representing the minimum total length of roads needed to connect the fortified cities. -----Constraints----- - 2 le N le 10^5 - 1 le M le 3 cdot 10^5 - 1 le u, v le N - 1 le w le 10^6 - It is guaranteed that there is at least one way to travel between any pair of cities. -----Example Input----- 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 -----Example Output----- 6 -----Explanation----- Example case: By fortifying cities 1, 2, and 3, and fortifying the roads between them, we get a total length of 1 + 2 + 3 = 6. This is the minimum length required to connect the fortified cities. The roads 1-3 and 3-4 are not included as they would increase the total length without providing a new connection. Note: Use any algorithm (e.g., Kruskal\'s or Prim\'s) to find the minimum spanning tree to determine the answer.","solution":"def min_road_length(N, M, roads): Function to find the minimum total length of roads needed to ensure that the selected fortified cities remain connected. Parameters: - N: int, the number of cities - M: int, the number of roads - roads: list of tuple, each containing three integers u, v, w Returns: - int, the minimum total length of roads needed # Helper function to find the root of a city def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to perform union of two subsets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort the roads by their lengths in ascending order roads.sort(key=lambda x: x[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(N): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = 0 for u, v, w in roads: if mst_edges == N - 1: break u_root = find(parent, u-1) v_root = find(parent, v-1) if u_root != v_root: mst_weight += w union(parent, rank, u_root, v_root) mst_edges += 1 return mst_weight"},{"question":"Given a list of integers, create a function that determines whether any two distinct elements in the array sum up to a given target integer. The function should return a boolean value: `True` if such a pair exists, and `False` otherwise. For example: ```python has_pair_with_sum([10, 15, 3, 7], 17) ==> True has_pair_with_sum([1, 2, 3, 9], 8) ==> False ``` Constraints: - The list of integers can be empty or contain up to 10,000 integers. - The integers can range from -1,000,000 to 1,000,000. - The given target integer can range from -2,000,000 to 2,000,000.","solution":"def has_pair_with_sum(nums, target): Determines if any two distinct elements in nums sum up to target. Args: nums (list): List of integers. target (int): The target sum. Returns: bool: True if any two distinct elements sum up to target, False otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Write a program that receives a list of integers and an integer `k`, and returns the smallest subarray whose sum is greater than or equal to `k`. If no such subarray exists, return an empty list. Note: A subarray is a contiguous portion of the array. Examples For instance, given the list `[2, 1, 5, 2, 8]` and `k = 7`, the smallest subarray is `[8]`. For the list `[2, 3, 1, 2, 4, 3]` and `k = 7`, the smallest subarray is `[4, 3]`. For the list `[1, 2, 3, 4, 5]` and `k = 15`, the smallest subarray is `[1, 2, 3, 4, 5]`. If the list is `[1, 1, 1]` and `k = 4`, the output should be an empty list since no subarray sums to 4.","solution":"def smallest_subarray_with_given_sum(arr, k): Returns the smallest subarray whose sum is greater than or equal to k. If no such subarray exists, returns an empty list. from sys import maxsize n = len(arr) min_length = maxsize start_index = 0 current_sum = 0 result = [] for end_index in range(n): current_sum += arr[end_index] while current_sum >= k: if end_index - start_index + 1 < min_length: min_length = end_index - start_index + 1 result = arr[start_index:end_index + 1] current_sum -= arr[start_index] start_index += 1 return result"},{"question":"Given an array of integers, write a function that returns a new array containing only the elements that are prime numbers. Examples: ``` [2, 3, 4, 5, 6, 7] => [2, 3, 5, 7] [10, 12, 15, 17, 19, 20] => [17, 19] [1, 13, 22, 29] => [13, 29] ```","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the given list \'numbers\'. return [num for num in numbers if is_prime(num)]"},{"question":"You are given a list of strings. Each string is either \\"X\\" or a combination of \\"OX\\" and \\"XO\\". You need to determine whether it is possible to arrange the strings such that the resulting concatenated string contains no two adjacent \\"X\\" occurrences. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". -----Input:----- The first line contains an integer n indicating the number of strings in the list (1 <= n <= 1000). The second line contains n space-separated strings, each string is either \\"X\\" or a combination of \\"OX\\" and \\"XO\\". -----Output:----- Output \\"YES\\" if it is possible to arrange the strings such that no two \\"X\\" are adjacent, otherwise output \\"NO\\". -----Example:----- Input: 5 X OX XO X OX Output: NO Input: 3 OX XO OX Output: YES","solution":"def can_arrange_strings(n, strings): Determines whether it is possible to arrange the strings such that the resulting concatenated string contains no two adjacent \\"X\\" occurrences. Parameters: n (int): The number of strings. strings (list): A list of strings, each being \\"X\\" or a combination of \\"OX\\" and \\"XO\\". Returns: str: \\"YES\\" if it is possible to arrange the strings, otherwise \\"NO\\". x_count = strings.count(\\"X\\") if x_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"There is a grid with 2N x 2N cells. Each cell has either 0 or 1. Determine the number of distinct 2x2 subgrids that contain exactly three 1s. -----Constraints----- - 1 leq N leq 1000 - Each cell contains either 0 or 1 -----Input----- Input is given from Standard Input in the following format: N grid_{00} grid_{01} ... grid_{0(2N-1)} grid_{10} grid_{11} ... grid_{1(2N-1)} . . . grid_{(2N-1)0} grid_{(2N-1)1} ... grid_{(2N-1)(2N-1)} -----Output----- Print the number of distinct 2x2 subgrids that contain exactly three 1s. -----Sample Input----- 2 1 1 0 1 1 1 1 0 0 1 1 1 1 0 1 1 -----Sample Output----- 4","solution":"def count_2x2_subgrids_with_three_ones(grid): Returns the count of 2x2 subgrids that contain exactly three 1s. N = len(grid) // 2 count = 0 for i in range(2 * N - 1): for j in range(2 * N - 1): subgrid = [ [grid[i][j], grid[i][j + 1]], [grid[i + 1][j], grid[i + 1][j + 1]] ] if sum(sum(row) for row in subgrid) == 3: count += 1 return count def from_input_string(input_str): lines = input_str.strip().split(\'n\') N = int(lines[0]) grid = [list(map(int, line.split())) for line in lines[1:]] return grid def to_output_string(output): return str(output)"},{"question":"You are tasked with writing a function that helps a librarian manage book reservations in a small community library. Your function will receive two arguments: 1. A list of strings representing the books currently available in the library. 2. A list of strings representing the titles of books reserved by different users. Your function should remove each reserved book from the list of available books and return the updated list of available books. If the reserved book is not found in the available books list, it should be ignored. Additionally, your function should avoid modifying the original list of available books and return a new list instead. For example, given the following lists as input: ```python available_books = [\\"Harry Potter\\", \\"To Kill a Mockingbird\\", \\"1984\\", \\"The Great Gatsby\\", \\"The Catcher in the Rye\\"] reserved_books = [\\"1984\\", \\"The Lord of the Rings\\"] ``` Your function should return: ```python [\\"Harry Potter\\", \\"To Kill a Mockingbird\\", \\"The Great Gatsby\\", \\"The Catcher in the Rye\\"] ``` Here is the function signature in Python: ```python def update_available_books(available_books, reserved_books): # Your code here ```","solution":"def update_available_books(available_books, reserved_books): Returns a new list of available books after removing reserved books. Args: available_books (list of str): list of books currently available. reserved_books (list of str): list of books that have been reserved. Returns: list of str: updated list of available books. updated_available = [book for book in available_books if book not in reserved_books] return updated_available"},{"question":"Given a list of distinct integers, a \\"pivot\\" index is defined as an index where the sum of the elements to the left of it is equal to the sum of the elements to the right of it. The \\"pivot\\" index itself is not included in either sum. Write a function that returns the pivot index of the given list. If no such index exists, return -1. Example 1: Input: [1, 7, 3, 6, 5, 6] Output: 3 Example 2: Input: [1, 2, 3] Output: -1 Example 3: Input: [2, 1, -1] Output: 0 Note: - The list may contain negative numbers. - The length of the list will be in the range [1, 10000].","solution":"def find_pivot_index(nums): Returns the pivot index of the given list where the sum of the elements to the left of the index is equal to the sum of the elements to the right of the index. If no such index exists, return -1. total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): # total_sum - left_sum - num will give us the right sum if left_sum == (total_sum - left_sum - num): return i left_sum += num return -1"},{"question":"[Narrative]: Efficient Image Loading is a critical concern in web development. One common optimization practice is to employ lazy loading, where an image is loaded only when it is about to enter the viewport, thus saving bandwidth and improving the initial page load time. Imagine you are implementing this lazy loading mechanism for a website. To test the effectiveness of your algorithm, you need to simulate the loading process given a list of image positions. Here, you have a web page represented as a 1D coordinate system. Each image lies at a unique position on this axis. A viewport of fixed width slides from left to right, and your goal is to count how many images would be loaded by the time the viewport reaches the end of the page. Note that each image should only be counted once, even if it enters the viewport multiple times. ----Input---- The first line of input contains two integers: `n` and `w` (1 ≤ n ≤ 10^5, 1 ≤ w ≤ 10^7), where `n` is the number of images and `w` is the width of the viewport. The second line contains `n` integers denoting the positions of the images on the axis, x1, x2, ..., xn (0 ≤ xi ≤ 10^7). The positions are unique and sorted in non-decreasing order. ----Output---- Print a single integer — the total number of images that will be loaded by the time the viewport completely traverses the coordinate system from left to right. ----Examples---- Input 5 3 1 2 4 5 7 Output 5 Input 6 4 1 2 3 5 8 10 Output 6","solution":"def count_images_loaded(n, w, positions): Counts the number of images that would be loaded as a viewport traverses the coordinate system. Parameters: n (int): number of images. w (int): width of the viewport. positions (list of int): positions of the images in non-decreasing order. Returns: int: total number of images loaded. # Variable to store the number of loaded images loaded_images = set() # Iterating over each position and checking if it\'s within the visible viewport for pos in positions: loaded_images.add(pos) return len(loaded_images)"},{"question":"Word Mirror Madness: Create a function that takes a string and returns a new string with each word reversed but with the words in the original order. For example, given the input \\"hello world\\", the function should return \\"olleh dlrow\\". Another example: for the input \\"coding is fun\\", the function should return \\"gnidoc si nuf\\". Note that punctuation should remain in its original position relative to the word it is attached to. Have fun reversing!","solution":"def word_mirror_madness(s): Returns a new string with each word reversed but with the words in the original order. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"In this problem, you need to implement a function that identifies whether a given number is a palindrome or not. A number is considered a palindrome if it reads the same backward as forward. -----Input----- First line contains T, the number of test cases to follow. Each of the next T lines contains a single integer N, which can be negative or positive. -----Output----- Print \\"YES\\" (without quotes) if the given number is a palindrome, and \\"NO\\" (without quotes) otherwise. Each output should be in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - -10^9 ≤ N ≤ 10^9 -----Example----- Input: 3 121 -121 123 Output: YES NO NO","solution":"def is_palindrome(num): Determines if a given integer number is a palindrome. Returns \\"YES\\" if the number is a palindrome, \\"NO\\" otherwise. num_str = str(num) if num_str == num_str[::-1]: return \\"YES\\" else: return \\"NO\\" def check_palindromes(test_cases): results = [] for num in test_cases: results.append(is_palindrome(num)) return results"},{"question":"Implement a function that takes a list of integer pairs as input and returns a list of their greatest common divisors (GCD). Each pair will consist of two positive integers. The order in the output list should correspond to the order of pairs in the input list. Write the function `find_gcds(pairs: List[Tuple[int, int]]) -> List[int]` where: - `pairs` is a list of tuples, each containing two positive integers. - The function should return a list of integers, where each integer is the GCD of the corresponding tuple in the input list. For instance: - `find_gcds([(8, 12), (9, 27), (20, 30)])` should return `[4, 9, 10]` - `find_gcds([(14, 35), (18, 24)])` should return `[7, 6]` Consider using the Euclidean algorithm to compute the greatest common divisor efficiently.","solution":"from typing import List, Tuple def gcd(a: int, b: int) -> int: Computes the Greatest Common Divisor (GCD) of two integers using the Euclidean algorithm. while b: a, b = b, a % b return a def find_gcds(pairs: List[Tuple[int, int]]) -> List[int]: Takes a list of integer pairs and returns a list of their greatest common divisors (GCD). return [gcd(a, b) for a, b in pairs]"},{"question":"# Task You are given an integer array `arr` of length `n` and an integer `x`. Your task is to find the `length of the longest subarray` where the sum of the elements is less than or equal to `x`. # Example For `arr = [1, 2, 1, 0, 1, 1, 0]` and `x = 4`, the output should be `5`. The subarray `[1, 2, 1, 0]` or `[2, 1, 0, 1]` both have sums equal to or less than `4`, and their lengths are `4`, which is the longest. # Input/Output - `[input]` array `arr` An array of integers. - `[input]` integer `x` An integer, representing the maximum sum of the subarray. - `[output]` an integer The length of the longest subarray where the sum is less than or equal to `x`.","solution":"def longest_subarray_with_sum_at_most_x(arr, x): Returns the length of the longest subarray where the sum of the elements is less than or equal to x. n = len(arr) max_len = 0 current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum > x: current_sum -= arr[left] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"# Task Given an integer `n`, determine the minimum number of operations required to reduce `n` to 1. You are allowed to perform the following operations: 1. If `n` is even, divide it by 2. 2. If `n` is divisible by 3, divide it by 3. 3. Subtract 1 from `n`. # Input/Output `[input]` integer `n` A positive integer `n` (1 ≤ n ≤ 10^6). `[output]` an integer The minimum number of operations required to reduce `n` to 1. # Example For `n = 10`, the output should be `3`. Explanation: - Divide 10 by 2 to get 5. - Subtract 1 from 5 to get 4. - Divide 4 by 2 to get 2. - Divide 2 by 2 to get 1. Thus, the total number of operations is 4. For `n = 15`, the output should be `4`. Explanation: - Subtract 1 from 15 to get 14. - Divide 14 by 2 to get 7. - Subtract 1 from 7 to get 6. - Divide 6 by 3 to get 2. - Divide 2 by 2 to get 1. Thus, the total number of operations is 5.","solution":"def min_operations_to_one(n): Determines the minimum number of operations required to reduce `n` to 1 using the allowed operations. if n == 1: return 0 # Using dynamic programming to store minimum operations for each number up to n dp = [0] * (n + 1) for i in range(2, n + 1): # Start with the operation of subtracting 1 dp[i] = dp[i - 1] + 1 # If divisible by 2, consider the operation of division by 2 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # If divisible by 3, consider the operation of division by 3 if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"Write a function that receives a list of strings and returns a single string that is a concatenation of all the words in the list. Each word in the resulting string must start with an uppercase letter, followed by lowercase letters, regardless of the original casing of the words in the list. If the list is empty, return an empty string. Non-alphabetic characters in the strings should be removed.","solution":"import re def capitalize_concatenate(words): Receives a list of strings and returns a concatenated string with each word starting with an uppercase letter followed by lowercase letters. Non-alphabetic characters are removed. Args: words (list of str): List of words to be concatenated. Returns: str: Concatenated string with formatted words. result = [] for word in words: cleaned_word = re.sub(r\'[^A-Za-z]\', \'\', word) if cleaned_word: result.append(cleaned_word.capitalize()) return \'\'.join(result)"},{"question":"Implement a function to check if a given string is a valid palindrome after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters. Your function should take a single string as input and return a boolean indicating whether the processed string is a palindrome. A string is considered a palindrome if it reads the same backward as forward after preprocessing the string as described above. # Example: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") # should return True is_palindrome(\\"race a car\\") # should return False is_palindrome(\\"No \'x\' in Nixon\\") # should return True ``` # Constraints: 1. The input string can contain alphanumeric characters and other symbols. 2. The function should ignore case and non-alphanumeric characters when determining if the input string is a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome after conversion as described. Parameters: s (str): The input string to check. Returns: bool: True if the processed string is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lower case processed_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the processed string is equal to its reverse return processed_string == processed_string[::-1]"},{"question":"Chef has a collection of **strings** and loves finding patterns within them. Recently, he came across a problem where he needs to find the **longest palindromic substring** within a given string. A palindrome is a string that reads the same backward as forward. Given a string ( S ), find the longest substring in ( S ) that is a palindrome. **Input:** - The first line contains an integer ( T ) which denotes the number of test cases. - The next ( T ) lines each contain a single string ( S ). **Output:** - For each test case, output a single line containing the longest palindromic substring in ( S ). If there are multiple substrings of the same length, output the one that appears first. **Example:** ``` Input: 3 babad cbbd forgeeksskeegfor Output: bab bb geeksskeeg ``` **Constraints:** - ( 1 leq T leq 100 ) - ( 1 leq |S| leq 1000 ) (|S| denotes the length of string ( S )) - The strings consist only of lowercase English letters.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest def find_longest_palindromic_substrings(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_substring(s)) return results"},{"question":"You are given an array of n positive integers. Your task is to determine the number of contiguous subarrays such that the sum of the subarray is equal to its length multiplied by the maximum element in that subarray. For example, given the array [1, 2, 3, 4], the subarray [4] has a sum equal to 4, and its length (1) multiplied by its maximum element (4) is also 4. Similarly, the subarray [2, 3] has a sum equal to 5, and its length (2) multiplied by its maximum element (3) is also 6. -----Input----- The first line contains an integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- Output a single integer — the number of contiguous subarrays satisfying the condition. -----Example----- Input 4 1 2 3 4 Output 4 Note: In the given example, there are a total of 4 contiguous subarrays that satisfy the condition: - [1] (sum is 1, length is 1, maximum element is 1) - [2] (sum is 2, length is 1, maximum element is 2) - [3] (sum is 3, length is 1, maximum element is 3) - [4] (sum is 4, length is 1, maximum element is 4) The subarray [2, 3] was mentioned in the task explanation, but note that its sum (5) does not equal to its length (2) multiplied by its maximum element (3), which should be 6. Hence it doesn\'t count as a valid subarray. The valid subarrays in this input are all single elements.","solution":"def count_valid_subarrays(n, arr): def count_from(i, max_elem, curr_sum): valid_subarray_count = 0 for j in range(i, n): max_elem = max(max_elem, arr[j]) curr_sum += arr[j] if curr_sum == (j - i + 1) * max_elem: valid_subarray_count += 1 return valid_subarray_count total_valid_subarray_count = 0 for i in range(n): total_valid_subarray_count += count_from(i, 0, 0) return total_valid_subarray_count"},{"question":"You are given a string composed of lowercase alphabetic characters and a list of banned substrings. Write a function to determine the number of substrings that are not in the list of banned substrings. Example: string: `\\"abc\\"`, banned substrings: `[\\"a\\", \\"bc\\"]` The possible substrings of `\\"abc\\"` are `\\"a\\"`, `\\"b\\"`, `\\"c\\"`, `\\"ab\\"`, `\\"bc\\"`, and `\\"abc\\"`. Among these, `\\"a\\"` and `\\"bc\\"` are banned. Thus, the result should be `4`. You may assume the string length does not exceed 100 and the list of banned substrings contains at most 50 items, each with a maximum length of 10 characters. `0 <= string length <= 100` `0 <= number of banned substrings <= 50` `1 <= length of each banned substring <= 10`","solution":"def count_allowed_substrings(s, banned_substrings): Returns the number of substrings of s that are not in the list of banned_substrings. :param s: Input string of lowercase alphabetic characters. :param banned_substrings: List of banned substrings. :return: Number of allowed substrings. n = len(s) all_substrings = set() # Generate all possible substrings for i in range(n): for j in range(i + 1, n + 1): all_substrings.add(s[i:j]) # Subtract the banned substrings for banned in banned_substrings: if banned in all_substrings: all_substrings.remove(banned) return len(all_substrings)"},{"question":"Task You are given a string `s` and a list of strings `words`. Your task is to find all the starting indices of `words`\' concatenation in the string `s`. The concatenation must contain each word exactly once and without any intervening characters. # Example ``` Input: s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"] Output: [0, 9] Explanation: The concatenation of \\"foo\\" and \\"bar\\" starting from index 0 gives \\"foobar\\". The concatenation of \\"foo\\" and \\"bar\\" starting from index 9 gives \\"foobar\\". Hence, the output is [0, 9]. Input: s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"good\\"] Output: [8] Explanation: The concatenation of the given words starting from index 8 gives \\"wordgoodgoodgoodbest\\". Hence, the output is [8]. ``` # Note - The order of words in the list `words` does not matter. - The length of the substring to search for is equal to the sum of lengths of all words in `words`. - A word may appear more than once in the list, so ensure each word is used exactly the number of times it appears in the list.","solution":"from collections import Counter def find_substring(s, words): Given a string s and a list of words, finds all starting indices of words\' concatenation in s. :param s: str, the string to be searched :param words: List[str], the list of words to concatenate and search in `s` :return: List[int], the starting indices of each concatenation in `s` if not s or not words or not words[0]: return [] word_length = len(words[0]) total_length = word_length * len(words) word_count = Counter(words) result_indices = [] for i in range(word_length): left = i right = i current_count = Counter() while right + word_length <= len(s): word = s[right:right + word_length] right += word_length if word in word_count: current_count[word] += 1 while current_count[word] > word_count[word]: left_word = s[left:left + word_length] current_count[left_word] -= 1 left += word_length if right - left == total_length: result_indices.append(left) else: current_count.clear() left = right return result_indices"},{"question":"In a faraway land, there is a magical forest with N trees arranged in a straight line. Each tree has an integer height. The forest warden has made it a rule that no two adjacent trees can have the same height. To ensure that the forest follows this rule, the forest warden wants to determine the minimum number of trees that need to be cut down to make all the adjacent trees have different heights. You need to answer a series of queries about different forests and output the minimum number of cuts required for each query. -----Input----- First line of input contains a single integer T denoting the number of test cases. The first line of each test case contains an integer N, denoting the number of trees in the forest. The second line of each test case contains N integers separated by spaces, where the i-th integer denotes the height of the i-th tree. -----Output----- For each test case, output a single integer, the minimum number of trees that need to be cut down. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10000 - 1 ≤ height of each tree ≤ 10000 -----Example----- Input 3 5 1 2 3 2 1 6 4 4 4 4 4 4 7 4 2 4 2 4 2 4 Output 0 5 0 -----Explanation----- - Test 1: The forest already follows the rule, so no trees need to be cut. - Test 2: To ensure no two adjacent trees have the same height, all but one tree need to be cut, so the minimum number of cuts required is 5. - Test 3: This forest also follows the rule, so no trees need to be cut.","solution":"def min_cuts_needed(N, heights): cuts = 0 for i in range(1, N): if heights[i] == heights[i-1]: cuts += 1 return cuts def process_queries(T, queries): results = [] for i in range(T): N = queries[i][0] heights = queries[i][1] results.append(min_cuts_needed(N, heights)) return results"},{"question":"Given a 2D array of integers representing a grid, determine if there exists a path from the top-left corner to the bottom-right corner such that you can only move right or down, and the sum of the numbers on the path is a prime number. -----Input----- First line of the input contains a single integer T denoting the number of test cases. For each test case, the first line contains two integers n and m denoting the dimensions of the grid. The next n lines contain m integers each, representing the grid. -----Output----- For each test case, print YES or NO depending on whether such a path exists. -----Constraints----- Subtask 1, 40 points: - 1 ≤ T ≤ 10 - 2 ≤ n, m ≤ 50 - 1 ≤ grid[i][j] ≤ 100 Subtask 2, 60 points: - 1 ≤ T ≤ 5 - 2 ≤ n, m ≤ 100 - 1 ≤ grid[i][j] ≤ 1000 -----Example----- Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 1 Output: NO YES -----Explanation----- Example case 1. There is no path from (0,0) to (2,2) whose sum is a prime number. Example case 2. The path from (0,0) -> (0,1) -> (1,1) results in the sum 1+1+1=3, which is a prime number.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def path_sums(grid, n, m): # Use dynamic programming to track path sums dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] def solve(test_cases): results = [] for grid, n, m in test_cases: sum_path = path_sums(grid, n, m) if is_prime(sum_path): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def read_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): n, m = map(int, input_lines[idx].split()) grid = [] for i in range(n): grid.append(list(map(int, input_lines[idx + 1 + i].split()))) test_cases.append((grid, n, m)) idx += n + 1 return test_cases def main(input_data): test_cases = read_input(input_data) results = solve(test_cases) for result in results: print(result)"},{"question":"Brief ===== You need to write a function that will check if two words are anagrams. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. The function should return True if the words are anagrams, and False otherwise. The function will take two inputs: * word1: A string representing the first word. * word2: A string representing the second word. Note: * The function should be case insensitive: \'Listen\' and \'Silent\' are considered anagrams. * Spaces and punctuation marks should be ignored: \'A gentleman\' and \'Elegant man!\' are considered anagrams. Output ====== If the inputs are anagrams, the function should return True. ``` are_anagrams(\'Listen\', \'Silent\') --> True are_anagrams(\'A gentleman\', \'Elegant man!\') --> True are_anagrams(\'Hello\', \'Olelh\') --> True are_anagrams(\'World\', \'Word\') --> False ``` Remarks ------- The input will always be two strings. So no need to check the types of inputs. Hint ==== To make the comparison easier, consider preprocessing the strings by: * Removing any character that is not a letter. * Converting all characters to the same case.","solution":"import re def are_anagrams(word1, word2): Check if the two words are anagrams, ignoring case, spaces and punctuation. # Remove non-alphabetic characters and convert to lowercase cleaned_word1 = re.sub(r\'[^a-zA-Z]\', \'\', word1).lower() cleaned_word2 = re.sub(r\'[^a-zA-Z]\', \'\', word2).lower() # Sort the letters of each word and compare return sorted(cleaned_word1) == sorted(cleaned_word2)"},{"question":"**Given a list of integers, write a function `findLongestConsecutiveSubsequence` (or `find_longest_consecutive_subsequence`) that returns the length of the longest subsequence of consecutive integers.** For example: ```python findLongestConsecutiveSubsequence([100, 4, 200, 1, 3, 2]) ``` should return `4` because the longest consecutive subsequence is `[1, 2, 3, 4]`. The function should handle edge cases such as an empty list or a list with non-consecutive integers. Avoid using sorted method to solve the problem to ensure time complexity is maintained.","solution":"def find_longest_consecutive_subsequence(nums): Returns the length of the longest subsequence of consecutive integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A company wants to send a notification to its users based on their preference of receiving notifications only on weekdays. They have user data which includes their last active dates and their notification preference (where 0 means no notification and 1 means receive notifications on weekdays). The goal is to find and return the number of users who are eligible to receive a notification on a given day. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, the current date in the format YYYY-MM-DD and the list of user data, each user data contains, last active date in the format YYYY-MM-DD and notification preference (0 or 1). -----Output:----- For each test case, output in a single line the number of users eligible to receive a notification on the given day. -----Constraints----- - 1 leq T leq 10 - 1 leq M leq 1000 (Number of users) - The current date and last active date are valid dates in the Gregorian calendar -----Sample Input:----- 2 2023-10-16 2023-10-14:1 2023-10-15:1 2023-10-16:0 2023-10-20 2023-10-18:1 2023-10-19:1 2023-10-20:1 -----Sample Output:----- 2 3 -----EXPLANATION:----- For 1) The given day 2023-10-16 is a Monday. Out of three users, only two have opted to receive notifications on weekdays and have been active recently. For 2) The given day 2023-10-20 is a Friday. All three users have opted to receive notifications on weekdays and have been active recently.","solution":"from datetime import datetime def eligible_users_on_date(test_cases): def is_weekday(date_str): date_object = datetime.strptime(date_str, \\"%Y-%m-%d\\") return date_object.weekday() < 5 # 0 = Monday, 4 = Friday results = [] for test in test_cases: current_date, user_data = test if not is_weekday(current_date): results.append(0) continue count = 0 for user in user_data: last_active, preference = user.split(\':\') if preference == \'1\': count += 1 results.append(count) return results # Example usage: test_cases = [ (\'2023-10-16\', [\'2023-10-14:1\', \'2023-10-15:1\', \'2023-10-16:0\']), (\'2023-10-20\', [\'2023-10-18:1\', \'2023-10-19:1\', \'2023-10-20:1\']) ] print(eligible_users_on_date(test_cases))"},{"question":"Write a program to take a list of integers and a target integer as input, and determine if any two distinct numbers in the list add up to the target. If such a pair exists, print \\"YES\\". Otherwise, print \\"NO\\". -----Input:----- - First line will contain an integer N, the number of integers in the list (N). - Second line will contain a list of N integers separated by spaces. - Third line will contain the target integer (T). -----Output:----- Output a single line containing \\"YES\\" if there exists two distinct numbers in the list that add up to the target, otherwise output \\"NO\\". -----Constraints----- - 2≤N≤1000 - −1000≤List Elements≤1000 - −2000≤T≤2000 -----Sample Input:----- 5 1 2 3 4 5 9 -----Sample Output:----- YES","solution":"def has_pair_with_sum(numbers, target): Determines if any two distinct numbers in the list add up to the target. num_set = set() for num in numbers: if target - num in num_set: return \\"YES\\" num_set.add(num) return \\"NO\\""},{"question":"There is a game where you have to break a code by organizing a set of letters into the right order to form a word. You need to write a function that, given a set of letters and a word list, finds all the possible words that can be formed using exactly the letters provided. The function should take two arguments: 1. letters (a string): A group of letters. 2. wordList (a list of strings): A list of valid words. Output: Return all the possible words from the wordList that can be formed using exactly the letters provided. Each letter in the input letters can be used only once in the formation of each word. Example: Input: letters = \\"ate\\", wordList = [\\"tea\\", \\"ate\\", \\"eat\\", \\"bat\\", \\"tab\\"] Output: [\\"tea\\", \\"ate\\", \\"eat\\"] Note: - The output words can be in any order. - All inputs will be lower-case letters. - If no words can be formed, return an empty list. - The words in wordList can have different lengths, but only the words with the exact number of letters as the input \\"letters\\" can be formed.","solution":"def find_possible_words(letters, wordList): This function finds all possible words that can be formed using exactly the given letters from the provided word list. Parameters: letters (str): A string of given letters. wordList (list): A list of valid words. Returns: list: A list of words that can be formed using exactly the given letters. from collections import Counter letters_count = Counter(letters) result = [] for word in wordList: if Counter(word) == letters_count: result.append(word) return result"},{"question":"Write a function that takes a string and returns a dictionary with the counts of each vowel (a, e, i, o, u) in the string. The function should be case-insensitive and ignore non-vowel characters. For example, `solution(\\"Hello World!\\")` should return `{\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0}`. ~~~if:r ```r # in R, returns a named integer vector solution(\\"Hello World!\\") a e i o u 0 1 0 2 0 class(solution(\\"Hello World!\\")) [1] \\"integer\\" ``` ~~~ ~~~if:r,python ```python solution(\\"Hello World!\\") # {\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0} type(solution(\\"Hello World!\\")) # <class \'dict\'> ``` ~~~","solution":"def solution(s): Returns a dictionary with the counts of each vowel (a, e, i, o, u) in the string. The function is case-insensitive and ignores non-vowel characters. vowels = \\"aeiou\\" s = s.lower() vowel_counts = {vowel: s.count(vowel) for vowel in vowels} return vowel_counts"},{"question":"You are given a grid of size `n x m` where each cell has a cost associated with it. You want to find the minimum cost path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Write a function `minPathCost(grid: List[List[int]]) -> int` that returns the minimum cost of such a path. Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the cost. Note: - The dimensions of the grid `n` (number of rows) and `m` (number of columns) are in the range [1, 100]. - The cost of each cell is an integer in the range [0, 100].","solution":"from typing import List def minPathCost(grid: List[List[int]]) -> int: Returns the minimum cost path from the top-left to the bottom-right corner of the grid. Moves allowed are only to the right or down. n = len(grid) m = len(grid[0]) # Create a 2D dp array to store minimum path costs dp = [[0]*m for _ in range(n)] # Initialize the dp with the cost of the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer will be in the bottom-right corner return dp[-1][-1]"},{"question":"You are given a list of employees, where each employee is represented as a dictionary with three keys: - \'id\' (an integer, representing the employee\'s unique identifier) - \'importance\' (an integer, representing the importance value of the employee) - \'subordinates\' (a list of integers, representing the unique identifiers of the employee\'s subordinates) You need to implement a function, `get_importance(employees, id)`, that takes in two parameters: 1. `employees`: a list of dictionaries, each dictionary representing an employee. 2. `id`: an integer, representing the unique identifier of an employee whose total importance value is to be calculated. The total importance value of an employee is defined as the sum of their own importance value and the importance values of all their subordinates (and their subordinates\' subordinates, and so on). If an employee with the given `id` does not exist in the list, return 0. Example: ```python employees = [ {\'id\': 1, \'importance\': 5, \'subordinates\': [2, 3]}, {\'id\': 2, \'importance\': 3, \'subordinates\': [4]}, {\'id\': 3, \'importance\': 4, \'subordinates\': []}, {\'id\': 4, \'importance\': 1, \'subordinates\': []} ] get_importance(employees, 1) # should return 13 (5 + 3 + 4 + 1) get_importance(employees, 2) # should return 4 (3 + 1) get_importance(employees, 5) # should return 0 (no employee with id 5) ``` Write the `get_importance` function to solve the problem. Good luck!","solution":"def get_importance(employees, id): Returns the total importance value of an employee and their subordinates. Parameters: employees (list of dict): The list of employees with their details. id (int): The id of the employee whose importance value is to be calculated. Returns: int: The total importance value. emp_dict = {emp[\'id\']: emp for emp in employees} def dfs(emp_id): employee = emp_dict.get(emp_id, None) if not employee: return 0 total_importance = employee[\'importance\'] for sub_id in employee[\'subordinates\']: total_importance += dfs(sub_id) return total_importance return dfs(id)"},{"question":"Case-Sensitive Anagram Checker Design a function called `is_case_sensitive_anagram(s1, s2)` that determines whether two given strings `s1` and `s2` are anagrams of each other, considering case sensitivity. # Input - Two strings, `s1` and `s2`, where 1 <= len(s1), len(s2) <= 1000. The strings contain only alphabetic characters. # Output - The function should return `True` if `s1` and `s2` are case-sensitive anagrams of each other, and `False` otherwise. # Examples ``` is_case_sensitive_anagram(\\"Listen\\", \\"Silent\\") // False is_case_sensitive_anagram(\\"listen\\", \\"silent\\") // True is_case_sensitive_anagram(\\"Tom Marvolo Riddle\\", \\"I am Lord Voldemort\\") // False is_case_sensitive_anagram(\\"abc\\", \\"bca\\") // True is_case_sensitive_anagram(\\"abc\\", \\"abcd\\") // False is_case_sensitive_anagram(\\"abc\\", \\"abd\\") // False ``` # Clarifications - \\"Listen\\" and \\"Silent\\" are not case-sensitive anagrams since \\"L\\" and \\"S\\" differ from their lowercase counterparts. - Spaces are omitted in this example, but no spaces are included in actual input constraints. Only alphabetic characters are considered.","solution":"def is_case_sensitive_anagram(s1, s2): Determines if two strings are case-sensitive anagrams of each other. Args: - s1: First string - s2: Second string Returns: - True if s1 and s2 are anagrams of each other considering case sensitivity, otherwise False. return sorted(s1) == sorted(s2)"},{"question":"Your task is to implement a function that sorts an array, but with a twist: the sorting should be done based on the sum of the divisors for each element. If two elements have the same sum of divisors, maintain their relative order from the original array. You will receive an array of distinct positive integers, and you need to return the array sorted as per the above rules. Function Signature: ```python def divisor_sort(arr: List[int]) -> List[int]: ``` Constraints: - The length of the array will be between 1 and 1000. - Each element in the array will be between 1 and 1000. Explanation: 1. Calculate the sum of divisors for each element in the array. 2. Sort the elements primarily based on the sum of their divisors. 3. If two elements have the same sum, preserve their original order in the array. Example: ```python arr = [10, 6, 8] # 10 has divisors 1, 2, 5, 10 (sum = 18) # 6 has divisors 1, 2, 3, 6 (sum = 12) # 8 has divisors 1, 2, 4, 8 (sum = 15) # After sorting based on the sums of their divisors # [6, 8, 10] print(divisor_sort(arr)) # Output: [6, 8, 10] ```","solution":"from typing import List def sum_of_divisors(n: int) -> int: Calculate the sum of all divisors of a given number n. total = 0 for i in range(1, n + 1): if n % i == 0: total += i return total def divisor_sort(arr: List[int]) -> List[int]: Sort array based on the sum of divisors of each element. # Create a list of tuples (element, sum_of_divisors) sum_divisors_list = [(x, sum_of_divisors(x)) for x in arr] # Sort based on the sum of divisors and maintain the relative order using \'stable\' sort sorted_arr = sorted(sum_divisors_list, key=lambda x: x[1]) # Extract just the elements from the sorted list of tuples return [x[0] for x in sorted_arr]"},{"question":"Given a list of unique integers, find the length of the longest subsequence such that all elements of the subsequence are consecutive integers. The consecutive numbers can be in any order in the original list. Example 1: Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive subsequence is [1, 2, 3, 4]. Example 2: Input: [9, 1, 8, 7, 2, 3] Output: 3 Explanation: The longest consecutive subsequence is [1, 2, 3] or [7, 8, 9]. Note: 1 <= nums.length <= 1000 -10^6 <= nums[i] <= 10^6","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest subsequence such that all elements of the subsequence are consecutive integers. The consecutive numbers can be in any order in the original list. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # only check for the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a directed acyclic graph (DAG) with N nodes and M edges, write a program to find the number of paths from a given start node to a given end node. Each node is labeled with a unique integer from 0 to N-1. -----Input----- The first line of the input contains three integers N, M, and Q where N is the number of nodes, M is the number of edges, and Q is the number of queries. The next M lines each contain two integers u and v representing a directed edge from node u to node v. The next Q lines each contain two integers s and t representing a query where you need to find the number of paths from node s to node t. -----Output----- For each query, output a single line containing the number of paths from node s to node t. -----Constraints----- 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 100 0 ≤ u, v, s, t < N There are no self-loops or multiple edges in the graph. -----Examples----- Input: 4 4 2 0 1 0 2 1 3 2 3 0 3 1 3 Output: 2 1","solution":"from collections import defaultdict, deque def count_paths(N, M, edges, queries): graph = defaultdict(list) for u, v in edges: graph[u].append(v) def dfs(start, end): stack = deque([(start, 1)]) path_count = 0 while stack: node, path_length = stack.pop() if node == end: path_count += path_length else: for neighbor in graph[node]: stack.append((neighbor, path_length)) return path_count results = [] for s, t in queries: results.append(dfs(s, t)) return results"},{"question":"# Unique Element Filter Create a function named `filter_unique_elements` that takes an array of integers and returns a new array with duplicate elements removed. The order of elements in the returned array should follow their first appearance in the given array. ```python def filter_unique_elements(arr): # Function implementation goes here # Test cases print(filter_unique_elements([1, 2, 2, 3, 4, 4, 5])) # Should print [1, 2, 3, 4, 5] print(filter_unique_elements([4, 5, 6, 7, 4, 6, 8])) # Should print [4, 5, 6, 7, 8] print(filter_unique_elements([1, 2, 3])) # Should print [1, 2, 3] print(filter_unique_elements([1, 1, 1, 1])) # Should print [1] print(filter_unique_elements([])) # Should print [] ``` The function should efficiently handle arrays of any size within practical limits and preserve the order of the first occurrence of each element.","solution":"def filter_unique_elements(arr): Filters unique elements from the given array while preserving their first occurrence order. :param arr: List[int] - Input array of integers. :return: List[int] - Array with duplicates removed. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"The garden enthusiast needs your help to solve a series of plant arrangement problems. She wants to arrange plants in a specific pattern based on the inputs given. Can you help her code this plant arrangement problem based on the plants’ heights? -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of a single line of input, an integer N, representing the number of plants. The next line contains N integers, indicating the height of each plant in the garden. -----Output:----- For each test case, output a line with the plant heights rearranged in the following pattern: - Plants at odd indices first, followed by plants at even indices (considering 1-based index). -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 200 - 1 leq Height of each plant leq 1000 -----Sample Input:----- 2 4 10 20 30 40 5 5 15 25 35 45 -----Sample Output:----- 10 30 20 40 5 25 45 15 35 -----EXPLANATION:----- In the first test case, heights at odd indices (1-based) are [10, 30], and heights at even indices are [20, 40]. Combining them results in [10, 30, 20, 40]. In the second test case, heights at odd indices are [5, 25, 45], and heights at even indices are [15, 35]. Combining them results in [5, 25, 45, 15, 35].","solution":"def rearrange_plants(T, test_cases): Rearrange plant heights based on the 1-based indices: odd indices first, followed by even indices. Args: T : int : Number of test cases test_cases : List[Tuple[int, List[int]]] : List of tuples, where the first element is the number of plants and the second element is the list of plant heights Returns: List[List[int]] : List of rearranged plant heights based on the given pattern for each test case. results = [] for N, heights in test_cases: odd_heights = [heights[i] for i in range(N) if (i + 1) % 2 != 0] even_heights = [heights[i] for i in range(N) if (i + 1) % 2 == 0] results.append(odd_heights + even_heights) return results"},{"question":"You are participating in a cooking contest and have to follow a recipe that requires exact measurements. One of the ingredients needs to be scaled based on the number of servings. Normally, the recipe is for 4 servings, but you need to adjust it for any number of servings. You need to write a function that, given the original amount of the ingredient and the desired number of servings, will return the scaled amount of the ingredient. The amounts should be returned as floating-point numbers rounded to two decimal places. Examples ``` original_amount = 200, original_servings = 4, desired_servings = 2 => 100.00 original_amount = 150, original_servings = 4, desired_servings = 6 => 225.00 original_amount = 100, original_servings = 4, desired_servings = 1 => 25.00 original_amount = 75, original_servings = 4, desired_servings = 8 => 150.00 ``` # Notes 1. The function should handle various floating-point arithmetic scenarios. 2. The original amount is the amount of the ingredient for the original number of servings. 3. The desired servings can be any non-negative integer. 4. The returned scaled amount should always be a float rounded to two decimal places.","solution":"def scale_ingredient(original_amount, original_servings, desired_servings): Returns the scaled amount of the ingredient based on the desired number of servings. Args: original_amount (float): The original amount of the ingredient. original_servings (int): The original number of servings. desired_servings (int): The desired number of servings. Returns: float: The scaled amount of the ingredient, rounded to two decimal places. if desired_servings == 0: return 0.00 scaled_amount = (original_amount / original_servings) * desired_servings return round(scaled_amount, 2)"},{"question":"Write a function called `find_duplicates` that takes a list of integers and returns a list containing the duplicate elements in the original list. Each duplicate element should appear only once in the result. ```python find_duplicates([1, 2, 3, 3, 2, 4, 5, 6, 6, 7]) # returns [2, 3, 6] ```","solution":"def find_duplicates(nums): Returns a list of duplicate elements in the input list nums. Each duplicate element will appear only once in the result. seen = set() duplicates = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return list(duplicates)"},{"question":"Given an integer n, return the number of trailing zeros in n!. Note that n! denotes the factorial of n. Example 1: Input: n = 3 Output: 0 Explanation: 3! = 6, which has no trailing zeros. Example 2: Input: n = 5 Output: 1 Explanation: 5! = 120, which has one trailing zero. Example 3: Input: n = 100 Output: 24 Constraints: 1 <= n <= 10^4","solution":"def trailing_zeroes(n): Returns the number of trailing zeros in n!. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"Write a function that takes an integer `n` as input and returns a list of integers representing the Fibonacci sequence up to the `n`-th term. Example: ``` n = 1 --> [0] n = 2 --> [0, 1] n = 5 --> [0, 1, 1, 2, 3] n = 10 --> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def fibonacci(n): Returns a list of integers representing the Fibonacci sequence up to the n-th term. if n <= 0: return [] fib_sequence = [0] if n > 1: fib_sequence.append(1) for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given a list of words, your task is to group the anagrams together. Two words are anagrams if they contain the exact same characters with the exact same frequency. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other, as they use the same characters with the same frequencies. You are given a list of words, and you need to return a list of lists, where each inner list contains words that are anagrams of each other. ```Input```: A list of strings. ```Output```: A list of lists of strings. Example: ```python group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) == [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] group_anagrams([\\"\\"]) == [[\\"\\"]] group_anagrams([\\"a\\"]) == [[\\"a\\"]] ```","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams from the given list of words. Parameters: words (list of str): A list of strings. Returns: list of list of str: A list of lists where each inner list contains anagram words. anagram_groups = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_groups[sorted_word].append(word) return list(anagram_groups.values())"},{"question":"Aman loves solving puzzles and recently came across this one while reading a science fiction novel. Here is the problem statement: Aman has found a magical grid of size N times M. Each cell (i, j) in the grid contains a number G_{i,j} which is either 0 or 1. He is curious about finding the largest square sub-grid which contains 1 in all its cells. Aman seeks your help in determining the size of the largest square sub-grid filled with 1s for multiple grids. -----Input:----- - The first line contains T, the number of test cases. - For each test case: - First line contains two integers N and M, the dimensions of the grid. - Next N lines each contain M integers (either 0 or 1), representing the grid G. -----Output:----- For each test case, print an integer denoting the size of the largest square sub-grid containing only 1s. -----Constraints----- - 1 leq T leq 10 - 1 leq N, M leq 1000 - 0 leq G_{i,j} leq 1 -----Sample Input:----- 2 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 3 3 1 1 1 1 1 0 1 1 1 -----Sample Output:----- 2 2 -----Explanation:----- For the first test case, the largest square sub-grid of 1s has size 2x2. For the second test case, the largest square sub-grid of 1s also has size 2x2.","solution":"def largest_square_subgrid_size(test_cases): results = [] for case in test_cases: N, M, grid = case dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) results.append(max_side) return results"},{"question":"Linda is a software engineer working on a project that involves tracking the inventory of items in a warehouse. The items are stacked in multiple boxes and each box can contain a different number of items. Due to some limitations, Linda wants to ensure that each box contains an equal number of items, and the remaining items that cannot be equally distributed among the boxes should be set aside as surplus. She has a number of boxes and a number of items, and she needs to figure out how many items each box will contain and how many items will be left over as surplus after attempting to distribute them evenly. Your task is to help Linda by writing a program that, given the number of boxes and the total number of items, calculates and outputs the number of items each box will contain and the surplus items left over. -----Input----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case consists of two space-separated integers, B and I, where B is the number of boxes and I is the total number of items. -----Output----- For each test case, output a single line containing two space-separated integers, the first one being the number of items each box will contain, followed by the number of surplus items left over. -----Constraints----- - T <= 100 - 0 <= B, I <= 10^9 -----Example----- Input: 3 8 25 5 100 3 7 Output: 3 1 20 0 2 1 -----Explanation----- For the first test case, each of the 8 boxes will contain 3 items, and 1 item will be left as surplus. For the second test case, each of the 5 boxes will contain 20 items, with no surplus items left. For the third test case, each of the 3 boxes will contain 2 items, and 1 item will be left as surplus.","solution":"def distribute_items(T, test_cases): results = [] for case in test_cases: B, I = case if B == 0: results.append((0, I)) # if no boxes, all items are surplus else: items_per_box = I // B surplus_items = I % B results.append((items_per_box, surplus_items)) return results # Helper function to format the output def format_output(results): return \\"n\\".join(f\\"{each[0]} {each[1]}\\" for each in results)"},{"question":"In a small town, there are C coffee shops, each identified by a unique integer from 1 to C, and a certain number of roads connecting them. Each road has a length represented by a positive integer. You are an enthusiast who wants to visit the coffee shops but would like to minimize the total length of the roads traveled. Unfortunately, you do not have any information on which coffee shops are directly connected by roads. Your goal is to determine the minimal road distance needed to visit all coffee shops starting from any coffee shop and coming back to the same coffee shop (i.e., form a cycle that visits each coffee shop exactly once). -----Input:----- - The first line of input contains two space-separated integers C and R, denoting the number of coffee shops and roads, respectively. - Each of the next R lines contains three space-separated integers u, v, and w, representing a road between coffee shop u and coffee shop v with length w. -----Output:----- Output a single integer, which is the minimal total road length to visit all the coffee shops in a cycle, or -1 if it is not possible to form such a cycle. -----Constraints----- - 2 leq C leq 12 - 1 leq R leq frac{C times (C - 1)}{2} - 1 leq w leq 1000 -----Sample Input:----- 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 -----Sample Output:----- 80 -----EXPLANATION:----- One possible minimal road length cycle to visit all 4 coffee shops: 1 -> 2 -> 4 -> 3 -> 1 with a total road length of 10 + 25 + 30 + 15 = 80","solution":"def minimal_cycle_length(C, R, roads): import sys from itertools import permutations # Initialize the adjacency matrix with sys.maxsize (to indicate no direct path initially) adj_matrix = [[sys.maxsize] * C for _ in range(C)] # Populate the adjacency matrix for u, v, w in roads: adj_matrix[u - 1][v - 1] = w adj_matrix[v - 1][u - 1] = w # Use a brute-force approach to solve the TSP problem due to small C coffee_shops = list(range(C)) min_cost = sys.maxsize for perm in permutations(coffee_shops): current_cost = 0 is_valid = True for i in range(C): if adj_matrix[perm[i - 1]][perm[i]] == sys.maxsize: is_valid = False break current_cost += adj_matrix[perm[i - 1]][perm[i]] if is_valid: min_cost = min(min_cost, current_cost) return min_cost if min_cost != sys.maxsize else -1"},{"question":"You are given an array a of n integers. Your task is to determine if it is possible to rearrange the elements of the array such that no two consecutive elements have the same greatest common divisor (GCD). To achieve this, you can swap any two elements of the array any number of times. -----Input----- The first line of the input contains one integer q (1 le q le 10^4) — the number of test cases. Then q test cases follow. The first line of each test case contains one integer n (1 le n le 2 cdot 10^5) — the number of elements in the array a. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. The sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print \\"YES\\" if it is possible to rearrange the array such that no two consecutive elements have the same GCD, and \\"NO\\" otherwise. -----Example----- Input 4 3 2 3 5 4 6 10 15 20 5 4 8 12 16 20 4 7 14 21 28 Output YES YES NO NO","solution":"import math from functools import reduce def find_gcd_of_array(arr): return reduce(math.gcd, arr) def can_rearrange(q, test_cases): results = [] for i in range(q): n = test_cases[i][0] arr = test_cases[i][1] array_gcd = find_gcd_of_array(arr) if array_gcd == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are organizing a park run, and every participant must check in at several checkpoints to record their progress. Each checkpoint has a unique number, and participants must check in at every checkpoint exactly once. The timing system logs the checkpoint number each time a participant checks in. Given the list of checkpoints each participant has visited, determine if they have visited all checkpoints exactly once. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains an integer N, the number of checkpoints. - The second line contains N space-separated integers, representing the checkpoint numbers in the order they were visited. -----Output:----- For each test case, output \\"YES\\" if the participant visited each checkpoint exactly once, otherwise \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - Each checkpoint number is unique and is between 1 and N inclusive. -----Sample Input:----- 2 5 1 2 3 4 5 4 1 2 2 4 -----Sample Output:----- YES NO","solution":"def check_checkpoints(T, test_cases): results = [] for i in range(T): N, checkpoints = test_cases[i] if len(set(checkpoints)) == N: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Task: Write a function `find_pairs_with_sum` that takes an array of integers and a target sum, and returns a list of pairs (two-element tuples) that add up to the target sum. Each pair should be sorted in ascending order and the list of pairs should be sorted lexicographically. # Example ```python >>> find_pairs_with_sum([1, 5, 3, 7, -1, 5], 6) [(1, 5), (-1, 7)] >>> find_pairs_with_sum([2, 4, 3, 5, -2, 2, 4], 6) [(2, 4)] >>> find_pairs_with_sum([0, 0, 0, 0], 0) [(0, 0), (0, 0)] ``` # Constraints - Each input array can contain up to 1000 integers. - Each integer in the array ranges from -1000 to 1000. - The function should return an empty list if no such pairs are found.","solution":"def find_pairs_with_sum(arr, target): Returns a list of pairs (tuples) where the sum is equal to the target sum. Each pair is sorted in ascending order, and the list of pairs is sorted lexicographically. arr.sort() pairs = [] seen = set() for num in arr: complement = target - num if complement in seen: pairs.append((min(num, complement), max(num, complement))) seen.add(num) # Remove duplicate pairs pairs = list(set(pairs)) # Sort the list of pairs lexicographically pairs.sort() return pairs"},{"question":"Catherine is passionate about palindromes - strings that read the same backward as forward. Recently, she has become interested in finding the longest palindromic substring within a given string S. She now wants you to help her with this task. For each given string, determine the longest substring that is a palindrome. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a string S, consisting of lowercase Latin letters. -----Output----- For each test case, output a single line containing the longest palindromic substring in the given string. In case of multiple answers, return the lexicographically smallest one. -----Constraints----- - 1 ≤ T ≤ 100 - Subtask 1 (35 points): 1 ≤ |S| ≤ 5 - Subtask 2 (65 points): 1 ≤ |S| ≤ 104 -----Example----- Input:3 babad cbbd aaaa Output: bab bb aaaa -----Explanation----- Example case 1. The longest palindromic substrings are \\"bab\\" and \\"aba\\". Since \\"aba\\" is lexicographically smaller, the output is \\"bab\\". Example case 2. The longest palindromic substrings are \\"bb\\".","solution":"def longest_palindromic_substring(S): Given a string S, return the longest palindromic substring in S. If there are multiple longest palindromic substrings, return the lexicographically smallest one. n = len(S) if n == 0: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(n): # Odd length palindromes odd_palindrome = expand_around_center(S, i, i) if len(odd_palindrome) > len(longest) or (len(odd_palindrome) == len(longest) and odd_palindrome < longest): longest = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(S, i, i + 1) if len(even_palindrome) > len(longest) or (len(even_palindrome) == len(longest) and even_palindrome < longest): longest = even_palindrome return longest def solve_palindromes(T, test_cases): results = [] for S in test_cases: results.append(longest_palindromic_substring(S)) return results"},{"question":"You are given an island represented as a two-dimensional grid of land (1) and water (0) cells. Your task is to count the number of distinct islands. An island is surrounded by water and is formed by connecting adjacent land cells horizontally or vertically. Each grid cell is either 0 or 1. Two islands are considered distinct if and only if one island is not a translation (shifted version) of the other. Define function `countDistinctIslands(grid: List[List[int]]) -> int` that takes a 2D grid and returns the number of distinct islands in the grid. # Input - A two-dimensional list of integers, `grid`. # Output - An integer representing the number of distinct islands. # Example ```python # Using the grid: grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0] ] # The function should return: # 3 distinct islands are: # [[(0,0), (0,1), (1,0), (1,1)], # [(1,4), (2,3), (2,4)], # [(4,1), (4,2)]] print(countDistinctIslands(grid)) # Output: 3 ``` # Constraints - The dimensions of the grid are at most 100 x 100. - No two adjacent land cells diagonally form an island. # Note 1. Consider using a set to keep track of unique shapes. 2. To define the shape, consider the relative position of each cell to the first cell encountered of an island during a DFS/BFS traversal. **Function Signature:** ```python def countDistinctIslands(grid: List[List[int]]) -> int: pass ```","solution":"from typing import List, Tuple, Set def countDistinctIslands(grid: List[List[int]]) -> int: def dfs(r: int, c: int, origin_r: int, origin_c: int, shape: List[Tuple[int, int]]) -> None: stack = [(r, c)] while stack: x, y = stack.pop() if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1: grid[x][y] = -1 # mark as visited shape.append((x - origin_r, y - origin_c)) stack.extend([(x+1, y), (x-1, y), (x, y+1), (x, y-1)]) shapes: Set[Tuple[Tuple[int, int], ...]] = set() for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == 1: shape: List[Tuple[int, int]] = [] dfs(r, c, r, c, shape) shapes.add(tuple(shape)) return len(shapes)"},{"question":"Description In this problem, you will simulate a simplified version of the game \\"Conwy Monopoly\\" famously played in Conwy, Wales. The game comprises two players each of whom starts with a fixed amount of money. Players take turns rolling two six-sided dice. Depending on the outcome of the roll, players may go to jail, receive money or pay money. The game ends when any player goes bankrupt (i.e., their money falls below zero). # Game Rules 1. **Starting conditions**: Each player starts with 1000. 2. **Turns**: Players take turns to roll two six-sided dice (sum between 2 and 12). 3. **Dice outcomes**: - If the roll is 7, the player goes to jail and must pay 200. - If the roll is double (e.g., 1-1, 2-2, etc.), the player receives 100. - Otherwise, the player neither gains nor loses money. 4. **Bankruptcy**: The game ends when one or both players\' money falls below 0. The player with the higher account balance wins. 5. **Money Reduction**: If after a turn a player\'s money drops below zero, the player is considered bankrupt immediately and loses the game. # Input: A list of tuples representing the dice rolls for each turn, starting with player 1. Assume the game will have at most 100 dice rolls. # Output: Return the number (1 or 2) of the player who wins. If both players go bankrupt in the same turn, return `0`. # Example ```python game_simulation([(3, 4), (5, 5), (1, 6), (1, 2)]) ``` - **Explanation**: - Player 1 rolls (3, 4): Total is 7, Player 1 pays 200, new balance 800 - Player 2 rolls (5, 5): Double, Player 2 receives 100, new balance 1100 - Player 1 rolls (1, 6): Total is 7, Player 1 pays 200, new balance 600 - Player 2 rolls (1, 2): Total is 3, no effect on balance, new balance 1100 Since neither player goes bankrupt, the final balances are 600 and 1100 respectively, so player 2 wins. ```python assert game_simulation([(3, 4), (5, 5), (1, 6), (1, 2)]) == 2 ``` ```python assert game_simulation([(6, 6), (3, 4), (1, 3), (2, 3), (3, 3)]) == 1 ``` Your Task Write a function `game_simulation` that takes a list of tuples representing dice rolls (each tuple contains two integers between 1 and 6 inclusive) and returns either 1 or 2 indicating the player who wins, or 0 if both go bankrupt in the same turn. ```python def game_simulation(rolls): pass ```","solution":"def game_simulation(rolls): Simulates the Conwy Monopoly game based on the given dice rolls. Args: rolls (list of tuples): A list of tuples where each tuple represents a dice roll (two integers between 1 and 6). Returns: int: The player number of the winner (1 or 2) or 0 if both players go bankrupt in the same turn. # Initial setup: both players start with 1000 dollars player1_money = 1000 player2_money = 1000 # Iterate over the rolls for i, roll in enumerate(rolls): current_player = 1 if i % 2 == 0 else 2 roll_sum = sum(roll) if current_player == 1: if roll_sum == 7: player1_money -= 200 elif roll[0] == roll[1]: player1_money += 100 else: if roll_sum == 7: player2_money -= 200 elif roll[0] == roll[1]: player2_money += 100 # Check if any player goes bankrupt if player1_money < 0 and player2_money < 0: return 0 elif player1_money < 0: return 2 elif player2_money < 0: return 1 # If the loop ends and no player has gone bankrupt, the player with higher money wins if player1_money > player2_money: return 1 elif player2_money > player1_money: return 2 else: return 0"},{"question":"Given a matrix represented as a list of lists, write a function that returns the length of the longest increasing path in the matrix. An increasing path is one where each subsequent value is greater than the previous value. You can move in four possible directions: up, down, left, or right. # Constraints - The matrix will have dimensions `m x n` where `1 <= m, n <= 200`. - The values of the matrix will be integers ranging from `-10^4` to `10^4`. # Input - A list of lists `matrix` representing the grid. # Output - An integer representing the length of the longest increasing path. # Example Example 1 **Input**: ``` matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` **Output**: ``` 4 ``` **Explanation**: The longest increasing path is `[1, 2, 6, 9]`. Example 2 **Input**: ``` matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] ``` **Output**: ``` 4 ``` **Explanation**: The longest increasing path is `[3, 4, 5, 6]`. Example 3 **Input**: ``` matrix = [ [1] ] ``` **Output**: ``` 1 ``` **Explanation**: The longest increasing path is `[1]`. # Function signature ```python def longest_increasing_path(matrix: List[List[int]]) -> int: pass ```","solution":"def longest_increasing_path(matrix): Given a matrix, returns the length of the longest increasing path in the matrix. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) memo = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if memo[r][c] != -1: return memo[r][c] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_len = 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]: length = 1 + dfs(nr, nc) max_len = max(max_len, length) memo[r][c] = max_len return max_len longest_path = 0 for r in range(rows): for c in range(cols): longest_path = max(longest_path, dfs(r, c)) return longest_path"},{"question":"You are given an array of integers `nums` and another integer `target`. Your goal is to find out if there are exactly two distinct indices `i` and `j` in the array `nums` such that `nums[i] + nums[j] = target`. Return `true` if such indices exist and `false` otherwise. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: Because nums[0] + nums[1] = 2 + 7 = 9, we return true. Example 2: Input: nums = [3, 2, 4], target = 6 Output: true Explanation: Because nums[1] + nums[2] = 2 + 4 = 6, we return true. Example 3: Input: nums = [1, 2, 3, 4, 5], target = 10 Output: false Explanation: There is no pair of distinct indices such that the sum of their values equals to the target. Example 4: Input: nums = [3, 6, 3], target = 6 Output: true Explanation: Because nums[0] + nums[2] = 3 + 3 = 6, we return true. Constraints: - 2 <= nums.length <= 10^5 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Determines if there are two distinct indices i and j in the array \'nums\' such that nums[i] + nums[j] equals \'target\'. Args: nums: List[int] - The list of integers. target: int - The target sum we\'re looking for. Returns: bool - True if such a pair exists, False otherwise. num_dict = {} for index, num in enumerate(nums): complement = target - num if complement in num_dict: return True num_dict[num] = index return False"},{"question":"**Dynamic FizzBuzz** Write a function called `dynamic_fizzbuzz()` that takes in three arguments: `start`, `end`, and `terms`. The function prints the numbers from `start` to `end` (both inclusive), but for multiples of any key in the `terms` dictionary, it prints the corresponding value from the dictionary instead of the number. For example, if the `terms` dictionary is `{3: \\"Fizz\\", 5: \\"Buzz\\"}`, and the number is a multiple of both 3 and 5, it should print \\"FizzBuzz\\". Similarly, if a number is a multiple of 3 but not 5, it should print \\"Fizz\\". Function Signature: ```python def dynamic_fizzbuzz(start: int, end: int, terms: dict) -> None: ``` # Example Usage ```python terms = {3: \\"Fizz\\", 5: \\"Buzz\\"} dynamic_fizzbuzz(1, 15, terms) # Output: 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz ``` # Constraints - `start` and `end` are both integers where `start <= end`. - `terms` is a dictionary where keys are positive integers and values are strings. All values are unique. - Ensure the output is printed line by line.","solution":"def dynamic_fizzbuzz(start: int, end: int, terms: dict) -> None: Prints numbers from start to end inclusive. For multiples of any key in the terms dictionary, prints the corresponding term instead of the number. for num in range(start, end + 1): output = \\"\\" for key, value in terms.items(): if num % key == 0: output += value print(output or num)"},{"question":"A library wants to reorganize its books. Each bookshelf in the library has S sections, and each section can hold exactly B books. The library has a total of N books that need to be organized. Your task is to determine whether all the books can fit into the given bookshelves. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains three integers S, B, and N, representing the number of sections per bookshelf, the capacity of each section in terms of the number of books, and the total number of books respectively. -----Output:----- For each test case, output \\"Yes\\" if all the books can be organized within the bookshelves, otherwise output \\"No\\". -----Constraints----- - 1 leq T leq 100 - 1 leq S, B leq 1000 - 1 leq N leq 10^6 -----Sample Input:----- 2 10 50 450 5 20 200 -----Sample Output:----- Yes No","solution":"def can_organize_books(T, test_cases): results = [] for S, B, N in test_cases: capacity = S * B if N <= capacity: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"A superhuman is writing a secret code to communicate with another superhero. The code is written using alphanumeric characters, and the superhuman wants a way to encode each word in the message by reversing the characters in each word while keeping the words in their original order. -----Input----- The input consists of a single line string, where words are separated by spaces. The string contains only alphanumeric characters and spaces. There will be at least one word present in the input. -----Output----- The output should be a single line string where each word from the input is encoded by reversing its characters, while the sequence of the words remains the same. -----Example----- Input: hello world 123 Output: olleh dlrow 321","solution":"def encode_message(message): Reverses the characters in each word while keeping the words in their original order. Parameters: message (str): A string consisting of alphanumeric words separated by spaces. Returns: str: A string where each word is reversed. words = message.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"A robot is located at the top-left corner of an m times n grid (marked \'Start\' in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). ``` [ Start ][ ][ ][ ][ ... ][ ][ ][ Finish ] [ ][ ][ ][ ][ ... ][ ][ ][ ] [ ][ ][ ][ ][ ... ][ ][ ][ ] . . . [ ][ ][ ][ ][ ... ][ ][ ][ ] ``` There are some obstacles on the grid marked as `1`, where the robot cannot pass through, and free cells marked as `0`. Find the number of unique paths that the robot can take to reach the bottom-right corner of the grid. -----Input----- The first line contains two integers m and n (1 le m, n le 1000) – the number of rows and columns of the grid. Each of the next m lines contains n integers (either 0 or 1) representing the grid. -----Output----- Print a single integer - the number of unique paths to reach the bottom-right corner of the grid from the top-left corner. -----Example----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Sarah is working on a file synchronization tool. She needs to identify which files have been updated in a set of directories. Each directory has a unique identifier and contains a number of files, each with a unique name. Your task is to write a program that takes snapshots of two states of directories and identifies files that have been added, removed, or have their timestamps changed. Each file has the following attributes: - `name`: The name of the file. - `timestamp`: The last modified timestamp of the file. You need to compare two snapshots of the directories and determine which files are added, removed, or updated. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of directories. The following 2n lines describe the state of directories at two different times. For each state of directories: - The first line contains the directory identifier (an integer). - The second line contains an integer f (0 ≤ f ≤ 10000) — the number of files in this directory. - The next `f` lines each contain a string `name` and an integer `timestamp` describing the file in this directory. -----Output----- For each directory, print the results in this order: - First the directory identifier. - Then the files that were added. - Then the files that were removed. - Then the files that were updated with new timestamps. Each of the above sections should be prefixed by \\"Added:\\", \\"Removed:\\", and \\"Updated:\\", respectively. If there are no changes in any of the sections, print \\"None.\\" -----Example----- Input 2 1 3 file1 123 file2 456 file3 789 2 2 fileA 111 fileB 222 1 4 file1 123 file2 999 file4 555 file5 999 2 1 fileA 111 Output 1 Added: file4 555 file5 999 Removed: file3 Updated: file2 999 2 Added: fileB Removed: None Updated: None -----Note----- In the first directory: - file4 and file5 were added. - file3 was removed. - file2 was updated with a new timestamp. In the second directory: - fileB was removed. - No files were added or updated.","solution":"def compare_snapshots(n, snapshot1, snapshot2): def parse_snapshot(snapshot): parsed_snapshot = {} for dir_id, files in snapshot: parsed_snapshot[dir_id] = {} for name, timestamp in files: parsed_snapshot[dir_id][name] = timestamp return parsed_snapshot result = [] snapshot1_parsed = parse_snapshot(snapshot1) snapshot2_parsed = parse_snapshot(snapshot2) for dir_id in range(1, n + 1): added = [] removed = [] updated = [] files1 = snapshot1_parsed.get(dir_id, {}) files2 = snapshot2_parsed.get(dir_id, {}) for file_name, timestamp in files2.items(): if file_name not in files1: added.append((file_name, timestamp)) elif files1[file_name] != timestamp: updated.append((file_name, timestamp)) for file_name in files1.keys(): if file_name not in files2: removed.append(file_name) result.append(f\\"{dir_id}\\") if added: result.append(\\"Added:\\") for file in added: result.append(f\\"{file[0]} {file[1]}\\") else: result.append(\\"Added:\\") result.append(\\"None\\") if removed: result.append(\\"Removed:\\") for file in removed: result.append(file) else: result.append(\\"Removed:\\") result.append(\\"None\\") if updated: result.append(\\"Updated:\\") for file in updated: result.append(f\\"{file[0]} {file[1]}\\") else: result.append(\\"Updated:\\") result.append(\\"None\\") return \\"n\\".join(result) # Example run n = 2 snapshot1 = [ (1, [(\\"file1\\", 123), (\\"file2\\", 456), (\\"file3\\", 789)]), (2, [(\\"fileA\\", 111), (\\"fileB\\", 222)]), ] snapshot2 = [ (1, [(\\"file1\\", 123), (\\"file2\\", 999), (\\"file4\\", 555), (\\"file5\\", 999)]), (2, [(\\"fileA\\", 111)]), ] print(compare_snapshots(n, snapshot1, snapshot2))"},{"question":"Write a function that generates all possible case permutations of an input string. The input string will only contain alphabetic characters. A case permutation of the string preserves the position of each character but allows each character to be either uppercase or lowercase. For example: - Input: \'aB\' - Output: [\'ab\', \'aB\', \'Ab\', \'AB\'] - Input: \'xyz\' - Output: [\'xyz\', \'xyZ\', \'xYz\', \'xYZ\', \'Xyz\', \'XyZ\', \'XYz\', \'XYZ\'] Note: 1. The returned list can be in any order. 2. The length of the input string will not exceed 12 characters.","solution":"def case_permutations(s): Generates all possible case permutations of the input string. def backtrack(sub=\\"\\", index=0): if index == len(s): permutations.append(sub) else: backtrack(sub + s[index].lower(), index + 1) backtrack(sub + s[index].upper(), index + 1) permutations = [] backtrack() return permutations"},{"question":"A popular social media company wants to enhance its network by suggesting new friends to users based on their mutual connections. Can you create an algorithm that provides friend suggestions? Task: Write a function that takes in a user and their friends network, then suggests friends of friends who are not already direct friends with the user. The function should return a list of suggested friends ranked by the number of mutual friends they have with the user. The network will be represented as a dictionary where the keys are the user\'s names and the values are sets of friends for that user. ```python def suggest_friends(user: str, friends_network: Dict[str, Set[str]]) -> List[str]: pass ``` # Parameters: - `user` (str): The name of the user for whom the friend suggestions need to be generated. - `friends_network` (Dict[str, Set[str]]): A dictionary where keys are user names and values are sets of direct friends. # Returns: - `List[str]`: A list of suggested friends ordered by the number of mutual friends in descending order. # Example: ```python friends_network = { \\"Alice\\": {\\"Bob\\", \\"Charlie\\"}, \\"Bob\\": {\\"Alice\\", \\"Charlie\\", \\"David\\"}, \\"Charlie\\": {\\"Alice\\", \\"Bob\\", \\"Eve\\"}, \\"David\\": {\\"Bob\\"}, \\"Eve\\": {\\"Charlie\\"} } suggest_friends(\\"Alice\\", friends_network) ``` This should return: ```python [\\"David\\", \\"Eve\\"] ``` # Explanation: - For Alice, mutual friends with David is `{\\"Bob\\"}`. - Mutual friends with Eve is `{\\"Charlie\\"}`. - Both David and Eve have 1 mutual friend with Alice. Since the numbers are tied, they can be returned in any order. Note: Ensure the algorithm performs efficiently even with a large network of users.","solution":"from typing import Dict, Set, List from collections import defaultdict def suggest_friends(user: str, friends_network: Dict[str, Set[str]]) -> List[str]: mutual_friends_count = defaultdict(int) user_friends = friends_network.get(user, set()) for friend in user_friends: for mutual_friend in friends_network.get(friend, set()): if mutual_friend != user and mutual_friend not in user_friends: mutual_friends_count[mutual_friend] += 1 sorted_suggestions = sorted(mutual_friends_count.keys(), key=lambda x: (-mutual_friends_count[x], x)) return sorted_suggestions"},{"question":"Write a function that takes an array of integers and returns the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity. Here is an example code: var longestConsecutive = function(nums) { // code to implement the function }; For example: Given nums = [100, 4, 200, 1, 3, 2], The method should return 4, since the longest consecutive sequence is [1, 2, 3, 4]. Note: The consecutive numbers can be in any order within the array.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Binary Search Trees - Find Minimum and Maximum Write a function, findMinAndMax(), which finds and returns the minimum and maximum values in a Binary Search Tree (BST). The function takes the root of a BST as its argument and should return a tuple containing the minimum and maximum values respectively. You may assume that the BST contains at least one node. Hint: Utilize the properties of a BST where the left subtree contains values less than the root and the right subtree contains values greater than the root.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.value = key def findMin(root): current = root while current.left is not None: current = current.left return current.value def findMax(root): current = root while current.right is not None: current = current.right return current.value def findMinAndMax(root): Finds the minimum and maximum values in a Binary Search Tree. Args: root (TreeNode): The root of the Binary Search Tree. Returns: tuple: A tuple containing the minimum and maximum values. if root is None: return (None, None) # Returning None for empty tree min_value = findMin(root) max_value = findMax(root) return (min_value, max_value)"},{"question":"# Word Ladder Transformation Given two words (start and end), and a dictionary\'s word list, find the length of the shortest transformation sequence from start to end, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the word list. Return the length of the sequence. If no such sequence exists, return 0. Note: - All words have the same length. - All words contain only lowercase alphabetic characters. - You may assume no duplicates in the word list. - You may assume start and end are non-empty and are not the same. Example: ```python start = \\"hit\\" end = \\"cog\\" word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] Output: 5 Explanation: As one shortest transformation is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", return its length 5. ``` Another Example: ```python start = \\"hit\\" end = \\"cog\\" word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] Output: 0 Explanation: The end word \\"cog\\" is not in the word list, so there is no possible transformation. ``` Please implement a function or method signature that will solve this problem in any programming language of your choice.","solution":"from collections import deque def word_ladder_length(start, end, word_list): Returns the length of the shortest transformation sequence from start to end using the given word list. :param start: The starting word. :param end: The end word. :param word_list: List of allowed words for transformation. :return: The length of the transformation sequence. if end not in word_list: return 0 word_list = set(word_list) queue = deque([(start, 1)]) while queue: current_word, length = queue.popleft() if current_word == end: return length for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_list: queue.append((next_word, length + 1)) word_list.remove(next_word) return 0"},{"question":"Implement a Stack Data Structure You need to create a stack data structure with three basic operations: push, pop, and peek. A stack is a collection of elements with two principal operations: - **Push:** adds an element to the collection. - **Pop:** removes the last added element that was not yet removed. - **Peek:** returns the last element added without removing it. Your task is to: 1. Implement the stack using a class. The stack should be able to store elements of any data type. 2. Ensure the stack has methods for push, pop, and peek. 3. Handle edge cases such as popping or peeking from an empty stack gracefully (e.g., by raising an appropriate exception). # Example: ```python class Stack: def __init__(self): # Initialize an empty stack self.items = [] def push(self, item): # Add item to the stack self.items.append(item) def pop(self): # Remove and return the last item from the stack if not self.is_empty(): return self.items.pop() else: raise IndexError(\\"pop from an empty stack\\") def peek(self): # Return the last item without removing it if not self.is_empty(): return self.items[-1] else: raise IndexError(\\"peek from an empty stack\\") def is_empty(self): # Check if the stack is empty return len(self.items) == 0 # Example usage stack = Stack() stack.push(1) stack.push(2) print(stack.peek()) # Output: 2 print(stack.pop()) # Output: 2 print(stack.pop()) # Output: 1 print(stack.pop()) # Raises IndexError: pop from an empty stack ```","solution":"class Stack: def __init__(self): # Initialize an empty stack self.items = [] def push(self, item): # Add item to the stack self.items.append(item) def pop(self): # Remove and return the last item from the stack if not self.is_empty(): return self.items.pop() else: raise IndexError(\\"pop from an empty stack\\") def peek(self): # Return the last item without removing it if not self.is_empty(): return self.items[-1] else: raise IndexError(\\"peek from an empty stack\\") def is_empty(self): # Check if the stack is empty return len(self.items) == 0"},{"question":"You are given a list of words and an integer k. Your task is to find the k most frequent words in the list. If multiple words have the same frequency, sort them alphabetically. Write a function that takes a list of strings and an integer k and returns a list of the k most frequent words in descending order of frequency. Words with the same frequency should be sorted alphabetically. Your function should have the following signature: ```python def top_k_frequent(words: List[str], k: int) -> List[str]: ``` **Examples:** ``` words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"word\\", \\"word\\", \\"word\\", \\"banana\\"] k = 2 top_k_frequent(words, k) -> [\\"word\\", \\"apple\\"] words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"word\\", \\"word\\", \\"banana\\", \\"pineapple\\"] k = 3 top_k_frequent(words, k) -> [\\"apple\\", \\"banana\\", \\"word\\"] words = [\\"a\\", \\"aa\\", \\"aaa\\"] k = 1 top_k_frequent(words, k) -> [\\"a\\"] words = [\\"a\\", \\"aa\\", \\"aaa\\", \\"bb\\", \\"b\\", \\"bb\\"] k = 2 top_k_frequent(words, k) -> [\\"bb\\", \\"a\\"] ``` **Constraints:** - You may assume that `k` is always valid and `k` is always less than or equal to the number of unique words. - The length of the list will not exceed 10,000. - Each word is a string of lowercase English letters, and its length will not exceed 10.","solution":"from typing import List from collections import Counter def top_k_frequent(words: List[str], k: int) -> List[str]: Returns the k most frequent words in the list. Words with the same frequency are sorted alphabetically. count = Counter(words) frequent_words = sorted(count.items(), key=lambda x: (-x[1], x[0])) return [word for word, _ in frequent_words[:k]]"},{"question":"# Check for palindrome with customization Write a function that checks whether a given string is a palindrome, with a twist. The function should ignore all non-alphabetic characters and perform a case-insensitive comparison. Additionally, the function should take a boolean parameter that determines whether spaces should be considered. The function should be named `is_custom_palindrome` and have the following signature: ``` def is_custom_palindrome(s: str, consider_spaces: bool) -> bool: ``` Here is the detailed requirement: - If `consider_spaces` is `True`, spaces should be considered in the comparison. - If `consider_spaces` is `False`, spaces should be ignored during the comparison. - Ignore all non-alphabetic characters (such as numbers, punctuation, etc.) in both cases. - Perform case-insensitive comparison. For example: ```python is_custom_palindrome(\\"A man, a plan, a canal, Panama\\", False) # should return True is_custom_palindrome(\\"A man, a plan, a canal, Panama\\", True) # should return False is_custom_palindrome(\\"No \'x\' in Nixon\\", False) # should return True is_custom_palindrome(\\"Eva, can I see bees in a cave?\\", False) # should return True is_custom_palindrome(\\"Eva, can I see bees in a cave!\\", True) # should return False ``` Ensure that the function handles edge cases such as empty strings or strings with only non-alphabetic characters gracefully.","solution":"def is_custom_palindrome(s: str, consider_spaces: bool) -> bool: Checks if the string s is a palindrome considering only alphabetic characters. Parameters: s (str): The input string to check. consider_spaces (bool): If True, spaces are considered in the comparison, otherwise they are ignored. Returns: bool: True if s is a palindrome, False otherwise. filtered_chars = [] for char in s: if char.isalpha() or (consider_spaces and char == \' \'): filtered_chars.append(char.lower()) filtered_str = \'\'.join(filtered_chars) return filtered_str == filtered_str[::-1]"},{"question":"Alice has a sequence of numbers where each number is initially set to zero. She can perform the following operations with the sequence: 1. Increment any number in the sequence by 1, which costs `X` units of energy. 2. Double any number in the sequence, which costs `Y` units of energy. Initially, Alice has `N` units of energy. She wants to maximize the sum of the numbers in the sequence after using up as much energy as possible. Each operation must be performed on some number in the sequence when energy allows, and Alice will continue until she can no longer perform any operations with the remaining energy. -----Input----- The first line contains an integer `T` denoting the number of test cases. Each test case is described on a single line that contains three integers `N`, `X`, and `Y`. -----Output----- For each test case, output a single line containing a single integer - the maximum possible sum of the sequence with the given energy. -----Constraints----- - 1 ≤ T ≤ 10,000 - 1 ≤ N, X, Y ≤ 1,000,000,000 -----Example----- Input: 3 10 2 3 15 1 5 8 3 2 Output: 5 15 4 -----Explanation----- Example case 1. `N = 10`, `X = 2`, `Y = 3` - Incrementing a number by 1 costs 2 units, doubling a number costs 3 units. - Alice can achieve a sequence sum of 5 as follows: - Increment (0 to 1), sum=1, energy=8 - Increment (1 to 2), sum=2, energy=6 - Increment (2 to 3), sum=3, energy=4 - Increment (3 to 4), sum=4, energy=2 - Increment (4 to 5), sum=5, energy=0 Example case 2. `N = 15`, `X = 1`, `Y = 5` - Incrementing a number by 1 costs 1 unit, doubling a number costs 5 units. - Alice can achieve a sequence sum of 15 as follows: - Increment (0 to 1) 15 times, sum=15, energy=0 Example case 3. `N = 8`, `X = 3`, `Y = 2` - Incrementing a number by 1 costs 3 units, doubling a number costs 2 units. - Alice can achieve a sequence sum of 4 as follows: - Double (0 to 0), sum=0, energy=8 (choosing any number to double doesn\'t change the sequence so it is optimized not to use this operation) - Increment (0 to 1), sum=1, energy=5 - Increment (0 to 1), sum=2, energy=2 - Increment (0 to 1), sum=3, energy=-1. Since energy won\'t allow anymore increments, the sequence sum is 4. Subsequent operations and problem-solving strategies involve managing the energy budget effectively to maximize the sequence sum using the operations available.","solution":"def maximize_sequence_sum(N, X, Y): # If the cost of increment is less than or equal to double, just use increments if X <= Y: return N // X # Otherwise, calculate how many doubles and increments we can do max_sum = 0 while N >= Y: doubles = N // Y increments = (N % Y) // X max_sum += doubles + increments N -= (doubles * Y + increments * X) # Any remaining energy for increments max_sum += N // X return max_sum def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) results = [] for i in range(1, T + 1): N, X, Y = map(int, input_lines[i].split()) results.append(maximize_sequence_sum(N, X, Y)) return results"},{"question":"You are developing a simple weather application for a client. The application needs to display temperature trends over a week. You are given daily temperature readings, but the client wants the application to show those trends in terms of \\"warmer\\" or \\"cooler\\" for each consecutive day, compared to the previous day. If the temperature remains the same, it should state \\"same\\". Write a function `temperatureTrend` that takes an array of integers representing daily temperatures over a given week and returns an array of strings representing the trend for each day compared to the previous day. * The first day\'s trend is always \\"N/A\\" (Not Applicable). * For each subsequent day, if the temperature is higher than the previous day, the trend is \\"warmer\\". * If the temperature is lower than the previous day, the trend is \\"cooler\\". * If the temperature is the same as the previous day, the trend is \\"same\\". **Example:** ```python temperatureTrend([70, 72, 68, 68, 75, 73, 73]) ``` **Output:** ```python [\\"N/A\\", \\"warmer\\", \\"cooler\\", \\"same\\", \\"warmer\\", \\"cooler\\", \\"same\\"] ```","solution":"def temperatureTrend(temperatures): Returns the temperature trend for each day compared to the previous day. Parameters: temperatures (list): A list of integers representing daily temperatures. Returns: list: A list of strings representing the trend (\\"warmer\\", \\"cooler\\", \\"same\\", \\"N/A\\"). trends = [\\"N/A\\"] for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: trends.append(\\"warmer\\") elif temperatures[i] < temperatures[i - 1]: trends.append(\\"cooler\\") else: trends.append(\\"same\\") return trends"},{"question":"You are given a stream of integers representing the priority of tasks in a task scheduler system. Tasks with higher priority values need to be executed before tasks with lower priority values. The task scheduler can perform one of the following operations: 1. Insert a task with a given priority. 2. Execute the task with the highest priority. Write a program that simulates the task scheduler and outputs the priority of each task executed. -----Input:----- The first line of input consists of a single integer T, the number of operations to be performed. The next T lines describe the operations. An insert operation is denoted by `I x` where `x` is the priority of the task to be inserted. An execute operation is denoted by `E`. -----Output:----- Your output should consist of multiple lines, where each line contains the priority of the task that is executed. -----Constraints:----- - 1 leq T leq 100000 - 1 leq x leq 1000000 - An `E` operation is always valid, meaning there is at least one task present in the system when an execute operation is performed. -----Sample Input----- 10 I 3 I 1 E I 2 E I 5 E I 4 E E -----Sample Output----- 3 2 5 4 1","solution":"import heapq def task_scheduler(operations): max_heap = [] result = [] for operation in operations: if operation[0] == \'I\': # Insert the value into the max_heap using negative values since heapq is a min-heap heapq.heappush(max_heap, -int(operation[1])) elif operation[0] == \'E\': # Pop the max value from the heap (convert it back to positive) result.append(-heapq.heappop(max_heap)) return result"},{"question":"You have a list of strings and you need to find the longest common prefix among them. If there is no common prefix, return an empty string. Implement the `LongestCommonPrefix` method. Example: Input: `[\\"flower\\",\\"flow\\",\\"flight\\"]` Output: `\\"fl\\"` Input: `[\\"dog\\",\\"racecar\\",\\"car\\"]` Output: `\\"\\"` **Special Cases:** - If the input list is empty, return an empty string. - If any string in the list is empty, the longest common prefix is an empty string. - The strings are case-sensitive, so \\"abc\\" and \\"Abc\\" have no common prefix.","solution":"def LongestCommonPrefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start with the shortest string as the candidate for the longest common prefix shortest_str = min(strs, key=len) for i, char in enumerate(shortest_str): for other in strs: if other[i] != char: return shortest_str[:i] return shortest_str"},{"question":"A transformation sequence from word `beginWord` to word `endWord` using only words from the given word list `wordList` is defined as follows: - Each word in the sequence must be found in the `wordList`. - Only one letter can be changed at a time. - Each transformed word must exist in the `wordList`. Given the `beginWord`, `endWord`, and the `wordList`, write a function to return the length of the shortest transformation sequence from `beginWord` to `endWord`, or return 0 if no such transformation sequence exists. -----Input----- The first line contains an integer T, the number of test cases. The description of T test cases follows. For each test case: - The first line contains two strings `beginWord` and `endWord`. - The second line contains an integer N, the number of words in the list. - The third line contains N space-separated strings representing the words in the list. -----Output----- For each test case, output a single integer representing the length of the shortest transformation sequence, or 0 if no transformation sequence exists. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ all string lengths (beginWord, endWord, words in list) ≤ 10 - 1 ≤ N ≤ 500 -----Example----- Input: 2 hit cog 6 hot dot dog lot log cog hit cog 5 hot dot dog lot log Output: 5 0 -----Explanation----- Example case 1. The shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which has a length of 5. Example case 2. There is no possible transformation sequence from \\"hit\\" to \\"cog\\".","solution":"from collections import deque, defaultdict def ladder_length(beginWord, endWord, wordList): Returns the length of the shortest transformation sequence from beginWord to endWord, or 0 if no such transformation sequence exists. if endWord not in wordList: return 0 L = len(beginWord) all_combo_dict = defaultdict(list) for word in wordList: for i in range(L): all_combo_dict[word[:i] + \\"*\\" + word[i+1:]].append(word) queue = deque([(beginWord, 1)]) visited = set() visited.add(beginWord) while queue: current_word, level = queue.popleft() for i in range(L): intermediate_word = current_word[:i] + \\"*\\" + current_word[i+1:] for word in all_combo_dict[intermediate_word]: if word == endWord: return level + 1 if word not in visited: visited.add(word) queue.append((word, level + 1)) all_combo_dict[intermediate_word] = [] # clear to reduce unnecessary processing return 0 def process_cases(test_cases): results = [] for case in test_cases: beginWord, endWord, wordList = case[\'beginWord\'], case[\'endWord\'], case[\'wordList\'] result = ladder_length(beginWord, endWord, wordList) results.append(result) return results"},{"question":"Write a function that takes a positive integer (n) and returns the sum of all even Fibonacci numbers less than or equal to n. The Fibonacci sequence is defined as: - F(1) = 1, F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 For example: ``` Input: 10 Output: 10 (since the even Fibonacci numbers less than or equal to 10 are 2 and 8, and their sum is 10) Input: 34 Output: 44 (since the even Fibonacci numbers less than or equal to 34 are 2, 8, and 34, and their sum is 44) ```","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers less than or equal to n. a, b = 1, 1 sum_even = 0 while b <= n: if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"Sherlock Holmes has been tipped about a secret message hidden within a series of numbers. The numbers can be arranged in such a way that they form a palindrome. A palindrome is a sequence that reads the same backward as forward. To help Sherlock decrypt the message, you need to determine if there exists a way to permute the numbers such that they form a palindrome. -----Input----- The first line contains a single integer t (1 leq t leq 10^5) - number of test cases. Each of the next t lines contains a string s_i (1 leq |s_i| leq 10^6) consisting of digits 0 to 9 - the sequence Sherlock needs to analyze. -----Output----- For each test case, print \\"YES\\" if there is some permutation of the digits that forms a palindrome. Otherwise, print \\"NO\\". -----Example----- Input 3 112 212 12345 Output YES YES NO -----Note----- For the first test case, \\"112\\" can be permuted to \\"121\\" which is a palindrome. For the second test case, \\"212\\" is already a palindrome. For the third test case, \\"12345\\" cannot be rearranged to form any palindromic sequence. -----Hint----- A sequence can be rearranged into a palindrome if and only if at most one of its digits occurs an odd number of times.","solution":"def can_form_palindrome(s): Determines if any permutation of the given string of digits can form a palindrome. Args: s (str): A string of digits. Returns: str: \\"YES\\" if any permutation can form a palindrome, otherwise \\"NO\\". from collections import Counter count = Counter(s) odd_count = sum(1 for value in count.values() if value % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(t, cases): Processes multiple test cases to check if each can form a palindrome. Args: t (int): Number of test cases. cases (list of str): List of string digits for each test case. Returns: list of str: List of results for each test case (\\"YES\\" or \\"NO\\"). results = [can_form_palindrome(case) for case in cases] return results"},{"question":"Write a function that takes a list of integers and an integer `target`, and returns a boolean indicating whether any two numbers in the list add up to the `target`. For example: ```python has_pair_with_sum([10, 15, 3, 7], 17) => True has_pair_with_sum([1, 2, 3, 9], 8) => False ``` You can assume that each input will have at most one pair that sums up to the target.","solution":"def has_pair_with_sum(arr, target): Returns True if there are any two numbers in the list that add up to the target. Otherwise, returns False. seen = set() for number in arr: if target - number in seen: return True seen.add(number) return False"},{"question":"In a coding competition, participants are asked to solve the following problem: You are given a grid of size m times n filled with non-negative integers. Your task is to find the path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Formally, you are given a 2D list grid, where grid[i][j] represents the cost at cell (i, j). Return the minimum sum of all numbers along a path from grid[0][0] to grid[m-1][n-1]. -----Input----- - The first line contains two integers m and n representing the number of rows and columns of the grid. - The next m lines each contain n integers representing the cost grid. -----Output----- Print a single integer, the minimum sum of all numbers along a path from the top-left to the bottom-right corner of the grid. -----Constraints----- - 1 le m, n le 100 - 0 le text{grid}[i][j] le 100 -----Example Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Example Output----- 7 -----Explanation----- Example case: The path 1→3→1→1→1 minimizes the sum. Hence, the minimum sum is 7. Note: The given problem evaluates your ability to implement dynamic programming techniques to find the optimal path solution efficiently.","solution":"def minPathSum(grid): Returns the minimum sum of all numbers along a path from the top-left to the bottom-right corner of the grid. You can only move either down or right at any point in time. m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"You are managing a parking lot and need to design a system to track car entries and exits. Each car is identified by a unique license plate number. Your task is to write a function that, given a list of events, simulates the parking lot and returns the total number of distinct cars currently present in the parking lot. Each event is represented by a tuple consisting of a string (\\"enter\\" or \\"exit\\") and a string (license plate number). Note that a car with a certain license plate number cannot exit if it has not entered before. Implement the function as follows: ```python def track_parking_lot(events): # your code here pass ``` # Input: - A list of tuples, where each tuple contains a string and another string: events (List[Tuple[str, str]]) # Output: - An integer representing the total number of distinct cars in the parking lot. # Example 1: ```python events = [(\\"enter\\", \\"AB1234\\"), (\\"enter\\", \\"CD5678\\"), (\\"exit\\", \\"AB1234\\"), (\\"enter\\", \\"EF9012\\")] output: 2 ``` Explanation: After the series of events, cars \\"CD5678\\" and \\"EF9012\\" are still in the parking lot. # Example 2: ```python events = [(\\"enter\\", \\"GH3456\\"), (\\"exit\\", \\"GH3456\\"), (\\"enter\\", \\"GH3456\\"), (\\"exit\\", \\"GH3456\\")] output: 0 ``` Explanation: Car \\"GH3456\\" entered and exited twice, leaving the parking lot empty. # Constraints: - 1 <= len(events) <= 10000 - The license plate number will consist of uppercase alphabets and digits, with a length between 1 and 7 characters.","solution":"def track_parking_lot(events): Tracks the entries and exits of cars in a parking lot and returns the number of distinct cars present. Parameters: events (List[Tuple[str, str]]): List of events where each event is a tuple (action, license_plate) Returns: int: Number of distinct cars currently present in the parking lot parking_lot = set() for action, license_plate in events: if action == \\"enter\\": parking_lot.add(license_plate) elif action == \\"exit\\": parking_lot.discard(license_plate) return len(parking_lot)"},{"question":"Flight Itinerary You work for a travel agency and have been assigned the task of managing client itineraries. Given a list of flight segments, each represented as a tuple (origin, destination), you need to assemble an itinerary that represents the full journey from a starting city to the final destination. Your task is to order the segments in such a way that they form a correct sequential itinerary. For example, given the following list of flight segments: ``` python [(\\"New York\\", \\"Paris\\"), (\\"Moscow\\", \\"Tokyo\\"), (\\"Paris\\", \\"Berlin\\"), (\\"Berlin\\", \\"Moscow\\")] ``` Your code should return: ``` python [\\"New York\\", \\"Paris\\", \\"Berlin\\", \\"Moscow\\", \\"Tokyo\\"] ``` If the segments cannot form a valid itinerary (i.e., there is no way to sequentially connect all segments), return an empty list. **Function Signature:** ```python def assemble_itinerary(segments: List[Tuple[str, str]]) -> List[str]: pass ``` **Constraints:** 1. The segments represent a single continuous journey without any disconnected parts. 2. There are no cycles in the segment list. 3. The total number of segments should be less than 1000. 4. Cities are represented as non-empty strings. **Example:** ```python segments = [(\\"New York\\", \\"Paris\\"), (\\"Moscow\\", \\"Tokyo\\"), (\\"Paris\\", \\"Berlin\\"), (\\"Berlin\\", \\"Moscow\\")] assemble_itinerary(segments) # Output: [\\"New York\\", \\"Paris\\", \\"Berlin\\", \\"Moscow\\", \\"Tokyo\\"] segments = [(\\"New York\\", \\"Paris\\"), (\\"Paris\\", \\"New York\\")] assemble_itinerary(segments) # Output: [] ``` Note: It\'s safe to assume the input will always have at least one segment.","solution":"from typing import List, Tuple def assemble_itinerary(segments: List[Tuple[str, str]]) -> List[str]: if not segments: return [] # Create a map for each city\'s outgoing flight outgoing = {origin: destination for origin, destination in segments} # Find the starting city: a starting city has no other city pointing to it all_destinations = set(destination for _, destination in segments) all_origins = set(origin for origin, _ in segments) potential_starts = all_origins - all_destinations if len(potential_starts) != 1: return [] start = potential_starts.pop() # Assembling the itinerary itinerary = [start] while start in outgoing: next_city = outgoing[start] itinerary.append(next_city) start = next_city return itinerary"},{"question":"Write a function that takes a string as input and returns a new string where each letter in the original string is replaced with its subsequent letter in the alphabet. The transformation should be case-sensitive, meaning \'a\' becomes \'b\', \'z\' becomes \'a\', \'A\' becomes \'B\', and \'Z\' becomes \'A\'. Non-alphabet characters should remain unchanged. You can assume all test case inputs are non-empty strings consisting of alphabetic and/or non-alphabetic characters. Example: ``` \\"abcd\\" -> \\"bcde\\" \\"wxyz\\" -> \\"xyza\\" \\"Hello, World!\\" -> \\"Ifmmp, Xpsme!\\" \\"Zebra-493?\\" -> \\"Afcsb-493?\\" ``` Your task is to create a function that performs this string transformation correctly.","solution":"def shift_string(s): Returns a new string where each alphabetic character is replaced with its subsequent alphabetic character in the alphabet, considering case-sensitivity. Non-alphabetic characters remain unchanged. def shift_char(c): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + 1) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 1) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c) for c in s)"},{"question":"# Task Given a positive integer n, determine the minimum number of perfect squares whose sum is equal to n. Guidelines - A perfect square is a number that can be expressed as the product of an integer with itself. - For example, 1, 4, 9, 16 are perfect squares. Input - A single integer n (1 ≤ n ≤ 10^4). Output - An integer representing the minimum number of perfect squares that sum up to n. Example ```python def min_squares(n): # Implementation here pass # Example 1 print(min_squares(12)) # Output: 3 # Explanation: 12 can be written as 4 + 4 + 4 (3 perfect squares) # Example 2 print(min_squares(13)) # Output: 2 # Explanation: 13 can be written as 4 + 9 (2 perfect squares) # Example 3 print(min_squares(1)) # Output: 1 # Explanation: 1 itself is a perfect square. # Example 4 print(min_squares(25)) # Output: 1 # Explanation: 25 itself is a perfect square. ``` Notes - You can use dynamic programming to optimize the solution. - The problem is equivalent to finding the shortest path in a graph where nodes are numbers and edges represent subtracting a perfect square.","solution":"def min_squares(n): if n <= 0: return 0 dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - j * j] + 1) j += 1 return dp[n] # Example output (uncomment for testing yourself) # print(min_squares(12)) # Output: 3 # print(min_squares(13)) # Output: 2 # print(min_squares(1)) # Output: 1 # print(min_squares(25)) # Output: 1"},{"question":"Given an array of integers \'arr\' and an integer \'k\', find the length of the shortest contiguous subarray with a sum greater than or equal to \'k\'. If no such subarray exists, return -1. ``` Example: shortestSubarray([2, 1, 5, 2, 3, 2], 7) should return 2, because the subarray [5, 2] or [2, 3, 2] has the minimum length of 2 with a sum of 7 or more. shortestSubarray([2, 1, 5, 2, 8], 7) should return 1, because the subarray [8] has the smallest length with a sum of 7 or more. shortestSubarray([1, 2, 3, 4, 5], 11) should return 3, because the subarray [3, 4, 5] has the minimal length of 3 with a sum of 12 which is greater than 11. shortestSubarray([1, 2, 3, 4], 15) should return -1, because no subarray combines to 15 or more. ```","solution":"def shortestSubarray(arr, k): Finds the length of the shortest contiguous subarray with a sum greater than or equal to k. If no such subarray exists, returns -1. from collections import deque n = len(arr) prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + arr[i] dq = deque() min_len = float(\'inf\') for i in range(n + 1): while dq and prefix_sums[i] - prefix_sums[dq[0]] >= k: min_len = min(min_len, i - dq.popleft()) while dq and prefix_sums[i] <= prefix_sums[dq[-1]]: dq.pop() dq.append(i) return min_len if min_len != float(\'inf\') else -1"},{"question":"The city planner wants your help to design a new road network pattern. The planner has one number N that defines the structure of the road network. Help the city planner to code this pattern problem. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, print the road network pattern. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 11 11 111 101 111 1111 1001 1111 1001 1001 1111 -----EXPLANATION:----- No need, as the pattern can be decoded easily from the output.","solution":"def generate_road_pattern(n): Generates the road network pattern for a given N. result = [] for i in range(n): if i == 0 or i == n-1: result.append(\'1\' * n) else: row = \'1\' + \'0\' * (n-2) + \'1\' result.append(row) return result def road_network_patterns(test_cases): For each value in test_cases, generates the road network pattern. results = [] for n in test_cases: result = generate_road_pattern(n) results.append(result) return results"},{"question":"Your task is to write a program that simulates a simple banking system where users can create an account, deposit money, withdraw money, and check their account balance. The banking system should support multiple users, each identified by a unique account number. **Functional Requirements:** 1. Create a new account with a unique account number and an initial deposit. 2. Deposit money into a specific account. 3. Withdraw money from a specific account, ensuring the account has sufficient balance. 4. Check the balance of a specific account. **Input/Output Specifications:** - **Input:** - Create Account: `CREATE <initial_deposit>` - Deposit: `DEPOSIT <account_number> <amount>` - Withdraw: `WITHDRAW <account_number> <amount>` - Check Balance: `BALANCE <account_number>` - **Output:** - For `CREATE`: The newly created account number. - For `DEPOSIT` and `WITHDRAW`: A message indicating success or failure. - For `BALANCE`: The balance of the specified account. - You may assume that the inputs are provided in a valid format. **Examples:** ``` Input: CREATE 1000 CREATE 1500 DEPOSIT 1 500 WITHDRAW 1 300 BALANCE 1 BALANCE 2 WITHDRAW 2 2000 Output: 1 2 SUCCESS SUCCESS 1200 1500 FAILURE ``` **Notes:** - Account numbers should start at 1 and increment by 1 for each new account. - Ensure adequate error handling for operations on non-existent accounts or invalid transactions. - Design the solution keeping efficiency in mind, as the number of operations can be large.","solution":"class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self, initial_deposit): account_number = self.next_account_number self.accounts[account_number] = initial_deposit self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number in self.accounts: self.accounts[account_number] += amount return \\"SUCCESS\\" else: return \\"FAILURE\\" def withdraw(self, account_number, amount): if account_number in self.accounts and self.accounts[account_number] >= amount: self.accounts[account_number] -= amount return \\"SUCCESS\\" else: return \\"FAILURE\\" def balance(self, account_number): if account_number in self.accounts: return self.accounts[account_number] else: return \\"FAILURE\\""},{"question":"You are given an array of integers A of length n. Your task is to find the minimum number of operations needed to make all elements equal. In one operation, you can choose any subarray and add or subtract 1 from each element of the subarray. -----Input----- The first line contains a single integer n which represents the length of the array (1 ≤ n ≤ 100 000). The second line contains n integers representing the elements of the array A (1 ≤ A[i] ≤ 1 000 000). -----Output----- Print the only line containing the minimum number of operations needed. -----Examples----- Input 3 1 2 3 Output 2 Input 5 4 4 4 4 4 Output 0 Input 4 1 1 2 2 Output 1 -----Note----- For the first sample, the two possible sequences of operations to make all elements equal are: 1. Subtract 1 from the subarray [2, 3], and then subtract 1 from the subarray [3]. 2. Add 1 to the subarray [1], and then add 1 to the subarray [1, 2]. For the second sample, no operations are needed as all elements are already equal. For the third sample, the only operation needed is to subtract 1 from the subarray [2, 2].","solution":"def min_operations_to_equalize(A): Returns the minimum number of operations needed to make all elements of the array A equal. from collections import Counter # Count the frequency of each element in the array counts = Counter(A) # Find the frequency of the most common element max_freq = max(counts.values()) # The minimum number of operations is the total number of elements minus the # number of occurrences of the most frequent element. return len(A) - max_freq"},{"question":"Write a function `caterpillar_counter` that, given an array of strings, counts how many times \'caterpillar\' appears and returns a special message. The function should: - Return \'Give me ten caterpillars!\' if the count is exactly 10. - Return \'Caterpillar heaven! <count>\' if the count is more than 10. - Return \'A disappointing <count>\' if the count is less than 10. Note: - Your function should be case insensitive (i.e., \'Caterpillar\' and \'caterpillar\' should be considered the same). - You may assume that the input array will always be non-empty and contain only strings.","solution":"def caterpillar_counter(arr): Returns a special message based on the count of \'caterpillar\' in the input array. Parameters: arr: List[str] - an array of strings Returns: str - a special message based on the count of \'caterpillar\' count = sum(1 for item in arr if item.lower() == \'caterpillar\') if count == 10: return \'Give me ten caterpillars!\' elif count > 10: return f\'Caterpillar heaven! {count}\' else: return f\'A disappointing {count}\'"},{"question":"Given a list of integers, write a function that returns the maximum sum of non-adjacent elements. The integers can be negative or positive. If the list is empty, return 0. If all elements are negative, return 0 as well. For example: - Given the list `[3, 2, 5, 10, 7]`, the function should return 15 (3 + 10 + 2). - Given the list `[-2, 1, 3, -4, 5]`, the function should return 8 (3 + 5). - Given the list `[-3, -2, -5, -10, -7]`, the function should return 0. Note: The elements may not be in any particular order and the function should handle lists of various lengths including an empty list.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the list. if not nums: return 0 n = len(nums) if n == 1: return max(0, nums[0]) # Initialize two variables to store the maximum sum till the previous and # the one before previous element. two_steps_back = max(0, nums[0]) one_step_back = max(two_steps_back, nums[1]) for i in range(2, n): current = max(one_step_back, two_steps_back + nums[i]) two_steps_back = one_step_back one_step_back = current return max(one_step_back, two_steps_back)"},{"question":"Write a function `findAnagrams` that takes two arguments, a list of words `wordList` and a string `target`. The function should return a list of words from `wordList` that are anagrams of `target`. An anagram of a word is formed by rearranging the letters of the word using all the original letters exactly once. For example, `findAnagrams([\'listen\', \'enlist\', \'google\', \'inlets\', \'banana\'], \'silent\')` should return ``` [\'listen\', \'enlist\', \'inlets\'] ```","solution":"def findAnagrams(wordList, target): Returns a list of words from wordList that are anagrams of target. target_sorted = sorted(target) return [word for word in wordList if sorted(word) == target_sorted]"},{"question":"Complete the function that takes a list of integers and returns a new list where each integer is replaced with the product of all the other integers in the original list. Do not use division in your solution. If the list has fewer than two elements, return an empty array/list. Examples ``` [1, 2, 3, 4] --> [24, 12, 8, 6] [2, 3] --> [3, 2] ```","solution":"def product_except_self(lst): Given a list of integers, returns a new list where each integer is replaced with the product of all the other integers in the original list. No division is allowed. If the list has fewer than two elements, return an empty list. if len(lst) < 2: return [] length = len(lst) # Initialize the left and right product lists left_products = [1] * length right_products = [1] * length result = [1] * length # Compute the products of all the elements to the left of each index for i in range(1, length): left_products[i] = left_products[i - 1] * lst[i - 1] # Compute the products of all the elements to the right of each index for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * lst[i + 1] # Multiply the left and right products for each index for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"```if-not:sql Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. ``` ```if:sql SQL Notes: You are given a table, `words`, with one column `word`. Return a table with a column `vowel_count` which contains the count of vowels (a, e, i, o, u) in each word. The counting should be case-insensitive. # words table schema * word STRING # output table schema * vowel_count INT ```","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the input string. The function is case-insensitive. vowels = \\"aeiou\\" return sum(1 for char in s.lower() if char in vowels)"},{"question":"Tom is a toy robot that can operate on a grid. The grid is an n times m matrix and Tom can move in four possible directions: up, down, left, and right. Tom starts at a given position (x_s, y_s) and needs to reach a target position (x_t, y_t). Your task is to determine the minimum number of moves required for Tom to reach the target position if Tom can move more than one step in a single move. In one move, Tom can choose a direction and move any number of steps within that direction until the edge of the grid or until he decides to stop. -----Input:----- - The first line contains two integers n and m, the dimensions of the grid. - The second line contains two integers x_s and y_s, the starting coordinates of Tom. - The third line contains two integers x_t and y_t, the target coordinates Tom needs to reach. -----Output:----- - Output the minimum number of moves required for Tom to reach the target position. -----Constraints----- - 1 leq n, m leq 1000 - 1 leq x_s, y_s, x_t, y_t leq 1000 -----Assumptions----- - The grid is 1-indexed. -----Sample Input:----- 5 5 1 1 5 5 -----Sample Output:----- 2 -----EXPLANATION:----- Tom can move directly from (1,1) to (1,5) in the first move and then from (1,5) to (5,5) in the second move. Access a visual representation or try similar movements on a smaller grid to better understand the solution. Tom minimizes his moves by always taking the entire length of a row or column in a single move until he reaches his destination.","solution":"def min_moves_to_reach_target(n, m, x_s, y_s, x_t, y_t): Returns the minimum number of moves required for Tom to reach the target position. # Tom can move to the target row in one move and then to the target column in another move # or alternatively, he can move to the target column first and then to the target row. return 1 if (x_s == x_t or y_s == y_t) else 2"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a tuple of two distinct integers from the list that sum up to the target. Example If the input list is `[2, 7, 11, 15]` and the target is `9`, then the function should return `(2, 7)` because `2 + 7 = 9`. **Notes:** * You may assume that there is exactly one solution, and you may not use the same element twice. * The order of the integers in the returned tuple does not matter. * If the input list is empty or there is no valid pair, return `None`.","solution":"def two_sum(nums, target): Returns a tuple of two distinct integers from the list that sum up to the target. Params: nums (List[int]): List of integers target (int): Target integer Returns: Tuple[int, int] or None: Tuple of two integers that sum up to the target or None if no valid pair exists num_dict = {} for num in nums: complement = target - num if complement in num_dict: return (complement, num) num_dict[num] = True return None"},{"question":"# Task: Spiral Matrix Given an integer n, generate an n x n spiral matrix filled with elements from 1 to n² in a clockwise spiral order. Each element in the matrix should be an integer starting from 1 and incrementing sequentially up to n². *Input*: An integer, n, representing the dimensions of the matrix. *Output*: A two-dimensional list representing the n x n spiral matrix. **Example:** ``` Input: 3 Output: [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` **Note:** - The matrix should be filled in a clockwise spiral order, starting from the top-left corner and proceeding inwards.","solution":"def generate_spiral_matrix(n): Generate a n x n spiral matrix filled with elements from 1 to n^2 in a clockwise spiral order. :param n: Size of the matrix :type n: int :return: A 2D list representing the spiral matrix :rtype: list of list of int matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n - 1, 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"The city of Metropolia has a thriving public transit system, with trains running between various stations. However, due to maintenance work, some segments of the track might be closed on certain days. Each segment closure is defined by its start and end date, and no train can travel through this segment during this period. The Transit Authority wants to know the maximum number of non-overlapping closed segments among all the closures on a given day, to minimize the impact on passengers by planning alternative routes accordingly. Suppose, for example, you are given the following segment closures: Segment No. Start Date End Date 1 1 5 2 2 6 3 8 10 4 7 9 On day 2, segments 1 and 2 are closed but overlap. Similarly, on day 9, segments 3 and 4 are closed but overlap. Your task is to help the Transit Authority determine the maximum number of non-overlapping closed segments on any given day. -----Input:----- The first line of the input will contain a single integer N indicating the number of closed segments. Lines 2,3,...,N+1 describe each segment\'s closure period. Line i+1 contains two integers S_i and D_i indicating the start date and end date of the segment i closure. -----Output:----- Your output must consist of a single line containing a single integer M, indicating the maximum number of non-overlapping closed segments on any given day. -----Constraints:----- - 1 leq N leq 100000. - 1 leq S_i leq 1000000. - S_i leq D_i leq 1000000. - 50 % of test cases will also satisfy 1 leq N leq 10000. -----Sample input:----- 4 1 5 2 6 8 10 7 9 -----Sample output:----- 2","solution":"def max_non_overlapping_segments(closures): Returns the maximum number of non-overlapping closed segments on any given day. closures: List of tuples where each tuple contains two integers (start_date, end_date) # Sort closures based on the end date closures.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = -1 # Initialize to a time that\'s before any segment start time # Iterate over sorted segments for start, end in closures: if start > last_end_time: # No overlap condition count += 1 last_end_time = end return count"},{"question":"You are given a grid of size N x M filled with integers. Chef wants to rotate the grid 90 degrees clockwise. Your task is to take the grid and produce a new grid which is the rotated version of the original grid. -----Input:----- - The first line will contain T, the number of test cases. Each of the test cases follow: - The first line contains two integers N and M representing the number of rows and columns in the grid respectively. - The following N lines each contain M integers representing the grid. -----Output:----- For each test case, output the rotated grid. Each row of the grid should be printed on a new line, and the output for different test cases should be separated by a blank line. -----Constraints----- - 1 leq T leq 50 - 1 leq N, M leq 100 - -100 leq grid[i][j] leq 100 -----Sample Input:----- 2 3 3 1 2 3 4 5 6 7 8 9 2 4 1 2 3 4 5 6 7 8 -----Sample Output:----- 7 4 1 8 5 2 9 6 3 5 1 6 2 7 3 8 4","solution":"def rotate_grid_90_clockwise(grid): Rotates the given N x M grid 90 degrees clockwise. rows, cols = len(grid), len(grid[0]) rotated_grid = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_grid[c][rows - 1 - r] = grid[r][c] return rotated_grid def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, m, grid = test_case rotated_grid = rotate_grid_90_clockwise(grid) results.append(rotated_grid) return results # Function to format the results for output def format_results(results): formatted_results = [] for result in results: formatted_results.append(\\"n\\".join(\\" \\".join(map(str, row)) for row in result)) return \\"nn\\".join(formatted_results)"},{"question":"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Example 1: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6. Example 2: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. Example 3: Input: root = [2,1], p = 2, q = 1 Output: 2 Explanation: The LCA of nodes 2 and 1 is 2. Constraints: - The number of nodes in the tree is in the range [2, 10^5]. - Each node’s value is unique. - p and q are different and both values will exist in the BST.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode: Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. Arguments: root -- TreeNode, the root of the BST p -- TreeNode, one of the nodes for which we wish to find the LCA q -- TreeNode, the other node for which we wish to find the LCA Returns: TreeNode -- the lowest common ancestor of nodes p and q while root: if p.val < root.val and q.val < root.val: root = root.left elif p.val > root.val and q.val > root.val: root = root.right else: return root"},{"question":"Write a function `balance_checker` that determines whether the parentheses, brackets, and braces in a given string are balanced. The function should return True if the input string is balanced and False otherwise. Consider the following rules: 1. Every opening bracket must have a corresponding closing bracket of the same type. 2. The pairs of brackets must be properly nested. Here\'s a demonstration of the expected behavior: ```python >>> balance_checker(\\"()\\") True >>> balance_checker(\\"([{}])\\") True >>> balance_checker(\\"(]\\") False >>> balance_checker(\\"[({})](]\\") False >>> balance_checker(\\"([{}])[]{}\\") True ```","solution":"def balance_checker(s): Determines whether the parentheses, brackets, and braces in a given string are balanced. :param s: Input string containing brackets :return: True if the input string is balanced, False otherwise stack = [] mapping = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in mapping.values(): # opening brackets stack.append(char) elif char in mapping.keys(): # closing brackets if stack == [] or mapping[char] != stack.pop(): return False else: # ignore non-bracket characters continue return stack == []"},{"question":"Implement a function that checks if a string can be rearranged to form a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Your function should return `true` if the input string can be rearranged to form a palindrome and `false` otherwise. Note: 1. The input string will only contain ASCII characters. 2. You may assume the string is not empty. Example 1: Input: \\"civic\\" Output: true Explanation: \\"civic\\" is already a palindrome. Example 2: Input: \\"ivicc\\" Output: true Explanation: The string can be rearranged to \\"civic\\", which is a palindrome. Example 3: Input: \\"hello\\" Output: false Explanation: The string cannot be rearranged to form a palindrome. Example 4: Input: \\"A man, a plan, a canal, Panama\\" Output: true Explanation: If we ignore spaces, punctuation and capitalization, the string can be rearranged to form \\"amanaplanacanalpanama\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Args: s (str): Input string containing ASCII characters. Returns: bool: True if the input string can be rearranged to form a palindrome, False otherwise. from collections import Counter import string # Normalize the string: remove spaces, punctuation, and convert to lowercase. normalized_s = \'\'.join(c.lower() for c in s if c.isalpha()) # Count frequencies of each character. char_count = Counter(normalized_s) # Check no more than one character has an odd count. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Implement a function that evaluates if a given string is a valid IPv4 address. An IPv4 address is considered valid if it consists of four octets, separated by dots (.), with each octet ranging from 0 to 255, and no leading zeros. The function should return `True` if the input string is a valid IPv4 address, and `False` otherwise.","solution":"def is_valid_ipv4_address(ip): Evaluates if a given string is a valid IPv4 address. Parameters: ip (str): The input string to check. Returns: bool: True if the input string is a valid IPv4 address, False otherwise. parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if len(part) > 1 and part[0] == \'0\': return False if not (0 <= int(part) <= 255): return False return True"},{"question":"Implement a function `find_anagram_groups(words)` that takes a list of strings `words` as an input and returns a list of lists, where each sublist contains words that are anagrams of each other. The order of the words in each sublist should follow the order they appear in the input list. The order of the sublists in the output should also follow the order in which the first word of each group appears in the original list. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams of each other. Example: ```python find_anagram_groups([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"foo\\", \\"oof\\"]) # should return [[\'listen\', \'silent\', \'enlist\'], [\'google\', \'gooegl\'], [\'foo\', \'oof\']] find_anagram_groups([\\"bob\\", \\"obb\\", \\"boo\\"]) # should return [[\'bob\', \'obb\'], [\'boo\']] ``` Notes: 1. You should ignore case while comparing words for anagrams, meaning \\"Listen\\" and \\"Silent\\" should be considered anagrams of each other. 2. Each word in the input list will consist of lowercase or uppercase alphabetic characters only. 3. If there are no anagrams in the input list, the function should return an empty list.","solution":"def find_anagram_groups(words): Returns a list of lists, where each sublist contains words that are anagrams of each other. The order of the words in each sublist follows the order they appear in the input list. The order of the sublists in the output also follows the order in which the first word of each group appears in the original list. from collections import defaultdict # Dictionary to group anagrams anagram_dict = defaultdict(list) # Iterate over each word to group them for word in words: # Use a sorted tuple of the word as the key sorted_word = tuple(sorted(word.lower())) anagram_dict[sorted_word].append(word) # Return the list of grouped anagrams return [group for group in anagram_dict.values()]"},{"question":"In Imaginary Land, there are N ancient ruins connected by bi-directional paths, forming a structure where every ruin is reachable from any other ruin. Archaeologist Zoe is at ruin A and wants to visit each ruin exactly once, starting and ending at ruin A, creating a tour. Your task is to help Zoe figure out how many distinct tours she can make. A tour is defined as a sequence of ruins starting and ending at ruin A and visiting each ruin exactly once. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of ruins in Imaginary Land. - Next N-1 lines contain two space-separated integers u and v denoting there is a bi-directional path between the ruin numbered u and v. - The next line contains a single integer A denoting the ruin number where Zoe starts and ends her tour. -----Output----- - For each test case, output a single line containing the number of distinct tours Zoe can make, modulo 109+7. -----Constraints----- - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 20 - 1 ≤ A ≤ N -----Example----- Input: 2 3 1 2 1 3 1 4 1 2 1 3 2 4 1 Output: 2 3 -----Explanation----- Example case 1. Zoe can complete the tour in the following ways: 1-2-3-1 and 1-3-2-1. Example case 2. Zoe can complete the tour in the following ways: 1-2-4-3-1, 1-3-2-4-1, and 1-2-3-4-1.","solution":"from math import factorial def count_tours(N): Returns the number of distinct tours for visiting each of the N ruins starting and ending at ruin A. MOD = 10**9 + 7 if N == 1: return 1 return factorial(N-1) % MOD def distinct_tours(T, test_cases): results = [] for i in range(T): N, _, A = test_cases[i] results.append(count_tours(N)) return results"},{"question":"\\"Distribute the Wealth\\" The people of a small village have decided to distribute their cumulative wealth equally among themselves. However, some of the wealth might not be divisible equally and the villagers agreed to give the remaining amount to the village elder. You are tasked with determining how much each villager will receive if the wealth is distributed equally and how much the village elder will get. Given the total wealth W and the number of villagers V, you need to find out the wealth each villager receives and the amount that the village elder will get. -----Input----- The first line contains a single integer T, the number of test cases. Each test case contains two integers W (total wealth) and V (number of villagers). -----Output----- For each test case, output two integers separated by a space. The first integer is the wealth each villager receives, and the second integer is the wealth that the village elder receives. -----Constraints----- 1 <= T <= 50 1 <= W <= 10^15 1 <= V <= 10^6 -----Subtasks----- Subtask #1 : (30 points) 1 <= T <= 10 1 <= W <= 1000 1 <= V <= 100 Subtask #2 : (70 points) 1 <= T <= 50 1 <= W <= 10^15 1 <= V <= 10^6 -----Example----- Input: 3 1000 3 12345 5 999999 100 Output: 333 1 2469 0 9999 99","solution":"def distribute_wealth(n_cases, cases): results = [] for W, V in cases: wealth_each = W // V wealth_elder = W % V results.append((wealth_each, wealth_elder)) return results"},{"question":"Create a function `create_story` that generates a short story based on the given character\'s name, age, and favorite activity. The function should take in three parameters: 1. `name` (string): Character\'s name. 2. `age` (integer): Character\'s age. 3. `activity` (string): Character\'s favorite activity. The function should construct and return a string that follows this template: \\"Once upon a time, there was a [age]-year-old named [name] who loved to [activity]. Every single day, [name] would spend hours enjoying [activity] and would tell everyone about it!\\" Examples: - `create_story(\\"Alice\\", 7, \\"painting\\")` should return \\"Once upon a time, there was a 7-year-old named Alice who loved to paint. Every single day, Alice would spend hours enjoying painting and would tell everyone about it!\\" - `create_story(\\"Bob\\", 35, \\"cycling\\")` should return \\"Once upon a time, there was a 35-year-old named Bob who loved to cycle. Every single day, Bob would spend hours enjoying cycling and would tell everyone about it!\\" Ensure that the function handles different name lengths, ages, and activities appropriately.","solution":"def create_story(name, age, activity): Generates a short story based on the given character\'s name, age, and favorite activity. Parameters: name (str): Character\'s name. age (int): Character\'s age. activity (str): Character\'s favorite activity. Returns: str: A short story string. return (f\\"Once upon a time, there was a {age}-year-old named {name} who loved to {activity}. \\" f\\"Every single day, {name} would spend hours enjoying {activity} and would tell everyone about it!\\")"},{"question":"You are given an integer array A of length N. For any subarray A[l..r], let mathrm{SUM}(l, r) be the sum of the elements in the subarray from index l to r inclusive. We define mathrm{MAX_SUM}(A) as the maximum value among all possible subarray sums in A. Write a program to find a subarray whose sum equals mathrm{MAX_SUM}(A) and print the indices l and r (1-based) of any such subarray. If there are multiple subarrays that achieve the maximum sum, you can print any one of them. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing two integers l and r (1-based) specifying the indices of the subarray whose sum is mathrm{MAX_SUM}(A). -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^4 le A_i le 10^4 for each valid i - the sum of N over all test cases does not exceed 3 cdot 10^5 -----Example Input----- 3 5 1 -2 3 4 -1 3 0 0 0 6 -2 -5 6 -2 -3 1 -----Example Output----- 3 4 1 1 3 3 -----Explanation----- Example case 1: The maximum subarray sum is 7, which is obtained from the subarray [3, 4] at indices (3, 4). Example case 2: The maximum subarray sum is 0, which can be obtained from any of the subarrays. For example, the subarray [0] starting at index 1. Example case 3: The maximum subarray sum is 6, which is obtained from the subarray [6] at index 3.","solution":"def max_sum_subarray_indices(a): Returns the starting and ending (1-based) indices of the subarray with the maximum sum. max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(a)): current_sum += a[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 # Transforming to 1-based indexing return (start + 1, end + 1) def max_sum_subarrays(test_cases): results = [] for a in test_cases: results.append(max_sum_subarray_indices(a)) return results"},{"question":"Write a function that takes two strings and returns a boolean indicating whether one string is a permutation of the other. A permutation means that two strings must contain the same characters with the same frequency, but possibly in a different order. # Examples ```python is_permutation(\\"abc\\", \\"bac\\") == True is_permutation(\\"hello\\", \\"ollhe\\") == True is_permutation(\\"test\\", \\"tess\\") == False is_permutation(\\"apple\\", \\"papel\\") == True is_permutation(\\"python\\", \\"jython\\") == False ```","solution":"def is_permutation(s1, s2): Returns True if s1 and s2 are permutations of each other, False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Write a function `replaceVowelsWithNext(sentence)` that takes a string `sentence` as input and returns a new string where each vowel (\'a\', \'e\', \'i\', \'o\', \'u\', both upper and lower case) is replaced with the next vowel in the sequence. The sequence wraps around at the end, so \'u\' should be replaced with \'a\' and \'U\' should be replaced with \'A\'. For example: ```replaceVowelsWithNext(\\"hello world\\")``` --> \\"hillu wurld\\" ```replaceVowelsWithNext(\\"AEiou\\")``` --> \\"EIoua\\"","solution":"def replaceVowelsWithNext(sentence): Replace each vowel in the sentence with the next vowel in the sequence. The sequence of vowels is \'a\', \'e\', \'i\', \'o\', \'u\' and wraps around. vowels = \\"aeiouAEIOU\\" next_vowels = \\"eiouaEIOUA\\" translation_table = str.maketrans(vowels, next_vowels) return sentence.translate(translation_table)"},{"question":"# Task Alice loves gardening and plans to plant `n` flowers in her garden. She has `m` different types of flowering plants, and each type of plant has a different blooming period. The blooming period indicates the number of days after which the plant will bloom once planted. Alice wants to plant the flowers in such a way that she has at least one flower blooming each day over the next `n` days, starting from tomorrow. You are given a list of integers `bloomingPeriods` of size `m`, where `bloomingPeriods[i]` represents the blooming period of the i-th type of plant. Calculate and print whether it is possible for Alice to arrange her planting schedule so that there\'s at least one flower blooming every day for the next `n` days. If it is possible, return the string \\"Possible\\". Otherwise, return the string \\"Not Possible\\". # Example For `n = 4, m = 3, bloomingPeriods = [1, 2, 3]`, the output should be \\"Possible\\". Explanation: Alice can plant the flowers in the following order: - Day 0: Plant type 1 (blooms on day 1), type 2 (blooms on day 2), type 3 (blooms on day 3) - Day 1: Plant type 1 again (blooms on day 2) - Day 2: Plant type 1 again (blooms on day 3) - Day 3: Plant type 1 again (blooms on day 4) This way, there is at least one flower blooming every day. For `n = 5, m = 2, bloomingPeriods = [2, 4]`, the output should be \\"Not Possible\\". Explanation: With only periods of 2 and 4, there will be no flowers blooming on day 1 after the initial bloom wears off.","solution":"def can_plant_every_day(n, m, bloomingPeriods): Determines whether it\'s possible to have at least one flower blooming each day for the next n days. Parameters: n (int): Number of days m (int): Number of different flowering plant types bloomingPeriods (list): Blooming periods for each plant type Returns: str: \\"Possible\\" or \\"Not Possible\\" # Check if we have a flower blooming on each day up to n days = [0] * n # Array to keep track of whether a flower blooms on each day for period in bloomingPeriods: for start_day in range(period - 1, n, period): days[start_day] = 1 if all(days): return \\"Possible\\" else: return \\"Not Possible\\""},{"question":"The objective is to return the longest common prefix from an array of strings. If no common prefix exists, return an empty string. Assume the input array will not be empty. Examples ``` [\\"flower\\", \\"flow\\", \\"flight\\"] should return \\"fl\\" [\\"dog\\", \\"racecar\\", \\"car\\"] should return \\"\\" [\\"interspecies\\", \\"interstellar\\", \\"interstate\\"] should return \\"inters\\" [\\"throne\\", \\"dungeon\\", \\"throne\\"] should return \\"\\" [\\"throne\\", \\"throne\\", \\"throne\\"] should return \\"throne\\" ```","solution":"def longest_common_prefix(strs): Returns the longest common prefix from an array of strings. If no common prefix exists, returns an empty string. if not strs: return \\"\\" # Sort the array so the comparison happens between the smallest and largest strings strs.sort() first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"In a distant galaxy, there is a planet entirely inhabited by robots. These robots communicate with each other using binary numbers. Each robot is represented by a unique binary string. However, due to some recent electromagnetic interference, their binary communication has become a bit garbled. Some robots have started using \'?\' in place of one of the binary digits (\'0\' or \'1\'). Your task is to help these robots by identifying all possible valid binary strings each robot might be sending. You are given an array of binary strings containing \'0\', \'1\', and \'?\'. For each string, generate all possible valid binary strings by replacing \'?\' with both \'0\' and \'1\'. Return an array of arrays, where each sub-array contains all possible binary strings for each corresponding input string. If the provided array is empty, return \'No robots to communicate with\'. If the provided array contains elements that are not valid binary strings (including characters other than \'0\', \'1\', and \'?\'), return \'Invalid communication\'. Example: Input: [\\"10?\\", \\"0?1?\\", \\"??\\"] Output: [ [\\"100\\", \\"101\\"], [\\"0010\\", \\"0011\\", \\"0110\\", \\"0111\\"], [\\"00\\", \\"01\\", \\"10\\", \\"11\\"] ]","solution":"def generate_binary_strings(binary_strings): Generate all possible valid binary strings by replacing \'?\' with \'0\' and \'1\'. Args: binary_strings (list of str): List of binary strings containing \'0\', \'1\', and \'?\'. Returns: list of list of str: List of sub-lists containing all valid binary strings. str: \'No robots to communicate with\' if input is empty. str: \'Invalid communication\' if any string in input is invalid. if not binary_strings: return \'No robots to communicate with\' def generate_combinations(s): if \'?\' not in s: return [s] else: result = [] index = s.index(\'?\') prefix = s[:index] suffix = s[index + 1:] for ch in \'01\': result.extend(generate_combinations(prefix + ch + suffix)) return result for binary_string in binary_strings: if not all(ch in \'01?\' for ch in binary_string): return \'Invalid communication\' return [generate_combinations(s) for s in binary_strings]"},{"question":"Shuffling Cards and Building Bridge Hands! Your task is to simulate the shuffling of a standard deck of 52 cards and dealing out 4 hands for a game of Bridge. The standard 52-card deck comprises four suits (Spades, Hearts, Diamonds, Clubs) and thirteen ranks (2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A) in each suit. In Bridge, four players receive exactly 13 cards each. Write a function that returns a list of four strings, each representing the cards in a hand dealt to each player. # Requirements: Your function should follow these rules: 1. Shuffle the deck randomly. 2. Deal out the cards so each hand has exactly 13 cards. 3. Represent cards in string format with rank followed by suit, e.g., \\"2H\\" for 2 of Hearts, \\"JS\\" for Jack of Spades, \\"KD\\" for King of Diamonds, \\"AC\\" for Ace of Clubs. 4. Each string in the output list should list the 13 cards in the hand separated by spaces. # Example: Input: ``` No input needed ``` Output: ``` [\\"2H 3H 4H 5H 6H 7H 8H 9H 10H JH QH KH AH\\", \\"2D 3D 4D 5D 6D 7D 8D 9D 10D JD QD KD AD\\", \\"2C 3C 4C 5C 6C 7C 8C 9C 10C JC QC KC AC\\", \\"2S 3S 4S 5S 6S 7S 8S 9S 10S JS QS KS AS\\"] ``` Note: The output shown is an example of four hands dealt in sequence without shuffling. Your actual output will have each card randomly assigned to the four hands. Write the function in Python: ```python import random def deal_bridge_hands(): ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] suits = [\'H\', \'D\', \'C\', \'S\'] deck = [rank + suit for suit in suits for rank in ranks] random.shuffle(deck) hands = [deck[i * 13:(i + 1) * 13] for i in range(4)] return [\' \'.join(hand) for hand in hands] # Example usage print(deal_bridge_hands()) ```","solution":"import random def deal_bridge_hands(): Shuffles a standard deck of 52 cards and deals them into 4 bridge hands. Returns: list: A list of 4 strings, each string representing the cards in a hand dealt to each player. ranks = [\'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', \'A\'] suits = [\'H\', \'D\', \'C\', \'S\'] deck = [rank + suit for suit in suits for rank in ranks] random.shuffle(deck) hands = [deck[i * 13:(i + 1) * 13] for i in range(4)] return [\' \'.join(hand) for hand in hands]"},{"question":"Given a string `s` and a list of strings `patterns`, return a list of booleans where each boolean indicates whether the corresponding pattern in `patterns` appears as a substring in `s`. Example: ```python s = \\"hello there general kenobi\\" patterns = [\\"hello\\", \\"general\\", \\"kenobi\\", \\"hi\\", \\"there\\"] ``` For each pattern in `patterns`, check if it appears as a substring in `s`: * `\\"hello\\"` is a substring of `s` (True) * `\\"general\\"` is a substring of `s` (True) * `\\"kenobi\\"` is a substring of `s` (True) * `\\"hi\\"` is not a substring of `s` (False) * `\\"there\\"` is a substring of `s` (True) Therefore, `solve(s, patterns) = [True, True, True, False, True]` Good luck!","solution":"def solve(s, patterns): Given a string `s` and a list of strings `patterns`, return a list of booleans where each boolean indicates whether the corresponding pattern in `patterns` appears as a substring in `s`. Args: s (str): The primary string to check against. patterns (list): A list of strings to check if they are substrings of `s`. Returns: list: A list of booleans where each boolean corresponds to whether the pattern is a substring in `s`. return [pattern in s for pattern in patterns]"},{"question":"Create a function to perform basic string compression using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the \\"compressed\\" string would not become smaller than the original string, your function should return the original string. The function should be case-sensitive (i.e., \'a\' and \'A\' should be treated as different characters). Function Signature: ```python def compress_string(s: str) -> str: ``` # Input - `s` (1 ≤ length of s ≤ 10^5): A non-empty string of characters. # Output - A compressed version of the string or the original string if the compressed version is not shorter.","solution":"def compress_string(s: str) -> str: Perform basic string compression using the counts of repeated characters. If the compressed string is not shorter than the original, return the original string. compressed = [] count_consecutive = 0 for i in range(len(s)): count_consecutive += 1 # If the next character is different than the current, append the result if i + 1 >= len(s) or s[i] != s[i + 1]: compressed.append(s[i]) compressed.append(str(count_consecutive)) count_consecutive = 0 compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function to determine if a given string can be interpreted as a valid number. A valid number can include the following: - Digits 0-9 - A decimal point (\'.\') or an exponent (\'e\' or \'E\'), but not both simultaneously - At most one sign (\'+\' or \'-\') at the beginning or immediately after an exponent - May start with a decimal digit or a decimal point - A number should have at least one digit and should not contain extra spaces Note: - Exponent part (if exists) should not have a decimal point. - Decimal point must be followed by at least one digit if there\'s no integer part preceding it. Examples: Example 1: Input: \\"0\\" Output: True Explanation: \\"0\\" is a valid number. Example 2: Input: \\" 0.1 \\" Output: True Explanation: \\"0.1\\" is a valid number. Example 3: Input: \\"abc\\" Output: False Explanation: \\"abc\\" is not a valid number. Example 4: Input: \\"1 a\\" Output: False Explanation: \\"1 a\\" is not a valid number. Example 5: Input: \\"-90e3\\" Output: True Explanation: \\"-90e3\\" is a valid number. Example 6: Input: \\"1e\\" Output: False Explanation: \\"1e\\" is not a valid number. Example 7: Input: \\"e3\\" Output: False Explanation: \\"e3\\" is not a valid number. Implement the function: ```python def isNumber(s: str) -> bool: # Your code here ```","solution":"import re def isNumber(s: str) -> bool: Determines if the input string can be interpreted as a valid number. # Remove leading and trailing whitespace s = s.strip() # Regular expression for validating a number pattern = re.compile(r\'^[+-]?(d+(.d*)?|.d+)([eE][+-]?d+)?\') # Match the pattern against the input string return bool(pattern.match(s))"},{"question":"Write a function that takes a string containing letters and digits and returns an integer representing the sum of all the digits in the string. Ignore the letters in the string and consider only the digits. For example: - For the input \\"abc123xyz\\", the output should be 6 (since 1 + 2 + 3 = 6). - For the input \\"a1b2c3\\", the output should be 6 (since 1 + 2 + 3 = 6). - For the input \\"ab\\", the output should be 0 (since there are no digits in the string).","solution":"def sum_of_digits_in_string(s): Returns the sum of all digits in the string s. Parameters: s (str): The input string containing letters and digits. Returns: int: The sum of all digits in the string. return sum(int(char) for char in s if char.isdigit())"},{"question":"=====Problem Statement===== A company wants to track the inventory of products in their warehouse. Products can be added to inventory, removed from inventory, or the stock quantity can be queried. You need to implement a system that handles these operations. Operations The following operations can be performed: 1. \\"add <product_name> <quantity>\\" - Adds the specified quantity of the given product to the inventory. 2. \\"remove <product_name> <quantity>\\" - Removes the specified quantity of the given product from the inventory. It is guaranteed that the quantity to be removed will not exceed the current stock. 3. \\"query <product_name>\\" - Returns the current quantity of the given product in the inventory. Example Suppose the following operations are performed: 1. add apple 10 2. add orange 5 3. query apple 4. remove apple 3 5. query apple For the above operations, the outputs for the query commands would be: 10 7 Input Format The first line contains an integer `N`, the number of operations. Each of the following `N` lines contains one of the operations as a string. Constraints 0 < N ≤ 10^5 0 < `quantity` ≤ 10^6 The product names consist of lowercase letters only and have a maximum length of 20. Output Format For each \\"query\\" operation, print the current quantity of the specified product on a new line. Sample Input 5 add apple 10 add orange 5 query apple remove apple 3 query apple Sample Output 10 7","solution":"class InventoryManager: def __init__(self): self.inventory = {} def add(self, product_name, quantity): if product_name in self.inventory: self.inventory[product_name] += quantity else: self.inventory[product_name] = quantity def remove(self, product_name, quantity): if product_name in self.inventory: self.inventory[product_name] -= quantity def query(self, product_name): return self.inventory.get(product_name, 0)"},{"question":"You are required to create a function that calculates the total volume of water that can be trapped after a rainfall, given an array representing the elevation map. The array elements represent the height of the terrain at each point. The function should return an integer indicating the total volume of trapped water. The elevation map is represented by an integer array where the width of each bar is 1. # Constraints * The length of the given array will be at least 1 and at most 10^4. * Each element of the array will be a non-negative integer and will not exceed 10^5. # Examples Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The array represents a terrain where the elevation map is [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of water are trapped. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The array represents a terrain where the elevation map is [4,2,0,3,2,5]. In this case, 9 units of water are trapped.","solution":"def trap(height): Calculate the total volume of water that can be trapped after a rainfall. Args: height (list): A list of non-negative integers representing the elevation map. Returns: int: The total volume of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate trapped water water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"Unique Paths in a Grid You are given a `m x n` grid where you are initially positioned at the top-left corner. You are required to move to the bottom-right corner on the grid. You can only move either down or right at any point in time. Write a function `unique_paths(m, n)` that calculates the number of unique paths. For example, the grid below has a total of 7 unique paths from the top-left to the bottom-right corner: ``` | S | | | | | | | | | | E | ``` Here, `S` denotes the start point at the top-left corner, and `E` denotes the end point at the bottom-right corner. # Examples ```python unique_paths(2, 3) # 3 unique_paths(3, 7) # 28 unique_paths(1, 1) # 1 unique_paths(5, 5) # 70 ``` # Explanation The key observation here is that the number of ways to reach the end from the start is essentially a combinatorial problem. You need to make exactly `(m-1)` downward moves and exactly `(n-1)` rightward moves in any order. The solution involves computing the binomial coefficient, but your function implementation should use dynamic programming to avoid inefficiency in computing large factorials. ```python def unique_paths(m, n): # Initialize a 2D list to hold the number of ways dp = [[0 for _ in range(n)] for _ in range(m)] # There is exactly one way to reach any cell in the first row or first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the remainder of the grid using previously computed values for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] ```","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, moving only down or right. # Initialize a 2D list to hold the number of ways dp = [[0 for _ in range(n)] for _ in range(m)] # There is exactly one way to reach any cell in the first row or first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the remainder of the grid using previously computed values for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function that receives a string and checks if it can be made into a palindrome by removing at most one character. A string is a palindrome if it reads the same forward and backward. The function should return `True` if the string can become a palindrome within the conditions specified, or `False` otherwise. Examples: ```python can_be_palindrome(\\"radar\\") -> True can_be_palindrome(\\"hello\\") -> False can_be_palindrome(\\"abca\\") -> True # Removing \'b\' makes it \\"aca\\", which is a palindrome can_be_palindrome(\\"racecar\\") -> True can_be_palindrome(\\"racecarr\\") -> True # Removing the last \'r\' makes it \\"racecar\\", which is a palindrome ```","solution":"def can_be_palindrome(s): def is_palindrome(sub): return sub == sub[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: one_removed_left = s[left+1:right+1] one_removed_right = s[left:right] return is_palindrome(one_removed_left) or is_palindrome(one_removed_right) left += 1 right -= 1 return True"},{"question":"In a given 2D grid of integers, your task is to find the size of the largest square subgrid which has all identical elements. The size of a square subgrid is defined as the number of cells along one of its sides. For example, a subgrid of size 3 will be a 3x3 smaller grid within the larger grid. -----Input:----- - The first line contains a single integer T, the number of test cases. - For each test case: - The first line contains two integers R and C, the number of rows and columns in the grid respectively. - The next R lines contain C integers each, representing the elements of the grid. -----Output:----- For each test case, output in a single line the size of the largest square subgrid with all identical elements. -----Constraints:----- - 1 leq T leq 10 - 1 leq R, C leq 300 - 0 leq grid element leq 100 -----Sample Input:----- 2 3 3 1 1 1 1 1 1 1 1 1 4 5 1 2 3 4 5 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 -----Sample Output:----- 3 3 -----Explanation:----- For the first test case, the entire 3x3 grid is occupied by the number 1, thus the largest square subgrid has size 3. For the second test case, the largest square subgrid with all identical elements is the 3x3 subgrid filled with the number 2.","solution":"def largest_identical_square_subgrid(T, test_cases): def preprocess_grid(grid): R, C = len(grid), len(grid[0]) dp = [[0] * C for _ in range(R)] max_size = 0 for i in range(R): for j in range(C): if i == 0 or j == 0: dp[i][j] = 1 # Edges can only have size of 1 else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_size = max(max_size, dp[i][j]) return max_size results = [] for tc in test_cases: R, C, grid = tc[\'R\'], tc[\'C\'], tc[\'grid\'] results.append(preprocess_grid(grid)) return results # Example usage: T = 2 test_cases = [ {\'R\': 3, \'C\': 3, \'grid\': [[1, 1, 1], [1, 1, 1], [1, 1, 1]]}, {\'R\': 4, \'C\': 5, \'grid\': [[1, 2, 3, 4, 5], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2]]} ] print(largest_identical_square_subgrid(T, test_cases)) # Output: [3, 3]"},{"question":"Dr. Lydia is a wizard at creating challenging programming problems. She has devised a new logic puzzle for you to solve! You are given a single string s consisting of lowercase English letters and integers 0 through 9. Your task is to reorder the characters of the string so that all the digits appear before any letters. Moreover, the digits should be in non-decreasing order and letters should be in non-increasing order. If the string does not contain any digits or any letters, simply return the characters that appear in the string. -----Input----- The input consists of a single string s (1 le |s| le 300). -----Output----- Output the re-ordered string as specified. -----Example----- Input d3c2b1a Output 123dcba Input 5z9y8x Output 589zyx Input m5n4o3p2 Output 2345ponm Input abcdef Output fedcba Input 12345 Output 12345 -----Note----- In the first example, the string \'d3c2b1a\' is rearranged so that digits \'1\', \'2\', and \'3\' appear first in non-decreasing order followed by the letters \'d\', \'c\', \'b\', \'a\' in non-increasing order, resulting in \'123dcba\'. In the second example, the input \'abcdef\' contains only letters, so the output is simply the letters in non-increasing order, \'fedcba\'. In the third example, the input \'12345\' contains only digits, so the output is simply the digits in non-decreasing order, \'12345\'.","solution":"def reorder_string(s): digits = sorted([ch for ch in s if ch.isdigit()]) letters = sorted([ch for ch in s if ch.isalpha()], reverse=True) return \'\'.join(digits + letters)"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to modify the string such that no two adjacent characters are the same. You can achieve this by swapping the positions of the characters any number of times. Determine if it is possible to rearrange the string such that no two adjacent characters are the same. If it is possible, provide such a rearranged string; otherwise, return \\"Not Possible\\". -----Input:----- - The first line contains a single integer N indicating the length of string S. - The second line contains the string S of length N, consisting of lowercase English letters. -----Output:----- Output a single line with one of the following: - A single string which is a possible rearrangement of S where no two adjacent characters are the same. - \\"Not Possible\\" if no such rearrangement exists. -----Constraints----- - 1 leq N leq 1000 - S only contains lowercase English letters. -----Sample Input:----- 6 aabbcc -----Sample Output:----- abcabc -----EXPLANATION:----- One possible rearrangement is \\"abcabc\\". Other valid arrangements include \\"acbacb\\", etc. -----Sample Input:----- 3 aaa -----Sample Output:----- Not Possible -----EXPLANATION:----- There is no way to rearrange the string \\"aaa\\" such that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. Returns \'Not Possible\' if such a rearrangement isn\'t possible. # Count frequency of each character frequency = Counter(s) # Create a max-heap based on character frequencies max_heap = [(-count, char) for char, count in frequency.items()] heapq.heapify(max_heap) # To hold the rearranged result result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Since we used one instance of this char, decrement the count if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"Not Possible\\" return rearranged_string"},{"question":"A large retail store wants to optimize its inventory management. They have a unique system where the inventory items are stored as strings in a very particular format. Each string consists of item code, quantity, and category separated by a single space. The store manager wants to analyze this data to generate a report that includes: 1. The total quantity of items in each category. 2. The item code with the highest quantity in each category. Write a function called `inventory_report` that takes a list of strings, each representing an inventory item, and returns a dictionary where each key is a category and each value is a dictionary with: - `total_quantity`: total quantity of items in that category. - `highest_quantity_item`: item code of the item with the highest quantity in that category. The input will have the following format for each string: \\"item_code quantity category\\" - `item_code` is a string consisting of alphanumeric characters. - `quantity` is a positive integer. - `category` is a string of alphabets only (uppercase and lowercase). If there are multiple items with the same highest quantity in a category, return the first item found. For example: ```python inventory = [ \\"A123 50 Electronics\\", \\"B456 30 Grocery\\", \\"C789 100 Electronics\\", \\"D012 20 Apparel\\", \\"E345 80 Grocery\\", \\"F678 50 Electronics\\" ] result = inventory_report(inventory) print(result) ``` Expected output: ```python { \\"Electronics\\": { \\"total_quantity\\": 200, \\"highest_quantity_item\\": \\"C789\\" }, \\"Grocery\\": { \\"total_quantity\\": 110, \\"highest_quantity_item\\": \\"E345\\" }, \\"Apparel\\": { \\"total_quantity\\": 20, \\"highest_quantity_item\\": \\"D012\\" } } ```","solution":"def inventory_report(inventory): Generates a report of the inventory with total quantities and highest quantity item per category. Args: inventory (list): A list of strings where each string represents item information in the format \\"item_code quantity category\\". Returns: dict: A dictionary with category as the key and another dictionary as the value containing: - total_quantity (int): Total quantity of items in that category. - highest_quantity_item (str): Item code of the item with the highest quantity in that category. report = {} for item in inventory: item_code, quantity, category = item.split() quantity = int(quantity) if category not in report: report[category] = { \'total_quantity\': 0, \'highest_quantity_item\': item_code, \'highest_quantity\': quantity } report[category][\'total_quantity\'] += quantity if quantity > report[category][\'highest_quantity\']: report[category][\'highest_quantity_item\'] = item_code report[category][\'highest_quantity\'] = quantity for category in report: del report[category][\'highest_quantity\'] return report"},{"question":"Write a function that takes a string and a dictionary of words, and returns the longest word from the dictionary that can be formed by deleting some of the letters from the given string without reordering the remaining letters. If there are ties, return the longest word that appears first in the dictionary. If no words can be formed, return an empty string. For example: ``` longestWordFromDict(\\"abpcplea\\", [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"]) => \\"apple\\" longestWordFromDict(\\"abpcplea\\", [\\"a\\",\\"b\\",\\"c\\"]) => \\"a\\" longestWordFromDict(\\"abpcplea\\", [\\"xyz\\", \\"qrs\\"]) => \\"\\" ``` Write the `longestWordFromDict` function that takes a string and an array of words, and returns the expected output as illustrated.","solution":"def is_subsequence(s, t): Helper function to check if s is a subsequence of t. t_iter = iter(t) return all(char in t_iter for char in s) def longestWordFromDict(s, dictionary): Returns the longest word from the dictionary that can be formed by deleting some of the letters from the given string s without reordering the remaining letters. longest_word = \\"\\" for word in dictionary: if is_subsequence(word, s): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"Write a program to calculate the minimum number of steps required to reduce a number to zero. In one step, you can either subtract 1 from it if it\'s odd, or divide it by 2 if it\'s even. Example: Input: num = 14 Output: 6 Explanation: Step 1) 14 is even; divide by 2 and obtain 7. Step 2) 7 is odd; subtract 1 and obtain 6. Step 3) 6 is even; divide by 2 and obtain 3. Step 4) 3 is odd; subtract 1 and obtain 2. Step 5) 2 is even; divide by 2 and obtain 1. Step 6) 1 is odd; subtract 1 and obtain 0. Note: The number of steps does not exceed 10,000. 1 ≤ num ≤ 10^6.","solution":"def numberOfSteps(num): Returns the number of steps required to reduce num to 0. steps = 0 while num > 0: if num % 2 == 0: num //= 2 else: num -= 1 steps += 1 return steps"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function that receives a string and returns the longest palindrome substring within that string. Your function should ignore non-alphanumeric characters and treat uppercase and lowercase characters as equal. **Examples:** - For the input string `\\"A man, a plan, a canal, Panama!\\"`, the longest palindrome substring is `\\"a man a plan a canal panama\\"`. - For the input string `\\"racecar\\"`, the longest palindrome substring is `\\"racecar\\"`. - For the input string `\\"noon\\"`, the longest palindrome substring is `\\"noon\\"`. **Constraints:** - You may assume the maximum length of the input string is 1000 characters.","solution":"def longest_palindrome_substring(s: str) -> str: def is_palindrome(sub): return sub == sub[::-1] def preprocess_string(s): return \'\'.join(c.lower() for c in s if c.isalnum()) processed_string = preprocess_string(s) n = len(processed_string) if n == 0: return \\"\\" longest_palindrome = \\"\\" for i in range(n): for j in range(i, n): substring = processed_string[i:j+1] if is_palindrome(substring) and len(substring) > len(longest_palindrome): longest_palindrome = substring return longest_palindrome"},{"question":"Create a `Matrix` class to represent a 2x2 matrix with elements `a`, `b`, `c`, and `d` (in a 2x2 grid pattern). Implement a matrix multiplication method called `.multiply()` that takes another 2x2 matrix as an argument and returns a new 2x2 matrix which is the result of multiplying the matrix you call `.multiply()` on by the matrix you pass in. For example: ```python >>> m1 = Matrix(1, 2, 3, 4) >>> m1.a, m1.b, m1.c, m1.d (1, 2, 3, 4) >>> m2 = Matrix(5, 6, 7, 8) >>> m3 = m1.multiply(m2) >>> m3.a, m3.b, m3.c, m3.d (19, 22, 43, 50) ``` Matrix multiplication for 2x2 matrices can be defined as: ``` |a1 b1| |a2 b2| |c1 d1| * |c2 d2| ``` Resulting in: ``` |a1*a2 + b1*c2 a1*b2 + b1*d2| |c1*a2 + d1*c2 c1*b2 + d1*d2| ```","solution":"class Matrix: def __init__(self, a, b, c, d): self.a = a self.b = b self.c = c self.d = d def multiply(self, other): a_new = self.a * other.a + self.b * other.c b_new = self.a * other.b + self.b * other.d c_new = self.c * other.a + self.d * other.c d_new = self.c * other.b + self.d * other.d return Matrix(a_new, b_new, c_new, d_new)"},{"question":"You have a grid with some cells filled with water and others filled with land. The grid is represented as a 2D array, where a cell is \'1\' if it contains land and \'0\' if it contains water. An island is formed by a group of horizontally or vertically adjacent land cells. Given a grid with dimensions `m x n`, return the total number of islands. Example 1: Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 Example 2: Input: grid = [ [\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\",\\"0\\"] ] Output: 1 Constraints: - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 300` - `grid[i][j]` is \'0\' or \'1\'","solution":"def numIslands(grid): Returns the number of islands in the grid. if not grid: return 0 def dfs(grid, r, c): grid[r][c] = \'0\' directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == \'1\': dfs(grid, nr, nc) num_islands = 0 for r in range(len(grid)): for c in range(len(grid[r])): if grid[r][c] == \'1\': num_islands += 1 dfs(grid, r, c) return num_islands"},{"question":"# Problem Description You have been given a matrix of integers where each row is sorted in ascending order, but the columns are not necessarily sorted. Your task is to write a function to find the median of this matrix. The median of a matrix is the middle value when all the elements of the matrix are sorted in ascending order. If the matrix has an even number of elements, the median is the average of the two middle values. # Input - An integer `m` representing the number of rows in the matrix (1 ≤ m ≤ 50). - An integer `n` representing the number of columns in the matrix (1 ≤ n ≤ 50). - A 2D list `matrix` of integers where each row is sorted in ascending order. # Output - An integer representing the median of the matrix. # Example ```python matrix = [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] median_of_matrix(matrix) -> 5 ``` # Notes - The elements of the matrix are not necessarily distinct. - The function should handle matrices with both odd and even numbers of total elements. - Try to achieve an efficient solution in terms of time and space complexity. # Function Signature ```python def median_of_matrix(matrix: List[List[int]]) -> int: pass ```","solution":"def median_of_matrix(matrix): Returns the median of a 2D matrix where each row is sorted in ascending order. m = len(matrix) n = len(matrix[0]) # Flatten the matrix into a single list flat_list = [element for row in matrix for element in row] # Sort the flattened list flat_list.sort() # Find the median total_elements = m * n if total_elements % 2 == 1: median = flat_list[total_elements // 2] else: median = (flat_list[total_elements // 2] + flat_list[total_elements // 2 - 1]) / 2 return median"},{"question":"Introduction A binary search algorithm finds the position of a target value within a sorted array. The algorithm compares the target value to the middle element of the array. If they are not equal, the half in which the target cannot lie is eliminated, and the search continues on the remaining half until the target value is found. This method employs a divide and conquer approach to reduce the search space in each step. Task You are given two inputs: a sorted list of integers `nums` and an integer `target`. Write a function `binary_search(nums, target)` that performs a binary search to find the index of `target` in the list `nums`. If `target` is not present in the list, the function should return `-1`. # Function Signature ```python def binary_search(nums: List[int], target: int) -> int: ``` # Input - `nums` (List[int]): A list of integers sorted in ascending order. - `target` (int): The integer to be searched for in the list `nums`. # Output - Return the index of `target` if it is present in `nums`, otherwise return `-1`. # Example ```python nums = [1, 2, 3, 4, 5, 6, 7, 8, 9] target = 5 # binary_search(nums, target) should return 4 nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] target = 7 # binary_search(nums, target) should return -1 ``` # Note - You may assume that all elements in `nums` are unique and the list is sorted in ascending order. - The solution should have a time complexity of O(log n). # Constraints - The length of `nums` will be in the range [0, 10^4]. - The elements of `nums` will be in the range [-10^4, 10^4]. - The `target` will be in the range [-10^4, 10^4].","solution":"from typing import List def binary_search(nums: List[int], target: int) -> int: Performs binary search on a sorted list to find the index of target. Parameters: nums (List[int]): A list of integers sorted in ascending order. target (int): The integer to be searched for in nums. Returns: int: The index of target if it is present in nums, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Sum of Odd-Indexed Elements You have been given an array of integers. Your task is to return the sum of all elements that are located at odd indices in the array. The position of the elements in an array is considered to start from index 0—that is, the first element has index 0, the second element has index 1, and so on. # Task Implement a function that takes an array of integers and returns the sum of all elements at odd indices. # Examples ``` For `arr = [1, 2, 3, 4, 5]`, the output should be `6`. Explanation: The elements at odd indices are 2 and 4. The sum is 2 + 4 = 6. For `arr = [0, 1, 2, 3, 4, 5]`, the output should be `9`. Explanation: The elements at odd indices are 1, 3, and 5. The sum is 1 + 3 + 5 = 9. For `arr = []`, the output should be `0`. Explanation: There are no elements in the array, hence the sum is 0. ``` # Notes - The array can be empty. - The array will always contain only integers. - Take into account that array indices start from 0.","solution":"def sum_of_odd_indexed_elements(arr): Returns the sum of all elements at odd indices in the given array. return sum(arr[i] for i in range(1, len(arr), 2))"},{"question":"Implement a function that takes an integer `n` and returns all unique pairs of integers `(a, b)` (where `a` and `b` are integers and `a <= b`) such that their product is equal to `n`. The function should return the pairs in a list of tuples, sorted in ascending order of `a`. If there are no such pairs, return an empty list. Example Input 1: ------------- 6 Example Output 1: ------------- [(1, 6), (2, 3)] Example Input 2: ------------- 16 Example Output 2: ------------- [(1, 16), (2, 8), (4, 4)] Example Input 3: ------------- 13 Example Output 3: ------------- [(1, 13)] Example Input 4: ------------- 1 Example Output 4: ------------- [(1, 1)] Example Input 5: ------------- 30 Example Output 5: ------------- [(1, 30), (2, 15), (3, 10), (5, 6)]","solution":"def unique_pairs(n): Returns all unique pairs of integers (a, b) such that a * b == n and a <= b. pairs = [] for a in range(1, int(n**0.5) + 1): if n % a == 0: b = n // a pairs.append((a, b)) if a <= b else None return pairs"},{"question":"Write a function that takes a string consisting of only lowercase English letters and returns a new string where each character is replaced with its position in the alphabet. For example, if we run \\"abc\\" through the function, \\"123\\" will come out, because \'a\' is the 1st letter, \'b\' is the 2nd letter, and \'c\' is the 3rd letter. **Note:** The function accepts a string and returns a string.","solution":"def alphabet_positions(s): Returns a new string where each character in the input string s is replaced with its position in the alphabet. :param s: str - input string containing only lowercase English letters. :return: str - string with positions of each letter in the alphabet. return \'\'.join(str(ord(char) - ord(\'a\') + 1) for char in s)"},{"question":"Write a function that takes two lists of integers and returns a list containing only the elements that appear in both lists. The order of elements in the returned list should be based on the order of their first appearance in the first input list. If there are no common elements, return an empty list. Function signature: ```python def intersect_lists(l1, l2): ``` Example usage: ```python intersect_lists([1, 2, 3, 4], [3, 4, 5, 6]) # returns [3, 4] intersect_lists([10, 20, 30], [40, 50, 60]) # returns [] ``` Note: - You may not use the built-in set intersection operation directly. - The function should have linear time complexity relative to the sum of the lengths of the input lists.","solution":"def intersect_lists(l1, l2): # Create a set from the second list for O(1) membership checking set_l2 = set(l2) # Initialize the result list result = [] # Iterate through the first list for item in l1: # If the item is in the set created from the second list and not already in the result list if item in set_l2 and item not in result: result.append(item) return result"},{"question":"Given a list of integers representing the heights of buildings in a row, where buildings\' heights are represented by an array of positive integers, find the largest rectangle that can be formed by taking contiguous buildings as the sides of the rectangle, such that the smaller side determines the height of the rectangle. Write a function that returns the area of this largest rectangle. ```python def largestRectangleArea(heights: List[int]) -> int: pass # Example 1: # Input: heights = [2,1,5,6,2,3] # Output: 10 # Explanation: The largest rectangle is formed by the buildings with heights 5 and 6 as the sides (index 2 to 3), resulting in a max area of 5*2=10. # Example 2: # Input: heights = [2,4] # Output: 4 # Explanation: The largest rectangle is formed by the building with height 4 (index 1), resulting in a max area of 4*1=4. # Constraints: # 1. 1 <= heights.length <= 10^5 # 2. 1 <= heights[i] <= 10^4 ```","solution":"from typing import List def largestRectangleArea(heights: List[int]) -> int: Calculate the largest rectangle area in a histogram given by the heights list. stack = [] max_area = 0 heights.append(0) # Adding a sentinel value to make sure we process all buildings for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Clean up the sentinel value return max_area"},{"question":"Given a string paragraph and a list of banned words, write a function to return the most frequent word that is not in the list of banned words. The words in paragraph are case-insensitive and the answer should be returned in lowercase. You may assume the length of paragraph is at most 1000 and that there is at least one word that is not banned. The list of words may contain duplicates. Examples: Input: paragraph = \\"Bob hit a ball, the hit BALL flew far after it was hit.\\", banned = [\\"hit\\"] Output: \\"ball\\" Explanation: \\"hit\\" occurs 3 times, but it is banned. \\"ball\\" occurs twice (including once in uppercase), so it is the word returned. Note that the parsing of words in the paragraph is case-insensitive and all \\"hit\\"s are counted as the same word. Input: paragraph = \\"Jack and Jill went up the hill to fetch a pail of water. Jack fell down and broke his crown, and Jill came tumbling after.\\", banned = [\\"jack\\", \\"jill\\"] Output: \\"and\\" Explanation: \\"jack\\" and \\"jill\\" occur 2 and 2 times respectively, but both are banned. \\"and\\" occurs 3 times (including two instances in lowercase and one in uppercase), so it is the word returned. Constraints: - 1 <= paragraph.length <= 1000 - 1 <= banned.length <= 100 - Length of each banned word is <= 10 - The returned word should be in lowercase. - Words in paragraph consist of only letters, spaces, and punctuation, separated by a single space. - Your solution must use O(n) time complexity, where n is the length of the paragraph.","solution":"import re from collections import Counter def most_frequent_word(paragraph, banned): Returns the most frequent word in the paragraph that is not in the list of banned words. Words are case-insensitive and returned in lowercase. # Replace all punctuations with spaces, and convert to lowercase normalized_str = re.sub(r\'[^ws]\', \' \', paragraph).lower() # Split the normalized string into words words = normalized_str.split() # Create a set of banned words for quick lookup banned_set = set(banned) # Count the occurrences of each word that is not banned word_counts = Counter(word for word in words if word not in banned_set) # Return the most common word return word_counts.most_common(1)[0][0]"},{"question":"You are given an array of integers `arr` of length `n`. You need to find the maximum possible sum of an odd-length subarray of `arr`. A subarray is a contiguous part of an array. # Input The first line of the input contains an integer `T` denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains an integer `n` indicating the length of the array. - The second line contains n space-separated integers, the elements of the array `arr`. # Output For each test case, output a single line containing the maximum possible sum of an odd-length subarray in `arr`. # Constraints - 1 ≤ T ≤ 20 - 1 ≤ n ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 # Example Input: 2 5 1 2 -3 4 5 3 -1 -2 -3 Output: 9 -1 # Explanation Test case 1: - Odd-length subarrays and their sums are as follows: - [1] -> 1 - [2] -> 2 - [-3] -> -3 - [4] -> 4 - [5] -> 5 - [1, 2, -3] -> 0 - [2, -3, 4] -> 3 - [-3, 4, 5] -> 6 - [1, 2, -3, 4, 5] -> 9 - Maximum sum is 9. Test case 2: - Odd-length subarrays and their sums are as follows: - [-1] -> -1 - [-2] -> -2 - [-3] -> -3 - [-1, -2, -3] -> -6 - Maximum sum is -1.","solution":"def max_odd_length_subarray_sum(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] max_sum = float(\'-inf\') for start in range(n): current_sum = 0 for length in range(start, n): current_sum += arr[length] if (length - start + 1) % 2 != 0: max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"A city wants to develop a new navigation system to aid drivers. The road network is represented as a graph where intersections are nodes and roads are edges. Each road has a travel time associated with it (an integer). The city wants to implement a system that can answer multiple queries efficiently. Each query consists of two intersections and asks for the shortest travel time between them. Your task is to help the city develop an algorithm that can answer these queries. -----Input:----- The first line of the input contains two integers, N and M, where N is the number of intersections (nodes) and M is the number of roads (edges). The next M lines each contain three integers, U, V, and W, where U and V are the intersections connected by a road, and W is the travel time. The following line contains a single integer Q denoting the number of queries. The next Q lines contain two integers, A and B, representing the intersections for each query. -----Output:----- For each query, print a single line containing the shortest travel time between the intersections A and B. If there is no path between A and B, print -1. -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 10000 - 1 leq W leq 1000 - 1 leq Q leq 100000 - 1 leq U, V, A, B leq N -----Sample Input:----- 5 6 1 2 10 1 3 3 2 3 1 3 4 2 4 5 5 2 5 9 3 1 5 2 4 1 4 -----Sample Output:----- 10 3 5 -----EXPLANATION:----- In the provided graph, the shortest travel times between: - Intersections 1 and 5 is 10 (via route 1 -> 3 -> 4 -> 5). - Intersections 2 and 4 is 3 (via route 2 -> 3 -> 4). - Intersections 1 and 4 is 5 (via route 1 -> 3 -> 4).","solution":"import heapq def dijkstra(n, graph, start): Use Dijkstra\'s algorithm to find the shortest paths from start to all other nodes. distances = {node: float(\'infinity\') for node in range(1, n+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def navigation_system(n, m, edges, q, queries): # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # because the roads are bidirectional # Precompute shortest paths for all nodes all_pairs_shortest_paths = {node: dijkstra(n, graph, node) for node in range(1, n+1)} # Process each query results = [] for a, b in queries: shortest_distance = all_pairs_shortest_paths[a][b] if shortest_distance == float(\'infinity\'): results.append(-1) else: results.append(shortest_distance) return results"},{"question":"Given a list of non-negative integers representing the heights of blocks situated in a row, you need to determine the amount of water that can be trapped after raining. The list of integers represents the elevation map where the width of each block is 1 unit. You need to compute how much water it could trap after raining. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The boundaries between which the water is trapped are highlighted in the elevation map [0,1,0,2,1,0,1,3,2,1,2,1]. The water trapped is 6 units. Note: You can assume that the height of each block is represented accurately.","solution":"def trap(height): Calculate the total amount of water that can be trapped. :param height: A list of non-negative integers representing the heights of blocks. :return: An integer representing the total amount of water trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given a string `str`, your task is to write a function that determines the longest substring without any repeating characters and return the length of this substring. A substring is a contiguous sequence of characters within a string. Assume the input is a non-empty string consisting of only lowercase Latin letters. If there are multiple substrings of the same maximum length, the function should return the length of any one of them. If the input is not a valid string, return `\\"Invalid input\\"`. Examples ``` longest_unique_substring(\\"abcabcbb\\") => 3 // \\"abc\\" longest_unique_substring(\\"bbbbb\\") => 1 // \\"b\\" longest_unique_substring(\\"pwwkew\\") => 3 // \\"wke\\" longest_unique_substring(\\"aab\\") => 2 // \\"ab\\" longest_unique_substring(12345) => \\"Invalid input\\" longest_unique_substring(\\"\\") => 0 ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. If input is not a string, returns \\"Invalid input\\". if not isinstance(s, str): return \\"Invalid input\\" if not s: return 0 start, max_length = 0, 0 used_chars = {} for index, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"In this Kata, you will be given a list of moves a chess knight makes. Your task is to determine whether the knight returns to its starting point after completing the sequence of moves. The knight can move to a position 2 squares away horizontally and 1 square vertically or 2 squares vertically and 1 square horizontally. ```Python def knight_moves(moves): return False # Examples: knight_moves([\'L\', \'L\', \'U\']) = False knight_moves([\'U\', \'L\', \'D\', \'R\']) = True knight_moves([\'U\', \'R\', \'D\', \'L\', \'L\']) = False ``` More examples in test cases. Good luck! Please also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)","solution":"def knight_moves(moves): Determine if a series of moves returns a knight to its starting position. Parameters: moves (list): A list of single character moves (U, D, L, R) Returns: bool: True if the knight returns to the starting point, False otherwise. # Initial position x, y = 0, 0 # Define move map move_map = { \'U\': (2, 1), \'D\': (-2, -1), \'L\': (-2, 1), \'R\': (2, -1) } # Process each move in the list for move in moves: dx, dy = move_map[move] x += dx y += dy # Return True if back to origin, False otherwise return x == 0 and y == 0"},{"question":"Given an integer array `A` of size `n`, determine if there is a subset of elements that sums to a given integer `S`. You are to write a function that returns \\"YES\\" if there exists such a subset, otherwise returns \\"NO\\". # Input: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains two integers `n` and `S`, the size of the array and the target sum. - The second line contains `n` space-separated integers representing the array `A`. # Output: For each test case, output a single line \\"YES\\" if there is a subset of the array that sums to `S`, otherwise output \\"NO\\". # Constraints: - 1 leq T leq 100 - 1 leq n leq 100 - -10^4 leq A[i] leq 10^4 - -10^5 leq S leq 10^5 # Sample Input: ``` 2 5 9 3 34 4 12 5 2 6 30 -7 -3 -2 5 8 -6 ``` # Sample Output: ``` YES NO ``` # Explanation: - In the first test case, the subset {3, 4, 2} sums to 9, thus the answer is \\"YES\\". - In the second test case, there is no subset of elements that sums to 30, thus the answer is \\"NO\\".","solution":"def subset_sum_exists(T, testcases): def can_partition(nums, target): subset = [False] * (target + 1) subset[0] = True for num in nums: for t in range(target, num - 1, -1): if subset[t - num]: subset[t] = True return subset[target] results = [] for i in range(T): n, S, A = testcases[i] S = abs(S) A = [abs(a) for a in A if a <= S] # Using only numbers less than or equal to S if can_partition(A, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are working on a project to parse and process text-based data logs. Each log entry contains key-value pairs of information, and some keys might appear multiple times in a single log. Your task is to write a function that processes a list of log entries and consolidates them into a single, summarized log entry where: 1. The values of the same key appearing multiple times in a log are concatenated into a comma-separated string. 2. The keys are ordered lexicographically. For example: ``` [\\"time=12:00,level=info,message=start\\", \\"level=warning,message=delay,time=12:05\\", \\"time=12:10,level=info,message=resume\\"] ``` Should output: ``` \\"time=12:00,12:05,12:10,level=info,warning,info,message=start,delay,resume\\" ``` # Function Signature ```python def consolidate_logs(logs: List[str]) -> str: pass ``` # Input - A list of strings, where each string is a log entry containing several key-value pairs separated by commas. Keys and values are non-empty strings, and keys are alphanumeric. # Output - A single string where values of the same key are concatenated and keys are sorted. # Example ```python logs = [\\"time=12:00,level=info,message=start\\", \\"level=warning,message=delay,time=12:05\\", \\"time=12:10,level=info,message=resume\\"] ``` Output: ``` \\"time=12:00,12:05,12:10,level=info,warning,info,message=start,delay,resume\\" ``` # Constraints 1. The length of each log entry will not exceed 100 characters. 2. The list of log entries will not exceed 100 entries. 3. Keys are alphanumeric and case-sensitive.","solution":"from typing import List def consolidate_logs(logs: List[str]) -> str: from collections import defaultdict consolidated_log = defaultdict(list) for log in logs: entries = log.split(\',\') for entry in entries: key, value = entry.split(\'=\') consolidated_log[key].append(value) sorted_keys = sorted(consolidated_log.keys()) result = \\",\\".join(f\\"{key}={\',\'.join(consolidated_log[key])}\\" for key in sorted_keys) return result"},{"question":"Minimum Swaps to Sort You are given an unsorted array of distinct integers. Your task is to find the minimum number of swaps required to sort the array in ascending order. For example, if arr = [4, 3, 2, 1], the minimum swaps required to sort the array are 2: - Swap (4, 1): [1, 3, 2, 4] - Swap (3, 2): [1, 2, 3, 4] Input Format The first line contains an integer n, the number of elements in the array. The second line contains n space-separated integers arr[i]. Constraints 1 <= n <= 10^5 1 <= arr[i] <= 10^9 All elements of arr are distinct. Output Format An integer that denotes the minimum number of swaps to sort the array. Sample Input 4 4 3 2 1 Sample Output 2 Explanation We need a minimum of 2 swaps to make the array sorted. The first swap is between 4 and 1, and the second swap is between 3 and 2. This results in the sorted array [1, 2, 3, 4].","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) arr_pos = [(value, index) for index, value in enumerate(arr)] arr_pos.sort(key=lambda x: x[0]) visited = {k: False for k in range(n)} swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"In the world of adventure games, treasure chests are often guarded by complex locks that require specific keys to open. Each key has a shape and size, matching exactly one lock. Given a list of keys and a list of locks, your task is to determine which keys match which locks. Each key and lock are represented by a string of lowercase letters, where the sequence and type of characters must match for the key to unlock the lock. Write a function `match_keys_and_locks` that takes in two lists: 1. A list of keys: `keys = [\\"abc\\", \\"def\\", \\"ghi\\"]` 2. A list of locks: `locks = [\\"ghi\\", \\"abc\\", \\"xyz\\"]` The function should return a list of tuples. Each tuple contains a key and its corresponding lock. If a key does not match any lock or if there are more locks than keys, the key should be paired with `None`. Similarly, if there are more keys than locks, the extra keys should also be paired with `None`. For example: ```python keys = [\\"abc\\", \\"def\\", \\"ghi\\"] locks = [\\"ghi\\", \\"abc\\", \\"xyz\\"] match_keys_and_locks(keys, locks) # returns [(\'abc\', \'abc\'), (\'def\', None), (\'ghi\', \'ghi\')] ``` In the case where no keys match any locks: ```python keys = [\\"abc\\", \\"def\\"] locks = [\\"xyz\\", \\"uvw\\"] match_keys_and_locks(keys, locks) # returns [(\'abc\', None), (\'def\', None)] ``` When all keys match exactly one lock each: ```python keys = [\\"abc\\", \\"def\\"] locks = [\\"def\\", \\"abc\\"] match_keys_and_locks(keys, locks) # returns [(\'abc\', \'abc\'), (\'def\', \'def\')] ``` If there are fewer keys than locks: ```python keys = [\\"abc\\"] locks = [\\"abc\\", \\"def\\"] match_keys_and_locks(keys, locks) # returns [(\'abc\', \'abc\'), (None, \'def\')] ``` Your goal is to implement the `match_keys_and_locks` function that adheres to the specifications above.","solution":"def match_keys_and_locks(keys, locks): Returns a list of tuples where each tuple contains a key and its matching lock from the input lists. If a key does not match any lock or if there are more locks than keys, pairs with None. result = [] matched_locks = set() for key in keys: matched = False for lock in locks: if key == lock and lock not in matched_locks: result.append((key, lock)) matched_locks.add(lock) matched = True break if not matched: result.append((key, None)) for lock in locks: if lock not in matched_locks: result.append((None, lock)) return result"},{"question":"# Task Create a function that calculates the sum of all prime numbers up to and including a given integer `n`. # Input/Output `[input]` integer `n` A positive integer `0 <= n <= 10^6`. `[output]` an integer The sum of all prime numbers from 0 to `n`. # Example For `n = 10`, the output should be 17. `2 + 3 + 5 + 7 = 17` For `n = 11`, the output should be 28. `2 + 3 + 5 + 7 + 11 = 28` For `n = 0`, the output should be 0. There are no prime numbers in this range. For `n = 1`, the output should be 0. There are no prime numbers in this range.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to and including the given integer n. if n < 2: return 0 primes = [True] * (n + 1) primes[0] = primes[1] = False p = 2 while (p * p <= n): if primes[p] is True: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_sum = sum(i for i in range(n + 1) if primes[i]) return prime_sum"},{"question":"Given an integer `n`, write a function to compute the `n`th Fibonacci number. The Fibonacci sequence is defined as follows: - The first Fibonacci number is `0`. - The second Fibonacci number is `1`. - Every subsequent Fibonacci number is the sum of the previous two. For example, the first 10 Fibonacci numbers are: `0, 1, 1, 2, 3, 5, 8, 13, 21, 34` Write an implementation to calculate the `n`th Fibonacci number. The function should be efficient and handle large values of `n` without excessive computation times. # Rules - `n < 0` should return `None`. - The sequence starts at `n = 0`, where the `0`th Fibonacci number is `0`. # Note The efficiency of the function is crucial. Recursive solutions may not handle large values of `n` well due to stack overflow or excessive recomputation. Consider alternative methods to improve performance.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n < 0: return None elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given a rectangular matrix of integers and a target integer. Your task is to write a function that returns `true` if the target integer exists within the matrix, and `false` otherwise. The matrix has the following properties: - Each row is sorted in ascending order from left to right. - Each column is sorted in ascending order from top to bottom. Complete the function to determine if the target integer is present in the matrix, considering the properties listed above. Examples ``` matrix = [ [1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17] ] target = 5 --> true matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] target = 13 --> false ```","solution":"def search_matrix(matrix, target): Returns true if the target integer is in the matrix, false otherwise. The matrix is sorted such that each row and each column is in ascending order. if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) # Start from the top-right corner of the matrix row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"Design a Circular Deque without using any built-in libraries. A circular deque is a double-ended queue with circular buffer behavior. It should support inserting and deleting from both the front and the rear ends of the deque efficiently, with O(1) time complexity for each operation. To be specific, your design should include these functions: - bool insertFront(int value): Adds an item at the front of Deque. Returns true if the operation is successful, false otherwise. - bool insertLast(int value): Adds an item at the rear of Deque. Returns true if the operation is successful, false otherwise. - bool deleteFront(): Deletes an item from the front of Deque. Returns true if the operation is successful, false otherwise. - bool deleteLast(): Deletes an item from the rear of Deque. Returns true if the operation is successful, false otherwise. - int getFront(): Get the front item from the deque. Returns -1 if the deque is empty. - int getRear(): Get the last item from the deque. Returns -1 if the deque is empty. - bool isEmpty(): Checks whether the deque is empty or not. Returns true if the deque is empty, false otherwise. - bool isFull(): Checks whether the deque is full or not. Returns true if the deque is full, false otherwise. Example: ```python circularDeque = CircularDeque(3); // set the size to be 3 circularDeque.insertLast(1); // return true circularDeque.insertLast(2); // return true circularDeque.insertFront(3); // return true circularDeque.insertFront(4); // return false, the queue is full circularDeque.getRear(); // return 2 circularDeque.isFull(); // return true circularDeque.deleteLast(); // return true circularDeque.insertFront(4); // return true circularDeque.getFront(); // return 4 ``` Constraints: - All values of the deque will be integers in the range [0, 1000]. - Number of maximum operations will be in the range [1, 10^4]. - At most 50000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, and isFull.","solution":"class CircularDeque: def __init__(self, k: int): Initialize your data structure here. Set the size of the deque to be k. self.k = k self.deque = [None] * k self.front = 0 self.rear = 0 self.size = 0 def insertFront(self, value: int) -> bool: Adds an item at the front of Deque. Return true if the operation is successful. if self.isFull(): return False self.front = (self.front - 1 + self.k) % self.k self.deque[self.front] = value self.size += 1 return True def insertLast(self, value: int) -> bool: Adds an item at the rear of Deque. Return true if the operation is successful. if self.isFull(): return False self.deque[self.rear] = value self.rear = (self.rear + 1) % self.k self.size += 1 return True def deleteFront(self) -> bool: Deletes an item from the front of Deque. Return true if the operation is successful. if self.isEmpty(): return False self.front = (self.front + 1) % self.k self.size -= 1 return True def deleteLast(self) -> bool: Deletes an item from the rear of Deque. Return true if the operation is successful. if self.isEmpty(): return False self.rear = (self.rear - 1 + self.k) % self.k self.size -= 1 return True def getFront(self) -> int: Get the front item from the deque. if self.isEmpty(): return -1 return self.deque[self.front] def getRear(self) -> int: Get the last item from the deque. if self.isEmpty(): return -1 return self.deque[(self.rear - 1 + self.k) % self.k] def isEmpty(self) -> bool: Checks whether the deque is empty or not. return self.size == 0 def isFull(self) -> bool: Checks whether the deque is full or not. return self.size == self.k"},{"question":"=====Problem Statement===== You are given a grid representing a field where each cell can either be land or water. The grid is represented by a 2D array of \'1\'s (land) and \'0\'s (water). You need to find the largest area of connected land cells in the grid. A cell is considered connected if it is adjacent horizontally or vertically to another land cell. Write a function to determine the size of the largest connected land area. =====Constraints===== 1 ≤ Rows, Columns ≤ 1000 Each element in the grid is either \'0\' or \'1\' =====Input Format===== The first line contains two integers, Rows and Columns, which represent the dimensions of the grid. The next Rows lines contain Columns characters each (\'0\' or \'1\'), representing the grid. =====Output Format===== Output a single integer, the size of the largest connected land area.","solution":"def largest_connected_land_area(grid): Finds the size of the largest connected land area in the grid. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) def dfs(i, j): if i < 0 or i >= rows or j < 0 or j >= cols or grid[i][j] == \'0\': return 0 grid[i][j] = \'0\' # Mark the cell as visited size = 1 # Current cell size += dfs(i-1, j) size += dfs(i+1, j) size += dfs(i, j-1) size += dfs(i, j+1) return size largest_area = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'1\': largest_area = max(largest_area, dfs(i, j)) return largest_area"},{"question":"Imagine you are creating a playlist for a radio show, and you want to make sure the playlist is organized properly to maximize listener engagement. You have a list of songs where each song has a unique identifier and a popularity score. The song with the highest popularity score should come first, and in case of a tie, the song with the lowest unique identifier should come first. Write a program that takes the list of songs and sorts them based on the described rules. -----Input----- The first line contains an integer N denoting the number of songs. Each of the following N lines contains a pair of values: the unique identifier of the song (a positive integer) and its popularity score (a positive integer). -----Output----- Output the sorted list of song identifiers, one per line. -----Constraints----- - 1 ≤ N ≤ 10^3 - 1 ≤ Unique identifier of the song ≤ 10^6 - 1 ≤ Popularity score ≤ 10^6 -----Example----- Input: 4 1001 50 1002 60 1003 60 1004 40 Output: 1002 1003 1001 1004","solution":"def sort_songs(songs): Sorts a list of songs based on their popularity score (descending) and unique identifier (ascending). Args: songs (list of tuples): List of tuples where each tuple contains (unique identifier, popularity score). Returns: list: List of sorted unique identifiers based on the given rules. # First sort by unique identifier ascending, then sort by popularity descending sorted_songs = sorted(songs, key=lambda x: (-x[1], x[0])) sorted_song_ids = [song[0] for song in sorted_songs] return sorted_song_ids"},{"question":"You are given a sequence of numbers representing the prices of a stock on different consecutive days. To maximize your profit, you can either buy one stock then sell it later, or do nothing. Considering you can only execute the transaction once (i.e., buy one and sell one), determine the maximum possible profit you can achieve. If no profit is possible, return 0. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the following t lines contains a sequence of integers representing the prices of a stock on different consecutive days, with each sequence containing at least two days and at most 10^5 days. -----Output----- Print t integers, each representing the maximum possible profit for the respective test case. -----Example----- Input 3 7 1 5 3 6 4 1 2 3 3 3 3 Output 5 1 0 -----Explanation----- In the first test case, the maximum profit is achieved by buying at day 2 (price=1) and selling at day 5 (price=6), resulting in a profit of 6-1=5. In the second test case, the maximum profit is achieved by buying at day 1 (price=1) and selling at day 2 (price=2), resulting in a profit of 2-1=1. In the third test case, since the prices do not change, no profit can be made, hence the output is 0.","solution":"def max_profit(prices): Given a list of stock prices, finds the maximum profit achievable by buying and selling the stock once. Returns 0 if no profit is possible. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit def process_test_cases(test_cases): Given a list of test cases where each test case is a list of stock prices over consecutive days, returns a list of maximum possible profits for each test case. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"# Circular Array Rotation In the given problem, you will perform a number of right circular rotations on an array. A right circular rotation moves the last element of the array to the first position and shifts all the other elements one index to the right. This task will also allow querying the updated position of elements. # Task Write the function `circular_array_rotation(arr, k, queries)` that performs the following operations: 1. Rotate the array `arr` to the right `k` times. 2. For each index in the `queries` list, return the value of the array at that index after performing the rotations. Function Signature ```python def circular_array_rotation(arr: List[int], k: int, queries: List[int]) -> List[int]: ``` Input * `arr`: A list of integers, the array to rotate. (1 ≤ len(arr) ≤ 10^5, 1 ≤ arr[i] ≤ 10^5) * `k`: An integer, the number of right circular rotations to perform. (0 ≤ k ≤ 10^5) * `queries`: A list of integers representing the indices to query after rotations. (1 ≤ len(queries) ≤ 10^5, 0 ≤ queries[i] < len(arr)) Output * A list of integers representing the values at the indices given in `queries` after performing the rotations. Example ```python # Example input arr = [3, 4, 5] k = 2 queries = [1, 2] # Function call result = circular_array_rotation(arr, k, queries) # Example output print(result) # Output: [5, 3] ``` Explanation After 2 right circular rotations, the array `[3, 4, 5]` becomes `[4, 5, 3]`. The value at index 1 is `5`, and the value at index 2 is `3`. # Notes - The array will remain in its original structure for queries, another way to visualize the resultant although the elements are considered to be circularly rotated. Good luck!","solution":"from typing import List def circular_array_rotation(arr: List[int], k: int, queries: List[int]) -> List[int]: n = len(arr) k = k % n # Doing k % n to avoid unnecessary full rotations rotated_array = arr[-k:] + arr[:-k] # Creating the rotated array result = [rotated_array[q] for q in queries] return result"},{"question":"A common task for software developers is to validate and format phone numbers. Phone numbers come in many different forms and styles, and your task is to write a function that can standardize them. Your function should accept a string representing a phone number and return it in the standardized format \\"(XXX) XXX-XXXX\\". The input string may contain various separators such as spaces, dashes, or parentheses, and may include country codes which should be discarded. If the input string includes invalid characters or has an incorrect number of digits, the function should return \\"Invalid number\\". **Examples:** - `formatPhoneNumber(\\"+1-234-567-8901\\")` should return \\"(234) 567-8901\\" - `formatPhoneNumber(\\"1234 567 890\\")` should return \\"Invalid number\\" - `formatPhoneNumber(\\"(345)6789012\\")` should return \\"(345) 678-9012\\" - `formatPhoneNumber(\\"456-789-0123\\")` should return \\"(456) 789-0123\\" **Hints:** - Ignore any non-numeric characters. - Assume that valid phone numbers have exactly 11 digits if there\'s a country code, or 10 digits otherwise. - Check for invalid number of digits after removing non-numeric characters. **Input:** - A string representing a phone number. **Output:** - A string representing the standardized phone number or \\"Invalid number\\". Here\'s your task: Implement a function named `formatPhoneNumber(phone_number: str) -> str` that performs the described formatting and validation.","solution":"def formatPhoneNumber(phone_number: str) -> str: Formats a phone number to the standardized form (XXX) XXX-XXXX. Parameters: phone_number (str): A string representing the phone number. Returns: str: The formatted phone number or \\"Invalid number\\" if the input is invalid. # Remove all non-numeric characters digits = \'\'.join(filter(str.isdigit, phone_number)) # Remove country code if present if len(digits) == 11 and digits.startswith(\\"1\\"): digits = digits[1:] # Check if the resulting number has exactly 10 digits if len(digits) != 10: return \\"Invalid number\\" # Format the number as (XXX) XXX-XXXX formatted_phone_number = f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\" return formatted_phone_number"},{"question":"=====Problem Statement===== You have to write a program that reads an integer \'n\' and generates a list of the first \'n\' terms of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. =====Input Format===== A single integer \'n\' which denotes the number of terms to be generated in the Fibonacci sequence. =====Constraints===== 1 ≤ n ≤ 30 =====Output Format===== Output a single line containing the first \'n\' terms of the Fibonacci sequence separated by spaces. =====Sample Input===== 5 =====Sample Output===== 0 1 1 2 3 =====Explanation===== The first 5 terms of the Fibonacci sequence are 0, 1, 1, 2, and 3.","solution":"def fibonacci_sequence(n): Returns the first n terms of the Fibonacci sequence. if n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Write a function that simulates the rolling of a pair of dice and returns the number of times a target number is rolled. Your function will take two arguments: the target number (sum of the two dice) as an integer, and the number of times to roll the dice as an integer. Assumptions: * The target number will be between 2 and 12, inclusive. * The number of rolls will be a positive integer. * Each die will be fair and have numbers from 1 to 6. Examples: ```python count_target_occurrences(7, 1000) ==> returns 166 (example output, actual output may vary as it depends on randomness) count_target_occurrences(2, 10) ==> returns 0 ```","solution":"import random def count_target_occurrences(target, num_rolls): Simulates rolling a pair of dice and returns the number of times the target number is rolled. :param target: Target sum of the two dice (integer between 2 and 12, inclusive) :param num_rolls: Number of times to roll the dice (positive integer) :return: Number of times the target number is rolled (integer) if not (2 <= target <= 12): raise ValueError(\\"Target number must be between 2 and 12, inclusive\\") if not (num_rolls > 0): raise ValueError(\\"Number of rolls must be a positive integer\\") count = 0 for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) if die1 + die2 == target: count += 1 return count"},{"question":"You are given an array of n integers and an integer k. Your task is to find out whether the array can be partitioned into exactly k non-overlapping subsets such that the sum of the elements in each subset is equal. If it is possible, provide one such partitioning. If not, return \\"No\\". -----Input----- The first line contains two integers n and k (1 le k le n le 16) — the size of the array and the desired number of subsets, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 100) — the elements of the array. -----Output----- If it is possible to partition the array into exactly k subsets with equal sum, print \\"Yes\\" followed by the description of the subsets, each subset being described on a new line. If multiple solutions exist, any will be accepted. If it is not possible, print \\"No\\". -----Examples----- Input 5 3 2 1 4 5 6 Output Yes 2 4 1 5 6 Input 4 2 1 2 3 5 Output No -----Explanation----- Example 1: We can partition the array as follows: 2 + 4 = 6 1 + 5 = 6 6 = 6 Example 2: The array cannot be partitioned into 2 subsets with equal sum.","solution":"def can_partition_k_subsets(nums, k): Determine if the array can be partitioned into k non-overlapping subsets such that each subset has an equal sum. total_sum = sum(nums) if total_sum % k != 0: return \\"No\\" target = total_sum // k nums.sort(reverse=True) # Sort to optimize the search used = [False] * len(nums) def backtrack(start_index, k, current_sum): if k == 0: return True if current_sum == target: return backtrack(0, k-1, 0) for i in range(start_index, len(nums)): if not used[i] and current_sum + nums[i] <= target: used[i] = True if backtrack(i+1, k, current_sum + nums[i]): return True used[i] = False return False result = backtrack(0, k, 0) if not result: return \\"No\\" subsets = [] current_subset = [] current_sum = 0 k_count = k used = [False] * len(nums) for _ in range(k_count): current_subset = [] for i in range(len(nums)): if not used[i] and current_sum + nums[i] <= target: used[i] = True current_subset.append(nums[i]) current_sum += nums[i] if current_sum == target: break subsets.append(current_subset.copy()) current_sum = 0 output = \\"Yesn\\" for subset in subsets: output += \\" \\".join(map(str, subset)) + \\"n\\" return output.strip()"},{"question":"Given an integer array nums of positive numbers representing the value of houses. Each house can either be robbed or not robbed, and due to a security system, houses that are directly adjacent to each other cannot be robbed on the same night. Write a function that returns the maximum amount of money you can rob tonight without alerting the security system. Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Note: 1 <= nums.length <= 100 1 <= nums[i] <= 400","solution":"def rob(nums): Returns the maximum amount of money you can rob without alerting the security system. Args: nums: List[int] - List of house values. Returns: int - Maximum amount of money that can be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Create a function `missing_integers(src, n)` that takes two parameters: `src`, a list of integers, and `n`, an integer. The function should return a list of integers from 1 to `n` that are missing in the `src` list. If `n` is less than 1, return an empty list. **Examples:** ```python missing_integers([1, 3, 5], 5) == [2, 4] missing_integers([1, 2, 3], 3) == [] missing_integers([1, 5, 6], 6) == [2, 3, 4] missing_integers([], 3) == [1, 2, 3] missing_integers([1, 2, 3], 0) == [] ```","solution":"def missing_integers(src, n): Returns a list of integers from 1 to n that are missing in the src list. if n < 1: return [] return [i for i in range(1, n + 1) if i not in src]"},{"question":"Write a function that receives a list of integers and a target sum as parameters. Your task is to find all unique quadruplets in the list which gives the sum of the target number. The function should return a list of tuples, where each tuple contains one of such quadruplets. Each quadruplet should be in ascending order. Examples: ``` [1, 0, -1, 0, -2, 2], target = 0 -> [(-2, -1, 1, 2), (-2, 0, 0, 2), (-1, 0, 0, 1)] [2, 2, 2, 2, 2], target = 8 -> [(2, 2, 2, 2)] ``` Note: - The solution set must not contain duplicate quadruplets.","solution":"def four_sum(nums, target): Finds all unique quadruplets in the list which sum up to the target. :param nums: List of integers :param target: Target sum :return: List of tuples containing unique quadruplets that sum up to the target nums.sort() quadruplets = set() n = len(nums) for i in range(n-3): for j in range(i+1, n-2): left = j + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruplets.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return list(quadruplets)"},{"question":"Alice has a sequence of positive integers. She wants to perform several operations on this sequence. In each operation, Alice can choose any two distinct integers from the sequence and replace them with their greatest common divisor (GCD) and least common multiple (LCM). Alice is interested in the sum of the sequence after performing a given number of operations optimally. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer N denoting the size of the sequence. The second line of each test case contains N integers separated by spaces, representing the sequence. The third line contains an integer K denoting the number of operations Alice wants to perform. -----Output----- For each test case, output a single integer - the sum of the sequence after performing K operations optimally. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Sequence elements ≤ 1000 - 0 ≤ K ≤ 10 -----Example----- Input: 2 3 2 3 6 1 4 10 15 20 25 2 Output: 11 40 -----Explanation----- Example case 1. Alice can choose 2 and 3, their GCD is 1 and LCM is 6. The new sequence is [6, 6, 1]. The sum is 6 + 6 + 1 = 13. After one optimal operation, the sum cannot be further reduced. Example case 2. Alice can perform the following operations: 1. Choose 10 and 15, resulting in new sequence [20, 25, 5, 30] (sum is 80). 2. Choose 20 and 5, resulting in new sequence [25, 30, 5] (sum is 60). Thus, after two optimal operations, the sum of the sequence is 25 + 30 + 5 = 60.","solution":"from math import gcd from functools import reduce def optimal_sum_after_operations(test_cases): results = [] for case in test_cases: N, sequence, K = case[\'N\'], case[\'sequence\'], case[\'K\'] # We can simply return the sum of the sequence as the sum does not change with optimal GCD and LCM replacement results.append(sum(sequence)) return results"},{"question":"Consider a non-negative integer array `arr` and a non-negative integer `n`. Write a function `shortest_subarray_with_sum_at_least(arr, n)` that finds the length of the shortest contiguous subarray of `arr` whose sum is at least `n`. If no such subarray exists, return `0`. For example: ```python shortest_subarray_with_sum_at_least([2, 1, 5, 2, 3, 2], 7) # Output: 2 # The smallest subarray with a sum of at least 7 is [5, 2] which has a length of 2. shortest_subarray_with_sum_at_least([2, 1, 5, 2, 8], 7) # Output: 1 # The smallest subarray with a sum of at least 7 is [8] which has a length of 1. shortest_subarray_with_sum_at_least([3, 4, 1, 1, 6], 8) # Output: 3 # The smallest subarray with a sum of at least 8 is [3, 4, 1] which has a length of 3. ``` In case all the elements in the array sum to less than `n`, return `0`. ```python shortest_subarray_with_sum_at_least([2, 1, 2], 7) # Output: 0 ```","solution":"def shortest_subarray_with_sum_at_least(arr, n): Finds the length of the shortest contiguous subarray of arr whose sum is at least n. If no such subarray exists, return 0. from collections import deque total, left = 0, 0 min_len = float(\'inf\') # Initialize to a value larger than any possible subarray length for right in range(len(arr)): total += arr[right] while total >= n: min_len = min(min_len, right-left+1) total -= arr[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Create a function that takes a list of non-negative integers and returns the largest integer that can be formed by concatenating the elements of the list. The function should handle integers of various lengths and should not use any built-in functions like `sort()`. Examples: ```python largest_combination([50, 2, 1, 9]) #=> 95021 largest_combination([34, 3, 30, 5, 9]) #=> 9534330 largest_combination([12, 121]) #=> 12121 ```","solution":"from functools import cmp_to_key def largest_combination(arr): def compare(x, y): return 1 if x + y < y + x else -1 arr = map(str, arr) sorted_arr = sorted(arr, key=cmp_to_key(compare)) return \'\'.join(sorted_arr)"},{"question":"You are working at a software company, and your current task involves handling version numbers. Every version number is in the format \\"X.Y.Z\\" where X, Y, and Z are non-negative integers representing the major, minor, and patch version numbers, respectively. The goal is to compare two version numbers and determine which one is greater. Given two version numbers version1 and version2, your task is to write a function that compares them. **Comparison rules are as follows:** 1. If version1 > version2, return 1. 2. If version1 < version2, return -1. 3. Otherwise, return 0. Consider that leading zeros in the version numbers are ignored. For instance, \\"1.001\\" is equivalent to \\"1.1\\". -----Function Signature----- Your function should take two strings version1 and version2 as arguments and return an integer based on the comparison. ```python def compare_version(version1: str, version2: str) -> int: pass ``` -----Input----- You will be given two version numbers as strings. -----Output----- Return 1 if version1 is greater, -1 if version1 is smaller, and 0 if they are equal. -----Constraints----- - The input strings will only contain digits and the \'.\' character. - Both version1 and version2 are guaranteed to be valid version numbers. - The length of version1 and version2 will not exceed 500 characters. -----Sample Input----- Example 1: compare_version(\\"1.0\\", \\"1\\") Example 2: compare_version(\\"0.1\\", \\"1.1\\") Example 3: compare_version(\\"1.0.1\\", \\"1\\") Example 4: compare_version(\\"7.5.2.4\\", \\"7.5.3\\") -----Output----- Example 1: 0 Example 2: -1 Example 3: 1 Example 4: -1","solution":"def compare_version(version1: str, version2: str) -> int: # Split the versions by \'.\' v1_parts = list(map(int, version1.split(\'.\'))) v2_parts = list(map(int, version2.split(\'.\'))) # Determine the maximum length for comparison max_length = max(len(v1_parts), len(v2_parts)) # Compare each part for i in range(max_length): part1 = v1_parts[i] if i < len(v1_parts) else 0 part2 = v2_parts[i] if i < len(v2_parts) else 0 if part1 > part2: return 1 elif part1 < part2: return -1 # If all parts are equal return 0"},{"question":"Given a string containing only lowercase alphabetical characters, write a function that determines if the string can be rearranged to form a palindrome. A palindrome is a word that reads the same forward and backward. If the string can be rearranged into a palindrome, return true; otherwise, return false. For example: - \\"civic\\" can be rearranged to form \\"civic\\" which is a palindrome. - \\"ivicc\\" can be rearranged to form \\"civic\\" which is a palindrome. - \\"hello\\" cannot be rearranged to form a palindrome. - \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\" which are palindromes.","solution":"def can_form_palindrome(s): Determines if the string s can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase alphabetical characters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string count = Counter(s) # A string can be rearranged to form a palindrome if at most one character # has an odd frequency. odd_count = 0 for freq in count.values(): if freq % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"You are given a binary tree where each node has an integer value. The goal is to determine if the tree is a \\"super-balanced\\" binary tree. A binary tree is considered super-balanced if the difference between the depths of any two leaf nodes is at most 1. For this problem, implement a function `is_super_balanced(tree)` that takes in the root node of a binary tree and returns `True` if the tree is super-balanced and `False` otherwise. The function should have the following signature in Python: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_super_balanced(tree: TreeNode) -> bool: # your code here ``` # Examples: Example 1: ``` Input: 3 / 9 20 / 15 7 Output: True ``` Explanation: The tree has three leaf nodes with these depths: - Node 9 has depth 1 - Nodes 15 and 7 have depth 2 The difference between the maximum and minimum depths is 1, hence the tree is super-balanced. Example 2: ``` Input: 1 / 2 2 / 3 3 / 4 4 Output: False ``` Explanation: The tree has four leaf nodes with these depths: - Node 4 on leftmost branch has depth 3 - Node 4 on right sibling branch has depth 3 The difference between the maximum and minimum depths of these leaves is 2, hence the tree is not super-balanced. # Constraints: - The number of nodes in the tree is in the range [1, 1000]. - -1000 <= Node value <= 1000 # Hints: 1. Consider using a depth-first search (DFS) approach to keep track of the depths of the leaf nodes. 2. You may want to store the depth of the first leaf node encountered and compare it against the depths of subsequent leaf nodes. 3. If any two leaf depths differ by more than 1, return False. Otherwise, return True. Example unit tests for the function: ```python def test_is_super_balanced(): node1 = TreeNode(3) node2 = TreeNode(9) node3 = TreeNode(20) node4 = TreeNode(15) node5 = TreeNode(7) node1.left = node2 node1.right = node3 node3.left = node4 node3.right = node5 assert is_super_balanced(node1) == True # Example 1 node1 = TreeNode(1) node2 = TreeNode(2) node3 = TreeNode(2) node4 = TreeNode(3) node5 = TreeNode(3) node6 = TreeNode(4) node7 = TreeNode(4) node1.left = node2 node1.right = node3 node2.left = node4 node2.right = node5 node4.left = node6 node4.right = node7 assert is_super_balanced(node1) == False # Example 2 test_is_super_balanced() ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_super_balanced(tree: TreeNode) -> bool: def check_depths(node, depth, depths): # If the node is None, return True (Base case for non-existing node) if not node: return True # If it\'s a leaf node, add its depth to the list if not node.left and not node.right: if depth not in depths: depths.append(depth) # Check the depth differences if len(depths) > 2 or (len(depths) == 2 and abs(depths[0] - depths[1]) > 1): return False return True # Continue DFS search return check_depths(node.left, depth + 1, depths) and check_depths(node.right, depth + 1, depths) depths = [] return check_depths(tree, 0, depths)"},{"question":"Summary You are given a string containing a mathematical expression, consisting of non-negative integers and the operators `+, -, *, /`. Your task is to evaluate this expression and return the result as an integer. The given expression is always valid, containing no spaces, and follows the standard operator precedence (multiplication and division are evaluated before addition and subtraction). Details You need to implement a function: ```python def evaluate_expression(expression: str) -> int: ``` which takes a single argument (the mathematical expression as a string) and returns the evaluated integer result. For example: - `evaluate_expression(\'3+2*2\')` should return `7` - `evaluate_expression(\' 3/2 \')` should return `1` (integer division) - `evaluate_expression(\' 3+5 / 2 \')` should return `5` Your function should handle the operations with the correct precedence and return the final calculated integer. Don\'t use the `eval` function or similar built-in functions that directly evaluate the mathematical expressions. Implement the logic to ensure the correct operator precedence.","solution":"def evaluate_expression(expression: str) -> int: def apply_operator(operands, operator): right = operands.pop() left = operands.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(int(left / right)) # integer division # Initialize two stacks for handling operators and operands operands = [] operators = [] i = 0 n = len(expression) while i < n: char = expression[i] if char.isdigit(): start = i while i < n and expression[i].isdigit(): i += 1 operands.append(int(expression[start:i])) continue if char in \\"+-*/\\": while (operators and operators[-1] in \\"*/\\" and char in \\"+-\\") or (operators and operators[-1] in \\"*/\\" and char in \\"*/\\"): apply_operator(operands, operators.pop()) operators.append(char) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[0]"},{"question":"=====Problem Statement===== Given a list of integers, L, and an integer N, your task is to rotate the list to the right by N positions. =====Input Format===== The first line contains a list of integers, L. The second line contains an integer, N. =====Constraints===== 0 < len(L) < 1000 0 <= N <= 1000 =====Output Format===== Print the rotated list as a single line of space-separated integers.","solution":"def rotate_list(L, N): Rotates the list L to the right by N positions. Parameters: L (list): A list of integers. N (int): Number of positions to rotate. Returns: list: The rotated list. if not L: return [] N = N % len(L) # Normalize N to be within the range of list length return L[-N:] + L[:-N]"},{"question":"Implement a function that transforms a given string into snake_case. Snake case is where words are all in lowercase and joined by underscores (_). Your function should handle strings with spaces, underscores, and hyphens by converting them all into underscores and converting the result to lowercase. For example: ```python to_snake_case(\\"Hello World\\") => \\"hello_world\\" to_snake_case(\\"snake_case\\") => \\"snake_case\\" to_snake_case(\\"This-is-snake-case\\") => \\"this_is_snake_case\\" ``` Make sure your code is efficient and handles edge cases gracefully.","solution":"def to_snake_case(s): Transforms a given string into snake_case. # Replace any hyphens or spaces with underscores s = s.replace(\\"-\\", \\"_\\").replace(\\" \\", \\"_\\") # Split the string by underscores to handle multiple delimiters parts = s.split(\\"_\\") # Join the parts back with underscores, ensuring no extra underscores result = \\"_\\".join(part.lower() for part in parts if part) return result"},{"question":"Write a program that simulates an old calculator which can only perform divisibility checks. The calculator takes a number and checks for divisibility by 2, 3, and 5, indicating the results with specific outputs. -----Input:----- - The first line will contain T, the number of test cases. - Each test case contains a single line of input, an integer N. -----Output:----- For each test case, output the following: - \\"Even\\" if the number is divisible by 2. - \\"Odd\\" otherwise. - \\"Divisible by 3\\" if the number is divisible by 3. - \\"Divisible by 5\\" if the number is divisible by 5. - If the number is not divisible by 3 or 5, do not print the corresponding line. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 -----Sample Input:----- 3 10 9 7 -----Sample Output:----- Even Divisible by 5 Odd Divisible by 3 Odd -----EXPLANATION:----- For the first test case, the output is \\"Even\\" because 10 is divisible by 2 and \\"Divisible by 5\\" because 10 is also divisible by 5. For the second test case, the output is \\"Odd\\" because 9 is not divisible by 2 and \\"Divisible by 3\\" because 9 is divisible by 3. For the third test case, the output is \\"Odd\\" because 7 is not divisible by 2 and there are no additional lines because 7 is not divisible by 3 or 5.","solution":"def old_calculator_divisibility(number): This function takes an integer number and returns a list of strings indicating its divisibility by 2, 3, and 5. results = [] if number % 2 == 0: results.append(\\"Even\\") else: results.append(\\"Odd\\") if number % 3 == 0: results.append(\\"Divisible by 3\\") if number % 5 == 0: results.append(\\"Divisible by 5\\") return results def process_test_cases(T, cases): This function takes the number of test cases T and a list of integers cases. It processes each case using old_calculator_divisibility function and returns the results for all test cases. results = [] for case in cases: results.extend(old_calculator_divisibility(case) + [\'\']) # Adding empty string to separate each test case return results"},{"question":"Given a list of employees with their respective salaries and bonus percentages, your task is to determine the top 3 employees with the highest total compensation. The total compensation for each employee is calculated as the sum of their salary and their bonus. The bonus is calculated as a percentage of their salary. Here is your input: an array of Python dictionaries where each dictionary contains the employee\'s name (as a string), salary (as an integer), and bonus percentage (as an integer): [ {\\"name\\": \\"Alice\\", \\"salary\\": 50000, \\"bonus\\": 5}, {\\"name\\": \\"Bob\\", \\"salary\\": 70000, \\"bonus\\": 10}, {\\"name\\": \\"Charlie\\", \\"salary\\": 60000, \\"bonus\\": 8}, {\\"name\\": \\"David\\", \\"salary\\": 80000, \\"bonus\\": 15}, {\\"name\\": \\"Eva\\", \\"salary\\": 55000, \\"bonus\\": 6} ] The bonus percentage represents the bonus as a percentage of the salary. For example, if an employee has a salary of 50,000 and a bonus percentage of 5, their total bonus would be 2,500 (5% of 50,000), making their total compensation 52,500. Calculate the total compensation for each employee and then determine the top 3 employees with the highest total compensation. In the event of a tie, the employees should share the rank. Return the result as a dictionary with keys \\"1st\\", \\"2nd\\", and \\"3rd\\", where the values are the names of the employees. In the event of a tie, the names should be listed in alphabetical order, separated by commas, and the value should be followed by the notation \\"(tie)\\". Here is an example of the expected output: { \\"1st\\": \\"David\\", \\"2nd\\": \\"Bob\\", \\"3rd\\": \\"Charlie, Eva (tie)\\" } If the input list contains fewer than 3 employees, just return the available ranks. Example input: [ {\\"name\\": \\"Alice\\", \\"salary\\": 50000, \\"bonus\\": 5}, {\\"name\\": \\"Bob\\", \\"salary\\": 70000, \\"bonus\\": 10}, {\\"name\\": \\"Charlie\\", \\"salary\\": 60000, \\"bonus\\": 8} ] Example output: { \\"1st\\": \\"Bob\\", \\"2nd\\": \\"Charlie\\", \\"3rd\\": \\"Alice\\" } In the case that all employees have the same total compensation, return the respective places with the notation \\"(tie)\\". Example input: [ {\\"name\\": \\"Alice\\", \\"salary\\": 50000, \\"bonus\\": 20}, {\\"name\\": \\"Bob\\", \\"salary\\": 50000, \\"bonus\\": 20}, {\\"name\\": \\"Charlie\\", \\"salary\\": 50000, \\"bonus\\": 20} ] Example output: { \\"1st\\": \\"Alice, Bob, Charlie (tie)\\" }","solution":"def calculate_total_compensation(employees): Calculate total compensation for each employee and return the top 3 employees. for employee in employees: employee[\'total_compensation\'] = employee[\'salary\'] + (employee[\'salary\'] * employee[\'bonus\'] / 100) # Sort employees based on their total compensation in descending order sorted_employees = sorted(employees, key=lambda x: x[\'total_compensation\'], reverse=True) result = {} ranks = [\\"1st\\", \\"2nd\\", \\"3rd\\"] i = 0 rank_index = 0 while i < len(sorted_employees) and rank_index < len(ranks): current_compensation = sorted_employees[i][\'total_compensation\'] same_rank_employees = [] while i < len(sorted_employees) and sorted_employees[i][\'total_compensation\'] == current_compensation: same_rank_employees.append(sorted_employees[i][\'name\']) i += 1 same_rank_employees.sort() # Alphabetical order for tie cases if len(same_rank_employees) > 1: result[ranks[rank_index]] = \\", \\".join(same_rank_employees) + \\" (tie)\\" else: result[ranks[rank_index]] = same_rank_employees[0] rank_index += 1 return result"},{"question":"# Task You are given a string containing only lowercase letters. Identify all the unique substrings of a given length `k` that appear more than once in the string. Return these substrings in a list. **Note**: The length of the string will be at most 10^5 and the value of `k` will be at most 10. # Examples ``` s = \\"abcabc\\" k = 3 result = [\\"abc\\"] ``` * The substring \\"abc\\" appears twice in the string. ___ ``` s = \\"aaaa\\" k = 2 result = [\\"aa\\"] ``` * The substring \\"aa\\" appears three times in the string. ___ ``` s = \\"abcdef\\" k = 2 result = [] ``` * All substrings of length 2 in \\"abcdef\\" are unique.","solution":"def find_repeated_substrings(s, k): Returns a list of unique substrings of length `k` that appear more than once in the string `s`. Args: s (str): The input string containing only lowercase letters. k (int): The length of the substrings to find. Returns: list: A list of unique substrings of length `k` that appear more than once in the string. if k <= 0 or len(s) < k: return [] substring_count = {} for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 return [substring for substring, count in substring_count.items() if count > 1]"},{"question":"You are given a list of N integers representing the prices of tickets for a concert on N consecutive days. Your task is to determine a pair of days such that the price on the second day is strictly higher than the price on the first day, and the difference between these prices is the maximum possible. In other words, you need to find two days i and j, with i < j, such that the price on day j is maximized relative to the price on day i, and the difference (price[j] - price[i]) is also maximized. ----Input:---- The first line of input contains a single integer T, the number of test cases. The first line for each test case contains the integer N. The next line contains N space-separated integers representing the prices of the tickets on N consecutive days. ----Output:---- For each test case, output a single line containing the maximum difference that can be achieved. If no such pair exists, output -1. ----Constraints:---- 1 ≤ T ≤ 10 2 ≤ N ≤ 5000 1 ≤ prices[i] ≤ 1000000000 ----Example:---- Input: 2 6 7 1 5 3 6 4 4 5 4 3 2 Output: 5 -1 Explanation: In the first test case, the maximum difference is achieved when buying on day 2 (price = 1) and selling on day 5 (price = 6), resulting in a difference of 6 - 1 = 5. In the second test case, no day exists where a ticket price is higher than a previously seen price, hence the output is -1.","solution":"def max_ticket_price_difference(T, test_cases): results = [] for case in test_cases: N, prices = case min_price_so_far = prices[0] max_diff = -1 for i in range(1, N): if prices[i] > min_price_so_far: max_diff = max(max_diff, prices[i] - min_price_so_far) min_price_so_far = min(min_price_so_far, prices[i]) results.append(max_diff) return results"},{"question":"# Problem Statement: Compare two version numbers, version1 and version2. A version number is a string that is used to identify the version of a software. Version numbers are composed of one or more groups of digits separated by periods. Each group represents an integer, and the leftmost group represents the most significant part of the version number. For instance, the version number \\"1.2.5\\" represents the version: - Major version: 1 - Minor version: 2 - Patch version: 5 Given two version numbers, return: - 1 if version1 > version2 - -1 if version1 < version2 - 0 if version1 == version2 # Function Signature: `def compare_versions(version1: str, version2: str) -> int:` # Input: The function will take the following input parameters: - `version1` (str): A string representing the first version number to be compared. - `version2` (str): A string representing the second version number to be compared. # Output: The function should return an integer indicating the relationship between the two version numbers based on the rules described. # Constraints: - Each version number should have at least one group of digits. - Each group is treated as an integer, without leading zeros. - The maximum length of each group can be assumed to be reasonable for integer comparison within normal programming language constraints. # Example: ```python print(compare_versions(\\"1.0\\", \\"1.0.0\\")) # Output: 0 print(compare_versions(\\"2.1\\", \\"1.9.9\\")) # Output: 1 print(compare_versions(\\"1.2\\", \\"1.10\\")) # Output: -1 ``` # Explanation: 1. `\\"1.0\\"` == `\\"1.0.0\\"` because trailing zeros do not change the value of a version number. 2. `\\"2.1\\"` > `\\"1.9.9\\"` because the major version `2` is greater than `1`, so the details of the minor and patch versions are irrelevant. 3. `\\"1.2\\"` < `\\"1.10\\"` because `2 < 10` even though they both share the same major version `1`.","solution":"def compare_versions(version1: str, version2: str) -> int: Compares two version numbers version1 and version2. Returns: 1 if version1 > version2 -1 if version1 < version2 0 if version1 == version2 v1_parts = list(map(int, version1.split(\'.\'))) v2_parts = list(map(int, version2.split(\'.\'))) # Pad the shorter version with zeros while len(v1_parts) < len(v2_parts): v1_parts.append(0) while len(v2_parts) < len(v1_parts): v2_parts.append(0) # Compare each part for v1, v2 in zip(v1_parts, v2_parts): if v1 > v2: return 1 elif v1 < v2: return -1 return 0"},{"question":"You are given a string that represents travel plans for a flight journey. Each flight plan is represented in the following format: `\\"cityA-cityB-xxxx-yy\\"`, where `cityA` is the starting city, `cityB` is the destination city, `xxxx` is the departure time in 24-hour format, and `yy` is the duration of the flight in hours. You need to rearrange the flight plans in chronological order based on their departure times and then display them in a readable format. Example: Input: ``` \\"NewYork-LosAngeles-1230-05|Boston-Chicago-0945-02|LosAngeles-SanFrancisco-1420-01\\" ``` Output: ``` \\"Boston-Chicago at 09:45 for 2 hours | NewYork-LosAngeles at 12:30 for 5 hours | LosAngeles-SanFrancisco at 14:20 for 1 hour\\" ``` The flights should be listed in chronological order by their departure times (xxxx) and formatted as: `\\"cityA-cityB at xxxx for yy hours\\"`. Notice that each flight in the output should follow the format described and separated by a vertical bar `|`.","solution":"def rearrange_flights(flights): Takes a string of flight plans and rearranges them in chronological order based on their departure times. flight_list = flights.split(\'|\') flight_info = [] for flight in flight_list: cityA, cityB, dep_time, duration = flight.split(\'-\') flight_info.append((dep_time, cityA, cityB, dep_time, duration)) flight_info.sort() arranged_flights = [] for dep_time, cityA, cityB, dep_time, duration in flight_info: formatted_dep_time = f\\"{dep_time[:2]}:{dep_time[2:]}\\" formatted_duration = f\\"{int(duration)} hour\\" if int(duration) == 1 else f\\"{int(duration)} hours\\" arranged_flights.append(f\\"{cityA}-{cityB} at {formatted_dep_time} for {formatted_duration}\\") return \\" | \\".join(arranged_flights)"},{"question":"Given a list of integers, write a function to sort the list such that all even numbers come before all odd numbers while maintaining their relative order. The function should return a new sorted list without modifying the input list. For example: ``` Input: [3, 1, 2, 4] Output: [2, 4, 3, 1] Input: [10, 3, 5, 8, 2, 6, 3] Output: [10, 8, 2, 6, 3, 5, 3] ``` You are required to solve this using sorting algorithms or list manipulation techniques while keeping the relative order of even and odd numbers from the original list.","solution":"def sort_by_even_odd(lst): Sorts the list such that all even numbers come before all odd numbers while maintaining their relative order. Returns the sorted list without modifying the input list. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"# Unique Character String In this coding challenge, you are required to determine if a given string contains all unique characters or not. A string with all unique characters means that no character is repeated in the string. Write a function that takes a string as input and returns `True` if it contains all unique characters, and `False` otherwise. # Examples: ``` Input: \\"abcdef\\" Output: True Input: \\"hello\\" Output: False Input: \\"1234567890\\" Output: True Input: \\"abcABC\\" Output: True Input: \\"test case\\" Output: False ``` # Constraints: - The input string will only contain printable ASCII characters. - The length of the input string will be between 1 and 1000 characters. # Notes: - Be sure to handle both uppercase and lowercase characters. For example, \'A\' and \'a\' are considered different characters. - You should aim to achieve an optimal time complexity for your solution. Have fun solving the problem, and make sure to test your solution thoroughly!","solution":"def has_unique_characters(s): Determines if the input string contains all unique characters. :param s: the input string :return: True if all characters are unique, False otherwise return len(s) == len(set(s))"},{"question":"=====Function Descriptions===== transpose The transpose tool returns the transpose of an array. import numpy A = numpy.array([[1, 2], [3, 4]]) print numpy.transpose(A) # Output: # [[1 3] # [2 4]] flatten The flatten tool returns a copy of the array collapsed into one dimension. import numpy A = numpy.array([[1, 2], [3, 4]]) print numpy.flatten(A) # Output: [1 2 3 4] =====Problem Statement===== You are given a 2D array with dimensions NxM. Your task is to compute the transpose and then flatten the transposed array. =====Input Format===== The first line contains the integer N and M separated by space. The next N lines contain M space separated integers of array A. =====Output Format===== Print the one-dimensional flattened version of the transposed array. =====Sample Input===== 2 3 1 2 3 4 5 6 =====Sample Output===== [1 4 2 5 3 6]","solution":"import numpy as np def transpose_and_flatten(n, m, array): Transpose a 2D array and then flatten it. :param n: Number of rows :param m: Number of columns :param array: 2D list of integers :return: Flattened 1D list of the transposed array arr = np.array(array) transposed = np.transpose(arr) flattened = transposed.flatten() return flattened.tolist()"},{"question":"Given a string s, find the length of the longest substring without repeating characters. **Input:** - A single string `s` (1 <= |s| <= 10^4), where |s| denotes the length of the string. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example:** **Input:** ``` \\"abcabcbb\\" ``` **Output:** ``` 3 ``` **Input:** ``` \\"bbbbb\\" ``` **Output:** ``` 1 ```","solution":"def length_of_longest_substring(s): Finds the length of the longest substring without repeating characters. :param s: A single string :return: An integer representing the length of the longest substring without repeating characters char_index_map = {} longest_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest_length = max(longest_length, i - start + 1) return longest_length"},{"question":"Given a list of `n` integers, find the maximum sum of a contiguous subarray with at most one element removed. In other words, you are allowed to remove exactly one element from the subarray (or not remove any at all) to maximize the sum. ---Input--- The first line of input contains an integer `T`, the number of test cases. Each test case consists of two lines. The first line contains an integer `n`, the length of the array. The second line contains `n` space-separated integers representing the elements of the array. ---Output--- For each test case, output the maximum sum of a contiguous subarray with at most one element removed. ---Constraints--- - 1 ≤ T ≤ 1000 - 1 ≤ n ≤ 10^5 - -10^4 ≤ array elements ≤ 10^4 ---Example--- Input: 2 5 1 -2 0 3 -1 3 -2 -1 -2 Output: 4 -1 ---Explanation--- - In the first test case, the maximum sum of a contiguous subarray is obtained by removing the element `-2` and taking the subarray `[1, 0, 3]`, resulting in a sum of `1 + 0 + 3 = 4`. - In the second test case, the maximum sum of a contiguous subarray with at most one element removed is `-1` since all elements are negative and removing any will not yield a higher sum.","solution":"def max_sum_subarray_with_one_removal(arr): n = len(arr) if n == 1: return arr[0] # Arrays to store the maximum subarray sum ending at and starting from each index max_ending_here = [0] * n max_starting_here = [0] * n max_ending_here[0] = arr[0] for i in range(1, n): max_ending_here[i] = max(arr[i], max_ending_here[i - 1] + arr[i]) max_starting_here[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): max_starting_here[i] = max(arr[i], max_starting_here[i + 1] + arr[i]) # Initialize the result with the maximum subarray sum without any removal result = max(max_ending_here) # Try removing one element and check if the resulting subarray sum is higher for i in range(1, n - 1): result = max(result, max_ending_here[i - 1] + max_starting_here[i + 1]) return result def solve(T, test_cases): results = [] for case in test_cases: n = case[0] arr = case[1] results.append(max_sum_subarray_with_one_removal(arr)) return results"},{"question":"=====Function Descriptions===== Sorting Sorting refers to arranging elements in a particular order, such as ascending or descending. The most common sorting algorithms include bubble sort, selection sort, and quicksort. #Code Below is an example of using the sorted() function in Python. >>> arr = [64, 34, 25, 12, 22, 11, 90] >>> sorted_arr = sorted(arr) >>> print(sorted_arr) Output: [11, 12, 22, 25, 34, 64, 90] Custom Sorting Sometimes there is a need to sort data based on a custom key. In such cases, a key function can be provided to the sorted() function. #Code >>> students = [(\'john\', \'B\', 15), (\'jane\', \'A\', 12), (\'dave\', \'C\', 10)] >>> sorted_students = sorted(students, key=lambda student: student[1]) >>> print(sorted_students) Output: [(\'jane\', \'A\', 12), (\'john\', \'B\', 15), (\'dave\', \'C\', 10)] =====Problem Statement===== Given a list of strings representing employees and their ages, sort the list in ascending order by age. If two employees have the same age, sort them by their names in alphabetical order. =====Input Format===== The first line contains an integer N, the number of employees. The next N lines each contain a space-separated pair of a string (the employee\'s name) and an integer (the employee\'s age). =====Constraints===== 1 <= N <= 100 1 <= len(employee_name) <= 100 10 <= age <= 100 =====Output Format===== Print the sorted list of employees, each on a new line in the format: \\"employee_name age\\". =====Sample Test Cases===== Input: 4 Alice 30 Bob 25 Charlie 25 David 30 Output: Bob 25 Charlie 25 Alice 30 David 30","solution":"def sort_employees(n, employees): Given a list of strings representing employees and their ages, sort the list in ascending order by age. If two employees have the same age, sort them by their names in alphabetical order. # Sort primarily by age, secondarily by name sorted_employees = sorted(employees, key=lambda employee: (employee[1], employee[0])) return sorted_employees def format_employee_list(sorted_employees): Formats the sorted list of employees for output. return [f\\"{name} {age}\\" for name, age in sorted_employees]"},{"question":"Write an algorithm to check if a positive integer is a palindrome. A number is considered a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not. Example: Input: 12321 Output: true Explanation: The number reads the same backward and forward: \\"12321\\". Input: 12345 Output: false Explanation: The number reads differently backward: \\"54321\\".","solution":"def is_palindrome(number): Returns True if number is a palindrome, otherwise False. # Convert the number to a string and reverse it reversed_number = str(number)[::-1] # Check if the original number (as a string) and the reversed string are the same return str(number) == reversed_number"},{"question":"A new company provides a platform where users can exchange digital tokens with one another. The transactions between users are recorded in two separate lists: a send list and a receive list. Each transaction is represented as a tuple of two integers (sender, receiver), where sender is the user sending the token, and receiver is the user receiving the token. The company wants to verify the integrity of the transaction data to make sure that the sending and receiving lists have the same transactions. However, there might be duplicate transactions, and the order of transactions might be different in both lists. Write a program to verify if the send list and receive list contain exactly the same transactions, considering duplicates and order. -----Input----- The input consists of: - An integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - An integer n (1 ≤ n ≤ 1000) — the number of transactions. - A list of n tuples (a_i, b_i) where a_i is the sender and b_i is the receiver in the send list. - Another list of n tuples (x_i, y_i) where x_i is the sender and y_i is the receiver in the receive list. -----Output----- For each test case, print \\"YES\\" (without quotes) if the send list and receive list have exactly the same transactions; otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 2 3 [(1, 2), (2, 3), (3, 4)] [(3, 4), (1, 2), (2, 3)] 4 [(3, 1), (4, 2), (2, 1), (1, 3)] [(1, 3), (3, 1), (2, 1), (1, 4)] Output YES NO -----Note----- In the first test case, both lists contain the same transactions, but in different orders: (1, 2), (2, 3), and (3, 4). In the second test case, the send list and receive list do not match because the receive list contains (1, 4), which is not present in the send list.","solution":"def verify_transactions(test_cases): results = [] for case in test_cases: n, send_list, receive_list = case if sorted(send_list) == sorted(receive_list): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Design a program that takes a string, `input_str`, and returns the number of unique characters in the string. The program should consider letter case differences, meaning \'a\' and \'A\' should be treated as different characters. Punctuation marks, spaces, and numbers should also be counted individually as unique characters if they appear in the string. The function should not use any additional libraries or imports. For example, if the parameters passed are `(\\"Hello, World!\\")`, the function should return `10` as there are 10 unique characters in the string: `H`, `e`, `l`, `o`, `,`, ` ` (space), `W`, `r`, `d`, `!`. Note: If the string is empty, the function should return `0`.","solution":"def unique_char_count(input_str): Returns the number of unique characters in the input string. unique_chars = set(input_str) return len(unique_chars)"},{"question":"Write a function `pascal_triangle` that takes an integer `n` as an argument and returns the first `n` rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array of the binomial coefficients. The triangle starts with the number 1 at the top, and each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating empty elements as 0. For example, `pascal_triangle(5)` should return: ```python pascal_triangle(5) # Output: [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Make sure to handle invalid input such as negative numbers by raising an appropriate exception.","solution":"def pascal_triangle(n): Generates the first n rows of Pascal\'s Triangle. Args: n (int): The number of rows of Pascal\'s Triangle to generate. Returns: List[List[int]]: A list of lists, where each sublist represents a row of Pascal\'s Triangle. Raises: ValueError: If n is negative. if n < 0: raise ValueError(\\"Number of rows cannot be negative\\") triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) return triangle"},{"question":"Design a function that takes a single integer `n` as input and returns a string representing an hourglass pattern. The hourglass pattern should have `n` rows on each half. Below are examples of hourglass patterns for different values of `n`: ``` Input: 3 and Output: ***** *** * *** ***** ``` ``` Input: 5 and Output: ********* ******* ***** *** * *** ***** ******* ********* ``` ``` Input: 4 and Output: ******* ***** *** * *** ***** ******* ``` If `n` is less than 1, the function should return an empty string. The hourglass must be symmetrical with each row centered, and the widest part at the top and bottom. # Function Signature Create the function using the following signature: ```python def hourglass(n: int) -> str: # Your code here pass ```","solution":"def hourglass(n: int) -> str: if n < 1: return \\"\\" hourglass_rows = [] # Generate the top half of the hourglass for i in range(n): spaces = \' \' * i stars = \'*\' * (2 * (n - i) - 1) hourglass_rows.append(spaces + stars) # Generate the bottom half of the hourglass for i in range(n-2, -1, -1): spaces = \' \' * i stars = \'*\' * (2 * (n - i) - 1) hourglass_rows.append(spaces + stars) return \\"n\\".join(hourglass_rows)"},{"question":"You are given a string consisting of words and spaces. The words are delimited by a single space, and there are no leading or trailing spaces. Your task is to reverse the order of the words in the string but not to reverse the characters within the words. Write a function that takes a string `s` and returns a new string with the words in reversed order. For example: If the input is `\\"the sky is blue\\"`, the output should be `\\"blue is sky the\\"`. If the input is `\\"hello world\\"`, the output should be `\\"world hello\\"`.","solution":"def reverse_words(s): Takes a string s consisting of words separated by single spaces and returns a new string with the words in reversed order. words = s.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"A company wants to organize a team-building event that involves a treasure hunt. The event has several challenges that participants must complete in a specific sequence. Each challenge can be completed in a known amount of time, but some challenges can only be started once others are finished. You need to determine the minimum time required to complete all challenges. You are given a list of challenges, each with a duration and a list of prerequisites (i.e., challenges that must be completed before this one starts). -----Input----- - The first line contains a single integer n representing the number of challenges. - The next n lines each describe a challenge. Each line contains: - An integer representing the duration of the challenge. - Another integer k representing the number of prerequisites. - Followed by k space-separated integers representing the indices (1-based) of the prerequisite challenges. -----Output----- Print the minimum time required to complete all the challenges. -----Constraints----- - 1 le n le 100 - 0 le k le n-1 - 1 le duration of each challenge le 100 - The given dependencies form a Directed Acyclic Graph (DAG). -----Example Input----- 4 3 0 2 1 1 5 1 1 4 2 2 3 -----Example Output----- 14 -----Explanation----- There are 4 challenges. - Challenge 1 takes 3 units of time and has no prerequisites. - Challenge 2 takes 2 units of time and depends on challenge 1. - Challenge 3 takes 5 units of time and also depends on challenge 1. - Challenge 4 takes 4 units of time and depends on both challenges 2 and 3. The optimal order is: - Complete challenge 1 (3 units) - Complete challenges 2 and 3 in parallel (5 units, since challenge 2 takes 2 units and challenge 3 takes 5 units) - Complete challenge 4 (4 units) Total time: 3 + 5 + 4 = 12 units.","solution":"from collections import deque, defaultdict def min_time_to_complete_challenges(n, challenges): indegree = [0] * n time_to_complete = [0] * n graph = defaultdict(list) # Parse the input and build the graph for i in range(n): duration = challenges[i][0] k = challenges[i][1] prerequisites = challenges[i][2:] time_to_complete[i] = duration for prereq in prerequisites: graph[prereq - 1].append(i) indegree[i] += 1 # Use Kahn\'s algorithm to find the topological order queue = deque() earliest_completion = [0] * n for i in range(n): if indegree[i] == 0: queue.append(i) earliest_completion[i] = time_to_complete[i] while queue: current = queue.popleft() for neighbor in graph[current]: indegree[neighbor] -= 1 earliest_completion[neighbor] = max(earliest_completion[neighbor], earliest_completion[current] + time_to_complete[neighbor]) if indegree[neighbor] == 0: queue.append(neighbor) return max(earliest_completion) # Example usage: # print(min_time_to_complete_challenges(4, [(3, 0), (2, 1, 1), (5, 1, 1), (4, 2, 2, 3)])) # Output: 12"},{"question":"Background ---------- In the kingdom of Eldoria, the wise king Cedric has devised a brilliant defensive mechanism for his kingdom. He has constructed a series of magical barriers in the form of an enchanted grid. Each cell of this grid contains a specific type of spell that can either boost the kingdom\'s defense or heal its warriors. However, only certain paths on the grid are accessible, moving either rightward (east) or downward (south). King Cedric has summoned you, a skilled wizard, to calculate the maximum possible defense power that can be amassed by traversing from the top-left corner to the bottom-right corner of the grid, adhering to the movement constraints. You can start collecting defense power from the starting point. Mission Details --------------- The grid is represented as a 2D array. Each cell in the grid contains a positive integer representing the defense power in that cell. ```python grid = [[1, 3, 1], [2, 5, 1], [4, 2, 1]] ``` You are required to write a function that will return the maximum possible defense power that can be collected by moving from the top-left corner to the bottom-right corner of the grid. Function Signature: ```python def max_defense_power(grid: List[List[int]]) -> int: pass ``` Example: ```python grid = [[1, 3, 1], [2, 5, 1], [4, 2, 1]] max_defense_power(grid) ``` Output: ``` 11 ``` Explanation: - The path `(0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2)` yields a maximum possible defense power of `1 + 3 + 5 + 2 + 1 = 12` Additional Technical Details ---------------------------- - Inputs are always valid. - The grid will always be a non-empty 2D array with positive integers. - Ensure your function does not mutate the input grid. - The path will always have at least one valid route to the destination.","solution":"from typing import List def max_defense_power(grid: List[List[int]]) -> int: Returns the maximum possible defense power that can be collected by traversing from the top-left corner to the bottom-right corner of the grid, moving only rightwards or downwards. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] # Initiate the dp table with the value of the first cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1] # Sample usage grid = [[1, 3, 1], [2, 5, 1], [4, 2, 1]] print(max_defense_power(grid)) # Expected output: 12"},{"question":"Given an undirected, weighted graph with N nodes and M edges, you are required to find the shortest distance from the starting node to a given destination node using Dijkstra\'s algorithm. The graph is represented using an adjacency list. -----Input----- - The first line contains two integers N and M denoting the number of nodes and the number of edges, respectively. - The next M lines each contain three space-separated integers u, v, and w denoting an edge between nodes u and v with weight w. - The following line contains two integers S and D denoting the starting node and the destination node, respectively. -----Output----- Print a single integer which is the shortest distance from node S to node D. If there is no path from S to D, print `-1`. -----Constraints----- - 1 le N le 10^5 - 1 le M le 2 times 10^5 - 1 le u, v le N - 1 le w le 10^9 - 1 le S, D le N -----Example Input----- 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 -----Example Output----- 6 -----Explanation----- Example: The shortest path from node 1 to node 5 is 1 rightarrow 2 rightarrow 3 rightarrow 5 with a total weight of 2 + 1 + 3 = 6. Hence, the output is 6.","solution":"import heapq from collections import defaultdict import sys def dijkstra_shortest_path(N, M, edges, S, D): # Prepare the graph graph = defaultdict(list) for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Dijkstra\'s algorithm pq = [(0, S)] # (distance, node) distances = {i: sys.maxsize for i in range(1, N + 1)} distances[S] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) if current_node == D: return current_distance for weight, neighbor in graph[current_node]: if neighbor in visited: continue distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[D] == sys.maxsize else distances[D] # Define the overall function to parse input and call the main algorithm def find_shortest_path(N, M, edge_list, S, D): edges = [tuple(map(int, edge.split())) for edge in edge_list] return dijkstra_shortest_path(N, M, edges, S, D)"},{"question":"Write a function `is_opposite` that takes an integer `n` and returns whether the binary representation of the number reads the same forwards and backwards (a palindrome). If it is a palindrome, return \\"It\'s Palindromic!\\", otherwise return \\"Not Palindromic.\\" For example: - For `n = 9` (binary representation is `1001`), the function should return \\"It\'s Palindromic!\\". - For `n = 12` (binary representation is `1100`), the function should return \\"Not Palindromic.\\" ```python def is_opposite(n): binary_representation = bin(n)[2:] if binary_representation == binary_representation[::-1]: return \\"It\'s Palindromic!\\" else: return \\"Not Palindromic.\\" ```","solution":"def is_opposite(n): Returns whether the binary representation of an integer n is palindromic. If it is palindromic, returns \\"It\'s Palindromic!\\", otherwise \\"Not Palindromic.\\" binary_representation = bin(n)[2:] if binary_representation == binary_representation[::-1]: return \\"It\'s Palindromic!\\" else: return \\"Not Palindromic.\\""},{"question":"In the kingdom of Computoria, King Alg decides to host a grand feast and invites all his citizens. For the feast, he wants to prepare a special dish that requires certain unique ingredients. Each ingredient, once used in a dish, cannot be reused in any other dish. Therefore, the king needs dishes to contain distinct ingredients to be prepared. Given an array of integers where each integer represents an ingredient and its frequency, the king wants to know the maximum number of dishes he can prepare. Each dish must have ingredients in a specific quantity, and no two dishes can have any common ingredient. Help King Alg determine the maximum number of distinct dishes he can prepare given the available ingredients. Note that the order of dishes does not matter. -----Input----- The first line contains the number of independent test cases T(1 leq T leq 10^5). The next 2T lines contain the descriptions of the test cases. The first line of description of each test case contains the number of ingredients N (1 leq N leq 10^5). The second line contains N integers a_1, a_2, ldots, a_N (1 leq a_i leq 10^9), where a_i is the frequency of the i-th ingredient. It is guaranteed that the sum of all N doesn\'t exceed 10^6. -----Output----- Print T numbers, each number on a separate line. In the i-th line, print the maximum number of distinct dishes King Alg can prepare for the i-th test case. -----Example----- Input 2 5 1 1 2 2 3 4 4 4 1 1 Output 5 4 -----Note----- In the first example, the maximum number of distinct dishes that can be prepared is 5. Each distinct ingredient can be used in a separate dish. In the second example, the maximum number of distinct dishes that can be prepared is 4. Even though the first and second ingredients have high frequencies, they can be used in separate dishes along with the other two distinct ingredients.","solution":"def max_dishes(test_cases): This function takes multiple test cases and returns the maximum number of distinct dishes that can be made for each test case. Parameters: - test_cases: list of tuples, where each tuple contains: - an integer N representing the number of ingredients - a list of integers representing the frequency of each ingredient Returns: - list of integers, each representing the maximum number of distinct dishes for a test case. results = [] for N, ingredients in test_cases: distinct_dishes = len(ingredients) results.append(distinct_dishes) return results # Example input test_cases = [ (5, [1, 1, 2, 2, 3]), (4, [4, 4, 1, 1]), ] # Processing the test cases output = max_dishes(test_cases) for result in output: print(result)"},{"question":"# Task Given a list of strings, sort them in order of increasing lengths. If two strings have the same length, they should appear in lexicographical order. # Example For `words = [\\"apple\\", \\"pie\\", \\"banana\\", \\"car\\", \\"apricot\\"]`, the output should be `[\\"car\\", \\"pie\\", \\"apple\\", \\"banana\\", \\"apricot\\"]`. # Input/Output - `[input]` array of strings `words` A list of words with length between 1 to 20 inclusive is given. Constraints: * `1 ≤ words.length ≤ 50` * Each word contains `1 ≤ words[i].length ≤ 100` - `[output]` an array of strings Sorted list of words by increasing length and lexicographical order if the lengths are the same.","solution":"def sort_by_length_and_lexicographical(words): Sorts a list of strings by their lengths in increasing order. If two strings have the same length, they are sorted lexicographically. :param words: List of strings to be sorted :return: List of sorted strings return sorted(words, key=lambda x: (len(x), x))"},{"question":"A group of farmers managing a shared agricultural land want to divide the harvest based on the number of hours each farmer worked and the overall productivity of the land. The harvest is represented as an integer array `harvest[]` where each element denotes the quantity of a type of crop harvested. Each farmer’s contribution is represented as an integer array `hours[]` where each element denotes the number of hours a farmer worked. The total harvest should be divided in direct proportion to the hours each farmer worked. The goal is to compute the share of each farmer for each crop. Write a function `calculate_shares(harvest, hours)` that takes two lists `harvest` and `hours` and returns a 2D list. The element at the i-th row and j-th column of the returned list should represent the amount of the j-th crop that the i-th farmer receives. # Example ``` harvest = [100, 200, 300] hours = [10, 20, 30] ``` The total hours worked is `10 + 20 + 30 = 60`. For the first crop: - Farmer 1\'s share = (10/60) * 100 = 16.67 approximately - Farmer 2\'s share = (20/60) * 100 = 33.33 approximately - Farmer 3\'s share = (30/60) * 100 = 50 approximately Repeating similar calculations for other crops, the final distribution for the example would be: ``` Farmer 1: [16.67, 33.33, 50] Farmer 2: [33.33, 66.67, 100] Farmer 3: [50, 100, 150] ``` The function should return: ``` [ [16.67, 33.33, 50], [33.33, 66.67, 100], [50, 100, 150] ] ``` # Constraints: - Each element in `harvest` will be a positive integer. - Each element in `hours` will be a positive integer. - Both `harvest` and `hours` will have a length of at least 1. - The length of `hours` will not exceed 10^3. - The length of `harvest` will not exceed 10^3. # Function Signature ``` def calculate_shares(harvest: List[int], hours: List[int]) -> List[List[float]]: ```","solution":"from typing import List def calculate_shares(harvest: List[int], hours: List[int]) -> List[List[float]]: total_hours = sum(hours) shares = [] for farmer_hours in hours: farmer_share = [(farmer_hours / total_hours) * crop for crop in harvest] shares.append(farmer_share) # Adjusting to keep decimal precision similar to the example given, rounded to 2 decimal places shares = [[round(crop, 2) for crop in farmer_share] for farmer_share in shares] return shares"},{"question":"In a digital marketing campaign, a company collects data on the interactions users have with their advertisements. Each interaction is represented by a tuple containing two integers: the user\'s ID and the duration of the interaction in seconds. Your task is to write a function `top_n_users(data, n)` that takes a list of these interaction tuples and an integer `n`, and returns a list of IDs of the top `n` users who had the longest total interaction time. If two users have the same total interaction time, they should be ranked by their user ID in ascending order. If there are fewer than `n` unique users, return all user IDs. For example, given the input `data = [(1, 30), (2, 20), (1, 40), (3, 10)]` and `n = 2`, the output should be `[1, 2]`. User `1` has a total interaction time of `70` seconds, and user `2` has a total interaction time of `20` seconds. User `3` has a total interaction time of `10` seconds and is therefore not included in the top `2` users. # Function Signature ```python def top_n_users(data: List[Tuple[int, int]], n: int) -> List[int]: pass ``` # Input - `data`: A list of tuples where each tuple contains two integers representing the user\'s ID and the duration of the interaction in seconds. - `n`: An integer representing the number of top users to return. # Output - A list of integers representing the user IDs of the top `n` users with the longest total interaction time, sorted by total interaction time and then by user ID. # Examples ```python top_n_users([(1, 30), (2, 20), (1, 40), (3, 10)], 2) -> [1, 2] top_n_users([(1, 100), (2, 200), (1, 50), (3, 125)], 1) -> [2] top_n_users([(1, 10), (2, 10), (3, 10), (4, 10)], 3) -> [1, 2, 3] top_n_users([(1, 15)], 5) -> [1] ```","solution":"from typing import List, Tuple def top_n_users(data: List[Tuple[int, int]], n: int) -> List[int]: from collections import defaultdict user_interactions = defaultdict(int) # Sum up total interaction time for each user for user_id, duration in data: user_interactions[user_id] += duration # Sort the users first by total interaction time (descending), then by user ID (ascending) sorted_users = sorted(user_interactions.items(), key=lambda x: (-x[1], x[0])) # Get the top n users\' IDs top_users = [user_id for user_id, _ in sorted_users[:n]] return top_users"},{"question":"Given an array of integers nums and an integer k, return the maximum sum of a non-empty subarray of length k. Example: Given nums = [1, 4, 2, 10, 23, 3, 1, 0, 20] and k = 4, The maximum sum of a subarray of length 4 is 39. Given nums = [2, 3, 5, 1, 2] and k = 2, The maximum sum of a subarray of length 2 is 8. Notes: 1. You may assume that the input array contains at least k elements. 2. The array may contain both positive and negative integers. Follow up: Can you solve this problem in O(n) time complexity?","solution":"def max_sum_subarray_length_k(nums, k): Returns the maximum sum of a non-empty subarray of length k. Args: nums (List[int]): List of integers. k (int): Length of the subarray. Returns: int: Maximum sum of a subarray of length k. # Initial sum of the first subarray of length k max_sum = current_sum = sum(nums[:k]) # Sliding window to calculate the sum of remaining subarrays for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function that evaluates a mathematical expression represented as a string and returns the result. The string can contain non-negative integers and the operators `+`, `-`, `*`, and `/`. Assume integer division should truncate toward zero. **Note**: Avoid using Python\'s `eval` function. **Examples:** ```python \\"3+5 / 2\\" => 5 \\" 3/2 \\" => 1 \\" 3+5 / 2 * 4 - 1\\" => 10 \\"14-3/2\\" => 13 **Constraints:** * The input string only contains non-negative integers, `+`, `-`, `*`, `/`, and empty spaces ` `. * The entire string is valid. * The input string will not be empty. ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression represented as a string containing non-negative integers and the operators +, -, *, /. Note: Integer division truncates toward zero. # Removing spaces from the expression expression = expression.replace(\' \', \'\') # Preparing operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} # Converting infix expression to postfix expression using Shunting Yard algorithm output = [] operators = [] number = \'\' for char in expression: if char.isdigit(): number += char else: if number: output.append(int(number)) number = \'\' while operators and precedence[operators[-1]] >= precedence[char]: output.append(operators.pop()) operators.append(char) if number: output.append(int(number)) while operators: output.append(operators.pop()) # Evaluating the postfix expression stack = [] for token in output: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) return stack[0]"},{"question":"Given a list of integers, determine whether the sum of the integers at prime indices is even or odd. For example, consider the list `[5, 3, 8, 7, 1, 2]`: - At index 2 (a prime number), the value is 8. - At index 3 (a prime number), the value is 7. - At index 5 (a prime number), the value is 2. The sum of these values is `8 + 7 + 2 = 17`, which is odd. Hence, the function should return \'odd\'. Remember that in the context of this problem, we consider 2, 3, 5, 7, 11, and so on as prime numbers, and indices start from 0. You need to implement a function that satisfies this requirement. The function should take a list of integers as input and return the string \'even\' or \'odd\' based on the described criteria.","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_at_prime_indices(lst): Given a list of integers, determine whether the sum of the integers at prime indices is even or odd. Returns \'even\' if the sum is even, and \'odd\' if the sum is odd. prime_sum = sum(lst[i] for i in range(len(lst)) if is_prime(i)) return \'even\' if prime_sum % 2 == 0 else \'odd\'"},{"question":"Given an array of integers arr, you are allowed to perform one move consisting of choosing a pair of indices i and j (0 ≤ i < j < arr.length) and incrementing arr[i] by arr[j]. Write a function that returns the maximum possible value of any element in the array after at most one move. Example 1: Input: arr = [1, 2, 3, 4] Output: 7 Explanation: In one move, you can pick i = 0 and j = 3, resulting in the array [5, 2, 3, 4]. The maximum element in the array is now 5. Alternatively, you can choose i = 2 and j = 3 resulting in array [1, 2, 7, 4]. The maximum element is 7. Example 2: Input: arr = [5, 1, 1, 3] Output: 8 Explanation: In one move, you can pick i = 0 and j = 3, resulting in the array [8, 1, 1, 3]. The maximum element in the array is now 8. Note: * 2 <= arr.length <= 100 * -10^4 <= arr[i] <= 10^4","solution":"def max_possible_value_after_one_move(arr): Returns the maximum possible value of any element in the array after at most one move. n = len(arr) max_value = float(\'-inf\') # Iterate through all possible pairs (i, j) for i in range(n): for j in range(i + 1, n): max_value = max(max_value, arr[i] + arr[j]) return max_value"},{"question":"Given an array of integers, find the length of the longest subsequence such that elements in the subsequence are consecutive integers, though not necessarily contiguous in the array. The solution should consider both positive and negative integers, and have an efficient time complexity. Implement a function `longestConsecutiveSubsequence(arr: List[int]) -> int`: - **Input**: A list of integers `arr`. - **Output**: An integer representing the length of the longest subsequence of consecutive integers. # Examples Example 1 ``` Input: arr = [1, 9, 3, 10, 4, 20, 2] Output: 4 Explanation: The longest subsequence of consecutive integers is [1, 2, 3, 4]. ``` Example 2 ``` Input: arr = [36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42] Output: 5 Explanation: The longest subsequence of consecutive integers is [32, 33, 34, 35, 36]. ``` Example 3 ``` Input: arr = [-1, -2, 0, 2, 3, 1, -3] Output: 7 Explanation: The longest subsequence of consecutive integers is [-3, -2, -1, 0, 1, 2, 3]. ``` ```python from typing import List def longestConsecutiveSubsequence(arr: List[int]) -> int: # Your code here pass ```","solution":"from typing import List def longestConsecutiveSubsequence(arr: List[int]) -> int: Returns the length of the longest subsequence of consecutive integers in the given list. # Create a set of the array elements to allow O(1) look-up times num_set = set(arr) longest_streak = 0 # Check each number if it is a potential start of a sequence for num in arr: if num - 1 not in num_set: current_num = num current_streak = 1 # Count the length of the sequence while current_num + 1 in num_set: current_num += 1 current_streak += 1 # Update the longest streak if current one is longer longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"BThero is preparing a potion and he has access to n distinct ingredients, each with a distinct potency level. He needs to create the most potent potion possible by mixing exactly k different ingredients. However, not all combinations will work. If the potency difference between any two chosen ingredients exceeds a given level m, then the potion will fail. Your task is to help BThero determine the maximum potency he can achieve. The potency of the potion is the sum of the potencies of the chosen ingredients. -----Input----- The first line contains one integer T (1 le T le 100) — the number of test cases. Each test case consists of three lines: - The first line contains three integers n, k, and m (1 le k le n le 100, 1 le m le 10^6) — the number of ingredients, the number of ingredients to choose, and the maximum allowable potency difference between any two ingredients. - The second line contains n integers p_1, p_2, ..., p_n (1 le p_i le 10^6) — the potency levels of the ingredients. It is guaranteed that the sum of n over all test cases does not exceed 1000. -----Output----- For each test case, print one integer — the maximum potency of the potion BThero can create. -----Example----- Input 2 5 3 10 1 2 3 16 25 4 2 5 4 7 8 2 Output 6 15 -----Note----- In the first test case, choosing ingredients with potencies 1, 2, and 3 gives the highest sum 6 within the potency difference 10. In the second test case, choosing ingredients with potencies 7 and 8 gives the highest sum 15 within the potency difference 5.","solution":"def max_potency_of_potion(T, test_cases): results = [] for i in range(T): n, k, m = test_cases[i][0] potencies = sorted(test_cases[i][1]) max_potency = 0 found = False for j in range(n - k + 1): for h in range(j + k, n + 1): selected = potencies[j:h] if len(selected) == k and max(selected) - min(selected) <= m: max_potency = max(max_potency, sum(selected)) found = True if found: break results.append(max_potency) return results"},{"question":"After completing all the tasks for the day, Alice realized she needed to quickly organize her book collection before heading to bed. Alice has a collection of n books, each with a unique ID numbered from 1 to n. However, some of these books are missing. Alice needs to separate the missing books and the present books using the recorded IDs of present books. Your task is to help Alice by categorizing the present and missing books based on the IDs provided and then print the IDs of the missing books in ascending order and present books in descending order. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 50) indicating the number of test cases. Each test case consists of two lines. The first line contains two integers n and m (0 ≤ m ≤ n ≤ 1000), where n is the total number of books and m is the number of present books. The second line contains a list of m distinct integers between 1 and n, representing the IDs of the present books. Consecutive integers are separated by a single space. -----Output----- For each test case, output two lines. The first line contains the IDs of the missing books in ascending order, and the second line contains the IDs of the present books in descending order. Each ID should be separated by a single space. If no books are missing or present, print a blank line for that list. -----Example----- Input: 3 5 3 2 3 5 8 4 1 2 6 7 4 0 4 Output: 1 4 5 3 2 3 4 5 8 7 6 2 1 1 2 3","solution":"def categorize_books(T, test_cases): results = [] for case in test_cases: n, m, present_books = case present_books_set = set(present_books) all_books = set(range(1, n + 1)) missing_books = sorted(all_books - present_books_set) present_books_sorted = sorted(present_books, reverse=True) results.append((missing_books, present_books_sorted)) return results"},{"question":"Create the function `find_min_shifts(s, t)` that calculates the minimum number of shifts required to make string `s` equal to string `t` by only shifting characters within `s`. A \\"shift\\" consists of moving the first character of the string to the end. Examples: ```python s = \\"abcdef\\" t = \\"cdefab\\" find_min_shifts(s, t) # Output: 2 s = \\"hello\\" t = \\"ohell\\" find_min_shifts(s, t) # Output: 4 s = \\"shift\\" t = \\"shift\\" find_min_shifts(s, t) # Output: 0 ``` The function should return -1 if it is not possible to transform `s` into `t` through any number of shifts. Constraints: - The length of strings `s` and `t` will be between `1` and `10^5` inclusive. - All characters in the strings `s` and `t` are lowercase English letters. # Function Signature ```python def find_min_shifts(s: str, t: str) -> int: ``` # Explanation: 1. **Initial Check**: First, check if `s` and `t` contain the same characters in the same frequency. If not, return -1 immediately since shifting cannot match different character sets. 2. **Concatenation Trick**: Concatenate `s` with itself, so `s\' = s + s`. This allows `t` to be found as a substring within the repeated sequence. 3. **Find Substring**: Use substring search to find `t` within `s\'`. If found, the start index of `t` within `s\'` corresponds to the number of shifts required. 4. **Edge Cases**: Consider strings of different lengths, and the case where no shifts can match `s` to `t`. # Example Clarifications: - For `s = \\"abcdef\\"` and `t = \\"cdefab\\"`, shifting \\"abcdef\\" 2 times yields \\"cdefab\\". - For `s = \\"hello\\"` and `t = \\"ohell\\"`, shifting \\"hello\\" 4 times yields \\"ohell\\". - For `s = \\"shift\\"` and `t = \\"shift\\"`, no shifts are needed.","solution":"def find_min_shifts(s: str, t: str) -> int: Finds the minimum number of shifts required to make string s equal to string t by shifting the characters within s. Returns -1 if it\'s not possible. # Initial check if lengths are not equal or they contain different character sets. if len(s) != len(t) or sorted(s) != sorted(t): return -1 # Concatenate s with itself to leverage substring search double_s = s + s # Search for t within the concatenated string index = double_s.find(t) # If t is found, the starting index of t in double_s is the number of shifts required return index if index != -1 else -1"},{"question":"Develop an algorithm to solve the following problem: Implement a function named `findFirstNPrimes` that takes a single integer argument `n`. The function should return a list of the first `n` prime numbers in ascending order. Prime Numbers A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the first five prime numbers are 2, 3, 5, 7, and 11. # Input - A single integer, `n` (0 ≤ n ≤ 100). # Output - A list containing the first `n` prime numbers. # Examples 1. `findFirstNPrimes(0)` returns `[]`. (No prime numbers requested) 2. `findFirstNPrimes(1)` returns `[2]`. (First prime number) 3. `findFirstNPrimes(5)` returns `[2, 3, 5, 7, 11]`. (First five prime numbers) # Note Your solution should be efficient enough to handle the upper limit of the input constraint. Function Signature ```python def findFirstNPrimes(n: int) -> list: pass ``` # Discussion The proposed question tests your understanding of prime numbers and your ability to implement an efficient algorithm to find them. This task requires handling basic loops, conditionals, and potentially a more optimized prime-checking method to ensure efficiency within the given constraints.","solution":"def findFirstNPrimes(n: int) -> list: This function returns the first n prime numbers. :param n: int - The number of prime numbers to return :return: list of the first n prime numbers if n == 0: return [] primes = [2] num = 3 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > num: break if num % prime == 0: is_prime = False break if is_prime: primes.append(num) num += 2 return primes[:n]"},{"question":"You are given an integer array nums and an integer k. Find the maximum number of non-overlapping subarrays with a sum equal to k. A subarray is a contiguous part of an array. Subarrays are considered non-overlapping if they do not overlap in the array. Return the maximum number of non-overlapping subarrays with sum equal to k. Example: Input: nums = [1,1,1,1,1], k = 2 Output: 2 Explanation: The subarrays that sum to 2 are [1,1] -> index 0 to 1 and [1,1] -> index 2 to 3. Note: - 1 <= nums.length <= 10^4 - -10^4 <= nums[i] <= 10^4 - 1 <= k <= 10^4","solution":"def max_non_overlapping_subarrays(nums, k): Given an array of integers and an integer k, find the maximum number of non-overlapping subarrays with sum equal to k. count, cum_sum, last_end = 0, 0, -1 prefix_sums = {0: -1} for i in range(len(nums)): cum_sum += nums[i] if (cum_sum - k) in prefix_sums and prefix_sums[cum_sum - k] >= last_end: count += 1 last_end = i prefix_sums[cum_sum] = i return count"},{"question":"Write a function that takes a list of integers and returns the product of all integers except for the highest and lowest value in the list. If the list has less than 3 integers, the function should return 0. For example: ```python product_except_extremes([1, 2, 3, 4, 5]) == 24 # exclude 1 and 5, product of [2 * 3 * 4] product_except_extremes([7, 10, -1, 3]) == 21 # exclude -1 and 10, product of [7 * 3] product_except_extremes([5, 5, 5, 5]) == 25 # exclude 5 and 5, product of [5 * 5] product_except_extremes([2]) == 0 # less than 3 integers product_except_extremes([1, -1, 0]) == 0 # exclude -1 and 1, nothing left to multiply ``` You may assume that the input list contains only integers.","solution":"def product_except_extremes(lst): Returns the product of all integers in lst except for the highest and lowest value in the list. If the list has less than 3 integers, returns 0. if len(lst) < 3: return 0 sorted_lst = sorted(lst) product = 1 for num in sorted_lst[1:-1]: product *= num return product"},{"question":"=====Problem Statement===== In a grid-based pathfinding problem, you are required to find the length of the shortest path from a start point to an end point, avoiding obstacles. The grid will have the following characteristics: - The grid is a 2D array of size M x N. - Each cell in the grid can either be a free cell (represented by 0) or an obstacle (represented by 1). - You can move to a cell that is horizontally or vertically adjacent but not diagonally. - You cannot move into a cell that contains an obstacle. You need to find the shortest path from a given start coordinate to a given end coordinate. If there is no possible path, return -1. Examples Example Input 1: Grid: 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 Start: (0, 0) End: (4, 3) Output: 7 Example Input 2: Grid: 0 0 1 1 0 1 0 0 0 Start: (0, 0) End: (2, 2) Output: 4 =====Input Format===== - The first line contains two integers M and N, the number of rows and columns in the grid. - The next M lines each contain N integers (0 or 1), representing the grid. - The next line contains two integers, representing the start coordinates (x1, y1). - The next line contains two integers, representing the end coordinates (x2, y2). =====Constraints===== 1 <= M, N <= 50 =====Output Format===== Print the length of the shortest path from the start point to the end point. If no such path exists, print -1.","solution":"from collections import deque def shortest_path(grid, start, end): rows, cols = len(grid), len(grid[0]) queue = deque([(start[0], start[1], 0)]) # (row, col, distance) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = set() while queue: r, c, dist = queue.popleft() if (r, c) == end: return dist if (r, c) in visited: continue visited.add((r, c)) for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols and grid[rr][cc] == 0 and (rr, cc) not in visited: queue.append((rr, cc, dist + 1)) return -1"},{"question":"HTML Attribute Parser Background Story You are developing a web scraping tool that extracts information from HTML documents. To make this tool more powerful, you need to parse and modify HTML attributes dynamically. Given the importance of attributes in HTML elements, you decide to write a function that modifies certain attributes based on predefined rules. Task Write a function `parseAttributes` that takes an HTML string as an input and performs the following transformations: 1. Replace all instances of `class` attribute to `className`. 2. Replace all instances of `for` attribute to `htmlFor`. 3. Add an attribute `data-parsed=\\"true\\"` to all `<div>` elements. 4. Add an attribute `target=\\"_blank\\"` to all `<a>` elements. Your replacement and addition of attributes should be case-insensitive, meaning that `CLASS`, `Class`, and `class` should all be transformed to `className`, for example. # Examples: Input: ```html \'<div class=\\"container\\">Content</div><a href=\\"link.html\\">Link</a><label for=\\"input\\">Label</label>\' ``` Output: ```html \'<div className=\\"container\\" data-parsed=\\"true\\">Content</div><a href=\\"link.html\\" target=\\"_blank\\">Link</a><label htmlFor=\\"input\\">Label</label>\' ``` Input: ```html \'<DIV class=\\"main\\"><A href=\\"https://example.com\\">Example</A></DIV>\' ``` Output: ```html \'<DIV className=\\"main\\" data-parsed=\\"true\\"><A href=\\"https://example.com\\" target=\\"_blank\\">Example</A></DIV>\' ``` # Notes: - Ensure your function is handling case insensitivity for attribute replacements. - You may use regular expressions or any other string manipulation methods you find appropriate. - Feel free to assume the input string is a valid HTML snippet without malformed elements or attributes.","solution":"import re def parseAttributes(html): Parses and modifies HTML attributes based on predefined rules. Replaces `class` with `className`, `for` with `htmlFor`, adds `data-parsed=\\"true\\"` to all <div> elements, and adds `target=\\"_blank\\"` to all <a> elements. # Using regular expressions for case-insensitive replacement # Replace class with className in a case-insensitive way html = re.sub(r\'bclassb\', \'className\', html, flags=re.IGNORECASE) # Replace for with htmlFor in a case-insensitive way html = re.sub(r\'bforb\', \'htmlFor\', html, flags=re.IGNORECASE) # Add data-parsed=\\"true\\" to all <div> elements html = re.sub(r\'(<divb[^>]*)(>)\', r\'1 data-parsed=\\"true\\"2\', html, flags=re.IGNORECASE) # Add target=\\"_blank\\" to all <a> elements html = re.sub(r\'(<ab[^>]*)(>)\', r\'1 target=\\"_blank\\"2\', html, flags=re.IGNORECASE) return html"},{"question":"Sum Pair Finder In this problem, you will write a Python function that takes a list of integers and a target sum as arguments and returns a list of unique pairs from the input list that add up to the target sum. A pair (a, b) is considered the same as (b, a) and should be only counted once. # Function Signature ```python def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: ``` # Input - `nums`: A list of integers. Example: `[2, 4, 3, 5, 7, 8, 9]` - `target`: An integer representing the target sum. Example: `7` # Output - A list of tuples, where each tuple contains two integers from the input list that add up to `target`. - Each tuple should hold the integers in ascending order. - The list of tuples should be sorted in ascending order based on the first element of the tuple. # Examples ```python find_pairs([2, 4, 3, 5, 7, 8, 9], 7) # Output: [(2, 5), (3, 4)] ``` ```python find_pairs([1, 2, 3, 4, 5, 6], 10) # Output: [(4, 6)] ``` ```python find_pairs([1, 1, 1, 1, 1], 2) # Output: [(1, 1)] ``` > Note: - If there are no pairs that sum up to the target, return an empty list. - The pairs should not contain duplicate pairs (regardless of order). - Aim for an efficient solution that avoids unnecessary computations.","solution":"from typing import List, Tuple def find_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: Finds and returns a list of unique pairs from input list `nums` that add up to `target`. seen = set() # To keep track of numbers we\'ve seen so far pairs = set() # To collect unique pairs for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"Anis is interested in strings and he likes to derive interesting properties from them. Recently, he learned about palindromes and he wants your help to determine whether a given string can be rearranged to form a palindrome. -----Input:----- - First-line will contain N, the number of test cases. - Each of the next N lines will contain a single string S consisting of lowercase alphabets. -----Output:----- For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, output \\"NO\\". -----Constraints----- - 1 leq N leq 100 - 1 leq |S| leq 100 -----Sample Input:----- 3 aabb abc racecar -----Sample Output:----- YES NO YES -----EXPLANATION:----- - For the first string \\"aabb\\", we can rearrange it to form \\"abba\\" which is a palindrome. - The second string \\"abc\\" cannot be rearranged to form a palindrome as no rearrangement will satisfy the palindrome property. - The third string \\"racecar\\" is already a palindrome. Thus, it can also be rearranged to form another palindrome.","solution":"def can_form_palindrome(s): Determine if the string `s` can be rearranged to form a palindrome. Parameters: s (str): The input string Returns: str: \'YES\' if the string can be rearranged to form a palindrome, \'NO\' otherwise from collections import Counter # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with odd frequency return \'YES\' if odd_count <= 1 else \'NO\' def process_test_cases(test_cases): Processes multiple test cases to check if they can form palindromes. Parameters: test_cases (list of str): A list of test strings Returns: list of str: List of results for each test case, \\"YES\\" or \\"NO\\" return [can_form_palindrome(s) for s in test_cases]"},{"question":"Given an unsorted array of integers, find the length of the longest sequence of consecutive elements. # Example: Given an array `[100, 4, 200, 1, 3, 2]`, the length of the longest consecutive elements sequence would be `4` because the consecutive elements `[1, 2, 3, 4]` form a sequence. # Input: An unsorted list of integers. # Output: The length of the longest consecutive elements sequence as an integer.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. Args: nums (List[int]): A list of integers. Returns: int: Length of the longest consecutive sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # only start counting streak if `num` is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a sequence of n integers where each integer is between 1 and k (inclusive). Determine the length of the shortest subsequence that contains exactly one occurrence of numbers from 1 to k. **Input:** - An integer array `arr` of length `n` (1 ≤ n ≤ 100000) where each integer is from 1 to k (1 ≤ k ≤ 1000). **Output:** - An integer representing the length of the shortest subsequence that contains exactly one occurrence of every number from 1 to k. Example: **Input:** ``` arr = [2, 1, 2, 3, 1] k = 3 ``` **Output:** ``` 3 ``` Explanation: The subsequence `[2, 3, 1]` contains exactly one occurrence of each number from 1 to 3 and has the minimum possible length.","solution":"def shortest_subsequence(arr, k): Returns the length of the shortest subsequence that contains exactly one occurrence of every number from 1 to k. n = len(arr) left = 0 count = {} unique_count = 0 min_length = n + 1 for right in range(n): if arr[right] <= k: # Only consider valid elements if arr[right] not in count: count[arr[right]] = 0 if count[arr[right]] == 0: unique_count += 1 count[arr[right]] += 1 while unique_count == k: min_length = min(min_length, right - left + 1) if arr[left] <= k: count[arr[left]] -= 1 if count[arr[left]] == 0: unique_count -= 1 left += 1 return min_length if min_length <= n else 0 # Return 0 if there\'s no valid subsequence"},{"question":"# Task You are working on a sorting algorithm for a data analytics company. To test the algorithm, you need to verify its correctness on several arrays. Each test case consists of an array with unique integers. The task is to find if the given array can be sorted in ascending order using a series of operations where you are allowed to reverse any subarray (contiguous fragment) of the original array. # Input/Output `[input]` integer array `arr` An integer array `arr` of unique integers. `1 ≤ arr.length ≤ 1000.` `-1000 ≤ arr[i] ≤ 1000.` `[output]` a boolean Return `true` if the array can be sorted using the described operations, and `false` otherwise. # Example For `arr = [1, 3, 2, 4, 5]`, the output should be `true`. You can reverse the subarray `[3, 2]` to get `[1, 2, 3, 4, 5]`. For `arr = [1, 2, 3, 5, 4]`, the output should be `true`. You can reverse the subarray `[5, 4]` to get `[1, 2, 3, 4, 5]`. For `arr = [3, 1, 2, 4, 5]`, the output should be `false`. No matter how you reverse subarrays, you cannot get a sorted array.","solution":"def can_sort_by_reversing_subarray(arr): Determines if the array can be sorted in ascending order by reversing any subarray. sorted_arr = sorted(arr) n = len(arr) # Find the first and last positions where arr differs from sorted_arr start, end = 0, n - 1 while start < n and arr[start] == sorted_arr[start]: start += 1 while end >= 0 and arr[end] == sorted_arr[end]: end -= 1 # If the entire array is already sorted if start >= end: return True # Reverse the subarray from start to end and check if it matches the sorted array reversed_subarray = arr[:start] + arr[start:end+1][::-1] + arr[end+1:] return reversed_subarray == sorted_arr"},{"question":"Given a rectangular matrix of size (n) rows and (m) columns, where each cell contains an integer value, you are required to find a subrectangle with maximum possible sum. A subrectangle is defined by choosing some subarray of rows and some subarray of columns and taking all the cells from the intersection of these row and column subarrays. -----Input----- The first line contains two integers (n) and (m) ((1 le n, m le 300)) representing the number of rows and columns of the matrix. Each of the next (n) lines contains (m) integers, denoting the matrix cells\' values. All the values in the matrix are integers in the range from (-10^3) to (10^3). -----Output----- Print a single integer, the maximum possible sum of the elements of any subrectangle of the given matrix. -----Example----- Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output 29 -----Note----- In the given example, the maximum subrectangle sum is obtained by selecting the subrectangle from the 3rd and 4th cells of the 2nd row to the 3rd and 4th cells of the 3rd row, which sums up to 29.","solution":"def max_sum_subrectangle(matrix): def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum # Example usage: n = 4 m = 5 matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_sum_subrectangle(matrix)) # Output: 29"},{"question":"There are n students, and each student has a specific skill level. A team can be formed if it\'s skill level is balanced. A team\'s skill level is balanced if the difference between the maximum skill level and minimum skill level within the team is less than or equal to k. Your task is to determine the minimum number of balanced teams needed to include all students. -----Input----- The first line contains two integers n and k (1 le n le 5000, 0 le k le 10^9). The next line contains n integers a_i (1 le a_i le 10^9) representing the skill levels of the students. -----Output----- Print one integer, the minimum number of balanced teams needed. -----Example----- Input 5 3 1 5 3 8 9 Output 3 Input 6 4 7 3 9 1 6 2 Output 2 -----Note----- In the first test case, the students can be grouped into teams as follows: {1, 3, 5}, {8}, and {9}. In the second test case, the students can be grouped into teams as follows: {1, 2, 3, 6, 7}, and {9}.","solution":"def min_balanced_teams(n, k, skills): Determines the minimum number of balanced teams needed to include all students. :param n: Number of students :param k: Maximum allowed skill level difference for a balanced team :param skills: List of skill levels :return: Minimum number of balanced teams skills.sort() teams = 0 i = 0 while i < n: teams += 1 j = i while j < n and skills[j] - skills[i] <= k: j += 1 i = j return teams"},{"question":"You have been given an array of positive integers and you need to find the length of the longest contiguous subarray where the difference between the maximum and minimum value in the subarray is at most 1. Your task is to write a function that takes in an array of integers and returns the length of the longest contiguous subarray that meets the condition. For example: ```python find_longest_subarray([1, 2, 2, 1]) = 4 find_longest_subarray([1, 2, 4, 3, 3]) = 3 find_longest_subarray([1, 1, 1, 1, 1]) = 5 ``` # Input: - An array of positive integers. # Output: - An integer representing the length of the longest contiguous subarray meeting the criteria.","solution":"def find_longest_subarray(arr): Returns the length of the longest contiguous subarray where the difference between the maximum and minimum value in the subarray is at most 1. if not arr: return 0 max_length = 0 n = len(arr) for i in range(n): min_val = max_val = arr[i] for j in range(i, n): min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if max_val - min_val <= 1: max_length = max(max_length, j - i + 1) else: break return max_length"},{"question":"Write a program that finds the smallest positive integer ( n ) such that ( n ) factorial (i.e., ( n! )) is divisible by a given integer ( k ). Formally, you are given a single integer ( k ) (1 le k le 10^6) in each test case. You need to find the smallest integer ( n ) such that: [ n! mod k = 0 ] Note that ( n! ) is the factorial of ( n ), defined as: [ n! = n times (n-1) times (n-2) times ldots times 1 ] AND ( n! mod k ) means the remainder when ( n! ) is divided by ( k ). -----Input----- The first line contains an integer ( t ) (1 le t le 10,000) — the number of test cases in the input. Then ( t ) test cases follow. Each test case is a line containing a single integer ( k ). -----Output----- Print ( t ) answers to the test cases. Each answer must be a single integer ( n ). -----Example----- Input 3 6 10 24 Output 3 5 4 -----Explanation----- In the first test case, the smallest ( n ) such that ( n! ) is divisible by 6 is 3, because ( 3! = 6 ). In the second test case, the smallest ( n ) such that ( n! ) is divisible by 10 is 5, because ( 5! = 120 ) and 120 is divisible by 10. In the third test case, the smallest ( n ) such that ( n! ) is divisible by 24 is 4, because ( 4! = 24 ).","solution":"def smallest_n_factorial_divisible_by_k(k): Find the smallest positive integer n such that n! is divisible by k. if k == 1: return 1 # Function to find the prime factors of k and their counts def prime_factors_count(n): i = 2 factors = {} while i * i <= n: while (n % i) == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 n //= i i += 1 if n > 1: factors[n] = 1 return factors factors = prime_factors_count(k) # Finding the minimum n that satisfies the number of each prime factor in n! n = 0 while True: n += 1 temp = n for p in factors: power_count = 0 multiplier = p while temp >= multiplier: power_count += temp // multiplier multiplier *= p if power_count < factors[p]: break else: return n def process_test_cases(test_cases): return [smallest_n_factorial_divisible_by_k(k) for k in test_cases]"},{"question":"You are given a string s of length n consisting of uppercase and lowercase English letters. Construct a new string t by rearranging the characters of s such that no two adjacent characters in t are the same. If it is not possible to construct such string t, output \\"Impossible\\". -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n consisting of uppercase and lowercase English letters. -----Output----- If it is possible to construct such a string t, output the constructed string. If there are multiple valid answers, you can output any of them. If it is not possible, output \\"Impossible\\". -----Examples----- Input 6 aabbcc Output abcabc Input 3 aaa Output Impossible -----Note----- In the first example, one possible answer is \\"abcabc\\", and another valid answer could be \\"acbacb\\". In the second example, since all characters are the same, it is impossible to create a string where no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(s): char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) previous_char = None previous_freq = 0 result = [] while max_heap: current_freq, current_char = heapq.heappop(max_heap) result.append(current_char) if previous_char and previous_freq < 0: heapq.heappush(max_heap, (previous_freq, previous_char)) previous_char = current_char previous_freq = current_freq + 1 if len(result) == len(s): return \'\'.join(result) else: return \\"Impossible\\" def solve(s): return rearrange_string(s)"},{"question":"Your task is to analyze a list of students and their scores, and determine the top student in each subject, as well as the average score for each subject. Write a function `analyze_scores(students)` that takes a list of dictionaries as its parameter. Each dictionary represents a student with their name and their scores in Math, Science, and English. The function should return a dictionary with the names of the top students in each subject and the average score for each subject. The input list will be formatted as follows: ```json [ {\\"name\\": \\"Alice\\", \\"Math\\": 85, \\"Science\\": 92, \\"English\\": 88}, {\\"name\\": \\"Bob\\", \\"Math\\": 90, \\"Science\\": 85, \\"English\\": 85}, {\\"name\\": \\"Charlie\\", \\"Math\\": 82, \\"Science\\": 87, \\"English\\": 91} ] ``` The function should return a dictionary in the following format: ```json { \\"top_students\\": { \\"Math\\": \\"Bob\\", \\"Science\\": \\"Alice\\", \\"English\\": \\"Charlie\\" }, \\"average_scores\\": { \\"Math\\": 85.67, \\"Science\\": 88.00, \\"English\\": 88.00 } } ``` If there are multiple students with the highest score in a subject, return any one of them as the top student. The average scores should be rounded to two decimal places. Example input: ```python students = [ {\\"name\\": \\"Alice\\", \\"Math\\": 85, \\"Science\\": 92, \\"English\\": 88}, {\\"name\\": \\"Bob\\", \\"Math\\": 90, \\"Science\\": 85, \\"English\\": 85}, {\\"name\\": \\"Charlie\\", \\"Math\\": 82, \\"Science\\": 87, \\"English\\": 91} ] ``` Example output: ```python { \\"top_students\\": { \\"Math\\": \\"Bob\\", \\"Science\\": \\"Alice\\", \\"English\\": \\"Charlie\\" }, \\"average_scores\\": { \\"Math\\": 85.67, \\"Science\\": 88.00, \\"English\\": 88.00 } } ``` ```python def analyze_scores(students): top_students = {} total_scores = {\\"Math\\": 0, \\"Science\\": 0, \\"English\\": 0} subject_counts = {\\"Math\\": 0, \\"Science\\": 0, \\"English\\": 0} for student in students: for subject in [\\"Math\\", \\"Science\\", \\"English\\"]: total_scores[subject] += student[subject] subject_counts[subject] += 1 if subject not in top_students or student[subject] > students[top_students[subject]][subject]: top_students[subject] = students.index(student) average_scores = {subject: round(total_scores[subject] / subject_counts[subject], 2) for subject in total_scores} top_students_names = {subject: students[index][\\"name\\"] for subject, index in top_students.items()} return { \\"top_students\\": top_students_names, \\"average_scores\\": average_scores } ```","solution":"def analyze_scores(students): top_students = {} total_scores = {\\"Math\\": 0, \\"Science\\": 0, \\"English\\": 0} subject_counts = {\\"Math\\": 0, \\"Science\\": 0, \\"English\\": 0} for student in students: for subject in [\\"Math\\", \\"Science\\", \\"English\\"]: total_scores[subject] += student[subject] subject_counts[subject] += 1 if subject not in top_students or student[subject] > students[top_students[subject]][subject]: top_students[subject] = students.index(student) average_scores = {subject: round(total_scores[subject] / subject_counts[subject], 2) for subject in total_scores} top_students_names = {subject: students[index][\\"name\\"] for subject, index in top_students.items()} return { \\"top_students\\": top_students_names, \\"average_scores\\": average_scores }"},{"question":"You are given an array of NN integers. Your task is to determine if there exists a subset of this array whose sum is a prime number and if such a subset exists, find the smallest length of such a subset. -----Input----- - The first line of the input contains a single integer TT denoting the number of test cases. The description of TT test cases follows. - The first line of each test case contains an integer NN. - The second line of each test case contains NN space-separated integers. -----Output----- For each test case, print a single line containing one integer — the size of the smallest subset whose sum is a prime number. If no such subset exists, print -1-1. -----Constraints----- - 1≤T≤101 le T le 10 - 1≤N≤201 le N le 20 - -1000≤Ai≤1000-1000 le A_i le 1000 for each valid ii -----Example Input----- 1 5 1 2 3 4 5 -----Example Output----- 1 -----Explanation----- Example case 1: There are several subsets whose sum is a prime number: - Subset {2} has a sum of 2, which is a prime number. - Subset {3} has a sum of 3, which is a prime number. - Subset {5} has a sum of 5, which is a prime number. The minimum length of such subsets is 1 for the subsets {2}, {3}, and {5}. Thus the output is 1.","solution":"from itertools import combinations import math def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(math.sqrt(num)) + 1, 2): if num % i == 0: return False return True def smallest_prime_subset_length(test_cases): results = [] for case in test_cases: n, array = case min_length = float(\'inf\') found_prime_sum = False # Check all subsets with non-zero size for r in range(1, n + 1): for subset in combinations(array, r): if is_prime(sum(subset)): found_prime_sum = True min_length = min(min_length, len(subset)) if found_prime_sum: results.append(min_length) else: results.append(-1) return results def parse_input(input_data): data = input_data.split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) array = list(map(int, data[index + 1: index + 1 + n])) test_cases.append((n, array)) index += n + 1 return test_cases def prime_sum_subsets(input_data): test_cases = parse_input(input_data) return smallest_prime_subset_length(test_cases)"},{"question":"-----General Statement:----- Create a list of all permutations of a given string s and output them in lexicographical order. -----Input:----- The input consists of a single string s, which contains only lowercase letters. -----Output:----- Output each permutation on a new line in lexicographical order. -----Assumptions:----- The length of the string s is between 1 and 6, inclusive. Each character in the string is unique. -----Sample Input:----- abc -----Sample Output:----- abc acb bac bca cab cba","solution":"from itertools import permutations def generate_permutations(s): Generates all permutations of the given string s in lexicographical order. # Generate all permutations perms = sorted([\'\'.join(p) for p in permutations(s)]) # Return the sorted list of permutations return perms"},{"question":"Alice has a list of integers and she wants to find the second largest number in the list to determine the runner-up score. Help Alice by writing a program that takes an integer list as input and outputs the second largest number. -----Input:----- - The first line will contain an integer N, the number of elements in the list. - The second line will contain N space-separated integers representing the list. -----Output:----- For each testcase, output in a single line the second largest number in the list. -----Constraints----- - 2 leq N leq 100 - -100 leq list elements leq 100 -----Sample Input:----- 5 2 3 6 6 5 -----Sample Output:----- 5","solution":"def find_second_largest(numbers): Given a list of integers, find the second largest number in the list. first_largest = second_largest = -101 # initializing to less than the minimum possible value (-100) for num in numbers: if num > first_largest: second_largest = first_largest first_largest = num elif num > second_largest and num != first_largest: second_largest = num return second_largest"},{"question":"Write a function that takes an integer `n` and returns the `n`th Fibonacci number. The Fibonacci sequence is a series of numbers where a number is found by adding up the two numbers before it, starting with 0 and 1. For instance, the first 10 numbers in the Fibonacci series are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. If `n` is less than 0, the function should return nil. The algorithm should have an optimal runtime complexity.","solution":"def fibonacci(n): Returns the nth Fibonacci number. If n is less than 0, returns None. if n < 0: return None if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that takes a list of integers and returns the length of the longest consecutive sequence. The sequence must be strictly increasing, and you can assume that all integers in the list are unique. For example: ```python longest_increasing_sequence([1, 9, 3, 10, 2, 20]) == 4 # The sequence is [1, 2, 3, 4] longest_increasing_sequence([1, 2, 0, 1]) == 3 # The sequence is [0, 1, 2] ``` Note! The input is a List of integers. The result should be an Integer.","solution":"def longest_increasing_sequence(nums): Returns the length of the longest consecutive sequence in the list of integers. The sequence must be strictly increasing. if not nums: return 0 nums_set = set(nums) longest_length = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_length = 1 while current_num + 1 in nums_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Write a function that takes a positive integer ( n ) (1 ≤ ( n ) ≤ 50) and returns a string that represents a right triangle of asterisks (\'*\'). The triangle should have ( n ) rows, with the first row containing one asterisk, the second row containing two asterisks, and so on, until the ( n )-th row which contains ( n ) asterisks. Each row should have the appropriate number of spaces before the asterisks to make the triangle right-aligned. Use newline characters to separate each row in the string. The function should return the triangle as a single string. Ensure there are no trailing spaces at the end of each line or extra newline characters at the end of the string. Examples: ```python right_triangle(3) ``` returns the string: ``` * ** *** ``` ```python right_triangle(5) ``` returns the string: ``` * ** *** **** ***** ```","solution":"def right_triangle(n): Returns a string representing a right triangle of asterisks (\'*\') with `n` rows, each row right-aligned. triangle = [] for i in range(1, n + 1): spaces = \' \' * (n - i) stars = \'*\' * i triangle.append(spaces + stars) return \'n\'.join(triangle)"},{"question":"# The Context: Alice is working as a librarian. She has to manage a large number of books in the library and sometimes faces the problem of misplaced books. To make her job easier, she wants a program to determine the minimum number of book swaps required to arrange the books in the correct order. # Task Overview: Write a function that accepts a single parameter, `books`, which is a list of integers representing the current order of books on a shelf, where each integer corresponds to a unique book ID. Each book should be placed in an ascending order of their IDs. The function should return the minimum number of swap operations required to sort the books in ascending order. # Usage Examples: ```python min_swaps([4, 3, 1, 2]) 3 min_swaps([1, 5, 4, 3, 2]) 2 ``` # Hint: Consider using an algorithm that keeps track of visited indices and how far the books are from their correct position. 검ζf: csharp Documentation: Kata.MinSwaps Method (List<Int32>) Returns the minimum number of swaps needed to arrange the books in the correct order. Syntax ```csharp public static int MinSwaps(List<int> books) ``` Parameters books: Type: System.Collections.Generic.List`1[System.Int32] The current unordered list of book IDs. Return Value Type: System.Int32 An integer representing the minimum number of swaps required to sort the books in ascending order. ```","solution":"def min_swaps(books): This function calculates the minimum number of swaps required to sort the books in ascending order. :param books: List of integers representing the current order of books. :return: Integer representing the minimum number of swaps required to sort the books. n = len(books) book_positions = {book: i for i, book in enumerate(books)} sorted_books = sorted(books) swaps = 0 visited = [False] * n for i in range(n): if visited[i] or books[i] == sorted_books[i]: continue cycle_length = 0 x = i while not visited[x]: visited[x] = True x = book_positions[sorted_books[x]] cycle_length += 1 if cycle_length > 0: swaps += (cycle_length - 1) return swaps"},{"question":"You are given an array representing different stock prices on different days. Every day you can either buy one share of stock, sell any number of shares of stock that you own, or do nothing. However, you can only hold at most one share of the stock at any time (i.e., alternate buy and sell actions). Write a program that takes in a list of integers representing the stock prices on different days and returns the maximum profit that can be made by making the optimal buy/sell decisions over the entire period. Example 1: Input: [1, 2, 3, 0, 2] Output: 3 Explanation: Buy on day 0 (price = 1) and sell on day 2 (price = 3), profit = 3-1 = 2. Then buy on day 3 (price = 0) and sell on day 4 (price = 2), profit = 2-0 = 2. Total profit = 2+2 = 4. Example 2: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 1 (price = 1) and sell on day 2 (price = 5), profit = 4. Then buy on day 3 (price = 3) and sell on day 4 (price = 6), profit = 3. Example 3: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: No transactions are made and the profit is 0. Note: - The length of the stock prices array will be between 0 and 10,000 inclusive. - Each stock price is guaranteed to be a positive integer.","solution":"def max_profit(prices): if not prices: return 0 n = len(prices) hold, sold, reset = float(\'-inf\'), 0, 0 for price in prices: pre_sold = sold sold = hold + price hold = max(hold, reset - price) reset = max(reset, pre_sold) return max(sold, reset)"},{"question":"You are given a set of weights, and you want to find two distinct weights from this set such that the absolute difference between them is as small as possible. If there are multiple pairs with the same minimum difference, output the pair with the smaller weights. If there\'s still a tie, take the lexicographically smallest pair. Write a function `find_min_difference(weights)` that takes a list of integers `weights` and returns a tuple containing the pair of weights (a, b) (where a < b) with the minimum difference. Input: - A single list of integers `weights` where the length of the list is between 2 and 10^5 and each integer is between 1 and 10^9. Output: - A tuple containing two integers `(a, b)` where `a < b` representing the pair of weights with the smallest absolute difference. If there are multiple such pairs, choose the pair with the smallest values in ascending order. If there\'s still a tie, choose the lexicographically smallest pair. Examples: ```python find_min_difference([10, 3, 20, 50, 4]) # Output: (3, 4) find_min_difference([1, 5, 3, 19, 18, 25]) # Output: (18, 19) find_min_difference([30, 5, 20, 9]) # Output: (5, 9) find_min_difference([1, 2]) # Output: (1, 2) ``` Constraints: - The function must be efficient to handle the upper limits of the input size. - The list contains at least two weights.","solution":"def find_min_difference(weights): Finds two distinct weights from the set such that the absolute difference between them is as small as possible. Params: weights (list of int): List of weights. Returns: tuple: A tuple containing the pair of weights (a, b) where a < b with the minimum difference. # Sort the weights to make it possible to find the minimum difference in O(n) time after sorting. weights.sort() # Initialize the minimum difference to a large value. min_diff = float(\'inf\') best_pair = (None, None) # Iterate over the weights to find the smallest difference. for i in range(len(weights) - 1): diff = weights[i + 1] - weights[i] if diff < min_diff: min_diff = diff best_pair = (weights[i], weights[i + 1]) # In this context, as the list is already sorted, we don\'t need to handle tie cases explicitly. # The sorted order will ensure the lexicographically smallest pair is chosen. return best_pair"},{"question":"Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original array except the one at `i`. For example, if your input is `[1, 2, 3, 4, 5]`, the expected output would be `[120, 60, 40, 30, 24]`. *You must solve it without using division and in O(n) time complexity.* # Example ```python input = [3, 2, 1] output = [2, 3, 6] ```","solution":"def product_except_self(nums): Returns a list such that each element at index `i` of the new list is the product of all the numbers in the original array except the one at `i`. n = len(nums) # Initialize left and right products respectively left_products = [1] * n right_products = [1] * n # Construct the left products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Construct the right products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the result array result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given a list of integers where every element appears three times except for one, which appears exactly once, find that single one. Example 1: Input: nums = [2, 2, 3, 2] Output: 3 The single number is 3, as it appears exactly once while 2 appears three times. Example 2: Input: nums = [0, 1, 0, 1, 0, 1, 99] Output: 99 The single number is 99, as it appears exactly once while 0 and 1 appear three times.","solution":"def single_number(nums): Given a list of integers where every element appears three times except for one, find the element that appears exactly once. ones, twos = 0, 0 for num in nums: # Update `twos` with bits which are going to be raised into `twos` twos |= ones & num # XOR the new number with the `ones` to store the single appearance ones ^= num # Clear the bits which have appeared three times in both `ones` and `twos` not_threes = ~(ones & twos) ones &= not_threes twos &= not_threes return ones"},{"question":"John is a landscape architect and has been given a project to design a rectangular park of dimensions l times b. To make it visually symmetric, he plans to place a square fountain of side length s at the center of the park. However, the local regulations require that the shortest distance from any point on the fountain\'s boundary to the park\'s boundary should be at least d meters for safety reasons. Write a program to determine if John can place the fountain at the center of the park while adhering to the distance d as per the regulations. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains four integers l, b, s, d. -----Output:----- Print YES if John can place the fountain while adhering to the regulations. Otherwise print NO. -----Constraints----- - 1 leq T leq 10 - 1 leq l, b, s, d leq 1000 -----Sample Input:----- 3 6 8 2 1 6 8 4 1 6 8 6 3 -----Sample Output:----- YES YES NO -----EXPLANATION:----- In case 1: The center of the park is at (3, 4) and the square fountain with side 2 will fit ensuring there is a distance of 1 meter from each side. In case 2: The fountain with side 4 will also fit in the center ensuring there is a distance of 1 meter from each side. In case 3: The fountain with side 6 will not fit as it violates the required distance of 3 meters from the park boundaries.","solution":"def can_place_fountain(testcases): results = [] for l, b, s, d in testcases: if (s + 2 * d <= l) and (s + 2 * d <= b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Your task is to determine the maximum length of a substring of s that contains at most k distinct characters. A substring is defined as a contiguous segment of a string. If there are multiple substrings with the same maximum length, you can return any such substring. -----Input----- The first line of the input contains an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer k (1 le k le 26). The second line of each test case contains a string s (1 le |s| le 10^5) consisting of lowercase English letters. It is guaranteed that the sum of all string lengths in all test cases does not exceed 10^6. -----Output----- For each test case, print a single line containing the maximum length of the substring that contains at most k distinct characters. If there are multiple such substrings, you can print any of them. -----Example----- Input 3 2 abcba 3 aaabbac 1 aaaa Output 3 7 4","solution":"def max_length_with_k_distinct(t, test_cases): from collections import defaultdict results = [] for k, s in test_cases: if k == 0: results.append(0) continue l = 0 max_length = 0 char_count = defaultdict(int) for r in range(len(s)): char_count[s[r]] += 1 while len(char_count) > k: char_count[s[l]] -= 1 if char_count[s[l]] == 0: del char_count[s[l]] l += 1 max_length = max(max_length, r - l + 1) results.append(max_length) return results def process_input_and_output(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): k = int(lines[index]) s = lines[index + 1] test_cases.append((k, s)) index += 2 return max_length_with_k_distinct(t, test_cases)"},{"question":"An [Arithmetic Progression](https://en.wikipedia.org/wiki/Arithmetic_progression) (AP) is a sequence of numbers in which the difference of any two successive members is a constant, known as the common difference. For example, in the sequence 3, 7, 11, 15, the common difference is 4. Given the first term a1 and the common difference d of an arithmetic progression, write a function that returns the nth term of the series. # Function Signature ```python def arithmetic_progression(a1: int, d: int, n: int) -> int: ``` # Input - `a1` (int): The first term in the arithmetic progression. - `d` (int): The common difference between each term. - `n` (int): The position (1-indexed) of the term in the sequence to return. # Output - Return the nth term as an integer. # Example ```python arithmetic_progression(3, 4, 4) ``` # Explanation - The sequence starts at 3 and the common difference is 4. - The sequence is 3, 7, 11, 15. - The 4th term is 15. - Therefore, the output should be 15.","solution":"def arithmetic_progression(a1: int, d: int, n: int) -> int: Returns the nth term of the arithmetic progression. return a1 + (n - 1) * d"},{"question":"Write a function, `equalize_array`, that takes an array of integers as input and returns the minimum number of deletions required to make all the elements of the array equal. For example: ```python equalize_array([3, 3, 2, 1, 3]) => 2 # We can remove two elements (2 and 1) to have all elements equal to 3. equalize_array([1, 2, 2, 3]) => 2 # We can remove two elements (1 and 3) to have all elements equal to 2. equalize_array([1, 1, 1, 1]) => 0 # All elements are already equal, no deletions needed. ``` ```python equalize_array([3, 3, 2, 1, 3]) # returns 2, because we can remove two elements (2 and 1) to have all elements equal to 3 equalize_array([1, 2, 2, 3]) # returns 2, because we can remove two elements (1 and 3) to have all elements equal to 2 equalize_array([1, 1, 1, 1]) # returns 0, because all elements are already equal, no deletions needed ```","solution":"def equalize_array(arr): Returns the minimum number of deletions required to make all the elements of the array equal. from collections import Counter # Count the frequency of each element in the array freq = Counter(arr) # Find the maximum frequency of any element max_freq = max(freq.values()) # The minimum deletions required will be the total number of elements # minus the number of elements of the most frequent value return len(arr) - max_freq"},{"question":"=====Function Descriptions===== A dictionary in Python is a collection of key-value pairs. Each key is unique and maps to a value. =====Example===== >>> print({\'a\': 1, \'b\': 2}) {\'a\': 1, \'b\': 2} >>> d = {\'one\': 1, \'two\': 2, \'three\': 3} >>> print(d[\'one\']) 1 >>> d[\'four\'] = 4 >>> print(d) {\'one\': 1, \'two\': 2, \'three\': 3, \'four\': 4} >>> del d[\'two\'] >>> print(d) {\'one\': 1, \'three\': 3, \'four\': 4} >>> print(d.keys()) dict_keys([\'one\', \'three\', \'four\']) >>> print(d.values()) dict_values([1, 3, 4]) Basically, dictionaries allow for efficient lookup, insertion, and deletion of elements. =====Problem Statement===== Your friend is managing a library and wants to keep track of the books and their quantities. More specifically, they want to know how many unique books are there in the library and their corresponding quantities. Using dictionaries, we can help them by creating a dictionary where the keys are the book titles and the values are the quantities. Given a list of book titles where the same title may appear multiple times, calculate the quantities and return the resulting dictionary. =====Input Format===== The first line contains the integer, N, the total number of books. The second line contains the N space-separated book titles. =====Constraints===== 1 ≤ N ≤ 100 Each title is a string of at most 100 characters. =====Output Format===== Output the resulting dictionary where keys are unique book titles and values are their respective quantities. The dictionary should be displayed in a single line. =====Sample Input 1===== 7 HarryPotter HarryPotter LOTR LOTR LOTR Hobbit Hobbit =====Sample Output 1===== {\'HarryPotter\': 2, \'LOTR\': 3, \'Hobbit\': 2}","solution":"def count_books(N, titles): Count the number of each unique book title. Parameters: N (int): Total number of books titles (List[str]): Space-separated book titles. Returns: dict: Dictionary with book titles as keys and their respective counts as values. book_counts = {} for title in titles: if title in book_counts: book_counts[title] += 1 else: book_counts[title] = 1 return book_counts"},{"question":"A company has developed a new type of drone that can operate in a 3D Cartesian coordinate system. Each drone can be positioned at coordinates (x, y, z) and is numbered from 1 to N. Due to the drone\'s fuel limitations, it can move in any of the eight basic directions `(±1, ±1, ±1)` or stay in the same position. The company wants to establish a certain number of depots at specific locations in the 3D space where drones can dock after their operations. After docking, each drone must be able to return to its original coordinates using the remaining fuel. Your task is to determine the minimum number of depots required and the minimum number of moves needed so that all drones can dock at these depots and ensure they can return to their original positions. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N (number of drones) and F (maximum fuel capacity). - Each of the next N lines contains three space-separated integers x_i, y_i, and z_i denoting the coordinates of the i-th drone. -----Output----- For each test case, provide a single line containing two integers: the minimum number of depots required and the minimum number of moves needed for all drones to dock at these depots and ensure they can return. -----Constraints----- - 1 le T le 10 - 1 le N le 2 cdot 10^5 - |x_i|, |y_i|, |z_i| le 10^6 for each valid i - 1 le F le 10^6 - the sum of N over all test cases does not exceed 2 cdot 10^5 -----Example Input----- 1 3 2 0 0 0 1 1 1 1 0 2 -----Example Output----- 1 0 -----Explanation----- Example case 1: One optimal solution is to set up a depot at coordinates (1, 1, 1). Since the drone at (1, 1, 1) is already docked at a depot and the maximum fuel capacity F=2 allows drones at (0, 0, 0) and (1, 0, 2) to reach (1, 1, 1) and return, no additional moves are needed.","solution":"def min_depots_and_moves(T, test_cases): results = [] for case in test_cases: N, F = case[0] coordinates = case[1] centroid_x = sum(pos[0] for pos in coordinates) / N centroid_y = sum(pos[1] for pos in coordinates) / N centroid_z = sum(pos[2] for pos in coordinates) / N centroid_x = round(centroid_x) centroid_y = round(centroid_y) centroid_z = round(centroid_z) depot_positions = set() for (x, y, z) in coordinates: if abs(x - centroid_x) + abs(y - centroid_y) + abs(z - centroid_z) <= F: depot_positions.add((centroid_x, centroid_y, centroid_z)) if len(depot_positions) == 0: depot_positions.add((coordinates[0])) moves = 0 for (x, y, z) in coordinates: if (x, y, z) not in depot_positions: valid_depot_found = False for (dep_x, dep_y, dep_z) in depot_positions: if abs(x - dep_x) + abs(y - dep_y) + abs(z - dep_z) <= F: valid_depot_found = True break if not valid_depot_found: moves += 1 results.append(f\\"{len(depot_positions)} {moves}\\") return results"},{"question":"Write a function to find the smallest positive integer that is missing from an array of integers. The input array can contain both positive and negative integers, and the function should find the smallest positive integer that does not appear in the array. The function should return this smallest missing positive integer. For example: - Given the input array [3, 4, -1, 1], the function should return 2. - Given the input array [1, 2, 0], the function should return 3. - Given the input array [-1, -2, -3], the function should return 1. Note: - The function should handle arrays of size up to 100,000 elements. - Optimize the function to run in O(n) time and use O(1) additional space.","solution":"def find_smallest_missing_positive(nums): Finds the smallest positive integer that is missing from the array nums. :param nums: List of integers which can contain both positive and negative numbers :return: The smallest positive integer that does not appear in the array n = len(nums) # Step 1: Move all positive integers to their correct index positions if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Step 2: Find the first missing positive integer for i in range(n): if nums[i] != i + 1: return i + 1 # If no missing positive integer is found in the range [1, n], return n + 1 return n + 1"},{"question":"Given a list of words, write a function called ```python def find_anagrams(word_list): ``` that returns a list of lists, where each sublist contains words from the original list that are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, ```python find_anagrams([\\"bat\\", \\"tab\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"nat\\", \\"bat\\"]) ``` should return ```python [[\\"bat\\", \\"tab\\", \\"bat\\"], [\\"eat\\", \\"tea\\"], [\\"tan\\", \\"nat\\"]] ``` > - The order of the words within each sublist does not matter. > - The order of the sublists themselves does not matter. > - If no anagrams are found for a word, it should not appear in the output. > - Words are case-insensitive, i.e., \\"bat\\" and \\"Tab\\" are considered anagrams.","solution":"from collections import defaultdict def find_anagrams(word_list): Returns a list of lists, where each sublist contains words from the original list that are anagrams of each other. anagrams = defaultdict(list) word_list_lower = [word.lower() for word in word_list] for word in word_list_lower: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [group for group in anagrams.values() if len(group) > 1] return result"},{"question":"Write a function that takes a string representing a mathematical expression and returns its result as an integer. The string can contain integer numbers, the four basic arithmetic operations (+, -, *, /), and might include spaces. The integer division should truncate toward zero. For example: ```python calculate(\\"3+5 / 2\\") => 5 calculate(\\"2-3*4+6 / 3\\") => -8 ``` ```c# using Kata; Kata.Calculate(\\"3+5 / 2\\"); // => 5 Kata.Calculate(\\"2-3*4+6 / 3\\"); // => -8 ``` Implement a function or method in your language of choice that performs this calculation and returns the correct result as an integer. Be sure to properly handle operator precedence and integer division truncation toward zero.","solution":"def calculate(expression): Evaluates a mathematical expression string and returns the result as an integer. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # Ensure truncation toward zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def parse_expression(expression): operators, values = [], [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] in \'0123456789\': j = i while j < len(expression) and expression[j] in \'0123456789\': j += 1 values.append(int(expression[i:j])) i = j elif expression[i] in \'+-*/\': while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 else: return None # Invalid character while operators: apply_operator(operators, values) return values[0] return parse_expression(expression)"},{"question":"In a 2D grid of size m x n, you are initially positioned at (0,0) (top-left corner of the grid). Each cell in the grid contains a non-negative integer which represents the amount of gold in that cell. You need to find a path from the top-left corner to the bottom-right corner that maximizes the amount of gold you can collect. You are only allowed to move either right or down at any point in time. Provide a function that takes the grid as input and returns the maximum amount of gold you can collect. -----Constraints----- - The size of the grid is at most 100 x 100. - Each cell contains a non-negative integer less than or equal to 100. -----Input----- The input is given from Standard Input in the following format: m n grid[0][0] grid[0][1] ... grid[0][n-1] grid[1][0] grid[1][1] ... grid[1][n-1] ... grid[m-1][0] grid[m-1][1] ... grid[m-1][n-1] -----Output----- Print the maximum amount of gold that can be collected. -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 12 In this example, one possible path to collect the maximum amount of gold is 1→3→5→2→1 collecting a total of 12 gold.","solution":"def max_gold(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] # Initialize the first cell with the value in the grid dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) return dp[m - 1][n - 1]"},{"question":"Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol | Value -------------|------ I | 1 V | 5 X | 10 L | 50 C | 100 D | 500 M | 1000 For example, two is written as II in Roman numeral, just two one\'s added together. Twelve is written as XII, which is simply X + II. The number twenty-seven is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given an integer, convert it to a Roman numeral. Input is guaranteed to be within the range from 1 to 3999. Example 1: Input: 3 Output: \\"III\\" Example 2: Input: 58 Output: \\"LVIII\\" Explanation: L = 50, V = 5, III = 3. Example 3: Input: 1994 Output: \\"MCMXCIV\\" Explanation: M = 1000, CM = 900, XC = 90, IV = 4.","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Parameters: num (int): The integer to be converted. Guaranteed to be in the range from 1 to 3999. Returns: str: The Roman numeral representation of the input integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' for i in range(len(val)): while num >= val[i]: num -= val[i] roman_num += syb[i] return roman_num"},{"question":"Write a function that counts the occurrences of each unique word in a given string and returns the count as a dictionary. The function should be case-insensitive and ignore punctuation. Example: ```python word_count(\\"Hello, world! Hello.\\") # => {\'hello\': 2, \'world\': 1} word_count(\\"Python is great. Python.\\") # => {\'python\': 2, \'is\': 1, \'great\': 1} ```","solution":"import re from collections import defaultdict def word_count(s): Counts the occurrences of each unique word in a given string, ignoring punctuation and case. Parameters: s (str): The input string. Returns: dict: A dictionary where keys are unique words and values are their counts. # Remove punctuation and convert to lower case cleaned_string = re.sub(r\'[^ws]\', \'\', s).lower() words = cleaned_string.split() word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"=====Problem Statement===== Create a function that takes three positive integers a, b, and c representing the sides of a triangle and checks whether the triangle is a right-angled triangle. A right-angled triangle can be checked using the Pythagorean theorem, where one of the sides squared is equal to the sum of the squares of the other two sides. =====Input Format===== The first line contains an integer T, the number of test cases. The next T lines each contain three integers a, b, and c separated by spaces. =====Constraints===== 1 ≤ T ≤ 20 1 ≤ a, b, c ≤ 1000 =====Output Format===== Output \\"True\\" if the triangle is right-angled, otherwise output \\"False\\" for each test case. =====Example===== **Input** 3 3 4 5 6 8 10 1 1 1 **Output** True True False =====Explanation===== In the first test case, 3^2 + 4^2 = 9 + 16 = 25 = 5^2, so it is a right-angled triangle. In the second test case, 6^2 + 8^2 = 36 + 64 = 100 = 10^2, so it is a right-angled triangle. In the third test case, giving 1 1 1, cannot form a right-angled triangle.","solution":"def is_right_angled_triangle(a, b, c): Returns True if the triangle with sides a, b, and c is a right-angled triangle, otherwise returns False. sides = sorted([a, b, c]) return sides[0]**2 + sides[1]**2 == sides[2]**2 def check_triangles(test_cases): results = [] for a, b, c in test_cases: results.append(is_right_angled_triangle(a, b, c)) return results"},{"question":"Evelyn is planning a birthday party and wants to arrange games for the kids. One of the games involves arranging the kids in a circle. Evelyn wants the arrangement to have the maximum number of \\"happy pairs.\\" A \\"happy pair\\" is defined as two adjacent kids who have the same preference for a toy. Evelyn has n kids, and each kid has a preference for one of m different toys. Please help Evelyn to determine the maximum number of happy pairs she can achieve and provide an example arrangement. -----Input----- The first line of the input contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 50) — the number of kids and the number of different toy preferences. The second line contains n positive integers p_i (1 ≤ p_i ≤ m) — the toy preferences of the kids. -----Output----- In the first line, print a single number — the maximum number of happy pairs that can be formed in the arrangement. In the second line, print any arrangement of kids\' preferences in a circle that achieves this maximum number of happy pairs. The preferences should be represented by the integers from 1 to m. Since the arrangement is circular, the output can start from any kid. -----Examples----- Input 6 3 1 1 3 2 2 3 Output 3 1 1 3 3 2 2 Input 5 2 2 2 1 1 1 Output 2 2 2 1 1 1 Input 4 2 1 2 1 2 Output 2 1 1 2 2 -----Note----- In the first example, Evelyn can arrange the kids as 1 1 3 3 2 2. This results in 3 happy pairs: the first two kids, the third and fourth kids, and the fifth and sixth kids. In the second example, Evelyn can arrange the kids as 2 2 1 1 1. This results in 2 happy pairs: the first two kids and the third and fourth kids. In the third example, Evelyn can arrange the kids as 1 1 2 2. This results in 2 happy pairs: the first two kids and the last two kids.","solution":"def max_happy_pairs(n, m, preferences): from collections import Counter counts = Counter(preferences) pairs = 0 remaining = [] for toy in counts: pairs += counts[toy] // 2 if counts[toy] % 2: remaining.append(toy) arrangement = [] for toy, count in counts.items(): arrangement.extend([toy] * (count // 2 * 2)) # Add pairs # If we have remaining toys left that couldn\'t form pairs if remaining: remaining.sort() for toy in remaining: arrangement.append(toy) return pairs, arrangement def format_solution(n, m, preferences): pairs, arrangement = max_happy_pairs(n, m, preferences) # arranging them as circle return pairs, arrangement + [arrangement[0]] n = 6 m = 3 preferences = [1, 1, 3, 2, 2, 3] result = format_solution(n, m, preferences) print(result)"},{"question":"You are given a string representing the details of multiple products in a store. Each product\'s details are provided in the format: `\\"product_id|price|quantity\\"`, and the products are separated by commas. For example: `\\"123|19.99|5,456|1.99|10,789|34.50|2\\"` Where `product_id` is a unique identifier for the product, `price` is the cost of one unit of the product (a floating-point number), and `quantity` is the number of units available of that product (an integer). Your task is to write a function that processes this string and returns a new string containing the total number of products, the maximum price of any product, and the most expensive product\'s `product_id`. For example, given the string: `\\"123|19.99|5,456|1.99|10,789|34.50|2\\"` The string result will be: `\\"Total Products: 3 Max Price: 34.50 Product ID: 789\\"` If the given string is empty, you should return: `\\"Total Products: 0 Max Price: 0.00 Product ID: None\\"` Implement the function to achieve this. The resulting string should follow the format: `\\"Total Products: total Max Price: max_price Product ID: product_id\\"` Where `total` is the total number of products (integer), `max_price` is the highest price found (formatted to two decimal places), and `product_id` is the identifier of the product with the highest price (string).","solution":"def product_details(info_str): Processes the product details string and returns the total number of products, the maximum price of any product, and the most expensive product\'s product_id. if not info_str: return \\"Total Products: 0 Max Price: 0.00 Product ID: None\\" products = info_str.split(\',\') total_products = len(products) max_price = 0.00 max_price_id = \'None\' for product in products: product_id, price, _ = product.split(\'|\') price = float(price) if price > max_price: max_price = price max_price_id = product_id return f\\"Total Products: {total_products} Max Price: {max_price:.2f} Product ID: {max_price_id}\\""},{"question":"A delivery company wants to optimize their parcel delivery routes. They have a list of delivery locations, each with a specific delivery demand (weights of packages to be delivered). There are two types of vehicles available for deliveries: Type A trucks and Type B trucks. Type A trucks have a maximum capacity of C_A units of weight, and Type B trucks have a maximum capacity of C_B units of weight. The company wants to maximize the number of deliveries made in a single round using their available trucks. You need to help the company determine the maximum number of deliveries they can make if they employ a combination of Type A and Type B trucks optimally for the given delivery locations and their demands. -----Input:----- - The first line of the input contains three integers: n, C_A, and C_B. - n is the number of delivery locations (1 ≤ n ≤ 10^5). - C_A is the maximum capacity of Type A trucks (1 ≤ C_A ≤ 10^9). - C_B is the maximum capacity of Type B trucks (1 ≤ C_B ≤ 10^9). - The next n lines each contain a single integer d_i which represents the delivery demand at location i (1 ≤ d_i ≤ 10^9). -----Output:----- Output a single integer: the maximum number of deliveries that can be made using a combination of the available trucks. -----Constraints:----- - Use as many trucks as needed (of either type) to maximize deliveries. - Each delivery location demand must be completely met by a single truck; it cannot be divided among multiple trucks. -----Sample Input 1:----- 5 10 20 8 15 5 7 22 -----Sample Input 2:----- 4 50 30 40 25 35 10 -----Sample Output 1:----- 4 -----Sample Output 2:----- 4 -----EXPLANATION:----- In the first example: - Use a Type A truck for the first location with demand 8. - Use a Type B truck for the second location with demand 15. - Use a Type A truck for the third location with demand 5. - Use a Type A truck for the fourth location with demand 7. - The fifth location with demand 22 cannot be met since no truck has a capacity of 22. In the second example: - Use a Type A truck for the first location with demand 40. - Use a Type B truck for the second location with demand 25. - Use a Type A truck for the third location with demand 35. - Use a Type B truck for the fourth location with demand 10. - All delivery demands are met.","solution":"def max_deliveries(n, C_A, C_B, demands): Returns the maximum number of deliveries that can be made using Type A and Type B trucks. Parameters: - n (int): Number of delivery locations. - C_A (int): Max capacity of Type A trucks. - C_B (int): Max capacity of Type B trucks. - demands (list of int): List of delivery demands for each location. Returns: - int: Maximum number of deliveries. count = 0 for demand in demands: if demand <= C_A or demand <= C_B: count += 1 return count"},{"question":"Given a string `s`, return the first non-repeating character in it and return its index. If it doesn\'t exist, return -1. You may assume all the characters in the string are lowercase alphabets. Example: ```python first_unique_char(\\"leetcode\\") > 0 first_unique_char(\\"loveleetcode\\") > 2 first_unique_char(\\"aabb\\") > -1 ```","solution":"def first_unique_char(s): Returns the index of the first non-repeating character in the string s. If there\'s no such character, returns -1. from collections import Counter # Build a counter for all characters in the string char_count = Counter(s) # Iterate through the string to find the first unique character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"You are part of a team managing a warehouse. The warehouse can have multiple sections, each storing items of different weights. The warehouse has a conveyor belt that moves items from one section to another. However, the conveyor belt can only handle a certain maximum weight at a time. The task is to move all items from one section to another while minimizing the number of conveyor belt trips. Given the weights of the items and the maximum weight the conveyor belt can handle, calculate the minimum number of trips required to move all items. -----Input----- The first line contains an integer T (1 leq T leq 1000), the number of test cases. For each test case, the first line contains two integers N (1 leq N leq 10^5) and W (1 leq W leq 10^9) - the number of items and the maximum weight the conveyor belt can handle, respectively. The second line contains N integers w_1, w_2, ldots, w_N (1 leq w_i leq W) - the weights of the items. It is guaranteed that the sum of N over all test cases does not exceed 10^6. -----Output----- For each test case, print one integer: the minimum number of trips required to move all items. -----Example----- Input 2 3 10 4 8 5 5 15 7 10 5 5 5 Output 2 3 -----Note----- In the first example, the first trip can carry items with weights 4 and 5 (total weight = 9, less than or equal to 10), and the second trip can carry the remaining item with weight 8. Therefore, a minimum of 2 trips is required. In the second example, the first trip can carry two items with weights 7 and 5 (total weight = 12, less than or equal to 15), the second trip can carry the remaining two items with weights 5 and 5 (total weight = 10, less than or equal to 15), and the third trip can carry the one item with weight 10. Therefore, a minimum of 3 trips is required.","solution":"def min_trips(T, test_cases): results = [] for i in range(T): N, W = test_cases[i][:2] weights = sorted(test_cases[i][2:], reverse=True) trips = 0 left, right = 0, N - 1 while left <= right: if weights[left] + weights[right] <= W: right -= 1 left += 1 trips += 1 results.append(trips) return results"},{"question":"Write a program that takes a positive integer N as input and prints a right-aligned pyramid made of asterisks (*) with N rows. Each row k (1 ≤ k ≤ N) should contain k asterisks aligned to the right, with the rest of the row filled with spaces. A pyramid with 4 rows looks like this: ``` * ** *** **** ``` Input A single line with an integer N representing the number of rows. Output N lines, each containing a right-aligned row of the pyramid. Example Input: 4 Output: ``` * ** *** **** ```","solution":"def right_aligned_pyramid(N): Prints a right-aligned pyramid made of asterisks (*) with N rows. Each row k (1 ≤ k ≤ N) contains k asterisks aligned to the right, with the rest of the row filled with spaces. for i in range(1, N+1): print(\' \'*(N-i) + \'*\'*i)"},{"question":"Find the Missing Number in a Sequence You are given a list of integers that represents a sequence where exactly one number is missing, and the rest are in ascending order without any duplicates. The sequence starts from 1 and increases by 1 each time except for the missing number. Your task is to find and return the missing number in the sequence. For example, if you have a list of `[1, 2, 3, 5, 6, 7]`, the missing number is `4`. Take a look at the test cases: ```python def test_find_missing_number(): assert find_missing_number([1, 2, 4, 5, 6]) == 3 assert find_missing_number([1, 3, 4, 5, 6]) == 2 assert find_missing_number([2, 3, 4, 5, 6]) == 1 assert find_missing_number([1, 2, 3, 4, 6]) == 5 assert find_missing_number([1, 2, 3, 4, 5]) == 6 def find_missing_number(sequence): # Your code goes here pass ``` Write a function `find_missing_number(sequence)` that takes a list of integers (`sequence`) and returns the missing integer.","solution":"def find_missing_number(sequence): Finds the missing number in an ascending sequence of integers starting from 1. Args: sequence (list): A list of integers where exactly one number is missing. Returns: int: The missing integer. n = len(sequence) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(sequence) return expected_sum - actual_sum"},{"question":"You are given an array of strings where each string represents a mathematical expression involving addition, subtraction, multiplication, and division. Write a function to evaluate each expression and return a new list with the results. If an expression is invalid, include `None` in the corresponding position of the result list. ``` Example Input : [\\"2+3*4\\", \\"10/2-1\\", \\"5-5/0\\", \\"6*7+8\\", \\"abc+1\\"] Output : [14, 4.0, None, 50, None] ``` Note: 1. Assume the input contains only valid mathematical operators for the expressions. 2. Division by zero should be handled and return `None` for that expression. 3. Expressions with invalid characters should return `None`.","solution":"def evaluate_expressions(expressions): def evaluate(expression): try: return eval(expression) except (ZeroDivisionError, SyntaxError, NameError): return None return [evaluate(expr) for expr in expressions]"},{"question":"A delivery company needs software to manage their delivery operations more efficiently. They have drivers assigned to different delivery routes. The company wants to calculate the total delivery time for each driver based on the times taken for each task in their respective routes and display it in a specific format. Your task is to help the company by writing the necessary code. -----Input:----- - The first line contains an integer N, the number of drivers. - The next N lines each contain a string (the name of the driver) followed by a series of integers, where the first integer indicates the number of deliveries for that driver and the subsequent integers indicate the time taken (in minutes) for each delivery. -----Output:----- For each driver, output the total delivery time in the format \\"<Driver Name>: <Total Time> minutes\\". -----Constraints----- - 1 leq N leq 100 - 1 leq < Number of deliveries for each driver leq 50 - 1 leq Time taken for each delivery leq 200 -----Sample Input:----- 3 Alice 3 30 40 50 Bob 2 20 60 Charlie 4 25 35 45 55 -----Sample Output:----- Alice: 120 minutes Bob: 80 minutes Charlie: 160 minutes","solution":"def calculate_delivery_times(data): Given the input data, calculates and returns the total delivery time for each driver. :param data: List of strings, each string contains driver name followed by the number of deliveries and delivery times. :return: List of strings with each driver and their total delivery time in the format \'<Driver Name>: <Total Time> minutes\' result = [] for entry in data: parts = entry.split() driver_name = parts[0] num_deliveries = int(parts[1]) delivery_times = list(map(int, parts[2:2 + num_deliveries])) total_time = sum(delivery_times) result.append(f\\"{driver_name}: {total_time} minutes\\") return result"},{"question":"Write a function ```python compress_string(s) ``` that compresses a given string `s` by reducing multiple consecutive occurrences of a character to a single instance of that character followed by the count of repeated occurrences. E.g. ```python compress_string(\\"aaabbcddd\\") == \\"a3b2cd3\\" compress_string(\\"abc\\") == \\"abc\\" compress_string(\\"aaabbbcccaaa\\") == \\"a3b3c3a3\\" compress_string(\\"\\") == \\"\\" compress_string(\\"aaAAaA\\") == \\"a2A2aA\\" ``` Note: - Only consecutive characters are considered for compression. - The function should be case-sensitive. Example: \'A\' and \'a\' should be treated as different characters.","solution":"def compress_string(s): Compresses a given string by reducing multiple consecutive occurrences of a character to a single instance of that character followed by the count of repeated occurrences. :param s: The input string to be compressed :type s: str :return: The compressed string :rtype: str if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: if count > 1: compressed.append(f\\"{s[i - 1]}{count}\\") else: compressed.append(s[i - 1]) count = 1 # Add the last set of characters if count > 1: compressed.append(f\\"{s[-1]}{count}\\") else: compressed.append(s[-1]) return \'\'.join(compressed)"},{"question":"You are given an array of integers. Your task is to write a function that returns the sum of all unique elements in the array. Unique elements are those which appear exactly once in the array. For example: sumUnique([1, 2, 3, 2, 1, 4]) => 7 The unique elements in the array are *3* and *4*. Their sum is *7*. Another example: sumUnique([4, 4, 5, 6, 6, 7]) => 5 The unique element in this array is *5*. Hence, its sum is *5*.","solution":"def sumUnique(arr): Returns the sum of all unique elements in the array. Unique elements are those which appear exactly once in the array. element_count = {} for element in arr: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 return sum(element for element, count in element_count.items() if count == 1)"},{"question":"Task An experienced programmer is working on a financial analysis tool and needs to implement a feature that calculates the moving average of stock prices over a specified window size. Given a list of daily stock prices and an integer window size, your task is to calculate and return a list of the moving averages. The moving average for a window is calculated by taking the sum of the elements in the window and dividing it by the window size. The window slides from the start of the list to the end, and you should output the moving average for each position where the window is fully contained within the list. Write a function `moving_average(prices: List[float], window_size: int) -> List[float]` that takes a list of stock prices and a window size and returns the list of moving averages. # Example Given `prices = [1.0, 2.0, 3.0, 4.0, 5.0]` and `window_size = 3`, the output should be `[2.0, 3.0, 4.0]`. Explanation: - The first window is [1.0, 2.0, 3.0] with an average of (1.0 + 2.0 + 3.0) / 3 = 2.0. - The second window is [2.0, 3.0, 4.0] with an average of (2.0 + 3.0 + 4.0) / 3 = 3.0. - The third window is [3.0, 4.0, 5.0] with an average of (3.0 + 4.0 + 5.0) / 3 = 4.0. # Input/Output - `[input]` a list of floats `prices` and an integer `window_size` `prices` is a list of at least two stock prices. It is guaranteed that `2 ≤ len(prices) ≤ 100` and `0 ≤ prices[i] ≤ 1000`. `window_size` is an integer such that `2 ≤ window_size ≤ len(prices)`. - `[output]` a list of floats A list of moving averages of length `len(prices) - window_size + 1`. # Constraints - The elements of the result should be rounded to one decimal place.","solution":"from typing import List def moving_average(prices: List[float], window_size: int) -> List[float]: Calculate the moving averages of stock prices over a specified window size. :param prices: A list of stock prices. :param window_size: The size of the moving window. :return: A list of moving averages. result = [] n = len(prices) for i in range(n - window_size + 1): window = prices[i:i+window_size] window_average = round(sum(window) / window_size, 1) result.append(window_average) return result"},{"question":"Given an array of integers, where every element appears three times except for one, which appears exactly once. Find that single one. You should implement a function `singleNumber(nums: List[int]) -> int`. Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: [2,2,3,2] Output: 3 Example 2: Input: [0,1,0,1,0,1,99] Output: 99","solution":"def singleNumber(nums): Given an array of integers, each appearing three times except for one appearing once, this function returns that single integer. bit_count = [0] * 32 # To store the sum of bits at each position in 32-bit integers for num in nums: for i in range(32): bit_count[i] += (num >> i) & 1 result = 0 for i in range(32): if bit_count[i] % 3: # Only the non-triplicated number will contribute to this bit if i == 31: # Handle negative numbers result -= (1 << i) else: result |= (1 << i) return result"},{"question":"Implement a function called `next_lexicographic_permutation()` that accepts a string of lowercase alphabetical characters and returns the next lexicographic permutation of the string. If no such permutation exists, return the string sorted in ascending order. The lexicographic or dictionary order is an ordering defined by the alphabetical order of the component letters. # Implementation Details: 1. The function should identify the next permutation by rearranging the characters of the input string in-place to the next lexicographic order. 2. If the string is already at its highest possible permutation, return the string sorted in ascending order. 3. The function must be efficient and work within reasonable time and space complexity constraints. # Cases: - `\\"abc\\"` -> The next lexicographic permutation is `\\"acb\\"`. - `\\"acb\\"` -> The next lexicographic permutation is `\\"bac\\"`. - `\\"cba\\"` -> No higher permutation exists, return `\\"abc\\"`. Input: - A string `s` (1 <= len(s) <= 1000) containing only lowercase alphabetical characters. Output: - The next lexicographic permutation of the input string or the sorted string if no higher permutation exists. # Function Signature: ```python def next_lexicographic_permutation(s: str) -> str: # Write your code here pass ``` # Examples: ```python next_lexicographic_permutation(\\"abc\\") == \\"acb\\" next_lexicographic_permutation(\\"acb\\") == \\"bac\\" next_lexicographic_permutation(\\"cba\\") == \\"abc\\" next_lexicographic_permutation(\\"edcba\\") == \\"aabcd\\" ```","solution":"def next_lexicographic_permutation(s: str) -> str: This function returns the next lexicographic permutation of the input string. If no higher permutation exists, it returns the string sorted in ascending order. s = list(s) i = len(s) - 2 # Find the rightmost character which is smaller than its next character while i >= 0 and s[i] >= s[i + 1]: i -= 1 # If no such character is found, that means the string is sorted in descending order if i == -1: return \\"\\".join(sorted(s)) # Find the smallest character on right side of (i) which is greater than s[i] for j in range(len(s) - 1, i, -1): if s[j] > s[i]: # Swap the found character with character at i s[i], s[j] = s[j], s[i] break # Reverse the characters after the (i-th) index s = s[:i + 1] + s[i + 1:][::-1] return \\"\\".join(s)"},{"question":"You are given a grid with `m` rows and `n` columns, initially filled with zeros. You are also given an array of operations `ops`, where `ops[i] = [ai, bi]` means that all cells in the submatrix from `(0, 0)` to `(ai-1, bi-1)` (inclusive) are incremented by 1. Define the maximum integer in the grid after performing all the operations. Return the number of cells in the grid that contain the maximum integer. Example 1: Input: ``` m = 3, n = 3, ops = [[2,2],[3,3]] ``` Output: ``` 4 ``` Explanation: After performing the two given operations, the incremented grid becomes: ``` [ [2, 2, 1], [2, 2, 1], [1, 1, 1] ] ``` The maximum integer in the grid is 2, and there are four cells with the value 2. Constraints: - `1 <= m, n <= 10^4` - `0 <= ops.length <= 10^4` - `1 <= ai <= m` - `1 <= bi <= n` Write a function `maxCount` that takes the parameters `m`, `n`, and `ops`: ```python def maxCount(m: int, n: int, ops: List[List[int]]) -> int: # Implementation here ```","solution":"from typing import List def maxCount(m: int, n: int, ops: List[List[int]]) -> int: Returns the number of cells in the grid that contain the maximum integer after performing all the given operations. if not ops: return m * n # If there are no operations, all cells contain the maximum integer which is 0 min_ai = min(op[0] for op in ops) min_bi = min(op[1] for op in ops) return min_ai * min_bi"},{"question":"A company is designing a security system that monitors its employees\' login patterns. The system logs the duration of each login session in minutes for each employee. Each employee is expected to log in once per day, but the duration can vary each time. The security team is interested in finding any abnormal drop in an employee\'s daily login duration. More specifically, given a list of login durations for an employee over a period of days, they want to know the maximum number of consecutive days during which the employee\'s login duration either remains the same or increases compared to the previous day. This will help them identify any sudden drops in engagement which could indicate a potential issue. -----Input:----- The input consists of several test cases. The first line contains a single integer T, the number of test cases. Each test case starts with a single line containing an integer N, the number of days for which the login durations are provided. The subsequent line contains a list of N space-separated integers, each representing the login duration in minutes for successive days. -----Output:----- For each test case, output a single line containing the length of the longest streak of non-decreasing login durations. -----Constraints:----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Duration (in minutes) ≤ 500 -----Example:----- Input: 3 5 30 60 60 45 90 6 20 25 25 30 30 35 4 15 10 5 5 Output: 3 6 2 -----Explanation:----- - In the first test case, the longest non-decreasing streak is `30 60 60`, which has a length of 3. - In the second test case, all the login durations are non-decreasing, so the length of the streak is 6. - In the third test case, the longest non-decreasing streak is `5 5`, which has a length of 2.","solution":"def longest_non_decreasing_streak(durations): Function to determine the longest streak of non-decreasing login durations. max_streak = 1 current_streak = 1 for i in range(1, len(durations)): if durations[i] >= durations[i - 1]: current_streak += 1 else: current_streak = 1 if current_streak > max_streak: max_streak = current_streak return max_streak def process_input(input_data): Processes the input data and returns results for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): N = int(lines[index]) durations = list(map(int, lines[index + 1].split())) results.append(longest_non_decreasing_streak(durations)) index += 2 return results"},{"question":"Given a list of integers, find the number that occurs an odd number of times in the list. It is guaranteed that exactly one integer will appear an odd number of times. Example: ``` input_list = [2, 3, 4, 2, 3, 4, 3] ``` In the above list, the number `3` occurs `3` times, which is odd. Output: ``` 3 ```","solution":"def find_odd_occurrence(input_list): Returns the integer that occurs an odd number of times in the input_list. for num in input_list: if input_list.count(num) % 2 != 0: return num"},{"question":"In a city, there are various blocks and each block has a different number of buildings. You are given a list where each entry represents the number of buildings in a block. Your task is to split these blocks into two groups such that the difference in the total number of buildings in the two groups is minimized. Return the minimized difference. For example: - Given [3, 1, 4, 2, 2] -> Return 0 - Given [1, 2, 3, 9] -> Return 3 Note: - The total number of blocks can be as small as 1 or as large as 200. - Each block has at least 1 building and can have up to 100 buildings.","solution":"def find_minimized_difference(blocks): Given a list of blocks, where each value represents the number of buildings in a block, split the blocks into two groups such that the difference in the total number of buildings in the two groups is minimized. Return the minimized difference. total_sum = sum(blocks) n = len(blocks) target = total_sum // 2 dp = [0] * (target + 1) for num in blocks: for j in range(target, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return abs((total_sum - dp[target]) - dp[target])"},{"question":"# Problem Context You are given a grid of size n x n filled with non-negative numbers. You start at the top-left corner of the grid (0,0) and your goal is to find a path to the bottom-right corner (n-1,n-1) which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Implement a function `minPathSum(grid)` that takes a 2D list `grid` as input and returns the minimum sum of the path from the top-left to the bottom-right corner of the grid. **Example:** ```python grid = [ [1,3,1], [1,5,1], [4,2,1] ] print(minPathSum(grid)) # Output: 7 ``` **Explanation:** The path with the minimum sum is: 1 → 3 → 1 → 1 → 1, which has a sum of 7. # Constraints: - The grid size `n` is in the range [1, 200]. - Each element in the grid is in the range [0, 100]. # Hints: 1. Consider using dynamic programming to solve this problem. 2. Create a 2D list `dp` where `dp[i][j]` represents the minimum path sum to reach cell (i, j). 3. Initialize `dp[0][0]` with `grid[0][0]` and use nested loops to fill in the `dp` array based on the minimum sum path to each cell.","solution":"def minPathSum(grid): Returns the minimum path sum from the top-left to the bottom-right corner of the grid. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Initialize a 2D dp array with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Set the starting point dp[0][0] = grid[0][0] # Fill the first column (only downward movement possible) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the first row (only rightward movement possible) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Iterate through the grid starting from (1, 1) and fill dp array # Each cell dp[i][j] is filled with minimum of top or left cell plus the grid\'s current cell value for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The minimum path sum to reach the bottom-right corner will be in dp[n-1][m-1] return dp[n-1][m-1]"},{"question":"You need to design an algorithm that simulates the work schedule of a team. The team consists of multiple workers, and each worker has a specific range of hours they can work. Your task is to determine whether it is possible to cover all required hours of a given day (from start hour to end hour) with the given workers\' schedules. -----Input----- The first line of input contains two space-separated integers, start and end (0 ≤ start < end ≤ 23), denoting the start and end hour of the required workday. The next line of input contains a single integer m (1 ≤ m ≤ 100), denoting the number of workers. Each of the next m lines contains two space-separated integers, li and ri (0 ≤ li < ri ≤ 23), denoting the range of hours that the ith worker can work (from hour li to hour ri, inclusive). -----Output----- Output a single line containing \\"YES\\" if it\'s possible to cover the entire range from start to end with the given workers\' schedules. Otherwise, output \\"NO\\". -----Examples----- Input 8 17 3 8 12 12 15 14 17 Output YES Input 9 18 3 8 10 11 14 16 19 Output NO -----Note----- In the first example, the combined schedules of the workers successfully cover the full range from 8 to 17: - Worker 1 covers hours 8 to 12. - Worker 2 covers hours 12 to 15. - Worker 3 covers hours 14 to 17. In the second example, there is a gap between 10 and 11 and another gap between 14 and 16, so it\'s not possible to cover the entire range from 9 to 18.","solution":"def can_cover_workday(start, end, workers): Determines if it\'s possible to cover the entire range from start to end with the given workers\' schedules. Parameters: - start: integer, start hour of the required workday - end: integer, end hour of the required workday - workers: list of tuples, each containing two integers representing the range of hours a worker can work (inclusive) Returns: - \'YES\' if it\'s possible to cover the entire range from start to end, \'NO\' otherwise. workers.sort() current_end = start for li, ri in workers: if li > current_end: break if li <= current_end < ri: current_end = ri if current_end >= end: return \\"YES\\" return \\"NO\\""},{"question":"In an enchanted forest, there are N magical creatures standing in a line. Each creature possesses a certain amount of magical energy represented by a positive integer. However, these magical creatures have a peculiar characteristic; they do not like their magical energy to be close in value to their neighboring creatures’ energy. Your task is to help these creatures reorganize themselves in such a way that the absolute difference in magical energy between any two adjacent creatures is maximized. -----Input:----- The first line contains an integer N representing the number of magical creatures. The second line contains N space-separated positive integers, where each integer represents the magical energy of a creature. -----Output:----- Output the reorganized order of the creatures’ magical energies such that the absolute difference in magical energy between any two adjacent creatures is maximized. -----Constraints----- - 2 leq N leq 10^5 - 1 leq E_i leq 10^6 -----Sample Input:----- 5 4 8 1 6 3 -----Sample Output:----- 1 8 3 6 4","solution":"def maximize_absolute_difference(N, energies): Returns a new order of energies such that the absolute difference in magical energy between any two adjacent creatures is maximized. # Sort energies in ascending order energies.sort() # Use two pointers to select elements from the sorted list result = [] i, j = 0, N - 1 turn = True # Boolean to alternate picking between the smallest and largest remaining elements while i <= j: if turn: result.append(energies[i]) i += 1 else: result.append(energies[j]) j -= 1 turn = not turn return result"},{"question":"Given an array of integers and a target sum, complete the function that finds and returns all unique pairs of numbers in the array that add up to the target sum. Each pair should be returned as a list in which the smaller number comes first. Pairs should be returned in ascending order based on the first element of the pair. Example: - Input: `array = [3, 4, 5, 2, -1, 0, 7, 1]`, `target = 5` - Output: `[[0, 5], [1, 4], [2, 3]]` Note: - Each integer in the array can be used at most once in forming a pair. - If no such pairs exist, return an empty list.","solution":"def find_pairs_with_sum(array, target): Finds all unique pairs in an array that add up to a specific target sum. Each pair is returned as a list in which the smaller number comes first. The pairs are sorted in ascending order based on the first element of the pair. :param array: List of integers :param target: Target sum :return: List of unique pairs found_pairs = set() seen_numbers = set() for number in array: complement = target - number if complement in seen_numbers: pair = tuple(sorted((number, complement))) found_pairs.add(pair) seen_numbers.add(number) # Sort pairs and convert back to list form sorted_pairs = sorted([list(pair) for pair in found_pairs]) return sorted_pairs"},{"question":"# Pascal Triangle Row Value Pascal\'s Triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s Triangle are conventionally enumerated starting with row `0`. Each element in the triangle is the sum of the two directly above it. The first few rows of Pascal\'s Triangle are as follows: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` Write a method to find the value at the specified row and column in Pascal\'s Triangle. The method signature should be: ```python def pascal_value(row: int, col: int) -> int: ``` - `row`: the row number (0-indexed). - `col`: the column number (0-indexed). Both `row` and `col` are non-negative integers, and `col` will always be less than or equal to `row`. Examples: ``` pascal_value(4, 2) # => 6 pascal_value(5, 3) # => 10 pascal_value(6, 0) # => 1 pascal_value(6, 6) # => 1 ``` Write the method `pascal_value` that takes the row and column as parameters and returns the integer value found at that position in Pascal\'s Triangle.","solution":"def pascal_value(row: int, col: int) -> int: Given the row and column number, return the value at that position in Pascal\'s triangle. if col == 0 or col == row: return 1 else: return pascal_value(row - 1, col - 1) + pascal_value(row - 1, col)"},{"question":"Given a list of integers, find if the array contains any duplicates. Your function should return `True` if any value appears at least twice in the array, and it should return `False` if every element is distinct. Example: Input: [1,2,3,1] Output: True Explanation: The value 1 appears twice in the array. Example 2: Input: [1,2,3,4] Output: False Explanation: No value appears twice in the array. Example 3: Input: [1,1,1,3,3,4,3,2,4,2] Output: True Explanation: The value 1 appears three times, and the values 3, 2, and 4 each appear twice.","solution":"def contains_duplicates(nums): Returns True if any value appears at least twice in the array, otherwise returns False. return len(nums) != len(set(nums))"},{"question":"You are given a sequence of integers: `1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...`. If we were to replace every `n-th` integer in this sequence with the sum of its prime factors, the sequence would start with: `1, 2, 3, 2, 5, 5, 7, 4, 3, 7, ...`. For example, the sum of the prime factors of `4` is `2+2 = 4`, so it is replaced by `4`; the prime factors of `6` are `2` and `3` whose sum is `5`. Given an integer `n`, find the `n-th` element in the transformed sequence. The sequence starts with index `1`. Function Signature: ```python def prime_factors_sum(n: int) -> int: pass ``` Constraints: - `1 <= n <= 10^6` For example: - `prime_factors_sum(1)` should return `1` - `prime_factors_sum(6)` should return `5` - `prime_factors_sum(10)` should return `7` Good Luck!","solution":"def prime_factors_sum(n: int) -> int: Returns the n-th element in the sequence where each integer is replaced by the sum of its prime factors. def sum_of_prime_factors(num): Calculates the sum of prime factors of a given number. factors_sum = 0 factor = 2 while factor * factor <= num: while (num % factor) == 0: factors_sum += factor num //= factor factor += 1 if num > 1: factors_sum += num return factors_sum if n == 1: return 1 return sum_of_prime_factors(n)"},{"question":"Given a list of integers, determine if there are three distinct elements in the list that sum up to zero. Return true if such elements exist, and false otherwise. The list can contain both positive and negative integers. Your solution should run in O(n^2) time complexity. Example 1: Input: [-1, 0, 1, 2, -1, -4] Output: true Explanation: There are two triplets which can sum up to zero: [-1, 0, 1] and [-1, -1, 2]. Example 2: Input: [1, 2, -2, -1] Output: false Explanation: There is no triplet that can sum up to zero.","solution":"def three_sum_zero(nums): Determines if there are three distinct elements in the list that sum up to zero. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: triplet_sum = nums[i] + nums[left] + nums[right] if triplet_sum == 0: return True elif triplet_sum < 0: left += 1 else: right -= 1 return False"},{"question":"Given an array of integers, find the first missing positive integer in linear time and using constant extra space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. For example, the input `[3, 4, -1, 1]` should give output `2`. The input `[1, 2, 0]` should give output `3`. You can modify the input array in-place if needed. Implement the function `first_missing_positive(nums)` (**JS**: `firstMissingPositive(nums)`) that returns the first missing positive integer. ```python first_missing_positive([3, 4, -1, 1]) => 2 first_missing_positive([1, 2, 0]) => 3 ```","solution":"def first_missing_positive(nums): Returns the first missing positive integer from the list nums. The function modifies the input list in place and uses constant extra space. n = len(nums) for i in range(n): # Loop to place numbers at their correct indices if possible while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap the numbers to their correct positions correct_index = nums[i] - 1 nums[i], nums[correct_index] = nums[correct_index], nums[i] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to write a Python function to find the largest difference between any two elements such that the larger element appears after the smaller element in the list. =====Function Signature===== ```python def max_difference(nums: List[int]) -> int: pass ``` =====Input Format===== - A single list of integers, which can be of any length from 1 to 1000. =====Constraints===== - All elements in the list are integers. - Each element in the array is in the range -10^5 to 10^5. =====Output Format===== - A single integer denoting the maximum difference. If no valid difference is found, return 0. =====Sample Input===== ```python nums = [2, 3, 10, 6, 4, 8, 1] ``` =====Sample Output===== ```python 8 ``` =====Explanation===== - The largest difference is `10 - 2 = 8`. =====Sample Input===== ```python nums = [7, 9, 5, 6, 3, 2] ``` =====Sample Output===== ```python 2 ``` =====Explanation===== - The largest difference is `9 - 7 = 2`.","solution":"from typing import List def max_difference(nums: List[int]) -> int: Function to find the largest difference between any two elements such that the larger element appears after the smaller element in the list. if not nums or len(nums) <= 1: return 0 min_element = nums[0] max_diff = 0 for num in nums[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"Write a function `findLargestSumSubarray` or `find_largest_sum_subarray` that takes an array of integers as an argument and returns the largest sum of any continuous subarray within the given array. Example: For the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the function should return `6`, as the subarray `[4, -1, 2, 1]` has the largest sum equal to `6`. Note: An empty subarray or subarray of zero length is not considered.","solution":"def find_largest_sum_subarray(arr): Returns the largest sum of any continuous subarray within the given array. if len(arr) == 0: raise ValueError(\\"Array must contain at least one element.\\") max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a program that takes an integer M and if the number is a prime number then display \\"Prime Number\\" otherwise print \\"Not a Prime Number\\". -----Input----- The first line contains an integer X, total number of testcases. Then follow X lines, each line contains an integer M. -----Output----- For each test case, output the given string depending on conditions, in a new line. -----Constraints----- - 1 ≤ X ≤ 500 - 1 ≤ M ≤ 100 -----Example----- Input 3 3 4 13 Output Prime Number Not a Prime Number Prime Number","solution":"def is_prime_number(M): Returns \\"Prime Number\\" if M is a prime number, otherwise returns \\"Not a Prime Number\\". if M <= 1: return \\"Not a Prime Number\\" for i in range(2, int(M**0.5) + 1): if M % i == 0: return \\"Not a Prime Number\\" return \\"Prime Number\\" def check_primes(X, test_cases): Takes the number of test cases X and a list of integers, and returns a list with \\"Prime Number\\" or \\"Not a Prime Number\\" for each integer respectively. results = [] for M in test_cases: results.append(is_prime_number(M)) return results"},{"question":"You are given a series of integers. For each integer, generate a pattern of asterisks (*) in the shape of a right-angled triangle. Help to code this pattern based on the given integer value N. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output as the pattern. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- * ** * ** *** * ** *** ****","solution":"def generate_triangle_patterns(test_cases): Given a list of integer test cases, generate a list of triangle patterns. Args: test_cases: List[int] - A list of integers. Returns: List[str] - A list of strings, where each string represents a triangle pattern separated by newline characters. results = [] for n in test_cases: pattern = [] for i in range(1, n + 1): pattern.append(\'*\' * i) results.append(\'n\'.join(pattern)) return results # Function to process the input and output in the correct format def process_triangle_patterns(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [int(input_lines[i]) for i in range(1, T + 1)] patterns = generate_triangle_patterns(test_cases) return \'nn\'.join(patterns)"},{"question":"Write a function `categorizeParticipants` that takes a list of participants, where each participant is represented by a dictionary with keys \\"name\\" and \\"time\\". The function should categorize participants into three categories based on their finishing time: - \\"fast\\" if the time is less than or equal to 5 minutes, - \\"average\\" if the time is greater than 5 but less than or equal to 10 minutes, - \\"slow\\" if the time is greater than 10 minutes. The function should return a dictionary with keys \\"fast\\", \\"average\\", and \\"slow\\". Each key should have a list of names of participants who fall into that category, sorted alphabetically. For example: ```python participants = [ {\\"name\\": \\"Alice\\", \\"time\\": 4}, {\\"name\\": \\"Bob\\", \\"time\\": 7}, {\\"name\\": \\"Charlie\\", \\"time\\": 10}, {\\"name\\": \\"David\\", \\"time\\": 3}, {\\"name\\": \\"Eve\\", \\"time\\": 11} ] categorizeParticipants(participants) ``` Output: ```python { \\"fast\\": [\\"Alice\\", \\"David\\"], \\"average\\": [\\"Bob\\", \\"Charlie\\"], \\"slow\\": [\\"Eve\\"] } ```","solution":"def categorizeParticipants(participants): Categorize participants into \'fast\', \'average\', and \'slow\' based on their finishing time. Parameters: participants (list): A list of dictionaries where each dictionary has keys \\"name\\" and \\"time\\". Returns: dict: A dictionary with keys \\"fast\\", \\"average\\", and \\"slow\\", each containing a list of names. categories = { \\"fast\\": [], \\"average\\": [], \\"slow\\": [] } for participant in participants: name = participant[\\"name\\"] time = participant[\\"time\\"] if time <= 5: categories[\\"fast\\"].append(name) elif time <= 10: categories[\\"average\\"].append(name) else: categories[\\"slow\\"].append(name) # Sort the names alphabetically in each category for key in categories: categories[key].sort() return categories"},{"question":"A company requires a system to determine the potential bonus an employee could receive based on their performance review scores. Each employee’s performance review includes multiple scores, and the bonus is calculated based on the average score. The bonus rules are as follows: - If the average score is 90 or above: 1,000 - If the average score is 75 to 89: 500 - If the average score is 60 to 74: 200 - If the average score is below 60: No bonus You are tasked with writing a Python function that takes a list of integers representing the performance review scores of an employee and returns the amount of bonus they are eligible for. # Input/Output - **Input:** A list of integers, where each integer is a performance review score (0 to 100). The list will contain at least one element. - **Output:** An integer representing the bonus amount in dollars. # Examples: ``` calculate_bonus([85, 90, 78, 92, 88]) --> 500 calculate_bonus([60, 72, 68, 75]) --> 200 calculate_bonus([45, 55, 60]) --> 0 calculate_bonus([95, 97, 98, 100]) --> 1000 ``` # Constraints: - The list will contain at least 1 and at most 50 integers. - Each score will be between 0 and 100 (inclusive). Write the function `calculate_bonus(scores)` that returns the appropriate bonus amount based on the input list of scores.","solution":"def calculate_bonus(scores): Calculates the bonus amount based on the average score. Args: scores (list): A list of integers representing the performance review scores of an employee. Returns: int: The bonus amount in dollars. average_score = sum(scores) / len(scores) if average_score >= 90: return 1000 elif average_score >= 75: return 500 elif average_score >= 60: return 200 else: return 0"},{"question":"A treasure hunting expedition has discovered an ancient numerical code system inscribed on an old scroll. The code system is used to identify the coordinates of hidden treasures in a grid. The system patterns are based on a unique rotation and mirroring transformation. Your task is to decode the given coordinates to determine the actual position in the grid after applying these transformations. The grid is represented as a 5x5 matrix with indices starting from 0. The coordinates are encoded as two integer pairs (x1, y1) and (x2, y2) where (x1, y1) is the top-left corner of the section of the grid that needs to be transformed, and (x2, y2) is the bottom-right corner of that section. The transformations to be applied are: 1. Rotate the section 90 degrees clockwise. 2. Mirror the section horizontally. For example, if the grid is: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` And the coordinates are (1, 1) and (3, 3), the sub-grid: ``` 7 8 9 12 13 14 17 18 19 ``` After rotating 90 degrees clockwise, becomes: ``` 17 12 7 18 13 8 19 14 9 ``` And after mirroring horizontally, becomes: ``` 19 14 9 18 13 8 17 12 7 ``` You need to write a function `decode_coordinates` that takes the two pairs of coordinates and returns the transformed sub-grid after applying the specified transformations. The function signature is: ```python def decode_coordinates(grid: List[List[int]], x1: int, y1: int, x2: int, y2: int) -> List[List[int]]: # your code here ``` The function should transform only the specified sub-grid and return the final sub-grid after applying the transformations. Assume the inputs are always valid and within bounds of the 5x5 grid.","solution":"from typing import List def decode_coordinates(grid: List[List[int]], x1: int, y1: int, x2: int, y2: int) -> List[List[int]]: # Extract the sub-grid subgrid = [row[y1:y2+1] for row in grid[x1:x2+1]] # Rotate the sub-grid 90 degrees clockwise rotated = list(zip(*subgrid[::-1])) # Mirror the sub-grid horizontally mirrored = [list(row) for row in rotated[::-1]] return mirrored"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to determine if there are any duplicate integers in the list. =====Input Format===== A single line containing space-separated integers. =====Constraints===== 2 <= len(list) <= 100 -10^3 <= integer in list <= 10^3 =====Output Format===== Print True if any integer appears at least twice in the list. Otherwise, print False. =====Function Signature===== ```python def has_duplicates(lst: list) -> bool: pass ``` =====Example===== Input: 10 20 30 40 10 Output: True Input: 5 6 7 8 9 Output: False","solution":"def has_duplicates(lst: list) -> bool: Function to determine if there are any duplicate integers in the list. Parameters: lst (list): A list of integers. Returns: bool: True if any integer appears at least twice in the list, False otherwise. seen = set() for num in lst: if num in seen: return True seen.add(num) return False"},{"question":"You are given a list of strings representing names of people attending an event. A name is considered a duplicate if it appears more than once in the list, regardless of case (e.g., \\"Alice\\" and \\"alice\\" should be considered the same name). Write a function that takes this list and returns a new list containing only the names that appear more than once in the original list. The returned list should be sorted in ascending alphabetical order and should not contain any duplicates. For example, given the input list ```python [\\"Alice\\", \\"Bob\\", \\"alice\\", \\"Eve\\", \\"eve\\", \\"Charlie\\"] ``` the function should return ```python [\\"alice\\", \\"eve\\"] ``` Assume the list contains at most 1000 names, and each name consists of alphabetic characters only.","solution":"def find_duplicate_names(names): Returns a sorted list of names that appear more than once in the original list, case insensitive and without duplication. if not names: return [] name_count = {} for name in names: normalized_name = name.lower() if normalized_name in name_count: name_count[normalized_name] += 1 else: name_count[normalized_name] = 1 duplicates = [name for name, count in name_count.items() if count > 1] return sorted(duplicates)"},{"question":"# Task Given a 2D grid of characters and a word, write a function that checks whether the word can be constructed from sequentially adjacent cells in the grid, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. # Example For the grid ``` [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] ``` and word `ABCCED`, the function should return `true`. For the grid ``` [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] ``` and word `SEE`, the function should return `true`. For the grid ``` [[\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\']] ``` and word `ABCB`, the function should return `false`. # Input/Output - `[input]` 2D character grid The grid. Each element is a list of characters where 1 <= number of rows <= 6 and 1 <= number of columns <= 6. - `[input]` string word The word to be found in the grid. 1 <= word length <= 12 - `[output]` boolean value Return `true` if the word is found in the grid, otherwise `false`.","solution":"def exist(board, word): if not board or not word: return False rows, cols = len(board), len(board[0]) def dfs(x, y, index): if index == len(word): return True if x < 0 or x >= rows or y < 0 or y >= cols or board[x][y] != word[index]: return False temp = board[x][y] board[x][y] = \\"#\\" found = (dfs(x-1, y, index+1) or dfs(x+1, y, index+1) or dfs(x, y-1, index+1) or dfs(x, y+1, index+1)) board[x][y] = temp return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False"},{"question":"As an adventurous software engineer, you have been hired by a transportation company to develop an algorithm to optimize fuel consumption for a fleet of delivery trucks. Each truck is assigned to deliver packages along a designated route, and the fuel efficiency of each segment of the route depends on various factors such as traffic, road conditions, and weather. Your task is to determine the minimum amount of fuel needed for a truck to complete its route. Formally, you are given the fuel consumption rating for M segments of a route. Each segment i is described by an integer fuel_i, which indicates the fuel consumption for that segment. The truck can start from any segment and must return to the starting segment after traveling through all segments exactly once, forming a closed loop. Input The first line contains an integer T, the number of test cases. Each test case contains two lines: - The first line contains a single integer M, the number of segments in the route. - The second line contains M space-separated integers, representing the fuel consumption rating for each segment of the route. Output For each test case, output a single line containing the minimum amount of fuel needed for the truck to complete its route. Example # Input 2 4 3 1 4 2 5 5 3 6 2 4 # Output 10 14 Constraints - 1 ≤ T ≤ 100 - 3 ≤ M ≤ 10^3 - 1 ≤ fuel_i ≤ 10^6","solution":"def minimum_fuel_needed(T, test_cases): results = [] for i in range(T): M, fuel_segments = test_cases[i] # since it\'s a closed loop and we need to pass through all segments, # the minimum fuel needed is simply the sum of all the fuel consumption values. total_fuel = sum(fuel_segments) results.append(total_fuel) return results"},{"question":"Mrs. UrbanGardener has a massive garden with a variety of plants. She loves to experiment with different watering schedules to find out how her plants react. Each plant requires a specific number of watering sessions to reach full bloom. Based on the watering data, she keeps track of how many days it takes for each plant to bloom. Task Can you help Mrs. UrbanGardener optimize her watering schedule to ensure all plants bloom? She needs an algorithm that will return the earliest day on which all plants will be in full bloom. Input - `days` (List of integers): Each element represents the number of days required by a plant to bloom. Output Return an integer representing the earliest day all plants will bloom. Examples ```python watering_schedule([3, 1, 2, 4]) # => 4 watering_schedule([5, 9, 2, 8]) # => 9 watering_schedule([7, 3, 5, 1]) # => 7 ```","solution":"def watering_schedule(days): Returns the earliest day on which all plants will be in full bloom. Parameters: days (List[int]): Each element represents the number of days required by a plant to bloom. Returns: int: The earliest day on which all plants will bloom. if not days: return 0 return max(days)"},{"question":"Suppose you are given a long string representing a sequence composed of several sections, each represented as an integer followed by an uppercase English letter. Each section length (integer) denotes how many occurrences of the letter follow in the sequence. Write a function that takes this encoded string as input, and returns the decoded string. # Example: ```python def decode_sequence(s: str) -> str: # Your implementation here ``` Input: \\"3A4B2C5D\\" Output: \\"AAABBBBCCDDDDD\\" Explanation: In the input \\"3A4B2C5D\\": - \\"3A\\" means the letter \'A\' appears 3 times: \\"AAA\\" - \\"4B\\" means the letter \'B\' appears 4 times: \\"BBBB\\" - \\"2C\\" means the letter \'C\' appears 2 times: \\"CC\\" - \\"5D\\" means the letter \'D\' appears 5 times: \\"DDDDD\\" When combined together, the final string is \\"AAABBBBCCDDDDD\\".","solution":"def decode_sequence(s: str) -> str: Decodes a string where sections of digits followed by letters are transformed into repeated sequences of the corresponding letter. Parameters: s (str): Encoded input string Returns: str: Decoded output string import re # Find all matches of groups: digits followed by a single uppercase letter matches = re.findall(r\'(d+)([A-Z])\', s) return \'\'.join(int(num) * letter for num, letter in matches)"},{"question":"You are given a string consisting of lowercase English letters and an integer k. You need to find the minimum length of the alphabetically ordered string that can be obtained by deleting exactly k characters from the given string. To solve this problem, you can repeatedly select the k+1-th smallest character from each prefix of length n-i, where n is the length of the string and i is the number of already deleted characters. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the length of the given string. The second line contains the string of length n consisting of lowercase English letters. The third line contains a single integer k (0 ≤ k < n) — the number of characters that must be deleted. -----Output----- Print a single line containing the minimum possible length of the lexicographically smallest string obtained by deleting exactly k characters from the original string. -----Examples----- Input 7 abcdefg 3 Output abcd Input 10 becefghijk 2 Output bcefghjk Input 5 abcde 1 Output abcd","solution":"def min_lex_order(n, s, k): Returns the minimum length of the lexicographically ordered string after deleting exactly k characters from the input string s. result = [] for char in s: while k and result and result[-1] > char: result.pop() k -= 1 result.append(char) return \'\'.join(result[:n - k])"},{"question":"=====Problem Statement===== You are given a list of integers. Each integer appears an even number of times except for one integer which appears an odd number of times. Your task is to identify and return that integer. =====Constraints===== 1 ≤ list size ≤ 10^5 Each integer in the list is between -10^9 and 10^9. =====Input Format===== - The input contains a single line with space-separated integers. =====Output Format===== - Output a single integer which appears an odd number of times in the list. =====Sample Input===== 1 2 3 2 3 1 4 =====Sample Output===== 4","solution":"def find_odd_occurrence(nums): Returns the integer that appears an odd number of times in the list. result = 0 for num in nums: result ^= num return result # Sample input for the function input_data = [1, 2, 3, 2, 3, 1, 4] print(find_odd_occurrence(input_data)) # Output should be 4"},{"question":"Palindrome Rearrangement Checker A palindrome is a string that reads the same forward and backward. For instance, \\"racecar\\" and \\"level\\" are palindromes. Write a function `can_rearrange_to_palindrome` that checks if the characters of a given string can be rearranged to form a palindrome. The function should return `True` if it\'s possible and `False` otherwise. For a string to be rearranged into a palindrome: - It must have at most one character with an odd frequency count (for odd-length palindromes). - All characters must have even frequency counts (for even-length palindromes). For example: ``` can_rearrange_to_palindrome(\\"racecar\\") # => True can_rearrange_to_palindrome(\\"aabb\\") # => True can_rearrange_to_palindrome(\\"abc\\") # => False can_rearrange_to_palindrome(\\"aabbcc\\") # => True can_rearrange_to_palindrome(\\"aaabbb\\") # => False ``` Write the function `can_rearrange_to_palindrome` which takes in a string and returns a boolean indicating whether the string\'s characters can be rearranged to form a palindrome.","solution":"def can_rearrange_to_palindrome(s): Check if the characters of the string can be rearranged to form a palindrome. :param s: Input string :return: Boolean indicating if the string\'s characters can be rearranged to form a palindrome from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a string s consisting of lowercase letters. You can perform the following operation any number of times: - Choose any character in the string and remove all its consecutive occurrences (i.e., remove a character and any more occurrences of the same character that are immediately next to it). After performing the above operation, you have to return the shortest possible length of the string that can be achieved. -----Input:----- - The first line will contain an integer T representing the number of test cases. The next T lines each contain a string s. -----Output:----- For each test case, output the minimum possible length of the string after performing the above operations. -----Constraints----- - 1 leq T leq 1000 - 1 leq length of string s leq 100 s contains only lowercase letters. -----Sample Input:----- 3 aabbcc abc aaaaa -----Sample Output:----- 0 3 0 -----EXPLANATION:----- - In the first case, you can remove all \\"a\\", \\"b\\", and \\"c\\" in sequence, resulting in an empty string. - In the second case, no consecutive removal can remove any characters completely, so the result is the length of the string itself. - In the third case, removing all \\"a\\" results in an empty string.","solution":"def min_length_after_removals(strings): Returns the minimum possible length of the string after removing all consecutive occurrences of any character. results = [] for s in strings: if any(s[i] == s[i+1] for i in range(len(s)-1)): results.append(0) else: results.append(len(s)) return results def process_input(num_cases, list_of_strings): return min_length_after_removals(list_of_strings)"},{"question":"You are given a list of integers. Write a function `find_third_largest(lst)` that returns the third largest unique number in the list. If the list does not have at least three unique numbers, the function should return `None`. Examples: ```python find_third_largest([4, 1, 7, 7, 3, 4, 2]) == 3 find_third_largest([10, 5, 9, 10, 5, 8]) == 8 find_third_largest([1, 2]) == None find_third_largest([3, 3, 3, 3]) == None ``` Explanation: - In the first example, the unique numbers are `[1, 2, 3, 4, 7]`. The third largest number is `3`. - In the second example, the unique numbers are `[5, 8, 9, 10]`. The third largest number is `8`. - In the third example, the list does not have at least three unique numbers, so the function returns `None`. - In the fourth example, all numbers are the same, thus no three unique numbers exist, so the function returns `None`.","solution":"def find_third_largest(lst): Returns the third largest unique number in the list. If the list does not have at least three unique numbers, returns None. unique_numbers = list(set(lst)) if len(unique_numbers) < 3: return None unique_numbers.sort(reverse=True) return unique_numbers[2]"},{"question":"Given a string containing alphabets and digits, sort the string so that all letters come before any digits and within the letters and digits groups, maintain their relative order from the original string. Eg: `\\"a1b2c3\\"` should be sorted as `\\"abc123\\"` Examples: ``` Input: \\"a1b2c3\\" ==> Output: \\"abc123\\" Input: \\"3a2b1c\\" ==> Output: \\"abc321\\" Input: \\"abc123\\" ==> Output: \\"abc123\\" Input: \\"4g3h2i1\\" ==> Output: \\"ghi4321\\" Input: \\"z2y1x0\\" ==> Output: \\"zyx210\\" ``` The input string will contain only letters and digits, and it will be non-empty.","solution":"def alphabetize_then_digits(s: str) -> str: Sort the string such that all letters come before any digits, while maintaining the relative order of letters and digits from the original string. :param s: string containing letters and digits :return: sorted string with letters first followed by digits letters = [char for char in s if char.isalpha()] digits = [char for char in s if char.isdigit()] return \'\'.join(letters + digits)"},{"question":"Aditi loves playing with prime numbers. One day, she came up with an intriguing puzzle involving prime numbers and arrays. She has an array of integers and wants to find the sum of all prime numbers in the array. However, to make it more interesting, she performs this operation multiple times with different arrays and needs an efficient way to get the results quickly. Write a program to help Aditi find the sum of prime numbers in each array she provides. -----Input----- - The first line contains an integer T representing the number of test cases. - For each test case: - The first line contains an integer N representing the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output----- - For each test case, output a single line containing the sum of all prime numbers in the given array. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^6 -----Subtasks----- -----Subtask #1 (20 points)----- - 1 ≤ N ≤ 1000 -----Subtask #2 (80 points)----- - Original constraints -----Example----- Input: 3 5 2 3 4 5 6 3 8 10 12 4 7 11 13 17 Output: 10 0 48 -----Explanation----- In the first test case, the prime numbers in the array are 2, 3, and 5. Their sum is 10. In the second test case, there are no prime numbers in the array, so the sum is 0. In the third test case, the prime numbers in the array are 7, 11, 13, and 17. Their sum is 48.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes(arr): Returns the sum of all prime numbers in the array arr. return sum(x for x in arr if is_prime(x)) def solve(test_cases): For each array provided in the test_cases, returns a list of sums of prime numbers. results = [] for arr in test_cases: results.append(sum_of_primes(arr)) return results"},{"question":"Monica loves arranging and reorganizing her bookshelf. She has a unique way of sorting her books based on their ISBNs. An ISBN is a 13-digit integer representing each book uniquely. For organizational purposes, Monica wants to sort all the books that she has on the shelf in lexicographical order, but there\'s a catch: she can only swap any pair of books once. Now, she is curious to know the smallest lexicographical order she can achieve by making at most one such swap. If no swap is necessary, the original order should be returned. Help Monica find the best possible arrangement of books for her given list of books. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of books on the shelf. The next line contains n space-separated 13-digit integers (each representing an ISBN) which describe the books currently on the shelf, in their current order. -----Output----- Print the smallest lexicographical order of ISBNs possible with at most one swap. If no swap can improve the order, print the original order of books. -----Examples----- Input 3 9780306406157 9780140449136 9780199208316 Output 9780140449136 9780306406157 9780199208316 Input 4 9780807281918 9780807281919 9780807281920 9780807281921 Output 9780807281918 9780807281919 9780807281920 9780807281921 -----Note----- Lexicographical order in this context means dictionary order, where strings are ordered based on the alphabetical order of their component characters. For example, \\"9780306406157\\" comes before \\"9780807281918\\" because \'3\' < \'8\' at the first differing position. The solution should handle swapping pairs optimally to achieve the smallest arrangement possible while respecting the constraints.","solution":"def smallest_lexicographical_order(n, books): Returns the smallest lexicographical order possible by making at most one swap. Parameters: n (int): The number of books. books (list of str): A list of n 13-digit ISBNs. Returns: list of str: The best sorted order. # Find the lexicographical ordered list sorted_books = sorted(books) # If the list is already sorted, no swap needed. if sorted_books == books: return books # Find the first differing point for i in range(n): # Compare the actual list with the sorted list if books[i] != sorted_books[i]: break minimum_list = books[:] # try to swap the i-th element with all further elements to get smallest order for j in range(i + 1, n): new_books = books[:i] + [books[j]] + books[i + 1:j] + [books[i]] + books[j + 1:] if new_books < minimum_list: minimum_list = new_books return minimum_list"},{"question":"Create a function that takes a list of strings and an integer k as arguments, and returns a list of strings with a sliding window of length k concatenated together. The returned list should contain the k-length sliding window of string concatenations from the initial list. Each element in the result should be one concatenated string from k consecutive elements in the original list. If the length of the list is less than k, return an empty list. Example: ``` input_list = [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"] k = 3 output = [\\"abc\\", \\"bcd\\", \\"cde\\"] input_list = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] k = 2 output = [\\"applebanana\\", \\"bananacherry\\", \\"cherrydate\\"] input_list = [\\"a\\", \\"b\\"] k = 3 output = [] ``` Constraints: - The list length will be between 0 and 1000. - Each string in the list will have a length between 1 and 100. - The integer k will be between 1 and 1000.","solution":"def sliding_window_concatenate(input_list, k): Takes a list of strings and an integer k, and returns a list with a sliding window of length k concatenated together. If the input list length is less than k, return an empty list. if len(input_list) < k: return [] result = [] for i in range(len(input_list) - k + 1): window_concatenation = \'\'.join(input_list[i:i+k]) result.append(window_concatenation) return result"},{"question":"Given a sorted array of distinct integers and a target value, determine if there is a pair in the array whose sum equals the target value. You may assume that each input would have exactly one solution. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: [2, 7] Explanation: Because 2 + 7 = 9 Example 2: Input: arr = [1, 2, 3, 4, 5, 6, 7], target = 10 Output: [3, 7] Explanation: Because 3 + 7 = 10 Example 3: Input: arr = [1, 2, 3, 4, 5], target = 6 Output: [1, 5] Explanation: Because 1 + 5 = 6","solution":"def find_pair_with_sum(arr, target): Given a sorted array of distinct integers and a target value, determine if there is a pair in the array whose sum equals the target value. left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return [arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return None # Since we assume always one solution, this line is never reached."},{"question":"A sequence of numbers is called a zigzag sequence if the differences between successive numbers strictly alternate between positive and negative. In other words, for a sequence to be zigzag, each element must be either greater than both its neighbors or less than both its neighbors. Given a sequence of integers, determine the length of the longest subsequence that is a zigzag sequence. Examples: ``` [1, 7, 4, 9, 2, 5] => 6 [1, 4, 7, 2, 5] => 4 [1, 2, 3, 4, 5, 6, 7, 8] => 2 ``` Write a function `longest_zigzag_subsequence` that takes a list of integers and returns the length of the longest subsequence that is a zigzag.","solution":"def longest_zigzag_subsequence(arr): if not arr: return 0 if len(arr) == 1: return 1 up = [1] * len(arr) down = [1] * len(arr) for i in range(1, len(arr)): for j in range(0, i): if arr[i] > arr[j]: up[i] = max(up[i], down[j] + 1) elif arr[i] < arr[j]: down[i] = max(down[i], up[j] + 1) return max(up[-1], down[-1], max(up), max(down))"},{"question":"Write a function to parse a string containing an arithmetic expression and return the result of the calculation. The function should support the four basic operations: addition, subtraction, multiplication, and division. The input may consist of positive and negative integers as well as the four operators. Parentheses may also be used to specify operation precedence. input: a string containing a valid arithmetic expression output: the result of the arithmetic evaluation as an integer or a float Sample: ``` calculate(\\"3 + 5\\") -> 8 calculate(\\"10 + 2 * 6\\") -> 22 calculate(\\"100 * 2 + 12\\") -> 212 calculate(\\"100 * ( 2 + 12 )\\") -> 1400 calculate(\\"100 * ( 2 + 12 ) / 14\\") -> 100.0 ``` Note: 1) Division should return a float if the result is not an integer. 2) Whitespace characters may be present in the input string and should be ignored. 3) Input expression will be well-formed (no need to handle invalid input).","solution":"def calculate(expression): Evaluates a string containing an arithmetic expression and returns the result. Supports +, -, *, / operations and respects parentheses precedence. import re import operator # Dictionary to map operators to corresponding functions ops = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv } def evaluate(tokens): stack = [] num = 0 sign = \'+\' i = 0 while i < len(tokens): token = tokens[i] if token.isdigit(): num = int(token) if token == \'(\': j = i balance = 0 while i < len(tokens): if tokens[i] == \'(\': balance += 1 if tokens[i] == \')\': balance -= 1 if balance == 0: break i += 1 num = evaluate(tokens[j + 1:i]) if token in ops or i == len(tokens) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(stack.pop() / num) sign = token num = 0 i += 1 return sum(stack) # Remove spaces and split token using regex tokens = re.findall(r\'d+|[-+*/()]\', expression.replace(\' \', \'\')) return evaluate(tokens)"},{"question":"Antonia has recently learned about arrays and wanted to showcase her coding skills by solving a sequence of operations involving arrays. She starts with an empty array and can perform the following types of operations: - `INSERT v` — insert the integer `v` (1 ≤ v ≤ 10^9) at the end of the array. - `DELETE` — delete the last element of the array. It\'s guaranteed that this operation will be performed only when the array is non-empty. - `SUM k` — calculate the sum of the last `k` elements of the array. It\'s guaranteed that `k` is always less than or equal to the current size of the array. Given the sequence of operations, your task is to output the results of every `SUM` query. # Input The first line of the input contains an integer `q` (1 ≤ q ≤ 100 000) — the number of operations Antonia will perform. Each of the next `q` lines contains a description of one of the operations in the given format. # Output For each `SUM` operation, print the sum of the last `k` elements of the array in a new line. # Examples **Input:** ``` 7 INSERT 5 INSERT 3 SUM 2 DELETE INSERT 10 INSERT 7 SUM 3 ``` **Output:** ``` 8 18 ``` **Note:** - The third operation, `SUM 2`, results in `5 + 3 = 8`. - After the `DELETE` operation, the array becomes `[5]`. - The final array after all operations is `[5, 10, 7]`, so the `SUM 3` operation results in `5 + 10 + 7 = 22`.","solution":"def process_operations(operations): Processes a sequence of operations on an initially empty array and returns the results of SUM queries. Args: operations (list): A list of operations represented as strings. Returns: list: A list of integers representing the results of SUM queries. array = [] results = [] for operation in operations: parts = operation.split() if parts[0] == \'INSERT\': array.append(int(parts[1])) elif parts[0] == \'DELETE\': if array: array.pop() elif parts[0] == \'SUM\': k = int(parts[1]) results.append(sum(array[-k:])) return results"},{"question":"Write a function that takes a string as input and returns the longest contiguous substring that contains at most 2 distinct characters. If there are multiple substrings with the same maximum length, return the first one that appears in the string. For example: ``` Input: \\"abcbbbbcccbdddadacb\\" Output: \\"bcbbbbcccb\\" ``` Assume that the input string only contains lowercase English letters.","solution":"def longest_substring_with_two_distinct_chars(s): Returns the longest contiguous substring that contains at most 2 distinct characters. If there are multiple substrings with the same maximum length, return the first one that appears in the string. if not s: return \\"\\" left = 0 max_length = 0 max_substring = \\"\\" char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_length: max_length = right - left + 1 max_substring = s[left:right+1] return max_substring"},{"question":"You are given a string of binary digits (0s and 1s) and your task is to find the length of the longest contiguous subsequence of the string where the binary digits alternate. A binary sequence alternates if its characters switch between `0` and `1` without repeating characters consecutively. Implement a function `longest_alternating_subsequence_length(binary_string: str) -> int` to calculate the longest length of such a subsequence. # Example ```python binary_string = \\"110100110\\" print(longest_alternating_subsequence_length(binary_string)) # Output: 4 ``` Explanation: The longest alternating subsequences are \\"1010\\", \\"0101\\", etc., each of which is of length 4. # Constraints - The input string length will not exceed 10^5 characters. - The input string will only contain \'0\'s and \'1\'s. # Additional Notes - Ensure that your solution efficiently handles the upper constraint on string length. - Consider edge cases such as a string with all identical digits. For example, \\"000000\\" should return 1 because the longest subsequence would be any single `0`.","solution":"def longest_alternating_subsequence_length(binary_string: str) -> int: Finds the length of the longest contiguous subsequence where the binary digits alternate. if not binary_string: return 0 max_length = 1 current_length = 1 for i in range(1, len(binary_string)): if binary_string[i] != binary_string[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"# Summary: Write a function that determines whether a given string can be rearranged to form a palindrome. # Description: A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to write a function, `can_form_palindrome(s)`, that takes a string `s`, and returns `True` if it is possible to rearrange the characters in `s` to form a palindrome, and `False` otherwise. The function should handle strings where: - 1 <= len(s) <= 100 - The string `s` consists only of lowercase English letters. Examples: `can_form_palindrome(\\"racecar\\")` should return `True`: ``` The characters can be rearranged to \\"racecar\\", which is a palindrome. ``` `can_form_palindrome(\\"aabbcc\\")` should return `True`: ``` The characters can be rearranged to \\"abcabc\\", which is a palindrome. ``` `can_form_palindrome(\\"abcde\\")` should return `False`: ``` No rearrangement of characters can form a palindrome. ``` `can_form_palindrome(\\"aabbc\\")` should return `True`: ``` The characters can be rearranged to \\"abcba\\", which is a palindrome. ```","solution":"def can_form_palindrome(s): Determines whether a given string can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase English letters. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the input string char_count = Counter(s) # Count characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # At most one character with an odd count is allowed for it to be a possible palindrome arrangement return odd_count <= 1"},{"question":"Write a function `longest_common_substring` that takes two strings as input and returns the length of the longest substring that is common to both strings. A substring is defined as a contiguous sequence of characters within a string. For example, for the strings `abcdef` and `zabcf`, the longest common substring is `abc`, which has a length of 3. The function signature should be: ```python def longest_common_substring(s1: str, s2: str) -> int: # your code here ``` **Example:** ```python longest_common_substring(\\"abcdef\\", \\"zabcf\\") == 3 longest_common_substring(\\"12345\\", \\"54321\\") == 1 longest_common_substring(\\"foo\\", \\"bar\\") == 0 ``` **Constraints:** - The input strings will only contain lowercase English letters. - The length of each string will not exceed 1000 characters. - If there are multiple substrings of the same maximum length, return the length of any of them.","solution":"def longest_common_substring(s1: str, s2: str) -> int: Returns the length of the longest common substring between s1 and s2. m, n = len(s1), len(s2) # Initialize the DP table with zeros dp = [[0] * (n + 1) for _ in range(m + 1)] longest = 0 # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest = max(longest, dp[i][j]) return longest"},{"question":"Consider two strings `s1` and `s2` defined as follows: 1. `s1` contains only lowercase characters. 2. `s2` contains a mix of lowercase, uppercase characters and digits. Write a function `match_case_insensitive(s1, s2)` that performs the following tasks: 1. Checks whether the string `s1` can be found in `s2` irrespective of the case. 2. If `s1` is found in `s2`, return the starting index of the first occurrence. 3. If `s1` is not found in `s2`, return `-1`. # Example: ```python match_case_insensitive(\'abc\', \'xyzABCdef\') == 3 match_case_insensitive(\'test\', \'ThisIsATest\') == 7 match_case_insensitive(\'hello\', \'worldHELLO\') == 5 match_case_insensitive(\'not\', \'presentNOHere\') == -1 ``` # Constraints: - The length of `s1` will be between 1 and 100 (inclusive). - The length of `s2` will be between 1 and 1000 (inclusive). - The function should be case insensitive and handle both uppercase and lowercase characters as equivalent for matching purposes.","solution":"def match_case_insensitive(s1, s2): Checks whether s1 can be found in s2 irrespective of the case. Returns the starting index of the first occurrence if found, otherwise -1. s1_lower = s1.lower() s2_lower = s2.lower() index = s2_lower.find(s1_lower) return index"},{"question":"Write a function to validate a string of braces. The function takes a single string as its parameter and returns `True` if the string is valid, and `False` if it\'s not. A string is considered valid if all types of braces - \\"()\\", \\"{}\\", and \\"[]\\" - are closed correctly and nested properly within each other. Assumptions: * The input string will only contain the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. * An empty string is considered valid. Examples: ```python is_valid_braces(\\"()\\") ==> returns True is_valid_braces(\\"([{}])\\") ==> returns True is_valid_braces(\\"(}\\") ==> returns False is_valid_braces(\\"[(])\\") ==> returns False is_valid_braces(\\"[({})](]\\") ==> returns False ```","solution":"def is_valid_braces(string): Validates if a string of braces is valid. Parameters: string (str): The input string containing braces Returns: bool: True if the string is valid, False otherwise stack = [] brace_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in string: if char in brace_map: top_element = stack.pop() if stack else \'#\' if brace_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given the task of breaking a code that can unlock a secret door. The code consists of a sequence of valid parentheses. A valid parentheses sequence is defined as follows: - An empty sequence is valid. - If \\"P\\" is a valid sequence, then \\"(\\" + P + \\")\\" is also a valid sequence. - If \\"P\\" and \\"Q\\" are both valid sequences, then \\"P\\" + \\"Q\\" is a valid sequence as well. Your job is to write a function that, given a string containing only the characters \'(\' and \')\', determines whether the sequence is a valid parentheses sequence and returns `True` or `False` accordingly. You need to consider all possible nested sequences and concatenated sequences. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. T test cases follow. Each line of the next T lines contains a string S with (1 ≤ |S| ≤ 100), the sequence of parentheses to analyze. -----Output----- For each test case, output a single line containing `True` if the given parentheses sequence is valid, otherwise `False`. -----Example----- Input: 3 () (()()) (())(() Output: True True False -----Explanation----- In the first test case, the sequence `()` is a simple valid sequence. In the second test case, the sequence `(()())` can be broken down into `(()())`, which is valid. In the third test case, the sequence `(())(()` is invalid because the parentheses are not balanced correctly.","solution":"def is_valid_parentheses_sequence(S): Given a string S containing only the characters \'(\' and \')\', determines whether the sequence is a valid parentheses sequence. Parameters: S (str): The string of parentheses to be checked. Returns: bool: Returns True if the sequence is valid, otherwise False. stack = [] for char in S: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0 def check_parentheses_sequences(test_cases): Given a list of test cases containing strings of parentheses, determines whether each sequence is a valid parentheses sequence. Parameters: test_cases (list): A list of strings, each string is a test case. Returns: list: A list of boolean values, each corresponds to whether the sequence in the test case is valid. results = [] for case in test_cases: results.append(is_valid_parentheses_sequence(case)) return results"},{"question":"Given an array of strings `words` and a width `k`, format the text such that each line has exactly `k` characters and is fully justified (left and right justified). You should pack your words in a greedy approach; that is, pack as many words as possible in each line. Add extra spaces between words to ensure each line has exactly `k` characters. Here are the rules for padding: 1. If you can only fit one word in a line, pad the end of the word with spaces until the line has `k` characters. 2. The extra spaces between words should be distributed as evenly as possible from left to right. 3. If the spaces between words do not divide evenly, distribute the extra spaces starting with the leftmost spaces. Note: - The input array `words` contains strings of words (each word contains only non-space characters). - Each word is guaranteed not to exceed `k` in length. Return a list of strings representing the full justification of text. Example 1: Input: words = [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"text\\", \\"justification.\\"], k = 16 Output: [ \\"This is an\\", \\"example of text\\", \\"justification. \\" ] Example 2: Input: words = [\\"What\\",\\"must\\",\\"be\\",\\"acknowledgment\\",\\"shall\\",\\"be\\"], k = 16 Output: [ \\"What must be\\", \\"acknowledgment \\", \\"shall be \\" ] Example 3: Input: words = [\\"Science\\",\\"is\\",\\"what\\",\\"we\\",\\"understand\\",\\"well\\",\\"enough\\",\\"to\\",\\"explain\\",\\"to\\",\\"a\\",\\"computer.\\",\\"Art\\",\\"is\\",\\"everything\\",\\"else\\",\\"we\\",\\"do\\"], k = 20 Output: [ \\"Science is what we\\", \\"understand well\\", \\"enough to explain to\\", \\"a computer. Art is\\", \\"everything else we\\", \\"do \\" ]","solution":"def full_justify(words, k): def justify_line(line_words, max_width, is_last_line=False): if is_last_line or len(line_words) == 1: return \' \'.join(line_words).ljust(max_width) n_spaces = max_width - sum(len(word) for word in line_words) n_slots = len(line_words) - 1 spaces = [n_spaces // n_slots] * n_slots for i in range(n_spaces % n_slots): spaces[i] += 1 justified_line = \'\' for word, space in zip(line_words, spaces): justified_line += word + \' \' * space justified_line += line_words[-1] return justified_line result = [] line_words = [] line_length = 0 for word in words: if line_length + len(line_words) + len(word) > k: result.append(justify_line(line_words, k)) line_words = [] line_length = 0 line_words.append(word) line_length += len(word) # Handle the last line if line_words: result.append(justify_line(line_words, k, is_last_line=True)) return result"},{"question":"Write a function is_prime that checks if a given positive integer n is a prime number or not. A number is prime if it is greater than 1 and has no divisors other than 1 and itself. The function should return True if the number is prime, and False otherwise.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Ensure the function performs the prime-checking efficiently for large lists.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [number for number in numbers if is_prime(number)]"},{"question":"Write a function that receives a positive integer and returns a boolean indicating whether it\'s a prime number. A prime number is only divisible by 1 and itself and must be greater than 1. Examples: ```python is_prime(2) = True # 2 is a prime number is_prime(4) = False # 4 is divisible by 2, hence it\'s not a prime number ``` *Hint: You can stop checking for factors after the square root of the number.*","solution":"from math import isqrt def is_prime(n): Returns True if n is a prime number, otherwise False. A prime number is greater than 1 and has no positive divisors other than 1 and itself. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a function `find_duplicates` that takes a list of integers as input and returns a list of all the integers that appear more than once in the input list. The integers in the output list should be in the order that they first appeared in the input list. You can assume that the input list contains only integers. Examples: `find_duplicates([1, 2, 3, 4, 2, 5, 3, 6, 3])` should return `[2, 3]` `find_duplicates([1, 2, 3, 4, 5, 6])` should return `[]` `find_duplicates([1, 1, 2, 2, 3, 3, 3])` should return `[1, 2, 3]`","solution":"def find_duplicates(numbers): Returns a list of all the integers that appear more than once in the input list. The integers in the output list should be in the order that they first appeared in the input list. seen = set() duplicates = set() result = [] for number in numbers: if number in seen: if number not in duplicates: result.append(number) duplicates.add(number) else: seen.add(number) return result"},{"question":"A \\"Perfect Number\\" is a positive integer that is equal to the sum of its proper positive divisors, excluding the number itself. For example, 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. For a given number ```num```, write a function that returns a boolean (true if the number is a perfect number and false if it is not). Return \\"Not valid\\" if the input is not a positive integer. Examples: ``` is_perfect_number(6) => true is_perfect_number(28) => true is_perfect_number(5) => false is_perfect_number(\\"28\\") => \\"Not valid\\" is_perfect_number(-6) => \\"Not valid\\" ```","solution":"def is_perfect_number(num): Returns True if num is a perfect number, and False otherwise. Returns \\"Not valid\\" if the input num is not a positive integer. if not isinstance(num, int) or num <= 0: return \\"Not valid\\" divisors_sum = sum(i for i in range(1, num) if num % i == 0) return divisors_sum == num"},{"question":"We have an array of integers. We want to perform some operations on it. On each step, we can choose two adjacent elements and replace them with their sum. The goal is to perform a series of operations such that, at the end, only one element remains in the array and is as large as possible. Return the maximum possible value of the remaining element. -----Input----- The first line contains an integer n, the length of the array (1 ≤ n ≤ 10^5). The second line contains n integers, the elements of the array, separated by spaces (1 ≤ each element ≤ 10^4). -----Output----- Print the maximum possible value of the remaining element. -----Examples----- Input 3 1 2 3 Output 6 Input 5 1 1 1 1 1 Output 5 -----Note----- The first example: (1+2) 3 → 3 3 → 6. The second example: (1+1) 1 1 1 → 2 1 1 1 → (2+1) 1 1 → 3 1 1 → (3+1) 1 → 4 1 → 5.","solution":"def maximum_possible_remaining_element(arr): Returns the maximum possible value of the remaining element after performing the described operations on the array. return sum(arr)"},{"question":"Given a list of integers, your task is to implement a function that returns the list of all prime numbers present in the initial list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Ensure the function efficiently determines whether a number is prime before adding it to the result list. For example: ``` Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] Input: [15, 21, 22, 23, 25, 29] Output: [23, 29] Input: [1, 4, 6, 8, 10] Output: [] ```","solution":"def is_prime(n): \\"Check if a number is a prime number.\\" if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(nums): \\"Return a list of prime numbers from the given list of integers.\\" return [num for num in nums if is_prime(num)]"},{"question":"Description In this challenge, you need to determine the longest word in a given sentence. Your task is to write a function that takes a single string as an input and returns the longest word contained within the string. If there are multiple words with the same maximum length, return the one that appears first. Words are separated by spaces, and you may assume that the input string contains only alphabetic characters and spaces. Explanation Your function will be called `find_longest_word`/`findLongestWord`/`FindLongestWord` and it will receive a sentence as input. The function should return a string, which is the longest word in the input sentence. If the input string is empty, return an empty string. Example ```python find_longest_word(\\"The quick brown fox jumped over the lazy dog\\") // Returns \\"jumped\\" find_longest_word(\\"A journey of a thousand miles begins with a single step\\") // Returns \\"thousand\\" ```","solution":"def find_longest_word(sentence): Returns the longest word in the given sentence. If there are multiple words with the same maximum length, the first one is returned. If the input string is empty, an empty string is returned. if not sentence: return \\"\\" words = sentence.split() longest_word = max(words, key=len, default=\\"\\") return longest_word"},{"question":"Given a non-negative integer, calculate its digital persistence: the number of times you must replace the number with the sum of its digits until it becomes a single-digit number. For example, - For `987`, the process is `9 + 8 + 7 = 24`, then `2 + 4 = 6`, and the digital persistence is `2` because it took two iterations to reach a single-digit number. Write a function that takes a non-negative integer as input and returns its digital persistence.","solution":"def digital_persistence(n): Returns the digital persistence of a non-negative integer n. Digital persistence is the number of times you must replace the number with the sum of its digits until it becomes a single-digit number. if n < 10: return 0 def sum_of_digits(num): return sum(int(digit) for digit in str(num)) persistence = 0 while n >= 10: n = sum_of_digits(n) persistence += 1 return persistence"},{"question":"=====Function Descriptions===== concatenate The concatenate function joins a sequence of arrays along an existing axis. (a). Using concatenate to join two 1D arrays import numpy array1 = numpy.array([1, 2, 3]) array2 = numpy.array([4, 5, 6]) array3 = numpy.concatenate((array1, array2)) print(array3) #Output [1 2 3 4 5 6] (b). Using concatenate to join two 2D arrays along axis 0 import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5, 6]]) array3 = numpy.concatenate((array1, array2), axis=0) print(array3) #Output [[1 2] [3 4] [5 6]] (c). Using concatenate to join two 2D arrays along axis 1 import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5], [6]]) array3 = numpy.concatenate((array1, array2), axis=1) print(array3) #Output [[1 2 5] [3 4 6]] =====Problem Statement===== You are given two space separated lists of integers. Your task is to concatenate these lists together into a single NumPy array. =====Input Format===== Two separate lines of space separated integers, where each line represents a list. =====Output Format===== Print the concatenated NumPy array.","solution":"import numpy as np def concatenate_lists(list1, list2): Concatenates two space separated lists of integers into a single NumPy array. Parameters: list1 (str): A space separated string of integers. list2 (str): A space separated string of integers. Returns: np.ndarray: Concatenated NumPy array. array1 = np.array(list(map(int, list1.split())), dtype=int) array2 = np.array(list(map(int, list2.split())), dtype=int) return np.concatenate((array1, array2))"},{"question":"Given an array of integers where each element represents the height of a building, the width of each building being 1, find the maximum rectangular area that can be formed in the histogram. Example 1: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle has an area of 10 units with height 5 and width 2. Example 2: Input: heights = [2, 4] Output: 4 Explanation: The largest rectangle has an area of 4 units with height 4 and width 1. Note: The input array size is in the range of [1, 10000]. Each element in the heights array is a non-negative integer which won\'t exceed 10,000.","solution":"def largest_rectangle_area(heights): Finds the maximum rectangular area in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a string s consisting of multiple words separated by spaces, write a function `reverse_alternate_words(s)` that reverses every alternate word in the string starting from the second one. Words are defined as sequences of non-space characters. # Input - A single string s with words separated by spaces. # Output - A string with every alternate word reversed, preserving the original number of spaces between words. # Example ```python reverse_alternate_words(\\"Hello world this is a test\\") ``` Output: `\\"Hello dlrow this si a tset\\"` # Explanation: - The first word \\"Hello\\" remains unchanged. - The second word \\"world\\" is reversed to \\"dlrow\\". - The third word \\"this\\" remains unchanged. - The fourth word \\"is\\" is reversed to \\"si\\". - The fifth word \\"a\\" remains unchanged. - The sixth word \\"test\\" is reversed to \\"tset\\".","solution":"def reverse_alternate_words(s): Reverses every alternate word in the string s starting from the second one. Parameters: s (str): A string with words separated by spaces. Returns: str: A string with every alternate word reversed. words = s.split() for i in range(1, len(words), 2): words[i] = words[i][::-1] return \' \'.join(words)"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid is either empty or contains an obstacle. You are tasked with finding the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m), moving only up, down, left, or right. An empty cell is represented by a 0 and a cell with an obstacle is represented by a 1. If there is no path from the top-left to the bottom-right corner, return -1. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines each contain m integers (0 or 1) representing the grid. Cells with 0 are passable, and cells with 1 are obstacles. -----Output----- Print a single integer representing the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, print -1. -----Example----- Input 3 3 0 0 0 1 1 0 0 0 0 Output 4 -----Example----- Input 3 3 0 1 0 1 1 0 0 0 0 Output -1","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) # Directions for moving up, down, left, and right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: r, c, d = queue.popleft() # Check if we have reached the target cell if r == n - 1 and c == m - 1: return d # Explore the neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, d + 1)) # If we finished processing all nodes and didn\'t reach the end return -1 # Example usage grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] print(shortest_path(grid)) # Output: 4"},{"question":"# Task You are given a string `s` consisting of lowercase English letters. You can perform the following operation any number of times: choose a non-empty substring consisting of the same character and remove it. Determine the minimum number of operations required to make the string empty. # Input/Output `[input]` string `s` A non-empty string of lowercase English letters. `1 ≤ s.length ≤ 100` `[output]` an integer The minimum number of operations needed to make the string empty. # Example For `s = \\"aaabbb\\"`, the output should be `2`. One possible sequence of operations: remove `\\"aaa\\"` to get `\\"bbb\\"`, then remove `\\"bbb\\"`. For `s = \\"ababa\\"`, the output should be `5`. Each character will need to be removed one by one.","solution":"def min_operations_to_empty_string(s): Returns the minimum number of operations required to make the string empty. Each operation is a removal of a non-empty substring consisting of the same character. if not s: return 0 operations = 1 current_char = s[0] for char in s[1:]: if char != current_char: operations += 1 current_char = char return operations"},{"question":"Write a function that receives a list of integers and returns the highest product possible by multiplying any three distinct integers from the list. The function should be efficient with both time and space complexity in mind. # Example: Your input: [10, 3, 5, 6, 20] Possible products: - 10 * 3 * 5 = 150 - 10 * 3 * 6 = 180 - 10 * 3 * 20 = 600 - ... - and so on... Highest possible product: 1200 (10 * 6 * 20) # Additional Example: Your input: [-10, -10, 5, 2] Highest possible product: 500 (-10 * -10 * 5) Write a function that implements this logic.","solution":"def highest_product_of_three(nums): Returns the highest product possible by multiplying any three distinct integers from the list. Parameters: nums (list): List of integers. Returns: int: Highest product of any three distinct integers. if len(nums) < 3: raise ValueError(\\"The list must contain at least three integers\\") # Sort the list in ascending order nums.sort() # The maximum product can be from three largest values or two smallest values (negative) and the largest value max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"You are given a list of non-negative integers representing the value of coins in a line. The task is to collect the maximum amount of money while following these rules: you can pick either the first or the last coin from the remaining coins, and then the opponent removes one coin (either the first or last) from the remaining coins. The opponent picks optimally to minimize your total amount collected. Your objective is to create a function that returns the maximum possible amount of money you can collect. Example 1: Input: [5, 3, 7, 10] Output: 15 Explanation: You will collect 10 first, then the opponent collects 7. You will then collect 5, leading to a total of 15. Example 2: Input: [8, 15, 3, 7] Output: 22 Explanation: You can collect either 8 or 7 ensuring that you can collect 15 in the subsequent turn, leading to a total of 22. Note: 1. 1 ≤ number of coins ≤ 1000 2. Each coin\'s value is in the range of [0, 10000].","solution":"def max_coins(coins): n = len(coins) dp = [[0] * n for _ in range(n)] for length in range(1, n+1): for i in range(n-length+1): j = i + length - 1 a = 0 if i+2 > j else dp[i+2][j] b = 0 if i+1 > j-1 else dp[i+1][j-1] c = 0 if i > j-2 else dp[i][j-2] dp[i][j] = max(coins[i] + min(a, b), coins[j] + min(b, c)) return dp[0][n-1]"},{"question":"Write a function that, when given a positive integer `n`, returns the sum of all multiples of 3 or 5 below `n`. For example: ```python sum_of_multiples(10) == 23 # (3 + 5 + 6 + 9) sum_of_multiples(20) == 78 # (3 + 5 + 6 + 9 + 10 + 12 + 15 + 18) sum_of_multiples(30) == 195 # (3 + 5 + 6 + 9 + 10 + 12 + 15 + 18 + 20 + 21 + 24 + 25 + 27) ```","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 below n. total = 0 for i in range(n): if i % 3 == 0 or i % 5 == 0: total += i return total"},{"question":"Task: Write a function that takes a string representing a certain time of day in the format \\"HH:MM AM/PM\\" and converts it to 24-hour military time. Input: A string in the format \\"HH:MM AM/PM\\" where - \\"HH\\" is a two-digit hour between 01 and 12. - \\"MM\\" is a two-digit minute between 00 and 59. - \\"AM/PM\\" is either \\"AM\\" or \\"PM\\", representing the time of day. Output: A string representing the same time in 24-hour format, \\"HH:MM\\", where - \\"HH\\" is a two-digit hour between 00 and 23. - \\"MM\\" remains a two-digit minute between 00 and 59. Example: 1. `to_military_time(\\"02:30 PM\\")` should return `\\"14:30\\"` 2. `to_military_time(\\"12:45 AM\\")` should return `\\"00:45\\"` Constraints: - The input string will always be a valid time in the specified format. - Do not use any built-in libraries or functions for date/time conversion. Implement the conversion manually.","solution":"def to_military_time(time: str) -> str: Converts a string representing a time in 12-hour AM/PM format to 24-hour military time. Args: time: A string representing the time in \\"HH:MM AM/PM\\" format. Returns: A string representing the time in 24-hour \\"HH:MM\\" format. # Split the input string into time and period (AM/PM) time_part, period = time.split() hour, minute = map(int, time_part.split(\\":\\")) if period == \\"AM\\": if hour == 12: hour = 0 else: # period == \\"PM\\" if hour != 12: hour += 12 return f\\"{hour:02}:{minute:02}\\""},{"question":"You are given a string s, consisting of lowercase English letters, and an integer n. You need to perform n operations on the string. In each operation, you select any one character from the string and remove it. The goal is to maximize the lexicographical order of the resulting string. Return the resulting string after n operations. Example 1: Input: s = \\"abcde\\", n = 2 Output: \\"cde\\" Explanation: By removing \'a\' and \'b\', we get the string \\"cde\\" which is the largest lexicographically. Example 2: Input: s = \\"aabbcc\\", n = 3 Output: \\"bcc\\" Explanation: By removing three \'a\'s and \'b\'s, \\"bcc\\" is the largest lexicographical string we can get. Constraints: 1 <= s.length <= 1000 1 <= n <= s.length","solution":"def maximize_lexicographical_order(s, n): Removes n characters from the string s to maximize its lexicographical order. Parameters: s (str): the input string consisting of lowercase English letters. n (int): the number of characters to remove. Returns: str: the string after n operations, maximizing lexicographical order. stack = [] remove_count = n for char in s: while stack and remove_count > 0 and stack[-1] < char: stack.pop() remove_count -= 1 stack.append(char) # If we still need to remove more characters, remove them from the end result = stack[:-remove_count] if remove_count else stack return \'\'.join(result)"},{"question":"The residents of Smalltown have recently implemented a new delivery system for their postal service. Each house is represented as a point on a 2D grid, and each point has coordinates (x, y). The postman starts at the origin point (0, 0) and has a list of house coordinates he needs to deliver mail to. However, given the increased volume of packages, the postman wants to know the total distance he has to travel if he follows the optimal path. The optimal path is the shortest path that visits all houses and then returns to the origin. You are given an array of coordinates representing the houses. For example: ``` houses = [(1, 2), (3, 4), (6, 8), (2, 1)] ``` Write a function to determine the minimal total distance the postman must travel to deliver all the mail and return to the origin. If no houses are given, the result should be `0`. ```python def minimum_travel_distance(houses): # Your code here # Examples: print(minimum_travel_distance([(1, 2), (3, 4), (6, 8), (2, 1)])) # Output should be the minimal travel distance print(minimum_travel_distance([])) # Output should be 0 ``` Note: - The distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula: `sqrt((x2-x1)^2 + (y2-y1)^2)`. - You may assume that coordinates are always non-negative integers. Can you help the postman determine the optimal path?","solution":"from itertools import permutations from math import sqrt def euclidean_distance(point1, point2): return sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2) def total_distance(path): # Path includes return to the origin distance = 0 for i in range(len(path) - 1): distance += euclidean_distance(path[i], path[i + 1]) return distance def minimum_travel_distance(houses): if not houses: return 0 origin = (0, 0) shortest_path_distance = float(\'inf\') # Generating all permutations of the house coordinates for perm in permutations(houses): # Create a full path that starts at the origin, visits all houses, and returns to the origin full_path = [origin] + list(perm) + [origin] path_distance = total_distance(full_path) # Updating the shortest path distance found shortest_path_distance = min(shortest_path_distance, path_distance) return shortest_path_distance"},{"question":"Olivia is visiting a park that has M bridges connecting N islands (numbered 1 to N). She wants to explore all the islands but can only go through each bridge once. Help Olivia find out if it\'s possible to start at one island and visit all other islands using each bridge exactly once. A bridge connects two different islands, and there may be more than one bridge between any pair of islands. Olivia can start exploring from any island. -----INPUT FORMAT----- - First line of input consist of an integer T, the number of test cases. - For each test case, the first line contains two integers N and M, denoting the number of islands and bridges respectively. - The next M lines each contain two integers u and v, indicating there is a bridge between island u and island v. -----OUTPUT FORMAT----- - For each test case, print \\"YES\\" if Olivia can travel through each bridge exactly once and visit all islands. Otherwise, print \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 1000 - 1 leq M leq 10^5 -----Sample Input----- 2 4 4 1 2 2 3 3 4 4 1 3 3 1 2 2 3 3 1 -----Sample Output----- YES YES -----Explanation----- In the first test case, an Eulerian cycle exists connecting all the islands and visiting each bridge exactly once: 1-2-3-4-1. In the second test case, an Eulerian cycle also exists: 1-2-3-1. Thus, both cases output YES.","solution":"from collections import defaultdict, deque def can_traverse_all_bridges(T, test_cases): def is_eulerian_circuit_possible(n, edges): graph = defaultdict(list) degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) graph[v].append(u) degree[u] += 1 degree[v] += 1 # Check all vertices with non-zero degree are connected def is_connected(): visited = [False] * (n + 1) start_node = next((i for i in range(1, n + 1) if degree[i] > 0), None) if start_node is None: return True # No edges at all, trivially true queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Check if all vertices with non-zero degree are connected return all(visited[i] or degree[i] == 0 for i in range(1, n + 1)) if not is_connected(): return \\"NO\\" # Check if all vertices have even degree if all(deg % 2 == 0 for deg in degree if deg > 0): return \\"YES\\" else: return \\"NO\\" results = [] for n, m, edges in test_cases: results.append(is_eulerian_circuit_possible(n, edges)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) edges = [tuple(map(int, lines[index + i + 1].split())) for i in range(M)] test_cases.append((N, M, edges)) index += M + 1 return T, test_cases"},{"question":"You are given an m x n matrix of integers and a target value. Write a function that returns whether the matrix contains the given target. In this matrix, each row is sorted in ascending order, and each column is also sorted in ascending order (i.e., the matrix has the \\"row-wise and column-wise sorted\\" property). Function Signature: ```python def searchMatrix(matrix: List[List[int]], target: int) -> bool: ``` # Input - A 2D list `matrix` of dimensions `m x n` and an integer `target`. The dimensions `m` and `n` are such that `1 <= m, n <= 300`. - Each element of `matrix` is an integer such that `-10^9 <= matrix[i][j] <= 10^9`. # Output - Return `True` if `target` exists in the matrix; otherwise, return `False`. # Example ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 ``` **Output**: `True` # Explanation - The target value 5 exists in the matrix, so the function should return `True`. ```python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 20 ``` **Output**: `False` # Explanation - The target value 20 does not exist in the matrix, so the function should return `False`. # Constraints - The given matrix will have all rows sorted in non-decreasing order. - The given matrix will have all columns sorted in non-decreasing order.","solution":"from typing import List def searchMatrix(matrix: List[List[int]], target: int) -> bool: Returns True if the target exists in the matrix, otherwise False. if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) # Start from the top right corner row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] < target: row += 1 else: col -= 1 return False"},{"question":"Create a function that takes a string containing a mathematical expression with addition and multiplication, and evaluates it according to the standard precedence rules (multiplication before addition). The function should handle non-negative integers and return the evaluated result as an integer. Example: ```python \\"3+2*2\\" --> 7 \\"2*3+4\\" --> 10 \\"10+2*6\\" --> 22 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing addition and multiplication. Multiplication is evaluated before addition according to standard precedence rules. :param expression: str, a mathematical expression (e.g., \\"3+2*2\\") :return: int, result of evaluating the expression # Split the expression into tokens for alternation between numbers and operators tokens = [] num = 0 for char in expression: if char.isdigit(): num = num * 10 + int(char) else: tokens.append(num) tokens.append(char) num = 0 tokens.append(num) # First pass: process all multiplications stack = [] i = 0 while i < len(tokens): if str(tokens[i]).isdigit(): stack.append(tokens[i]) elif tokens[i] == \'+\': stack.append(tokens[i]) elif tokens[i] == \'*\': num = stack.pop() i += 1 num *= tokens[i] stack.append(num) i += 1 # Second pass: process all additions result = stack[0] i = 1 while i < len(stack): if stack[i] == \'+\': result += stack[i + 1] i += 2 return result"},{"question":"You are tasked with writing a function that will check if two binary trees are mirror images of each other. Two binary trees are mirrors of each other if their root nodes have the same value, their left subtree of one tree is a mirror image of the right subtree of the second tree, and their right subtree of one tree is a mirror image of the left subtree of the second tree. The trees are represented using the following class structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Your function should take in the root nodes of the two trees and return `True` if they are mirror images and `False` otherwise. For example: ```python # Tree 1: 1 # / # 2 3 # Tree 2: 1 # / # 3 2 root1 = TreeNode(1) root1.left = TreeNode(2) root1.right = TreeNode(3) root2 = TreeNode(1) root2.left = TreeNode(3) root2.right = TreeNode(2) are_mirrors(root1, root2) # should return True # Tree 3: 1 # / # 2 3 # Tree 4: 1 # / # 2 3 root3 = TreeNode(1) root3.left = TreeNode(2) root3.right = TreeNode(3) root4 = TreeNode(1) root4.left = TreeNode(2) root4.right = TreeNode(3) are_mirrors(root3, root4) # should return False ``` Your goal is to implement the `are_mirrors` function: ```python def are_mirrors(root1: TreeNode, root2: TreeNode) -> bool: # Your code here ``` Make sure your function correctly identifies whether the trees are mirror images of each other for all possible inputs.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def are_mirrors(root1: TreeNode, root2: TreeNode) -> bool: Check if two binary trees with the given root nodes are mirror images of each other. # If both nodes are None, they are mirrors (empty subtrees) if root1 is None and root2 is None: return True # If only one of the nodes is None, they are not mirrors if root1 is None or root2 is None: return False # Check if the values of the nodes are the same and recursively check their subtrees return (root1.val == root2.val and are_mirrors(root1.left, root2.right) and are_mirrors(root1.right, root2.left))"},{"question":"Write a function that calculates the number of ways you can partition `n` distinct objects into `k` non-empty, unordered subsets. This problem relates to the Bell number when `k` is varied and to Stirling numbers of the second kind, which count the number of ways to partition a set of `n` labeled objects into `k` nonempty unlabeled subsets. Implement the function as follows: # Function Signature `def partition_count(n: int, k: int) -> int:` # Input - `n`: an integer representing the number of distinct objects (1 <= n <= 50). - `k`: an integer representing the number of non-empty subsets (1 <= k <= n). # Output - An integer representing the number of ways to partition `n` objects into `k` non-empty, unordered subsets. # Example ```python partition_count(3, 2) ``` Returns: ``` 3 ``` Explanation: There are 3 ways to partition a set of 3 objects `{a, b, c}` into 2 non-empty subsets: `{{a}, {b, c}}`, `{{b}, {a, c}}`, `{{c}, {a, b}}`. ```python partition_count(5, 3) ``` Returns: ``` 25 ``` Explanation: There are 25 ways to partition a set of 5 objects `{a, b, c, d, e}` into 3 non-empty subsets. # Additional Notes: - Be sure to account for using dynamic programming or other optimization strategies to efficiently calculate the required partitions as `n` and `k` grow larger. - The function should be performant enough to handle the upper limits of the input constraints.","solution":"def partition_count(n: int, k: int) -> int: Calculate the number of ways to partition `n` distinct objects into `k` non-empty, unordered subsets. This function uses Stirling numbers of the second kind. # Initialize a DP table where dp[i][j] will store the number of ways to partition i objects into j subsets dp = [[0]*(n+1) for _ in range(n+1)] # Base case: there\'s exactly 1 way to partition 0 objects into 0 subsets dp[0][0] = 1 # Fill the DP table for i in range(1, n+1): for j in range(1, k+1): dp[i][j] = j * dp[i-1][j] + dp[i-1][j-1] return dp[n][k]"},{"question":"A company has multiple departments, each with its own list of employees. Each employee has a unique ID, a name, and a salary. The company administration wants to implement a system that will allow them to manage employee information and calculate statistics about their employees\' salaries. You are required to write a function that performs the following tasks: 1. Adds a new employee to a specified department. 2. Removes an employee from a specified department. 3. Retrieves the list of all employees in a specified department. 4. Calculates the average salary in a specified department. 5. Retrieves the employee with the highest salary in a specified department. 6. Retrieves the employee with the lowest salary in a specified department. The function should take two arguments: an initial dictionary of departments and employees, and a list of operations to perform. Each element in the operations list will be a dictionary representing a single operation, where the key \\"operation\\" specifies the type of operation (\\"add\\", \\"remove\\", \\"list\\", \\"average\\", \\"max\\", \\"min\\") and other relevant keys provide necessary data (e.g., employee ID, department name, salary). An employee is represented as a dictionary with keys: \\"id\\", \\"name\\", and \\"salary\\". # Task: Implement the function `manage_employees` using the following signature: ```python from typing import Dict, List, Union def manage_employees(departments: Dict[str, List[Dict[str, Union[int, str, float]]]], operations: List[Dict[str, Union[str, int, float]]]) -> List[Union[List[Dict[str, Union[int, str, float]]], float, Dict[str, Union[int, str, float]]]]: pass ``` # Examples: ```python departments = { \\"HR\\": [ {\\"id\\": 1, \\"name\\": \\"Alice\\", \\"salary\\": 50000}, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"salary\\": 60000} ], \\"Engineering\\": [ {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"salary\\": 70000} ] } operations = [ {\\"operation\\": \\"add\\", \\"department\\": \\"HR\\", \\"id\\": 4, \\"name\\": \\"David\\", \\"salary\\": 55000}, {\\"operation\\": \\"remove\\", \\"department\\": \\"Engineering\\", \\"id\\": 3}, {\\"operation\\": \\"list\\", \\"department\\": \\"HR\\"}, {\\"operation\\": \\"average\\", \\"department\\": \\"HR\\"}, {\\"operation\\": \\"max\\", \\"department\\": \\"HR\\"}, {\\"operation\\": \\"min\\", \\"department\\": \\"HR\\"} ] manage_employees(departments, operations) -> [ [], [], [ {\\"id\\": 1, \\"name\\": \\"Alice\\", \\"salary\\": 50000}, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"salary\\": 60000}, {\\"id\\": 4, \\"name\\": \\"David\\", \\"salary\\": 55000} ], 55000.0, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"salary\\": 60000}, {\\"id\\": 1, \\"name\\": \\"Alice\\", \\"salary\\": 50000} ] ``` # Additional Notes: - If an operation is to add or remove an employee, the return value for that operation should be an empty list (`[]`). - If an operation is to list employees in a department, return the sorted list of employees by their IDs. - If an operation is to calculate the average salary, return the average as a float. - If an operation is to find the employee with the highest or lowest salary, return the employee\'s dictionary. - Assume that all provided operations are valid and that each employee `id` is unique across the entire company\'s database.","solution":"from typing import Dict, List, Union def manage_employees(departments: Dict[str, List[Dict[str, Union[int, str, float]]]], operations: List[Dict[str, Union[str, int, float]]]) -> List[Union[List[Dict[str, Union[int, str, float]]], float, Dict[str, Union[int, str, float]]]]: results = [] for operation in operations: if operation[\\"operation\\"] == \\"add\\": departments[operation[\\"department\\"]].append({ \\"id\\": operation[\\"id\\"], \\"name\\": operation[\\"name\\"], \\"salary\\": operation[\\"salary\\"] }) results.append([]) elif operation[\\"operation\\"] == \\"remove\\": department = departments[operation[\\"department\\"]] departments[operation[\\"department\\"]] = [emp for emp in department if emp[\\"id\\"] != operation[\\"id\\"]] results.append([]) elif operation[\\"operation\\"] == \\"list\\": department = departments[operation[\\"department\\"]] sorted_dept = sorted(department, key=lambda x: x[\\"id\\"]) results.append(sorted_dept) elif operation[\\"operation\\"] == \\"average\\": department = departments[operation[\\"department\\"]] avg_salary = sum(emp[\\"salary\\"] for emp in department) / len(department) results.append(avg_salary) elif operation[\\"operation\\"] == \\"max\\": department = departments[operation[\\"department\\"]] max_salary_emp = max(department, key=lambda x: x[\\"salary\\"]) results.append(max_salary_emp) elif operation[\\"operation\\"] == \\"min\\": department = departments[operation[\\"department\\"]] min_salary_emp = min(department, key=lambda x: x[\\"salary\\"]) results.append(min_salary_emp) return results"},{"question":"You are given a binary string s of length n. In one move, you can choose any index i (1 le i le n) and flip the bit at that index (i.e., change a 0 to 1 or a 1 to 0). Your task is to make the binary string have an equal number of 0s and 1s (or say that it is impossible to do so). You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 1000) — the length of s. The second line of each test case contains a binary string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 10000. -----Output----- For each test case, print the answer: -1 on the only line if it is impossible to make the binary string have an equal number of 0s and 1s, or the number of moves ans on the first line and ans integers idx_1, idx_2, dots, idx_{ans} (1 le idx_i le n), where idx_i is the index of the bit to flip for the i-th move. You should print indices in any order of your choice. -----Example----- Input 4 6 110000 5 11111 8 10101010 3 110 Output 1 4 -1 0","solution":"def make_equal_zeros_ones(t, test_cases): results = [] for case in test_cases: n, s = case count_0 = s.count(\'0\') count_1 = s.count(\'1\') if n % 2 != 0 or count_0 != count_1: results.append([-1]) else: results.append([0]) return results"},{"question":"Given an array of strings, group anagrams together. Two strings are anagrams if and only if their sorted characters are equal. Example 1: Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\",\\"tea\\",\\"ate\\"], [\\"tan\\",\\"nat\\"], [\\"bat\\"]] Example 2: Input: [\\"\\"] Output: [[\\"\\"]] Example 3: Input: [\\"a\\"] Output: [[\\"a\\"]]","solution":"def group_anagrams(strs): Groups anagrams together from the given list of strings. Args: strs: List[str] : List of strings Returns: List[List[str]] : Grouped anagrams from collections import defaultdict anagrams = defaultdict(list) for string in strs: sorted_str = \'\'.join(sorted(string)) anagrams[sorted_str].append(string) return list(anagrams.values())"},{"question":"Kakashi is a fan of prime numbers and Fibonacci sequences. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A Fibonacci sequence is a sequence of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Kakashi has two integers (a) and (b). He wants you to find the smallest prime number that is also a Fibonacci number greater than or equal to (a) and less than or equal to (b). If no such number exists, print -1. -----Input----- The only line of input consists of two space-separated integers (a) and (b) ( (1 leq a leq b leq 10^{18}) ). -----Output----- Output a single integer—the smallest prime number that is also a Fibonacci number within the given range. If there is no such number, print -1. -----Examples----- Input 10 100 Output 13 Input 50 60 Output -1 -----Note----- In the output of the first example case, the Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... The prime Fibonacci numbers are 2, 3, 5, 13, 89, .... The smallest prime Fibonacci number in the range [10, 100] is 13. In the output of the second example case, there are no prime Fibonacci numbers between 50 and 60. Hence, the output is -1.","solution":"def is_prime(n): Check if a number is prime. if n < 2: return False if n in (2, 3): return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_fibonacci(a, b): Find the smallest prime number that is also a Fibonacci number in the range [a, b]. x, y = 0, 1 while x <= b: if x >= a and is_prime(x): return x x, y = y, x + y return -1"},{"question":"In a distant future, a race of intelligent creatures known as the Xyloids is engaged in a game of resource allocation. There are M territories on their planet, each with its own unique resource. The Xyloids have P packets of resources that they wish to distribute among these M territories such that the distribution is as fair as possible. To achieve this fairness, they impose a rule: the number of resource packets in any two territories should differ by at most 1. Your task is to determine the maximum number of resource packets that a territory can have when the P packets are distributed according to the Xyloids\' fairness rule. -----Input:----- - The first line contains an integer Q, denoting the number of test cases. - Each of the next Q lines will contain two space-separated integers denoting M and P respectively. -----Output:----- - For each test case, output a single line containing an integer Y denoting the maximum number of packets a territory can have in that test case. -----Constraints:----- - 1 leq Q leq 10^5 - 1 leq M leq 10^5 - 1 leq P leq 10^9 -----Sample Input:----- 2 4 10 3 7 -----Expected Output:----- 3 3 -----Explanation----- - Test Case 1: There are 4 territories and 10 packets. To distribute them fairly, 2 territories can have 3 packets each, and 2 territories can have 2 packets each. Hence, the maximum number of packets a territory can have is 3. - Test Case 2: There are 3 territories and 7 packets. To distribute them fairly, 1 territory can have 3 packets, and 2 territories can have 2 packets each. Hence, the maximum number of packets a territory can have is 3.","solution":"def maximum_packets(M, P): Given M territories and P packets, return the maximum number of packets a territory can have such that no two territories differ by more than 1 packet. # Each territory will have at least P // M packets base_packets = P // M # Calculate the number of territories that will get an extra packet extra_packets = P % M return base_packets + (1 if extra_packets > 0 else 0) def solve(test_cases): results = [] for M, P in test_cases: results.append(maximum_packets(M, P)) return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') Q = int(input_lines[0]) test_cases = [] for i in range(1, Q + 1): M, P = map(int, input_lines[i].strip().split()) test_cases.append((M, P)) return Q, test_cases"},{"question":"A popular online game allows players to craft potions using different combinations of magical ingredients. Each ingredient contributes a certain amount of power to the potion, and the goal is to create the most powerful potion possible using a limited number of ingredients. The power of a potion is the sum of the powers of its individual ingredients. Additionally, each ingredient has a weight, and the player can only carry a certain maximum weight of ingredients at any time. Given a list of available ingredients, each with a specified power and weight, and a maximum weight limit that the player can carry, identify the maximum power that can be achieved without exceeding the weight limit. Your task is to write a program that determines the maximum power of a potion that can be crafted under the given constraints. -----Input----- The first line contains an integer N, the number of available ingredients. The next N lines each contain two integers: the power Pi and the weight Wi of the i-th ingredient. The last line contains a single integer W, the maximum weight that the player can carry. -----Output----- Print the maximum power of a potion that can be created. -----Constraints----- 1 ≤ N ≤ 1000 1 ≤ Pi ≤ 1000 1 ≤ Wi ≤ 1000 1 ≤ W ≤ 10000 -----Sample Input----- 4 10 2 40 3 30 4 50 5 6 -----Sample Output----- 70 -----Output details----- One possible solution to achieve the maximum power of 70 without exceeding the weight limit is to choose ingredients with powers 40 and 30, with weights 3 and 4 respectively (totaling a weight of 7 which is higher than the limit), hence we choose ingredients with powers 40 and 10, and weights 3 and 2 respectively (totaling a weight of 5 which is within the limit).","solution":"def max_potion_power(ingredients, max_weight): Determines the maximum power of a potion that can be crafted without exceeding the weight limit. Uses a dynamic programming approach similar to the knapsack problem. :param ingredients: List of tuples where each tuple contains (power, weight) of an ingredient :param max_weight: Integer representing the maximum weight the player can carry :return: Maximum power that can be achieved without exceeding the weight limit n = len(ingredients) dp = [[0] * (max_weight + 1) for _ in range(n + 1)] for i in range(1, n + 1): power, weight = ingredients[i-1] for w in range(max_weight + 1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + power) else: dp[i][w] = dp[i-1][w] return dp[n][max_weight] # Parse input def parse_input(input_text): lines = input_text.strip().split(\'n\') N = int(lines[0]) ingredients = [tuple(map(int, line.split())) for line in lines[1:N+1]] W = int(lines[N+1]) return ingredients, W def main(input_text): ingredients, max_weight = parse_input(input_text) return max_potion_power(ingredients, max_weight)"},{"question":"Write a function that takes a string containing a sentence and returns the length of the longest word in the sentence. If there are multiple words with the same length, return the length of the first one that appears. Assume the sentence contains only letters and spaces, with words separated by a single space.","solution":"def longest_word_length(sentence): Returns the length of the longest word in the given sentence. If there are multiple words with the same length, returns the length of the first one that appears. :param sentence: str - A string containing a sentence. :return: int - The length of the longest word. words = sentence.split() max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) return max_length"},{"question":"__Definition:__ According to Wikipedia, an [anagram](https://en.wikipedia.org/wiki/Anagram) is a permutation of the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once. Your task is to write a method (or function) that, given a string and a list of strings, returns a list of all the anagrams of the given string that are present in the list of strings. __Example 1:__ Let the input string be `\\"listen\\"` and the list of strings be `[\\"enlist\\", \\"google\\", \\"inlets\\", \\"banana\\", \\"silent\\"]`. The input string `\\"listen\\"` has the following anagrams in the given list of strings: `\\"enlist\\"`, `\\"inlets\\"`, and `\\"silent\\"`. __Output 1:__ The output of the function shall be a list containing the values of the anagrams found in the list of strings. In this example, the returned list should be: ```[\\"enlist\\", \\"inlets\\", \\"silent\\"]``` __Example 2:__ Let the input string be `\\"race\\"` and the list of strings be `[\\"care\\", \\"acer\\", \\"car\\", \\"racecar\\", \\"scare\\"]`. The input string `\\"race\\"` has the following anagrams in the given list of strings: `\\"care\\"`, and `\\"acer\\"`. __Output 2:__ The output of the function shall be a list containing the values of the anagrams found in the list of strings. In this example, the returned list should be: ```[\\"care\\", \\"acer\\"]```","solution":"def find_anagrams(word, words_list): This function takes a word and a list of words, then returns all anagrams of that word found in the list of words. sorted_word = sorted(word) return [w for w in words_list if sorted(w) == sorted_word]"},{"question":"You are given a list of non-negative integers representing the amount of money of each house arranged in a line. Calculate the maximum amount of money you can rob tonight without alerting the police. The constraint is that you cannot rob two adjacent houses because it will trigger the alarm. # Function Signature ```python def rob(nums: List[int]) -> int: ``` # Input - `nums`: A list of integers representing the money at each house. # Output - An integer representing the maximum amount of money you can rob tonight. # Example ``` rob([1, 2, 3, 1]) => 4 ``` Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount = 1 + 3 = 4. ``` rob([2, 7, 9, 3, 1]) => 12 ``` Explanation: Rob house 1 (money = 2) and then rob house 3 (money = 9) and then rob house 5 (money = 1). Total amount = 2 + 9 + 1 = 12. # Notes - The length of the list can vary. - Items in the list will be non-negative integers. - If there are no houses, you cannot rob any money, hence the result will be 0.","solution":"from typing import List def rob(nums: List[int]) -> int: Returns the maximum amount of money you can rob tonight without alerting the police. if not nums: return 0 if len(nums) <= 2: return max(nums) # Initialize an array to keep track of the maximum loot up to each house dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) # Fill the dp array with the maximum loot up to each house for i in range(2, len(nums)): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"You need to develop a function `rotateMatrix` that takes as input a square matrix (2D list) of integers and rotates the matrix 90 degrees clockwise. # Input: A 2D list representing a square matrix. # Output: A 2D list representing the rotated matrix. # Example: ```Example: Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ```","solution":"def rotateMatrix(matrix): Rotates a square matrix 90 degrees clockwise. n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - i - 1] = matrix[i][j] return result"},{"question":"You are a librarian organizing a new library system. You want to arrange the books in such a way that books of the same category are placed together, and within each category, the books are sorted by their publication year in ascending order. Each book is represented by its category and its publication year. Given a list of books, where each book is represented as a pair of integers (category, year), write a program that sorts the books first by their category, and within each category, by their publication year. -----Input:----- The first line contains an integer N, the number of books. The next N lines each contain two space-separated integers, representing the category and the publication year of each book. -----Output:----- Output the sorted list of books, one book per line. -----Constraints:----- 1 leq N leq 10^5 1 leq category leq 10^4 1000 leq year leq 9999 -----Sample Input:----- 5 3 2001 2 1999 3 1995 1 2002 2 2008 -----Sample Output:----- 1 2002 2 1999 2 2008 3 1995 3 2001","solution":"def sort_books(books): Sorts the list of books by category and within each category by publication year. :param books: List of tuples where each tuple contains (category, year) :return: Sorted list of books by category and year books.sort(key=lambda x: (x[0], x[1])) return books"},{"question":"Write a function `find_largest_unique_substring` that takes a string `s` as an input and returns the length of the largest substring without repeating characters. For example: - `find_largest_unique_substring(\\"abcabcbb\\")` should return `3` because \\"abc\\" is the longest substring without repeating characters. - `find_largest_unique_substring(\\"bbbbb\\")` should return `1` because \\"b\\" is the longest substring without repeating characters. - `find_largest_unique_substring(\\"pwwkew\\")` should return `3` because \\"wke\\" is the longest substring without repeating characters. You need to optimize your function for time complexity.","solution":"def find_largest_unique_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} start = 0 max_length = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers and a target integer. Your task is to find two distinct integers in the array such that their sum is equal to the target. If such a pair exists, return the indices of the two integers. Otherwise, return an empty list. Note that arrays are zero-indexed. -----Input----- The first line contains a single integer T ge 1 — the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n (2 le n le 10^5) — the number of elements in the array. The second line of each test case contains n space-separated integers a_i (-10^9 le a_i le 10^9) — the elements of the array. The third line of each test case contains a single integer target (-10^9 le target le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, if there exists a pair of integers in the array whose sum equals the target, print two integers — the indices (zero-based) of the two numbers. If there are multiple solutions, any pair of indices is accepted. If no such pair exists, print an empty list. -----Example----- Input 3 5 2 7 11 15 -3 9 4 1 2 3 4 8 3 1 1 1 2 Output 0 1 [] 0 1 -----Note----- In the first test case, the pair (2, 7) gives the sum 9, and their indices are (0, 1). In the second test case, there is no pair that adds up to the target 8, so the output is an empty list. In the third test case, any pair of elements (0, 1), (0, 2), or (1, 2) sums up to 2. Therefore, any of these pairs\' indices can be a correct answer.","solution":"def find_two_sum_indices(arr, target): Finds two indices of distinct integers in the array whose sum is equal to the target. :param arr: List of integers :param target: Target integer sum :return: List containing the indices of the two integers whose sum is equal to the target. If no such pair exists, returns an empty list. index_map = {} for i, num in enumerate(arr): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return [] def process_test_cases(test_cases): Processes multiple test cases to find pairs of indices whose elements sum to the target. :param test_cases: A list of tuples, each tuple contains (n, array, target) :return: A list of results where each result is a list of indices or an empty list. results = [] for n, array, target in test_cases: results.append(find_two_sum_indices(array, target)) return results"},{"question":"Write a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list, preserving their order. ``` input: [4, 6, 7, 9, 11, 13, 15] output: [7, 11, 13] example: When the function is called with the above input, it should return a list containing [7, 11, 13] because these are the prime numbers in the original list. ``` A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Note: The function should handle an empty list as input and return an empty list.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"=====Problem Statement===== You are given an integer array and your task is to rotate the array to the right by a given number of positions. =====Example===== Input: [1, 2, 3, 4, 5], 2 Output: [4, 5, 1, 2, 3] Input: [10, 20, 30, 40, 50], 3 Output: [30, 40, 50, 10, 20] =====Input Format===== A list of integers and an integer n, separated by a space. The list represents the array, and n represents the number of positions to rotate to the right. =====Output Format===== Print the array after rotating it to the right by n positions.","solution":"def rotate_array(arr, n): Rotates the given array to the right by n positions. Args: arr (list of int): The array to rotate. n (int): The number of positions to rotate to the right. Returns: list of int: The rotated array. if not arr: return arr n = n % len(arr) # To handle if n is greater than the length of the array return arr[-n:] + arr[:-n]"},{"question":"Emily is programming an autonomous robot that navigates a grid of size m times n. The robot starts at the top-left corner of the grid and moves to the bottom-right corner. The robot can only move either down or right at any point in time. However, some of the cells in the grid are blocked and cannot be traversed. As a programmer, you need to calculate the number of unique paths that the robot can take to reach its destination. Given a grid of size m times n with some cells marked as blocked, find the number of unique paths for the robot to move from the top-left corner (cell [1, 1]) to the bottom-right corner (cell [m, n]). ----- Input ----- The first line contains two integers m and n (1 le m, n le 100) — the dimensions of the grid. Each of the next m lines contains n integers, each being 0 or 1. 0 represents an unblocked cell and 1 represents a blocked cell. The top-left cell and the bottom-right cell are always unblocked. ----- Output ----- Print the number of unique paths for the robot to reach the bottom-right corner of the grid. ----- Examples ----- Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1 ----- Note ----- In the first sample, the robot can take two unique paths: right -> down -> down, or down -> down -> right. In the second sample, there\'s only one unique path: down -> right.","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) # Create a DP table with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Start from the top-left corner dp[0][0] = 1 if grid[0][0] == 0 else 0 # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] if grid[0][j] == 0 else 0 # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] if grid[i][0] == 0 else 0 # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i - 1][j] + dp[i][j - 1] else: dp[i][j] = 0 # The bottom-right corner will have the number of unique paths return dp[m - 1][n - 1]"},{"question":"ZooKeeper is planning the layout for a new animal enclosure in the zoo. The enclosure should be rectangular and is divided into a grid of cells, where each cell represents a 1-meter by 1-meter area. The enclosure\'s area needs to be exactly M square meters, and it should be the closest to a square shape, i.e., the difference between the length and width should be minimized. # Input: - The first line contains an integer T, the number of test cases. - Each of the following T lines contains an integer M, the area of the enclosure to be planned. # Output: - For each test case, output two integers L and W (space-separated) representing the dimensions (length and width) of the enclosure that meet the criteria. If there are multiple correct answers, output the one with the longer side being first. # Constraints: - 1 leq T leq 100 - 1 leq M leq 10^6 # Sample Input: 2 15 16 # Sample Output: 5 3 4 4","solution":"def closest_rectangle_dimensions(T, test_cases): Returns the dimensions of the rectangular enclosure with minimum difference between length and width for each area in test_cases. results = [] for M in test_cases: min_diff = float(\'inf\') best_length = 0 best_width = 0 for W in range(1, int(M**0.5) + 1): if M % W == 0: L = M // W if L >= W and (L - W < min_diff): min_diff = L - W best_length = L best_width = W results.append((best_length, best_width)) return results # Example execution T = 2 test_cases = [15, 16] print(closest_rectangle_dimensions(T, test_cases)) # [(5, 3), (4, 4)]"},{"question":"Given an array of integers, you need to process multiple queries to find the sum of a given subarray. Each query will ask for the sum of elements between two indices, inclusive. -----Input----- The first line of the input contains two integers N and Q, where N is the number of elements in the array and Q is the number of queries. The second line contains N integers representing the elements of the array. Each of the next Q lines contains two integers L and R, representing the range [L, R] for which the sum of the subarray is to be computed. -----Output----- For each query, output the sum of the array elements from index L to R, inclusive. -----Example----- Input: 5 3 1 2 3 4 5 1 3 0 4 2 4 Output: 9 15 12 -----Constraints----- 1 <= N <= 10^5 1 <= Q <= 10^5 0 <= L <= R < N 1 <= array[i] <= 10^4","solution":"def prefix_sum(arr): Compute the prefix sums of the given array. n = len(arr) prefix = [0] * (n + 1) for i in range(n): prefix[i + 1] = prefix[i] + arr[i] return prefix def subarray_sum_query(arr, queries): Compute the sum of elements for each query range [L, R]. # Get prefix sums prefix = prefix_sum(arr) # Process each query result = [] for L, R in queries: result.append(prefix[R + 1] - prefix[L]) return result"},{"question":"Your task is to implement a function that receives an array of integers and returns a new array with each element being the product of all elements of the input array except the one at the current index. For example, given the array `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`, because: - at index 0: the product of elements at indices 1, 2, and 3 is 2 * 3 * 4 = 24 - at index 1: the product of elements at indices 0, 2, and 3 is 1 * 3 * 4 = 12 - at index 2: the product of elements at indices 0, 1, and 3 is 1 * 2 * 4 = 8 - at index 3: the product of elements at indices 0, 1, and 2 is 1 * 2 * 3 = 6 # Function Signature ```python def array_products(arr: List[int]) -> List[int]: ``` # Constraints - All elements of `arr` will be non-negative integers. - The length of `arr` will be at least 2 and at most 100. # Examples ```python array_products([1, 2, 3, 4]) = [24, 12, 8, 6] array_products([0, 1, 2, 3]) = [6, 0, 0, 0] array_products([2, 3, 4, 5]) = [60, 40, 30, 24] ```","solution":"from typing import List def array_products(arr: List[int]) -> List[int]: n = len(arr) # Initialize the left and right product lists left_products = [1] * n right_products = [1] * n result = [1] * n # Fill left products for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right products for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Construct result from left_products and right_products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a function that, given a list of strings, returns a new list containing only the strings that are palindromes. A palindrome is a word that reads the same backward as forward. Consider the strings to contain only lowercase letters without any spaces or punctuation.","solution":"def filter_palindromes(strings): Returns a list of strings that are palindromes. return [string for string in strings if string == string[::-1]]"},{"question":"Write a function that takes a list of integers and an integer k as inputs. The function should return a new list consisting of the elements from the original list, but with each element divided by k and rounded to the nearest integer. If division by k results in a tie (i.e., exactly halfway between two integers), round to the nearest even integer. Example 1: Input: [10, 20, 30, 40], 3 Output: [3, 7, 10, 13] (10/3 = 3.33... ≈ 3, 20/3 = 6.66... ≈ 7, 30/3 = 10, 40/3 = 13.33... ≈ 13) Example 2: Input: [15, 25, 35], 5 Output: [3, 5, 7] (15/5 = 3, 25/5 = 5, 35/5 = 7)","solution":"def divide_and_round(numbers, k): Divides each element in the list by k and rounds to the nearest integer. In case of ties (i.e., exactly halfway between two integers), it rounds to the nearest even integer. return [round(num / k) for num in numbers]"},{"question":"-----Robotic Maze----- A robot is placed in a 2D grid maze. The maze is composed of cells that are either walkable or blocked. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The robot can only move right or down at any step. You need to determine whether the robot can reach the destination. -----Input Format----- - Line 1: Two space-separated integers, `N` and `M`, which represent the number of rows and columns in the maze grid. - Next N lines: Each line contains M characters where each character is either `.` (representing a walkable cell) or `#` (representing a blocked cell). -----Output Format----- - Output a single string: \\"YES\\" if the robot can reach the bottom-right corner, otherwise \\"NO\\". -----Constraints----- - 1 ≤ N, M ≤ 1000 -----Sample Input----- 5 5 . . . . # . # . . . . . # . . . . . . # # . . . . -----Sample Output----- YES -----Explanation----- In this sample, the robot can follow the path: - Start at (1,1) - Move right to (1,2) - Move right to (1,3) - Move right to (1,4) - Move down to (2,4) - Move down to (3,4) - Move down to (4,4) - Move right to (4,5) - Move down to (5,5) The robot reaches the bottom-right corner, so the output is \\"YES\\".","solution":"def can_reach_destination(n, m, maze): Determines if the robot can reach the bottom-right corner of the maze. Parameters: n (int): The number of rows in the maze. m (int): The number of columns in the maze. maze (list): A list of strings representing the maze grid. Returns: str: \\"YES\\" if the robot can reach the bottom-right corner, \\"NO\\" otherwise. if maze[0][0] == \'#\' or maze[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque # Direction vectors for moving right and down directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) while queue: x, y = queue.popleft() # If we\'ve reached the bottom-right corner if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\': queue.append((nx, ny)) # Mark the cell as visited by changing \'.\' to \'#\' maze[nx][ny] = \'#\' return \\"NO\\""},{"question":"You are given an array of integers where some integers appear twice and others appear once. Write a function to find all the integers that appear twice. Your solution should return the integers in ascending order. Your algorithm should have a time complexity of O(n) and use constant space (O(1)). Here\'s an example to illustrate: ```python find_duplicates([4,3,2,7,8,2,3,1]) == [2,3] find_duplicates([1,1,2,3]) == [1] find_duplicates([2,2]) == [2] find_duplicates([1,2,3,4]) == [] find_duplicates([10,9,8,7,6,5,4,3,2,1]) == [] ``` **Constraints:** - The input array will have `n` elements where `n` ranges from `1` to `10^5`. - Each integer in the array will range from `1` to `n`. - Your solution should aim for optimal performance in terms of both time and space. ```python def find_duplicates(nums: [int]) -> [int]: # your code here ```","solution":"def find_duplicates(nums): Returns a list of integers that appear twice in the input list. The output list is sorted in ascending order. duplicates = [] for num in nums: index = abs(num) - 1 if nums[index] < 0: duplicates.append(abs(num)) nums[index] = -nums[index] duplicates.sort() return duplicates"},{"question":"You are given an array of integers. You need to find the largest sum of any contiguous subarray of size at least 2 and print that sum. A contiguous subarray of an array is a subarray made up of consecutive elements from the array. -----Input----- - The first line of the input contains an integer N denoting the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output----- Print the largest sum of any contiguous subarray of size at least 2. -----Constraints----- - 2 ≤ N ≤ 1000 - -1000 ≤ array elements ≤ 1000 -----Example----- Input: 5 1 -2 3 4 -1 Output: 7 -----Explanation----- In the above example, the contiguous subarray [3, 4] has the largest sum which equals 7.","solution":"def max_contiguous_subarray_sum(arr): Function to find the largest sum of any contiguous subarray of size at least 2. n = len(arr) if n < 2: raise ValueError(\\"Array length must be at least 2\\") max_sum = float(\'-inf\') for i in range(n - 1): current_sum = arr[i] for j in range(i + 1, n): current_sum += arr[j] if current_sum > max_sum: max_sum = current_sum return max_sum # Sample usage if __name__ == \\"__main__\\": N = int(input().strip()) arr = list(map(int, input().strip().split())) print(max_contiguous_subarray_sum(arr))"},{"question":"Given the dimensions of a rectangular area (length `L` and width `W`), and the radius `r` of the circular tiles to be placed within this area, find the maximum number of circular tiles that can be placed within the given rectangular area without overlapping. input ==== Three values : - __L__ : The length of the rectangular area, given in units. - __W__ : The width of the rectangular area, given in units. - __r__ : The radius of the circular tiles, given in units. output ==== One value : - The maximum number of circular tiles that can fit within the given rectangular area without overlapping. notes ==== Consider the following criteria for the placement: - Tiles must be placed within the perimeter of the rectangle. - Tiles should not overlap with each other. - Only complete tiles that fit entirely within the rectangular area should be counted. You can use mathematical and geometric principles to determine the maximum number of tiles.","solution":"import math def max_circular_tiles(L, W, r): Computes the maximum number of circular tiles of radius r that can fit within a rectangular area of dimensions L x W without overlapping. Args: L (float or int): The length of the rectangular area. W (float or int): The width of the rectangular area. r (float or int): The radius of the circular tiles. Returns: int: The maximum number of circular tiles that can fit within the given rectangular area. # The diameter of one tile d = 2 * r # Number of tiles that can fit along the length and width num_tiles_length = L // d num_tiles_width = W // d # Total number of tiles max_tiles = int(num_tiles_length * num_tiles_width) return max_tiles"},{"question":"Alex is working on a media player application that supports playlists. Each playlist can contain an arbitrary number of songs, and each song has a play count representing how many times it has been played. Alex wants to implement a feature where users can find the k most played songs within a playlist. However, if two songs have the same play count, the song that appears first in the playlist should be given preference. Here\'s an example of how the function should work: ```python songs = [ {\\"title\\": \\"Song A\\", \\"play_count\\": 30}, {\\"title\\": \\"Song B\\", \\"play_count\\": 55}, {\\"title\\": \\"Song C\\", \\"play_count\\": 25}, {\\"title\\": \\"Song D\\", \\"play_count\\": 55}, {\\"title\\": \\"Song E\\", \\"play_count\\": 10} ] k = 2 get_top_k_songs(songs, k) # returns [{\\"title\\": \\"Song B\\", \\"play_count\\": 55}, {\\"title\\": \\"Song D\\", \\"play_count\\": 55}] ``` Note that while \\"Song B\\" and \\"Song D\\" have the same play count, \\"Song B\\" appears first in the playlist, so it should be listed first in the result. Implement the `get_top_k_songs` function that takes a list of songs and an integer `k` as input and returns the top k most played songs in the order described. You can assume that 1 ≤ k ≤ len(songs). # Sample Input ```python songs = [ {\\"title\\": \\"Song A\\", \\"play_count\\": 30}, {\\"title\\": \\"Song B\\", \\"play_count\\": 55}, {\\"title\\": \\"Song C\\", \\"play_count\\": 25}, {\\"title\\": \\"Song D\\", \\"play_count\\": 55}, {\\"title\\": \\"Song E\\", \\"play_count\\": 10} ] k = 3 ``` # Sample Output ```python [ {\\"title\\": \\"Song B\\", \\"play_count\\": 55}, {\\"title\\": \\"Song D\\", \\"play_count\\": 55}, {\\"title\\": \\"Song A\\", \\"play_count\\": 30} ] ``` # Constraints - The songs list is non-empty and each song is represented as a dictionary. - The `play_count` for each song is a non-negative integer. - The function should maintain the original order for songs with the same play count.","solution":"def get_top_k_songs(songs, k): Returns the top k most played songs from the playlist. If two songs have the same play count, the song that appears first in the playlist is preferred. # Sort the songs by play count in descending order and by their original order if play counts are the same sorted_songs = sorted(songs, key=lambda x: (-x[\'play_count\'], songs.index(x))) # Return the top k songs return sorted_songs[:k]"},{"question":"Write a function that takes a non-negative integer `n` representing the number of rows of Pascal’s Triangle to generate, and returns the triangle as a list of lists. Pascal\'s Triangle is a triangular array where the entries are binomial coefficients. That means: - The first and last entry in each row is 1. - Each other entry is the sum of the two entries above it from the previous row. For example, the first 5 rows of Pascal’s Triangle are: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Your function should have the following signature: ```python def generate_pascals_triangle(n: int) -> list: ``` # Input - `n` (0 ≤ n ≤ 30): a non-negative integer representing the number of rows of Pascal’s Triangle to return. # Output - A list of lists of integers representing Pascal\'s Triangle up to `n` rows. # Example ```python assert generate_pascals_triangle(5) == [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] assert generate_pascals_triangle(1) == [ [1] ] assert generate_pascals_triangle(0) == [] ``` # Constraints - You don’t need to handle invalid inputs. - Focus on optimizing for readability and efficiency.","solution":"def generate_pascals_triangle(n: int) -> list: Generate Pascal\'s Triangle up to n rows. Each entry in the triangle is a binomial coefficient. Parameters: n (int): Number of rows in Pascal\'s Triangle. Returns: list: Pascal\'s Triangle represented as a list of lists. if n == 0: return [] triangle = [[1]] for row_num in range(1, n): row = [1] previous_row = triangle[row_num - 1] for j in range(1, row_num): row.append(previous_row[j - 1] + previous_row[j]) row.append(1) triangle.append(row) return triangle"},{"question":"Given a string s consisting of only \'a\' and \'b\' characters, you can remove any palindromic subsequence from s. Return the minimum number of steps to make the string empty. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: s = \\"ababa\\" Output: 1 Explanation: s is already a palindrome, so you can remove the whole string in one step. Example 2: Input: s = \\"abb\\" Output: 2 Explanation: Remove \\"bb\\" and then \\"a\\". Example 3: Input: s = \\"baabb\\" Output: 2 Explanation: Remove \\"baab\\" and then \\"b\\". Example 4: Input: s = \\"ab\\" Output: 2 Explanation: Remove \\"a\\" and then \\"b\\". Constraints: - 1 <= s.length <= 1000 - s consists of characters \'a\' and \'b\' only.","solution":"def min_steps_to_make_empty(s): Returns the minimum number of steps to make the string empty by removing palindromic subsequences. # If the string is already a palindrome, we can remove it in one step if s == s[::-1]: return 1 # If the string is not a palindrome, we need two steps: # One to remove all \'a\'s and another to remove all \'b\'s (or vice versa) return 2"},{"question":"You are working on a project that involves handling different file formats. One of the tasks is to write a function that converts a given time duration from a mixed format into standardized seconds. The input string can represent time in days (d), hours (h), minutes (m), and seconds (s). Each unit is followed by its respective letter. The units can be in any order and each unit will only appear once in the input string. Write a function to convert the given time duration into the total number of seconds. **Function Signature:** `def convert_to_seconds(time_str: str) -> int:` **Examples:** ``` convert_to_seconds(\\"2h3m5s\\") # 7385 convert_to_seconds(\\"1d2h\\") # 93600 convert_to_seconds(\\"4m45s\\") # 285 convert_to_seconds(\\"1d1s\\") # 86401 ``` **Constraints:** - The input string will always be a non-empty valid format. - Valid units are: d, h, m, s. - The unit values are always positive integers and appear only once.","solution":"def convert_to_seconds(time_str: str) -> int: Converts a time duration from a mixed format into standardized seconds. import re # Define the conversion factors time_units = {\'d\': 86400, \'h\': 3600, \'m\': 60, \'s\': 1} # Regex to match the pattern of the input string pattern = r\\"(d+)([dhms])\\" total_seconds = 0 # Find all matches in the input string matches = re.findall(pattern, time_str) for value, unit in matches: total_seconds += int(value) * time_units[unit] return total_seconds"},{"question":"Create a function `aggregateObject` that aggregates multiple objects into a single object. The function should accept an array of objects as its input, and it should combine all of the objects’ properties into one single object. If a property key appears in more than one object, the values of those keys should be concatenated into an array. The function should work with both primitive values and arrays as values. # Example: ```python aggregateObject([ { a: 1, b: 2 }, { b: 3, c: 4 }, { a: 5, c: [6, 7] } ]) ``` Should return: ```python { a: [1, 5], b: [2, 3], c: [4, 6, 7] } ``` # Explanation: - The key `a` appears in the first and third objects with values `1` and `5`. Hence, the aggregated value for `a` is `[1, 5]`. - The key `b` appears in the first and second objects with values `2` and `3`. Hence, the aggregated value for `b` is `[2, 3]`. - The key `c` appears in the second and third objects with values `4` and `[6, 7]`. Hence, the aggregated value for `c` is `[4, 6, 7]`. # Note: - If a key’s value is already an array, its elements should be spread into the aggregated array. - The input array of objects should remain unmodified. - The order of values in the output arrays should reflect the order of the input objects. # Constraints: - All keys in the input objects will be strings. - Input objects will not be deeply nested. Implement the `aggregateObject` function to achieve the described behavior.","solution":"def aggregateObject(objs): Aggregates multiple objects into a single object. If a property key appears in more than one object, the values of those keys will be concatenated into an array. Params: - objs (List[Dict]): A list of objects to be aggregated. Returns: - Dict: The aggregated object. result = {} for obj in objs: for key, value in obj.items(): if key in result: if isinstance(value, list): result[key].extend(value) else: result[key].append(value) else: if isinstance(value, list): result[key] = value[:] else: result[key] = [value] return result"},{"question":"A company has a series of meetings represented by a list of time intervals in the format [start, end]. Each meeting time is a pair of integers [si, ei] where `0 <= si < ei <= 24`. Write a function to determine the minimum number of conference rooms required for these meetings. Example 1: Input: [[0, 30], [5, 10], [15, 20]] Output: 2 Example 2: Input: [[7, 10], [2, 4]] Output: 1 Note: The time intervals are provided in a 24-hour format and do not overlap within a single meeting. Each interval satisfies the constraints: `0 <= start < end <= 24`.","solution":"def minMeetingRooms(intervals): Determines the minimum number of conference rooms required for given meetings. Parameters: intervals (List[List[int]]): List of meeting time intervals. Returns: int: The minimum number of conference rooms required. if not intervals: return 0 # Extract start and end times separately starts = sorted([i[0] for i in intervals]) ends = sorted([i[1] for i in intervals]) start_pointer, end_pointer = 0, 0 used_rooms = 0 # Iterate through the start times and compare with end times while start_pointer < len(starts): if starts[start_pointer] < ends[end_pointer]: used_rooms += 1 else: end_pointer += 1 start_pointer += 1 return used_rooms"},{"question":"Write a function that takes a list of integers and returns a list of tuples. Each tuple should contain three elements: the pair of indices swapped, the list after the swap, and the sum of the list at that point. Implement a Selection Sort algorithm (for reference, visit https://en.wikipedia.org/wiki/Selection_sort). e.g. If the initial list is l=[3,1,2,4] 1. Swap index 0 with index 1, list now is [1,3,2,4], sum is 10 -> yields (0, 1, [1,3,2,4], 10) 2. Swap index 1 with index 2, list now is [1,2,3,4], sum is 10 -> yields (1, 2, [1,2,3,4], 10) 3. No further swaps needed as list is sorted ``` [3,1,2,4] should return [ (0,1,[1,3,2,4], 10), (1,2,[1,2,3,4], 10) ] [4,3,2,1] should return [ (0,3,[1,3,2,4], 10), (1,2,[1,2,3,4], 10) ] [1,2,3,4] should return [] ```","solution":"def selection_sort_trace(lst): Perform selection sort on the given list and return the trace information. Each step contains the indices swapped, the list after swap, and the sum of the list at that point. :param lst: List of integers to be sorted. :return: List of tuples with (index1, index2, list after swap, sum of list) trace = [] n = len(lst) list_sum = sum(lst) for i in range(n): min_index = i for j in range(i + 1, n): if lst[j] < lst[min_index]: min_index = j if min_index != i: lst[i], lst[min_index] = lst[min_index], lst[i] trace.append((i, min_index, lst[:], list_sum)) return trace"},{"question":"Write a function that takes a list of integers as input and returns a list of these integers sorted in non-decreasing order, but with all even numbers appearing before any odd numbers. Note that the relative order among even numbers and among odd numbers should be preserved from the original list.","solution":"def sort_even_before_odd(nums): Returns a list of integers sorted in non-decreasing order, with all even numbers appearing before any odd numbers. The relative order among even numbers and among odd numbers is preserved. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"You are given a list of cities and a list of direct flight connections between them. Each connection has a travel cost. You need to determine the minimum cost to travel from a source city to a destination city. If it\'s impossible to travel between the cities, return -1. Your function should find the minimum cost to travel from city `src` to city `dst`. # Input: - `n`: The number of cities. - `flights`: A list where each element is a list of three integers `[u, v, w]` representing a flight from city `u` to city `v` with a cost of `w`. - `src`: The source city. - `dst`: The destination city. # Output: - An integer representing the minimum cost to travel from `src` to `dst`. If no path exists, return -1. # Constraints: - The number of cities `n` is between 1 and 1000. - The number of flight connections is between 0 and 10,000. - Each cost `w` is a non-negative integer. # Example: Example 1: Input: - `n`: 4 - `flights`: [[0,1,100],[1,2,200],[2,3,300],[0,3,1000]] - `src`: 0 - `dst`: 3 Output: 600 Explanation: The cheapest way to travel from city 0 to city 3 is through the route 0->1->2->3 with a total cost of 600. Example 2: Input: - `n`: 3 - `flights`: [[0,1,200],[1,2,100]] - `src`: 0 - `dst`: 2 Output: 300 Explanation: The cheapest way to travel from city 0 to city 2 is through the route 0->1->2 with a total cost of 300. Example 3: Input: - `n`: 3 - `flights`: [[0,1,500],[1,2,200]] - `src`: 0 - `dst`: 1 Output: 500 Explanation: The cheapest way to travel from city 0 to city 1 is through the direct flight with a cost of 500. # Note: - Make sure that your solution is optimized to handle large input sizes efficiently.","solution":"import heapq from collections import defaultdict import sys def find_min_cost(n, flights, src, dst): Determines the minimum cost to travel from source city to destination city. If it\'s impossible to travel, returns -1. graph = defaultdict(list) for u, v, w in flights: graph[u].append((v, w)) min_heap = [(0, src)] # (cost, city) min_cost = {i: sys.maxsize for i in range(n)} min_cost[src] = 0 while min_heap: curr_cost, u = heapq.heappop(min_heap) if u == dst: return curr_cost for v, w in graph[u]: new_cost = curr_cost + w if new_cost < min_cost[v]: min_cost[v] = new_cost heapq.heappush(min_heap, (new_cost, v)) return -1 if min_cost[dst] == sys.maxsize else min_cost[dst]"},{"question":"Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. Note: - You may assume the array is non-empty. - The algorithm should run in linear time and in O(1) space. Example 1: Input: nums = [3,2,3] Output: [3] Example 2: Input: nums = [1] Output: [1] Example 3: Input: nums = [1,1,1,3,3,2,2,2] Output: [1,2] Explanation: - In the first example, the element 3 appears twice which is more than ⌊ 3/3 ⌋ = 1 time. - In the second example, the single element 1 appears more than ⌊ 1/3 ⌋ = 0 times, which satisfies the condition. - In the third example, the elements 1 and 2 appear 3 and 3 times respectively, which are both more than ⌊ 8/3 ⌋ = 2 times.","solution":"def majority_element(nums): Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. if not nums: return [] # Using Boyer-Moore Voting Algorithm to find potential candidates candidate1 = candidate2 = None count1 = count2 = 0 for num in nums: if candidate1 == num: count1 += 1 elif candidate2 == num: count2 += 1 elif count1 == 0: candidate1, count1 = num, 1 elif count2 == 0: candidate2, count2 = num, 1 else: count1 -= 1 count2 -= 1 # Validate the candidates result = [] for candidate in (candidate1, candidate2): if nums.count(candidate) > len(nums) // 3: result.append(candidate) return result"},{"question":"🏫 You are given a class attendance record for a semester represented as a string: string s = \\"PPALLPPLLLPPP\\" \'P\' : Present \'A\' : Absent \'L\' : Late 👩‍🏫 Your task is to determine if a student can be rewarded based on their attendance record. A student can be rewarded if they meet the following criteria: 1. The student was absent (\'A\') for fewer than 2 days in total. 2. The student was not late (\'L\') for 3 or more consecutive days at any point. ☑️ Return true if the student can be rewarded, or false otherwise. 💡 Example: Input: attendance = \\"PPALLPPLLLPPP\\" Output: false Explanation: The student was late for three consecutive days in \\"LLL\\". ➕ If the string is empty, return true as there is no negative attendance record. ➕ If there are no \'A\' or \'L\' characters in the string, return true since all attendance records are present (\'P\') and valid.","solution":"def can_be_rewarded(attendance: str) -> bool: Determines if a student can be rewarded based on their attendance record. A student can be rewarded if: 1. They were absent for fewer than 2 days. 2. They were not late for 3 or more consecutive days at any point. :param attendance: A string representing the attendance record. :return: True if the student can be rewarded, False otherwise. absences = attendance.count(\'A\') if absences >= 2: return False if \'LLL\' in attendance: return False return True"},{"question":"Given an array of integers where every element appears twice except for one, which appears exactly once, find that single one. Your task is to write a function `find_single` that returns the integer that appears exactly once. Example: ```python find_single([4, 1, 2, 1, 2]) == 4 find_single([2, 2, 1]) == 1 ``` Input constraints: The input array will have a length of (2n + 1) where ( n > 0 ), and every element except one will appear exactly twice.","solution":"def find_single(nums): Finds the element that appears exactly once in the array where every other element appears twice. Args: nums (List[int]): List of integers where every element except one appears exactly twice. Returns: int: The single element that appears exactly once. single = 0 for num in nums: single ^= num return single"},{"question":"You are given a string s of digits and an integer k. You can remove k digits from the string so that the remaining digits form the smallest possible number. Return this smallest number as a string. Example: Input: s = \\"1432219\\" k = 3 Output: \\"1219\\" Explanation: Remove the three digits 4, 3, and 2 to form the smallest number \\"1219\\". Note: 1 <= s.length <= 100. 0 <= k <= s.length. The input s does not contain any leading zeros except the zero itself.","solution":"def removeKdigits(s, k): Remove k digits from the string s to form the smallest possible number. stack = [] for digit in s: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If there are still digits to be removed, remove them from the end stack = stack[:-k] if k else stack # Convert stack to string and remove leading zeros result = \'\'.join(stack).lstrip(\'0\') return result or \\"0\\""},{"question":"Suppose you have a collection of words and you want to find anagrams within this list. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. Given a list of n words, your task is to identify all the pairs of words that are anagrams of each other. -----Input:----- - First line of input contains an integer n, the number of words. - The next n lines contain one word each. -----Output:----- - For each pair of anagram words found, output them on a single line separated by a space. - If there are multiple pairs, print each pair on a new line. - Each pair should be printed in lexicographical order, and the list of pairs should also be in lexicographical order. -----Constraints----- - 2 <= n <= 1000 - Each word contains only lowercase letters. - The length of each word is at least 1 and at most 100. -----Sample Input:----- 5 listen silent enlist goog race care -----Sample Output:----- care race enlist listen enlist silent listen silent","solution":"def find_anagram_pairs(words): from collections import defaultdict anagram_dict = defaultdict(list) # Group words by sorted characters for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) anagram_pairs = [] # Find all pairs in each group for group in anagram_dict.values(): if len(group) > 1: group.sort() for i in range(len(group)): for j in range(i + 1, len(group)): anagram_pairs.append((group[i], group[j])) # Sort pairs lexicographically anagram_pairs.sort() return anagram_pairs"},{"question":"Given an array of integers nums, you need to find the smallest positive integer that is missing from the array. The smallest positive integer is the smallest positive integer greater than 0 (i.e., 1, 2, 3, ...). Example 1: Input: nums = [3, 4, -1, 1] Output: 2 Example 2: Input: nums = [1, 2, 0] Output: 3 Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Example 4: Input: nums = [1, 1, 0, -1, -2] Output: 2 Example 5: Input: nums = [2, 3, 4, 5, 6] Output: 1 Constraints: * 1 <= nums.length <= 300 * -10^6 <= nums[i] <= 10^6","solution":"def first_missing_positive(nums): Find the smallest missing positive integer from the given list nums. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"A popular web-based company is developing a new feature that allows users to customize their notification preferences for different events. The company’s software receives a sequence of events and needs to determine how many unique notifications it should send to each user based on their customized preferences. Each event is identified by a string and each user has a set of preferences, which are also strings. If an event matches a user’s preference, they should receive a notification for that event. However, multiple occurrences of the same event in the sequence only lead to one notification. Write a program to help the company determine the total number of unique notifications each user would receive. -----Input:----- The first line contains one integer N indicating the number of users. The next N blocks of lines each describe a single user’s preferences. The first line of each block contains one integer M (the number of preferences for the user), followed by M lines, each containing one preference string. Following the users\' data, the next line contains one integer K indicating the number of events. The next K lines each contain one event string. -----Output:----- The output should contain N integers, each representing the number of unique notifications received by the corresponding user. -----Constraints:----- - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq K leq 1000 - All strings consist of alphanumeric characters and have a length of at most 50. -----Sample Input----- 2 3 login purchase logout 2 comment share 6 login logout login purchase login comment -----Sample Output----- 3 1","solution":"def unique_notifications(user_preferences, events): Determines the total number of unique notifications each user receives based on their preferences. :param user_preferences: List of sets containing preferences of each user :param events: List of event strings :return: List of integers representing the number of unique notifications for each user unique_events = set(events) notifications = [] for preferences in user_preferences: notification_count = len(preferences.intersection(unique_events)) notifications.append(notification_count) return notifications def process_input(n, user_data, k, event_data): user_preferences = [] index = 0 for _ in range(n): m = int(user_data[index]) preferences = set(user_data[index + 1: index + 1 + m]) user_preferences.append(preferences) index += 1 + m events = event_data return unique_notifications(user_preferences, events)"},{"question":"You are given a string containing only letters and digits. Your task is to implement a function that determines if the string is a valid \\"password\\". The rules for a valid password are as follows: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. Implement the function `is_password_valid(password: str) -> bool` that checks whether the given password follows all the listed rules. # Example ```python is_password_valid(\\"Password123\\") # returns True is_password_valid(\\"pass123\\") # returns False (less than 8 characters) is_password_valid(\\"PASSWORD123\\") # returns False (no lowercase letter) is_password_valid(\\"password123\\") # returns False (no uppercase letter) is_password_valid(\\"Password\\") # returns False (no digit) is_password_valid(\\"Passw0rd\\") # returns True ``` # Constraints - The input string `password` will have a maximum length of 100 characters. # Note - Ensure that your function follows the stated rules and handles edge cases appropriately.","solution":"def is_password_valid(password: str) -> bool: Checks if the given password is valid based on the specified rules. if len(password) < 8: return False has_upper = False has_lower = False has_digit = False for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True return has_upper and has_lower and has_digit"},{"question":"You are given an array of integers representing various coins. Your task is to find the minimum number of coins required to make a specific amount of money. If it\'s not possible to form the amount using the given coins, return -1. You may assume that you have an infinite number of each kind of coin. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - First line of each test case will contain two integers N and M. - Second line contains N integers, the values of the coins. -----Output:----- - For each test case, print in a new line the minimum number of coins required to make the amount M. If it\'s not possible, print -1. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - 1 leq M leq 10^4 - 1 leq coin values leq 10^3 -----Sample Input:----- 2 3 11 1 2 5 4 7 2 3 5 7 -----Sample Output:----- 3 1 -----EXPLANATION:----- Sample 1: To form the amount 11, the minimum number of coins needed is 3 (11 = 5 + 5 + 1), so the output is 3. Sample 2: To form the amount 7, the minimum number of coins needed is 1 (7 = 7), so the output is 1.","solution":"def min_coins_to_make_amount(n, m, coins): This function returns the minimum number of coins required to make amount m using the available coins. If it\'s not possible, it returns -1. # Initialize the dp array with an amount larger than possible dp = [float(\'inf\')] * (m + 1) dp[0] = 0 # Base case: 0 coins to make amount 0 for coin in coins: for x in range(coin, m + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1 def process_test_cases(T, test_cases): results = [] for i in range(T): n, m = test_cases[i][0] coins = test_cases[i][1] results.append(min_coins_to_make_amount(n, m, coins)) return results"},{"question":"=====Problem Statement===== You are given an array of integers. Your task is to find the element that appears only once in the array while all other elements appear exactly twice. You must find the element with a linear runtime complexity without using extra memory apart from a few variables for the process. =====Example===== Input: [4, 1, 2, 1, 2] Output: 4 Input: [2, 2, 3, 3, 5] Output: 5 =====Input Format===== A single line containing a space-separated list of integers. =====Output Format===== Print the integer that appears only once.","solution":"def find_unique_element(arr): Finds the element that appears only once in the array where all other elements appear exactly twice. The solution uses XOR to achieve this with linear runtime and constant space complexity. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped after raining at each elevation level, calculate how much water it is able to trap after raining. The input list may vary in length, but you can assume that each elevation level is a non-negative integer. # Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above list represents the following elevation map: ``` ☐ ☐████☐ ☐█☐███☐ ☐☐ ☐█☐██☐██☐ ☐█☐███☐██☐ 0,1,0,2,1,0,1,3,2,1,2,1 ``` In this map, 6 units of rain water are trapped. # Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The above list represents the following elevation map: ``` ☐☐☐☐☐☐☐☐☐☐☐☐∘∘☐☐☐☐☐☐ ☐████∘☐☐∘☐☐∘☐☐∘☐☐██☐☐ ☐██☐☐☐██☐☐██∘∘████∘∘██∘∘██ ☐████∘☐☐██∘∘████☐☐██∘ ☐☐ ``` In this map, 9 units of rain water are trapped. # Note: 1 <= length(list) <= 100000","solution":"def trap(height): Calculate the amount of rainwater trapped after raining. :param height: List of non-negative integers representing the heights of elevation levels. :return: Integer representing the amount of rainwater trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate total water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"=====Problem Statement===== You are given a list of integers. Your job is to determine whether the list represents a valid arithmetic progression. An arithmetic progression is a sequence of numbers where the difference between consecutive terms is constant. If the list is a valid arithmetic progression, print \\"YES\\". If the list is not a valid arithmetic progression, print \\"NO\\". =====Input Format===== The first line will contain the number of test cases, N. The first line of each test case contains the number of elements in the list. The second line of each test case contains the space separated integers of the list. =====Constraints===== 0 < N < 21 1 < Number of elements in the list < 1001 -10000 < Integer in list < 10000 =====Output Format===== Output \\"YES\\" or \\"NO\\" for each test case on separate lines.","solution":"def is_arithmetic_progression(nums): Check if the given list of integers `nums` is a valid arithmetic progression. :param nums: List[int] - list of integers :return: str - \\"YES\\" if the list is a valid arithmetic progression, \\"NO\\" otherwise if len(nums) < 2: return \\"NO\\" # Less than 2 elements can\'t form an arithmetic progression # Calculate the common difference difference = nums[1] - nums[0] # Check if all consecutive elements have the same difference for i in range(2, len(nums)): if nums[i] - nums[i - 1] != difference: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Process a list of test cases to determine if each list is a valid arithmetic progression. :param test_cases: List[List[int]] :return: List[str] - \\"YES\\" or \\"NO\\" for each test case results = [] for lst in test_cases: results.append(is_arithmetic_progression(lst)) return results"},{"question":"Julia is a botanist who specializes in studying the growth patterns of specific tree species. She collects data on tree heights for her research. Each year, she measures the heights of several trees in a forest and records the data in an array. Julia needs your help to analyze the growth trends over the years. Specifically, she wants to know the year in which the average height of the trees was the highest. Write a function `bestGrowthYear` that takes in one argument: - `growthData`: a list of dictionaries, where each dictionary represents the data for a particular year. Each dictionary contains two keys: - `\'year\'`: an integer representing the year. - `\'heights\'`: a list of integers representing the heights of the trees measured in that year. The function should return the year in which the average height of the trees was the highest. If multiple years have the same highest average height, return the earliest year among them. Example: ```python growthData = [ {\'year\': 2018, \'heights\': [3, 5, 7, 10]}, {\'year\': 2019, \'heights\': [2, 3, 5, 6, 7]}, {\'year\': 2020, \'heights\': [10, 13, 11]}, ] bestGrowthYear(growthData) # should return 2020 ``` Note: - The \'heights\' list for each year will have at least one measurement. - The `growthData` list will contain data for at least one year. - In case of a tie for the highest average height, return the earliest year.","solution":"def bestGrowthYear(growthData): Returns the year with the highest average tree height. If multiple years have the same highest average, return the earliest year among them. max_avg_height = float(\'-inf\') best_year = None for data in growthData: year = data[\'year\'] heights = data[\'heights\'] avg_height = sum(heights) / len(heights) if avg_height > max_avg_height or (avg_height == max_avg_height and (best_year is None or year < best_year)): max_avg_height = avg_height best_year = year return best_year"},{"question":"In a village, there is a row of `n` houses that need to be painted. Each house can be painted with one of three colors: red, blue, or green. The cost of painting each house with a certain color is represented by a `n x 3` cost matrix where `costs[i][0]` is the cost of painting house `i` with red, `costs[i][1]` is the cost of painting house `i` with blue, and `costs[i][2]` is the cost of painting house `i` with green. You need to paint all the houses such that no two adjacent houses have the same color and the total cost to paint all the houses is minimized. Return the minimum cost to paint all the houses. Example 1: Input: costs = [[17,2,17],[16,16,5],[14,3,19]] Output: 10 Explanation: Paint the first house with blue, the second house with green, and the third house with blue. Minimum cost: 2 + 5 + 3 = 10. Example 2: Input: costs = [[7,6,2]] Output: 2 Explanation: Paint the house with green, Minimum cost: 2. Constraints: - `costs.length == n` - `costs[i].length == 3` - `1 <= n <= 100` - `1 <= costs[i][j] <= 20`","solution":"def minCost(costs): Returns the minimum cost to paint all houses such that no two adjacent houses have the same color. :param costs: List[List[int]]: The costs to paint each house in three different colors :return: int: The minimum cost to paint all houses if not costs: return 0 n = len(costs) for i in range(1, n): costs[i][0] += min(costs[i-1][1], costs[i-1][2]) costs[i][1] += min(costs[i-1][0], costs[i-1][2]) costs[i][2] += min(costs[i-1][0], costs[i-1][1]) return min(costs[-1])"},{"question":"Given an array of integers, find the length of the longest subarray with a sum less than or equal to a given number \'k\'. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4) — the elements of the array. The third line contains a single integer k (0 ≤ k ≤ 10^9) — the upper limit for the subarray sum. -----Output----- Print a single integer — the length of the longest subarray with a sum less than or equal to k. -----Examples----- Input 5 1 2 3 4 5 9 Output 3 Input 5 2 1 5 1 3 4 Output 2 ------Explanation------ In the first example, the subarray [2, 3, 4] is the longest subarray with a sum of 9, which is equal to the given sum k. In the second example, the subarray [2, 1] is the longest subarray with a sum of 3, which is less than the given sum k.","solution":"def longest_subarray_with_sum_at_most_k(n, arr, k): Finds the length of the longest subarray with a sum less than or equal to k. Parameters: n (int): Length of the array arr (list of int): Array of integers k (int): Upper limit for the subarray sum Returns: int: Length of the longest subarray with sum <= k current_sum = 0 start = 0 max_length = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum <= k: max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Description Implement a function `most_frequent_element` that takes a list of integers and returns the element that appears most frequently. If multiple elements have the same highest frequency, return the smallest element among them. # Example ```python most_frequent_element([1, 3, 2, 1, 4, 1, 3, 4, 4]) == 1 most_frequent_element([5, 5, 5, 3, 3, 3, 2]) == 3 most_frequent_element([10, 20, 10, 10, 30, 30]) == 10 most_frequent_element([6, 6, 6, 7, 7, 7, 8, 8]) == 6 most_frequent_element([9, 1, 2, 2, 9, 9, 1, 1, 2, 2]) == 2 ``` Note: - In the list `[1, 3, 2, 1, 4, 1, 3, 4, 4]`, 1 and 4 both appear 3 times, but 1 is smaller than 4. - In the list `[5, 5, 5, 3, 3, 3, 2]`, 5 and 3 both appear 3 times, but 3 is smaller than 5.","solution":"def most_frequent_element(lst): Returns the element that appears most frequently in the list. If multiple elements have the same highest frequency, returns the smallest element among them. if not lst: return None from collections import Counter count = Counter(lst) max_freq = max(count.values()) # Filter elements with the maximum frequency max_freq_elements = [key for key, value in count.items() if value == max_freq] # Return the smallest element among those with the maximum frequency return min(max_freq_elements)"},{"question":"A scientist is working on a set of experiments that involve heating metal rods. To optimize the heating process, he needs to develop an algorithm that will help him to find the maximum length of rods that can be obtained by cutting up the given rods into smaller pieces of a specific length. Given an array of integers representing the lengths of `n` rods and a positive integer `k` representing the specific length of each piece, write a function that computes the maximum number of pieces of length `k` that can be obtained by cutting the rods. For example, suppose you are given rods of lengths `[10, 15, 20]` and `k` is `5`, the result would be `9` (2 pieces from the first rod, 3 pieces from the second rod, and 4 pieces from the third rod). -----Function Signature----- ```python def max_pieces(rods: list, k: int) -> int: ``` -----Input----- - An array of integers `rods` where each element represents the length of a rod. - An integer `k` representing the length of each piece. -----Output----- - An integer representing the maximum number of pieces. -----Constraints----- - `1 <= len(rods) <= 10^5` - `1 <= rods[i] <= 10^9` - `1 <= k <= 10^9` -----Example----- ```python max_pieces([10, 15, 20], 5) ``` -----Output----- ```python 9 ``` -----Explanation----- The rods can be cut into pieces of the desired length as follows: - The first rod of length 10 can be cut into 2 pieces of length 5. - The second rod of length 15 can be cut into 3 pieces of length 5. - The third rod of length 20 can be cut into 4 pieces of length 5. Thus, the total number of pieces is `2 + 3 + 4 = 9`.","solution":"def max_pieces(rods: list, k: int) -> int: Returns the maximum number of pieces of length k that can be obtained by cutting the rods. if k <= 0: raise ValueError(\\"k should be a positive integer\\") total_pieces = sum(rod // k for rod in rods) return total_pieces"},{"question":"Write a function `partition_labels(s)` that takes a string `s` and returns a list of integers representing the lengths of partitions such that each letter appears in at most one part. The partitions are determined by finding the farthest occurrence of each letter in the string and ensuring that each partition extends up to the farthest occurrence of any character in that partition. Example: ```python partition_labels(\\"ababcbacadefegdehijhklij\\") # Should return [9, 7, 8] ```","solution":"def partition_labels(s): Given a string s, partitions it such that each letter appears in at most one part. Returns a list of integers representing the lengths of partitions. # Find the last occurrence of each character in the string last_occurrence = {char: idx for idx, char in enumerate(s)} partitions = [] start = 0 end = 0 for idx, char in enumerate(s): end = max(end, last_occurrence[char]) # When we reach the end of the current partition if idx == end: partitions.append(end - start + 1) start = idx + 1 return partitions"},{"question":"In mathematics, a factorial of a non-negative integer ( n ) is the product of all positive integers less than or equal to ( n ). That is, for any positive integer ( n ): [ n! = n times (n-1) times (n-2) times ldots times 1 ] For example, [ 5! = 5 times 4 times 3 times 2 times 1 = 120 ] Given an integer ( n ), write a function `factorial_string` that returns a string representation of the factorial of ( n ). ```python factorial_string(5) returns \'120\' ``` If ( n ) is 0, the factorial of 0 is defined as 1. Example test cases: ```python factorial_string(3) == \'6\' factorial_string(0) == \'1\' factorial_string(10) == \'3628800\' ```","solution":"def factorial_string(n): Returns a string representation of the factorial of n. if n == 0: return str(1) factorial = 1 for i in range(1, n + 1): factorial *= i return str(factorial)"},{"question":"Given two input strings `str1` and `str2`, write a function to determine if `str2` can be formed by rearranging the characters of `str1` and inserting exactly one additional character. If it is possible, return the added character, otherwise return an empty string. Here are some example scenarios and explanations: ``` Input: \\"abc\\", \\"abcd\\" Output: \\"d\\" Explanation: By rearranging \\"abc\\" and adding the character \'d\', we can form \\"abcd\\". Input: \\"aabbcc\\", \\"abacabc\\" Output: \\"a\\" Explanation: By rearranging \\"aabbcc\\" and adding the character \'a\', we can form \\"abacabc\\". Input: \\"xyz\\", \\"yxz\\" Output: \\"\\" Explanation: No extra character is added, so the output is an empty string. Input: \\"hello\\", \\"hhelloo\\" Output: \\"h\\" Explanation: By rearranging \\"hello\\" and adding the character \'h\', we can form \\"hhelloo\\". ``` **Function Signature:** ```python def find_added_character(str1: str, str2: str) -> str: pass ``` **Constraints:** - All characters in the strings are lowercase English letters. - The length of `str2` is exactly one more than the length of `str1`. - The solution should handle cases efficiently and correctly within the problem constraints.","solution":"def find_added_character(str1: str, str2: str) -> str: Determine if str2 can be formed by rearranging str1 and adding exactly one character. If possible, return the added character, otherwise return an empty string. from collections import Counter # Use Counter to count frequency of each character in both strings counter1 = Counter(str1) counter2 = Counter(str2) # Iterate through the characters and their counts in counter2 for char, count in counter2.items(): # If the character count in counter2 is one more than in counter1, return that character if count == counter1[char] + 1: return char # If no such character is found, return an empty string (though, by constraint this should never occur) return \\"\\""},{"question":"Given a matrix of dimension m x n consisting of non-negative integers, determine if you can remove exactly one number from each row such that the resulting sum of the selected numbers from each row equals a target value S. Example 1: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], S = 15 Output: True Explanation: Select 3 from the first row, 5 from the second row, and 7 from the third row. The sum is 3 + 5 + 7 = 15. Example 2: Input: matrix = [[1, 10], [2, 6], [3, 1]], S = 12 Output: False Explanation: There is no combination of one number from each row that sums to 12. Constraints: - The matrix will have at least 1 row and 1 column (1 ≤ m, n ≤ 100). - Each element in the matrix is a non-negative integer not exceeding 1000. - 0 ≤ S ≤ 10^6","solution":"from itertools import product def can_form_sum(matrix, S): Determines if you can remove exactly one number from each row such that the resulting sum equals a target value S. # Get all combinations of picking one element from each row all_combinations = product(*matrix) # Check if any combination sums up to S for combination in all_combinations: if sum(combination) == S: return True return False"},{"question":"Given an array of `n` integers, you need to form the largest possible number by concatenating the array elements. The number formed should not contain any leading zeros unless the number is zero itself. Write a function that takes as input an array of non-negative integers and returns a string representing the largest possible number that can be formed by concatenating the elements of the array. ---Input--- - The first line contains an integer `t` (1 leq t leq 10^4) — the number of test cases. - The first line of each test case contains a single integer `n` (1 leq n leq 10^3) — the number of integers in the array. - The second line of each test case contains `n` non-negative integers separated by a space. It is guaranteed that the sum of all `n` across all test cases does not exceed 10^4. ---Output--- For each test case, output a single line containing the largest possible number that can be formed. ---Example--- Input: 4 3 3 30 34 4 9 5 34 3 5 20 1 9 4 0 6 0 0 0 0 0 0 Output: 34330 95343 942010 0 ---Note--- In the first test case, by concatenating the elements in the order `3`, `34`, `30`, the largest possible number `34330` is formed. In the second test case, by concatenating the elements in the order `9`, `5`, `34`, `3`, the largest possible number `95343` is formed.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest number possible by concatenating the given integers. # Custom comparator for sorting def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert all integers to strings to form the basis of comparison nums_str = list(map(str, nums)) # Sort using the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Concatenate sorted numbers result = \'\'.join(nums_str) # Edge case: If the largest number is \'0\', it means all numbers are \'0\' if result[0] == \'0\': return \'0\' return result def solve(test_cases): results = [] for case in test_cases: n, nums = case largest_num = largest_number(nums) results.append(largest_num) return results"},{"question":"Given an integer array ```arr```, write a function ```untangle_list()``` that returns a new array containing the prime numbers from the input array followed by the non-prime numbers, both groups sorted in ascending order. The function signature is: ```python def untangle_list(arr: List[int]) -> List[int]: # Your code here ``` **Examples:** ```python untangle_list([11, 4, 6, 7, 9, 10, 5]) == [5, 7, 11, 4, 6, 9, 10] untangle_list([29, 15, 14, 23, 8, 3]) == [3, 23, 29, 8, 14, 15] ``` If the input array is empty, return an empty array: ```python untangle_list([]) == [] ``` If there are no prime numbers in the input array, return only sorted non-prime numbers: ```python untangle_list([8, 10, 12, 4, 6]) == [4, 6, 8, 10, 12] ``` If all numbers in the input array are prime numbers, return only sorted prime numbers: ```python untangle_list([19, 2, 17, 11, 5]) == [2, 5, 11, 17, 19] ``` **Constraints:** - Each element in the array will be a positive integer greater than 1. - The maximum length of the input array is 10^6. - Optimize the function to handle large input sizes efficiently.","solution":"from typing import List def is_prime(n: int) -> bool: Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def untangle_list(arr: List[int]) -> List[int]: Returns a new array containing the prime numbers from the input array followed by the non-prime numbers, both groups sorted in ascending order. primes = [] non_primes = [] for num in arr: if is_prime(num): primes.append(num) else: non_primes.append(num) primes.sort() non_primes.sort() return primes + non_primes"},{"question":"# Problem Statement You are given a string S consisting of lowercase letters (a-z). You can perform two types of operations on this string: 1. Replace the character at a specific position with another character. 2. Calculate the number of distinct characters in a given substring. Formally, the operations are defined as follows: - Type 1: `1 i c` - Replace the character at position `i` with character `c`. - Type 2: `2 l r` - Calculate the number of distinct characters in the substring from index `l` to `r` (inclusive). Input: - The first line contains the string `S` of length `n`. - The second line contains an integer `Q`, the number of queries. - The next `Q` lines contain the queries, each of which can be of type 1 or type 2. Output: - For each query of type 2, output the number of distinct characters in the specified substring. Constraints: - `1 <= n <= 100,000` - `1 <= Q <= 100,000` - `1 <= i, l, r <= n` - `S` will consist of lowercase letters only. - In type 1 queries, `c` will be a lowercase letter. Subtask 1: (30 points) - `1 <= n <= 1,000` - `1 <= Q <= 1,000` Subtask 2: (70 points) - Original constraints # Sample Input: ``` abcda 5 2 1 5 1 3 z 2 1 5 1 5 a 2 1 5 ``` # Sample Output: ``` 4 4 5 ``` # Explanation: - Initially, the string is \\"abcda\\". - The first query asks for the number of distinct characters from index 1 to 5, which are \\"a\\", \\"b\\", \\"c\\", \\"d\\" - the answer is 4. - The second query replaces the character at index 3 with \\"z\\", so the string becomes \\"abzda\\". - The third query again asks for distinct characters from index 1 to 5, which are now \\"a\\", \\"b\\", \\"z\\", \\"d\\" - the answer is still 4. - The fourth query replaces the character at index 5 with \\"a\\", resulting in the string \\"abzda\\". - The fifth query asks for distinct characters from index 1 to 5, finding \\"a\\", \\"b\\", \\"z\\", \\"d\\", \\"a\\" - the answer is 5.","solution":"def solve(s, queries): Processes a list of queries on the given string s. Parameters: s (str): The initial string. queries (List[Tuple[int, ...]]): List of queries where each query is a tuple. Returns: List[int]: A list of results for type 2 queries. results = [] s = list(s) # Convert string to list for mutability for query in queries: if query[0] == 1: # Type 1 query: Replace character _, i, c = query s[i-1] = c # Using 0-based index elif query[0] == 2: # Type 2 query: Count distinct characters _, l, r = query substring = s[l-1:r] distinct_characters = set(substring) results.append(len(distinct_characters)) return results"},{"question":"You are given an integer array `A` consisting of `N` elements, and a number `M`. You can perform the following operation: 1. Choose any two elements `x` and `y` from the array and replace them with their sum `x + y`. Your goal is to determine whether it is possible to transform the array such that, after a series of operations, the sum of the elements in the array becomes exactly `M`. # Constraints - 1 ≤ N ≤ 100,000 - 1 ≤ A[i] ≤ 10^9 - 1 ≤ M ≤ 10^18 # Input Input is given from Standard Input in the following format: ``` N M A[1] A[2] ... A[N] ``` # Output Print \\"YES\\" if it is possible to make the sum of the elements exactly `M` using the operation described. Otherwise, print \\"NO\\". # Sample Input 1 ``` 5 15 1 2 3 4 5 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 4 50 7 10 13 14 ``` # Sample Output 2 ``` NO ``` # Explanation For the first sample input, we can achieve a sum of 15 by summing the elements as follows: - `[1, 2, 3, 4, 5]` (initial array) - Replace `1 + 2` → `[3, 3, 4, 5]` - Replace `3 + 3` → `[6, 4, 5]` - Replace `6 + 4` → `[10, 5]` - Replace `10 + 5` → `[15]` For the second sample input, regardless of how we sum the elements, it is impossible to reach the sum of 50.","solution":"def can_transform_to_sum(N, M, A): Determines if it is possible to transform the array such that the sum of the elements becomes exactly M using the given operation. return sum(A) == M"},{"question":"You are given an N x N matrix filled with different integers. Each row and each column of the matrix is sorted in ascending order. You need to find the Kth smallest element in the matrix. -----Input:----- - The first line of the input contains two integers, N and K (1 ≤ N ≤ 300 and 1 ≤ K ≤ N*N). - Each of the next N lines contains N integers representing the matrix. -----Output:----- Return the Kth smallest element in the matrix. -----Example:----- Input: 3 5 1 5 9 10 11 13 12 13 15 Output: 11 Explanation: - The elements in the order of their appearance are: [1, 5, 9, 10, 11, 12, 13, 13, 15] - The 5th smallest element is 11. -----Constraints:----- - 1 ≤ N ≤ 300 - 1 ≤ K ≤ N*N","solution":"import heapq from typing import List def kth_smallest(matrix: List[List[int]], k: int) -> int: Find the Kth smallest element in an N x N sorted matrix. Parameters: - matrix: A list of N lists, each containing N sorted integers. - k: The position of the smallest element to find. Returns: - The Kth smallest element in the matrix. N = len(matrix) min_heap = [] for r in range(min(N, k)): # Only need to consider the first k rows heapq.heappush(min_heap, (matrix[r][0], r, 0)) count, number = 0, 0 while min_heap: number, r, c = heapq.heappop(min_heap) count += 1 if count == k: break if c + 1 < N: heapq.heappush(min_heap, (matrix[r][c+1], r, c+1)) return number"},{"question":"Write a function that determines the number of ways to climb a staircase of N steps if you can only take 1 or 2 steps at a time. -----Input:----- - First line will contain a single integer N. -----Output:----- For each testcase, output in a single line containing the number of ways to climb the staircase. -----Constraints----- - 1 leq N leq 1000 -----Sample Input:----- 5 -----Sample Output:----- 8","solution":"def num_ways_to_climb(N): Returns the number of ways to climb a staircase of N steps if you can only take 1 or 2 steps at a time. if N == 0: return 1 if N == 1: return 1 ways = [0] * (N + 1) ways[0] = 1 ways[1] = 1 for i in range(2, N + 1): ways[i] = ways[i - 1] + ways[i - 2] return ways[N]"},{"question":"You are tasked with creating a new square matrix of size n that follows a specific pattern. Each element of the matrix must be either a zero or a one, arranged in a particular way as described below. The matrix should have its main diagonal filled with ones, and every element to the right of the main diagonal should also be one. All other elements in the matrix should be zero. For example, a matrix of size 5 should look like this: ``` 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 0 0 0 1 ``` You have to write a program that constructs this matrix and prints it. -----Input----- The input consists of a single integer n (1 leq n leq 100) – the size of the matrix. -----Output----- Output the matrix of size n according to the specified pattern. Print each row of the matrix on a new line, with each element separated by a space. -----Example----- Input 4 Output ``` 1 1 1 1 0 1 1 1 0 0 1 1 0 0 0 1 ``` Note: In this example, the matrix is of size 4, and it adheres to the pattern where the main diagonal and the elements to its right are ones, while the rest of the elements are zeros.","solution":"def create_matrix(n): Create a square matrix of size n with the specified pattern. Parameters: n (int): Size of the matrix Returns: list of list of int: n x n matrix with the pattern matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(i, n): matrix[i][j] = 1 return matrix"},{"question":"Alice is organizing her bookshelf and wants to categorize books based on their titles. Given a list of book titles represented as strings, she wants to count the number of titles that start with a vowel (A, E, I, O, U, both uppercase and lowercase). Write a function `count_vowel_titles(titles)` that takes a list of strings `titles`, and returns the count of titles that start with a vowel. The function should handle the following cases: - The list can be empty. - Titles can contain special characters, numbers, and spaces, but a valid title cannot be an empty string. Examples: ``` count_vowel_titles([\\"Ender\'s Game\\", \\"The Hobbit\\", \\"Othello\\", \\"anna karenina\\", \\"1984\\"]) should return 3 count_vowel_titles([\\"Gone with the Wind\\", \\"Pride and Prejudice\\", \\"To Kill a Mockingbird\\"]) should return 2 count_vowel_titles([\\"The Catcher in the Rye\\", \\"the great gatsby\\", \\"Moby Dick\\"]) should return 0 count_vowel_titles([]) should return 0 count_vowel_titles([\\"\\"]) should return 0 ``` Write the `count_vowel_titles(titles)` function to solve the task.","solution":"def count_vowel_titles(titles): Counts the number of titles that start with a vowel (A, E, I, O, U). Args: titles (list of str): List of book titles. Returns: int: Number of titles starting with a vowel. vowels = \\"AEIOUaeiou\\" count = 0 for title in titles: if title and title[0] in vowels: count += 1 return count"},{"question":"Given a string `s`, return the length of the longest substring without repeating characters. Write a function `lengthOfLongestSubstring(s)` that implements this. The function should return an integer representing the length of the longest substring with all unique characters.","solution":"def lengthOfLongestSubstring(s): Returns the length of the longest substring without repeating characters. char_map = {} start = 0 max_length = 0 for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Aina is learning about strings and subsequences. She came across an interesting problem and needs your help to solve it! Given a string S consisting of lowercase English letters, find the length of the largest palindromic subsequence. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- - The first line contains a single integer T denoting the number of test cases. - Each of the next T lines contains a single string S. -----Output----- - For each test case, output a single integer, the length of the largest palindromic subsequence in the given string. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 1000 -----Subtasks----- - Subtask 1 [40 points]: 1 leq |S| leq 100 - Subtask 2 [60 points]: 1 leq |S| leq 1000 -----Sample Input----- 2 bbabcbcab abcd -----Sample Output----- 7 1 -----Explanation----- In the first test case, the largest palindromic subsequence is \\"babcbab\\" with a length of 7. In the second test case, the largest palindromic subsequence can have a length of 1, as there are no repeated characters to form a longer palindrome.","solution":"def longest_palindromic_subsequence(S): Returns the length of the largest palindromic subsequence in the given string S. n = len(S) dp = [[0]*n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(test_cases): results = [] for S in test_cases: results.append(longest_palindromic_subsequence(S)) return results"},{"question":"Write a function filterAndCount that takes in two parameters, an array of integers arr and an integer k. The function should filter out all elements from the array that are greater than k and then return the number of elements remaining in the filtered array. The function should return -1 if the array is empty or if k is not a positive integer. filterAndCount([1, 3, 5, 7, 9], 5) should return 3 because the filtered array will be [1, 3, 5] and it contains 3 elements. filterAndCount([10, 20, 30, 40], 25) should return 2 because the filtered array will be [10, 20] and it contains 2 elements. filterAndCount([], 5) should return -1 because the array is empty. filterAndCount([1, 2, 3, 4], -5) should return -1 because k is not a positive integer.","solution":"def filterAndCount(arr, k): Filters out elements from arr that are greater than k and returns the count of remaining elements. Returns -1 if arr is empty or k is not a positive integer. if not arr or not isinstance(k, int) or k <= 0: return -1 filtered_array = [x for x in arr if x <= k] return len(filtered_array)"},{"question":"# Fibonacci Sum *In the Fibonacci sequence, each number is the sum of the two preceding ones*, **_starting from 0 and 1_**, usually denoted as *F(n)* to represent *the nth Fibonacci number*. Given a number N, **_calculate the sum_** of the first N Fibonacci numbers, starting from F(0). ___ # Task **_Given_** an integer N, calculate the sum of the first N Fibonacci numbers. ___ # Notes * **_The given number N will always be a positive integer (N > 0)_**. ___ # Input >> Output Examples: ```python 1- sumFib(5) ==> return (7) ``` **_Explanation_**: **_The first five Fibonacci numbers are_** ```0, 1, 1, 2, 3```, **_their sum is_** ```0 + 1 + 1 + 2 + 3 = 7```. ___ ```python 2- sumFib(7) ==> return (20) ``` **_Explanation_**: **_The first seven Fibonacci numbers are_** ```0, 1, 1, 2, 3, 5, 8```, **_their sum is_** ```0 + 1 + 1 + 2 + 3 + 5 + 8 = 20```. ___ ```python 3- sumFib(10) ==> return (88) ``` **_Explanation_**: **_The first ten Fibonacci numbers are_** ```0, 1, 1, 2, 3, 5, 8, 13, 21, 34```, **_their sum is_** ```0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 = 88```. ___ Enjoy Coding !!","solution":"def sumFib(N): Calculates the sum of the first N Fibonacci numbers. Parameters: N (int): The number of Fibonacci numbers to sum. Returns: int: The sum of the first N Fibonacci numbers. if N <= 0: return 0 fib_nums = [0, 1] for i in range(2, N): next_fib = fib_nums[-1] + fib_nums[-2] fib_nums.append(next_fib) return sum(fib_nums[:N])"},{"question":"Given an array of integers, return an array consisting of all the leaders in the array. An element is a leader if it is greater than all the elements to its right side in the array. The rightmost element is always a leader. Example 1: Input: [16, 17, 4, 3, 5, 2] Output: [17, 5, 2] Explanation: - 17 is greater than all the elements to its right, hence leader. - 5 is greater than all the elements to its right, hence leader. - The rightmost element 2 is always a leader. Example 2: Input: [1, 2, 3, 4, 0] Output: [4, 0] Explanation: - 4 is greater than all the elements to its right, hence leader. - The rightmost element 0 is always a leader. Note: - The length of the input array will be in the range [1, 1000]. - Each element in the array will be in the range [-1000, 1000].","solution":"def find_leaders(arr): Finds all the leaders in the array. A leader is an element that is greater than all elements to its right. The rightmost element is always considered a leader. if not arr: return [] n = len(arr) leaders = [arr[-1]] # The rightmost element is always a leader max_from_right = arr[-1] # Traverse the array from right to left for i in range(n-2, -1, -1): if arr[i] > max_from_right: leaders.append(arr[i]) max_from_right = arr[i] # Since leaders are collected in reverse order, we reverse the list return leaders[::-1]"},{"question":"Write a function that takes a scrambled string and determines whether it can be rearranged to form a palindrome. A palindrome is a word or phrase that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should return `True` if the string can be rearranged to form a palindrome and `False` otherwise. Example: ```python can_form_palindrome(\\"Tact Coa\\") # => True can_form_palindrome(\\"Hello\\") # => False ``` Hints: - Ignore spaces, punctuation, and capitalization. - Consider the properties of palindromes.","solution":"def can_form_palindrome(s): Determines if a scrambled string can be rearranged to form a palindrome. # Normalize the string: remove non-alphabetic characters and convert to lowercase normalized_s = \'\'.join(char.lower() for char in s if char.isalpha()) # Count the occurrence of each character char_count = {} for char in normalized_s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to form a palindrome, there must be at most one character with an odd count return odd_count <= 1"},{"question":"=====Problem Statement===== In this task, you are to determine the highest possible product of any three distinct integers from an input list. =====Input Format===== A single line of input consisting of integers separated by spaces. =====Output Format===== A single integer output representing the maximum product of any three distinct integers from the input list. =====Constraints===== - The input list will contain at least three integers. - Each integer will be between -1000 and 1000. - The length of the input list will not exceed 10^5. Sample Input 1 10 2 6 5 3 Sample Output 300 Explanation From the input list, the triplet (10, 6, 5) yields the maximum product 10 * 6 * 5 = 300. Therefore, the output is 300.","solution":"def highest_product_of_three(nums): nums = sorted(nums) # Sort the input list # Calculating the product of highest three numbers max_product_1 = nums[-1] * nums[-2] * nums[-3] # Calculating the product of two smallest (negative, if any) and the largest number max_product_2 = nums[0] * nums[1] * nums[-1] return max(max_product_1, max_product_2)"},{"question":"Write a function to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy all the following rules: 1. Each of the digits 1-9 must occur exactly once in each row. 2. Each of the digits 1-9 must occur exactly once in each column. 3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. The \'.\' character indicates empty cells. Example 1: Input: [[\\"5\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"], [\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"], [\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"], [\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"], [\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"], [\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"], [\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"], [\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"], [\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"]] Output: [[\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"], [\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"], [\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"], [\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"], [\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"], [\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"], [\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"], [\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"], [\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"]] Note: You may assume that there will be only one unique solution.","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): # Check row for i in range(9): if board[row][i] == num: return False # Check column for i in range(9): if board[i][col] == num: return False # Check 3x3 block start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[i + start_row][j + start_col] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in \'123456789\': if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = \'.\' return False return True solve(board)"},{"question":"You have been given a list of strings. For each string, you need to determine if it is a palindrome after removing all non-alphanumeric characters and converting all letters to lowercase. Return a list of booleans indicating which strings are palindromes. A string is considered a palindrome if it reads the same backward as forward after the mentioned transformations. Function Signature: ```python def check_palindromes(strings: List[str]) -> List[bool]: ``` Input: - An array of strings `strings` containing at least one string and at most 100 strings. - Each string `strings[i]` contains at least 1 character and at most 200 characters. Output: - A list of boolean values where each boolean corresponds to whether the respective string in `strings` is a palindrome. Example: ```python # Input [\\"A man, a plan, a canal: Panama\\", \\"race a car\\", \\"No \'x\' in Nixon\\"] # Output [True, False, True] ``` Explanation: 1. \\"A man, a plan, a canal: Panama\\" is a palindrome after transformation: \\"amanaplanacanalpanama\\". 2. \\"race a car\\" is not a palindrome after transformation: \\"raceacar\\". 3. \\"No \'x\' in Nixon\\" is a palindrome after transformation: \\"noxinnixon\\".","solution":"import re def check_palindromes(strings): Returns a list of booleans indicating whether the respective strings are palindromes after transformation. results = [] for s in strings: # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is a palindrome results.append(cleaned == cleaned[::-1]) return results"},{"question":"A space exploration company is developing a control system for their new spaceship. The control system includes a segment to compute and display special sequences of numbers. The spaceship engineer in charge is seeking your help to code a function that meets the specified requirements. Your task is to create this function, focusing on a property called \\"summation sequence.\\" -----Input:----- - The first line will contain an integer N, representing the number of test cases. - Each test case consists of a single integer X provided in one line. -----Output:----- For each test case, output the following sequence: - A sequence starting from 1 up to the smallest integer S such that the sum of all integers from 1 to S is greater than or equal to X, followed by their sum. -----Constraints----- - 1 leq N leq 1000 - 1 leq X leq 1000 -----Sample Input:----- 4 3 6 11 1 -----Sample Output:----- 1 2 (3) 1 2 3 (6) 1 2 3 4 (10) 1 (1) -----EXPLANATION:----- In the first test case, the sequence is \\"1 2\\" because 1 + 2 = 3, which is equal to or greater than 3. We also show the summation in parentheses. In the second test case, the sequence is \\"1 2 3\\" because 1 + 2 + 3 = 6, which equals 6. In the third test case, the sequence is \\"1 2 3 4\\" because 1 + 2 + 3 + 4 = 10, which is the smallest sum greater than 11. In the fourth test case, the sequence is \\"1\\" because 1 = 1, which is the same as X.","solution":"def summation_sequence(test_cases): results = [] for X in test_cases: summation = 0 sequence = [] S = 1 while summation < X: summation += S sequence.append(S) S += 1 result = \\" \\".join(map(str, sequence)) + f\\" ({summation})\\" results.append(result) return results"},{"question":"Given a string `s` consisting of characters \'a\' and \'b\' only, determine the minimum number of transformations required to make the string a palindrome. A transformation can change an \'a\' to a \'b\', or a \'b\' to an \'a\'. *Example 1:* ```python s = \\"ab\\" min_transformations(s) # => 1 ``` - Change \'a\' to \'b\' or \'b\' to \'a\' to make the string \\"bb\\" or \\"aa\\", both of which are palindromes. *Example 2:* ```python s = \\"abbba\\" min_transformations(s) # => 0 ``` - The string is already a palindrome, so no transformations are needed. *Example 3:* ```python s = \\"aab\\" min_transformations(s) # => 1 ``` - Change the last \'a\' to \'b\' to make the string \\"aba\\", which is a palindrome. Constraints - The length of `s` is at most (10^4). - The string `s` consists only of the characters \'a\' and \'b\'.","solution":"def min_transformations(s): Determines the minimum number of transformations needed to make the string a palindrome. :param s: A string consisting of characters \'a\' and \'b\' only. :return: The minimum number of transformations required. n = len(s) transformations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: transformations += 1 return transformations"},{"question":"Implement a function `pairwise_adder` that takes a list of numbers and returns a new list containing the pairwise sums of the original list. Each element of the new list should be a sum of two consecutive elements from the input list. If the input list has fewer than two elements, return an empty list. Example: ```python pairwise_adder([1, 2, 3, 4]) # returns [3, 5, 7] because 1+2=3, 2+3=5, 3+4=7 pairwise_adder([10, -2, 3]) # returns [8, 1] because 10+(-2)=8, -2+3=1 pairwise_adder([5]) # returns [] because there\'s only one element pairwise_adder([]) # returns [] because the list is empty ``` Note: - The input list will contain only integers and can be of any length, including zero. - Your function should handle both positive and negative numbers. ```python def pairwise_adder(lst): # Your code here pass ```","solution":"def pairwise_adder(lst): Returns a new list containing the pairwise sums of the original list. Each element of the new list is a sum of two consecutive elements from the input list. if len(lst) < 2: return [] return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]"},{"question":"Ravi, a computer science student, accidentally deleted some important academic files from his computer and was very worried. However, he remembered that he had sent a backup of the files to his friend via email. The problem is that the backup files were named following a complex pattern, and Ravi has a list of patterns for which he needs to identify the corresponding files from the email. You are provided with a list of email filenames and a list of patterns. Your task is to determine for each pattern if there is any filename from the email list that matches the pattern. Here, a pattern is a string that may contain wildcard characters `?` and `*`. The wildcard `?` matches exactly one character, while the wildcard `*` matches zero or more characters of any type. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of a test case description contains an integer N denoting the number of filenames in the email. Each of the next N lines contains a string denoting a filename from the email. The next line contains an integer M denoting the number of patterns. Each of the next M lines contains a string denoting a pattern. -----Output----- For each test case, output M lines, each containing the string YES if there exists at least one filename that matches the pattern, and NO otherwise. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ M ≤ 50 - 1 ≤ length of any filename or pattern ≤ 20 -----Example----- Input: 1 3 file1.txt backup.docx report2023.pdf 2 *.txt f?le?.* Output: YES NO","solution":"import fnmatch def matches_patterns(filenames, patterns): results = [] for pattern in patterns: matched = any(fnmatch.fnmatch(filename, pattern) for filename in filenames) results.append(\\"YES\\" if matched else \\"NO\\") return results def solve(test_cases): results = [] for case in test_cases: filenames, patterns = case case_result = matches_patterns(filenames, patterns) results.append(case_result) return results # Example to process the provided input and call the solution function def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) filenames = [input_lines[index + i + 1] for i in range(n)] index += n + 1 m = int(input_lines[index]) patterns = [input_lines[index + i + 1] for i in range(m)] index += m + 1 test_cases.append((filenames, patterns)) results = solve(test_cases) for case_result in results: for result in case_result: print(result) # Code for taking input from the user if needed if __name__ == \\"__main__\\": input_data = 1 3 file1.txt backup.docx report2023.pdf 2 *.txt f?le?.* process_input(input_data)"},{"question":"You are given a grid of size `n x m` consisting of only the characters \'0\' and \'1\'. Each \'1\' represents land, and each \'0\' represents water. Connected \'1\'s (horizontally or vertically) form an island. Your task is to write a function that counts the number of distinct islands in the grid. Example Input: ```python grid = [ [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'1\', \'1\', \'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\', \'1\'] ] ``` Example Output: ```python num_islands(grid) = 3 ``` Explanation: - The first island consists of the \'1\'s in the top left corner and the land cells vertically and horizontally connected to them. - The second island is the standalone \'1\' in the third row and third column. - The third island consists of the \'1\'s in the bottom right corner and the land cells vertically and horizontally connected to them. Write a function `num_islands(grid)` that takes a 2D list of characters as an input and returns the number of distinct islands.","solution":"def num_islands(grid): This function returns the number of distinct islands in a given grid. def dfs(x, y): # Check bounds and if the current cell is water or already visited if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'0\': return # Mark this cell as visited by setting it to \'0\' grid[x][y] = \'0\' # Visit all neighboring cells (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) if not grid: return 0 num_of_islands = 0 # Traverse the grid for i in range(len(grid)): for j in range(len(grid[i])): # Start a DFS if a \'1\' is found if grid[i][j] == \'1\': num_of_islands += 1 dfs(i, j) return num_of_islands"},{"question":"Given a collection of meeting time intervals, intervals, where intervals[i] = [start_i, end_i], determine if a person could attend all meetings. Example 1: Input: [[0,30],[5,10],[15,20]] Output: false Example 2: Input: [[7,10],[2,4]] Output: true Note: - Intervals do not have to be in order. - An interval [a, b] represents a meeting starting at time a and ending at time b.","solution":"def can_attend_all_meetings(intervals): Determines if a person can attend all meetings given the intervals. Args: intervals (List[List[int]]): A list of meeting time intervals. Returns: bool: True if a person can attend all meetings, False otherwise. intervals.sort(key=lambda x: x[0]) # Sort intervals by start time for i in range(1, len(intervals)): if intervals[i][0] < intervals[i - 1][1]: # Check for overlap return False return True"},{"question":"Problem Statement: Decimal to Roman Numeral Converter In ancient Rome, numbers were written using a different numeral system from the one we use today. This system employed combinations of letters from the Latin alphabet to represent values. The seven symbols used in Roman numerals are as follows: | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Given a positive integer, convert it to a Roman numeral. The numeral must be built from the following rules: 1. Tens and units are formed according to the table above. 2. Roman numerals are written by combining symbols and adding their values. 3. When a smaller symbol appears before a larger one, it indicates subtraction. 4. When a smaller symbol appears after a larger one, it indicates addition. Examples: - 3 -> \\"III\\" - 4 -> \\"IV\\" - 9 -> \\"IX\\" - 58 -> \\"LVIII\\" - 1994 -> \\"MCMXCIV\\" Function Signature: ```python def int_to_roman(num: int) -> str: pass ```","solution":"def int_to_roman(num: int) -> str: Converts a given positive integer to a Roman numeral. :param num: Positive integer to convert, expected to be in the range 1 to 3999. :return: A string representing the Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"You must create a function, `merge_dicts`, that takes two dictionaries and returns a new dictionary containing key-value pairs from both dictionaries. If a key exists in both dictionaries, the value from the second dictionary should be used. Example: ```python print(merge_dicts({\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 4})) # Output: {\'a\': 1, \'b\': 3, \'c\': 4} ```","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. If a key exists in both dictionaries, the value from the second dictionary is used. Args: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing key-value pairs from both dictionaries. merged_dict = dict1.copy() # Make a copy of the first dictionary merged_dict.update(dict2) # Update the copy with key-value pairs from the second dictionary return merged_dict"},{"question":"Write a function that accepts an integer `n` and returns the `n`-th number in the series where the series is constructed as follows: - Start with the number 1. - Alternate between adding 2 and 3 to the previous number in the series. For example: - The 1st number in the series is 1. - The 2nd number in the series is 3 (1+2). - The 3rd number in the series is 6 (3+3). - The 4th number in the series is 8 (6+2). Your function should handle values of `n` up to 1000. Write your code in the function `def find_nth_in_series(n):`, which takes an integer `n` and returns the `n`-th number in the series.","solution":"def find_nth_in_series(n): Returns the n-th number in the series: 1, 3, 6, 8, 11, 13, ... if n <= 0: raise ValueError(\\"The input should be a positive integer.\\") series = [1] add_2 = True for _ in range(1, n): if add_2: series.append(series[-1] + 2) else: series.append(series[-1] + 3) add_2 = not add_2 return series[n-1]"},{"question":"Given a rectangle of size MxN, you need to find the total number of unique paths that can be taken to reach from the top-left corner to the bottom-right corner of the rectangle. The only moves allowed are to the right or downward at each step. Additionally, certain cells within the rectangle are blocked, which means you cannot pass through these cells. You need to factor these blockages while calculating the total number of unique paths. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers M and N denoting the number of rows and columns of the rectangle. The second line contains an integer B denoting the number of blocked cells. Each of the next B lines contains two integers x and y, indicating that the cell at row x and column y is blocked. Cells are 1-indexed. -----Output----- For each test case, output a single line containing the total number of unique paths from the top-left corner to the bottom-right corner of the rectangle. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 100 - 0 ≤ B ≤ min(M, N) -----Example----- Input: 2 3 3 1 2 2 4 4 2 2 2 3 3 Output: 2 4 -----Explanation----- Example case 1: There are 2 unique paths from (1,1) to (3,3) avoiding the cell (2,2): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example case 2: There are 4 unique paths from (1,1) to (4,4) avoiding the cells (2,2) and (3,3): 1. Right -> Right -> Right -> Down -> Down -> Down 2. Right -> Down -> Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right -> Right -> Down 4. Down -> Right -> Right -> Down -> Right -> Down","solution":"def count_unique_paths(M, N, blocked_cells): dp = [[0]*N for _ in range(M)] if (1, 1) in blocked_cells: return 0 dp[0][0] = 1 for i in range(M): for j in range(N): if (i+1, j+1) in blocked_cells: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] def process_test_cases(T, test_cases): results = [] for case in test_cases: M, N, B, blocked_cells = case result = count_unique_paths(M, N, blocked_cells) results.append(result) return results"},{"question":"You are given a string of lowercase alphabetical characters. Your task is to determine the length of the smallest contiguous substring that contains all the distinct characters of the string at least once. -----Input----- The input consists of a single string S containing only lowercase alphabetical characters (\'a\' to \'z\'). -----Output----- Output the length of the smallest contiguous substring of S that contains all the distinct characters of S. -----Constraints----- - 1 ≤ |S| ≤ 105 -----Example----- Input: abcabcbb Output: 3 -----Explanation----- For the given example, the smallest substring that contains all the distinct characters (\'a\', \'b\', and \'c\') is \\"abc\\". Thus, the output is 3.","solution":"def smallest_substring_with_all_distinct_chars(s): Returns the length of the smallest contiguous substring that contains all distinct characters of the input string. distinct_chars = set(s) total_distinct = len(distinct_chars) n = len(s) min_length = float(\'inf\') left = 0 char_count = {} for right in range(n): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) == total_distinct: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length"},{"question":"You are tasked with helping a group of friends who are passionate about palindromes. A palindrome is a word that reads the same backward as forward. The friends have written n words and want to know how many of them are palindromes. Can you help them? -----Input----- The first line contains an integer n (1 le n le 100) — the number of words. Each of the following n lines contains a single word consisting of lowercase English letters. The length of each word is between 1 and 100, inclusive. -----Output----- Print a single integer: the number of palindromes among the given n words. -----Example----- Input 5 racecar level world madam python Output 3 -----Note----- In the given example, there are three palindromes: \\"racecar,\\" \\"level,\\" and \\"madam.\\" \\"World\\" and \\"python\\" are not palindromes.","solution":"def count_palindromes(words): Returns the number of palindromes in a list of words. A palindrome is a word that reads the same backward as forward. count = 0 for word in words: if word == word[::-1]: count += 1 return count"},{"question":"Given a binary search tree, write a function lowestCommonAncestor to find the lowest common ancestor (LCA) of two given nodes in the BST. The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself). Example 1: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 6 / 2 8 / / 0 4 7 9 / 3 5 Output: 6 Example 2: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 6 / 2 8 / / 0 4 7 9 / 3 5 Output: 2 Note: * All of the nodes\' values will be unique. * p and q are different and both values will exist in the BST.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowestCommonAncestor(root, p, q): Finds the lowest common ancestor (LCA) of two given nodes in the BST. :param root: TreeNode, the root of the binary search tree :param p: TreeNode, the first given node :param q: TreeNode, the second given node :return: TreeNode, the lowest common ancestor of nodes p and q # Traverse the tree current = root while current: # If both nodes p and q are less than the current node, # then LCA lies in the left subtree if p.val < current.val and q.val < current.val: current = current.left # If both nodes p and q are greater than the current node, # then LCA lies in the right subtree elif p.val > current.val and q.val > current.val: current = current.right else: # We have found the split point, i.e., the LCA node return current"},{"question":"Write a function that takes an integer `n` and returns the sum of all prime numbers less than `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Examples ```python sum_primes(10) >> 17 # (2 + 3 + 5 + 7) sum_primes(20) >> 77 # (2 + 3 + 5 + 7 + 11 + 13 + 17 + 19) sum_primes(2) >> 0 # There are no prime numbers less than 2. sum_primes(50) >> 328 # (2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + 31 + 37 + 41 + 43 + 47) ```","solution":"def sum_primes(n): Returns the sum of all prime numbers less than n. if n <= 2: return 0 primes = [True] * n primes[0] = primes[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if primes[start]: for i in range(start*start, n, start): primes[i] = False return sum(i for i, prime in enumerate(primes) if prime)"},{"question":"Create a function `max_profit(prices: List[int]) -> int` that takes a list of integers representing the prices of a given stock on different days, and returns the maximum profit that can be made by buying on one day and selling on another day in the future. Note that you cannot sell a stock before you buy it. Examples: 1. `max_profit([7, 1, 5, 3, 6, 4])` should return `5`, as the best profit can be made by buying on day 2 (price = 1) and selling on day 5 (price = 6). 2. `max_profit([7, 6, 4, 3, 1])` should return `0`, as no profit can be made as prices are decreasing throughout the period.","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be made by buying on one day and selling on another day in the future. If no profit can be made, return 0. :param prices: List of integers representing the prices of a given stock on different days :return: Maximum profit if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"The Mysterious Cave Guild is planning an expedition to collect valuable gems in a cave. The cave can be represented as a grid with `n` rows and `m` columns, where each cell either contains a gem (represented by a 1) or is empty (represented by a 0). To make their journey efficient, they want to maximize the number of gems collected while ensuring they do not revisit any cell. They can start the expedition from any cell containing a gem. The team can move to a neighboring cell (up, down, left, right) but cannot move diagonally. Your task is to determine the maximum number of gems that can be collected from a single continuous path of cells containing gems. -----Input----- The input consists of multiple test cases. The first line contains an integer `t` (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers `n` and `m` (1 le n, m le 50) — the number of rows and columns of the cave grid. The next `n` lines contain `m` binary integers each (either 0 or 1) — representing the cave grid. -----Output----- For each test case, print a single integer representing the maximum number of gems that can be collected starting from any gem cell. -----Example----- Input 2 3 3 1 0 1 0 1 0 1 0 1 4 4 1 1 0 0 0 1 1 0 0 0 0 1 1 0 0 1 Output 1 4 -----Note----- In the first test case, each gem is isolated, so the maximum number of gems collected from a single path is just 1. In the second test case, one of the possible continuous paths with the maximum gems is: starting at (1,1), moving to (2,2), then (1,2), and (2,3). This leads to collecting 4 gems in total.","solution":"def bfs(grid, x, y, visited): from collections import deque queue = deque([(x, y)]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] count = 0 while queue: cx, cy = queue.popleft() if visited[cx][cy]: continue visited[cx][cy] = True count += 1 for direction in directions: nx, ny = cx + direction[0], cy + direction[1] if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny] and grid[nx][ny] == 1: queue.append((nx, ny)) return count def max_gems_in_cave(t, test_cases): results = [] for case in test_cases: n, m, grid = case visited = [[False]*m for _ in range(n)] max_gems = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: max_gems = max(max_gems, bfs(grid, i, j, visited)) results.append(max_gems) return results"},{"question":"Amy loves reading books and recently she has started cataloging all the books in her personal library. Each book in her collection is unique and has a defined genre and a reading level (an integer). Amy wants to categorize these books based on their genres, and within each genre, she wants to sort the books by their reading levels in ascending order. Your task is to help her organize her library by implementing a program that categorizes and sorts her books. -----Input----- The first line of input contains t, the number of test cases (1<=t<=50). Each test case starts with a line containing a single integer n, denoting the number of books (1<=n<=1000). The next n lines each contain a string and an integer, representing the genre of the book and the reading level of the book (1<=reading level<=1000). The genre is a non-empty string of up to 50 alphanumeric characters. -----Output----- For each test case, output the books categorized by genre, in lexicographical order of the genres. Within each genre, the books should be listed in ascending order of their reading levels. Print the genre as a header followed by the reading levels of the books under that genre, one per line. -----Example----- Input: 2 3 Fantasy 300 Fantasy 150 ScienceFiction 200 4 Mystery 100 Fantasy 150 Mystery 200 Fantasy 100 Output: Fantasy 150 300 ScienceFiction 200 Fantasy 100 150 Mystery 100 200","solution":"def categorize_and_sort_books(test_cases): results = [] for case in test_cases: n = case[\'n\'] books = case[\'books\'] genre_dict = {} # Categorize books by genre for book in books: genre = book[0] level = book[1] if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(level) # Sort genres lexicographically and sort levels within each genre for genre in sorted(genre_dict.keys()): results.append(genre) for level in sorted(genre_dict[genre]): results.append(str(level)) return results # Example usage: test_cases = [ { \'n\': 3, \'books\': [ (\\"Fantasy\\", 300), (\\"Fantasy\\", 150), (\\"ScienceFiction\\", 200), ] }, { \'n\': 4, \'books\': [ (\\"Mystery\\", 100), (\\"Fantasy\\", 150), (\\"Mystery\\", 200), (\\"Fantasy\\", 100), ] } ] output = categorize_and_sort_books(test_cases) for line in output: print(line)"},{"question":"Complete the function that accepts an integer array and returns an array of arrays, where each inner array contains the numbers that add up to zero from the original array. The sum pairs in the result array should be unique. Examples ``` Input: [1, -1, 2, -2, 3] Output: [[1, -1], [2, -2]] Input: [3, -3, 4, -4, 5, -5, 3, -3] Output: [[3, -3], [4, -4], [5, -5]] ``` **Note:** - The output should not contain duplicate pairs. - Each inner array should always have the smaller number first. For instance, [-3, 3] instead of [3, -3].","solution":"def find_zero_sum_pairs(arr): Returns a list of unique pairs that add up to zero. Each inner pair should have the smaller number first. seen = set() result = [] for num in arr: target = -num if target in seen: pair = sorted([target, num]) if pair not in result: result.append(pair) else: seen.add(num) return result"},{"question":"Write a function `encodeString` that takes a string as input and returns a new string where each character is shifted forward in the alphabet by a given number of places. If shifting \\"z\\" forward by 1 place, it should wrap around to \\"a\\". The function should handle both uppercase and lowercase letters, maintaining the case of each character. E.g: encodeString(\\"abcd XYZ\\", 3) -> \\"defg ABC\\" Note: Only letters should be altered; other characters should remain unchanged in the output.","solution":"def encodeString(s, shift): Encodes a string by shifting each letter by the given number of places in the alphabet. Wraps around if the end of the alphabet is reached. Other characters remain unchanged. def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in s)"},{"question":"In Python and other programming languages, a `for` loop is used when you know how many times you want to iterate a statement or a block of statements. This is in contrast to a `while` loop, which is used for indefinite iteration, where you keep iterating as long as some condition is true. In a `for` loop, you can use the `range()` function to generate a sequence of numbers. `range()` can take one, two, or three arguments: `range(stop)`, `range(start, stop)`, `range(start, stop, step)`. Here is an example that sums up even numbers from 1 to 10: ```python total = 0 for i in range(1, 11): # Create numbers 1 to 10 if i % 2 == 0: # Check if the number is even total += i # Add the even number to the total print(total) # Output: 30 ``` In this `for` loop: - `i` goes from 1 to 10, inclusive. - `if i % 2 == 0` checks that `i` is an even number. - `total += i` accumulates the sum of the even numbers. - The output of the program is `30`, which is the sum of the even numbers from 1 to 10 (2 + 4 + 6 + 8 + 10). Task: Complete the function `sum_of_multiples` that takes one parameter `n`. The function calculates and returns the sum of all multiples of 3 or 5 that are less than `n`. Your task is to use a `for` loop and the `range()` function to solve this problem. ```python def sum_of_multiples(n): total = 0 for i in range(1, n): if (i % 3 == 0) or (i % 5 == 0): total += i return total ``` Examples: ```python print(sum_of_multiples(10)) # Output: 23 (3 + 5 + 6 + 9) print(sum_of_multiples(20)) # Output: 78 (3 + 5 + 6 + 9 + 10 + 12 + 15 + 18) print(sum_of_multiples(0)) # Output: 0 (no multiples of 3 or 5 are less than 0) ``` You are encouraged to run tests using different values to ensure your function works correctly.","solution":"def sum_of_multiples(n): Returns the sum of all multiples of 3 or 5 that are less than n. total = 0 for i in range(1, n): if (i % 3 == 0) or (i % 5 == 0): total += i return total"},{"question":"Write a function that takes a list of strings and returns a list of tuples. Each tuple should contain a string from the input list and the count of vowels (a, e, i, o, u, both uppercase and lowercase) in that string. For example, given the list: ``` [\\"hello\\", \\"world\\", \\"Python\\"] ``` The output should be: ``` [(\\"hello\\", 2), (\\"world\\", 1), (\\"Python\\", 1)] ``` Your function should be case-insensitive for vowels and should handle an empty list by returning an empty list.","solution":"def count_vowels(strings): Takes a list of strings and returns a list of tuples. Each tuple contains a string from the input list and the count of vowels in that string. vowels = set(\'aeiouAEIOU\') def vowel_count(s): return sum(1 for char in s if char in vowels) return [(s, vowel_count(s)) for s in strings]"},{"question":"Harry is a wildlife photographer and loves capturing birds in flight. He has recently taken a sequence of photographs of birds flying at different altitudes. Harry wants to analyze the sequence to find the longest subsequence of birds that are strictly ascending in altitude. Help Harry by writing a program that finds the length of the longest strictly ascending subsequence. -----Input----- The first line contains a single integer T denoting the number of test-cases. T test cases follow. For each test case: The first line contains an integer N, the number of photographs Harry has taken. The second line contains N space-separated integers representing the altitudes of the birds in the sequence. -----Output----- For each test case, output the length of the longest strictly ascending subsequence in a single line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 105 - 1 ≤ altitude ≤ 109 -----Example----- Input: 3 5 1 3 2 4 6 4 5 4 3 2 6 1 2 3 4 5 6 Output: 4 1 6","solution":"def longest_strictly_ascending_subsequence(test_cases): Finds the longest strictly ascending subsequence for each test case. Args: test_cases (list): A list of tuples, where each tuple contains two elements: - an integer N representing the number of photographs. - a list of integers representing the altitudes of the birds. Returns: list: A list of integers, where each integer represents the length of the longest strictly ascending subsequence for the corresponding test case. results = [] for N, altitudes in test_cases: if N == 0: results.append(0) continue dp = [1] * N # dp[i] will be the length of the LIS ending at index i for i in range(1, N): for j in range(i): if altitudes[i] > altitudes[j]: dp[i] = max(dp[i], dp[j] + 1) results.append(max(dp)) return results # For use with the test cases def parse_input(input_string): Parses the input string into the format required by longest_strictly_ascending_subsequence. Args: input_string (str): The input string representing multiple test cases. Returns: list: A list of tuples, where each tuple represents a test case. input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) altitudes = list(map(int, input_lines[index + 1].split())) test_cases.append((N, altitudes)) index += 2 return test_cases def run_solution(input_string): test_cases = parse_input(input_string) results = longest_strictly_ascending_subsequence(test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are given an integer array `nums` and an integer `k`. You need to partition `nums` into `k` non-empty contiguous subarrays such that the sum of the maximum sum of these subarrays is minimized. Return the minimum value of the largest sum among these `k` subarrays. Example 1: Input: nums = [7,2,5,10,8], k = 2 Output: 18 Explanation: There are four ways to partition nums into 2 subarrays. The optimal way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. Example 2: Input: nums = [1,2,3,4,5], k = 2 Output: 9 Explanation: There are several ways to split nums into 2 subarrays. The optimal way is to split it into [1,2,3,4] and [5], where the largest sum among the two subarrays is only 9. Example 3: Input: nums = [1,4,4], k = 3 Output: 4 Explanation: There are several ways to split nums into 3 subarrays. The optimal way is to split it into [1], [4], and [4], where the largest sum among the three subarrays is only 4. Constraints: - 1 <= nums.length <= 1000 - 0 <= nums[i] <= 10^6 - 1 <= k <= min(50, nums.length)","solution":"def min_largest_sum(nums, k): def can_partition(nums, k, max_sum): current_sum = 0 subarray_count = 1 # At least one subarray needs to exist for num in nums: current_sum += num if current_sum > max_sum: subarray_count += 1 current_sum = num if subarray_count > k: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_partition(nums, k, mid): right = mid else: left = mid + 1 return left"},{"question":"You are a software engineer participating in a company-wide hackathon. Your project group decides to implement a sensor grid for monitoring environmental conditions in a large warehouse. The warehouse can be represented by an n × n grid of cells. Each cell can either contain a sensor or be empty. The sensor in each cell can detect environmental changes and communicate the detected information to neighboring sensors. To optimize the sensor distribution, the goal is to ensure that each sensor can communicate with at least one other sensor directly in one of the four orthogonal directions (up, down, left, right). You need to determine a valid sensor distribution for the grid such that no sensor is isolated. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 50), denoting the size of the warehouse grid. -----Output----- Output n lines, each containing n characters. The j-th character of the i-th line should be one of the following: \'*\' : representing a cell containing a sensor. \'.\' : representing an empty cell. The generated configuration must meet the rule that every sensor (\'*\') can communicate directly with at least one other sensor through one of the four orthogonal directions. If multiple valid solutions exist, output any of them. -----Example----- Input 3 Output *.* .*. *.* OR .*. *.* .*. Input 4 Output **.* ..*. **.* .... (or any other valid configuration) -----Note----- In the first example, each sensor can communicate with at least one other neighboring sensor (\'*\'). In the second example, every sensor has at least one neighboring sensor, ensuring the constraint is fulfilled.","solution":"def generate_sensor_grid(n): Generates a valid n x n grid of sensors and empty cells. Each sensor can communicate directly with at least one other sensor. grid = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'*\') else: row.append(\'.\') grid.append(\'\'.join(row)) return grid"},{"question":"Chef has started a new game called \\"Magical Forest\\". In this game, each player needs to collect magical orbs scattered in the forest. Each player has a separate bag to store these orbs and the player with the most magical power wins the game. Each orb has a magical power associated with it, and the players can gain additional magical power by collecting specific sets of orbs. The rules for gaining additional magical power are as follows: - If a player collects a set of 3 different types of orbs, they gain an additional +5 magical power. - If a player collects a set of 4 different types of orbs, they gain an additional +10 magical power. - If a player collects a set of 5 different types of orbs, they gain an additional +20 magical power. Given the number of orbs and their types collected by each player, your task is to determine the winner with the highest total magical power. If there are multiple players with the highest magical power, the output should be \\"tie\\". If Chef is the only player with the highest magical power, the output should be \\"chef\\". -----Input----- The first line of input contains a single integer T denoting the number of test cases. Each test case consists of: - An integer N denoting the number of players. - N lines, each containing an integer `m_i` followed by `m_i` space-separated integers representing the types of orbs in the i-th player\'s bag. -----Output----- For each test case, output a single line containing the result as specified in the statement. -----Constraints and Subtasks----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ m_i ≤ 100 - 1 ≤ type[i][j] ≤ 10 -----Example----- Input: 2 3 5 1 2 3 4 5 6 1 1 2 2 3 3 7 1 2 3 4 5 6 1 2 4 1 3 3 2 5 2 5 6 7 4 Output: chef 1 -----Explanation----- Example case 1: Player 1: Total magical power = 5 (for 5 orbs) + 20 (for a set of 5 different types) = 25 Player 2: Total magical power = 6 (for 6 orbs) + 5 (for a set of 3 different types) = 11 Player 3: Total magical power = 7 (for 7 orbs) + 20 (for a set of 5 different types) = 27 Player 3 has the highest total magical power. So, the output is 3(chef). Example case 2: Player 1: Total magical power = 4 (for 4 orbs) + 5 (for a set of 3 different types) = 9 Player 2: Total magical power = 5 (for 5 orbs) + 10 (for a set of 4 different types) = 15 Player 2 has the highest total magical power. So, the output is 2.","solution":"def calculate_magical_power(orbs): unique_orbs = len(set(orbs)) additional_power = 0 if unique_orbs >= 5: additional_power += 20 unique_orbs -= 5 if unique_orbs >= 4: additional_power += 10 unique_orbs -= 4 if unique_orbs >= 3: additional_power += 5 return len(orbs) + additional_power def find_winner(test_cases): results = [] for players_data in test_cases: max_power = -1 max_index = -1 tie = False chef_winner = False for index, orbs in enumerate(players_data): power = calculate_magical_power(orbs) if power > max_power: max_power = power max_index = index tie = False chef_winner = (index == 0) elif power == max_power: tie = True chef_winner = False if tie: results.append(\\"tie\\") elif chef_winner: results.append(\\"chef\\") else: results.append(str(max_index + 1)) return results def magical_forest_game(T, test_cases): return find_winner(test_cases)"},{"question":"Write a function that takes a list of integers and returns a new list where each integer has been replaced with the product of all the integers in the original list except the integer at that index. You cannot use division in your solution, and your function should be optimized to work in O(n) time complexity, where n is the length of the input list. Here are a few examples to illustrate the task: product_except_self([1, 2, 3, 4]) --> [24, 12, 8, 6] product_except_self([0, 1, 2, 3]) --> [6, 0, 0, 0] product_except_self([1, 0, 0, 4]) --> [0, 0, 0, 0] product_except_self([2, 3, 4, 5]) --> [60, 40, 30, 24] Consider edge cases such as: - An empty list input, which should return an empty list. - A list with only one element, which should return a list with the value 1, because the product of no other numbers is considered 1. Good luck!","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements in the original list except the element at that index. if not nums: return [] n = len(nums) if n == 1: return [1] result = [1] * n # Fill result with the product of elements to the left of each index left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Multiply by the product of elements to the right of each index right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Akash loves playing with arrays and primes. Given a list of integers, he wants to perform the following operation exactly once: 1. Pick any two distinct elements from the list, say A and B, with A ≤ B. 2. Replace both A and B with their greatest common divisor (GCD). Akash will continue this process until all elements in the list become the same. Your task is to help Akash find out the final value of all elements after he has performed the operation as described above. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains a single integer N, the number of elements in the list. - The second line contains N space-separated integers denoting the elements of the list. -----Output----- For each test case, print a single integer — the final value of all elements in the list after performing the operation until all elements become the same. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^5 - 1 ≤ list[i] ≤ 10^9 -----Example----- Input: 3 3 2 4 8 5 14 7 28 49 21 4 10 20 30 20 Output: 2 7 10 -----Explanation----- In the first test case, the list [2, 4, 8] will undergo the following transformations: - Pick two integers, 2 and 4. Replace them with their GCD, which is 2. The list becomes [2, 2, 8]. - Pick two integers, 2 and 8. Replace them with their GCD, which is 2. The list becomes [2, 2, 2]. So the final value is 2. In the second test case, the list [14, 7, 28, 49, 21] will become: - [7, 7, 49, 21] - [7, 7, 7, 21] - [7, 7, 7, 7] So the final value is 7. In the third test case, the list [10, 20, 30, 20] will become: - [10, 10, 30, 20] - [10, 10, 10, 20] - [10, 10, 10, 10] So the final value is 10.","solution":"from math import gcd from functools import reduce def process_test_case(n, elements): Returns the final value of all elements in the list after replacing pairs with their GCD until all values are the same. # The final value will be the GCD of all elements in the list return reduce(gcd, elements) def main(t, test_cases): Processes multiple test cases and returns results. results = [] for i in range(t): n = test_cases[i][0] elements = test_cases[i][1] results.append(process_test_case(n, elements)) return results"},{"question":"Given a string s, determine if it can be reordered to form a palindrome. A string is a palindrome if it reads the same forwards and backwards. For instance, \\"racecar\\" and \\"madam\\" are palindromes. Your task is to design an algorithm that checks if any permutation of the input string s can be rearranged to form a palindrome. Example 1: Input: s = \\"civic\\" Output: true Explanation: The string \\"civic\\" itself is a palindrome. Example 2: Input: s = \\"ivicc\\" Output: true Explanation: The characters in \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. Example 3: Input: s = \\"hello\\" Output: false Explanation: There\'s no way to rearrange the characters of \\"hello\\" to form a palindrome. Example 4: Input: s = \\"aabb\\" Output: true Explanation: The characters in \\"aabb\\" can be rearranged to form \\"abba\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the string can be reordered to form a palindrome. from collections import Counter # Count occurrences of each character count = Counter(s) # Count the number of characters with odd occurrences odd_count = sum(1 for char, cnt in count.items() if cnt % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"=====Problem Statement===== Given the radius of a circle from STDIN, write a program that calculates and prints three values: 1. The circumference of the circle. 2. The area of the circle. 3. The volume of a sphere with the same radius. Use the value of π (pi) as 3.14159. =====Example===== radius = 3 Print the following: 18.84954 28.27431 113.09724 =====Input Format===== The input contains a single integer, radius. =====Constraints===== 1≤radius≤10^4 =====Output Format===== Print three lines: 1. Circumference of the circle. 2. Area of the circle. 3. Volume of the sphere.","solution":"import math def circle_and_sphere_calculations(radius): Given the radius of a circle, this function calculates and returns the circumference of the circle, the area of the circle, and the volume of a sphere with the same radius. :param radius: float, the radius of the circle/sphere :return: tuple: (circumference, area, volume) pi = 3.14159 circumference = 2 * pi * radius area = pi * radius**2 volume = (4/3) * pi * radius**3 return circumference, area, volume"},{"question":"Create a function `generate_sequence` that takes an integer `n` and a function `f` as inputs and returns a list of the first `n` values of the sequence generated by applying the function `f`. The function `f` will take the current index as an input and produce the next value in the sequence. For example, if `f` represents a function that generates the Fibonacci sequence, the input `n=5` should return the first five Fibonacci numbers: `[0, 1, 1, 2, 3]`. You should assume that the function `f` is well-defined and can handle the input values appropriately. Function signature: `def generate_sequence(n: int, f: Callable[[int], int]) -> List[int]:` # Example ```python def fib(index: int) -> int: if index == 0: return 0 elif index == 1: return 1 else: return fib(index - 1) + fib(index - 2) print(generate_sequence(5, fib)) # Output: [0, 1, 1, 2, 3] ``` Note: - Ensure your implementation of `generate_sequence` is efficient and handles edge cases (e.g., `n=0` should return an empty list). - Implement error checks as necessary.","solution":"from typing import List, Callable def generate_sequence(n: int, f: Callable[[int], int]) -> List[int]: Generates the first `n` values of a sequence defined by the function `f`. :param n: The number of values to generate. :param f: A function that takes an index and returns the corresponding value in the sequence. :return: A list of the first `n` values of the sequence. return [f(i) for i in range(n)] def fib(index: int) -> int: Returns the Fibonacci number at the given index `index`. :param index: The index in the Fibonacci sequence. :return: The Fibonacci number. if index == 0: return 0 elif index == 1: return 1 else: return fib(index - 1) + fib(index - 2)"},{"question":"Implement a method that accepts a string and determines if it can be rearranged to form a palindrome. Return true if it is possible and false otherwise. (A string can be rearranged to form a palindrome if at most one of the characters has an odd frequency.)","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one of the characters has an odd frequency. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Get the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # To form a palindrome, we can have at most one character with an odd frequency return odd_count <= 1"},{"question":"The librarian is organizing the books on shelves with a specific pattern. She needs your help to automate this process. Each shelf is to be filled with books numbered sequentially starting from 1, but the pattern differs based on the number of shelves. Help the librarian code this pattern problem. -----Input:----- - The first-line will contain N, the number of shelves. Then follows a single integer S which determines the sequence of books to be arranged on the shelves. -----Output:----- For the single test case, output the arrangement of books in the pattern for each shelf. -----Constraints----- - 1 leq N leq 100 - 1 leq S leq 100 -----Sample Input:----- 3 2 -----Sample Output:----- 1 2 3 4 5 6","solution":"def arrange_books(N, S): Arrange books on shelves in a sequence, starting from 1. Parameters: N (int): Number of shelves S (int): Number of books per shelf Returns: list of list: The arranged books on each shelf result = [] book = 1 for shelf in range(N): shelf_arrangement = [] for _ in range(S): shelf_arrangement.append(book) book += 1 result.append(shelf_arrangement) return result def pretty_print(arrangement): Pretty print the arrangement of books on shelves. Parameters: arrangement (list of list): The arranged books on each shelf for shelf in arrangement: print(\\" \\".join(map(str, shelf)))"},{"question":"You are developing a task management application and need to implement a feature that categorizes tasks based on their deadlines. Each task is represented as a tuple containing the task name and the number of days remaining until the deadline. Write a function `categorize_tasks()` that takes a list of tuples `(task_name, days_remaining)` as input and returns a dictionary with three keys: `\\"Urgent\\"`, `\\"Upcoming\\"`, and `\\"Later\\"`. Tasks should be categorized as follows: * `\\"Urgent\\"`: Tasks with 0 to 2 days remaining, * `\\"Upcoming\\"`: Tasks with 3 to 5 days remaining, * `\\"Later\\"`: Tasks with more than 5 days remaining. For example, `categorize_tasks([(\\"Submit report\\", 2), (\\"Pay bills\\", 5), (\\"Finish project\\", 8)])` would return `{\\"Urgent\\": [\\"Submit report\\"], \\"Upcoming\\": [\\"Pay bills\\"], \\"Later\\": [\\"Finish project\\"]}`. Your function should handle an input list of any length, including an empty list, in which case it should return a dictionary with empty lists for each category.","solution":"def categorize_tasks(tasks): Categorizes tasks based on days remaining until their deadline. Parameters: tasks (list of tuples): A list where each tuple contains a task name and the number of days remaining. Returns: dict: A dictionary with tasks categorized as \\"Urgent\\", \\"Upcoming\\", and \\"Later\\". categorized_tasks = { \\"Urgent\\": [], \\"Upcoming\\": [], \\"Later\\": [] } for task_name, days_remaining in tasks: if 0 <= days_remaining <= 2: categorized_tasks[\\"Urgent\\"].append(task_name) elif 3 <= days_remaining <= 5: categorized_tasks[\\"Upcoming\\"].append(task_name) else: categorized_tasks[\\"Later\\"].append(task_name) return categorized_tasks"},{"question":"Alice and Bob are playing a guessing game. Alice thinks of an integer \'x\' between 1 and n, and Bob tries to guess the number. Bob is allowed to ask a series of questions of the form: \\"Is the unknown number a multiple of number y?\\" Alice answers each question with \'yes\' or \'no\'. Bob\'s goal is to guarantee finding the unknown number x with minimum number of questions. Help Bob determine the sequence of questions that will allow him to find the answer in the minimum possible number of questions. -----Input----- A single line contains the integer n (1 ≤ n ≤ 10^3). -----Output----- Print the minimum number of questions k (0 ≤ k ≤ n), followed by k numbers — the questions y_{i} (1 ≤ y_{i} ≤ n). If there are several correct sequences of questions of the minimum length, you can print any of them. -----Examples----- Input 5 Output 3 2 3 5 Input 7 Output 4 2 3 5 7 -----Note----- For the answer to the first sample, the sequence of questions is correct. If the unknown number is not a multiple of any of the sequence numbers, it is equal to 1. If the unknown number is a multiple of 5, it is 5. If the unknown number is a multiple of 3, then the unknown number is 3. If the unknown number is a multiple of 2, it is 2. Therefore, the sequence of questions allows you to guess the unknown number. It is proven that there is no correct sequence of questions of length 2 or shorter to guarantee the answer.","solution":"def find_minimum_questions(n): Given an integer n, this function will return the minimum number of questions k necessary to determine any number x between 1 and n, as well as the sequence of y values for the questions. # We will use prime numbers up to n because each prime will uniquely identify a number. def sieve_of_eratosthenes(max_num): is_prime = [True] * (max_num + 1) p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, max_num + 1) if is_prime[p]] return primes primes = sieve_of_eratosthenes(n) return (len(primes), primes)"},{"question":"Write a function that takes a list of integers and returns the sum of the integers which are followed by a smaller integer in the list. For example: ``` [1, 2, 3] => 3 Explanation: 3 is the only number followed by a smaller number (1 < 3, 2 < 3). [5, 4, 3, 2, 1] => 14 Explanation: 5 is followed by 4, 4 is followed by 3, 3 is followed by 2, 2 is followed by 1. Therefore, the sum is 5+4+3+2=14. [2, 1, 5, 3] => 7 Explanation: 2 is followed by 1, 5 is followed by 3. Therefore, the sum is 2+5=7. ```","solution":"def sum_followed_by_smaller(nums): Returns the sum of integers in the list which are followed by a smaller integer. result = 0 for i in range(len(nums) - 1): if nums[i] > nums[i + 1]: result += nums[i] return result"},{"question":"In a classroom, the teacher has given a coding assignment to the students. To help the students, the teacher has provided them with a means to evaluate the complexity of their algorithms by counting the number of operations performed. One type of operation the students have learned is the \\"swap\\" operation, which can interchange the values of two variables. The teacher challenges the students to write a function that counts the number of swap operations required to sort an array of integers in ascending order. You have to help the students by writing a function `countSwaps(arr)` that takes an array of integers as input and returns the minimum number of swap operations needed to sort the array. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line having N followed by N space-separated integers representing the array. -----Output----- - For each test case, output a single line containing the minimum number of swaps required to sort the array. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ arr[i] ≤ 10^6 -----Example----- Input: 2 4 4 3 2 1 5 2 3 4 1 5 Output: 2 3","solution":"def countSwaps(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) arr_pos = list(enumerate(arr)) # Sort arr_pos by array value arr_pos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} swaps = 0 for i in range(n): # if element is already in the correct position or already visited if visited[i] or arr_pos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps def process_test_cases(input_data): Process the input for multiple test cases and return the results. results = [] input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) for i in range(1, T + 1): case_data = list(map(int, input_lines[i].split())) N = case_data[0] arr = case_data[1:] swap_count = countSwaps(arr) results.append(swap_count) return results"},{"question":"You are given a text that contains various words. Your task is to find the k most frequent words in the text. If two words have the same frequency, then the word which comes first lexicographically (alphabetically) should appear first in the result. -----Input----- The input consists of a single integer k, followed by a line of text. The text will contain only alphabetic characters and spaces. Words are case-insensitive. -----Output----- Output the k most frequent words in the text, each on a new line. -----Constraints----- - 1 ≤ k ≤ 100 - The text line contains at most 100,000 characters. - The text contains at least one word. -----Example----- Input: 3 This is a test. This test is only a test. Output: test a is","solution":"from collections import Counter import re def k_most_frequent_words(k, text): Returns the k most frequent words in the given text. If two words have the same frequency, the word which comes first lexicographically should appear first. # Normalize text to lowercase and split into words words = re.findall(r\'b[a-z]+b\', text.lower()) # Count the frequency of each word word_counter = Counter(words) # Sort the words first by frequency (descending) then lexicographically (ascending) sorted_words = sorted(word_counter.items(), key=lambda item: (-item[1], item[0])) # Extract and return the k most frequent words return [word for word, count in sorted_words[:k]]"},{"question":"Given a list of integers `nums`, you need to determine the maximum length of a contiguous subarray with an equal number of 0s and 1s. Example 1: Input: `nums = [0, 1, 0]` Output: 2 Explanation: `[0, 1]` or `[1, 0]` or `[0, 1]` - either of these subarrays have length 2. Example 2: Input: `nums = [0, 1, 0, 0, 1, 1, 0]` Output: 6 Explanation: `[1, 0, 0, 1, 1, 0]` has equal number of 0s and 1s with length 6. Note: The length of the input array is a positive integer and will not exceed 50,000. The input list contains only 0s and 1s. # Requirements: - Design an efficient solution with a time complexity better than O(n^2).","solution":"def findMaxLength(nums): Returns the maximum length of a contiguous subarray with an equal number of 0s and 1s. count = 0 max_length = 0 count_dict = {0: -1} for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length"},{"question":"Determine the second smallest and second largest elements in a given list of integers of length N. The input list is guaranteed to contain at least two distinct elements. -----Input:----- - The first line will contain N, the number of elements in the sequence. - The next line contains N integers of the sequence. -----Output:----- Print the second SMALLEST and the second LARGEST values from the sequence respectively. -----Constraints----- - 2 leq N leq 100 - 1 leq {A1,A2,A3.....A\'N} leq 10^4 -----Sample Input:----- 6 10 5 9 12 6 8 -----Sample Output:----- 6 10 -----EXPLANATION:----- This list is: [10, 5, 9, 12, 6, 8], so the second smallest value is 6 and the second largest value is 10 respectively.","solution":"def find_second_min_and_second_max(n, seq): Returns the second smallest and second largest elements from the list, seq. # Remove duplicates by converting to a set and then back to a sorted list sorted_unique_seq = sorted(set(seq)) # Second smallest and second largest from the sorted unique elements second_smallest = sorted_unique_seq[1] second_largest = sorted_unique_seq[-2] return second_smallest, second_largest"},{"question":"# Task Given an array of integers, find the length of the longest subarray that contains only even numbers. # Example For `arr = [1, 2, 4, 6, 3, 8, 10, 12]`, the output should be `4`. The subarray `[4, 6, 8, 10]` has the longest length with even numbers only. # Input/Output - `[input]` array of integers `arr` An array of integers. Constraints: `1 ≤ arr.length ≤ 100`. `-10^4 ≤ arr[i] ≤ 10^4`. - `[output]` an integer The length of the longest subarray that contains only even numbers.","solution":"def longest_even_subarray(arr): Returns the length of the longest subarray that contains only even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"# Definition A **number** is called **_Kaprekar number_** if after squaring the number, the sum of the left and right parts of the result equals the original number. The right part must have the same number of digits as the original number. If the original number has only one digit, the left part can be considered as 0. ___ # Task **_Given_** a **number** *determine if it is a Kaprekar number or not* . ___ # Notes * The **_number_** passed to the function is **_positive_** * Any single-digit number is considered a **Kaprekar number**. ___ # Input >> Output Examples ``` kaprekar(9) -->> return \\"Kaprekar\\" ``` **_Explanation_**: * `9` squared is `81` , **Split into parts \\"8\\" and \\"1\\"**, and **_8 + 1 = 9_** ___ ``` kaprekar(45) -->> return \\"Kaprekar\\" ``` **_Explanation_**: * `45` squared is `2025` , **Split into parts \\"20\\" and \\"25\\"**, and **_20 + 25 = 45_** ___ ``` kaprekar(12) -->> return \\"Not!!\\" ``` **_Explanation_**: * `12` squared is `144` , **Split into parts \\"1\\" and \\"44\\"**, and **_1 + 44 ≠ 12_** ___ ``` kaprekar(297) -->> return \\"Kaprekar\\" ``` **_Explanation_**: * `297` squared is `88209` , **Split into parts \\"88\\" and \\"209\\"**, and **_88 + 209 = 297_** ___ ``` kaprekar(1) -->> return \\"Kaprekar\\" ``` **_Explanation_**: * `1` squared is `1` , **Split into parts \\"0\\" and \\"1\\"**, and **_0 + 1 = 1_** ___ Enjoy Learning !!","solution":"def kaprekar(n): Determines if a number is a Kaprekar number. Parameters: n (int): A positive integer to check. Returns: str: \\"Kaprekar\\" if the number is a Kaprekar number, otherwise \\"Not!!\\" if n < 0: return \\"Not!!\\" if n < 10: # All single-digit numbers are Kaprekar numbers return \\"Kaprekar\\" sq = str(n ** 2) len_n = len(str(n)) left = int(sq[:-len_n]) if sq[:-len_n] else 0 right = int(sq[-len_n:]) if left + right == n: return \\"Kaprekar\\" else: return \\"Not!!\\""},{"question":"You are given a string s of length n consisting of lowercase English letters. A subsequence of a string is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to find the longest subsequence which is also a palindrome. A palindrome is a sequence that reads the same backward as forward. Write a function that takes the string s as input and returns the length of the longest subsequence of s that is a palindrome. -----Input----- The input consists of a single string s (1 le |s| le 10^3) consisting of lowercase English letters. -----Output----- Output the length of the longest subsequence of s that is a palindrome. -----Example----- Input bbbab Output 4 Input cbbd Output 2 -----Explanation----- In the first example, one possible longest palindromic subsequence is \\"bbbb\\". In the second example, one possible longest palindromic subsequence is \\"bb\\".","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in s. n = len(s) # Create a table to store lengths of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Single character palindromes for i in range(n): dp[i][i] = 1 # Build the table dp[][] in bottom-up manner for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of the longest palindromic subsequence return dp[0][n-1]"},{"question":"Given an integer n, return the smallest non-negative integer whose individual digits add up to n. For example: For n=3, the numbers 3, 12, 21 and 30 all have digits that add up to 3. The smallest non-negative such number is 3. For n=10, the numbers 19, 28, 37, and so on, have digits that add up to 10. The smallest non-negative such number is 19. You need to write a function `smallest_digit_sum(n)` that takes an integer n as input and returns the smallest non-negative number whose digits sum to n. Examples: ```python smallest_digit_sum(0) == 0 smallest_digit_sum(1) == 1 smallest_digit_sum(5) == 5 smallest_digit_sum(10) == 19 smallest_digit_sum(25) == 79 ```","solution":"def smallest_digit_sum(n): Returns the smallest non-negative integer whose digits add up to n. if n == 0: return 0 number = 0 digit_sum = 0 digit_multiplier = 1 while n > 0: digit = min(9, n) number += digit * digit_multiplier digit_sum += digit n -= digit digit_multiplier *= 10 return number"},{"question":"Task: Given an array of integers, return a new array such that each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. # Example: - For input `[1, 2, 3, 4]`, your method should return `[24, 12, 8, 6]`. # Notes: - The length of the input array will be at least 2. - You should solve it without using division and in O(n) time complexity. # Solution Approach: To solve this problem, you can use two arrays to store the product of elements to the left and to the right of each element in the input array, then multiply them together. # Example Walkthrough: - Input array: `[1, 2, 3, 4]` - Left products: `[1, 1, 2, 6]` (product of elements to the left of each index) - Right products: `[24, 12, 4, 1]` (product of elements to the right of each index) - Final result: `[24, 12, 8, 6]` (by multiplying left and right products for each index) # Constraints: - Do not use division to calculate the final result. # Function Signature: ```python def product_except_self(nums: List[int]) -> List[int]: pass ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: Given an array of integers, returns a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. This is done without using division and in O(n) time complexity. length = len(nums) # Create two arrays to store the product of elements to the left and to the right of each element left_products = [1] * length right_products = [1] * length result = [1] * length # Populate the left_products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Populate the right_products array for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the result array by multiplying left_products and right_products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"In a company employee management system, you need to determine the highest-ranking member in a specific section of the company\'s hierarchy. The company\'s hierarchy is represented as a tree, where each node corresponds to an employee, and each edge indicates a direct report relationship. The class `Employee` represents an employee and contains the following attributes: - `name` (string): The name of the employee. - `title` (string): The title of the employee. Titles are ranked in the following order (from highest to lowest): \\"CEO\\", \\"President\\", \\"Vice President\\", \\"Director\\", \\"Manager\\", \\"Lead\\", \\"Engineer\\", \\"Intern\\". - `reports` (list): A list of `Employee` objects who directly report to this employee. The task is to write a function called `find_highest_ranked` that takes an `Employee` object (the root of a subtree) and returns the name of the highest-ranking employee within that subtree. If there are multiple employees with the highest rank, return the one who appears first in a pre-order traversal of the subtree. Here\'s the definition of the `Employee` class and the `find_highest_ranked` function signature: ```python class Employee: def __init__(self, name: str, title: str, reports: list): self.name = name self.title = title self.reports = reports def find_highest_ranked(employee: Employee) -> str: # Your code here ``` Example: ```python ceo = Employee(\\"Alice\\", \\"CEO\\", []) vp1 = Employee(\\"Bob\\", \\"Vice President\\", []) vp2 = Employee(\\"Carol\\", \\"Vice President\\", []) manager = Employee(\\"David\\", \\"Manager\\", []) engineer = Employee(\\"Eve\\", \\"Engineer\\", []) intern = Employee(\\"Frank\\", \\"Intern\\", []) # Establishing the hierarchy ceo.reports = [vp1, vp2] vp1.reports = [manager] manager.reports = [engineer] engineer.reports = [intern] # Find the highest-ranked employee from David\'s subtree result = find_highest_ranked(manager) # result should be \\"David\\" since \\"Manager\\" is the highest rank in that subtree # Find the highest-ranked employee from Alice\'s subtree result = find_highest_ranked(ceo) # result should be \\"Alice\\" since \\"CEO\\" is the highest rank in the whole tree ```","solution":"class Employee: def __init__(self, name: str, title: str, reports: list): self.name = name self.title = title self.reports = reports RANKS = { \\"CEO\\": 1, \\"President\\": 2, \\"Vice President\\": 3, \\"Director\\": 4, \\"Manager\\": 5, \\"Lead\\": 6, \\"Engineer\\": 7, \\"Intern\\": 8 } def find_highest_ranked(employee: Employee) -> str: def dfs(emp): nonlocal highest_rank, highest_ranked_employee if RANKS[emp.title] < highest_rank: highest_rank = RANKS[emp.title] highest_ranked_employee = emp.name for report in emp.reports: dfs(report) highest_rank = float(\'inf\') highest_ranked_employee = \\"\\" dfs(employee) return highest_ranked_employee"},{"question":"Write a function that takes a string as input and returns a dictionary where each key is a lowercase letter from the string and the corresponding value is the count of occurrences of that letter. Ignore non-letter characters and consider uppercase and lowercase letters as the same: ```python letter_count(\\"Hello, World!\\") # {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} letter_count(\\"OpenAI GPT-3.\\") # {\'o\': 1, \'p\': 2, \'e\': 1, \'n\': 1, \'a\': 1, \'i\': 1, \'g\': 1, \'t\': 1} letter_count(\\"Python 3.8\\") # {\'p\': 1, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 1, \'n\': 1} letter_count(\\"123, Let\'s Code!\\") # {\'l\': 1, \'e\': 2, \'t\': 1, \'s\': 1, \'c\': 1, \'o\': 1, \'d\': 1} ```","solution":"def letter_count(s: str) -> dict: Takes a string as input and returns a dictionary where each key is a lowercase letter from the string and the corresponding value is the count of occurrences of that letter. Ignore non-letter characters and consider uppercase and lowercase letters as the same. from collections import Counter # Convert string to lowercase and filter out non-letter characters filtered_s = \'\'.join(c for c in s.lower() if c.isalpha()) # Count occurrences of each letter return dict(Counter(filtered_s))"},{"question":"**Implement a function `unique_digit_sum?` that determines if a given list of integers has the unique property where no two integers generate the same sum of their digits. Your function should accept a list of integers and return true if all digit sums are unique, otherwise false.** **Properties:** - The input should be a list of integers. - The input list cannot be nil or empty. - The function should only consider the absolute values of integers for calculating digit sums. - The function should return true if each integer in the list has a unique sum of its digits. - The function should return false if any two integers in the list have the same sum of their digits. - For example, the list [123, 321, 446] returns false because both 123 and 321 have the digit sum 6, while the list [123, 146, 258] returns true because each produces a unique digit sum: 6, 11, and 15 respectively.","solution":"def unique_digit_sum(lst): Determines if the given list of integers has unique digit sums. The function returns True if all digit sums are unique, otherwise False. def digit_sum(n): return sum(int(d) for d in str(abs(n))) digit_sums = set() for number in lst: d_sum = digit_sum(number) if d_sum in digit_sums: return False digit_sums.add(d_sum) return True"},{"question":"Given a binary tree, write a function to collect the tree\'s nodes as if you were doing a level-order traversal, but instead of visiting nodes level by level from top to bottom, visit them from bottom to top. Return a list of lists of nodes\' values. Each list should contain the values of one level, starting from the bottom-most level to the top-most level. Examples: Example 1: Input: root = [3, 9, 20, null, null, 15, 7] Output: [[15, 7], [9, 20], [3]] Explanation: The input binary tree: 3 / 9 20 / 15 7 Example 2: Input: root = [1, 2, 3, 4, null, null, 5] Output: [[4, 5], [2, 3], [1]] Explanation: The input binary tree: 1 / 2 3 / 4 5 Constraints: The number of nodes in the tree is in the range [0, 2000]. -1000 <= Node.val <= 1000 Note: You may assume that the tree nodes follow the TreeNode class with \'val\' attribute for value and \'left\' and \'right\' attributes for left and right child nodes respectively.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def levelOrderBottom(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for _ in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.insert(0, level) return result"},{"question":"In an array B of size N, elements range from 1 to N inclusive with one element missing. Find the missing element. Example 1: Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 Example 2: Input: [1, 2, 4, 5, 6] Output: 3 Example 3: Input: [9, 8, 7, 5, 4, 3, 2, 1] Output: 6 Note: - The array may not be sorted. - 1 <= N <= 10000","solution":"def find_missing_element(B): Finds the missing element in an array B of size N with elements ranging from 1 to N inclusive. n = len(B) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(B) return expected_sum - actual_sum"},{"question":"Given an integer array `nums` and an integer `target`, write a function that finds all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that: 1. `0 <= a, b, c, d < nums.length` 2. `a`, `b`, `c`, and `d` are distinct indices 3. `nums[a] + nums[b] + nums[c] + nums[d] == target` Return an array containing all such unique quadruplets. The solution set must not contain duplicate quadruplets. Example: ``` findQuadruplets([1, 0, -1, 0, -2, 2], 0) ``` Output: ``` [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` Constraints: - The input array `nums` may contain both positive and negative integers. - The length of `nums` will be between 1 and 200 inclusive. - The target value can be any valid integer.","solution":"def findQuadruplets(nums, target): nums.sort() quadruplets = [] length = len(nums) for i in range(length - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, length - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, length - 1 while left < right: sum_quad = nums[i] + nums[j] + nums[left] + nums[right] if sum_quad == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_quad < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Suppose you are given a list of integers representing the daily temperatures for a week. Your task is to write a program that calculates the difference between the highest and the lowest temperatures recorded during the week. -----Input:----- The first line contains an integer `n` which represents the number of datasets. Each dataset contains exactly 7 integers which represent the temperatures recorded on each day of the week, separated by spaces. -----Output:----- For each dataset, output the string \\"TEMP DIFF\\" followed by the difference between the highest and the lowest temperature recorded in that dataset. -----Assumptions:----- Each temperature is an integer in the range -50 .. 50. -----Discussion:----- For example, if the temperatures for one dataset are [20, 30, 25, 35, 31, 20, 22], the difference between the highest (35) and lowest (20) temperature is 15. -----Sample Input:----- 2 20 30 25 35 31 20 22 -10 -15 -20 -5 -12 -18 -14 -----Sample Output:----- TEMP DIFF 15 TEMP DIFF 15","solution":"def temperature_difference(datasets): Given a list of datasets, each containing temperatures for a given week, returns a list of strings with differences between the highest and lowest temperatures for each dataset. result = [] for temperatures in datasets: highest_temp = max(temperatures) lowest_temp = min(temperatures) diff = highest_temp - lowest_temp result.append(f\\"TEMP DIFF {diff}\\") return result def parse_input(num_datasets, all_temperatures): Parses and structures the input data to make it suitable for the main function. datasets = [] index = 0 for _ in range(num_datasets): dataset = all_temperatures[index:index+7] datasets.append(dataset) index += 7 return datasets def main(input_data): Main function to integrate the input parsing and temperature difference calculation. lines = input_data.strip().split(\'n\') num_datasets = int(lines[0]) all_temperatures = list(map(int, \' \'.join(lines[1:]).split())) datasets = parse_input(num_datasets, all_temperatures) return temperature_difference(datasets)"},{"question":"Situation An online bookstore needs a system to categorize and keep track of their book inventory. They require a functionality to update and query the current stock of any book in real-time. Specification The system should support the following operations: 1. **Add** a new book to the inventory with a specified title and an initial stock count. 2. **Update** the stock count of an existing book by adding more copies or removing some. 3. **Query** the stock count of a specific book to check availability. # Input You will receive a series of operations encoded as a list of strings. Each string represents an operation in one of the following formats: * `\'add [title] [count]\'` - adds a new book with the given title and stock count. * `\'update [title] [count]\'` - updates the stock of the book by adding the specified count (positive or negative). * `\'query [title]\'` - returns the current stock count of the book. # Constraints * The `title` is always a single word without spaces. * The `count` is an integer between -1000 and 1000. * It is guaranteed that the `update` and `query` operations will only be called on books that have been added before. # Output For each `query` operation, return the stock count of the specified book. # Example Input: ``` [ \'add HarryPotter 5\', \'add LordOfTheRings 3\', \'update HarryPotter 4\', \'update LordOfTheRings -1\', \'query HarryPotter\', \'query LordOfTheRings\' ] ``` Output: ``` [ 9, 2 ] ``` In this example: 1. The book \\"HarryPotter\\" is initially added with a count of 5. 2. The book \\"LordOfTheRings\\" is initially added with a count of 3. 3. The stock of \\"HarryPotter\\" is updated by adding 4 more copies, resulting in a total of 9. 4. The stock of \\"LordOfTheRings\\" is updated by removing 1 copy, resulting in a total of 2. 5. The stock of \\"HarryPotter\\" is queried and returned as 9. 6. The stock of \\"LordOfTheRings\\" is queried and returned as 2.","solution":"def manage_inventory(operations): Manages the book inventory and processes a list of operations. Args: operations (list of str): List of operations to perform. Returns: list: Results of query operations. inventory = {} result = [] for operation in operations: parts = operation.split() command = parts[0] title = parts[1] if command == \'add\': count = int(parts[2]) inventory[title] = count elif command == \'update\': count = int(parts[2]) if title in inventory: inventory[title] += count elif command == \'query\': if title in inventory: result.append(inventory[title]) return result"},{"question":"Your task is to implement a function that determines if a given string of parentheses (including square `[ ]` and curly `{ }`) is valid. A string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. For example: ```python is_valid(\\"()\\") # => True is_valid(\\"()[]{}\\") # => True is_valid(\\"[({})]\\") # => True is_valid(\\"[(]{)}\\") # => False is_valid(\\"((()\\")) # => False is_valid(\\"{[()]}\\") # => True is_valid(\\"([)]\\") # => False is_valid(\\"{[()]}}\\") # => False ``` Notes: - Input string can consist of the characters `(`, `)`, `[`, `]`, `{`, and `}` only. - Empty string is considered valid. - Do not use regular expressions to solve this problem. - Write an efficient solution to handle longer input strings.","solution":"def is_valid(s): Determine if the input string s is a valid expression of brackets. Args: s (str): input string containing the brackets Returns: bool: True if the string is valid, otherwise False stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function that takes in a list of integers and returns a new list containing only the integers that are prime numbers. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. > Note: You may assume the list contains only positive integers. Here\'s a small example to illustrate the expected functionality: ``` Input: [10, 11, 12, 13, 14, 15] Output: [11, 13, 17] ```","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the input list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"# Digital Factotum L0Gan Digital Factotum L0Gan is a robot capable of performing multiple tasks based on a series of instructions provided by its user. Each instruction is represented as a string containing commands. The robot interprets each command in the following way: - \'L\' - Move Left - \'R\' - Move Right - \'U\' - Move Up - \'D\' - Move Down The robot is placed on an infinite 2D grid, starting at the origin point (0,0). The objective is to determine the final coordinates of the robot after it executes all the commands in the instruction string. --- Input --- The first line of the input contains a single integer T denoting the number of test cases. Each of the next T lines contains a string composed of the characters \'L\', \'R\', \'U\', and \'D\' representing the commands. --- Output --- For each test case, output the final coordinates of the robot in the format \\"(x, y)\\". --- Constraints --- - 1 ≤ T ≤ 1000 - 1 ≤ Length of command string ≤ 1000 - The command string consists only of \'L\', \'R\', \'U\', and \'D\' characters. --- Sample Input --- 3 LLRR UDUD LULLL --- Sample Output --- (0, 0) (0, 0) (-4, 1) --- Explanation --- Example case 1: The robot moves left twice and right twice, returning to the origin point. Example case 2: The robot moves up and down twice, returning to the origin point. Example case 3: The robot ends up at coordinates (-4, 1) after the series of commands.","solution":"def final_robot_coordinates(T, commands_list): Function to determine the final coordinates of the robot after executing all the commands. Parameters: T (int): The number of test cases. commands_list (list): List of command strings for each test case. Returns: list: List of tuples representing the final coordinates for each test case. results = [] for commands in commands_list: x = y = 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 results.append((x, y)) return results"},{"question":"Your task is to write a function that takes a word and a positive integer `n` and shifts the characters of the word to the right by `n` positions in a circular manner. The circular behavior means that characters shifted past the end of the word reappear at the beginning. For example, if the word is \\"shift\\" and `n` is 2, the result should be \\"ftshi\\". A few examples: ```python circular_shift(\\"example\\", 3) == \\"pleexam\\" circular_shift(\\"coding\\", 1) == \\"gcodin\\" circular_shift(\\"challenge\\", 5) == \\"lengechal\\" circular_shift(\\"rotate\\", 4) == \\"aterot\\" ```","solution":"def circular_shift(word, n): Shifts the characters of the word to the right by n positions in a circular manner. Parameters: word (str): The word to be shifted. n (int): The number of right circular shifts. Returns: str: The word after the circular shift. if not word: return word n = n % len(word) # To handle cases where n is larger than the word length return word[-n:] + word[:-n]"},{"question":"Write a function `removeDuplicates` that takes a list of integers and returns a new list with duplicate elements removed while preserving the order of the first occurrence of each element. Example: ```python [1, 3, 3, 2, 1, 4] -> [1, 3, 2, 4] ```","solution":"def removeDuplicates(lst): Returns a new list with duplicates removed from the input list, preserving the order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"The city of Geeksville is under attack by aliens, and the mayor has commissioned a group of engineers to construct the largest possible defense wall using available resources. The defense wall should be built using blocks of varying heights. The strength of the wall is determined by the maximum rectangular area that can be formed within the block structure. Help the engineers by writing a program to find the maximum rectangular area in a histogram where the heights of the blocks are given. -----Input----- The first line contains an integer T denoting the number of test cases. Each of the following T lines contains: An integer N, the number of blocks in the histogram. Followed by N space-separated integers, representing the heights of the blocks. -----Output----- For each test case, print a single line containing the maximum rectangular area that can be formed in the given histogram. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 0 ≤ Height of each block ≤ 100000 -----Example----- Input: 2 5 1 2 3 4 5 7 6 2 5 4 5 1 6 Output: 9 12","solution":"def max_histogram_area(heights): Returns the maximum rectangular area in the histogram. stack = [] max_area = 0 for i, height in enumerate(heights): while stack and heights[stack[-1]] > height: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) while stack: h = heights[stack.pop()] w = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, h * w) return max_area def max_rectangular_area_in_histograms(test_cases): Returns the maximum rectangular area for each histogram in a list of test cases. results = [] for n, heights in test_cases: results.append(max_histogram_area(heights)) return results"},{"question":"In a bustling city, there is a famous shop that sells a variety of delicious sandwiches. Due to their popularity, customers always line up to buy these sandwiches. The shop has a system in place where it only serves customers in pairs, and the combined cost of sandwiches for each pair of customers should be even for them to proceed to checkout. Each customer has a specific amount they are willing to spend, and the shop wants to know the number of different customer pairs that have an even total amount. Can you help the shop owner determine the number of such pairs? Two pairs are considered different if any of the customers in the pair is different (identified by their position in the queue). Two pairs are not considered different if the customers are the same but positioned differently in the queue. -----Input:----- - The first line contains a single integer T, representing the number of testcases. 2T lines follow, 2 for each testcase. - For each testcase, the first line contains a single integer N, the number of customers in the queue. - The second line of each testcase contains N space-separated integers, B_1, B_2, ldots, B_N, representing the amount each customer is willing to spend. -----Output:----- Print a single number, C, representing the number of pairs of customers in B which have an even total amount. -----Subtasks----- For all subtasks, 1 leq T leq 10, 1 leq N leq 100000, and 1 leq B_i leq 100000 for all B_i. Subtask 1 [15 points] : N leq 2, There are at most 2 customers. Subtask 2 [45 points] : N leq 1000, There are at most 1000 customers. Subtask 3 [40 points] : No additional constraints. -----Sample Input:----- 3 4 2 4 6 7 3 3 5 8 2 1 1 -----Sample Output:----- 3 1 1 -----EXPLANATION:----- This section uses 1-indexing. In the first sample, the customers are: [2, 4, 6, 7] B[1] + B[2] = 2 + 4 = 6 which is even. B[1] + B[3] = 2 + 6 = 8 which is even. B[2] + B[3] = 4 + 6 = 10 which is even. In total, there are 3 pairs with an even sum, so the answer is 3. In the second sample, the customers are: [3, 5, 8]. Only 1 pair, B[2] + B[3] = 5 + 8 = 13 which is even. In the third sample, the customers are: [1, 1]. There is only 1 pair, B[1] + B[2] = 1 + 1 = 2 which is even.","solution":"def count_even_sum_pairs(T, testcases): results = [] for i in range(T): N = testcases[i][0] B = testcases[i][1] even_count = sum(1 for b in B if b % 2 == 0) odd_count = N - even_count # Number of ways to choose 2 evens and 2 odds even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 results.append(even_pairs + odd_pairs) return results"},{"question":"Given a string containing only lowercase letters, write a function to determine if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces and punctuation). # Examples ``` \\"racecar\\" -> True \\"hello\\" -> False \\"madam\\" -> True ```","solution":"def is_palindrome(s): Determines if the given string is a palindrome. :param s: string containing only lowercase letters :return: True if s is a palindrome, False otherwise return s == s[::-1]"},{"question":"**[Problem Statement]** # Merge Intervals Task Given a collection of intervals, merge all overlapping intervals. Description You are given an array of intervals, where each interval is represented as a list with its start and end times `[start, end]`. Your task is to write a function that merges all overlapping intervals and returns an array of the merged intervals. Input/Output * **Input:** A list of intervals where each interval is represented as a list `[start, end]`. Both `start` and `end` are integers such that `start ≤ end`. * **Output:** A list of intervals merged such that no two intervals overlap and all intervals are returned in ascending order based on their start time. # Example ```python # Example 1 input_intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] output_intervals = [[1, 6], [8, 10], [15, 18]] # Explanation: Since intervals [1, 3] and [2, 6] overlap, we merge them to get [1, 6]. # Example 2 input_intervals = [[1, 4], [4, 5]] output_intervals = [[1, 5]] # Explanation: Intervals [1, 4] and [4, 5] are considered overlapping due to the end of one touching the start of the other, so we merge them into [1, 5]. ``` Function Signature ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: ``` Constraints - The list of intervals could be empty, return an empty list in such case. - All integers in the intervals are non-negative. - Intervals are not necessarily sorted. - The intervals in the returned list should be sorted by their start time.","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: if not intervals: return [] # First, we need to sort the intervals based on the starting time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current interval # does not overlap with the previous one, append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the current interval with the previous one. merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"**Problem**: Sorting Teams by Keywords A big tech company wants to sort its teams based on given keywords. Each team has multiple keywords associated with it, and your task is to sort these teams lexicographically based on the provided keywords. In case of a tie, break the tie by the team ID in ascending order. For example, if Team A has keywords `[\\"apple\\", \\"banana\\"]` and Team B has keywords `[\\"apple\\", \\"cherry\\"]`, Team A should come before Team B because \\"banana\\" is lexicographically smaller than \\"cherry\\". # Input - The first line contains an integer `T` denoting the number of test cases. - For each test case: - The first line contains an integer `N` denoting the number of teams. - The next `N` lines contain: - An integer `teamID` (the team\'s unique ID) - An integer `K` (the number of keywords for this team) - Followed by `K` space-separated strings denoting the keywords. # Output - For each test case, output the sorted team IDs, one test case per line. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ teamID ≤ 10000 - 1 ≤ K ≤ 100 - 1 ≤ length of each keyword ≤ 50 # Example Input ``` 2 3 2 3 apple banana cherry 1 2 apple banana 3 2 apple cherry 2 1 2 lemon orange 2 2 apple banana ``` Output ``` 1 2 3 2 1 ``` # Explanation - In the first test case, the teams are sorted as follows: - Team 1: keywords = [\\"apple\\", \\"banana\\"] - Team 2: keywords = [\\"apple\\", \\"banana\\", \\"cherry\\"] - Team 3: keywords = [\\"apple\\", \\"cherry\\"] Team 1 goes first because its keywords are lexicographically smaller than both Team 2 and Team 3. - In the second test case, the teams are sorted as follows: - Team 2: keywords = [\\"apple\\", \\"banana\\"] - Team 1: keywords = [\\"lemon\\", \\"orange\\"] Team 2 goes before Team 1 based on its keywords.","solution":"def sort_teams(test_cases): results = [] for case in test_cases: N = case[\'N\'] teams = case[\'teams\'] # Sort based on keywords lexicographically, and in case of tie, by teamID sorted_teams = sorted(teams, key=lambda team: (team[\'keywords\'], team[\'teamID\'])) # Collect sorted team IDs sorted_team_ids = [team[\'teamID\'] for team in sorted_teams] results.append(\\" \\".join(map(str, sorted_team_ids))) return results"},{"question":"You are given a list of integers representing the IDs of people in a town. Each person has a unique ID. There\'s an event happening in the town where whenever two people with IDs that add up to 10 meet, they participate in a special ceremony and leave together. You need to determine the total number of such ceremonies that take place, and which IDs are involved. -----Input:----- First line of the input is an integer N (number of people). The second line contains N integers, representing the IDs of the people in the town. -----Output:----- Print the total number of ceremonies that take place, followed by a list of pairs of IDs (one pair per line) participating in each ceremony in lexicographical order. -----Constraints----- - 2 leq N leq 100 - 1 leq IDs leq 20 -----Sample Input:----- 6 1 9 2 8 7 3 -----Sample Output:----- 3 1 9 2 8 3 7","solution":"def find_ceremonies(N, ids): ids.sort() start, end = 0, N - 1 ceremonies = [] while start < end: sum_ids = ids[start] + ids[end] if sum_ids == 10: ceremonies.append((ids[start], ids[end])) start += 1 end -= 1 elif sum_ids < 10: start += 1 else: end -= 1 return len(ceremonies), ceremonies"},{"question":"You are given a string and a list of keywords. Each keyword belongs to a specific category. Your task is to identify the category of the string based on a keyword\'s presence. If a string matches multiple keywords from different categories, return the category of the earliest appearing keyword. # Input: 1. A string `s` (1<= len(s) <= 1000) which contains the text to be categorized. 2. An integer `n` (1 <= n <= 10), which represents the number of key-category pairs. 3. n lines each containing: - A keyword `k` (1<= len(k) <= 10, lowercase alphanumeric) - A category `c` (1<= len(c) <= 20, lowercase alphanumeric) # Output: - The category of the string based on the first matching keyword. # Example: **Input:** ``` abul 3 cat cat_memes bug IT_memes twice KPOP_memes ``` **Output:** ``` IT_memes ``` **Explanation:** The string \'abul\' contains the substring \'bug\', which belongs to the `IT_memes` category and appears before any other keyword. # Note: - The keywords are case-sensitive. - If no keywords are found in the string, output \\"no category found\\".","solution":"def categorize_string(s, n, key_category_pairs): Categorize a string based on the first occurring keyword in it. Parameters: s (str): The string to be categorized n (int): The number of keyword-category pairs key_category_pairs (list of tuples): A list where each tuple contains a keyword and its corresponding category Returns: str: The category of the string based on the first matching keyword, \\"no category found\\" if no match earliest_index = len(s) category = \\"no category found\\" for keyword, cat in key_category_pairs: index = s.find(keyword) if index != -1 and index < earliest_index: earliest_index = index category = cat return category"},{"question":"You are given strings `s1` and `s2`. You need to check if `s2` contains a permutation of `s1`. In other words, check if there exists a substring in `s2` that is an anagram of `s1`. Example 1: Input: s1 = \\"ab\\", s2 = \\"eidbaooo\\" Output: true Explanation: s2 contains one permutation of s1 (\\"ba\\"). Example 2: Input: s1 = \\"ab\\", s2 = \\"eidboaoo\\" Output: false Explanation: s2 does not contain any permutation of s1. Example 3: Input: s1 = \\"adc\\", s2 = \\"dcda\\" Output: true Explanation: s2 contains one permutation of s1 (\\"cda\\"). Example 4: Input: s1 = \\"abcd\\", s2 = \\"eabcd\\" Output: true Explanation: s2 contains one permutation of s1 (\\"abcd\\"). Constraints: 1 <= s1.length, s2.length <= 10^4 s1 and s2 consist of lowercase English letters.","solution":"def check_inclusion(s1, s2): Returns True if s2 contains any permutation of s1, False otherwise. from collections import Counter n1, n2 = len(s1), len(s2) if n1 > n2: return False s1_count = Counter(s1) window_count = Counter(s2[:n1]) if s1_count == window_count: return True for i in range(n1, n2): window_count[s2[i]] += 1 window_count[s2[i-n1]] -= 1 if window_count[s2[i-n1]] == 0: del window_count[s2[i-n1]] if s1_count == window_count: return True return False"},{"question":"Write a function that takes a list of integers as an argument and returns a string indicating whether the sum of the integers is even or odd. The function should return \\"`The sum is even`\\" if the sum of the list is even, and \\"`The sum is odd`\\" if the sum is odd.","solution":"def sum_even_or_odd(lst): Returns a string indicating whether the sum of the integers in the list is even or odd. Parameters: lst (list of int): A list of integers. Returns: str: \\"The sum is even\\" if the sum of the list is even, \\"The sum is odd\\" if the sum is odd. total = sum(lst) if total % 2 == 0: return \\"The sum is even\\" else: return \\"The sum is odd\\""},{"question":"Your friend is moving into a new house and needs help arranging their new library. The library consists of shelving units that each have a height limit `H`. Each book `i` in the collection has a height `hi`. Your task is to write a function that determines whether the entire collection of books can fit on the shelving units without exceeding the height limit of any single shelf. You are given the total number of books `N`, the height limit of each shelf `H`, and an array of integers representing the height of each book in the collection. You need to output `YES` if it is possible to arrange all the books within the given shelving units and `NO` otherwise. # Examples: ```csharp bool CanArrangeBooks(int[] bookHeights, int heightLimit) { // implementation } // Example 1 var books1 = new int[] {1, 2, 3, 4, 5}; int limit1 = 15; CanArrangeBooks(books1, limit1) // => YES // Example 2 var books2 = new int[] {6, 7, 8, 9, 10}; int limit2 = 25; CanArrangeBooks(books2, limit2) // => YES // Example 3 var books3 = new int[] {11, 12, 13, 14, 15}; int limit3 = 50; CanArrangeBooks(books3, limit3) // => NO ``` ```python def can_arrange_books(book_heights, height_limit): # implementation # Example 1 books1 = [1, 2, 3, 4, 5] limit1 = 15 print(can_arrange_books(books1, limit1)) # => YES # Example 2 books2 = [6, 7, 8, 9, 10] limit2 = 25 print(can_arrange_books(books2, limit2)) # => YES # Example 3 books3 = [11, 12, 13, 14, 15] limit3 = 50 print(can_arrange_books(books3, limit3)) # => NO ``` ```cpp bool canArrangeBooks(vector<int> bookHeights, int heightLimit) { // implementation } // Example 1 vector<int> books1 {1, 2, 3, 4, 5}; int limit1 = 15; canArrangeBooks(books1, limit1) // => YES // Example 2 vector<int> books2 {6, 7, 8, 9, 10}; int limit2 = 25; canArrangeBooks(books2, limit2) // => YES // Example 3 vector<int> books3 {11, 12, 13, 14, 15}; int limit3 = 50; canArrangeBooks(books3, limit3) // => NO ```","solution":"def can_arrange_books(book_heights, height_limit): Determines if all the books can be arranged within the shelves without exceeding the height limit of a single shelf. Args: book_heights (list of int): heights of the books. height_limit (int): the height limit of each shelf. Returns: str: \'YES\' if all books can be arranged within the given shelves, \'NO\' otherwise. total_height = sum(book_heights) if total_height <= height_limit: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a grid of size m x n where each cell in the grid can have one of three values: - 0 representing an empty cell, - 1 representing a wall, - 2 representing a target cell you want to reach. You start from the top-left corner of the grid and you can move up, down, left, or right in each step. You need to find the shortest path from the start position to any of the target cells. If there is no path that leads from the start to any target, return -1. Note: You cannot move through walls (cells with value 1). Example 1: Input: grid = [[0, 1, 2], [0, 0, 0], [1, 0, 0]] Output: 4 Explanation: The shortest path from the start to the target cell at grid[0][2] is 4 steps: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (0,2). Example 2: Input: grid = [[0, 1, 1], [0, 1, 2], [0, 0, 0]] Output: 5 Explanation: The shortest path to the target at the cell grid[1][2] is 5 steps: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (1,1) -> (1,2). Example 3: Input: grid = [[0, 1], [1, 2]] Output: -1 Explanation: There is no path from the start to the target cell. Constraints: 1 <= m, n <= 100 grid[i][j] is either 0, 1, or 2.","solution":"from collections import deque def shortest_path_to_target(grid): Finds the shortest path from the top-left corner to the nearest target cell in the grid. Returns -1 if there is no path to any target cell. if not grid: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if grid[r][c] == 2: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] != 1: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"You are given a string representing an arithmetic expression that includes integers, parentheses, and the operators \'+\', \'-\', \'*\', and \'/\'. The goal is to write a function that takes this string and returns the evaluated result as an integer. Ensure to respect the order of operations and handle parentheses correctly. For example: ```python def evaluate_expression(expression: str) -> int: # Your code here # Example test cases print(evaluate_expression(\\"3+2*2\\")) # Output: 7 print(evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\")) # Output: 23 print(evaluate_expression(\\"2-3/(2+1)\\")) # Output: 1 ``` Note: 1. You can assume the given expression is always valid. 2. Do not use the `eval` function or equivalent built-in functions. 3. You can use helper functions if needed to structure your solution. 4. Remember to handle negative numbers and division between integers according to integer division rules.","solution":"def evaluate_expression(expression: str) -> int: def operate(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) # Ensure integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operations(operators, values): operator = operators.pop() right = values.pop() left = values.pop() values.append(operate(operator, right, left)) operators, values = [], [] idx, n = 0, len(expression) while idx < n: if expression[idx] == \' \': idx += 1 continue if expression[idx] == \'(\': operators.append(expression[idx]) elif expression[idx].isdigit(): val = 0 while idx < n and expression[idx].isdigit(): val = val * 10 + int(expression[idx]) idx += 1 values.append(val) idx -= 1 elif expression[idx] == \')\': while operators and operators[-1] != \'(\': apply_operations(operators, values) operators.pop() # Pop the \'(\' else: while (operators and precedence(operators[-1]) >= precedence(expression[idx])): apply_operations(operators, values) operators.append(expression[idx]) idx += 1 while operators: apply_operations(operators, values) return values[0]"},{"question":"In a data processing system, there are N distinct tasks identified by IDs from 1 to N. Each task i can potentially depend on another task j, such that task j must be completed before task i can begin. These dependencies are given as pairs (a_i, b_i), where task a_i depends on task b_i. Your goal is to determine whether it is possible to complete all the tasks, and if so, output a possible order of completion. -----Constraints----- - 1 leq N leq 10^5 - 0 leq M leq 10^5 - 1 leq a_i, b_i leq N -----Input----- Input is given from Standard Input in the following format: N M a_1 b_1 a_2 b_2 : a_M b_M -----Output----- If it is possible to complete all tasks, print \\"Possible\\" followed by a list of task IDs in the order they can be completed. If not, print \\"Impossible\\". -----Sample Input----- 6 6 1 2 2 3 3 4 4 5 6 3 4 6 -----Sample Output----- Possible 1 2 3 6 4 5 In this example, we have 6 tasks with dependencies. One possible order to complete the tasks is to follow the sequence 1, 2, 3, 6, 4, 5.","solution":"def find_task_order(N, M, dependencies): from collections import deque, defaultdict # Initialize graph and in-degrees graph = defaultdict(list) in_degree = defaultdict(int) for a, b in dependencies: graph[b].append(a) in_degree[a] += 1 # Queue for all vertices with no incoming edges queue = deque([i for i in range(1, N + 1) if in_degree[i] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == N: print(\\"Possible\\") print(\\" \\".join(map(str, order))) else: print(\\"Impossible\\") # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) dependencies = [(int(data[i*2+2]), int(data[i*2+1])) for i in range(M)] find_task_order(N, M, dependencies)"},{"question":"You are given an integer array `arr` which represents the heights of different buildings on a street, from left to right. A building `i` has a height `arr[i]` and it casts a shadow to its right that extends across the buildings with lower or equal height. Your task is to find out the total number of buildings that are in the shadow of some other buildings. -----Input:----- - The first line contains an integer `n` - the number of buildings. - The second line contains `n` integers `arr[i]` - the heights of the buildings. -----Output:----- Output a single integer denoting the total number of buildings that are in the shadow of some other buildings. -----Constraints----- - 1 leq n leq 10^6 - 1 leq arr[i] leq 10^9 -----Sample Input:----- 7 4 2 3 1 5 1 2 -----Sample Output:----- 5 Explanation: - Building 1 (height 4) casts a shadow on buildings 2 (height 2) and 3 (height 3). - Building 3 (height 3) does not cast a shadow on any new buildings. - Building 4 (height 1) also remains in the shadow of building 3. - Building 5 (height 5) casts a shadow on buildings 6 (height 1) and 7 (height 2). Thus, buildings 2, 3, 4, 6, and 7 are in shadows.","solution":"def count_buildings_in_shadow(arr): n = len(arr) total_in_shadow = 0 # Higher buildings encountered so far from the left max_height = arr[0] for i in range(1, n): if arr[i] <= max_height: total_in_shadow += 1 else: max_height = arr[i] return total_in_shadow"},{"question":"Given a string of words and an integer k, rearrange the words such that every k-th word is moved to the beginning of the string. The order of the other words should remain the same. # Function Signature Complete the function `rearrange_kth_word(s: str, k: int) -> str` that meets the specifications below. # Input - The function takes a string `s` which contains several words separated by spaces. - The function takes an integer `k` which is greater than or equal to 1 and less than or equal to the number of words in the string. The integer k denotes every k-th word to be moved to the beginning. # Output - The function returns a new string with the k-th word moved to the beginning as specified. # Example ```python rearrange_kth_word(\\"the quick brown fox jumps over the lazy dog\\", 3) ``` Output: `\\"brown quick the fox jumps over the lazy dog\\"` # Constraints - Consider k is always a valid integer within the range. - The function should maintain the order of the other words. # Explanation In this example, the third word (\\"brown\\") has been moved to the beginning of the string, while the order of the remaining words stays unchanged. ```python def rearrange_kth_word(s: str, k: int) -> str: words = s.split() if k > len(words): return s kth_word = words.pop(k - 1) return \' \'.join([kth_word] + words) ```","solution":"def rearrange_kth_word(s: str, k: int) -> str: Rearranges the words in the string such that every k-th word is moved to the beginning of the string. The order of the other words remains the same. Args: s (str): The input string of words. k (int): The position of the word to be moved to the beginning. Returns: str: The rearranged string with the k-th word moved to the beginning. words = s.split() # Getting every k-th word, which in this case is only the single k-th word if k <= 0 or k > len(words): return s kth_word = words.pop(k - 1) return \\" \\".join([kth_word] + words)"},{"question":"Given a string s, a dictionary of words dict, and an integer max_splits, return true if and only if s can be split into a space-separated sequence of one or more dictionary words, using at most max_splits splits. Example 1: Input: s = \\"applepenapple\\", dict = [\\"apple\\", \\"pen\\"], max_splits=2 Output: true Explanation: We can split s as \\"apple pen apple\\". This sequence uses 2 splits, which is equal to max_splits. Example 2: Input: s = \\"catsandog\\", dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"], max_splits=1 Output: false Explanation: There is one possible split \\"cats andog\\" which uses more than max_splits splits. Example 3: Input: s = \\"aaaaa\\", dict = [\\"a\\",\\"aa\\",\\"aaa\\"], max_splits=2 Output: true Explanation: We can split s as \\"aaa aa\\". This sequence uses 1 split, which is less than max_splits. Constraints: 1 <= s.length <= 300 1 <= dict.length <= 1000 1 <= dict[i].length <= 20 All the strings in dict are unique. 1 <= max_splits <= s.length - 1","solution":"def can_split(s, word_dict, max_splits): Determine if the string can be split into words from the dictionary using at most max_splits splits. :param s: The input string to be split. :param word_dict: List of words that can be used to split the string. :param max_splits: Maximum number of splits allowed. :return: True if s can be split within max_splits, otherwise False. n = len(s) word_set = set(word_dict) def can_split_recursive(start_index, splits_left): if start_index == n: return True if splits_left < 0: return False for end_index in range(start_index + 1, n + 1): if s[start_index:end_index] in word_set: if can_split_recursive(end_index, splits_left - 1): return True return False return can_split_recursive(0, max_splits)"},{"question":"Task: You are given a string `s` consisting of lowercase alphabets, and an integer `k`. Your task is to complete the function `longestSubstringWithKDistinct` that returns the length of the longest substring of `s` that contains at most `k` distinct characters. Example 1: Input: s = \\"eceba\\" k = 2 Output: 3 Explanation: The substring is \\"ece\\" with length 3. Example 2: Input: s = \\"aa\\" k = 1 Output: 2 Explanation: The substring is \\"aa\\" with length 2. Your function should be efficient and should strive to handle the edge cases as well. Good luck!","solution":"def longestSubstringWithKDistinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_count = {} max_length = 0 left = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an integer array A of size N. Your task is to split the array into two subarrays such that the sum of the elements in the first subarray equals the sum of the elements in the second subarray. If it is not possible to split the array this way, output \\"NO\\". Otherwise, output \\"YES\\". -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the size of the array A for the corresponding test case. The second line contains N space-separated integers A[1], A[2], ..., A[N]. -----Output----- For each test case output a single line containing \\"YES\\" if it is possible to split the array into two subarrays with equal sum, otherwise output \\"NO\\". -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ A[i] ≤ 10000 The sum of values of N in each test file does not exceed 100000 -----Example----- Input: 2 4 1 2 3 4 3 2 4 8 Output: YES NO Explanation: Case 1. The array [1, 2, 3, 4] can be split into subarrays [1, 2, 3] and [4] both with sum equal to 6. Case 2. The array [2, 4, 8] cannot be split into two subarrays with equal sum.","solution":"def can_split_array(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] total_sum = sum(A) if total_sum % 2 != 0: results.append(\\"NO\\") continue # Use set to keep track of prefix sums we have seen prefix_sum_set = set() prefix_sum = 0 for num in A: prefix_sum += num if prefix_sum == total_sum // 2 or (prefix_sum - total_sum // 2) in prefix_sum_set: results.append(\\"YES\\") break prefix_sum_set.add(prefix_sum) else: results.append(\\"NO\\") return results"},{"question":"A company wants to build an application that assigns unique user IDs to its users. They want the IDs to be incremental starting from 1. However, they also need a feature that allows deactivation of user accounts, freeing up the IDs. When a new user registers, the system should assign the smallest available ID that is not currently in use. Your task is to implement a class `UserIDManager` which supports the following operations: - `__init__()`: Initializes an empty UserIDManager. - `register() -> int`: Registers a new user and returns the assigned user ID. - `deactivate(user_id: int) -> None`: Deactivates the given user ID, making it available for future registrations. -----Input----- The methods should not take standard input. Instead, they will be called directly. -----Output----- The methods should not print any output. Instead, they should return the intended values (if any). -----Constraints----- - A user ID manager instance will handle up to 10^5 registrations and deactivations. - The user IDs returned by `register()` will be positive integers starting from 1. - Deactivating a non-existent user ID should be a no-op and not cause an error. -----Example----- ``` # Initialize the user ID manager manager = UserIDManager() # Register a few users print(manager.register()) # -> 1 print(manager.register()) # -> 2 print(manager.register()) # -> 3 # Deactivate a user ID manager.deactivate(2) # Register another user, should return the smallest available ID (2 in this case) print(manager.register()) # -> 2 # Register more users print(manager.register()) # -> 4 ``` -----Explanation----- In the example, the manager first assigns IDs 1, 2, and 3. After deactivating ID 2, the next user gets ID 2 (the smallest available). After that, the next new user gets ID 4.","solution":"import heapq class UserIDManager: def __init__(self): self.available_ids = [] self.next_id = 1 def register(self) -> int: if self.available_ids: return heapq.heappop(self.available_ids) else: user_id = self.next_id self.next_id += 1 return user_id def deactivate(self, user_id: int) -> None: if user_id < self.next_id and user_id not in self.available_ids: heapq.heappush(self.available_ids, user_id)"},{"question":"=====Problem Statement===== You are given a positive integer N. Write a Python program to generate a list of all prime numbers less than N. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 2, 3, 5, 7, and 11 are primes. =====Input Format===== A single line containing the integer, N. =====Constraints===== 2≤N≤100 =====Output Format===== Print a list of prime numbers less than N. =====Sample Input===== 10 =====Sample Output===== [2, 3, 5, 7] =====Hints===== - You might want to use a helper function to determine if a number is prime. - Consider using list comprehension to generate the list.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def primes_less_than_n(N): Returns a list of all prime numbers less than N. return [num for num in range(2, N) if is_prime(num)]"},{"question":"You are given an array of n integers. You can perform a series of operations on the array, where in each operation you can remove an element from the array and add it to a newly formed subset S if the element is strictly greater than all elements currently in subset S (if any). The weight of the array is defined as the maximum number of operations you can perform until no more elements can be added to S. Answer q independent queries in the form (l, r): after keeping only the elements between the l-th and r-th indices (inclusive) in the array, what would be the weight of the resulting subarray? -----Input----- The first line contains two integers n and q (1 leq n, q leq 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — elements of the array. The i-th of the next q lines contains two integers l and r (1 leq l leq r leq n). -----Output----- Print q lines, the i-th line should contain a single integer — the answer to the i-th query. -----Examples----- Input 10 3 1 2 3 4 5 6 7 8 9 10 1 5 3 7 6 10 Output 5 5 5 Input 6 2 4 1 5 3 2 6 2 4 1 6 Output 2 3 -----Note----- Explanation of the first example: For the first query, we consider the subarray [1, 2, 3, 4, 5]. By selecting elements in increasing order, we can add 1, 2, 3, 4, and 5 to S sequentially, achieving a weight of 5. For the second query, we consider the subarray [3, 4, 5, 6, 7]. Similarly, we can add all elements sequentially to S, so the weight is 5. For the third query, we consider the subarray [6, 7, 8, 9, 10]. Again, 6, 7, 8, 9, and 10 can all be added sequentially, giving a weight of 5.","solution":"def subarray_weights(n, q, arr, queries): Calculate the weight of subarrays as per the queries. Parameters: n (int): The length of the array. q (int): The number of queries. arr (list of int): The array elements. queries (list of tuple): List of (l, r) queries. Returns: list of int: Weights of the subarrays for each query. results = [] for l, r in queries: subarray = arr[l-1:r] weight = 0 max_element = float(\'-inf\') for element in subarray: if element > max_element: max_element = element weight += 1 results.append(weight) return results"},{"question":"You are given a string s consisting of lowercase alphabetic characters. Your task is to determine the minimum number of moves required to make the string a palindrome. In one move, you can select any single character in the string and replace it with a different character. A palindrome is a string that reads the same forwards and backwards. For example, consider the following strings: - For the string \\"abca\\", you can replace the character \'b\' with \'a\' or \'c\' to make it a palindrome (either \\"aaaa\\" or \\"acca\\"). - For the string \\"racecar\\", it is already a palindrome, so no moves are required. - For the string \\"hello\\", you need to replace at least 2 characters to convert it into a palindrome (e.g., \\"hellh\\" or \\"holoh\\"). You need to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case consists of a single line containing a string s (1 le |s| le 1000), where |s| is the length of the string. It is guaranteed that s consists of only lowercase alphabetic characters. -----Output----- For each test case, print the answer: the minimum number of moves required to make the string s a palindrome. -----Example----- Input 4 abca racecar hello abcba Output 1 0 2 0","solution":"def min_moves_to_palindrome(s): Returns the minimum number of moves required to make the string a palindrome. left, right = 0, len(s) - 1 moves = 0 while left < right: if s[left] != s[right]: moves += 1 left += 1 right -= 1 return moves def solve(t, strings): results = [] for s in strings: results.append(min_moves_to_palindrome(s)) return results"},{"question":"You are working on a simple text adventure game where players can gather treasures from different locations. Each location keeps track of the treasures found there. A player can only collect a specific treasure from each location once. Write a class `Player` which supports the following operations: - A constructor that initializes an empty collection of treasures. - The `collect_treasure(location, treasure)` method that takes a `location` (a string) and a `treasure` (a string) as arguments and adds the treasure to the player\'s collection if it hasn\'t been collected from that particular location before. - The `treasure_count()` method that returns the total number of unique treasures collected by the player. Additionally, write a function `unique_treasures(locations)` that takes a list of strings, where each string is in the format \\"location_treasure\\" (e.g., \\"cave_gem\\", \\"forest_gold\\") and returns the count of unique treasures ignoring their locations. Examples: ```python p = Player() p.collect_treasure(\\"cave\\", \\"gem\\") p.collect_treasure(\\"forest\\", \\"gold\\") p.collect_treasure(\\"cave\\", \\"gold\\") print(p.treasure_count()) # Output: 2 locations = [\\"cave_gem\\", \\"forest_gold\\", \\"cave_gold\\", \\"forest_gold\\", \\"lake_pearl\\"] print(unique_treasures(locations)) # Output: 3 (gem, gold, pearl) ``` Notes: - Case should be ignored when checking treasures (e.g., \\"Gem\\" and \\"gem\\" should be considered the same). - If the player tries to collect the same treasure from the same location more than once, it should not be added to their collection again. - For the `unique_treasures` function, only the treasure part should be considered, ignoring the location.","solution":"class Player: def __init__(self): self.treasures = {} def collect_treasure(self, location, treasure): location = location.lower() treasure = treasure.lower() if location not in self.treasures: self.treasures[location] = set() if treasure not in self.treasures[location]: self.treasures[location].add(treasure) def treasure_count(self): all_treasures = set() for treasures in self.treasures.values(): all_treasures.update(treasures) return len(all_treasures) def unique_treasures(locations): unique_treas = set() for loc_treas in locations: _, treasure = loc_treas.lower().split(\'_\') unique_treas.add(treasure) return len(unique_treas)"},{"question":"You are given a list of integers. Your task is to compute the sum of all even numbers and the product of all odd numbers in the list. Return a tuple containing the sum of the even numbers and the product of the odd numbers. If there are no even numbers, their sum should be 0. If there are no odd numbers, their product should be 1. For example: - If the input list is [2, 3, 4, 5], the function should return (6, 15). - If the input list is [1, 3, 5], the function should return (0, 15). - If the input list is [2, 4, 6], the function should return (12, 1).","solution":"def sum_even_product_odd(lst): Compute the sum of all even numbers and the product of all odd numbers in the list. Parameters: lst (list of int): List of integers. Returns: tuple: A tuple containing the sum of the even numbers and the product of the odd numbers. sum_even = 0 product_odd = 1 for num in lst: if num % 2 == 0: sum_even += num else: product_odd *= num if all(num % 2 == 0 for num in lst): product_odd = 1 return (sum_even, product_odd)"},{"question":"A company wants to implement a simple employee bonus distribution system. Each employee is assigned a performance rating between 1 and 5 (inclusive). Based on the performance rating, employees will receive bonuses as follows: - Employees with a rating of 1 or 2 do not receive any bonus. - Employees with a rating of 3 receive a bonus of 500. - Employees with a rating of 4 receive a bonus of 1000. - Employees with a rating of 5 receive a bonus of 2000. Your task is to write a function that takes a list of performance ratings and returns the total amount of bonuses the company needs to distribute. Function Signature: ```python def calculate_total_bonus(ratings: List[int]) -> int: ``` **Input:** - A list of integers `ratings` where each integer represents an employee\'s performance rating (1 to 5). **Output:** - An integer representing the total amount of bonuses to be distributed by the company. **Example:** ```python calculate_total_bonus([1, 3, 4, 5, 2, 5, 3]) # Output: 6000 ``` **Explanation:** - The performance ratings are [1, 3, 4, 5, 2, 5, 3]. - Employees with ratings 1 and 2 do not receive any bonus. - Employees with ratings 3 (two such employees) receive 500 each, so 2 * 500 = 1000. - Employee with rating 4 receives 1000. - Employees with ratings 5 (two such employees) receive 2000 each, so 2 * 2000 = 4000. - The total bonus amount is 1000 + 1000 + 4000 = 6000.","solution":"from typing import List def calculate_total_bonus(ratings: List[int]) -> int: Calculates the total amount of bonuses based on performance ratings. Parameters: - ratings (List[int]): A list of integers where each integer represents an employee\'s performance rating (1 to 5). Returns: - int: The total amount of bonuses to be distributed. bonus_distribution = { 1: 0, 2: 0, 3: 500, 4: 1000, 5: 2000 } total_bonus = sum(bonus_distribution[rating] for rating in ratings) return total_bonus"},{"question":"Alice and Bob are playing an interesting game involving numbers and strings. They start with a string `S` of length `n`, consisting of lowercase English letters, and `n` numbers `A_1, A_2, ..., A_n`, each corresponding to a character in `S`. For every character in `S`, there\'s a number indicating the value of that position. The goal of the game is to rearrange the string `S` such that its resultant value is maximized. The value of a string is calculated as follows: - Concatenate the characters of the string to form a new string. - Replace each character in the new string by its corresponding value as given in the array `A`. - Convert this resultant array of values into a single integer by concatenating the values as strings. Alice and Bob take turns to swap any two adjacent characters in `S` (along with their corresponding values in `A`). Alice moves first. Both players aim to maximize the string\'s value, but Alice always plays optimally while Bob plays randomly. Although Bob plays randomly, he ensures that each move results in an increase or maintains the value of the string (i.e., Bob never makes a move that reduces the current value). Determine the maximum value of the resultant string after Alice and Bob have completed playing the game, considering that Alice plays optimally and Bob plays randomly but non-decreasingly. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 3000), the length of the string. - The second line contains the string `S` of length `n`, consisting of lowercase English letters. - The third line contains `n` integers `A_1, A_2, ..., A_n` (1 ≤ A_i ≤ 1000), representing the values corresponding to each character in `S`. # Output - Output a single line with the maximum value of the resultant string after Alice and Bob have completed their turns. # Example Input: 4 abdc 3 7 9 2 Output: 9732 # Note In the example, the string \\"abdc\\" with values [3, 7, 9, 2] can be optimally rearranged by Alice to form the string \\"dabc\\" with values [9, 7, 3, 2], resulting in the number 9732.","solution":"def maximize_string_value(n, S, A): Returns the maximum value of the resultant string after Alice and Bob have completed their turns. Parameters: n (int): Length of the string S. S (str): Input string consisting of lowercase English letters. A (list of int): List of integers representing values corresponding to each character in S. Returns: str: Maximum value of the resultant string. char_value_pairs = list(zip(S, A)) char_value_pairs.sort(key=lambda pair: pair[1], reverse=True) max_value_str = \'\'.join(str(pair[1]) for pair in char_value_pairs) return max_value_str"},{"question":"Alice is constructing a building with n floors. She wants to place elevators in the building such that it is always possible to travel between any pair of floors using the elevators. However, elevators have a limited range and can only travel up to d floors in a single trip. Alice wants to ensure that for each floor, there is at least one elevator that can take you from that floor to any other floor within d floors. To optimize the construction cost, Alice plans to install the minimum number of elevators. Your task is to determine the minimum number of elevators required to satisfy Alice\'s condition for given values of n and d. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers n and d. -----Output----- For each test case, print a single line containing the minimum number of elevators required. -----Constraints----- - 1 le T le 100 - 1 le n le 10^5 - 1 le d le n -----Example Input----- 2 10 3 5 2 -----Example Output----- 4 3 -----Explanation----- Example case 1: With n = 10 and d = 3, we can place elevators at floors 1, 4, 7, and 10. Each elevator can travel within d = 3 floors up or down, covering all 10 floors. Example case 2: With n = 5 and d = 2, we can place elevators at floors 1, 3, and 5. Each elevator can travel within d = 2 floors up or down, covering all 5 floors.","solution":"def min_elevators_needed(T, test_cases): Returns the minimum number of elevators required to ensure coverage for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers, n (number of floors) and d (maximum floors an elevator can travel in a single trip). Returns: list of int: Minimum number of elevators required for each test case. results = [] for n, d in test_cases: # Calculate the minimum number of elevators needed if d >= n: results.append(1) else: # number of elevators needed where each elevator covers to max d floors apart results.append((n + d - 1) // d) return results"},{"question":"Given a list of strings, write a function that determines the longest common prefix of the strings. *Parameters*: An array `strs` of length `n` (1 ≤ `n` ≤ 200), where each element is a string of length `m` (1 ≤ `m` ≤ 200). *Example input*: ``` strs = [\\"flower\\", \\"flow\\", \\"flight\\"] ``` *Output*: ```\\"fl\\"```, because \\"fl\\" is the longest common prefix of the three strings. # Constraints: - The list `strs` will contain at least one string. - All characters in `strs` are in lower case. - If there is no common prefix, return an empty string `\\"\\"`. # Notes: * The prefix means the initial sequence of characters of each string. * The solution should have linear time complexity in terms of the total number of characters in all strings, i.e., O(n * m) where n is the number of strings and m is the longest string length. ___ Examples: ``` strs = [\\"dog\\", \\"racecar\\", \\"car\\"] // return \\"\\" - there is no common prefix among the input strings strs = [\\"interspecies\\", \\"interstellar\\", \\"interstate\\"] // return \\"inters\\" - \\"inters\\" is the longest common prefix of the input strings strs = [\\"hello\\"] // return \\"hello\\" - since there is only one input string, \\"hello\\" is the common prefix ```","solution":"def longest_common_prefix(strs): Function to determine the longest common prefix of a list of strings. Parameters: strs (list of str): list of strings Returns: str: longest common prefix or an empty string if there is no common prefix if not strs: return \\"\\" prefix = strs[0] for string in strs[1:]: while string[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] return prefix"},{"question":"A company has a network of K servers labeled from 0 to K-1. Each server can communicate with the next server in line (i.e., server 0 can communicate with server 1, server 1 can communicate with server 2, and so on). Communication packets are initially sent to server 0. If a server receives more than N packets, it immediately forwards exactly 1 packet to the next server. This process continues until all servers have N packets or fewer. If the last server in the line, server K-1, receives more than N packets, packets exceeding N are lost. Given the initial number of packets P, N (the packet capacity of each server), and K (the number of servers), determine the final number of packets in each server. -----Input----- The input will consist of one line containing three integers P, N and K separated by spaces. P will be between 0 and 1000000000 inclusive. N will be between 1 and 100 inclusive. K will be between 1 and 100 inclusive. All servers start with zero packets initially. -----Output----- The output will consist of K integers on one line followed by a newline. The first integer is the number of packets in server 0, the second integer is the number of packets in server 1, and so on. -----Example----- Input: 10 3 4 Output: 3 3 3 1 Explanation: Initially, 10 packets are sent to server 0. With each packet addition, if a server exceeds having N packets, it forwards one packet to the next server. After distributing all packets, server 0 has 3 packets, server 1 has 3 packets, server 2 has 3 packets, and server 3 has 1 packet.","solution":"def distribute_packets(P, N, K): Distributes P packets among K servers with each server having a maximum capacity of N packets. Packets beyond N are forwarded to the next server. Parameters: P (int): initial number of packets. N (int): maximum capacity of each server. K (int): number of servers. Returns: List[int]: The final number of packets in each server. servers = [0] * K current_server = 0 while P > 0 and current_server < K: if servers[current_server] < N: servers[current_server] += 1 P -= 1 else: current_server += 1 return servers"},{"question":"Merge Intervals You are given a collection of intervals, which are represented as a pair of integers (start, end). The intervals may overlap, and if they do, you should merge them into the smallest number of continuous intervals. Write a function `merge_intervals(intervals)` that takes a list of intervals and returns a list of the merged intervals in ascending order. Each interval in the input list is represented as a tuple ( (start, end) ). # Examples ```python merge_intervals([(1, 3), (2, 4), (5, 7), (6, 8)]) # Output: [(1, 4), (5, 8)] merge_intervals([(1, 5), (2, 3), (4, 6)]) # Output: [(1, 6)] merge_intervals([(1, 10), (2, 6), (8, 10)]) # Output: [(1, 10)] merge_intervals([(1, 2), (3, 4), (5, 6)]) # Output: [(1, 2), (3, 4), (5, 6)] ``` Each interval in the returned list should be represented as a tuple ( (start, end) ), and they should be sorted by the starting point. # Constraints 1. The number of intervals ( n ) will not exceed 10,000. 2. Each interval ( (start, end) ) will have `1 ≤ start ≤ end ≤ 10^6`.","solution":"def merge_intervals(intervals): Merges a list of intervals and returns the merged intervals in a sorted order. Parameters: intervals (list of tuple): List of intervals represented as tuples (start, end). Returns: list of tuple: List of merged intervals. if not intervals: return [] # Sort intervals by the starting point intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] # If the current interval overlaps with the last merged interval, merge them if current[0] <= last_merged[1]: merged_intervals[-1] = (last_merged[0], max(last_merged[1], current[1])) else: merged_intervals.append(current) return merged_intervals"},{"question":"You are tasked with implementing a function that accepts a circular singly-linked list and a specific integer value. The goal is to insert a new node with the given value into the circular linked list in such a way that it maintains its sorted order in ascending manner. The circular linked list is defined in such a way that the last node points back to the first node, creating a loop. Each node in the list has an integer value and a pointer to the next node. The function should handle cases where the list may be empty, meaning there are no nodes initially. Write a function, `def insert_into_circular_list(head: Node, value: int) -> Node`, where `Node` is a class representing the node of the list with the following structure: ```python class Node: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Your function should return the head of the modified circular linked list. Examples: 1. If the circular linked list has elements `[3] -> [5] -> [3]` and the given value is `4`, the resulting list would be `[3] -> [4] -> [5] -> [3]`. 2. If the circular linked list is initially empty and the given value is `1`, the resulting list would be `[1] -> [1]`. 3. If the circular linked list has elements `[2] -> [5] -> [2]` and the given value is `6`, the resulting list would be `[2] -> [5] -> [6] -> [2]`. 4. If the circular linked list has elements `[2] -> [5] -> [2]` and the given value is `1`, the resulting list would be `[1] -> [2] -> [5] -> [1]`. Note: Please ensure that your function is efficient and handles edge cases effectively.","solution":"class Node: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_into_circular_list(head: Node, value: int) -> Node: new_node = Node(value) # Case 1: The list is empty if not head: new_node.next = new_node return new_node # Case 2: Insert in the non-empty list current = head while True: # Case 2.1: Insert between current and current.next if (current.val <= value <= current.next.val) or (current.val > current.next.val and (value > current.val or value < current.next.val)): new_node.next = current.next current.next = new_node break current = current.next # Case 2.2: We have looped the entire list and none of the above conditions met, place after current if current == head: new_node.next = current.next current.next = new_node break # Case 3: Deciding the new head (if head is greater than the value being inserted, new_node is the new head) if value < head.val: return new_node else: return head"},{"question":"You are given an integer array and a target integer value. Your task is to find two distinct elements in the array such that their sum is equal to the target. If such a pair exists, print the two elements in non-decreasing order. If multiple pairs exist, print any one of them. If no such pair exists, print \\"Not found\\". -----Input:----- - The first line contains an integer n — the length of the array. - The second line contains n integers — the elements of the array. - The third line contains the target integer value. -----Output:----- - Print two integers — the pair of elements from the array whose sum equals the target, in non-decreasing order. If no such pair exists, print \\"Not found\\". -----Constraints----- - 2 leq n leq 10^5 - -10^9 leq text{array element} leq 10^9 - -10^9 leq text{target} leq 10^9 -----Sample Input 1----- 5 2 7 11 15 1 9 -----Sample Input 2----- 4 1 2 3 4 8 -----Sample Output 1----- 2 7 -----Sample Output 2----- Not found -----Explanation----- - In the first example, the pair (2, 7) sums up to 9. - In the second example, no pair sums up to 8.","solution":"def find_pair_with_sum(arr, target): Finds two distinct elements in the array such that their sum is equal to the target. If such a pair exists, returns the two elements in non-decreasing order. If no such pair exists, returns \\"Not found\\". seen = {} for num in arr: complement = target - num if complement in seen: return tuple(sorted((num, complement))) seen[num] = True return \\"Not found\\""},{"question":"Given an array of integers and an integer `S`, return the length of the longest contiguous subarray that sums up to exactly `S`. If there is no such subarray, return 0. Example 1: Input: nums = [1, -1, 5, -2, 3], S = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest. Example 2: Input: nums = [-2, -1, 2, 1], S = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest. Example 3: Input: nums = [1, 2, 3], S = 7 Output: 0 Explanation: There are no subarrays that sum to 7. Note: - The length of the array is in the range [1, 10^5]. - The integer values of the elements in the array are in the range [-10^5, 10^5].","solution":"def longest_subarray_with_sum(nums, S): Returns the length of the longest contiguous subarray that sums up to exactly S. prefix_sum = {0: -1} # Dictionary to store the first occurrence of prefix sums current_sum = 0 max_len = 0 for i, num in enumerate(nums): current_sum += num if current_sum - S in prefix_sum: max_len = max(max_len, i - prefix_sum[current_sum - S]) if current_sum not in prefix_sum: prefix_sum[current_sum] = i return max_len"},{"question":"Task Implement a function that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. Example For `var str = \\"Hello World\\"`, the result should be `3`. For `var str = \\"Programming is fun!\\"`, the result should be `5`. Input/Output - `[input]` string `str` The input string, which can contain any characters including spaces and punctuation. - `[output]` integer The number of vowels in the input string.","solution":"def count_vowels(s): Counts the number of vowels (a, e, i, o, u) in the given string s. The function is case-insensitive. Parameters: s (str): The input string. Returns: int: Number of vowels in the string. vowels = \'aeiou\' count = 0 for char in s.lower(): if char in vowels: count += 1 return count"},{"question":"Working with a Flat Organizational Chart You\'ve joined a software development team that practices agile development and has a flat organizational structure. The team is working on a new system to keep track of the roles and responsibilities within the team. # Task Create a function `teamRoles(positions, queries)` that helps to process and retrieve information about the team members. 1. **positions**: A dictionary where keys are role names (strings) and values are lists of names (strings) of team members holding that role. 2. **queries**: A list of tuples where each tuple represents a query. Queries can be of two types: - `(\\"role\\", role_name)`: This query requests a list of all team members holding the specified `role_name`. - `(\\"member\\", member_name)`: This query requests a list of all roles assigned to the specified `member_name`. # Requirements - If a role in the query is not found in `positions`, return an empty list for that query. - If a member in the query does not hold any roles, return an empty list for that query. - Return the results of the queries as a list of lists. # Example ```python positions = { \\"Developer\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"Manager\\": [\\"Eve\\", \\"Bob\\"], \\"Tester\\": [\\"Charlie\\", \\"Eve\\"] } queries = [ (\\"role\\", \\"Developer\\"), (\\"role\\", \\"Manager\\"), (\\"member\\", \\"Bob\\"), (\\"member\\", \\"Alice\\"), (\\"role\\", \\"Designer\\") ] print(teamRoles(positions, queries)) ``` # Output ```python [ [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], [\\"Eve\\", \\"Bob\\"], [\\"Developer\\", \\"Manager\\"], [\\"Developer\\"], [] ] ``` # Constraints - Consider only roles and members provided in the `positions` dictionary. - Assume `positions` will have between 1 and 100 roles, each with 1 to 50 members. - Assume `queries` will have between 1 and 50 items. - Each name and role in the input will be a non-empty string of at most 50 characters.","solution":"def teamRoles(positions, queries): Processes and retrieves information about team members based on roles and member queries. Args: positions (dict): A dictionary where keys are role names and values are lists of team member names. queries (list): A list of tuples representing the queries. Returns: list: A list of lists with the results of the queries. result = [] # Create a reverse dictionary mapping members to roles for quick lookup in member queries member_role_map = {} for role, members in positions.items(): for member in members: if member in member_role_map: member_role_map[member].append(role) else: member_role_map[member] = [role] # Process each query for query in queries: query_type, query_value = query if query_type == \\"role\\": # Return list of members holding the specified role_name result.append(positions.get(query_value, [])) elif query_type == \\"member\\": # Return list of roles assigned to the specified member_name result.append(member_role_map.get(query_value, [])) return result"},{"question":"Implement a function `path_exists` that determines if there is a path between two cells in a grid. The grid is represented as a matrix of characters, where \'S\' is the starting point, \'E\' is the ending point, \'1\' represents passable cells, and \'0\' represents blocked cells. You can move up, down, left, or right from a passable cell (i.e., no diagonal moves). The function `path_exists` should take a single argument: - `grid` (a list of strings): the grid\'s rows. The function should return `True` if there is a path from \'S\' to \'E\', and `False` otherwise. # Example: ```python grid = [ \\"S01\\", \\"111\\", \\"10E\\" ] path_exists(grid) # returns True ``` # Constraints: - The grid will always contain exactly one \'S\' and one \'E\'. - The grid will have at most 100x100 elements. - The function should be efficient in both time and space complexity.","solution":"def path_exists(grid): Determines if there is a path between \'S\' and \'E\' in a grid. :param grid: List of strings representing the grid. :return: True if there is a path from \'S\' to \'E\', otherwise False. from collections import deque # Find the starting point \'S\' rows, cols = len(grid), len(grid[0]) start = None end = None for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'E\': end = (r, c) if not start or not end: return False # BFS to find the path from \'S\' to \'E\' queue = deque([start]) visited = set([start]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: current = queue.popleft() if current == end: return True for dr, dc in directions: nr, nc = current[0] + dr, current[1] + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] != \'0\' and (nr, nc) not in visited: queue.append((nr, nc)) visited.add((nr, nc)) return False"},{"question":"Find the length of the longest substring of a given string that contains at most two distinct characters. You are given a string s consisting of lowercase English letters. Your task is to return the length of the longest substring that contains at most two distinct characters. Example 1: Input: s = \\"eceba\\" Output: 3 Explanation: The longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Example 2: Input: s = \\"ccaabbb\\" Output: 5 Explanation: The longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5. Note: 0 <= s.length <= 104 s consists of English letters.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. from collections import defaultdict if len(s) <= 2: return len(s) left = 0 max_len = 0 char_count = defaultdict(int) for right in range(len(s)): char_count[s[right]] += 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"# Task Write a function that receives a string of digits and returns the smallest number that can be obtained by deleting exactly one digit of the given number. # Example For `number = \\"152\\"`, the output should be `12`; For `number = \\"1001\\"`, the output should be `1`. # Input/Output - `[input]` string `number` A string of digits. Constraints: `2 ≤ number.length ≤ 1000`. - `[output]` an integer The smallest number that can be obtained by deleting one digit from the input number string.","solution":"def smallest_number_after_deleting_one_digit(number): Returns the smallest number that can be obtained by deleting exactly one digit of the given number. Parameters: number (str): A string of digits to process. Returns: int: The smallest number after deleting one digit. smallest = float(\'inf\') for i in range(len(number)): # Removing the i-th digit new_number = int(number[:i] + number[i+1:]) # Update the smallest number found if new_number < smallest: smallest = new_number return smallest"},{"question":"In a lush forest, a group of squirrels are playing a game where they throw nuts at each other. Each squirrel throws a nut either to the left or right by a certain distance. However, each squirrel can only throw one nut. The forest ranger wants to know if there\'s any pair of squirrels that successfully hit each other with their throws. If a squirrel is positioned at coordinate x and throws a nut by d units to the right, it can possibly hit a squirrel at position x+d if such a squirrel exists. If a squirrel is positioned at coordinate y and throws a nut by -d units to the left, it can potentially hit a squirrel at position y-d if such a squirrel exists. Help the ranger determine if there\'s any pair of squirrels that hit each other with their nut throws. -----Input:----- - The first line contains an integer n (1 <= n <= 100) - the number of squirrels in the forest. - Each of the next n lines contains two integers p_i and d_i (-10^4 <= p_i <= 10^4, 1 <= |d_i| <= 2 * 10^4) - the position of the ith squirrel and the distance it throws the nut. Positive values of d_i indicate a throw to the right, and negative values indicate a throw to the left. No two squirrels can occupy the same position. -----Output:----- If there exists a pair of squirrels that hit each other with their throws, output \\"YES\\". Otherwise, output \\"NO\\". -----Sample Input:----- 3 2 3 5 -3 10 2 -----Sample Output:----- YES","solution":"def squirrels_hit_each_other(n, throws): Determine if any pair of squirrels hit each other with their nut throws. :param n: Number of squirrels :param throws: List of tuples, each containing position and throw distance of a squirrel. :return: \'YES\' if there exists a pair that hits each other, otherwise \'NO\'. throw_map = {} # Dictionary to store the resulting positions after throws for position, distance in throws: right_throw = position + distance left_throw = position - distance # Check if the current position matches the right throw of any previous squirrel # or the left throw of any previous squirrel if right_throw in throw_map or left_throw in throw_map: return \\"YES\\" # Store the current position as reachable by the right and left throws throw_map[position] = (right_throw, left_throw) return \\"NO\\""},{"question":"You are given a list of integers representing daily stock prices. You are allowed to complete at most one transaction (buy one and sell one share of the stock). Write a function to find the maximum profit you could achieve from this one transaction. If you cannot achieve any profit, return 0. **Parameters and return of function:** ``` parameter (list of integers, guaranteed) prices: A list of stock prices. maxProfit([7, 1, 5, 3, 6, 4]) should return 5 maxProfit([7, 6, 4, 3, 1]) should return 0 ``` # Detail of the above examples: ``` For maxProfit([7, 1, 5, 3, 6, 4]): Buy on day 2 (price = 1), and sell on day 5 (price = 6), profit = 6-1 = 5. For maxProfit([7, 6, 4, 3, 1]): In this case, no transaction is done, as no profit can be achieved. ``` # Constraints: * The length of prices is at least 2. * The prices are all positive integers. You can solve this problem using the following algorithm: 1. Iterate through the list of prices while keeping track of the minimum price seen so far and the maximum profit that can be achieved up to the current day. 2. For each price, update the minimum price if the current price is lower. 3. Calculate the profit by subtracting the minimum price from the current price, and update the maximum profit if the calculated profit is higher. 4. Return the maximum profit after iterating through all the prices. **Note:** You are only permitted to execute one sale after you buy the stock. If no profit can be made, return 0.","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved from one transaction, or 0 if no profit can be made. :param prices: List of stock prices :return: int if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"# Description Write a function that takes a list of integers and returns the length of the longest contiguous subarray that alternates between even and odd numbers. Example Input: [1, 2, 3, 4, 5, 6] Output: 6 Input: [2, 4, 6, 8, 10] Output: 1","solution":"def longest_alternating_subarray(arr): Returns the length of the longest contiguous subarray that alternates between even and odd numbers. Parameters: arr (list of int): The list of integers to check. Returns: int: The length of the longest alternating subarray. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if (arr[i] % 2 == 0 and arr[i-1] % 2 != 0) or (arr[i] % 2 != 0 and arr[i-1] % 2 == 0): current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Given an array of integers, write a function `findLongestConsecutiveSubsequence` (or `find_longest_consecutive_subsequence` in Python) to find the length of the longest subsequence of consecutive numbers that can be made from the elements of the array. Note that the elements in the sequence do not need to be adjacent in the array, but they must appear in increasing order. For example: ``` Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore, its length is 4. ``` Your solution should handle arrays that contain both positive and negative integers as well as duplicates.","solution":"def find_longest_consecutive_subsequence(arr): Returns the length of the longest subsequence of consecutive numbers in the array. :param arr: List of integers :return: Length of the longest consecutive subsequence if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"**Story** In a forest, there are several types of animals (identified by unique type IDs) moving between locations (also identified by unique location IDs). Each animal can move to a nearby location through paths that connect these locations. Given the current positions of all animals and a map of the locations and paths, the animals want to calculate the minimum number of moves required to gather all at one specific target location. Not all animals may start at the same location, and the target location can be any location in the forest. The animals can plan their moves to gather at the target location in the shortest possible time. **Formal Problem** *Input:* Locations and paths are given as an adjacency matrix `forestMap` where `forestMap[i][j]` is either 1 (indicating a direct path exists between location `i` and location `j`) or 0 (indicating no direct path). The starting positions of the animals are given as an array `startPositions` where each element is a location ID indicating where the corresponding animal starts. The desired target location is given as an integer `targetLocation`. *Output:* `AnimalGathering.MinimumMoves` should return the minimum number of moves required for all animals to reach the target location, or -1 if it is impossible (for example, if there is no path from some animal\'s starting position to the target location). *Constraints:* - `forestMap` is a square matrix of size `N x N` where `1 <= N <= 1000` - `startPositions` is an array of integers with length `M` where `1 <= M <= 1000` and each value in `startPositions` is a valid index in `forestMap` - `0 <= targetLocation < N` - There will be at least one animal (i.e., `M >= 1`). *Example:* ```python forestMap = [ [0, 1, 0, 0], [1, 0, 1, 1], [0, 1, 0, 1], [0, 1, 1, 0] ] startPositions = [0, 2, 3] targetLocation = 1 AnimalGathering.MinimumMoves(forestMap, startPositions, targetLocation) Output: 1 ``` *Explanation:* - Animal at location 0 moves to location 1 (1 move). - Animal at location 2 moves to location 1 (1 move). - Animal at location 3 is already at location 1 (0 moves).","solution":"from collections import deque class AnimalGathering: @staticmethod def MinimumMoves(forestMap, startPositions, targetLocation): def bfs(start, target, forestMap): N = len(forestMap) visited = [False] * N queue = deque([(start, 0)]) visited[start] = True while queue: current, moves = queue.popleft() if current == target: return moves for neighbor in range(N): if forestMap[current][neighbor] == 1 and not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, moves + 1)) return -1 max_moves = 0 for start in startPositions: moves = bfs(start, targetLocation, forestMap) if moves == -1: return -1 max_moves = max(max_moves, moves) return max_moves"},{"question":"Your task is to create a function, `find_median`, that takes an array/vector of integers, `numbers`, as input and returns the median value. The median is the middle number in a sorted, ascending or descending, list of numbers and can be more descriptive of that data set than the average. If there is an even number of observations, the median is the average of the two middle numbers. # Examples ```python find_median([3, 1, 2]) returns 2 find_median([4, 1, 7, 2, 6]) returns 4 find_median([20, 1, 2, 3, 4]) returns 3 find_median([7, 9, 2, 10, 3, 5]) returns 6 ``` # Notes - You may assume the input array/vector will always have at least one integer.","solution":"def find_median(numbers): Returns the median of the list of numbers. numbers.sort() # Sort the list in ascending order n = len(numbers) mid = n // 2 if n % 2 == 0: # If even, the median is the average of the two middle numbers return (numbers[mid - 1] + numbers[mid]) / 2 else: # If odd, the median is the middle number return numbers[mid]"},{"question":"In a fictional land, there are different guilds with warriors who go through a series of training levels to enhance their skills. Each warrior is represented by their name and their attributes which include strength, intelligence, agility, and stamina. These attributes are represented in a dictionary as follows: ```json { \\"name\\": \\"Aragorn\\", \\"strength\\": 85, \\"intelligence\\": 75, \\"agility\\": 80, \\"stamina\\": 90 } ``` Warriors from different guilds participate in training battles to compare their overall abilities. Two warriors\' abilities are compared in each battle, and the winner is determined by the sum of their four attributes. Write a function `training_battle(guild1, guild2)` that takes two lists as input. Each list contains dictionaries representing the warriors of each guild. The function should compare the warriors in pairs in the order they appear in the lists. If a guild has more warriors than the other, the extra warriors do not participate in battles. The function should return a dictionary showing `winner` which is the guild with the most wins. If there is a tie, the `winner` should be \\"Tie\\". The output dictionary should also have keys `guild1_wins` and `guild2_wins` showing the number of battles each guild won. Example Input: ```python guild1 = [ {\\"name\\": \\"Aragorn\\", \\"strength\\": 85, \\"intelligence\\": 75, \\"agility\\": 80, \\"stamina\\": 90}, {\\"name\\": \\"Legolas\\", \\"strength\\": 70, \\"intelligence\\": 85, \\"agility\\": 95, \\"stamina\\": 75} ] guild2 = [ {\\"name\\": \\"Gimli\\", \\"strength\\": 90, \\"intelligence\\": 65, \\"agility\\": 70, \\"stamina\\": 85}, {\\"name\\": \\"Boromir\\", \\"strength\\": 80, \\"intelligence\\": 70, \\"agility\\": 75, \\"stamina\\": 80} ] ``` Example Output: ```python { \\"winner\\": \\"guild1\\", \\"guild1_wins\\": 2, \\"guild2_wins\\": 0 } ```","solution":"def training_battle(guild1, guild2): guild1_wins = 0 guild2_wins = 0 for warrior1, warrior2 in zip(guild1, guild2): guild1_score = warrior1[\\"strength\\"] + warrior1[\\"intelligence\\"] + warrior1[\\"agility\\"] + warrior1[\\"stamina\\"] guild2_score = warrior2[\\"strength\\"] + warrior2[\\"intelligence\\"] + warrior2[\\"agility\\"] + warrior2[\\"stamina\\"] if guild1_score > guild2_score: guild1_wins += 1 elif guild2_score > guild1_score: guild2_wins += 1 if guild1_wins > guild2_wins: winner = \\"guild1\\" elif guild2_wins > guild1_wins: winner = \\"guild2\\" else: winner = \\"Tie\\" return { \\"winner\\": winner, \\"guild1_wins\\": guild1_wins, \\"guild2_wins\\": guild2_wins }"},{"question":"Write a function that takes a string as input and returns the length of the longest substring that contains only unique characters. Note that the string can contain spaces and punctuation marks, which should also be considered as characters within the substrings.","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest substring that contains only unique characters. char_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Given a list of integers, write a function that returns a new list containing the elements of the original list divided into groups of consecutive elements. Each group should be represented as a sublist. Consecutive elements are those having a difference of 1 between neighboring elements. Assume the input list is always non-empty. Return \\"Not valid\\" if the input is not a list of integers. ``` group_consecutives([3, 4, 5, 10, 11, 12, 20]) => [[3, 4, 5], [10, 11, 12], [20]] group_consecutives([1, 2, 3, 5, 6, 8, 9, 10]) => [[1, 2, 3], [5, 6], [8, 9, 10]] group_consecutives([100, 200, 300]) => [[100], [200], [300]] group_consecutives([4, \'a\', 5]) => \\"Not valid\\" group_consecutives(\'4, 5, 6\') => \\"Not valid\\" ``` ```Haskell In Haskell, return a Maybe [[Int]] with Nothing for invalid inputs. ```","solution":"def group_consecutives(lst): Returns a new list containing the elements of the original list divided into groups of consecutive elements. Each group is represented as a sublist. Returns \\"Not valid\\" if the input is not a list of integers. if not isinstance(lst, list) or not all(isinstance(i, int) for i in lst): return \\"Not valid\\" if not lst: return [] result = [] current_group = [lst[0]] for i in range(1, len(lst)): if lst[i] == lst[i - 1] + 1: current_group.append(lst[i]) else: result.append(current_group) current_group = [lst[i]] result.append(current_group) return result"},{"question":"You’re tasked with coding a function that verifies email addresses. Given a string, determine whether it matches the pattern of a valid email address. A valid email address: 1. Contains exactly one \'@\' character. 2. Has a non-empty local part (appearing before the \'@\'). 3. Has a domain part (appearing after the \'@\') that consists of at least one period (\'.\'). For simplicity, assume: - The local part and domain part consist only of letters, numbers, periods, dashes, and underscores. - The domain part should not start or end with a period. Examples: - Given \'example@domain.com\', the function should return True. - Given \'invalid-email@domain\', the function should return False. Note: You do not need to enforce all possible constraints of a valid email address as per modern standards (such as TLD checking), but rather just follow the rules mentioned above for this task. Happy validating!","solution":"import re def is_valid_email(email): Validates if the given email matches the following pattern: 1. Contains exactly one \'@\' character. 2. Has a non-empty local part. 3. Has a domain part with at least one period that does not start or end with a period. :param email: The email address to validate as a string. :return: True if the email is valid, False otherwise. pattern = r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' if not re.fullmatch(pattern, email): return False local, domain = email.split(\'@\') if local == \'\' or domain.startswith(\'.\') or domain.endswith(\'.\') or \\"..\\" in domain: return False return True"},{"question":"Write a function that takes as input a list of dictionaries, where each dictionary represents a student and contains `name` (string), `marks` (list of integers), and `age` (integer). The function should return a dictionary where the keys are the distinct ages of the students and the values are the average marks of students with that age. For example, given the following input: ```python students = [ {\'name\': \'Alice\', \'marks\': [85, 92, 78], \'age\': 20}, {\'name\': \'Bob\', \'marks\': [75, 80, 83], \'age\': 21}, {\'name\': \'Charlie\', \'marks\': [89, 88, 91], \'age\': 20}, {\'name\': \'David\', \'marks\': [70, 72, 68], \'age\': 21} ] ``` The function should return: ```python { 20: 87.0, 21: 74.67 } ``` # Explanation: - For age 20, Alice and Charlie\'s marks are averaged: (85, 92, 78, 89, 88, 91) -> (523 / 6) = 87.0 - For age 21, Bob and David\'s marks are averaged: (75, 80, 83, 70, 72, 68) -> (448 / 6) = 74.67","solution":"def average_marks_by_age(students): Given a list of dictionaries representing students, this function returns a dictionary where the keys are ages and the values are the average marks of students of that age. :param students: List[Dict[str, Union[str, List[int], int]]] :return: Dict[int, float] from collections import defaultdict age_marks_dict = defaultdict(list) for student in students: age = student[\'age\'] marks = student[\'marks\'] age_marks_dict[age].extend(marks) average_marks = {} for age, marks in age_marks_dict.items(): average_marks[age] = round(sum(marks) / len(marks), 2) return average_marks"},{"question":"Given an array of integers `nums`, return the number of consecutive sequences that sum to `k`. A sequence is defined as a subarray or contiguous part of the array. # Example 1: Input: `nums = [1,2,3], k = 3` Output: `2` Explanation: The subarrays [1,2] and [3] sum to 3. # Example 2: Input: `nums = [-1, -1, 1], k = 0` Output: `1` Explanation: The subarray [-1, -1, 1] sums to 0. # Example 3: Input: `nums = [1,1,1], k = 2` Output: `2` Explanation: The subarrays [1,1] and [1,1] both sum to 2. # Constraints: 1. `1 <= nums.length <= 10^4` 2. `-10^4 <= nums[i] <= 10^4` 3. `-10^4 <= k <= 10^4` Write a function: ```python def subarraySum(nums: List[int], k: int) -> int: pass ``` **Note:** The solution must have a linear runtime complexity.","solution":"from typing import List def subarraySum(nums: List[int], k: int) -> int: count = 0 cumulative_sum = 0 cumulative_sum_freq = {0: 1} for num in nums: cumulative_sum += num if cumulative_sum - k in cumulative_sum_freq: count += cumulative_sum_freq[cumulative_sum - k] if cumulative_sum in cumulative_sum_freq: cumulative_sum_freq[cumulative_sum] += 1 else: cumulative_sum_freq[cumulative_sum] = 1 return count"},{"question":"To promote our new social platform, we want to reward users who are the most active by tracking their likes and posts. We need a function that calculates a user\'s score based on the ratio of their total number of likes to the total number of posts they have written. Implement a function `user_score(likes, posts)` that takes two arguments: - `likes`: an integer representing the total number of likes a user has received. - `posts`: an integer representing the total number of posts a user has written. Return this score as a floating point number, rounded to two decimal places. If the user has not written any posts, the score should be `0.00`. For example: ```python user_score(120, 60)==2.00 # 120 likes over 60 posts, score: 120/60 = 2.00 user_score(50, 25)==2.00 # 50 likes over 25 posts, score: 50/25 = 2.00 user_score(500, 0)==0.00 # No posts written, score: 0.00 user_score(100, 33)==3.03 # 100 likes over 33 posts, score: 100/33 ≈ 3.03 ``` **Notes:** - Your function should handle only non-negative integers as inputs. - Be sure to consider the case where the number of posts is zero to avoid division by zero errors.","solution":"def user_score(likes, posts): Calculate the user score based on likes and posts. Args: likes (int): Total number of likes received. posts (int): Total number of posts written. Returns: float: The calculated score, rounded to two decimal places. If posts is zero, returns 0.00. if posts == 0: return 0.00 return round(likes / posts, 2)"},{"question":"The Cookie Jar Conundrum Your task, should you choose to accept it, is to help Mrs. Cookie manage her famous cookie jar, which she stocks with different kinds of cookies each morning. Each kind of cookie comes in a batch and every cookie has an expiration date. Mrs. Cookie needs a function to determine which cookies should be taken out of the jar each day to avoid giving expired cookies to her customers. You will be given an array of cookie objects, where each object contains the type of cookie, its quantity, and its expiration date in the format YYYY-MM-DD. The function should return a list of cookie batches to be removed based on the current date. It should also return a summary statement indicating the total number of cookies to be removed. Example: ``` removeExpiredCookies([ {type: \\"Chocolate Chip\\", quantity: 10, expirationDate: \\"2023-10-01\\"}, {type: \\"Oatmeal Raisin\\", quantity: 5, expirationDate: \\"2023-10-05\\"}, {type: \\"Peanut Butter\\", quantity: 7, expirationDate: \\"2023-09-30\\"} ], \\"2023-10-02\\") ``` Should return: ``` [ {type: \\"Chocolate Chip\\", quantity: 10, expirationDate: \\"2023-10-01\\"}, {type: \\"Peanut Butter\\", quantity: 7, expirationDate: \\"2023-09-30\\"} ] ``` And print: ``` \\"Total cookies to be removed: 17\\" ``` Other cases: If no cookies need to be removed, return an empty list and print \\"No expired cookies today!\\". If all cookies are remaining, ensure they are retained in the jar. If present, the `type` will always be a string, `quantity` will always be a positive integer, and `expirationDate` will always be a valid date in the format YYYY-MM-DD. No need to validate inputs.","solution":"from datetime import datetime def removeExpiredCookies(cookies, current_date): This function takes a list of cookie objects and a current date. It returns a list of cookies that are expired based on the current date. It also prints the total number of cookies to be removed. # Convert current_date to a datetime object current_date = datetime.strptime(current_date, \\"%Y-%m-%d\\") expired_cookies = [] total_quantity = 0 for cookie in cookies: expiration_date = datetime.strptime(cookie[\'expirationDate\'], \\"%Y-%m-%d\\") if expiration_date < current_date: expired_cookies.append(cookie) total_quantity += cookie[\'quantity\'] if expired_cookies: print(f\\"Total cookies to be removed: {total_quantity}\\") else: print(\\"No expired cookies today!\\") return expired_cookies"},{"question":"Description Mark is a car enthusiast who loves to participate in rally races. Currently, he needs your help to determine the best sequence of fuel stops. Mark’s car can travel a maximum distance of **d** kilometers on a full tank of fuel. There are **n** fuel stations along his planned route, located at specific distances from the starting point. Mark wants to know the minimum number of refueling stops he\'d need if he wants to reach his destination which is **t** kilometers away. Write a function that, given the distance a car can travel on a full tank, the total distance to the destination, and the list of fuel station locations, returns the minimum number of refueling stops required to reach the destination, or -1 if it is not possible to reach the destination with the given fuel stations. Input - **d**: An integer representing the maximum distance the car can travel on a full tank (1 ≤ d ≤ 10^4). - **t**: An integer representing the total distance to the destination (1 ≤ t ≤ 10^4). - **stations**: A list of integers where each integer represents the distance of a fuel station from the starting point (1 ≤ stations[i] ≤ t). Output - Return the minimum number of refueling stops required to reach the destination. - If it is not possible to reach the destination, return -1. Example ```python def minRefuelStops(d: int, t: int, stations: List[int]) -> int: # Your code here # Example 1 print(minRefuelStops(200, 600, [100, 200, 400, 500])) # Output: 2 # Example 2 print(minRefuelStops(300, 1000, [200, 400, 600, 800])) # Output: 3 # Example 3 print(minRefuelStops(100, 400, [150, 250, 350])) # Output: -1 ``` In Example 1, Mark can refuel at the 200th and 400th kilometers to complete the 600-kilometer journey. Hence, the output is 2. In Example 2, Mark can refuel at the 200th, 400th, and 600th kilometers to complete the 1000-kilometer journey. Hence, the output is 3. In Example 3, with the given fuel stations, Mark is unable to reach the 400-kilometer mark without running out of fuel. Therefore, the output is -1.","solution":"from typing import List import heapq def minRefuelStops(d: int, t: int, stations: List[int]) -> int: if d >= t: return 0 stations.append(t) # add the destination as the last station max_heap = [] # max heap to keep track of max fuel in reverse (negative values for max heap) prev_distance = 0 fuel = d refuels = 0 for station in stations: fuel -= (station - prev_distance) while max_heap and fuel < 0: # refuel to continue fuel -= heapq.heappop(max_heap) refuels += 1 if fuel < 0: return -1 heapq.heappush(max_heap, -d) # push the fuel tank capacity prev_distance = station return refuels"},{"question":"Title Palindrome Substrings Overview A palindrome is a string that reads the same forwards and backwards. For example, \\"radar\\" and \\"level\\" are palindromes, but \\"hello\\" is not. Given a string, you need to find all the substrings that are palindromes. Task Define a function, `findPalindromeSubstrings(s)`, that returns a list of all palindrome substrings in a given string `s`. Each substring should be included in the list only once, even if it appears multiple times in different locations in the string. The substrings should be listed in the order they first appear in the string. Example # Input - `s`: \\"abacdfgdcaba\\" # Output - `[\\"a\\", \\"b\\", \\"aba\\", \\"c\\", \\"d\\", \\"f\\", \\"g\\", \\"dc\\", \\"cabac\\"]` Constraints - The input string `s` will have a maximum length of 1000 characters. - Only consider substrings of at least length 1.","solution":"def findPalindromeSubstrings(s): Returns a list of all unique palindrome substrings in the given string \'s\'. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() for i in range(len(s)): # Expand around center for odd length palindromes l, r = i, i while l >= 0 and r < len(s) and s[l] == s[r]: palindromes.add(s[l:r+1]) l -= 1 r += 1 # Expand around center for even length palindromes l, r = i, i + 1 while l >= 0 and r < len(s) and s[l] == s[r]: palindromes.add(s[l:r+1]) l -= 1 r += 1 return list(palindromes)"},{"question":"Write a function that checks if a given string is a palindrome. The function should ignore all non-alphanumeric characters and case differences. # Tips: - Treat letters, numbers, and case-insensitive comparisons only. - Return a boolean value indicating whether the input string is a palindrome.","solution":"def is_palindrome(s): Checks if the given string is a palindrome ignoring non-alphanumeric characters and case differences. Parameters: s (str): Input string Returns: bool: True if the string is a palindrome, False otherwise # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a string s and you need to reverse only the vowels of the string, leaving all the other characters in their original positions. The vowels are \'a\', \'e\', \'i\', \'o\', and \'u\', and they can appear in both lowercase and uppercase forms. Your solution should maintain the case of the vowels. Write a function `reverseVowels(s: str) -> str` that takes a string s as input and returns the string after reversing its vowels. Example 1: Input: s = \\"hello\\" Output: \\"holle\\" Example 2: Input: s = \\"leetcode\\" Output: \\"leotcede\\" Example 3: Input: s = \\"aA\\" Output: \\"Aa\\" Example 4: Input: s = \\"racecar\\" Output: \\"racecar\\" Constraints: - 1 <= s.length <= 3 * 10^5 - s consists of printable ASCII characters.","solution":"def reverseVowels(s: str) -> str: Reverses only the vowels in the string s, leaving other characters in place. vowels = set(\'aeiouAEIOU\') s = list(s) i, j = 0, len(s) - 1 while i < j: if s[i] not in vowels: i += 1 elif s[j] not in vowels: j -= 1 else: s[i], s[j] = s[j], s[i] i += 1 j -= 1 return \'\'.join(s)"},{"question":"You are asked to help with a special grading system for a math test. The scoring is unconventional and follows these rules: 1. A correct answer adds `+4` to the score. 2. An incorrect answer subtracts `-1` from the score. 3. An unanswered question (`null`) doesn\'t change the score. Write a function that takes an array of answers, where `True` represents a correct answer, `False` an incorrect one, and `null` an unanswered question. The function should return the student\'s total score based on the described scoring system. An empty array should return `0`. Examples: ```python calculate_score([True, True, False, null, True]) -> 11 calculate_score([False, False, False, False]) -> -4 calculate_score([null, null, null]) -> 0 calculate_score([]) -> 0 ```","solution":"def calculate_score(answers): Calculate the total score based on the special grading system. Parameters: answers (list): List of answers where True is correct, False is incorrect, and None is unanswered. Returns: int: Total score. score = 0 for answer in answers: if answer is True: score += 4 elif answer is False: score -= 1 # No action needed for None (unanswered questions) return score"},{"question":"In the world of competitive gaming, players earn points after each game depending on their performance. A leaderboard keeps track of the scores of all players in descending order. Each player gets points after each game, and the leaderboard is updated accordingly. You are required to implement a function `update_leaderboard` that takes in the current leaderboard and a dictionary of players\' scores from a recent game. The function should update the leaderboard to reflect the new scores of the players and return the updated leaderboard. If a player is not already on the leaderboard, they should be added. In the leaderboard, each player should occur only once, and the leaderboard should remain sorted in descending order of their scores. Players with the same score should be sorted in ascending order of their names. Here\'s the function signature: ```python def update_leaderboard(leaderboard, new_scores): pass ``` **Input** - `leaderboard`: A list of tuples where each tuple contains a player\'s name (string) and their current score (integer). The list is sorted in descending order of scores. Players with equal scores are sorted in ascending order of their names. - `new_scores`: A dictionary where each key is a player\'s name and the value is the score they earned in the recent game. **Output** - An updated leaderboard, which is a list of tuples sorted in descending order of scores. Players with equal scores are sorted in ascending order of their names. **Example:** ```python leaderboard = [(\\"Alice\\", 1500), (\\"Bob\\", 1300), (\\"Charlie\\", 1200)] new_scores = {\\"Alice\\": 200, \\"Charlie\\": 100, \\"Derek\\": 1400} update_leaderboard(leaderboard, new_scores) # Should return: [(\\"Derek\\", 1400), (\\"Alice\\", 1700), (\\"Bob\\", 1300), (\\"Charlie\\", 1300)] ``` **Constraints** - The length of `leaderboard` will not exceed 1000 players. - The length of `new_scores` will not exceed 100 players. - Player names are non-empty strings containing only alphabetical characters. - Scores are non-negative integers. Make sure your solution is efficient and works within the constraints.","solution":"def update_leaderboard(leaderboard, new_scores): Updates the leaderboard with new scores and returns the updated leaderboard. Args: leaderboard (list of tuples): A list where each tuple contains a player\'s name and their current score. new_scores (dict): A dictionary where each key is a player\'s name and the value is the score they earned in the recent game. Returns: list of tuples: The updated leaderboard, sorted in descending order of scores, with ties broken by player names in ascending order. # Convert leaderboard list to a dictionary for easier updates current_scores = {name: score for name, score in leaderboard} # Update the current scores with new scores for name, score in new_scores.items(): if name in current_scores: current_scores[name] += score else: current_scores[name] = score # Convert the dictionary back to a list of tuples updated_leaderboard = list(current_scores.items()) # Sort the leaderboard first by descending score, then by name for ties updated_leaderboard.sort(key=lambda x: (-x[1], x[0])) return updated_leaderboard"},{"question":"Given a list of integers, find the subarray (containing at least one number) which has the largest sum and return its sum. For example: `Input: [−2,1,−3,4,−1,2,1,−5,4]` `Output: 6` Explanation: [4,−1,2,1] has the largest sum = 6. Your function should be: ```python def max_subarray_sum(nums) ``` Here are a few more examples: ```python assert max_subarray_sum([1]) == 1 assert max_subarray_sum([5,4,−1,7,8]) == 23 ``` You should return an integer representing the largest sum possible.","solution":"def max_subarray_sum(nums): Finds the subarray with the largest sum and returns its sum. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Definition A **_Symmetrical number_** is a number that reads the same backward as forward. ___ # Task **_Given_** a number, **_Find if it is Symmetrical or not_**. ____ # Notes * **_Number_** *passed is always* **_Non-negative_**. * **_Return_** *the result as* a **_Boolean_**. __~~~ * Since prolog doesn\'t have booleans, return value should be 1 for (True) or 0 for (False). ~~~ ___ # Input >> Output Examples ``` symmetricalNumber(121) ==> return (true) ``` **_Explanation_**: **_The number\'s digits_** `{1, 2, 1}` *are in** *the same order backward as forward*. ___ ``` symmetricalNumber(123) ==> return (false) ``` **_Explanation_**: **_The number\'s digits_** `{1, 2, 3}` *are not* *in the same order backward as forward*. ___ ``` symmetricalNumber(12321) ==> return (true) ``` **_Explanation_**: **_The number\'s digits_** `{1, 2, 3, 2, 1}` *are in* *the same order backward as forward*. ___ ``` symmetricalNumber(9) ==> return (true) ``` **_Explanation_**: **_The number\'s digits_** `{9}` *are in* *the same order backward as forward*. --- # [Number Basics](https://www.codewars.com/collections/number-basics) # [Palindrome Series](https://www.codewars.com/collections/palindromes) --- ALL translations are welcomed Enjoy Learning !!","solution":"def symmetricalNumber(n): Returns True if the number is symmetrical (palindrome), otherwise False. str_n = str(n) return str_n == str_n[::-1]"},{"question":"# Rotate Array Write a function that takes an array of integers and an integer `k`, and rotates the array to the right by `k` steps. The function should modify the original array in-place and return it. Do not use any additional arrays for the rotation process. **Note:** - You should solve this problem without using the built-in `Array.prototype.rotate` method if your language provides it. # Example `rotate([1,2,3,4,5,6,7], 3)` -> [5,6,7,1,2,3,4] `# array rotated to the right by 3 steps` `rotate([-1,-100,3,99], 2)` -> [3,99,-1,-100] `# array rotated to the right by 2 steps` # Constraints - The number of elements in the array (n) will be in the range [0, 10^5]. - `k` will be a non-negative integer.","solution":"def rotate(nums, k): Rotates the array to the right by k steps. Parameters: nums (list): The list of integers to rotate. k (int): The number of steps to rotate the array. Returns: list: The rotated array. n = len(nums) k = k % n # In case k is greater than the length of the array def reverse(lst, start, end): while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 # Reverse the entire array reverse(nums, 0, n - 1) # Reverse the first k elements reverse(nums, 0, k - 1) # Reverse the rest of the array reverse(nums, k, n - 1) return nums"},{"question":"Given a list of integers, return the product of the maximum and minimum values in the list. ``` max_min_product([4, 3, 6, 8, 2]) --> 16 max_min_product([-3, 0, -2, 5, 9]) --> -27 ``` > Note: The list will always contain at least one integer.","solution":"def max_min_product(lst): Returns the product of the maximum and minimum values in the list. max_val = max(lst) min_val = min(lst) return max_val * min_val"},{"question":"# Task A robot is navigating a grid, starting at the top-left corner. The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. Determine the number of unique paths the robot can take to reach the bottom-right corner of the grid. You may assume that the grid dimensions are `m x n` where `m` and `n` are positive integers. # Example For `m = 3` and `n = 2`, the grid looks like this: ``` start (0,0) -> (0,1) -> end (0,2) | | | | | | (1,0) -> (1,1) -> (1,2) | | | | | | (2,0) -> (2,1) -> end (2,2) ``` Possible paths are: 1. right -> right -> down 2. right -> down -> right 3. down -> right -> right So, the number of unique paths is 3. # Input/Output - `[input]` integers `m`, `n` The dimensions of the grid. `1 <= m, n <= 100` - `[output]` an integer The number of unique paths from the top-left corner to the bottom-right corner of the grid.","solution":"def unique_paths(m, n): Returns the number of unique paths for a robot to navigate from the top-left to the bottom-right corner of an m x n grid. # Create a 2D list (m x n) with 1 as default values dp = [[1] * n for _ in range(m)] # Iterate over the grid, starting from cell (1, 1) to calculate number of unique paths for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The value at the bottom-right corner of the grid return dp[m-1][n-1]"},{"question":"Write a function to determine if two strings are anagrams of each other. Two strings are considered anagrams if they can be composed of the same characters with the same frequency, but arranged differently. The function takes two strings, `str1` and `str2`, as parameters and returns a boolean value indicating whether they are anagrams. For example, given the strings \\"listen\\" and \\"silent\\", the function should return `True`, since both strings contain the same characters with the same frequencies. Similarly, for the strings \\"triangle\\" and \\"integral\\", the function should also return `True`. However, for the strings \\"hello\\" and \\"world\\", the function should return `False`.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, else False. # Check if lengths of both strings are equal if len(str1) != len(str2): return False # Count the frequency of each character in both strings char_count1 = {} char_count2 = {} for char in str1: char_count1[char] = char_count1.get(char, 0) + 1 for char in str2: char_count2[char] = char_count2.get(char, 0) + 1 # Compare the frequency dictionaries return char_count1 == char_count2"},{"question":"Complete the function `count_distinct_characters` (or equivalent, depending on your language) that takes a string as input and returns the number of distinct characters in that string. You may assume the input is always valid and consists of only printable ASCII characters. Examples ~~~if-not:nasm ```python count_distinct_characters(\\"hello\\") ==> 4 count_distinct_characters(\\"world\\") ==> 5 count_distinct_characters(\\"aaaa\\") ==> 1 count_distinct_characters(\\"\\") ==> 0 count_distinct_characters(\\"Python\\") ==> 6 ``` ~~~ ~~~if:nasm ``` section .data str1 db \\"hello\\", 0 str2 db \\"world\\", 0 str3 db \\"aaaa\\", 0 str4 db \\"\\", 0 str5 db \\"Python\\", 0 section .text extern count_distinct_characters ; Load address of str1 into rdi and call count_distinct_characters mov rdi, str1 call count_distinct_characters ; returns 4 in rax ; Load address of str2 into rdi and call count_distinct_characters mov rdi, str2 call count_distinct_characters ; returns 5 in rax ; Load address of str3 into rdi and call count_distinct_characters mov rdi, str3 call count_distinct_characters ; returns 1 in rax ; Load address of str4 into rdi and call count_distinct_characters mov rdi, str4 call count_distinct_characters ; returns 0 in rax ; Load address of str5 into rdi and call count_distinct_characters mov rdi, str5 call count_distinct_characters ; returns 6 in rax ``` ~~~ Edge cases to consider include empty strings and strings with repeated characters or special characters.","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the string s. :param s: The input string. :return: The number of distinct characters. return len(set(s))"},{"question":"Given an integer array `arr`, return the length of the longest subarray, all of whose elements are equal. If there are multiple subarrays with the maximum length, return the length of any one of them. Example 1: Input: `arr = [1,1,0,1,1,1]` Output: `3` Explanation: The longest subarray with all elements equal is `[1,1,1]`. Example 2: Input: `arr = [2,2,2,3,3,3,3,1,1]` Output: `4` Explanation: The longest subarray with all elements equal is `[3,3,3,3]`. Example 3: Input: `arr = [1,2,3,4,5]` Output: `1` Explanation: Each subarray with all elements equal has length `1`. Constraints: - `1 <= arr.length <= 10^5` - `-10^9 <= arr[i] <= 10^9`","solution":"def longest_equal_subarray(arr): Returns the length of the longest subarray with all elements equal in the given array. if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_len += 1 else: current_len = 1 if current_len > max_len: max_len = current_len return max_len"},{"question":"You are given a matrix consisting of n rows and m columns, with each cell containing a lowercase English letter. Your task is to determine if it\'s possible to find a cycle consisting of the same character. A cycle is a sequence of cells starting and ending at the same cell, where consecutive cells are adjacent either horizontally or vertically, and no cell is visited more than once except for the first and last cells in the sequence. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the matrix. The next n lines contain m characters each, representing the matrix itself. -----Output----- Output a single line \\"Yes\\" if there is a cycle in the matrix consisting of the same character, and \\"No\\" otherwise. -----Examples----- Input 3 4 aaaa abba aaaa Output Yes Input 3 4 abcd efgh ijkl Output No","solution":"def has_cycle(matrix, n, m): def dfs(x, y, parent_x, parent_y, char): if visited[x][y]: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx != parent_x or ny != parent_y) and matrix[nx][ny] == char: if dfs(nx, ny, x, y, char): return True return False visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if not visited[i][j]: if dfs(i, j, -1, -1, matrix[i][j]): return \\"Yes\\" return \\"No\\""},{"question":"# Palindrome Number Check A palindrome is a number that reads the same backward as forward. For example, **121** is a palindrome while **123** is not. Write a function that determines if a given number is a palindrome. The function should take **one argument**, the number to check, and return **`True`** if it is a palindrome and **`False`** otherwise. # Example: ```python def is_palindrome(n: int) -> bool: # Your code here # Examples print(is_palindrome(121)) # should return True print(is_palindrome(123)) # should return False print(is_palindrome(12321)) # should return True ```","solution":"def is_palindrome(n: int) -> bool: Checks if the given number is a palindrome. Parameters: n (int): The number to check Returns: bool: True if the number is a palindrome, False otherwise str_n = str(n) return str_n == str_n[::-1]"},{"question":"Create a function `duplicate_encode(word)` to convert a string into a new string where each character in the new string is \\"(\\" if that character appears only once in the original string, or \\")\\" if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate. Examples: ```python For Python duplicate_encode(\\"din\\") == \\"(((\\" duplicate_encode(\\"recede\\") == \\"()()()\\" duplicate_encode(\\"Success\\") == \\")())())\\" duplicate_encode(\\"(( @\\") == \\"))((\\" ``` Notes: - The algorithm should be case insensitive. - The given word will be comprised of alphabetic characters (a-z, A-Z) and may contain punctuation characters and spaces.","solution":"def duplicate_encode(word): Converts a string into a new string where each character in the new string is \\"(\\" if that character appears only once in the original string or \\")\\" if that character appears more than once in the original string. Ignores capitalization when determining if a character is a duplicate. Args: word (str): The input string. Returns: str: The encoded string. # Normalize the word to lower case word = word.lower() # Create a dictionary to count occurrences of each character char_count = {} for char in word: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Create the encoded string based on the counts encoded_string = \'\'.join([\'(\' if char_count[char] == 1 else \')\' for char in word]) return encoded_string"},{"question":"Alice enjoys reading books and has quite a collection. She has arranged her books on a single shelf in increasing order of their thickness. Alice realized that the view of the shelf is aesthetically pleasing if there are no more than two consecutive books with the exact same thickness. She wants a program to help her determine if her current arrangement meets this criteria. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of books on the shelf. The second line contains n integers t_1, t_2, ..., t_{n} (1 ≤ t_i ≤ 10^9) — the thicknesses of the books on the shelf in increasing order. -----Output----- Print \\"YES\\" if no more than two consecutive books have the same thickness. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 2 3 3 Output YES Input 6 1 2 2 2 3 4 Output NO Input 4 5 5 5 10 Output NO Input 3 7 8 8 Output YES -----Note----- In the first sample, the arrangement meets the criteria because no more than two consecutive books have the same thickness. In the second sample, there are three consecutive books with a thickness of 2, hence the arrangement does not meet the criteria. In the third sample, there are three consecutive books with a thickness of 5, so the arrangement does not meet the criteria. In the fourth sample, the arrangement meets the criteria as only two consecutive books have the same thickness.","solution":"def check_books_arrangement(n, thicknesses): This function checks if the arrangement of books meets the criteria of having no more than two consecutive books with the same thickness. Parameters: n (int): the number of books on the shelf thicknesses (list of int): the thickness of each book in increasing order Returns: str: \\"YES\\" if the arrangement meets the criteria, \\"NO\\" otherwise for i in range(2, n): if thicknesses[i] == thicknesses[i - 1] == thicknesses[i - 2]: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes an integer n as input and returns a list containing n consecutive Fibonacci numbers, starting from 0. The Fibonacci sequence is defined by: - F(0) = 0 - F(1) = 1 - For all n >= 2, F(n) = F(n-1) + F(n-2) Examples: fibonacci(5) => returns [0, 1, 1, 2, 3] fibonacci(8) => returns [0, 1, 1, 2, 3, 5, 8, 13]","solution":"def fibonacci(n): Returns a list of n consecutive Fibonacci numbers starting from 0. Parameters: n (int): Number of Fibonacci numbers to generate Returns: List[int]: A list of n consecutive Fibonacci numbers if n <= 0: return [] fib_sequence = [0] * n if n > 1: fib_sequence[1] = 1 for i in range(2, n): fib_sequence[i] = fib_sequence[i - 1] + fib_sequence[i - 2] return fib_sequence"},{"question":"Write a function `change_calculator` that determines the minimum number of coins needed to make a given amount of cents using the standard US coin denominations (penny - 1 cent, nickel - 5 cents, dime - 10 cents, and quarter - 25 cents). # Function Signature ```python def change_calculator(cents: int) -> int: pass ``` # Input - An integer `cents` representing the amount of cents (0 ≤ cents ≤ 10000). # Output - An integer representing the minimum number of coins required to make the given amount of cents. # Example ```python print(change_calculator(87)) # Output: 6 (3 quarters, 1 dime, 2 pennies) print(change_calculator(99)) # Output: 9 (3 quarters, 2 dimes, 4 pennies) ```","solution":"def change_calculator(cents): Determines the minimum number of coins needed to make a given amount of cents using the standard US coin denominations (penny, nickel, dime, quarter). coins = [25, 10, 5, 1] count = 0 for coin in coins: count += cents // coin cents %= coin return count"},{"question":"# Cube Volume Calculation In geometry, a cube is a three-dimensional solid object bounded by six square faces, facets, or sides, with three meeting at each vertex. The cube is one of the five Platonic solids and is the only regular hexahedron. # Task Write a function that calculates the total volume of a given list of cubes where the side length of each cube is provided. # Input A list of integers, each representing the side length of a cube. Example: `[1, 2, 3]` Input will always be valid: list of random length (from `0` to `1000`) with non-negative integers. # Output Calculated total volume of all given cubes. `def get_total_volume(sides: List[int]) -> int: return 0` # Example ```python get_total_volume([1, 2, 3]); # returns 36 ``` Step 1: Calculate volume of a cube with side 1: `1³ = 1` Step 2: Volume of a cube with side 2: `2³ = 8` Step 3: Volume of a cube with side 3: `3³ = 27` Total volume: `1 + 8 + 27 = 36` # Additional Notes - As per the formula for the volume of a cube (V = text{side}^3), ensure to calculate it for each side length and sum them up. - Provide the result as an integer.","solution":"from typing import List def get_total_volume(sides: List[int]) -> int: Calculate the total volume of all given cubes. :param sides: List of integers, each representing the side length of a cube :return: Total volume of all cubes return sum(side ** 3 for side in sides)"},{"question":"During a math contest, participants are given several strings consisting of digits. For each string, their task is to find out if there exists a permutation of the string that is divisible by 8. To make things simpler for the participants, it is guaranteed that each string contains at most 100 digits. Can you write a program to help participants quickly determine if such a permutation exists? -----Input----- The first line of input contains the number of test cases T. Each of the next T lines contains a single string S, consisting of digits 0-9. -----Output----- For each test case, output \\"YES\\" if there exists a permutation of the string that is divisible by 8, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ |S| ≤ 100 -----Example----- Input: 3 123 1000 75 Output: YES YES NO -----Explanation----- Example case 1. The number 123 itself is not divisible by 8, but 312 is a permutation of the string and is divisible by 8. Example case 2. The number 1000 is divisible by 8. Example case 3. No permutation of the string 75 is divisible by 8.","solution":"def is_divisible_by_8(s): Check if any permutation of the string s is divisible by 8. from itertools import permutations # If the length of the string is less than 3, # we can simply try all permutations directly if len(s) < 3: for perm in permutations(s): if int(\'\'.join(perm)) % 8 == 0: return \\"YES\\" return \\"NO\\" # For strings of length 3 or more # We just need to check if there\'s any 3-digit combination that is divisible by 8 digits = list(s) for i in range(len(digits)): for j in range(len(digits)): if j != i: for k in range(len(digits)): if k != i and k != j: num = int(digits[i] + digits[j] + digits[k]) if num % 8 == 0: return \\"YES\\" return \\"NO\\" def check_divisibility_by_8(test_cases): results = [] for s in test_cases: results.append(is_divisible_by_8(s)) return results"},{"question":"Write a function that takes a string as input and returns the character that appears the most frequently in the string. In case of a tie (multiple characters with the same highest frequency), return the character that appears first in the string. The string will consist only of lowercase English letters. If the input string is empty, the function should return `None`. Example: ``` input: \\"teststring\\" output: \\"t\\" input: \\"character\\" output: \\"c\\" input: \\"\\" output: None ```","solution":"def most_frequent_character(s): Returns the character that appears the most frequently in the string. In case of a tie, return the character that appears first. if not s: return None frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 most_freq_char = s[0] max_count = 0 for char in s: if frequency[char] > max_count: max_count = frequency[char] most_freq_char = char return most_freq_char"},{"question":"You are given an input list of integers representing the stock prices of a company in chronological order. Write a function to find the maximum profit you can achieve by buying and selling one share of the stock multiple times, but you cannot hold more than one share of the stock at a time and you must sell the stock before you can buy it again. ___ Examples: ```python input = [7, 1, 5, 3, 6, 4] result = 7 # Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. # Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. # Total profit is 4 + 3 = 7. input = [1, 2, 3, 4, 5] result = 4 # Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. # Total profit is 4. input = [7, 6, 4, 3, 1] result = 0 # Explanation: In this case, no transactions are done and the max profit = 0. ``` Constraints: - 1 <= length of the list <= 10^5 - 0 <= price of stocks <= 10^4","solution":"def max_profit(prices): Calculate the maximum profit from stock prices by buying and selling multiple times. :param prices: List[int], list of stock prices. :return: int, maximum profit possible. if not prices or len(prices) < 2: return 0 max_profit = 0 # Loop through the prices array for i in range(1, len(prices)): # If current price is higher than previous, add the profit if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Given a grid of size n x m, representing a map where \'1\' represents land and \'0\' represents water, the grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Determine the perimeter of the island. Write a function that takes as input the grid and returns the perimeter of the island. Example 1: Input: grid = [ [\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"1\\",\\"0\\"], [\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\"] ] Output: 16 Example 2: Input: grid = [ [\\"1\\"] ] Output: 4 Example 3: Input: grid = [ [\\"1\\",\\"0\\"], [\\"0\\",\\"0\\"] ] Output: 4 Constraints: - n == grid.length - m == grid[i].length - 1 <= n, m <= 100 - grid[i][j] is either \'0\' or \'1\'. - There is exactly one island in the grid.","solution":"def islandPerimeter(grid): Returns the perimeter of the island in the given grid. rows = len(grid) cols = len(grid[0]) perimeter = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \\"1\\": perimeter += 4 if r > 0 and grid[r-1][c] == \\"1\\": # Check top cell perimeter -= 2 if c > 0 and grid[r][c-1] == \\"1\\": # Check left cell perimeter -= 2 return perimeter"},{"question":"You are given a string `s` and an integer `k`. Your task is to determine the k-th largest palindrome substring of `s`. If no such k-th palindrome exists, return an empty string. A substring is obtained by deleting any number of characters (can be zero) from the beginning and/or end of the given string without changing the order of the remaining characters. Examples ``` # Example 1: s = \\"abcbaba\\", k = 3 // All distinct palindromic substrings in sorted order are [\\"a\\", \\"aba\\", \\"b\\", \\"bab\\", \\"bcb\\", \\"c\\", \\"cbaabc\\", \\"xox\\"] // The 3rd largest palindrome substring is \\"bab\\" Output: \\"bab\\" # Example 2: s = \\"abcd\\", k = 2 // All distinct palindromic substrings in sorted order are [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] // The 2nd largest palindrome substring is \\"b\\" Output: \\"b\\" # Example 3: s = \\"level\\", k = 5 // All distinct palindromic substrings in sorted order are [\\"e\\", \\"l\\", \\"lev\\", \\"v\\", \\"xexl\\"] Output: \\"v\\" # Example 4: s = \\"aaa\\", k = 6 // All distinct palindromic substrings in sorted order are [\\"a\\", \\"aa\\", \\"aaa\\"] // No 6th largest palindromic substring exists Output: \\"\\" ``` Constraints - 1 <= s.length <= 1000 - 1 <= k <= 10000 Function Signature (Python) ```python def kth_largest_palindrome(s: str, k: int) -> str: ```","solution":"def kth_largest_palindrome(s: str, k: int) -> str: def is_palindrome(sub): return sub == sub[::-1] palindromes = set() n = len(s) for i in range(n): for j in range(i, n): substring = s[i:j+1] if is_palindrome(substring): palindromes.add(substring) sorted_palindromes = sorted(palindromes, key=lambda x: (-len(x), x)) if k <= len(sorted_palindromes): return sorted_palindromes[k-1] else: return \\"\\""},{"question":"Task Write a function that takes two integer arrays as inputs and returns the intersection of these arrays. The intersection must be an array of unique elements and should appear in ascending order. Examples Input | Output --- | --- [1, 2, 2, 4, 5], [2, 3, 4] | [2, 4] [7, 8, 9], [10, 11, 12] | [] [1, 1, 1, 1], [1, 1, 1, 1, 1] | [1] Note: The input arrays can contain duplicate elements, but the output should only contain unique elements that are present in both arrays, sorted in ascending order.","solution":"def array_intersection(arr1, arr2): Returns the intersection of two arrays. The intersection must be an array of unique elements and in ascending order. # Convert both arrays to sets to keep only unique elements and intersect them. intersection = set(arr1).intersection(set(arr2)) # Return the sorted list of the intersection set. return sorted(list(intersection))"},{"question":"Write a function that takes a list of integers and returns an integer representing the type of symmetry found within the list. The function should return a code according to the following table: |Code|Type|Example| |-|-|-| |`0`|`asymmetric`|`[3,5,8,1,14,3]`| |`1`|`symmetric`|`[1,2,3,2,1]`| |`2`|`rotational symmetry`|`[1,2,3,1,2,3]`| Notes: - A list is `symmetric` (Code `1`) if it reads the same backward as forward. - A list has `rotational symmetry` (Code `2`) if the first half of the list is the same as the second half, possibly after rotating the first half. - You can expect all the inputs to be non-empty and completely numerical lists. - Ensure the solution runs efficiently for larger inputs while keeping the initial list unchanged. ```python def symmetry_type(lst): if lst == lst[::-1]: return 1 n = len(lst) if n % 2 == 0 and lst[:n//2] == lst[n//2:]: return 2 return 0 ```","solution":"def symmetry_type(lst): Takes a list of integers and returns an integer representing the type of symmetry found within the list. Code: 0 - asymmetric 1 - symmetric 2 - rotational symmetry if lst == lst[::-1]: return 1 n = len(lst) if n % 2 == 0 and lst[:n//2] == lst[n//2:]: return 2 return 0"},{"question":"-----Problem Statement----- Write a program that accepts a string, str, and outputs the string with all vowels removed. -----Input----- The only line contains a single string, str. -----Output----- Output the modified string with all vowels (a, e, i, o, u) removed. -----Constraints----- - The string length will be between 1 and 1000 characters. - The string will contain only lowercase letters. -----Sample Input----- hello -----Sample Output----- hll","solution":"def remove_vowels(s): Removes all vowels from the string s and returns the resulting string. vowels = \'aeiou\' return \'\'.join([char for char in s if char not in vowels])"},{"question":"Implement a function that takes an integer `num` as input and returns a list of its prime factors in ascending order. If `num` is less than or equal to 1, return an empty list. The prime factors should be returned without duplication. Examples ``` 60 --> [2, 3, 5] 45 --> [3, 5] 1 --> [] ``` Hint - Use a helper function to determine if a number is prime. - Iterate through potential factors up to the square root of `num` to check for divisibility.","solution":"def prime_factors(num): Returns a list of prime factors of num in ascending order without duplication. If num is less than or equal to 1, returns an empty list. if num <= 1: return [] def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True prime_factors_set = set() factor = 2 while num % factor == 0: prime_factors_set.add(factor) num //= factor factor = 3 while factor * factor <= num: while num % factor == 0: if is_prime(factor): prime_factors_set.add(factor) num //= factor factor += 2 if num > 2 and is_prime(num): prime_factors_set.add(num) return sorted(list(prime_factors_set))"},{"question":"You are given a `Maze` object representing a maze with multiple rooms connected by single-directional doors. Your task is to determine the minimum number of rooms you need to pass through to get from a given starting room to a target room. Each room is assigned a unique integer ID starting from 0. The `Maze` object provides the following methods: 1. `get_rooms()` returns a list of all room IDs in the maze. 2. `get_doors(room_id)` returns a list of room IDs that can be reached directly from the given `room_id`. Write a function `find_minimum_path_length` that takes two arguments: `maze` (a `Maze` object) and `target` (an integer representing the target room ID). This function should return the minimum number of rooms that need to be passed through to reach the target room starting from room 0. If the target room is unreachable, return -1. For example: If the maze object defines the following rooms and connections: - Room 0 connects to room 1 and room 2. - Room 1 connects to room 3. - Room 2 connects to room 3. - Room 3 connects to room 4. Calling `find_minimum_path_length(maze, 4)` should return `3`, since the shortest path from room 0 to room 4 is `0 -> 1 -> 3 -> 4`. Maze object modeling: 1. `maze.get_rooms()` -> `[0, 1, 2, 3, 4]` 2. `maze.get_doors(0)` -> `[1, 2]` 3. `maze.get_doors(1)` -> `[3]` 4. `maze.get_doors(2)` -> `[3]` 5. `maze.get_doors(3)` -> `[4]` 6. `maze.get_doors(4)` -> `[]` Note: The doors are unidirectional; if room A has a door to room B, you cannot assume there is a door from room B to room A unless explicitly stated.","solution":"from collections import deque def find_minimum_path_length(maze, target): Returns the minimum number of rooms to pass through to get from room 0 to the target room. Returns -1 if the target room is unreachable. # Initialize the queue for BFS queue = deque([(0, 0)]) # Each element is a tuple (current_room, depth) visited = set() # Run the BFS while queue: current_room, depth = queue.popleft() if current_room == target: return depth if current_room not in visited: visited.add(current_room) for neighbor in maze.get_doors(current_room): queue.append((neighbor, depth + 1)) return -1 # Target room is unreachable"},{"question":"Consider the following problem. You have an array of integers. Your task is to create a new array such that each element at index i of the new array is equal to the product of all the values in the original array except the one at index i. Your solution should not use division and should run in linear time O(n). -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case is described by two lines. The first line contains an integer n (2 le n le 10^5) — the number of elements in the array. The second line contains n integers separated by spaces, representing the elements of the array a (1 le a[i] le 10^9). The total number of elements over all test cases does not exceed 10^6. -----Output----- For each test case, print a single line containing n integers separated by spaces, representing the new array as described. -----Example----- Input 2 4 1 2 3 4 3 5 6 7 Output 24 12 8 6 42 35 30","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [0] * n # Fill left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct result from left_products and right_products for i in range(n): result[i] = left_products[i] * right_products[i] return result def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case result = product_except_self(arr) results.append(result) return results def main(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] idx = 1 for _ in range(t): n = int(lines[idx]) arr = list(map(int, lines[idx + 1].split())) test_cases.append((n, arr)) idx += 2 results = process_test_cases(test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"You are given a string containing letters a-z and digits 0-9. Write a function that sorts the string such that all letters come before any digits, and within the letters and digits groups, the characters are sorted in ascending order. The function should return the resulting string. # Examples: ``` \\"dc1a2b3\\" --> \\"abcd123\\" \\"c2a1b\\" --> \\"abc12\\" \\"4z5y6x\\" --> \\"xyz456\\" ``` **Notes:** - The input string will not be empty and will only contain lowercase letters and digits. - The function should maintain the relative order of letters and digits.","solution":"def sort_string(s): Sorts the given string such that all letters come before any digits, and within the letters and digits groups, the characters are sorted in ascending order. letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"=====Problem Statement===== You are given a string representing a binary number. Your task is to determine if this binary number is a multiple of 3. =====Input Format===== The input consists of a single line containing a binary number as a string. =====Constraints===== 1 ≤ Length of the binary number ≤ 100 =====Output Format===== Print \\"Yes\\" if the binary number is a multiple of 3. Otherwise, print \\"No\\".","solution":"def is_multiple_of_3(binary_str): Determine if the given binary number is a multiple of 3. Args: binary_str (str): A string representing a binary number. Returns: str: \\"Yes\\" if the binary number is a multiple of 3, otherwise \\"No\\". decimal_num = int(binary_str, 2) if decimal_num % 3 == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Create a function `find_anagrams` to help Chef find all unique anagrams of a given string. An anagram is a rearrangement of the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once. Chef wants the anagrams to be sorted in lexicographical order. # Function Signature `def find_anagrams(s: str) -> List[str]:` # Input - A single string `s` (1 ≤ |s| ≤ 10) # Output - A list of unique anagrams of the string `s`, sorted lexicographically. # Example Input: ``` find_anagrams(\\"eat\\") ``` Output: ``` [\'aet\', \'ate\', \'eat\', \'eta\', \'tae\', \'tea\'] ``` Input: ``` find_anagrams(\\"abc\\") ``` Output: ``` [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] ``` # Additional Constraints - The input string `s` consists of lowercase English letters. - The function should work efficiently even for the upper length limit of the string. # Notes 1. The output should be a list of strings, each representing a unique anagram of the input string. 2. Anagrams should not be repeated in the output list. 3. Use library functions efficiently to handle permutations and sorting. # Example Walkthrough For the input \\"abc\\": - The possible permutations of \\"abc\\" are [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. - These are already unique and when sorted lexicographically, the output is [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"]. For the input \\"eat\\": - The possible permutations of \\"eat\\" are [\\"eat\\", \\"eta\\", \\"aet\\", \\"ate\\", \\"tea\\", \\"tae\\"]. - Sorting these gives [\\"aet\\", \\"ate\\", \\"eat\\", \\"eta\\", \\"tae\\", \\"tea\\"].","solution":"from itertools import permutations from typing import List def find_anagrams(s: str) -> List[str]: Returns all unique anagrams of the string `s`, sorted lexicographically. # Generate all possible permutations of the string `s` perm_set = set(permutations(s)) # Convert each tuple to a string anagrams = [\'\'.join(perm) for perm in perm_set] # Sort the list lexicographically anagrams.sort() return anagrams"},{"question":"Write a function that determines if a given string is a valid serialization of a binary tree. You are given a string consisting of integers and the character \'#\' separated by commas, where each integer represents a node\'s value, and \'#\' signifies a null pointer (a leaf node). A valid binary tree should have exactly one root and every non-null node should have exactly two children, which can either be integers (nodes) or \'#\' (null pointers). Your task is to implement a function `isValidSerialization` that takes a single argument `preorder`, a string representing the preorder serialization of a binary tree, and returns `True` if it is a valid serialization, and `False` otherwise. Function signature: `def isValidSerialization(preorder: str) -> bool:` Example: ``` Input: \\"9,3,4,#,#,1,#,#,2,#,6,#,#\\" Output: True Input: \\"1,#\\" Output: False Input: \\"9,#,#,1\\" Output: False ``` Constraints: - `preorder` consists of integers and the character \'#\' separated by commas. - You may assume that the input format is always valid, no extra commas or spaces. - The length of `preorder` string is in the range [1, 10^4].","solution":"def isValidSerialization(preorder: str) -> bool: Determine if a given preorder string is a valid serialization of a binary tree. # Split the input string by commas into nodes nodes = preorder.split(\',\') # Initialize a counter for available slots slots = 1 # Iterate through the nodes for node in nodes: # For every node, one slot is taken slots -= 1 # If slots are negative, the serialization is invalid if slots < 0: return False # If the node is not a null pointer, it adds two slots (two children) if node != \'#\': slots += 2 # All slots should be used up for the serialization to be valid return slots == 0"},{"question":"You are given a series of operations to perform on a matrix of integers. Each operation is either an addition, a multiplication, or a transpose operation. Your task is to implement a function that executes these operations in order and returns the final matrix. The format for these operations is given as follows: An operation can be one of the following: 1. Addition: Takes the form \\"add k\\" where \\"add\\" is the string \\"add\\" and \\"k\\" is an integer. This operation adds \\"k\\" to every element of the matrix. 2. Multiplication: Takes the form \\"mult k\\" where \\"mult\\" is the string \\"mult\\" and \\"k\\" is an integer. This operation multiplies every element of the matrix by \\"k\\". 3. Transpose: Takes the form \\"transpose\\". This operation transposes the matrix, which means converting all the rows of the matrix into columns and vice-versa. Your task is to write a function that performs these operations and returns the final state of the matrix. Function Signature: ```python def process_matrix_operations(matrix: List[List[int]], operations: List[str]) -> List[List[int]]: ``` Input: - matrix: A 2D list of integers representing the initial state of the matrix. - operations: A list of strings where each string represents an operation to be performed on the matrix. Each operation is either an addition, multiplication, or transpose. Output: - Return the final state of the matrix after performing all the operations. Example: Input: matrix = [ [1, 2, 3], [4, 5, 6] ] operations = [\\"add 1\\", \\"mult 2\\", \\"transpose\\"] Output: [ [4, 12], [6, 14], [8, 16] ] Explanation: - Initially, the matrix is: [ [1, 2, 3], [4, 5, 6] ] - After the \\"add 1\\" operation, the matrix becomes: [ [2, 3, 4], [5, 6, 7] ] - After the \\"mult 2\\" operation, the matrix becomes: [ [4, 6, 8], [10, 12, 14] ] - After the \\"transpose\\" operation, the matrix becomes: [ [4, 10], [6, 12], [8, 14] ] You can assume that the matrix will always have at least one row and one column, and all numbers will be integers within the range of 32-bit signed integers. The number of operations in the operations list will not exceed 100.","solution":"from typing import List def process_matrix_operations(matrix: List[List[int]], operations: List[str]) -> List[List[int]]: for operation in operations: if operation.startswith(\\"add\\"): _, k = operation.split() k = int(k) # Perform addition on each element matrix = [[element + k for element in row] for row in matrix] elif operation.startswith(\\"mult\\"): _, k = operation.split() k = int(k) # Perform multiplication on each element matrix = [[element * k for element in row] for row in matrix] elif operation == \\"transpose\\": # Perform transposition of the matrix matrix = [list(row) for row in zip(*matrix)] return matrix"},{"question":"Allergen-Free Recipes In a cooking competition, chefs are asked to create recipes using unique ingredients. No two recipes can have the same set of ingredients. There are N chefs, each submitting one recipe. Each recipe can contain any number of ingredients, and each ingredient is represented by a unique string. However, due to certain contests rules, some chefs cannot use specific ingredients to avoid allergens. Given the list of allergens and the list of recipes each chef has made, find out if there is a way to create a set of allergen-free recipes such that no two recipes use the same set of ingredients. Implement a function to determine whether it’s possible to assign non-allergic unique ingredient sets to each chef. ----Input format---- • Line 1: Two space-separated integers, N (number of chefs) and M (number of allergens). • Lines 2 to M + 1: Each line contains a string representing an allergen. • Lines M + 2 to M + 1 + N: Each line describes a recipe from one of the chefs. It starts with an integer P, the number of ingredients, followed by P space-separated strings denoting the ingredients of the recipe. ----Output format---- The output consists of a single word: \\"Possible\\" if there is a way to assign unique allergen-free recipes to the chefs, otherwise \\"Impossible\\". ----Example Input---- 4 2 peanut shellfish 3 tomato cheese basil 3 lettuce bacon egg 2 tomato bacon 4 bacon egg cheese mushroom ----Example Output---- Possible In this example, there are 4 chefs and 2 allergens (peanut, shellfish). The provided recipes do not contain any of these allergens and each recipe uses a unique set of ingredients. Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def check_recipes_unique_and_allergen_free(chefs, allergens, recipes): allergen_set = set(allergens) recipe_sets = [] for recipe in recipes: P, ingredients = recipe[0], recipe[1:] ingredient_set = set(ingredients) # Check if any allergen is present in the recipe if not ingredient_set.isdisjoint(allergen_set): return \\"Impossible\\" # Check for uniqueness of ingredient sets if ingredient_set in recipe_sets: return \\"Impossible\\" recipe_sets.append(ingredient_set) return \\"Possible\\""},{"question":"A transport company operates a series of delivery trucks, and management wants to monitor the efficiency of their loading and unloading processes. Each truck starts its journey from a central depot, makes a series of stops at different locations (each location identified by an integer), and returns to the central depot. The efficiency of a truck\'s route is determined by the number of unique locations it visits, excluding the central depot. For example, given the route: 0 -> 3 -> 5 -> 3 -> 0 the truck visits two unique locations: 3, and 5. The first location (0) and the last location (0) are the central depot and should not be counted. Given an array representing the sequence of locations a truck visits starting and ending at the central depot, your task is to determine the number of unique locations visited by each truck. ---Input format--- The input consists of several lines: - The first line contains an integer T, the number of trucks. - Each of the following T lines represents a truck\'s route as a space-separated sequence of integers. - Each route starts and ends with a 0 (the central depot). ---Output format--- The output should consist of T lines, each containing a single integer, the number of unique locations visited by the corresponding truck. ---Test Data--- The test data is grouped into two subtasks with the following constraints on the inputs. • Subtask 1 [30 points]: 1 ≤ T ≤ 100. Each route has a maximum length of 1000 integers. • Subtask 2 [70 points]: 1 ≤ T ≤ 1000. Each route has a maximum length of 100000 integers. ---Example--- Here is the sample input and output corresponding to the example above. ---Sample input--- 2 0 3 5 3 0 0 1 2 1 2 1 0 ---Sample output--- 2 2 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def count_unique_locations(truck_routes): Given a list of truck routes, where each route starts and ends with a central depot (0), this function returns a list of counts of unique locations visited on each route, excluding the central depot. Args: truck_routes (list of list of int): List of truck routes. Returns: list of int: List of counts of unique locations for each truck route. unique_locations_counts = [] for route in truck_routes: # Create a set of locations excluding the first and last element (central depot) unique_locations = set(route[1:-1]) unique_locations_counts.append(len(unique_locations)) return unique_locations_counts # Function to process input as described in the problem statement def process_truck_routes(input_data): Process the input to determine the number of unique locations each truck visited. Args: input_data (str): Input data as a multi-line string where the first line is T, the number of trucks, followed by T lines representing the routes. Returns: list of int: List of unique location counts for each truck. lines = input_data.strip().split(\'n\') T = int(lines[0]) # Number of trucks truck_routes = [list(map(int, line.split())) for line in lines[1:T+1]] return count_unique_locations(truck_routes)"},{"question":"You are given a list of integers. Your task is to find the maximum sum of a contiguous subarray with at least one element. A contiguous subarray is defined as a sequence of elements in the array that are adjacent to each other without any gaps. -----Input----- First line contains T, number of testcases. Each testcase consists of two lines. The first line contains an integer N, the length of the array. The second line contains N space-separated integers, will be between [-10^5, 10^5]. -----Output----- For each testcase, print the required answer in one line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 -----Example----- Input: 2 4 1 2 3 4 5 -1 2 5 -3 6 Output: 10 10 -----Explanation----- For the first testcase, the entire array [1, 2, 3, 4] has a sum of 10 which is the maximum sum possible. For the second testcase, the contiguous subarray [2, 5, -3, 6] has the maximum sum of 10.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(testcases): Processes multiple test cases and returns the results. results = [] for case in testcases: N, arr = case result = max_subarray_sum(arr) results.append(result) return results"},{"question":"# String Compressor Task Implement a function to perform basic string compression using the counts of repeated characters. For example, the string `\\"aabcccccaaa\\"` would become `\\"a2b1c5a3\\"`. If the compressed string would not become smaller than the original string, your function should return the original string. The string will only contain uppercase and lowercase letters (a-z). Function Signature ```python def compress_string(s: str) -> str: pass ``` Input - `s (str)`: A non-empty string that expects to be compressed. Output - Returns a compressed string which is smaller than or equal to the length of the original string. Returns the original string if the compressed string is not smaller. Example ```python assert compress_string(\\"aabcccccaaa\\") == \\"a2b1c5a3\\" assert compress_string(\\"abc\\") == \\"abc\\" assert compress_string(\\"aabbcc\\") == \\"aabbcc\\" ``` Explanation In the first example, the function receives the string `\\"aabcccccaaa\\"`. The compressed version is `\\"a2b1c5a3\\"`, which is shorter than the original string, hence it is returned. In the second example, the resulting compressed string `\\"a1b1c1\\"` is longer than the input, so the function returns the original string `\\"abc\\"`. In the third example, the compressed version `\\"a2b2c2\\"` is not shorter than the original string, so the function returns the original string `\\"aabbcc\\"`.","solution":"def compress_string(s: str) -> str: Performs basic string compression using the counts of repeated characters. Returns the original string if the compressed string would not be shorter. if not s: return s compressed = [] count_consecutive = 0 for i in range(len(s)): count_consecutive += 1 # If next char is different than current, append this char to result string. if i + 1 >= len(s) or s[i] != s[i + 1]: compressed.append(s[i]) compressed.append(str(count_consecutive)) count_consecutive = 0 compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"# Determine the Majority Element A majority element in an array is one that appears more than `n / 2` times, where `n` is the length of the array. Write a function to identify the majority element in a given array of integers. If there is no majority element, return `None`. # Function Signature ```python def find_majority_element(arr: List[int]) -> Optional[int]: pass ``` # Input - `arr`: A list of integers where the length of the list is between `1` and `1000`. # Output - Return the majority element if one exists, otherwise return `None`. Examples ```python find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4 find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) == None find_majority_element([2, 2, 1, 1, 2, 2, 2, 2]) == 2 ``` # Notes - There will be only one unique majority element if it exists. - The input list can contain both positive and negative integers.","solution":"from typing import List, Optional def find_majority_element(arr: List[int]) -> Optional[int]: Finds the majority element in the array if it exists, otherwise returns None. A majority element is one that appears more than n / 2 times. count = {} n = len(arr) for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # If at any point, the count of the number exceeds n // 2, return it immediately if count[num] > n // 2: return num return None"},{"question":"During an archaeological expedition, scientists have discovered an ancient construct consisting of a sequence of stones with each stone numbered with an integer ranging from 1 to n. Each stone has a unique identifier. The identifier of the i-th stone is represented by the integer s_i. The archaeologists noticed a peculiar pattern: these stones can form interesting subsequences. A subsequence is defined as a sequence derived from the original sequence by deleting some or none of the elements without changing the order of the remaining elements. The scientists are interested in finding the length of the longest increasing subsequence among all possible subsequences of the stone identifiers. A sequence is called increasing if for every j < k the inequality s_j < s_k holds true. Write a function that determines the length of the longest increasing subsequence of the stone identifiers. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of stones. The second line contains n space-separated integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9), the identifiers of the stones. -----Output----- Output a single integer, the length of the longest increasing subsequence of the given sequence of stone identifiers. -----Examples----- Input 5 10 9 2 5 3 Output 2 Input 6 0 8 4 12 2 50 Output 4 -----Note----- In the first example, The longest increasing subsequence is [2, 5], which has length 2. In the second example, The longest increasing subsequence can be [0, 4, 12, 50], which has length 4.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the list of integers nums. if not nums: return 0 dp = [] for num in nums: idx = binary_search(dp, num) if idx == len(dp): dp.append(num) else: dp[idx] = num return len(dp) def binary_search(dp, target): Helper function to perform binary search and return the index where target should be inserted. left, right = 0, len(dp) while left < right: mid = (left + right) // 2 if dp[mid] < target: left = mid + 1 else: right = mid return left"},{"question":"Task Create a function that processes a list of orders for a pizza restaurant. The function will take in an array of orders and return an object showing the count of each pizza type ordered. # Example For orders = [\\"pepperoni\\", \\"margherita\\", \\"pepperoni\\", \\"veggie\\"], the output should be `{\\"pepperoni\\": 2, \\"margherita\\": 1, \\"veggie\\": 1}`. For orders = [], the output should be `{}`. # Input/Output - `[input]` array of strings `orders` - An array of pizza types ordered, where each type is a string. - `[output]` an object - An object where the keys are pizza types and the values are the count of how many times each type was ordered.","solution":"def count_pizza_orders(orders): Given an array of orders, returns a dictionary with the count of each pizza type ordered. pizza_count = {} for order in orders: if order in pizza_count: pizza_count[order] += 1 else: pizza_count[order] = 1 return pizza_count"},{"question":"Consider the creation of a function `group_by_owners(files_dict)` that returns a dictionary of owners and the files they own. The input `files_dict` is a dictionary where keys represent filenames and values represent the corresponding owner\'s name. The function should return a new dictionary where keys are the names of owners and values are lists of filenames owned by them. Example usage: ```python files = { \'Input.txt\': \'Randy\', \'Code.py\': \'Stan\', \'Output.txt\': \'Randy\' } group_by_owners(files) ``` This should return: ```python { \'Randy\': [\'Input.txt\', \'Output.txt\'], \'Stan\': [\'Code.py\'] } ``` # Function Signature ```python def group_by_owners(files_dict: dict) -> dict: pass ```","solution":"def group_by_owners(files_dict: dict) -> dict: Groups filenames by their owners. Parameters: files_dict (dict): A dictionary where the keys are filenames and the values are the owners\' names. Returns: dict: A dictionary where the keys are the owners\' names and the values are lists of filenames owned by them. result = {} for file, owner in files_dict.items(): if owner in result: result[owner].append(file) else: result[owner] = [file] return result"},{"question":"# Task Your task is to **Find the Largest Substring with Unique Characters**. This problem requires you to analyze a given string and find the longest contiguous sub-string which contains only unique characters. # How to approach this? Input: A single string containing alphanumeric characters and possibly other printable symbols. 1. Scan through the string to identify contiguous sub-strings that contain all unique characters. 2. Keep track of the longest sub-string detected during your scan. 3. Return the length of the longest unique sub-string as well as the sub-string itself. # Constraints - The string length will not exceed 10,000 characters. # Example Input: ``` \\"abcabcbb\\" ``` Output: ``` Length: 3, Substring: \\"abc\\" ``` Input: ``` \\"bbbbb\\" ``` Output: ``` Length: 1, Substring: \\"b\\" ``` Input: ``` \\"pwwkew\\" ``` Output: ``` Length: 3, Substring: \\"wke\\" ``` # Assumptions - If there are multiple sub-strings of the same maximum length, return the first one encountered. - Uppercase and lowercase characters are treated as distinct characters. # Final Notes This problem tests your understanding of string manipulation and the use of efficient algorithms to handle potentially large strings within a reasonable time frame. Consider edge cases such as empty strings or strings containing a single type of character. Optimize for both time and space complexity.","solution":"def find_longest_unique_substring(s): Returns the length and the longest substring with unique characters. char_index = {} start = maxLength = 0 longest_substring = \\"\\" for end in range(len(s)): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end if end - start + 1 > maxLength: maxLength = end - start + 1 longest_substring = s[start:end + 1] return maxLength, longest_substring"},{"question":"Given an array of integers, write a function `merge_sort` that implements the merge sort algorithm to sort the array in ascending order. The function should accept one argument, the array, and return the sorted array. Merge sort is a divide-and-conquer algorithm that works as follows: 1. Divide the array into two halves. 2. Recursively sort each half. 3. Merge the two sorted halves to produce the sorted array. Here is the function signature: ```python def merge_sort(array): # Your code here ``` Examples: ```python merge_sort([4, 2, 6, 5, 1, 3]) # => [1, 2, 3, 4, 5, 6] merge_sort([10, -1, 2, 5, 0, 6, 4, -5]) # => [-5, -1, 0, 2, 4, 5, 6, 10] merge_sort([1, 2, 3, 4, 5]) # => [1, 2, 3, 4, 5] merge_sort([5, 4, 3, 2, 1]) # => [1, 2, 3, 4, 5] ``` Assume that the input array contains only integers and can be of any length, including zero.","solution":"def merge_sort(array): Sorts an array in ascending order using the merge sort algorithm. if len(array) <= 1: return array mid = len(array) // 2 left = merge_sort(array[:mid]) right = merge_sort(array[mid:]) return merge(left, right) def merge(left, right): Merges two sorted arrays into one sorted array. result = [] left_index = 0 right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 result.extend(left[left_index:]) result.extend(right[right_index:]) return result"},{"question":"Given a string s consisting of words and spaces, return the length of the last word in the string. If the last word does not exist, return 0. A word is defined as a character sequence consisting of non-space characters only. Example: Input: \\"Hello World\\" Output: 5 Explanation: The last word is \\"World\\" with length 5. Input: \\" \\" Output: 0 Explanation: There is no last word in the given string.","solution":"def length_of_last_word(s): Returns the length of the last word in the string s. If there is no word in the string, returns 0. words = s.split() if not words: return 0 return len(words[-1])"},{"question":"Alice loves puzzles, and today she stumbled upon an interesting problem involving coins. She has `n` coins arranged in a line, where each coin shows either heads (H) or tails (T) initially. Alice can perform a single operation of flipping all coins from the `i-th` position to the `j-th` position, and she can perform this operation any number of times. Her goal is to make all coins show heads (H). Help Alice determine the minimum number of operations required to achieve this goal. -----Input----- The first line contains a single integer `t` (1 le t le 1000) — the number of test cases. Each of the following `t` lines contains a single integer `n` (1 le n le 1000), followed by a string of length `n` consisting of characters \'H\' and \'T\'. -----Output----- For each test case, an integer representing the minimum number of operations needed to make all coins show heads (H). -----Example----- Input 3 5 HHHTT 4 HHHH 6 TTTTHH Output 1 0 2","solution":"def min_operations_to_heads(n, coins): Function to calculate minimum number of operations to make all coins show heads (H). coins = list(coins) operations = 0 for i in range(n): if coins[i] == \'T\': operations += 1 # Flip all coins from i-th position to the end for j in range(i, n): coins[j] = \'H\' if coins[j] == \'T\' else \'T\' return operations def process_cases(t, cases): results = [] for i in range(t): n, coins = cases[i] results.append(min_operations_to_heads(n, coins)) return results"},{"question":"Write a function that takes in a list of integers and a target integer, and returns a list of unique pairs from the list that add up to the target. Each pair should be sorted in ascending order, and the entire list of pairs should be sorted lexicographically. For example: * `find_pairs([1, 2, 3, 4, 3, 2, 1], 4) = [(1, 3), (2, 2)]` * `find_pairs([1, 5, 2, -2, 4], 3) = [(-2, 5), (1, 2)]` * `find_pairs([0, -1, 2, -3, 1], -2) = [(-3, 1)]` The input list can contain both negative and positive integers, and it might have duplicated elements. Ensure that each pair is unique.","solution":"def find_pairs(nums, target): Returns a list of unique pairs (as tuples) that add up to the target. Each pair and the resulting list are sorted in ascending order. num_set = set(nums) pairs_set = set() for num in nums: complement = target - num if complement in num_set: pair = tuple(sorted((num, complement))) if pair[0] != pair[1] or nums.count(pair[0]) > 1: pairs_set.add(pair) return sorted(pairs_set)"},{"question":"# Task You are given a 2D grid representing a maze where every cell can either be an open space \'O\' or a wall \'X\'. You start at the top-left corner of the maze (0, 0) and you need to reach the bottom-right corner (n-1, m-1). You can move up, down, left, or right, but you cannot move through a wall. Your task is to determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the destination, return -1. # Example For `maze = [[\\"O\\", \\"O\\", \\"X\\", \\"O\\"], [\\"O\\", \\"X\\", \\"O\\", \\"O\\"], [\\"O\\", \\"O\\", \\"O\\", \\"X\\"], [\\"X\\", \\"O\\", \\"O\\", \\"O\\"]]`, the output should be `6`. For `maze = [[\\"O\\", \\"X\\", \\"O\\"], [\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"O\\"]]`, the output should be `-1`. # Input/Output - `[input]` 2D character array `maze` 2D grid filled with characters \'O\' and \'X\'. Constraints: `1 ≤ n, m ≤ 100` `maze[0][0] == \'O\'` `maze[n-1][m-1] == \'O\'` - `[output]` an integer value Minimum number of steps required to reach the bottom-right corner or -1 if it is not possible.","solution":"from collections import deque def min_steps_to_exit(maze): Determines the minimum number of steps required to reach the bottom-right corner from the top-left corner in a maze. if not maze or not maze[0]: return -1 n, m = len(maze), len(maze[0]) if maze[0][0] == \'X\' or maze[n-1][m-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if (r, c) == (n-1, m-1): return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and maze[nr][nc] == \'O\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"You have been given a rectangular plateau grid represented by a 2D array, where each element of the array indicates the height of that cell on the plateau. A rain drop falls on a cell and flows to a lower height cell that is adjacent either vertically or horizontally. Write a program to determine the path taken by the rain drop until it cannot flow to a lower cell. Implement the PlateauGrid class: PlateauGrid(int[][] heights) Initializes the object with the given heights of the plateau grid. List<int[]> rainDropPath(int r, int c) Returns the path of the rain drop starting from cell (r, c). The path is a list of cells in the order visited by the rain drop. Example: Input [\\"PlateauGrid\\", \\"rainDropPath\\"] [[[5, 3, 4, 6], [7, 1, 2, 3], [8, 6, 4, 7]], [0, 0]] Output [null, [[0, 0], [0, 1], [1, 1]]] Explanation PlateauGrid plateau = new PlateauGrid([[5, 3, 4, 6], [7, 1, 2, 3], [8, 6, 4, 7]]); plateau.rainDropPath(0, 0); // returns [[0, 0], [0, 1], [1, 1]]. Rain drop starts at (0,0) with height 5, moves to (0,1) with height 3, and finally to (1,1) with height 1 where it cannot move further. Constraints: 1 <= heights.length, heights[0].length <= 100 0 <= heights[i][j] <= 10^3 0 <= r < heights.length 0 <= c < heights[0].length","solution":"class PlateauGrid: def __init__(self, heights): self.heights = heights self.rows = len(heights) self.cols = len(heights[0]) def rainDropPath(self, r, c): path = [] current_height = self.heights[r][c] path.append([r, c]) while True: next_r, next_c = -1, -1 for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_r, new_c = r + dr, c + dc if 0 <= new_r < self.rows and 0 <= new_c < self.cols and self.heights[new_r][new_c] < current_height: current_height = self.heights[new_r][new_c] next_r, next_c = new_r, new_c if next_r == -1 and next_c == -1: break r, c = next_r, next_c path.append([r, c]) return path"},{"question":"Your task is to write a **function** that takes a **list of integers** and a **target integer** as inputs. The function should **return a list of pairs of integers** from the input list that add up to the target integer. Each pair should be a list of two integers in ascending order, and the final list of pairs should be sorted in ascending order (based on the first integer of each pair, and then by the second integer in case of a tie). If no such pairs are found, the function should return an **empty list**. If the list contains **non-integer elements** or the inputs are not a list and an integer respectively, the function should return **\'Invalid input!\'**. Example: ``` Input: ([1, 2, 3, 4, 5], 5) Output: [[1, 4], [2, 3]] Input: ([1, 1, 2, 3], 4) Output: [[1, 3]] Input: ([1, \'2\', 3], 4) Output: \'Invalid input!\' Input: (\\"1234\\", 5) Output: \'Invalid input!\' ``` Hints: - Consider edge cases like empty lists or no valid pairs being found. - Ensure to handle inputs strictly as per the requirements. - Aim for a time-efficient solution.","solution":"def find_pairs(lst, target): Returns a list of pairs from the input list that add up to the target integer. Each pair is in ascending order, and the final list is sorted. Returns \'Invalid input!\' if the input is not a list of integers or if the target is not an integer. if not isinstance(lst, list) or not isinstance(target, int) or not all(isinstance(x, int) for x in lst): return \'Invalid input!\' seen = set() pairs = set() for number in lst: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted([list(pair) for pair in pairs])"},{"question":"Task: Write a function **compress_string** that takes a string and returns its run-length encoding. # Requirements: 1. If the input string is empty, return an empty string. 2. If a character appears consecutively in the string, the result should note the character followed by the count of consecutive appearances. 3. If a character appears exactly one time consecutively, it should appear alone in the result without a count. 4. The output characters should maintain their original order from the input string. # Examples compress_string(\\"aaabbcaaa\\"): \\"a3b2ca3\\" compress_string(\\"xyz\\"): \\"xyz\\" compress_string(\\"\\"): \\"\\" compress_string(\\"aabbaa\\"): \\"a2b2a2\\"","solution":"def compress_string(s): Returns the run-length encoding of the input string. if not s: return s result = [] i = 0 length = len(s) while i < length: count = 1 while (i + 1) < length and s[i] == s[i + 1]: count += 1 i += 1 if count > 1: result.append(s[i] + str(count)) else: result.append(s[i]) i += 1 return \'\'.join(result)"},{"question":"You are developing a scheduling system for a school\'s examination process. The exams are conducted in different rooms, each scheduled for a different time slot. Each room can accommodate a certain number of students, and students are assigned to rooms based on their registration sequence. Create a function `examSchedule` that accepts two parameters: - an array of integers representing the capacity of each examination room, in the order they will be filled, - an integer representing the total number of students to be scheduled. The function should return a 2D array, where each sub-array contains the capacities of the rooms and the count of students allocated to each room until all students are scheduled or rooms are full. **Constraints:** - The capacity of each room will always be a positive integer. - The number of rooms is at least one. - The number of students to be scheduled is a non-negative integer. **Example:** For input `capacities = [10, 20, 15]` and `students = 35`, the function should return: ``` [[10, 10], [20, 20], [15, 5]] ``` In this example: - The first room can hold 10 students, and it gets fully filled. - The second room can hold 20 students, and it also gets fully filled. - The last room can hold 15 students, and only 5 students need to be accommodated there to reach the total of 35. If the input is `capacities = [5, 5, 5]` and `students = 0`, the function should return: ``` [[5, 0], [5, 0], [5, 0]] ``` In this scenario, no students need to be scheduled, so all rooms remain empty. Write the function `examSchedule` to fulfill the described behavior.","solution":"def examSchedule(capacities, students): Distributes students to examination rooms based on their capacities. Parameters: capacities (list of int): The capacity of each examination room. students (int): The total number of students to be scheduled. Returns: list of list: 2D list where each sublist contains the capacity of next room and the count of students allocated to it. schedule = [] remaining_students = students for capacity in capacities: allocated_students = min(capacity, remaining_students) schedule.append([capacity, allocated_students]) remaining_students -= allocated_students if remaining_students <= 0: break # If we haven\'t gone through all capacities, append remaining empty rooms for i in range(len(schedule), len(capacities)): schedule.append([capacities[i], 0]) return schedule"},{"question":"Write a function sumAllEvens that takes a list of integers and returns the sum of all even numbers in the list. ```python # Example usage: print(sumAllEvens([1, 2, 3, 4, 5, 6])) # returns 12 print(sumAllEvens([7, 8, 10, 11])) # returns 18 print(sumAllEvens([1, 3, 5])) # returns 0 ```","solution":"def sumAllEvens(lst): Returns the sum of all even numbers in the list. Parameters: lst (list of int): The list of integers to sum up. Returns: int: The sum of all even numbers in the list. return sum(num for num in lst if num % 2 == 0)"},{"question":"Consider a system that tracks user activities. Each user activity is logged based on user ID and timestamp. Write a method that, given a list of user activities, returns a list of user IDs who have logged more than a specified number of activities within a given time span. For example, suppose each activity is represented by a tuple (user_id, timestamp). The function should be able to identify users who have logged activities more than the specified threshold within the provided time window: ```cs class Activity { public string UserId { get; set; } public DateTime Timestamp { get; set; } } List<string> GetActiveUsers(List<Activity> activities, int activityThreshold, TimeSpan timeSpan); ``` ```python class Activity: def __init__(self, user_id, timestamp): self.user_id = user_id self.timestamp = timestamp def get_active_users(activities, activity_threshold, time_span): pass ``` Example usage: ```cs List<Activity> activities = new List<Activity> { new Activity { UserId = \\"user1\\", Timestamp = new DateTime(2023, 10, 1, 12, 0, 0) }, new Activity { UserId = \\"user1\\", Timestamp = new DateTime(2023, 10, 1, 12, 5, 0) }, new Activity { UserId = \\"user2\\", Timestamp = new DateTime(2023, 10, 1, 12, 10, 0) }, new Activity { UserId = \\"user1\\", Timestamp = new DateTime(2023, 10, 1, 12, 15, 0) }, new Activity { UserId = \\"user3\\", Timestamp = new DateTime(2023, 10, 1, 12, 20, 0) }, new Activity { UserId = \\"user1\\", Timestamp = new DateTime(2023, 10, 1, 12, 25, 0) } }; TimeSpan timeSpan = TimeSpan.FromMinutes(10); List<string> result = GetActiveUsers(activities, 3, timeSpan); // [\\"user1\\"] ``` ```python activities = [ Activity(\\"user1\\", datetime(2023, 10, 1, 12, 0)), Activity(\\"user1\\", datetime(2023, 10, 1, 12, 5)), Activity(\\"user2\\", datetime(2023, 10, 1, 12, 10)), Activity(\\"user1\\", datetime(2023, 10, 1, 12, 15)), Activity(\\"user3\\", datetime(2023, 10, 1, 12, 20)), Activity(\\"user1\\", datetime(2023, 10, 1, 12, 25)) ] time_span = timedelta(minutes=10) result = get_active_users(activities, 3, time_span) # [\\"user1\\"] ``` Ensure the activities are sorted by timestamp and handle cases where there are consecutive activities by a user within the specified time span correctly.","solution":"from datetime import datetime, timedelta from collections import defaultdict, deque class Activity: def __init__(self, user_id, timestamp): self.user_id = user_id self.timestamp = timestamp def get_active_users(activities, activity_threshold, time_span): # Sort activities by timestamp activities.sort(key=lambda x: x.timestamp) # Dictionary to store deque of timestamps for each user user_activities = defaultdict(deque) active_users = set() for activity in activities: user_id = activity.user_id timestamp = activity.timestamp # Add current timestamp to user activity log user_activities[user_id].append(timestamp) # Remove activities outside of the time_span window while user_activities[user_id] and (timestamp - user_activities[user_id][0] > time_span): user_activities[user_id].popleft() # Check if user meets the threshold if len(user_activities[user_id]) >= activity_threshold: active_users.add(user_id) return list(active_users)"},{"question":"Varun is a farmer who is trying to maximize the product of his crop yield. He has an array of crop yields for different sections of his farm, where each element in the array represents the yield from a specific section. Varun can choose any contiguous subarray (comprising at least one section) and rotate it any number of times (including zero). You are to help Varun figure out the maximum product of all possible subarrays after rotation. Rotating a subarray means shifting each of its elements to the left by one position, and moving the first element to the end of the subarray. For example, rotating the subarray [1, 3, 2] results in [3, 2, 1]. ----Input---- First line will contain integer N denoting the number of sections in the farm. Second line will contain N integers denoting the crop yields of each section. ----Output---- The maximum product of a subarray after any possible rotations. ----Constraints---- 1 <= N <= 100000 1 <= yield[i] <= 10000 ----Example---- Input: 6 1 2 3 4 5 6 Output: 720 Explanation: All possible subarrays of the array [1, 2, 3, 4, 5, 6] can be rotated. The subarray [1, 2, 3, 4, 5, 6] itself yields the maximum product 1 * 2 * 3 * 4 * 5 * 6 = 720 when not rotated. No other subarray or rotation provides a higher product. Hence, the answer is 720.","solution":"def max_subarray_product(yield_list): def max_product_of_subarray(subarray): max_prod = float(\'-inf\') n = len(subarray) for i in range(n): current_prod = 1 for j in range(n): current_prod *= subarray[(i + j) % n] max_prod = max(max_prod, current_prod) return max_prod n = len(yield_list) max_product = float(\'-inf\') for start in range(n): for end in range(start + 1, n + 1): subarray = yield_list[start:end] max_product = max(max_product, max_product_of_subarray(subarray)) return max_product"},{"question":"Write a function `find_word_combinations(target, word_list)` which takes two arguments: a string `target` and a list of strings `word_list`. The function should return the number of unique ways to construct the `target` string by concatenating words from `word_list` (each word can be used multiple times). Ensure to follow the example format provided: # Example 1: ```python target = \\"abcdef\\" word_list = [\\"ab\\", \\"abc\\", \\"cd\\", \\"def\\", \\"abcd\\"] find_word_combinations(target, word_list) == 1 ``` - Explanation: The target \\"abcdef\\" can be constructed as \\"abc\\" + \\"def\\". # Example 2: ```python target = \\"purple\\" word_list = [\\"purp\\", \\"p\\", \\"ur\\", \\"le\\", \\"purpl\\"] find_word_combinations(target, word_list) == 2 ``` - Explanation: The target \\"purple\\" can be constructed as \\"purp\\" + \\"le\\" or \\"p\\" + \\"ur\\" + \\"p\\" + \\"le\\". # Example 3: ```python target = \\"enterapotentpot\\" word_list = [\\"a\\", \\"p\\", \\"ent\\", \\"enter\\", \\"ot\\", \\"o\\", \\"t\\"] find_word_combinations(target, word_list) == 4 ``` - Explanation: The target \\"enterapotentpot\\" can be constructed in 4 ways with the given word list. # Constraints: - The length of `target` should not exceed 1000 characters. - The list `word_list` will have at most 50 elements, with lengths not exceeding 100 characters each. This problem can typically be approached using dynamic programming or recursion with memoization to efficiently handle the constraints. Happy coding!","solution":"def find_word_combinations(target, word_list): cache = {} def helper(sub_target): if sub_target in cache: return cache[sub_target] if sub_target == \\"\\": return 1 total_count = 0 for word in word_list: if sub_target.startswith(word): suffix = sub_target[len(word):] count_for_suffix = helper(suffix) total_count += count_for_suffix cache[sub_target] = total_count return total_count return helper(target)"},{"question":"# Background Caesar Cipher is one of the simplest encryption techniques where each letter in the plaintext is shifted a certain number of places down or up the alphabet. For this problem, you will be implementing both the encryption and decryption mechanism. # Problem Description Implement the class `CaesarCipher` with the following methods: 1. `__init__(self, shift: int)`: Initializes the cipher with a given shift. 2. `encrypt(self, text: str) -> str`: Encrypts the `text` using the initialized shift. The function should preserve the case of each letter and ignore non-alphabetic characters. 3. `decrypt(self, text: str) -> str`: Decrypts the `text` using the initialized shift. The function should preserve the case of each letter and ignore non-alphabetic characters. For example, with a shift of 3: - `a` becomes `d` - `y` becomes `b` - `Z` becomes `C` # Constraints * `shift` is an integer and can be any value (positive, negative, or zero). * The text can contain: * Uppercase letters (`A`-`Z`) * Lowercase letters (`a`-`z`) * Non-alphabetic characters (which should be ignored during both encryption and decryption) * The length of `text` will be at most `10^4`. # Examples ```python cipher = CaesarCipher(3) assert cipher.encrypt(\\"Hello, World!\\") == \\"Khoor, Zruog!\\" assert cipher.decrypt(\\"Khoor, Zruog!\\") == \\"Hello, World!\\" cipher = CaesarCipher(1) assert cipher.encrypt(\\"Python 3.9!\\") == \\"Qzuipo 3.9!\\" assert cipher.decrypt(\\"Qzuipo 3.9!\\") == \\"Python 3.9!\\" ``` # Important Notes 1. If the shift moves past `z`, it should wrap around to `a`. 2. If the shift moves past `a` in the negative direction, it should wrap around to `z`. 3. The ciphertext should maintain the case of the original letters. 4. Non-alphabetic characters should not be modified. By following these guidelines, you will implement a functional Caesar Cipher that can both encrypt and decrypt messages while preserving the integrity of the case and non-alphabetic characters.","solution":"class CaesarCipher: def __init__(self, shift: int): self.shift = shift def encrypt(self, text: str) -> str: return self._shift_text(text, self.shift) def decrypt(self, text: str) -> str: return self._shift_text(text, -self.shift) def _shift_text(self, text: str, shift: int) -> str: result = [] for char in text: if char.isalpha(): shift_amount = shift % 26 if char.islower(): shifted_char = chr((ord(char) - ord(\'a\') + shift_amount) % 26 + ord(\'a\')) else: shifted_char = chr((ord(char) - ord(\'A\') + shift_amount) % 26 + ord(\'A\')) result.append(shifted_char) else: result.append(char) return \'\'.join(result)"},{"question":"Task Create a function `deepClone` that performs a deep clone of an object or an array. The function should handle nested objects and arrays, even when mixed together. The original input must remain unmodified. **Deep cloning** means that the cloned object or array should not share any references to nested objects or arrays with the original. Changes to the cloned version must not affect the original structure and vice-versa. Example: ```python input_obj = { \'a\': 1, \'b\': [2, 3, {\'c\': 4}], \'d\': {\'e\': 5, \'f\': [6, 7], \'g\': {\'h\': 8}} } cloned_obj = deepClone(input_obj) cloned_obj[\'b\'][2][\'c\'] = 42 cloned_obj[\'d\'][\'g\'][\'h\'] = 99 print(input_obj) # should output: { # \'a\': 1, # \'b\': [2, 3, {\'c\': 4}], # \'d\': {\'e\': 5, \'f\': [6, 7], \'g\': {\'h\': 8}} # } print(cloned_obj) # should output: { # \'a\': 1, # \'b\': [2, 3, {\'c\': 42}], # \'d\': {\'e\': 5, \'f\': [6, 7], \'g\': {\'h\': 99}} # } ``` Follow these guidelines to implement `deepClone`: 1. The function should be able to handle arbitrary levels of nested objects and arrays. 2. The input object or array should remain unmodified after deep cloning. 3. Non-object, non-array properties (e.g., numbers, strings) should be cloned correctly. 4. The function should be able to handle edge cases, such as empty objects or arrays. Example Cases: ```python # Basic nested structure input_data = [1, {\'a\': 2, \'b\': [3, 4]}, 5] cloned_data = deepClone(input_data) cloned_data[1][\'b\'][0] = 99 print(input_data) # should output: [1, {\'a\': 2, \'b\': [3, 4]}, 5] print(cloned_data) # should output: [1, {\'a\': 2, \'b\': [99, 4]}, 5] # Multilevel nested structure input_data = {\'x\': [1, {\'y\': [2, [3]]}], \'z\': 4} cloned_data = deepClone(input_data) cloned_data[\'x\'][1][\'y\'][1][0] = 42 print(input_data) # should output: {\'x\': [1, {\'y\': [2, [3]]}], \'z\': 4} print(cloned_data) # should output: {\'x\': [1, {\'y\': [2, [42]]}], \'z\': 4} ``` **Points to Note:** - Do not use libraries or built-in functions to achieve deep cloning (e.g., `copy.deepcopy` in Python). - Write your own logic to recursively clone nested structures. - Thoroughly test the function with various nested combinations of objects and arrays.","solution":"def deepClone(obj): Perform a deep clone of an object or an array. Parameters: obj (any): The object or array to be cloned. Returns: any: A deep clone of the input object or array. if isinstance(obj, dict): return {key: deepClone(value) for key, value in obj.items()} elif isinstance(obj, list): return [deepClone(item) for item in obj] else: return obj"},{"question":"You are given a list of integers that represents the number of candies in each bag. The game is to distribute these candies among k children in such a way that every child gets exactly the same number of candies and there are no candies left undistributed. Determine the maximum number of children that can equally receive candies. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of bags. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the number of candies in each bag. -----Output----- Output a single integer — the maximum number of children that can equally receive candies. -----Examples----- Input 5 10 20 30 40 50 Output 5 Input 4 5 5 5 5 Output 4 -----Note----- In the first example, the total number of candies is 150, which can be distributed among 5 children equally, giving each child 30 candies. In the second example, there are 20 candies in total, which can be distributed among 4 children, giving each child 5 candies.","solution":"def max_children_to_receive_candies(n, candies): Given a list of integers representing the number of candies in each bag, determine the maximum number of children that can equally receive candies without any candy left undistributed. :param n: Number of bags :param candies: List of integers denoting candies in each bag :return: Maximum number of children that can equally receive candies total_candies = sum(candies) # Find the maximum number of children such that total_candies is divisible by that number max_children = n while total_candies % max_children != 0: max_children -= 1 return max_children"},{"question":"Complete the function that takes a list of integers and returns the list with duplicates removed and the remaining elements sorted in ascending order. Usage example: ```python remove_duplicates_and_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) # Output: [1, 2, 3, 4, 5, 6, 9] ```","solution":"def remove_duplicates_and_sort(lst): Remove duplicates from the list and return the remaining elements sorted in ascending order. Args: lst (list): List of integers. Returns: list: Sorted list of integers with duplicates removed. return sorted(set(lst))"},{"question":"Task Write a function that accepts a list of integers and returns a new list containing only the integers that are prime numbers. # Definition: A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Examples of prime numbers are 2, 3, 5, 7, 11, etc. # Input: - A list of integers. # Output: - A list of prime numbers found in the input list, in the order they occur. # Example: ```python [10, 15, 2, 3, 4, 7, 8] => [2, 3, 7] [1, 21, 23, 29, 16] => [23, 29] [4, 6, 8, 9, 10] => [] ``` # Note: - The input list can contain negative numbers, zero, and one, but they should not be included in the resulting list as they are not prime numbers. - If there are no prime numbers in the input list, return an empty list. Please upvote and enjoy!","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of all prime numbers in the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"=====Problem Statement===== You are organizing an event where participants are grouped into teams of varying sizes. To ensure the teams are well-balanced, you need to determine the team with the maximum total skill level. Each team is represented by a list of integers where each integer denotes the skill level of a team member. Write a program to find the team with the highest total skill level. =====Input Format===== The first line contains an integer t, the number of teams. The following t lines each contain a sequence of integers separated by spaces, representing the skill levels of the members in each team. =====Constraints===== 1 ≤ t ≤ 5 1 ≤ number of members in a team ≤ 10 -100 ≤ skill level ≤ 100 =====Output Format===== Print the total skill level of the team with the highest combined skill. If there are multiple teams with the same skill level, print the skill level only once.","solution":"def highest_skill_team(t, teams): Returns the highest total skill level among the given teams. Parameters: t (int): Number of teams teams (list of list of int): Skill levels of the teams Returns: int: The total skill level of the team with highest combined skill max_skill = float(\'-inf\') # Initialize with the lowest possible value for team in teams: total_skill = sum(team) if total_skill > max_skill: max_skill = total_skill return max_skill"},{"question":"# Task Write a function that checks if there is any permutation of a given string that is also a palindrome. A string is a palindrome if it reads the same forwards and backwards. # Examples For `s = \\"civic\\"`, the result should be `true` because it itself is a palindrome. For `s = \\"ivicc\\"`, the result should be `true` because one of its permutations (\\"civic\\") is a palindrome. For `s = \\"hello\\"`, the result should be `false` because none of its permutations form a palindrome. # Input/Output - `[input]` string `s` - A non-empty string `1 <= s.length <= 1000` with only lowercase English letters. - `[output]` boolean - Return `true` if any permutation of the string forms a palindrome, and `false` otherwise.","solution":"def can_form_palindrome(s): Returns True if any permutation of the string forms a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if there is at most one character with an odd number of occurrences return odd_count <= 1"},{"question":"You are given an array of integers A of length N. You need to perform the following operations on the array: - Update the value at a specified index to a new value. - Calculate the sum of elements between two specified indices (inclusive). # Input - The first line contains two space-separated integers N (length of the array) and Q (number of queries). - The second line contains N space-separated integers representing the initial elements of the array. - Each of the next Q lines contains one of the following types of queries: - `1 i x` - Update the element at index `i` to value `x`. - `2 l r` - Print the sum of elements from index `l` to index `r` inclusive. # Output For each query of the second type, print the sum of elements from index `l` to index `r` inclusive. # Constraints - 1 leq N, Q leq 10^5 - 1 leq A[i], x leq 10^9 - 1 leq l, r, i leq N # Sample Input ``` 5 6 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 5 20 2 4 5 ``` # Sample Output ``` 6 14 39 24 ``` # Explanation - Initially, the array is `[1, 2, 3, 4, 5]`. - The first query asks for the sum of elements from index 1 to 3: `1 + 2 + 3 = 6`. - The second query updates the element at index 2 to 10: `[1, 10, 3, 4, 5]`. - The third query asks for the sum of elements from index 1 to 3: `1 + 10 + 3 = 14`. - The fourth query asks for the sum of elements from index 2 to 5: `10 + 3 + 4 + 5 = 22`. - The fifth query updates the element at index 5 to 20: `[1, 10, 3, 4, 20]`. - The sixth query asks for the sum of elements from index 4 to 5: `4 + 20 = 24`.","solution":"def process_queries(n, q, arr, queries): result = [] for query in queries: if query[0] == 1: # Update the element at index i to x i, x = query[1] - 1, query[2] arr[i] = x elif query[0] == 2: # Calculate the sum of elements from index l to r l, r = query[1] - 1, query[2] - 1 result.append(sum(arr[l:r + 1])) return result"},{"question":"A software company has an inventory system that keeps track of the stock levels of various products. Each product has a unique ID and a stock level associated with it. They want to implement a system that can handle the following operations efficiently: # Types of Operations Type 0 Operation: Restock(P, Q) This operation increases the stock level of product ID P by Q units. Type 1 Operation: Purchase(P, Q) This operation reduces the stock level of product ID P by Q units. If the stock level of P would drop below 0, it should remain 0. Type 2 Operation: Query(P) This operation returns the current stock level of product ID P. # Input Format The first line of input consists of an integer N, the number of initial products. The second line contains N space-separated integers, where each integer represents the initial stock level of the corresponding product ID (from 1 to N). The third line contains an integer M, the number of operations to be performed. Each of the next M lines contains one of the operations described above in the following format: - For Type 0: `0 P Q` - For Type 1: `1 P Q` - For Type 2: `2 P` # Output Format For each Type 2 operation, output the stock level of the queried product ID. # Constraints - 1 ≤ N ≤ 100,000 - 1 ≤ Initial stock level ≤ 10,000 - 1 ≤ M ≤ 100,000 - 1 ≤ P ≤ N - 1 ≤ Q ≤ 10,000 # Example Input ``` 5 10 20 30 40 50 6 0 2 5 1 3 10 2 3 2 1 1 5 60 2 5 ``` Output ``` 20 10 0 ``` # Explanation 1. Initially, stock levels are [10, 20, 30, 40, 50]. 2. After `0 2 5`, stock levels are [10, 25, 30, 40, 50]. 3. After `1 3 10`, stock levels are [10, 25, 20, 40, 50]. 4. Querying product 3, the stock level is 20. 5. Querying product 1, the stock level is 10. 6. After `1 5 60`, stock levels are [10, 25, 20, 40, 0]. 7. Querying product 5, the stock level is 0.","solution":"def inventory_management_system(N, initial_stock, M, operations): Inventory management system that performs restock, purchase, and query operations. :param N: Number of initial products :param initial_stock: List of initial stock levels :param M: Number of operations to be performed :param operations: List of operations to be performed :return: List of results for each query operation # Initialize the stock as per the initial stock levels stock = initial_stock.copy() results = [] for operation in operations: if operation[0] == 0: # Restock operation P, Q = operation[1], operation[2] stock[P - 1] += Q elif operation[0] == 1: # Purchase operation P, Q = operation[1], operation[2] stock[P - 1] = max(stock[P - 1] - Q, 0) elif operation[0] == 2: # Query operation P = operation[1] results.append(stock[P - 1]) return results"},{"question":"Write a function that takes a string containing a mathematical expression and returns the result of the expression. The input string will consist of digits, plus signs (+), minus signs (-), and spaces. The function should handle addition and subtraction operations, and it should properly handle order of operations. For example: ``` evaluate_expression(\\"12 + 5 - 3\\") => 14 evaluate_expression(\\"10 + 2 - 7 + 5\\") => 10 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of digits, plus signs (+), minus signs (-), and spaces. Handles addition and subtraction. tokens = expression.replace(\' \', \'\') total = 0 current_number = 0 sign = 1 for char in tokens: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'+\': total += sign * current_number current_number = 0 sign = 1 elif char == \'-\': total += sign * current_number current_number = 0 sign = -1 total += sign * current_number return total"},{"question":"You are given a sorted array of integers and a target value. Write a function that finds the starting and ending position of the target value in the array. If the target is not found in the array, return `[-1, -1]`. The function signature should be: ```python def searchRange(nums: List[int], target: int) -> List[int]: ``` # Example: Given the array `nums = [5, 7, 7, 8, 8, 10]` and the target value `target = 8`: `searchRange(nums, target)` should return `[3, 4]`. Given the array `nums = [5, 7, 7, 8, 8, 10]` and the target value `target = 6`: `searchRange(nums, target)` should return `[-1, -1]`. # Constraints: - The array is sorted in ascending order. - The array can contain duplicates. - The function should have an expected runtime complexity of O(log n).","solution":"from typing import List def searchRange(nums: List[int], target: int) -> List[int]: def findLeft(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid - 1 return left def findRight(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 return right left, right = findLeft(nums, target), findRight(nums, target) if left <= right and left < len(nums) and nums[left] == target and nums[right] == target: return [left, right] else: return [-1, -1]"},{"question":"Alex loves exploring new places and is currently traveling across a city that consists of N unique places. Each place is connected to exactly two other places with direct roads, forming a single cycle. He starts his journey at place S and wants to visit every other place exactly once before returning to place S. However, Alex has a specific way of traveling: he will only go to the next place if the distance to that place does not exceed a given threshold D. The distance between any two directly connected places is provided, and Alex always prefers to travel in a clockwise direction from his starting point. Your task is to determine the minimum distance Alex will travel to complete his journey and return to place S. If it is not possible for Alex to visit all places under the given constraint, return -1. Input - The first line contains three space-separated integers N (number of places), S (starting place, 1-based index), and D (distance threshold). - The second line contains N space-separated integers where the i-th integer represents the distance between place i and place (i % N) + 1 in the cycle. Output - Print the minimum distance Alex will travel if it is possible to complete the journey, otherwise print -1. Constraints - 3 ≤ N ≤ 10^5 - 1 ≤ S ≤ N - 1 ≤ D ≤ 10^9 - 1 ≤ distance ≤ 10^4 for each distance between places Sample Input 1 5 3 15 1 2 3 4 5 Sample Output 1 15 Explanation 1 Alex starts at place 3. The distance to the next places in clockwise order is [3, 4, 5, 1, 2]. Since all distances are within the threshold D = 15, Alex can complete his journey, and the total distance traveled is 3 + 4 + 5 + 1 + 2 = 15. Sample Input 2 4 1 3 5 6 2 3 Sample Output 2 -1 Explanation 2 Alex starts at place 1. The distance to the next places in clockwise order is [5, 6, 2, 3]. The first travel distance (5) exceeds the threshold D = 3, making it impossible to complete the journey as per Alex\'s traveling conditions. Therefore, the output is -1.","solution":"def minimum_distance_to_complete_journey(N, S, D, distances): Determines the minimum distance Alex will travel to complete his journey and return to place S, or return -1 if it is not possible within the given constraints. :param N: Number of places. :param S: Starting place (1-based index). :param D: Distance threshold. :param distances: List of distances between consecutive places in the cycle :return: Minimum distance traveled to complete the journey or -1 if not possible. # Convert the starting place from 1-based index to 0-based index start_index = S - 1 # Traverse the cycle in a clockwise direction starting from S total_distance = 0 for i in range(N): current_distance = distances[(start_index + i) % N] if current_distance > D: return -1 total_distance += current_distance return total_distance"},{"question":"Develop a function that takes an array of integers and returns the highest product you can obtain by multiplying any three numbers. Examples: ``` highestProduct([1, 2, 3, 4]) --> 24 highestProduct([-10, -10, 1, 3, 2]) --> 300 highestProduct([0, -1, 3, 100, 70, 50]) --> 350000 ``` Ensure your solution works efficiently for large input arrays.","solution":"def highestProduct(nums): Returns the highest product that can be obtained by multiplying any three numbers from the input list. if len(nums) < 3: raise ValueError(\\"Input list must have at least 3 numbers\\") nums.sort() # The highest product can be from the top three positive numbers # or from the two most negative numbers and the top positive number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Suppose you have a list of integers where every integer appears exactly three times, except for one integer which appears exactly once. Write an algorithm to find the integer that appears only once. Note: The list contains at least one integer that appears only once, and every other integer appears exactly three times. You may not use extra space and the algorithm should run in linear time. Example Input: [2, 2, 3, 2] Output: 3 Input: [0, 1, 0, 1, 0, 1, 99] Output: 99","solution":"def find_single_number(nums): Finds the integer that appears only once in a list where all other integers appear exactly three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"# Task Write a function to find the longest non-decreasing subsequence in a given list of integers. A subsequence is obtained by deleting some or none of the elements from the list without changing the order of the remaining elements. For example: ``` longestNonDecreasingSubsequence([5, 1, 3, 4, 2, 3, 4, 5, 1]) ==> [1, 3, 4, 4, 5] longestNonDecreasingSubsequence([5, 4, 3, 2, 1]) ==> [5] longestNonDecreasingSubsequence([1, 1, 1, 1, 1]) ==> [1, 1, 1, 1, 1] longestNonDecreasingSubsequence([]) ==> [] ``` If there are multiple subsequences of the same length, return any one of them.","solution":"def longestNonDecreasingSubsequence(arr): if not arr: return [] n = len(arr) dp = [1] * n prev_index = [-1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_index[i] = j max_length = max(dp) max_index = dp.index(max_length) result = [] while max_index != -1: result.append(arr[max_index]) max_index = prev_index[max_index] return result[::-1]"},{"question":"=====Function Descriptions===== collections.Counter() The collections.Counter() in Python provides a quick way to count occurrences of elements in a list. It returns a dictionary where elements are the keys, and their counts are the values. Code >>> from collections import Counter >>> Counter([\'a\', \'b\', \'c\', \'a\', \'b\', \'a\']) Counter({\'a\': 3, \'b\': 2, \'c\': 1}) defaultdict() The expression defaultdict() is a dictionary-like object which provides all methods provided by a dictionary. It takes a default_factory as an argument, which provides the default value for the key that does not exist. Code >>> from collections import defaultdict >>> d = defaultdict(int) >>> d[\'a\'] += 1 >>> d[\'a\'] 1 >>> d[\'b\'] 0 =====Problem Statement===== You are given a list of strings. Your task is to find the most common word in the list. If there are multiple words with the highest frequency, return the lexicographically smallest one. =====Input Format===== A single line of input containing a list of strings separated by spaces. =====Constraints===== 1<= len(list of strings) <=1000 1<= len(each string) <=20 =====Output Format===== Print the most common word in the list. If there is a tie, print the lexicographically smallest word. =====Sample Input===== apple orange banana apple orange apple =====Sample Output===== apple =====Explanation===== In the given sample, \'apple\' occurs 3 times, \'orange\' occurs 2 times, and \'banana\' occurs 1 time. Hence, \'apple\' is the most frequent word.","solution":"from collections import Counter def most_common_word(words): Returns the most common word in the list of words. If there are multiple words with the highest frequency, returns the lexicographically smallest one. word_count = Counter(words) max_frequency = max(word_count.values()) max_words = [word for word, count in word_count.items() if count == max_frequency] return min(max_words)"},{"question":"In a land far away, there are mystical trees that bear magical fruits. Each tree produces fruits at a specific rate, and these rates differ from tree to tree. The current king wants to collect fruits from all the trees, but there\'s a twist. He must decide the minimum number of minutes required to collect exactly K magical fruits from the trees. Each tree produces fruits every minute, and the number of fruits produced is given by an array where the ith element represents the number of fruits produced by the ith tree per minute. The king can collect any amount of fruits each minute, but he wants to do it in the minimum time possible. Your task is to determine the minimum number of minutes required to collect exactly K magical fruits. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and K, where N is the number of trees, and K is the number of magical fruits the king needs to collect. - The second line contains N integers, where the ith integer indicates the number of fruits produced by the ith tree per minute. -----Output----- For each test case, print the minimum number of minutes required to collect exactly K magical fruits. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 10^6 - 1 ≤ fruits produced by each tree per minute ≤ 1000 -----Example----- Input: 2 3 10 2 3 5 2 7 4 1 Output: 2 2 -----Explanation----- Example case 1: First case has 3 trees producing 2, 3, and 5 fruits per minute respectively. To collect exactly 10 fruits, in the first minute, the king can collect 5 + 3 + 2 = 10 fruits. So, it takes exactly 1 minute. Example case 2: First minute, the king can collect 4 fruits. In the second minute, another 4 fruits, making a total of 8. So, it takes 2 minutes (collecting 4 fruits each minute) to accumulate at least 7 fruits.","solution":"def min_minutes_to_collect_fruits(T, test_cases): results = [] for case in test_cases: N, K, fruits_per_minute = case max_fruits_per_minute = sum(fruits_per_minute) # Maximum fruits that can be collected in 1 minute # If max possible collection per minute is greater than or equal to K, only 1 minute needed if K <= max_fruits_per_minute: results.append(1) continue # Binary search to find the minimum minutes left, right = 1, K // min(fruits_per_minute) + 1 # Right bound can be optimistically reduced while left < right: mid = (left + right) // 2 total_fruits = sum(f * mid for f in fruits_per_minute) if total_fruits >= K: right = mid else: left = mid + 1 results.append(left) return results"},{"question":"In this exercise, you will practice writing functions to manipulate strings and then create corresponding doctests for them. # Part 1: Writing String Manipulation Functions You need to write three functions: 1. `to_uppercase`: This function takes a string as input and returns the string converted to uppercase. If the input is an empty string, return an empty string. Example: ```python def to_uppercase(s): >>> to_uppercase(\\"hello\\") \'HELLO\' >>> to_uppercase(\\"\\") \'\' return s.upper() ``` 2. `capitalize_each_word`: This function takes a string as input and returns the string with the first letter of each word capitalized. Words are separated by spaces. If the input is an empty string, return an empty string. Example: ```python def capitalize_each_word(s): >>> capitalize_each_word(\\"hello world\\") \'Hello World\' >>> capitalize_each_word(\\"\\") \'\' return \' \'.join(word.capitalize() for word in s.split()) ``` 3. `reverse_words`: This function takes a string as input and returns the string with the order of words reversed. Words are separated by spaces. If the input is an empty string, return an empty string. Example: ```python def reverse_words(s): >>> reverse_words(\\"hello world\\") \'world hello\' >>> reverse_words(\\"\\") \'\' return \' \'.join(s.split()[::-1]) ``` # Part 2: Writing Doctests For each of the three functions you implemented above, write **EXACTLY TWO** doctests. These tests should clearly demonstrate the function\'s expected behavior, including edge cases where appropriate. # Additional Notes: 1. Make sure that the doctests are formatted correctly and will work seamlessly with the `doctest` module. 2. You can refer to the official Python documentation on doctesting here: https://docs.python.org/3/library/doctest.html 3. Pay attention to details like spacing and ensure there are no unnecessary characters in your doctests. Example usage of `doctest` module: ```python if __name__ == \\"__main__\\": import doctest doctest.testmod() ``` Good luck and happy coding!","solution":"def to_uppercase(s): Converts a string to uppercase. >>> to_uppercase(\\"hello\\") \'HELLO\' >>> to_uppercase(\\"\\") \'\' return s.upper() def capitalize_each_word(s): Capitalizes the first letter of each word in a string. >>> capitalize_each_word(\\"hello world\\") \'Hello World\' >>> capitalize_each_word(\\"\\") \'\' return \' \'.join(word.capitalize() for word in s.split()) def reverse_words(s): Reverses the order of words in a string. >>> reverse_words(\\"hello world\\") \'world hello\' >>> reverse_words(\\"\\") \'\' return \' \'.join(s.split()[::-1])"},{"question":"In an RPG game, a player receives points when defeating an enemy. These points accumulate and determine the player\'s level. The player starts at level 1 and can level up by reaching specific thresholds of accumulated points. The thresholds and associated levels are as follows: Accumulated points | Level -------------------|------ 0 - 99 | 1 100 - 199 | 2 200 - 299 | 3 300 - 499 | 4 500 - 799 | 5 800 - 1299 | 6 1300 - 1999 | 7 2000 - 2999 | 8 3000 - 4999 | 9 5000 or more | 10 Given the number of points a player has accumulated, determine the player\'s level. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains an integer P indicating the accumulated points of a player. -----Output----- For each test case, print a single integer representing the player\'s level. -----Constraints----- - 1 le T le 1000 - 0 le P le 10^7 -----Example Input----- 3 50 450 3001 -----Example Output----- 1 4 9 -----Explanation----- Example case 1: The player has 50 points, which falls within the first range (0 - 99). Therefore, the player\'s level is 1. Example case 2: The player has 450 points, which falls within the fourth range (300 - 499). Therefore, the player\'s level is 4. Example case 3: The player has 3001 points, which falls within the ninth range (3000 - 4999). Therefore, the player\'s level is 9.","solution":"def determine_level(points): Given the accumulated points, return the player\'s level. if points >= 5000: return 10 elif points >= 3000: return 9 elif points >= 2000: return 8 elif points >= 1300: return 7 elif points >= 800: return 6 elif points >= 500: return 5 elif points >= 300: return 4 elif points >= 200: return 3 elif points >= 100: return 2 else: return 1 def process_test_cases(test_cases): Given a list of test cases with accumulated points, return a list of player levels. results = [] for points in test_cases: results.append(determine_level(points)) return results"},{"question":"A word is said to be an \\"anagram word\\" if it can be formed by rearranging the letters of another word while using all the original letters exactly once. For example: - \\"binary\\" can be rearranged to form \\"brainy\\". - \\"listen\\" can be rearranged to form \\"silent\\". - \\"hello\\" cannot be rearranged to form any other valid English word. Your task is to write a function `anagram_words` that checks if two given words are anagrams of each other. Both input words will be lowercase and contain only English letters. The function should return `True` if the words are anagrams and `False` otherwise. # Examples ```python anagram_words(\\"binary\\", \\"brainy\\") # Returns: True anagram_words(\\"listen\\", \\"silent\\") # Returns: True anagram_words(\\"hello\\", \\"world\\") # Returns: False anagram_words(\\"triangle\\", \\"integral\\") # Returns: True anagram_words(\\"apple\\", \\"pabble\\") # Returns: False ``` # Function Signature ```python def anagram_words(word1: str, word2: str) -> bool: pass ```","solution":"def anagram_words(word1: str, word2: str) -> bool: Checks if two given words are anagrams of each other. Args: word1 (str): First word for comparison. word2 (str): Second word for comparison. Returns: bool: True if the words are anagrams, False otherwise. return sorted(word1) == sorted(word2)"},{"question":"Task Write a function that receives a date string in format \\"YYYY-MM-DD\\" and returns the number of days that passed since the beginning of the year until this date. If the input date is invalid (e.g., wrong format, non-existent date), return `None`. Examples ``` days_since_start_of_year(\\"2023-03-15\\") == 73 days_since_start_of_year(\\"2021-12-31\\") == 365 days_since_start_of_year(\\"2020-02-29\\") == 60 days_since_start_of_year(\\"2021-02-29\\") == None ```","solution":"from datetime import datetime def days_since_start_of_year(date_str): Returns the number of days that passed since the beginning of the year until the given date. Arguments: - date_str: a string representing the date in \\"YYYY-MM-DD\\" format Returns: - The number of days since the start of the year, or None if the date is invalid. try: date = datetime.strptime(date_str, \'%Y-%m-%d\') start_of_year = datetime(date.year, 1, 1) delta = date - start_of_year return delta.days + 1 except ValueError: return None"},{"question":"You are given an array of non-negative integers representing the heights of vertical lines drawn such that the two endpoints of each line are at (i, 0) and (i, height[i]) where i is the index. Write a function that finds the indices of two lines that together, with the x-axis, forms a container such that the container contains the most water. Return the maximum amount of water a container can store. Note: You may not slant the container, and the container should be shaped by two different lines. Example 1: Input: [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The lines at index 1 and 8 form together with the x-axis to contain the most water (min(8,7) * (8-1) = 49). Example 2: Input: [1,1] Output: 1 Explanation: The lines at index 0 and 1 can contain the most water (min(1,1) * (1-0) = 1). Example 3: Input: [4,3,2,1,4] Output: 16 Explanation: The lines at index 0 and 4 form together with the x-axis to contain the most water (min(4,4) * (4-0) = 16). Example 4: Input: [1,2,1] Output: 2 Explanation: The lines at index 0 and 2 form together with the x-axis to contain the most water (min(1,1) * (2-0) = 2).","solution":"def max_area(heights): Returns the maximum amount of water a container can store given a list of heights. left, right = 0, len(heights) - 1 max_water = 0 while left < right: # Calculate the amount of water the current container can store height = min(heights[left], heights[right]) width = right - left current_water = height * width # Update the maximum water amount if the current container stores more water max_water = max(max_water, current_water) # Move the pointers if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Create a function that takes two arguments: a string containing a mathematical expression and a dictionary representing variable values. The function should evaluate the expression using the variable values provided. The expressions will only contain variables (represented by lowercase letters), digits, and the operators +, -, *, /, and parentheses. The input will be a valid mathematical expression. For example: ``` expression = \\"a + b - (c * d) / e\\" variables = {\\"a\\": 5, \\"b\\": 3, \\"c\\": 8, \\"d\\": 2, \\"e\\": 4} ``` The function should evaluate the expression using the provided variable values. In this case, it should return `5 + 3 - (8 * 2) / 4 = 5 + 3 - 16/4 = 5 + 3 - 4 = 4`. ``` eval_expression(expression, variables) ``` Inputs: - `expression` (string): A string containing a valid mathematical expression. - `variables` (dictionary): A dictionary where the keys are variable names, and the values are their corresponding numeric values. Output: - The function should return the result of the evaluated expression as a float or integer, depending on the expression. Example: ``` expression = \\"a + b - (c * d) / e\\" variables = {\\"a\\": 5, \\"b\\": 3, \\"c\\": 8, \\"d\\": 2, \\"e\\": 4} eval_expression(expression, variables) -> 4.0 expression = \\"x*y + z - w/(a+b)\\" variables = {\\"x\\": 2, \\"y\\": 3, \\"z\\": 1, \\"w\\": 12, \\"a\\": 1, \\"b\\": 2} eval_expression(expression, variables) -> 6.0 ```","solution":"def eval_expression(expression, variables): Evaluates a mathematical expression using the provided variable values. Parameters: expression (str): A string containing a valid mathematical expression. variables (dict): A dictionary where the keys are variable names, and the values are their corresponding numeric values. Returns: float: The result of the evaluated expression. for var, value in variables.items(): expression = expression.replace(var, str(value)) return eval(expression)"},{"question":"An online bookstore maintains an inventory system that handles various operations related to book stock management. Each book has a unique identifier (ID) and a stock count indicating the number of copies available. Your task is to implement the inventory system and handle operations associated with it. There will be 5 different types of operations: 1. **ADD Book**: Given a book ID and a quantity, add the quantity to the stock of that book. If the book does not exist, add a new entry for it. 2. **REMOVE Book**: Given a book ID and a quantity, decrease the quantity from the stock of that book. If the remaining quantity falls to zero or below, remove the book from the inventory. 3. **CHECK Stock**: Given a book ID, return the current stock quantity of that book. If the book is not present in inventory, return \\"NOT AVAILABLE\\". 4. **MAX Stock**: Return the book ID with the maximum stock quantity. If there are multiple books with the same maximum quantity, return the smallest ID. 5. **MIN Stock**: Return the book ID with the minimum stock quantity. If there are multiple books with the same minimum quantity, return the smallest ID. Your program needs to handle multiple operations provided by the users. -----Input:----- - The first line will contain N, the number of operations. - The next N lines contain the operations. - For type \\"ADD Book\\" and \\"REMOVE Book\\", there will be three space-separated values: the operation type (1 or 2), the book ID, and the quantity. - For type \\"CHECK Stock\\", \\"MAX Stock\\" and \\"MIN Stock\\", there will be one value: the operation type (3, 4, or 5). -----Output:----- For \\"CHECK Stock\\" operations, print the quantity or \\"NOT AVAILABLE\\". For \\"MAX Stock\\" and \\"MIN Stock\\" operations, print the book ID with the respective maximum or minimum stock. -----Constraints----- - 1 leq N leq 10^4 - 1 leq text{Book ID} leq 10^6 - 1 leq text{Quantity} leq 10^3 -----Sample Input----- 8 1 1001 50 1 1002 75 1 1001 25 3 1001 4 2 1002 50 3 1002 5 -----Sample Output----- 75 1002 25 1001 -----EXPLANATION:----- - ADD 50 to book ID 1001 (stock: 50). - ADD 75 to book ID 1002 (stock: 75). - ADD 25 to book ID 1001 (stock: 75). - CHECK Stock for book ID 1001 (stock: 75). - MAX Stock (book ID 1002 has maximum stock: 75). - REMOVE 50 from book ID 1002 (stock: 25). - CHECK Stock for book ID 1002 (stock: 25). - MIN Stock (book ID 1001 has minimum stock: 75).","solution":"class BookInventory: def __init__(self): self.inventory = {} def add_book(self, book_id, quantity): if book_id in self.inventory: self.inventory[book_id] += quantity else: self.inventory[book_id] = quantity def remove_book(self, book_id, quantity): if book_id in self.inventory: self.inventory[book_id] -= quantity if self.inventory[book_id] <= 0: del self.inventory[book_id] def check_stock(self, book_id): return self.inventory.get(book_id, \\"NOT AVAILABLE\\") def max_stock(self): if not self.inventory: return \\"NOT AVAILABLE\\" max_quantity = max(self.inventory.values()) max_books = [book_id for book_id, quantity in self.inventory.items() if quantity == max_quantity] return min(max_books) def min_stock(self): if not self.inventory: return \\"NOT AVAILABLE\\" min_quantity = min(self.inventory.values()) min_books = [book_id for book_id, quantity in self.inventory.items() if quantity == min_quantity] return min(min_books)"},{"question":"Write a function that takes a string as input and returns the length of the longest substring without repeating characters. Example: ```python solution(\\"abcabcbb\\") # should return 3 ``` ```Elixir Solution.longest_substring(\\"abcabcbb\\") # should return 3 ``` ```python solution(\\"bbbbb\\") # should return 1 ``` ```Elixir Solution.longest_substring(\\"bbbbb\\") # should return 1 ``` ```python solution(\\"pwwkew\\") # should return 3 ``` ```Elixir Solution.longest_substring(\\"pwwkew\\") # should return 3 ``` The function should ensure that the substring considered does not include any repeating characters.","solution":"def longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. start = 0 # starting index of the currently considered substring max_length = 0 # max length of substring found so far used_chars = {} # dictionary to store the most recent index of each character for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length"},{"question":"Given an array ( A_1, A_2, ldots, A_N ), find the maximum sum of any subarray of array ( A ). A subarray ( A[i, j] ), where ( 1 le i le j le N ) is a sequence of integers ( A_i, A_{i+1}, ldots, A_j ). You have to find the subarray ( A[i, j] ) with the maximum possible sum. -----Input----- - The first line of input contains an integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. - The first line of each test case contains a single integer ( N ) denoting the size of array. - The second line contains ( N ) space-separated integers ( A_1, A_2, ldots, A_N ) denoting the elements of the array. -----Output----- For each test case, output in a single line the required answer. -----Constraints----- - ( 1 le T le 5 ) - ( 1 le N le 10^5 ) - ( -10^9 le A_i le 10^9 ) -----Subtasks----- - Subtask 1 (20 points) : ( 1 le N le 100 ) - Subtask 2 (30 points) : ( 1 le N le 1000 ) - Subtask 3 (50 points) : Original constraints -----Sample Input:----- 2 4 -2 1 -3 4 5 1 2 3 4 5 -----Sample Output:----- 4 15 -----Explanation----- Example case 1: The subarray with the maximum sum is ( A[4, 4] = 4 ). Example case 2: The subarray with the maximum sum is ( A[1, 5] = 1 + 2 + 3 + 4 + 5 = 15 ).","solution":"def max_subarray_sum(num_cases, test_cases): results = [] for case in test_cases: N, array = case max_ending_here = max_so_far = array[0] for i in range(1, N): max_ending_here = max(array[i], max_ending_here + array[i]) max_so_far = max(max_so_far, max_ending_here) results.append(max_so_far) return results"},{"question":"Given an array of integers sorted in ascending order, convert it to a height balanced BST. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differ by more than 1. Example: Given the sorted array: [-10, -3, 0, 5, 9], One possible answer is: ``` 0 / -3 9 / / -10 5 ``` Note: You may assume that no duplicate values exist in the array.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedArrayToBST(nums): Converts a sorted array to a height balanced binary search tree (BST). if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sortedArrayToBST(nums[:mid]) root.right = sortedArrayToBST(nums[mid+1:]) return root"},{"question":"========== ========== A detective has a series of surveillance footage containing the location coordinates of a suspect at different timestamps on a city grid. The city is mapped on a 2-D plane with integer coordinates ranging from (0, 0) to (100, 100). The detective wants to determine if the suspect revisited any location during his movements. You are given the coordinates where a suspect was at M different timestamps: (x1, y1), (x2, y2), ..., (xM, yM). You need to identify if there is any point (xi, yi) for i ≤ M, which coincides with any other point (xj, yj) where j ≠ i. -----Input----- - The first line of the input contains a single integer Q denoting the number of test cases. - The first line of each test case contains a single integer M denoting the number of timestamps at which the suspect\'s coordinates are provided. - Each of the next M lines contains two space-separated integers xi and yi denoting the x and y coordinates of the suspect at the ith timestamp. -----Output----- For each test case, print a single line containing one string: \\"yes\\" (without quotes) if the suspect revisited any location during his movements, otherwise print \\"no\\" (without quotes). -----Constraints----- - 1 ≤ Q ≤ 50 - 2 ≤ M ≤ 100 - 0 ≤ xi, yi ≤ 100 - Coordinates (xi, yi) are integers. -----Example----- Input: 5 3 1 2 3 4 1 2 4 10 10 20 20 30 30 40 40 5 5 5 5 6 7 8 8 9 5 5 3 0 1 1 0 0 1 4 2 3 3 2 2 2 3 3 Output: yes no yes yes no -----Explanation----- Example 1: You can see that the suspect revisits the location (1, 2). Example 2: The suspect does not revisit any location. Example 3: The suspect revisits the location (5, 5).","solution":"def has_revisited_location(test_cases): results = [] for case in test_cases: M = case[0] coordinates = case[1] visited = set() revisit = \\"no\\" for coordinate in coordinates: if coordinate in visited: revisit = \\"yes\\" break visited.add(coordinate) results.append(revisit) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') Q = int(lines[0]) test_cases = [] index = 1 for _ in range(Q): M = int(lines[index]) coordinates = [] for j in range(1, M + 1): x, y = map(int, lines[index + j].split()) coordinates.append((x, y)) index += M + 1 test_cases.append((M, coordinates)) return test_cases def format_output(results): return \\"n\\".join(results) def process_input_output(input_text): test_cases = parse_input(input_text) results = has_revisited_location(test_cases) return format_output(results)"},{"question":"There is an ancient tradition of offering fruits in a temple. The tradition specifies that the fruits must be arranged in a specific pattern. Each day, the temple receives N types of fruits, and in accordance with the tradition, they must arrange these fruits in a way that no two adjacent fruits in the arrangement are of the same type. The temple priests have asked for your help to determine if it is possible to arrange the fruits in the specified pattern and if so, to provide at least one possible arrangement. -----Input----- The first line contains an integer N, representing the number of different types of fruits the temple receives. The second line contains N space-separated integers F[1], F[2], ..., F[N], where F[i] represents the number of fruits of the ith type. -----Output----- If it is possible to arrange the fruits in the specified pattern, output one possible arrangement of the fruits. If it is not possible to arrange the fruits in the specified pattern, output \\"Not possible\\". -----Constraints----- - 1 ≤ N ≤ 100,000 (10^5) - 1 ≤ F[i] ≤ 1,000,000 (10^6) for all integers i from 1 to N -----Example----- Input: 3 1 2 1 Output: 2 1 2 3 -----Explanation----- In the example, we have 3 types of fruits, with counts 1, 2, and 1 respectively. A possible arrangement is \\"2 1 2 3\\", where: - \'2\' denotes the second type of fruit. - \'1\' denotes the first type of fruit. - \'3\' denotes the third type of fruit. No two adjacent fruits are of the same type, hence the output satisfies the requirement.","solution":"import heapq from collections import Counter def arrange_fruits(N, F): if N == 1: return [1]*F[0] # Create a max-heap with negative counts because heapq in Python is a min-heap by default max_heap = [(-count, i+1) for i, count in enumerate(F)] heapq.heapify(max_heap) result = [] prev_count, prev_fruit = 0, 0 while max_heap: count, fruit = heapq.heappop(max_heap) result.append(fruit) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_fruit)) prev_count = count + 1 # Since count is negative, incrementing reduces its absolute value prev_fruit = fruit if len(result) != sum(F): return \\"Not possible\\" return result"},{"question":"Write a function `sortByFrequency(arr)` that takes a list of integers `arr` and returns a new list where the integers are sorted by the frequency of their occurrences in `arr`. If two integers have the same frequency, they should be sorted in ascending order. For example, given the list `[4, 5, 6, 5, 4, 3]`, the function should return `[3, 6, 4, 4, 5, 5]` because 3 and 6 appear once, and 4 and 5 appear twice, with 3 and 6 coming before 4 and 5 due to their ascending order.","solution":"from collections import Counter def sortByFrequency(arr): Takes a list of integers and returns a new list where the integers are sorted by the frequency of their occurrences. If two integers have the same frequency, they are sorted in ascending order. # Count the frequency of each integer in the array frequency = Counter(arr) # Sort the array first by frequency, and then by the integer value sorted_arr = sorted(arr, key=lambda x: (frequency[x], x)) return sorted_arr"},{"question":"A wizard in a fantasy kingdom needs to create a magical artifact called the \\"Orb of Wisdom\\". The Orb is constructed using smaller magical runes, represented as strings of lowercase and uppercase English letters. However, the wizard is facing a problem: the power of the Orb is maximized if it contains the most frequently occurring magical rune string. Given a list of n magical runes, the wizard must determine which rune string appears the most frequently. If there is a tie between multiple runes, the wizard should consider the lexicographically smallest rune string. Your task is to help the wizard by writing a program to find the most frequently occurring magical rune string, and if there is a tie, the lexicographically smallest one. ----Input---- The first line of the input contains an integer n, denoting the number of rune strings. Each of the next n lines contains a single string si, denoting a magical rune. It is guaranteed that each si consists only of lowercase or uppercase English alphabetical characters. ----Output---- Output a single line containing the most frequently occurring magical rune string. In case of a tie, output the lexicographically smallest string among those tied for the most occurrences. ----Constraints---- - 1 ≤ n ≤ 100000 - 1 ≤ |si| ≤ 100 ----Example---- Input: 7 abc xyz abc ABC def xyz abc Output: abc ----Explanation---- Among the provided runes, \\"abc\\" appears three times, more than any other rune. Hence, the output is \\"abc\\".","solution":"def most_frequent_rune(n, runes): from collections import Counter rune_count = Counter(runes) max_frequency = max(rune_count.values()) candidates = [rune for rune, count in rune_count.items() if count == max_frequency] return min(candidates)"},{"question":"Task: Write a function that receives a string containing a mix of alphabets and numbers. Your task is to sort the string such that all the alphabets come before the numbers, and both the alphabets and numbers are sorted in ascending order within their respective groups. The output should be a single sorted string. Examples: ``` \\"b3a1d2\\" => \\"abd123\\" \\"4b2a1c3\\" => \\"abc1234\\" \\"1a1b0\\" => \\"ab011\\" ```","solution":"def sort_string(s): Sorts the input string such that all the alphabets come before the numbers, and both the alphabets and numbers are sorted in ascending order within their respective groups. Parameters: s (str): the input string containing a mix of alphabets and numbers. Returns: str: the sorted string. # Separate characters into alphabets and numbers alphabets = sorted([char for char in s if char.isalpha()]) numbers = sorted([char for char in s if char.isdigit()]) # Combine sorted alphabets and numbers into one string return \'\'.join(alphabets + numbers)"},{"question":"Given an array of integers A1, A2, ..., AN, determine the number of subarrays that are non-decreasing. Formally, A subarray Ai, Ai+1, ..., Aj where 1 ≤ i ≤ j ≤ N is non-decreasing if Ai ≤ Ai+1 ≤ ... ≤ Aj. You have to print the number of such subarrays. -----Input----- The first line contains T, the number of test cases. Each test case consists of N in one line followed by N integers in the next line. -----Output----- For each test case, print the required answer in one line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ Ai ≤ 109 -----Example----- **Input:** 2 3 1 2 3 4 4 3 2 1 **Output:** 6 4 **Explanation:** Example case 1: All subarrays of the array [1, 2, 3] are non-decreasing. 1 -> [1] 2 -> [2] 3 -> [3] 4 -> [1, 2] 5 -> [2, 3] 6 -> [1, 2, 3] So, the output is 6. Example case 2: Only single-element subarrays are non-decreasing in the array [4, 3, 2, 1]. 1 -> [4] 2 -> [3] 3 -> [2] 4 -> [1] So, the output is 4. Note: Use scanf/printf instead of cin/cout for large input files.","solution":"def count_non_decreasing_subarrays(arr): This function returns the number of non-decreasing subarrays in the given array. n = len(arr) count = 0 length = 1 for i in range(1, n): if arr[i] >= arr[i-1]: length += 1 else: count += (length * (length + 1)) // 2 length = 1 count += (length * (length + 1)) // 2 return count def process_test_cases(test_cases): This function processes multiple test cases and returns the results. results = [] for case in test_cases: n, arr = case results.append(count_non_decreasing_subarrays(arr)) return results"},{"question":"You have a list of book titles that you want to organize in your digital library system. Each book is represented as a string that contains its title and its unique identifier number, separated by a comma. You want to sort these books alphabetically by their titles but still retain each book\'s associated unique identifier number. Given a list of books where each element is a string in the format \\"Title,ID\\", write a function that sorts the list by the book titles and returns the sorted list. Additionally, if two book titles are identical, maintain their relative order as in the original list (i.e., the sorting should be stable). Example: ```python books = [ \\"The Great Gatsby,3416\\", \\"To Kill a Mockingbird,5842\\", \\"1984,1234\\", \\"The Catcher in the Rye,2234\\", \\"The Odyssey,9876\\" ] ``` Function call: ```python sort_books(books) ``` Expected output: ```python [ \\"1984,1234\\", \\"The Catcher in the Rye,2234\\", \\"The Great Gatsby,3416\\", \\"The Odyssey,9876\\", \\"To Kill a Mockingbird,5842\\" ] ``` Write the function `sort_books` that performs this operation. **Function Signature** ```python def sort_books(books: List[str]) -> List[str]: # Your code here pass ``` **Constraints** - The length of the list `books` will be between 1 and 1000. - Each string in `books` will have a length between 5 and 100 characters. - Book titles will contain only alphabetic characters and spaces. - Unique identifier numbers will be integers between 1 and 9999. - Each list element is non-empty and follows the format \\"Title,ID\\".","solution":"from typing import List def sort_books(books: List[str]) -> List[str]: Sorts a list of books by their titles while retaining the unique identifier and maintaining the original order of identical titles. Args: books (List[str]): A list of strings where each string represents a book title and its unique identifier separated by a comma. Returns: List[str]: The list of books sorted by title. return sorted(books, key=lambda x: x.split(\',\')[0])"},{"question":"A restaurant chain offers a simple breakfast menu consisting of various sandwiches, drinks, and pastries. Customers can create their own combo meals from any selection on the menu. Each combo must include at least one main item and one drink but can have any number of pastries. Write a function that takes in two lists: - `main_items`: a list of strings representing the names of the main items. - `drinks`: a list of strings representing the names of the drinks. - `pastries`: a list of strings representing the names of the pastries. Your function should return a list of all possible combo meals. Each combo meal should be represented as a tuple containing the selected main item, the selected drink, and a list of selected pastries. **Example:** **Input:** ```python main_items = [\\"Egg Sandwich\\", \\"Sausage Sandwich\\"] drinks = [\\"Coffee\\", \\"Orange Juice\\"] pastries = [\\"Croissant\\", \\"Danish\\"] ``` **Output:** ```python [(\'Egg Sandwich\', \'Coffee\', []), (\'Egg Sandwich\', \'Coffee\', [\'Croissant\']), (\'Egg Sandwich\', \'Coffee\', [\'Danish\']), (\'Egg Sandwich\', \'Coffee\', [\'Croissant\', \'Danish\']), (\'Egg Sandwich\', \'Orange Juice\', []), (\'Egg Sandwich\', \'Orange Juice\', [\'Croissant\']), (\'Egg Sandwich\', \'Orange Juice\', [\'Danish\']), (\'Egg Sandwich\', \'Orange Juice\', [\'Croissant\', \'Danish\']), (\'Sausage Sandwich\', \'Coffee\', []), (\'Sausage Sandwich\', \'Coffee\', [\'Croissant\']), (\'Sausage Sandwich\', \'Coffee\', [\'Danish\']), (\'Sausage Sandwich\', \'Coffee\', [\'Croissant\', \'Danish\']), (\'Sausage Sandwich\', \'Orange Juice\', []), (\'Sausage Sandwich\', \'Orange Juice\', [\'Croissant\']), (\'Sausage Sandwich\', \'Orange Juice\', [\'Danish\']), (\'Sausage Sandwich\', \'Orange Juice\', [\'Croissant\', \'Danish\'])] ``` Note: 1. You can assume that the input lists will always contain at least one element. 2. The order of the combos in the output does not matter. 3. You are encouraged to optimize the function for readability and efficiency.","solution":"from itertools import combinations def generate_combo_meals(main_items, drinks, pastries): Generates all possible combo meals consisting of at least one main item, one drink, and any number of pastries. combo_meals = [] # Generate all possible combinations of pastries all_pastry_combinations = [] for r in range(len(pastries) + 1): # From 0 to len(pastries) all_pastry_combinations.extend(combinations(pastries, r)) # Generate all possible combos with at least one main item and one drink for main_item in main_items: for drink in drinks: for pastry_combination in all_pastry_combinations: combo_meals.append((main_item, drink, list(pastry_combination))) return combo_meals"},{"question":"Define a function `expand_string(s)` that transforms a given string `s` according to the following rules: 1. If a character is a digit (\'0\'-\'9\'), the next character (which will always be a letter) is repeated that number of times. 2. Adjacent digits are added together before applying the repetition to the subsequent character. 3. A single letter without a preceding digit remains as it is. For instance, the string \\"3a4b2c\\" expands as follows: - \'3a\' becomes \'aaa\' - \'4b\' becomes \'bbbb\' - \'2c\' becomes \'cc\' Therefore, the final result would be \\"aaabbbbcc\\". Write the implementation for `expand_string(s)` such that it correctly transforms the input string based on the defined rules. You can assume the input string will be in a valid format as per the rules stated. **Example:** ```python expand_string(\\"3a4b2c\\") -> \\"aaabbbbcc\\" expand_string(\\"1a0b3c\\") -> \\"accc\\" expand_string(\\"2x3y4z\\") -> \\"xxyyyzzzz\\" expand_string(\\"a2b3c\\") -> \\"abbccc\\" ``` Function Signature ```python def expand_string(s: str) -> str: # Your code here ```","solution":"def expand_string(s): Expands the given string `s` according to the specified rules. Args: - s (str): the input string to expand. Returns: - str: the expanded string. # Initialize the result string result = [] i = 0 while i < len(s): if s[i].isdigit(): # Gather any consecutive digits to form a number num = 0 while i < len(s) and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 # The next character must be a letter if i < len(s) and s[i].isalpha(): result.append(s[i] * num) else: # Add the letter as is result.append(s[i]) i += 1 return \\"\\".join(result)"},{"question":"Given a list of integers, find the longest contiguous subarray that has the maximum sum. -----Input----- The first line contains a single integer N, the number of elements in the list. The next line contains N space-separated integers representing the list. -----Output----- Print the maximum sum of the longest contiguous subarray. -----Constraints----- 1<=N<=100 -1000<=A[i]<=1000 -----Example----- Input: 6 -2 -3 4 -1 -2 1 5 -3 Output: 7 -----Explanation----- The contiguous subarray with maximum sum is [4, -1, -2, 1, 5], which sums to 7.","solution":"def max_subarray_sum(nums): Returns the maximum sum of the longest contiguous subarray. n = len(nums) max_so_far = float(\'-inf\') max_ending_here = 0 for num in nums: max_ending_here += num if max_ending_here > max_so_far: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"# Description: Given a list of integers, return a new list where each integer is replaced with the product of all the other integers in the original list. # Examples ``` product_list([1, 2, 3, 4]) == [24, 12, 8, 6] product_list([0, 2, 3, 4]) == [24, 0, 0, 0] product_list([2, 2, 2, 2]) == [8, 8, 8, 8] product_list([1, 0, 3, 0]) == [0, 0, 0, 0] ```","solution":"def product_list(nums): Given a list of integers, return a new list where each integer is replaced with the product of all the other integers in the original list. if len(nums) == 0: return [] total_product = 1 zero_count = nums.count(0) if zero_count > 1: # If there are more than one zero, all products will be zero return [0] * len(nums) # Calculate the product of all numbers except zero for num in nums: if num != 0: total_product *= num result = [] for num in nums: if zero_count == 1: if num == 0: result.append(total_product) else: result.append(0) else: result.append(total_product // num) return result"},{"question":"You are given a string that represents a mathematical expression. Your task is to write a function that evaluates the expression and returns the result. The expression can include: - Non-negative integers - The operators \'+\', \'-\', \'*\', and \'/\' (addition, subtraction, multiplication, and division respectively) - Parentheses \'(\', \')\' The expression will always be valid (i.e., you don\'t need to account for malformed expressions). Division should result in floating-point division. Write a function `evaluate_expression(expression)` that takes a single argument: - `expression` (a string): the mathematical expression to evaluate The function should return the result of the expression as a floating-point number. # Examples: ```python evaluate_expression(\\"3+2*2\\") # returns 7.0 evaluate_expression(\\" 3/2 \\") # returns 1.5 evaluate_expression(\\"3+5 / 2\\") # returns 5.5 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") # returns 23.0 evaluate_expression(\\"((2+3)*5)/2\\") # returns 12.5 ``` # Notes: - Assume the input string is always a valid mathematical expression. - Your solution should handle spaces within the expression gracefully. - Implement the function without using Python\'s `eval()` function. To assist in implementation, here are the precedences of operators from highest to lowest: 1. `*` and `/` 2. `+` and `-` 3. Parentheses have the highest precedence and can override the above rules. Feel free to expand on the algorithm of parsing and evaluating the expression if necessary.","solution":"def evaluate_expression(expression): def operate(a, b, operator): if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': return a / b def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 def apply_operations(operators, values): right = values.pop() left = values.pop() operator = operators.pop() values.append(operate(left, right, operator)) def evaluate(expression): operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operations(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operations(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operations(operators, values) return values[0] return round(float(evaluate(expression)), 6)"},{"question":"Write a function called \\"findNextPerfectSquare\\". Given an integer, \\"findNextPerfectSquare\\" returns the next perfect square of the given integer. If the given integer is not a perfect square, return -1. A perfect square is an integer that is the square of another integer. The next perfect square is simply the square of the integer which is one more than the square root of the given number. var output = findNextPerfectSquare(16); console.log(output); // --> 25 var output2 = findNextPerfectSquare(10); console.log(output2); // --> -1","solution":"import math def findNextPerfectSquare(n): Returns the next perfect square if n is a perfect square, otherwise returns -1. if n < 0: return -1 root = int(math.sqrt(n)) if root * root == n: return (root + 1) * (root + 1) else: return -1"},{"question":"You are given a list of integers representing the weights of various items. Your task is to fill two containers such that the absolute difference in their total weights is minimized. You are allowed to put each item in exactly one of the two containers. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer n denoting the number of items. - The second line of each test case contains n space-separated integers denoting the weights of the items. -----Output----- For each test case, output your answer in a single line representing the minimum possible absolute difference between the weights of the two containers. -----Constraints----- - 1 le T le 20 - 1 le n leq 30 - 1 le text{weight}_i leq 1000 -----Example Input----- 2 4 3 1 4 2 3 2 5 6 -----Example Output----- 0 1 -----Explanation----- Note: In the first test case, one possible way to balance the weights is to place items with weights [3, 2] in one container and [1, 4] in the other. Both containers will have a total weight of 5, resulting in an absolute difference of 0. In the second test case, one possible way to balance the weights is to place items with weights [2, 6] in one container and [5] in the other. The absolute difference in their total weights will be 1.","solution":"def minimum_difference_between_containers(T, test_cases): Returns the minimum possible absolute difference between the weights of the two containers for each test case. results = [] for n, weights in test_cases: total_weight = sum(weights) dp = [False] * (total_weight + 1) dp[0] = True for weight in weights: for j in range(total_weight - weight, -1, -1): if dp[j]: dp[j + weight] = True min_diff = float(\'inf\') for j in range(total_weight // 2 + 1): if dp[j]: min_diff = min(min_diff, abs(total_weight - 2 * j)) results.append(min_diff) return results"},{"question":"# Introduction You have been hired to develop a software module that helps with word analysis. One feature of this module is to identify and count the occurrences of each word in a given text. Words are defined as sequences of characters separated by any non-alphabetic characters, and should be treated case-insensitively. # Task Create a function that takes a string of text and returns an object where each key is a unique word from the text, and the corresponding value is the count of occurrences of that word. Rules * The function will take one argument which will be a string of text. * The function must return an object with words as keys and their frequencies as values. * Words should be treated case-insensitively. **Examples** ```python word_count(\\"Hello world! Hello everyone.\\") ``` should return: ```python {\'hello\': 2, \'world\': 1, \'everyone\': 1} ``` ```python word_count(\\"It\'s a beautiful day; isn\'t it?\\") ``` should return: ```python {\'it\': 2, \'s\': 1, \'a\': 1, \'beautiful\': 1, \'day\': 1, \'isn\': 1, \'t\': 1} ```","solution":"import re from collections import defaultdict def word_count(text): Returns a dictionary with words as keys and their frequencies as values. # Normalize the text to lowercase and use a regular expression to find words text = text.lower() words = re.findall(r\'[a-z]+\', text) # Initialize a default dictionary to count word frequencies word_freq = defaultdict(int) for word in words: word_freq[word] += 1 return dict(word_freq)"},{"question":"John is managing an online bookstore and wants to implement a feature to find the most popular book. He defines the popularity of a book by the number of times it has been rated. If two books have been rated the same number of times, the one that appears earlier in the input list is considered more popular. Your task is to help John achieve this by writing a program that finds the most popular book from the list of rated books for multiple test cases. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - The first line of each test case will contain the number of books, N. - The second line of each test case will contain N book names separated by space. -----Output:----- For each test case, output the name of the most popular book. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 1000 - 1 leq |book_name| leq 100 -----Sample Input:----- 2 5 harry_potter twilight harry_potter hunger_games twilight 4 book1 book2 book1 book2 -----Sample Output:----- harry_potter book1","solution":"def find_most_popular_book(test_cases): Finds the most popular book for each test case based on the number of ratings. Parameters: test_cases (list): A list of tuples where each tuple represents a test case. Each tuple contains an integer (number of books) and a list of strings (book names). Returns: list: A list of strings where each string is the most popular book for the corresponding test case. results = [] for num_books, books in test_cases: book_count = {} for i, book in enumerate(books): if book not in book_count: book_count[book] = (1, i) else: book_count[book] = (book_count[book][0] + 1, book_count[book][1]) most_popular = max(book_count.items(), key=lambda x: (x[1][0], -x[1][1])) results.append(most_popular[0]) return results"},{"question":"You are given a parking lot with multiple floors and each floor contains multiple slots for cars to park. Implement the ParkingLot class: ParkingLot(int floors, int slots_per_floor) Initializes the object with the given number of floors and the number of slots per floor. void parkVehicle(int vehicleID) Parks the vehicle with given ID in the first available parking slot, starting from the lowest floor. int removeVehicle(int vehicleID) Removes the vehicle with the given ID from the parking lot and returns the slot ID where the vehicle was parked. Returns -1 if the vehicle is not found. String getSlotInfo(int floor, int slot) Returns the vehicle ID parked in a given slot on the specified floor, or \\"Empty\\" if the slot is empty. Example: Input: [\\"ParkingLot\\",\\"parkVehicle\\",\\"parkVehicle\\",\\"parkVehicle\\",\\"parkVehicle\\",\\"removeVehicle\\",\\"parkVehicle\\",\\"getSlotInfo\\",\\"removeVehicle\\"] [[2, 3],[1],[2],[3],[4],[2],[5],[0, 1],[5]] Output: [null,null,null,null,null,3,null,\\"Empty\\",0] Explanation: ParkingLot P = ParkingLot(2, 3); // Initialize with 2 floors, and each floor with 3 slots. P.parkVehicle(1); // Parks vehicle 1 in slot: 0_0 (floor_slot). P.parkVehicle(2); // Parks vehicle 2 in slot: 0_1. P.parkVehicle(3); // Parks vehicle 3 in slot: 0_2. P.parkVehicle(4); // Parks vehicle 4 in slot: 1_0. P.removeVehicle(2); // Removes vehicle 2 and returns slot ID: 0_1. P.parkVehicle(5); // Parks vehicle 5 in slot: 0_1 (the slot became available after removal of vehicle 2). P.getSlotInfo(0, 1); // Returns \\"5\\" (vehicle with ID 5 is in slot 0_1). P.removeVehicle(5); // Removes vehicle 5 and returns slot ID: 0_1. Constraints: 1 <= floors <= 100 1 <= slots_per_floor <= 100 1 <= vehicleID <= 10^5 At most 10^5 calls will be made to parkVehicle, removeVehicle, and getSlotInfo.","solution":"class ParkingLot: def __init__(self, floors, slots_per_floor): self.floors = floors self.slots_per_floor = slots_per_floor self.parking_lot = [[\\"Empty\\" for _ in range(slots_per_floor)] for _ in range(floors)] self.vehicle_to_slot = {} def parkVehicle(self, vehicleID): for floor in range(self.floors): for slot in range(self.slots_per_floor): if self.parking_lot[floor][slot] == \\"Empty\\": self.parking_lot[floor][slot] = vehicleID self.vehicle_to_slot[vehicleID] = (floor, slot) return def removeVehicle(self, vehicleID): if vehicleID in self.vehicle_to_slot: floor, slot = self.vehicle_to_slot[vehicleID] self.parking_lot[floor][slot] = \\"Empty\\" del self.vehicle_to_slot[vehicleID] return f\\"{floor}_{slot}\\" return -1 def getSlotInfo(self, floor, slot): return self.parking_lot[floor][slot] if 0 <= floor < self.floors and 0 <= slot < self.slots_per_floor else \\"Empty\\""},{"question":"Given an array of integers, determine whether the elements of the array can be re-arranged to form an arithmetic progression. An arithmetic progression is a sequence of numbers whereby the difference between any two consecutive terms is constant. The function should return a boolean value: `true` if the array can be re-arranged into an arithmetic progression, and `false` otherwise. Examples: 1. Input: [3, 5, 1] Output: true Explanation: The array can be re-arranged as [1, 3, 5], which is an arithmetic progression with a constant difference of 2. 2. Input: [1, 2, 4] Output: false Explanation: There is no way to re-arrange the array into an arithmetic progression.","solution":"def can_form_arithmetic_progression(arr): Determines if the elements of the array can be re-arranged to form an arithmetic progression. Parameters: arr (list of int): The array of integers to check. Returns: bool: True if the array can be re-arranged into an arithmetic progression, False otherwise. if len(arr) <= 1: return True arr.sort() difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i-1] != difference: return False return True"},{"question":"Shashi is working on a new image processing project and needs to invert the colors of grayscale images. For this task, grayscale images are represented as a matrix of integers where each integer denotes the intensity of the color between 0 (black) and 255 (white). To invert the colors of the image, each pixel value needs to be transformed to 255 minus its current value. Could you help Shashi achieve this by writing a function that inverts the colors of a given grayscale image matrix? The function should take a 2D list (matrix) of integers as input where each integer is between 0 and 255. The function should return a 2D list (matrix) with inverted colors. Input Format: 1. An integer N representing the number of rows of the matrix. 2. An integer M representing the number of columns of the matrix. 3. Followed by N lines, each containing M integers representing the grayscale intensity of the pixels in the matrix. Output Format: 1. N lines, each containing M integers representing the inverted image. Sample Input: 3 3 0 128 255 64 128 192 255 255 0 Sample Output: 255 127 0 191 127 63 0 0 255 Note: You may assume that the input format is always valid as per the provided description.","solution":"def invert_colors(image_matrix): Invert the colors of a given grayscale image matrix. Parameters: image_matrix (list of list of int): 2D list representing grayscale image. Returns: list of list of int: 2D list with inverted colors. return [[255 - pixel for pixel in row] for row in image_matrix] # Example usage: # sample_image = [ # [0, 128, 255], # [64, 128, 192], # [255, 255, 0] # ] # inverted_image = invert_colors(sample_image) # print(inverted_image)"},{"question":"You are given an array `timePoints` of strings representing the 24-hour clock time \\"HH:MM\\". Calculate the minimum minutes difference between any two different time points in the list. Return the minimum difference in minutes. Example 1: Input: timePoints = [\\"23:59\\",\\"00:00\\"] Output: 1 Explanation: The minimum difference is 1 minute between \\"23:59\\" and \\"00:00\\". Example 2: Input: timePoints = [\\"00:00\\",\\"23:59\\",\\"12:30\\",\\"12:31\\"] Output: 1 Explanation: The minimum difference is 1 minute between \\"12:30\\" and \\"12:31\\". Constraints: 1 <= timePoints.length <= 2 * 10^4 timePoints[i] is in the format \\"HH:MM\\". Each time point in timePoints is unique.","solution":"def findMinDifference(timePoints): Find the minimum difference in minutes between any two different time points. :param timePoints: List of strings representing the time in \\"HH:MM\\" format. :return: Minimum difference in minutes. def convertToMinutes(time): Converts a time string \\"HH:MM\\" to total minutes from 00:00. :param time: Time string in \\"HH:MM\\" format. :return: Total minutes. h, m = map(int, time.split(\':\')) return h * 60 + m minutes = [convertToMinutes(time) for time in timePoints] minutes.sort() min_diff = float(\'inf\') for i in range(1, len(minutes)): min_diff = min(min_diff, minutes[i] - minutes[i - 1]) # Check the difference between the last and the first time point considering the circular nature of the clock min_diff = min(min_diff, 1440 - (minutes[-1] - minutes[0])) return min_diff"},{"question":"Given an array of integers representing the daily temperatures, write a function that returns an array where, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Example 1: Input: [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: For each day, we are looking for the first day in the future with a warmer temperature. Example 2: Input: [30, 40, 50, 60] Output: [1, 1, 1, 0] Explanation: Same logic as the first example, applied to this shorter list. Example 3: Input: [30, 60, 90] Output: [1, 1, 0] Explanation: Again, there are just fewer days to compare so the same logic holds. Note: Use a stack data structure to solve this efficiently.","solution":"def daily_temperatures(T): Calculate the number of days to wait until a warmer temperature. :param T: List of daily temperatures :return: List of days to wait for a warmer temperature result = [0] * len(T) stack = [] for i, temp in enumerate(T): while stack and T[stack[-1]] < temp: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"# Background You are required to write a function that accepts a list of integers and a target integer. The goal of the function is to find all pairs of integers from the list that sum up to the target integer. # Problem Description Given a list of integers, `nums`, and an integer target, `target`, return all unique pairs `[a, b]` in `nums` such that `a + b == target`. Each pair should be represented as a tuple `(a, b)` where `a <= b`. # Constraints * The input list `nums` will contain integers `-10^6 <= nums[i] <= 10^6`. * The length of `nums` will be `0 <= len(nums) <= 10^6`. * The target integer `target` will be `-10^7 <= target <= 10^7`. # Examples ```python find_pairs([1, 2, 3, 4, 5], 5) == [(1, 4), (2, 3)] find_pairs([-1, 0, 1, 2, -1, -4], 0) == [(-1, 1), (-1, 1)] find_pairs([1, 2, 3, 4, 5], 10) == [] find_pairs([], 10) == [] find_pairs([2, 4, 6, 8, 10], 12) == [(2, 10), (4, 8)] ``` # Hints * Consider using a hash set to track the numbers you have already seen to optimize the search for pairs. * Be mindful of duplicate pairs and how to ensure each pair is unique and sorted.","solution":"def find_pairs(nums, target): Finds all unique pairs in `nums` that sum up to `target`. Each returned pair is in the format (a, b) where a <= b. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"Imagine you are building a dashboard widget for a website that displays dynamic greetings based on the time of day. You need to write a function that takes the current hour in 24-hour format and returns the appropriate greeting. Here are the conditions: - If the hour is between 0 and 11 (inclusive), return \\"Good Morning\\". - If the hour is between 12 and 17 (inclusive), return \\"Good Afternoon\\". - If the hour is between 18 and 23 (inclusive), return \\"Good Evening\\". Your function should take a single argument, which is the current hour as an integer, and it should return the correct greeting based on the rules above. **Example:** ```python def greeting(hour): # Your code here # Example calls: print(greeting(9)) # Output: \\"Good Morning\\" print(greeting(14)) # Output: \\"Good Afternoon\\" print(greeting(20)) # Output: \\"Good Evening\\" ```","solution":"def greeting(hour): Returns a greeting based on the hour of the day. Parameters: hour (int): The current hour in 24-hour format (0-23). Returns: str: The appropriate greeting. if 0 <= hour <= 11: return \\"Good Morning\\" elif 12 <= hour <= 17: return \\"Good Afternoon\\" elif 18 <= hour <= 23: return \\"Good Evening\\" else: raise ValueError(\\"Invalid hour. Hour must be between 0 and 23.\\")"},{"question":"# Task Vera loves arranging books in her library. Each book has a unique `id` and a thickness `t`. Initially, Vera\'s shelf has a maximum capacity of `C` units of thickness. Each day, Vera can choose any single book from the shelf and move it to the front. Vera wants the total thickness of books on the shelf to be maximized at all times, without exceeding the shelf\'s capacity. Your task is to help Vera find the maximum total thickness she can achieve after optimally moving books to the front over several days\' operations. # Example For `C = 10` and `books = [(1, 3), (2, 2), (3, 5)]`, the output should be `10`. So, the books are initially arranged in the order of their IDs: 1 -> 2 -> 3. Vera can get the maximum thickness without exceeding `C` by moving books as follows: - Day 1: No movement needed, Sum = 3 + 2 + 5 = 10 Hence, the maximum thickness is `10`. For `C = 7` and `books = [(1, 4), (2, 3), (3, 5)]`, the output should be `7`. So, the books are initially arranged in the order of their IDs: 1 -> 2 -> 3. Vera can get the maximum thickness without exceeding `C` by moving books as follows: - Day 1: No movement needed, Sum = 4 + 3 + 5. However, 4 + 3 + 5 = 12 (>7), so we need to exclude book with ID 3. - Moving book with ID 2 to the front: New arrangement is 2 -> 1 -> 3, sum = 3 + 4 + 5 = 12 (>7) - Excluding book with ID 3 as it exceeds `C`, sum = 3 + 4 = 7 Hence, the maximum thickness is `7`. # Input/Output - `[input]` integer `C` `1 <= C <= 10^7` - `[input]` List of tuples `books` `books` is a list of tuples, each tuple contains an integer id and an integer thickness. Each book\'s id is unique and `1 <= t <= 10^7`. The number of books does not exceed `10^5`. - `[output]` an integer The maximum total thickness Vera can achieve on her shelf without exceeding capacity `C`.","solution":"def maximize_book_thickness(C, books): Returns the maximum total thickness Vera can achieve without exceeding the capacity C. Parameters: C (int): The capacity of the shelf. books (list): A list of tuples where each tuple contains the id and thickness of each book. Returns: int: The maximum total thickness of books without exceeding the capacity. # Extract only the thickness values from the books list thicknesses = [t for _, t in books] # Sort the thicknesses in non-decreasing order thicknesses.sort() total_thickness = 0 max_total_thickness = 0 for thickness in thicknesses: # Check if adding the current book exceeds the capacity if total_thickness + thickness > C: break total_thickness += thickness max_total_thickness = total_thickness return max_total_thickness"},{"question":"# Task **_Given_** *a matrix of integers*, **_write a function that returns_** *the sum of the elements on the main diagonal* (which runs from the top-left corner to the bottom-right corner). ___ # Notes * **_The matrix_** will always be **square** (i.e., the same number of rows and columns). * **_Matrix size_** is **at least 1x1**. * **_The matrix elements_** can be **any integer** (positive, negative, or zero). ___ # Input >> Output Examples ``` matrixDiagonalSum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ==> return 15 ``` **_Explanation_**: The main diagonal elements are `1`, `5`, and `9`. Their sum is `15`. ``` matrixDiagonalSum([[10, 20], [30, 40]]) ==> return 50 ``` **_Explanation_**: The main diagonal elements are `10` and `40`. Their sum is `50`. ``` matrixDiagonalSum([[5]]) ==> return 5 ``` **_Explanation_**: The main diagonal has only one element `5`. Therefore, its sum is `5`. ___ ___ ___ Enjoy Solving !! # Happy Coding","solution":"def matrixDiagonalSum(matrix): Returns the sum of the elements on the main diagonal of the matrix. return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"=====Problem Statement===== Given a string, determine if it is a valid IPv4 address. An IP address is a string in the form \\"A.B.C.D\\", where the length of A, B, C, and D does not exceed 3, and they are all numeric values ranging from 0 to 255 inclusive. Additionally, any leading zeros in a block are not permitted unless the block itself is \\"0\\". If the string is a valid IPv4 address, return \\"Valid\\", otherwise return \\"Invalid\\". Write a function `is_valid_ipv4` that takes a string `ip` as input and returns a string indicating if the IP address is valid. =====Input Format===== - The input consists of a single string. =====Constraints===== - The input string length will be between 1 and 15 characters inclusive. - The string will only contain characters in the range (0-9 and .). =====Output Format===== - Return a string \\"Valid\\" if the input string is a valid IPv4 address, otherwise return \\"Invalid\\". =====Sample Input 0===== 192.168.1.1 =====Sample Output 0===== Valid =====Sample Input 1===== 256.300.88.99 =====Sample Output 1===== Invalid =====Sample Input 2===== 192.168.01.1 =====Sample Output 2===== Invalid =====Sample Input 3===== 127.0.0.1 =====Sample Output 3===== Valid","solution":"def is_valid_ipv4(ip): Determine if a given string is a valid IPv4 address. Parameters: ip (str): The IP address string to validate. Returns: str: \\"Valid\\" if the IP address is valid, \\"Invalid\\" otherwise. parts = ip.split(\'.\') if len(parts) != 4: return \\"Invalid\\" for part in parts: if not part.isdigit(): return \\"Invalid\\" num = int(part) if not 0 <= num <= 255: return \\"Invalid\\" if part != str(num): return \\"Invalid\\" return \\"Valid\\""},{"question":"Alice loves puzzles and is fascinated by palindromes. She has learned that a palindrome is a string that reads the same forward and backward. Given a string, she wants to know the number of non-empty substrings that are palindromes. Example: The string \\"ababa\\" has the following palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\". There are 8 palindromic substrings in total. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case consists of a single line containing a string S. -----Output----- - For each test case, output a single line containing one integer denoting the number of palindromic substrings in the given string. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 - S contains only lowercase English letters. -----Subtasks----- - Subtask 1: |S| ≤ 100 for 50 points - Subtask 2: Original constraints for 50 points -----Example----- Input: 2 ababa aaa Output: 8 6 -----Explanation----- Example case 1. The string \\"ababa\\" has the palindromic substrings: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\". Example case 2. The string \\"aaa\\" has the palindromic substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_palindromic_substrings(s): Returns the number of non-empty palindromic substrings in the given string s. n = len(s) count = 0 # Function to check palindromes expanding around the center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for i in range(n): expand_around_center(i, i) # odd length palindromes expand_around_center(i, i+1) # even length palindromes return count def count_palindromes_in_test_cases(test_cases): results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"Write a function called `findLongestSubstring` that takes a string and returns the length of the longest substring with all unique characters. Examples ``` \\"abcabcbb\\" => 3 // Explanation: The answer is \\"abc\\", with a length of 3. \\"bbbbb\\" => 1 // Explanation: The answer is \\"b\\", with a length of 1. \\"pwwkew\\" => 3 // Explanation: The answer is \\"wke\\", with a length of 3. \\"\\" => 0 // Explanation: The answer is \\"\\", with a length of 0. \\"dvdf\\" => 3 // Explanation: The answer is \\"vdf\\", with a length of 3. ``` Constraints - The input string will contain only English letters, digits, symbols, and spaces. - The input string will have a maximum length of 10,000 characters.","solution":"def findLongestSubstring(s): Returns the length of the longest substring with all unique characters. start = 0 maxLength = 0 usedChars = {} for i, char in enumerate(s): if char in usedChars and start <= usedChars[char]: start = usedChars[char] + 1 else: maxLength = max(maxLength, i - start + 1) usedChars[char] = i return maxLength"},{"question":"Given an array of integers and an integer `k`, your task is to determine the number of consecutive subarrays that have a sum divisible by `k`. For example: solve([2, 3, 1, 6, 4], 3) = 4. The subarrays are: [3], [6], [3, 1, 6, 4], and [1, 6]. The length of the array is less than `100000`. More examples in test cases. Good luck!","solution":"def solve(arr, k): Determines the number of consecutive subarrays that have a sum divisible by k. Parameters: arr (list of int): The array of integers. k (int): The divisor. Returns: int: The number of subarrays with a sum divisible by k. if k == 0: return 0 count = 0 prefix_sum = 0 remainder_count = {0: 1} # Initialize with 0 remainder and count 1 for subarray starting from index zero for num in arr: prefix_sum += num remainder = prefix_sum % k if remainder < 0: remainder += k if remainder in remainder_count: count += remainder_count[remainder] remainder_count[remainder] += 1 else: remainder_count[remainder] = 1 return count"},{"question":"Write a function to determine the number of ways to decode a string of digits. A message containing letters from A-Z is being encoded to digits using the following mapping: \'A\' -> 1 \'B\' -> 2 ... \'Z\' -> 26 Given a non-empty string containing only digits, determine the total number of ways to decode it. Example 1: Input: s = \\"12\\" Output: 2 Explanation: It can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Example 2: Input: s = \\"226\\" Output: 3 Explanation: It can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). Example 3: Input: s = \\"06\\" Output: 0 Explanation: No valid encoding, \'0\' doesn\'t correspond to any letter and \\"06\\" is not valid. Example 4: Input: s = \\"11106\\" Output: 2 Explanation: It can be decoded as \\"AAJF\\" (1 1 10 6) or \\"KJ\\" (11 10 6). Constraints: - 1 <= s.length <= 100 - s contains only digits and may contain leading zeros. The function should consider edge cases such as sequences with zero that make decoding invalid and should evaluate the possible combinations using a dynamic programming approach.","solution":"def numDecodings(s): Determine the number of ways to decode a string of digits. :param s: str :return: int if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) # Base cases dp[0] = 1 # An empty string has one way to be decoded dp[1] = 1 # A single non-zero digit has one way to be decoded # Fill the dp array for i in range(2, n + 1): # Check the single digit if s[i-1] != \'0\': dp[i] += dp[i-1] # Check the two-digit decipherability if 10 <= int(s[i-2:i]) <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Given a list of integers, write a function that separates the list into two smaller lists. One list should contain all the even numbers, and the other list should contain all the odd numbers. Return a tuple of the two lists. Here\'s the signature for the function in Python: ```python def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: # Your code here ``` **Example Input:** ```python numbers = [10, 21, 32, 43, 54, 65] ``` **Example Output:** ```python ([10, 32, 54], [21, 43, 65]) ``` **Note:** - The input list may contain both positive and negative integers. - The order of elements in the output lists should preserve the order from the input list.","solution":"from typing import List, Tuple def separate_even_odd(numbers: List[int]) -> Tuple[List[int], List[int]]: Separates a list of numbers into even and odd numbers. Args: numbers (List[int]): The input list of integers. Returns: Tuple[List[int], List[int]]: A tuple containing two lists: - First list with even numbers. - Second list with odd numbers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return (evens, odds)"},{"question":"Write a function `get_all_subsets(s, n)` that generates all possible subsets (combinations) of a given set `s` which have exactly `n` elements. The function should receive two arguments: - `s`: a list of unique elements - `n`: an integer specifying the size of the subsets to be generated The function should return a list of lists, where each inner list is a subset of `s` containing exactly `n` elements. The order of the subsets and the order of elements within subsets does not matter. Example: ```python get_all_subsets([1, 2, 3], 2) # Expected output: [[1, 2], [1, 3], [2, 3]] get_all_subsets([\'a\', \'b\', \'c\', \'d\'], 3) # Expected output: [[\'a\', \'b\', \'c\'], [\'a\', \'b\', \'d\'], [\'a\', \'c\', \'d\'], [\'b\', \'c\', \'d\']] ``` If `n` is greater than the length of the set `s`, the function should return an empty list. Constraints: - The input list `s` will have at most 15 elements. - The elements of `s` are guaranteed to be unique. - Return the subsets in any order.","solution":"from itertools import combinations def get_all_subsets(s, n): Generates all possible subsets of a given set s with exactly n elements. Parameters: s (list): A list of unique elements. n (int): The size of the subsets to be generated. Returns: list: A list of lists where each inner list is a subset of s containing exactly n elements. if n > len(s): return [] return [list(subset) for subset in combinations(s, n)]"},{"question":"Given an integer array A of size N, write a program to find the sum of all odd numbers in the array. -----Input----- The first line contains an integer T, total number of testcases. Then follow 2*T lines, first for the size of the array N and second to store the elements of the array A of size N. -----Output----- For each test case, display the sum of all odd numbers in the array, in a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ A[i] ≤ 100000 -----Example----- Input 3 4 1 2 3 4 5 10 21 32 43 54 3 7 8 5 Output 4 64 12","solution":"def sum_of_odd_numbers(test_cases): results = [] for i in range(0, len(test_cases), 2): n = test_cases[i] array = test_cases[i+1] sum_odds = sum(x for x in array if x % 2 != 0) results.append(sum_odds) return results"},{"question":"Given an integer n, the task is to find the length of the longest sequence of consecutive integers from the set {1, 2, ..., n} such that the difference between every pair of consecutive integers in the sequence is exactly one and they all sum up to a given integer S. Implement a function `longest_sequence_length(n, S)` that takes two parameters: - `n`: the maximum integer allowed in the sequence (1 ≤ n ≤ 10^6). - `S`: the desired sum of the sequence (1 ≤ S ≤ 10^12). The function should return the length of the longest sequence that satisfies the conditions, or 0 if no such sequence exists. #Examples: ``` longest_sequence_length(10, 15) --> 5 Explanation: The sequence [1, 2, 3, 4, 5] has five elements and sums to 15. longest_sequence_length(10, 55) --> 10 Explanation: The sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] has ten elements and sums to 55. longest_sequence_length(10, 5) --> 2 Explanation: The sequence [2, 3] has two elements and sums to 5. longest_sequence_length(10, 50) --> 0 Explanation: No sequence of consecutive integers from 1 to 10 sums to 50. ``` #Hint: 1. Use arithmetic progression to analyze possible sequences. 2. Utilize mathematical properties to avoid unnecessary iterations.","solution":"def longest_sequence_length(n, S): Find the length of the longest sequence of consecutive integers from the set {1, 2, ..., n} that sums up to S. # Use the sum of arithmetic progression to find the length for length in range(n, 0, -1): total_sum = (length * (length + 1)) // 2 if total_sum > S: continue if (S - total_sum) % length == 0 and (S - total_sum) // length < n: start = (S - total_sum) // length + 1 if start > 0 and (start + length - 1) <= n: return length return 0"},{"question":"Create a function called `permutations` that takes in a string `s` and returns a list of all possible permutations of the characters in the string. The permutations should be in lexicographic (sorted) order if the input string is sorted. The following are examples of how this function would be used and what the expected results would be: ```python permutations(\\"abc\\") # returns [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] permutations(\\"dog\\") # returns [\\"dgo\\", \\"dog\\", \\"gdo\\", \\"god\\", \\"odg\\", \\"ogd\\"] ``` Note: You may assume the input strings do not contain any duplicate characters.","solution":"import itertools def permutations(s): Returns a list of all possible permutations of the characters in the string s, in lexicographic order. return sorted([\'\'.join(p) for p in itertools.permutations(s)])"},{"question":"You are given a string containing a mathematical expression in infix notation, which can include parentheses to enforce precedence. Your task is to implement a function that evaluates this expression and returns the result as an integer. The expression will only contain non-negative integers and the operators `+`, `-`, `*`, and `/`. Division should be treated as integer division, rounding down towards zero. Your function should handle operator precedence (`*` and `/` have higher precedence than `+` and `-`) and parentheses overriding natural operator precedence. Function Signature ```python def evaluate_expression(expression: str) -> int: pass ``` Input - `expression` (str): A string representing the mathematical expression in infix notation. It is guaranteed that the expression is well-formed and contains only non-negative integers, parentheses, and the binary operators `+`, `-`, `*`, and `/`. Output - Returns an `int` which is the evaluation of the given mathematical expression. Example ```python evaluate_expression(\\"3+2*2\\") # returns 7 evaluate_expression(\\"3+5/2\\") # returns 5 evaluate_expression(\\"(2+3)*(5-2)\\") # returns 15 evaluate_expression(\\"(2*(3+5))/4\\") # returns 4 ``` Constraints - The function should handle the order of operations and parentheses correctly. - The input expression length will be between 1 and 100 characters. - Division by zero will not occur in the input.","solution":"def evaluate_expression(expression: str) -> int: def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_ops(operators, values): op = operators.pop() right = values.pop() left = values.pop() values.append(operate(left, right, op)) operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_ops(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_ops(operators, values) operators.append(expression[i]) i += 1 while operators: apply_ops(operators, values) return values[-1]"},{"question":"Given an array of integers and a target sum, write a function that returns True if there are two distinct numbers in the array that add up to the target sum, and False otherwise. Do not use the same element twice, and consider the solution with the best possible time complexity. For example: Given the array [1, 2, 3, 9] and target sum 8, your function should return False. Given the array [1, 2, 4, 4] and target sum 8, your function should return True. Given the array [2, 7, 11, 15] and target sum 9, your function should return True.","solution":"def has_pair_with_sum(arr, target): Returns True if there are two distinct numbers in the array that add up to the target sum, False otherwise. encountered_numbers = set() for number in arr: if target - number in encountered_numbers: return True encountered_numbers.add(number) return False"},{"question":"In the kingdom of Algoria, there are towns connected by roads. Some roads have toll fees, and citizens want to travel from one town to another with the minimum possible cost. Given a list of towns and roads with toll fees, find the minimum toll amount needed to travel from a starting town to a destination town. Write a function `min_toll(n, roads, start, end)` where: - `n` is the number of towns, labelled from 0 to n-1. - `roads` is a list of tuples `(u, v, w)`, where `u` and `v` are towns connected by a road with a toll fee `w`. - `start` is the starting town\'s label. - `end` is the destination town\'s label. The function should return the minimum toll fee needed to travel from the starting town to the destination town. If there is no possible path, return -1. Example: ``` n = 4 roads = [(0, 1, 10), (0, 2, 6), (1, 3, 15), (2, 3, 4)] start = 0 end = 3 ``` The function should return 10 because the minimum toll path is 0 -> 2 -> 3 with a total toll of 6 + 4 = 10.","solution":"import heapq def min_toll(n, roads, start, end): Returns the minimum toll fee to travel from start to end. graph = {i: [] for i in range(n)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) min_heap = [(0, start)] # (toll, town) visited = set() min_toll = {i: float(\'inf\') for i in range(n)} min_toll[start] = 0 while min_heap: toll, town = heapq.heappop(min_heap) if town in visited: continue visited.add(town) if town == end: return toll for neighbor, weight in graph[town]: if neighbor not in visited: new_toll = toll + weight if new_toll < min_toll[neighbor]: min_toll[neighbor] = new_toll heapq.heappush(min_heap, (new_toll, neighbor)) return -1"}]'),F={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},Y=["disabled"],j={key:0},z={key:1};function L(r,e,l,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",j,"See more"))],8,Y)):u("",!0)])}const D=d(F,[["render",L],["__scopeId","data-v-a16520bc"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/27.md","filePath":"deepseek/27.md"}'),P={name:"deepseek/27.md"},G=Object.assign(P,{setup(r){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{W as __pageData,G as default};
