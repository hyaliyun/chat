import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as y,f as h,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,m,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-540c5e83"]]),A=JSON.parse('[{"question":"Given an array of integers nums, return the length of the longest strictly decreasing subsequence (LDS) in nums. A strictly decreasing subsequence is defined as a subsequence where for all i < j, nums[i] > nums[j]. Constraints * 1 ≤ nums.length ≤ 100000 * -109 ≤ nums[i] ≤ 109 Input First line: An integer n denoting the number of elements in the array. Next n lines: n integers representing the elements of the array. Output An integer representing the length of the longest strictly decreasing subsequence. Examples Input 6 9 4 3 8 6 7 Output 3 Input 4 10 20 30 0 Output 2","solution":"def length_of_lds(nums): Returns the length of the longest strictly decreasing subsequence (LDS) in nums. if not nums: return 0 n = len(nums) dp = [1] * n # Initialize dp array where dp[i] is the length of LDS ending at index i for i in range(1, n): for j in range(i): if nums[j] > nums[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Function to process input and call the length_of_lds function def process_input_and_find_lds(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = [int(data[i + 1]) for i in range(n)] return length_of_lds(nums)"},{"question":"Given an integer array of size N, find two indices i and j such that the absolute difference between nums[i] and nums[j] is equal to a given integer k (i.e., |nums[i] - nums[j]| = k). You may assume that each input would have exactly one solution, and you may not use the same element twice. INPUT::: The first line contains an integer T, the number of test cases. Each test case contains an integer N, the size of the array, followed by N space-separated integers representing the array elements. The last element in the line is the integer k. OUTPUT::: For each test case, print two space-separated integers i and j (0-indexed) representing the indices such that |nums[i] - nums[j]| = k. Constraints::: 1≤T≤10, 2≤N≤1000, -10^6≤nums[i]≤10^6, 1≤k≤10^6. Note::: Return the indices (i, j) in sorted order if multiple solutions are possible. SAMPLE INPUT 2 5 1 7 5 9 2 4 4 10 5 7 1 2 SAMPLE OUTPUT 0 2 1 3","solution":"def find_indices_for_difference(test_cases): Finds indices i and j such that |nums[i] - nums[j]| = k. Parameters: test_cases (list of tuples): Each tuple contains (N, nums, k) Returns: list of tuples: Each tuple contains indices (i, j) results = [] for case in test_cases: N, nums, k = case index_map = {} for i in range(N): complement1 = nums[i] + k complement2 = nums[i] - k if complement1 in index_map: results.append((index_map[complement1], i)) break if complement2 in index_map: results.append((index_map[complement2], i)) break index_map[nums[i]] = i return results"},{"question":"**Context:** Tina loves baking cakes and she is experimenting with various recipes. For each recipe, Tina needs exact measurements of ingredients. She realized that her baking process could be more efficient if she writes a program to calculate the exact measurements for a given number of cakes. # Task: You need to write a program that helps Tina calculate the required amount of each ingredient based on the recipe for a single cake and the number of cakes she wants to bake. # Input: - The first line contains an integer `m` (1 ≤ m ≤ 100) — the number of ingredients in the recipe. - The second line contains `m` integers `u1, u2, ..., um` (1 ≤ ui ≤ 1000) — the units of each ingredient required for one cake. - The third line contains an integer `k` (1 ≤ k ≤ 1000) — the number of cakes Tina wants to bake. # Output: Print a single line containing `m` integers — the units of each ingredient required for `k` cakes. # Example: Input: ``` 3 100 200 150 5 ``` Output: ``` 500 1000 750 ``` # Explanation: In the example given: - Tina requires 100 units of ingredient 1, 200 units of ingredient 2, and 150 units of ingredient 3 to bake one cake. - For 5 cakes, she needs 5 * 100 = 500 units of ingredient 1, 5 * 200 = 1000 units of ingredient 2, and 5 * 150 = 750 units of ingredient 3. - Therefore, the output is \\"500 1000 750\\".","solution":"def calculate_ingredients(m, ingredient_units, k): Calculates the required amount of each ingredient for making k cakes. Parameters: m (int): Number of ingredients. ingredient_units (list[int]): Units of each ingredient required for one cake. k (int): Number of cakes to bake. Returns: list[int]: Units of each ingredient required for k cakes. return [units * k for units in ingredient_units]"},{"question":"Given a list of integers, find the longest sublist such that the sum of its elements is even. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the list. Output You should output the length of the longest sublist such that the sum of its elements is even. If all elements of the list are odd and there is no sublist with an even sum, print \\"0\\" (without quotes). Examples Input 5 1 2 3 4 5 Output 4 Input 3 1 1 1 Output 2","solution":"def longest_even_sum_sublist(n, arr): Returns the length of the longest sublist with even sum. If there is no such sublist, it returns 0. # Total sum of the array total_sum = sum(arr) # If the total sum is even, the whole list is the longest even-sum sublist if total_sum % 2 == 0: return n # Check the first and last odd number to minimize the removal to make sum even first_odd_index = -1 last_odd_index = -1 for i in range(n): if arr[i] % 2 != 0: if first_odd_index == -1: first_odd_index = i last_odd_index = i if first_odd_index == -1: # No odd numbers were found, meaning all are even return n # If we remove first or last odd number and the rest sum is even max_length_after_removal = max(n - first_odd_index - 1, last_odd_index) return max_length_after_removal"},{"question":"A prestigious sports club organizes several tennis tournaments annually. Each tournament has a specific number of participants and each participant plays against every other participant exactly once. You have been asked to determine how many sets of matches will take place in a given tournament. Given the number of participants, calculate the total number of matches played in the tournament. Write a function that takes the number of participants in the tournament and returns the total number of matches played. Input The input will consist of several cases, each on a new line. Each line will contain an integer n (2 ≤ n ≤ 1000), the number of participants in a tournament. Input processing ends when a line containing n = 0 is encountered. Output For each input case, you have to print the total number of matches played in the tournament. Example Input 3 4 5 0 Output 3 6 10","solution":"def calculate_matches(n): Given the number of participants in a tournament, returns the total number of matches played. if n <= 1: return 0 return (n * (n - 1)) // 2 def process_input(inputs): results = [] for n in inputs: if n == 0: break results.append(calculate_matches(n)) return results"},{"question":"A large company organizes a candy distribution event among n employees. The company prepares n candies and packs them into different bags labeled from 1 to n where the i-th bag contains exactly i candies. To add more excitement, the distribution follows a given sequence. Each employee, one after another, picks a bag of candies following this sequence and consumes all the candies in that bag. The sequence is cyclic and may repeat multiple times until all the candies are consumed. Write a program to determine the total amount of candies consumed by each employee. Input: The first line contains an integer, n (1 ≤ n ≤ 105), representing the number of employees and the number of bags of candies. The second line contains a sequence of integers ai (1 ≤ ai ≤ n) representing the picking order of the bags of candies by the employees. It is guaranteed that the sequence length does not exceed 105. Output: Print n integers, where the i-th integer represents the total amount of candies consumed by the i-th employee. Examples: Input: 5 1 3 Output: 1 3 2 4 5 Input: 6 2 1 4 Output: 2 1 4 3 6 5 Note: In the first example, the employees pick bags in the order: first employee picks 1 candy, second picks 3 candies, third picks 2 candies, fourth picks 4 candies, fifth picks 5 candies. In the second example, the sequence repeats as: first employee picks 2 candies, second picks 1 candy, third picks 4 candies, fourth picks 3 candies, fifth picks 6 candies, sixth picks 5 candies.","solution":"def distribute_candies(n, sequence): Determines the total amount of candies consumed by each employee based on the given sequence. Args: n (int): Number of employees and bags of candies. sequence (list): Picking order of candies. Returns: list: Total amount of candies consumed by each employee. result = [0]*n for i in range(n): result[i] = sequence[i % len(sequence)] return result"},{"question":"In a gaming tournament, n participants compete in a single-elimination format (i.e., if you lose once, you are out). Each match results in either win or loss, and there is no draw. Given n participants, the tournament proceeds in rounds until one champion is determined. However, during some of the tournaments, certain participants get a \\"bye\\" (a free pass to the next round without competing) in order to ensure every round has a power of 2 participants. For instance, if there are 5 participants in a round, 3 matches can be held only if 1 of the participants gets a bye and proceeds directly to the next round. Your task is to determine the minimum number of byes required to conduct the tournament. Input The first line contains a single integer, m (1 ≤ m ≤ 1000), representing the number of tournaments. Each of the next m lines contains a single integer n (1 ≤ n ≤ 10^6), representing the number of participants in the tournament. Output For each tournament, output a single line containing the minimum number of byes required to conduct the tournament. Examples Input 3 5 8 13 Output 1 0 3 Explanation Sample 1. In a tournament with 5 participants, in the first round, 3 matches will be held if one participant gets a bye. This leaves 4 participants, who can compete in a perfect bracket (2 matches). Thus, the minimum number of byes required is 1. Sample 2. In a tournament with 8 participants, the tournament can proceed without any byes as 8 is already a power of 2. Thus, the number of byes required is 0. Sample 3. In a tournament with 13 participants, in the first round, we need to reach 8 participants (the highest power of 2 less than 13). Therefore, 5 participants will need to get byes so that the 8 remaining participants can form a perfect bracket. Thus, the number of byes required is 3.","solution":"import math def min_byes_required(n): Returns the minimum number of byes required to proceed in a single-elimination tournament with n participants. # Calculate the next power of 2 greater than or equal to n if n & (n - 1) == 0: # n is already a power of 2 return 0 next_power_of_2 = 1 << (n.bit_length()) return next_power_of_2 - n def process_tournaments(m, participants): results = [] for n in participants: results.append(min_byes_required(n)) return results"},{"question":"# Problem Statement You are given a list of integers and your task is to find the minimum absolute difference between any two elements in the list. Furthermore, for each pair of elements with the minimum absolute difference, you need to print the pairs in ascending order. A pair (a, b) (where a < b) is considered less than another pair (c, d) if a < c or if a == c and b < d. Input - The first line contains a single integer n (2 ≤ n ≤ 100,000), the number of integers in the list. - The second line contains n integers separated by spaces. Each integer x (1 ≤ x ≤ 10^9) represents an element in the list. Output - Print the minimum absolute difference. - Followed by all pairs (a, b) with the minimum absolute difference. Each pair should be printed on a new line in the format \\"a b\\" where a < b. Example Input ``` 5 1 3 4 7 9 ``` Output ``` 1 3 4 ``` Explanation: - The list of integers is [1, 3, 4, 7, 9]. - The minimum absolute difference is 1 (|3 - 4| = 1). - The pairs with this minimum absolute difference are (3, 4). Input ``` 7 10 12 15 20 9 13 25 ``` Output ``` 1 12 13 9 10 ``` Explanation: - The list of integers is [10, 12, 15, 20, 9, 13, 25]. - The minimum absolute difference is 1 (|12 - 13| = 1 and |9 - 10| = 1). - The pairs with this minimum absolute difference are (12, 13) and (9, 10).","solution":"def find_min_abs_difference(n, arr): arr.sort() min_diff = float(\'inf\') result_pairs = [] # Find minimum absolute difference for i in range(1, n): diff = arr[i] - arr[i - 1] if diff < min_diff: min_diff = diff result_pairs = [(arr[i - 1], arr[i])] elif diff == min_diff: result_pairs.append((arr[i - 1], arr[i])) # Output the result print(min_diff) for pair in result_pairs: print(pair[0], pair[1])"},{"question":"Peter is creating a network of devices to automate his smart home. Each device can be connected to other devices via direct connections. However, there are specific rules for connections: 1. Each device can directly connect to at most two other devices. 2. To minimize the complexity, Peter wants to ensure that his network forms a valid binary tree structure. Peter has detailed information about the direct connections allowed between the devices. Write a program to help Peter determine if he can configure the network to form a valid binary tree using the given connections. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of devices and the number of allowed direct connections, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) — indicating that device u can directly connect to device v. Output Print \\"YES\\" if it\'s possible to configure the network as a valid binary tree. Otherwise, print \\"NO\\". Examples Input 3 2 1 2 1 3 Output YES Input 4 3 1 2 1 3 3 4 Output YES Input 4 3 1 2 2 3 2 4 Output NO Input 5 4 1 2 1 3 2 4 3 5 Output YES Explanation In the first example, devices 1, 2, and 3 can form a valid binary tree with device 1 as the root. In the second example, the connections also form a valid binary tree with device 1 as the root. In the third example, there is a node (device 2) which directly connects to three other devices (1, 3, and 4), violating the binary tree structure as each node can connect directly to at most two other nodes. In the fourth example, devices can be arranged in a tree structure where device 1 connects to 2 and 3, device 2 connects to 4, and device 3 connects to 5.","solution":"def can_form_binary_tree(n, m, connections): # A binary tree must have exactly n-1 edges if m != n - 1: return \\"NO\\" from collections import defaultdict, deque adj_list = defaultdict(list) for u, v in connections: adj_list[u].append(v) adj_list[v].append(u) # Each node should not have more than 2 connections in a binary tree for node in adj_list: if len(adj_list[node]) > 2: return \\"NO\\" # Perform a BFS to check if the graph is connected and acyclic (tree property) visited = set() queue = deque([1]) visited.add(1) while queue: current = queue.popleft() for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) if len(visited) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of n integers. Your task is to find two numbers a_i and a_j (i ≠ j) such that the absolute difference between them is minimized. If there are multiple pairs with the same minimum difference, any one of them is acceptable. Constraints * 2 ≤ n ≤ 10^5 * 0 ≤ a_i ≤ 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Output Print two integers a_i and a_j that you selected, with a space in between. Examples Input 5 10 8 15 3 12 Output 10 8 Input 4 1 9 13 6 Output 9 6","solution":"def find_min_abs_diff_pair(n, arr): Finds two numbers a_i and a_j (i ≠ j) such that the absolute difference between them is minimized. If there are multiple pairs with the same minimum difference, any one of them is acceptable. arr.sort() min_diff = float(\'inf\') pair = (arr[0], arr[1]) for i in range(1, n): diff = abs(arr[i] - arr[i - 1]) if diff < min_diff: min_diff = diff pair = (arr[i - 1], arr[i]) return pair if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = find_min_abs_diff_pair(n, arr) print(result[0], result[1])"},{"question":"Given an array of n integers, you are tasked with finding and printing a permutation of the array such that the absolute difference between any two consecutive elements is minimized. If there are multiple solutions, print any one of them. Input The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print n integers — a permutation of the initial array such that the absolute difference between consecutive elements is minimized. If there are multiple solutions, print any one. Examples Input 4 3 1 2 4 Output 1 2 3 4 Input 5 20 10 30 40 50 Output 10 20 30 40 50 Note In the first example, arranging the elements as 1, 2, 3, 4 results in a minimized absolute difference between consecutive elements. In the second example, arranging the elements as 10, 20, 30, 40, 50 results in a minimized absolute difference between consecutive elements.","solution":"def minimize_absolute_difference(arr): Returns a permutation of the array such that the absolute difference between any two consecutive elements is minimized. return sorted(arr) # Example usage: # if __name__ == \\"__main__\\": # n = int(input()) # arr = list(map(int, input().split())) # result = minimize_absolute_difference(arr) # print(\\" \\".join(map(str, result)))"},{"question":"Lara is very concerned about her Computer Science assignment that requires her to understand the concepts of arrays and matrix manipulation. She needs your help with solving a specific problem in her assignment. You are given an MxN matrix and you need to find the sum of all elements in the matrix that are greater than a given number K. INPUT The first line contains two integers M and N (1 ≤ M, N ≤ 10), which represent the number of rows and columns in the matrix. The next M lines each contain N space-separated integers, representing the elements of the matrix (matrix elements will be between 1 and 1000). The last line contains a single integer K (1 ≤ K ≤ 1000). OUTPUT Print the sum of all elements in the matrix that are greater than K. If no such elements exist, print 0. SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 5 SAMPLE OUTPUT 30 Explanation INPUT The matrix is: 1 2 3 4 5 6 7 8 9 and K is 5. OUTPUT The elements greater than 5 are 6, 7, 8, and 9. Their sum is 6 + 7 + 8 + 9 = 30.","solution":"def sum_elements_greater_than_k(matrix, k): Returns the sum of all elements in the matrix that are greater than k. total_sum = 0 for row in matrix: for element in row: if element > k: total_sum += element return total_sum def create_matrix_and_calculate_sum(m, n, matrix_elements, k): Wrapper function to create a matrix from provided elements list and calculate the sum of all elements in the matrix that are greater than k. matrix = [] for i in range(m): row = matrix_elements[i * n:(i + 1) * n] matrix.append(row) return sum_elements_greater_than_k(matrix, k)"},{"question":"A company needs your help to optimize their file storage system. They have a file structure with n folders and they want to flatten this structure while maintaining a specific order. The format of each folder is given as \\"folder_name reorder_level\\". A folder_name can contain any sequence of digits and lowercase English letters with a length from 1 to 6. Each reorder_level is an integer that determines the order in which the folder should appear in the flat structure. The flatter the folder, the sooner it should appear. Folders with the same reorder_level should maintain their original order relative to each other. You need to write a script to move folders from the original structure to the flat structure, ensuring that the correct order is maintained. The only command you can use is \\"move folder_source folder_destination\\", which moves the contents of folder_source to folder_destination. After executing the command, the source folder does not exist anymore, but the destination folder exists and contains all the contents that were originally in the source folder. Input - The first line contains a single integer n (1 ≤ n ≤ 105) — the number of folders. - Each of the next n lines contains a description of a folder in the form \\"folder_name reorder_level\\", where folder_name is the name of a folder and reorder_level is an integer (1 ≤ reorder_level ≤ 1,000,000) denoting the order level. Output - Print the minimum number of \\"move\\" commands needed to achieve the required flattening of the folder structure. - For each command print it in the form \\"move folder_source folder_destination\\". Examples Input 5 folder1 3 folder2 2 folder3 1 folder4 2 folder5 3 Output 4 move folder3 1 move folder4 2 move folder2 3 move folder1 4 Input 4 apple 1 banana 1 cherry 2 date 2 Output 3 move cherry 1 move date 2 move apple 3","solution":"def flatten_structure(n, folders): # Sort folders by reorder_level, stable sort ensures original order for same reorder_level folders_sorted = sorted(folders, key=lambda x: x[1]) move_commands = [] destination_index = 1 # Start moving to folder index 1 for folder in folders_sorted: folder_name, reorder_level = folder move_commands.append(f\\"move {folder_name} {destination_index}\\") destination_index += 1 return move_commands # Helper function to read input, primarily for testing purposes def read_input(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) folders = [] for i in range(1, n + 1): folder_name, reorder_level = data[i].rsplit(\' \', 1) reorder_level = int(reorder_level) folders.append((folder_name, reorder_level)) return n, folders if __name__ == \\"__main__\\": n, folders = read_input() move_commands = flatten_structure(n, folders) print(len(move_commands)) for command in move_commands: print(command)"},{"question":"Write a program that takes a set of integers and determines the minimum number of changes needed to make all the integers equal. The only operation allowed is incrementing or decrementing any integer by 1. # Input - The first line contains an integer `T` denoting the number of test cases. - Each of the next `T` lines contains an integer `N` denoting the number of integers in the set, followed by `N` integers. # Output - For each test case, output a single integer, the minimum number of operations needed to make all the integers in the set equal. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ integer value ≤ 10^9 # Example Input ``` 2 4 1 2 3 4 5 10 10 10 10 10 ``` Output ``` 3 0 ``` # Explanation In the first test case, you can make all integers equal to 2 with a total of 3 operations: - Increment 1 to 2 (1 operation) - Decrement 4 to 3 (1 operation) - Decrement 3 to 2 (1 operation) In the second test case, all integers are already equal, so 0 operations are needed.","solution":"def min_operations_to_make_equal(T, test_cases): For each test case, determine the minimum number of operations needed to make all integers in the set equal by incrementing or decrementing. Parameters: T (int): Number of test cases. test_cases (list): List of tuples, where each tuple contains N followed by N integers. Returns: list: List of minimum number of operations for each test case. results = [] for i in range(T): _, *nums = test_cases[i] median = sorted(nums)[len(nums)//2] operations = sum(abs(num - median) for num in nums) results.append(operations) return results"},{"question":"You are organizing a tournament with n participants, where each participant must play exactly one match with every other participant. Each match results in either a win or a loss for a participant, and a participant earns points for each win according to the number of matches they have won so far in the tournament (inclusive). Specifically, if they have won k matches already, their next win will be worth (k + 1) points. Your task is to determine the maximum possible points that can be scored in the tournament by any single participant. Input The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of participants in the tournament. Output Output a single integer — the maximum possible points that can be scored by any participant in the tournament. Example Input 4 Output 9 Note In a tournament with 4 participants, participant A can play matches as follows for maximum points: - Match 1: A vs B, A wins (gains 1 point, total = 1) - Match 2: A vs C, A wins (gains 2 points, total = 3) - Match 3: A vs D, A wins (gains 3 points, total = 6) - Match 4: A vs B (again), A wins (gains 3 points, total = 9) So, the maximum points scored by participant A is 9.","solution":"def max_points(n): Calculate the maximum possible points that can be scored by any participant in a tournament with n participants. max_points = 0 for k in range(n - 1): max_points += (k + 1) return max_points"},{"question":"In a marketplace, there are multiple vendors. Each vendor sells a certain type of fruit and each fruit’s price may change daily. We want to calculate the total cost and quantity of a list of fruits bought over various days. You\'re given: - A list of days, each with a list of vendors and their prices. - A shopping list containing the quantity of each fruit required. Your task is to create a program that will calculate the total cost needed to buy the quantities mentioned in the shopping list on any given day from different vendors. Instructions: * You will receive multiple test cases. Each test case starts with an integer `d` (1 ≤ d ≤ 50), the number of days. * For each day, you will receive: - An integer `v` (1 ≤ v ≤ 50), the number of vendors. - For each vendor, a string (the fruit name) and an integer (price per unit of that fruit). * Next, you will receive a shopping list containing: - An integer `f` (1 ≤ f ≤ 50), the number of different fruits to buy. - For each fruit, a string (the fruit name) and an integer (quantity needed). Your program should output the total cost for each day. Input: ``` d v vendor_1_name price_1 vendor_2_name price_2 ... vendor_v_name price_v f fruit_1_name quantity_1 fruit_2_name quantity_2 ... fruit_f_name quantity_f ... 0 ``` Output: For each test case, print the total cost for each day in a new line. Example Input: ``` 2 3 Apple 100 Banana 50 Orange 70 2 Apple 2 Banana 3 4 Strawberry 200 Apple 150 Banana 110 Orange 90 3 Strawberry 1 Apple 2 Orange 3 0 ``` Example Output: ``` 350 590 ``` Explanation: On the first day, you buy 2 apples at 100 each and 3 bananas at 50 each, making the total cost 2*100 + 3*50 = 200 + 150 = 350. On the second day, you buy 1 strawberry at 200, 2 apples at 150 each, and 3 oranges at 90 each, making the total cost 1*200 + 2*150 + 3*90 = 200 + 300 + 270 = 770.","solution":"def calculate_total_cost_by_day(days_info): results = [] for day in days_info: vendors = day[\'vendors\'] shopping_list = day[\'shopping_list\'] total_cost = 0 for fruit, qty in shopping_list.items(): if fruit in vendors: total_cost += vendors[fruit] * qty results.append(total_cost) return results def parse_input(data): index = 0 days_info = [] while index < len(data): if data[index] == \'0\': break d = int(data[index]) index += 1 for _ in range(d): v = int(data[index]) index += 1 vendors = {} for _ in range(v): fruit, price = data[index].split() vendors[fruit] = int(price) index += 1 f = int(data[index]) index += 1 shopping_list = {} for _ in range(f): fruit, qty = data[index].split() shopping_list[fruit] = int(qty) index += 1 day_info = { \'vendors\': vendors, \'shopping_list\': shopping_list } days_info.append(day_info) return days_info data = [ \'2\', \'3\', \'Apple 100\', \'Banana 50\', \'Orange 70\', \'2\', \'Apple 2\', \'Banana 3\', \'4\', \'Strawberry 200\', \'Apple 150\', \'Banana 110\', \'Orange 90\', \'3\', \'Strawberry 1\', \'Apple 2\', \'Orange 3\', \'0\' ] days_info = parse_input(data) print(calculate_total_cost_by_day(days_info))"},{"question":"Nina is collecting stickers. She wants to create a beautiful collage by arranging her stickers in a straight line. Each sticker has a unique number on it and some colors may repeat. Nina wants to arrange her stickers such that no two adjacent stickers have the same color. Let\'s define the colors as integers ranging from 1 to c. Nina has n stickers, each represented by a number and a color. She wants to create a collage where no two adjacent stickers have the same color. Help Nina to determine if it\'s possible to arrange the stickers in such a way. If yes, provide a possible arrangement, otherwise, inform her that it is impossible. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and c (1 ≤ c ≤ 100), denoting the number of stickers and the number of different colors available. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ n), denoting the numbers on the stickers. The third line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ c), denoting the colors of the stickers where the i-th sticker has color t_i. Output If it is impossible to arrange the stickers as Nina wants, print -1. Otherwise, print a possible arrangement of n integers representing the indices of the stickers in the new order, separated by spaces. Examples Input 5 3 1 2 3 4 5 1 2 3 1 2 Output 1 2 3 5 4 Input 4 2 1 2 3 4 1 1 2 2 Output 1 3 2 4 Input 3 2 1 2 3 1 1 1 Output -1 Note In the first example, Nina can arrange the stickers such that their colors alternate. The valid sequence is [1, 2, 3, 5, 4]. This ensures no two adjacent stickers have the same color. In the second example, one possible arrangement is [1, 3, 2, 4]. There are other valid solutions as well. In the third example, it\'s impossible to arrange the stickers as no two adjacent stickers can have the same color.","solution":"from collections import defaultdict def arrange_stickers(n, c, stickers, colors): Determines if it\'s possible to arrange stickers such that no two adjacent stickers have the same color, and provides one possible arrangement if it is. Args: n: int - number of stickers c: int - number of different colors stickers: List[int] - list of stickers\' numbers colors: List[int] - list of stickers\' colors Returns: List[int] - a possible arrangement of sticker indices or [-1] if impossible # Group stickers by their colors color_groups = defaultdict(list) for i in range(n): color_groups[colors[i]].append(stickers[i]) # Check if there\'s any color with a count greater than (n + 1) // 2 max_allowed = (n + 1) // 2 for color in color_groups: if len(color_groups[color]) > max_allowed: return [-1] # Otherwise, arrange the stickers result = [None] * n sorted_colors = sorted(color_groups, key=lambda x: len(color_groups[x]), reverse=True) # Flatten the color groups by frequency of colors, starting with the most frequent flat_list = [] for color in sorted_colors: for sticker in color_groups[color]: flat_list.append((sticker, color)) # Fill the result array by alternating stickers from flat_list index = 0 for sticker, color in flat_list: result[index] = sticker index += 2 if index >= n: index = 1 return result"},{"question":"You are working on a project that involves analyzing strings with repeating patterns. You need to write a function that identifies if a given string can be constructed by taking a substring and repeating it multiple times. Given a string s, return true if s can be constructed by taking a substring of it and appending multiple copies of the substring together. Otherwise, return false. Input - The input consists of a single line containing the string s. - The length of s will be between 1 and 10^5. - The string s consists of only lowercase English letters. Output - Output a single line containing \\"True\\" if the string can be constructed by repeating a substring, and \\"False\\" otherwise. Examples Input abab Output True Input aba Output False Input abcabcabcabc Output True Note In the first example, the string \\"abab\\" can be constructed by repeating the substring \\"ab\\" two times. In the second example, the string \\"aba\\" cannot be constructed by repeating a substring, so the output is \\"False\\". In the third example, the string \\"abcabcabcabc\\" can be constructed by repeating the substring \\"abc\\" four times.","solution":"def can_be_constructed_by_repeating_substring(s): Determine if the string can be constructed by repeating a substring. n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return True return False"},{"question":"A city is arranged in a grid structure with `n` rows and `m` columns. Each cell in the grid can either be traversable or blocked. You are given the grid configuration as a matrix of integers, where `0` denotes a traversable cell and `1` denotes a blocked cell. Your task is to implement an algorithm to find the shortest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)). If there is no possible path, return `-1`. You can only move up, down, left, or right from a given cell. Input The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers `grid[i][j]` (0 ≤ grid[i][j] ≤ 1), describing the grid. Output Print a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if no such path exists. Examples Input 3 3 0 0 1 0 1 0 0 0 0 Output 5 Input 4 4 0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 Output 7 Input 2 2 0 1 1 0 Output -1 Note In the first sample, the path with the minimum length is from (1, 1) → (2, 1) → (3, 1) → (3, 2) → (2, 2) → (2, 3) → (3, 3) with a length of 5. In the second sample, the path with the minimum length is from (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) → (4, 3) → (4, 4) with a length of 7. In the third sample, there is no possible path from (1, 1) to (2, 2).","solution":"from collections import deque def shortest_path(n, m, grid): Find the shortest path from the top-left corner to the bottom-right corner of the grid. :param n: number of rows in the grid :param m: number of columns in the grid :param grid: 2D list representing the grid where 0 is traversable and 1 is blocked :return: the length of the shortest path or -1 if no path exists if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1,0), (0,1), (-1,0), (0,-1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, distance = queue.popleft() if x == n - 1 and y == m - 1: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1"},{"question":"A large online store wants to analyze the shopping patterns of its customers. One of the insights they are looking for is the maximum number of products a customer bought in any continuous sequence of orders, given the shopping history of a customer. You are provided with the shopping history of customers, which includes the number of products bought in each order. Your task is to write a program that takes the shopping history of multiple customers and outputs the maximum number of products bought in any continuous sequence of orders for each customer. Input Given multiple datasets. Each dataset is given in the following format: m k1 k2 k3 ... km The first line is the number of orders m (1 ≤ m ≤ 10^5). The next line contains m integers, each representing the number of products bought in consecutive orders (1 ≤ ki ≤ 10^9). The input ends with a line containing a single zero. Output For each dataset, output the maximum number of products bought in any continuous sequence of orders. Example Input 5 3 2 1 2 4 6 1 2 3 4 5 6 4 1 3 2 3 0 Output 10 21 9 Explanation In the first dataset, the maximum number of products bought in any continuous sequence is found by summing the entire sequence: 3 + 2 + 1 + 2 + 4 = 10. In the second dataset, the maximum sequence sum is also the sum of the entire sequence: 1 + 2 + 3 + 4 + 5 + 6 = 21. In the third dataset, the maximum sequence sum is obtained by summing the subsequence 1 + 3 + 2 + 3 = 9.","solution":"def max_products_bought(m, orders): Function to calculate the maximum number of products bought in any continuous sequence of orders given the orders in a list for a customer. Parameters: m (int): number of orders orders (list): list of integers representing the number of products bought in each order Returns: int: the maximum number of products bought in any continuous sequence of orders if m == 0: return 0 max_sum = curr_sum = orders[0] for i in range(1, m): curr_sum = max(orders[i], curr_sum + orders[i]) max_sum = max(max_sum, curr_sum) return max_sum def process_input(input_data): Processes the input data and applies max_products_bought function to each dataset. Parameters: input_data (str): multi-line string where each dataset is separated by a new line Returns: list of int: list of results for each dataset input_lines = input_data.strip().split(\'n\') result = [] i = 0 while i < len(input_lines): m = int(input_lines[i]) if m == 0: break orders = list(map(int, input_lines[i+1].split())) result.append(max_products_bought(m, orders)) i += 2 return result"},{"question":"In many mathematical problems, especially those involving prime numbers, understanding and determining the divisors of integers can play a crucial role. In this task, you are to solve a problem involving prime factors of a number. Write a function that takes an integer n and returns the largest prime divisor of n. Input: - There is one single integer n (2 ≤ n ≤ 10^12). Output: - Output a single integer, which is the largest prime divisor of n. Example Input: 100 Output: 5 Input: 97 Output: 97 Explanation: In the first example, the factors of 100 are 2, 2, 5, and 5. The largest prime divisor is 5. In the second example, since 97 is a prime number, it is its own largest prime divisor.","solution":"def largest_prime_divisor(n): Returns the largest prime divisor of n. def is_prime(x): if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True if n <= 1: return None largest_prime = None # Check for smallest factor (2) while n % 2 == 0: largest_prime = 2 n //= 2 # Check for odd factors for i in range(3, int(n ** 0.5) + 1, 2): while n % i == 0: largest_prime = i n //= i # If n becomes a prime number greater than 2 if n > 2: largest_prime = n return largest_prime"},{"question":"You are given an array `a` of `n` integers. An operation involves choosing any two adjacent elements of the array and replacing them with their sum (effectively reducing the length of the array by 1). Your task is to perform a sequence of operations such that the final array contains only one element, and this element is minimized. Input The first line contains a single integer `n` (2 ≤ n ≤ 100) — the initial length of the array. The second line contains `n` integers a1, a2, ..., an (1 ≤ |ai| ≤ 1000) — the elements of the array. Output Print a single integer — the minimum possible resultant element. Examples Input 3 3 1 2 Output 6 Input 4 1 2 3 4 Output 10","solution":"def minimize_final_element(n, a): Returns the minimum possible resultant element by summing all elements. Parameters: n (int): The number of elements in the array. a (list of int): The list of integers. Returns: int: The minimum possible final element. return sum(a)"},{"question":"In a city, there is a grid of size `n x m`. Initially, there is a streetlight in the bottom-left corner and a park in the top-right corner. The streetlight needs to be moved to the park location, but it can only move up and right. At any point, the streetlight can be seen as placed at coordinates (x, y). You can represent the move as changing coordinates to (x+1, y) or (x, y+1). Additionally, there are certain cells in the grid that have obstacles which the streetlight cannot pass through. Given the grid dimensions and the cell positions of the obstacles, determine the number of unique paths from the streetlight to the park, avoiding the obstacles. Input - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the grid. - The second line contains an integer k (0 ≤ k ≤ min(n*m, 100)), the number of obstacles. - Each of the following k lines contains two integers `xi` and `yi` (1 ≤ xi ≤ n, 1 ≤ yi ≤ m), the coordinates of each obstacle. Output - Output a single integer, the number of unique paths from (1, 1) to (n, m) avoiding all obstacles. Examples Input 3 3 1 2 2 Output 2 Input 4 4 2 2 2 3 3 Output 4 Input 2 2 0 Output 2","solution":"def unique_paths_with_obstacles(n, m, obstacles): Returns the number of unique paths from (1, 1) to (n, m) avoiding obstacles. if n == 0 or m == 0: return 0 grid = [[0] * m for _ in range(n)] # Marking the obstacles in the grid for x, y in obstacles: grid[x-1][y-1] = -1 # Starting point if grid[0][0] == -1: return 0 grid[0][0] = 1 # Fill the grid with paths count for i in range(n): for j in range(m): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] if grid[n-1][m-1] == -1: return 0 return grid[n-1][m-1]"},{"question":"A new type of plant species has been discovered on a distant planet. These plants exhibit a unique pattern of growth. Each plant starts as a single cell at time t = 0. Every second, each cell of the plant will either split into exactly two new cells, or die according to the rules below: - A cell will split if it has exactly k neighboring living cells. - A cell will die if it has more than m neighboring living cells. The grid is infinite and initially all cells are dead except for one cell located at (0, 0). You need to determine the state of a specific cell after n seconds. A cell\'s neighbors are the adjacent cells in the grid (up, down, left, and right). Input The first line of input contains three integers n (0 ≤ n ≤ 100), k (1 ≤ k ≤ 4), and m (k ≤ m ≤ 4), representing the number of seconds that have passed, the exact number of neighbors needed for a cell to split, and the maximum number of neighbors a cell can have before it dies, respectively. The second line of input contains the coordinates of the query cell xi, yi ( -10^9 ≤ xi, yi ≤ 10^9). Output Print \\"ALIVE\\" if the cell (xi, yi) is alive after n seconds, otherwise print \\"DEAD\\". Examples Input 3 2 4 1 0 Output ALIVE Input 3 2 4 2 2 Output DEAD Note In the first example, After 3 seconds, the cell (1, 0) will have split and be alive. In the second example, after 3 seconds, there are no cells at (2, 2) since they split and died based on the rules provided.","solution":"def plant_state(n, k, m, xi, yi): Determine the state of a specific cell after n seconds. :param n: Number of seconds that have passed (0 ≤ n ≤ 100) :param k: Exact number of neighbors needed for a cell to split (1 ≤ k ≤ 4) :param m: Maximum number of neighbors a cell can have before it dies (k ≤ m ≤ 4) :param xi: x coordinate of the query cell (-10^9 ≤ xi ≤ 10^9) :param yi: y coordinate of the query cell (-10^9 ≤ yi ≤ 10^9) :return: \\"ALIVE\\" if the cell (xi, yi) is alive after n seconds, otherwise \\"DEAD\\" if n == 0: return \\"ALIVE\\" if xi == 0 and yi == 0 else \\"DEAD\\" # Assuming the cell only spreads horizontally and vertically if abs(xi) + abs(yi) > n: return \\"DEAD\\" return \\"ALIVE\\" if abs(xi + yi) % 2 == n % 2 else \\"DEAD\\""},{"question":"Given an array of positive integers, determine the number of unique subsets where the sum of the subset is even. A subset is considered unique if no other subset in the array has the same set of elements, regardless of the order. Input format: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated positive integers representing the elements of the array. Output format: - Print a single integer representing the number of unique subsets where the sum of the subset is even. Constraints: 1 ≤ N ≤ 20 1 ≤ Array element ≤ 100 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 4 Explanation: The array [1, 2, 3] has the following unique subsets with an even sum: [] (empty subset with sum 0) [2] [1, 3] [2, 3]","solution":"from itertools import combinations def count_even_sum_subsets(array): Returns the number of unique subsets where the sum of the subset is even. n = len(array) even_sum_subsets_count = 0 # Iterate through all possible subset sizes for r in range(n + 1): # Generate all combinations of size r for subset in combinations(array, r): # Check if the sum of the subset is even if sum(subset) % 2 == 0: even_sum_subsets_count += 1 return even_sum_subsets_count"},{"question":"Given a list of integers, you are required to reconstruct a new list according to the following operations: 1. Remove all duplicates from the given list. 2. Sort the remaining elements in ascending order. 3. Replace each element in the sorted list with the sum of itself and all preceding elements in the list. Implement the function according to the above steps and print the final result. You should also ensure that the original list remains unchanged. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the number of elements in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 106) representing the list. Output Print the final list after applying the specified operations. Examples Input 5 3 1 2 1 4 Output 1 3 6 10 Input 6 10 5 8 3 8 3 Output 3 8 16 26 Input 4 2 2 2 2 Output 2","solution":"def reconstruct_list(n, elements): Reconstructs the list according to the provided operations. :param n: Number of elements in the list :param elements: List of integers :return: A new list after the given operations unique_elements = sorted(set(elements)) result = [] current_sum = 0 for elem in unique_elements: current_sum += elem result.append(current_sum) return result"},{"question":"Luisa is organizing a coding competition and wants to create unique prize distributions. Each prize distribution is defined by an array of positive integers where the total number of prizes is the sum of the elements in the array and each element in the array is the count of prizes received by a participant. To ensure the prize distribution is fair, Luisa wants no two participants to receive the same number of prizes. Given the total number of unique prizes Luisa has, find the maximum number of participants she can fairly distribute all prizes to. Input The input consists of a single integer n (1 ≤ n ≤ 10^9) — the total number of unique prizes Luisa has. Output Output the maximum number of participants that can each receive a unique number of prizes. Examples Input 10 Output 4 Input 15 Output 5 Note In the first example, the optimal distribution is [1, 2, 3, 4], summing up to 10. In the second example, the optimal distribution is [1, 2, 3, 4, 5], summing up to 15.","solution":"def maximum_participants(n): Returns the maximum number of participants that can each receive unique number of prizes given the total number of unique prizes n. k = 1 total_prizes = 0 while total_prizes + k <= n: total_prizes += k k += 1 return k - 1"},{"question":"Your company uses a special encoding scheme to protect sensitive data. The encoding process involves two steps: 1. **Permutation Step**: The original data is represented by a sequence of integers. This sequence is then permuted according to a given permutation array `P`. The permutation array contains unique integers from `0` to `n-1`, representing the new positions of the original elements. For example, if the original array is `[a, b, c, d]` and the permutation array is `[2, 0, 1, 3]`, the permuted array will be `[c, a, b, d]`. 2. **Addition Step**: After permutation, a cipher array `C` is added element-wise to the permuted data array, modulo a fixed integer `k`. That is, the element at index `i` in the resulting array will be `(permuted_data[i] + C[i]) % k`. Given the original array `A`, permutation array `P`, cipher array `C`, and integer `k`, perform the encoding and return the resulting array. # Input The first line contains an integer `n` (1 ≤ n ≤ 100,000), the length of arrays `A`, `P`, and `C`. The second line contains `n` integers of array `A` (0 ≤ A[i] < k). The third line contains `n` integers of array `P` (0 ≤ P[i] < n). It is guaranteed that all integers in `P` are unique. The fourth line contains `n` integers of array `C` (0 ≤ C[i] < k). The fifth line contains the integer `k` (1 ≤ k ≤ 1,000,000,000). # Output Output a single line containing `n` integers representing the encoded array. # Example Input ``` 4 3 1 4 2 2 0 1 3 6 5 4 3 10 ``` Output ``` 0 9 5 5 ``` Explanation The original array `A` is `[3, 1, 4, 2]`. The permutation step ordered according to `P = [2, 0, 1, 3]` results in the array `[4, 3, 1, 2]`. Next, adding the cipher array `C = [6, 5, 4, 3]` element-wise, modulo `10`, we get: - `(4 + 6) % 10 = 10 % 10 = 0` - `(3 + 5) % 10 = 8 % 10 = 8` - `(1 + 4) % 10 = 5 % 10 = 5` - `(2 + 3) % 10 = 5 % 10 = 5` Thus, the encoded array is `[0, 8, 5, 5]`. # Notes - Make sure the permutation is applied first before the addition step. - Implement efficient handling for the modulo operation considering the potential large value of `k`.","solution":"def encode_data(n, A, P, C, k): Encode the given data array. Parameters: - n (int): Length of the arrays - A (list of int): Original array - P (list of int): Permutation array - C (list of int): Cipher array - k (int): Modulo value Returns: - list of int: Encoded array # Step 1: Permute the array A using P permuted_data = [A[P[i]] for i in range(n)] # Step 2: Add the cipher array C and take modulo k encoded_data = [(permuted_data[i] + C[i]) % k for i in range(n)] return encoded_data"},{"question":"Maxim loves exploring efficient ways to solve problems, especially when it comes to algorithms related to array manipulation. He recently came across an interesting problem involving subarrays and decided to challenge you with it. Given an array of n integers, find the maximum sum of k consecutive elements in the array. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100 000) — the number of elements in the array and the length of the subarray, respectively. The second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the array. Output Print a single integer — the maximum sum of k consecutive elements in the array. Example Input 8 3 1 2 3 -2 5 -1 2 1 Output 6 Explanation The maximum sum of 3 consecutive elements in the array is 1+2+3=6. Although 5+(-1)+2=6 also gives the sum 6, it isn\'t maximum as ties in value should still prefer the first occurrence.","solution":"def max_sum_of_k_consecutive_elements(n, k, arr): Returns the maximum sum of k consecutive elements in the given array. # Create the sum of the first window window_sum = sum(arr[:k]) max_sum = window_sum # Slide over the array and update the sums for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Olivia has a string s of length n, consisting of lowercase English letters, and wants to know if it\'s possible to modify exactly one character in the string so that the resulting string contains at least three distinct characters. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (3 ≤ n ≤ 1000) — the length of the string. The second line of each test case contains the string s. Output For each test case, print \\"Yes\\" or \\"No\\" depending on whether it is possible to modify exactly one character in the string so that it contains at least three distinct characters. You may print every letter in any case you want. Example Input 5 4 aabc 3 aaa 6 abcdef 5 zzzzy 3 xyy Output Yes No Yes Yes No Note For the 1st case: The string \\"aabc\\" already contains 3 distinct characters \'a\', \'b\', and \'c\'. For the 2nd case: The string \\"aaa\\" cannot be modified to have 3 distinct characters by changing only one character. For the 3rd case: The string \\"abcdef\\" already contains 3 distinct characters. For the 4th case: The string \\"zzzzy\\" can be modified to \\"zzyzy\\" to have distinct characters \'z\', \'y\', and \'z\'. For the 5th case: The string \\"xyy\\" cannot be modified to have 3 distinct characters by changing only one character.","solution":"def can_have_three_distinct_characters(s): Check if it\'s possible to modify exactly one character in the string `s` so that the resulting string contains at least three distinct characters. distinct_chars = set(s) if len(distinct_chars) >= 3: return \\"Yes\\" elif len(distinct_chars) == 2 and len(s) >= 4: return \\"Yes\\" elif len(distinct_chars) == 1 and len(s) >= 3: return \\"No\\" return \\"No\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] results.append(can_have_three_distinct_characters(s)) return results"},{"question":"You have been given an integer array A of size N. Your task is to find the difference between the maximum and minimum value in the array A and print it. Input Format The first line of input contains an integer N, denoting the size of the array. The second line of input contains N integers denoting the elements of the array A. Output Format Print the difference between the maximum and minimum value in the array. Constraints 1 ≤ N ≤ 100 -10^5 ≤ A[i] ≤ 10^5, where A[i] is an element of the array A. SAMPLE INPUT 5 1 3 5 7 9 SAMPLE OUTPUT 8","solution":"def max_min_difference(N, A): This function returns the difference between the maximum and minimum values in the array A. :param N: int - Size of the array :param A: list of int - The array of integers :return: int - Difference between maximum and minimum value max_value = max(A) min_value = min(A) return max_value - min_value"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains an integer representing the height of that cell. You are to perform Q queries where each query consists of two coordinates: (x1, y1) and (x2, y2). For each query, you need to find the maximum height among the cells in the rectangular sub-grid defined by the top-left corner (x1, y1) and the bottom-right corner (x2, y2). Constraints - 1 leq N, M leq 500 - 1 leq Q leq 10^4 - 1 leq x1 leq x2 leq N - 1 leq y1 leq y2 leq M - The height of each cell is an integer between 1 and 10000. Input Input is given from Standard Input in the following format: ``` N M h_{1,1} h_{1,2} ... h_{1,M} h_{2,1} h_{2,2} ... h_{2,M} : h_{N,1} h_{N,2} ... h_{N,M} Q x1_1 y1_1 x2_1 y2_1 x1_2 y1_2 x2_2 y2_2 : x1_Q y1_Q x2_Q y2_Q ``` Output For each query, print the maximum height in the sub-grid specified by (x1, y1) and (x2, y2). Examples Input ``` 3 4 1 3 2 4 5 6 1 2 3 4 7 8 2 1 1 2 2 2 3 3 4 ``` Output ``` 6 8 ``` Input ``` 5 5 1 2 3 4 5 5 4 3 2 1 1 2 3 4 5 5 4 3 2 1 5 5 5 5 5 3 1 1 5 5 2 2 4 4 3 3 3 3 ``` Output ``` 5 4 3 ```","solution":"def find_max_heights(N, M, grid, queries): Find the maximum heights in the sub-grids specified by the queries. :param N: Number of rows in the grid :param M: Number of columns in the grid :param grid: A list of lists of integers representing the grid :param queries: A list of tuples, each containing four integers (x1, y1, x2, y2) :return: A list of integers where each integer is the maximum height for the corresponding query results = [] for query in queries: x1, y1, x2, y2 = query max_height = float(\'-inf\') for i in range(x1-1, x2): for j in range(y1-1, y2): if grid[i][j] > max_height: max_height = grid[i][j] results.append(max_height) return results"},{"question":"A game is played on a 2D grid and involves moving from a starting cell to a target cell. Each cell in the grid can either be walkable or blocked. You are given the grid, the coordinates of the starting cell, and the coordinates of the target cell. Your task is to find the shortest path from the starting cell to the target cell, or determine that no such path exists. Movements are allowed in four possible directions: up, down, left, and right, as long as the movement stays within the grid and moves to a walkable cell. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m characters, where each character is either \'.\' (a walkable cell) or \'#\' (a blocked cell). The following line contains four integers x1, y1, x2, and y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — the coordinates of the starting and target cells (1-based indexing). It is guaranteed that the starting and target cells are walkable (i.e., they contain a \'.\'). Output Print a single integer — the length of the shortest path from the starting cell to the target cell. If no such path exists, print -1. Examples Input 5 5 ..... ..#.. . ..#.. ..... 1 1 5 5 Output 8 Input 3 3 # #.# # 1 1 3 3 Output -1 Note In the first example, the shortest path from the starting cell (1,1) to the target cell (5,5) involves moving around the blocked cells, resulting in a path length of 8. In the second example, there is no path from the starting cell (1,1) to the target cell (3,3) due to the blocked cells surrounding the target.","solution":"from collections import deque def shortest_path(n, m, grid, start, target): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right visited = [[False] * m for _ in range(n)] queue = deque([(start[0] - 1, start[1] - 1, 0)]) # Convert to 0-based index and add distance visited[start[0] - 1][start[1] - 1] = True while queue: x, y, dist = queue.popleft() if (x, y) == (target[0] - 1, target[1] - 1): return dist for move in moves: nx, ny = x + move[0], y + move[1] if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"A network of supercomputers is distributed across several data centers. Each data center contains a different number of supercomputers connected in a tree structure (a connected acyclic graph). Your task is to optimize the total time needed for data synchronization between all supercomputers. In each data center, the time required to synchronize data between two directly connected supercomputers is represented as the weight of the edge connecting them. Given that it is possible to choose any one supercomputer from each data center and directly connect them to one another with an additional edge of zero weight, determine the minimum time required to synchronize data across all supercomputers in all data centers. Input The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. For each test case: - The first line contains an integer k (1 ≤ k ≤ 10) — the number of data centers. - The next line contains k space-separated integers n1, n2, ..., nk (1 ≤ ni ≤ 1000) — where ni is the number of supercomputers in the i-th data center. - The following lines describe the trees within each data center. For the i-th data center, ni-1 lines follow, each containing three integers ai, bi, wi (1 ≤ ai, bi ≤ ni, 1 ≤ wi ≤ 10000) — representing an edge between supercomputer ai and supercomputer bi with weight wi. Output For each test case, output a single integer — the minimum total time required for data synchronization between all supercomputers. Example Input 2 2 3 2 1 2 4 2 3 3 1 2 5 3 2 2 2 1 2 1 1 2 2 1 2 3 Output 7 6 Explanation In the first test case: - The data center 1 has 3 supercomputers with edges (1-2) with weight 4, and (2-3) with weight 3. - The data center 2 has 2 supercomputers with edge (1-2) with weight 5. You can choose two supercomputers, one from each data center, and connect them with an edge of zero weight. The minimum time to synchronize all supercomputers is 4 (from 1-2) + 3 (from 2-3) + 5 (from 1-2 in second data center). In the second test case, you have three data centers: - The first data center of 2 supercomputers with an edge weight of 1. - The second data center of 2 supercomputers with an edge weight of 2. - The third data center of 2 supercomputers with an edge weight of 3. Connecting any supercomputer from each data center with zero weight edges results in a total synchronization time of 1 + 2 + 3 = 6.","solution":"def minimum_synchronization_time(t, test_cases): results = [] for case in test_cases: k = case[0] sizes = case[1] edges = case[2] total_weight = 0 for edge_list in edges: total_weight += sum(weight for a, b, weight in edge_list) results.append(total_weight) return results # Function to parse input into structured test cases def parse_input(input_str): lines = input_str.strip().split(\\"n\\") index = 0 t = int(lines[index]) index += 1 test_cases = [] for _ in range(t): k = int(lines[index]) index += 1 sizes = list(map(int, lines[index].split())) index += 1 edges = [] for size in sizes: current_edges = [] for _ in range(size - 1): a, b, w = map(int, lines[index].split()) index += 1 current_edges.append((a, b, w)) edges.append(current_edges) test_cases.append((k, sizes, edges)) return t, test_cases"},{"question":"Write a function `highestFrequency` that takes a string `s` as input and returns the character that appears the most frequently. In case of a tie, return the character that appears first in the string. Ignore the case of the characters during comparison, but return the original case of the character which appears first in the string. # Example: **Input:** ``` \\"abacabadabacaba\\" ``` **Output:** ``` \'a\' ``` **Input:** ``` \\"abcdeABCDEabcde\\" ``` **Output:** ``` \'a\' ``` # Constraints: - The input string `s` will have a length of at most `10^5`. - The string consists of only alphabetic characters (both uppercase and lowercase). # Function Signature: ```python def highestFrequency(s: str) -> str: pass ``` # Hints: - Consider using a dictionary (or similar structure) to keep track of character frequencies. - Ensure that the counting is case-insensitive, but keep track of the original case of the first occurrence of each character.","solution":"def highestFrequency(s: str) -> str: from collections import defaultdict freq_dict = defaultdict(int) first_occurrence = {} # Convert string to lowercase for counting purposes lower_s = s.lower() for i, char in enumerate(lower_s): freq_dict[char] += 1 if char not in first_occurrence: first_occurrence[char] = s[i] # Find the character with the highest frequency max_freq = max(freq_dict.values()) max_char = None for char in lower_s: if freq_dict[char] == max_freq: max_char = char break return first_occurrence[max_char]"},{"question":"Implement a function that receives a 6x6 matrix filled with integers and outputs the sum of all hourglasses in the matrix. An hourglass is defined as a subset of values in the matrix with indices falling in the following pattern: ``` a b c d e f g ``` In total, there are 16 hourglasses in a 6x6 matrix. Your task is to find the sum of all elements in each hourglass and then return the maximum sum among them. # Input A single 6x6 matrix of integers. # Output An integer representing the maximum hourglass sum. # Constraints - The input matrix will always be 6x6. - Integers in the matrix can be negative, zero, or positive. # Example Input ``` 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 ``` Output ``` 19 ``` # Explanation The hourglasses in the example matrix are: ``` 1 1 1 1 1 0 1 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 1 0 0 0 0 0 ``` Sum of the sensors are: `7, 4, 2, 0, ...` and so on. So, the function should return the maximum hourglass sum which is `19` in this particular example.","solution":"def hourglass_sum(matrix): Calculate the maximum hourglass sum in a 6x6 matrix. Parameters: matrix (list of list of int): A 6x6 matrix of integers. Returns: int: The maximum hourglass sum. max_sum = float(\'-inf\') for i in range(4): for j in range(4): top = matrix[i][j] + matrix[i][j + 1] + matrix[i][j + 2] middle = matrix[i + 1][j + 1] bottom = matrix[i + 2][j] + matrix[i + 2][j + 1] + matrix[i + 2][j + 2] hourglass_sum = top + middle + bottom if hourglass_sum > max_sum: max_sum = hourglass_sum return max_sum"},{"question":"Bob likes to arrange his bookshelf in a particular manner. He stacks his books in increasing order of their height and strictly within a set of height ranges. He recently bought a new set of books and wants to organize them accordingly. Write a program to help him do that. Given a list of books with their respective heights, and the height range [L, R] in which he wants to organize them. Your task is to extract the books that fall within the inclusive range [L, R], sort them in increasing order of their height, and print them. INPUT: The first line contains an integer n, the number of books. The second line contains n space-separated integers, representing the heights of the books. The third line contains two space-separated integers, L and R, representing the inclusive range of heights Bob wants to arrange. OUTPUT: Output the heights of the books that fall within the [L, R] range in sorted order. If no books fall within the range, output \\"No books found\\". CONSTRAINTS: 1 ≤ n ≤ 100000 1 ≤ height of books, L, R ≤ 100000 SAMPLE INPUT 5 15 20 10 30 25 15 25 SAMPLE OUTPUT 15 20 25","solution":"def arrange_books(n, heights, L, R): Arrange books in increasing order of their height within the range [L, R]. Parameters: n (int): Number of books heights (list of int): Heights of the books L (int): Lower bound of the height range R (int): Upper bound of the height range Returns: list of int: Sorted list of heights within the range [L, R] If no books found within range, returns [\'No books found\'] books_in_range = [height for height in heights if L <= height <= R] if not books_in_range: return [\\"No books found\\"] books_in_range.sort() return books_in_range"},{"question":"Alice loves palindromes and numbers. She defines a \\"palindromic range\\" to be a range [L, R] of integers such that the number of palindromic numbers in the range is greater than or equal to P. She wants to check if a given range is a palindromic range or not. A number is said to be palindromic if it reads the same backward as forward (e.g., 121, 1221, 9). You\'re given multiple queries, each query contains three integers: L, R, and P. For each query, determine if the given range [L, R] is a palindromic range or not. Input The first line contains a single integer q (1 ≤ q ≤ 105), the number of queries. q lines follow, each line contains three integers L, R, and P (1 ≤ L ≤ R ≤ 106, 0 ≤ P ≤ (R - L + 1)). Output Print exactly q lines, each line should contain \\"Yes\\" (without quotes) if the range [L, R] is a palindromic range, and \\"No\\" (without quotes) otherwise. Examples Input 3 1 10 3 11 20 5 100 200 9 Output Yes No Yes Note For the first query, the range [1, 10] contains 9 palindromic numbers (1, 2, 3, 4, 5, 6, 7, 8, 9), which is greater than or equal to 3. So the answer is \\"Yes\\". For the second query, the range [11, 20] contains 1 palindromic number (11), which is less than 5. So the answer is \\"No\\". For the third query, the range [100, 200] contains 10 palindromic numbers (101, 111, 121, 131, 141, 151, 161, 171, 181, 191), which is greater than or equal to 9. So the answer is \\"Yes\\".","solution":"def is_palindromic_number(num): return str(num) == str(num)[::-1] def count_palindromic_numbers(L, R): count = 0 for num in range(L, R + 1): if is_palindromic_number(num): count += 1 return count def palindromic_range(queries): results = [] for L, R, P in queries: if count_palindromic_numbers(L, R) >= P: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Morty has recently started learning about prime numbers and their properties. To test his understanding, Rick gives him a challenge. Morty has to find the sum of all prime numbers up to a given positive integer N. The problem: Given a positive integer N, find the sum of all prime numbers less than or equal to N. INPUT First line of input gives T, the number of test cases. T lines follow, each having N as input positive integer. OUTPUT Print the sum of all prime numbers less than or equal to N for each test case. CONSTRAINTS 1 ≤ T ≤ 50 N will be between 1 and 1000000, inclusive. SAMPLE INPUT 2 10 100 SAMPLE OUTPUT 17 1060 Explanation For the first case: The prime numbers ≤ 10 are 2, 3, 5, 7. Their sum is 2 + 3 + 5 + 7 = 17. For the second case: The prime numbers ≤ 100 give the sum 1060.","solution":"def sieve_of_eratosthenes(n): Returns a list of primes <= n using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if is_prime[p]] return prime_numbers def sum_of_primes_up_to_n(n): Returns the sum of all prime numbers less than or equal to n. primes = sieve_of_eratosthenes(n) return sum(primes) def solve_primes_sums(test_cases): Given a list of test cases with values of N, returns a list of sums of all prime numbers less than or equal to each N. result = [] for n in test_cases: result.append(sum_of_primes_up_to_n(n)) return result"},{"question":"Given a list of integers, rotate the list to the right by a given number of steps. Provide the rotated list as the output. input The first line should contain the number of test cases \'T\'. For each test case, the first line will contain two integers: \'N\' (the number of elements in the list) and \'K\' (the number of steps to rotate). The next line will contain \'N\' space-separated integers representing the elements of the list. output For each test case, output the rotated list in a new line. SAMPLE INPUT 3 5 2 1 2 3 4 5 7 3 10 22 13 44 15 36 27 4 4 2 4 6 8 SAMPLE OUTPUT 4 5 1 2 3 15 36 27 10 22 13 44 2 4 6 8","solution":"def rotate_list_right(arr, k): Rotates the list \'arr\' to the right by \'k\' steps. n = len(arr) k = k % n # To handle cases where k > n return arr[-k:] + arr[:-k] def process_input(input_lines): Processes the input and returns the list of rotated arrays for each test case. index = 0 T = int(input_lines[index]) index += 1 results = [] for _ in range(T): N, K = map(int, input_lines[index].split()) index += 1 array = list(map(int, input_lines[index].split())) index += 1 rotated_array = rotate_list_right(array, K) results.append(rotated_array) return results # Example usage input_lines = [ \\"3\\", \\"5 2\\", \\"1 2 3 4 5\\", \\"7 3\\", \\"10 22 13 44 15 36 27\\", \\"4 4\\", \\"2 4 6 8\\" ] results = process_input(input_lines) for result in results: print(\' \'.join(map(str, result))) # For output"},{"question":"Write a function `find_majority_element(nums)` that takes a list of integers `nums` and returns the element that appears more than ⌊n / 2⌋ times, where n is the length of the list. If no such element exists, return `None`. Function Signature: ```python def find_majority_element(nums: List[int]) -> int ``` # Example ```python find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) ``` Output ```python 4 ``` # Example ```python find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) ``` Output ```python None ``` # Constraints * The list `nums` will have at least one element and at most 100,000 elements. * The elements of `nums` are integers where `-10^9 <= nums[i] <= 10^9`. * Any algorithm with O(n^2) complexity will not be sufficient. Aim for O(n) time complexity solution.","solution":"from typing import List def find_majority_element(nums: List[int]) -> int: Returns the element that appears more than ⌊n / 2⌋ times, where n is the length of the list, or None if no such element exists. candidate = None count = 0 # Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count = 1 elif candidate == num: count += 1 else: count -= 1 # Verify if the candidate is actually the majority element if nums.count(candidate) > len(nums) // 2: return candidate return None"},{"question":"Barbara is a professional gardener and loves experimenting with different plant arrangements in her garden. She recently read about a special arrangement called a \\"sunflower pattern,\\" where plants are arranged in concentric circles around a central point. Barbara wants to calculate the total number of plants required to create such a pattern. The pattern is defined as follows: - The center of the pattern has 1 plant. - The first circle around the center has 6 plants. - The second circle has 12 plants. - The third circle has 18 plants, and so on. Each successive circle around the center contains 6 more plants than the previous circle. Input: The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single integer N, representing the number of circles Barbara wants to create around the center. Output: For each test case, output the total number of plants needed to create the N-circle sunflower pattern, including the center plant, separated by new lines. Constraints: - 0 < T <= 100 - 0 < N <= 10^4 Example Input: 2 1 3 Output: 7 37","solution":"def sunflower_pattern_plants(T, test_cases): results = [] for N in test_cases: total_plants = 1 # The center plant for i in range(1, N+1): total_plants += 6 * i results.append(total_plants) return results"},{"question":"An art gallery wants to generate unique IDs for its art pieces to organize its inventory digitally. Each art piece has a name, and multiple pieces may share the same name. To distinguish them, the gallery decides to implement an ID generation system. The rules for generating the ID are as follows: 1. The ID format should be \\"name#number\\" where \\"name\\" is the name of the art piece and \\"number\\" is an integer starting from 1 and incremented for each additional piece of the same name. 2. Each newly added art piece with a name that has already been used should receive an ID with the next sequential number. 3. If an art piece is added for the first time, its ID should be \\"name#1\\". Your task is to write a program that generates the correct IDs based on the order in which the art pieces are added. # Input The input contains a series of names of art pieces, one per line. Each name consists of only alphabetic characters and has a length of less than 50 characters. The input terminates with a single line containing \\"END\\" (without quotes). # Output For each name in the input, output the corresponding ID in the format specified. # Examples **Input** ```text MonaLisa StarryNight MonaLisa ThePersistenceOfMemory MonaLisa StarryNight END ``` **Output** ```text MonaLisa#1 StarryNight#1 MonaLisa#2 ThePersistenceOfMemory#1 MonaLisa#3 StarryNight#2 ``` # Explanation - When \\"MonaLisa\\" is first added, it gets the ID \\"MonaLisa#1\\". - When \\"StarryNight\\" is first added, it gets the ID \\"StarryNight#1\\". - When \\"MonaLisa\\" is added again, it gets the ID \\"MonaLisa#2\\", and so forth. - \\"END\\" signifies the end of the input and should not be processed. Your task is to implement this ID generation system.","solution":"def generate_art_piece_ids(names): Generates a unique ID for each art piece name in the given list. IDs are formatted as \'name#number\' where \'name\' is the name of the art piece, and \'number\' is an integer starting from 1 and incremented for each additional piece of the same name. Parameters: names (list of str): A list of art piece names. Returns: list of str: A list of generated IDs. ids = [] name_count = {} for name in names: if name == \\"END\\": break if name in name_count: name_count[name] += 1 else: name_count[name] = 1 ids.append(f\\"{name}#{name_count[name]}\\") return ids"},{"question":"A delivery service company charges for shipping based on the weight and dimensions of the package. The company uses the following rules to determine the shipping cost: - Base cost: 5 USD - Additional cost per kilogram (kg) of weight: 2 USD/kg - Surcharge for oversized package: 10 USD A package is considered oversized if: - Any dimension exceeds 100 cm, or - The sum of the length, width, and height exceeds 200 cm Write a program that, given the weight and the dimensions (length, width, height) of the package, calculates the total shipping cost. Constraints * Weight is a non-negative integer (0 ≤ weight ≤ 50). * Length, width, and height are positive integers (1 ≤ length, width, height ≤ 200). Input Input is given from Standard Input in the following format: ``` weight length width height ``` Output Print the total shipping cost in USD. Example Input ``` 10 50 50 50 ``` Output ``` 25 ``` Input ``` 20 200 50 30 ``` Output ``` 55 ``` Input ``` 5 110 90 80 ``` Output ``` 25 ```","solution":"def calculate_shipping_cost(weight, length, width, height): Calculate the total shipping cost based on weight and dimensions of the package. base_cost = 5 additional_cost_per_kg = 2 oversized_surcharge = 10 additional_cost = weight * additional_cost_per_kg oversized = length > 100 or width > 100 or height > 100 or (length + width + height) > 200 total_cost = base_cost + additional_cost if oversized: total_cost += oversized_surcharge return total_cost if __name__ == \\"__main__\\": import sys input = sys.stdin.read().strip() weight, length, width, height = map(int, input.split()) print(calculate_shipping_cost(weight, length, width, height))"},{"question":"A company consists of teams with varying numbers of employees. Each team is assigned a project and every employee on the team is designated as either a leader or a participant. Every project has certain roles that must be filled by leaders, and some can be filled by either leaders or participants. The company needs your help to determine if the teams are correctly balanced according to the project\'s requirements. You are given multiple projects, where each project has the following information: - The number of roles that must be filled by leaders (l) - The number of roles that can be filled by either leaders or participants (p) You are also given the structure of each team: - The total number of employees on the team (t) - The number of leaders in the team (a) Your task is to determine if there are enough leaders on the team to fill the required roles, and if the total number of employees is sufficient to fill both the required and optional roles for each project. Assume that each project is handled by an independent team with no overlap. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the number of projects. - The next n lines each contain four integers l, p, t, and a (0 ≤ l, p ≤ 100; 1 ≤ t ≤ 100; 0 ≤ a ≤ t). Output: For each project, print \\"YES\\" if the team\'s structure meets the project\'s requirements, or \\"NO\\" otherwise. Examples: Input: 3 3 2 5 3 2 1 4 1 1 4 5 2 Output: YES NO YES","solution":"def is_team_balanced(n, project_team_info): result = [] for data in project_team_info: l, p, t, a = data if a >= l and t >= (l + p): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given a list of `n` integers where each integer occurs exactly twice except for one integer that occurs only once. Your task is to find the integer that occurs only once. Input: - The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^6), representing the number of integers in the list. - The second line contains `2n-1` integers where each integer in the list occurs exactly twice except for one integer which occurs only once. Output: - Print the integer that occurs only once. Example: Input: 5 1 2 3 4 5 2 3 4 1 Output: 5 Explanation: In the input list, every integer appears twice except for `5` which appears only once. Therefore, the output is `5`.","solution":"def find_unique_number(arr): Returns the integer that occurs only once in the list where every other integer occurs twice. :param arr: List of integers :return: The integer that occurs only once unique_num = 0 for num in arr: unique_num ^= num return unique_num"},{"question":"Given a circular list of integers, your task is to write a function that rotates the list by `k` positions. The rotation is performed such that after rotating, the element at the index `i` moves to `(i+k) % n`, where `n` is the length of the list. The rotation should be performed in-place, meaning that you should not use extra space for another list. Input: The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains `n` space-separated integers — the elements of the list. The third line contains the integer `k` (0 ≤ k ≤ 100) — the number of positions to rotate. Output: Print the resulting list after rotating by `k` positions. Examples Input 5 1 2 3 4 5 2 Output 4 5 1 2 3 Input 4 10 20 30 40 1 Output 40 10 20 30 Input 3 7 8 9 3 Output 7 8 9","solution":"def rotate_list(nums, k): Rotates the list nums by k positions to the right. n = len(nums) k = k % n # In case k is larger than n return nums[-k:] + nums[:-k]"},{"question":"Alice is participating in a programming competition where she needs to solve a grid-related problem. She has a grid of size n x m containing non-negative integers. Each cell (i, j) of the grid has a value grid[i][j]. Alice needs to find the maximum sum she can obtain by starting from the top-left cell (0, 0) and moving to the bottom-right cell (n-1, m-1), under the condition that she can move only to the right or down at any point in time. Write a program to help Alice find the maximum sum. Input The first line contains two integers n and m (1 ≤ n, m ≤ 200), the dimensions of the grid. The next n lines contain m integers each, representing the values in the grid. Each integer is between 0 and 1000. Output Print one number — the maximum sum Alice can obtain. Examples Input 2 3 1 3 1 1 5 1 Output 9 Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the first sample, the path that yields the maximum sum is 1 → 3 → 5 → 1, with a total sum of 1 + 3 + 5 + 1 = 10. In the second sample, the path that yields the maximum sum is 1 → 2 → 3 → 6 → 9, with a total sum of 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_sum_path(grid, n, m): Return the maximum sum path in a grid from the top-left to the bottom-right corner, moving only right or down. Parameters: grid (list of list of int): The grid representation. n (int): The number of rows in the grid. m (int): The number of columns in the grid. Returns: int: The maximum sum obtainable. # Create a dp table with same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the dp table for i in range(n): for j in range(m): # If not in the first row, update current cell from the cell above if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) # If not in the first column, update current cell from the cell to the left if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1] # Helper function to parse input and call the max_sum_path function def solve(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) grid = [] k = 2 for i in range(n): row = list(map(int, data[k:k+m])) grid.append(row) k += m print(max_sum_path(grid, n, m))"},{"question":"In a remote village, there is a legend about a mythical sequence called the \\"Harmonious Sequence.\\" A Harmonious Sequence of length n is an array of integers where the sum of every pair of consecutive integers is divisible by a given integer k. You, as an aspiring coder, are tasked to determine if a given sequence is Harmonious. Write a function `isHarmonious(n, k, sequence)` that returns `True` if the sequence is Harmonious, otherwise it returns `False`. # Input - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the length of the sequence and the divisor respectively. - The second line contains n integers — the elements of the sequence. # Output - Output \\"True\\" if the sequence is Harmonious, otherwise \\"False\\". # Example Input ``` 5 5 10 15 20 25 30 ``` Output ``` True ``` Input ``` 6 3 1 4 7 10 13 16 ``` Output ``` False ``` # Note In the first sample, the sum of every pair of consecutive integers (10 + 15, 15 + 20, 20 + 25, 25 + 30) is divisible by 5, hence the sequence is Harmonious. In the second sample, the sum of the pair (1 + 4 = 5) is not divisible by 3, hence the sequence is not Harmonious.","solution":"def isHarmonious(n, k, sequence): Determines if the given sequence is Harmonious. Parameters: n (int): Length of the sequence. k (int): The divisor. sequence (list of int): The sequence of integers. Returns: bool: True if the sequence is Harmonious, False otherwise. for i in range(n - 1): if (sequence[i] + sequence[i + 1]) % k != 0: return False return True"},{"question":"Farmer Joe manages a moderately sized dairy farm. One of his daily responsibilities is to keep track of the milk production in different sectors of his farm. Each sector is assigned an index in ascending order from 1 up to N. Every day, each sector reports the amount of milk produced, and Farmer Joe stores these records for M days to analyze production trends and make improvements. Joe has several types of queries he needs to perform on this data: 1. Update the amount of milk produced in a specific sector on a specific day. 2. Calculate the total amount of milk produced across all sectors on a given day. 3. Find the total milk production in a specific sector over a range of days. Help Joe by implementing the functionality to handle these queries efficiently. **Input** - The first line contains two integers, N (number of sectors) and M (number of days). - The next N lines contain M integers each, where each integer represents the amount of milk produced in that sector on a specific day. - The following line contains an integer Q denoting the number of queries. - The next Q lines contain one of the following types of queries: - `U i j x`: Update the amount of milk produced in sector `i` on day `j` to `x`. - `D j`: Calculate the total amount of milk produced on day `j` across all sectors. - `S i start end`: Calculate the total milk production in sector `i` from day `start` to day `end` inclusive. **Output** - For each query of type `D` or `S`, output the required answer. **Constraints** - 1 ≤ N, M ≤ 1000 - 1 ≤ Q ≤ 10000 - 1 ≤ i ≤ N - 1 ≤ j, start, end ≤ M - 1 ≤ x ≤ 10000 **Sample Input** ``` 3 3 10 20 30 40 50 60 70 80 90 3 D 2 U 1 2 100 S 2 1 3 ``` **Sample Output** ``` 150 190 ``` **Explanation** - Initially, the totals for day 2 are calculated as 20 + 50 + 80 = 150. - After updating sector 1, day 2 with the new value 100, the revised totals for day 2 become 100 + 50 + 80 = 230. - For sector 2, the total production from day 1 to day 3 is calculated as 40 + 50 + 60 = 150.","solution":"class DairyFarm: def __init__(self, N, M, production): Initialize the farm with N sectors, M days, and initial production values. self.N = N self.M = M self.production = production def update_production(self, sector, day, value): Update the amount of milk produced in a specific sector on a specific day. self.production[sector - 1][day - 1] = value def total_production_day(self, day): Calculate the total amount of milk produced across all sectors on a specific day. return sum(sector[day - 1] for sector in self.production) def total_production_sector(self, sector, start_day, end_day): Find the total milk production in a specific sector over a range of days. return sum(self.production[sector - 1][start_day - 1:end_day]) # Taking sample inputs and processing queries def process_queries(N, M, production, queries): farm = DairyFarm(N, M, production) results = [] for query in queries: parts = query.split() if parts[0] == \'U\': sector, day, value = int(parts[1]), int(parts[2]), int(parts[3]) farm.update_production(sector, day, value) elif parts[0] == \'D\': day = int(parts[1]) results.append(farm.total_production_day(day)) elif parts[0] == \'S\': sector, start_day, end_day = int(parts[1]), int(parts[2]), int(parts[3]) results.append(farm.total_production_sector(sector, start_day, end_day)) return results # Example usage if __name__ == \\"__main__\\": N, M = 3, 3 production = [ [10, 20, 30], [40, 50, 60], [70, 80, 90] ] queries = [ \'D 2\', \'U 1 2 100\', \'S 2 1 3\' ] print(process_queries(N, M, production, queries))"},{"question":"Arya has a collection of N distinct flowers, each having a unique beauty value between 1 and N. She wants to arrange these flowers in a circular fashion in such a way that the absolute difference in beauty values of any two adjacent flowers is maximized. She needs your help to determine the maximum possible sum of absolute differences in beauty values of all adjacent flowers in such an arrangement. Input The first line of the input contains an integer T denoting the number of test cases. Each test case contains a line with a single integer N representing the number of flowers. Output For each test case, output a single integer that is the maximum possible sum of the absolute differences in beauty values of adjacent flowers. Constraints 1 ≤ T ≤ 10^5 2 ≤ N ≤ 10^6 Subtasks Example Input: 2 3 4 Output: 4 8 Explanation In example 1, with N=3, one possible optimal arrangement is [1, 3, 2]. The absolute differences would be |1-3| + |3-2| + |2-1| = 2 + 1 + 1 = 4. In example 2, with N=4, one possible optimal arrangement is [1, 3, 4, 2]. The absolute differences would be |1-3| + |3-4| + |4-2| + |2-1| = 2 + 1 + 2 + 1 = 6. Please note: The arrangement should be circular, so the difference between the first and the last element should also be included in the sum.","solution":"def max_sum_abs_diff(N): return 2 * (N - 1) def solve(T, test_cases): results = [] for N in test_cases: results.append(max_sum_abs_diff(N)) return results"},{"question":"Story You are a project manager at a technology firm. Your company\'s current project involves developing a software package that requires a sequence of tasks to be completed. Each task has a defined duration and dependencies on other tasks, meaning that certain tasks must be completed before others can start. You have been provided with the list of tasks, their durations, and their dependencies. Your goal is to determine the minimum total time required to complete the project following the given dependencies. Problem Given a list of tasks, each with a specified duration and a list of its dependencies, compute the minimum amount of time required to complete all tasks. Input format The input consists of the following lines: 1. An integer `t` (1 ≤ t ≤ 100), representing the number of tasks. 2. For each of the t tasks, there are three lines: - The first line contains the name of the task (a string of at most 100 characters, containing only alphanumeric characters). - The second line contains an integer `d` (1 ≤ d ≤ 1000), representing the duration of the task. - The third line contains an integer `p` (0 ≤ p < t), representing the number of dependencies. - The next line follows with the names of the p tasks that must be completed before this task starts, separated by spaces. Assume all task names are unique. Output format Output one line containing the minimum total time required to complete the project. Input example 1 4 TaskA 3 2 TaskB TaskC TaskB 4 0 TaskC 2 1 TaskB TaskD 5 2 TaskA TaskC Output example 1 14 Input example 2 3 TaskX 5 0 TaskY 1 1 TaskX TaskZ 3 1 TaskY Output example 2 9","solution":"def calculate_min_completion_time(tasks_info): Computes the minimum amount of time required to complete all tasks given their durations and dependencies. from collections import defaultdict, deque # Parse input graph = defaultdict(list) durations = {} in_degree = defaultdict(int) for task_name, task_info in tasks_info.items(): durations[task_name] = task_info[\'duration\'] in_degree[task_name] = task_info[\'dependencies\'] for dep in task_info[\'depends_on\']: graph[dep].append(task_name) # Topological sort and calculate times zero_in_degree_queue = deque([k for k in in_degree if in_degree[k] == 0]) dp = {task: durations[task] for task in zero_in_degree_queue} while zero_in_degree_queue: current_task = zero_in_degree_queue.popleft() for neighbor in graph[current_task]: in_degree[neighbor] -= 1 dp[neighbor] = max(dp.get(neighbor, 0), dp[current_task] + durations[neighbor]) if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) return max(dp.values())"},{"question":"In a faraway land, there are multiple kingdoms, each with its own unique traditions and cultures. Recently, the kings of these kingdoms decided to conduct a grand annual festival. One of the highlights of the festival is a spectacular fireworks display. Each kingdom has a set of fireworks, and they want to launch them in such a way that will wow the audience and create the most visually stunning display. The key to a magnificent fireworks show lies in synchronizing the launch times of the fireworks across the kingdoms. Each firework has a specific time after which it must be launched once the festival starts. However, to add a bit of challenge, there\'s an additional constraint: * The fireworks across all kingdoms must be launched in a non-decreasing order of their launch times. * Additionally, no two fireworks can be launched at the exact same time. Your task is to write a program that helps the kingdoms determine if it\'s possible to synchronize the launch of their fireworks while satisfying all the given constraints. Input: The input is a sequence of datasets. Each dataset is given in the following format: n k1 t1,1 ... t1,k1 ... kn tn,1 ... tn,kn The first line contains a positive integer n, the number of kingdoms (n ≤ 100). Then n lines follow. The i-th line begins with a positive integer ki, the number of fireworks possessed by the i-th kingdom. It is followed by a sequence of ki positive integers. The j-th integer ti,j represents the launch time after which the j-th firework of the i-th kingdom must be launched (ti,j ≤ 10000). These integers are separated by a single space. The number of fireworks is not greater than 10000. You may assume that the launch times for each kingdom are sorted in non-decreasing order. The input is terminated by a line with a single zero. This line should not be processed. Output: For each dataset, print a single line. If they can launch all their fireworks according to the constraints, print \\"Possible\\" (without quotes). Otherwise, print \\"Impossible\\". Example: Input: 3 3 1 4 6 2 2 5 2 3 7 3 3 1 5 7 2 2 5 2 3 6 0 Output: Possible Impossible","solution":"def can_synchronize_fireworks(data): Determines if it\'s possible to synchronize the launch of fireworks from multiple kingdoms while satisfying the constraints. :param data: List of strings, where each string represents lines of input. :return: List of strings, \\"Possible\\" or \\"Impossible\\" for each dataset. results = [] idx = 0 while idx < len(data): n = int(data[idx]) idx += 1 if n == 0: break all_fireworks = [] for _ in range(n): kingdom_data = list(map(int, data[idx].split())) all_fireworks.extend(kingdom_data[1:]) idx += 1 all_fireworks.sort() is_possible = True for i in range(len(all_fireworks) - 1): if all_fireworks[i] == all_fireworks[i + 1]: is_possible = False break results.append(\\"Possible\\" if is_possible else \\"Impossible\\") return results"},{"question":"This is an algorithm implementation problem where you are given a binary tree and you need to find the maximum sum path from the root node down to any leaf node. # Problem Statement: Given a binary tree, where each node contains an integer value, find the maximum sum of the numbers along a path from the root node to any leaf node. # Input: - The first line contains an integer `N`, the number of nodes in the binary tree. - The next `N` lines each contain three integers representing a node `val`, its left child `left`, and its right child `right`. - `val` is the value at the current node. - `left` is the index of the left child node (0-indexed, or -1 if no left child). - `right` is the index of the right child node (0-indexed, or -1 if no right child). # Output: - A single integer representing the maximum sum of the numbers along a path from the root node to any leaf node. # Constraints: - 1 ≤ N ≤ 1000 - -1000 ≤ val ≤ 1000 - The tree contains at least one node. # Example: Input: ``` 5 10 1 2 -2 3 4 -3 -1 -1 7 -1 -1 2 -1 -1 ``` Output: ``` 15 ``` # Explanation: The tree structure is: ``` 10 / -2 -3 / 7 2 ``` The maximum path sum is 10 -> -2 -> 7, which equals 15. The problem requires an understanding of binary trees and depth-first search. It tests the ability to traverse a tree, perform computations at each node, and aggregate results to find the maximum value path.","solution":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_list): if not node_list: return None nodes = [None if val == -1 else TreeNode(val) for val, _, _ in node_list] for idx, (val, left, right) in enumerate(node_list): if left != -1: nodes[idx].left = nodes[left] if right != -1: nodes[idx].right = nodes[right] return nodes[0] def max_sum_path_from_root_to_leaf(root): if root is None: return 0 if root.left is None and root.right is None: return root.value left_sum = max_sum_path_from_root_to_leaf(root.left) if root.left else float(\'-inf\') right_sum = max_sum_path_from_root_to_leaf(root.right) if root.right else float(\'-inf\') return root.value + max(left_sum, right_sum) def find_max_sum_path(node_data): node_list = [(val, left, right) for val, left, right in node_data] root = build_tree(node_list) return max_sum_path_from_root_to_leaf(root)"},{"question":"Alice and Bob are playing a game. They start with a string `s` consisting of lowercase English letters. The game involves two players who take turns. Alice takes the first turn. On each player\'s turn, they must pick a substring `t` of `s` and remove all occurrences of `t` from `s`. The player who cannot make a move because the string is empty loses the game. Both Alice and Bob play optimally, meaning they make the best possible move at each step. Your task is to determine who will win the game given the initial string `s`. Input The input consists of a single string `s` (1 ≤ |s| ≤ 100), where |s| is the length of the string. Output Print `Alice` if Alice wins the game, or `Bob` if Bob wins the game. Example Input ababa Example Output Alice Explanation Alice can remove the substring `ab` and changes the string to `aba`. Bob has a few choices now, let\'s assume he removes the substring `a`, then the string becomes `b`. Alice removes `b`, and the string is empty. Since Bob cannot make a move, Alice wins.","solution":"def game_winner(s): Determines who will win the game given the initial string `s`. Returns \'Alice\' if Alice wins the game, or \'Bob\' if Bob wins the game. from collections import Counter # Count frequencies of each character freq = Counter(s) # If all characters appear an even number of times, Bob wins if all(v % 2 == 0 for v in freq.values()): return \\"Bob\\" # If there\'s any character that appears an odd number of times, Alice wins return \\"Alice\\""},{"question":"Alice and Bob are playing a pattern guessing game with sequences of numbers. They need to guess the next number in a sequence based on a given rule. The rule can be derived from either an arithmetic progression (AP) or a geometric progression (GP). Your task is to determine the type of progression (AP or GP) and then predict the next three numbers in the sequence. The sequences given will always have at least three numbers. Input The first line contains an integer T, the number of test cases. Each of the next T lines contain N space-separated integers, representing the sequence. Output For each test case, output a single line with the type of progression (either \\"AP\\" or \\"GP\\") followed by the next three numbers in the sequence, in order. Example Input 3 2 4 6 8 10 3 9 27 5 10 15 20 25 30 Output AP 12 14 16 GP 81 243 729 AP 35 40 45","solution":"def guess_sequence(t, sequences): results = [] for seq in sequences: if len(seq) < 3: results.append(\\"Invalid\\") continue # Determine if the sequence is AP or GP is_ap = seq[1] - seq[0] == seq[2] - seq[1] # Check the common difference is_gp = seq[1] / seq[0] == seq[2] / seq[1] # Check the common ratio if is_ap: d = seq[1] - seq[0] next_numbers = [seq[-1] + i * d for i in range(1, 4)] results.append(f\\"AP {\' \'.join(map(str, next_numbers))}\\") elif is_gp: r = seq[1] / seq[0] next_numbers = [int(seq[-1] * (r ** i)) for i in range(1, 4)] results.append(f\\"GP {\' \'.join(map(str, next_numbers))}\\") else: results.append(\\"Unknown pattern\\") return results"},{"question":"Alice has an array of integers. Bob can perform the following operations on any subarray an unlimited number of times in any order: * Increase every element of the subarray by 1. * Decrease every element of the subarray by 1. * Multiply every element of the subarray by -1. Bob wants to transform the initial array into a target array using the operations described above. For given queries, determine if it is possible to transform a subarray of the initial array into a subarray of the target array. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100000), representing the lengths of the initial and target arrays respectively. The second line contains n integers A1, A2, ..., An (|Ai| ≤ 1000) - the initial array. The third line contains m integers B1, B2, ..., Bm (|Bi| ≤ 1000) - the target array. The fourth line contains the number of queries Q (1 ≤ Q ≤ 100000). The following Q lines each contain four space-separated integers ai, bi, ci, di. These represent the i-th query: is it possible to transform the subarray A[ai..bi] into the subarray B[ci..di] using the allowed operations? Here, U[x..y] is a subarray of U that begins at index x (indexed from 1) and ends at index y. In particular, U[1..|U|] is the whole array U. It is guaranteed that 1 ≤ a ≤ b ≤ n and 1 ≤ c ≤ d ≤ m. Output Print a string of Q characters, where the i-th character is \'1\' if the answer to the i-th query is positive, and \'0\' otherwise. Example Input 5 5 1 -2 3 4 -5 -1 2 3 -4 5 4 1 3 2 4 2 4 1 3 1 5 1 5 3 5 3 5 Output 0011 Note In the first query, we can achieve the result, for instance, by performing the following operations. However, we can\'t have every element transformed by exactly the same number of operations due to limitations. In the third query, both the entire arrays match when appropriate operations are applied. The operations should make it feasible to form arrays as expected. For those that cannot be achieved directly (due to a discrepancy in numbers of steps needed), it cannot be done so hence the output.","solution":"def can_transform(initial, target, queries): n = len(initial) m = len(target) # Calculate absolute value prefix sums for the initial array initial_abs_prefix_sums = [0] * (n + 1) for i in range(1, n + 1): initial_abs_prefix_sums[i] = initial_abs_prefix_sums[i - 1] + abs(initial[i - 1]) # Calculate absolute value prefix sums for the target array target_abs_prefix_sums = [0] * (m + 1) for i in range(1, m + 1): target_abs_prefix_sums[i] = target_abs_prefix_sums[i - 1] + abs(target[i - 1]) results = [] for a, b, c, d in queries: sum_initial = initial_abs_prefix_sums[b] - initial_abs_prefix_sums[a - 1] sum_target = target_abs_prefix_sums[d] - target_abs_prefix_sums[c - 1] if sum_initial == sum_target: results.append(\'1\') else: results.append(\'0\') return \'\'.join(results)"},{"question":"A warehouse management system needs to optimize the routes of robots picking up inventory. The warehouse is organized in a grid of cells, where each cell may or may not contain obstacles. Each robot can only move up, down, left, or right, and cannot move diagonally or through obstacles. The goal is to find the shortest path for a robot from its starting position to its destination. Write a program that takes as input the dimension of the grid, the initial position of the robot, the destination position, and the positions of obstacles. The program should output the shortest distance the robot needs to travel, or -1 if the destination cannot be reached. Input The program will receive multiple test cases. Each test case is described by the following format: m n x1 y1 x2 y2 k ox1 oy1 ox2 oy2 :: oxk oyk The first line contains two integers: m and n (1 ≤ m, n ≤ 1000), the dimensions of the grid. The second line contains four integers: x1 y1 x2 y2 (1 ≤ x1, y1, x2, y2 ≤ m, n), the starting position (x1, y1) and the destination position (x2, y2). The third line contains an integer k (0 ≤ k ≤ 100000), the number of obstacles. The next k lines each contain two integers: oxi oyi (1 ≤ oxi, oyi ≤ m, n), representing the position of the obstacles. The end of input is indicated by a single line of zeroes. Output For each test case, print the shortest distance from the starting position to the destination, or -1 if it cannot be reached. Example Input 5 5 1 1 5 5 3 3 3 2 2 5 1 4 4 0 6 7 1 1 6 7 1 3 4 0 Output 8 9","solution":"from collections import deque def is_valid(cell, grid, rows, cols, visited): x, y = cell return 0 <= x < rows and 0 <= y < cols and grid[x][y] == 0 and not visited[x][y] def bfs_shortest_path(grid, start, end): rows, cols = len(grid), len(grid[0]) queue = deque([(start, 0)]) visited = [[False]*cols for _ in range(rows)] visited[start[0]][start[1]] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: (x, y), dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid((nx, ny), grid, rows, cols, visited): visited[nx][ny] = True queue.append(((nx, ny), dist + 1)) return -1 def process_test_cases(): results = [] while True: m, n = map(int, input().split()) if m == 0 and n == 0: break x1, y1, x2, y2 = map(int, input().split()) k = int(input()) obstacles = [tuple(map(int, input().split())) for _ in range(k)] grid = [[0] * n for _ in range(m)] for ox, oy in obstacles: grid[ox - 1][oy - 1] = 1 x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 result = bfs_shortest_path(grid, (x1, y1), (x2, y2)) results.append(result) for res in results: print(res) # Uncomment below line to run the function # process_test_cases()"},{"question":"Given a string consisting of lowercase letters, you need to determine the number of contiguous substrings that have at least one vowel (a, e, i, o, u). Write a function that receives a string and returns this count. A substring is defined as any contiguous sequence of characters within the string. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Input The input contains a single string s (1 ≤ |s| ≤ 1000). The string contains only lowercase letters. Output Output a single integer, indicating the number of substrings that contain at least one vowel. Examples Input aba Output 5 Input xyz Output 0 Note In the first example \\"aba\\", the substrings are \\"a\\", \\"b\\", \\"a\\", \\"ab\\", \\"ba\\", and \\"aba\\". The substrings containing at least one vowel are \\"a\\", \\"a\\", \\"ab\\", \\"ba\\", and \\"aba\\", thus the answer is 5. In the second example \\"xyz\\", none of the substrings contain a vowel, thus the answer is 0.","solution":"def count_substrings_with_vowel(s): Returns the count of all contiguous substrings that contain at least one vowel. vowels = set(\'aeiou\') count = 0 n = len(s) for i in range(n): for j in range(i + 1, n + 1): if any(char in vowels for char in s[i:j]): count += 1 return count"},{"question":"In a fictional country, there are various provinces, each with a network of cities connected by roads. The country is planning to improve its infrastructure by ensuring that every city has access to a hospital. To achieve this, the government has decided on the following rules: 1. Each hospital can serve multiple cities. 2. Each city can only be served by one hospital. 3. Every city must have at least one hospital within a maximum distance of D. You are given the number of cities N, the number of roads M, the maximum distance D within which a city must have access to a hospital, and the list of roads connecting the cities. Your task is to determine the minimum number of hospitals needed to ensure that every city has access to a hospital within the specified distance D. Each road connects two cities directly, and the distance for each road is given. # Input The first line of the input contains three integers: N (1 ≤ N ≤ 100000), M (0 ≤ M ≤ 200000), and D (1 ≤ D ≤ 1000000). The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 1000000), where (u, v) represents a road connecting city u and city v with a distance w. # Output The output consists of only one line. Output the minimum number of hospitals required to ensure that every city has access to a hospital within the distance D. # Example Input 6 7 3 1 2 1 2 3 1 3 4 1 4 5 1 5 6 1 1 3 3 3 6 2 # Example Output 2 # Explanation In this example, placing one hospital in city 2 and one in city 5 is sufficient, ensuring that all cities have access to a hospital within the distance D=3. inp","solution":"from collections import deque, defaultdict def min_hospitals(n, m, d, roads): graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) neighborhoods = [] while queue: current, dist = queue.popleft() if dist > d: continue for neighbor, weight in graph[current]: if not visited[neighbor] and dist + weight <= d: visited[neighbor] = True queue.append((neighbor, dist + weight)) return [i for i in range(1, n + 1) if visited[i]] uncovered = set(range(1, n + 1)) hospitals = 0 while uncovered: city = uncovered.pop() neighborhoods = bfs(city) uncovered -= set(neighborhoods) hospitals += 1 return hospitals"},{"question":"Write a function to simulate a game called \\"Number Reduction.\\" In this game, you are given an array of positive integers. You can perform a specific operation any number of times: choose any two elements in the array, add them together, and replace one of them with the sum, while the other element is set to zero. The goal is to reduce the array to a single non-zero value. Write a function `number_reduction(arr)` that takes a list of integers as input and returns the minimum number of operations required to reduce the array to a single non-zero value. # Input: - The input is a single list of positive integers `arr`, where `1 ≤ len(arr) ≤ 1000` and each integer is between `1` and `10^9`. # Output: - Return a single integer, the minimum number of operations needed to reduce the array to a single non-zero value. # Example: ```python def number_reduction(arr): # Function implementation goes here # Example 1: print(number_reduction([1, 2, 3])) # Output: 2 # Example 2: print(number_reduction([5, 3, 9, 4])) # Output: 3 ``` # Note: In the first example, you can perform the operations in the following sequence: 1. Add 1 and 2 to get [3, 0, 3]. 2. Add 3 and 3 to get [6, 0, 0]. In the second example, you can perform the operations in the following sequence: 1. Add 3 and 5 to get [8, 0, 9, 4]. 2. Add 4 and 8 to get [12, 0, 9, 0]. 3. Add 9 and 12 to get [21, 0, 0, 0].","solution":"def number_reduction(arr): Returns the minimum number of operations required to reduce the array to a single non-zero value. # The minimum number of operations is equal to the length of array minus one, # because each operation reduces the number of non-zero elements by one. return len(arr) - 1"},{"question":"In a class of students, each student has a unique identification number (ID) and a list of scores they\'ve received over the semester for various subjects. Each student is identified by a numeric ID and each score is represented as an integer. You need to calculate the average score for each student and then determine the highest average score among all the students. Constraints * 1 leq M leq 10^5 (number of students) * 1 leq K_i leq 10^5 (number of scores for the i-th student) * 0 leq scores leq 100 Input The input is given from Standard Input in the following format: M ID_1 S_1,1 S_1,2 ... S_1,K_1 ID_2 S_2,1 S_2,2 ... S_2,K_2 : ID_M S_M,1 S_M,2 ... S_M,K_M Output Print the highest average score among all students. Round off the average score to 2 decimal places. Examples Input 3 1 70 80 90 2 85 95 3 60 100 85 70 Output 90.00 Input 2 101 50 60 70 102 85 90 95 80 Output 87.50 Input 1 23 88 92 Output 90.00","solution":"def highest_average_score(input_data): Calculate and return the highest average score among all students. Args: input_data (str): Multiline string where the first line contains the number of students. Each subsequent line contains a student ID followed by their scores. Returns: float: The highest average score rounded to two decimal places. lines = input_data.strip().split(\'n\') num_students = int(lines[0]) high_avg = 0.0 for i in range(1, num_students + 1): data = list(map(int, lines[i].split())) student_id = data[0] scores = data[1:] avg_score = sum(scores) / len(scores) if avg_score > high_avg: high_avg = avg_score return round(high_avg, 2)"},{"question":"A robot is positioned at the origin (0, 0) of an infinite 2D grid. The robot can move in any of the four cardinal directions (North, South, East, and West) by one unit at a time. You are given a string consisting of the characters \'N\', \'S\', \'E\', and \'W\'. Each character in the string represents a move in the corresponding direction. Write a program to determine the robot\'s final coordinates after it has completed all its moves. Input The only line of input contains a string with between 1 and 100 characters, inclusive. Each character in the string is one of \'N\', \'S\', \'E\', or \'W\'. Output Output two integers separated by a space, representing the final coordinates of the robot. Examples Input NNEESSWW Output 0 0 Input NNNWWW Output -3 3 Input ESES Output 2 -2","solution":"def final_coordinates(moves): Calculate the final coordinates after a series of moves. Args: moves (str): A string representing movements, where each character is one of \'N\', \'S\', \'E\', \'W\'. Returns: tuple: The final coordinates (x, y) after executing all the moves. x, y = 0, 0 for move in moves: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 return x, y"},{"question":"Problem You are tasked with implementing a simulator for a simplistic traffic control system for a single-lane road. There are two types of vehicles on this road: cars and trucks. Each vehicle can have its own speed and can enter or exit the road at any given time. Your task is to process a series of queries to simulate this traffic flow. Each query consists of one or more integers and is given as follows: 0 T S | A vehicle of type T (car or truck) enters the road with speed S. 1 P | All vehicles move P units forward at their respective speeds. 2 | Output the total number of vehicles currently on the road as \\"vehicles N\\". 3 k | If there are k or more vehicles on the road, output the speed of the k-th vehicle from the entry point as \\"speed V\\". If there are fewer than k vehicles, print \\"vehicle -1\\". 4 ns np r | At distance ns, if there are any vehicles within np distance, remove them from the road. Output the number of vehicles removed as \\"cleared X\\". The input satisfies the following conditions: * T is either \\"car\\" or \\"truck\\". * S is an integer representing speed. * 1 ≤ P ≤ 1000 * 1 ≤ k ≤ 1000 * 1 ≤ ns, np, r ≤ 1000 * No more than 100000 queries * Each type of input contains valid integer values. Input The input consists of multiple lines of queries. The end of the input is denoted by the line \\"0 0\\". Output For each query with output instructions, print the corresponding result. Example Input 0 car 50 0 truck 75 0 car 60 1 1 2 3 2 4 100 20 15 0 0 Output vehicles 3 speed 75 cleared 0","solution":"class TrafficSimulator: def __init__(self): self.vehicles = [] def add_vehicle(self, type_vehicle, speed): self.vehicles.append((type_vehicle, speed, 0)) def move_vehicles(self, distance): for i in range(len(self.vehicles)): vehicle = self.vehicles[i] self.vehicles[i] = (vehicle[0], vehicle[1], vehicle[2] + (vehicle[1] * distance)) def count_vehicles(self): return len(self.vehicles) def get_kth_vehicle_speed(self, k): if 0 < k <= len(self.vehicles): return self.vehicles[k - 1][1] return -1 def clear_vehicles(self, ns, np): removed_count = 0 remaining_vehicles = [] for vehicle in self.vehicles: _, _, position = vehicle if abs(position - ns) <= np: removed_count += 1 else: remaining_vehicles.append(vehicle) self.vehicles = remaining_vehicles return removed_count def simulate_traffic(queries): simulator = TrafficSimulator() results = [] for query in queries: parts = query.split() if parts[0] == \\"0\\" and len(parts) == 3: type_vehicle = parts[1] speed = int(parts[2]) simulator.add_vehicle(type_vehicle, speed) elif parts[0] == \\"1\\": p = int(parts[1]) simulator.move_vehicles(p) elif parts[0] == \\"2\\": results.append(f\\"vehicles {simulator.count_vehicles()}\\") elif parts[0] == \\"3\\": k = int(parts[1]) speed = simulator.get_kth_vehicle_speed(k) results.append(f\\"speed {speed if speed != -1 else \'-1\'}\\") elif parts[0] == \\"4\\": ns = int(parts[1]) np = int(parts[2]) removed_v = simulator.clear_vehicles(ns, np) results.append(f\\"cleared {removed_v}\\") elif parts[0] == \\"0\\" and parts[1] == \\"0\\": break return results"},{"question":"Jon is passionate about gardening and decided to plant some flowers in his garden. He has several rows in his garden bed, and each row can be represented as a list of integers where each integer denotes the height of a plant. Jon wants to arrange the plants in each row such that the heights are in non-decreasing order when viewed from left to right. However, Jon realized that rearranging the plant directly in the garden might be challenging, so he wants to know the minimum number of adjacent swaps required to sort each row. Write a program that Jon can use to calculate the minimum number of adjacent swaps needed to sort each row of plants. Input: The first line contains an integer t, the number of rows. The following t lines contain space-separated integers representing the heights of the plants in each row. Output: Print a single integer for each row, representing the minimum number of adjacent swaps needed to sort that row. Constraints: 0 ≤ t ≤ 100 1 ≤ length of each row ≤ 1000 1 ≤ height of each plant ≤ 10000 SAMPLE INPUT 3 3 1 2 4 5 6 1 5 3 4 SAMPLE OUTPUT 2 0 2","solution":"def merge_sort_and_count(arr): Helper function that uses merge sort and counts inversions. Args: arr (list): List of integers representing plant heights. Returns: tuple: A sorted list of integers and the count of adjacent swaps (inversions). if len(arr) <= 1: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort_and_count(arr[:mid]) right, right_inv = merge_sort_and_count(arr[mid:]) merged, merge_inv = merge_and_count(left, right) return merged, left_inv + right_inv + merge_inv def merge_and_count(left, right): Helper function that merges two sorted lists and counts inversions. Args: left (list): Left half of the list. right (list): Right half of the list. Returns: tuple: A merged sorted list and the count of adjacent swaps (inversions). merged = [] i = j = swaps = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 swaps += len(left) - i merged.extend(left[i:]) merged.extend(right[j:]) return merged, swaps def minimum_adjacent_swaps(rows): Returns the minimum number of adjacent swaps needed to sort each row of plants. Args: rows (list of list): A list where each element is a list of integers representing plant heights. Returns: list: A list of integers where each element represents the minimum number of adjacent swaps for that row. results = [] for row in rows: _, count = merge_sort_and_count(row) results.append(count) return results"},{"question":"Given an integer array `arr` of positive numbers and another integer `target`, find all unique combinations in `arr` where the sum of the combination is equal to `target`. The same number may be chosen from `arr` an unlimited number of times. Input The first line contains an integer n (1 ≤ n ≤ 20) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 50) — the elements of the array. The third line contains an integer target (1 ≤ target ≤ 500). Output Print all unique combinations in any order where the sum of the combination is equal to `target`. Do not print the same combination twice or in a different order. Examples Input 4 2 3 6 7 7 Output 2 2 3 7 Input 3 2 4 6 8 Output 2 2 2 2 2 2 4 4 4 6 2","solution":"def combination_sum(arr, target): def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(arr)): # ensure the element is greater than zero if arr[i] <= target: backtrack(i, target - arr[i], path + [arr[i]]) arr = sorted(set(arr)) # remove duplicates and sort result = [] backtrack(0, target, []) return result"},{"question":"Given an array of N integers, write a program to find the number of unique pairs of indices (i, j) such that i < j and the sum of the elements at these indices is equal to a given target value T. Input: - The first line contains an integer N (size of the array). - The second line contains N space-separated integers representing the elements of the array. - The third line contains the integer T (the target sum). Output: - Print the number of unique pairs (i, j) where i < j and the sum of the elements at these indices equals T. Constraints: 1 ≤ N ≤ 100 -1000 ≤ array elements ≤ 1000 -2000 ≤ T ≤ 2000 SAMPLE INPUT 4 1 2 3 4 5 SAMPLE OUTPUT 2 Explanation The pairs (i, j) are: (1, 2) --> 2 + 3 = 5 (0, 3) --> 1 + 4 = 5 There are two unique pairs in the array that sum to 5.","solution":"def count_unique_pairs_with_target_sum(N, arr, T): Returns the number of unique pairs of indices (i, j) such that 0 <= i < j < N and arr[i] + arr[j] == T. Parameters: - N: int - arr: list of int - T: int Returns: - int: number of unique pairs count = 0 for i in range(N): for j in range(i + 1, N): if arr[i] + arr[j] == T: count += 1 return count"},{"question":"You\'ve been hired to help design a new security system for a high-tech vault. The security system consists of a control panel with a grid of buttons, each marked with a unique integer between 1 and N, where N is the total number of buttons. Pressing a button adds the value of the button to a cumulative sum displayed on a screen. The vault door opens only when a specific target sum, S, is achieved by pressing a combination of buttons exactly once. Importantly, some buttons are disabled and cannot be used in any combination. Your task is to find out if it\'s possible to press a unique combination of enabled buttons that adds up to the target sum S. If it\'s possible, print \\"YES\\" and one of the valid combinations of used buttons. If not, print \\"NO\\". Input The first line of the input contains two integers N and S (1 ≤ N ≤ 20, 1 ≤ S ≤ 200), the number of buttons and the target sum respectively. The second line contains N space-separated integers, where the i-th integer is either the value of the i-th button or 0 if the button is disabled. Output Print \\"YES\\" followed by the values of the buttons that need to be pressed to achieve the target sum S, separated by spaces, or print \\"NO\\" if it\'s not possible. If there are several solutions, output any one of them. Examples Input 5 15 1 2 3 4 5 Output YES 1 2 3 4 5 Input 5 10 1 2 3 4 0 Output YES 1 2 3 4 Input 5 9 1 2 3 0 5 Output YES 1 3 5 Input 5 25 1 2 3 4 5 Output NO Input 5 10 0 0 0 0 0 Output NO Note In the first example, all button values are enabled and any combination of them can be used to achieve the target sum S = 15. In the second example, the fifth button is disabled (marked as 0), but the combination of the other four buttons is sufficient to achieve the target. In the third example, the fourth button is disabled, but a valid combination of the other buttons exists to achieve the target sum. In the fourth and fifth examples, it\'s impossible to achieve the target sum due to insufficient total sum of the enabled buttons.","solution":"def open_vault(N, S, buttons): from itertools import combinations # Filter out disabled buttons valid_buttons = [b for b in buttons if b != 0] # Try all combinations of buttons for r in range(1, len(valid_buttons) + 1): for combo in combinations(valid_buttons, r): if sum(combo) == S: return (\\"YES\\", list(combo)) return (\\"NO\\",) # Example Usage result = open_vault(5, 15, [1, 2, 3, 4, 5]) print(result)"},{"question":"A parking garage uses a digital system to keep track of its total capacity and the current number of parked cars. The garage has two types of cars: compact and regular. The garage can fit up to a maximum of `compactLimit` compact cars and `regularLimit` regular cars at any given time. You must implement a class `ParkingGarage` which supports the following methods: 1. `__init__(self, compactLimit: int, regularLimit: int)`: Initializes the parking garage with the given capacity limits for compact and regular cars. 2. `park(self, carType: str) -> bool`: Accepts a string `carType` which can be either \\"compact\\" or \\"regular\\". If the respective car type\'s capacity limit has not been reached, the method parks the car and returns `True`. Otherwise, it returns `False`. 3. `leave(self, carType: str) -> bool`: Accepts a string `carType` which can be either \\"compact\\" or \\"regular\\". If there is at least one car of the given type currently parked, the method removes a car and returns `True`. Otherwise, it returns `False`. Your methods will be called as follows: ```python obj = ParkingGarage(compactLimit, regularLimit) param_1 = obj.park(carType) param_2 = obj.leave(carType) ``` **Example:** ```python # Initialize the parking garage with capacity limits for compact and regular cars garage = ParkingGarage(2, 2) # Park cars and check if parking was successful print(garage.park(\\"compact\\")) # Prints: True print(garage.park(\\"regular\\")) # Prints: True print(garage.park(\\"compact\\")) # Prints: True print(garage.park(\\"compact\\")) # Prints: False (capacity for compact cars reached) # Leave cars and check if leaving was successful print(garage.leave(\\"compact\\")) # Prints: True print(garage.park(\\"compact\\")) # Prints: True (parking a compact car is now possible again) print(garage.leave(\\"compact\\")) # Prints: True print(garage.leave(\\"compact\\")) # Prints: True print(garage.leave(\\"compact\\")) # Prints: False (no more compact cars to leave) ``` **Constraints:** - `0 <= compactLimit, regularLimit <= 10^3` - `0 <= number of compact or regular cars <= min(compactLimit, regularLimit)`","solution":"class ParkingGarage: def __init__(self, compactLimit: int, regularLimit: int): self.compactLimit = compactLimit self.regularLimit = regularLimit self.compactCount = 0 self.regularCount = 0 def park(self, carType: str) -> bool: if carType == \\"compact\\": if self.compactCount < self.compactLimit: self.compactCount += 1 return True else: return False elif carType == \\"regular\\": if self.regularCount < self.regularLimit: self.regularCount += 1 return True else: return False else: return False def leave(self, carType: str) -> bool: if carType == \\"compact\\": if self.compactCount > 0: self.compactCount -= 1 return True else: return False elif carType == \\"regular\\": if self.regularCount > 0: self.regularCount -= 1 return True else: return False else: return False"},{"question":"You are organizing a coding competition and need to assign each participant a unique ID number. Each participant should be provided with a unique 3-digit ID number that does not start with 0. However, your system only supports generating unique ID numbers in a non-consecutive manner to prevent easy guessing of IDs. Design a function that generates a list of unique and valid 3-digit ID numbers according to the following rules: 1. The first digit cannot be 0. 2. The ID numbers should be non-consecutive. 3. Ensure the IDs cover the maximum possible unique values under the above constraints. Function Signature: `def generate_ids(n: int) -> List[int]` Input - An integer n (1 ≤ n ≤ 900). Output - A list of n unique and valid 3-digit ID numbers. Example Input 5 Output [102, 204, 306, 408, 501] Input 3 Output [147, 258, 369] Note: - The output ID numbers in the example are arbitrary within the constraint rules. Any valid set of unique, non-consecutive ID numbers is acceptable as an output. - Ensure your function efficiently generates the required number of IDs while adhering to the non-consecutive rule.","solution":"from random import sample def generate_ids(n: int) -> list[int]: Generates a list of n unique and valid 3-digit ID numbers. Parameters: n (int): The number of unique, non-consecutive ID numbers to generate. Returns: List[int]: A list containing n unique and valid 3-digit ID numbers. if not (1 <= n <= 900): raise ValueError(\\"n must be between 1 and 900 inclusive\\") # Generating all valid 3-digit IDs valid_ids = [i for i in range(100, 1000) if str(i)[0] != \'0\'] # Shuffle and pick n unique IDs in non-consecutive order return sorted(sample(valid_ids, k=n))"},{"question":"A food delivery company is planning to deliver food to various houses in a city in the least amount of time. The city is represented as a grid of size n x n, where each cell either contains a 0 (empty cell) or a 1 (house). You start from the top-left corner of the grid (cell (0, 0)) and can only move right or down. Determine the minimum number of moves required to deliver food to all houses in the grid. A move is defined as either moving to the right or moving down by one cell. Input The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) which represents the size of the grid. The next n lines contain n integers (either 0 or 1), representing the grid. Output For each test case, output a single integer representing the minimum number of moves required to deliver food to all houses. Example Input 3 3 1 0 0 0 1 0 0 0 1 4 1 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 2 1 0 0 1 Output 4 5 2 Note In the first example, the delivery path could be (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2), requiring 4 moves.","solution":"def min_moves(t, test_cases): results = [] for case in test_cases: n, grid = case # Find the coordinates of all houses houses = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == 1] # We need to reach the farthest house in terms of grid\'s layout max_row = max(h[0] for h in houses) if houses else 0 max_col = max(h[1] for h in houses) if houses else 0 # The minimum number of moves required to deliver food to all houses # is the largest row index or the largest column index, whichever is larger moves = max(max_row, max_col) results.append(moves) return results if __name__ == \\"__main__\\": t = int(input().strip()) test_cases = [] for _ in range(t): n = int(input().strip()) grid = [] for _ in range(n): grid.append(list(map(int, input().strip().split()))) test_cases.append((n, grid)) results = min_moves(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of integers. Your task is to determine if the array can be arranged into a permutation of consecutive integers. Input The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) representing the elements of the array. Output For each test case, print \\"YES\\" if the array can be rearranged to form a permutation of consecutive integers, and \\"NO\\" otherwise. Example Input 3 4 1 4 3 2 5 7 5 9 6 8 3 1 2 4 Output YES YES NO","solution":"def can_be_consecutive(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] arr.sort() is_consecutive = True for j in range(1, n): if arr[j] - arr[j-1] != 1: is_consecutive = False break if is_consecutive: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array a_1, a_2, ..., a_n. Your task is to find the smallest subsegment a_l, a_{l+1}, ..., a_r (1 ≤ l ≤ r ≤ n) such that the sum of the subsegment is greater than or equal to a given integer S. If there are multiple such subsegments, find the one that starts the earliest. Input The first line contains two integers n and S (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9) — the length of the array a, and the integer S. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the array a. Output Print the length of the smallest subsegment with sum greater than or equal to S. If no such subsegment exists, print -1. Example Input 8 15 1 2 3 4 5 6 7 8 Output 2 Note The subsegment [7, 8] has the sum 7 + 8 = 15, which is greater than or equal to 15. It is the smallest subsegment with this property. If there were multiple subsegments with the same length, the one starting earliest in the array should be chosen.","solution":"def smallest_subsegment_with_sum(arr, S): Returns the length of the smallest subsegment with sum greater than or equal to S. If no such subsegment exists, returns -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a grid consisting of \'0\'s and \'1\'s. Your task is to identify the largest rectangular area filled only with \'1\'s in the given grid. Constraints * The grid dimensions are h (height) and w (width) where 1 leq h, w leq 200. * The grid contains only \'0\'s and \'1\'s. Input The input is given in the following format: h ; w grid_1 grid_2 : grid_h Each row of the grid is represented as a string of \'0\'s and \'1\'s. Output Print a single integer that represents the area of the largest rectangle containing only \'1\'s. Example Input 4 5 10100 10111 11111 10010 Output 6","solution":"def maximal_rectangle(grid): if not grid: return 0 max_area = 0 h, w = len(grid), len(grid[0]) heights = [0] * (w + 1) # extra space for convenience for i in range(h): for j in range(w): if grid[i][j] == \'1\': heights[j] += 1 else: heights[j] = 0 stack = [-1] for j in range(w + 1): while heights[j] < heights[stack[-1]]: h = heights[stack.pop()] width = j - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(j) return max_area # Example usage: # h = 4 # w = 5 # grid = [ # \'10100\', # \'10111\', # \'11111\', # \'10010\' # ] # print(maximal_rectangle(grid)) # Output: 6"},{"question":"You are an astronaut stranded on a distant planet and must solve a series of trials to activate the communication device to signal for help. One such trial involves deciphering a sequence of directions. The activation sequence is a string consisting of the characters \'L\', \'R\', \'U\', and \'D\', representing left, right, up, and down movements respectively. However, some sequences are invalid, and you need to determine if the given sequence is valid. A sequence is considered valid if the movements ultimately return you to the starting point. In other words, the number of left movements should be equal to the number of right movements, and the number of up movements should be equal to the number of down movements. Input The input consists of a single line containing the string S (1 ≤ |S| ≤ 100), where S is a string of characters \'L\', \'R\', \'U\', and \'D\'. Output Output \\"YES\\" if the sequence is valid, and \\"NO\\" otherwise. Examples Input LR Output YES Input LLRR Output YES Input LURD Output YES Input LLUURR Output NO","solution":"def is_valid_sequence(sequence): Determine if the sequence of movements is valid, returning \'YES\' if valid and \'NO\' otherwise. Parameters: sequence (str): A string consisting of the characters \'L\', \'R\', \'U\', and \'D\'. Returns: str: \'YES\' if the sequence is valid, \'NO\' otherwise. left_count = sequence.count(\'L\') right_count = sequence.count(\'R\') up_count = sequence.count(\'U\') down_count = sequence.count(\'D\') if left_count == right_count and up_count == down_count: return \'YES\' else: return \'NO\'"},{"question":"A food delivery service operates in a city with n neighborhoods, connected by m two-way roads. Each road connects two neighborhoods and has a certain distance d. The delivery service wants to ensure that they can deliver food from their central kitchen located in neighborhood 1 to all other neighborhoods as efficiently as possible. Your task is to design a system that calculates the minimum distance required to deliver food from the central kitchen to all other neighborhoods. You are given the number of neighborhoods, the number of roads, and the details of each road. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of neighborhoods and the number of roads. The next m lines each contain three integers u, v, and d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 100) — indicating that there is a road between neighborhood u and neighborhood v with distance d. The roads are bidirectional. Output Print n-1 integers, where the i-th integer represents the minimum distance from the central kitchen (neighborhood 1) to neighborhood (i + 1). Examples Input 4 4 1 2 4 1 3 2 2 3 5 2 4 10 Output 4 2 14 Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 Output 2 3 6 7 Notice that the delivery service can take different routes to minimize the travel distance, and the system should account for the shortest possible paths.","solution":"import heapq def dijkstra(n, roads): graph = [[] for _ in range(n + 1)] for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) distances = [float(\'inf\')] * (n + 1) distances[1] = 0 pq = [(0, 1)] # (distance, node) while pq: current_distance, u = heapq.heappop(pq) if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances[2:] # distances to all nodes except the central kitchen (node 1) def calculate_min_distances(n, m, roads): return dijkstra(n, roads)"},{"question":"Sam is a software engineer working on a drone delivery system. The goal of the system is to ensure that drones take the most efficient path between multiple delivery points. Each delivery point can be represented as a node, and the connections (paths) between them are the edges of a graph. Each edge has an associated cost which denotes the cost of traveling between those two points. Sam needs to write a program that calculates the minimum cost to deliver all packages starting from a main distribution center and covering all delivery points exactly once (Traveling Salesman Problem). The cost to return back to the main distribution center should also be included. Given an adjacency matrix of costs between each pair of delivery points, the task is to find the minimum delivery cost to cover all points starting from the first node (index 0). # Input: - The input consists of multiple datasets, ending with a line containing a single zero. - Each dataset starts with an integer n (2 ≤ n ≤ 12), representing the number of delivery points. - Followed by an n x n matrix of integers, where the value at the i-th row and j-th column represents the cost (c_{ij}) (1 ≤ (c_{ij}) ≤ 100), the cost to travel from point i to point j. # Output: For each dataset, output the minimum cost on a single line. # Example: Input: ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 0 ``` Output: ``` 80 64 ``` **Explanation:** 1. For the first dataset, the optimal path could be 0 → 1 → 3 → 2 → 0 with a cost of 10 + 25 + 30 + 15 = 80. 2. For the second dataset, the optimal path could be 0 → 2 → 1 → 0 with a cost of 20 + 15 + 29 = 64.","solution":"from itertools import permutations def tsp(adj_matrix): n = len(adj_matrix) nodes = list(range(n)) min_cost = float(\'inf\') # Create all permutations of nodes except the starting node 0 for perm in permutations(nodes[1:]): current_cost = adj_matrix[0][perm[0]] for i in range(len(perm) - 1): current_cost += adj_matrix[perm[i]][perm[i+1]] current_cost += adj_matrix[perm[-1]][0] if current_cost < min_cost: min_cost = current_cost return min_cost def solve_tsp(problems): results = [] for problem in problems: n = problem[0] if n == 0: break adj_matrix = problem[1] results.append(tsp(adj_matrix)) return results def parse_input(input_data): split_data = input_data.strip().split(\'n\') index = 0 problems = [] while index < len(split_data): n = int(split_data[index]) if n == 0: break adj_matrix = [] for i in range(n): index += 1 row = list(map(int, split_data[index].split())) adj_matrix.append(row) problems.append((n, adj_matrix)) index += 1 return problems def main(input_data): problems = parse_input(input_data) results = solve_tsp(problems) for result in results: print(result)"},{"question":"You are given a binary string s consisting only of characters \'0\' and \'1\'. The string represents a configuration of bulbs where \'0\' indicates a bulb is off and \'1\' indicates a bulb is on. You are allowed to flip the state of any single bulb (i.e., change \'0\' to \'1\' or \'1\' to \'0\') in one operation. Your goal is to make sure that all bulbs are turned off at the end. What is the minimum number of operations required to turn off all the bulbs? Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the binary string. The second line contains a binary string s of length n. Output Print one integer — the minimum number of operations required to turn off all the bulbs. Examples Input 4 1100 Output 2 Input 5 10101 Output 3","solution":"def min_operations_to_turn_off_all_bulbs(n, s): Returns the minimum number of operations required to turn off all the bulbs only by flipping the state of any single bulb at a time. Parameters: n (int): length of the binary string s (str): binary string representing the state of the bulbs Returns: int: minimum number of operations required to turn off all the bulbs return s.count(\'1\')"},{"question":"Given an encoded message containing the digits 1 through 9, determine the total number of ways to decode it using the following mapping: ``` \'A\' -> 1 \'B\' -> 2 \'C\' -> 3 ... \'I\' -> 9 ``` For example, the string \\"12\\" could be decoded as \\"AB\\" (1 2) or \\"L\\" (12), thus the number of ways to decode \\"12\\" is 2. Given a string of numeric characters, write a function to calculate how many different ways you can decode it. Input A single line containing a string `s` (1 ≤ |s| ≤ 100), which consists only of digits and represents a valid message. Output An integer representing the total number of ways to decode the given input string. Examples Input: \\"123\\" Output: 3 (Explanation: \\"123\\" can be decoded as \\"ABC\\" (1 2 3), \\"LC\\" (12 3), or \\"AW\\" (1 23)) Input: \\"226\\" Output: 3 (Explanation: \\"226\\" can be decoded as \\"BBF\\" (2 2 6), \\"BZ\\" (2 26), \\"VF\\" (22 6))","solution":"def num_decodings(s): Calculate the number of ways to decode a given string s using the provided mapping. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 # base case: empty string dp[1] = 1 # base case: non-0 single char for i in range(2, n + 1): single_digit = int(s[i-1:i]) double_digit = int(s[i-2:i]) if 1 <= single_digit <= 9: dp[i] += dp[i-1] if 10 <= double_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Given an array of integers and a target sum, write a function to find two distinct integers in the array that add up to the target sum. If such a pair of integers exists, return their indices. Otherwise, return -1. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and target (|target| ≤ 10^9), the size of the array and the target sum respectively. The second line contains n integers separated by spaces, representing the elements of the array. Each element of the array is between -10^9 and 10^9. Output If such a pair exists, output two integers, the indices of the two integers in the array that add up to the target sum. If there are multiple solutions, output any one of them. If no such pair exists, output -1. Examples Input 5 9 2 7 11 15 1 Output 0 1 Input 4 10 3 3 3 3 Output 0 1","solution":"def find_two_sum_indices(arr, target): Finds two distinct integers in the array that add up to the target sum and returns their indices. If no such pair exists, returns -1. seen_numbers = {} for index, number in enumerate(arr): complement = target - number if complement in seen_numbers: return seen_numbers[complement], index seen_numbers[number] = index return -1"},{"question":"Implement a Railway Reservation System In this exercise, you will design a basic railway reservation system. You need to manage the reservations for trains running between a series of stations. Each train operates between a predefined set of stations in a specific order and accommodates a limited number of passengers. Problem Statement Given the list of stations for each train, and a set of reservation requests, your task is to process each reservation. Each reservation specifies a train, the boarding station, and the destination station. You need to determine if the reservation can be accommodated based on the train\'s capacity and the segment occupancy. If it can, you should update the train\'s capacity for the relevant segments and confirm the reservation. If it cannot, you should reject the reservation. Input Format Input is provided in the following format: 1. An initial list defining the number of trains `T` and the maximum capacity `C` for each train. 2. For each train, a list of `S` containing the sequence of stations the train passes through. 3. The number `Q` of reservation requests. 4. For each reservation request, the train number, the boarding station, and the destination station. The input format is as follows: ``` T C_1 S_1 station_1 ... station_k C_2 S_2 station_1 ... station_m ... C_T S_T station_1 ... station_n Q train_no_i boarding_station_i destination_station_i ... ``` Output Format For each reservation request, output `Confirmed` if the reservation can be successfully made, `Rejected` if it cannot. Constraints * 1 ≤ T ≤ 100 (number of trains) * 1 ≤ C ≤ 100 (max capacity per train) * 2 ≤ |S_i| ≤ 50 (number of stations per train) * 1 ≤ Q ≤ 1000 (number of reservation requests) Example Input ``` 2 30 stationA stationB stationC stationD stationE 50 stationW stationX stationY stationZ 5 1 stationA stationC 1 stationB stationE 2 stationW stationZ 1 stationC stationD 2 stationX stationY ``` Example Output ``` Confirmed Confirmed Confirmed Confirmed Confirmed ``` Explanation - For `Train 1`, it has 30 seats and 5 stations: `stationA`, `stationB`, `stationC`, `stationD`, `stationE`. - For `Train 2`, it has 50 seats and 4 stations: `stationW`, `stationX`, `stationY`, `stationZ`. - First reservation request for `Train 1` from `stationA` to `stationC` can be accommodated, so it is `Confirmed`. - Second request for `Train 1` from `stationB` to `stationE` can also be accommodated, so it is `Confirmed`. - Third request for `Train 2` from `stationW` to `stationZ` can be accommodated, so it is `Confirmed`. - Fourth request for `Train 1` from `stationC` to `stationD` can be accommodated, so it is `Confirmed`. - Last request for `Train 2` from `stationX` to `stationY` can be accommodated, so it is `Confirmed`. Write a function to process the input and produce the correct output.","solution":"class RailwayReservationSystem: def __init__(self): self.trains = [] self.capacities = [] self.occupancies = [] def add_train(self, capacity, stations): self.trains.append(stations) self.capacities.append(capacity) self.occupancies.append({(stations[i], stations[i+1]): 0 for i in range(len(stations) - 1)}) def process_reservation(self, train_no, boarding_station, destination_station): train_index = train_no - 1 stations = self.trains[train_index] station_pairs = self.occupancies[train_index] start_idx = stations.index(boarding_station) end_idx = stations.index(destination_station) # Check if all segments can accommodate one more person for i in range(start_idx, end_idx): segment = (stations[i], stations[i + 1]) if station_pairs[segment] >= self.capacities[train_index]: return \\"Rejected\\" # Update occupancy for the accepted reservation for i in range(start_idx, end_idx): segment = (stations[i], stations[i + 1]) station_pairs[segment] += 1 return \\"Confirmed\\""},{"question":"You\'re given a list of integers. Your task is to determine whether the list can be sorted into a non-decreasing order by performing at most one operation of reversing a contiguous subarray. Constraints * 1 leq N leq 10^5 * Each integer in the list is between 0 and 10^9 Input Input is given from Standard Input in the following format: N a_1 a_2 ldots a_N Output Output \\"Yes\\" if the list can be sorted by reversing at most one contiguous subarray. Otherwise, output \\"No\\". Examples Input 4 1 3 2 4 Output Yes Input 6 3 1 2 4 5 6 Output No Input 5 2 4 3 5 1 Output No","solution":"def can_be_sorted_by_reversing_one_subarray(n, arr): Determines whether the list can be sorted into a non-decreasing order by performing at most one operation of reversing a contiguous subarray. Parameters: n (int): The length of the list. arr (list of int): The list of integers. Returns: str: \\"Yes\\" if the list can be sorted by reversing at most one subarray. Otherwise, \\"No\\". # Step 1: Find the first segment of the array that is out of order start = None for i in range(n - 1): if arr[i] > arr[i + 1]: start = i break # Step 2: If no such segment is found, the array is already sorted if start is None: return \\"Yes\\" # Step 3: Find the end of the out-of-order segment end = None for i in range(start, n - 1): if arr[i] < arr[i + 1]: end = i break if end is None: end = n - 1 # Step 4: Reverse the identified segment reversed_segment = arr[start:end + 1][::-1] # Step 5: Check whether reversing the segment makes the entire array sorted new_arr = arr[:start] + reversed_segment + arr[end + 1:] for i in range(n - 1): if new_arr[i] > new_arr[i + 1]: return \\"No\\" return \\"Yes\\""},{"question":"The local librarian is organizing a book categorization event and needs your help to ensure that books are categorized and placed on shelves efficiently. Each book belongs to a specific category, and each shelf in the library can hold an unlimited number of books, but it can only contain books of one category. The librarian will provide you with the number of days for categorization, the number of books to be categorized each day, and the category of each book. Your task is to find out the minimum number of shelves needed to store all the books such that no shelf contains books from different categories. *Input* The first line contains a single integer D - the number of days. The D cases follow. For each day, the first line contains a single integer N denoting the number of books. The second line contains N integers where each integer represents the category of a book. *Output* For each day, print the minimum number of shelves required to store the books. Constraints 1 ≤ D ≤ 100 1 ≤ N ≤ 1000 1 ≤ Category[i] ≤ 100 *Sample Input* 2 6 1 2 3 1 2 3 4 2 2 2 1 *Sample Output* 3 2 *Explanation* Day 1: There are 6 books, categorized as [1, 2, 3, 1, 2, 3]. To store these books without mixing categories on the same shelf, you need one shelf for each category. Therefore, 3 shelves are needed. Day 2: There are 4 books, categorized as [2, 2, 2, 1]. The optimal solution is to use one shelf for category 2 and another for category 1. Therefore, 2 shelves are needed.","solution":"def minimum_shelves_for_books(D, days_books): Returns the minimum number of shelves needed to store the books for each day. Parameters: D (int): Number of days. days_books (list): List of tuples where each tuple contains the number of books (N) and a list of book categories for that day. Returns: list: A list containing the minimum number of shelves needed for each day. result = [] for num_books, books in days_books: unique_categories = set(books) result.append(len(unique_categories)) return result"},{"question":"A city named Metroville has been expanding its subway network. The city has a series of subway stations connected by bi-directional lines. Each subway station has a unique identifier, and each line connecting two stations has an associated travel time. Commuters want to find the shortest travel time between any two given stations in the network. Your task is to help them by implementing a program that, given the subway network details and a number of commuter inquiries, provides the shortest travel time for each query. Note: If it is not possible to travel between two stations, return -1 for that query. Input The first line contains two integers `n` (1 ≤ n ≤ 300) and `m` (0 ≤ m ≤ 10^4), where `n` is the number of subway stations, and `m` is the number of bi-directional lines. The next `m` lines each contain three integers `u`, `v`, and `t` (1 ≤ u, v ≤ n, 1 ≤ t ≤ 10^4), describing a line between stations `u` and `v` with travel time `t`. The next line contains an integer `q` (1 ≤ q ≤ 10^4), the number of commuter inquiries. The following `q` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), specifying a query for the shortest travel time between stations `a` and `b`. Output For each query, output the shortest travel time between the two given stations. If it is not possible to travel from station `a` to station `b`, print `-1`. Examples Input 4 4 1 2 5 2 3 10 3 4 3 1 4 20 3 1 3 1 4 2 4 Output 15 18 13","solution":"def floyd_warshall(n, edges): # Initialize the distance matrix inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] # Distance to itself is 0 for i in range(n): dist[i][i] = 0 # Initialize distances based on direct edges for u, v, t in edges: dist[u-1][v-1] = t dist[v-1][u-1] = t # Compute shortest paths between all pairs for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_travel_times(n, m, subway_lines, q, queries): dist = floyd_warshall(n, subway_lines) result = [] for a, b in queries: shortest_distance = dist[a-1][b-1] result.append(shortest_distance if shortest_distance != float(\'inf\') else -1) return result"},{"question":"A self-driving car company needs to ensure that all its cars use unique serial numbers that can be checked efficiently. Each serial number is a string consisting of both letters and numbers and follows these rules: 1. The serial number must contain both letters and digits. 2. The letters in the serial number are case-sensitive. 3. The serial numbers need to be checked against a database of previously issued serial numbers to ensure uniqueness. You are tasked with writing a program that verifies whether a given serial number is valid and unique within a list of previously issued serial numbers. **Input:** The input is provided in the following format: - The first line contains an integer N (1 leq N leq 1000), the number of previously issued serial numbers. - The next N lines each contain a string, a previously issued serial number. - The last line contains a string, the serial number to be checked. **Output:** Output \\"VALID\\" if the serial number is valid and unique. Output \\"INVALID\\" if it is not valid, and \\"DUPLICATE\\" if it’s valid but has already been issued. **Examples:** **Input 1:** ``` 3 A1b2 1bcD3 QWERT123 2mnO4 ``` **Output 1:** ``` VALID ``` **Input 2:** ``` 2 ab12 cd34 ab12 ``` **Output 2:** ``` DUPLICATE ``` **Input 3:** ``` 3 Hello1 World2 Python3 No1234 ``` **Output 3:** ``` INVALID ``` **Explanation:** 1. In the first example, the serial number \\"2mnO4\\" is a valid serial number and is unique. 2. In the second example, the serial number \\"ab12\\" is a valid serial number but it has already been issued. 3. In the third example, the serial number \\"No1234\\" is invalid because it is missing a letter.","solution":"def is_valid_serial(serial): Returns True if the serial number contains both letters and digits, False otherwise. has_letter = any(char.isalpha() for char in serial) has_digit = any(char.isdigit() for char in serial) return has_letter and has_digit def check_serial_number(N, issued_serials, serial_to_check): Checks if the given serial number is valid and unique within the issued serial numbers. Returns: \\"VALID\\" if the serial number is valid and unique, \\"INVALID\\" if the serial number is not valid, \\"DUPLICATE\\" if the serial number is valid but already issued. if not is_valid_serial(serial_to_check): return \\"INVALID\\" if serial_to_check in issued_serials: return \\"DUPLICATE\\" return \\"VALID\\""},{"question":"Write a program that takes multiple integers as input and determines if each integer is a perfect square. If the integer is a perfect square, return the square root of the integer; otherwise, return -1. Input The first line contains an integer T, the total number of test cases. Each of the next T lines contains one integer. Output For each integer, display its square root if it is a perfect square, otherwise display -1. Constraints 1 ≤ T ≤ 1000 1 ≤ Integer ≤ 10^6 Example Input 4 4 10 16 25 Output 2 -1 4 5","solution":"import math def is_perfect_square(number): Returns the square root of the number if it is a perfect square, otherwise returns -1. sqrt = int(math.isqrt(number)) if sqrt * sqrt == number: return sqrt else: return -1 def check_perfect_squares(numbers): Given a list of numbers, returns a list with the square root if it is a perfect square, otherwise -1. return [is_perfect_square(num) for num in numbers]"},{"question":"Vanya has a collection of stamps. Each stamp has a unique value associated with it. Vanya wants to create a combination of stamps whose total value is exactly equal to a given sum S. Each stamp can be used at most once. Vanya needs your help to determine if there is a combination of stamps that meets this requirement. Input - The first line contains an integer n (1 ≤ n ≤ 100) - the number of stamps. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) - the values of the stamps. - The third line contains an integer S (1 ≤ S ≤ 10000) - the target sum. Output - Output \\"YES\\" if there is a combination of stamps that adds up to exactly S. Otherwise, output \\"NO\\". Examples Input 5 1 2 3 4 5 9 Output YES Input 4 1 2 3 10 6 Output YES Input 3 3 5 8 7 Output NO Note In the first example, Vanya can use stamps with values 4 and 5 to get a total of 9. In the second example, Vanya can use stamps with values 1, 2, and 3 to get a total of 6. In the third example, there is no combination of stamps that adds up to 7.","solution":"from itertools import combinations def can_create_sum(n, stamps, S): Determines if there\'s a combination of stamps that adds up to exactly S. Args: n : int : number of stamps stamps : list : list of integer values of the stamps S : int : target sum Returns: str : \\"YES\\" if there is a combination that meets the requirement, otherwise \\"NO\\". for r in range(1, n + 1): for comb in combinations(stamps, r): if sum(comb) == S: return \\"YES\\" return \\"NO\\""},{"question":"You are assigned to create a new file system that mimics some of UNIX\'s file system behaviors. The file system needs to manage directories and files where directories can contain other directories and files but files cannot contain anything. The file system should support the following commands: 1. **mkdir** `path` - Creates a new directory at the specified path. All intermediate directories should be created if they do not already exist. If the directory already exists, do nothing. 2. **addFile** `filePath content` - Creates a new file at the specified file path with the given content. If the file already exists, its content should be updated. Intermediate directories in the file path should be created if they do not exist. 3. **ls** `path` - Lists the content of the directory at the specified path. If the path points to a file, it should return just the file name. The contents should be listed in lexicographical order. 4. **getFileContent** `filePath` - Returns the content of the specified file. If the file does not exist, return an empty string. Write a class `FileSystem` that supports the above operations. Consider the file system root as `/`. # Example ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") print(fs.ls(\\"/\\")) # Output: [\\"a\\"] fs.addFile(\\"/a/b/d\\", \\"hello\\") print(fs.ls(\\"/a/b\\")) # Output: [\\"c\\", \\"d\\"] print(fs.getFileContent(\\"/a/b/d\\")) # Output: \\"hello\\" fs.addFile(\\"/a/b/d\\", \\"world\\") print(fs.getFileContent(\\"/a/b/d\\")) # Output: \\"world\\" fs.mkdir(\\"/x/y\\") print(fs.ls(\\"/x\\")) # Output: [\\"y\\"] print(fs.ls(\\"/a/b/d\\")) # Output: [\\"d\\"] ``` # Constraints - The directory path or file path will be a non-empty string and starts with \'/\'. - The content of a file will be a non-empty string. - Directory and file names consist of lower-case alphabetic characters. - At most 1000 commands will be called in total.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def mkdir(self, path: str): parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts: if part not in current: current[part] = {} current = current[part] def addFile(self, filePath: str, content: str): parts = filePath.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts[:-1]: if part not in current: current[part] = {} current = current[part] current[parts[-1]] = content def ls(self, path: str): parts = path.strip(\'/\').split(\'/\') current = self.fs[\'/\'] if not(parts == [\'\']): for part in parts: current = current[part] if isinstance(current, str): return [parts[-1]] else: return sorted(current.keys()) def getFileContent(self, filePath: str) -> str: parts = filePath.strip(\'/\').split(\'/\') current = self.fs[\'/\'] for part in parts: current = current[part] if isinstance(current, str): return current return \\"\\""},{"question":"You are responsible for writing a function that simulates a library\'s book borrowing and returning system. The system must keep track of the books currently borrowed by users and ensure the integrity of borrowing and returning operations. Each user can borrow multiple books, but each book can only be borrowed by one user at a time. Implement a class `Library` with the following methods: 1. `__init__()`: Initializes the library with no books borrowed. 2. `borrow_book(user: str, book: str) -> str`: Allows the specified `user` to borrow the specified `book`. Returns \\"Book borrowed successfully\\" if the operation is successful. Returns \\"Book already borrowed\\" if the book is currently borrowed by another user. 3. `return_book(user: str, book: str) -> str`: Allows the specified `user` to return the specified `book`. Returns \\"Book returned successfully\\" if the operation is successful. Returns \\"Book not borrowed by user\\" if the user did not borrow the book. 4. `borrowed_books(user: str) -> List[str]`: Returns the list of books currently borrowed by the specified user. Constraints: - Usernames and book titles are unique strings composed of alphanumeric characters and underscore, and their length does not exceed 100 characters. - Assume all book titles and usernames are case-sensitive. Example usage: ```python library = Library() # User Alice borrows a book titled \\"Python_Programming\\" print(library.borrow_book(\\"Alice\\", \\"Python_Programming\\")) # Output: \\"Book borrowed successfully\\" # User Bob tries to borrow the same book print(library.borrow_book(\\"Bob\\", \\"Python_Programming\\")) # Output: \\"Book already borrowed\\" # User Alice returns the book print(library.return_book(\\"Alice\\", \\"Python_Programming\\")) # Output: \\"Book returned successfully\\" # User Bob successfully borrows the book print(library.borrow_book(\\"Bob\\", \\"Python_Programming\\")) # Output: \\"Book borrowed successfully\\" # List books borrowed by user Bob print(library.borrowed_books(\\"Bob\\")) # Output: [\\"Python_Programming\\"] # User Alice tries to return a book she didn\'t borrow print(library.return_book(\\"Alice\\", \\"Python_Programming\\")) # Output: \\"Book not borrowed by user\\" ``` Your task is to implement the `Library` class with the described methods so that they handle the borrowing and returning logic appropriately.","solution":"class Library: def __init__(self): self.books = {} self.users = {} def borrow_book(self, user: str, book: str) -> str: if book in self.books: return \\"Book already borrowed\\" self.books[book] = user if user in self.users: self.users[user].append(book) else: self.users[user] = [book] return \\"Book borrowed successfully\\" def return_book(self, user: str, book: str) -> str: if book not in self.books or self.books[book] != user: return \\"Book not borrowed by user\\" self.books.pop(book) self.users[user].remove(book) return \\"Book returned successfully\\" def borrowed_books(self, user: str) -> list: return self.users.get(user, [])"},{"question":"Wet Shark loves arrays and he has recently learned about subarrays. A subarray is a contiguous part of an array. Given an array of n integers, Wet Shark wants to find the length of the longest subarray where the sum of elements is even. If there are multiple subarrays with the same length, return any one of the longest subarrays. Input The first line of the input contains one integer, n (1 ≤ n ≤ 100 000). The next line contains n space-separated integers that represent the array. Each of these integers is in the range from 1 to 10^9, inclusive. Output Print the length of the longest subarray with even sum. Examples Input 5 1 2 3 4 5 Output 4 Input 4 1 1 1 1 Output 4 Note In the first sample, the subarray [1, 2, 3, 4] has an even sum (10) and is the longest such subarray with length 4. In the second sample, the entire array [1, 1, 1, 1] has an even sum (4) and is the longest subarray with length 4.","solution":"def longest_even_sum_subarray_length(n, arr): Returns the length of the longest subarray with an even sum. # We keep track of prefix sums and their positions. prefix_sum = 0 first_odd = -1 last_odd = -1 max_length = 0 for i in range(n): prefix_sum += arr[i] if prefix_sum % 2 == 0: max_length = i + 1 else: if first_odd == -1: first_odd = i else: max_length = max(max_length, i - first_odd) return max_length"},{"question":"A city is organizing a marathon event which will take place along a scenic route that passes through n checkpoints. There are m runners participating in the event. Your task is to help the organizers determine which runner completes the marathon the fastest. Each runner\'s progress is recorded using interval updates. Specifically, you are given the times at which each runner passes certain checkpoints during the race in the form of k updates. Each update indicates that a certain runner has passed a sequence of checkpoints starting from checkpoint l to checkpoint r at a specified time t. You need to determine which runner reached the final checkpoint n the earliest. If there are multiple runners who reached the final checkpoint at the same time, pick the one with the smallest index. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of checkpoints and the number of runners respectively. The second line contains one integer k (1 ≤ k ≤ 5·10^5) — the number of updates. Then k lines follow, each containing four integers runner_i, l_i, r_i, t_i (1 ≤ runner_i ≤ m, 1 ≤ l_i ≤ r_i ≤ n, 1 ≤ t_i ≤ 10^9), where runner_i is the index of the runner, l_i and r_i represent the range of checkpoints covered by the update, and t_i is the time at which the runner_i passes these checkpoints. Output Print a single integer representing the index of the runner who reaches the final checkpoint n the fastest. If multiple runners reach at the same time, print the smallest index among them. Example Input 5 3 6 1 1 2 5 2 1 3 4 1 3 5 7 3 1 4 3 2 4 5 6 3 5 5 8 Output 2","solution":"def find_fastest_runner(n, m, k, updates): # Initialize an array to track the earliest time each runner reaches the final checkpoint n final_times = [float(\'inf\')] * (m + 1) # Process each update for update in updates: runner, l, r, t = update # If the range includes the final checkpoint n if l <= n <= r: # Update the time if this is the first time or a faster time the runner reaches checkpoint n final_times[runner] = min(final_times[runner], t) # Determine the runner with the smallest index who reached the final checkpoint the earliest fastest_runner = None earliest_time = float(\'inf\') for runner in range(1, m + 1): if final_times[runner] < earliest_time: earliest_time = final_times[runner] fastest_runner = runner return fastest_runner"},{"question":"You are given a numerical string S consisting of the digits \'0\' through \'9\'. Your task is to find the length of the longest substring of S that forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers where the difference between any two consecutive numbers is the same. Input The first line of the input contains a numerical string S. Output Your output should contain the single integer representing the length of the longest arithmetic substring of S. Constraints 1 ≤ |S| ≤ 1 000 000; where |S| denotes the length of the given numerical string. Example Input: 123459764320 Output: 5 Explanation In the example, the longest arithmetic substrings are \\"12345\\" and \\"76543\\", both of which have a length of 5.","solution":"def longest_arithmetic_substring(S): Returns the length of the longest arithmetic substring in S. n = len(S) if n < 2: return n max_length = 1 current_length = 1 current_diff = None for i in range(1, n): diff = int(S[i]) - int(S[i - 1]) if current_diff is None or diff == current_diff: current_length += 1 else: current_length = 2 current_diff = diff max_length = max(max_length, current_length) return max_length"},{"question":"You are given an array of integers representing the heights of a series of hills in a landscape. You can perform the following operation any number of times: choose a hill and increase its height by 1, while simultaneously choosing another hill and decreasing its height by 1. Write a program to determine the minimum possible difference in height between the tallest hill and the shortest hill after performing zero or more of these operations. Input The input consists of multiple datasets. Each dataset begins with an integer N (1 ≤ N ≤ 100), the number of hills. It is followed by N integers representing the heights of the hills (1 ≤ height ≤ 1000). The end of input is indicated by a line containing a single zero. Output For each dataset, output the minimum possible difference in height between the tallest hill and the shortest hill after any number of operations. Example Input 5 1 5 9 2 8 4 4 7 2 9 0 Output 0 0","solution":"def min_height_difference(datasets): Given a list of datasets, each representing the heights of hills, return a list of integers where each integer represents the minimum possible difference in height between the tallest hill and the shortest hill after any number of operations for each dataset. results = [] for data in datasets: heights = data[\'heights\'] min_height = min(heights) max_height = min(heights) # The minimum possible difference is 0 results.append(max_height - min_height) return results def parse_input(input_text): Parses the input text and returns structured data. Parameters: - input_text: A string of the input. Returns: A list of dictionaries with \'n\' and \'heights\' keys. lines = input_text.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break heights = list(map(int, lines[i + 1].split())) datasets.append({\'n\': n, \'heights\': heights}) i += 2 return datasets def process_datasets(input_text): datasets = parse_input(input_text) return min_height_difference(datasets)"},{"question":"A particular semester at a university has a specific way to designate weeks. The semester consists of 15 weeks, labeled sequentially from \\"Week1\\" to \\"Week15\\". Write a program that takes as input a number representing the week in the semester and outputs the corresponding week\'s label. Constraints * 1 ≤ week_number ≤ 15 Input The input is given from Standard Input in the following format: week_number Output Print the label for the specified week in the semester. Examples Input 1 Output Week1 Input 8 Output Week8 Input 15 Output Week15","solution":"def get_week_label(week_number): Given the week number (1 to 15), returns the corresponding weekly label. Parameters: week_number (int): An integer between 1 and 15 (inclusive) representing the week number. Returns: str: The label of the week in the format \'Week{week_number}\'. if 1 <= week_number <= 15: return f\\"Week{week_number}\\" else: raise ValueError(\\"week_number must be between 1 and 15\\")"},{"question":"Write a program to find the minimum number of swaps required to bring all the 1s in a given binary array together. Input: The first line will contain the number of test cases. Each test case consists of two lines: the length of the array and the binary array. Output: For each test case, print the minimum number of swaps required to bring all 1s together. Constraints: 1 <= T <= 10 1 <= N <= 1000 Example: Input: 2 7 1 0 1 0 1 0 1 8 1 0 0 1 0 1 0 1 Output: 2 2","solution":"def min_swaps_to_bring_ones_together(n, arr): num_ones = sum(arr) if num_ones == 0 or num_ones == n: return 0 max_ones_in_window = 0 current_ones_count = 0 for i in range(num_ones): current_ones_count += arr[i] max_ones_in_window = current_ones_count for i in range(num_ones, n): current_ones_count += arr[i] - arr[i - num_ones] max_ones_in_window = max(max_ones_in_window, current_ones_count) return num_ones - max_ones_in_window def min_swaps_for_all_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_swaps_to_bring_ones_together(n, arr)) return results"},{"question":"A company wants to track the activity status of its employees within a department. Each employee can be either \'active\' (1) or \'inactive\' (0). The task is to write a method that takes a list of employee statuses and finds the longest sequence of consecutive active employees. If there are multiple sequences of the same longest length, return the first one found. # Input The input begins with an integer T, which represents the number of test cases. Each test case starts with an integer N, the number of employees in the department. This is followed by a list of N integers (each either 0 or 1), representing the activity statuses of the employees. # Output For each test case, print the starting and ending indices of the longest sequence of consecutive active employees. If no active employees are found, return \\"No active sequence found\\". # Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 Each status is either 0 or 1. # Example Input: ``` 3 6 1 1 0 1 1 1 5 1 0 0 0 1 3 0 0 0 ``` Output: ``` 0 1 0 0 No active sequence found ```","solution":"def find_longest_active_sequence(T, test_cases): T: The number of test cases. test_cases: A list of tuples, each tuple contains an integer N, followed by list of N integers (either 0 or 1) results = [] for case in test_cases: N, statuses = case max_length = 0 max_start_idx = -1 curr_length = 0 curr_start_idx = -1 for i in range(N): if statuses[i] == 1: if curr_length == 0: curr_start_idx = i curr_length += 1 else: if curr_length > max_length: max_length = curr_length max_start_idx = curr_start_idx curr_length = 0 # Final check in case the longest sequence ends at the last element if curr_length > max_length: max_length = curr_length max_start_idx = curr_start_idx if max_length == 0: results.append(\\"No active sequence found\\") else: results.append(f\\"{max_start_idx} {max_start_idx + max_length - 1}\\") return results"},{"question":"Mira is learning about sorting algorithms in her computer science class. Her professor gave her an assignment with the following problem: She needs to sort a list of integers in non-decreasing order, but with a twist. The list can contain duplicate integers, and Mira has to ensure that each unique integer is maintained in its original relative order. She\'s given the task of implementing a variation of the classic sorting algorithms which embraces the concept of \'stable sorting\'. However, Mira also wants to add some optimization by avoiding the sorting of already sorted segments within the list. Given this, she needs to write a function that achieves this efficiently. Input: The first line contains T denoting the number of test cases. The first line of each test case contains an integer N, the number of integers in the list. The next line contains N space-separated integers, representing the list of integers to be sorted. Output: For each test case, output a single line containing the list of integers sorted in non-decreasing order while maintaining the above constraints. Sample Input: 2 5 4 3 2 1 0 7 1 2 2 3 3 1 4 Sample Output: 0 1 2 3 4 1 1 2 2 3 3 4 Explanation: In the first test case, the original list [4, 3, 2, 1, 0] is sorted wholly into [0, 1, 2, 3, 4]. In the second test case, the sorted list while maintaining relative order is [1, 1, 2, 2, 3, 3, 4]. Notice how the original relative order of the duplicates \\"2\\" and \\"3\\" is maintained.","solution":"def stable_sort_segments(T, test_cases): results = [] for case_idx in range(T): N = test_cases[case_idx][0] array = test_cases[case_idx][1] # Use stable sorting algorithm (Python\'s built-in sort is stable) sorted_array = sorted(array) # Append the result in the required format results.append(\\" \\".join(map(str, sorted_array))) return results"},{"question":"Write a function that takes a string S as input and returns the string with vowels removed. Input: A single line containing the string S. Output: A single line with the string S after removing all the vowels (both lowercase and uppercase). Constraints: 1 ≤ |S| ≤ 1000 SAMPLE INPUT Hello, World! SAMPLE OUTPUT Hll, Wrld!","solution":"def remove_vowels(S): Removes all vowels from the input string S and returns the resulting string. Vowels considered: a, e, i, o, u (both lowercase and uppercase) vowels = \\"aeiouAEIOU\\" result = \'\'.join([c for c in S if c not in vowels]) return result"},{"question":"You are given a list of integers representing the heights of a group of people standing in line. The line is organized based on the rule that every person should be standing in a position such that the difference in their height with the person immediately next to them is as small as possible. Your task is to rearrange the line to make it as \'smooth\' as possible. Input The first line of input contains one integer n (1 ≤ n ≤ 100) — the number of people in the line. The second line of input contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000), where h_i represents the height of the i-th person. Output Output a single line with n integers representing the rearranged order of heights that minimizes the maximum difference in heights between any two adjacent people. Examples Input 5 4 1 3 9 7 Output 1 3 4 7 9 Input 3 10 20 30 Output 10 20 30 Note In the first example, the rearranged line is 1 3 4 7 9, where the maximum difference between any two adjacent heights is minimized to 3 (between 4 and 7 or between 7 and 9). In the second example, the list is already sorted and the maximum difference is 10 (between any two adjacent heights).","solution":"def rearrange_heights(n, heights): Rearranges the list of heights so that the maximum difference between any two adjacent people is minimized. heights.sort() return heights"},{"question":"Using a similar format and style as the provided question, here is a new coding assessment question: Imagine a robot moving on an infinite 2D grid. The robot starts at the origin point (0, 0) and can execute a sequence of instructions given as a string s of characters \'L\', \'R\', \'U\', and \'D\' which correspond to moving left, right, up, and down respectively. The robot can execute the instructions multiple times, but the goal is for the robot to end up at the origin point (0, 0) after a chosen number of full repetitions of the sequence. Let\'s denote the number of full repetitions as k (1 ≤ k ≤ 10^9). Write a program that determines whether it is possible for the robot to use exactly k full repetitions of the sequence to return to the origin point. Input The input consists of a string s containing the instructions. The string\'s length is n (1 ≤ n ≤ 100). Output Print \\"YES\\" if it is possible for the robot to return to the origin using exactly k full repetitions of the sequence. Otherwise, print \\"NO\\". Examples Input UDLR Output YES Input UURDL Output NO Note In the first example, the robot follows the sequence \'U\', \'D\', \'L\', \'R\' which returns it to the origin point after 1 repetition (k=1) since there is equal movement in each direction canceling each other out. In the second example, the string \'UURDL\' will not allow the robot to return to the origin after any number of repetitions since there is an imbalance in its movements.","solution":"def can_return_to_origin(s): Determines if the robot can return to the origin after k full repetitions of the instruction sequence. x, y = 0, 0 for char in s: if char == \'L\': x -= 1 elif char == \'R\': x += 1 elif char == \'U\': y += 1 elif char == \'D\': y -= 1 if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A mountain array is an array that contains exactly one peak element. An array is considered a mountain array if it satisfies the following properties: - arr.length >= 3 - There exists an index i (0 < i < arr.length - 1) such that: - arr[0] < arr[1] < ... < arr[i - 1] < arr[i] - arr[i] > arr[i + 1] > ... > arr[arr.length - 1] Given an array of integers nums, return the minimum number of elements you need to remove to make nums a mountain array. If it\'s not possible to make nums a mountain array, return -1. INPUT First line is T, the number of test cases. T arrays follow, each array is given in a new line, separated by spaces. OUTPUT For each test case, print the minimum number of elements that need to be removed to make the array a mountain array, or -1 if it\'s not possible. CONSTRAINTS 1 ≤ T ≤ 50 3 ≤ arr.length ≤ 100 0 ≤ arr[i] ≤ 10000 SAMPLE INPUT 3 2 1 4 7 3 2 5 2 2 2 0 2 1 0 SAMPLE OUTPUT 2 -1 0 Explanation CASE 1: Removing elements 1 and 2 results in the mountain array [2, 4, 7, 3, 2]. CASE 2: It\'s not possible to form a mountain array. CASE 3: Already a mountain array.","solution":"def min_removals_to_make_mountain(nums): n = len(nums) if n < 3: return -1 increasing = [1] * n decreasing = [1] * n # Determine the longest increasing sequence ending at each position for i in range(1, n): if nums[i] > nums[i-1]: increasing[i] = increasing[i-1] + 1 # Determine the longest decreasing sequence starting from each position for i in range(n-2, -1, -1): if nums[i] > nums[i+1]: decreasing[i] = decreasing[i+1] + 1 max_mountain = 0 for i in range(1, n-1): if increasing[i] > 1 and decreasing[i] > 1: max_mountain = max(max_mountain, increasing[i] + decreasing[i] - 1) return n - max_mountain if max_mountain >= 3 else -1 def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T+1): nums = list(map(int, lines[i].split())) result = min_removals_to_make_mountain(nums) results.append(result) return results"},{"question":"In an ancient land, the kingdom is structured in a unique way. They have a collection of magical crystals and each crystal has a different power value associated with it. The kingdom\'s sage has decided to arrange these crystals in increasing order of their power values. However, he wants to achieve this rearrangement using a teleportation spell which has limited strength. The teleportation spell can swap any two crystals at most k times. Your task is to determine if it is possible to sort all the crystals in non-decreasing order of their power values using at most k swaps. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10 000) — the number of crystals and the maximum number of swaps allowed. The second line contains n integers, each representing the power value of a crystal. The power values are in the range from 1 to 10^9. Output Print \\"YES\\" if it is possible to sort the crystals within the given number of swaps, otherwise print \\"NO\\". Examples Input 5 2 5 3 1 4 2 Output NO Input 4 3 4 3 2 1 Output YES Input 3 1 3 1 2 Output NO","solution":"def can_sort_crystals(n, k, crystals): Determines if the crystals can be sorted in non-decreasing order using at most k swaps. Parameters: n (int): The number of crystals. k (int): The maximum number of swaps allowed. crystals (list of int): The power values of the crystals. Returns: str: \\"YES\\" if it\'s possible to sort within k swaps, otherwise \\"NO\\". # Create a list of tuples where each tuple is (crystal_power, original_index) indexed_crystals = list(enumerate(crystals)) # Sort the indexed crystals by the power value sorted_crystals = sorted(indexed_crystals, key=lambda x: x[1]) # Dictionary to map the original position to final sorted position position_map = {original_index: i for i, (original_index, _) in enumerate(sorted_crystals)} # Initialize variables for visited nodes and cycle count visited = [False] * n cycle_count = 0 # Count cycles in the permutation represented by position_map for i in range(n): if not visited[i]: # Found the start of a cycle cycle_length = 0 current = i while not visited[current]: visited[current] = True current = position_map[current] cycle_length += 1 # If cycle length is more than 1, we need (cycle_length - 1) swaps to sort it if cycle_length > 1: cycle_count += (cycle_length - 1) # Check if the total required swaps is within the allowed number of swaps if cycle_count <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Two scientists are working together to analyze data. They often need to find patterns in sequences of numbers. One of the scientists asked you to help them by writing a program to determine if a given sequence is an arithmetic sequence. An arithmetic sequence is a sequence of numbers such that the difference between the consecutive terms is constant. Input: The first line contains \'t\', the number of test cases. The first line of each test case contains \'n\', the number of elements in the sequence, followed by \'n\' integers representing the sequence. Output: For each test case, print \\"Is an Arithmetic Sequence\\" if the sequence is an arithmetic sequence, otherwise print \\"Not an Arithmetic Sequence\\". Constraints: 1 ≤ t ≤ 10^3 2 ≤ n ≤ 10^6 -10^9 ≤ sequence elements ≤ 10^9 Author: [Your Name] SAMPLE INPUT 3 5 2 4 6 8 10 4 3 6 9 12 4 1 3 6 9 SAMPLE OUTPUT Is an Arithmetic Sequence Is an Arithmetic Sequence Not an Arithmetic Sequence","solution":"def is_arithmetic_sequence(sequence): if len(sequence) < 2: return False common_difference = sequence[1] - sequence[0] for i in range(2, len(sequence)): if sequence[i] - sequence[i - 1] != common_difference: return False return True def analyze_sequences(test_cases): results = [] for sequence in test_cases: if is_arithmetic_sequence(sequence): results.append(\\"Is an Arithmetic Sequence\\") else: results.append(\\"Not an Arithmetic Sequence\\") return results"},{"question":"Ilya is playing a game with his friends where he needs to distribute candies in the most equitable way possible. He has `n` candies of varying sweetness levels, represented by an array `s` where each element `s[i]` denotes the sweetness of the `i-th` candy. To make the game fair, Ilya wants to distribute all candies to exactly two friends such that the absolute difference in the total sweetness of candies each friend gets is minimized. Write a program to determine the minimum possible absolute difference in the total sweetness of candies distributed to the two friends. # Input The first line contains an integer `n` (1 ≤ n ≤ 50) — the number of candies. The second line contains an array of `n` integers `s[i]` (1 ≤ s[i] ≤ 1000) — the sweetness levels of the candies. # Output Print a single integer — the minimum possible absolute difference in the total sweetness of candies distributed to the two friends. # Example Input 6 1 2 3 4 5 6 Output 1 Input 4 8 6 5 7 Output 0","solution":"def min_sweet_difference(n, s): total_sum = sum(s) half_sum = total_sum // 2 # Create a DP array to store the possible subset sums dp = [False] * (half_sum + 1) dp[0] = True for sweetness in s: for j in range(half_sum, sweetness - 1, -1): if dp[j - sweetness]: dp[j] = True # Find the largest value which can be reached # that is <= half_sum for i in range(half_sum, -1, -1): if dp[i]: subset_sum1 = i break subset_sum2 = total_sum - subset_sum1 return abs(subset_sum2 - subset_sum1)"},{"question":"In an ancient kingdom, the king had a tradition that every citizen has to pay taxes based on the resources they own. The resources are represented as a matrix where each cell indicates the amount of a specific resource a citizen owns. The kingdom\'s taxation system works as follows: Each citizen pays taxes equivalent to the highest value of resources they own in a contiguous submatrix area. A contiguous submatrix is a smaller matrix that can be derived from the original matrix by selecting certain rows and columns such that the rows and columns chosen form a continuous sequence. The king wants to find out the highest tax paid by a citizen considering all possible contiguous submatrices. Your task is to determine the highest possible tax that can be derived from any contiguous submatrix. Input First line contains two integers R and C, the number of rows and columns in the matrix respectively. Then follow R lines, each containing C space-separated integers - the resources owned by citizens in the matrix. Output Print a single integer - the highest possible tax paid by a citizen. Constraints 1 <= R, C <= 100 All resource values are positive and less than 100000000 (10^8) Example 1 Input: 2 3 1 2 3 4 5 6 Output: 6 Example 2 Input: 3 3 1 3 2 6 7 8 4 5 9 Output: 9 Example 3 Input: 1 4 2 4 6 8 Output: 8 Explanation of Sample Cases Example 1: The highest resource value within any possible submatrix is 6. Example 2: The highest resource value within any possible submatrix is 9. Example 3: The highest resource value within any possible submatrix is 8.","solution":"def highest_tax(R, C, matrix): Given a matrix of resources, returns the highest possible tax paid by a citizen, which is equivalent to the highest value in any contiguous submatrix. # Initialize the highest value found highest_value = -1 # Iterate through the entire matrix to find the maximum value for row in matrix: highest_value = max(highest_value, max(row)) return highest_value"},{"question":"The Kingdom of Yoax-Musty is establishing a new network system that involves assigning unique numeric identifiers to its various departments. The network administrator must ensure that these identifiers are arranged in a specific pattern to prevent conflicts. An identifier is said to be \\"conflict-free\\" if for every k consecutive identifiers in the list, there exists at least one unique identifier among them. Given a list of numeric identifiers and a number k, determine whether the list is \\"conflict-free\\". Input The input consists of two lines. The first line contains two integers N (1 ≤ N ≤ 10000) and K (1 ≤ K ≤ N), where N is the number of identifiers and K is the length of the sequence to check. The second line contains N integers, representing the sequence of numeric identifiers. Output Print \\"Yes\\" if the list is conflict-free, and \\"No\\" otherwise. Example Input 6 3 1 2 2 3 4 5 Output Yes Input 6 4 1 1 1 1 2 2 Output No","solution":"def is_conflict_free(N, K, identifiers): Determines if the given list of identifiers is conflict-free. Args: N (int): Number of identifiers. K (int): Length of the sequence to check. identifiers (list): List of numeric identifiers. Returns: str: \\"Yes\\" if the list is conflict-free, \\"No\\" otherwise. for i in range(N - K + 1): if len(set(identifiers[i:i + K])) == K: return \\"Yes\\" return \\"No\\""},{"question":"Given a string `s`, determine if it is a valid password. A valid password must: 1. Contain at least one uppercase letter. 2. Contain at least one lowercase letter. 3. Contain at least one digit. 4. Contain at least one special character from the set `!@#%^&*()-+` 5. Be at least 8 characters long and at most 16 characters long. If the string is a valid password, print \\"YES\\", otherwise print \\"NO\\". INPUT The first line contains an integer `t` denoting the number of test cases. The next `t` lines contain one string per line which is the password that needs to be checked. OUTPUT For each test case, print \\"YES\\" if the string is a valid password, otherwise print \\"NO\\". CONSTRAINTS 1 ≤ t ≤ 100 1 ≤ length of string ≤ 20 SAMPLE INPUT 3 Password1! Pass paW0rd BetterP@ssw0rd SAMPLE OUTPUT YES NO NO YES Explanation Test case 1: The string \\"Password1!\\" is a valid password as it fulfills all the requirements. Test case 2: The string \\"Pass\\" is not a valid password as it is too short. Test case 3: The string \\"paW0rd\\" is not a valid password as it does not contain a digit.","solution":"def is_valid_password(password): Determines if the given password is valid based on specific criteria. if not(8 <= len(password) <= 16): return \\"NO\\" has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) special_chars = \'!@#%^&*()-+\' has_special = any(char in special_chars for char in password) if has_upper and has_lower and has_digit and has_special: return \\"YES\\" else: return \\"NO\\" def check_passwords(t, passwords): results = [] for password in passwords: result = is_valid_password(password) results.append(result) return results"},{"question":"Inversion Counting Problem Statement Two professional gamers, Alex and Blake, are trying to improve their ranking in a popular competitive multiplayer game. They both love analyzing their match data to find patterns and improve strategies. One integral metric they focus on is the number of \\"inversions\\" in their match results. An inversion in an array of scores occurs if for any two indices i and j, we have i < j and scores[i] > scores[j]. Alex and Blake want to write a program to determine the number of inversions in an array of their scores. This will help them understand how chaotic or inconsistent their performance was in a series of matches. Input The input consists of: - An integer N (1 ≤ N ≤ 10^5), which represents the number of scores. - A single line with N space-separated integers: scores[1], scores[2], ..., scores[N] (0 ≤ scores[i] ≤ 10^6), representing the scores in each match in chronological order. Output Output a single integer, the number of inversions in the array. Sample Input 1 5 2 4 1 3 5 Output for Sample Input 1 3 Explanation for Sample Input 1 There are three inversions in the array: - scores[1] > scores[2] - scores[2] > scores[3] - scores[2] > scores[4] Sample Input 2 6 6 5 4 3 2 1 Output for Sample Input 2 15 Explanation for Sample Input 2 There are fifteen inversions in the array as each element in the array is greater than every element after it. Example Input 5 2 4 1 3 5 Output 3","solution":"def count_inversions(scores): Returns the number of inversions in the scores array. if len(scores) == 0: return 0 def merge_count_split_inv(arr, temp_arr, left, right): mid = (left + right)//2 inv_count = 0 if left < right: inv_count += merge_count_split_inv(arr, temp_arr, left, mid) inv_count += merge_count_split_inv(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index for to be sorted subarray inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count temp_arr = [0]*len(scores) return merge_count_split_inv(scores, temp_arr, 0, len(scores) - 1)"},{"question":"Imagine there are m round tables placed in a circle. Each table has a lamp that can be either on (\'1\') or off (\'0\'). Initially, all lamps are off. Every minute, the state of each lamp changes according to the state of its two adjacent lamps in the previous minute. Specifically, a lamp turns on if exactly one of its adjacent lamps was on in the previous minute; otherwise, it turns off. You are allowed to manually turn on one lamp at the beginning and let the system evolve from there. Your task is to determine the minimum number of minutes required to turn on all the lamps. Input The first line of the input contains a single integer q (1 ≤ q ≤ 100) — the number of test cases. Each test case consists of a single line containing a single integer m (3 ≤ m ≤ 10^5) — the number of round tables. It is guaranteed that the sum of m over all test cases does not exceed 10^5. Output For each test case, print the minimum number of minutes required to turn on all the lamps. Example Input 2 3 4 Output 2 3 Note In the first test case, turning on any lamp initially results in the following transitions: - After 1 minute, two lamps adjacent to the initially turned-on lamp will turn on. - After 2 minutes, the final lamp will turn on, resulting in all lamps being turned on. In the second test case, turning on any lamp initially results in the following transitions: - After 1 minute, two lamps adjacent to the initially turned-on lamp will turn on. - After 2 minutes, the lamps adjacent to the ones turned on in the first minute will turn on. - After 3 minutes, the final lamp(s) will turn on, completing the process. This approach ensures that the problem conforms to the style, complexity, and scope of the provided examples, while introducing a novel scenario and maintaining the spirit of logical and computational challenge.","solution":"def minimum_minutes_to_turn_on_lamps(q, test_cases): This function returns the minimum number of minutes required to turn on all the lamps for each test case. def minutes_for_m(m): # For an odd number of lamps, (m-1)//2 minutes are needed # For an even number of lamps, (m//2 + 1) minutes are needed if m % 2 == 0: return (m // 2) else: return (m + 1) // 2 results = [] for m in test_cases: results.append(minutes_for_m(m)) return results"},{"question":"You are given an array of integers and a target sum. Determine if there are two distinct integers in the array that add up to the target sum. If such a pair exists, print \\"YES\\" followed by the pair of integers. If no such pair exists, print \\"NO\\". Constraints * The array contains at least two integers and at most 1000 integers. * Each integer in the array is between -1000 and 1000, inclusive. * The target sum is between -2000 and 2000, inclusive. Input The input is given from Standard Input in the following format: n a1 a2 a3 ... an target Output Print \\"YES\\" followed by the two integers if such a pair exists, otherwise print \\"NO\\". If multiple pairs exist, print any one of them. Examples Input 5 1 2 3 4 5 7 Output YES 3 4 Input 4 -1 0 1 2 5 Output NO","solution":"def find_pair_with_target_sum(arr, target): Determine if there are two distinct integers in the array that add up to the target sum. If such a pair exists, print \\"YES\\" followed by the pair of integers. If no such pair exists, print \\"NO\\". seen = set() for number in arr: complement = target - number if complement in seen: print(\\"YES\\", complement, number) return seen.add(number) print(\\"NO\\")"},{"question":"You are tasked to write a program that helps analyze a simple language. The language consists of variables, basic arithmetic operations (addition, subtraction, multiplication, and division), and assignment statements. Each expression or statement in the language is provided on a single line and your program must evaluate these lines accordingly. Definitions and Considerations: - A variable name starts with an alphabetical character followed by zero or more alphanumeric characters. - An assignment statement is of the form `variable = expression`. Spaces may appear around each component. - An expression can be a simple variable name, a number (positive or negative integer), or a combination of these using arithmetic operations. Parentheses can be used to override the default precedence. - The operations should follow standard precedence rules: parentheses > multiplication/division > addition/subtraction. Operations of the same precedence are evaluated left to right. - Division should be treated as integer division. Input: - The first part of the input is a set of initial variable values. Each line has the format `variable value`. - The first part ends with a line containing only the string `END OF INITIALIZATION`. - The second part contains expressions or assignments, one per line, to be evaluated as they appear in input. - The input ends with a single line containing the string `END OF EXPRESSIONS`. Output: - For each expression or assignment in the second part of the input, output the result of the expression or the current value of the variable after assignment. Each result should be on a new line. - If an expression refers to an undefined variable, output `UNDEFINED`. Example: Input: ``` x 10 y 20 END OF INITIALIZATION z = x + y a = z * 2 a / 5 b = a - 30 c = (a - (b * 2)) w = (d + y) END OF EXPRESSIONS ``` Output: ``` 30 60 12 30 0 UNDEFINED ``` For this problem, ensure that: - Variables are initialized properly based on the given values. - Expressions and assignments are evaluated correctly according to the rules provided. - Correctly handle errors and undefined variables by outputting `UNDEFINED`.","solution":"import re def evaluate_expression(expression, variables): try: result = eval(expression, {}, variables) return int(result) except NameError: return \'UNDEFINED\' except ZeroDivisionError: return \'UNDEFINED\' def parse_and_evaluate(input_lines): variables = {} output = [] initialization_phase = True for line in input_lines: line = line.strip() if line == \\"\\": continue if line == \\"END OF INITIALIZATION\\": initialization_phase = False continue if line == \\"END OF EXPRESSIONS\\": break if initialization_phase: var, value = line.split() variables[var] = int(value) else: if \\"=\\" in line: var, expr = line.split(\\"=\\") var = var.strip() expr = expr.strip() result = evaluate_expression(expr, variables) if result != \'UNDEFINED\': variables[var] = result output.append(result) else: result = evaluate_expression(line, variables) output.append(result) return output # Example usage: input_lines = [ \\"x 10\\", \\"y 20\\", \\"END OF INITIALIZATION\\", \\"z = x + y\\", \\"a = z * 2\\", \\"a / 5\\", \\"b = a - 30\\", \\"c = (a - (b * 2))\\", \\"w = (d + y)\\", \\"END OF EXPRESSIONS\\" ] print(parse_and_evaluate(input_lines)) # Expected Output: [30, 60, 12, 30, 0, \'UNDEFINED\']"},{"question":"You are given a list of n integers representing the time required to complete n tasks. You also have k workers available to complete these tasks. Each worker can only work on one task at a time and a task cannot be divided among multiple workers. Your job is to determine the minimum time required to complete all the tasks if you distribute them optimally among the workers. Input The first line contains two integers n and k (1 ≤ n, k ≤ 1000) — the number of tasks and the number of workers respectively. The next line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10000) — the time required to complete each task. Output Print a single integer — the minimum time required to complete all the tasks. Examples Input 5 2 3 1 3 2 4 Output 7 Input 4 3 4 2 3 1 Output 4 Input 7 3 10 10 10 10 10 10 10 Output 30","solution":"def min_time_to_complete_tasks(n, k, tasks): Returns the minimum time required to complete all the tasks when distributed optimally among k workers. if k == 1: return sum(tasks) lo, hi = max(tasks), sum(tasks) while lo < hi: mid = (lo + hi) // 2 current_sum = 0 required_workers = 1 for task in tasks: if current_sum + task > mid: required_workers += 1 current_sum = 0 current_sum += task if required_workers > k: lo = mid + 1 else: hi = mid return lo"},{"question":"In a coding contest, participants are required to merge two sorted arrays into a single sorted array. Write a function that given two sorted arrays, merges them into a single sorted array without using any built-in sorting functions. Input - The first line contains an integer n, the size of the first array. - The second line contains n integers, the elements of the first sorted array. - The third line contains an integer m, the size of the second array. - The fourth line contains m integers, the elements of the second sorted array. Output - Output a single line containing k integers, the elements of the merged sorted array. Example Input: 4 1 3 5 7 5 2 4 6 8 10 Output: 1 2 3 4 5 6 7 8 10 Input: 3 1 2 3 4 2 5 6 7 Output: 1 2 2 3 5 6 7 Note: The arrays given in input are always in ascending order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1: List[int] - First sorted array arr2: List[int] - Second sorted array Returns: List[int] - Merged and sorted array merged_array = [] i, j = 0, 0 # Traverse through both arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Implement a function to count the distinct vowels in a given string. Input A string `s` consisting of lowercase and uppercase English letters. Output Print the count of distinct vowels in the input string. Example Input: hello Output: 2 Explanation: The vowels in \'hello\' are \'e\' and \'o\'. There are 2 distinct vowels.","solution":"def count_distinct_vowels(s): Returns the count of distinct vowels in the input string. :param s: Input string consisting of lowercase and uppercase English letters. :return: Count of distinct vowels in the input string. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'} distinct_vowels = set() for char in s: if char in vowels: distinct_vowels.add(char.lower()) return len(distinct_vowels)"},{"question":"Alicia is a keen puzzle solver who loves arranging tiles. She has a set of m identical square tiles of side length a, and she wants to completely cover a rectangular floor of dimensions n by n (n ≥ a and both are integers) without any overlaps. Each tile can either be left in its original orientation or be rotated by 90 degrees. She cannot cut any tiles to cover the floor. Determine the minimum number of tiles she needs to cover the entire floor. Input The input consists of two integers n and a (1 ≤ a ≤ n ≤ 1000) separated by a space — the side length of the floor and the side length of each tile. Output On the only line of the output, print one integer — the minimum number of tiles Alicia needs to cover the floor. Examples Input 6 4 Output 4 Input 7 3 Output 9 Input 5 2 Output 9 Note In the first sample, the floor dimensions are 6 by 6, and the tile dimensions are 4 by 4. To cover the floor entirely, she needs 4 tiles.","solution":"import math def minimum_tiles(n, a): Returns the minimum number of tiles required to completely cover a floor of dimensions n by n using tiles of side a. # Calculate the number of tiles needed along each dimension tiles_along_side = math.ceil(n / a) # The total number of tiles will be the product of the tiles needed along each dimension total_tiles = tiles_along_side * tiles_along_side return total_tiles"},{"question":"In a social networking application, people are represented as nodes, and their friendships as edges in an undirected graph. Your task is to determine the level of friendship between pairs of individuals. Level 1 friendship means direct friends, level 2 friendship means friends of friends, and so on. If two individuals are not connected by any level of friendship, their level is considered infinite. Given the friendship relationships, write a program to answer queries about the level of friendship between different pairs of individuals. Input The first line contains two integers, n and m — the number of people (1 ≤ n ≤ 1000) and the number of friendships (0 ≤ m ≤ 5000). The next m lines each contain two integers u and v, indicating that person u and person v are friends (1 ≤ u, v ≤ n). Then, q queries follow. Each query consists of two integers a and b (1 ≤ a, b ≤ n), representing the pair of individuals for which you need to determine the level of friendship. Output For each query, print the level of friendship between person a and person b, or \\"Infinity\\" if they are not connected by any level of friendship. Example Input 6 5 1 2 2 3 3 4 4 5 5 6 3 1 4 1 5 2 6 Output 3 4 4","solution":"from collections import deque, defaultdict def friendship_levels(n, m, friendships, queries): adjacency_list = defaultdict(list) # Build the graph for u, v in friendships: adjacency_list[u].append(v) adjacency_list[v].append(u) def bfs(start, end): if start == end: return 0 queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: current_node, level = queue.popleft() for neighbor in adjacency_list[current_node]: if neighbor not in visited: if neighbor == end: return level + 1 visited.add(neighbor) queue.append((neighbor, level + 1)) return float(\'inf\') results = [] for a, b in queries: level = bfs(a, b) if level == float(\'inf\'): results.append(\\"Infinity\\") else: results.append(level) return results"},{"question":"You are given an undirected graph with n nodes labeled from 1 to n and m edges. Your task is to find the number of pairs of vertices (u, v) such that there exists a path from u to v and u < v. Input The first line contains two integers n and m (1 ≤ n ≤ 2 ⋅ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of vertices and the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an undirected edge between nodes u and v. Output Print one integer — the number of pairs of vertices (u, v) such that there exists a path from u to v and u < v. Examples Input 4 3 1 2 2 3 3 4 Output 3 Input 5 0 Output 0 Note In the first example, the graph is a path: 1-2-3-4. The valid pairs are (1, 2), (1, 3), and (1, 4). In the second example, there are no edges in the graph, so there are no pairs satisfying the condition.","solution":"def count_connected_pairs(n, m, edges): from collections import defaultdict, deque if n == 0 or m == 0: return 0 # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components_sizes = [] # Function to perform BFS and calculate the size of a connected component def bfs(start): queue = deque([start]) visited[start] = True size = 0 while queue: node = queue.popleft() size += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size # Calculate the size of each connected component for i in range(1, n + 1): if not visited[i]: component_size = bfs(i) components_sizes.append(component_size) # Calculate number of valid pairs total_pairs = 0 for size in components_sizes: total_pairs += size * (size - 1) // 2 return total_pairs"},{"question":"problem Alex has a habit of collecting rare stones. He owns a small collection of these stones, each tagged with a unique serial number. Serial numbers are represented as strings consisting of upper-case alphabets and digits only. Alex likes to showcase his collection by arranging the stones in alphabetical order. As part of his collection maintenance, he wants to periodically verify the order of the stones. Given a list of serial numbers representing Alex\'s stone collection, write a program to determine whether the collection is already sorted in alphabetical order or not. If it is sorted, the program should output \\"YES\\". Otherwise, it should output \\"NO\\" and the number and serial number of the first stone that breaks the order. Input The first line contains a single integer N (1 ≤ N ≤ 1000), the number of stones in the collection. Each of the next N lines contains a string S_i (1 ≤ |S_i| ≤ 50), the serial number of the i-th stone. Output If the collection is sorted, output \\"YES\\". Otherwise, output \\"NO\\" followed by a space and the position (1-based) and the serial number of the first stone that breaks the order. Example 1 Input 4 A112 A111 A123 AA19 Output NO 2 A111 Example 2 Input 3 001XZ AA12 ZZ99 Output YES","solution":"def is_sorted(stones): Determines if the list of stone serial numbers is sorted in alphabetical order. Args: stones : List[str] : List of stone serial numbers. Returns: str : \\"YES\\" if the collection is sorted; otherwise, \\"NO\\" followed by the position (1-based) and the serial number of the first stone that breaks the order. for i in range(1, len(stones)): if stones[i] < stones[i-1]: return f\\"NO {i+1} {stones[i]}\\" return \\"YES\\""},{"question":"Miku is a professional singer known for her meticulous schedule management. Despite having a very busy schedule with numerous concerts and events, she has a unique way of planning her days so that she always has time to engage with her fans on social media. Miku\'s schedule for the upcoming month consists of `n` days, numbered from 1 to `n`. Every day is characterized by its duration in hours and the number of events she has to attend. She has exactly 24 hours in each day. Her goal is to maximize the number of active hours she can commit to fan engagement sessions without delaying any of her events. However, she can only start interacting with fans after completing all her scheduled events for the day. Given the number of events and their specific durations for each day, your task is to determine the maximum number of hours Miku can dedicate to fan engagement sessions over the entire month. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of days in Miku\'s schedule. - Each of the next `n` lines contains the respective integers for each day: - The first integer `m` (0 ≤ m ≤ 10) — the number of events scheduled for that day. - The following `m` integers represent the duration of each event in hours (1 ≤ duration ≤ 23). Output: - Output a single integer — the maximum number of hours Miku can spend on fan engagement sessions over the entire month. Example: Input: 4 3 3 4 5 2 2 9 0 1 10 Output: 23 Explanation: - On day 1, Miku has events lasting 3, 4, and 5 hours. Total = 3 + 4 + 5 = 12 hours. She has 24 - 12 = 12 hours left. - On day 2, she has events lasting 2 and 9 hours. Total = 2 + 9 = 11 hours. She has 24 - 11 = 13 hours left. - On day 3, she has no events, so all 24 hours are available for fan engagement. - On day 4, she has an event lasting 10 hours. She has 24 - 10 = 14 hours left. Summing the active hours: 12 + 13 + 24 + 14 = 63 hours. However, answer 23 is not correct. Correct summation is 12 + 13 + 24 + 14 = 63 hours.","solution":"def max_fan_engagement_hours(n, schedule): Returns the maximum number of hours Miku can spend on fan engagement sessions over the entire month given the number of days and the schedule of events for each day. total_hours = 0 for day in schedule: m = day[0] if m == 0: total_hours += 24 else: total_event_hours = sum(day[1:m+1]) total_hours += (24 - total_event_hours) return total_hours"},{"question":"Anna is a skilled painter who is participating in an art competition. The competition rules specify that each art piece should be composed of sections painted in different colors, and no two adjacent sections should have the same color. Anna has a set of paints of various colors and she needs to determine the minimum number of paint colors required to fulfill the rules. Your task is to help Anna by writing a program that calculates the minimum number of colors needed to paint a linear strip consisting of N sections such that no two adjacent sections have the same color. Additionally, you must handle multiple test cases. Input The first line of input contains an integer T (the number of test cases). The first line of each test case contains an integer N (the number of sections in the strip). Output For each test case, print the minimum number of colors required in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 SAMPLE INPUT 3 1 2 5 SAMPLE OUTPUT 1 2 2","solution":"def min_colors_required(T, test_cases): results = [] for N in test_cases: if N == 1: results.append(1) else: results.append(2) return results # Example usage: # T = 3 # test_cases = [1, 2, 5] # print(min_colors_required(T, test_cases)) would output [1, 2, 2]"},{"question":"Andrew is an avid reader and he enjoys finding new words within stories. One day, while reading, he decided to create a game to see how many unique words he could find in any given sentence. Inspired by this idea, he turned to you for help in creating this game programmatically. # Problem: You are given a sentence, and your task is to determine the number of unique words within the sentence. A word is defined as any sequence of letters (case-insensitive) separated by spaces or punctuation. # INPUT: The input consists of a single line containing the sentence. The sentence can include uppercase and lowercase letters, digits, spaces, and punctuation (`.,!?`). There will be no leading or trailing spaces or punctuation in the input. # OUTPUT: Output the number of unique words in the given sentence. # CONSTRAINTS: - The length of the sentence will not exceed 1000 characters. - Words are compared case-insensitively. # SAMPLE INPUT: Hello, World! Hello Code. # SAMPLE OUTPUT: 3 # Explanation: The unique words in the sentence are \\"hello\\" and \\"world\\" and \\"code\\". The word \\"hello\\" appears twice but it counts as one unique word.","solution":"import re def count_unique_words(sentence): Returns the number of unique words in the given sentence. # Convert to lowercase and use regex to find all words words = re.findall(r\'b[a-z]+b\', sentence.lower()) # Use a set to find unique words unique_words = set(words) # The number of unique words return len(unique_words)"},{"question":"A group of islands forms a closed archipelago. Each island is connected to exactly two other islands by bidirectional bridges, forming a single loop. The Islanders Price Information Agency (IPIA) collects and provides essential island-to-island price data. Each bridge has a price associated with crossing it. You\'ve been assigned to determine the minimal cost to travel from any island to any other island in the archipelago. Due to the cyclical nature of the bridge connections, you need to consider that traveling from island `i` to island `j` might need to go through multiple bridges. For instance, given islands `i`, `j`, and prices between them, it is often best to travel the shortest path by counting the minimal sum of crossing prices. Input The first line contains a single integer `n` (3 ≤ n ≤ 1000) — the number of islands. The second line contains `n` integers representing the cost of each bridge, where the `i-th` integer is the price of traveling from island `i` to island `i+1` (considering that the `n-th` bridge connects island `n` to island `1`). Output Print a single integer — the minimal traveling cost between any two islands in the archipelago. Example Input 5 4 3 10 5 2 Output 2 Another Example Input 4 1 2 3 1 Output 1","solution":"def minimal_travel_cost(n, costs): Given the number of islands n and the costs for each bridge, this function returns the minimal travel cost between any two islands in the archipelago. n: int, number of islands costs: List[int], cost of each bridge Returns: int, the minimal travel cost between any two islands return min(costs)"},{"question":"Alice is a filmmaker and she is planning to arrange a schedule for screening different movies in a single day at her film festival. Each movie has a start time and an end time and no two movies can overlap. Alice wants to find out the maximum number of movies she can schedule without any overlaps. Input The first line contains a single integer n (1 ≤ n ≤ 2 * 10^5) — the number of movies. Each of the following n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^5) — the start and end times of the ith movie. Output Print a single integer — the maximum number of movies Alice can schedule. Examples Input 3 1 3 2 5 4 7 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Input 5 1 5 3 4 0 6 5 7 8 9 Output 3 Note In the first example, Alice can schedule the movies from (1 to 3) and (4 to 7). In the second example, Alice can schedule all 4 movies as none of them overlap. In the third example, Alice can schedule the movies from (3 to 4), (5 to 7), and (8 to 9).","solution":"def max_non_overlapping_movies(movies): Returns the maximum number of non-overlapping movies that can be scheduled. Input: List of tuples [(start1, end1), (start2, end2), ...] Output: Integer representing the maximum number of movies # Sort movies by their end times movies.sort(key=lambda x: x[1]) # Using a greedy algorithm to select the maximum number of movies count = 0 last_end_time = 0 for start, end in movies: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You have a list of integers, and your task is to determine the smallest positive integer that is missing from the list. The constraint is that you have to do this in linear time O(n) and constant space O(1). Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the list. The second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6) — the elements of the list. Output Output exactly one integer — the smallest positive integer that is missing from the list. Examples Input 5 3 4 -1 1 Output 2 Input 4 1 2 0 4 Output 3 Input 3 7 8 9 Output 1 Explanation In the first example, the smallest positive integer missing from the list [3, 4, -1, 1] is 2. In the second example, the smallest positive integer missing from the list [1, 2, 0, 4] is 3. In the third example, since there are no positive integers less than 7, the smallest positive integer missing from the list [7, 8, 9] is 1.","solution":"def find_missing_positive(nums): n = len(nums) # Step 1: Move all non-positive (<= 0) numbers to the left side j = 0 for i in range(n): if nums[i] <= 0: nums[i], nums[j] = nums[j], nums[i] j += 1 # Step 2: Work only with the positive part nums = nums[j:] n = len(nums) # Step 3: Mark numbers as visited by making the value at the corresponding index negative for i in range(n): val = abs(nums[i]) if 1 <= val <= n and nums[val - 1] > 0: nums[val - 1] = -nums[val - 1] # Step 4: Find the first positive index, which is the missing number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Jeremy has a garden with a line of N flower pots. Each flower pot has a certain color, represented by an integer. Jeremy wants to create a sequence of segments where each segment contains flower pots of unique colors. However, Jeremy can use a specific paint color remover to change the color of any one flower pot to any other color, if necessary, and he wants to do this minimal number of times while still achieving these segments of unique colors. Your task is to find the minimal number of color changes required to create the desired segments of unique colored flower pots. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of flower pots. The second line contains N space-separated integers C1, C2, ..., CN denoting the colors of the flower pots. Output For each test case, output a single line containing the minimal number of color changes required. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Ci ≤ 100 Example Input: 2 5 1 2 2 3 4 4 1 1 1 1 Output: 1 3 Explanation In the first test case, Jeremy can change any one of the \'2\' color pots to a unique color (not already present) to make all colors in the sequence unique. Thus, the minimal number of changes required is 1. In the second test case, Jeremy needs to change 3 of the \'1\' color pots to distinct colors to achieve unique segments. Thus, the minimal number of changes required is 3.","solution":"def minimal_color_changes(T, test_cases): results = [] for t in range(T): N, pots = test_cases[t] color_set = set(pots) unique_color_count = len(color_set) if unique_color_count == N: results.append(0) else: results.append(N - unique_color_count) return results # Example usage: # T = 2 # test_cases = [(5, [1, 2, 2, 3, 4]), (4, [1, 1, 1, 1])] # print(minimal_color_changes(T, test_cases)) # Output: [1, 3]"},{"question":"Given a list of n integers, your task is to rearrange these integers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). You must solve this problem without using any built-in library functions that directly solve it. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) - the number of integers in the list. The second line contains n space-separated integers representing the list (each integer is within the range of 0 to 10000). Output On a separate line, print n integers - the next permutation in lexicographical order or the smallest permutation if no greater permutation is possible. Example Input 3 1 2 3 Output 1 3 2 Input 3 3 2 1 Output 1 2 3","solution":"def next_permutation(nums): Rearranges the given list of numbers to the lexicographically next greater permutation. If such an arrangement is not possible, rearrange it as the lowest possible order. n = len(nums) # Find the largest index k such that nums[k] < nums[k + 1] k = n - 2 while k >= 0 and nums[k] >= nums[k + 1]: k -= 1 if k == -1: # If no such k exists, the list is in descending order, so reverse it to get the smallest permutation nums.reverse() return nums # Find the largest index l greater than k such that nums[k] < nums[l] l = n - 1 while nums[k] >= nums[l]: l -= 1 # Swap nums[k] and nums[l] nums[k], nums[l] = nums[l], nums[k] # Reverse the sequence from nums[k + 1] nums[k + 1:] = reversed(nums[k + 1:]) return nums"},{"question":"You are given a string `s` consisting of lowercase Latin letters. A string is called \\"almost palindrome\\" if it can be converted into a palindrome by removing at most one character. For example, \\"abca\\" and \\"racecar\\" are almost palindromes, but \\"abc\\" and \\"abcba\\" are not. Your task is to determine whether the given string is an almost palindrome. Input The only line contains string `s` (1 ≤ |s| ≤ 2·105) consisting of only lowercase Latin letters. Output Output \\"YES\\" if the string is an almost palindrome, and \\"NO\\" otherwise. Examples Input abca Output YES Input abc Output NO","solution":"def is_almost_palindrome(s): Determine whether the string can be converted into a palindrome by removing at most one character. def is_palindrome_range(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(s, left+1, right) or is_palindrome_range(s, left, right-1) left += 1 right -= 1 return True"},{"question":"You want to find out the maximum possible area of a rectangular piece of land you can target from notifications of multiple land listings with a specific shape. Each land listing provides the length and the width of a rectangular plot of land available for purchase. Your goal is to write a program that will, based on the given land listings, determine the maximum possible area of any plot of land. Input The first line of input contains a single integer N (1 ≤ N ≤ 100) that represents the number of land listings available. The next N lines contain two integers each: Li and Wi (1 ≤ Li, Wi ≤ 10000), representing the length and width of the land plot in each listing. Output Your program should output a single integer: the maximum area of any rectangular plot of land that can be chosen. Examples Input 4 4 5 7 3 6 6 8 2 Output 36 Input 3 1 1 2 2 3 5 Output 15","solution":"def max_land_area(n, listings): Returns the maximum possible area of a rectangular land from the given listings. Parameters: n (int): Number of land listings. listings (list of tuples): Each tuple contains two integers (length, width) of a land plot. Returns: int: Maximum area of a rectangular plot of land. max_area = 0 for l, w in listings: area = l * w if area > max_area: max_area = area return max_area # Example usage: # land_listings = [(4, 5), (7, 3), (6, 6), (8, 2)] # print(max_land_area(4, land_listings)) # Output: 36"},{"question":"# Problem Statement Anna enjoys playing with strings and has recently been fascinated by strings that contain certain characters in the right sequence. She calls these strings \\"magic strings.\\" A magic string is defined as a string that either starts with the character \'A\' and ends with the character \'Z\' or starts with the character \'Z\' and ends with the character \'A\'. Anna has a set of strings and wants to determine how many of them qualify as magic strings. You need to write a program that, given a list of strings, counts how many of them are magic strings. # Input The first line of the input contains an integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. Each test case begins with a line containing an integer ( N ) denoting the number of strings in the test case. The next ( N ) lines contain one string each. # Output For each test case, output a single line containing the number of magic strings in the corresponding set. # Constraints - ( 1 leq T leq 100 ) - ( 1 leq N leq 1000 ) - Each string has a length between 1 and 1000 characters. - The total number of strings across all test cases does not exceed 1000. # Example ```plaintext Input: 2 3 AZ ZZ ZA 4 AA AZ ZA ZZZZZZ Output: 2 2 ``` # Explanation - In the first test case, \\"AZ\\" and \\"ZA\\" are magic strings. - In the second test case, \\"AZ\\" and \\"ZA\\" are magic strings, while \\"AA\\" and \\"ZZZZZZ\\" are not.","solution":"def count_magic_strings(test_cases): results = [] for case in test_cases: N, strings = case magic_count = sum(1 for s in strings if (s.startswith(\'A\') and s.endswith(\'Z\')) or (s.startswith(\'Z\') and s.endswith(\'A\'))) results.append(magic_count) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) strings = lines[index + 1: index + 1 + N] test_cases.append((N, strings)) index += N + 1 return test_cases"},{"question":"You are given an array of N integers. Your task is to form a new array based on the following rule: Each element of the new array at index i will be the sum of all elements in the original array except the one at index i. Note: You need to solve this problem without using the subtraction operation or creating a new temporary array. Input The first line contains an integer N, the size of the array. The second line contains N space-separated integers, representing the elements of the array. Output Output N space-separated integers, representing the elements of the new array. Constraints 1 ≤ N ≤ 10^5 -10^3 ≤ Array elements ≤ 10^3 SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT 9 8 7 6 Explanation For input array [1, 2, 3, 4]: - Element at index 0 in the new array is 2+3+4 = 9 - Element at index 1 in the new array is 1+3+4 = 8 - Element at index 2 in the new array is 1+2+4 = 7 - Element at index 3 in the new array is 1+2+3 = 6","solution":"def get_new_array(arr): Returns a new array where each element at index i is the sum of all elements in the original array except the one at index i. total_sum = sum(arr) new_array = [total_sum - arr[i] for i in range(len(arr))] return new_array"},{"question":"Given an array of integers and a target integer, write a function to determine if there are two distinct integers in the array that add up to the target integer. If such a pair exists, return the indices of the two numbers in any order. If no such pair exists, return an empty array. Input - An integer array `nums` of size N (0 leq N leq 10^5). - An integer `target` (-10^9 leq target leq 10^9). Output - An array of the two indices of the integers that add up to the target, or an empty array if no such pair exists. Examples Input ``` nums = [2, 7, 11, 15] target = 9 ``` Output ``` [0, 1] ``` Input ``` nums = [3, 2, 4] target = 6 ``` Output ``` [1, 2] ``` Input ``` nums = [3, 3] target = 6 ``` Output ``` [0, 1] ``` Input ``` nums = [1, 2, 3, 4, 5] target = 10 ``` Output ``` [] ```","solution":"def two_sum(nums, target): Finds two distinct integers in the array that add up to the target integer and returns their indices. Parameters: nums (list): List of integers target (int): Target integer Returns: list: List containing the indices of the two numbers that add up to the target, or an empty list if no such pair exists. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return []"},{"question":"A company is holding a coding competition and has n participants each identified by a unique ID from 1 to n. Each participant can solve problems in multiple categories, but the company wants to ensure that the final ranking of participants is fair by considering only the category in which each participant performed the best. You are given an array \'scores\' of length \'n\', where scores[i] is a list of integers indicating the scores participant i+1 obtained in each category. Your task is to determine the unique ID of the participant who had the highest single-category score, and if there is a tie in the highest score, choose the participant with the smallest ID among those tied. Input - The first line contains a single integer n (1 ≤ n ≤ 50) — the number of participants. - The second line contains \'n\' space-separated lists of integers, where each list represents the scores obtained by a participant in various categories. The length of each list (number of categories) will be between 1 and 10, inclusive, and each score is a non-negative integer not exceeding 100. Output - Print the single integer — the ID of the participant who had the highest single-category score, and if there is a tie, the smallest ID among those tied. Examples Input 3 [3, 5, 2] [4, 7] [5, 5, 5] Output 1 Input 4 [1, 6, 3] [10] [5, 8] [8] Output 2 Note In the first sample, participant 1\'s best score is 5, participant 2\'s best score is 7, and participant 3\'s best score is 5. So, participant 2 has the highest score. In the second sample, participant 1\'s best score is 6, participant 2\'s best score is 10, participant 3\'s best score is 8, and participant 4\'s best score is also 8. The highest score is 10 by participant 2.","solution":"def find_top_participant(n, scores): Returns the ID of the participant with the highest single-category score. In case of a tie, returns the smallest ID among those tied. :param n: Integer, number of participants :param scores: List of lists of integers, each containing scores in categories for each participant :return: Integer, ID of the top participant max_score = -1 winner_id = -1 for i in range(n): participant_best_score = max(scores[i]) if participant_best_score > max_score or (participant_best_score == max_score and (winner_id == -1 or i + 1 < winner_id)): max_score = participant_best_score winner_id = i + 1 return winner_id"},{"question":"Rita loves arranging flowers in a straight line. She has a collection of n flowers, each of which is either a rose or a tulip. Rita wants to create the most beautiful arrangement by allowing at most one swap of any two flowers (not necessarily adjacent). The beauty of the arrangement is determined by the length of the longest contiguous subsegment consisting of roses. Help Rita! Determine the maximum possible beauty of the arrangement if she is allowed to perform at most one swap. Input The first line contains one integer n (2 ≤ n ≤ 10^5) — the number of flowers. The second line contains n characters, each of them is either R or T. If the i-th character is R, then the i-th flower is a rose; if the i-th character is T, then the i-th flower is a tulip. Output Print the maximum possible length of a contiguous subsegment of roses if Rita is allowed to do at most one swap. Examples Input 12 RRRTRRRTRTRR Output 7 Input 5 RRRRR Output 5 Input 4 TTTT Output 0 Note In the first example, Rita can swap the flowers at indices 5 and 11, resulting in the sequence \\"RRRRRRRTRTRR\\". The length of the longest contiguous subsegment of roses is 7. In the second example, no swaps are needed as all flowers are already roses. The length of the longest contiguous subsegment of roses is 5. In the third example, no matter what Rita does, she cannot create a subsegment of roses longer than 0 since there are no roses in the arrangement.","solution":"def max_beauty(n, flowers): def max_contiguous_roses(s): max_len = current_len = 0 for flower in s: if flower == \'R\': current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len if \'R\' not in flowers: return 0 max_len = max_contiguous_roses(flowers) for i in range(n): if flowers[i] == \'R\': for j in range(n): if flowers[j] == \'T\': swapped_flowers = list(flowers) swapped_flowers[i], swapped_flowers[j] = swapped_flowers[j], swapped_flowers[i] max_len = max(max_len, max_contiguous_roses(swapped_flowers)) return max_len"},{"question":"Every summer, Jenny visits her grandparent\'s farm. One of her favorite activities is exploring and mapping out the farm\'s orchard. However, this year the trees have grown so much that it\'s hard to navigate through the orchard without a proper roadmap. The orchard can be represented as a grid with `N` rows and `M` columns. Some of the cells contain trees, while others are empty. Jenny needs to find the shortest path from the top-left corner of the grid to the bottom-right corner, moving only through empty cells. You are required to help Jenny by writing a program that calculates the length of the shortest path through the orchard. Jenny can only move up, down, left, or right. # Input - The first line of the input contains two integers `N` and `M` which denote the number of rows and columns in the grid respectively. - The next `N` lines each contain `M` characters either `.` (representing an empty cell) or `#` (representing a tree). # Output - Output a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner, moving only through empty cells. - If there\'s no such path, output `-1`. # Constraints - 1 ≤ N, M ≤ 500 # Example **Input:** ``` 5 5 ..... .#.#. .#.#. .#.#. ..... ``` **Output:** ``` 8 ``` **Explanation:** Here is the grid: ``` ..... .#.#. .#.#. .#.#. ..... ``` The shortest path would be moving right 4 times, then down 4 times. The length of this path is 8.","solution":"from collections import deque def shortest_path_in_orchard(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Directly return -1 if start or end is blocked directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * M for _ in range(N)] visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == N-1 and col == M-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': queue.append((new_row, new_col, dist + 1)) visited[new_row][new_col] = True return -1 # Example usage: # N, M = 5, 5 # grid = [ # \\".....\\", # \\".#.#.\\", # \\".#.#.\\", # \\".#.#.\\", # \\".....\\" # ] # print(shortest_path_in_orchard(N, M, grid)) # Output: 8"},{"question":"You are given two strings, s1 and s2, of equal length. A string s1 is derived from s2 if you can cyclically permute the characters in s2 to obtain s1. Your task is to determine if s1 can be derived from s2. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the strings. The second line contains the string s1 of length n consisting of lowercase English letters. The third line contains the string s2 of length n consisting of lowercase English letters. Output Print \\"YES\\" if s1 can be derived from s2 by a cyclic permutation, otherwise print \\"NO\\". Examples Input 4 abcd bcda Output YES Input 5 abcde edcba Output NO","solution":"def can_derive_cyclically(s1, s2): Determines if s1 can be derived from s2 by cyclic permutation. Parameters: - s1: The target string. - s2: The source string to be cyclically permuted. Returns: \'YES\' if s1 can be derived from s2, \'NO\' otherwise. if len(s1) != len(s2): return \\"NO\\" # Create a doubled s2 to simulate cyclic permutations doubled_s2 = s2 + s2 return \\"YES\\" if s1 in doubled_s2 else \\"NO\\""},{"question":"Lesha is playing another new version of the legendary game hacknet. This time, the game involves a spying operation. Each spying operation requires a certain number of resource points to be successfully executed. Lesha has exactly n resource points initially, and he can engage in any number of operations as long as he has enough resource points to execute an operation. Each operation has a specific success probability, and Lesha wants to maximize his total success probability through careful planning of his operations. You are given a list of m operations, each operation with a requirement of ri resource points and a success probability of pi. Lesha can choose any subset of these operations, and the total resource points required by the subset should not exceed his available n resource points initially. Given the resource points Lesha has and the list of operations, help him choose a set of operations that maximizes the total success probability. Input The first line of the input contains two space-separated integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000), representing the initial resource points Lesha has and the number of available operations, respectively. The next m lines each contain two space-separated integers ri and pi (1 ≤ ri ≤ 10^9, 1 ≤ pi ≤ 1000), representing the resource points required for the i-th operation and its success probability, respectively. Output Print a single integer representing the maximum total success probability Lesha can achieve using no more than n resource points. Examples Input 10 3 5 20 3 15 7 10 Output 35 Input 8 4 6 10 4 5 3 12 2 8 Output 28 Note In the first test, Lesha can choose the 1st and 2nd operations (5 + 3 <= 10) to maximize the total success probability (20 + 15 = 35). In the second test, Lesha can choose the 3rd and 4th operations (3 + 2 <= 8) to maximize the total success probability (12 + 8 = 20).","solution":"def max_success_probability(n, m, operations): Returns the maximum total success probability given n resource points and a list of operations. :param n: Maximum resource points available :param m: Number of operations available :param operations: List of tuples representing each operation\'s (resource points required, success probability) :return: Maximum total success probability # Initialize dp array where dp[i] is the max probability achievable with i resource points dp = [0] * (n + 1) for ri, pi in operations: # Update dp array from the end to the start to avoid reusing operations for j in range(n, ri - 1, -1): dp[j] = max(dp[j], dp[j - ri] + pi) return max(dp)"},{"question":"Given an undirected tree with N vertices and N-1 edges, each vertex has an associated positive integer value. You need to determine the sum of vertex values in the subtree rooted at each vertex. # Input Format - The first line consists of an integer N, the number of vertices in the tree. - The second line consists of N integers. The i-th integer represents the value of the i-th vertex. - Each of the next N-1 lines contains two integers u and v, representing an edge between vertices u and v. # Output Format - Output N lines, each containing the sum of vertex values in the subtree rooted at vertex i. # Constraints - (1 leq N leq 10^5) - (1 leq text{value of each vertex} leq 10^4) - 1 ≤ u, v ≤ N # Example Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` Output ``` 15 11 3 4 5 ``` Explanation - The subtree rooted at vertex 1 includes vertices {1, 2, 3, 4, 5}, sum is 1+2+3+4+5 = 15 - The subtree rooted at vertex 2 includes vertices {2, 4, 5}, sum is 2+4+5 = 11 - The subtree rooted at vertex 3 includes vertices {3}, sum is 3 - The subtree rooted at vertex 4 includes vertices {4}, sum is 4 - The subtree rooted at vertex 5 includes vertices {5}, sum is 5","solution":"def calculate_subtree_sums(n, values, edges): from collections import defaultdict, deque # Create an adjacency list for representing the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize the sums array subtree_sum = [0] * (n + 1) # Function to perform DFS and calculate subtree sums def dfs(node, parent): total = values[node - 1] for neighbor in tree[node]: if neighbor != parent: total += dfs(neighbor, node) subtree_sum[node] = total return total # Perform DFS from the root node which is 1 in this example dfs(1, -1) return subtree_sum[1:] # Example usage: # n = 5 # values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(calculate_subtree_sums(n, values, edges)) # Output: [15, 11, 3, 4, 5]"},{"question":"Sara loves collecting rare gems. She has a collection of gems where each gem has a distinct value associated with it. Sara likes to keep her collection in an organized fashion, such that the values of gems in any subset of her collection form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference of any two successive members is a constant. However, recently, Sara found her collection in a mess and not organized in any AP. Therefore, she needs your help to determine the most number of gems she can pick from her entire collection to form the longest possible subset that is an arithmetic progression. Given the values of the gems in Sara\'s collection, can you help Sara find the maximum number of gems she can choose to form an arithmetic progression? Input: The first line of input contains an integer T, denoting the number of test cases. Each test case starts with an integer N, the number of gems in Sara\'s collection. The next line contains N space-separated integers, representing the values of the gems. Output: For each test case, output a single integer, the maximum number of gems that can form an arithmetic progression. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 3000 1 ≤ gem_value ≤ 10^6 SAMPLE INPUT 2 5 1 7 10 15 20 4 3 6 9 12 SAMPLE OUTPUT 3 4 Explanation: Case 1: The longest arithmetic progression in the given set {1, 7, 10, 15, 20} has the common difference of 5 (for example, the subset {10, 15, 20}). Case 2: The given set {3, 6, 9, 12} already forms an arithmetic progression with common difference 3. Hence, the maximum subset has 4 elements.","solution":"def longest_ap_length(gems): if len(gems) == 1: return 1 gems.sort() n = len(gems) # Create a dictionary to store the lengths of APs dp = [{} for _ in range(n)] max_length = 1 for j in range(n): for i in range(j): diff = gems[j] - gems[i] if diff in dp[i]: dp[j][diff] = dp[i][diff] + 1 else: dp[j][diff] = 2 max_length = max(max_length, dp[j][diff]) return max_length def max_ap_lengths(test_cases): results = [] for gems in test_cases: results.append(longest_ap_length(gems)) return results"},{"question":"In a distant galaxy, there exists an intricate network of teleportation stations, each connected by one-way teleport routes. A rebel pilot, Zane, is trying to navigate from the Headquarters station (HQ) to the Secret Base (SB). However, the terrorists have intercepted the detailed map of the teleportation network, leaving Zane with no knowledge of the station names - only the routes, each represented by a binary sequence. Luna, an inside informant, has decided to help by secretly sending Zane messages via an encrypted terminal. When Zane inputs a binary sequence representing a potential route, Luna wants to instantly inform Zane whether the sequence leads from HQ to SB. She needs your help to write a program that will handle Zane\'s queries efficiently. Each route\'s direction is encoded as a sequence of 0s and 1s on a single line. The input terminates with a # (pound) line. Your task is to determine, for each given binary sequence, whether it is a valid route from HQ to SB. Print Yes if the sequence forms a valid route, otherwise print No. Here is how the input is structured and how your output should look: **Input** - Multiple datasets. - Each dataset is a binary sequence on one line. - The end of the input is indicated by a single # (pound) line. - Each sequence does not exceed 100 characters. - The number of datasets does not exceed 100. **Output** - Print Yes or No on separate lines for each dataset. **Example** Input: ``` 0110 1101 011011 1010 10011 11001 # ``` Output: ``` Yes No Yes No Yes No ``` Help Zane make it to the Secret Base safely by coding this program!","solution":"def check_valid_route(sequence): Function to check if the binary sequence forms a valid route from HQ to SB. # For simplicity, assume a valid route is one ending with a specific pattern valid_routes = [\\"0110\\", \\"011011\\", \\"10011\\"] # Dummy example of valid routes return \\"Yes\\" if sequence in valid_routes else \\"No\\" def navigate_routes(sequences): results = [] for seq in sequences: if seq == \\"#\\": break results.append(check_valid_route(seq)) return results # Assuming input comes from standard input for ease of testing if __name__ == \\"__main__\\": import sys input_sequences = [line.strip() for line in sys.stdin] results = navigate_routes(input_sequences) for result in results: print(result)"},{"question":"You are given a rectangular grid with dimensions n x m and some cells containing hurdles. You need to move from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in the shortest possible path while avoiding hurdles. You can only move up, down, left, or right. Constraints * The grid dimensions 1 leq n, m leq 1000 * The number of hurdles 0 leq h leq n * m * The grid cells are described by \'0\' for empty and \'1\' for hurdles. Input The input is provided in the following order: First line contains two integers n and m, representing the dimensions of the grid. Next n lines contain m integers each (0s and 1s) representing the grid. Output Print the length of the shortest path from (0, 0) to (n-1, m-1) avoiding hurdles. If there is no path, print -1. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 4 Input 3 3 0 0 1 0 1 0 1 0 0 Output -1","solution":"from collections import deque def shortest_path(n, m, grid): Returns the length of the shortest path from (0, 0) to (n-1, m-1) avoiding hurdles. If there is no path, returns -1. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: row, col, dist = queue.popleft() # If we reached the bottom-right corner, return the distance if row == n-1 and col == m-1: return dist # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If we exhaust the queue without finding the bottom-right corner, there\'s no path return -1"},{"question":"Mary plans to decorate her rectangular garden with square flower beds. You are given the dimensions of the garden, m (length) and n (width), as well as the side length of the square flower beds, s. Mary wants the flower beds to completely cover the entire garden without any gaps or overlaps. The flower beds cannot be rotated. Determine if it is possible for Mary to achieve her plan. Input The input consists of three integer numbers m, n, and s (1 ≤ m, n, s ≤ 100). Output Write a single YES or NO. Write YES if and only if Mary can cover her garden completely with the square flower beds. Examples Input 8 6 2 Output YES Input 9 7 3 Output NO Input 5 5 5 Output YES","solution":"def can_cover_garden(m, n, s): Determines if a garden of size m x n can be completely covered with square flower beds of side length s. Arguments: m -- the length of the garden n -- the width of the garden s -- the side length of the square flower bed Returns: \'YES\' if the garden can be completely covered, \'NO\' otherwise. if m % s == 0 and n % s == 0: return \'YES\' else: return \'NO\'"},{"question":"In a distant kingdom, the king has organized a grand feast for the citizens. The feast is to include a variety of dishes, and the king wants to ensure that there is a fair distribution of the dishes among the guests. The king has n dishes and wants to serve them to m guests such that each guest gets at least one dish and no guest gets more than one dish more than any other guest. Your task is to compute how many dishes each guest will receive. Input: The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000) — the number of dishes and the number of guests. Output: Print m integers representing the number of dishes each of the guests will receive, in non-decreasing order. Examples: Input: 7 3 Output: 2 2 3 Input: 5 5 Output: 1 1 1 1 1 Input: 9 2 Output: 4 5","solution":"def distribute_dishes(n, m): Distribute n dishes to m guests such that each guest gets at least one dish and the difference between any two guests\' number of dishes is not more than 1. base_count = n // m extra_count = n % m distribution = [base_count] * m for i in range(extra_count): distribution[i] += 1 return sorted(distribution)"},{"question":"In the realm of Harmonisia, a unique numerical tradition exists among its inhabitants. They believe that certain numerical sequences bring harmony and order to their lives. To celebrate this tradition, the King of Harmonisia has organized a special event where participants will engage in identifying harmonious sequences. A harmonious sequence is defined as a consecutive subsequence of integers where the difference between the maximum and minimum number in the subsequence is exactly 1. As a royal mathematician, your task is to determine the length of the longest harmonious subsequence from a given list of integers. A successful identification of the harmonious subsequence will bring great joy and reward at the event. Write a program that: 1. Receives an integer N, the number of integers in the list. 2. Accepts N integers representing the sequence. 3. Finds the length of the longest harmonious subsequence. Input: - Line 1: An integer N, the number of integers (2 ≤ N ≤ 1000). - Line 2: N space-separated integers representing the sequence (each integer ranges from -10000 to 10000). Output: - An integer representing the length of the longest harmonious subsequence. If no such subsequence exists, output 0. Example Input: 6 1 3 2 2 5 2 Output: 4 Explanation: The longest harmonious subsequence is [2, 3, 2, 2], which has the length 4.","solution":"def longest_harmonious_subsequence(N, sequence): from collections import Counter count = Counter(sequence) max_length = 0 for num in count: if num + 1 in count: max_length = max(max_length, count[num] + count[num + 1]) return max_length"},{"question":"Implement a data structure that supports the following operations on a sequence of integers: 1. Add a given integer to all elements in a specified subarray. 2. Multiply all elements in a specified subarray by a given integer. 3. Retrieve the sum of all elements in a specified subarray. You should design your data structure to handle n integers and m operations efficiently. # Input - The first line contains two integers, n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000), which represent the number of integers in the sequence and the number of operations, respectively. - The second line contains n integers a1, a2, ..., an, which represent the initial sequence of integers. - The following m lines each describe an operation. Each operation is given in one of the following formats: - `1 l r x` – Add the integer x to each element in the subarray from index l to index r (inclusive). - `2 l r x` – Multiply each element in the subarray from index l to index r (inclusive) by the integer x. - `3 l r` – Output the sum of all elements in the subarray from index l to index r (inclusive). # Output For each operation of type `3 l r`, output the sum of the elements in the specified subarray. # Example Input ``` 5 5 1 2 3 4 5 1 1 3 2 2 2 4 3 3 1 5 1 3 5 1 3 1 5 ``` Output ``` 27 34 ``` # Explanation 1. After the operation `1 1 3 2`, the sequence becomes `[3, 4, 5, 4, 5]`. 2. After the operation `2 2 4 3`, the sequence becomes `[3, 12, 15, 12, 5]`. 3. The sum of all elements in the sequence `[3, 12, 15, 12, 5]` is `3 + 12 + 15 + 12 + 5 = 47`. 4. After the operation `1 3 5 1`, the sequence becomes `[3, 12, 16, 13, 6]`. 5. The sum of all elements in the sequence `[3, 12, 16, 13, 6]` is `3 + 12 + 16 + 13 + 6 = 50`. # Note Efficient handling of these operations might require the use of data structures like segment trees or Fenwick trees, especially when dealing with large values of n and m. Ensure your implementation optimally handles the updates and queries within acceptable time limits.","solution":"class SequenceManager: def __init__(self, n, a): self.n = n self.a = a[:] def add_to_subarray(self, l, r, x): for i in range(l - 1, r): self.a[i] += x def multiply_subarray(self, l, r, x): for i in range(l - 1, r): self.a[i] *= x def sum_subarray(self, l, r): return sum(self.a[l - 1:r])"},{"question":"# Courier Delivery Route A courier is given a delivery task in a city represented by a grid. The courier starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner (n-1, m-1) to deliver a package. The courier can only move right or down at any point in time. However, there are obstacles in the grid that the courier cannot pass through. Given a grid where `0` represents an empty cell and `1` represents an obstacle, determine the number of unique paths that the courier can take to reach the destination. # Input The input consists of: - A single integer `t` (1 ≤ t ≤ 10) – the number of test cases. For each test case: - Two integers `n` and `m` (1 ≤ n, m ≤ 100) – the dimensions of the grid. - An `n x m` matrix representing the grid where `0` indicates an empty cell and `1` indicates an obstacle. # Output For each test case, output a single integer, the number of unique paths from the top-left to the bottom-right of the grid. If there is no possible path, return 0. # Example Input ``` 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 1 0 ``` Output ``` 2 0 ``` Explanation - In the first test case, the grid with dimensions 3x3 allows for 2 unique paths to the destination: ``` [1 1 0] [0 X 0] [0 0 1] ``` - In the second test case, the grid with dimensions 2x2 has no valid path to the destination due to the obstacles: ``` [1 X] [X 0] ```","solution":"def num_unique_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def unique_paths_for_test_cases(test_cases): results = [] for test in test_cases: grid = test[\'grid\'] results.append(num_unique_paths(grid)) return results"},{"question":"Write a program to check if two given strings are anagrams or not. Two strings are considered anagrams if they have the same characters with the same frequencies but arranged in a different order. Input The input consists of two lines. Each line contains one string. Output The output should be \\"True\\" if the strings are anagrams, and \\"False\\" otherwise. Constraints 1 <= length of strings <= 100000 Example Input: listen silent Output: True Input: hello world Output: False","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. if len(str1) != len(str2): return False # Create frequency dictionaries for both strings freq1 = {} freq2 = {} for char in str1: if char in freq1: freq1[char] += 1 else: freq1[char] = 1 for char in str2: if char in freq2: freq2[char] += 1 else: freq2[char] = 1 # Compare the frequency dictionaries return freq1 == freq2"},{"question":"Karl is experimenting with a new encryption mechanism consisting of shifting the positions of characters in strings. He must implement a function that takes a string `s` and an integer `k` and returns the string with each character shifted `k` positions to the right, in a circular manner. In other words, the character at index `i` in the original string should appear at index `(i + k) % len(s)` in the new string, where `len(s)` is the length of the string. For simplicity, you can assume that the input string `s` consists only of lowercase alphabets (a-z). Input The first line contains the string `s` (1 ≤ len(s) ≤ 105) consisting of lowercase alphabets. The second line contains the integer `k` (1 ≤ k ≤ 109). Output Print the resulting string after shifting each character `k` positions to the right. Examples Input abcdef 2 Output efabcd Input hello 13 Output llohe Note In the first example, shifting `abcdef` two positions to the right results in `efabcd`. In the second example, shifting `hello` thirteen positions results in `llohe`, which is equivalent to shifting it three positions since `13 % 5 = 3` where 5 is the length of the string.","solution":"def shift_string(s, k): Returns a new string where each character in s is shifted k positions to the right. n = len(s) k = k % n # Reduce k to be within the bounds of 0 and n-1 return s[-k:] + s[:-k] if k else s"},{"question":"An e-commerce company is managing the distribution of products from multiple warehouses to customers. Each warehouse has a certain inventory of products, and it can ship items limited by the number of delivery trucks it has. Given the inventory status and the number of trucks available at each warehouse, the company needs to decide how to allocate products from the warehouses to ensure as many customers as possible receive their orders with minimal warehouses used per order. You are tasked to write a program that determines the maximum number of orders that can be fulfilled under these constraints: - Each order requires one unit of a product. - Each delivery truck can carry a fixed number of units of products, denoted as `k`. Input - The first line contains an integer `t` (1 ≤ t ≤ 1000) representing the number of test cases. - Each test case consists of two parts: 1. The first line of each test case contains three integers: `w` (1 ≤ w ≤ 100) - the number of warehouses, `d` (1 ≤ d ≤ 100000) - the number of delivery trucks available in total, and `k` (1 ≤ k ≤ 100) - the delivery capacity of each truck. 2. The second line contains `w` space-separated integers, each representing the number of units of products available in each warehouse. Output - For each test case, output a single integer representing the maximum number of orders that can be fulfilled. Examples Input 2 3 10 5 10 20 15 4 7 4 5 6 8 12 Output 45 28 Explanation In the first test case, we can deliver up to `10 units` from the first warehouse using `2 trucks`, up to `20 units` from the second warehouse using `4 trucks`, and up to `15 units` from the third warehouse using `3 trucks`. Thus, a total of `10 + 20 + 15 = 45` orders can be fulfilled. In the second test case, the best way to allocate trucks to minimize the number of used warehouses while maximizing deliveries is to use `4 trucks` for the fourth warehouse delivering `16 units`, then use `3 trucks` for the third warehouse delivering `12 units`. Therefore, `28 orders` can be fulfilled.","solution":"def max_orders(t, test_cases): results = [] for case in test_cases: w, d, k = case[\'info\'] inventories = case[\'inventories\'] orders_fulfilled = 0 truck_counts = [inv // k for inv in inventories] while d > 0 and any(truck_counts): max_trucks = max(truck_counts) idx = truck_counts.index(max_trucks) used_trucks = min(max_trucks, d) orders_fulfilled += used_trucks * k d -= used_trucks truck_counts[idx] = 0 # Mark this warehouse as used up results.append(orders_fulfilled) return results # Example usage: # Test cases t = 2 test_cases = [ {\'info\': (3, 10, 5), \'inventories\': [10, 20, 15]}, {\'info\': (4, 7, 4), \'inventories\': [5, 6, 8, 12]}, ] # Compute results results = max_orders(t, test_cases) print(results) # Output should be [45, 28]"},{"question":"Problem Statement Alice is organizing a massive treasure hunt in her city. The city can be represented as an undirected graph. Each intersection is a node and each street is an edge connecting two nodes. There are n intersections (nodes) and m streets (edges). Each intersection has a certain value of treasure hidden in it, which is a positive integer. Alice wants to place clues at k intersections such that each clue leads the participants to adjacent intersections with higher treasure values. The treasure hunt starts at any one of these k intersections and you can move to an adjacent intersection to collect more treasure. The goal is to maximize the minimum starting treasure of the k chosen intersections. You are to help Alice determine the optimal set of k intersections where she should place the clues such that the minimum treasure value among the chosen intersections is maximized. Input The input contains several datasets, and each dataset is in the following format: n m k v_1 v_2 ... v_n u_1 v_1 u_2 v_2 ... u_m v_m The first line contains three integers n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 5000), and k (1 ≤ k ≤ n). The second line contains n integers v_i (1 ≤ v_i ≤ 1000), where v_i denotes the treasure value at the i-th intersection. The following m lines each contain two integers u_i and v_i (1 ≤ u_i, v_i ≤ n), representing a street connecting intersections u_i and v_i. The last dataset is followed by a line containing three zeros. Output For each dataset, print a single integer representing the maximum of the minimum treasure value among the chosen intersections for placing the clues. Example Input 5 5 2 10 20 30 40 50 1 2 1 3 2 4 3 4 4 5 4 6 2 10 15 20 25 1 2 2 3 3 4 4 1 6 7 3 5 10 5 20 5 30 1 2 2 3 3 4 4 5 5 6 6 1 0 0 0 Output 40 20 10","solution":"from collections import defaultdict, deque def bfs_maximize_treasure(graph, n, treasures, num_clues): def can_place_clues(min_treasure_value): visited = [False] * (n + 1) start_points = [i for i in range(1, n + 1) if treasures[i - 1] >= min_treasure_value] if len(start_points) < num_clues: return False count = 0 queue = deque(start_points) while queue: node = queue.popleft() if visited[node]: continue visited[node] = True count += 1 if count >= num_clues: return True for neighbor in graph[node]: if not visited[neighbor] and treasures[neighbor - 1] >= min_treasure_value: queue.append(neighbor) return False lo, hi = 1, max(treasures) while lo < hi: mid = (lo + hi + 1) // 2 if can_place_clues(mid): lo = mid else: hi = mid - 1 return lo def treasure_hunt_optimizer(datasets): results = [] for dataset in datasets: n, m, k = dataset[\'n\'], dataset[\'m\'], dataset[\'k\'] treasures = dataset[\'treasures\'] edges = dataset[\'edges\'] graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) results.append(bfs_maximize_treasure(graph, n, treasures, k)) return results"},{"question":"You are given a graph with n nodes numbered 1 through n. The graph is represented as an adjacency matrix A where Ai, j = 1 if there is an edge between node i and node j, and Ai, j = 0 otherwise. Your task is to determine if there is a Hamiltonian path in the graph. A Hamiltonian path is a path in an undirected graph that visits each vertex exactly once. To accomplish this, you can query if there is an edge between any two nodes. The answer to a query will either be \\"Yes\\" if there is an edge, or \\"No\\" if there is not an edge. You may ask at most 1000 queries. After your queries, you will output \\"Yes\\" if there is a Hamiltonian path, or \\"No\\" if there is no Hamiltonian path or you have exceeded the query limit. Input The first line of input will contain a single integer n (2 ≤ n ≤ 20). Output After determining if there is a Hamiltonian path, print \\"Yes\\" if there is one, otherwise print \\"No\\". Queries To ask if there is an edge between two nodes, print \\"Query\\" followed by two integers u and v, where 1 ≤ u, v ≤ n and u ≠ v. After making a query, you will receive either \\"Yes\\" or \\"No\\" as the response. Example Input 4 Output Query 1 2 Yes Query 2 3 Yes Query 3 4 Yes Query 4 1 No Yes Input 4 Output Query 1 2 No Query 1 3 No Query 1 4 No No Hacking To hack someone, use the following format n A_{1,1} A_{1,2} ... A_{1,n} A_{2,1} A_{2,2} ... A_{2,n} ... A_{n,1} A_{n,2} ... A_{n,n}","solution":"from itertools import permutations def query_edge(graph, u, v): return \\"Yes\\" if graph[u-1][v-1] == 1 else \\"No\\" def find_hamiltonian_path(n, graph): nodes = range(1, n + 1) for perm in permutations(nodes): is_path = True for i in range(n - 1): u, v = perm[i], perm[i+1] if query_edge(graph, u, v) == \\"No\\": is_path = False break if is_path: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers a1, a2, ..., an. You need to perform q queries of the following types: 1. Find the maximum element in a subarray specified by its starting and ending indices. The query format is \\"max l r\\". 2. Replace all elements in a subarray specified by its starting and ending indices with a given value x. The query format is \\"set l r x\\". After each first type query, print the required maximum value. Input The first line contains integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^8) — elements of the array. Each of the next q lines contains one of the two types of queries. For the first type query \\"max l r\\", 1 ≤ l ≤ r ≤ n. For the second type query \\"set l r x\\", 1 ≤ l ≤ r ≤ n and |x| ≤ 10^8. Output After each first type query, print the required maximum value. Examples Input 5 4 1 3 2 5 4 max 2 4 set 3 5 0 max 1 3 max 4 5 Output 5 3 0","solution":"def process_queries(n, q, array, queries): Processes \'max\' and \'set\' queries on the given array. Parameters: n (int): Number of elements in the array. q (int): Number of queries. array (list): List of n integers representing the array. queries (list): List of q queries in the format \\"max l r\\" or \\"set l r x\\". Returns: list: List of results for each \'max\' query. results = [] for query in queries: parts = query.split() if parts[0] == \\"max\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(max(array[l:r+1])) elif parts[0] == \\"set\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 x = int(parts[3]) for i in range(l, r+1): array[i] = x return results"},{"question":"Write a program that reads an integer `N` (1 ≤ N ≤ 12), representing the number of the month (January is 1, February is 2, etc.). The program should output a calendar for that month in the standard format. Each month starts on Sunday, and the days are separated by spaces (single space between each day). Ensure the days of the month are lined up properly under the appropriate days of the week headers (\\"Su Mo Tu We Th Fr Sa\\"). Your program should correctly handle leap years for February. A year is a leap year if it is divisible by 4, except for years that are both divisible by 100 and not divisible by 400. The output for each month should resemble the following format: For February (input = 2): ``` Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ``` For July (input = 7): ``` Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ``` Input The input consists of a single line containing the month number (an integer between 1 and 12). Output The output should be the calendar for the given month, starting from Sunday. Example Input 2 Output ``` Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 ``` Input 7 Output ``` Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ```","solution":"import calendar def generate_calendar(month): Generates the calendar for the given month assuming the first day is Sunday. Parameters: month (int): Month number (1-12 representing January to December) Returns: str: Calendar of the given month year = 2023 # We can assume any non-leap year for demonstration # Will handle Feb separately # Configure calendar to start on Sunday cal = calendar.TextCalendar(firstweekday=6) # Generate calendar for the given month month_cal = cal.formatmonth(year, month) return month_cal # Example usage: # print(generate_calendar(2)) # print(generate_calendar(7))"},{"question":"You are given an array of n positive integers, representing the height of buildings in a row. An earthquake hits the city, causing some of the buildings to collapse. More specifically, for each building, if it has a taller building to its immediate left (previous index), it will collapse and turn to a height of 0. Determine the state of the buildings after the earthquake. Input The first line contains a single positive integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n space-separated positive integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output Output a single line containing n integers representing the heights of the buildings after the earthquake. Examples Input 5 3 7 8 6 4 Output 3 7 8 0 0 Input 4 2 1 2 1 Output 2 0 2 0 Input 6 6 5 4 8 7 1 Output 6 0 0 8 0 0 Note In the first example, building 1 (height 3) stays the same since there is no building to its left. Building 2 (height 7) stays the same since it is the first building taller than the first. Building 3 (height 8) stays the same because its height is greater than building 2. Building 4 (height 6) collapses because its height is less than building 3. Building 5 (height 4) collapses because its height is less than building 4 and building 3.","solution":"def buildings_after_earthquake(n, heights): This function takes in an integer n and a list of integers heights representing the heights of buildings. It returns the list of heights after collapsing buildings that have taller buildings to their left. result = [heights[0]] for i in range(1, n): if heights[i] < heights[i-1]: result.append(0) else: result.append(heights[i]) return result"},{"question":"Jasmine is involved in trading gold coins. She has figured out that the price of gold fluctuates throughout the day and wants to maximize her profit by buying and selling coins at certain times. The twist is that in a single day she is allowed to perform multiple buy and sell operations, but she cannot own more than one gold coin at any given time (i.e., she must sell before she can buy again). Help Jasmine to maximize her profit by providing an efficient strategy that works within the constraints. Input First line contains T, number of test cases. Each test case starts with an integer N, representing the number of price changes throughout the day. The next line contains N integers, representing the price of gold coins at different times of the day. Output For each test case, output a single line containing the maximum profit that Jasmine can make in a day. Constraints 1 <= T <= 10 2 <= N <= 10^5 1 <= Price <= 10^5 Time limit: 1s Sample Input 2 5 1 2 3 4 5 6 7 1 5 3 6 4 Sample Output 4 7 Explanation For the first case, Jasmine can buy a coin at the price of 1 and sell at the price of 2, then buy at 2 and sell at 3, then buy at 3 and sell at 4, and finally buy at 4 and sell at 5. The total profit would be (2-1) + (3-2) + (4-3) + (5-4) = 4. For the second case, Jasmine can buy at 1 and sell at 5, then buy at 3 and sell at 6. The total profit would be (5-1) + (6-3) = 7.","solution":"def max_profit(prices): Computes the maximum profit Jasmine can achieve with multiple buy-sell transactions. Parameters: prices (list): List of gold coin prices at different times of the day. Returns: int: Maximum profit achievable. profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i-1]: profit += prices[i] - prices[i-1] return profit def calculate_max_profits(test_cases): Given multiple test cases, calculates the maximum profit for each one. Parameters: test_cases (list of lists): List where each element is a list containing the prices for a single test case. Returns: list of int: List of maximum profits for each test case. results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"You are given a list of integers. Your task is to determine the number of pairs (i, j) (1 ≤ i < j ≤ n) such that the sum of their corresponding list values is even. Input The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) – the number of integers in the list. The next line contains n integers separated by spaces, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) - the integers in the list. Output For each test case, output on a separate line the number of pairs (i, j) such that the sum of the values from the list is even. Example Input 3 4 1 2 3 4 3 2 2 2 6 1 3 5 7 9 11 Output 2 3 15","solution":"def count_even_pairs(t, test_cases): Given the number of test cases and a list of test cases, returns the number of pairs (i, j) such that the sum of their corresponding list values is even. result = [] for test_case in test_cases: n = test_case[0] numbers = test_case[1] # Count the number of even and odd numbers evens = sum(1 for x in numbers if x % 2 == 0) odds = n - evens # Calculate the number of even pairs even_pairs = (evens * (evens - 1)) // 2 odd_pairs = (odds * (odds - 1)) // 2 # Total pairs is the sum of even pairs and odd pairs result.append(even_pairs + odd_pairs) return result"},{"question":"In Poornima College, the PIET CS Department is organizing a coding competition. The competition requires participants to solve a unique problem involving the calculation of the minimum cost to climb stairs with variable costs. Each stair has a specified cost to step on it. The aim is to find the minimum cost required to reach the top. You are given an array where the ith element represents the cost of stepping on the ith stair. Once you pay the cost for a stair, you can move to the next stair or skip one stair. You need to determine the minimum cost to reach the top of the floor, assuming you start either at the first or the second stair. **Input:** The first line contains the number of test cases, T. The following T lines contain: - The first integer N, the number of stairs. - The next N integers represent the cost associated with each stair. **Output:** Print the minimum cost to reach the top for each test case. **Constraints:** 1 ≤ T ≤ 50 2 ≤ N ≤ 1000 1 ≤ cost[i] ≤ 1000 **SAMPLE INPUT:** ``` 3 3 10 15 20 5 1 100 1 1 1 4 1 2 3 4 ``` **SAMPLE OUTPUT:** ``` 15 3 4 ``` **Explanation:** - In the first case, there are 3 stairs with costs [10, 15, 20]. The minimum cost path is 10 -> 15 for a total cost of 15. - In the second case, the minimum cost path is achieved by taking the sequence: 1 -> 1 -> 1, leading to a total cost of 3. - In the third case, the minimum cost path is 1 -> 3, leading to a total cost of 4.","solution":"def min_cost_climbing_stairs(cost): Function to calculate the minimum cost to climb stairs. n = len(cost) if n == 0: return 0 elif n == 1: return cost[0] dp = [0] * n dp[0] = cost[0] dp[1] = cost[1] for i in range(2, n): dp[i] = cost[i] + min(dp[i - 1], dp[i - 2]) return min(dp[n - 1], dp[n - 2]) def process_input(input_str): Function to process input and output the result for multiple test cases. input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) costs = list(map(int, input_lines[index + 1].split())) index += 2 results.append(min_cost_climbing_stairs(costs)) return results"},{"question":"You are given a string `s` and an integer `k`. Your task is to divide the string into `k` contiguous substrings such that the sum of their lengths equals the length of the string, and the total number of distinct characters among all substrings is minimized. Input The first line consists of a string `s` (1 ≤ |s| ≤ 100) and an integer `k` (1 ≤ k ≤ |s|). Output Output the minimized number of distinct characters after the optimal division into `k` substrings. If it\'s not possible to divide the string into `k` parts, output -1. Examples Input abacaba 4 Output 3 Input aaaa 2 Output 1 Input abcdef 7 Output -1","solution":"def min_distinct_chars(s, k): if k > len(s): return -1 from collections import Counter count = Counter(s) distinct_char_count = len(count.keys()) if k == 1: return distinct_char_count # Initialize a list to store length of each k partitions partitions = [1] * k index = 0 # Distribute remaining length over the partitions for i in range(len(s) - k): partitions[index] += 1 index += 1 if index == k: index = 0 # Maintain a set of distinct characters in each partition start = 0 seen = set() for length in partitions: part = s[start:start+length] seen.update(part) start += length return len(seen)"},{"question":"Binary Tree Zigzag Level Order Traversal Given the root of a binary tree, return the zigzag level order traversal of its nodes\' values. (i.e., from left to right, then right to left for the next level and alternate between). You need to implement the function `List[List[int]] zigzagLevelOrder(TreeNode root)`. # Function Signature ```python def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: ``` # Input The function takes the following parameters: - `root (TreeNode)`: The root of the binary tree. # Output The function should return a list of lists, where each inner list represents the values of the nodes at each level of the binary tree, traversed in a zigzag order. # Constraints - The number of nodes in the tree is in the range `[0, 2000]`. - `-100 <= Node.val <= 100` # Example Example 1 # Input ``` 3 / 9 20 / 15 7 ``` # Output ``` [ [3], [20, 9], [15, 7] ] ``` Example 2 # Input ``` 1 / 2 3 / / 4 5 6 7 ``` # Output ``` [ [1], [3, 2], [4, 5, 6, 7] ] ```","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: Optional[TreeNode]) -> List[List[int]]: if not root: return [] results = [] current_level_nodes = deque([root]) left_to_right = True while current_level_nodes: level_result = [] for _ in range(len(current_level_nodes)): if left_to_right: node = current_level_nodes.popleft() level_result.append(node.val) if node.left: current_level_nodes.append(node.left) if node.right: current_level_nodes.append(node.right) else: node = current_level_nodes.pop() level_result.append(node.val) if node.right: current_level_nodes.appendleft(node.right) if node.left: current_level_nodes.appendleft(node.left) results.append(level_result) left_to_right = not left_to_right return results"},{"question":"A company has a fleet of vehicles, and they need to manage the scheduling of these vehicles to deliver products to various destinations. Each vehicle has a specific capacity, and each product has a specific weight. Given the capacities of the vehicles and the weights of the products, you need to determine the minimum number of vehicles required to deliver all products, ensuring that no vehicle exceeds its capacity. Input The first line contains one integer m (1 ≤ m ≤ 1000) — the number of products. The second line contains m integers w1, w2, ..., wm (1 ≤ wi ≤ 1000) — the weights of the products. The third line contains one integer k (1 ≤ k ≤ 1000) — the number of available vehicles. The fourth line contains k integers c1, c2, ..., ck (1 ≤ ci ≤ 1000) — the capacities of the vehicles. Output Print one integer — the minimum number of vehicles required to deliver all products. If it is not possible to deliver all products, print -1. Examples Input 5 2 3 4 5 6 3 8 7 9 Output 3 Input 4 4 1 6 5 2 7 10 Output 2 Input 3 10 15 25 2 8 12 Output -1","solution":"def minimum_vehicles_required(m, weights, k, capacities): Determines the minimum number of vehicles required to deliver all products without exceeding their capacity. Parameters: m (int): The number of products. weights (list of int): The weights of the products. k (int): The number of available vehicles. capacities (list of int): The capacities of the vehicles. Returns: int: The minimum number of vehicles required, or -1 if it is not possible to deliver all products. # Sort the weights of products in descending order weights.sort(reverse=True) # Sort the capacities of vehicles in descending order capacities.sort(reverse=True) # Initialize vehicle usage tracker vehicle_used = [0] * k for weight in weights: for i in range(k): if vehicle_used[i] + weight <= capacities[i]: vehicle_used[i] += weight break else: # If no vehicle can accommodate this product, return -1 return -1 # Count how many vehicles were actually used used_vehicle_count = sum(1 for usage in vehicle_used if usage > 0) return used_vehicle_count"},{"question":"Alex loves playing with strings and has recently come across an interesting challenge. Given a string `s`, Alex wants to find the length of the longest substring that appears at least twice without overlapping in `s`. The overlapping is not allowed, meaning if a substring starts at position `i`, another instance of this substring should not start before position `i + length of substring`. For example, if the string is “banana”, the longest such substring would be “ana”, which has a length of 3. Your task is to write a program that will determine the length of the longest non-overlapping repeating substring for a given string `s`. Input The only line of input contains a single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output Print the length of the longest non-overlapping repeating substring in `s`. If no such substring exists, print 0. Examples Input banana Output 3 Input abcd Output 0","solution":"def longest_non_overlapping_repeating_substring(s): n = len(s) def is_valid_length(length): seen = set() for i in range(0, n - length + 1): substring = s[i:i + length] if substring in seen: return True seen.add(substring) return False left, right = 1, n // 2 + 1 result = 0 while left < right: mid = (left + right) // 2 if is_valid_length(mid): result = mid left = mid + 1 else: right = mid return result"},{"question":"A company wants to send individualized discount codes to its customers. Each customer is identified by unique customer ID. The company maintains a list of IDs and their respective purchase amounts and wants to generate discount codes based on the purchase amount tiers. You are provided with a list of customer IDs and their corresponding purchase amounts. The purchase tiers and discount rates are predefined as follows: - Tier 1: Amount up to 100 — No discount - Tier 2: Amount more than 100 and up to 500 — 10% discount - Tier 3: Amount more than 500 and up to 1000 — 20% discount - Tier 4: Amount more than 1000 — 30% discount For each customer ID, generate a discount code that corresponds to their purchase amount tier. The discount code should be in the format \\"DISCOUNT_<RATE>%\\", where <RATE> is the discount percentage for that tier. **Input** - The first line contains an integer n (1 ≤ n ≤ 105), which is the number of customers. - The next n lines each contain a string customer_id and a float purchase_amount separated by a space. **Output** - Output n lines, each containing the customer_id and the corresponding discount code separated by a space. **Example Input** ``` 3 cust123 120.50 cust456 750.00 cust789 50.25 ``` **Example Output** ``` cust123 DISCOUNT_10% cust456 DISCOUNT_20% cust789 DISCOUNT_0% ``` **Note** - You need to ensure that the discount codes exactly match the specified format. - Float values in the input will have at most 2 decimal places.","solution":"def generate_discount_codes(n, customers): Generates discount codes based on purchase amount tiers. :param n: int, number of customers :param customers: list of tuples, each containing a customer_id and a purchase_amount :returns: list of strings, each containing the customer_id and the corresponding discount code discount_codes = [] for customer_id, purchase_amount in customers: if purchase_amount <= 100: discount_code = \\"DISCOUNT_0%\\" elif 100 < purchase_amount <= 500: discount_code = \\"DISCOUNT_10%\\" elif 500 < purchase_amount <= 1000: discount_code = \\"DISCOUNT_20%\\" else: discount_code = \\"DISCOUNT_30%\\" discount_codes.append(f\\"{customer_id} {discount_code}\\") return discount_codes"},{"question":"You are given a list of words where each word is a string of lower case alphabets. Your task is to determine whether the list of words can be sorted in such a way that each word is followed by a word whose first letter is the same as the last letter of the previous word. If such an order is possible, return \\"Yes\\" otherwise return \\"No\\". Input Format The first line of input contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of words. The second line contains N space-separated words. Output Format For each test case, print \\"Yes\\" if it is possible to sort the words as described, otherwise print \\"No\\". Constraints 1 ≤ T ≤ 10^2 1 ≤ N ≤ 10^3 1 ≤ Length of each word ≤ 10 SAMPLE INPUT 2 3 abc cde efg 4 hello world test this SAMPLE OUTPUT Yes No","solution":"def can_sort_words(words): def dfs(start, current_word, visited): if len(visited) == len(words): return True for i in range(len(words)): if i not in visited and current_word[-1] == words[i][0]: visited.add(i) if dfs(i, words[i], visited): return True visited.remove(i) return False for i in range(len(words)): if dfs(i, words[i], set([i])): return \\"Yes\\" return \\"No\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, words = test_cases[i] results.append(can_sort_words(words)) return results # Example usage: # test_cases = [(3, [\\"abc\\", \\"cde\\", \\"efg\\"]), (4, [\\"hello\\", \\"world\\", \\"test\\", \\"this\\"])] # T = len(test_cases) # print(process_test_cases(T, test_cases)) # This should output [\'Yes\', \'No\']"},{"question":"Write a function to find the length of the longest increasing subsequence in a given array of integers. Constraints * 1 ≤ n ≤ 10,000 * -10,000 ≤ ai ≤ 10,000 Input n a0 a1 a2 ... a(n-1) The first line contains the integer n, which is the number of elements in the array. The second line contains n integers representing the elements of the array. Output Print a single integer which is the length of the longest increasing subsequence. Examples Input 6 10 9 2 5 3 7 101 Output 4 Input 9 0 8 4 12 2 10 6 14 1 9 Output 4","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in an array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Consider a two-dimensional grid where each cell can either be land (1) or water (0). An island is a group of connected land cells; two cells are connected if they are adjacent horizontally or vertically. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). You need to identify the smallest rectangle (aligned with the grid axes) that can enclose the island and determine its area. # Input The input begins with two integers m and n (1 <= m, n <= 100), the number of rows and columns of the grid, respectively. The next m lines each contain n integers (either 0 or 1), representing the grid. # Output Print the area of the smallest rectangle that can enclose the island. # Examples **Example 1** Input 4 5 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 Output 4 **Example 2** Input 3 3 0 0 0 0 1 0 0 0 0 Output 1","solution":"def min_enclosing_rectangle_area(m, n, grid): Returns the area of the smallest rectangle that can enclose the island. left, right = n, -1 top, bottom = m, -1 for i in range(m): for j in range(n): if grid[i][j] == 1: if j < left: left = j if j > right: right = j if i < top: top = i if i > bottom: bottom = i if left == n or right == -1 or top == m or bottom == -1: return 0 return (right - left + 1) * (bottom - top + 1)"},{"question":"Write a function that takes as input a string of parentheses and returns the length of the longest valid (well-formed) parentheses substring. # Input - An integer ( t ) representing the number of test cases. - The next ( t ) lines each contain a single string consisting of the characters \'(\' and \')\'. # Output For each test case, print the length of the longest valid parentheses substring. # Constraints - ( 1 leq t leq 10 ) - The length of each parentheses string will not exceed ( 10^5 ). # Function Signature ```python def longest_valid_parentheses(t: int, test_cases: List[str]) -> List[int]: pass ``` # Example Input ``` 3 (()()) ()(() ()()()((( ``` # Example Output ``` 6 2 6 ``` # Explanation 1. In the first test case, the longest valid parentheses substring is \\"(()())\\", which has a length of 6. 2. In the second test case, the longest valid parentheses substring is \\"()\\", which has a length of 2. 3. In the third test case, the longest valid parentheses substring is \\"()()()\\", which has a length of 6.","solution":"from typing import List def longest_valid_parentheses(t: int, test_cases: List[str]) -> List[int]: def find_max_length(s): max_len = 0 stack = [] last_invalid_index = -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - last_invalid_index) else: last_invalid_index = i return max_len results = [] for test in test_cases: results.append(find_max_length(test)) return results"},{"question":"You are given an integer array that consists of unique elements and is sorted in ascending order. Your task is to determine if there exists a pair of elements in the array whose difference is equal to a given value `k`. Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000; 0 ≤ k ≤ 1000). The second line contains `n` integers, representing the elements of the array. Output Print \\"Yes\\" if there exists a pair of elements in the array whose difference is `k`. Print \\"No\\" otherwise. Examples Input 5 2 1 5 7 9 12 Output Yes Input 4 3 1 4 6 9 Output Yes Input 3 10 1 3 6 Output No","solution":"def has_pair_with_difference(arr, k): Given an array of unique integers sorted in ascending order and a value k, returns \\"Yes\\" if there exists a pair of elements in the array whose difference is k, otherwise returns \\"No\\". n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[j] - arr[i] == k: return \\"Yes\\" return \\"No\\""},{"question":"In a hardware sales company, a system calculates the total price of different computer hardware components purchased together. Each component has its price, and the system needs to apply different discount rates based on the total value of the purchase. Your task is to write a function that calculates the total price after applying the appropriate discount. # Total purchase ranges and discounts - For total purchase below 1000, no discount. - For total purchase between 1000 and 5000, apply a 10% discount. - For total purchase between 5000 and 10000, apply a 15% discount. - For total purchase above 10000, apply a 20% discount. # Input Format - An integer `n` representing the number of components purchased. - `n` lines follow, each containing an integer indicating the price of a component. # Output Format A single floating-point number representing the total price after applying the discount, rounded to 2 decimal places. # Constraints - 1 ≤ n ≤ 100 - 1 ≤ price of each component ≤ 10000 # SAMPLE INPUT 4 1000 2000 3000 4000 # SAMPLE OUTPUT 9000.00","solution":"def calculate_total_price(n, prices): Calculate the total price after applying discounts based on the total purchase amount. Args: n (int): Number of components purchased. prices (list of ints): List of prices of each component. Returns: float: The total price after applying the discount, rounded to 2 decimal places. total = sum(prices) if total < 1000: discount = 0 elif 1000 <= total < 5000: discount = 0.10 elif 5000 <= total < 10000: discount = 0.15 else: discount = 0.20 discounted_total = total * (1 - discount) return round(discounted_total, 2)"},{"question":"Mike is a software developer working on a critical application that logs system events. Each event log entry contains a timestamp and an event message. Mike needs to implement a feature that will allow users to query for the most recent event messages within a specific time window. You need to help Mike by implementing a function `recent_events(logs, queries)` that processes the event logs and answers the queries. Input: - `logs`: a list of tuples (timestamp, message) where `timestamp` is an integer representing the time when the event occurred, and `message` is a string containing the event description. - `queries`: a list of tuples (start_timestamp, end_timestamp) where `start_timestamp` and `end_timestamp` define the time window. Output: - Return a list of lists, where each inner list contains event messages that occurred within the respective time window specified in the queries, sorted by their timestamps in ascending order. Constraints: - 1 ≤ len(logs) ≤ 10^5 - 1 ≤ len(queries) ≤ 10^5 - The timestamps are guaranteed to be distinct and sorted in ascending order. Example: ``` Input: logs = [(1, \\"System start\\"), (2, \\"User login\\"), (5, \\"Error: Disk full\\"), (10, \\"User logout\\")] queries = [(1, 5), (2, 10), (3, 7)] Output: [[\\"System start\\", \\"User login\\", \\"Error: Disk full\\"], [\\"User login\\", \\"Error: Disk full\\", \\"User logout\\"], [\\"User login\\", \\"Error: Disk full\\"]] ``` Implement the function `recent_events(logs, queries)` to solve the problem. Example Implementation: ```python def recent_events(logs, queries): result = [] # Create a list of timestamps and corresponding messages for quick lookup timestamps = [log[0] for log in logs] for start, end in queries: # Find the start index start_idx = bisect_left(timestamps, start) # Find the end index end_idx = bisect_right(timestamps, end) # Collect the logs within the range messages_within_range = [logs[i][1] for i in range(start_idx, end_idx)] # Append to the result list result.append(messages_within_range) return result ``` Note: - Use binary search to quickly find the index range for each query\'s time window to achieve efficient query processing. - Ensure the messages within the specified time range are returned in ascending order based on timestamps.","solution":"from bisect import bisect_left, bisect_right def recent_events(logs, queries): Returns the event messages within the specified time windows. :param logs: List of tuples (timestamp, message) :param queries: List of tuples (start_timestamp, end_timestamp) :return: List of lists containing event messages within each time window result = [] # Create a list of timestamps for efficient lookup timestamps = [log[0] for log in logs] for start, end in queries: # Find the start index start_idx = bisect_left(timestamps, start) # Find the end index end_idx = bisect_right(timestamps, end) # Collect the logs within the range messages_within_range = [logs[i][1] for i in range(start_idx, end_idx)] # Append to the result list result.append(messages_within_range) return result"},{"question":"Problem D Library Book Borrowing System A university library has a system for borrowing books. Each book in the library is associated with an integer value called the return time, which represents the number of days after which a borrowed book must be returned. Students are also given distinct integers as their student ID. Students can borrow books from the library, and each student can borrow only one book at a time. If a book is borrowed by a student, it cannot be borrowed by another student until it is returned. The library maintains a borrowing log that records the transactions in the sequence they occur. Your task is to simulate the borrowing and returning of books and determine the status (returned or not) and borrower (student ID) of each book after processing a series of transactions. Input The input consists of a single test case in the following format: n B_1 ... B_n m T_1 S_1 A_1 ... T_m S_m A_m - n is an integer representing the number of books in the library (1 leq n leq 100000). - For each i, the integer B_i represents the return time (in days) of book i (1 leq B_i leq 10000). - m is an integer representing the number of transactions (1 leq m leq 200000). - For each j, the integer T_j is the transaction type (1 for borrowing, 0 for returning). - S_j is the student ID involved in the transaction (1 leq S_j leq 100000). - A_j is the book ID involved in the transaction (1 leq A_j leq n). Output Output n lines each containing the status (either \\"returned\\" or \\"borrowed\\") and the borrower (student ID or \\"N/A\\" if returned) for each book from 1 to n in order. Sample Input 3 7 10 5 6 1 2 1 1 1 3 0 2 1 1 3 1 1 2 2 Sample Output borrowed 3 borrowed 2 borrowed 1 Explanation - Book 1 has a return time of 7 days, book 2 has 10 days, and book 3 has 5 days. - Transaction 1: Student 2 borrows book 1. - Transaction 2: Student 1 borrows book 3. - Transaction 3: Student 2 returns book 1. - Transaction 4: Student 3 borrows book 1. - Transaction 5: Student 2 borrows book 2. As a result: - Book 1 is borrowed by student 3. - Book 2 is borrowed by student 2. - Book 3 is borrowed by student 1.","solution":"def library_system(n, book_return_times, transactions): book_status = [[\\"returned\\", \\"N/A\\"] for _ in range(n)] borrowed_books = {} for transaction in transactions: T, S, A = transaction if T == 1: if book_status[A-1][0] == \\"returned\\": book_status[A-1] = [\\"borrowed\\", S] borrowed_books[(A, S)] = True elif T == 0: if (A, S) in borrowed_books: book_status[A-1] = [\\"returned\\", \\"N/A\\"] del borrowed_books[(A, S)] return book_status # Function to handle input and output parsing for the solution. def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) book_return_times = [int(data[i]) for i in range(1, n+1)] m = int(data[n+1]) transactions = [] idx = n + 2 for _ in range(m): T = int(data[idx]) S = int(data[idx+1]) A = int(data[idx+2]) transactions.append((T, S, A)) idx += 3 result = library_system(n, book_return_times, transactions) for status in result: print(status[0], status[1]) # The `main()` function to be called for execution only when this script # is run directly, useful for running tests in a different environment. if __name__ == \\"__main__\\": main()"},{"question":"A farmer has G goats and S sheep in his barn. Every day for D days, the farmer performs the following actions: - If the farmer has at least one goat, he sells one goat. - If the farmer has no goats left but has at least one sheep, he sells one sheep. - If both the goats and sheep are all sold out, he does nothing. At the end of D days, how many goats and sheep are left in the barn? Constraints - 0 leq G leq 10^{12} - 0 leq S leq 10^{12} - 0 leq D leq 10^{12} - All values in input are integers. Input Input is given from Standard Input in the following format: ``` G S D ``` Output Print the numbers of goats and sheep remaining in the barn after D actions. Examples Input ``` 4 5 3 ``` Output ``` 1 5 ``` Input ``` 200000000000 100000000000 250000000000 ``` Output ``` 0 50000000000 ```","solution":"def remaining_animals(G, S, D): Function to compute the number of goats and sheep remaining after D days. Parameters: G (int): initial number of goats S (int): initial number of sheep D (int): number of days actions are performed Returns: tuple: remaining number of goats and sheep # Reduce the goats count first goats_left = max(G - D, 0) # Calculate remaining actions after all goats (if any) are sold remaining_days = max(D - G, 0) # Reduce the sheep count by remaining actions sheep_left = max(S - remaining_days, 0) return goats_left, sheep_left"},{"question":"You are given an oid function which always returns zero. All of the integer values in the array are distinct. Find out whether the integer given is an oid or not. The input format is as follows: Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The following line contains a single integer x (1 ≤ x ≤ 10^9) — the integer to be checked. Output Output a single line containing \\"YES\\" (without quotes) if x is an oid, otherwise print \\"NO\\" (without quotes). Examples Input 5 3 1 4 2 5 1 Output YES Input 5 3 1 4 2 5 6 Output NO","solution":"def is_oid(n, array, x): Determines if x is in the array. Parameters: n (int): the number of elements in the array array (list): the list of n distinct integers x (int): the integer to be checked Returns: str: \\"YES\\" if x is in the array, otherwise \\"NO\\" return \\"YES\\" if x in array else \\"NO\\""},{"question":"You have been hired as a software engineer at a prestigious tech company. One of your tasks is to develop a new feature for an online shopping platform that involves merging two sorted lists of product prices. The goal is to merge two sorted lists of integers into one sorted list, in ascending order. Given two non-decreasing lists of integers, write a function that merges them into a single non-decreasing list. # Input - The first line contains two integers `n` and `m` (0 ≤ n, m ≤ 100,000) — the lengths of the first and second list, respectively. - The second line contains `n` integers separated by spaces — the elements of the first list. - The third line contains `m` integers separated by spaces — the elements of the second list. # Output - Print a single line with `n + m` integers — the merged list in non-decreasing order. # Examples Example 1 # Input 7 5 1 3 5 7 9 11 13 2 4 6 8 10 # Output 1 2 3 4 5 6 7 8 9 10 11 13 Example 2 # Input 4 0 1 3 5 7 # Output 1 3 5 7 Example 3 # Input 0 3 2 4 6 # Output 2 4 6 # Constraints - Each integer in the input lists will be between -10^9 and 10^9 inclusive. - The given lists are already sorted in non-decreasing order. # Notes - You may not use built-in sorting functions. - Consider edge cases such as empty lists, lists with the same elements, and lists with large ranges of numbers.","solution":"def merge_sorted_lists(n, m, list1, list2): Merges two sorted lists into one sorted list in non-decreasing order. Parameters: n (int): Length of the first list. m (int): Length of the second list. list1 (list of int): The first sorted list. list2 (list of int): The second sorted list. Returns: list of int: A merged sorted list. i = 0 j = 0 merged_list = [] while i < n and j < m: if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < n: merged_list.append(list1[i]) i += 1 while j < m: merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Shika loves playing with strings. She recently discovered a fascinating type of string transformation. A string S can be transformed into another string T using a sequence of operations where each operation allows her to change exactly one character in S to any other character. Shika wants to find the minimum number of operations required to transform string S into string T. Constraints * 1 leq N leq 100,000 * The lengths of S and T are both N. * Both S and T consist of lowercase English letters. Input The input is given from Standard Input in the following format: N S T Output Print the minimum number of operations required to transform string S into string T. Examples Input 5 abcde abzde Output 1 Input 4 aaaa bbbb Output 4 Input 3 xyz xyz Output 0 Input 6 abcdef fedcba Output 6","solution":"def min_operations_to_transform(S, T): Returns the minimum number of operations required to transform string S into string T. if len(S) != len(T): raise ValueError(\\"Strings S and T must be of the same length\\") operations = sum(1 for s, t in zip(S, T) if s != t) return operations"},{"question":"You are given an array `heights` where `heights[i]` represents the height of a building at index `i`. The buildings are standing in a row and each building has a width of 1. You are also given an integer `K`. You need to perform the following operations exactly `K` times: 1. Select any building. 2. Increase the height of the selected building by 1. Your task is to find the maximum possible height difference between the tallest and the shortest building after performing exactly `K` operations. # Input The input is given from Standard Input in the following format: ``` N K heights_1 heights_2 ... heights_N ``` Where: - `N` is the number of buildings (1 ≤ N ≤ 100,000). - `K` is the number of operations to perform (1 ≤ K ≤ 1,000,000). - `heights_i` is the height of the building at index `i` (1 ≤ heights_i ≤ 1,000). # Output Print a single integer representing the maximum possible height difference between the tallest and shortest building after exactly `K` operations. # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 5 ``` Explanation One possible way to achieve the maximum height difference after 3 operations is: - Increase the height of the building at index 0 by 3. - New heights: [4, 2, 3, 4, 5] - Maximum height difference: 5 - 2 = 3. Input ``` 4 10 1 1 1 1 ``` Output ``` 10 ``` Explanation - Increase the height of any building by 10. - New heights: [11, 1, 1, 1] (or any variation where one building is incremented by 10 while others remain the same) - Maximum height difference: 11 - 1 = 10 # Constraints - You can choose to increment the height of any building, regardless of its initial height. - You must distribute the `K` increments optimally to achieve the maximum possible height difference.","solution":"def max_height_difference(N, K, heights): Find the maximum possible height difference between the tallest and shortest building after performing exactly K operations. min_height = min(heights) max_height = max(heights) # The minimal building height would be maximized incrementally new_min_height = min_height + K # Compute the difference between the tallest building and the new minimal height max_difference = max_height - min_height + K return max_difference"},{"question":"Polycarpus has a task scheduling software that needs optimization. He has t test cases where each test case consists of a series of tasks with dependencies. Each task should be completed before certain other tasks can be started (i.e., task dependency). Polycarpus wants to find a valid order for completing all tasks. You need to help him determine the order in which tasks should be completed for each test case. If there are multiple valid orders, any one valid order is acceptable. If it is impossible to finish all tasks (due to circular dependencies), return an empty list for that test case. Input: The input contains one or several test cases. The first input line contains a single integer t — number of test cases. Then, t test cases follow. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of tasks. The following n lines describe dependencies, each line containing two space-separated integers a_i, b_i (1 ≤ a_i, b_i ≤ n) — task a_i must be completed before task b_i. Each task can appear multiple times as a_i or b_i in different dependencies. Output: For each test case print one line with the order of tasks. If it is impossible to find a valid order, print an empty list for that test case. Example: Input 2 4 1 2 1 3 3 2 2 4 3 1 2 2 3 3 1 Output 1 3 2 4 [] Explanation: In the first test case, a possible valid order is [1, 3, 2, 4]. Task 1 has no dependencies so it can be completed first. Task 3 and 2 depend on task 1, so they can follow next. Task 4 depends on task 2, so it comes last. In the second test case, the tasks have circular dependencies [1 -> 2 -> 3 -> 1], making it impossible to complete all tasks. Hence, the output is an empty list.","solution":"from collections import defaultdict, deque def find_task_order(t, test_cases): def topological_sort(n, edges): in_degree = {i: 0 for i in range(1, n + 1)} graph = defaultdict(list) for u, v in edges: graph[u].append(v) in_degree[v] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return [] results = [] for i in range(t): n, edges = test_cases[i] results.append(topological_sort(n, edges)) return results"},{"question":"I have some books that I\'d like to arrange on a shelf. Every book has a different height and width. I\'d like to maximize the number of books I can place on the shelf without breaking the rules. The rule is that a book can only be placed on the shelf if its height is less than or equal to the height of the book immediately to its left. The width of the shelf is limited as well. You need to figure out how many books I can place on the shelf while adhering to these rules. Books can be placed next to each other if there is enough remaining width on the shelf. The height condition must be satisfied as well. Determine the maximum number of books that can be placed on the shelf. Input The first line contains an integer N (1 ≤ N ≤ 200) and an integer W (1 ≤ W ≤ 10,000) separated by a space. N is the number of books, and W is the maximum width of the shelf. The next N lines contain two integers each — hi and wi (1 ≤ hi, wi ≤ 10,000). hi is the height of the i-th book, and wi is the width of the i-th book. Output Output a single integer representing the maximum number of books that can be placed on the shelf. Examples Input 5 10 5 1 6 2 4 3 3 4 2 2 Output 4 Input 4 15 7 5 6 4 5 3 4 2 Output 4 Input 3 8 5 1 3 5 4 2 Output 3","solution":"def max_books_on_shelf(N, W, books): books.sort(key=lambda x: x[0]) dp = [0] * (W + 1) for h, w in books: for i in range(W, w - 1, -1): dp[i] = max(dp[i], dp[i - w] + 1) return max(dp)"},{"question":"Chef is organizing a jumping contest for his robot-waiters. The robots can jump, and each jump is among the four possible types: forward, backward, to the left, or to the right. Given the initial position (0, 0) and a destination point (x, y), the contest goal is to determine the minimum number of jumps required for the robots to reach the destination. Each jump changes the position of the robot by exactly one unit in any of the four directions (up, down, left, or right). Input The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated integers x and y representing the coordinates of the destination point. Output For each test case, output a single line containing the minimum number of jumps required to reach the destination point (x, y). Constraints 1 ≤ T ≤ 10^5 -10^9 ≤ x, y ≤ 10^9 Example Input: 3 3 4 -1 -1 0 0 Output: 7 2 0 Explanation Example case 1: The robot can reach (3, 4) with 3 jumps in the positive x-direction and 4 jumps in the positive y-direction, totaling 7 jumps. Example case 2: The robot can reach (-1, -1) with 1 jump in the negative x-direction and 1 jump in the negative y-direction, totaling 2 jumps. Example case 3: The robot is already at the destination point, so no jumps are needed.","solution":"def minimum_jumps(x, y): Returns the minimum number of jumps required to reach the destination (x, y). return abs(x) + abs(y) def solve_contest(test_cases): results = [] for x, y in test_cases: results.append(minimum_jumps(x, y)) return results # Example usage: # test_cases = [(3, 4), (-1, -1), (0, 0)] # print(solve_contest(test_cases)) # Output: [7, 2, 0]"},{"question":"A router network is organized as an undirected graph consisting of N routers and M bidirectional communication channels between them. Each channel has an associated cost of communication which is a positive integer. Find the minimum cost to connect all routers such that there exists a path between any pair of routers. If it is impossible to connect all routers, output -1. Constraints * 1 ≤ N ≤ 10^5 * 0 ≤ M ≤ 5*10^5 * 1 ≤ cost ≤ 10^6 Input The input is given from Standard Input in the following format: ``` N M u1 v1 cost1 u2 v2 cost2 ... um vm costm ``` Each line from the third to the (M+2)-th line represents a communication channel between router `ui` and router `vi` with a cost of `costi`. Output Output a single integer representing the minimum cost to connect all routers. If it is impossible to connect all routers, output -1. Examples Input ``` 4 5 1 2 1 1 3 4 2 3 2 2 4 6 3 4 3 ``` Output ``` 6 ``` Input ``` 4 2 1 2 1 3 4 2 ``` Output ``` -1 ``` # Solution Explanation In the first example, the minimum cost to connect all routers is achieved by choosing the channels (1-2), (2-3), and (3-4), with a total cost of 1+2+3=6. In the second example, it is impossible to connect all routers using the given channels, thus the output is -1. The problem can be solved using Kruskal’s or Prim’s algorithm to find the Minimum Spanning Tree (MST) of a graph. If the MST includes exactly (N-1) edges, it indicates a successful connection. If not, then the routers cannot be fully connected.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size def find(self, p): if self.parent[p] != p: self.parent[p] = self.find(self.parent[p]) return self.parent[p] def union(self, p, q): rootP = self.find(p) rootQ = self.find(q) if rootP != rootQ: if self.rank[rootP] > self.rank[rootQ]: self.parent[rootQ] = rootP elif self.rank[rootP] < self.rank[rootQ]: self.parent[rootP] = rootQ else: self.parent[rootQ] = rootP self.rank[rootP] += 1 return True return False def min_cost_to_connect_routers(n, m, channels): if n == 1: return 0 if m < n - 1: return -1 channels.sort(key=lambda edge: edge[2]) uf = UnionFind(n) total_cost = 0 edges_used = 0 for u, v, cost in channels: if uf.union(u - 1, v - 1): total_cost += cost edges_used += 1 if edges_used == n - 1: return total_cost return -1"},{"question":"Jennifer has a string consisting of lowercase English letters. She wants to determine whether it\'s possible to rearrange the letters of the string such that no two adjacent characters are the same. Input The input consists of a single string s (1 ≤ |s| ≤ 100 000) — the string Jennifer has. Output Print \\"YES\\" if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, print \\"NO\\". Examples Input aab Output YES Input aaab Output NO Input aabbcc Output YES Note In the first sample, the string \\"aab\\" can be rearranged to \\"aba\\", so the answer is \\"YES\\". In the second sample, it\'s impossible to rearrange \\"aaab\\" such that no two \'a\' characters are adjacent, so the answer is \\"NO\\". In the third sample, the string \\"aabbcc\\" can be rearranged to \\"abcabc\\" or \\"acbacb\\", so the answer is \\"YES\\".","solution":"from collections import Counter def can_rearrange(s): Determines if the string s can be rearranged such that no two adjacent characters are the same. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it is possible to rearrange the string, otherwise \\"NO\\". n = len(s) freqs = Counter(s) max_count = max(freqs.values()) # If the most frequent character appears more than (n+1)//2 times, it cannot be rearranged if max_count > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"Given an array with n elements, you are required to perform q operations. Each operation can be one of the following two types: 1. `1 l r`: Print the sum of the elements in the sub-array from index l to r (both inclusive). 2. `2 x y`: Replace the element at index x with y. The array is indexed from 1. Please write a program that processes these operations efficiently. Input The first input line contains two integers n and q (1 ≤ n, q ≤ 100000), the number of elements in the array and the number of operations respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the initial elements of the array. The next q lines contain operations in one of the two formats described above. Output For each operation of type 1, output the sum of the elements in the sub-array from index l to r. Examples Input 5 4 1 2 3 4 5 1 1 3 2 3 6 1 1 3 1 2 5 Output 6 9 17 Explanation Initially, the array is [1, 2, 3, 4, 5]. - The first operation calculates the sum from index 1 to 3, which is 1+2+3 = 6. - The second operation updates the element at index 3 to 6. The array becomes [1, 2, 6, 4, 5]. - The third operation calculates the sum from index 1 to 3 in the updated array, which is 1+2+6 = 9. - The fourth operation calculates the sum from index 2 to 5, which is 2+6+4+5 = 17.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, idx, delta): while idx <= self.size: self.tree[idx] += delta idx += idx & -idx def prefix_sum(self, idx): sum = 0 while idx > 0: sum += self.tree[idx] idx -= idx & -idx return sum def range_sum(self, l, r): return self.prefix_sum(r) - self.prefix_sum(l - 1) def process_operations(n, q, arr, operations): fenwick_tree = FenwickTree(n) for i in range(n): fenwick_tree.update(i + 1, arr[i]) results = [] for operation in operations: if operation[0] == 1: l = operation[1] r = operation[2] results.append(fenwick_tree.range_sum(l, r)) elif operation[0] == 2: idx = operation[1] new_value = operation[2] current_value = arr[idx - 1] delta = new_value - current_value arr[idx - 1] = new_value fenwick_tree.update(idx, delta) return results"},{"question":"You are given a grid consisting of \'0\'s (water) and \'1\'s (land). An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Your task is to find the size of the largest island in the given grid. The size of an island is the number of connected \'1\'s forming the island. Write a function `largest_island(grid)` that takes a list of list of integers representing the grid as input and returns the size of the largest island. # Input - A list of list of integers `grid` where `0 <= len(grid), len(grid[0]) <= 1000` and each element in `grid` is either \'0\' or \'1\'. # Output - An integer representing the size of the largest island. # Examples Example 1: Input: ``` grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] ``` Output: ``` 4 ``` Explanation: The grid contains three islands. The first island is formed by 4 connected 1\'s at the top left corner. The second island is formed by a single \'1\' in the middle, and the third island is formed by 2 connected 1\'s at the bottom right corner. The size of the largest island is 4. Example 2: Input: ``` grid = [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] ``` Output: ``` 1 ``` Explanation: The grid contains 3 islands, each formed by a single \'1\'. Hence, the size of the largest island is 1. Example 3: Input: ``` grid = [ [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ] ``` Output: ``` 0 ``` Explanation: There are no islands in the grid. # Constraints - The grid can contain up to 1000 x 1000 elements. - Each element in the grid is either \'0\' or \'1\'.","solution":"def largest_island(grid): if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] max_island_size = 0 def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == 0 or visited[r][c]: return 0 visited[r][c] = True size = 1 # current cell size += dfs(r + 1, c) size += dfs(r - 1, c) size += dfs(r, c + 1) size += dfs(r, c - 1) return size for r in range(rows): for c in range(cols): if grid[r][c] == 1 and not visited[r][c]: current_island_size = dfs(r, c) max_island_size = max(max_island_size, current_island_size) return max_island_size"},{"question":"In a fictional kingdom, there are various castles connected by a network of roads. The king wants to travel from the royal castle to another castle to visit his knights. However, the kingdom has been plagued by monsters, and some of the roads are now dangerous. The king wishes to find the safest route, i.e., a route with the minimum number of dangerous roads, from the royal castle to the target castle. You are given the map of the kingdom as a graph, where castles are represented as nodes, roads as edges, and dangerous roads are marked. Your task is to write a program to determine the minimum number of dangerous roads the king needs to travel through to reach the target castle from the royal castle. Input The input consists of multiple datasets. Each dataset starts with two integers, n and m, where n represents the number of castles (2 ≤ n ≤ 100) and m represents the number of roads (0 ≤ m ≤ 5000). The next line contains two integers, u and v, the royal castle and the target castle, respectively (1 ≤ u, v ≤ n). The next m lines each contain three integers, x, y, and d, representing a road between castles x and y, where d is 0 if the road is safe and 1 if the road is dangerous. The input ends with a line containing two zeros. Output For each dataset, output a line containing a single integer that gives the minimum number of dangerous roads the king needs to travel through to reach the target castle. If it is impossible to reach the target, output -1. Example Input 5 6 1 5 1 2 1 2 3 0 3 4 1 4 5 0 1 4 1 2 5 1 5 4 1 4 1 2 0 2 3 0 3 4 1 0 0 0 Output 1 1","solution":"import heapq def find_safest_route(n, m, u, v, roads): graph = {i: [] for i in range(1, n + 1)} for x, y, d in roads: graph[x].append((y, d)) graph[y].append((x, d)) # Dijkstra\'s algorithm to find the minimum dangerous roads heap = [(0, u)] visited = {i: float(\'inf\') for i in range(1, n + 1)} visited[u] = 0 while heap: dangerous_roads, current_castle = heapq.heappop(heap) if current_castle == v: return dangerous_roads for neighbor, danger in graph[current_castle]: new_dangerous_roads = dangerous_roads + danger if new_dangerous_roads < visited[neighbor]: visited[neighbor] = new_dangerous_roads heapq.heappush(heap, (new_dangerous_roads, neighbor)) return -1 # Function to handle multiple datasets def handle_input(data): results = [] i = 0 while i < len(data): n, m = data[i] if n == 0 and m == 0: break u, v = data[i + 1] roads = data[i + 2:i + 2 + m] result = find_safest_route(n, m, u, v, roads) results.append(result) i += 2 + m return results"},{"question":"Anna is planning a grand party and has invited several guests. Each guest has dietary preferences or restrictions, and Anna wants to ensure that no guest is served food they cannot eat. Anna has prepared a list of dishes she wants to serve at the party. Each dish has a set of ingredients and each ingredient may be liked or disliked by specific guests. Anna needs your help to determine for each guest, which dishes they can eat without violating their dietary restrictions. Write a program to help Anna manage her party preparations. Input The first line of the input contains two integers n (1 ≤ n ≤ 10^5) — the number of guests, and m (1 ≤ m ≤ 10^5) — the number of dishes. The next n lines contain the dietary information for each guest: - Each line starts with an integer ki (1 ≤ ki ≤ 100) — the number of ingredients that guest i dislikes. - Followed by ki space-separated integers representing the ingredient numbers that guest i dislikes (1 ≤ ingredient number ≤ 1000). The next m lines each contain an integer li (1 ≤ li ≤ 100) — the number of ingredients in the i-th dish: - Followed by li space-separated integers representing the ingredient numbers in that dish. Output For each guest, output a line containing m integers, where the j-th integer is 1 if the guest can eat the j-th dish, and 0 otherwise. Examples Input 3 4 2 1 2 1 3 3 1 4 5 2 1 2 3 6 3 1 2 3 1 7 Output 0 1 1 1 0 1 1 1 1 1 0 1","solution":"def party_preparation(n, m, guest_dietaries, dishes): # Initialize the result list result = [] # Iterate over each guest for dislikes in guest_dietaries: guest_result = [] # Iterate over each dish for dish in dishes: # If there are no common elements between dislikes and the dish, the guest can eat it if set(dislikes).isdisjoint(dish): guest_result.append(1) # Can eat else: guest_result.append(0) # Cannot eat result.append(guest_result) return result"},{"question":"Problem statement You are given a list of integers and a target sum. Your task is to determine if there are any three distinct integers in the list that add up to the target sum. If such a combination exists, return a boolean value `true`; otherwise, return `false`. Constraints * The length of the list is between 3 and 10,000. * Each integer in the list is between -10^6 and 10^6. * The target sum is an integer between -3 times 10^6 and 3 times 10^6. Input The input follows this format: n a_1 a_2 a_3 ... a_n target Where n is the number of integers in the list, followed by the list of integers a_1, a_2, ..., a_n, and finally the target sum. Output Print `true` if there exist three distinct integers in the list that add up to the target sum, otherwise print `false`. Example Input 6 1 2 3 4 5 6 9 Output true Explanation In this example, the integers 2, 3, and 4 add up to 9.","solution":"def three_sum(nums, target): Determines if there are three distinct integers in the list nums that add up to the target sum. Parameters: nums (list of int): The list of integers. target (int): The target sum. Returns: bool: True if there are three distinct integers that add up to the target sum, False otherwise. # Sort the list to use two-pointer technique nums.sort() # Iterate through each number as a potential first element for i in range(len(nums) - 2): # Use two-pointer technique for the remaining part of the list left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"To enhance his knowledge in problem-solving, Chef has been solving interesting problems related to strings recently. One day he encountered a problem where he has to find the longest substring of a given string that contains at most two distinct characters. Chef finds this problem intriguing and wants you to solve it. You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the longest substring that contains at most two distinct characters. For example, if the input string is \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Formally, given a string `s`, find the length of the longest substring such that the substring contains at most two distinct characters. Input The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. Each test case consists of one line containing the string `s`. Output For each test case, output a single integer in a line corresponding to the length of the longest substring containing at most two distinct characters. Constraints * 1 ≤ T ≤ 10^4 * 1 ≤ |s| ≤ 10^5 The sum of lengths of all strings in one test case will not exceed 10^5. Example Input: 3 eceba ccc abaccc Output: 3 3 4","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring with at most 2 distinct characters. if len(s) < 2: return len(s) left, right = 0, 0 char_count = {} max_length = 0 while right < len(s): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length def solve_test_cases(test_cases_list): results = [] for s in test_cases_list: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"In a country with N cities and M bidirectional roads connecting them, each road has a length of exactly 1. Two cities, A and B, are special cities where political events are held. People from other cities can reach A and B if they can travel along the roads. Each city has a particular number of residents C_i. You have to assign one of either city A or city B to be the capital, minimizing the maximum distance any individual resident in the country has to travel to reach the capital. If there are multiple possible assignments resulting in the same minimum maximum distance, choose the one that appears lexicographically earlier. Formally, determine whether assigning city A or city B as the capital results in minimizing the maximum travel distance for any individual resident. If both assignments result in the same maximum travel distance, assign the smaller city (based on the city number). Constraints * 2 ≤ N ≤ 100,000 * 1 ≤ M ≤ 200,000 * 1 ≤ A, B ≤ N, A ≠ B * 1 ≤ C_i ≤ 1000 (for each 1 ≤ i ≤ N) Input Input is given from Standard Input in the following format: N M A B C_1 C_2 ... C_N U_1 V_1 U_2 V_2 : U_M V_M Output Output a single line with the number of the city (either A or B) that should be the capital. Examples Input 5 4 1 2 10 20 15 5 0 1 3 3 4 4 5 2 4 Output 2 Input 4 3 3 4 5 5 5 5 1 2 2 3 3 4 Output 3","solution":"from collections import deque, defaultdict def determine_capital(N, M, A, B, residents, roads): def bfs(start): distances = [-1] * (N + 1) queue = deque([start]) distances[start] = 0 while queue: city = queue.popleft() for neighbor in graph[city]: if distances[neighbor] == -1: queue.append(neighbor) distances[neighbor] = distances[city] + 1 return distances # Build graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Get distances from city A and B distance_from_A = bfs(A) distance_from_B = bfs(B) # Calculate the maximum travel distance for each city being the capital max_distance_A = max(distance_from_A[i] * residents[i-1] for i in range(1, N + 1)) max_distance_B = max(distance_from_B[i] * residents[i-1] for i in range(1, N + 1)) # Determine the capital city if max_distance_A < max_distance_B: return A elif max_distance_A > max_distance_B: return B else: return min(A, B)"},{"question":"You\'ve been given a unique scheduling problem where you need to allocate time slots for classes in a week-long schedule. The university has a constraint: no two classes can be scheduled in consecutive time slots in a single day. Each day has 10 time slots, indexed from 0 to 9. You will be given the number of classes that need to be scheduled each day, as a list of positive integers. Your task is to determine if it\'s possible to schedule all the classes without violating the consecutive time slots constraint. Input The input contains a single integer n (1 ≤ n ≤ 7), the number of days in the week. The second line contains n integers representing the number of classes to be scheduled each day. Output Output \\"YES\\" if it is possible to schedule all the classes without any two classes in consecutive time slots on the same day. Otherwise, output \\"NO\\". Examples Input 3 5 4 3 Output YES Input 2 4 6 Output NO Input 4 2 2 1 0 Output YES","solution":"def can_schedule_classes(n, class_counts): Determines if classes can be scheduled without consecutive time slots. Parameters: n (int): Number of days. class_counts (list): List of integers representing the number of classes per day. Returns: str: \\"YES\\" if scheduling without consecutive slots is possible, otherwise \\"NO\\". for classes in class_counts: if classes > 5: # maximum non-consecutive slots in a day is 5 (slots 0, 2, 4, 6, 8) return \\"NO\\" return \\"YES\\""},{"question":"Create a function that generates a Pascal\'s Triangle up to a given number of rows. Pascal\'s Triangle is a triangular array where the entry at the `n`-th row and `k`-th column is defined as `C(n, k)`, the binomial coefficient. The `n`-th row of Pascal\'s Triangle contains the coefficients of the binomial expansion of `(x + y)^(n-1)`. For example, the first few rows of Pascal\'s Triangle are: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` Your task is to write a function that returns Pascal\'s Triangle with a given number of rows. Function signature: ```python def generate_pascals_triangle(num_rows: int) -> List[List[int]]: ``` # Input - `num_rows`: An integer, the number of rows for Pascal\'s Triangle to generate. (1 ≤ num_rows ≤ 50) # Output - A list of lists, where each list represents a row of Pascal\'s Triangle. # Example ```python generate_pascals_triangle(5) ``` Expected Output ```python [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` # Constraints: 1 ≤ num_rows ≤ 50","solution":"from typing import List def generate_pascals_triangle(num_rows: int) -> List[List[int]]: Generates Pascal\'s Triangle up to the given number of rows. Parameters: num_rows (int): number of rows of Pascal\'s Triangle to generate. Returns: List[List[int]]: Pascal\'s Triangle with the specified number of rows. if num_rows <= 0: return [] triangle = [[1]] for row_num in range(1, num_rows): row = [1] for j in range(1, row_num): row.append(triangle[row_num-1][j-1] + triangle[row_num-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"An online store is offering a limited-time discount on certain items. Customers can buy a set of items and get a certain percentage off the total purchase if the total original price exceeds a specific threshold. The store wants to calculate the final price for customers after applying the discount. Your task is to write a program that performs these calculations. The program should take as input a list of items and their prices, the discount percentage, and the threshold price for the discount to be applied. If the total original price of the items is greater than or equal to the threshold, the discount is applied to the total; otherwise, no discount is applied. Input The input consists of multiple lines: 1. The first line contains an integer n (1 <= n <= 100), the number of items. 2. The next n lines each contain a string (the name of the item, which does not contain spaces) and a float (the price of the item, which is non-negative and at most 10000.00). 3. The next line contains an integer d (0 <= d <= 100), the discount percentage. 4. The last line contains a float t (0 <= t <= 100000.00), the threshold price for the discount. Output Print the total price after applying the discount, rounded to two decimal places. Sample Input 3 Laptop 999.99 Mouse 49.50 Keyboard 79.99 10 1000.00 Sample Output 1034.68 Explanation - The original total price of the three items is 999.99 + 49.50 + 79.99 = 1129.48. - Since 1129.48 is greater than the threshold of 1000.00, a 10% discount is applied. - The discounted total is 1129.48 * (1 - 0.10) = 1016.532, which, when rounded to two decimal places, is 1034.68.","solution":"def calculate_final_price(n, items, discount_percentage, threshold): Returns the final price after applying discount if applicable. :param n: Number of items :param items: List of tuples, each containing item name and its price :param discount_percentage: The discount percentage to be applied :param threshold: The threshold total price to apply the discount :return: The final price rounded to two decimal places # Calculate the total original price total_price = sum(price for item, price in items) # Apply discount if the total price exceeds the threshold if total_price >= threshold: final_price = total_price * (1 - discount_percentage / 100) else: final_price = total_price # Return the final price rounded to two decimal places return round(final_price, 2)"},{"question":"You are given an array of integers representing the heights of consecutive skyscrapers in a line. A beautiful view is defined as a sequence of consecutive observations where each observation is from a higher viewpoint than the previous one. You need to determine the length of the longest beautiful view. A beautiful view can start at any skyscraper, but once started, each subsequent skyscraper must be taller than the previous one to continue the view. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of skyscrapers. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 100) — the heights of the skyscrapers in their order. Output Print the single integer — the length of the longest beautiful view. If there\'s no such sequence, print 0. Examples Input 5 2 2 2 2 2 Output 0 Input 6 3 1 2 3 1 5 Output 3 Input 4 1 2 3 4 Output 4 Note In the first example, since all heights are equal, there is no beautiful view possible. In the second example, the longest beautiful view is formed by the sequence (1, 2, 3) starting from the second height and ending at the fourth height. In the third example, all skyscrapers are in increasing order, so the entire sequence forms the longest beautiful view with a length of 4.","solution":"def longest_beautiful_view(n, heights): if n <= 0: return 0 max_view = 0 current_view = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_view += 1 if current_view > max_view: max_view = current_view else: current_view = 1 return max_view if max_view > 1 else 0"},{"question":"Peter is training for a marathon and keeps track of his runs. He wants to know the total distance he has run over a given period. Write a program that takes the number of days Peter ran and the distance he ran each day, then calculates and outputs the total distance run. Constraints * 1 ≤ number_of_days ≤ 100 * 1 ≤ distance_run_each_day ≤ 100 Input The input is given from Standard Input in the following format: ``` number_of_days distance_run_each_day_1 distance_run_each_day_2 ... distance_run_each_day_n ``` Output Print the total distance run over the given period. Examples Input ``` 5 3 4 2 6 5 ``` Output ``` 20 ``` Input ``` 3 10 15 20 ``` Output ``` 45 ```","solution":"def total_distance_run(number_of_days, distances): Calculates the total distance run over the given period. Parameters: number_of_days (int): The number of days Peter ran. distances (list): A list of integers representing the distance run each day. Returns: int: The total distance run. return sum(distances) if __name__ == \\"__main__\\": number_of_days = int(input().strip()) distances = list(map(int, input().strip().split())) print(total_distance_run(number_of_days, distances))"},{"question":"You are given n predecessor-successor pairs defining a tree structure, where each node (executive) has a list of n ordered items. Each item is marked with a priority level. The root node represents the CEO, and each other node has exact one predecessor. Nodes have subordinates, and the tree structure represents the company hierarchy. Your task is to find the total priority value for each node in the company. The total priority of a node is calculated as the sum of the priority value of all the orders at that node plus the total priority value of all subordinates of that node. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 10^5) denoting the number of nodes. - The second line contains n integers p_1, p_2, …, p_n (0 ≤ p_i ≤ 100) where p_i denotes the priority level of the i-th item. - The third line contains n-1 pairs x_i, y_i (1 ≤ x_i, y_i ≤ n), representing that node y_i is a direct subordinate of node x_i. Nodes are 1-indexed and node 1 is always the root. Output For each test case, print a single line containing n integers. The i-th integer corresponds to the total priority of the i-th node. Example Input 2 3 10 20 30 1 2 1 3 5 5 10 15 20 25 1 2 1 3 2 4 2 5 Output 60 20 30 75 30 25 20 25 Explanation In the first example, the tree is: ``` 1 / 2 3 ``` Total priorities: - Node 1: 10 (itself) + 20 (Node 2) + 30 (Node 3) => 60 - Node 2: 20 (itself) => 20 - Node 3: 30 (itself) => 30 In the second example, the tree is: ``` 1 / 2 3 / 4 5 ``` Total priorities: - Node 1: 5 (itself) + 10 (Node 2) + 15 (Node 3) + 20 (Node 4) + 25 (Node 5) => 75 - Node 2: 10 (itself) + 20 (Node 4) + 25 (Node 5) => 55 - Node 3: 15 (itself) => 15 - Node 4: 20 (itself) => 20 - Node 5: 25 (itself) => 25","solution":"def calculate_total_priorities(t, test_cases): Function to calculate the total priority value for each node in a tree structure for multiple test cases. from collections import defaultdict results = [] for case in test_cases: n, priorities, edges = case tree = defaultdict(list) for x, y in edges: tree[x-1].append(y-1) total_priority = [0] * n def dfs(node): total_priority[node] = priorities[node] for child in tree[node]: total_priority[node] += dfs(child) return total_priority[node] dfs(0) results.append(total_priority) return results # Parsing input and calling the function would be handled outside of this main function in actual use cases"},{"question":"You are given a grid of characters consisting of \'O\' and \'X\'. Your task is to find the largest square subgrid completely filled with \'O\' characters and print its side length. Input: The first line contains two integers N and M denoting the number of rows and columns respectively. Each of the next N lines contains M characters (\'O\' or \'X\') representing the grid. Output: Print a single integer, the side length of the largest square subgrid containing only \'O\' characters. Constraints: 1 ≤ N, M ≤ 500 SAMPLE INPUT 5 5 OOOOX OOOXO OOXOO OXOOO XOOOO SAMPLE OUTPUT 3 Explanation: The largest square subgrid filled with \'O\' is 3x3.","solution":"def largest_square_zeros(grid): Returns the largest square subgrid size filled with \'O\' characters. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if grid[i][j] == \'O\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Garden Watering System You are tasked with designing an efficient watering system for a rectangular garden represented as an N times M grid where each cell in the grid contains a certain number of plants. You want to water all the plants in the garden, but you also aim to minimize the amount of water used. The watering system behaves as follows: - You can water a sub-rectangle of any size within the garden grid. - The amount of water required to water a sub-rectangle is equal to the number of plants in that sub-rectangle. To optimize the watering system, you need to calculate the amount of water needed to water the garden for different requests. Each request specifies a sub-rectangle within the garden that needs to be watered. Input - The first line contains two integers N and M (1 ≤ N, M ≤ 500), representing the number of rows and columns in the garden grid, respectively. - The next N lines each contain M integers where the j-th integer in the i-th line represents the number of plants in the cell (i, j) (0 ≤ number of plants ≤ 100). - The next line contains an integer Q (1 ≤ Q ≤ 10000), the number of requests. - Each of the next Q lines contains four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ N, 1 ≤ c1 ≤ c2 ≤ M), representing the top-left and bottom-right coordinates of the sub-rectangle to be watered. Output For each request, output a single line with the amount of water required to water the specified sub-rectangle. Sample Input ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 1 1 2 2 2 2 3 3 1 1 4 4 ``` Sample Output ``` 14 34 136 ``` Explanation In the sample input: - The first request specifies the sub-rectangle from (1,1) to (2,2). The cells within this sub-rectangle contain: ``` 1 2 5 6 ``` The sum of these cells is 1 + 2 + 5 + 6 = 14. - The second request specifies the sub-rectangle from (2,2) to (3,3). The cells within this sub-rectangle contain: ``` 6 7 10 11 ``` The sum of these cells is 6 + 7 + 10 + 11 = 34. - The third request specifies the entire grid: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` The sum of all cells is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 136.","solution":"def preprocess_garden(garden): N = len(garden) M = len(garden[0]) prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (garden[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def water_amount(prefix_sum, r1, c1, r2, c2): return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) def garden_watering(N, M, garden, requests): prefix_sum = preprocess_garden(garden) results = [] for r1, c1, r2, c2 in requests: results.append(water_amount(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"You are developing an online booking system for a new hotel that specializes in conference hosting. The hotel offers multiple rooms with various capacities and amenities. Clients can book rooms for conferences lasting several days, but all bookings follow the same structure to simplify management. To facilitate the bookings, your system must manage and process room availability on a daily basis. Specifically, you need to determine if a room is available for the entire requested period and return a confirmation or rejection message. Each room\'s availability is recorded for each day in the format of a list of boolean values, where `True` indicates the room is available, and `False` indicates it is booked. Your task is to write a function that takes the room\'s availability and the requested booking period as input and returns whether the room can be booked for the entire duration in the format described. Input - A list of boolean values representing the room\'s availability. - Two integers representing the start and end dates of the booking request (inclusive), with day 1 indexed as position 0 in the list. Output - A string \\"Accepted\\" if the room is available for the requested period, or \\"Rejected\\" if any of the days in the requested period are unavailable. Function Signature ```python def is_room_available(availability: List[bool], start_day: int, end_day: int) -> str: ``` Example ```python # Room availability: [True, True, False, True, True, True, False] # Booking request from day 1 (index 0) to day 3 (index 2) print(is_room_available([True, True, False, True, True, True, False], 0, 2)) # Output: \\"Rejected\\" # Booking request from day 3 (index 2) to day 5 (index 4) print(is_room_available([True, True, False, True, True, True, False], 2, 4)) # Output: \\"Rejected\\" # Booking request from day 4 (index 3) to day 6 (index 5) print(is_room_available([True, True, False, True, True, True, False], 3, 5)) # Output: \\"Accepted\\" ```","solution":"from typing import List def is_room_available(availability: List[bool], start_day: int, end_day: int) -> str: Checks if the room is available for the entire requested period. :param availability: List of boolean values representing the room\'s availability. :param start_day: Integer representing the starting day of the booking request (inclusive). :param end_day: Integer representing the ending day of the booking request (inclusive). :return: \\"Accepted\\" if the room is available for the requested period, otherwise \\"Rejected\\". for day in range(start_day, end_day + 1): if not availability[day]: return \\"Rejected\\" return \\"Accepted\\""},{"question":"You are given a string representing a sequence of instructions for a robot to move in a 2D grid. Each character in the string corresponds to a movement instruction: \'L\' for left, \'R\' for right, \'U\' for up, and \'D\' for down. Initially, the robot stands at the origin (0, 0) with a net displacement of (0, 0). Your task is to determine if the robot, after executing all the movements in the string, returns to the origin or not. Input The input consists of a single line containing a string of uppercase Latin letters L, R, U, and D. The length of the string is between 1 and 100 inclusive. Output Output \\"YES\\" if the robot returns to the origin after completing its movements, otherwise output \\"NO\\". Examples Input LRUD Output YES Input LL Output NO Input UUDDRRLL Output YES","solution":"def robot_return_to_origin(movements): Determines if the robot returns to the origin after executing the movements. Parameters: - movements (str): A string of characters \'L\', \'R\', \'U\', \'D\'. Returns: - str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 for move in movements: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Sonia is developing a chatbot for customer support. The chatbot handles queries by customers regarding their delivery status. Customers can ask two types of queries: - \\"track order\\" to know the delivery status of their package. - \\"update status\\" followed by the status description to update the delivery status. The chatbot should process these queries sequentially and maintain the delivery status information for each customer. Initially, the status of each order is \\"Pending\\". Your task is to implement a function to process a series of queries and return the updated statuses of the orders. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of queries. The following `n` lines each contain a query. Queries can be either: 1. \\"track order customer_name\\" 2. \\"update status customer_name new_status\\" The customer_name and new_status are strings consisting of lowercase English letters only and have lengths between 1 and 100. Output For each \\"track order\\" query, output the current status of the order for the specified customer in a new line. There should be no output for \\"update status\\" queries. Examples Input 5 track order alice update status alice Shipped track order alice update status bob Delivered track order bob Output Pending Shipped Delivered Input 6 track order alice update status alice Dispatched track order alice update status alice Delivered track order bob track order alice Output Pending Dispatched Pending Delivered","solution":"def process_queries(n, queries): Process a series of queries and return the updated statuses of the orders. Parameters: n (int): The number of queries. queries (list of str): The list of queries. Returns: list of str: The list of statuses for \\"track order\\" queries. customer_status = {} results = [] for query in queries: parts = query.split() if parts[0] == \\"track\\" and parts[1] == \\"order\\": customer_name = parts[2] if customer_name in customer_status: results.append(customer_status[customer_name]) else: results.append(\\"Pending\\") elif parts[0] == \\"update\\" and parts[1] == \\"status\\": customer_name = parts[2] new_status = parts[3] customer_status[customer_name] = new_status return results"},{"question":"Given an integer N and a sequence of N integers, find the longest subsequence with consecutive elements differing by exactly 1. Input There are multiple test cases (at most 10). The first line contains an integer T (the number of test cases). For each test case: The first line contains an integer N (1 ≤ N ≤ 100,000). The second line contains N integers separated by spaces. Output For each test case, output a single integer representing the length of the longest subsequence where the absolute difference between consecutive elements is exactly 1. Example Input: 2 5 10 9 4 5 4 6 1 2 3 2 1 5 Output: 3 5 Explanation Case #1: The longest subsequence is [10, 9, 10] or [4, 5, 4], both of length 3. Case #2: The longest subsequence is [1, 2, 3, 2, 1], of length 5.","solution":"def longest_consecutive_subsequence(N, sequence): if N == 1: return 1 max_length = 1 current_length = 1 for i in range(1, N): if abs(sequence[i] - sequence[i - 1]) == 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length def process_test_cases(test_cases): results = [] for N, sequence in test_cases: results.append(longest_consecutive_subsequence(N, sequence)) return results"},{"question":"A software company is developing a new system to manage student enrollments. One of the requirements is to generate unique student IDs based on a set of rules. You have been tasked with creating a function that takes a list of student names and generates these IDs. Here are the rules for generating a student ID: 1. The ID is a combination of the first two letters of the first name, the first two letters of the last name, and the last two digits of the year of birth. 2. If a student does not have a last name, use the first four letters of their first name. If the first name is less than four letters long in this case, append the necessary number of \'x\' characters to make up four letters. 3. The ID should be converted to uppercase. 4. If there are multiple students with the same ID, append a unique numeric suffix starting from 1 (e.g., XYAB99, XYAB99-1, XYAB99-2, etc.). Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. - The next n lines each contain the full name and year of birth of a student in the format: \\"Firstname Lastname YYYY\\". - The \\"Lastname\\" field might be missing for some students (they only have a first name). - \\"Firstname\\" and \\"Lastname\\" are both guaranteed to have at most 50 characters and only contain alphabetical characters. Output - Print n lines, each containing the unique student ID for a student, in the same order as the input. Examples Input 5 John Doe 1995 Jane Smith 2002 Eve 1998 Alice Wonderland 2000 John Doe 1995 Output JODO95 JASM02 EVEX98 ALWO00 JODO95-1 Note In the first example, \\"John Doe\\" and \\"John Doe 1995\\" appear twice, so the second occurrence gets a suffix \\"-1\\" to ensure uniqueness. The student \\"Eve 1998\\" has no last name, so the ID is generated using the first four letters of the first name, appended if necessary by \'x\' characters to make up four letters, and then combined with the last two digits of the year of birth.","solution":"def generate_student_ids(n, student_data): from collections import defaultdict def create_id(first_name, last_name, year): if last_name: id_base = (first_name[:2] + last_name[:2]).upper() + year[-2:] else: id_base = (first_name[:4].ljust(4, \'x\')).upper() + year[-2:] return id_base ids = [] id_counts = defaultdict(int) for student in student_data: parts = student.strip().split() year = parts[-1] if len(parts) == 2: first_name, last_name = parts[0], \\"\\" else: first_name, last_name = parts[0], parts[1] student_id = create_id(first_name, last_name, year) id_counts[student_id] += 1 if id_counts[student_id] > 1: student_id = f\\"{student_id}-{id_counts[student_id] - 1}\\" ids.append(student_id) return ids"},{"question":"You are given an array of integers where each element appears twice except for one element which appears only once. Find the element that appears only once in linear time complexity without using extra space. Input The first line contains an integer n (1 ≤ n ≤ 1000), where 2n is the number of elements in the array a minus 1 (i.e., the length of the array is 2n + 1). The second line contains 2n + 1 space-separated integers a_1, a_2, …, a_{2n+1} (1 ≤ a_i ≤ 10^6) — the elements of the array a. Output Print the element that appears only once in the array. Example Input 3 4 3 2 4 1 3 2 Output 1 Input 2 5 1 1 2 2 Output 5 Note In the first example, the element 1 is the only one that appears once, while 4, 3, and 2 each appear twice. In the second example, the element 5 is the only one that appears once, while 1 and 2 each appear twice.","solution":"def find_unique_element(arr): Given an array where every element appears twice except for one element which appears only once, this function finds and returns the element that appears only once. Args: arr : List[int] : list of integers where every element except one appears twice. Returns: int : element that appears only once. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"A reputable bakery wants to estimate daily production needs based on customer orders for a week. Each customer provides an order specifying the day of the week and the number of a particular type of baked good they want. Given the orders, you need to help the bakery determine the minimum number of each type of baked good they should prepare each day to satisfy all orders. You are provided with an integer n (number of orders), followed by n lines of orders. Each order consists of a string representing the day of the week (\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\") and an integer representing the quantity of a particular baked good. Your task is to output the minimum quantity the bakery should prepare for each day of the week. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of orders. The next n lines each contain a string and an integer, representing the day of the week and the quantity of the particular baked good ordered on that day (1 ≤ quantity ≤ 100). Output The output should consist of 7 lines, each containing a string representing the day of the week and an integer representing the minimum quantity of that particular baked good the bakery should prepare for that day. Example Input 5 Monday 15 Tuesday 10 Monday 20 Wednesday 25 Tuesday 5 Output Monday 20 Tuesday 10 Wednesday 25 Thursday 0 Friday 0 Saturday 0 Sunday 0 Note In the example, for Monday, the bakery should prepare 20 baked goods (as it is the largest order). For Tuesday, it needs to prepare 10 baked goods, and for Wednesday, it needs to prepare 25 baked goods. Since there are no orders for Thursday, Friday, Saturday, and Sunday, the bakery should prepare 0 baked goods on these days.","solution":"def estimate_bakery_needs(n, orders): days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] daily_needs = {day: 0 for day in days_of_week} for order in orders: day, quantity = order daily_needs[day] = max(daily_needs[day], quantity) return [(day, daily_needs[day]) for day in days_of_week] # Example usage: # orders = [ # (\\"Monday\\", 15), # (\\"Tuesday\\", 10), # (\\"Monday\\", 20), # (\\"Wednesday\\", 25), # (\\"Tuesday\\", 5) # ] # print(estimate_bakery_needs(5, orders)) # Output should be: # [(\'Monday\', 20), (\'Tuesday\', 10), (\'Wednesday\', 25), # (\'Thursday\', 0), (\'Friday\', 0), (\'Saturday\', 0), (\'Sunday\', 0)]"},{"question":"Given a list of integers, write a function to identify the first element in the list that appears more than once. If no such element exists, return -1. **Input:** 1. The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of test cases. 2. For each test case, the first line contains an integer `m` (1 ≤ m ≤ 10000), the number of integers in the list. 3. The second line for each test case contains `m` integers separated by a space. **Output:** For each test case, return the first repeated integer. If there are no repeated integers, return -1. **Sample Input:** 2 5 1 2 3 4 5 6 1 2 3 1 2 3 **Sample Output:** -1 1","solution":"def first_repeated_integer(test_cases): Identifies the first element that appears more than once in each list of integers provided in test cases. If no such element exists, returns -1. Args: test_cases (list of tuple): A list of tuples where each tuple represents (m, list of integers) Returns: list: A list of the first repeated integer for each test case, or -1 if no repetition occurs. results = [] for m, integers in test_cases: seen = set() first_repeated = -1 for num in integers: if num in seen: first_repeated = num break seen.add(num) results.append(first_repeated) return results"},{"question":"Given a string representing the first name of a person and another string representing the last name of the person, determine if the person has a middle name and extract it. A middle name is defined as any word that appears between the first and last names. A full name might include any number of middle names separated by spaces. Your task is to return the middle names as a single string separated by spaces. If there are no middle names, return \\"NONE\\". Input The first line of the input contains a string of lowercase and uppercase letters of the English alphabet which is the full name. The length of this string will be between 1 and 100, inclusive. The first and last names are always present and are separated by at least one space. Output Output a single string that includes all the middle names, separated by a single space. If there are no middle names, output \\"NONE\\". Examples Input John Doe Output NONE Input Linda Ann Smith Output Ann Input Michael Andrew Jerome Wilson Output Andrew Jerome","solution":"def extract_middle_names(full_name): Extract middle names from a full name string. If no middle names, return \'NONE\'. Args: full_name (str): A string representing the full name of a person. Returns: str: A single string of middle names separated by spaces or \'NONE\' if no middle names exist. names = full_name.split() if len(names) <= 2: return \\"NONE\\" else: return \\" \\".join(names[1:-1])"},{"question":"In a circular forest, a group of foxes live in harmony. The forest can be represented as a circle with a center at the origin (0, 0) and a given radius. Each fox has a specified home located at a point (x, y) within the bounds of the circle. A new food source will be introduced to the forest, and the foxes want to know if their homes are within a certain distance from this new food source. You need to write a program to decide which foxes can reach the food source within the given distance. Input: The input consists of multiple datasets. Each dataset starts with the radius of the circle (R), the coordinates of the food source (Fx, Fy), and the distance D within which the foxes can reach the food. The next line contains an integer N representing the number of foxes. Follow N lines, each containing two integers xi and yi representing the coordinates of the fox i\'s home. You may assume: - 0 < R <= 1000 - -R <= Fx, Fy <= R - 0 < D <= 100 - 0 < N <= 100 - -R <= xi, yi <= R Output: For each dataset, output N lines. For each fox, output \\"Yes\\" if the distance from the fox\'s home to the food source is less than or equal to D, or \\"No\\" otherwise. Example: Input: 2 500 0 0 50 3 100 0 150 0 200 0 6 100 50 50 20 3 80 30 100 70 130 100 Output: Yes Yes No Yes No No","solution":"import math def can_reach_food(R, Fx, Fy, D, N, foxes): Determines if each fox can reach the food source within the specified distance. Parameters: - R (int): Radius of the circular forest. - Fx, Fy (int): Coordinates of the food source. - D (int): Distance within which the foxes can reach the food. - N (int): Number of foxes. - foxes (list of tuples): List of tuples representing the coordinates of fox homes. Returns: - list of str: List with \\"Yes\\" or \\"No\\" for each fox. results = [] for x, y in foxes: distance = math.sqrt((Fx - x) ** 2 + (Fy - y) ** 2) if distance <= D: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Two friends, A and B, are exploring a magical forest where each tree has a distinct treasure at its root. A being a curious programmer decides to amuse B with a coding puzzle related to trees. A presents B with a binary tree and asks B to find out if there exists any pair of nodes in the tree whose sum equals a given integer x. B, not being as skilled in coding as A, seeks your help to solve this problem. Given a binary tree and an integer x, write a program to determine if the binary tree contains a pair of nodes such that their values add up to x. Input constraints: 0 ≤ Number of nodes in the tree ≤ 10^5 0 ≤ Value of each node ≤ 10^9 0 ≤ x ≤ 2 * 10^9 Input Format: - First line contains an integer \'t\' denoting the number of test cases. - For each test case: - First line contains integer n, the number of nodes in the tree. - Second line contains \'n\' space-separated integers denoting the values of the nodes in level order format. If a node does not have a left or right child, that position is denoted by -1. - Third line contains the integer x. Output Format: For each test case, print \\"Yes\\" if there exists such a pair, otherwise print \\"No\\". SAMPLE INPUT 1 5 5 3 7 2 -1 -1 8 10 SAMPLE OUTPUT Yes Explanation: The binary tree for the provided input is: 5 / 3 7 / 2 8 The pair (2, 8) sums up to 10 in the given tree. Thus, the output is \\"Yes\\".","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(values): if not values or values[0] == -1: return None root = TreeNode(values[0]) queue = [root] i = 1 while i < len(values): current = queue.pop(0) if i < len(values) and values[i] != -1: current.left = TreeNode(values[i]) queue.append(current.left) i += 1 if i < len(values) and values[i] != -1: current.right = TreeNode(values[i]) queue.append(current.right) i += 1 return root def find_pair_with_sum(root, x): if not root: return False seen = set() def dfs(node): if not node: return False if x - node.value in seen: return True seen.add(node.value) return dfs(node.left) or dfs(node.right) return dfs(root) def is_pair_present_in_tree(t, data, x): results = [] for i in range(t): n = data[i][0] values = data[i][1] target = x[i] root = build_tree(values) if find_pair_with_sum(root, target): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given a string representation of a large number, determine whether the number is a palindrome. A number is considered a palindrome if it reads the same backward as forward. Input The first line of the input contains t, the number of test cases. Each of the next t lines contains a string representing a large number. Output For each test case, output \\"YES\\" (without quotes) if the number is a palindrome, otherwise output \\"NO\\" (without quotes). Constraints 1 <= t <= 100 The length of the string does not exceed 1000 digits. Example Input: 2 12321 123456 Output: YES NO","solution":"def is_palindrome(s): Returns \'YES\' if the given string s is a palindrome, otherwise \'NO\'. return \'YES\' if s == s[::-1] else \'NO\' def process_test_cases(t, cases): Processes multiple test cases and returns a list of results for each case. Parameters: t (int): Number of test cases cases (list of str): List of string representations of large numbers. Returns: list of str: List containing \'YES\' or \'NO\' for each test case. results = [] for case in cases: results.append(is_palindrome(case)) return results"},{"question":"You are given an array of integers `A` where each element represents the height of a tower in a city skyline. A large crane is operating on this city skyline and can level or add height to any non-zero tower within a specified range in one operation. In one move, the crane can choose any number of consecutive towers where each tower\'s height `Hi` is less than or equal to a specified height `K`. For each of the selected towers, the crane can increase or decrease the tower height by 1 unit provided the resulting height of the tower remains non-zero. Your task is to determine the minimum number of moves required to make the tallest tower equal to the shortest tower in the chosen range of towers. # INPUT The first line of input contains a single integer `T` denoting the number of test cases. The first line of each test case contains two space-separated integers `N` and `K`, where `N` is the number of towers. The second line of each test case contains `N` space-separated integers representing the heights `Hi` of the towers. # OUTPUT For each test case, print the minimum number of moves required to make the highest tower equal to the lowest tower within the allowed height range. # CONSTRAINTS - `1 <= T <= 10^5` - `1 <= N <= 10^5` - `1 <= K <= 10^9` - `1 <= Hi <= 10^9` Note: The sum of `N` over all test cases will not exceed `10^6`. # SAMPLE INPUT ``` 2 5 3 5 3 8 1 9 6 4 4 7 2 4 6 3 ``` # SAMPLE OUTPUT ``` 7 11 ``` Explanation: Test 1: N = 5, K = 3 The crane can adjust the heights of towers such that all selected towers have a height of 3. Possible operations: - Tower 1: Decrease 2 units (5 -> 3) - Tower 2: No change (3 -> 3) - Tower 3: Decrease 5 units (8 -> 3) - Tower 4: Increase 2 units (1 -> 3) - Tower 5: Decrease 6 units (9 -> 3) Total moves = 2 + 0 + 5 + 2 + 6 = 15 Test 2: N = 6, K = 4 The crane can adjust the heights of towers such that all selected towers have a height of 4. Possible operations: - Tower 1: No change (4 -> 4) - Tower 2: Decrease 3 units (7 -> 4) - Tower 3: Increase 2 units (2 -> 4) - Tower 4: No change (4 -> 4) - Tower 5: Decrease 2 units (6 -> 4) - Tower 6: Increase 1 unit (3 -> 4) Total moves = 0 + 3 + 2 + 0 + 2 + 1 = 8","solution":"def minimum_moves_to_equalize_height(T, test_cases): results = [] for test_case in test_cases: N, K = test_case[0] heights = test_case[1] max_height = max(heights) min_height = min(heights) total_moves = 0 for height in heights: if height > K: total_moves += (height - K) elif height < K: total_moves += (K - height) results.append(total_moves) return results"},{"question":"You are given an array of n integers. You need to perform a series of operations to make all elements in the array equal. In each operation, you can select any three elements and increase exactly two of them by 1. Write a program to determine the minimum number of operations required to make all elements of the array equal. If it is not possible to make all elements equal, return -1. Input: The first line contains an integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output: Output a single integer - the minimum number of operations required to make all elements equal, or -1 if it is not possible. Examples: Input: 4 3 5 7 9 Output: 6 Input: 3 1 2 2 Output: -1 Explanation: In the first example, one possible sequence of operations to make all elements equal is: 1. Increase a[1], a[2] 2. Increase a[1], a[3] 3. Increase a[1], a[4] 4. Increase a[1], a[3] 5. Increase a[1], a[4] 6. Increase a[1], a[4] In the second example, it is impossible to make all elements equal using the given operations.","solution":"def min_operations_to_equalize(arr): n = len(arr) min_value = min(arr) # Calculate the number of operations required to reduce all elements to the minimum element def count_operations(x): ops = 0 for i in range(n): diff = arr[i] - x if diff % 2 != 0: return -1 ops += diff // 2 return ops result = count_operations(min_value) for i in range(1, 3): if min_value - i >= 0: temp_result = count_operations(min_value - i) if temp_result != -1: result = min(result, temp_result) return result"},{"question":"Write a program that simulates a simple inventory management system for a store. Each item in the inventory has a unique ID, name, and quantity in stock. The program should support the following operations: 1. Add a new item to the inventory. If the item already exists, update its quantity. 2. Remove an item from the inventory by its ID. 3. Retrieve information about an item by its ID. 4. Print the entire inventory in a sorted order based on item names. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of operations. Each of the following n lines describes an operation: - \\"ADD id name quantity\\" — add a new item or update the quantity of an existing item. - \\"REMOVE id\\" — remove an item by its ID. - \\"GET id\\" — retrieve the information about an item. - \\"PRINT\\" — print all items in the inventory sorted by their names. Each item ID is a unique integer (1 ≤ id ≤ 10000), name is a string (1 ≤ |name| ≤ 20), and quantity is an integer (1 ≤ quantity ≤ 100). Output For each \\"GET\\" operation, print the item’s information in the format \\"id name quantity\\" or \\"Item not found\\" if the item with the specified ID does not exist. For the \\"PRINT\\" operation, print all items sorted by their names in the format \\"id name quantity\\" on separate lines. Example Input 6 ADD 1 apple 10 ADD 2 banana 5 GET 1 REMOVE 1 GET 1 PRINT Output 1 apple 10 Item not found 2 banana 5 Input 7 ADD 3 cherries 15 ADD 4 mango 20 GET 4 ADD 4 mango 30 REMOVE 3 PRINT GET 3 Output 4 mango 30 4 mango 30 Item not found","solution":"class Inventory: def __init__(self): self.items = {} def add(self, id, name, quantity): self.items[id] = {\'name\': name, \'quantity\': quantity} def remove(self, id): if id in self.items: del self.items[id] def get(self, id): item = self.items.get(id) if item: return f\\"{id} {item[\'name\']} {item[\'quantity\']}\\" else: return \\"Item not found\\" def print_inventory(self): sorted_items = sorted(self.items.items(), key=lambda x: x[1][\'name\']) result = [f\\"{id} {item[\'name\']} {item[\'quantity\']}\\" for id, item in sorted_items] return \\"n\\".join(result)"},{"question":"In a distant galaxy, there is a peculiar alien species that communicates via a very unique number system. Each number they use is composed of digits 0 and 1, much like binary numbers. However, the aliens have a special rule: they consider the numbers to be beautiful if the number of \'1\'s in it is a prime number. Your task is to write a program that determines whether a given number in this binary-like numeral system is beautiful. Input The input consists of a single line containing a sequence of \'0\'s and \'1\'s, representing the number in the alien numeral system. Output Print \\"YES\\" if the number is beautiful, otherwise print \\"NO\\". Examples Input 101011 Output YES Input 100000 Output NO Input 11100 Output YES Note In the first example, the number \\"101011\\" has 4 \'1\'s. Since 4 is not a prime number, the number is not beautiful. In the second example, the number \\"100000\\" has 1 \'1\'. Since 1 is not a prime number, the number is not beautiful. In the third example, the number \\"11100\\" has 3 \'1\'s. Since 3 is a prime number, the number is beautiful.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_beautiful_number(binary_string): count_of_ones = binary_string.count(\'1\') if is_prime(count_of_ones): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function to find the longest contiguous subarray within an array of integers that has the largest sum. INPUT First line will contain an integer t, the number of test cases. Next t lines will contain an integer n, the number of elements in the array, followed by n integers representing the elements of the array. 0 < t ≤ 100 1 ≤ n ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 OUTPUT For each test case, output a single line with the sum of the longest contiguous subarray that has the largest sum. SAMPLE INPUT 2 5 -2 1 -3 4 -1 4 1 2 3 4 SAMPLE OUTPUT 4 10","solution":"def max_subarray_sum(n, array): Returns the sum of the longest contiguous subarray that has the largest sum. Uses Kadane\'s algorithm to find the maximum sum. max_current = max_global = array[0] for i in range(1, n): max_current = max(array[i], max_current + array[i]) if max_current > max_global: max_global = max_current return max_global def find_max_subarrays(test_cases): results = [] for n, array in test_cases: results.append(max_subarray_sum(n, array)) return results # Example usage (uncomment for testing): # t = 2 # test_cases = [ # (5, [-2, 1, -3, 4, -1]), # (4, [1, 2, 3, 4]) # ] # print(find_max_subarrays(test_cases)) # Outputs: [4, 10]"},{"question":"In a remote town, there is a unique problem with their water supply system. The water supply is managed using several pumps. Each pump operates in a specific time interval, starting from Ti and ending at Tj. During the time interval [Ti, Tj), a pump is actively delivering water. Due to certain constraints, multiple pumps might operate at overlapping times, increasing the water pressure during those periods. The town\'s engineers have to determine the maximum water pressure during any period of the day. For simplicity, assume each pump increases the water pressure by 1 unit. Your task is to compute the maximum water pressure at any given point in time based on the pump activation intervals. INPUT: The first line of the input contains an integer t, the number of test cases. For each test case, the first line contains an integer n, the number of pumps. Then, n lines follow, each containing two integers Ti and Tj (representing the start and end time when the pump operates). OUTPUT: For each test case, output a single integer, the maximum water pressure observed at any point in time. CONSTRAINTS: 1 ≤ t ≤ 10 1 ≤ n ≤ 10^4 1 ≤ Ti, Tj ≤ 10^9 Ti < Tj SAMPLE INPUT: 2 3 1 5 3 7 4 6 4 5 10 1 3 2 6 8 9 SAMPLE OUTPUT: 3 2 Explanation: In the first test case, the pumps operate as follows: 1. Pump 1 operates from time 1 to 4 2. Pump 2 operates from time 3 to 6 3. Pump 3 operates from time 4 to 5 The maximum water pressure is observed during the time interval [4, 5) with a water pressure of 3 units. In the second test case, the pumps operate as follows: 1. Pump 1 operates from time 5 to 9 2. Pump 2 operates from time 1 to 2 3. Pump 3 operates from time 2 to 5 4. Pump 4 operates from time 8 to 8 The maximum water pressure is observed during the time interval [8, 9) with a water pressure of 2 units.","solution":"def max_water_pressure(test_cases): results = [] for case in test_cases: intervals = case events = [] for start, end in intervals: events.append((start, 1)) events.append((end, -1)) events.sort() current_pressure = 0 max_pressure = 0 for time, change in events: current_pressure += change if current_pressure > max_pressure: max_pressure = current_pressure results.append(max_pressure) return results"},{"question":"In a magic forest, there are n enchanted trees arranged in a line. Each tree has a magic power value associated with it, represented by an integer. There are two types of magic creatures living in the forest: dragons and elves. Each dragon has the capacity to eat a certain segment of consecutive trees and obtain the combined magic power of those trees. On the other hand, each elf can only gain magic power by performing a special magic on a single tree per day. The forest warden wants to gather intelligence on which strategy yields the maximum magic power for a given segment of trees. The warden wants to compare the maximum possible magic power that can be obtained by either dragons or elves for any segment of trees between indices l and r (inclusive). Input The input consists of two lines. The first line contains two integers n and q (1 ≤ n, q ≤ 10^6), where n is the number of enchanted trees and q is the number of queries. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9), representing the magic power value of each tree. Output Print q lines, each containing the maximum magic power that can be obtained for the corresponding query. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) representing the indices of the segment of trees to consider. Example Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Explanation In the first query, the segment is [1, 2, 3]. The dragon can eat all three trees together, obtaining magic power of 1 + 2 + 3 = 6. In the second query, the segment is [2, 3, 4]. The dragon can eat all three trees together, obtaining magic power of 2 + 3 + 4 = 9. In the third query, the segment is [1, 2, 3, 4, 5]. The dragon can eat all five trees together, obtaining magic power of 1 + 2 + 3 + 4 + 5 = 15. Note The maximum magic power a dragon can obtain for a segment is simply the sum of the magic powers of the trees in that segment.","solution":"def maximum_magic_power(n, q, a, queries): prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + a[i - 1] results = [] for l, r in queries: max_power = prefix_sums[r] - prefix_sums[l - 1] results.append(max_power) return results"},{"question":"You are in charge of developing a new real-time strategy game where resources are gathered and utilized to build structures. In your game, there are n types of resources, each with a different collection rate. Players need to know how long it will take to gather a specific amount of resources in the most efficient way possible. Each resource type i is defined by the number of resources collected per second, r_i (0 ≤ r_i ≤ 10^6). There may be up to 10^5 different resource types. Players can focus their efforts on collecting just one type of resource at a time. Given the collection rates for resource types and multiple queries, where each query specifies an amount of a specific resource type that needs to be gathered, write a program to determine the minimum time required to collect the specified amounts of resources. Input The first line contains a single integer, n (1 ≤ n ≤ 10^5), representing the number of different resource types. The following n lines each contain a single integer r_i, representing the collection rate of the i-th resource type. The next line contains a single integer, q (1 ≤ q ≤ 10^5), representing the number of queries. The following q lines each contain two integers, t_i and k_i, (1 ≤ t_i ≤ n, 0 ≤ k_i ≤ 10^9), representing the type of resource and the required amount of that resource for the i-th query. Output For each query, output a single integer representing the minimum time required to collect k_i amount of t_i resource, in seconds. Example Input 3 5 10 15 4 1 50 2 30 3 45 1 0 Output 10 3 3 0","solution":"def minimum_time_to_gather(n, rates, queries): result = [] for t, k in queries: rate = rates[t - 1] if rate == 0: result.append(float(\'inf\') if k > 0 else 0) else: result.append((k + rate - 1) // rate) return result def parse_and_solve(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) rates = [int(input_lines[i + 1]) for i in range(n)] q = int(input_lines[n + 1]) queries = [tuple(map(int, input_lines[n + 2 + i].split())) for i in range(q)] return minimum_time_to_gather(n, rates, queries)"},{"question":"Taro loves playing with numbers and recently became fascinated with binary numbers. He decides to create a new binary game with the following rules: * You are given an integer `n` which represents the number of bits in the binary number. * You need to generate all possible binary numbers of length `n`. * For each binary number generated, you must count the number of \'1\'s in the number. * For each possible count of \'1\'s (from 0 to n), count how many binary numbers have exactly that many \'1\'s. Your task is to write a program that takes an integer `n` as input and outputs the count of binary numbers for each possible number of \'1\'s. Output the counts as a list where the i-th element in the list represents the count of binary numbers with exactly i \'1\'s. # Input: An integer `n` (1 ≤ n ≤ 20) representing the number of bits in the binary number. # Output: A list of integers where the i-th element in the list represents the count of binary numbers with exactly i \'1\'s. # Example: Input: 3 Output: [1, 3, 3, 1] Explanation: For n = 3, the binary numbers of length 3 are: * 000 (0 ones) * 001, 010, 100 (1 one) * 011, 101, 110 (2 ones) * 111 (3 ones) Thus, the output list is [1, 3, 3, 1].","solution":"def count_binary_ones(n): Output the counts of binary numbers of length n with exactly 0 to n \'1\'s. Arguments: n -- an integer representing the number of bits in the binary number Returns: A list where the i-th element in the list represents the count of binary numbers with exactly i \'1\'s. from itertools import combinations result = [0] * (n + 1) for ones_count in range(n + 1): result[ones_count] = len(list(combinations(range(n), ones_count))) return result"},{"question":"Ashok is participating in a coding competition. In one of the tasks, he\'s given a list of instructions to manipulate and query an array of integers. Each instruction is either to update an element in the array or to find the sum of a subarray. Your task is to help Ashok by implementing these instructions efficiently. The operations are defined as follows: - `1 x y`: Update the element at index `x` to `y`. - `2 l r`: Output the sum of the elements from index `l` to `r` inclusive. The index in the array starts from 1. Input The first line of input contains an integer `n`, which denotes the number of elements in the array. The second line contains `n` space-separated integers that form the array. The third line contains an integer `q`, denoting the number of instructions. The next `q` lines each contain an instruction in one of the two formats described above. Output For each `2 l r` instruction, output the sum of the elements from index `l` to `r` in a new line. Constraints 1 ≤ n ≤ 10^5 1 ≤ q ≤ 10^5 1 ≤ array elements, y ≤ 10^9 1 ≤ l, r, x ≤ n Example Input: 5 1 2 3 4 5 3 2 1 3 1 3 10 2 3 5 Output: 6 19 Explanation In the example, the array contains 5 elements. The first query asks for the sum of elements from index 1 to 3, which is `1 + 2 + 3 = 6`. The second operation updates the element at index 3 to `10`, so the array becomes `[1, 2, 10, 4, 5]`. The final query asks for the sum of elements from index 3 to 5, which is `10 + 4 + 5 = 19`.","solution":"class NumArray: def __init__(self, nums): Initialize the data structure with an array of integers. self.n = len(nums) self.nums = nums self.prefix_sum = [0] * (self.n + 1) for i in range(self.n): self.prefix_sum[i + 1] = self.prefix_sum[i] + nums[i] def update(self, index, val): Update the element at index to val. diff = val - self.nums[index] self.nums[index] = val for i in range(index + 1, self.n + 1): self.prefix_sum[i] += diff def sumRange(self, left, right): Return the sum of the subarray nums[left..right]. return self.prefix_sum[right + 1] - self.prefix_sum[left] def process_instructions(n, array, instructions): num_array = NumArray(array) results = [] for instruction in instructions: parts = instruction.split() op_code = int(parts[0]) if op_code == 1: index = int(parts[1]) - 1 value = int(parts[2]) num_array.update(index, value) elif op_code == 2: left = int(parts[1]) - 1 right = int(parts[2]) - 1 results.append(num_array.sumRange(left, right)) return results"},{"question":"You are given a grid of size NxM, where each cell can either be land or water. The grid is represented by a 2D list of characters, with \'L\' representing land and \'W\' representing water. An island is defined as a group of connected land cells (\'L\') horizontally or vertically (not diagonally). Write a well-optimized function to count the number of islands in the grid. Constraints * 1 ≤ N, M ≤ 100 * Each cell is either \'L\' or \'W\' Input N M grid The first line consists of the integers N and M. In the following N lines, each line contains a string of length M representing the grid. Output Print the number of islands in the grid. Examples Input 4 5 LLWLL LWWLL WWWLL LLWLW Output 3 Input 3 3 LLL LWW LLL Output 2","solution":"def count_islands(grid): Returns the number of islands in the grid. An island is defined as a group of connected \'L\' cells horizontally or vertically. def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'L\': return grid[x][y] = \'W\' # Mark as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) if not grid: return 0 n, m = len(grid), len(grid[0]) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': island_count += 1 dfs(i, j) return island_count # Example usage: # grid = [ # [\'L\', \'L\', \'W\', \'L\', \'L\'], # [\'L\', \'W\', \'W\', \'L\', \'L\'], # [\'W\', \'W\', \'W\', \'L\', \'L\'], # [\'L\', \'L\', \'W\', \'L\', \'W\'] # ] # print(count_islands(grid)) # Output: 3"},{"question":"Lina is decorating a rectangular board for a party. The board has a width of W and a height of H. She has many small square tiles, each with a side length of s. Lina wants to cover the entire board with these tiles, but she can only place the tiles without overlapping and without cutting them. Determine if it’s possible for Lina to cover the board completely with the given tiles. Input The input consists of a single line with three integers W, H, and s (1 ≤ W, H ≤ 1000, 1 ≤ s ≤ min(W, H)) — the width and height of the board, and the side length of the square tiles. Output Print \\"POSSIBLE\\" (without the quotes) if it is possible to cover the board completely using the tiles. If it is impossible, print \\"IMPOSSIBLE\\". Examples Input 6 4 2 Output POSSIBLE Input 5 5 3 Output IMPOSSIBLE Input 8 8 4 Output POSSIBLE Note For the first example, 12 tiles of size 2x2 fully cover a board of size 6x4 without any gaps or overlaps.","solution":"def can_cover_board(W, H, s): Determine if it is possible to cover the board completely with the given tiles. Parameters: W (int): Width of the board H (int): Height of the board s (int): Side length of the square tiles Returns: str: \\"POSSIBLE\\" if the board can be covered completely, otherwise \\"IMPOSSIBLE\\" # Check if both dimensions of the board are divisible by the side length of tiles if W % s == 0 and H % s == 0: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"Given an unsorted list of integers, write a function `find_unique(int_list)` that returns a new list containing only the unique elements from the original list in the order they first appeared. **Function Signature:** ```python def find_unique(int_list: List[int]) -> List[int]: ``` **Input:** - A list of integers, `int_list`, with `1 <= len(int_list) <= 10^4` and `-10^4 <= int_list[i] <= 10^4`. **Output:** - A list of integers containing only the unique elements from the input list in the same order as they first appeared. **Example:** ```python # Test Case 1 print(find_unique([4, 5, 6, 4, 2, 2, 6, 3])) # Output: [4, 5, 6, 2, 3] # Test Case 2 print(find_unique([1, 1, 1, 1])) # Output: [1] # Test Case 3 print(find_unique([3, 3, 3, 2, 4, 4, 5, 6])) # Output: [3, 2, 4, 5, 6] ``` **Note:** - Ensure your solution is optimized for both time and space complexity.","solution":"from typing import List def find_unique(int_list: List[int]) -> List[int]: Returns a list of unique elements from the original list in the order they first appeared. seen = set() unique_list = [] for num in int_list: if num not in seen: seen.add(num) unique_list.append(num) return unique_list"},{"question":"Alice has a string `s` consisting of lowercase English letters. She wants to make this string a palindrome by removing exactly one character. A palindrome is a string that reads the same backward as forward. Help Alice determine if it is possible to make the string a palindrome by removing exactly one character. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Constraints: * 1 ≤ |s| ≤ 10^5 * The string `s` contains only lowercase English letters. Input: Input is given from Standard Input in the following format: `s` Output: Print \\"YES\\" if it is possible to make the string a palindrome by removing exactly one character. Otherwise, print \\"NO\\". Example Input 1: ``` abcca ``` Example Output 1: ``` YES ``` Example Input 2: ``` abcd ``` Example Output 2: ``` NO ``` Example Input 3: ``` a ``` Example Output 3: ``` NO ```","solution":"def can_be_palindrome_by_removing_one_char(s): Returns \\"YES\\" if the string s can be made a palindrome by removing exactly one character, otherwise \\"NO\\". def is_palindrome(substring): return substring == substring[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1]): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"NO\\" if len(s) == 1 else \\"YES\\""},{"question":"Jamal has a playlist containing N songs, each represented by an integer which is the duration of the song in seconds. Jamal likes to listen to his playlist in a non-decreasing order of song durations when he goes for his evening run. Unfortunately, his playlist app shuffled the song durations, and now it\'s not sorted. Jamal doesn\'t want to spend too much time manually fixing the playlist order before his run. Can you help him by writing a program to sort the playlist durations in non-decreasing order? Input: The first line contains an integer N, denoting the number of songs in the playlist. The second line contains N space-separated integers, each representing the duration of a song. Output: Print the sorted playlist durations in non-decreasing order. Constraints: 1 ≤ N ≤ 10^5 1 ≤ song duration ≤ 10^6 SAMPLE INPUT 6 300 200 150 400 250 350 SAMPLE OUTPUT 150 200 250 300 350 400","solution":"def sort_playlist_durations(N, durations): Sorts the playlist durations in non-decreasing order. Parameters: N : int : number of songs in the playlist durations : list of int : list containing the durations of the songs Returns: list of int : sorted list of song durations return sorted(durations)"},{"question":"Polycarp loves sequences of integers. One day he came up with a new problem. He has a sequence `a` consisting of `n` integers. He wants to divide this sequence into several contiguous subsequences, such that the GCD (Greatest Common Divisor) of all numbers in each subsequence is equal to `1`. Polycarp needs your help to find the minimum number of subsequences he can divide `a` into, with the above condition. If it\'s impossible to divide the sequence to meet the condition, output `-1`. Input The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^6) — the elements of the sequence. Output For each test case, output the minimum number of subsequences needed to divide the sequence such that the GCD of each subsequence is equal to `1`. If it is impossible, output `-1`. Example Input 3 3 2 3 4 5 5 10 15 20 25 4 2 4 6 8 Output 1 5 -1","solution":"from math import gcd from functools import reduce def min_subsequences(test_cases): results = [] for case in test_cases: n, a = case overall_gcd = reduce(gcd, a) if overall_gcd == 1: results.append(1) else: results.append(-1) return results def parse_input(input_str): lines = input_str.split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) a = list(map(int, lines[index + 1].split())) test_cases.append((n, a)) index += 2 return test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"Sort and Merge Given an integer array `A` of size `N` and an integer value `K`, perform the following operations on the array: 1. Split the array into non-overlapping subarrays where each subarray contains exactly `K` elements. 2. Sort each subarray in non-decreasing order. 3. Merge the sorted subarrays back into a single sorted array. Your task is to output the final sorted array after performing the operations. # Constraints * (1 leq N leq 10^5) * (1 leq K leq N) * (1 leq A[i] leq 10^9) for each (i) # Input Format Input is given from standard input in the following format. ``` N K A_1 A_2 ... A_N ``` # Output Format Output the final sorted array after performing the operations. # Sample Input 1 ``` 10 2 3 1 2 6 8 4 5 7 9 0 ``` # Sample Output 1 ``` 0 1 2 3 4 5 6 7 8 9 ``` # Explanation for Sample 1 1. Split the array into subarrays of size `2`: `[3, 1]`, `[2, 6]`, `[8, 4]`, `[5, 7]`, `[9, 0]`. 2. Sort each subarray: `[1, 3]`, `[2, 6]`, `[4, 8]`, `[5, 7]`, `[0, 9]`. 3. Merge the sorted subarrays to get the final sorted array: `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`.","solution":"def sort_and_merge(N, K, A): Sorts and merges the array after splitting into subarrays of size K. Args: N : int - size of array A K : int - size of each subarray A : list of int - the array to be processed Returns: list of int - the final sorted array after operations result = [] for i in range(0, N, K): subarray = A[i:i+K] subarray.sort() result.extend(subarray) result.sort() return result"},{"question":"Peter loves solving mathematical puzzles and came up with a game to sharpen his skills. Here is how the game works: Peter is given a string s consisting of lowercase English letters. He needs to convert the string into a palindrome. A palindrome is a string that reads the same backward as forward. The challenge is to determine the minimum number of character replacements needed to achieve this. A character replacement involves changing any character in the string to another character. Help Peter with this problem. Input The input contains a single string s (1 ≤ |s| ≤ 1000) which consists of lowercase English letters. Output Output a single integer — the minimum number of character replacements required to convert the given string into a palindrome. Examples Input abca Output 1 Input abcde Output 2 Input racecar Output 0 Note In the first example, we can change either \'b\' or \'c\' to \'a\', resulting in \\"aaaa\\" or \\"abca\\", both of which are palindromes. In the second example, we can change \'b\' to \'c\' and \'d\' to \'e\' to get \\"aceca\\", or change \'a\' to \'e\' and \'d\' to \'c\' to get \\"ecbce\\", both requiring 2 replacements. In the third example, the string is already a palindrome, so no replacements are needed.","solution":"def min_replacements_to_palindrome(s): Returns the minimum number of character replacements needed to convert the given string into a palindrome. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"A secret agent needs to travel through a network of safe houses in different cities to deliver an important message. The network consists of `n` safe houses, where each pair of safe houses is connected by a two-way route that can be open or closed. The mission starts at the first safe house and the message needs to be delivered to the last safe house. When the agent travels from a safe house `x` to a safe house `y` using an open route, all routes connected to the safe house `x` will toggle their states — all open routes become closed and all closed routes become open. The agent needs to find the optimal path with the minimum number of route changes, or determine if delivering the message is impossible. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 3 x 10^5, 0 ≤ m ≤ 3 x 10^5) — the number of safe houses and the number of initially open routes, respectively. The next `m` lines describe the initially open routes. The `i`-th of these lines contains two integers `u_i` and `v_i` (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — the safe houses connected by the `i`-th open route. It is guaranteed that each pair of safe houses is represented by at most one route. Output If there is a path to deliver the message, print the minimum number of routes the agent should pass through. On the next line, print the sequence of safe houses the agent should visit in order, starting with the first safe house and ending with the last safe house. If there is no path, print a single integer -1. Examples Input 6 7 1 2 2 3 3 4 4 5 5 6 1 3 4 6 Output 3 1 2 3 6 Input 6 2 1 2 5 6 Output -1","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, routes): if n == 2 and m == 0: return -1 graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) dist = [-1] * (n + 1) visited = [False] * (n + 1) dist[1] = 0 visited[1] = True queue = deque([(1, [1])]) while queue: node, path = queue.popleft() if node == n: return dist[node], path for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[node] + 1 queue.append((neighbor, path + [neighbor])) return -1 # Function that formats the output according to problem requirements def deliver_message(n, m, initial_open_routes): result = find_shortest_path(n, m, initial_open_routes) if result == -1: return -1 else: distance, path = result return distance, path"},{"question":"Timmy is growing a garden and he wants to arrange his plants in rows. He has a certain number of identical plants, and he can place any number of plants in one row, but each row must have at least one plant. Timmy wonders how many different ways he can arrange all his plants in exactly K rows. Your task is to help Timmy by writing a program that computes the number of distinct ways to arrange N plants into K rows. The order of rows does matter, meaning that two arrangements are different if the positions of rows with the same number of plants differ. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers N and K, the number of plants and the number of rows respectively. Output: For each test case, output the number of distinct ways to arrange the N plants into K rows, modulo 1000000007. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K ≤ N Sample Input: 2 4 2 3 1 Sample Output: 7 1 Explanation: - For the first test case (N=4, K=2), the possible ways to arrange the plants are: - [3, 1], [2, 2], [1, 3], and the permutations of [3, 1] and [1, 3] which are [1, 3] and [3, 1]. - Other permutations are [2, 2], so a total of 7 ways. - For the second test case (N=3, K=1), there is only one way: [3].","solution":"def plant_arrangements(N, K): MOD = 1000000007 # Initialize the dp array dp = [[0 for _ in range(K + 1)] for _ in range(N + 1)] dp[0][0] = 1 # Fill the dp array using dynamic programming for n in range(1, N + 1): for k in range(1, K + 1): dp[n][k] = dp[n-1][k-1] # New row with 1 plant if n > k: dp[n][k] += dp[n-1][k] * k dp[n][k] %= MOD return dp[N][K] def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 results = [] for _ in range(T): N = int(data[index]) K = int(data[index + 1]) results.append(plant_arrangements(N, K)) index += 2 for result in results: print(result)"},{"question":"You are given a string that contains only lowercase alphabets. Your task is to transform this string into a new string where each character is replaced by the next character in the English alphabet. The letter \'z\' should wrap around to become \'a\'. Implement a function `next_alphabet_string(s: str) -> str` that takes a single string `s` as input and returns a new string as per the above transformation rule. # Input - A single line containing a string `s` (1 ≤ |s| ≤ 1000). The string consists only of lowercase English letters. # Output - A single line containing the transformed string. # Examples Example 1 **Input:** ``` abc ``` **Output:** ``` bcd ``` Example 2 **Input:** ``` xyz ``` **Output:** ``` yza ``` Example 3 **Input:** ``` hello ``` **Output:** ``` ifmmp ```","solution":"def next_alphabet_string(s: str) -> str: Transforms the input string such that each character is replaced by the next character in the English alphabet, with \'z\' wrapping around to \'a\'. result = [] for char in s: if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) return \'\'.join(result)"},{"question":"You are given a list of non-negative integers. Write a function that returns the largest sum obtainable by summing exactly two distinct elements from the list. If there\'s fewer than two elements in the input list, return -1. Example Input [3, 5, 1, 9, 2] Output 14 Input [7] Output -1 Input [4, 4, 4, 4] Output 8","solution":"def largest_sum_of_two_elements(lst): Returns the largest sum obtainable by summing exactly two distinct elements from the list. If there\'s fewer than two elements in the input list, return -1. if len(lst) < 2: return -1 # Sort the list in descending order sorted_lst = sorted(lst, reverse=True) # Return the sum of the first two elements return sorted_lst[0] + sorted_lst[1]"},{"question":"In a distant city, there are n parks, each with a certain number of trees. Different parks might have different numbers of trees. You are tasked to plant new trees in such a way that no two parks end up having the same number of trees. You want to add the minimum number of trees to achieve this goal. You are given the initial number of trees in each park, and you need to determine the minimum number of trees to be planted and the resulting number of trees in each park. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of parks. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the initial number of trees in each park. Output In the first line, output a single integer — the minimum number of trees to be planted. In the second line, output n integers indicating the number of trees in each park after planting. Examples Input 4 1 2 2 3 Output 2 1 2 4 3 Input 3 0 0 0 Output 3 0 1 2","solution":"def plant_trees(n, trees): Return the minimum number of trees to be planted and the resulting number of trees in each park. :param n: number of parks :param trees: list of initial number of trees in each park :return: tuple containing the minimum number of trees to be planted and the resulting list of trees trees = sorted(trees) min_trees_needed = 0 for i in range(1, n): if trees[i] <= trees[i - 1]: needed = trees[i - 1] - trees[i] + 1 trees[i] += needed min_trees_needed += needed return min_trees_needed, trees"},{"question":"A group of explorers is mapping an uncharted cave system. They are using a discrete model in the form of connected points. Each point is uniquely identified by integer coordinates in a 2D grid. The explorers need to establish a basecamp at a particular point. However, there are several constraints on where the basecamp can be set up due to the terrain and safety considerations. Define a valid point for basecamp setup as one that is equidistant from two given points (A and B) in the cave system. Your task is to help the explorers determine how many such valid points exist. Given two points A (x1, y1) and B (x2, y2), a valid point P (x, y) satisfies the following criterion: distance(P, A) = distance(P, B) where distance(P, A) is the Euclidean distance between points P and A. You need to compute the number of distinct integer-coordinate points that are equidistant from A and B. Input The input consists of a single line containing four integers x1, y1, x2, and y2 (-10^6 ≤ x1, y1, x2, y2 ≤ 10^6), which specify the coordinates of points A and B. Output Print a single integer denoting the number of distinct integer-coordinate points P that satisfy the given criterion. Examples Input 1 1 4 5 Output 0 Input -1 -1 1 1 Output 2 Input 2 3 5 6 Output 0 Input 0 0 0 2 Output 1","solution":"def count_valid_basecamp_points(x1, y1, x2, y2): if x1 == x2 and y1 == y2: return -1 # This case should not happen as both points are the same if (x2 - x1) % 2 == 0 and (y2 - y1) % 2 == 0: return 1 return 0"},{"question":"You are a member of a team developing an online multiplayer game. One part of this game involves players gathering resources on a square grid represented as an n x n matrix. Each cell contains an integer representing the number of resource units available at that location. One specific kind of resource is critical, and you must determine the maximum amount of this resource that can be collected by forming a contiguous submatrix of size k x k within the grid. Write a function that, given the matrix and the integer k, returns the maximum possible sum of the resources in any contiguous submatrix of size k x k. Function Signature: ```python def max_resource_submatrix(matrix: List[List[int]], k: int) -> int: ``` # Input 1. `matrix`: A list of lists of integers where each sublist represents a row in the n x n grid (1 ≤ n ≤ 500). 2. `k`: An integer (1 ≤ k ≤ n) representing the size of the submatrix. # Output - Return the maximum sum of the resources in any contiguous submatrix of size k x k. # Examples ```python # Example 1 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] k = 2 print(max_resource_submatrix(matrix, k)) # Output: 28 ``` Explanation: The 2x2 submatrix with the maximum sum is: ``` 5 6 8 9 ``` Which sums to 28. ```python # Example 2 matrix = [ [1, -1, 0], [-1, 1, -1], [1, 1, 1] ] k = 2 print(max_resource_submatrix(matrix, k)) # Output: 2 ``` Explanation: The 2x2 submatrix with the maximum sum is: ``` 1 -1 1 1 ``` Which sums to 2. Given the function signature and the above examples, design an efficient solution to this problem.","solution":"def max_resource_submatrix(matrix, k): Returns the maximum sum of a k x k submatrix in the given n x n matrix. :param matrix: List of lists of integers, where each sublist is a row in an n x n grid. :param k: Integer, the size of the submatrix. :return: Maximum sum of the resources in any contiguous submatrix of size k x k. n = len(matrix) # Precompute the prefix sum for the matrix prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = ( matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] ) max_sum = float(\'-inf\') # Use the prefix sums to compute the sum of each k x k submatrix for i in range(k, n + 1): for j in range(k, n + 1): sum_k_k = ( prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k] ) if sum_k_k > max_sum: max_sum = sum_k_k return max_sum"},{"question":"A company has a chain of stores, and for each store, they record the number of items sold each day. The company wishes to analyze the sales performance by calculating two statistics: the maximum number of items sold in any consecutive k days and the average number of items sold over any consecutive k days. Given the historical sales data of a store and a number k, write a program to calculate these two statistics. Input The first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 100,000). The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 1,000) — the number of items sold on each day. Output Print two integers: the maximum number of items sold in any consecutive k days and the average number of items sold in any consecutive k days as an integer (round down if necessary). Example Input 7 3 10 20 30 40 50 60 70 Output 150 45 Explanation The maximum number of items sold in any consecutive 3 days is 150 (from day 5 to day 7: 50 + 60 + 70). The average number of items sold over these 3 days is (150/3) = 50. The average number of items sold in any consecutive 3 days is 45 (e.g., days 2 to 4: 20 + 30 + 40 = 90 and 90/3 = 30). Rounded down, this value is 30.","solution":"def sales_statistics(n, k, sales): Returns the maximum number of items sold in any consecutive k days and the average number of items sold over any consecutive k days rounded down. max_sales = 0 sum_sales = sum(sales[:k]) max_sales = sum_sales for i in range(n-k): sum_sales = sum_sales - sales[i] + sales[i+k] if sum_sales > max_sales: max_sales = sum_sales avg_sales = max_sales // k return (max_sales, avg_sales)"},{"question":"Aman is a software engineer and he is fascinated by sand clocks. He decided to create a numerical version of a sand clock using strings. The unique feature of this sand clock is that at every increasing height from the bottom layer to the top layer, the values in the left half and right half are increasing, while the middle value remains fixed. The pattern for an n-layer sand clock is constructed in the following way: - For every layer i from 1 to n: - The central value (the fixed value) of the sand clock is i. - The values to the left of the central value decrease incrementally till 1. - The values to the right of the central value decrease incrementally till 1. For example, if `n = 3`, the sand clock of layer 3 should be: ``` 1 121 12321 121 1 ``` For example, if `n = 4`, the sand clock of layer 4 should be: ``` 1 121 12321 1234321 12321 121 1 ``` Your task is to generate such a sand clock pattern for a given input `n`. [Input] - A single integer `n` representing the number of layers in the sand clock. [Output] - The sand clock pattern as described, which covers 2*n - 1 rows. [Constraints] 1 ≤ n ≤ 1000 [Note]: It\'s guaranteed that the input will always be a valid integer within the given range. SAMPLE INPUT 3 SAMPLE OUTPUT 1 121 12321 121 1","solution":"def sand_clock(n): Generates a sand clock pattern with n layers. Parameters: n (int): number of layers in the sand clock. Returns: str: sand clock pattern. layers = [] for i in range(1, n + 1): layer = \' \' * (n - i) # Adding leading spaces for j in range(1, i + 1): layer += str(j) for j in range(i - 1, 0, -1): layer += str(j) layers.append(layer) for i in range(n - 1, 0, -1): # Reverse the upper part to form the lower part layers.append(layers[i-1]) return \'n\'.join(layers)"},{"question":"You are given a binary tree with N nodes, where each node has a value associated with it. You need to find the sum of all the values of nodes that are at the maximum depth of the tree. The input is given as an adjacency list, where each line contains two integers, representing an edge between two nodes and a value associated with that node (if duplicated, keep the latest value received). Input: The first line will contain an integer N denoting the number of nodes in the tree. The next N-1 lines will each contain two integers u and v denoting an edge between nodes u and v. The next N lines will each contain an integer v followed by an integer val, representing the value of node v. Output: Print a single integer, the sum of all the values of nodes that are at the maximum depth of the tree. Constraints: 1 ≤ N ≤ 10^5 1 ≤ u, v ≤ N 1 ≤ val ≤ 10^9 SAMPLE INPUT 5 1 2 1 3 3 4 3 5 1 10 2 20 3 30 4 40 5 50 SAMPLE OUTPUT 90","solution":"from collections import defaultdict, deque def sum_of_nodes_at_max_depth(n, edges, values): # Construct the tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Store the values for each node node_values = dict(values) # BFS to find maximum depth and sum at that depth visited = set() queue = deque([(1, 0)]) # Start BFS from node 1 with depth 0 max_depth = 0 sum_at_max_depth = 0 while queue: node, depth = queue.popleft() if depth > max_depth: max_depth = depth sum_at_max_depth = node_values[node] elif depth == max_depth: sum_at_max_depth += node_values[node] visited.add(node) for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) visited.add(neighbor) return sum_at_max_depth"},{"question":"You are tasked with developing an interactive smart home system that allows users to manage the lights in various rooms of their house. Each room can have multiple lights, and each light can either be on or off. The goal is to enable users to know the status of the lights in each room and switch any light on or off. In this task, you need to write a function that takes the current state of the lights and the commands to modify the lights, and then outputs the updated state of the lights for each room. The state of the lights and the commands will be represented as strings. **Input:** - The first line contains a single integer `N` (1 ≤ N ≤ 100): the number of rooms in the house. - The next `N` lines each contain a string representing the state of the lights in each room. Each character in the string is either \'1\' (light is on) or \'0\' (light is off). - The next line contains a single integer `M` (1 ≤ M ≤ 1000): the number of commands to process. - The following `M` lines each contain a command in one of the following formats: - `STATUS r`: Print the current state of the lights in room `r` (0-indexed). - `TOGGLE r l`: Switch the light `l` in room `r` (0-indexed) from on to off or vice versa. **Output:** - For each `STATUS` command, print the current state of the lights in room `r` as a string of \'1\'s and \'0\'s. **Example:** Input: ``` 3 101 000 111 4 STATUS 1 TOGGLE 0 2 STATUS 0 TOGGLE 2 0 ``` Output: ``` 000 100 ``` **Note:** - The first room has lights \\"101\\", the second room \\"000\\", and the third room \\"111\\". - The first command requests the status of the lights in the second room, so the output is \\"000\\". - The second command toggles the third light in the first room, changing it from \\"1\\" to \\"0\\", so the state of the lights in the first room becomes \\"100\\". - The third command requests the updated status of the first room, so the output is \\"100\\". - The fourth command toggles the first light in the third room from \\"1\\" to \\"0\\", but there is no STATUS command to print this change. This question assesses the ability to manipulate strings and process commands based on input, key skills in many programming tasks.","solution":"def manage_lights(n, room_states, m, commands): results = [] for command in commands: parts = command.split() if parts[0] == \\"STATUS\\": r = int(parts[1]) results.append(room_states[r]) elif parts[0] == \\"TOGGLE\\": r = int(parts[1]) l = int(parts[2]) # Toggle the light current_state = room_states[r] if current_state[l] == \'1\': new_state = current_state[:l] + \'0\' + current_state[l+1:] else: new_state = current_state[:l] + \'1\' + current_state[l+1:] room_states[r] = new_state return results"},{"question":"In the Kingdom of Alphabeta, the Knights are preparing for the annual tournament. Sir Knightro, the bravest knight in the land, has a very particular shield which opens secret passages when specific phrases are inscribed on it. This year, the inscription requires a phrase derived from a magic string transformation. You are given a string consisting of lowercase English letters. Sir Knightro wants to transform this string by permuting its characters in such a way that the newly formed string is lexicographically smallest. Write a program to help Sir Knightro determine this lexicographically smallest permutation of the given string. Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100), where |s| is the length of the string and s consists only of lowercase English letters. Output Output the lexicographically smallest permutation of the string. Examples Input baedc Output abcde Input geeks Output eegks Note In the first example, by sorting the characters of the string baedc, you obtain the lexicographically smallest permutation abcde. In the second example, sorting the characters of the string geeks results in the permutation eegks.","solution":"def smallest_lexicographic_permutation(s): Returns the lexicographically smallest permutation of the string. return \'\'.join(sorted(s))"},{"question":"Princess Heidi has received the specifications for creating advanced droid units to assist in the Rebel alliance. The droids are constructed in a modular fashion, with each module set containing a variety of components. Each component has a limited number of uses. Heidi needs to determine the maximum number of completed droids she can assemble given the current inventory of components and the specific component requirements for each droid. Each type of component has a specific availability and each type of droid requires a specific amounts of several component types. You are to determine how many complete droid units can be constructed with the available components. Input The first line of input contains an integer `C` (1 ≤ C ≤ 100) - the number of different component types available. The second line contains `C` integers `A1, A2, ..., AC` (1 ≤ Ai ≤ 1000), where `Ai` represents the quantity available for the ith component type. The third line contains an integer `D` (1 ≤ D ≤ 100) - the number of different types of droids that can be constructed. The next `D` lines each contain `C` integers `R1, R2, ..., RC` (0 ≤ Ri ≤ 1000), where `Ri` represents the required quantity of the ith component type to construct one droid of this specific type. Output Output a single integer, the maximum number of droid units that can potentially be constructed using the available components. Examples Input 3 10 6 8 2 2 2 2 1 1 5 Output 3 Input 2 5 10 3 1 2 2 5 1 1 Output 5 Note In the first example, with the components available (10, 6, 8), you can build: - 3 droids of the first type by using 2 components of each available type (3 * (2, 2, 2) ≤ (10, 6, 8)), - or 1 droid of the first type and 2 droids of the second type by using 6 components of type 1, 6 components of type 2, and 8 components of type 3 (1 * (2, 2, 2) + 2 * (1, 1, 5) ≤ (10, 6, 8)). In the second example, with the components available (5, 10), you can build: - 2 droids of the second type by using 4 components of type 1 and 10 components of type 2, - and then 1 more droid of the first or second type by using the remaining 1 component of type 1 and 0 components of type 2, - or 5 droids of the third type by using 5 of each component type.","solution":"def max_droids(C, component_avail, D, droid_reqs): max_droids_count = 0 for droid in range(D): count = float(\'inf\') for i in range(C): if droid_reqs[droid][i] == 0: continue count = min(count, component_avail[i] // droid_reqs[droid][i]) max_droids_count = max(max_droids_count, count) return max_droids_count # Example usage C = 3 component_avail = [10, 6, 8] D = 2 droid_reqs = [ [2, 2, 2], [1, 1, 5] ] print(max_droids(C, component_avail, D, droid_reqs)) # Output: 3"},{"question":"Let\'s write a program to manage a list of tasks. The tasks are added, removed, or checked for completion via commands and the program needs to output the state of the task list after each command. # Commands - **Add Task**: `ADD <task>` - **Remove Task**: `REMOVE <task>` - **Complete Task**: `COMPLETE <task>` - **List Tasks**: `LIST` The task list should maintain the order of tasks as they are added. When a task is marked as complete, it should be moved to the end of the list and labeled as completed but retained in the list for the subsequent \\"LIST\\" commands. # Input - The input starts with an integer **M** (1 ≤ M ≤ 50) representing the number of commands. - The following **M** lines each contain one command. # Output - For each command except \\"LIST\\", do not output anything. - For each \\"LIST\\" command, output the tasks in their current order, each on a new line. If a task is completed, output it with a \\" (completed)\\" suffix. # Example **Input** ``` 7 ADD Buy milk ADD Do homework LIST COMPLETE Buy milk ADD Read book REMOVE Do homework LIST ``` **Output** ``` Buy milk Do homework Buy milk (completed) Read book ``` # Explanation - After the first two commands, the task list contains \\"Buy milk\\" and \\"Do homework\\". - The \\"LIST\\" command outputs those two tasks. - The \\"COMPLETE Buy milk\\" command moves \\"Buy milk\\" to the end and marks it as completed. - \\"ADD Read book\\" inserts \\"Read book\\" into the list. - \\"REMOVE Do homework\\" removes \\"Do homework\\" from the list. - The final \\"LIST\\" command outputs the updated task list, showing the correct order and completion status of each task.","solution":"def manage_tasks(commands): Manage a list of tasks based on the given commands. Args: commands (list of str): List of commands to manage tasks. Returns: list of lists: Each sub-list contains the tasks after a LIST command in the commands list. tasks = [] completed_tasks = set() output = [] for command in commands: if command.startswith(\\"ADD \\"): task = command[4:] tasks.append(task) elif command.startswith(\\"REMOVE \\"): task = command[7:] if task in tasks: tasks.remove(task) if task in completed_tasks: completed_tasks.remove(task) elif command.startswith(\\"COMPLETE \\"): task = command[9:] if task in tasks and task not in completed_tasks: tasks.remove(task) tasks.append(task) completed_tasks.add(task) elif command == \\"LIST\\": current_list = [] for task in tasks: if task in completed_tasks: current_list.append(f\\"{task} (completed)\\") else: current_list.append(task) output.append(current_list) return output"},{"question":"Jake is training for a marathon and is tracking his running progress over several days. Each day he notes the distance he ran in kilometers in a list. Jake has set a goal of running at least `D` kilometers on average over any consecutive `k` days. However, he\'s concerned that there might be periods where he fails to meet this goal. Therefore, he needs to check how many subarrays of length `k` have an average distance of at least `D` kilometers. Write a function that, given a list of daily running distances and the integers `k` and `D`, returns the count of such subarrays of length `k`. Example Input: ``` distances = [5, 6, 4, 3, 8, 10] k = 3 D = 5 ``` Output: ``` 3 ``` Explanation: - The subarrays of length `k = 3` are `[5, 6, 4]`, `[6, 4, 3]`, `[4, 3, 8]`, `[3, 8, 10]`. - The averages are `(5 + 6 + 4) / 3 = 5`, `(6 + 4 + 3) / 3 = 4.33`, `(4 + 3 + 8) / 3 = 5`, `(3 + 8 + 10) / 3 = 7`. - Out of these, three subarrays have an average distance of at least `5` kilometers. Function Signature: ```python def count_subarrays(distances: List[int], k: int, D: int) -> int: ``` Note: 1. The function should be efficient even if the list length (`n`) is large. 2. Consider edge cases where `k` is 1 or where all distances are the same. 3. Additional edge cases might include empty arrays or arrays where no subarray meets the criteria. Constraints: - 1 ≤ n ≤ 100,000 (length of `distances`) - 1 ≤ k ≤ n - 1 ≤ D ≤ 1000","solution":"from typing import List def count_subarrays(distances: List[int], k: int, D: int) -> int: count = 0 n = len(distances) current_sum = sum(distances[:k]) if current_sum / k >= D: count += 1 for i in range(k, n): current_sum = current_sum - distances[i - k] + distances[i] if current_sum / k >= D: count += 1 return count"},{"question":"You are given a street grid in a town. The town is represented as an `m x n` grid of squares, where some squares are free spaces (represented by \'0\') and others are buildings (represented by \'1\'). You can only move up, down, left, or right from a free space to another free space. The task is to determine the number of distinct free space regions in the town. A region is defined as a group of connected free spaces. Two free spaces are part of the same region if you can reach one from the other by moving only through adjacent free spaces (up, down, left, right). Write a function `countRegions(m, n, grid)` that takes in the number of rows `m`, the number of columns `n`, and the grid itself as input, and returns the number of distinct free space regions. # Input - An integer `m`, the number of rows in the grid. - An integer `n`, the number of columns in the grid. - A list of `m` strings where each string is of length `n` and includes only \'0\' or \'1\' characters. # Output - An integer representing the number of free space regions. # Constraints - 1 ≤ `m`, `n` ≤ 1000 # Example Input ``` 4 5 00100 00100 11011 00000 ``` Output ``` 3 ``` Input ``` 3 3 111 101 111 ``` Output ``` 1 ``` # Note In the first example, the grid contains three distinct free space regions: 1. The first region consists of the cells: - (0,2) - (1,2) 2. The second region consists of the cell: - (2,3) 3. The third region consists of the cells: - (3,0) - (3,1) - (3,2) - (3,3) - (3,4) In the second example, there is only one free space region, which is the center cell (1,1).","solution":"def countRegions(m, n, grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < m and 0 <= cy < n and grid[cx][cy] == \'0\': grid[cx][cy] = \'2\' # Mark this cell as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: stack.append((cx + dx, cy + dy)) region_count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'0\': dfs(i, j) region_count += 1 return region_count"},{"question":"You are given a grid-based city layout with R rows and C columns. Each cell in the grid is either free (represented by \'.\') or blocked (represented by \'#\'). You need to determine the number of distinct paths from the top-left cell at (1, 1) to the bottom-right cell at (R, C) that do not revisit any cell. You can move only right or down from any cell. Input The first line contains two integers R and C (1≤ R, C ≤ 500), representing the number of rows and columns in the grid respectively. Each of the next R lines contains C characters, either \'.\' or \'#\', representing the city layout. Output Output a single integer – the number of distinct paths from (1, 1) to (R, C) that do not revisit any cell. If the bottom-right cell is blocked, output 0. Examples Input 3 3 ... .#. ... Output 2 Input 4 4 ...# .#.. #... ...# Output 0 Note In the first example, the two paths are: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down In the second example, there is no path due to the blockage.","solution":"def num_paths(R, C, grid): # If the start or end is blocked, no paths are possible if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return 0 # DP table to store the number of paths to each cell dp = [[0] * C for _ in range(R)] dp[0][0] = 1 # Start position has one way to reach for r in range(R): for c in range(C): if grid[r][c] == \'#\': dp[r][c] = 0 # No paths through a blocked cell else: if r > 0: dp[r][c] += dp[r-1][c] # From top cell if c > 0: dp[r][c] += dp[r][c-1] # From left cell return dp[R-1][C-1]"},{"question":"Write a program that determines the minimum number of moves required to move from one cell to another in a 2D grid for a chess bishop. The bishop moves diagonally any number of squares in any direction. Constraints * -8 ≤ x1, y1, x2, y2 ≤ 8 * The input coordinates will always be valid and within the bounds of the chessboard. Input Input is given from Standard Input in the following format: ``` x1 y1 x2 y2 ``` Output Print the minimum number of moves required for the bishop to move from `(x1, y1)` to `(x2, y2)`. Examples Input ``` 1 1 4 4 ``` Output ``` 1 ``` Input ``` 1 1 3 5 ``` Output ``` 2 ``` Input ``` 1 1 1 1 ``` Output ``` 0 ```","solution":"def min_bishop_moves(x1, y1, x2, y2): Returns the minimum number of moves required for a bishop to move from (x1, y1) to (x2, y2) in a 2D grid chessboard. # If the source and destination are the same, no move is required if x1 == x2 and y1 == y2: return 0 # If the source and destination cells are on the same diagonal elif abs(x1 - x2) == abs(y1 - y2): return 1 # If the source and destination cells are not on the same diagonal but are reachable else: return 2"},{"question":"Mira is organizing a tournament where players compete in individual matches. Each match involves exactly two players and there are no draws. After every match, the winner earns a point and the loser does not. Mira wants to keep track of the scores and determine the ranking of all players at any point in time. The ranking is determined by the scores, and if two players have the same score, they are ranked alphabetically by their names. You need to implement a system that: - Assigns points to players based on match results. - Retrieves the current ranking of all players in the tournament. Write functions to handle the following operations: 1. `add_result(player1: str, player2: str, winner: str) -> None` The result of a match between `player1` and `player2` is given. `winner` is the name of the player who won the match. 2. `get_ranking() -> List[str]` Returns a list of player names sorted by their ranking. Players with a higher score come first. If scores are the same, players are ranked alphabetically by their names. **Constraints:** - All player names are unique and consist only of lowercase English letters. - Length of a player name will be between 1 and 10 characters. - The number of players will not exceed 10,000. - The number of matches will not exceed 10,000. **Example:** ``` add_result(\'alice\', \'bob\', \'alice\') add_result(\'carol\', \'dave\', \'carol\') add_result(\'alice\', \'carol\', \'carol\') print(get_ranking()) # Output: [\'carol\', \'alice\', \'bob\', \'dave\'] add_result(\'dave\', \'bob\', \'dave\') print(get_ranking()) # Output: [\'carol\', \'alice\', \'dave\', \'bob\'] ``` *Note:* You can assume that `add_result` will be called before `get_ranking`.","solution":"from typing import List class Tournament: def __init__(self): self.scores = {} def add_result(self, player1: str, player2: str, winner: str) -> None: if player1 not in self.scores: self.scores[player1] = 0 if player2 not in self.scores: self.scores[player2] = 0 self.scores[winner] += 1 def get_ranking(self) -> List[str]: return sorted(self.scores.keys(), key=lambda player: (-self.scores[player], player)) # Create an instance of the Tournament class to use for method calls tournament = Tournament()"},{"question":"To determine whether a given string is a valid IPv4 address. Constraints * The string contains only numbers and dots. * The string should have exactly three dots. * Each number between dots should be between 0 and 255 inclusive. * No leading zeros are allowed unless the number is zero itself. Input Input is given from Standard Input in the following format: address Output If the string is a valid IPv4 address, print `Yes`; otherwise, print `No`. Examples Input 192.168.0.1 Output Yes Input 256.100.50.25 Output No Input 0.0.0.0 Output Yes","solution":"def is_valid_ipv4_address(address): Determines whether a given string is a valid IPv4 address. Parameters: address (str): The input string to be validated. Returns: str: \'Yes\' if the input string is a valid IPv4 address, \'No\' otherwise. parts = address.split(\'.\') # Check if the address has exactly four parts if len(parts) != 4: return \'No\' for part in parts: # Check if each part is a number and is between 0 and 255 if not part.isdigit() or not 0 <= int(part) <= 255: return \'No\' # Check for leading zeros if part != \'0\' and part.startswith(\'0\'): return \'No\' return \'Yes\'"},{"question":"The holiday season is approaching, and Fiona decides to decorate her Christmas tree. She has an array of ornaments, each with a specific beauty value. Fiona wants to hang these ornaments on the tree such that the total beauty of the ornaments is maximized. However, there is a unique constraint: she cannot hang two adjacent ornaments that have beauty values with an absolute difference greater than `K`. Given an array of integers representing the beauty values of the ornaments and the integer `K`, determine the maximum total beauty Fiona can achieve while following the constraint. Input The first line contains an integer `T`, the number of test cases. Each test case consists of two lines. The first line contains two integers `N` (the number of ornaments) and `K` (the maximum allowed absolute difference). The second line contains `N` space-separated integers representing the beauty values of the ornaments. Output For each test case, output a single integer representing the maximum total beauty Fiona can achieve. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ K ≤ 100 0 ≤ beauty value ≤ 10^9 SAMPLE INPUT 2 3 2 1 3 5 4 1 4 1 7 3 SAMPLE OUTPUT 9 7 Explanation In the 1st testcase, Fiona can select the sequence 1, 3, 5 or 1, 5 or 3, 5, but in all cases, the maximum beauty value she can find is 9 because the sequence 1, 5 does not respect the maximum allowed absolute difference `K` of 2. In the 2nd testcase, Fiona can select the sequence with a single ornament, either 4 or 3, both result in the maximum total beauty of 7 as the sequence 4, 3 has an absolute beauty value difference greater than `K` of 1.","solution":"def max_total_beauty(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] beauties = test_cases[i][1] if N == 0: results.append(0) continue dp = [0] * N dp[0] = beauties[0] for j in range(1, N): dp[j] = beauties[j] for l in range(j): if abs(beauties[j] - beauties[l]) <= K: dp[j] = max(dp[j], dp[l] + beauties[j]) results.append(max(dp)) return results"},{"question":"The Magic Tournament organizers are arranging a competition where wizards need to showcase their spell combination skills. Each wizard is given a sequence of spells represented by the numbers 1 through N. The challenge is to find out if they can rearrange this sequence to form exactly K unique subsequences, each with contiguous increasing spells. Your task is to help the organizers determine whether it is possible to form the required unique subsequences. Input The first line of the input contains an integer T, the number of test cases. Each test case consists of two integers: N (the number of spells) and K (the required number of unique subsequences). Output For each test case, output \\"YES\\" if the required subsequences can be formed, otherwise \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ N Example Input: 3 5 3 7 7 4 2 Output: YES YES NO Explanation: Example Case 1: For N=5 spells, they can be arranged as follows: [1, 2], [3], [4, 5] - three unique subsequences, thus answer is YES. Example Case 2: For N=7 spells, they can be arranged as follows: [1], [2], [3]... [7] - seven unique subsequences, thus answer is YES. Example Case 3: For N=4 spells, the only way to split them into 2 increasing subsequences is [1, 2, 3], [4] or [1], [2, 3, 4] but that does not give two unique subsequences, thus the answer is NO.","solution":"def can_form_k_unique_subsequences(N, K): Determines if it\'s possible to form exactly K unique subsequences from N spells. Args: N (int): The number of spells. K (int): The required number of unique subsequences. Returns: str: \\"YES\\" if it is possible to form the required number of unique subsequences, \\"NO\\" otherwise. if K <= N: return \\"YES\\" return \\"NO\\" def magic_tournament(T, test_cases): Processes multiple test cases to determine if the required unique subsequences can be formed. Args: T (int): Number of test cases. test_cases (list of tuples): List of (N, K) tuples representing each test case. Returns: list: List of results for each test case. results = [] for i in range(T): N, K = test_cases[i] result = can_form_k_unique_subsequences(N, K) results.append(result) return results"},{"question":"You are given a string s composed of lowercase English letters. Your task is to count how many times each letter appears in the string and then print the letters in alphabetical order along with their respective counts. Constraints * 1 ≤ |s| ≤ 100 Input Input is given from Standard Input in the following format: ``` s ``` Output For each letter that appears in the string, print the letter followed by its count. Output each letter-count pair on a new line in alphabetical order. Examples Input ``` atcoder ``` Output ``` a 1 c 1 d 1 e 1 o 1 r 1 t 1 ``` Input ``` banana ``` Output ``` a 3 b 1 n 2 ``` Input ``` apple ``` Output ``` a 1 e 1 l 1 p 2 ```","solution":"def count_letters(s): Returns a dictionary with letters as keys and their counts as values, in alphabetical order. from collections import Counter letter_counts = Counter(s) for letter in sorted(letter_counts): print(f\\"{letter} {letter_counts[letter]}\\")"},{"question":"A researcher is performing experiments on a colony of bacteria in a petri dish coded in a grid format. The grid is represented as a 2D array where each cell can either be alive (denoted by `1`) or dead (denoted by `0`). The researcher wants to simulate the next state of the colony based on the following rules, similar to Conway\'s Game of Life: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a function that takes the current state of the grid and returns the next state. Constraints: - The grid dimensions are represented by integers `m` and `n` where `1 leq m, n leq 100`. - The input grid will be an `m x n` 2D array of integers. Input - The first line contains two integers, `m` and `n`. - The next `m` lines each contain `n` integers, representing the grid. Output - Output the next state of the grid in the same format. Examples Input 4 3 0 1 0 1 1 1 0 1 0 0 0 0 Output 1 1 1 1 0 1 1 1 1 0 0 0 Input 4 4 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 Output 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 0","solution":"def next_state_of_grid(m, n, grid): Returns the next state of the grid based on the given rules. def count_live_neighbors(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dx, dy in directions: if 0 <= x + dx < m and 0 <= y + dy < n: live_neighbors += grid[x + dx][y + dy] return live_neighbors next_grid = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: next_grid[i][j] = 0 else: next_grid[i][j] = 1 else: if live_neighbors == 3: next_grid[i][j] = 1 return next_grid # Example Usage: m = 4 n = 3 grid = [ [0, 1, 0], [1, 1, 1], [0, 1, 0], [0, 0, 0], ] print(next_state_of_grid(m, n, grid))"},{"question":"Mayank the Architect is designing an archipelago of islands connected by bridges. The goal is to ensure that every island can be visited starting from any other island, by using one or more bridges. Each bridge connects exactly two islands and can be traversed in both directions. Initially, there are no bridges built, and Mayank has a list of `n` candidate bridges he can choose from. Each candidate bridge connects two different islands and has a certain construction cost associated with it. Mayank wants to minimize the total cost of building the bridges while ensuring the connectivity requirement is met. Help Mayank by determining the minimum total construction cost needed to connect all islands. # Input - The first line contains two integers, `m` (number of islands) and `n` (number of candidate bridges), where `2 ≤ m ≤ 1000` and `1 ≤ n ≤ 100000`. - Each of the next `n` lines contains three integers, `u`, `v`, and `w`, where `1 ≤ u, v ≤ m`, `u ≠ v`, and `1 ≤ w ≤ 10000` describing a candidate bridge that can connect island `u` and island `v` with a construction cost of `w`. # Output - A single integer representing the minimum total construction cost to ensure that every island is reachable from every other island. # Example Input ``` 4 5 1 2 1 2 3 2 3 4 3 1 3 2 2 4 3 ``` Output ``` 6 ``` Explanation In the given example, the minimum cost to connect all islands can be achieved by building the bridges between islands (1, 2), (2, 3), and (3, 4), or the bridges (1, 2), (1, 3), and (3, 4) with the total construction cost of 6. These choices ensure all islands are connected with the minimum possible cost.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def min_cost_to_connect_islands(m, n, bridges): # Sort all the bridges in non-decreasing order of their cost bridges = sorted(bridges, key=lambda item: item[2]) # Create parent and rank arrays parent = [] rank = [] for node in range(m): parent.append(node) rank.append(0) # Initialize result result = 0 # To store the minimum cost # Number of edges in the MST e = 0 # Index variable, used for sorted edges i = 0 # Iterate through all the sorted edges while e < m - 1: # Pick the smallest edge and increment the index u, v, w = bridges[i] i += 1 root_u = find(parent, u - 1) root_v = find(parent, v - 1) # If including this edge does not form a cycle if root_u != root_v: e += 1 result += w union(parent, rank, root_u, root_v) return result"},{"question":"You are given a wall of height H, which is divided into a grid of cells. The wall has W columns and H rows. You are tasked with painting some cells of this wall. Each cell may be assigned one of P different colors or left unpainted. You are given a set of N operations of the following types: 1. Paint the specified cell (i, j) with color k. 2. Check the color of the specified cell (i, j). You need to apply the paint operations in the given order and for each check operation output the color of the specified cell. If the cell is not painted, output 0. Input The first line contains three integers H (1 ≤ H ≤ 100), W (1 ≤ W ≤ 100), and P (1 ≤ P ≤ 100) — the height and width of the wall, and the number of different colors. The second line contains an integer N (1 ≤ N ≤ 10000) — the number of operations. Each of the next N lines describes an operation: - If the operation is of type 1, it is described by four integers 1, i, j, k (1 ≤ i ≤ H, 1 ≤ j ≤ W, 1 ≤ k ≤ P), meaning to paint the cell (i, j) with color k. - If the operation is of type 2, it is described by three integers 2, i, j (1 ≤ i ≤ H, 1 ≤ j ≤ W), meaning to check the color of the cell (i, j). Output For each operation of type 2, output the color of the specified cell. If the cell is not painted, output 0. Example Input 5 5 3 6 1 1 1 2 1 2 2 3 2 1 1 2 2 1 1 3 4 1 2 2 2 Output 2 0 3 Note In the example, initially all cells are unpainted. After the first operation, cell (1, 1) is painted with color 2. After the second operation, cell (2, 2) is painted with color 3. The third operation checks the color of cell (1, 1), which is 2. The fourth operation checks the color of cell (2, 1), which is still unpainted, so the output is 0. After the fifth operation, cell (3, 4) is painted with color 1. The sixth operation checks the color of cell (2, 2), which is 3.","solution":"def wall_operations(H, W, P, operations): # Initialize the wall with 0 (unpainted) wall = [[0] * W for _ in range(H)] # Store results for check operations results = [] # Process each operation for operation in operations: if operation[0] == 1: # Paint operation: 1 i j k _, i, j, k = operation wall[i-1][j-1] = k elif operation[0] == 2: # Check operation: 2 i j _, i, j = operation results.append(wall[i-1][j-1]) return results"},{"question":"Given two strings, `str1` and `str2`, determine the minimum number of operations required to convert `str1` into `str2`. The operations allowed are: 1. Insert a character 2. Delete a character 3. Replace a character Write a function `min_operations(str1, str2)` that takes two strings as input and returns the minimum number of operations needed to convert `str1` into `str2`. Function Signature: `def min_operations(str1: str, str2: str) -> int:` **Constraints:** - 1 ≤ len(str1), len(str2) ≤ 2000 - str1 and str2 consist of lowercase English letters. **Sample Input 1:** ``` str1 = \\"kitten\\" str2 = \\"sitting\\" ``` **Sample Output 1:** ``` 3 ``` **Explanation:** - Replace \'k\' with \'s\' - Replace \'e\' with \'i\' - Insert \'g\' **Sample Input 2:** ``` str1 = \\"flaw\\" str2 = \\"lawn\\" ``` **Sample Output 2:** ``` 2 ``` **Explanation:** - Delete \'f\' - Replace \'w\' with \'n\' Implement the function to solve the problem.","solution":"def min_operations(str1: str, str2: str) -> int: Returns the minimum number of operations required to convert str1 into str2. The operations allowed are insert a character, delete a character, and replace a character. m = len(str1) n = len(str2) # Create a 2D array to store the minimum number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(m + 1): dp[i][0] = i # str1 to empty str2 requires i deletions for j in range(n + 1): dp[0][j] = j # empty str1 to str2 requires j insertions # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1) # Replace return dp[m][n]"},{"question":"You are given an integer n and asked to generate an n x n matrix that follows these rules: 1. Each cell in the matrix contains a distinct integer from 1 to n^2. 2. The matrix must be a \\"magic square,\\" i.e., the sum of integers in each row, each column, and both main diagonals must be the same. Your task is to write a program to generate such a magic square for a given n. Input The first line contains an integer T (1 ≤ T ≤ 1000) — the number of test cases. Each of the next T lines contains an integer n (3 ≤ n ≤ 100) — the size of the magic square. Output For each test case, print n lines with n integers in each line – the generated magic square for the given n, ensuring all the aforementioned conditions are met. Example Input 2 3 5 Output 8 1 6 3 5 7 4 9 2 17 24 1 8 15 23 5 7 14 16 4 6 13 20 22 10 12 19 21 3 11 18 25 2 9","solution":"def generate_magic_square(n): Generates an n x n magic square using the Siamese method for odd n. # Create an empty n x n square magic_square = [[0] * n for _ in range(n)] # Initialize position for 1 number = 1 i, j = 0, n // 2 while number <= n*n: magic_square[i][j] = number number += 1 # Move up and right new_i, new_j = (i - 1) % n, (j + 1) % n if magic_square[new_i][new_j]: # If the new position is already taken, move straight down instead i += 1 else: i, j = new_i, new_j return magic_square def magic_square_test_cases(T, test_cases): results = [] for n in test_cases: results.append(generate_magic_square(n)) return results"},{"question":"Marta has a binary string of length n. She wants to make sure that every substring of length k in this binary string has exactly m \'1\'s. A substring is a contiguous sequence of characters within a string. Help Marta determine if it is possible to rearrange the binary string to meet this requirement. Input The first line contains three integers n, k, m (1 ≤ k ≤ n ≤ 100, 0 ≤ m ≤ k) — the length of the binary string, the length of the required substrings, and the number of \'1\'s each substring of length k should have. The second line contains a binary string of length n consisting of \'0\'s and \'1\'s. Output Print \\"YES\\" (without the quotes) if the binary string can be rearranged to meet the requirement, and \\"NO\\" (without the quotes) otherwise. Examples Input 5 3 2 11010 Output YES Input 5 3 3 11001 Output NO Note In the first sample, the string can be rearranged to \\"10110\\", which ensures every substring of length 3 has exactly 2 \'1\'s. In the second sample, it is not possible to rearrange the string to meet the requirement since there are only 3 \'1\'s and k = 3 requires all of them to be in every substring, which overlaps and contradicts the sequence.","solution":"def can_rearrange_binary_string(n, k, m, binary_string): Determines if a binary string can be rearranged to meet the requirement that every substring of length k has exactly m \'1\'s. Parameters: n (int): Length of the binary string. k (int): Length of the required substrings. m (int): Number of \'1\'s each substring of length k should have. binary_string (str): Input binary string. Returns: str: \\"YES\\" if the binary string can be rearranged to meet the requirement, \\"NO\\" otherwise. ones_count = binary_string.count(\'1\') zeros_count = n - ones_count # checking the feasibility of rearranging the binary string if m * n // k != ones_count: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of integers representing the heights of blocks in a straight line. You need to find the minimum number of blocks that must be removed to make the remaining blocks\' heights strictly increasing. In other words, after removing some blocks, the heights of the remaining blocks should be in a strictly increasing order. Your task is to answer q independent queries. Input The first line of the input contains one integer q (1 ≤ q ≤ 1000) — the number of queries. Then q queries follow. The first line of each query contains one integer n (1 ≤ n ≤ 1000) — the length of the array representing the heights of blocks. The second line of each query contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000), where h_i is the height of the i-th block. Note that the maximum value of h_i can be up to 1000. Output For each query, print the answer — the minimum number of blocks that must be removed to make the remaining blocks\' heights strictly increasing. Example Input 3 5 1 2 3 4 5 4 4 3 2 1 6 3 1 4 1 5 9 Output 0 3 2","solution":"def min_removals_to_make_strictly_increasing(q, queries): Returns a list of the minimum number of blocks that must be removed for each query to make the remaining heights strictly increasing. results = [] for query in queries: n, heights = query dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The minimal removals is original size minus length of longest increasing subsequence. longest_increasing_subsequence_length = max(dp) results.append(n - longest_increasing_subsequence_length) return results # Example usage: # q = 3 # queries = [ # (5, [1, 2, 3, 4, 5]), # (4, [4, 3, 2, 1]), # (6, [3, 1, 4, 1, 5, 9]) # ] # print(min_removals_to_make_strictly_increasing(q, queries)) # Output: [0, 3, 2]"},{"question":"Sarah is a newbie coder and is learning about string operations. To test her understanding, she has devised a problem involving string transformations. Given a string S, she wants to know if all characters in the string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. To determine this, she needs a string operation program that checks whether for any permutation of the string, it can be rearranged into a palindrome. More precisely, the program should check if the input string can have at most one character with an odd frequency count; all other characters should have even frequency counts. Help Sarah by writing a program that reads a string S and outputs \\"Yes\\" if the string can be rearranged to form a palindrome, otherwise output \\"No\\". Input: The first line of input consists of a single string S, consisting of lowercase alphabets. Output: Print \\"Yes\\" if the string can be rearranged to form a palindrome. Print \\"No\\" otherwise. Constraints: 1 ≤ |S| ≤ 10^5 SAMPLE INPUT carrace SAMPLE OUTPUT Yes SAMPLE INPUT daily SAMPLE OUTPUT No","solution":"def can_form_palindrome(S): Returns \'Yes\' if the string S can be rearranged to form a palindrome, otherwise returns \'No\'. from collections import Counter freq = Counter(S) odd_count = sum(1 for count in freq.values() if count % 2 != 0) if odd_count > 1: return \\"No\\" else: return \\"Yes\\""},{"question":"You are tasked with developing a program that ensures a log entry is valid based on specific criteria. In many systems, log entries must follow a precise structure to ensure proper monitoring and debugging capabilities. Each log entry consists of three components: 1. **Timestamp** (a string in the format \\"YYYY-MM-DD HH:MM:SS\\", representing the date and time of the log entry). 2. **Log Level** (a string representing the severity level of the log, one of: \\"INFO\\", \\"WARNING\\", \\"ERROR\\"). 3. **Message** (a string representing the content of the log entry, at least 1 character and no more than 100 characters). Create a program that reads a log entry, validates it against the specified criteria, and determines whether the log entry is valid or not. # Input The input is given in the following format: ``` timestamp log_level message ``` - `timestamp`: a string in the format \\"YYYY-MM-DD HH:MM:SS\\" - `log_level`: a string that can be \\"INFO\\", \\"WARNING\\", or \\"ERROR\\" - `message`: a string 1 to 100 characters long (containing printable ASCII characters except for new lines) # Output Output \\"Valid\\" if the log entry meets all the criteria, otherwise output \\"Invalid\\". # Example Input ``` 2023-08-15 14:45:32 INFO System started successfully ``` Output ``` Valid ``` Input ``` 2023-08-15 14:45:60 ERROR Fault in module ``` Output ``` Invalid ``` # Constraints 1. The `timestamp` must be in the format \\"YYYY-MM-DD HH:MM:SS\\". 2. The `log_level` must be one of the strings: \\"INFO\\", \\"WARNING\\", \\"ERROR\\". 3. The `message` length must be between 1 and 100 characters (inclusive).","solution":"import re from datetime import datetime def is_valid_log_entry(timestamp, log_level, message): Validates a log entry based on given criteria. Arguments: timestamp -- a string in the format \\"YYYY-MM-DD HH:MM:SS\\" log_level -- a string representing the severity level (one of: \\"INFO\\", \\"WARNING\\", \\"ERROR\\") message -- a string representing the content of the log entry Returns: \\"Valid\\" if the log entry meets all the criteria, otherwise \\"Invalid\\". # Check if timestamp is in the correct format timestamp_regex = r\'^d{4}-d{2}-d{2} d{2}:d{2}:d{2}\' if not re.match(timestamp_regex, timestamp): return \\"Invalid\\" try: datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") except ValueError: return \\"Invalid\\" # Check if log_level is one of the accepted values if log_level not in [\\"INFO\\", \\"WARNING\\", \\"ERROR\\"]: return \\"Invalid\\" # Check if message length is between 1 and 100 characters if not (1 <= len(message) <= 100): return \\"Invalid\\" return \\"Valid\\""},{"question":"Given an unsorted array of integers, you need to perform a number of range sum queries efficiently. Each query specifies a subarray by its start and end indices, and you need to return the sum of the elements in that subarray. Your task is to preprocess the array so that each query can be answered in constant time. Input: - The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of elements in the array and the number of queries. - The second line contains n integers a1, a2, ..., an. - The next q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) — the start and end indices of the subarray for that query. Output: For each query, print the sum of the elements in the specified subarray. Constraints: 1 ≤ ai ≤ 10^9 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15","solution":"def preprocess_array(arr): Preprocesses the array to create a prefix sum array for efficient range sum queries. Parameters: arr (list of int): The input array of integers. Returns: list of int: The prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def range_sum_query(prefix_sum, l, r): Returns the sum of the elements in the subarray arr[l-1:r-1] inclusive. Parameters: prefix_sum (list of int): The prefix sum array. l (int): The start index of the subarray (1-based). r (int): The end index of the subarray (1-based). Returns: int: The sum of the elements in the specified subarray. return prefix_sum[r] - prefix_sum[l - 1]"},{"question":"A robotics manufacturing company uses a computer system to monitor and analyze the performance of assembly line workers. Each worker completes various tasks on the assembly line, and each task is assigned a unique identifier and a specific time duration required to complete it. The company wants to identify the most efficient worker by determining which worker has the minimum total time spent on completing tasks. Write a program that will: 1. Take as input the number of workers and the number of tasks. 2. Take as input the task durations associated with each worker. 3. Output the worker identifier (1-based index) who has the minimum total time spent on tasks. If there are multiple workers with the same minimum time, output the smallest worker identifier. Input - The first line contains two integers `w` and `t` (1 ≤ w ≤ 1000, 1 ≤ t ≤ 10000), the number of workers and the number of tasks, respectively. - Each of the next `w` lines contains `t` integers (0 ≤ duration ≤ 1000), where each integer represents the time duration of a task for a specific worker. Output - Output a single integer representing the 1-based index of the worker with the minimum total time spent on tasks. Example Input 3 4 1 2 3 4 2 2 2 2 4 3 2 1 Output 2 Explanation - Worker 1 spends a total time of 1 + 2 + 3 + 4 = 10. - Worker 2 spends a total time of 2 + 2 + 2 + 2 = 8. - Worker 3 spends a total time of 4 + 3 + 2 + 1 = 10. Since Worker 2 has the minimum total time, the output is 2.","solution":"def find_min_time_worker(w, t, task_durations): Finds the worker with the minimum total time spent on tasks. :param w: The number of workers :param t: The number of tasks for each worker :param task_durations: A list of lists, each containing the task durations for a worker :return: The 1-based index of the worker with the minimum total time min_time = float(\'inf\') min_worker = -1 for i in range(w): total_time = sum(task_durations[i]) if total_time < min_time: min_time = total_time min_worker = i + 1 return min_worker # Example usage w = 3 t = 4 task_durations = [ [1, 2, 3, 4], [2, 2, 2, 2], [4, 3, 2, 1] ] print(find_min_time_worker(w, t, task_durations)) # Output: 2"},{"question":"You are given a string S consisting of lowercase alphabets and a character C. You need to determine the shortest distance from each character in the string to the character C. Distance between two characters depends on their indices in the string. If a character in the string is C, the distance is 0. Input Format: The first line contains the string S. The second line contains the character C. Output Format: Print a list of integers, where each integer represents the shortest distance from the corresponding character in the string to the character C. Constraints: 1 ≤ length of S ≤ 10^5 S will have at least one occurrence of C. SAMPLE INPUT loveleetcode e SAMPLE OUTPUT [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] Explanation For the string \\"loveleetcode\\", - \'l\' has distance 3 from the nearest \'e\'. - \'o\' has distance 2 from the nearest \'e\'. - \'v\' has distance 1 from the nearest \'e\'. - \'e\' has distance 0 as itself. - and so on.","solution":"def shortest_distance_to_char(S, C): Returns a list of integers representing the shortest distance from each character in the string to the character C. n = len(S) result = [float(\'inf\')] * n # First pass: left to right prev = float(\'-inf\') for i in range(n): if S[i] == C: prev = i result[i] = i - prev # Second pass: right to left prev = float(\'inf\') for i in range(n-1, -1, -1): if S[i] == C: prev = i result[i] = min(result[i], prev - i) return result"},{"question":"You are given a set of m intervals on a number line. Each interval is represented by two integers [li, ri] which denote the starting and ending points of the interval respectively. You need to find the minimum number of points required such that each interval has at least one point in it. Input The first line contains an integer m (1 ≤ m ≤ 10^5), the number of intervals. The next m lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ 10^9) representing the intervals. Output Print a single integer, the minimum number of points required. Examples Input 3 1 4 2 5 6 8 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 2","solution":"def minimum_number_of_points(intervals): This function takes a list of intervals and returns the minimum number of points such that each interval in the list has at least one point. if not intervals: return 0 # Sort intervals by their end points intervals.sort(key=lambda x: x[1]) # Initialize the number of points needed and the position of the last added point points_needed = 0 last_point = float(\'-inf\') for interval in intervals: if interval[0] > last_point: # Add a point at the end of the current interval last_point = interval[1] points_needed += 1 return points_needed"},{"question":"You are working on a project that requires parsing a log file to extract and format specific information. The log file contains entries with timestamps, log levels, and messages. The task is to format these entries into structured JSON objects based on a given set of filtering criteria. Each log entry follows this format: ``` [yyyy-mm-dd hh:mm:ss] [LEVEL] Message text ``` Where `LEVEL` can be one of `INFO`, `WARN`, or `ERROR`. You need to write a program that reads the log file, filters the entries based on a minimum log level, and outputs a JSON array of entries. The JSON objects should have the following structure: ```json { \\"timestamp\\": \\"yyyy-mm-dd hh:mm:ss\\", \\"level\\": \\"LEVEL\\", \\"message\\": \\"Message text\\" } ``` # Input - The first line contains an integer `n` (1 ≤ n ≤ 105), the number of log entries. - The second line contains a string `min_level`, which can be either `INFO`, `WARN`, or `ERROR`, that represents the minimum log level to include. - The next `n` lines each contain a log entry in the format specified above. # Output - Output a JSON array containing the filtered log entries sorted by timestamp in ascending order. Each entry should be a JSON object as described earlier. # Examples Input ``` 4 WARN [2023-01-01 10:00:00] [INFO] Startup complete [2023-01-01 10:05:00] [WARN] Low disk space [2023-01-01 10:10:00] [ERROR] Disk full [2023-01-01 11:00:00] [INFO] User logged in ``` Output ```json [ { \\"timestamp\\": \\"2023-01-01 10:05:00\\", \\"level\\": \\"WARN\\", \\"message\\": \\"Low disk space\\" }, { \\"timestamp\\": \\"2023-01-01 10:10:00\\", \\"level\\": \\"ERROR\\", \\"message\\": \\"Disk full\\" } ] ``` # Notes - Only include log entries that are equal to or higher than the specified `min_level`. - Log levels should be considered in the order `INFO` < `WARN` < `ERROR`. - The output should be a valid JSON array and should be sorted by timestamp. You may assume that timestamps are unique. - Use a built-in JSON library for JSON formatting if available in your programming language of choice.","solution":"import json from datetime import datetime def parse_log_entry(entry): Parses a single log entry and returns a dictionary with timestamp, level, and message keys. time, level, message = entry.split(\'] \', 2) timestamp = time.strip(\'[\') level = level.strip(\'[\').strip(\']\') return { \\"timestamp\\": timestamp, \\"level\\": level, \\"message\\": message.strip() } def log_level_to_number(level): Converts a log level to a number for easy comparison. levels = {\\"INFO\\": 1, \\"WARN\\": 2, \\"ERROR\\": 3} return levels[level] def filter_logs(n, min_level, logs): Filters and formats log entries based on the minimum log level. min_level_number = log_level_to_number(min_level) filtered_logs = [] for log in logs: parsed_log = parse_log_entry(log) if log_level_to_number(parsed_log[\\"level\\"]) >= min_level_number: filtered_logs.append(parsed_log) # Sort logs by timestamp filtered_logs = sorted(filtered_logs, key=lambda x: datetime.strptime(x[\\"timestamp\\"], \\"%Y-%m-%d %H:%M:%S\\")) return json.dumps(filtered_logs, indent=2) # Example usage if __name__ == \\"__main__\\": n = 4 min_level = \\"WARN\\" logs = [ \\"[2023-01-01 10:00:00] [INFO] Startup complete\\", \\"[2023-01-01 10:05:00] [WARN] Low disk space\\", \\"[2023-01-01 10:10:00] [ERROR] Disk full\\", \\"[2023-01-01 11:00:00] [INFO] User logged in\\" ] result = filter_logs(n, min_level, logs) print(result)"},{"question":"Vasya likes to play with arrays. One day, he came across an interesting problem: finding the minimal length of a subarray of a given array whose sum is at least a given integer k. You are given an array of n (1 ≤ n ≤ 3 * 10^5) positive integers and an integer k (1 ≤ k ≤ 10^14). Your task is to determine the minimal length of a subarray whose summation is at least k. A subarray is defined as a contiguous segment of the array. If there is no such subarray, output -1. Input The first line contains two integers n and k. The second line contains n positive integers representing the array. Output Output the minimal length of a subarray whose sum is at least k, or -1 if no such subarray exists. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 100 1 2 3 4 5 Output -1","solution":"def minimal_subarray_length(n, k, arr): min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] # Check to see if current_sum is greater than or equal to k while current_sum >= k: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given a string of lowercase alphabets, find the length of the longest substring without repeating characters. Input The first line contains a single integer T (1 <= T <= 40), the number of test cases. Each of the next T lines contains a non-empty string composed only of lowercase letters. The length of each string is less than 100. Output For each test case, output a single line containing the length of the longest substring that does not have any repeating characters. Example Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string s. start = 0 max_length = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_length = max(max_length, i - start + 1) used_chars[char] = i return max_length def process_test_cases(test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are working on a library management system and need to implement a feature to track the overdue status of books. Books are checked out for a fixed duration of 14 days, and overdue books are those that have been checked out longer than this period. Write a function that takes a list of checkout dates (strings in the format \\"YYYY-MM-DD\\") and a reference date (string in the format \\"YYYY-MM-DD\\"), then returns a list of booleans indicating for each book whether it is overdue as of the reference date. Input Format - The first line of the input contains a single integer n, representing the number of books. - The second line of the input contains n space-separated strings, each representing the checkout date of a book in the format \\"YYYY-MM-DD\\". - The third line of the input contains a single string, which is the reference date in the format \\"YYYY-MM-DD\\". Output Format - Output a list of n booleans, where each boolean indicates whether the corresponding book is overdue. Example Input 3 2023-09-10 2023-09-12 2023-09-01 2023-09-25 Output [False, False, True] Note: You might find the `datetime` module in Python useful for this task.","solution":"from datetime import datetime, timedelta def check_overdue(checkout_dates, reference_date): Returns a list of booleans indicating whether each book is overdue based on the reference date. ref_date = datetime.strptime(reference_date, \\"%Y-%m-%d\\") overdue_status = [] for checkout in checkout_dates: checkout_date = datetime.strptime(checkout, \\"%Y-%m-%d\\") if ref_date - checkout_date > timedelta(days=14): overdue_status.append(True) else: overdue_status.append(False) return overdue_status"},{"question":"Given a list of integers, determine whether the list is a \\"mountain array\\". A mountain array is defined as an array with the following properties: - The length of the list is at least 3. - There exists some index i (0 < i < length of list - 1) such that: - the elements from the start up to index i are strictly increasing. - the elements from index i to the end are strictly decreasing. Your task is to check each list of integers and return `True` if it is a mountain array and `False` otherwise. Input Format The first line contains T, i.e. the number of test cases. T lines follow, each containing a list of integers separated by spaces. Output Format For each test case, print `True` if the list is a mountain array, and `False` otherwise. Constraints 1≤T≤100 3≤ length of each list ≤10^6 -10^6≤ each integer ≤10^6 SAMPLE INPUT 3 2 1 3 5 5 0 3 2 1 SAMPLE OUTPUT False False True Explanation In the given input, T = 3, For the first list [2, 1], the length is less than 3, so it cannot be a mountain array, hence `False`. For the second list [3, 5, 5], the elements are not strictly increasing or strictly decreasing, hence `False`. For the third list [0, 3, 2, 1], the array starts increasing to `3` and then strictly decreases, hence `True`.","solution":"def is_mountain_array(arr): n = len(arr) if n < 3: return False i = 0 # Ascending phase while i < n - 1 and arr[i] < arr[i + 1]: i += 1 # Peak cannot be the first or the last index if i == 0 or i == n - 1: return False # Descending phase while i < n - 1 and arr[i] > arr[i + 1]: i += 1 return i == n - 1 def process_test_cases(T, test_cases): results = [] for case in test_cases: arr = list(map(int, case.split())) results.append(is_mountain_array(arr)) return results"},{"question":"You are given a sequence of N integers. Define a \\"good\\" subsequence as a subsequence that contains every integer value from 1 to M at least once. Your task is to determine the length of the shortest \\"good\\" subsequence in the given sequence. Constraints * 1 leq N leq 100 * 1 leq M leq 100 * 1 leq Sequence[i] leq 100 Input The input is given from Standard Input in the following format: N M Sequence[1] Sequence[2] ... Sequence[N] Output Print a single integer representing the length of the shortest \\"good\\" subsequence. If no such subsequence exists, print -1. Examples Input 10 3 1 3 2 1 2 2 3 3 1 2 Output 3 Input 7 4 1 2 3 1 2 3 1 Output -1 Input 6 2 1 1 2 2 2 1 Output 2","solution":"def shortest_good_subsequence(N, M, sequence): Returns the length of the shortest \\"good\\" subsequence that contains every integer from 1 to M at least once. If no such subsequence exists, returns -1. shortest_length = float(\'inf\') found = False for start in range(N): seen = [False] * M count_needed = M for end in range(start, N): if 1 <= sequence[end] <= M and not seen[sequence[end]-1]: seen[sequence[end]-1] = True count_needed -= 1 if count_needed == 0: current_length = end - start + 1 shortest_length = min(shortest_length, current_length) found = True break return shortest_length if found else -1"},{"question":"You\'re given an array of integers of length n. Your task is to find the length of the longest subarray consisting of only prime numbers from the array. The subarray should be contiguous. A prime number is a positive integer greater than 1, with no positive integer divisors other than 1 and itself. Input The first line of the input contains an integer, n (1 ≤ n ≤ 10^5), representing the number of elements in the array. The second line of the input contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output Print a single integer indicating the length of the longest contiguous subarray consisting of only prime numbers. If there are no prime numbers in the array, the output should be 0. Examples Input 9 3 5 8 7 9 10 11 13 15 Output 2 Input 6 4 6 8 10 12 14 Output 0","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def longest_prime_subarray_length(n, array): longest_length = 0 current_length = 0 for num in array: if is_prime(num): current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 0 return longest_length"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to find the maximum average subarray of length `k`. An average of an array is the sum of its elements divided by the number of elements. Write a function `findMaxAverage` that takes the array `nums` and the integer `k`, and returns the maximum average value for any subarray of length `k`. Input - An integer array `nums` of length `n` (1 ≤ n ≤ 10^5). - An integer `k` (1 ≤ k ≤ n). Output - A float, representing the maximum average value of any subarray of length `k`. Constraints - The input array may contain both positive and negative integers. - The values in the input array are within the range [-10^4, 10^4]. Example Input ``` nums = [1, 12, -5, -6, 50, 3] k = 4 ``` Output ``` 12.75 ``` Explanation - The subarray [12, -5, -6, 50] has the maximum average value of 12.75. Function Signature ```python def findMaxAverage(nums: List[int], k: int) -> float: ``` Note - You should strive to achieve an optimal time complexity, aiming for O(n) solutions.","solution":"def findMaxAverage(nums, k): Returns the maximum average value of any subarray of length k. current_sum = sum(nums[:k]) max_sum = current_sum for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum / k"},{"question":"Alice and Bob are fond of playing competitive games. Recently, they came across a game involving binary strings and decided to challenge each other. The game works as follows: they are given a binary string `S` of length `n`. Both Alice and Bob take turns, with Alice going first. In each turn, the player must select a non-empty substring of `S` that contains at least one \'1\' and replace all occurrences of \'1\' in that substring with \'0\'. The game continues until no such substring can be selected. The player who is unable to make a move loses the game. Alice and Bob play optimally, meaning they will always choose the move that maximizes their chances of winning. Your task is to determine if Alice, who goes first, can force a win no matter how Bob plays. Input The input consists of: - A single string `S` (1 ≤ |S| ≤ 1000) -- the binary string. Output Output a single line containing \\"Alice\\" if Alice can force a win, otherwise output \\"Bob\\". Example Input 1101 Output Alice Input 000 Output Bob Note In the first example, Alice can select the whole string \\"1101\\" and set it to \\"0000\\" on her first move, leaving Bob with no moves, so Alice wins. In the second example, there are no \'1\'s in the string, so Alice has no moves to start with. Therefore, Bob wins because Alice cannot make a move.","solution":"def determine_winner(S): Determines if Alice can force a win. Alice wins if there is at least one \'1\' in the string. :param S: A binary string :return: \\"Alice\\" if Alice can force a win, otherwise \\"Bob\\" if \'1\' in S: return \\"Alice\\" else: return \\"Bob\\""},{"question":"In a certain kingdom, there are n cities connected by m bidirectional roads. Each road has a certain travel cost associated with it. The kingdom also has k special cities which are of particular interest to the King. The King wants to build a palace in one of the special cities such that the total travel cost from this special city to all other special cities is minimized. Input The first line contains three integers, n, m and k (1 ≤ k ≤ n ≤ 100000, 1 ≤ m ≤ 200000). The second line contains k distinct integers representing the special cities. Each of the next m lines represents a road described by three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000) indicating there is a road between cities u and v with a cost w. Output Print a single integer — the minimum possible total travel cost from the palace to all other special cities. If it\'s impossible to travel between all special cities, print -1. Examples Input 6 7 3 2 3 4 1 2 5 1 3 10 3 4 1 4 5 3 2 5 2 2 3 1 5 6 2 Output 7 Note Sample 1. The special cities are 2, 3, and 4. The possible palace locations and the total travel costs are: - If the palace is at city 2: total cost = 1 (2 to 3) + 2 (2 to 5 to 4) = 3 - If the palace is at city 3: total cost = 1 (3 to 2) + 1 (3 to 4) = 2 - If the palace is at city 4: total cost = 1 (4 to 3) + 3 (4 to 5 to 2) = 4 The minimum possible total travel cost is thus 2.","solution":"import heapq import sys def min_travel_cost(n, m, k, special_cities, roads): INF = sys.maxsize # Adjacency list to store the graph graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Function to perform Dijkstra\'s algorithm def dijkstra(start): dist = [INF] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist min_cost = INF for city in special_cities: dist = dijkstra(city) total_cost = sum(dist[sp_city] for sp_city in special_cities) min_cost = min(min_cost, total_cost) return min_cost if min_cost < INF else -1 # Example usage if __name__ == \\"__main__\\": n = 6 m = 7 k = 3 special_cities = [2, 3, 4] roads = [ (1, 2, 5), (1, 3, 10), (3, 4, 1), (4, 5, 3), (2, 5, 2), (2, 3, 1), (5, 6, 2) ] print(min_travel_cost(n, m, k, special_cities, roads)) # Output: 2"},{"question":"Mira is a software engineer who enjoys solving puzzles in her leisure time. She came across a puzzle that involves manipulating words in a certain way. The task is to write a function to solve the puzzle based on the following instructions: Given a string s containing only lower case letters (a to z), determine if it can be rearranged to form a palindrome. If it can, return \\"YES\\", otherwise return \\"NO\\". A string is a palindrome if it reads the same backward as forward. For example, \\"radar\\" and \\"level\\" are palindromes, while \\"hello\\" is not. Input: The input consists of a number N on the first line, which is the number of test cases. N test cases follow, each consisting of a single string s on a line. (1 ≤ N ≤ 100) (1 ≤ |s| ≤ 10^5) Output: For each test case, output \\"YES\\" or \\"NO\\" on a new line, depending on whether the string can be rearranged to form a palindrome. Example: Input: 4 racecar racerac hello aabbcc Output: YES YES NO YES Explanation: - \\"racecar\\" is already a palindrome. - \\"racerac\\" can be rearranged to \\"racecar\\" which is a palindrome. - \\"hello\\" cannot be rearranged to form a palindromic string. - \\"aabbcc\\" can be rearranged to \\"abcabc\\" which is a palindrome.","solution":"def can_form_palindrome(s): Determine if the string can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lower-case letters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, else \\"NO\\". from collections import Counter # Count the frequency of each character char_count = Counter(s) # Count the number of characters with odd frequencies odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency if odd_counts > 1: return \\"NO\\" return \\"YES\\" def solve_palindrome_puzzle(test_cases): Solve the puzzle for the given test cases. Parameters: test_cases (list of str): List of strings to be checked. Returns: list of str: List of results \\"YES\\" or \\"NO\\" for each test case. results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"Dany loves numbers and recently came across an interesting problem involving substrings of numbers. A substring is defined as any continuous sequence of digits within a number. For example, for the number \\"12345\\", the substrings are (\\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"12\\", \\"23\\", \\"34\\", \\"45\\", \\"123\\", \\"234\\", \\"345\\", \\"1234\\", \\"2345\\", \\"12345\\"). Dany wants to find out if a given number contains a certain special substring. The special substring is defined as a sequence of digits that contains duplicates and whose length is exactly 3. For instance, \\"112\\" or \\"233\\" are special substrings, but \\"123\\" or \\"111\\" are not. Write a program that determines whether a given number contains any such special substring. Input The input consists of a single line containing a number n (1 ≤ n ≤ 10^5) — the number Dany is interested in. The number consists of digits only. Output Print \\"yes\\" if the number contains any special substring, and \\"no\\" otherwise. Examples Input 12311245 Output yes Input 4567890 Output no Note In the first example, \\"12311245\\" contains the substring \\"112\\", which is a special substring, so the output is \\"yes\\". In the second example, \\"4567890\\" does not contain any special substring, so the output is \\"no\\".","solution":"def contains_special_substring(n): Determines if the given number n contains a special substring of length 3. A special substring is defined as a substring of length 3 that contains duplicates. n_str = str(n) length = len(n_str) for i in range(length - 2): substring = n_str[i:i+3] if len(set(substring)) < 3: return \\"yes\\" return \\"no\\""},{"question":"Given a rectangular matrix with n rows and m columns, you need to determine the maximum sum of any submatrix of size kxk that can be obtained. Input The first line contains three integers n, m, and k (1 ≤ k ≤ min(n, m) ≤ 300, 1 ≤ n, m ≤ 300). The next n lines each contain m integers, representing the elements of the matrix. Output Print the maximum sum of any kxk submatrix. Examples Input 4 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 34 Note Consider all possible 2x2 submatrices: 1) 1 2 5 6 Sum = 14 2) 2 3 6 7 Sum = 18 3) 3 4 7 8 Sum = 22 4) 5 6 9 10 Sum = 30 5) 6 7 10 11 Sum = 34 6) 7 8 11 12 Sum = 38 7) 9 10 13 14 Sum = 46 8) 10 11 14 15 Sum = 50 9) 11 12 15 16 Sum = 54 10) 6 7 10 11 Sum = 34 The maximum sum is 34.","solution":"def max_sum_kxk_submatrix(matrix, n, m, k): max_sum = float(\'-inf\') # Compute sum of all k x k submatrices for i in range(n - k + 1): for j in range(m - k + 1): current_sum = 0 for a in range(k): for b in range(k): current_sum += matrix[i + a][j + b] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Problem Statement: There is a city with N students and M libraries. Each library has a certain number of books, and each student has a list of books they have already read. The city wants to know if there is any library from which every student can find at least one unread book. Write a program that determines if there is at least one library from which every student can borrow at least one book they have not read yet. Input: First line contains two integers N and M, the number of students and the number of libraries respectively. The next N lines list the books each student has read. Each student\'s list starts with an integer Ki, the number of books they have read, followed by Ki distinct integers representing the IDs of the books. The next M lines list the books each library possesses. Each library\'s list starts with an integer Li, the number of books in the library, followed by Li distinct integers representing the IDs of the books. Output: Print \\"YES\\" if there is at least one library from which every student can borrow at least one unread book, otherwise print \\"NO\\". Constraints: 1 ≤ N, M ≤ 100 1 ≤ Ki, Li ≤ 100 1 ≤ Book ID ≤ 10^4 Example Input: 3 3 3 1 2 3 2 3 4 1 5 2 1 2 3 3 4 5 1 1 1 5 Example Output: YES Explanation: Every student has unread books available in the second library (4 for student 1, 1 and 5 for student 2, and 4 for student 3). Therefore, the output is \\"YES\\".","solution":"def can_borrow_unread_book_for_every_student(N, M, students_books, libraries_books): # Convert list of books for each student to set for easy lookups students_books_set = [set(books[1:]) for books in students_books] # Convert list of books for each library to set libraries_books_set = [set(books[1:]) for books in libraries_books] for library_books in libraries_books_set: all_students_can_borrow = True for student_books in students_books_set: # Find unread books (books in library but not read by student) unread_books = library_books - student_books if not unread_books: # No unread book for this student in this library all_students_can_borrow = False break if all_students_can_borrow: return \\"YES\\" return \\"NO\\""},{"question":"As an enthusiastic collector, Alex has a collection of n vintage stamps. Each stamp in the collection has a unique value. As part of an upcoming exhibition, Alex wants to organize the stamps into k thematic groups such that the most valuable stamp in each group determines its overall value. The goal is to maximize the sum of the values of the most valuable stamps in each group. However, there’s a restriction: no group can have fewer than two stamps. Given the values of the vintage stamps, determine the maximum possible sum of the values of the most valuable stamps in each of the k groups. Input The first line of the input contains two integers n (2 ≤ n ≤ 10^5) and k (1 ≤ k ≤ ⌊n/2⌋), which denote the number of stamps and the number of groups, respectively. The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9), which represent the values of the stamps. Output Output a single integer, the maximum possible sum of the values of the most valuable stamps in each group. If it is impossible to form k groups such that each group has at least two stamps, output -1. Examples Input 7 3 4 1 7 3 2 6 5 Output 18 Input 4 2 1 2 3 4 Output 7 Input 5 3 1 3 5 7 9 Output -1 Note In the first sample, one possible grouping is: [4, 1], [7, 3, 2], [6, 5], where the most valuable stamps are 4, 7, and 6, summing up to 17. In the second sample, one possible grouping is: [1, 2], [3, 4], where the most valuable stamps are 2 and 4, summing up to 6. In the third sample, it is impossible to form 3 groups such that each group has at least two stamps. Therefore, the output is -1.","solution":"def max_sum_of_most_valuable_stamps(n, k, values): This function calculates the maximum possible sum of the values of the most valuable stamps in each of the k groups. if n < 2 * k: return -1 values.sort(reverse=True) most_valuable = sum(values[:k]) return most_valuable"},{"question":"Write a program that counts the number of vowels (a, e, i, o, u) in a given text. Input A text string containing letters, spaces, and punctuation marks. The number of characters in the text does not exceed 500. Output Print the number of vowels in the text. Example Input Hello, How are you? Output 7","solution":"def count_vowels(text): Returns the number of vowels (a, e, i, o, u) in the given text. vowels = \'aeiouAEIOU\' return sum(1 for char in text if char in vowels) # Example function call text = \\"Hello, How are you?\\" print(count_vowels(text)) # Output: 7"},{"question":"You are given a list of strings s0, s1, ..., sn - 1. For each string, determine whether it is a palindrome. A palindrome is a string that reads the same backward as forward. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of strings. Each of the next n lines contains a string si, which consists of lowercase and uppercase English letters and has length between 1 and 1000. Output Print n lines, each containing \\"Yes\\" if the corresponding string is a palindrome and \\"No\\" otherwise. Examples Input 3 madam hello RaceCar Output Yes No Yes Input 2 level Algorithm Output Yes No","solution":"def is_palindrome(strings): Given a list of strings, returns a list of \\"Yes\\" or \\"No\\" depending on whether each string is a palindrome. results = [] for s in strings: if s.lower() == s.lower()[::-1]: # Convert to lowercase for case-insensitivity and check palindrome results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Rainwater Harvesting You are given a list of non-negative integers representing the elevation map where the width of each bar is 1. Each integer corresponds to the height of a bar at that position in the map. The task is to determine the amount of rainwater that can be trapped after it rains. The water trapped at any given index is defined by the shorter of the two heights on either side of the index (the nearest higher bars) minus the height of the current bar. Input The input consists of a single line of space-separated non-negative integers. h_1 h_2 dots h_n The given integers h_i (0 leq h_i leq 10^6) represent the heights of the bars in the elevation map. Assume that the list will contain at least one element and at most 10^5 elements. Output Print an integer that represents the total amount of trapped rainwater. Sample Input 1 0 1 0 2 1 0 1 3 2 1 2 1 Sample Output 1 6 Sample Input 2 4 2 0 3 2 5 Sample Output 2 9 Explanation: In Sample Input 1, the elevation map [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] allows for 6 units of rainwater to be trapped. In Sample Input 2, the elevation map [4, 2, 0, 3, 2, 5] allows for 9 units of rainwater to be trapped. Example Input 0 1 0 2 1 0 1 3 2 1 2 1 Output 6","solution":"def trap_rainwater(heights): Calculates the amount of rainwater that can be trapped given the heights of bars. Args: heights (List[int]): List of non-negative integers representing the elevation map. Returns: int: Total units of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n trapped_water = 0 # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water # Example Usage # sample_input = list(map(int, \\"0 1 0 2 1 0 1 3 2 1 2 1\\".split())) # print(trap_rainwater(sample_input)) # Output should be 6"},{"question":"You are given a number n. Print a right-angled triangle of n height using the \\"#\\" character, with edges parallel to the lines of the input matrix. Input The only line of input contains an integer n (1 ≤ n ≤ 50). Output Output the described pattern. Examples Input 4 Output # # Input 5 Output # # #","solution":"def generate_triangle(n): Returns a right-angled triangle of height n using \'#\' characters. result = [] for i in range(1, n + 1): line = \' \' * (n - i) + \'#\' * i result.append(line) return result"},{"question":"The famous annual \\"Strategy Game Tournament\\" is underway. Each match in the tournament consists of two players and lasts for a fixed period. At the end of each match, depending on the strategies chosen, each player can win, lose, or draw. Players accumulate points based on their results: - Win: +3 points - Draw: +1 point - Lose: 0 points You have been tasked with writing a program that helps keep track of the total score for each player throughout the tournament. For each match in the tournament, your program will receive the player identifiers and the outcome of the match. The player identifiers are strings of letters and digits, and the outcomes are given as \'win\' for the first player, \'lose\' for the second player, and \'draw\' for both players. Your program should then output the current total score of each player in alphabetical order of player identifiers. Input: - The first line contains an integer n (1 ≤ n ≤ 10,000), the number of matches. - The next n lines each consist of three strings: player1, player2, and result (either \'win\', \'lose\', or \'draw\'). Output: - For each match, the program should output the total scores of all players involved in the tournament so far, sorted in alphabetical order of player identifiers. Example: Input: 4 Alice Bob win Bob Charlie lose Alice Charlie draw Charlie Bob draw Output: Alice 3 Bob 0 Charlie 0 Alice 3 Bob 0 Charlie 3 Alice 4 Bob 0 Charlie 4 Alice 4 Bob 1 Charlie 5 Note: - After the first match, Alice wins against Bob. So Alice gets 3 points and Bob gets 0 points. - After the second match, Bob wins against Charlie. So Bob gets 3 points and Charlie gets 0 points. - After the third match, Alice draws with Charlie. Both get 1 additional point. - After the fourth match, Charlie draws with Bob. Both get 1 additional point.","solution":"def update_scores(n, matches): Updates and prints the scores of players after each match. Parameters: n (int): Number of matches matches (list): List of tuples, each containing (player1, player2, result) scores = {} for match in matches: player1, player2, result = match if player1 not in scores: scores[player1] = 0 if player2 not in scores: scores[player2] = 0 if result == \'win\': scores[player1] += 3 elif result == \'lose\': scores[player2] += 3 elif result == \'draw\': scores[player1] += 1 scores[player2] += 1 for player in sorted(scores.keys()): print(f\\"{player} {scores[player]}\\")"},{"question":"A robotics competition is being organized, and you are responsible for assigning robot tasks. Each robot is assigned a task with a specific start and end time. Since robots cannot perform more than one task at a time, you need to determine if a given set of tasks for a robot overlap or not. Write a program to check if there is any overlapping task for a robot. Input format: The input starts with a number, n, denoting the number of tasks assigned to the robot. Each of the next n lines contains the start and end time of the tasks in the \\"HH:MM-HH:MM\\" format. Output format: For each case, print \\"Overlap detected!\\" if any tasks overlap, otherwise print \\"No overlap!\\". Constraints: 1 ≤ n ≤ 100 Time will be provided in \\"HH:MM\\" format. The end time will always be after the start time. Example Input: 3 09:00-10:30 10:20-11:00 11:30-12:00 Example Output: Overlap detected! SAMPLE INPUT 2 08:00-09:30 09:30-10:30 SAMPLE OUTPUT No overlap!","solution":"def check_overlap(tasks): Check if any tasks overlap. Args: tasks (list of tuples): Each tuple contains start and end time of a task in \\"HH:MM-HH:MM\\" format. Returns: str: \\"Overlap detected!\\" if any tasks overlap, otherwise \\"No overlap!\\". # Convert task times to list of tuples containing start and end times in minutes format task_times = [] for task in tasks: start, end = task.split(\'-\') start_hour, start_minute = map(int, start.split(\':\')) end_hour, end_minute = map(int, end.split(\':\')) start_time_in_minutes = start_hour * 60 + start_minute end_time_in_minutes = end_hour * 60 + end_minute task_times.append((start_time_in_minutes, end_time_in_minutes)) # Sort tasks based on start time task_times.sort() # Check if there is any overlap for i in range(1, len(task_times)): if task_times[i][0] < task_times[i-1][1]: return \\"Overlap detected!\\" return \\"No overlap!\\" def parse_input(input_str): Parses the input string into tasks. Args: input_str (str): Multi-line input string. Returns: list of str: List of tasks in \\"HH:MM-HH:MM\\" format. lines = input_str.strip().split(\'n\') n = int(lines[0]) tasks = lines[1:n+1] return tasks def main(input_str): tasks = parse_input(input_str) return check_overlap(tasks)"},{"question":"In Byteland, a magical land of bytes and bits, a new type of tree called a \\"BitTree\\" is being studied. A BitTree is a binary tree that follows a particular set of rules with respect to the values of its nodes. The properties of a BitTree are: 1. Each node has a distinct integer value. 2. For any given node with value `V`, all values in its left subtree are less than `V`, and all values in its right subtree are greater than `V`. Given the structure of a BitTree, you need to find the level of a node with a specific value `Q`. The root node of the tree is considered to be at level 1, its children at level 2, and so on. You are asked to implement a function that, given the number of nodes `N` in the tree and an array of `N` values which represent the node values inserted in the order they are given, returns the level of the node with value `Q`. Input The first line of the input file contains an integer `T`, denoting the number of test cases. For each test case, the first line contains two integers, `N` (the number of nodes) and `Q` (the query value). The second line contains `N` distinct integers, representing the values of nodes inserted in sequence. Output For each test case, output the level (1-indexed) of the node with value `Q`. If the value `Q` is not present in the tree, output `-1`. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ Value of each node ≤ 1000000 1 ≤ Q ≤ 1000000 Example Input: 2 5 3 10 5 3 7 15 3 10 5 15 20 10 Output: 3 2 Explanation: In the first test case, the tree is structured as follows: ``` 10 / 5 15 / 3 7 ``` The value 3 is at level 3. In the second test case, the tree is structured as follows: ``` 5 15 20 / 10 ``` The value 10 is at level 2.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root def find_level(root, value, level=1): if root is None: return -1 if root.value == value: return level if value < root.value: return find_level(root.left, value, level + 1) else: return find_level(root.right, value, level + 1) def find_levels(T, test_cases): results = [] for i in range(T): N, Q = test_cases[i][\'NQ\'] values = test_cases[i][\'values\'] root = None for value in values: root = insert(root, value) level = find_level(root, Q) results.append(level) return results"},{"question":"John received a sequence of N positive integers, and he wants to know if he can modify exactly one element of the sequence to make the sequence strictly increasing. A sequence is strictly increasing if a[i] < a[i+1] for all 1 ≤ i < N. Write a function that determines if it is possible to make the sequence strictly increasing by modifying exactly one element. Constraints * 2 leq N leq 100000 * 1 leq a[i] leq 10^9 Input Input is given from Standard Input in the following format: N a[0] a[1] a[2] ... a[N-1] Output Print `YES` if you can modify exactly one element to make the sequence strictly increasing, otherwise print `NO`. Examples Input 5 1 3 2 5 7 Output YES Input 4 4 5 3 2 Output NO Input 3 10 9 10 Output YES","solution":"def can_be_strictly_increasing(N, sequence): Determines if it is possible to make the sequence strictly increasing by modifying exactly one element. Parameters: N (int): Number of elements in the sequence. sequence (list): List of N positive integers. Returns: str: \\"YES\\" if it\'s possible to modify exactly one element to make the sequence strictly increasing, otherwise \\"NO\\". def is_strictly_increasing(seq): return all(seq[i] < seq[i + 1] for i in range(len(seq) - 1)) # Check if the sequence is already strictly increasing if is_strictly_increasing(sequence): return \\"YES\\" # Find the point of conflict conflicts = 0 for i in range(1, N): if sequence[i] <= sequence[i - 1]: conflicts += 1 if conflicts > 1: return \\"NO\\" # Try to fix the conflict by modifying exactly one element for i in range(1, N): if sequence[i] <= sequence[i - 1]: original = sequence[i] sequence[i] = sequence[i - 1] + 1 if is_strictly_increasing(sequence): return \\"YES\\" sequence[i] = original sequence[i - 1] = sequence[i] - 1 if is_strictly_increasing(sequence): return \\"YES\\" return \\"NO\\""},{"question":"You are working as a software developer for an e-commerce company. One day, while debugging the system during a heavy sale season, you notice that the discount calculation method is causing discrepancies in final prices. To debug this method, you decide to write a function that identifies and returns the maximum discount applied to any item in the transaction history. The discount is calculated as the difference between the original price and the discounted price. You are given the transaction history in the form of a list of tuples, where each tuple contains three elements: item name (string), original price (float), and discounted price (float). Your task is to find the maximum discount applied and return it. Input: The first line contains the total number of test cases T. For each test case, the first line contains an integer N, the number of items in the transaction history. The next N lines each contain a string and two floats representing the item name, original price, and discounted price, respectively. Output: For each test case, output a single float representing the maximum discount applied to any item, rounded to two decimal places. Example: Input: 2 3 laptop 1000 850 phone 500 450 headphones 150 120 2 tablet 300 250 monitor 200 150 Output: 150.00 50.00","solution":"def max_discount(transaction_data): max_discounts = [] current_index = 0 # Read number of test cases T = int(transaction_data[current_index]) current_index += 1 for _ in range(T): # Read number of items in this test case N = int(transaction_data[current_index]) current_index += 1 max_discount_in_case = 0.0 for _ in range(N): item_name, original_price, discounted_price = transaction_data[current_index].split() original_price, discounted_price = float(original_price), float(discounted_price) current_discount = original_price - discounted_price if current_discount > max_discount_in_case: max_discount_in_case = current_discount current_index += 1 max_discounts.append(max_discount_in_case) return [round(discount, 2) for discount in max_discounts] # Example usage transaction_data = [ \\"2\\", \\"3\\", \\"laptop 1000 850\\", \\"phone 500 450\\", \\"headphones 150 120\\", \\"2\\", \\"tablet 300 250\\", \\"monitor 200 150\\" ] print(max_discount(transaction_data)) # Output should be: [150.00, 50.00]"},{"question":"Chris is organizing a coding competition and has n participants. Each participant is assigned a unique rating which is an integer. To make the competition fairer, Chris wants to create teams of two participants such that the absolute difference in their ratings is minimized. Given the ratings of the participants, can you help Chris find the minimum possible absolute difference in ratings between any two participants in the competition? Input The first line of the input contains a single integer n (2 ≤ n ≤ 100,000) — the number of participants. The second line contains n integers, where the i-th integer represents the rating of the i-th participant (1 ≤ rating_i ≤ 10^9). Output Print a single integer — the minimum possible absolute difference between the ratings of any two participants. Examples Input 5 1 5 3 19 18 Output 1 Input 6 10 20 30 40 50 60 Output 10 Input 3 5 1 9 Output 4","solution":"def min_abs_difference_in_ratings(n, ratings): Returns the minimum possible absolute difference in ratings between any two participants. ratings.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, ratings[i] - ratings[i - 1]) return min_diff"},{"question":"Maria is organizing a marathon event, and she needs to ensure safety and efficiency along the marathon route. The marathon route is represented as a straight line with a starting point at position 0 and ending at position `d`. There are `n` checkpoints along the route, each at a fixed position `pi`. Maria wants to place a certain number of water stations along the route to ensure that no runner is more than `m` units away from a water station at any point along the marathon route. Maria must decide the minimum number of water stations to place and their positions to cover the entire distance while minimizing redundancy. Input The first line contains two integers `d` (1 ≤ `d` ≤ 10^9) — the length of the marathon route, and `n` (0 ≤ `n` ≤ 10^5) — the number of checkpoints. The second line contains `n` integers, each `pi` (0 ≤ `pi` ≤ `d`) representing the position of a checkpoint. The checkpoints are given in non-decreasing order. The third line contains a single integer `m` (1 ≤ `m` ≤ `d`) — the maximum distance a runner should be from the nearest water station. Output Output the minimum number of water stations required and the positions where they should be placed. Example Input 20 5 2 5 8 12 17 4 Output 6 0 4 8 12 16 20 Explanation In the marathon of length 20, we have 5 checkpoints at positions 2, 5, 8, 12, and 17. The maximum distance any runner should be from a water station is 4 units. Therefore, the optimal positions for the water stations are at 0, 4, 8, 12, 16, and 20. This ensures that the maximum distance between any two consecutive water stations is 4 or less, and every checkpoint is within 4 units of a water station.","solution":"def min_water_stations(d, n, checkpoints, m): Determine the minimum number of water stations and their positions Parameters: d (int): Length of the marathon route n (int): Number of checkpoints checkpoints (list[int]): List of positions of checkpoints m (int): Maximum distance a runner should be from a water station Returns: tuple[int, list[int]]: Minimum number of water stations and their positions positions = [] # Place water stations at regular intervals of `m` along the route for i in range(0, d + m, m): if i <= d: positions.append(i) else: break return len(positions), positions"},{"question":"A digital library system keeps records of books being borrowed. Each book is associated with a unique ID number, and for simplicity, the library has decided to categorize books by their ID number based on the sum of their digits. Your task is to create a program that categorizes and lists IDs of books that have been borrowed based on the sum of their digits. The sum of digits of any ID will be in the range from 0 to 100 (as book IDs are integers and can be very large). Input A sequence of multiple datasets is given as input. Each dataset starts with an integer k (1 ≤ k ≤ 1000), which represents the number of book IDs borrowed. The next k lines contain the borrowed book IDs (0 ≤ bookID < 10^18). The input is terminated by a single zero. Output For each dataset, list the borrowed book IDs categorized by the sum of their digits. For each sum, provide the list of IDs whose sum of digits equals the given sum, ordered in ascending order of their appearance. Example Input 5 123 456 789 101112 131415 3 111111 123456 654321 0 Output Sum 6: 123 Sum 15: 456 Sum 24: 789 101112 131415 Sum 6: 111111 Sum 21: 123456 Sum 24: 654321","solution":"def sum_of_digits(n): Returns the sum of the digits of the given number n. return sum(int(digit) for digit in str(n)) def categorize_books_by_digit_sum(datasets): Categorizes book IDs by the sum of their digits. Args: datasets (list of list): A list where each element is a list representing a dataset of book IDs. Returns: dict: A dictionary where keys are sums of digits and values are lists of book IDs. result = [] for dataset in datasets: k = dataset[0] book_ids = dataset[1:] categorized = {} for book_id in book_ids: sum_digits = sum_of_digits(book_id) if sum_digits not in categorized: categorized[sum_digits] = [] categorized[sum_digits].append(book_id) result.append(categorized) return result"},{"question":"Monica is organizing a treasure hunt for her friends. She has a grid of size `n x n` where each cell contains some gold coins. Monica wants to place her friends such that they collect the maximum amount of gold from the grid. However, there is a rule: No two friends can be placed in the same row or column. Monica wants to know the maximum amount of gold that can be collected by optimally placing her friends. Input Format: - n: Size of the grid (number of rows and columns) - A 2D array of integers of size `n x n` where `A[i][j]` denotes the number of gold coins in the cell at row `i` and column `j`. Output Format: Single integer representing the maximum amount of gold that can be collected. Constraints: 1 ≤ n ≤ 100 1 ≤ A[i][j] ≤ 1000 SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 15 Explanation: To collect the maximum amount of gold, Monica can place her friends in the following cells: - (0,2): 3 gold coins - (1,1): 5 gold coins - (2,0): 7 gold coins Thus, the total gold collected is 3 + 5 + 7 = 15.","solution":"from itertools import permutations def max_gold(n, grid): Given an n x n grid filled with gold coins, find the maximum number of gold coins that can be collected by placing friends such that no two friends are in the same row or column. def calculate_gold(permutation): return sum(grid[i][permutation[i]] for i in range(n)) max_gold_collected = 0 for permutation in permutations(range(n)): max_gold_collected = max(max_gold_collected, calculate_gold(permutation)) return max_gold_collected"},{"question":"You are given a grid with n rows and m columns. You need to start at the top-left cell (1, 1) and reach the bottom-right cell (n, m). You can move right or down in each step. Some cells in the grid have traps. If you step on a trap cell, you must navigate to one of the four adjacent cells (up, down, left, right) immediately, in the next step. You need to calculate the minimum number of steps required to reach the bottom-right cell (n, m) from the top-left cell (1, 1). If it\'s impossible to reach the bottom-right cell, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each that denote the grid. Each character is one of the following: \'.\' - an empty cell where you can move freely. \'T\' - a trap cell that forces you to immediately move to an adjacent cell, but does not block the path. \'#\' - a blocked cell that cannot be passed through. Output Print one integer — the minimum number of steps required to reach the bottom-right cell (n, m) from the top-left cell (1, 1), or -1 if it is impossible. Example Input 5 5 ..... .#..# ..T.. .#..# ..... Output 8 Note In the given example, you can navigate through the path as follows: 1. Move right to (1, 2) 2. Move right to (1, 3) 3. Move right to (1, 4) 4. Move right to (1, 5) 5. Move down to (2, 5) 6. Move down to (3, 5) 7. Move left to (4, 5) 8. Move down to (5, 5) Total of 8 steps. Note that trap cells do not increase the total step count as they force an immediate subsequent move.","solution":"from collections import deque def min_steps_to_reach_bottom_right(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (n - 1, m - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) if grid[nx][ny] == \'T\': for ddx, ddy in directions: nnx, nny = nx + ddx, ny + ddy if is_valid(nnx, nny) and (nnx, nny) not in visited: visited.add((nnx, nny)) queue.append((nnx, nny, steps + 2)) # \'T\' forces an additional move else: queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are tasked with safe-guarding the treasures in a secure vault. The vault has a state-of-the-art security system supported by a powerful AI. The AI system automatically locks the vault at the end of each day. However, on each day, several security events occur, and each event affects the locking mechanism. * Each event has a timestamp indicating the time of the event. * The events can be classified into two types: `open` and `close`. * An \'open\' event unlocks the vault, while a \'close\' event locks it. * Initially, at the start of each day, the vault is locked. * The AI has a strict policy – if at any point the number of `open` events equals the number of `close` events that occurred since the start of the day, the vault remains locked. Given a list of events for a single day in chronological order, determine if the vault will be locked at the end of the day. Constraints - The input satisfies the following conditions: * 1 ≤ T ≤ 100 – the number of test cases (days). * 1 ≤ E ≤ 10⁶ – the number of events in a single day. * Each event is represented by a timestamp (in seconds) followed by a space and the event type (`open` or `close`). Input - The first line gives the number of test cases T. - Each test case starts with a line containing the number of events E. - Following are E lines for each event: each containing a timestamp and the type of event (`open` or `close`). Output - Print `YES` if the vault will be locked at the end of the day. - Print `NO` if the vault will not be locked at the end of the day. Example Input ``` 3 5 1 open 2 close 3 open 4 close 5 open 6 1 open 2 close 3 open 4 close 5 open 6 close 3 1 open 2 close 3 open ``` Output ``` NO YES NO ``` Explanation - In the first test case, the vault is not locked at the end because there are 3 `open` events and 2 `close` events. - In the second test case, the vault is locked at the end because the number of `open` events equals the number of `close` events. - In the third test case, the vault is not locked at the end because there are 2 `open` events and 1 `close` event.","solution":"def is_vault_locked(events): Determines if the vault will be locked at the end of the day given a list of events. Each event is a tuple (timestamp, event_type) where event_type is either \'open\' or \'close\'. open_count = 0 close_count = 0 for _, event in events: if event == \'open\': open_count += 1 elif event == \'close\': close_count += 1 return \'YES\' if open_count == close_count else \'NO\' def process_test_cases(test_cases): results = [] for events in test_cases: results.append(is_vault_locked(events)) return results def main(input_data): lines = input_data.split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): E = int(lines[index]) events = [] for i in range(1, E + 1): timestamp, event_type = lines[index + i].split() events.append((int(timestamp), event_type)) test_cases.append(events) index += E + 1 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a list of integers where each integer represents the height of a building. Sherlock has received information about a series of buildings in a city, and he needs to determine the number of buildings that have a direct view of the sunset. Buildings are considered to have a direct view if there are no taller buildings to their right blocking the view. The buildings to the right are higher in index. Write a function that takes in a list of integers and returns the number of buildings with a direct view of the sunset. The sunset view is always considered to be towards the right end of the list. Constraints and Example: Input: [4, 2, 3, 1] [1, 2, 3, 4] [4, 4, 4, 4] [2, 3, 4, 1, 2, 1] Output: 3 1 1 3 Explanation: For the 1st test case, the buildings with heights [4, 3, 1] have a direct view of the sunset as there are no taller buildings to their right blocking the view. For the 2nd test case, only the last building with height 4 has a direct view. For the 3rd test case, all buildings have the same height but only the last one has a direct view as there are no buildings to the right. For the 4th test case, the sequence [4, 2, 1] have a direct view because they are not obstructed by any taller buildings to their right.","solution":"def count_buildings_with_sunset_view(buildings): Returns the number of buildings with a direct view of the sunset. Parameters: buildings (list): A list of integers where each integer represents the height of a building. Returns: int: Number of buildings with a direct view of the sunset. if not buildings: return 0 count = 0 max_height_from_right = 0 for height in reversed(buildings): if height > max_height_from_right: count += 1 max_height_from_right = height return count"},{"question":"You are given an array of positive integers along with a target sum. Determine whether there exists a pair of distinct elements in the array that sum up to the target value. If such a pair exists, return a boolean value `True`. Otherwise, return `False`. Input: An integer, T, representing the number of test cases, followed by T test cases. Each test case consists of: - An integer, n, representing the number of elements in the array. - An array of n positive integers. - An integer, target, representing the target sum. Output: For each test case, output `True` if there exists a pair of distinct elements in the array that sum up to the target value, otherwise output `False`. Constraints: 1 <= T <= 1000 2 <= n <= 100000 1 <= array[i] <= 10^9 Sample Input: 3 5 1 2 3 9 7 8 4 1 2 4 4 8 3 3 5 6 10 Sample Output: True True False Explanation: In the first test case, the pair (1, 7) sums up to 8. In the second test case, the pair (4, 4) sums up to 8. In the third test case, no pairs sum up to 10.","solution":"def has_pair_with_sum(arr, target): Determine if there are two distinct elements in `arr` that sum up to `target`. Parameters: arr (list): List of positive integers. target (int): Target sum. Returns: bool: True if there exists a pair of distinct elements that sum up to `target`. False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False def process_test_cases(T, test_cases): Process multiple test cases to check for pairs summing to a target value. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple consists of (n, arr, target) Returns: list of bool: List of results for each test case. results = [] for n, arr, target in test_cases: results.append(has_pair_with_sum(arr, target)) return results"},{"question":"You are working on a project where you need to analyze different document versions to help track changes and ensure consistency. The project involves analyzing strings that represent different versions of the documents. Two strings, `a` and `b`, are given. We say that `a` is a **subsequence** of `b` if you can delete some (or no) characters from `b` to get `a`. You need to determine the length of the longest string that is a subsequence of both `a` and `b`. Input The input consists of two lines: 1. A single string `a` (1 ≤ |a| ≤ 1000), the first document version. 2. A single string `b` (1 ≤ |b| ≤ 1000), the second document version. Both strings contain only lowercase English letters. Output Print the length of the longest string that is a subsequence of both `a` and `b`. Examples Input abcde ace Output 3 Input abc abc Output 3 Input abc def Output 0 Note In the first sample, \\"ace\\" is the longest common subsequence of \\"abcde\\" and \\"ace\\", its length is 3. In the second sample, the longest common subsequence of \\"abc\\" and \\"abc\\" is \\"abc\\" itself, so its length is 3. In the third sample, there is no common subsequence, hence the length is 0.","solution":"def longest_common_subsequence(a, b): Determines the length of the longest string that is a subsequence of both a and b. m, n = len(a), len(b) # Table to store lengths of longest common subsequences dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the dp table for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"In a fantasy kingdom of Agriton, there are n cities connected by m roads. Each road has a specific travel time denoted in minutes. The kingdom\'s roads are such that you can travel across different cities based on the travel time associated with each road. The King of Agriton wants to enhance the roads such that the travel time between any pair of cities should be within a maximum limit of k minutes to promote trade and communication efficiently. Given n cities and m roads, find out if it’s possible to ensure that the travel time between any two cities does not exceed k minutes. If it is possible, output \\"YES\\" and one way to assign the travel times to the roads. If it is not possible, output \\"NO\\". Input The first line of the input contains three integers n, m, and k (2 ≤ n ≤ 50, 1 ≤ m ≤ 100, 1 ≤ k ≤ 500) — the number of cities, the number of roads, and the maximum allowable travel time between any pair of cities. Each of the next m lines contains three integers u, v, t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 1000) indicating that there is a road between city u and city v with a travel time of t minutes. Output If it\'s possible to ensure that the travel time between any two cities does not exceed k minutes, output \\"YES\\" on the first line, and then m lines that show the modified travel times for each road in the format \\"u v t\' \\", where t\' is the new travel time which is less than or equal to k. If it\'s not possible, output \\"NO\\". Examples Input 4 4 10 1 2 8 2 3 12 3 4 15 4 1 20 Output YES 1 2 8 2 3 10 3 4 10 4 1 10 Input 3 3 5 1 2 6 2 3 7 3 1 8 Output NO Note In the first example, we reduce the travel time on the roads where necessary to ensure that all travel times are within the maximum limit of 10 minutes. In the second example, it\'s impossible to reduce the travel times to fit within the limit of 5 minutes, hence the output is \\"NO\\".","solution":"def can_ensure_max_travel_time(n, m, k, roads): Determines if it\'s possible to ensure the travel time between any two cities does not exceed k minutes. Returns a tuple (\\"YES\\", modified_roads) or (\\"NO\\", []). modified_roads = [] for u, v, t in roads: if t <= k: modified_roads.append((u, v, t)) else: modified_roads.append((u, v, k)) # It\'s always possible to set road times <= k since we are allowed to reduce any t > k to k return \\"YES\\", modified_roads"},{"question":"Alice is a voracious reader and a speed typing enthusiast. One day, while practicing her typing skills, she decided to create a keyboard simulation game. In this game, a string appears on the screen, and she has to type it out correctly as fast as possible using only the given keystrokes. However, there is a catch: her keyboard is slightly malfunctioning, and certain keys can sometimes input an extra character before or after the intended character (but not both). Your task is to write a program that helps Alice determine if a given input string can be transformed into the target string by adding at most one extra character for each key pressed. Input The first line contains the string `target`, the string that Alice wants to type (1 ≤ length of target ≤ 200). The second line contains the string `typed`, the string that Alice has actually typed (1 ≤ length of typed ≤ 201). Output Print `YES` if the `typed` string can be transformed into the `target` string by possibly adding one extra character to each key press, otherwise print `NO`. Examples Input ``` hello heelllo ``` Output ``` YES ``` Input ``` world worlld ``` Output ``` YES ``` Input ``` typing typpping ``` Output ``` NO ``` Input ``` game gaem ``` Output ``` NO ``` Note In the first example, the extra \'e\' and \'l\' in `typed` can be ignored to match `target`. In the second example, the extra \'l\' in `typed` can be ignored to match `target`. In the third example, there are too many extra \'p\' characters in `typed` to form the `target`. In the fourth example, the character order mismatch makes it impossible to match `target` even with the allowed extra character.","solution":"def can_transform(target, typed): Determines if the typed string can be transformed into the target string by possibly adding one extra character to each key press. Parameters: target (str): The string that Alice wants to type. typed (str): The string that Alice has actually typed. Returns: str: \\"YES\\" if the typed string can be transformed into the target string, \\"NO\\" otherwise. i, j = 0, 0 while i < len(target) and j < len(typed): if target[i] == typed[j]: i += 1 j += 1 elif j + 1 < len(typed) and typed[j + 1] == target[i]: j += 1 # Skip the extra character else: return \\"NO\\" if i == len(target): return \\"YES\\" else: return \\"NO\\""},{"question":"Implement a function that takes a string representing a mathematical expression and evaluates its result. The string can contain integers, the operators \'+\', \'-\', \'*\', \'/\', \'(\', and \')\', and spaces. Your task is to return the value of the expression accurately, considering operator precedence and parentheses. The valid operators in the expression are as follows: - Addition (\'+\') - Subtraction (\'-\') - Multiplication (\'*\') - Division (\'/\') - Parentheses (\'(\' and \')\') The function should handle the following: - Whitespaces between characters should be ignored. - The expression will always be valid and non-empty. - Division by zero will not occur. - The integer division should truncate towards zero. Input A single string s representing a valid mathematical expression. Output An integer result of evaluating the expression. Example Input \\"3 + 2 * 2\\" Output 7 Input \\" 3/2 \\" Output 1 Input \\" (1+(4+5+2)-3)+(6+8) \\" Output 23 Note In the first example, 2 * 2 is computed first, which gives 4. Then 3 + 4 equals 7. In the second example, 3 / 2 represents integer division, which results in 1 due to truncating towards zero. In the third example, expressions within parentheses are evaluated first. Therefore, (4+5+2) evaluates to 11, (1+11-3) evaluates to 9, and (9+6+8) evaluates to 23.","solution":"def evaluate_expression(s): Evaluates a string mathematical expression containing integer numbers and operators +, -, *, /, (, and ). def calc(op1, op2, operator): if operator == \'+\': return op1 + op2 elif operator == \'-\': return op1 - op2 elif operator == \'*\': return op1 * op2 elif operator == \'/\': return int(op1 / op2) # Python division truncates towards zero def helper(s, index): stack = [] num = 0 sign = \'+\' while index < len(s): char = s[index] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': num, index = helper(s, index + 1) if (not char.isdigit() and char != \' \') or index == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': stack[-1] = int(stack[-1] / num) sign = char num = 0 if char == \')\': return sum(stack), index index += 1 return sum(stack) return helper(s.replace(\' \', \'\'), 0)"},{"question":"Alice is a software engineer who loves playing with strings. She has a string `s` consisting of lowercase Latin letters. Alice wants to find the length of the longest substring of `s` that contains at most `k` distinct characters. For example, if `s = \\"eceba\\"` and `k = 2`, the longest substring with at most 2 distinct characters is `\\"ece\\"`, so the output should be `3`. Write a function `longest_substring` that determines the length of the longest substring of `s` that contains at most `k` distinct characters. Input - The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. - The first line of each test case contains an integer `k` (1 ≤ k ≤ 26) — the maximum number of distinct characters allowed. - The second line of each test case contains a string `s` (1 ≤ |s| ≤ 100000) consisting of only lowercase Latin letters. Output - For each test case, output a single integer — the length of the longest substring of `s` that contains at most `k` distinct characters. Example Input ``` 3 2 eceba 3 aaabbcc 1 aabbcc ``` Output ``` 3 7 2 ``` Note In the first test case, the longest substring with at most 2 distinct characters is `\\"ece\\"`. In the second test case, the longest substring with at most 3 distinct characters is `\\"aaabbcc\\"`. In the third test case, the longest substring with at most 1 distinct character is `\\"aa\\"`.","solution":"def longest_substring(k, s): from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0 left = 0 char_count = defaultdict(int) max_length = 0 for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length def process_test_cases(test_cases): results = [] for k, s in test_cases: results.append(longest_substring(k, s)) return results"},{"question":"You have been hired by a digital music store to create a program that calculates the total playtime of a user\'s playlist. Each song in the playlist has a duration that is given in minutes and seconds. The program should read the number of songs and the duration of each song, then output the total playlist duration in the format of hours, minutes, and seconds. Input The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), the number of songs in the playlist. The next n lines each contain the duration of a song represented in the format mm:ss, where mm is the number of minutes (0 ≤ mm ≤ 999) and ss is the number of seconds (0 ≤ ss ≤ 59). The end of the input is indicated by a single line with the number 0. Output For each test case, output the total duration of the playlist in the format h:mm:ss, where h is the number of hours, mm is the number of minutes, and ss is the number of seconds. Example Input 3 3:45 4:30 5:15 2 10:15 12:20 0 Output 0:13:30 0:22:35","solution":"def calculate_total_playlist_duration(test_cases): results = [] for case in test_cases: total_seconds = 0 for duration in case: minutes, seconds = map(int, duration.split(\':\')) total_seconds += minutes * 60 + seconds hours = total_seconds // 3600 total_seconds %= 3600 minutes = total_seconds // 60 seconds = total_seconds % 60 results.append(f\\"{hours}:{minutes:02}:{seconds:02}\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') test_cases = [] current_case = [] for line in lines: if line == \'0\': if current_case: test_cases.append(current_case) break elif line.isdigit(): if current_case: test_cases.append(current_case) current_case = [] else: current_case.append(line) return test_cases def main(input_str): test_cases = parse_input(input_str) return calculate_total_playlist_duration(test_cases)"},{"question":"A programmer is designing an automatic alarm system for a building with multiple sensors distributed across different rooms. Each sensor can detect either fire or smoke but not both. Each sensor has a periodic update interval, indicating how often it sends data to the central monitoring system. The programmer needs to simulate the system to determine the earliest time at which the central monitoring system can compile a complete report for the entire building. A complete report is defined as having at least one update from every sensor. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of sensors in the building. The second line contains n integers where the i-th integer ui (1 ≤ ui ≤ 109) represents the update interval of the i-th sensor. Output Print one integer — the earliest time at which the central monitoring system can compile a complete report for the entire building. Examples Input 3 1 2 3 Output 6 Input 4 5 10 15 20 Output 60 Note In the first example, the sensors update at intervals of 1, 2, and 3 seconds. The earliest time when all sensors have updated at least once is the least common multiple (LCM) of 1, 2, and 3, which is 6 seconds. In the second example, the sensors update at intervals of 5, 10, 15, and 20 seconds. The earliest time when all sensors have updated at least once is the LCM of 5, 10, 15, and 20, which is 60 seconds.","solution":"import math from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return abs(a * b) // math.gcd(a, b) def lcm_multiple(numbers): Returns the least common multiple of a list of numbers. return reduce(lcm, numbers) def earliest_report_time(n, update_intervals): Returns the earliest time at which the central monitoring system can compile a complete report for the entire building. Parameters: n (int): Number of sensors update_intervals (list): List of update intervals for the sensors Returns: int: The earliest time for a complete report return lcm_multiple(update_intervals)"},{"question":"Create a program to determine the longest contiguous subarray with a sum that is not more than a given value. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N (the number of elements in the array) and S (the maximum sum for the subarray). - The second line contains N space-separated integers representing the elements of the array. Output For each test case, output the length of the longest contiguous subarray whose sum is less than or equal to S. Constraints - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 1 ≤ array elements ≤ 1000 - 0 ≤ S ≤ 100000 Example Input: 2 5 12 1 2 3 4 5 7 15 1 2 3 4 5 6 7 Output: 4 5 Explanation Case 1: The longest contiguous subarray with sum ≤ 12 is [1, 2, 3, 4], with length 4. Case 2: The longest contiguous subarray with sum ≤ 15 is [1, 2, 3, 4, 5] with length 5.","solution":"def longest_subarray_with_sum_at_most(arr, S): Determine the length of the longest contiguous subarray whose sum is less than or equal to S. Parameters: - arr: List[int] - List of integers representing the array - S: int - The maximum sum for the subarray Returns: - int - Length of the longest contiguous subarray with sum <= S max_length = 0 current_sum = 0 start = 0 for end, value in enumerate(arr): current_sum += value while current_sum > S and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length def process_test_cases(T, test_cases): Process multiple test cases and return their results. Parameters: - T: int - Number of test cases - test_cases: List[Tuple(int, int, List[int])] - List containing the test cases where each test case is represented as a tuple (N, S, arr) Returns: - List[int] - List of results for each test case results = [] for N, S, arr in test_cases: results.append(longest_subarray_with_sum_at_most(arr, S)) return results"},{"question":"A company manages a system that logs various events throughout the day. Each event has a timestamp and a type. The company wants to analyze their log data to find the busiest hour of the day in terms of the number of events. Write a program that takes a list of event timestamps and returns the hour with the maximum number of events. The timestamp format is \\"YYYY-MM-DD HH:MM:SS\\". Assume the log is sorted in ascending order by timestamp and there are no events with the same timestamp. Constraints * 1 ≤ number of events ≤ 10^5 * All timestamps are valid and follow the given format. Input Input is given from Standard Input in the following format: N timestamp_1 timestamp_2 : timestamp_N Output Print the hour (in the format \\"YYYY-MM-DD HH\\") that has the maximum number of events. If multiple hours have the same maximum number of events, print the earliest one. Examples Input 5 2023-07-15 13:45:20 2023-07-15 13:50:01 2023-07-15 14:00:00 2023-07-15 14:30:10 2023-07-15 13:59:59 Output 2023-07-15 13 Input 3 2023-07-15 10:00:00 2023-07-15 11:00:00 2023-07-15 11:05:00 Output 2023-07-15 11","solution":"def find_busiest_hour(logs): from collections import defaultdict hour_count = defaultdict(int) for log in logs: hour = log[:13] # Extracting \\"YYYY-MM-DD HH\\" hour_count[hour] += 1 busiest_hour, max_count = \\"\\", 0 for hour, count in hour_count.items(): if count > max_count or (count == max_count and hour < busiest_hour): busiest_hour = hour max_count = count return busiest_hour def main(): import sys input = sys.stdin.read data = input().splitlines() N = int(data[0]) logs = data[1:] print(find_busiest_hour(logs)) if __name__ == \\"__main__\\": main()"},{"question":"Petya and Masha like dancing, and there is a new dance move they are fond of. Consider an array `a` of length `n`, where each element represents a dance step. Petya created a new dance move, which consists of taking all consecutive subarrays of `a` with exactly 3 elements and summing the elements of each subarray. Masha, on the other hand, prefers dance moves which get the maximum possible sum from these subarrays. Your task is to find the maximum sum of any subarray of length exactly 3 from the given array `a`. Input The first line contains a single integer `n` (3 ≤ n ≤ 100) — the length of the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output Output a single integer, the maximum sum of any subarray of length exactly 3. Examples Input 5 1 2 3 4 5 Output 12 Input 4 9 1 7 3 Output 17 Note In the first example, the subarrays of length exactly 3 are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. The sums are 6, 9, and 12 respectively. The maximum sum is 12. In the second example, the subarrays of length exactly 3 are [9, 1, 7] and [1, 7, 3]. The sums are 17 and 11 respectively. The maximum sum is 17.","solution":"def maximum_sum_of_length_3_subarray(n, a): Returns the maximum sum of any subarray of length exactly 3 from array a. :param n: int, length of the array :param a: list of int, elements of the array :return: int, maximum sum of any subarray of length exactly 3 max_sum = 0 for i in range(n - 2): current_sum = a[i] + a[i+1] + a[i+2] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Devu and Churu are again playing a strategy game. This time, they have a 2D grid with N rows and M columns, where each cell in the grid contains a positive integer value. They have a list of L target values. The game proceeds with the players taking turns to remove a cell that contains one of the target values. The player who cannot make a move loses the game. In addition to the target values, there are K special moves allowed, which can be used to remove a cell in one turn instead of the usual removal rule. A player can make a special move only if their last move was according to the usual removal rule. Given N, M, the grid values, the L target values, K special moves, and who starts the game, determine the outcome of the game. Print \'D\' if Devu wins, otherwise print \'C\'. Input The first line contains two integers N and M denoting the size of the grid. The next N lines contain M integers each, representing the values in the grid. The next line contains an integer L representing the number of target values, followed by L space-separated integers denoting the target values. The following line contains an integer K indicating the number of special moves allowed. The final line contains a character X which is either \'D\' or \'C\' denoting the player who starts the game. Output Output a single character: \'D\' if Devu wins, otherwise \'C\'. Constraints: 1 ≤ N, M ≤ 1000 1 ≤ Grid Value ≤ 10^6 1 ≤ L ≤ 100 1 ≤ Target Value ≤ 10^6 0 ≤ K ≤ 10 X ∈ {\'D\', \'C\'} Example: Input: 3 3 1 2 3 4 1 6 7 8 5 3 1 3 5 1 D Output: D Explanation: Target values are [1, 3, 5]. Grid contains: 1 2 3 4 1 6 7 8 5 Special moves allowed: 1 Game proceeds as follows: Devu starts and removes cell (0, 0) with value 1. Churu removes cell (0, 2) with value 3. Devu uses a special move to remove cell (2, 2) with value 5. Churu cannot make a move and loses the game. Devu wins.","solution":"def determine_winner(N, M, grid, L, targets, K, first_player): # Create a set of target values for O(1) checks target_set = set(targets) # Count the number of cells that have target values target_count = sum(cell in target_set for row in grid for cell in row) # Determine number of turns theoretically turns = target_count + K # The player who will take the \'last\' turn wins. if (turns % 2 == 0 and first_player == \'D\') or (turns % 2 == 1 and first_player == \'C\'): return \'C\' else: return \'D\'"},{"question":"Sara wants to create a special code based on name initials for her new project. The code is formed by concatenating the initials of the first and last names of a given list of names. If the name has a middle name, then the initial of the middle name should be included as well. Additionally, the initials must be in uppercase. If the name does not have a middle name, just the initials of the first and last names are taken. Write a program that reads a list of names and outputs the corresponding codes. INPUT The first line of input contains an integer N, the number of names. The next N lines each contain a name. OUTPUT For each input name, print the generated code. CONSTRAINTS 1 ≤ N ≤ 1000 Each name contains between 2 and 4 words. Each name word is a string of alphabetical characters. SAMPLE INPUT 4 John Doe Anna Maria Smith Peter O\'Brien Jane Eliza Brown SAMPLE OUTPUT JD AMS POB JEB Explanation 1st input is \\"John Doe\\" which has first and last names. The initials are J and D. So, the output is \\"JD\\". 2nd input is \\"Anna Maria Smith\\" which has first, middle, and last names. The initials are A, M, and S. So, the output is \\"AMS\\". 3rd input is \\"Peter O\'Brien\\" which has first and last names. The initials are P and O. So, the output is \\"POB\\". 4th input is \\"Jane Eliza Brown\\" which has first, middle, and last names. The initials are J, E, and B. So, the output is \\"JEB\\".","solution":"def generate_initials(names): Generates initials for a list of names. Args: names (list of str): List of names where each name contains 2 to 4 words. Returns: list of str: List of generated initials. initials_list = [] for name in names: words = name.split() initials = \\"\\".join(word[0].upper() for word in words) initials_list.append(initials) return initials_list"},{"question":"A logistics company is optimizing the scheduling of deliveries for its fleet of trucks. Each truck has a single driver who can work a maximum of k hours in a day. The company needs to deliver packages to n destinations. Each destination i requires ti hours to complete the round trip, including loading and unloading packages. The company wants to ensure that no driver exceeds their maximum working hours while minimizing the number of trucks needed for all deliveries. The trucks can start at any time as long as they do not exceed the working hours limit. Your task is to determine the minimum number of trucks required to complete all the deliveries within the given constraints. Input The first line contains an integer k (1 ≤ k ≤ 108) — maximum working hours for each truck driver in a day. The second line contains an integer n (1 ≤ n ≤ 105) — number of destinations. The third line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ k) — time required for the round trip to each destination. Output Print a single integer — the minimum number of trucks needed to complete all deliveries. Examples Input 10 4 2 3 4 5 Output 2 Input 8 3 4 4 4 Output 2 Input 5 2 3 4 Output 2","solution":"def min_trucks_needed(k, n, times): Determines the minimum number of trucks required to complete all deliveries. Parameters: k (int): Maximum working hours for each truck driver in a day. n (int): Number of destinations. times (list): Time required for the round trip to each destination. Returns: int: Minimum number of trucks needed. # Sort the times in non-decreasing order times.sort() count = 0 i, j = 0, n - 1 while i <= j: # Check if the current longest and shortest trips can be combined if times[i] + times[j] <= k: i += 1 j -= 1 count += 1 return count"},{"question":"You are given a rectangular grid of characters, represented as an array of strings. Each string has the same length and consists of lowercase alphabet letters. You can select cells in the grid to form words. A word must be formed by selecting cells sequentially in four possible directions: right, left, down, and up. You are given a dictionary of valid words. Your task is to find how many distinct words from the dictionary can be formed in the grid. You cannot use the same cell twice in the formation of a word, but you can use any cell to start a word. Cells are connected if they are adjacent horizontally or vertically. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines contain strings of length m, representing the grid. The next line contains a single integer k (1 ≤ k ≤ 10^4), the number of words in the dictionary. The next k lines contain a word each, consisting of lowercase letters. Each word has a length of at most min(10, n * m). Output A single integer, the number of distinct valid words from the dictionary that can be formed in the grid. Examples Input 3 3 abc def ghi 5 abcf abc dehi aef ghi Output 4 Input 2 4 abcd efgh 3 abcd aebc efgh Output 2 Note In the first example, the distinct words \\"abc\\", \\"dehi\\", \\"aef\\", and \\"ghi\\" can be formed in the grid. The word \\"abcf\\" cannot be formed. In the second example, \\"abcd\\" and \\"efgh\\" can be formed, but \\"aebc\\" cannot be formed as it requires jumping non-adjacent cells.","solution":"def find_words_in_grid(n, m, grid, k, words): Find the number of distinct valid words from the dictionary that can be formed in the grid. Parameters: - n: Number of rows in the grid (int) - m: Number of columns in the grid (int) - grid: List of strings representing the grid (list of str) - k: Number of words in the dictionary (int) - words: List of words in the dictionary (list of str) Returns: - Number of distinct valid words from the dictionary that can be formed in the grid (int) # Helper function for DFS search def dfs(x, y, word, index): if index == len(word): return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != word[index] or visited[x][y]: return False visited[x][y] = True result = ( dfs(x + 1, y, word, index + 1) or # down dfs(x - 1, y, word, index + 1) or # up dfs(x, y + 1, word, index + 1) or # right dfs(x, y - 1, word, index + 1) # left ) visited[x][y] = False return result # Find each word in the grid found_words = set() for word in words: if word in found_words: continue found = False for i in range(n): for j in range(m): visited = [[False] * m for _ in range(n)] if dfs(i, j, word, 0): found = True break if found: found_words.add(word) break return len(found_words)"},{"question":"In a school, students are assigned lockers arranged in a line and numbered sequentially from 1 to N. Initially, all lockers are closed. The students perform a series of operations on the lockers. In the i-th operation, every i-th locker is toggled (if it is open, it is closed; if it is closed, it is opened). After the students have finished with the N-th operation, determine the state of each locker. You need to write a program that, given the number of lockers, outputs which lockers are open. INPUT First line contains an integer T, the number of test cases. Each test case contains a single integer N, the number of lockers. OUTPUT For each test case, print the locker numbers that are open in a single line, separated by spaces. CONSTRAINTS 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 1 1 4 9 Explanation For testcase 1: Lockers 1 to 5: 1: open (1^2) 2: closed 3: closed 4: open (2^2) 5: closed For testcase 2: Lockers 1 to 10: 1: open (1^2) 2: closed 3: closed 4: open (2^2) 5: closed 6: closed 7: closed 8: closed 9: open (3^2) 10: closed Lockers that are open are those that are toggled an odd number of times. For a locker to be toggled an odd number of times, it must be checked by all its divisors including itself. This happens if and only if the locker number is a perfect square. Therefore, the lockers that remain open are those whose numbers are perfect squares.","solution":"import math def find_open_lockers(num_lockers): Given the number of lockers, returns the locker numbers that are open after performing the operations. Lockers that are open are the ones that are perfect squares up to num_lockers. open_lockers = [] for i in range(1, int(math.sqrt(num_lockers)) + 1): open_lockers.append(i * i) return open_lockers def process_test_cases(test_cases): Processes multiple test cases and returns a list of results with open lockers for each test case. results = [] for num_lockers in test_cases: open_lockers = find_open_lockers(num_lockers) results.append(\' \'.join(map(str, open_lockers))) return results"},{"question":"You are given a collection of rectangles in a 2D plane. Each rectangle can be described by two points: its bottom-left corner (xi, yi) and its top-right corner (xi\', yi\'). Your task is to determine the maximum number of rectangles that can cover a specific point (p1, p2) at the same time. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of rectangles in the collection. Each of the next n lines contains four integers xi, yi, xi\', yi\' ( -10^9 ≤ xi < xi\' ≤ 10^9, -10^9 ≤ yi < yi\' ≤ 10^9) representing a rectangle. The last line contains two integers p1 and p2 ( -10^9 ≤ p1, p2 ≤ 10^9) which are the coordinates of the specific point. Output Print a single integer — the maximum number of rectangles that cover the point (p1, p2) at the same time. Examples Input 3 1 1 4 4 2 2 5 5 3 3 6 6 3 3 Output 3 Input 2 1 1 3 3 2 2 4 4 0 0 Output 0","solution":"def max_rectangles_covering_point(n, rectangles, p1, p2): Determine the maximum number of rectangles that can cover a specific point (p1, p2) at the same time. Parameters: n (int): Number of rectangles. rectangles (list of tuples): List of rectangles where each is defined by (xi, yi, xi\', yi\'). p1, p2 (int): Coordinates of the specific point. Returns: int: The maximum number of rectangles covering the point (p1, p2) count = 0 for rect in rectangles: xi, yi, xi_prime, yi_prime = rect if xi <= p1 <= xi_prime and yi <= p2 <= yi_prime: count += 1 return count # Example usage: # n = 3 # rectangles = [(1, 1, 4, 4), (2, 2, 5, 5), (3, 3, 6, 6)] # p1, p2 = 3, 3 # print(max_rectangles_covering_point(n, rectangles, p1, p2)) # Output: 3"},{"question":"Alice loves prime numbers and has recently found an interesting property related to them. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alice defines an **exactly half prime** as a number that is prime and exactly half of another prime number. For example, suppose 11 is a prime number and 22 is twice 11. Then, 11 is an exactly half prime of 22. Note that the doubles of known prime numbers may not always be prime themselves. Given a prime number `p`, your task is to find an *exactly half prime* that when doubled is also a prime. If there is no such exactly half prime, print \\"NO\\". Input: - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - The next `t` lines each contain one integer `p` (2 ≤ p ≤ 10^6) — a prime number. Output: - For each test case, print \\"YES\\" and the exactly half prime `q` such that `2*q` is also prime. - If no such `q` exists, print \\"NO\\". Example Input: ``` 3 7 11 13 ``` Output: ``` NO NO YES 11 ``` In the third test case, 11 is an exactly half prime because `13` is a prime and `2 * 11 = 22` (though not prime), indicating presence within the realm of primes close to double `p`. Since there is no strictly defined answer for half primes doubling to another prime, the definition is contextual to known primes.","solution":"from sympy import isprime def find_exactly_half_prime(t, primes): results = [] for p in primes: q = p // 2 if p % 2 == 0 and isprime(q): results.append(f\\"YES {q}\\") else: results.append(\\"NO\\") return results def prime_as_half_of_another_prime(test_cases): t = int(test_cases[0]) primes = [int(x) for x in test_cases[1:]] return find_exactly_half_prime(t, primes)"},{"question":"Emily is managing a warehouse with multiple inventory items. Each item in the warehouse has a unique identifier and a current quantity. She wants to automate some bulk update operations. You are given two types of operations that need to be applied to the warehouse inventory: 1. For a range of items, update each item\'s quantity by a specified amount. 2. For a range of items, set each item\'s quantity to a specified amount. Emily wrote down multiple operations on a piece of paper, and now she needs to apply them in the given order. Help Emily determine the final quantities of the items after all operations are applied. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5). The second line contains n integers: q1, q2, ..., qn (0 ≤ qi ≤ 10^9) — the initial quantities of the items. Next m lines contain operations, each operation has the following format: - If the operation is an update: \\"1 li ri di\\" (1 ≤ li ≤ ri ≤ n, 0 ≤ di ≤ 10^9) - If the operation is a set: \\"2 li ri si\\" (1 ≤ li ≤ ri ≤ n, 0 ≤ si ≤ 10^9) The numbers in the lines are separated by single spaces. Output On a single line print n integers q1, q2, ..., qn — the final quantities of the items. Separate the printed numbers by spaces. Example Input 5 4 10 20 30 40 50 1 1 3 5 2 2 4 15 1 3 5 10 2 1 5 25 Output 25 25 25 25 25 Input 3 2 5 10 15 1 1 2 7 2 1 3 10 Output 10 10 10","solution":"def update_inventory(n, m, quantities, operations): # Apply the operations in the order given for operation in operations: op_type, li, ri, value = operation li -= 1 ri -= 1 if op_type == 1: for i in range(li, ri + 1): quantities[i] += value elif op_type == 2: for i in range(li, ri + 1): quantities[i] = value return quantities def main(n, m, quantities, operations): updated_quantities = update_inventory(n, m, quantities, operations) return \\" \\".join(map(str, updated_quantities)) # Example usage: # n, m = 5, 4 # quantities = [10, 20, 30, 40, 50] # operations = [(1, 1, 3, 5), (2, 2, 4, 15), (1, 3, 5, 10), (2, 1, 5, 25)] # print(main(n, m, quantities, operations)) # Output: 25 25 25 25 25"},{"question":"A school is organizing a picnic and they decided to divide students into groups. They have n students and k groups. The groups should be as balanced as possible while ensuring that each group has at least one student. The balance of the groups is measured by the maximum difference in the number of students between any two groups. Your task is to determine the minimal possible value of this maximum difference. Input The first line contains two integers n and k, separated by a space — the number of students and the number of groups respectively (2 ≤ k ≤ n ≤ 100 000). Output Print one integer — the minimal possible value of the maximum difference in the number of students between any two groups. Examples Input 10 3 Output 1 Input 15 4 Output 1 Input 7 3 Output 1 Input 5 5 Output 0 Note In the first test case, 10 students are divided into 3 groups as evenly as possible. One of the optimal ways to divide is 4, 3, 3 students in the groups. The maximum difference is 1. In the second test case, 15 students are divided into 4 groups as evenly as possible. One of the optimal ways to divide is 4, 4, 4, 3 students in the groups. The maximum difference is 1. In the third test case, 7 students are divided into 3 groups as evenly as possible. One of the optimal ways to divide is 3, 2, 2 students in the groups. The maximum difference is 1. In the fourth test case, each student can be placed into one group, resulting in 1, 1, 1, 1, 1 students in each group, and the maximum difference is 0.","solution":"def minimal_maximum_difference(n, k): This function calculates the minimal possible value of the maximum difference in the number of students between any two groups. Parameters: n (int): Number of students k (int): Number of groups Returns: int: Minimal possible value of the maximum difference # The number of students per group if distributed as evenly as possible base_group_size = n // k # Remaining students after even distribution remaining_students = n % k # If there are remaining students, the maximal difference will be 1 if remaining_students > 0: return 1 else: return 0"},{"question":"Snuke is a software developer working on string manipulation problems. He has a string ( S ) with a length ( N ) (1 ≤ ( N ) ≤ ( 10^5 )). Snuke wants to perform exactly one of the following operations: * Replace exactly one character in the string with any other lowercase English alphabet letter. * Reverse any contiguous substring of the string. His goal is to determine whether it\'s possible to transform string ( S ) into a palindrome by performing exactly one of these operations. A string is considered a palindrome if it reads the same backward as forward. Input Input is given from Standard Input in the following format: ( S ) Output Print \\"YES\\" if Snuke can transform the string ( S ) into a palindrome through exactly one of the allowed operations. Otherwise, print \\"NO\\". Examples Input abca Output YES Input abcdef Output NO Input madam Output NO","solution":"def can_transform_to_palindrome(S): Determines if the given string S can be transformed into a palindrome by performing exactly one allowed operation: replacing one character or reversing one contiguous substring. Parameters: S (str): The input string Returns: str: \\"YES\\" if it\'s possible to transform S into a palindrome, else \\"NO\\" n = len(S) # Helper function to check if a string is a palindrome def is_palindrome(s): return s == s[::-1] # Check if S is already a palindrome if is_palindrome(S): return \\"NO\\" # Check if replacing one character can make it a palindrome mismatch_count = 0 for i in range(n // 2): if S[i] != S[-(i + 1)]: mismatch_count += 1 if mismatch_count == 1: return \\"YES\\" # Check if reversing one contiguous substring can make it a palindrome if n >= 3: for i in range(n): if S[i] != S[-(i + 1)]: S_reversed_segment = S[:i] + S[i:][::-1] if is_palindrome(S_reversed_segment): return \\"YES\\" return \\"NO\\""},{"question":"Problem Statement You are given a square grid of size `n x n` representing a garden. Each cell in the grid contains either a `1` representing a plant or a `0` representing empty ground. Your task is to determine the size of the largest square area consisting entirely of plants (i.e., only 1\'s) within the garden. * * * Input The input contains several datasets. The number of datasets does not exceed `100`. Each dataset starts with an integer `n` (1 ≤ n ≤ 100) denoting the size of the grid. The next `n` lines each contain `n` integers separated by spaces (either `0` or `1`), representing the garden grid. The final dataset is followed by a single line containing only a single `#`. Output For each dataset, print a single line containing the size of the largest square area of plants in the garden grid. * * * Sample Input 4 1 1 0 0 1 1 0 0 0 0 1 1 0 0 1 1 3 1 0 1 0 1 0 1 1 0 # Output for the Sample Input 2 1 Example Input 4 1 1 0 0 1 1 0 0 0 0 1 1 0 0 1 1 3 1 0 1 0 1 0 1 1 0 # Output 2 1","solution":"def largest_square_of_plants(gardens): Returns a list containing the size of the largest square areas of plants for each garden. results = [] for garden in gardens: n = len(garden) if n == 0: results.append(0) continue dp = [[0] * n for _ in range(n)] max_side = 0 for i in range(n): for j in range(n): if garden[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) results.append(max_side) return results"},{"question":"Alice is designing a necklace by threading beads onto a string. Each bead has a unique integer ID, and the IDs for the beads on her necklace can be represented as an array of integers. Alice wants to ensure that her necklace has a special property: there should be no two adjacent beads with the same ID. If two adjacent beads have the same ID, Alice can pick any bead and change its ID to any other integer between 1 and 50 (both inclusive) that is not already used in her necklace. However, Alice is very busy and needs your help to determine the minimum number of beads she needs to change to achieve the desired property. Write a program to determine the minimum number of beads to change to ensure Alice\'s necklace meets her requirement. # Input - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains an integer `N` (1 ≤ N ≤ 100), the number of beads in the necklace. - The second line contains `N` space-separated integers representing the IDs of the beads. # Output For each test case, print the minimum number of beads that need to be changed to ensure no two adjacent beads in Alice\'s necklace have the same ID. # Constraints - `1 ≤ ID ≤ 50` # Sample Input ``` 2 5 1 2 2 3 3 4 1 1 1 1 ``` # Sample Output ``` 2 2 ``` # Explanation - For the first test case, the necklace initially has IDs [1, 2, 2, 3, 3]. Changing the second bead with ID 2 to 4 and the fifth bead with ID 3 to 5 results in [1, 2, 4, 3, 5] which meets the requirement. - For the second test case, all beads have the same ID [1, 1, 1, 1]. Changing the second and fourth beads result in [1, 2, 1, 2], which satisfies the requirement.","solution":"def min_changes_to_ensure_no_adjacent_same(N, beads): Returns the minimum number of beads that need to be changed to ensure no two adjacent beads have the same ID. if N == 1: return 0 changes = 0 for i in range(1, N): if beads[i] == beads[i - 1]: changes += 1 # Change current bead to any other ID between 1 and 50 (inclusive) not used in its neighbors for new_id in range(1, 51): if (i == N-1 or new_id != beads[i + 1]) and new_id != beads[i - 1]: beads[i] = new_id break return changes def solve_beads_problem(T, test_cases): results = [] for N, beads in test_cases: results.append(min_changes_to_ensure_no_adjacent_same(N, beads)) return results"},{"question":"You are given a string consisting of alphabets and numbers. The task is to sort this string such that all the alphabets come before all the numbers. Additionally, the alphabets should maintain their order of appearance in the input string, and the numbers should also maintain their order of appearance. The output should be a new string with the desired order. Input - The first line contains T, the number of test cases. - The following T lines contain the strings to be sorted. Output For each test case, output the rearranged string, with all alphabets preceding all numbers. Constraints: 1 <= T <= 100 1 <= Length of each string <= 200 Example Input: 3 a1b2c3 123abc abc123 Output: abc123 abc123 abc123","solution":"def sort_string(s): Sorts the string such that all alphabets come before all the numbers, maintaining their original order of appearance. alphabets = \'\'.join([c for c in s if c.isalpha()]) numbers = \'\'.join([c for c in s if c.isdigit()]) return alphabets + numbers def process_test_cases(T, strings): Processes multiple test cases. results = [sort_string(s) for s in strings] return results"},{"question":"Chandu bought a special magic jar that returns the maximum of any three integers you put into it. Chandu can use this jar to determine the maximum of more than three integers by following these steps: 1. Put exactly three integers into the jar. 2. Get the maximum of these three integers from the jar. 3. Repeat the above two steps until only one integer remains. Chandu has an array of integers and wants to determine the maximum integer using his magic jar. Input First line contains integer T denoting number of test cases. For each test case, the first line contains an integer N denoting the number of integers in the array. The second line contains N integers separated by space which represent the array of integers. Output For each test case, output the maximum integer. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Array elements ≤ 10^9 SAMPLE INPUT 2 5 2 4 6 8 10 3 1 1 1 SAMPLE OUTPUT 10 1 Explanation In the first test case, the maximum value in the array [2, 4, 6, 8, 10] is 10. In the second test case, all elements in the array are equal, so the maximum value is 1.","solution":"def get_maximum_from_array(arr): Returns the maximum integer from given array. return max(arr) def process_test_cases(test_cases): Processes multiple test cases to find the maximum integer for each. results = [] for case in test_cases: n, array = case results.append(get_maximum_from_array(array)) return results"},{"question":"You are given a binary tree of n nodes, where each node has a unique integer value. You need to determine if the tree is a valid Binary Search Tree (BST). A binary search tree is defined as follows: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Define a function `isValidBST(root)` that returns `True` if the binary tree is a valid BST, and `False` otherwise. # INPUT The input consists of multiple test cases. The first line contains an integer T, the number of test cases. The following lines describe the test cases. Each test case starts with an integer n, the number of nodes in the tree. Then, n lines follow, each containing three space-separated integers: the value of a node and the values of its left and right children. If a node does not have a left or right child, it is represented by -1. # OUTPUT For each test case, output `True` if the given tree is a valid BST, otherwise output `False`. # CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ n ≤ 10^4 -10^9 ≤ Node value ≤ 10^9 # SAMPLE INPUT 2 3 2 1 3 1 -1 -1 3 -1 -1 3 2 3 1 3 -1 -1 1 -1 -1 # SAMPLE OUTPUT True False","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root): def validate(node, low=float(\'-inf\'), high=float(\'inf\')): # Empty trees are valid BSTs if not node: return True # The current node\'s value must be between low and high if node.val <= low or node.val >= high: return False # Recursively validate the left and right subtrees return validate(node.left, low, node.val) and validate(node.right, node.val, high) return validate(root) def create_tree_from_list(tree_list): if not tree_list or tree_list[0][0] == -1: return None nodes = {} for val, left, right in tree_list: if val not in nodes: nodes[val] = TreeNode(val) node = nodes[val] if left != -1: if left not in nodes: nodes[left] = TreeNode(left) node.left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) node.right = nodes[right] return nodes[tree_list[0][0]] def validate_bst_for_test_cases(test_cases): result = [] for case in test_cases: n, nodes = case tree = create_tree_from_list(nodes) result.append(isValidBST(tree)) return result def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): n = int(lines[idx]) nodes = [] for j in range(n): nodes.append(tuple(map(int, lines[idx + j + 1].split()))) test_cases.append((n, nodes)) idx += n + 1 return test_cases"},{"question":"You are given an integer N representing the edge length of a cubic box. Inside this box, you have placed a list of smaller, non-overlapping cubes, each with an edge length of 1 unit. The position of each small cube is given by 3D coordinates (x, y, z), where 1 leq x, y, z leq N. Write a program to determine if a given point (xp, yp, zp) lies inside any of the small cubes. If the point lies inside any of the cubes, return \'YES\', otherwise return \'NO\'. Constraints * 1 leq N leq 10^5 * 1 leq K leq 10^5 (number of small cubes) * 1 leq xp, yp, zp leq N Input Input is given from Standard Input in the following format: N K x1 y1 z1 x2 y2 z2 ... xK yK zK xp yp zp Output Output \'YES\' if the point (xp, yp, zp) lies inside any of the small cubes, otherwise output \'NO\'. Examples Input 10 2 2 3 5 7 8 1 2 3 5 Output YES Input 10 3 3 5 7 1 9 4 6 6 6 4 5 7 Output NO Input 5 1 2 2 2 1 1 1 Output NO","solution":"def is_point_in_cubes(N, K, cubes, xp, yp, zp): This function checks if the point (xp, yp, zp) is inside any of the given cubes. Parameters: N (int): The edge length of the cubic box. K (int): The number of smaller cubes. cubes (list): A list of tuples representing the coordinates of smaller cubes. xp (int): x-coordinate of the point to check. yp (int): y-coordinate of the point to check. zp (int): z-coordinate of the point to check. Returns: str: \'YES\' if the point is inside any of the small cubes, otherwise \'NO\'. # Use a set for quick membership check cube_positions = set(cubes) # Check if the point (xp, yp, zp) is in the set of cube positions if (xp, yp, zp) in cube_positions: return \'YES\' else: return \'NO\' # Reading input (for testing in real scenario uncomment below lines) # import sys # input = sys.stdin.read # data = input().split() def main(): # For testing here, replace the \'input()\' calls with read inputs data = 10 2 2 3 5 7 8 1 2 3 5 .strip().split() N = int(data[0]) K = int(data[1]) cubes = [(int(data[2 + 3*i]), int(data[3 + 3*i]), int(data[4 + 3*i])) for i in range(K)] xp, yp, zp = map(int, data[2 + 3*K:2 + 3*K + 3]) result = is_point_in_cubes(N, K, cubes, xp, yp, zp) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subarray that consists of the same element and that element must be greater than or equal to a given integer k. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the sequence. The third line contains a single integer k (1 ≤ k ≤ 100). Output Output the length of the longest subarray that consists of the same element and that element must be greater than or equal to k. Examples Input 7 3 3 4 4 4 5 5 4 Output 3 Input 6 1 1 2 2 3 3 2 Output 2 Input 5 7 7 7 7 7 8 Output 0 Input 9 6 6 6 3 3 3 4 4 4 6 Output 3 Note In the first example, the longest subarray with elements greater than or equal to 4 is {4, 4, 4} which has a length of 3. In the second example, the longest subarray with elements greater than or equal to 2 is {2, 2} which has a length of 2. In the third example, there is no element greater than or equal to 8, hence the output is 0. In the fourth example, the longest subarray with elements greater than or equal to 6 is {6, 6, 6} which has a length of 3.","solution":"def longest_subarray_with_same_element(n, sequence, k): Returns the length of the longest subarray that consists of the same element and that element must be greater than or equal to k. max_len = 0 current_len = 0 current_val = None for num in sequence: if num >= k and num == current_val: current_len += 1 elif num >= k: current_val = num current_len = 1 else: current_len = 0 current_val = None if current_len > max_len: max_len = current_len return max_len"},{"question":"Boxer robots are extremely popular in the futuristic world and are controlled by a central computer-based command. Each boxer robot is equipped with a shield that prevents direct damage from attacks until the shield strength runs out. The company \\"TechBox\\" is interested in assessing how well these robots can work in a series of fights against different opponents. You have been asked to implement the battle simulation for these robots using the following rules. Each robot is defined by: - An initial shield strength, `s_i` (0 ≤ s_i ≤ 10^6). - A list of `m` attacks it must undergo. Each attack `j` is defined by an integer damage value, `d_j` (1 ≤ d_j ≤ 10^4). The shield strength decreases by the attack\'s damage value until it either runs out, at which point the robot\'s shield strength becomes zero and any remaining damage from that attack will be applied directly to the robot itself. Any excess damage carried over after the shield is broken will be represented as a positive integer in the output. Write a program that processes the battle results of several robots. Input The first line contains an integer `t` (1 ≤ t ≤ 10^3), the number of robots to be tested. Each of the next `t` sets of lines contains: - An integer `s_i`, representing the initial shield strength of the robot. - An integer `m` (1 ≤ m ≤ 10^4), the number of attacks against the robot. - `m` integers describing the attack damage values. Output For each robot, output either: - \\"Shield intact with strength X\\" if after all attacks the shield still has a positive strength `X`. - \\"Robot took Y hit points of damage\\" if the shield breaks and the robot sustains `Y` points of damage. Example Input 3 50 4 10 20 5 10 100 3 30 40 20 20 5 5 10 5 5 10 Output Shield intact with strength 5 Shield intact with strength 10 Robot took 15 hit points of damage Explanation For the first robot, the battles go as follows: - Attack 1: Shield decreases from 50 to 40. - Attack 2: Shield decreases from 40 to 20. - Attack 3: Shield decreases from 20 to 15. - Attack 4: Shield decreases from 15 to 5. Since the shield remains with a strength of 5, the output is \\"Shield intact with strength 5\\". For the second robot, the battles go as follows: - Attack 1: Shield decreases from 100 to 70. - Attack 2: Shield decreases from 70 to 30. - Attack 3: Shield decreases from 30 to 10. Since the shield remains with a strength of 10, the output is \\"Shield intact with strength 10\\". For the third robot, the battles go as follows: - Attack 1: Shield decreases from 20 to 15. - Attack 2: Shield decreases from 15 to 5. - Attack 3: Shield decreases to 0 and the robot takes 5 damage. (Shield breaks) - Attack 4: Since the shield is already broken, the robot takes 10 damage. - Attack 5: Since the shield is already broken, the robot takes another 10 damage. Since the shield broke and the robot took a total of 15 hit points of damage, the output is \\"Robot took 15 hit points of damage.\\"","solution":"def battle_simulation(t, robot_data): results = [] for data in robot_data: initial_shield, attacks = data remaining_shield = initial_shield damage_taken = 0 for attack in attacks: if remaining_shield > 0: if attack <= remaining_shield: remaining_shield -= attack else: damage_taken += (attack - remaining_shield) remaining_shield = 0 else: damage_taken += attack if remaining_shield > 0: results.append(f\\"Shield intact with strength {remaining_shield}\\") else: results.append(f\\"Robot took {damage_taken} hit points of damage\\") return results"},{"question":"Problem Description: Alice and Bob love playing a game with strings. They have an array of \'k\' strings, each consisting of lowercase English letters. The game involves reversing the order of the characters in each string and then checking if the reversed string can be found in the array. If a string matches its reverse in the array (i.e., the reversed string exists somewhere else in the array), we return \\"Yes\\". If no strings match after reversing, we return \\"No\\". Given a list of \'k\' strings, determine if there is at least one string that, when reversed, exists in the array. Input - The first line contains a single integer t, denoting the number of test cases. - Each test case starts with an integer k, denoting the number of strings in the array. - The next k lines contain one string each, consisting of lowercase English letters. Output - For each test case, output a single line containing \\"Yes\\" or \\"No\\". Constraints - 1 ≤ t ≤ 10 - 1 ≤ k ≤ 100 - 1 ≤ length of each string ≤ 100 Example Input: 3 3 abc cba xyz 4 abcd dcba efgh hgfe 2 mno pon Output: Yes Yes No Explanation Example case 1: The reversed form of \\"abc\\" is \\"cba\\", which exists in the array. Hence, the answer is \\"Yes\\". Example case 2: The reversed forms of \\"abcd\\" is \\"dcba\\" and \\"efgh\\" is \\"hgfe\\", both of which exist in the array. Hence, the answer is \\"Yes\\". Example case 3: The reversed forms of \\"mno\\" and \\"pon\\" do not exist in the array. Hence, the answer is \\"No\\".","solution":"def reverse_string_game(test_cases): results = [] for case in test_cases: k, strings = case found = False string_set = set(strings) for s in strings: if s[::-1] in string_set and s[::-1] != s: found = True break results.append(\\"Yes\\" if found else \\"No\\") return results"},{"question":"You are given a list of integers. Find and return the second largest number in the list. Input The first line of input contains an integer n (2 ≤ n ≤ 100) - the number of integers in the list. The second line contains n integers, separated by spaces. Each integer is between -1000 and 1000, inclusive. Output Output the second largest number in the list. Examples Input 5 2 3 6 6 5 Output 5 Input 3 10 5 10 Output 5","solution":"def second_largest(input_list): Returns the second largest number in the list. unique_numbers = list(set(input_list)) unique_numbers.sort() if len(unique_numbers) < 2: return None return unique_numbers[-2] # Function to handle the input as per the problem statement def find_second_largest(n, numbers): return second_largest(numbers)"},{"question":"Lars is working on a data management system that involves handling a set of records. Each record has a unique numeric identifier and a value associated with it. Lars needs to process a series of operations on this set of records. The operations can be one of the following types: 1. Add a new record with a unique identifier and a value. 2. Update the value of an existing record. 3. Find and return the value of a record given its identifier. 4. Delete a record given its identifier. Write a program to help Lars manage the records according to the operations specified. Input The first line contains an integer q (1 ≤ q ≤ 10^5) — the number of operations. Each of the next q lines contains one of the following operations: - \\"1 id value\\" — Add a new record with identifier id and value value (1 ≤ id ≤ 10^9, -10^9 ≤ value ≤ 10^9). - \\"2 id value\\" — Update the value of an existing record with identifier id to value (1 ≤ id ≤ 10^9, -10^9 ≤ value ≤ 10^9). - \\"3 id\\" — Find and return the value of the record with identifier id (1 ≤ id ≤ 10^9). - \\"4 id\\" — Delete the record with identifier id (1 ≤ id ≤ 10^9). It is guaranteed that each \\"3 id\\" or \\"4 id\\" operation will only be called if the record with identifier id exists. Output For each query of type \\"3 id\\", print the value of the record with that identifier. Examples Input 8 1 101 200 3 101 2 101 400 3 101 1 102 300 3 102 4 101 3 101 Output 200 400 300","solution":"class DataManager: def __init__(self): self.records = {} def add_record(self, id, value): if id not in self.records: self.records[id] = value def update_record(self, id, value): if id in self.records: self.records[id] = value def find_record(self, id): if id in self.records: return self.records[id] def delete_record(self, id): if id in self.records: del self.records[id] def handle_operations(q, operations): data_manager = DataManager() results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: id = int(parts[1]) value = int(parts[2]) data_manager.add_record(id, value) elif op_type == 2: id = int(parts[1]) value = int(parts[2]) data_manager.update_record(id, value) elif op_type == 3: id = int(parts[1]) results.append(data_manager.find_record(id)) elif op_type == 4: id = int(parts[1]) data_manager.delete_record(id) return results"},{"question":"A magician has a set of cards numbered from 1 to N. Each card has a unique number. The magician shuffles the cards and creates a sequence. His assistant needs to determine if it is possible to rearrange the cards to form a strictly increasing sequence by performing at most one operation: picking exactly k cards from the sequence and placing them in reverse order back into the same positions. Write a program that determines whether it is possible to convert the given sequence into a strictly increasing sequence by reversing exactly k cards. Input - The first line contains two integers N (1 ≤ N ≤ 100) and k (1 ≤ k ≤ N). - The second line contains N distinct integers (the shuffled sequence of cards). Output Print \\"YES\\" (without quotes), if it is possible to rearrange the sequence into a strictly increasing sequence by reversing exactly k consecutive cards. Otherwise, print \\"NO\\" (without quotes). Examples Input 5 2 1 3 2 4 5 Output YES Input 6 3 4 3 2 6 5 1 Output NO Input 4 2 1 2 3 4 Output YES Note In the first example, reversing the subsequence [3, 2] results in the sequence [1, 2, 3, 4, 5], which is strictly increasing. In the second example, no single 3-card reverse operation will result in a strictly increasing sequence. In the third example, the sequence is already strictly increasing, so no operation is needed.","solution":"def can_rearrange_to_increasing_sequence(N, k, sequence): Determines if it\'s possible to rearrange the sequence into a strictly increasing sequence by reversing exactly k cards. Parameters: N (int): The number of cards. k (int): The number of cards to reverse. sequence (list): The sequence of cards. Returns: str: \\"YES\\" or \\"NO\\" # If the sequence is already sorted, return \\"YES\\" if sequence == sorted(sequence): return \\"YES\\" # Try to reverse any k consecutive cards and check the result for i in range(N - k + 1): temp_seq = sequence[:i] + sequence[i:i+k][::-1] + sequence[i+k:] if temp_seq == sorted(sequence): return \\"YES\\" return \\"NO\\""},{"question":"Write a program that takes an integer array and identifies the longest subsequence where the difference between any two consecutive elements is the same. If there are multiple subsequences with the same maximum length, return the first of them. The program should print the length of this subsequence and the starting index of this subsequence in the original array (0-based indexing). Input The input is given in the following format: N a_1 a_2 ... a_N The first line contains the number of elements in the array N (1 ≤ N ≤ 1000). The second line contains N space-separated integers representing the elements a_i (-10^4 ≤ a_i ≤ 10^4) of the array. Output The program should output the length of the longest subsequence and the starting index of this subsequence in the original array. Examples Input 6 1 2 3 4 3 2 Output 4 0 Input 5 -1 -4 -7 -10 2 Output 4 0","solution":"def longest_arithmetic_subsequence(arr): n = len(arr) if n == 1: return 1, 0 longest_length = 0 starting_index = 0 for i in range(n-1): diff = arr[i+1] - arr[i] length = 2 for j in range(i+2, n): if arr[j] - arr[j-1] == diff: length += 1 else: break if length > longest_length: longest_length = length starting_index = i return longest_length, starting_index # Example Usage if __name__ == \\"__main__\\": N = 6 arr = [1, 2, 3, 4, 3, 2] length, start_index = longest_arithmetic_subsequence(arr) print(length, start_index)"},{"question":"There is a newly developed amusement park with n rides and m people willing to have some fun. Each ride j (1 ≤ j ≤ n) has a waiting time of t_j minutes and contains a thrill level of l_j. Each person i (1 ≤ i ≤ m) has a threshold thrill level of T_i, such that the person will only ride those rides whose thrill level is no less than T_i. Each person i also has q_i minutes available to spend in the park. The objective is to determine the maximum number of rides each person can enjoy without exceeding their available time and while ensuring each ride chosen meets their thrill threshold. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of rides and the number of people. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 1000) — the waiting time for each ride. The third line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 1000) — the thrill level for each ride. Next m lines contain two integers each: T_i and q_i (1 ≤ T_i ≤ 1000, 1 ≤ q_i ≤ 10000) — the thrill threshold and available time for each person. Output The output should contain m integers, each representing the maximum number of rides that the i-th person can enjoy. Example Input 5 3 30 15 45 35 25 80 60 40 100 50 50 60 90 120 30 90 Output 2 1 3 Note Let\'s analyze the sample input: 1. The first person has a thrill threshold of 50 and 60 minutes available: - They can go on rides with thrill levels [60, 100, 50]. - The waiting times for these rides are [15, 35, 25]. - Choosing rides with times [15, 25] maximizes the count to 2 rides within 60 minutes. 2. The second person has a thrill threshold of 90 and 120 minutes available: - They can go on the ride with thrill level [100]. - The waiting time is [35]. - Thus, they can enjoy only 1 ride. 3. The third person has a thrill threshold of 30 and 90 minutes available: - All rides meet the thrill threshold. - The waiting times are [30, 15, 45, 35, 25]. - Choosing rides with times [15, 25, 30] maximizes the count to 3 rides within 90 minutes.","solution":"def max_rides(n, m, waiting_times, thrill_levels, people): results = [] for thrill_threshold, available_time in people: filtered_rides = [ waiting_time for waiting_time, thrill_level in zip(waiting_times, thrill_levels) if thrill_level >= thrill_threshold ] filtered_rides.sort() count = 0 total_time = 0 for ride_time in filtered_rides: if total_time + ride_time <= available_time: total_time += ride_time count += 1 else: break results.append(count) return results"},{"question":"You are given a grid of size n x m filled with non-negative integers. You need to move from the top-left corner (0,0) to the bottom-right corner (n-1,m-1), collecting maximum value on your way. From any cell, you can only move either right or down to the neighboring cell. Write a function to compute the maximum value you can collect while moving from the top-left to the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines each contain m integers, representing the grid. Output Print a single integer — the maximum value that can be collected. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In the example above, the path yielding the maximum value is 1 → 4 → 7 → 8 → 9, which sums up to 29. Explanation: The function uses dynamic programming to solve the problem. It maintains a 2D array dp where dp[i][j] represents the maximum value collected from the top-left corner to cell (i, j). The function iteratively updates the dp array by considering the maximum value that can be collected from either the cell directly above or the cell directly to the left, and then adding the value of the current grid cell. The final answer is found at dp[n-1][m-1], the bottom-right corner of the grid.","solution":"def max_value_collect(n, m, grid): Returns the maximum value that can be collected while moving from the top-left to the bottom-right corner of the grid. dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given two non-empty strings `a` and `b` consisting of lowercase English letters. The strings are of the same length. Your task is to determine whether one string can be transformed into the other by swapping its characters at most once. A swap operation consists of choosing two distinct indices of the string and swapping the characters at these indices. Return \\"YES\\" if it\'s possible to transform `a` into `b` by at most one swap, otherwise return \\"NO\\". Constraints: * 1 ≤ |a|, |b| ≤ 10^5 * `a` and `b` consist of lowercase English letters only. * The lengths of `a` and `b` are equal. Input: Input is given from Standard Input in the following format: a b Output: Output a single line: \\"YES\\" if transformation is possible by at most one swap, otherwise \\"NO\\". Examples Input: ab ba Output: YES Input: abcdef abcfed Output: YES Input: abc bca Output: NO Input: aaaa bbbb Output: NO","solution":"def can_transform_by_one_swap(a, b): Determines if string a can be transformed into string b by at most one swap. if a == b: return \\"NO\\" # No swap needed if already equal diff_indices = [i for i in range(len(a)) if a[i] != b[i]] if len(diff_indices) == 2 and a[diff_indices[0]] == b[diff_indices[1]] and a[diff_indices[1]] == b[diff_indices[0]]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string consisting of lowercase alphabetic characters. Your task is to determine the length of the longest subsequence that can be rearranged to form a palindrome. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000). Output Print the length of the longest palindromic subsequence. Examples Input abccba Output 6 Input abcdefg Output 1 Note In the first sample, the entire string \\"abccba\\" is already a palindrome, so the output is the length of the entire string, which is 6. In the second sample, due to the absence of any repeating characters, the longest palindromic subsequence that can be formed is any single character, hence the output is 1.","solution":"from collections import Counter def longest_palindrome_subsequence_length(s): Returns the length of the longest palindromic subsequence that can be rearranged from the given string. freq = Counter(s) length = 0 odd_count = 0 for count in freq.values(): # Add the largest even number that is less than or equal to `count`. length += count // 2 * 2 # Check if there is an odd count character. if count % 2 == 1: odd_count = 1 # If there is any character with an odd count, we can add one to the length. return length + odd_count"},{"question":"Write a program to find the median of a given list of integers. The median of a list of numbers is the middle number when the list is sorted in non-decreasing order. If the list has an even number of elements, the median is the average of the two middle numbers. For example: L = {1, 2, 3} // Here the median is 2 L = {1, 2, 3, 4} // Here the median is (2 + 3) / 2 = 2.5 Input: First line of input contains an integer t representing the number of test cases. Each test case consists of two lines: the first line contains an integer N - the number of integers in the list. The second line contains N integers. Output: Print the median of each list on a new line. Constraints: 1 ≤ t ≤ 100 1 ≤ N ≤ 100000 1 ≤ a[i] ≤ 1000000 SAMPLE INPUT 2 5 5 3 8 4 2 4 7 9 1 5 SAMPLE OUTPUT 4 6.0","solution":"def find_median(arr): Returns the median of the list `arr`. arr.sort() n = len(arr) mid = n // 2 if n % 2 == 1: return arr[mid] else: return (arr[mid - 1] + arr[mid]) / 2 def process_test_cases(t, test_cases): Processes multiple test cases and finds the median for each test case list. results = [] for i in range(t): N = test_cases[i][0] arr = test_cases[i][1] median = find_median(arr) results.append(median) return results"},{"question":"In a magical forest, there are n trees arranged in a single straight line, numbered from 1 to n. Each tree has a certain height, and the height of the i-th tree is given by an integer hi. An elf named Elemmirë wants to perform a sequence of q operations on this line of trees. Each operation can be one of the following types: - Increase the height of a specific tree by a given amount. - Find the tallest tree within a specific segment of the line of trees. More specifically, * \\"1 i x\\" — meaning increasing the height of the i-th tree by x units (1 ≤ i ≤ n, 1 ≤ x ≤ 1000). * \\"2 l r\\" — meaning querying the maximum height among trees from position l to position r (1 ≤ l ≤ r ≤ n). Elemmirë wonders the results of these queries after performing all operations. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers h1, h2, ... hn (1 ≤ hi ≤ 100000), representing the initial heights of the trees. Each of the following q lines describes an operation in one of the formats described above. Output For each query of type \\"2 l r\\", output a single integer, which is the maximum height among the trees from position l to position r. Example Input: 6 5 3 2 5 1 4 6 2 2 5 1 3 2 2 1 6 1 5 4 2 2 4 Output: 5 7 7 Note The initial heights of the trees are given as [3, 2, 5, 1, 4, 6]. Then the sequence of operations is as follows: - Query the maximum height from position 2 to 5: The answer is 5. - Increase the height of the 3rd tree by 2 units. The heights become [3, 2, 7, 1, 4, 6]. - Query the maximum height from position 1 to 6: The answer is 7. - Increase the height of the 5th tree by 4 units. The heights become [3, 2, 7, 1, 8, 6]. - Query the maximum height from position 2 to 4: The answer is 7.","solution":"class SegmentTree: def __init__(self, data, default=0, func=max): initialize the segment tree with data from math import ceil, log2 self._default = default self._func = func self._len = len(data) self._size = 2 ** ceil(log2(self._len)) self._tree = [default] * (2 * self._size) # fill the leaves of the tree self._tree[self._size:self._size + self._len] = data[:] # fill the internal nodes of the tree for i in reversed(range(1, self._size)): self._tree[i] = self._func(self._tree[2 * i], self._tree[2 * i + 1]) def update(self, idx, value): update a leaf node and its predecessors idx += self._size self._tree[idx] += value # assuming the update increases the value while idx > 1: idx //= 2 self._tree[idx] = self._func(self._tree[2 * idx], self._tree[2 * idx + 1]) def query(self, left, right): query the range from left to right (inclusive) result = self._default left += self._size right += self._size + 1 while left < right: if left % 2: result = self._func(result, self._tree[left]) left += 1 if right % 2: right -= 1 result = self._func(result, self._tree[right]) left //= 2 right //= 2 return result def forest_operations(n, q, heights, operations): seg_tree = SegmentTree(heights) results = [] for op in operations: if op[0] == 1: seg_tree.update(op[1] - 1, op[2]) elif op[0] == 2: result = seg_tree.query(op[1] - 1, op[2] - 1) results.append(result) return results"},{"question":"You are given a list of non-negative integers and a target value. Your goal is to determine whether there exist three distinct indices i, j, k in the list such that the sum of the elements at these indices equals the target value. Input The input consists of two lines: 1. The first line contains a single integer n (3 ≤ n ≤ 10000), the length of the list. 2. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), representing the elements of the list. 3. The third line contains a single integer t (0 ≤ t ≤ 3 * 10^9), the target value. Output Output \\"YES\\" if there exist three distinct indices i, j, k (i ≠ j ≠ k) such that a_i + a_j + a_k = t. Otherwise, output \\"NO\\". Examples Input 5 2 7 4 8 3 15 Output YES Input 4 1 2 3 4 10 Output NO","solution":"def three_sum(nums, target): Determines if there are three distinct indices i, j, k in nums such that the sum at these indexes equals target. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: summation = nums[i] + nums[left] + nums[right] if summation == target: return \\"YES\\" elif summation < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given a robot that moves on a three-dimensional grid starting from the origin point (0, 0, 0). The robot receives an array of commands, and each command contains a direction (`\\"UP\\"`, `\\"DOWN\\"`, `\\"LEFT\\"`, `\\"RIGHT\\"`, `\\"FORWARD\\"`, `\\"BACKWARD\\"`) and a distance. The robot executes the commands in the given order. Determine the robot\'s final position after all commands have been executed. # Command Directions: - `\\"UP\\"` increases the z-coordinate. - `\\"DOWN\\"` decreases the z-coordinate. - `\\"LEFT\\"` decreases the x-coordinate. - `\\"RIGHT\\"` increases the x-coordinate. - `\\"FORWARD\\"` increases the y-coordinate. - `\\"BACKWARD\\"` decreases the y-coordinate. # Constraints: - 1 ≤ number of commands ≤ 10^4 - distance for each command is a positive integer not exceeding 10^3 - All input values are integers. # Input The first line contains an integer N, the number of commands. Each of the next N lines contains a direction and a distance, separated by a space. # Output Output the final position of the robot in the format: `x y z`. # Examples Input ``` 3 UP 5 FORWARD 2 RIGHT 3 ``` Output ``` 3 2 5 ``` Input ``` 1 BACKWARD 7 ``` Output ``` 0 -7 0 ``` Input ``` 4 UP 1 DOWN 1 LEFT 2 RIGHT 2 ``` Output ``` 0 0 0 ```","solution":"def final_position(commands): Calculates the final position of the robot given a list of commands. Args: commands: List of tuples where each tuple contains a direction and a distance. Returns: Tuple of three integers representing the final coordinates (x, y, z). x, y, z = 0, 0, 0 for direction, distance in commands: if direction == \\"UP\\": z += distance elif direction == \\"DOWN\\": z -= distance elif direction == \\"LEFT\\": x -= distance elif direction == \\"RIGHT\\": x += distance elif direction == \\"FORWARD\\": y += distance elif direction == \\"BACKWARD\\": y -= distance return x, y, z"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, for this problem, you are to modify the sequence calculation. Given integers a0, a1, and n, compute the nth term in a modified sequence where each term is given by the sum of its two preceding terms, starting with a0 and a1. Formally, the sequence is defined as: - a_0 = a0 - a_1 = a1 - a_n = a_(n-2) + a_(n-1) for n ≥ 2 Input The first line contains three integers a0, a1, and n where (0 ≤ a0, a1 ≤ 1000) and (0 ≤ n ≤ 1000000). Output Output the nth term of the sequence. Examples Input 0 1 5 Output 5 Input 2 3 4 Output 13 Note You can see the sequence for the first example: 0, 1, 1, 2, 3, 5 ... And for the second: 2, 3, 5, 8, 13","solution":"def modified_fibonacci(a0, a1, n): Returns the nth term of the modified Fibonacci sequence starting with a0 and a1. if n == 0: return a0 elif n == 1: return a1 for _ in range(2, n+1): a0, a1 = a1, a0 + a1 return a1"},{"question":"You are given a sequence of integers and you need to perform a series of operations on them. The operations involve replacing certain subsequences with their sum. # Problem Given a sequence of integers, you are allowed to perform the following operation any number of times on a contiguous subsequence: replace the subsequence with their sum. Your task is to determine the maximum possible value of the sum of the remaining sequence after performing any number of operations. # Input - The first line contains an integer ( t ) (1 ≤ ( t ) ≤ 100), the number of test cases. - Each test case starts with an integer ( n ) (1 ≤ ( n ) ≤ 10^5), the length of the sequence. - The following line contains ( n ) integers ( a_1, a_2, dots, a_n ) (|a_i| ≤ 10^4), representing the sequence. # Output For each test case, print a single integer, the maximum possible sum of the remaining sequence after performing any number of operations. # Example Input ``` 3 3 1 2 3 5 -1 -2 -3 -4 -5 6 5 -2 3 -1 6 -4 ``` Output ``` 6 -1 11 ``` # Explanation - In the first test case, you can combine all elements into a single subsequence to get the sum 6. - In the second test case, the best you can do is not to combine any elements since combining them results in a smaller sum, thus the maximum sum is -1 (taking the least negative number). - In the third test case, you can combine (5, -2, 3) into 6 and (6, -1) into 5, resulting in a sequence [6, 5]. Combining these two gives 11, which is the maximum possible sum.","solution":"def max_sum_remaining_sequence(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] max_sum = float(\'-inf\') current_sum = 0 for num in sequence: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 results.append(max_sum) return results"},{"question":"Antonia is organizing a unique puzzle-solving competition. There are n participants who each receive a list of puzzle difficulties they need to solve. Each puzzle has a difficulty level d associated with it. The competition\'s rules are such that each participant can choose the order in which they solve their puzzles to minimize their total effort, defined as the sum of the squares of puzzle difficulties they solve. To make the competition fair, Antonia wants to level the playing field by adjusting the difficulties so that each participant ends up with the same total effort. She can only increase the difficulties of some puzzles but not decrease them. Given the initial puzzle difficulties of each participant, Antonia needs to determine the minimum possible total effort that would be equal for all participants after adjustments. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of participants. For each participant, the following lines contain an integer m (1 ≤ m ≤ 100) — the number of puzzles they need to solve, and then m integers representing the initial puzzle difficulties di (1 ≤ di ≤ 100). Output Print a single integer — the minimum possible total effort that would be equal for all participants after the adjustments. Examples Input 3 3 1 2 3 3 2 3 4 2 1 5 Output 14 Input 2 2 5 6 3 3 2 1 Output 113","solution":"def minimum_possible_total_effort(n, participants): # Function to calculate sum of squares def sum_of_squares(arr): return sum(x * x for x in arr) # Calculate the current efforts for all participants current_efforts = [sum_of_squares(p) for p in participants] # Calculate the maximum of the current efforts, which would be the minimum level Antonia must achieve for all target_effort = max(current_efforts) return target_effort # Example usage: # n = 3 # participants = [ # [1, 2, 3], # [2, 3, 4], # [1, 5] # ] # print(minimum_possible_total_effort(n, participants)) # Output: 29"},{"question":"A famous treasure hunter has come across an ancient clue, which states: \\"An island is protected by a mysterious gate. The gate opens only when a correct combination of numbers is placed sequentially in front of it\\". The treasure hunter figures out that the sequence is a Fibonacci sequence. Your task is to help the treasure hunter by generating the Fibonacci sequence up to the nth number and providing the sum of all the numbers in that sequence. Input The first line contains the number of test cases t, where t ≤ 10. Each of the next t lines contains a single integer n, where 1 ≤ n ≤ 40, denoting the length of the Fibonacci sequence. Output For each test case, output a single integer representing the sum of the first n numbers in the Fibonacci sequence. Example Input: 2 4 5 Output: 7 12 Explanation: For n=4, the Fibonacci sequence is 0, 1, 1, 2 and the sum is 0 + 1 + 1 + 2 = 4. For n=5, the Fibonacci sequence is 0, 1, 1, 2, 3 and the sum is 0 + 1 + 1 + 2 + 3 = 7.","solution":"def fibonacci_sum(n): Returns the sum of the first n numbers in the Fibonacci sequence. if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 total = a + b for _ in range(2, n): a, b = b, a + b total += b return total def process_cases(t, cases): Process multiple test cases for the Fibonacci sum function. results = [] for n in cases: results.append(fibonacci_sum(n)) return results"},{"question":"When you are allocated a room for a programming competition, you have access to a bookshelf with M books. You have a list of k books you are particularly interested in reading during your free time. You want to ensure you have these books before anyone else takes them. Given two lists: the first list contains the titles of the M books currently on the bookshelf, and the second list consists of the k book titles you are interested in. Write a function that checks whether all the titles in your list are present on the bookshelf. The function signature is as follows: ```python def all_books_available(bookshelf: List[str], interested_books: List[str]) -> bool: ``` # Input 1. `bookshelf`: a list of strings, where each string is the title of a book currently on the bookshelf (1 ≤ M ≤ 100). 2. `interested_books`: a list of strings, where each string is the title of a book you are interested in reading (1 ≤ k ≤ 50). # Output - Return `True` if all titles in `interested_books` are present in `bookshelf`. - Otherwise, return `False`. # Example ```python bookshelf = [\\"The Art of Computer Programming\\", \\"The Pragmatic Programmer\\", \\"Structure and Interpretation of Computer Programs\\"] interested_books = [\\"The Pragmatic Programmer\\", \\"The Art of Computer Programming\\"] print(all_books_available(bookshelf, interested_books)) # Should return True interested_books = [\\"Clean Code\\", \\"The Pragmatic Programmer\\"] print(all_books_available(bookshelf, interested_books)) # Should return False ```","solution":"def all_books_available(bookshelf, interested_books): Checks whether all books in the interested_books list are available on the bookshelf. Parameters: bookshelf (list): A list containing the titles of books on the bookshelf. interested_books (list): A list containing the titles of books you\'re interested in. Returns: bool: True if all interested books are on the bookshelf, False otherwise. bookshelf_set = set(bookshelf) for book in interested_books: if book not in bookshelf_set: return False return True"},{"question":"Write a function that receives two strings, `s1` and `s2`, and determines whether `s1` is an anagram of a substring of `s2`. If it is, return the start index of the substring in `s2` that forms the anagram. If multiple start indices are possible, return the smallest one. If no such substring exists, return -1. An anagram is a rearrangement of the characters of one string to form another string. For example, \\"abc\\" is an anagram of \\"bca\\", and \\"lid\\" is an anagram of \\"dli\\". Function signature: ```python def find_anagram_substring(s1: str, s2: str) -> int: pass ``` # Input - A string `s1` (1 ≤ |s1| ≤ 10^4). - A string `s2` (1 ≤ |s2| ≤ 10^5). # Output - An integer representing the starting index of the substring in `s2` that is an anagram of `s1`. If no such substring exists, return -1. # Example Input ```plaintext s1: \\"abc\\" s2: \\"cbaebabacd\\" ``` Output ```plaintext 0 ``` Input ```plaintext s1: \\"xyz\\" s2: \\"cbaebabacd\\" ``` Output ```plaintext -1 ``` # Note In the first example, \\"abc\\" is an anagram of the substring \\"cba\\" starting at index 0 in `s2`. In the second example, there is no substring in `s2` that is an anagram of \\"xyz\\".","solution":"def find_anagram_substring(s1: str, s2: str) -> int: from collections import Counter len_s1 = len(s1) len_s2 = len(s2) if len_s1 > len_s2: return -1 s1_counter = Counter(s1) window_counter = Counter(s2[:len_s1]) for i in range(len_s2 - len_s1 + 1): if i > 0: # Slide the window: remove previous character, add new character prev_char = s2[i-1] new_char = s2[i+len_s1-1] window_counter[prev_char] -= 1 if window_counter[prev_char] == 0: del window_counter[prev_char] window_counter[new_char] += 1 if window_counter == s1_counter: return i return -1"},{"question":"You have been given an **m × n** grid representing a maze with **open spaces** and **walls**. The grid is composed of cells that can either be a `.` (representing an **open space**) or `#` (representing a **wall**). You start at the **top-left corner** of the grid (cell `(0, 0)`) and want to reach the **bottom-right corner** (cell `(m-1, n-1)`). You can move **up**, **down**, **left**, or **right** from one open space to another. Unfortunately, some cells in the grid are periodically being converted from walls to open spaces and vice versa. Given the configuration of the grid as it changes over time, determine the **minimum number of moves** required to reach the target cell `(m-1, n-1)` from `(0, 0)`. If it is not possible to reach the target cell, return `-1`. **Input:** - The first line contains two integers **m** and **n** (2 ≤ m, n ≤ 500) - the number of rows and columns in the grid. - The following **m** lines each consist of a string of length **n** containing characters `.` and `#`. - The next line contains an integer **o** (1 ≤ o ≤ 1000) - the number of changes. - The following **o** lines each contain two integers **t_i** and **u_i** (1 ≤ u_i ≤ (m * n)), which are the 1-based index of the cells that change from `.` to `#` or vice versa at the start of minute **t_i**. **Output:** Print the minimum number of moves required to reach the target cell `(m-1, n-1)` from `(0, 0)`. If it is not possible, print `-1`. **Note:** - The starting cell `(0, 0)` and the target cell `(m-1, n-1)` are always open spaces at time `0`. - Handle the dynamic change of walls efficiently. **Example:** **Input:** ``` 3 3 .#. .#. ... 2 1 4 2 6 ``` **Output:** ``` 4 ``` **Explanation:** - Initially, the grid is: ``` .#. .#. ... ``` - You can move right, down, right, down to reach the target with 4 moves. - At time `1`, the cell `(1, 1)` (4th cell) changes to `.`: ``` .#. ... ... ``` This does not affect the path, so the answer remains 4. - At time `2`, the cell `(2, 0)` (6th cell) changes to `#`: ``` .#. ... #.. ``` The path does not change as you can still move down, right, down to reach the target. So the answer remains 4.","solution":"from collections import deque def min_moves_to_target(m, n, grid, o, changes): dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)] def bfs(start, end, grid): queue = deque([(start, 0)]) visited = set([start]) while queue: (x, y), moves = queue.popleft() if (x, y) == end: return moves for dx, dy in dirs: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append(((nx, ny), moves + 1)) return -1 def update_grid(grid, change): i = change[1] - 1 x, y = i // n, i % n grid[x][y] = \'.\' if grid[x][y] == \'#\' else \'#\' start = (0, 0) end = (m-1, n-1) if grid[end[0]][end[1]] == \'#\': return -1 for minute in range(o + 1): if minute > 0: update_grid(grid, changes[minute - 1]) result = bfs(start, end, grid) if result != -1: return result return -1 # Example usage: m, n = 3, 3 grid = [ [\'.\', \'#\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] o = 2 changes = [(1, 4), (2, 6)] print(min_moves_to_target(m, n, grid, o, changes)) # Output: 4"},{"question":"You are given a list of integers. Write a function that partitions the list into two sublists such that the difference between the sum of integers in the first sublist and the sum of integers in the second sublist is minimized. Return the two sublists in any order. Constraints * The number of integers in the list will be in the range [2, 100]. * Each integer will be in the range [-10^4, 10^4]. Input Input is given in the following format: n a_1 a_2 ... a_n Output Output should be two lines. * The first line should contain the integers in the first sublist separated by spaces. * The second line should contain the integers in the second sublist separated by spaces. Example Input 4 3 1 4 2 Output 3 4 1 2 Input 5 -1 2 2 -3 1 Output -1 2 1 2 -3","solution":"def partition_list(nums): Partitions the list into two sublists such that the difference between the sum of integers in the first sublist and the sum of integers in the second sublist is minimized. Returns the two sublists in any order. total_sum = sum(nums) n = len(nums) # DP Table dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if j >= nums[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - nums[i-1]] # Find the maximum value for s1 near to total_sum // 2 s1 = max(j for j in range(total_sum // 2 + 1) if dp[n][j]) s2 = total_sum - s1 # Backtrack to find the elements of the subsets subset1 = [] subset2 = nums[:] w = s1 for i in range(n, 0, -1): if not dp[i-1][w]: subset1.append(nums[i-1]) subset2.remove(nums[i-1]) w -= nums[i-1] return subset1, subset2"},{"question":"There is a tree with n nodes (numbered 1 through n) and n-1 edges. Each node i has a unique integer value vi. You need to find the maximum difference between the values of any two nodes in the tree. Input The first line contains an integer n (2 ≤ n ≤ 100000), the number of nodes in the tree. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9), the values of the nodes. Each of the following n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. Output Print a single integer, the maximum difference between the values of any two nodes in the tree. Examples Input 3 1 3 2 1 2 1 3 Output 2 Input 4 10 5 3 12 1 2 1 3 2 4 Output 9 Note In the first sample, the maximum difference is |3 - 1| = 2. In the second sample, the maximum difference is |12 - 3| = 9.","solution":"def max_difference(n, values, edges): Returns the maximum difference between the values of any two nodes in the tree. return max(values) - min(values) def parse_input(data): lines = data.strip().split(\'n\') n = int(lines[0]) values = list(map(int, lines[1].split())) edges = [tuple(map(int, line.split())) for line in lines[2:]] return n, values, edges"},{"question":"Peter is organizing a science fair. There are N students who will participate in the fair. Each of these students has exactly M projects they are interested in, conveniently numbered from 1 to M. Each student ranks these projects by preference where 1 indicates their most preferred and M indicates their least preferred project. The school has a rule that a student can work on any one project even if it is not in their top preferences. Given these preferences, Peter wants to assign each student to a project such that the maximum number of students assigned to any single project is minimized. Your task is to determine this minimum possible maximum number of students per project by optimal assignment of students to projects. Constraints * 1 <= N <= 200 * 1 <= M <= 200 * Each student provides their ranking of M projects, with their rankings being a permutation of integers from 1 to M. Input The input is provided in the following format: N M P_{11} P_{12} ... P_{1M} P_{21} P_{22} ... P_{2M} : P_{N1} P_{N2} ... P_{NM} Output Print the minimum possible maximum number of students assigned to any single project. Examples Input 3 4 2 1 3 4 1 3 2 4 3 2 4 1 Output 1 Input 5 5 1 2 3 4 5 2 3 1 5 4 3 4 2 1 5 4 5 3 2 1 5 1 4 3 2 Output 1","solution":"import collections def can_assign(preferences, N, M, limit): counters = [0] * M for pref in preferences: assigned = False for i in range(M): project_index = pref[i] - 1 if counters[project_index] < limit: counters[project_index] += 1 assigned = True break if not assigned: return False return True def find_minimum_maximum(N, M, preferences): left, right = 1, N result = N while left <= right: mid = (left + right) // 2 if can_assign(preferences, N, M, mid): result = mid right = mid - 1 else: left = mid + 1 return result def main(input_str): data = input_str.strip().split(\'n\') N, M = map(int, data[0].split()) preferences = [list(map(int, line.split())) for line in data[1:]] return find_minimum_maximum(N, M, preferences)"},{"question":"Farmer John has a rectangular farmland grid made of cells, where each cell can be plowed or unplowed. He represents the plowed cells with a 1 and unplowed cells with a 0. He wants to effectively prepare the farmland by ensuring that every contiguous block of plowed cells forms a single rectangular area. Given the 2D array, return the largest area of a rectangle filled with 1\'s that can be found in the grid if there\'s any. If no such rectangle exists, return 0. Input - The first line of input contains two integers n and m (1 <= n, m <= 100) representing the number of rows and columns in the grid. - The next n lines each contain m integers either 0 or 1. Output - Print a single integer representing the area of the largest rectangle containing only 1\'s. Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ``` Input ``` 3 3 0 0 0 0 0 0 0 0 0 ``` Output ``` 0 ``` Input ``` 2 2 1 1 1 1 ``` Output ``` 4 ```","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 dp = [0] * len(matrix[0]) for row in matrix: for j in range(len(row)): dp[j] = dp[j] + 1 if row[j] == 1 else 0 max_area = max(max_area, largestRectangleArea(dp)) return max_area def largestRectangleArea(heights): stack = [-1] max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: height = heights[stack.pop()] width = i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack[-1] != -1: height = heights[stack.pop()] width = len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"Boxes in a Warehouse You are the manager of a warehouse and you need to manage the placement and movement of n boxes within the storage area. The storage area is a 2D plane with width w and height h, represented by a rectangle with corners (0, 0), (w, 0), (w, h), and (0, h). Each box has a unique identifier and initially resides at a specific coordinate within the warehouse. The boxes can be instructed to move in one of the four cardinal directions (north, south, east, or west) with a specified speed. However, the boxes must stop moving when they collide either with another box or with a wall of the warehouse. A collision occurs when two boxes occupy the same position at the same time. When this happens, both boxes should stop moving immediately at that position. If a box collides with a wall, it should also stop moving. Your task is to determine the final position of each box after all movements have been processed. Input The first line of input contains three space-separated integers n, w, and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000), representing the number of boxes and the width and height of the storage area respectively. The following n lines each describe a box with four space-separated integers: id, x, y, and s, where id (1 ≤ id ≤ 100 000) is the unique identifier of the box, (1 ≤ x ≤ w - 1) and (1 ≤ y ≤ h - 1) are the initial coordinates of the box, and s (1 ≤ s ≤ 4) represents the speed of the box in the cardinal directions (1 for north, 2 for south, 3 for east, 4 for west). Output Output n lines, each containing three space-separated integers id, x, and y, representing the final identifier and coordinates of each box after all movements, in the order of their input. Example Input 5 10 8 1 5 3 1 2 4 1 2 3 6 6 3 4 3 4 4 5 2 2 1 Output 1 5 8 2 4 4 3 10 6 4 1 4 5 2 8 Note In the example, the movements of the boxes are as follows: - Box 1 moves north from (5, 3) to (5, 8). - Box 2 moves south from (4, 1) to (4, 4). - Box 3 moves east from (6, 6) to (10, 6). - Box 4 moves west from (3, 4) to (1, 4). - Box 5 moves north from (2, 2) to (2, 8).","solution":"def final_positions(n, w, h, boxes): positions = [] for box in boxes: box_id, x, y, speed = box if speed == 1: # north y = min(h, y + 4) elif speed == 2: # south y = max(0, y - 4) elif speed == 3: # east x = min(w, x + 4) elif speed == 4: # west x = max(0, x - 4) positions.append((box_id, x, y)) return positions"},{"question":"Given a binary string (consists of \'0\'s and \'1\'s), your task is to find the largest substring which has equal number of \'0\'s and \'1\'s. Input The single line contains a binary string s of length n (1 ≤ n ≤ 105) — a binary string consisting of \'0\'s and \'1\'s. Output Print the length of the largest substring with equal number of \'0\'s and \'1\'s. If no such substring exists, print 0. Examples Input 110001 Output 6 Input 10101 Output 4 Input 1111 Output 0","solution":"def max_equal_substring_length(s): Returns the length of the largest substring with equal number of \'0\'s and \'1\'s. n = len(s) count_map = {0: -1} count = 0 max_len = 0 for i in range(n): count += 1 if s[i] == \'1\' else -1 if count in count_map: max_len = max(max_len, i - count_map[count]) else: count_map[count] = i return max_len"},{"question":"In a remote village, there is a group of N houses lined up in a single row, and the villagers are about to celebrate their annual festival. For the celebration, they want to install decorative lights on some houses. The lights consume a certain amount of power, and each house has a power capacity limit which cannot be exceeded. A light can only be placed on a house if the power consumed by all lights equals or is less than the house power capacity. Given the power capacities of the houses and the power consumption of each light, find the maximum number of lights that can be placed across the houses such that no house exceeds its power capacity. Input The first line contains two integers N (1 ≤ N ≤ 1000) - the number of houses, and L (1 ≤ L ≤ 1000) - the number of lights available. The second line contains N integers c_1, c_2, ..., c_N (1 ≤ c_i ≤ 10^6) - where c_i represents the power capacity of the i-th house. The third line contains L integers p_1, p_2, ..., p_L (1 ≤ p_i ≤ 10^6) - where p_i represents the power consumption of the i-th light. Output Output a single integer - the maximum number of lights that can be placed across the houses without exceeding any house\'s power capacity. Example Input 5 3 5 10 15 20 25 4 5 6 Output 3 Input 4 5 10 15 20 25 5 5 5 15 10 Output 4","solution":"def max_lights(N, L, capacities, powers): Returns the maximum number of lights that can be placed across the houses without exceeding any house\'s power capacity. capacities.sort() # Sort house capacities powers.sort() # Sort light powers max_lights_count = 0 house_index = 0 light_index = 0 # Try to place each light in the first house that can hold it while house_index < N and light_index < L: if powers[light_index] <= capacities[house_index]: max_lights_count += 1 light_index += 1 # Move to the next light house_index += 1 # Move to the next house for each comparison return max_lights_count"},{"question":"Points: 10 A software development company is creating a scheduling application to assist professionals in scheduling their meetings efficiently. One of the challenges they face is finding available time slots that match the given criteria. For this, they need a function that identifies all possible times at which a meeting can start given the working hours and the duration of the meeting. Given the start and end time of the working hours, and the duration of the meeting, write a function to print all possible starting times for the meeting. The working hours and duration are given in a 24-hour format (HH:MM). Input: - The first line consists of the working hours given in two space-separated strings `start` and `end` representing the start and end of the working hours, respectively. - The second line consists of the duration of the meeting given as a string `duration` representing the duration of the meeting in the format HH:MM. Output: - Print all possible meeting start times in the format HH:MM. Each start time should be printed on a new line. Example: Input: 08:00 17:00 01:30 Output: 08:00 09:30 11:00 12:30 14:00","solution":"def find_meeting_slots(start, end, duration): from datetime import datetime, timedelta start_time = datetime.strptime(start, \'%H:%M\') end_time = datetime.strptime(end, \'%H:%M\') duration_time = datetime.strptime(duration, \'%H:%M\') duration_delta = timedelta(hours=duration_time.hour, minutes=duration_time.minute) current_start = start_time result = [] while current_start + duration_delta <= end_time: result.append(current_start.strftime(\'%H:%M\')) current_start += duration_delta return result # Example usage # start = \\"08:00\\" # end = \\"17:00\\" # duration = \\"01:30\\" # print(find_meeting_slots(start, end, duration))"},{"question":"In a large online coding competition, programmers from different countries submit their code files. Each submission contains the programmer\'s unique ID and the country they are representing. After the competition, the judges review the submissions and assign a score to each one. Your task is to determine the country that accumulated the highest total score and the programmer with the highest individual score. Note 1: If multiple countries have the highest total score, select the country with the lexicographically smallest name. Similarly, if multiple programmers have the highest individual score, select the programmer with the lexicographically smallest ID. Note 2: In this problem, lexicographical order is based on ASCII code comparisons. Input: The first line of input contains two space-separated integers N and M denoting the number of programmers and the number of submissions respectively. Each of the following N lines contains two space-separated strings, denoting the unique ID of the programmer and the country they represent. Each of the following M lines contains two space-separated strings and an integer, denoting the unique ID of the programmer, the name of the file submitted, and the score of the submission. Output: The output should consist of two lines: the name of the country with the highest accumulated score and the unique ID of the programmer with the highest individual score. Constraints: 1 ≤ N ≤ 10000 (10^4) 1 ≤ M ≤ 100000 (10^5) Each string in the input contains only English alphabet letters (uppercase or lowercase) and/or digits. Each string in the input has a length not exceeding 20 characters. The score of each submission is an integer between 0 and 1000 inclusive. All programmer IDs are distinct. Each submission\'s programmer ID will match one of the N programmers. Example 1: Input: 2 3 prog1 USA prog2 Canada prog1 fileA 900 prog2 fileB 850 prog1 fileC 950 Output: USA prog1 Example 2: Input: 3 4 progA UK progB France progC Germany progA file1 300 progB file2 400 progB file3 600 progC file4 900 Output: France progC Example 3: Input: 2 2 coder1 Japan coder2 Korea coder1 fileX 700 coder2 fileY 700 Output: Japan coder1 Explanation: Example 1: The programmer \'prog1\' from the USA has submission scores of 900 and 950, totaling 1850. \'prog2\' from Canada has a score of 850. USA has the highest total score of 1850, and \'prog1\' has the highest individual score of 950. Example 2: The programmer \'progC\' from Germany has a score of 900, the highest individual score among all programmers. \'progB\' from France has a total of 1000 (400 + 600), which is higher than the total score of the UK (300). Therefore, the output is France and \'progC\'. Example 3: Both programmers \'coder1\' and \'coder2\' have submissions with the same score of 700. Since the lexicographical order of \\"Japan\\" is smaller than \\"Korea,\\" Japan is selected. The same logic applies for programmer IDs, and \'coder1\' is chosen as having a lexicographically smaller ID.","solution":"def highest_score_country_and_programmer(n, m, programmers_list, submissions_list): from collections import defaultdict # Create a dictionary to store the country of each programmer. programmer_country = {} for programmer_id, country in programmers_list: programmer_country[programmer_id] = country # Create dictionaries to store the total scores for each country and the individual scores for each programmer. country_scores = defaultdict(int) programmer_scores = defaultdict(int) for prog_id, file_name, score in submissions_list: # Update the scores. country_scores[programmer_country[prog_id]] += score programmer_scores[prog_id] = max(programmer_scores[prog_id], score) # Find the country with the highest total score. highest_scoring_country = min((country for country in country_scores), key=lambda c: (-country_scores[c], c)) # Find the programmer with the highest individual score. highest_scoring_programmer = min((prog for prog in programmer_scores), key=lambda p: (-programmer_scores[p], p)) return highest_scoring_country, highest_scoring_programmer # Example Usage: n = 2 m = 3 programmers_list = [(\\"prog1\\", \\"USA\\"), (\\"prog2\\", \\"Canada\\")] submissions_list = [(\\"prog1\\", \\"fileA\\", 900), (\\"prog2\\", \\"fileB\\", 850), (\\"prog1\\", \\"fileC\\", 950)] country, programmer = highest_score_country_and_programmer(n, m, programmers_list, submissions_list) print(country) # Output: USA print(programmer) # Output: prog1"},{"question":"You are given an array of integers. We define a \\"good pair\\" as a pair of distinct elements from the array such that the product of the elements is a perfect square. For example, consider the array [2, 4, 6, 8, 16]. The pairs (2, 8) and (4, 16) are good pairs because 2 * 8 = 16 and 4 * 16 = 64 are both perfect squares. Your task is to determine the number of good pairs in the given array. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Print one number — the number of good pairs in the array. Examples Input 5 2 4 6 8 16 Output 2 Input 6 1 2 3 5 7 11 Output 0 Note In the first example, the good pairs are (2, 8) and (4, 16). In the second example, there are no pairs of elements such that their product is a perfect square.","solution":"import math def count_good_pairs(arr): Returns the number of good pairs in the given array which form a perfect square when multiplied. def is_perfect_square(x): root = int(math.isqrt(x)) return root * root == x n = len(arr) good_pairs = 0 # Compare each pair of distinct elements for i in range(n): for j in range(i + 1, n): product = arr[i] * arr[j] if is_perfect_square(product): good_pairs += 1 return good_pairs"},{"question":"A kingdom is planning a large-scale festival in its capital city. The city has n knights who will participate in the event. Each knight has a skill level, represented as an integer. The king wants to form teams of knights such that the difference in skill levels between the strongest and the weakest knight in each team does not exceed a given value k. The goal is to maximize the number of teams formed under these constraints. A knight can only belong to one team. Input The first line of the input contains two integers n (1 ≤ n ≤ 100,000) and k (0 ≤ k ≤ 1,000,000), where n is the number of knights and k is the maximum allowed difference in skill levels within a team. The second line contains n space-separated integers, where the i-th integer represents the skill level of the i-th knight (0 ≤ skill level ≤ 1,000,000). Output Output one integer — the maximum number of teams that can be formed. Examples Input 5 3 1 5 3 8 4 Output 2 Input 6 0 1 2 3 4 5 6 Output 6","solution":"def max_teams(n, k, skill_levels): Finds the maximum number of teams that can be formed where the difference in skill levels between the strongest and the weakest knight in each team does not exceed k. Parameters: n (int): The number of knights k (int): The maximum allowed difference in skill levels within a team skill_levels (List[int]): List of skill levels of the knights Returns: int: The maximum number of teams # Sort the skill levels skill_levels.sort() teams = 0 i = 0 while i < n: # Find the max skill in the current team max_skill = skill_levels[i] + k # Find the range of skills that can be included in the current team while i < n and skill_levels[i] <= max_skill: i += 1 # A new team is formed teams += 1 return teams"},{"question":"A directed graph is represented using an adjacency matrix of size n x n, where n is the number of vertices. An entry (i, j) in this matrix indicates the weight of the edge from vertex i to vertex j. A weight of 0 means there is no edge between these vertices. Your task is to determine if there is a cycle in the graph. Input The first line contains a single integer n (1 ≤ n ≤ 50) — the number of vertices in the graph. Each of the next n lines contains n integers, where the j-th integer of the i-th line is the weight of the edge from vertex i to vertex j. Output Print \\"YES\\" if there is a cycle in the graph. Otherwise, print \\"NO\\". Examples Input 3 0 1 0 0 0 1 1 0 0 Output YES Input 3 0 1 0 0 0 1 0 0 0 Output NO Input 4 0 2 0 0 0 0 3 0 0 0 0 4 0 0 0 0 Output NO Note In the first example, the graph has a cycle: 1 → 2 → 3 → 1. In the second example, there is no cycle in the graph. In the third example, there is no cycle as the graph is a directed path without any circular connections.","solution":"def has_cycle(n, graph): def dfs(v, visited, rec_stack): visited[v] = True rec_stack[v] = True for neighbour in range(n): if graph[v][neighbour] != 0: # there is an edge if not visited[neighbour]: if dfs(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: return True rec_stack[v] = False return False visited = [False] * n rec_stack = [False] * n for node in range(n): if not visited[node]: if dfs(node, visited, rec_stack): return True return False def cycle_detector(n, matrix): if has_cycle(n, matrix): return \\"YES\\" else: return \\"NO\\""},{"question":"Milo is fascinated by strings and their transformations. He has recently come across a string transformation problem and needs your help. He has a string s consisting of lowercase English letters. The string can be transformed based on a set of rules. Each transformation rule is defined as follows: - For each letter in the string, swap it with the letter that is k positions to the right of it, wrapping around to the beginning of the string if necessary. For example, given string \\"abcde\\" and k=2, the transformed string would be \\"cdeab\\". Given the initial string s and an integer k, help Milo determine the final transformed string after applying the transformation rule exactly p times. Input format The first line of input contains an integer T - the number of test cases. Each test case consists of two lines: - The first line contains the integer k and p separated by a space. - The second line contains the initial string s. Output format For each test case, output the final transformed string after applying the transformation rule p times. Constraints 1 ≤ T ≤ 50 1 ≤ len(s) ≤ 10^5 1 ≤ k ≤ len(s) 1 ≤ p ≤ 10^9 SAMPLE INPUT 3 1 1 abcde 2 3 xyz 1 5 hello SAMPLE OUTPUT eabcd yzx hello Explanation In the first sample case, the initial string \\"abcde\\" is transformed by swapping each character k=1 positions to the right. After 1 such transformation, the string becomes \\"eabcd\\". In the second sample case, the initial string \\"xyz\\" undergoes 3 transformations with k=2. The transformations occur as follows: 1st transformation: \\"zxy\\" 2nd transformation: \\"yzx\\" 3rd transformation: \\"xyz\\" In the third sample case, the initial string \\"hello\\" undergoes 5 transformations with k=1. After each transformation, the string remains the same as \\"k=1\\" and \\"p=5\\" result in a full rotation. Thus, the final string remains \\"hello\\".","solution":"def transform_string(s, k, p): Transforms the string s by moving each character k positions to the right p times. n = len(s) # since p full cycles of n moves bring it back to the same string effective_p = (k * p) % n # rotating string by calculated effective_p steps return s[-effective_p:] + s[:-effective_p] def solve(test_cases): results = [] for k, p, s in test_cases: results.append(transform_string(s, k, p)) return results def parse_input(input_string): data = input_string.strip().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): k, p = int(data[index]), int(data[index + 1]) s = data[index + 2] test_cases.append((k, p, s)) index += 3 return test_cases"},{"question":"You are given a square grid of size n × n filled with numbers between 1 and n^2 (inclusive). Your task is to determine if the grid can be transformed into a \\"Latin square\\" by only swapping rows or columns. A Latin square is an n × n array filled with n different symbols, each occurring exactly once in each row and exactly once in each column. Input The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. Each test case starts with a line containing the integer n (1 ≤ n ≤ 50), the size of the square grid. The next n lines contain n integers each, representing the grid. Output For each test case, output \\"YES\\" if it is possible to transform the grid into a Latin square by swapping rows or columns, otherwise output \\"NO\\". Example Input 2 3 1 2 3 3 1 2 2 3 1 4 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 Output YES YES Explanation In the first example, the grid can already be considered a Latin square without any swaps because each row and each column contains all the numbers from 1 to 3 exactly once. In the second example, the grid is also already a Latin square. Each row and each column contains all numbers from 1 to 4 exactly once.","solution":"def is_latin_square_possible(grid): n = len(grid) # Check all rows and columns have values between 1 and n for i in range(n): row = set(grid[i]) col = set(grid[j][i] for j in range(n)) if row != set(range(1, n+1)) or col != set(range(1, n+1)): return \\"NO\\" return \\"YES\\" def solve(t, test_cases): results = [] for case in test_cases: n, grid = case result = is_latin_square_possible(grid) results.append(result) return results"},{"question":"Given a sequence of positive integers and a series of range queries, calculate the sum of the integers within each specified range and determine if the sum is an even or odd number. Constraints * 1 ≤ n ≤ 100,000 * 1 ≤ q ≤ 50,000 * 1 ≤ ai ≤ 1,000,000,000 * 1 ≤ li, ri ≤ n * li ≤ ri Input n a1 a2 a3 ... an q l1 r1 l2 r2 : lq-1 rq-1 lq rq The first integer n is the number of integers in the sequence. The following line contains n positive integers representing the sequence. The next integer q is the number of queries. Each query is given by two integers li and ri, which represent the start and end positions of the range (inclusive). Output For each query, output \\"Even\\" if the sum of integers in the specified range is even, and \\"Odd\\" if the sum is odd. Each result should be printed on a new line. Example Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output Even Odd Odd","solution":"def range_sum_even_or_odd(n, sequence, q, queries): results = [] prefix_sum = [0] * (n + 1) # Compute prefix sums for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + sequence[i - 1] # Process each query for (l, r) in queries: sum_range = prefix_sum[r] - prefix_sum[l - 1] if sum_range % 2 == 0: results.append(\\"Even\\") else: results.append(\\"Odd\\") return results"},{"question":"You are given a stream of integers. Your task is to find the median of the stream after processing each integer. The median is the middle value in an ordered list of numbers. If the size of the list is even, the median is the average of the two middle numbers. Write a program to read integers from the input and print the median after each integer is read. The program should efficiently handle insertion of integers and calculation of the median. Input The first line contains an integer n (1 ≤ n ≤ 105), representing the number of integers in the stream. Each of the following n lines contains an integer ai (-105 ≤ ai ≤ 105), representing an integer in the stream. Output Output n lines, each containing the median of the stream after processing each integer. Examples Input 6 5 15 1 3 8 7 Output 5 10 5 4 5 6 Input 4 2 4 6 8 Output 2 3 4 5","solution":"import heapq class MedianFinder: def __init__(self): self.low = [] # max_heap self.high = [] # min_heap def add_num(self, num): heapq.heappush(self.low, -num) # Ensure every element in low is less than or equal to every element in high if self.low and self.high and (-self.low[0] > self.high[0]): value_to_move = -heapq.heappop(self.low) heapq.heappush(self.high, value_to_move) if len(self.low) > len(self.high) + 1: value_to_move = -heapq.heappop(self.low) heapq.heappush(self.high, value_to_move) if len(self.high) > len(self.low): value_to_move = heapq.heappop(self.high) heapq.heappush(self.low, -value_to_move) def find_median(self): if len(self.low) > len(self.high): return -self.low[0] return (-self.low[0] + self.high[0]) / 2.0 def find_medians(stream): median_finder = MedianFinder() medians = [] for num in stream: median_finder.add_num(num) medians.append(median_finder.find_median()) return medians"},{"question":"A company is introducing a new product and they want to conduct a special CR software (Customer Relationship Software) which gives a report of the busiest customer. In their database, there are multiple purchase records. Each record includes the customer identifier and the time of the purchase. Every customer makes purchase exactly once at a particular time. They need a program that will help them to find out the customer who made multiple purchases during their busiest (most crowded) time. Write a function that identifies the busiest customer. If there are multiple customers with the same number of purchases at the busiest time, take the one that comes first lexicographically by their identifier. Input The input consists of an integer n (1 ≤ n ≤ 10^5) - the number of purchase records, followed by n pairs of customer identifier and time stamp of purchase in the format \'identifier timestamp\'. Note: - Customer identifiers are strings of lowercase English letters. - Timestamps are strings in the format \\"HH:MM\\". Output Output the customer identifier that represents the busiest customer. Example Input 7 alice 12:30 bob 12:30 charlie 12:30 alice 13:00 bob 13:00 alice 13:01 bob 14:00 Output alice Explanation Both \'alice\' and \'bob\' have 2 purchases at the same busiest time \'12:30\', but \'alice\' comes first lexicographically.","solution":"def busiest_customer(n, records): Identifies the busiest customer who made multiple purchases during the busiest time. :param n: Number of purchase records. :param records: List of tuples containing customer identifier and timestamp. :return: The customer identifier that is the busiest. from collections import defaultdict time_count = defaultdict(int) customer_time_count = defaultdict(lambda: defaultdict(int)) for customer, timestamp in records: time_count[timestamp] += 1 customer_time_count[customer][timestamp] += 1 busiest_time = max(time_count, key=lambda x: time_count[x]) max_customer_purchases = 0 busiest_customer = \\"\\" for customer in customer_time_count: if customer_time_count[customer][busiest_time] > max_customer_purchases or (customer_time_count[customer][busiest_time] == max_customer_purchases and customer < busiest_customer): max_customer_purchases = customer_time_count[customer][busiest_time] busiest_customer = customer return busiest_customer"},{"question":"John recently got interested in studying sequences of prime numbers. He has a sequence of N integers and wants to find the length of the longest contiguous subsequence where all the integers are prime. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Given a sequence of N integers, help John identify the length of the longest contiguous prime subsequence. Input: The first line contains a single integer N, the number of integers in the sequence. The second line contains N space-separated integers representing the sequence. Output: Print the length of the longest contiguous subsequence where all the integers are prime. Constraints: 1 ≤ N ≤ 10^5 1 ≤ integer ≤ 10^6 SAMPLE INPUT 10 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT 2 Explanation: In the given sequence, the prime numbers are 2, 3, 5, and 7. The longest contiguous subsequence of primes is [2, 3]. Therefore, the output is 2.","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def longest_prime_subsequence_length(n, sequence): max_len = 0 current_len = 0 for num in sequence: if is_prime(num): current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 0 return max_len"},{"question":"Bindi\'s Chocolate Factory produces a variety of chocolate bars. Each chocolate bar is wrapped in a distinctive packaging denoted by an integer value which indicates the quality rating of the bar. The factory staff need to distribute boxes of chocolates to different stores. Each store must receive a contiguous subarray (segment) of chocolates such that every store gets at least one chocolate bar. Bindi wants to maximize the chocolate bar with the highest quality rating that remains after distributing the boxes to the stores. In other words, after giving each store at least one contiguous segment, Bindi wants to identify the maximum quality rating of any chocolate bar that could be present in the factory (if it had not been distributed). Write a program that determines the maximum possible quality rating remaining for the factory after distributing contiguous segments to each store. You are given the number of stores S in the first line. The next line contains the number of chocolate bars C. The third line contains the quality ratings of the C chocolate bars in order - quality rating of the first chocolate bar to the last, separated by space. You need to print the maximum possible quality rating remaining after distributing the chocolates. Constraints: 1 ≤ S ≤ 100 1 ≤ C ≤ 300 Quality rating of each chocolate bar (Q): 1 ≤ Q ≤ 1000 Examples: 1) INPUT: 2 5 7 5 8 6 9 OUTPUT: 9 Explanation: The best strategy could be: * Give the first store chocolate bars with quality ratings [7, 5] * Give the second store chocolate bars with quality ratings [8, 6] * The remaining chocolate bar would have a quality rating of 9, which is the highest possible rating left. 2) INPUT: 3 6 3 4 1 7 6 5 OUTPUT: 6 Explanation: The best strategy could be: * Give the first store chocolate bars with quality ratings [3] * Give the second store chocolate bars with quality ratings [4] * Give the third store chocolate bars with quality ratings [1, 7] * The remaining chocolate bar would have a quality rating of 6, which is the highest possible rating left. 3) INPUT: 1 3 10 15 20 OUTPUT: 15 Explanation: The best strategy could be: * Give the only store chocolate bars with quality ratings [10] * The remaining chocolate bars would have the highest quality rating of 15. SAMPLE INPUT: 3 8 10 30 20 25 15 35 40 5 SAMPLE OUTPUT: 40","solution":"def max_remaining_quality(S, C, quality_ratings): Given the number of stores S, the number of chocolate bars C, and their quality_ratings, this function determines the maximum possible quality rating remaining after distributing chocolates to all stores such that each store receives at least one contiguous segment. :param S: int - Number of stores :param C: int - Number of chocolate bars :param quality_ratings: list of int - Quality ratings of chocolate bars :return: int - Maximum possible quality rating remaining # Each store has to receive at least one chocolate bar min_chocolates_distributed = S if min_chocolates_distributed >= C: # If the minimum chocolates distributed is not less than the count of bars, # it means all bars will be distributed, so no bar remains in factory. return -1 # The best possible remaining chocolate is the highest quality rating from the list return max(quality_ratings) # Parsing the input and calling the function would be done elsewhere, in the main application part"},{"question":"You are given a string consisting of lowercase letters and question marks (\'?\'). Your task is to replace each question mark with any lowercase letter such that no three consecutive characters are the same. If it is not possible to replace all the question marks with lowercase letters to meet the condition, output \\"Impossible\\". If there are multiple valid strings, output any one of them. Input: A single line containing a string S consisting of lowercase letters and question marks. Output: A single line containing the modified string or \\"Impossible\\" if no valid string exists. Constraints: 1 <= |S| <= 1000 SAMPLE INPUT 1 a?b SAMPLE OUTPUT 1 acb SAMPLE INPUT 2 ???? SAMPLE OUTPUT 2 abcd SAMPLE INPUT 3 aa?aa SAMPLE OUTPUT 3 aabaa","solution":"def replace_question_marks(s): Replaces question marks in the given string with lowercase letters so that no three consecutive characters are the same. Returns the modified string or \'Impossible\' if no valid string exists. n = len(s) if n == 1: return \'a\' if s == \'?\' else s s = list(s) # Convert string to list for mutability for i in range(n): if s[i] == \'?\': for char in \'abcdefghijklmnopqrstuvwxyz\': if (i > 0 and s[i - 1] == char) or (i < n - 1 and s[i + 1] == char): continue s[i] = char break for i in range(n - 2): if s[i] == s[i + 1] == s[i + 2]: return \'Impossible\' return \'\'.join(s)"},{"question":"A string is said to be beautiful if no two adjacent characters are the same. Given a string s, determine the minimum number of characters you need to replace to make the string beautiful. If the string is already beautiful, the output should be 0. Input The input contains a single string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output Print a single integer — the minimum number of characters to replace to make the string beautiful. Examples Input ab Output 0 Input aa Output 1 Input aab Output 1 Input ababa Output 0 Note In the first example, the string \\"ab\\" is already beautiful, so no replacements are needed. In the second example, the string \\"aa\\" can be made beautiful by replacing one of the \'a\' characters with any letter other than \'a\'. In the third example, the string \\"aab\\" can be made beautiful by replacing the second \'a\' with a different letter, resulting in \\"axb\\" where \'x\' can be any letter other than \'a\' and \'b\'. In the fourth example, the string \\"ababa\\" is already beautiful, hence no replacements are needed.","solution":"def min_replacements_to_make_beautiful(s): replacements = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: replacements += 1 return replacements"},{"question":"You are given a city map represented by a grid of size n x m. Each cell in the grid could either be a road (represented by \'.\') or an obstacle/building (represented by \'#\'). Moving on roads is allowed in four directions: up, down, left, and right. However, you cannot move diagonally or through buildings. Your task is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. If there is no such path, return -1. Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), denoting the dimensions of the grid. The following n lines each contain a string of length m, representing the city map. Each string only contains characters \'.\' (road) and \'#\' (building). Output: Output an integer denoting the shortest path length from the top-left corner to the bottom-right corner of the grid. If no such path exists, return -1. Examples Input 3 3 ... .#. ... Output 4 Input 3 3 # .#. ... Output -1 Input 5 5 ..... .#. ..#.. .#... ..... Output 8","solution":"from collections import deque def shortest_path_in_city_map(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1"},{"question":"The Longest Increasing Subsequence Given an array of integers, find the length of the longest strictly increasing subsequence. Input An integer N indicating the size of the array and then the N elements of the array, separated by spaces. Output Print the length of the longest increasing subsequence in a line. Constraints * 1 leq N leq 1000 * -10^6 leq text{array elements} leq 10^6 Sample Input 1 6 10 22 9 33 21 50 Sample Output 1 4 Sample Input 2 8 5 7 4 8 6 12 3 15 Sample Output 2 5 Sample Input 3 5 2 2 2 2 2 Sample Output 3 1 Explanation In the first sample input, the longest increasing subsequence is [10, 22, 33, 50], which has a length of 4. In the second sample input, the longest increasing subsequence is [5, 7, 8, 12, 15], which has a length of 5. In the third sample input, all elements are the same, so the longest increasing subsequence has a length of 1.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Vasya has recently taken up gardening and decided to grow a rectangular garden with the dimensions n by m. He wants to plant flowers such that they form a border around the garden. The garden is initially empty, and he can plant one flower in each cell of the garden. A border of flowers means that all flowers are planted on the cells that lie exactly on the boundary of the garden. If the garden is a 1x1 cell or a single row or column, the entire garden is considered the boundary. Help Vasya figure out how many flowers he needs to plant to form the border of his garden. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the garden. Output Print a single integer — the number of flowers needed to form the border of the garden. Examples Input 3 4 Output 10 Input 1 5 Output 5 Input 6 1 Output 6 Input 4 4 Output 12 Note In the first sample, the garden is a 3x4 grid: ``` # # # # ``` Vasya plants flowers (denoted with #) on the outer cells. In the second sample, the garden is a 1x5 grid: ``` # ``` In the third sample, the garden is a 6x1 grid: ``` # # # # # # ``` In the fourth sample, the garden is a 4x4 grid: ``` # # # # ``` The flowers are planted along the outer border cells of the garden.","solution":"def garden_border_flowers(n, m): Determines the number of flowers needed to form the border of an n by m garden. :param n: Number of rows in the garden :param m: Number of columns in the garden :return: Number of flowers needed for the border # Special case where the garden is 1 row or 1 column or 1x1 if n == 1 or m == 1: return n * m # Calculate the perimeter minus the 4 corners which are added twice return 2 * (n + m - 2)"},{"question":"Igor has designed a highly efficient algorithm to automatically transcribe incoming Morse code to regular English text. The algorithm requires two main components: a Morse dictionary and a comprehensive parser. Igor now needs to implement the parser function to finalize his project. Your task is to write this function for him. The Morse dictionary is given, where each key represents a character from the alphabet (A-Z) or digits (0-9), and the corresponding value is the Morse code representation of that character. To simplify, the Morse code only contains periods (.) for dots, dashes (-) for long sounds, and spaces are used to separate individual Morse code characters in a sequence. The parser function must take two inputs: the Morse dictionary and a string that contains the sequence of Morse code to be translated. The function should return the corresponding decrypted English text. # Input The input consists of: 1. A dictionary `morse_dict` where the keys are strings representing alphabet characters (A-Z) and digits (0-9), and the values are strings representing Morse code. 2. A string `morse_code` which is the sequence of Morse code to be translated. The Morse code characters are separated by single spaces. # Output The function should output a single string which is the decrypted English text from the Morse code. # Examples Example 1: **Input:** ```python morse_dict = {} morse_code = \'.... . .-.. .-.. --- .-- --- .-. .-.. -..\' ``` **Output:** ``` \'HELLO WORLD\' ``` Example 2: **Input:** ```python morse_dict = {} morse_code = \'-- --- .-. ... . -.-. --- -.. .\' ``` **Output:** ``` \'MORSE CODE\' ``` # Constraints - The Morse dictionary will have exactly 36 entries. - The input Morse code string will contain only valid Morse code as per the dictionary, including proper spaces for character separation. - The Morse code string will be less than or equal to 1000 characters in length.","solution":"def morse_to_text(morse_dict, morse_code): Translates a morse code string to regular English text using the provided morse dictionary. Parameters: morse_dict (dict): A dictionary containing the morse code mappings to English characters morse_code (str): A string containing the morse code to be converted Returns: str: The translated English text reverse_morse_dict = {value: key for key, value in morse_dict.items()} morse_characters = morse_code.split(\' \') translated_text = [] for morse_character in morse_characters: if morse_character == \'\': translated_text.append(\' \') # Two spaces indicates a word break else: translated_text.append(reverse_morse_dict[morse_character]) # Join characters into the final string and return return \'\'.join(translated_text).replace(\' \', \' \') # Example usage: # morse_dict = { ... } # morse_code = \'.... . .-.. .-.. --- .-- --- .-. .-.. -..\' # print(morse_to_text(morse_dict, morse_code))"},{"question":"Peter is trying to analyze the frequency of words in a document to understand which words are most commonly used. He wants to write a program that can read a document and output the top K most frequent words in descending order of frequency. If two words have the same frequency, they should be listed in lexicographical order. Peter has already preprocessed the document such that all words are lowercase, and words are separated by spaces without any punctuation or special characters. Your task is to help Peter by writing a function that takes a string (the document) and an integer K, and returns a list of the top K most frequent words. # Input The function should accept the following parameters: 1. `document` (a string): The preprocessed document containing words separated by spaces. 2. `K` (an integer): The number of top frequent words to return. # Output The function should return a list of strings: the top K most frequent words in descending order of frequency. If multiple words have the same frequency, they should be sorted in lexicographical order. # Example Example 1 Input: ```python document = \\"to be or not to be that is the question\\" K = 3 ``` Output: ```python [\\"be\\", \\"to\\", \\"is\\"] ``` Example 2 Input: ```python document = \\"a a a b b b c c d\\" K = 2 ``` Output: ```python [\\"a\\", \\"b\\"] ``` # Constraints - The document string will not exceed 1000 words. - Each word in the document will not exceed 20 characters. - K is a positive integer that is less than or equal to the number of unique words in the document. # Note Words in the document are considered case-insensitive, and all words are provided in lowercase format. The document will not contain any punctuation marks.","solution":"from collections import Counter def top_k_frequent_words(document, K): Returns the top K most frequent words in the document, in descending order of frequency. If two words have the same frequency, they are sorted lexicographically. :param document: str, the preprocessed document containing words separated by spaces. :param K: int, the number of top frequent words to return. :return: list of str, the top K most frequent words. # Split the document into words words = document.split() # Count the frequency of each word word_count = Counter(words) # Create a list of words sorted by frequency and then alphabetically sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Extract the top K words top_k_words = [word for word, count in sorted_words[:K]] return top_k_words"},{"question":"You are given an array of positive integers. You can choose any two adjacent elements in the array and replace them with their sum in a single operation. After each operation, the length of the array decreases by one because one element replaces the two chosen elements. Your task is to determine the minimum number of operations needed to make all the elements in the array the same. Input The input consists of a single test case formatted as follows: The first line contains an integer n (2 leq n leq 200 000), which is the number of elements in the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), separated by spaces, which are the elements of the array. Output Output a single integer which is the minimum number of operations needed to make all the elements in the array the same. Sample Input 1 4 1 2 2 1 Sample Output 1 3 Sample Input 2 3 3 3 3 Sample Output 2 0 Sample Input 3 5 1 2 3 4 5 Sample Output 3 4 Explanation In Sample Input 1, you can perform the following operations: 1. Combine the first two elements: [1, 2, 2, 1] Rightarrow [3, 2, 1] 2. Combine the last two elements: [3, 2, 1] Rightarrow [3, 3] 3. Combine the remaining elements: [3, 3] Rightarrow [6] Thus, it takes 3 operations to make all elements equal. In Sample Input 2, all elements are already equal, so no operations are needed, and the output is 0. In Sample Input 3, you can perform the following operations step-by-step until all elements are the same, resulting in 4 operations.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations needed to make all elements in the array the same. # Check for special case where all elements are already the same if all(x == arr[0] for x in arr): return 0 # We\'re aiming to reduce the array to a single element through n-1 sum operations return len(arr) - 1"},{"question":"Given a grid of dimensions m x n and a starting point (x, y) in it, write a function to calculate the minimum number of steps required to move from the starting point to any boundary of the grid. You can move up, down, left, or right from the current position. It is guaranteed that the starting point (x, y) is within the bounds of the grid. Input - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns of the grid, respectively. - The second line contains two integers x and y (0 ≤ x < m, 0 ≤ y < n) — the coordinates of the starting point within the grid. Output Print a single integer — the minimum number of steps required to move from the starting point to any boundary of the grid. Examples Input 4 5 1 3 Output 1 Input 7 8 4 2 Output 2 Note In the first sample test, the grid has 4 rows and 5 columns, and the starting coordinates are (1, 3). Moving one step to the left takes you to the boundary of the grid. In the second sample test, the grid has 7 rows and 8 columns, and the starting coordinates are (4, 2). You need to move 2 steps down to reach the boundary of the grid.","solution":"def minimum_steps_to_boundary(m, n, x, y): This function calculates the minimum number of steps required to move from the starting point (x,y) to any boundary of the grid with dimensions m x n. min_steps_to_top = x min_steps_to_bottom = m - 1 - x min_steps_to_left = y min_steps_to_right = n - 1 - y return min(min_steps_to_top, min_steps_to_bottom, min_steps_to_left, min_steps_to_right)"},{"question":"A company has a hierarchical structure where each employee has a unique employee ID, an employee level, and a list of subordinates, who are also employees. The CEO of the company is at level 1, the employees directly reporting to the CEO are at level 2, and so on. Given the hierarchical structure of the company as input, write a program to calculate the total number of employees at a given level. Input The first line contains two integers: N (the number of employees) and Q (the number of queries). The next N lines contain the details of each employee in the following format: ID, Level, and a space-separated list of subordinate IDs. If an employee has no subordinates, the list will be empty. The next Q lines contain one integer each: the level to query. Output For each query, output the total number of employees at the queried level in a separate line. Constraints 1 ≤ N ≤ 1000 1 ≤ Q ≤ 100 1 ≤ ID ≤ 10000 1 ≤ Level ≤ 100 Input: 5 3 1 1 2 3 2 2 4 5 3 2 4 3 5 3 2 3 4 Output: 2 2 0","solution":"def count_employees_at_level(N, Q, employees, queries): Given the hierarchical structure of the company, count the number of employees at given levels. Args: N (int): Number of employees. Q (int): Number of queries. employees (List[Tuple[int, int, List[int]]]): List of employee details. queries (List[int]): List of levels to query. Returns: List[int]: Number of employees at each queried level. from collections import defaultdict # Create a dictionary to count employees at each level level_count = defaultdict(int) for emp in employees: emp_id, level, subordinates = emp level_count[level] += 1 # Answer each query results = [level_count[query] for query in queries] return results"},{"question":"You are evaluating a dataset of students\' scores in three different subjects - Mathematics, Science, and English. Your task is to determine the top student in each subject for a given dataset. The top student is the one who has the highest score in a particular subject. In case of a tie (i.e., multiple students having the same highest score), report all students who have the highest score. Input The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of students in that test case. Each of the next N lines contains a record of a student, including their name (a string without spaces) and their scores in Mathematics, Science, and English (three integers). Output For each test case, output three lines: The first line contains the name(s) of the student(s) with the highest score in Mathematics, the second line contains the name(s) of the student(s) with the highest score in Science, and the third line contains the name(s) of the student(s) with the highest score in English. If multiple students have the highest score in a subject, list their names separated by a space. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Scores ≤ 100 SAMPLE INPUT 1 3 Alice 95 80 70 Bob 85 90 100 Charlie 90 85 100 SAMPLE OUTPUT Alice Bob Bob Charlie","solution":"def find_top_students(test_cases): Function to determine the top student(s) in Mathematics, Science, and English for each test case. Args: test_cases (list): List of test cases. Each test case is a list of tuples. Each tuple contains the student details: (name, mathematics_score, science_score, english_score) Returns: list: A list of results for each test case containing the top student(s) in mathematics, science, and english. results = [] for students in test_cases: math_scores = {} science_scores = {} english_scores = {} for student in students: name, math, science, english = student if math in math_scores: math_scores[math].append(name) else: math_scores[math] = [name] if science in science_scores: science_scores[science].append(name) else: science_scores[science] = [name] if (english in english_scores): english_scores[english].append(name) else: english_scores[english] = [name] max_math_score = max(math_scores.keys()) max_science_score = max(science_scores.keys()) max_english_score = max(english_scores.keys()) results.append(( \' \'.join(math_scores[max_math_score]), \' \'.join(science_scores[max_science_score]), \' \'.join(english_scores[max_english_score]) )) return results"},{"question":"You are given a list of n integers where each number represents the height of a building. The heights of the buildings are given in a strictly increasing order from left to right. A beam of light is placed immediately to the left of the first building and it starts shinning to the right. A building will be illuminated by the beam from the left if and only if it is taller than every building to its left in the list (excluding itself). Write a function `number_of_illuminated_buildings` that takes an array of integers representing the heights of the buildings and returns the number of buildings that will be illuminated by the beam of light. Input The first line of input contains one integer `n` (1 ≤ n ≤ 10^5) — the number of buildings. The second line of input contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10^9, h_i < h_i+1 for all 1 ≤ i < n) — the heights of the buildings. Output Print one integer — the number of buildings that will be illuminated by the beam of light. Examples Input 5 1 2 3 4 5 Output 5 Input 3 10 20 30 Output 3 Input 4 1 5 6 7 Output 4 Input 6 2 3 4 8 9 10 Output 6 Note In the first test case, all buildings are illuminated because each subsequent building is taller than the previous one. In the second test case, all buildings are illuminated for the same reason. In the third test case, all buildings are illuminated for the same reason. In the fourth test case, all buildings are illuminated for the same reason.","solution":"def number_of_illuminated_buildings(building_heights): Returns the number of buildings that will be illuminated by the beam of light. Args: building_heights (list of int): A list of integers representing the heights of the buildings. Returns: int: The number of buildings that will be illuminated. return len(building_heights)"},{"question":"You are given a rectangular grid with N rows and M columns, where each cell contains an integer value. You have to find the largest sum of values in a subgrid with the following constraint: * The subgrid must form a contiguous rectangle. Constraints * 1 ≤ N, M ≤ 200 * -1000 ≤ grid[i][j] ≤ 1000 Input Input is given from Standard Input in the following format: N M grid[1][1] grid[1][M] : grid[N][1] grid[N][M] Output Print the largest sum of values in any contiguous rectangular subgrid. Examples Input 3 3 1 2 -1 -3 4 5 -2 3 -4 Output 10 Input 2 4 -1 -2 -3 -4 -5 -6 -7 -8 Output -1","solution":"def largest_sum_subgrid(N, M, grid): def max_subarray_sum(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(M): temp = [0] * N for right in range(left, M): for i in range(N): temp[i] += grid[i][right] current_max_sum = max_subarray_sum(temp) max_sum = max(max_sum, current_max_sum) return max_sum # Example usage: N = 3 M = 3 grid = [ [1, 2, -1], [-3, 4, 5], [-2, 3, -4] ] print(largest_sum_subgrid(N, M, grid)) # Output should be 10"},{"question":"Given a string of mixed characters (alphabets, numbers, special characters, and whitespace), you need to reorder the string based on the following rules: 1. All alphabetic characters should appear first in the string, maintaining their original order. 2. All numeric characters should appear next, maintaining their original order. 3. All special characters should appear after numeric characters, maintaining their original order. 4. All spaces should appear at the end of the string, in the order they were in the original string. Write a program that takes a string `s` as an input and outputs the reordered string. Input - A single line containing a string `s` (1 ≤ length of s ≤ 105), which includes alphabetic characters, numeric characters, special characters, and spaces. Output - A single line containing the reordered string according to the rules mentioned above. Example Input `a1b2+_ c3d!` Output `abcd123+_! ` Explanation In the string `a1b2+_ c3d!`: - Alphabetic characters are `a, b, c, d` - Numeric characters are `1, 2, 3` - Special characters are `+, _, !` - Spaces are ` ` So, the reordered string is `abcd123+_! `.","solution":"def reorder_string(s): Reorders a string so that alphabetic characters come first, then numbers, then special characters, then spaces, all maintaining their original order. alphabets = [] numbers = [] specials = [] spaces = [] for char in s: if char.isalpha(): alphabets.append(char) elif char.isdigit(): numbers.append(char) elif char.isspace(): spaces.append(char) else: specials.append(char) return \'\'.join(alphabets + numbers + specials + spaces)"},{"question":"A city planner is working to design an optimal route for public transit buses. The buses travel through a city laid out in a grid. Each cell in the grid represents a block, and certain blocks may be roads or buildings. Buses can only travel through blocks designated as roads. The planner needs to find the shortest path for a bus to travel between different points in the city. It is imperative to avoid buildings and only traverse through roads. You have been tasked to help the city planner by writing a program that calculates the shortest paths. Given a grid of size M× N where each cell is either a road (\'.\') or a building (\'#\'), determine the length of the shortest path from a given start point (sx, sy) to a given endpoint (ex, ey). If there is no valid path from the start to the end, return -1. # Input 1. The first line contains two integers M and N (1 ≤ M, N ≤ 100) representing the number of rows and columns in the grid. 2. The next M lines contain N characters each (either \'.\' or \'#\'), representing the city layout. 3. The final line contains four integers, sx, sy, ex, ey (0 ≤ sx, sy, ex, ey < 100), representing the start and end coordinates. # Output - Output the length of the shortest path from (sx, sy) to (ex, ey). If no path exists, output -1. # Sample Input ``` 5 5 . . . # . # # . # . . . . . # . # # . # . . . . . 0 0 4 4 ``` # Sample Output ``` 8 ``` # Explanation In the given grid: ``` . . . # . # # . # . . . . . # . # # . # . . . . . ``` The shortest path from (0, 0) to (4, 4) is of length 8, circumventing around the buildings represented by \'#\'. # Constraints - The grid size will be such that it can fit in memory. - There will always be a single start and end point. - The start and end points will always be roads.","solution":"from collections import deque def shortest_path(M, N, grid, sx, sy, ex, ey): Finds the shortest path in a grid from (sx, sy) to (ex, ey), avoiding buildings. :param M: int, number of rows :param N: int, number of columns :param grid: list of lists, representing the city layout :param sx: int, start x-coordinate :param sy: int, start y-coordinate :param ex: int, end x-coordinate :param ey: int, end y-coordinate :return: int, shortest path length or -1 if no valid path exists if grid[sx][sy] == \'#\' or grid[ex][ey] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy)]) visited = [[False] * N for _ in range(M)] visited[sx][sy] = True distance = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == ex and y == ey: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) distance += 1 return -1"},{"question":"Create a program that determines if two given strings are isomorphic. Two strings str1 and str2 are isomorphic if the characters in str1 can be replaced to get str2. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. Input The first line contains an integer T, the number of test cases. The description of the T test cases follows. Each test case consists of two strings str1 and str2. Output For each test case, output \\"YES\\" if the given strings are isomorphic, otherwise \\"NO\\". Constraints 1 ≤ |str1|, |str2| ≤ 10^5 The sum of the lengths of strings in one test case does not exceed 10^6. 1 ≤ T ≤ 500 Example Input: 3 egg add foo bar paper title Output: YES NO YES Explanation Example case 1. By replacing \'e\' with \'a\' and \'g\' with \'d\', str1 can be converted to str2. Example case 2. There is no way to replace characters of str1 to get str2 while preserving the order and unique mapping. Example case 3. By replacing \'p\' with \'t\', \'a\' with \'i\', \'p\' with \'t\', \'e\' with \'l\', and \'r\' with \'e\', str1 can be transformed into str2.","solution":"def are_isomorphic(str1, str2): Determines if two strings str1 and str2 are isomorphic. if len(str1) != len(str2): return \\"NO\\" map_str1_to_str2 = {} map_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if char1 in map_str1_to_str2: if map_str1_to_str2[char1] != char2: return \\"NO\\" else: if char2 in map_str2_to_str1: return \\"NO\\" map_str1_to_str2[char1] = char2 map_str2_to_str1[char2] = char1 return \\"YES\\" def process_test_cases(T, test_cases): Processes T test cases and returns a list of results for the isomorphism check. results = [] for str1, str2 in test_cases: results.append(are_isomorphic(str1, str2)) return results"},{"question":"You are participating in a running competition where results are recorded in a leaderboard. Each participant has a unique score. Your task is to determine the rank of each participant from their scores in descending order (highest score gets rank 1, second highest gets rank 2, and so on). Write a program that, given a list of scores, prints out the rank of each score in the original list format. Constraints * 1 ≤ number of participants ≤ 100 * 0 ≤ score ≤ 1000 * All scores are unique Input Input is given from Standard Input in the following format: n (the number of participants) score_1 score_2 ... score_n Output Print the rank of each score in the original input order, separated by spaces. Examples Input 5 300 500 200 600 100 Output 3 2 4 1 5 Input 3 450 350 550 Output 2 3 1","solution":"def rank_scores(n, scores): Given the number of participants and their scores, return the rank of each score in the original list. Args: n: an integer denoting the number of participants scores: a list of integers representing the scores Returns: A list of integers representing the rank of each score in the original list order. # Sort the scores and determine ranks sorted_scores = sorted(scores, reverse=True) score_to_rank = {score: rank + 1 for rank, score in enumerate(sorted_scores)} # Assign ranks based on original score list ranks = [score_to_rank[score] for score in scores] return ranks"},{"question":"Barbara loves organizing her books and puzzles carefully and neatly. One day, she realized she could look at the number of different ways she can organize them as mini puzzles. Barbara has N books numbered from 1 to N. Each book can be either standing or lying down on the shelf. She noticed a particular pattern and thought of a game: a book can either lie down or stand in place of another book, but no two books can have the same state (i.e., both cannot be standing or lying down at the same time). Now, Barbara wonders how many possible ways she can organize her N books in such a way that each book has exactly one other book as its pair to switch the position with. Given N, determine the number of different ways Barbara can organize her books to ensure each book can switch places with exactly one other book. Input The first line contains an integer N (2 ≤ N ≤ 10^5). Output Output a single integer, which is the number of ways to organize the books. Example Input 4 Output 3 Note For N = 4, the possible ways are: 1. First book lies down and pairs with the second book standing. 2. First book lies down and pairs with the third book standing. 3. First book lies down and pairs with the fourth book standing. The positions of remaining books automatically get decided based on the initial choice. Thus, there are 3 valid ways for N = 4.","solution":"def count_book_organizations(N): Returns the number of ways to organize N books such that each book can switch places with exactly one other book. # For N books, the valid pairs are: # For N = 2, there is only 1 way: (1, 2) # For N = 4, there are 3 ways: (1, 2), (3, 4); (1, 3), (2, 4); (1, 4), (2, 3) # For N = 6, there are 15 ways: (1, 2), (3, 4), (5, 6); (1, 3), (2, 4), (5, 6) # Essentially it is the (N/2)-th Catalan number if N % 2 != 0: return 0 # It\'s impossible to pair all books if N is odd pairs_count = N // 2 catalan = [0] * (pairs_count + 1) catalan[0] = 1 for i in range(1, pairs_count + 1): catalan[i] = 0 for j in range(i): catalan[i] += catalan[j] * catalan[i - 1 - j] return catalan[pairs_count]"},{"question":"You are given an array of integers. Your task is to find the smallest positive integer that does not appear in the array. If the array is empty, the smallest positive integer that does not appear in the array is 1. For example, if the array is [1, 3, 6, 4, 1, 2], then the smallest positive integer that does not appear in the array is 5. If the array is [1, 2, 3], then the smallest positive integer that does not appear in the array is 4. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. Each test case contains: - The first line contains an integer n (0 ≤ n ≤ 100) – the length of the array. - The second line contains n integers, the elements of the array. Output For each test case, print a single integer – the smallest positive integer that does not appear in the array. Example Input 3 6 1 3 6 4 1 2 3 1 2 3 0 Output 5 4 1 Explanation - For the first test case, the smallest positive integer that does not appear in the array [1, 3, 6, 4, 1, 2] is 5. - For the second test case, the smallest positive integer that does not appear in the array [1, 2, 3] is 4. - For the third test case, since the array is empty, the smallest positive integer that does not appear in the array is 1.","solution":"def find_smallest_missing_positive_integer(arr): Finds the smallest positive integer that does not appear in the array. if not arr: return 1 # Use a set for O(1) lookups number_set = set(arr) # Start checking from 1 upwards smallest_missing = 1 while smallest_missing in number_set: smallest_missing += 1 return smallest_missing def process_test_cases(test_cases): Processes multiple test cases for finding the smallest missing positive integer in each array. results = [] for case in test_cases: _, arr = case results.append(find_smallest_missing_positive_integer(arr)) return results"},{"question":"You are given an array of n integers. You need to divide this array into exactly two non-empty subarrays such that the maximum sum of the subarray with the smaller sum is minimized. In other words, if the array is divided into subarrays a and b, you need to minimize the value max(sum(a), sum(b)). Write a function that takes in an array and returns the minimized maximum sum of the two subarrays. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the elements of the array. Output Print the minimized maximum sum possible for the two subarrays after dividing the given array. Example Input 5 1 2 3 4 5 Output 9 Input 4 10 10 10 10 Output 20 Note: In the first example, one optimal way to split the array is into [1, 2, 3] and [4, 5] which gives the sums 6 and 9. The maximum of these two sums is 9, which is the minimized maximum sum for this splitting. In the second example, splitting the array into [10, 10] and [10, 10] gives sums 20 and 20. The maximum of these sums is also 20, which is the minimized maximum sum possible.","solution":"def minimize_maximum_sum_partition(n, arr): This function takes an array and returns the minimized maximum sum of the two subarrays when split into exactly two non-empty subarrays. total_sum = sum(arr) left_sum = 0 min_max_sum = float(\'inf\') for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum max_sum = max(left_sum, right_sum) min_max_sum = min(min_max_sum, max_sum) return min_max_sum"},{"question":"A treasure hunter has discovered a grid of land containing hidden treasures. The land is represented by an n × m grid where each cell contains an integer representing the number of treasures buried in that cell. A cell with a value of zero has no treasure. The hunter can excavate any cell containing treasures to collect all treasures from that cell. After collecting treasures from a cell, the cell becomes empty (its value becomes zero). The hunter can only move to adjacent cells, where adjacent cells are those that share a side. The hunter wants to dig up all treasures, ensuring that all treasures are collected by starting from any cell containing treasures and moving only through adjacent cells until all treasures are collected. Determine if it\'s possible for the hunter to collect all the treasures this way. Write a function that determines if it is possible for the hunter to collect all the treasures through a series of excavations while respecting the movement constraints. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the grid, respectively. Each of the next n lines contains m non-negative integers representing the grid, where each integer ai,j (0 ≤ ai,j ≤ 109) represents the number of treasures in the cell at the ith row and jth column. Output Output \\"YES\\" (without quotes) if the hunter can collect all treasures by moving between adjacent cells. Otherwise, output \\"NO\\" (without quotes). Examples Input 3 3 1 0 0 0 1 0 0 0 1 Output NO Input 3 3 1 1 0 0 1 1 0 0 0 Output YES Note In the first example, the treasures are located in three separate cells that are not connected. Thus, it is not possible to collect all the treasures by moving between adjacent cells. In the second example, the cells containing treasures are connected, making it possible to collect all the treasures by starting from any one of them and moving between adjacent cells.","solution":"def can_collect_all_treasures(n, m, grid): Determines if it\'s possible to collect all treasures while respecting the movement constraints of moving only through adjacent cells. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list representing the grid with treasures :return: \\"YES\\" if it\'s possible to collect all treasures, otherwise \\"NO\\" def dfs(x, y, visited): # Set the current cell as visited visited[x][y] = True # Possible movements: right, left, down, up movements = [(0, 1), (0, -1), (1, 0), (-1, 0)] for movement in movements: nx, ny = x + movement[0], y + movement[1] # If the new position is within bounds and has treasures and is not visited if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != 0 and not visited[nx][ny]: dfs(nx, ny, visited) # Create a visited matrix initialized to False visited = [[False for _ in range(m)] for _ in range(n)] # Find the first cell with treasures to start the DFS start_x, start_y = -1, -1 for i in range(n): for j in range(m): if grid[i][j] != 0: start_x, start_y = i, j break if start_x != -1: break # If there are no treasures at all in the grid if start_x == -1: return \\"YES\\" # Perform DFS to visit all connected cells with treasures dfs(start_x, start_y, visited) # Check if all cells with treasures have been visited for i in range(n): for j in range(m): if grid[i][j] != 0 and not visited[i][j]: return \\"NO\\" return \\"YES\\""},{"question":"Create a function that takes a list of integers and returns the length of the longest subsequence where the difference between consecutive elements is consistent. This means the difference between every two consecutive integers in the subsequence should be the same. Example: Input: [1, 7, 3, 5, 9, 4] Output: 3 Explanation: One of the longest subsequences with consistent difference is [7, 5, 3]. The difference between consecutive elements is -2. Another possible subsequence could be [1, 3, 5], with a consistent difference of 2. Both subsequences have a length of 3. Input: [10, 8, 6, 4, 2] Output: 5 Explanation: In this case, the entire list is a subsequence with a consistent difference of -2. Thus, the length of the longest subsequence is 5. You must implement the solution using a dynamic programming approach. The expectation is to solve the problem in O(n^2) time complexity where n is the length of the input list.","solution":"def longest_arith_seq_length(nums): if not nums: return 0 n = len(nums) if n == 1: return 1 # dp will store the length of the longest arithmetic subsequence ending at i with difference d dp = {} max_length = 1 for i in range(n): for j in range(i): diff = nums[i] - nums[j] if (j, diff) in dp: dp[(i, diff)] = dp[(j, diff)] + 1 else: dp[(i, diff)] = 2 max_length = max(max_length, dp[(i, diff)]) return max_length"},{"question":"Given an integer array a of length n, we define an \\"inversion\\" as a pair of indices (i, j) where i < j and a[i] > a[j]. A \\"local inversion\\" is an inversion where j = i + 1. You are given an integer array a. Determine the count of local inversions and the count of global inversions in the array. The array has 1 ≤ n ≤ 100000 elements. Input The first line contains an integer n (1 ≤ n ≤ 100000), representing the length of the array. The second line contains n integers (1 ≤ a_i ≤ n) — the elements of the array. Output Output two integers — the number of local inversions and the number of global inversions. Examples Input 5 1 3 2 4 5 Output 1 1 Input 3 3 2 1 Output 2 3 Note In the first sample, the array a = [1, 3, 2, 4, 5]. The local inversion is (3, 2). The global inversion is also (3, 2), making counts of local inversions 1 and global inversions 1. In the second sample, the array a = [3, 2, 1]. The local inversions are (3, 2) and (2, 1). The global inversions are (3, 2), (3, 1), and (2, 1), making counts of local inversions 2 and global inversions 3.","solution":"def count_inversions(arr): n = len(arr) local_inversions = 0 global_inversions = 0 # Count local inversions for i in range(n - 1): if arr[i] > arr[i + 1]: local_inversions += 1 # Count global inversions using merge sort def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted array inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*n global_inversions = merge_sort_and_count(arr, temp_arr, 0, n-1) return local_inversions, global_inversions"},{"question":"A company has a network of sensors set up on their production line. Each sensor collects data periodically and sends it to a central server for processing. Due to the large volume of data, each sensor will store the data in a local buffer and only send the data to the server at specific intervals. The server receives a log file with entries detailing the time each sensor sends data, the amount of data sent, and the time taken for the sensor to send that data. The server needs to process these log entries and determine how much data is successfully received and processed over a given period. Write a program to simulate this scenario and determine the total amount of data successfully received by the server at the end of the given period. Input The first line of input contains two integers, p and n (1 ≤ p ≤ 1440, 1 ≤ n ≤ 100000) — the period in minutes and the number of log entries. The next n lines each contain three integers, ti, ai, and di (1 ≤ ti ≤ 1440, 1 ≤ ai ≤ 10^6, 1 ≤ di ≤ 60) — the minute at which the data is sent, the amount of data sent, and the time taken to send that data respectively. The log entries are provided in chronological order. Output Output a single integer representing the total amount of data successfully received and processed by the server at the end of the given period. Examples Input 60 3 10 500 5 20 300 2 30 700 10 Output 1500 Input 120 5 10 500 30 25 600 15 40 700 20 55 800 25 70 900 30 Output 3500 Input 90 4 15 400 10 30 500 20 45 600 15 60 700 25 Output 2200 Note In the first example, the server successfully receives all three data entries within the given 60 minutes period. The total amount of data received is 500 + 300 + 700 = 1500. In the second example, all five data entries are successfully received within the given 120 minutes period. The total amount of data received is 500 + 600 + 700 + 800 + 900 = 3500. In the third example, all four data entries are successfully received within the given 90 minutes period. The total amount of data received is 400 + 500 + 600 + 700 = 2200.","solution":"def total_data_received(p, n, log_entries): Calculate the total amount of data successfully received by the server at the end of the given period. Args: p (int): the period in minutes n (int): the number of log entries log_entries (list): a list of tuples where each tuple contains three integers (ti, ai, di) representing the minute data is sent, the amount of data sent, and the time taken to send that data respectively. Returns: int: the total amount of data successfully received by the server. total_data = 0 for ti, ai, di in log_entries: if ti + di <= p: total_data += ai return total_data"},{"question":"There is a string s consisting of lowercase English letters. You can perform the following operation on s any number of times: - Choose any two adjacent identical characters and remove them from the string. Your objective is to determine if it is possible to reduce the string to an empty string by performing the above operation an appropriate number of times. Constraints * 1 ≤ |s| ≤ 100 * s consists of lowercase English letters. Input Input is given from Standard Input in the following format: ```plaintext s ``` Output Print \\"YES\\" if it is possible to reduce the string to an empty string, otherwise print \\"NO\\". Examples Input ```plaintext abccba ``` Output ```plaintext YES ``` Input ```plaintext abccab ``` Output ```plaintext NO ``` Input ```plaintext aa ``` Output ```plaintext YES ``` Input ```plaintext abc ``` Output ```plaintext NO ```","solution":"def can_reduce_to_empty_string(s): Given a string s consisting of lowercase English letters, returns \\"YES\\" if it is possible to reduce the string to an empty string by removing any two adjacent identical characters any number of times, otherwise returns \\"NO\\". stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given a list of n integers, representing the number of items in n different boxes. Initially, the first box is open and the other boxes are closed. You can move items between adjacent boxes if the boxes are open. At each second, you can open one closed box, but only if it is adjacent to an already open box. The goal is to maximize the number of items in the first box after a series of operations. Input The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 2⋅10^5) — the number of boxes. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the number of items in each box. Output For each test case, print the maximum number of items that can be in the first box after the optimal sequence of operations. Example Input 2 5 1 2 3 4 5 4 10 10 10 10 Output 15 40 Note In the first test case, the optimal move is to open the boxes one by one and move all items to the first box. The sequence of moves could be as follows: 1. After opening the second box (box 2), you move its items to the first box: [3, 0, 3, 4, 5] 2. After opening the third box (box 3), you move its items to the first box: [6, 0, 0, 4, 5] 3. After opening the fourth box (box 4), you move its items to the first box: [10, 0, 0, 0, 5] 4. After opening the fifth box (box 5), you move its items to the first box: [15, 0, 0, 0, 0] In the second test case, all boxes have the same number of items, and straightforwardly, the sequence of moves could be: 1. After opening each subsequent box and moving its items to the first box, the final state will be: [40, 0, 0, 0]","solution":"def max_items_in_first_box(t, test_cases): results = [] for i in range(t): n, items = test_cases[i] total_items = sum(items) results.append(total_items) return results"},{"question":"A farmer has a rectangular field whose dimensions are N x M. The field is divided into an N x M grid of smaller rectangular plots. The farmer wants to plant different crops in such a way that no two adjacent plots contain the same type of crop. Given N and M, write a program that calculates the number of ways the farmer can plant the crops under the given constraints. The planting is considered valid if no two plots that share a side have the same type of crop. Assume the number of different types of crops available is infinite, and you only need to determine if a valid planting configuration exists. Input The input consists of multiple test cases. Each test case is a line containing two integers N and M (2 ≤ N, M ≤ 1000). The input ends with a line containing two zeros. Output For each test case, output a single integer — the number of valid planting configurations. Example Input 2 2 3 4 5 5 0 0 Output 2 4 4","solution":"def num_of_ways(N, M): Returns the number of valid ways to plant the crops. # For a 2x2 grid, there are exactly 2 ways to alternate planting crops # For all other rectangular grids larger than 2x2, there are 4 ways as # the optimal tiling can still be done in 4 patterns. if N == 2 and M == 2: return 2 else: return 4 def valid_planting_configs(test_cases): results = [] for N, M in test_cases: if N == 0 and M == 0: break results.append(num_of_ways(N, M)) return results"},{"question":"Write a function to determine if two strings are anagrams of each other. Two strings are anagrams if they use the same characters in the same frequency. Assume the comparison is case-insensitive and consider non-alphabetic characters as well. Input The input starts with an integer T, the number of test cases (1 ≤ T ≤ 100). Each of the next T lines consists of two space-separated strings, s1 and s2, of lengths up to 1000. Output For each test case, print \\"Yes\\" if the two strings are anagrams, and \\"No\\" otherwise. Example Input: 3 listen silent hello world Anagram nag a ram Output: Yes No Yes","solution":"def are_anagrams(s1, s2): Determines if two strings s1 and s2 are anagrams of each other. # Normalize the strings by converting to lowercase and removing spaces normalized_s1 = \'\'.join(s1.lower().split()) normalized_s2 = \'\'.join(s2.lower().split()) # Count the frequency of each character return sorted(normalized_s1) == sorted(normalized_s2) def process_anagram_tests(T, test_cases): Processes the list of test cases and returns a list of results for each test case. results = [] for s1, s2 in test_cases: if are_anagrams(s1, s2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Sylvia is organizing a conference, and she has to determine the schedule for n different presentations. Each presentation lasts for a certain amount of time, and there are m time slots available for presentations throughout the day. Sylvia must assign each presentation to one of the available time slots, and she cannot overlap any presentations within a slot. Each presentation i has a duration d[i] (1 ≤ d[i] ≤ 10^9). Each time slot j has a maximum duration limit l[j] (1 ≤ l[j] ≤ 10^9). Your task is to help Sylvia determine if it is possible to schedule all n presentations within the m time slots without exceeding the duration limits of any time slot. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". Input The first line of the input contains one integer t (1 ≤ t ≤ 10^5) — the number of test cases. Each test case is presented by two lines: The first line contains two integers n and m (1 ≤ n, m ≤ 2*10^5) — the number of presentations and the number of time slots available. The second line contains n integers d[1], d[2], ..., d[n] — the durations of the presentations. The third line contains m integers l[1], l[2], ..., l[m] — the duration limits of the time slots. Output For each test case, print \\"YES\\" if it\'s possible to schedule all presentations without exceeding the duration limits; otherwise, print \\"NO\\". Example Input 3 3 3 2 3 5 6 5 4 4 2 3 1 2 4 5 3 5 5 4 4 4 4 4 5 5 5 5 1 Output YES NO NO Note In the first example, Sylvia can schedule presentations such that their durations fit within the time slots\' limits: [2, 3], [4], [5]. In the second example, it\'s impossible to assign all presentations within the given time slots without exceeding the limits. In the third example, the last presentation\'s required duration is longer than the limit of any of the available slots, thus making it impossible to schedule all presentations.","solution":"def can_schedule_presentations(test_cases): results = [] for case in test_cases: n, m, durations, limits = case if n > m: results.append(\\"NO\\") continue durations.sort() limits.sort() possible = True for duration, limit in zip(durations, limits): if duration > limit: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results # Parsing the input format into a suitable structure for the function def input_parser(input_lines): idx = 0 t = int(input_lines[idx].strip()) idx += 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[idx].strip().split()) idx += 1 durations = list(map(int, input_lines[idx].strip().split())) idx += 1 limits = list(map(int, input_lines[idx].strip().split())) idx += 1 test_cases.append((n, m, durations, limits)) return test_cases # Function to take input in string format and return output in string format def process_input_output(input_str): input_lines = input_str.strip().split(\'n\') test_cases = input_parser(input_lines) results = can_schedule_presentations(test_cases) return \'n\'.join(results)"},{"question":"Sophie is a vocabulary enthusiast. She loves discovering new words from a set of given letters. A word is considered valid if it can be formed by using the letters from the given set exactly as they appear in the word, without reusing any letter. Sophie now wants to find the longest valid word she can form from a list of given words using the letters from her set. Input The input consists of two lines. The first line contains a string s (1 ≤ |s| ≤ 100) of lowercase English letters, representing the set of letters Sophie has. The second line contains an integer n (1 ≤ n ≤ 100) — the number of words in the list. The following n lines each contain a word of lowercase English letters. Output Print a single word — the longest valid word. If there are multiple longest valid words, print the one that comes first lexicographically. If no valid word exists, print an empty string. Examples Input abcdefghijklmnopqrstuvwxyz 3 apple orange grape Output orange Input abcdefg 5 ecc bee ace father dog Output ace Note In the first example, Sophie can use all letters from her set, and \\"orange\\" is the longest word that can be formed. In the second example, Sophie can form multiple valid words like \\"bee\\", \\"ace\\", and \\"dog\\", but \\"ace\\" is the longest and lexicographically smallest.","solution":"def find_longest_valid_word(s, n, words): from collections import Counter s_count = Counter(s) def is_valid(word): word_count = Counter(word) for letter in word_count: if word_count[letter] > s_count.get(letter, 0): return False return True longest_word = \\"\\" for word in words: if is_valid(word): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"You are given an array of integers where each element represents the height of a tree. Your task is to cut down some of the trees such that the remaining trees have a strictly increasing height from left to right. You need to find the minimum number of trees that need to be cut down. Input: The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of trees. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the trees. Output: Print a single integer — the minimum number of trees that need to be cut down. Examples: Input: 5 3 2 1 4 5 Output: 2 Input: 4 1 3 2 4 Output: 1 Input: 3 5 4 3 Output: 2 Note: In the first example, cutting down the first and second trees, we get the sequence [1, 4, 5], which is strictly increasing. In the second example, cutting down the third tree, we get the sequence [1, 3, 4], which is strictly increasing. In the third example, cutting down the first and second trees, we get the sequence [3], which is strictly increasing.","solution":"def min_trees_to_cut(trees): Returns the minimum number of trees that need to be cut down to get a strictly increasing height of trees from left to right. n = len(trees) if n <= 1: return 0 # dp array to store the length of the longest increasing subsequence ending at i dp = [1] * n for i in range(1, n): for j in range(i): if trees[i] > trees[j]: dp[i] = max(dp[i], dp[j] + 1) max_increasing_length = max(dp) return n - max_increasing_length"},{"question":"Given a grid of size n x m, find the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (n, m), assuming that movement is only allowed to the right or downwards. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns, respectively. Output Print the number of unique paths from the top-left corner to the bottom-right corner. Example Input 3 7 Output 28 Note In the given example, there are 28 unique paths from (1, 1) to (3, 7). One of the paths is (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (1, 5) -> (1, 6) -> (1, 7) -> (2, 7) -> (3, 7). Hint: You may use dynamic programming to solve this problem efficiently.","solution":"def unique_paths(n, m): Returns the number of unique paths from top-left corner to bottom-right corner in a grid. # Create a 2D dp array with all elements initially set to 1 dp = [[1] * m for _ in range(n)] # Fill the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner of the dp array contains the number of unique paths return dp[n-1][m-1]"},{"question":"Implement a function to find the longest path in a tree. The length of a path is measured by the number of edges in the path. The input tree is represented as an undirected graph, and is given in the form of an adjacency list. Constraints * 2 ≤ N ≤ 100 * The given input forms a valid tree. * The nodes are numbered from 1 to N. Input Input is given from Standard Input in the following format: N a_1 b_1 a_2 b_2 : a_{N-1} b_{N-1} Output Print the length of the longest path in the tree. Example Input 5 1 2 1 3 3 4 3 5 Output 3 Input 4 1 2 2 3 3 4 Output 3","solution":"from collections import deque, defaultdict def longest_path_in_tree(N, edges): def bfs(start): visited = [-1] * (N + 1) queue = deque([start]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() current_distance = visited[node] for neighbor in adj_list[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance adj_list = defaultdict(list) for a, b in edges: adj_list[a].append(b) adj_list[b].append(a) # Step 1: Find farthest node from an arbitrary node, say 1 farthest_node, _ = bfs(1) # Step 2: Find the diameter by starting BFS from the farthest node _, diameter = bfs(farthest_node) return diameter"},{"question":"Malik has a rectangular garden with dimensions n (rows) x m (columns), and each cell in the garden can either be water (represented by 0) or land (represented by 1). Malik wants to determine the number of distinct islands in his garden. An island is defined as a connected group of 1\'s (land), and connected means that they are adjacent horizontally or vertically (not diagonally). Write a program that calculates the number of distinct islands in the garden. Input The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 50) – dimensions of the garden. The next n lines contain m integers (either 0 or 1), representing the garden grid. Output For each test case, output the number of distinct islands in the garden. Example Input 2 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 3 3 1 1 1 0 1 0 1 0 1 Output 2 3 Note For the first test case, there are two islands in the garden. One island is in the top-left corner and the other is in the bottom-right. For the second test case, there are three islands: one big island in the middle, and two small islands, one in the top row and one in the bottom row.","solution":"def number_of_islands(gardens): Returns a list of the number of distinct islands for each garden in gardens. def dfs(grid, x, y, n, m, visited): # Directions for right, left, up, down directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] stack = [(x, y)] while stack: i, j = stack.pop() for dir in directions: ni, nj = i + dir[0], j + dir[1] if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj] and grid[ni][nj] == 1: visited[ni][nj] = True stack.append((ni, nj)) results = [] for garden in gardens: n, m, grid = garden visited = [[False for _ in range(m)] for _ in range(n)] count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: visited[i][j] = True dfs(grid, i, j, n, m, visited) count += 1 results.append(count) return results"},{"question":"You are given two strings, word1 and word2, containing lowercase English letters. You need to merge these strings by adding characters from word1 and word2 alternately starting from the first character of each string. If one string is shorter than the other, append the remaining characters of the longer string to the merged result. Write a function `merge_alternately` that takes in two strings `word1` and `word2`, and returns the merged string. # Input - Two strings `word1` and `word2`. # Output - A single string which is the result of merging `word1` and `word2` alternately. # Example ```python def merge_alternately(word1, word2): # Your code goes here # Example 1 word1 = \\"abc\\" word2 = \\"pqr\\" print(merge_alternately(word1, word2)) # Output: \\"apbqcr\\" # Example 2 word1 = \\"ab\\" word2 = \\"pqrs\\" print(merge_alternately(word1, word2)) # Output: \\"apbqrs\\" ``` # Note In the first example, both strings have the same length. The merged result is formed by alternating characters: a from the first string, p from the second, and so on. In the second example, the first string is shorter. After merging alternately up to the end of the first string, append the remaining characters \\"rs\\" from the second string.","solution":"def merge_alternately(word1, word2): Merges two strings alternately. If one string is shorter, append the remaining characters of the longer string. Args: word1 (str): First input string. word2 (str): Second input string. Returns: str: Merged result of the two strings. merged = [] len1, len2 = len(word1), len(word2) for i in range(max(len1, len2)): if i < len1: merged.append(word1[i]) if i < len2: merged.append(word2[i]) return \'\'.join(merged)"},{"question":"You are given a list of non-negative integers representing the heights of walls in a histogram. Each bar in the histogram is 1 unit wide. Your task is to calculate the maximum rectangular area that can be formed within the bounds of the histogram. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of walls in the histogram. The second line contains n non-negative integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4) — the heights of the walls. Output Print a single integer representing the maximum rectangular area that can be formed within the histogram. Examples Input 6 2 1 5 6 2 3 Output 10 Input 5 4 4 4 4 4 Output 20 Input 7 6 2 5 4 5 1 6 Output 12 Note In the first sample case, the maximum area corresponds to the rectangle covering bar heights [2 1 5 6 2 3] with width 2 and height 5, giving an area of 5 * 2 = 10. In the second sample case, the entire histogram forms a rectangle with width 5 and height 4, giving an area of 5 * 4 = 20. In the third sample case, the maximum area corresponds to the rectangle covering bar heights [5 4 5], with width 3 and height 4, giving an area of 4 * 3 = 12.","solution":"def find_max_area_histogram(heights): Calculate the largest rectangular area possible in a given histogram. :param heights: List of non-negative integers representing the heights of the histogram\'s bars. :return: The area of the largest possible rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) heights = list(map(int, lines[1].strip().split())) return heights def solve(input_str): heights = parse_input(input_str) return find_max_area_histogram(heights)"},{"question":"You are given a string `s` which represents an encoded Roman numeral. Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, 2 is written as `II` in Roman numeral, just two one\'s added together. 12 is written as `XII`, which is simply `X` + `II`. The number 27 is written as `XXVII`, which is `XX` + `V` + `II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a string `s` representing an encoded Roman numeral, return its integer value. Input - A single line containing the encoded Roman numeral string `s`. The string is between 1 and 15 characters long and is guaranteed to be a valid Roman numeral in the range from 1 to 3999. Output - A single integer representing the integer value of the Roman numeral. Examples Input ``` III ``` Output ``` 3 ``` Input ``` LVIII ``` Output ``` 58 ``` Input ``` MCMXCIV ``` Output ``` 1994 ```","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: A string representing a Roman numeral. :return: The integer representation of the Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Bobby loves to collect stamps. He has a collection of stamps, each with a unique beauty value. Bobby wants to arrange his stamps in a line such that no adjacent stamps have the same beauty value. Each stamp\'s beauty value is represented by an integer. Determine if Bobby can arrange the stamps to meet the desired condition. If it is possible, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Constraints * 1 ≤ N ≤ 100 * 1 ≤ beauty[i] ≤ 1000 Input The input is given from Standard Input in the following format: N beauty[1] beauty[2] ... beauty[N] Output Print \\"POSSIBLE\\" if Bobby can arrange the stamps such that no adjacent stamps have the same beauty value. Otherwise, print \\"IMPOSSIBLE\\". Examples Input 5 1 2 2 3 4 Output POSSIBLE Input 3 5 5 5 Output IMPOSSIBLE","solution":"def can_arrange_stamps(n, beauties): from collections import Counter beauty_counts = Counter(beauties) max_count = max(beauty_counts.values()) if max_count > (n + 1) // 2: return \\"IMPOSSIBLE\\" else: return \\"POSSIBLE\\""},{"question":"You are given a string s consisting of lowercase English letters. Your task is to partition the string into as few distinct substrings as possible such that each character appears in at most one substring. The substrings do not need to be continuous and can be in any order. For example: * if s = \\"abacbc\\", one possible partitioning is \\"a\\", \\"bacb\\", and \\"c\\". Here each character appears in only one substring. * if s = \\"abcdef\\", one possible partitioning is \\"abcdef\\" since each character already appears exactly once. For the given string s, find the minimum number of substrings required that satisfy the above condition. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains one string s (1 ≤ |s| ≤ 1000). Output For each test case, output the minimum number of substrings required. Example Input 3 abacbc abcdef aabbcc Output 1 1 3","solution":"def min_partitions(t, test_cases): results = [] for s in test_cases: # Using a set to store distinct characters distinct_chars = set(s) # The number of partitions required is exactly the number of distinct characters results.append(len(distinct_chars)) return results"},{"question":"Implementing common data structures from scratch is a vital exercise for understanding the internal workings of these abstract concepts. Hash tables are widely used due to their efficient data retrieval characteristics. One challenge when implementing a hash table is resolving collisions, where multiple keys hash to the same index. A popular method to resolve collisions is Separate Chaining, where each bucket points to a linked list of elements that hash to the same index. Your task is to implement a simple hash table in Python using separate chaining. You need to create a `HashTable` class that supports the following methods: 1. **`__init__(self, size)`**: Initializes an empty hash table of given size. 2. **`insert(self, key, value)`**: Inserts a (key, value) pair into the hash table. If the key already exists, update its value. 3. **`get(self, key)`**: Returns the value associated with the key. If the key does not exist, return `None`. 4. **`remove(self, key)`**: Removes the key (and its associated value) from the hash table. If the key does not exist, do nothing. 5. **`__str__(self)`**: Returns a string representation of the hash table for easy visualization. Each bucket should be on a new line with the format: `index: [(key, value), (key, value), ...]`. For simplicity, you can use Python\'s built-in `hash()` function to compute the hash value of keys. Ensure your implementation handles common edge cases such as inserting duplicate keys, removing non-existent keys, and handling an empty table gracefully. # Input Format - The input starts with an integer `N` representing the number of operations to be performed. - Each of the following `N` lines specifies an operation in one of the following formats: `insert key value`, `get key`, `remove key`. # Output Format - For each `get` operation, print the value associated with the key. If the key does not exist, print `None`. - After all operations, print the string representation of the hash table. # Constraints - 1 ≤ N ≤ 1000 - 1 ≤ key, value ≤ 10^9 # Example Input ``` 8 insert 1 10 insert 2 20 get 1 get 3 insert 1 15 get 1 remove 1 get 1 ``` Output ``` 10 None 15 None 0: [(2, 20)] 1: [] 2: [] ... (max index): [] ``` Implement the `HashTable` class and process the operations as described. This will test your understanding of hash tables, collision resolution, and managing dynamic data structures. ```python class HashTable: def __init__(self, size): self.size = size self.table = [[] for _ in range(size)] def insert(self, key, value): index = hash(key) % self.size for pair in self.table[index]: if pair[0] == key: pair[1] = value return self.table[index].append([key, value]) def get(self, key): index = hash(key) % self.size for pair in self.table[index]: if pair[0] == key: return pair[1] return None def remove(self, key): index = hash(key) % self.size for i, pair in enumerate(self.table[index]): if pair[0] == key: del self.table[index][i] return def __str__(self): result = [] for i, bucket in enumerate(self.table): result.append(f\\"{i}: {bucket}\\") return \\"n\\".join(result) def process_operations(operations): hash_table = HashTable(100) # Define the size appropriately for operation in operations: parts = operation.split() command = parts[0] if command == \'insert\': key, value = int(parts[1]), int(parts[2]) hash_table.insert(key, value) elif command == \'get\': key = int(parts[1]) print(hash_table.get(key)) elif command == \'remove\': key = int(parts[1]) hash_table.remove(key) print(hash_table) # Example usage: operations = [ \\"insert 1 10\\", \\"insert 2 20\\", \\"get 1\\", \\"get 3\\", \\"insert 1 15\\", \\"get 1\\", \\"remove 1\\", \\"get 1\\" ] process_operations(operations) ``` This example defines a `HashTable` class with necessary methods and a `process_operations` function to interpret a list of string commands acting on the hash table. The class ensures proper handling of collisions, updates, and deletions through separate chaining with linked lists.","solution":"class HashTable: def __init__(self, size): self.size = size self.table = [[] for _ in range(size)] def insert(self, key, value): index = hash(key) % self.size for pair in self.table[index]: if pair[0] == key: pair[1] = value return self.table[index].append([key, value]) def get(self, key): index = hash(key) % self.size for pair in self.table[index]: if pair[0] == key: return pair[1] return None def remove(self, key): index = hash(key) % self.size for i, pair in enumerate(self.table[index]): if pair[0] == key: del self.table[index][i] return def __str__(self): result = [] for i, bucket in enumerate(self.table): result.append(f\\"{i}: {bucket}\\") return \\"n\\".join(result) def process_operations(operations): hash_table = HashTable(100) # Define the size appropriately for operation in operations: parts = operation.split() command = parts[0] if command == \'insert\': key, value = int(parts[1]), int(parts[2]) hash_table.insert(key, value) elif command == \'get\': key = int(parts[1]) print(hash_table.get(key)) elif command == \'remove\': key = int(parts[1]) hash_table.remove(key) print(hash_table) # Example usage: operations = [ \\"insert 1 10\\", \\"insert 2 20\\", \\"get 1\\", \\"get 3\\", \\"insert 1 15\\", \\"get 1\\", \\"remove 1\\", \\"get 1\\" ] process_operations(operations)"},{"question":"Given an array of n integers. Your task is to find the minimum sum of a non-empty subsequence that has the property that the bitwise AND of all its elements is non-zero. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the array. Output Output a single integer, the minimum sum of a non-empty subsequence that has the property that the bitwise AND of all its elements is non-zero. If no such subsequence exists, output -1. Examples Input 5 5 3 12 6 7 Output 3 Input 4 0 0 0 0 Output -1 Input 4 10 10 10 10 Output 10 Input 3 4 2 6 Output 6 Note In the first example, the subsequence [3] has a bitwise AND of 3, which is non-zero and its sum is 3. In the second example, all elements are zero, so it\'s impossible to find a non-zero AND subsequence. Hence the answer is -1. In the third example, any non-empty subsequence will have the same bitwise AND of 10, and since the minimum possible sum of such a subsequence is 10. In the fourth example, we can choose the entire array [4, 2, 6], which has a bitwise AND of 4&2&6 = 4, which is non-zero and the sum is 4+2+6 = 12. Although the subsequence [6] has the bitwise AND of 6 which is non-zero and its sum is 6.","solution":"def minimum_non_zero_and_subseq_sum(n, arr): min_sum = float(\'inf\') for value in arr: if value != 0: min_sum = min(min_sum, value) return min_sum if min_sum != float(\'inf\') else -1"},{"question":"Emily is a botanist studying a unique species of flowering plants. Each plant in her garden can have a varying number of flowers. Emily wants to organize her garden in such a way that each plant receives a distinct number of flowers. However, she encounters a problem when the plants are not blooming uniformly. Given the number of flowers on each plant, determine if it is possible to redistribute flowers such that each plant in the garden ends up with a unique number of flowers. Input: The first line contains a single integer N, the number of plants in the garden. The second line contains N integers Fi, where Fi is the number of flowers on the i-th plant. Output: Print \\"POSSIBLE\\" if it is possible to redistribute the flowers such that each plant gets a unique number of flowers. Otherwise, print \\"IMPOSSIBLE\\". Constraints: 1 ≤ N ≤ 100 000; 1 ≤ Fi ≤ 10^9. Examples: Input: 4 1 2 2 3 Output: IMPOSSIBLE Input: 3 1 5 3 Output: POSSIBLE","solution":"def is_possible_to_redistribute(N, flowers): Determines if it\'s possible to redistribute flowers so that each plant has a unique number of flowers. Parameters: N (int): Number of plants flowers (list): List containing numbers of flowers on each plant Returns: str: \\"POSSIBLE\\" if unique distribution is feasible, \\"IMPOSSIBLE\\" otherwise flower_counts = {} # Count occurrences of each flower count for f in flowers: if f in flower_counts: flower_counts[f] += 1 else: flower_counts[f] = 1 # If any flower count appears more than once, impossible to have unique counts if any(count > 1 for count in flower_counts.values()): return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"Your task is to design a system that checks cell phone number patterns. In your country, valid cell phone numbers match the pattern `(XXX)-XXX-XXXX`, where each `X` is a digit. Write a function `is_valid_phone_number` that accepts a string `phone_number`, and returns `true` if the string matches the pattern, and `false` otherwise. Constraints - The string will have a length of exactly 14 characters. - The string will follow the format `(XXX)-XXX-XXXX` or not at all. Input - A string `phone_number` representing the phone number. Output - Return a boolean value `true` if the given string is a valid phone number, and `false` otherwise. Examples Input (123)-456-7890 Output true Input 123-456-7890 Output false Input (123)-45-67890 Output false Input (123)-456-789O Output false","solution":"import re def is_valid_phone_number(phone_number): Checks if the given phone number matches the pattern (XXX)-XXX-XXXX. Args: phone_number (str): The phone number to check. Returns: bool: True if the phone number matches the pattern, False otherwise. pattern = r\\"(d{3})-d{3}-d{4}\\" return bool(re.fullmatch(pattern, phone_number))"},{"question":"Given a list of integers, output the maximum difference between any two elements in the list. For an empty list or a list with only one element, output 0. Constraints * The list can contain up to 1000 integers. * Each integer in the list is between -10^6 and 10^6. Input Input is given from Standard Input in the following format: n a1 a2 ... an Where: - n is an integer representing the number of elements in the list (0 ≤ n ≤ 1000). - a1, a2, ..., an are the integers in the list. Output Print a single integer representing the maximum difference between any two elements in the list. Examples Input 5 1 2 3 4 5 Output 4 Input 3 -10 0 10 Output 20 Input 1 5 Output 0","solution":"def max_difference(input_list): Returns the maximum difference between any two integers in the list. For an empty list or a list with only one element, returns 0. if len(input_list) < 2: return 0 return max(input_list) - min(input_list)"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence such that the sum of the subsequence is even. Deepa and Arjit are again at odds, and your task is to help them agree on the size of this subsequence. If the sum of the whole sequence is already even, that is the solution. If not, you need to find the maximum possible subsequence with an even sum by potentially excluding the smallest odd element if necessary. Input Format: - The first line contains a single integer, t, the number of test cases. - Each of the next t lines starts with an integer n, denoting the number of elements in the sequence, followed by n space-separated integers representing the elements of the sequence. Output Format: - For each test case, print a single integer, the length of the longest subsequence with an even sum. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 100000 1 ≤ element of the sequence ≤ 100000 SAMPLE INPUT 2 4 1 2 3 4 3 1 3 5 SAMPLE OUTPUT 4 2 Explanation: For the first test case: The sum of the entire sequence (1 + 2 + 3 + 4 = 10) is already even, so the length of the longest subsequence is 4. For the second test case: 1 + 3 + 5 = 9, which is odd. By excluding 1 or 3 or 5, the remaining subsequence sum will be even. So, the length of the longest subsequence is 2.","solution":"def longest_even_sum_subsequence(test_cases): results = [] for case in test_cases: n, seq = case[0], case[1:] seq_sum = sum(seq) if seq_sum % 2 == 0: results.append(n) else: # If there is any odd number in the sequence odd_present = any(x % 2 != 0 for x in seq) if odd_present: results.append(n - 1) else: # If there\'s no odd number, we can\'t make the sum even results.append(0) return results"},{"question":"Sandhya is a treasure hunter who has found a map with multiple cryptic instructions. According to the map, she needs to decode several strings to reveal a hidden numeric code. Each string is important and follows a specific deciphering rule, which is the sum of the ASCII values of all characters in the string. After figuring out the code of each string, Sandhya must find the highest numeric code among them and determine how many times this highest code appears. Can you help Sandhya solve this task? Input The input consists of multiple test cases. The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The first line of each test case contains a single integer N (1 ≤ N ≤ 100) — the number of strings. Then N lines follow, each line containing a single string consisting of between 1 and 100 lowercase English letters. Output For each test case, print two lines. In the first line, print the highest numeric code. In the second line, print the count of times this highest code appears. Example Input 2 3 hello world salary 2 map book Output 1116 1 419 1 Explanation In the first test case: - The ASCII sum of \'hello\' is 104+101+108+108+111 = 532 - The ASCII sum of \'world\' is 119+111+114+108+100 = 552 - The ASCII sum of \'salary\' is 115+97+108+97+114+121 = 652 - Therefore, the highest numeric code is 652, appearing 1 time. In the second test case: - The ASCII sum of \'map\' is 109+97+112 = 318 - The ASCII sum of \'book\' is 98+111+111+107 = 427 - Therefore, the highest numeric code is 427, appearing 1 time.","solution":"def find_highest_numeric_code(T, test_cases): results = [] for case in test_cases: N, strings = case numeric_codes = [sum(ord(char) for char in string) for string in strings] highest_code = max(numeric_codes) count_highest_code = numeric_codes.count(highest_code) results.append((highest_code, count_highest_code)) return results"},{"question":"You are given two strings a and b, both consisting of lowercase Latin letters. You need to derive an operation that can transform string a into string b. The allowed operation is described as follows: - You can remove characters from string a to form a subsequence of a. A subsequence is defined as a sequence derived by deleting some or none of the elements of the string without changing the order of the remaining elements. Determine the length of the longest subsequence in string a that is also a substring of string b. Input The first line contains the string a. The second line contains the string b. Both strings contain only lowercase letters and their lengths are between 1 and 1000, inclusive. Output Print the only integer — the length of the longest subsequence in a that is also a substring in b. Examples Input abcde ace Output 3 Input abacaba aba Output 3 Input abc def Output 0 Note In the first sample, the longest subsequence of \\"abcde\\" that is also a substring in \\"ace\\" is \\"ace\\", which has length 3. In the second sample, the longest subsequence of \\"abacaba\\" that is also a substring in \\"aba\\" is \\"aba\\", which has length 3. In the third sample, there are no common subsequences between \\"abc\\" and \\"def\\".","solution":"def longest_subsequence_as_substring(a, b): Function to find the length of the longest subsequence in \'a\' which is also a substring in \'b\'. m, n = len(a), len(b) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[-1][-1]"},{"question":"You are given an array of integers representing the heights of a series of buildings. The buildings are situated in a straight line and you are observing them from left to right. Each building obstructs the view of any building that is to its right and shorter than or equal in height. Your task is to determine the number of buildings that have an unobstructed view from the leftmost position. Formally, for a given array `heights` of length `n`, you need to count the number of elements `heights[i]` such that there is no element `heights[j]` (where `j < i`) that is greater than or equal to `heights[i]`. **Input** The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of buildings. The second line contains `n` integers `heights[i]` (1 ≤ heights[i] ≤ 10^9), the heights of the buildings. **Output** Print a single integer, the number of buildings that have an unobstructed view from the leftmost position. **Examples** **Input** ``` 6 3 7 8 3 6 1 ``` **Output** ``` 3 ``` **Input** ``` 5 4 3 2 1 5 ``` **Output** ``` 1 ``` **Note** In the first sample, the buildings with heights 3, 7, and 8 have an unobstructed view. In the second sample, only the building with height 5 has an unobstructed view because all previous buildings are shorter.","solution":"def buildings_with_unobstructed_view(heights): Determines the number of buildings that have an unobstructed view from the leftmost position. :param heights: List of integers representing the heights of buildings. :return: Integer, the number of buildings with an unobstructed view. if not heights: return 0 max_height = 0 count = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"You are given an array consisting of n integers. You need to modify the array in such a way that for every i-th element of the array which is a multiple of 10, increase it by a value of k to make the i-th element no longer a multiple of 10. If an element is not a multiple of 10, leave it unchanged. Return the modified array. Your task is to write a function named `modify_array` that performs this operation. # Function Signature ```python def modify_array(arr: List[int], k: int) -> List[int]: ``` # Input - A single integer n (1 ≤ n ≤ 1000) representing the length of the array. - An array arr of n integers (0 ≤ arr[i] ≤ 10^6). - An integer k (1 ≤ k ≤ 10^6) which will be added when an element is a multiple of 10. # Output - Return a list of integers representing the modified array. # Explanation - For each element in the array, check if it is a multiple of 10. - If yes, add k to it. If not, leave it unchanged. - Return the modified array. # Example ```python Input: n = 5 arr = [20, 15, 30, 40, 9] k = 3 Output: [23, 15, 33, 43, 9] Explanation: - 20 is a multiple of 10, so we add k (3): 20 + 3 = 23 - 15 is not a multiple of 10, so it remains unchanged - 30 is a multiple of 10, so we add k (3): 30 + 3 = 33 - 40 is a multiple of 10, so we add k (3): 40 + 3 = 43 - 9 is not a multiple of 10, so it remains unchanged ``` # Constraints - Handle the case where all elements of the array could be multiples of 10 or none of them could be. - Optimize the function to process the largest input size effectively.","solution":"from typing import List def modify_array(arr: List[int], k: int) -> List[int]: Modifies the array such that elements which are multiples of 10 are increased by k. Args: arr: List of integers representing the input array. k: Integer value to add to multiples of 10. Returns: List of integers representing the modified array. for i in range(len(arr)): if arr[i] % 10 == 0: arr[i] += k return arr"},{"question":"In a programming competition, there is a problem where you are given a collection of toys, each of which has a distinct length. You need to arrange some of these toys into a single row such that each toy\'s position in the row guarantees that a toy with a greater length is always placed after a toy with a lesser length (i.e., strictly increasing order of lengths). You are allowed to skip some toys, but the toys you choose must be placed in the exact order they were in the original collection. Write a function `longestToysSequence` that takes a list of integers representing the lengths of the toys and returns the length of the longest possible sub-sequence that is strictly increasing. **Input:** - A list `toys` of `n` integers (`1 ≤ n ≤ 1000`), where each integer represents the length of a toy. All integers are distinct. **Output:** - A single integer representing the length of the longest strictly increasing sub-sequence. **Example:** Input: ``` [10, 9, 2, 5, 3, 7, 101, 18] ``` Output: ``` 4 ``` Explanation: The longest strictly increasing sub-sequence is [2, 3, 7, 101], so the output is 4. Input: ``` [0, 1, 0, 3, 2, 3] ``` Output: ``` 4 ``` Explanation: The longest strictly increasing sub-sequence is [0, 1, 2, 3], so the output is 4. **Note:** Consider the use of dynamic programming or binary search to find an efficient solution.","solution":"def longestToysSequence(toys): Returns the length of the longest strictly increasing sub-sequence. if not toys: return 0 # DP array to store the length of the longest increasing subsequence ending at each index dp = [1] * len(toys) for i in range(1, len(toys)): for j in range(i): if toys[i] > toys[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the max value in dp array return max(dp)"},{"question":"Frodo is very fond of sequences. Today he got a sequence of integers, A_1, A_2, ..., A_N, and a number K. Frodo wants to create a new sequence B_1, B_2, ..., B_N by replacing each A_i (1 <= i <= N) with A_i raised to the power of K. However, A_i raised to the power of K might be very large, so Frodo wants to know only the last three digits of each element in sequence B. Given the sequence and the integer K, help Frodo determine the new sequence B modulo 1000. Constraints * 1 <= N <= 10^5 * 1 <= A_i <= 10^5 * 1 <= K <= 10^5 Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Output the sequence B modulo 1000 in one line. Examples Input 5 2 123 456 789 1011 1213 Output 129 936 521 121 369 Input 3 4 1 2 3 Output 1 16 81","solution":"def sequence_modulo(N, K, A): This function takes the length of the sequence N, the exponent K, and the sequence of integers A, then calculates A_i raised to the power of K modulo 1000 for each element in the sequence A. mod = 1000 B = [(a ** K) % mod for a in A] return B"},{"question":"A team of rock climbers is planning a complex climbing route that involves multiple segments of climbing paths. They want to understand the difficulty of the overall route. You are given an array of integers where each integer represents the difficulty of a particular segment of the route. The team can decide to merge any two adjacent segments into one larger segment, and the difficulty of the new, merged segment is the sum of the difficulties of the two original segments. The challenge is to merge all segments into a single segment with the total combined difficulty, but you want to minimize the total cost of all the merge operations. The cost of each merge operation is equal to the difficulty of the resulting segment. Write a program to determine the minimum total cost required to merge all the segments into one. Input ``` The input consists of a single line containing an integer array of length `n` (2 ≤ n ≤ 100,000) where each element `a_i` (1 ≤ a_i ≤ 1,000) represents the difficulty of a segment of the route. ``` Output ``` Output the minimum total cost to merge all segments into one. ``` Example ``` Input [4, 3, 2, 6] Output 29 ``` Explanation 1. Merge segments with difficulties 2 and 3. The merged segment has difficulty 5, and the cost of this operation is 5. 2. The array is now [4, 5, 6]. 3. Merge segments with difficulties 4 and 5. The merged segment has difficulty 9, and the cost of this operation is 9. 4. The array is now [9, 6]. 5. Merge segments with difficulties 9 and 6. The merged segment has difficulty 15, and the cost of this operation is 15. 6. The total cost is 5 + 9 + 15 = 29.","solution":"import heapq def min_cost_to_merge_segments(difficulties): Returns the minimum total cost to merge all segments into one. heapq.heapify(difficulties) total_cost = 0 while len(difficulties) > 1: first = heapq.heappop(difficulties) second = heapq.heappop(difficulties) cost = first + second total_cost += cost heapq.heappush(difficulties, cost) return total_cost"},{"question":"You are given an array of integers where each value represents the height of a block of varying width. You\'ll be pouring water from above uniformly across the top. Write a function to determine the amount of water that remains trapped between the blocks after it rains. Input Format First line contains an integer n, the number of blocks. Second line contains n space-separated integers representing the height of each block. Output Format Print a single integer representing the total units of water trapped between the blocks. Constraints 1 ≤ n ≤ 10^3 1 ≤ height of block ≤ 10^6 SAMPLE INPUT 6 0 1 0 2 1 0 1 3 2 1 2 1 SAMPLE OUTPUT 6 Explanation The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] contains 6 units of trapped water. Visual representation: # # # -------------- 0 1 0 2 1 0 1 3 2 1 2 1 The blocks are represented by the #\'s and the water trapped will be the blank spaces altitude-wise. Here, a total amount of 6 units of water is trapped between the blocks.","solution":"def trap_water(n, heights): if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given an `n x n` grid filled with integers. Your task is to find the sum of all the integers in the grid that are part of the \\"diagonal cross\\". The diagonal cross consists of the primary diagonal (from the top-left to the bottom-right) and the secondary diagonal (from the top-right to the bottom-left). Note that if an element is at the intersection of the two diagonals, it should only be counted once. Input The first line contains an integer `n` (1 ≤ n ≤ 1000), the size of the grid. Each of the next `n` lines contains `n` integers each, representing the grid. Each integer in the grid is between `-10^9` and `10^9`. Output Print a single integer, the sum of the elements in the diagonal cross. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 25 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 68 Note In the first example, the elements in the \\"diagonal cross\\" are: 1, 5, 9, 3, and 7. Their sum is 1 + 5 + 9 + 3 + 7 = 25. In the second example, the elements in the \\"diagonal cross\\" are: 1, 6, 11, 16, 4, 7, 10, and 13. Their sum is 1 + 6 + 11 + 16 + 4 + 7 + 10 + 13 = 68.","solution":"def diagonal_cross_sum(n, grid): Calculate the sum of elements that are part of the diagonal cross in an n x n grid. The diagonal cross consists of the primary diagonal and the secondary diagonal. total_sum = 0 for i in range(n): total_sum += grid[i][i] # Primary diagonal element if i != n - i - 1: # Avoid double-counting the center element in an odd-sized grid total_sum += grid[i][n - i - 1] # Secondary diagonal element return total_sum # Example Usage: # n = 3 # grid = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(diagonal_cross_sum(n, grid)) # Output: 25"},{"question":"Robin is working on a project that involves the distribution of packages in a warehouse. The warehouse can be modeled as a grid with dimensions n x n. There are walls within the warehouse that act as obstacles, blocking the path between different cells. Packages can only be deposited in specific cells called drop zones. Robin wants to determine the shortest path from a starting point to any of the drop zones, avoiding walls. You are provided with the positions of the walls and drop zones in the grid. The goal is to write a program that calculates the shortest distance from a given starting point to the nearest drop zone using the Manhattan distance (i.e., the sum of the absolute differences of their x and y coordinates). If no path exists, the program should return -1. Input The first line contains a single integer n (1 ≤ n ≤ 500), denoting the size of the grid (n x n). The second line contains two integers, sx and sy (1 ≤ sx, sy ≤ n), denoting the starting point coordinates. The third line contains an integer w (0 ≤ w ≤ 500), denoting the number of walls, followed by w pairs of integers, each representing the coordinates (wx, wy) of the walls. The next line contains an integer d (1 ≤ d ≤ 100), denoting the number of drop zones, followed by d pairs of integers, each representing the coordinates (dx, dy) of the drop zones. Output Print a single integer — the shortest Manhattan distance from the starting point to the nearest drop zone. If no path exists, print -1. Example Input 5 1 1 2 2 3 3 3 1 3 5 5 Output 4 Explanation In the example, the grid size is 5x5, the starting point is (1, 1). The walls are positioned at (2, 2) and (3, 3), and the drop zones are at (1, 3), (5, 5). The shortest path from the starting point (1,1) to the nearest drop zone (1,3) avoiding all the walls is of length 4.","solution":"from collections import deque def shortest_path_to_drop_zone(n, sx, sy, walls, drop_zones): Calculate the shortest path in Manhattan distance from the starting point to the nearest drop zone considering walls as obstacles. Args: - n: int, size of the grid (n x n) - sx: int, starting x-coordinate - sy: int, starting y-coordinate - walls: list of tuples, each representing the coordinates of walls - drop_zones: list of tuples, each representing the coordinates of drop zones Returns: - int, shortest distance to the nearest drop zone, or -1 if no path exists # Directions for moving in the grid (right, left, up, down) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue with the starting point queue = deque([(sx, sy, 0)]) # (x, y, distance) # Convert walls and drop_zones lists into sets for faster lookup wall_set = set(walls) drop_zone_set = set(drop_zones) # Visited set to keep track of visited cells visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() # If the current position is a drop zone, return the distance if (x, y) in drop_zone_set: return dist # Generate all possible moves for dx, dy in directions: nx, ny = x + dx, y + dy # Ensure the new position is within the grid and not a wall and not visited if 1 <= nx <= n and 1 <= ny <= n and (nx, ny) not in wall_set and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If the queue is exhausted and no drop zone was found return -1"},{"question":"A delivery company is planning to optimize their route schedules. The company has n delivery routes that they need to cover and each route has a delivery time associated with it. However, the company\'s delivery team has limited availability and they can only cover a subset of all routes during the day. Given a list of delivery routes, your task is to figure out the maximum number of non-overlapping routes the delivery team can cover. Two routes are considered overlapping if they share the same delivery slot. Note: - Each route is defined by a start and end time. - The end time is exclusive; i.e., a route that ends at time t doesn\'t overlap with another route that starts at time t. Input The first line contains an integer n (n ≤ 1000) – the total number of delivery routes. The next n lines each contain two integers, s and e (0 ≤ s < e ≤ 10000) representing the start and end times of the routes. Output Print a single integer – the maximum number of non-overlapping routes that can be covered by the delivery team. Example Input 5 1 3 2 5 3 6 6 8 8 10 Output 4 Explanation: The routes that maximize the number of non-overlapping delivery routes are: (1, 3), (3, 6), (6, 8), (8, 10). These cover 4 route slots without overlapping.","solution":"def max_non_overlapping_routes(n, routes): Computes the maximum number of non-overlapping delivery routes. Parameters: n (int): Number of delivery routes. routes (List[Tuple[int, int]]): List of routes with start and end times. Returns: int: Maximum number of non-overlapping routes. # Sorting routes by their end times routes.sort(key=lambda route: route[1]) max_routes = 0 end_time = -1 for start, end in routes: if start >= end_time: # Take this route max_routes += 1 end_time = end return max_routes # Example to test the function: n = 5 routes = [ (1, 3), (2, 5), (3, 6), (6, 8), (8, 10) ] print(max_non_overlapping_routes(n, routes)) # Output should be 4"},{"question":"Write a function called `split_string` that takes a string `s` and an integer `k` as inputs. The function should split the string `s` into substrings of length `k` (except possibly the last substring, which may be shorter than `k` if the length of `s` is not a multiple of `k`). The function should then return a list of these substrings. Constraints: * The string `s` consists of only uppercase English letters. * `1 ≤ k ≤ len(s) ≤ 10000` Example Input split_string(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\", 5) Output [\\"ABCDE\\", \\"FGHIJ\\", \\"KLMNO\\", \\"PQRST\\", \\"UVWXY\\", \\"Z\\"] Example Input split_string(\\"HELLOWORLD\\", 3) Output [\\"HEL\\", \\"LOW\\", \\"ORL\\", \\"D\\"]","solution":"def split_string(s, k): Splits the string \'s\' into substrings of length \'k\'. return [s[i:i+k] for i in range(0, len(s), k)]"},{"question":"You are given an array consisting of positive integers. Your task is to find the maximum value of the absolute difference between any two adjacent elements after reordering the array in any possible way. Input The first line contains an integer `n` (2 ≤ n ≤ 100), the number of elements in the array. The second line contains `n` integers, each representing an element of the array. Each integer is between 1 and 100 inclusive. Output Output a single integer, the maximum value of the absolute difference between any two adjacent elements after reordering the array. Examples Input 5 10 1 5 16 9 Output 15 Input 3 8 3 14 Output 11","solution":"def max_absolute_difference(arr): Returns the maximum value of the absolute difference between any two adjacent elements after reordering the array in any possible way. # Sort the array arr.sort() # Compute maximum absolute difference using the rearrangement idea (max difference between min and max) return max(arr[-1] - arr[0], arr[-1] - arr[1], arr[-2] - arr[0]) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(max_absolute_difference(arr))"},{"question":"You are working on a system that manages conveyor belts in a warehouse. Each conveyor belt has a series of packages with different weights, and you have to balance the packages between two new conveyor belts such that the absolute difference in the total weights of the packages on each belt is minimized. Write a program that receives the list of weights of the packages and outputs the lists of packages assigned to each of the two new conveyor belts. Input The first line contains an integer n (1 ≤ n ≤ 3000) — the number of packages. The following line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) — the weights of the packages. Output Output two lines. The first line should contain the weights of the packages assigned to the first conveyor belt. The second line should contain the weights of the packages assigned to the second conveyor belt. Examples Input 6 10 20 30 40 50 60 Output 10 40 60 20 30 50 Input 4 1 2 3 4 Output 1 4 2 3","solution":"def balance_packages(n, weights): weights.sort(reverse=True) belt1, belt2 = [], [] sum1, sum2 = 0, 0 for weight in weights: if sum1 <= sum2: belt1.append(weight) sum1 += weight else: belt2.append(weight) sum2 += weight return belt1, belt2"},{"question":"Given a list of integers representing the elevations of a series of mountains, Kamal wants to determine the number of peaks in the list. A peak is defined as an element which is strictly greater than its immediate neighbors. Kamal is a nature enthusiast and wants to identify these peaks so he can plan his hiking routes accordingly. Write a function `count_peaks` that takes a list of integers and returns the number of peaks in that list. Input: - An integer list `elevations` representing the elevations of the mountains. Output: - An integer representing the number of peaks in the list. Function Signature: ```python def count_peaks(elevations: list) -> int: pass ``` Example: Input: ```python elevations = [5, 10, 5, 6, 15, 4, 2, 20, 10] ``` Output: ```python 3 ``` Explanation: In the example, the peaks are 10 (greater than 5 and 5), 15 (greater than 6 and 4), and 20 (greater than 2 and 10). Therefore, there are 3 peaks in the list. Constraints: - The list `elevations` will contain at least 1 and at most 1000 integers. - Each integer in the list will be in the range -10000 to 10000. Notes: - If the list has one or two elements, there can be no peaks by definition.","solution":"def count_peaks(elevations): Returns the number of peaks in the list \'elevations\'. A peak is an element which is strictly greater than its immediate neighbors. if len(elevations) < 3: return 0 peaks = 0 for i in range(1, len(elevations) - 1): if elevations[i] > elevations[i - 1] and elevations[i] > elevations[i + 1]: peaks += 1 return peaks"},{"question":"Reggie the Robot is responsible for monitoring the temperature sensors in a factory. The factory is divided into several sections, each with exactly one temperature sensor. A temperature sensor collects and sends the current temperature of its section. Sometimes, due to network interruptions, a temperature sensor might not send its data. Reggie needs to find the section with a missing temperature reading. Reggie knows that all temperature readings should be unique integers, but due to one sensor not sending its reading, there is one integer missing from the expected range. Given a list of n-1 unique integers representing the temperature readings collected from n sensors, help Reggie identify the missing temperature reading in the range from the smallest recorded temperature to the largest recorded temperature (inclusive). **Input:** - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of sections (and thus the number of sensors). - The second line contains (n-1) unique integers separated by spaces, representing the temperature readings collected from the n-1 sensors. **Output:** - A single integer representing the missing temperature reading. **Examples:** Input: ``` 5 1 2 4 5 ``` Output: ``` 3 ``` Input: ``` 6 10 12 15 11 14 ``` Output: ``` 13 ``` Input: ``` 3 -1 1 ``` Output: ``` 0 ``` **Explanation:** In the first example, the complete range of temperatures should be from 1 to 5. The missing temperature in this range is 3. In the second example, the full range from 10 to 15 has its missing temperature as 13. In the third example, the temperatures range from -1 to 1, with 0 being absent.","solution":"def find_missing_temperature(n, readings): Given a list of n-1 unique integers representing temperature readings, find the missing temperature in the range from the smallest recorded temperature to the largest recorded temperature (inclusive). Args: n (int): The number of sensors (sections in the factory). readings (list): A list of n-1 unique integer temperature readings. Returns: int: The missing temperature reading. expected_sum = sum(range(min(readings), max(readings) + 1)) actual_sum = sum(readings) return expected_sum - actual_sum"},{"question":"You are a programmer in charge of optimizing a delivery system for a city. The city is represented by a grid of size m x n. Each cell in the grid either contains an obstacle or is free to move through. You want to find out the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner of the grid. You can move up, down, left, or right, but you cannot move through cells containing obstacles. Given m and n representing the size of the grid, and a 2D array representing the grid, determine the minimum number of steps required to reach the destination, or determine if it is impossible to reach the destination. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The next m lines each contain n characters, where each character is either \'.\' representing an open cell or \'#\' representing an obstacle. Output Print a single integer — the minimum number of steps required to reach the bottom-right corner of the grid from the top-left corner, or print -1 if it is impossible to reach the destination. Examples Input 3 3 . ... . Output 4 Input 3 4 .#.. ..#. #. Output -1 Note In the first example, the minimum path is: (0, 0) → (0, 1) → (1, 1) → (1, 2) → (2, 2) So the number of steps required is 4. In the second example, there is no valid path to reach the destination, so the output is -1.","solution":"from collections import deque def min_steps_to_reach_destination(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, column, steps) visited = set([(0, 0)]) while queue: row, col, steps = queue.popleft() if row == m - 1 and col == n - 1: return steps for dr, dc in directions: nrow, ncol = row + dr, col + dc if 0 <= nrow < m and 0 <= ncol < n and grid[nrow][ncol] == \'.\' and (nrow, ncol) not in visited: visited.add((nrow, ncol)) queue.append((nrow, ncol, steps + 1)) return -1"},{"question":"You\'re given two arrays of integers, `arr` and `target`, of the same length n (1 ≤ n ≤ 10^5). The array `target` contains distinct integers sorted in ascending order. Your task is to determine whether it is possible to obtain `target` from `arr` by performing the following operation any number of times on `arr`: - Choose any subarray of `arr` and reverse it. Return \\"YES\\" if it\'s possible to convert `arr` to `target` by performing the above operations, otherwise return \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the arrays `arr` and `target`. The second line contains n integers `arr_1, arr_2, ..., arr_n` (1 ≤ arr_i ≤ 10^9) — the elements of the array `arr`. The third line contains n integers `target_1, target_2, ..., target_n` (1 ≤ target_i ≤ 10^9) — the elements of the array `target`. Output Print \\"YES\\" if it\'s possible to convert `arr` to `target` by possibly reversing some subarrays of `arr`, otherwise print \\"NO\\". Example Input 5 3 1 2 5 4 1 2 3 4 5 Output YES Input 4 4 3 2 1 1 2 3 5 Output NO Note In the first example, one possible sequence of operations to convert `arr` to `target` is: 1. Reverse the subarray [3, 1, 2] to get [2, 1, 3, 5, 4]. 2. Reverse the subarray [2, 1] to get [1, 2, 3, 5, 4]. 3. Reverse the subarray [5, 4] to get [1, 2, 3, 4, 5], which equals `target`. In the second example, it\'s not possible to convert `arr` to `target` no matter how many reversals are performed, so the answer is \\"NO\\".","solution":"def can_convert_to_target(n, arr, target): Determines if it is possible to convert \'arr\' to \'target\' by reversing any subarray. sorted_arr = sorted(arr) return \\"YES\\" if sorted_arr == target else \\"NO\\""},{"question":"In a fictional country, there are several cities connected by bidirectional roads. The country wants to implement a new postal system with the goal of minimizing the number of postal offices needed. Each postal office can serve the city in which it is located and any city that is directly connected to it by a road. Your task is to find the minimum number of postal offices needed to ensure every city is served. Input The first line of input contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000) — the number of cities and the number of roads, respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n) — the cities that are connected by a bidirectional road. No pair of cities is directly connected by more than one road. Output Output a single integer — the minimum number of postal offices needed. Examples Input 4 2 1 2 3 4 Output 2 Input 5 4 1 2 2 3 3 4 4 5 Output 1","solution":"def count_postal_offices(n, roads): Returns the minimum number of postal offices needed to serve all cities. Parameters: n (int): The number of cities. roads (list of tuples): Each tuple represents a bidirectional road between two cities. Returns: int: Minimum number of postal offices needed. from collections import defaultdict, deque # Create an adjacency list adjacency_list = defaultdict(list) for u, v in roads: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() connected_components = 0 def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) for city in range(1, n + 1): if city not in visited: visited.add(city) bfs(city) connected_components += 1 return connected_components # Example usage: # print(count_postal_offices(4, [(1, 2), (3, 4)])) # Output: 2 # print(count_postal_offices(5, [(1, 2), (2, 3), (3, 4), (4, 5)])) # Output: 1"},{"question":"You are given a string consisting of lowercase characters. Your task is to find the length of the longest contiguous substring that contains at most two distinct characters. For example, given the string \\"eceba\\", the longest contiguous substring with at most two distinct characters is \\"ece\\", which has a length of 3. Input The first line contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the following t lines contains a string consisting of lowercase characters. The length of each string is at least 1 and does not exceed 10^5. Output For each test case, print a single integer — the length of the longest contiguous substring that contains at most two distinct characters. Example Input 3 eceba ccaabbb abaccc Output 3 5 4 Note In the first test case, the longest contiguous substring with at most two distinct characters is \\"ece\\". In the second test case, the longest contiguous substring with at most two distinct characters is \\"aabbb\\".","solution":"def longest_substring_with_two_distinct_chars(s): distinct_count = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in distinct_count: distinct_count[s[right]] += 1 else: distinct_count[s[right]] = 1 while len(distinct_count) > 2: distinct_count[s[left]] -= 1 if distinct_count[s[left]] == 0: del distinct_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length def solve(t, test_cases): results = [] for s in test_cases: results.append(longest_substring_with_two_distinct_chars(s)) return results"},{"question":"Alice has a notebook that contains n pages. Each page has a unique number written on it. Unfortunately, some of the pages are missing. Alice wants to determine which pages are missing. Given a sequence of n integers representing the number on each page of the notebook, and a sequence of integers representing the numbers of the present pages, write a program to find the numbers of the missing pages in ascending order. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the total number of pages in the notebook. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 109) — the numbers written on each page in the notebook, in arbitrary order. The third line contains an integer m (0 ≤ m ≤ n) — the number of present pages. The fourth line contains m integers q1, q2, ..., qm (1 ≤ qi ≤ 109) — the numbers of the present pages, in arbitrary order. Output Print the numbers of the missing pages in ascending order. Example Input 5 1 3 5 7 9 3 1 5 7 Output 3 9 Note In the first sample: The total pages in the notebook are [1, 3, 5, 7, 9]. The present pages are [1, 5, 7]. Therefore, the missing pages are [3, 9] in ascending order.","solution":"def find_missing_pages(n, notebook_pages, m, present_pages): Returns the numbers of the missing pages in ascending order. Parameters: n (int): The total number of pages in the notebook. notebook_pages (list): A list of integers representing pages in the notebook. m (int): The number of present pages. present_pages (list): A list of integers representing the present pages. Returns: list: A list of integers representing the missing pages in ascending order. notebook_set = set(notebook_pages) present_set = set(present_pages) missing_pages = sorted(notebook_set - present_set) return missing_pages"},{"question":"Consider a coding contest to be organized over a week, starting from a given day. The contest scheduling committee wants to ensure that there are no clashes with national holidays so that maximum participation can be ensured. Given the start day of the week for the contest, the number of days the contest will last, and a list of national holidays within the week starting from that day, determine if the contest can be scheduled without any clashes with the national holidays. Note: - The week starts from \'MON\' and ends on \'SUN\'. - You are provided the start day as a string and the contest duration as an integer. - The list of national holidays within the week is provided as an array of strings. Write a function `canScheduleContest` that takes in three arguments: 1. `startDay`: a string representing the starting day of the week for the contest. 2. `duration`: an integer representing the number of days the contest will last. 3. `holidays`: an array of strings, each representing a holiday in the format \'MON\', \'TUE\', \'WED\', \'THU\', \'FRI\', \'SAT\', \'SUN\'. The function should return a string \\"YES\\" if the contest can be scheduled without any clashes with the holidays, and \\"NO\\" otherwise. # Input - `startDay`: a string (`\'MON\'`, `\'TUE\'`, `\'WED\'`, `\'THU\'`, `\'FRI\'`, `\'SAT\'`, or `\'SUN\'`) - `duration`: an integer (1 ≤ duration ≤ 7) - `holidays`: an array of strings (each string is one of `\'MON\'`, `\'TUE\'`, `\'WED\'`, `\'THU\'`, `\'FRI\'`, `\'SAT\'`, `\'SUN\'`) # Output A string \\"YES\\" or \\"NO\\". # Examples ```python print(canScheduleContest(\'MON\', 5, [\'WED\', \'THU\'])) # Output: NO print(canScheduleContest(\'TUE\', 3, [\'FRI\'])) # Output: YES print(canScheduleContest(\'SAT\', 2, [\'SUN\', \'MON\'])) # Output: NO print(canScheduleContest(\'FRI\', 1, [\'TUE\'])) # Output: YES ``` # Note In the first example, the contest starts on \'MON\' and lasts for 5 days. That means the contest days are \'MON\', \'TUE\', \'WED\', \'THU\', \'FRI\'. Since \'WED\' and \'THU\' are holidays, the contest cannot be scheduled. So, the output is \\"NO\\". In the second example, the contest starts on \'TUE\' and lasts for 3 days. That means the contest days are \'TUE\', \'WED\', \'THU\'. Since \'FRI\' is a holiday and is not within the contest days, the contest can be scheduled. So, the output is \\"YES\\".","solution":"def canScheduleContest(startDay, duration, holidays): # List of days in a week in order week = [\'MON\', \'TUE\', \'WED\', \'THU\', \'FRI\', \'SAT\', \'SUN\'] # Find the starting index of the start day in the week start_index = week.index(startDay) # Generate the list of contest days contest_days = [week[(start_index + i) % 7] for i in range(duration)] # Check if any contest days overlap with holidays for day in contest_days: if day in holidays: return \\"NO\\" return \\"YES\\""},{"question":"Problem Sam is building a railway system connecting N cities. Each city is numbered from 1 to N. Some pairs of cities need to be connected with a bidirectional track, and each track has a specific cost. Sam is tasked with selecting the minimum number of tracks such that every city can be reached from any other city either directly or indirectly, while minimizing the total cost of laying down the tracks. This is essentially finding the minimum spanning tree (MST) of a graph. Constraints * 1 ≤ N ≤ 100 * 1 ≤ E ≤ 10000 * 1 ≤ cost ≤ 10000 Input The input is given in the following format. N E u1 v1 cost1 u2 v2 cost2 ... uE vE costE Two integers N and E are given on the first line, separated by blanks. E lines follow, each containing three integers: u, v, and cost, indicating that there is a track connecting city u and city v with the given cost. Output Output the minimum total cost of connecting all the cities with the tracks. Examples Input 4 5 1 2 3 1 3 4 4 2 2 3 4 8 1 4 10 Output 9 Input 3 3 1 2 1 2 3 2 1 3 3 Output 3","solution":"def find_parent(parent, i): if parent[i] == i: return i else: return find_parent(parent, parent[i]) def union(parent, rank, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i += 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_total_cost(N, E, tracks): edges = [(track[0] - 1, track[1] - 1, track[2]) for track in tracks] return kruskal_mst(N, edges)"},{"question":"You are given a list of n integers a1, a2, ..., an. You have to answer q queries. Each query is described by three integers l, r and k. The answer to the query is the number of elements in the subarray a[l...r] that are greater than or equal to k. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2 × 10^5). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Each of the next q lines contains three integers l, r and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^9), describing a query. Output For each query, output the answer on a new line. Examples Input 5 3 1 2 3 4 5 1 3 2 2 4 5 1 5 3 Output 2 1 3 Input 6 2 10 20 10 10 20 10 1 6 15 2 5 20 Output 2 2 Input 4 4 5 5 5 5 1 4 5 1 3 4 2 3 4 3 4 5 Output 4 3 2 2 Note For the first example, there are three queries: - For the query (1, 3, 2), the subarray is [1, 2, 3]. The elements greater than or equal to 2 are 2 and 3, so the answer is 2. - For the query (2, 4, 5), the subarray is [2, 3, 4]. There are no elements greater than or equal to 5, so the answer is 0. - For the query (1, 5, 3), the subarray is [1, 2, 3, 4, 5]. The elements greater than or equal to 3 are 3, 4, 5, so the answer is 3. For the second example: - For the query (1, 6, 15), the subarray is [10, 20, 10, 10, 20, 10]. The elements greater than or equal to 15 are 20 and 20, so the answer is 2. - For the query (2, 5, 20), the subarray is [20, 10, 10, 20]. The elements greater than or equal to 20 are 20 and 20, so the answer is 2. For the third example: - Each of the queries asks about subarrays consisting only of the element 5 or a mixture of 4 and 5, with all values meeting the threshold of 5 or 4 appropriately.","solution":"def process_queries(n, q, array, queries): Process queries to find the number of elements in subarray a[l...r] that are greater than or equal to k. Parameters: n : int : number of elements in the array q : int : number of queries array : list : list of n integers queries : list : list of queries, each query is a tuple (l, r, k) Returns: list : list of results for each query results = [] for l, r, k in queries: count = 0 for i in range(l-1, r): if array[i] >= k: count += 1 results.append(count) return results # Example usage: # n, q = 5, 3 # array = [1, 2, 3, 4, 5] # queries = [(1, 3, 2), (2, 4, 5), (1, 5, 3)] # results = process_queries(n, q, array, queries) # print(results) # Output: [2, 0, 3]"},{"question":"Given an `n x n` grid representing a maze where each cell can either be an open space (denoted by \'.\') or a wall (denoted by \'#\'), your task is to determine the minimum number of steps required to move from the top-left corner (0,0) to the bottom-right corner (n-1,n-1). You can move up, down, left, or right, but you cannot move diagonally. Also, you cannot move through walls. In other words, only horizontal and vertical movements through open spaces are allowed. If it is not possible to reach the bottom-right corner from the top-left corner, return -1. **Input:** - An integer n (1 ≤ n ≤ 1000) representing the size of the grid. - An `n x n` grid where each cell is either \'.\' or \'#\'. **Output:** - Print a single integer representing the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible, print -1. **Example:** Input: ``` 4 .... .. .... .#.. ``` Output: ``` 5 ``` Input: ``` 3 .#. . . ``` Output: ``` -1 ``` **Explanation:** In the first example, a possible path is: ``` (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) ``` In the second example, it is impossible to reach the bottom-right corner from the top-left corner.","solution":"from collections import deque def min_steps_to_exit_maze(n, grid): Returns the minimum number of steps required to move from the top-left corner to the bottom-right corner of the grid. # Directions for movement: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Check if the starting or ending point is a wall if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 # BFS initialization queue = deque([(0, 0, 0)]) # (row, column, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() # If reached the target if r == n-1 and c == n-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) # If end is not reachable return -1"},{"question":"You are given a list of integers. The task is to pick as many integers from the list as possible such that their sum is divisible by a given integer K. You need to write a function that returns the maximum possible sum of the selected integers. # Input: - The input consists of two integers N and K, where N is the number of integers in the list, and K is the integer used to check for divisibility. - The next line contains N space-separated integers representing the list of integers. # Output: - Output a single integer, the maximum sum possible which is divisible by K. # Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ 100 - 1 ≤ list[i] ≤ 10^5 # Example Input: ``` 5 4 3 1 4 2 8 ``` # Example Output: ``` 16 ``` # Explanation: In this example, the sum of integers 3, 1, 4, and 8 is 16, which is divisible by 4. No other combination of integers results in a larger sum that is divisible by 4.","solution":"def max_sum_divisible_by_k(n, k, arr): Returns the maximum possible sum of selected integers such that it is divisible by k. n: int - the number of integers in the list k: int - the divisor arr: list of int - list of integers dp = [0] * k # dp[i] will be the max sum % k == i for num in arr: # We need to iterate over a copy of dp to not update dp during the iteration new_dp = dp[:] for i in range(k): new_sum = dp[i] + num new_dp[new_sum % k] = max(new_dp[new_sum % k], new_sum) dp = new_dp # update the dp array return dp[0] # Test code"},{"question":"A company is organizing a tech event and has N workshops scheduled throughout the day. Each workshop must be assigned to a room based on its start and end time. A room can only be assigned to one workshop at a time and no two workshops should overlap in a single room. Your task is to determine the minimum number of rooms required to accommodate all workshops. Constraints: - 1 ≤ N ≤ 100000 - 0 ≤ start_time, end_time ≤ 23:59 Input: - The first line contains an integer N. - The next N lines each contain two strings representing start and end times of a workshop in \\"HH:MM\\" format. Output: - A single integer representing the minimum number of rooms required. Example: Input: 3 09:00 10:30 09:15 11:00 11:00 12:00 Output: 2","solution":"def min_meeting_rooms(workshops): Determine the minimum number of meeting rooms required to accommodate all workshops. :param workshops: List of tuples where each tuple contains two string values representing the start and end time of a workshop in \\"HH:MM\\" format. :return: Integer representing the minimum number of rooms required. if not workshops: return 0 intervals = [] for start, end in workshops: start_hour, start_minute = map(int, start.split(\':\')) end_hour, end_minute = map(int, end.split(\':\')) start_total_minutes = start_hour * 60 + start_minute end_total_minutes = end_hour * 60 + end_minute intervals.append((start_total_minutes, end_total_minutes)) intervals.sort() import heapq room_heap = [] for interval in intervals: if room_heap and room_heap[0] <= interval[0]: heapq.heappop(room_heap) heapq.heappush(room_heap, interval[1]) return len(room_heap) # Example usage: # workshops = [(\\"09:00\\", \\"10:30\\"), (\\"09:15\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] # print(min_meeting_rooms(workshops)) # Output: 2"},{"question":"A social networking platform wants to implement a new feature to suggest potential friends to users based on their current friends\' network. The feature works by identifying a user\'s two-hop friends (friends of friends) and suggesting them as potential new friends, provided that they are not already direct friends with the user. More formally, consider a user u who has friends F_u. A two-hop friend of u is any user v who is a friend of a friend of u, but is not already a direct friend of u. You are given a list of friendships on the social networking platform. Each friendship is a pair of user IDs (a, b), indicating that user a and user b are friends with each other. Given the friendships, you need to compute the list of suggested friends for a specific user, u. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2) — the number of users and the number of friendships. The next m lines each contain two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i) — indicating that user a_i and user b_i are friends. The next line contains a single integer u (1 ≤ u ≤ n) — the user ID for which you need to find the suggested friends. Output On a single line, print the user IDs of the suggested friends for user u in increasing order. If there are no suggested friends, print -1. Example Input 6 5 1 2 2 3 2 4 3 5 4 6 2 Output 5 6 Note In this example, users 5 and 6 are friends of user 2\'s friends but are not direct friends with user 2. Therefore, they are suggested as potential friends for user 2.","solution":"def suggest_friends(n, m, friendships, u): from collections import defaultdict # Create an adjacency list to represent the social network graph adj_list = defaultdict(set) for a, b in friendships: adj_list[a].add(b) adj_list[b].add(a) # Get direct friends of u direct_friends = adj_list[u] # To store the suggested friends suggested_friends = set() # Traverse the friends of u\'s friends (two-hop friends) for friend in direct_friends: for friend_of_friend in adj_list[friend]: # Add to suggested friends if not u and not a direct friend of u if friend_of_friend != u and friend_of_friend not in direct_friends: suggested_friends.add(friend_of_friend) # Convert to list and return in sorted order or -1 if no suggested friends suggested_friends = sorted(suggested_friends) if not suggested_friends: return [-1] return suggested_friends"},{"question":"You are working on a unique navigation system for a museum. The museum is arranged as an undirected graph with **n** rooms connected by **m** corridors. Each room is represented as a node, and each corridor is represented as an edge between two nodes. You need to make sure the system can efficiently answer shortest path queries between any pair of rooms. Your task is to preprocess the graph so that you can quickly answer queries about the shortest path distance between any two rooms. The graph is represented as follows: - The first line contains two integers, **n** (the number of rooms) and **m** (the number of corridors). - Each of the next **m** lines contains three integers, **u**, **v**, and **w**, meaning there is a corridor between room **u** and room **v** that has a length of **w**. After reading the graph, you will be given **q** queries, where each query contains two integers **a** and **b** (the two rooms for which you need to find the shortest path distance). Output the shortest path distance for each query. If there is no path between **a** and **b**, output -1 instead. # Input ``` 5 6 1 2 3 1 3 5 2 3 2 2 4 4 3 4 1 4 5 7 3 1 5 2 3 1 4 ``` # Output ``` 12 2 6 ``` # Explanation 1. The shortest path from room 1 to room 5 is: 1 → 2 → 3 → 4 → 5 with a total length of 3 + 2 + 1 + 7 = 13. 2. The shortest path from room 2 to room 3 is directly along the corridor with length 2. 3. The shortest path from room 1 to room 4 is: 1 → 2 → 3 → 4 with a total length of 3 + 2 + 1 = 6. **Constraints:** - 1 ≤ n ≤ 500 - 1 ≤ m ≤ 10,000 - 1 ≤ u, v, a, b ≤ n - 1 ≤ w ≤ 100 - 1 ≤ q ≤ 100","solution":"def floyd_warshall(n, edges): Computes the shortest paths between all pairs of nodes using Floyd-Warshall algorithm. Parameters: n (int): Number of nodes. edges (list of tuple): List of edges where each edge is (u, v, w) denoting an edge between u and v with weight w. Returns: list: 2D list representing shortest path distance between each pair of nodes. INF = float(\'inf\') dist = [[INF] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v, w in edges: dist[u-1][v-1] = w dist[v-1][u-1] = w for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def preprocess_graph_and_answer_queries(n, m, edges, queries): dist = floyd_warshall(n, edges) results = [] for a, b in queries: if dist[a-1][b-1] == float(\'inf\'): results.append(-1) else: results.append(dist[a-1][b-1]) return results"},{"question":"Write a function `smallest_window` that takes two strings `s` and `t`, and finds the smallest contiguous substring of `s` that contains all the characters in `t` exactly once. If there are multiple such substrings, return the one that appears first in `s`. If no such substring exists, return an empty string. # Function Signature ```python def smallest_window(s: str, t: str) -> str: ``` # Input - A string `s` consisting of lowercase alphabets only. - A string `t` consisting of lowercase alphabets only. # Output - Return the smallest contiguous substring of `s` that contains all the characters in `t` exactly once. If there are multiple such substrings, return the one that appears first in `s`. If no such substring exists, return an empty string. # Examples **Example 1:** ```python s = \\"adobecodebanc\\" t = \\"abc\\" smallest_window(s, t) ``` Output: ```python \\"banc\\" ``` **Explanation:** The smallest substring that contains \\"a\\", \\"b\\", and \\"c\\" once is \\"banc\\". **Example 2:** ```python s = \\"thisisateststring\\" t = \\"tist\\" smallest_window(s, t) ``` Output: ```python \\"tstri\\" ``` **Explanation:** The smallest substring that contains \\"t\\", \\"i\\", \\"s\\", \\"t\\" once is \\"tstri\\". **Example 3:** ```python s = \\"a\\" t = \\"b\\" smallest_window(s, t) ``` Output: ```python \\"\\" ``` **Explanation:** It is not possible to form a substring that contains \\"b\\" from \\"a\\". # Constraints - The length of `s` (|s|) and `t` (|t|) will be in the range [1, 1000].","solution":"def smallest_window(s: str, t: str) -> str: from collections import Counter if not s or not t: return \\"\\" # Count characters in t t_count = Counter(t) required = len(t_count) # Initialize the sliding window l, r = 0, 0 formed = 0 window_counts = {} # Result variables ans = float(\\"inf\\"), None, None while r < len(s): char = s[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in t_count and window_counts[char] == t_count[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in t_count and window_counts[char] < t_count[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]:ans[2]+1]"},{"question":"Mahmoud loves to play Chess. He has come up with a simplified version of the game to challenge himself. In this game, there is an 8x8 chessboard and a knight placed on some cell. Mahmoud’s goal is to determine if he can reach a given target cell in exactly n moves. In one move, a knight follows the standard L-shape move (i.e., it can move to any cell that is two cells in one direction and one cell perpendicular to that, forming an \'L\' shape). Your task is to write a function that determines whether the knight can reach the target cell from the starting cell in exactly n moves. Input The first line contains an integer n (0 ≤ n ≤ 20) – the number of moves. The second line contains the starting position of the knight, represented by two space-separated integers r1, c1 (1 ≤ r1, c1 ≤ 8). The third line contains the target position, represented by two space-separated integers r2, c2 (1 ≤ r2, c2 ≤ 8). Output Output \\"YES\\" (without quotes) if the knight can reach the target cell in exactly n moves, otherwise output \\"NO\\" (without quotes). Examples Input 3 4 4 6 5 Output YES Input 1 1 1 2 3 Output YES Input 2 3 3 7 7 Output NO Note In the first example, the knight can reach the position (6, 5) from (4, 4) in exactly 3 moves using one possible sequence: (4, 4) -> (5, 6) -> (3, 7) -> (6, 5). In the second example, the knight can reach the position (2, 3) from (1, 1) in exactly 1 move using one possible sequence: (1, 1) -> (2, 3). In the third example, even with 2 moves, there is no possible sequence of moves that allows the knight to reach from (3, 3) to (7, 7).","solution":"def can_knight_reach_in_n_moves(n, start, target): Determines if the knight can reach the target cell from the starting cell in exactly n moves. Parameters: n (int): Number of moves (0 <= n <= 20) start (tuple): Starting position of the knight (r1, c1) target (tuple): Target position of the knight (r2, c2) Returns: str: \\"YES\\" if the knight can reach the target in exactly n moves, else \\"NO\\" from collections import deque # Knight\'s possible movements moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] r1, c1 = start r2, c2 = target queue = deque([(r1, c1, 0)]) # (current_row, current_col, current_move_count) visited = set([(r1, c1, 0)]) while queue: cr, cc, cm = queue.popleft() # If we have made exactly n moves if cm == n: if (cr, cc) == (r2, c2): return \\"YES\\" continue # Generate all possible moves next for dr, dc in moves: nr, nc = cr + dr, cc + dc if 1 <= nr <= 8 and 1 <= nc <= 8 and (nr, nc, cm + 1) not in visited: visited.add((nr, nc, cm + 1)) queue.append((nr, nc, cm + 1)) return \\"NO\\""},{"question":"Alice has recently started working on a project related to network transmissibility. In the network, nodes represent computers, and edges represent direct communication links between them. Each communication link has a certain latency associated with it. Alice wants to determine the shortest possible total latency needed to establish communication between any two computers in the network. Given a network with n computers and m communication links, where each link is represented as a triplet (u, v, w) signifying a link from computer u to computer v with latency w, find the latency of the shortest communication path between every pair of computers. Input The first line contains two integers n (2 ≤ n ≤ 500) and m (1 ≤ m ≤ 10000), representing the number of computers and links, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n and 1 ≤ w ≤ 1000), representing a direct communication link between computer u and computer v with latency w. Output Output n lines, each containing n integers, where the j-th integer in the i-th line represents the latency of the shortest communication path from computer i to computer j. If there is no path, output -1 instead of the latency. Examples Input 4 4 1 2 3 2 3 4 3 4 5 4 1 6 Output 0 3 7 -1 -1 0 4 -1 -1 -1 0 5 6 -1 5 0 Note In the example, the latency from computer 1 to computer 3 is 7 (1->2->3), and there is no communication path from computer 1 to computer 4. Therefore, the output for 1->4 is -1. Each computer has a latency of 0 to itself.","solution":"def floyd_warshall(n, edges): # Initialize the distance matrix with \\"infinity\\" and 0s on the diagonal dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Populate initial distances with the direct edge costs for u, v, w in edges: dist[u-1][v-1] = w # Apply Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace \'inf\' with -1 for no path available for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist"},{"question":"Given a 2D grid of size N x M, you are initially positioned at the top-left cell (1, 1). Your goal is to reach the bottom-right cell (N, M). You can only move in two directions: - Right (R): Move from (x, y) to (x, y+1) - Down (D): Move from (x, y) to (x+1, y) You need to find the number of distinct paths from the start to the goal cell. However, some cells in the grid are blocked, and you cannot move through them. These blocked cells are given as pairs (i, j) where 1 <= i <= N and 1 <= j <= M. You cannot move to or through these cells. Write a program that calculates the number of distinct paths from (1, 1) to (N, M), without passing through any blocked cells. If there is no valid path, return 0. # Input The first line consists of two integers `N` and `M` (1 <= N, M <= 1000), indicating the dimensions of the grid. The second line consists of an integer `K` (0 <= K <= 10^5), which denotes the number of blocked cells. The following `K` lines each contains two integers `i` and `j` (1 <= i <= N, 1 <= j <= M), representing the coordinates of the blocked cells. # Output Print a single integer, the number of distinct paths from (1, 1) to (N, M) modulo (10^9 + 7). If there is no valid path, print 0. # Example Input ``` 3 3 2 2 2 2 3 ``` Output ``` 1 ``` Input ``` 3 3 3 1 2 2 1 2 2 ``` Output ``` 0 ``` # Note - In the first example, the unique path is (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3). - In the second example, there is no valid path due to multiple blocked cells.","solution":"def number_of_paths(N, M, K, blocked_cells): MOD = 10**9 + 7 # Initialize the grid with 0 paths. dp = [[0] * M for _ in range(N)] # Block the cells in the grid. for i, j in blocked_cells: dp[i-1][j-1] = -1 # Initialize the starting position if it\'s not blocked. if dp[0][0] == 0: dp[0][0] = 1 else: return 0 for i in range(N): for j in range(M): if dp[i][j] == -1: continue # Move down if i > 0 and dp[i-1][j] != -1: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD # Move right if j > 0 and dp[i][j-1] != -1: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return max(dp[N-1][M-1], 0)"},{"question":"Brimstone is planning an expedition to collect rare resources scattered across a grid. The grid is represented as a two-dimensional plane where each cell contains a certain number of resources. Brimstone can start his expedition from any cell and can move to any of the four adjacent cells: up, down, left, and right. Brimstone can also choose a special ability to teleport instantly from his current cell to any other cell on the grid. He can use this teleportation ability exactly once during his expedition. You are to determine the maximum resources Brimstone can collect if he starts his expedition from any cell on the grid, moves to adjacent cells, and uses his teleportation ability once. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns of the grid. Each of the next n lines contains m integers r_ij (-10^9 ≤ r_ij ≤ 10^9) — indicating the number of resources in the (i, j)-th cell of the grid. Output Print a single integer — the maximum resources Brimstone can collect. Example Input 2 2 1 2 3 4 Output 10 Input 3 3 0 0 0 0 100 0 0 0 0 Output 100 Note In the first example, Brimstone can start from the cell (0, 0), collect 1 resource, move to the cell (0, 1) to collect 2 more resources (total 3), then use his teleportation ability to jump to the cell (1, 1) to collect 4 more resources, and finally move to the cell (1, 0) to collect 3 more resources for a total of 10. In the second example, Brimstone can start from the cell (1, 1) to collect 100 resources and no further movement will increase his total collected resources.","solution":"def max_resources(n, m, grid): max_resource = -float(\'inf\') for i in range(n): for j in range(m): current_resources = sum([grid[x][y] for x in range(n) for y in range(m)]) max_resource = max(max_resource, current_resources) return max_resource"},{"question":"PandeyG has graduated from HEgwarts and is now an expert in off-the-cuff spells. In his new assignments, he often needs to sort an array but he has acquired a special power from his spellbook. The power allows him to partition any array segment into two subsegments and then sort each subsegment independently, but he can use this spell only once per segment. Given an array of n integers, PandeyG wants to know if he can transform it into a non-decreasing array by using the partitioning spell at most once. Your task is to determine if PandeyG can use the partitioning spell to sort the array into non-decreasing order with this limitation. Input Format: The first line represents the number of test cases, t. Each of the next 2*t lines contain: - An integer n, the size of the array. - An array of n integers. Output Format: For each test case print \\"YES\\" if PandeyG can transform the array into a non-decreasing order using the partitioning spell at most once, otherwise print \\"NO\\". Constraints: 1 ≤ t ≤ 1000 1 ≤ n ≤ 10^5 -10^9 ≤ array[i] ≤ 10^9 SAMPLE INPUT 3 5 1 3 2 4 5 4 4 3 2 1 6 1 2 3 5 4 6 SAMPLE OUTPUT YES NO YES Explanation: In the first test case, by partitioning the array at the second index and sorting both subsegments [1, 3] (already sorted) and [2, 4, 5] (sorted to [2, 4, 5]), we can form the sorted array [1, 2, 3, 4, 5]. In the second test case, the array is in strictly decreasing order, and no single partition will sort the array. In the third case, by partitioning at the fourth index, subsegments [1, 2, 3, 5] (sorted to [1, 2, 3, 5]) and [4, 6] (already sorted), we can form the sorted array [1, 2, 3, 4, 5, 6].","solution":"def can_transform(array): n = len(array) if n <= 2: return True def is_sorted(subarray): return all(subarray[i] <= subarray[i + 1] for i in range(len(subarray) - 1)) # Try partition array in every place and check if that makes the array sorted for i in range(n - 1): left = array[:i + 1] right = array[i + 1:] if is_sorted(sorted(left) + sorted(right)): return True return False def process_test_cases(t, test_cases): results = [] for n, array in test_cases: if can_transform(array): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a game development project, you need to generate a leaderboard for players based on their scores. Each player can obtain scores from multiple games, and the leaderboard should reflect the highest score obtained by each player. The leaderboard should list the players in descending order of their highest scores. In the case of a tie (multiple players having the same highest score), the players should be listed in lexicographical order of their names. **Input Format**: - The first line contains an integer P denoting the number of players. - Each of the next P lines contains a player\'s name and their highest score to date. The player\'s name is a non-empty string consisting of lowercase English letters, and their score is a non-negative integer. - The input ends with an empty line. **Output Format**: - Print the leaderboard, one player per line. Each line should contain the player\'s name and their highest score separated by a space. **Constraints**: - 1 ≤ P ≤ 10^5 - 0 ≤ Score of each player ≤ 10^6 - The length of each player\'s name is between 1 and 50 characters inclusive. **SAMPLE INPUT**: ``` 5 alice 300 bob 200 charlie 400 dave 300 eve 500 ``` **SAMPLE OUTPUT**: ``` eve 500 charlie 400 alice 300 dave 300 bob 200 ``` **Hint**: You may use a sorting algorithm to sort the players first by their highest scores in descending order and then by their names in lexicographical order if the scores are the same.","solution":"def generate_leaderboard(player_data): Generates a leaderboard based on the highest scores of players. Args: player_data (list of tuple): List of tuples where each tuple contains player\'s name and their highest score. Returns: list of tuple: List of tuples representing the sorted leaderboard. # Sort player data first by score in descending order and then by name in ascending order in case of tie player_data.sort(key=lambda x: (-x[1], x[0])) return player_data def get_leaderboard_from_input(input_data): Parses input data to generate a leaderboard. Args: input_data (str): Multiline string where the first line is an integer denoting the number of players, followed by each player\'s name and highest score on separate lines. Returns: list of tuple: The sorted leaderboard. lines = input_data.strip().split(\'n\') P = int(lines[0]) player_data = [] for i in range(1, P + 1): name, score = lines[i].split() score = int(score) player_data.append((name, score)) return generate_leaderboard(player_data)"},{"question":"A large company is organizing a team-building challenge where employees are grouped into teams to solve a series of tasks. Each team receives a set of numbers, and their goal is to determine if there exists a subset of the numbers that sum up to zero. Since the company has a lot of teams and members, they need an efficient way to determine whether such a subset exists for each team. An array of integers is given, and you need to determine if there is a non-empty subset whose sum is zero. The subset can contain one or more elements from the array, and it does not need to be contiguous. Input Each test consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The next t lines describe each test case. Each test case consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, output \\"YES\\" if there exists a non-empty subset whose sum is zero, otherwise, output \\"NO\\". Example Input: 3 4 4 -1 1 2 5 1 2 3 4 5 5 -3 1 2 -2 3 Output: YES NO YES Note: In the first test case, the subset {-1, 1} sums to zero. In the second test case, no non-empty subset sums to zero. In the third test case, the subset {-3, 2, 1} or {-2, 2} sums to zero.","solution":"def has_subset_sum_zero(arr): This function returns True if there\'s a non-empty subset of the array that sums to zero, else False. n = len(arr) prefix_sums = {0} # Initialize prefix sums set with zero to handle the case when single element is zero. current_sum = 0 for num in arr: current_sum += num if current_sum in prefix_sums: return True prefix_sums.add(current_sum) return False def team_building_challenge(t, test_cases): This function processes multiple test cases to check if a subset with zero sum exists for each array. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains (n, arr), where n (int): Length of the array arr (list of int): The array elements Returns: list of str: The result for each test case, \\"YES\\" or \\"NO\\" results = [] for n, arr in test_cases: if has_subset_sum_zero(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer N, determine if it is an Armstrong number. An Armstrong number for a given number of digits is an integer such that the sum of its digits each raised to the power of the number of digits equals the number itself. Constraints * 1 <= N <= 10^6 * N is an integer. Input Input is given from Standard Input in the following format: N Output Print `Yes` if N is an Armstrong number; print `No` otherwise. Examples Input 153 Output Yes Input 947 Output No Input 9474 Output Yes","solution":"def is_armstrong_number(n): Determines if a given number n is an Armstrong number. num_str = str(n) num_digits = len(num_str) num_sum = sum(int(digit) ** num_digits for digit in num_str) return num_sum == n"},{"question":"Haruto is a city planner working on the layout of a new urban area. The city is designed as a grid of blocks, with each block represented as a point on a two-dimensional plane with integer coordinates. Haruto wants to place parks within these blocks. A park can only be placed on a block if there are no other parks on the neighboring blocks. Two blocks are considered neighbors if they share an edge. Haruto needs to find a way to place the maximum number of parks in the city grid without violating the neighbor rule. Given the size of the grid, help Haruto determine the maximum number of parks that can be placed following this rule. **Input:** The input is formatted as follows: M N The first line contains two integers M and N (1 ≤ M, N ≤ 1000), where M is the number of rows and N is the number of columns of the grid. **Output:** Output the maximum number of parks that can be placed following the neighbor rule. Example 1: Input: 3 3 Output: 5 Example 2: Input: 2 2 Output: 2 Explanation: In Example 1, one possible optimal placement of 5 parks on a 3x3 grid is: ``` P . P . P . P . P ``` In Example 2, one possible optimal placement of 2 parks on a 2x2 grid is: ``` P . . P ```","solution":"def max_parks(M, N): Returns the maximum number of parks that can be placed in an MxN grid such that no two parks are on neighboring blocks. # The maximum number of parks is achieved by filling every alternate cell # in a checkerboard pattern. Therefore, it can be calculated using: max_parks = ((M + 1) // 2) * ((N + 1) // 2) + (M // 2) * (N // 2) return max_parks"},{"question":"You are given an array of positive integers. You can perform the following operation any number of times: Choose any subarray (contiguous segment) of the array and decrease every element of that subarray by 1. Determine the minimum number of operations required to make all the elements of the array equal to zero. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line of each test case contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output For each test case, print a single integer — the minimum number of operations required to make all the elements of the array equal to zero. Example Input 4 3 3 2 3 4 4 4 4 4 5 1 2 1 2 1 1 7 Output 3 4 2 7 Note In the first test case, you can perform the following operations: 1. Choose the subarray [2, 3] and decrement it to get [3, 1, 2]. 2. Choose the subarray [1, 2] and decrement it to get [3, 0, 1]. 3. Choose the subarray [1, 3] and decrement it to get [2, 0, 0]. 4. Choose the subarray [1] and decrement it to get [1, 0, 0]. 5. Choose the subarray [1] and decrement it to get [0, 0, 0]. Hence, the minimum number of operations is 3. In the second test case, you need 4 operations to reduce all elements to zero since all elements are already the same and equal to 4. In the third test case, you can perform the following operations: 1. Choose the subarray [1, 2, 1, 2, 1] and decrement it to get [0, 1, 0, 1, 0]. 2. Choose the subarray [1, 1] and decrement it to get [0, 0, 0, 0, 0]. Hence, the minimum number of operations is 2.","solution":"def min_operations_to_zero(t, test_cases): Returns the minimum number of operations required to make all elements of the array in each test case equal to zero. Parameters: t (int): Number of test cases. test_cases (list): List of tuples where each tuple contains an integer n and a list of n integers. Returns: list: List of integers where each integer represents the minimum number of operations for the corresponding test case. results = [] for n, array in test_cases: results.append(max(array)) return results"},{"question":"The \\"Supermarket Inventory Management System\\" is a crucial tool for efficient operations of a supermarket. One of the common functionalities in such systems is handling batch updates to item quantities based on sales or restocking events. Your task is to write a program that simulates the inventory changes handled via several operations. The supermarket inventory system consists of several items, each identified uniquely by an item ID and having a current stock quantity. The program should read the initial inventory statuses, followed by a series of operations to update the inventory, and finally, print the inventory statuses after applying all the operations. The operations are detailed below: * ADD id quantity Increase the quantity of the item with the provided id by the specified quantity. If the item does not exist in the inventory, add the item to the inventory with the given quantity. * REMOVE id quantity Decrease the quantity of the item with the provided id by the specified quantity. If the resulting quantity is less than or equal to zero, remove the item from the inventory. * SET id quantity Set the quantity of the item with the provided id to the specified quantity. If the quantity is zero or less, remove the item from the inventory. * DELETE id Remove the item with the provided id from the inventory, regardless of its current quantity. The input consists of only one dataset which includes three parts. The first part gives the initial inventory statuses. Each line contains an item ID and its quantity separated by a space. The end of the initial inventory is indicated by a line \\"END_OF_INITIAL_INVENTORY\\". The second part gives a series of operations. Each operation is given in a line in the format specified above. The end of the operations is indicated by a line \\"END_OF_OPERATIONS\\". The third part is a single line containing the word \\"END\\". The program should output the final inventory statuses sorted by item IDs. Print each item ID followed by its quantity, each on a separate line. Constraints: * 1 ≤ number of initial items ≤ 100 * 1 ≤ number of operations ≤ 1000 * 0 ≤ quantity in operations ≤ 1000 * item ID is an alphanumeric string (1 ≤ length of item ID ≤ 10) Input: Multiple lines of initial inventory statuses, each formatted as \\"id quantity\\". \\"END_OF_INITIAL_INVENTORY\\" Multiple lines of operations, each formatted as one of the four operations described above. \\"END_OF_OPERATIONS\\" \\"END\\" Output: Multiple lines of final inventory statuses, each formatted as \\"id quantity\\". Example: Input: a1 10 b2 5 c3 0 END_OF_INITIAL_INVENTORY ADD a1 5 REMOVE b2 3 SET c3 10 DELETE b2 ADD d4 12 END_OF_OPERATIONS END Output: a1 15 c3 10 d4 12","solution":"def manage_inventory(input_data): inventory = {} processing_initial_inventory = True processing_operations = False for line in input_data: line = line.strip() if line == \\"END_OF_INITIAL_INVENTORY\\": processing_initial_inventory = False processing_operations = True continue elif line == \\"END_OF_OPERATIONS\\": processing_operations = False continue elif line == \\"END\\": break if processing_initial_inventory: item_id, quantity = line.split() inventory[item_id] = int(quantity) elif processing_operations: parts = line.split() command = parts[0] if command == \\"ADD\\": item_id, quantity = parts[1], int(parts[2]) if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity elif command == \\"REMOVE\\": item_id, quantity = parts[1], int(parts[2]) if item_id in inventory: inventory[item_id] -= quantity if inventory[item_id] <= 0: del inventory[item_id] elif command == \\"SET\\": item_id, quantity = parts[1], int(parts[2]) if quantity > 0: inventory[item_id] = quantity else: if item_id in inventory: del inventory[item_id] elif command == \\"DELETE\\": item_id = parts[1] if item_id in inventory: del inventory[item_id] sorted_inventory = sorted(inventory.items()) return sorted_inventory def format_inventory(inventory): return [f\\"{item_id} {quantity}\\" for item_id, quantity in inventory]"},{"question":"Given a 9×9 Sudoku puzzle where some of the cells are already filled with digits ranging from 1 to 9, determine whether it is possible to completely fill the grid following the Sudoku rules: - Each row must contain all digits from 1 to 9 without repetition. - Each column must contain all digits from 1 to 9 without repetition. - Each of the nine 3×3 subgrids must contain all digits from 1 to 9 without repetition. Your task is to write a program that reads the initial state of the Sudoku grid and outputs \\"Yes\\" if the puzzle is solvable according to the rules, otherwise output \\"No\\". Constraints: - There are at most 20 puzzles in the input. - The Sudoku grid will be represented as a 9×9 grid of characters. Input: - The input consists of multiple Sudoku puzzles. Each puzzle is represented by 9 lines of characters describing the current state of the grid. - A \'.\' character indicates an empty cell. - The end of the input is indicated by a line containing a single zero. Output: - For each puzzle, print \\"Yes\\" if the Sudoku puzzle is solvable, and \\"No\\" otherwise. Example: Input: 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 0 Output: Yes Yes","solution":"def is_valid_sudoku(board): rows, cols, squares = {}, {}, {} for r in range(9): for c in range(9): val = board[r][c] if val != \'.\': if r not in rows: rows[r] = set() if c not in cols: cols[c] = set() square = (r // 3, c // 3) if square not in squares: squares[square] = set() if val in rows[r] or val in cols[c] or val in squares[square]: return False rows[r].add(val) cols[c].add(val) squares[square].add(val) return True def solve_sudoku(board): empty = find_empty_location(board) if not empty: return is_valid_sudoku(board) row, col = empty for num in range(1, 10): if is_safe(board, row, col, str(num)): board[row][col] = str(num) if solve_sudoku(board): return True board[row][col] = \'.\' return False def find_empty_location(board): for r in range(9): for c in range(9): if board[r][c] == \'.\': return (r, c) return None def is_safe(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num or board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num: return False return True def process_input(input_string): puzzles = input_string.strip().split(\\"n\\") results = [] puzzle = [] for line in puzzles: if line == \\"0\\": if puzzle: results.append(\\"Yes\\" if solve_sudoku(puzzle) else \\"No\\") break elif len(line) == 9: puzzle.append(list(line)) if len(puzzle) == 9: results.append(\\"Yes\\" if solve_sudoku(puzzle) else \\"No\\") puzzle = [] return results def main(input_string): return \\"n\\".join(process_input(input_string))"},{"question":"You are given a string S consisting of uppercase English letters and an integer N. The string represents a sequence of encoded characters where each character is shifted forward by N positions in the alphabet (with wrapping from \'Z\' to \'A\'). Write a program to decode the string and output the original message. Constraints * S will have at most 100 characters. * 1 leq N leq 26 Input Input is given from Standard Input in the following format: S N Output Print the decoded message. Examples Input BCD 1 Output ABC Input XYZ 3 Output UVW Input HELLO 5 Output CZGGJ","solution":"def decode_string(S, N): Decodes the string S which is encoded by shifting each letter N positions forward in the alphabet. Args: S: str - Encoded string consisting of uppercase English letters N: int - Number of positions each character in S was shifted Returns: str: Decoded original message decoded_message = [] for char in S: # Calculate the original character by shifting backward original_char = chr(((ord(char) - ord(\'A\') - N) % 26) + ord(\'A\')) decoded_message.append(original_char) return \'\'.join(decoded_message) # Example usage: # input_string = \\"BCD\\" # shift_value = 1 # print(decode_string(input_string, shift_value)) # Output: \\"ABC\\""},{"question":"You are given a list of cities and corresponding temperatures recorded over a period of days by a weather monitoring system. Your task is to identify the day on which a particular city recorded the highest temperature, and the temperature itself. If multiple days have the maximum temperature, return the earliest day. Write a program that outputs the day with the highest temperature for the given city. Input The input is given in the following format: N city1 temp1 city2 temp2 :: cityN tempN N (1 ≤ N ≤ 1000) on the first line is the number of entries in the log. In the next N lines, each line contains a city name (a string without spaces) and a recorded temperature (an integer where -50 ≤ temperature ≤ 50). Output For each city, output the day (1-based index) on which the highest temperature was recorded along with the temperature itself. Examples Input 8 Tokyo 16 London 20 NewYork 23 Tokyo 20 London 15 NewYork 25 Tokyo 23 London 22 Output Tokyo 7 23 London 8 22 NewYork 6 25","solution":"def highest_temperature_days(n, entries): city_temperatures = {} for i in range(n): city, temp = entries[i] temp = int(temp) if city not in city_temperatures: city_temperatures[city] = (i + 1, temp) else: if temp > city_temperatures[city][1]: city_temperatures[city] = (i + 1, temp) return city_temperatures"},{"question":"Sarah has a sequence of integers (A_1, A_2, ..., A_N) and she wants to perform a series of operations on this sequence to make each element divisible by a given integer X. She can perform the following operation any number of times: * Select two indices i and j (1 <= i, j <= N, i ≠ j) and replace A_i with (A_i + A_j). Determine whether it is possible to make each element of the sequence divisible by X using the operations defined above. Constraints * 1 <= N <= 100000 * 1 <= X <= 10^9 * 0 <= A_i <= 10^9 Input Input is given from Standard Input in the following format: N X A_1 A_2 . . . A_N Output Print \\"Yes\\" if it\'s possible to make all elements divisible by X, otherwise print \\"No\\". Examples Input 4 3 1 2 3 4 Output Yes Input 3 5 5 10 15 Output Yes Input 3 2 1 2 3 Output No","solution":"def can_make_divisible(N, X, A): Determines if all elements of the sequence can be made divisible by X using the described operations. :param N: Number of elements in the sequence. :param X: The integer by which we want each element to be divisible. :param A: The list of integers in the sequence. :return: \\"Yes\\" if we can make each element divisible by X, otherwise \\"No\\". for num in A: if num % X != 0: return \\"No\\" return \\"Yes\\""},{"question":"Problem Statement You are given a binary tree composed of N nodes. Each node in the tree has an integer value assigned to it. Your task is to find a path from the root to a leaf such that the sum of the values of the nodes in the path is maximized. A path is defined as a sequence of nodes starting from some node and proceeding downwards to any of its descendants. The sum of the path is the sum of the values of all nodes in the path. Note that there may be multiple paths with the same maximum sum. In such cases, return the path that is lexicographically smallest. A path [a1, a2, ..., ak] is considered lexicographically smaller than a path [b1, b2, ..., bk] if at the first position where they differ, the node value in the first path is smaller than the node value in the second path. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of nodes in the tree. The following N lines describe the nodes. Each line contains three integers: value of the node, index of the left child (-1 if no left child), and index of the right child (-1 if no right child). The root of the tree is always the node with index 0. Output For each test case print the path that has the maximum sum. Constraints 1 ≤ T ≤ 100. 1 ≤ N ≤ 1000. -1000 ≤ node value ≤ 1000. Example Input: 2 5 3 1 2 1 -1 -1 -1 3 4 2 -1 -1 2 -1 -1 5 10 1 2 5 3 -1 -3 -1 4 7 -1 -1 -2 -1 -1 Output: 3 1 10 5 7","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def construct_tree(nodes): tree_nodes = [TreeNode(value) for value, _, _ in nodes] for idx, (value, left, right) in enumerate(nodes): if left != -1: tree_nodes[idx].left = tree_nodes[left] if right != -1: tree_nodes[idx].right = tree_nodes[right] return tree_nodes[0] def find_maximum_sum_path(root): if not root: return ([], 0) if not root.left and not root.right: return ([root.value], root.value) left_path, left_sum = [], float(\'-inf\') right_path, right_sum = [], float(\'-inf\') if root.left: left_path, left_sum = find_maximum_sum_path(root.left) if root.right: right_path, right_sum = find_maximum_sum_path(root.right) if left_sum > right_sum or (left_sum == right_sum and left_path < right_path): return ([root.value] + left_path, root.value + left_sum) else: return ([root.value] + right_path, root.value + right_sum) def max_sum_path_for_test_cases(test_cases): results = [] for nodes in test_cases: root = construct_tree(nodes) path, _ = find_maximum_sum_path(root) results.append(path) return results"},{"question":"Bob is designing a traffic system in his city. The city consists of n intersections connected by m one-way roads. Due to budget constraints, Bob needs to minimize the number of roads to keep only essential ones while ensuring that it is still possible to travel from any intersection to any other intersection using the remaining roads. The traffic system can be described as a directed graph with n nodes (intersections) and m edges (one-way roads). Bob\'s goal is to determine whether it is possible to retain only a subset of the roads such that the resulting graph is still strongly connected (there is a path between any pair of nodes in both directions) and has the minimum number of roads. Input The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and m (2 ≤ n ≤ 100000; n − 1 ≤ m ≤ min(200000, n(n − 1))) — the number of intersections and the number of roads in the city, respectively. Then m lines follow, each line describing one of the roads in the city. The i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i) denoting a one-way road from intersection u_i to the intersection v_i. The sum of n over all test cases does not exceed 100000. Similarly, the sum of m over all test cases does not exceed 200000. Output For each test case, if it is possible to retain a subset of the roads such that the city remains strongly connected, print YES and followed by k (the number of roads in the final subset), followed by k lines each containing two integers a_i and b_i (indicating a one-way road from a_i to b_i in the final subset). If it is not possible, print NO. Example Input 3 4 5 1 2 2 3 3 4 4 1 2 4 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 Output YES 4 1 2 2 3 3 4 4 1 YES 3 1 2 2 3 3 1 NO","solution":"from collections import defaultdict, deque def find_sccs(n, graph): index = [None] * n lowlink = [None] * n on_stack = [False] * n stack = [] sccs = [] current_index = 0 def strongconnect(node): nonlocal current_index index[node] = current_index lowlink[node] = current_index current_index += 1 stack.append(node) on_stack[node] = True for neighbor in graph[node]: if index[neighbor] is None: strongconnect(neighbor) lowlink[node] = min(lowlink[node], lowlink[neighbor]) elif on_stack[neighbor]: lowlink[node] = min(lowlink[node], index[neighbor]) if lowlink[node] == index[node]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == node: break sccs.append(scc) for i in range(n): if index[i] is None: strongconnect(i) return sccs def possible_to_retain_roads(test_cases): results = [] for n, m, roads in test_cases: graph = defaultdict(list) for u, v in roads: graph[u - 1].append(v - 1) sccs = find_sccs(n, graph) if len(sccs) == 1: results.append((\\"YES\\", m, roads)) else: results.append((\\"NO\\",)) return results"},{"question":"Given a sequence of integers, you are to determine if it is possible to rearrange these integers such that the absolute difference between any two consecutive integers is exactly one. If such a rearrangement is possible, provide any one of the possible rearrangements. If such a rearrangement is not possible, output \\"Not Possible\\". # Input The input is given as a single line from Standard Input in the following format: N A_1 A_2 ... A_N Where: - N (3 ≤ N ≤ 100) is the number of elements in the sequence. - A_1, A_2, ..., A_N are the elements of the sequence. # Output If it is possible to rearrange the sequence to satisfy the condition, output the rearranged sequence as a single line of space-separated integers. If it is not possible, output \\"Not Possible\\". # Constraints - The sequence contains exactly N integers. - The integers will be between -1000 and 1000 (inclusive). # Example Input 4 3 2 4 1 Output 1 2 3 4 Input 3 1 4 3 Output Not Possible Input 5 -1 0 1 2 3 Output -1 0 1 2 3","solution":"def rearrange_sequence(N, sequence): Determines if it\'s possible to rearrange the sequence such that the absolute difference between any two consecutive integers is exactly one. Args: N: int - the number of elements in the sequence. sequence: list of int - the sequence of integers. Returns: str: rearranged sequence as a string if possible, else \\"Not Possible\\". sequence.sort() for i in range(1, N): if abs(sequence[i] - sequence[i-1]) != 1: return \\"Not Possible\\" return \\" \\".join(map(str, sequence)) # Function to parse input and call corresponding function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) sequence = list(map(int, data[1:])) return rearrange_sequence(N, sequence)"},{"question":"You are a programmer working for a delivery service company. Your task is to optimize the delivery of parcels to various destinations. The company has a fleet of trucks, each with a specific capacity, and a list of parcels, each with a particular weight. Your objective is to determine the minimum number of trucks required to deliver all parcels, adhering to the truck\'s weight capacity. Input The first line contains two integers n (1 ≤ n ≤ 1000) and w (1 ≤ w ≤ 1000), where n is the number of parcels and w is the weight capacity of each truck. The second line contains n integers, where each integer represents the weight of a parcel (1 ≤ weight ≤ 1000). Output Print a single integer — the minimum number of trucks required to deliver all parcels. Example Input 5 10 7 2 3 9 4 Output 3 Input 8 15 10 8 5 7 6 12 4 3 Output 4 Explanation In the first example: 1. Truck 1 carries parcels with weights 7 and 2 (total weight = 9). 2. Truck 2 carries the parcel with weight 3. 3. Truck 3 carries the parcel with weight 9. 4. Truck 4 carries the parcel with weight 4. Hence, a minimum of 3 trucks is required. In the second example: 1. Truck 1 carries parcels with weights 10 and 3 (total weight = 13). 2. Truck 2 carries parcels with weights 8 and 4 (total weight = 12). 3. Truck 3 carries parcels with weights 5, 7 and 3 (total weight = 15). 4. Truck 4 carries parcels with weights 6 and 3 (total weight = 9). Hence, a minimum of 4 trucks is required.","solution":"def min_trucks_required(n, w, weights): Determines the minimum number of trucks required to deliver all parcels. Args: n (int): Number of parcels. w (int): Weight capacity of each truck. weights (list): List of parcel weights. Returns: int: Minimum number of trucks required. weights.sort(reverse=True) # sort weights in descending order trucks = 0 while weights: current_weight = 0 i = 0 while i < len(weights): if current_weight + weights[i] <= w: current_weight += weights.pop(i) else: i += 1 trucks += 1 return trucks"},{"question":"F: Sweets Distribution Tamara is organizing a sweets distribution event at her school. There are `N` different types of sweet packets, each containing `A_1, A_2, A_3, dots, A_N` pieces of sweets respectively. Tamara wants to distribute the sweets such that each student gets an equal number of sweets and no sweets are left undistributed. Calculate the maximum number of students that can receive sweets without having any leftovers. # Input The first line contains the integer `N`. The second line contains `N` integers `A_1, A_2, A_3, dots, A_N`, separated by spaces. # Output Output the maximum number of students that can receive sweets without any leftovers. Print each answer on a new line. # Constraints - `N` is an integer greater than or equal to `1` and less than or equal to `100` - `A_1, A_2, A_3, dots, A_N` are integers between `1` and `100` # Example Input 5 4 6 8 12 16 Output 2 Explanation All numbers can be divided by `2`. Therefore, `2` students can receive sweets without having any leftovers.","solution":"import math from functools import reduce def gcd_multiple(numbers): return reduce(math.gcd, numbers) def max_students(N, A): return gcd_multiple(A)"},{"question":"**Question: Traffic Light Control System** Requirements * All inputs are non-negative integers. * 2 leq |V| leq 1000 (where |V| denotes the number of intersections) * 1.5 |V| leq |E| leq 3 |V| (where |E| denotes the number of roads) * 1 leq u_{i}, v_{i} leq |V| (1 leq i leq |E|) * 1 leq l_{u_i, v_i} leq 1000 (1 leq i leq |E|) * The given graph representing the city has no self-loops / multiple edges and is guaranteed to be connected. * The city layout ensures that traffic lights are placed at each intersection. * 1 leq T_{text{max}} leq 100 (indicates the number of time cycles to be simulated) * 0 leq N_{text{vehicles}} leq 1000 (initial number of vehicles in the city) * 1 leq mathrm{veh_id}_{i} leq N_{text{vehicles}} (1 leq i leq N_{text{vehicles}}) * 1 leq mathrm{start}_{i}, mathrm{end}_{i} leq |V| (1 leq i leq N_{text{vehicles}}) Assumptions All vehicles start at a defined intersection and aim to reach their destination. Traffic lights control the flow of traffic, switching between red and green at each time cycle. Input Format Input is provided in the following form: |V| |E| u_{1} v_{1} l_{u_{1}, v_{1}} u_{2} v_{2} l_{u_{2}, v_{2}} : u_{|E|} v_{|E|} l_{u_{|E|}, v_{|E|}} T_{text{max}} N_{text{vehicles}} mathrm{veh_id}_{1} mathrm{start}_{1} mathrm{end}_{1} mathrm{veh_id}_{2} mathrm{start}_{2} mathrm{end}_{2} : mathrm{veh_id}_{N_{text{vehicles}}} mathrm{start}_{N_{text{vehicles}}} mathrm{end}_{N_{text{vehicles}}} Output Format The output should provide T_{text{max}} lines, each representing the status of the traffic lights at each intersection at every time cycle: state_1 state_2 : state_{T_{text{max}}} In particular, the state_i represents the configuration of the lights at all intersections during the i-th time cycle: * state_i = \\"R\\" (red) * state_i = \\"G\\" (green) It is guaranteed that intersections alternate states between \\"R\\" and \\"G\\" in subsequent time cycles. Examples Input 6 8 1 2 4 2 3 3 3 4 5 4 5 2 5 6 6 6 1 7 2 5 3 3 6 4 10 3 1 1 4 2 2 6 3 3 1 Output G R G R G R G R G R In this example, the intersections alternate between green and red, with the traffic flow ensuring that vehicles can reach their respective destinations efficiently.","solution":"def traffic_light_control(V, E, edges, Tmax, N_vehicles, vehicle_info): Simulates the traffic light control system. Returns a list of light states for each time cycle. light_states = [] # Initialize traffic light states, assuming the initial state is green. current_state = \\"G\\" for t in range(Tmax): light_states.append(current_state) # Alternate the state for the next cycle current_state = \\"R\\" if current_state == \\"G\\" else \\"G\\" return light_states"},{"question":"Anna is working on a sequence of operations to manipulate a list of integers. She has a list of n integers, and she performs a series of q operations. For each operation, Anna can either add a value to a specific index in the list or query the sum of elements in a specified subsequence of the list. Determine the results for the query operations. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100 000) — the number of elements in the list and the number of operations. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100 000) — the initial elements of the list. Each of the next q lines contains an operation in one of the following formats: - `1 x y` where `1 ≤ x ≤ n` and `1 ≤ y ≤ 100 000` — add y to the element at index x. - `2 l r` where `1 ≤ l ≤ r ≤ n` — query the sum of elements from index l to r (inclusive). Output For each query operation, output the result on a new line. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 5 2 2 4 5 Output 6 16 9 Note In the first example, the initial list is [1, 2, 3, 4, 5]. The operations are performed as follows: - `2 1 3`: Sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - `1 2 10`: Add 10 to the element at index 2. The list becomes [1, 12, 3, 4, 5]. - `2 1 3`: Sum of elements from index 1 to 3 is 1 + 12 + 3 = 16. - `1 5 2`: Add 2 to the element at index 5. The list becomes [1, 12, 3, 4, 7]. - `2 4 5`: Sum of elements from index 4 to 5 is 4 + 7 = 11.","solution":"def sequence_operations(n, q, arr, operations): result = [] for operation in operations: op_type, x, y = operation if op_type == 1: arr[x-1] += y elif op_type == 2: result.append(sum(arr[x-1:y])) return result"},{"question":"Array Rotation HINT: Rotate and Summarize Input: First line contains two integers, n and k. Second line contains n integers consisting the array elements. Output: Print the sum of the elements of the array after rotating it k times to the right. Constraints: 1 ≤ n ≤ 10^5 0 ≤ k ≤ n -10^9 ≤ Array elements ≤ 10^9 Problem Setter: Alex Smith SAMPLE INPUT 5 2 3 8 9 7 6 SAMPLE OUTPUT 33 Explanation: After rotating the array [3, 8, 9, 7, 6] two times to the right, we get [7, 6, 3, 8, 9]. The sum of the array elements is 7 + 6 + 3 + 8 + 9 = 33.","solution":"def rotate_and_sum(n, k, arr): Rotates the array `arr` to the right by `k` positions and returns the sum of the elements. Parameters: n (int): The number of elements in the array. k (int): The number of rotations to the right. arr (list of int): The array to be rotated. Returns: int: The sum of the elements of the rotated array. # Perform the rotation k = k % n # In case k is greater than n rotated_arr = arr[-k:] + arr[:-k] # Calculate the sum of the rotated array return sum(rotated_arr)"},{"question":"You are given a list of cities connected by one-way roads. Each city can have multiple outgoing roads but you can travel on each road only once. Your task is to find the number of unique paths from a starting city to a given destination city. A path is defined as a sequence of cities where each city is connected to the next city by a one-way road. You are allowed to travel through other cities on the path multiple times but must adhere to the constraints on the road usage. # Input: The input consists of: - An integer `n` representing the number of cities (2 leq n leq 10^5). - An integer `m` representing the number of one-way roads (1 leq m leq 2 times 10^5). - `m` pairs of integers (a_i, b_i) where 1 leq a_i, b_i leq n representing a one-way road from city a_i to city b_i. - An integer `start` representing the starting city (1 leq start leq n). - An integer `end` representing the destination city (1 leq end leq n). # Output: Output a single integer representing the number of unique paths from the starting city to the destination city. # Example: Input: ``` 6 7 1 2 1 3 2 4 2 5 3 5 4 6 5 6 1 6 ``` Output: ``` 3 ``` Explanation: There are three unique paths from city 1 to city 6: 1. 1 -> 2 -> 4 -> 6 2. 1 -> 2 -> 5 -> 6 3. 1 -> 3 -> 5 -> 6 # Note: - City indices (a_i, b_i) are given in 1-based index format. - You need to find all unique paths considering each road can be used only once in any path.","solution":"from collections import defaultdict, deque def count_unique_paths(n, m, roads, start, end): Returns the number of unique paths from start to end. n : int : number of cities m : int : number of one-way roads roads : List[Tuple[int, int]] : list of one-way roads represented as tuples (a, b) start : int : starting city end : int : destination city graph = defaultdict(list) for a, b in roads: graph[a].append(b) def count_paths(graph, start, end): queue = deque([(start, set())]) unique_paths_count = 0 while queue: current_city, visited_roads = queue.popleft() if current_city == end: unique_paths_count += 1 continue for next_city in graph[current_city]: if (current_city, next_city) not in visited_roads: new_visited_roads = visited_roads | {(current_city, next_city)} queue.append((next_city, new_visited_roads)) return unique_paths_count return count_paths(graph, start, end)"},{"question":"Write a program that reads an integer n (2 ≤ n ≤ 50) and then reads n strings each representing a mathematical expression containing only non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Determine if each expression evaluates to a prime number. Constraints - Each mathematical expression is valid and contains between 1 and 100 characters. - Operator precedence should be respected: parentheses are included to ensure clarity of precedence within expressions. Input - The first line contains the integer n. - Each of the following n lines contains a mathematical expression. Output - For each expression, print \\"Prime\\" if it evaluates to a prime number, otherwise \\"Not Prime\\". Examples Input 2 2 + 3 * (5 - 2) (7 - 2) * 2 Output Not Prime Prime Explanation In the first example, the expression evaluates to 2 + 3 * (5 - 2) = 2 + 3 * 3 = 2 + 9 = 11, which is a prime number. Thus, we print \\"Prime\\". In the second example, the expression evaluates to (7 - 2) * 2 = 5 * 2 = 10, which is not a prime number. Thus, we print \\"Not Prime\\".","solution":"def is_prime(num): Check if the given number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def evaluate_expressions(expressions): Evaluate a list of mathematical expressions and determine if their results are prime numbers. results = [] for expr in expressions: # Evaluate the mathematical expression value = eval(expr) if is_prime(value): results.append(\\"Prime\\") else: results.append(\\"Not Prime\\") return results"},{"question":"You work at a factory that manufactures custom-sized pallets. The pallets come in varying widths and heights, made by cutting standard-sized boards. Each board has a fixed width, but can be cut to any height. To optimize board usage, the factory developed a cutting machine that cuts each board vertically into smaller strips of different or the same heights. The machine can make any number of vertical cuts on any board, but each cut requires some time. The challenge is to minimize the total time required to cut the boards while ensuring each resulting strip matches a specified height required by a given order. A board\'s vertical cut time is the number of boards used multiplied by the number of cuts made on those boards. You are provided with a list of heights you need, representing separate client orders. For each height, return the minimum cut time required. Write a program to calculate the minimum cut time for each order given an initial list of required heights. Assume each cut on a board takes a unit time. Input The input consists of several datasets. Each dataset starts with an integer n (1 ≤ n ≤ 100000), the number of required heights. It is followed by n space-separated integers denoting the required heights. Input terminates with a zero (0). Output For each dataset, print the minimum total cut time on a separate line. Example Input 3 5 5 5 4 3 3 3 4 5 6 6 6 6 6 0 Output 3 4 5","solution":"def min_cut_time(n, heights): Calculate the minimum cut time required to satisfy the given heights. :param n: Number of required heights :param heights: List of integer heights required :return: Minimum cut time if n == 0: return 0 unique_heights = len(set(heights)) return unique_heights def process_input(input_data): Processes multiple sets of input and returns results for each set. :param input_data: List of strings representing multiple datasets :return: List of results for each dataset results = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break heights = list(map(int, input_data[index+1].split())) results.append(min_cut_time(n, heights)) index += 2 return results"},{"question":"You are given a sequence of `n` widgets, each with a given weight. The widgets are arranged in a row and can only be moved by swapping with neighboring widgets in exchange for a specific energy cost. The cost to swap two neighboring widgets with weights `wi` and `wj` is equal to the absolute difference of their weights `|wi - wj|`. Your task is to determine the minimum total energy cost required to sort the widgets in non-decreasing order of their weights. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 100,000), the number of widgets. The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10^9), the weights of the widgets. Output Print a single integer, the minimum total energy cost to sort the widgets in non-decreasing order. Examples Input 3 2 3 1 Output 2 Input 4 4 2 3 1 Output 5 Input 5 10 20 30 40 50 Output 0 Note In the first example, you can swap the first and the third widgets with a cost of `|2 - 1| = 1`, and then swap the second and the third widgets with a cost of `|3 - 1| = 2`, for a total cost of `1 + 1 = 2`. In the second example, one possible sequence of swaps is: - Swap the second and third widgets with a cost of `|3 - 2| = 1`, - Swap the third and fourth widgets with a cost of `|3 - 1| = 2`, - Swap the first and second widgets with a cost of `|4 - 2| = 2`, for a total cost of `1 + 2 + 2 = 5`. In the third example, the list is already sorted, so there\'s no cost required.","solution":"def min_sort_energy_cost(n, weights): This function returns the minimum total energy cost required to sort the widgets in non-decreasing order of their weights. Parameters: n (int): The number of widgets weights (list of int): The weights of the widgets Returns: int: The minimum total energy cost to sort the widgets # Create a copy of original weights original_weights = weights[:] # Sort the weights to get the target positions sorted_weights = sorted(weights) # Create a map from weight to original index weight_to_index = {weight: i for i, weight in enumerate(weights)} visited = [False] * n cost = 0 for i in range(n): if visited[i] or sorted_weights[i] == original_weights[i]: continue j = i cycle_size = 0 cycle_cost = 0 while not visited[j]: visited[j] = True next_index = weight_to_index[sorted_weights[j]] cycle_cost += abs(original_weights[j] - original_weights[next_index]) j = next_index cycle_size += 1 if cycle_size > 1: cost += cycle_cost - (cycle_size - 1) return cost"},{"question":"Given an NxM grid, you are standing at the top-left corner (1, 1). Your goal is to reach the bottom-right corner (N, M). From any cell (i, j) in the grid, you can move either right to (i, j+1) or down to (i+1, j). You cannot move diagonally or out of the grid\'s bounds. Your task is to calculate the number of unique paths from the top-left corner to the bottom-right corner. Input The first line contains an integer T denoting the number of test cases. Each of the following T lines contains two integers N and M which describe the grid\'s dimensions. Output For each test case, output the number of unique paths to travel from (1, 1) to (N, M). Constraints 1 ≤ T ≤ 100,000 1 ≤ N, M ≤ 100 Example Input: 3 2 2 3 3 3 7 Output: 2 6 28 Note In the first test case, the possible paths are: right -> down or down -> right. In the second test case, the possible paths are: RRD, RDR, DRR, DDR, RDD, DRD. The problem requires calculating binomial coefficients efficiently to handle large input sizes within constraints.","solution":"def factorial(n): if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def unique_paths(N, M): # The number of unique paths is given by the binomial coefficient (N+M-2) choose (M-1) return factorial(N + M - 2) // (factorial(N - 1) * factorial(M - 1)) def process_test_cases(test_cases): results = [] for N, M in test_cases: results.append(unique_paths(N, M)) return results # Driver function for the input-output format def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) test_cases.append((N, M)) index += 2 results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string as many times as you want: choose any two adjacent characters in the string and if they are the same, remove both characters and concatenate the remaining parts of the string together. The goal is to determine the length of the remaining string after no more operations can be performed. For example, if the input string is \\"abccba\\", you can perform the following operations: - Remove the two \\"c\\"s next to each other to obtain \\"abba\\". - Then, remove the two \\"b\\"s next to each other to obtain \\"aa\\". - Finally, remove the two \\"a\\"s next to each other to obtain an empty string. If the input string is \\"ababa\\", no operations can be performed, so the length of the remaining string is 5. Write a function that takes a single input string and returns the length of the remaining string after all possible operations are performed. **Function Signature:** ```python def remaining_string_length(s: str) -> int: ``` **Input:** - A single string s (1 ≤ len(s) ≤ 10^5), consisting of lowercase English letters. **Output:** - An integer representing the length of the remaining string after no more operations can be performed. **Examples:** Input: ``` \\"abccba\\" ``` Output: ``` 0 ``` Input: ``` \\"ababa\\" ``` Output: ``` 5 ``` Input: ``` \\"aabbaa\\" ``` Output: ``` 0 ``` **Note:** To efficiently solve this problem, consider using a stack to simulate the process of removing adjacent characters. This approach ensures the solution works within the input constraints.","solution":"def remaining_string_length(s: str) -> int: Returns the length of the remaining string after all possible adjacent duplicate removals. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"You are given a list of n unique integers, and you need to reorder it in such a way that the maximum difference between adjacent integers in the reordered list is minimized. Input The first line of the input contains one integer n (2 ≤ n ≤ 10^5) — the number of integers. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the integers in the list. Output Output the rearranged list such that the maximum difference between adjacent integers is minimized. If there are multiple solutions, output any of them. Examples Input: 5 10 1 9 3 6 Output: 1 3 6 9 10 Input: 4 4 8 1 3 Output: 1 3 4 8 Note In the first example, the differences between adjacent integers in the output list are [2, 3, 3, 1], so the maximum difference is 3. This is the minimized maximum difference among all possible reorderings. In the second example, the differences are [2, 1, 4], so the maximum difference is 4, which is minimized.","solution":"def minimize_max_diff(nums): Reorders the list of integers such that the maximum difference between adjacent integers in the reordered list is minimized. :param nums: List[int] - List of unique integers :return: List[int] - Reordered list nums.sort() return nums"},{"question":"Nancy has m corporate meetings to attend within a single day. Each meeting has a start time and an end time. Nancy wants to attend as many non-overlapping meetings as she can. Given the start and end times of each meeting, determine the maximum number of non-overlapping meetings Nancy can attend. Formally, each meeting i starts at si and ends at ei. Two meetings i and j do not overlap if either ei <= sj or ej <= si. Input The first line contains an integer m (1 ≤ m ≤ 100 000) — the number of meetings. Each of the next m lines contains two integers si and ei (1 ≤ si < ei ≤ 109), denoting the start and end times of the i-th meeting. Output Print a single integer — the maximum number of non-overlapping meetings Nancy can attend. Examples Input 5 1 3 2 4 3 5 7 8 5 6 Output 4 Input 4 1 2 2 3 3 4 5 6 Output 4 Note In the first example, one of the possible solutions is: - Attend the meeting from 1 to 3. - Attend the meeting from 3 to 5. - Attend the meeting from 5 to 6. - Attend the meeting from 7 to 8. That gives a total of 4 non-overlapping meetings. In the second example, Nancy can attend all meetings because none of them overlap.","solution":"def max_non_overlapping_meetings(meetings): Returns the maximum number of non-overlapping meetings can be attended. :param meetings: List of tuples, where each tuple contains the start and end times of a meeting. :return: Integer, maximum number of non-overlapping meetings. # Sort meetings based on their end time meetings.sort(key=lambda x: x[1]) # Initialize the count and the end time of the last attended meeting count = 0 last_end_time = 0 for start_time, end_time in meetings: if start_time >= last_end_time: count += 1 last_end_time = end_time return count"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell of the grid is either passable (denoted by \'.\') or impassable (denoted by \'#\'). You are allowed to move from a passable cell to another passable cell if they share an edge (vertically or horizontally). Your task is to determine the size of the largest connected component of passable cells in the grid. Constraints: - All values in input are integers. - 1 leq R, C leq 1000 - The grid contains only the characters \'.\' and \'#\'. Input: The input is given from Standard Input in the following format: ``` R C grid[1] grid[2] ... grid[R] ``` Here, `grid[i]` is a string of length `C` representing the i-th row of the grid. Output: Print the size of the largest connected component of passable cells. Examples Input: ``` 3 4 .#.. ..#. .#.. ``` Output: ``` 5 ``` Input: ``` 2 2 ``` Output: ``` 0 ``` Input: ``` 5 5 ..#.. ..#.. # ..#.. ..#.. ``` Output: ``` 4 ```","solution":"def largest_connected_component(R, C, grid): Returns the size of the largest connected component of passable cells (\'.\') in the grid. def dfs(x, y): # If the current cell is outside the grid or already visited or an obstacle if x < 0 or y < 0 or x >= R or y >= C or grid[x][y] == \'#\' or visited[x][y]: return 0 # Mark the current cell as visited visited[x][y] = True # Initialize the size of the component with the current cell itself size = 1 # Move in all four possible directions (right, left, down, up) size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size visited = [[False for _ in range(C)] for __ in range(R)] max_size = 0 for i in range(R): for j in range(C): if grid[i][j] == \'.\' and not visited[i][j]: # Calculate the size of the connected component component_size = dfs(i, j) max_size = max(max_size, component_size) return max_size"},{"question":"Polycarp is organizing a special event where he wants to create different rectangular matrices using characters \'0\' and \'1\'. Each matrix must have a unique pattern. Polycarp defines the beauty of a matrix as the number of \'1\'s in it. He is curious about how many integers from 1 to n can be represented as the beauty of some matrix in his created set of matrices. A rectangular matrix is defined by its dimensions, i.e., the number of rows and columns it has. Each cell in the matrix can either be \'0\' or \'1\'. Given an integer n, Polycarp wants to know for how many integers from 1 to n inclusive, there exists at least one matrix with that number of \'1\'s. Input The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^6). Output For each test case, print the number of integers from 1 to n that can be represented as the beauty of some matrix in the form of the number of \'1\'s. Example Input 3 3 5 7 Output 3 5 7 Explanation In the first test case: - You can have matrices with 1, 2, and 3 \'1\'s. For example: - A 1x1 matrix with one \'1\': 1 - A 2x1 matrix with two \'1\'s: 1 1 - A 3x1 matrix with three \'1\'s: 1 1 1 In the second test case: - You can form matrices with 1, 2, 3, 4, and 5 \'1\'s. For example: - A 1x1 matrix with one \'1\': 1 - A 2x1 matrix with two \'1\'s: 1 1 - A 3x1 matrix with three \'1\'s: 1 1 1 - A 4x1 matrix with four \'1\'s: 1 1 1 1 - A 5x1 matrix with five \'1\'s: 1 1 1 1 1 In the third test case, similarly, matrices can be formed with 1 to 7 \'1\'s.","solution":"def beauty_of_matrices(t, test_cases): For given number of test cases, return the integers from 1 to n that can be represented as the beauty of any matrix. Parameters: t : int : number of test cases test_cases : list of int : each entry is the value of n for that test case Returns: list of int : for each test case, return n itself as the number of beauties match. return test_cases"},{"question":"Develop an application that involves studying a sequence of operations performed on a numeric value. The operations consist of repeatedly multiplying the digits of the number until a single-digit value is obtained. Input The first line of input contains the number of test cases (T). Each of the next T lines contains an integer value. Output Print the final single-digit result for each test case. Constraints 1 < T ≤ 100 1 < value ≤ 10^5 SAMPLE INPUT 3 39 77 10 SAMPLE OUTPUT 8 4 0 Explanation 39 = 3 * 9 = 27 => 2 * 7 = 14 => 1 * 4 = 4 77 = 7 * 7 = 49 => 4 * 9 = 36 => 3 * 6 = 18 => 1 * 8 = 8 10 = 1 * 0 = 0","solution":"def multiply_digits_until_single(n): Repeatedly multiplies the digits of \'n\' until a single-digit value is obtained. while n > 9: product = 1 while n > 0: product *= (n % 10) n //= 10 n = product return n def process_test_cases(test_cases): Processes a list of test cases, where each case is an integer. Returns a list of results where each result is the final single-digit value obtained from the sequence of operations for the corresponding test case. results = [] for number in test_cases: results.append(multiply_digits_until_single(number)) return results"},{"question":"Fiona is a farmer who grows various types of crops on her land. She has divided her farm into a grid of cells, where each cell can grow a single type of crop. Every crop has a specific value, and Fiona wants to maximize the value she can collect from a specific sub-rectangle of the grid. Fiona also frequently changes the crop in a specific cell, affecting the crop\'s value in that cell. She wants a tool to dynamically update the grid\'s state and calculate the maximum value of crops in a specific sub-rectangle after each modification. Given the initial values of the crops in the grid, a series of modifications, and a number of sub-rectangle queries, can you help Fiona determine the maximum value she can collect for each query after performing each sequence of modifications? Input The first line contains three integers n, m, and q (1 ⩽ n, m ⩽ 500, 1 ⩽ q ⩽ 10^4) — the number of rows and columns in the grid, and the number of queries, respectively. Each of the next n lines contains m integers, where the j-th integer in the i-th line v_ij (1 ⩽ v_ij ⩽ 10^5) describes the initial value of the crop in the cell (i, j). The next q lines each contain four integers t, x, y, z representing a query or modification: - If t is 1, it means a modification at cell (x, y) where the crop value is changed to z (1 ⩽ x ⩽ n, 1 ⩽ y ⩽ m, 1 ⩽ z ⩽ 10^5). - If t is 2, it means a query for the maximum value of crops in the sub-rectangle defined by the top-left corner (x,y) and bottom-right corner (z, z1) inclusive (1 ⩽ x ≤ z ⩽ n, 1 ⩽ y ≤ z1 ⩽ m). Output For each query where t is 2, output a single integer — the maximum value of the crops in the specified sub-rectangle. Examples Input 4 3 5 4 2 3 1 5 6 3 7 8 9 1 2 1 2 3 10 2 1 1 3 3 1 4 3 11 2 2 2 4 3 2 1 2 4 3 Output 10 11 11 Input 3 3 4 1 2 3 4 5 6 7 8 9 2 1 1 3 3 1 1 1 10 2 1 1 3 3 2 2 2 2 2 Output 9 10 5 Note In the first example, after the first modification, the grid looks as follows: 4 2 3 1 10 6 3 7 8 9 1 2 After the second modification, it looks as follows: 4 2 3 1 10 6 3 7 8 9 1 11 The queries return the maximum values in the specified sub-rectangles at each step. In the second example, the initial grid is: 1 2 3 4 5 6 7 8 9 After the modification, the grid changes to: 10 2 3 4 5 6 7 8 9 The queries return the initial maximum value before and after the modification, and the maximum value of the single cell sub-rectangle.","solution":"def vegetable_farm(n, m, q, grid, queries): results = [] for query in queries: if query[0] == 1: # Modification query _, x, y, z = query grid[x - 1][y - 1] = z elif query[0] == 2: # Sub-rectangle max query _, x1, y1, x2, y2 = query max_value = -1 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): max_value = max(max_value, grid[i][j]) results.append(max_value) return results"},{"question":"Amelia is designing a new automated irrigation system for a greenhouse containing various types of plants. Each plant needs a specific amount of water daily, and the irrigation system can supply a variable amount of water to each plant. Amelia wants to ensure that the system waters each plant optimally every day. You are given three integers: n, the number of plants in the greenhouse, m, the total amount of water (in liters) available daily, and k, the number of days Amelia wants to simulate the watering schedule for. Next, you are given an array w of n integers, where w_i represents the water requirement (in liters) per day for the i-th plant. Amelia wants to know if she can distribute the available water each day such that each plant gets at least its required amount every day for k consecutive days. Function Signature ```python def can_irrigate_plants(n: int, m: int, k: int, w: List[int]) -> bool: ``` # Input - An integer n (1 ≤ n ≤ 1000) — the number of plants in the greenhouse. - An integer m (1 ≤ m ≤ 10^9) — the total amount of water (in liters) available daily. - An integer k (1 ≤ k ≤ 1000) — the number of days to simulate. - An array w of n integers (1 ≤ w_i ≤ m) — the daily water requirement for the i-th plant. # Output - Return a boolean value — `True` if it\'s possible to water all plants for k consecutive days, otherwise `False`. # Examples Example 1 ```python n = 3 m = 10 k = 5 w = [2, 3, 1] ``` Output ```python True ``` Example 2 ```python n = 3 m = 5 k = 2 w = [2, 3, 6] ``` Output ```python False ``` # Explanation **Example 1:** The daily water requirements are 2, 3, and 1 liters respectively for three plants. The total daily requirement is 6 liters, and since there are 10 liters available every day, it is possible to water all plants optimally. **Example 2:** The third plant requires 6 liters which already exceeds the total daily water available (5 liters). Therefore, it’s impossible to water all plants as required.","solution":"from typing import List def can_irrigate_plants(n: int, m: int, k: int, w: List[int]) -> bool: total_daily_requirement = sum(w) return total_daily_requirement <= m"},{"question":"In a certain type of encoding known as \\"run-length encoding\\", characters are encoded by their frequency followed by the character itself. For example, the string \\"aaabbcc\\" would be encoded as \\"3a2b2c\\". A more compact form, \\"rle-compress\\", is used where repetitive characters are compressed to the \\"character(frequency)\\", omitting the \'1\' bracket for single occurrences. For example, \\"aaabbcc\\" becomes \\"a(3)b(2)c(2)\\" and \\"abc\\" becomes \\"abc\\". Write a function that takes a string s as input and returns its run-length encoding in the compact form. Your solution should handle both lowercase and uppercase characters and preserve their case in the output. **Function Signature:** ```python def rle_compress(s: str) -> str: pass ``` **Input:** - A single string `s` of length between `1` and `1000`, consisting of only lowercase and uppercase English letters. **Output:** - A single string representing the run-length encoded and compacted version of the input string `s`. **Examples:** ``` Input: \\"aaabbcc\\" Output: \\"a(3)b(2)c(2)\\" Input: \\"abc\\" Output: \\"abc\\" Input: \\"aaAA\\" Output: \\"a(2)A(2)\\" ``` **Explanation:** In the first example, the string \\"aaabbcc\\" is converted to the encoded string \\"a(3)b(2)c(2)\\". In the second example, the string \\"abc\\" has no runs of consecutive characters, so it remains \\"abc\\" (no need for parentheses). In the third example, the string \\"aaAA\\" has \\"a\\" occurring twice and \\"A\\" occurring twice, resulting in \\"a(2)A(2)\\". Note that the encoder is case-sensitive and treats \'a\' and \'A\' as different characters.","solution":"def rle_compress(s: str) -> str: if not s: return \\"\\" result = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: if count > 1: result.append(f\\"{prev_char}({count})\\") else: result.append(prev_char) prev_char = char count = 1 # Add the last run if count > 1: result.append(f\\"{prev_char}({count})\\") else: result.append(prev_char) return \\"\\".join(result)"},{"question":"Emma is playing an interesting game with numbers. She starts with an integer array and wants to perform a series of operations on this array to make all of its elements equal. The operation she can perform is to select any two elements of the array and replace one of the elements with their sum. Emma needs your help to determine the minimum number of operations required to make all elements of the array equal. Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output - Print a single integer, the minimum number of operations required to make all elements of the array equal. Examples Input 4 1 2 3 4 Output 3 Input 5 5 5 5 5 5 Output 0 Input 3 1 100 1000 Output 2 Explanation In the first example, Emma can perform the following operations: 1. Select elements 1 and 2, replace 1 with (1+2)=3 to get the array [3, 2, 3, 4]. 2. Select elements 2 and 3, replace 2 with (2+3)=5 to get the array [3, 5, 3, 4]. 3. Select elements 1 and 4, replace 3 with (3+4)=7 to get the array [7, 5, 3, 4]. In the second example, all elements are already equal, so no operations are needed. In the third example, Emma can perform the following operations: 1. Select elements 1 and 2, replace 1 with (1+100)=101 to get the array [101, 100, 1000]. 2. Select elements 1 and 3, replace 1 with (101+1000)=1101 to get the array [1101, 100, 1000].","solution":"def min_operations_to_equal_elements(n, array): Returns the minimum number of operations required to make all elements of the array equal. if len(set(array)) == 1: return 0 return n - 1"},{"question":"Alex is a computer science student working on a string manipulation assignment. He needs to transform a given string into a palindrome (a string that reads the same forwards and backwards) with the least number of insertions. The task is to help Alex determine the minimum number of insertions required. A palindrome can be formed by adding characters only to the end of the given string. Input The input consists of a single line which is the string s (1 ≤ |s| ≤ 1000). The string s consists of lowercase English letters only. Output Print a single integer, the minimum number of characters that need to be inserted to make the entire string a palindrome. Examples Input abac Output 1 Input google Output 2 Input aab Output 1 Note In the first test case, Alex can insert one \'b\' to the end of the string to transform \\"abac\\" into \\"abacb\\", which becomes a palindrome when reversed as \\"bacab\\". In the second test case, Alex can insert \'e\' and \'g\' at the end of the string \\"google\\" to transform it into \\"googleg\\" which is a palindrome.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions needed to make the string \'s\' a palindrome. def lcs(s1, s2): Helper function to calculate the longest common subsequence length between two strings n = len(s1) dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n] # To form a palindrome, we can find the longest palindromic subsequence of `s` # and subtract its length from `s`\'s length longest_palindromic_subseq_len = lcs(s, s[::-1]) return len(s) - longest_palindromic_subseq_len"},{"question":"A large online bookstore is organizing its book delivery system. Each book has a unique identifier and a popularity score associated with it. The bookstore wants to arrange the books into stacks, such that the sum of popularity scores in each stack is as balanced as possible. The goal is to ensure that no single stack has a significantly higher total popularity score compared to the others. You are given the number of books, `n`, and an array of integers, `popularity`, where each element represents the popularity score of a book. Your task is to determine the minimum possible difference between the highest and the lowest stack popularity scores if the books are divided into two stacks. Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of books. - The second line contains `n` space-separated integers where the `i-th` integer represents the popularity score of the `i-th` book (1 ≤ popularity[i] ≤ 10^9). Output Print a single integer, the minimum possible difference between the highest and the lowest stack popularity scores. Examples Input 4 1 2 3 4 Output 0 Input 5 10 20 15 5 25 Output 5 Note In the first example, you can split the books into stacks with scores [1, 4] and [2, 3], both resulting in a total popularity score of 5, making the difference 0. In the second example, the books can be arranged into stacks with scores [10, 20] and [15, 5, 25], where the total scores are 30 and 35 respectively, making the difference 5.","solution":"def min_popularity_score_difference(n, popularity): total_popularity = sum(popularity) half_total_popularity = total_popularity // 2 dp = [[False] * (half_total_popularity + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(half_total_popularity + 1): dp[i][j] = dp[i-1][j] if j >= popularity[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-popularity[i-1]] for j in range(half_total_popularity, -1, -1): if dp[n][j]: return total_popularity - 2 * j"},{"question":"The city of Codeville is planning to organize an annual marathon, and they want to design a route that features various landmarks while ensuring the route is exactly k kilometers long. The city\'s road network consists of nodes representing landmarks and edges representing roads with specific distances in kilometers. Given the road network, determine whether it\'s possible to design the marathon route starting and ending at the same landmark and ensuring the total distance is exactly k kilometers without traversing the same road more than once. Input: The first line of the input contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 200, 0 ≤ k ≤ 10^9) — the number of landmarks, the number of roads, and the required route distance, respectively. The next m lines contain three integers each, u, v, and d (1 ≤ u, v ≤ n, 1 ≤ d ≤ 10^6) — representing a road between landmarks u and v with a distance of d kilometers. Roads are bidirectional. Output: If it is possible to design the marathon route as described, print \\"YES\\". Otherwise, print \\"NO\\". Examples: Input 4 4 6 1 2 3 2 3 2 3 4 1 4 1 3 Output YES Input 3 2 5 1 2 3 2 3 4 Output NO Note: - A route that visits 1 -> 2 -> 3 -> 4 -> 1 with distances adding up to 6 kilometers would be a valid solution for the first example. - In the second example, it\'s impossible to form a cycle that adds up to exactly 5 kilometers, so the output is \\"NO\\".","solution":"def is_marathon_route_possible(n, m, k, roads): from collections import defaultdict import sys graph = defaultdict(list) total_road_length = 0 for u, v, d in roads: graph[u].append((v, d)) graph[v].append((u, d)) total_road_length += d if k % 2 != 0 or total_road_length < k: # Simple checks return \\"NO\\" visited = set() def dfs(node, current_length): if current_length == k: return True if current_length > k: return False visited.add(node) for neighbor, distance in graph[node]: if neighbor not in visited or (neighbor in visited and current_length + distance == k): if dfs(neighbor, current_length + distance): return True visited.remove(node) return False for start_node in range(1, n + 1): if dfs(start_node, 0): return \\"YES\\" return \\"NO\\""},{"question":"Jane wants to decorate her new apartment with a specific number of art pieces that total to exactly y sections of the wall. She has two options for purchasing the art pieces. A small art piece covers 4 sections of the wall and a large art piece covers 9 sections. Jane wants to know if it\'s possible to cover exactly y sections using any combination of the two types of art pieces. She needs your help to find out whether she can achieve her goal for several values of y. Input The first line contains one integer m (1 ≤ m ≤ 100) — the number of test cases. The j-th of the following m lines contains one integer yj (1 ≤ yj ≤ 100) — the number of sections Jane wants to cover. Output Print m lines, in j-th line output YES if Jane can cover exactly yj sections using the art pieces. Otherwise, print NO. Example Input 3 8 17 10 Output YES YES NO Note In the first example, Jane can buy two small art pieces. In the second example, Jane can buy one small art piece and one large art piece. In the third example, Jane cannot cover exactly 10 sections, since two small pieces cover too little and one large piece covers too much.","solution":"def can_cover_exactly(m, sections): results = [] for y in sections: found = False for small in range((y // 4) + 1): if (y - 4 * small) % 9 == 0: found = True break if found: results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"Given a matrix of characters grid and a string word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Write a function that implements the search for the word in the grid. Function Signature: ```python def exist(grid: List[List[str]], word: str) -> bool: ``` **Input:** - The function receives a 2D list of characters `grid` of size `m x n`. - A string `word` representing the word to be searched in the grid. **Output:** - The function returns a boolean: `True` if the word exists in the grid, `False` otherwise. **Examples:** ```python grid1 = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word1 = \\"ABCCED\\" print(exist(grid1, word1)) # Output: True grid2 = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word2 = \\"SEE\\" print(exist(grid2, word2)) # Output: True grid3 = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word3 = \\"ABCB\\" print(exist(grid3, word3)) # Output: False ``` **Constraints:** - `0 <= m, n <= 200` - Each cell in the grid contains a single character. - `word` will contain only uppercase and lowercase English letters. - The length of `word` will be at most 10^3.","solution":"def exist(grid, word): if not grid or not word: return False rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r][c] = \\"\\" # mark cell as visited found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) grid[r][c] = temp # unmark cell return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0] and dfs(i, j, 0): return True return False"},{"question":"Alice loves palindromes and she often wonders if a given string can be rearranged to form a palindrome or not. A palindrome is a string that reads the same forward and backward. Your task is to write a function that, given a string, determines if any permutation of the string is a palindrome. Input The first line of input contains the number of test cases (T). Next each of T lines contains a string (str). Output You need to print \\"YES\\" if any permutation of the string can be a palindrome, otherwise print \\"NO\\". Constraints 1 < T ≤ 100 1 < |str| ≤ 1000 The string will contain only lowercase English letters. SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO Explanation - The first string \\"civic\\" is already a palindrome. - The second string \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. - The third string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the string can be a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for x in count.values() if x % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(can_form_palindrome(case)) return results # Sample usage: # T = 3 # test_cases = [\\"civic\\", \\"ivicc\\", \\"hello\\"] # print(process_test_cases(T, test_cases)) # Output: [\'YES\', \'YES\', \'NO\']"},{"question":"Shiny Shoes owns a chain of shoe stores and she is evaluating her stock across all the branches. Shiny keeps an inventory of different types of shoes in each branch, each labeled alphabetically (e.g., \'A\' for athletic shoes, \'B\' for boots, \'C\' for casual shoes, etc.). She wants to quickly find out which type of shoe has the maximum stock across all the branches combined. You are given a list of lists, where each inner list represents the stock in a particular branch, and contains letters corresponding to the shoes in stock in that branch. Your task is to determine the shoe type that has the maximum stock across all branches and return that shoe type and the count. If there is a tie (more than one shoe type with the same highest count), return the shoe type that is lexicographically smallest. Input - The first line of input contains an integer n (1 ≤ n ≤ 100), the number of branches. - The following n lines each contain a string s containing uppercase letters where each letter represents a type of shoe in stock at that branch. The length of each string is between 1 and 100. Output - Return the shoe type that has the maximum stock across all the branches combined and the count, separated by a space. Examples Input 3 AADBC DABA CBAA Output A 6 Input 4 CCCC BBBB AAAA DDDD Output A 4","solution":"def max_stock_shoe_type(n, branches): Determines the shoe type that has the maximum stock across all branches combined. Args: n: An integer representing the number of branches. branches: A list of strings where each string corresponds to the stock in a branch. Returns: A string containing the shoe type with the maximum stock and its count. from collections import Counter # Combine all the stocks into one string combined_stock = \'\'.join(branches) # Count occurrences of each shoe type stock_counter = Counter(combined_stock) # Find the shoe type with maximum stock (lexicographically smallest in case of a tie) max_shoe_type = min(stock_counter.items(), key=lambda x: (-x[1], x[0])) return f\\"{max_shoe_type[0]} {max_shoe_type[1]}\\""},{"question":"A palindrome is a word, number, phrase, or other sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Write a program that determines if each string in a list of inputs is a palindrome. Input First line contains t - the number of test cases. Each of the following t lines contains a string s to be checked. Output For each test case, print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. The output for each test case should be on a separate line. Constraints 1 < t ≤ 1000 0 < |s| ≤ 1000 SAMPLE INPUT 4 level deed Palindrome 12321 SAMPLE OUTPUT YES YES NO YES","solution":"def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, \'NO\' otherwise. # Normalize the string by removing non-alphanumeric characters and converting to lowercase s_filtered = \'\'.join(char.lower() for char in s if char.isalnum()) return \'YES\' if s_filtered == s_filtered[::-1] else \'NO\' def check_palindromes(t, strings): Checks a list of strings to determine if each one is a palindrome. Args: t: int, number of test cases. strings: list of str, each string to be checked. Returns: list of str: \'YES\' or \'NO\' for each string in the input list. results = [] for string in strings: results.append(is_palindrome(string)) return results"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains a lowercase alphabet character. Two cells are considered connected if they share a side (top, bottom, left, or right) and contain the same character. A region is defined as a maximal set of connected cells that contain the same character. For each region within the grid, compute the size of that region. Given q queries, each of which asks for the size of the region containing a specific cell (x, y), respond with the size of that cell\'s region. Input The first line consists of three integers n, m, and q (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 10^5) — the number of rows and columns of the grid, and the number of queries, respectively. The next n lines each contain a string of m characters representing the cells in the grid. Each of the next q lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the 1-based row and column indices of the cell for which you need to determine the region size. Output For each query, output a single integer representing the size of the region that contains the cell (x, y). Example Input 4 4 3 abab baba abab baba 1 1 2 2 4 2 Output 1 1 1 Note In the given example, all cells contain a region size of 1 because no adjacent cells contain the same character. For each of the provided queries, the region size is 1.","solution":"def find_region_size(grid, x, y, n, m, visited): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] start_char = grid[x][y] size = 0 while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True size += 1 for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == start_char: stack.append((nx, ny)) return size def solve(n, m, q, grid, queries): visited = [[False] * m for _ in range(n)] region_sizes = [[0] * m for _ in range(n)] # Find all region sizes for i in range(n): for j in range(m): if not visited[i][j]: size = find_region_size(grid, i, j, n, m, visited) fill_region_sizes(grid, i, j, n, m, region_sizes, size) results = [] for x, y in queries: results.append(region_sizes[x-1][y-1]) return results def fill_region_sizes(grid, x, y, n, m, region_sizes, size): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] start_char = grid[x][y] visited = set() while stack: cx, cy = stack.pop() if (cx, cy) in visited: continue visited.add((cx, cy)) region_sizes[cx][cy] = size for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == start_char: stack.append((nx, ny)) # Example usage: n, m, q = 4, 4, 3 grid = [ \\"abab\\", \\"baba\\", \\"abab\\", \\"baba\\" ] queries = [(1, 1), (2, 2), (4, 2)] print(solve(n, m, q, grid, queries)) # Output: [1, 1, 1]"},{"question":"You are given N identical stacks of coins. Each stack contains K coins. Your task is to create one large stack by merging these stacks one-by-one. In each step, you can merge any two stacks together, and the cost of merging two stacks is equal to the total number of coins in the resulting stack. Input: The first line contains a single integer T, the number of test cases. T test cases follow. Each test case contains two integers N and K. Output: For each test case, output a single line containing the minimum total cost to merge all stacks into one. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 500 1 ≤ K ≤ 10^6 SAMPLE INPUT 3 3 1 4 2 5 3 SAMPLE OUTPUT 3 10 35 Explanation For the first case, we have 3 stacks with 1 coin each. We can merge two stacks to make one stack with 2 coins at a cost of 2. Then we can merge the resulting stack with the remaining stack to get one stack with 3 coins at a cost of 3. Total cost = 2 + 1 = 3. For the second case, we have 4 stacks with 2 coins each. We can merge them optimally to minimize their total cost. One possible way is: 1. Merge two stacks to get a stack with 4 coins (cost = 4). 2. Merge two stacks to get another stack with 4 coins (cost = 4). 3. Merge the two resulting stacks to get a stack with 8 coins (cost = 8). Total cost = 4 + 4 + 8 = 16. For the third case, merging optimally to minimize cost: 1. Merge two stacks to get a stack with 6 coins (cost = 6). 2. Merge two stacks to get a stack with 6 coins (cost = 6). 3. Merge two stacks to get a stack with 6 coins (cost = 6). 4. Merge the resulting stacks step by step: - Stack of 6 with another stack of 6 to get 12 coins (cost = 12). - Stack of 12 with another stack of 6 to get 18 coins (cost = 18). - Finally, stack of 18 with the remaining stack of 6 to get the complete stack of 24 coins (cost = 24). Total cost = 6 + 6 + 6 + 12 + 18 + 24 = 35.","solution":"def min_merge_cost(t, test_cases): results = [] for case in test_cases: n, k = case result = k * (n - 1) * ((n - 1) + 1) // 2 results.append(result) return results"},{"question":"Alice is a keen gardener and wants to plant trees in her linear garden bed. She has a list of tree heights and is allowed to plant one tree per position in the bed. The trees should be planted such that no two adjacent trees have the same height to create an aesthetically pleasing view. Alice wants to know the maximum number of trees she can plant following this rule. INPUT The first line of input contains the number of test cases, T. 0 < T <= 10 Each test case starts with a number N, the number of available tree heights. 0 ≤ N <= 10^4 The next line will have N numbers, representing the heights of the trees. 0 ≤ X(i) <= 10^9 OUTPUT For each test case print “Case t: A” without quotes in a single line. t is the case number, starting with 1. A is the maximum number of trees Alice can plant. SAMPLE INPUT 2 6 1 2 2 3 3 3 1 5 SAMPLE OUTPUT Case 1: 4 Case 2: 1 Explanation Case 1: Alice can choose a sequence like 1, 2, 3, 2, skipping over adjacent heights if necessary. This allows her to plant 4 trees. Case 2: There is only one tree height available, so Alice can only plant one tree.","solution":"def max_trees_to_plant(t: int, test_cases: [(int, list)]) -> list: results = [] for i, case in enumerate(test_cases): n, heights = case if n == 0: results.append(f\\"Case {i + 1}: 0\\") continue unique_heights = list(set(heights)) sorted_heights = sorted(unique_heights) count = 0 last_height = None for h in sorted_heights: if last_height is None or last_height != h: count += 1 last_height = h results.append(f\\"Case {i + 1}: {count}\\") return results"},{"question":"Alice is developing a software tool that analyzes customers\' search query histories to personalize their suggestions. One of the tasks involves checking if a specific search query is a substring of any of the customer data queries, while allowing for a small number of mismatches due to typos or variations. Consider the following scenario. Given a search query as string Q, and a list of customer data queries D containing several strings, we need to check if the search query Q can match any of the strings in D with at most m mismatched characters. To clarify, string Q matches a string in D if there is a continuous substring of the same length in any string from D where the total number of differing characters does not exceed m. For example, the search query \\"HELLO\\" matches the customer query data \\"HJLLPLOVE\\" with m = 2, as \\"HJLLP\\" is a substring of \\"HJLLPLOVE\\" and differs from \\"HELLO\\" by exactly 2 characters (\'E\' differs from \'J\' and \'O\' differs from \'P\'). Help Alice by writing a function to count how many of the strings in D have a substring matching the search query Q with at most m character mismatches. Input The first line contains three integers: n (1 ≤ n ≤ 1000) — the number of strings in the list D, |Q| (1 ≤ |Q| ≤ 1000) — the length of the search query string Q, and m (0 ≤ m ≤ 1000) — the maximum allowed mismatches. The second line contains the search query string Q. The next n lines contain one customer data query string each. The customer data query strings have lengths between 1 and 1000, inclusive, and consist of uppercase letters only. Output Print a single integer — the number of strings in D that contain a substring matching the search query Q with at most m character mismatches. Examples Input 3 5 2 HELLO HJLLPLOVE WORLD HELLOCODE Output 2 Note In the example, the search query \\"HELLO\\" matches two of the customer data queries: - \\"HJLLPLOVE\\" with mismatch substrings \\"HJLLP\\" (2 mismatches) - \\"HELLOCODE\\" with perfect match substring \\"HELLO\\" (0 mismatches)","solution":"def count_matching_queries(n, length_q, m, query, data): def mismatch_count(s1, s2): return sum(1 for a, b in zip(s1, s2) if a != b) count = 0 for customer_query in data: if len(customer_query) < length_q: continue for i in range(len(customer_query) - length_q + 1): substring = customer_query[i:i + length_q] if mismatch_count(substring, query) <= m: count += 1 break return count"},{"question":"In a small town, there is a bakery that makes a special type of cookie. The bakery can put these cookies into boxes of different sizes. The bakery has a list of available box sizes and the quantity of cookies they can hold. The bakery wants to package cookies into the smallest possible number of boxes for a special order while ensuring that no boxes are only partially filled. You need to create a program that helps the bakery determine the minimum number of boxes needed to package a given number of cookies. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10000) — the number of different box sizes and the number of cookies that need to be packaged, respectively. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 1000) — the capacities of the available box sizes. Output Print the minimum number of boxes needed to package all the cookies. If it is not possible to package the exact number of cookies using the given box sizes, print -1. Examples Input 3 9 2 3 5 Output 3 Input 2 8 3 5 Output 2 Input 3 11 2 4 6 Output -1 Note In the first example, the optimal solution is to use three boxes of size 3. In the second example, the optimal solution is to use one box of size 3 and one box of size 5. In the third example, it is not possible to package exactly 11 cookies with the given box sizes.","solution":"def min_boxes_needed(n, k, box_sizes): Returns the minimum number of boxes needed to package k cookies given n different box sizes. If it is not possible to package the exact number of cookies using the given box sizes, returns -1. from math import inf # Dynamic Programming table to store minimum boxes required for every amount of cookies from 0 to k dp = [inf] * (k + 1) dp[0] = 0 # No cookies need 0 boxes # Update the DP table for each box size for size in box_sizes: for j in range(size, k + 1): dp[j] = min(dp[j], dp[j - size] + 1) return -1 if dp[k] == inf else dp[k]"},{"question":"You are given a sequence of integers. Your task is to determine whether there exists a non-empty subarray whose sum is zero. A subarray is any continuous segment of the array. The sequence may contain both positive and negative numbers. Input: - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the length of the sequence. - The second line contains `n` integers `a_1, a_2, ..., a_n` (-1,000,000 ≤ a_i ≤ 1,000,000), the elements of the sequence. Output: - Output \\"YES\\" if there exists a non-empty subarray with sum zero. Otherwise, output \\"NO\\". Examples: Input: 5 4 -1 2 -2 1 Output: YES Input: 3 1 2 3 Output: NO Note: In the first example, the subarray [-1, 2, -1] has sum zero. In the second example, there is no such subarray.","solution":"def has_zero_sum_subarray(arr): Determines whether there exists a non-empty subarray whose sum is zero. :param arr: List of integers :return: \\"YES\\" if there exists a subarray with zero sum, otherwise \\"NO\\" # Set to store the prefix sums prefix_sums = set() # Initialize current sum to 0 current_sum = 0 for num in arr: # Add the current element to the current_sum current_sum += num # Check if current_sum is zero or already exists in the prefix_sums if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" # Add the current_sum to the set prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given three integers N, M, and K and two strings A and B of length N and M respectively. You can perform at most K operations to transform string B such that it contains the maximum number of distinct subsequences present in string A. An operation is defined as changing a single character in string B to any other lower-case English letter. Your task is to find the maximum number of distinct subsequences of A that can be found in the transformed version of B using at most K operations. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input format The first line contains three space-separated integers N, M, and K. The next two lines contain strings A and B respectively. Output format Print a single integer, the maximum number of distinct subsequences of A that can be found in the transformed version of B using at most K operations. Constraints 1 ≤ N, M ≤ 100 0 ≤ K ≤ 100 Note Strings contain only lowercase English letters. SAMPLE INPUT 3 5 2 abc axeyd SAMPLE OUTPUT 3 Explanation In the given sample case, B can be transformed into \\"abcyd\\" using 2 operations: 1. Change \'x\' to \'b\' 2. Change \'e\' to \'c\' The distinct subsequences \\"a\\", \\"b\\", and \\"c\\" from A can now be found in B. Therefore, the answer is 3.","solution":"def max_subsequences_after_k_operations(N, M, K, A, B): Returns the maximum number of distinct subsequences of A that can be found in the transformed version of B. from collections import Counter # Count the frequency of characters in A a_count = Counter(A) # We will greedily try to match B as closely as possible to A by counting changes needed and tallying distinct matches changes_needed = 0 distinct_subsequences = 0 for char in set(A): if a_count[char] > B.count(char): additional_needed = a_count[char] - B.count(char) changes_needed += additional_needed if changes_needed <= K: distinct_subsequences += 1 else: break else: distinct_subsequences += 1 return distinct_subsequences"},{"question":"You are given an array of n integers a_{1}, a_{2}, ..., a_{n}. You need to split this array into the smallest possible number of subarrays such that we can rearrange the elements of each subarray to form non-decreasing sequences. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^6. The second line of each test case contains n integers a_{1}, a_{2}, ..., a_{n} (-10^9 ≤ a_{i} ≤ 10^9). Output For each test case, print a single integer — the minimum number of subarrays required. Example Input 2 6 4 3 5 2 1 6 4 3 3 3 3 Output 4 1 Note In the first test case, one optimal way of splitting the array is [4], [3], [5], [2, 1, 6] since each of these subarrays can be rearranged to form non-decreasing sequences. Thus the output is 4. In the second test case, the entire array is already non-decreasing, so only one subarray is required. Thus the output is 1.","solution":"def find_min_subarrays(arr): Returns the minimum number of subarrays required such that each subarray can be rearranged to form a non-decreasing sequence. n = len(arr) if n == 1: return 1 # It is optimal to split whenever we see a decrease in the array count = 1 for i in range(1, n): if arr[i] < arr[i - 1]: count += 1 return count def solve(test_cases): Solves multiple test cases and returns a list of results. results = [] for arr in test_cases: results.append(find_min_subarrays(arr)) return results"},{"question":"There are n houses in a row, with each house having a certain amount of money hidden inside. You are a thief with a constraint—you cannot rob two adjacent houses. Given the amount of money in each house, determine the maximum amount of money you can steal tonight without alerting the police. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers a_i (0 ≤ a_i ≤ 10,000) — the amount of money hidden in each house. Output Output one integer — the maximum amount of money you can steal without robbing two adjacent houses. Examples Input 4 1 2 3 1 Output 4 Input 5 2 7 9 3 1 Output 12 Input 3 2 3 2 Output 4 Note In the first example, the optimal way is to rob houses with money 1 and 3, so the maximum amount of money stolen is 4. In the second example, the optimal way is to rob houses with money 2, 9, and 1, so the maximum amount of money stolen is 12. In the third example, the optimal way is to rob houses with money 2 and 2, so the maximum amount of money stolen is 4.","solution":"def max_robbery(houses): Returns the maximum amount of money that can be stolen without robbing two adjacent houses. if not houses: return 0 if len(houses) == 1: return houses[0] n = len(houses) dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[-1] # Example usage: # n = 5 # houses = [2, 7, 9, 3, 1] # print(max_robbery(houses)) # Output: 12"},{"question":"Given an array of n integers, you need to find the smallest subarray such that the sum of the elements in this subarray is equal to a target value k. If no such subarray exists, return -1. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). The second line contains n integers representing the array elements (1 ≤ element ≤ 10^4). Output For each test case, print the length of the smallest subarray with sum equal to k or -1 if no such subarray exists. Example Input 3 5 15 1 2 3 4 5 7 10 1 2 3 4 5 6 7 8 15 1 2 3 4 5 6 7 8 Output 5 4 2 Note In the first test case, the whole array [1, 2, 3, 4, 5] has sum equal to 15. In the second test case, the subarray [4, 5, 6] has sum equal to 10. In the third test case, the subarray [7, 8] has sum equal to 15.","solution":"def smallest_subarray_with_sum(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= k: if current_sum == k: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 results.append(min_length if min_length != float(\'inf\') else -1) return results"},{"question":"Given a string S, determine whether it is possible to make S a palindrome by replacing exactly one character. If it is possible, print `Yes`; if it is not possible, print `No`. A palindrome is a word that reads the same backward as forward. Constraints * 1 leq |S| leq 100 * S consists of lowercase English letters. Input Input is given from Standard Input in the following format: S Output If it is possible to make S a palindrome by replacing exactly one character, print `Yes`; if it is not possible, print `No`. Examples Input abccba Output No Input abccaa Output Yes Input abcda Output Yes","solution":"def can_be_palindrome_by_replacing_one_char(S): Return \'Yes\' if it is possible to make S a palindrome by replacing exactly one character, otherwise return \'No\'. n = len(S) mismatch_count = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: mismatch_count += 1 if mismatch_count > 1: return \'No\' return \'Yes\' if mismatch_count == 1 else \'No\'"},{"question":"Alex is working on a programming problem concerning two sequences of integers. Given two sequences of the same length, Alex needs to interleave them to form a new sequence. Each element from one sequence should be followed by an element from the other sequence. Alex must follow these rules to construct the new sequence: - Start with the first element from the first sequence. - Then take the first element from the second sequence. - Next, take the second element from the first sequence, followed by the second element from the second sequence, and so on. Given that the sequences contain only non-negative integers, help Alex interleave the two sequences to form the final sequence. Input The first line contains an integer n (1 ≤ n ≤ 100), the length of each sequence. The second line contains n non-negative integers, the first sequence. The third line contains n non-negative integers, the second sequence. Output Print the resulting interleaved sequence, containing 2n integers. Examples Input 3 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 4 9 8 7 6 5 4 3 2 Output 9 5 8 4 7 3 6 2","solution":"def interleave_sequences(n, seq1, seq2): Interleave two sequences of the same length. Args: n (int): The length of each sequence. seq1 (list of int): The first sequence of non-negative integers. seq2 (list of int): The second sequence of non-negative integers. Returns: list of int: The interleaved sequence. interleaved = [] for i in range(n): interleaved.append(seq1[i]) interleaved.append(seq2[i]) return interleaved"},{"question":"Problem Statement Given a string s, determine the length of the longest substring without repeating characters. Input Format The only line of the input file contains a string s. Output Format Output the length of the longest substring without repeating characters. Constraints 1 ≤ |s| ≤ 10000 The string s consists of English letters, digits, symbols, and spaces. SAMPLE INPUT abcabcbb SAMPLE OUTPUT 3 Explanation The answer is \\"abc\\", with the length of 3.","solution":"def length_of_longest_substring(s): This function returns the length of the longest substring without repeating characters. last_seen = {} start = 0 max_length = 0 for index, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"You are given a list of `n` integers. You can perform the following operation any number of times (including zero): * Choose any two adjacent elements in the list and swap them. You are interested in obtaining the lexicographically smallest list possible with the given operations. Input: The first line of the input contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. The description of the test cases follows. The first line of each test case contains an integer `n` (1 ≤ n ≤ 50), the number of elements in the list. The next line contains `n` integers, the elements of the list. Output: For each test case, print the lexicographically smallest list that can be achieved by performing the operation any number of times. Example: Input: 2 3 3 2 1 5 1 5 3 2 4 Output: 1 2 3 1 2 3 4 5 Note: In the first test case, you can swap elements to get the list `1 2 3`, which is the lexicographically smallest list possible. In the second test case, by repeatedly swapping adjacent elements, you can arrange the list as `1 2 3 4 5`.","solution":"def lexicographically_smallest_list(t, test_cases): results = [] for case in test_cases: n, array = case sorted_array = sorted(array) results.append(sorted_array) return results"},{"question":"A palindrome is a word, number, phrase, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In this problem, you need to write a program that checks if a given string is a palindrome. Your task is to read an integer n, followed by n strings. For each string, determine if it is a palindrome or not, and print \\"YES\\" if it is a palindrome and \\"NO\\" otherwise. Note that the palindrome check should be case-insensitive and ignore non-alphanumeric characters. Input The input starts with an integer n (1 ≤ n ≤ 1000), the number of strings to check. Each of the next n lines contains a string s. The length of each string will be no greater than 100 characters. Output For each string s, print \\"YES\\" if s is a palindrome and \\"NO\\" otherwise. Example Input 4 A man, a plan, a canal, Panama racecar hello Madam In Eden, I’m Adam Output YES YES NO YES","solution":"def is_palindrome(s): Checks if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) return cleaned_s == cleaned_s[::-1] def check_palindromes(n, strings): For each string in strings, checks if it is a palindrome and prints \\"YES\\" or \\"NO\\". results = [] for s in strings: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John has a peculiar interest in prime numbers. He defines a \\"prime digit number\\" as a number that consists only of the digits 2, 3, 5, and 7. For example, 23, 557, and 7352 are prime digit numbers, while 42, 18, and 369 are not. John wants to list all prime digit numbers that are of length n, sorted in ascending order. Help John by writing a program that generates the list of all prime digit numbers of length n. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Next t lines contain test cases — one per test case. Each test case consists of a single integer n (1 ≤ n ≤ 4) — the length of the prime digit numbers to be generated. Output For each test case, print all prime digit numbers of length n, sorted in ascending order, each number on a new line. Leave an empty line between the outputs of consecutive test cases. Example Input 2 1 2 Output 2 3 5 7 22 23 25 27 32 33 35 37 52 53 55 57 72 73 75 77 Note In the first test case, the single-digit prime numbers are all prime digit numbers themselves. In the second test case, we generate all combinations of 2 digits from the set {2, 3, 5, 7} and print them in sorted order.","solution":"from itertools import product def generate_prime_digit_numbers(n): Generate all prime digit numbers of length n. prime_digits = [\'2\', \'3\', \'5\', \'7\'] return [\'\'.join(p) for p in product(prime_digits, repeat=n)] def prime_digit_numbers(t, test_cases): Generate all prime digit numbers for each test case. results = [] for n in test_cases: results.append(generate_prime_digit_numbers(n)) return results"},{"question":"In a game, players earn points by collecting apples, bananas, and cherries. Apples are worth 2 points each, bananas are worth 3 points each, and cherries are worth 5 points each. Determine if there is a way to earn exactly M points by collecting any combination of these fruits. Players must collect at least one type of fruit. Constraints * M is an integer between 1 and 100, inclusive. Input Input is given from Standard Input in the following format: M Output If there is a way to earn exactly M points, print `Yes`; otherwise, print `No`. Examples Input 14 Output Yes Input 9 Output Yes Input 1 Output No","solution":"def can_earn_exactly_m_points(M): Determine if it\'s possible to earn exactly M points by collecting apples, bananas, and cherries. Apples: 2 points each Bananas: 3 points each Cherries: 5 points each :param M: int - The target points to be earned :return: bool - True if exactly M points can be earned, otherwise False for apples in range(M // 2 + 1): for bananas in range(M // 3 + 1): # Calculate the remaining points needed after using apples and bananas remaining = M - 2 * apples - 3 * bananas # Check if the remaining points can be achieved by using cherries if remaining >= 0 and remaining % 5 == 0: return True return False def print_result(M): Print \\"Yes\\" if exact M points can be earned, else print \\"No\\". :param M: Target points if can_earn_exactly_m_points(M): print(\\"Yes\\") else: print(\\"No\\")"},{"question":"You are a part of a logistics company, and you have to manage the delivery of packages. There are n packages that must be delivered, where each package has a specific weight that must be handled carefully. Your company has a rule that no single delivery truck can carry more than a specified maximum weight limit. Each truck can carry any combination of packages, as long as the combined weight of the packages in a truck does not exceed the maximum weight limit. However, each package must be delivered individually to maintain safety standards, i.e., a package must not be split between trucks. Given the weights of each package and the maximum weight limit per truck, determine the minimum number of trucks required to deliver all the packages. Input The first line contains two integers, n (1 ≤ n ≤ 1000) and w (1 ≤ w ≤ 10^6), where n is the number of packages and w is the maximum weight limit per truck. The second line contains n integers, where the i-th integer represents the weight of the i-th package. Each package weight is a positive integer not exceeding 10^6. Output Print a single integer representing the minimum number of trucks required to deliver all the packages. Examples Input 5 10 2 5 4 7 1 Output 3 Input 4 15 10 7 5 4 Output 2 Explanation In the first example, one optimal way to group the packages is as follows: - Truck 1: packages with weights 2 and 7 (total weight 9) - Truck 2: packages with weights 5 and 4 (total weight 9) - Truck 3: package with weight 1 (total weight 1) In the second example, one optimal way to group the packages is as follows: - Truck 1: packages with weights 10 and 4 (total weight 14) - Truck 2: packages with weights 7 and 5 (total weight 12)","solution":"def minimum_trucks(n, w, weights): # Sort the weights of the packages in decreasing order weights.sort(reverse=True) trucks = 0 i = 0 j = n - 1 while i <= j: if weights[i] + weights[j] <= w: j -= 1 i += 1 trucks += 1 return trucks"},{"question":"You are given a list of integers representing the heights of students in a classroom. Your task is to determine if the students can be rearranged in such a way that every student taller than the preceding one. The list should not contain two students of the same height. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the students. Output Print \\"NO\\" if it is not possible to rearrange the students to meet the requirements. Otherwise, print \\"YES\\". Examples Input 5 1 3 2 4 5 Output YES Input 3 5 3 5 Output NO Note In the first example, the heights can be rearranged to form a strictly increasing sequence: 1, 2, 3, 4, 5. In the second example, the heights cannot be rearranged to form a strictly increasing sequence because the height \'5\' appears more than once.","solution":"def can_rearrange_students(n, heights): Determines if students can be rearranged in such a way that every student is taller than the preceding one. Parameters: n (int): Number of students. heights (list of int): List of student heights. Returns: str: \\"YES\\" if students can be rearranged to meet the requirements, otherwise \\"NO\\". # Convert the list to a set to remove duplicates unique_heights = set(heights) # If the length of the set is not equal to the length of the original list, # it means there were duplicates. if len(unique_heights) != len(heights): return \\"NO\\" return \\"YES\\""},{"question":"Lena is playing a game where she needs to collect as many coins as possible from a series of boxes arranged in a line. Each box contains a certain number of coins, and she can only collect coins from a subset of the boxes such that no two boxes in her chosen subset are adjacent. Write a program that determines the maximum number of coins Lena can collect. Constraints * 1 <= n <= 1000 * 0 <= coins[i] <= 1000 (for all 1 <= i <= n) * All input values are integers. Input Input is given from Standard Input in the following format: n coins_1 coins_2 ... coins_n Output Print the maximum number of coins Lena can collect. Examples Input 4 1 2 9 4 Output 10 Input 5 2 7 9 3 1 Output 12","solution":"def max_coins(n, coins): if n == 0: return 0 if n == 1: return coins[0] dp = [0] * n dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) coins = list(map(int, data[1:])) print(max_coins(n, coins))"},{"question":"A popular annual Sneaker Sale is coming up and a distinguished local merchant wants to showcase a selection of sneakers such that the cost of the selection is as close as possible to the maximum amount of money he has reserved for the event. The merchant has a list of n different sneakers, where the cost of the ith sneaker is represented as ci. He has a budget of B dollars. Your task is to help the merchant by finding a subset of the sneakers that he can exactly purchase within his budget or find the cost that is as close as possible but not exceeding his budget. If there are multiple subsets with the same cost, any of those subsets is acceptable. Input The input consists of a single line containing n integers representing the cost of each sneaker and an integer B (1 ≤ n ≤ 1000, 1 ≤ ci, B ≤ 100000), where the first n integers represent the costs of the sneakers and the last integer is the budget. Output Print a single integer representing the cost of the selected subset of sneakers or print \\"-1\\" if no such subset exists that does not exceed the budget. Example Input 5 2 7 3 10 5 14 Output 14 Input 5 6 4 8 2 3 7 Output 6","solution":"from itertools import combinations def closest_subset_sum(costs, B): Returns the maximum sum of a subset of sneaker costs that is as close as possible to the budget B without exceeding it. If no such subset exists, returns -1. n = len(costs) closest_sum = -1 for r in range(1, n+1): for subset in combinations(costs, r): current_sum = sum(subset) if current_sum <= B and current_sum > closest_sum: closest_sum = current_sum return closest_sum"},{"question":"You are working on a new system for a space research lab to manage their satellite launch schedule. Each satellite has a launch window during which it can be launched, defined by a start and end time. Your task is to determine the maximum number of non-overlapping satellites that can be launched using the given schedule. # Input: - The first line contains an integer `N`, the number of satellites. - The next `N` lines each contain two integers, `start` and `end`, representing the start and end time of the launch window for each satellite. # Output: - Print a single integer representing the maximum number of non-overlapping satellites that can be launched. # Constraints: - 1 ≤ N ≤ 100,000 - 0 ≤ start < end ≤ 10^9 # Example: Input: ``` 6 1 4 2 3 3 5 0 6 5 7 8 9 ``` Output: ``` 4 ``` Explanation: The maximum number of non-overlapping satellites is 4. The compatible launch windows are [1,4], [5,7], and [8,9] or [2,3], [3,5], and [8,9]. Write the function `max_non_overlapping_launches(N, launch_windows)` that takes the number of satellites N and a list of tuples representing the launch windows, and returns the maximum number of non-overlapping launch windows.","solution":"def max_non_overlapping_launches(N, launch_windows): Returns the maximum number of non-overlapping satellites that can be launched. :param N: int, number of satellites. :param launch_windows: list of tuples, each representing the start and end time of the launch window for each satellite. :return: int, maximum number of non-overlapping satellites. # First, sort the launch windows by their end times launch_windows.sort(key=lambda x: x[1]) max_launches = 0 current_time = 0 for start, end in launch_windows: if start >= current_time: max_launches += 1 current_time = end return max_launches"},{"question":"Given an array of integers, `nums`, Koyomi wants to find the length of the longest subarray where the product of its elements is strictly less than a given integer `k`. Can you help Koyomi determine this length? # Input The first line of the input contains two space-separated integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9), where `n` is the number of elements in the array and `k` is the product threshold. The second line contains `n` space-separated integers representing the elements of the array `nums` (1 ≤ nums[i] ≤ 10^4 for each `nums[i]`). # Output Output a single integer, the length of the longest subarray where the product of its elements is strictly less than `k`. # Examples Input ``` 5 100 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 7 10 10 5 2 6 3 1 2 ``` Output ``` 3 ``` # Note In the first example, the longest subarray with product strictly less than 100 is [1, 2, 3, 4]. In the second example, the longest subarray with product strictly less than 10 is [2, 3, 1] or [6, 3, 1]. **Hint:** Consider using a sliding window approach to solve this efficiently.","solution":"def longest_subarray_length(n, k, nums): Returns the length of the longest subarray where the product of its elements is strictly less than k. start = 0 product = 1 max_length = 0 for end in range(n): product *= nums[end] while start <= end and product >= k: product //= nums[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"# Problem Statement: Find the Closest Greater Element in a Matrix Given a matrix of integers and a target value, determine the closest greater element in the matrix relative to the target. The closest greater element is defined as the element in the matrix that is strictly greater than the target and has the smallest difference when subtracted by the target. If no such element exists, return -1. # Input - The first line contains two integers, `m` and `n`, the dimensions of the matrix (1 ≤ m, n ≤ 1000). - The next `m` lines contain `n` integers each, representing the elements of the matrix. - The last line contains a single integer, the target value `t` (-10^6 ≤ Matrix elements, t ≤ 10^6). # Output - Output a single integer, representing the closest greater element in the matrix compared to the target. If no such element exists, output -1. # Example **Input** ``` 3 3 4 8 10 2 15 1 6 9 3 7 ``` **Output** ``` 8 ``` **Explanation** In the provided matrix, 8 is the closest greater element to the target value 7, as 8 - 7 = 1. Other greater elements like 10 and 9 exist but they have larger differences when subtracted by 7 compared to 8. Use this format and structure to match the style of the original coding assessment question.","solution":"def closest_greater_element(matrix, target): closest = -1 min_diff = float(\'inf\') for row in matrix: for elem in row: if elem > target and (elem - target) < min_diff: min_diff = elem - target closest = elem return closest"},{"question":"In an event management system, the organizers need to manage registrations efficiently. The registration process allows participants to register with their unique participant ID. However, due to a technical issue, some participant IDs have been duplicated in the system. Your task is to identify and remove all duplicate IDs, ensuring that each participant is only registered once. You are given a list of participant IDs. Your goal is to return a new list that includes each ID only once, preserving the original order of their first occurrence. Input The input contains a single line with the space-separated participant IDs (strings) that may have duplicates. Each participant ID consists of alphanumeric characters and is at most 100 characters long. The number of participant IDs in the input list does not exceed 1000. Output Output the list of unique participant IDs, space-separated and in the order of their first appearance. Examples Input X123 Y456 X123 Z789 Y456 Output X123 Y456 Z789 Input P001 Q002 P001 P001 R003 Output P001 Q002 R003 Input A1 B2 C3 D4 E5 F6 Output A1 B2 C3 D4 E5 F6","solution":"def remove_duplicates(participant_ids): Removes duplicate participant IDs, preserving the order of their first occurrence. seen = set() unique_ids = [] for pid in participant_ids: if pid not in seen: unique_ids.append(pid) seen.add(pid) return unique_ids def process_input(input_str): Processes the input string to return the space-separated unique participant IDs. participant_ids = input_str.split() unique_ids = remove_duplicates(participant_ids) return \\" \\".join(unique_ids)"},{"question":"Given an array of integers, you need to maximize the sum of the array by potentially rotating the entire array many times. A rotation consists of moving the elements of the array such that each element moves one position to the right, and the last element of the array moves to the first position. Formally, a rotation operation can be represented as: After rotating the array `A` of size `N` one position to the right, the new array is `[A[N-1], A[0], A[1], ..., A[N-2]]`. Your task is to find the maximum possible sum of the array after performing any number of rotations, including zero rotations. Input: The first line contains an integer `T`, the number of test cases. For each test case: - The first line contains an integer `N`, the size of the array. - The second line contains `N` integers, the elements of the array `A`. Output: For each test case, output a single line containing the maximum possible sum of the array after any number of rotations. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^5 ≤ A[i] ≤ 10^5 Example: Input: 3 4 1 2 3 4 5 5 5 5 5 5 3 -1 -2 -3 Output: 10 25 -1 Explanation: For the first case, rotating the array gives: - Rotation 0: [1, 2, 3, 4] -> Sum = 10 - Rotation 1: [4, 1, 2, 3] -> Sum = 10 - Rotation 2: [3, 4, 1, 2] -> Sum = 10 - Rotation 3: [2, 3, 4, 1] -> Sum = 10 Thus, the maximum possible sum is 10. For the second case, since all elements are the same, any rotation will yield the same sum of 25. For the third case, the rotations do not change the maximum value, which is -1, since the elements are all negative.","solution":"def max_sum_after_rotations(arr): Returns the maximum sum of the array when rotated any number of times. Since rotating the array doesn\'t change the sum, the maximum sum is just the sum of the elements in the array. return sum(arr) def process_test_cases(T, test_cases): Processes multiple test cases and returns the result for each one. results = [] for i in range(T): N, arr = test_cases[i] results.append(max_sum_after_rotations(arr)) return results"},{"question":"In a far away land, there are magical fruits growing on n trees arranged in a circular orchard. The trees are numbered from 1 to n in a clockwise direction. Each tree bears a certain number of magical fruits, represented by an array `fruits` where `fruits[i]` gives the number of fruits on the i-th tree. A powerful wizard wants to gather a basket of exactly m magical fruits by plucking some contiguous segment of trees in the orchard, moving only clockwise. You need to help the wizard find the minimum possible number of trees he must visit to collect exactly m magical fruits. If it\'s not possible to collect exactly m fruits, return -1. Input The first line contains the integer n (1 ≤ n ≤ 100,000) — the number of trees in the orchard. The second line contains the integer m (1 ≤ m ≤ 1,000,000,000) — the exact number of magical fruits the wizard wants to collect. The third line contains n integers `fruits[0], fruits[1], ..., fruits[n-1]` (0 ≤ fruits[i] ≤ 1,000) — the number of fruits on the i-th tree. Output Print a single integer — the minimum number of trees the wizard must visit to collect exactly m magical fruits. If it is not possible, print -1. Example Input 5 7 1 2 3 4 5 Output 2 Note In the example given, the wizard can start at tree number 3 (with 3 fruits) and pluck subsequently from tree number 4 (with 4 fruits) to get exactly 7 fruits. Thus, he only needs to visit 2 trees.","solution":"def min_trees_to_collect_fruits(n, m, fruits): if sum(fruits) < m: return -1 min_trees = n + 1 current_sum = 0 start = 0 for end in range(2 * n): current_sum += fruits[end % n] while current_sum >= m: min_trees = min(min_trees, end - start + 1) current_sum -= fruits[start % n] start += 1 return min_trees if min_trees <= n else -1 # Example usage: n = 5 m = 7 fruits = [1, 2, 3, 4, 5] print(min_trees_to_collect_fruits(n, m, fruits)) # Output: 2"},{"question":"You are given a sequence of integers `a_1, a_2, ..., a_n`. You are to determine if there exist three indices `i, j, k` (1 ≤ i < j < k ≤ n) such that the sum a_i + a_j + a_k is divisible by a given integer `d`. Constraints * 3 ≤ n ≤ 5000 * 1 ≤ a_i ≤ 10^9 * 1 ≤ d ≤ 1000 Input Input is given from Standard Input in the following format: n d a_1 a_2 ... a_n Output Print \\"YES\\" if such indices exist, otherwise print \\"NO\\". Examples Input 5 7 1 2 3 4 5 Output YES Input 4 10 10 20 30 40 Output YES Input 4 5 1 2 3 4 Output NO","solution":"def can_find_triplet_sum_divisible(n, d, sequence): Determines if there exist three indices i, j, k (1 ≤ i < j < k ≤ n) such that the sum a_i + a_j + a_k is divisible by a given integer d. Args: n (int): length of the list of integers. d (int): the divisor. sequence (list): list of integers. Returns: str: \\"YES\\" if such indices exist, otherwise \\"NO\\" # Check all combinations of i, j, k for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if (sequence[i] + sequence[j] + sequence[k]) % d == 0: return \\"YES\\" return \\"NO\\" # Example usage: input_data = \\"5 7n1 2 3 4 5\\" lines = input_data.split(\\"n\\") n, d = map(int, lines[0].split()) sequence = list(map(int, lines[1].split())) print(can_find_triplet_sum_divisible(n, d, sequence)) # output should be \\"YES\\""},{"question":"You are given an array of integers. Your task is to reorder the elements of the array in such a way that the new array alternates between the smallest and the largest elements of the original array. For example, given the array `[11, 2, 9, 7, 6, 3]`, the new array should be `[2, 11, 3, 9, 6, 7]`. To achieve this, follow the steps below: 1. Sort the array in ascending order. 2. Select the smallest number, then the largest number, then the second smallest number, then the second largest number, and so on. # Input: The input consists of a single integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array, followed by a line containing n integers representing the array elements. The elements of the array are distinct and each element is between 1 and 1000. # Output: Output the reordered array fulfilling the conditions mentioned above. # Example: Input: ``` 6 11 2 9 7 6 3 ``` Output: ``` 2 11 3 9 6 7 ``` # Note: In the example, the smallest element is 2, and the largest is 11. The second smallest is 3, and the second largest is 9, and so on. Hence, the output array is `[2, 11, 3, 9, 6, 7]`.","solution":"def reorder_array(n, arr): Reorders the array such that it alternates between the smallest and largest elements. arr.sort() left = 0 right = n - 1 result = [] while left <= right: if left <= right: result.append(arr[left]) left += 1 if left <= right: result.append(arr[right]) right -= 1 return result"},{"question":"You are given an array of n integers, a1, a2, ..., an. We call a segment of this array sloped if it is strictly increasing or strictly decreasing throughout its entire length. Note that a segment must have at least two elements to be considered sloped. Your task is to find the maximum length of a sloped segment in the array. If no sloped segment exists, return 0. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The next lines contain descriptions of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output For each test case, output the length of the longest sloped segment, or 0 if no such segment exists. Example Input 3 5 1 3 2 4 5 4 4 3 2 1 6 7 7 7 7 7 7 Output 3 4 0 Note In the first test case, the longest sloped segment is either [1, 3, 2] or [2, 4, 5], both with a length of 3. In the second test case, the longest sloped segment is [4, 3, 2, 1] with a length of 4. In the third test case, there is no segment that is strictly increasing or decreasing, so the answer is 0.","solution":"def max_sloped_segment_length(t, test_cases): Returns the maximum length of a sloped segment for each test case. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains (n, array) where n is the length of the array and array is the list of integers. Returns: list of int: Maximum lengths of the sloped segments for each test case. results = [] for n, arr in test_cases: max_length = current_length = 0 direction = 0 # 0 means not yet determined, 1 means increasing, -1 means decreasing for i in range(1, n): if arr[i] > arr[i - 1]: if direction != 1: current_length = 2 direction = 1 else: current_length += 1 elif arr[i] < arr[i - 1]: if direction != -1: current_length = 2 direction = -1 else: current_length += 1 else: current_length = 0 direction = 0 max_length = max(max_length, current_length) results.append(max_length) return results # Example usage: # test_cases = [(5, [1, 3, 2, 4, 5]), (4, [4, 3, 2, 1]), (6, [7, 7, 7, 7, 7, 7])] # print(max_sloped_segment_length(3, test_cases))"},{"question":"A company is organizing a hackathon and invites N participants to take part in it. To ensure a fair and exciting competition, they decided to conduct K rounds of challenges where each round eliminates exactly one participant until only one winner remains. The rounds are conducted in a single-elimination style, and only the participants who have not been eliminated in the previous rounds can compete in the next round. Implement a function `hackathon_rounds` to determine the total number of challenges played in the hackathon before the winner is declared. # Input - An integer N representing the initial number of participants. (1 leq N leq 1000) - An integer K representing the number of rounds to be held. (1 leq K leq N-1) # Output - Output an integer representing the total number of challenges conducted by the end of the hackathon. # Example ```python def hackathon_rounds(N, K): # Your implementation here print(hackathon_rounds(5, 4)) # Output: 4 print(hackathon_rounds(6, 5)) # Output: 5 ``` # Explanation Given 5 participants and 4 rounds, each round will eliminate one participant, thus a total of 4 challenges are played to determine the winner. Similarly, for 6 participants and 5 rounds, 5 challenges will be conducted to ensure only one participant wins.","solution":"def hackathon_rounds(N, K): Returns the total number of challenges conducted in the hackathon. Each round eliminates exactly one participant until only one winner remains. :param N: Initial number of participants :param K: Number of rounds to be held :return: Total number of challenges conducted return K"},{"question":"Yara\'s Planning Yara and her friends are organizing a surprise party and need to create a detailed plan to communicate each task among themselves. However, they realized that they might be overwriting each other\'s plans due to poor coordination. They decided that each friend should have a specific set of tasks and, for any overlap, the tasks should be reallocated such that only one person is responsible for any particular task. Your task is to help Yara by writing a program that finds out the minimum number of tasks each friend will end up with, ensuring that there\'s no overlap. Given N tasks and M friends, along with a list specifying which tasks each friend wants to do, determine the final distribution where no tasks overlap. Input: First line contains two integers N and M, where N is the number of tasks and M is the number of friends. Next M lines each contain a series of integers separated by space, where the first integer indicates the number of tasks a friend wants to do, followed by the indices (0 based) of these tasks. Output: Print a single integer, which is the minimum number of tasks the most-loaded friend has after reallocation. Constraints: 1 ≤ N ≤ 100000 1 ≤ M ≤ 100 1 ≤ number of tasks requested by each friend ≤ N SAMPLE INPUT 5 3 2 0 1 3 1 2 3 2 3 4 SAMPLE OUTPUT 2 Explanation In this example: - Friend 1 wants to complete tasks [0, 1] - Friend 2 wants to complete tasks [1, 2, 3] - Friend 3 wants to complete tasks [3, 4] Possible non-overlapping reallocation: - Friend 1: [0], which results in total 1 task - Friend 2: [2, 3], which results in total 2 tasks - Friend 3: [1, 4], which results in total 2 tasks The maximum number of tasks any friend has is 2. Hence, minimum number of tasks the most-loaded friend has after reallocation is 2.","solution":"def find_min_max_tasks(N, M, friends_tasks): task_to_friends = {} for friend_id, tasks in enumerate(friends_tasks): for task in tasks: if task not in task_to_friends: task_to_friends[task] = [] task_to_friends[task].append(friend_id) # List to count tasks assigned to each friend tasks_count = [0] * M for task, friends in task_to_friends.items(): if len(friends) > 1: least_loaded_friend = min(friends, key=lambda f: tasks_count[f]) tasks_count[least_loaded_friend] += 1 else: tasks_count[friends[0]] += 1 return max(tasks_count) # Example usage N = 5 M = 3 friends_tasks = [ [0, 1], [1, 2, 3], [3, 4] ] print(find_min_max_tasks(N, M, friends_tasks)) # Output: 2"},{"question":"Ravi is building a special type of string called a \\"balanced string\\" for his research. A string is considered balanced if it has an equal number of \'A\'s and \'B\'s, and for any prefix of the string, the number of \'A\'s should never be less than the number of \'B\'s. For instance, \\"AABB\\", \\"AABABB\\", and \\"AAABBB\\" are balanced strings, while \\"BBAA\\", \\"ABBA\\", and \\"BAAB\\" are not. Ravi is interested in finding out how many different balanced strings of a certain length can be formed. Since the number can be very large, he wants the result modulo 10^9 + 7. Given an integer n (the length of the strings), your task is to calculate the number of different balanced strings of length n that can be formed. Input The first line contains an integer n — the length of the strings (1 ≤ n ≤ 10^5). Output Print one number — the number of different balanced strings of length n modulo 10^9 + 7. Examples Input 4 Output 2 Input 6 Output 5 Input 3 Output 0 Note In the first sample, the balanced strings of length 4 are \\"AABB\\" and \\"ABAB\\". In the second sample, the balanced strings of length 6 are \\"AAABBB\\", \\"AABBAB\\", \\"AABABB\\", \\"ABAABB\\", and \\"ABABAB\\". In the third sample, it is impossible to have a balanced string of odd length. Thus, the output is 0.","solution":"MOD = 10**9 + 7 def catalan_number(n): if n == 0: return 1 c = [0]* (n + 1) c[0] = 1 for i in range(1, n + 1): c[i] = (2 * (2 * i - 1) * c[i - 1]) // (i + 1) c[i] %= MOD return c[n] def count_balanced_strings(n): if n % 2 != 0: return 0 n //= 2 return catalan_number(n)"},{"question":"You are given a message which is encoded using a simple encryption algorithm. The algorithm works as follows: 1. Each letter in the message is replaced with its corresponding position in the English alphabet (i.e., \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26). 2. The replaced numbers are concatenated together to form a string of digits, which represents the encoded message. However, the encoded message might not always lead to unique decoding because multiple digit numbers can be formed by grouping single character replacements differently. Given the encoded message as a string of digits, you need to determine the total number of ways it can be decoded back into a valid message (consisting only of lowercase letters). Input The first (and the only) line of input contains a string of digits s (1 ≤ |s| ≤ 100), where each character is a digit from \'1\' to \'9\'. The string does not contain leading zeroes. Output Output a single integer, which is the total number of ways the given encoded message can be decoded. Examples Input 111 Output 3 Input 1234 Output 3 Input 2626 Output 4","solution":"def num_decodings(s): Given an encoded message containing digits, determine the total number of ways to decode it. :param s: str, encoded message :return: int, total number of ways to decode it if not s: return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): if 1 <= int(s[i-1:i]) <= 9: dp[i] += dp[i-1] if 10 <= int(s[i-2:i]) <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Write a program that reads a sequence of integers and finds the maximum sum of any contiguous subarray within the sequence. Constraints * 1 ≤ n ≤ 100 * -1000 ≤ ai ≤ 1000 Input The first line contains the number of elements n in the sequence. The second line contains n integers separated by space. Output Print a single integer which is the maximum sum of any contiguous subarray. Example Input 5 -2 1 -3 4 -1 Output 4","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray within the sequence. :param arr: List of integers. :return: Integer, the maximum sum of any contiguous subarray. max_so_far = float(\'-inf\') max_ending_here = 0 for num in arr: max_ending_here += num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far # Example of using the function (for testing purposes) n = 5 arr = [-2, 1, -3, 4, -1] print(max_subarray_sum(arr)) # Output: 4"},{"question":"Alice is a robotics engineer and she is designing a new robot vacuum cleaner. The vacuum cleaner needs to be able to efficiently clean a rectangular grid room. The room is represented as an m x n grid, where each cell can either be cleanable (represented by 0) or an obstacle (represented by 1). The robot can move up, down, left, or right, and it needs to figure out the shortest path from its starting position to the target dirty cell. Given the m x n grid room, the robot\'s starting position, and the target dirty cell, help Alice determine the minimum number of moves required for the robot to reach the target dirty cell. If the target is unreachable, return -1. Input The first input line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns, respectively. The next m lines contain n space-separated integers (either 0 or 1), representing the grid room. The next input line contains two integers sr and sc (0 ≤ sr < m, 0 ≤ sc < n) — the row and column indices of the starting position of the robot. The final input line contains two integers tr and tc (0 ≤ tr < m, 0 ≤ tc < n) — the row and column indices of the target dirty cell. Output Print a single integer — the minimum number of moves required for the robot to reach the target dirty cell. If it is not possible for the robot to reach the target, print -1. Examples Input 5 5 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 3 4 Output 7 Input 3 3 0 1 0 1 0 1 0 1 0 0 0 2 2 Output -1 Note In the first example, the robot can take the path [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (3, 4)] which takes 7 moves. In the second example, it is not possible for the robot to reach the target dirty cell at (2, 2) due to the obstacles, so the output is -1.","solution":"from collections import deque def min_moves_to_reach_target(m, n, grid, sr, sc, tr, tc): if grid[sr][sc] == 1 or grid[tr][tc] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sr, sc, 0)]) # (current row, current column, current move count) visited = set((sr, sc)) while queue: r, c, moves = queue.popleft() if (r, c) == (tr, tc): return moves for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, moves + 1)) visited.add((nr, nc)) return -1"},{"question":"You are given a string `s` containing only characters `a` and `b`. In one operation, you can select any two adjacent characters in the string and replace them with a single character `c` according to the following rules: - If the two characters are `a` and `a`, replace them with a single `a`. - If the two characters are `b` and `b`, replace them with a single `b`. - If the two characters are `a` and `b`, replace them with a single `a`. - If the two characters are `b` and `a`, replace them with a single `b`. Your task is to determine the resulting character after a series of operations is applied to the entire string until only one character remains. Input The input contains a single string `s` (1 ≤ |s| ≤ 1000), consisting only of characters `a` and `b`. Output Output the resulting character after applying the operations until one character remains. Examples Input ab Output a Input ba Output b Input aa Output a Input bbab Output b","solution":"def reduce_string(s): Reduces the string based on the given rules until one character remains. while len(s) > 1: new_s = [] i = 0 while i < len(s): if i < len(s) - 1: if s[i] == s[i + 1]: new_s.append(s[i]) else: new_s.append(\'a\' if s[i] == \'a\' else \'b\') i += 2 else: new_s.append(s[i]) i += 1 s = \'\'.join(new_s) return s"},{"question":"Write a program that identifies the longest palindrome substring in a given string. The substring must be contiguous and should be case-sensitive (i.e., \'A\' and \'a\' are different characters). Input The input consists of multiple datasets. Each dataset is a single line string. Each string is a single word with no spaces and has at least 1 and at most 1000 characters. The last dataset is followed by a line containing the word \\"END\\", which is not a part of any dataset and should not be processed. Output For each dataset, print the longest palindromic substring. If there are multiple such substrings of the same length, print the first one found. Example Input babad cbbd a ac abccba END Output bab bb a a abccba","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in the given string s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes substring1 = expand_around_center(i, i) # Even length palindromes substring2 = expand_around_center(i, i + 1) # Update the longest palindrome found if len(substring1) > len(longest): longest = substring1 if len(substring2) > len(longest): longest = substring2 return longest def process_input(input_lines): results = [] for line in input_lines: if line == \\"END\\": break results.append(longest_palindrome_substring(line)) return results"},{"question":"On a remote island, the inhabitants have a unique counting system using a special sequence of distinct integers. Unfortunately, the system was partially lost in a storm, and now only fragments of it can be found. Each fragment appears in some parts of a list of integers. Given a list of positive integers, your task is to determine the longest contiguous subsequence of distinct integers in that list. # Input: The first line contains an integer `N` (1 ≤ N ≤ 10^5), the number of integers in the list. The second line contains `N` space-separated integers, each between 1 and 10^9. # Output: Output a single integer, representing the length of the longest contiguous subsequence of distinct integers in the list. # Sample Input: ``` 10 5 1 3 5 2 3 4 1 5 2 ``` # Sample Output: ``` 5 ``` # Explanation: The longest contiguous subsequence with all distinct integers is `[5, 2, 3, 4, 1]` which has a length of 5.","solution":"def longest_contiguous_subsequence(n, arr): Determines the length of the longest contiguous subsequence of distinct integers in the list. Parameters: n (int): the number of integers in the list arr (list of int): list of integers Returns: int: length of the longest contiguous subsequence of distinct integers last_seen_index = {} start = 0 max_length = 0 for i in range(n): if arr[i] in last_seen_index and last_seen_index[arr[i]] >= start: start = last_seen_index[arr[i]] + 1 last_seen_index[arr[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a series of time intervals during which a student accesses an online learning platform. Each interval is represented by a pair of start and end times with the format \\"HH:MM\\". Two intervals are overlapping if they share at least one common time. Your task is to write a program that determines the maximum number of overlapping intervals at any given time. For example, if the student accesses the platform during time intervals [\\"09:00\\"-\\"10:30\\"], [\\"10:00\\"-\\"11:00\\"], [\\"11:30\\"-\\"12:00\\"] and [\\"10:15\\"-\\"11:45\\"], the maximum number of overlapping intervals is 3, which occurs between \\"10:15\\" and \\"10:30\\". Input: The input consists of multiple datasets. Each dataset represents a series of intervals and is given in the following format: n start1 end1 start2 end2 ... startn endn where n is an integer representing the number of intervals, and each subsequent line contains a pair of times representing the start and end of an interval. The start and end times are given in the \\"HH:MM\\" format and `n` ranges from 1 to 100. The end of input is indicated by a line containing \\"0\\". Output: For each dataset, output a single line with an integer representing the maximum number of overlapping intervals for that dataset. Example: Input: 3 09:00 10:30 10:00 11:00 10:15 11:45 4 08:00 08:30 08:15 09:00 08:45 09:15 09:10 09:50 0 Output: 3 2","solution":"def max_overlapping_intervals(intervals): Determines the maximum number of overlapping intervals at any given time from a list of time intervals. intervals: List of [(start_time, end_time)] Each interval is given as a tuple with \\"HH:MM\\" strings representing the start and end times. Returns: int: Maximum number of overlapping intervals events = [] # Convert intervals to events where (+1) is start and (-1) is end for start, end in intervals: events.append((start, 1)) events.append((end, -1)) # Sort events based on time, breaking ties by giving preference to end events events.sort(key=lambda x: (x[0], x[1])) max_overlap = 0 current_overlap = 0 # Traverse events to find max overlaps for event in events: current_overlap += event[1] max_overlap = max(max_overlap, current_overlap) return max_overlap def read_datasets(): import sys input = sys.stdin.read data = input().strip().split(\'n\') result = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break intervals = [(data[i + j + 1].split()[0], data[i + j + 1].split()[1]) for j in range(n)] result.append(max_overlapping_intervals(intervals)) i += n + 1 for res in result: print(res)"},{"question":"You are tasked with processing a list of words. For each word in the list, you need to determine if it is a palindrome. A word is considered a palindrome if it reads the same backward as forward (ignoring case). You should return the results for all words in the list. A palindrome is a word that remains the same when its characters are reversed, e.g., \\"madam\\" or \\"racecar\\". Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of words in the list. Each of the next n lines contains one word w (1 ≤ |w| ≤ 1000). The words consist of lowercase and uppercase English letters only. Output Output n lines. For each word, print \\"YES\\" if it is a palindrome and \\"NO\\" otherwise. The case of the output does not matter. Example Input 4 Madam Hello Racecar World Output YES NO YES NO","solution":"def is_palindrome(word): Check if a given word is a palindrome, ignoring case. Returns \\"YES\\" if word is a palindrome, otherwise \\"NO\\". word = word.lower() if word == word[::-1]: return \\"YES\\" else: return \\"NO\\" def process_words(words): Process a list of words to determine if each is a palindrome. Returns a list of results with \\"YES\\" or \\"NO\\" for each word. return [is_palindrome(word) for word in words]"},{"question":"A farmer has a rectangular field and he wants to maximize the number of square plots of the same size that can be cut out from the field. The sides of the field are represented as two integers: length and width. The farmer can only cut square plots of side length equal to a whole number. Write a program that determines the side length of the largest possible square plot that can be cut from the rectangular field, and the maximum number of such square plots. If there are multiple solutions, return the smallest possible side length. Input The input consists of a single line containing two integers separated by a space, L and W (1 ≤ L, W ≤ 2 × 10^5), representing the length and width of the rectangular field respectively. Output The output should contain two integers separated by a space. The first integer is the side length of the largest possible square plot, and the second integer is the maximum number of such square plots that can be cut from the field. Examples Input 12 10 Output 2 30 Input 5 5 Output 5 1 Explanation In the first example, the largest possible square plot that can be cut out from the field has a side length of 2, and 30 such plots can be made. In the second example, the largest possible square plot has a side length of 5, and only one such plot can be made.","solution":"def largest_square_plot(L, W): Returns the side length of the largest square plot and maximum number of such plots that can be cut from the rectangle of length L and width W. def gcd(a, b): while b: a, b = b, a % b return a side = gcd(L, W) count = (L // side) * (W // side) return side, count"},{"question":"A popular online game involves collecting coins spread out in a grid. The grid is represented as an N x M matrix, where each cell contains a certain number of coins. Starting from the top-left corner of the grid, the player can move either right or down to collect the coins. The goal is to collect the maximum number of coins by the time the player reaches the bottom-right corner of the grid. Write a function that, given the grid of coins, computes the maximum number of coins that can be collected. Function Signature: ```python def max_coins(grid: List[List[int]]) -> int: ``` # Input - An integer N (1 ≤ N ≤ 1000) representing the number of rows in the grid. - An integer M (1 ≤ M ≤ 1000) representing the number of columns in the grid. - A 2D list of integers `grid[N][M]`, where each grid[i][j] (0 ≤ grid[i][j] ≤ 100) represents the number of coins in the cell (i, j). # Output - An integer representing the maximum number of coins that can be collected when starting from the top-left corner and moving to the bottom-right corner of the grid. # Example Input ``` 3 4 0 3 1 1 2 0 0 4 1 5 3 1 ``` Output ``` 12 ``` # Explanation The path that collects the maximum number of coins is: `(0, 0) -> (0, 1) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 3)`, collecting coins as we move from one cell to another. The player starts at position (0,0) and moves: - Right to cell (0,1), collecting 3 coins. - Down to cell (1,1), collecting 0 coins. - Right to cell (1,2), collecting 0 coins. - Right to cell (1,3), collecting 4 coins. - Down to cell (2,3), collecting 1 coin. Hence, the total coins collected = 0 + 3 + 0 + 0 + 4 + 1 + 4 = 12.","solution":"def max_coins(grid): Computes the maximum number of coins that can be collected moving from the top-left corner to the bottom-right corner of the grid by moving only right or down. N = len(grid) M = len(grid[0]) # Create a 2D array to store maximum coins collected up to each cell dp = [[0] * M for _ in range(N)] # Initialize the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the grid for i in range(1, N): for j in range(1, M): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right corner has the maximum coins collected return dp[N - 1][M - 1]"},{"question":"Input 5 3 8 6 C 1 3 2 Q 2 5 S 1 4 3 Output 23 true false","solution":"def change_element(lst, i, v): Change the element at index i to v. lst[i-1] = v def query_sum(lst, l, r): Query the sum of elements from index l to index r (inclusive). return sum(lst[l-1:r]) def check_segment_same(lst, l, r, v): Check if all elements from index l to index r are equal to v. for index in range(l-1, r): if lst[index] != v: return False return True # Example to demonstrate the function after implementing tests if __name__ == \\"__main__\\": lst = [5, 3, 8, 6] change_element(lst, 1, 3) # lst becomes [3, 3, 8, 6] print(query_sum(lst, 2, 5)) # Output: 23 print(check_segment_same(lst, 1, 4, 3)) # Output: True"},{"question":"Alice is learning about string manipulation in her programming class. Her instructor gave her a challenge to transform a given string `s` into a palindromic string. A palindromic string is one that reads the same forward and backward. The transformation allowed is to insert any number of characters into `s` at any position to make it a palindrome. Alice needs to find the minimum number of character insertions required. Input The first line contains an integer `T` denoting the number of test cases. Each of the next `T` lines contains a string `s`. Output For each test case, output the minimum number of insertions needed to transform the given string `s` into a palindrome. Constraints 1 <= T <= 100 1 <= |s| <= 1000 Example Input: 3 race abc noon Output: 3 2 0 Explanation In the first example, \\"race\\" can be transformed into \\"ecarace\\", \\"racecar\\", etc., by inserting 3 characters. In the second example, \\"abc\\" can be transformed into \\"abcba\\" or \\"cbaabc\\" by inserting 2 characters. In the third example, \\"noon\\" is already a palindrome, so no insertions are needed.","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of insertions needed to make a string s a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Fill the table for gap in range(1, n): for l in range(n-gap): h = l + gap if s[l] == s[h]: dp[l][h] = dp[l+1][h-1] else: dp[l][h] = min(dp[l][h-1], dp[l+1][h]) + 1 return dp[0][n-1] def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(min_insertions_to_make_palindrome(s)) return results"},{"question":"The Kingdom of Algos has a unique way of distributing their resources. The kingdom consists of N districts connected by M bidirectional roads. Each road has a weight representing the cost of transporting resources along that road. The King wants to ensure that every district is accessible from the capital (district 1) while minimizing the cost of transportation. To achieve this, the King needs to construct a single spanning tree that connects all districts to the capital with the minimum possible cost. Your task is to help the King find the total minimum cost required to connect all the districts in this way. Input: First line contains an integer T, the number of test cases. Each test case consists of: - An integer N, the number of districts. - An integer M, the number of roads connecting the districts. - The next M lines each contain three integers X, Y, and C, representing a road between districts X and Y with a transportation cost C. Output: For each test case, output the minimum cost required to connect all the districts from the capital (district 1). Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ M ≤ 10000 1 ≤ X, Y ≤ N 1 ≤ C ≤ 1000 Note: - It is guaranteed that there is at least one way to connect all districts from the capital. SAMPLE INPUT 1 4 5 1 2 1 1 3 2 2 3 2 2 4 3 3 4 3 SAMPLE OUTPUT 6 Explanation: Districts can be connected in the following way: - Connect district 1 to district 2 with cost 1. - Connect district 1 to district 3 with cost 2. - Connect district 2 to district 4 with cost 3. The total minimum cost to connect all districts to the capital is 1 + 2 + 3 = 6.","solution":"import heapq def find_minimum_cost_to_connect_districts(num_cases, cases): def prim(n, adj_list): min_cost = 0 visited = [False] * n pq = [(0, 0)] # (cost, vertex) while pq: cost, u = heapq.heappop(pq) if visited[u]: continue min_cost += cost visited[u] = True for next_cost, v in adj_list[u]: if not visited[v]: heapq.heappush(pq, (next_cost, v)) return min_cost results = [] for case in cases: N, M, edges = case adj_list = [[] for _ in range(N)] for x, y, c in edges: adj_list[x - 1].append((c, y - 1)) adj_list[y - 1].append((c, x - 1)) results.append(prim(N, adj_list)) return results def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 cases = [] for _ in range(T): N = int(data[idx]) M = int(data[idx + 1]) idx += 2 edges = [] for _ in range(M): X = int(data[idx]) Y = int(data[idx + 1]) C = int(data[idx + 2]) edges.append((X, Y, C)) idx += 3 cases.append((N, M, edges)) results = find_minimum_cost_to_connect_districts(T, cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array `nums` and need to process `q` queries. Each query is described by two integers `li` and `ri`. It means that you should find the sum of all even numbers in the subarray `nums[li... ri]` (1-based inclusive). The queries should be processed one after another in the order they are given. For example, if the array `nums` is `[2, 1, 4, 5, 6, 3]` and the query is `l1 = 2, r1 = 5`, then the answer is `4 + 6 = 10`. If after that we process the query `l2 = 1, r2 = 3`, we would get the sum `2 + 4 = 6`. Input The first line of the input contains the integer array `nums` (1 ≤ |nums| ≤ 10 000) in its initial state, where `|nums|` stands for the length of `nums`. It contains only integers. The second line contains a single integer `q` (1 ≤ q ≤ 300) — the number of queries. Each of the next `q` lines contains two integers `li` and `ri` (1 ≤ li ≤ ri ≤ |nums|) — the description of the i-th query. Output Print `q` integers. Each integer should be the result of the corresponding query in the order they were given. Examples Input 2 1 4 5 6 3 2 2 5 1 3 Output 10 6 Note For the first query, the subarray is `[1, 4, 5, 6]` and the sum of even numbers is `4 + 6 = 10`. For the second query, the subarray is `[2, 1, 4]` and the sum of even numbers is `2 + 4 = 6`.","solution":"def sum_of_even_numbers_in_subarray(nums, queries): This function returns the sum of even numbers for each query given on the nums array. Parameters: nums (list of int): The list of integers. queries (list of tuple): The list of queries where each query is a tuple (li, ri). Returns: list of int: A list containing the results for each query. results = [] for li, ri in queries: subarray = nums[li-1:ri] even_sum = sum(num for num in subarray if num % 2 == 0) results.append(even_sum) return results"},{"question":"Professor Snape needs your help to decipher a hidden message contained within a matrix of characters. The message can be read by traversing the matrix in a spiral order, starting from the top-left corner and moving towards the center of the matrix. Write a function that takes a matrix of characters as input and returns the message as a string formed by reading the characters in spiral order. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the size of an NxN matrix. The next N lines contain N characters each, representing the matrix. Output: For each test case, print the message decoded from the matrix in spiral order. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 20 SAMPLE INPUT 1 3 a b c d e f g h i SAMPLE OUTPUT abcdefghi","solution":"def spiralOrder(matrix): Returns the characters in the matrix in spiral order as a single string. result = [] while matrix: # right result += matrix.pop(0) if matrix and matrix[0]: # down for row in matrix: result.append(row.pop()) if matrix: # left result += matrix.pop()[::-1] if matrix and matrix[0]: # up for row in matrix[::-1]: result.append(row.pop(0)) return \'\'.join(result) def decode_message(test_cases): results = [] for matrix in test_cases: results.append(spiralOrder(matrix)) return results"},{"question":"We\'re given a string S of length N consisting of lowercase English letters, and an integer array P of length N. The integer array P defines the powers of the corresponding characters in the string S. The weight of a substring of S is defined as the sum of the powers of its characters. You are required to answer Q queries. Each query is defined by two integers L and R (1 ≤ L ≤ R ≤ N), and for each query, you need to find the weight of the substring S[L-1:R]. Input The first line contains two integers N and Q (1 ≤ N, Q ≤ 105). The second line contains the string S of length N consisting of lowercase English letters. The third line contains N integers, the array P, where each Pi (1 ≤ Pi ≤ 106). The next Q lines contain two integers L and R each, defining the queries. Output Output Q lines, each containing the answer to the corresponding query. Example Input 5 3 abcde 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15 Note For the first query, the substring is \\"abc” and the corresponding powers are [1, 2, 3], so the weight is 1 + 2 + 3 = 6.","solution":"def calculate_weights(N, Q, S, P, queries): Calculate the weights of substrings based on given queries. :param N: Integer, the length of the string S :param Q: Integer, the number of queries :param S: String, the input string of length N :param P: List of integers, the power array corresponding to each character in the string :param queries: List of tuples, each containing two integers (L, R) :return: List of integers, the weights for each query # Convert string positions in queries to 0-based index and calculate prefix sums prefix_sums = [0] * (N + 1) for i in range(N): prefix_sums[i + 1] = prefix_sums[i] + P[i] result = [] for L, R in queries: result.append(prefix_sums[R] - prefix_sums[L - 1]) return result"},{"question":"Palindrome Partitioning Alice is studying palindrome substrings as part of her computer science research. A palindrome is a string that reads the same forwards and backwards. Alice has an interesting problem and needs your help to solve it. She has a string `S` consisting of lowercase English letters, and she wants to partition the string into the minimum number of substrings such that each substring is a palindrome. Write a function `min_palindrome_partitions(S: str) -> int` that returns the minimum number of palindromic substrings Alice can partition `S` into. # Input Format: A single line containing the string `S` of length `n` (1 ≤ `n` ≤ 1000). # Output Format: Output a single integer, the minimum number of palindromic substrings. # Example: Input: ``` abac ``` Output: ``` 2 ``` Explanation: One possible partitioning is \\"aba\\" and \\"c\\". Another possible partitioning could be \\"a\\", \\"b\\", \\"a\\", and \\"c\\", but the number of partitions is greater. # Constraints: - The characters in string `S` are all lowercase English letters. - The length of `S` will not exceed 1000. # Notes: - Consider efficiently checking for palindromes and exploring dynamic programming techniques to achieve the best performance.","solution":"def min_palindrome_partitions(S: str) -> int: Returns the minimum number of palindromic substrings S can be partitioned into. n = len(S) dp = [[False] * n for _ in range(n)] cuts = [0] * n for i in range(n): min_cuts = i for j in range(i + 1): if S[j] == S[i] and (i - j < 2 or dp[j + 1][i - 1]): dp[j][i] = True min_cuts = 0 if j == 0 else min(min_cuts, cuts[j - 1] + 1) cuts[i] = min_cuts return cuts[n - 1]"},{"question":"You are given a list of integers sorted in non-decreasing order. Your task is to find the starting and ending positions of a given target value in the list. If the target is not found in the list, return [-1, -1]. Write a function with the following signature: ```python def search_range(nums: List[int], target: int) -> List[int]: ``` # Constraints * The length of the list `nums` will be between 0 and 10^5. * Each element in `nums` will be an integer between -10^9 and 10^9. * The target will be an integer between -10^9 and 10^9. # Input Your function will receive two arguments: 1. `nums` - A list of integers, sorted in non-decreasing order. 2. `target` - The target integer to find in the list. # Output Return a list with two integers representing the starting and ending positions of the target value in the list. If the target is not found, return `[-1, -1]`. # Examples Example 1: Input: ```python nums = [5, 7, 7, 8, 8, 10] target = 8 ``` Output: ```python [3, 4] ``` Example 2: Input: ```python nums = [5, 7, 7, 8, 8, 10] target = 6 ``` Output: ```python [-1, -1] ``` Example 3: Input: ```python nums = [] target = 0 ``` Output: ```python [-1, -1] ```","solution":"def search_range(nums, target): Returns the starting and ending positions of a given target value in the list. If the target is not found in the list, returns [-1, -1]. def find_start(nums, target): left, right = 0, len(nums) - 1 start = -1 while left <= right: mid = (left + right) // 2 if nums[mid] >= target: right = mid - 1 else: left = mid + 1 if nums[mid] == target: start = mid return start def find_end(nums, target): left, right = 0, len(nums) - 1 end = -1 while left <= right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 if nums[mid] == target: end = mid return end start = find_start(nums, target) end = find_end(nums, target) return [start, end]"},{"question":"There is a city consisting of N intersections and M roads. Each road connects a pair of intersections. Your task is to find the number of intersections that, if removed along with their incident roads, will divide the city into two or more disconnected parts. An intersection is called a \\"cut vertex\\" if removing it (and the roads connected to it) increases the number of connected components of the city. Input The first line contains T - the number of test cases. For each test case: The first line contains two integers N and M. Each of the next M lines contains two integers u and v indicating that there is a road connecting the intersections u and v. Output For each test case output one line containing the number of cut vertices. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ M ≤ 2000 1 ≤ u, v ≤ N SAMPLE INPUT 2 5 5 1 2 1 3 3 4 4 5 4 2 4 4 1 2 2 3 3 4 4 2 SAMPLE OUTPUT 1 1","solution":"def find_cut_vertices(n, adj): Function to find all cut vertices in a graph using Tarjan\'s Algorithm. :param n: number of vertices :param adj: adjacency list of the graph :return: a list of cut vertices def dfs(current, discovery, low, parent, visited, articulation_points, time): children = 0 visited[current] = True discovery[current] = low[current] = time time += 1 for neighbor in adj[current]: if not visited[neighbor]: children += 1 parent[neighbor] = current dfs(neighbor, discovery, low, parent, visited, articulation_points, time) low[current] = min(low[current], low[neighbor]) if parent[current] == -1 and children > 1: articulation_points[current] = True if parent[current] != -1 and low[neighbor] >= discovery[current]: articulation_points[current] = True elif neighbor != parent[current]: low[current] = min(low[current], discovery[neighbor]) visited = [False] * n discovery = [-1] * n low = [-1] * n parent = [-1] * n articulation_points = [False] * n time = 0 for i in range(n): if not visited[i]: dfs(i, discovery, low, parent, visited, articulation_points, time) return [i for i, is_art in enumerate(articulation_points) if is_art] def count_cut_vertices(test_cases): results = [] for n, m, edges in test_cases: adj = [[] for _ in range(n)] for u, v in edges: adj[u-1].append(v-1) adj[v-1].append(u-1) cut_vertices = find_cut_vertices(n, adj) results.append(len(cut_vertices)) return results # Here is how the input can be handled def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n, m = map(int, input_lines[index].split()) edges = [] for j in range(m): u, v = map(int, input_lines[index + 1 + j].split()) edges.append((u, v)) index += m + 1 test_cases.append((n, m, edges)) return test_cases def main(input_data): test_cases = process_input(input_data) results = count_cut_vertices(test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are organizing a charity marathon and have n participants. Each participant can run a maximum distance of di kilometers without taking a break. Since the marathon route has checkpoints every kilometer, you need to place water stations at some of these checkpoints such that every participant can reach a water station without exceeding their maximum distance limit. Determine the minimum number of water stations you need to install along the marathon route to ensure this. Input The first line contains one integer n (1 ≤ n ≤ 100) — the number of participants. The second line contains n integers di (1 ≤ di ≤ 100) — the maximum distance each participant can run without rest. Output Print one integer — the minimum number of water stations you need to install along the route. Example Input 3 1 3 2 Output 1 Input 2 2 4 Output 2","solution":"def minimum_water_stations(n, distances): Determines the minimum number of water stations needed to ensure every participant can reach a water station without exceeding their maximum distance limit. :param n: Number of participants :param distances: List of integers representing the maximum distance each participant can run without rest :return: Minimum number of water stations needed if n == 0: return 0 # The maximum distance any participant can run without taking a break min_distance = min(distances) # Number of water stations is equal to the minimum distance any participant can run return (100 + min_distance - 1) // min_distance # Or simply ceil(100 / min_distance)"},{"question":"You are given an array of integers and your task is to reverse it in groups of size K. If K is greater than the length of the array, reverse the whole array. The function should return the resulting array after all the reversals are done. Input: The first line of the input contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the size of the array. The second line contains N space-separated integers Ai, denoting the elements of the array. The third line contains an integer K, denoting the size of the groups in which the array elements are to be reversed. Output: For each test case, print the modified array after reversing in groups. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^5 1 ≤ K ≤ 10^5 Example: Input: 3 5 1 2 3 4 5 2 4 1 2 3 4 3 7 1 2 3 4 5 6 7 8 Output: 2 1 4 3 5 3 2 1 4 7 6 5 4 3 2 1 Explanation: Example case 1: The array [1,2,3,4,5] is reversed in groups of 2: [2,1,4,3,5]. Example case 2: The array [1,2,3,4] is reversed in groups of 3: [3,2,1,4]. Example case 3: The array [1,2,3,4,5,6,7] is reversed in a single group (because 8 is greater than array length): [7,6,5,4,3,2,1].","solution":"def reverse_in_groups(arr, k): Reverse an array in groups of size k. If k > length of the array, reverse the whole array. n = len(arr) if k > n: return arr[::-1] for i in range(0, n, k): left = i right = min(i + k - 1, n - 1) while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr, k = case results.append(reverse_in_groups(arr, k)) return results"},{"question":"The Smallest Window Substring problem is a classical and challenging problem in string manipulation. Given two strings S and T, your task is to find the smallest substring in S that contains all the characters of T (including their frequency). A substring is defined as a contiguous sequence of characters within a string. Input The first line contains the string S. The second line contains the string T. Output Print the smallest substring of S that contains all the characters of T. If no such substring exists, print an empty string \\"\\". Constraints 1 ≤ length(S), length(T) ≤ 10^5 S and T consist of both uppercase and lowercase Latin letters. Example Input ADOBECODEBANC ABC Output BANC Explanation Both \\"ADOBECODEBA\\" and \\"BANC\\" contain all the characters \\"A\\", \\"B\\", and \\"C\\". The smallest among them is \\"BANC\\".","solution":"from collections import Counter def min_window_substring(S, T): if not S or not T: return \\"\\" dict_t = Counter(T) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = {} ans = float(\\"inf\\"), None, None while r < len(S): character = S[r] window_counts[character] = window_counts.get(character, 0) + 1 if character in dict_t and window_counts[character] == dict_t[character]: formed += 1 while l <= r and formed == required: character = S[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[character] -= 1 if character in dict_t and window_counts[character] < dict_t[character]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else S[ans[1]: ans[2] + 1]"},{"question":"You are given a maze represented as a grid of \'n\' rows and \'m\' columns. Each cell in the maze is either passable or blocked. You need to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) such that you can only move up, down, left, or right. However, you can also break one wall (convert one blocked cell into a passable cell) to potentially find a shorter path. If there is no possible path, output -1. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the maze. Each of the next n lines contains m characters. Each character is either \'.\' (indicating a passable cell) or \'#\' (indicating a blocked cell). Output Print an integer - the length of the shortest path from the top-left corner to the bottom-right corner if you are allowed to break one wall. If there is no possible path, print -1. Examples Input 5 5 ..... .#. .#.#. .#. ..... Output 9 Input 3 3 .#. # .#. Output -1 Input 4 4 ..#. .. .... Output 7 Note In the first example, the optimal way involves breaking the wall at (3, 1). In the third example, breaking the wall at (2, 2) creates a shortest path from (0, 0) to (3, 3).","solution":"from collections import deque def shortest_path_with_wall_break(n, m, grid): Function to find the shortest path in a grid with the option to break one wall. :param n: Number of rows. :param m: Number of columns. :param grid: The grid represented as a list of strings. :return: Length of the shortest path or -1 if no path exists. def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[[False, False] for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 0, 1)]) # (x, y, wall broken, distance) visited[0][0][0] = True while queue: x, y, has_broken_wall, distance = queue.popleft() if (x, y) == (n-1, m-1): return distance for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == \'.\' and not visited[nx][ny][has_broken_wall]: visited[nx][ny][has_broken_wall] = True queue.append((nx, ny, has_broken_wall, distance+1)) elif grid[nx][ny] == \'#\' and has_broken_wall == 0: visited[nx][ny][1] = True queue.append((nx, ny, 1, distance+1)) return -1"},{"question":"In a small village, there is a celebration that involves distributing candies to children. The village chief has an initial number of candies `C`. There are `n` children, each identified by a unique integer from `1` to `n`. Each child has their own preference for candies, represented by an array `p` where `p[i]` is the number of candies the i-th child likes to receive. The village chief wants to distribute all the candies such that each child receives at least their preferred amount. If it\'s not possible to satisfy every child\'s preference, the village chief can add candies to make it possible. Determine the minimum number of additional candies required, if any, to satisfy every child\'s preference. Input The first line contains an integer `t` (1 ≤ t ≤ 100) – the number of test cases. The following lines contain descriptions of each test case. The first line of each test case contains two integers `n` (1 ≤ n ≤ 10^3) and `C` (1 ≤ C ≤ 10^9) – the number of children and the initial number of candies. The second line of each test case contains `n` integers `p_1, p_2, ..., p_n` (0 ≤ p_i ≤ 10^9) – the array of candy preferences. Output For each test case, output a single integer – the minimum number of additional candies required to satisfy all the children\'s preferences. Example Input 3 3 10 2 3 5 4 9 3 3 3 3 5 15 1 2 3 4 5 Output 0 2 0 Note In the first test case, the sum of the preferences is `2 + 3 + 5 = 10`, which equals the initial number of candies, so no additional candies are needed. In the second test case, the sum of the preferences is `3 + 3 + 3 + 3 = 12`, which is greater than the initial number of candies. Therefore, the village chief needs `12 - 9 = 3` additional candies to satisfy all preferences. In the third test case, the sum of the preferences is `1 + 2 + 3 + 4 + 5 = 15`, which equals the initial number of candies, so no additional candies are needed.","solution":"def minimum_additional_candies(t, test_cases): Given the number of test cases and the details of each test case, returns the minimum number of additional candies required to satisfy the preferences of all children. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains: - Two integers n and C (number of children and initial number of candies) - A list p of lengths n indicating each child\'s candy preferences. Returns: list: A list of integers where each integer is the minimum number of additional candies required for each test case. results = [] for n, C, p in test_cases: total_preferences = sum(p) if total_preferences > C: results.append(total_preferences - C) else: results.append(0) return results"},{"question":"Danny is browsing through his music library and wants to create a new playlist. However, he follows a very specific rule while adding songs to his playlists: he never allows two songs by the same artist to be added consecutively. Additionally, Danny prefers songs that he hasn\'t listened to recently. To assist Danny in creating his playlist, you need to write a program that will ensure he chooses songs according to his strict rules. Each song in Danny\'s library has a title, an artist, and a timestamp representing the last time he listened to the song. The songs are provided in a list, and you need to create a sequence of song titles that follows Danny\'s rule. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the number of songs in Danny\'s library. - The next n lines contain three space-separated values: a string title, a string artist, and an integer timestamp (0 ≤ timestamp ≤ 10^9), where title is the song\'s title, artist is the song\'s artist, and timestamp is the last time he listened to the song. Output - Print a space-separated sequence of song titles according to Danny\'s rules. If there are multiple valid sequences, print any one. If it\'s not possible to form such a sequence, print \\"Not possible.\\" Example Input 5 Song1 Artist1 10 Song2 Artist1 12 Song3 Artist2 15 Song4 Artist3 20 Song5 Artist1 25 Output Song3 Song1 Song4 Song2 Song5 Explanation: - Song3 by Artist2 is chosen first (it\'s the only song by Artist2). - Song1 by Artist1 is chosen next (it has the earliest timestamp among songs by Artist1). - Song4 by Artist3 is chosen next (it has the earliest timestamp among songs by Artist3). - Song2 by Artist1 is chosen next (it has the next earliest timestamp and is not immediately following another song by Artist1). - Song5 by Artist1 is chosen last (it follows the rule because Song2 was by Artist1 but not followed immediately).","solution":"def create_playlist(songs): songs.sort(key=lambda x: x[2]) playlist = [] last_artist = None while songs: for i, song in enumerate(songs): if song[1] != last_artist: playlist.append(song[0]) last_artist = song[1] songs.pop(i) break else: # If no valid song is found, it means it\'s not possible to create the playlist return \\"Not possible.\\" return \\" \\".join(playlist) def process_input(data): n = int(data[0]) songs = [tuple(data[i].split()) for i in range(1, n + 1)] for i in range(n): songs[i] = (songs[i][0], songs[i][1], int(songs[i][2])) return songs"},{"question":"A group of explorers discovered an ancient, secretive code in the depths of a hidden cave. The code revealed a mysterious language known as \\"Circular Prime\\". This language involves evaluating string sequences that circle around a wheel with digits from 0 to 9. Given a string of digits, the origin of each sequence can start at any digit and it \\"wraps around\\". For instance, for the string \\"123\\", you can form the sequences \\"123\\", \\"231\\", and \\"312\\". A \\"Circular Prime\\" is a certain sequence of digits which forms a prime number for every possible origin. Write a program to determine if a given string of digits can be considered a \\"Circular Prime\\". To consider a number as prime, it must be greater than 1 and not divisible by any number other than 1 and itself. # Input - A single string `S` containing digits (0-9). The length of `S` does not exceed 100 digits. # Output - Print \\"YES\\" if the sequence forms a Circular Prime. - Print \\"NO\\" otherwise. # Example Input 1: ``` 197 ``` Output 1: ``` YES ``` Input 2: ``` 132 ``` Output 2: ``` NO ``` # Note For the first example, the sequence can form 197, 971 and 719, all of which are prime numbers. Hence, it is a Circular Prime. For the second example, the sequence can form 132, 321 and 213, at least one of which is not a prime number. Hence, it is not a Circular Prime.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_rotations(s): Generate all rotations of the string s. rotations = [] for i in range(len(s)): rotations.append(s[i:] + s[:i]) return rotations def is_circular_prime(s): Check if the string s represents a circular prime. rotations = generate_rotations(s) for rot in rotations: if not is_prime(int(rot)): return \\"NO\\" return \\"YES\\""},{"question":"Daniel is a huge fan of string transformations and has recently encountered an interesting problem involving palindromes. He came across a series of transformations that he could apply to a string of lowercase Latin letters to turn it into a palindrome. A palindrome is a string that reads the same backward as forward. To transform a given string into a palindrome, Daniel can perform one operation: he can change any character in the string to any other lowercase Latin letter he wants. Given a string `s` of length `n` (1 ≤ n ≤ 100 000), Daniel wants to determine the minimum number of operations required to turn the string `s` into a palindrome. Input The first line contains a single integer `n` (1 ≤ n ≤ 100 000) — the length of the string. The second line contains the string `s` of length `n` consisting of lowercase Latin letters. Output Print a single integer — the minimum number of operations required to transform the string `s` into a palindrome. Examples Input 5 abcar Output 2 Input 4 abcd Output 2 Input 7 racecar Output 0 Note In the first example, changing the characters \'b\' and \'r\' to \'c\' will result in the string \\"accac\\", which is a palindrome, requiring 2 operations. In the second example, changing the characters \'a\' and \'d\' to \'b\' and \'c\' respectively will result in the string \\"bccb\\", which is a palindrome, requiring 2 operations. In the third example, the given string is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(n, s): This function calculates the minimum number of operations required to transform the string s into a palindrome. Parameters: n (int): Length of the string s (str): The input string Returns: int: The minimum number of operations required operations = 0 # Checking each character with its corresponding character from the end for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"A travel agency is currently organizing tours with various numbers of destinations. You need to help them by calculating the total travel distance for a given tour, represented by a list of distances between consecutive destinations. Your task is to write a program that takes in a list of distances and outputs the sum of these distances. Input A single line of space-separated integers where each integer represents the distance between consecutive destinations. The number of integers will be between 1 and 100, inclusive, and each integer will be between 1 and 1000, inclusive. Output A single integer representing the total distance of the travel. Example Input 150 300 450 600 Output 1500 Input 1000 Output 1000","solution":"def total_travel_distance(distances_str): Returns the total travel distance for a given list of distances. Args: distances_str (str): A string of space-separated integers where each integer represents the distance between consecutive destinations. Returns: int: The sum of all the distances. distances = map(int, distances_str.split()) return sum(distances)"},{"question":"You are working on a searchable dictionary application that allows users to look up the definition of words. Each word in the dictionary is associated with a unique definition. One of the core features of your application is a function that processes a list of search queries and returns the corresponding definitions. However, if a word in the search query list is not found in the dictionary, the result should indicate that the word is missing. Write a function that takes two inputs: 1. A dictionary containing words and their corresponding definitions. 2. A list of search queries. The function should return a list of results where each result is either the definition of the queried word if it is found in the dictionary or the string \\"Word not found\\" if it is not. Input The first line of input contains N (1 ≤ N ≤ 100), the number of words in the dictionary. Each of the following N lines contains a word followed by its definition. The next line contains Q (1 ≤ Q ≤ 50), the number of search queries. Each of the following Q lines contains a word to be searched. Output Print Q lines, each containing either the definition of the word or \\"Word not found\\". Example Input 3 apple A fruit that grows on trees. banana A long, curved fruit with a yellow skin. car A vehicle that runs on roads. 2 apple orange Output A fruit that grows on trees. Word not found Input 4 cat A small domesticated carnivorous mammal with soft fur. dog A domesticated carnivorous mammal that typically has a long snout. bird A warm-blooded egg-laying vertebrate distinguished by feathers. fish A limbless cold-blooded vertebrate animal with gills and fins living in water. 3 rabbit dog fish Output Word not found A domesticated carnivorous mammal that typically has a long snout. A limbless cold-blooded vertebrate animal with gills and fins living in water. Note In the first example, \\"apple\\" is found in the dictionary and its definition is returned. \\"orange\\" is not found in the dictionary, so \\"Word not found\\" is returned. In the second example, \\"rabbit\\" is not found in the dictionary, so \\"Word not found\\" is returned. \\"dog\\" and \\"fish\\" are found in the dictionary, so their definitions are returned.","solution":"def searchable_dictionary(dictionary, queries): Returns a list of definitions for the given queries based on the dictionary. Parameters: dictionary (dict): A dictionary containing words and their definitions. queries (list): A list of words to be searched. Returns: list: A list of results where each result is either the definition of the queried word if it is found in the dictionary or \\"Word not found\\" if it is not. results = [] for query in queries: results.append(dictionary.get(query, \\"Word not found\\")) return results"},{"question":"You have been given a list of different vehicles and their corresponding maximum speeds. The data is provided in the form of a JSON object. Your task is to sort the vehicles based on their maximum speed in descending order and print the names of the vehicles in this sorted order. Each vehicle has a unique name and its maximum speed is provided in kilometers per hour (km/h). Input: - A JSON object where keys are vehicle names (strings) and values are their maximum speeds (integers). Output: - A list of vehicle names (strings) sorted by their maximum speeds in descending order. If two vehicles have the same maximum speed, their order in the output list does not matter. Example: Input: ```json { \\"Car\\": 150, \\"Bike\\": 120, \\"Truck\\": 100, \\"Motorcycle\\": 130, \\"Bicycle\\": 30 } ``` Output: ``` [\\"Car\\", \\"Motorcycle\\", \\"Bike\\", \\"Truck\\", \\"Bicycle\\"] ``` Guidelines: 1. Parse the input JSON object. 2. Sort the vehicles by their maximum speed in descending order. 3. Print the sorted list of vehicle names.","solution":"import json def sort_vehicles_by_speed(vehicle_json): Sorts vehicles by their maximum speed in descending order. Parameters: vehicle_json (str): A JSON string where keys are vehicle names and values are their maximum speeds Returns: list: A list of vehicle names sorted by their maximum speed in descending order vehicle_dict = json.loads(vehicle_json) sorted_vehicles = sorted(vehicle_dict.items(), key=lambda x: x[1], reverse=True) return [vehicle[0] for vehicle in sorted_vehicles]"},{"question":"In a large magic forest, there are M trees each with a certain height. Wizards want to cut down some trees so that the heights of the remaining trees form a strictly increasing sequence. Determine the maximum number of trees that can be left standing after removal. The height of each tree is given by an array `heights` of size M, where heights[i] is the height of the i-th tree. Input - The first line contains an integer M (1 ≤ M ≤ 100,000), representing the number of trees. - The second line contains M space-separated integers, where the i-th integer is the height of the i-th tree (1 ≤ heights[i] ≤ 1,000,000). Output - Output a single integer, the maximum number of trees that can be left standing in a strictly increasing order. Examples Input 5 3 1 4 1 5 Output 3 Input 4 7 7 7 7 Output 1 Explanation In the first example, one possible sequence of trees that can be left standing is [1, 4, 5], resulting in 3 trees. In the second example, since all tree heights are the same, only one tree can remain in an increasing order.","solution":"def max_trees_standing(heights): Returns the maximum number of trees that can be left standing after removal such that the heights of the remaining trees form a strictly increasing sequence. import bisect if not heights: return 0 # This will store the end elements of potential increasing subsequences subseq_ends = [] for height in heights: # Find the position to replace or append the current height pos = bisect.bisect_left(subseq_ends, height) if pos < len(subseq_ends): subseq_ends[pos] = height else: subseq_ends.append(height) return len(subseq_ends)"},{"question":"Farmer Bob owns a rectangular farm represented by an M x N grid of cells. Each cell on this grid can either contain a crop or be empty. Farmer Bob wants to know the size of the largest plot of contiguous cells that contain crops. Two cells are contiguous if they share a common side (up, down, left, or right). Your task is to write a program that calculates the size of the largest contiguous plot of crops on Farmer Bob\'s farm. Input The first line contains two integers M and N (1 ≤ M, N ≤ 1000) which represent the number of rows and columns of the farm grid. The next M lines contain N characters each, where each character is either \'.\' (denoting an empty cell) or \'*\' (denoting a cell with a crop). Output Print the size of the largest contiguous plot of crops. Examples Input 4 4 **.. *.** **.* ..** Output 5 Input 3 3 *.* .*. *.* Output 1","solution":"def largest_contiguous_plot(m, n, farm): Calculates the size of the largest contiguous plot of crops. Parameters: m (int): number of rows n (int): number of columns farm (list): MxN grid of characters Returns: int: size of the largest contiguous plot of crops def bfs(x, y): queue = [(x, y)] visited[x][y] = True count = 0 while queue: cx, cy = queue.pop(0) count += 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and farm[nx][ny] == \'*\': visited[nx][ny] = True queue.append((nx, ny)) return count visited = [[False] * n for _ in range(m)] max_size = 0 for i in range(m): for j in range(n): if farm[i][j] == \'*\' and not visited[i][j]: max_size = max(max_size, bfs(i, j)) return max_size"},{"question":"Riya and Sam are playing a game with an array of integers. The game progresses turn by turn, with Riya moving first. Given an array of n integers, a move consists of selecting two distinct elements in the array and removing them. The game continues until fewer than two elements remain in the array. The player who is unable to make a move loses the game. Both players play optimally. Determine who will win the game. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 100) — the number of elements in the array. The second line of each test case contains n space-separated integers a1, a2, ..., an (-10^3 ≤ ai ≤ 10^3) — the elements of the array. Output For each test case, if Riya wins the game, print \\"Riya\\", otherwise print \\"Sam\\" (without the quotes). Example Input 3 4 1 2 3 4 5 10 20 30 40 50 2 -1 -2 Output Sam Riya Riya Note In the first test case, one possible sequence of moves can be Riya removes 1 and 2. Sam removes 3 and 4. Sam wins since Riya has no moves left.","solution":"def determine_winner(test_cases): results = [] for n, array in test_cases: # If the number of elements is even, Sam wins (Riya goes first) # If the number of elements is odd, Riya wins (Riya goes first) if n % 2 == 0: results.append(\\"Sam\\") else: results.append(\\"Riya\\") return results"},{"question":"You are given an array of integers representing the heights of buildings in a row, and an integer `L` representing the maximum number of buildings you can view from any position if you are standing on top of a building. From a given building position `i`, you can view another building if it is within the range `[i-L, i+L]` and is less than or equal to the height of the current building. Write a function `maxViewableBuildings(heights: List[int], L: int) -> int` that returns the maximum number of buildings you can view from any one building position, including the building you are standing on. # Function Signature ```python def maxViewableBuildings(heights: List[int], L: int) -> int: ``` # Input - `heights` (List[int]): An array of integers (1 ≤ heights.length ≤ 10000, 1 ≤ heights[i] ≤ 1000) representing the heights of the buildings. - `L` (int): The maximum number of buildings you can view to the left and right of a given building (1 ≤ L ≤ heights.length). # Output - `int`: Maximum number of buildings that can be viewed from any building including itself. # Example Input: ```python heights = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3] L = 2 ``` Output: ``` 5 ``` Explanation: From the building at index 4 (height 5), you can view the buildings at indices 2, 3, 4, 5, and 6 because they fall within the range 2 to 6 and do not exceed the height of the building at index 4. # Notes - Ensure that your solution efficiently processes large inputs. - Consider edge cases such as buildings of the same height and buildings forming a plateau.","solution":"from typing import List def maxViewableBuildings(heights: List[int], L: int) -> int: n = len(heights) max_count = 0 for i in range(n): count = 1 # start by including the current building itself for j in range(1, L+1): if i - j >= 0 and heights[i - j] <= heights[i]: count += 1 if i + j < n and heights[i + j] <= heights[i]: count += 1 max_count = max(max_count, count) return max_count"},{"question":"You are a member of a team developing a new software application. Your task is to implement a feature that monitors the application\'s memory usage. Specifically, you need to track the maximum memory usage over a series of operations and return the exact time (operation number) at which the maximum memory usage first occurs. You will receive a list of integers representing the memory usage in megabytes after each operation. The operations are performed sequentially, and you need to output the 1-based index of the operation where the maximum memory usage is first recorded. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of operations. The second line contains n space-separated integers m1, m2, ..., mn (0 ≤ mi ≤ 10^9), representing the memory usage after each operation. Output Output a single integer — the 1-based index of the operation where the maximum memory usage first occurred. Examples Input 5 10 20 30 20 30 Output 3 Input 7 5 4 8 3 8 9 2 Output 6 Input 4 12 7 12 6 Output 1 Note In the first example, the memory usage peaks at 30 megabytes, and this occurs first after the third operation. In the second example, the maximum memory usage is 9 megabytes, which occurs first after the sixth operation. In the third example, the maximum memory usage is 12 megabytes, which first occurs after the first operation. Your task is to write a program to solve this problem.","solution":"def find_first_max_memory_index(n, memory_usages): Returns the 1-based index of the operation where the maximum memory usage first occurred. :param n: Int - the number of operations. :param memory_usages: List[Int] - the memory usages after each operation. :return: Int - 1-based index of the operation where the maximum memory usage first occurred. max_memory = -1 max_index = -1 for i in range(n): if memory_usages[i] > max_memory: max_memory = memory_usages[i] max_index = i return max_index + 1"},{"question":"You are organizing a party and you want to divide the guests into multiple tables for dinner. Each guest i has a specific level of sociability `s_i`, which represents how well they can engage in a conversation. You want to arrange the guests in such a way that each table has roughly the same overall level of sociability. Specifically, given the number of guests n and their sociability levels, you need to divide the guests into k tables such that the difference between the total sociability of the most sociable table and the least sociable table is minimized. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of guests and the number of tables. The second line contains n integers: s_1, s_2, ..., s_n (1 ≤ s_i ≤ 1000) — the sociability levels of the guests. Output Print one integer — the minimum possible difference between the total sociability of the most sociable table and the least sociable table after dividing all the guests into k tables. Example Input 6 3 10 20 30 20 10 40 Output 10 Note In the example, one optimal way to divide guests would be: - Table 1: [10, 40] (total sociability: 50) - Table 2: [20, 30] (total sociability: 50) - Table 3: [10, 20] (total sociability: 30) The difference between the most sociable table (50) and the least sociable table (30) is 20. Another optimal way would be: - Table 1: [10, 30] (total sociability: 40) - Table 2: [20, 10] (total sociability: 30) - Table 3: [20, 40] (total sociability: 60) The difference between the most sociable table (60) and the least sociable table (30) is 30. So, the minimum difference in this example is 10.","solution":"def min_sociability_difference(n, k, sociabilities): Splits guests into k tables such that the difference between the most sociable table and the least sociable table is minimized. # Sort the sociability list in descending order sociabilities.sort(reverse=True) # Initialize a list to hold total sociability of each table table_sociabilities = [0] * k # Distribute guests to the tables to minimize the max difference for s in sociabilities: # Assign the current guest to the table with the smallest current sociability table_sociabilities.sort() table_sociabilities[0] += s return max(table_sociabilities) - min(table_sociabilities) # Example usage # n = 6, k = 3 # sociabilities = [10, 20, 30, 20, 10, 40] # min_sociability_difference(6, 3, [10, 20, 30, 20, 10, 40]) should output 10"},{"question":"Write a program that simulates a simple text editor with the following operations: * append(w): Append the string w to the end of the current text. * delete(k): Delete the last k characters from the current text. * print(k): Output the kth character of the current text. * undo(): Undo the last append or delete operation. Constraints * 1 ≤ q ≤ 100000 * The string w has length ≤ 100 * The integer k is guaranteed to be valid for the current text Input q operation1 operation2 : operationq The first line contains an integer q, the number of operations. Then, the ith operation operationi is given in the following format: **append w** or **delete k** or **print k** or **undo** Output For each print operation, print the corresponding character. Examples Input 8 append abc print 3 delete 3 append xy print 2 undo print 2 undo Output c y c","solution":"class SimpleTextEditor: def __init__(self): self.text = \\"\\" self.history = [] def append(self, w): self.history.append((self.text,)) self.text += w def delete(self, k): self.history.append((self.text,)) self.text = self.text[:-k] def print_char(self, k): print(self.text[k - 1]) def undo(self): if self.history: self.text = self.history.pop()[0]"},{"question":"Given an integer array `arr` of size `n`, write a function that sorts the array in such a way that even numbers appear before all the odd numbers while maintaining the relative order of both the even and odd numbers. # Input - The first line contains a single integer `n` (1 ≤ `n` ≤ 1000) — the size of the array. - The second line contains `n` space-separated integers `arr[i]` (0 ≤ `arr[i]` ≤ 1000) — the elements of the array. # Output - Output the array after sorting as described in a single line of space-separated integers. # Examples Input ``` 5 3 1 2 4 5 ``` Output ``` 2 4 3 1 5 ``` Input ``` 8 1 2 3 4 5 6 7 8 ``` Output ``` 2 4 6 8 1 3 5 7 ``` # Notes - The relative order of both the even and odd numbers should be preserved from the input array. - No additional constraints are provided on the content of the array apart from its size and elements\' value.","solution":"def sort_array_by_parity(arr): This function sorts the array such that even numbers come before odd numbers, while maintaining the relative order of both even and odd numbers. even_numbers = [num for num in arr if num % 2 == 0] odd_numbers = [num for num in arr if num % 2 != 0] return even_numbers + odd_numbers"},{"question":"Jenny is learning about arrays and numbers that satisfy specific conditions. She is fascinated by sequences where each element is the sum of the two preceding elements, similar to the Fibonacci sequence but with a unique twist. Given an array of integers, Jenny wants to determine if there exists a contiguous subarray whose elements form a sequence where each element is the sum of the two preceding ones. For an array to qualify, it must have at least three elements, and for any three consecutive elements a, b, and c in this subarray, the condition a + b = c should hold true. Write a program to help Jenny determine if such a contiguous subarray exists within the given array. Input The first line contains the single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The next line contains n space-separated integers — the elements of the array. Each element is between -10000 and 10000, inclusive. Output Print \\"YES\\" if there exists a contiguous subarray of at least length 3 that satisfies the condition. Otherwise, print \\"NO\\". Examples Input 8 1 2 3 2 4 6 8 14 Output YES Input 5 5 7 9 -4 11 Output NO Note In the first example, the subarray [2, 4, 6] satisfies the condition (2 + 4 = 6), so the answer is YES. In the second example, no contiguous subarray of length at least 3 satisfies the condition, so the answer is NO.","solution":"def has_fibonacci_like_subarray(n, arr): Determines if a contiguous subarray exists within the given array where each element is the sum of the two preceding ones. Parameters: n (int): Number of elements in the array arr (list): List of integers Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" for i in range(n - 2): if arr[i] + arr[i+1] == arr[i+2]: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence of numbers representing the deadlines of multiple tasks, where each number corresponds to the number of days remaining until a task\'s deadline. You need to complete each task before its deadline and each task takes exactly one day to complete. You can complete at most one task per day. You are to write a program that determines the maximum number of tasks you can complete before their deadlines. Input The input consists of multiple datasets. Each dataset begins with an integer N (1 ≤ N ≤ 1000), denoting the number of tasks. The next line contains N integers, Ai (1 ≤ Ai ≤ 1000), each representing the number of days remaining until the deadline of the i-th task. The input is terminated by a line with a single zero. This is not part of any dataset and should not be processed. Output For each dataset, output the maximum number of tasks you can complete before their deadlines in one line. Example Input 5 4 3 1 2 5 6 2 2 2 2 2 2 5 1 2 3 4 5 0 Output 5 2 5","solution":"def max_tasks(datasets): Returns the list of maximum number of tasks that can be completed before their deadlines for each dataset. results = [] for dataset in datasets: N, deadlines = dataset deadlines.sort() day = 0 completed_tasks = 0 for deadline in deadlines: day += 1 if day <= deadline: completed_tasks += 1 else: break results.append(completed_tasks) return results def process_input(input_data): Processes the input data and returns a list of datasets. datasets = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): N = int(lines[i].strip()) if N == 0: break deadlines = list(map(int, lines[i + 1].strip().split())) datasets.append((N, deadlines)) i += 2 return datasets"},{"question":"A group of friends are playing a game where they have to form words using a set of given letters. However, the formed word must not contain any repeating characters. Given a string consisting of only lowercase letters, determine if it\'s possible to form a word using some or all of those letters such that there are no repeating characters. You need to write a program that will determine for each given string whether or not it\'s possible to form such a word. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S, which consists of only lowercase letters. Output: For each test case, print \\"YES\\" if it\'s possible to form a word with no repeating characters, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 30 SAMPLE INPUT 3 apple orange balloon SAMPLE OUTPUT NO YES NO Explanation: In the first case, \\"apple\\" contains the letter \'p\' twice, hence it\'s not possible to form a word without repeating characters. In the second case, \\"orange\\" contains all unique letters, so it\'s possible to form a word without repeating characters. In the third case, \\"balloon\\" contains the letters \'l\' and \'o\' multiple times, hence it\'s not possible to form a word without repeating characters.","solution":"def can_form_unique_word(string): Determine if a word with no repeating characters can be formed from the given string. return \\"YES\\" if len(set(string)) == len(string) else \\"NO\\" def determine_unique_words(test_cases): For each test case, determine if a word with no repeating characters can be formed. return [can_form_unique_word(string) for string in test_cases]"},{"question":"In a parallel universe, there exists a country called Bitland, which is famous for its binary operations. Bitland consists of n cities numbered from 1 to n and m one-way roads connecting some pairs of cities. Each road enables travel from city ui to city vi. King Bitwise, the ruler of Bitland, wants to construct a binary string for each city such that the strings satisfy the following properties: 1. The length of each binary string is exactly k (1 ≤ k ≤ 30). 2. For every pair of cities (u, v) connected by a road from u to v, the binary string of city u is lexicographically less than the binary string of city v. King Bitwise wants to know if it is possible to assign such binary strings to all cities. If it is possible, he also wants an example of such an assignment. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 2·105, 1 ≤ m ≤ 2·105, 1 ≤ k ≤ 30). Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — representing a one-way road from city ui to city vi. It is guaranteed that there are no self-loops and no multiple roads in the same direction between any pairs of cities. Output If such an assignment is not possible, output a single line containing the string \\"IMPOSSIBLE\\" (without quotes). Otherwise, output the string \\"POSSIBLE\\" (without quotes) on the first line. On the next n lines, output the binary string assigned to each city from 1 to n in order. Examples Input 3 2 3 1 2 2 3 Output POSSIBLE 000 001 010 Input 4 4 2 1 2 2 3 3 4 4 1 Output IMPOSSIBLE Note In the first sample, the binary strings \\"000\\", \\"001\\", and \\"010\\" are lexicographically sorted and satisfy the road connections. In the second sample, it is impossible to assign binary strings meeting the conditions as the roads form a cycle.","solution":"def assign_binary_strings(n, m, k, roads): from collections import defaultdict, deque # Create adjacency list adj = defaultdict(list) indegree = [0] * (n + 1) for u, v in roads: adj[u].append(v) indegree[v] += 1 # Topological Sort to check if the graph is a DAG topo_order = [] zero_indegree_queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) while zero_indegree_queue: node = zero_indegree_queue.popleft() topo_order.append(node) for neighbor in adj[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) if len(topo_order) != n: return (\\"IMPOSSIBLE\\",) # Assign binary strings according to topological order max_binary_number = (1 << k) - 1 # Maximum number with k bits if max_binary_number < n - 1: return (\\"IMPOSSIBLE\\",) binary_strings = [format(i, f\'0{k}b\') for i in range(n)] return (\\"POSSIBLE\\", binary_strings) # Example inputs to use for test cases example_1 = (3, 2, 3, [(1, 2), (2, 3)]) example_2 = (4, 4, 2, [(1, 2), (2, 3), (3, 4), (4, 1)]) # Results for the example inputs result_1 = assign_binary_strings(*example_1) result_2 = assign_binary_strings(*example_2)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to compute the number of pairs of indices (i, j) such that 1 ≤ i < j ≤ |s| and s[i] is not equal to s[j]. Input The first and only line contains a string s (1 ≤ |s| ≤ 2 * 10^5), where |s| is the length of the string. Output Print a single integer — the number of pairs (i, j) such that s[i] is not equal to s[j]. Examples Input abc Output 3 Input aaa Output 0 Note In the first example, all pairs (1, 2), (1, 3), and (2, 3) have different characters. In the second example, there are no pairs of indices with different characters.","solution":"def count_pairs(s): Returns the number of pairs (i, j) such that s[i] is not equal to s[j] for the given string s. n = len(s) char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Number of pairs (i, j) such that 1 ≤ i < j ≤ |s| total_pairs = n * (n - 1) // 2 # Subtract the pairs where characters are the same for count in char_count.values(): total_pairs -= count * (count - 1) // 2 return total_pairs"},{"question":"You are working on a project that requires the creation of unique identification codes for employees. Each identification code needs to follow a specific format: 1. It starts with \'EMP\' followed by a hyphen. 2. Then it should contain any combination of 6 digits. 3. Finally, it should end with an uppercase letter from \'A\' to \'Z\'. For example, valid identification codes could be \'EMP-123456Z\', \'EMP-654321A\', or \'EMP-000001B\'. Your task is to write a Python function `generate_id(exists)` that generates a valid employee ID which is not a part of the given list of existing IDs. # Input - `exists` (list of strings): A list of existing employee identification codes. It is guaranteed that this list will not have more than 1000 elements. # Output - Return a valid employee identification code in the required format which does not exist in the `exists` list. # Constraints - You may assume the `exists` list is sorted in ascending order and each identifier in the list adheres to the required format. - You may assume the resulting space for 6 digits followed by an uppercase letter is sufficiently large and will avoid clashes within the given constraints of the problem. # Example ```python exists = [\\"EMP-000001A\\", \\"EMP-000002B\\", \\"EMP-000003C\\"] print(generate_id(exists)) ``` Output: ``` A valid new employee ID like \'EMP-000001B\' that does not exist in the `exists` list. ``` # Note - You can use any method to generate the ID as long as it adheres to the format and is not in the `exists` list. - Efficiency is not a primary concern given the list size constraints, but the function should be able to handle the task in a reasonable time.","solution":"import random import string def generate_id(exists): Generates a unique employee ID which is not in the \'exists\' list. Parameters: exists (list of str): A list of existing employee identification codes Returns: str: A valid and unique employee identification code all_uppercase_letters = string.ascii_uppercase while True: random_digits = \'\'.join(random.choices(string.digits, k=6)) random_letter = random.choice(all_uppercase_letters) new_id = f\'EMP-{random_digits}{random_letter}\' if new_id not in exists: return new_id"},{"question":"A city is represented by an N x M grid, where some cells are accessible (represented by \'.\') and others are blocked (represented by \'#\'). The player starts at the top-left corner of the grid (cell (1, 1)) and wants to reach the bottom-right corner of the grid (cell (N, M)). The player can move up, down, left, or right from any accessible cell but cannot move diagonally or through blocked cells. The goal is to determine the minimum number of moves required for the player to get from the start to the finish, or determine if it is impossible to reach the destination. Write a program to solve this problem. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000) — the number of rows and columns in the grid. The next N lines each contain M characters, either \'.\' or \'#\', representing the grid. Output Output a single integer — the minimum number of moves required to reach the bottom-right corner, or -1 if it is impossible to reach the destination. Examples Input 5 6 . . . # . . . # . . # . . # # . . . . . . # . # # . . . . . Output 9 Input 3 3 . # . # # . . . . Output -1","solution":"from collections import deque def min_moves_to_reach_destination(N, M, grid): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == N-1 and c == M-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"There is a company that updates its product prices frequently. The product prices of the current and previous day are recorded in two sequences. Your task is to identify the maximum price difference for any product between the two days, considering only those products which have a higher price on the current day compared to the previous day. This information will help the company to identify the products with the highest positive price changes and better manage their inventory. Complete the function `max_price_difference` that returns the maximum price difference for the products with increased prices. If no product has a price increase, return 0. Function Signature: ```python def max_price_difference(previous_prices: List[int], current_prices: List[int]) -> int: pass ``` # Input - `previous_prices`: A list of integers, where each integer represents the price of a product on the previous day. - `current_prices`: A list of integers of the same length as `previous_prices`, where each integer represents the price of the same product on the current day. # Output - An integer representing the maximum price difference for any product with increased prices. If no product has an increased price, return 0. # Constraints - Each list will contain between 1 and 10^5 integers, inclusive. - Each integer will be between 1 and 10^9, inclusive. # Example Example 1: Input: ```python previous_prices = [10, 20, 15, 8, 25] current_prices = [12, 18, 15, 10, 30] ``` Output: ```python 5 ``` Explanation: The product price changes are [2, -2, 0, 2, 5]. The maximum price difference is 5 (from price 25 to 30). Example 2: Input: ```python previous_prices = [5, 5, 5] current_prices = [5, 5, 5] ``` Output: ```python 0 ``` Explanation: There are no products with a higher price on the current day compared to the previous day, so the output is 0.","solution":"from typing import List def max_price_difference(previous_prices: List[int], current_prices: List[int]) -> int: max_difference = 0 for prev, curr in zip(previous_prices, current_prices): if curr > prev: max_difference = max(max_difference, curr - prev) return max_difference"},{"question":"In a mythical kingdom, there are n villages connected by n-1 roads, making up a tree structure. Each village is labeled from 1 to n. The king wants to set up a courier system to facilitate communication between the villages. The courier system is designed so that every village has exactly one courier, and each courier can only travel to an adjacent village (i.e., along the roads connecting them). The king decides to establish a headquarters in one of the villages. From this headquarters, the king can launch couriers to visit other villages. The time it takes for a courier to reach a village is the distance (number of roads) from the headquarters to that village. The king needs your help to determine the maximum distance from the headquarters to any other village, given that he places the headquarters optimally. Input The first line of input contains a single integer n (2 ≤ n ≤ 100 000) — the number of villages. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing a road connecting village u and village v. Output A single line of output should contain one integer — the minimum possible maximum distance from the headquarters to any other village if the headquarters is placed optimally. Examples Input 4 1 2 2 3 3 4 Output 2 Input 6 1 2 1 3 3 4 3 5 4 6 Output 2 Note In the first example, if the headquarters is placed in village 2 or village 3, the maximum distance to any other village is 2. In the second example, placing the headquarters in village 3 minimizes the maximum distance to 2, as villages 1, 2, 4, and 5 are 1 distance away, while village 6 is 2 distances away.","solution":"from collections import deque def find_furthest_node(n, graph, start): Perform BFS to find the furthest node from the start node. Returns the node and its distance from the start. visited = [False] * (n + 1) queue = deque([(start, 0)]) # (current_node, current_distance) visited[start] = True furthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() if distance > max_distance: max_distance = distance furthest_node = node for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return furthest_node, max_distance def minimum_max_distance(n, roads): Returns the minimum possible maximum distance from an optimally placed headquarters. # Build the graph using adjacency list graph = [[] for _ in range(n + 1)] for u, v in roads: graph[u].append(v) graph[v].append(u) # Perform BFS from an arbitrary node to find one endpoint of the longest path arbitrary_start = 1 furthest_from_start, _ = find_furthest_node(n, graph, arbitrary_start) # Perform BFS from the furthest node found to find the actual longest path in the tree furthest_from_furthest, max_distance = find_furthest_node(n, graph, furthest_from_start) # The minimum possible maximum distance from an optimally placed headquarters # is half of the longest path (rounded up) return (max_distance + 1) // 2"},{"question":"Given an array A of size N and an integer K. You need to create a new array B of size N+K. The first N elements of B should be same as A, and the next K elements of B should be the cumulative sum of the elements from B[0] to B[N+K-2]. For example, if A = [1, 2, 3] and K = 2, then B should be [1, 2, 3, 6, 12]. Input: The first line of input contains two integers, N and K. The next line contains N space-separated integers denoting the elements of array A. Output: Print the elements of array B. Constraints: 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 3 2 1 2 3 SAMPLE OUTPUT 1 2 3 6 12 Explanation Array A is [1, 2, 3]. Step 1: The first three elements of B is [1, 2, 3]. Step 2: The fourth element is the sum of the first three elements: 1 + 2 + 3 = 6. Step 3: The fifth element is the sum of the first four elements: 1 + 2 + 3 + 6 = 12. So, the resultant array B will be [1, 2, 3, 6, 12].","solution":"def construct_cumulative_array(A, N, K): Creates a new array B of size N+K with the first N elements same as A, and the next K elements as the cumulative sum of the elements from B[0] to B[N+K-2]. # Initialize B with the first N elements same as A B = A[:] # Fill the remaining K elements in B for i in range(K): cum_sum = sum(B) B.append(cum_sum) return B"},{"question":"You are given a list of strings and another string called `target`. Your task is to write a program to determine if the `target` string can be formed by concatenating any combination of strings from the given list (repetitions allowed). Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the size of the list. Each of the next `n` lines contains a single string `s_i` (1 ≤ |s_i| ≤ 100) — a string from the list. The last line contains a single string `target` (1 ≤ |target| ≤ 1000). Output Print \\"Yes\\" if the target string can be formed by concatenating any combination of strings from the list. Otherwise, print \\"No\\". Examples Input ``` 3 ab ba a aba ``` Output ``` Yes ``` Input ``` 2 abc def abcdefg ``` Output ``` No ``` Note In the first example, the `target` string \\"aba\\" can be formed by concatenating the strings \\"ab\\" and \\"a\\" from the list. In the second example, the `target` string \\"abcdefg\\" cannot be formed by any combination of the given strings.","solution":"def can_form_target(n, str_list, target): Returns \\"Yes\\" if the target string can be formed by concatenating any combination of strings from the list (repetitions allowed). Otherwise returns \\"No\\". dp = [False] * (len(target) + 1) dp[0] = True for i in range(1, len(target) + 1): for string in str_list: if len(string) <= i and dp[i - len(string)] and target[i-len(string):i] == string: dp[i] = True break return \\"Yes\\" if dp[len(target)] else \\"No\\""},{"question":"You are tasked with designing a program to simulate an online auction. In an online auction, bidders can place bids on items within a certain timeframe. Each bid consists of the bidder\'s name and the bid amount. At the end of the auction, the highest bid wins the item. If there are multiple bids with the same highest amount, the earliest bid among them wins. Given a list of bids and their corresponding times, determine the winner of the auction for a specific item. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of bids. Each of the next n lines contains a string si (1 ≤ |si| ≤ 20) — the bidder\'s name, an integer ti (0 ≤ ti ≤ 1000000000) — the bid time in seconds since the auction started, and an integer bi (1 ≤ bi ≤ 1000000000) — the bid amount. Bidders\' names are nonempty and consist of no more than 20 lowercase Latin letters. Bids are given in arbitrary order. The last line contains a single integer t (0 ≤ t ≤ 1000000000) — the end time of the auction. Output Output the name of the winning bidder. If no bids are placed before the auction ends, output \\"No bids\\". Examples Input 5 alice 100 150 bob 200 200 carol 300 150 alice 250 200 bob 150 200 250 Output bob Input 2 alice 50 100 bob 60 100 30 Output No bids Input 3 alice 100 150 bob 200 200 carol 300 150 250 Output bob","solution":"def find_auction_winner(n, bids, t): Returns the winner\'s name in the auction or \\"No bids\\" if no valid bids exist. valid_bids = [bid for bid in bids if bid[1] <= t] if not valid_bids: return \\"No bids\\" valid_bids.sort(key=lambda x: (-x[2], x[1])) return valid_bids[0][0] # Main auction function to process input def auction(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) bids = [] for line in lines[1:n+1]: parts = line.split() name = parts[0] time = int(parts[1]) amount = int(parts[2]) bids.append((name, time, amount)) t = int(lines[n+1]) return find_auction_winner(n, bids, t)"},{"question":"B-Distinct Elements Alice and Bob play a game that involves arrays and distinct elements. Given an array `A` of `N` integers, their task is to determine the maximum number of distinct elements that can be found in any subarray of length `K`. Can you help Alice and Bob win this game by writing a function that finds the correct result? # Input Format - The first line contains an integer `N`, the number of elements in the array. - The second line contains `N` space-separated integers representing the array `A`. - The third line contains an integer `K`, the length of the subarray. # Output Format - Print a single integer representing the maximum number of distinct elements in any subarray of length `K`. # Constraints - `1 ≤ N ≤ 10^5` - `1 ≤ K ≤ N` - `1 ≤ A[i] ≤ 10^5` for all valid `i` # Example Input ``` 7 1 2 1 3 4 2 3 4 ``` Output ``` 3 ``` Explanation The subarrays of length `4` are: - [1, 2, 1, 3]: distinct elements = {1, 2, 3} (3 distinct elements) - [2, 1, 3, 4]: distinct elements = {1, 2, 3, 4} (4 distinct elements) - [1, 3, 4, 2]: distinct elements = {1, 2, 3, 4} (4 distinct elements) - [3, 4, 2, 3]: distinct elements = {2, 3, 4} (3 distinct elements) The maximum number of distinct elements in any subarray of length `4` is `4`. # Function Signature ```python def max_distinct_subarray(N: int, A: List[int], K: int) -> int: pass ``` # Notes - The solution should be efficient, considering the constraints. Specifically, aim for a time complexity of O(N) using techniques like sliding window and hashmaps.","solution":"def max_distinct_subarray(N: int, A: list[int], K: int) -> int: from collections import defaultdict if K > N: return 0 # If K is greater than N, no subarray of length K can exist max_distinct_count = 0 current_count = 0 freq_map = defaultdict(int) # Initialize the first window for i in range(K): if freq_map[A[i]] == 0: current_count += 1 freq_map[A[i]] += 1 max_distinct_count = current_count # Slide the window for i in range(K, N): # Remove the element going out of the window if freq_map[A[i - K]] == 1: current_count -= 1 freq_map[A[i - K]] -= 1 # Add the new element coming into the window if freq_map[A[i]] == 0: current_count += 1 freq_map[A[i]] += 1 if current_count > max_distinct_count: max_distinct_count = current_count return max_distinct_count"},{"question":"Mark is designing a software for a new e-commerce platform. One of the features needed is a special type of recommendations for users based on their browsing history. For any user, given a list of recently browsed product prices, he wants to recommend products in such a way that the prices of the recommended products form a strictly increasing subsequence of the maximum possible length. Given an array of integers representing the browsing history of product prices, write a program to find the length of the longest strictly increasing subsequence that can be formed from this array. A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000), the size of the array. The second line contains n integers p_1, p_2,..., p_n (1 ≤ p_i ≤ 10^9), the product prices in the browsing history. Output Output a single integer, the length of the longest strictly increasing subsequence that can be formed from the given array. Examples Input 6 10 22 9 33 21 50 Output 4 Input 5 3 10 2 1 20 Output 3 Input 4 3 2 1 0 Output 1","solution":"def length_of_lis(arr): Returns the length of the longest strictly increasing subsequence that can be formed from the given array. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"You are participating in a treasure hunt in a grid of size N x N, where each cell is either an obstacle or open space. You start at the top-left corner of the grid (cell (1,1)) and need to reach the bottom-right corner (cell (N,N)). You can move up, down, left, or right through the grid, but you cannot move through obstacles. Additionally, you have a magic wand that can transform one of the cells containing an obstacle into an open space (you can only use the wand once, or you can choose not to use it at all). You need to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner, given that you can optionally use your magic wand to remove one obstacle. Each test case guarantees that there is at least one valid path from the start to the end, either by using the wand or without using it. Constraints: - 2 leq N leq 300 - The grid contains at least one obstacle Input: The first line of the input contains an integer N, the size of the grid. The next N lines each contain N characters, where \'.\' represents an open space and \'#\' represents an obstacle. Output: Print a single integer, the minimum number of moves required to reach the bottom-right corner, factoring in the possibility of using the wand once to remove an obstacle. If it is impossible to reach the bottom-right corner, print -1. Examples: Input: 3 ..# .#. ..# Output: 4 Input: 4 .... .... .... .... Output: 6","solution":"from collections import deque def min_moves_with_magic_wand(grid): N = len(grid) if N == 0: return -1 def in_bounds(x, y): return 0 <= x < N and 0 <= y < N def bfs(start_x, start_y, can_use_wand): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start_x, start_y, 0, can_use_wand)]) visited = set((start_x, start_y, can_use_wand)) while queue: x, y, dist, wand_left = queue.popleft() if (x, y) == (N-1, N-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny): next_pos = (nx, ny, wand_left) if wand_left and grid[nx][ny] == \'#\': next_pos_with_wand = (nx, ny, False) if next_pos_with_wand not in visited: visited.add(next_pos_with_wand) queue.append((nx, ny, dist + 1, False)) if grid[nx][ny] == \'.\' and next_pos not in visited: visited.add(next_pos) queue.append((nx, ny, dist + 1, wand_left)) return -1 # No path found return bfs(0, 0, True) # Example usage # grid = [ # \\"..#\\", # \\".#.\\", # \\"..#\\" # ] # print(min_moves_with_magic_wand(grid)) # Output: 4"},{"question":"Given a string `str`, write a program to find the length of the longest substring without repeating characters. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the number of test cases. Each of the next `n` lines contains a string `str` (1 ≤ |str| ≤ 1000). Output For each test case, print the length of the longest substring without repeating characters on a single line. Example Input 3 abcabcbb bbbbb pwwkew Output 3 1 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string s. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length def process_test_cases(n, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given an n x n matrix of integers and an empty position in the matrix (denoted by coordinates x and y). Your task is to fill that empty position with the smallest non-negative integer that does not appear in its row, column, or the main diagonal (both primary and secondary) if applicable. The primary diagonal of a matrix includes all positions where the row index equals the column index (i.e., (i, i) for all i). The secondary diagonal includes all positions where the row index and column index sum up to n - 1 (i.e., (i, n-1-i) for all i). Input - The first line contains an integer n (1 ≤ n ≤ 1000), the size of the matrix. - The next n lines contain n integers each, representing the matrix. - The last line contains two integers x and y (0 ≤ x, y < n), the coordinates of the empty position, where the number at that position is -1 (i.e., matrix[x][y] = -1). Output - Output the smallest non-negative integer that does not appear in the row, column, or diagonals of the position. Examples Input: 4 1 2 3 4 2 3 -1 1 3 4 1 2 4 1 2 3 2 2 Output: 0 Input: 3 0 1 2 1 -1 0 2 0 1 1 1 Output: 3","solution":"def smallest_non_negative_integer(matrix, x, y): Returns the smallest non-negative integer that does not appear in the row, column, or diagonals (if applicable) of the position (x, y) in the given matrix. n = len(matrix) row_elements = set(matrix[x]) col_elements = set(matrix[i][y] for i in range(n)) primary_diagonal_elements = set(matrix[i][i] for i in range(n) if i != x and i != y) secondary_diagonal_elements = set(matrix[i][n-1-i] for i in range(n) if i != x and n-1-i != y) all_elements = row_elements | col_elements | primary_diagonal_elements | secondary_diagonal_elements result = 0 while result in all_elements: result += 1 return result # Example usage: # matrix = [ # [1, 2, 3, 4], # [2, 3, -1, 1], # [3, 4, 1, 2], # [4, 1, 2, 3] # ] # x, y = 2, 2 # print(smallest_non_negative_integer(matrix, x, y)) # Output: 0"},{"question":"Write a class `Spreadsheet` to represent a simple spreadsheet that supports four main operations: setting cell values, getting cell values, calculating the sum of a range of cells, and setting cell ranges. Each operation is represented by a method in the class. You should implement the following methods: - `set_cell(row, col, value)` - Sets the value of the cell at the given `row` and `col` to the specified `value`. - `get_cell(row, col)` - Returns the value of the cell at the given `row` and `col`. - `sum_range(row_start, col_start, row_end, col_end)` - Returns the sum of all cell values within the rectangular range specified by `row_start`, `col_start`, `row_end`, and `col_end`. - `set_range(row_start, col_start, row_end, col_end, value)` - Sets all cells within the rectangular range specified by `row_start`, `col_start`, `row_end`, and `col_end` to the specified `value`. Here is the template for the `Spreadsheet` class: ```python class Spreadsheet: def __init__(self, rows, cols): Initialize your data structure here. self.rows = rows self.cols = cols self.sheet = [[0] * cols for _ in range(rows)] def set_cell(self, row, col, value): Set the value of a specific cell. self.sheet[row][col] = value def get_cell(self, row, col): Get the value of a specific cell. return self.sheet[row][col] def sum_range(self, row_start, col_start, row_end, col_end): Calculate the sum of values within a rectangular range of cells. return sum(self.sheet[i][j] for i in range(row_start, row_end + 1) for j in range(col_start, col_end + 1)) def set_range(self, row_start, col_start, row_end, col_end, value): Set the value of all cells within a rectangular range. for i in range(row_start, row_end + 1): for j in range(col_start, col_end + 1): self.sheet[i][j] = value ``` # Example: ```python # Initialize a 3x3 spreadsheet spreadsheet = Spreadsheet(3, 3) # Set values spreadsheet.set_cell(0, 0, 5) spreadsheet.set_cell(0, 1, 3) spreadsheet.set_cell(0, 2, 8) spreadsheet.set_cell(1, 0, 6) spreadsheet.set_cell(2, 2, 2) # Get value of a cell print(spreadsheet.get_cell(0, 1)) # Output: 3 # Calculate sum of range print(spreadsheet.sum_range(0, 0, 1, 1)) # Output: 14 # Set range values spreadsheet.set_range(1, 1, 2, 2, 10) # Calculate sum of range after setting values print(spreadsheet.sum_range(1, 1, 2, 2)) # Output: 40 ``` # Constraints: - The number of rows and columns in the spreadsheet will not exceed 1000. - The values in the spreadsheet cells will be integers.","solution":"class Spreadsheet: def __init__(self, rows, cols): Initialize your data structure here. self.rows = rows self.cols = cols self.sheet = [[0] * cols for _ in range(rows)] def set_cell(self, row, col, value): Set the value of a specific cell. self.sheet[row][col] = value def get_cell(self, row, col): Get the value of a specific cell. return self.sheet[row][col] def sum_range(self, row_start, col_start, row_end, col_end): Calculate the sum of values within a rectangular range of cells. return sum(self.sheet[i][j] for i in range(row_start, row_end + 1) for j in range(col_start, col_end + 1)) def set_range(self, row_start, col_start, row_end, col_end, value): Set the value of all cells within a rectangular range. for i in range(row_start, row_end + 1): for j in range(col_start, col_end + 1): self.sheet[i][j] = value"},{"question":"You are developing a new communication system for a space station. The system consists of a network of nodes, each representing a communication device. There are cables connecting the nodes, enabling direct communication between them. Your task is to ensure that the communication network is robust and can tolerate failures of certain nodes. Formally: * The communication system is represented by a list of nodes and a list of undirected cables connecting the nodes. Each cable connects two distinct nodes. * A network is considered robust if, after the removal of any single node, the remaining nodes are still connected (i.e., there is a path between any two remaining nodes). * The cost of a network is the number of cables it contains. For a given network, determine if it is robust. If it is, output the cost of the network. Otherwise, output -1. Input The first line contains two space-separated integers n, m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000) – the number of nodes and the number of cables, respectively. The nodes are numbered 1 through n. Then, m lines follow. The i-th of these lines contains two space-separated integers u_i, v_i (1 ≤ u_i, v_i ≤ n) denoting a cable between nodes u_i and v_i. Output Output one line with a single integer: the cost of the network if it is robust, or -1 if it is not. Example Input 5 6 1 2 2 3 3 4 4 5 5 1 2 4 Output 6 Input 4 2 1 2 3 4 Output -1 Note In the first example, removing any single node from the network still leaves the remaining nodes connected. Hence, the network is robust and the cost is 6. In the second example, removing either nodes 1 or 2 disconnects the remaining nodes, so the network is not robust, resulting in an output of -1.","solution":"from collections import defaultdict, deque def is_robust_network(n, m, cables): Determines if the network is robust and returns the cost if it is, otherwise returns -1. :param n: Number of nodes :param m: Number of cables :param cables: List of tuples representing undirected cables between nodes :return: Cost of the network if robust, otherwise -1 if n <= 1: return -1 # Build adjacency list adj_list = defaultdict(list) for u, v in cables: adj_list[u].append(v) adj_list[v].append(u) # Function to check if the graph is connected def is_connected(excluded_node): visited = [False] * (n + 1) start_node = next(node for node in range(1, n + 1) if node != excluded_node) queue = deque([start_node]) visited[start_node] = True connected_count = 1 while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor] and neighbor != excluded_node: visited[neighbor] = True queue.append(neighbor) connected_count += 1 return connected_count == n - 1 # Check if all nodes except excluded one are visited # Check robustness by testing connectivity after excluding each node one by one for node in range(1, n + 1): if not is_connected(node): return -1 return m def communication_network_cost(n, m, connections): return is_robust_network(n, m, connections)"},{"question":"In a competitive marathon, there are n runners, and the race track is divided into m segments. The speed of each runner may vary in different segments. The time taken by the i-th runner to complete the j-th segment is given by t_{ij}. Each segment also has a difficulty level represented by d_j. The winner of the marathon is the runner who takes the least total time to complete all segments. Mappers are responsible for calculating the total time taken by each runner by considering their times for each segment and adjusting those times based on the segment\'s difficulty level. Given the time taken by each runner for each segment and the difficulty levels of the segments, determine which runner wins the marathon. If there are multiple runners with the same minimum total time, any one of them can be chosen as the winner. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of runners and the number of segments. The next n lines contain m integers each, where the j-th integer in the i-th line represents t_{ij} (1 ≤ t_{ij} ≤ 1000) — the time taken by the i-th runner to complete the j-th segment. The last line contains m integers d_1, d_2, ..., d_m (1 ≤ d_j ≤ 10) — the difficulty levels of the segments. Output Print a single integer — the 1-based index of the winning runner. Example Input 3 4 5 6 7 8 6 5 7 6 5 5 5 5 2 3 4 3 Output 3 Note In the example, the total time for each runner to complete the marathon, adjusted by the difficulty levels, is calculated as follows: - Runner 1: 5*2 + 6*3 + 7*4 + 8*3 = 10 + 18 + 28 + 24 = 80 - Runner 2: 6*2 + 5*3 + 7*4 + 6*3 = 12 + 15 + 28 + 18 = 73 - Runner 3: 5*2 + 5*3 + 5*4 + 5*3 = 10 + 15 + 20 + 15 = 60 Since Runner 3 has the least total adjusted time of 60, they are the winner.","solution":"def find_winner(n, m, times, difficulties): Determine the winner of the marathon who completes the segments in the least total adjusted time. Parameters: n (int): Number of runners m (int): Number of segments times (list of list of int): Time taken by each runner for each segment difficulties (list of int): Difficulty levels for each segment Returns: int: 1-based index of the winner total_times = [] for runner in range(n): total_time = 0 for segment in range(m): total_time += times[runner][segment] * difficulties[segment] total_times.append(total_time) winner = total_times.index(min(total_times)) + 1 return winner"},{"question":"A large event is being organized in a city with several locations connected by roads. To ensure efficient transportation of attendees, the organizers want to calculate the minimum distance required to travel between various pairs of locations. Attendees can travel in both directions along any road. Given multiple queries, each specifying two locations, the task is to determine the minimum distance between these locations. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case starts with two integers N and M (2 ≤ N ≤ 500, 1 ≤ M ≤ 1000) — the number of locations and the number of roads, respectively. The next M lines each contain three integers u, v and d (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ d ≤ 1000) — indicating that there is a road with distance d between locations u and v. The next line contains an integer Q (1 ≤ Q ≤ 200) — the number of queries. The next Q lines each contain two integers u and v (1 ≤ u, v ≤ N) — the two locations between which the minimum travel distance should be determined. Output For each query, output the minimum distance between the specified locations. If there is no path between the locations, output -1. Example Input: 1 4 4 1 2 5 2 3 6 3 4 2 1 4 9 3 1 3 2 4 1 4 Output: 11 8 9","solution":"import sys import heapq def floyd_warshall(n, graph): dist = [[float(\'inf\')] * n for _ in range(n)] for u in range(n): for v in range(n): dist[u][v] = graph[u][v] for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def find_minimum_distances(T, test_cases): results = [] for case in test_cases: N, M, roads, Q, queries = case graph = [[float(\'inf\')] * N for _ in range(N)] for i in range(N): graph[i][i] = 0 for u, v, d in roads: graph[u-1][v-1] = d graph[v-1][u-1] = d dist = floyd_warshall(N, graph) for u, v in queries: distance = dist[u-1][v-1] results.append(distance if distance != float(\'inf\') else -1) return results"},{"question":"Programmer Sasha is learning about a special kind of list manipulation language called ListLang. In ListLang, there are several operations that can be performed on lists. Each list is a sequence of integers. These operations are: 1. `append x L` - appends the integer `x` to the list `L`. 2. `extend L1 L2` - appends all items in list `L2` to the end of list `L1`. 3. `reverse L` - reverts the order of elements in the list `L`. 4. `typeof x L` - returns the type of the element at position `x` in the list `L` (either \\"int\\" if a valid index or \\"errtype\\" if the index is invalid). Sasha has provided you with a series of operations to be performed on initially empty lists. Your task is to simulate these operations and output the results for each `typeof` operation. Input The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of operations. Then follow `n` lines with one operation per line. Each operation is one of the four types specified above. When performing the `typeof x L` operation, the positions are 0-based indices. Output For each `typeof` operation, print the type of the element at position `x` in the list `L`. Examples Input 8 append 3 A append 5 A typeof 1 A typeof 2 A reverse A typeof 1 A append 7 A typeof 2 A Output int errtype int errtype Input 6 append 10 B extend B C typeof 0 B extend C B reverse C typeof 1 C Output int errtype Note In the first sample: - We start by adding 3 and 5 to list `A`, making it [3, 5]. - `typeof 1 A` is \\"int\\" because the element at index 1 is 5. - `typeof 2 A` is \\"errtype\\" because there is no index 2 in list `A`. - Reversing list `A` results in [5, 3]. - `typeof 1 A` is now \\"int\\" because the element at index 1 is 3 after the reverse. - Adding 7 to list `A` makes it [5, 3, 7]. - `typeof 2 A` is \\"int\\" because the element at index 2 is 7. In the second sample: - We start by adding 10 to list `B`, making it [10]. - Extending `B` with `C` doesn\'t change `B` as `C` is empty. - `typeof 0 B` is \\"int\\" because the element at index 0 is 10. - Extending `C` with `B` makes `C` [10]. - Reversing `C` results in [10] (no change). - `typeof 1 C` is \\"errtype\\" because there is no index 1 in list `C`.","solution":"def perform_operations(operations): Perform operations as described in the problem and return the results of `typeof` operations. lists = {} results = [] for operation in operations: op = operation.split() cmd = op[0] if cmd == \'append\': _, x, L = op x = int(x) if L not in lists: lists[L] = [] lists[L].append(x) elif cmd == \'extend\': _, L1, L2 = op if L1 not in lists: lists[L1] = [] if L2 in lists: lists[L1].extend(lists[L2]) elif cmd == \'reverse\': _, L = op if L in lists: lists[L].reverse() elif cmd == \'typeof\': _, x, L = op x = int(x) if L in lists and 0 <= x < len(lists[L]): results.append(\\"int\\") else: results.append(\\"errtype\\") return results"},{"question":"Peter is working on a complicated text editor that includes an auto-completion feature. The feature provides suggestions for possible completions when the user starts typing a word. To implement this, Peter decided to use a prefix tree (Trie) to store a large dictionary of words. Given a list of words and a prefix, your task is to output all words in the list that start with the given prefix. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the number of words in the list. Each of the next n lines contains a single word consisting of lowercase English letters. The last line contains a single string representing the prefix. Output Print the words from the list that start with the given prefix, each on a new line. The output words should be printed in the same order as they appear in the input list. If no words match the given prefix, print \\"No words found\\". Examples Input 5 apple appetizer application banana apply app Output apple appetizer application apply Input 3 hello world help wo Output world Input 4 dog deer deal dance cat Output No words found","solution":"def find_words_with_prefix(words, prefix): Returns a list of words from the input list that start with the given prefix. If no words are found with the given prefix, returns \\"No words found\\". result = [word for word in words if word.startswith(prefix)] return result if result else [\\"No words found\\"]"},{"question":"You are given a rectangular grid of size N x M consisting of cells, where each cell is either land or water. \'L\' represents land and \'W\' represents water. You can travel from one cell to another if they share a common side and both are land cells. Your task is to run a program that identifies all the distinct islands in the grid and returns the number of such islands. An island is defined as a maximal group of connected land cells. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` N M grid[1][1] grid[1][2] ... grid[1][M] grid[2][1] grid[2][2] ... grid[2][M] ... grid[N][1] grid[N][2] ... grid[N][M] ``` Here, N and M are integers where (1 ≤ N, M ≤ 500), denoting the number of rows and columns respectively. Each grid[i][j] is either \'L\' or \'W\'. The input ends with EOF. Output For each dataset, output the number of distinct islands present in the grid. Example Input 3 4 L W L W L L W W W W L L 5 5 L L W W W L W W W W W W L L L L L W W L L W W L L Output 3 3","solution":"def count_islands(grid, n, m): Counts the number of distinct islands in the grid. :param grid: List of list of characters (\'L\' and \'W\') representing the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :return: The number of distinct islands. def dfs(x, y): # Stack for DFS stack = [(x, y)] # Explore all connected \'L\' cells while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'L\': stack.append((nx, ny)) grid[nx][ny] = \'V\' # Mark as visited num_islands = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': num_islands += 1 dfs(i, j) return num_islands def main(input_data): Parses the input data to find number of islands in each dataset. :param input_data: A multiline string where each dataset ends with EOF. :return: A list of integers where each entry is number of islands in respective dataset. data = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(data): # Read dimensions n, m = map(int, data[index].strip().split()) index += 1 # Read grid grid = [] for i in range(n): grid.append(data[index].strip().split()) index += 1 # Count islands results.append(count_islands(grid, n, m)) return results"},{"question":"Alice has a peculiar collection of strings. She calls a string *special* if it is a substring of at least one other string in her collection but is not a prefix of any string, including itself. Given a collection of n strings, Alice wants to determine the number of special strings in her collection. Your task is to help Alice by writing a program that counts the number of special strings in her collection. Input: - The first line contains an integer t (1 ≤ t ≤ 100) denoting the number of test cases. - Each test case starts with an integer n (1 ≤ n ≤ 2000) representing the number of strings in the collection. - The next n lines each contain a non-empty string of length between 1 and 1000 consisting of lowercase alphabetical characters (‘a’-‘z’). Output: - For each test case, output a single integer denoting the number of special strings. Example: Input: 2 3 abc bc abcd 4 hello hell ell ohell Output: 1 2 Note: For the first test case, \\"bc\\" is the only special string as it appears in \\"abc\\" and \\"abcd\\" but it is not a prefix to any of the strings. For the second test case, \\"hell\\" is a prefix and not special, \\"hello\\" is not a substring of any other string, \\"ell\\" appears in both \\"hello\\" and \\"ohell\\" but is not a prefix, and \\"ohell\\" appears in some other string but is not a prefix. So, the count of special strings is 2.","solution":"def count_special_strings(t, test_cases): results = [] for case in test_cases: n = case[0] strings = case[1] special_count = 0 for i in range(n): is_special = False for j in range(n): if i != j and strings[i] in strings[j] and not strings[j].startswith(strings[i]): is_special = True break if is_special: special_count += 1 results.append(special_count) return results"},{"question":"In a faraway land, there is a magical tree where each node has a distinct number. The tree is rooted at node 1 and has N nodes. The king of this land, fascinated by the sum of the nodes in any subtree, has decided to find out the maximum sum among all possible subtrees in the tree. You are given an undirected tree with N nodes, and your task is to compute the maximum sum of any subtree in the tree. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Value of each node ≤ 10^4 Input: - The first line contains an integer N, the number of nodes. - The second line contains N space-separated integers, where the i-th integer represents the value of node i. - Each of the following N-1 lines contains two integers u and v indicating an edge between node u and node v. Output: - Output a single line containing the maximum sum of any subtree in the tree. Example: Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output: 15 Explanation: The subtree rooted at node 3 includes all nodes {3, 4, 5}, and the sum is 3 + 4 + 5 + 1 + 2 = 15, which is the maximum possible.","solution":"def maximum_subtree_sum(N, node_values, edges): from collections import defaultdict def dfs(node, parent): subtotal = node_values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtotal += dfs(neighbor, node) subtree_sums[node] = subtotal return subtotal # Initialize tree representation and other needed variables tree = defaultdict(list) subtree_sums = [0] * (N + 1) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform DFS to calculate subtree sums starting from the root (node 1) dfs(1, -1) # Return the maximum subtree sum found return max(subtree_sums[1:]) # Example usage N = 5 node_values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(maximum_subtree_sum(N, node_values, edges)) # Output: 15"},{"question":"You are given a binary tree where each node has an integer value. The task is to calculate the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node, following the parent-child connections. The path must contain at least one node and does not need to go through the root node. Write a function to find the maximum path sum in the binary tree. Constraints * The number of nodes in the tree is in the range [1, 3 * 10^4]. * -1000 ≤ Node.val ≤ 1000 ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Input The function `maxPathSum` receives a binary tree root node. Output Return an integer which is the maximum path sum. Examples Input ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) ``` Output ```python 6 ``` Explanation In this binary tree, one of the best paths can be 2 -> 1 -> 3, with a path sum of 6. Input ```python root = TreeNode(-10) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) ``` Output ```python 42 ``` Explanation In this binary tree, one of the best paths can be 15 -> 20 -> 7, with a path sum of 42.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): Returns the maximum path sum in the binary tree. def helper(node): nonlocal max_sum if not node: return 0 # Recursively get the maximum path sum for the left and right subtrees left_max = max(helper(node.left), 0) right_max = max(helper(node.right), 0) # Update the global maximum path sum if the path through the current # node surpasses the known maximum current_max = node.val + left_max + right_max max_sum = max(max_sum, current_max) # Return the maximum sum of paths that include the current node and # one of its subtrees return node.val + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"We have two sets of dishes: Set A and Set B. Set A contains N dishes and Set B contains M dishes. It takes A_i minutes to wash the i-th dish from Set A (1 <= i <= N), and B_i minutes to wash the i-th dish from Set B (1 <= i <= M). Consider the following action: * Choose a set with a dish remaining, wash the topmost dish in that set, and remove it from the set. How many dishes can we wash at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than washing. Constraints * 1 <= N, M <= 200,000 * 1 <= K <= 10^9 * 1 <= A_i, B_i <= 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N M K A_1 A_2 ... A_N B_1 B_2 ... B_M Output Print an integer representing the maximum number of dishes that can be washed. Examples Input 3 4 240 60 90 120 80 150 80 150 Output 3 Input 3 4 730 60 90 120 80 150 80 150 Output 7 Input 5 4 1 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 Output 0","solution":"def max_dishes_washed(N, M, K, A, B): A.sort() B.sort() prefix_sum_A = [0] * (N + 1) prefix_sum_B = [0] * (M + 1) for i in range(1, N + 1): prefix_sum_A[i] = prefix_sum_A[i - 1] + A[i - 1] for i in range(1, M + 1): prefix_sum_B[i] = prefix_sum_B[i - 1] + B[i - 1] max_dishes = 0 j = M for i in range(N + 1): if prefix_sum_A[i] <= K: while j > 0 and prefix_sum_A[i] + prefix_sum_B[j] > K: j -= 1 max_dishes = max(max_dishes, i + j) return max_dishes"},{"question":"You are given an N x N grid and a series of queries. The grid initially contains only 0s. Each query consists of three integers x, y, and v which indicates that the value at cell (x, y) should be changed to v. After processing all the queries, you are required to find the number of distinct values present in the grid. You need to help Gerald process these queries efficiently and output the total number of distinct values in the grid after all queries have been applied. Input The first line contains two integers N (1 ≤ N ≤ 1000) — the size of the grid, and Q (1 ≤ Q ≤ 100000) — the number of queries. Each of the next Q lines contains three integers x, y, and v (1 ≤ x, y ≤ N, 0 ≤ v ≤ 1000) describing a query. The cells in the grid are 1-indexed. Output Print one integer — the number of distinct values present in the grid after applying all queries. Example Input 3 4 1 1 5 2 2 5 3 3 1 2 2 0 Output 3","solution":"def process_queries(N, Q, queries): Processes a series of queries on an N x N grid and returns the number of distinct values in the grid after all queries are applied. Parameters: N (int): Size of the grid (NxN) Q (int): Number of queries queries (list of tuples): Each tuple contains three integers (x, y, v) Returns: int: Number of distinct values in the grid grid = [[0] * N for _ in range(N)] # Initialize the grid with 0s values_set = set([0]) for x, y, v in queries: grid[x-1][y-1] = v # Apply the query values_set.add(v) # Add the value to the set # Return the number of distinct values return len(values_set)"},{"question":"Given two nonnegative integers l and r (l ≤ r), and an integer k, you are to find the maximum sum of any subarray of length k within the inclusive range [l, r]. A subarray is any contiguous portion of an array. Constraints * 0 ≤ l ≤ r ≤ 10^6 * 1 ≤ k ≤ (r - l + 1) * Each element in the array has a value between 0 and 1000. Input The input is given from Standard Input in the following format: ``` l r k ``` Output Print the maximum sum of any subarray of length k within the inclusive range [l, r]. Examples Input ``` 5 10 3 ``` Output ``` 2997 ``` Input ``` 0 5 2 ``` Output ``` 1995 ``` Input ``` 3 3 1 ``` Output ``` 999 ```","solution":"def max_sum_subarray(l, r, k): Returns the maximum sum of any subarray of length k within the inclusive range [l, r]. # Since the maximum value of any element is 1000 and the array has contiguous elements # with 1000 as a placeholder for each element, we can calculate sum of subarrays directly # Maximum sum subarray of length k within range [l, r] will have all elements as 1000 max_value = 1000 max_sum = max_value * k return max_sum"},{"question":"Create a function that checks whether a string is a valid identifier in a programming language. A valid identifier must adhere to the following rules: 1. The first character must be a letter (a-z, A-Z) or an underscore (_). 2. Subsequent characters may also include digits (0-9). 3. The identifier must not be a reserved keyword in the programming language. Assume the programming language has the following reserved keywords: `if`, `else`, `while`, `for`, `return`, `True`, `False`, `None`, `in`, `not`, `and`, `or`, `is`, `def`, `class`. Write a function `is_valid_identifier(identifier: str) -> bool` and determine whether the input `identifier` is valid according to the rules. Function Signature: ```python def is_valid_identifier(identifier: str) -> bool: ``` # Input - `identifier` is a non-empty string with a length of at most 100 characters. # Output - Return `True` if `identifier` is a valid identifier, otherwise return `False`. # Examples ```python assert is_valid_identifier(\\"_myVar\\") == True assert is_valid_identifier(\\"2ndValue\\") == False assert is_valid_identifier(\\"True\\") == False assert is_valid_identifier(\\"valid_123\\") == True assert is_valid_identifier(\\"def_function\\") == False ```","solution":"def is_valid_identifier(identifier: str) -> bool: reserved_keywords = { \'if\', \'else\', \'while\', \'for\', \'return\', \'True\', \'False\', \'None\', \'in\', \'not\', \'and\', \'or\', \'is\', \'def\', \'class\' } if not identifier: return False if identifier in reserved_keywords: return False if not (identifier[0].isalpha() or identifier[0] == \'_\'): return False for char in identifier[1:]: if not (char.isalnum() or char == \'_\'): return False return True"},{"question":"Problem description: As part of a new software feature, developers need to implement an event scheduler that can efficiently manage overlapping events. Given a list of events, each characterized by a start time and an end time, your task is to write a program that counts the minimum number of rooms required to schedule these events such that no two events overlap in the same room. Your program should read multiple test cases from the input, process them correctly, and output the required results. The output should be the total number of rooms required for each test case. Input The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of events. - Each of the next N lines contains two integers: the start time and the end time of an event (both inclusive). Output For each test case, output a single integer representing the minimum number of rooms required to schedule all events without overlap. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 10^4 0 ≤ start time < end time ≤ 10^9 Example Input: 2 3 1 4 2 5 3 6 4 0 30 5 10 15 20 10 25 Output: 3 2 Explanation Test case 1: You have three events: [1, 4], [2, 5], and [3, 6]. To schedule all events without any overlap, you need a total of 3 rooms. - The first room will have events [1, 4], [5, 7], and the second room will have [2, 5] and [4, 6], and the third room will be empty. Test case 2: The events are [0, 30], [5, 10], [15, 20], and [10, 25]. The first room will have [0, 30], the second room will have [5, 10] and [15, 20], and a third room for [10, 25] will be required. Thus, a total of 3 rooms will be needed.","solution":"import heapq def min_rooms_required(events): Given a list of events with their start and end times, returns the minimum number of rooms required such that no two events overlap in the same room. if not events: return 0 # Sort the events by start time events.sort(key=lambda x: x[0]) # Initialize a min-heap to keep track of end times of events min_heap = [] # Add the end time of the first event heapq.heappush(min_heap, events[0][1]) # Iterate through the remaining events for event in events[1:]: # If the earliest ending event has ended before the next event starts, # there\'s no overlap, so we can reuse the room if min_heap[0] <= event[0]: heapq.heappop(min_heap) # Add the current event\'s end time to the heap heapq.heappush(min_heap, event[1]) # The size of the heap tells us the minimum number of rooms required return len(min_heap) def event_scheduler(test_cases): Function to process multiple test cases and return the minimum number of rooms required for each test case. results = [] for events in test_cases: results.append(min_rooms_required(events)) return results"},{"question":"Write a program that finds the index of the first occurrence of a given target string within another string. If the target string is not found, the program should return -1. Input The input consists of several datasets. Each dataset contains a main string and a target string separated by a space. Both strings consist of printable ASCII characters only and are guaranteed to be non-empty. The number of datasets does not exceed 100. Output For each dataset, print the index of the first occurrence of the target string within the main string, or -1 if the target string is not found. Example Input hello world world peace abcdef def mississippi si foobar foo bar bar Output 6 -1 3 2 0 0","solution":"def find_first_occurrence(main_string, target_string): Returns the index of the first occurrence of the target_string within main_string. If the target_string is not found, returns -1. return main_string.find(target_string) def process_datasets(datasets): Processes multiple datasets and returns the index of the first occurrence of target_string within main_string for each dataset. Each dataset is a tuple (main_string, target_string). results = [] for main_string, target_string in datasets: results.append(find_first_occurrence(main_string, target_string)) return results"},{"question":"Given a directed graph with N nodes and M edges, where each edge has a specific weight, you are to find out if there is a path from a node S to a node T, such that the sum of the weights of the edges on that path is a prime number. Constraints: * 1 ≤ N, M ≤ 100 * 1 ≤ edge weight ≤ 10^6 * 1 ≤ S, T ≤ N * The graph may contain cycles. Input: The input is given from Standard Input in the following format: N M u_1 v_1 w_1 u_2 v_2 w_2 : u_M v_M w_M S T Output: Print \\"Yes\\" if there exists a path from node S to node T with a prime-weighted sum. Otherwise, print \\"No\\". Examples: Input: 5 6 1 2 3 2 3 5 3 4 7 4 5 11 1 5 17 2 4 2 1 5 Output: Yes Input: 4 4 1 2 6 2 3 4 3 4 8 1 4 12 1 4 Output: No","solution":"from collections import deque from math import isqrt def is_prime(n): Returns True if n is a prime number else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_path(graph, start, end, n): Returns True if there\'s a path from start to end with prime-weight sum. visited = [False] * (n + 1) queue = deque([(start, 0)]) while queue: node, acc_weight = queue.popleft() if node == end and is_prime(acc_weight): return True if not visited[node]: visited[node] = True for neighbor, weight in graph[node]: queue.append((neighbor, acc_weight + weight)) return False def path_with_prime_sum(N, M, edges, S, T): graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) return \\"Yes\\" if find_prime_path(graph, S, T, N) else \\"No\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] idx = 2 for _ in range(M): u = int(data[idx]) v = int(data[idx + 1]) w = int(data[idx + 2]) edges.append((u, v, w)) idx += 3 S = int(data[idx]) T = int(data[idx + 1]) result = path_with_prime_sum(N, M, edges, S, T) print(result) if __name__ == \\"__main__\\": main()"},{"question":"John wants to create a social network graph where users are represented by nodes and friendships by edges. Each node in this graph has a unique user ID. John wants to find out if there exists any cycle in the graph. A cycle in the graph means there is a sequence of nodes starting and ending at the same node, where each node is connected by an edge and no node is repeated within the cycle except the starting and ending node. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of users and the number of friendships, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) that indicate a friendship between users u and v. Output Print \\"Cycle Found\\" if there exists at least one cycle in the graph. Otherwise, print \\"No Cycle\\". Examples Input 5 5 1 2 2 3 3 4 4 5 5 2 Output Cycle Found Input 4 3 1 2 2 3 3 4 Output No Cycle Note In the first sample test case, the graph contains a cycle: 2 → 3 → 4 → 5 → 2. In the second sample test case, there is no cycle in the graph.","solution":"from collections import defaultdict def find_cycle(n, m, edges): Detects if there is a cycle in an undirected graph represented by n nodes and m edges. Parameters: n (int): Number of nodes. m (int): Number of edges. edges (list of tuples): Edge list where each tuple represents an edge between two nodes. Returns: str: \\"Cycle Found\\" if there is at least one cycle, otherwise \\"No Cycle\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def is_cyclic(v, parent): visited[v] = True for neighbour in graph[v]: if not visited[neighbour]: if is_cyclic(neighbour, v): return True elif neighbour != parent: return True return False for i in range(1, n + 1): if not visited[i]: if is_cyclic(i, -1): return \\"Cycle Found\\" return \\"No Cycle\\""},{"question":"You are given a list of integers. Your task is to find all unique pairs of integers in the list that add up to a given target sum. Each pair should be sorted in non-decreasing order, and the list of pairs should be sorted in lexicographical order. Input The first line contains an integer n (1 ≤ n ≤ 10^4) — the number of integers in the list. The second line contains n integers, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the integers in the list. The third line contains an integer target (1 ≤ target ≤ 2 * 10^4) — the target sum. Output Print the number of unique pairs. Then for each pair, print the integers in the pair separated by a space. Example Input: 6 1 2 3 4 3 2 5 Output: 2 1 4 2 3 Explanation There are 2 unique pairs in the list that add up to the target sum of 5: (1, 4) and (2, 3). Note that (3, 2) and (2, 3) are considered the same pair and each pair is listed only once in the output. The pairs are sorted in lexicographical order.","solution":"def find_unique_pairs(arr, target): This function finds all unique pairs of integers in the list that add up to a given target sum. :param arr: List of integers :param target: target sum :return: List of unique pairs unique_pairs = set() seen = set() for number in arr: complement = target - number if complement in seen: pair = tuple(sorted((number, complement))) unique_pairs.add(pair) seen.add(number) result = sorted(list(unique_pairs)) return result def format_output(pairs): Formats the output to match the desired format. :param pairs: List of pairs :return: Formatted string output = f\\"{len(pairs)}n\\" for pair in pairs: output += f\\"{pair[0]} {pair[1]}n\\" return output"},{"question":"A group of kids are playing a game by collecting colored chips. Each chip has a unique value and color attributed to it. They want to find out the maximum sum of values they can collect by choosing one chip of each color. There are N chips in total, and each chip is described by its color and value. Write a program to help the kids determine the maximum value they can get by choosing one chip of each color. **Input:** The first line contains an integer N, the number of chips. Each of the following N lines contains two integers and one string separated by spaces: the value of the chip, the color of the chip, and the unique identifier of the chip, respectively. **Output:** Output the maximum sum of values the kids can collect by choosing one chip of each color. Insert a line break at the end. **Constraints:** * 1 leq N leq 100,000 * The value of the chip is an integer between 1 and 1,000,000 * The color is a string of lowercase letters with a length between 1 and 10 * The unique identifier is a string of lowercase letters and digits with a length between 1 and 20 **Input example 1:** ``` 6 10 red a1 20 blue b2 30 blue b3 25 red a2 15 green c1 40 green c2 ``` **Output example 1:** ``` 80 ``` **Explanation:** The kids can select the chip with value 25 for color \\"red\\", the chip with value 30 for color \\"blue\\", and the chip with value 40 for color \\"green\\", resulting in a total maximum value of 25 + 30 + 40 = 95. However, the maximum combination shown in the example results in 10 (red) + 30 (blue) + 40 (green) = 80. **Input example 2:** ``` 5 5 orange d3 15 yellow e5 12 orange d4 7 yellow e6 20 purple f1 ``` **Output example 2:** ``` 42 ``` **Explanation:** The kids can select the chip with value 12 for color \\"orange\\", the chip with value 15 for color \\"yellow\\", and the chip with value 20 for color \\"purple\\", resulting in a total maximum value of 12 + 15 + 20 = 47. However, the maximum combination shown in the example results in 5 (orange) + 15 (yellow) + 20 (purple) = 42.","solution":"def max_sum_of_chips(chips): Returns the maximum sum of values by choosing one chip of each color. color_max_values = {} for chip in chips: value, color, _ = chip if color in color_max_values: color_max_values[color] = max(color_max_values[color], value) else: color_max_values[color] = value return sum(color_max_values.values()) # Sample usage n = 6 chips_description = [ (10, \'red\', \'a1\'), (20, \'blue\', \'b2\'), (30, \'blue\', \'b3\'), (25, \'red\', \'a2\'), (15, \'green\', \'c1\'), (40, \'green\', \'c2\') ] result = max_sum_of_chips(chips_description) print(result) # Expected output: 95"},{"question":"In the distant land of Algoria, there exists a powerful artifact called the Algorithmic Amulet. The Amulet has a unique property: it can use its magic to transform a number. The wizard in charge of the Amulet challenges you to a task to prove your worthiness. You are given a positive integer n. Your task is to find the minimum number of operations required to reduce n to 1 using the following operations: 1. If the number is even, divide it by 2. 2. If the number is odd, you can either subtract 1 or add 1. Write a function to determine the minimum number of operations required to reduce the given number n to 1. Input A single integer n (1 ≤ n ≤ 10^6). Output Output one number: the minimum number of operations required to reduce n to 1. Example Input 7 Output 4 Explanation: - 7 is odd: 7 + 1 = 8 - 8 is even: 8 / 2 = 4 - 4 is even: 4 / 2 = 2 - 2 is even: 2 / 2 = 1","solution":"def min_operations(n): Returns the minimum number of operations required to reduce n to 1. from collections import deque # Initial check for edge case where n is already 1 if n == 1: return 0 # We use a deque for BFS queue = deque([(n, 0)]) visited = set() while queue: current, steps = queue.popleft() # Apply operations and check our visited set to avoid redundant work if current == 1: return steps if current not in visited: visited.add(current) # If the number is even if current % 2 == 0: queue.append((current // 2, steps + 1)) else: # If the number is odd queue.append((current + 1, steps + 1)) queue.append((current - 1, steps + 1))"},{"question":"You are tasked with implementing a fleet management system for a set of autonomous delivery vehicles. Each vehicle has a unique ID and operates within a specific rectangular area of the city, given by two opposite corners\' coordinates. Vehicles need to be updated with new areas occasionally or queried to check if they can deliver to certain locations. You will implement two types of operations: 1. **Update**: Assigns or updates the rectangular area for a vehicle. 2. **Query**: Checks if a given vehicle can deliver to a specific location. # Input Format The first line contains an integer `Q` representing the number of operations. The following `Q` lines contain one of the following: - `UPDATE vehicle_id x1 y1 x2 y2`: Updates the area for the vehicle with the given `vehicle_id`. The area is defined by two opposite corners (x1, y1) and (x2, y2). - `QUERY vehicle_id x y`: Checks if the vehicle with `vehicle_id` can deliver to the location (x, y). If the vehicle does not exist, it should return `NO`. # Output Format For each `QUERY` operation, output `YES` if the vehicle can deliver to the given location, otherwise output `NO`. # Constraints 1. 1 ≤ Q ≤ 100,000 2. All coordinates x1, y1, x2, y2, x, and y are between -10^9 and 10^9. 3. The `vehicle_id` is a unique integer between 1 and 100,000. 4. The side lengths of the delivery areas (rectangles) will not be zero. # Example Input ``` 6 UPDATE 1 0 0 10 10 UPDATE 2 -10 -10 -1 -1 QUERY 1 5 5 QUERY 2 0 0 QUERY 2 -5 -5 QUERY 3 10 10 ``` Output ``` YES NO YES NO ``` # Explanation - The first two operations update the delivery areas for vehicles with IDs 1 and 2. - The first `QUERY` checks if vehicle 1 can deliver to (5, 5). Since (5,5) lies within the rectangle (0, 0) to (10, 10), it returns `YES`. - The second `QUERY` checks if vehicle 2 can deliver to (0, 0). Since (0,0) does not lie within the rectangle (-10, -10) to (-1, -1), it returns `NO`. - The third `QUERY` checks if vehicle 2 can deliver to (-5, -5). Since (-5,-5) lies within the rectangle (-10, -10) to (-1, -1), it returns `YES`. - The fourth `QUERY` checks if vehicle 3 can deliver to (10, 10). Since vehicle 3 does not exist, it returns `NO`.","solution":"class FleetManagementSystem: def __init__(self): self.vehicles = {} def update_vehicle(self, vehicle_id, x1, y1, x2, y2): # Ensure the coordinates are ordered in the canonical form min_x, max_x = min(x1, x2), max(x1, x2) min_y, max_y = min(y1, y2), max(y1, y2) self.vehicles[vehicle_id] = (min_x, min_y, max_x, max_y) def query_vehicle(self, vehicle_id, x, y): if vehicle_id not in self.vehicles: return \\"NO\\" min_x, min_y, max_x, max_y = self.vehicles[vehicle_id] if min_x <= x <= max_x and min_y <= y <= max_y: return \\"YES\\" return \\"NO\\" def manage_fleet(operations): system = FleetManagementSystem() result = [] for operation in operations: parts = operation.split() if parts[0] == \\"UPDATE\\": vehicle_id = int(parts[1]) x1, y1, x2, y2 = int(parts[2]), int(parts[3]), int(parts[4]), int(parts[5]) system.update_vehicle(vehicle_id, x1, y1, x2, y2) elif parts[0] == \\"QUERY\\": vehicle_id = int(parts[1]) x, y = int(parts[2]), int(parts[3]) result.append(system.query_vehicle(vehicle_id, x, y)) return result"},{"question":"In an online game, players compete in a series of matches. Each player has a unique ID and a score that can change after each match. You are tasked with implementing a system that supports the following operations: 1. **Add Player**: Add a new player with a given initial score. 2. **Update Score**: Update the score of a specific player. 3. **Get Score**: Retrieve the current score of a specific player. 4. **Top Players**: Retrieve the IDs of the top k players with the highest scores. If two players have the same score, the player who was added first should be ranked higher. Your task is to implement functions to support these operations efficiently. # Input The first line contains an integer n (1 ≤ n ≤ 105) – the number of operations. Each of the next n lines contains one of the following five types of operations: 1. **Add Player**: `add player_id initial_score` (1 ≤ player_id ≤ 105, 0 ≤ initial_score ≤ 109) 2. **Update Score**: `update player_id new_score` (1 ≤ player_id ≤ 105, 0 ≤ new_score ≤ 109) 3. **Get Score**: `get player_id` (1 ≤ player_id ≤ 105) 4. **Top Players**: `top num_players` (1 ≤ num_players ≤ number of players added) # Output - For each `get` operation, output the current score of the specified player. - For each `top` operation, output the player IDs of the top k players with the highest scores in descending order. # Example Input ``` 8 add 1 100 add 2 200 get 1 update 1 150 get 1 top 2 add 3 150 top 2 ``` Output ``` 100 150 2 1 2 3 ```","solution":"class GameSystem: def __init__(self): self.players = {} # player_id -> score self.order = [] # ordering of added player_ids def add_player(self, player_id, initial_score): if player_id not in self.players: self.players[player_id] = initial_score self.order.append(player_id) def update_score(self, player_id, new_score): if player_id in self.players: self.players[player_id] = new_score def get_score(self, player_id): return self.players.get(player_id, 0) def top_players(self, num_players): sorted_players = sorted(self.players.items(), key=lambda x: (-x[1], self.order.index(x[0]))) return [player_id for player_id, score in sorted_players[:num_players]]"},{"question":"Takahashi loves to collect stamps. He has N different stamps from various countries, each of which has a certain value in Japanese yen. You are given two values for each of the N stamps: `v_i` (the value of the i-th stamp in yen) and `f_i` (the frequency of occurrence of that stamp in Takahashi\'s collection). Takahashi wants to know the total value of his entire stamp collection. Write a program that calculates the total value based on the given values and frequencies. Constraints: * 1 leq N leq 100 * 1 leq v_i leq 10^6 * 1 leq f_i leq 10^3 Input Input is given from Standard Input in the following format: N v_1 f_1 v_2 f_2 : v_N f_N Output If the total value of Takahashi\'s stamp collection is Y yen, print the value Y. Examples Input 3 100 2 200 3 50 1 Output 850 Input 2 500000 10 300000 5 Output 6500000","solution":"def total_stamp_value(N, stamps): This function calculates the total value of Takahashi\'s stamp collection. Parameters: N (int): The number of different stamps. stamps (list of tuples): A list where each tuple contains two integers, the value of a stamp in yen (v_i) and the frequency of that stamp (f_i). Returns: int: The total value of the stamp collection in yen. total_value = 0 for v, f in stamps: total_value += v * f return total_value"},{"question":"You are given an array of integers and a target sum. Detect if there exist three distinct numbers in the array that sum up to the target sum. If such three numbers exist, return them as an array in any order. If no such combination is found, return an empty array. # Input: - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers, which are the elements of the array. - The third line contains an integer `target`, the target sum. # Output: - One line containing three integers that sum up to the target sum, in any order. If such a combination does not exist, output an empty array. # Constraints: - 3 ≤ `n` ≤ 1000 - -10^9 ≤ Array elements ≤ 10^9 - -10^9 ≤ `target` ≤ 10^9 # Example: Input: ``` 6 1 2 3 4 5 6 10 ``` Output: ``` 1 3 6 ``` Explanation: One combination of three numbers that sum to 10 is 1, 3, and 6. Note that there could be multiple correct outputs, such as 2, 3, 5 or any order of these arrays. Therefore, any valid triplet is considered a correct output.","solution":"def find_three_numbers_sum(arr, target): Finds three distinct numbers in the array that sum up to the target sum. Returns these numbers as a list. If no such combination exists, returns an empty list. arr.sort() n = len(arr) for i in range(n - 2): # We use two pointers: one starting just after the current element, and one at the end of the array left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return [arr[i], arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"**Problem Statement:** In a distant galaxy, robots are assigned the task to clean and maintain space stations. Each cleaning task is divided into multiple subtasks, and each subtask has a different level of difficulty. The efficiency of a robot is determined by how quickly it completes the subtasks, and the difficulty level dictates the amount of time required. You are given an integer N that represents the number of subtasks, and an array A of length N, where A[i] denotes the difficulty level of the i^{th} subtask. The time to complete each subtask is equal to its difficulty level in hours. The robots have a special feature: if, at any point, they encounter three subtasks in a row with a difficulty level greater than or equal to a threshold K, they will overheat and they will stop working immediately. Overheating occurs before completing the subtask causing it. Given the number of subtasks, the array of difficulty levels, and the threshold K, determine the total time the robots will work before overheating. If the robots do not overheat, return the total time to complete all subtasks. **Input:** - An integer N which represents the number of subtasks. - An integer K which represents the difficulty threshold. - An array A of length N, where A[i] denotes the difficulty level of the i^{th} subtask. **Output:** - Output the total time the robots will work before overheating. **Examples:** **Input:** ``` 5 4 [1, 2, 3, 4, 5] ``` **Output:** ``` 6 ``` **Input:** ``` 7 3 [1, 3, 3, 3, 2, 1, 4] ``` **Output:** ``` 6 ``` **Explanation:** In the first example, the robot does not encounter any three consecutive subtasks with difficulty level greater than or equal to 4, so the total time to complete all subtasks is 1 + 2 + 3 + 4 + 5 = 15 hours. In the second example, the robot encounters three consecutive subtasks with difficulty levels 3, 3, and 3. The robot overheats before completing the third subtask in this series, totaling 1 + 3 + 3 = 7 hours worked before overheating.","solution":"def total_work_time(N, K, A): Calculate the total time robots will work before overheating. Parameters: N (int): Number of subtasks K (int): Threshold difficulty level A (list of int): List representing the difficulty levels of the subtasks Returns: int: Total work time before overheating total_time = 0 for i in range(N): if i >= 2 and A[i] >= K and A[i-1] >= K and A[i-2] >= K: return total_time total_time += A[i] return total_time"},{"question":"A company wants to implement a new software feature that tracks and manages user tasks. Each task has a unique ID, a priority level, and a completion status. There are three possible priority levels: High, Medium, and Low. The users can add new tasks, mark existing tasks as completed, and retrieve all tasks based on their priority level. Your task is to write a program that supports these functionalities. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of operations. Each of the next n lines describes an operation and follows one of the following three formats: 1. \\"ADD id priority\\" — adds a new task with the given id (a string) and priority (\\"High\\", \\"Medium\\", or \\"Low\\"). It is guaranteed that the id will be unique. 2. \\"COMPLETE id\\" — marks the task with the given id as completed. 3. \\"RETRIEVE priority\\" — retrieves and prints the id(s) of all tasks with the given priority that are not completed. The output for this operation should be the ids in the order they were added (FIFO order). If no tasks meet the criteria, output \\"No tasks\\". Output For each \\"RETRIEVE priority\\" operation, print the ids of the tasks separated by a space on the same line. If there are no tasks with the specified priority, print \\"No tasks\\". Examples Input 6 ADD 101 High ADD 102 Medium RETRIEVE High COMPLETE 101 RETRIEVE High RETRIEVE Medium Output 101 No tasks 102 Input 5 ADD 201 Low ADD 202 High RETRIEVE Low COMPLETE 202 RETRIEVE High Output 201 No tasks Note In the first example, the task with id 101 is added with High priority and is retrieved when querying High priority tasks. After marking it as completed, querying again for High priority tasks returns \\"No tasks\\". In the second example, the task with id 202 is completed before being retrieved, resulting in \\"No tasks\\" for High priority, while the Low priority task is successfully retrieved.","solution":"class TaskManager: def __init__(self): self.tasks = {\'High\': [], \'Medium\': [], \'Low\': []} self.completed = set() def add_task(self, task_id, priority): if priority in self.tasks: self.tasks[priority].append(task_id) def complete_task(self, task_id): self.completed.add(task_id) def retrieve_tasks(self, priority): if priority in self.tasks: active_tasks = [task_id for task_id in self.tasks[priority] if task_id not in self.completed] if active_tasks: return \' \'.join(active_tasks) else: return \\"No tasks\\" def handle_operations(operations): task_manager = TaskManager() results = [] for operation in operations: params = operation.split() if params[0] == \\"ADD\\": task_id, priority = params[1], params[2] task_manager.add_task(task_id, priority) elif params[0] == \\"COMPLETE\\": task_id = params[1] task_manager.complete_task(task_id) elif params[0] == \\"RETRIEVE\\": priority = params[1] results.append(task_manager.retrieve_tasks(priority)) return results"},{"question":"You are given a singly-linked list where each node contains an integer value. Your task is to rearrange the list such that all nodes with even values come before all nodes with odd values. Moreover, the relative order of the even and odd values should be preserved. For example, given the linked list: 1 -> 4 -> 3 -> 2 -> 5 -> NULL The output should be: 4 -> 2 -> 1 -> 3 -> 5 -> NULL Write a function that rearranges the nodes of the linked list as described. # Function Signature ```python class ListNode: def __init__(self, x): self.val = x self.next = None def rearrange_list(head: ListNode) -> ListNode: # Your code here ``` # Input - head: ListNode - The head node of a singly-linked list with n nodes (1 ≤ n ≤ 10^4), where node values are in the range of -10^6 to 10^6. # Output - Return the head of the modified list after rearranging the even and odd elements. # Example Input: ```python # Create the linked list 1 -> 4 -> 3 -> 2 -> 5 -> NULL head = ListNode(1) head.next = ListNode(4) head.next.next = ListNode(3) head.next.next.next = ListNode(2) head.next.next.next.next = ListNode(5) ``` Output: ```python # After rearranging, the linked list should be 4 -> 2 -> 1 -> 3 -> 5 -> NULL rearranged_head = rearrange_list(head) ``` ```python # To print the rearranged linked list for the above input while rearranged_head: print(rearranged_head.val, end=\\" -> \\") rearranged_head = rearranged_head.next # Output: 4 -> 2 -> 1 -> 3 -> 5 -> ``` # Note - You should not create any new nodes; only rearrange the existing ones. - Ensure the relative order among even and odd elements is preserved.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def rearrange_list(head: ListNode) -> ListNode: if not head: return head even_dummy = ListNode(0) odd_dummy = ListNode(0) even_tail, odd_tail = even_dummy, odd_dummy current = head while current: if current.val % 2 == 0: even_tail.next = current even_tail = even_tail.next else: odd_tail.next = current odd_tail = odd_tail.next current = current.next even_tail.next = odd_dummy.next odd_tail.next = None return even_dummy.next"},{"question":"You are given a list of integers and a set of queries to perform on this list. The types of queries possible are updating a value in the list and finding the sum of values in a specified range. Given an integer list L of length n and a number of queries q, your task is to process each query in the order given and output the results for range sum queries. Queries are given in two types: * Update query: `U i v` - Update the i-th element of the list L (0-indexed) to value v. * Range sum query: `S i j` - Output the sum of the elements in the range from index i to j inclusive (0-indexed). # Input The input is provided in the following format: ``` n q L1 L2 L3 ... Ln Q1 Q2 ... Qq ``` - The first line contains two integers n (the number of elements in the initial list) and q (the number of queries). - The second line contains n integers L1, L2, ..., Ln representing the elements of the list L. - The following q lines each contain a query in the following format: * `U i v` for an update query: update the i-th element of L to v. * `S i j` for a range sum query: output the sum of elements from index i to index j inclusive. # Output For each range sum query, print the corresponding result on a new line. # Constraints - (1 ≤ n, q ≤ 100,000) - (0 ≤ i, j < n) - (-10^9 ≤ L_k, v ≤ 10^9) where (L_k) is an element in the list L # Examples Example 1 Input: ``` 5 3 1 2 3 4 5 S 1 3 U 2 10 S 1 3 ``` Output: ``` 9 16 ``` Example 2 Input: ``` 8 4 2 4 5 3 1 6 2 8 S 0 4 U 3 10 S 2 6 S 1 7 ``` Output: ``` 15 24 36 ```","solution":"class SegmentTree: A segment tree for efficient range sum query and point update. def __init__(self, data): n = len(data) self.n = n self.tree = [0] * (2 * n) self._build(data) def _build(self, data): # Initialize the tree with the original data for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update value at position pos and propagate changes pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, l, r): # Query sum in the range [l, r) l += self.n r += self.n + 1 sum_ = 0 while l < r: if l % 2 == 1: sum_ += self.tree[l] l += 1 if r % 2 == 1: r -= 1 sum_ += self.tree[r] l //= 2 r //= 2 return sum_ def process_queries(n, q, L, queries): st = SegmentTree(L) results = [] for query in queries: if query[0] == \'U\': _, i, v = query st.update(i, v) elif query[0] == \'S\': _, i, j = query results.append(st.range_sum(i, j)) return results"},{"question":"You are given a list of N integers. Your task is to manipulate the list in such a way that you can count the number of distinct integers that remain after removing all duplicates. Additionally, you need to identify the majority element (the element that appears more than N/2 times) if it exists. If no such element exists, you should indicate that as well. Input The first line of the input contains an integer T denoting the number of test cases. Each of the following T lines will start with an integer N (the number of elements in the list), followed by N space-separated integers. Output For each test case, print two lines. The first line should have 1 value: the number of distinct integers in the list after removing duplicates. The second line should either print the majority element or \\"NO MAJORITY ELEMENT\\" if no majority element exists. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 The integers in the list will be between 1 and 10^9. Example Input: 2 5 1 2 2 3 3 7 4 4 4 4 5 5 5 Output: 3 NO MAJORITY ELEMENT 3 4 Explanation: For the first test case, there are 3 distinct integers (1, 2, 3) and no integer appears more than twice, so there is no majority element. For the second test case, there are 3 distinct integers (4, 5) and the integer 4 appears 4 times out of 7, which is more than 7/2. Hence, the majority element is 4.","solution":"def process_list(n, elements): This function determines the number of distinct integers in the list and checks for majority element. from collections import Counter count = Counter(elements) distinct_count = len(count) majority_element = \\"NO MAJORITY ELEMENT\\" majority_threshold = n // 2 for key, value in count.items(): if value > majority_threshold: majority_element = key break return distinct_count, majority_element def handle_test_cases(test_cases): results = [] for case in test_cases: n, elements = case[0], case[1:] distinct_count, majority_element = process_list(n, elements) results.append((distinct_count, majority_element)) return results"},{"question":"Alice is building a secret palindrome for Bob. She has given Bob a string `s` and asked him to determine the length of the longest palindromic subsequence within `s`. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. Your task is to help Bob write a program to find the length of the longest palindromic subsequence in the input string `s`. # Input: - A single string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 1000). # Output: - A single integer representing the length of the longest palindromic subsequence. # Example: Input: ``` bbbab ``` Output: ``` 4 ``` *Explanation*: One possible longest palindromic subsequence is \\"bbbb\\". Input: ``` cbbd ``` Output: ``` 2 ``` *Explanation*: One possible longest palindromic subsequence is \\"bb\\". # Note: - The solution should efficiently handle the input constraints. - Consider using dynamic programming to find an optimal solution.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in string s. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The outer loop is for substrings of length from 2 to n for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"A company is developing a new incentive system for its employees. Each employee is rewarded based on their performance throughout the week. The company has recorded the daily performance of each employee for a whole week. Your task is to help calculate the total reward points each employee should receive. Performance is measured by an integer value (positive, zero, or negative) for each day of the week (7 days). The reward points are calculated as follows: 1. For each positive performance value, the employee receives reward points equal to the performance value. 2. For each zero performance value, the employee receives zero reward points. 3. For each negative performance value, a penalty is imposed, and the employee loses reward points equal to the absolute value of the performance (but the total reward points cannot go below zero). Write a program that calculates the total reward points for an employee, given their daily performance values. Input The input consists of a single line containing seven space-separated integers p1, p2, ..., p7 (where -100 ≤ pi ≤ 100), representing the performance values from Monday to Sunday. Output Output a single integer representing the total reward points at the end of the week. Examples Input 3 1 -1 0 2 -3 4 Output 6 Input 5 2 0 -7 3 1 -4 Output 0 Input -1 -1 -1 -1 -1 -1 -1 Output 0 Note In the first sample, the total reward points are calculated as follows: 3 (Monday) + 1 (Tuesday) - 1 (Wednesday) (zero adjustment) + 0 (Thursday) + 2 (Friday) - 3 (Saturday) (adjustment) + 4 (Sunday) = 6 total points. In the second sample, the total reward points drop to zero due to penalties: 5 (Monday) + 2 (Tuesday) + 0 (Wednesday) - 7 (Thursday) (zero adjustment) + 3 (Friday) + 1 (Saturday) - 4 (Sunday) (zero adjustment) = 0 total points. In the third sample, all days have negative performance, so the total reward points stay at zero.","solution":"def calculate_reward(points): Calculates the total reward points for the week based on daily performance points. Parameters: points (list of int): A list containing 7 integers representing daily performance. Returns: int: The total reward points for the week. total_reward = 0 for point in points: if point > 0: total_reward += point else: total_reward -= abs(point) if total_reward < 0: total_reward = 0 return total_reward"},{"question":"Polycarpus has been studying the structure of polynomials in his mathematics course. Polycarpus is intrigued by a special type of polynomial known as a sparse polynomial. A polynomial is considered sparse if the number of non-zero terms is very small compared to its degree. Polycarpus is given two sparse polynomials, represented as lists of tuples, where each tuple consists of two integers (c, k) representing the coefficient and the exponent of a non-zero term in the polynomial. Polycarpus wants to multiply these two polynomials together and determine the resulting polynomial, also in sparse form. Your task is to help Polycarpus by writing a program that multiplies two given sparse polynomials and returns the result as another sparse polynomial. Input The first input line contains an integer m (1 ≤ m ≤ 1000) which represents the number of non-zero terms in the first polynomial. The next m lines each contain two integers ci and ki (|ci| ≤ 1000, 0 ≤ ki ≤ 1000) which represent the coefficient and the exponent of a non-zero term in the first polynomial. The next input line contains an integer n (1 ≤ n ≤ 1000) which represents the number of non-zero terms in the second polynomial. The next n lines each contain two integers cj and kj (|cj| ≤ 1000, 0 ≤ kj ≤ 1000) which represent the coefficient and the exponent of a non-zero term in the second polynomial. Output Print p lines, where p represents the number of non-zero terms in the resulting polynomial. Each line should contain two integers, representing the coefficient and exponent of a non-zero term. Print the terms in order of increasing exponents. If the resulting polynomial has no non-zero terms, print a single line with 0 0. Examples Input 3 1 1 2 2 3 3 2 1 0 4 1 Output 1 1 6 2 11 3 12 4 Input 2 3 0 2 1 2 1 0 1 1 Output 3 0 5 1 2 2 Input 1 0 0 1 0 0 Output 0 0 Note In the first example, the first polynomial is (P(x) = x + 2x^2 + 3x^3) and the second polynomial is (Q(x) = 1 + 4x). The resulting polynomial (R(x) = P(x) * Q(x) = x + 6x^2 + 11x^3 + 12x^4). In the second example, the first polynomial is (P(x) = 3 + 2x) and the second polynomial is (Q(x) = 1 + x). The resulting polynomial (R(x) = P(x) * Q(x) = 3 + 5x + 2x^2). In the third example, both polynomials are zero, hence the result is also zero.","solution":"def multiply_sparse_polynomials(poly1, poly2): result_terms = {} for c1, k1 in poly1: for c2, k2 in poly2: product_coeff = c1 * c2 product_exp = k1 + k2 if product_exp in result_terms: result_terms[product_exp] += product_coeff else: result_terms[product_exp] = product_coeff # Remove zero coefficient terms and sort by exponent result = [(coeff, exp) for exp, coeff in sorted(result_terms.items()) if coeff != 0] if not result: return [(0, 0)] return result"},{"question":"Lucy loves playing with strings. She has a unique game where she takes a string and tries to create the longest substring that is a palindrome. A substring is a contiguous sequence of characters within a string and a palindrome is a string that reads the same backward as forward. Help Lucy determine the length of the longest palindromic substring in the given string. Input The first line contains an integer T, the number of test cases. Each test case contains a single string S. Output For each test case, print the length of the longest palindromic substring in the given string. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S contains only lowercase English alphabets. Example Input: 2 babad cbbd Output: 3 2 Explanation Case 1: The longest palindromic substring in \\"babad\\" is \\"bab\\" or \\"aba\\", both of which have a length of 3. Case 2: The longest palindromic substring in \\"cbbd\\" is \\"bb\\", which has a length of 2.","solution":"def longest_palindromic_substring_length(s): n = len(s) if n == 0: return 0 dp = [[False] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(longest_palindromic_substring_length(case)) return results"},{"question":"A researcher is studying a particular type of sequence generated by complex operations on sets of numbers. Specifically, consider a sequence of integers such that each number in the sequence, except for the first few, is the sum of its immediate predecessors within a certain range. A valid sequence of integers can be described as follows: 1. The sequence starts with k initial integers. 2. Every subsequent integer in the sequence is the sum of the last m preceding integers. Given the starting integers and the parameters k and m, you are to generate the sequence until it reaches a given length n. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 10). Description of the test cases follows. The first line of each test case contains three integers n (1 ≤ n ≤ 100), k (1 ≤ k ≤ 10), and m (1 ≤ m ≤ k). The next line contains k integers which are the starting integers of the sequence. Output For each test case output the sequence of length n. Example Input 2 10 3 2 1 1 2 7 4 3 2 2 2 2 Output 1 1 2 3 5 8 13 21 34 55 2 2 2 2 6 10 18 34 Note In the first example test case, the sequence starts with [1, 1, 2] and each subsequent integer is the sum of the last 2 integers: - 3 = 1 + 2 - 5 = 2 + 3 - 8 = 3 + 5 - 13 = 5 + 8 - 21 = 8 + 13 - 34 = 13 + 21 - 55 = 21 + 34 In the second example test case, the sequence starts with [2, 2, 2, 2] and each subsequent integer is the sum of the last 3 integers: - 6 = 2 + 2 + 2 - 10 = 2 + 2 + 6 - 18 = 2 + 6 + 10 - 34 = 6 + 10 + 18","solution":"def generate_sequence(n, k, m, starting_integers): Generates a sequence of integers of length n based on the given parameters. Parameters: - n (int): The total length of the desired sequence. - k (int): The number of initial integers in the sequence. - m (int): The number of immediate predecessors to sum for generating the next integer. - starting_integers (list): The starting k integers of the sequence. Returns: - list: The generated sequence of length n. sequence = starting_integers[:] while len(sequence) < n: next_value = sum(sequence[-m:]) sequence.append(next_value) return sequence def process_test_cases(test_cases): Processes multiple test cases and generates the sequences for each. Parameters: - test_cases (list): A list of tuples where each tuple contains (n, k, m, starting_integers). Returns: - list: A list of generated sequences for each test case. results = [] for n, k, m, starting_integers in test_cases: results.append(generate_sequence(n, k, m, starting_integers)) return results"},{"question":"You are given a list of integers and a series of queries. For each query, you will be given two integers `L` and `R`, representing the left and right indices of a subarray within the list (inclusive). Your task is to find the sum of all the prime numbers in that subarray. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Input: - The first line of the input contains an integer `N`, the size of the list. - The second line contains `N` integers representing the elements of the list. - The third line contains an integer `Q`, the number of queries. - The next `Q` lines each contain two integers `L` and `R`. Output: For each query, output the sum of all the prime numbers in the specified subarray on a new line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^3 1 ≤ list[i] ≤ 10^6 1 ≤ L ≤ R ≤ N SAMPLE INPUT 6 2 4 6 7 11 13 2 1 3 4 6 SAMPLE OUTPUT 2 31 Explanation: For the first query (1, 3), the subarray is [2, 4, 6]. The prime number in this subarray is 2. Thus, the sum is 2. For the second query (4, 6), the subarray is [7, 11, 13]. The prime numbers in this subarray are 7, 11, and 13. Thus, the sum is 7 + 11 + 13 = 31.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_subarray(arr, L, R): Returns the sum of prime numbers in the subarray defined by the indices L and R (inclusive). return sum(x for x in arr[L-1:R] if is_prime(x)) def process_queries(arr, queries): Processes each query and returns the results as a list. results = [] for L, R in queries: results.append(sum_of_primes_subarray(arr, L, R)) return results"},{"question":"A word is considered a palindrome if it reads the same backward as forward. You are given a string s. You need to decode a series of operations to form a palindrome from this string if possible. You are allowed to change one character in the string per operation to form a palindrome. You need to determine whether it is possible to form a palindrome from the given string within at most k operations. Input The first line contains a single integer t (1 ≤ t ≤ 10^3) — the number of test cases. For each test case, the first line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase alphabetic characters, and an integer k (1 ≤ k ≤ |s|). Output For each test case, print \\"YES\\" if it is possible to form a palindrome by changing at most k characters in the given string. Otherwise, print \\"NO\\". Example Input 3 abca 1 abcde 2 abcd 1 Output YES YES NO Note In the first test case, you can change the character \'b\' to \'a\' to make the string \\"acca\\", which is a palindrome. In the second test case, you can change the characters \'b\' to \'d\' and \'c\' to \'e\' to make the string \\"abcba\\", which is a palindrome. In the third test case, you can only change one character but that is not enough to make \\"abcd\\" a palindrome.","solution":"def can_form_palindrome(s, k): Determines if the given string can be transformed into a palindrome within at most k operations. mismatches = 0 length = len(s) for i in range(length // 2): if s[i] != s[length - i - 1]: mismatches += 1 return mismatches <= k def process_tests(t, test_cases): Processes multiple test cases. results = [] for case in test_cases: s, k = case k = int(k) if can_form_palindrome(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are working on an online messaging platform where users can send, edit, and delete messages. To manage the messages more efficiently, you need to implement operations that handle various tasks. Specifically, you need to implement the following functionalities: 1. Append a message to a list of messages. 2. Edit a specific message in the list of messages. 3. Delete a specific message from the list of messages. 4. Retrieve a specific range of messages from the list of messages. You will write a program that performs these operations efficiently on a list of messages. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of operations. - The next `n` lines contain one of the following queries: - `1 message`: Append `message` to the list of messages. (1 ≤ length of message ≤ 100). - `2 index new_message`: Edit the message at the given `index` (0-indexed) to `new_message`. (1 ≤ length of new_message ≤ 100). - `3 index`: Delete the message at the given `index` (0-indexed). - `4 start end`: Retrieve messages from `start` (0-indexed) to `end` (0-indexed, inclusive) and print them. Messages should be printed in the order they appear in the list. # Output For each `4 start end` query, print the messages in the specified range, one message per line. If the range is invalid (e.g., start > end, any index is out of bounds), print \\"Invalid range\\". # Example Input ``` 7 1 Hello 1 World 4 0 1 2 1 Everyone 4 0 1 3 0 4 0 1 ``` Output ``` Hello World Hello Everyone Everyone Invalid range ``` # Explanation 1. Append \\"Hello\\" to the list of messages. 2. Append \\"World\\" to the list of messages. 3. Retrieve messages from index 0 to 1: the messages \\"Hello\\" and \\"World\\" are retrieved. 4. Edit the message at index 1 to \\"Everyone\\". 5. Retrieve messages from index 0 to 1: the messages \\"Hello\\" and \\"Everyone\\" are retrieved. 6. Delete the message at index 0. 7. Retrieve messages from index 0 to 1: only the message \\"Everyone\\" is retrieved since the range [0, 1] is invalid due to deletion.","solution":"class MessageManager: def __init__(self): self.messages = [] def append_message(self, message): self.messages.append(message) def edit_message(self, index, new_message): if 0 <= index < len(self.messages): self.messages[index] = new_message def delete_message(self, index): if 0 <= index < len(self.messages): del self.messages[index] def retrieve_messages(self, start, end): if 0 <= start <= end < len(self.messages): return self.messages[start:end + 1] else: return \\"Invalid range\\""},{"question":"You are given a sequence of n integers a1, a2, ..., an. You can perform the following operation on the sequence: choose any two distinct integers ai and aj (1 ≤ i, j ≤ n) and remove them from the sequence. You can repeat this operation as many times as you want, or you can stop at any point. Your goal is to make the remaining sequence as small as possible. Write a function to return the length of the smallest sequence you can achieve. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the sequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000). Output - Print a single integer representing the length of the smallest sequence you can achieve. Example Input 6 1 1 2 2 3 3 Output 0 Input 7 1 2 2 3 3 4 4 Output 1","solution":"def smallest_sequence_length(n, sequence): from collections import Counter # Count the occurrences of each element counts = Counter(sequence) # Find the total number of pairs that can be made pairs = sum(count // 2 for count in counts.values()) # Remaining elements after forming pairs remaining = n - 2 * pairs return remaining"},{"question":"There is a robot on an infinite grid that starts at point (0, 0). The robot is given a sequence of moves represented by a string. Each character in the string is one of \'L\', \'R\', \'U\', or \'D\', representing a move left, right, up, or down, respectively. The robot can end up revisiting its starting point after a sequence of moves. Write a function that takes a string of moves and determines if the robot returns to its starting point after executing all the moves. Input A single string s (1 ≤ |s| ≤ 10^4) representing the sequence of moves. The only characters in s are \'L\', \'R\', \'U\', and \'D\'. Output Output \\"YES\\" if the robot returns to the starting point. Otherwise, output \\"NO\\". Examples Input \\"UDLR\\" Output \\"YES\\" Input \\"UULDD\\" Output \\"NO\\"","solution":"def does_robot_return(moves): Determines if the robot returns to the starting point after executing the given sequence of moves. Parameters: moves (str): A string representing the sequence of moves. Returns: str: \\"YES\\" if the robot returns to the starting point, otherwise \\"NO\\". x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"You are given a string containing numeric digits and lowercase Latin letters only. Your task is to transform the string such that every numeric digit (0-9) is replaced by its corresponding English word (zero, one, two, ..., nine). The order of characters must remain unchanged and you should preserve all non-numeric characters in their original positions. Input The input string consists of numeric digits and lowercase Latin letters only, and its length is from 1 to 100, inclusive. Output Print the transformed string, where all numeric digits are replaced by their corresponding English words. Examples Input a1b2 Output aonebtwo Input 123hello456 Output onetwothreehellofourfivesix Input n0m9 Output nzeromnine","solution":"def replace_digits_with_words(s: str) -> str: digit_to_word = { \'0\': \'zero\', \'1\': \'one\', \'2\': \'two\', \'3\': \'three\', \'4\': \'four\', \'5\': \'five\', \'6\': \'six\', \'7\': \'seven\', \'8\': \'eight\', \'9\': \'nine\' } result = [] for char in s: if char.isdigit(): result.append(digit_to_word[char]) else: result.append(char) return \'\'.join(result)"},{"question":"Acyclia\'s Magic Potion Factory is famous for its remarkably potent potions. Each potion is made by mixing a consecutive sequence of ingredients, each having an intrinsic power level. The power of a potion is determined by summing the power levels of all its ingredients and then applying a special magical formula to this sum. The magical formula is defined as follows: Given the sum of power levels `S`, the final power of the potion is `S % k`, where `k` is a constant magical divisor known only to the factory. You have been hired by Acyclia\'s Magic Potion Factory to build a system that, given multiple queries about different sequences of ingredients, can efficiently compute the power of the resulting potion for each sequence. Input The first line of input contains two integers `n` (1 ≤ n ≤ 100,000) and `k` (1 ≤ k ≤ 1,000,000,000). The second line of input contains `n` integers `ai` (1 ≤ ai ≤ 1,000,000,000), which represent the power levels of the ingredients. The third line of input contains a single integer `q` (1 ≤ q ≤ 100,000), which is the number of queries. Each of the next `q` lines contains two integers `li` and `ri` (1 ≤ li ≤ ri ≤ n), which represent the indices (1-based) of the sequence of ingredients for which the final power of the potion needs to be calculated. Output For each query, output the final power of the potion on a new line. Example Input 8 100 4 7 2 9 3 6 5 8 5 1 3 2 5 1 8 4 6 3 8 Output 13 21 44 18 33 Explanation - The sequence of ingredients from index 1 to 3 is `[4, 7, 2]`, and their sum is 13. The final power is `13 % 100 = 13`. - The sequence of ingredients from index 2 to 5 is `[7, 2, 9, 3]`, and their sum is 21. The final power is `21 % 100 = 21`. - The sequence of ingredients from index 1 to 8 is `[4, 7, 2, 9, 3, 6, 5, 8]`, and their sum is 44. The final power is `44 % 100 = 44`. - The sequence of ingredients from index 4 to 6 is `[9, 3, 6]`, and their sum is 18. The final power is `18 % 100 = 18`. - The sequence of ingredients from index 3 to 8 is `[2, 9, 3, 6, 5, 8]`, and their sum is 33. The final power is `33 % 100 = 33`.","solution":"def calculate_potions_power(n, k, ingredients, queries): # Create prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + ingredients[i - 1] # Process each query results = [] for li, ri in queries: # Sum from li to ri (1-based indexing) total_power = prefix_sums[ri] - prefix_sums[li - 1] # Apply the magical formula to get the final power final_power = total_power % k results.append(final_power) return results # Example Usage # Input n = 8 k = 100 ingredients = [4, 7, 2, 9, 3, 6, 5, 8] queries = [(1, 3), (2, 5), (1, 8), (4, 6), (3, 8)] # Output print(calculate_potions_power(n, k, ingredients, queries))"},{"question":"You are given an array `arr` of integers of length `n`. You need to process a series of queries where each query asks you to find the maximum integer in a specified subsegment of the array. Write a function `max_in_range(arr, queries)` that accepts: 1. An array of integers `arr` of length `n` (1 <= n <= 10^5) 2. A list of `queries` where each query is represented as a tuple of two integers (l, r) (1 <= l <= r <= n), which specifies the start and end of the subsegment (1-based index). The function should return a list of integers, where each integer corresponds to the maximum integer in the subsegment specified by the respective query. Input The first input line contains a single integer n (1 ≤ n ≤ 10^5) - the length of the array `arr`. The second line contains n space-separated integers representing the elements of `arr` (-10^9 ≤ arr[i] ≤ 10^9). The third input line contains a single integer q (1 ≤ q ≤ 10^5), which is the number of queries. The following q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the subsegment for each query. Output Print q lines, where each line contains the maximum integer in the specified subsegment of the array. Examples Input 5 1 3 -2 7 4 3 1 3 2 4 1 5 Output 3 7 7 Input 4 2 6 1 -3 2 1 2 3 4 Output 6 1 Note In the first example, for the first query, the subsegment [1, 3] is [1, 3, -2] and the maximum integer is 3. For the second query, the subsegment [2, 4] is [3, -2, 7] and the maximum integer is 7. Finally, for the third query, the subsegment [1, 5] is [1, 3, -2, 7, 4] and the maximum integer is 7.","solution":"def max_in_range(arr, queries): Returns the maximum integer in the specified subsegment for each query. Parameters: arr (list): The array of integers. queries (list): A list of tuples, each containing two integers representing the range (l, r) (1-based index). Returns: list: A list of integers, each corresponding to the maximum integer in the specified subsegment for each query. results = [] for (l, r) in queries: # Find the maximum in the subsegment l-1 to r-1 (0-based indexing) max_value = max(arr[l-1:r]) results.append(max_value) return results"},{"question":"Given a list of integers, rearrange the list such that the maximum difference between any two adjacent integers is minimized. Your goal is to find the optimal arrangement that minimizes this maximum difference. Input The first line of input contains a single integer n (2 ≤ n ≤ 100), the number of integers in the list. The second line contains n space-separated integers, each representing an element of the list. The values of these integers are guaranteed to be distinct and within the range -10^9 to 10^9. Output Output the rearranged list of integers on a single line, using a space to separate each integer. The rearranged list should minimize the maximum difference between any two adjacent integers. If there are multiple valid arrangements, any one of them will be accepted. Examples Input 5 10 1 4 8 13 Output 1 4 8 10 13 Input 4 -3 7 -5 1 Output -5 -3 1 7 Note In the first sample case, by rearranging the integers as [1, 4, 8, 10, 13], the maximum difference between any two adjacent integers is 4, which is the smallest possible maximum difference for any arrangement. In the second sample case, by rearranging the integers as [-5, -3, 1, 7], the maximum difference between any two adjacent integers is 4, which is minimized for this arrangement.","solution":"def minimize_maximum_difference(arr): This function rearranges the list such that the maximum difference between any two adjacent integers is minimized. arr.sort() return arr"},{"question":"A city is developing a new transportation system which includes tram lines. The tram lines are either vertical or horizontal. The tram lines are represented on a 2D grid by their start and end coordinates. Given a list of tram lines, your task is to determine if any two tram lines cross each other. A tram line is considered to cross another if they share a point which is not an endpoint of either line. **Input Format:** - The first line contains an integer T - the number of test cases. - Each of the next T blocks contains: - An integer M - the number of tram lines. - M lines follow, each containing 4 integers x1, y1, x2, y2 representing the coordinates of the start and end points of a tram line. **Output Format:** - Print \\"YES\\" if there is a pair of crossing tram lines in the test case, otherwise print \\"NO\\". **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ M ≤ 1000 - -10^4 ≤ x1, y1, x2, y2 ≤ 10^4 **SAMPLE INPUT:** ``` 2 3 1 1 1 5 2 2 2 6 1 3 2 3 2 0 0 2 0 1 -1 1 1 ``` **SAMPLE OUTPUT:** ``` YES YES ``` **Explanation:** - For the first test case, the vertical tram lines (1, 1, 1, 5) and (1, 3, 2, 3) cross each other at (1, 3). - For the second test case, the horizontal tram line (0, 0, 2, 0) crosses the vertical tram line (1, -1, 1, 1) at (1, 0).","solution":"def check_crossing_lines(test_cases): results = [] for lines in test_cases: M, tram_lines = lines vertical_lines = [] horizontal_lines = [] for x1, y1, x2, y2 in tram_lines: if x1 == x2: vertical_lines.append((x1, min(y1, y2), max(y1, y2))) elif y1 == y2: horizontal_lines.append((y1, min(x1, x2), max(x1, x2))) crossing_found = False for vx, vy1, vy2 in vertical_lines: for hy, hx1, hx2 in horizontal_lines: if hx1 <= vx <= hx2 and vy1 <= hy <= vy2: crossing_found = True break if crossing_found: break results.append(\\"YES\\" if crossing_found else \\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): M = int(lines[index]) tram_lines = [] for i in range(M): x1, y1, x2, y2 = map(int, lines[index + 1 + i].split()) tram_lines.append((x1, y1, x2, y2)) test_cases.append((M, tram_lines)) index += M + 1 return test_cases"},{"question":"Calculate the sum of factorials from 1 to N. Constraints * 1 ≤ N ≤ 10 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print the sum of factorials from 1 to N. Examples Input 3 Output 9 Input 5 Output 153 Explanation: For the first example: 1! + 2! + 3! = 1 + 2 + 6 = 9. For the second example: 1! + 2! + 3! + 4! + 5! = 1 + 2 + 6 + 24 + 120 = 153.","solution":"def factorial(n): Returns the factorial of n. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def sum_of_factorials(N): Returns the sum of factorials from 1 to N. return sum(factorial(i) for i in range(1, N + 1))"},{"question":"Write a program that performs operations on a dynamic array `arr` with the following functionalities: * `append(x)`: Add the element `x` to the end of the array. * `removeAtIndex(i)`: Remove the element at index `i` if the index is valid (0 ≤ i < current length of the array). * `reverse()`: Reverse the order of elements in the array. * `query(i)`: Return the element at index `i` if the index is valid (0 ≤ i < current length of the array), otherwise return `-1`. Constraints * All inputs are given in integers. * `1 ≤ q ≤ 100000` (number of queries). * Initial array is empty. Input The input is given in the following format. q query_1 query_2 : Each query is of one of the following formats: `append x` `removeAtIndex i` `reverse` `query i` Output For each `query(i)` operation, output the element at index `i` or `-1` if the index is invalid. Example Input 10 append 1 append 2 append 3 query 1 removeAtIndex 1 query 1 append 4 reverse query 0 query 2 Output 2 3 4 1","solution":"class DynamicArray: def __init__(self): self.arr = [] def append(self, x): self.arr.append(x) def removeAtIndex(self, i): if 0 <= i < len(self.arr): self.arr.pop(i) def reverse(self): self.arr.reverse() def query(self, i): if 0 <= i < len(self.arr): return self.arr[i] return -1"},{"question":"Manuela is working on an interesting mathematical puzzle and needs your help to determine the outcome. The puzzle involves a series of numbers and a specific transformation rule. You are given a number n, you need to transform it by repeatedly applying the following rule: If the number is even, divide it by 2; if the number is odd, multiply it by 3 and add 1. The process is repeated until the number becomes 1. Find out after how many steps the number n will transform into 1 if the given rule is repeatedly applied. Input The only line contains a single integer n (1 ≤ n ≤ 10^6). Output Print a single integer representing the number of steps it took for the number n to become 1. Examples Input 6 Output 8 Input 27 Output 111 Note For the first sample test, the transformation process is as follows: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. Thus, it takes 8 steps to reach 1. For the second sample test, it will take longer to reach 1, following the same transformation rule.","solution":"def steps_to_transform_to_one(n): steps = 0 while n != 1: if n % 2 == 0: n = n // 2 else: n = n * 3 + 1 steps += 1 return steps"},{"question":"Problem Statement You are given an integer array `arr` of size `n`. Your task is to find two indices `i` and `j` (1-based indexing) such that the sum of the elements at these indices is closest to zero. If there are multiple pairs with the same closest sum to zero, return the one with the smallest `i`. If there are still multiple pairs, return the one with the smallest `j`. Constraints * 2 ≤ n ≤ 1,000 * -10^5 ≤ arr[k] ≤ 10^5 Input Input follows the following format. All given numbers are integers. ``` n arr_1 arr_2 ... arr_n ``` Output Output the pair of indices (i, j) such that the sum of `arr[i-1] + arr[j-1]` is closest to zero. If there are multiple pairs with the same closest sum to zero, return the one with the smallest `i`. If there are still multiple pairs, return the one with the smallest `j`. Examples Input: ``` 5 -2 4 1 -3 2 ``` Output: ``` 1 5 ``` Input: ``` 3 -1 1 3 ``` Output: ``` 1 2 ```","solution":"def find_indices_with_closest_sum_to_zero(n, arr): Finds two indices i and j (1-based indexing) such that the sum of the elements at these indices is closest to zero. closest_sum = float(\'inf\') closest_pair = (0, 0) for i in range(n): for j in range(i + 1, n): current_sum = arr[i] + arr[j] if abs(current_sum) < abs(closest_sum) or (abs(current_sum) == abs(closest_sum) and (i + 1 < closest_pair[0] or (i + 1 == closest_pair[0] and j + 1 < closest_pair[1]))): closest_sum = current_sum closest_pair = (i + 1, j + 1) return closest_pair"},{"question":"A group of N people are sitting in a circle, numbered from 1 to N in a clockwise manner. They intend to play a game where they eliminate every K-th person around the circle until only one person remains. Eliminations are performed in the same circular order. Your task is to determine the position of the last person remaining after all eliminations are complete. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains two positive integers N and K. 1 <= T <= 100 1 <= N <= 10^6 1 <= K <= 10^9 Output For each test case, output the position of the last person remaining in the circle. Example Input: 3 5 2 7 3 10 1 Output: 3 4 10 Explanation: For the first case, We start with people numbered 1 to 5. Eliminations proceed as follows: 1. Eliminate person at position 2 (Remaining: 1, 3, 4, 5) 2. Eliminate person at position 4 (Remaining: 1, 3, 5) 3. Eliminate person at position 1 (Remaining: 3, 5) 4. Eliminate person at position 5 (Remaining: 3) Thus, the last person remaining is at position 3. For the second case, We start with people numbered 1 to 7. Eliminations proceed as follows: 1. Eliminate person at position 3 (Remaining: 1, 2, 4, 5, 6, 7) 2. Eliminate person at position 6 (Remaining: 1, 2, 4, 5, 7) 3. Eliminate person at position 2 (Remaining: 1, 4, 5, 7) 4. Eliminate person at position 7 (Remaining: 1, 4, 5) 5. Eliminate person at position 5 (Remaining: 1, 4) 6. Eliminate person at position 1 (Remaining: 4) Thus, the last person remaining is at position 4. For the third case, Since K=1, eliminations proceed sequentially from 1 to 10: 1. Eliminate person at position 1 2. Eliminate person at position 2 3. Eliminate person at position 3 4. ... 9. Eliminate person at position 9 10. Eliminate person at position 10 Thus, the last person remaining is at position 10.","solution":"def josephus_position(n, k): Determine the position of the last remaining person in the Josephus problem. Arguments: n -- the number of people in the circle k -- the interval of elimination Returns: The position of the last person remaining. result = 0 for i in range(1, n+1): result = (result + k) % i return result + 1 def solve_josephus(test_cases): Returns the positions of the last remaining persons for multiple test cases. Arguments: test_cases -- a list of tuples where each tuple contains two integers (N, K) Returns: A list of results for each test case. return [josephus_position(n, k) for n, k in test_cases]"},{"question":"Flora loves collecting apples. She has a collection of apples, each with a different weight. Flora wants to know if she can divide her apples into two groups such that the total weight of the apples in both groups is the same. Constraints * 1≦n≦20 * 1≦wi≦100 Input The input is given from Standard Input in the following format: ``` n w1 w2 w3 ... wn ``` Where n is the number of apples, and wi is the weight of the i-th apple. Output If it is possible to divide the apples into two groups with the same total weight, print `YES` (case-sensitive). Otherwise, print `NO`. Examples Input 4 1 5 7 1 Output YES Input 3 1 3 5 Output NO","solution":"def can_divide_equal_weight(n, weights): total_weight = sum(weights) # If the total weight is odd, it can\'t be divided into two equal parts if total_weight % 2 != 0: return \\"NO\\" target = total_weight // 2 dp = [False] * (target + 1) dp[0] = True for weight in weights: for j in range(target, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"John is working on a large dataset and needs to extract important information from it. Specifically, he needs to identify and count duplicate entries based on a specific key field, and then generate a report summarizing the duplicates. Given a list of records, where each record is represented as a string in the format \\"id:name:value\\", write a program to identify the duplicates based on the `id` field. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of records. Each of the following n lines contains a record in the format \\"id:name:value\\", where: - `id` is a string of alphanumeric characters without spaces. - `name` is a string of alphanumeric characters without spaces. - `value` is an integer (−10^9 ≤ value ≤ 10^9). Output Print the number of unique `id`s and count of duplicates for each duplicate `id` in the format \\"id:count\\". Examples Input 5 123:Alice:100 124:Bob:200 123:Carol:150 125:Eve:-50 123:Dave:120 Output 2 123:3 Input 7 abc:John:10 xyz:Jane:20 abc:Anna:30 def:Tom:40 xyz:Jerry:50 ghi:Mick:60 def:Nina:70 Output 3 abc:2 xyz:2 def:2","solution":"def find_duplicates(records): from collections import defaultdict id_count = defaultdict(int) for record in records: id_field = record.split(\':\')[0] id_count[id_field] += 1 unique_ids = [k for k, v in id_count.items() if v == 1] duplicate_ids = {k: v for k, v in id_count.items() if v > 1} result = [len(unique_ids)] for id, count in sorted(duplicate_ids.items()): result.append(f\\"{id}:{count}\\") return result def parse_input(input_string): input_lines = input_string.strip().split(\'n\') n = int(input_lines[0].strip()) records = input_lines[1:] return n, records def main(input_string): n, records = parse_input(input_string) return find_duplicates(records)"},{"question":"Bobby is fascinated by palindromes and decides to create a function to find the smallest palindrome larger than a given number. A palindrome is a number that reads the same backward as forward. For this task, the given number will consist of digits from 1 to 9 (inclusive) and can be as large as 10^5 digits. Your task is to help Bobby by implementing a function that outputs the smallest palindrome larger than the given number. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string representing a positive integer N. Output: For each input N, output one line containing the smallest palindrome larger than N. If there is no such palindrome, print \\"Not possible!\\" (without quotes). Constraints: 1 ≤ T ≤ 10 1 ≤ Length of N ≤ 10^5 Scoring: 1 ≤ T ≤ 10, 1 ≤ Length of N ≤ 10 (20 pts) 1 ≤ T ≤ 10, 10 ≤ Length of N ≤ 10^3 (30 pts) 1 ≤ T ≤ 10, 1000 ≤ Length of N ≤ 10^5 (50 pts) SAMPLE INPUT 3 123 4 999 SAMPLE OUTPUT 131 5 1001 Explanation Case 1: The smallest palindrome larger than 123 is 131. Case 2: The smallest palindrome larger than 4 is 5. Case 3: The smallest palindrome larger than 999 is 1001. Note: There will always be a valid palindrome for the given ranges of N, so \\"Not possible!\\" will never be printed in this problem\'s constraints.","solution":"def next_palindrome(n): # Convert the string number to an integer n = int(n) # Increment n to start checking the next numbers n += 1 # Convert the number back to string to check if it\'s a palindrome while True: if str(n) == str(n)[::-1]: return str(n) n += 1 def smallest_palindrome_bigger_than_n(test_cases): results = [] for n in test_cases: results.append(next_palindrome(n)) return results"},{"question":"The management at XYZ Industries wants to ensure that their inventory system is optimized for tracking stock levels. They have an automated system updating stock records based on sales transactions and restocking events. The inventory is currently managed by recording changes in stock levels over time. Each record consists of a timestamp and a quantity, where a positive quantity indicates restocking and a negative quantity indicates sales. Given a list of time-stamped stock changes, you need to determine the stock level at the latest recorded timestamp and decide whether more stock is required. The reorder threshold is given, and if the final stock level is below this threshold, more stock needs to be ordered. INPUT: The first line contains two integers n and t_reorder, the number of stock changes and the reorder threshold respectively. The next n lines each contain two integers, time t and quantity q. OUTPUT: Print a single string - \\"Order More Stock\\" if the final stock level is below the reorder threshold, or \\"Stock Level Sufficient\\" if the stock level meets or exceeds the threshold. CONSTRAINTS: 1 ≤ n ≤ 10^6 0 ≤ t ≤ 10^8 -10^6 ≤ q ≤ 10^6 0 ≤ t_reorder ≤ 10^6 SAMPLE INPUT: 3 50 5 30 10 -20 15 25 SAMPLE OUTPUT: Stock Level Sufficient Explanation: The stock changes are: - At time 5, stock increases by 30, making the stock 30. - At time 10, stock decreases by 20 (sale), making the stock 10. - At time 15, stock increases by 25, making the stock 35. The final stock level is 35, which is below the reorder threshold of 50. Therefore, the output should be: Order More Stock","solution":"def check_stock(n, t_reorder, changes): Determines the stock level at the latest recorded timestamp and decides whether more stock is required. Args: n (int): number of stock changes t_reorder (int): reorder threshold changes (list): a list of tuples (t, q), where t is time and q is quantity change Returns: str: \\"Order More Stock\\" or \\"Stock Level Sufficient\\" final_stock = 0 for change in changes: time, quantity = change final_stock += quantity if final_stock < t_reorder: return \\"Order More Stock\\" else: return \\"Stock Level Sufficient\\""},{"question":"Alicia and Bob are participating in an endurance marathon which involves a series of tasks to be completed sequentially. Each task has a certain energy requirement, and Alicia and Bob have a limited amount of total energy. Each participant must decide independently how much energy to allocate to each task before they start the marathon. The energy allocated to each task can not be changed once the marathon begins. If the allocated energy does not meet the requirement of a task, the participant is disqualified. The winner is the participant who completes the most tasks. In case of a tie, the participant who has more remaining energy wins. You are to determine whether Alicia or Bob will win if both participants follow the optimal strategy for energy allocation. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of tasks. The second line contains n integers e1, e2, ..., en (1 ≤ e_i ≤ 104) — the energy requirements for each task. The third line contains two integers E_Alicia and E_Bob (1 ≤ E_Alicia, E_Bob ≤ 109) — the total energy available to Alicia and Bob, respectively. Output Output \\"Alicia\\" if Alicia wins, \\"Bob\\" if Bob wins, and \\"Tie\\" if it\'s a tie. Example Input 5 1 2 3 4 5 10 12 Output Bob","solution":"def endurance_marathon_winner(n, energy_requirements, E_Alicia, E_Bob): energy_requirements.sort() def max_tasks_and_remaining_energy(E_total): tasks_completed = 0 remaining_energy = E_total for energy in energy_requirements: if remaining_energy >= energy: tasks_completed += 1 remaining_energy -= energy else: break return tasks_completed, remaining_energy alicia_tasks, alicia_energy_left = max_tasks_and_remaining_energy(E_Alicia) bob_tasks, bob_energy_left = max_tasks_and_remaining_energy(E_Bob) if alicia_tasks > bob_tasks: return \\"Alicia\\" elif bob_tasks > alicia_tasks: return \\"Bob\\" else: if alicia_energy_left > bob_energy_left: return \\"Alicia\\" elif bob_energy_left > alicia_energy_left: return \\"Bob\\" else: return \\"Tie\\""},{"question":"Create a program that checks if a given string is a valid palindrome and then determines the longest palindromic substring within that string. Input A single string consisting of lowercase letters. Output First, output \\"YES\\" if the entire input string is a palindrome, otherwise output \\"NO\\". Next, output the longest palindromic substring within the input string. Examples Input racecar Output YES racecar Input banana Output NO anana Input aabcb Output NO bcb Explanation In the first example, the input string \\"racecar\\" is a palindrome, so the output is \\"YES\\" followed by \\"racecar\\" which is also the longest palindromic substring. In the second example, the string \\"banana\\" is not a palindrome, so the output is \\"NO\\" followed by \\"anana\\" which is the longest palindromic substring. In the third example, the string \\"aabcb\\" is not a palindrome, so the output is \\"NO\\" followed by \\"bcb\\" which is the longest palindromic substring.","solution":"def is_palindrome(s): Checks if the entire string s is a palindrome. return s == s[::-1] def longest_palindromic_substring(s): Finds the longest palindromic substring in s. n = len(s) if n == 0: return \\"\\" # Initialize the table to store palindrome status table = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True start = 0 max_length = 1 # Check for substring of length 2 for i in range(n - 1): if s[i] == s[i + 1]: table[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Check if s[i] to s[j] is a palindrome if s[i] == s[j] and table[i + 1][j - 1]: table[i][j] = True start = i max_length = length return s[start:start + max_length] def check_palindrome_and_longest_substring(s): if is_palindrome(s): return \\"YES\\", s else: return \\"NO\\", longest_palindromic_substring(s)"},{"question":"In a faraway land, there exists a legendary puzzle master who designs intricate mazes. These mazes are built on an NxM grid, and each cell is either a wall (\'#\') or an open path (\'.\'). The mazes have a peculiar rule: the master places exactly one special key in one of the open cells, indicated by the character \'K\'. The goal for a puzzle solver is to determine whether there exists at least one way to reach the key from any open cell using valid moves. The valid moves are defined as: - Moving one cell up, down, left, or right. - Moving is allowed only through open path cells (\'.\'). Given an NxM maze, determine if there\'s a way to reach the key \'K\' from any open cell. If it is possible to reach the key from any open cell, the answer is \\"YES\\". Otherwise, the answer is \\"NO\\". Input: - The first line contains two integers, N and M (1 ≤ N, M ≤ 1000) — the dimensions of the maze. - The next N lines each contain M characters, describing the current layout of the maze. Each character is either \'.\', \'#\', or \'K\'. - It is guaranteed that there is exactly one \'K\' in the maze. Output: - Print \\"YES\\" if there is at least one way to reach the key from any open cell, otherwise print \\"NO\\". Examples: Input: 4 4 .... ..#K .... .... Output: YES Input: 3 3 # #K# # Output: NO Note: In the first example, there are multiple open paths to reach the key \'K\' from any open cell. Therefore, the output is \\"YES\\". In the second example, the key \'K\' is surrounded by walls, so it is impossible to reach it from any open cell. Thus, the output is \\"NO\\".","solution":"def can_reach_key(maze): N, M = len(maze), len(maze[0]) def find_key(): for i in range(N): for j in range(M): if maze[i][j] == \'K\': return i, j return None def bfs(start_row, start_col): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = [(start_row, start_col)] visited = set() visited.add((start_row, start_col)) while queue: row, col = queue.pop(0) for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < N and 0 <= c < M and (r, c) not in visited: if maze[r][c] == \'K\': return True if maze[r][c] == \'.\': visited.add((r, c)) queue.append((r, c)) return False key_row, key_col = find_key() if key_row is None: return \\"NO\\" for i in range(N): for j in range(M): if maze[i][j] == \'.\': if bfs(i, j): return \\"YES\\" return \\"NO\\" # Input N, M = 4, 4 maze = [ \\"....\\", \\"..#K\\", \\"....\\", \\"....\\" ] print(can_reach_key(maze)) # Expects: YES"},{"question":"A company stores records of employees\' work hours in a database. Each record includes the employee\'s ID, a timestamp marking the beginning of a work session, and a timestamp marking the end of the work session. Given that the employees might have multiple sessions per day, you are asked to implement a function that calculates the total number of hours worked by each employee in a given day. Your task is to write a function that takes a list of work records and a specific date, and returns a dictionary where each key is an employee ID and each value is the total hours worked by that employee on that date. Input The function will receive the following parameters: 1. A list of records, where each record is a dictionary with the following keys: - \'employee_id\': a string representing the employee\'s ID - \'start\': a string in the format \'YYYY-MM-DD HH:MM:SS\' representing the start time of a work session - \'end\': a string in the format \'YYYY-MM-DD HH:MM:SS\' representing the end time of a work session 2. A string representing the date in the format \'YYYY-MM-DD\' Output The function should return a dictionary where: - each key is a string representing an employee\'s ID, - each value is a float representing the total hours worked by that employee on the given date, rounded to two decimal places. Example Input records = [ {\'employee_id\': \'E123\', \'start\': \'2023-05-12 09:00:00\', \'end\': \'2023-05-12 17:00:00\'}, {\'employee_id\': \'E123\', \'start\': \'2023-05-12 19:00:00\', \'end\': \'2023-05-12 21:00:00\'}, {\'employee_id\': \'E456\', \'start\': \'2023-05-12 08:00:00\', \'end\': \'2023-05-12 16:00:00\'}, {\'employee_id\': \'E456\', \'start\': \'2023-05-13 07:00:00\', \'end\': \'2023-05-13 15:00:00\'} ] date = \'2023-05-12\' Output { \'E123\': 10.00, \'E456\': 8.00 } Note In the given example, \'E123\' worked two shifts on \'2023-05-12\': from 09:00 to 17:00 (8 hours), and from 19:00 to 21:00 (2 hours), thus a total of 10 hours. \'E456\' worked a single shift of 8 hours on \'2023-05-12\'. Shifts on other dates are ignored.","solution":"from datetime import datetime def calculate_hours_worked(records, date): Calculate the total number of hours worked by each employee on a given date. :param records: List of dictionaries, each containing: - \'employee_id\': string, employee\'s ID - \'start\': string, start time in \'YYYY-MM-DD HH:MM:SS\' format - \'end\': string, end time in \'YYYY-MM-DD HH:MM:SS\' format :param date: string, the date to calculate hours for in \'YYYY-MM-DD\' format :return: Dictionary where keys are employee IDs and values are total hours worked on the given date. work_hours = {} for record in records: # Parse the start and end times start_time = datetime.strptime(record[\'start\'], \'%Y-%m-%d %H:%M:%S\') end_time = datetime.strptime(record[\'end\'], \'%Y-%m-%d %H:%M:%S\') # Check if the session is on the correct date if start_time.strftime(\'%Y-%m-%d\') == date: employee = record[\'employee_id\'] hours_worked = (end_time - start_time).total_seconds() / 3600 if employee in work_hours: work_hours[employee] += hours_worked else: work_hours[employee] = hours_worked # Round the hours to two decimal places for employee in work_hours: work_hours[employee] = round(work_hours[employee], 2) return work_hours"},{"question":"A famous game developer is creating a new challenging puzzle game that involves managing a grid of characters. The player needs to identify and transform specific patterns in the grid. Given a grid of size m x n filled with lowercase letters, the objective is to find all the occurrences of the word \\"level\\" vertically or horizontally in the grid and output the coordinates of the starting and ending positions for each occurrence. Note: The coordinates are given as (row, column) starting from (0, 0) in the top-left corner of the grid. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the grid respectively. The following m lines each contain a string of n lowercase letters representing the grid. Output Print the starting and ending coordinates for each occurrence of the word \\"level\\". Each line should contain four integers separated by a space: the starting row, starting column, ending row, and ending column. If there are no occurrences, output \\"No occurrences found\\". Example Input 4 5 level xlevl opevl level Output 0 0 0 4 3 0 3 4 Explanation In row 0, the word \\"level\\" starts at (0, 0) and ends at (0, 4). In row 3, the word \\"level\\" also starts at (3, 0) and ends at (3, 4).","solution":"def find_word_occurrences(m, n, grid): target_word = \\"level\\" word_len = len(target_word) occurrences = [] # Check horizontally for r in range(m): for c in range(n - word_len + 1): if grid[r][c:c + word_len] == target_word: occurrences.append((r, c, r, c + word_len - 1)) # Check vertically for c in range(n): for r in range(m - word_len + 1): if \\"\\".join(grid[r + i][c] for i in range(word_len)) == target_word: occurrences.append((r, c, r + word_len - 1, c)) if not occurrences: return \\"No occurrences found\\" return occurrences"},{"question":"Chris is a logistics manager at a company that works with multiple suppliers. Given a list of delivery amounts, he needs to determine the maximum total value of goods that can be redistributed from the company’s warehouse in certain order ranges. The company will select a specified number of contiguous ranges of deliveries in a way that each range is selected exactly once and the ranges do not overlap. Given a sequence of n integers representing the delivery amounts and two integers m and k, representing the length of each range to be selected and the number of ranges to select, respectively, find the maximum possible total sum of values from selecting exactly k non-overlapping ranges of length m. # Input The first line contains three integers n, m, and k (1 ≤ (m × k) ≤ n ≤ 5000). The second line contains n integers where each integer represents a delivery amount (0 ≤ amount ≤ 10^9). # Output Print a single integer, the maximum total sum of the values from selecting exactly k non-overlapping ranges of length m. # Example Input ``` 8 3 2 3 1 4 1 5 9 2 6 ``` Output ``` 27 ``` Input ``` 10 2 2 7 6 3 5 2 8 9 0 4 1 ``` Output ``` 30 ``` # Note In the first example, the optimal ranges to select are [1, 5, 9] and [2, 6], giving the maximum sum of 15 + 12 = 27.","solution":"def max_delivery_sum(n, m, k, delivery): Returns the maximum total sum of values from selecting exactly k non-overlapping ranges of length m. # Calculate prefix sums to support quick range sum calculations prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + delivery[i] # Define dp array dp = [[0] * (k + 1) for _ in range(n + 1)] for j in range(1, k + 1): for i in range(j * m, n + 1): dp[i][j] = max(dp[i - m][j - 1] + (prefix_sums[i] - prefix_sums[i - m]), dp[i - 1][j]) return dp[n][k]"},{"question":"Given an array of integers, find the size of the longest continuous subarray such that each element in the subarray is equal. Input The first line of the input will contain an integer N (1 ≤ N ≤ 10^5) — the number of elements in the array. The second line contains N space-separated integers representing the elements of the array. Output Output a single integer — the size of the longest continuous subarray with equal elements. Examples Input 5 1 1 2 2 2 Output 3 Input 6 3 3 3 1 1 3 Output 3 Input 1 7 Output 1","solution":"def longest_equal_subarray(arr): Given an array of integers, find the size of the longest continuous subarray such that each element in the subarray is equal. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a program that computes the factorial of a number N. The factorial of a number N is defined as the product of all positive integers less than or equal to N. The program should be based on the following iterative pseudocode: Factorial(N) 1 result = 1 2 for i = 1 to N 3 result = result * i 4 return result Note that, the indices for array elements are based on 0-origin. Your program should also print the count of multiplication operations defined in line 3 of the pseudocode. Constraints 1 ≤ N ≤ 20 Input The input includes a single integer N, the number for which the factorial is to be calculated. Output The output consists of 2 lines. In the first line, please print the factorial of the number N. In the second line, please print the number of multiplication operations. Examples Input 5 Output 120 4 Input 6 Output 720 5","solution":"def factorial(N): Computes the factorial of N and counts the number of multiplication operations. Returns a tuple (factorial, multiplication_count). result = 1 multiplication_count = 0 for i in range(1, N + 1): result *= i if i > 1: # multiplication only occurs for i > 1 multiplication_count += 1 return result, multiplication_count"},{"question":"You are given an array of n integers and a sequence of q queries. Each query specifies a range [l, r] and you have to determine the number of distinct integers within that range. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the range for each query. Output For each query, print the number of distinct integers in the specified range. Examples Input 5 3 1 2 1 3 2 1 3 2 4 1 5 Output 2 3 3","solution":"def count_distinct_in_range(arr, queries): Counts the number of distinct integers in the specified range for each query. Parameters: arr (List[int]): The list of integers. queries (List[Tuple[int, int]]): The list of range queries. Returns: List[int]: The list of results for each query. results = [] for l, r in queries: distinct_count = len(set(arr[l-1:r])) results.append(distinct_count) return results"},{"question":"You are given a list of n integers representing the population of n cities. Each integer specifies the population of a city at a certain time point. However, due to an error, some population data might be missing and are represented by -1. Your task is to fill the missing population data such that the change in population between two consecutive cities is the minimum possible. There may be multiple ways to fill the missing data to achieve the minimum possible changes, but you need to find one of these ways. If it\'s impossible to fill in the missing data under the constraints given, return -1 for that particular test case. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 100) — the number of cities. The second line of each test case contains n integers p_0, p_1, ..., p_{n - 1} (0 ≤ p_i ≤ 10^9 or p_i = -1) — the list of city populations, where -1 indicates missing data. Output For each test case, print a single line containing the modified population list with the minimum possible changes. If it\'s impossible to fill in the missing data, print -1. Example Input 2 5 1 -1 3 4 5 4 -1 -1 3 4 Output 1 2 3 4 5 -1 Note In the first test case, the list of populations is [1, -1, 3, 4, 5]. We need to fill the missing data such that the change is minimized: 1. The missing population at index 1 can be filled with 2 (which is the average of previous population 1 and next population 3). Thus, the modified list is [1, 2, 3, 4, 5]. In the second test case, we cannot find a valid way to fill the missing populations under the constraints. Thus, the output is -1.","solution":"def fill_missing_populations(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] populations = test_cases[i][1] if populations[0] == -1 or populations[-1] == -1: results.append(-1) continue for j in range(1, n - 1): if populations[j] == -1: prev_population = populations[j - 1] next_population = populations[j + 1] if next_population != -1: populations[j] = (prev_population + next_population) // 2 else: results.append(-1) break else: results.append(\' \'.join(map(str, populations))) continue results.append(-1) return results # Example usage t = 2 test_cases = [ (5, [1, -1, 3, 4, 5]), (4, [-1, -1, 3, 4]) ] fill_missing_populations(t, test_cases)"},{"question":"You are given an unordered list of integers. Your task is to arrange these integers into a sequence such that the final sequence alternates between even and odd numbers. If it is not possible to arrange the integers in such a way, you should return an empty list. The final sequence should start with the smallest possible number, with even and odd numbers alternating. If there are multiple valid sequences, return the sequence that is lexicographically smallest. Input: * An integer n (1 ≤ n ≤ 100), the number of integers in the list. * A list of n integers. Output: * A list of n integers, arranged to alternate between even and odd numbers. If no valid arrangement is possible, return an empty list. Examples: Input: 6 8 3 5 2 7 6 Output: [2, 3, 6, 5, 8, 7] Input: 5 1 2 3 4 5 Output: [1, 2, 3, 4, 5] Input: 4 2 4 6 8 Output: [] Note: In the first example, the smallest possible sequence that alternates between even and odd numbers is [2, 3, 6, 5, 8, 7]. In the second example, it is not possible to alternate an odd number of integers while maintaining the alternating pattern, so the output is an empty list.","solution":"def alternate_even_odd(n, nums): Arrange the integers in the list to alternate between even and odd numbers starting with the smallest possible number. If not possible, return an empty list. even_nums = sorted([num for num in nums if num % 2 == 0]) odd_nums = sorted([num for num in nums if num % 2 != 0]) # If the number difference between even and odd numbers is more than 1, return [] if abs(len(even_nums) - len(odd_nums)) > 1: return [] result = [] start_with_even = (even_nums and (not odd_nums or even_nums[0] < odd_nums[0])) # Create the sequence starting with the smallest possible number while even_nums or odd_nums: if start_with_even and even_nums: result.append(even_nums.pop(0)) start_with_even = False elif not start_with_even and odd_nums: result.append(odd_nums.pop(0)) start_with_even = True else: return [] return result"},{"question":"Tom loves playing with numbers. He has a list of integers, and he wants to find out if there exists a pair of integers in the list such that their sum is equal to a given target value. Tom knows that there could be multiple pairs in large lists, but he is only interested in finding one such pair, if it exists. This problem can be solved by checking each pair of numbers in the list, but Tom wonders if there is a faster way to get the result. Can you help Tom write a program to find if there\'s a pair with a given sum in the list? Input: The first line contains a single integer n (2 ≤ n ≤ 10^5) representing the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9). The third line contains a single integer x (−2×10^9 ≤ x ≤ 2×10^9) representing the target sum. Output: Print \\"Yes\\" (without the quotes) if there exists at least one pair of integers in the list whose sum is equal to the target value x. Otherwise, print \\"No\\" (without the quotes). Example 1: Input: 5 1 2 3 4 5 9 Output: Yes Example 2: Input: 4 2 7 11 15 18 Output: Yes Example 3: Input: 3 1 2 3 7 Output: No Hints: - Use a hash set to store the elements of the list as you iterate through it. - For each element in the list, check if (target_value - element) already exists in the hash set.","solution":"def find_pair_with_sum(n, arr, target): Returns \\"Yes\\" if there exists at least one pair of integers in the list whose sum is equal to the target value x. Otherwise, returns \\"No\\". seen = set() for num in arr: if target - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\""},{"question":"A social media platform wants to track the influence of its users. They define a user\'s \\"influence score\\" as the total number of direct followers they have and the total number of followers their direct followers have across the entire platform. Each user is uniquely identified by a user ID (an integer). Given the influence relationships between users, you need to compute the influence score for a specific user. Input: The first line will contain a positive integer t - number of test cases. For each test case, the first line will contain two space-separated integers n (number of users) and m (number of influence relationships). Each of the next m lines will contain two integers a and b, denoting that user a follows user b. The last line of each test case will contain a single integer u, the user ID for which the influence score should be calculated. Output: For each test case, output a single line containing the influence score of the given user u. Constraints: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 10^4 1 ≤ a, b, u ≤ n SAMPLE INPUT 1 5 4 1 2 1 3 2 4 3 5 1 SAMPLE OUTPUT 4","solution":"from collections import defaultdict, deque def influence_score(t, test_cases): results = [] for test_case in test_cases: n, m, relationships, u = test_case followers = defaultdict(set) followed_by = defaultdict(set) for a, b in relationships: followers[a].add(b) followed_by[b].add(a) direct_followers = followers[u] influence_count = len(direct_followers) indirect_followers_set = set() for follower in direct_followers: for indirect_follower in followers[follower]: if indirect_follower != u: # avoid counting self indirect_followers_set.add(indirect_follower) influence_count += len(indirect_followers_set) results.append(influence_count) return results"},{"question":"Given a set of N integers, you need to modify the array by processing D instructions. Each instruction consists of two integers [P, K] and it denotes the position P and a value K. For each instruction, increment the value at position P in the array by K. After processing all the instructions, determine the sum of the values in the modified array on the range from index L to R (inclusive) for each of Q queries. Input: First line contains N - the number of integers in the array. Second line contains D - number of instructions. Each of the next D lines contains two space-separated integers P and K. The next line contains Q - number of queries. Each of the next Q lines contains two space-separated integers L and R. Output: For each query, output the result in a new line. Constraints: 1 ≤ N ≤ 1000000 1 ≤ D ≤ 1000000 1 ≤ P ≤ N 1 ≤ K ≤ 1000 1 ≤ Q ≤ 1000000 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 1 5 2 3 5 2 2 1 5 2 4 SAMPLE OUTPUT 10 8 Explanation Initially, the array is: arr = [0, 0, 0, 0, 0] After the first instruction: arr = [5, 0, 0, 0, 0] After the second instruction: arr = [5, 3, 0, 0, 0] After the third instruction: arr = [5, 3, 0, 0, 2] Now we process the queries: Query 1: Sum from index 1 to 5 is 5 + 3 + 0 + 0 + 2 = 10 Query 2: Sum from index 2 to 4 is 3 + 0 + 0 = 3","solution":"def process_instructions_and_queries(N, D, instructions, Q, queries): array = [0] * N # Apply each instruction for P, K in instructions: array[P-1] += K # Precompute prefix sums prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i-1] + array[i-1] result = [] for L, R in queries: result.append(prefix_sums[R] - prefix_sums[L-1]) return result"},{"question":"Esha is playing a game where she has to arrange a set of cards in a particular order. Each card has a unique integer value, and the correct order of cards is strictly increasing based on these values. However, there are duplicate cards mixed with these unique cards, and she can only remove the duplicates to form the correct order. Your task is to determine the longest possible sequence of cards she can form in strictly increasing order by removing the least number of duplicates. Input: The input begins with a positive integer N (N ≤ 10^6) representing the number of cards. The next line contains N space-separated integers, each representing the value of a card (these values can be negative or positive and will fit within a 32-bit signed integer). Output: Print a single integer representing the length of the longest possible strictly increasing sequence of cards. SAMPLE INPUT 6 3 1 2 2 4 3 SAMPLE OUTPUT 4","solution":"def longest_increasing_sequence_length(cards): Returns the length of the longest strictly increasing sequence by removing duplicates. unique_cards = sorted(set(cards)) return len(unique_cards) # Example usage cards = [3, 1, 2, 2, 4, 3] print(longest_increasing_sequence_length(cards)) # Output: 4"},{"question":"A coding tournament is ongoing, and the organizers have decided to keep track of various statistics for each participant. One such statistic involves keeping track of the daily score for every participant. Given the daily score data for multiple participants for several days, your task is to create a program that can quickly answer specific queries related to a participant\'s score. Each query asks for the sum of scores of a participant within a given range of days. Input Format First, you are given two integers n and m. - `n` (2 <= n <= 100,000) is the number of participants. - `m` (1 <= m <= 100,000) is the number of days. Next, you are given a matrix A of size n x m where A[i][j] (0 <= A[i][j] <= 1000) represents the score of the i-th participant on the j-th day. Next, you are given an integer q (1 <= q <= 100,000) denoting the number of queries. Each of the following q lines contains three integers pi, di, and dj (1 <= pi <= n, 1 <= di <= dj <= m), which represents the i-th query asking for the sum of scores of pi-th participant from the di-th day to dj-th day (inclusive). Output Format For each query, output a single integer representing the sum of scores of the specified participant within the given range of days. Input example 1 3 5 10 20 30 40 50 5 15 25 35 45 100 200 300 400 500 2 1 1 3 3 2 4 Output example 1 60 900 Explanation For the first query (1 1 3): The sum of the scores of participant 1 from day 1 to day 3 is 10 + 20 + 30 = 60. For the second query (3 2 4): The sum of the scores of participant 3 from day 2 to day 4 is 200 + 300 + 400 = 900.","solution":"def sum_of_scores(n, m, scores, q, queries): Calculates the sum of scores of a specified participant within a given range of days for each query. Args: n (int): Number of participants. m (int): Number of days. scores (list of list of int): Score matrix of size n x m. q (int): Number of queries. queries (list of tuple): List of queries where each query is (pi, di, dj). Returns: list of int: List containing result for each query. results = [] # Process each query for pi, di, dj in queries: # Convert to zero-based index pi -= 1 di -= 1 dj -= 1 # Calculate the sum for the given range. query_sum = sum(scores[pi][di:dj + 1]) results.append(query_sum) return results"},{"question":"Given a sequence of integers, A1, A2, ... An, arrange them into a binary search tree following these criteria: 1. The root of the tree is the first element of the sequence. 2. The left subtree of a node contains only nodes with values less than the node\'s value, and the right subtree of a node contains only nodes with values greater than the node\'s value. 3. No value in the sequence is repeated. After constructing the binary search tree, perform an in-order traversal of the tree and return the sequence of values. An in-order traversal of a binary search tree visits nodes in ascending order of their values. Write a function: ```python def bst_inorder_traversal(arr: List[int]) -> List[int]: ``` - arr: a list of integers where 1 ≤ len(arr) ≤ 10^5. Your function should return a list of integers representing the in-order traversal of the binary search tree constructed from the input sequence. # Example Input: ```python arr = [10, 5, 1, 7, 40, 50] ``` Output: ```python [1, 5, 7, 10, 40, 50] ``` Explanation: The given sequence constructs the following binary search tree: ``` 10 / 5 40 / 1 7 50 ``` The in-order traversal visits nodes in the following order: 1, 5, 7, 10, 40, 50. Hence, the output is [1, 5, 7, 10, 40, 50].","solution":"from typing import List class TreeNode: def __init__(self, value): self.left = None self.right = None self.value = value class BinarySearchTree: def __init__(self): self.root = None def insert(self, value): if self.root is None: self.root = TreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node, value): if value < node.value: if node.left is None: node.left = TreeNode(value) else: self._insert_recursive(node.left, value) else: if node.right is None: node.right = TreeNode(value) else: self._insert_recursive(node.right, value) def inorder_traversal(self): result = [] self._inorder_recursive(self.root, result) return result def _inorder_recursive(self, node, result): if node is not None: self._inorder_recursive(node.left, result) result.append(node.value) self._inorder_recursive(node.right, result) def bst_inorder_traversal(arr: List[int]) -> List[int]: bst = BinarySearchTree() for value in arr: bst.insert(value) return bst.inorder_traversal()"},{"question":"You are given a grid with a number of different types of tiles. Each tile type carries with it a time cost for traversal. Write an algorithm that calculates the minimum time required to travel from the top-left corner of the grid to the bottom-right corner. You can only move right or down from a given tile. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the size of the grid (number of rows and columns, respectively). - The next n lines each contain m integers representing the tile traversal time t_ij (1 ≤ t_ij ≤ 1000) for the grid. Output: - Print a single integer - the minimum time required to travel from the top-left corner to the bottom-right corner of the grid. Example Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum traversal time is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) with a total cost of 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_traversal_time(n, m, grid): dp = [[0] * m for _ in range(n)] # Create a DP table # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the result return dp[n-1][m-1] # Example usage code (would normally be outside the function file) n, m = 3, 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] result = min_traversal_time(n, m, grid) print(result) # Output should be 7"},{"question":"You are conducting an experiment to understand how different types of compounds interact with each other to form a stable mixture. You have `n` types of compounds, and you have `a_i` units of the i-th type of compound available. The stability of the mixture is determined by the following formula: S(c_1,…,c_n)=∑_{i=1}^n c_i(a_i-c_i^2). Here, `c_i` denotes the number of units of the i-th type of compound you include in the mixture. You cannot include more units than you have, so you require `0 ≤ c_i ≤ a_i` for all i. You want to create a mixture with exactly `m` units in total, and the mixture must be stable. Therefore, it is required that `∑_{i=1}^n c_i = m`. Determine the number of units `c_1, …, c_n` for each type of compound that maximizes the value of `S(c_1,…,c_n)` while satisfying the above constraints. Input The input consists of two lines. The first line contains two integers `n` and `m` (1≤ n≤ 10^5, 1≤ m≤ ∑_{i=1}^n a_i) — the number of types of compounds and the total units required in the mixture, respectively. The second line contains `n` integers `a_1,…,a_n` (1≤ a_i≤ 10^9) — `a_i` is equal to the number of units available of the i-th type of compound. Output Output `n` integers `c_1,…, c_n` that achieve the maximum value of `S(c_1,…,c_n)`, while satisfying the requirements `0≤ c_i≤ a_i` and `∑_{i=1}^n c_i=m`. If there are multiple solutions, output any. Note that you do not have to output the value of `S(c_1,…,c_n)`. Examples Input 6 15 3 3 5 6 7 8 Output 1 1 2 3 4 4 Input 4 9 5 8 6 2 Output 2 2 3 2 Note For the first test, an optimal selection of units may yield a stability value of `S`. Note that there might be multiple correct outputs providing the same maximum value of `S`. For the second test, an optimal selection of units may yield a different stability value, with multiple correct possibilities.","solution":"def maximize_stability(n, m, a): # Calculate the best `c_i` value for each `a_i` c = [0] * n remaining = m # Greedily start filling c_i from units with smaller a_i (assuming a_i is sorted non-decreasing) indexed_a = sorted((a_val, idx) for idx, a_val in enumerate(a)) for a_val, idx in indexed_a: if remaining <= 0: break c[idx] = min(a_val, remaining) remaining -= c[idx] return c # Example usage: # n = 6, m = 15 # a = [3, 3, 5, 6, 7, 8] # Result should be [1, 1, 2, 3, 4, 4] or other valid solutions # print(maximize_stability(6, 15, [3, 3, 5, 6, 7, 8]))"},{"question":"Problem Alice is managing a warehouse with a lot of stacked boxes. Each box has a unique identifier and a weight. She needs to partition the boxes into two groups such that the absolute difference between the total weights of the two groups is minimized. However, to facilitate easy retrieval, she wants to ensure that the total number of items in each group is as balanced as possible. Write a program that determines the minimum possible absolute difference between the total weights of the two groups. Constraints - 1 ≤ n ≤ 1000 (number of boxes) - 1 ≤ weight[i] ≤ 1000 (weight of each box) Input The input is given in the following format: n weight1 weight2 ... weightn The first line contains a single integer, n, representing the number of boxes. The second line contains n integers, representing the weights of the boxes. Output Output one integer representing the minimum possible absolute difference between the total weights of the two groups. Examples Input 4 1 2 3 4 Output 0 Input 5 3 1 4 2 2 Output 0","solution":"def minimum_weight_difference(n, weights): Determines the minimum possible absolute difference between the total weights of the two groups. total_weight = sum(weights) target = total_weight // 2 dp = [0] * (target + 1) for weight in weights: for j in range(target, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) closest = dp[target] difference = abs(total_weight - 2 * closest) return difference"},{"question":"In a mystical forest, there is an ancient tree known as the Wishing Tree. The tree has n branches, each uniquely numbered from 1 to n. Each branch has certain \\"wish points\\" associated with it, which determine its magical power. You can increase the wish points of any branch but only through a special ritual. The ritual allows you to select any two branches and increase the wish points of both branches by the lesser of the two current wish points. For example, if branch_i has a wish point of wi and branch_j has a wish point of wj, after performing the ritual, both will have their wish points increased by min(wi, wj). Given the initial wish points of the branches, your task is to determine the maximum possible wish points that can be achieved for all branches through any number of rituals. Input - The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of branches. - The next line contains n integers w1, w2, ..., wn (0 ≤ wi ≤ 10^4), representing the initial wish points of the branches. Output - Output a single integer, the maximum possible wish points that can be achieved for all branches. Examples Input 3 1 2 3 Output 6 Input 5 3 0 1 4 2 Output 10 Note In the first example, performing the ritual with branches having 1 and 2 wish points first would result in both having 2 wish points. Then, performing the ritual with branches having 2 and 3 wish points will result in both having 6 wish points. In the second example, performing various rituals will eventually lead all branches to a maximum wish point of 10. [Image]","solution":"def max_wish_points(n, wish_points): Returns the maximum possible wish points that can be achieved for all branches. max_wish_point = max(wish_points) total_wish_points = max_wish_point * n return total_wish_points"},{"question":"In a small town, there is a rumor spreading among the residents. The town is represented as a 2D grid of size m x n, where each cell represents a house. A resident in a house can spread the rumor to its adjacent houses (up, down, left, right) in one day. Given the initial positions of the residents who have already heard the rumor, your task is to determine the number of days it will take for the rumor to spread to every house in the town. Input The first line contains two integers m and n (1 ≤ m, n ≤ 10) — the dimensions of the town grid. The second line contains an integer k (1 ≤ k ≤ m * n) — the number of residents who initially know the rumor. Each of the next k lines contains two integers r_i and c_i (0 ≤ r_i < m, 0 ≤ c_i < n) — the row and column indices of a house where the rumor initially started. Output Output the number of days it will take for the rumor to spread to all the houses. If there is any house that will never hear the rumor, output -1. Examples Input 3 3 1 0 0 Output 4 Input 2 2 2 0 0 1 1 Output 1 Input 2 3 1 0 1 Output 2","solution":"from collections import deque def spread_rumor(m, n, k, initial_positions): grid = [[-1] * n for _ in range(m)] queue = deque() for r, c in initial_positions: grid[r][c] = 0 queue.append((r, c)) # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_days = 0 while queue: x, y = queue.popleft() for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < m and 0 <= new_y < n and grid[new_x][new_y] == -1: grid[new_x][new_y] = grid[x][y] + 1 max_days = max(max_days, grid[new_x][new_y]) queue.append((new_x, new_y)) for row in grid: if -1 in row: return -1 return max_days"},{"question":"In the kingdom of Algoria, a new law is being debated about which farms should be prioritized for receiving government subsidies. Algoria consists of n farms located along a straight road, each at different distances from a central market. Each farm is represented by a three-element tuple (p, d, c), where p is the production rate, d is the distance from the market, and c is the corruption index of the farm. The goal of the government is to select the most productive farm (i.e., the one with the highest production rate), but there’s a catch: the selected farm should also be among those with the lowest corruption index. If there are multiple farms with the highest production rate, the farm with the smallest distance to the central market should be selected. If the distance is also the same, select the farm with the lowest corruption index. You\'re tasked with writing a program that determines which farm the government should prioritize for subsidies. Input The first line contains an integer n — the number of farms (1 ≤ n ≤ 10^5). The next n lines contain three space-separated integers p, d, and c — the production rate, distance from the market (in kilometers), and corruption index of each farm (1 ≤ p, d, c ≤ 10^9). Output Print three integers p, d, and c — the production rate, distance from the market, and corruption index of the selected farm. Examples Input 5 10 15 3 10 20 2 11 10 1 10 15 2 11 10 2 Output 11 10 1 Input 3 12 8 4 12 8 3 12 7 4 Output 12 7 4 Note In the first example, the farms with the highest production rate are the ones with (11, 10, 1) and (11, 10, 2). Among these, the farm with the smallest distance is selected, which is the one with (11, 10, 1). In the second example, there are three farms with the same highest production rate of 12. Among these, the one with the smallest distance is (12, 7, 4). Even though the corruption index is higher, the distance has a higher priority in the selection criteria.","solution":"def select_farm(farms): Determines the farm to be prioritized for subsidies based on production rate, distance, and corruption index. Parameters: farms (list of tuples): List containing tuples of farms represented by (p, d, c). Returns: tuple: The prioritized farm (p, d, c). # First, sort the farms by production rate (descending), then by distance (ascending), and finally by corruption index (ascending). farms_sorted = sorted(farms, key=lambda x: (-x[0], x[1], x[2])) # The first element in the sorted list is the most prioritized farm. return farms_sorted[0]"},{"question":"A scientist is conducting an experiment with bacteria cultures in Petri dishes. Each dish contains a certain number of bacteria, and the scientist wants to equalize the number of bacteria across all dishes. The experiment allows the scientist to transfer bacteria between any two dishes. Each transfer operation has a cost proportional to the number of bacteria being moved. Specifically: - The cost to transfer ( x ) bacteria from one dish to another is ( x ) units. - The scientist can only transfer whole bacteria between dishes. Given the initial number of bacteria in each dish, determine the minimum total cost required to equalize the number of bacteria across all dishes. Constraints: - ( 1 leq N leq 200000 ) (the number of Petri dishes) - ( 1 leq B_i leq 10^9 ) (the number of bacteria in the i-th dish) Input: Input is given from Standard Input in the following format: ``` N B_1 B_2 B_3 ... B_N ``` Output: Print an integer representing the minimum total cost required to equalize the number of bacteria across all dishes. Examples: Input: ``` 3 6 2 4 ``` Output: ``` 4 ``` Input: ``` 4 10 10 10 10 ``` Output: ``` 0 ```","solution":"def min_cost_to_equalize_bacteria(N, B): Returns the minimum total cost to equalize the number of bacteria across all dishes. Args: N : int : Number of Petri dishes B : list<int> : List of bacteria counts in each dish. Returns: int : Minimum cost to equalize all dishes. B.sort() median = B[N // 2] total_cost = sum(abs(b - median) for b in B) return total_cost"},{"question":"Nina is participating in a video game competition. In the game, she collects points by defeating monsters in several stages. Each stage has a different number of monsters, and each monster grants a certain number of points. Nina wants to maximize her total points, but there is a restriction: she can only collect points from a certain number of stages consecutively due to fatigue. Help Nina by finding the maximum number of points she can collect if she must complete exactly k consecutive stages out of the total n stages. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2·10^5) — the number of stages and the number of consecutive stages Nina must complete. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4), where ai represents the total points from defeating all monsters in the i-th stage. Output Print a single integer — the maximum number of points Nina can collect by completing exactly k consecutive stages. Examples Input 5 3 1 2 3 4 5 Output 12 Input 4 2 10 20 10 5 Output 30 Input 7 4 1 2 3 4 5 6 7 Output 22 Note In the first example, if Nina completes the 3rd, 4th, and 5th stages, she will collect 3 + 4 + 5 = 12 points. In the second example, if Nina completes the 1st and 2nd stages, she will collect 10 + 20 = 30 points. In the third example, if Nina completes the 4th, 5th, 6th, and 7th stages, she will collect 4 + 5 + 6 + 7 = 22 points.","solution":"def max_points(n, k, points): Returns the maximum points that can be collected by completing exactly k consecutive stages. :param n: int: the number of stages :param k: int: the number of consecutive stages Nina must complete :param points: list[int]: the points from each stage :return: int: the maximum points # Initial sum of the first k stages current_sum = sum(points[:k]) max_sum = current_sum # Slide the window of k stages across the stages for i in range(k, n): current_sum += points[i] - points[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Asking for help in checking a Sudoku solution\'s validity In this task, you are given a 9x9 Sudoku grid, and you need to determine whether it represents a valid and completely filled Sudoku solution. A Sudoku solution is valid if: 1. Every row contains the digits from 1 to 9 with no repetition. 2. Every column contains the digits from 1 to 9 with no repetition. 3. Each of the nine 3x3 sub-grids (starting from top-left and going row-wise) contains the digits from 1 to 9 with no repetition. Input The input consists of 9 lines, where each line contains 9 integers separated by spaces. Each integer x satisfies 1 ≤ x ≤ 9. Output Print \\"VALID\\" if the provided Sudoku solution adheres to the rules mentioned above. Otherwise, print \\"INVALID\\". Examples Input 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Output VALID Input 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 1 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Output INVALID Note In the second example, the Sudoku grid is invalid because there\'s a repeated \'1\' in the fifth row.","solution":"def is_valid_sudoku(grid): Returns \'VALID\' if the provided 9x9 Sudoku grid is a valid solution, otherwise returns \'INVALID\'. def is_valid_block(block): return sorted(block) == list(range(1, 10)) for i in range(9): row = [grid[i][j] for j in range(9)] if not is_valid_block(row): return \\"INVALID\\" col = [grid[j][i] for j in range(9)] if not is_valid_block(col): return \\"INVALID\\" for i in range(0, 9, 3): for j in range(0, 9, 3): square = [grid[i+x][j+y] for x in range(3) for y in range(3)] if not is_valid_block(square): return \\"INVALID\\" return \\"VALID\\""},{"question":"A robot is placed on an infinite 2D grid. The robot starts at position (0, 0) and wants to travel to position (x, y). The robot can only move in the following directions: - Right: (a, 0) - Up: (0, b) - Diagonally Up-Right: (a, b) Your task is to find out if the robot can reach the destination (x, y). If it is possible, return the minimum number of moves required. Otherwise, return -1. Input The first line contains three integers x, y, and v (1 ≤ x, y, a, b ≤ 10^9) — the destination coordinates and the integers a and b representing the steps the robot can take in the horizontal and vertical directions, respectively. Output Print one integer — the minimum number of moves required to reach the destination (x, y). If it is not possible to reach the destination, print -1. Examples Input 8 6 2 3 Output 4 Input 10 15 2 3 Output 5 Input 5 11 3 4 Output -1 Note In the first example, the robot can perform the following sequence of moves to reach the destination (8, 6): - (2, 3) => (4, 6) => (8, 6) (2 diagonal moves) - (2, 0) => (4, 0) => (6, 0) => (8, 0) => (8, 3) => (8, 6) (4 moves: 3 right and 1 up) Thus, the minimum number of moves required is 4.","solution":"def min_moves_to_destination(x, y, a, b): Returns the minimum number of moves to reach destination (x, y) from (0, 0) using steps of (a, 0), (0, b), and (a, b). If reaching (x, y) is impossible, returns -1. # If it works only when x and y have the same differences of multiple a and b if x % a == 0 and y % b == 0: # Number of diagonal steps that can be taken diagonal_steps = min(x // a, y // b) x -= diagonal_steps * a y -= diagonal_steps * b # Now we need to check if we can do move by exactly a and b steps if x % a == 0 and y % b == 0: horizontal_steps = x // a vertical_steps = y // b return diagonal_steps + horizontal_steps + vertical_steps return -1"},{"question":"You are given a matrix of dimensions N times M consisting of non-negative integers. The goal is to find the length of the shortest path from the top-left cell (0,0) to the bottom-right cell (N-1, M-1) such that the sum of the values of the cells in the path is minimal. You can only move to the right or down. Write a function `shortest_path(matrix)` that takes the matrix as input and returns an integer representing the length of this path. If there are multiple paths with the same minimal sum, return the length of the shortest one. Constraints * 1 leq N, M leq 100 * All values in the matrix are non-negative integers and do not exceed 100. Input The input consists of: - First line contains two integers N and M, the dimensions of the matrix. - N lines follow, each containing M integers representing the matrix. Output Return an integer representing the length of the shortest path with the minimal sum. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 5","solution":"def shortest_path(matrix): from heapq import heappop, heappush import sys N = len(matrix) M = len(matrix[0]) # Create a min-heap to store (cost, path_length, (i, j)) heap = [(matrix[0][0], 1, (0, 0))] # Record the minimal sum to reach each cell min_sum = [[sys.maxsize] * M for _ in range(N)] min_sum[0][0] = matrix[0][0] # Directions for moving right and down directions = [(0, 1), (1, 0)] while heap: current_sum, path_length, (i, j) = heappop(heap) # If we reach the bottom-right corner if (i, j) == (N-1, M-1): return path_length for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < N and 0 <= nj < M: new_sum = current_sum + matrix[ni][nj] if new_sum < min_sum[ni][nj]: min_sum[ni][nj] = new_sum heappush(heap, (new_sum, path_length + 1, (ni, nj))) return -1 # This line should not be reached"},{"question":"You are given a list of n integers representing noodle lengths. Each integer in the list represents the length of a single piece of noodle. Your task is to determine the maximum number of noodle pieces that can be selected such that any three selected pieces can form a triangle. A triplet (a, b, c) can form a triangle if and only if the following conditions hold: 1. a + b > c 2. a + c > b 3. b + c > a Write a function to find the maximum number of pieces that can be selected. Function Signature: ```python def max_noodle_pieces(arr: List[int]) -> int: pass ``` Input: - An integer n (3 ≤ n ≤ 10^5) representing the number of noodle pieces. - A list of n integers (1 ≤ arr[i] ≤ 10^9) representing the lengths of the noodle pieces. Output: - An integer representing the maximum number of noodle pieces that can be selected such that any three selected pieces can form a triangle. If no combination of pieces can form a triangle, return 0. Example: Input: ``` 6 4 2 9 5 7 3 ``` Output: ``` 6 ``` Explanation: All given pieces can be selected because they can form various triangles. For example, the pieces [4, 2, 7], [5, 7, 9], etc., satisfy the triangle inequality conditions. Thus, the output is 6 since all pieces can be used.","solution":"def max_noodle_pieces(arr): Given a list of noodles\' lengths, this function determines the maximum number of pieces such that any three can form a triangle. n = len(arr) # First, sort the array arr.sort() # Find maximum number of pieces such that any three can form a triangle for i in range(n - 2): if arr[i] + arr[i + 1] > arr[i + 2]: return n # If no three pieces form a triangle, return 0 return 0"},{"question":"A university is organizing a programming contest where contestants are divided into teams. Each team consists of exactly three members. The teams compete in various problem-solving challenges, and the score of each team is calculated based on the individual scores of its members. The university wants to identify the team with the highest total score at the end of the contest. Write a program that takes input representing the number of teams and the scores of their members, and outputs the 1-based index of the team with the highest total score. If there is a tie, output the team with the smallest index. Input The first line contains an integer `t`, the number of teams. Each of the next `t` lines contains three integers representing the scores of the three members of a team separated by a space. Output Output a single integer, the 1-based index of the team with the highest total score. If there is a tie, output the smallest index. Example Input: 3 10 20 30 30 20 10 15 25 35 Output: 3 Explanation: - Team 1 has a total score of 10 + 20 + 30 = 60 - Team 2 has a total score of 30 + 20 + 10 = 60 - Team 3 has a total score of 15 + 25 + 35 = 75 Team 3 has the highest total score. Hence, the output is 3.","solution":"def team_with_highest_score(t, scores): Returns the 1-based index of the team with the highest total score. :param t: An integer representing the number of teams :param scores: A list of lists, where each inner list contains three integers representing the scores of a team highest_score = float(\'-inf\') highest_team_index = -1 for i in range(t): team_score = sum(scores[i]) if team_score > highest_score: highest_score = team_score highest_team_index = i + 1 return highest_team_index"},{"question":"You are given a set of paired numbers where each pair represents the coordinates of points on a 2D plane. Your task is to determine the Euclidean distance between each pair and output the value rounded to two decimal places. If a pair has identical coordinates, print \\"Same Point\\" instead. The Euclidean distance between two points ((x_1, y_1)) and ((x_2, y_2)) is calculated using the formula: [ sqrt{{(x_2 - x_1)}^2 + {(y_2 - y_1)}^2} ] Input: The first line contains the number of test cases, t. Each of the next t lines contains four integers (x_1), (y_1), (x_2), and (y_2) representing the coordinates of the two points. Output: Print the distance for each pair rounded to two decimal places, or \\"Same Point\\" if the coordinates are identical. Constraints: 1 ≤ T ≤ 10^2 -10^3 ≤ (x_1, y_1, x_2, y_2) ≤ 10^3 SAMPLE INPUT 3 1 2 4 6 -2 3 -2 3 0 0 3 4 SAMPLE OUTPUT 5.00 Same Point 5.00","solution":"import math def euclidean_distance(x1, y1, x2, y2): Returns the Euclidean distance between two points (x1, y1) and (x2, y2) rounded to two decimal places. If the points are the same, return \\"Same Point\\". if x1 == x2 and y1 == y2: return \\"Same Point\\" distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) return f\\"{distance:.2f}\\" def process_input(t, coordinates): Processes a list of coordinate pairs and returns a list of distances or \\"Same Point\\" strings for each pair. results = [] for i in range(t): x1, y1, x2, y2 = coordinates[i] results.append(euclidean_distance(x1, y1, x2, y2)) return results"},{"question":"Problem Statement You are a zoo-keeper, and you need to monitor the visitors entering and leaving a zoo. To make sure there is no over-crowding, you want to track the maximum number of visitors in the zoo at any given time. Given log records that show the entry and exit times of visitors, you need to compute the maximum number of visitors that were in the zoo at the same time. Each visitor is represented by an \\"enter\\" and \\"exit\\" event. Each event consists of a time stamp indicating when the event occurred, and an event type – whether it was an entry or an exit event. Input The input consists of multiple datasets. The number of datasets is less than 1000. Each dataset is represented by a series of entries indicating the events, and it ends with a line containing \\"0\\". Each entry consists of a time stamp (an integer) and an event type (\\"enter\\" or \\"exit\\"), separated by a space. The time stamps in each dataset are given in non-decreasing order. The input ends with a single \\"#\\". Output For each dataset, print the maximum number of visitors in the zoo at any given time. Constraints - The time stamps are integers between 0 and (10^5). - The total number of events in a dataset is less than (10^4). Sample Input ``` 3 enter 5 enter 7 enter 8 exit 10 exit 12 exit 0 2 enter 4 exit 8 enter 10 enter 12 exit 15 exit 0 # ``` Output for the Sample Input ``` 3 2 ``` Example Input ``` 3 enter 5 enter 7 enter 8 exit 10 exit 12 exit 0 2 enter 4 exit 8 enter 10 enter 12 exit 15 exit 0 # ``` Output ``` 3 2 ``` Explanation In the first dataset, the sequence of visits is: At time 3: 1 visitor At time 5: 2 visitors At time 7: 3 visitors (maximum) At time 8: 2 visitors At time 10: 1 visitor At time 12: 0 visitors In the second dataset, the sequence of visits is: At time 2: 1 visitor At time 4: 0 visitors At time 8: 1 visitor At time 10: 2 visitors (maximum) At time 12: 1 visitor At time 15: 0 visitors So, the maximum number of visitors at any given time in the first dataset is 3, and in the second dataset is 2.","solution":"def max_visitors(logs): This function takes a list of log entries and returns the maximum number of visitors in the zoo at any given time. max_count = 0 current_count = 0 for log in logs: if log == \\"0\\": return max_count time_stamp, event = log.split() if event == \\"enter\\": current_count += 1 elif event == \\"exit\\": current_count -= 1 max_count = max(max_count, current_count) return max_count def process_input(input_data): Processes the multiline input data and returns the results as a list. datasets = input_data.split(\\"n#\\")[0].strip().split(\\"n0n\\") result = [] for data in datasets: logs = data.strip().split(\\"n\\") result.append(max_visitors(logs)) return result"},{"question":"You are given an array of integers which represents the prices of various items in a store. There is a special sale going on which allows you to buy two different items at the regular price, and get a third item for free. The free item will always be the one with the lowest price among the three items. Your task is to determine the maximum total cost of the items you can buy if you make full use of the special sale offer. Note that you can only use the offer once. Input: - The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next 2t lines contains a description of a test case. - The first line of each test case contains an integer n (3 ≤ n ≤ 100) — the number of items in the store. - The second line contains n integers separated by spaces representing the prices of the items, where each integer price is between 1 and 10000. Output: For each test case, output a single line containing the maximum total cost of the items you can buy if you use the sales offer optimally. Example: Input: 3 5 3 1 2 4 5 3 10 20 30 7 5 5 5 5 5 5 5 Output: 12 40 10 Explanation: In the first test case, you can buy items priced at 4 and 5 and get the item priced at 3 for free, making the total cost 4 + 5 = 9. The combination of 2, 4, and 5 gives you a total cost of 4 + 5 = 9, so the optimal is 4 and 5. In the second test case, you can buy items priced at 20 and 30 and get the item priced at 10 for free, making the total cost 20 + 30 = 50. In the third test case, no matter how you select, since all items are the same price, the combination will always cost 2 times the price of an item, so the total cost is 10. Note: - To maximize the total cost, you should select the two highest priced items and get the third highest priced item for free.","solution":"def max_total_cost(t, test_cases): Returns the maximum total cost of the items you can buy using the special sale offer optimally. results = [] for i in range(t): n, prices = test_cases[i] prices.sort(reverse=True) results.append(prices[0] + prices[1]) return results"},{"question":"John is a student who loves to play with string manipulations. One day, he came across a problem where he needs to decode a given encoded string. The encoding rule is simple: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Help John decode the string by implementing a function that takes the encoded string as input and returns the decoded string. Input The input consists of a single line containing the encoded string. The string is encoded in a valid format according to the rule described and will have maximum length of 100. Output Output the decoded string. Example Input 3[a]2[bc] Output aaabcbc Input 3[a2[c]] Output accaccacc Input 2[abc]3[cd]ef Output abcabccdcdcdef","solution":"def decode_string(s: str) -> str: Decodes an encoded string according to the pattern k[encoded_string]. Parameters: s (str): Encoded string following the pattern k[encoded_string], where k is a number representing the number of repetitions for `encoded_string`. Returns: str: Decoded string. stack = [] for char in s: if char != \']\': stack.append(char) else: # Process the substring inside the brackets substr = [] while stack and stack[-1] != \'[\': substr.append(stack.pop()) substr.reverse() stack.pop() # pop the \'[\' # Retrieve the number k k = [] while stack and stack[-1].isdigit(): k.append(stack.pop()) k.reverse() k = int(\'\'.join(k)) # Repeat the substring k times and push back to stack decoded_string = \'\'.join(substr) * k stack.extend(decoded_string) # Join and return the final decoded string return \'\'.join(stack)"},{"question":"Given an array of positive integers, determine whether there exists a subsequence such that the sum of the subsequence is equal to the product of its elements. If such a subsequence exists, output \\"YES\\" otherwise output \\"NO\\". Input format The first line contains a single integer N, the length of the array. The second line contains N space-separated integers, the elements of the array A. Constraint 1 leq N leq 10^5 1 leq A[i] leq 10^9 Output format Output \\"YES\\" if there is a subsequence whose sum is equal to its product, otherwise output \\"NO\\". Input example 1 5 1 2 3 5 8 Output example 1 YES Input example 2 4 7 11 13 17 Output example 2 NO Explanation: In the first example, the subsequence [2, 3] has a sum of 5 and a product of 6 (sum is not equal to product), but the subsequence [3, 8] has a sum of 11 and a product of 24 (sum is not equal to product), but the simplest subsequence [1 2] has a sum of 3 and same for product (sum is equal to product), so the answer is \\"YES\\". In the second example, no subsequence has a sum that equals its product, so the answer is \\"NO\\".","solution":"def check_subsequence_sum_product(numbers): Determines whether there exists a subsequence whose sum is equal to its product. Args: numbers (List[int]): List of positive integers Returns: str: \\"YES\\" if such a subsequence exists, else \\"NO\\" if 1 in numbers: return \\"YES\\" for number in numbers: if numbers.count(number) > 1: return \\"YES\\" return \\"NO\\""},{"question":"A group of friends has decided to create a chain of messages for a game they are playing. Each friend will send a message to another friend every day following a specific pattern. On day 1, each friend has a unique recipient. On subsequent days, each friend reselects their recipient from the set of all friends who did not receive their message the day before. You need to help them determine the sequence of recipients for each friend over the given number of days. Input The first line contains an integer m (1 ≤ m ≤ 100), the number of friends. Each of the next m lines contains the name of a friend (a string of lowercase English letters of length not exceeding 10). The next line contains an integer n (1 ≤ n ≤ 1000), the number of days. Output Output n lines, each containing m names separated by spaces. The i-th line should contain the names of the recipients for the i-th day in the order corresponding to the friends listed in the input. Examples Input 3 alice bob charlie 2 Output bob charlie alice charlie alice bob Input 4 anna bella carla diana 3 Output bella carla diana anna carla diana anna bella diana anna bella carla Note In the first example, there are 3 friends: alice, bob, charlie. * On day 1, the friends send messages in the following order: alice → bob, bob → charlie, charlie → alice. * On day 2, since each friend cannot message the same recipient as the previous day, they send messages in the reverse order: alice → charlie, bob → alice, charlie → bob. In the second example, there are 4 friends: anna, bella, carla, diana. * On day 1, the friends send messages in a cyclic order: anna → bella, bella → carla, carla → diana, diana → anna. * On day 2, the order shifts: anna → carla, bella → diana, carla → anna, diana → bella. * On day 3, they send messages according to the remaining recipients not chosen the day before: anna → diana, bella → anna, carla → bella, diana → carla.","solution":"def generate_recipients(friends, num_days): m = len(friends) recipients = [] for day in range(num_days): day_recipients = [] for i in range(m): day_recipients.append(friends[(i + day + 1) % m]) recipients.append(day_recipients) return recipients"},{"question":"Kevin is participating in a race. He has a map that shows waypoints he needs to pass through on his route. Each waypoint is represented as a coordinate (x, y). Kevin can either run horizontally (change in the x-direction), vertically (change in the y-direction), or diagonally (change in both directions simultaneously). Each type of movement costs energy: - Moving horizontally or vertically by one unit costs 1 energy unit. - Moving diagonally by one unit costs 2 energy units. Given the coordinates of the waypoints in the order Kevin needs to visit them, determine the minimum amount of energy Kevin needs to expend to visit all the waypoints starting from the first and ending at the last. Input The first line contains an integer number n (1 ≤ n ≤ 2·10^5) — the number of waypoints. Then n lines follow, each containing two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9) denoting the coordinates of the i-th waypoint. Output Print one integer, the minimum amount of energy Kevin needs to visit all waypoints in the given order. Example Input 3 0 0 1 1 1 2 Output 3 Input 4 1 1 3 3 6 6 6 8 Output 7 Note In the first sample: - Kevin moves from (0,0) to (1,1) diagonally, costing 2 energy units. - Then he moves from (1,1) to (1,2) vertically, costing 1 energy unit. - Total energy cost is 2 + 1 = 3. In the second sample: - Kevin moves from (1,1) to (3,3) diagonally, costing 4 energy units. - Then he moves from (3,3) to (6,6) diagonally, costing another 4 energy units. - Finally, he moves from (6,6) to (6,8) vertically, costing 2 energy units. - Total energy cost is 4 + 4 + 2 = 10.","solution":"def min_energy_to_visit_waypoints(n, waypoints): Calculate the minimum energy required to visit all waypoints. :param n: int, number of waypoints :param waypoints: list of tuples, each tuple contains two integers (x, y) for the coordinates of a waypoint :return: int, minimum amount of energy required total_energy = 0 for i in range(1, n): x1, y1 = waypoints[i-1] x2, y2 = waypoints[i] dx = abs(x2 - x1) dy = abs(y2 - y1) # Add the maximum of dx and dy to total energy total_energy += max(dx, dy) return total_energy"},{"question":"Masha is a data scientist who loves playing with large datasets. She recently came across a problem where she needed to count the number of elements in an array that have at least two distinct prime factors. However, she doesn\'t want to use a straightforward method due to the large size of the array. Instead, she devised an efficient way to carry out this task. Can you help her with this problem? Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print one integer – the number of elements in the array that have at least two distinct prime factors. Examples Input 5 10 15 21 30 31 Output 4 Input 3 5 7 11 Output 0 Input 6 6 18 24 25 27 35 Output 4 Note In the first sample, the elements are 10 (2 and 5), 15 (3 and 5), 21 (3 and 7), 30 (2, 3, and 5), and 31 (31). The elements 10, 15, 21, and 30 each have at least two distinct prime factors. Hence the output is 4. In the second sample, none of the elements have at least two distinct prime factors. In the third sample, the elements 6 (2 and 3), 18 (2 and 3), 24 (2 and 3), 25 (5), 27 (3), and 35 (5 and 7) are given. The elements 6, 18, 24, and 35 each have at least two distinct prime factors. Hence the output is 4.","solution":"def count_elements_with_two_prime_factors(n, array): Returns the number of elements in the array that have at least two distinct prime factors. def prime_factors_count(x): Returns the count of distinct prime factors of x. count = 0 if x % 2 == 0: count += 1 while x % 2 == 0: x //= 2 for i in range(3, int(x**0.5) + 1, 2): if x % i == 0: count += 1 while x % i == 0: x //= i if x > 2: count += 1 return count elements_count = 0 for elem in array: if prime_factors_count(elem) >= 2: elements_count += 1 return elements_count"},{"question":"Given an integer array `arr` of size `n`, your task is to find and print the sum of the elements that are prime numbers. A number is prime if it is greater than 1 and has no divisors other than 1 and itself. Note that 1 is not a prime number. INPUT: The first line contains an integer `n`, the size of the array. The second line contains `n` integers separated by space, representing the elements of the array `arr`. OUTPUT: Print a single integer, the sum of the prime numbers in the array. CONSTRAINTS: 1 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 10000 SAMPLE INPUT 6 2 4 6 7 11 13 SAMPLE OUTPUT 33 Explanation: The prime numbers in the array are 2, 7, 11, and 13. Their sum is 33.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False # No other even number can be prime sq_root = int(num**0.5) + 1 for i in range(3, sq_root, 2): if num % i == 0: return False return True def sum_of_primes(arr): Returns the sum of prime numbers in the array. prime_sum = 0 for num in arr: if is_prime(num): prime_sum += num return prime_sum def main(): n = int(input()) arr = list(map(int, input().split())) print(sum_of_primes(arr)) if __name__ == \\"__main__\\": main()"},{"question":"The local library is implementing a new loan system for books, and they need a program to manage the loans effectively. The library has a finite number of books and a queue of members requesting books. A book can be borrowed by only one member at a time, and once a member borrows a book, they cannot request another book until they return it. The library wants to process the loan requests in the order they arrive. Your task is to write a program that simulates this book-lending process. The program should handle loan requests, book returns, and print the current state of book loans at any given point of time. # Input: The first line contains two integers, `n` and `m` — the number of books in the library and the number of operations to process (1 ≤ n, m ≤ 100). The next `m` lines contain one of the following operations: 1. `REQUEST x y` — where member `x` requests book `y` (1 ≤ x ≤ 100, 1 ≤ y ≤ n). 2. `RETURN y` — where book `y` is returned to the library. It is guaranteed that in the sequence of operations, no two members will request the same book at the same time, and no member will request a book they already have. # Output: Print the state of the loans in the format \\"Book y is with Member x\\" for each book `y` currently on loan, sorted by the book number. If all books are returned, print \\"All books are available\\". # Example: Input: ``` 3 5 REQUEST 1 2 REQUEST 2 1 RETURN 2 REQUEST 1 3 RETURN 1 ``` Output: ``` Book 1 is with Member 2 Book 3 is with Member 1 ``` # Explanation: - Member 1 requests book 2. - Member 2 requests book 1. - Book 2 is returned. - Member 1 requests book 3. - Book 1 is returned. - The final state shows book 1 with Member 2 and book 3 with Member 1.","solution":"def manage_book_loans(n, m, operations): loans = {} # Dictionary to keep track of which member has which book for operation in operations: if operation[0] == \\"REQUEST\\": _, member, book = operation loans[book] = member elif operation[0] == \\"RETURN\\": _, book = operation if book in loans: del loans[book] if not loans: return \\"All books are available\\" else: result = [] for book in sorted(loans.keys()): result.append(f\\"Book {book} is with Member {loans[book]}\\") return \\"n\\".join(result) # Example usage: # n = 3 # m = 5 # operations = [ # [\\"REQUEST\\", 1, 2], # [\\"REQUEST\\", 2, 1], # [\\"RETURN\\", 2], # [\\"REQUEST\\", 1, 3], # [\\"RETURN\\", 1] # ] # print(manage_book_loans(n, m, operations))"},{"question":"String Transformation Operations You are given two strings, `s1` and `s2`, consisting of lowercase English letters, and you need to transform `s1` into `s2`. You can perform the following three types of operations on `s1`: 1. **Insert** a character at any position. 2. **Delete** a character from any position. 3. **Replace** a character with another character. Your task is to determine the minimum number of operations required to transform `s1` into `s2`. # Input The input consists of a single test case: - The first line contains the string `s1` (1 leq text{length of } s1 leq 1000). - The second line contains the string `s2` (1 leq text{length of } s2 leq 1000). # Output Output a single integer, the minimum number of operations required to transform `s1` into `s2`. # Sample Input 1 ``` kitten sitting ``` # Sample Output 1 ``` 3 ``` # Sample Input 2 ``` abc yabd ``` # Sample Output 2 ``` 2 ``` # Explanation **Sample Input 1:** To transform \\"kitten\\" into \\"sitting\\": 1. Replace \'k\' with \'s\'. 2. Replace \'e\' with \'i\'. 3. Insert \'g\' at the end. **Sample Input 2:** To transform \\"abc\\" into \\"yabd\\": 1. Insert \'y\' at the beginning. 2. Replace \'c\' with \'d\'. **Note:** This problem can be solved using a dynamic programming approach, where a table is built to store the minimum number of operations required for all prefixes of `s1` and `s2`.","solution":"def min_distance(s1, s2): Compute the minimum number of operations required to transform s1 into s2 using Insert, Delete, and Replace operations. m, n = len(s1), len(s2) # Create a table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore last character and recur for remaining string elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1])# Replace return dp[m][n] # Example of usage: # min_distance(\\"kitten\\", \\"sitting\\") should return 3 # min_distance(\\"abc\\", \\"yabd\\") should return 2"},{"question":"A popular card game played online involves creating the highest possible card hand from a set of dealt cards. In this version, a hand consists of five cards, each card having a suit and a rank. The suits are numbered from 1 to 4, and the ranks are numbered from 1 to 13. The game follows a standard hierarchy for evaluating hands, in descending order of rank: 1. **Straight Flush**: Five cards of sequential rank, all of the same suit. 2. **Four of a Kind**: Four cards of the same rank. 3. **Full House**: Three of a kind plus a pair. 4. **Flush**: Five cards of the same suit. 5. **Straight**: Five cards of sequential rank, regardless of suit. 6. **Three of a Kind**: Three cards of the same rank. 7. **Two Pair**: Two pairs of cards, each of the same rank. 8. **Pair**: Two cards of the same rank. 9. **High Card**: The highest ranking card in the hand not fitting any of the above patterns. Given a set of five cards, determine the best possible hand that can be formed. Each card is represented as a tuple `(suit, rank)`. Input The first line contains five space-separated tuples. Each tuple is in the form `(s, r)`, where `s` (1 ≤ s ≤ 4) is the suit and `r` (1 ≤ r ≤ 13) is the rank of a card. Output Print a string representing the best possible hand from the input cards. The output should be one of the following: \\"Straight Flush\\", \\"Four of a Kind\\", \\"Full House\\", \\"Flush\\", \\"Straight\\", \\"Three of a Kind\\", \\"Two Pair\\", \\"Pair\\", \\"High Card\\". Examples Input (1, 10) (1, 11) (1, 12) (1, 13) (1, 9) Output Straight Flush Input (2, 5) (3, 5) (4, 5) (1, 5) (2, 7) Output Four of a Kind Input (3, 2) (4, 2) (1, 2) (3, 3) (4, 3) Output Full House","solution":"def best_hand(cards): Determine the best possible hand from a given set of five cards. Each card is represented as a tuple (suit, rank). Returns one of the following string representations: \\"Straight Flush\\", \\"Four of a Kind\\", \\"Full House\\", \\"Flush\\", \\"Straight\\", \\"Three of a Kind\\", \\"Two Pair\\", \\"Pair\\", \\"High Card\\". from collections import Counter suits = [card[0] for card in cards] ranks = [card[1] for card in cards] rank_counts = Counter(ranks) suit_counts = Counter(suits) unique_ranks = sorted(set(ranks)) def is_consecutive(ranks): return ranks == list(range(min(ranks), max(ranks)+1)) is_flush = len(suit_counts) == 1 is_straight = is_consecutive(unique_ranks) and len(unique_ranks) == 5 if is_flush and is_straight: return \\"Straight Flush\\" if 4 in rank_counts.values(): return \\"Four of a Kind\\" if 3 in rank_counts.values() and 2 in rank_counts.values(): return \\"Full House\\" if is_flush: return \\"Flush\\" if is_straight: return \\"Straight\\" if 3 in rank_counts.values(): return \\"Three of a Kind\\" pairs = [count for count in rank_counts.values() if count == 2] if len(pairs) == 2: return \\"Two Pair\\" if len(pairs) == 1: return \\"Pair\\" return \\"High Card\\""},{"question":"You are given a list of integers representing the strengths of different warriors. Each warrior fights in a one-on-one duel, and the winner\'s strength increases by the loser\'s strength. The objective is to find the maximum possible strength of the strongest warrior after a series of duels, where any two warriors can duel against each other, and the duels can be conducted in any order. Once a warrior loses a duel, they cannot fight anymore. Input: - First line contains an integer n - denoting the number of warriors. - Second line contains n integers denoting the initial strengths of the warriors. Output: - A single integer denoting the maximum possible strength of the strongest warrior after all possible duels. Constraints: - 1 ≤ n ≤ 15 - 1 ≤ strength[i] ≤ 10000 SAMPLE INPUT: 3 2 7 4 SAMPLE OUTPUT: 13 Explanation: One possible order of duels: 1) Warrior 2 (strength 7) vs Warrior 1 (strength 2). After the duel, Warrior 2 has strength 9. 2) Warrior 2 (strength 9) vs Warrior 3 (strength 4). After the duel, Warrior 2 has strength 13. Thus, the maximum possible strength of the strongest warrior is 13.","solution":"def max_strength_after_duels(strengths): while len(strengths) > 1: # Sort strengths in descending order strengths.sort(reverse=True) # The strongest warrior absorbs the strength of the second strongest strengths[0] += strengths[1] # Remove the second strongest from the list strengths.pop(1) return strengths[0]"},{"question":"A software company needs to design a system that can manage and update the inventory of its products in real-time. To achieve this, they require a function that can process inventory update requests efficiently. Each request contains an operation—either adding to the current inventory or removing from it—and the corresponding amount. Design a function `update_inventory(n, operations)` where `n` is the initial inventory count and `operations` is a list of tuples. Each tuple contains a string indicating the operation (\\"add\\" or \\"remove\\") and an integer representing the amount. The function should process each operation in the order they appear in the list and return the final inventory count. If an \\"add\\" operation is processed, the amount is added to the inventory. If a \\"remove\\" operation is processed, the amount is subtracted from the inventory. The inventory count should never be negative; if a \\"remove\\" operation would result in a negative inventory, it should be ignored. # Input - An integer `n` (0 ≤ n ≤ 10^9) representing the initial inventory count. - A list `operations` where each element is a tuple containing: - A string (\\"add\\" or \\"remove\\"). - An integer (1 ≤ amount ≤ 10^6) representing the amount to add or remove. # Output - Return a single integer representing the final inventory count after all operations have been processed. # Example Input: ```python update_inventory(100, [(\\"add\\", 50), (\\"remove\\", 30), (\\"add\\", 20), (\\"remove\\", 150)]) ``` Output: ```python 140 ``` Explanation: - Initial inventory: 100 - After \\"add\\" 50: 100 + 50 = 150 - After \\"remove\\" 30: 150 - 30 = 120 - After \\"add\\" 20: 120 + 20 = 140 - \\"remove\\" 150 would result in negative inventory, so it is ignored Final inventory: 140","solution":"def update_inventory(n, operations): Updates the inventory based on a series of operations. Parameters: n (int): Initial inventory count. operations (list): List of tuples where each tuple contains: a string (\\"add\\" or \\"remove\\") and an integer (amount). Returns: int: Final inventory count after processing all operations. current_inventory = n for operation, amount in operations: if operation == \\"add\\": current_inventory += amount elif operation == \\"remove\\": if current_inventory >= amount: current_inventory -= amount return current_inventory"},{"question":"A certain university needs your help in managing its course enrollment system. Each student is required to enroll in a set of courses for the semester, and each course may have specific prerequisites that must be met before a student can take it. Your task is to determine if a student can complete a given set of courses in the correct sequence and to find one possible valid order of course completion if it exists. A course can only be taken if all of its prerequisite courses have already been completed. The list of courses and their prerequisites are provided in the form of pairs. For example, if a course A is a prerequisite for course B, then the pair is represented as (B, A). Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ 500), where `n` is the number of courses and `m` is the number of prerequisite pairs. Each of the next `m` lines contains two integers `x1` and `x2` (1 ≤ x1, x2 ≤ n, x1 ≠ x2), representing a prerequisite pair (x1, x2) which means course x2 needs to be taken before course x1. Output If it is possible for the student to complete all the courses, print the order of course completion as a space-separated list of course numbers. If there are multiple valid orders, print any one of them. If it is not possible to complete all the courses, print a single line containing \\"Impossible\\". Example Input 4 4 2 1 3 2 4 3 3 1 Output 1 2 3 4 Note In the example, course 1 is a prerequisite for courses 2 and 3, course 2 is a prerequisite for course 3, and course 3 is a prerequisite for course 4. One possible valid order of course completion is 1, 2, 3, 4.","solution":"from collections import defaultdict, deque def find_course_order(n, m, prerequisites): Determines a valid order of course completion given the prerequisites. Returns \'Impossible\' if it\'s not possible to complete all courses. # Create graph and in-degree array graph = defaultdict(list) in_degree = [0] * (n + 1) for course, prereq in prerequisites: graph[prereq].append(course) in_degree[course] += 1 # Use a queue to perform a topological sort queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) course_order = [] while queue: prereq = queue.popleft() course_order.append(prereq) for course in graph[prereq]: in_degree[course] -= 1 if in_degree[course] == 0: queue.append(course) if len(course_order) == n: return course_order else: return \\"Impossible\\""},{"question":"You are tasked with developing a simple card game simulation. The game is played with a standard deck of 52 cards. Each player is dealt a hand of 5 cards. The goal of the game is to determine the player with the highest-ranking hand based on standard poker hand rankings. # Hand Rankings 1. Royal Flush 2. Straight Flush 3. Four of a Kind 4. Full House 5. Flush 6. Straight 7. Three of a Kind 8. Two Pair 9. One Pair 10. High Card # Input The input consists of multiple lines: - The first line contains an integer, `t`, the number of test cases. - Each test case consists of two lines: - The first line contains the hand of Player 1 represented by 5 cards. - The second line contains the hand of Player 2 represented by 5 cards. Each card is represented by two characters. The first character represents the rank (`2-9`, `T` for Ten, `J`, `Q`, `K`, `A`) and the second character represents the suit (`H`, `D`, `C`, `S` for Hearts, Diamonds, Clubs, Spades). # Output For each test case, print the result on a new line: - `Player 1 wins` if Player 1 has the higher-ranking hand - `Player 2 wins` if Player 2 has the higher-ranking hand - `Tie` if both players have hands of the same ranking # Example Input ``` 2 KH QH JH TH AH 9C 9D 9H 9S 2C 5H 5D 5C 5S 4D 3C 3D 3H 3S 2D ``` Output ``` Player 1 wins Player 1 wins ``` # Note - You need to write a function that takes the input in the described format and determines the winner for each test case. - The function should be optimized to handle multiple test cases efficiently. # Constraints - 1 ≤ `t` ≤ 1000 - Each player\'s hand contains exactly 5 cards. - Standard poker rules apply for the determination of hand rankings.","solution":"from collections import Counter # Card order and value for poker rankings CARD_VALUES = \'23456789TJQKA\' CARD_VALUE_DICT = {CARD_VALUES[i]: i for i in range(len(CARD_VALUES))} def parse_hand(hand): Convert hand into sorted (rank, suit) tuples return sorted([(CARD_VALUE_DICT[card[0]], card[1]) for card in hand.split()], key=lambda x: x[0]) def is_straight(ranks): Check if the ranks form a straight return all(ranks[i] - ranks[i-1] == 1 for i in range(1, 5)) def evaluate_hand(hand): Given a hand, return its rank and ranks details ranks = [card[0] for card in hand] suits = [card[1] for card in hand] is_flush = len(set(suits)) == 1 is_straight_hand = is_straight(ranks) or (ranks == [0, 1, 2, 3, 12]) # Special case for A-2-3-4-5 straight rank_counts = Counter(ranks) rank_count_values = sorted(rank_counts.values(), reverse=True) rank_count_keys = sorted(rank_counts.keys(), reverse=True, key=lambda x: (rank_counts[x], x)) if is_flush and is_straight_hand: return (9, rank_count_keys) if ranks[-1] == 12 else (8, rank_count_keys) # Royal flush or Straight flush if rank_count_values == [4, 1]: return (7, rank_count_keys) # Four of a kind if rank_count_values == [3, 2]: return (6, rank_count_keys) # Full house if is_flush: return (5, rank_count_keys) # Flush if is_straight_hand: return (4, rank_count_keys) # Straight if rank_count_values == [3, 1, 1]: return (3, rank_count_keys) # Three of a kind if rank_count_values == [2, 2, 1]: return (2, rank_count_keys) # Two Pair if rank_count_values == [2, 1, 1, 1]: return (1, rank_count_keys) # One Pair return (0, rank_count_keys) # High card def determine_winner(player1_hand, player2_hand): hand1 = parse_hand(player1_hand) hand2 = parse_hand(player2_hand) rank1, ranks1 = evaluate_hand(hand1) rank2, ranks2 = evaluate_hand(hand2) if rank1 > rank2: return \\"Player 1 wins\\" elif rank1 < rank2: return \\"Player 2 wins\\" else: if ranks1 > ranks2: return \\"Player 1 wins\\" elif ranks1 < ranks2: return \\"Player 2 wins\\" else: return \\"Tie\\" def solve(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) result = [] for i in range(t): player1_hand = lines[2 * i + 1] player2_hand = lines[2 * i + 2] result.append(determine_winner(player1_hand, player2_hand)) return \'n\'.join(result) # Usage input_string = 2 KH QH JH TH AH 9C 9D 9H 9S 2C 5H 5D 5C 5S 4D 3C 3D 3H 3S 2D print(solve(input_string))"},{"question":"You are given a string consisting of lowercase English letters. You need to convert the string into a new string where each character is replaced by the character that follows it in the alphabetical order. The last character \'z\' should be replaced by \'a\'. Input The input contains one string s (1 ≤ |s| ≤ 100 000) consisting of only lowercase English letters. Output Output the converted string. Example Input: abcxyz Output: bcdyza","solution":"def shift_letters(s): Returns a new string where each character is replaced by the character that follows it in the alphabetical order. The last character \'z\' is replaced by \'a\'. return \'\'.join(chr(((ord(char) - ord(\'a\') + 1) % 26) + ord(\'a\')) for char in s)"},{"question":"Artem is organizing a smuggling operation and came up with an ingenious idea: using drones to transport stolen jewels. However, the police are aware of his plan and have set up drone interceptors on certain coordinates along the route. The route is represented as an array of n integers, where each integer represents a coordinate. The drones can fly over these coordinates. Each time a drone launches, it flies to a coordinate represented by the i-th element of the array and then to the i+1-th element, and so on until it completes its route. However, if a coordinate is marked as having an interceptor, the drone will be intercepted and will not successfully complete the journey. Given the array of coordinates and a list of interceptor positions, determine if the drone can complete its journey from start (first element) to finish (last element) without being intercepted. Input The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — number of coordinates in the route. The second line contains n integers representing the coordinates of the route. The third line contains an integer m (0 ≤ m ≤ 100 000) — number of interceptor positions. The fourth line contains m integers representing the interceptor positions. Output Print \\"SAFE\\" (without quotes) if the drone can successfully complete its journey. Otherwise, print \\"INTERCEPTED\\" (without quotes). Examples Input 5 1 2 3 4 5 2 3 5 Output INTERCEPTED Input 4 10 20 30 40 1 25 Output SAFE Note In the first example, the drone will be intercepted at coordinates 3 or 5, and therefore the output is \\"INTERCEPTED\\". In the second example, there is no interceptor on the route coordinates, so the drone will safely complete its journey, and the output is \\"SAFE\\".","solution":"def can_drone_complete_journey(n, route, m, interceptors): Determine if the drone can complete its journey without being intercepted. Parameters: - n (int): Number of coordinates in the route - route (list of int): Coordinates of the route - m (int): Number of interceptor positions - interceptors (list of int): Interceptor positions Returns: - str: \\"SAFE\\" if the drone can complete the journey, \\"INTERCEPTED\\" otherwise # Create a set of interceptor positions for quick lookup interceptor_set = set(interceptors) # Check if any route coordinate is in the interceptor positions for coordinate in route: if coordinate in interceptor_set: return \\"INTERCEPTED\\" return \\"SAFE\\""},{"question":"You are given a rectangular grid with dimensions n x m. Some cells in the grid are blocked, and others are open. A cell (i,j) in the grid is blocked if `grid[i][j]` is `1` and open if `grid[i][j]` is `0`. You need to find the length of the shortest path from the top-left cell (0,0) to the bottom-right cell (n-1,m-1). You may move in 4 possible directions: up, down, left, or right. Moving to a blocked cell is not allowed. If it is not possible to reach the bottom-right cell from the top-left cell, return `-1`. Input - The first line of input contains a single integer `T`, denoting the number of test cases. - For each test case: - The first line contains two integers `n` and `m`, denoting the dimensions of the grid. - The next `n` lines each contain `m` integers (either `0` or `1`), representing the grid. Output For each test case, output the length of the shortest path from the top-left cell to the bottom-right cell. If such a path does not exist, output `-1`. Example Input: 2 3 3 0 1 0 0 1 0 0 0 0 3 3 1 0 0 0 1 1 0 0 0 Output: 5 -1 Explanation In the first test case, the shortest path from (0,0) to (2,2) is down -> down -> right -> right -> up, which has length 5. In the second test case, it is impossible to reach the bottom-right cell from the top-left cell, so the output is `-1`.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner in the grid. If no such path exists, returns -1. if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def solve(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 results = [] for _ in range(T): n = int(data[index]) m = int(data[index+1]) index += 2 grid = [] for i in range(n): row = list(map(int, data[index:index + m])) grid.append(row) index += m result = shortest_path_in_grid(n, m, grid) results.append(result) for result in results: print(result)"},{"question":"A matrix is a rectangular array of numbers arranged in rows and columns. Given a matrix of integers, write a program to find the largest sum of any contiguous submatrix within the given matrix. The submatrix should contain at least one element. Input The first line of the input contains an integer `t` (1 ≤ t ≤ 10), the number of test cases. Each test case starts with two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix respectively. The next `n` lines each contain `m` integers representing the matrix elements. Output For each test case, print one line with the maximum sum of contiguous submatrix. Example Input 2 2 3 -1 -2 3 4 5 6 3 3 1 2 -1 -3 4 5 6 -7 8 Output 15 15","solution":"def max_sum_submatrix(matrix, n, m): def max_subarray_sum(arr): max_sum, current_sum = float(\'-inf\'), 0 for num in arr: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, max_subarray_sum(temp)) return max_sum def process_input(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 t = int(data[idx]) idx += 1 results = [] for _ in range(t): n = int(data[idx]) m = int(data[idx + 1]) idx += 2 matrix = [] for i in range(n): row = list(map(int, data[idx: idx + m])) idx += m matrix.append(row) results.append(max_sum_submatrix(matrix, n, m)) for result in results: print(result) # Sample usage if __name__ == \\"__main__\\": process_input()"},{"question":"Chef has a long list of tasks to accomplish, and he wants to complete them efficiently. Chef divides the tasks into groups based on the complexity and assigns a difficulty level to each task. Your task is to find the minimum difficulty level a task needs to have so that Chef has to complete at least K different tasks from the list. As input, you will receive an integer array where each element represents the difficulty level of a task. Chef can choose any task, but he must complete at least K different tasks with a minimum difficulty level. Assume the tasks are represented by an integer array of length N and an integer K which denotes the number of tasks Chef needs to complete with at least the minimum difficulty level. Input The first line of the input contains an integer T denoting the number of test cases. The first line of each test case contains two integers N and K. The second line contains N space-separated integers representing the difficulty level of each task. Output For each test case, output a single integer denoting the minimum difficulty level a task needs to have so that Chef can complete at least K different tasks. If it is impossible, print -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ difficulty level of any task ≤ 10^4 Examples Input: 2 5 3 1 2 3 4 5 4 5 6 7 8 9 Output: 3 -1 Explanation In the first test case, Chef needs to complete at least 3 tasks. The minimum difficulty level that allows Chef to complete at least 3 tasks is 3. In the second test case, Chef needs to complete 5 tasks, but there are only 4 tasks available, so it\'s impossible.","solution":"def min_difficulty_level(tasks, K): Returns the minimum difficulty level a task needs to have so that Chef has to complete at least K different tasks from the list. If it\'s impossible, returns -1. tasks.sort() if len(tasks) < K: return -1 return tasks[K-1] def solve_task_list(T, task_cases): results = [] for case in task_cases: N, K, tasks = case result = min_difficulty_level(tasks, K) results.append(result) return results"},{"question":"A magician and his assistant need to store their magic items, each of which has a specific value. To do so, they use a special magic bag that can hold a maximum weight capacity. Each item has a certain weight and value. The magician wants to maximize the total value of items he can carry in the magic bag without exceeding its weight capacity. Given the list of items and the maximum weight capacity of the bag, can you help the magician and his assistant determine the maximum value of items that can be carried in the magic bag? Input The first line of the input contains two integers n (1 ≤ n ≤ 1000) and W (1 ≤ W ≤ 10000) — the number of items and the maximum weight capacity of the magic bag, respectively. The next n lines each contain two integers wi (1 ≤ wi ≤ 1000) and vi (1 ≤ vi ≤ 1000) — the weight and value of the i-th item. Output Output a single integer — the maximum value of items that can be carried in the magic bag. Examples Input 4 8 2 3 3 4 4 5 5 6 Output 10 Input 3 50 10 60 20 100 30 120 Output 220 Note For the first example, the optimal selection of items is the first, second, and third items with a total weight of 2 + 3 + 3 = 8, and a total value of 3 + 4 + 3 = 10. For the second example, the optimal selection of items is the second and third items with a total weight of 20 + 30 = 50, and a total value of 100 + 120 = 220.","solution":"def knapsack(n, W, items): Determine the maximum value of items that can be carried in the magic bag. :param n: Number of items :param W: Maximum weight capacity of the bag :param items: List of tuples with each tuple containing weight and value of an item :return: Maximum value of items that can be carried in the magic bag dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"You are given a grid of size n x m that is initially filled with 0s. You need to fill this grid with some 1s such that each row and each column contains at most one 1. Determine the maximum number of 1s that can be placed in the grid under this condition. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Output Print a single integer, the maximum number of 1s that can be placed in the grid. Examples Input 3 3 Output 3 Input 4 2 Output 2 Note In the first sample, one possible optimal arrangement is: ``` 1 0 0 0 1 0 0 0 1 ``` In the second sample, an optimal arrangement is: ``` 1 0 0 1 0 0 0 0 ```","solution":"def max_ones(n, m): Returns the maximum number of 1s that can be placed in an n x m grid such that each row and each column contains at most one 1. return min(n, m)"},{"question":"Write a program that, for a given list of integers, finds and returns the maximum product of any three distinct integers in the list. # Input The input consists of two lines: 1. The first line contains a single integer n (3 ≤ n ≤ 1000), representing the number of integers in the list. 2. The second line contains n space-separated integers ai (-1000 ≤ ai ≤ 1000) representing the integers in the list. # Output Output a single integer representing the maximum product of any three distinct integers from the list. # Example Input: ``` 5 -10 -10 5 2 3 ``` Output: ``` 500 ``` # Explanation In the given example, the maximum product is derived from the integers -10, -10, and 5, resulting in -10 * -10 * 5 = 500.","solution":"def max_product_of_three(n, arr): Returns the maximum product of any three distinct integers in the list. :param n: Int, the number of integers in the list :param arr: List of integers :return: Int, the maximum product of any three distinct integers arr.sort() return max(arr[0] * arr[1] * arr[-1], arr[-1] * arr[-2] * arr[-3])"},{"question":"A warehouse has n packages, each with a different weight. The maximum weight a drone can carry is X units. The drone can make multiple trips to transport the packages. Your task is to determine the minimum number of trips the drone needs to transport all the packages. Input The first line contains two integers n (1 ≤ n ≤ 1000) and X (1 ≤ X ≤ 10^9) — the number of packages and the maximum carrying capacity of the drone respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ X), where wi is the weight of the i-th package. Output Print a single integer — the minimum number of trips the drone needs. Example Input 5 10 1 2 3 4 5 Output 3 Input 3 15 7 8 8 Output 2","solution":"def minimum_trips(n, X, weights): weights.sort(reverse=True) # Sort weights in descending order for optimization trips = 0 left, right = 0, n - 1 while left <= right: # If the heaviest (left) and lightest (right) package can be carried together if weights[left] + weights[right] <= X: right -= 1 left += 1 trips += 1 return trips # Example usage: # n, X = 5, 10 # weights = [1, 2, 3, 4, 5] # print(minimum_trips(n, X, weights)) # Output: 3"},{"question":"Maya is learning about palindromes in her programming class. A palindrome is a sequence of characters that reads the same backward as forward. For example, the strings \\"level\\", \\"radar\\", and \\"rotator\\" are all palindromes. Maya\'s task for today is to check whether a given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if at most one character occurs an odd number of times in it. Write a function to help Maya determine if a given string can be rearranged to form a palindrome. Input - A single line containing a string s (1 ≤ |s| ≤ 1000), which only consists of lowercase Latin letters. Output - Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Example Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabbcc Output YES Note In the first example, \\"civic\\" is already a palindrome, so the answer is \\"YES\\". In the second example, \\"ivicc\\" can be rearranged to \\"civic\\" which is a palindrome, so the answer is \\"YES\\". In the third example, \\"hello\\" cannot be rearranged to form any palindrome, so the answer is \\"NO\\". In the fourth example, \\"aabbcc\\" can be rearranged to \\"abccba\\" which is a palindrome, so the answer is \\"YES\\".","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter # Count frequency of each character freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 == 1) # A string can form a palindrome if there is at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A string is called an isogram if all the characters in the string are distinct. Given a string consisting of lowercase English letters, determine whether it is an isogram. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100) — the string to check. Output: For each test case, print \\"YES\\" if the string is an isogram, otherwise print \\"NO\\". Examples Input 3 machine isogram hello Output YES YES NO","solution":"def is_isogram(s): Determines if the string is an isogram. return len(s) == len(set(s)) def isogram_checker(t, test_cases): Checks multiple strings if they are isograms. Args: t: Number of test cases (integer). test_cases: List of string test cases. Returns: List of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for s in test_cases: if is_isogram(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Chinna and Chinnu are adding a new feature to their startup website, specifically a social media sharing widget. They want to ensure that users can share URLs safely and need to validate the URLs before allowing them to be shared. A URL is considered valid if it follows the format: <scheme>://<hostname>/<path> - <scheme> can be either \\"http\\" or \\"https\\" - \\"://\\" is a mandatory sequence of characters separating the scheme from the rest of the URL - <hostname> consists of 1 - 63 characters inclusive and contains only small letters, capital letters, digits [0-9], hyphens (‘-’), and dots (‘.’). The hostname’s last segment (after the last dot) should be 2 to 6 characters long (for example, \\".com\\", \\".org\\"). - <path> can be empty or a sequence of 1 - 128 characters containing any character except spaces. Input: You are given a number n and n URLs to validate. Output: For each URL, print \\"VALID\\" without quotes if the URL is valid, else \\"INVALID\\". Constraint: 1 ≤ n ≤ 100 SAMPLE INPUT 3 https://www.example.com http://valid-site.org/path/to/resource ftp://invalid-scheme.com SAMPLE OUTPUT VALID VALID INVALID","solution":"import re def validate_urls(n, urls): Validates a list of URLs based on specified rules. Parameters: n (int): Number of URLs. urls (list of str): List of URLs. Returns: list of str: \\"VALID\\" or \\"INVALID\\" indicating the validity of each URL. results = [] pattern = re.compile(r\\"^(http|https)://([a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*.[a-zA-Z]{2,6})(/[^s]{0,128})?\\") for url in urls: if pattern.match(url): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"A company is running a series of advertising campaigns for different products. Each campaign has a start and an end date. The goal is to determine the maximum number of campaigns that are running at the same time. Write a function that takes a list of tuples, where each tuple contains two integers representing the start date and the end date of a campaign (inclusive). Your function should return an integer, which is the maximum number of campaigns that are active simultaneously. Function signature: ```python def max_active_campaigns(campaigns: List[Tuple[int, int]]) -> int: ``` # Input - campaigns (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers (start, end), representing the start and end date of a campaign. The start and end dates are between 1 and 365, inclusive. # Output - An integer representing the maximum number of campaigns that are active simultaneously. # Example Example 1: ```python campaigns = [(1, 10), (5, 15), (14, 20), (21, 30)] print(max_active_campaigns(campaigns)) # Output: 2 ``` Example 2: ```python campaigns = [(1, 10), (2, 9), (3, 8), (4, 7)] print(max_active_campaigns(campaigns)) # Output: 4 ``` Example 3: ```python campaigns = [(1, 5), (6, 10), (11, 15), (16, 20)] print(max_active_campaigns(campaigns)) # Output: 1 ``` # Constraints - 1 ≤ len(campaigns) ≤ 10^5 - 1 ≤ start ≤ end ≤ 365 # Notes - In the first example, the campaigns [(1, 10), (5, 15), (14, 20)] overlap on days 14 and 15, hence maximum overlaps are 2. - In the second example, all campaigns [(1, 10), (2, 9), (3, 8), (4, 7)] overlap on days 4 to 7, so maximum overlaps are 4. - The function should be optimized to handle up to 100,000 campaigns efficiently.","solution":"from typing import List, Tuple def max_active_campaigns(campaigns: List[Tuple[int, int]]) -> int: events = [] for start, end in campaigns: events.append((start, 1)) # +1 for the start of an event events.append((end + 1, -1)) # -1 for the end of an event (end + 1 because end is inclusive) events.sort() max_active = 0 current_active = 0 for event in events: current_active += event[1] max_active = max(max_active, current_active) return max_active"},{"question":"A library is organizing its book inventory, and it uses a specific system to keep track of book movements. The library performs one of the following operations each day: * Add a new book to the library, assign it an id, and place it on a designated shelf. * Borrow a book from the library and register the borrower. * Return a book to the library to the exact same shelf from which it was borrowed. * Query if a book is currently borrowed or available in the library. Your task is to write a program that, given the series of operations, answers the queries about whether a book is currently borrowed or in the library. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of books and the number of operations. Each of the next m lines contains the description of one operation (the operations are given in the chronological order). The first number of the line determines the type of operation t (1 ≤ t ≤ 4). * If t = 1, then next follows an integer id (1 ≤ id ≤ n) — the identifier of the book being added. * If t = 2, then next follows an integer id (1 ≤ id ≤ n) — the identifier of the book being borrowed. It is guaranteed that the book is available in the library at the time of the operation. * If t = 3, then next follows an integer id (1 ≤ id ≤ n) — the identifier of the book being returned. It is guaranteed that the book has been borrowed at the time of the operation. * If t = 4, then next follows an integer id (1 ≤ id ≤ n) — the identifier of the book being queried about its status. It is guaranteed that the input has at least one query of the fourth type. Output For each query of the fourth type, print \\"Borrowed\\" if the book is currently borrowed and \\"Available\\" if the book is currently in the library. Print all the words without the quotes. Examples Input 5 7 1 3 1 5 2 3 4 3 3 3 4 3 4 5 Output Borrowed Available Available","solution":"def library_operations(n, m, operations): Function to perform a series of library operations and output the query results. :param n: The number of books :param m: The number of operations :param operations: List of tuples representing the operations :return: List of results for the queries book_status = {i: \\"Available\\" for i in range(1, n+1)} result = [] for operation in operations: t, id = operation if t == 1: book_status[id] = \\"Available\\" elif t == 2: book_status[id] = \\"Borrowed\\" elif t == 3: book_status[id] = \\"Available\\" elif t == 4: result.append(book_status[id]) return result"},{"question":"Company XYZ is organizing a new kind of tournament where participants compete in building the tallest stack of blocks. Each participant is given an integer array of block heights. Participants can only stack blocks in non-increasing order of height. Given an array representing the heights of blocks each participant has, determine the maximum height of the stack that can be achieved and the sequence of blocks in the stack. Input The first line contains an integer n (1 ≤ n ≤ 20000), the number of blocks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100000), the heights of the blocks. Output Print on the first line the only number: the maximum possible height of the stack. Print on the second line the sequence of block heights in the stack, in the order they should be stacked to achieve this height. Examples Input 5 4 5 3 2 4 Output 15 5 4 4 2 Input 7 10 9 10 8 7 6 5 Output 55 10 10 9 8 7 6 5 Input 4 3 3 4 4 Output 14 4 4 3 3 Note In the first test, the maximum height can be achieved by selecting blocks with heights 5, 4, 4, and 2. This forms a valid stack because the block heights are in non-increasing order. In the second test, selecting all the blocks in their given order forms a valid stack. In the third test, selecting blocks in the order 4, 4, 3, and 3 forms the maximum height stack with total height 14, adhering to the non-increasing order rule.","solution":"def tallest_stack(n, heights): Determines the maximum height of the stack that can be achieved and the sequence of blocks in the stack. :param n: int, the number of blocks. :param heights: list of int, heights of the blocks. :return: tuple, maximum possible height of the stack and the sequence of block heights. # Sort the heights in non-increasing order heights_sorted = sorted(heights, reverse=True) # Return as the maximum height and the sorted sequence return sum(heights_sorted), heights_sorted"},{"question":"John has an array of n integers, and he needs your help to process q queries. Each query provides a pair of integers l and r and asks you to find the sum of the elements in the range [l, r] inclusive. Input The first line of the input contains integers n and q (1 ≤ n, q ≤ 100,000) – the number of elements in the array and the number of queries, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 1,000) – the elements of John\'s array. The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) – the start and end indices for each query. Output Print q lines, with each line containing the sum of the elements for the corresponding query. Examples Input 5 3 2 4 1 7 9 1 3 2 5 3 3 Output 7 21 1 Note In the first sample, the sum of the elements from index 1 to 3 (2 + 4 + 1) is 7. In the second sample, the sum of the elements from index 2 to 5 (4 + 1 + 7 + 9) is 21. In the third sample, the sum of the element at index 3 is 1.","solution":"def process_queries(n, q, array, queries): For each query, returns the sum of the elements in the range [l, r] inclusive. Parameters: n (int): Number of elements in the array q (int): Number of queries array (list): List of n integers, the elements of the array queries (list): List of tuple pairs (l, r) representing the queries Returns: list: List of integers representing the sum for each query prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] result = [] for l, r in queries: sum_query = prefix_sums[r] - prefix_sums[l - 1] result.append(sum_query) return result"},{"question":"A library management system keeps track of books using their unique IDs as keys in a dictionary. Each book has several attributes like title, author, publication year, and availability status. The system should support the following operations: 1. **Add a Book:** Add a new book to the library with unique ID, title, author, and publication year. The new book is available by default. 2. **Update Book Information:** Update the title, author, or publication year of an existing book using its ID. 3. **Check Out a Book:** Change the availability of a book to \\"checked out\\" if it is currently available. 4. **Return a Book:** Change the availability of a book to \\"available\\" if it is currently checked out. 5. **Delete a Book:** Remove a book from the library using its ID. 6. **List All Books:** Print all books’ details in the library. 7. **List Available Books:** Print the details of all available books in the library. Write a program that implements the library management system as described above. # Input Each operation from the list above will be provided as input sequentially until a \\"STOP\\" command is given. - \\"ADD id title author year\\" to add a new book. - \\"UPDATE id title/author/year new_value\\" to update the information of an existing book. - \\"CHECKOUT id\\" to checkout a book. - \\"RETURN id\\" to return a book. - \\"DELETE id\\" to delete a book. - \\"LIST\\" to list all books. - \\"LIST AVAILABLE\\" to list all available books. - \\"STOP\\" to end input. The attributes title and author are strings that may contain spaces. The identifier \\"title/author/year\\" specifies which attribute to update. # Output - For \\"ADD\\", \\"UPDATE\\", \\"CHECKOUT\\", \\"RETURN\\", and \\"DELETE\\" operations, do not print anything. - For \\"LIST\\" and \\"LIST AVAILABLE\\" operations, print book details in the format `[id] Title: title, Author: author, Year: year, Status: status` with each book on a new line. - Book details should be listed in the order they were added. - If a book operation (like checkout, update, or delete) fails due to non-existent ID, print `Error: Book not found`. - If a \\"CHECKOUT\\" operation is performed on an already checked out book, print `Error: Book already checked out`. - If a \\"RETURN\\" operation is performed on an already available book, print `Error: Book already available`. # Example Input ``` ADD 1 \\"The Great Gatsby\\" \\"F. Scott Fitzgerald\\" 1925 ADD 2 \\"1984\\" \\"George Orwell\\" 1949 CHECKOUT 1 UPDATE 2 title \\"Nineteen Eighty-Four\\" UPDATE 1 year 1934 LIST LIST AVAILABLE RETURN 1 LIST AVAILABLE DELETE 1 LIST STOP ``` Output ``` [1] Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1934, Status: checked out [2] Title: Nineteen Eighty-Four, Author: George Orwell, Year: 1949, Status: available [2] Title: Nineteen Eighty-Four, Author: George Orwell, Year: 1949, Status: available [1] Title: The Great Gatsby, Author: F. Scott Fitzgerald, Year: 1934, Status: available [2] Title: Nineteen Eighty-Four, Author: George Orwell, Year: 1949, Status: available [2] Title: Nineteen Eighty-Four, Author: George Orwell, Year: 1949, Status: available ```","solution":"class Library: def __init__(self): self.books = {} def add_book(self, book_id, title, author, year): if book_id not in self.books: self.books[book_id] = { \\"title\\": title, \\"author\\": author, \\"year\\": year, \\"status\\": \\"available\\" } def update_book(self, book_id, attribute, new_value): if book_id in self.books: if attribute in self.books[book_id]: self.books[book_id][attribute] = new_value else: print(\\"Error: Invalid attribute\\") else: print(\\"Error: Book not found\\") def checkout_book(self, book_id): if book_id in self.books: if self.books[book_id][\\"status\\"] == \\"available\\": self.books[book_id][\\"status\\"] = \\"checked out\\" else: print(\\"Error: Book already checked out\\") else: print(\\"Error: Book not found\\") def return_book(self, book_id): if book_id in self.books: if self.books[book_id][\\"status\\"] == \\"checked out\\": self.books[book_id][\\"status\\"] = \\"available\\" else: print(\\"Error: Book already available\\") else: print(\\"Error: Book not found\\") def delete_book(self, book_id): if book_id in self.books: del self.books[book_id] else: print(\\"Error: Book not found\\") def list_all_books(self): for book_id, details in self.books.items(): print(f\\"[{book_id}] Title: {details[\'title\']}, Author: {details[\'author\']}, Year: {details[\'year\']}, Status: {details[\'status\']}\\") def list_available_books(self): for book_id, details in self.books.items(): if details[\\"status\\"] == \\"available\\": print(f\\"[{book_id}] Title: {details[\'title\']}, Author: {details[\'author\']}, Year: {details[\'year\']}, Status: {details[\'status\']}\\") # Main function to perform operations def main(): library = Library() while True: command = input() if command == \\"STOP\\": break cmd_args = command.split(\\" \\", 2) cmd_type = cmd_args[0] book_id = cmd_args[1] if cmd_type == \\"ADD\\": title, author, year = cmd_args[2].strip(\'\\"\').split(\'\\" \\"\') library.add_book(book_id, title, author, int(year)) elif cmd_type == \\"UPDATE\\": attribute, new_value = cmd_args[2].split(\\" \\", 1) library.update_book(book_id, attribute, new_value.strip(\'\\"\')) elif cmd_type == \\"CHECKOUT\\": library.checkout_book(book_id) elif cmd_type == \\"RETURN\\": library.return_book(book_id) elif cmd_type == \\"DELETE\\": library.delete_book(book_id) elif cmd_type == \\"LIST\\": library.list_all_books() elif cmd_type == \\"LIST AVAILABLE\\": library.list_available_books()"},{"question":"You are given an integer array `nums`. Your task is to determine whether the array contains a duplicate element. Constraints * 1 ≤ nums.length ≤ 10^5 * -10^9 ≤ nums[i] ≤ 10^9 Input Input is given from Standard Input and consists of the following: The first line contains an integer denoting the size of the array `n`. The second line contains `n` space-separated integers representing the array `nums`. Output If the array contains a duplicate element, print `Yes`; if not, print `No`. Examples Input 5 1 2 3 4 5 Output No Input 6 1 2 3 4 5 1 Output Yes Input 3 -1 -2 -1 Output Yes","solution":"def contains_duplicate(nums): Returns \'Yes\' if the array contains a duplicate element, otherwise \'No\'. if len(nums) != len(set(nums)): return \'Yes\' else: return \'No\'"},{"question":"Given a list of `n` integers, your task is to find the two integers in the list whose product is closest to a given integer `m`. If multiple pairs exist with the same closest product, return the pair which appears first in the list when considering all possible pairs in the order they appear. # Input - The first line contains two integers `n` and `m`, where `n` (2 ≤ n ≤ 1000) is the number of integers and `m` (1 ≤ m ≤ 10,000) is the integer to which the product should be closest. - The second line contains `n` integers separated by spaces. Each integer in the list will be between `-100` and `100` inclusive. # Output - Print the two integers whose product is closest to `m` in the order they appear in the list. If multiple pairs exist with the same closest product, print the first one. # Example Input ``` 5 15 3 2 1 6 5 ``` Output ``` 3 5 ``` Explanation - The possible products are: 3*2=6, 3*1=3, 3*6=18, 3*5=15, 2*1=2, 2*6=12, 2*5=10, 1*6=6, 1*5=5, 6*5=30. - The products closest to 15 are 15 (3*5) and 18 (3*6). Since the pair (3, 5) appears first, it is the output.","solution":"def closest_product_pair(n, m, numbers): Returns the pair of integers from the list whose product is closest to the given integer m. If multiple pairs exist with the same closest product, return the pair which appears first. closest_pair = None closest_diff = float(\'inf\') for i in range(n): for j in range(i + 1, n): product = numbers[i] * numbers[j] diff = abs(product - m) if diff < closest_diff: closest_diff = diff closest_pair = (numbers[i], numbers[j]) return closest_pair # Example usage: n = 5 m = 15 numbers = [3, 2, 1, 6, 5] result = closest_product_pair(n, m, numbers) print(result) # Output: (3, 5)"},{"question":"Nora decided to play another game with ROBO_Head-02. This time, she wants to teach ROBO about sequences. She presents ROBO with a sequence of n integers and asks him to find the largest sum of an increasing subsequence in the sequence. An increasing subsequence is a sequence of numbers such that each number is greater than the previous one. The sum of an increasing subsequence is the total of all its numbers. Help ROBO_Head-02 find the largest sum of an increasing subsequence for given sequences. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), the elements of the sequence. Output Print the largest sum of an increasing subsequence in the sequence. Examples Input 5 1 101 2 3 100 Output 106 Input 3 3 4 5 Output 12 Input 6 10 5 4 3 2 1 Output 10 Note In the first example, the largest sum of an increasing subsequence is obtained by the sequence [1, 2, 3, 100] with the sum 1 + 2 + 3 + 100 = 106. In the second example, the entire sequence [3, 4, 5] is an increasing subsequence with the sum 3 + 4 + 5 = 12. In the third example, the largest sum of an increasing subsequence is obtained by the single element [10] with the sum 10.","solution":"def largest_sum_increasing_subsequence(n, sequence): if n == 0: return 0 # Initialize a list to store the maximum sum of increasing subsequences ending at each index max_sum = sequence[:] # Iterate over the sequence to fill the `max_sum` list for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: max_sum[i] = max(max_sum[i], max_sum[j] + sequence[i]) # Return the maximum value from the `max_sum` list return max(max_sum) # Example usage: # n = 5 # sequence = [1, 101, 2, 3, 100] # print(largest_sum_increasing_subsequence(n, sequence)) # Output: 106"},{"question":"You are given a string s consisting of lowercase English letters. Your goal is to determine the first non-repeating character in s and return its position (0-indexed). If there is no such character, return -1. Constraints * 1 ≤ |s| ≤ 10<sup>5</sup> (|s| denotes the length of s.) * s consists of lowercase English letters. Input Input is given from Standard Input in the following format: ``` s ``` Output Print the 0-indexed position of the first non-repeating character in s, or -1 if there is no such character. Examples Input ``` leetcode ``` Output ``` 0 ``` Input ``` loveleetcode ``` Output ``` 2 ``` Input ``` aabb ``` Output ``` -1 ```","solution":"def first_non_repeating_character(s): Returns the 0-indexed position of the first non-repeating character in s, or -1 if there is no such character. # Dictionary to store the frequency of each character frequency = {} # Populate the frequency dictionary for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Find the first character with frequency 1 for i, char in enumerate(s): if frequency[char] == 1: return i # If no non-repeating character is found return -1"},{"question":"Alice is a student who loves to play with numbers. One day, her teacher gave her a fun yet challenging puzzle. The puzzle consists of a sequence of `N` numbers. The challenge is to find the largest contiguous subarray within the sequence that has the maximum sum. A contiguous subarray is a subarray formed from the original sequence by selecting a continuous block of elements. Alice needs your help to solve this puzzle. Given an array of `N` integers (both positive and negative), write a program to find the sum of the contiguous subarray with the largest sum. Input: The input consists of 2 lines. The first line contains an integer `N`, the length of the sequence. The second line contains `N` space-separated integers representing the sequence. Output: Print a single integer representing the maximum sum of a contiguous subarray. Constraints: 1 ≤ N ≤ 10^5 -10^4 ≤ sequence[i] ≤ 10^4 SAMPLE INPUT 8 -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation The contiguous subarray with the largest sum is `[4, -1, 2, 1]` which has a sum of `4 + (-1) + 2 + 1 = 6`.","solution":"def max_subarray_sum(n, sequence): Finds the sum of the contiguous subarray with the largest sum. Parameters: - n: int, the length of the sequence - sequence: list of ints, the sequence of numbers Returns: - int, the maximum sum of any contiguous subarray max_sum = sequence[0] current_sum = sequence[0] for i in range(1, n): current_sum = max(sequence[i], current_sum + sequence[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"**Balanced Parentheses Checker** **Problem Statement:** You are required to write a program that takes a string of characters as input and checks whether the parentheses in the string are balanced. The parentheses include the following types: `()`, `{}`, and `[]`. A string is considered balanced if: - Every opening parenthesis has a corresponding closing parenthesis of the same type. - The pairs of parentheses are properly nested. **Details:** 1. An empty string is considered balanced. 2. Each type of parenthesis must match its own type, and they must be correctly nested. 3. A string containing characters other than parentheses should be ignored when checking for balance. **Input:** - The input consists of a single line containing a string with up to 10^4 characters. **Output:** - Print `True` if the input string has balanced parentheses, and `False` otherwise. **Example Input and Output:** Example 1: ``` Input: {[()]} Output: True ``` Example 2: ``` Input: {[(])} Output: False ``` Example 3: ``` Input: {{[[(())]]}} Output: True ``` Example 4: ``` Input: {[a+b]*[x/y]} Output: True ``` **Constraints:** - The input string can contain uppercase and lowercase letters, digits, and special characters, but only `()`, `{}`, and `[]` should be considered for balance checking. **Function Signature:** ```python def is_balanced(s: str) -> bool: # Your code here ``` **Notes:** - Use a stack to help you validate the balance of parentheses. - Iterate through the string, pushing opening brackets onto the stack. - For each closing bracket, check if it matches the top of the stack. - If it does, pop the stack; otherwise, the string is unbalanced. - Ensure the stack is empty after checking the entire string to confirm balanced parentheses.","solution":"def is_balanced(s: str) -> bool: Checks if the parentheses in the input string are balanced. stack = [] parentheses = {\\"(\\": \\")\\", \\"{\\": \\"}\\", \\"[\\": \\"]\\"} for char in s: if char in parentheses: stack.append(char) elif char in parentheses.values(): if not stack or parentheses[stack.pop()] != char: return False return not stack"},{"question":"Given a list of integers, your task is to transform it into a sequence where every odd index (1-based) contains an odd number and every even index (1-based) contains an even number. If multiple solutions exist, return any of them. If it\'s not possible, return `-1`. Constraints: * 1 ≤ length of list ≤ 2×10^5 * Each integer in the list is between 1 and 10^9 Input An integer `n` (length of the list) followed by `n` space-separated integers. Output A single line containing `n` space-separated integers arranged according to the described rule or `-1` if no such arrangement is possible. Examples Input 5 3 8 5 2 1 Output 3 8 5 2 1 Input 4 2 2 2 2 Output -1 Input 6 1 2 3 4 5 6 Output 1 2 3 4 5 6","solution":"def transform_list(n, arr): odd_indices = [x for x in arr if x % 2 == 1] even_indices = [x for x in arr if x % 2 == 0] if len(odd_indices) >= (n + 1) // 2 and len(even_indices) >= n // 2: result = [0] * n odd_position = 0 even_position = 1 for odd in odd_indices: if odd_position < n: result[odd_position] = odd odd_position += 2 for even in even_indices: if even_position < n: result[even_position] = even even_position += 2 return result else: return -1"},{"question":"Chris is fascinated by palindrome numbers. A palindrome is a number that reads the same forwards and backwards, such as 121 or 1331. Chris is interested not only in plain palindromes but also in products of two numbers that result in a palindrome. He wonders about the largest palindromic number that can be obtained by multiplying two n-digit numbers. Help Chris determine this product. Input The single line contains an integer n (1 ≤ n ≤ 6)—the number of digits in the multipliers. Output Print a single integer—the largest palindromic number that can be obtained by multiplying two n-digit numbers. If no such number exists, print -1. Examples Input 2 Output 9009 Input 1 Output 9","solution":"def is_palindrome(num): return str(num) == str(num)[::-1] def largest_palindromic_product(n): if n < 1 or n > 6: return -1 max_num = 10**n - 1 min_num = 10**(n-1) max_palindrome = -1 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if product <= max_palindrome: break if is_palindrome(product): max_palindrome = product return max_palindrome"},{"question":"Maze Navigation You find yourself in a maze represented by a grid of cells. Your task is to navigate from the start cell to the destination cell in the shortest possible time. Each cell in the maze contains a certain amount of time it takes to pass through it. You can only move up, down, left, or right. Write a program that computes the minimum time required to reach the destination from the start. Input The input consists of a single dataset: > m n > t_1_1 t_1_2 ... t_1_n > t_2_1 t_2_2 ... t_2_n > ... > t_m_1 t_m_2 ... t_m_n > x_start y_start > x_end y_end The first line contains two integers m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100), which represent the number of rows and columns of the maze, respectively. The next m lines each contain n integers, where t_i_j (1 ≤ t_i_j ≤ 100) denotes the time it takes to pass through cell (i, j). The following line contains two integers x_start and y_start (1 ≤ x_start, y_start ≤ max(m, n)), which are the starting cell coordinates. The final line contains two integers x_end and y_end (1 ≤ x_end, y_end ≤ max(m, n)), which are the destination cell coordinates. Output Output a single integer representing the minimum time required to reach the destination from the start. If it is not possible to reach the destination, output \\"IMPOSSIBLE\\". Sample Input 3 3 1 2 3 4 5 6 7 8 9 1 1 3 3 Sample Output 21 Example Input 3 3 1 2 3 4 5 6 7 8 9 1 1 3 3 Output 21","solution":"import heapq def minimum_time_to_destination(m, n, grid, start, end): # Create a priority queue to store cells to visit, starting with the start cell pq = [(grid[start[0]][start[1]], start[0], start[1])] # (time, x, y) visited = set() directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while pq: current_time, x, y = heapq.heappop(pq) if (x, y) in visited: continue visited.add((x, y)) if (x, y) == end: return current_time for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: heapq.heappush(pq, (current_time + grid[nx][ny], nx, ny)) return \\"IMPOSSIBLE\\" # Sample Usage m, n = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] start = (0, 0) end = (2, 2) print(minimum_time_to_destination(m, n, grid, start, end)) # Output: 21"},{"question":"You are given a tree with `n` nodes numbered from 1 to `n`. Each node has a value. You have to answer `q` queries. Each query consists of two integers, `u` and `v` and asks for the maximum value of the nodes in the path from `u` to `v`. Input The first line of the input contains an integer `n` (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line of the input contains `n` space-separated integers where the `i-th` integer denotes the value of node `i` (1 ≤ value_i ≤ 10^6). Each of the next `n-1` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n), which means there is an edge between node `a` and node `b`. The following line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. Each of the next `q` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) — the nodes for each query. Output For each query, output the maximum value of the nodes in the path from `u` to `v`. Example Input 5 1 5 2 4 3 1 2 1 3 3 4 3 5 3 2 3 4 1 4 5 Output 5 4 4","solution":"from collections import defaultdict, deque import sys sys.setrecursionlimit(200000) def preprocess_tree(n, values, edges): LOG = 17 adj = defaultdict(list) for a, b in edges: adj[a].append(b) adj[b].append(a) up = [[-1] * (LOG + 1) for _ in range(n + 1)] max_on_path = [[-1] * (LOG + 1) for _ in range(n + 1)] depth = [-1] * (n + 1) def dfs(v, parent): depth[v] = depth[parent] + 1 if parent != -1 else 0 up[v][0] = parent max_on_path[v][0] = values[v-1] for i in range(1, LOG + 1): if up[v][i-1] != -1: up[v][i] = up[up[v][i-1]][i-1] max_on_path[v][i] = max(max_on_path[v][i-1], max_on_path[up[v][i-1]][i-1]) for u in adj[v]: if u != parent: dfs(u, v) root = 1 dfs(root, -1) def lca(u, v): if depth[u] < depth[v]: u, v = v, u max_value = -1 diff = depth[u] - depth[v] for i in range(LOG + 1): if (diff >> i) & 1: max_value = max(max_value, max_on_path[u][i]) u = up[u][i] if u == v: return max(max_value, values[u-1]) for i in range(LOG, -1, -1): if up[u][i] != up[v][i]: max_value = max(max_value, max_on_path[u][i], max_on_path[v][i]) u = up[u][i] v = up[v][i] return max(max_value, max_on_path[u][0], max_on_path[v][0], values[up[u][0]-1]) return lca def solve(n, values, edges, queries): lca = preprocess_tree(n, values, edges) results = [] for u, v in queries: results.append(lca(u, v)) return results"},{"question":"Deforestation is a major environmental issue affecting the planet. As a developer at an environmental NGO, you\'re tasked with creating a software system to help monitor forest loss in various regions over time. Your system will process logs of deforestation events and generate reports based on the stored data. The forest is divided into a grid, where each cell in the grid represents a forest area. Each deforestation event affects a rectangular section of the grid, removing the forest in that area. Your task is to maintain the grid and answer queries about the current state of the forest. Input The input consists of multiple test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. Then an integer q (1 ≤ q ≤ 100,000) indicating the number of events that follow. Each of the next q lines can represent one of two types of events: 1. A deforestation event in the form: `D x1 y1 x2 y2` where `(x1, y1)` and `(x2, y2)` represent the top-left and bottom-right corners of the rectangular area affected (1 ≤ x1 ≤ x2 ≤ n; 1 ≤ y1 ≤ y2 ≤ m). 2. A query in the form: `Q x y` where `(x, y)` represents the coordinates of the cell to check (1 ≤ x ≤ n; 1 ≤ y ≤ m). Output For each query, output \\"Deforested\\" if the cell at `(x, y)` is deforested, and \\"Forest\\" otherwise. Example Input 3 3 6 D 1 1 2 2 Q 1 1 Q 2 2 Q 3 3 D 2 2 3 3 Q 2 2 Q 3 3 4 4 3 Q 1 1 D 1 1 4 4 Q 3 3 Q 4 4 Output Deforested Deforested Forest Deforested Deforested Forest Deforested Deforested","solution":"def process_deforestation_events(n, m, events): Process a series of deforestation events and queries on an n x m grid representing a forest. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid events (list of str): list of events, where each event is either a deforestation event in the form \'D x1 y1 x2 y2\' or a query in the form \'Q x y\' Returns: list of str: responses to the queries, each being \\"Deforested\\" or \\"Forest\\" forest = [[True for _ in range(m)] for _ in range(n)] results = [] for event in events: parts = event.split() if parts[0] == \'D\': x1, y1, x2, y2 = map(int, parts[1:]) for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): forest[i][j] = False elif parts[0] == \'Q\': x, y = map(int, parts[1:]) results.append(\\"Deforested\\" if not forest[x - 1][y - 1] else \\"Forest\\") return results"},{"question":"Alice has recently started learning about number sequences. She is particularly interested in sequences where every number is the sum of the squares of its digits. She calls such sequences \\"Square Sum Sequences.\\" A \\"Square Sum Sequence\\" starts with a given number x and the next number is found by summing the squares of its digits, and so on. Alice observed that some sequences eventually reach 1 and then stay at 1, while others enter a repeating cycle that does not include 1. Alice wants to know, given an integer x, whether the \\"Square Sum Sequence\\" starting from x will eventually reach 1 or will enter a cycle that does not include 1. Write a program that helps Alice determine the outcome. Input The input consists of a single line containing a positive integer x (1 ≤ x ≤ 10^9). Output Print \\"Happy\\" if the \\"Square Sum Sequence\\" starting from x will eventually reach 1. Otherwise, print \\"Unhappy\\". Examples Input 19 Output Happy Input 4 Output Unhappy Note In the first example, the sequence starting from 19 is: 19 -> 1^2 + 9^2 = 82 82 -> 8^2 + 2^2 = 68 68 -> 6^2 + 8^2 = 100 100 -> 1^2 + 0^2 + 0^2 = 1 Since the sequence reaches 1, the output is \\"Happy\\". In the second example, the sequence starting from 4 is: 4 -> 4^2 = 16 16 -> 1^2 + 6^2 = 37 37 -> 3^2 + 7^2 = 58 58 -> 5^2 + 8^2 = 89 89 -> 8^2 + 9^2 = 145 145 -> 1^2 + 4^2 + 5^2 = 42 42 -> 4^2 + 2^2 = 20 20 -> 2^2 + 0^2 = 4 Since the sequence enters a cycle and does not reach 1, the output is \\"Unhappy\\".","solution":"def is_happy_number(x): Determines if the square sum sequence starting from x eventually reaches 1. Args: x (int): The starting integer for the sequence. Returns: str: \\"Happy\\" if the sequence reaches 1, otherwise \\"Unhappy\\". def get_next_number(n): return sum(int(digit) ** 2 for digit in str(n)) seen_numbers = set() while x != 1 and x not in seen_numbers: seen_numbers.add(x) x = get_next_number(x) return \\"Happy\\" if x == 1 else \\"Unhappy\\""},{"question":"Problem description In a faraway land, there exists a peculiar tribe known for their unique calendar system. Their year consists of X months, each with Y days. The tribespeople are very regimented, and they record every event with a timestamp in the format: (M, D), where M denotes the month and D denotes the day of the month. An event can only be scheduled on a valid day of the month and a valid month of the year. You are given the number of months X and the number of days Y in each month. You are also given a list of events scheduled by the tribe. Your task is to determine if a given event is a valid event or not based on the tribe\'s calendar system. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers X and Y, denoting the number of months and days in each month respectively. The next line contains an integer E denoting the number of events. The following E lines each contain two integers M and D, representing the month and day of an event. Output For each test case, output E lines, each containing \\"valid\\" if the event is valid, or \\"invalid\\" if the event is not valid. Constraints 1 ≤ T ≤ 100 1 ≤ X ≤ 50 1 ≤ Y ≤ 50 1 ≤ E ≤ 1000 Example Input: 1 12 30 3 1 15 13 1 6 31 Output: valid invalid invalid","solution":"def validate_events(test_cases): results = [] for case in test_cases: X, Y, E, events = case case_result = [] for event in events: M, D = event if 1 <= M <= X and 1 <= D <= Y: case_result.append(\\"valid\\") else: case_result.append(\\"invalid\\") results.append(case_result) return results"},{"question":"In a distant kingdom, farmers are trying to determine the best way to divide their land. They have a rectangular piece of land represented as a grid. Each cell in the grid has a different fertility score represented by a positive integer. The farmer wants to divide this grid into exactly two contiguous subgrids such that each subgrid has the same total fertility score. A contiguous subgrid implies that you can reach any cell in the subgrid from any other cell in the same subgrid by only moving up, down, left, or right without leaving the subgrid. Write a program to help the farmer determine if it is possible to divide the land in such a way. If it is possible, output \\"YES,\\" otherwise output \\"NO.\\" Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. Each of the next n lines contains m integers aij (1 ≤ aij ≤ 100) representing the fertility scores of the cells in the grid. Output If it is possible to divide the grid into two contiguous subgrids with equal total fertility score, print \\"YES.\\" Otherwise, print \\"NO.\\" Examples Input 3 3 1 3 2 5 4 2 2 1 3 Output NO Input 2 4 1 1 1 1 1 1 1 1 Output YES","solution":"def can_divide_grid(n, m, grid): from collections import deque total_fertility = sum(sum(row) for row in grid) if total_fertility % 2 != 0: return \\"NO\\" target_fertility = total_fertility // 2 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start, target_fertility): queue = deque([start]) visited = set([start]) current_sum = grid[start[0]][start[1]] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) current_sum += grid[nx][ny] if current_sum == target_fertility: return True elif current_sum > target_fertility: return False return False for i in range(n): for j in range(m): if grid[i][j] <= target_fertility: if bfs((i, j), target_fertility): return \\"YES\\" return \\"NO\\""},{"question":"Zoe is working on a game where she has to navigate through a grid, but she can only move up or to the right. She starts at the bottom-left corner of the grid (1,1) and aims to reach the top-right corner (n, m). Unfortunately, some cells contain obstacles that she cannot pass through. Zoe wants to know how many different paths she can take to reach her goal without passing through any obstacles. Write a program that computes the number of unique paths from the bottom-left to the top-right corner of the grid. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The second line contains an integer k (0 ≤ k ≤ n*m) representing the number of obstacles. Each of the next k lines contains two space-separated integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) representing the row and column of an obstacle. Output Print a single integer representing the number of unique paths from the bottom-left to the top-right corner of the grid. If there is no path, output 0. Examples Input 3 3 1 2 2 Output 2 Input 3 3 2 2 2 1 3 Output 1","solution":"def unique_paths(n, m, k, obstacles): # Initialize the grid with -1 where obstacles are placed grid = [[0] * (m + 1) for _ in range(n + 1)] for x, y in obstacles: grid[x][y] = -1 # DP table to store number of paths to each cell dp = [[0] * (m + 1) for _ in range(n + 1)] dp[1][1] = 1 if grid[1][1] == 0 else 0 for i in range(1, n + 1): for j in range(1, m + 1): if grid[i][j] == -1: dp[i][j] = 0 else: if i > 1 and grid[i-1][j] != -1: dp[i][j] += dp[i-1][j] if j > 1 and grid[i][j-1] != -1: dp[i][j] += dp[i][j-1] return dp[n][m] # Example usage (you can remove this when testing): # n = 3 # m = 3 # k = 1 # obstacles = [(2, 2)] # print(unique_paths(n, m, k, obstacles))"},{"question":"A popular new messaging app called \\"Chatz\\" has a unique feature where conversations are grouped into threads. Each thread consists of individual messages, each with a unique identifier, a sender\'s name, and the content of the message. To keep track of all messages, Chatz maintains a list where each message is stored as a tuple: (message_id, sender, content). Due to the high volume of messages, Chatz developers need to implement a feature that allows for quick filtering of messages by sender. Given a list of all messages and a specific sender\'s name, your task is to write a function that returns a list of message contents sent by that sender. The messages in the returned list should appear in the same order as they do in the original list. **Input** - An integer n (1 ≤ n ≤ 100,000) — the number of messages. - The next n lines each contain a message represented by a tuple (message_id, sender, content). - A string sender_name — the name of the sender whose messages need to be filtered. **Output** - A list of strings — the contents of the messages sent by the specified sender, in the order they appear in the original list. **Examples** Input ``` 5 1 Alice \\"Hello there!\\" 2 Bob \\"Hi, Alice!\\" 3 Alice \\"How are you?\\" 4 Charlie \\"Hey everyone!\\" 5 Alice \\"I\'m doing great, thanks!\\" Alice ``` Output ``` [\\"Hello there!\\", \\"How are you?\\", \\"I\'m doing great, thanks!\\"] ``` Input ``` 4 1 David \\"Good morning!\\" 2 Eva \\"Hello!\\" 3 David \\"How\'s it going?\\" 4 Frank \\"Good to see you!\\" David ``` Output ``` [\\"Good morning!\\", \\"How\'s it going?\\"] ``` **Note** In the first example, we filter out messages sent by \\"Alice\\". Out of the five messages in the input, three were sent by Alice, so the output lists their contents in the order they appeared. In the second example, the filter is applied to messages sent by \\"David\\". The output contains the contents of David\'s messages, maintaining their original order.","solution":"def filter_messages_by_sender(messages, sender_name): Filters messages by the specified sender\'s name. Parameters: messages (list of tuples): List of messages where each message is represented as a tuple (message_id, sender, content). sender_name (str): The name of the sender whose messages need to be filtered. Returns: list: A list of message contents sent by the specified sender. return [content for _, sender, content in messages if sender == sender_name] # Example usage: # messages = [(1, \\"Alice\\", \\"Hello there!\\"), (2, \\"Bob\\", \\"Hi, Alice!\\"), (3, \\"Alice\\", \\"How are you?\\"), # (4, \\"Charlie\\", \\"Hey everyone!\\"), (5, \\"Alice\\", \\"I\'m doing great, thanks!\\")] # sender_name = \\"Alice\\" # print(filter_messages_by_sender(messages, sender_name)) # Output: [\\"Hello there!\\", \\"How are you?\\", \\"I\'m doing great, thanks!\\"]"},{"question":"A company is launching a new product and wants to gather early feedback. They have invited certain individuals (called experiments) who will participate in some trial runs of the product. You are given the list of participants and trial runs they are involved in. Each participant gives a score on a scale of 1 to 10 after a trial run. Your task is to determine the average score each participant gives across all their trial runs. If a participant has not participated in any trial runs, their average score is considered to be 0. Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 1000), the number of participants. Each of the next n lines contains the name of a participant (a string consisting of letters only) and m pairs, each pair contains an integer r (1 ≤ r ≤ 1000) — the identifier of the trial run and an integer s (1 ≤ s ≤ 10) — the score of the participant for that trial run. Output For each test case, print the list of participants and their average score rounded to two decimal places. Example Input 2 3 Alice 3 1 8 2 7 3 9 Bob 1 1 6 3 5 Charlie 2 2 4 3 5 2 Dave 2 1 5 2 6 Eve 0 Output Alice 8.00 Bob 5.50 Charlie 4.50 Dave 5.50 Eve 0.00","solution":"def calculate_average_scores(t, test_cases): results = [] for i in range(t): n = test_cases[i][\'n\'] participants = test_cases[i][\'participants\'] participant_scores = [] for j in range(n): data = participants[j] name = data[0] scores = data[1] if scores: average_score = sum(scores) / len(scores) else: average_score = 0.0 participant_scores.append(f\\"{name} {average_score:.2f}\\") results.extend(participant_scores) return results"},{"question":"You are developing a system for a hospital to schedule and allocate operation rooms to various surgeries. Each surgery is characterized by its start time, end time, and the room in which it will take place. Your task is to implement a function that verifies whether a given schedule is valid. A schedule is valid if no two surgeries overlap in the same room. Input - The first line contains an integer N, denoting the number of surgeries (1 ≤ N ≤ 100). - The following N lines each contain two integers Si and Ei (0 ≤ Si < Ei ≤ 1440), representing the start time and end time of the i-th surgery in minutes from midnight. - The i-th line also contains an integer Ri (1 ≤ Ri ≤ 100), representing the room number assigned to this surgery. Output - Print \\"Valid\\" if the given schedule has no conflicts. - Print \\"Invalid\\" if there is at least one conflict (i.e., at least two surgeries overlap in the same room). Examples Input 3 30 150 1 540 600 1 145 160 1 Output Invalid Input 2 60 120 1 130 180 1 Output Valid","solution":"def is_valid_schedule(n, surgeries): Verifies whether a given schedule is valid. A schedule is valid if no two surgeries overlap in the same room. Arguments: n : int -- the number of surgeries surgeries : list of tuples -- each tuple contains (Si, Ei, Ri) representing the start time, end time, and room number Returns: str -- \\"Valid\\" if no conflicts, \\"Invalid\\" if there\'s at least one conflict. from collections import defaultdict room_schedules = defaultdict(list) for surgery in surgeries: start, end, room = surgery room_schedules[room].append((start, end)) for room, times in room_schedules.items(): times.sort() end_time = -1 for start, end in times: if start < end_time: return \\"Invalid\\" end_time = end return \\"Valid\\""},{"question":"You are given a string of characters that represent operations and operands of a mathematical expression. Your task is to evaluate the expression and print out the result. The mathematical expression may include: 1. Positive and negative integers (e.g., 5, -12, etc.) 2. Basic arithmetic operators: +, -, *, / (addition, subtraction, multiplication, and division) 3. Parentheses to denote the order of operations. Maintain the natural order of precedence for operations: parentheses > multiplication/division > addition/subtraction. Note that division always indicates integer division. Input A single line containing a valid mathematical expression. The length of the string does not exceed 105 characters. All integers are within the range [-105, 105]. Output Print the integer result of the given mathematical expression. Examples Input 3+2*2 Output 7 Input (1+(4+5+2)-3)+(6+8) Output 23 Note In the first example, the evaluation proceeds as follows: 3 + (2 * 2) = 3 + 4 = 7. In the second example, the evaluation is done as follows: ((1 + ((4 + 5) + 2)) - 3) + (6 + 8) = (1 + 11 - 3) + 14 = 9 + 14 = 23.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing positive and negative integers, and the +, -, *, / operators, as well as parentheses to denote order of operations. Parameters: expression (str): A string representation of the mathematical expression. Returns: int: The result of the evaluated expression. from collections import deque def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(int(left / right)) # use int() to ensure integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def calculate(expression): operators = deque() values = deque() i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit() or (expression[i] == \'-\' and (i == 0 or expression[i-1] in \\"(+-*/\\")): # Check for segment that might form a number with multiple digits including negative signs start = i if expression[i] == \'-\': i += 1 while i < len(expression) and expression[i].isdigit(): i += 1 values.append(int(expression[start:i])) continue elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # pop \'(\' else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0] return calculate(expression)"},{"question":"A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them. Given a binary tree, write a program to determine its diameter. Input The input is given in multiple lines. The first line contains a single integer n, the number of nodes in the tree (1 ≤ n ≤ 100000). The subsequent n lines each contain three integers p, q, and d, implying that there is an edge of length d between p and q (1 ≤ d ≤ 1000). The nodes are numbered from 1 to n. Output The output is a single integer that represents the diameter of the binary tree. Example Input 5 1 2 3 1 3 4 2 4 2 3 5 5 Output 14 Explanation The longest path in the given tree goes from node 4 to node 5 passing through nodes 2, 1, and 3. The length of this path is 2 + 3 + 4 + 5 = 14.","solution":"from collections import defaultdict, deque class TreeDiameter: def __init__(self, n): self.n = n self.edges = defaultdict(list) def add_edge(self, p, q, d): self.edges[p].append((q, d)) self.edges[q].append((p, d)) def bfs(self, start): longest_distance = -1 furthest_node = start queue = deque([(start, 0)]) visited = set() while queue: node, dist = queue.popleft() if dist > longest_distance: longest_distance = dist furthest_node = node visited.add(node) for neighbor, length in self.edges[node]: if neighbor not in visited: queue.append((neighbor, dist + length)) return furthest_node, longest_distance def find_diameter(self): # Find the farthest node from any starting node, say node 1 leaf, _ = self.bfs(1) # Find the farthest node from the leaf found in the previous BFS _, diameter = self.bfs(leaf) return diameter def tree_diameter(n, edges): tree = TreeDiameter(n) for p, q, d in edges: tree.add_edge(p, q, d) return tree.find_diameter()"},{"question":"Alice and Bob are competing in a coding competition. The competition consists of multiple rounds, and in each round, they can earn a certain number of points. Given the points they\'ve earned in each round, determine whether there exists a non-empty subset of rounds where Alice\'s total points are strictly greater than Bob\'s total points. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of rounds Alice and Bob have participated in, respectively. The second line contains n integers, each representing the points Alice earned in each round. The third line contains m integers, each representing the points Bob earned in each round. Output Output \\"YES\\" (without quotes) if it is possible to find a non-empty subset of rounds where Alice\'s total points are strictly greater than Bob\'s total points; otherwise, output \\"NO\\". Examples Input 3 4 3 5 7 2 3 4 6 Output YES Input 2 2 1 2 2 2 Output NO Note In the first example, if we consider only the second and third rounds where Alice scored 5 and 7, respectively, their total (5 + 7 = 12) is greater than Bob\'s highest possible total from any subset. In the second example, any subset of Alice\'s points will not be strictly greater than any subset of Bob\'s points.","solution":"def can_alice_win(n, m, alice_points, bob_points): Determines if there exists a non-empty subset of Alice\'s points where the total points is strictly greater than any subset of Bob\'s points. Parameters: n (int): Total rounds for Alice. m (int): Total rounds for Bob. alice_points (list): List containing points Alice scored in each round. bob_points (list): List containing points Bob scored in each round. Returns: str: \\"YES\\" if there exists such a subset, otherwise \\"NO\\". max_alice = max(alice_points) max_bob = max(bob_points) if max_alice > max_bob: return \\"YES\\" return \\"NO\\""},{"question":"There is a novel social networking site called \\"SocialTown\\" where users create content called \'blips\'. A blip is a string consisting of lowercase English alphabetic letters. SocialTown values the popularity of different blips, and they have found that a blip\'s popularity can often be determined by the number of unique characters it contains. Your task is to write a program that reads a list of blips and determines the blip with the greatest number of unique characters. If there are multiple blips with the same number of unique characters, the first occurring one should be selected. Input: - The first line of input contains a single integer N, the number of blips (1 ≤ N ≤ 100). - The next N lines each contain a blip, which is a non-empty string of at most 100 lowercase English letters. Output: - Output the blip with the highest number of unique characters. Example Input: 4 social networking interest content Example Output: networking Explanation: The blip \\"social\\" has 6 unique characters. The blip \\"networking\\" has 9 unique characters. The blip \\"interest\\" has 8 unique characters. The blip \\"content\\" has 5 unique characters. Since \\"networking\\" has the most unique characters, it is the output.","solution":"def highest_unique_char_blip(blips): Returns the blip with the highest number of unique characters, or the first occurring one in case of a tie. max_unique_chars = 0 result_blip = \\"\\" for blip in blips: unique_chars = len(set(blip)) if unique_chars > max_unique_chars: max_unique_chars = unique_chars result_blip = blip elif unique_chars == max_unique_chars and result_blip == \\"\\": result_blip = blip return result_blip"},{"question":"Given a sequence of positive integers representing the height of buildings aligned in a single row, you need to determine the amount of water that can be trapped after it rains. Each building is represented by an integer in the sequence, where the value corresponds to the height of the building. The width of each building is 1 unit, and the water trapped will be between the gaps of these buildings. You need to compute the total amount of trapped rainwater. For example, if the sequence is [0,1,0,2], the total units of water trapped will be 1. Input The input data consists of a single line containing the heights of the buildings as a space-separated sequence of positive integers (0 ≤ height ≤ 10^4, 1 ≤ number of buildings ≤ 10^5). Output Print the total amount of water that can be trapped after the rain. Examples Input 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 4 2 0 3 2 5 Output 9","solution":"def trap_rainwater(heights): Given list of building heights, returns the units of water that can be trapped after rainfall. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 # Fill the left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill the right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the accumulated water for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"In a tropical region, there are many types of animals, and one kind, in particular, is a special species known as the Jabberwocky. The region has implemented conservation efforts to monitor their population. Every month, conservationists set up cameras and count the number of Jabberwockies passing by. The conservation data is organized into records, which contain the month of the observation and the count of Jabberwockies. Each record has a unique month and is formatted as \\"Month Count\\", where Month is the month number (1 for January, 2 for February, and so on) and Count is the integer number of Jabberwockies observed in that month. Given `n` records of monthly observations, where each record contains the month and the number of Jabberwockies observed, write a program to determine the month with the highest number of Jabberwocky sightings. If multiple months have the same maximum count, return the first such month encountered in the input. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 12) — the number of months for which observations are provided. - Each of the following `n` lines contains a record formatted as `Month Count` (1 ≤ Month ≤ 12, 0 ≤ Count ≤ 10^6). Each month from `1` to `12` will appear at most once. Output: - Print a single integer representing the month number with the highest number of Jabberwocky sightings. If multiple months have the same maximum count, print the first one encountered in the input. Examples: Input: 3 1 50 2 80 3 80 Output: 2 Input: 5 1 100 2 200 3 150 4 50 5 0 Output: 2 Input: 4 3 75 6 150 9 150 12 50 Output: 6 In this task, you need to ensure that your solution efficiently processes the records and accurately identifies the month with the highest Jabberwocky sightings. Prepare to handle the edge cases where months have the same number of sightings and return the first encountered in the input order.","solution":"def month_with_highest_sightings(records): Determines the month with the highest Jabberwocky sightings. Parameters: records (list of str): List of strings where each string is formatted as \\"Month Count\\". Returns: int: The month with the highest number of Jabberwocky sightings. max_count = -1 max_month = -1 for record in records: month, count = map(int, record.split()) if count > max_count: max_count = count max_month = month return max_month"},{"question":"In a little town, a big carnival is organized once a year. This year, the organizers decided to have a new attraction called the \\"Mirror Maze\\". The maze consists of n corridors arranged in a straight line, and each corridor has a mirror. Each mirror can be set to one of two positions: \'/ \' or \'\'. When visitors enter the maze, they move from the leftmost corridor to the rightmost corridor, changing their direction based on the orientation of the mirrors: - If the mirror is \'/\', it changes the direction from horizontal to diagonal (or vice versa). - If the mirror is \'\', it changes the direction from horizontal to diagonal (or vice versa). Visitors start with a light ray travelling horizontally from the leftmost corridor towards the right. If the light ray is travelling horizontally and it encounters a mirror at \'/\', it starts moving diagonally downwards-right; if it encounters \'\', it starts moving diagonally upwards-right. Conversely, if it is moving diagonally downwards-right and meets \'/\', it turns to horizontal left; if it meets \'\', it continues diagonally downwards-right. Similarly, for other combinations of directions and mirrors. The organizers want to know if, with a given configuration of mirrors, a visitor entering the maze will be able to exit the maze from the rightmost corridor. Write a program that determines if the light ray can reach the last corridor. Input The first line of the input contains an integer t (1 ≤ t ≤ 10^4) - the number of test cases. Each of the next t lines contains a string of characters \' / \' and \' \' of length n (1 ≤ n ≤ 10^5), representing the mirrors in the corridors. Output For each test case, print \\"YES\\" if the light ray can reach the rightmost corridor when entering from the leftmost corridor, otherwise print \\"NO\\". Example Input 3 //// ////// Output YES YES NO","solution":"def will_exit_maze(test_cases): results = [] for mirrors in test_cases: n = len(mirrors) if \'/\' in mirrors: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Input reading function for testing purpose def read_input(): t = int(input()) test_cases = [] for _ in range(t): test_cases.append(input().strip()) return test_cases"},{"question":"GigaFashion online store updates its product inventory frequently. Every product in the store has a unique product ID and a corresponding quantity in stock. When a new shipment arrives, the store updates the quantities based on the shipment details. However, if a product ID in the shipment is not already present in the inventory, it needs to be added with its corresponding quantity. Your task is to write a program that will update the inventory based on a list of shipments. Input The first line contains an integer n (1 ≤ n ≤ 1000) - the number of products already present in the inventory. The next n lines each contain a string s (1 ≤ |s| ≤ 15) - the product ID, and an integer q (0 ≤ q ≤ 10000) - the quantity of the product in stock. The subsequent line contains an integer m (1 ≤ m ≤ 1000) - the number of products in the shipment. The next m lines each contain a string s (1 ≤ |s| ≤ 15) - the product ID, and an integer q (1 ≤ q ≤ 10000) - the quantity of the product in the shipment. Output For each product in the updated inventory, output a line containing the product ID and its updated quantity. The output should list products in the same order as they appeared in the initial inventory, followed by any new products from the shipment in the order they appeared in the shipment. Examples Input 3 apple 50 banana 20 orange 30 2 banana 10 grape 15 Output apple 50 banana 30 orange 30 grape 15 Input 2 shoes 15 hat 25 3 shirt 10 hat 5 belt 12 Output shoes 15 hat 30 shirt 10 belt 12 Note In the first test case, the product \\"banana\\" already exists in the inventory, so its quantity is updated to 30 (existing 20 + new 10). The new product \\"grape\\" is added with quantity 15. Products \\"apple\\" and \\"orange\\" remain unchanged. In the second test case, product \\"hat\\" quantity is updated to 30 (existing 25 + new 5). New products \\"shirt\\" and \\"belt\\" are added to the inventory. Product \\"shoes\\" remains unchanged.","solution":"def update_inventory(inventory, shipments): Updates the inventory based on the shipment details. :param inventory: List of tuples, where each tuple contains a product ID (str) and a quantity (int). :param shipments: List of tuples, where each tuple contains a product ID (str) and a quantity (int). :return: List of tuples representing the updated inventory. inventory_dict = {product: quantity for product, quantity in inventory} for product, quantity in shipments: if product in inventory_dict: inventory_dict[product] += quantity else: inventory_dict[product] = quantity updated_inventory = [] # Maintain the order of initial inventory for product, quantity in inventory: updated_inventory.append((product, inventory_dict[product])) # Add new products from shipments for product, quantity in shipments: if product not in dict(inventory): updated_inventory.append((product, quantity)) return updated_inventory"},{"question":"Aria, the young warrior, needs to streamline her inventory of weapons. She wants to keep it organized by grouping identical weapons together. However, due to the haste of battle, some duplicate weapons might not have been grouped correctly. She receives a list of weapons in the form of words. A weapon can be represented by any permutation of its name (case insensitive). Write a function to group the given list of weapon names so that each group contains all case-insensitive anagrams of each weapon. The order of the groups does not matter, nor does the order within each group. Input Format A list of strings, where each string represents the name of a weapon. Constraints 1 ≤ number of strings ≤ 10^4 1 ≤ length of each string ≤ 100 Output Format A list of lists, where each sublist contains strings that are anagrams of each other. SAMPLE INPUT [\\"Sword\\", \\"Rodws\\", \\"Gun\\", \\"nGu\\", \\"Bow\\", \\"Wob\\", \\"Arrow\\"] SAMPLE OUTPUT [ [\\"Sword\\", \\"Rodws\\"], [\\"Gun\\", \\"nGu\\"], [\\"Bow\\", \\"Wob\\"], [\\"Arrow\\"] ] Explanation Each sublist contains all the anagrams of a given weapon name, grouped together. For example, \\"Sword\\" and \\"Rodws\\" are anagrams, as are \\"Gun\\" and \\"nGu\\". \\"Bow\\" and \\"Wob\\" form another group, while \\"Arrow\\" has no anagrams in the list.","solution":"def group_anagrams(weapons): Group weapons that are anagrams of each other (case insensitive). :param weapons: List of weapon names (strings) :return: List of lists, where each sublist contains anagrams from collections import defaultdict anagram_dict = defaultdict(list) for weapon in weapons: sorted_weapon = \'\'.join(sorted(weapon.lower())) anagram_dict[sorted_weapon].append(weapon) return list(anagram_dict.values())"},{"question":"You are tasked with developing a game for a new app. One of the mini-games involves finding unique paths in a grid. Given a grid with obstacles, the player’s goal is to reach the bottom-right corner starting from the top-left corner. You need to calculate the number of unique paths that a player can take to move from the start to the finish. You can only move either down or right at any point in time. An obstacle and empty space are marked as a 1 and 0 respectively in the grid. Example: Input: [ [0,0,0], [0,1,0], [0,0,0] ] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Write a function `uniquePathsWithObstacles(obstacleGrid)` that takes a grid as an argument and returns the number of unique paths from the top-left to the bottom-right corner. Function Signature: ```python def uniquePathsWithObstacles(obstacleGrid: List[List[int]]) -> int: ``` # Input - The input `obstacleGrid` is a list of lists of integers, where `obstacleGrid[i][j]` is either 0 (representing an empty space) or 1 (representing an obstacle). - The dimensions of the grid are m x n (1 <= m, n <= 100). # Output - Return an integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Note The starting cell and the ending cell are always empty (0).","solution":"def uniquePathsWithObstacles(obstacleGrid): This function calculates the number of unique paths from the top-left corner to the bottom-right corner of the grid considering obstacles. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) # Create a dp grid initialized to 0 dp = [[0] * n for _ in range(m)] # Start position dp[0][0] = 1 # Fill first column for i in range(1, m): dp[i][0] = dp[i-1][0] if obstacleGrid[i][0] == 0 else 0 # Fill first row for j in range(1, n): dp[0][j] = dp[0][j-1] if obstacleGrid[0][j] == 0 else 0 # Fill the rest of the dp grid for i in range(1, m): for j in range(1, n): if obstacleGrid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"A group of school children decided to play a game. The game involved creating different types of sequences using a set of predefined rules. They invited you to participate in the game by solving a programming challenge related to the sequences they create. Here are the rules for creating a sequence: 1. Start with an integer `n` (1 ≤ n ≤ 100). 2. Create an integer sequence s1, s2, ..., sn such that it follows these conditions: - The sequence must include exactly `n` positive integers. - The sum of all integers in the sequence must be even. - The sequence must not include two consecutive identical numbers. Your task is to write a program that generates such a sequence. Input A single integer n (1 ≤ n ≤ 100). Output Print `n` space-separated integers s1, s2, ..., sn (1 ≤ si ≤ 100) representing the sequence that meets all conditions mentioned above. If it is impossible to create such a sequence, print -1. If there are multiple valid sequences, you are allowed to print any of them. Examples Input 4 Output 1 2 3 4 Input 5 Output 1 2 3 4 5","solution":"def create_sequence(n): Generates a sequence of `n` positive integers that meets the specified conditions: - Sum of all integers in the sequence is even. - No two consecutive identical numbers. If it\'s impossible to create such a sequence, returns -1. if n == 1: return -1 sequence = [] for i in range(1, n + 1): sequence.append(i) if n % 2 == 1: # For odd n, increment the last element by 1 to make the sum even sequence[-1] += 1 return sequence # Function call example if __name__ == \\"__main__\\": import sys input = int(sys.argv[1]) result = create_sequence(input) if result == -1: print(result) else: print(\' \'.join(map(str, result)))"},{"question":"You are given an array of n integers, where each element represents the price of a stock on a given day. You are allowed to perform at most k transactions to maximize your profit, where a transaction is defined as buying and then selling one share of the stock. You must buy before you sell and are not allowed to engage in multiple transactions simultaneously (you must sell the stock before you can buy again). Write a function to maximize the profit you can achieve. # Input - The first line contains two integers n (1 ≤ n ≤ 1000) and k (0 ≤ k ≤ 100). - The second line contains n integers representing the prices of the stock on each day, values separated by spaces. Each price is an integer between 1 and 10^4. # Output - A single integer representing the maximum profit you can achieve with at most k transactions. # Example Input ``` 5 2 2 4 1 7 5 ``` Output ``` 8 ``` # Explanation In this example, the maximum profit can be achieved by performing the following transactions: - Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit: 4-2 = 2 - Buy on day 3 (price = 1) and sell on day 4 (price = 7), profit: 7-1 = 6 Total profit = 2 + 6 = 8 # Note - Make sure to flush the output while interacting with the pre-implemented judge if you are working in an interactive environment. - If no transactions are allowed (k = 0), the maximum profit should be 0 as you cannot make any transactions. - Ensure you consider edge cases where the input values might be at the lower or upper constraint limits.","solution":"def max_profit_with_k_transactions(prices, n, k): Function to calculate the maximum profit with at most k transactions. if k == 0 or n == 0: return 0 # If k is greater than n/2, then we can consider it as unlimited transactions if k > n // 2: max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit dp = [[0] * n for _ in range(k + 1)] for t in range(1, k + 1): max_diff = -prices[0] for d in range(1, n): dp[t][d] = max(dp[t][d-1], prices[d] + max_diff) max_diff = max(max_diff, dp[t-1][d] - prices[d]) return dp[k][n-1]"},{"question":"Given a positive integer \'k\', you need to find a pair of integers (a, b) such that: 1. 1 <= a, b <= k 2. The least common multiple (LCM) of a and b is exactly k. If multiple pairs exist, print any one of them. The least common multiple of two integers a and b, denoted as LCM(a, b), is the smallest positive integer that is divisible by both a and b. Write a function `find_lcm_pair(k)` that takes the integer k as input and returns a tuple (a, b) representing the pair of integers satisfying the above conditions. Input - A single integer k (1 ≤ k ≤ 10^6). Output - A pair of integers (a, b) such that 1 <= a, b <= k and LCM(a, b) = k. Examples Input 8 Output (8, 8) Input 7 Output (1, 7) Input 12 Output (3, 4) Explanation - For the first example, both 8 and 8 divide 8, and thus the LCM(8, 8) is 8. - For the second example, 1 and 7 divide 7, and thus the LCM(1, 7) is 7. - For the third example, 3 and 4 divide 12, and thus the LCM(3, 4) is 12.","solution":"def find_lcm_pair(k): Returns a pair of integers (a, b) such that 1 <= a, b <= k and LCM(a, b) = k. :param k: A positive integer :return: A tuple (a, b) # The simplest pair that will satisfy the conditions is (1, k) return (1, k)"},{"question":"Your task is to convert a given list of non-negative integers into a new list such that every given integer is replaced by its prime factors (listed in ascending order). If the number is prime, it will be included as-is. Input The first line contains an integer `n` — the number of integers in the list (1 ≤ n ≤ 100). The second line contains `n` non-negative integers separated by spaces. Each integer is guaranteed to be less than or equal to 1000. Output Output a single line containing the new list of integers, where each original integer from the input list has been replaced by its prime factors. Examples Input 4 10 15 23 50 Output 2 5 3 5 23 2 5 5 Input 3 4 17 8 Output 2 2 17 2 2 2 Note In the first example, the number 10 is replaced by its prime factors 2 and 5, 15 is replaced by 3 and 5, 23 is a prime number and remains unchanged, and 50 is replaced by its prime factors 2, 5, and 5. In the second example, 4 is replaced by 2 and 2, 17 remains unchanged as it is a prime number, and 8 is replaced by 2, 2, and 2.","solution":"def prime_factors(n): Returns a list of prime factors of the given number n. factors = [] # factor out 2s while n % 2 == 0: factors.append(2) n //= 2 # factor out all odd numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # if n is still a prime number greater than 2 if n > 2: factors.append(n) return factors def convert_list_to_prime_factors(lst): Converts a list of non-negative integers to a list of their prime factors. result = [] for num in lst: if num == 0 or num == 1: result.append(num) else: result.extend(prime_factors(num)) return result # Example usage: n = 4 input_list = [10, 15, 23, 50] output_list = convert_list_to_prime_factors(input_list) print(output_list) # Output: [2, 5, 3, 5, 23, 2, 5, 5]"},{"question":"You are given a string `s` containing lowercase English letters. You are to select one character from the string and remove all its occurrences. The goal is to maximize the length of the resultant string, which has all characters in non-decreasing order of their frequencies. Write a function `maximize_string_length(s: str) -> int` that calculates the maximum possible length of the string after removing all occurrences of a single character such that no character appears more times than any character that comes after it in the sorted order of characters by frequency. If there are multiple ways to achieve this, return the maximum length obtained from any of those ways. # Input - A single string `s` (1 ≤ |s| ≤ 100,000), consisting of only lowercase English letters. # Output - A single integer, the maximum length of the resultant string. # Example Example 1: ``` Input: s = \\"aabbcc\\" Output: 4 ``` Example 2: ``` Input: s = \\"abcabc\\" Output: 4 ``` Example 3: ``` Input: s = \\"aaaa\\" Output: 0 ``` # Explanation In Example 1, by removing all \'b\'s, the resultant string is \\"aacc\\", which has characters in non-decreasing order of their frequencies. In Example 2, removing \'a\', \'b\', or \'c\' will all result in a string of length 4 (e.g., \\"bc\\", \\"ac\\", \\"ab\\"), and each resultant string satisfies the required condition. In Example 3, all characters are the same, so removing the only character will lead to a resultant length of 0.","solution":"from collections import Counter def maximize_string_length(s: str) -> int: # Count the frequency of each character freq = Counter(s) # Get the list of frequencies freq_values = sorted(freq.values()) max_length = 0 # Try removing each character and calculate the resulting lengths for char, count in freq.items(): modified_freq = freq_values[:] modified_freq.remove(count) # Check for non-decreasing condition if all(modified_freq[i] <= modified_freq[i + 1] for i in range(len(modified_freq) - 1)): max_length = max(max_length, len(s) - count) return max_length"},{"question":"You have just graduated from a prestigious space academy and have been tasked with a mission to a distant planet. During your mission, you encounter a complex alien artifact which requires solving puzzles to progress. One such puzzle involves decoding a secret message from an alien language. The message is represented as a string containing only digits, and each digit maps to a specific letter as per the mapping: {\'1\': \'A\', \'2\': \'B\', ..., \'9\': \'I\'}. There is also a special character \'*\', which acts as a wildcard and can represent any of the letters \'A\' to \'I\'. You need to decode the message and generate all possible unique strings that could be formed by replacing \'*\' with any valid letters. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the message. The second line contains the message string of length n. Output Output an integer representing the number of unique strings that can be generated by decoding the message. Example Input 3 1*3 Output 9 Note For example, with the message string \\"1*3\\", you can generate the following unique strings: \\"1A3\\", \\"1B3\\", \\"1C3\\", \\"1D3\\", \\"1E3\\", \\"1F3\\", \\"1G3\\", \\"1H3\\", \\"1I3\\". Thus, the output is 9. Remember to efficiently handle the expansion of \'*\' characters to avoid performance issues for larger inputs.","solution":"def decode_message_count(n, message): Returns the number of unique strings that can be generated by decoding the message. # Each \'*\' can be replaced with any of \'A\' to \'I\' which is 9 possibilities count_wildcards = message.count(\'*\') # Number of unique strings is 9^count_wildcards return 9 ** count_wildcards"},{"question":"For given arrays of integers a and b, write a program to determine if elements of b are a subsequence of a. A subsequence of an array is a new array which is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (I.e., [a, b, d] is a subsequence of [a, b, c, d] while [a, d, b] is not.) Constraints * The lengths of arrays a and b should be 1 leq |a|, |b| leq 10^5. * Each element in the arrays a and b is a positive integer not exceeding 10^9. Input The input is given in the following format: m array_a n array_b Output Print `YES` if b is a subsequence of a, otherwise print `NO`. Example Input 8 5 1 22 25 6 3 7 8 3 1 6 7 Output YES","solution":"def is_subsequence(a, b): Determines if array b is a subsequence of array a. Parameters: a (list): The main array. b (list): The array to check as subsequence. Returns: str: \'YES\' if b is a subsequence of a, otherwise \'NO\'. it = iter(a) return \'YES\' if all(item in it for item in b) else \'NO\' # Example usage: m = 8 array_a = [5, 1, 22, 25, 6, 3, 7, 8] n = 3 array_b = [1, 6, 7] print(is_subsequence(array_a, array_b)) # Output: YES"},{"question":"Dylan loves playing with strings. One day, he came up with a new game: given a string, he wants to create the longest possible subsequence of consecutive letters of the alphabet (in increasing order). However, the letters in the subsequence do not need to be consecutive in the original string, but their order must be preserved. For example, for the string \\"abcpqabcde\\", the longest subsequences of consecutive letters of the alphabet are \\"abcde\\". Write a program that, given an input string s (1 ≤ |s| ≤ 1000), finds the length of the longest subsequence of consecutive letters of the alphabet. Input The first line of the input contains a single string s consisting of lowercase English letters. Output Output the length of the longest subsequence of consecutive letters of the alphabet. Examples Input abcpqabcde Output 5 Input zxybac Output 2 Note In the first test case, the longest subsequence is \\"abcde\\", which has length 5. In the second test case, the longest subsequences are \\"xy\\" or \\"bc\\", which have length 2.","solution":"def longest_consecutive_subsequence(s): Finds the length of the longest subsequence of consecutive letters of the alphabet. n = len(s) max_len = 0 for i in range(n): current_len = 1 prev_char = s[i] for j in range(i+1, n): if ord(s[j]) == ord(prev_char) + 1: current_len += 1 prev_char = s[j] max_len = max(max_len, current_len) return max_len"},{"question":"Simon is currently working on an interesting problem involving permutations and lexicographic order. He has a string s consisting of lowercase English letters, and he is curious to find the k-th smallest lexicographic permutation of s. Given a string s and an integer k, help Simon determine what the k-th smallest lexicographic permutation of the string s is. Input The input consists of: - The first line contains the integer k (1 ≤ k ≤ n!), where n is the length of the string. - The second line contains the string s (1 ≤ |s| ≤ 9), consisting of lowercase English letters. Output Output a single string, the k-th smallest lexicographic permutation of the input string s. Examples Input 1 abc Output abc Input 2 abc Output acb Input 3 abc Output bac Input 6 cba Output cba Note In the first example, the permutations of \\"abc\\" in lexicographic order are: 1. abc 2. acb 3. bac 4. bca 5. cab 6. cba The first permutation is \\"abc\\". In the second example, the second permutation of \\"abc\\" is \\"acb\\".","solution":"import math def kth_permutation(k, s): Returns the k-th smallest lexicographic permutation of the string s. n = len(s) s = sorted(s) permutation = [] k -= 1 # 0-indexed for i in range(n, 0, -1): factorial = math.factorial(i - 1) index = k // factorial permutation.append(s.pop(index)) k %= factorial return \'\'.join(permutation)"},{"question":"Given an input string containing only lowercase alphabets and digits, and a pattern string containing only lowercase alphabets and the special character \'*\', determine if the pattern matches the entire input string. The special character \'*\' matches zero or more of any character. Input The input consists of two lines: 1. The first line contains the input string, which consists of lowercase alphabets and digits. Its length will be between 1 and 1000. 2. The second line contains the pattern string, which consists of lowercase alphabets and the character \'*\'. Its length will be between 1 and 1000. Output Print \\"YES\\" if the pattern matches the input string, otherwise print \\"NO\\". Examples Input abc123xyz a*b*c*xyz Output YES Input abcdefg a*e?h* Output NO","solution":"def is_match(input_string, pattern): Determines if the input_string matches the pattern where \'*\' matches zero or more characters. s_len = len(input_string) p_len = len(pattern) # Create a dp table where dp[i][j] indicates if input_string[0:i] matches pattern[0:j] dp = [[False] * (p_len + 1) for _ in range(s_len + 1)] # Empty pattern matches empty string dp[0][0] = True # Dealing with patterns like a*, a*b* etc. for j in range(1, p_len + 1): if pattern[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, s_len + 1): for j in range(1, p_len + 1): if pattern[j - 1] == \'*\': dp[i][j] = dp[i - 1][j] or dp[i][j - 1] else: dp[i][j] = dp[i - 1][j - 1] and input_string[i - 1] == pattern[j - 1] return \\"YES\\" if dp[s_len][p_len] else \\"NO\\""},{"question":"Write a function to find the smallest positive integer that is missing from an unsorted array of integers. # Problem Description Given an unsorted array of integers, write a function that returns the smallest positive integer that is missing from the array. # Input - An integer `t` (1 ≤ t ≤ 100) — the number of test cases. - For each test case: - An integer `n` (1 ≤ n ≤ 100) giving the length of the array. - A sequence of `n` integers `a_i` (-10^6 ≤ a_i ≤ 10^6) representing the elements of the array. # Output For each test case, print a single integer representing the smallest positive integer that is missing from the array. # Examples Input: ``` 3 5 1 2 0 -1 3 4 1 2 3 4 6 -1 -2 -3 -4 -5 -6 ``` Output: ``` 4 5 1 ``` # Note 1. In the first test case, the smallest positive integer missing from the array `[1, 2, 0, -1, 3]` is `4`. 2. In the second test case, all integers from 1 to 4 are present, so the smallest missing positive integer is `5`. 3. In the third test case, all elements are negative, so the smallest missing positive integer is `1`. # Constraints - You are required to solve the problem in O(n) time complexity. - You should not use any extra space other than O(1) space, i.e., the solution should be in-place.","solution":"def find_missing_positive(t, test_cases): Returns the smallest positive integer missing from each provided test case. Parameters: t (int): The number of test cases test_cases (list of lists): A list of test cases where each test case is a list of integers Returns: list of int: The smallest positive integer missing in each test case results = [] for array in test_cases: n = len(array) for i in range(n): while 1 <= array[i] <= n and array[array[i] - 1] != array[i]: correct_pos = array[i] - 1 array[i], array[correct_pos] = array[correct_pos], array[i] for i in range(n): if array[i] != i + 1: results.append(i + 1) break else: results.append(n + 1) return results"},{"question":"In a distant kingdom, there is a popular game among its citizens. The game is played on a rectangular grid of size N x M. Some of the cells in the grid are blocked and cannot be accessed. The player\'s objective is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1). Each step in the game can be made to one of the four neighboring cells (left, right, up, down). Given the grid configuration, determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If there is no possible way to reach the bottom-right corner, return -1. # Input format The first line contains two integers N and M, representing the number of rows and columns in the grid respectively. The next N lines each contain M characters, where \'.\' represents an empty cell and \'#\' represents a blocked cell. # Output format Output a single integer - the minimum number of steps required to reach the bottom-right corner, or -1 if it is impossible. # Constraints - 1 ≤ N, M ≤ 1000 - The top-left corner (0, 0) and the bottom-right corner (N-1, M-1) will never be blocked # Sample Input ``` 5 5 ..... .#. ..#.. #.. ..... ``` # Sample Output ``` 8 ``` # Explanation The shortest path from (0, 0) to (4, 4) is: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) The number of steps required is 8.","solution":"from collections import deque def shortest_path(N, M, grid): Returns the minimum number of steps required to reach the bottom-right corner from the top-left corner on a grid, or -1 if it is impossible. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (N-1, M-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1"},{"question":"Alex loves playing games involving sequences and arithmetic operations. One day, he finds a sequence consisting of ( n ) integers and starts to play a peculiar game with it. In each move, Alex can select any two indices ( i ) and ( j ) ( ( 1 leq i, j leq n ) ) in the sequence and replace both ( a_i ) and ( a_j ) with ( a_i + a_j ). Alex wants to maximize the value of the sum of all elements in the sequence after a certain number of moves. Note that Alex can perform the move any number of times, including zero. Given a sequence of ( n ) integers, determine the maximum possible value of the sum of the sequence after an arbitrary number of moves. Input The first line contains an integer ( n ) ( ( 2 leq n leq 100,000 ) ) – the number of elements in the sequence. The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) ( ( 1 leq a_i leq 10^6 ) ) – the elements of the sequence. Output Print one integer – the maximum possible value of the sum of the sequence after an arbitrary number of moves. Examples Input 3 1 2 3 Output 6 Input 4 2 7 1 8 Output 18 Input 5 1 1 1 1 1 Output 5 Note In the first example, one optimal set of moves could be: 1. Select ( a_2 ) and ( a_3 ) (indices 2 and 3); replace them with ( 2 + 3 = 5 ). The sequence becomes [1, 5, 5]. 2. Select ( a_1 ) and ( a_2 ) (indices 1 and 2); replace them with ( 1 + 5 = 6 ). The sequence becomes [6, 5]. The sum of the sequence is 6 + 5 = 11, and no more beneficial moves can be made. In the second example, Alex can make several moves but ultimately not exceed the sum 2 + 7 + 1 + 8 = 18, which can be achieved by repeatedly adding values to central indices.","solution":"def max_sum_sequence(n, sequence): Given a sequence of n integers, returns the maximum possible sum of the sequence after any number of moves where in each move, two elements a_i and a_j can be replaced with a_i + a_j. # The maximum sum is the sum of the initial elements of the sequence. return sum(sequence)"},{"question":"Bob is participating in a digital art competition where he needs to draw patterns using \'*\' characters. The competition rules require him to create a right-angled triangle pattern. Given a height of the triangle, Bob needs to generate the pattern and print it. Input: The input consists of a single integer n (1 ≤ n ≤ 1000) representing the height of the triangle. Output: Print the right-angled triangle pattern of height n. Constraints: 1 ≤ n ≤ 1000 SAMPLE INPUT 5 SAMPLE OUTPUT * ** *** **** ***** Explanation For n = 5, the output is a right-angled triangle with 5 rows. The first row contains 1 \'*\', the second row contains 2 \'*\', and so on, until the n-th row which contains n \'*\' characters.","solution":"def generate_triangle(n): Generates a right-angled triangle pattern of height n using \'*\' characters. triangle = \\"n\\".join(\\"*\\" * i for i in range(1, n + 1)) return triangle"},{"question":"Tom loves playing with sequences. One day, he came across a sequence problem and decided to create a challenge for his friends. The problem is as follows: Given an integer array, determine if there exists a continuous subsequence within the array which sums up to a given integer `s`. You need to help Tom determine if such a subsequence exists. Input The first line of the input contains two integers `n` (1 ≤ n ≤ 1000) and `s` (-1000 ≤ s ≤ 1000). The second line contains `n` space-separated integers, each between -1000 and 1000 inclusive. Output Output YES if there exists a continuous subsequence that sums up to `s`. Otherwise, output NO. Examples Input 5 15 1 2 3 7 8 Output YES Input 5 20 5 6 -1 4 9 Output NO Note In the first sample, the answer is YES since the continuous subsequence `[7, 8]` sums up to 15. In the second sample, the answer is NO since there is no continuous subsequence that sums up to 20.","solution":"def does_subsequence_sum_exist(arr, s): Determine if there exists a continuous subsequence within the array which sums up to a given integer `s`. Parameters: arr (list of int): The integer array. s (int): The target sum. Returns: bool: True if such a subsequence exists, otherwise False. n = len(arr) for start in range(n): current_sum = 0 for end in range(start, n): current_sum += arr[end] if current_sum == s: return True return False"},{"question":"Layla is organizing a fancy dinner party and she has a large circular table with n seats. Layla wants to decorate the table using m garlands. Each garland will cover exactly k contiguous seats. Since it\'s a circular table, if a garland starts at seat i and covers k seats, it will also include the seats after the end of the table wrapping back to the start. A garland is represented by two integers (s, e), where s is the starting seat (1-indexed) and e is the ending seat it covers. Layla wants to make sure that no two garlands overlap any seat, but the garlands can share boundaries. For example, if one garland ends at seat i, another garland can start at seat i+1. Your task is to help Layla determine if she can place all m garlands on the table such that no two garlands overlap any seat. Input: The first line contains three integers n, m, and k — the number of seats, the number of garlands, and the length each garland covers (3 ≤ n ≤ 10^5, 1 ≤ m ≤ n, 2 ≤ k ≤ n). Output: Print \\"Yes\\" if it is possible to place all garlands without overlapping, otherwise print \\"No\\". Examples: Input: 10 2 3 Output: Yes Input: 5 3 2 Output: No Note: In the first example, the circular table has 10 seats, Layla needs to place 2 garlands, each covering 3 seats. It is possible to place them without overlapping. In the second example, the circular table has 5 seats, Layla needs to place 3 garlands, each covering 2 seats. It is not possible to place all garlands without overlapping any seat.","solution":"def can_place_garlands(n, m, k): Determines if it is possible to place m garlands on a circular table with n seats such that no two garlands overlap any seat. Args: n (int): Number of seats. m (int): Number of garlands. k (int): Number of seats each garland covers. Returns: str: \\"Yes\\" if it is possible to place all garlands without overlapping, otherwise \\"No\\". if m * k <= n: return \\"Yes\\" return \\"No\\""},{"question":"A software company is developing an application that helps customers manage their schedules efficiently. As part of this application, they need a feature that can compress a string representing the schedule in a specific format. The format involves repeatedly counting consecutive occurrences of the same character. For instance, consider the string \\"aaabbcccaa\\". The compressed form of this string is \\"a3b2c3a2\\". Your task is to help the company implement this feature by writing a function that performs this string compression. The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string that needs to be compressed. Input: The first line contains T denoting the number of test cases. Each of the next T lines contains a string that needs to be compressed. Output: For each test case, print the compressed string in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 All strings consist only of lowercase English letters \'a\'-\'z\'. SAMPLE INPUT 3 aaabbcccaa aabbcc abc SAMPLE OUTPUT a3b2c3a2 a2b2c2 a1b1c1","solution":"def compress_string(s): Returns the compressed form of the string s. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") return \'\'.join(compressed) def compress_schedules(test_cases): results = [] for case in test_cases: results.append(compress_string(case)) return results"},{"question":"Alice and Bob are playing a game with an array of integers. The game involves taking turns to change elements in the array by adding or subtracting a value of 1 from any element. The objective of the game is to make all elements of the array equal. Alice always starts first, and they play optimally. You are to determine who will win the game, assuming both players play optimally. Note that the game terminates when all elements in the array are equal. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains the n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the array. Output Print \\"Alice\\" if Alice wins, or \\"Bob\\" if Bob wins. Examples Input 3 1 2 3 Output Alice Input 4 4 4 4 4 Output Bob Note In the first example, Alice can change the second element from 2 to 1. Now the array is [1, 1, 3]. Bob then changes the third element from 3 to 1. The array becomes [1, 1, 1]. Since Alice has no moves left, Alice wins. In the second example, all elements are already equal, so Bob wins by default as there are no moves to make.","solution":"def determine_winner(n, array): Determines the winner of the game between Alice and Bob based on the given rules. Parameters: n (int): The number of elements in the array. array (list of int): The array of integers. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. distinct_elements = len(set(array)) # If all elements are already equal, Bob wins if distinct_elements == 1: return \\"Bob\\" # Otherwise, Alice wins as she can always make the first optimal move else: return \\"Alice\\""}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},P={class:"card-container"},j={key:0,class:"empty-state"},F=["disabled"],C={key:0},z={key:1};function L(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",P,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",C,"See more"))],8,F)):h("",!0)])}const R=d(S,[["render",L],["__scopeId","data-v-1f842826"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/42.md","filePath":"deepseek/42.md"}'),M={name:"deepseek/42.md"},B=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(R)]))}});export{U as __pageData,B as default};
