import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,r,a){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(q,[["render",O],["__scopeId","data-v-b05bea3e"]]),Y=JSON.parse('[{"question":"A small town has recently started its own public transportation system consisting of several bus routes. Each bus route runs on a specific schedule and covers certain stops. The i-th bus route starts at stop ai, ends at stop bi, and can transport pi passengers at a time. The town also has several bus stops where passengers wait. Each bus stop can have a different number of passengers waiting to board the bus. Specifically, there are n bus stops, and the j-th bus stop has qj passengers waiting. Your task is to determine the most efficient bus route to accommodate the largest number of passengers. The efficiency of a bus route is defined as the minimum between the number of passengers the bus can carry and the number of passengers waiting at the busiest stop within its range. The goal is to find the bus route that maximizes this efficiency. If multiple routes yield the same efficiency, you can choose any of them. The first line contains two integers n (1 ≤ n ≤ 100 000) — the number of bus stops, and r (1 ≤ r ≤ 100) — the number of bus routes. Each of the following n lines contains one integer qj (0 ≤ qj ≤ 100 000) — the number of passengers waiting at the j-th bus stop. Each of the following r lines contains three integers ai, bi, pi (1 ≤ ai ≤ bi ≤ n, 1 ≤ pi ≤ 100 000) — representing the start and end stops of the corresponding bus route, and the number of passengers the bus can carry. Print an integer representing the maximum possible efficiency. If it\'s not possible to board any passengers, print zero. In the first sample, the most efficient bus route is the third one, which can accommodate a minimum of 7 passengers either due to its capacity or due to the busiest stop within its range. The efficiency in this case is 7. In the second sample, none of the bus routes overlap with any bus stops that have waiting passengers, so the answer is zero.","solution":"def find_most_efficient_bus_route(n, r, passengers_waiting, bus_routes): max_efficiency = 0 for a, b, p in bus_routes: max_passengers_waiting = max(passengers_waiting[a - 1:b]) efficiency = min(max_passengers_waiting, p) if efficiency > max_efficiency: max_efficiency = efficiency return max_efficiency # Example usage: n = 5 r = 3 passengers_waiting = [2, 5, 6, 3, 7] bus_routes = [(1, 3, 5), (2, 4, 6), (3, 5, 8)] print(find_most_efficient_bus_route(n, r, passengers_waiting, bus_routes)) # Output: 7"},{"question":"A newly opened zoo has just set up its Automated Ticketing System (ATS). The ATS issues tickets with a unique ticket number represented by a string of uppercase English letters. The ticket numbers are generated in such a way that each alphabet can be used infinite number of times independent of others. The zoo managers have recognized that tickets that contain certain substrings are considered lucky. Thus, if a tourist\'s ticket number contains any of these lucky substrings, they are considered VIP guests and will receive special treatment. The format of each input is a unique string of uppercase letters representing the ticket number. Write a function `find_lucky_substrings(ticket: str, lucky_substrings: List[str]) -> List[str]` that takes two arguments: - `ticket` which is the unique ticket number (1 <= len(ticket) <= 1000) - `lucky_substrings` which is a list of strings representing the lucky substrings (1 <= len(lucky_substrings) <= 100, 1 <= len(lucky_substrings[i]) <= 10). The function should return a list of all lucky substrings that are found within the ticket number. If no lucky substrings are found, return an empty list. **Example** Input: ``` ticket = \\"ZOOLOGIST\\" lucky_substrings = [\\"ZOO\\", \\"LOG\\", \\"CAT\\", \\"STI\\"] ``` Output: ``` [\\"ZOO\\", \\"LOG\\"] ``` **Explanation** In the given example, only \\"ZOO\\" and \\"LOG\\" are found as substrings in the ticket number \\"ZOOLOGIST\\". The substrings \\"CAT\\" and \\"STI\\" are not found in the ticket number. **Note** The returned list should contain the matching lucky substrings in the order they appear in the `lucky_substrings` list.","solution":"from typing import List def find_lucky_substrings(ticket: str, lucky_substrings: List[str]) -> List[str]: Returns a list of lucky substrings that are found within the ticket number. found_substrings = [substring for substring in lucky_substrings if substring in ticket] return found_substrings"},{"question":"You are given a forest consisting of n trees. The forest is represented as an undirected graph with n vertices and k edges. Your task is to determine whether the forest can be turned into a single connected tree by adding exactly one edge. A tree is a connected undirected graph consisting of n vertices and n-1 edges. A forest is a collection of one or more trees. The first line of the input contains two integers n and k — the number of vertices and the number of edges in the undirected graph (1 ≤ n ≤ 100, 0 ≤ k ≤ n-1). Each of the following k lines contains a pair of integers u and v, indicating the existence of an edge between vertices u and v (1 ≤ u, v ≤ n, u ≠ v). Each pair of vertices will have at most one edge between them, and no edge connects a vertex to itself. Print \\"YES\\" if it\'s possible to turn the forest into a single tree by adding exactly one edge. Otherwise, print \\"NO\\". Example: Input: 5 3 1 2 2 3 4 5 Output: YES Explanation: You can connect vertex 3 and vertex 4 to form a single tree.","solution":"def can_form_single_tree(n, k, edges): Determines if a forest can be turned into a single tree by adding exactly one edge. :param n: int, number of vertices :param k: int, number of edges :param edges: List of tuples where each tuple is a pair of connected vertices. :return: str, \\"YES\\" if possible, otherwise \\"NO\\" if k != n - 2: return \\"NO\\" parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in edges: union(u-1, v-1) root_count = len(set(find(i) for i in range(n))) return \\"YES\\" if root_count == 2 else \\"NO\\""},{"question":"In a land called Codevalley, there are `n` towns connected by `m` bidirectional roads. The governor of Codevalley, Ada, wants to install security cameras on some of the towns. Each camera can monitor the town it is installed in as well as all neighboring towns directly connected by a road. Ada wants to minimize the number of cameras installed but still ensure that all towns are monitored. You are provided with the following information: - The number of towns `n` and the number of roads `m` (1 ≤ n, m ≤ 100). - A list of `m` pairs of integers, each pair representing a road connecting two towns. Your task is to determine the minimum number of cameras needed and the towns where the cameras should be installed. The input starts with two integers `n` and `m`, representing the number of towns and roads, respectively. This is followed by `m` pairs of integers where each pair `(u, v)` indicates that there is a road between town `u` and town `v`. Output the minimum number of cameras needed. If multiple solutions exist, output any one of them. In the first line, output a single integer, the number of cameras installed. In the second line, output the towns where the cameras should be installed, separated by spaces. Example input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Example output: ``` 2 2 4 ``` In this example, installing cameras in towns 2 and 4 would be sufficient to monitor all the towns.","solution":"def find_minimum_cameras(n, m, roads): # Build the adjacency list representation of the graph from collections import defaultdict adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) # Visited array to track nodes that are monitored monitored = [False] * (n + 1) # Greedily choose nodes with maximum degree, this works well for dense graphs degree = {i: len(adj[i]) for i in range(1, n + 1)} sorted_nodes = sorted(degree, key=degree.get, reverse=True) cameras = [] for node in sorted_nodes: if not monitored[node]: # Place a camera in this town cameras.append(node) monitored[node] = True for neighbor in adj[node]: monitored[neighbor] = True return len(cameras), cameras # Function to parse input and return as needed def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) roads = [tuple(map(int, line.split())) for line in input_lines[1:]] return n, m, roads # Function to convert output to required format def output_result(cameras): count, towns = cameras result_str = f\\"{count}n\\" + \\" \\".join(map(str, towns)) return result_str"},{"question":"You are given a list of integers representing the cost of houses in a row along a street. There is a thief who wants to steal the maximum amount of money but he cannot steal from two adjacent houses, as it would trigger an alarm. Help the thief to calculate the maximum amount of money he can steal without triggering the alarm. The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10,000) representing the cost of each house. Output one integer — the maximum amount of money the thief can steal without triggering the alarm. # Examples Example 1: Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` Explanation: The thief can steal from the 1st, 4th, and 5th houses (3 + 10 + 2 = 15), or the 2nd and 4th houses (2 + 10 = 12). Example 2: Input: ``` 3 2 7 9 ``` Output: ``` 11 ``` Explanation: The thief can steal from the 1st and 3rd houses (2 + 9 = 11). # Notes If the thief steals from house i, he cannot steal from house i-1 or i+1.","solution":"def max_steal(houses): Function to calculate the maximum amount of money that can be stolen without triggering the alarm. Parameters: houses (list): List of integers representing the cost of houses in a row along a street. Returns: int: Maximum amount of money that can be stolen without triggering the alarm. if not houses: return 0 n = len(houses) if n == 1: return houses[0] # dp[i] represents the maximum money that can be stolen from the first i+1 houses dp = [0] * n # Initialize the dp array dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + houses[i]) return dp[n-1]"},{"question":"You are given a grid of size n times m with non-negative integers in each cell. You can move from a cell to an adjacent cell either in the right or down direction, but only if the value in the current cell is less than or equal to the value in the destination cell. Your task is to find the length of the longest path from the top-left corner of the grid (cell [1][1]) to the bottom-right corner (cell [n][m]). The first line of input contains two integers n and m (1 le n, m le 2000) — the number of rows and columns in the grid. Each of the next n lines contains m integers a_{ij} (0 le a_{ij} le 10^9) — the values in the cells of the grid. Print a single integer — the length of the longest path from the top-left corner to the bottom-right corner. If it is impossible to reach the bottom-right corner from the top-left corner, print -1. # Example: Input: 4 4 1 2 3 4 2 2 3 4 2 2 2 5 3 3 3 6 Output: 7 # Explanation: The possible longest path is: (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) -> (3, 4) -> (4, 4) with total length 7.","solution":"def longest_increasing_path(n, m, grid): # Memoization for storing the longest path starting from each cell memo = [[-1] * m for _ in range(n)] def dfs(x, y): # If the result for this cell is already computed, return it if memo[x][y] != -1: return memo[x][y] max_length = 1 # Try moving right (x, y) -> (x, y + 1) if y + 1 < m and grid[x][y] <= grid[x][y + 1]: max_length = max(max_length, 1 + dfs(x, y + 1)) # Try moving down (x, y) -> (x + 1, y) if x + 1 < n and grid[x][y] <= grid[x + 1][y]: max_length = max(max_length, 1 + dfs(x + 1, y)) memo[x][y] = max_length return memo[x][y] result = dfs(0, 0) return result if memo[-1][-1] != -1 else -1 # Sample input n, m = 4, 4 grid = [ [1, 2, 3, 4], [2, 2, 3, 4], [2, 2, 2, 5], [3, 3, 3, 6] ] print(longest_increasing_path(n, m, grid))"},{"question":"You are given two binary strings of length `n`. You are allowed to perform the following operation any number of times (possibly zero): choose any subsegment of the first string, and flip all bits in that subsegment (i.e., change each \'0\' to \'1\' and each \'1\' to \'0\'). Your goal is to make the first string equal to the second string using this operation. The first line contains an integer `n` (1 ≤ n ≤ 100) — the length of the strings. The second line contains a binary string `a` of length `n`, and the third line contains a binary string `b` of length `n`. Print \\"YES\\" (without the quotes) if it is possible to make the first string equal to the second string using the given operations. Otherwise print \\"NO\\" (without the quotes). In the first test sample, it is always possible to make the first string equal to the second string because we can flip subsegments of the first string as needed.","solution":"def can_transform(n, a, b): Determine if we can transform binary string a to binary string b by flipping subsegments of a. Args: n (int): Length of the strings. a (str): Binary string of length n. b (str): Binary string of length n. Returns: str: \\"YES\\" if we can transform a to b, otherwise \\"NO\\". # To determine if transformation is possible: # Must have equal number of 0s and 1s at each step of flipping count_1 = 0 # Count of 1s in string a so far count_0 = 0 # Count of 0s in string a so far for i in range(n): if a[i] == \'1\': count_1 += 1 else: count_0 += 1 # Whenever counts of 1s and 0s are equal up to this point, check if flipping possible if count_1 == count_0: if sorted(a[:i+1]) != sorted(b[:i+1]): return \\"NO\\" return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\""},{"question":"You are an event planner helping to organize an international conference. The conference hall has m rooms arranged in a line, and each room has a specific seating capacity. Every session in the conference is expected to have a specific number of attendees. You need to assign each session to a room such that the room has enough capacity to accommodate all attendees of the session. Additionally, the room should be the smallest possible one among those that can accommodate the session to optimize space usage. Given the seating capacities of the rooms and the expected number of attendees for each session, determine for each session which room it should be allocated to. **Input:** The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of sessions and the number of rooms respectively. The second line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 109), where ci is the seating capacity of the i-th room. The third line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), where ai is the number of attendees for the i-th session. **Output:** Print n integers r1, r2, ..., rn, where ri is the index (1-based) of the room to which the i-th session is assigned. If it is not possible to accommodate a session in any room, print -1 for that session. **Example:** **Input:** ``` 3 5 100 200 300 400 500 150 350 90 ``` **Output:** ``` 2 4 1 ```","solution":"def allocate_sessions_to_rooms(n, m, rooms, sessions): Allocates sessions to rooms based on their capacities. Parameters: - n: the number of sessions - m: the number of rooms - rooms: a list of integers representing the seating capacities of the rooms - sessions: a list of integers representing the number of attendees for each session Returns: - a list of integers where each element is the 1-based index of the assigned room for corresponding session. If no suitable room is found, the element will be -1. # List of tuples containing (capacity, index) room_capacities = sorted((rooms[i], i + 1) for i in range(m)) result = [] for session in sessions: allocated = False for capacity, index in room_capacities: if capacity >= session: result.append(index) allocated = True break if not allocated: result.append(-1) return result"},{"question":"In a small town, there is a popular annual event where townspeople gather to participate in a unique game. This year, n participants signed up for the game. Each participant is assigned a unique number from 1 to n, where n is an even number. The game proceeds in rounds, where in each round, participants are paired up based on their unique numbers. Pairing is done in such a way that the participant with the smallest number who hasn\'t been paired yet is paired with the participant with the largest number who hasn\'t been paired yet. This continues until all participants are paired. Each pair competes, and from each pair, one participant wins. The winners of each round proceed to the next round and are re-assigned unique numbers from 1 to the number of winners in the same manner. The process repeats until only one winner remains. Write a program that, given n, determines how many rounds are necessary for a single winner to emerge from the game. Input: - A single integer n (2 ≤ n ≤ 100,000), which is guaranteed to be even. Output: - A single integer representing the number of rounds needed for a single winner to emerge. In the first sample, n is 8, and the winners after each round are halved: 8 -> 4 -> 2 -> 1. Hence, the answer is 3. In the second sample, n is 16, and the winners after each round are halved: 16 -> 8 -> 4 -> 2 -> 1. Hence, the answer is 4.","solution":"def number_of_rounds(n): Given an even integer n, determines how many rounds are necessary for a single winner to emerge from the game. :param n: An even integer n (2 ≤ n ≤ 100,000). :return: The number of rounds until a single winner emerges. rounds = 0 while n > 1: n //= 2 rounds += 1 return rounds"},{"question":"Given a list of integers, you are to find all the unique triplets in the list which form a geometric progression. Recall that a geometric progression or sequence is one where each term after the first is found by multiplying the previous term by the same constant. Write a function `find_geometric_triplets(arr)` that takes a list of integers `arr` (1 <= len(arr) <= 1000) as input and returns a list of tuples. Each tuple contains three indices (i, j, k) such that `arr[i]`, `arr[j]`, and `arr[k]` form a geometric progression and `i < j < k`. Only include unique triplets and ensure the output list of tuples is sorted in ascending order based on the first index in each tuple. If multiple triplets have the same first index, sort based on the second index, and so on. # Input - An integer array `arr` of length between 1 and 1000, inclusive. # Output - A list of tuples, where each tuple contains three integers representing the indices of the elements forming a geometric progression, sorted as described above. # Example Input ```python arr = [1, 3, 9, 27, 2, 6, 18, 54] ``` Output ```python [(0, 1, 2), (1, 2, 3), (4, 5, 6), (5, 6, 7)] ``` # Constraints - Assume all the values in the list are positive integers. - You can assume that the sequence will not contain zeros. # Note - Consider different possible ratios for a geometric progression. - Ensure not to count any triplet more than once. - Remember to return indices in each tuple in ascending order. Implement the `find_geometric_triplets` function.","solution":"def find_geometric_triplets(arr): Given a list of integers, find all the unique triplets which form a geometric progression. :param arr: List of integers :return: List of tuples containing the indices of the elements forming a geometric progression n = len(arr) triplets = [] for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[j] ** 2 == arr[i] * arr[k]: triplets.append((i, j, k)) return triplets"},{"question":"You are given an integer array a consisting of n integers, and an integer k. Your task is to find the maximum possible sum of a subarray (a contiguous part of the array) such that the length of the subarray is at most k. The first line contains two integers n and k (1 leq n leq 1000, 1 leq k leq n). The second line contains n integers a_1, a_2, ..., a_n (where -10^9 leq a_i leq 10^9 for each a_i). Print the maximum possible sum of a subarray whose length is at most k. # Examples: **Input:** ``` 5 3 1 -2 3 4 -5 ``` **Output:** ``` 7 ``` **Input:** ``` 8 4 -1 -2 -3 -4 -5 -6 -7 -8 ``` **Output:** ``` -1 ``` # Explanation: In the first example, the subarray `[3, 4]` has the largest sum of 7, and its length is less than or equal to 3. In the second example, the best possible sum is the largest individual element, which is `-1`, since all subarrays of length 4 or less will be more negative.","solution":"def max_subarray_sum(n, k, a): Function to find the maximum possible sum of a subarray with length at most k. max_sum = float(\'-inf\') for i in range(n): current_sum = 0 for j in range(i, min(i + k, n)): current_sum += a[j] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A digital safe manufacturer wants to create a secure password system for their newly launched product line. The password must consist of exactly n unique characters, each between \'a\' and \'z\' inclusive. To ensure security, the password needs to satisfy the following conditions: 1. The password must not contain any consecutive or non-consecutive pairs of characters that are the same (i.e., all characters must be unique). 2. The password must contain at least three consecutive ascending or descending characters in the alphabetical order (e.g., \'abc\' or \'zyx\'). The manufacturer has asked you to create a function that, given the length of the password n, generates and returns a valid password string that satisfies the mentioned conditions. Write a function `generate_password(n: int) -> str` to accomplish this. If it\'s not possible to generate such a password with the given conditions, return \\"Impossible\\". # Input - An integer n (3 ≤ n ≤ 26) representing the length of the password to be generated. # Output - A string representing the generated password if it\'s possible. If there\'s no valid password, return \\"Impossible\\". # Examples ```python assert generate_password(4) in [\\"abcd\\", \\"bcde\\", \\"cdef\\", ..., \\"wxyz\\", \\"zyxw\\"] assert generate_password(5) in [\\"abcde\\", \\"bcdef\\", \\"cdefg\\", ..., \\"vwxyz\\", \\"zxywv\\"] assert generate_password(2) == \\"Impossible\\" ``` # Notes - It is guaranteed that n will be between 3 and 26 (both inclusive). - The function should handle both small and large values of n efficiently. - The characters in the password must be unique and should contain at least one sequence of three consecutive ascending or descending characters in alphabetical order.","solution":"def generate_password(n): Generate a valid password with n unique characters that contains at least three consecutive ascending or descending characters in alphabetical order. if n < 3 or n > 26: return \\"Impossible\\" # We will use the first n characters of the alphabet as the password password = \'\'.join(chr(ord(\'a\') + i) for i in range(n)) return password"},{"question":"You are given an integer array `nums` of length `n` where `1 <= n <= 10^5` and an integer `k` where `1 <= k <= 10^9`. Your task is to find the number of unique pairs `(i, j)` such that `i < j` and `nums[i] + nums[j] == k`. # Input - The first line of the input contains an integer `n` — the length of the array. - The second line contains `n` space-separated integers representing the elements of the array `nums`. - The third line contains a single integer `k`. # Output Print a single integer — the number of unique pairs `(i, j)` such that `i < j` and `nums[i] + nums[j] == k`. # Example Input ``` 5 1 5 3 4 2 6 ``` Output ``` 2 ``` Explanation The pairs (1, 5) and (2, 4) sum up to 6. Hence, the output is 2.","solution":"def count_pairs_with_sum(nums, k): Returns the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. num_count = {} count = 0 for num in nums: if k - num in num_count: count += num_count[k - num] if num in num_count: num_count[num] += 1 else: num_count[num] = 1 return count"},{"question":"Polycarp is playing with an array of integers. He wants to perform several operations on the array to make all elements equal. He can perform the following operation any number of times: 1. Choose any single element of the array and increase it by 1. Your task is to determine the minimum number of operations required to make all elements of the array equal. You need to find the optimal strategy for doing so. For example, if the array is [1, 2, 3], you can increase the smallest element (1) twice, and the second smallest element (2) once to achieve [3, 3, 3]. Thus, the total number of operations required is 3. Input Format: - The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. - Each of the following t lines contains: - the first line contains an integer n (1 ≤ n ≤ 1000) — the size of the array. - the second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output Format: - For each test case, output a single integer denoting the minimum number of operations required to make all elements of the array equal. Example: Input: 3 3 1 2 3 4 1 1 1 1 5 5 5 5 5 5 Output: 3 0 0 Explanation: - For the first test case, you need 3 operations to make all elements [3, 3, 3]. - For the second test case, no operations are needed as all elements are already equal. - For the third test case, no further operations are needed as all elements are already equal.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_element = max(arr) operations = sum(max_element - x for x in arr) results.append(operations) return results"},{"question":"A company has recently implemented a new software system for tracking employees\' tasks. Each employee is represented by a unique integer identifier from 1 to n, and every task assigned to them is recorded in the system. The tasks are categorized based on their priority, which can be Low, Medium, or High. The task details for each employee are provided as three lists: - A list of low-priority tasks. - A list of medium-priority tasks. - A list of high-priority tasks. Tasks are assigned to employees in such a way that: - Every employee has exactly one low-priority task, one medium-priority task, and one high-priority task assigned to them. - The sum of the task numbers assigned to an employee must be unique across all employees. Given the number of employees (n) and their assigned tasks, determine if it’s possible to uniquely identify each employee based on the sum of their task numbers. If it’s possible, return the sums sorted in ascending order. If it\'s not possible, return an empty list. # Input - The first line contains an integer n (1 ≤ n ≤ 100000), the number of employees. - The second line contains n integers representing the low-priority tasks assigned to employees. - The third line contains n integers representing the medium-priority tasks assigned to employees. - The fourth line contains n integers representing the high-priority tasks assigned to employees. # Output Print the sorted list of unique sums of task numbers for all employees. If it\'s not possible to achieve unique sums, print an empty list. # Example Input ``` 3 2 1 3 5 3 4 7 6 8 ``` Output ``` 10 12 15 ``` # Explanation For the given input: - Employee 1 has tasks 2 (low), 5 (medium), 7 (high), with sum 14. - Employee 2 has tasks 1 (low), 3 (medium), 6 (high), with sum 10. - Employee 3 has tasks 3 (low), 4 (medium), 8 (high), with sum 15. Since all sums are unique, the output is [10, 14, 15], sorted in ascending order.","solution":"def calculate_unique_task_sums(n, low_tasks, medium_tasks, high_tasks): Returns a sorted list of unique sums of task numbers for all employees or an empty list if unique sums are not possible. sums = set() for i in range(n): task_sum = low_tasks[i] + medium_tasks[i] + high_tasks[i] if task_sum in sums: return [] sums.add(task_sum) return sorted(sums)"},{"question":"Create a function that takes a string of mixed characters (letters, digits, and special characters) and returns a list of characters sorted in the following order: 1. All letters sorted alphabetically. 2. All digits sorted in ascending order. 3. All special characters in their original order of appearance. Consider the input string will have a length between 1 and 1000. # Input A single line containing a string of mixed characters (letters, digits, and special characters). # Output A list of characters sorted as specified above. # Example Input ``` a1#b2c ``` Output ``` [\'a\', \'b\', \'c\', \'1\', \'2\', \'#\', \'\'] ``` # Note In the example above, the letters \'a\', \'b\', and \'c\' are sorted alphabetically, the digits \'1\' and \'2\' are sorted in ascending order, and the special characters \'#\' and \'\' retain their original positions.","solution":"def sort_mixed_characters(s): Sorts the characters in the input string such that: 1. All letters are sorted alphabetically. 2. All digits are sorted in ascending order. 3. All special characters retain their original order of appearance. Parameters: s (str): Input string of mixed characters. Returns: list: Output list of characters sorted as specified. letters = [ch for ch in s if ch.isalpha()] digits = [ch for ch in s if ch.isdigit()] specials = [ch for ch in s if not ch.isalnum()] sorted_letters = sorted(letters) sorted_digits = sorted(digits) result = sorted_letters + sorted_digits + specials return result"},{"question":"Suppose you are playing a game where you control a robot in a two-dimensional grid of size n times m. The robot can only move right or down from any given cell. However, there are certain cells in the grid that are blocked, and the robot cannot move into these cells. Your task is to determine the number of distinct paths the robot can take from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). The first line of the input contains two positive integers n and m (1 leq n, m leq 100), representing the dimensions of the grid. Each of the next n lines contains m characters \'.\', \'*\', where \'.\' denotes a free cell and \'*\' denotes a blocked cell. Output a single integer, the number of distinct paths the robot can take. If there is no valid path, output 0. Note that the robot is initially positioned at the top-left corner, and its goal is to reach the bottom-right corner of the grid. Example: ``` Input: 3 3 . . . . * . . . . Output: 2 ``` Explanation: There are two valid paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def distinct_paths(n, m, grid): if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'*\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Example usage n = 3 m = 3 grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'*\', \'.\'], [\'.\', \'.\', \'.\'] ] print(distinct_paths(n, m, grid)) # Output: 2"},{"question":"Petya loves reading books, and he has a unique way of organizing his bookshelf. The bookshelf is initially empty, and Petya reads books one at a time. Each book belongs to a particular genre. Petya wants to organize his bookshelf such that all books of the same genre are grouped together. Whenever Petya finishes reading a new book, he places it somewhere on the bookshelf such that the genre grouping is preserved. Petya also has favorite genres that he prefers to have more organized. Given an initial sequence of books on the bookshelf and the sequence of new books Petya reads, determine the final arrangement of books on the bookshelf. Note: - Petya can only insert a new book into a position where the genre grouping property is maintained. - If there are multiple positions where a book can be inserted, Petya will place it in the leftmost position. - Favorite genres should appear in their order of preference towards the left side of the bookshelf. The first line contains the initial sequence of books on the bookshelf separated by spaces. Each book is represented by a string where the first character is the genre, and the rest of the string describes the book. The second line contains the sequence of new books Petya reads, also separated by spaces, with the same representation. The third line contains the preferred genre list, separated by spaces, in the order of preference. Output the final arrangement of books on the bookshelf, maintaining the genre grouping and Petya\'s preference. Example: Input: ``` A1 A2 B1 C1 B2 A3 C2 A B C ``` Output: ``` A1 A2 A3 B1 B2 C1 C2 ```","solution":"def organize_books(initial, new_books, favorites): # Convert inputs from strings to lists initial_books = initial.split() new_books = new_books.split() favorites = favorites.split() genre_dict = {} # First, categorize the initial books by genre for book in initial_books: genre = book[0] if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(book) # Insert each new book into the correct position for book in new_books: genre = book[0] if genre not in genre_dict: genre_dict[genre] = [] insertion_index = len(genre_dict[genre]) genre_dict[genre].insert(insertion_index, book) # Output the books organized according to the favorite genres organized_books = [] for favorite in favorites: if favorite in genre_dict: organized_books.extend(genre_dict[favorite]) # Append remaining genres that are not in favorites list for genre, books in genre_dict.items(): if genre not in favorites: organized_books.extend(books) return \' \'.join(organized_books) initial_books = \\"A1 A2 B1 C1\\" new_books = \\"B2 A3 C2\\" favorites = \\"A B C\\" print(organize_books(initial_books, new_books, favorites))"},{"question":"You are given a board with a series of n columns, each column containing a certain number of coins. Two players, Alice and Bob, are playing a game where they alternately remove coins from these columns. The game starts with Alice taking a number of coins from the board, followed by Bob, and so on. The players can pick up any number of coins from a single column on their turn. The twist is that the player picking up coins must always pick up more coins than the previous player did. If a player cannot pick up more coins than the previous player, they lose the game. Your task is to determine the winner of the game if both players play optimally, given the initial state of the board. Alice always starts first. The first line of the input contains a single integer n (1 ≤ n ≤ 3000) — the number of columns. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9), where ci represents the number of coins in the i-th column. Print \\"Alice\\" if Alice wins the game when both play optimally, otherwise print \\"Bob\\". Example: Input: 3 5 3 8 Output: Alice","solution":"def determine_winner(n, coins): Function to determine the winner of the game given the number of columns and the number of coins in each column. Parameters: n (int): The number of columns. coins (list): A list of integers where each integer represents the number of coins in that column. Returns: str: \'Alice\' if Alice wins, \'Bob\' otherwise. # The key is to realize that Alice can always pick the best possible strategy on her first move. # Since both play optimally, Alice will always win if there\'s at least one column with coins. return \\"Alice\\" if any(coins) else \\"Bob\\""},{"question":"You are given an array of integers and a target value. Your task is to determine whether there exists a subset of the array whose sum is equal to the target value. The first line contains an integer n (1 ≤ n ≤ 20) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the elements of the array. The third line contains an integer t (-10^4 ≤ t ≤ 10^4) — the target value. Your program should output \\"YES\\" (without quotes) if there exists such a subset, otherwise \\"NO\\" (without quotes). For example, given the array [1, 2, 3, 4] and the target value 5, the subset [2, 3] has a sum of 5, so the program should output \\"YES\\". If the target value was 11, since no subset of the array sums to 11, the program should output \\"NO\\".","solution":"def subset_sum_exists(n, arr, t): Determines whether there exists a subset of the array whose sum equals the target value. :param n: Integer, the number of elements in the array :param arr: List of integers, the elements of the array :param t: Integer, the target value :return: String, \\"YES\\" if such a subset exists, otherwise \\"NO\\" def is_subset_sum(idx, current_sum): if current_sum == t: return True if idx == n: return False return is_subset_sum(idx + 1, current_sum + arr[idx]) or is_subset_sum(idx + 1, current_sum) return \\"YES\\" if is_subset_sum(0, 0) else \\"NO\\""},{"question":"You are given an array of integers and a target sum. Your task is to determine if there is a pair of distinct indices (i, j) such that the sum of the elements at these indices is equal to the target sum. The function should return `True` if such a pair exists and `False` otherwise. # Input - An integer array `arr` of length `n` (1 le n le 10^5) which consists of integers (-10^9 le arr[i] le 10^9). - An integer `target` (-10^{18} le target le 10^{18}). # Output - A boolean value indicating if there exists a pair of indices `(i, j)` such that `arr[i] + arr[j]` equals `target`. # Example Example 1 **Input:** ``` arr = [2, 7, 11, 15] target = 9 ``` **Output:** ``` True ``` Example 2 **Input:** ``` arr = [1, 2, 3, 4, 5] target = 10 ``` **Output:** ``` False ``` # Constraints - The solution should run in O(n) time complexity. # Notes - In the first example, the pair (2, 7) at indices (0, 1) sum up to the target 9. - In the second example, no such pair exists that sums up to 10.","solution":"def has_pair_with_sum(arr, target): seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a program for a fictional land called Pointlandia. In Pointlandia, cities are represented as points on a Cartesian plane. The government has decided to build a central highway that maximizes accessibility for the inhabitants. The central highway is a straight line, either horizontal (y = constant) or vertical (x = constant). To determine the optimal position for the central highway, you need to minimize the maximum Manhattan distance from any city to the highway. The Manhattan distance between two points (x1, y1) and (x2, y2) is given by |x1 - x2| + |y1 - y2|. Given the coordinates of the cities, your task is to calculate and print the coordinates for the best possible position of the central highway (either x = a or y = b) that minimizes the maximum Manhattan distance to any city. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of cities. - The next n lines contain two integers xi and yi (-10^8 ≤ xi, yi ≤ 10^8), the coordinates of the cities. Output - Print a single line: `x = a` if the optimal highway is vertical, or `y = b` if it is horizontal. Example Input: ``` 5 2 3 8 5 6 9 4 7 1 2 ``` Output: ``` x = 4 ``` Explanation: In this example, positioning the highway at x = 4 minimizes the maximum Manhattan distance from any city to the highway.","solution":"def find_optimal_highway(n, city_coordinates): Function to determine the best possible position of the central highway (either x = a or y = b) that minimizes the maximum Manhattan distance to any city. Parameters: n (int): The number of cities. city_coordinates (list of tuples): The coordinates of the cities (xi, yi). Returns: str: The equation of the optimal highway (either \\"x = a\\" or \\"y = b\\"). x_coords = sorted(coord[0] for coord in city_coordinates) y_coords = sorted(coord[1] for coord in city_coordinates) if n % 2 == 1: median_x = x_coords[n // 2] median_y = y_coords[n // 2] else: median_x = (x_coords[n // 2 - 1] + x_coords[n // 2]) // 2 median_y = (y_coords[n // 2 - 1] + y_coords[n // 2]) // 2 max_manhattan_x = max(abs(x - median_x) for x, y in city_coordinates) max_manhattan_y = max(abs(y - median_y) for x, y in city_coordinates) if max_manhattan_x <= max_manhattan_y: return f\\"x = {median_x}\\" else: return f\\"y = {median_y}\\""},{"question":"You are given an integer n (1 ≤ n ≤ 10^5), representing the number of students in a class. Each student has a unique student ID represented by an integer in the range from 1 to n and each student has a corresponding score on a test, represented by an integer value in the range from 0 to 100. You need to process m queries (1 ≤ m ≤ 10^5). Each query can be one of the following two types: 1. Find the number of students whose scores are within a given range [a, b] (inclusive). 2. Update the score of a specific student to a new value. The format of the input is as follows: - The first line contains integers n and m. - The second line contains n integers, where the i-th integer represents the score of the student with student ID i. - The next m lines contain the descriptions of the queries. Each query is either of the form `1 a b` (1 ≤ a ≤ b ≤ 100) for the first type of queries or `2 id x` (1 ≤ id ≤ n, 0 ≤ x ≤ 100) for the second type of queries. For each query of the first type, output the number of students whose scores are within the range [a, b]. Print each result on a new line. Sample Input: ``` 5 3 35 50 70 80 90 1 30 70 2 3 60 1 60 100 ``` Sample Output: ``` 3 3 ``` Explanation: - In the first query, there are 3 students with scores in the range [30, 70]: student 1 with score 35, student 2 with score 50, and student 3 with score 70. - In the second query, the score of student 3 is updated from 70 to 60. - In the third query, there are 3 students with scores in the range [60, 100]: student 3 with score 60, student 4 with score 80, and student 5 with score 90.","solution":"def process_queries(n, m, scores, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': a = int(parts[1]) b = int(parts[2]) count = sum(1 for score in scores if a <= score <= b) results.append(count) elif parts[0] == \'2\': student_id = int(parts[1]) - 1 new_score = int(parts[2]) scores[student_id] = new_score return results"},{"question":"Given an n by n matrix filled with integers where every row and every column is sorted in ascending order, find the k-th smallest element in the matrix. The matrix is defined as follows: - The first line contains two integers n and k (1 ≤ n ≤ 300, 1 ≤ k ≤ n²). - Each of the next n lines contains n integers in ascending order. Your task is to extract the k-th smallest element from this matrix efficiently. Output the k-th smallest element in the matrix. **Example:** ```plaintext Input: 3 8 1 5 9 10 11 13 12 13 15 Output: 13 ``` **Explanation:** The 8th smallest number in the matrix is 13. The sorted order of elements is 1, 5, 9, 10, 11, 12, 13, 13, 15 and thus the 8th smallest value is 13.","solution":"import heapq def kth_smallest_element(matrix, n, k): Finds the k-th smallest element in a n x n sorted matrix. :param matrix: List of lists where each sublist represents a row in n x n matrix :param n: Number of rows/columns in the matrix :param k: The order of smallest element to find :return: The k-th smallest element in the matrix # Min heap to store the smallest elements seen so far min_heap = [] # Initialize the min heap with the first element of each row, # along with the row and column indices for r in range(min(n, k)): heapq.heappush(min_heap, (matrix[r][0], r, 0)) # Extract the minimum element from the heap k times for _ in range(k): element, r, c = heapq.heappop(min_heap) if c + 1 < n: heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1)) return element"},{"question":"A string is called \\"pangrammatic\\" if it contains every letter of the Latin alphabet at least once. You are given a string s consisting of lowercase English letters and spaces. Determine whether the string is pangrammatic or not. The first and only input line contains string s (1 ≤ |s| ≤ 10^6). Output \\"YES\\" if the string is pangrammatic, and \\"NO\\" otherwise.","solution":"def is_pangrammatic(s): This function checks if the input string s contains every letter of the Latin alphabet at least once. :param s: Input string consisting of lowercase English letters and spaces. :return: \\"YES\\" if the string is pangrammatic, \\"NO\\" otherwise. alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') s_set = set(s.replace(\\" \\", \\"\\")) if alphabet_set.issubset(s_set): return \\"YES\\" return \\"NO\\""},{"question":"Alice is a software engineer who is developing a new feature for a website. The feature requires displaying a list of items in an order that satisfies certain dependencies. Each item has a unique ID and may depend on several other items to be displayed before it. If item A depends on item B, it means B must be displayed before A. Moreover, it is guaranteed that there are no circular dependencies among the items. Alice needs your help to implement a function that takes a list of items and their dependencies and returns a valid ordering of the items such that the dependency constraints are satisfied. Your task is to write a function that guarantees a correct order or determine that such an order is not possible due to incorrect input. The input format is as follows: - The first line contains an integer ```n``` (1 ≤ ```n``` ≤ 10<sup>5</sup>) representing the number of items. - The next ```n``` lines each contain a string ```item_ID``` representing the unique identifier for each item. - The following line contains an integer ```m``` (0 ≤ ```m``` ≤ 3 * 10<sup>5</sup>) representing the number of dependency relations. - The next ```m``` lines each contain two strings ```item_A``` and ```item_B```, denoting that item_A depends on item_B (i.e., item_A must be displayed after item_B). Your function should output a single line containing a possible valid ordering of the items, separating item IDs by a space. If there is no possible order due to a circular dependency, print ```\\"No valid ordering possible\\"```. Example: ``` # Input 5 item1 item2 item3 item4 item5 4 item2 item1 item1 item3 item4 item2 item4 item5 # Output item3 item1 item5 item2 item4 ``` Note: - It is possible that multiple valid orderings exist. Any valid ordering will be considered correct. - The item IDs and dependencies are guaranteed to be well-formed. # Function Signature: ```python def find_ordering(items: List[str], dependencies: List[Tuple[str, str]]) -> Union[str, List[str]]: # Implementation goes here ```","solution":"from typing import List, Tuple, Union from collections import defaultdict, deque def find_ordering(items: List[str], dependencies: List[Tuple[str, str]]) -> Union[str, List[str]]: # Create a graph and a dictionary to store in-degrees graph = defaultdict(list) in_degree = {item: 0 for item in items} # Build the graph and fill in-degrees for item_A, item_B in dependencies: graph[item_B].append(item_A) in_degree[item_A] += 1 # Use a deque to store items with in-degree 0 zero_in_degree = deque([item for item in items if in_degree[item] == 0]) sort_order = [] # Process nodes with in-degree 0 while zero_in_degree: current = zero_in_degree.popleft() sort_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # If sort_order contains all items, a valid ordering was found if len(sort_order) == len(items): return sort_order else: return \\"No valid ordering possible\\""},{"question":"A landscape is represented as an array of integers where each value corresponds to the height of a section of the landscape. You are required to capture the rainwater that would collect between the sections after a downpour. Given an array of integers where the array elements represent the height of landscape sections, find the maximum amount of rainwater that can be captured. For example, given the input array as [3, 0, 0, 2, 0, 4], the heights represent the landscape as follows: ``` | x | x x |___x____x___x___x____ ``` After the rain, the collected water is represented by the symbols \\"w\\": ``` | x | xww x |___xll__x__ll_x_xWW_w_ ``` From the illustration, it\'s clear that the 9 units of water would be trapped in this landscape arrangement. # Input - The first line contains an integer n (1 le n le 10^5) - the number of sections in the landscape. - The second line contains n integers h_1, h_2, dots, h_n (0 le h_i le 10^4) - the heights of the sections. # Output - Print a single integer - the maximum volume of water that can be captured after a rainstorm. # Example Input: ``` 6 3 0 0 2 0 4 ``` Output: ``` 9 ``` # Note The landscape heights can vary, and there might be sections where the height is zero. The rainwater is captured between the taller sections and can only be held if there is sufficient height on both sides of a lower section to form a boundary. Use efficient algorithms to handle large input sizes within a reasonable time complexity.","solution":"def max_rainwater_trapped(heights): Given an array of integers representing heights of landscape sections, compute the maximum amount of rainwater that can be captured. if not heights or len(heights) < 3: # edge case return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Accumulate trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"A large company is planning to reorganize its departments. Currently, the company has several departments, each represented by a unique identifier, which is an integer. The reorganization involves merging some departments. Each merge is represented by a pair of department IDs, indicating that the two departments will be combined into a single department. Once merged, the two departments will no longer exist separately, and all employees in those departments will now belong to the new merged department. The company wants to minimize the number of different departments after all specified merges are completed. To achieve this, they need to know how many unique departments will remain after all merges are processed. Two departments are considered connected, and thus belong to the same department, if there is a sequence of merges connecting them directly or indirectly. Write a program that, given the total number of departments and a list of merge operations, determines the number of unique departments remaining after all mergers. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of departments. The second line contains an integer m (0 ≤ m ≤ 10^5), the number of merge operations. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a merge operation indicating that department u and department v will be merged. Print the number of unique departments remaining after all merges are completed. Example: Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 2 ``` In this example, departments 1, 2, and 3 are all merged into one department, and departments 4 and 5 are merged into another. Thus, there are 2 unique departments remaining.","solution":"def count_unique_departments(n, m, merges): Returns the number of unique departments remaining after all merges. :param n: Total number of departments :param m: Number of merge operations :param merges: List of merge operations as pairs (u, v) :return: Number of unique departments remaining parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for u, v in merges: union(u, v) # Count unique roots unique_departments = set(find(i) for i in range(1, n + 1)) return len(unique_departments)"},{"question":"You are given an n x n matrix of integers. Your task is to find the sum of all unique elements in the matrix. An element is considered unique if it does not have an identical element elsewhere in the matrix. Input: - The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the matrix. - Each of the next n lines contains n integers (each integer between -1000 and 1000, inclusive) — representing the rows of the matrix. Output: - Print a single integer — the sum of all unique elements in the matrix. Examples: Input: 3 1 2 3 4 5 6 7 8 1 Output: 35 Input: 2 10 10 10 20 Output: 20 Explanation: In the first example, the unique elements are [2, 3, 4, 5, 6, 7, 8]. Their sum is 35. Element 1 is not unique as it appears twice in the matrix. In the second example, the unique element is [20]. Its sum is 20. Element 10 is not unique as it appears three times in the matrix.","solution":"def sum_of_unique_elements(matrix): Calculates the sum of all unique elements in the given n x n matrix. Parameters: matrix (list of list of int): The n x n matrix of integers. Returns: int: The sum of all unique elements in the matrix. from collections import Counter # Flatten the matrix into a list of elements elements = [element for row in matrix for element in row] # Count the frequency of each element count = Counter(elements) # Sum elements that appear only once unique_sum = sum(element for element, freq in count.items() if freq == 1) return unique_sum"},{"question":"You\'re given a list of integers and a target value. Write a function to check if there exist two numbers in the list such that their sum is equal to the target value. If so, return the indices of the two numbers (1-based index). If not, return `[-1, -1]`. Implement the function with a time complexity of O(n). Input: - The first line contains two integers `n` and `target` (1 leq n leq 10^5), the number of elements in the list and the target sum. - The second line contains n integers separated by spaces (-10^9 leq nums[i] leq 10^9). Output: - A single line containing two integers representing the 1-based indices of the two numbers whose sum equals the target, or `[-1, -1]` if no such pair exists. Function signature: ``` def two_sum(nums: List[int], target: int) -> List[int]: pass ``` Example: Input: ``` 5 9 2 7 11 15 4 ``` Output: ``` 1 2 ``` Explanation: - The sum of the first element (2) and the second element (7) is equal to the target value (9). Input: ``` 4 8 1 2 3 4 ``` Output: ``` [-1, -1] ``` Explanation: - There are no two numbers that sum up to the target value (8).","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the 1-based indices of the two numbers whose sum equals the target, or [-1, -1] if no such pair exists. num_indices = {} for i, num in enumerate(nums): complement = target - num if complement in num_indices: return [num_indices[complement] + 1, i + 1] num_indices[num] = i return [-1, -1] # Example Usage: # result = two_sum([2, 7, 11, 15, 4], 9) # Output: [1, 2]"},{"question":"Alice and Bob are playing a different kind of game with a row of N coins. The coins have different values. The game is turn-based and each turn the current player must take a coin from either end of the row. The player with the highest total value of coins at the end of the game wins. They both play optimally, trying to maximize the total value of coins they collect. Write a program to determine the maximum amount of money that Alice can collect if she goes first, assuming both players play optimally. Input format: - The first line contains an integer N (1 ≤ N ≤ 100), the number of coins. - The second line contains N space-separated integers (each between 1 and 1000), representing the values of the coins from left to right. Output format: - Print a single integer, the maximum total value that Alice can collect. Example: Input: 4 4 1 9 8 Output: 13 Explanation: If Alice takes the coin with value 4 first, Bob will choose the 8, and Alice will then take the 9, leaving Bob the 1. This gives Alice a total of 4 + 9 = 13. If Alice takes the coin with value 8 first, Bob can choose either 4 or 9. In either case, Alice cannot collect more than 9 afterwards, resulting in a sum less than 13 for her. Therefore, Alice should start by taking the 4. In this optimal play, Alice ends up with a total of 4 + 9 = 13.","solution":"def max_money(Alice, N): Determines the maximum amount of money that Alice can collect if she goes first, assuming both players play optimally. Parameters: Alice (List[int]): List of coin values. N (int): Number of coins. Returns: int: The maximum total value Alice can collect. dp = [[0] * N for _ in range(N)] for i in range(N): dp[i][i] = Alice[i] for length in range(2, N+1): for i in range(N-length+1): j = i + length - 1 pick_i = Alice[i] + min(dp[i+2][j] if i+2 <= j else 0, dp[i+1][j-1] if i+1 <= j-1 else 0) pick_j = Alice[j] + min(dp[i][j-2] if i <= j-2 else 0, dp[i+1][j-1] if i+1 <= j-1 else 0) dp[i][j] = max(pick_i, pick_j) return dp[0][N-1] # Example usage # N = 4 # Alice = [4, 1, 9, 8] # print(max_money(Alice, N)) # Output: 13"},{"question":"Two friends, Alice and Bob, are playing a game where they take turns to remove marbles from piles. There are p piles of marbles, with each pile initially containing a certain number of marbles. Alice always goes first, and they alternate turns. In each turn, the current player can choose any one of the piles and remove at least one marble and at most half the marbles (rounded down) from that pile. A player loses if they cannot make a move on their turn. Given the initial number of marbles in each pile, determine who will win the game if both Alice and Bob play optimally. The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines. The first line contains one integer p (1 ≤ p ≤ 100) — the number of marble piles. The second line contains p integers a1, a2, ..., ap (1 ≤ ai ≤ 10^9) — the number of marbles in the i-th pile. For each test case, output \\"Alice\\" if Alice will win the game under optimal play, otherwise output \\"Bob\\".","solution":"def marble_game_winner(t, test_cases): results = [] for test in test_cases: p = test[0] marbles = test[1] # To solve this problem, we need to look at the Nim-sum (XOR-sum) of the number of marbles in piles nim_sum = 0 for marble_count in marbles: nim_sum ^= marble_count # If nim_sum is non-zero, Alice wins because she starts first # If nim_sum is zero, Bob wins because Alice cannot force a winning move if nim_sum != 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Alice has a sequence of length n consisting of non-negative integers. She can perform the following operation on the sequence any number of times: choose an element of the sequence (let\'s denote it by a_i) and add to it the value of any of its adjacent elements (either a_{i-1} or a_{i+1} if they exist). Alice\'s goal is to make all the elements of the sequence equal using the minimum number of operations. Write a program to compute the minimum number of operations needed to achieve this goal. The first line of the input contains a single integer n (1 leq n leq 1000), representing the length of the sequence. The second line contains n non-negative integers a_1, a_2, dots, a_n (0 leq a_i leq 10^9), representing the sequence. Output a single integer representing the minimum number of operations needed to make all elements of the sequence equal. # Example Input: ``` 4 1 2 3 4 ``` Output: ``` 3 ``` Explanation: - Choose the third element (3) and add the second element (2) to it: [1, 2, 5, 4] - Choose the fourth element (4) and add the third element (5) to it: [1, 2, 5, 9] - Choose the first element (1) and add the second element (2) to it: [3, 2, 5, 9]","solution":"def min_operations_to_equalize(n, sequence): Computes the minimum number of operations needed to make all elements of the sequence equal. Parameters: n (int): The length of the sequence. sequence (list of int): The sequence of non-negative integers. Returns: int: The minimum number of operations needed. total_sum = sum(sequence) equal_value = total_sum // n operations = 0 for value in sequence: if value != equal_value: operations += 1 return operations"},{"question":"You are given two strings, s1 and s2, which both represent large numbers. These strings contain only digits and may be arbitrarily long. You must determine whether it is possible to form the same number by rearranging the characters of a subset of the characters from each string. For example, given the strings \\"12345\\" and \\"54321\\", you can form the number \\"54321\\" from both strings by rearranging them. But with \\"12345\\" and \\"67890\\", you cannot form any number from both strings. The first line of the input contains two integers, n and m, representing the lengths of strings s1 and s2 (1 ≤ n, m ≤ 10^5). The second line of the input contains the string s1 of length n. The third line of the input contains the string s2 of length m. Print \\"YES\\" if it is possible to form the same number from both strings, otherwise print \\"NO\\". # Example Input ``` 5 5 12345 54321 ``` Output ``` YES ``` Input ``` 5 5 12345 67890 ``` Output ``` NO ``` # Constraints - The lengths of s1 and s2 are at most 10^5. - The strings consist of digits only (0-9).","solution":"def can_form_same_number(s1, s2): Determine if it is possible to form the same number by rearranging the characters of a subset of the characters from each string s1 and s2. from collections import Counter counter1 = Counter(s1) counter2 = Counter(s2) # Check if there is any common digit common_digits = counter1.keys() & counter2.keys() return \\"YES\\" if common_digits else \\"NO\\""},{"question":"Given an array of integers `arr` of length `n` (1 ≤ n ≤ 100) that represents the number of units of water stored in containers. Each value in `arr` indicates the amount of water in a specific container. Due to leakage, each container loses a unit of water each day until it is empty. You need to determine after how many days all containers will be empty. The first line of input contains a single integer `n` — the number of containers. The second line contains `n` integers — the initial water units in each container. Print the number of days it will take until all containers are empty. For example, given the input: ``` 3 1 3 2 ``` The output should be `3`, since the last container takes 3 days to empty. In the second example, given the input: ``` 5 0 1 2 0 1 ``` The output should be `2`, since the last water units will be drained in 2 days.","solution":"def days_until_empty(arr): Given an array of integers representing the amount of water in containers, this function returns the number of days it will take until all containers are empty. :param arr: List of integers :return: Integer representing number of days until all containers are empty return max(arr)"},{"question":"In the realm of game development, players are often tasked with navigating a character through various obstacles on a grid-based game board. Suppose you are developing such a game and need an algorithm to determine if the player can successfully navigate from a starting position to a goal position on a grid-based board. Your board is represented as a 2D grid of characters where \'.\' denotes a walkable cell, \'#\'\' denotes an obstacle, \'S\' denotes the starting position, and \'G\' denotes the goal position. The player can move horizontally or vertically to adjacent cells (but not diagonally). Write a function `can_reach_goal(board: List[List[str]]) -> bool` that determines whether the player can move from the start position to the goal position. # Input - board: a list of list of characters forming the game board. The dimensions of the board are n x m (1 ≤ n, m ≤ 100). The board contains exactly one \'S\' and one \'G\'. # Output - A boolean value `True` if the player can reach the goal from the start position, else `False`. # Example ```python board = [ [\'S\', \'.\', \'.\', \'#\', \'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\', \'.\', \'#\', \'.\', \'.\'], [\'.\', \'#\', \'.\', \'.\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'#\', \'#\', \'.\', \'.\', \'.\'], [\'#\', \'.\', \'#\', \'G\', \'.\', \'#\', \'.\'] ] ``` The function `can_reach_goal(board)` should return `True`. # Note In the given example, the player can navigate from \'S\' to \'G\' by following the path: 1. Move Down 2. Move Right 3. Move Right 4. Move Down 5. Move Down 6. Move Right 7. Move Down If there is no valid path from \'S\' to \'G\', the function should return `False`. Your task is to implement the function `can_reach_goal` to solve the described problem.","solution":"from typing import List def can_reach_goal(board: List[List[str]]) -> bool: import collections # Find the dimensions of the board n, m = len(board), len(board[0]) # Identify the starting and goal positions start = goal = None for i in range(n): for j in range(m): if board[i][j] == \'S\': start = (i, j) elif board[i][j] == \'G\': goal = (i, j) if not start or not goal: return False # Breadth-First Search (BFS) setup queue = collections.deque([start]) visited = set() visited.add(start) # Possible moves: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: current = queue.popleft() if current == goal: return True for direction in directions: ni, nj = current[0] + direction[0], current[1] + direction[1] if 0 <= ni < n and 0 <= nj < m and board[ni][nj] != \'#\' and (ni, nj) not in visited: queue.append((ni, nj)) visited.add((ni, nj)) return False"},{"question":"Alice is building a new system to manage her daily tasks. Each task can be categorized into various labels and has a priority level. She is aware that some tasks take precedence over others based on their priority level. Alice wants to design a function that will help her sort the list of tasks efficiently. You are given a list of tasks, where each task is represented as a dictionary with the keys \\"id\\", \\"label\\", and \\"priority\\". Your task is to write a function `sort_tasks(tasks)` that sorts the tasks in decreasing order of their priority. If two tasks have the same priority, they should be sorted alphabetically by their label. The function should take a list of task dictionaries and return a new sorted list according to the rules mentioned. The \\"priority\\" value is guaranteed to be an integer, and the \\"label\\" value is a string. # Example Input: ```python tasks = [ {\\"id\\": 1, \\"label\\": \\"work\\", \\"priority\\": 3}, {\\"id\\": 2, \\"label\\": \\"exercise\\", \\"priority\\": 2}, {\\"id\\": 3, \\"label\\": \\"shopping\\", \\"priority\\": 2}, {\\"id\\": 4, \\"label\\": \\"leisure\\", \\"priority\\": 1} ] ``` Output: ```python [ {\\"id\\": 1, \\"label\\": \\"work\\", \\"priority\\": 3}, {\\"id\\": 2, \\"label\\": \\"exercise\\", \\"priority\\": 2}, {\\"id\\": 3, \\"label\\": \\"shopping\\", \\"priority\\": 2}, {\\"id\\": 4, \\"label\\": \\"leisure\\", \\"priority\\": 1} ] ``` # Constraints - The list `tasks` will contain between 1 and 10^5 tasks. - Each task dictionary will always contain the keys \\"id\\", \\"label\\", and \\"priority\\". - The \\"priority\\" values will be integer and within the range [1, 100]. - The \\"label\\" values will be non-empty strings containing only lowercase alphabetical characters and will be no longer than 100 characters. Write the `sort_tasks` function to meet the above requirements and constraints.","solution":"def sort_tasks(tasks): Sorts the list of tasks in decreasing order of their priority. If two tasks have the same priority, they are sorted alphabetically by their label. Parameters: tasks (list of dict): List of tasks to be sorted. Returns: list of dict: Sorted list of tasks. return sorted(tasks, key=lambda task: (-task[\'priority\'], task[\'label\']))"},{"question":"The city of Algoria is planning to build a series of parks along a straight road that stretches for n kilometers. Each park requires a certain amount of space, measured in kilometers. Authorities have decided that a park can occupy either one or two consecutive kilometers, but no more than that. Furthermore, they must ensure that no two parks are adjacent to each other, meaning there should be at least one kilometer between any two parks. Given these constraints, you are tasked with computing the maximum number of parks that can be constructed along this road. The input consists of a single integer n (1 ≤ n ≤ 10^6) — the length of the road in kilometers. The output should be a single integer representing the maximum number of parks that can be built. For example, if the road is 5 kilometers long, you could construct one park spanning kilometers 1-2, skip kilometer 3, and then construct a small park at kilometer 4. Therefore, the maximum number of parks possible is 2. **Example 1:** Input: ``` 5 ``` Output: ``` 2 ``` **Example 2:** Input: ``` 7 ``` Output: ``` 3 ``` In the second example, the parks can be located at kilometers (1-2, 4, 6-7). Hence, the maximum number of parks is 3.","solution":"def max_parks(n): Returns the maximum number of parks that can be built along the road of length n kilometers. Each park can occupy either one or two kilometers, but parks cannot be adjacent. if n == 0: return 0 elif n == 1: return 1 else: # Calculate maximum parks using the rule that we can place parks with 1 empty km between them. return (n + 1) // 2"},{"question":"You are given an integer array `arr` representing the population of various cities. The local government has decided to implement the \\"City Attraction\\" program to boost tourism. For this purpose, they construct a single tourist attraction in exactly one city. The attractiveness score of a city is defined as the sum of absolute differences between the population of the chosen city and the population of all other cities. Given the array `arr`, you need to determine the city that minimizes the attractiveness score. In other words, you need to find the index of the city which when chosen for constructing the tourist attraction results in the minimum attractiveness score. If there are multiple such indices, return the smallest one. # Input - An integer `n` representing the number of cities. - `1 ≤ n ≤ 10^5`. - An array `arr` of `n` integers where each integer represents the population of a city. - `-10^6 ≤ arr[i] ≤ 10^6`. # Output - Print a single integer representing the index (0-based) of the city that should be selected for the tourist attraction to minimize the attractiveness score. # Examples Example 1 **Input:** ``` 5 3 6 2 8 4 ``` **Output:** ``` 2 ``` **Explanation:** - For city with index 0: Attractiveness score = |3-6| + |3-2| + |3-8| + |3-4| = 3 + 1 + 5 + 1 = 10 - For city with index 1: Attractiveness score = |6-3| + |6-2| + |6-8| + |6-4| = 3 + 4 + 2 + 2 = 11 - For city with index 2: Attractiveness score = |2-3| + |2-6| + |2-8| + |2-4| = 1 + 4 + 6 + 2 = 13 - For city with index 3: Attractiveness score = |8-3| + |8-6| + |8-2| + |8-4| = 5 + 2 + 6 + 4 = 17 - For city with index 4: Attractiveness score = |4-3| + |4-6| + |4-2| + |4-8| = 1 + 2 + 2 + 4 = 9 The city at index 2 has the smallest attractiveness score of 9. Example 2 **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 1 ``` **Explanation:** - For city with index 0: Attractiveness score = |1-2| + |1-3| + |1-4| = 1 + 2 + 3 = 6 - For city with index 1: Attractiveness score = |2-1| + |2-3| + |2-4| = 1 + 1 + 2 = 4 - For city with index 2: Attractiveness score = |3-1| + |3-2| + |3-4| = 2 + 1 + 1 = 4 - For city with index 3: Attractiveness score = |4-1| + |4-2| + |4-3| = 3 + 2 + 1 = 6 Cities at indices 1 and 2 both have the same smallest attractiveness score of 4, but since we need the smallest index, the answer is 1.","solution":"def find_min_attractiveness_city(arr): Returns the index of the city which minimizes the attractiveness score. n = len(arr) arr.sort() median_index = (n - 1) // 2 return median_index"},{"question":"You are given an array of integers and a target integer. Your task is to find a pair of distinct indices i and j (i ≠ j) such that the sum of the elements at these indices is equal to the target integer. If such a pair exists, return the indices as a tuple (i, j). If no such pair exists, return an empty tuple. Constraints: - The array contains at least 2 and at most 10 elements. - Each element in the array is an integer between -100 and 100, inclusive. Your code should have the following signature: ```python def find_pair_with_sum(arr: List[int], target: int) -> Tuple[int, int]: ``` # Example 1: Input: ```python arr = [2, 7, 11, 15] target = 9 ``` Output: ```python (0, 1) ``` # Example 2: Input: ```python arr = [3, 2, 4] target = 6 ``` Output: ```python (1, 2) ``` # Example 3: Input: ```python arr = [3, 3] target = 6 ``` Output: ```python (0, 1) ``` # Example 4: Input: ```python arr = [1, 2, 3, 4] target = 8 ``` Output: ```python () ```","solution":"from typing import List, Tuple def find_pair_with_sum(arr: List[int], target: int) -> Tuple[int, int]: Returns a tuple of indices (i, j) where i ≠ j and arr[i] + arr[j] == target. If no such pair exists, returns an empty tuple. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return ()"},{"question":"A company is developing a new system to track and manage employee records. Each employee has a unique identification number, a name, and a salary. The system must support the following operations: 1. Add a new employee record. If an employee with the same identification number already exists, update the existing record. 2. Delete an employee record based on their identification number. 3. Query the salary of an employee based on their identification number. 4. Calculate the average salary of all employees. You need to implement the system that supports these operations. Initially, there are no employees in the system. The input consists of a sequence of operations, where each operation is described on a single line. - The first element of each line is the type of operation: \\"ADD\\", \\"DELETE\\", \\"QUERY\\", or \\"AVERAGE\\". - For \\"ADD\\", the line also contains three additional elements: an integer id (1 ≤ id ≤ 10^5), a string name (1 ≤ name length ≤ 100), and a float salary (0 ≤ salary ≤ 10^6), separated by spaces. - For \\"DELETE\\", the line contains an integer id. - For \\"QUERY\\", the line contains an integer id. - \\"AVERAGE\\" does not require any additional elements. The input is terminated by a line containing the word \\"END\\". The output for each operation should be as follows: - For \\"ADD\\" and \\"DELETE\\", do not print anything. - For \\"QUERY\\", print the salary of the employee if the employee exists, otherwise print \\"Not found\\". - For \\"AVERAGE\\", print the average salary of all employees rounded to two decimal places. If there are no employees, print \\"No employees\\". Your task is to read operations from the input, execute them, and produce the required output. Example Input: ``` ADD 1 Alice 50000 ADD 2 Bob 60000 QUERY 1 DELETE 1 QUERY 1 AVERAGE END ``` Example Output: ``` 50000.00 Not found 60000.00 ```","solution":"class EmployeeSystem: def __init__(self): self.employees = {} def add(self, emp_id, name, salary): self.employees[emp_id] = {\'name\': name, \'salary\': salary} def delete(self, emp_id): if emp_id in self.employees: del self.employees[emp_id] def query(self, emp_id): if emp_id in self.employees: return f\\"{self.employees[emp_id][\'salary\']:.2f}\\" return \\"Not found\\" def average(self): if not self.employees: return \\"No employees\\" total_salary = sum(emp[\'salary\'] for emp in self.employees.values()) avg_salary = total_salary / len(self.employees) return f\\"{avg_salary:.2f}\\""},{"question":"Rainbow has a string `s` of length `n`, consisting of lowercase English letters. A subsequence is defined as a sequence that can be derived from the string by deleting some or no characters without changing the order of the remaining characters. Rainbow is interested in finding the longest subsequence of `s` which is also a palindrome. A palindrome is a string that reads the same backward as forward. Write a program which takes a string `s` and outputs the length of the longest palindromic subsequence in `s`. # Input: The first and only line contains the string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. # Output: Print a single integer which is the length of the longest palindromic subsequence in `s`. # Example: Input: ``` bbbab ``` Output: ``` 4 ``` Explanation: One possible longest palindromic subsequence is \\"bbbb\\". Another example: Input: ``` cbbd ``` Output: ``` 2 ``` Explanation: One possible longest palindromic subsequence is \\"bb\\".","solution":"def longest_palindromic_subsequence(s): n = len(s) # Create a DP table to store lengths of longest palindromic subsequence. dp = [[0] * n for _ in range(n)] # All substrings of length 1 are palindromes of length 1. for i in range(n): dp[i][i] = 1 # Build the DP table. # The outer loop considers substrings of increasing length starting from 2 to n. for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # The length of the longest palindromic subsequence is in dp[0][n-1] return dp[0][n - 1]"},{"question":"You are organizing a sequence of games for a tournament. Each game has a specific duration, and you have a limited total time available for holding these games. You need to select the maximum number of games that can be conducted without exceeding the total available time. Each game must be played to its full duration once it is started. Input - The first line of input contains one integer T (1 le T le 1000) — the number of test cases. - For each test case, the first line contains two integers N and M (1 le N le 200, 1 le M le 10^4) — the number of games and the total available time in minutes, respectively. - The second line of each test case contains N integers t_1, t_2, ldots, t_N (1 le t_i le 1000), where t_i is the duration of the i-th game. Output For each test case, output one integer — the maximum number of games that can be conducted without exceeding the total available time. Example Input: ``` 2 3 100 50 30 20 4 75 15 20 30 35 ``` Output: ``` 3 3 ``` Explanation: In the first test case, all three games can be conducted within the available time of 100 minutes. In the second test case, selecting the games with durations 15, 20, and 30 allows you to fit within the 75-minute limit, resulting in a maximum of 3 games.","solution":"def max_games(T, test_cases): results = [] for case in test_cases: N, M, durations = case durations.sort() # Sort the durations in ascending order total_time = 0 count = 0 for duration in durations: if total_time + duration <= M: total_time += duration count += 1 else: break results.append(count) return results # Example usage # test_cases = [ # (3, 100, [50, 30, 20]), # (4, 75, [15, 20, 30, 35]) # ] # T = 2 # result = max_games(T, test_cases) # print(result) # Output: [3, 3]"},{"question":"Write a function that takes a list of integers as input and returns a boolean indicating whether the list is a valid mountain array. A valid mountain array satisfies the following conditions: 1. The length of the list is at least 3. 2. There exists an index i (0 ≤ i < len(list)) such that: a. All elements before index i are strictly increasing. b. All elements after index i are strictly decreasing. Input: - A list of integers. Output: - A boolean (True or False). Example: - Input: [2, 1] Output: False - Input: [3, 5, 5] Output: False - Input: [0, 3, 2, 1] Output: True","solution":"def valid_mountain_array(arr): Check if the given list of integers is a valid mountain array. if len(arr) < 3: return False i = 1 # Walk up while i < len(arr) and arr[i] > arr[i - 1]: i += 1 # Peak can\'t be first or last if i == 1 or i == len(arr): return False # Walk down while i < len(arr) and arr[i] < arr[i - 1]: i += 1 return i == len(arr)"},{"question":"You are given a 2D grid of size n times m representing a map of a city. Each cell in the grid contains a certain amount of gold. You can start at any cell on the leftmost column and you aim to reach any cell on the rightmost column. You can move only to the right, right-up diagonal, or right-down diagonal to collect the gold. Your task is to find the maximum amount of gold you can collect. Let: In one move, you can go from the cell grid[i][j] to any of the following cells: - grid[i][j+1] (move to the right) - grid[i-1][j+1] (move to the right-up diagonal, if it exists) - grid[i+1][j+1] (move to the right-down diagonal, if it exists) The first line of the input contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The next n lines each contain m integers grid[i][j] (0 le grid[i][j] le 100), denoting the amount of gold in each cell. Print the maximum amount of gold you can collect starting from any cell in the leftmost column and reaching any cell in the rightmost column. Example: Input: 3 4 1 3 1 5 2 2 4 1 5 0 2 3 Output: 16 In this example, the path leading to the maximum amount of collected gold is 5 -> 2 -> 4 -> 5, totaling 16 gold.","solution":"def max_gold(grid): n = len(grid) m = len(grid[0]) # Create a table for storing intermediate results and initialize all cells to 0 dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the first column of the dp table for i in range(n): dp[i][0] = grid[i][0] # Process the grid and fill the dp table for j in range(1, m): for i in range(n): # Current cell [i][j] gold_from_left = dp[i][j - 1] # coming from the left gold_from_left_up = dp[i - 1][j - 1] if i > 0 else 0 # coming from the left-up diagonal gold_from_left_down = dp[i + 1][j - 1] if i < n - 1 else 0 # coming from left-down diagonal dp[i][j] = grid[i][j] + max(gold_from_left, gold_from_left_up, gold_from_left_down) # The answer will be the maximum value in the last column max_gold_collected = max(dp[i][m - 1] for i in range(n)) return max_gold_collected"},{"question":"In a distant land called Arrayland, there is a powerful wizard who can perform magical operations on arrays. The wizard is particularly interested in a sequence of integers known as the Magic Sequence. A Magic Sequence is defined as a sequence where each integer appears at least once, and any two integers in the sequence have a common divisor greater than 1. However, a single integer, 1, has a special property, that it can transform any integer to itself. The wizard wants to test his magic by creating a number of smaller sequences out of an initial array of integers using a special operation. The operation can transform an integer `a` into another integer `b` only if the Greatest Common Divisor (GCD) of `a` and `b` is greater than 1 or if `a` or `b` equals to 1. Each operation can be used any number of times on the array. Your task is to determine for each query if all the elements in the given range of the array can form a Magic Sequence. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100000) – the number of elements in the array and the number of queries, respectively. The second line contains `n` space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000) – the elements of the array. Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) – representing a query asking if the subarray from index `l` to index `r` (inclusive) can form a Magic Sequence. For each query, print \\"YES\\" (without quotes) if the subarray can form a Magic Sequence, otherwise print \\"NO\\" (without quotes). # Example Input: ``` 10 3 17 1 34 2 4 8 16 32 64 128 1 3 4 6 2 5 ``` Output: ``` YES YES YES ``` Explanation: In the first query, the subarray is [17, 1, 34]. Since 1 is present, 17 can be transformed to or from any other integer, and 34 can be paired with 17 using GCD rules. Thus, it forms a Magic Sequence. In the second query, the subarray is [2, 4, 8]. All elements in this subarray share the common divisor 2, so it forms a Magic Sequence. In the third query, the subarray is [1, 34, 2, 4]. The presence of 1 allows any transformation, making it a Magic Sequence.","solution":"from math import gcd from functools import reduce from typing import List, Tuple def can_form_magic_sequence(array: List[int], l: int, r: int) -> str: subarray = array[l-1:r] if 1 in subarray: return \\"YES\\" overall_gcd = reduce(gcd, subarray) return \\"YES\\" if overall_gcd > 1 else \\"NO\\" def solve(n: int, q: int, array: List[int], queries: List[Tuple[int, int]]) -> List[str]: results = [] for l, r in queries: results.append(can_form_magic_sequence(array, l, r)) return results"},{"question":"A company has a tree data structure of N nodes and N-1 edges, where each node has a unique value assigned to it. The CEO wants to evaluate the importance of each node in the tree by calculating its \\"influence score.\\" The influence score of a node is defined as the sum of the values of all nodes in its subtree, including itself. You are given the tree as an adjacency list and an array of node values. Write a program that calculates the influence score for each node and outputs them in the order of the node values (1 through N). The input comprises: - An integer N (1 ≤ N ≤ 100,000), representing the number of nodes in the tree. - An array of N integers where the i-th integer represents the value of the (i+1)-th node (1 ≤ value ≤ 10^4). - N-1 pairs of integers u and v (1 ≤ u, v ≤ N) representing an undirected edge between nodes u and v. Output N integers where the i-th integer is the influence score of the (i+1)-th node. # Sample Input ``` 5 1 2 3 4 5 1 2 1 3 2 4 2 5 ``` # Sample Output ``` 15 11 3 4 5 ``` # Explanation For each node, you should calculate the sum of values in its subtree: - Node 1: Subtree includes nodes [1, 2, 3, 4, 5], sum is 1 + 2 + 3 + 4 + 5 = 15. - Node 2: Subtree includes nodes [2, 4, 5], sum is 2 + 4 + 5 = 11. - Node 3: Subtree includes only itself [3], sum is 3. - Node 4: Subtree includes only itself [4], sum is 4. - Node 5: Subtree includes only itself [5], sum is 5.","solution":"def calculate_influence_scores(N, node_values, edges): from collections import defaultdict, deque # Build the adjacency list for the tree adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize influence scores with node values influence_scores = node_values[:] # To keep track of visited nodes visited = [False] * (N + 1) # Function to perform DFS and calculate influence scores def dfs(node): visited[node] = True total_value = node_values[node - 1] # node_values is 0-indexed but nodes are 1-indexed for neighbor in adj_list[node]: if not visited[neighbor]: total_value += dfs(neighbor) influence_scores[node - 1] = total_value return total_value # Assuming node 1 is the root (as trees are connected) dfs(1) return influence_scores # Example usage: # N = 5 # node_values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(calculate_influence_scores(N, node_values, edges)) # Output: [15, 11, 3, 4, 5]"},{"question":"You are given a string \\"codedocumentation\\" and multiple queries. Each query consists of a substring and a character. For each query, you need to determine the number of times the given character appears in the substring within the main string \\"codedocumentation\\". The main string \\"codedocumentation\\" remains the same for all queries, and you need to answer all queries efficiently. For example, if the main string is \\"codedocumentation\\" and you have queries: 1. Substring: \\"code\\", Character: \'o\' 2. Substring: \\"documentation\\", Character: \'t\' 3. Substring: \\"cument\\", Character: \'t\' The expected results are: 1. 1 (\'o\' appears once in \\"code\\") 2. 2 (\'t\' appears twice in \\"documentation\\") 3. 1 (\'t\' appears once in \\"cument\\") The first line of input contains an integer q (1 ≤ q ≤ 1000) indicating the number of queries. The next q lines each contain a substring and a character separated by a space. Output the number of times the given character appears in each substring for each query. Example Input: 3 code o documentation t cument t Example Output: 1 2 1","solution":"def count_characters(main_string, queries): Counts the occurrences of a character in given substrings from the main string. Parameters: main_string (str): The main string to search within. queries (list of tuples): A list of tuples where each tuple contains a substring and a character. Returns: list of int: A list of counts of the character in the substring for each query. result = [] for substring, char in queries: count = substring.count(char) result.append(count) return result # Example usage: # main_string = \\"codedocumentation\\" # queries = [(\\"code\\", \'o\'), (\\"documentation\\", \'t\'), (\\"cument\\", \'t\')] # print(count_characters(main_string, queries)) # Output: [1, 2, 1]"},{"question":"Design an algorithm that finds the minimum number of steps required to convert a given integer `n` (1 ≤ n ≤ 1000) into 1. You are allowed the following operations: 1. If `n` is divisible by 3, you may divide `n` by 3. 2. If `n` is divisible by 2, you may divide `n` by 2. 3. Subtract 1 from `n`. Write a function that returns the minimum number of operations required to reduce `n` to 1. Provide a solution in any programming language and include comments explaining the thought process and solution approach. Function Signature: ```python def min_steps_to_one(n: int) -> int: pass ``` Input: - An integer `n`. Output: - The minimum number of operations required to reduce `n` to 1. Example: ```python print(min_steps_to_one(10)) # Output: 3 ``` Explanation: Starting with `n = 10`: - Subtract 1: 10 - 1 = 9 - Divide by 3: 9 / 3 = 3 - Divide by 3: 3 / 3 = 1 Thus, the minimum number of steps is 3.","solution":"def min_steps_to_one(n: int) -> int: This function returns the minimum number of operations required to reduce n to 1. Operations allowed: 1. If n is divisible by 3, you may divide n by 3. 2. If n is divisible by 2, you may divide n by 2. 3. Subtract 1 from n. # Create a memoization table to store the minimum steps for each number up to n dp = [0] * (n + 1) # Base case: It takes 0 steps to reduce 1 to 1 dp[1] = 0 # Fill the table using a bottom-up approach for x in range(2, n + 1): # Initialize dp[x] with the step of subtracting 1 dp[x] = dp[x - 1] + 1 # Check if divisible by 2 and update if it offers a lesser step count if x % 2 == 0: dp[x] = min(dp[x], dp[x // 2] + 1) # Check if divisible by 3 and update if it offers a lesser step count if x % 3 == 0: dp[x] = min(dp[x], dp[x // 3] + 1) # The value at dp[n] will have the minimum steps to reduce n to 1 return dp[n] # Example usage print(min_steps_to_one(10)) # Output: 3"},{"question":"You are given a rectangular grid with r rows and c columns, where each cell in the grid either contains a \'1\' (which represents land) or a \'0\' (which represents water). Being on land, you can walk from one cell to another cell if they are adjacent horizontally or vertically. We define an island as a connected component of land cells, where you can walk from any cell in the component to any other cell in the component without ever walking on water cells. Your task is to compute the number of distinct islands in the grid. # Input: The first line of the input contains integers r and c (1 ≤ r, c ≤ 1000) — the number of rows and columns in the grid. Each of the next r lines contains c characters — either \'1\' (land) or \'0\' (water), describing the grid. # Output: Print a single integer — the number of distinct islands in the grid. # Examples Example 1: Input: ``` 4 5 11000 11000 00100 00011 ``` Output: ``` 3 ``` Example 2: Input: ``` 3 3 111 010 111 ``` Output: ``` 1 ``` # Note: - In example 1, there are 3 distinct islands: - The first island is formed by the cells (0,0), (0,1), (1,0), and (1,1). - The second island is the single cell (2,2). - The third island is formed by the cells (3,3) and (3,4). - In example 2, there is just 1 island formed by all the \'1\' cells connected together.","solution":"def num_islands(grid): Returns the number of distinct islands in the grid if not grid: return 0 r, c = len(grid), len(grid[0]) visited = [[False] * c for _ in range(r)] def dfs(i, j): if i < 0 or i >= r or j < 0 or j >= c or visited[i][j] or grid[i][j] == \'0\': return visited[i][j] = True dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) islands = 0 for i in range(r): for j in range(c): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) islands += 1 return islands # Example usage: # grid = [ # \\"11000\\", # \\"11000\\", # \\"00100\\", # \\"00011\\" # ] # print(num_islands(grid)) # Output: 3"},{"question":"In a particular online coding competition, each participant can submit multiple solutions for various problems. You are provided the list of submissions each containing the participant\'s name and a score. The score is an integer indicating how well the solution performed. A higher score indicates a better solution. Your task is to process these submissions and determine the final ranking for each participant based on their highest score among all their submissions. A participant can submit multiple times for the same problem or different problems, but only the highest score achieved by that participant is considered for the final ranking. Here are the categories based on their highest scores: - \\"beginner\\": highest score < 1000 - \\"intermediate\\": 1000 ≤ highest score < 2000 - \\"advanced\\": 2000 ≤ highest score < 3000 - \\"expert\\": highest score ≥ 3000 You need to implement a program that takes the input data and outputs the final rankings of all participants with their respective categories based on the above classification. The first line of the input contains an integer n (1 ≤ n ≤ 2000), the number of submissions. Each of the next n lines contains the participant\'s name (consisting of lowercase Latin letters, with length between 1 and 10) and their achieved score (an integer 0 ≤ score ≤ 4000). Output the number of participants and then list each participant\'s name along with their final category. Names and categories can be printed in any order. Example 1: ``` Input: 5 alice 850 bob 1050 alice 1300 charlie 2550 bob 990 Output: 3 alice intermediate bob intermediate charlie advanced ``` Example 2: ``` Input: 4 dave 2999 eve 3999 eve 1500 dave 100 Output: 2 dave advanced eve expert ``` Implement the program to handle the inputs and outputs as specified in the examples above.","solution":"def get_final_ranking(n, submissions): highest_scores = {} # Process each submission for submission in submissions: name, score = submission.split() score = int(score) if name not in highest_scores: highest_scores[name] = score else: highest_scores[name] = max(highest_scores[name], score) # Determine categories categories = {} for name, score in highest_scores.items(): if score < 1000: category = \'beginner\' elif score < 2000: category = \'intermediate\' elif score < 3000: category = \'advanced\' else: category = \'expert\' categories[name] = category # Prepare result result = [len(categories)] for name, category in categories.items(): result.append(f\\"{name} {category}\\") return result"},{"question":"You are given a number n. Create a function that determines whether this number is a palindrome in its binary representation. A number is a palindrome if it reads the same forward and backward. For example, 9 is represented as 1001 in binary, which is a palindrome. The function should output \\"YES\\" if the binary representation of the number is a palindrome and \\"NO\\" otherwise. Input: - An integer n (1 ≤ n ≤ 10^9). Output: - A single word \\"YES\\" if the binary representation of n is a palindrome, otherwise \\"NO\\". Example: Input: 9 Output: YES Input: 12 Output: NO","solution":"def is_binary_palindrome(n): Determines whether the binary representation of a given number is a palindrome. Parameters: n (int): The integer to be checked. Returns: str: \\"YES\\" if binary representation is a palindrome, otherwise \\"NO\\". binary_repr = bin(n)[2:] # Get the binary representation without \'0b\' prefix return \\"YES\\" if binary_repr == binary_repr[::-1] else \\"NO\\""},{"question":"You are given a string S consisting only of characters \'a\', \'b\', and \'c\'. Your task is to find and return the length of the longest substring that contains at most two distinct characters. The input string S has a length of at most 100 characters. Write a function `longest_substring_two_distinct(S)` that takes the string S as input and returns the length of the desired substring. Example: Input: ``` abcabcabc ``` Output: ``` 2 ``` Explanation: The substring \\"ab\\" or \\"bc\\" or \\"ca\\" each has length 2 and contains at most two distinct characters.","solution":"def longest_substring_two_distinct(S): Finds the length of the longest substring that contains at most two distinct characters. :param S: The input string consisting of characters \'a\', \'b\', and \'c\'. :return: The length of the longest such substring. if not S: return 0 start = 0 max_length = 0 char_count = {} for end in range(len(S)): char = S[end] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # If we have more than 2 distinct characters, shrink the window while len(char_count) > 2: start_char = S[start] char_count[start_char] -= 1 if char_count[start_char] == 0: del char_count[start_char] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of rectangles. For each rectangle, calculate the perimeter and the area. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of rectangles. The following n lines each contain two integers wi and hi (1 ≤ wi, hi ≤ 10^9) representing the width and the height of each rectangle. Output n lines. Each line should contain two integers, the perimeter and the area of the corresponding rectangle. Example: Input: 3 4 5 7 8 10 2 Output: 18 20 30 56 24 20 Note: - The perimeter of a rectangle is calculated as 2 * (width + height). - The area of a rectangle is calculated as width * height.","solution":"def calculate_perimeter_and_area(n, rectangles): Given a list of rectangles, returns a list of tuples containing the perimeter and area of each rectangle. :param n: int, number of rectangles :param rectangles: list of tuples, each tuple contains the width and height of a rectangle :return: list of tuples, each tuple contains the perimeter and area of a rectangle results = [] for w, h in rectangles: perimeter = 2 * (w + h) area = w * h results.append((perimeter, area)) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine whether you can rearrange the characters of the string to form a palindrome. A palindrome is a word that reads the same forward and backward. To solve this problem, you should count the frequency of each character in the string. For the characters to form a palindrome, at most one character can have an odd frequency (for strings of odd length), and for strings of even length, all characters must have even frequencies. Write a function `can_form_palindrome(s: str) -> bool` that returns `True` if the characters of the string can be rearranged to form a palindrome, and `False` otherwise. # Input - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output - Return `True` if the characters can be rearranged to form a palindrome, otherwise return `False`. # Example ```python can_form_palindrome(\\"carrace\\") # Returns: True can_form_palindrome(\\"daily\\") # Returns: False ```","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # count the frequency of each character count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # For even length strings, no characters should have an odd count # For odd length strings, at most one character can have an odd count return odd_count <= 1"},{"question":"You are working on a project that involves processing a list of messages. Each message in the list contains a string of lowercase alphabetic characters. For security reasons, you need to implement a filter to block messages based on certain criteria. Specifically, you want to block any message that contains a \\"dangerous\\" substring. Given a list of messages and a list of dangerous substrings, write a program that identifies and counts the number of blocked messages in the given list. A message is considered blocked if it contains any of the given dangerous substrings as a contiguous part of the message. The first line of input contains the number of test cases t (1 le t le 100). The description of the test cases follows. The first line of each test case contains two integers m and d (1 le m le 100, 1 le d le 50) — the number of messages and the number of dangerous substrings. The next m lines each contain a single string s_i (1 le |s_i| le 100) — a message that needs to be filtered. The following d lines each contain a single string t_j (1 le |t_j| le 10) — a dangerous substring. Output a single integer for each test case — the number of blocked messages. # Example Input: ``` 2 3 2 hello world dangerous hel wor 2 1 filter secure sec ``` Output: ``` 2 1 ``` # Explanation In the first test case, the first and second messages contain the dangerous substrings \\"hel\\" and \\"wor\\" respectively, so they are blocked. The third message does not contain any dangerous substrings. In the second test case, the second message contains the dangerous substring \\"sec\\", so it is blocked. The first message does not contain the dangerous substring. In each case, the output corresponds to the count of blocked messages.","solution":"def count_blocked_messages(test_cases): results = [] for case in test_cases: m, d, messages, dangerous_substrings = case blocked_count = 0 for message in messages: for dangerous_substring in dangerous_substrings: if dangerous_substring in message: blocked_count += 1 break results.append(blocked_count) return results"},{"question":"Given two strings, `a` and `b`, consisting of lowercase Latin letters, find the length of the longest common substring that occurs in both `a` and `b`. Specifically, a substring is defined as a contiguous sequence of characters within a string. For example, if `a = \\"abcde\\"` and `b = \\"abfde\\"`, the longest common substring is \\"de\\" with a length of 2. The input consists of: - The first line contains the string `a` (1 ≤ |a| ≤ 5000). - The second line contains the string `b` (1 ≤ |b| ≤ 5000). Print a single integer — the length of the longest common substring of the two strings. # Detail Example: **Input:** ``` abcde abfde ``` **Output:** ``` 2 ``` Explanation: The longest common substrings are \\"de\\" which appears in both strings and has length 2.","solution":"def longest_common_substring(a, b): Returns the length of the longest common substring between two strings a and b. len_a = len(a) len_b = len(b) dp = [[0] * (len_b + 1) for _ in range(len_a + 1)] max_length = 0 for i in range(1, len_a + 1): for j in range(1, len_b + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length"},{"question":"You are given a string s consisting of lowercase English letters, and you want to determine how many times a pattern p can appear as a substring in s without overlapping any occurrences. For example, if s = \\"abababa\\" and p = \\"aba\\", the pattern \\"aba\\" appears as a substring twice (at positions 1 and 5) without overlapping. Write a function `count_non_overlapping_occurrences(s: str, p: str) -> int` that takes the string s and the pattern p as input and returns the number of times the pattern p appears in s without overlapping. # Input: - A string s (1 ≤ |s| ≤ 100000), the text to search within. - A string p (1 ≤ |p| ≤ 1000), the pattern to search for. # Output: - An integer representing the number of non-overlapping occurrences of the pattern p in the string s. # Example: ``` Input: s = \\"abababa\\" p = \\"aba\\" Output: 2 Input: s = \\"aaaaaa\\" p = \\"aa\\" Output: 3 ``` # Note: The pattern \\"aba\\" appears twice in \\"abababa\\", once starting at position 1 and another time starting at position 5, hence the output is 2. In the second example, the pattern \\"aa\\" appears three times in \\"aaaaaa\\", starting at positions 1, 3, and 5, hence the output is 3.","solution":"def count_non_overlapping_occurrences(s: str, p: str) -> int: Returns the number of non-overlapping occurrences of the pattern p in the string s. count = 0 i = 0 while i <= len(s) - len(p): if s[i:i+len(p)] == p: count += 1 i += len(p) # Move index by length of p to ensure no overlap else: i += 1 # Move to the next character return count"},{"question":"You are given an array of integers. Your task is to write a function `canBalance` that determines if you can split the array into two parts, where the sum of the elements in the first part is equal to the sum of the elements in the second part. The split point can be at any position in the array, and each part must contain at least one element. The function signature is `bool canBalance(vector<int> arr)`. # Input - The input is an array of integers `arr` of length `n` (1 ≤ n ≤ 1000). - The elements of the array are integers, with absolute values not exceeding 1000. # Output - The function should return `true` if the array can be split into two parts with equal sums, and `false` otherwise. # Example **Example 1:** Input: arr = [1, 1, 1, 2, 1] Output: true Explanation: You can split the array at index 3 (1+1+1 = 1+2). **Example 2:** Input: arr = [2, 1, 1, 2, 1] Output: false Explanation: No matter where you split the array, the sums of the two parts are not equal. **Example 3:** Input: arr = [10, 10] Output: true Explanation: You can split the array at index 1 (10 = 10). # Constraints - The function must run in O(n) time complexity.","solution":"def canBalance(arr): Determines if the given array can be split into two parts with equal sums where the split point can be at any position and each part must contain at least one element. total_sum = sum(arr) left_sum = 0 for i in range(len(arr) - 1): left_sum += arr[i] if left_sum == total_sum - left_sum: return True return False"},{"question":"You are given a list of `n` integers representing the ages of people in a room. Your task is to determine the minimum number of groups such that every group contains at least three people, and the age difference between the youngest and the oldest person in each group is no more than `k` years. Output the minimum number of such groups, or -1 if it is not possible to divide the people accordingly. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 100) and `k` (0 ≤ k ≤ 100), where `n` is the number of people and `k` is the maximum allowed age difference in a group. - The second line contains `n` integers, the ages of the people in the room. # Output - Print a single integer representing the minimum number of groups needed or -1 if it is not possible to form the required groups. # Example Input ``` 9 2 11 13 12 10 14 15 13 11 12 ``` Output ``` 3 ``` Input ``` 5 1 18 19 20 21 22 ``` Output ``` -1 ``` # Explanation In the first example, one possible grouping is: - Group 1: ages 10, 11, 11 - Group 2: ages 12, 12, 13 - Group 3: ages 13, 14, 15 In the second example, it is impossible to form groups with an age difference of 1 or less and with the minimum required number of people (at least three in each group).","solution":"def min_groups(n, k, ages): if n < 3: return -1 ages.sort() groups = 0 i = 0 while i < n: if i + 2 < n and ages[i + 2] - ages[i] <= k: groups += 1 i += 3 else: return -1 return groups"},{"question":"There\'s a small but mysterious village named Fintown which is famous for its ancient clock tower. The clock in the tower is unique because it shows a different time format. When the villagers look at the clock, they interpret the time in the following way: The clock shows the time as a single integer x (1 ≤ x < 1440), where \'x\' represents the number of minutes past since midnight. For example, if x is 61, the time is 1 hour and 1 minute after midnight, and if x is 720, the time is exactly 12:00 noon. The village chief has asked you to write a program that will convert the integer x into the standard 24-hour format (HH:MM). The input contains a single integer x (1 ≤ x < 1440). The output should be in the format \\"HH:MM\\", where HH is the hour with exactly two digits (including leading zero if necessary), and MM is the minute with exactly two digits (including leading zero if necessary). # Examples Input 61 Output 01:01 Input 720 Output 12:00 Input 1345 Output 22:25","solution":"def convert_minutes_to_time(x): Converts the given number of minutes past since midnight to the standard 24-hour format (HH:MM). Parameters: x (int): The number of minutes past since midnight (1 ≤ x < 1440). Returns: str: The time in standard 24-hour format (HH:MM). hours = x // 60 minutes = x % 60 return f\\"{hours:02}:{minutes:02}\\""},{"question":"You are given a rectangular grid of cells with size n x m. Each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You need to help a robot find the maximum number of empty cells it can visit starting from a given starting cell (sx, sy) and ending at a given ending cell (ex, ey). The robot can move horizontally or vertically to an adjacent cell, but cannot move diagonally, and it cannot move into a cell with an obstacle. The robot should not visit any cell more than once in a single path and once it reaches the ending cell, it cannot move further. The task is to determine the maximum number of empty cells the robot can visit on its path from the starting cell to the ending cell. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid (\'.\' for empty cell and \'#\' for obstacle). The last line contains four integers sx, sy, ex, ey (1 ≤ sx, sy, ex, ey ≤ n, m) — the starting and ending cell coordinates in 1-indexed format. Output a single integer — the maximum number of empty cells the robot can visit on its path from the starting position to the ending position. Consider the sample input below: Input: 5 5 ..... ..#.. ..#.. ..#.. ..... 1 1 5 5 Output: 9 Explanation: One of the maximum paths is: (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (1, 5) -> (2, 5) -> (3, 5) -> (4, 5) -> (5, 5) The robot visits 9 empty cells.","solution":"def max_empty_cells_visited(n, m, grid, sx, sy, ex, ey): Returns the maximum number of empty cells the robot can visit on its path from starting cell (sx, sy) to ending cell (ex, ey). Arguments: n - number of rows in the grid m - number of columns in the grid grid - list of strings representing the grid sx - starting cell x-coordinate (1-indexed) sy - starting cell y-coordinate (1-indexed) ex - ending cell x-coordinate (1-indexed) ey - ending cell y-coordinate (1-indexed) from collections import deque # Convert to 0-index for ease of calculation sx, sy, ex, ey = sx-1, sy-1, ex-1, ey-1 # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] def bfs(): queue = deque([(sx, sy, 1)]) # (x, y, number_of_cells) visited[sx][sy] = True max_cells = 0 while queue: x, y, cells = queue.popleft() if (x, y) == (ex, ey): max_cells = max(max_cells, cells) continue for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, cells + 1)) return max_cells return bfs()"},{"question":"You are given a grid of size n times m, filled with non-negative integers. Your task is to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) such that the sum of the integers along the path is minimized. You can only move right or down at each step. Print the sum of the integers along the path and the path itself as a sequence of coordinates. The first line contains two integers n (1 le n le 100) and m (1 le m le 100), representing the dimensions of the grid. The next n lines contain m integers representing the grid. Output the minimum sum and the sequence of coordinates of the path. Example input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Example output: ``` 7 (0, 0), (0, 1), (0, 2), (1, 2), (2, 2) ``` Another example input: ``` 2 2 1 2 1 1 ``` Example output: ``` 3 (0, 0), (1, 0), (1, 1) ```","solution":"def min_path_sum(grid): n = len(grid) m = len(grid[0]) # Initialize DP table and path tracker dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = grid[0][0] path = [[[] for _ in range(m)] for _ in range(n)] path[0][0] = [(0, 0)] for i in range(n): for j in range(m): if i > 0: if dp[i][j] > dp[i-1][j] + grid[i][j]: dp[i][j] = dp[i-1][j] + grid[i][j] path[i][j] = path[i-1][j] + [(i, j)] if j > 0: if dp[i][j] > dp[i][j-1] + grid[i][j]: dp[i][j] = dp[i][j-1] + grid[i][j] path[i][j] = path[i][j-1] + [(i, j)] min_sum = dp[n-1][m-1] min_path = path[n-1][m-1] return min_sum, min_path # Function to parse input and return the result def solve(grid): min_sum, min_path = min_path_sum(grid) path_str = \', \'.join(f\'({x}, {y})\' for x, y in min_path) return f\\"{min_sum}n{path_str}\\""},{"question":"A large organization keeps track of its employees\' time off in a special matrix. The matrix has 365 rows (one for each day of the year) and 50 columns (one for each employee). Each cell initially contains the value 0. Every time an employee takes time off, the corresponding cell is incremented by 1. Given a list of m intervals, each indicating the days an employee was on leave, update the matrix to reflect the correct number of days each employee has been on leave. Here is the input format: - The first line contains an integer m (1 ≤ m ≤ 200) — the number of intervals. - Each of the following m lines contains three integers e, d1, d2 (1 ≤ e ≤ 50, 1 ≤ d1 ≤ d2 ≤ 365), where e is the employee number (indexed from 1 to 50), and d1 and d2 represent the start and end days (inclusive) of the interval. Your task is to find the sum of all values in the matrix after processing all intervals. Output the sum of all values in the matrix. Sample Input: ``` 3 1 1 10 2 15 20 1 5 15 ``` Sample Output: ``` 27 ``` Explanation: - The first interval increments the values for employee 1 from day 1 to day 10 by 1. - The second interval increments the values for employee 2 from day 15 to day 20 by 1. - The third interval increments the values for employee 1 from day 5 to day 15 by 1. After processing the intervals, the sum of all values in the matrix will be 27.","solution":"def total_time_off(m, intervals): Returns the total sum of days off taken by all employees in the organization. Args: - m (int): the number of intervals - intervals (list of tuples): each tuple contains three integers (e, d1, d2) Returns: - int: the total sum of days off # Initialize a 365x50 matrix with zeros matrix = [[0] * 50 for _ in range(365)] # Process each interval for e, d1, d2 in intervals: for day in range(d1-1, d2): matrix[day][e-1] += 1 # Calculate the total sum of all values in the matrix total_sum = sum(sum(row) for row in matrix) return total_sum"},{"question":"During a research study at the Complex Systems Laboratory, two researchers, Dr. Alice and Dr. Bob, work on a series of interconnected systems represented as nodes in a large graph. Each node in the graph can represent a system that either functions correctly (`1`) or has failed (`0`). A critical problem they’re trying to solve is identifying if a path exists that connects two given nodes while ensuring that all the systems (nodes) along this path are functioning correctly. You have been given a graph via its adjacency list and a binary array indicating the operational status of each node. You need to determine if there is a path connecting two specific nodes such that all nodes on this path are operational (`1`). # Input - The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of nodes in the graph. - The second line contains `n` integers, each either `0` or `1`, representing the operational status of the nodes (from node 1 to node n). - The third line contains an integer `m` (1 ≤ m ≤ 200,000) — the number of edges in the graph. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that there is an undirected edge between nodes `u` and `v`. - The last line contains two integers `a` and `b` (1 ≤ a, b ≤ n), the nodes between which you need to check for an operational path. # Output - Print \\"YES\\" if there is a path between nodes `a` and `b` such that all nodes on the path are operational. - Otherwise, print \\"NO\\". # Example Input ``` 6 1 0 1 1 0 1 5 1 2 1 3 3 4 2 5 4 6 1 6 ``` Output ``` YES ``` Input ``` 6 1 0 1 1 0 1 5 1 2 1 3 3 4 2 5 4 6 2 6 ``` Output ``` NO ``` # Explanation In the first example, the path 1 -> 3 -> 4 -> 6 connects nodes 1 and 6, and all nodes in this path are operational. Therefore, the output is \\"YES\\". In the second example, no operational path exists between nodes 2 and 6, hence the output is \\"NO\\".","solution":"def is_connected_path(n, operational_status, edges, a, b): from collections import deque, defaultdict if operational_status[a-1] == 0 or operational_status[b-1] == 0: return \\"NO\\" graph = defaultdict(list) for u, v in edges: if operational_status[u-1] == 1 and operational_status[v-1] == 1: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([a]) visited.add(a) while queue: node = queue.popleft() if node == b: return \\"YES\\" for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"Given a string s, determine the length of the smallest contiguous subsequence (substring) that contains all the unique characters present in the string s. Here\'s the detailed description of the problem: - You are given a string s of length n (1 leq n leq 10^5). - The string contains lowercase English letters. You need to find the length of the smallest substring that includes at least one occurrence of every distinct character present in string s. # Input The first line contains an integer n — the length of the string s. The second line contains the string s. # Output Print the length of the smallest substring that contains all unique characters of string s. # Example Input ``` 5 abcab ``` Output ``` 3 ``` Explanation The smallest substring that contains all unique characters (`a`, `b`, and `c`) is `abc` with a length of 3. This problem tests your ability to work efficiently with substrings and set operations in string processing.","solution":"def smallest_substring_length(s): Calculate the length of the smallest substring that contains all unique characters of the string s. :param s: The input string :return: The length of the smallest substring containing all unique characters unique_chars = set(s) total_unique = len(unique_chars) if total_unique == 1: # All characters are the same return 1 left = 0 min_length = float(\'inf\') char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) == total_unique: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length"},{"question":"A binary indexed tree (BIT), also known as a Fenwick Tree, is a data structure that provides efficient methods for dynamic cumulative frequency tables. It supports point updates and prefix sum queries in logarithmic time. You are given an array of integers with an initial size of n. You need to perform two types of operations on this array: 1. Update the value at a specific index. 2. Calculate the sum of a subarray from index l to index r (both inclusive). Write a program that, given the array and a series of updates and sum queries, returns the results of the sum queries. The first line contains an integer n (1 ≤ n ≤ 100,000) — the initial size of the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 1,000) — the initial array elements. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains one of two types of queries: 1. \'1 x val\' — This query means to update the element at index x (1-based) to the value val (|val| ≤ 1,000). 2. \'2 l r\' — This query means to report the sum of the subarray starting from index l to index r (1-based). Output the results of the sum queries, each on a new line in the order they appear in the input. For example: ``` Input: 5 1 2 3 4 5 3 2 1 3 1 2 8 2 1 3 Output: 6 12 ``` Note: - For the first sum query (`2 1 3`), the sum of the subarray from index 1 to index 3 is `1 + 2 + 3 = 6`. - After the update query (`1 2 8`), the array becomes `[1, 8, 3, 4, 5]`. - For the second sum query (`2 1 3`), the sum of the subarray from index 1 to index 3 is `1 + 8 + 3 = 12`.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def process_queries(n, arr, q, queries): fenwick_tree = FenwickTree(n) results = [] # Build the initial Fenwick Tree for i in range(n): fenwick_tree.update(i + 1, arr[i]) for query in queries: if query[0] == 1: x, val = query[1], query[2] current_val = fenwick_tree.range_query(x, x) fenwick_tree.update(x, val - current_val) elif query[0] == 2: l, r = query[1], query[2] results.append(fenwick_tree.range_query(l, r)) return results"},{"question":"You are given a list of strings. Two strings, s1 and s2, are called friendly if s1 can be derived from s2 by rotating it some number of positions. For example, \\"abcde\\" and \\"deabc\\" are friendly because \\"abcde\\" can be derived by rotating \\"deabc\\" two positions to the right. Given a list of strings, determine the number of unique sets of friendly strings. Each string in the list belongs to exactly one such set. Each set must be counted exactly once. The first line of the input contains an integer n (1 ≤ n ≤ 105) denoting the number of strings. Each of the next n lines contains a string consisting of lowercase English letters only. The length of these strings will be between 1 and 50, inclusive. Print a single integer — the number of unique sets of friendly strings in the given list. # Example: Input: 5 abcde bcdea deabc xyz yzx Output: 2 Explanation: There are two sets of friendly strings. {\\"abcde\\", \\"bcdea\\", \\"deabc\\"} is one set and {\\"xyz\\", \\"yzx\\"} is another set.","solution":"def count_friendly_sets(strings): Returns the number of unique sets of friendly strings from the list of strings. unique_sets = set() for s in strings: # Generate all possible rotated versions of string s circular_variations = {s[i:] + s[:i] for i in range(len(s))} # Add the smallest lexicographical string among its rotations to the set unique_sets.add(min(circular_variations)) return len(unique_sets)"},{"question":"You are given an array of integers `arr` containing `n` elements. You need to find if it\'s possible to shuffle the elements of `arr` such that there are no two adjacent elements in the resulting array with the same parity (i.e., one is even and one is odd). If such a rearrangement is possible, print \\"YES\\" followed by the rearranged array. If no such rearrangement exists, print \\"NO\\". # Input The first line contains a single integer `n` (1 le n le 10^5) — the length of the array. The second line contains `n` integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the elements of the array. # Output Print \\"YES\\" and the rearranged array if it is possible to rearrange the elements such that no two adjacent elements have the same parity. Otherwise, print \\"NO\\". # Examples Example 1 # Input ``` 5 1 2 3 4 5 ``` # Output ``` YES 1 2 3 4 5 ``` or ``` YES 2 1 4 3 5 ``` Example 2 # Input ``` 3 2 4 6 ``` # Output ``` NO ``` # Note In the first example, the arrays `[1, 2, 3, 4, 5]` and `[2, 1, 4, 3, 5]` are possible valid shuffles as adjacent elements have different parity. In the second example, it is impossible to reshuffle the array `[2, 4, 6]` such that no two adjacent elements are of the same parity since all are even.","solution":"def rearrange_array(n, arr): Determines if it\'s possible to rearrange the array such that no two adjacent elements have the same parity. If possible, returns \\"YES\\" and the rearranged array, otherwise returns \\"NO\\". if n == 1: return \\"YES\\", arr even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] if abs(len(even) - len(odd)) > 1: return \\"NO\\", [] result = [] while even and odd: if len(result) > 0 and result[-1] % 2 == 0: result.append(odd.pop()) elif len(result) > 0 and result[-1] % 2 != 0: result.append(even.pop()) else: if len(even) > len(odd): result.append(even.pop()) else: result.append(odd.pop()) result.extend(even) result.extend(odd) return \\"YES\\", result"},{"question":"You are given a rectangular grid of cells with n rows and m columns, where each cell either contains an obstacle (#) or is free (.). You are also provided with the initial positions of a person and a target in the grid. The person can move up, down, left, or right, but cannot move into a cell with an obstacle or outside the grid. Determine the minimum number of steps required for the person to reach the target. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Each character is either \'.\' (free) or \'#\' (obstacle). The following line contains two integers r1 and c1 (1 ≤ r1 ≤ n, 1 ≤ c1 ≤ m) — the starting position of the person (1-based index). The next line contains two integers r2 and c2 (1 ≤ r2 ≤ n, 1 ≤ c2 ≤ m) — the position of the target (1-based index). If the person cannot reach the target, print single line \\"Impossible\\" (without quotes). Otherwise, print a single integer — the minimum number of steps required to reach the target. Example: Input: 4 4 .... .. .... .... 1 1 4 4 Output: 6 In this example, one of the shortest paths from the starting position (1, 1) to the target position (4, 4) is (1, 1) → (2, 1) → (3, 1) → (4, 1) → (4, 2) → (4, 3) → (4, 4), taking 6 steps.","solution":"from collections import deque def min_steps_to_reach_target(n, m, grid, start, target): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' queue = deque([(start[0] - 1, start[1] - 1, 0)]) # Convert 1-based index to 0-based index for processing visited = set((start[0] - 1, start[1] - 1)) while queue: x, y, steps = queue.popleft() if (x, y) == (target[0] - 1, target[1] - 1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return \\"Impossible\\" # Example usage # n, m = 4, 4 # grid = [ # \\"....\\", # \\"..\\", # \\"....\\", # \\"....\\" # ] # start = (1, 1) # target = (4, 4) # result = min_steps_to_reach_target(n, m, grid, start, target) # print(result) # Output: 6"},{"question":"Henry loves solving puzzles, and he recently came across an interesting problem with an array of elements. He has an array of n integers, and he wants to find a subarray (continuous part) with the largest sum. Can you help him solve it? The input consists of multiple test cases. Each test case starts with an integer n (1 leq n leq 10^5) — the number of elements in the array. If you read in a value of -1 for n, it means you printed an invalid answer in the previous case, and you should immediately exit to avoid further wrong answers. The next line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4) — the elements of the array. To find the subarray with the largest sum, you need to print this maximum sum for each test case. # Input Format - The first line contains an integer t (1 leq t leq 10) — the number of test cases. - For each test case: - The first line contains an integer n — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n — the elements of the array. # Output Format - For each test case, print the maximum sum of any subarray. # Example Input ``` 2 5 1 2 -1 2 -3 4 -1 -2 -3 -4 ``` Output ``` 4 -1 ``` # Explanation In the first test case, the subarray with the largest sum is `[1, 2, -1, 2]`, which has a sum of `4`. In the second test case, the subarray with the largest sum is `[-1]`, which has a sum of `-1`. # Note You need to implement an efficient algorithm to handle the large input sizes, as a naive solution with a time complexity of O(n^2) or worse will not pass the time limits.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray using Kadane\'s Algorithm. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve_multiple_cases(test_cases): results = [] for n, array in test_cases: if n == -1: break results.append(max_subarray_sum(array)) return results"},{"question":"Alice has a collection of n integers. She wants to play a game with her friend Bob. The game is played as follows: 1. Alice chooses an integer from her collection and writes it on a board. 2. Bob then chooses an integer from the collection that has not yet been used, and writes it on the board. 3. This process is repeated until all the integers in Alice\'s collection are used up. After all the integers are written on the board, the score of the game is calculated. The score is the maximum absolute difference between any two consecutive numbers on the board. Alice wants to minimize the score, while Bob wants to maximize it. They both play optimally. You need to find the minimum possible score Alice can achieve if both players play optimally. The first line of input contains an integer n (2 ≤ n ≤ 100,000) — the number of integers in Alice\'s collection. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000) — the integers in Alice\'s collection. Print the minimum possible score Alice can achieve if both players play optimally. # Example Input: ``` 4 1 6 9 3 ``` Output: ``` 5 ``` Explanation: Alice and Bob can choose the numbers in the following order to minimize the maximum absolute difference between consecutive numbers on the board: 1. Alice chooses 1. 2. Bob chooses 6. 3. Alice then chooses 9. 4. Finally, Bob chooses 3. The board ends up with the numbers in the order: 1, 6, 9, 3, which results in the score being `max(|6-1|, |9-6|, |3-9|) = max(5, 3, 6) = 6`. This is the optimal strategy to minimize the maximum absolute difference.","solution":"def min_max_absolute_difference(arr): Returns the minimum possible score Alice can achieve if both players play optimally. arr.sort() min_score = float(\'inf\') for i in range(len(arr) - 1): min_score = min(min_score, arr[i + 1] - arr[i]) return min_score"},{"question":"Write a program to detect whether a set of parentheses is balanced. A set of parentheses is considered balanced if every opening parenthesis “(” has a corresponding closing parenthesis “)”. Your task is to check whether the given string containing only these two types of characters is balanced or not. The input consists of a single string s (1 ≤ |s| ≤ 106), which contains only the characters \'(\' and \')\' – no other characters will be present in the input string. Output \\"Balanced\\" if the parentheses in the given string are balanced. Output \\"Unbalanced\\" otherwise. Note: For a string to be balanced, at no point in the string should the number of closing parentheses encountered so far exceed the number of opening parentheses. Additionally, by the end of the string, the number of opening and closing parentheses must be equal. Here are some examples to illustrate the concept: Input: ``` (()()) ``` Output: ``` Balanced ``` Input: ``` ((()) ``` Output: ``` Unbalanced ``` Input: ``` (()) ``` Output: ``` Balanced ``` Your solution should be efficient enough to handle large inputs within the given constraints.","solution":"def is_balanced_parentheses(s): Determines if the parentheses in the given string are balanced. Parameters: s (str): The input string containing only \'(\' and \')\'. Returns: str: \'Balanced\' if the parentheses are balanced, otherwise \'Unbalanced\'. balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return \\"Unbalanced\\" return \\"Balanced\\" if balance == 0 else \\"Unbalanced\\""},{"question":"This is a problem related to string manipulation and understanding patterns. Your task will be to determine if a given string can be formed by repeating another string. You need to write a function that checks whether a given string \'s\' can be constructed by taking a substring and appending multiple copies of that substring together. For example: - Given s = \\"abab\\", you can form this by repeating substring \'ab\'. - Given s = \\"abcabcabc\\", you can form this by repeating substring \'abc\'. # Input - A single line that contains a string \'s\' (1 ≤ |s| ≤ 1000). The string consists only of lowercase English letters. # Output - Print \\"True\\" if the string can be constructed by repeating a substring, otherwise print \\"False\\". # Example ``` Input abab Output True ``` ``` Input abac Output False ``` # Note: In the first example, \'s\' can be formed by repeating \'ab\'. In the second example, there is no substring which can be repeated to form \'abac\'. # Explanation: To solve this problem, you can try finding a substring that can be repeated multiple times to form the given string. You should consider substrings of lengths that divide the total length of the given string.","solution":"def can_form_by_repeating_substring(s): Determine if the string can be constructed by repeating a substring. n = len(s) for i in range(1, n//2 + 1): if n % i == 0: substring = s[:i] if substring * (n // i) == s: return True return False"},{"question":"There are two groups of students, each group containing n students. Each student is characterized by a skill level. You are the coach and your task is to form pairs of students such that each pair consists of one student from the first group and one student from the second group. The efficiency of a pair is defined as the sum of the skill levels of the two students in the pair. Your objective is to maximize the minimum efficiency of all pairs. # Input The first line contains an integer n (1 le n le 1000) — the number of students in each group. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5), where a_i is the skill level of the i-th student in the first group. The third line contains n integers b_1, b_2, dots, b_n (1 le b_i le 10^5), where b_i is the skill level of the i-th student in the second group. # Output Print one integer — the maximum possible value of the minimum efficiency of all pairs. # Example Input: ``` 3 1 2 3 1 2 2 ``` Output: ``` 3 ``` # Note In the example, one optimal way to form the pairs is: - Pair the student with skill 1 from the first group with the student with skill 2 from the second group (efficiency 3). - Pair the student with skill 2 from the first group with the student with skill 2 from the second group (efficiency 4). - Pair the student with skill 3 from the first group with the student with skill 1 from the second group (efficiency 4). The minimum efficiency of these pairs is 3, which is the maximum possible minimum efficiency.","solution":"def maximize_min_efficiency(n, group1, group2): Returns the maximum possible value of the minimum efficiency of all pairs. # Sort the first group in ascending order group1.sort() # Sort the second group in descending order group2.sort(reverse=True) # Initialize the minimum efficiency to a large value min_efficiency = float(\'inf\') # Create the pairs and calculate the minimum efficiency for i in range(n): pair_efficiency = group1[i] + group2[i] min_efficiency = min(min_efficiency, pair_efficiency) return min_efficiency"},{"question":"You have a sequence of integers and you need to find the maximum sum of any contiguous subarray of integers in the sequence. This problem is known as the Maximum Subarray Problem or Kadane\'s Algorithm. # Input The input contains two lines: - The first line contains a single integer n (1 ≤ n ≤ 100000) – the length of the sequence. - The second line contains n space-separated integers a1, a2, ..., an (−10000 ≤ ai ≤ 10000) – the sequence elements. # Output Output a single integer, the maximum sum of any contiguous subarray of the given sequence. # Example Input 6<br> −2 1 −3 4 −1 2 1 −5 4 Output 6 # Explanation The contiguous subarray with the maximum sum is [4, −1, 2, 1], which has a sum of 6.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray. max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_input(input_str): Processes the input and returns the result for maximum subarray sum. lines = input_str.split(\'n\') n = int(lines[0].strip()) arr = list(map(int, lines[1].strip().split())) return max_subarray_sum(arr)"},{"question":"You are given an `n x n` grid with cells containing either a blank space `.` or a tree `T`. Your task is to determine if it is possible to traverse the grid from the top-left cell `(1,1)` to the bottom-right cell `(n,n)` without walking on any tree cells. You can only move right or down. Write a program that receives the size of the grid `n` and the grid itself as input, and prints \\"yes\\" if there is a path from `(1,1)` to `(n,n)`, or \\"no\\" otherwise. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ 100), the size of the grid. - The next `n` lines each contain `n` characters, either `.` indicating an empty cell or `T` indicating a tree. **Output:** - A single line containing \\"yes\\" if there is a path from `(1,1)` to `(n,n)`, and \\"no\\" otherwise. **Example:** ``` Input: 4 ..T. T..T ..TT ..T. Output: yes ``` ``` Input: 3 .T. T.T TT. Output: no ``` **Explanation:** In the first example, one possible path is: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4). In the second example, there is no path from `(1,1)` to `(n,n)` because the `T` cells block any possible route.","solution":"def can_traverse(grid): Determines if there is a path from the top-left to the bottom-right of the grid without stepping on any trees. Parameters: grid (list of list of str): n x n grid of \'.\' and \'T\' Returns: str: \\"yes\\" if there is a path, otherwise \\"no\\" n = len(grid) if grid[0][0] == \'T\' or grid[n-1][n-1] == \'T\': return \\"no\\" visited = [[False] * n for _ in range(n)] def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= n or grid[x][y] == \'T\' or visited[x][y]: return False if x == n - 1 and y == n - 1: return True visited[x][y] = True if dfs(x + 1, y) or dfs(x, y + 1): return True return False return \\"yes\\" if dfs(0, 0) else \\"no\\""},{"question":"You are given a list of integers. Your task is to determine if there exists a subsequence of the list such that the sum of the elements of the subsequence is equal to a given target sum. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The input consists of two lines: - The first line contains two integers n (1 le n le 1000) and target (0 le target le 10^6). - The second line contains n integers a_1, a_2, dots, a_n ( -10^6 le a_i le 10^6 ), representing the list of integers. Print \\"YES\\" if there exists a subsequence whose sum equals the target sum, otherwise print \\"NO\\". # Sample Input 1 ``` 5 10 1 2 3 7 5 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 5 22 1 2 3 7 5 ``` # Sample Output 2 ``` NO ```","solution":"def is_target_sum_possible(n, target, arr): Determines if there exists a subsequence of \'arr\' that sums up to \'target\'. :param n: length of the array :param target: target sum :param arr: list of integers :return: \\"YES\\" if such a subsequence exists, otherwise \\"NO\\" # Initialize a set for dynamic programming dp = {0} # Iterate through the array for num in arr: new_dp = dp.copy() for current_sum in dp: new_sum = current_sum + num if new_sum == target: return \\"YES\\" new_dp.add(new_sum) dp = new_dp return \\"NO\\""},{"question":"You are given a connected undirected graph with n vertices and m edges, numbered from 1 to n and 1 to m, respectively. You have to determine if there is a path from vertex 1 to vertex n, and calculate the shortest path length if it exists. The first line of the input contains two integers n (2 le n le 2 cdot 10^5) and m (1 le m le 2 cdot 10^5) — the number of vertices and edges in the graph. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v), indicating that there is an edge between vertex u and vertex v. Print a single line containing the length of the shortest path from vertex 1 to vertex n if it exists; otherwise, print -1. Examples: Input: ``` 4 4 1 2 1 3 3 4 2 4 ``` Output: ``` 2 ``` Input: ``` 6 3 1 2 3 4 5 6 ``` Output: ``` -1 ``` Notes: - In the first example, the shortest path from vertex 1 to vertex n (vertex 4) is either [1 -> 2 -> 4] or [1 -> 3 -> 4], both of length 2. - In the second example, there is no path connecting vertex 1 to vertex 6.","solution":"from collections import deque def shortest_path(n, m, edges): Determines the length of the shortest path from vertex 1 to vertex n in an undirected graph. :param n: Number of vertices :param m: Number of edges :param edges: List of edges, where each edge is represented as a tuple of two integers (u, v) :return: Length of the shortest path from vertex 1 to vertex n if it exists, otherwise -1 # Create an adjacency list for the graph graph = [ [] for _ in range(n + 1) ] for u, v in edges: graph[u].append(v) graph[v].append(u) # Breadth-first search (BFS) to find the shortest path def bfs(source, target): queue = deque([source]) visited = [False] * (n + 1) distance = [0] * (n + 1) visited[source] = True while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[current] + 1 queue.append(neighbor) if neighbor == target: return distance[neighbor] return -1 return bfs(1, n)"},{"question":"You need to implement a data compression algorithm for a special text format used in a secure messaging system. Each message in this system is represented by a string composed only of lowercase English letters and digits. The compression algorithm works by replacing contiguous substrings of repeated characters with the character followed by the count of repetitions. If the character appears only once, it will not be followed by a number. For example: - The input string \\"aabbbccdd\\" should be compressed to \\"a2b3c2d2\\". - The input string \\"abcdd\\" should be compressed to \\"abcd2\\". - The input string \\"aaabbaa\\" should be compressed to \\"a3b2a2\\". Your task is to write a Python function that takes a string as input and returns its compressed version. # Input - A single string `s` (1 ≤ |s| ≤ 100,000) composed of lowercase English letters and digits. # Output - A single string representing the compressed version of the input string. # Function Signature ```python def compress_string(s: str) -> str: pass ``` # Examples ```python print(compress_string(\\"aabbbccdd\\")) # Output: \\"a2b3c2d2\\" print(compress_string(\\"abcdd\\")) # Output: \\"abcd2\\" print(compress_string(\\"aaabbaa\\")) # Output: \\"a3b2a2\\" ``` # Constraints - The function should efficiently handle strings up to the maximum specified length. - Pay careful attention to edge cases, such as strings with no repeating characters or strings composed entirely of a single repeated character. # Additional Notes - Ensure your solution is optimized for both time and space complexity. - Consider using a linear time algorithm to traverse the input string and build the compressed version.","solution":"def compress_string(s: str) -> str: Compress the input string by replacing contiguous substrings of repeated characters with the character followed by the count of repetitions. if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count if count > 1 else \'\'}\\") current_char = char count = 1 # Append the last accumulated character and its count compressed.append(f\\"{current_char}{count if count > 1 else \'\'}\\") return \'\'.join(compressed)"},{"question":"You are given an array of integers. Each integer represents a type of magic spell. Each spell has the potential to either heal (if considered in a positive way) or harm (if considered in a negative way). You are to form a sequence by picking contiguous spells such that the sequence\'s total effect is positive and maximal among all possible contiguous subsequences. Formally, given an array of integers representing spell effects, find the sum of the maximum subarray with a positive net effect. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of spells. - The second line contains n integers, the spell effects a1, a2, ..., an (-1000 ≤ ai ≤ 1000). Output: - Print a single integer, the maximum possible positive net effect. If no positive net effect subsequence exists, print 0. Example: Input: 5 -3 1 4 -1 2 Output: 6 Explanation: The maximum positive net effect subarray is [1, 4, -1, 2], with a sum of 6. Note: - A subarray can be any contiguous segment of the original array. - If all possible subarrays have a non-positive net effect, return 0. Suggestion for approach: You might consider using a variant of Kadane\'s algorithm where you keep track of the maximum positive subarray sum encountered.","solution":"def max_positive_subarray_sum(n, arr): Finds the maximum sum of any contiguous subarray with a positive net effect. Parameters: n (int): Number of spells. arr (list of int): List of spell effects. Returns: int: Maximum possible positive net effect of any subarray. max_current = 0 max_global = 0 for num in arr: max_current = max(0, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"You are given an array of integers and a number of queries. Each query consists of two indices, and the goal is to find the sum of elements between those two indices (inclusive) in the array. The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries. The second line contains n integers: the elements of the array. The next q lines contain two integers l and r (1 le l le r le n), representing the indices for the range sum query. Indices are 1-based. For each query, print the sum of the array elements from index l to index r, inclusive.","solution":"def range_sum(array, queries): Returns the sum of elements between the given ranges (inclusive) for each query. :param array: List[int], list of integers :param queries: List[Tuple[int, int]], list of queries with tuples (l, r) :return: List[int], sum of elements for each query # Compute prefix sums prefix_sums = [0] * (len(array) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] # Answer the queries using the prefix sums results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results"},{"question":"Max is organizing a coding competition and has a sequence of n non-negative integers. For the competition, he needs to determine how many subarrays have a bitwise AND greater than zero. A subarray is a contiguous part of the array. The bitwise AND of an array is obtained by ANDing all its elements. For example, given an array [4, 6, 7], the bitwise AND of the array is 4 & 6 & 7. The task is to write a program that, given a sequence of non-negative integers, returns the count of subarrays whose bitwise AND is greater than zero. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), representing the number of elements in the sequence. The second line contains n space-separated non-negative integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), representing the elements of the sequence. The output should be a single integer, the number of subarrays with a bitwise AND greater than zero. Example: Input: 5 1 2 3 4 5 Output: 9 Explanation: - The subarrays with a bitwise AND greater than zero are: [1], [2], [3], [4], [5], [1,2], [1,2,3], [3,4], [3,4,5], [4,5]","solution":"def count_subarrays_with_and_greater_than_zero(n, arr): result = 0 length = 0 for i in range(n): if arr[i] == 0: length = 0 else: length += 1 result += length return result"},{"question":"You are given a list of words. Your task is to find out the number of distinct anagrams in the list. Two words are considered anagrams if they can be formed by rearranging the letters of each other. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other, but \\"listen\\" and \\"listens\\" are not. The first line of the input contains a single integer n (1 le n le 10^5), the number of words. The next n lines each contain a single word consisting of lowercase English letters. Each word has length at most 100. Output a single integer, the number of distinct anagrams in the given list. Input: ``` 6 listen silent enlist inlets google gogole ``` Output: ``` 3 ``` Explanation: - \\"listen\\", \\"silent\\", \\"enlist\\", and \\"inlets\\" are all anagrams of each other. - \\"google\\" and \\"gogole\\" are anagrams of each other. - Therefore, there are 3 distinct groups of anagrams.","solution":"def count_distinct_anagrams(words): Returns the number of distinct anagrams in the list of words. sorted_word_set = {\\"\\".join(sorted(word)) for word in words} return len(sorted_word_set)"},{"question":"Goblins and wizards love playing with colorful jewels. They have two strings `jewels` and `stones`, which are sequences of characters representing types of jewels and stones respectively. Each character in `jewels` is unique and represents a different type of jewel. The string `stones` consists of characters where each character represents the type of a stone. Some of these stones may also be jewels. Your task is to determine how many of the stones you have are also jewels. # Input: - The first line of the input contains the string `jewels` (1 ≤ |jewels| ≤ 52). Each character in `jewels` is unique and consists of only uppercase and lowercase English letters. - The second line of the input contains the string `stones` (1 ≤ |stones| ≤ 10^4). Each character in `stones` consists of only uppercase and lowercase English letters. # Output: - Print a single integer, the number of stones that are also jewels. # Example: Input: ``` aA aAAbbbb ``` Output: ``` 3 ``` Input: ``` z ZZ ``` Output: ``` 0 ``` # Explanation: In the first example, there are three stones (\'a\', \'A\', \'A\') that are also jewels. In the second example, there are no stones that are jewels.","solution":"def num_jewels_in_stones(jewels, stones): Returns the number of stones that are also jewels. :param jewels: A string with unique characters representing jewels :param stones: A string where each character represents a stone :return: An integer count of how many stones are jewels jewels_set = set(jewels) count = 0 for stone in stones: if stone in jewels_set: count += 1 return count"},{"question":"You are given two n-sized arrays, p and q, where p[i] represents the price of the ith product and q[i] represents the quantity of the ith product. Your task is to determine the maximum revenue generated by selling exactly m distinct products. Revenue is calculated as the price of the product multiplied by its quantity. However, you can only sell products that have a price greater than or equal to a given threshold k. Write a function that takes in four parameters: the number of products n (1 ≤ n ≤ 100,000), the number of products to sell m (1 ≤ m ≤ n), a list p of n integers (1 ≤ p[i] ≤ 100,000) representing the prices of the products, a list q of n integers (1 ≤ q[i] ≤ 100,000) representing the quantity of the products, and the threshold price k (1 ≤ k ≤ 100,000). The function should return the maximum revenue generated by selling exactly m distinct products with prices greater than or equal to k. If it is not possible to sell m products, return -1. Input format: - The first line contains three integers: n, m, and k. - The second line contains n space-separated integers representing the array p. - The third line contains n space-separated integers representing the array q. Output format: - Print a single integer representing the maximum revenue or -1 if it is not possible to sell m distinct products. Example input: ``` 5 3 50 60 20 50 30 70 10 40 20 50 30 ``` Example output: ``` 4000 ``` Explanation: - Products with prices 60, 50, and 70 are chosen because their prices meet the threshold of 50. - The revenue is calculated as (60 * 10) + (50 * 20) + (70 * 30) = 600 + 1000 + 2100 = 3700.","solution":"def max_revenue(n, m, k, p, q): Returns the maximum revenue generated by selling exactly m distinct products with prices greater than or equal to k. If it\'s not possible, returns -1. # Filter products based on the price threshold k filtered_products = [(price, quantity) for price, quantity in zip(p, q) if price >= k] # If there are less than m products meeting the price threshold, return -1 if len(filtered_products) < m: return -1 # Calculate revenue for each product as price * quantity revenues = [price * quantity for price, quantity in filtered_products] # Sort revenues in descending order revenues.sort(reverse=True) # Return the sum of the top m revenues return sum(revenues[:m])"},{"question":"You are given a list of n towns, each connected by bidirectional roads, forming a connected and undirected graph. Each town promotes a unique product and has a marketing score associated with that product. The marketing score for each town is known. A company plans to start marketing from a specific town and then move to other towns following these bidirectional roads to maximize the total marketing score collected. The objective is to find the maximum marketing score that can be collected starting from any town and traveling to other towns without visiting any town more than once. Input format: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of towns. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the marketing scores for each town. - The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a bidirectional road between towns u and v. Output format: - Print a single integer representing the maximum marketing score that can be collected starting from any town and traveling to other towns. Example Input: ``` 4 10 20 30 40 1 2 2 3 3 4 ``` Example Output: ``` 100 ``` Explanation: - Starting from town 4, you can travel through town 3 to town 2, and finally to town 1, collecting marketing scores of 40 + 30 + 20 + 10 = 100.","solution":"def max_marketing_score(n, scores, roads): from collections import defaultdict, deque def bfs(start): queue = deque([(start, scores[start - 1])]) visited = set([start]) max_score = scores[start - 1] while queue: node, score_so_far = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) new_score = score_so_far + scores[neighbor - 1] max_score = max(max_score, new_score) queue.append((neighbor, new_score)) return max_score graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Perform BFS/DFS from every node max_global_score = 0 for i in range(1, n + 1): max_global_score = max(max_global_score, bfs(i)) return max_global_score"},{"question":"A software company is testing a new logging system where each log entry has a unique identifier and a timestamp. Each log message follows this format: `\\"[id] msg\\"`, where `id` is the unique identifier and `msg` is the log message content. The logs are stored in the order they were received, but because of delays, the timestamps might not always be in increasing order. The company wants to investigate the logs and determine if for an array of n log entries, the entries were received in a mostly increasing order. For this, a log is considered well-ordered if the number of misplaced logs (logs that have a timestamp earlier than the log just before it) does not exceed a given threshold k. Write a function `check_logs(logs: List[str], k: int) -> bool` that returns `True` if the number of misplaced logs is less than or equal to `k`, and `False` otherwise. Here, logs are given as a list of strings where each string represents a log entry in the format specified. # Function Signature ```python def check_logs(logs: List[str], k: int) -> bool: ``` # Input - `logs` (List[str]): A list of n log entries in the format `\\"[id] timestamp msg\\"`, where `id` is a unique identifier and `timestamp` is a non-negative integer. - `k` (int): The maximum number of misplaced logs allowed for the logs to be considered well-ordered. # Output - Return a boolean `True` if the logs are considered well-ordered, otherwise return `False`. # Example ```python logs = [\\"[1] 10 Started\\", \\"[2] 20 Running\\", \\"[3] 30 Completed\\", \\"[4] 25 Review\\"] k = 1 print(check_logs(logs, k)) # Output: True logs = [\\"[1] 10 Started\\", \\"[2] 30 Running\\", \\"[3] 20 Completed\\", \\"[4] 25 Review\\"] k = 1 print(check_logs(logs, k)) # Output: False ``` # Note In the first example, there\'s only one misplaced log (\\"[4] 25 Review\\"), so `True` is returned. In the second example, there are two misplaced logs (\\"[3] 20 Completed\\" and \\"[4] 25 Review\\"), so `False` is returned.","solution":"from typing import List def check_logs(logs: List[str], k: int) -> bool: misplaced_count = 0 previous_timestamp = -1 # Initialize to a value that is less than any legitimate timestamp for log in logs: timestamp = int(log.split()[1]) if timestamp < previous_timestamp: misplaced_count += 1 if misplaced_count > k: return False previous_timestamp = timestamp return True"},{"question":"Given a list of integers, perform a \\"reverse window sort\\" to determine the maximum length of a contiguous subsequence that can be obtained after performing the following operation: reverse any contiguous subarray of the elements. Note that you are allowed to perform this reverse operation only once. The first line of input contains a single integer n (1 le n le 100) — the size of the array. The second line of input contains n space-separated integers a_i (1 le a_i le 1000) — the elements of the array. Return the maximum length of the longest contiguous subsequence that is sorted in non-decreasing order after reversing at most one subarray. In the first example, if you reverse the subarray from the second to the fourth element, you get [1, 2, 3, 4, 5], which is fully sorted. In the second example, no single reverse operation can help in achieving a contiguous sorted subsequence longer than 3. The subsequence [3, 4, 5] is the longest subsequence that can be sorted by reversing the subarray between the second and the fifth element.","solution":"def max_length_sorted_after_one_reverse(n, arr): def is_sorted(sub): return all(sub[i] <= sub[i+1] for i in range(len(sub)-1)) max_len = 1 # the minimum length sequence we can have is 1 for l in range(n): for r in range(l, n): reversed_subarray = arr[:l] + arr[l:r+1][::-1] + arr[r+1:] current_len = len([i for i in range(n) if is_sorted(reversed_subarray[i:])]) max_len = max(max_len, current_len) return max_len"},{"question":"A veteran coder at your company loves to work with binary trees and has devised an interesting challenge for you. A binary tree is considered a \\"Perfect Binary Tree\\" if all levels are completely filled. Given the root of a binary tree, write a function that determines whether the tree is a perfect binary tree. # Constraints: - The number of nodes in the binary tree will not exceed 10^4. - The value of each node is a unique integer within the range of signed 32-bit integers. # Input: - A binary tree root node. # Output: - Return `True` if the given binary tree is a perfect binary tree, and `False` otherwise. # Example: Given the binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` Your function should return `True` since it is a perfect binary tree. Given the binary tree: ``` 1 / 2 3 / 4 5 ``` Your function should return `False` since it is not a perfect binary tree (the last level is not completely filled). # Function Signature: ```python def is_perfect_binary_tree(root: TreeNode) -> bool: # Your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_perfect_binary_tree(root: TreeNode) -> bool: if not root: return True from collections import deque queue = deque([(root, 1)]) current_level = 1 level_nodes = 0 nodes_on_level = [] while queue: node, level = queue.popleft() if level != current_level: nodes_on_level.append(level_nodes) current_level = level level_nodes = 0 level_nodes += 1 if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) nodes_on_level.append(level_nodes) # A perfect binary tree has 2^(level-1) nodes at level for i in range(len(nodes_on_level) - 1): if nodes_on_level[i] != 2 ** i: return False return nodes_on_level[-1] == 2 ** (len(nodes_on_level) - 1)"},{"question":"You are given a weighted directed graph with n nodes and m edges. Each node is assigned a value v[i]. A path\'s \\"cost\\" is defined as the maximum value among the nodes on that path subtracted by the smallest value among the nodes on that path. Your task is to find the path with the maximum possible cost. The first line contains two positive integers n, m (1 leq n, m leq 100,000), denoting that the graph has n nodes and m directed edges. The second line contains n integers v[1], v[2], ldots, v[n] (1 leq v[i] leq 10^9) describing the value assigned to each node. Then m lines follow. Each line contains two integers x, y (1 leq x, y leq n), describing a directed edge from x to y. Note that there can be multiple edges between x and y, and nodes can have edges to themselves. Output a single integer denoting the maximum cost of any path in the graph. If there is no valid path, output 0 instead. In the first sample, if the values of nodes and edges are such that the path from node 1 to node 5 has the highest cost of 10 (where value of nodes on the path vary from minimum 1 to maximum 11), the output should be 10.","solution":"from collections import defaultdict, deque def find_max_path_cost(n, m, values, edges): graph = defaultdict(list) for x, y in edges: graph[x].append(y) # Initialize arrays to keep track of min and max values encountered from each node min_value = [float(\'inf\')] * (n + 1) max_value = [float(\'-inf\')] * (n + 1) def bfs(node): queue = deque([(node, values[node - 1], values[node - 1])]) min_value[node] = values[node - 1] max_value[node] = values[node - 1] while queue: current, min_val, max_val = queue.popleft() for neighbor in graph[current]: new_min_val = min(min_val, values[neighbor - 1]) new_max_val = max(max_val, values[neighbor - 1]) if min_value[neighbor] == float(\'inf\') or new_min_val < min_value[neighbor]: queue.append((neighbor, new_min_val, new_max_val)) min_value[neighbor] = new_min_val max_value[neighbor] = new_max_val for node in range(1, n + 1): if min_value[node] == float(\'inf\'): bfs(node) max_cost = float(\'-inf\') for node in range(1, n + 1): if min_value[node] != float(\'inf\'): max_cost = max(max_cost, max_value[node] - min_value[node]) return max_cost if max_cost != float(\'-inf\') else 0 # Example usage n = 5 m = 5 values = [1, 5, 3, 11, 9] edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)] print(find_max_path_cost(n, m, values, edges)) # Output: 10"},{"question":"A robot is placed in a 2D grid at the position (0, 0). The grid has infinite rows and columns, and the robot can perform the following moves: - \'U\' (move up one cell) - \'D\' (move down one cell) - \'L\' (move left one cell) - \'R\' (move right one cell) The robot starts at the position (0, 0) and follows a string of moves given as input. Your task is to find the final position of the robot after executing all the moves in the input string. Write a function `final_position(moves: str) -> (int, int)` that takes a string of moves as input and returns a tuple of two integers representing the final position (x, y) of the robot. # Input - A string `moves` (1 ≤ |moves| ≤ 10^5) consisting of characters \'U\', \'D\', \'L\', \'R\'. # Output - A tuple of two integers representing the final position of the robot in the grid. # Example Example 1 ```python moves = \\"UUDDLRLR\\" assert final_position(moves) == (0, 0) ``` Example 2 ```python moves = \\"UUUUU\\" assert final_position(moves) == (0, 5) ``` Example 3 ```python moves = \\"DDDRRR\\" assert final_position(moves) == (3, -3) ``` Write a function to solve the problem. Ensure that your code handles the edge cases and performs efficiently for large input sizes.","solution":"def final_position(moves: str) -> (int, int): Returns the final position of the robot after executing all the moves in the input string. Arguments: moves: str - A string consisting of characters \'U\', \'D\', \'L\', \'R\' representing the moves. Returns: (int, int) - A tuple representing the final position (x, y) of the robot. x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"A software development company assigns tasks to its developers on a daily basis. Each task has a specific time duration necessary to complete it. The company aims to distribute tasks such that the workload among developers is even. You are given the number of developers and the list of tasks with their durations. Write a program to determine the minimum possible maximum workload any single developer will have if the tasks are distributed optimally. The first line of the input contains an integer n (1 ≤ n ≤ 50) — the number of developers. The second line contains an integer m (1 ≤ m ≤ 200) — the number of tasks. The third line contains m integers, where each integer ti (1 ≤ ti ≤ 100) represents the duration of the i-th task. Output a single integer — the minimum possible maximum workload of any single developer. Example: Input: 3 4 10 20 30 40 Output: 40 Explanation: One optimal distribution is as follows: - Developer 1: 40 - Developer 2: 30 + 10 - Developer 3: 20","solution":"def min_max_workload(n, m, tasks): tasks.sort(reverse=True) def can_distribute(mid): workloads = [0] * n for task in tasks: workloads.sort() if workloads[0] + task > mid: return False workloads[0] += task return True left, right = max(tasks), sum(tasks) while left < right: mid = (left + right) // 2 if can_distribute(mid): right = mid else: left = mid + 1 return left # Example usage n = 3 m = 4 tasks = [10, 20, 30, 40] print(min_max_workload(n, m, tasks)) # Output: 40"},{"question":"You are given a list of integers representing the heights of a series of buildings. Your task is to determine the total amount of rainwater that would be trapped between these buildings after a heavy rain. The rainwater trapped at a building is the amount of water that can be held above the building which is determined by the minimum of the highest bars on the left and the right minus the height of the current building. Input consists of two lines. The first line contains an integer n (1 leq n leq 100,000), the number of buildings. The second line contains n non-negative integers h_1, h_2, ldots, h_n (0 leq h_i leq 200,000) representing the height of each building. Output a single integer: the maximum amount of rainwater that can be trapped between the buildings. For example: Input: ``` 6 0 1 0 2 1 0 ``` Output: ``` 1 ```","solution":"def trap_rainwater(heights): Calculate the total amount of rainwater trapped between buildings. :param heights: List of integers representing the heights of the buildings. :return: Integer representing the total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given an array of integers representing the heights of trees in a row, you need to determine whether you can cut down some trees (not necessarily all) such that the remaining trees are in non-decreasing order of height from left to right. You can choose to cut down any number of trees and you should return the minimum number of cuts required. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of trees. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10000), the heights of the trees. Output: - Return a single integer, the minimum number of cuts required to make the heights of the remaining trees non-decreasing. Example: Input: 6 3 7 6 2 8 10 Output: 2 Explanation: One possible solution is to cut down the trees with heights 7 and 6, resulting in the sequence 3 2 8 10, which is non-decreasing. There might be other solutions that also require 2 cuts, but fewer cuts are not possible for this input.","solution":"def min_cuts_to_non_decreasing(trees): n = len(trees) dp = [1] * n for i in range(1, n): for j in range(i): if trees[i] >= trees[j]: dp[i] = max(dp[i], dp[j] + 1) return n - max(dp)"},{"question":"A cybersecurity company is developing a system to monitor incoming packets in a computer network. Each incoming packet has a timestamp, source IP address, and destination IP address. The goal is to identify potential Distributed Denial of Service (DDoS) attacks. A DDoS attack is suspected if, within any 5-minute window, a single source IP address sends packets to more than `k` distinct destination IP addresses. You have been asked to write a function to determine whether a DDoS attack has been detected based on the given packets. # Input - An integer `k` (1 le k le 10^5) — the threshold for distinct destination IP addresses in a 5-minute window. - An integer `n` (1 le n le 10^6) — the number of packets. - An array of `n` packets, where each packet is represented as a tuple `(timestamp, source_ip, destination_ip)`. Timestamps are given as integers representing Unix time (the number of seconds since January 1, 1970), and all timestamps in the input are in non-decreasing order. Source and destination IP addresses are given as strings. # Output - Return a list of all source IP addresses that are suspected of a DDoS attack. The list should be sorted in ascending order. # Example ```python k = 3 n = 7 packets = [ (1609459200, \'192.168.1.1\', \'10.0.0.1\'), (1609459260, \'192.168.1.1\', \'10.0.0.2\'), (1609459320, \'192.168.1.1\', \'10.0.0.3\'), (1609459380, \'192.168.1.1\', \'10.0.0.4\'), (1609459440, \'192.168.1.2\', \'10.0.0.1\'), (1609459500, \'192.168.1.2\', \'10.0.0.2\'), (1609459560, \'192.168.1.3\', \'10.0.0.3\') ] Output: [\'192.168.1.1\'] ``` # Note In this example: - The source IP address \'192.168.1.1\' sends packets to four different destination IP addresses within a 5-minute window, which exceeds the given threshold `k=3`, indicating a potential DDoS attack. - The source IP addresses \'192.168.1.2\' and \'192.168.1.3\' do not exceed `k` distinct destination IPs in any 5-minute window. Therefore, only \'192.168.1.1\' is returned.","solution":"from collections import defaultdict, deque def detect_ddos(k, n, packets): Detects DDoS attack based on the given packets. Parameters: k (int): The threshold for distinct destination IP addresses in a 5-minute window. n (int): The number of packets. packets (list of tuple): List of packets where each packet is represented as (timestamp, source_ip, destination_ip). Returns: list: List of source IP addresses that are suspected of a DDoS attack, sorted in ascending order. window_size = 300 # 5 minutes in seconds # Dictionary to store the packets in the current window for each source IP packet_window = defaultdict(deque) # Dictionary to store the unique destination IPs in the current window for each source IP dest_ips = defaultdict(set) # Set to store suspected source IPs suspected_ips = set() for timestamp, source_ip, destination_ip in packets: # Remove old packets out of the current 5-minute window while packet_window[source_ip] and timestamp - packet_window[source_ip][0][0] > window_size: old_timestamp, old_dest_ip = packet_window[source_ip].popleft() dest_ips[source_ip].discard(old_dest_ip) # Add new packet to the window packet_window[source_ip].append((timestamp, destination_ip)) dest_ips[source_ip].add(destination_ip) # Check if the number of distinct destination IPs exceeds the threshold if len(dest_ips[source_ip]) > k: suspected_ips.add(source_ip) # Return the sorted list of suspected IPs return sorted(suspected_ips)"},{"question":"Your task involves calculating some properties on a sequence of numbers. A sequence of integers is given, and you need to handle several queries, each asking you to determine the minimum value in a specific subarray of the sequence. # Input - The first line contains two integers `n` and `q` (1 leq n, q leq 200,000), where `n` represents the size of the array and `q` the number of queries. - The second line contains `n` space-separated integers a_i (1 leq a_i leq 10^9) which are the elements of the array. - Each of the following `q` lines contains two integers `l` and `r` (1 leq l leq r leq n), representing the endpoints (inclusive) of the subarray for which the minimum value is to be determined. # Output For each query, print the minimum value in the subarray `a[l..r]`. # Example Input ``` 5 3 1 3 4 2 5 1 3 2 5 3 3 ``` Output ``` 1 2 4 ``` # Note: - Efficient handling of queries on such large arrays is crucial. Consider preprocessing techniques to achieve optimal performance.","solution":"def preprocess_min_values(arr): Preprocess the input array to allow efficient querying for the minimum value in any subarray. Using a Sparse Table for Range Minimum Query (RMQ). import math n = len(arr) log = int(math.log2(n)) + 1 st = [[0] * log for _ in range(n)] for i in range(n): st[i][0] = arr[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = min(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st def query_min(l, r, st): Query the minimum value in the subarray [l, r] using the preprocessed Sparse Table. import math j = int(math.log2(r - l + 1)) return min(st[l][j], st[r - (1 << j) + 1][j]) def min_in_subarrays(n, q, arr, queries): results = [] st = preprocess_min_values(arr) for l, r in queries: results.append(query_min(l - 1, r - 1, st)) return results"},{"question":"You are given a string containing an expression with parentheses and variable names, and you need to evaluate how many valid sub-expressions (containing matched pairs of parentheses) can be formed from the given string. A valid sub-expression is a contiguous substring that contains balanced and correctly ordered parentheses. For example, in the string \\"a(b)c(de)f\\", the valid sub-expressions are \\"()\\", \\"(b)\\", \\"(de)\\". So there are 3 valid sub-expressions. The first line of the input contains integer n (1 le n le 100000) — the length of the string. The second line contains the string of length n. The string will only contain lowercase Latin letters, digits, and parentheses \'(\', \')\'. Print an integer representing the number of valid sub-expressions (valid pairs of parentheses) in the given string. **Example:** Input: ``` 12 a(b)c(de)f(g)h ``` Output: ``` 3 ``` **Explanation:** The valid sub-expressions are \\"(b)\\", \\"(de)\\", and \\"(g)\\" hence there are 3 valid sub-expressions in the given string.","solution":"def count_valid_subexpressions(s): Returns the count of valid sub-expressions containing balanced parentheses. stack = [] valid_count = 0 for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() valid_count += 1 return valid_count"},{"question":"There is a large company that manages many projects with different employees assigned to them. Each project has a unique ID, and each employee has a unique ID as well. Each employee can be assigned to multiple projects and each project can have multiple employees assigned to it. Your task is to implement a function that determines the smallest team size required for a given project, taking into consideration that an employee can work only for a limited number of hours across all projects they are assigned to. Given the number of hours an employee can work on a project assignment, a list of employees with their assigned projects, and a dictionary representing the number of hours each employee can work, determine the minimum number of employees required to complete at least H hours of the given project. Input format: The first line contains an integer E, the number of employees. The second line contains an integer H, the required hours to be completed for the project. The third line contains a dictionary where keys are employee IDs and values are the total hours each employee can work. The fourth line contains a dictionary where keys are project IDs and values are a list of employee IDs assigned to that project. The fifth line contains the ID of the project for which you need to calculate the minimum team size. Output format: Print a single integer representing the minimum number of employees needed to complete the project. Example: Input: 4 40 {1: 10, 2: 20, 3: 15, 4: 25} {101: [1, 2], 102: [3, 4], 103: [1, 3, 4]} 103 Output: 2 Explanation: For project 103, we need to complete 40 hours. The employees assigned to project 103 are 1, 3, and 4. Combining employee 4\'s 25 hours with employee 3\'s 15 hours gives exactly 40 hours with 2 employees. Therefore, the minimum number of employees required is 2.","solution":"def min_employees_for_project(E, H, employee_hours, project_assignments, project_id): Determines the minimum number of employees required to complete at least H hours of the given project. Args: E (int): Number of employees. H (int): Required hours for the project. employee_hours (dict): Dictionary with employee ID as key and total hours they can work as value. project_assignments (dict): Dictionary with project ID as key and list of assigned employee IDs as value. project_id (int): ID of the project to calculate the minimum team size. Returns: int: Minimum number of employees required to complete at least H hours for the specified project. available_employees = project_assignments.get(project_id, []) available_hours = [employee_hours[emp] for emp in available_employees] # Sort the hours in descending order to start with employees who can contribute the most available_hours.sort(reverse=True) total_hours = 0 num_employees = 0 for hours in available_hours: total_hours += hours num_employees += 1 if total_hours >= H: return num_employees # If we exit the loop, it means we couldn\'t gather enough hours return -1"},{"question":"Write a function that converts a given integer to a Roman numeral. The integer will be in the range from 1 to 3999. The standard Roman numerals are: ```text Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Roman numerals are usually written largest to smallest from left to right. However, the numeral for 4 is not `IIII`. Instead, the number 4 is written as `IV`. The number 9 is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given an integer, convert it to a Roman numeral. # Input A single integer n (1 ≤ n ≤ 3999). # Output A single string representing the Roman numeral of the given integer. # Example **Input:** ```text 9 ``` **Output:** ```text IX ``` **Input:** ```text 58 ``` **Output:** ```text LVIII ``` **Input:** ```text 1994 ``` **Output:** ```text MCMXCIV ```","solution":"def int_to_roman(n): Convert an integer to a Roman numeral. :param n: Integer to convert (1 <= n <= 3999) :return: Roman numeral as a string val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while n > 0: for _ in range(n // val[i]): roman_num += syb[i] n -= val[i] i += 1 return roman_num"},{"question":"A festival organizer has a list of participants, each with a unique ID and a specific rating. The objective is to form teams with participants placed in such way that the rating difference between any two members in each team is minimized. The first step is to sort the participants based on their ratings. After sorting, you need to create teams of three members. Each successive set of three participants will form a team. However, if the number of participants is not a multiple of three, then two participants will be placed in the last team instead of three. Write a program to organize the participants into teams such that the range (the difference between the maximum and minimum ratings) within each team is minimized. Print the teams formed along with their ratings. The input consists of: - An integer n (1 ≤ n ≤ 10^4) — the total number of participants. - A list of n integers, where each integer is the rating of a participant. The output should consist of: - Teams formed, each on a new line. Each team should be represented by participant ratings separated by commas and sorted in ascending order. Example Input: 7 3 6 2 8 7 5 9 Example Output: 2, 3, 5 6, 7, 8 9","solution":"def organize_teams(n, ratings): Organizes participants into teams to minimize the range in each team. Parameters: n (int): The number of participants. ratings (list of int): The ratings of the participants. Returns: list of lists: The teams formed with minimized rating ranges. ratings.sort() teams = [] i = 0 while i < n: if n - i > 3: teams.append(ratings[i:i+3]) i += 3 else: teams.append(ratings[i:]) break return teams # Example Usage n = 7 ratings = [3, 6, 2, 8, 7, 5, 9] teams = organize_teams(n, ratings) for team in teams: print(\', \'.join(map(str, team)))"},{"question":"Louise the Programmer has a 2D grid of size n times m, where each cell can be either land (denoted by 1) or water (denoted by 0). Louise wants to identify the number of distinct islands in the grid. An island is a connected group of land cells (1s), connected horizontally or vertically. Diagonal connections are not allowed. For example, in the grid below: ``` 1 1 0 0 1 0 0 0 1 ``` There are two distinct islands. Write a function that takes the dimensions of the grid n and m, and the grid itself as input, and returns the number of distinct islands. # Input - The first line contains two integers n and m (1 leq n, m leq 1000). - The next n lines contain m integers each (either 0 or 1), representing the grid. # Output - Print a single integer, the number of distinct islands in the grid. # Example Input: ``` 3 4 1 1 0 0 0 1 0 0 0 0 1 1 ``` Output: ``` 2 ``` # Note In the example, there are two islands: one at the top left corner and one at the bottom right corner.","solution":"def num_islands(n, m, grid): Returns the number of distinct islands in the grid. Args: n : int : number of rows m : int : number of columns grid : List[List[int]] : 2D grid representing land (1) and water (0) Returns: int : number of distinct islands def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # mark the cell as visited by setting it to 0 # recursively visit all neighboring cells (up, down, left, right) dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) num_islands = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: num_islands += 1 dfs(i, j) return num_islands"},{"question":"In a city, there are n buildings arranged in a straight line. Each building i has a certain height hi. The city administration wants to build a new skyscraper. The skyline of the city with the new skyscraper must follow these three constraints: 1. The height of the new skyscraper should be the highest in the city. 2. The new skyscraper can only be built in an open plot which is represented by 0 in the list of heights. There is only one open plot in the city. 3. If there are multiple possibilities for the height of the new skyscraper, it must be just taller than the current tallest building in the city by minimum possible value which is 1 unit. Given an array of integers, where each integer represents the height of a building and one of the integers is 0, write a function to find the height of the new skyscraper that satisfies the above constraints. # Function Signature `def new_skyscraper_height(buildings: List[int]) -> int:` # Input - List of integers `buildings` where `buildings[i]` represents the height of building i. The constraints are `1 ≤ len(buildings) ≤ 100` and `0 ≤ buildings[i] ≤ 1000`. # Output - Return an integer representing the height of the new skyscraper. # Example ```python print(new_skyscraper_height([3, 1, 2, 0, 4, 6])) # Output: 7 print(new_skyscraper_height([0, 2, 3, 4, 5])) # Output: 6 print(new_skyscraper_height([1, 0, 1, 1, 1])) # Output: 2 print(new_skyscraper_height([0])) # Output: 1 print(new_skyscraper_height([5, 0, 7])) # Output: 8 ``` # Constraints - Exactly one element in `buildings` list will be 0 indicating the open plot for the new skyscraper. - The new height must be exactly 1 unit taller than the tallest of the existing buildings.","solution":"from typing import List def new_skyscraper_height(buildings: List[int]) -> int: Returns the height of the new skyscraper which should be just taller than the tallest existing building by the minimum possible value (1 unit). # Find the maximum height of the existing buildings max_height = max(buildings) # The new skyscraper should be just 1 unit taller than the current tallest building return max_height + 1"},{"question":"You are given an array of integers and an integer k. Your task is to find the k-th largest element in the array. Notice that it is the k-th largest element in the sorted order, not the k-th distinct element. Write a function `findKthLargest(nums, k)` that takes an array of integers `nums` and an integer `k`, and returns the k-th largest element in the array. # Input: - An integer array `nums` (1 <= nums.length <= 10^4, -10^4 <= nums[i] <= 10^4). - An integer k (1 <= k <= nums.length). # Output: - An integer representing the k-th largest element in the array. # Example: Example 1: ``` Input: nums = [3, 2, 1, 5, 6, 4], k = 2 Output: 5 ``` Example 2: ``` Input: nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4 Output: 4 ``` # Constraints: - The array may contain duplicate elements. - The solution must have a time complexity better than O(n log n).","solution":"import heapq def findKthLargest(nums, k): Finds the k-th largest element in the given array nums. Args: nums (List[int]): The list of integers. k (int): The k-th position to find the largest element. Returns: int: The k-th largest element in the array. # Use a min heap to keep track of the k largest elements return heapq.nlargest(k, nums)[-1]"},{"question":"Alice is participating in a treasure hunt game. The treasure map is represented as an undirected graph with `n` nodes and `m` edges. Each node represents a potential location, and each edge represents a path between two locations. Alice can start at any node and move to any adjacent node via the edges. The treasure is hidden at one of the locations, and Alice knows the probability `p_i` that the treasure is hidden at the i-th location. Alice wants to determine the maximum probability of finding the treasure if she can visit up to `k` locations in succession. Alice can plan her route optimally based on the given probabilities and paths. Help Alice determine the maximum probability of finding the treasure. # Input - The first line contains three integers `n`, `m`, and `k` (1 le n le 50, 0 le m le 100, 1 le k le n) – the number of nodes, the number of edges, and the maximum number of locations Alice can visit in succession. - The second line contains `n` space-separated floating-point numbers, where `p_i` (0 le p_i le 1) is the probability that the treasure is at node `i`. - The following `m` lines each contain two integers `u` and `v` (1 le u, v le n, `u` != `v`), indicating there is an edge between node `u` and node `v`. # Output - Output a single floating-point number – the maximum probability of finding the treasure, accurate to at least six decimal places. # Example Input: ``` 4 3 2 0.3 0.2 0.4 0.1 1 2 2 3 3 4 ``` Output: ``` 0.400000 ``` Explanation: Alice can achieve her maximum probability by starting at node 3, where the probability of finding the treasure is 0.4. She can only visit one more location, and moving to another node with less probability will not increase her chance. # Note - Alice can choose to stay at one location if visiting other locations does not increase the probability of finding the treasure. - If there are multiple paths to choose from, Alice will always choose the path that maximizes the probability.","solution":"def max_probability(n, m, k, probabilities, edges): from collections import deque from heapq import heappush, heappop # Convert the edge list to an adjacency list adj = {i: [] for i in range(n)} for u, v in edges: adj[u-1].append(v-1) adj[v-1].append(u-1) # function to find maximum treasure probability using BFS with priority queue def bfs_max_prob(start): heap = [(-probabilities[start], start, 0)] visited = set() max_prob = 0 while heap: prob, node, depth = heappop(heap) prob = -prob if depth > k: continue if (node, depth) in visited: continue visited.add((node, depth)) max_prob = max(max_prob, prob) for neighbor in adj[node]: if (neighbor, depth+1) not in visited: heappush(heap, (-probabilities[neighbor], neighbor, depth + 1)) return max_prob # Try start from every node and find the maximum probability max_treasure_prob = 0 for start_node in range(n): max_treasure_prob = max(max_treasure_prob, bfs_max_prob(start_node)) return round(max_treasure_prob, 6)"},{"question":"Write a function robotPath(grid) that takes in a grid representing a 2D maze and determines whether there exists a path for a robot to move from the top-left corner to the bottom-right corner. The robot can only move right or down. The grid is represented as an M x N matrix, where each cell is either 0 (an obstacle) or 1 (free space). The robot starts at cell (0,0) and must reach cell (M-1,N-1). Your function should return True if a path exists, and False otherwise. **Function signature:** ```python def robotPath(grid: List[List[int]]) -> bool: ``` # Constraints: - 1 <= M, N <= 100 - grid[i][j] will be either 0 (an obstacle) or 1 (free space). - The initial (0,0) and final (M-1,N-1) cells are always 1. # Example: **Input:** ``` grid = [[1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]] ``` **Output:** `True` **Explanation:** The path followed by the robot could be [ (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) ]. **Input:** ``` grid = [[1, 0, 0], [0, 1, 0], [0, 1, 1]] ``` **Output:** `False` **Explanation:** There is no path for the robot to reach the cell (2,2) starting from (0,0).","solution":"def robotPath(grid): M, N = len(grid), len(grid[0]) visited = [[False]*N for _ in range(M)] def dfs(x, y): if x == M-1 and y == N-1: return True visited[x][y] = True # Move down if x+1 < M and grid[x+1][y] == 1 and not visited[x+1][y]: if dfs(x+1, y): return True # Move right if y+1 < N and grid[x][y+1] == 1 and not visited[x][y+1]: if dfs(x, y+1): return True visited[x][y] = False return False return dfs(0, 0)"},{"question":"Company XYZ has a popular online multiplayer game and they are planning to introduce a new feature called \\"Guild War Challenges\\". In this feature, guilds of players compete against each other in various challenges. Each guild can have varying numbers of members, and each member has a certain skill level. To determine the outcome of a challenge, the skill levels of a specific member from each guild are compared. The specific member is chosen based on their rank within their guild. For example, the member with the highest skill level is ranked 1st, the second highest is ranked 2nd, and so on. If two members have the same skill level, they will have the same rank, and the next rank will be skipped accordingly (e.g., if there are two members with the highest skill level, both will be ranked 1st, and the next member will be ranked 3rd). The challenge has three types of queries: 1. Add a new member with a specific skill level to a specified guild. 2. Remove a member with a specific skill level from a specified guild. 3. Determine the skill level of the member ranked `k` in a specified guild. You are given a series of such queries, and you must process them to provide the appropriate responses. # Input - The first line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. - The next `q` lines contain one of the following types of queries: 1. `add g s` — Add a member with skill level `s` (1 ≤ s ≤ 100000) to the guild `g` (an integer identifier for the guild). 2. `remove g s` — Remove a member with skill level `s` from the guild `g`. 3. `rank g k` — Find the skill level of the member ranked `k` (1 ≤ k ≤ the number of members in the guild `g`) in the guild `g`. # Output For each query of type `3`, output the skill level of the member ranked `k` in the specified guild `g`. If the guild does not have enough members to satisfy the `rank g k` query, output `-1`. # Example Input: ``` 8 add 1 5000 add 1 3000 add 1 7000 rank 1 2 remove 1 5000 rank 1 2 add 2 4000 rank 2 1 ``` Output: ``` 5000 3000 4000 ```","solution":"from collections import defaultdict import bisect class Guild: def __init__(self): self.members = [] def add_member(guilds, g, s): if g not in guilds: guilds[g] = Guild() bisect.insort(guilds[g].members, -s) def remove_member(guilds, g, s): if g in guilds: idx = bisect.bisect_left(guilds[g].members, -s) if idx != len(guilds[g].members) and guilds[g].members[idx] == -s: guilds[g].members.pop(idx) def get_ranked_member(guilds, g, k): if g in guilds and k <= len(guilds[g].members): return -guilds[g].members[k - 1] return -1 def process_queries(queries): guilds = defaultdict(Guild) results = [] for query in queries: parts = query.split() cmd = parts[0] g = int(parts[1]) if cmd == \\"add\\": s = int(parts[2]) add_member(guilds, g, s) elif cmd == \\"remove\\": s = int(parts[2]) remove_member(guilds, g, s) elif cmd == \\"rank\\": k = int(parts[2]) result = get_ranked_member(guilds, g, k) results.append(result) return results"},{"question":"You are given a sequence of integers, and you are tasked with creating a new sequence where each element is derived from the sum of the digits of the corresponding element in the original sequence. The goal is to determine if the resulting sequence eventually reaches a point where all elements are equal. Write a function `is_harmonious_sequence(sequence: List[int]) -> bool` that takes in a list of integers and returns a boolean value indicating whether the sequence can become harmonious (i.e., all elements become equal) after repeatedly replacing each element with the sum of its digits. # Input: - List of integers, `sequence` (1 ≤ len(sequence) ≤ 1000, 1 ≤ sequence[i] ≤ 10^6 for any i) # Output: - Return True if the sequence can become harmonious, otherwise return False. # Example: **Input:** ```python sequence = [123, 456, 789] ``` **Output:** ```python False ``` **Explanation:** The sequences transform as follows: ``` Initial sequence: [123, 456, 789] Sum of digits: [6, 15, 24] Sum of digits: [6, 6, 6] ``` In this case, the sequence does not become harmonious after the first transformation but does after the second. Hence, the function should return `True`. # Constraints: - You can assume the input list will always be non-empty. - The transformation ends when the sequence either becomes harmonious or it is evident after 100 transformations that it can\'t become harmonious.","solution":"from typing import List def sum_of_digits(n: int) -> int: Calculates the sum of the digits of an integer n. return sum(int(digit) for digit in str(n)) def all_elements_equal(lst: List[int]) -> bool: Checks if all elements in the list are equal. return all(x == lst[0] for x in lst) def is_harmonious_sequence(sequence: List[int]) -> bool: Determines if the sequence can become harmonious by repeatedly replacing each element with the sum of its digits. max_iterations = 100 for _ in range(max_iterations): # Compute the next transformation sequence = [sum_of_digits(x) for x in sequence] # Check if all elements are equal if all_elements_equal(sequence): return True return False"},{"question":"In a distant kingdom, there exists a treasure map consisting of a grid with n rows and m columns. Each cell of the grid contains a non-negative integer representing the number of treasures in that cell. The objective is to collect the maximum number of treasures possible, starting from the top-left corner of the grid (cell (1, 1)) and moving to the bottom-right corner of the grid (cell (n, m)). You can only move down or right at any point in time. Given the number of rows n, number of columns m, and the grid itself, find the maximum number of treasures that can be collected following the described path. Write a function `max_treasures(n: int, m: int, grid: List[List[int]]) -> int` that takes the dimensions of the grid and the grid itself as arguments and returns the maximum number of treasures that can be collected. # Input The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers separated by spaces, where the j-th integer in the i-th line represents the number of treasures in the cell (i, j). All integers are non-negative and do not exceed 100. # Output Print a single integer indicating the maximum number of treasures that can be collected. # Example Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: The optimal path is (1,1) → (1,2) → (2,2) → (3,2) → (3,3). The path collects treasures: 1 + 3 + 5 + 2 + 1 = 12 # Note The constraints ensure that the solution can be developed using dynamic programming within the allowable limits.","solution":"from typing import List def max_treasures(n: int, m: int, grid: List[List[int]]) -> int: # Create a DP table to store the maximum treasures collected up to each cell. dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Starting point # Fill the first row (can only come from the left). for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above). for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP table. for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"Linda is participating in a coding competition and wants to maximize her score. The competition consists of n problems, each with a specific score value ai and a time limit ti. Linda has m minutes to solve the problems, and she wants to know the maximum score she can achieve within the given time. Each problem takes exactly the amount of time specified by its time limit to solve. Linda cannot solve partially solved problems, and she won\'t gain any score for problems she doesn\'t complete within the time limit. Write a program that will determine the maximum score Linda can achieve within the given time. The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1,000) — the number of problems and the total time available in minutes. Each of the following n lines contains two space-separated integers ai and ti (1 ≤ ai ≤ 1,000, 1 ≤ ti ≤ m) representing the score value and the time limit of the i-th problem. In the first line, print the maximum score Linda can achieve within the given time. In the first sample, Linda can solve the second and third problems within the available time to maximize her score: 6 + 6 = 12. In the second sample, Linda can solve the first and fourth problems within the available time to maximize her score: 8 + 5 = 13.","solution":"def maximize_score(n, m, problems): dp = [0] * (m + 1) for ai, ti in problems: for t in range(m, ti - 1, -1): dp[t] = max(dp[t], dp[t - ti] + ai) return max(dp) # Example usage n, m = 3, 10 problems = [(5, 5), (6, 4), (6, 5)] print(maximize_score(n, m, problems)) # Output: 12"},{"question":"You are given an array of integers and a target integer value. Your task is to determine if there are two distinct indices i and j in the array such that the elements at these indices add up to the target value. Return the indices of these two elements. If no such pair of indices exists, return [-1, -1]. Formally, given an array `nums` and an integer `target`, find two distinct indices `i` and `j` such that `nums[i] + nums[j] == target`, and return them as an array `[i, j]`. Ensure that `i` is less than `j`, and `i` and `j` are 0-based indices. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line of input contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9). The third line contains the target integer value target (−10^9 ≤ target ≤ 10^9). Output a single array of two integers `[i, j]` if such indices exist, otherwise print [-1, -1]. Potential example input and output: Input: 6 2 7 11 15 1 8 9 Output: [0, 1]","solution":"def two_sum(nums, target): Returns the indices of two elements in the array that add up to the target value. If no such elements exist, return [-1, -1]. # Create a dictionary to store the value and its index indices = {} # Iterate through the array for i in range(len(nums)): # Calculate the complement complement = target - nums[i] # Check if the complement exists in the dictionary and ensure it\'s a different index if complement in indices: return [indices[complement], i] # Store the value and its index in the dictionary indices[nums[i]] = i return [-1, -1]"},{"question":"**Problem:** String Decompression You are given a compressed string with the following format: Each part of the string can be either an uppercase letter (A-Z) or a digit (1-9). The digit represents how many times the previous letter is repeated. For instance, in the string \\"A3B2\\", \'A\' is repeated 3 times and \'B\' is repeated 2 times, so the result is \\"AAABB\\". **Constraints:** 1. The input string will contain only uppercase letters and digits (1-9). 2. The input string is guaranteed to be valid, i.e., there will not be two consecutive digits, and each digit follows a letter. 3. The length of the input string will not exceed 100 characters. Write a function that takes a compressed string and returns its decompressed form. **Input:** - A single line containing the compressed string `s`. **Output:** - A single line containing the decompressed string. **Examples:** 1. Input: `A3B2C4` Output: `AAABBCCCC` 2. Input: `X2Y3Z1` Output: `XXYYYZ` 3. Input: `A1B1C1` Output: `ABC` **Note:** In the example `A3B2C4`, it means we have \\"AAA\\", \\"BB\\", and \\"CCCC\\". The output is the concatenation of these parts, \\"AAABBCCCC\\". Implement the function `decompress_string(s: str) -> str` to solve the problem.","solution":"def decompress_string(s): Decompresses the given string as per the specifications. Each letter followed by a digit means the letter is repeated digit times. :param s: compressed string :return: decompressed string decompressed = [] i = 0 while i < len(s): letter = s[i] count = int(s[i+1]) decompressed.append(letter * count) i += 2 return \'\'.join(decompressed)"},{"question":"You are given an array of integers representing the transaction values of accounts in a bank. Transactions can be deposits (positive values) or withdrawals (negative values). Some accounts may have reserved balances, which are minimum required balances they must maintain to avoid penalties. These reserved balances are provided in a separate array and the sum of a reserved balance and transaction in the account should never drop below zero. Your task is to simulate the transactions and output the resulting account balances. If any account\'s balance falls below the reserved balance at any point during the simulation, you must immediately stop and report the first index (0-based) at which this violation occurs. # Input Format: - The first line contains an integer n (1 leq n leq 100000), the number of accounts. - The second line contains n space-separated integers, representing the initial balances of the accounts (-10^9 leq balance_i leq 10^9). - The third line contains n space-separated integers, representing the reserved balances of each account (0 leq reserve_i leq 10^9). - The fourth line contains an integer m (1 leq m leq 100000), the number of transactions. - The fifth line contains m space-separated tuples, each consisting of two integers i and t (0 leq i < n, -10^9 leq t leq 10^9). Here, i is the 0-based index of the account and t is the transaction value. # Output Format: - If all transactions are valid, print the ending balances of all accounts after all transactions. - If any transaction violates the reserved balance constraint, print \\"Violation at transaction {transaction_index}\\" where {transaction_index} is the 0-based index of the first violating transaction. # Example Input: ``` 4 100 200 300 400 50 100 150 200 5 0 -50 1 50 2 -100 3 -300 0 -150 ``` # Example Output: ``` Violation at transaction 3 ``` # Explanation: - Initial balances: [100, 200, 300, 400] - Reserved balances: [50, 100, 150, 200] - Transactions: - Account 0: balance 100 - 50 = 50 (ok) - Account 1: balance 200 + 50 = 250 (ok) - Account 2: balance 300 - 100 = 200 (ok) - Account 3: balance 400 - 300 = 100 (violates reserved balance 200) The transaction at index 3 violates the reserved balance constraint, so the output is \\"Violation at transaction 3\\".","solution":"def simulate_transactions(n, balances, reserved, m, transactions): Simulate transactions and check for any reserved balance violations. Parameters: n (int): Number of accounts. balances (list of int): Initial balances of the accounts. reserved (list of int): Reserved balances of each account. m (int): Number of transactions. transactions (list of tuples): List of transactions where each tuple contains (index of the account, transaction value). Returns: List[int] or str: The modified balances if all transactions are valid, otherwise a string indicating the first violating transaction. for idx, (account, transaction) in enumerate(transactions): balances[account] += transaction if balances[account] < reserved[account]: return f\\"Violation at transaction {idx}\\" return balances"},{"question":"You are given an array of integers `arr` of length `n`, and a series of range queries on that array. Each query can be one of the following types: 1. Update the value at a specific index. 2. Find the sum of a subarray between two given indices, inclusive. The first line of input contains two integers `n` and `q` (1 ≤ n, q ≤ 100000), the number of elements in the array and the number of queries, respectively. The second line contains `n` integers `arr1, arr2, ..., arrn` (|arri| ≤ 100000), the initial elements of the array. Each of the next `q` lines describes a query. Each query will either be of the form: - `1 i x`: Update the value at index `i` to `x` (1-based index). - `2 l r`: Find the sum of the subarray from index `l` to `r` (1-based index). For each type 2 query, print the sum of the subarray in its own line. **Input:** ``` 5 3 1 2 3 4 5 2 1 5 1 3 10 2 2 4 ``` **Output:** ``` 15 16 ``` Note: - The first query asks for the sum from index 1 to 5, which is `1 + 2 + 3 + 4 + 5 = 15`. - The second query updates the value at index 3 to 10. - The third query asks for the sum from index 2 to 4. After the update, the array becomes [1, 2, 10, 4, 5], so the sum is `2 + 10 + 4 = 16`.","solution":"class ArrayWithQueries: def __init__(self, arr): self.arr = arr def update(self, idx, value): Updates the value at index idx (1-based) to value. self.arr[idx - 1] = value def query_sum(self, left, right): Returns the sum of the subarray from index left to right (1-based). return sum(self.arr[left - 1:right]) def process_queries(n, arr, queries): array_with_queries = ArrayWithQueries(arr) results = [] for query in queries: query_type = query[0] if query_type == 1: _, i, x = query array_with_queries.update(i, x) elif query_type == 2: _, l, r = query results.append(array_with_queries.query_sum(l, r)) return results"},{"question":"You are given two strings, s1 and s2, and your task is to determine whether s2 is a rotation of s1. A rotation means that we can split s1 into two parts, x and y, and rearrange them as yx to obtain s2. For example, if s1 is \\"waterbottle\\" and s2 is \\"erbottlewat\\", s2 is a rotation of s1 because \\"waterbottle\\" can be split into \\"water\\" and \\"bottle\\", and rearranged to \\"bottlewater\\" which can then be rotated to \\"erbottlewat\\". Input The input consists of two lines. The first line contains the string s1. The second line contains the string s2. Both strings comprise lowercase letters only. The lengths of the strings are equal and do not exceed 100. Output Output \\"YES\\" if s2 is a rotation of s1. Otherwise, output \\"NO\\". Example Input: waterbottle erbottlewat Output: YES Explanation: \\"erbottlewat\\" is a rotation of \\"waterbottle\\" because \\"waterbottle\\" can be split into \\"water\\" and \\"bottle\\", and rearranged to \\"bottlewater\\" which, when rotated, becomes \\"erbottlewat\\".","solution":"def is_rotation(s1, s2): Returns \\"YES\\" if s2 is a rotation of s1, otherwise returns \\"NO\\". if len(s1) != len(s2): return \\"NO\\" combined = s1 + s1 if s2 in combined: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a 2D grid of size n times m filled with non-negative integers, a path is defined as a sequence of cells starting from the top-left cell and ending at the bottom-right cell. Each path can only move either down or right at any point in time. The weight of a path is the sum of the integers in the cells of the path. Your task is to find the minimum weight path that starts from the top-left cell (1, 1) and ends at the bottom-right cell (n, m). The first line of input contains two integers n and m (1 le n, m le 1000). The next n lines contain m space-separated integers, representing the grid. Output a single integer, the minimum weight of the path. **Example:** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` **Explanation:** The minimum weight path is 1 → 3 → 1 → 1 → 1, which sums to 7.","solution":"def min_path_weight(n, m, grid): Returns the minimum weight path from the top-left to bottom-right of the grid. Args: n (int): The number of rows. m (int): The number of columns. grid (list of list of int): The grid. Returns: int: The minimum weight of the path. # Initialize a dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at the bottom right corner is the minimum weight path return dp[-1][-1]"},{"question":"In a distant galaxy, there exists a planet called HexaPrime where the inhabitants follow a unique number system called HexaDecimal. Unlike the hexadecimal system used on Earth, HexaDecimal uses digits from 0 to 5 (inclusive) and letters from G to K (e.g., G represents 6, H represents 7, ..., K represents 10). Numbers are represented in base 11 in this system. One day, intergalactic researchers found an ancient repository on HexaPrime which contained large sequences of encoded information. The sequences consist of multiple HexaDecimal numbers separated by a special delimiter \'|\'. Your task is to write a program that, given such a sequence, decodes it into an array of integers in decimal (base 10) system and computes the sum of these integers. # Input: The input consists of a single line which is a sequence of HexaDecimal numbers separated by the delimiter \'|\'. Each HexaDecimal number contains only valid digits (0-5 and G-K), and the sequence contains at least one number. The length of the input string will be at most 10^6 characters. # Output: Print a single integer which is the sum of the decoded base 10 integers. # Example: **Input:** ``` 2G|3K|5H|0 ``` **Output:** ``` 1295 ``` **Explanation:** - The first number \\"2G\\" in HexaDecimal is (2 * 11^1 + 6 * 11^0) = 22 + 6 = 28 in decimal. - The second number \\"3K\\" in HexaDecimal is (3 * 11^1 + 10 * 11^0) = 33 + 10 = 43 in decimal. - The third number \\"5H\\" in HexaDecimal is (5 * 11^1 + 7 * 11^0) = 55 + 7 = 62 in decimal. - The fourth number \\"0\\" in HexaDecimal is 0 in decimal. - The sum of these integers is 28 + 43 + 62 + 0 = 133. - The actual sum in the given example is 28+43+62=133, but the output is thus has to be showing below as: ``` 133 ```","solution":"def decode_hexadecimal_to_decimal(hexadecimal_string): Decodes a sequence of HexaDecimal numbers separated by the delimiter \'|\'. :param hexadecimal_string: A string containing HexaDecimal numbers separated by \'|\'. :return: The sum of the decoded base 10 integers. # Define a mapping from HexaDecimal characters to their decimal values hexa_mapping = {str(i): i for i in range(6)} hexa_mapping.update({\'G\': 6, \'H\': 7, \'I\': 8, \'J\': 9, \'K\': 10}) def hexa_to_decimal(hexa_number): Converts a single HexaDecimal number (in string form) to a decimal (base 10) integer. :param hexa_number: A string representing a HexaDecimal number. :return: The decimal (base 10) integer. decimal_value = 0 base = 11 for index, char in enumerate(reversed(hexa_number)): decimal_value += hexa_mapping[char] * (base ** index) return decimal_value # Split the input string by the delimiter \'|\' hexa_numbers = hexadecimal_string.split(\'|\') # Convert each HexaDecimal number to decimal and sum them total_sum = sum(hexa_to_decimal(n) for n in hexa_numbers) return total_sum"},{"question":"A chemical company needs to store different chemical mixtures in a series of containers. Each mixture can be represented as a certain volume of liquid. There are \'n\' containers each with a fixed capacity. You are required to determine the minimum number of trips required to transfer all the mixtures from the source location to the destination, given that each trip can carry exactly two containers. You\'re given an array `mixtures` where `mixtures[i]` represents the volume of the i-th mixture, and another array `capacity` where `capacity[j]` represents the capacity of the j-th container. You need to pair the containers in such a way that the total volume of mixtures in a pair of containers does not exceed the combined capacity of those two containers. Write a function to determine the minimum number of trips required to transport all the mixtures, such that each trip only carries two containers. Function Signature: ```python def min_trips(mixtures: List[int], capacity: List[int]) -> int: ``` # Input - `mixtures`: A list of integers where each integer represents the volume of a mixture. - `capacity`: A list of integers where each integer represents the capacity of a container. # Output - An integer representing the minimum number of trips required to move all the mixtures. # Example Example 1 ```python mixtures = [4, 8, 3, 5] capacity = [5, 10, 8, 6] min_trips(mixtures, capacity) ``` Output: ``` 2 ``` Example 2 ```python mixtures = [2, 3, 2, 5, 3, 6] capacity = [3, 3, 3, 6, 8, 6] min_trips(mixtures, capacity) ``` Output: ``` 3 ``` # Constraints - The number of mixtures and container capacities will each be at most 1000. - The volume of each mixture and the capacity of each container will each be between 1 and 10^4.","solution":"from typing import List def min_trips(mixtures: List[int], capacity: List[int]) -> int: n = len(mixtures) # Sort the mixtures and capacities for a greedy two-pointer approach mixtures.sort() capacity.sort() left, right = 0, n - 1 trips = 0 while left <= right: if mixtures[left] <= capacity[left] and mixtures[right] <= capacity[right]: if mixtures[left] + mixtures[right] <= capacity[left] + capacity[right]: # Pair the containers if the combined volume fits in the combined capacity left += 1 trips += 1 right -= 1 else: return -1 # If any of the mixture cannot fit in its respective container return trips"},{"question":"You are tasked with constructing a sequence of integers where every pair of elements in the sequence have a unique greatest common divisor (GCD). Specifically, given two integers m and k, create a sequence a_1, a_2, ..., a_m such that: 1. The integers in the sequence are within the range 1 to k inclusive. 2. For any pair of indices i and j (1 leq i < j leq m), the GCD of a_i and a_j is unique among all pairs in the sequence. If it\'s impossible to construct such a sequence, output \\"Impossible\\". Input: The first line contains two integers m and k (2 leq m leq 100, 1 leq k leq 100). Output: If a valid sequence exists, print the sequence a_1, a_2, dots, a_m in one line. If no such sequence exists, print \\"Impossible\\". Example: Input 1: 3 10 Output 1: 1 2 3 Input 2: 4 5 Output 2: Impossible","solution":"import math def generate_sequence_with_unique_gcds(m, k): Generates a sequence of m integers within the range 1 to k inclusive, such that any pair of elements in the sequence have a unique greatest common divisor (GCD). If such a sequence is not possible, returns \\"Impossible\\". def gcd(a, b): while b: a, b = b, a % b return a # Create a list of pairs (i, j) where 1 <= i < j <= k and store the GCD gcd_pairs = {} for i in range(1, k+1): for j in range(i+1, k+1): gcd_value = gcd(i, j) if gcd_value in gcd_pairs: gcd_pairs[gcd_value].append((i, j)) else: gcd_pairs[gcd_value] = [(i, j)] # If we have fewer unique GCDs than m choose 2, it\'s impossible if len(gcd_pairs) < (m * (m - 1)) // 2: return \\"Impossible\\" sequence = range(1, m+1) return \' \'.join(map(str, sequence)) # Example usage print(generate_sequence_with_unique_gcds(3, 10)) # Output: 1 2 3"},{"question":"A popular e-commerce company has a database with detailed information about all the products they sell. Each product falls into one of several categories and each has an associated price. They are planning a significant sale event where they wish to put a global price cap. If a product’s price exceeds the cap, the price will be reduced to the cap value. The company has tasked you with updating the prices accordingly and generating a summary report. Write a function `apply_price_cap` that takes a list of products and a price cap as input. Each product is represented as a dictionary with keys `\\"name\\"`, `\\"category\\"`, and `\\"price\\"`. The function should return a list of dictionaries where each product’s price does not exceed the given cap and also provide a summary dictionary showing the pre-cap and post-cap total prices for each category. # Input: - `products` (a list of dictionaries): Each dictionary has three keys: - `\\"name\\"` (a string): The name of the product. - `\\"category\\"` (a string): The category of the product. - `\\"price\\"` (a float): The original price of the product. - `cap` (a float): The maximum price allowed for any product. # Output: - A tuple containing: - A list of dictionaries with updated prices, maintaining the structure of the input product list. - A summary dictionary where keys are the category names and values are dictionaries themselves—each containing two keys: - `\\"pre_cap_total\\"`: Total sum of original prices for that category. - `\\"post_cap_total\\"`: Total sum of prices after applying the cap for that category. # Example: ```python products = [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 1200.00}, {\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 150.00}, {\\"name\\": \\"Coffee Mug\\", \\"category\\": \\"Kitchen\\", \\"price\\": 15.99}, {\\"name\\": \\"Blender\\", \\"category\\": \\"Kitchen\\", \\"price\\": 45.50}, {\\"name\\": \\"Desk Chair\\", \\"category\\": \\"Furniture\\", \\"price\\": 200.00} ] cap = 100.00 apply_price_cap(products, cap) Output: ( [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 100.00}, {\\"name\\": \\"Headphones\\", \\"category\\": \\"Electronics\\", \\"price\\": 100.00}, {\\"name\\": \\"Coffee Mug\\", \\"category\\": \\"Kitchen\\", \\"price\\": 15.99}, {\\"name\\": \\"Blender\\", \\"category\\": \\"Kitchen\\", \\"price\\": 45.50}, {\\"name\\": \\"Desk Chair\\", \\"category\\": \\"Furniture\\", \\"price\\": 100.00} ], { \\"Electronics\\": {\\"pre_cap_total\\": 1350.00, \\"post_cap_total\\": 200.00}, \\"Kitchen\\": {\\"pre_cap_total\\": 61.49, \\"post_cap_total\\": 61.49}, \\"Furniture\\": {\\"pre_cap_total\\": 200.00, \\"post_cap_total\\": 100.00} } ) ```","solution":"def apply_price_cap(products, cap): Apply a price cap to a list of products and generate a summary report. Args: - products (list of dict): Each dictionary has keys \\"name\\", \\"category\\", \\"price\\". - cap (float): The maximum price allowed for any product. Returns: - tuple: A list of updated product dictionaries and a dictionary summarizing pre-cap and post-cap totals per category. updated_products = [] summary = {} for product in products: category = product[\\"category\\"] original_price = product[\\"price\\"] capped_price = min(original_price, cap) # Update the product price if necessary updated_product = product.copy() updated_product[\\"price\\"] = capped_price updated_products.append(updated_product) if category not in summary: summary[category] = { \\"pre_cap_total\\": 0.0, \\"post_cap_total\\": 0.0, } summary[category][\\"pre_cap_total\\"] += original_price summary[category][\\"post_cap_total\\"] += capped_price return updated_products, summary"},{"question":"A company maintains a **hierarchical employee management system** where the data is represented as a tree structure. Each node in the tree represents an employee, and the root node represents the CEO. Every employee has a unique ID and may have several direct reports (i.e., subordinates). The company wants to implement a function that calculates the total number of employees reporting directly or indirectly to a given employee, including the employee themselves. **Function Signature:** ```python def count_subordinates(employee_tree: dict, employee_id: int) -> int: Args: employee_tree (dict): A dictionary representation of the employee tree. The keys are employee IDs, and the values are lists of direct report IDs. employee_id (int): The ID of the employee for whom we want to count total subordinates. Returns: int: The total number of employees reporting to the given employee_id, including the employee themselves. ``` # Example: ```python employee_tree = { 1: [2, 3, 4], 2: [5, 6], 3: [7], 4: [], 5: [], 6: [], 7: [] } ``` In this example, calling `count_subordinates(employee_tree, 1)` should return `7` (since employee 1 has 6 direct or indirect subordinates plus themselves), while calling `count_subordinates(employee_tree, 2)` should return `3` (since employee 2 has 2 direct subordinates plus themselves). # Criteria: - Ensure your function accounts for cases where an employee has no subordinates. - Optimize for both time and space complexity, considering the constraints of typical hierarchical structures in real-world applications. **Test your implementation to verify correctness and efficiency.**","solution":"def count_subordinates(employee_tree, employee_id): Calculates the total number of employees reporting directly or indirectly to a given employee, including the employee themselves using DFS traversal. Args: employee_tree (dict): A dictionary representation of the employee tree. employee_id (int): The ID of the employee for whom to count total subordinates. Returns: int: The total number of employees reporting to the given employee_id, including themselves. def dfs(emp_id): # Start with the employee themselves count = 1 # Traverse all direct reports for report in employee_tree.get(emp_id, []): count += dfs(report) return count return dfs(employee_id)"},{"question":"You are given a string of digits representing a large integer n. Your task is to find the smallest possible number you can obtain by removing exactly one digit from the string. The remaining digits should preserve their original relative order. The input consists of a single string with digits n (1 leq |n| leq 10^5) where |n| is the length of the string and the string does not contain leading zeros except when n is \\"0\\". Print the smallest possible number formed after removing exactly one digit. # Example **Input:** ``` 4321 ``` **Output:** ``` 321 ``` **Input:** ``` 100032 ``` **Output:** ``` 32 ``` # Explanation In the first example, by removing the digit \'4\', the smallest number that can be formed is \\"321\\". In the second example, removing the first \'1\' results in \\"00032\\" which is \\"32\\" after removing leading zeros.","solution":"def smallest_after_removal(n): Returns the smallest possible number formed after removing exactly one digit from the string n. min_number = n[1:] # start by removing the first digit for i in range(1, len(n)): current_number = n[:i] + n[i+1:] if current_number < min_number: min_number = current_number # Remove leading zeros return min_number.lstrip(\'0\') or \'0\'"},{"question":"You are given an array of n integers and an integer k. Your task is to find the number of ways to select two distinct indices i and j (1 ≤ i < j ≤ n) such that the sum of the elements at these indices is divisible by k. For example, if the array is [1, 3, 2, 6, 4, 5] and k is 3, there are 5 pairs that satisfy the condition: (1, 2), (1, 5), (3, 4), (2, 5), and (4, 5). The first line of the input contains an integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n and k (2 le n le 10^5, 1 le k le 10^6) — the number of elements in the array and the divisor. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. The sum of n over all test cases does not exceed 10^6. For each test case, output a single integer — the number of pairs that satisfy the condition.","solution":"def count_pairs_divisible_by_k(test_cases): results = [] for case in test_cases: n, k, array = case remainder_count = [0] * k for num in array: remainder_count[num % k] += 1 count = 0 count += remainder_count[0] * (remainder_count[0] - 1) // 2 for rem in range(1, (k // 2) + 1): if rem == k - rem: count += remainder_count[rem] * (remainder_count[rem] - 1) // 2 else: count += remainder_count[rem] * remainder_count[k - rem] results.append(count) return results"},{"question":"A small software startup company is developing a new calendar application. One of their requirements is to find the maximum number of overlap-free meetings that can be attended from given meeting slots. You are given a list of meeting time intervals `[start, end]`, where `start` is the start time and `end` is the end time (both in minutes since the beginning of the day). Two meetings [a, b] and [c, d] are considered to be overlapping if they share any part of their times (i.e., not inclusive of the exact ending time of one meeting and the starting time of the next). Write a function `maxNonOverlappingMeetings` that takes a list of meeting intervals and returns the maximum number of overlap-free meetings that can be attended. # Input - The first line contains an integer `n` (1 ≤ `n` ≤ 10^5), the number of meeting intervals. - Each of the next `n` lines contains two space-separated integers, `start` and `end` (0 ≤ `start` < `end` ≤ 1440). # Output - Print a single integer, the maximum number of non-overlapping meetings that can be attended. # Example Input ``` 5 1 3 2 5 6 8 8 9 1 4 ``` Output ``` 3 ``` # Explanation In this example, the maximum number of non-overlapping meetings that can be attended is 3: you can choose the meetings `[1, 3]`, `[6, 8]`, and `[8, 9]`.","solution":"def maxNonOverlappingMeetings(meetings): Returns the maximum number of overlap-free meetings that can be attended. Parameters: meetings (list): A list of tuples where each tuple contains two integers, start and end time. Returns: int: Maximum number of non-overlapping meetings. # Sort the meetings based on end time meetings.sort(key=lambda x: x[1]) # Initialize variables to track the end time of the last meeting added to the schedule end_time = 0 count = 0 for meeting in meetings: if meeting[0] >= end_time: # If the current meeting starts after or when the last meeting ends, count it end_time = meeting[1] count += 1 return count"},{"question":"You are given a string s consisting of lowercase English letters and a list of words. The length of the string s is between 1 and 1000, and the length of the list of words is between 1 and 100. Each word in the list consists of lowercase English letters only and has a length between 1 and 100. Your task is to find the smallest word in the list (lexicographically) that can be formed by deleting some characters (possibly none) from the string s without reordering the remaining letters. The first line of input contains the string s. The second line of input contains an integer n, the number of words in the list. The next n lines contain the words, one per line. Output the smallest word in the list that can be formed by deleting some characters of s without reordering the remaining letters. If no such word exists, print -1. Example: Input: ``` abpcplea 4 ale apple monkey plea ``` Output: ``` ale ``` Explanation: By deleting \\"b\\", \\"p\\", \\"c\\" and \\"p\\", we can get the word \\"ale\\" from the string \\"abpcplea\\". \\"ale\\" is the smallest word lexicographically among the words that can be formed.","solution":"def smallest_formable_word(s, words): def can_form(word, s): it = iter(s) return all(char in it for char in word) valid_words = [word for word in words if can_form(word, s)] if not valid_words: return -1 return min(valid_words) # Example usage: example_s = \\"abpcplea\\" example_words = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] print(smallest_formable_word(example_s, example_words)) # Output: \\"ale\\""},{"question":"You are given a string consisting of lowercase letters and a dictionary containing several words. Your task is to determine the minimum number of characters you need to insert into the given string so that it contains all the words from the dictionary as subsequences. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, if the given string is \\"abc\\" and the dictionary contains the words [\\"ab\\", \\"bc\\", \\"ac\\"], then the answer would be 0 since \\"abc\\" already contains \\"ab\\", \\"bc\\", and \\"ac\\" as subsequences. If the given string is \\"abc\\" and the dictionary contains the words [\\"abcd\\", \\"aef\\"], then the answer would be 4 because you need to insert \\"d\\" and \\"e\\" twice and \\"f\\" to form the words \\"abcd\\" and \\"aef\\". Write a function `min_inserts_to_form_subsequences(s: str, dictionary: List[str]) -> int` that computes the minimum number of characters to be inserted into the given string `s` so that it contains all the words from the dictionary as subsequences. # Input - A string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. - A list of strings `dictionary` (1 ≤ len(dictionary) ≤ 100) where each string contains 1 to 100 lowercase English letters. # Output - An integer representing the minimum number of character insertions required. # Example Example 1: Input: ```python s = \\"abc\\" dictionary = [\\"ab\\", \\"bc\\", \\"ac\\"] ``` Output: ```python 0 ``` Example 2: Input: ```python s = \\"abc\\" dictionary = [\\"abcd\\", \\"aef\\"] ``` Output: ```python 4 ``` # Note - In example 1, the string \\"abc\\" already contains \\"ab\\", \\"bc\\", and \\"ac\\" as subsequences. - In example 2, \\"abcd\\" requires one insertion (\\"d\\") and \\"aef\\" requires three insertions (\\"e\\" twice and \\"f\\"). Thus, the total insertions required are 4.","solution":"def is_subsequence(s, word): it = iter(s) return all(char in it for char in word) def min_inserts_to_form_subsequences(s, dictionary): def min_insertions(s, word): m, n = len(s), len(word) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if j == 0: dp[i][j] = 0 elif i == 0: dp[i][j] = j elif s[i - 1] == word[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + dp[i][j - 1] return dp[m][n] total_inserts = 0 for word in dictionary: if not is_subsequence(s, word): total_inserts += min_insertions(s, word) return total_inserts"},{"question":"A delivery service wants to optimize its operations by ensuring all outgoing packages are loaded onto trucks efficiently. Each truck can carry a maximum weight of W kilograms. You have a list of n packages, where the i-th package has a weight of p_i kilograms. A truck can carry multiple packages as long as their combined weight does not exceed its limit W. Write a function that determines the minimum number of trucks required to transport all the packages. Assume the packages are sorted in non-decreasing order of their weights. # Input - The first line contains two integers n and W (1 le n le 10^5, 1 le W le 10^9) — the number of packages and the maximum weight a truck can carry. - The second line contains n space-separated integers p_1, p_2, dots, p_n (1 le p_i le W) — the weights of the packages in non-decreasing order. # Output - Print a single integer — the minimum number of trucks required to transport all the packages. # Example Input ``` 6 10 1 2 3 8 8 9 ``` Output ``` 4 ``` Explanation - One possible way to load the trucks could be: - Truck 1 carries packages with weights [1, 2, 3] (total 6 kg). - Truck 2 carries the package with weight [8] (total 8 kg). - Truck 3 carries the package with weight [8] (total 8 kg). - Truck 4 carries the package with weight [9] (total 9 kg). - Hence in total 4 trucks are needed.","solution":"def min_trucks_required(n, W, weights): Returns the minimum number of trucks required to transport all packages. Each truck can carry a maximum weight of `W` kilograms. `weights` is a list of integers representing the weights of the packages. trucks = 0 i = 0 while i < n: current_weight = 0 while i < n and current_weight + weights[i] <= W: current_weight += weights[i] i += 1 trucks += 1 return trucks"},{"question":"Farmer John has a rectangular grid farm with dimensions m x n. Each cell in the grid can either grow crops (denoted by \'C\') or be empty (denoted by \'E\'). Farmer John wants to maximize crop growth, but to maintain optimal soil conditions, no two crops can be placed in adjacent cells. Two cells are considered adjacent if they share a common edge. Given the grid\'s initial configuration, help Farmer John by determining the maximum number of crops he can plant while adhering to the no-adjacent-crops rule. # Input - The first line contains two integers, m and n (1 ≤ m, n ≤ 200), representing the dimensions of the rectangular grid. - The next m lines each contain n characters, either \'C\' or \'E\', describing the initial layout of the grid. # Output - An integer representing the maximum number of crops that can be planted in the grid according to the no-adjacent-crops rule. # Example ``` Input: 3 3 CEC EEE CEC Output: 4 ``` # Explanation In the given example, one possible optimal arrangement for planting crops would be: ``` C.C C.C C.C ``` So, the maximum number of crops that can be planted is 4. Note that there might be multiple valid arrangements, but the output should only be the count of the maximum crops planted.","solution":"def max_crops_planted(m, n, grid): def is_safe(x, y): # Check if placing crop at (x, y) violates any constraints if x > 0 and grid[x-1][y] == \'P\': return False if y > 0 and grid[x][y-1] == \'P\': return False if x < m-1 and grid[x+1][y] == \'P\': return False if y < n-1 and grid[x][y+1] == \'P\': return False return True def place_crops(): count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'E\' and is_safe(i, j): grid[i][j] = \'P\' # Plant crop count += 1 return count grid = [list(row) for row in grid] return place_crops()"},{"question":"You are given a list of integers, and you want to form the maximum possible number by concatenating them. Write a function that takes a list of non-negative integers and returns the largest integer that can be formed by concatenating their string representations. The input integers can range from 0 to 10^9. The first input line contains an integer n which is the number of integers in the list (1 ≤ n ≤ 100). The second line contains the n integers, each separated by a space. The function should return the largest concatenated number as a string. # Example Input 5 3 30 34 5 9 Output 9534330 # Note - The function should ensure that the intermediate steps do not overflow standard integer types by keeping the intermediate numbers as strings. - The order of numbers within the list can be altered to create the largest possible concatenated integer.","solution":"from functools import cmp_to_key def compare(x, y): Custom comparator function to determine the order of two strings x and y by comparing their concatenated results in both possible orders. if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_concatenated_number(arr): Takes a list of non-negative integers and returns the largest integer that can be formed by concatenating their string representations. # Convert integers to strings for concatenation str_arr = list(map(str, arr)) # Sort the strings using the custom comparator sorted_str_arr = sorted(str_arr, key=cmp_to_key(compare)) # Join the sorted strings into the largest concatenated number largest_number = \'\'.join(sorted_str_arr) # Edge case: if the largest number starts with \'0\', it means the whole number is \'0\' if largest_number[0] == \'0\': return \'0\' return largest_number"},{"question":"You are given a grid with n rows and m columns, where each cell contains a digit between 0 and 9 inclusive. You can move from any cell to any of its 4 neighboring cells (left, right, up, down) if they have the same digit. Your task is to determine the size of the largest connected component of cells that share the same digit. The size of a connected component is the number of cells in it. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m characters — the digits in the grid. Output a single integer — the size of the largest connected component. **Example:** Input: ``` 3 4 1112 1992 1192 ``` Output: ``` 6 ``` Explanation: In this 3x4 grid, the largest connected component of cells with the same digit is composed of 6 cells with the digit 1: ``` 111 1 11 ``` This component includes cells (1,1), (1,2), (1,3), (2,1), (3,1), and (3,2).","solution":"def largest_connected_component(grid, n, m): Returns the size of the largest connected component of cells that share the same digit in a grid. Args: grid: A list of strings representing the grid. n: The number of rows. m: The number of columns. Returns: An integer representing the size of the largest connected component. visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y, digit): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True size += 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == digit: stack.append((nx, ny)) return size max_size = 0 for i in range(n): for j in range(m): if not visited[i][j]: max_size = max(max_size, dfs(i, j, grid[i][j])) return max_size"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline. The skyline is represented as an array `heights` where `heights[i]` is the height of the i-th building. Assume that each building is 1 unit wide. Calculate and print the maximum water that can be trapped in the valleys between the buildings after a rainstorm. Water is trapped when there are lower buildings between two taller buildings, and the amount of water trapped is the difference between the height of the taller buildings and the lower heights in the middle. The input consists of an integer `n` (1 ≤ n ≤ 100000) representing the number of buildings and an array `heights` of n integers (0 ≤ heights[i] ≤ 10^6) representing the height of each building. Output a single integer: the maximum amount of water that can be trapped. Example: ``` Input: 9 0 1 0 2 1 0 1 3 2 Output: 5 ``` Explanation: In this example, between the buildings of heights 1 and 3, there are valleys trapping `1 + 2 + 1 + 1 = 5` units of water.","solution":"def trap_water(heights): Calculate the maximum amount of water that can be trapped between buildings. Arguments: heights - A list of integers representing the heights of the buildings. Return: The total amount of water trapped. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped # Example usage n = 9 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2] print(trap_water(heights)) # Output: 5"},{"question":"Daniel is a keen gardener and enjoys arranging his garden in A shape of a rectangular grid of size m × n. Recently, he has decided to plant some trees in his garden. Each tree occupies exactly one cell of the grid, and no two trees are planted in the same cell. Daniel wants to create a beautiful path system in his garden such that people can walk around the garden to admire the trees. To achieve this, he wants to make sure that there are at least k paths between any two trees. A path is a sequence of cells in the grid such that each cell in the path is adjacent (either vertically or horizontally) to the previous cell. The length of a path is the number of cells in it. Note that a path can visit the same cell multiple times if necessary. Given the dimensions m, n and the number of paths k, help Daniel determine the minimum number of trees he must plant to satisfy his requirement. If it is impossible to achieve the requirement, return -1. The first line contains three integers m, n, and k (2 ≤ m, n ≤ 10; 1 ≤ k ≤ 5). Print a single integer — the minimum number of trees required, or -1 if it is impossible to make such an arrangement. If there are multiple valid solutions, print any one of them.","solution":"def minimum_trees(m, n, k): Returns the minimum number of trees required to ensure that there are at least k paths between any two trees in a m x n grid. If it is impossible, return -1. # If either dimension is less than 2 or k is greater than the size of the grid, return -1 if m < 2 or n < 2 or k > min(m, n): return -1 # To form k paths between any two trees, at least k trees are needed, so return k as minimum trees required return k"},{"question":"You are given a list of integers representing the scores of students in a class. The scores are calculated for two exams. We want to know the number of students who have scored higher on the second exam compared to the first exam. Write a function `count_higher_scores(scores)` which takes a list of tuples as input. Each tuple represents the scores of a student in two exams, where the first element is the score for the first exam and the second element is the score for the second exam. The function should return an integer representing the number of students who scored higher on the second exam than the first. # Input: - The input will be a list of tuples with each tuple containing two integers. The length of the list will be at most 1000. - The integers in the tuples can range from 0 to 100 inclusive. # Output: - The output should be a single integer. # Example: ```python # Example 1 scores = [(30, 50), (90, 85), (60, 60), (70, 80), (55, 30)] print(count_higher_scores(scores)) # Output: 2 # Example 2 scores = [(80, 80), (99, 100), (50, 60), (30, 25)] print(count_higher_scores(scores)) # Output: 2 ``` # Constraints: - You must handle the function efficiently to work within the given constraints. - You should not use any external libraries.","solution":"def count_higher_scores(scores): Returns the number of students who scored higher on the second exam compared to the first exam. :param scores: List of tuples, where each tuple contains two integers representing scores in two exams. :return: Integer count of students with higher scores in the second exam. return sum(1 for first, second in scores if second > first)"},{"question":"A robot is placed on a 2D grid. Initially, it is located at the origin (0, 0). The robot can receive commands to move in four possible directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Each command moves the robot exactly one unit in the specified direction. You need to determine the robot\'s final coordinates after executing a series of commands. Write a program that takes the following input: - The first line contains an integer n (1 le n le 10^5), the number of commands. - The second line contains a string of length n consisting of characters \'U\', \'D\', \'L\', and \'R\' representing the movement commands. The program should output the final coordinates of the robot as two space-separated integers, representing the x and y coordinates respectively. # Example **Input:** ``` 5 URDDL ``` **Output:** ``` 0 0 ``` **Explanation:** - The robot starts at (0, 0). - \'U\' moves it to (0, 1). - \'R\' moves it to (1, 1). - \'D\' moves it to (1, 0). - \'D\' moves it to (1, -1). - \'L\' moves it to (0, -1). - The final position is (0, -1).","solution":"def final_coordinates(n, commands): Determines the final coordinates of the robot after executing a series of movement commands. Parameters: n (int): Number of commands. commands (str): A string of length n consisting of characters \'U\', \'D\', \'L\', and \'R\' representing the movement commands. Returns: tuple: Final coordinates (x, y) of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"You are given n containers lined up in a row, and each container has a different capacity Ci (the maximum volume it can hold). Every day, you are given m liters of water, which you need to distribute among the containers. However, there is a catch. You can only distribute the water in one continuous segment of containers each day. Your task is to find the maximum possible total capacity you can fill by choosing the optimal continuous segment of containers. The first line of the input contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 10^9) — the number of containers and the amount of water you receive each day, respectively. The second line contains n integers C1, C2, ..., Cn (1 ≤ Ci ≤ 100000) — the capacities of the containers. Print one integer — the maximum total capacity you can fill by selecting the optimal continuous segment of containers and distributing the m liters of water among them. Your answer should be such that the segment capacities sum does not exceed m liters, while still being the maximum possible. In the first sample, you can fill two containers with capacities 2 and 3 from the second and third position to fill a total capacity of 5 liters. In the second sample, you can select all three containers and fill them since their total capacity sums to 15 liters. Example: ``` Input 5 5 1 2 3 4 5 Output 5 Input 3 15 5 10 20 Output 15 ```","solution":"def max_filled_capacity(n, m, capacities): max_capacity = 0 current_sum = 0 left = 0 for right in range(n): current_sum += capacities[right] while current_sum > m: current_sum -= capacities[left] left += 1 max_capacity = max(max_capacity, current_sum) return max_capacity"},{"question":"You are given a string consisting of lowercase English letters. You need to determine the maximum length of a contiguous substring where all characters are unique. Write a program that will find this maximum length. The only line of input contains a single string s (1 ≤ |s| ≤ 10^5). Output one integer — the maximum length of a contiguous substring where all characters are unique. In the first sample \\"pwwkew\\", the longest substring with all unique characters is \\"wke\\", whose length is 3. In the second sample \\"bbbbb\\", the longest substring with all unique characters is \\"b\\", whose length is 1.","solution":"def length_of_longest_substring(s): Given a string s, find the length of the longest substring without repeating characters. char_index = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a string s consisting of lowercase English letters. A segment of the string is defined as a contiguous substring. The goal is to find the length of the longest segment where all the characters are different. The first and only line of input contains a string s (1 le text{length of } s le 10^5) consisting of lowercase English letters. Print one integer — the length of the longest segment of the string where all characters are different. In the first example if the input string is \\"abcabcbb\\", one possible longest segment with all unique characters is \\"abc\\" which has a length of 3. In the second example if the input string is \\"bbbbb\\", the longest segment with all unique characters is \\"b\\" which has a length of 1.","solution":"def longest_unique_segment_length(s): Returns the length of the longest segment where all characters are different. char_index = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given a list of strings. Your task is to determine the number of unique strings from the list. Strings are considered the same regardless of case sensitivity, and leading/trailing white spaces should be ignored. The first line of the input contains a single integer n (1 ≤ n ≤ 1000), representing the number of strings in the list. The next n lines each contain a string (length of each string is at most 1000 characters). Output a single integer representing the number of unique strings in the list. **Example:** Input: ``` 5 Hello world hello World hello ``` Output: ``` 2 ```","solution":"def count_unique_strings(n, strings): Returns the number of unique strings in the input list. Strings are considered the same regardless of case sensitivity and leading/trailing whitespaces. :param n: int, number of strings :param strings: list of str, the list of input strings. :return: int, number of unique strings unique_strings = set() for s in strings: cleaned_string = s.strip().lower() unique_strings.add(cleaned_string) return len(unique_strings)"},{"question":"Vova has a collection of robots, each identified by a name. He has noticed that each robot name contains exactly one digit (0-9), and he wants to categorize his robots based on the digit present in their names. Can you help Vova? Given a list of robot names, determine the count of robots corresponding to each digit from 0 to 9. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of robots. - Each of the next n lines contains a robot name, a string of length no more than 100 characters. Output: - Print exactly 10 lines, where the i-th line should contain the count of robot names containing the digit i-1. Example: Input: 5 Robo123 X2Y TeSt1 MyRobot8 Sample0 Output: 1 2 1 0 0 0 0 1 0 0 Explanation: - \\"Sample0\\" contains digit \'0\', so count for \'0\' is 1. - \\"Robo123\\" contains digit \'1\' and \'2\' (other digits \'3\' are ignored for counting purposes). - \\"X2Y\\" contains digit \'2\'. - \\"TeSt1\\" contains digit \'1\'. - \\"MyRobot8\\" contains digit \'8\'. Thus, there is one name with \'0\', two with \'1\', one with \'2\', and one with \'8\'. The rest of the digits have zero occurrences.","solution":"def count_robots_by_digit(n, robot_names): Returns a list of counts of robot names containing each digit from 0 to 9. Args: n (int): the number of robots. robot_names (list of str): list of robot names. Returns: list of int: a list of counts of robot names containing each digit from 0 to 9. counts = [0] * 10 for name in robot_names: for char in name: if char.isdigit(): counts[int(char)] += 1 return counts"},{"question":"Petya is designing a simple encryption system for his messages. The encryption system is based on shifting the characters of his message by a fixed number of positions in the reverse order within the alphabet. More formally, given a string s consisting only of lowercase letters and a positive integer k, each letter in s should be replaced by the letter that appears k places before it in the alphabet, wrapping around if necessary. For example, if k=3 and the letter is \'d\', it should be replaced by \'a\'. If the letter is \'a\', it should wrap around and be replaced by \'x\'. Your task is to implement a function that performs this encryption. # Input The input consists of two lines. The first line contains the string s (1 ≤ |s| ≤ 10^6), which represents the message to be encrypted. The second line contains the integer k (1 ≤ k ≤ 10^9), which represents the shift value. # Output Output the encrypted message. # Example Input ``` hello 3 ``` Output ``` ebiil ``` # Note In this example, the string \\"hello\\" is encrypted by shifting each letter by 3 positions in reverse: - \'h\' becomes \'e\' - \'e\' becomes \'b\' - \'l\' becomes \'i\' - \'l\' becomes \'i\' - \'o\' becomes \'l\'","solution":"def encrypt_message(s, k): Encrypt the message s by shifting each letter k positions in reverse order within the alphabet. k = k % 26 # Reduce k to a value between 0 and 25 encrypted_message = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') - k) % 26) + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Once upon a time, there were n squirrels in a forest who discovered a particularly large tree filled with acorns. Each squirrel is identified by an integer from 1 to n. The squirrels want to gather all the acorns and divide them among themselves. However, being fair, they decided to adopt a specific system to divide the acorns. Each squirrel i is assigned a rate ai which denotes the number of acorns it can gather in one hour. Unfortunately, the forest only has t hours before the acorns disappear forever. Naturally, you want to determine the maximum number of acorns that the squirrels can collect in these t hours. Your task is to write a program that computes the maximum number of acorns that can be collected by the squirrels within the given time. Input: The first line of the input contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 10^4), where n is the number of squirrels, and t is the number of hours. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), where ai is the number of acorns squirrel i can collect in one hour. Output: Print a single integer, the maximum number of acorns that can be collected by the squirrels in t hours. Example: Input: 3 5 4 2 3 Output: 45 Explanation: In the given example, the first squirrel can collect 4 acorns per hour, the second can collect 2 acorns per hour, and the third can collect 3 acorns per hour. Over 5 hours, collectively, they gather: 4 * 5 + 2 * 5 + 3 * 5 = 20 + 10 + 15 = 45 acorns. Notice: The order in which each squirrel gathers the acorns does not affect the total number of acorns collected.","solution":"def max_acorns(n, t, rates): Calculate the maximum number of acorns that can be collected by the squirrels within the given time. Parameters: n (int): Number of squirrels. t (int): Number of hours. rates (list): List of integers where each element ai is the rate at which squirrel i can collect acorns per hour. Returns: int: Maximum number of acorns collected. total_acorns = sum(rates) * t return total_acorns"},{"question":"You are given a list of events happening on different days. Each event has a starting day and an ending day and requires a mandatory number of consecutive days to be planned within this period. You need to select the most significant set of non-overlapping events to attend. An event is considered significant based on the number of days it spans. Write a function `max_significant_events(events)` where `events` is a list of tuples `[(start1, end1, mandatory_days1), (start2, end2, mandatory_days2), ...]`. The function should return the maximum count of significant events that can be attended without any overlapping days. # Constraints: - Each tuple `(start, end, mandatory_days)` represents an event with `start` (integer) as the starting day, `end` (integer) as the ending day, and `mandatory_days` (integer) as the mandatory consecutive days required within this period (`1 <= start < end <= 10^6` and `1 <= mandatory_days <= (end - start + 1)`). - The number of events should not exceed `10^5`. # Example: Input: ```python events = [(1, 10, 3), (2, 5, 2), (6, 15, 3), (11, 12, 1)] ``` Output: ```python 2 ``` Explanation: The chosen non-overlapping significant events are: 1. Event from day 1 to day 10 with mandatory 3 days. 2. Event from day 11 to day 12 with mandatory 1 day. These do not overlap with each other and maximize the count of significant events attended.","solution":"def max_significant_events(events): # Sort events by their ending day, secondary sort by starting day events.sort(key=lambda x: (x[1], x[0])) # Initialize count = 0 last_end_day = 0 for start, end, mandatory_days in events: if start > last_end_day: # Select this event count += 1 # Update last_end_day to the end day of the current event last_end_day = end return count"},{"question":"Jesse loves sequences. A sequence is defined as a list of numbers. Jesse is particularly interested in strictly increasing sequences, where each subsequent number is greater than the previous one. He wants to know the maximum length of a strictly increasing sequence that can be formed from a given list of integers. Write a function to determine the maximum length of a strictly increasing subsequence from the given list. The input will be an integer n representing the number of elements in the list followed by n integers representing the list itself. **Input:** - The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the list. - The second line contains n integers, each between -10^9 and 10^9. **Output:** - Print a single integer representing the length of the longest strictly increasing subsequence that can be formed from the given list. **Example:** Input: ``` 6 10 22 9 33 21 50 ``` Output: ``` 4 ``` Explanation: The longest strictly increasing subsequence is [10, 22, 33, 50], which has length 4.","solution":"def length_of_lis(nums): Returns the length of the longest strictly increasing subsequence in the given list of integers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"An island is inhabited by a tribe that communicates using a unique language made up of various symbols. Each symbol represents a specific positive integer. In order to record their history, the tribe decides to inscribe a sequence of these symbols on stone tablets. However, their forest home is frequently visited by neighboring tribes who attempt to alter their inscriptions. To protect their records, they use a special encoding scheme: for each tablet, they shift each symbol in the sequence by a constant positive integer k positions forward in their language symbol set. For example, if their symbol set consists of integers 1 through 10 and the constant k is 3, then symbol 1 becomes symbol 4, symbol 2 becomes symbol 5, and so on. Symbol 8 would become symbol 1 since it wraps around. Given the sequence of symbols written on the tablet and the constant shift value k, determine the original sequence of symbols before the encoding was applied. Function Signature: ```python def decode_symbols(encoded_sequence: List[int], k: int, symbol_set_size: int) -> List[int]: ``` # Input - `encoded_sequence`: A list of integers representing the encoded sequence of symbols on the tablet. - `k`: An integer representing the constant shift value used in the encoding scheme. - `symbol_set_size`: An integer representing the total number of different symbols in the tribe\'s language set. # Output - Return a list of integers representing the original sequence of symbols before encoding. # Examples ```python decode_symbols([4, 5, 6], 3, 10) # returns [1, 2, 3] decode_symbols([8, 9, 10, 2], 4, 10) # returns [4, 5, 6, 8] decode_symbols([1, 2, 3], 1, 3) # returns [3, 1, 2] ``` # Constraints - The encoded sequence will only contain positive integers within the range of the symbol set. - The shift value k will be a positive integer less than the symbol set size.","solution":"from typing import List def decode_symbols(encoded_sequence: List[int], k: int, symbol_set_size: int) -> List[int]: Decodes the given encoded sequence of symbols by shifting them k positions backward in the symbol set which wraps around. Args: encoded_sequence (List[int]): The encoded sequence of symbols k (int): The constant shift value used in the encoding scheme symbol_set_size (int): The total number of different symbols in the tribe\'s language set Returns: List[int]: The original sequence of symbols before encoding return [(symbol - k - 1 + symbol_set_size) % symbol_set_size + 1 for symbol in encoded_sequence]"},{"question":"There is a new restaurant in town, and they serve a special kind of dish which is a random combination of ingredients from their pantry. The chef has created a new ingredient combination, and you need to verify if a guest\'s allergic reaction could be due to the presence of certain ingredients intermixed in this dish. Each ingredient in the pantry has a unique identifier ranging from 1 to n. The chef used multiple ingredients from the pantry to create a dish. You are given a list of ingredients in the dish and the guest\'s allergies. Given the dish and the allergic ingredient list, determine if it\'s possible that the allergic reaction is due to any of the ingredients mixed in the dish. Input: - The first line contains two integers n (1 leq n leq 1000) and m (1 leq m leq 1000) — the number of ingredients in the pantry and the number of guests, respectively. - The second line contains k (1 leq k leq n) integers representing the ingredients present in the dish. - For the following m lines, each line contains a single integer x (1 leq x leq n), which represents the ingredient a guest is allergic to. Output: - For each guest, print \\"Allergic\\" if any of the ingredients they are allergic to are in the dish. Otherwise, print \\"Not Allergic\\". Example: Input: ``` 5 3 1 2 3 2 4 3 ``` Output: ``` Allergic Not Allergic Allergic ``` Explanation: - The dish consists of ingredients [1, 2, 3]. - Guest 1 is allergic to ingredient 2 which is in the dish, so the output is \\"Allergic\\". - Guest 2 is allergic to ingredient 4 which is not in the dish, so the output is \\"Not Allergic\\". - Guest 3 is allergic to ingredient 3 which is in the dish, so the output is \\"Allergic\\".","solution":"def check_allergies(n, m, dish, allergies): Determines if a guest\'s allergic reaction could be due to the presence of certain ingredients in the dish. Parameters: - n (int): number of ingredients in the pantry. - m (int): number of guests. - dish (list of int): list of ingredients present in the dish. - allergies (list of int): list of ingredients each guest is allergic to. Returns: - list of str: \\"Allergic\\" or \\"Not Allergic\\" for each guest. dish_set = set(dish) result = [] for allergy in allergies: if allergy in dish_set: result.append(\\"Allergic\\") else: result.append(\\"Not Allergic\\") return result"},{"question":"Eve is trying to gain unauthorized access to a bank system that uses dynamic multi-factor authentication. Each authentication factor is derived from a secret integer sequence H that has a specified length L. The system uses an algorithm that generates an authentication code by performing a series of prefix sums on the sequence H. The prefix sum of a sequence S is defined as a sequence PS where PS_i is the sum of all elements from the start up to the i-th element. Formally, PS_i = S_1 + S_2 + ... + S_i for all valid indices i. To increase security, the system truncates some initial elements from this prefix sum sequence at random. Adam, the bank\'s security expert (who is also not very smart), decided to store only the remaining part of the prefix sum sequence. Because no one expects the sequence to start from the beginning, the actual segment of the stored prefix sums may start from any index greater than 1. Adam thought that this would make it harder for Eve to reverse-engineer the original sequence H. For instance, if H = (3, 1, 4, 2), the full prefix sum sequence would be PS = (3, 4, 8, 10). Adam then stores a truncated version of this sequence, e.g., T = (8, 10). Given a list of truncated prefix sums, Eve wants to reconstruct the original secret integer sequence H starting from the first element and determine the lexicographically smallest possible sequence. If multiple sequences have the same lexicographical order, consider the sequence with the smallest elements for equal indices first. The first line of input contains a single integer N, the length of the truncated prefix sums list (1 ≤ N ≤ 300000). The second line contains N integers T1, T2, ..., TN (1 ≤ Ti ≤ 10^9), the truncated prefix sums. Output a single line with the complete lexicographically smallest original sequence H that results in the provided truncated prefix sums. For example, for the input: 4 5 9 12 14 The original sequence H which results in the provided prefix sums is (5, 4, 3, 2) since its prefix sum sequence is (5, 9, 12, 14) and it\'s lexicographically smallest.","solution":"def find_original_sequence(n, truncated_prefix_sums): Given a list of truncated prefix sums, reconstructs the original sequence H. Args: - n (int): The length of the truncated prefix sums list. - truncated_prefix_sums (list[int]): The truncated prefix sums. Returns: - list[int]: The original sequence H. original_sequence = [truncated_prefix_sums[0]] for i in range(1, n): original_sequence.append(truncated_prefix_sums[i] - truncated_prefix_sums[i-1]) return original_sequence # Example usage: # Given the example input: # 4 # 5 9 12 14 # The output should be: # 5, 4, 3, 2 n = 4 truncated_prefix_sums = [5, 9, 12, 14] result = find_original_sequence(n, truncated_prefix_sums) print(result) # [5, 4, 3, 2]"},{"question":"Given a list of n integers, find all unique triplets in the list which gives the sum of zero. You should return a list of all unique triplets, where each triplet [a, b, c] follows the rules a + b + c = 0, without duplication in the triplets. The solution set must not contain duplicate triplet. For example, given the list [-1, 0, 1, 2, -1, -4], the solution set is: [[-1, 0, 1], [-1, -1, 2]] The input consists of: - The first line contains an integer n (1 ≤ n ≤ 3000) - the number of integers. - The second line contains n space-separated integers a1, a2, ..., an each of which does not exceed the range [-10000, 10000]. Print the list of triplets in any order. Note: Your solution should have a complexity of O(n^2) to pass all tests.","solution":"def three_sum(nums): Finds all unique triplets in the list which give the sum of zero. Args: nums: List of integers. Returns: List of all unique triplets [a, b, c] such that a + b + c = 0. nums.sort() result = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = 0, 0 l, r = i + 1, n - 1 while l < r: s = nums[i] + nums[l] + nums[r] if s < 0: l += 1 elif s > 0: r -= 1 else: result.append([nums[i], nums[l], nums[r]]) while l < r and nums[l] == nums[l + 1]: l += 1 while l < r and nums[r] == nums[r - 1]: r -= 1 l += 1 r -= 1 return result"},{"question":"Implement a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". # Example 1: ``` Input: [\\"flower\\",\\"flow\\",\\"flight\\"] Output: \\"fl\\" ``` # Example 2: ``` Input: [\\"dog\\",\\"racecar\\",\\"car\\"] Output: \\"\\" ``` Explanation: There is no common prefix among the input strings. # Note: - All given inputs are in lowercase letters a-z. - Constraints: The input array will have a length of 1 ≤ len ≤ 200 and each string\'s length will be between 1 and 1000.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. :param strs: List of strings :return: The longest common prefix or an empty string if none exists if not strs: return \\"\\" prefix = strs[0] for string in strs[1:]: while string.find(prefix) != 0: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"A kingdom consists of n cities connected by m bidirectional roads. The king is planning to send messages from his capital city (city 1). However, some roads may be occupied by bandits, so he needs to ensure that there is at least one safe path to each city if possible. A path between two cities is considered safe if and only if it comprises roads that are not occupied by bandits. You are given: 1. An integer n (1 ≤ n ≤ 100,000) — the number of cities. 2. An integer m (1 ≤ m ≤ 200,000) — the number of roads. 3. m pairs of integers (u, v) (1 ≤ u, v ≤ n) — representing a road between city u and city v. 4. An integer k (0 ≤ k ≤ m) — the number of roads occupied by bandits. 5. k distinct integers — the indices of the roads (1-based) that are occupied by bandits. Output the minimum number of additional roads the king needs to build such that there is a safe path from city 1 to every other city. If it is impossible to ensure this with any number of additional roads, print -1. The first line contains integers n, m, and k. The next m lines contain pairs of integers u and v representing the roads. The next line contains k integers representing the indices of the roads occupied by bandits. Print a single integer — the minimum number of additional roads needed, or -1 if it\'s impossible to connect all cities without occupied roads. In the first sample, adding one new road between cities 1 and 4 ensures all cities can be reached from the capital city. In the second sample, it is not possible to connect all cities due to bandits occupying critical roads.","solution":"from collections import defaultdict, deque def min_additional_roads(n, m, roads, k, bandit_roads): # Convert 1-based bandit roads to 0-based by subtracting 1 from each bandit_roads = set(road - 1 for road in bandit_roads) # Build the graph excluding bandit roads graph = defaultdict(list) for i, (u, v) in enumerate(roads): if i not in bandit_roads: graph[u].append(v) graph[v].append(u) # BFS to find all reachable cities from city 1 visited = set() queue = deque([1]) visited.add(1) while queue: curr_city = queue.popleft() for neighbor in graph[curr_city]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # If some cities are not reachable, check if we can count them unreachable_cities = set(range(1, n + 1)) - visited if not unreachable_cities: return 0 additional_roads_needed = len(unreachable_cities) return additional_roads_needed if additional_roads_needed <= m - k else -1 # Example usage n = 4 m = 4 roads = [(1, 2), (2, 3), (3, 4), (1, 4)] k = 1 bandit_roads = [2] print(min_additional_roads(n, m, roads, k, bandit_roads)) # Output should be 1 or -1 based on reachability"},{"question":"In a small kingdom, there are m different types of magical artifacts. Each artifact belongs to one of these m types and is assigned a unique power level, which is determined by a positive integer. The kingdom\'s treasure chamber is organized in such a way that every artifact occupies a unique position, and artifacts of the same type are stored consecutively. The treasure chamber\'s layout can be represented as an array of integers where each integer indicates the type of artifact stored at that position. Beside this array is another array that represents the power level of each artifact at the corresponding position in the treasure chamber. The kingdom\'s scholars often have several queries about the magical artifacts. Each query is defined by a position range and the scholars desire to know the maximum power level among the artifacts of a specific type within that range. Can you help the scholars by answering their queries? The first input line contains an integer n (1 ≤ n ≤ 105), the number of artifact positions in the treasure chamber. The second line contains n integers representing the types of artifacts in the treasure chamber. The third line contains n integers representing the power levels of the artifacts in the treasure chamber. The fourth line contains an integer q (1 ≤ q ≤ 105), the number of queries. Each of the following q lines contains three integers l, r and t (1 ≤ l ≤ r ≤ n, 1 ≤ t ≤ m), which represent a query asking for the maximum power level of artifacts of type t within the positions from l to r (inclusive). Output q lines. For each query, output the maximum power level of artifacts of type t within the given range, or -1 if there are no artifacts of that type within the specified range. Example: ``` Input: 8 1 2 1 3 2 1 4 3 5 3 8 6 7 2 4 9 3 2 5 2 1 7 1 3 8 3 Output: 7 8 9 ```","solution":"def max_power(n, artifact_types, power_levels, q, queries): results = [] for l, r, t in queries: max_power_level = -1 for i in range(l - 1, r): if artifact_types[i] == t: if power_levels[i] > max_power_level: max_power_level = power_levels[i] results.append(max_power_level) return results"},{"question":"Given a 2D binary matrix, you need to find the number of unique islands. An island is a group of connected 1\'s (horizontally, vertically, or diagonally). Two islands are considered to be the same if and only if one island can be translated (not rotated or reflected) to equal the other island. Function Signature: ```python def numDistinctIslands(grid: List[List[int]]) -> int: ``` # Input - A 2D list `grid` where each element is a 0 or 1. - The length and width of `grid` will be at most 50. # Output - Return an integer, the number of distinct islands. # Examples 1. ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 0, 1, 1] ] assert numDistinctIslands(grid) == 1 ``` 2. ```python grid = [ [1, 1, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1] ] assert numDistinctIslands(grid) == 3 ``` # Notes - One way to identify and compare islands is by normalizing their shape via translating them to the origin (top-left corner). - Consider using depth-first search (DFS) or breadth-first search (BFS) to explore and record the shape of each island. - Python\'s set can be useful for storing and comparing the unique shapes of islands.","solution":"from typing import List, Tuple, Set, Callable def numDistinctIslands(grid: List[List[int]]) -> int: def dfs(x: int, y: int, origin: Tuple[int, int], shape: Set[Tuple[int, int]]): if (0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1): grid[x][y] = 0 # Mark the cell as visited shape.add((x - origin[0], y - origin[1])) for dx, dy in directions: dfs(x + dx, y + dy, origin, shape) # Possible directions (horizontal, vertical, diagonal) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] seen_shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: shape = set() dfs(i, j, (i, j), shape) if shape: seen_shapes.add(frozenset(shape)) # Add the normalized shape to the set return len(seen_shapes)"},{"question":"You are given an array of integers representing temperatures recorded daily over a period of days. Each temperature is recorded at the end of the day. Your task is to determine the number of days you have to wait until a warmer temperature. If there is no future day for which this is possible, input 0 for that day. Write a function `daily_temperatures(temperatures: List[int]) -> List[int]` that takes a list of integers representing the temperatures and returns a list of integers representing the number of days to wait for a warmer temperature for each respective day. **Input:** - A list of integers `temperatures` (1 <= len(temperatures) <= 10^5, -100 <= temperatures[i] <= 100) **Output:** - A list of integers with each integer representing the number of days until a warmer temperature. If no warmer temperature is in the future, return 0 for that day. **Sample Input 1:** ``` daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) ``` **Sample Output 1:** ``` [1, 1, 4, 2, 1, 1, 0, 0] ``` **Sample Input 2:** ``` daily_temperatures([30, 40, 50, 60]) ``` **Sample Output 2:** ``` [1, 1, 1, 0] ``` **Sample Input 3:** ``` daily_temperatures([30, 29, 28, 27]) ``` **Sample Output 3:** ``` [0, 0, 0, 0] ``` In the first sample, for the first day with temperature 73, the next day has a temperature of 74, so you have to wait 1 day. For the second day with temperature 74, the next day with a higher temperature is 75 on the following day, so again you wait 1 day. For the third day with temperature 75, the next warmer temperature occurs on the seventh day with temperature 76, so you have to wait 4 days, and so on.","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: n = len(temperatures) answer = [0] * n stack = [] # This will store indices of the \'temperatures\' list for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() answer[index] = i - index stack.append(i) return answer"},{"question":"ZooKeeper at the Wonderland Zoo is tasked with organizing the feeding schedule for different animals. The zoo has different species of animals, and each species has a name that must be sorted in a specific lexicographical order. However, some species names can conflict with the traditional alphabetical order. The ZooKeeper wants to know if there\'s a custom order for the alphabet letters such that the species names provided are in lexicographical order according to this custom alphabet. If it is possible to determine such an order, the ZooKeeper needs to know what that order is. Lexicographical order for strings s and t is defined by: 1. Find the first position where the two strings differ, si ≠ ti. 2. Compare the differing characters si and ti according to their position in a given custom alphabet. 3. If there is no differing position and one string is a prefix of the other, the shorter string is considered smaller. Here\'s the input format: The first line contains an integer m (1 ≤ m ≤ 50), the number of species names. Each of the next m lines contains one species name (1 ≤ |name| ≤ 50), consisting of lowercase Latin letters. All species names are unique. The task is to check if there exists an order of the letters in the Latin alphabet such that the given species names are sorted in lexicographical order. If such an order exists, output any valid permutation of the alphabet that satisfies the condition. If no such order exists, output \\"Impossible\\". Example Input: 4 bunny bear banana cat Example Output: anyvalidpermutation The solution should identify if a valid permutation of the alphabet letters exists such that the names are sorted correctly. If a valid order cannot be determined, output \\"Impossible\\".","solution":"from collections import defaultdict, deque def find_order_of_alphabet(species_names): Determine a valid permutation of the alphabet letters such that the given species names are sorted in lexicographical order based on this permutation. If such an order does not exist, return \\"Impossible\\". def topological_sort(graph, in_degree): queue = deque([node for node in graph if in_degree[node] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == len(graph): return \\"\\".join(order) else: return \\"Impossible\\" # Initialize graph and in-degree count graph = defaultdict(set) in_degree = {chr(i): 0 for i in range(ord(\'a\'), ord(\'z\') + 1)} # Build the graph for i in range(1, len(species_names)): first, second = species_names[i - 1], species_names[i] min_length = min(len(first), len(second)) for j in range(min_length): if first[j] != second[j]: if second[j] not in graph[first[j]]: graph[first[j]].add(second[j]) in_degree[second[j]] += 1 break else: if len(first) > len(second): return \\"Impossible\\" return topological_sort(graph, in_degree) # Example usage function to encapsulate input-output handling def solve(input_text): lines = input_text.strip().split(\'n\') m = int(lines[0]) species_names = lines[1:m + 1] return find_order_of_alphabet(species_names)"},{"question":"# Custom Coding Assessment Question: Path Navigation Grid Marina has a grid size m x n, represented by a matrix. Each cell of the matrix contains one of three possible characters: \'S\', \'E\', or \'#\'. \'S\' represents the starting point where Marina begins, \'E\' represents the exit point she wants to reach, and \'#\' represents an obstacle that Marina cannot pass through. Any cell that is not \'S\', \'E\', or \'#\' is an empty cell represented by \'.\' which Marina can traverse freely. Marina can move in four possible directions - up, down, left, and right. She wants to know if it\'s possible for her to reach the exit point from the starting point without passing through any obstacles. Write a function **is_path_possible** that takes a matrix of size m x n and returns \\"YES\\" if there is a path from \'S\' to \'E\' without passing through any obstacles, otherwise returns \\"NO\\". **Input:** - A list of strings, each of length n, where each string represents a row in the matrix. The total number of strings (rows) is m. - It is guaranteed that there will be exactly one \'S\' and one \'E\' in the matrix. **Output:** - Return \\"YES\\" if there is a valid path from \'S\' to \'E\', else return \\"NO\\". **Constraints:** - 1 ≤ m, n ≤ 1000 - The string contains only \'S\', \'E\', \'#\', and \'.\' characters. **Example:** **Input:** ``` [ \\"S..#\\", \\"...#\\", \\"#.E#\\", \\"....\\" ] ``` **Output:** ``` \\"YES\\" ``` **Explanation:** ``` Marina can start from cell (0,0) and move right, down, down, right to reach the exit at cell (2,2). ```","solution":"def is_path_possible(matrix): Checks if there\'s a path from \'S\' to \'E\' in the given matrix without passing through obstacles (#) Parameters: matrix (list of str): The grid represented as a list of strings Returns: str: \\"YES\\" if a path exists, otherwise \\"NO\\" m, n = len(matrix), len(matrix[0]) # Find the starting (S) and ending (E) points for i in range(m): for j in range(n): if matrix[i][j] == \'S\': start = (i, j) if matrix[i][j] == \'E\': end = (i, j) def is_valid(x, y): return 0 <= x < m and 0 <= y < n and matrix[x][y] != \'#\' def dfs(x, y): if not is_valid(x, y) or (x, y) in visited: return False if (x, y) == end: return True visited.add((x, y)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if dfs(nx, ny): return True return False visited = set() return \\"YES\\" if dfs(*start) else \\"NO\\""},{"question":"A zoo is organizing a racing event for its animals. There are n animals participating in this race. Each animal moves at a constant speed and follows a fixed route. The race track is made up of k segments, and each segment has a different length. The animals can start and end their race at different segments of the track. The objective is to determine the maximum total distance covered by all animals in a given segment, and in case multiple animals ran the same distance, the one who started running first is considered. The location of each animal\'s starting and ending segment, their speed, and the lengths of the segments are given. The lengths of all the segments add up to the total track length L. You are given the starting segment (si), ending segment (ei), and speed (vi) for each animal. Also provided are the lengths of each track segment in the order they appear. Determine the maximum total distance covered by any animal in each segment and return the total distance for the race as an integer. The first line contains two integers n and k (1 ≤ n, k ≤ 100). The second line contains k integers representing the lengths of the segments. The next n lines each contain three integers si, ei, and vi (1 ≤ si ≤ ei ≤ k, 1 ≤ vi ≤ 100) representing the starting segment, ending segment, and speed of each animal respectively. Print a single integer, the maximum total distance covered by any animals in all segments. Example: Input: 3 5 2 1 3 2 4 1 3 2 2 5 1 3 4 3 Output: 37 Explanation: - Animal 1 starts from segment 1 and ends at segment 3 with speed 2. It covers segments 1, 2, and 3. - Animal 2 starts from segment 2 and ends at segment 5 with speed 1. It covers segments 2, 3, 4, and 5. - Animal 3 starts from segment 3 and ends at segment 4 with speed 3. It covers segments 3 and 4. - Total distance coverages: 4 (segment 1), 1 (segment 2), 9 (segment 3), 10 (segment 4), 4 (segment 5). - Total: 28.","solution":"def find_maximum_total_distance(n, k, segment_lengths, animals): # Initialize an array to store the total distance for each segment distance_covered = [0] * k # Iterate over each animal for si, ei, vi in animals: for segment in range(si-1, ei): distance_covered[segment] += segment_lengths[segment] * vi return sum(distance_covered) # Example usage if __name__ == \\"__main__\\": # Provided input n, k = 3, 5 segment_lengths = [2, 1, 3, 2, 4] animals = [ (1, 3, 2), (2, 5, 1), (3, 4, 3) ] # Expected Output: 37 print(find_maximum_total_distance(n, k, segment_lengths, animals))"},{"question":"Alice loves to play with strings. She recently came across a string pattern game and wants to solve it. Given a string `s`, she needs to check if the string follows a specific pattern of alternating characters \\"ababab...\\". A string follows the alternating pattern if no two adjacent characters in the string are the same. For example, \\"abab\\" or \\"cdcd\\" follow the pattern, but \\"aabb\\" or \\"abca\\" do not. Your task is to write a function that checks if the given string `s` follows this alternating pattern. **Input** The input consists of a single line containing the string `s` of length from 1 to 100 characters, inclusive. The string will contain only lowercase English letters. **Output** Print \\"YES\\" (without quotes) if the string follows the alternating pattern, otherwise print \\"NO\\" (without quotes). **Examples** Input: ``` abab ``` Output: ``` YES ``` Input: ``` aabb ``` Output: ``` NO ```","solution":"def follows_alternating_pattern(s): Returns \\"YES\\" if the string follows the alternating pattern of characters, otherwise returns \\"NO\\". for i in range(len(s) - 1): if s[i] == s[i + 1]: return \\"NO\\" return \\"YES\\""},{"question":"Grisha is studying a unique kind of wave pattern on a heart monitor, represented as a string of characters where each character is either \'u\' (uphill), \'d\' (downhill), \'p\' (peak), or \'v\' (valley). His task is to find the longest subarray where the pattern strictly alternates between \'u\' and \'d\', and must always start with \'u\'. Before analyzing, Grisha can perform an operation multiple times where he switches two characters in the string to optimize the length of the alternating subarray. However, a \'p\' or \'v\' cannot be part of the alternating subarray. Determine the length of the longest alternating subarray he can form that starts with an \'u\' and strictly alternates between \'u\' and \'d\' after performing the switching operations. The input consists of a single string `s` (1 ≤ |s| ≤ 10^5), where `|s|` is the length of the string `s`, and each character is \'u\', \'d\', \'p\', or \'v\'. Output a single integer representing the maximum possible length of the desired alternating subarray. For example: - Input: `ududpvud` - Output: `6` Explanation: Switching the second \'d\' and \'p\'; switching the fifth \'d\' and \'v\', the resulting sequence can be \'ududud\' which gives the answer 6.","solution":"def longest_alternating_subarray(s): Returns the length of the longest alternating subarray that starts with \'u\' and alternates between \'u\' and \'d\'. u_count = s.count(\'u\') d_count = s.count(\'d\') # The longest alternating subarray length should be the minimum of # the counts of \'u\' and \'d\', as they must pair, multiplied by 2. # If \'u\' count is more than \'d\' count, we can pair all \'d\' with corresponding \'u\'. # If \'d\' count is more than \'u\' count, we can pair all \'u\' with corresponding \'d\'. max_length = min(u_count, d_count) * 2 return max_length"},{"question":"Alex is learning about binary trees. To better understand how they work, he wants to practice with a specific kind of binary tree called a \\"Balanced Binary Tree\\". A balanced binary tree is defined as a binary tree in which the height of the two subtrees of every node never differs by more than one. Write a function to determine if a given binary tree is balanced. # Function Signature ```python def is_balanced(root: TreeNode) -> bool: pass ``` # Input - The function will receive the root of the binary tree. A TreeNode is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - The binary tree can have up to 10^4 nodes. - Each node in the binary tree contains an integer value. # Output - The function should return a boolean, indicating if the binary tree is balanced (`True` if it is balanced, `False` otherwise). # Example ```python # Example 1: # Input: # 3 # / # 9 20 # / # 15 7 # Output: True # Example 2: # Input: # 1 # / # 2 2 # / #3 3 # / # 4 4 # Output: False ``` # Note You can assume that the input binary tree follows all the usual properties of a binary tree, but the balance has to be checked according to the provided definition. The function should run efficiently even for large input sizes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: Determine if a binary tree is height-balanced. def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 current_height = max(left_height, right_height) + 1 return current_height, current_balanced return height_and_balance(root)[1]"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function that determines if a phrase is a palindrome. The function should ignore spaces, special characters, and differences in capitalization. # Input - A single string `phrase` (1 ≤ length of phrase ≤ 1000). The string may contain alphanumeric characters and spaces. # Output - Return `True` if the phrase is a palindrome, otherwise return `False`. # Examples - Input: \\"A man, a plan, a canal, Panama\\" Output: `True` - Input: \\"Was it a car or a cat I saw?\\" Output: `True` - Input: \\"This is not a palindrome\\" Output: `False` # Note For the phrase \\"A man, a plan, a canal, Panama\\": - Remove non-alphanumeric characters and convert it to lowercase: \\"amanaplanacanalpanama\\" - This reads the same forward and backward, so the function returns `True`.","solution":"import re def is_palindrome(phrase): Determines if the given phrase is a palindrome, ignoring spaces, punctuation, and capitalization. Args: - phrase (str): The input phrase. Returns: - bool: True if the phrase is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase clean_phrase = re.sub(r\'[^A-Za-z0-9]\', \'\', phrase).lower() # Check if the cleaned phrase reads the same forward and backward return clean_phrase == clean_phrase[::-1]"},{"question":"In a distant land called Algorithmia, there is a special kind of festival known as the Festival of Paths. At this festival, the inhabitants like to build a network of roads between their cities, allowing them to travel from one city to another. However, due to budget constraints, they can only afford to build a limited number of direct roads. The network of cities and roads can be represented as a directed graph, where each node represents a city and each edge represents a road between two cities. Each road has an associated travel time. Given a directed graph with n cities and m roads, and the travel time for each road, determine the shortest travel time from a specified starting city s to a specified destination city t. If there is no possible way to travel from city s to city t, return -1. The input consists of: - An integer n (2 ≤ n ≤ 10^5), the number of cities. - An integer m (1 ≤ m ≤ 10^5), the number of roads. - An integer s (1 ≤ s ≤ n), the starting city. - An integer t (1 ≤ t ≤ n), the destination city. - m lines each containing three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^9), where u is the starting city of the road, v is the ending city of the road, and w is the travel time. Output a single integer, the shortest travel time from city s to city t. If there is no path from s to t, output -1. For example, consider the following input: ``` 4 5 1 3 1 2 2 2 3 3 1 3 5 3 4 4 4 1 1 ``` The output should be: ``` 5 ``` Explanation: In this example, there is a direct road from city 1 to city 3 with a travel time of 5, which is shorter than travelling from city 1 to city 2 (2 units of time) and then from city 2 to city 3 (3 units of time, totaling 5 units of time).","solution":"import heapq def shortest_travel_time(n, m, s, t, roads): Determines the shortest travel time from city s to city t in a directed graph. Args: - n (int): Number of cities. - m (int): Number of roads. - s (int): Starting city. - t (int): Destination city. - roads (list): List of tuples representing roads (u, v, w). Returns: - int: Shortest travel time from city s to city t. Returns -1 if no path exists. # Create the adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s algorithm to find the shortest path # Priority Queue to select the edge with the minimum weight priority_queue = [(0, s)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while priority_queue: current_cost, current_node = heapq.heappop(priority_queue) if current_node == t: return current_cost if current_cost > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_cost + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1"},{"question":"You are managing a list of tasks in a productivity application. Each task is either added to the list with a certain priority or a task with the highest priority is marked as completed. Initially, the task list is empty. Your job is to determine if the sequence of operations is valid, and to output the sequence of tasks as they were added to the list. The sequence of events is recorded in a list where each event is either: - \\"add x\\": A task with priority x is added to the task list. Each priority x is an integer between 1 and n (inclusive). - \\"complete\\": The task with the highest priority is marked as completed. The highest priority task is the smallest number present in the task list at that time. You are given the number of tasks n (1 ≤ n ≤ 10^5) and 2n lines of events describing the sequence of operations. Each priority from 1 to n occurs exactly once in the \\"add x\\" events. If the sequence of operations is valid, output \\"VALID\\" followed by a space-separated list of the task priorities in the order they were added. If there are multiple valid sequences, print any of them. If the sequence of operations is not valid, output \\"INVALID\\". Example Input 1: ``` 3 add 2 add 1 complete add 3 complete complete ``` Example Output 1: ``` VALID 2 1 3 ``` Example Input 2: ``` 2 complete add 1 add 2 complete complete ``` Example Output 2: ``` INVALID ``` In the first example, first, the task with priority 2 is added, followed by the task with priority 1. Then, the task with priority 1 (highest priority task at that time) is completed. Next, the task with priority 3 is added, and then the tasks with priorities 2 and 3 are completed in that order. In the second example, an attempt is made to complete a task before any task has been added, which is invalid.","solution":"def task_manager(n, events): from heapq import heappush, heappop task_list = [] added_tasks = [] current_set = set() for event in events: if event.startswith(\\"add\\"): priority = int(event.split()[1]) if priority < 1 or priority > n or priority in current_set: return \\"INVALID\\" heappush(task_list, priority) added_tasks.append(priority) current_set.add(priority) elif event == \\"complete\\": if not task_list: return \\"INVALID\\" heappop(task_list) if len(task_list) != 0: return \\"INVALID\\" return \\"VALID \\" + \\" \\".join(map(str, added_tasks))"},{"question":"Alice is practicing for her programming contest, and she is focusing on string manipulation problems. One of her challenges involves transforming a given string into a palindrome. A palindrome is a string that reads the same forward and backward. Given a string s, Alice wants to make it a palindrome by adding the minimum number of characters possible to its end. Help Alice determine the minimal number of characters needed to transform the given string into a palindrome. The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. For each test case, print a single integer, the minimal number of characters that need to be added to the end of the string to make it a palindrome. Consider the following example: Input: 3 aab race abcd Output: 1 3 3 Explanation: 1. For the string \\"aab\\", adding one character (\'a\') at the end makes it a palindrome: \\"aaba\\". 2. For the string \\"race\\", adding three characters (\'c\', \'a\', \'r\') at the end makes it a palindrome: \\"racecar\\". 3. For the string \\"abcd\\", adding three characters (\'d\', \'c\', \'b\') at the end makes it a palindrome: \\"abcddcba\\". Your task is to write a program that solves this problem for Alice.","solution":"def min_additions_for_palindrome(s): Returns the minimum number of characters that need to be added to the end of the string s to make it a palindrome. n = len(s) # Generate the reversed string rev_s = s[::-1] # Check the largest possible prefix of the reversed string that matches a suffix of the original string for i in range(n): if s.startswith(rev_s[i:]): return i return n def palindrome_additions(test_cases): Takes a list of strings as test cases and returns a list of integers, each representing the minimal number of characters required to turn the respective string into a palindrome. results = [] for s in test_cases: results.append(min_additions_for_palindrome(s)) return results"},{"question":"You are given a matrix of integers with dimensions n times m. Each cell in the matrix contains either a 0 or a 1 that represents whether the corresponding cell is blocked (0) or not blocked (1). The goal is to find the length of the longest path consisting of adjacent cells (vertically or horizontally) that contain the value 1. Diagonal moves are not allowed. You need to implement a function that, given such a matrix, returns the length of the longest path of 1\'s. # Function Signature The function signature is as follows: ```python def longest_path(matrix: List[List[int]]) -> int: ``` # Input - The input parameter matrix is a list of lists where each element is either 0 or 1. The dimensions of the matrix range from 1 le n, m le 200. # Output - The function should return an integer representing the length of the longest path of 1\'s. # Examples ```python matrix = [ [0, 1, 0, 1, 0], [1, 1, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [1, 0, 0, 1, 1] ] assert longest_path(matrix) == 4 matrix = [ [1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0] ] assert longest_path(matrix) == 1 ``` # Constraints - The solution must handle the maximum matrix size efficiently, ensuring the implementation calculates the result within reasonable time for the given constraints.","solution":"from typing import List def longest_path(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) def dfs(x: int, y: int) -> int: if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] == 0: return 0 matrix[x][y] = 0 # mark as visited length = 1 + max(dfs(x + 1, y), # Move down dfs(x - 1, y), # Move up dfs(x, y + 1), # Move right dfs(x, y - 1)) # Move left return length longest = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: longest = max(longest, dfs(i, j)) return longest"},{"question":"You are given a number `n` which represents the number of attendees in a meeting. Each attendee has a unique registration number ranging from `1` to `n`. The meeting organizer asks every attendee to sit in a single row and write down their registration numbers on a piece of paper in the order they are sitting. However, there\'s a catch: The organizer wants to know the smallest registration number that appears more than once in the order of attendees. If all registration numbers are unique, the answer should be `-1`. **Input:** The first line of the input contains an integer `n` (2 ≤ n ≤ 10^5) representing the number of attendees. The second line contains a list of `n` integers, denoting the registration numbers in the order they are sitting. **Output:** Print the smallest registration number that appears more than once in the given list. If no number is repeated, print `-1`. **Example:** Input: ``` 6 3 2 1 4 2 3 ``` Output: ``` 2 ``` Input: ``` 5 1 2 3 4 5 ``` Output: ``` -1 ```","solution":"def smallest_duplicate(n, arr): Returns the smallest registration number that appears more than once. If all numbers are unique, returns -1. seen = {} smallest_dup = float(\'inf\') for num in arr: if num in seen: seen[num] += 1 if num < smallest_dup: smallest_dup = num else: seen[num] = 1 if smallest_dup == float(\'inf\'): return -1 return smallest_dup"},{"question":"You are given an array of integers `a[1...n]` of length `n`, and it is guaranteed that `n` is a power of 2 (i.e., `n = 2^k` for some integer `k >= 0`). We define the \\"xor sum\\" of a subarray `a[l...r]` as the result of performing a bitwise XOR operation across all elements in the subarray. The task is to determine the maximum xor sum among all subarrays of the given array `a`. In one move, you can choose any index `i` (1 <= i <= n) and change `a[i]` to any integer value `y` (where `-10^9 <= y <= 10^9`). The objective is to compute the minimum number of moves required to achieve a maximum xor sum that is zero. You have to answer `t` independent test cases. # Input - The first line contains an integer `t` (1 <= t <= 10^4) — the number of test cases. - Each test case consists of two lines: - The first line contains a single integer `n` (1 <= n <= 2^16) — the length of the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (−10^9 <= a_i <= 10^9). It is guaranteed that the sum of `n` over all test cases does not exceed 2 * 10^5. # Output For each test case, print the minimum number of moves required to make the maximum xor sum zero. Example # Input ``` 2 4 1 2 3 4 8 4 16 32 64 128 1 2 3 ``` # Output ``` 2 3 ``` # Explanation - For the first test case, we need to modify two elements (e.g., 3 to 1, and 4 to 1) to make the maximum xor sum zero. - For the second test case, we need to change three elements to achieve a maximum xor sum of zero.","solution":"def min_moves_to_zero_xor(t, test_cases): results = [] for n, array in test_cases: xor_total = 0 for num in array: xor_total ^= num if xor_total == 0: results.append(0) else: results.append(1) # Changing any element to the xor_total will result in overall XOR sum being zero return results"},{"question":"DravDe, known for his continued excellence in the warehouse managing world, dreamt of another scenario last night involving a mystical forest. In his dream, he came upon a tree of magic fruits. These fruits had the power to grant happiness to the forest creatures that resided there. Each day, any forest creature that visited the tree would take a certain number of fruits from it. Once a creature claimed its desired fruits in the morning, it would visit the tree daily to take the same amount until the end of the dream. However, the tree would produce some number of new fruits every night. DravDe aims to determine the fewest number of days to host all the creatures in the forest such that the tree never runs out of fruits, ensuring every creature is happy. You are given two integers, n and F (1 ≤ n ≤ 50, 1 ≤ F ≤ 100), the number of creatures in the forest and the initial number of fruits on the tree, respectively. The third line contains n integers ci (1 ≤ ci ≤ 10), each representing the number of fruits a particular creature wants every day. The fourth line contains n integers pi (1 ≤ pi ≤ 20), each representing the number of new fruits the tree produces every night after the creature\'s arrival on the i-th day. Compute the fewest number of days required to ensure that all creatures are hosted successfully and no creature ever runs out of fruits. Input format: The first line contains two integers n and F — the number of creatures and the initial number of fruits on the tree. The second line contains n integers ci separated by spaces — the number of fruits each creature demands daily. The third line contains n integers pi separated by spaces — the number of new fruits produced each night after each creature\'s arrival. Output format: Output one integer — the minimum number of days required to host all creatures successfully without running out of fruits. Example: Input: 4 10 3 4 2 1 5 3 4 2 Output: 4 Explanation: - On the first day, Creature 1 demands 3 fruits, 5 fruits added overnight. - On the second day, Creature 2 demands 4 fruits, another 3 fruits added overnight, and so on. - We need to calculate the minimum number of days required such that the tree never runs out of fruits while hosting all creatures. Your task is to determine the minimum days.","solution":"def min_days_to_host_creatures(n, F, ci, pi): Determines the fewest number of days to host all creatures such that the tree never runs out of fruits ensuring every creature is happy. Parameters: n (int): Number of creatures. F (int): Initial number of fruits on the tree. ci (list): Number of fruits each creature demands daily. pi (list): Number of new fruits produced every night after the creature\'s arrival. Returns: int: Minimum number of days required to host all creatures successfully without running out of fruits. fruits = F for i in range(n): if fruits >= ci[i]: # If the current number of fruits is enough for i-th creature fruits -= ci[i] # Creature takes the fruits fruits += pi[i] # New fruits grow overnight else: return -1 # if initially or at any time not enough fruits, it is impossible for the creature to be hosted return n"},{"question":"**Problem Statement: Array Transformation** You are given an integer array `arr` containing `n` elements. Your goal is to transform `arr` into a non-decreasing array by performing a sequence of operations. In one operation, you can select any subarray and reverse it. A non-decreasing array is an array in which every element is less than or equal to the element that follows it. # Input: - The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. - For each test case: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains `n` space-separated integers representing the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). It is guaranteed that the sum of `n` across all test cases does not exceed `10^5`. # Output: For each test case, output: - An integer `k` (0 ≤ k ≤ 2n) representing the number of operations required to transform the array into a non-decreasing array. - `k` lines, each containing two integers `l` and `r` (1 ≤ l ≤ r ≤ n) representing the bounds of the subarray to reverse in the corresponding operation. If the array is already non-decreasing, output `0`. # Example Input: ``` 2 5 3 1 2 4 5 5 5 4 3 2 1 ``` Output: ``` 1 1 2 3 1 5 1 5 1 5 ``` # Explanation: In the first test case, reversing the subarray `[3, 1]` results in the array `[1, 3, 2, 4, 5]`, which is then a non-decreasing array. In the second test case, one of the valid sequences of operations to transform the array into a non-decreasing array is to reverse the entire array multiple times to sort the elements correctly.","solution":"def transform_to_non_decreasing(t, cases): results = [] for n, arr in cases: sorted_arr = sorted(arr) if arr == sorted_arr: results.append((0, [])) else: results.append((2, [(1, n), (1, n)])) return results"},{"question":"Given two non-empty strings representing two binary numbers, return the sum of these two binary numbers as a binary string. The input strings are both composed only of the characters \'0\' and \'1\'. The problem expects you to implement a function to add these binary numbers similar to how you would add integers, digit by digit from right to left, carrying over any value above \'1\' to the next higher bit. Here is an example: Example 1: - Input: a = \\"11\\", b = \\"1\\" - Output: \\"100\\" Example 2: - Input: a = \\"1010\\", b = \\"1011\\" - Output: \\"10101\\" Example 3: - Input: a = \\"110\\", b = \\"1011\\" - Output: \\"10001\\" Constraints: - Each input string is non-empty and contains only the characters \'0\' or \'1\'. - Each input string does not contain leading zeroes except for \\"0\\" itself.","solution":"def add_binary(a, b): Returns the sum of two binary strings a and b as a binary string. max_len = max(len(a), len(b)) # Pad the shorter string with leading zeros a = a.zfill(max_len) b = b.zfill(max_len) result = [] carry = 0 # Iterate over the strings from the end to the beginning for i in range(max_len - 1, -1, -1): total = carry total += 1 if a[i] == \'1\' else 0 total += 1 if b[i] == \'1\' else 0 result.append(\'1\' if total % 2 == 1 else \'0\') carry = 0 if total < 2 else 1 if carry != 0: result.append(\'1\') result.reverse() return \'\'.join(result)"},{"question":"You are given two strings `S1` and `S2` consisting of lowercase alphabetic characters. You need to transform `S1` into `S2` using the minimum number of operations. The allowed operations are: 1. **Insert a character** at any position in the string. 2. **Delete a character** from any position in the string. 3. **Replace a character** at any position with another character. Write a function `min_operations_to_convert(S1, S2)` that returns the minimum number of operations required to transform `S1` into `S2`. # Input - `S1` and `S2` are two strings of length up to 1000 consisting of lowercase letters. # Output - Return an integer representing the minimum number of operations required. # Examples ```python assert min_operations_to_convert(\\"kitten\\", \\"sitting\\") == 3 # Explanation: kitten -> sitten (replace \'k\' with \'s\') # sitten -> sittin (replace \'e\' with \'i\') # sittin -> sitting (insert \'g\') assert min_operations_to_convert(\\"flaw\\", \\"lawn\\") == 2 # Explanation: flaw -> law (remove \'f\') # law -> lawn (insert \'n\') assert min_operations_to_convert(\\"intention\\", \\"execution\\") == 5 # Explanation: intention -> exention (replace \'i\' with \'e\') # exention -> exention (replace \'n\' with \'c\') # exention -> exection (replace \'t\' with \'u\') # exection -> execuiton (replace \'i\' with \'e\') # execuiton -> execution (replace \'o\' with \'x\') ``` # Notes - You are encouraged to use dynamic programming to solve this problem efficiently. - If the strings are already equal, no operations should be required, and the output should be 0.","solution":"def min_operations_to_convert(S1, S2): Returns the minimum number of operations required to transform S1 into S2. m, n = len(S1), len(S2) # Create a DP table to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the base cases for i in range(m + 1): dp[i][0] = i # S1 -> empty S2: all deletes for j in range(n + 1): dp[0][j] = j # empty S1 -> S2: all inserts # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given an integer array a of length n. You are also given q queries. Each query is of one of two types: 1. Update the i-th element of the array to a specified value. 2. Find the maximum value in the array modulo a given positive integer p. You need to process all the queries and output the results of the second type of queries in the order they are encountered. The first line contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries, respectively. The second line contains n integers, the initial values of the array a (1 le a[i] le 10^9). The following q lines contain one of the two types of queries: - For a query of the first type, the line contains three integers 1, i, and x (1 le i le n, 1 le x le 10^9) — indicating that the i-th element of the array should be updated to x. - For a query of the second type, the line contains three integers 2, l, and p (1 le l le n, 1 le p le 10^9) — find the maximum value in the subarray a[1, dots, l] modulo p. Output the results of each query of the second type. Example Input: ``` 5 3 1 3 5 7 9 2 5 3 1 3 14 2 2 5 ``` Output: ``` 2 3 ```","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: if query[0] == 1: _, i, x = query array[i-1] = x elif query[0] == 2: _, l, p = query subarray = array[:l] max_value = max(subarray) results.append(max_value % p) return results"},{"question":"In a large company, there are n employees, and each employee has a unique ID between 1 and n. Each employee can have direct reportees, meaning they manage other employees directly under them. The company has decided to restructure its reporting hierarchy such that it results in a balanced binary tree. The goal is to ensure that each manager only has up to two direct reportees. The current hierarchy is given by an array p of size n, where p[i] represents the ID of the manager of the employee with ID i+1 (1-based index), and p[0] = -1 since the first employee has no manager (usually the CEO or the top-level manager). You need to design an algorithm to build a new hierarchy that results in a balanced binary tree. Output the new parent-child relationships in such a way that the depth of the tree is minimized. Example Input: ``` 6 -1 1 1 2 2 3 ``` Example Output: ``` -1 1 1 2 2 3 ``` # Explanation Within the input array: - The employee with ID 1 is the top manager (CEO), having no manager above them (`p[0] = -1`). - Employees 2 and 3 report to the employee with ID 1. - Employees 4 and 5 report to the employee with ID 2. - Employee 6 reports to employee 3. The output should maintain the same structure if it already forms a balanced binary tree. # Constraints - 1 leq n leq 10^5 - Employee IDs and manager IDs are integers between 1 and n and -1 if the employee has no manager.","solution":"def build_balanced_hierarchy(n, p): Adjust the hierarchy such that it forms a balanced binary tree. Arguments: n : int : Number of employees p : List[int] : List of current manager IDs for each employee (1-based index) Returns: List[int] : List representing the new hierarchy with balanced binary tree structure. if n == 1: return [-1] from collections import deque, defaultdict def bfs_tree(n): Creates a balanced binary tree using BFS strategy. tree = [-1] * n queue = deque([1]) employee_id = 2 while queue: parent = queue.popleft() for _ in range(2): # Each node in a binary tree can have at most 2 children if employee_id <= n: tree[employee_id - 1] = parent queue.append(employee_id) employee_id += 1 else: break return tree return bfs_tree(n)"},{"question":"In an enchanted forest, there are n trees arranged in a line, each with a unique height given by an array of n integers, heights[i] (1 ≤ heights[i] ≤ 10^9). An adventurous gnome, named Tim, wants to cut down a contiguous segment of trees so that the segment he chooses has the smallest possible difference between the maximum height and the minimum height within that segment. Your task is to help Tim determine this minimum possible difference. The first line of input contains a single integer n (1 ≤ n ≤ 10^5) — the number of trees. The second line contains n integers, heights[1], heights[2], ..., heights[n] — the heights of the trees. Output a single integer — the minimum possible difference between the maximum and minimum heights of a contiguous segment of trees. For example, given the following input: ``` 5 3 1 4 1 5 ``` The output would be: ``` 0 ``` In this example, the segment [1, 1] has the minimum possible difference of 0.","solution":"def find_min_diff(n, heights): Returns the minimum possible difference between the maximum and minimum heights of a contiguous segment of trees. if n <= 1: return 0 # Sort the heights sorted_heights = sorted(heights) # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Iterate over sorted list and find the minimum difference for i in range(1, n): min_diff = min(min_diff, sorted_heights[i] - sorted_heights[i - 1]) return min_diff # Example usage: n = 5 heights = [3, 1, 4, 1, 5] print(find_min_diff(n, heights)) # Output: 0"},{"question":"You are given a series of events in a calendar, where each event is represented by a start time and an end time. The times are given in 24-hour format (e.g., 13:00 for 1 PM). Your task is to find the maximum number of events you can attend if you can only attend one event at a time. Two events overlap if the end time of one event is after the start time of the other event. Each event is provided in the format \\"HH:MM-HH:MM\\", representing the start and end times respectively. You will be given n events, where 1 ≤ n ≤ 100. Write a program that reads the number of events and their times, and outputs the maximum number of events that can be attended without overlap. Input: - The first line contains an integer n, the number of events. - The next n lines each contain a string in the format \\"HH:MM-HH:MM\\", denoting the start time and end time of an event. Output: - Output the maximum number of non-overlapping events that you can attend. Example: Input: 3 09:00-10:30 10:15-11:30 11:00-12:00 Output: 2 Explanation: You can attend the first and the third events as they do not overlap.","solution":"from typing import List, Tuple def parse_time(time: str) -> int: Converts time from HH:MM format to minutes since the start of the day. hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes def parse_event(event: str) -> Tuple[int, int]: Parses an event string in the format \'HH:MM-HH:MM\' to a tuple of start and end time in minutes. start_time, end_time = event.split(\'-\') return parse_time(start_time), parse_time(end_time) def max_events(events: List[str]) -> int: Given a list of event time ranges in the format \'HH:MM-HH:MM\', returns the maximum number of non-overlapping events that can be attended. parsed_events = [parse_event(event) for event in events] # Sort events based on the end time parsed_events.sort(key=lambda x: x[1]) max_events_attended = 0 current_end_time = 0 for start, end in parsed_events: if start >= current_end_time: max_events_attended += 1 current_end_time = end return max_events_attended"},{"question":"You are given a list of integers. Your task is to find two different indices such that the sum of the integers between these indices (inclusive) is zero. The first line of the input contains a single integer n (1 le n le 2 cdot 10^5) — the number of integers in the list. The second line contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) — the integers in the list. If there are multiple possible answers, print any of them. Output \\"NO\\" (without quotes) if no such indices exist. Otherwise, in the first line print \\"YES\\" (without quotes), and in the second line print two integers l and r (1 le l le r le n) that represent the indices (inclusive) where the sum of the elements between them is zero. **Example** Input: ``` 5 1 2 -3 3 -3 ``` Output: ``` YES 2 3 ``` Explanation: The sum of the elements at indices 2 and 3 is 2 + (-3) = -1, which is not zero. However, the sum of the elements at indices 1, 2, and 3 is 1 + 2 + (-3) = 0. Hence, in this example, \\"YES\\" followed by \\"1 3\\" would also be a correct output.","solution":"def find_zero_sum_subarray(n, a): prefix_sum = {} current_sum = 0 for i in range(n): current_sum += a[i] if current_sum == 0: return \\"YES\\", 1, i + 1 if current_sum in prefix_sum: return \\"YES\\", prefix_sum[current_sum] + 2, i + 1 else: prefix_sum[current_sum] = i return \\"NO\\", -1, -1"},{"question":"You are given an array of integers representing different coin denominations and an integer amount representing a total amount of money. You need to determine the fewest number of coins needed to make up that amount. If that amount of money cannot be made up by any combination of the coins, print -1. Each coin denomination can be used an unlimited number of times. # Input - The first line contains two integers n and amount (1 ≤ n ≤ 100, 0 ≤ amount ≤ 10^6) — the number of different coin denominations and the amount of money, respectively. - The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10^6) — the values of the different coin denominations. # Output - Print a single integer representing the minimum number of coins needed to make up the specified amount. - If it is not possible to make up that amount, print -1. # Example **Input:** ``` 3 11 1 2 5 ``` **Output:** ``` 3 ``` **Explanation:** To make 11, the fewest number of coins used are 1 coin of 5, and 3 coins of 2. So, the total number of coins used is 1 + 3 = 4. **Input:** ``` 2 3 2 4 ``` **Output:** ``` -1 ``` **Explanation:** There is no possible combination of 2s and 4s that sum up to 3. Therefore, the output is -1.","solution":"def coin_change(n, amount, denominations): Function to find the fewest number of coins needed to make up a given amount. If it is not possible to make the amount, returns -1. # Initialize the DP array with a large value, except dp[0] which is 0 dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Iterate over each coin for coin in denominations: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still inf, it means it\'s not possible to make the amount return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Given an array of integers and a series of queries where each query consists of two indices, write a function that determines the maximum sum of any increasing subsequence within the subarray defined by those indices. # Input - The first line contains two integers `n` and `q` (1 le n, q le 100,000) — the number of elements in the array and the number of queries. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 le a_i le 1,000,000) — the elements of the array. - The next `q` lines each contain two integers `l_i` and `r_i` (1 le l_i le r_i le n) — defining the bounds of the subarray for each query. # Output Print `q` lines, each containing a single integer — the maximum sum of any increasing subsequence within the subarray defined by the corresponding query. # Example Input ``` 5 3 1 101 2 3 100 1 5 1 2 2 4 ``` Output ``` 106 102 103 ``` # Note In the first query `1 5`, the subarray is `[1, 101, 2, 3, 100]`. - The maximum sum increasing subsequence is `[1, 2, 3, 100]`, resulting in a sum of `106`. In the second query `1 2`, the subarray is `[1, 101]`. - The maximum sum increasing subsequence is `[1, 101]`, resulting in a sum of `102`. In the third query `2 4`, the subarray is `[101, 2, 3]`. - The maximum sum increasing subsequence is `[2, 3]`, resulting in a sum of `5`.","solution":"def max_sum_increasing_subsequence(arr, queries): Determine the maximum sum of any increasing subsequence within the subarray defined by the given queries. :param arr: List[int] - The array of integers. :param queries: List[Tuple[int, int]] - The list of query tuples where each tuple contains two integers (l, r). :return: List[int] - The list containing the maximum sum of increasing subsequences for each query. def max_sum_increasing_subsequence_subarray(subarray): n = len(subarray) if n == 0: return 0 dp = subarray.copy() for i in range(1, n): for j in range(i): if subarray[i] > subarray[j]: dp[i] = max(dp[i], dp[j] + subarray[i]) return max(dp) result = [] for l, r in queries: subarray = arr[l-1:r] result.append(max_sum_increasing_subsequence_subarray(subarray)) return result"},{"question":"You are given an array of positive integers representing the sizes of a collection of gift boxes. A robot is required to wrap the boxes in gift paper, but the robot has only a limited amount of paper. Specifically, the robot has exactly enough gift paper to wrap boxes with a total surface area equal to the sum of the surface areas of the boxes currently in the array. The robot can combine two adjacent boxes to create a new box whose size is the sum of the two original sizes. Combining two boxes consumes some paper equal to the combined size of the new box. This process can be repeated multiple times to achieve a single wrapped box. You need to help the robot find the minimum amount of paper required to combine all the boxes into one single box. The first line contains an integer n (1 ≤ n ≤ 50), the number of boxes. The second line contains n space-separated positive integers representing the sizes of the boxes (1 ≤ size ≤ 100). Output a single integer representing the minimum amount of paper required to combine all the gift boxes into one single box. Example: Input: 4 1 2 3 4 Output: 19 Explanation: - Combine 1 and 2 -> new box size = 3, paper used = 3 - Combine 3 and 3 (new box) -> new box size = 6, paper used = 6 - Combine 4 and 6 (new box) -> new box size = 10, paper used = 10 - Total paper used = 3 + 6 + 10 = 19","solution":"def min_paper_to_combine_boxes(n, sizes): Finds the minimum amount of paper required to combine all gift boxes into one single box. Parameters: n (int): Number of gift boxes. sizes (list of int): Sizes of the gift boxes. Returns: int: Minimum amount of paper required. import heapq if n == 1: return 0 heapq.heapify(sizes) total_paper = 0 while len(sizes) > 1: smallest = heapq.heappop(sizes) second_smallest = heapq.heappop(sizes) combined_size = smallest + second_smallest total_paper += combined_size heapq.heappush(sizes, combined_size) return total_paper # Example usage n = 4 sizes = [1, 2, 3, 4] print(min_paper_to_combine_boxes(n, sizes)) # Output: 19"},{"question":"You are given an integer array `nums` containing `n` distinct elements. Your task is to reorder the array such that each `nums[i]` is less than `nums[i+2]` (for every valid `i`). If there are multiple solutions, you can output any of them. If it is not possible to achieve the required ordering, return an empty array. Input Format: - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the length of the array. - The second line contains `n` distinct integers `nums[1], nums[2], ..., nums[n]` (1 ≤ nums[i] ≤ 10^9) — the elements of the array. Output Format: - If it is possible to reorder the array to satisfy the given condition, print the reordered array in a single line. - If it is not possible, print an empty array. Example: Input: ``` 5 4 1 3 2 5 ``` Output: ``` 1 3 2 5 4 ```","solution":"def reorder_array(nums): n = len(nums) if n == 0: return [] nums.sort() mid = (n + 1) // 2 left = nums[:mid] right = nums[mid:] result = [] for i in range(len(left)): result.append(left[i]) if i < len(right): result.append(right[i]) return result # Normally we would use a function to read the input and produce output # For the purpose of testing let\'s define a function with the input as parameters def reorder(n, nums): if n <= 0 or len(nums) != n: return [] sorted_result = reorder_array(nums) return sorted_result"},{"question":"Given a string `s`, you are asked to find the longest substring that appears at least twice in `s`, with the substrings overlapping allowed. For example, if `s = \\"banana\\"`, then the longest substring that appears at least twice is \\"ana\\". Write a function `longest_repeated_substring(s: str) -> str` that takes a single parameter `s` (a string) and returns the longest repeated substring within `s`. If there are multiple substrings with the maximum length, return the one that appears first in the string. If no such substring exists, return an empty string. # Input - A single string `s` (1 ≤ |s| ≤ 3000), which consists of lowercase English letters only. # Output - A single string, the longest substring that appears at least twice. # Example Input: ``` banana ``` Output: ``` ana ``` Input: ``` abcd ``` Output: ``` ``` # Note In the first example, the substring \\"ana\\" appears twice in \\"banana\\". Note that substrings can overlap. In the second example, there is no substring that appears more than once, so the output is an empty string.","solution":"def longest_repeated_substring(s: str) -> str: Return the longest substring of s that appears at least twice, allowing for overlaps. def search(L): # Use a sliding window to check for repeated substrings of length L seen = set() for i in range(len(s) - L + 1): substr = s[i:i+L] if substr in seen: return substr seen.add(substr) return None low, high = 1, len(s) result = \\"\\" while low <= high: mid = (low + high) // 2 substr = search(mid) if substr: result = substr low = mid + 1 else: high = mid - 1 return result"},{"question":"You are given a list of integers, and you need to determine the maximum possible product of any contiguous subarray within the list. A contiguous subarray of a list is a subarray created by selecting a starting index and an ending index from the list and considering all the elements in between those indices, inclusively. Write a function that takes a list of integers as input and returns the maximum product of any contiguous subarray. Function signature: ```python def max_contiguous_subarray_product(lst: List[int]) -> int: ``` **Input:** - A list of integers `lst` where (-1000 ≤ lst[i] ≤ 1000) and (1 ≤ len(lst) ≤ 200). **Output:** - An integer representing the maximum product of any contiguous subarray. **Examples:** ``` Input: lst = [2, 3, -2, 4] Output: 6 Explanation: The contiguous subarray [2, 3] has the maximum product which is 6. Input: lst = [-2, 0, -1] Output: 0 Explanation: The result cannot be 2 because [-2, -1] is not a contiguous subarray within [0, -1]. ``` **Note:** - Consider edge cases such as a list containing all negative numbers or single-element lists.","solution":"from typing import List def max_contiguous_subarray_product(lst: List[int]) -> int: if len(lst) == 0: return 0 max_product = lst[0] min_so_far = lst[0] max_so_far = lst[0] for i in range(1, len(lst)): current_value = lst[i] temp_max = max(current_value, max_so_far * current_value, min_so_far * current_value) min_so_far = min(current_value, max_so_far * current_value, min_so_far * current_value) max_so_far = temp_max max_product = max(max_product, max_so_far) return max_product"},{"question":"You are given a sequence of integers representing the heights of buildings in a city skyline. The sequence is provided from left to right. Your task is to find the total area of the skyline. The heights are given in an array where each element represents the height of a building with a width of 1 unit. For example, given the heights array [1, 3, 2], the total area of the skyline is calculated by summing the heights: 1 (for the first building) + 3 (for the second building) + 2 (for the third building), giving a total area of 6. Your program should take the following inputs: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. - The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^4) — the heights of the buildings. Output a single integer — the total area of the skyline. Example: ``` Input: 3 1 3 2 Output: 6 ``` Explanation: The total area is 1 + 3 + 2 = 6.","solution":"def total_skyline_area(n, heights): Returns the total area of the skyline given the number of buildings and their respective heights. Parameters: n (int): The number of buildings. heights (list of int): A list of integers representing the heights of the buildings. Returns: int: The total area of the skyline. return sum(heights) # Example usage: # n = 3 # heights = [1, 3, 2] # print(total_skyline_area(n, heights)) --> Outputs 6"},{"question":"Create a function that takes two strings and returns the length of their longest common subsequence (LCS). A subsequence is a sequence that appears in the same relative order but not necessarily contiguously. For instance, \\"ace\\" is a subsequence of \\"abcde\\", but \\"aec\\" is not. The input strings will consist of lowercase alphabetic characters with lengths at most 1000. # Function signature ```python def longest_common_subsequence(str1: str, str2: str) -> int: ``` # Input - `str1`: a string of lowercase alphabetic characters (1 ≤ len(str1) ≤ 1000) - `str2`: a string of lowercase alphabetic characters (1 ≤ len(str2) ≤ 1000) # Output - an integer representing the length of their longest common subsequence. # Examples ```python assert longest_common_subsequence(\\"abcde\\", \\"ace\\") == 3 assert longest_common_subsequence(\\"abc\\", \\"abc\\") == 3 assert longest_common_subsequence(\\"abc\\", \\"def\\") == 0 ``` # Note - You should analyze both strings to find their LCS using a dynamic programming approach. - Consider creating a 2-dimensional DP table, where `dp[i][j]` represents the length of LCS of `str1[:i]` and `str2[:j]`.","solution":"def longest_common_subsequence(str1: str, str2: str) -> int: Computes the length of the longest common subsequence (LCS) of two strings. Parameters: str1 (str): First input string. str2 (str): Second input string. Returns: int: Length of the longest common subsequence. m = len(str1) b = len(str2) # Create a DP table to store lengths of LCS of substrings. dp = [[0] * (b + 1) for _ in range(m + 1)] # Build the table in bottom-up fashion for i in range(1, m + 1): for j in range(1, b + 1): # If characters match, add 1 to the value from the diagonally previous cell. if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the LCS is in the cell dp[m][n]. return dp[m][b]"},{"question":"Farmer John has a rectangular field of width W and height H divided into a grid of 1x1 cells. Some of the cells have rocks placed in them, making those cells impassable. Farmer John\'s cow starts at the top-left corner of the field and wants to move to the bottom-right corner. The cow can move either one cell to the right or one cell down at a time. Determine the number of distinct paths the cow can take to reach the bottom-right corner while avoiding the rocks. The first line contains two integers W and H (1 ≤ W, H ≤ 1000), the dimensions of the field. The next H lines each contain W characters, with \'.\' indicating an empty cell the cow can pass through and \'R\' indicating a cell with a rock. The top-left corner (1, 1) and the bottom-right corner (W, H) are guaranteed to be empty cells (i.e., \'.\'). Print a single integer — the number of distinct paths from the top-left to the bottom-right corner modulo 1,000,000,007. # Example Input: ``` 3 3 . . . . R . . . . ``` Output: ``` 2 ``` Explanation: The cow can take the following paths: - Right, Right, Down, Down - Down, Down, Right, Right","solution":"def num_paths_with_obstacles(W, H, field): MOD = 1000000007 # Initialize a 2D DP array with zeroes dp = [[0]*W for _ in range(H)] # Starting point (top-left corner) dp[0][0] = 1 for i in range(H): for j in range(W): if field[i][j] == \'R\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[-1][-1] # Example Usage W = 3 H = 3 field = [ [\'.\', \'.\', \'.\'], [\'.\', \'R\', \'.\'], [\'.\', \'.\', \'.\'] ] print(num_paths_with_obstacles(W, H, field)) # Output: 2"},{"question":"You are given a sequence of n integers. Your goal is to perform several queries on this sequence. Each query is of one of the following types: 1. Update: Change the value of a specific element in the sequence. 2. Prefix Sum: Calculate the sum of all elements from the beginning of the sequence up to a given index. You are required to write a program that processes these queries efficiently. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of elements in the sequence and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) representing the initial values of the sequence. The next q lines contain the queries. Each query is either of the form `1 i x` (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9), which means updating the i-th element of the sequence to x, or of the form `2 i` (1 ≤ i ≤ n), which means calculating the prefix sum from the first element to the i-th element. For each prefix sum query, output the result in a new line. Example: Input: ``` 5 6 1 2 3 4 5 2 3 1 2 10 2 3 2 5 1 5 20 2 5 ``` Output: ``` 6 14 38 53 ``` Explanation: - Before any queries, the sequence is {1, 2, 3, 4, 5}. - The first query `2 3` requests the prefix sum of the first 3 elements, which is 1+2+3=6. - The second query `1 2 10` updates the second element to 10, changing the sequence to {1, 10, 3, 4, 5}. - The third query `2 3` requests the prefix sum of the first 3 elements again, which is now 1+10+3=14. - The fourth query `2 5` requests the prefix sum of the first 5 elements, which is 1+10+3+4+5=23. - The fifth query `1 5 20` updates the fifth element to 20, changing the sequence to {1, 10, 3, 4, 20}. - The final query `2 5` requests the prefix sum of the first 5 elements again, which is now 1+10+3+4+20=38.","solution":"class Sequence: def __init__(self, elems): self.elems = elems self.prefix_sums = self._calculate_prefix_sums() def _calculate_prefix_sums(self): Helper function to calculate prefix sums for the initial list. prefix_sums = [0] * (len(self.elems) + 1) for i in range(1, len(self.elems) + 1): prefix_sums[i] = prefix_sums[i - 1] + self.elems[i - 1] return prefix_sums def update(self, i, x): Updates the value at index (1-based) i to x. diff = x - self.elems[i - 1] self.elems[i - 1] = x for j in range(i, len(self.elems) + 1): self.prefix_sums[j] += diff def prefix_sum(self, i): Returns the sum of the first i elements. return self.prefix_sums[i] def process_queries(n, q, elements, queries): seq = Sequence(elements) result = [] for query in queries: if query[0] == 1: _, i, x = query seq.update(i, x) elif query[0] == 2: _, i = query result.append(seq.prefix_sum(i)) return result"},{"question":"You are given a square grid of size n times n (1 ≤ n ≤ 2000). Each cell in the grid is either empty (represented by \'.\') or contains an obstacle (represented by \'#\'). The top-left corner of the grid is (0,0) and the bottom-right corner of the grid is (n-1, n-1). You are tasked with finding the number of distinct paths from the top-left corner to the bottom-right corner, moving only right or down at each step, while avoiding obstacles. Two paths are considered distinct if they traverse at least one different cell. The first line of input consists of an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t test cases contains n + 1 lines. The first line of each test case contains an integer n. The next n lines contain n characters each, representing the grid. Output t lines, each containing a single integer — the number of distinct paths from the top-left corner to the bottom-right corner for each test case. If there is no path, output 0 for that test case. # Sample input: ``` 2 3 ... .#. ... 2 #. .. ``` # Sample output: ``` 2 0 ``` # Explanation: In the first test case, with a grid of size 3x3, two distinct paths exist: 1. (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) 2. (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) In the second test case, there is no valid path from the top-left to the bottom-right corner.","solution":"def count_distinct_paths(grid): n = len(grid) if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] def solve(test_cases): results = [] for grid in test_cases: results.append(count_distinct_paths(grid)) return results"},{"question":"You\'ve got a list of n integers. You need to find a pair of numbers such that the absolute difference between these two numbers is minimized. Furthermore, both these numbers need to be distinct and located at different indices in the original list. The first line of the input is an integer n (2 ≤ n ≤ 10^5), representing the number of elements in the list. The second line of the input contains n space-separated integers, representing the elements of the list. Each element of the list fits into a 32-bit signed integer. Your task is to output the smallest possible absolute difference between any pair of distinct numbers in the list. In the first example, the minimum absolute difference is 1 from the pair (8, 9). In the second example, the minimum absolute difference is 0 from the pairs (10, 10) but since they need to be distinct and located at different indices, the smallest difference is 2 from the pair (1, 3). Input: 4 1 5 3 19 Output: 2 Input: 5 10 10 10 10 10 Output: 2 Input: 6 8 1 9 4 6 19 Output: 1","solution":"def find_min_abs_difference(nums): Given a list of integers, returns the smallest possible absolute difference between any pair of distinct numbers located at different indices. nums_sorted = sorted(nums) min_diff = float(\'inf\') for i in range(len(nums_sorted) - 1): min_diff = min(min_diff, abs(nums_sorted[i] - nums_sorted[i+1])) return min_diff def smallest_abs_difference(n, arr): return find_min_abs_difference(arr)"},{"question":"You are given a grid of size n times m where each cell has a non-negative integer value. You start at the top-left corner of the grid, i.e., cell (1,1), and you want to reach the bottom-right corner, i.e., cell (n, m). From each cell, you can move right, down, or diagonally right-down to an adjacent cell. Your aim is to maximize the sum of the integers in the cells on your path. Calculate the maximum sum you can achieve by starting from the top-left corner and reaching the bottom-right corner of the grid. The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. The following n lines each contain m integers representing the values in the grid cells. Print a single integer — the maximum sum you can achieve. # Example ```plaintext Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: The path with the maximum sum is 1 -> 5 -> 9 -> 8 -> 9. The sum is 1 + 5 + 9 + 8 + 9 = 32. ```","solution":"def max_sum_path(n, m, grid): # Create a dp array dp = [[0] * m for _ in range(n)] # Initialize the dp array with the value of the first cell dp[0][0] = grid[0][0] # Fill the first row and first column in the dp array for i in range(1, m): dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j] # The value at the bottom-right corner of the dp array is the answer return dp[n-1][m-1]"},{"question":"John is participating in a coding contest. One of the challenges is to navigate through a grid. The grid consists of `n` rows and `m` columns. Each cell in the grid is either an obstacle or free space. John starts at the top-left corner of the grid and wants to reach the bottom-right corner. He can only move right or down at any point in time. However, there are some cells in the grid through which John cannot pass because they are obstacles. You need to determine if John can reach the bottom-right corner from the top-left corner given the constraints. The first line contains two integers `n` and `m` (2 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next `n` lines contain `m` characters each — the grid description. Each character is either `.` (free space) or `#` (obstacle). Print \\"YES\\" if John can reach the bottom-right corner from the top-left corner, and \\"NO\\" if he cannot. Example input: 3 3 ... .#. ... Example output: YES Example input: 3 3 .#. #.# .#. Example output: NO","solution":"def can_reach_end(n, m, grid): Returns \\"YES\\" if it\'s possible to navigate from the top-left to the bottom-right of the grid, otherwise \\"NO\\". if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(1, 0), (0, 1)] visited = [[False] * m for _ in range(n)] def dfs(x, y): if x == n-1 and y == m-1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny] and dfs(nx, ny): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" # Inputs for testing n, m = 3, 3 grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] print(can_reach_end(n, m, grid)) # Should print \\"YES\\""},{"question":"You are given an array of integers where each element represents the height of a building in a skyline. You need to determine the amount of water that can be trapped between these buildings after a rainfall. The width of each building is 1 unit. For example, given the array `[0,1,0,2,1,0,1,3,2,1,2,1]`, the graphical representation is as follows: ``` 3 2 # # 1 # # # # # # # # # # # # # # # 0 1 0 2 1 0 1 3 2 1 2 1 ``` The rainwater trapped in between the buildings can be calculated as follows: 6 units of water are trapped in total. Write a function `trapRainWater(heights: List[int]) -> int` that accepts a list of integers as an argument and returns the total amount of trapped water. # Input - An array of integers `heights` representing the height of buildings. - `0 <= len(heights) <= 10^4` - `0 <= heights[i] <= 10^4` # Output - An integer representing the total amount of trapped water. # Examples **Example 1:** ```python print(trapRainWater([0,1,0,2,1,0,1,3,2,1,2,1])) # Output: 6 ``` **Example 2:** ```python print(trapRainWater([4,2,0,3,2,5])) # Output: 9 ``` Note: Make sure your solution is optimized for larger inputs and runs efficiently.","solution":"from typing import List def trapRainWater(heights: List[int]) -> int: Returns the amount of water that can be trapped between buildings after it rains. :param heights: List of integers representing the height of buildings. :return: The total amount of trapped water. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) trapped_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += right_max - heights[right] return trapped_water"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to determine whether there exist two distinct indices i and j in the array such that `nums[i] = nums[j]` and the absolute difference between i and j is at most k. The first line of input contains two integers, n (1 ≤ n ≤ 10^5) - the length of the array, and k (0 ≤ k ≤ 10^5). The second line contains n integers representing the elements of the array. In the first and only line of output, print \\"true\\" if such indices exist, otherwise print \\"false\\". **Example 1:** Input: ``` 6 3 1 2 3 1 2 3 ``` Output: ``` true ``` **Example 2:** Input: ``` 6 0 1 2 3 1 2 3 ``` Output: ``` false ```","solution":"def contains_nearby_duplicate(nums, k): Determines whether there exist two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. value_indices = {} for i, num in enumerate(nums): if num in value_indices and i - value_indices[num] <= k: return True value_indices[num] = i return False"},{"question":"Konatsu is designing a new social media app that allows users to tag their friends in posts. Every post can have multiple friends tagged, and tagging can only be done if the friend accepts the tag request. The tagging system can be represented as a directed graph where each vertex represents a friend, and a directed edge from vertex u to vertex v indicates that friend u has sent a tag request to friend v. Konatsu wants to analyze the connectedness of this tagging system. She needs to answer multiple queries, each querying whether two friends can eventually be connected through a series of tag requests. Given the number of friends n and the number of directed tag requests m, followed by m pairs of integers representing the tag requests, and then a number of queries q, followed by q pairs of integers representing the connectedness queries, determine for each query if the two respective friends are in the same connected component (either directly or through a series of intermediate friends). The first line of the input contains two integers n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000) — the number of friends and the number of tag requests. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — a directed edge from friend u to friend v. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of connectedness queries. The next q lines each contain two integers u and v (1 ≤ u, v ≤ n) — the friends to check for connectedness. For each query, print \\"YES\\" if there is a path from the first friend to the second friend or vice versa, otherwise print \\"NO\\". Example input: 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 Example output: YES YES YES","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [-1] * (n + 1) component_id = 0 def bfs(start): queue = deque([start]) visited[start] = component_id while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = component_id queue.append(neighbor) for i in range(1, n + 1): if visited[i] == -1: bfs(i) component_id += 1 return visited def connected_queries(n, edges, queries): visited = find_connected_components(n, edges) results = [] for u, v in queries: if visited[u] == visited[v]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"As an expert coder, you have been hired to develop a new text-based adventure game. One of the game levels features a labyrinth of doors and keys. Each door in the labyrinth has a corresponding key to unlock it. The labyrinth is modeled as a grid with m rows and n columns. Each cell in the grid can either be empty, contain a door, or contain a key. Every door is represented by a lowercase letter (\'a\' to \'z\') and every key is represented by the corresponding uppercase letter (\'A\' to \'Z\'). A door can only be unlocked if the corresponding key has been collected by the player. The player starts at position (1, 1) (top-left corner) of the grid and needs to reach position (m, n) (bottom-right corner). The player can move to adjacent cells horizontally or vertically but cannot move diagonally. Your task is to determine if the player can reach the bottom-right corner of the grid starting from the top-left corner, given the layout of the labyrinth and the positions of doors and keys. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line of the input contains two integers m and n (2 ≤ m, n ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next m lines contains n characters, each character being either \'.\', \'#\', a lowercase letter (door), or an uppercase letter (key). A \'.\' represents an empty cell, and a \'#\' represents an impassable cell. Example: Input: 4 4 .A.. #.b# .Ba# .... Output: YES In this example, the player can collect key \'A\' at (1, 2), then move to (2, 3) to unlock door \'a\', collect key \'B\' at (3, 2), and finally move through (3, 3) and (3, 4) to reach the bottom-right corner. Implement a function that checks if reaching the bottom-right corner is possible under the given conditions.","solution":"from collections import deque def can_reach_end(m, n, grid): def is_within_bounds(x, y): return 0 <= x < m and 0 <= y < n # Directions for movement: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize the deque with the starting position and an empty set of collected keys queue = deque([(0, 0, set())]) visited = set() # to keep track of visited cells with specific states of collected keys while queue: x, y, keys = queue.popleft() # If we reach the destination, return \\"YES\\" if (x, y) == (m - 1, n - 1): return \\"YES\\" # Mark this cell as visited with current state of collected keys visited.add((x, y, frozenset(keys))) for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and (nx, ny, frozenset(keys)) not in visited: cell = grid[nx][ny] # If it\'s an empty cell or passable if cell == \'.\': queue.append((nx, ny, keys)) # If it is a key, add it to our set of collected keys elif cell.isupper(): new_keys = keys | {cell} queue.append((nx, ny, new_keys)) # If it is a door, check if we have the corresponding key elif cell.islower() and cell.upper() in keys: queue.append((nx, ny, keys)) # If we exhaust the queue and never reach the end, return \\"NO\\" return \\"NO\\" # Sample usage grid = [ \\"A...\\", \\"#.b#\\", \\".Ba#\\", \\"....\\" ] m, n = 4, 4 print(can_reach_end(m, n, grid)) # Should output \\"YES\\""},{"question":"Tom likes binary strings. A binary string is a string consisting of only characters \'0\' and \'1\'. Tom defines the beauty of a binary string as the product of the lengths of the longest contiguous subsequence of \'1\'s and the longest contiguous subsequence of \'0\'s in the string. Given a binary string, help Tom to determine its beauty. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary string. - The second line contains a binary string of length n. **Output:** - Print an integer representing the beauty of the binary string. **Example:** **Input:** ``` 12 110011110000 ``` **Output:** ``` 9 ``` **Explanation:** The longest contiguous subsequence of \'1\'s is \\"1111\\" with length 4. The longest contiguous subsequence of \'0\'s is \\"0000\\" with length 4. Therefore, the beauty of the string is 4 * 4 = 16.","solution":"def calculate_beauty(n, binary_string): max_ones = max_zeros = 0 current_ones = current_zeros = 0 for char in binary_string: if char == \'1\': current_ones += 1 max_zeros = max(max_zeros, current_zeros) current_zeros = 0 elif char == \'0\': current_zeros += 1 max_ones = max(max_ones, current_ones) current_ones = 0 max_ones = max(max_ones, current_ones) max_zeros = max(max_zeros, current_zeros) return max_ones * max_zeros"},{"question":"John loves sequences and puzzles. He often plays with sequences and tries to find interesting patterns in them. A sequence of length n is a series of integers, each from 1 to n. A sequence is defined as exciting if it contains at least one contiguous subarray of length m such that the sum of the subarray is divisible by m. Your task is to help John by finding at least one such exciting sequence given n and m. If there are multiple suitable sequences, you can print any of them. The single line contains two integers n and m (1 ≤ n ≤ 105, 1 ≤ m ≤ n). In a single line, print any exciting sequence of length n. If no such exciting sequence exists, print -1. For example: For the input `5 3`, one possible exciting sequence is `1 2 3 4 5`. The subarray from the 2nd to the 4th element, `[2, 3, 4]`, has a sum of 9, which is divisible by 3. For the input `6 5`, one possible exciting sequence is `6 7 1 2 8 9`. The subarray from the 5th to the 9th element, `[8, 9]`, has a sum of 17, which is divisible by 5.","solution":"def find_exciting_sequence(n, m): if n < m: return -1 # Generate the sequence 1 to n sequence = list(range(1, n + 1)) # Check for a subarray of length m with sum divisible by m for i in range(n - m + 1): subarray = sequence[i:i + m] if sum(subarray) % m == 0: return sequence # There should always be at least one exciting sequence return sequence"},{"question":"Problem Statement Alex is practicing his skills with a collection of wooden blocks. Each block has a distinct positive integer written on it. He builds towers by stacking these blocks one atop the other. Alex has two constraints for building his towers: 1. He can only place a block with a lower number on top of a block with a higher number. 2. The tower must be as tall as possible. Given a list of integers representing the numbers on the blocks, write a program to determine the length of the tallest tower Alex can build following these rules. Input - The first line contains an integer, `n` (1 leq n leq 10^5), the number of blocks. - The second line contains `n` integers, where each integer `a_i` (1 leq a_i leq 10^9) represents the number on the `i`-th block. Output - Print a single integer, the height of the tallest tower Alex can build. Example # Input ``` 5 4 1 3 2 6 ``` # Output ``` 4 ``` Explanation One of the possible ways to build the tallest tower is by stacking the blocks in the sequence 1, 2, 3, 4. The length of this tower is 4. Therefore, the output is 4. Remember that Alex can only place a block with a lower number on top of a block with a higher number, so he cannot place block 6 anywhere but at the base of a very short (one block) tower in this case.","solution":"def longest_tower(blocks): Returns the height of the tallest tower following the rules. blocks.sort() return len(blocks) # Function call for manual testing (remove before testing) if __name__ == \\"__main__\\": n = int(input()) blocks = list(map(int, input().split())) print(longest_tower(blocks))"},{"question":"You are given two arrays of integers, `A` and `B`, both of length `n`. Your task is to find an array `C` of length `n` such that for each index `i` (1 ≤ `i` ≤ `n`), `C[i] = max(A[j] + B[k])` subject to the constraints that: 1. `1 ≤ j ≤ i` 2. `1 ≤ k ≤ i` In other words, `C[i]` is the maximum possible sum of an element from `A` and an element from `B` considering only the first `i` elements of both arrays. # Input - The first line contains an integer `n` (1 ≤ `n` ≤ 100,000), the length of the arrays. - The second line contains `n` integers, the elements of array `A`. - The third line contains `n` integers, the elements of array `B`. # Output - Print a single line containing `n` integers, the elements of array `C`. # Example Input ``` 5 1 3 5 7 9 2 4 6 8 10 ``` Output ``` 3 7 11 15 19 ``` # Explanation For `i = 1`, the maximum sum is `A[1] + B[1] = 1 + 2 = 3`. For `i = 2`, the maximum sum is `max(A[1] + B[1], A[1] + B[2], A[2] + B[1], A[2] + B[2]) = max(3, 5, 5, 7) = 7`. For `i = 3`, the maximum sum is `max(A[1] + B[1], A[1] + B[2], A[1] + B[3], A[2] + B[1], A[2] + B[2], A[2] + B[3], A[3] + B[1], A[3] + B[2], A[3] + B[3]) = max(3, 5, 7, 5, 7, 9, 7, 9, 11) = 11`. And so on.","solution":"def max_sum_arrays(A, B): Returns the array C such that C[i] is the maximum possible sum of an element from A and an element from B considering only the first i elements of both arrays. n = len(A) C = [0] * n max_A = A[0] max_B = B[0] for i in range(n): max_A = max(max_A, A[i]) max_B = max(max_B, B[i]) C[i] = max_A + max_B return C"},{"question":"Arya is a strategic advisor in the great kingdom of Westeros. The kingdom consists of c cities connected by r roads. Each road connects two cities and has a certain battlefield difficulty level associated with it. Arya needs to strategize the defense system such that no single battle can block off more than one city (i.e., each city can still communicate with at least one other city even if a road is compromised). To achieve this, she wants to convert this problem into checking for critical bridges in the city\'s network. A bridge (or cut-edge) in a graph is an edge that, when removed, disconnects the graph. You are tasked with writing a program that helps Arya identify how many critical bridges are in the road network of Westeros. **Input:** - The first line of the input contains two integers, c (2 ≤ c ≤ 1000) and r (1 ≤ r ≤ 2000), which represent the number of cities and roads respectively. - Each of the next r lines contains two integers, u and v (1 ≤ u, v ≤ c, u ≠ v), representing that there is a road connecting city u and city v. **Output:** - Output a single integer – the number of critical bridges in the network. **Example:** ``` Input: 5 5 1 2 1 3 2 3 3 4 4 5 Output: 2 ``` In the example above, the critical bridges are the roads connecting city pairs (3, 4) and (4, 5). Removing any of these roads will split the city network into two disconnected parts.","solution":"from collections import defaultdict def critical_bridges(c, r, roads): graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) discovery = [-1] * (c + 1) low = [-1] * (c + 1) parent = [-1] * (c + 1) time = 0 bridges = [] def dfs(u): nonlocal time discovery[u] = low[u] = time time += 1 for v in graph[u]: if discovery[v] == -1: parent[v] = u dfs(v) low[u] = min(low[u], low[v]) if low[v] > discovery[u]: bridges.append((u, v)) elif v != parent[u]: low[u] = min(low[u], discovery[v]) for i in range(1, c + 1): if discovery[i] == -1: dfs(i) return len(bridges) # Example usage: # c, r = 5, 5 # roads = [(1, 2), (1, 3), (2, 3), (3, 4), (4, 5)] # print(critical_bridges(c, r, roads)) # Output: 2"},{"question":"You are given an integer array `nums` of length `n` and a target integer `target`. Your task is to identify three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution. # Input - The first line contains an integer `n` (3 ≤ n ≤ 2000), the number of elements in the array `nums`. - The second line contains `n` integers, separated by spaces, representing the elements in the array `nums` (-1000 ≤ nums[i] ≤ 1000). - The third line contains a single integer, `target` (-10000 ≤ target ≤ 10000). # Output Output a single integer representing the sum of the three integers closest to the target. # Example Input ``` 4 -1 2 1 -4 1 ``` Output ``` 2 ``` # Explanation In this example, the sum that is closest to the target is 2. (-1 + 2 + 1 = 2). This is the closest possible sum.","solution":"def three_sum_closest(nums, target): nums.sort() n = len(nums) closest_sum = float(\'inf\') for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return current_sum if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 else: right -= 1 return closest_sum # Sample usage # n = 4 # nums = [-1, 2, 1, -4] # target = 1 # Output: 2 nums = [-1, 2, 1, -4] target = 1 print(three_sum_closest(nums, target)) # should print 2"},{"question":"The parents’ association of a school is organizing a toy drive to collect toys for a local charity. They have m types of toy models, and each type can have different quantities. The goal is to ensure that each child receives exactly one toy, and each toy is unique. However, due to funding constraints, the parents want to minimize the number of toys purchased while ensuring at least one of each type is available. The toy drive receives an initial set of donated toys. Provided an existing list of donated toys and their quantities, help the parents’ association determine the minimum number of additional toys they need to purchase to ensure there is at least one of each toy type. The first line contains two integers m and k (1 ≤ m, k ≤ 200,000), the number of toy types and the number of initially donated toys, respectively. The following k lines contain two integers ti and qi (1 ≤ ti ≤ m, 1 ≤ qi ≤ 200,000), where ti represents the toy type and qi represents the quantity of that toy type already donated. Print the minimal number of additional toys to be purchased. # Examples: Input 1: ``` 4 3 1 5 2 3 4 1 ``` Output 1: ``` 1 ``` Explanation: Toy type 3 is missing, hence only one more toy of type 3 needs to be purchased. Input 2: ``` 3 3 1 2 2 1 3 1 ``` Output 2: ``` 0 ``` Explanation: All toy types are already present, so no additional toys need to be purchased. Input 3: ``` 5 0 ``` Output 3: ``` 5 ``` Explanation: No toys are donated initially, so one toy of each type (total of 5 toys) needs to be purchased. In each example, the objective is to ensure at least one of each type of toy is available with the minimal number of purchases.","solution":"def min_additional_toys(m, k, toy_data): Returns the minimal number of additional toys to be purchased. m: int - the number of toy types k: int - the number of initially donated toys toy_data: list of tuples [(ti, qi), ...] - the type and quantity of each toy type donated Returns the integer count of additional toys needed. # Initialize a set to track toy types already donated donated_toy_types = set() # Process the donated toys for ti, qi in toy_data: donated_toy_types.add(ti) # Calculate the number of missing toy types missing_toy_types = m - len(donated_toy_types) return missing_toy_types"},{"question":"Ella recently found an antique necklace consisting of several beads. Each bead has a certain color. She is planning to reconstruct the necklace using the beads in such a way that each bead\'s color is distinct when following one bead after another. However, she\'s faced with a dilemma: the beads can be reordered, but she doesn\'t want the necklace to be too long or too short. She plans to select a continuous segment from any position in the original sequence of beads, but she must minimize the length of this segment while ensuring it contains the maximum number of unique colors. You are given a necklace represented by n beads, where each bead is denoted by its color. Find the minimum length of the segment which contains the maximum possible number of distinct colors. The first line contains an integer n (1 ≤ n ≤ 100000) – the number of beads in the necklace. The second line contains n integers c1, c2, ..., cn (1 ≤ ci ≤ n) – the color of each bead in sequence. Print the length of the shortest segment that contains the maximum number of distinct colors. In the first example, the shortest segment containing the maximum number of distinct colors is of length 3. In the second example, there are two shortest segments [1, 2, 3] and [2, 3, 4], both of length 3, containing all distinct colors. Therefore, the length is 3.","solution":"def find_min_length_segment(n, beads): Returns the minimum length of the segment which contains the maximum possible number of distinct colors. color_counts = {} max_unique_colors = len(set(beads)) left = 0 min_length = n for right in range(n): if beads[right] in color_counts: color_counts[beads[right]] += 1 else: color_counts[beads[right]] = 1 while len(color_counts) == max_unique_colors: min_length = min(min_length, right - left + 1) color_counts[beads[left]] -= 1 if color_counts[beads[left]] == 0: del color_counts[beads[left]] left += 1 return min_length"},{"question":"Linda has a specific way of encrypting her messages. She uses a list of `n` words where each word consists only of lowercase English letters. The encryption process involves reversing the order of the words and then reversing the order of characters in each word. For example, given the list [\\"hello\\", \\"world\\"], the encrypted message would be [\\"dlrow\\", \\"olleh\\"]. Linda\'s decryption tool takes an encrypted list and reverses the process: it first reverses the characters in each word and then reverses the order of the words. You are to implement the decryption function. The first line of input contains the integer `n` (1 ≤ n ≤ 1000). Each of the following `n` lines contains one word from the encrypted list. The length of each word is between 1 and 100 characters. Output the decrypted list of words in a single line, separated by a space. Example: Input: ``` 2 dlrow olleh ``` Output: ``` hello world ``` Note: 1. The original list of words may include duplicates. 2. The order of decrypted words must match the original list before encryption.","solution":"def decrypt_message(n, encrypted_list): Decrypts the message by reversing the characters in each word and then reversing the order of the words. Parameters: n (int): Number of words in the encrypted list. encrypted_list (list): List containing encrypted words. Returns: list: Decrypted list of words. decrypted_list = [word[::-1] for word in encrypted_list][::-1] return decrypted_list"},{"question":"Given an integer array `nums` and an integer `k`, return the number of unique absolute differences that can be created by subtracting any two elements in the array. The absolute difference between two integers a and b is |a - b|. Example array: [1, 5, 3, 9] Possible absolute differences: |1 - 5| = 4, |1 - 3| = 2, |1 - 9| = 8, |5 - 3| = 2, |5 - 9| = 4, |3 - 9| = 6 Unique differences: 2, 4, 6, 8 Input - The first line contains an integer `k` (1 ≤ k ≤ 104) — the length of the array `nums`. - The second line contains k integers `nums[i]` (1 ≤ nums[i] ≤ 104). Output - Print a single integer representing the number of unique absolute differences. Example Input: 4 1 5 3 9 Output: 4","solution":"def unique_absolute_differences(nums): Returns the number of unique absolute differences that can be created by subtracting any two elements in the array. unique_diffs = set() for i in range(len(nums)): for j in range(i + 1, len(nums)): unique_diffs.add(abs(nums[i] - nums[j])) return len(unique_diffs)"},{"question":"Given two sorted arrays, arr1 of length m and arr2 of length n, merge them into a single sorted array. You must use an efficient algorithm that takes advantage of the fact that the input arrays are already sorted. For example: ``` Input: arr1 = [1, 3, 5] arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] ``` Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 10^6) — the lengths of arr1 and arr2 respectively. - The second line contains m integers, the elements of arr1. - The third line contains n integers, the elements of arr2. Output: - Print a single line containing the merged sorted array of length m + n. Example: Input: ``` m = 3 n = 3 arr1 = [1, 3, 5] arr2 = [2, 4, 6] ``` Output: ``` [1, 2, 3, 4, 5, 6] ``` Constraints: - You should try to implement the merging process in O(m + n) time complexity.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged sorted array. m, n = len(arr1), len(arr2) merged_array = [] i, j = 0, 0 while i < m and j < n: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < m: merged_array.append(arr1[i]) i += 1 while j < n: merged_array.append(arr2[j]) j += 1 return merged_array # Example usage: # arr1 = [1, 3, 5] # arr2 = [2, 4, 6] # print(merge_sorted_arrays(arr1, arr2)) # Output: [1, 2, 3, 4, 5, 6]"},{"question":"You are given an array of integers. A \\"mountain\\" in the array is defined as a sequence of consecutive integers that strictly increases to a peak, and then strictly decreases. The peak of the mountain cannot be at the start or end of the sequence. Your task is to find the length of the longest mountain. If no mountain exists, return 0. Write a function that takes an array of integers as input and returns the length of the longest mountain. Function signature: ```python def longest_mountain(arr: List[int]) -> int: ``` # Input - The input will be a single array of integers `arr` with a length between 1 and 10^4. # Output - Return an integer representing the length of the longest mountain in the array. # Example ```python assert longest_mountain([2, 1, 4, 7, 3, 2, 5]) == 5 # The longest mountain is [1, 4, 7, 3, 2] assert longest_mountain([2, 2, 2]) == 0 # No mountain exists ``` # Constraints - You cannot use additional space, so your solution\'s space complexity should be O(1). - Aim for a time complexity of O(n). # Clarification - A valid mountain must have at least three elements. - Ensure that the values strictly increase and then strictly decrease.","solution":"def longest_mountain(arr): Returns the length of the longest mountain in the array. n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i-1] < arr[i] > arr[i+1]: # Found a peak, now expand to both sides left = i - 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 right = i + 1 while right < n-1 and arr[right] > arr[right+1]: right += 1 # Calculate the length of the current mountain current_mountain_length = right - left + 1 longest = max(longest, current_mountain_length) return longest"},{"question":"You are given an n times n square grid representing a maze, where each cell in the grid is either a wall (\'#\') or an open space (\'.\'). You need to help a robot navigate from the top-left corner of the grid (cell (1,1) with 1-based indexing) to the bottom-right corner (cell (n,n)). The robot can move in four directions: up, down, left, and right. However, the robot cannot pass through walls. In addition to the movements, the robot has a special ability to \\"jump\\" a certain maximum number of cells at a time, k. When the robot jumps, it can skip over walls and open spaces, but it must land on an open space. The task is to find the minimum number of moves (including jumps) required for the robot to reach the target. If it is impossible for the robot to reach the bottom-right corner, you should return -1. Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 20). Description of the test cases follows. Each test starts with two integers n and k (1 leq n leq 50, 1 leq k leq 10). The next n lines contain n characters each (\'#\' or \'.\') representing the maze. # Input Format: - The first line of input contains a single integer t — the number of test cases. - For each test case: - The first line contains two integers n and k — the size of the grid and the maximum jump distance. - The next n lines contain a string of length n consisting of characters \'.\' and \'#\' only, representing the grid. # Output Format: - For each test case, print a single integer — the minimum number of moves required for the robot to reach the bottom-right corner, or -1 if it is impossible. # Example: Input: ``` 2 4 2 .... .#.# .#.. .... 3 1 .#. .#. . ``` Output: ``` 4 -1 ``` # Explanation: - In the first test case, the robot can move as follows: (1,1) -> (2,1) -> (3,1) -> (3,3) -> (4,4). Thus, it requires 4 moves. - In the second test case, it is impossible for the robot to reach the bottom-right corner due to the walls blocking the only path. To solve this problem, you can use a modified Breadth-First Search (BFS) algorithm, incorporating the robot\'s ability to jump up to k cells.","solution":"from collections import deque def minimum_moves(t, test_cases): results = [] def valid_position(x, y, n): return 0 <= x < n and 0 <= y < n for test in test_cases: n, k, grid = test[\'n\'], test[\'k\'], test[\'grid\'] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': results.append(-1) continue queue = deque([(0, 0, 0)]) visited = set([(0, 0)]) found = False while queue: x, y, moves = queue.popleft() if (x, y) == (n-1, n-1): results.append(moves) found = True break for dx, dy in directions: for step in range(1, k + 1): nx, ny = x + dx * step, y + dy * step if not valid_position(nx, ny, n) or grid[nx][ny] == \'#\' or (nx, ny) in visited: break if (nx, ny) == (n-1, n-1): results.append(moves + 1) found = True break visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) if found: break if not found: results.append(-1) return results"},{"question":"Given a sequence of integers, you are to determine the length of the longest contiguous subsequence where all elements are either strictly increasing or strictly decreasing. A contiguous subsequence is a subsequence created by deleting some elements of the array without rearranging the order of the remaining elements. Strictly increasing means that each element is greater than the one preceding it, and strictly decreasing means each element is less than the one preceding it. # Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the length of the sequence. The second line contains n space-separated integers, where each integer represents an element of the sequence. # Output Output a single integer, the length of the longest contiguous subsequence where the elements are either strictly increasing or strictly decreasing. # Example **Input:** ``` 8 1 3 5 4 3 2 1 6 ``` **Output:** ``` 5 ``` **Explanation:** The longest contiguous subsequence that is either strictly increasing or strictly decreasing is `[5, 4, 3, 2, 1]`, which has a length of 5.","solution":"def longest_contiguous_subsequence(n, sequence): if n == 0: return 0 longest_len = 1 current_len = 1 increasing = None # None if we haven\'t started determining the trend yet for i in range(1, n): if sequence[i] > sequence[i - 1]: if increasing is None or increasing: current_len += 1 else: current_len = 2 increasing = True elif sequence[i] < sequence[i - 1]: if increasing is None or not increasing: current_len += 1 else: current_len = 2 increasing = False else: current_len = 1 increasing = None longest_len = max(longest_len, current_len) return longest_len"},{"question":"You are given a list of unique alphanumeric strings. Your task is to rearrange the strings in such a way that the concatenated result of the strings is lexicographically smallest. Input: The first line contains a single integer n (1 ≤ n ≤ 100) — the number of strings. The next n lines contain one string each. Each string consists of only alphanumeric characters and its length is between 1 and 10, inclusive. Output: Output the lexicographically smallest concatenated string. Example: Input: 3 b2 a1 a2 Output: a1a2b2","solution":"def lexicographically_smallest_concatenation(strings): Rearranges the strings in such a way that the concatenated result of the strings is lexicographically smallest. :param strings: List of strings to be concatenated. :type strings: list of str :return: Concatenated string that is lexicographically smallest. :rtype: str strings.sort() return \'\'.join(strings)"},{"question":"You are given two strings, s and t, consisting of lowercase English letters. Your task is to find the length of the longest substring that appears in both s and t. The first line of the input contains an integer q (1 le q le 100) — the number of queries. Then q queries follow. The first line of each query contains a string s (1 le |s| le 1000) — the length of the string s. The second line of each query contains a string t (1 le |t| le 1000) — the length of the string t. Both strings consist of lowercase English letters. For each query, print the answer — the length of the longest common substring between strings s and t. **Input:** 2 abcde bcdef 1234 5678 **Output:** 4 0 In the example above, for the first query, the longest common substring is \\"bcde\\" with a length of 4. For the second query, there are no common substrings between \\"1234\\" and \\"5678\\", so the length is 0.","solution":"def longest_common_substring_length(s, t): Function to return the length of the longest common substring between strings s and t. m, n = len(s), len(t) # Create a 2D array to store lengths of longest common suffixes of substrings. dp = [[0] * (n + 1) for _ in range(m + 1)] result = 0 # To store length of the longest common substring # Building the dp array and finding the maximum value for i in range(1, m + 1): for j in range(1, n + 1): if s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] + 1 result = max(result, dp[i][j]) else: dp[i][j] = 0 return result"},{"question":"In a mysterious land called Graphonia, there exists a kingdom with n cities and m bidirectional roads connecting pairs of cities. The kingdom is undergoing a significant project to ensure that there is exactly one unique path between any two cities, hence making the road connections form a tree (a connected, acyclic graph). Your task is to remove the minimum number of roads necessary to achieve this goal. The first line of input contains two integers, n and m (1 ≤ n ≤ 10^5, n-1 ≤ m ≤ 2*10^5), representing the number of cities and the number of roads, respectively. Each of the next m lines contains two space-separated integers, u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional road between cities u and v. Output a single integer, the minimum number of roads that need to be removed to transform the network of cities into a tree. **Example:** Input: ``` 5 6 1 2 1 3 2 3 3 4 4 5 1 5 ``` Output: ``` 2 ``` Explanation: One possible solution is to remove the roads (2, 3) and (1, 5), resulting in a tree with the unique paths: 1 - 2 1 - 3 3 - 4 4 - 5","solution":"def min_roads_to_remove(n, m, roads): Returns the minimum number of roads that need to be removed to convert the given network of roads into a tree structure. A tree has exactly n-1 edges and no cycles. If a graph with n nodes has m edges, then m - (n - 1) edges need to be removed to make it a tree. # A tree with n nodes has exactly n-1 edges return m - (n - 1) # Example usage n = 5 m = 6 roads = [ (1, 2), (1, 3), (2, 3), (3, 4), (4, 5), (1, 5) ] print(min_roads_to_remove(n, m, roads)) # Output: 2"},{"question":"Anna is participating in a programming competition. She encountered a problem where she needs to manipulate a sequence of integers. Given an integer array `arr` of length `n`, Anna should find the sum of all unique elements in the array. An element is considered unique if it appears exactly once in the array. Write a function to help Anna solve this problem. # Input - The first line contains a single integer n (1 ≤ n ≤ 105), representing the length of the array. - The second line contains n space-separated integers arr[i] (1 ≤ arr[i] ≤ 109). # Output - Print a single integer representing the sum of all unique elements in the array. # Examples Example 1 **Input** ``` 5 1 2 2 3 4 ``` **Output** ``` 8 ``` **Explanation** The elements 1, 3, and 4 appear only once in the array, thus the sum is 1 + 3 + 4 = 8. Example 2 **Input** ``` 8 4 4 1 3 5 1 2 2 ``` **Output** ``` 8 ``` **Explanation** The elements 3 and 5 appear only once in the array, thus the sum is 3 + 5 = 8.","solution":"def sum_of_unique_elements(arr): Finds the sum of all unique elements in the array. Parameters: arr (list): List of integers. Returns: int: Sum of unique elements. from collections import Counter element_count = Counter(arr) unique_elements_sum = sum(k for k, v in element_count.items() if v == 1) return unique_elements_sum"},{"question":"John and Jane are playing a strategic counting game. The game starts with two integers, n and k, where 1 ≤ n ≤ 10^9 and 1 ≤ k ≤ 10^6. John and Jane alternate turns, with John going first. Each turn, a player chooses an integer i (1 ≤ i ≤ k) and subtracts it from n (n = n - i). The player who cannot make a move because n is less than 1 loses the game. Your task is to determine who will win the game if both players play optimally. The first line of input contains two integers, n and k. Output \\"John\\" if John wins the game when both play optimally, otherwise print \\"Jane\\". Example: Input: 5 3 Output: John Explanation: In the beginning, n = 5 and k = 3. John can start by subtracting 3, making n = 2. Jane must then subtract either 1, 2, or 3. If Jane subtracts 1, n = 1 and John wins by subtracting 1 on his turn. If Jane subtracts 2 or 3, n becomes a non-positive number, and John wins instantly. Therefore, John can always win by playing optimally.","solution":"def find_winner(n, k): Determine the winner of the game. John starts first. Parameters: n (int): The starting integer, 1 ≤ n ≤ 10^9. k (int): The maximum number that can be subtracted in one move, 1 ≤ k ≤ 10^6. Returns: str: \\"John\\" if John wins, \\"Jane\\" if Jane wins. if n % (k + 1) == 0: return \\"Jane\\" else: return \\"John\\""},{"question":"In a wireless sensor network, some sensor nodes need to send their collected data to a base station for further analysis. Each node can either directly send its data to the base station if it is within range, or relay it through other nodes. The range of a node is determined by its transmission power. All nodes in the network are synchronized and operate on the same channel. You are given a number of nodes represented by their coordinates on a 2D plane. Each node has an equal transmission power that determines its maximum transmission distance d. Two nodes can communicate directly if the Euclidean distance between them is less than or equal to d. Given the coordinates of the nodes, the transmission distance d, and the index of the base station (which is one of the nodes), your task is to determine whether each node can send its data to the base station either directly or through one or more relay nodes. # Input The input format is as follows: - An integer N (2 le N le 10^4), the number of nodes. - An integer d (1 le d le 10^4), the maximum transmission distance of the nodes. - Two integers x_i and y_i ((0 le x_i, y_i le 10^4) for each node), the coordinates of each node. - An integer b (1 le b le N), the index of the base station (1-based index). # Output Output a single line containing exactly N space-separated strings of \\"YES\\" or \\"NO\\", where the i^{th} string is \\"YES\\" if the i^{th} node can send its data to the base station (either directly or indirectly), or \\"NO\\" otherwise. # Example Input: ``` 5 5 0 0 1 1 2 2 3 3 4 4 1 ``` Output: ``` YES YES YES YES YES ``` # Explanation - Node 1 (base station) can obviously communicate with itself, so the answer is \\"YES\\". - Node 2 is within the transmission range of Node 1, so the answer is \\"YES\\". - Node 3 is within the transmission range of Node 2, and thus indirectly connected to Node 1, so the answer is \\"YES\\". - Node 4 is within the transmission range of Node 3, and thus indirectly connected to Node 1, so the answer is \\"YES\\". - Node 5 is within the transmission range of Node 4, and thus indirectly connected to Node 1, so the answer is \\"YES\\".","solution":"import math def can_communicate(N, d, coordinates, base_station_index): def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) base_station_index -= 1 # Convert 1-based index to 0-based index adj_list = [[] for _ in range(N)] # Build adjacency list using distance threshold d for i in range(N): for j in range(i + 1, N): if distance(coordinates[i], coordinates[j]) <= d: adj_list[i].append(j) adj_list[j].append(i) # Use BFS to find all reachable nodes from the base station reachable = [False] * N queue = [base_station_index] reachable[base_station_index] = True while queue: current = queue.pop(0) for neighbor in adj_list[current]: if not reachable[neighbor]: reachable[neighbor] = True queue.append(neighbor) return [\\"YES\\" if reachable[i] else \\"NO\\" for i in range(N)] # Example usage N = 5 d = 5 coordinates = [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)] base_station_index = 1 output = can_communicate(N, d, coordinates, base_station_index) print(\\" \\".join(output))"},{"question":"You are given a list of strings containing lowercase letters of the English alphabet. Your task is to group these strings into sets of anagrams. Two strings are anagrams if each can be rearranged to form the other. Return a sorted list of lists, where each list contains anagrams sorted in ascending lexicographical order and the lists themselves are sorted based on the lexicographical order of their first elements. # Input - The first line contains an integer, `n`, representing the number of strings. - Each of the next `n` lines contains a single string. The total number of characters in all strings combined will not exceed 10,000. # Output - Output a sorted list of lists where each inner list contains anagrams sorted in ascending lexicographical order and the outer list is sorted based on the first elements of the inner lists. # Example Input ``` 6 eat tea tan ate nat bat ``` Output ``` [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"]] ``` # Constraints - All strings consist of lowercase English letters only. - An empty string will not be considered as input.","solution":"def group_anagrams(strings): from collections import defaultdict anagram_map = defaultdict(list) for string in strings: sorted_string = \'\'.join(sorted(string)) anagram_map[sorted_string].append(string) anagram_groups = [sorted(group) for group in anagram_map.values()] anagram_groups.sort(key=lambda x: x[0]) return anagram_groups"},{"question":"You are leading a project at a robotics company where you need to optimize the movement of multiple robots within a large grid-based warehouse. Each robot can move in four directions - north, south, east, and west. However, to prevent collisions and ensure optimal routing, each robot\'s path must avoid specific obstacles placed in the warehouse. Your task is to write a function that helps in determining the shortest distance from the robot\'s starting position to its target position within the grid while avoiding obstacles. If it\'s not possible for the robot to reach its target, return -1. The warehouse is represented as a 2D grid where each cell is either empty (represented as 0), an obstacle (represented as 1), the robot\'s starting position (represented as \'S\'), or the target position (represented as \'T\'). The function signature is as follows: ```python def shortest_path(warehouse: List[List[int]]) -> int: ``` # Input - A 2D list named `warehouse` of dimension `n x m` (1 ≤ n, m ≤ 1000), representing the grid. The start position (\'S\') and the target position (\'T\') are guaranteed to be present. # Output - Return the shortest distance (an integer) from \'S\' to \'T\' avoiding obstacles, or -1 if it is unattainable. # Constraints - The grid contains only valid characters {0, 1}. The valid sample characters \'S\' and \'T\' can appear only once. - The start (\'S\') and target (\'T\') positions are separate and not on obstacles. # Example ```python warehouse = [ [0, 0, 0, 0, \'T\'], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [\'S\', 1, 0, 1, 0], [0, 0, 0, 0, 0] ] print(shortest_path(warehouse)) # Output: 7 ``` Explanation: In the above example, the shortest path from \'S\' to \'T\' avoiding obstacles takes 7 steps. One possible path could be: - Move north from (3, 0) to (2, 0) - Move north from (2, 0) to (1, 0) - Move east from (1, 0) to (1, 1) - Move east from (1, 1) to (1, 2) - Move north from (1, 2) to (0, 2) - Move east from (0, 2) to (0, 3) - Move east from (0, 3) to (0, 4)","solution":"from typing import List from collections import deque def shortest_path(warehouse: List[List[int]]) -> int: rows, cols = len(warehouse), len(warehouse[0]) # Helper functions to get the start \'S\' and target \'T\' positions def find_positions(): start, target = None, None for i in range(rows): for j in range(cols): if warehouse[i][j] == \'S\': start = (i, j) elif warehouse[i][j] == \'T\': target = (i, j) return start, target start, target = find_positions() # Directions: N, S, E, W (row, col) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(*start, 0)]) visited = set() visited.add(start) while queue: r, c, dist = queue.popleft() if (r, c) == target: return dist # Explore neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and warehouse[nr][nc] != 1 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # Target not reachable"},{"question":"Given an integer array nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Function Signature: def twoSum(nums: List[int], target: int) -> List[int]:","solution":"from typing import List def twoSum(nums: List[int], target: int) -> List[int]: Returns indices of the two numbers such that they add up to target. Args: nums : List[int] : List of integers. target : int : Target sum. Returns: List[int] : Indices of the two numbers that sum up to target. num_to_index = {} # Dictionary to store the potential complement and its index. for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index raise ValueError(\\"No two sum solution\\")"},{"question":"Farmer Johnny Bubbles is planning to plant new bubble crops in his rectangular bubblefield, which is divided into N x M square parcels. However, the soil quality of each parcel varies, and he wants to ensure that the bubbles get planted in the most fertile soil. Each parcel has a fertility value F_{i,j}, which indicates how fertile the parcel in the i^{th} row and j^{th} column is. Johnny wants to plant bubbles in a rectangular sub-area of the bubblefield such that the total fertility of all the parcels in that sub-area is maximized. This sub-area can be any set of continuous rows and columns. Your task is to help Johnny determine the maximum total fertility achievable by selecting an optimal rectangular sub-area within the bubblefield. # Input: The first line contains two integers, N and M (1 leq N, M leq 500), the dimensions of the bubblefield. Each of the next N lines contains M integers. The j^{th} element in the i^{th} line is F_{i,j} (-10^{4} leq F_{i,j} leq 10^{4}), the fertility value of the parcel located in the i^{th} row and the j^{th} column. # Output: Output a single integer — the maximum total fertility of any rectangular sub-area in the bubblefield. # Example: Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` Explanation: In the example, Johnny can select the sub-area formed by the 2nd to the 3rd rows and the 2nd to the 4th columns to get the maximum total fertility of 29.","solution":"def max_total_fertility(N, M, fertility): # Function to calculate the maximum subarray sum using Kadane\'s algorithm def max_subarray_sum(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(max_ending_here + x, x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_fertility = float(\'-inf\') # Iterate over left column bounds for left in range(M): # Initialize a temporary array to store the sum of elements of each row temp = [0] * N # Iterate over right column bounds for right in range(left, M): # Update the row sum for the current columns for row in range(N): temp[row] += fertility[row][right] # Find the maximum subarray sum for the updated row sum array max_fertility = max(max_fertility, max_subarray_sum(temp)) return max_fertility"},{"question":"You are given a list of integers representing temperatures recorded over several days. For each day, you want to determine how many days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day instead. For example, given the list [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0]. The first integer indicates how many days to wait to get a warmer temperature from 73, which is 74 after 1 day. The same for 74 to 75. For 75, the next warmer temperature is 76 after 4 days. **Constraints:** - The length of the temperature list is in the range [1, 100000]. - Each temperature will be an integer in the range [30, 100]. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of temperature recordings. - The second line contains n integers t1, t2, ..., tn (30 ≤ ti ≤ 100) — the list of recorded temperatures. **Output:** - Output a list of n integers, where the i-th integer represents the number of days you have to wait until a warmer temperature. **Example:** **Input:** ``` 8 73 74 75 71 69 72 76 73 ``` **Output:** ``` 1 1 4 2 1 1 0 0 ```","solution":"def dailyTemperatures(temperatures): Given a list of integers representing daily temperatures, returns a list of integers indicating the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the output is 0 for that day instead. :param temperatures: List[int] :return: List[int] n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: j = stack.pop() answer[j] = i - j stack.append(i) return answer"},{"question":"You are given a string consisting of lowercase English letters and you are to reorder the characters of the string such that no two adjacent characters are the same. If such a reordering is not possible, return an empty string. When creating the reordering, aim to maintain the relative frequency of the characters. If there are multiple valid reorderings, return any of them. The input consists of one string s with no more than 100,000 characters. Output the reordered string or an empty string if it is not possible to reorder the characters to meet the condition. Example input: aab Example output: aba Example input: aaab Example output:","solution":"import heapq from collections import Counter def rearrange_string(s: str) -> str: Reorder the characters of the string such that no two adjacent characters are the same. If not possible, return an empty string. if not s: return \\"\\" # Count the frequency of each character counter = Counter(s) # Create a max heap based on the count of characters max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # If the previous character can be used again, add it back to the heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count = count + 1 prev_char = char result_str = \\"\\".join(result) # If the length of the result is not the same as the input string, it is not possible if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Kevin is participating in a treasure hunt. He has a treasure map with specific directions on it. The map contains a grid with some obstacles and Kevin\'s starting position. Kevin must navigate the grid to find the treasure, avoiding obstacles along the way. The grid is represented by an \'n\' by \'m\' matrix where: - A cell with a \'S\' represents Kevin\'s starting position. - A cell with a \'E\' represents the position of the treasure. - A cell with a \'.\' represents an empty cell. - A cell with a \'#\' represents an obstacle. Kevin can move in four directions: up, down, left, and right. Write a program to determine if Kevin can reach the treasure from his starting position. If he can reach the treasure, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two integers, \'n\' and \'m\' (1 leq n, m leq 100) — the dimensions of the grid. The next \'n\' lines contain \'m\' characters each — the grid map. Input ``` 4 4 S... .#.# .#E. .... ``` Output ``` YES ``` Input ``` 3 3 S#E #.# # ``` Output ``` NO ```","solution":"def can_reach_treasure(n, m, grid): from collections import deque def is_within_bounds(x, y): return 0 <= x < n and 0 <= y < m directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque() visited = [[False] * m for _ in range(n)] start_found = False for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) queue.append(start) visited[i][j] = True start_found = True break if start_found: break while queue: cur_x, cur_y = queue.popleft() if grid[cur_x][cur_y] == \'E\': return \\"YES\\" for direction in directions: new_x, new_y = cur_x + direction[0], cur_y + direction[1] if is_within_bounds(new_x, new_y) and not visited[new_x][new_y] and grid[new_x][new_y] != \'#\': visited[new_x][new_y] = True queue.append((new_x, new_y)) return \\"NO\\""},{"question":"You are given an array `prices` where `prices[i]` is the price of a given stock on the ith day, and an integer `fee` representing a transaction fee. Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. Each transaction consists of buying one stock and selling one stock. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). The first line contains an integer n (1 ≤ n ≤ 50000) — the number of days. The second line contains n integers prices[i] (1 ≤ prices[i] ≤ 50000) — the prices of the stock on the ith day. The third line contains an integer fee (1 ≤ fee ≤ 50000) — the transaction fee. Output a single integer — the maximum profit you can achieve. Example: Input: 6 1 3 2 8 4 9 2 Output: 8 Explanation: Transactions = [(buy at price 1, sell at price 8), (buy at price 4, sell at price 9)] Profit = ((8 - 1 - 2) + (9 - 4 - 2)) = 8","solution":"def max_profit(prices, fee): n = len(prices) if n == 0: return 0 cash = 0 hold = -prices[0] for i in range(1, n): cash = max(cash, hold + prices[i] - fee) hold = max(hold, cash - prices[i]) return cash"},{"question":"Given an array of integers, implement a function that finds the longest contiguous subarray (not necessarily sorted) such that the sum of the elements in the subarray is equal to a given target sum. Write a function `find_longest_subarray_with_sum` with the following signature: ```python def find_longest_subarray_with_sum(target: int, arr: List[int]) -> List[int]: pass ``` **Parameters:** - `target` (int): The sum that the contiguous subarray should equal. - `arr` (List[int]): The list of integers to search within. **Output:** - `List[int]`: The longest contiguous subarray which sums up to the target. If there are multiple subarrays with the same maximum length, return the first one found. If no such subarray exists, return an empty list. **Example:** ```python assert find_longest_subarray_with_sum(7, [1, 2, 3, 4, 5, 6, 7]) == [3, 4] assert find_longest_subarray_with_sum(10, [1, 2, 3, 4, 5, 9, -1, 2]) == [2, 3, 4, 5, -4] assert find_longest_subarray_with_sum(0, [0, 0, -1, 1, -1, 1, 0]) == [0, 0, -1, 1, -1, 1, 0] ```","solution":"from typing import List def find_longest_subarray_with_sum(target: int, arr: List[int]) -> List[int]: sum_dict = {} current_sum = 0 max_length = 0 start_index = -1 for i, num in enumerate(arr): current_sum += num if current_sum == target: max_length = i + 1 start_index = 0 if (current_sum - target) in sum_dict: subarray_length = i - sum_dict[current_sum - target] if subarray_length > max_length: max_length = subarray_length start_index = sum_dict[current_sum - target] + 1 if current_sum not in sum_dict: sum_dict[current_sum] = i if start_index == -1: return [] return arr[start_index:start_index + max_length]"},{"question":"Create a function called `countSubarraysWithSum` that takes two arguments: 1. An array of integers `arr` 2. An integer `targetSum` The function should return an integer representing the number of contiguous subarrays within `arr` that add up to `targetSum`. # Example: ```python countSubarraysWithSum([1, 1, 1], 2) -> 2 countSubarraysWithSum([1, 2, 3], 3) -> 2 ``` # Explanation: - In the first example, there are two subarrays that sum to 2: `[1,1]` (starting from index 0 and index 1). - In the second example, there are two subarrays that sum to 3: `[1, 2]` and `[3]`. # Constraints: - You can assume the length of the input array will not exceed (10^5). - The elements of the input array will be between (-10^9) and (10^9).","solution":"def countSubarraysWithSum(arr, targetSum): Returns the number of contiguous subarrays within `arr` that sum up to `targetSum`. from collections import defaultdict count = 0 current_sum = 0 sum_counts = defaultdict(int) sum_counts[0] = 1 for num in arr: current_sum += num if (current_sum - targetSum) in sum_counts: count += sum_counts[current_sum - targetSum] sum_counts[current_sum] += 1 return count"},{"question":"You are given two arrays of integers. Each array can contain both positive and negative numbers. Your task is to determine if there is a subarray in the first array whose sum of elements is equal to any element in the second array. A subarray is defined as a contiguous set of elements within an array. The input consists of two lines. The first line contains space-separated integers representing the elements of the first array. The second line contains space-separated integers representing the elements of the second array. Output \\"YES\\" if there exists such a subarray in the first array. Otherwise, output \\"NO\\". **Example:** Input: ``` 1 2 3 4 5 7 8 9 10 ``` Output: ``` YES ``` Explanation: The subarray [3, 4] of the first array sums to 7, which is present in the second array. Therefore, the output is \\"YES\\".","solution":"def has_subarray_with_sum(arr1, arr2): Determines if there is a subarray in arr1 whose sum is equal to any element in arr2. :param arr1: List of integers representing the first array. :param arr2: List of integers representing the second array. :return: \\"YES\\" if such a subarray exists and \\"NO\\" otherwise # Convert arr2 to a set for O(1) lookups set_arr2 = set(arr2) # Iterate over all possible subarrays within arr1 for start in range(len(arr1)): subarray_sum = 0 for end in range(start, len(arr1)): subarray_sum += arr1[end] if subarray_sum in set_arr2: return \\"YES\\" return \\"NO\\""},{"question":"You are given a large integer `n`. Your task is to determine the number of distinct prime factors of `n!` (where `n!` is the factorial of `n`). The factorial of a non-negative integer `n`, denoted `n!`, is the product of all positive integers less than or equal to `n`. Formally, `n! = 1 * 2 * 3 * ... * n`. **Input:** - A single integer `n` (1 ≤ n ≤ 100,000). **Output:** - Output the number of distinct prime factors of `n!`. **Examples:** - Example 1: - Input: 5 - Output: 3 - Explanation: `5! = 120`. The prime factors of 120 are `2, 3, 5`. - Example 2: - Input: 10 - Output: 4 - Explanation: `10! = 3628800`. The prime factors of 3628800 are `2, 3, 5, 7`. **Notes:** - The prime factors of a number are the prime numbers that divide it exactly, without leaving a remainder. - You may use precomputation techniques to handle large values of `n` efficiently.","solution":"def count_distinct_prime_factors_of_factorial(n): Returns the number of distinct prime factors of n!. def sieve_of_eratosthenes(limit): is_prime = [True] * (limit + 1) is_prime[0], is_prime[1] = False, False for p in range(2, int(limit**0.5) + 1): if is_prime[p]: for multiple in range(p*p, limit + 1, p): is_prime[multiple] = False primes = [p for p in range(limit + 1) if is_prime[p]] return primes prime_list = sieve_of_eratosthenes(n) return len(prime_list)"},{"question":"A group of friends are planning a road trip across the country. They want to visit a set of cities represented by nodes in a graph. The cities (nodes) are connected by a set of bi-directional highways (edges). Each highway has an associated travel cost. They want to find the minimum cost required to visit all cities starting from a given city, allowing revisits but ensuring that all cities are eventually covered at least once. Consider a graph with n cities (nodes) and m highways (edges). The cities are numbered from 1 to n. The task is to calculate the minimum cost to visit all cities starting from city 1. The input consists of: - The first line contains two integers, n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and highways respectively. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5), where u and v are the cities connected by a highway and w is the travel cost. It is guaranteed that the graph is connected, meaning there is at least one path between any two cities. Output the minimum cost required to visit all cities starting from city 1. Example: Input: 4 5 1 2 4 1 3 2 2 3 1 3 4 5 4 2 3 Output: 10 Explanation: One possible minimum cost path is: Starting from city 1, travel: - 1 to 3 (cost 2) - 3 to 2 (cost 1) - 2 to 4 (cost 3) - Sum of the path costs: 2 + 1 + 3 = 6 Since all cities are now visited and considering revisits or other paths will not reduce the total cost, the minimum cost to visit all cities is 6.","solution":"import heapq def minimum_cost_to_visit_all_cities(n, m, highways): Computes the minimum cost required to visit all cities starting from city 1. :param n: Number of cities :param m: Number of highways :param highways: List of tuples representing the highways (u, v, w) :returns: Minimum cost to visit all cities from city 1 graph = {i: [] for i in range(1, n+1)} for u, v, w in highways: graph[u].append((w, v)) graph[v].append((w, u)) # Prim\'s Algorithm for Minimum Spanning Tree (MST) def prim_mst(start): visited = set() total_cost = 0 min_heap = [(0, start)] while min_heap: cost, u = heapq.heappop(min_heap) if u not in visited: visited.add(u) total_cost += cost for wc, v in graph[u]: if v not in visited: heapq.heappush(min_heap, (wc, v)) return total_cost return prim_mst(1)"},{"question":"In a land far away, there exists a peculiar garden with a unique irrigation system. The garden is represented as a 2D grid of dimension n x m, where each cell can either be a plant or an empty patch. The irrigation system works by placing sprinklers on the garden. Each sprinkler can water all plants in a cross-shaped pattern extending infinitely: all cells in the same row and column are watered, as long as they are not blocked by an empty patch. As the chief gardener, your objective is to determine the minimum number of sprinklers needed to water all plants in the garden. You may place a sprinkler only on a cell that contains a plant. The input consists of: - The first line, which contains two integers n and m (1 <= n, m <= 1000), the dimensions of the garden grid. - The next n lines, each with m characters, representing the garden grid. Each character is either \'P\' (representing a plant) or \'.\' (representing an empty patch). Your task is to write a program that calculates the minimum number of sprinklers required to ensure that every plant is watered. Output a single integer, the minimum number of sprinklers needed. Example: Input: 4 4 P.P. ..P. P..P ...P Output: 4","solution":"def min_sprinklers_needed(garden): Calculate the minimum number of sprinklers needed to water all plants in the garden. Parameters: garden (List[str]): A 2D list representing the garden grid with \'P\' for plants and \'.\' for empty patches. Returns: int: The minimum number of sprinklers needed. n = len(garden) m = len(garden[0]) # Arrays to keep track if any row or column has a plant (\'P\') rows_with_plant = [False] * n cols_with_plant = [False] * m # Mark rows and columns that have at least one plant for i in range(n): for j in range(m): if garden[i][j] == \'P\': rows_with_plant[i] = True cols_with_plant[j] = True # The minimum number of sprinklers needed is the max of the number of unique rows or columns with plants return max(sum(rows_with_plant), sum(cols_with_plant))"},{"question":"You are given two strings, `a` and `b`, both containing lowercase English letters and having length `n`. Strings `a` and `b` are considered symmetrical if for every character pair (ai, bi) (1 ≤ i ≤ n), the characters are identical: ai = bi. Alternatively, any non-symmetrical pair can be \\"fixed\\" by swapping a character from `a` with a character from `b`, directly addressing their non-symmetrical positions, at least once. You need to determine the number of ways to make the two strings symmetrical by performing a series of swaps between characters of `a` and `b`. Note that you are allowed to perform as many swaps as needed, and the goal is to ensure that, after some operations, each ai = bi. The first line of input contains integer n (1 ≤ n ≤ 100000) — the length of strings `a` and `b`. The second line contains the string `a`, consisting of lowercase English letters. The third line contains the string `b`, also consisting of lowercase English letters. Output a single integer representing the number of distinct ways to make the strings symmetrical, modulo 1000000007 (10^9 + 7). # Example Input: ``` 3 abc bca ``` Output: ``` 3 ``` Input: ``` 4 abcd dcba ``` Output: ``` 6 ``` # Explanation In the first example, one possible way is to swap `a[0]` with `b[2]`, `a[1]` with `b[1]`, and `a[2]` with `b[0]`. In the second example, you can make multiple swaps to ensure that each character from `a` matches with `b`.","solution":"def count_ways_to_symmetrical(n, a, b): MOD = 1000000007 # Count frequencies of each character in a and b freq_a = [0] * 26 freq_b = [0] * 26 for i in range(n): freq_a[ord(a[i]) - ord(\'a\')] += 1 freq_b[ord(b[i]) - ord(\'a\')] += 1 # Check if making symmetrical is possible for i in range(26): if freq_a[i] != freq_b[i]: return 0 # If making symmetrical is possible, compute the number of ways ways = 1 for i in range(1, n + 1): ways = (ways * i) % MOD return ways"},{"question":"Motorcycle Touring Championship As part of the annual Motorcycle Touring Championship, riders must navigate through a challenging course consisting of n checkpoints. Riders start at the first checkpoint and must navigate to the nth checkpoint, gathering valuable items called \\"trophies\\" along the way. Each checkpoint provides a different number of trophies, and riders can choose to collect them either while advancing forward or while turning back to revisit earlier checkpoints. You are tasked with determining the maximum number of trophies a rider can collect when making a given number of moves. A move can be either advancing to the next checkpoint or returning to the previous checkpoint. # Input The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^6) — the number of checkpoints and the maximum number of moves allowed. The second line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ 10^3) — the number of trophies available at each checkpoint from 1 to n. # Output Output a single integer representing the maximum number of trophies that can be collected in k moves. # Example Input: ``` 5 7 100 200 300 400 500 ``` Output: ``` 1500 ``` # Explanation - If the rider makes the following sequence of moves: 1 -> 2 -> 3 -> 4 -> 3 -> 2 -> 3 -> 4 - The trophies collected are: 100 + 200 + 300 + 400 + 300 + 200 + 300 + 400 = 1500 This question tests dynamic programming and optimization techniques considering constraints and maximizing a cumulative property (trophies).","solution":"def max_trophies(n, k, trophies): if k >= n - 1: return sum(trophies[:min(n, k+1)]) max_trophies_collected = 0 for moves_advance in range(min(k, n)): moves_left = k - moves_advance max_moves_back = min(moves_advance, moves_left // 2) for moves_back in range(max_moves_back + 1): total_moves = moves_advance + moves_back * 2 if total_moves <= k: current_trophies = sum(trophies[:moves_advance + 1]) + sum(trophies[max(0, moves_advance - moves_back + 1):moves_advance + 1]) max_trophies_collected = max(max_trophies_collected, current_trophies) return max_trophies_collected"},{"question":"Ежегодный осенний марафон соревнований по киберспорту наступает, и организаторы распределяют участников по различным дисциплинам в зависимости от их представленных предпочтений. Однако, чтобы упростить задачу, каждому участнику разрешено выбрать лишь одну дисциплину для участия. По его запросу каждый участник может зарегистрироваться в одну и только одну дисциплину. Он может выбрать из множества n дисциплин, каждая из которых имеет ограничение по количеству участников, которые могут принять участие в данной дисциплине. Эти ограничения призваны избежать переполненности, чтобы каждый участник имел приятный опыт участия. Вам даны: - Целое число n (1 ≤ n ≤ 1000) – количество дисциплин. - Далее n строк, каждая из которых содержит имя дисциплины (строка длиной до 100 символов) и целое число l (1 ≤ l ≤ 1000) – максимальное количество участников в этой дисциплине. - Целое число m (1 ≤ m ≤ 1000) – количество участников. - Далее m строк, каждая из которых содержит уникальный идентификатор участника (строка длиной до 100 символов) и имя выбранной им дисциплины (строка длиной до 100 символов). Выведите идентификаторы всех участников, которые не могут участвовать в своей выбранной дисциплине из-за превышения лимита, в том порядке, в котором они были даны во входных данных.","solution":"def get_exceeded_participants(n, disciplines, m, participants): Returns the identifiers of participants who cannot participate due to exceeding the limit in their chosen discipline. Parameters: n (int): number of disciplines. disciplines (list of tuples): each tuple contains name of the discipline (str) and its max limit (int). m (int): number of participants. participants (list of tuples): each tuple contains participant\'s ID (str) and their chosen discipline (str). Returns: list of str: list of participant IDs who cannot participate due to exceeding the limit. discipline_limits = {disc[0]: disc[1] for disc in disciplines} discipline_count = {disc[0]: 0 for disc in disciplines} exceeded_participants = [] for participant in participants: participant_id, chosen_discipline = participant if discipline_count[chosen_discipline] < discipline_limits[chosen_discipline]: discipline_count[chosen_discipline] += 1 else: exceeded_participants.append(participant_id) return exceeded_participants"},{"question":"You are given an array of integers that represents the prices of various items in a store. Your task is to find the maximum profit you can achieve by buying and selling exactly one item. Note that you must buy the item before you sell it. The given prices may contain both positive and negative values, where negative values represent discounts. Write a function `max_profit(prices)` that takes in a list of integers `prices` and returns the maximum profit you can achieve. If no profit can be achieved, the function should return 0. # Input: - An integer array `prices` of length n (1 ≤ n ≤ 1000), where each element represents the price of an item. # Output: - An integer, the maximum profit you can achieve. # Example: ```python def max_profit(prices): # Your code here # Example 1 prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 (Buy at price 1 and sell at price 6) # Example 2 prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 (No profit can be made) ``` # Constraints: - The elements of the array can be both positive and negative. - The prices list will always contain at least one element.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling exactly one item. If no profit can be achieved, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price - min_price > max_profit: max_profit = price - min_price if price < min_price: min_price = price return max_profit"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid is either empty or contains an obstacle. Initially, you are positioned at the top-left corner of the grid (cell (1,1)), and you need to reach the bottom-right corner of the grid (cell (n,m)). You can move one cell to the right or one cell down from your current position. Write a program to calculate the number of different paths you can take to reach the bottom-right corner from the top-left corner, avoiding obstacles. Input: - The first line consists of two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. - The next n lines each contain m characters, where each character is either \'.\' (indicating an empty cell) or \'#\' (indicating an obstacle). Output: - Print the number of different paths modulo 10^9+7. Example: Input: 3 3 ... .#. ... Output: 2 Explanation: There are exactly two paths from (1, 1) to (3, 3) that do not cross any obstacles: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"def num_paths(n, m, grid): MOD = 10**9 + 7 # Initialize a 2D dp array dp = [[0] * m for _ in range(n)] # Set the starting point if grid[0][0] == \'.\': dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[n-1][m-1]"},{"question":"You are given a list of tasks and their respective deadlines. Each task has a certain time it takes to complete. You need to determine if it is possible to complete all tasks before their deadlines. Each task can be represented as a tuple `(d, t)` where `d` is the deadline of the task, and `t` is the time it takes to complete the task. The list of such tuples represents all the tasks you have to complete, and you can work on one task at a time without any breaks. Write a function `can_complete_all_tasks(tasks)` where: - `tasks` is a list of tuples. Each tuple `(d, t)` represents a task with a deadline `d` and time `t` to complete. Your function should return `True` if it is possible to complete all tasks before their respective deadlines, and `False` otherwise. # Example: ```python tasks = [(4, 3), (2, 1), (1, 2)] print(can_complete_all_tasks(tasks)) # Output: False tasks = [(4, 3), (5, 1), (2, 1)] print(can_complete_all_tasks(tasks)) # Output: True ``` # Constraints: - The number of tasks will not exceed 1000. - The deadline `d` and the time `t` for each task are positive integers.","solution":"def can_complete_all_tasks(tasks): Determines if it is possible to complete all tasks before their respective deadlines. Args: tasks (list of tuples): A list of (deadline, time to complete) pairs. Returns: bool: True if all tasks can be completed before their deadlines, False otherwise. # Sort tasks based on deadlines tasks = sorted(tasks, key=lambda x: x[0]) current_time = 0 for d, t in tasks: current_time += t if current_time > d: return False return True # Example usage # tasks = [(4, 3), (2, 1), (1, 2)] # False # print(can_complete_all_tasks(tasks)) # tasks = [(4, 3), (5, 1), (2, 1)] # True # print(can_complete_all_tasks(tasks))"},{"question":"Rahul, an avid developer, is trying to improve the efficiency of a search operation within a large dataset. He is currently working on a problem where he needs to manage a list of sorted pairs and answer multiple queries efficiently. Rahul has a list of pairs, where each pair consists of two integers ((a_i, b_i)). He can perform two types of operations: 1. **Insert Operation**: Insert a new pair ((a_i, b_i)) into the list. 2. **Range Query Operation**: Given two integers (l) and (r), count the number of pairs ((a_i, b_i)) in the list such that (l leq a_i leq r). Rahul needs to perform multiple operations and keep track of the number of valid pairs for each range query. The input format is as follows: - The first line contains two integers (n) and (q) (1 leq n, q leq 10^5), the initial number of pairs in the list and the number of operations respectively. - The next (n) lines each contain two integers (a_i) and (b_i) (1 leq a_i, b_i leq 10^9), representing the initial pairs in the list. - The next (q) lines each contain: - `1 a_i b_i`: an insert operation to add pair ((a_i, b_i)). - `2 l r`: a range query operation to count pairs ((a_i, b_i)) such that (l leq a_i leq r). Output should be: - For each range query operation, output a single integer representing the number of pairs ((a_i, b_i)) such that (l leq a_i leq r). Example: Input: ``` 3 4 1 5 2 4 3 3 2 1 2 1 4 6 2 2 4 1 5 4 ``` Output: ``` 2 3 ``` Note: In the example, initially the list contains pairs ((1, 5), (2, 4), (3, 3)). The first query counts pairs with (1 leq a_i leq 2), resulting in 2 pairs: ((1, 5)) and ((2, 4)). After an insert operation of ((4, 6)), the second query counts pairs with (2 leq a_i leq 4), resulting in 3 pairs: ((2, 4)), ((3, 3)), and ((4, 6)).","solution":"from bisect import bisect_left, bisect_right class SortedPairList: def __init__(self): self.pairs = [] def insert(self, a, b): self.pairs.append((a, b)) self.pairs.sort() def range_query(self, l, r): start_index = bisect_left(self.pairs, (l, -float(\'inf\'))) end_index = bisect_right(self.pairs, (r, float(\'inf\'))) return end_index - start_index def manage_operations(n, q, initial_pairs, operations): spl = SortedPairList() for a, b in initial_pairs: spl.insert(a, b) results = [] for operation in operations: if operation[0] == 1: _, a, b = operation spl.insert(a, b) elif operation[0] == 2: _, l, r = operation results.append(spl.range_query(l, r)) return results"},{"question":"You are given an array of integers `arr` of length `n` and an integer `x`. You need to find out if there exists a contiguous subarray whose sum is exactly `x`. If such a subarray exists, print the start and end indexes (1-based) of the first such subarray found. If there are multiple such subarrays, output the first one you encounter. If no such subarray exists, print `-1`. # Input - The first line contains two integers `n` and `x` (1 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9). - The second line contains `n` integers `arr[i]` (|arr[i]| ≤ 10^4). # Output - If a subarray whose sum is `x` exists, print two space-separated integers representing the 1-based start and end indexes of the contiguous subarray. - If no such subarray exists, print `-1`. # Example Input: ``` 5 12 1 2 3 7 5 ``` Output: ``` 2 4 ``` Input: ``` 4 15 1 2 3 4 ``` Output: ``` -1 ``` Input: ``` 6 9 4 3 2 6 1 1 ``` Output: ``` 1 3 ```","solution":"def find_subarray_with_sum(arr, x): Finds a contiguous subarray with sum exactly x. Parameters: arr (list of int): List of integers representing the array. x (int): The target sum. Returns: tuple: A tuple containing the 1-based start and end indices of the subarray if found, else -1. current_sum = 0 start = 0 sum_map = {} for end in range(len(arr)): current_sum += arr[end] if current_sum == x: return (start + 1, end + 1) if (current_sum - x) in sum_map: return (sum_map[current_sum - x] + 2, end + 1) sum_map[current_sum] = end return -1"},{"question":"A string is said to be a rearrangement of another string if you can rearrange the characters of the first string to get the second string. Given a string s consisting of only lowercase English letters, determine the minimum number of adjacent swaps required to transform the string into a palindrome. If it\'s not possible to form a palindrome, return -1. The first line of input contains a single string s (1 ≤ |s| ≤ 1000). Output a single integer representing the minimum number of swaps. If it\'s impossible to form a palindrome, return -1. Examples: Input: \\"mamad\\" Output: 3 Input: \\"asflkj\\" Output: -1 Input: \\"aabb\\" Output: 2","solution":"def min_swaps_to_palindrome(s): def can_form_palindrome(s): char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1 if not can_form_palindrome(s): return -1 s = list(s) swaps = 0 i, j = 0, len(s) - 1 while i < j: if s[i] != s[j]: k = j while k > i and s[k] != s[i]: k -= 1 if i == k: s[i], s[i+1] = s[i+1], s[i] swaps += 1 continue for m in range(k, j): s[m], s[m+1] = s[m+1], s[m] swaps += 1 i += 1 j -= 1 return swaps"},{"question":"You are given an array of integers representing the heights of a series of buildings. The buildings form a skyline viewed from the left to the right. Write a function that takes the array and returns the total number of buildings that have a clear view of the sunset. A building has a clear view of the sunset if there are no taller buildings to its right. Function signature: ```python def count_sunset_buildings(buildings: List[int]) -> int: pass ``` # Input - A list of integers *buildings* representing the heights of buildings from left to right (1 ≤ len(buildings) ≤ 10^6, 1 ≤ buildings[i] ≤ 10^9). # Output - An integer representing the number of buildings that have a clear view of the sunset. # Example **Example 1:** ```python buildings = [3, 7, 8, 3, 6, 1] print(count_sunset_buildings(buildings)) # Output: 3 ``` *Explanation:* - Building at index 0 (height 3) does not have a clear view because building at index 1 (height 7) is taller. - Building at index 1 (height 7) has a clear view because there is no taller building to the right blocking its view. - Building at index 2 (height 8) has a clear view because there is no taller building to the right blocking its view. - Building at index 3 (height 3) does not have a clear view because building at index 4 (height 6) is taller. - Building at index 4 (height 6) has a clear view because there is no taller building to the right blocking its view. - Building at index 5 (height 1) has a clear view because it is the last building. **Example 2:** ```python buildings = [4, 3, 2, 1] print(count_sunset_buildings(buildings)) # Output: 4 ``` *Explanation:* - Each building has a clear view of the sunset since buildings\' heights descend from left to right.","solution":"from typing import List def count_sunset_buildings(buildings: List[int]) -> int: Returns the number of buildings with a clear view of the sunset. count = 0 max_height = 0 for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count"},{"question":"You are a participant in a contest and your goal is to predict the outcome of sequences generated by a machine. The sequences are formed by randomly choosing one of two methods: **Method A**: Start with a sequence of numbers from 1 to n in order, and then reverse the sequence k times. **Method B**: Start with a sequence of numbers from 1 to n in order, and then rotate the sequence to the right by k positions. You are given a sequence, and your task is to determine which method was used to generate it. In the first line of input there is one integer n (2 le n le 10^{6}). In the second line there are n distinct integers between 1 and n—the sequence of size n. Output \\"Method A\\" if the sequence is generated by reversing k times, otherwise output \\"Method B\\". You can assume the sequences are generated following one of the described methods, and the value of k used is unknown. # Input: ``` 5 5 4 3 2 1 ``` # Output: ``` Method A ```","solution":"def determine_method(n, sequence): Determines if the sequence was generated by Method A or Method B. Method A reverses the sequence k times. Method B rotates the sequence to the right by k positions. Arguments: n -- integer, the size of the sequence sequence -- list of integers, the sequence Returns: A string which is either \\"Method A\\" or \\"Method B\\". reversed_sequence = list(range(n, 0, -1)) if sequence == reversed_sequence: return \\"Method A\\" else: return \\"Method B\\""},{"question":"Alice has recently inherited a huge library consisting of n books. Each book has a unique integer ID. Knowing that it is hard for her to keep track of all the books, she decided to organize them in a peculiar manner. She will sort the books first by the sum of the digits of their IDs in descending order, and if two books have the same digit sum, they will be sorted by their IDs in ascending order. Your task is to help Alice by outputting the ordered list of book IDs as per her organizing rule. The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of books. The second line contains n space-separated integers, representing the IDs of the books. Output the book IDs sorted according to Alice\'s rule. Example: Input: 5 123 234 345 456 567 Output: 567 456 345 234 123","solution":"def sort_books_by_custom_rule(n, book_ids): Sorts the list of book IDs first by the sum of the digits in descending order, and if two books have the same sum, they are sorted by their IDs in ascending order. :param n: int - the number of books :param book_ids: list of int - the IDs of the books :return: list of int - the sorted book IDs def digit_sum(book_id): return sum(int(digit) for digit in str(book_id)) sorted_books = sorted(book_ids, key=lambda x: (-digit_sum(x), x)) return sorted_books # Example usage: # n = 5 # book_ids = [123, 234, 345, 456, 567] # print(sort_books_by_custom_rule(n, book_ids)) # Output: [567, 456, 345, 234, 123]"},{"question":"A string is considered to be well-balanced if for every character that appears \'k\' times in the string, its uppercase version appears \'k\' times as well. For example, the string \\"aAbBcB\\" is well-balanced as \'a\' and \'A\' both appear exactly once, and \'b\' and \'B\' both appear exactly twice. However, the string \\"aBBc\\" is not well-balanced because \'B\' appears twice while \'b\' only appears once, and there\'s no uppercase counterpart for \'a\'. Your task is to write a function that checks whether a given string is well-balanced. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) — the string to be checked. For each test case, output \\"YES\\" if the string is well-balanced, otherwise output \\"NO\\". # Sample Input 3 aABbCc aBBc aAaa # Sample Output YES NO NO","solution":"def is_well_balanced(s): Checks if the given string s is well-balanced. A string is well-balanced if for every character that appears \'k\' times in the string, its uppercase version appears \'k\' times as well. from collections import Counter count_lower = Counter(char for char in s if char.islower()) count_upper = Counter(char for char in s if char.isupper()) for char in count_lower: if count_upper.get(char.upper(), 0) != count_lower[char]: return \\"NO\\" for char in count_upper: if count_lower.get(char.lower(), 0) != count_upper[char]: return \\"NO\\" return \\"YES\\" def check_well_balanced_strings(t, test_cases): Takes the number of test cases t and a list of test case strings. Returns a list of \\"YES\\" or \\"NO\\" for each test case depending on whether it\'s well-balanced or not. results = [] for s in test_cases: results.append(is_well_balanced(s)) return results"},{"question":"Alex has recently learned about string manipulation in programming and is excited to apply it. He comes across a challenge where he needs to generate variations of a given string `s` by rotating it to the left. A left rotation operation on a string shifts each of the string\'s characters one position to the left, and the first character moves to the end of the string. Given a string `s` and an integer `k`, write a function to output the string that results from performing exactly `k` left rotations on `s`. # Input - A single line containing the string `s` (1 ≤ |s| ≤ 105) and an integer `k` (1 ≤ k ≤ 1018). # Output - Output the string after `k` left rotations. # Example Input ``` abcdef 2 ``` Output ``` cdefab ``` # Explanation In the example, performing one left rotation on \\"abcdef\\" results in \\"bcdefa\\". Performing a second left rotation results in \\"cdefab\\", which is the final output.","solution":"def left_rotate(s, k): Performs k left rotations on the string s. n = len(s) k = k % n # To handle cases where k is larger than the length of the string return s[k:] + s[:k]"},{"question":"You are given a 2D grid representing a maze where 0 represents an open path and 1 represents a wall. Your task is to determine if there is a path from the top-left corner to the bottom-right corner of the grid, moving only up, down, left, or right and only through open paths. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the maze. The next n lines each contain m integers, either 0 or 1, representing the maze. Output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". Assume the top-left corner is always an open path (0) and the bottom-right corner is always an open path (0).","solution":"def is_path_exists(maze): Given a 2D grid representing a maze, determine if there is a path from the top-left corner to the bottom-right corner moving only through open paths (0) and moving up, down, left, or right. :param maze: List[List[int]] - the maze grid consisting of 0s and 1s :return: str - \\"YES\\" if a path exists, \\"NO\\" otherwise if not maze or not maze[0]: return \\"NO\\" n = len(maze) m = len(maze[0]) # Directions for moving up, down, left, right directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y): if x == n-1 and y == m-1: return True maze[x][y] = -1 # mark as visited for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0: if dfs(nx, ny): return True return False if dfs(0, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string `s` consisting of lowercase English letters and digits, you are to find the length of the longest substring of `s` that contains exactly `k` distinct characters, where `k` is a given integer. For example: * If the input string is \\"eceba\\" and k is 2, the longest substring with 2 distinct characters is \\"ece\\", so the program should return 3. * If the input string is \\"aa\\" and k is 1, the longest substring with 1 distinct character is \\"aa\\", so the program should return 2. * If the input string is \\"abc\\" and k is 2, the longest substring with 2 distinct characters is \\"ab\\" or \\"bc\\", so the program should return 2. # Input The first line contains a single integer k (1 ≤ k ≤ 26). The second line contains the string s of length n (1 ≤ n ≤ 105) consisting of lowercase English letters and digits. # Output Print the length of the longest substring of `s` that contains exactly `k` distinct characters. If there is no such substring, print 0. # Example Input: 2 eceba Output: 3 Input: 1 aa Output: 2 Input: 2 abc Output: 2 # Note - In the first example, the longest substring with exactly 2 distinct characters is \\"ece\\", which has a length of 3. - In the second example, the longest substring with exactly 1 distinct character is \\"aa\\", which has a length of 2. - In the third example, there are multiple substrings with 2 distinct characters, each of length 2.","solution":"def longest_substring_with_k_distinct_chars(s, k): from collections import defaultdict if not s or k == 0: return 0 char_map = defaultdict(int) left = 0 max_len = 0 for right in range(len(s)): char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Rob is a gardening enthusiast who has recently received a large, rectangular garden of size n times m. His objective is to plant the most number of trees, but with a specific condition: no four trees should form the corners of a rectangle. Rob\'s garden is represented as a grid with n rows and m columns. He needs your help to plant the trees in such a way that maximizes the number of trees he can plant while ensuring that no four trees form the corners of a rectangle. Two trees are said to form the corners of a rectangle if there is another pair of trees such that together they form the opposite corners of a rectangle in the grid. Your task is to calculate the maximum number of trees Rob can plant under the given condition. The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the garden. In the next n lines, each line contains m characters where \'.\' means the cell is empty and \'T\' means there is already a tree planted in that cell. Output a single integer - the maximum number of trees Rob can plant without violating the given condition. # Example Input: ``` 3 3 ... .T. ... ``` Output: ``` 3 ``` Explanation: In the given example, Rob can plant 3 more trees in such a way that no four trees form the corners of a rectangle. One possible arrangement is: ``` T.T .T. T.T ```","solution":"def max_trees_without_rectangle(n, m, grid): Calculate the maximum number of trees Rob can plant without four trees forming the corners of a rectangle. default_grid = [[\'.\' for _ in range(m)] for _ in range(n)] # Combine default_grid and the input grid to get the actual garden layout for i in range(n): for j in range(m): if grid[i][j] == \'T\': default_grid[i][j] = \'T\' # Iterate over each cell and place trees in alternating pattern for i in range(n): for j in range(m): if default_grid[i][j] == \'.\': # Place trees in checkerboard-like pattern if (i + j) % 2 == 0: default_grid[i][j] = \'T\' # Count the trees tree_count = sum(row.count(\'T\') for row in default_grid) return tree_count"},{"question":"You are given a binary tree with nodes containing integer values. Your task is to find the value of the deepest node in the binary tree. If there are multiple nodes at the same depth, return the value of the rightmost node. A binary tree is defined by nodes, each containing an integer value, and having left and right child nodes, which may also be binary tree nodes or `null`. Implement a function `deepestRightmostValue(tree)` that takes the root of the binary tree and returns the integer value of the deepest rightmost node. # Function Signature ```python def deepestRightmostValue(tree: Optional[TreeNode]) -> int ``` # Example ```python # Example Input # Binary Tree Structure # 1 # / # 2 3 # / # 4 5 6 # # 7 tree = TreeNode(1) tree.left = TreeNode(2) tree.right = TreeNode(3) tree.left.left = TreeNode(4) tree.left.right = TreeNode(5) tree.right.right = TreeNode(6) tree.left.left.right = TreeNode(7) # Example Output print(deepestRightmostValue(tree)) # Output: 7 ``` # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - The value of each node is an integer in the range [-10^5, 10^5]. # Solution Approach 1. Use a level-order traversal (breadth-first search) to traverse the tree level by level. 2. Keep track of the deepest node encountered. 3. For nodes at the same depth level, update the value to the rightmost node found. 4. Return the value of the deepest rightmost node. # Helper Class Definition ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Example Explanation In the given example, the node with value `7` is the rightmost and also the deepest node in the tree. The function should return `7` as the correct output. # Note - The `TreeNode` class and the `deepestRightmostValue` function must be implemented to solve the given problem.","solution":"from typing import Optional, List class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def deepestRightmostValue(tree: Optional[TreeNode]) -> int: if not tree: return -1 # this case should never hit considering the constraints # To keep track of the deepest rightmost node: deepest_value = tree.val queue = [(tree, 0)] # queue of (node, depth) tuples max_depth = -1 # initialize max_depth with -1 while queue: node, depth = queue.pop(0) # If we found a deeper depth, reset the deepest value if depth > max_depth: max_depth = depth deepest_value = node.val else: deepest_value = node.val # update for current depth as it will always be the rightmost # Append children to queue with incremented depth if node.left: queue.append((node.left, depth + 1)) if node.right: queue.append((node.right, depth + 1)) return deepest_value"},{"question":"You are given a string containing only characters \'A\' and \'B\'. You can perform the following operation any number of times: choose any substring of the string and reverse it. Your task is to determine whether it is possible to transform the given string into a string that contains equal number of \'A\'s and \'B\'s using the described operation. Input: The first line contains an integer t (1 ≤ t ≤ 10⁴) — the number of test cases. The next t lines contain strings s. The length of each string is between 1 and 10⁵. The total length of all strings in one input does not exceed 10⁶. Output: For each test case, print \\"YES\\" if it is possible to transform the string as described, otherwise print \\"NO\\". Example: Input: 3 AB AABB AA Output: YES YES NO","solution":"def can_transform_to_equal_ab(t, cases): results = [] for s in cases: count_a = s.count(\'A\') count_b = s.count(\'B\') if count_a == count_b: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # cases = [\\"AB\\", \\"AABB\\", \\"AA\\"] # print(can_transform_to_equal_ab(t, cases)) # Output: [\\"YES\\", \\"YES\\", \\"NO\\"]"},{"question":"Given a string s containing only the characters \'a\' and \'b\', you need to find the length of the longest contiguous substring that contains an equal number of \'a\'s and \'b\'s. # Input - The input consists of one string s (1 <= |s| <= 10^5), where |s| is the length of the string. # Output - Print a single integer denoting the length of the longest contiguous substring that contains an equal number of \'a\'s and \'b\'s. # Examples Example 1 Input ``` abba ``` Output ``` 4 ``` Explanation The entire string \\"abba\\" contains 2 \'a\'s and 2 \'b\'s, making it the longest such substring. Example 2 Input ``` ababab ``` Output ``` 6 ``` Explanation The entire string \\"ababab\\" is balanced with 3 \'a\'s and 3 \'b\'s, making it the longest such substring. Example 3 Input ``` aaaabbbb ``` Output ``` 8 ``` Explanation The entire string \\"aaaabbbb\\" contains 4 \'a\'s and 4 \'b\'s, making it the longest balanced substring. Example 4 Input ``` aaaabbb ``` Output ``` 6 ``` Explanation The longest contiguous substring that contains an equal number of \'a\'s and \'b\'s is \\"aaabbb\\", which has a length of 6.","solution":"def find_longest_balanced_substring_length(s): Finds the length of the longest contiguous substring that contains an equal number of \'a\'s and \'b\'s. # Initialize count_map to store the first occurrence of each count count_map = {0: -1} max_length = 0 count = 0 # Net count of \'a\'s - \'b\'s encountered so far for i, char in enumerate(s): if char == \'a\': count += 1 else: count -= 1 if count in count_map: # If the count has been seen before, calculate the length of the substring max_length = max(max_length, i - count_map[count]) else: # Store the first occurrence of this count count_map[count] = i return max_length"},{"question":"You are given an array of integers that represents the heights of buildings along a street. The array is ordered such that the building\'s heights are listed from left to right as they appear on the street. A building can be considered \\"viewable\\" if there are no taller buildings to its left. Write a function that takes an array of integers and returns the number of buildings that are viewable from the left side of the street. **Input:** - The first line contains a single integer n (1 le n le 10^5) — the number of buildings. - The second line contains n space-separated integers h_i (1 le h_i le 10^9) — the heights of the buildings. **Output:** - Print a single integer — the number of viewable buildings. **Example:** **Input:** ``` 6 4 3 2 5 2 6 ``` **Output:** ``` 3 ``` **Explanation:** The buildings with heights 4, 5, and 6 are viewable. - Building 1 with height 4 has no taller buildings to its left. - Building 4 with height 5 has no taller buildings to its left. - Building 6 with height 6 has no taller buildings to its left.","solution":"def count_viewable_buildings(n, heights): Returns the number of buildings that are viewable from the left. Parameters: n (int): The number of buildings. heights (list of int): The heights of the buildings. Returns: int: The number of viewable buildings. if n == 0: return 0 viewable_count = 1 # The first building is always viewable max_height = heights[0] for i in range(1, n): if heights[i] > max_height: viewable_count += 1 max_height = heights[i] return viewable_count"},{"question":"You are given an integer array arr of length n (1 le n le 100) and an integer k (0 le k le 100). You need to find whether there exist two non-overlapping subarrays of length k, such that the sum of elements in both subarrays is equal. If such subarrays exist, output \\"YES\\". Otherwise, output \\"NO\\". # Input The first line of the input contains a single integer n — the length of the array. The second line contains n integers arr_1, arr_2, ..., arr_n — the elements of the array. The third line contains a single integer k — the length of the subarrays. # Output Print \\"YES\\" if there exist two non-overlapping subarrays of length k with the same sum. Otherwise, print \\"NO\\". # Example Input 7 1 2 3 4 2 1 5 2 Output YES Explanation One possible pair of subarrays of length 2 with the same sum is [1, 2] and [2, 1], both having the sum of 3. Notes - Two subarrays are non-overlapping if they do not share any common elements, meaning their indices must be distinct.","solution":"def check_equal_sum_subarrays(arr, n, k): if k == 0 or k > n // 2: return \\"NO\\" sum_indices_map = {} for i in range(n - k + 1): subarray_sum = sum(arr[i:i+k]) if subarray_sum in sum_indices_map: for j in sum_indices_map[subarray_sum]: if j + k <= i or i + k <= j: return \\"YES\\" else: sum_indices_map[subarray_sum] = [] sum_indices_map[subarray_sum].append(i) return \\"NO\\" # Example usage # arr = [1, 2, 3, 4, 2, 1, 5] # n = len(arr) # k = 2 # print(check_equal_sum_subarrays(arr, n, k)) # Outputs: YES"},{"question":"You are given two strings s and t consisting of lowercase English letters. In one move, you can take a character from t and insert it at any position in s. Your task is to calculate the minimum number of moves required to make s a subsequence of t. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. The first line of the input contains the string s (1 le |s| le 100) — the string you want to transform into a subsequence of t. The second line of the input contains the string t (1 le |t| le 200) — the string from which you can take characters and insert them into s. Print one integer — the minimum number of operations required to make s a subsequence of t. # Example Input: ``` abc abcdefgh ``` Output: ``` 0 ``` Input: ``` abc defgh ``` Output: ``` 3 ```","solution":"def min_moves_to_subsequence(s, t): Returns the minimum number of moves required to make string s a subsequence of string t. # Pointer to traverse string s s_pointer = 0 # Traverse string t for char in t: if s_pointer < len(s) and s[s_pointer] == char: s_pointer += 1 # The number of moves required is the length of s minus the length of the longest subsequence found in t return len(s) - s_pointer"},{"question":"You are given a list of integers representing heights of people in a line. Your task is to form a group of people such that the height difference between the tallest and the shortest person in the group is minimized. Additionally, you need to maintain the original order of the people in the line. More formally, you need to find the minimum possible difference `d` such that there exists a subarray (a contiguous segment of the list) where the difference between the maximum and the minimum heights in that subarray is equal to `d`. The first line of the input is an integer `n` (1 ≤ n ≤ 10^5) — the number of people in the line. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the heights of the people. Print a single integer — the minimum difference between the maximum and minimum heights in a contiguous subarray of the given list. Example: Input: 6 8 1 5 6 3 9 Output: 1 Explanation: The contiguous subarray [5, 6] has the minimum height difference of 1.","solution":"def minimize_height_difference(n, heights): Returns the minimum difference between the maximum and minimum heights in any contiguous subarray of given heights. Parameters: n (int): Number of people in the line heights (list): List of heights of people Returns: int: Minimum height difference in any contiguous subarray if n == 1: return 0 min_diff = float(\'inf\') for i in range(n - 1): for j in range(i + 1, n): subarray = heights[i:j+1] current_diff = max(subarray) - min(subarray) min_diff = min(min_diff, current_diff) return min_diff"},{"question":"You are given an array of integers where each integer represents the height of a building. You are standing on the first building and your goal is to reach the last building. You can jump from building to building, but the maximum number of buildings you can jump over from any building is determined by the height of the current building you are standing on. Write a function that returns the minimum number of jumps needed to reach the last building in the array. If it is not possible to reach the last building, return -1. # Input - An integer `n` (1 ≤ n ≤ 1000) — the number of buildings. - An array `heights` of `n` integers (1 ≤ `heights[i]` ≤ 100) — the heights of buildings. # Output - An integer representing the minimum number of jumps needed to reach the last building, or -1 if it is not possible. # Examples Example 1 Input: ``` 5 3 2 1 0 4 ``` Output: ``` -1 ``` Example 2 Input: ``` 6 3 2 5 1 1 9 ``` Output: ``` 2 ``` # Explanation In Example 1: - Starting from the first building, you can jump up to 3 buildings ahead. - However, the next jump leads to buildings with insufficient height to continue (there\'s a height of 0 at the fourth building), making it impossible to reach the last building. In Example 2: - From the first building, jump directly to the third building. - From the third building, jump directly to the last building.","solution":"def min_jumps_to_last_building(n, heights): if n <= 1: return 0 jumps = [float(\'inf\')] * n jumps[0] = 0 for i in range(1, n): for j in range(i): if i <= j + heights[j] and jumps[j] != float(\'inf\'): jumps[i] = min(jumps[i], jumps[j] + 1) break return -1 if jumps[-1] == float(\'inf\') else jumps[-1] # Example usage: n1 = 5 heights1 = [3, 2, 1, 0, 4] print(min_jumps_to_last_building(n1, heights1)) # Output: -1 n2 = 6 heights2 = [3, 2, 5, 1, 1, 9] print(min_jumps_to_last_building(n2, heights2)) # Output: 2"},{"question":"Mike, an avid coder, loves converting numbers into string representations of various formats for better readability. One unique format he uses involves grouping digits into blocks of three, starting from the right. For instance, he writes the number 1234567 as 1,234,567. Additionally, negative numbers retain their sign at the beginning (-1234567 becomes -1,234,567). However, he\'s run into some implementation issues and asks for your help in creating a function to automate this conversion. The function should take a single integer `x` (−10^9 ≤ x ≤ 10^9) and return it as a formatted string with commas separating each group of three digits from the right. Make sure to handle both positive and negative numbers correctly. # Input - The input is a single line containing the integer `x`. # Output - Output a single string representation of `x` formatted with commas. Example # Input ``` 1234567 ``` # Output ``` 1,234,567 ``` # Input ``` -987654321 ``` # Output ``` -987,654,321 ```","solution":"def format_number(x): Formats an integer x by inserting commas to separate each group of three digits from the right. Handles both positive and negative numbers correctly. return f\'{x:,}\'"},{"question":"You are given an array of integers. Your task is to find the sum of the largest subarray with the maximum sum. A subarray is a contiguous part of an array. The first line of input contains a single integer, T, the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer, n, the size of the array (1 leq n leq 10^5). The second line of each test case contains n space-separated integers denoting the elements of the array (-10^5 leq A[i] leq 10^5). It is guaranteed that the sum of all n in the input does not exceed 10^6. For each test case, print a single integer - the sum of the largest subarray with the maximum sum. Example: Input: 3 8 -2 1 -3 4 -1 2 1 -5 4 6 -3 -2 -1 -4 -6 -5 9 1 2 3 4 5 6 7 8 9 Output: 6 -1 45 Explanation: - In the first test case, the subarray with the largest sum is [4, -1, 2, 1] with sum 6. - In the second test case, the largest subarray sum is -1 which is the least negative number in the array. - In the third test case, the entire array has the largest sum, which is 45.","solution":"def max_subarray_sum(arr): Function to find the sum of the largest subarray with the maximum sum. Uses Kadane\'s algorithm. :param arr: List[int] - array of integers :return: int - maximum subarray sum max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 return test_cases"},{"question":"You are given an array of integers and a target integer. You need to determine if there are two distinct integers in the array that sum up to the target integer. The first line of the input contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9), where n is the number of elements in the array and t is the target integer. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) which are the elements of the array. Print \\"YES\\" if there are two distinct integers in the array whose sum is equal to the target integer t. Otherwise, print \\"NO\\".","solution":"def two_sum_exists(n, t, arr): Returns \\"YES\\" if there are two distinct integers in the array whose sum equals t, otherwise \\"NO\\". :param n: int, the number of elements in the array :param t: int, the target integer :param arr: list of ints, the elements of the array :return: str, \\"YES\\" or \\"NO\\" seen = set() for number in arr: if t - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"You are given a string consisting of n characters. Each character is either \'a\', \'b\', \'c\', or \'d\'. You want to determine the smallest length of a set of non-overlapping substrings that covers the entire string such that each substring contains one of each character (\'a\', \'b\', \'c\', and \'d\') at least once. The first line contains a single integer n (1 leq n leq 2 cdot 10^5) — the length of the string. The second line contains a string of length n consisting only of characters \'a\', \'b\', \'c\', and \'d\'. Print the smallest length of a set of non-overlapping substrings that covers the given string where each substring contains all four characters \'a\', \'b\', \'c\', and \'d\'. If it is impossible to cover the string with such substrings, print -1. Example: Input: 7 abcdabc Output: 7 Explanation: In the given string \\"abcdabc\\", the entire string itself is the smallest substring where each character \'a\', \'b\', \'c\', and \'d\' occurs at least once. Hence, the smallest length of such a set of substrings is 7.","solution":"def smallest_substring_length(s): Returns the smallest length of the substring that contains at least one of each character \'a\', \'b\', \'c\', and \'d\'. If not possible, returns -1. # Early return if length of string is less than 4 if len(s) < 4: return -1 required_chars = set(\'abcd\') start = 0 min_length = float(\'inf\') char_count = {} for end in range(len(s)): char_count[s[end]] = char_count.get(s[end], 0) + 1 while len(char_count) == 4: min_length = min(min_length, end - start + 1) char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"A software development company is working on a project that requires implementing several distinct modules. Each module has dependencies on some other modules, meaning a particular module can only be developed after all its dependent modules have been completed. You are tasked with figuring out the total development time required to complete all the modules given this information. The total time required to develop all modules is the maximum time it takes to develop any module, considering the time it takes to complete its dependencies. Each module i has a unique development time di (in days), and a list of modules it depends on. The modules are numbered from 1 to n. Given the number of modules n and their dependencies, create a program to calculate the total development time required to finish all modules. # Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of modules. - The next n lines each contain two elements. The first element of the i-th line is an integer di (1 ≤ di ≤ 10^3) — the development time of the i-th module. - The second element is an array that details the modules that the i-th module depends on. If the i-th module has no dependencies, the array is empty. # Output: - Print a single integer — the total development time required to develop all modules. # Example: Input: ``` 4 3 [] 2 [1] 1 [2] 4 [1, 3] ``` Output: ``` 10 ``` Explanation: - Module 1 takes 3 days and has no dependencies. - Module 2 takes 2 days and depends on module 1, so it\'s completed in 3 + 2 = 5 days. - Module 3 takes 1 day and depends on module 2, so it\'s completed in 5 + 1 = 6 days. - Module 4 takes 4 days and depends on modules 1 and 3, so it\'s completed in max(3, 6) + 4 = 10 days. The total development time required is 10.","solution":"def calculate_total_time(n, modules): from collections import defaultdict, deque # Create graph and in-degree count graph = defaultdict(list) indegree = [0] * (n + 1) times = [0] * (n + 1) for i in range(1, n + 1): di, deps = modules[i - 1] times[i] = di for d in deps: graph[d].append(i) indegree[i] += 1 # Topological Sort and compute the maximum time to complete each module queue = deque() max_time = [0] * (n + 1) for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) max_time[i] = times[i] while queue: current = queue.popleft() for neighbour in graph[current]: indegree[neighbour] -= 1 max_time[neighbour] = max(max_time[neighbour], max_time[current] + times[neighbour]) if indegree[neighbour] == 0: queue.append(neighbour) return max(max_time)"},{"question":"Consider a line with points numbered 0 to n, where each point represents a house. We want to place k fire hydrants on this line such that the maximum distance from any house to the nearest fire hydrant is minimized. You need to determine this minimum possible value. The first line of the input file contains two integers n and k (1 leq k leq n leq 1000) – the number of houses and the number of fire hydrants respectively. Output a single number – the minimum possible value of the maximum distance from any house to the nearest fire hydrant. Your answer will be accepted if its relative or absolute error does not exceed 10^{-6}. Formally, if your answer is a and the jury\'s answer is b. Your answer is accepted if and only when frac{|a-b|}{max(1, |b|)} le 10^{-6}.","solution":"import math def min_max_distance(n, k): Determines the minimum possible maximum distance from any house to the nearest fire hydrant. Parameters: n (int): The number of houses. k (int): The number of fire hydrants. Returns: float: The minimum possible maximum distance. # Binary search for the minimum maximum distance low, high = 0, n while low + 1e-7 < high: mid = (low + high) / 2 # Check feasibility of this mid distance current_hydrants = 1 last_position = 0 for i in range(1, n+1): if i - last_position > mid: current_hydrants += 1 last_position = i if current_hydrants > k: break if current_hydrants <= k: high = mid else: low = mid return high"},{"question":"In a far-off land, there exists a unique library system where each book is assigned a positive integer identifier. Each identifier corresponds to a specific type of book. You are tasked with managing the books in the library, which are arranged in a linear sequence. A sequence of book identifiers a=[a_1, a_2, ldots, a_n] is given, where a_i denotes the identifier of the i-th book in the sequence. Your goal is to perform certain operations to modify the sequence in a way that makes it easier to manage. One possible operation you can perform is merging two adjacent subarrays if they contain the same type of books. Specifically, if there exists an index i such that a[i] = a[i+1], you can merge these into one, effectively reducing the length of the sequence by one. Input: The first line contains an integer n (1 leq n leq 10^5), the number of books in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the identifiers of the books. Output: Print a single integer, the minimum possible length of the sequence after performing the merging operations. Example: ``` Input: 5 3 3 2 2 2 Output: 2 ``` In this example, the sequence can be reduced as follows: Step 1: Merge the first two \'3\'s: [3, 2, 2, 2] Step 2: Merge the last three \'2\'s: [3, 2] So, the minimum possible length of the sequence after the operations is 2.","solution":"def min_length_after_merging(n, sequence): This function returns the minimum length of the sequence after merging adjacent identical book identifiers. Parameters: - n: The number of books in the sequence. - sequence: A list of integers representing the book identifiers. Returns: The minimum possible length of the sequence after merging operations. if n == 0: return 0 min_length = 1 # Start counting from the first element for i in range(1, n): if sequence[i] != sequence[i - 1]: min_length += 1 return min_length"},{"question":"You are organizing a race with n participants, where each participant competes in m different events. The overall winner of the race is determined by the total score accumulated across all events. Each event awards points to the top k participants. The participant with the highest total score wins. The race has partially finished, and you have the scores for each event so far. You need to write a program to help predict the overall winner if the remaining events are yet to be held and each participant\'s performance in these events is unknown. You are given an array that contains the scores of each participant for the events that have already been completed. You must determine the possible range of total scores each participant can end up with, considering they could rank anywhere between 1st and m-th in each remaining event. The first line contains three integers n, m, k (1 ≤ n, m, k ≤ 200) — the number of participants, the number of events, and the number of ranks that receive points, respectively. The second line contains k space-separated integers, r1, r2, ..., rk (1 ≤ ri ≤ 1000 for all 1 ≤ i ≤ k) — the points awarded for each rank from 1st to k-th place. Then n lines follow, each containing m space-separated integers, where the j-th number in the i-th line is the score of the i-th participant in the j-th event. If an event hasn\'t been held yet, the score is represented by -1. Print n lines, each containing two integers denoting the minimum and maximum possible score for each participant after all events are completed. Example input: 3 3 2 10 5 10 5 -1 -1 -1 8 7 -1 4 Example output: 15 25 8 28 11 21 In this example, the first participant has scores of 10 and 5 from two completed events. They can score a minimum of 0 and a maximum of 10 points in the remaining event (depending on their possible ranks). Thus, their range is from 15 to 25. The second participant has completed only one event with a score of 8. They have two remaining events, and their potential points range from a minimum of 0 (if they rank the lowest in both events) to a maximum of 20 (if they rank 1st in both events), giving a range of 8 to 28. The third participant has scores of 7 and 4 from two completed events. Therefore, their range is from 11 (0 points in the remaining event) to 21 (10 points in the remaining event).","solution":"def race_winner_ranges(n, m, k, points_for_ranks, scores): Determines the possible range of total scores each participant can end up with after all events are completed. Parameters: n (int): Number of participants m (int): Number of events k (int): Number of ranks that receive points points_for_ranks (list of int): Points awarded for ranks from 1st to k-th place scores (list of list of int): Scores of participants for events (-1 indicates event not held) Returns: list of tuple: List of tuples where each tuple contains two integers denoting the minimum and maximum possible score for each participant result = [] max_rank_points = max(points_for_ranks) for i in range(n): participant_scores = scores[i] current_score = sum(score for score in participant_scores if score != -1) remaining_events = participant_scores.count(-1) min_score = current_score max_score = current_score + (remaining_events * max_rank_points) result.append((min_score, max_score)) return result"},{"question":"You are given a series of tasks that each need to be completed within a certain time limit. Each task has a given deadline and duration, and your goal is to determine whether all the tasks can be completed on time if you start working on them at the same time and do each task consecutively in any order. You are provided with `t` test cases. For each test case, you are given `n`, the number of tasks, followed by `n` pairs of integers. Each pair represents the deadline and duration of a task. Write a program to determine whether all tasks can be completed on time for each test case. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains an integer `n` (1 ≤ n ≤ 1000), the number of tasks. - The following `n` lines each contain two integers `d` and `l` (1 ≤ d, l ≤ 1000), the deadline and the duration of the task respectively. # Output - For each test case, print \\"YES\\" if all tasks can be completed on time, otherwise print \\"NO\\". # Sample Input ``` 2 3 5 3 2 1 7 2 4 4 3 10 2 6 1 3 2 ``` # Sample Output ``` YES NO ``` # Explanation - In the first test case, the tasks can be completed on time in the order 2nd, 1st, 3rd. - In the second test case, there is no order that allows all tasks to be completed on time. # Note - Consider sorting the tasks by their deadlines and check if processing them in this order allows you to complete all tasks on time.","solution":"def can_all_tasks_be_completed(test_cases): results = [] for tasks in test_cases: tasks.sort() # Sort tasks by deadlines current_time = 0 possible = True for deadline, duration in tasks: current_time += duration if current_time > deadline: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) tasks = [] for i in range(1, n + 1): d, l = map(int, input_lines[index + i].split()) tasks.append((d, l)) index += n + 1 test_cases.append(tasks) return can_all_tasks_be_completed(test_cases)"},{"question":"Masha loves playing with strings. One day, she came across an interesting pattern-making problem. Given a string, Masha needs to determine if it is possible to rearrange the characters of the string to form a palindrome. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward or forward (ignoring spaces, punctuation, and capitalization). Your task is to help Masha by writing a program that checks whether the characters of the given string can be rearranged to form a palindrome. The input consists of a single line that contains a string s (1 ≤ |s| ≤ 1000), which only includes lowercase English letters. Output \\"YES\\" if it is possible to rearrange the characters to form a palindrome. Otherwise, output \\"NO\\". Print the strings without quotes.","solution":"def can_form_palindrome(s): Determines if the characters of the given string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the characters can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter character_counts = Counter(s) odd_count = sum(1 for count in character_counts.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, at most one character count can be odd. return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given two strings s and t. Your task is to determine whether string t is a subsequence of string s. A subsequence of a string is a new string generated from the original string by deleting some (or no) characters without changing the relative order of the remaining characters. The first line contains a string s (1 ≤ |s| ≤ 105) — the original string. The second line contains a string t (1 ≤ |t| ≤ 105) — the string to check as a subsequence of s. Print \\"YES\\" (without quotes) if t is a subsequence of s, otherwise print \\"NO\\".","solution":"def is_subsequence(s, t): Determines whether string t is a subsequence of string s. :param s: The original string. :param t: The string to check as a subsequence of s. :return: \\"YES\\" if t is a subsequence of s, otherwise \\"NO\\" t_index = 0 for char in s: if t_index < len(t) and char == t[t_index]: t_index += 1 return \\"YES\\" if t_index == len(t) else \\"NO\\""},{"question":"You are managing a library where each book has a unique identification number and registered books are kept in a continuous sequence. Occasionally, books are lost, and their IDs are removed from this sequence. Your task is to find the smallest missing positive book ID from the current collection. Write a function to find this smallest missing positive integer from an array of unique integers. Your function should handle a list where numbers range from negative infinity up to the maximum possible ID value that can be reduced to zero or even a gap in the sequence. **Function signature:** ```python def find_smallest_missing_id(book_ids: List[int]) -> int: ``` **Input:** - `book_ids`: A list of integers representing the existing IDs of books in the library. The length of this list can be up to 1000 elements. The values can be any integer ranging from `-2,147,483,648` to `2,147,483,647`. **Output:** - Return an integer, the smallest missing positive book ID. **Examples:** ``` Input: book_ids = [3, 4, -1, 1] Output: 2 Input: book_ids = [1, 2, 0] Output: 3 Input: book_ids = [-1, -2, -3] Output: 1 Input: book_ids = [7, 8, 9, 11, 12] Output: 1 ``` **Explanation:** - For the first example, the sequence contains 1 and 3, but 2 is missing. - In the second example, the smallest missing positive integer is 3 as both 1 and 2 exist. - The third example contains only negative values, so the smallest missing positive ID is 1. - The fourth example lacks any lower sequence numbers, so the missing number starts at 1.","solution":"def find_smallest_missing_id(book_ids): This function takes a list of book IDs and returns the smallest missing positive integer. n = len(book_ids) # Move all non-positive numbers to the beginning of the array shift = 0 for i in range(n): if book_ids[i] <= 0: book_ids[i], book_ids[shift] = book_ids[shift], book_ids[i] shift += 1 # Now work only with the positive part of the array positive_part = book_ids[shift:] positive_length = len(positive_part) # Mark elements as visited by flipping the sign of the value at the index for i in range(positive_length): val = abs(positive_part[i]) if val - 1 < positive_length and positive_part[val - 1] > 0: positive_part[val - 1] = -positive_part[val - 1] # The first positive index + 1 is the smallest missing positive integer for i in range(positive_length): if positive_part[i] > 0: return i + 1 return positive_length + 1"},{"question":"You are given two arrays of positive integers `a` and `b`, each with length `n`. In one move, you can select any two indices `i` and `j` (1 ≤ i, j ≤ n) such that i ≠ j, and either subtract 1 from `a[i]` and add 1 to `a[j]`, or add 1 to `a[i]` and subtract 1 from `a[j]`. The goal is to determine if it\'s possible to make the array `a` identical to `b` after any number of moves. The first line contains the integer `n` (1 ≤ n ≤ 1000) - the length of the arrays. The second line contains `n` space-separated integers, representing the initial configuration of array `a`. The third line contains `n` space-separated integers, representing the desired configuration of array `b`. Print \\"YES\\" (without quotes) if it\'s possible to make `a` identical to `b` using the described moves, and \\"NO\\" (without quotes) if it\'s not possible. # Example: Input: 5 3 1 2 4 5 3 5 4 2 1 Output: YES Input: 4 1 2 3 4 1 2 3 5 Output: NO # Explanation: In the first example, it is possible to transform `a` into `b` by redistributing the values as follows: - Swap values between indices 1 and 2: `a` becomes [3, 5, 2, 4, 1] - Swap values between indices 2 and 3: `a` becomes [3, 5, 4, 2, 1] - Finally, swap values between indices 4 and 5: `a` becomes [3, 5, 4, 2, 1] which is equal to `b`. In the second example, it is impossible to match array `b` due to differences in the sum of elements between `a` and `b`.","solution":"def can_transform(a, b): Determine if array a can be transformed into array b using the described moves. return sum(a) == sum(b) and sorted(a) == sorted(b)"},{"question":"You are given an integer matrix of size n times m and an array of k operations. Each operation consists of three integers i, j, and x where you need to add the value of x (1 le x le 100) to the matrix elements from the i^{th} row to the j^{th} row (inclusive). Your task is to apply all the operations and then find the maximum value present in the matrix. The first line of the input contains three integers n, m, and k (1 le n, m le 100, 1 le k le 10^4) — the number of rows, the number of columns of the matrix, and the number of operations, respectively. The next k lines each contain three integers i, j, and x describing the operation. Output a single integer — the maximum value in the matrix after applying all the operations. Example: Input: ``` 3 3 2 1 2 5 2 3 10 ``` Output: ``` 15 ```","solution":"def apply_operations(n, m, k, operations): # Initialize the matrix with zeros matrix = [[0] * m for _ in range(n)] # Apply each operation for op in operations: i, j, x = op for row in range(i-1, j): for col in range(m): matrix[row][col] += x # Find the maximum value in the matrix max_value = max(max(row) for row in matrix) return max_value"},{"question":"You are given an array of integers. Your task is to find the minimum length of a contiguous subarray, of which the sum is at least a given value S. If there isn\'t one, return 0 instead. The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. Each of the next T lines starts with two integers n (1 ≤ n ≤ 100000) and S (1 ≤ S ≤ 1000000000), where n is the length of the array and S is the target sum. The rest of the line contains n integers, the elements of the array (1 ≤ arr[i] ≤ 10000). For each test case, output a single integer — the minimum length of a contiguous subarray of which the sum is at least S. If there isn\'t one, output 0. In the first example, you need to take the subarray [8] to achieve the sum of 7. In the second example, the subarray [4,3,9] is the smallest subarray that achieves the sum of 15. In the third example, you must consider the subarray [2,7,4,4] to achieve the sum of 17. In the fourth example, since all the elements are less than the target sum S, it is impossible to achieve a sum of 1 with any subarray, so the output is 0.","solution":"def min_subarray_length(T, test_cases): results = [] for case in test_cases: n, S, arr = case left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 if min_length == float(\'inf\'): results.append(0) else: results.append(min_length) return results"},{"question":"You are given a list of shipments consisting of product identifiers and their quantity. Each identifier is a string consisting of lowercase English letters. You need to write a function to find the identifier of the product with the maximum total shipment quantity. If there are multiple products with the same maximum total quantity, return the identifier that is lexicographically smallest. The input consists of a list of tuples, where each tuple contains a string identifier and an integer quantity. Your task is to write a function that takes this list as input and returns the identifier of the product with the maximum total quantity. # Input - A list of tuples, `shipments` (1 ≤ len(shipments) ≤ 10^5), where each tuple contains: - A string `identifier` (1 ≤ len(identifier) ≤ 20) representing the product identifier. - An integer `quantity` (1 ≤ quantity ≤ 10^6) representing the shipment quantity for that product. # Output - A string representing the identifier of the product with the maximum total shipment quantity. If there are multiple products with the same maximum total quantity, return the lexicographically smallest identifier. # Examples ```python # Example 1 shipments = [(\\"apple\\", 10), (\\"banana\\", 20), (\\"apple\\", 5), (\\"banana\\", 30)] # The total quantity for \\"apple\\" is 15 and for \\"banana\\" is 50. # The function should return \\"banana\\". print(find_max_shipped_product(shipments)) # Output: \\"banana\\" # Example 2 shipments = [(\\"apple\\", 10), (\\"banana\\", 10), (\\"carrot\\", 5)] # The total quantity for \\"apple\\" and \\"banana\\" is 10. # The function should return \\"apple\\" because it\'s lexicographically smaller. print(find_max_shipped_product(shipments)) # Output: \\"apple\\" # Example 3 shipments = [(\\"apple\\", 10)] # There is only one product. # The function should return \\"apple\\". print(find_max_shipped_product(shipments)) # Output: \\"apple\\" ``` # Function Signature ```python def find_max_shipped_product(shipments: List[Tuple[str, int]]) -> str: # Your code here ```","solution":"def find_max_shipped_product(shipments): Finds and returns the identifier of the product with the maximum total shipment quantity. If multiple products have the same maximum total quantity, returns the lexicographically smallest identifier. product_totals = {} for identifier, quantity in shipments: if identifier in product_totals: product_totals[identifier] += quantity else: product_totals[identifier] = quantity max_quantity = max(product_totals.values()) max_products = [identifier for identifier, total in product_totals.items() if total == max_quantity] return min(max_products)"},{"question":"A university department is organizing a system to track the timetables of various courses. Each course has a unique identifier and is scheduled on specific weekdays at particular times. The task is to develop a function that determines if any two courses overlap. Two courses are considered to overlap if they are scheduled on the same weekday and their times intersect. The schedule of a course is given as a list of tuples, where each tuple contains a weekday (0 for Monday, 1 for Tuesday, etc., up to 6 for Sunday) and a time range (start and end times in 24-hour format). You are given n (number of courses) followed by n lines, each containing the course identifier and its schedule. Each schedule is a list of tuples representing the day and the start and end times of the classes on that day. Your function should return a list of tuples, each containing the identifiers of the two overlapping courses. # Input - The first line contains an integer n, the number of courses. - The following n lines each contain a string (the course identifier) followed by an integer m, the number of schedule entries for the course, and then m tuples. Each tuple contains an integer for the weekday and two integers for the start and end times in 24-hour format. # Output - A list of tuples, where each tuple contains two course identifiers that have overlapping schedules. # Example Input ``` 3 CS101 2 (1 9 11) (3 13 15) MATH201 1 (1 10 12) PHYS303 1 (3 14 16) ``` Output ``` [(\'CS101\', \'MATH201\'), (\'CS101\', \'PHYS303\')] ``` # Explanation - `CS101` and `MATH201` overlap on day 1 (Tuesday) as their times 9-11 and 10-12 intersect. - `CS101` and `PHYS303` overlap on day 3 (Thursday) as their times 13-15 and 14-16 intersect.","solution":"def find_overlapping_courses(n, course_schedules): def overlaps(schedule1, schedule2): for day1, start1, end1 in schedule1: for day2, start2, end2 in schedule2: if day1 == day2 and max(start1, start2) < min(end1, end2): return True return False overlapping_courses = [] for i in range(n): for j in range(i + 1, n): course_id1, schedule1 = course_schedules[i] course_id2, schedule2 = course_schedules[j] if overlaps(schedule1, schedule2): overlapping_courses.append((course_id1, course_id2)) return overlapping_courses"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n. You need to find the length of the longest subsequence such that the elements can be rearranged to form an arithmetic progression. Recall that a sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. For example, the sequence [3, 1, 5, 7] can be rearranged to [1, 3, 5, 7], which is an arithmetic progression with a common difference of 2. The first line contains a single integer n (1 le n le 2000) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. Print a single integer — the length of the longest subsequence that can be rearranged to form an arithmetic progression. **Example:** Input: 4 3 1 5 7 Output: 4 In this example, the sequence [3, 1, 5, 7] can be rearranged to [1, 3, 5, 7] which is an arithmetic progression with a common difference of 2. Hence, the longest subsequence length is 4.","solution":"def longest_arithmetic_subsequence(arr): from collections import defaultdict n = len(arr) if n == 1: return 1 arr.sort() dp = [defaultdict(lambda: 1) for _ in range(n)] max_len = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] dp[i][diff] = dp[j][diff] + 1 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Consider a rectangular grid with dimensions n × m, where n represents the number of rows and m represents the number of columns (1 ≤ n, m ≤ 100). Your task is to fill the grid with integers from 1 to n * m such that the sum of the integers in each neighboring cells (sharing a side) is an even number. If there is no solution, print -1. Otherwise, print the grid with n lines containing m numbers each, where each number represents the value placed in that cell. Each integer from 1 to n * m should appear exactly once in the grid. If there are multiple solutions, any one of them will be accepted.","solution":"def fill_grid(n, m): total_numbers = n * m # Separate even and odd numbers evens = [num for num in range(1, total_numbers + 1) if num % 2 == 0] odds = [num for num in range(1, total_numbers + 1) if num % 2 != 0] # Merge them into a single sequence (evens followed by odds) numbers = evens + odds # Fill the grid row by row grid = [] iterator = iter(numbers) for i in range(n): row = [] for j in range(m): row.append(next(iterator)) grid.append(row) return grid"},{"question":"Imagine you have an important tam multiply set of cargo items that need to be transported across a river. Each cargo item i is represented by its weight wi. The river can only carry a boat that can hold a maximum weight of W at a time. To minimize cost and time, you aim to transport the cargo items using the minimum possible number of boat trips. Each trip can transport as many cargo items as the boat\'s weight limit allows. Write a program to determine the minimum number of boat trips required. Input: - The first line contains two integers n and W: the number of cargo items and the maximum weight the boat can carry respectively (1 ≤ n ≤ 10^3, 1 ≤ W ≤ 10^9). - The second line contains n space-separated integers w1, w2, ... , wn (1 ≤ wi ≤ W) representing the weights of the cargo items. Output: - Print a single integer denoting the minimum number of boat trips required. Example: Input: 5 10 2 3 5 5 6 Output: 3 In this example, you can take the following trips: 1. Cargo items with weights 2 and 3 (total weight = 5) 2. Cargo items with weights 5 and 5 (total weight = 10) 3. Cargo item with weight 6 (total weight = 6) Note: You can assume that it\'s always possible to transport all cargo items given the constraints.","solution":"def min_boat_trips(n, W, weights): Determines the minimum number of boat trips required to transport all cargo items. Args: n (int): Number of cargo items. W (int): Maximum weight the boat can carry. weights (list of int): Weights of the cargo items. Returns: int: Minimum number of boat trips required. weights.sort() left, right = 0, n - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= W: left += 1 right -= 1 trips += 1 return trips"},{"question":"You are given a collection of strings containing lowercase English letters. Your task is to find out the minimal possible length of the string that can be formed by choosing some of these strings (possibly all of them) and concatenating them in such a way that no two chosen strings are anagrams of each other. An anagram is a word formed by rearranging the letters of another, such as “cinema” and “iceman”. # Input: The first line contains a single integer n (1 leq n leq 10^5) — the number of strings. Each of the next n lines contains a string s_i (1 leq |s_i| leq 100) composed of lowercase English letters. # Output: Output a single integer — the minimal possible length of the string that can be formed by choosing some of the given strings (possibly all of them) and concatenating them in such a way that no two chosen strings are anagrams of each other. # Example: **Input:** ``` 5 abc bca cab foo ofo ``` **Output:** ``` 6 ``` **Explanation:** Select \\"abc\\" and \\"foo\\". The result will be \\"abcfoo\\" or any concatenation of \\"abc\\" and \\"foo\\" which has a length of 6. Other strings such as \\"bca\\", \\"cab\\", and \\"ofo\\" are anagrams of the selected strings and are not included.","solution":"def minimal_length(n, strings): Given a list of strings, this function returns the minimal possible length by concatenating non-anagram strings. unique_anagrams = set() for s in strings: # Sort each string to get its canonical form canonical_form = \'\'.join(sorted(s)) # Add the canonical form to the set unique_anagrams.add(canonical_form) # The minimal length will be the sum of the lengths of the unique anagrams return sum(len(ana) for ana in unique_anagrams)"},{"question":"Alice is organizing a car rally that takes place on a network of one-way roads connecting several towns. The towns are numbered from 1 to n and the roads are represented as directed edges between the towns. Each town has at most two outgoing roads, but can have several incoming roads. Alice wants to ensure that the rally route is challenging by making every town reachable only through paths containing an odd number of roads (i.e., the total distance travelled must be an odd length). Given the starting town and destination town for each one-way road, help Alice determine if it\'s possible to reconfigure the network by closing some towns so that all remaining towns satisfy the odd-path property. Formally, after closing some towns and their corresponding roads, any path from one town to another must contain an odd number of roads (edges). You need to find a way to close at most lfloor{frac{3n}{5}}rfloor towns such that the remaining network satisfies Alice\'s requirement. The first line contains a single integer T — the number of test cases. The following lines describe each test case: The first line contains two integers n and m (1 leq n leq 2 cdot 10^5) — the number of towns and roads, respectively. The following m lines each contain two integers u and v (1 leq u < v leq n) — indicating that there is a one-way road from town u to town v. There are at most two roads starting from each town. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. For each test case, print a single integer k (0 leq k leq lfloor{frac{3n}{5}}rfloor) — the number of towns to be closed. On the next line, print k distinct integers — the indices of the towns to be closed, in any order. If there are multiple solutions, you may print any one of them. Note that you don’t have to minimize k. It can be shown that a suitable answer always exists. For instance: - Closing certain towns such that paths through remaining towns always have an odd number of roads. Please help Alice to achieve her goal.","solution":"def close_towns_to_ensure_odd_paths(t, test_cases): results = [] for case in test_cases: n, m = case[0] roads = case[1] k = n // 2 closed_towns = list(range(1, k + 1)) results.append((k, closed_towns)) return results # Read input for test cases def read_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) m = int(data[index + 1]) index += 2 roads = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) index += 2 roads.append((u, v)) test_cases.append(((n, m), roads)) return T, test_cases # Function to produce the output def produce_output(t, results): output_lines = [] for result in results: k, closed_towns = result output_lines.append(str(k)) if k > 0: output_lines.append(\\" \\".join(map(str, closed_towns))) print(\\"n\\".join(output_lines))"},{"question":"John Watson is experimenting with a new communication device. The device transmits messages encoded as a sequence of 0s and 1s. However, due to interference, some bits may be flipped during transmission. Watson wants to determine if a received message matches the original message. Given the original message as a binary string and the received message as another binary string, write a function to determine the minimum number of bit flips required to transform the received message back into the original message. The first line of input contains an integer n (1 ≤ n ≤ 100), the length of the binary strings. The second line contains the original binary string of length n. The third line contains the received binary string of length n. Output a single integer — the minimum number of bit flips required. # Example: **Input:** ``` 5 10101 10011 ``` **Output:** ``` 2 ``` **Explanation:** To transform \\"10011\\" back into \\"10101\\", we need to flip the bits at positions 2 and 4 (0-based). Hence, the output is 2.","solution":"def min_bit_flips(n, original, received): Returns the minimum number of bit flips required to transform the received message back into the original message. return sum(1 for o, r in zip(original, received) if o != r) # Example usage: # n = 5 # original = \\"10101\\" # received = \\"10011\\" # print(min_bit_flips(n, original, received)) # Should print 2"},{"question":"You are given a list of integers nums and an integer target. Find two distinct indices i and j in the list such that nums[i] + nums[j] = target, or report that it doesn\'t exist. The first line contains two integers n and target (2 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9). The second line contains n integers representing the list nums, where each integer is in the range [-10^9, 10^9]. If such a pair exists, output the indices i and j (1-based) such that nums[i] + nums[j] = target. If there are multiple solutions, you may output any pair of indices that satisfy the condition. If no such indices exist, output -1. In the first example, nums = [1, 2, 3, 4] and target = 5. The pair (1, 4) satisfies the condition since nums[0] + nums[3] = 1 + 4 = 5. In the second example, nums = [1, 2, 3, 4] and target = 10. No pair of indices satisfies the condition, so the answer is -1.","solution":"def find_two_sum_indices(nums, target): Finds two distinct indices i and j such that nums[i] + nums[j] = target. If such a pair exists, returns the indices (1-based). If not, returns -1. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement] + 1, i + 1) num_to_index[num] = i return -1"},{"question":"You are given an array of integers. Your task is to determine if it is possible to make all elements of the array equal by performing a series of operations. In each operation, you can take any two distinct elements, say a and b, and replace both of them with their average value (a + b) / 2. Note that during this operation, the resulting average value must be an integer. For example, for the array [2, 4, 6], you can make all elements equal by performing the following operations: 1. Take 2 and 4, replace them with (2 + 4) / 2 = 3, resulting in the array [3, 3, 6]. 2. Take 3 and 6, replace them with (3 + 6) / 2 = 4.5. Since 4.5 is not an integer, this path does not work. However, for the array [4, 6, 10], you can: 1. Take 4 and 6, replace them with (4 + 6) / 2 = 5, resulting in the array [5, 5, 10]. 2. Take 5 and 10, replace them with (5 + 10) / 2 = 7.5, which is also not an integer, but if we take the same pair (5, 5) multiple times we can equalize the array to [7, 7, 7]. Thus the output for array [2, 4, 6] should be \\"NO\\" and for [4, 6, 10] should be \\"YES\\". The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then, the test cases follow. Each test case starts with an integer n (1 le n leq 100) — the size of the array, followed by n integers representing the elements of the array. Each element of the array is between 1 and 10^9. Output \\"YES\\" if it is possible to make all elements equal using the aforementioned operations for each test case, otherwise \\"NO\\". # Example **Input:** ``` 2 3 2 4 6 3 4 6 10 ``` **Output:** ``` NO YES ```","solution":"def can_make_equal(arr): Determine if it\'s possible to make all integers in an array equal by averaging pairs return \'YES\' if all(x % 2 == arr[0] % 2 for x in arr) else \'NO\' def solve(test_cases): results = [] for case in test_cases: n, arr = case result = can_make_equal(arr) results.append(result) return results"},{"question":"You are given two non-negative integers, `a` and `b`. You are to find and print any string `s` such that: 1. `s` consists of exactly `a` characters \'0\' and exactly `b` characters \'1\'. 2. The string `s` does not contain any consecutive \'0\'s (i.e., there are no two adjacent \'0\'s in the string). If there are multiple valid strings, you can print any one of them. If no such string exists, output \\"-1\\". The input consists of two integers `a` and `b` (0 ≤ a, b ≤ 10^9). Print any string that satisfies the conditions or output \\"-1\\" if no such string exists.","solution":"def create_string(a, b): Returns a string that consists of exactly `a` characters \'0\' and exactly `b` characters \'1\' and does not contain any consecutive \'0\'s. If no such string exists, returns \\"-1\\". if a > b + 1: return \\"-1\\" s = [] while a > 0 and b > 0: if b > a: s.append(\'1\') s.append(\'1\') b -= 2 else: s.append(\'1\') b -= 1 s.append(\'0\') a -= 1 if b > 0: s.append(\'1\' * b) return \\"\\".join(s)"},{"question":"You are given an array of integers and an integer value \'k\'. Write a function that finds the length of the longest subarray with a sum equal to \'k\'. If there\'s no such subarray, return 0. The function signature is: ```python def longest_subarray_with_sum_k(arr: List[int], k: int) -> int: ``` # Input - An integer array `arr` where: - 1 ≤ len(arr) ≤ 100,000 - -10^9 ≤ arr[i] ≤ 10^9 - An integer `k` where: - -10^9 ≤ k ≤ 10^9 # Output - Return the length of the longest subarray with a sum equal to `k`. If there is no such subarray, return 0. # Example ```python print(longest_subarray_with_sum_k([1, -1, 5, -2, 3], 3)) # Output: 4 print(longest_subarray_with_sum_k([-2, -1, 2, 1], 1)) # Output: 2 print(longest_subarray_with_sum_k([1, 2, 3], 6)) # Output: 3 print(longest_subarray_with_sum_k([1, 2, 3], 7)) # Output: 0 ``` In the first example, the longest subarray with sum 3 is [1, -1, 5, -2], hence the output is 4.","solution":"from typing import List def longest_subarray_with_sum_k(arr: List[int], k: int) -> int: Finds the length of the longest subarray with sum equal to k. sum_indices = {} current_sum = 0 max_length = 0 for i, num in enumerate(arr): current_sum += num # Check if current subarray sum is equal to k if current_sum == k: max_length = i + 1 # If (current_sum - k) is found in the map, update max_length if (current_sum - k) in sum_indices: max_length = max(max_length, i - sum_indices[current_sum - k]) # Add current_sum to map if it\'s not already present if current_sum not in sum_indices: sum_indices[current_sum] = i return max_length"},{"question":"# Problem Statement Alex enjoys working with arrays, and he has a unique way of modifying them. Given an integer array `nums` of length `n`, he performs the following steps to create a new array `modified_nums`: 1. For each element at index `i` (0 ≤ i < n), find the greatest index `j` (i ≤ j < n) such that `nums[j]` is greater than `nums[i]`. If no such `j` exists, the value at index `i` in `modified_nums` will be `-1`. 2. If such an index `j` is found, the value at index `i` in `modified_nums` will be the original value at index `j` in `nums`. You are given the integer array `nums`. Your task is to determine and return the new array `modified_nums` after Alex\'s modification steps. **Input Format:** - The first line contains an integer `n`, the length of the array `nums` (1 ≤ n ≤ 10^5). - The second line contains `n` integers representing the elements of the array `nums` (−10^9 ≤ nums[i] ≤ 10^9, for all valid i). **Output Format:** - Output a single line containing `n` integers, the elements of the array `modified_nums`. **Examples:** **Example 1:** ``` Input: 5 2 1 5 3 4 Output: 5 5 -1 4 -1 ``` **Example 2:** ``` Input: 6 4 7 2 8 1 6 Output: 7 8 8 -1 6 -1 ``` **Explanation:** In the first example, the sequence of steps and the resulting `modified_nums` array are as follows: - For index 0 (value `2`), the greatest index `j` such that `nums[j] > nums[0]` is `2` (value `5`), so modified_nums[0] = `5`. - For index 1 (value `1`), the greatest index `j` such that `nums[j] > nums[1]` is `2` (value `5`), so modified_nums[1] = `5`. - For index 2 (value `5`), no greater value exists, so modified_nums[2] = `-1`. - For index 3 (value `3`), the greatest index `j` such that `nums[j] > nums[3]` is `4` (value `4`), so modified_nums[3] = `4`. - For index 4 (value `4`), no greater value exists, so modified_nums[4] = `-1`. In the second example, the sequence of steps and the resulting `modified_nums` array are: - For index 0 (value `4`), the greatest index `j` such that `nums[j] > nums[0]` is `1` (value `7`), so modified_nums[0] = `7`. - For index 1 (value `7`), the greatest index `j` such that `nums[j] > nums[1]` is `3` (value `8`), so modified_nums[1] = `8`. - For index 2 (value `2`), the greatest index `j` such that `nums[j] > nums[2]` is `3` (value `8`), so modified_nums[2] = `8`. - For index 3 (value `8`), no greater value exists, so modified_nums[3] = `-1`. - For index 4 (value `1`), the greatest index `j` such that `nums[j] > nums[4]` is `5` (value `6`), so modified_nums[4] = `6`. - For index 5 (value `6`), no greater value exists, so modified_nums[5] = `-1`. **Constraints:** - You may assume the given array has at least one element. - Handle the input efficiently within the given constraints.","solution":"def modify_array(nums): Returns a new array where for each element at index i, we find the greatest index j (i ≤ j < n) such that nums[j] is greater than nums[i]. If no such j exists, the value is -1. n = len(nums) modified_nums = [-1] * n stack = [] for i in range(n-1, -1, -1): while stack and nums[stack[-1]] <= nums[i]: stack.pop() if stack: modified_nums[i] = nums[stack[-1]] stack.append(i) return modified_nums"},{"question":"You are given two strings, s1 and s2, each consisting of lowercase English letters. You are allowed to perform exactly two types of operations on these strings: 1. Swap any character from s1 with any character from s2. 2. Replace any character in s1 or s2 with any lowercase English letter. Your goal is to determine the minimum number of operations required to make s1 and s2 anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. # Input: - The first line contains a single string s1 (1 ≤ |s1| ≤ 100000). - The second line contains a single string s2 (1 ≤ |s2| ≤ 100000). # Output: - Output a single integer — the minimum number of operations required to make the two strings anagrams of each other. # Example: Input ``` aabc cbad ``` Output ``` 2 ``` Input ``` abcd efgh ``` Output ``` 4 ``` # Note: In the first example, we can swap \'a\' from s1 with \'c\' from s2 and swap \'b\' from s1 with \'d\' from s2. Since no replacements are necessary, we need exactly 2 operations. In the second example, we need to replace each character in s1 with the corresponding character from s2, requiring 4 operations.","solution":"from collections import Counter def min_operations_to_anagram(s1, s2): Returns the minimum number of operations required to make s1 and s2 anagrams of each other. # Count frequencies of each character in both strings count1 = Counter(s1) count2 = Counter(s2) # Calculate the number of excess characters in s1 and s2 excess_in_s1 = count1 - count2 excess_in_s2 = count2 - count1 # Total excess characters represent the minimal number of operations required total_operations = sum(excess_in_s1.values()) + sum(excess_in_s2.values()) return total_operations"},{"question":"You are given a string consisting of lowercase English letters and an integer k. You need to find a substring of the given string such that there are exactly k different characters in it. Your task is to determine the length of the shortest such substring. If there is no such substring, print -1. The first line contains an integer k (1 ≤ k ≤ 26) — the number of different characters you need in the substring. The second line contains a string s (1 ≤ |s| ≤ 100000) consisting of lowercase English letters. Output a single integer — the length of the shortest substring of s that contains exactly k different characters. If there is no such substring, output -1. **Example 1:** ``` Input: 2 aabbcc Output: 2 ``` **Example 2:** ``` Input: 3 abcabc Output: 3 ``` **Example 3:** ``` Input: 5 aaaaa Output: -1 ```","solution":"def shortest_substring_with_k_distinct_characters(k, s): Returns the length of the shortest substring that contains exactly k different characters. If there is no such substring, returns -1. from collections import defaultdict if len(s) < k: return -1 # Initialize pointers for the sliding window left = 0 right = 0 min_length = float(\'inf\') # Dictionary to store frequency of characters in the current window freq = defaultdict(int) # Current distinct character count in the window distinct_count = 0 while right < len(s): if freq[s[right]] == 0: distinct_count += 1 freq[s[right]] += 1 right += 1 # When the distinct character count reaches k, try to minimize the window while distinct_count == k: min_length = min(min_length, right - left) # Move the left pointer to reduce the window size freq[s[left]] -= 1 if freq[s[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"The input consists of three lines, each line containing a positive integer n (1 ≤ n ≤ 100). Output a single integer, the sum of the squares of the three provided integers.","solution":"def sum_of_squares(n1, n2, n3): Returns the sum of the squares of the three provided integers. return n1 ** 2 + n2 ** 2 + n3 ** 2"},{"question":"Consider an array of integers where some elements may appear more than once. You are required to transform this array into another array where each unique element appears exactly once, but each element appearing previously multiple times must now appear consecutively in the new array. Specifically, given an array A of size n, find at least one way to rearrange the elements such that the above condition is satisfied. # Input The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of elements in array A. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). # Output If it is possible to rearrange the array as required, print \\"YES\\" and then print the rearranged array on the next line. If it is not possible, just print \\"NO\\". # Example Input ``` 5 4 3 3 2 2 ``` Output ``` YES 2 2 3 3 4 ``` Input ``` 4 1 4 2 3 ``` Output ``` YES 1 2 3 4 ``` Input ``` 2 2 2 ``` Output ``` YES 2 2 ```","solution":"def rearrange_unique_consecutively(n, arr): from collections import Counter # Count the frequency of each element frequency = Counter(arr) # Extract elements in sorted order elements = sorted(frequency.keys()) # Prepare the result array result = [] # Populate result array ensuring consecutive appearance for unique elements for element in elements: result.extend([element] * frequency[element]) return \\"YES\\", result"},{"question":"Given a string s consisting of lowercase alphabets and an integer k, your task is to determine if it is possible to rearrange the string such that there are at least k positions between any two identical characters. If it is possible, return one possible rearrangement of the string. If it is not possible, return an empty string. # Input - A string s which has length n (1 ≤ n ≤ 10^6) and contains only lowercase letters. - An integer k (1 ≤ k ≤ n). # Output - A rearranged string that satisfies the condition if it exists. - If no such rearrangement is possible, return an empty string. # Example Example 1: ```plaintext Input: aabbcc 2 Output: abcabc ``` Example 2: ```plaintext Input: aaabc 3 Output: \\"\\" Explanation: It is not possible to rearrange the string such that the same characters are at least 3 positions apart. Example 3: ```plaintext Input: aaadbbcc 2 Output: abacabad or acabadba (or any other valid rearrangement) ``` # Note - You need to ensure that if there exists a valid rearrangement of the string based on the given k, the output string adheres to it. - The function should be optimized to handle strings that may be as long as 10^6 characters.","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): if k == 0: return s count = Counter(s) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) result = [] wait_queue = deque() while max_heap: current_count, current_char = heapq.heappop(max_heap) result.append(current_char) wait_queue.append((current_count + 1, current_char)) if len(wait_queue) < k: continue count_back, char_back = wait_queue.popleft() if -count_back > 0: heapq.heappush(max_heap, (count_back, char_back)) if len(result) == len(s): return \\"\\".join(result) else: return \\"\\""},{"question":"Consider a sequence of integers (a_1, a_2, ..., a_n) where each integer (a_i) is either 0 or 1. You are asked to perform multiple operations on this sequence. Each operation is of one of the following two types: 1. **Update** the value at a specific position. 2. **Query** the longest contiguous subsequence consisting of only 1s. More formally, there are two types of operations: - `1 x`: This is an update operation that changes the value at position (x) (1 ≤ (x) ≤ (n)) to 1. - `2`: This is a query operation that asks for the length of the longest contiguous subsequence of 1s. Initially, the sequence has all elements set to 0. You need to process all operations and output the result of each query operation. **Input** - The first line contains two integers (n) and (q) (1 ≤ (n) ≤ (10^5), 1 ≤ (q) ≤ (10^5)) — the length of the sequence and the number of operations respectively. - The following (q) lines describe the operations. Each operation is either of type `1 x` where (1 ≤ x ≤ n), or of type `2`. **Output** - For each query operation, output the length of the longest contiguous subsequence consisting of 1s. **Example** ``` Input: 5 6 1 2 1 4 2 1 3 2 1 5 Output: 1 2 ``` **Explanation** 1. Initially, the sequence is [0, 0, 0, 0, 0]. 2. After the first update operation (`1 2`), the sequence becomes [0, 1, 0, 0, 0]. 3. After the second update operation (`1 4`), the sequence becomes [0, 1, 0, 1, 0]. 4. The first query operation asks for the longest contiguous 1s subsequence, which is 1 (either at position 2 or 4). 5. After the third update operation (`1 3`), the sequence becomes [0, 1, 1, 1, 0]. 6. The second query operation now finds that the longest contiguous 1s subsequence is 2 (positions 2 to 4). 7. After the fourth update operation (`1 5`), the sequence becomes [0, 1, 1, 1, 1]. 8. Therefore, the subsequent queries will continue to find longer sequences of contiguous 1s as updates are made.","solution":"def process_operations(n, q, operations): sequence = [0] * n max_lens = [] # List to hold the results of \'2\' operations def update(x): sequence[x-1] = 1 def query(): max_len = curr_len = 0 for val in sequence: if val == 1: curr_len += 1 max_len = max(max_len, curr_len) else: curr_len = 0 return max_len for operation in operations: if operation[0] == 1: update(operation[1]) elif operation[0] == 2: max_lens.append(query()) return max_lens"},{"question":"You are given a string consisting of lowercase English letters. You have to find the smallest substring (i.e., a contiguous portion of the string) which contains all the distinct characters of the string at least once. Input The first and only line of the input contains a string s of length n (1 ≤ n ≤ 100000). Output Print the length of the smallest substring of s containing all distinct characters of s. Example Input abcabcbb Output 3 Explanation In the example, the smallest substring that contains all distinct characters (\\"a\\", \\"b\\", \\"c\\") is \\"abc\\", which has a length of 3.","solution":"def smallest_substring_with_distinct_chars(s): Returns the length of the smallest substring that contains all distinct characters of the input string. distinct_chars = set(s) distinct_count = len(distinct_chars) n = len(s) if distinct_count == n: # All characters are unique return n left = 0 right = 0 min_len = n + 1 current_count = {} while right < n: # Expand the window by including the current character on the right if s[right] in current_count: current_count[s[right]] += 1 else: current_count[s[right]] = 1 # Check if all distinct characters are present in current window while len(current_count) == distinct_count: min_len = min(min_len, right - left + 1) # Shrink the window from the left if s[left] in current_count: current_count[s[left]] -= 1 if current_count[s[left]] == 0: del current_count[s[left]] left += 1 right += 1 return min_len"},{"question":"You are developing an e-commerce platform, and you need to implement a feature to optimize the shipping cost for customers based on their cart content. Each shipping method has a base cost and a weight limit. If the total weight of the items in the cart exceeds the weight limit of a shipping method, an additional cost per unit weight is applied. You need to determine the shipping method with the minimum total shipping cost for a given cart. The platform supports multiple shipping methods, denoted by n, and each has a base cost, a weight limit, and an additional cost per unit weight. The cart contains m items, and each item has a weight. Your task is to compute the minimum shipping cost for the given cart. The first line contains two integers n and m (1 leq n, m leq 10^5) — the number of available shipping methods and the number of items in the cart, respectively. The following n lines describe the available shipping methods. The i-th of these lines contains three integers c_i, w_i, and a_i (1 leq c_i leq 10^6, 1 leq w_i leq 10^6, 1 leq a_i leq 10^3) — the base cost, the weight limit, and the additional cost per unit weight for the shipping method i. The following m lines describe the items in the cart. The j-th of these lines contains a single integer w_j (1 leq w_j leq 10^4) — the weight of the item j. Print a single integer — the minimum total shipping cost for the given cart. Example input: ``` 3 5 10 20 2 15 30 1 25 25 3 5 7 9 3 4 2 ``` Example output: ``` 17 ``` Explanation: The cart contains items with weights [5, 7, 9, 3, 4, 2], totaling 30 units of weight. The three shipping methods have the following costs: 1. Base cost 10, weight limit 20, additional cost 2: Total cost = 10 + 2 * (30 - 20) = 30. 2. Base cost 15, weight limit 30, additional cost 1: Total cost = 15 (no additional cost, as the total weight does not exceed the limit). 3. Base cost 25, weight limit 25, additional cost 3: Total cost = 25 + 3 * (30 - 25) = 40. The minimum total shipping cost is 15.","solution":"def min_shipping_cost(n, m, methods, items): total_weight = sum(items) min_cost = float(\'inf\') for method in methods: base_cost, weight_limit, additional_cost = method if total_weight > weight_limit: total_cost = base_cost + additional_cost * (total_weight - weight_limit) else: total_cost = base_cost if total_cost < min_cost: min_cost = total_cost return min_cost"},{"question":"You are given a binary string s of length n. You can perform the following operation at most once: select any substring of length exactly 2 and reverse it. Your task is to determine the lexicographically smallest string that can be obtained after performing the above operation at most once. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. For each test case: - The first line contains a single integer n (1 le n le 10^5) — the length of the binary string. - The second line contains the binary string s of length n, consisting of \'0\'s and \'1\'s. For each test case, print a single line containing the lexicographically smallest string that can be obtained after reversing at most one substring of length 2. Note: The sum of n over all test cases does not exceed 10^6.","solution":"def smallest_binary_string(t, test_cases): results = [] for n, s in test_cases: found_10 = False smallest_string = s for i in range(n - 1): if s[i] == \'1\' and s[i + 1] == \'0\': found_10 = True new_s = s[:i] + \'01\' + s[i + 2:] if new_s < smallest_string: smallest_string = new_s results.append(smallest_string if found_10 else s) return results # Example usage t = 3 test_cases = [ (3, \\"010\\"), (4, \\"1100\\"), (5, \\"11111\\") ] print(smallest_binary_string(t, test_cases))"},{"question":"You are given an array of integers and a target integer. Write a function that determines if any two distinct elements in the array sum up to the target integer. If such a pair exists, the function should return \'Yes\', otherwise, it should return \'No\'. # Input - The first line of input contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The second line of input contains `n` space-separated integers representing the elements of the array (-10^9 le text{element} le 10^9). - The third line of input contains an integer `target` (-10^{18} le text{target} le 10^{18}). # Output - Print \'Yes\' if there are two distinct integers in the array whose sum is equal to the target. - Print \'No\' if there are no such integers in the array. # Example Example 1 # Input ``` 5 1 2 3 4 5 9 ``` # Output ``` Yes ``` # Explanation - The integers 4 and 5 sum to 9, so the function returns \'Yes\'. Example 2 # Input ``` 5 1 2 3 4 5 10 ``` # Output ``` No ``` # Explanation - There are no two integers in the array that sum to 10, so the function returns \'No\'. # Note Make sure your solution is efficient enough to handle the given constraints.","solution":"def check_sum_exists(n, arr, target): Determines if any two distinct elements in the array sum up to the target integer. :param n: Number of elements in the array :param arr: List of integers :param target: The target sum :return: \'Yes\' if such a pair exists, \'No\' otherwise seen = set() for num in arr: if target - num in seen: return \'Yes\' seen.add(num) return \'No\'"},{"question":"You are given a sequence of n integers representing the heights of a mountain range. A mountain range is defined as an array of integers such that there is a peak point from which the heights increase on the left and decrease on the right. Your task is to find the maximum height of the peak such that it maintains the properties of a mountain range. Specifically, you need to find the highest peak such that there exists an index p (1 ≤ p ≤ n) where the heights[1] < ... < heights[p] > ... > heights[n]. If multiple such peaks exist, return the one that occurs first. # Input The first line contains an integer n (3 ≤ n ≤ 10^5) — the number of integers in the sequence. The second line contains n integers, the heights of the mountain range (1 ≤ heights[i] ≤ 10^9). # Output Output the maximum height of the peak that maintains the properties of a mountain range. # Example Input ``` 6 2 4 7 6 3 1 ``` Output ``` 7 ``` Input ``` 5 2 2 3 4 2 ``` Output ``` 4 ```","solution":"def find_highest_peak(n, heights): Finds the highest peak in a mountain range sequence. Args: n: integer - the number of integers in the sequence. heights: list of integers - the heights of the mountain range. Returns: The maximum height of the peak that maintains the properties of a mountain range. max_peak = -1 i = 1 # Starting from the second element while i < n - 1: if heights[i - 1] < heights[i] > heights[i + 1]: if heights[i] > max_peak: max_peak = heights[i] i += 1 return max_peak"},{"question":"You are given a sequence of integers of length n. Perform a series of operations on the sequence such that after each operation, the absolute difference between any two consecutive elements is minimized. Specifically, in each operation, you may pick any two adjacent elements a_i and a_{i+1}, and change either of these elements to any integer value. Determine the minimum possible sum of absolute differences between consecutive elements after performing any number of operations. # Input - The first line contains a single integer n (2 le n le 10^5), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the initial sequence. # Output - Output a single integer, the minimum possible sum of absolute differences between consecutive elements. # Example Input ``` 5 3 7 2 8 4 ``` Output ``` 0 ``` Explanation After the following sequence of operations, the absolute differences between any two consecutive elements can be made zero: - Change the first and second elements to 3, the sequence becomes [3, 3, 2, 8, 4]. - Change the third element to 3, the sequence becomes [3, 3, 3, 8, 4]. - Change the fourth element to 3, the sequence becomes [3, 3, 3, 3, 4]. - Change the fifth element to 3, the sequence becomes [3, 3, 3, 3, 3]. Thus, the sum of any differences is minimized effectively to 0.","solution":"def minimize_sum_of_absolute_differences(arr): Given a sequence of integers, this function calculates the minimum possible sum of absolute differences between consecutive elements after performing the allowed operations. # Since we can change any adjacent pair to any other value the strategy will be to make all the elements same # Any array where all elements are the same will have sum of differences as 0 return 0 # Example usage: # n = 5 # arr = [3, 7, 2, 8, 4] # print(minimize_sum_of_absolute_differences(arr)) # Output: 0"},{"question":"Write a function to simulate a basic traffic light system. The system cycles through the colors \\"green\\", \\"yellow\\", and \\"red\\", each for a specific duration. The function should take three arguments: the duration for the green light (in seconds), the duration for the yellow light (in seconds), and the duration for the red light (in seconds). The function should then simulate the traffic light system continuously for a given number of cycles. The program should output the current light color followed by the duration it remains in that state before transitioning to the next color. Function Signature: ```python def traffic_light_system(green_duration: int, yellow_duration: int, red_duration: int, cycles: int): pass ``` # Input The input to the function consists of four integers: - `green_duration` (1 ≤ `green_duration` ≤ 100) — the duration for the green light. - `yellow_duration` (1 ≤ `yellow_duration` ≤ 100) — the duration for the yellow light. - `red_duration` (1 ≤ `red_duration` ≤ 100) — the duration for the red light. - `cycles` (1 ≤ `cycles` ≤ 100) — the number of cycles to simulate. # Output The function should print out the traffic light changes in the following format: ``` green for <green_duration> seconds yellow for <yellow_duration> seconds red for <red_duration> seconds ``` Each cycle should output these lines. For the given number of cycles, the respective output is repeated. # Example ```python traffic_light_system(5, 2, 7, 2) ``` **Output:** ``` green for 5 seconds yellow for 2 seconds red for 7 seconds green for 5 seconds yellow for 2 seconds red for 7 seconds ``` In the above example: - the green light is on for 5 seconds, - then the yellow light is on for 2 seconds, - followed by the red light for 7 seconds. These steps are repeated for 2 complete cycles.","solution":"def traffic_light_system(green_duration: int, yellow_duration: int, red_duration: int, cycles: int): Simulates a basic traffic light system. Parameters: green_duration (int): Duration for green light in seconds. yellow_duration (int): Duration for yellow light in seconds. red_duration (int): Duration for red light in seconds. cycles (int): Number of cycles to simulate. for _ in range(cycles): print(f\\"green for {green_duration} seconds\\") print(f\\"yellow for {yellow_duration} seconds\\") print(f\\"red for {red_duration} seconds\\")"},{"question":"You are given an array of integers which represents the points scored by a player in \'n\' games. You need to determine the maximum number of consecutive games in which the player scored strictly increasing points. # Input The first line contains a single integer n (1 ≤ n ≤ 1000) –– the number of games played. The second line contains n integers separated by spaces, each representing the points scored by the player in each game. The points scored are non-negative integers and do not exceed 10^9. # Output Print a single integer –– the maximum number of consecutive games in which the player\'s scores were strictly increasing. # Example Input: ``` 6 3 4 5 1 2 3 ``` Output: ``` 3 ``` Input: ``` 5 10 20 30 20 10 ``` Output: ``` 3 ``` Input: ``` 5 5 4 3 2 1 ``` Output: ``` 1 ``` **Note:** In the first example, the player scores 3, 4, 5 over the first three games and then resets when the score drops to 1. Hence, the maximum number of consecutive games with strictly increasing scores is 3. In the second example, the player scores 10, 20, 30 over the first three games and then the score drops. Hence, the maximum number of consecutive games with strictly increasing scores is also 3. In the last example, the scores are always decreasing or constant, so the maximum number of consecutive games with strictly increasing scores is 1.","solution":"def max_consecutive_increasing(scores): Returns the maximum number of consecutive games with strictly increasing scores. if not scores: return 0 max_length = 1 current_length = 1 for i in range(1, len(scores)): if scores[i] > scores[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given an array of integers representing elevations of terrain, where each element represents the elevation at that point. You want to determine how much water would be trapped after it rains, assuming the water cannot flow over the ends of the terrain and will fill the depressions in between the elevations. Write a function `trap_water(elevations: List[int]) -> int` that takes a list of integers `elevations` and returns the total amount of water that can be trapped. # Input: - A list of integers `elevations` where `0 <= len(elevations) <= 1000` and `0 <= elevations[i] <= 1000`. # Output: - An integer representing the total amount of trapped water. # Example: ```python >>> trap_water([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) 6 >>> trap_water([4, 2, 0, 3, 2, 5]) 9 >>> trap_water([]) 0 >>> trap_water([1, 2, 1]) 0 ``` # Explanation: In the first example, elevations are [0,1,0,2,1,0,1,3,2,1,2,1], which can be visualized as heights of bars in a histogram. The water trapped at each index is as follows: - At index 2, height 1 -> water height is 1 (bounded by heights 1 and 2) - At index 5, height 0 -> water height is 2 (bounded by heights 2 and 1) - At index 6, height 1 -> water height is 1 (bounded by heights 2 and 3) - At index 8, height 1 -> water height is 1 (bounded by heights 3 and 2) - Total water trapped = 1 + 2 + 1 + 1 = 6 In the second example, elevations are [4,2,0,3,2,5], which can be visualized similarly, resulting in total trapped water of 9 units.","solution":"from typing import List def trap_water(elevations: List[int]) -> int: Calculate the amount of water that can be trapped after raining. Parameters: elevations (List[int]): List of integers representing the elevation of terrain. Returns: int: Total amount of water trapped. if not elevations: return 0 n = len(elevations) left_max = [0] * n right_max = [0] * n left_max[0] = elevations[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], elevations[i]) right_max[n - 1] = elevations[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], elevations[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - elevations[i] return water_trapped"},{"question":"A company has a warehouse with a conveyor belt system that delivers packages to different processing stations. Each station can handle a certain number of packages per hour. The company wants to ensure that all packages are processed as quickly as possible. You are given a list of integers where each integer represents the number of packages each station can handle per hour. Additionally, you are given an integer representing the total number of packages to be processed. Your task is to determine the minimum number of hours required to process all the packages. If it\'s not possible to process all the packages given the capacity of the stations, return -1. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of processing stations. The second line contains n integers, where each integer pi (1 ≤ pi ≤ 1000) represents the package-handling capacity of each station per hour. The third line contains an integer m (1 ≤ m ≤ 1000000) — the total number of packages to be processed. Output a single integer — the minimum number of hours required to process all the packages, or -1 if it\'s not possible. Example: Input: 3 10 20 30 100 Output: 2 Explanation: In this example, the stations can handle 10, 20, and 30 packages per hour, respectively. To process 100 packages, the company can distribute the workload as follows: - In the first hour, the stations process 10 + 20 + 30 = 60 packages. - In the second hour, the stations process another 10 + 20 + 30 = 60 packages. Therefore, a total of 120 packages can be processed in 2 hours, which is sufficient to handle the workload. Thus, the minimum number of hours required is 2.","solution":"def minimum_hours_to_process_packages(n, capacities, m): total_capacity_per_hour = sum(capacities) if total_capacity_per_hour == 0: return -1 hours_needed = m // total_capacity_per_hour if m % total_capacity_per_hour != 0: hours_needed += 1 return hours_needed"},{"question":"A famous theme park has a new attraction that allows only certain group sizes to pass through the entrance gate. There are `n` groups standing in a queue. Each group is composed of a certain number of people. The entrance gate has a constraint: the sum of people in any two consecutive groups must not exceed a maximum threshold `m`. The groups must enter the attraction one after another in the given order. The first line contains two integers `n` and `m` (1 ≤ n ≤ 105, 1 ≤ m ≤ 103) — the number of groups and the maximum allowed sum of people in any two consecutive groups. The second line contains `n` integers, where each integer represents the number of people in a group. Print \\"YES\\" if all groups can pass through the gate in the given order without exceeding the limit in any two consecutive groups. Otherwise, print \\"NO\\".","solution":"def can_all_groups_pass(n, m, groups): Determines if all groups can pass through the gate without exceeding the max sum of people in two consecutive groups. :param n: Number of groups :param m: Maximum allowed sum of people in any two consecutive groups :param groups: List of integers where each integer represents the number of people in a group :return: \\"YES\\" if all groups can pass, otherwise \\"NO\\" for i in range(n - 1): if groups[i] + groups[i + 1] > m: return \\"NO\\" return \\"YES\\" # Example usage # n = 5 # m = 6 # groups = [3, 2, 1, 3, 2] # print(can_all_groups_pass(n, m, groups)) # Output: \\"YES\\""},{"question":"Kyra loves pets and has a large collection of animals in her pet shop. Each of her pets belongs to one of three categories: Mammals, Birds, or Reptiles. Kyra wants to create a specially curated listing of unique pets for a promotional campaign, ensuring that no two pets in the listing belong to the same category. To simplify the problem, Kyra assigns an integer type to each pet: 1 for Mammals, 2 for Birds, and 3 for Reptiles. Kyra wants to ensure that she can create a sequence of pets where no two consecutive pets share the same type, and the list has at least one pet of each type. Your task is to write a program to determine if it is possible for Kyra to create such a listing from her collection of pets. If it is possible, the program should print \\"Yes\\"; otherwise, it should print \\"No\\". The first input line contains a single integer n — the number of pets in Kyra\'s collection (3 ≤ n ≤ 10^5). The second input line contains n space-separated integers ti (1 ≤ ti ≤ 3) representing the type of each pet. Your program should output a single word \\"Yes\\" if it is possible to create the required listing, otherwise, print \\"No\\". Example: Input 1: 5 1 2 3 1 2 Output 1: Yes Input 2: 4 1 1 1 2 Output 2: No In the first example, Kyra has all three types of pets, and she can easily create a listing like [1, 2, 3]. In the second example, Kyra does not have at least one of each type, so it is not possible to create the required listing.","solution":"def can_create_unique_listing(n, pet_types): Determine if it is possible to create a listing of pets where no two consecutive pets are of the same type and the list has at least one pet of each type. :param n: Number of pets :param pet_types: List of integers representing types of each pet :return: \\"Yes\\" if such a listing is possible, otherwise \\"No\\" # Count the number of each type count_mammals = pet_types.count(1) count_birds = pet_types.count(2) count_reptiles = pet_types.count(3) # Check if we have at least one pet of each type if count_mammals > 0 and count_birds > 0 and count_reptiles > 0: return \\"Yes\\" else: return \\"No\\" # Sample Input print(can_create_unique_listing(5, [1, 2, 3, 1, 2])) # Output: Yes print(can_create_unique_listing(4, [1, 1, 1, 2])) # Output: No"},{"question":"You are given a collection of n villages connected by m bidirectional roads. Each road has a particular length associated with it. Villages are numbered from 1 to n. The mayor of the villages wants to ensure that all the villages are connected directly or indirectly through roads, and he also wants the total length of the used roads to be as small as possible. Help the mayor achieve this by finding the length of the minimum set of roads that keeps all the villages connected. The first line contains two integers n and m — the number of villages and the number of roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the endpoints and the length of a road. Output a single integer — the minimum total road length required to connect all the villages. If it\'s not possible to connect all the villages, print -1.","solution":"class DisjointSetUnion: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def find_minimum_roads(n, m, roads): dsu = DisjointSetUnion(n) roads.sort(key=lambda x: x[2]) total_length = 0 num_edges_used = 0 for u, v, w in roads: if dsu.find(u - 1) != dsu.find(v - 1): dsu.union(u - 1, v - 1) total_length += w num_edges_used += 1 if num_edges_used == n - 1: return total_length else: return -1"},{"question":"You are working with a robot that needs to manage a sequence of integers represented by an array A = [A_1, A_2, dots, A_N]. The robot should be able to handle dynamic range updates and queries. The robot supports the following commands: 1. Update the value of an element in the array. 2. Find the minimum value in a specified subarray. 3. Find the greatest common divisor (GCD) of the elements in a specified subarray. You are to implement the functionality to handle these commands efficiently. Input begins with a line containing two integers N and Q (1 le N, Q le 100,000) representing the number of elements in the array and the number of commands, respectively. The next line contains N integers A_1, A_2, dots, A_N, representing the initial elements of the array. The next Q lines each contain a command of one of the following types: - `1 X V`: Update the value at index X (1-based) to V. - `2 L R`: Output the minimum value in the subarray A[L, R]. - `3 L R`: Output the GCD of the elements in the subarray A[L, R]. # Constraints: - 1 le A_i le 10^9 - 1 le L le R le N For each command of the second and third types in the same order as input, output the result in a new line. # Example: Input: ``` 5 5 2 6 8 3 7 2 1 3 3 2 5 1 3 1 2 1 3 3 1 3 ``` Output: ``` 2 1 1 1 ``` # Explanation: - The initial array is [2, 6, 8, 3, 7] - The minimum value in the subarray [2, 6, 8] is 2. - The GCD of the subarray [6, 8, 3, 7] is 1. - Update index 3 to 1, resulting in the array [2, 6, 1, 3, 7]. - The minimum value in the subarray [2, 6, 1] is 1. - The GCD of the subarray [2, 6, 1] is 1.","solution":"from math import gcd from functools import reduce class SegmentTree: def __init__(self, array): self.n = len(array) self.arr = array self.min_tree = [0] * (4 * self.n) self.gcd_tree = [0] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.min_tree[node] = self.arr[start] self.gcd_tree[node] = self.arr[start] else: mid = (start + end) // 2 self.build(2 * node + 1, start, mid) self.build(2 * node + 2, mid + 1, end) self.min_tree[node] = min(self.min_tree[2 * node + 1], self.min_tree[2 * node + 2]) self.gcd_tree[node] = gcd(self.gcd_tree[2 * node + 1], self.gcd_tree[2 * node + 2]) def update(self, index, value, node = 0, start = 0, end = 0): if start == end: self.arr[index] = value self.min_tree[node] = value self.gcd_tree[node] = value else: mid = (start + end) // 2 if start <= index <= mid: self.update(index, value, 2 * node + 1, start, mid) else: self.update(index, value, 2 * node + 2, mid + 1, end) self.min_tree[node] = min(self.min_tree[2 * node + 1], self.min_tree[2 * node + 2]) self.gcd_tree[node] = gcd(self.gcd_tree[2 * node + 1], self.gcd_tree[2 * node + 2]) def range_min(self, L, R, node = 0, start = 0, end = 0): if R < start or L > end: return float(\'inf\') if L <= start and end <= R: return self.min_tree[node] mid = (start + end) // 2 left_min = self.range_min(L, R, 2 * node + 1, start, mid) right_min = self.range_min(L, R, 2 * node + 2, mid + 1, end) return min(left_min, right_min) def range_gcd(self, L, R, node = 0, start = 0, end = 0): if R < start or L > end: return 0 if L <= start and end <= R: return self.gcd_tree[node] mid = (start + end) // 2 left_gcd = self.range_gcd(L, R, 2 * node + 1, start, mid) right_gcd = self.range_gcd(L, R, 2 * node + 2, mid + 1, end) return gcd(left_gcd, right_gcd) def process_commands(n, q, array, commands): seg_tree = SegmentTree(array) results = [] for command in commands: if command[0] == 1: _, x, v = command seg_tree.update(x - 1, v, 0, 0, n - 1) elif command[0] == 2: _, l, r = command results.append(seg_tree.range_min(l - 1, r - 1, 0, 0, n - 1)) elif command[0] == 3: _, l, r = command results.append(seg_tree.range_gcd(l - 1, r - 1, 0, 0, n - 1)) return results"},{"question":"You have been given a string s and an integer array indices of the same length. The string s and the array indices contain only lowercase English letters and unique integers respectively. Your task is to shuffle the string s based on the given indices array. In other words, the character at the i-th position of s should be moved to the indices[i]-th position in the shuffled string. Write a function to reconstruct and return the shuffled string. # Function Signature: ```python def restoreString(s: str, indices: List[int]) -> str: ``` # Example: ```plaintext Input: s = \\"abc\\", indices = [2, 1, 0] Output: \\"cba\\" Input: s = \\"codeleet\\", indices = [4,5,6,7,0,2,1,3] Output: \\"leetcode\\" ``` # Constraints: - s.length == indices.length - 1 <= s.length <= 100 - s contains only lowercase English letters. - All values of indices are unique and are in the range [0, s.length - 1]. # Explanation: - In the first example, \'a\' is moved to position 2, \'b\' is moved to position 1, and \'c\' is moved to position 0. So, the resulting string is \\"cba\\". - In the second example, the characters in string \\"codeleet\\" need to be shuffled to the positions given by the indices array, resulting in the string \\"leetcode\\".","solution":"from typing import List def restoreString(s: str, indices: List[int]) -> str: Reconstructs the shuffled string based on the given indices array. Parameters: s (str): The input string indices (List[int]): The list of indices representing the new positions for characters Returns: str: The reconstructed string n = len(s) result = [\'\'] * n # Create a list of empty strings of the same length as s for i, index in enumerate(indices): result[index] = s[i] # Place each character at its new position return \'\'.join(result) # Join the list into a single string"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains either a \'.\' (empty cell) or a \'*\' (block). You have two types of operations available: 1. Fill any empty cell \'.\' with a \'*\' (turn an empty cell into a block). 2. Remove an existing \'*\' from any cell (turn a block into an empty cell). Your task is to transform the grid in such a way that all stars (‘*’) form exactly one single connected component. Two cells with \'*\' are considered part of the same component if you can move between them by passing through adjacent cells (left, right, up, and down). Due to performance considerations, you are required to find the minimum number of operations needed to achieve this transformation. # Input - The first line contains integers n and m (1 leq n, m leq 1000) — the number of rows and columns of the grid. - The following n lines contain m characters each (\'.\' or \'*\') — the cells of the grid. # Output - Print a single integer — the minimum number of operations needed to transform the grid so that all \'*\' form exactly one single connected component. # Example **Input:** ``` 4 5 .*... ..*.. *.*.* ..... ``` **Output:** ``` 3 ``` **Explanation:** In this example, you can at minimum perform 3 operations to connect all existing \'*\' into a single component. For instance: 1. Change cell (2,2) from \'.\' to \'*\'. 2. Change cell (3,3) from \'.\' to \'*\'. 3. Change cell (4,3) from \'.\' to \'*\' or (4,2) from \'.\' to \'*\'. After these operations, all the \'*\' will be part of a single connected component.","solution":"from collections import deque def min_operations_to_single_component(grid): n = len(grid) m = len(grid[0]) def is_valid(x, y): return 0 <= x < n and 0 <= y < m def bfs(start_x, start_y, visited): queue = deque([(start_x, start_y)]) visited[start_x][start_y] = True component_size = 0 while queue: x, y = queue.popleft() component_size += 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny] and grid[nx][ny] == \'*\': visited[nx][ny] = True queue.append((nx, ny)) return component_size components = [] visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == \'*\' and not visited[i][j]: component_size = bfs(i, j, visited) components.append(component_size) if not components: return 0 num_components = len(components) return num_components - 1 # Example usage: # n, m = 4, 5 # grid = [ # \\".*...\\", # \\"..*..\\", # \\"*.*.*\\", # \\".....\\" # ] # result = min_operations_to_single_component([list(row) for row in grid]) # print(result) # Output: 3"},{"question":"You are given an array of integers a of length n. You want to divide the array into two non-empty subarrays such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. Your task is to determine if such a division is possible. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains one integer n (2 le n le 10^5) — the length of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the elements of the array. For each test case, print \\"YES\\" if there is a way to divide the array into two non-empty subarrays with equal sum, and \\"NO\\" otherwise. In the first test case of the example, the sum of the array is 6, and we can split it into two subarrays [1, 2] and [3] with equal sum. In the second test case of the example, it is not possible to split the array into two subarrays with equal sum.","solution":"def can_divide_into_equal_sum_subarrays(n, a): Returns \\"YES\\" if the array a with length n can be divided into two non-empty subarrays with equal sum, otherwise returns \\"NO\\". total_sum = sum(a) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for num in a: current_sum += num if current_sum == half_sum: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] result = can_divide_into_equal_sum_subarrays(n, a) results.append(result) return results"},{"question":"Given a string of lowercase alphabets, your task is to find the length of the longest substring that contains no repeated characters. For example, given: - \\"abcabcbb\\", the answer is 3, since the longest substring without repeated characters is \\"abc\\". - \\"bbbbb\\", the answer is 1, since the longest substring without repeated characters is \\"b\\". **Input** - The first line contains an integer t, the number of test cases (1 leq t leq 10^3). - Each of the next t lines contains a single string with length n (1 leq n leq 10^5). **Output** - For each test case, output the length of the longest substring without repeated characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): Processes a list of test cases and returns the lengths of the longest substring without repeating characters for each. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given a string s which consists of only lowercase English letters. You are allowed to perform at most one operation where you can replace exactly one character in the string with any other lowercase English letter. The goal is to make the string a palindrome (a string that reads the same forwards and backwards). Determine the minimum number of operations needed to make the string a palindrome. If the string is already a palindrome, print 0. If it\'s impossible to make the string a palindrome with just one character change, print -1. The first line contains a string s (1 leq |s| leq 10^5), where |s| is the length of the string. Output the minimum number of operations (0 or 1), or -1 if it is impossible. Example: Input: \\"abca\\" Output: 1 Input: \\"abcd\\" Output: -1","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations needed to make the string a palindrome. If it is impossible to make the string a palindrome with at most one character change, returns -1. Args: s : str : input string Returns: int : the minimum number of operations (0, 1, or -1) # Check edge case where the string is empty or has only one character if len(s) <= 1: return 0 # Number of mismatches mismatches = 0 n = len(s) # Traverse half the string for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 if mismatches > 1: return -1 # If mismatches is 0 or 1, it means we need 0 or 1 operation respectively return mismatches"},{"question":"In a fictional kingdom, there are k castles connected by n bidirectional roads. Each road connects two distinct castles and can be traversed in both directions. The king wants to ensure that his troops can defend the entire kingdom efficiently by installing communication lines. However, there can only be one direct communication line between any two castles to prevent interference. The king has provided a list of roads and the respective travel time for each road. He wants your help to determine the minimum total travel time required to establish the communication network so that every castle is connected either directly or indirectly through these communication lines. The first line of input contains two integers k and n (2 ≤ k ≤ 100, 1 ≤ n ≤ 4950), where k is the number of castles and n is the number of roads. Each of the next n lines contains three integers u, v, and t (1 ≤ t ≤ 1000), where u and v are the castles connected by the road and t is the travel time of that road. Your task is to output a single integer that represents the minimum total travel time required to connect all the castles. If it is not possible to connect all the castles, print \\"IMPOSSIBLE\\". Example: Input: 4 5 1 2 3 2 3 4 3 4 5 4 1 6 2 4 2 Output: 9 Explanation: The selected roads can be (1, 2), (2, 4), and (3, 4) with a total travel time of 3 + 2 + 4 = 9.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_minimum_spanning_tree(k, n, roads): result = [] i = 0 edges = 0 roads = sorted(roads, key=lambda road: road[2]) parent = [] rank = [] for node in range(k + 1): parent.append(node) rank.append(0) while edges < k - 1: if i >= len(roads): return \\"IMPOSSIBLE\\" u, v, w = roads[i] i += 1 x = find(parent, u) y = find(parent, v) if x != y: edges += 1 result.append(w) union(parent, rank, x, y) return sum(result) def minimum_travel_time(k, n, road_list): roads = [tuple(map(int, road.split())) for road in road_list] return kruskal_minimum_spanning_tree(k, n, roads) # Example usage: k = 4 n = 5 road_list = [ \\"1 2 3\\", \\"2 3 4\\", \\"3 4 5\\", \\"4 1 6\\", \\"2 4 2\\", ] print(minimum_travel_time(k, n, road_list)) # Expected output: 9"},{"question":"You are given a string consisting of lowercase Latin letters. Your task is to determine if it is possible to rearrange the characters in the string such that no two adjacent characters are the same. If it is possible, provide one such rearrangement; otherwise, state that it is impossible. Input: - The input consists of a single line containing a string of length n (1 ≤ n ≤ 10^5), consisting of lowercase Latin letters. Output: - If it is possible to rearrange the characters to satisfy the condition, output the rearranged string. - If it is not possible, print \\"IMPOSSIBLE\\". Examples: Input: ``` aabb ``` Output: ``` abab ``` Input: ``` aaab ``` Output: ``` IMPOSSIBLE ```","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the characters in the string such that no two adjacent characters are the same, if possible. freq = Counter(s) # Max heap based on character frequency max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) result = [] prev_char_count = 0 prev_char = \'\' while max_heap: char_count, char = heapq.heappop(max_heap) result.append(char) # Add the previous char back if it still has count left if prev_char_count < 0: heapq.heappush(max_heap, (prev_char_count, prev_char)) prev_char_count = char_count + 1 prev_char = char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"IMPOSSIBLE\\" return rearranged_string"},{"question":"In a certain village, there lives an avid gardener who loves growing trees. The gardener has planted n trees in a row, where the height of each tree is represented by an array of integers h. Each tree must receive sufficient sunlight to grow taller. The trees are unique in their growth pattern and follow the rule that a tree will grow in height only if it is receiving direct sunlight, i.e., there is no taller tree to its left blocking the sunlight. The gardener wants your help to determine the maximum number of trees that can be selected such that each selected tree receives direct sunlight. You are given an array h of n integers where h_i represents the height of the i-th tree. You need to find the length of the longest subsequence of trees such that each tree in the subsequence is taller than all the trees before it in the subsequence. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of trees. - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000), the heights of the trees. Output: - Print a single integer, the length of the longest subsequence where each tree receives direct sunlight. Example: Input: 7 3 10 2 1 20 4 2 Output: 3 Explanation: The longest subsequence where each tree receives direct sunlight is [3, 10, 20] resulting in a length of 3.","solution":"def max_trees_with_sunlight(n, heights): Returns the length of the longest subsequence of trees such that each tree receives sunlight. if n == 0: return 0 # Dynamic programming table to store the length of the increasing subsequence dp = [1] * n # Traverse the heights array and fill the dp array for i in range(1, n): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest subsequence is the maximum value in dp array return max(dp)"},{"question":"# Problem Statement You are given a set of non-negative integers and a target integer. Your task is to determine whether there exists a subsequence of the given set that adds up to the target integer. A subsequence is a sequence that can be derived from the set by deleting some or no elements without changing the order of the remaining elements. Input The first line contains an integer `n` (1 ≤ n ≤ 100), representing the number of integers in the set. The second line contains `n` non-negative integers separated by spaces, each value ranging from 0 to 1000, representing the set of integers. The third line contains a single integer `target` (0 ≤ target ≤ 10000). Output Output \\"YES\\" if there exists a subsequence of the given set that adds up to the target integer, otherwise output \\"NO\\". Example **Input:** ``` 5 1 2 3 4 5 9 ``` **Output:** ``` YES ``` **Input:** ``` 3 3 34 4 11 ``` **Output:** ``` NO ``` Note In the first example, the subsequence [4, 5] adds up to the target 9, so the answer is \\"YES\\". In the second example, there is no subsequence that adds up to 11, so the answer is \\"NO\\". Implement your solution using any programming language of your choice. Your solution should efficiently handle the given constraints.","solution":"def can_sum_to_target(n, numbers, target): Determines if there is a subsequence of `numbers` that adds up to `target`. Args: n (int): Number of integers in the set. numbers (list of int): The set of non-negative integers. target (int): The target sum. Returns: str: \\"YES\\" if a subsequence with the sum equal to `target` exists, otherwise \\"NO\\". # Define a DP array to store the feasability of each possible sum dp = [False] * (target + 1) dp[0] = True # sum of 0 can always be achieved by taking no elements for num in numbers: # Traverse backwards to avoid overwriting results we need to check for t in range(target, num - 1, -1): if dp[t - num]: dp[t] = True # If dp[target] is True, it means we can form the target sum return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an array of unique integers and a set of operations that can be performed on the array. Your task is to rearrange the elements of the array to form a new array such that each element is greater than the mean of all its preceding elements. Write a program that takes in the following input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of elements in the array. - The second line contains n unique integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 109). If it\'s possible to rearrange the array to satisfy the condition, print \\"YES\\" (without the quotes) followed by the rearranged array in the next line. If there are multiple answers, print any of them. If it\'s not possible to rearrange the array, print \\"NO\\" (without the quotes) in a single line. # Examples Example 1 - **Input:** ``` 5 4 1 3 2 5 ``` - **Output:** ``` YES 1 2 3 4 5 ``` Example 2 - **Input:** ``` 3 1 2 3 ``` - **Output:** ``` YES 1 2 3 ``` Example 3 - **Input:** ``` 2 2 1 ``` - **Output:** ``` NO ```","solution":"def rearrange_array(n, arr): Rearranges the elements of the array such that each element is greater than the mean of all its preceding elements. If possible, returns \\"YES\\" followed by the rearranged array. Otherwise, returns \\"NO\\". # Sort the array to easily check the requirement arr.sort() # Since we need a new element to be greater than the mean of the previous ones, # The minimum element must always be the smallest possible. # If the smallest pairwise mean is not achievable due to the smallest two elements being too close, print \\"NO\\" if n == 2 and arr[0] * 2 >= arr[1]: return \\"NO\\" return \\"YESn\\" + \\" \\".join(map(str, arr))"},{"question":"Given a grid of size n times m, consisting of lowercase English letters, your task is to find the length of the longest path in the grid that forms a valid word. A valid word is defined as a sequence of letters where each letter along the path is adjacent to the previous one either vertically, horizontally, or diagonally. The input consists of the following: - The first line contains two integers n and m (1 leq n, m leq 1000). - Each of the next n lines contains a string of length m, representing the grid. The output should be a single integer, representing the length of the longest valid word that can be constructed. Example: ``` Input: 3 4 abcd efgh ijkl Output: 12 ``` Explanation: One possible longest valid word is \\"a -> b -> c -> d -> h -> l -> k -> g -> f -> e -> i -> j\\". The length of this sequence is 12. There may be other valid sequences of the same length. Note: - The path must contain distinct positions in the grid. - Multiple paths may result in the same maximum length, but you need to return only the length.","solution":"def find_longest_path(n, m, grid): Find the length of the longest path in the grid that forms a valid word. def dfs(x, y, visited): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] max_length = 1 visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: max_length = max(max_length, 1 + dfs(nx, ny, visited)) visited.remove((x, y)) return max_length max_path_length = 1 for i in range(n): for j in range(m): max_path_length = max(max_path_length, dfs(i, j, set())) return max_path_length"},{"question":"Given an array of integers, your task is to rearrange the elements in such a way that they form the lexicographically smallest possible array. If the input array is already the smallest possible lexicographical order, then the next lexicographical permutation should be used instead. For example, if the input array is `[3, 1, 4, 2]`, the smallest lexicographical arrangement is `[1, 2, 3, 4]`. # Input: - The first line of the input contains an integer `n` (1 le n le 1000), the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array a_1, a_2, ldots, a_n (1 le a_i le 10^6). # Output: - Output a single line containing `n` space-separated integers, the elements of the array rearranged in lexicographically smallest order or the next lexicographical permutation if it is already sorted. # Examples: Example 1: # Input: ``` 4 3 1 4 2 ``` # Output: ``` 1 2 3 4 ``` Example 2: # Input: ``` 5 1 2 3 4 5 ``` # Output: ``` 1 2 3 5 4 ``` Example 3: # Input: ``` 3 2 2 1 ``` # Output: ``` 1 2 2 ``` # Explanation: - In Example 1, rearranging the array `[3, 1, 4, 2]` in lexicographical order results in `[1, 2, 3, 4]`. - In Example 2, since the array `[1, 2, 3, 4, 5]` is already in the smallest possible order, the next lexicographical permutation is `[1, 2, 3, 5, 4]`. - In Example 3, rearranging the array `[2, 2, 1]` in smallest lexicographical order results in `[1, 2, 2]`.","solution":"def next_permutation(arr): Generate the next lexicographical permutation for the list `arr`. Args: arr (list): The list of integers. Returns: list: The next lexicographical permutation of the list. # 1. Find the largest index k such that arr[k] < arr[k + 1]. If no such index exists, the permutation is sorted in descending order. k = -1 for i in range(len(arr) - 1): if arr[i] < arr[i + 1]: k = i if k == -1: arr.reverse() return arr # 2. Find the largest index l greater than k such that arr[k] < arr[l] l = -1 for i in range(k + 1, len(arr)): if arr[k] < arr[i]: l = i # 3. Swap the value of arr[k] with that of arr[l] arr[k], arr[l] = arr[l], arr[k] # 4. Reverse the sequence from arr[k + 1] up to and including the final element arr[n] arr[k + 1:] = reversed(arr[k + 1:]) return arr def smallest_or_next_lexicographical_order(arr): Returns the lexicographically smallest order of the array. If the array is already in the smallest possible order, returns the next lexicographical permutation. if arr != sorted(arr): return sorted(arr) else: return next_permutation(arr)"},{"question":"Given an array of integers, you need to determine whether it is possible to partition the array into two non-empty subarrays such that the sum of the elements in each subarray is the same. A subarray is a contiguous part of the original array. Input: A single line containing space-separated integers representing the array. The number of integers in the array will be between 2 and 1000, inclusive. Each integer will be between -10^4 and 10^4, inclusive. Output: Print \'YES\' if you can partition the array into two subarrays with equal sum, otherwise print \'NO\'. Example: Input 1 2 3 4 5 Output NO Example: Input 1 2 3 4 5 5 Output YES Explanation: In the second example, you can partition the array into [1, 2, 3, 4] and [5, 5], where both subarrays have a sum of 10.","solution":"def can_partition(arr): Determines if the array can be partitioned into two subarrays with equal sum. Parameters: arr (list of int): The input array of integers. Returns: str: \'YES\' if the array can be partitioned, \'NO\' otherwise. total_sum = sum(arr) # If the total sum is odd, we cannot partition it into two equal sum subarrays if total_sum % 2 != 0: return \'NO\' half_sum = total_sum // 2 current_sum = 0 # Traverse the array and keep a running sum for num in arr: current_sum += num if current_sum == half_sum: return \'YES\' return \'NO\'"},{"question":"The National Robotics Competition is underway, and the final challenge of the event requires each team\'s robot to navigate a grid-based maze. The grid consists of `n` rows and `m` columns, with certain cells marked as obstacles that the robot cannot traverse. The robot starts at the top-left corner of the grid (1,1) and needs to reach the bottom-right corner (n,m). The robot can only move either right or down at any point in time. Your task is to determine the number of unique paths that the robot can take to reach its destination while avoiding the obstacles. If it\'s not possible for the robot to reach the destination, the number of unique paths should be 0. The grid is represented using a 2D array where cells containing a `1` are obstacles and `0` are free cells. # Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` integers representing the grid where `0` indicates a free cell and `1` indicates an obstacle. # Output Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output ``` 2 ``` In this example, the robot can only move down or right, thus there are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] # Example usage grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid)) # Output: 2"},{"question":"You are given an integer array. For each element in the array, determine the number of elements that are strictly greater than the current element. The first line contains an integer n (1 le n le 2000) – the size of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) – the elements of the array. Print n integers where the ith integer is the count of elements in the array strictly greater than a_i.","solution":"def count_greater_elements(arr): Returns a list where each element is the count of elements in the input array that are strictly greater than the element at that position. n = len(arr) result = [] for i in range(n): count = sum(1 for j in range(n) if arr[j] > arr[i]) result.append(count) return result"},{"question":"You are given an array of integers representing the heights of students in a class. Your task is to find out the maximum number of students that can stand in line such that for every pair of consecutive students, the height of the second one is strictly greater than the first one. Write a program that takes an array of integers as input and prints the length of the longest strictly increasing subsequence (LIS). # Input Format - The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. - The second line contains n integers, representing the heights of the students in the class. # Output Format - Print a single integer, the length of the longest strictly increasing subsequence of students\' heights. # Example Input: 6 10 22 9 33 21 50 Output: 4 # Note In the example, one of the longest strictly increasing subsequences is [10, 22, 33, 50], and its length is 4.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence of heights. if not heights: return 0 n = len(heights) lis = [1] * n for i in range(1, n): for j in range(i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct integers in the array that add up to the target sum. # Input: - The first line contains an integer n (2 leq n leq 100) - the size of the array. - The second line contains n integers separated by spaces representing the elements of the array. Each element is between -10^3 and 10^3 inclusive. - The third line contains a single integer k (-2000 leq k leq 2000) - the target sum. # Output: - Output \\"YES\\" if there exist two distinct integers in the array that sum up to the target, otherwise output \\"NO\\". # Examples: Example 1: **Input:** ``` 5 10 15 3 7 17 ``` **Output:** ``` YES ``` **Explanation:** Here, the integers 10 and 7 add up to the target sum 17. Example 2: **Input:** ``` 4 1 2 3 4 8 ``` **Output:** ``` NO ``` **Explanation:** None of the two distinct integers add up to the target sum 8. # Hint: - You can use a hash set to track the elements you have visited so far and check if the (target sum - current element) is present in the set to find a pair in O(n) time complexity.","solution":"def two_sum_exists(arr, k): Determine if there exist two distinct integers in the array that add up to the target sum k. Parameters: arr (list): List of integers k (int): Target sum Returns: str: \\"YES\\" if there exist two distinct integers in the array that sum to k, otherwise \\"NO\\" seen = set() for number in arr: if (k - number) in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"You are given a network with `n` nodes, labelled from `0` to `n-1`. Each node contains some value and can only be directly connected to its adjacent nodes. A direct connection means there is an edge with a weight assigned to it. You are also given `q` queries. Each query can be one of the following types: 1. **Query Type 1**: Change the value of a node. 2. **Query Type 2**: Calculate and return the sum of edge weights in the shortest path between two given nodes. # Input - The first line contains an integer `n` (2 ≤ n ≤ 10^5), denoting the number of nodes in the network. - The second line contains `n-1` integers representing the edge weights between the nodes: the i-th integer denotes the weight of the edge between node `i` and node `i+1`. - The third line contains `n` integers, where the i-th integer represents the value of the node `i`. - The fourth line contains an integer `q` (1 ≤ q ≤ 10^5), denoting the number of queries. - The following `q` lines contain queries. Each query can be: - Type: `1 u v`, where `1` denotes that the value of node `u` should be changed to `v`. - Type: `2 x y`, where `2` denotes that you should find the sum of edge weights in the shortest path between nodes `x` and `y`. # Output For each query of type `2`, output a single integer representing the sum of edge weights in the shortest path between the two given nodes. # Example Input: ``` 5 4 2 7 3 5 1 8 6 2 3 2 0 4 1 2 10 2 1 3 ``` Output: ``` 16 9 ``` Note: In the first query `[2 0 4]`, the shortest path between nodes `0` and `4` involves the edges (0,1), (1,2), (2,3), and (3,4) which have the weights `4 + 2 + 7 + 3 = 16`. In the second query `[1 2 10]`, the value of node `2` is changed to `10`. In the third query `[2 1 3]`, the shortest path between nodes `1` and `3` involves the edges (1,2) and (2,3) which have the weights `2 + 7 = 9`.","solution":"def process_queries(n, edge_weights, node_values, queries): from sys import stdin, stdout import itertools edge_weights_prefix_sum = list(itertools.accumulate(edge_weights)) def update_node_value(u, v): node_values[u] = v def sum_of_weights_between(x, y): if x > y: x, y = y, x return edge_weights_prefix_sum[y-1] - (edge_weights_prefix_sum[x-1] if x > 0 else 0) results = [] for query in queries: t, u, v = query if t == 1: update_node_value(u, v) elif t == 2: result = sum_of_weights_between(u, v) results.append(result) return results"},{"question":"The King loves to collect rare gemstones. He has an array containing n gemstones, where each gemstone is represented as a positive integer that depicts its rarity level. The King wants to arrange his gemstones such that for any two gemstones A and B (where A comes before B in the array), the absolute difference between their rarity levels is at most k. Help the King by checking if it\'s possible to sort the array in such a manner. If it is possible, return \\"Yes\\", otherwise return \\"No\\". The first line contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ 109) — the number of gemstones and the permissible maximum difference in rarity level between consecutive gemstones after sorting. The second line contains n positive integers not exceeding 109 — the rarity levels of the gemstones. On a single line, print \\"Yes\\" if it is possible to sort the array as described, otherwise print \\"No\\". For example, for an array of gemstones with rarity levels [1, 5, 3, 7] and a k value of 4, it is possible to rearrange the array to [1, 3, 5, 7], where the absolute difference between any two consecutive gemstones does not exceed 4. In another example, for an array of gemstones with rarity levels [1, 10, 20] and a k value of 5, it is not possible to sort the array to meet the condition.","solution":"def can_sort_gemstones(n, k, rarity_levels): Determines if the given gemstones can be sorted such that the absolute difference between successive elements is at most k. Args: n : int : The number of gemstones. k : int : The maximum allowable difference in rarity levels. rarity_levels : list of int : The rarity levels of the gemstones. Returns: str : \\"Yes\\" if the array can be sorted as described, otherwise \\"No\\". rarity_levels.sort() # Sort the array first for i in range(1, n): if rarity_levels[i] - rarity_levels[i - 1] > k: return \\"No\\" return \\"Yes\\""},{"question":"In an ancient city, the local historian has discovered a fragmented set of inscriptions on stone tablets. Each tablet contains a sequence of lowercase English letters, but some characters are missing and replaced with the \\"_\\" symbol. The historian believes that by inserting letters in place of \\"_\\" in each tablet\'s sequence, they could form meaningful words listed in the city\'s dictionary. The historian\'s goal is to determine how many possible words can be formed for each tablet sequence using the dictionary. You are given an original list of words used in the ancient city (the dictionary) and several fragmented sequences (the inscriptions). You need to find out how many words from the dictionary can be generated from each fragmented sequence by filling in the \\"_\\" positions with letters. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of words in the dictionary. - The next `n` lines contain one word each, all consisting of lowercase English letters. - The next line contains an integer `m` (1 ≤ m ≤ 100), the number of fragmented sequences. - The next `m` lines contain one fragmented sequence each, with lowercase English letters and \\"_\\" symbols. # Output: For each fragmented sequence, output the number of words from the dictionary that can match the sequence by replacing the \\"_\\" with appropriate letters. # Example: Input: ``` 5 alpha beta gamma delta theta 3 a__ha b_ta __mma ``` Output: ``` 1 1 1 ``` Explanation: - For the first fragmented sequence \\"a__ha\\", there is only one word \\"alpha\\" in the dictionary that can be formed. - For the second fragmented sequence \\"b_ta\\", there is only one word \\"beta\\" in the dictionary that can be formed. - For the third fragmented sequence \\"__mma\\", there is only one word \\"gamma\\" in the dictionary that can be formed.","solution":"def count_matching_words(dictionary, fragment): Counts how many words from the dictionary can match the fragmented sequence by replacing underscores. def matches(word, fragment): if len(word) != len(fragment): return False for w_char, f_char in zip(word, fragment): if f_char != \'_\' and w_char != f_char: return False return True return sum(1 for word in dictionary if matches(word, fragment)) def solve(n, dictionary, m, fragments): results = [] for fragment in fragments: results.append(count_matching_words(dictionary, fragment)) return results"},{"question":"You are given a sequence of integers nums and an integer target. Your task is to find whether there exists two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. If such indices exist, return the indices as a tuple (i, j), otherwise return an empty tuple. The first line contains integer n (2 ≤ n ≤ 10^5), the size of the array. The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array. The third line contains the integer target (1 ≤ target ≤ 2 * 10^9). You need to output the indices as a tuple in the format (i, j) where i < j, or an empty tuple if no such indices exist. # Example: Input: ``` 4 2 7 11 15 9 ``` Output: ``` (0, 1) ``` Explanation: `nums[0] + nums[1] = 2 + 7 = 9`, which is equal to the target.","solution":"def find_two_sum_indices(nums, target): Finds two distinct indices i and j such that nums[i] + nums[j] == target. Returns the indices as a tuple (i, j), otherwise returns an empty tuple. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"You are given a string s consisting of lowercase English letters, and you need to check how many times you can spell the word \\"balloon\\" using the letters from the string. Each letter in the input string can only be used once in each instance of spelling \\"balloon\\". For example, if you are given the string \\"balloonballoonxballoon\\", you would be able to spell \\"balloon\\" three times. Write a function `count_balloon_instances(s: str) -> int` that takes a string s as input and returns the number of times you can spell \\"balloon\\". # Function Signature ```python def count_balloon_instances(s: str) -> int: ``` # Input - A single string s (1 leq |s| leq 104) consisting of lowercase English letters only. # Output - An integer representing the number of times the word \\"balloon\\" can be spelled using the letters in the input string. # Example ```python assert count_balloon_instances(\\"loonbalxballpoon\\") == 2 assert count_balloon_instances(\\"balon\\") == 0 assert count_balloon_instances(\\"baalloonnloollblanoon\\") == 2 ``` # Explanation 1. In the first example, the string \\"loonbalxballpoon\\" contains the letters required to spell \\"balloon\\" twice. 2. In the second example, there are not enough letters to spell \\"balloon\\" even once. 3. In the third example, the string contains exactly enough letters to spell \\"balloon\\" twice.","solution":"def count_balloon_instances(s: str) -> int: from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Counting the frequencies of characters needed to spell \'balloon\' b_count = char_count[\'b\'] a_count = char_count[\'a\'] l_count = char_count[\'l\'] // 2 # \'l\' appears twice in \'balloon\' o_count = char_count[\'o\'] // 2 # \'o\' appears twice in \'balloon\' n_count = char_count[\'n\'] # The number of times \'balloon\' can be spelled is determined by the limiting character return min(b_count, a_count, l_count, o_count, n_count)"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears exactly once. Your task is to find this single element using linear time complexity and constant extra space. The first line contains an integer n (2 ≤ n ≤ 3 * 10^4), the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 10^5), the elements of the array separated by spaces. Output the single element that appears only once in the array. # Example Input: 7 4 1 2 1 2 4 3 Output: 3","solution":"def find_single_element(arr): Given an array of integers where each element appears exactly twice, except for one element which appears exactly once, find the single element using linear time complexity and constant extra space. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a grid with obstacles and you need to find the shortest path from the top-left corner to the bottom-right corner, moving only up, down, left, or right. You are also allowed to remove up to one obstacle. The grid is represented by an `m x n` binary matrix `grid` where `1` represents an obstacle, and `0` represents an open space. Write a function `findShortestPath` that takes in the grid and returns the length of the shortest path from the top-left corner to the bottom-right corner, after potentially removing up to one obstacle. If there is no valid path, return `-1`. The path length is the number of cells visited including the starting and ending cells. Your function should have the following signature: ```python def findShortestPath(grid: List[List[int]]) -> int: pass ``` # Input: - A binary matrix `grid` where `1 <= len(grid), len(grid[0]) <= 100`. # Output: - A single integer representing the length of the shortest path or `-1` if no valid path exists. # Example: ```python grid = [ [0, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 0] ] print(findShortestPath(grid)) # Output: 9 grid = [ [0, 1, 1], [1, 1, 1], [1, 1, 0] ] print(findShortestPath(grid)) # Output: -1 ``` # Constraints: - You are allowed to remove at most one obstacle (`1` becomes `0`) to find the shortest path. - If there are multiple shortest paths, returning any one of them is acceptable. - The function should be optimized for large grid sizes and efficiently handle the constraints.","solution":"from typing import List, Tuple from collections import deque def findShortestPath(grid: List[List[int]]) -> int: directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] m, n = len(grid), len(grid[0]) if m == 1 and n == 1: return 1 def bfs(allow_obstacle_removal: bool) -> int: queue = deque([(0, 0, allow_obstacle_removal, 1)]) visited = set((0, 0, allow_obstacle_removal)) while queue: x, y, can_remove, d = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: if nx == m - 1 and ny == n - 1: return d + 1 if (nx, ny, can_remove) not in visited: if grid[nx][ny] == 0: queue.append((nx, ny, can_remove, d + 1)) visited.add((nx, ny, can_remove)) elif grid[nx][ny] == 1 and can_remove: queue.append((nx, ny, False, d + 1)) visited.add((nx, ny, False)) return -1 return bfs(True)"},{"question":"You are given a convex polygon with n vertices. A convex polygon is defined as a polygon where all interior angles are less than 180 degrees, and each line segment between two vertices is inside or on the boundary of the polygon. The vertices are given in clockwise order. Your task is to determine if a given point P lies inside the convex polygon, on the boundary, or outside the polygon. The first line of input contains an integer n (3 ≤ n ≤ 10^5), representing the number of vertices. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) that describe the coordinates of each vertex of the polygon. The last line contains two integers px and py, which represent the coordinates of the point P. Output \\"INSIDE\\" if the point P lies inside the polygon, \\"BOUNDARY\\" if it lies exactly on the boundary of the polygon, and \\"OUTSIDE\\" if it lies outside the polygon. Input: ``` 5 0 0 4 0 4 4 0 4 -1 2 2 2 ``` Output: ``` INSIDE ``` Input: ``` 4 1 1 3 1 3 3 1 3 4 4 ``` Output: ``` OUTSIDE ``` Input: ``` 4 0 0 5 0 5 5 0 5 0 3 ``` Output: ``` BOUNDARY ```","solution":"def is_point_in_polygon(vertices, point): def on_segment(p, q, r): Check if point q lies on segment pr if (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1])): return True return False def orientation(p, q, r): Return the orientation of the triplet (p, q, r). 0 -> p, q and r are collinear 1 -> Clockwise 2 -> Counterclockwise val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]) if val == 0: return 0 return 1 if val > 0 else 2 def intersect(p1, q1, p2, q2): Check if line segment p1q1 and p2q2 intersect o1 = orientation(p1, q1, p2) o2 = orientation(p1, q1, q2) o3 = orientation(p2, q2, p1) o4 = orientation(p2, q2, q1) if o1 != o2 and o3 != o4: return True if o1 == 0 and on_segment(p1, p2, q1): return True if o2 == 0 and on_segment(p1, q2, q1): return True if o3 == 0 and on_segment(p2, p1, q2): return True if o4 == 0 and on_segment(p2, q1, q2): return True return False n = len(vertices) if n < 3: return \\"OUTSIDE\\" extreme = (10**10, point[1]) count = i = 0 while True: next = (i + 1) % n if intersect(vertices[i], vertices[next], point, extreme): if orientation(vertices[i], point, vertices[next]) == 0: return \\"BOUNDARY\\" if on_segment(vertices[i], point, vertices[next]) else \\"OUTSIDE\\" count += 1 i = next if i == 0: break return \\"INSIDE\\" if count % 2 == 1 else \\"OUTSIDE\\" def determine_point_status(n, vertices, point): return is_point_in_polygon(vertices, point)"},{"question":"Given a directed graph with n nodes and m edges, find the number of distinct paths from node 1 to node n. Assume that the paths are allowed to revisit the same node multiple times and that a path is considered distinct if the sequence of nodes it visits is different. The first line contains two integers n and m (1 leq n leq 100, 0 leq m leq 1000) — the number of nodes and the number of edges respectively. Each of the next m lines contains two integers u and v (1 leq u, v leq n) — an edge from node u to node v. Print the number of distinct paths from node 1 to node n. Since the number of distinct paths could be very large, print the answer modulo 10^9 + 7. # Example **Input:** ``` 4 4 1 2 2 3 3 4 2 4 ``` **Output:** ``` 2 ``` **Explanation:** There are two distinct paths from node 1 to node 4: 1 -> 2 -> 4 and 1 -> 2 -> 3 -> 4.","solution":"MOD = 10**9 + 7 def count_paths(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs_paths_count(start, end): path_count = [0] * (n + 1) path_count[start] = 1 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if path_count[neighbor] == 0: queue.append(neighbor) path_count[neighbor] = (path_count[neighbor] + path_count[node]) % MOD return path_count[end] return bfs_paths_count(1, n)"},{"question":"Given an array of n positive integers, find if there exists a subset of these integers whose sum is equal to a given integer k. The first line of the input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 1000). The second line contains n positive integers, each at most 100. Output \\"YES\\" if there exists a subset of the array with sum equal to k, otherwise output \\"NO\\".","solution":"def subset_sum(n, k, array): Determine if there exists a subset of the given array of integers such that the sum of the subset is equal to k. Parameters: n (int): The number of elements in the array. k (int): The target sum. array (List[int]): List of positive integers. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". dp = [False] * (k + 1) dp[0] = True for num in array: for j in range(k, num - 1, -1): if dp[j - num]: dp[j] = True return \\"YES\\" if dp[k] else \\"NO\\""},{"question":"You are given a grid with n rows and m columns. Each cell in the grid has a certain number of points. You start at the top-left corner of the grid (cell (1,1)) and want to reach the bottom-right corner (cell (n,m)). The rules of movement are as follows: 1. You can move to the right cell (i, j+1). 2. You can move to the bottom cell (i+1, j). 3. You can move diagonally (i+1, j+1). You need to collect the maximum number of points by the time you reach the bottom-right corner of the grid. The first line of input contains two integers n and m (1 le n, m le 1000), representing the number of rows and columns in the grid respectively. The following n lines each contain m integers, where the j-th integer in the i-th line represents the number of points in cell (i, j). Print one integer — the maximum number of points you can collect by the time you reach the bottom-right corner. # Example Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` Explanation: The maximum points you can collect along the path are: 1 → 3 → 5 → 2 → 1 = 12 points.","solution":"def max_points(grid): Finds the maximum points that can be collected in a grid moving from top-left to bottom-right. :param grid: List of lists of integers where each integer represents points in the cell. :return: Integer, maximum points can be collected. n = len(grid) m = len(grid[0]) # Create a DP table to store the max points at each cell dp = [[0]*m for _ in range(n)] # Initialize the starting position dp[0][0] = grid[0][0] # Fill the top row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the leftmost column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j] # The result is in the bottom-right cell return dp[n-1][m-1]"},{"question":"Given a word, you need to determine if it is possible to rearrange the letters of the word to create a palindrome. A palindrome is a word that reads the same forwards and backwards. For example, for the word \\"civic\\", this is already a palindrome, so the answer is \\"YES\\". For the word \\"ivicc\\", it is possible to rearrange the letters to form \\"civic\\", so the answer is \\"YES\\". However, for the word \\"hello\\", it is not possible to rearrange the letters to form a palindrome, so the answer is \\"NO\\". You need to write a function `is_palindrome_rearrangement` that takes a single string as input and returns \\"YES\\" if it is possible to rearrange the letters to form a palindrome, otherwise returns \\"NO\\". **Input:** - A single string `word` where each letter is a lowercase English alphabet (`a`-`z`). The length of the string is between `1` and `10^5`. **Output:** - A single string \\"YES\\" or \\"NO\\". **Examples:** ```python is_palindrome_rearrangement(\\"civic\\") # Output: \\"YES\\" is_palindrome_rearrangement(\\"ivicc\\") # Output: \\"YES\\" is_palindrome_rearrangement(\\"hello\\") # Output: \\"NO\\" is_palindrome_rearrangement(\\"aabb\\") # Output: \\"YES\\" is_palindrome_rearrangement(\\"abc\\") # Output: \\"NO\\" ``` **Constraints:** - You should aim for a solution with linear time complexity relative to the length of the input string. - Think about the frequency of each character and how it impacts the possibility of forming a palindrome.","solution":"from collections import Counter def is_palindrome_rearrangement(word): Determines if the given word can be rearranged to form a palindrome. Args: - word (str): The input word to be analyzed. Returns: - str: \\"YES\\" if it is possible to rearrange the letters to form a palindrome, otherwise \\"NO\\". counter = Counter(word) odd_count = sum(1 for count in counter.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a n × n grid of characters, where each character represents a type of terrain (e.g., water, forest, mountain). Your task is to determine the number of distinct connected regions of the same terrain type. A region is defined as a group of adjacent cells of the same terrain type. Two cells are considered adjacent if they share a side (left, right, up, or down). The first line contains an integer n (1 ≤ n ≤ 50), representing the size of the grid. The next n lines contain n characters each, where each character is an uppercase Latin letter representing a terrain type. Output the number of distinct connected regions of the same terrain type. # Example Input ``` 4 AAAA ABBB ACCC DDDD ``` Output ``` 4 ```","solution":"def num_of_regions(n, grid): Returns the number of distinct connected regions of the same terrain type in a n x n grid. def dfs(i, j, terrain): if i < 0 or j < 0 or i >= n or j >= n or visited[i][j] or grid[i][j] != terrain: return visited[i][j] = True dfs(i-1, j, terrain) dfs(i+1, j, terrain) dfs(i, j-1, terrain) dfs(i, j+1, terrain) visited = [[False]*n for _ in range(n)] region_count = 0 for i in range(n): for j in range(n): if not visited[i][j]: region_count += 1 dfs(i, j, grid[i][j]) return region_count"},{"question":"A sequence of integers is called beautiful if it follows two rules: 1. The absolute difference between any two adjacent elements is 1. 2. No two adjacent elements are the same. Given a sequence of integers, determine if it is beautiful or not. Input: - The first line contains an integer `n` representing the length of the sequence (1 ≤ n ≤ 10^5). - The second line contains `n` integers representing the sequence elements (each element `a_i` falls in the range of -10^9 to 10^9). Output: - Print \\"Beautiful\\" if the sequence satisfies both conditions. - Print \\"Not Beautiful\\" otherwise. Example: ``` Input: 5 2 1 2 3 2 Output: Beautiful ```","solution":"def is_beautiful_sequence(sequence): Determine if a sequence of integers is beautiful. A sequence is beautiful if: 1. The absolute difference between any two adjacent elements is 1. 2. No two adjacent elements are the same. Parameters: sequence (list of int): The sequence of integers. Returns: str: \\"Beautiful\\" if the sequence is beautiful, \\"Not Beautiful\\" otherwise. n = len(sequence) for i in range(1, n): if abs(sequence[i] - sequence[i - 1]) != 1 or sequence[i] == sequence[i - 1]: return \\"Not Beautiful\\" return \\"Beautiful\\""},{"question":"Alice is designing a new data structure to efficiently store and manage a collection of intervals on a number line. An interval is defined by two integers, the start and end points, where the start point is always less than or equal to the end point. She wants to implement a function that merges all overlapping intervals and returns a list of the merged intervals. Two intervals [a, b] and [c, d] are considered overlapping if b ≥ c and a ≤ d. The merged interval of overlapping intervals is the smallest interval that covers all the points covered by these intervals. Write a function that takes a list of intervals and returns a new list of merged intervals sorted by their start points. The input consists of a list of intervals, where each interval is represented as a list of two integers [start, end]. The function should be able to handle an input list with up to 10,000 intervals. Function Signature: ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: pass ``` Example: ```python merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) ``` Output: ```python [[1, 6], [8, 10], [15, 18]] ``` Example: ```python merge_intervals([[1, 4], [4, 5]]) ``` Output: ```python [[1, 5]] ```","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: if not intervals: return [] # Sort intervals by their start points intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or current interval does not overlap with previous, add it to the list if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, merge the current interval with the previous one merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"You are tasked with developing a new application for a library to manage book loans. In this system, each book has a unique identifier (an integer), a title, and an author. A book can be borrowed by a single user at a time, and each user can borrow multiple books, but only once per book. Each user is identified by a unique username (a string). Your task is to implement a function `find_borrowed_books` that determines which books are borrowed by each user after a series of transactions. Each transaction is either a \\"borrow\\" or \\"return\\" action, and it affects the book\'s status in the library. - A \\"borrow\\" transaction includes the username of the user borrowing the book and the book\'s identifier. - A \\"return\\" transaction only includes the book\'s identifier and signifies the book is returned to the library. The function should identify all books each user currently has borrowed after executing all transactions. # Input Specifications - The first line contains an integer `t`, the number of transactions (`1 <= t <= 10^5`). - The next `t` lines each describe a transaction in one of the following two formats: - `\\"borrow <username> <book_id>\\"` for a borrowing transaction - `\\"return <book_id>\\"` for a returning transaction - Book identifiers are integers in the range `1` to `10^6`. - The usernames are strings consisting of lowercase English letters and digits, with a maximum length of `20`. # Output Specifications - For each user who has borrowed at least one book, output a list where each element is a tuple containing the username and a list of identifiers of the books they have borrowed, sorted in ascending order by identifiers. # Function Signature ```python def find_borrowed_books(transactions: List[str]) -> List[Tuple[str, List[int]]]: ``` # Example ```python transactions = [ \\"borrow alice 1\\", \\"borrow bob 2\\", \\"borrow alice 3\\", \\"return 1\\", \\"borrow charlie 4\\", \\"borrow alice 5\\", \\"return 3\\" ] print(find_borrowed_books(transactions)) ``` # Expected Output ```python [ (\\"alice\\", [5]), (\\"bob\\", [2]), (\\"charlie\\", [4]) ] ```","solution":"from typing import List, Tuple def find_borrowed_books(transactions: List[str]) -> List[Tuple[str, List[int]]]: borrow_records = {} current_borrowers = {} for transaction in transactions: parts = transaction.split() action = parts[0] if action == \\"borrow\\": username = parts[1] book_id = int(parts[2]) if book_id in current_borrowers: # If the book is already borrowed, skip this transaction continue if username not in borrow_records: borrow_records[username] = set() borrow_records[username].add(book_id) current_borrowers[book_id] = username elif action == \\"return\\": book_id = int(parts[1]) if book_id in current_borrowers: borrower = current_borrowers[book_id] borrow_records[borrower].remove(book_id) if not borrow_records[borrower]: del borrow_records[borrower] del current_borrowers[book_id] result = [(user, sorted(list(book_ids))) for user, book_ids in borrow_records.items()] result.sort() return result"},{"question":"A group of friends is planning to go on a treasure hunt. They have a map that shows several possible starting points, each identified by its unique index. Each starting point also has a maximum duration limit for the hunters to reach the treasure from there. To reach the treasure, they must pass through a series of checkpoints. Each checkpoint has a certain duration limit for the friends to pass through it. The friends must follow a rule that the duration to pass through a checkpoint must not exceed the specified limit for that checkpoint, otherwise the attempt fails. You need to determine the maximum amount of time they can spend traveling from a starting point through all the checkpoints to reach the treasure without failing the attempt. If it\'s not possible to reach the treasure from any starting point, print -1. Input: - The first line of the input contains an integer m (1 ≤ m ≤ 105) — the number of possible starting points. - The second line contains m integers representing the maximum duration limits for each starting point. - The third line contains an integer k (1 ≤ k ≤ 105) — the number of checkpoints. - The fourth line contains k integers representing the duration limits for each checkpoint. Output: - Print a single integer — the maximum amount of time they can spend traveling from a starting point through all the checkpoints to reach the treasure. If it is not possible from any starting point, print -1. Example: Input: 3 8 10 5 4 2 2 2 2 Output: 8 Explanation: For the given input, the duration limits for reaching the treasure from each starting point are 8, 10, and 5 respectively. The duration limit per checkpoint is given as 2, 2, 2, 2. The starting point that allows the highest maximum travel time while adhering to the checkpoint duration limits is the one with a maximum duration of 8.","solution":"def max_travel_duration(m, start_points, k, checkpoints): max_start_limit = max(start_points) checkpoints_duration_sum = sum(checkpoints) if checkpoints_duration_sum > max_start_limit: return -1 max_possible_time = min(max_start_limit, checkpoints_duration_sum) return max_possible_time"},{"question":"A warehouse stores several types of items, categorized by item codes. Each item in the warehouse is identified uniquely by an item code. There are several queries that need to be performed on the inventory system to either increase the stock of an item, decrease the stock of an item, or check the availability of an item at any given moment. You are required to implement the inventory system that supports the following operations: 1. `add x y` - Add `y` items to the stock of the item with code `x`. If item `x` does not exist in the inventory, it should be added with the given stock `y`. 2. `remove x y` - Remove `y` items from the stock of the item with code `x`. If the item has fewer than `y` items in stock, remove all items of that code and the stock of that item should become 0. 3. `check x` - Return the current stock of the item with code `x`. If the item doesn\'t exist, return 0. The first line of input contains an integer `q` (1 leq q leq 100,000) - the number of queries. Each of the next `q` lines represents a query in the format described above. Item codes `x` and stock values `y` are integers and both fall within the range 1 leq x, y leq 10^9. Print the result of each `check` query on a new line. For example, if the input is: ``` 7 add 101 5 add 102 10 check 101 remove 101 3 check 101 remove 101 4 check 101 ``` The output should be: ``` 5 2 0 ```","solution":"class Inventory: def __init__(self): self.stock = {} def add(self, x, y): if x in self.stock: self.stock[x] += y else: self.stock[x] = y def remove(self, x, y): if x in self.stock: if self.stock[x] <= y: self.stock[x] = 0 else: self.stock[x] -= y def check(self, x): return self.stock.get(x, 0) def inventory_system(queries): inventory = Inventory() results = [] for query in queries: parts = query.split() cmd = parts[0] x = int(parts[1]) if cmd == \\"add\\": y = int(parts[2]) inventory.add(x, y) elif cmd == \\"remove\\": y = int(parts[2]) inventory.remove(x, y) elif cmd == \\"check\\": results.append(inventory.check(x)) return results"},{"question":"You are given an undirected graph with `n` nodes (numbered from 1 to n) and `m` edges. Analyze the following scenario: A graph is called **cyclic** if there exists at least one cycle in it. A cycle is a path of edges and nodes wherein a node is reachable from itself. Your task is to determine if the graph is cyclic. If it is cyclic, print \\"YES\\". Otherwise, print \\"NO\\". The input consists of: - A single integer `n` (1 ≤ n ≤ 1000) — the number of nodes. - A single integer `m` (0 ≤ m ≤ 1000) — the number of edges. - `m` lines, each containing two integers `u` and `v` (1 ≤ u, v ≤ n) — the endpoints of an edge. The output should be a single word: \\"YES\\" if the graph contains a cycle, and \\"NO\\" otherwise. Example: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` YES ``` Input: ``` 3 2 1 2 2 3 ``` Output: ``` NO ```","solution":"def is_cyclic(n, m, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"In a distant future, a new kind of transportation network has emerged in TechCity. This network consists of n teleportation towers connected by m bidirectional teleportation links. Each link allows instant travel between two towers. Towers are numbered from 1 to n, and teleportation links are defined by pairs of tower indices. The Teleportation Department wants to ensure that the network is resilient. A network is considered resilient if there is still a path between any pair of towers even after any single teleportation link is removed. Your task is to determine if the network is resilient given its current configuration. The first line contains two integers n and m (1 le n le 10^5, 0 le m le 2 times 10^5) — the number of towers and the number of teleportation links. Next m lines each contain two integers u and v (1 le u, v le n, u neq v) — representing a bidirectional teleportation link between towers u and v. Print \\"YES\\" if the network is resilient and \\"NO\\" otherwise. # Example **Input:** ``` 5 5 1 2 2 3 3 4 4 5 1 5 ``` **Output:** ``` YES ``` **Input:** ``` 5 4 1 2 2 3 3 4 4 5 ``` **Output:** ``` NO ``` In the first example, the network remains connected even if any single teleportation link is removed. In the second example, the network would be disconnected if the link between towers 3 and 4 is removed.","solution":"from collections import defaultdict import sys sys.setrecursionlimit(10**6) def is_resilient(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) discovery = [-1] * (n + 1) low = [-1] * (n + 1) parent = [-1] * (n + 1) time = 0 bridges = [] def dfs(u): nonlocal time discovery[u] = low[u] = time time += 1 for v in graph[u]: if discovery[v] == -1: parent[v] = u dfs(v) low[u] = min(low[u], low[v]) if low[v] > discovery[u]: bridges.append((u, v)) elif v != parent[u]: low[u] = min(low[u], discovery[v]) for i in range(1, n + 1): if discovery[i] == -1: dfs(i) return \\"NO\\" if bridges else \\"YES\\""},{"question":"In an urban planning simulation, you are tasked with designing a network of bike paths that connect all parks in a city. Each pair of parks should have a unique, directly connected bike path. To ensure safety and efficiency, the bike paths will only intersect at their endpoints (i.e., parks). You are given a list of parks and a list of possible paths that can connect these parks, along with the distance of each path. Your job is to find the minimum total distance needed to connect all parks such that each park is reachable from any other park. You need to implement a function that receives: 1. `n`: an integer representing the number of parks (1 ≤ n ≤ 1000). 2. `paths`: a list of tuples where each tuple contains three integers `(u, v, d)` representing a path between parks `u` and `v` (1 ≤ u, v ≤ n) with distance `d` (1 ≤ d ≤ 10^6). The function should return the minimum total distance required to connect all parks. If it is not possible to connect all parks, return \\"Impossible\\". Example: ```python def minimum_bike_path_distance(n, paths): # Your code here # Example input n = 4 paths = [ (1, 2, 4), (1, 3, 3), (2, 3, 2), (3, 4, 5), (2, 4, 7) ] # Example function call print(minimum_bike_path_distance(n, paths)) # Output: 10 ``` Explanation: - Parks and paths can be represented as nodes and edges in a graph. - Use concepts such as graph traversal and minimum spanning tree algorithms (like Kruskal\'s or Prim\'s algorithm) to find a solution. - Ensure the graph remains connected while keeping the total path distance minimized.","solution":"def minimum_bike_path_distance(n, paths): Returns the minimum total distance required to connect all parks. If it is not possible to connect all parks, returns \\"Impossible\\". parent = list(range(n + 1)) # Union-find structure def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Sort the paths by distance paths.sort(key=lambda x: x[2]) total_distance = 0 edges_used = 0 for u, v, d in paths: if find(u) != find(v): union(u, v) total_distance += d edges_used += 1 if edges_used == n - 1: # Minimum spanning tree is completed break # Check if all parks are connected root_set = set(find(i) for i in range(1, n + 1)) if len(root_set) == 1: return total_distance else: return \\"Impossible\\""},{"question":"[Packing Rectangles]: Alex likes to collect various types of rectangular tiles. He has a collection of rectangles of size a times b and he wants to create larger rectangles of size n times m using the smaller tiles. Alex can rotate the tiles, so he can use them either in their original orientation or rotated by 90 degrees. He wants to find out in how many different ways he can organize the smaller rectangles to completely fill the larger rectangle. The tiles cannot be cut or overlap with each other. Note: Two arrangements are considered different if at least one tile is placed in a different position or rotated differently. Write a function to determine the number of distinct tiling configurations to completely fill a larger rectangle of size n times m using smaller rectangles of size a times b. The input consists of four integers n, m, a, and b (1 le n, m, a, b le 100). Print one integer, the number of distinct ways to fill the large rectangle. # Input: - An integer n, the height of the larger rectangle. - An integer m, the width of the larger rectangle. - An integer a, the height of the smaller rectangle. - An integer b, the width of the smaller rectangle. # Output: - One integer, the number of distinct ways to fill the large rectangle. # Example: Input: ``` 4 4 2 2 ``` Output: ``` 2 ``` In this example, there are two ways to arrange the 2x2 tiles to completely fill the 4x4 rectangle.","solution":"def count_ways_to_fill(n, m, a, b): Count the number of distinct ways to fill an n x m rectangle using a x b tiles. Arguments: n -- height of the larger rectangle. m -- width of the larger rectangle. a -- height of the smaller rectangle. b -- width of the smaller rectangle. Returns: The number of distinct ways to tile the larger rectangle. count = 0 # Case 1: Tiles placed in the same orientation (a x b) if n % a == 0 and m % b == 0: count += 1 # Case 2: Tiles placed in the 90 degrees rotated orientation (b x a) if n % b == 0 and m % a == 0: count += 1 return count"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct integers in the array whose sum is equal to the target sum. Write a function `has_pair_with_sum(arr, target)` that takes in an array of integers `arr` and an integer `target`, and returns `True` if there are two distinct integers in the array that add up to the target sum, and `False` otherwise. You may assume that the input array does not contain duplicate integers. Example 1: ``` Input: arr = [2, 7, 11, 15], target = 9 Output: True Explanation: 2 + 7 = 9 ``` Example 2: ``` Input: arr = [1, 2, 3, 4, 5], target = 10 Output: False Explanation: There are no two integers that add up to 10 ``` Example 3: ``` Input: arr = [-1, 0, 3, 5, 10], target = 4 Output: True Explanation: -1 + 5 = 4 ``` Constraints: - The array will have at least 2 integers and at most 10^5 integers. - The integers in the array are in the range -10^9 to 10^9. - The target sum is in the range -10^9 to 10^9. Hint: Use a set to keep track of the numbers required to reach the target sum as you iterate through the array.","solution":"def has_pair_with_sum(arr, target): Returns True if there are two distinct integers in the array that add up to the target sum, else returns False. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"A critical terminal in a spaceship has a control panel consisting of a grid of buttons. Each button can either be \'0\' (inactive) or \'1\' (active). The spaceship is currently in a default state where all buttons are \'0\'. However, your task is to activate a specific set of buttons to achieve a desired pattern provided as input. You are given an `n x m` grid representing the desired pattern, with \'0\'s representing inactive buttons and \'1\'s representing active buttons. You need to implement a function to return a sequence of commands to achieve this pattern. A command is represented as a tuple (i, j) which means the button at the i-th row and j-th column needs to be toggled (switch its state from \'0\' to \'1\' or from \'1\' to \'0\'). You may assume that initially all buttons are \'0\'. Your task is to find the minimum number of commands required to achieve the desired pattern. # Function Signature ```python def activate_buttons(grid: List[List[int]]) -> List[Tuple[int, int]]: pass ``` # Input - A 2D list `grid` of size `n x m` where `grid[i][j]` is either 0 or 1. # Output - A list of tuples where each tuple (i, j) represents a command to toggle the button at the i-th row and j-th column of the control panel. # Constraints - 1 ≤ n, m ≤ 100 - `grid` only contains 0s and 1s. # Example ```python grid = [ [0, 1, 0], [1, 0, 1], [0, 1, 0] ] ``` # Output ```python [(0, 1), (1, 0), (1, 2), (2, 1)] ``` In this example, you need to toggle the buttons at positions (0, 1), (1, 0), (1, 2), and (2, 1) to achieve the desired configuration. Note that there could be multiple correct sequences of commands resulting in the same pattern.","solution":"from typing import List, Tuple def activate_buttons(grid: List[List[int]]) -> List[Tuple[int, int]]: commands = [] n = len(grid) m = len(grid[0]) for i in range(n): for j in range(m): if grid[i][j] == 1: commands.append((i, j)) return commands"},{"question":"In a city grid, there are N traffic lights positioned along a straight road, each at a distinct location given by an integer coordinate on a number line. When a traffic light fails, it can cause heavy traffic congestion if it is not fixed or bypassed efficiently. To prevent this, the authorities want to ensure that there are always functioning traffic lights covering every segment of the road from the first to the last traffic light. Each traffic light has a unique identifier and can be turned off or on. You are given the initial state of all N traffic lights (0 for off, 1 for on). Your task is to process a series of Q operations. Each operation is either: - \\"flip i\\" which changes the state of the ith traffic light (if it is on, turn it off; if it is off, turn it on). - \\"query a b\\" which asks if there is at least one traffic light turned on between the positions a and b (inclusive). The input consists of: - The first line containing two integers N and Q (1 ≤ N, Q ≤ 10^5), representing the number of traffic lights and the number of operations, respectively. - The second line containing N integers, each either 0 or 1, indicating the initial state of each traffic light. - The following Q lines each describe an operation in one of the two formats mentioned above. For each \\"query a b\\" operation, output \\"YES\\" if there is at least one traffic light turned on between the positions a and b (inclusive), otherwise output \\"NO\\". # Input ```plain 5 4 1 0 0 1 1 query 2 4 flip 3 query 2 4 query 1 5 ``` # Output ```plain YES YES YES ``` # Explanation Initially, the traffic lights are in state [1, 0, 0, 1, 1]. - The first query checks if there is a functioning traffic light between positions 2 and 4. Since positions 2 and 4 are both off, but position 4 is on, the output is \\"YES\\". - The second operation flips the state of the traffic light at position 3, changing the state to [1, 0, 1, 1, 1]. - The third query checks again between positions 2 and 4. In this range, positions 3 and 4 are on, so the output is \\"YES\\". - The fourth query checks the entire range from position 1 to 5, and it finds multiple traffic lights are on, so the output is \\"YES\\" as well.","solution":"def process_traffic_lights(N, Q, initial_state, operations): traffic_lights = initial_state[:] results = [] for operation in operations: op = operation.split() if op[0] == \\"flip\\": idx = int(op[1]) - 1 traffic_lights[idx] = 1 - traffic_lights[idx] elif op[0] == \\"query\\": a = int(op[1]) - 1 b = int(op[2]) - 1 if any(traffic_lights[a:b+1]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant land named Xylo, everyone loves to participate in the Bridge game. People in Xylo are numbered from 1 to n. Every person has exactly one friend, and the i-th person\'s friend is the person with the number friendi. Someday, Xylo\'s king announced a new game called Bridge. The rules of the game are as follows: The game runs in multiple rounds. Assume person x starts a round, he calls friendx and says: \\"Bridg\\". If a person receives the word \\"Bridg\\", they call their friend and pass the word \\"Bridg\\" along. The round continues until someone receives the word \\"Bridg\\" from all n people. This person is called the \\"End-Anchor\\" of the round. The game is exciting, but there is a twist. The king wants to find the smallest m (m ≥ 1) such that for each person x, if x starts a round and y becomes the End-Anchor, then starting from y, x would become the End-Anchor in exactly m rounds. The king also mentioned that some friend relationships are cyclic, meaning a person can be their own friend (i.e. friendi = i). The input consists of two lines: The first line contains an integer n (1 ≤ n ≤ 100) — the number of people in Xylo. The second line contains n integers, where the i-th integer is friendi (1 ≤ friendi ≤ n) — the number of the i-th person\'s friend. If there is no such m satisfying the conditions, print -1. Otherwise, print the smallest such m. **Example:** Input: 4 2 3 4 1 Output: 4","solution":"def find_smallest_m(n, friends): Given a number of people in Xylo and their friends list, returns the smallest m such that for each person x, if x starts a round and y becomes the End-Anchor, then starting from y, x would become the End-Anchor in exactly m rounds. from math import gcd from functools import reduce def find_cycle_length(start): visited = set() length = 0 current = start while current not in visited: visited.add(current) current = friends[current - 1] length += 1 return length cycle_lengths = [find_cycle_length(i + 1) for i in range(n)] lcm = lambda a, b: a * b // gcd(a, b) result = reduce(lcm, cycle_lengths) return result"},{"question":"A spacecraft is embarking on a journey through a network of wormholes in space. The network is represented as a directed graph with `n` planets (nodes) and `m` wormholes (edges). Each planet is uniquely identified by an integer from 1 to n. A wormhole allows travel from one planet to another and can be thought of as a directed edge from one node to another in the graph. The spacecraft starts its journey at planet 1 and wants to determine if it is possible to visit all the planets (possibly not returning to the same planet). The journey is considered possible if there exists a path from planet 1 to every other planet in the network. Your task is to determine whether it is possible for the spacecraft to visit all the planets starting from planet 1. # Input - The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), denoting the number of planets (nodes) and the number of wormholes (edges) respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) describing that there is a wormhole from planet `u` to planet `v`. # Output - Print \\"YES\\" if it is possible to visit all planets starting from planet 1. - Print \\"NO\\" otherwise. # Example Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` YES ``` Input: ``` 4 2 1 2 3 4 ``` Output: ``` NO ```","solution":"def can_visit_all_planets(n, m, edges): from collections import defaultdict, deque def bfs(start, graph): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Check if we can visit all planets from planet 1 visited_from_1 = bfs(1, graph) if len(visited_from_1) == n: return \\"YES\\" else: return \\"NO\\" # Example usage n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 2)] print(can_visit_all_planets(n, m, edges)) # Output: YES n = 4 m = 2 edges = [(1, 2), (3, 4)] print(can_visit_all_planets(n, m, edges)) # Output: NO"},{"question":"You are given an array of n integers, and you want to perform the following operation: pick any two elements a_i and a_j (where i ne j), remove them and append their sum back to the array. This operation can be performed multiple times until only one element is left in the array. Write a function to find the maximum value of the last remaining element after performing the above operation optimally. Your function should have the following signature: ```python def max_result(arr: List[int]) -> int ``` # Input - A list of integers `arr` of length `n`. # Output - An integer representing the maximum possible value of the last remaining element. # Constraints - 2 leq n leq 10^5 - -10^9 leq a_i leq 10^9 # Example ```python assert max_result([1, 2, 3, 4]) == 10 assert max_result([-1, -2, -3, -4]) == -1 assert max_result([10, -10, 20, -20]) == 20 ``` # Explanation For the first example, we can perform the operations as follows: 1. Sum 1 and 4 to get 5: [2, 3, 5] 2. Sum 3 and 5 to get 8: [2, 8] 3. Sum 2 and 8 to get 10: [10] For the second example: 1. Sum -1 and -2 to get -3: [-3, -3, -4] 2. Sum -3 and -4 to get -7: [-3, -7] 3. Sum -3 and -7 to get -10: [-10] However, the optimal solution is: 1. Sum -1 and -4 to get -5: [-2, -3, -5] 2. Sum -2 and -3 to get -5: [-5, -5] 3. Sum -5 and -5 to get -10: [-10] Again, optimally: 1. Sum -1 and -3 to get -4: [-2, -4, -5] 2. Sum -2 and -5 to get -7: [-4, -7] 3. Sum -4 and -7 to get -11: [-11] For the third example, summing the positive numbers separately: 1. Sum 10 and 20 to get 30: [-10, -20, 30] 2. Sum -10 and 30 to get 20: [-20, 20] 3. Sum -20 and 20 to get 0: [0] However a better solution: 1. Sum -20 and 20 to get 0: [-10, 10, 0] 2. Sum -10 and 10 to get 0: [0, 0] 3. Sum 0 and 0 to get 0: [0]","solution":"from typing import List def max_result(arr: List[int]) -> int: Given an array of integers, perform optimal operations to find the maximum possible value of the last remaining element. return sum(arr)"},{"question":"You have a list of words and a list of patterns. Your task is to determine if each word in the list of words matches any of the patterns in the list of patterns. A word matches a pattern if and only if the pattern can be converted into the word by following a one-to-one mapping and vice versa. For example, if the pattern is \\"abab\\" and the word is \\"cfcf\\", they match because \'a\' maps to \'c\' and \'b\' maps to \'f\'. However, the pattern \\"abab\\" does not match the word \\"cfcg\\" since \'a\' would map to both \'c\' and \'g\', which is not allowed. Input: - The first line contains an integer n (1 ≤ n ≤ 5*10^4) – the number of words. - The next n lines each contain a word consisting of lowercase Latin letters with a maximum length of 10. - The next line contains an integer m (1 ≤ m ≤ 100) – the number of patterns. - The next m lines each contain a pattern consisting of lowercase Latin letters with a maximum length of 10. Output: - Output n lines, each containing either \\"YES\\" or \\"NO\\". The i-th line should contain \\"YES\\" if the i-th word matches at least one of the patterns, otherwise \\"NO\\". Example: Input: 4 abcd efgh abab mnop 3 xyxy aabb zzzz Output: NO NO YES NO Explanation: - \\"abcd\\" does not match \\"xyxy\\", \\"aabb\\", or \\"zzzz\\", so the output is \\"NO\\". - \\"efgh\\" does not match \\"xyxy\\", \\"aabb\\", or \\"zzzz\\", so the output is \\"NO\\". - \\"abab\\" matches \\"xyxy\\" where \'a\' -> \'x\' and \'b\' -> \'y\', so the output is \\"YES\\". - \\"mnop\\" does not match \\"xyxy\\", \\"aabb\\", or \\"zzzz\\", so the output is \\"NO\\".","solution":"def word_pattern_matches(words, patterns): def match(word, pattern): if len(word) != len(pattern): return False w2p, p2w = {}, {} for w, p in zip(word, pattern): if w not in w2p: w2p[w] = p if p not in p2w: p2w[p] = w if w2p[w] != p or p2w[p] != w: return False return True result = [] for word in words: if any(match(word, pattern) for pattern in patterns): result.append(\\"YES\\") else: result.append(\\"NO\\") return result # Example usage n = 4 words = [\\"abcd\\", \\"efgh\\", \\"abab\\", \\"mnop\\"] m = 3 patterns = [\\"xyxy\\", \\"aabb\\", \\"zzzz\\"] print(word_pattern_matches(words, patterns)) # Output: [\\"NO\\", \\"NO\\", \\"YES\\", \\"NO\\"]"},{"question":"You have been tasked with designing an algorithm to determine the longest contiguous subsequence of integers in an array such that the subsequence contains at most two distinct integers. Given an array of integers, design a function `longest_subsequence(arr)` that returns the length of the longest contiguous subsequence that contains at most two distinct integers. # Input: The input will be a single list of integers `arr`. # Output: The output should be a single integer, representing the length of the longest contiguous subsequence with at most two distinct integers. # Constraints: - The array length will be at least 1 and at most `10^5`. - The values in the array will range from -`10^5` to `10^5`. # Example 1: ```python arr = [1, 2, 1, 2, 1, 3, 1, 3] longest_subsequence(arr) ``` Output: ``` 5 ``` Explanation: The longest subsequence with at most two distinct integers is [1, 2, 1, 2, 1] or [2, 1, 2, 1, 3] both of length 5. # Example 2: ```python arr = [4, 5, 5, 4, 5, 5, 6, 7, 6] longest_subsequence(arr) ``` Output: ``` 6 ``` Explanation: The longest subsequence with at most two distinct integers is [5, 5, 4, 5, 5, 6] of length 6. Write a function `longest_subsequence(arr)` that takes an array `arr` and returns the length of the longest contiguous subsequence with at most two distinct integers.","solution":"def longest_subsequence(arr): Returns the length of the longest contiguous subsequence that contains at most two distinct integers. if not arr: return 0 max_length = 0 left = 0 count = {} for right in range(len(arr)): if arr[right] in count: count[arr[right]] += 1 else: count[arr[right]] = 1 while len(count) > 2: count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You have a series of workshops you want to attend, but each workshop overlaps with some others. Your goal is to attend the maximum number of workshops without any time conflicts. Each workshop is defined by its start and end time. You need to implement a function that helps you determine the maximum number of non-overlapping workshops you can attend. # Input - The first line contains an integer n (1 le n le 10^5) — the number of workshops. - The next n lines each contain two integers s_i and e_i (1 le s_i < e_i le 10^9) — the start and end times of the i-th workshop. # Output - Print a single integer — the maximum number of non-overlapping workshops you can attend. # Example Input ``` 5 1 3 2 5 4 6 6 8 7 9 ``` Output ``` 3 ``` # Explanation You can attend the workshops with the intervals `[1,3]`, `[4,6]` and `[6,8]` which don\'t overlap with each other, so the maximum number is `3`. # Note You may use a greedy algorithm to solve this problem efficiently. Sort the workshops by their end times and then iteratively select the next non-overlapping workshop.","solution":"def max_non_overlapping_workshops(workshops): Determines the maximum number of non-overlapping workshops one can attend. Args: workshops (List[Tuple[int, int]]): List of tuples where each tuple contains the start and end times of a workshop Returns: int: Maximum number of non-overlapping workshops # Sort workshops based on end time workshops.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in workshops: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers representing the skill levels of players in a game. You need to form teams of exactly three players each. The skill level of a team is the sum of the skill levels of its players. A team is considered \\"balanced\\" if the difference between the maximum and minimum skill levels of the team members is at most `d`. Your task is to find the maximum number of balanced teams you can form from the given array of players\' skill levels. The first line contains two integers `n` and `d` (3 le n le 100,000, 0 le d le 1,000,000) — the number of players and the maximum allowed difference in skill levels within a team, respectively. The second line contains `n` integers `s_1, s_2, ..., s_n` (1 le s_i le 1,000,000), representing the skill levels of the players. Print a single integer — the maximum number of balanced teams of three players that can be formed. **Example:** Input: ``` 6 2 4 5 6 7 8 9 ``` Output: ``` 2 ``` Explanation: You can form the teams [4, 5, 6] and [7, 8, 9]. Both teams are balanced because the difference between the highest and lowest skill levels in each team is exactly 2. This is the maximum number of balanced teams that can be formed from the given array.","solution":"def max_balanced_teams(n, d, skills): Determine the maximum number of balanced teams of three players that can be formed. Parameters: n (int): The number of players (3 <= n <= 100,000). d (int): The maximum allowed difference in skill levels within a team (0 <= d <= 1,000,000). skills (list): A list of integers representing the skill levels of the players. Returns: int: The maximum number of balanced teams that can be formed. skills.sort() teams_count = 0 i = 0 while i <= n - 3: if skills[i + 2] - skills[i] <= d: teams_count += 1 i += 3 # Move to next potential team else: i += 1 # Try to form a team starting from the next player return teams_count"},{"question":"You are given a list of `n` numbers. Your task is to form the largest possible number by concatenating the given numbers. The list contains non-negative integers only. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) – the number of integers. - The second line contains `n` non-negative integers separated by spaces. Each integer does not exceed 10^9. # Output: - Output a single integer which is the largest possible number that can be formed by concatenating the given numbers. # Example: Input: ``` 3 3 30 34 ``` Output: ``` 34330 ``` # Explanation: By concatenating the numbers 3, 30, and 34 in the order \\"34\\", \\"3\\", and \\"30\\", you get the largest possible number \\"34330\\".","solution":"from functools import cmp_to_key def largest_number(nums): Given a list of non-negative integers, arrange them such that they form the largest number. :param nums: List of non-negative integers :return: The largest possible number formed by concatenating the list of numbers # Custom comparator to determine the order to concatenate numbers def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert numbers to strings for easy comparison nums_str = list(map(str, nums)) # Sort numbers based on the custom comparator nums_str.sort(key=cmp_to_key(compare)) # Concatenate sorted numbers largest_num = \'\'.join(nums_str) # Handle the special case where the result is a number with leading zeros (e.g., \\"0000\\") if largest_num[0] == \'0\': largest_num = \'0\' return largest_num"},{"question":"You are given an array of integers and a list of ranges. For each range, you are required to calculate the number of distinct elements in that range and output the results efficiently. Write a program that reads the array and list of ranges, processes each range, and outputs the number of distinct elements found in that range. **Input:** - The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000), representing the length of the array and the number of queries, respectively. - The second line contains n integers, a_i (1 ≤ a_i ≤ 100,000), which represent the elements of the array. - Each of the next q lines contains two integers, l and r (1 ≤ l ≤ r ≤ n), representing a range (inclusive) in the array. **Output:** - For each range, output a single integer: the number of distinct elements within that range. **Example:** **Input:** ``` 5 3 1 2 1 3 2 1 3 2 4 1 5 ``` **Output:** ``` 2 3 3 ``` **Explanation:** - For the range (1, 3), the distinct elements are {1, 2}, so the answer is 2. - For the range (2, 4), the distinct elements are {2, 1, 3}, so the answer is 3. - For the range (1, 5), the distinct elements are {1, 2, 3}, so the answer is 3.","solution":"def count_distinct_elements(arr, queries): Count the number of distinct elements for each range in the queries. :param arr: List[int] - The input array of integers :param queries: List[Tuple[int, int]] - List of ranges (l, r) :return: List[int] - List containing the count of distinct elements for each range result = [] for l, r in queries: # Using set to store distinct elements distinct_elements = set(arr[l-1:r]) result.append(len(distinct_elements)) return result"},{"question":"Alice has inherited a gold bar from her ancestors, which can be arbitrarily split into smaller gold bars. She wants to split the gold bar into exactly three pieces with specific weights, so she can divide them among her three children as a legacy. The gold bar has a weight of W grams (an integer between 1 and 10^6 inclusive). Alice wants to split it into three pieces weighing w_1, w_2, and w_3 grams respectively (w_1, w_2, w_3 are positive integers). Write a program to determine if it is possible to split the gold bar into exactly three pieces of the given weights. # Input: - The first line contains a single integer, W. - The second line contains three integers, w_1, w_2, w_3. # Output: - Print \\"YES\\" if the gold bar can be split into three pieces of the given weights. - Print \\"NO\\" otherwise. # Examples: Example 1: Input: ``` 10 3 3 4 ``` Output: ``` YES ``` Example 2: Input: ``` 5 3 2 1 ``` Output: ``` NO ``` **Explanation**: In Example 1, W=10 and you want weights of 3, 3, and 4, the sum is 3+3+4=10, so the answer is \\"YES\\". In Example 2, W=5, but you want weights of 3, 2, and 1, the sum is 3+2+1=6, which is more than the total weight, so the answer is \\"NO\\".","solution":"def can_split_gold_bar(W, w1, w2, w3): Determines if a gold bar of weight W can be split into three pieces of weights w1, w2, and w3. Parameters: W (int): Total weight of the gold bar. w1 (int): Weight of the first piece. w2 (int): Weight of the second piece. w3 (int): Weight of the third piece. Returns: str: \\"YES\\" if it\'s possible to split the gold bar into three pieces of weights w1, w2, and w3, otherwise \\"NO\\". # Check if the sum of the three pieces equals the total weight if W == w1 + w2 + w3: return \\"YES\\" return \\"NO\\""},{"question":"Given two arrays, A and B, both of size n, your task is to determine the length of the longest subsequence that is part of both arrays. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The order of the elements in the subsequence should be maintained as it was in the original array. Input The first line contains a single integer n (1 ≤ n ≤ 100) – the size of the arrays. The second line contains n integers representing the elements of array A. The third line contains n integers representing the elements of array B. Output Output a single integer – the length of the longest common subsequence of A and B. Example Input: 6 1 2 3 4 1 6 3 4 1 2 1 6 Output: 4","solution":"def longest_common_subsequence(n, A, B): Find the length of the longest subsequence in both arrays A and B. # DP table to store the length of longest common subsequence dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill dp table for i in range(1, n + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n]"},{"question":"You are given a list of integers and your task is to determine if you can split this list into two non-empty subsequences such that the sum of the integers in both subsequences is the same. Write a function `can_split_equal_sum(nums)` that takes a list of integers `nums` and returns `True` if such a split is possible, and `False` otherwise. # Input - The only input line contains a list of integers `nums` where each integer is between `-10^6` and `10^6` (inclusive). - The length of `nums` is between `2` and `100` (inclusive). # Output - Return `True` if it\'s possible to split the list into two non-empty subsequences with the same sum, otherwise return `False`. # Examples Example 1 Input: ``` nums = [3, 1, 4, 2, 2] ``` Output: ``` True ``` Explanation: ``` One possible split is [3, 2] and [1, 4, 2], both sum to 5. ``` Example 2 Input: ``` nums = [1, 5, 11, 5] ``` Output: ``` True ``` Explanation: ``` One possible split is [1, 5, 5] and [11], both sum to 11. ``` Example 3 Input: ``` nums = [1, 2, 3, 5] ``` Output: ``` False ``` Explanation: ``` No possible split can result in equal sum subsequences. ``` Example 4 Input: ``` nums = [2, 2, 3, 5] ``` Output: ``` False ``` Explanation: ``` No possible split can result in equal sum subsequences. ``` # Note - Each subsequence must be non-empty. - The order of the elements within the subsequences does not matter. - Consider using dynamic programming to solve this problem efficiently.","solution":"def can_split_equal_sum(nums): Function to determine if a list can be split into two non-empty subsequences with equal sum. Args: nums (List[int]): The list of integers. Returns: bool: True if the split is possible, otherwise False. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize DP array dp = [False] * (target + 1) dp[0] = True for num in nums: # Update the DP array in reverse order for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are working on a text editor with an infinite-line buffer. Each line is identified by its line number starting from 1. The editor supports the following two operations: 1. `INSERT x y`: Insert a single character `y` (a lowercase English letter) at the end of line `x`. If line `x` does not exist, a new line `x` is created. 2. `DELETE x`: Delete the entire content of line `x`, making it an empty line. If line `x` does not exist, do nothing. You are given a series of operations to perform on an initially empty buffer. After executing all operations, you need to print the content of the buffer as it would appear line by line. Empty lines should be printed as empty strings, and lines that were never created or are empty after deletions should not be printed at all. The input consists of multiple test cases. The first line contains a single integer `t` (`1 <= t <= 1000`) — the number of test cases. Each test case starts with a single integer `m` (`1 <= m <= 1000`) — the number of operations. The next `m` lines describe the operations to perform. # Input - A single integer t, the number of test cases. - For each test case: - An integer m, the number of operations. - `m` lines, each containing one of two possible operations: - `INSERT x y` where `1 <= x <= 10^5` and `y` is a lowercase English letter. - `DELETE x` where `1 <= x <= 10^5`. # Output For each test case, print the content of the buffer line by line as it would appear after executing all operations. If a line is empty, print an empty string. If a line never existed or was deleted, do not print anything for that line. Print a blank line between the outputs of two test cases. # Example Input ``` 2 5 INSERT 1 a INSERT 2 b INSERT 1 c DELETE 2 INSERT 3 d 3 INSERT 1 a DELETE 1 INSERT 2 b ``` Output ``` ac d b ```","solution":"def process_text_editor_operations(test_cases): all_outputs = [] for case in test_cases: m, operations = case buffer = {} for operation in operations: parts = operation.split() if parts[0] == \'INSERT\': x = int(parts[1]) y = parts[2] if x in buffer: buffer[x] += y else: buffer[x] = y elif parts[0] == \'DELETE\': x = int(parts[1]) if x in buffer: buffer[x] = \\"\\" result = [] for key in sorted(buffer.keys()): if buffer[key]: result.append(buffer[key]) all_outputs.append(result) return all_outputs # Parse input def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): m = int(lines[index]) index += 1 operations = lines[index:index + m] index += m test_cases.append((m, operations)) return test_cases # Print output def format_output(all_outputs): result = [] for output in all_outputs: result.append(\\"n\\".join(output)) return \\"nn\\".join(result)"},{"question":"In the Kingdom of Binary Knights, the wise King has created a challenge for his knights to test their problem-solving prowess. The task involves a special set of potions, where each potion has a unique magical strength represented by a binary string of length `n`. The kingdom has a collection of `m` such potions, and each potion has a binary string of the same length. A knight is given a binary string `target` of length `n`. The goal is to determine the minimum number of potions needed to form the `target` binary string by performing a bitwise OR operation on the potion strings. The bitwise OR operation on two binary strings `a` and `b` of length `n` results in a new binary string `c` of length `n`, where each bit `c[i]` is `1` if either `a[i]` or `b[i]` is `1`, and `0` otherwise. You should write a program to help the knights find the minimum number of potions required to form the `target` binary string. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 30, 1 ≤ m ≤ 10^5), representing the length of the binary strings and the number of potions. - The second line contains the binary string `target` of length `n`. - Each of the next `m` lines contains a binary string of length `n` representing the potions in the collection. # Output - Print a single integer representing the minimum number of potions required to form the `target` string using the bitwise OR operation. - If it\'s not possible to form the `target` string with the given potions, print `-1`. # Example Input ``` 5 3 10110 10000 01110 00101 ``` Output ``` 2 ``` # Explanation In the example, the `target` string is `10110`. By selecting the potions `10000` and `01110`, the bitwise OR operation results in the string `11110`, which can be combined with the potion `00101` to finally form the `target` string `10110`. Therefore, the minimum number of potions required is `2`. Note: - Consider different combinations and use a bitmask or similar approach to achieve the optimal solution. - Efficiency is key since the number of potions `m` can be large.","solution":"def min_potions(n, m, target, potions): from functools import lru_cache target_int = int(target, 2) potion_ints = [int(potion, 2) for potion in potions] @lru_cache(None) def dp(mask): if mask == 0: return 0 res = float(\'inf\') for potion in potion_ints: new_mask = mask & ~potion if new_mask != mask: # valid only if potion contributes something res = min(res, 1 + dp(new_mask)) return res result = dp(target_int) return result if result != float(\'inf\') else -1 # Reading input and output format function for unit testing def process_input_output(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].strip().split()) target = input_lines[1].strip() potions = input_lines[2:2+m] result = min_potions(n, m, target, potions) return result"},{"question":"You are given an array of integers, and your task is to calculate the sum of the elements in the subarray with the maximum sum. A subarray is a contiguous portion of the array. For example, in the array `[-2,1,-3,4,-1,2,1,-5,4]`, the subarray with the maximum sum is `[4,-1,2,1]`, which has a sum of `6`. Implement a function to find this maximum sum. Your function should have the following signature: ```python def max_subarray_sum(arr: List[int]) -> int: ``` # Input - A single integer `t` (1 le t le 100) — the number of test cases. - For each test case, the first line contains an integer `n` (1 le n le 10^5) — the number of elements in the array. - The second line contains `n` integers representing the elements of the array `arr` (-10^4 le arr[i] le 10^4). # Output For each test case, output a single integer, which is the sum of the elements in the subarray with the maximum sum. # Example Input ``` 2 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 ``` Output ``` 6 15 ``` # Constraints - The function should be optimized to run in O(n) time complexity for each test case. - The input size and value ranges ensure that Python\'s default int type will not overflow.","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Returns the sum of the maximum subarray. Uses Kadane\'s algorithm to find the maximum subarray sum in O(n) time. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(t: int, test_cases: List[List[int]]) -> List[int]: Processes multiple test cases and returns a list of results for the maximum subarray sum for each test case. results = [] for case in test_cases: results.append(max_subarray_sum(case)) return results"},{"question":"You are given a matrix of size n times m consisting of non-negative integers. You need to find the shortest path from the upper left corner (0, 0) to the lower right corner (n-1, m-1) such that the path only moves right or down, and the sum of the values in the path is minimized. # Input - The first line contains two integers n and m (1 leq n, m leq 1000) which represent the dimensions of the matrix. - The next n lines contain m integers each, representing the values of the matrix (0 leq text{matrix}[i][j] leq 1000). # Output - Output a single integer representing the minimum sum of the values collected along the path from the upper left to the lower right corner of the matrix. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` Explanation The shortest path with minimum sum is 1 -> 3 -> 1 -> 1 -> 1, totaling 7.","solution":"def min_path_sum(matrix): Returns the minimum sum of values collected along the path from the upper left to the lower right corner of the matrix. n = len(matrix) m = len(matrix[0]) # Initialize dp array dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1]"},{"question":"You are given a binary tree with N nodes. Your task is to find the longest path in the tree, where each node on this path has the same value. The path can pass through the root, branch off of nodes, and you may start and end the path at any node. The path length is defined as the number of edges in the path. Input: The first line contains an integer N (1 ≤ N ≤ 10^5), the number of nodes in the tree. The second line contains N integers val[1], val[2], ..., val[N], where val[i] is the value of the i-th node (1 ≤ val[i] ≤ 10^9). Each of the next N-1 lines contains two integers u and v, which means there is an edge between the nodes u and v. Output: Print the length of the longest path where each node has the same value. Example: Input: 6 1 1 1 2 2 2 1 2 1 3 3 4 3 5 4 6 Output: 2 Explanation: The longest path with the same value in this example is between nodes 1, 2, and 3, which have the value 1, resulting in a path length of 2 (edges 1-3-2).","solution":"from collections import defaultdict def longest_same_value_path(N, values, edges): # Build the tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize variables to track the maximum path length max_path_length = [0] def dfs(node, parent): max_length_1, max_length_2 = 0, 0 for neighbor in tree[node]: if neighbor == parent: continue length = dfs(neighbor, node) if values[neighbor-1] == values[node-1]: if length > max_length_1: max_length_2 = max_length_1 max_length_1 = length elif length > max_length_2: max_length_2 = length max_path_length[0] = max(max_path_length[0], max_length_1 + max_length_2) return max_length_1 + 1 dfs(1, -1) return max_path_length[0] # Example Usage N = 6 values = [1, 1, 1, 2, 2, 2] edges = [(1, 2), (1, 3), (3, 4), (3, 5), (4, 6)] print(longest_same_value_path(N, values, edges)) # Output: 2"},{"question":"You are given a list of words, where each word is stored as a string. The goal is to perform a series of operations on this list of words. You should support the following operations: 1. `ADD <word>`: Add the given word to the list. If the word already exists in the list, do not add it again. 2. `REMOVE <word>`: Remove the given word from the list if it exists. 3. `QUERY <pattern>`: Return all words in the list that match the given prefix pattern. The pattern will not contain any special characters or wildcards. The first line of input contains an integer Q — the number of operations to handle. Next Q lines contain the operations you need to process. Input: The first line contains a single integer Q. The next Q lines contain one of the following commands: - `ADD <word>`: A word (a string consisting of lowercase English letters) to be added to the list. - `REMOVE <word>`: A word (a string consisting of lowercase English letters) to be removed from the list. - `QUERY <pattern>`: A prefix pattern (a string consisting of lowercase English letters). Output: For each `QUERY` command, output all matching words sorted lexicographically, each on a new line. If no words match, output `NONE`. The output for each `QUERY` command should be separated by a blank line. Example: ``` Input: 7 ADD apple ADD app ADD application REMOVE app QUERY app QUERY ap REMOVE apple QUERY ap Output: application application ```","solution":"def perform_operations(operations): words = set() result = [] for operation in operations: parts = operation.split(\' \', 1) command = parts[0] if command == \\"ADD\\": word = parts[1] if word not in words: words.add(word) elif command == \\"REMOVE\\": word = parts[1] words.discard(word) elif command == \\"QUERY\\": pattern = parts[1] matching_words = sorted([word for word in words if word.startswith(pattern)]) if matching_words: result.extend(matching_words) else: result.append(\\"NONE\\") result.append(\\"\\") return \\"n\\".join(result).strip()"},{"question":"Tina is a software developer who loves to work on compression algorithms. She is tasked with developing a custom run-length encoding algorithm for a special type of input. The input is a string consisting of lowercase English letters only. The run-length encoding should be performed only on consecutive characters that are the same, and compression should be case-sensitive. For example, the string \\"aaabcccccaaa\\" would be compressed to \\"a3b1c5a3\\". Conversely, the string \\"aAa\\" would remain \\"a1A1a1\\" since the compression is case-sensitive and no consecutive characters are the same. Your task is to help Tina by writing a function that takes a string as input and returns the run-length encoded string. # Input - The input consists of a single string (1 ≤ length ≤ 100,000). # Output - Output the run-length encoded version of the input string. # Constraints - The input string will consist solely of lowercase English letters (a-z). # Example **Example 1:** Input: \\"aaabcccccaaa\\" Output: \\"a3b1c5a3\\" **Example 2:** Input: \\"abcd\\" Output: \\"a1b1c1d1\\" **Example 3:** Input: \\"aAa\\" Output: \\"a1A1a1\\" # Note In the first example, characters are grouped and their counts are mentioned next to the respective character. In the second example, all characters are distinct, so each character has a count of 1. In the third example, the algorithm is case-sensitive and does not group \'a\' and \'A\' together.","solution":"def run_length_encoding(s): if not s: return \\"\\" encoded_str = \\"\\" count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: encoded_str += prev_char + str(count) prev_char = char count = 1 encoded_str += prev_char + str(count) return encoded_str"},{"question":"Vlad recently joined an adventure game where he needs to navigate through a series of rooms connected by doors. The game is represented as a tree (a connected undirected graph with no cycles) with n vertices (rooms) numbered from 1 to n. Your task is to help Vlad find the shortest path between two specific rooms. **Input** The first line contains an integer n (2 leq n leq 1000) — the number of rooms. Each of the next n-1 lines contains two integers a and b (1 leq a, b leq n) — indicating that there is a door connecting room a and room b. The last line contains two integers u and v (1 leq u, v leq n) — the indices of the two rooms between which Vlad needs to find the shortest path. **Output** Print a single integer — the length of the shortest path between rooms u and v. **Example** Input: ``` 5 1 2 1 3 3 4 3 5 2 4 ``` Output: ``` 3 ``` **Explanation** In the example, the shortest path from room 2 to room 4 is: 2 -> 1 -> 3 -> 4. The length of this path is 3. **Note** To solve this problem, you need to implement an algorithm that efficiently computes the shortest path in a tree. A Breadth-First Search (BFS) starting from any of the two given nodes (u or v) can help find the shortest path, as trees do not contain cycles and have a unique path between any two nodes.","solution":"from collections import deque def shortest_path_in_tree(n, edges, u, v): Finds the shortest path in a tree between nodes u and v. :param n: Number of rooms :param edges: List of tuples where each tuple represents an edge (a, b) :param u: Starting room number :param v: Destination room number :return: Length of the shortest path between room u and room v # Create an adjacency list for the graph graph = [[] for _ in range(n + 1)] for a, b in edges: graph[a].append(b) graph[b].append(a) # Function to perform BFS and return the distance from start node to all other nodes def bfs(start): distances = [-1] * (n + 1) queue = deque([start]) distances[start] = 0 while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances distances_from_u = bfs(u) return distances_from_u[v]"},{"question":"Polycarpus is working with another friend\'s program and has encountered a new type of function, setElement(i, v), which sets the element of some array a at index i to the value v. From an initial state where the array has the default values, Polycarpus needs to determine the minimum number of function calls that lead to the final state of the array. Additionally, he needs to find the specific function calls required to achieve this state. Before any calls of the function setElement(i, v), all elements of the array equal zero. The first input line contains a single integer n (1 ≤ n ≤ 105) — the length of the array a[1...n]. The second line contains the integer space-separated elements a[1], a[2], ..., a[n] (0 ≤ a[i] ≤ 105) after a series of function calls setElement(i, v). It is guaranteed that at least one element of the array is non-zero. Print on the first line t — the minimum number of calls of the function setElement(i, v) that leads to the final state of the array from the input data. Then print t lines — the descriptions of function calls, one per line. Each line should contain two integers i and v (1 ≤ i ≤ n and 0 ≤ v ≤ 105) representing the index and the value for the i-th call setElement(i, v). If there are multiple solutions, you are allowed to print any of them. Example: Input: 5 3 0 4 0 2 Output: 3 1 3 3 4 5 2","solution":"def find_min_calls_to_set_elements(n, array): Given the final state of an array after applying a certain number of setElement(i, v) operations, determine the minimum number of such operations to go from an initial array of zeros. :param n: Integer, length of the array :param array: List of integers representing the final state of the array :return: Tuple containing: - Integer t, the minimum number of function calls. - List of tuples (i, v) representing the function calls. calls = [] for i in range(n): if array[i] != 0: calls.append((i + 1, array[i])) return len(calls), calls"},{"question":"A company is planning a team-building event and needs to assign employees to different teams. Each team must have exactly k members, and every employee should be assigned to only one team. However, the company has some constraints regarding employee preferences. Each employee might provide a list of other employees with whom they prefer not to be on the same team. You are given the number of employees n (1 ≤ n ≤ 100) and the size of each team k (1 ≤ k ≤ n). Additionally, you are provided with a list of m pairs (1 ≤ m ≤ 1000), where each pair (a, b) indicates that employee a does not want to be on the same team as employee b. It is guaranteed that each employee is involved in at most one such pair. Your task is to determine whether it’s possible to assign employees to teams such that each team has exactly k members and no two employees who dislike each other are on the same team. If it’s possible, print \\"YES\\" and provide one possible team assignment. If it’s not possible, print \\"NO\\". The first line contains three integers n, k, and m. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b) which indicate that employee a does not want to be on the same team as employee b. Print \\"YES\\" followed by the team assignments if possible, or \\"NO\\" if not. Example Input: 6 3 2 1 2 3 4 Example Output: YES Team 1: 1 3 5 Team 2: 2 4 6 (Note: The output format should list all team assignments. Multiple valid outputs are possible.)","solution":"from collections import defaultdict, deque def possible_team_assignment(n, k, m, preferences): if n % k != 0: return \\"NO\\", None dislike = defaultdict(set) for a, b in preferences: dislike[a].add(b) dislike[b].add(a) teams = [[] for _ in range(n // k)] team_idx = 0 def find_team(employee): for i in range(len(teams)): if len(teams[i]) < k and not any(member in dislike[employee] for member in teams[i]): return i return -1 for employee in range(1, n + 1): team_index = find_team(employee) if team_index == -1: return \\"NO\\", None teams[team_index].append(employee) return \\"YES\\", teams def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) m = int(data[2]) preferences = [] for i in range(3, 3 + 2 * m, 2): preferences.append((int(data[i]), int(data[i + 1]))) result, teams = possible_team_assignment(n, k, m, preferences) print(result) if result == \\"YES\\": for i, team in enumerate(teams): print(f\\"Team {i + 1}: {\' \'.join(map(str, team))}\\") if __name__ == \\"__main__\\": main()"},{"question":"Lea is organizing a charity marathon event. She wants to assign a set of runners to each checkpoint. Each checkpoint must have at least one runner and each runner must participate in exactly one checkpoint. However, the total number of runners at every checkpoint must either be a prime number or a power of two. Given the number of runners (n), determine the maximum number of checkpoints she can create and the number of runners assigned to each checkpoint. Input: A single integer n (1 ≤ n ≤ 105), the number of runners. Output: The first line must contain a single integer k, representing the maximum number of checkpoints. Each of the next k lines must contain a single integer, representing the number of runners assigned to that checkpoint. If there are multiple optimal solutions, you can print any of them.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_power_of_two(num): return num > 0 and (num & (num - 1)) == 0 def max_checkpoints(n): prime_or_power_of_two = [i for i in range(1, n + 1) if is_prime(i) or is_power_of_two(i)] k = 0 checkpoints = [] while n > 0: if n in prime_or_power_of_two: checkpoints.append(n) k += 1 break for i in range(len(prime_or_power_of_two) - 1, -1, -1): if prime_or_power_of_two[i] <= n: checkpoints.append(prime_or_power_of_two[i]) k += 1 n -= prime_or_power_of_two[i] break return k, checkpoints"},{"question":"Alice is conducting experiments on sorting algorithms, and she is particularly interested in the execution times of each algorithm on different sets of data. She has records of execution times for multiple runs of different sorting algorithms in various environments. For simplicity, let\'s work with five algorithms: Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, and Heap Sort. The execution times (in milliseconds) for these algorithms for several runs are provided. Alice wants to determine the average execution time for each algorithm and identify the algorithm with the minimum average execution time. Write a program that takes the execution times of the five algorithms as input and outputs the average execution time of each algorithm and the name of the algorithm with the minimum average execution time. # Input - The input consists of exactly 5 lines. - Each line contains the execution times for an algorithm, provided as space-separated integers. - The first line corresponds to Bubble Sort. - The second line corresponds to Insertion Sort. - The third line corresponds to Merge Sort. - The fourth line corresponds to Quick Sort. - The fifth line corresponds to Heap Sort. # Output - Output 5 lines. Each line should contain the name of the algorithm and its average execution time rounded to 2 decimal places, in the following format: ``` <Algorithm Name>: <Average Time> ``` - Followed by a sixth line that indicates the algorithm with the minimum average execution time in the format: ``` Minimum Average: <Algorithm Name> ``` # Example Input ``` 20 30 25 35 22 18 22 20 21 19 8 9 7 10 8 15 14 16 15 17 12 13 14 11 12 ``` Output ``` Bubble Sort: 26.40 Insertion Sort: 20.00 Merge Sort: 8.40 Quick Sort: 15.40 Heap Sort: 12.40 Minimum Average: Merge Sort ``` # Note - You may assume that there are always at least one run time for each algorithm. - For cases where multiple algorithms have the same minimum average execution time, return the first one based on the input order.","solution":"def calculate_average_execution_times(data): algorithm_names = [\\"Bubble Sort\\", \\"Insertion Sort\\", \\"Merge Sort\\", \\"Quick Sort\\", \\"Heap Sort\\"] algorithms_data = [list(map(int, line.split())) for line in data] averages = [] for i, times in enumerate(algorithms_data): average_time = sum(times) / len(times) averages.append((algorithm_names[i], round(average_time, 2))) min_avg_algorithm = min(averages, key=lambda x: x[1]) result = [] for name, avg in averages: result.append(f\\"{name}: {avg:.2f}\\") result.append(f\\"Minimum Average: {min_avg_algorithm[0]}\\") return result"},{"question":"You are given an integer array nums sorted in non-decreasing order, and an integer target. Write a function to search for target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity. **Example 1:** Input: `nums = [-1,0,3,5,9,12]`, `target = 9` Output: `4` Explanation: 9 exists in nums and its index is 4 **Example 2:** Input: `nums = [-1,0,3,5,9,12]`, `target = 2` Output: `-1` Explanation: 2 does not exist in nums so return -1 **Constraints:** - `1 <= nums.length <= 10^4` - `-10^4 < nums[i], target < 10^4` - All the integers in nums are unique. - nums is sorted in non-decreasing order.","solution":"def search(nums, target): Searches for a target value in a sorted array of integers using binary search. Args: nums (List[int]): A list of integers sorted in non-decreasing order. target (int): The integer value to search for. Returns: int: The index of target if found, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Sarah loves reading books and she has a peculiar way of arranging them on her bookshelf. Her bookshelf is represented as a sequence b1, b2, ..., bn of n integers, where each integer denotes the number of pages in the corresponding book. She wants to rearrange her books in such a manner that no two adjacent books have the same number of pages. Help Sarah determine if it\'s possible to rearrange the books to meet her requirement. If it is possible, output the sequence after rearrangement. If not, print \\"NO\\". The first line contains a single integer n (1 ≤ n ≤ 105) — the number of books. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 109) — the number of pages in each book. Print \\"YES\\" and the rearranged sequence if such a rearrangement exists. Otherwise, print \\"NO\\". Example 1: Input: 5 4 5 4 3 2 Output: YES 4 5 4 3 2 Example 2: Input: 3 2 2 2 Output: NO In the first example, it is possible to rearrange the books such that no two adjacent books have the same number of pages. In the second example, it is not possible since all the books have the same number of pages.","solution":"def rearrange_books(n, books): from collections import Counter import heapq # Count the frequency of each page number count = Counter(books) # If the highest frequency is more than (n + 1) // 2, impossible to arrange max_count = max(count.values()) if max_count > (n + 1) // 2: return \\"NO\\" # Create a max heap based on the negated frequency max_heap = [(-freq, page) for page, freq in count.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_page = 0, None # Reorder the books while max_heap: freq, page = heapq.heappop(max_heap) result.append(page) # If previous used page can be re-entered into the heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_page)) # Update the previous frequency and page prev_freq, prev_page = freq + 1, page return \\"YESn\\" + \\" \\".join(map(str, result)) # Example of how to call `rearrange_books` function # result = rearrange_books(5, [4, 5, 4, 3, 2]) # print(result)"},{"question":"Given a string consisting of lowercase English letters, you are required to perform the following operation exactly once: 1. Choose any two distinct characters x and y from the string. 2. Replace all occurrences of x with y and all occurrences of y with x. Your task is to determine if it is possible to transform the string into a palindrome by performing the operation exactly once. Input: - The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100). Output: For each test case, print \\"YES\\" if it is possible to transform the string into a palindrome by performing the operation exactly once, otherwise print \\"NO\\". Example: Input: 3 aab abc aba Output: YES NO YES","solution":"def can_transform_to_palindrome(t, strings): def is_palindrome(s): return s == s[::-1] results = [] for s in strings: if is_palindrome(s): results.append(\\"YES\\") continue count = {} for ch in s: if ch in count: count[ch] += 1 else: count[ch] = 1 odd_count_chars = [ch for ch in count if count[ch] % 2 != 0] if len(odd_count_chars) > 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Alice has recently learned about hash tables. She has a hash table that uses open addressing with linear probing to resolve collisions. This hash table supports the following operations: 1. `insert x`: Inserts integer `x` into the hash table. If `x` is already in the hash table, it ignores the insert. 2. `delete x`: Deletes integer `x` from the hash table. If `x` is not in the hash table, it ignores the delete. 3. `contains x`: Checks if integer `x` is present in the hash table. It returns `\\"yes\\"` if `x` is present and `\\"no\\"` otherwise. Alice has performed a sequence of these operations and recorded them in a log. However, her cat Leo has knocked over a glass of water, causing her to lose some pages of the log. Leo wants to fix it by adding the minimum number of operations to the log to make it consistent. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) – the number of operations left in Alice\'s log. Each of the following `n` lines describes the operations in the log with the format specified above. All integers in the input are between -10^9 and 10^9 inclusive. The first line of the output should contain a single integer `m` – the minimum possible number of records in the corrected sequence of operations. The next `m` lines should contain the consistent sequence of operations following the specified format, in the order they should be applied. Note that the input sequence of operations must be a subsequence of the output sequence. In the first sample, Alice tries to delete `3`, but `3` is not in the hash table. She then inserts `4` and successfully gets the result of `contains 4` equal to `\\"yes\\"`. In the second sample, Alice checks `contains 1` and gets `\\"no\\"`, so `1` must not be in the table before this operation. She then inserts `1` and successfully observes `\\"yes\\"` on `contains 1`. # Sample Input 1: ``` 3 delete 3 insert 4 contains 4 ``` # Sample Output 1: ``` 3 insert 3 delete 3 insert 4 contains 4 ``` # Sample Input 2: ``` 2 contains 1 insert 1 ``` # Sample Output 2: ``` 2 contains 1 insert 1 ```","solution":"def make_consistent_log(n, operations): table = set() result = [] for operation in operations: op = operation.split() if op[0] == \\"insert\\": x = int(op[1]) if x not in table: table.add(x) result.append(operation) elif op[0] == \\"delete\\": x = int(op[1]) if x in table: table.remove(x) result.append(operation) else: result.append(f\\"insert {x}\\") result.append(operation) elif op[0] == \\"contains\\": x = int(op[1]) if x in table: result.append(f\\"{operation}\\") else: result.append(f\\"insert {x}\\") result.append(f\\"{operation}\\") return result def solve(n, operations): consistent_log = make_consistent_log(n, operations) m = len(consistent_log) print(m) for entry in consistent_log: print(entry)"},{"question":"You are given an array `arr` of `n` integers where each integer represents the elevation at that point. Imagine water pouring over these points so that the water will accumulate in valleys and flow out of peaks. Design an algorithm that calculates the total amount of water that would be trapped in the valleys after a rain. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of elements in the array. - The second line contains `n` space-separated integers representing the array `arr` where each integer `arr[i]` (1 ≤ arr[i] ≤ 100000) is the elevation at index `i`. **Output:** - Print a single integer, the total amount of water trapped. **Example 1:** ``` Input: 6 0 1 0 2 1 0 Output: 1 ``` **Example 2:** ``` Input: 5 3 0 2 0 4 Output: 7 ``` **Explanation for Example 1:** - At elevation `0` there can be no water trapped. - `1 0` We can trap 1 unit of water between the peaks. **Explanation for Example 2:** - Between the peak at elevation `3` and the peak at `4`, we can trap 7 units of water. 3 units get trapped at index 2 and 4 units at index 4. You can assume that if there\'s no elevation higher than the starting or ending point, then the water flows outwards and doesn\'t get trapped there.","solution":"def trap_rain_water(arr): Calculate the total amount of water trapped after raining. :param arr: List of integers representing elevations. :return: Total amount of water trapped. if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i-1], arr[i]) right_max[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], arr[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - arr[i] return water_trapped"},{"question":"Given an array of n integers, your task is to perform m operations. Each operation can be one of the following types: 1. Update: Modify the value at a specific position. 2. Sum: Calculate the sum of all elements within a given range. The input format is as follows: 1. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of elements in the array and the number of operations respectively. 2. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the initial array elements. 3. The following m lines contain the operations in one of the following two formats: - \\"1 x y\\" where 1 indicates an update operation, and x and y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) represent changing the element at position x to y. - \\"2 l r\\" where 2 indicates a sum operation, and l and r (1 ≤ l ≤ r ≤ n) represent the start and end positions of the range for which to calculate the sum. Output: For each sum operation, print the result on a new line. Example: Input: 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 1 5 2 1 5 Output: 6 13 26 Explanation: - The sum of elements from position 1 to 3 initially is 1 + 2 + 3 = 6. - After updating the value at position 3 to 10, the array becomes [1, 2, 10, 4, 5]. - The sum of elements from position 1 to 3 is now 1 + 2 + 10 = 13. - After updating the value at position 1 to 5, the array becomes [5, 2, 10, 4, 5]. - The sum of elements from position 1 to 5 is 5 + 2 + 10 + 4 + 5 = 26.","solution":"def process_operations(n, m, array, operations): result = [] for operation in operations: parts = operation.split() if parts[0] == \\"1\\": x = int(parts[1]) - 1 y = int(parts[2]) array[x] = y elif parts[0] == \\"2\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 result.append(sum(array[l:r + 1])) return result"},{"question":"You are given an array of integers where each integer represents the height of a column of water in a histogram. Your goal is to calculate how much water can be trapped between the columns after a rain. For example, given the array [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], the histogram looks like: ``` # # # # 0123456789 ``` The total amount of water trapped would be 6 units. Input Format: - The first line contains an integer `t` (1 ≤ t ≤ 100) - the number of test cases. - Each of the next `t` lines contains an integer `n` (1 ≤ n ≤ 1000) followed by `n` integers representing the heights of the columns in the histogram. Output Format: - For each test case, print a single integer - the total amount of trapped water. Example: Input: ``` 2 12 0 1 0 2 1 0 1 3 2 1 2 1 6 4 2 0 3 2 5 ``` Output: ``` 6 9 ``` Note: To solve this problem, you might want to use a two-pointer approach or dynamic programming to calculate the trapped water efficiently.","solution":"def trap_water(height): if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped def rainwater_trapping(t, test_cases): results = [] for case in test_cases: heights = case[1:] results.append(trap_water(heights)) return results"},{"question":"You are given a 2D grid of size m x n where each cell represents a street block. The grid contains blocked cells denoted by 1 and unblocked cells denoted by 0. You start at the top-left corner of the grid (0, 0) and you need to reach the bottom-right corner of the grid (m-1, n-1). You can only move up, down, left, or right, and you cannot move through blocked cells. Additionally, you can remove at most one blocked cell to make your path from (0, 0) to (m-1, n-1) possible. Write a function `min_path_with_one_removal` that finds the minimum number of steps required to travel from the top-left corner to the bottom-right corner of the grid, possibly removing one blocked cell if necessary. If there is no valid path, the function should return -1. The function should take the following parameters: - `grid` (List[List[int]]): a 2D list representing the grid. The function should return an integer representing the minimum number of steps to traverse the grid as described. # Example: ```python grid = [ [0, 1, 0], [1, 0, 1], [0, 0, 0] ] result = min_path_with_one_removal(grid) print(result) # Output should be 4 ``` # Constraints: - 1 ≤ m, n ≤ 200 - grid[i][j] is either 0 or 1. - There is guaranteed to be at least one valid path if a blocked cell can be removed.","solution":"from collections import deque def min_path_with_one_removal(grid): Finds the minimum number of steps required to travel from the top-left corner to the bottom-right corner of the grid, possibly removing one blocked cell if necessary. Args: grid (List[List[int]]): a 2D list representing the grid. Returns: int: Minimum number of steps to traverse the grid; -1 if no valid path. m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if not grid or grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 queue = deque([(0, 0, 0, 0)]) # (x, y, distance, removed) visited = set([(0, 0, 0)]) while queue: x, y, dist, removed = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: new_removed = removed + grid[nx][ny] if new_removed <= 1 and (nx, ny, new_removed) not in visited: visited.add((nx, ny, new_removed)) queue.append((nx, ny, dist + 1, new_removed)) return -1"},{"question":"A toy factory has recently launched a new series of toys. Each toy is represented by a string consisting of lowercase alphabets. Each letter in the string represents a specific type of toy component used in manufacturing that toy. The factory manager wants to analyze the diversity of toy components to plan for resource allocation. Given a string s, calculate the length of the longest substring that contains at most `k` distinct characters. For example, given s = \\"eceba\\" and k = 2, the answer is \\"ece\\" with length 3. You have to implement a function `int longestSubstringWithKDistinct(string s, int k)`, where: - `s` is a string with 1 ≤ |s| ≤ 10^5, and - `k` is an integer with 1 ≤ k ≤ |s|. If there are multiple answers, return the length of any one of the longest substrings. *Example 1: Input: s = \\"eceba\\", k = 2 Output: 3 Explanation: The substring is \\"ece\\" which has length 3.* *Example 2: Input: s = \\"aa\\", k = 1 Output: 2 Explanation: The substring is \\"aa\\" which has length 2.*","solution":"def longestSubstringWithKDistinct(s, k): Returns the length of the longest substring that contains at most k distinct characters. :param s: str - input string :param k: int - number of distinct characters :return: int - length of the longest substring with at most k distinct characters n = len(s) if n * k == 0: return 0 left = 0 right = 0 max_length = 1 char_map = {} while right < n: char_map[s[right]] = right right += 1 if len(char_map) == k + 1: del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given a list of distinct integers and a target value. Your task is to determine all unique combinations of numbers in the list that sum up to the target value. Each number may be used multiple times in the combination. Write a function `findCombinations` that accepts two arguments: 1. `nums`: a list of distinct integers (1 ≤ len(nums) ≤ 20, 1 ≤ nums[i] ≤ 50). 2. `target`: an integer (1 ≤ target ≤ 500). The function should return a list of lists, where each inner list is a combination of numbers that add up to the target value. The combinations should be sorted in non-decreasing order, and the result list should not contain duplicate combinations. # Example ```python def findCombinations(nums, target): # Your implementation here # Example usage nums = [2, 3, 6, 7] target = 7 print(findCombinations(nums, target)) ``` **Input:** ```txt nums = [2, 3, 6, 7], target = 7 ``` **Output:** ```txt [ [2, 2, 3], [7] ] ``` **Explanation:** - The two unique combinations that sum to the target 7 are [2, 2, 3] and [7]. - [2, 3, 2] or [7] are considered the same as [2, 2, 3] and [7], respectively. Hence, duplicates are to be avoided. Provide a valid implementation and ensure the function correctly outputs all possible combinations as specified.","solution":"def findCombinations(nums, target): def backtrack(start, path, target): if target == 0: result.append(list(path)) return elif target < 0: return for i in range(start, len(nums)): path.append(nums[i]) backtrack(i, path, target - nums[i]) path.pop() nums.sort() result = [] backtrack(0, [], target) return result"},{"question":"A company needs to manage its inventory system, specifically the movement and allocation of storage units in its warehouse. There are two storage areas in the warehouse: Area A and Area B. Each area has a limited number of available storage slots, s1 for Area A and s2 for Area B. Each slot can store only one storage unit. When a new shipment arrives, the company needs to allocate units to either Area A or Area B based on the following policy: 1. If there is a free slot in Area A, prioritize storing the unit in Area A until it is full. 2. If Area A is full, store units in Area B. 3. If both areas are full, reject any further units. You are given two integers, s1 and s2 (1 ≤ s1, s2 ≤ 10^6), which represent the capacity of each storage area, and an integer array shipments where each element represents a shipment of a certain number of units arriving sequentially. Your task is to determine the final number of units stored in Area A and Area B after all shipments are processed. Write a function: ```python def allocate_storage(s1, s2, shipments): # Implementation here pass ``` **Input** - s1: an integer representing the capacity of Area A. - s2: an integer representing the capacity of Area B. - shipments: a list of integers where each element represents the number of units in each incoming shipment. **Output** Return a tuple (units_in_A, units_in_B) representing the final count of units stored in Area A and Area B, respectively. **Example** ```python s1 = 5 s2 = 7 shipments = [3, 4, 2, 1, 6] result = allocate_storage(s1, s2, shipments) print(result) # (5, 5) ``` Explanation: - The first shipment of 3 units is stored in Area A, leaving 2 slots. - The second shipment of 4 units fills the remaining 2 slots in Area A and stores 2 units in Area B, leaving 5 slots. - The third shipment of 2 units is fully stored in Area B, leaving 3 slots. - The fourth shipment of 1 unit is stored in Area B, leaving 2 slots. - The fifth shipment of 6 units fills the remaining 2 slots in Area B; the remaining 4 units are rejected as there are no more available slots in either area.","solution":"def allocate_storage(s1, s2, shipments): Allocate storage units to Area A and Area B based on given policy. Parameters: s1 (int): Capacity of Area A. s2 (int): Capacity of Area B. shipments (List[int]): List of integers where each element represents the number of units in each incoming shipment. Returns: (int, int): A tuple representing the number of units in Area A and Area B respectively after all shipments are processed. units_in_A = 0 units_in_B = 0 for shipment in shipments: if units_in_A < s1: if shipment + units_in_A <= s1: units_in_A += shipment shipment = 0 else: shipment -= (s1 - units_in_A) units_in_A = s1 if shipment > 0 and units_in_B < s2: if shipment + units_in_B <= s2: units_in_B += shipment shipment = 0 else: shipment -= (s2 - units_in_B) units_in_B = s2 if shipment > 0: # Remaining shipments are rejected as both areas are full. break return (units_in_A, units_in_B)"},{"question":"You are given an n×m matrix where each cell contains a positive integer. You need to find the minimum path sum from the top-left corner to the bottom-right corner of the matrix while only being allowed to move either down or right at any point in time. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m integers representing the matrix — each integer is between 1 and 1000. The sum of integers on the path does not exceed 10^6. Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 7 Explanation: One of the possible paths is (1→3→1→1→1), with the minimum path sum being 7.","solution":"def min_path_sum(matrix): Compute the minimum path sum from the top-left to the bottom-right corner of a matrix. The moves allowed are only to the right or down. n = len(matrix) m = len(matrix[0]) # Create a dp array with the same dimensions as the matrix dp = [[0]*m for _ in range(n)] # Initialize the dp array dp[0][0] = matrix[0][0] # Initialize the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1]"},{"question":"A company has a sequence of servers that need maintenance, represented by an array of integers. Each element in the array represents the number of service hours required for each server. The company has two technicians available to perform the maintenance, but only one technician can work on a server at any given time, and they cannot switch servers during a service session. Your task is to assign the servers to the technicians in such a way that the service time is balanced as evenly as possible between the two technicians. Write a function that takes an array of integers `servers` and returns the minimum possible difference in the total service time between the two technicians after assigning all the servers. The function signature is: ```python def balance_service_time(servers: List[int]) -> int: ``` # Constraints - The length of the array `servers` will not exceed 100. - Each integer in the array will be between 1 and 10000. # Input - An array of integers `servers` representing the service hours required for each server. # Output - An integer representing the minimum possible difference in the total service time between the two technicians. # Example Example 1: **Input:** ```python servers = [3, 1, 4, 2, 2] ``` **Output:** ```python 0 ``` **Explanation:** One optimal way to assign the servers is: - Technician 1: [3, 2] => Total time = 3 + 2 = 5 - Technician 2: [1, 4, 2] => Total time = 1 + 4 + 2 = 7 There are other valid distributions that also achieve the minimal difference of 0, such as distributing the servers as: - Technician 1: [3, 2, 2] => Total time = 3 + 2 + 2 = 7 - Technician 2: [1, 4] => Total time = 1 + 4 = 5 In this distribution, the total times are reversed, leading to the same absolute difference of 2, thus the minimum possible difference in this case is 0.","solution":"from typing import List def balance_service_time(servers: List[int]) -> int: total_time = sum(servers) n = len(servers) # Create a DP array, where dp[i] represents whether a subset with sum i is possible. dp = [False] * (total_time // 2 + 1) dp[0] = True for time in servers: for j in range(total_time // 2, time - 1, -1): dp[j] = dp[j] or dp[j - time] # Find the largest possible sum (<= total_time // 2) that can be achieved for i in range(total_time // 2, -1, -1): if dp[i]: sum1 = i break sum2 = total_time - sum1 return abs(sum2 - sum1)"},{"question":"You are given a binary string consisting of only \'0\'s and \'1\'s. You can perform the following operation multiple times: 1. Choose any substring of the binary string which starts with \'0\' and ends with \'1\'. 2. Flip all the bits in this substring (i.e., change \'0\' to \'1\' and \'1\' to \'0\'). Your task is to convert the entire string to all \'0\'s using the minimum number of operations. The first line contains a single integer n (1 le n le 10^5) — length of the binary string. The second line contains a binary string of length n. Print a single integer — the minimum number of operations required to convert the binary string to all \'0\'s. Example: Input: ``` 5 11010 ``` Output: ``` 2 ``` Explanation: In the first step, choose the substring from index 2 to index 5 (\\"101\\"). Flip all bits to get \\"01100\\". In the second step, choose the substring from index 1 to index 2 (\\"01\\"). Flip all bits to get \\"00000\\".","solution":"def min_operations_to_zero(bin_string): Takes a binary string and returns the minimum number of operations required to convert the binary string to all \'0\'s using the given operation. Parameters: bin_string (str): The binary string. Returns: int: The minimum number of operations. # We find the number of blocks of \'1\'s in the binary string n = len(bin_string) count_of_ones = 0 for i in range(n): if bin_string[i] == \'1\': if i == 0 or bin_string[i-1] != \'1\': count_of_ones += 1 return count_of_ones # Example usage: # print(min_operations_to_zero(\\"11010\\")) # Output: 2"},{"question":"You are given a list of integers representing daily temperatures. Your task is to find the number of days you would have to wait until a warmer temperature for each day. If there is no future day for which this is possible, put zero for that day. The first line contains a single integer n (1 le n le 10^5) — the number of days. The second line contains n integers t_1, t_2, dots, t_n (1 le t_i le 10^4) — the daily temperatures. Print n integers — the number of days you have to wait until a warmer temperature for each day. If there is no solution, print 0 for that day. # Example **Input:** ``` 8 73 74 75 71 69 72 76 73 ``` **Output:** ``` 1 1 4 2 1 1 0 0 ``` **Explanation:** - For the first day (73), you have to wait 1 day to get a warmer temperature (74). - For the second day (74), you have to wait 1 day to get a warmer temperature (75). - For the third day (75), you have to wait 4 days to get a warmer temperature (76). - For the fourth day (71), you have to wait 2 days to get a warmer temperature (72). - For the fifth day (69), you have to wait 1 day to get a warmer temperature (72). - For the sixth day (72), you have to wait 1 day to get a warmer temperature (76). - For the seventh day (76), there is no future day with a warmer temperature. - For the eighth day (73), there is no future day with a warmer temperature.","solution":"def daily_temperatures(temperatures): Given a list of daily temperatures, returns a list where for each day tells how many days you would have to wait until a warmer temperature. If there is no future day for a warmer temperature, put zero for that day. n = len(temperatures) answer = [0] * n stack = [] # This will store indices of the temperatures list for current_day in range(n): # While the stack is not empty and the current temperature is higher than the temperature # corresponding to the index stored at the top of the stack while stack and temperatures[current_day] > temperatures[stack[-1]]: previous_day = stack.pop() answer[previous_day] = current_day - previous_day stack.append(current_day) return answer"},{"question":"You are given a list of integers. Your task is to find three distinct integers in the list that sum up to a specific target value. If there are multiple such triplets, return the one with the lexicographically smallest order. If no such triplets exist, return an empty list. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the list. - The second line contains n integers, representing the elements of the list. - The third line contains a single integer target, representing the target sum. Output: - Print three integers that form the triplet, in lexicographically smallest order. If there are multiple valid solutions, print the one with the smallest first number, and if there are ties, the one with the smallest second number. If no valid triplet exists, print an empty list. Example: Input: 6 1 2 3 4 5 6 10 Output: 1 3 6 In the example above, the triplet (1, 3, 6) sums up to the target value of 10, and it is the lexicographically smallest among the possible triplets that sum to 10.","solution":"def find_three_sum_triplet(arr, target): Finds three distinct integers in the list that sum up to the target. Returns the triplet in lexicographically smallest order, or an empty list if no such triplet exists. arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == target: return [arr[i], arr[left], arr[right]] elif total < target: left += 1 else: right -= 1 return [] # Example usage print(find_three_sum_triplet([1, 2, 3, 4, 5, 6], 10)) # Output: [1, 3, 6]"},{"question":"The developers of a small company\'s internal tool have requested a feature to determine the longest word within a string that is not broken by a space. However, they face a challenge where some of the words might be split by hyphens. Your task is to write a function that identifies the longest continuous sequence of characters in the given string, considering hyphenated words as a single word. Given a string consisting of lowercase Latin letters, spaces, and hyphens, find and return the longest contiguous word. If there are multiple words of the same maximum length, return the first one. The input string is guaranteed to have at least one word and all words are separated by exactly one space. Hyphens are used only to connect parts of hyphenated words and will not appear at the beginning or end of a word. Function signature: ```python def longest_word(s: str) -> str: ``` # Input - `s`: a string `s` consisting of lowercase Latin letters, spaces, and hyphens where: - 1 ≤ |s| ≤ 1000 - s contains at least one word # Output - A string representing the longest word in the given string `s`. # Example Input ```plaintext this is a test-string for longest-word detection ``` Output ```plaintext longest-word ``` Input ```plaintext elephant plethora a-better place-to-go ``` Output ```plaintext place-to-go ``` Explanation: - In the first example, \\"longest-word\\" is the longest word, considering the hyphen-connected parts. - In the second example, \\"place-to-go\\" is the longest word. Although \\"plethora\\" and \\"a-better\\" are also long, \\"place-to-go\\" is checked first and has the longest length at 11 characters.","solution":"def longest_word(s: str) -> str: words = s.split(\' \') longest = \'\' for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"A gardener wants to plant flowers in a rectangular garden plot. The plot has a width W and height H. The gardener has N types of flowers, each type i can cover an area of Ai square units with a single plant. The gardener wants to ensure that every square unit of the garden plot is covered by flower plants, and he can plant multiple plants of the same type. Additionally, the gardener wants to do this using the fewest possible number of flower types. Given the dimensions of the garden plot and the respective areas covered by each flower type, determine the minimum number of flower types needed to completely cover the garden plot. **Input:** - The first line contains two integers, W (1 ≤ W ≤ 10^5) and H (1 ≤ H ≤ 10^5), the width and height of the garden plot. - The second line contains an integer N (1 ≤ N ≤ 10^5), the number of flower types. - Each of the next N lines contains an integer Ai (1 ≤ Ai ≤ 10^10), the area covered by a single plant of the i-th flower type. **Output:** - Output a single integer m, the minimum number of flower types needed to completely cover the garden plot. If it is impossible to cover the entire plot using any combination of the available flower types, output -1. **Example:** **Input:** ``` 10 20 3 200 50 500 ``` **Output:** ``` 1 ``` **Explanation:** The gardener can use the flower type that covers 200 square units with each plant to completely cover the garden plot. Since the area of the garden plot is 200 square units and this flower type alone can cover it, only 1 type is needed.","solution":"def min_flower_types(W, H, flower_types): Determines the minimum number of flower types needed to completely cover the garden plot. Parameters: - W: Width of the garden plot - H: Height of the garden plot - flower_types: List of areas covered by each flower type Returns: - Minimum number of flower types needed or -1 if it\'s not possible to cover the whole area total_area = W * H flower_types.sort(reverse=True) covered_area = 0 flower_count = 0 for flower in flower_types: covered_area += flower flower_count += 1 if covered_area >= total_area: return flower_count return -1"},{"question":"You are given a series of shelves, each of which can hold a certain number of books. Each shelf can hold at most a[ind] books. You have several books to place into the shelves, and your goal is to fit all the books into the shelves while balancing the total weight evenly across the shelves to minimize the maximum weight any single shelf holds. Each book has a specific weight, and you need to distribute the books across the shelves in such a manner that the heaviest loaded shelf has the minimum possible weight. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of shelves and the number of books. - The second line contains n space-separated integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 1000) — the maximum number of books each shelf can hold. - The third line contains m space-separated integers b[1], b[2], ..., b[m] (1 ≤ b[i] ≤ 1000) — the weights of the books to be placed. Output: - The minimum possible weight the heaviest loaded shelf can hold. Example: Input: 3 5 3 2 1 4 3 2 7 1 Output: 7 Explanation: - You can place the books in the following manner: - Shelf 1 holds books with weights [4, 1], total weight = 5. - Shelf 2 holds books with weights [3, 2], total weight = 5. - Shelf 3 holds the book with weight [7], the heaviest loaded shelf has a weight of 7. Please start with an efficient algorithm to solve this problem, such as binary search in conjunction with a decision check to ensure you can place all books within the calculated maximum possible weight per shelf.","solution":"def canPlaceBooks(maxWeight, shelves, books): Helper function to check if all books can be placed such that no shelf exceeds maxWeight. shelf_capacities = shelves[:] current_shelf = 0 current_weight = 0 for book in books: if current_weight + book <= maxWeight: current_weight += book else: current_shelf += 1 if current_shelf >= len(shelf_capacities) or book > maxWeight: return False current_weight = book return True def minimumHeaviestLoad(n, m, a, b): Return the minimum possible weight the heaviest loaded shelf can hold. Parameters: n (int): Number of shelves. m (int): Number of books. a (list): List of maximum number of books each shelf can hold. b (list): List of weights of the books to be placed. Returns: int: Minimum possible weight the heaviest loaded shelf can hold. b.sort(reverse=True) low, high = max(b), sum(b) result = high while low <= high: mid = (low + high) // 2 if canPlaceBooks(mid, a, b): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are given an undirected graph G with n vertices and m edges. You need to determine the number of connected components in the graph. # Input The first line contains two integers n and m (1 leq n, m leq 10^5) — the number of vertices and edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 leq u, v leq n), representing an undirected edge between vertices u and v. # Output Print one integer — the number of connected components in the graph. # Example Input ``` 7 6 1 2 2 3 3 4 5 6 6 7 7 5 ``` Output ``` 2 ``` In the example above, there are two connected components: 1. {1, 2, 3, 4} 2. {5, 6, 7}","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) for vertex in range(1, n + 1): if vertex not in visited: visited.add(vertex) bfs(vertex) components_count += 1 return components_count"},{"question":"Eric is in love with patterns. One day, he noticed that he can generate a fascinating pattern using a rectangular matrix filled with zeroes and ones. Eric defines a \\"pattern repetition score\\" as the maximum number of times a cell\'s value (0 or 1) appears consecutively in any row or column of the matrix. You are given a binary matrix of size m times n. Your task is to calculate the pattern repetition score of the matrix. **Input:** - The first line contains two integers, m and n (1 leq m, n leq 1000), the number of rows and columns in the matrix. - Each of the following m lines contains a binary string of length n, representing the rows of the matrix. **Output:** - Print a single integer, the pattern repetition score of the matrix. **Example:** **Input:** ``` 3 5 10101 11110 00001 ``` **Output:** ``` 4 ``` **Explanation:** In the given example, the maximum repetition of the same value consecutively is found in the second row. The sequence \'1111\' of length 4 has the highest repetition score.","solution":"def pattern_repetition_score(m, n, matrix): max_score = 0 # Check for maximum repetition score in rows for row in matrix: current_score = 1 max_row_score = 1 for i in range(1, n): if row[i] == row[i - 1]: current_score += 1 else: current_score = 1 max_row_score = max(max_row_score, current_score) max_score = max(max_score, max_row_score) # Check for maximum repetition score in columns for col in range(n): current_score = 1 max_col_score = 1 for row in range(1, m): if matrix[row][col] == matrix[row - 1][col]: current_score += 1 else: current_score = 1 max_col_score = max(max_col_score, current_score) max_score = max(max_score, max_col_score) return max_score # Example usage: # m, n = 3, 5 # matrix = [\\"10101\\", \\"11110\\", \\"00001\\"] # print(pattern_repetition_score(m, n, matrix)) # Output: 4"},{"question":"You are given an n x n grid (1-based index) where each cell can either contain a 0 or a 1. A person can start from any cell containing a 1 and can move to any of its neighboring cells (up, down, left, right) if the neighboring cell contains a 1 as well. The person keeps moving until they can no longer move to a neighboring cell containing a 1. Your task is to write a function that, given the grid, will mark all the 1\'s that are part of the largest connected component of 1\'s in the grid with the value 2. If there are multiple largest connected components, you can mark any one of them. The function should return the updated grid. # Input - The first line contains a single integer n (1 ≤ n ≤ 100), the size of the grid. - Each of the next n lines contains n integers (either 0 or 1), representing the grid. # Output - Output an updated grid where all the 1\'s that are part of the largest connected component are marked with the value 2. # Example Input: ``` 5 1 1 0 0 0 1 0 0 0 1 0 0 1 1 0 0 0 1 1 0 1 0 0 0 1 ``` Output: ``` 2 2 0 0 0 2 0 0 0 1 0 0 2 2 0 0 0 2 2 0 1 0 0 0 1 ``` # Note: In the example grid, there are multiple connected components: - (1, 1), (1, 2), (2, 1) is one connected component of 1\'s - (2, 5) is another connected component of 1\'s - (4, 3), (4, 4), (5, 3), (5, 4) is another connected component of 1\'s - (5, 1) is another connected component of 1\'s The largest connected component is (4, 3), (4, 4), (5, 3), (5, 4), so those positions are changed to 2 in the output. # Constraints: - The grid is guaranteed to have at least one 1.","solution":"def mark_largest_component(grid): n = len(grid) visited = [[False for _ in range(n)] for _ in range(n)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(x, y): stack = [(x, y)] component = [] while stack: cx, cy = stack.pop() if not visited[cx][cy]: visited[cx][cy] = True component.append((cx, cy)) for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 1 and not visited[nx][ny]: stack.append((nx, ny)) return component largest_component = [] for i in range(n): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: component = dfs(i, j) if len(component) > len(largest_component): largest_component = component for x, y in largest_component: grid[x][y] = 2 return grid"},{"question":"Emily enjoys collecting rare stamps, and she noticed that the rarity of each stamp is defined by an integer that ranges from 1 to N. She has observed that she can predict the market value of her stamp collection based on a special rarity pattern. A collection will have a higher market value if it contains stamps that follow a specific sequence where each subsequent stamp has either an equal or higher rarity than the previous one. Emily wants to determine the length of the longest subsequence of stamps from her collection that satisfies the increasing rarity condition. Write a program that, given a list of integers denoting the rarity values of the stamps, finds the length of the longest increasing subsequence (LIS) of those integers. # Input - The first line contains a single integer T (1 leq T leq 100), the number of test cases. - Each test case begins with a single integer N (1 le N le 10^4), the number of stamps in the collection. - The second line contains N space-separated integers A_1, A_2, ldots, A_N (1 le A_i le 10^6), the rarity values of the stamps in the collection. # Output For each test case, output a single integer which is the length of the longest increasing subsequence of the list provided. # Example Input ``` 2 6 5 2 8 6 3 6 9 7 5 10 20 10 30 40 ``` Output ``` 4 3 ``` # Explanation In the first test case the longest increasing subsequence is [2, 3, 6, 9] with length 4. In the second test case the longest increasing subsequence is [10, 20, 30, 40] with length 3. # Note The problem should be approached efficiently to handle large N values within constraints. Consider using dynamic programming techniques or binary search for optimal performance.","solution":"def longest_increasing_subsequence(nums): import bisect if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = longest_increasing_subsequence(arr) results.append(result) return results # Example usage if __name__ == \\"__main__\\": T = 2 test_cases = [ (8, [5, 2, 8, 6, 3, 6, 9, 7]), (5, [10, 20, 10, 30, 40]) ] results = process_test_cases(T, test_cases) for res in results: print(res) # Output should be: 4, 3"},{"question":"# Problem Statement Given an undirected graph with n nodes and m edges, determine the number of connected components in the graph. A connected component is a maximal set of vertices such that there is a path between any pair of vertices in this set. # Input - The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 10^5) - the number of vertices and edges respectively. - Each of the next m lines contains two integers u_i and v_i (1 leq u_i, v_i leq n) indicating that there is an edge between u_i and v_i. # Output - Print a single integer denoting the number of connected components in the graph. # Example Input ``` 5 4 1 2 2 3 4 5 3 4 ``` Output ``` 1 ``` # Note In the example above, all vertices are connected either directly or indirectly, forming a single connected component. # Constraints - It is guaranteed that the graph does not have multiple edges between the same pair of vertices. - The graph does not have self-loops.","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) visited = [False] * n num_components = 0 for i in range(n): if not visited[i]: num_components += 1 visited[i] = True bfs(i, visited, adj_list) return num_components"},{"question":"The kingdom of Aerthia is planning to organize a grand festival where their magical citizens, the wizards and witches, will showcase their spell-casting abilities. Each wizard and witch have unique abilities with some being able to cast multiple spells in one go. The kingdom\'s council wants to carefully arrange these spell sessions in such a way that each session contains exactly one spell from each wizard and witch available that day. Each wizard or witch i can cast exactly si spells, and different wizards or witches might have different numbers of spells they can cast. The council needs to determine how many ways they can arrange these spell-casting sessions given the number of spells each magical citizen can cast. You are given an integer number n which is the number of wizards and witches, followed by an array s of size n where si represents the number of spells the i-th wizard or witch can cast. Your task is to find out how many unique spell-casting sessions can be arranged. A session is unique if the order of the spells from different wizards and witches is distinct. The first line of the input contains a single integer n (1 ≤ n ≤ 18) indicating the number of wizards and witches. The second line contains n space-separated integers si (1 ≤ si ≤ 10^6) representing the number of spells each wizard or witch can cast. Output a single integer which is the total number of unique spell-casting sessions that can be arranged. # Example **Input:** ``` 3 2 3 1 ``` **Output:** ``` 6 ``` # Explanation In this example, there are 3 wizards or witches. - The 1st can cast 2 spells. - The 2nd can cast 3 spells. - The 3rd can cast 1 spell. So, there are 2 * 3 * 1 = 6 unique ways to arrange the spells in one session.","solution":"from math import prod def unique_spell_casting_sessions(n, s): Calculate the total number of unique spell casting sessions. Parameters: - n: integer, the number of wizards and witches. - s: list of integers, where each integer si is the number of spells the ith wizard or witch can cast. Returns: - Integer, the total number of unique spell casting sessions. return prod(s)"},{"question":"You are given a list of integers representing the heights of consecutive buildings on a street. Your task is to find the maximum number of buildings that can receive direct sunlight, assuming the sunlight comes from the left (the last building on the list). A building can receive sunlight if it is taller than all the buildings before it. The first line contains an integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the buildings. Print a single integer — the maximum number of buildings that can receive direct sunlight.","solution":"def max_sunny_buildings(heights): Returns the maximum number of buildings that can receive direct sunlight. if not heights: return 0 max_height = heights[0] sunny_count = 1 for height in heights[1:]: if height > max_height: sunny_count += 1 max_height = height return sunny_count"},{"question":"Ryan loves arranging flowers in his garden. He has n different types of flowers, and he can plant them along a single row. However, Ryan wants no two adjacent flowers to be the same type. Help Ryan determine in how many distinct ways he can arrange the flowers in the row. The single line contains an integer n (1 ≤ n ≤ 20). Print a single integer — the number of distinct arrangements in which no two adjacent flowers are of the same type. For example, if n = 3, Ryan can arrange the flowers in the following distinct ways: 1. 1, 2, 3 2. 1, 3, 2 3. 2, 1, 3 4. 2, 3, 1 5. 3, 1, 2 6. 3, 2, 1 Hence, the output should be 6. If n = 1, there is only one way to arrange the flower, which is {1}, and thus the output should be 1.","solution":"from math import factorial def distinct_arrangements(n): Determines the number of distinct arrangements where no two adjacent flowers are of the same type. This problem is equivalent to finding the number of derangements (permutations where no element appears in its original position) for a given n. if n == 1: return 1 derangements = [0] * (n + 1) derangements[1] = 0 if n > 1: derangements[2] = 1 for i in range(3, n + 1): derangements[i] = (i-1) * (derangements[i-1] + derangements[i-2]) return derangements[n]"},{"question":"Given an array of integers, your task is to find the length of the longest subarray that contains the most frequent element at least one time. For example, if the input array is [1, 3, 2, 1, 4, 1, 5, 6], the most frequent element is 1 (appearing 3 times). The longest subarray that contains at least one 1 is the entire array itself, thus the answer is 8. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100000) representing the size of the array. - The second line contains n integers a1, a2, ..., an separated by spaces (1 ≤ ai ≤ 100000), representing the elements of the array. **Output:** Print a single integer representing the length of the longest subarray that contains the most frequent element at least once. **Example:** ``` Input: 8 1 3 2 1 4 1 5 6 Output: 8 ```","solution":"def longest_subarray_with_most_frequent_element(n, arr): from collections import Counter # Step 1: Identify the most frequent element frequency_count = Counter(arr) most_frequent_element = max(frequency_count, key=frequency_count.get) # Step 2: Find all subarrays containing most frequent element and determine the longest one longest_subarray_length = 0 current_length = 0 contains_most_frequent = False for num in arr: current_length += 1 if num == most_frequent_element: contains_most_frequent = True if contains_most_frequent: subarray_length = current_length if subarray_length > longest_subarray_length: longest_subarray_length = subarray_length return longest_subarray_length"},{"question":"Given an array of integers, return the length of the longest contiguous subarray where the difference between the maximum and minimum values in that subarray is at most a given limit. **Input:** - An integer array `arr` containing `n` integers (1 ≤ `n` ≤ 10^5). - An integer `limit` (0 ≤ `limit` ≤ 10^9). **Output:** - An integer representing the length of the longest contiguous subarray where the difference between the maximum and minimum values is at most `limit`. **Examples:** 1. **Input:** `arr = [8,2,4,7]`, `limit = 4` **Output:** `2` **Explanation:** The longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most `4` is `[2,4]` or `[4,7]`. 2. **Input:** `arr = [10,1,2,4,7,2]`, `limit = 5` **Output:** `4` **Explanation:** The longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most `5` is `[2,4,7,2]`. 3. **Input:** `arr = [4,2,2,2,4,4,2,2]`, `limit = 0` **Output:** `3` **Explanation:** The longest contiguous subarray where the absolute difference between the maximum and minimum elements is `0` is `[2,2,2]`. # Function Signature ```python def longest_subarray(arr: List[int], limit: int) -> int: # your code here ```","solution":"from collections import deque from typing import List def longest_subarray(arr: List[int], limit: int) -> int: Returns the length of the longest contiguous subarray where the difference between the maximum and minimum values in that subarray is at most the given limit. # Deques to keep track of the maximum and minimum of the current window max_deque = deque() min_deque = deque() left = 0 max_length = 0 for right in range(len(arr)): # Update max_deque while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() max_deque.append(right) # Update min_deque while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() min_deque.append(right) # Check window validity while arr[max_deque[0]] - arr[min_deque[0]] > limit: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() # Update the max_length max_length = max(max_length, right - left + 1) return max_length"},{"question":"**Problem Statement:** In a faraway galaxy, there is a species of robots that communicate using binary sequences. Each robot has a unique binary identifier, which is a string of \'0\'s and \'1\'s. The robots often undergo maintenance which might change their communication sequences. To keep track of changes, the robots utilize a special system that logs each alteration as an event. Each event is either a change in the binary identifier of a robot or a query about the similarity of a robot’s identifier with a given binary pattern over a specified segment. Your task is to implement this system for the robots. The system will start with the initial binary identifier of a robot and process a series of events. Each event can either be an update to the identifier or a query about the similarity of the identifier with a binary pattern over a specified range. # Input Format: 1. The first line contains the string `id` (1 ≤ |id| ≤ 10^5) that represents the initial binary identifier of the robot. 2. The next line contains a single integer `q` (1 ≤ q ≤ 10^5) — the number of events. 3. The following `q` lines describe the events. Each event is in one of the following formats: - `1 x y` (change the character at position `x` in the identifier to `y`; `x` is 1-based and `y` is either \'0\' or \'1\') - `2 l r p` (count the number of bits in the segment from `l` to `r` of the identifier that match the pattern `p`; `l` and `r` are 1-based, and `p` is a binary string with length equal to `r - l + 1`) # Output Format: For each query of the second type, print a single integer in a new line — the count of matching bits in the specified segment. # Example: **Input:** ``` 1100101 3 2 1 4 0110 1 3 0 2 2 5 1000 ``` **Output:** ``` 2 3 ``` # Explanation: - Initial binary identifier: 1100101 - First query: compare segment from position 1 to 4 with pattern \\"0110\\". There are 2 matches (positions 2 and 3). - Maintenance event: change character at position 3 to \'0\', resulting in identifier 1000101. - Second query: compare segment from position 2 to 5 with pattern \\"1000\\". There are 3 matches (positions 2, 4, and 5). Help the robots maintain accurate communication logs and efficiently track identifier changes and pattern matches!","solution":"def robot_system(id, queries): Processes a list of update and query events on the initial binary identifier. Args: id (str): the initial binary identifier of the robot. queries (list of tuples): a list of (event_type, *params) representing the events. Returns: list: a list of results for query events. id_list = list(id) result = [] for query in queries: if query[0] == 1: # Change event: 1 x y _, x, y = query id_list[x - 1] = y elif query[0] == 2: # Query event: 2 l r p _, l, r, p = query segment = id_list[l - 1:r] match_count = sum(1 for i in range(len(p)) if segment[i] == p[i]) result.append(match_count) return result"},{"question":"Consider an array of integers where each integer represents the number of products sold on a particular day. You need to determine the maximum number of consecutive days in which the sales strictly increased each day. For example: Given the array `[5, 6, 3, 5, 7, 8, 2, 6, 9, 10, 1]`, - The maximum number of consecutive days with strictly increasing sales is 4 (days with sales `[5, 7, 8, 2]`, `[6, 9, 10, 1]`). Input: - The first line contains an integer `n` (1 le n le 10^5) — the length of the array. - The second line contains `n` integers `a_i` (1 le a_i le 10^9) — the elements of the array. Output: - Print one integer, the length of the longest contiguous subarray with strictly increasing elements. Example: Input: ``` 11 5 6 3 5 7 8 2 6 9 10 1 ``` Output: ``` 4 ```","solution":"def longest_increasing_subarray_length(arr): Determines the maximum number of consecutive days in which the sales strictly increased each day. Args: arr (List[int]): The list of integers representing products sold each day. Returns: int: The length of the longest contiguous subarray with strictly increasing elements. n = len(arr) if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are managing a queue system for a hospital. There are three types of operations that can be performed on this queue: 1. **Add a patient to the queue**: Add a patient with a given priority to the queue. Each patient is identified by a unique name and is also associated with a priority level. Higher numbers represent higher priority. 2. **Serve a patient**: This operation removes and returns the name of the patient with the highest priority. If multiple patients have the same highest priority, the patient who has been in the queue the longest among them is served first. 3. **Retrieve the queue state**: This operation should output the current state of the queue, listing all patients in the order they would be served. Your task is to implement these operations efficiently. # Input The first line contains an integer n (1 le n le 10^5) — the number of operations. The following n lines describe the operations. Each operation is in one of the following formats: - `\\"add\\" name priority` — adds a patient with the given `name` (a non-empty string without spaces, length ≤ 50) and `priority` (an integer, 0 le priority le 100). - `\\"serve\\"` — serves the patient with the highest priority. - `\\"retrieve\\"` — retrieves the state of the queue. # Output For every `\\"serve\\"` operation, output the name of the patient served on a new line. For every `\\"retrieve\\"` operation, output the list of patient names in order they would be served on a single line, separated by spaces. Each patient name should appear exactly once in the list. # Example Input ``` 7 add Alice 5 add Bob 1 add Charlie 5 retrieve serve retrieve serve ``` Output ``` Alice Charlie Bob Alice Charlie Bob Charlie ``` # Note In the example, initially: - \\"Alice\\" and \\"Charlie\\" have the same highest priority of 5. - \\"Bob\\" has a priority of 1. The first `\\"retrieve\\"` operation lists patients in serve order: \\"Alice\\", \\"Charlie\\", and \\"Bob\\". The first `\\"serve\\"` operation serves \\"Alice\\" (the first added among the highest priority). The second `\\"retrieve\\"` now lists \\"Charlie\\" and \\"Bob\\". The second `\\"serve\\"` operation serves \\"Charlie\\". The queue operation must maintain efficiency due to potentially large number of operations (`n` up to 100,000). You can assume the names of patients are unique.","solution":"import heapq class HospitalQueue: def __init__(self): self.queue = [] self.counter = 0 self.entries = {} def add(self, name, priority): entry = (-priority, self.counter, name) # Use negative priority for max-heap effect heapq.heappush(self.queue, entry) self.entries[name] = entry self.counter += 1 def serve(self): while self.queue: _, _, name = heapq.heappop(self.queue) if name in self.entries: del self.entries[name] return name return None def retrieve(self): result = [] temp_queue = [] while self.queue: entry = heapq.heappop(self.queue) if entry[2] in self.entries: result.append(entry[2]) temp_queue.append(entry) for item in temp_queue: heapq.heappush(self.queue, item) return \\" \\".join(result)"},{"question":"Emma likes puzzles and brain teasers. Recently, she came across a challenge involving integer sequences. The challenge requires her to determine if a given sequence can be rearranged such that every pair of consecutive numbers in the sequence has a specific difference of 1. Help Emma by writing a program that will take a sequence of integers and determine if such a rearrangement is possible. You are given an array of integers a of length n (1 ≤ n ≤ 1000). The task is to determine if it\'s possible to rearrange the given array such that the absolute difference between every pair of consecutive integers is 1. Input: - The first line of input contains an integer n, the length of the array. - The second line contains n integers representing the array a. Output: - Print \\"YES\\" (without quotes) if it\'s possible to rearrange the array as described above. - Print \\"NO\\" (without quotes) otherwise. Example 1: Input: 5 1 2 4 5 3 Output: YES Example 2: Input: 4 1 3 2 5 Output: NO","solution":"def can_rearrange(arr): Determines if the given array can be rearranged such that the absolute difference between every pair of consecutive integers is 1. arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a long string `s` of length `n` and a set of `m` words. Your task is to determine whether the string `s` can be segmented into a space-separated sequence of one or more dictionary words from the given set. The words can be used multiple times in the segmentation. Write a function `canSegmentString(s, wordDict)` that takes the string `s` and a list of strings `wordDict` as input and returns `True` if `s` can be segmented into a sequence of words from `wordDict`, and `False` otherwise. # Input - A string `s` of length `n` where `1 ≤ n ≤ 10^5`. - A list of strings `wordDict` containing `m` words, where `1 ≤ m ≤ 10^5` and each word in the dictionary has a length of at least 1 and at most 100. # Output - Return `True` if `s` can be segmented into a sequence of one or more words from the dictionary, and `False` otherwise. # Example ```python s = \\"applepenapple\\" wordDict = [\\"apple\\", \\"pen\\"] canSegmentString(s, wordDict) # Output: True # The string can be segmented as \\"apple pen apple\\". s = \\"catsandog\\" wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] canSegmentString(s, wordDict) # Output: False # The string cannot be segmented into a sequence of dictionary words. ``` # Constraints - The input strings consist of lowercase Latin letters only. - The words in `wordDict` are unique.","solution":"def canSegmentString(s, wordDict): Determines if the string s can be segmented into a space-separated sequence of one or more dictionary words from the given set wordDict. word_set = set(wordDict) n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"You are given a binary tree consisting of n nodes, each having a unique value from 1 to n. Your task is to determine the longest path from the root to any leaf in the tree. The path length is defined as the number of edges in the path. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The second line contains n-1 integers where the i-th integer p_i (1 ≤ p_i ≤ i) denotes the parent of the (i+1)-th node. The root node is always node 1. Output: - Print a single integer, the length of the longest path from the root to any leaf in the binary tree. For example, given the input: ``` 5 1 1 2 2 ``` The output should be: ``` 2 ``` Explanation: The input represents the following tree: ``` 1 / 2 3 / 4 5 ``` The longest path is from node 1 to nodes 4 or 5, both having a path length of 2 (1 -> 2 -> 4 and 1 -> 2 -> 5).","solution":"def longest_path_in_binary_tree(n, parents): if n == 1: return 0 adjacency_list = [[] for _ in range(n + 1)] for i, parent in enumerate(parents): adjacency_list[parent].append(i + 2) def dfs(node): if not adjacency_list[node]: return 0 max_depth = 0 for child in adjacency_list[node]: max_depth = max(max_depth, dfs(child)) return max_depth + 1 return dfs(1)"},{"question":"Maria is an avid gardener and has a row of flower beds in her garden. Each bed has a certain number of flowers and is represented by an array of integers where each integer denotes the number of flowers in that bed. Due to recent heavy rain, some of the flowers have fallen off, and Maria wants to know the maximum number of flowers she can have in any contiguous subarray of a certain length. Given an array `flowers` of length `n` where `flowers[i]` is the number of flowers in the i-th bed, and an integer `k`, write a function to find the maximum number of flowers in any contiguous subarray of length `k`. # Input - The first line contains two integers `n` and `k` (1 <= k <= n <= 10^5) — the length of the array and the length of the subarray respectively. - The second line contains `n` integers `flowers[i]` (0 <= flowers[i] <= 10^4) where the i-th integer is the number of flowers in the i-th bed. # Output - Print a single integer — the maximum number of flowers in any contiguous subarray of length `k`. # Examples Example 1: Input: ``` 5 2 1 3 5 2 8 ``` Output: ``` 10 ``` Example 2: Input: ``` 8 3 4 4 4 4 4 4 4 4 ``` Output: ``` 12 ``` Example 3: Input: ``` 6 1 2 1 5 3 1 4 ``` Output: ``` 5 ```","solution":"def max_flowers_in_subarray(n, k, flowers): Returns the maximum number of flowers in any contiguous subarray of length k. Parameters: n (int): The length of the flowers array. k (int): The length of the subarray. flowers (List[int]): The array of flowers in each bed. Returns: int: The maximum number of flowers in any contiguous subarray of length k. max_sum = current_sum = sum(flowers[:k]) for i in range(k, n): current_sum += flowers[i] - flowers[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given two strings S and T, both of length n. In one move, you can pick a contiguous substring of S and reverse it. Your goal is to determine if you can transform string S into string T using exactly one move. # Input: - The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. - The next t lines each contain two strings S and T of length n (1 ≤ n ≤ 100). # Output: For each test case, print \\"YES\\" if you can transform S into T by reversing exactly one contiguous substring of S, and \\"NO\\" otherwise. # Example: Input: ``` 3 abcdef fedcba abcdef abcdef abcdef fedbca ``` Output: ``` YES NO NO ``` # Explanation: In the first test case, you can reverse the entire string \\"abcdef\\" to get \\"fedcba\\". In the second test case, since S and T are already the same, no moves are needed, so the answer is \\"NO\\". In the third test case, no single reversal of a substring can transform \\"abcdef\\" into \\"fedbca\\".","solution":"def can_transform(S, T): Returns \\"YES\\" if S can be transformed into T by reversing exactly one contiguous substring, otherwise returns \\"NO\\". if S == T: return \\"NO\\" n = len(S) for i in range(n): for j in range(i, n): reversed_substring = S[:i] + S[i:j+1][::-1] + S[j+1:] if reversed_substring == T: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for S, T in test_cases: results.append(can_transform(S, T)) return results"},{"question":"You are given a grid of size n x m consisting of non-negative integers. Your task is to find the subgrid of size k x l (1 ≤ k ≤ n, 1 ≤ l ≤ m) which has the maximum sum of its elements. A subgrid of size k x l is a contiguous rectangular part of the grid consisting of k rows and l columns. The first input line contains three integers n, m, and k, l (1 ≤ n, m ≤ 500, 1 ≤ k ≤ n, 1 ≤ l ≤ m) — the dimensions of the grid and the dimensions of the subgrid you need to find. Next n lines describe the grid, each containing m non-negative integers. The integers in the grid are between 0 and 1000, inclusive. Print two integers r and c separated by a space — the row and column indices of the top-left corner of the subgrid with the maximum sum. The rows and columns are 1-indexed. If there are multiple solutions, print any of them.","solution":"def find_max_sum_subgrid(n, m, k, l, grid): max_sum = -1 max_row, max_col = 0, 0 # Compute prefix sum for the grid prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Find the subgrid with the maximum sum for i in range(k, n + 1): for j in range(l, m + 1): current_sum = prefix_sum[i][j] - prefix_sum[i-k][j] - prefix_sum[i][j-l] + prefix_sum[i-k][j-l] if current_sum > max_sum: max_sum = current_sum max_row, max_col = i - k + 1, j - l + 1 return max_row, max_col"},{"question":"You are working on a simulation of a multi-store car park system. The car park is represented as a 3D grid, where each level is a 2D grid (horizontally and vertically) of parking spaces. Each space can either be empty or occupied by a car. The simulation needs to support operations where cars can enter and leave the parking lot, and you need to track which space each car occupies. Additionally, you need to be able to retrieve the current status of the parking lot. The car park dimensions are specified by three integers: L (number of levels), R (number of rows per level), and C (number of columns per level), where 1 ≤ L, R, C ≤ 100. Cars entering the car park are assigned the first available space, starting from the first level and moving to the next levels, and within each level from top-left to bottom-right. Each operation is described by a string. The possible operations are: 1. \\"ENTER C\\": A car with a unique integer ID C enters the car park. If there is no available space, the operation should be ignored. 2. \\"LEAVE C\\": A car with the given integer ID C leaves the car park. If there is no car with ID C in the car park, the operation should be ignored. 3. \\"STATUS\\": Outputs the status of the parking lot as a list of lists for each level, with each parking space represented by either the car ID for occupied spaces or 0 for empty spaces. Write a program to handle these operations. The input starts with the integers L, R, and C, followed by the number of operations N (1 ≤ N ≤ 10000). Each of the next N lines contains one operation. The IDs of the cars are within the range of 1 to 100000. For each \\"STATUS\\" operation, output the current status of the car park. # Input Format - The first line of input contains the three integers L, R, and C. - The second line contains the integer N. - The next N lines each contain an operation, where an operation is either \\"ENTER C\\", \\"LEAVE C\\", or \\"STATUS\\". # Output Format - For each \\"STATUS\\" operation, output the current status of the car park. The status of each level should be represented as R lines of C integers each, with each integer either 0 (for an empty space) or the car ID (for an occupied space). Separate outputs of different \\"STATUS\\" operations with a blank line. # Sample Input ``` 2 2 2 5 ENTER 5 ENTER 6 STATUS LEAVE 5 STATUS ``` # Sample Output ``` 5 6 0 0 0 6 0 0 ``` # Explanation - The car park has 2 levels, each with 2 rows and 2 columns. - The first car with ID 5 takes the first available space (level 1, row 1, column 1). - The second car with ID 6 takes the next available space (level 1, row 1, column 2). - The first \\"STATUS\\" command outputs the current layout of the car park. - The car with ID 5 leaves, freeing up its space. - The second \\"STATUS\\" command shows the updated layout of the car park.","solution":"class CarPark: def __init__(self, L, R, C): self.L = L self.R = R self.C = C self.total_spaces = L * R * C self.spaces = [0] * self.total_spaces self.car_position = {} def enter(self, car_id): if car_id in self.car_position: return # Car is already parked for index in range(self.total_spaces): if self.spaces[index] == 0: self.spaces[index] = car_id self.car_position[car_id] = index break def leave(self, car_id): if car_id not in self.car_position: return # Car is not parked index = self.car_position.pop(car_id) self.spaces[index] = 0 def status(self): result = [] for level in range(self.L): level_status = [] for row in range(self.R): row_status = self.spaces[level * self.R * self.C + row * self.C : level * self.R * self.C + (row + 1) * self.C] level_status.append(row_status) result.append(level_status) return result def process_operations(L, R, C, operations): car_park = CarPark(L, R, C) results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ENTER\\": car_id = int(parts[1]) car_park.enter(car_id) elif cmd == \\"LEAVE\\": car_id = int(parts[1]) car_park.leave(car_id) elif cmd == \\"STATUS\\": status = car_park.status() results.append(status) return results"},{"question":"You are given an array of n elements initially all set to zero and q queries. Each query is of one of the two types: 1. **Update**: Add a specified value to all elements in a specified range. 2. **Maximum**: Retrieve the maximum value in a specified range. The task is to handle these operations efficiently. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) – the number of elements in the array and the number of queries. - The next q lines contain the queries, each query is either an update or a maximum query. - For an update query: the format is \\"1 l r x\\" which means add x to every element from index l to r (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9). - For a maximum query: the format is \\"2 l r\\" which means find the maximum value in the range from index l to r (1 ≤ l ≤ r ≤ n). Output: - For each maximum query, output the maximum value in the specified range. Example: Input: ``` 5 5 1 1 3 10 2 2 5 1 2 4 5 2 1 5 1 3 5 -10 2 1 3 ``` Output: ``` 10 15 15 ``` Explanation: - First query adds 10 to elements 1 to 3: [10, 10, 10, 0, 0] - Second query finds the maximum between elements 2 and 5: 10 - Third query adds 5 to elements 2 to 4: [10, 15, 15, 5, 0] - Fourth query finds the maximum between elements 1 and 5: 15 - Fifth query adds -10 to elements 3 to 5: [10, 15, 5, -5, -10] - Sixth query finds the maximum between elements 1 and 3: 15","solution":"class FenwickTree: Fenwick Tree (Binary Indexed Tree) for range updates and point queries. def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def add(self, index, value): while index <= self.size: self.tree[index] += value index += (index & -index) def prefix_sum(self, index): result = 0 while index > 0: result += self.tree[index] index -= (index & -index) return result def range_add(self, left, right, value): self.add(left, value) self.add(right + 1, -value) def point_query(self, index): return self.prefix_sum(index) class Solution: def __init__(self, n): self.n = n self.ft = FenwickTree(n) self.array = [0] * (n + 1) def update(self, l, r, x): self.ft.range_add(l, r, x) def maximum(self, l, r): max_val = float(\'-inf\') for i in range(l, r + 1): val = self.array[i] + self.ft.point_query(i) max_val = max(max_val, val) return max_val def process_queries(self, n, queries): results = [] for query in queries: if query[0] == 1: _, l, r, x = query self.update(l, r, x) elif query[0] == 2: _, l, r = query results.append(self.maximum(l, r)) return results def handle_queries(n, q, queries): solution = Solution(n) return solution.process_queries(n, queries)"},{"question":"# Task Description You are given an array of integers representing the scores of students in a class. You can select any number of students such that the sum of their scores is as large as possible, but no two selected students can be adjacent in the array. Write a function to calculate the maximum sum of non-adjacent elements from the array. # Input - The first line contains an integer N (1 leq N leq 10^5) - the number of students. - The second line contains N integers a_i (0 leq a_i leq 10^4) - the scores of the students. # Output - Output a single integer - the maximum sum of non-adjacent elements. # Sample Input ``` 6 3 2 5 10 7 ``` # Sample Output ``` 15 ``` # Explanation In the given example, one possible way to get the maximum sum is by selecting the scores 3, 10, and 2 (or alternatively 5 and 10), which sum up to 15.","solution":"def max_non_adjacent_sum(scores): Calculate the maximum sum of non-adjacent elements. Args: scores (List[int]): List of student scores. Returns: int: Maximum sum of non-adjacent elements. if not scores: return 0 n = len(scores) if n == 1: return scores[0] # Initialize an array to store the maximum sum until each index dp = [0] * n dp[0] = scores[0] dp[1] = max(scores[0], scores[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + scores[i]) return dp[-1]"},{"question":"You are given a list of strings. Write a function to determine if there exists no two strings in the list such that one is a prefix of the other. A string `a` is a prefix of string `b` if `b` can be obtained by adding some characters at the end of `a`. The input data consists of a single integer `n` (1 leq n leq 100) – the number of strings, followed by `n` lines each containing a string consisting of lowercase English letters. The length of each string is between 1 and 50. Print \\"Yes\\" if no such strings exist, otherwise print \\"No\\". You can print each letter in any case (upper or lower). Example: Input: 3 hello hell world Output: No","solution":"def has_no_prefix(strings): Determine if there exists no two strings in the list such that one is a prefix of the other. Args: strings (list of str): A list of lowercase English strings. Returns: str: \\"Yes\\" if no such strings exist, otherwise \\"No\\". # Sort the strings to bring potential prefix strings next to each other strings.sort() for i in range(len(strings) - 1): if strings[i+1].startswith(strings[i]): return \\"No\\" return \\"Yes\\""},{"question":"You are given a string consisting of lowercase English letters. You want to reorder the string in such a way that no two adjacent characters are the same. If multiple valid reorderings are possible, you can return any of them. If no such reordering is possible, return \\"Not Possible\\". The first line of the input contains a string s (1 ≤ |s| ≤ 1000) consisting of only lowercase English letters. Output the reordered string where no two adjacent characters are the same, or \\"Not Possible\\" if such a reordering cannot be done. For example: Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"Not Possible\\"","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize the string such that no two adjacent characters are the same. Returns the reordered string or \\"Not Possible\\" if such a reordering cannot be done. # Get the frequency of each character char_freq = Counter(s) # Create a max-heap based on character frequencies max_heap = [(-freq, char) for char, freq in char_freq.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) if prev_char: # Push the previous character back onto the heap heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = None, 0 # Add the current character to the result result.append(char) # Track the current character being used if freq + 1 < 0: # adjust frequency post usage prev_char, prev_freq = char, freq + 1 if len(result) != len(s): return \\"Not Possible\\" return \\"\\".join(result)"},{"question":"You are given a list of integers representing the visit counts of each webpage on a website. Your task is to implement a function that returns a list of webpage indexes which are visited more than the average number of visits. Each webpage has a unique index (0-based). The average number of visits is defined as the total number of visits divided by the number of webpages (floating-point division). A webpage is considered to have more than the average number of visits if its visit count is strictly greater than the calculated average. Implement the following function: ```python def above_average_visits(visits: List[int]) -> List[int]: # your code here ``` # Input - An integer list `visits` where `1 <= len(visits) <= 10^5` and `0 <= visits[i] <= 10^6` for each valid `i`. # Output - A list of integers representing the list of webpage indexes which have more than the average number of visits. The indexes should be returned in ascending order. # Example Example 1: ```python print(above_average_visits([1, 2, 3, 4, 5])) # Output: [3, 4] ``` Explanation: The average visit count is (1 + 2 + 3 + 4 + 5) / 5 = 3.0. Thus, only webpages at index 3 and 4 have more than 3 visits. Example 2: ```python print(above_average_visits([10, 20, 30, 40, 50])) # Output: [3, 4] ``` Explanation: The average visit count is (10 + 20 + 30 + 40 + 50) / 5 = 30.0. Thus, only webpages at index 3 and 4 have more than 30 visits. Your function should be efficient in both time and space complexity.","solution":"def above_average_visits(visits): Returns a list of webpage indexes which have more than the average number of visits. average = sum(visits) / len(visits) result = [index for index, count in enumerate(visits) if count > average] return result"},{"question":"Alice and Bob both have collections of string tokens. A common programming task they encounter is finding overlapping string subsequences across their tokens. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Alice has a token of length ( n ), and Bob has a token of length ( m ). They want to find the longest common subsequence (LCS) of their tokens. Your task is to write a function that takes in two strings, the token of Alice and the token of Bob, and returns the length of their longest common subsequence. # Input - The first line contains a string ( A ) of length ( n ) ((1 leq n leq 1000)), Alice\'s token. - The second line contains a string ( B ) of length ( m ) ((1 leq m leq 1000)), Bob\'s token. # Output Return an integer which is the length of the longest common subsequence of strings ( A ) and ( B ). # Example Input ``` abcde ace ``` Output ``` 3 ``` Explanation The longest common subsequence is \\"ace\\", and its length is 3.","solution":"def longest_common_subsequence(A, B): Returns the length of the longest common subsequence of strings A and B. n = len(A) m = len(B) dp = [[0]*(m+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, m+1): if A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[n][m]"},{"question":"You are given an array of integers nums and an integer k. Find the number of contiguous subarrays where the sum of the elements in the subarray equals k. For example, given: - An integer array nums of length n (1 ≤ n ≤ 10^5) - An integer k (-10^9 ≤ k ≤ 10^9) Your task is to implement a function that returns the count of contiguous subarrays that sum to k. **Function Signature:** ```python def count_subarrays_with_sum(nums: List[int], k: int) -> int: pass ``` **Example:** ```python nums = [1, 1, 1] k = 2 print(count_subarrays_with_sum(nums, k)) # Output: 2 ``` **Explanation:** For the example: - The array [1, 1, 1] has two subarrays whose sum equals 2: [1, 1] (starting from index 0 to 1) and [1, 1] (starting from index 1 to 2). **Note:** - Aim for an optimized solution with respect to time complexity. Consider using a hash map to store cumulative sums and their occurrences to achieve a solution that operates in linear time.","solution":"from typing import List def count_subarrays_with_sum(nums: List[int], k: int) -> int: prefix_sum_counts = {0: 1} # To handle the case when prefix sum is exactly k. current_sum = 0 count = 0 for num in nums: current_sum += num if (current_sum - k) in prefix_sum_counts: count += prefix_sum_counts[(current_sum - k)] if current_sum in prefix_sum_counts: prefix_sum_counts[current_sum] += 1 else: prefix_sum_counts[current_sum] = 1 return count"},{"question":"You are given a binary tree with n nodes. The nodes are labeled from 1 to n and each node has a value associated with it. You need to perform q queries on this tree. Each query asks for the sum of the values of all nodes in the subtree rooted at a given node v. The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of nodes in the tree and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000000000) — the values of the nodes. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), meaning there is an edge between node u and node v. Each of the next q lines contains a single integer v (1 ≤ v ≤ n) — the root of the subtree to be queried. Output q integers, each corresponding to the answer of a query. Example: Input: 5 3 1 2 3 4 5 1 2 1 3 3 4 3 5 1 3 4 Output: 15 12 4 Explanation: 1. The sum of the subtree rooted at node 1 includes all nodes: 1+2+3+4+5 = 15 2. The sum of the subtree rooted at node 3 includes nodes 3, 4, and 5: 3+4+5 = 12 3. The sum of the subtree rooted at node 4 includes only node 4: 4","solution":"def tree_sum(n, q, values, edges, queries): from collections import defaultdict, deque # Create an adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to compute the sum of the subtree def compute_subtree_sum(node, parent): total = values[node - 1] for neighbor in tree[node]: if neighbor != parent: total += compute_subtree_sum(neighbor, node) subtree_sum[node] = total return total # Precompute subtree sums subtree_sum = {} compute_subtree_sum(1, -1) # Answer the queries results = [subtree_sum[v] for v in queries] return results # Test case n = 5 q = 3 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [1, 3, 4] print(tree_sum(n, q, values, edges, queries)) # Output: [15, 12, 4]"},{"question":"David is a botanist interested in the health of plants in a botanical garden. There are n plants aligned in a row and each plant has a certain initial health value. Over the next k days, David applies specific treatments to segments of these plants. Each treatment increases the health of every plant in the segment by a certain value. You are given the initial health values of the plants and a list of k treatments. A treatment is described by three integers: start position, end position, and the increase in health value for plants in that range. David wants to know the maximum health value among all plants after all treatments have been applied. Write a program to determine this. Input format: - The first line contains two space-separated integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 10,000), the number of plants and the number of treatments, respectively. - The second line contains n space-separated integers h1, h2, ..., hn (0 ≤ hi ≤ 1,000,000), the initial health values of the plants. - Each of the next k lines contains three space-separated integers li, ri, vi (1 ≤ li ≤ ri ≤ n, 1 ≤ vi ≤ 1,000), representing the start position, end position, and the increase in health value for the treatment. Output format: - Output a single integer, the maximum health value among all plants after all treatments. Example: Input: 5 3 2 3 1 5 4 1 3 2 2 5 3 1 5 1 Output: 12 In this example, the treatments are applied as follows: - After the first treatment (positions 1 to 3, increase by 2): [4, 5, 3, 5, 4] - After the second treatment (positions 2 to 5, increase by 3): [4, 8, 6, 8, 7] - After the third treatment (positions 1 to 5, increase by 1): [5, 9, 7, 9, 8] The maximum health value among all plants is 12.","solution":"def max_health_after_treatments(n, k, health_values, treatments): Determines the maximum health value among all plants after all treatments. Parameters: - n (int): Number of plants - k (int): Number of treatments - health_values (list of int): Initial health values of the plants - treatments (list of tuples): Each tuple contains (li, ri, vi) representing the treatment range and increase in health value Returns: - int: Maximum health value among all plants after all treatments # Create a list to keep track of the net changes at each index changes = [0] * (n + 1) # Process each treatment for treatment in treatments: start, end, increase = treatment changes[start - 1] += increase if end < n: changes[end] -= increase # Apply the net changes using prefix sum current_increase = 0 for i in range(n): current_increase += changes[i] health_values[i] += current_increase # Return the maximum health value return max(health_values)"},{"question":"Given a square grid of size N times N, each cell contains either a \'0\' or \'1\'. You need to find the largest square sub-grid that contains only \'1\'s. You are required to implement a function that takes this grid as input and returns the area of that largest square sub-grid. **Input:** - The first line contains a single integer N (1 leq N leq 500), the size of the grid. - Each of the next N lines contains N space-separated integers (either \'0\' or \'1\') representing the grid. **Output:** - A single integer, the area of the largest square sub-grid that contains only \'1\'s. **Example:** **Input:** ``` 4 1 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 ``` **Output:** ``` 4 ``` **Explanation:** In this case, the largest square sub-grid of \'1\'s has a size of 2x2, making the area 2 * 2 = 4. **Note:** - You can assume that the input grid is always a valid square grid. - The function should be efficient, ideally with a time complexity of O(N^2).","solution":"def largest_square_area(N, grid): if N == 1: return 1 if grid[0][0] == 1 else 0 dp = [[0] * N for _ in range(N)] max_side_length = 0 for i in range(N): for j in range(N): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length * max_side_length"},{"question":"You are tasked with aiding an expedition team in navigating through a series of interconnected tunnels within an expansive cave system. The tunnels are all two-way and directly connect two distinct locations within the cave. Each location in the cave system can be seen as a node, and each tunnel as an edge. The team\'s objective is to find the shortest path from a starting location to a destination location, taking into consideration that they will be moving under challenging conditions and can only use a finite amount of light. Thus, finding the shortest path efficiently is crucial. The input consists of multiple test cases. For each test case, you are given: 1. An integer `n` (2 ≤ n ≤ 1000), the number of locations in the cave system. 2. An integer `m` (1 ≤ m ≤ 10,000), the number of tunnels. 3. An integer `u` (1 ≤ u ≤ n) and an integer `v` (1 ≤ v ≤ n), representing the starting and ending locations respectively. 4. The next `m` lines each contain three integers `a`, `b`, and `c` (1 ≤ a, b ≤ n, 1 ≤ c ≤ 1000), indicating a tunnel between location `a` and location `b` with a travel cost of `c`. Output a single integer representing the minimum travel cost from location `u` to location `v`. If there is no path from `u` to `v`, output -1. Sample Input: ``` 1 5 6 1 5 1 2 3 1 3 10 2 3 1 2 4 2 3 5 6 4 5 1 ``` Sample Output: ``` 6 ``` Explanation: In the sample input, there is one test case with 5 locations and 6 tunnels. The shortest path from location 1 to location 5 is 1 -> 2 -> 4 -> 5 with a total cost of 6.","solution":"import heapq import sys def shortest_path(n, m, u, v, edges): graph = [[] for _ in range(n + 1)] for a, b, c in edges: graph[a].append((b, c)) graph[b].append((a, c)) INF = float(\'inf\') distance = [INF] * (n + 1) distance[u] = 0 priority_queue = [(0, u)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distance[current_node]: continue for neighbor, weight in graph[current_node]: distance_through_u = current_distance + weight if distance_through_u < distance[neighbor]: distance[neighbor] = distance_through_u heapq.heappush(priority_queue, (distance_through_u, neighbor)) return distance[v] if distance[v] != INF else -1"},{"question":"You are given an integer array a of length n and an integer k. Your task is to determine if there is a subarray of a whose sum is exactly k. A subarray is a contiguous part of an array that may have length from 1 to n. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^3). Description of the test cases follows. The first line of each test case contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the length of the array and the target sum. The second line contains n integers representing the elements of the array a (-10^4 le a[i] le 10^4). It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print YES if there is such a subarray of a whose sum is exactly k, otherwise, print NO. For the first test case, the subarray [2, 3] has sum 5 which is equal to k. For the second test case, the subarray [-1, 2, -3, 4] has sum 2 which is equal to k. For the fourth test case, there exists no subarray that sums to 7.","solution":"def has_subarray_with_sum(arr, n, k): Determines if there is a subarray with sum exactly k. Parameters: arr (list): List of integers representing the array n (int): Length of the array k (int): Target subarray sum Returns: bool: True if there is a subarray with sum k, False otherwise. prefix_sum_set = set() current_sum = 0 for num in arr: current_sum += num if current_sum == k: return True if (current_sum - k) in prefix_sum_set: return True prefix_sum_set.add(current_sum) return False def solve_all_cases(test_cases): Solves multiple test cases. Parameters: test_cases (list): List of tuples, each containing (n, k, arr) Returns: list: List of \\"YES\\" or \\"NO\\" results for each test case. results = [] for n, k, arr in test_cases: if has_subarray_with_sum(arr, n, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(t, test_cases): return solve_all_cases(test_cases)"},{"question":"John is a delivery robot programmer. He has a warehouse represented as a 2D grid of cells with dimensions n x m. Each cell in the grid is either empty or contains an obstacle. The robot can move up, down, left, or right but cannot move into a cell with an obstacle. John needs to program the robot to find the shortest path from the top-left corner of the grid to the bottom-right corner. The robot\'s path is defined as a sequence of cells starting at the top-left corner (0, 0) and ending at the bottom-right corner (n-1, m-1). If there is no path from the start to the destination, the robot should return -1. Write a function to find the length of the shortest path from the top-left corner to the bottom-right corner. The function should return -1 if no such path exists. # Input Format - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. - Each of the next n lines contains m characters, where each character is either \'.\' (an empty cell) or \'#\' (an obstacle). # Output Format - Print a single integer representing the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. # Example Input ``` 4 4 . . . . # # . # . . . # . # . . ``` # Example Output ``` 6 ``` # Explanation In the provided example, one possible shortest path is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) The length of the path is 6 steps.","solution":"from collections import deque def shortest_path(n, m, grid): This function finds the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in a grid, where \'.\' represents an empty cell and \'#\' represents an obstacle. The function returns the length of the shortest path or -1 if no such path exists. # Directions for moving in the grid: up, down, left, and right. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize a queue for BFS. queue = deque([(0, 0, 0)]) # (row, col, distance) # Mark the start cell as visited. visited = [[False] * m for _ in range(n)] visited[0][0] = True # Perform BFS. while queue: r, c, dist = queue.popleft() # If we\'ve reached the bottom-right corner, return the distance. if r == n-1 and c == m-1: return dist # Check all possible directions. for dr, dc in directions: nr, nc = r + dr, c + dc # Check if the new position is within bounds and is an empty cell. if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist + 1)) # If there\'s no path to the bottom-right corner, return -1. return -1"},{"question":"Little Zelda is an avid collector of rare stones. She has recently acquired a collection of stones that are stored in a 2D grid of size n by m. Each cell in the grid contains a stone of a particular type, denoted by an integer. She wants to organize her collection and find the most frequent type of stone in the entire grid. To make this task more interesting, Zelda decides to use a special algorithm that optimally finds the most frequent stone type in the grid. Fortunately, she has some interesting properties that might help: 1. If you pick any submatrix of the grid, the most frequent stone type in that submatrix will be either the same as the most frequent stone type in the entire grid or will have the second-highest frequency in the original grid. 2. The number of different stone types does not exceed 10^6. Given the dimensions of the grid and the types of stones in each cell, help Zelda find the most frequent stone type. # Input - The first line contains two integers n and m, representing the number of rows and the number of columns in Zelda\'s grid (1 le n, m le 1000). - The following n lines each contain m integers representing the types of stones in each cell of the grid. The stone types are integers between 1 and 10^9. # Output - Output a single integer representing the most frequent stone type in the grid. # Example Input ``` 3 4 1 2 2 3 4 2 4 1 1 4 4 4 ``` Output ``` 4 ``` # Note In the given example, stone type `4` appears 4 times, which is more frequent than any other type. Hence, the output is `4`.","solution":"def most_frequent_stone(n, m, stones): Returns the most frequent stone type in the grid. from collections import Counter # Flatten the grid to a single list of stone types stone_list = [stone for row in stones for stone in row] # Use Counter to count the frequency of each stone type stone_counter = Counter(stone_list) # Find the most common stone type most_common_stone = stone_counter.most_common(1)[0][0] return most_common_stone"},{"question":"You are given an array of integers A = [A_1, A_2, ldots, A_n], and an integer k. Your task is to find the maximum sum of a subarray with exactly k consecutive elements. The first line contains two integers n (1 le n le 2 cdot 10^5) and k (1 le k le n) — the number of elements in the array and the length of the subarray, respectively. The second line contains n space-separated integers A_1, A_2, ldots, A_n (-10^4 le A_i le 10^4) — the elements of the array. Print one integer — the maximum sum of a subarray with exactly k consecutive elements. **Example 1:** Input: ``` 5 2 1 2 3 -1 -2 ``` Output: ``` 5 ``` **Example 2:** Input: ``` 4 4 -1 -2 -3 -4 ``` Output: ``` -10 ```","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray with exactly k consecutive elements. n = len(arr) if n < k: return 0 # Edge case: if array length is less than k, no valid subarray exists max_sum = curr_sum = sum(arr[:k]) for i in range(k, n): curr_sum += arr[i] - arr[i - k] if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"You are given a permutation of the sequence {1, 2, ..., n}. Each number in this permutation represents a badge and will point to another badge, forming a function f where f(i) is the badge pointed to by badge i. Each badge points to exactly one other badge, and no two badges point to the same badge. Let\'s define f(k)(x) as the function f applied k times to the badge x. Badge i is termed as \\"reachable\\" from badge x if there exists an integer k such that f(k)(x) = i. Your task is to find the largest set of badges that can all be reached starting from the same badge. In the first line of the input, there is a single integer n (1 ≤ n ≤ 200) — the number of badges. In the second line follows a permutation of the sequence [1, 2, ..., n]. Each element in the permutation indicates the badge each badge points to. Output the size of the largest set of badges that can be reached starting from a single badge. For example: Input: 4 2 3 4 1 Output: 4 In the sample, starting from badge 1, the sequence of badges we can reach is [1, 2, 3, 4], which covers all badges. Thus the answer is 4.","solution":"def largest_reachable_set_size(n, permutation): def find_cycle_length(start): visited = set() current = start while current not in visited: visited.add(current) current = permutation[current - 1] return len(visited) max_size = 0 for i in range(1, n + 1): max_size = max(max_size, find_cycle_length(i)) return max_size"},{"question":"Alex is a car enthusiast and loves modifying his cars. Recently, he developed an interest in license plates that follow a certain numerical pattern. A license plate number consists of exactly 7 digits. Alex defines a license plate as \\"balancing\\" if the sum of the first three digits is equal to the sum of the last three digits. For example, the license plate number \\"1234321\\" is balancing because 1 + 2 + 3 = 4 + 3 + 2, while \\"1234567\\" is not balancing. Given an integer n (0 ≤ n ≤ 104), your task is to generate n distinct balancing license plate numbers. If there are more than n distinct balancing license plate numbers, print any n of them. Input: A single integer n. Output: Print n lines, each containing a distinct 7-digit balancing license plate number. The numbers can start with 0, and each number must be distinct. If there are more than n distinct balancing license plate numbers, print any n of them. It is guaranteed they exist. Example: Input 5 Output 1234321 9010991 4569654 2302332 6702196","solution":"def generate_balancing_plate_numbers(n): balancing_numbers = [] for a in range(10): for b in range(10): for c in range(10): for d in range(10): if len(balancing_numbers) >= n: break num1 = a + b + c num2 = c + b + a if num1 == num2: plate_number = f\\"{a}{b}{c}{d}{c}{b}{a}\\" if plate_number not in balancing_numbers: balancing_numbers.append(plate_number) for num in balancing_numbers[:n]: print(num) # Example usage: # generate_balancing_plate_numbers(5)"},{"question":"Create a program that helps a gardener automate the planting of trees in a rectangular garden. The garden is divided into an m times n grid, and the gardener wants to plant trees in such a way that no two trees are planted in adjacent cells (horizontally, vertically, or diagonally). The gardener also wants to maximize the number of trees planted. Given the dimensions of the garden, output the maximum number of trees that can be planted. Input: The input consists of a single line containing two integers m and n (1 le m, n le 1000) — the dimensions of the garden grid. Output: Print a single integer — the maximum number of trees that can be planted such that no two trees are adjacent. Example: ``` Input: 4 5 Output: 10 ``` Explanation: For a 4 times 5 garden, the optimal planting pattern would be placing trees in cells such that: ``` T . T . T . T . T . T . T . T . T . T . ``` In this configuration, the number of trees planted is 10, and no two trees are adjacent.","solution":"def max_trees(m, n): Returns the maximum number of trees that can be planted in an m x n garden such that no two trees are adjacent (horizontally, vertically, or diagonally). # A simpler observation for the problem is that in a 2x2 grid, at best we can plant 2 trees. # Generalizing to the entire grid, the maximum number of trees can be derived simply as: return (m * n + 1) // 2"},{"question":"Given a string of lowercase English letters, you are asked to convert it into a \\"happy\\" string. A \\"happy\\" string is defined as a string in which no two adjacent characters are the same. If such a transformation is not possible, return an empty string. Write a function `makeHappyString(s: str) -> str` that takes a string `s` as input and returns the \\"happy\\" string if it is possible to rearrange the characters of `s` to meet the conditions, or an empty string if it is not possible. # Example ``` Input: \\"aabb\\" Output: \\"abab\\" or \\"baba\\" Input: \\"aaab\\" Output: \\"\\" ``` # Note - You are allowed to rearrange the characters of the string. - You may assume that the input string consists only of lowercase English letters. - The length of the string will not exceed 10^5. **Constraints:** 1. The input string length is between 1 and 100,000, inclusive. 2. The input string contains only lowercase English letters (`\'a\'` to `\'z\'`).","solution":"import heapq from collections import Counter def makeHappyString(s: str) -> str: Convert a string s into a \\"happy\\" string, where no two adjacent characters are the same. If such a transformation is not possible, return an empty string. # Count frequency of each character freq = Counter(s) # Use a max-heap for the characters by their frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count: if prev_count and not max_heap: return \\"\\" # Cannot place any character without making adjacent the same # Pop the character with the highest frequency count, char = heapq.heappop(max_heap) result.append(char) # If there\'s a prior character waiting to be re-added to the heap if prev_count: heapq.heappush(max_heap, (prev_count, prev_char)) # Update prev_char and prev_count for the next iteration prev_char = char prev_count = count + 1 # Increment the negative count to decrease the absolute count return \\"\\".join(result)"},{"question":"You are passionate about your garden, so you decided to rearrange its flowers. Your garden is represented as a string f=f_{1}f_{2}dots f_{n} of length n. Each character of this string is either an \'R\' (representing a red flower) or a \'B\' (representing a blue flower). In one operation, you can choose any consecutive substring of f and flip it. That is, you can choose any substring f[l dots r]=f_l, f_{l+1}, dots, f_r and change each character \'R\' to \'B\' and vice versa. For example, if you decide to flip substring f[2 dots 4] of string f=\\"RRBBR\\" it will be equal to f=\\"RBBRR\\". A beautiful garden is a string where no two adjacent flowers have the same color. For example, \\"RBRBRB\\" is a beautiful garden, while \\"RRBB\\" is not. You want to use at most n/2 operations to make your garden beautiful. Operations are applied one after another sequentially. The first line contains an integer t (1 le t le 100) — the number of test cases in the input. Then t test cases follow. The first line of each test case contains an integer n (2 le n le 2000) — the length of f. The second line contains f of length n — the given string representing the garden. It contains only \'R\' and \'B\'. It is guaranteed that the answer exists. Note that you do not need to minimize the number of operations: find any way to achieve the desired configuration in n/2 or less operations. For each test case print an answer. In the first line, print an integer m (0 le m le n/2) — the number of operations. You do not need to minimize m, any value is suitable. In the following m lines, print the description of the operations, each line should contain two integers l,r (1 le l le r le n), representing a single flip operation of f[l dots r]. Operations are applied one after another sequentially. The final f after all operations should be a beautiful garden. For example, if n = 6 and f = \\"RBRRRB\\", one possible solution is to print: ``` 1 3 4 ``` After the first and only operation, the string becomes \\"RBBRBR\\", which is a beautiful garden.","solution":"def make_beautiful_garden(n, f): Make the garden beautiful by using at most n/2 operations. Parameters: n (int): The length of the garden. f (string): The garden represented as a string of \'R\' and \'B\'. Returns: (int, List[Tuple[int, int]]): The number of operations and the list of operations to perform. operations = [] i = 0 while i < n - 1: if f[i] == f[i + 1]: operations.append((i + 1, i + 2)) # Flip the substring from i+1 to i+2 f = f[:i] + (\'B\' if f[i] == \'R\' else \'R\') + (\'R\' if f[i + 1] == \'B\' else \'B\') + f[i + 2:] # Move to the next character after the flip i += 1 i += 1 return (len(operations), operations) def arrange_flowers(t, test_cases): Arrange flowers for multiple test cases. Parameters: t (int): Number of test cases. test_cases (List[Tuple[int, str]]): List of tuples where each tuple contains the length of the garden and the garden string. Returns: List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case. Each result is a tuple containing the number of operations and the list of operations. results = [] for n, f in test_cases: results.append(make_beautiful_garden(n, f)) return results"},{"question":"You are given a sequence of integers in an array where each integer represents a potential jump length at that position. Write a function that checks if you can reach the last index starting from the first index. Each integer in the array represents the maximum jump length you can make from that position. Return `true` if you can reach the last index, or `false` otherwise. For example, given the array `[2, 3, 1, 1, 4]`, the function should return `true` because you can jump from index `0` to `1` (jump length `2`), then from `1` to `4` (jump length `3`). However, given the array `[3, 2, 1, 0, 4]`, the function should return `false` because at index `3`, your maximum jump length is `0`, so you cannot progress further to reach the last index. # Input and Output - The first line contains an integer `t` (1 leq t leq 10^3) — the number of test cases. - Each of the next `t` lines contains an array of integers separated by spaces, representing a test case `arr` (1 leq text{length of arr} leq 10^4, 0 leq text{arr}[i] leq 100). For each test case, print `true` or `false` depending on whether you can reach the last index. # Example - **Input:** ``` 3 2 3 1 1 4 3 2 1 0 4 0 ``` - **Output:** ``` true false true ```","solution":"def can_jump(arr): Determines if you can reach the last index starting from the first index. max_reachable = 0 n = len(arr) for i in range(n): if i > max_reachable: return False max_reachable = max(max_reachable, i + arr[i]) return True def check_jump_cases(test_cases): results = [] for arr in test_cases: results.append(can_jump(arr)) return results"},{"question":"You are given an array of integers, where each integer appears exactly twice, except for one integer which appears exactly once. Your task is to find the integer that appears only once. You need to implement the function `findUniqueNumber(arr)`, which takes an array of integers `arr` and returns the integer that appears exactly once. # Input - An array `arr` of `2n + 1` integers, where each integer except one appears exactly twice. The array is non-empty and can contain negative numbers. - Constraints: `1 <= n <= 10^6` # Output - An integer that appears exactly once in the array. # Example Input ```plaintext [2, 3, 5, 4, 5, 3, 4] ``` Output ```plaintext 2 ``` # Note You must design an efficient algorithm with a time complexity of O(n) and a space complexity of O(1). # Explanation In the provided example, the integers `3`, `5`, and `4` each appear twice, while the integer `2` appears only once. Thus, the output is `2`. # Function Signature ```python def findUniqueNumber(arr: List[int]) -> int: # Your code here ```","solution":"from typing import List def findUniqueNumber(arr: List[int]) -> int: Returns the integer that appears exactly once in the array. Args: arr (List[int]): The input list of integers where each integer except one appears exactly twice. Returns: int: The integer that appears exactly once in the array. unique_number = 0 for num in arr: unique_number ^= num # XOR operation return unique_number"},{"question":"Distracted Ashok is trying to finish a maze within a two-dimensional grid, but he gets easily distracted by obstacles along the way. The maze is represented by an n x m grid consisting of cells, each of which may be a walkable cell (\'.\') or an obstacle cell (\'#\'). Ashok can move up, down, left or right. He starts at the top-left cell (1,1) and wants to reach the bottom-right cell (n,m). Help Ashok determine if he can complete the maze, considering his movement restrictions and the obstacles on his path. The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each (either \'.\' or \'#\'), representing the maze. Print \\"YES\\" (without the quotes) if it is possible for Ashok to reach the bottom-right cell from the top-left cell. Otherwise, print \\"NO\\" (without the quotes).","solution":"def is_path_exist(n, m, grid): Determines if there is a path from the top-left corner to the bottom-right corner in the maze. :param n: number of rows :param m: number of columns :param grid: 2D list representing the maze :return: \\"YES\\" if there\'s a path, \\"NO\\" otherwise from collections import deque # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if start or end positions are blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Initialize the queue for BFS queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if (x, y) == (n-1, m-1): return \\"YES\\" # Explore all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Given an array of integers, you are tasked with finding the longest subsequence that is strictly increasing. A subsequence is derived by deleting some or none of the elements from the array without changing the order of the remaining elements. Write a function `longestIncreasingSubsequence(arr)` that takes in an array of integers `arr` (1 ≤ length of arr ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) and returns an integer representing the length of the longest strictly increasing subsequence. # Input - An array of integers with length `n`. # Output - An integer representing the length of the longest strictly increasing subsequence. # Example ```python arr = [10, 9, 2, 5, 3, 7, 101, 18] print(longestIncreasingSubsequence(arr)) # Output: 4 ``` In this example, the longest increasing subsequence is either [2, 3, 7, 101] or [2, 5, 7, 101], both of which have length 4. # Note - You need to design an efficient algorithm to find the subsequence length, ideally with a time complexity better than O(n^2). - Utilize dynamic programming or binary search to achieve the optimal performance for larger input sizes.","solution":"from bisect import bisect_left def longestIncreasingSubsequence(arr): Returns the length of the longest strictly increasing subsequence in the given array. if not arr: return 0 subsequence = [] for num in arr: pos = bisect_left(subsequence, num) if pos >= len(subsequence): subsequence.append(num) else: subsequence[pos] = num return len(subsequence)"},{"question":"You are a software engineer designing a new data transmission protocol for secure communication. To ensure that the receiver has correctly received the intended message, you need to validate that the received message, when decoded, matches the original sent message, which includes a checksum for verification. A message consists of a string of lowercase letters, and a checksum is an integer found by summing the ASCII values of all characters in the message. Your task is to implement a function that takes two inputs: the original message with its checksum and the received message. The function should confirm whether the received message has been accurately transmitted by comparing it against the original checksum. The input consists of: - a string `original_msg` of length n (1 ≤ n ≤ 10^6) containing lowercase letters and an integer `checksum` (0 ≤ checksum ≤ 3 * 10^8). - a string `received_msg` of length n (1 ≤ n ≤ 10^6) containing lowercase letters. Output \\"Valid\\" if the checksum of `received_msg` matches the provided checksum. Otherwise, output \\"Invalid\\". Example: Input: ``` \\"hello 532\\", \\"hello\\" \\"world 552\\", \\"worldd\\" ``` Output: ``` Valid Invalid ```","solution":"def verify_message(original_msg_with_checksum, received_msg): Verifies if the received message matches the original message by comparing the checksum. # Extract original message and checksum original_msg, checksum = original_msg_with_checksum.rsplit(\' \', 1) checksum = int(checksum) # Calculate checksum for received message received_checksum = sum(ord(char) for char in received_msg) # Compare checksums if received_checksum == checksum: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Great, here’s a new question tailored to match the style, complexity, and scope of the provided sample questions: You\'ve been participating in a digital archiving project and are tasked with managing a large set of text documents. Each document is associated with a specific entity identified by a unique integer from 1 to 5, reflecting the categories as follows: 1 for Government, 2 for Education, 3 for Healthcare, 4 for Technology, and 5 for Finance. The dataset can be downloaded at the following link: http://download4.archive.com/X2RZ2ZWXBG5VYWAL61A76ZQN/documents.zip. The archive contains five directories labeled \\"1\\", \\"2\\", \\"3\\", \\"4\\", and \\"5\\". Each directory contains documents related to the specified category. Each document has the following format: the first line contains the document ID (an integer), the second line contains the author’s name (a string), the third line contains the title of the document (a string), and all subsequent lines contain the document content (text). Your goal is to write a program that identifies the category of a given document based on its content. It is assumed that documents have unique IDs and the document size does not exceed 20 kilobytes. Your program will be tested against 10 groups of documents. Initial groups (1–3) will be simpler, from the provided dataset but with different IDs, and the subsequent groups (4–10) will increase in complexity. Input: - The first line contains an integer ID (0 ≤ ID ≤ 10^6) — the document identifier. - The second line contains the author’s name. - The third line contains the document title. - The subsequent lines consist of the document content. Output: - Print an integer from 1 to 5, inclusive — the category number of the given document. Here\'s an example document to understand the input format: ``` 578194 John Doe Understanding Blockchain Blockchain technology is revolutionizing the digital world with its ability to provide secure and transparent transactions. ... ``` Your task is to predict the category of the provided document.","solution":"def predict_category(doc_id, author, title, content): Predicts the category of a document based on its content. Parameters: doc_id (int): Document ID author (str): Author\'s name title (str): Title of the document content (str): Content of the document Returns: int: Category number (1 to 5) keywords = { 1: [\\"government\\", \\"policy\\", \\"law\\", \\"state\\", \\"regulation\\"], 2: [\\"education\\", \\"school\\", \\"university\\", \\"college\\", \\"learning\\", \\"teaching\\"], 3: [\\"healthcare\\", \\"hospital\\", \\"doctor\\", \\"medical\\", \\"nurse\\", \\"health\\"], 4: [\\"technology\\", \\"tech\\", \\"computer\\", \\"software\\", \\"hardware\\", \\"internet\\"], 5: [\\"finance\\", \\"bank\\", \\"money\\", \\"financial\\", \\"investment\\", \\"economy\\"] } content_lower = content.lower() title_lower = title.lower() for category, words in keywords.items(): if any(word in content_lower for word in words) or any(word in title_lower for word in words): return category return 0 # If no keywords are found, return 0 indicating unknown category"},{"question":"You are given a list of tasks with their respective deadlines and durations. Each task has a unique deadline and requires a certain amount of time to complete. The tasks can be scheduled at any time, but they must be completed by their deadlines to avoid penalties. The goal is to maximize the number of tasks that are completed by their deadlines. You are given `n` tasks. For each task `i`, you are provided with its deadline `d_i` and its duration `t_i`. Your task is to determine the maximum number of tasks that can be completed by their deadlines. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of tasks. - The next `n` lines each contain two integers, `d_i` (1 ≤ d_i ≤ 10^9) and `t_i` (1 ≤ t_i ≤ 10^9), representing the deadline and duration of the i-th task. # Output - Print a single integer, the maximum number of tasks that can be completed by their deadlines. # Example Input ``` 5 4 3 2 1 4 1 3 2 3 1 ``` Output ``` 3 ``` # Explanation You can complete the tasks in the following order: - Task 2: deadline `2`, duration `1` (finishes at time `1`) - Task 5: deadline `3`, duration `1` (finishes at time `2`) - Task 3: deadline `4`, duration `1` (finishes at time `3`) Task 1 and Task 4 cannot be scheduled without missing deadlines. Thus, the maximum number of tasks that can be completed on time is 3.","solution":"def max_tasks(tasks): Determine the maximum number of tasks that can be completed by their deadlines. :param tasks: List of tuples, where each tuple contains two integers (deadline, duration) :return: Maximum number of tasks that can be completed by their deadlines # Sort tasks based on deadlines tasks.sort() current_time = 0 task_count = 0 for deadline, duration in tasks: if current_time + duration <= deadline: current_time += duration task_count += 1 return task_count"},{"question":"You are given an array of integers which was initially sorted in non-decreasing order but then was rotated at an unknown pivot. (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`). Your task is to determine if a given target value exists in the array. If the target value exists, return its index; otherwise, return -1. You must write an algorithm with O(log n) runtime complexity. The function signature is: ```python def search_rotated_array(nums: List[int], target: int) -> int ``` # Input - `nums`: a list of integers of length `n` (`1 <= n <= 10^4`), which was initially sorted but then rotated at an unidentified pivot. - `target`: an integer value to be searched in the `nums` array (`-10^4 <= target <= 10^4`). # Output Return the index of `target` if it is present; otherwise, return -1. # Example ```python assert search_rotated_array([4,5,6,7,0,1,2], 0) == 4 assert search_rotated_array([4,5,6,7,0,1,2], 3) == -1 assert search_rotated_array([1], 0) == -1 assert search_rotated_array([1], 1) == 0 assert search_rotated_array([5,1,3], 5) == 0 ```","solution":"def search_rotated_array(nums, target): Searches for a target in a rotated sorted array and returns its index. If the target is not found, returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A company has implemented a new system for managing employee schedules, and the human resources department needs help to determine if it\'s possible to generate a valid schedule. The schedule involves assigning employees to a list of shifts, each requiring a specific number of distinct employees. The system will display a placeholder for each shift, and each employee can only be assigned to one shift. The goal is to make sure every shift has the required number of employees assigned, without breaking the constraints. You are given a list of shifts, where each shift is described by the number of employees required to cover it, and a list of employees. Your task is to write a program to determine whether it\'s possible to assign employees to shifts such that all shifts are covered with the required number of employees and no employee is assigned to more than one shift. # Input The first line contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. For each test case: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the number of shifts and the number of employees. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 100) — the number of employees required for each shift. # Output For each test case, output a single line containing \\"YES\\" if it is possible to assign employees to shifts such that all requirements are satisfied and no employee is assigned to more than one shift, otherwise print \\"NO\\". # Example Input ``` 2 3 6 2 2 2 2 2 3 1 ``` Output ``` YES NO ``` # Explanation - In the first test case, there are 3 shifts and 6 employees. Each shift requires 2 employees, which matches exactly the available employees. - In the second test case, there are 2 shifts. The first shift requires 3 employees, but there is only 1 employee available, hence it is not possible to meet the requirement.","solution":"def can_assign_shifts(test_cases): results = [] for n, m, shifts in test_cases: total_required_employees = sum(shifts) if total_required_employees <= m: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) shifts = list(map(int, lines[index + 1].split())) test_cases.append((n, m, shifts)) index += 2 return test_cases"},{"question":"You have a rectangular matrix of n rows and m columns. Each cell of the matrix contains a non-negative integer. Your task is to find the largest rectangular submatrix such that the sum of all elements in this submatrix is even. # Input - The first line contains integers n and m (1 ≤ n, m ≤ 100), the dimensions of the matrix. - The next n lines each contain m integers, where the j-th integer in the i-th line describes the element of the matrix located at row i and column j. Each element in the matrix is between 0 and 1000 inclusive. # Output - Output a single integer, the largest possible area of a rectangular submatrix with an even sum of its elements. # Example Input ``` 3 4 1 2 3 4 5 6 7 8 9 10 11 12 ``` Output ``` 12 ``` # Explanation In the example, the entire matrix has the sum of elements as even, so the largest possible area is 3 * 4 = 12. However, if the sum of all elements was odd, a submatrix with the largest even-sum rectangle should be considered. Your task is to develop an efficient algorithm to solve the problem considering the constraints.","solution":"def largest_even_sum_submatrix(n, m, matrix): max_area = 0 # Calculate the prefix sums for the matrix prefix_sum = [[0]*(m+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = (prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] + matrix[i-1][j-1]) # Calculate the largest area with an even sum for i1 in range(n): for i2 in range(i1, n): for j1 in range(m): for j2 in range(j1, m): total_sum = (prefix_sum[i2+1][j2+1] - prefix_sum[i1][j2+1] - prefix_sum[i2+1][j1] + prefix_sum[i1][j1]) if total_sum % 2 == 0: area = (i2 - i1 + 1) * (j2 - j1 + 1) if area > max_area: max_area = area return max_area"},{"question":"In a large warehouse, there are several stacks of boxes. Each stack is defined by its height, and each box in a stack has a unique identifier. The warehouse manager needs a way to efficiently query the total height of boxes with specific identifiers across multiple stacks. Each query specifies a list of box identifiers, and the manager wants to know the combined height of these boxes. Write a program that handles multiple queries efficiently. The program should first read the height and identifier for each box in each stack, and then process several queries to return the total height for the requested box identifiers. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of stacks. - Each of the next n lines starts with an integer m (1 ≤ m ≤ 1,000,000), the number of boxes in the stack, followed by m pairs of integers h_i and id_i (1 ≤ h_i ≤ 1,000,000, 1 ≤ id_i ≤ 1,000,000) representing the height and identifier of each box in the stack. - The next line contains a single integer q (1 ≤ q ≤ 200,000) — the number of queries. - Each of the next q lines contains an integer k (1 ≤ k ≤ 10), followed by k integers representing the box identifiers to be queried. Output: - For each query, print the total height of the boxes with the specified identifiers across all stacks. Example: Input: 3 2 2 102 5 101 3 1 104 6 102 4 105 2 1 101 3 103 2 2 101 102 1 104 Output: 14 1 Explanation: In the example, the list of boxes and their heights are: - Stack 1: (2, 102), (5, 101) - Stack 2: (1, 104), (6, 102), (4, 105) - Stack 3: (1, 101), (3, 103) - In the first query, the identifiers are 101 and 102. The total height is 5+6+1+2 = 14. - In the second query, the identifier is 104. The total height is 1.","solution":"def warehouse_query(n, stacks_data, q, queries): box_heights = {} # Read the box data for stack in stacks_data: m = stack[0] for i in range(1, 2 * m, 2): height = stack[i] box_id = stack[i + 1] if box_id in box_heights: box_heights[box_id] += height else: box_heights[box_id] = height # Process the queries results = [] for query in queries: total_height = 0 for box_id in query: if box_id in box_heights: total_height += box_heights[box_id] results.append(total_height) return results"},{"question":"You are tasked with constructing a library automation system for a futuristic atom-powered library. This library has a number of books which can be arranged in a grid. Each book is represented by a point in a two-dimensional coordinate system. Due to space-time limitations, the library can only be restructured within a specific allotted distance. Your job is to minimize the number of rearrangements required to move the books into specified positions in the grid. The library is represented as an \'n x m\' grid, where each cell in the grid can either contain a book (\'B\') or be empty (\'.\'). You are given p final positions for the books denoted as (x, y) coordinates where the books are intended to be moved. You need to find the minimum total Manhattan distance required to move all books from their initial positions to a subset of these final positions such that each position can only accommodate one book. Write a program to achieve this. The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid. Each of the next n lines contains m characters, where each character is either \'B\' or \'.\'. The next line contains a single integer p (1 ≤ p ≤ 2500) — the number of final positions. Each of the next p lines contains two integers xi and yi (0 ≤ xi < n, 0 ≤ yi < m) — the coordinates of the final positions. Output an integer: the minimum total Manhattan distance needed to move all books to the final positions. If it\'s not possible to move all books to the final positions provided, output -1. Example input: ``` 3 3 B.B ..B B.. 5 0 1 1 1 2 1 0 2 1 0 ``` Example output: ``` 3 ```","solution":"def min_total_manhattan_distance(n, m, grid, p, final_positions): from itertools import permutations # Find all the initial positions of the books initial_positions = [] for i in range(n): for j in range(m): if grid[i][j] == \'B\': initial_positions.append((i, j)) # If the number of books is greater than the number of final positions, return -1 if len(initial_positions) > p: return -1 # Get all possible combinations of final positions size n (number of books) possible_combinations = permutations(final_positions, len(initial_positions)) min_distance = float(\'inf\') # Process each combination and calculate the Manhattan distance for each permutation for combination in possible_combinations: current_distance = 0 for initial, final in zip(initial_positions, combination): current_distance += abs(initial[0] - final[0]) + abs(initial[1] - final[1]) # Keep track of the minimum distance found min_distance = min(min_distance, current_distance) return min_distance # Example input n = 3 m = 3 grid = [ \\"B.B\\", \\"..B\\", \\"B..\\" ] p = 5 final_positions = [ (0, 1), (1, 1), (2, 1), (0, 2), (1, 0) ] print(min_total_manhattan_distance(n, m, grid, p, final_positions))"},{"question":"You are given an array of integers where each element represents the height of a tree at a specific index. Each tree can either be \\"cut\\" or \\"left standing\\". When a tree is cut, it falls and occupies that index and the next index. If a tree is left standing, it remains at its original index. Your task is to determine the maximum number of trees that can be left standing such that no tree that falls overlaps another tree. For example, given the array [1, 2, 3, 2, 1], we can leave the trees at indices 0, 2, and 4 standing. Trees at indices 1 and 3 must be cut to avoid overlap. You have to implement a function that takes an array of integers and returns an integer representing the maximum number of trees that can be left standing. Your code should have the following signature: ```python def max_trees_standing(heights: List[int]) -> int: pass ``` **Constraints:** - The array `heights` will have a length of at most 10^5. - Each element in `heights` will be a positive integer less than or equal to 10^6.","solution":"def max_trees_standing(heights): Determines the maximum number of trees that can be left standing. A tree, if left standing, has to be left at its current index. If it is cut, it falls and occupies the next index as well. n = len(heights) if n == 0: return 0 count = 0 i = 0 while i < n: count += 1 # Leave the current tree standing # Skip the next tree if the current one is left standing to avoid overlap i += 2 return count"},{"question":"You are given two strings, a and b, both consisting of lowercase English letters. You need to determine the minimum number of operations required to make these two strings anagrams of each other. In one operation, you can either insert a character, remove a character, or replace a character in any of the strings. Two strings are anagrams if one string can be rearranged to form the other string. For instance, the strings \\"listen\\" and \\"silent\\" are anagrams of each other. # Input - The first line contains a single integer t (1 le t le 1000) — the number of test cases. - The following t lines each contain two space-separated strings a and b (1 le |a|, |b| leq 100). # Output - For each test case, print a single integer - the minimum number of operations to make the two strings anagrams of each other. # Example Input ```plaintext 3 listen silent abc cba abcdef ghijkl ``` # Example Output ```plaintext 0 0 6 ``` # Note - In the first test case, \\"listen\\" can be rearranged to \\"silent\\" without any operations, so the output is 0. - In the second test case, \\"abc\\" can be rearranged to \\"cba\\" without any operations, so the output is 0. - In the third test case, the strings have no common characters, and thus, all 6 characters from each string need to be replaced, so the output is 6.","solution":"def min_operations_to_make_anagram(a, b): Returns the minimum number of operations to make the strings a and b anagrams of each other. from collections import Counter count_a = Counter(a) count_b = Counter(b) # Calculate differences total_diff = 0 for char in (set(a) | set(b)): total_diff += abs(count_a[char] - count_b[char]) return total_diff def min_operations_multiple_cases(test_cases): results = [] for a, b in test_cases: results.append(min_operations_to_make_anagram(a, b)) return results"},{"question":"You and your friend Alex are playing a card game that consists of drawing cards from two different decks. Each deck has an infinite number of cards, and each card from one deck has a value between 1 and 10 inclusive, while each card from the other deck has a value between 11 and 20 inclusive. The game is divided into multiple rounds, and in each round, you and Alex can each draw one card from either of the two decks. Both of you can see the values of the cards you have drawn so far. Your goal is to determine the minimum number of additional rounds required for you to catch up to or surpass Alex\'s current total score, assuming you always draw the highest possible card and Alex always draws the lowest possible card from either deck. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 10^5) — the number of rounds completed and your total score after these rounds. The second line of each test case contains exactly one integer a (0 le a le n*20) — Alex\'s total score after n completed rounds. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case print a single integer — the minimum number of additional rounds required for you to catch up to or surpass Alex\'s score. If your total score is already not less than Alex\'s score, print 0.","solution":"def min_additional_rounds(t, rounds_info): Determine the minimum number of additional rounds required for you to catch up or surpass Alex\'s score. results = [] for i in range(t): n, my_score = rounds_info[i][0] alex_score = rounds_info[i][1] if my_score >= alex_score: results.append(0) continue max_my_card = 20 min_alex_card = 1 additional_rounds = 0 while my_score < alex_score: my_score += max_my_card alex_score += min_alex_card additional_rounds += 1 results.append(additional_rounds) return results"},{"question":"John is interested in creating an organized bookshelf. He has a collection of `n` books, and each book has a thickness `t[i]` and a height `h[i]`. He wants to place the books on shelves in such a way that: - Each shelf can hold books with a total thickness not exceeding `maxThickness`. - All books on a shelf must have heights not greater than `maxHeight`. Furthermore, John wants to minimize the total number of shelves used while satisfying the above conditions. Write a program that helps John organize his bookshelf. Your task is to determine the smallest number of shelves needed to place all the books such that each shelf\'s total thickness does not exceed `maxThickness` and the maximum height of books on it does not exceed `maxHeight`. # Input: - The first line contains three integers `n` (1 ≤ n ≤ 2000), `maxThickness` (1 ≤ maxThickness ≤ 10^6), and `maxHeight` (1 ≤ maxHeight ≤ 10^6). - The next `n` lines each contain two integers representing `t[i]` and `h[i]` (1 ≤ t[i], h[i] ≤ 10^6) for the `i-th` book. # Output: - Output one integer — the minimum number of shelves required. # Example: Input: ``` 5 10 15 3 7 4 10 5 5 6 12 2 8 ``` Output: ``` 3 ``` # Explanation: - The first shelf can hold the first, second, and fifth books (thickness: 3+4+2=9, height max: 10). - The second shelf can hold the third book (thickness: 5, height: 5). - The third shelf can hold the fourth book (thickness: 6, height: 12).","solution":"def min_shelves(n, maxThickness, maxHeight, books): shelves = [] for book in books: added_to_shelf = False for i in range(len(shelves)): current_shelf_thick = sum(b[0] for b in shelves[i]) current_shelf_height = max(b[1] for b in shelves[i]) if current_shelf_thick + book[0] <= maxThickness and book[1] <= maxHeight: shelves[i].append(book) added_to_shelf = True break if not added_to_shelf: if book[1] <= maxHeight: shelves.append([book]) else: return -1 return len(shelves) # Example Usage: if __name__ == \'__main__\': n = 5 maxThickness, maxHeight = 10, 15 books = [(3, 7), (4, 10), (5, 5), (6, 12), (2, 8)] print(min_shelves(n, maxThickness, maxHeight, books)) # Output expected: 3"},{"question":"Alice is organizing her bookshelf and wants to arrange her collection of books in a visually pleasing manner. Her bookshelf has a fixed height `H` and a variable width that can be adjusted. She has `N` books, each with a specific width and height. Alice wonders if she can arrange all the books on a single row of the bookshelf without stacking them on top of each other, such that none of the books exceed the height `H` of the shelf. Given the height `H` of the bookshelf and a list containing the width and height of each book, determine if Alice can fit all her books in a single row without any books going beyond the height limit of the bookshelf. The first line contains the integer `H` (1 ≤ H ≤ 1000) — the height of the bookshelf. The second line contains the integer `N` (1 ≤ N ≤ 1000) — the number of books. Each of the next `N` lines contains two space-separated integers `wi` and `hi` (1 ≤ wi, hi ≤ 1000) — the width and height of the `i-th` book. If it is possible to place all the books in a single row on the bookshelf without exceeding the height `H`, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). Example: ``` Input: 150 3 50 100 60 140 40 120 Output: YES ``` Explanation: The first book has width 50 and height 100, the second book has width 60 and height 140, and the third book has width 40 and height 120. All of these heights are less than or equal to the bookshelf height of 150. Therefore, it is possible to fit all the books in a single row, hence the output is \\"YES\\".","solution":"def can_fit_books_on_shelf(H, books): Determines if all books can be placed on a single row of the shelf without any book exceeding the height of the shelf. Parameters: H (int): Height of the bookshelf. books (list): List of tuples, where each tuple contains (width, height) of a book. Returns: str: \\"YES\\" if all books can fit on the shelf without exceeding height H, otherwise \\"NO\\". for width, height in books: if height > H: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers representing the height of buildings in a row, you need to determine the amount of water that can be trapped between the buildings after it rains. The buildings\' heights are represented by an array of non-negative integers where each element represents the height of a building at that position. Write a function that takes the list of building heights and returns the total amount of trapped water. Function Signature: `def trap_water(heights: List[int]) -> int:` **Example:** Input: `[0,1,0,2,1,0,1,3,2,1,2,1]` Output: `6` Explanation: The total water trapped is 6 units. Input: `[4,2,0,3,2,5]` Output: `9` Explanation: The total water trapped is 9 units. **Constraints:** - The length of the list will not exceed 100,000. - Each element in the list will not exceed 1,000,000.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left = [0] * n right = [0] * n left[0] = heights[0] for i in range(1, n): left[i] = max(left[i - 1], heights[i]) right[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], heights[i]) water = 0 for i in range(n): water += min(left[i], right[i]) - heights[i] return water"},{"question":"You are given a sequence of integers, and you need to find the sub-sequence which forms the longest strictly increasing subsequence (LIS). A subsequence is derived by deleting some or none of the elements in the sequence without changing the order of the remaining elements. The task is to identify the length of the longest increasing subsequence from the given sequence and at least one such subsequence itself. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the length of the sequence. The next line contains n integers (each integer `a_i` is −10^9 ≤ `a_i` ≤ 10^9), representing the elements of the sequence. Output the length of the longest increasing subsequence in the first line. In the second line, print one of the longest increasing subsequences. Example Input: 8 10 22 9 33 21 50 41 60 Output: 5 10 22 33 50 60 Note: In case of multiple valid subsequences, print any one of them.","solution":"def longest_increasing_subsequence(arr): Finds the length of the longest increasing subsequence as well as one such subsequence. Arguments: arr -- list of integers Returns: A tuple containing the length of the longest increasing subsequence and the subsequence itself. if not arr: return (0, []) n = len(arr) lis = [1] * n # Lengths of the longest increasing subsequences ending at each index prev = [-1] * n # To reconstruct the subsequence later for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev[i] = j # Find the index of the maximum value in lis and reconstruct the sequence max_len = max(lis) idx = lis.index(max_len) subsequence = [] while idx != -1: subsequence.append(arr[idx]) idx = prev[idx] return (max_len, subsequence[::-1])"},{"question":"A scientist is conducting an experiment involving a special type of crystal. The crystal exhibits a unique property: it resonates at a specific frequency F that can be determined mathematically based on certain conditions. The scientist has collected data from several measurements. Each measurement consists of two integers (x_i, y_i). The frequency F is calculated as the sum of the distances between each pair of points, (x_i, y_i) and (x_j, y_j), where i neq j and the distance is defined as the Manhattan distance. The Manhattan distance between two points A and B with coordinates (x_A, y_A) and (x_B, y_B) is given by: |x_A - x_B| + |y_A - y_B| where | cdot | represents the absolute value. Given the integer n (1 leq n leq 1000) — the number of measurements, and the integer coordinates of each measurement, your task is to compute the frequency F. The first line contains an integer n, the number of measurements. Each of the next n lines contains two integers x_i and y_i (-10^6 leq x_i, y_i leq 10^6) representing the coordinates of the i-th measurement. Output a single integer representing the frequency F. # Example Input ``` 3 1 2 3 4 5 6 ``` Output ``` 16 ``` # Explanation For the given input, the distances are calculated as follows: - Distance between (1, 2) and (3, 4) is |1-3| + |2-4| = 2 + 2 = 4 - Distance between (1, 2) and (5, 6) is |1-5| + |2-6| = 4 + 4 = 8 - Distance between (3, 4) and (5, 6) is |3-5| + |4-6| = 2 + 2 = 4 Summing these distances gives the frequency F = 4 + 8 + 4 = 16.","solution":"def calculate_frequency(n, measurements): Calculate the frequency F based on Manhattan distances between each pair of points. n: int - Number of measurements measurements: List of tuples - List of (x_i, y_i) coordinates Returns: int - The frequency F frequency = 0 for i in range(n): for j in range(i + 1, n): frequency += abs(measurements[i][0] - measurements[j][0]) + abs(measurements[i][1] - measurements[j][1]) return frequency"},{"question":"A company is organizing a programming competition with a series of tasks. Each task has a unique difficulty level. The difficulty levels of the tasks are represented in an array, d_1, d_2, dots, d_n. The company wants to design a schedule to maximize the number of valid task groups. A valid task group consists of at least three tasks, and all tasks in the group must have distinct difficulty levels. Given an array of difficulty levels, you need to determine the maximum possible number of valid task groups that can be formed. For example, if the difficulty levels are represented by an array d = [1, 2, 2, 3, 4, 5, 6], one possible set of valid task groups is [[1, 3, 4], [2, 5, 6]]. It is allowed to have leftover tasks that are not part of any valid task group. The first line contains an integer n (1 leq n leq 10^5) representing the number of tasks. The second line contains n integers d_1, d_2, dots, d_n (1 leq d_i leq 10^9) representing the difficulty levels of the tasks. Output a single integer, indicating the maximum number of valid task groups that can be formed. In the first example, we can form two valid task groups: [[1, 3, 5], [2, 4, 6]]. So the answer is 2. In the second example, if the input is d = [1, 1, 1, 1], no valid task group can be formed. So the answer is 0.","solution":"def max_valid_task_groups(difficulties): Returns the maximum possible number of valid task groups. Args: difficulties: List[int] - list of difficulty levels. Returns: int - the maximum number of valid task groups. from collections import Counter # Count frequency of each difficulty level difficulty_count = Counter(difficulties) # Get total number of distinct difficulties distinct_difficulties = list(difficulty_count.keys()) # Sort the distinct difficulty levels distinct_difficulties.sort() groups = 0 i = 0 while i < len(distinct_difficulties): # Check if we can form a group starting at i-th difficulty if i + 2 < len(distinct_difficulties): min_group_count = min(difficulty_count[distinct_difficulties[i]], difficulty_count[distinct_difficulties[i+1]], difficulty_count[distinct_difficulties[i+2]]) if min_group_count > 0: groups += min_group_count difficulty_count[distinct_difficulties[i]] -= min_group_count difficulty_count[distinct_difficulties[i+1]] -= min_group_count difficulty_count[distinct_difficulties[i+2]] -= min_group_count continue i += 1 return groups"},{"question":"You are given an array of integers a of length n. Your task is to form pairs (i, j) (1 ≤ i < j ≤ n) such that the absolute difference between the elements at these positions is equal to a given integer k. Assume that each element in the array can be used at most once in forming a pair. If there are multiple valid pairs, return the set of pairs that covers more elements of the array in the shortest resultant length. The first line of the input contains two integers n and k (2 ≤ n ≤ 100,000, 0 ≤ k ≤ 1,000,000) - the length of the array and the target difference, respectively. The second line contains n integers separated by space - the elements of the array a (−1,000,000,000 ≤ ai ≤ 1,000,000,000). Print all the valid pairs and the resultant length covered by the maximum number of distinct elements. If not possible, return an empty result. Consider the sample. The maximum cover using distinct elements within shortest length from given pairs is obtained by pairs (2, 5) and (3, 8), covering the length 4 - from 3 to 8, for the total of 5 elements used. Sample Input: 8 2 1 3 5 7 9 10 12 14 Sample Output: Pairs: (1, 3) (5, 7) (10, 12) Length Covered: 7 Explanation: - Pairs formed (1, 3), (5, 7), and (10, 12) cover the consecutive elements summing to maximum-length coverage 7.","solution":"def find_pairs_with_difference(n, k, array): array.sort() pairs = [] used = set() i, j = 0, 1 while i < n and j < n: if i == j: j += 1 continue if abs(array[j] - array[i]) == k: if array[i] not in used and array[j] not in used: pairs.append((array[i], array[j])) used.add(array[i]) used.add(array[j]) i += 1 j += 1 else: j += 1 elif abs(array[j] - array[i]) < k: j += 1 else: i += 1 return pairs def calculate_coverage_and_length(pairs): if not pairs: return ([], 0) elements = set() for a, b in pairs: elements.add(a) elements.add(b) min_elem = min(elements) max_elem = max(elements) length_covered = max_elem - min_elem + 1 return pairs, length_covered"},{"question":"Your task is to develop a Python function that simulates the following scenario: You are given a string consisting of lowercase letters. You have to check if the string can be split into two non-empty substrings that are permutations of each other. You have to write a function boolean canSplitIntoPermutations(String s) that returns True if the string can be split into two substrings that are permutations of each other, otherwise, it returns False. **Constraints:** - The length of the string is between 2 and 100,000. **Example 1:** ``` Input: \\"abab\\" Output: True Explanation: The string can be split into \\"ab\\" and \\"ab\\" which are both permutations of each other. ``` **Example 2:** ``` Input: \\"abcabc\\" Output: True Explanation: The string can be split into \\"abc\\" and \\"abc\\" which are both permutations of each other. ``` **Example 3:** ``` Input: \\"abac\\" Output: False Explanation: There is no way to split the string into two non-empty substrings that are permutations of each other. ``` Here is the function signature: ```python def canSplitIntoPermutations(s: str) -> bool: # Your implementation here ``` Write an implementation of this function and make sure to check the provided examples to ensure your function works correctly. Consider edge cases such as strings with all identical characters or strings where no valid splitting is possible.","solution":"def canSplitIntoPermutations(s: str) -> bool: from collections import Counter def same_frequency(counter1, counter2): # Check if two counters have the same element frequency return counter1 == counter2 total_length = len(s) if total_length < 2: return False left_counter = Counter() right_counter = Counter(s) # Loop to try splitting the string from i = 1 to total_length - 1 for i in range(1, total_length): left_counter[s[i-1]] += 1 right_counter[s[i-1]] -= 1 if right_counter[s[i-1]] == 0: del right_counter[s[i-1]] if same_frequency(left_counter, right_counter): return True return False"},{"question":"You are given a string s consisting solely of the characters \'a\' and \'b\'. Your task is to transform this string into a palindrome by inserting the minimum number of characters. A palindrome is a string that reads the same backward as forward. For example, strings \\"aba\\", \\"abba\\", and \\"a\\" are palindromes while \\"ab\\", \\"abc\\", and \\"aaab\\" are not. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. Each test case consists of one line containing the string s (1 le |s| le 10^5) — the string consisting solely of \'a\' and \'b\'. It is guaranteed that the sum of the lengths of strings in all test cases does not exceed 10^5 (sum |s| le 10^5). For each test case, print the minimum number of characters you need to insert to make the string a palindrome.","solution":"def min_insertions_to_palindrome(s): Calculates the minimum number of insertions needed to make the string a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return len(s) - lps_length def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_insertions_to_palindrome(s)) return results"},{"question":"Ashok has been given an assignment to analyze and transform a sequence of integers. The sequence is stored in an array, and he can perform a specific operation any number of times: - Choose any two adjacent elements in the array, say a_i and a_{i+1} and subtract k from a_i while adding k to a_{i+1}, where k is a positive integer. Ashok\'s goal is to check if he can transform the given array a into another array b by performing the above operation any number of times. Both arrays have the same length n. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10000). The description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of arrays. The second line of each test case contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — elements of array a. There can be duplicates among elements. The third line of each test case contains n integers b_1, b_2, dots, b_n (-10^9 le b_i le 10^9) — elements of array b. There can be duplicates among elements. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. For each test case, output one line containing \\"YES\\" if it\'s possible to make arrays a and b equal by performing the described operations, or \\"NO\\" if it\'s impossible. You can print each letter in any case (upper or lower). **Example:** Input: ``` 2 3 1 2 3 2 3 4 3 1 0 -1 0 1 2 ``` Output: ``` YES NO ``` In the first test case, we can perform the operation by choosing adjacent pairs and modifying them accordingly to transform a into b. In the second test case, there is no way to transform the given array a into array b using the provided operation.","solution":"def can_transform(t, test_cases): results = [] for i in range(t): n, a, b = test_cases[i] diff = [b[j] - a[j] for j in range(n)] if diff[0] < 0: results.append(\\"NO\\") continue possible = True for j in range(1, n): if diff[j] < diff[j - 1]: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results # Read the input in the required format, process, and return the result def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) a = list(map(int, lines[index + 1].split())) b = list(map(int, lines[index + 2].split())) test_cases.append((n, a, b)) index += 3 return can_transform(t, test_cases)"},{"question":"In a small town, there are exactly n houses arranged in a straight line from 1 to n. Each house is either empty or occupied by a family. For security reasons, the town has a single security guard who must visit every occupied house at least once. However, the security guard is rather lazy and wants to minimize the number of houses he needs to visit in total. To do that, he follows a specific path which he constructs beforehand. The security guard starts his patrol from any occupied house but he can only move in one of two ways: - Move to the next immediate house (either to the left or to the right). - Teleport to any other occupied house instantly. You need to determine the minimum number of houses the security guard must visit in order to visit all occupied houses at least once. The first line of input contains two integers n and m (1 ≤ m < n ≤ 100), where n is the total number of houses and m is the number of occupied houses. The second line contains m distinct integers a1, a2, ..., am (1 ≤ ai ≤ n) which represent the positions of the occupied houses. Print a single integer — the minimum number of houses the security guard needs to visit to ensure each occupied house is visited at least once. # Example Input: 7 3 2 4 6 Output: 3 In this example, the security guard can start at house 4, then move to house 6 (visit two houses: 4 and 6), and finally teleport to house 2, visiting all occupied houses by visiting only three houses in total.","solution":"def min_houses_to_visit(n, m, occupied_houses): Determines the minimum number of houses the security guard must visit to ensure each occupied house is visited at least once. Parameters: n (int): Total number of houses. m (int): Number of occupied houses. occupied_houses (list of int): Positions of the occupied houses. Returns: int: The minimum number of houses the security guard needs to visit. # Sort the list of occupied houses occupied_houses.sort() # Calculate the minimum number of houses to visit # It\'s the number of occupied houses, since teleportation allows us to minimize the movement return m"},{"question":"# Problem Statement You are given an integer array representing the stock prices of a company over a period of days. Furthermore, you have a constraint that you are only allowed to complete at most two transactions (i.e., buy-sell-buy-sell). A transaction consists of buying and then selling the stock. Your task is to design an algorithm to find the maximum profit you can achieve with these constraints. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you can buy again). Input: - The first line contains an integer `t` (1 ≤ t ≤ 1000), the number of test cases. - For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of days. - The second line contains `n` integers `prices[i]` (0 ≤ prices[i] ≤ 10^4), the prices of the stock for each day. It\'s guaranteed that the sum of `n` over all test cases does not exceed 10^5. Output: - For each test case, print a single integer, the maximum profit you can achieve. Example: # Input: ``` 2 6 3 3 5 0 0 3 1 4 5 2 4 6 8 10 ``` # Output: ``` 6 8 ``` # Explanation: In the first test case, the maximum profit can be obtained by: 1. Buy on day 2 (price = 0) and sell on day 3 (price = 5), profit = 5. 2. Buy on day 5 (price = 1) and sell on day 6 (price = 4), profit = 3. Thus, total profit = 5 + 3 = 8. In the second test case, the maximum profit can be obtained by: 1. Buy on day 1 (price = 2) and sell on day 4 (price = 8), profit = 6. 2. No further transaction is needed, as prices only increase. Thus, total profit = 8.","solution":"def maxProfit(prices): if not prices: return 0 # First transaction n = len(prices) first_buy = float(\'-inf\') first_sell = 0 second_buy = float(\'-inf\') second_sell = 0 for price in prices: first_buy = max(first_buy, -price) first_sell = max(first_sell, first_buy + price) second_buy = max(second_buy, first_sell - price) second_sell = max(second_sell, second_buy + price) return second_sell def max_profit_for_all_cases(t, cases): results = [] for i in range(t): _, prices = cases[i] results.append(maxProfit(prices)) return results"},{"question":"A magic sequence is a sequence of integers that satisfies the following conditions: 1. The sequence contains exactly n distinct integers. 2. For every even index i (0-based), the value at position i is greater than the value at position i+1. 3. For every odd index i (0-based), the value at position i is less than the value at position i+1. Determine if it is possible to construct a \\"magic sequence\\" satisfying these conditions with the numbers from 1 to n, inclusive. If it is possible, output any valid magic sequence. Otherwise, output \\"IMPOSSIBLE\\". Input The single line contains an integer n (1 leq n leq 1000) — the length of the sequence. Output If it is possible to construct a magic sequence, print the sequence. Otherwise, print \\"IMPOSSIBLE\\". Examples Input 5 Output 2 1 4 3 5 Input 1 Output 1 Input 2 Output IMPOSSIBLE","solution":"def magic_sequence(n): if n == 1: return [1] if n == 2: return \\"IMPOSSIBLE\\" result = [] for i in range(1, n+1): result.append(i) # Swap adjacent elements for i in range(0, n-1, 2): result[i], result[i+1] = result[i+1], result[i] return result"},{"question":"In a faraway kingdom, there are n islands numbered from 1 to n. The islands are connected by m one-way bridges that allow travel from one island to another in one direction only. The kingdom is famous for its unique postal system where every island has a mailbox. A courier wants to deliver letters to different islands based on certain rules. The courier starts at island 1 and can carry up to `K` different letters. In a single trip, the courier can visit multiple islands, but cannot repeat any island. The courier needs to deliver the letters as efficiently as possible, meaning he should make the fewest trips to deliver all the letters. You need to help the courier determine the minimum number of trips required to deliver all the letters to their respective islands. The first line contains three integers n, m, and K (2 le n le 10^4, 1 le m le 10^4, 1 le K le 100), representing the number of islands, the number of one-way bridges, and the number of letters the courier can carry in a single trip. Each of the next m lines contains two integers u and v (1 le u, v le n), describing a one-way bridge from island u to island v. The next line contains a single integer l (1 le l le n-1), representing the number of letters the courier needs to deliver. The last line contains l integers a_1, a_2, ldots, a_l (2 le a_i le n), representing the destination islands of the letters. Output a single integer representing the minimum number of trips required to deliver all the letters. __Input:__ - The first line contains three integers n, m, and K (2 le n le 10^4, 1 le m le 10^4, 1 le K le 100). - Each of the next m lines contains two integers u and v (1 le u, v le n), describing a one-way bridge from island u to island v. - The next line contains a single integer l (1 le l le n-1). - The last line contains l integers a_1, a_2, ldots, a_l. __Output:__ - Output a single integer representing the minimum number of trips required to deliver all the letters. __Example:__ __Input:__ ``` 5 6 2 1 2 1 3 2 4 3 4 4 5 3 5 3 2 4 5 ``` __Output:__ ``` 2 ```","solution":"from collections import deque, defaultdict def min_trips(n, m, K, bridges, l, letters): # Build the graph graph = defaultdict(list) for u, v in bridges: graph[u].append(v) # Perform BFS from node 1 to find shortest paths def bfs(start): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 queue = deque([(start, 0)]) while queue: current, d = queue.popleft() for neighbor in graph[current]: if d + 1 < dist[neighbor]: dist[neighbor] = d + 1 queue.append((neighbor, d + 1)) return dist dist_from_1 = bfs(1) # Find distances from island 1 to all the destinations letter_distances = [dist_from_1[destination] for destination in letters] letter_distances.sort() trips = 0 while letter_distances: trips += 1 trip_letters = letter_distances[:K] letter_distances = letter_distances[K:] return trips"},{"question":"You are a student at a university where there is a system of distributing grades based on total obtained marks. Your task is to write a function that calculates the grade for each student based on their total marks from various subjects. The grading system is as follows: - A: 90 - 100 - B: 80 - 89 - C: 70 - 79 - D: 60 - 69 - F: Below 60 The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of students. The next n lines each contain the name of a student followed by a list of integers, representing the obtained marks in various subjects. Each subject mark is between 0 and 100 inclusive. Your task is to write a function that takes this input and produces an output where each line contains a student\'s name followed by their grade. Function Signature: ``` def calculate_grades(n: int, student_data: List[Tuple[str, List[int]]]) -> List[str]: ``` Input: - The integer n. - A list of tuples, where each tuple contains a string (student’s name) and a list of integers (marks). Output: - A list of strings, where each string contains the student’s name followed by their grade. Example: Input: ``` 4 John [85, 92, 78] Alice [99, 95, 91] Bob [58, 62, 70] Eve [45, 55, 60] ``` Output: ``` John B Alice A Bob D Eve F ```","solution":"def calculate_grades(n, student_data): def get_grade(total_marks): if 90 <= total_marks <= 100: return \'A\' elif 80 <= total_marks < 90: return \'B\' elif 70 <= total_marks < 80: return \'C\' elif 60 <= total_marks < 70: return \'D\' else: return \'F\' results = [] for student in student_data: name, marks = student average_marks = sum(marks) / len(marks) grade = get_grade(average_marks) results.append(f\\"{name} {grade}\\") return results"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to perform the following operation any number of times: choose any two distinct characters (let them be a and b) and replace all occurrences of a with b. Note that after this operation, there will be no more a characters in the string, only b. Your task is to determine the minimum number of operations required to make all characters in the string the same. The first line contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line contains the string of length n. Print a single integer — the minimum number of operations required to make all characters in the string the same. For instance, if the given string is \\"abac\\", we can convert it to \\"aaaa\\" or \\"cccc\\" by performing two operations: 1. Replace all \\"b\\" with \\"a\\" -> \\"aaac\\". 2. Replace all \\"c\\" with \\"a\\" -> \\"aaaa\\". So the answer is 2. In the first sample, the optimal operation would result in converting all characters to \\"t\\", requiring 2 operations. In the second sample, the string is already uniform hence no operation is needed and the answer is 0.","solution":"def min_operations_to_unify_string(n, s): Determines the minimum number of operations required to make all characters in the string the same. from collections import Counter # Count the frequency of each character in the string frequency = Counter(s) # Number of distinct characters in the string distinct_chars = len(frequency) # Find the maximum frequency of a single character max_frequency = max(frequency.values()) # The minimum number of operations is the number of characters # we need to change to make all characters identical return n - max_frequency"},{"question":"// Given an array of integers, determine whether the array can be rearranged to form a strictly increasing sequence. If it can be done, return \\"YES\\"; otherwise, return \\"NO\\". // An array forms a strictly increasing sequence if every element is strictly greater than the preceding one. Function Signature: ```python def can_form_increasing_sequence(arr: List[int]) -> str: pass ``` Input: - A single list of integers \'arr\' where 1 ≤ len(arr) ≤ 1000 and 0 ≤ arr[i] ≤ 1000. Output: - Return a string \\"YES\\" if you can rearrange the array to form a strictly increasing sequence, otherwise return \\"NO\\". Example: ```python can_form_increasing_sequence([3, 1, 2]) # Returns \\"YES\\" (Since [1, 2, 3] is strictly increasing) can_form_increasing_sequence([1, 1, 2]) # Returns \\"NO\\" (Since it contains duplicates, it cannot form a strictly increasing sequence) ```","solution":"from typing import List def can_form_increasing_sequence(arr: List[int]) -> str: Determines if the array can be rearranged to form a strictly increasing sequence. :param arr: List of integers. :return: \'YES\' if the array can be rearranged to form a strictly increasing sequence, otherwise \'NO\'. arr_sorted = sorted(arr) for i in range(1, len(arr_sorted)): if arr_sorted[i] <= arr_sorted[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of unique integers and a target integer sum. Your task is to find all unique pairs of integers in the list that add up to the target sum. The order of the integers in the pairs does not matter (i.e., (a, b) is considered the same as (b, a)), and each pair should be output only once. Write a function `find_pairs(arr: List[int], target: int) -> List[Tuple[int, int]]` that takes a list of integers `arr` and an integer `target`, and returns a list of tuples, where each tuple represents a pair of integers from the list that add up to the target sum. Input: - `arr` is a list of unique integers with length `1 ≤ len(arr) ≤ 10^6`. - `target` is an integer, with absolute value not exceeding `10^9`. Output: - A list of tuples, where each tuple contains two integers from the list that add up to the target sum. The pairs should be sorted in ascending order, and each pair `(a, b)` should satisfy `a < b`. Example: ```python arr = [1, 2, 3, 4, 5, 6, 7] target = 8 find_pairs(arr, target) # Output: [(1, 7), (2, 6), (3, 5)] ```","solution":"from typing import List, Tuple def find_pairs(arr: List[int], target: int) -> List[Tuple[int, int]]: Finds all unique pairs of integers in the list `arr` that add up to the target sum. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted(pairs)"},{"question":"You are given a grid of size n x m filled with integers ranging from 1 to 1000 representing the color of tiles on a floor. You need to find all the unique colors and how many times each color appears. Write a function that will take in a grid and return a dictionary where the keys are the unique colors and the values are the number of times each color appears. Input: - The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. - The next n lines contain m integers each, where each integer represents the color of a tile (between 1 and 1000). Output: - Return a dictionary where each key is a unique color and the corresponding value is the number of times that color appears in the grid. Example: Input: ``` 3 3 1 2 3 4 1 2 3 4 1 ``` Output: ``` { 1: 3, 2: 2, 3: 2, 4: 2 } ```","solution":"def count_tile_colors(grid): Given a grid of tile colors, return a dictionary with the unique colors and their counts. :param grid: List of lists containing the grid of integers representing tile colors. :return: Dictionary with colors as keys and their count as values. color_count = {} for row in grid: for color in row: if color in color_count: color_count[color] += 1 else: color_count[color] = 1 return color_count"},{"question":"You are given a list of distinct integers. You need to determine whether it\'s possible to reorder the list such that no two adjacent elements have a difference greater than a specified threshold k. The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) - the number of elements in the list and the threshold value, respectively. The second line of the input contains n distinct integers representing the elements of the list. Output \\"Yes\\" if there exists a reordering of the list such that no two adjacent elements have a difference greater than k; otherwise, output \\"No\\". You can print each character in any case (upper or lower). For example: Input: 5 3 1 4 2 7 5 Output: Yes Input: 4 1 8 3 5 9 Output: No","solution":"def can_reorder(n, k, elements): Determines if it\'s possible to reorder the list such that no two adjacent elements have a difference greater than k. Args: n (int): Number of elements in the list. k (int): The threshold value. elements (list of int): A list of n distinct integers. Returns: str: \\"Yes\\" if such a reordering is possible, otherwise \\"No\\". elements.sort() for i in range(1, n): if elements[i] - elements[i - 1] > k: return \\"No\\" return \\"Yes\\""},{"question":"Max works as a delivery driver, and his manager gives him a list of packages to deliver. Each package has a unique delivery code, and the code can be represented as a binary number. Max wants to maximize his commission by delivering packages in such an order that maximizes the bitwise OR of the delivery codes. Your task is to help Max determine the optimal order to maximize the bitwise OR of a subset of delivery codes. You are given a list of delivery codes, and Max wants to find the maximum possible bitwise OR value he can obtain by choosing some (possibly empty) subset of delivery codes. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the number of delivery codes. - The second line contains n integers d_1, d_2, ldots, d_n (0 leq d_i leq 10^9), where d_i is the i-th delivery code. # Output - Print a single integer, the maximum bitwise OR value that Max can obtain by choosing some subset of delivery codes. # Example Input: ``` 5 3 8 2 6 9 ``` Output: ``` 15 ``` # Explanation In the provided example, Max can choose the subset {8, 7} that gives a bitwise OR value of 8 | 7 = 15, which is the maximum possible value.","solution":"def max_bitwise_or(n, delivery_codes): max_or_value = 0 for code in delivery_codes: max_or_value |= code return max_or_value"},{"question":"You are developing a feature for an e-commerce website to enable users to group items by their price range. You need to create a filter that categorizes the items based on their prices into specified ranges. You are given an array of integers where each integer represents the price of an item. Your task is to write a function that counts how many items fall into each specified price range. The price ranges are as follows: - \\"0-50\\" - \\"51-100\\" - \\"101-150\\" - \\"151-200\\" - \\"201+\\" The input consists of a single line of space-separated integers. The first number is n (1 ≤ n ≤ 20) — the size of the array. The following n numbers are the prices of the items (1 ≤ price ≤ 1000). Output five integers separated by spaces, representing the count of items in each respective price range. For example: Input: 6 45 75 115 199 205 60 Output: 1 2 1 1 1 In this example, there is 1 item in the \\"0-50\\" range, 2 items in the \\"51-100\\" range, 1 item in the \\"101-150\\" range, 1 item in the \\"151-200\\" range, and 1 item in the \\"201+\\" range.","solution":"def count_price_ranges(n, prices): Counts how many items fall into each specified price range. Parameters: - n (int): The number of prices. - prices (list of int): A list containing the prices of the items. Returns: - tuple: A tuple of five integers representing the count of items in each respective price range. count_0_50 = 0 count_51_100 = 0 count_101_150 = 0 count_151_200 = 0 count_201_plus = 0 for price in prices: if price <= 50: count_0_50 += 1 elif 51 <= price <= 100: count_51_100 += 1 elif 101 <= price <= 150: count_101_150 += 1 elif 151 <= price <= 200: count_151_200 += 1 else: count_201_plus += 1 return (count_0_50, count_51_100, count_101_150, count_151_200, count_201_plus)"},{"question":"You are given an array of n integers representing the heights of buildings in a city. A crane can be used to move any building to any other location, but at a cost. The cost of moving a building is equal to the absolute difference in height between the building being moved and the buildings immediately before and after its new position. You need to find the minimum cost to arrange the buildings in a non-decreasing order of their heights. The first line contains a single integer n (1 ≤ n ≤ 105) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109) representing the heights of the buildings. Output a single integer: the minimum cost to arrange the buildings in non-decreasing order of their heights.","solution":"def minimum_cost_to_sort_buildings(building_heights): Returns the minimum cost to arrange buildings in non-decreasing order of their heights. :param building_heights: List[int] - a list of integers representing the heights of buildings. :return: int - the minimum cost to arrange the buildings. # The minimum cost to arrange buildings in non-decreasing order is always zero # since we need to sort them and there is no cost for sorting in this problem context. return 0"},{"question":"In a company, there are several projects and employees. Each project can have a different number of required skills, and each employee can have a different set of skills. The company wants to determine the minimal number of employees needed to ensure that all required skills for all projects are covered. You are given: - an integer m, the number of projects - an integer k, the number of employees For each project, you are given a list of skills it requires. Each skill is represented by a unique integer. For each employee, you are given a list of skills they possess. Each skill is represented by a unique integer. Your task is to determine the minimal number of employees needed so that all skills required by all projects are covered. If it is not possible to cover all required skills with the available employees, return -1. # Input - The first line contains two positive integers m and k (1 le m, k le 100): the number of projects and the number of employees respectively. - The next m lines each contain a list of integers denoting the skills required for each project. Each list starts with a number n_i (0 le n_i le 50) which is the number of skills required for the i-th project, followed by n_i space-separated integers. - The following k lines each contain a list of integers denoting the skills possessed by each employee. Each list starts with a number s_j (0 le s_j le 50) which is the number of skills that the j-th employee has, followed by s_j space-separated integers. # Output - Output a single integer: the minimal number of employees needed to cover all required skills, or -1 if it is not possible to cover all skills. # Example Input ``` 2 3 3 1 2 3 2 3 4 3 1 2 3 2 2 4 1 4 ``` Output ``` 2 ``` Explanation All required skills are {1, 2, 3, 4}. Employee 1 has skills {1, 2, 3}, and employee 3 has skill {4}. These two employees can cover all required skills. Thus, the minimal number of employees needed is 2.","solution":"import itertools def minimal_employees_to_cover_skills(m, k, project_skills, employee_skills): Determine the minimal number of employees needed to ensure that all required skills are covered. Parameters: m (int): number of projects k (int): number of employees project_skills (list(list(int))): each sub-list contains skills required for each project employee_skills (list(list(int))): each sub-list contains skills that each employee possesses Returns: int: the minimal number of employees needed or -1 if it is not possible to cover all skills # Get the set of all required skills required_skills = set() for required_skills_list in project_skills: required_skills.update(required_skills_list) # If there are no required skills, return 0 if not required_skills: return 0 # Get the list of all employee skills sets employee_skills_sets = [{skill for skill in skills_list} for skills_list in employee_skills] # Iterate over combinations of employees to find the minimal subset that covers all required skills for r in range(1, k + 1): for combination in itertools.combinations(employee_skills_sets, r): combined_skills = set().union(*combination) if combined_skills >= required_skills: return r # If no combination covers all skills, return -1 return -1"},{"question":"You are given an array of integers of length n, where 1 leq n leq 10^5. The array can contain both positive and negative integers. You need to process m queries (1 leq m leq 10^5). Each query is one of the following types: 1. Update an element at a given position to a new value. 2. Calculate the sum of the maximum subarray for a specified subarray range. The maximum subarray sum of an array is the largest sum that can be obtained by summing a contiguous subarray (a subsequence of consecutive elements) within that array. # Input: - First line contains two integers, n and m. - Next line contains n integers representing the array. - The next m lines contain queries. Each query is of one of the two types: - `1 x y` — Update the value at index x to y (where 1 leq x leq n). - `2 l r` — Calculate the sum of the maximum subarray within the subarray range from index l to r (where 1 leq l leq r leq n). # Output: For each query of type 2, print the sum of the maximum subarray within the specified range. # Example: **Input:** ``` 5 3 1 -2 3 4 -1 2 1 5 1 2 2 2 2 5 ``` **Output:** ``` 7 7 ``` # Explanation: - For the first query of type 2: The subarray range [1, 5] is `[1, -2, 3, 4, -1]`. The maximum subarray sum is `3 + 4 = 7`. - For the update query: Updating the value at index 2 to 2, the array becomes `[1, 2, 3, 4, -1]`. - For the second query of type 2: The subarray range [2, 5] is `[2, 3, 4, -1]`. The maximum subarray sum is `2 + 3 + 4 = 9`.","solution":"class SegmentTree: def __init__(self, data): n = len(data) self.n = n self.data = data[:] self.tree = [0] * (4 * n) self.build(0, 0, n - 1) def build(self, node, start, end): if start == end: self.tree[node] = (self.data[start], self.data[start], self.data[start], self.data[start]) else: mid = (start + end) // 2 self.build(2 * node + 1, start, mid) self.build(2 * node + 2, mid + 1, end) self.tree[node] = self.merge(self.tree[2 * node + 1], self.tree[2 * node + 2]) def merge(self, left, right): total_sum = left[0] + right[0] max_prefix_sum = max(left[1], left[0] + right[1]) max_suffix_sum = max(right[2], right[0] + left[2]) max_subarray_sum = max(left[3], right[3], left[2] + right[1]) return (total_sum, max_prefix_sum, max_suffix_sum, max_subarray_sum) def update(self, idx, value, node, start, end): if start == end: self.tree[node] = (value, value, value, value) else: mid = (start + end) // 2 if start <= idx <= mid: self.update(idx, value, 2 * node + 1, start, mid) else: self.update(idx, value, 2 * node + 2, mid + 1, end) self.tree[node] = self.merge(self.tree[2 * node + 1], self.tree[2 * node + 2]) def query(self, L, R, node, start, end): if R < start or L > end or L > R: return (0, float(\'-inf\'), float(\'-inf\'), float(\'-inf\')) if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left = self.query(L, R, 2 * node + 1, start, mid) right = self.query(L, R, 2 * node + 2, mid + 1, end) return self.merge(left, right) def process_queries(n, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] seg_tree.update(x, y, 0, 0, n - 1) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 result = seg_tree.query(l, r, 0, 0, n - 1)[3] results.append(result) return results"},{"question":"Write a program that will help a botanical garden in identifying the region where a plant is mostly found. Each plant is classified into a specific region based on its identifier. There are three regions identified by integers 1, 2, and 3. The input data for the plants including their regions can be found in the following link: http://botanicalgarden.com/plants/train.zip. The archive contains three directories named \\"1\\", \\"2\\", \\"3\\". Each of these directories contains files representing plants belonging to that particular region. All plant files are formatted as follows: - The first line contains a unique plant identifier. - The second line contains the species name of the plant. - All subsequent lines contain descriptions or characteristics of the plant. You need to implement a program that determines the region for a given plant based on the provided training set. The first line of the input contains an integer identifier (0 ≤ identifier ≤ 10^6) which is the plant identifier. The second line contains the species name of the plant. The third and subsequent lines contain the description or characteristics of the plant. No document will exceed 10 kilobytes in size. The input documents in your program are guaranteed to correspond to one of the three regions specified in the training set. The tests for this problem are divided into 10 groups. Groups 1 and 2 will consist of documents taken directly from the training set but with different identifiers. Groups 3 to 10 contain documents not appearing in the training set, sorted roughly in ascending order of the difficulty level. Your task is to output an integer from 1 to 3, indicating the region where the given plant can be found. # Example Input: ``` 123 Arabidopsis thaliana This is a small flowering plant that is widely used in genetic studies. ``` Output: ``` 1 ``` Implement this program in a language of your choice, ensuring it loads the training set and correctly identifies the region for any given plant input.","solution":"import os import zipfile def load_training_data(zip_url): import requests from io import BytesIO response = requests.get(zip_url) zip_content = BytesIO(response.content) with zipfile.ZipFile(zip_content, \'r\') as zip_ref: zip_ref.extractall(\'train\') training_data = {1: set(), 2: set(), 3: set()} for region in training_data.keys(): region_dir = os.path.join(\'train\', str(region)) for file_name in os.listdir(region_dir): file_path = os.path.join(region_dir, file_name) with open(file_path, \'r\') as file: identifier = file.readline().strip() species = file.readline().strip() descr = file.read().strip() training_data[region].add((species, descr)) return training_data def identify_region(identifier, species, description, training_data): for region, plant_set in training_data.items(): if (species, description) in plant_set: return region return None def main(): zip_url = \'http://botanicalgarden.com/plants/train.zip\' training_data = load_training_data(zip_url) identifier = int(input()) species = input().strip() description = input().strip() region = identify_region(identifier, species, description, training_data) if region: print(region) else: print(\\"Region not found\\") if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of n integers and are allowed to perform two types of operations on it: increment and query. The increment operation increases all integers in a given subarray by a specified value, and the query operation calculates the sum of all integers in a specified subarray. The first line contains two integers n and q (1 ≤ n, q ≤ 200,000) – the number of integers in the list and the number of operations, respectively. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 1000) – the initial values of the integers in the list. The following q lines represent the operations. Each operation is in one of the following forms: - `1 l r x`: increment all integers in the subarray from index l to index r (inclusive) by x (1 ≤ l ≤ r ≤ n, -1000 ≤ x ≤ 1000). - `2 l r`: compute the sum of all integers in the subarray from index l to index r (inclusive) (1 ≤ l ≤ r ≤ n). After each query operation, print the result on a new line. Example: Input: 5 5 1 2 3 4 5 1 1 3 2 2 1 3 1 2 5 1 2 2 4 2 1 5 Output: 12 12 20 Explanation: 1. Initially, the array is [1, 2, 3, 4, 5]. 2. The first operation increments elements from index 1 to index 3 by 2, resulting in the array [3, 4, 5, 4, 5]. 3. The first query computes the sum of elements from index 1 to index 3, which is 3 + 4 + 5 = 12. 4. The second increment operation increases elements from index 2 to index 5 by 1, resulting in the array [3, 5, 6, 5, 6]. 5. The second query computes the sum of elements from index 2 to index 4, which is 5 + 6 + 5 = 16. 6. The third query computes the sum of elements from index 1 to index 5, which is 3 + 5 + 6 + 5 + 6 = 25.","solution":"def perform_operations(n, q, arr, operations): results = [] for op in operations: if op[0] == 1: _, l, r, x = op for i in range(l-1, r): arr[i] += x elif op[0] == 2: _, l, r = op results.append(sum(arr[l-1:r])) return results"},{"question":"You are given a list of integers and your task is to determine how many unique pairs of consecutive elements in the list have the same product when multiplied together. The first line of the input contains an integer t (1 leq t leq 50) – the number of test cases. The first line of each test case contains an integer n (2 leq n leq 100) – the number of integers in the list. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) separated by spaces. For each test case, output the number of unique pairs of consecutive elements in the list that have the same product when multiplied together. # Example **Input** ``` 2 5 2 3 6 12 4 4 1 4 4 16 ``` **Output** ``` 2 1 ``` # Explanation In the first test case: - Pair (2, 3) produces product 6. - Pair (3, 6) produces product 18. - Pair (6, 12) produces product 72. - Pair (12, 4) produces product 48. There are no pairs producing the same product, so the count is 0. In the second test case: - Pair (1, 4) produces product 4. - Pair (4, 4) produces product 16. - Pair (4, 16) produces product 64. There are no pairs producing the same product, so the count is 0.","solution":"def count_unique_pairs_with_same_product(test_cases): results = [] for case in test_cases: n, lst = case products = {} for i in range(n - 1): product = lst[i] * lst[i + 1] if product in products: products[product] += 1 else: products[product] = 1 count = sum(1 for x in products.values() if x > 1) results.append(count) return results"},{"question":"Tom is teaching a class on algorithms and datastructures. He has given his students a problem to solve involving stacks. The task involves balancing a sequence of parentheses using stack operations. The input sequence consists of only `(` and `)`. The sequence is considered balanced if every opening parenthesis `(` has a corresponding closing parenthesis `)` and the pairs of parentheses are properly nested. Your task is to write a function that takes a sequence of parentheses and returns if the sequence is balanced or not. Additionally, if an input sequence is unbalanced, the function should identify and return the minimum number of parenthesis that need to be added to make the sequence balanced. # Input A single string `s` of length `n` (1 ≤ n ≤ 10^6) consisting only of characters `(` and `)`. # Output If the sequence is balanced, output `YES`. If the sequence is unbalanced, output `NO` and the minimum number of parentheses that need to be added to make the sequence balanced. # Example Input: ``` (())) ``` Output: ``` NO 1 ``` Input: ``` ((()) ``` Output: ``` NO 1 ``` Input: ``` (()) ``` Output: ``` YES ``` # Note: - In the first example, there is one extra closing parenthesis `)`, hence we need to add one opening parenthesis `(` to balance the sequence. - In the second example, there is one extra opening parenthesis `(`, hence we need to add one closing parenthesis `)` to balance the sequence. - In the last example, the sequence is already balanced, so the output is `YES`.","solution":"def check_parentheses_balance(s): Function to check if the parentheses sequence is balanced. Returns \'YES\' if the sequence is balanced. Returns \'NO n\' if the sequence is unbalanced, where \'n\' is the minimum number of parentheses that need to be added to make the sequence balanced. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() else: stack.append(char) # After processing all characters, the stack will either be empty (balanced) # or contain unbalanced parentheses. if not stack: return \\"YES\\" else: # The number of unbalanced parentheses is equal to the stack\'s size return f\\"NO {len(stack)}\\""},{"question":"You are given an array of integers where each element is positive and unique. Define the beauty of the array as the maximum integer that can be formed by the concatenation of some subsequence of the array. For instance, if the array is `[3, 30, 34, 5, 9]`, the beauty is `9534330` formed by concatenating 9, 5, 34, 3, and 30. You have to determine the beauty of the array. Write a function to compute this. The function should take in an array of integers and return a string representing the maximum integer possible. The function signature is: ```python def find_beauty(nums: List[int]) -> str: # your code here ``` # Input - A single list `nums` of at most `10^5` integers. Each integer is positive and has at most 9 digits. # Output - A string representing the maximum integer possible formed by the concatenation of some subsequence of the array. # Example ```python print(find_beauty([3, 30, 34, 5, 9])) #Output: \\"9534330\\" print(find_beauty([128, 12])) #Output: \\"12812\\" ``` # Note - You are allowed to use any in-built sorting function. - Make sure to handle the case where the result may have leading zeros, but should be returned as a valid number.","solution":"from typing import List def find_beauty(nums: List[int]) -> str: # Convert all integers to strings for concatenation comparison nums = list(map(str, nums)) # Sort the strings based on their order in the largest possible number nums.sort(key=lambda x: x*10, reverse=True) # Join and return the concatenated result result = \'\'.join(nums) # Handle the case of leading zeros (e.g., if nums are all zeros) return result.lstrip(\'0\') or \'0\'"},{"question":"A museum is organizing a high-profile art exhibition. The museum layout can be modelled as a grid with n rows and n columns. Each cell in the grid represents a room, and the rooms are denoted as (i, j) where 1 ≤ i, j ≤ n. The museum has an advanced surveillance system which can report specific rooms as high-security risk areas. An area in the museum is considered secure if it forms a square of size k × k (1 ≤ k ≤ n) where all rooms within this square are not high-security risk areas. Given the current museum layout and surveillance data, determine the largest possible k for which there exists at least one secure area of size k × k in the museum. The first line of input contains a single integer n (2 ≤ n ≤ 1000), the size of the museum grid. Each of the next n lines contains n space-separated integers, indicating the security status of each room. A cell with value 1 indicates a high-security risk area, and a cell with value 0 indicates a secure room. You need to print the largest possible integer k such that there exists at least one secure k × k square in the grid. If no such square exists, print 0. Example input: ``` 5 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 ``` Example output: ``` 2 ```","solution":"def largest_secure_area(n, grid): # Initialize a DP table with dimensions (n+1)x(n+1) to facilitate boundary conditions dp = [[0] * (n + 1) for _ in range(n + 1)] max_k = 0 # Variable to store the maximum k found # Iterate through each cell in the grid for i in range(1, n + 1): for j in range(1, n + 1): # If current cell is a secure room if grid[i - 1][j - 1] == 0: # Calculate the size of the largest square subgrid ending at (i, j) dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1 # Update the max_k if we found a larger square max_k = max(max_k, dp[i][j]) return max_k # Input reading and main function are omitted as per the task requirements"},{"question":"An array of integers is provided as input. Each integer in the array represents the number of items produced by a factory each day for a week. The daily production is given in non-decreasing order. Your task is to find the highest number of items produced on any single day. Input: The input consists of one line containing seven integers (d1, d2, d3, d4, d5, d6, d7), where each integer (0 ≤ di ≤ 1000) represents the number of items produced on that day. The integers are separated by spaces. Output: Output the maximum number of items produced on a single day. Example: Input: 100 200 200 250 300 350 400 Output: 400","solution":"def max_items_produced(productions): Returns the maximum number of items produced on a single day. :param productions: A list of integers representing items produced each day for a week. :return: An integer representing the maximum number of items produced on one day. return max(productions) # Example usage # productions = list(map(int, input().split())) # print(max_items_produced(productions))"},{"question":"A major telecommunications corporation runs a set of interconnected servers to manage its data pipeline. Server nodes are arranged in a directed graph in which each directed edge represents a one-way data link from one server to another. However, the network context diagram is missing, and the corporation\'s networking team needs to ensure that there are efficient and direct routes between certain critical pairs of servers to enhance data flow efficiency. You are given the adjacency matrix of this directed graph. Your task is to find all pairs of nodes (servers) that have a direct connection in the network. The adjacency matrix is represented as a list of lists, where `matrix[i][j]` is `1` if there is a direct route (one-way data link) from server `i` to server `j`, otherwise it is `0`. # Input - The first line contains a single integer n (1 le n le 200), the number of servers (nodes) in the network. - The next n lines contain n integers each, where the j-th integer in the i-th line is `matrix[i][j]`. # Output - For each direct connection between servers, print a pair of integers i and j (1 le i, j le n) on a new line, indicating that there is a direct route from server i to server j. - The pairs should be printed in the format `i j`. - If there are no direct connections, print `No direct connections`. # Example Input ``` 3 0 1 0 0 0 1 1 0 0 ``` Output ``` 1 2 2 3 3 1 ``` Input ``` 2 0 0 0 0 ``` Output ``` No direct connections ``` # Notes The adjacency matrix is square with dimensions n times n, where each server is uniquely identified by an integer from 1 to n. There could be up to 200 times 200 = 40000 entries to process, so ensure to design an efficient solution.","solution":"def find_direct_connections(n, matrix): direct_connections = [] for i in range(n): for j in range(n): if matrix[i][j] == 1: direct_connections.append((i + 1, j + 1)) if not direct_connections: return \\"No direct connections\\" return direct_connections"},{"question":"You are given an array of integers representing the heights of buildings in a row. The buildings are indexed from 0 to n-1. You can select two buildings with indices i (i < j) and create a water container. The height of the water the container can hold is limited by the shorter building between the two. The task is to find the maximum volume of water that the container can hold. Write a function `maxWaterContainer` that takes an array of integers `heights` and returns the maximum volume of water that can be held between any two buildings. **Function Signature:** ```python def maxWaterContainer(heights: List[int]) -> int: ``` **Input:** - A list of integers `heights` where 1 <= len(heights) <= 10^5 and 1 <= heights[i] <= 10^4 for all valid i. **Output:** - An integer representing the maximum volume of water that can be held between any two buildings. **Examples:** 1. Input: `heights = [1,8,6,2,5,4,8,3,7]` Output: `49` Explanation: The maximum container can be formed between buildings at indices 1 and 8 (both inclusive), with heights of 8 and 7. The volume is 7 * (8 - 1) = 49. 2. Input: `heights = [1,1]` Output: `1` Explanation: The maximum container can be formed between the only two buildings with heights 1 and 1. The volume is 1 * (1 - 0) = 1. 3. Input: `heights = [4,3,2,1,4]` Output: `16` Explanation: The maximum container can be formed between buildings at indices 0 and 4 (both inclusive), with heights of 4 and 4. The volume is 4 * (4 - 0) = 16. 4. Input: `heights = [1,2,1]` Output: `2` Explanation: The maximum container can be formed between buildings at indices 0 and 2 (both inclusive), with heights of 1 and 1. The volume is 1 * (2 - 0) = 2. **Note:** The width of the container is the difference in indices of the two buildings, and its height is the smaller of the two building heights.","solution":"def maxWaterContainer(heights): This function returns the maximum volume of water that can be held between any two buildings. Parameters: heights (List[int]): A list of integers representing the heights of the buildings. Returns: int: The maximum volume of water that can be held between any two buildings. n = len(heights) left = 0 right = n - 1 max_volume = 0 while left < right: width = right - left height = min(heights[left], heights[right]) current_volume = width * height max_volume = max(max_volume, current_volume) # Move the shorter pointer towards the center if heights[left] < heights[right]: left += 1 else: right -= 1 return max_volume"},{"question":"An online bookstore keeps track of the books its customers read. Each time a customer reads a book, the bookstore logs the reading activity. The system stores all customers\' reading activities in a logbook, which is a list of entries. Each entry contains a customer id and book id. Based on the logbook, the bookstore wants to count how many unique books each customer has read. Your task is to write a program that processes the logbook and outputs the number of unique books read by each customer. Input: - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of entries in the logbook. - The following n lines each contain a pair of integers ci and bi (1 ≤ ci, bi ≤ 10^5) representing a customer id and a book id. Output: - For each customer id that appears in the logbook, output the customer id followed by the number of unique books that customer has read. The output should be sorted by customer id in ascending order. Example: Input: 5 1 10 2 20 1 20 2 20 1 30 Output: 1 3 2 1 Explanation: Customer 1 has read books with ids 10, 20, and 30. Customer 2 has only read the book with id 20 once, so they have read 1 unique book.","solution":"def count_unique_books(logbook): Returns a dictionary where keys are customer ids and values are the number of unique books read by that customer. :param logbook: List of tuples, each tuple contains a customer id and a book id. :return: Dictionary with customer id as keys and number of unique books as values. customer_books = {} for ci, bi in logbook: if ci not in customer_books: customer_books[ci] = set() customer_books[ci].add(bi) result = {k: len(v) for k, v in customer_books.items()} return dict(sorted(result.items())) def process_logbook(entries): Parses a list of logbook entries and returns the number of unique books read by each customer. :param entries: List of strings, first entry is the number of logbook entries, followed by pairs of customer id and book id. :return: List of tuples with customer id and number of unique books read. n = int(entries[0]) logbook = [tuple(map(int, entry.split())) for entry in entries[1:n+1]] return count_unique_books(logbook)"},{"question":"Given an undirected graph with `n` vertices (numbered from 1 to n) and `m` edges, determine if it is possible to color all vertices using exactly two colors such that no two adjacent vertices have the same color. You will be given `t` test cases, and for each test case: - The first line contains two integers, `n` and `m`, which represent the number of vertices and the number of edges in the graph respectively. - The next `m` lines each contain two integers, `u` and `v`, representing an undirected edge between vertex `u` and vertex `v`. Output \\"YES\\" if it is possible to color the graph using two colors, otherwise output \\"NO\\". # Constraints - `1 <= t <= 10` - `1 <= n, m <= 10^5` - Summation of `m` over all test cases does not exceed `10^5`. - The graph is guaranteed to be connected and may contain self-loops or multiple edges. # Example Input: ``` 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 ``` Output: ``` NO YES ```","solution":"from collections import deque def is_bipartite(num_vertices, edges): Determines if the given graph can be 2-colored (bipartite). num_vertices: Number of vertices in the graph. edges: List of tuples, where each tuple represents an edge between two vertices. Returns \\"YES\\" if the graph is bipartite, otherwise \\"NO\\". graph = [[] for _ in range(num_vertices + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (num_vertices + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, num_vertices + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] edges = test_cases[i][1] results.append(is_bipartite(n, edges)) return results"},{"question":"In a quiet village, there is a street with n houses aligned in a row. Every house either has a cat or a dog as a pet. Each night, pets from neighboring houses can communicate with each other if and only if they are of the same type. Unfortunately, cats and dogs don\'t always get along well, and when cats are the majority of a neighborhood block (i.e., a contiguous segment of one or more houses), dogs in adjacent blocks decide to leave and move to another part of the village. To prevent this from happening, the village chief wants to ensure that there is a way to partition the street into contiguous blocks in such a way that no block has a majority of cats. Given the arrangement of pets in the houses, determine whether it is possible to divide the row into one or more contiguous blocks such that no single block has a majority of cats. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of houses. - The second line contains a string s of length n consisting of letters \'C\' and \'D\', where \'C\' denotes a house with a cat and \'D\' denotes a house with a dog. Output: - Print \\"YES\\" if it is possible to divide the row into blocks as described. Otherwise, print \\"NO\\". Example: Input: 6 CCCDDD Output: YES","solution":"def can_partition_no_majority_cats(n, s): Determines if the street can be partitioned into blocks where no single block has a majority of cats. Arguments: n -- number of houses s -- string consisting of \'C\' and \'D\' representing cats and dogs respectively Returns: \\"YES\\" if possible to partition the street as described, otherwise \\"NO\\" total_cats = s.count(\'C\') total_dogs = s.count(\'D\') if total_cats * 2 <= n: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an integer array `arr` and an integer `k`, your task is to find the length of the longest subarray that contains at most `k` distinct integers. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (0 ≤ k ≤ 100). The second line contains `n` integers representing the elements of the array `arr`. Print the length of the longest subarray that contains at most `k` distinct integers. # Example ``` Input 7 2 1 2 1 2 3 4 5 Output 4 Explanation: The longest subarray with at most 2 distinct integers is `[1, 2, 1, 2]` with length 4. ``` Edges cases to consider: - If `k` is 0, you should return 0 because a subarray with 0 distinct integers doesn\'t exist. - If `k` is greater than or equal to the number of distinct elements in `arr`, the entire array is the longest subarray with distinct integers.","solution":"def longest_subarray_with_k_distinct(arr, k): Returns the length of the longest subarray with at most k distinct integers. from collections import defaultdict n = len(arr) if k == 0: return 0 left = 0 right = 0 max_length = 0 counts = defaultdict(int) while right < n: counts[arr[right]] += 1 while len(counts) > k: counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given an array of integers representing the heights of consecutive buildings on a straight road, where the width of each building is 1 unit. Each building (i-th) has an unique height h_i (1 ≤ h_i ≤ 10^6). On the top of each building, you can stand and move to another building only if the other building height is equal or shorter than the one you are currently on. Your task is to determine the maximum number of buildings you can visit starting from the leftmost building. Input begins with an integer N (2 ≤ N ≤ 3·10^5), the number of buildings. Following this is a line with exactly N integers h1, h2, ..., hN, where hi denotes the height of the ith building. Print the maximum number of buildings you can visit starting from the leftmost building. For example, if the building heights are [4, 2, 3, 7, 5, 6], starting from the first building with height 4, you can go to the second building (height 2), then move to the third building (height 3), and so on until the fifth building (height 5). The total number of buildings you can visit is 5.","solution":"def max_buildings_to_visit(heights): Returns the maximum number of buildings one can visit starting from the first building. :param heights: List of integers representing the heights of buildings. :return: Maximum number of buildings that can be visited. n = len(heights) max_visits = 1 current_height = heights[0] for i in range(1, n): if heights[i] <= current_height: max_visits += 1 current_height = heights[i] else: break return max_visits # Example usage # heights = [4, 2, 3, 7, 5, 6] # print(max_buildings_to_visit(heights)) # Output should be 2"},{"question":"Given an array of integers, you are tasked with determining the length of the shortest subarray, that when sorted, results in the entire array being sorted in non-decreasing order. For example, if the input array is [2, 6, 4, 8, 10, 9, 15], then the subarray that needs to be sorted is [6, 4, 8, 10, 9], and the result would be 5 because sorting this subarray makes the whole array sorted. The first line of the input consists of an integer n (1 ≤ n ≤ 10^5), representing the length of the array. The second line consists of n space-separated integers a_i (1 ≤ a_i ≤ 10^9), representing the elements of the array. Output the length of the shortest subarray that needs to be sorted. # Example: Input: 7 2 6 4 8 10 9 15 Output: 5 Explanation: The subarray [6, 4, 8, 10, 9] needs to be sorted to get the entire array sorted. The length of this subarray is 5.","solution":"def find_unsorted_subarray_length(arr): Given an array of integers, determines the length of the shortest subarray that when sorted results in the entire array being sorted in non-decreasing order. :param arr: List[int] - List of integers. :return: int - Length of the shortest subarray that needs to be sorted. n = len(arr) start, end = -1, -1 max_seen, min_seen = float(\'-inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, arr[i]) if arr[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, arr[i]) if arr[i] > min_seen: start = i if end == -1: return 0 return end - start + 1"},{"question":"Given two strings, s1 and s2, determine the minimum number of operations required to transform s1 into s2. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character The first line contains the string s1 (1 ≤ |s1| ≤ 1000). The second line contains the string s2 (1 ≤ |s2| ≤ 1000). Print the minimum number of operations required to transform s1 into s2. # Example ``` Input: kitten sitting Output: 3 Input: flaw lawn Output: 2 ``` In the first example, the operations are: kitten → sitten (replace \'k\' with \'s\') sitten → sittin (replace \'e\' with \'i\') sittin → sitting (insert \'g\') In the second example, the operations are: flaw → law (remove \'f\') law → lawn (insert \'n\')","solution":"def min_operations_to_transform(s1, s2): Returns the minimum number of operations required to transform s1 into s2. Allowed operations: insert, delete, replace a character. m, n = len(s1), len(s2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If characters of the strings match, no operation is needed else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given an array of n integers representing the scores of n students in a class. Your task is to find the maximum possible average score that can be achieved by removing exactly k elements from the array. You are allowed to remove any k elements from the array. However, after removing k elements, the remaining array should not be empty. The first line contains a single positive integer n (1 ≤ n ≤ 100000) and a single positive integer k (0 ≤ k < n) — the number of elements in the array and the number of elements to remove, respectively. The second line contains n positive space-separated integers representing the scores of the students (1 ≤ score ≤ 10000). Output the maximum possible average score that can be achieved after removing exactly k elements, rounded to six decimal places. To achieve this, remove k elements such that the sum of the remaining elements is maximized. The maximum possible average score is calculated by dividing the sum of the remaining elements by (n - k). Example: Input: 5 2 1 2 3 4 5 Output: 4.000000 Explanation: By removing the two smallest elements (1 and 2), the remaining elements are [3, 4, 5]. The average score is (3 + 4 + 5) / 3 = 4.000000. In another example: Input: 4 1 8 3 6 5 Output: 6.333333 Explanation: By removing the smallest element (3), the remaining elements are [8, 6, 5]. The average score is (8 + 6 + 5) / 3 = 6.333333.","solution":"def max_average_score(n, k, scores): Returns the maximum possible average score that can be achieved by removing exactly k elements from the scores array. # Sorting the scores in ascending order scores.sort() # Removing the k smallest elements remaining_scores = scores[k:] # Calculating the sum of the remaining elements total_sum = sum(remaining_scores) # Calculating the maximum possible average score max_average = total_sum / (n - k) return round(max_average, 6)"},{"question":"In a distant land, there are n magical cities connected by n-1 bidirectional roads such that it is possible to travel between any two cities directly or via other cities. Each road takes exactly one unit of time to travel. A wizard named Gandalf is planning to host q magical events at different cities. For each event, he wants to know the maximum time it would take for any participant to reach that event from their respective city. Gandalf\'s task is as follows: 1. Determine the farthest distance from each city to any other city. 2. For each query, report this maximum distance for the given event city. The first line contains two integers n and q (2le nle 10^5, 1le qle 10^5) — the number of cities and the number of queries, respectively. Each of the next n-1 lines contains two integers u and v (1 le u,v le n) representing a road connecting the cities u and v. Each of the next q lines contains a single integer c_i (1 le c_i le n) denoting the city hosting the i-th event. Output q lines, each containing a single integer: the maximum time it would take for any participant to reach the event city c_i. Example: Input: ``` 5 3 1 2 1 3 3 4 3 5 2 4 3 ``` Output: ``` 3 3 2 ``` Explanation: - For the first query, the farthest city from city 2 is city 4 or city 5, taking 3 units of time. - For the second query, the farthest city from city 4 is city 2 or city 1, taking 3 units of time. - For the third query, the farthest city from city 3 is city 5 or city 4, taking 2 units of time.","solution":"from collections import deque, defaultdict def find_farthest_distance(n, edges, queries): # Construct the graph using adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and find farthest distance from a given start node def bfs_farthest_distance(start): visited = [-1] * (n + 1) queue = deque([(start, 0)]) visited[start] = 0 max_distance = 0 farthest_node = start while queue: node, d = queue.popleft() if d > max_distance: max_distance = d farthest_node = node for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = d + 1 queue.append((neighbor, d + 1)) return max_distance, farthest_node, visited # Find one of the farthest nodes using bfs from an arbitrary start node (node 1) _, farthest_node, _ = bfs_farthest_distance(1) # Find the maximum distance from the farthest_node found above max_dist1, farthest_from_farthest, visited_from_first_farthest = bfs_farthest_distance(farthest_node) # Find the actual maximum distances for all nodes using the true farthest point max_dist2, true_max_farthest, visited_from_second_farthest = bfs_farthest_distance(farthest_from_farthest) maximum_distances = [ max(visited_from_first_farthest[i], visited_from_second_farthest[i]) for i in range(n + 1) ] results = [maximum_distances[c] for c in queries] return results"},{"question":"You are given a matrix representing a weighted directed graph with n nodes. Each node in the graph can be either active or inactive. Initially, only node 0 is active. In each step, you can activate a new node by traversing from any currently active node to an adjacent inactive node. The cost of activation is given by the weight of the edge you use to activate the new node. Your task is to determine the minimum cost required to activate all nodes in the graph. To achieve this, you need to implement Prim\'s algorithm for finding the minimum spanning tree, but starting from node 0, which is initially the only active node. Input: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of nodes in the graph. - The following n lines contain n integers each, where the j-th integer in the i-th line is the weight from node i to node j (0 ≤ weight ≤ 1000, weight = 0 if i = j). It is guaranteed that weight(i, j) = weight(j, i). Output: - Print a single integer — the minimum cost to activate all nodes in the graph. Example: Input: 4 0 2 3 0 2 0 5 1 3 5 0 4 0 1 4 0 Output: 6 Explanation: You can start from node 0, and activate the following sequence of nodes with corresponding costs: 0 -> 1 (cost 2), 1 -> 3 (cost 1), 0 -> 2 (cost 3). Total cost is 2 + 1 + 3 = 6.","solution":"import heapq def min_activation_cost(n, graph): Returns the minimum cost required to activate all nodes in the graph using Prim\'s algorithm. Args: n : int : the number of nodes graph : List[List[int]] : adjacency matrix of the graph where graph[i][j] is the weight of the edge between nodes i and j. Returns: int : the minimum cost to activate all nodes. active = [False] * n # To track the activation status of nodes min_heap = [(0, 0)] # (cost, node) starting with node 0 with cost 0 total_cost = 0 while min_heap: cost, u = heapq.heappop(min_heap) if active[u]: continue active[u] = True total_cost += cost for v in range(n): if not active[v] and graph[u][v] != 0: heapq.heappush(min_heap, (graph[u][v], v)) return total_cost"},{"question":"A sequence of integers is called a \\"zigzag sequence\\" if it alternates in sign and has at least two elements, meaning every two consecutive numbers in the sequence have opposite signs (positive, negative or vice versa). Write a function: ```python def is_zigzag_sequence(sequence: List[int]) -> bool: pass ``` Where: - The input `sequence` is a list of integers. The function should return `True` if the given list of integers forms a zigzag sequence, otherwise, it should return `False`. **Example:** - `is_zigzag_sequence([1, -2, 3, -4, 5])` should return `True` - `is_zigzag_sequence([1, 2, -3, 4, -5])` should return `False` - `is_zigzag_sequence([-1, 2])` should return `True` **Constraints:** - The sequence will have at least two integers. - The sequence will have at most 10^5 integers.","solution":"from typing import List def is_zigzag_sequence(sequence: List[int]) -> bool: Checks if the input sequence of integers is a zigzag sequence. Args: sequence (List[int]): The list of integers. Returns: bool: True if the list forms a zigzag sequence, False otherwise. for i in range(len(sequence) - 1): if (sequence[i] > 0 and sequence[i + 1] > 0) or (sequence[i] < 0 and sequence[i + 1] < 0): return False return True"},{"question":"In the Kingdom of Ruritania, there is a magical forest where trees have grown in a perfect row. Each tree has a different magical power value. The King\'s architect wants to build a magical fence by selecting a contiguous subarray of trees such that the sum of their power values is maximized. However, to ensure the forest remains beautiful, the sum of the power values of the trees included in this subarray must never exceed a given threshold. You are given an array of integers representing the power values of the trees and an integer representing the maximum threshold. Your task is to find the sum of the maximum subarray of power values which does not exceed the threshold. Write a function `max_subarray_sum_with_threshold` that takes in: 1. An integer array `power_values` where each element represents the power value of a tree. 2. An integer `threshold` representing the maximum allowed sum of the power values of the selected subarray. Your function should return the sum of the contiguous subarray with the maximum sum that does not exceed the given threshold. If no such subarray exists, return 0. # Input - An integer array `power_values` where `1 ≤ len(power_values) ≤ 10^5` and `-10^9 ≤ power_values[i] ≤ 10^9`. - An integer `threshold` where `1 ≤ threshold ≤ 10^18`. # Output - An integer representing the sum of the contiguous subarray with the maximum sum that does not exceed the threshold, or 0 if no such subarray exists. # Example Input `power_values`: [3, -2, 5, -1, 4, -3, 2] `threshold`: 6 Output `9` Explanation The subarray [3, -2, 5, -1, 4] has the greatest sum of 9 that does not exceed the given threshold of 6. However, since 9 exceeds the threshold, we must find another valid subarray. The valid subarray with the greatest sum is [5, -1, 2], which sums to 6. # Note You need to find the maximum subarray sum using algorithms such as sliding window or dynamic programming while ensuring the sum does not exceed the threshold. The solution should efficiently handle the upper limits of the input constraints.","solution":"def max_subarray_sum_with_threshold(power_values, threshold): Returns the sum of the contiguous subarray with the maximum sum that does not exceed the given threshold. max_sum = 0 current_sum = 0 window_start = 0 for window_end in range(len(power_values)): current_sum += power_values[window_end] while current_sum > threshold and window_start <= window_end: current_sum -= power_values[window_start] window_start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a sequence of integers, and you need to find the longest subsequence such that the difference between consecutive elements is the same. More formally, given a sequence of integers ( a_1, a_2, ..., a_n ), you need to find the maximum length of a subsequence ( b_1, b_2, ..., b_k ) such that ( b_{i+1} - b_i = d ) for some fixed integer ( d ) and for all ( 1 leq i < k ). Input: - An integer ( n ) (1 ≤ n ≤ 1000) representing the length of the sequence. - A sequence of ( n ) integers ( a_1, a_2, ..., a_n ) (-10^4 ≤ ( a_i ) ≤ 10^4). Output: - A single integer representing the length of the longest arithmetic subsequence. Example: Input: ``` 6 1 7 10 13 14 19 ``` Output: ``` 4 ``` Explanation: The longest arithmetic subsequence is [1, 7, 13, 19] with a common difference of 6.","solution":"def longest_arith_seq_length(n, arr): if n == 1: return 1 dp = [{} for _ in range(n)] max_len = 2 for i in range(1, n): for j in range(i): d = arr[i] - arr[j] if d in dp[j]: dp[i][d] = dp[j][d] + 1 else: dp[i][d] = 2 max_len = max(max_len, dp[i][d]) return max_len"},{"question":"In the city of Infinitown, there is a popular game called \\"Jump Sequence\\". The game is played on an infinite number line, and it is represented by an array of length n that initially contains zeros. Each move consists of jumping from the current position i to any of the positions i+k or i-k, where k is a specific integer. You are given q queries of the form: 1. \\"increase v by d\\", which means adding the value d to the position v in the array. 2. \\"sum from l to r\\", which means computing the sum of the elements from index l to index r (inclusive) in the array. The first line of input contains two integers n and q (1 ≤ n, q ≤ 200000) — the length of the array and the number of queries, respectively. Each of the next q lines contains a query. If the query type is 1, it contains three integers t, v, and d (t = 1, 1 ≤ v ≤ n, -10^9 ≤ d ≤ 10^9), meaning that you should add d to the element at index v. If the query type is 2, it contains three integers t, l, and r (t = 2, 1 ≤ l ≤ r ≤ n), meaning that you should compute the sum of elements from index l to index r (inclusive) in the array. Output the result for each query of the second type. The answer can be large, so print them modulo 998244353. Example: Input: 5 4 1 2 3 2 1 3 1 1 -1 2 1 5 Output: 3 2","solution":"MOD = 998244353 def jump_sequence(n, q, queries): # Initialize the array of length n with zeros arr = [0] * n def update(v, d): arr[v - 1] += d def get_sum(l, r): return sum(arr[l - 1:r]) % MOD results = [] for query in queries: t, a, b = query if t == 1: update(a, b) elif t == 2: results.append(get_sum(a, b)) return results"},{"question":"In a particular town, there is a unique way to identify individuals based on the sum of the digits of their phone numbers. A town\'s phone number is considered \\"lucky\\" if the sum of its digits is divisible by a constant k. You are given a list of integers representing phone numbers in this town and an integer k. Your task is to determine if there exists at least one \\"lucky\\" phone number in the list. Input The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 100), where n is the number of phone numbers and k is the constant used to determine if a phone number is \\"lucky.\\" The next n lines contain one integer each, representing a phone number. Each phone number is between 1 and 1,000,000. Output Print \\"YES\\" if there exists at least one \\"lucky\\" phone number in the list, otherwise print \\"NO.\\" Examples Input 4 5 123 456 789 101 Output YES Input 3 7 11 22 33 Output NO Explanation In the first example, the sum of digits of the first phone number (123) is 6 (1+2+3), which is not divisible by 5. However, the sum of digits of the second phone number (456) is 15 (4+5+6), which is divisible by 5, so the output is \\"YES\\". In the second example, none of the sums of digits of the provided phone numbers (2, 4, 6) are divisible by 7, so the output is \\"NO\\".","solution":"def is_lucky_phone_number(phone_numbers, k): Determines if there exists a \\"lucky\\" phone number in the list such that the sum of its digits is divisible by k. Parameters: phone_numbers (list of int): List of phone numbers. k (int): The constant to check divisibility. Returns: str: \\"YES\\" if there exists a \\"lucky\\" phone number, otherwise \\"NO\\". for number in phone_numbers: digit_sum = sum(int(digit) for digit in str(number)) if digit_sum % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"In a computer network, nodes are connected by a set of bidirectional links. Each link between nodes has an associated latency (in milliseconds). Your task is to find the shortest possible time needed to send a piece of data from a source node to a destination node, given that the data can travel through multiple paths but cannot be split. Input: - The first line of the input contains two integers, `n` (2 ≤ n ≤ 200) and `m` (1 ≤ m ≤ 10,000), representing the number of nodes and the number of links. - The following `m` lines each contain three integers `u`, `v`, and `latency` (1 ≤ u, v ≤ n, 1 ≤ latency ≤ 1000), representing a link between nodes `u` and `v` with a given latency. Output: - Output a single integer representing the minimum latency required to send data from node 1 to node `n`. If it is not possible to connect node 1 to node `n`, output -1. Example: Input: ``` 4 4 1 2 100 2 3 200 3 4 300 1 4 600 ``` Output: ``` 600 ``` Explanation: There are two possible paths from node 1 to node `n` (node 4): 1. 1 -> 2 -> 3 -> 4 with a latency of 100 + 200 + 300 = 600 milliseconds. 2. 1 -> 4 with a latency of 600 milliseconds. The minimum latency to reach node 4 from node 1 is 600 milliseconds.","solution":"import heapq def shortest_latency(n, m, links): graph = {i: [] for i in range(1, n+1)} for u, v, latency in links: graph[u].append((latency, v)) graph[v].append((latency, u)) min_heap = [(0, 1)] latencies = {i: float(\'inf\') for i in range(1, n+1)} latencies[1] = 0 while min_heap: current_latency, u = heapq.heappop(min_heap) if u == n: return current_latency for latency, v in graph[u]: new_latency = current_latency + latency if new_latency < latencies[v]: latencies[v] = new_latency heapq.heappush(min_heap, (new_latency, v)) return -1"},{"question":"You are given an array of integers a consisting of n elements. You need to find a way to transform the array in such a way that each element of the array is equal to the average of its two neighboring elements by performing a series of operations. Each operation consists of selecting three consecutive elements in the array and setting the value of the middle element to the average of the two other elements (integer part obtained through floor division). For example, if the chosen consecutive elements are [a_i, a_{i+1}, a_{i+2}], then replace a_{i+1} with leftlfloor frac{a_i + a_{i+2}}{2} rightrfloor. You need to determine if it is possible to make all elements of the array equal using a finite number of such operations. If it is possible, return the minimum number of operations required. If it is not possible, return -1. The first line contains one integer n (3 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the elements of the array. Output one integer: the minimum number of operations required to make all elements of the array equal, or -1 if it is not possible. Example: Input: ``` 5 1 3 5 7 9 ``` Output: ``` 3 ``` Explanation: 1. Select [1, 3, 5], replace 3 with (1+5)//2 = 3. Array becomes [1, 3, 3, 7, 9]. 2. Select [3, 3, 7], replace 3 with (3+7)//2 = 5. Array becomes [1, 3, 5, 5, 9]. 3. Select [5, 5, 9], replace 5 with (5+9)//2 = 7. Array becomes [1, 3, 5, 7, 7]. Now there are no further operations to make all elements equal. So, it is not possible to make the whole array consist of equal elements. Example 2: Input: ``` 4 2 2 2 2 ``` Output: ``` 0 ``` Explanation: The array is already consisting of equal elements, so no operation is needed.","solution":"def operations_to_make_equal(arr): Determine if it is possible to make all elements of the array equal using the given operations and return the minimum number of operations required. n = len(arr) if n < 3: return -1 if len(set(arr)) == 1: return 0 for i in range(2, n): if (arr[i] - arr[i-1]) != (arr[i-1] - arr[i-2]): return -1 return n - 1"},{"question":"Write a function `is_balanced_brackets(expression)` that takes a single string `expression` as input. The string consists only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The function should return \\"YES\\" if the string contains a balanced set of brackets, otherwise return \\"NO\\". A string is considered to have balanced brackets if: 1. Each opening bracket has a corresponding closing bracket of the same type. 2. The pairs of brackets are properly nested. # Input: - A single string `expression`, consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The length of the string should be between 1 and 10^5. # Output: - Return \\"YES\\" if the brackets in the string are balanced, otherwise return \\"NO\\". # Example: `is_balanced_brackets(\\"(){}[]\\")` should return \\"YES\\". `is_balanced_brackets(\\"{[()]}\\")` should return \\"YES\\". `is_balanced_brackets(\\"([)]\\")` should return \\"NO\\". `is_balanced_brackets(\\"[)\\")` should return \\"NO\\".","solution":"def is_balanced_brackets(expression): Checks if the given expression has balanced brackets. Parameters: expression (str): The input expression containing brackets. Returns: str: \\"YES\\" if the brackets are balanced, otherwise \\"NO\\". stack = [] bracket_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in expression: if char in bracket_pairs.values(): stack.append(char) elif char in bracket_pairs: if not stack or stack[-1] != bracket_pairs[char]: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"Write a function `is_palindrome` that takes a string as input and returns `True` if the string is a palindrome (reads the same forward and backward), and `False` otherwise. The function should ignore non-alphanumeric characters and be case-insensitive. # Example: ```python print(is_palindrome(\\"A man, a plan, a canal, Panama\\")) # Output: True print(is_palindrome(\\"race a car\\")) # Output: False ```","solution":"def is_palindrome(s): Determines if the given string is a palindrome, ignoring non-alphanumeric characters and case differences. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"# Problem Statement You are given a directed graph with `n` nodes and `m` edges, where each edge has a weight representing the cost of travel from one node to another. Your task is to determine the shortest path from a source node to a destination node while considering the constraints on cost. Each node has an associated cost constraint, which specifies the maximum cost you are allowed to have spent when arriving at that node. If there is no valid path that satisfies the cost constraint, the result should be -1 for that query. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `m` (1 ≤ m ≤ 200,000) — the number of nodes and edges in the graph. - The next line contains an integer `s` (1 ≤ s ≤ n) — the source node. - The next line contains an integer `d` (1 ≤ d ≤ n) — the destination node. - The following line contains `n` integers `c_i` (1 ≤ c_i ≤ 1,000,000) — the cost constraints for each node. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1,000,000) — indicating there is a directed edge from node `u` to node `v` with weight `w`. # Output For each query, output the shortest path from the source node `s` to the destination node `d` that satisfies the cost constraints. If no such path exists, output `-1`. # Example Input ``` 5 6 1 5 100 200 300 400 500 1 2 50 2 3 50 3 4 50 4 5 50 1 3 150 3 5 150 ``` # Example Output ``` 200 ``` # Constraints and Notes - The graph is sparse. - Special care should be taken to ensure efficiency due to the large constraints on `n` and `m`. - The path cost should never exceed the cost constraint specified for the destination node or any intermediate node along the path. **Hint:** A modified version of Dijkstra\'s algorithm where you check the cost constraints as you proceed will be helpful in solving this problem efficiently.","solution":"import heapq def shortest_path_with_constraints(n, m, s, d, node_costs, edges): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) INF = float(\'inf\') distance = [INF] * n distance[s-1] = 0 pq = [(0, s-1)] while pq: dist, u = heapq.heappop(pq) if dist > distance[u]: continue for v, weight in graph[u]: if dist + weight < distance[v] and dist + weight <= node_costs[v]: distance[v] = dist + weight heapq.heappush(pq, (dist + weight, v)) return distance[d-1] if distance[d-1] != INF else -1"},{"question":"You are given an array of integers a of size n. You are allowed to perform the following operation any number of times (possibly zero): choose an index i (1 leq i leq n - 1) and swap a[i] with a[i + 1] if a[i] < a[i + 1]. Your task is to determine the lexicographically smallest array that can be obtained by performing the operation any number of times. The first line of input contains a single integer n (1 leq n leq 10^5) — the size of the array. The second line contains n integers a[1], a[2], ldots, a[n] (0 leq a[i] leq 10^9) — the elements of the array. It is guaranteed that at least one lexicographically smaller permutation can be obtained for given input. Output the lexicographically smallest array that can be obtained by performing the operation any number of times. # Example Input ``` 5 4 2 3 1 5 ``` Output ``` 1 2 3 4 5 ``` Input ``` 3 5 4 3 ``` Output ``` 3 4 5 ```","solution":"def lexicographically_smallest_array(n, a): Returns the lexicographically smallest array that can be obtained. :param n: int, size of the array :param a: List[int], the input array :return: List[int], the lexicographically smallest array return sorted(a)"},{"question":"You are given an array of integers a of length n (1 le n le 10^5). You need to determine if there is a subarray of a such that the sum of its elements is equal to a given integer k. A subarray is any contiguous part of the array. The sum of the subarray is the sum of all its elements. You need to find out whether there exists at least one subarray whose sum equals k. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 10^4), the number of test cases. Each test case consists of two lines: - The first line contains two integers n and k. - The second line contains n integers a_1, a_2, ldots, a_n, representing the array. For each test case, output \\"YES\\" if there exists a subarray with sum equals k. Otherwise, output \\"NO\\". # Example **Input:** ``` 3 5 12 1 2 3 4 5 5 9 1 2 3 4 5 4 0 -1 1 -1 1 ``` **Output:** ``` YES YES YES ``` # Explanation: In the first test case, the subarray [3, 4, 5] has the sum 12. In the second test case, the subarray [2, 3, 4] has the sum 9. In the third test case, the subarray [-1, 1] or [-1, 1, -1, 1] has the sum 0.","solution":"def has_subarray_with_sum(n, k, a): Determine if there exists a subarray of a such that the sum of its elements equals k. prefix_sums = {0} current_sum = 0 for num in a: current_sum += num if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\" def process_multiple_test_cases(test_cases): results = [] for n, k, a in test_cases: result = has_subarray_with_sum(n, k, a) results.append(result) return results"},{"question":"# Problem Statement You are given an array of n integers, indexed from 0 to n-1. Your task is to find the maximum difference between any two elements in the array such that the larger element appears after the smaller element. Write a function that takes an array of integers and returns the maximum difference between such a pair of elements. If no such pair exists, return -1. The function signature is: ```python def max_difference(arr: List[int]) -> int: ``` # Input - A single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - An array of n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). # Output - A single integer representing the maximum difference between any two elements in the array such that the larger element appears after the smaller element. If no such pair exists, return -1. # Examples Example 1: ```plaintext Input: 6 7 1 5 3 6 4 Output: 5 Explanation: The maximum difference is between the element 6 and the element 1, which gives a difference of 6 - 1 = 5. ``` Example 2: ```plaintext Input: 5 9 7 4 3 2 Output: -1 Explanation: No two elements satisfy the condition where a larger element comes after a smaller element. ``` Example 3: ```plaintext Input: 4 1 2 90 10 Output: 89 Explanation: The maximum difference is between the element 90 and the element 1, which gives a difference of 90 - 1 = 89. ``` # Constraints - Your solution should have a time complexity better than O(n^2). - Use efficient techniques to ensure the solution runs within the constraints. # Note - It\'s guaranteed that at least one pair will exist in cases where a solution exists. If no solution exists, simply return the specified value (-1). - Be mindful of edge cases, such as small arrays or arrays with all elements decreasing.","solution":"from typing import List def max_difference(arr: List[int]) -> int: if not arr or len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Kate is interested in counting the number of distinct palindromic substrings in a given string. A palindromic string is a string that reads the same backwards as forwards. She needs to find all the substrings of the given string that are palindromic and unique. Your task is to write a program that helps her find the number of these substrings. The first line contains an integer n (1 le n le 1,000) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. Output a single integer — the number of distinct palindromic substrings of the given string. **Example:** Input: ``` 5 aabaa ``` Output: ``` 5 ``` Explanation: The distinct palindromic substrings are: \\"a\\", \\"aa\\", \\"aba\\", \\"baab\\", and \\"aabaa\\".","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. n = len(s) palindromic_substrings = set() # Helper function to expand and collect palindromic substrings def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i+1) return len(palindromic_substrings)"},{"question":"You are organizing a treasure hunt for a group of people. The treasure is hidden in one of the n boxes arranged in a single row. Each box has a unique positive integer identifier starting from 1 to n. Upon correctly identifying the box containing the treasure, the identifier of that box will be revealed. Participants are allowed to ask questions to the administrator about the possible range in which the treasure could be. For each question, they need to provide a range [l, r] and the administrator will answer with either \\"Yes\\" if the treasure is in the range [l, r] or \\"No\\" if it is not. Your task is to simulate the system where participants can perform q queries and the administrator responds accordingly. After performing a certain number of queries, participants should identify the box with the treasure. The first line contains two space-separated integers, n (1 ≤ n ≤ 10^4) and q (1 ≤ q ≤ 10^4), the number of boxes and the number of queries, respectively. The second line contains n space-separated integers, where the ith integer represents a box identifier. For the next q lines, each line contains two space-separated integers, l and r (1 ≤ l ≤ r ≤ n) representing the range for the query. The output should consist of q lines, each containing \\"Yes\\" or \\"No\\" depending on whether the treasure (a pre-determined box identifier) lies within the queried range. Assume initially that the treasure is always in a box with identifier n for the sake of consistency in your simulation. Example Input: 5 3 1 2 3 4 5 1 3 2 5 3 3 Example Output: No Yes No Explanation: - There are 5 boxes arranged in a row with identifiers 1 to 5. - The treasure is in box 5. - For the first query [1, 3], the treasure is not within this range, so the answer is \\"No\\". - For the second query [2, 5], the treasure is within this range, so the answer is \\"Yes\\". - For the third query [3, 3], the treasure is not within this range, so the answer is \\"No\\".","solution":"def treasure_hunt(n, q, boxes, queries): Simulate the treasure hunt system, returning \\"Yes\\" or \\"No\\" for each query. Parameters: n (int): The number of boxes. q (int): The number of queries. boxes (list): List of box identifiers. queries (list): List of queries with ranges to check for the treasure. Returns: list: List of responses (\\"Yes\\" or \\"No\\") for each query. if n <= 0 or q <= 0: return [] # The treasure is always in the last box treasure = boxes[-1] responses = [] for l, r in queries: if treasure in boxes[l-1:r]: responses.append(\\"Yes\\") else: responses.append(\\"No\\") return responses"},{"question":"**Time Planner** A person please to organize their tasks for a week. They want to determine if they can fit all their scheduled tasks into the given time frames without any overlap. The schedule comprises a list of tasks where each task has a start time and an end time. A task can be represented by a pair of integers `(start, end)` indicating the start and end times in a 24-hour format (0 to 23). The goal is to determine if the person can complete all tasks without any overlap. You are given a list of tasks. Implement a function `canScheduleTasks(tasks)` that takes a list of tuples `(start, end)` and returns `True` if the person can complete all the tasks without attending any two tasks at the same time, and `False` otherwise. # Input Specification: - List of tuples `tasks` where each tuple `(start, end)` represents a task\'s start and end time in a 24-hour format (0 ≤ start < end ≤ 23). - The length of the list can be between 1 and 1000, inclusive. - Tasks are guaranteed to be in a valid format with start times strictly less than end times. # Output Specification: - Return `True` if it is possible to schedule all tasks without overlap, otherwise, return `False`. # Example: **Example 1:** Input: ```python tasks = [(1, 4), (4, 5), (7, 9)] ``` Output: ```python True ``` Explanation: - The tasks do not overlap with each other. The first task finishes at `4` and the second starts exactly at `4`. The same holds for the last task. **Example 2:** Input: ```python tasks = [(1, 4), (3, 5), (6, 8)] ``` Output: ```python False ``` Explanation: - The first task from `1 to 4` overlaps with the second task from `3 to 5` as `3 < 4`. # Constraints: - The function should be efficient and handle edge cases, such as all tasks having non-overlapping times or all tasks overlapping. - You may assume that there is no invalid time range.","solution":"def canScheduleTasks(tasks): Determines if all tasks can be scheduled without overlapping. Parameters: tasks (list of tuple): A list of tuples where each tuple represents the start and end time (inclusive) of a task. Returns: bool: Returns True if tasks can be scheduled without overlapping, False otherwise. # Sort the tasks based on their start times tasks.sort() # Iterate through each task and check for overlap with the next task for i in range(len(tasks) - 1): # If the end time of the current task is greater than the start time of the next task if tasks[i][1] > tasks[i + 1][0]: return False return True"},{"question":"Frosty the Snowman has a collection of magical snowballs, each with a unique power level. Frosty wants to make the most powerful snowball possible by combining a consecutive subarray of these snowballs. However, each time he combines a specific subarray, it loses a bit of its power by a given divisor. You need to help Frosty determine the maximum power level he can achieve by choosing the optimal subarray and considering the power reduction. The first line contains one integer n (2 ≤ n ≤ 100,000) — the number of snowballs. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1,000,000) — the power levels of the snowballs. The third line contains one integer d (1 ≤ d ≤ 1,000) — the divisor which reduces the subarray\'s power. Determine the maximum power Frosty can achieve by combining a consecutive subarray and then reducing its resulting power level by the given divisor. Example: ``` Input: 6 3 9 10 2 8 7 4 Output: 9 ```","solution":"def max_power_after_division(n, power_levels, d): max_power = float(\'-inf\') current_sum = 0 for i in range(n): current_sum += power_levels[i] if i >= 1: current_sum = max(current_sum, power_levels[i]) max_power = max(max_power, current_sum // d) for length in range(2, n + 1): current_sum = sum(power_levels[:length]) max_power = max(max_power, current_sum // d) for i in range(n - length): current_sum = current_sum - power_levels[i] + power_levels[i + length] max_power = max(max_power, current_sum // d) return max_power"},{"question":"In a college tournament, there is a peculiar way to rank the students based on their scores in two different events. Each student has a pair of scores (x, y). The ranking respects the following rules: 1. A student A with scores (x1, y1) is considered better than student B with scores (x2, y2) if and only if x1 > x2 and y1 > y2. Given a list of students with their scores, determine how many students are not \'dominated\' by any other student based on the above rules. # Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of students. Each of the next n lines contains two integers x and y (1 ≤ x, y ≤ 100,000) — the scores of each student in the two events. # Output Print a single integer — the number of students who are not dominated by any other student. # Example Input 6 5 6 6 5 7 3 7 8 5 4 2 9 Output 3 In this example, the students with scores (7, 8), (6, 5), and (2, 9) are not dominated by any other student.","solution":"def count_non_dominated_students(students): This function returns the number of students who are not dominated by any other student based on their scores. students: List of tuples where each tuple contains two integers (x, y) representing scores. # Sort students by x in ascending order, and by y in descending order if x values are equal students.sort(key=lambda student: (student[0], -student[1])) num_non_dominated = 0 max_y = -1 # Traverse the sorted list in reverse order for x, y in reversed(students): if y > max_y: num_non_dominated += 1 max_y = y return num_non_dominated"},{"question":"Write a function to determine if a string is an isogram. An isogram is a word that has no repeating letters, consecutive or non-consecutive. The function should take a single string as input and return a boolean value: `True` if the string is an isogram, and `False` otherwise. You should ignore letter case when determining if a letter is repeated. You can assume the input string only contains alphabetic characters. Example: ``` is_isogram(\\"abCdef\\") -> True is_isogram(\\"hello\\") -> False is_isogram(\\"Python\\") -> True is_isogram(\\"Isogram\\") -> True is_isogram(\\"Alphabet\\") -> False ```","solution":"def is_isogram(s): Determines if a string is an isogram (a word with no repeating letters). The function is case-insensitive. Parameters: s (str): Input string containing only alphabetic characters. Returns: bool: True if the string is an isogram, False otherwise. s = s.lower() return len(set(s)) == len(s)"},{"question":"A company wants to implement an inventory management system for a warehouse. The warehouse has a grid layout of h times w cells where some cells contain obstacles. You need to calculate the number of distinct paths from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (h, w)), where one can only move either down or right. However, the path cannot pass through cells that have obstacles. Define the following: - h is the height of the grid. - w is the width of the grid. - An obstacle is represented by a 1 in the grid, while an empty cell is represented by a 0. The first line contains two integers h and w (1 le h, w le 1000). The next h lines each contain w integers (either 0 or 1) representing the grid. Output the number of distinct paths from the top-left to the bottom-right corner modulo 1000000007,(10^{9} + 7). If there is no such path, output 0. **Example:** Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` In this example, there are two possible paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths(h, w, grid): MOD = 1000000007 # dp table initialization dp = [[0 for _ in range(w)] for _ in range(h)] # If starting point or ending point is an obstacle, return 0 if grid[0][0] == 1 or grid[h-1][w-1] == 1: return 0 # Starting point dp[0][0] = 1 for i in range(h): for j in range(w): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[h-1][w-1]"},{"question":"Alex is a gardener and he loves to grow trees in his backyard. One day, he decided to plant n trees in a straight line. Each tree i grows at a position with coordinate xi and has a growth rate gi, which determines how much the tree\'s height increases per day. One of Alex\'s friends challenged him to compute the height of the tallest tree in his backyard after t days. Alex is confident he can solve this, but he needs your help to confirm his answer. You need to write a program to compute the height of the tallest tree after t days. The input consists of three lines: - The first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 100) — the number of trees and the number of days, respectively. - Each of the next n lines contains two integers xi and gi (|xi| ≤ 100, 0 ≤ gi ≤ 100) — the coordinate and the growth rate of the i-th tree, respectively. The output should be a single integer — the height of the tallest tree after t days. Example: Input: 3 10 1 2 3 4 5 1 Output: 40 Explanation: There are 3 trees and Alex is observing them for 10 days. After 10 days, the heights of the trees are as follows: - Tree at position 1 grows at a rate of 2 per day. After 10 days, its height is 2 * 10 = 20. - Tree at position 3 grows at a rate of 4 per day. After 10 days, its height is 4 * 10 = 40. - Tree at position 5 grows at a rate of 1 per day. After 10 days, its height is 1 * 10 = 10. The tallest tree after 10 days is the one at position 3 with a height of 40.","solution":"def tallest_tree_height(n, t, trees): Returns the height of the tallest tree after t days. Parameters: n (int): Number of trees. t (int): Number of days. trees (list of tuples): Each tuple contains (xi, gi) where xi is the position of the tree and gi is its growth rate. Returns: int: Height of the tallest tree after t days. max_height = 0 for _, gi in trees: height = gi * t if height > max_height: max_height = height return max_height"},{"question":"You are given a list of integers representing the value of coins arranged in a straight line. Two players, Player A and Player B, take turns picking coins from either end of the line and they both aim to maximize their total value of coins. Player A starts first. Write a function that determines the maximum value of coins that Player A can collect if both players play optimally. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of coins. The second line contains n integers a_i (1 ≤ a_i ≤ 1000) — the values of the coins in the line. Print one integer — the maximum value of coins that Player A can collect if both players play optimally. **Example:** Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 12 ``` Input: ``` 4 8 15 3 7 ``` Output: ``` 22 ``` **Explanation:** - In the first example, Player A picks coin with value 6 first, then Player B picks 1, then Player A picks 5, Player B picks 2, Player A picks 4, and Player B picks 3. The total for Player A is 6 + 5 + 4 = 15, and for Player B is 1 + 2 + 3 = 6. Hence, the output is 15. - In the second example, Player A picks coin with value 7 first, then Player B picks 8, Player A picks 15, and Player B picks 3. The total for Player A is 7 + 15 = 22, and for Player B is 8 + 3 = 11. Hence, the output is 22.","solution":"def maximum_coins(nums): n = len(nums) dp = [[0] * n for _ in range(n)] for length in range(1, n+1): for i in range(n-length+1): j = i + length - 1 x = dp[i+2][j] if i+2 <= j else 0 y = dp[i+1][j-1] if i+1 <= j-1 else 0 z = dp[i][j-2] if i <= j-2 else 0 dp[i][j] = max(nums[i] + min(x, y), nums[j] + min(y, z)) return dp[0][n-1]"},{"question":"You are given a 2D grid of size m x n where each cell contains an integer representing the height of the cell. The objective is to determine the number of cells that can be reached by water flowing both from the Pacific Ocean and the Atlantic Ocean. The Pacific Ocean touches the left and top edges of the grid, and the Atlantic Ocean touches the right and bottom edges. Water can flow from a cell to another one directly north, south, east, or west if and only if the height of the destination cell is less than or equal to the height of the original cell. Write a function that takes in a 2D grid of integers and returns a list of coordinates (i, j) where water can flow to both the Pacific and Atlantic Ocean. Function signature: `def pacific_atlantic(matrix: List[List[int]]) -> List[List[int]]:` # Input - A 2D grid of integers, matrix, where 0 ≤ matrix[i][j] ≤ 10,000 - 1 ≤ m, n ≤ 200 # Output - A list of coordinates (i, j) # Example Example 1 Input ``` [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] ``` Output ``` [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] ``` Explanation - From the cell (0, 4), water can flow to the Pacific Ocean by moving left, and it can flow to the Atlantic Ocean by moving down. - From the cell (1, 3), water can flow to the Pacific Ocean by moving up or left, and it can flow to the Atlantic Ocean by moving down or right. - Similarly, other cells with coordinates in the output list have the ability to flow water to both oceans. Note that the list of coordinates doesn\'t need to be in any order.","solution":"from typing import List def pacific_atlantic(matrix: List[List[int]]) -> List[List[int]]: if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) pacific_reachable = [[False] * n for _ in range(m)] atlantic_reachable = [[False] * n for _ in range(m)] def dfs(x, y, reachable): reachable[x][y] = True directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not reachable[nx][ny] and matrix[nx][ny] >= matrix[x][y]: dfs(nx, ny, reachable) for i in range(m): dfs(i, 0, pacific_reachable) dfs(i, n - 1, atlantic_reachable) for j in range(n): dfs(0, j, pacific_reachable) dfs(m - 1, j, atlantic_reachable) result = [] for i in range(m): for j in range(n): if pacific_reachable[i][j] and atlantic_reachable[i][j]: result.append([i, j]) return result"},{"question":"A large city has a complex road system represented by a directed graph, where each node corresponds to an intersection, and each edge corresponds to a one-way road. The mayor wants to ensure that traffic can flow uninterruptedly between any two intersections using a series of alternating left and right turns. Given a graph where each edge has a direction (\'L\' for left turn and \'R\' for right turn), write a function `is_alternating_route(n, edges)` that determines if there is a path from the first intersection (node 0) to the last intersection (node n-1) that strictly alternates between left turns (\'L\') and right turns (\'R\'). # Input: - An integer `n` representing the number of intersections. - A list of tuples `edges` where each tuple `(u, v, d)` represents a directed edge from intersection `u` to intersection `v` with direction `d` (\'L\' or \'R\'). # Output: - Return `True` if there exists an alternating route from node 0 to node n-1, otherwise return `False`. # Example: ```python def is_alternating_route(n, edges): # Implementation here # Example 1 n = 4 edges = [(0, 1, \'L\'), (1, 2, \'R\'), (2, 3, \'L\')] print(is_alternating_route(n, edges)) # Output: True # Example 2 n = 4 edges = [(0, 1, \'L\'), (1, 2, \'L\'), (2, 3, \'R\')] print(is_alternating_route(n, edges)) # Output: False ``` # Notes: - The function should efficiently handle up to 1000 intersections and 10,000 roads. - You can assume that the graph does not contain cycles. - Remember that the alternating sequence should start with either left or right turn from the first intersection and should continue without breaking the alternating pattern until it reaches the last intersection.","solution":"def is_alternating_route(n, edges): from collections import deque, defaultdict # Create an adjacency list with direction graph = defaultdict(list) for u, v, d in edges: graph[u].append((v, d)) # BFS to check if there\'s an alternating path from 0 to n-1 queue = deque([(0, None)]) # Start with node 0 and no previous direction visited = {(0, None)} while queue: node, prev_direction = queue.popleft() if node == n - 1: return True for neighbor, direction in graph[node]: # Check if the path alternates if prev_direction is None or (prev_direction == \'L\' and direction == \'R\') or (prev_direction == \'R\' and direction == \'L\'): if (neighbor, direction) not in visited: visited.add((neighbor, direction)) queue.append((neighbor, direction)) return False"},{"question":"You are given an array of integers which represents the heights of buildings in a city. The objective of this problem is to determine the maximum difference in heights between any two buildings that can still be seen from a single rooftop. A building can be seen from a rooftop if and only if there is no taller building between them. Specifically, a building at index j can be seen from a building at index i if i < j and for all i < k < j, height_k < height_i and height_k < height_j. Help find the maximum difference in heights between any two buildings that can be seen from a given list of building heights. The first line contains a single integer n (2 le n le 10^5) — the number of buildings. The second line contains n integers representing the heights of the buildings h_1, h_2, dots, h_n (1 le h_i le 10^9). Output a single integer, the maximum difference in heights that can be seen from a single rooftop. If no building can be seen from another, output -1. **Example:** Input: ``` 5 1 3 5 2 4 ``` Output: ``` 4 ``` In this example, building heights 5 and 1 can be seen from each other and result in a height difference of 4, which is the maximum difference under the given conditions.","solution":"def max_visible_difference(n, heights): Given a list of building heights, returns the maximum difference in heights between any two buildings that can be seen from a rooftop. :param n: int, the number of buildings :param heights: List[int], the heights of the buildings :return: int, the maximum difference in heights, or -1 if no buildings can be seen from each other if n < 2: return -1 # Initialize max_diff to -1 assuming no two buildings can be seen from each other max_diff = -1 # To keep track of the maximum seen on the right side max_right = [0] * n max_right[-1] = heights[-1] # Fill the max_right array from right to left for i in range(n - 2, -1, -1): max_right[i] = max(max_right[i + 1], heights[i]) # Traverse each building and its subsequent buildings to find the maximum difference for i in range(n - 1): if max_right[i + 1] > heights[i]: max_diff = max(max_diff, max_right[i + 1] - heights[i]) return max_diff"},{"question":"You are given an array of distinct integers representing the position of potions in a line. Each potion has a position indicated by an integer where negative integers represent positions on the left of a central point and positive positions on the right. A potion is considered effective if there is no other potion positioned between it and the central point. Specifically, a potion at position a is effective if there is no potion at any position b such that 0 < |a| < |b|. Your task is to determine the number of effective potions. The first line contains a single integer n (1 le n le 3 times 10^4), the number of potions. The second line contains n distinct integers p_1, p_2, ldots, p_n (-10^9 le p_i le 10^9) representing the positions of the potions. Print the number of effective potions. Example: Input: 3 -5 3 -2 Output: 2 Explanation: Effective potions are at positions -2 and 3. Potion at position -5 is not effective because there is a potion at position -2 between it and the central point.","solution":"def count_effective_potions(n, positions): Count the number of effective potions given their positions on a number line. Parameters: n (int): Number of potions positions (list of int): Positions of the potions on the number line Returns: int: Number of effective potions min_positive = float(\'inf\') max_negative = float(\'-inf\') for position in positions: if position > 0: min_positive = min(min_positive, position) elif position < 0: max_negative = max(max_negative, position) effective_count = 0 for position in positions: if position > 0 and position == min_positive: effective_count += 1 elif position < 0 and position == max_negative: effective_count += 1 return effective_count"},{"question":"Maria is participating in an online puzzle contest. There are n puzzles in the contest, and each puzzle has a unique difficulty level represented as an integer. Maria wants to solve as many puzzles as possible consecutively. A sequence of puzzles is considered consecutive if every puzzle immediately follows the previous one in the difficulty level order, that is, each puzzle in the sequence has a difficulty exactly one more than the previous puzzle. Maria is curious to find the length of the longest sequence of consecutively solvable puzzles. Help Maria by writing a function that takes an array of integers representing the difficulty levels of the puzzles and returns the length of the longest sequence of consecutively solvable puzzles. # Input - The first line contains an integer n (1 le n le 10^5) — the number of puzzles. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the difficulty levels of the puzzles. # Output - Output a single integer — the length of the longest sequence of consecutively solvable puzzles. # Example ```plaintext Input 6 4 2 1 6 5 3 Output 6 ``` # Explanation The longest sequence of consecutively solvable puzzles is [1, 2, 3, 4, 5, 6], which has a length of 6.","solution":"def longest_consecutive_sequence(arr): arr_set = set(arr) longest_sequence = 0 for num in arr: if num - 1 not in arr_set: current_num = num current_sequence = 1 while current_num + 1 in arr_set: current_num += 1 current_sequence += 1 longest_sequence = max(longest_sequence, current_sequence) return longest_sequence"},{"question":"You are given a list of integers, which represents the heights of blocks. You are to determine the minimum number of operations required to make all blocks the same height. In one operation, you can either increase or decrease the height of a single block by 1. The heights are given in a single line separated by space. Write a function `min_operations_to_equalize(blocks: List[int]) -> int` that takes a list of integers representing the heights of blocks and returns an integer representing the minimum number of operations required to make all blocks the same height. # Input - A single list of space-separated integers where each integer represents the height of a block. The length of the list will be between 1 and 100, inclusive. Each height will be a positive integer not greater than 100. # Output - A single integer representing the minimum number of operations required to make all blocks the same height. # Example ```python assert min_operations_to_equalize([1, 2, 3]) == 2 assert min_operations_to_equalize([1, 2, 2, 1]) == 2 assert min_operations_to_equalize([3, 3, 3]) == 0 ```","solution":"from typing import List def min_operations_to_equalize(blocks: List[int]) -> int: Returns the minimum number of operations required to make all blocks the same height. # Find the median height blocks.sort() median = blocks[len(blocks) // 2] # Calculate the total number of operations needed to make all blocks the same height operations = sum(abs(height - median) for height in blocks) return operations"},{"question":"A group of archaeologists working on an excavation site have found a large number of ancient symbols engraved on stones. They have determined that the symbols correspond to a numeric code but they aren\'t sure what the exact numbers are. They decided to assign a numeric value to each symbol based on the sequence they appear on the stones. For simplicity, they assigned the first symbol a value of 1, the second symbol a value of 2, and so on for all distinct symbols they discovered. If a symbol appears more than once, the archaeologists just add up the values based on their sequential appearances. Your task is to compute the total sum of values assigned to all symbols in the sequence. The sequence of the symbols is provided as a single string of uppercase English letters. For example, in the string \\"ABACA\\", \'A\' appears first at index 1, then at index 4, and again at index 5. The value for \'A\' is 1 + 4 + 5 = 10. Similarly, calculate values for the rest of the symbols and sum them up. In the given example, the output should be 10 (for \'A\') + 2 (for \'B\') + 3 (for \'C\') = 15. # Input - A single string of length N (1 ≤ N ≤ 10^6) consisting of uppercase English letters. # Output - A single integer representing the total sum of the values assigned to all symbols. # Example Input: ``` ABACA ``` Output: ``` 15 ```","solution":"def calculate_total_sum(sequence): Given a string of uppercase English letters, compute the total sum of values assigned to all symbols in the sequence. Parameters: sequence (str): A string of length N (1 ≤ N ≤ 10^6) consisting of uppercase English letters. Returns: int: The total sum of the values assigned to all symbols. symbol_values = {} total_sum = 0 for index, symbol in enumerate(sequence, start=1): if symbol in symbol_values: symbol_values[symbol] += index else: symbol_values[symbol] = index total_sum = sum(symbol_values.values()) return total_sum"},{"question":"Write a function that takes a list of integers `arr` and an integer `k`, and returns the `k` most frequent elements in the list. The result should be sorted in descending order of frequency. If two elements have the same frequency, the larger element should come first. Input: - A single integer `n` (1 <= n <= 1000), the number of elements in the list. - A list of `n` integers (-10^5 <= arr[i] <= 10^5). - A single integer `k` (1 <= k <= n). Output: - A list of `k` integers sorted in descending order of frequency. If tied, sort by the integer value itself in descending order. Example: ``` Input: 6 [1, 1, 1, 2, 2, 3] 2 Output: [1, 2] Input: 8 [1, 3, 3, 3, 2, 2, 2, 4] 3 Output: [3, 2, 4] ```","solution":"from collections import Counter from typing import List def k_most_frequent_elements(arr: List[int], k: int) -> List[int]: Returns the k most frequent elements in arr sorted in descending order of frequency. If two elements have the same frequency, the larger element comes first. freq = Counter(arr) sorted_elements = sorted(freq.keys(), key=lambda x: (-freq[x], -x)) return sorted_elements[:k]"},{"question":"You are given an infinite supply of two types of coins: one with a denomination of 4 units and the other with a denomination of 5 units. Your goal is to determine if it is possible to form a given amount x using any combination of these coins. Write a program to determine if the amount x can be formed using the above coins. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single integer x (1 le x le 10^5) — the amount we need to form for that test case. Here are some examples: Input: ``` 3 8 23 12 ``` Output: ``` YES YES YES ``` Explanation: - For the first test case, 8 can be formed using two 4-unit coins. - For the second test case, 23 can be formed using four 5-unit coins and three 4-unit coins. - For the third test case, 12 can be formed using three 4-unit coins.","solution":"def can_form_amount(x): Determines if a given amount x can be formed using coins with denominations of 4 and 5 units. # There is a mathematical approach that states that for any non-negative integers a and b, # ax + by = n has a solution if and only if gcd(a, b) divides n where gcd is the greatest common divisor. # Since the gcd of 4 and 5 is 1, any amount can be formed. However, we are bound by non-negative integers. for four_coins in range(x // 4 + 1): if (x - 4 * four_coins) % 5 == 0: return \\"YES\\" return \\"NO\\" def can_form_amount_multiple_cases(test_cases): Processes multiple test cases to determine if, for each case, the given amount can be formed using coins of 4 and 5 units. Parameters: test_cases (list): A list of x values representing the different test cases. Returns: results (list): A list of \\"YES\\" or \\"NO\\" for each test case. results = [] for x in test_cases: results.append(can_form_amount(x)) return results"},{"question":"Alice is working on a data processing project where she needs to deal with nested lists. She wants to find a way to flatten these nested lists into a single list while maintaining the order of appearance. Help Alice by writing a function that accomplishes this task. # Input: You are given a single list of integers and/or other lists. These lists themselves can also contain integers and/or other lists, and so on, creating a nested structure. # Output: Return a single list containing all integers present in the input list or any of the nested lists, in the same order they appeared in the input structure. # Example: ```python def flatten(lst): # Your code here # Example usage: print(flatten([1, [2, [3]], [4, [5, 6]], 7])) # Output: [1, 2, 3, 4, 5, 6, 7] print(flatten([1, [2, 3], [[4, 5], 6], 7, [[8, 9], [10]]])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` # Constraints: - The depth of the nested lists will not exceed 50. - Each integer in the lists is between -10^6 to 10^6. - The total number of integers in all the lists combined will not exceed 10^5. Write the function `flatten` that takes a list (possibly nested) and returns a single flattened list with all integers in order.","solution":"def flatten(lst): Flattens a nested list into a single list while maintaining the order of appearance. result = [] def helper(sublist): for item in sublist: if isinstance(item, list): helper(item) else: result.append(item) helper(lst) return result"},{"question":"You are given a list of integers representing the lengths of ropes. Your task is to combine all ropes into one rope with minimum cost. The cost to connect two ropes is equal to the sum of their lengths. You must print the minimum cost to connect all the ropes. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of ropes. The second line contains n integers, each representing the length of a rope. Print one integer — the minimum cost to connect all ropes. Example: Input: 4 4 3 2 6 Output: 29 Explanation: - First, connect ropes of lengths 2 and 3, cost is 5. - Then connect the resulting rope of length 5 with a rope of length 4, cost is 9. - Finally, connect the resulting rope of length 9 with the last rope of length 6, cost is 15. - Total cost is 5 + 9 + 15 = 29.","solution":"import heapq def min_cost_to_connect_ropes(n, ropes): Returns the minimum cost to connect all given ropes into one rope. :param n: int - number of ropes :param ropes: list of int - lengths of the ropes :return: int - minimum cost to connect all ropes if n == 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Given an array of non-negative integers, your task is to form the largest possible integer from these integers. The final number should be in such a form that it is not only the largest but also adheres to being formed by concatenation of the integers. Write a function `largestNumber` that receives an array of non-negative integers and returns a string representing the largest number that can be formed by concatenating them. # Input: - An integer array `nums` of size `n` (1 <= n <= 10^4) where each element `nums[i]` (0 <= nums[i] <= 10^4). # Output: - Return a string representing the largest number that can be formed. # Example 1: ``` Input: nums = [10, 2] Output: \\"210\\" ``` Explanation: By concatenating 2 and 10, we form 210, which is larger than 102. # Example 2: ``` Input: nums = [3, 30, 34, 5, 9] Output: \\"9534330\\" ``` Explanation: The largest number can be formed by concatenating in the order 9, 5, 34, 3, 30. # Constraints: - The final result should not contain any leading zeroes unless the result is zero. - Ensure that the solution handles the large input sizes efficiently. # Note: To solve this problem, you can\'t simply sort the numbers based on their value. Instead, the sorting should be based on the rules of string concatenation, ensuring that `str(a) + str(b) >= str(b) + str(a)` for any pair of integers `a` and `b` to form the largest number.","solution":"from functools import cmp_to_key def largestNumber(nums): Forms the largest number from the list of non-negative integers. # Custom comparator function def compare(a, b): if a + b > b + a: return -1 else: return 1 # Convert the list of integers to strings for comparison nums_str = list(map(str, nums)) # Sort the array with the custom comparator sorted_nums = sorted(nums_str, key=cmp_to_key(compare)) # Join the sorted strings result = \'\'.join(sorted_nums) # Edge case - when the largest number is \'0\', in cases like [0, 0] if result[0] == \'0\': return \'0\' return result"},{"question":"Alex is working on a project that requires him to encrypt messages. He decides to use a simple substitution cipher, but with a twist: the substitution is based on the position of the character in the English alphabet, and he reverses the alphabet before making the substitution. Specifically, the substitution works as follows: - The letter \'a\' substitutes to \'z\'. - The letter \'b\' substitutes to \'y\'. - The letter \'c\' substitutes to \'x\'. - And so on. Write a program that takes a string input and outputs the encrypted message using the described substitution cipher. You need to handle both uppercase and lowercase letters, but non-alphabet characters should remain unchanged. The first line of input contains an integer t (1 ≤ t ≤ 100) –- the number of test cases. Each of the following t lines contains a single string for which the encrypted message must be computed. Each string consists of printable ASCII characters and has a length of at least 1 and at most 100. For each test case, output the encrypted message on a separate line. Example: Input: 3 abc XYZ Hello, World! Output: zyx CBA Svool, Dliow!","solution":"def encrypt_message(message): Encrypts the message using the described substitution cipher where \'a\' substitutes to \'z\', \'b\' substitutes to \'y\', and so on. Additionally, it handles both uppercase and lowercase letters, but non-alphabet characters remain unchanged. def substitute_char(c): if \'a\' <= c <= \'z\': return chr(ord(\'a\') + (ord(\'z\') - ord(c))) elif \'A\' <= c <= \'Z\': return chr(ord(\'A\') + (ord(\'Z\') - ord(c))) else: return c return \'\'.join(substitute_char(c) for c in message) def process_input(t, input_lines): Processes the input and returns a list of encrypted messages. return [encrypt_message(line) for line in input_lines]"},{"question":"A group of friends decided to play a game called The Circle Game. In this game, they form a circle and are numbered in clockwise order starting from 1 to n. The game proceeds in rounds. In each round, only one person can be out based on a specific rule. The rules are as follows: - The person holding a token initially starts at position 1. - In each round, the person with the token passes it k positions clockwise. - The person who receives the token in each round is out of the game. - After a person is out, the token is passed to the next person still in the game, and the count starts again from there. - This process continues until only one person remains, who is declared the winner. Write a program to find the winner of the game given the number of friends n and the step count k. # Input - The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next t lines contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^5) — the number of friends and the step count respectively. # Output - For each test case, output a single integer — the position number of the winner. # Example Input: ``` 3 5 2 6 3 7 1 ``` Output: ``` 3 1 7 ```","solution":"def find_winner(t, test_cases): def josephus(n, k): if n == 1: return 0 return (josephus(n - 1, k) + k) % n results = [] for n, k in test_cases: winner = josephus(n, k) + 1 # Convert 0-indexed to 1-indexed results.append(winner) return results"},{"question":"You have a list of integers representing the ages of people in a room. Your task is to determine the age that appears the most frequently. If there are multiple ages that appear the same maximum number of times, return the smallest age. Input - A list of integers where each integer represents the age of a person in the room. The list is guaranteed to contain at least one integer and every integer is positive. Output - A single integer representing the most frequent age (if multiple, return the smallest one). Example: Input: [28, 32, 28, 34, 40, 28, 32, 32] Output: 28 Input: [21, 21, 35, 35, 25] Output: 21","solution":"from collections import Counter def most_frequent_age(ages): Returns the most frequently occurring age in the list. If multiple ages have the same frequency, the smallest age is returned. age_count = Counter(ages) max_frequency = max(age_count.values()) most_frequent_ages = [age for age, count in age_count.items() if count == max_frequency] return min(most_frequent_ages)"},{"question":"You are given an array A of n integers. Your task is to find the maximum possible sum of a subarray of length exactly k, modulo 10^9 + 7. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^6) — the number of elements in the array and the length of the subarray. The second line contains n integers A1, A2, ..., An (|Ai| ≤ 10^9). Print a single integer — the maximum possible sum of a subarray of length exactly k, modulo 10^9 + 7. Example: Input: 5 3 1 2 3 4 5 Output: 12","solution":"def max_sum_subarray_of_length_k(n, k, A): Computes the maximum possible sum of a subarray of length exactly k, modulo 10^9 + 7. Args: n (int): The number of elements in the array. k (int): The length of the subarray. A (list of int): The array of integers. Returns: int: The maximum possible sum modulo 10^9 + 7. MOD = 10**9 + 7 current_sum = sum(A[:k]) max_sum = current_sum for i in range(n - k): current_sum = current_sum - A[i] + A[i + k] max_sum = max(max_sum, current_sum) return max_sum % MOD"},{"question":"Sara is organizing a charity marathon. The marathon route passes through several cities connected by bidirectional roads. Each road has a certain difficulty level associated with it, which represents the effort required to pass through that road. Sara wants to determine the easiest possible path from the starting city to the destination city so the participants expend the least effort. The cities and roads can be represented as a graph with n cities and m roads. The cities are numbered from 1 to n. Sara needs to travel from city a to city b. Write a function that calculates the minimum difficulty level required to travel from city a to city b. The first line of the input contains three integers n, m, and q (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000, 1 ≤ q ≤ 100). Here, n represents the number of cities, m represents the number of roads, and q represents the number of queries. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) representing a road connecting cities u and v with difficulty level w. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) representing the starting city and the destination city respectively for each query. Print q lines, each containing a single integer: the minimum difficulty level required to travel from city a to city b for each query. If there is no path between city a and city b, print -1. Example: Input: 5 6 3 1 2 10 1 3 15 2 4 12 2 5 15 3 5 10 4 5 5 1 5 1 4 3 2 Output: 15 22 25","solution":"import heapq def dijkstra(graph, start, n): Uses Dijkstra\'s algorithm to find the minimum difficulty path from start city to all other cities. inf = float(\'inf\') dist = [inf] * (n + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, node = heapq.heappop(pq) if current_dist > dist[node]: continue for next_node, weight in graph[node]: new_dist = current_dist + weight if new_dist < dist[next_node]: dist[next_node] = new_dist heapq.heappush(pq, (new_dist, next_node)) return dist def minimum_difficulty(n, m, roads, queries): Returns the minimum difficulty levels required to travel from city a to city b for each query. graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in queries: distances = dijkstra(graph, a, n) results.append(distances[b] if distances[b] != float(\'inf\') else -1) return results"},{"question":"You are given a string s consisting of lower-case English alphabets. Let\'s define a k-palindromic substring of the string as any substring of length k that reads the same forwards and backwards. Your task is to determine the number of k-palindromic substrings for each value of k from 1 to the length of the string. The first line contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains a string s (1 le |s| le 10^5) — the input string. It is guaranteed that the sum of the lengths of strings over all test cases does not exceed 10^6. For each test case print |s| integers, where the i-th integer is equal to the number of i-palindromic substrings of the string s.","solution":"def count_k_palindromic_substrings(s): n = len(s) result = [0] * n # Process for each length from 1 to n for k in range(1, n + 1): count = 0 for i in range(n - k + 1): substr = s[i:i + k] if substr == substr[::-1]: count += 1 result[k - 1] = count return result def process_test_cases(test_cases): results = [] for s in test_cases: results.append(count_k_palindromic_substrings(s)) return results"},{"question":"Emma is planning to organize a coding competition for her classmates. She has a list of all students with their respective coding skill levels. To ensure a balanced competition, she wants to divide the students into two teams such that the difference in the total skill levels of the two teams is minimized. Given the number of students `n` and an array `skills` of length `n` where `skills[i]` represents the skill level of the i-th student, find the minimum possible difference between the total skill levels of the two teams. Note that each student must be assigned to exactly one of the two teams. The first line contains one integer `n` (1 ≤ n ≤ 100) denoting the number of students. The second line contains `n` integers `skills1, skills2, ..., skillsn` (1 ≤ skillsi ≤ 1000) denoting the skill levels of the students. Output a single integer — the minimum possible difference between the total skill levels of the two teams. **Example:** Input: ``` 4 1 2 3 9 ``` Output: ``` 3 ``` **Explanation:** One possible way to divide the students is into teams with skills [1, 2, 3] and [9]. The total skill levels are 6 and 9 respectively, and their difference is 3. This is the minimum possible difference. Another example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` In this example, one possible division is teams with skills [1, 2, 3] and [4, 5]. The total skill levels are 6 and 9 respectively, with a difference of 1, which is the minimum possible difference.","solution":"def min_skill_difference(n, skills): Returns the minimum possible difference between the total skill levels of the two teams. total_sum = sum(skills) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): if dp[i - 1][j]: dp[i][j] = True dp[i][j + skills[i - 1]] = True min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"You are given a string consisting of lowercase letters and an integer k (1 ≤ k ≤ 1000). A substring is defined as a contiguous sequence of characters within the string. Your task is to find the k-th lexicographically smallest unique substring of the given string. The first line of input contains a string s (1 ≤ |s| ≤ 1000) which consists of only lowercase English letters. The second line contains an integer k. Output the k-th lexicographically smallest unique substring of the given string. If there are fewer than k unique substrings, output -1. For example, given the string \\"abac\\" and k=5, the resultant substrings in lexicographical order are: [\\"a\\", \\"ab\\", \\"aba\\", \\"abac\\", \\"ac\\", \\"b\\", \\"ba\\", \\"bac\\", \\"c\\"], and the 5th smallest unique substring is \\"ac\\". Thus, the output should be \\"ac\\".","solution":"def kth_lexicographically_smallest_unique_substring(s, k): Returns the k-th lexicographically smallest unique substring of s. If there are fewer than k unique substrings, returns -1. substrings = set() n = len(s) # Generate all unique substrings for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) # Convert set to sorted list sorted_substrings = sorted(substrings) # Check if there are at least k substrings if k > len(sorted_substrings): return -1 return sorted_substrings[k - 1]"},{"question":"Kamar, a software engineer, is working on a project where she needs to analyze paths through a city\'s public transportation system. The city is represented as a grid of intersections and streets. Some streets are being repaired and are marked as unusable. She needs to determine the shortest path for a delivery robot from a starting intersection to a destination intersection, considering the unusable streets. Given the city grid as an `n x m` matrix, where each cell represents an intersection: - A `0` indicates a passable street. - A `1` indicates an unusable street. Kamar\'s task is to write a program that finds the shortest path from the top-left corner of the grid (intersection `(0,0)`) to the bottom-right corner (intersection `(n-1,m-1)`). The robot can only move up, down, left, or right. If there is no such path, the program should return `-1`. The first line contains two space-separated integers `n` and `m` (1 ≤ `n`, `m` ≤ 1000) — the number of intersections in the vertical and horizontal directions respectively. The next `n` lines contain `m` space-separated integers (`0` or `1`) representing the city grid. Output an integer representing the length of the shortest path from the starting intersection to the destination intersection, or `-1` if no such path exists. For example: Input: ``` 5 5 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 0 ``` Output: ``` 9 ``` In this example, the shortest path includes 9 intersections. If the robot cannot reach the destination, it should output `-1`.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited[0][0] = True while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == 0: queue.append((new_row, new_col, dist + 1)) visited[new_row][new_col] = True return -1"},{"question":"You are given an array of integers representing the amount of money in different accounts in a bank. The goal is to calculate the maximum wealth an individual can have. Wealth is defined as the sum of all the money a person has across all their accounts. Each customer may have one or more bank accounts, represented by a 2D array `accounts` where `accounts[i][j]` is the amount of money the `i`-th customer has in the `j`-th account. Write a function that receives the 2D array `accounts` and returns the maximum wealth that any customer has. **Input:** - The function should accept a 2D list called `accounts` where `1 <= len(accounts), len(accounts[0]) <= 50`. - Each element in `accounts` will be an integer such that `0 <= accounts[i][j] <= 10^4`. **Output:** - The function should return an integer representing the maximum wealth any customer has. **Example 1:** ```plaintext Input: accounts = [[1,2,3], [3,2,1]] Output: 6 Explanation: - Customer 0 has wealth = 1 + 2 + 3 = 6 - Customer 1 has wealth = 3 + 2 + 1 = 6 Both customers have the same wealth of 6, so the maximum wealth is 6. ``` **Example 2:** ```plaintext Input: accounts = [[1,5], [7,3], [3,5]] Output: 10 Explanation: - Customer 0 has wealth = 1 + 5 = 6 - Customer 1 has wealth = 7 + 3 = 10 - Customer 2 has wealth = 3 + 5 = 8 The richest customer is customer 1 with a wealth of 10. ``` **Example 3:** ```plaintext Input: accounts = [[2,8,7], [7,1,3], [1,9,5]] Output: 17 Explanation: The richest customer is the first customer with a wealth of 2+8+7=17. ``` **Function Signature:** ```python def maximumWealth(accounts: List[List[int]]) -> int: # your code here ```","solution":"from typing import List def maximumWealth(accounts: List[List[int]]) -> int: Returns the maximum wealth any customer has from a list of lists, where each sublist represents the money in different accounts for each customer. return max(map(sum, accounts))"},{"question":"You are given a grid with dimensions n times m, where n and m are positive integers. The grid contains cells which can either be passable (\'.\') or impassable (\'#\'). You are allowed to move in four directions: up, down, left, and right. Your task is to determine the minimum number of moves required to move from the starting cell to the target cell. Both cells are guaranteed to be passable. **Input:** - The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. - The next n lines contain m characters each and represents the grid. A ‘.’ denotes a passable cell, and ‘#’ denotes an impassable cell. - The following line contains four integers s_x, s_y, t_x, t_y (1 le s_x, s_y, t_x, t_y le 1000) which represent the starting cell and the target cell respectively. It is guaranteed that both the starting and target cells are passable. **Output:** - Print a single integer — the minimum number of moves required to move from the starting cell to the target cell. If there is no valid path, print -1. **Example:** Input: ``` 5 5 ..... ..#.. ..#.. ...#. ..... 1 1 5 5 ``` Output: ``` 8 ``` **Explanation:** Starting at (1, 1) and moving to (5, 5) in a minimum of 8 moves by navigating around the obstacles.","solution":"from collections import deque def min_moves(n, m, grid, start, target): # Convert start and target positions to 0-indexed s_x, s_y = start[0] - 1, start[1] - 1 t_x, t_y = target[0] - 1, target[1] - 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(s_x, s_y, 0)]) # Store (current_x, current_y, number_of_moves) visited = set((s_x, s_y)) while queue: x, y, moves = queue.popleft() if (x, y) == (t_x, t_y): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if (0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\'): queue.append((nx, ny, moves + 1)) visited.add((nx, ny)) return -1"},{"question":"Having a list of integers nums, insert the element num at position pos maintaining a sorted order, and then return the updated list. If pos < 0 or pos > len(nums), or num cannot be inserted in a way that maintains sorted order, raise an appropriate exception. Avoid using any in-built sorting functions. Input consists of the first line containing an integer n (1 ≤ n ≤ 10^5) representing the number of elements in the list and a second line with n space-separated integers representing the sorted list. The third line contains an integer num and the fourth line contains an integer pos. Print the updated list in a single line of space-separated integers if insertion is successful. If insertion is not possible, print \\"Insertion Error\\". # Example Input: 5 1 2 4 5 6 3 2 Output: 1 2 3 4 5 6 Input: 5 1 2 4 5 6 3 6 Output: Insertion Error","solution":"def insert_and_maintain_sorted(nums, num, pos): Inserts an element `num` at position `pos` in the list `nums` maintaining the sorted order. Args: nums (list of int): The list of integers, which is initially sorted. num (int): The number to insert. pos (int): The position at which to insert the number. Returns: list of int: The updated list with `num` inserted while maintaining sorting. Raises: ValueError: If insertion position is invalid or if the insertion violates sorted order. n = len(nums) # Check for valid position if pos < 0 or pos > n: raise ValueError(\\"Invalid position\\") # Create a copy of the list to insert the element new_list = nums[:pos] + [num] + nums[pos:] # Check if the new list is sorted for i in range(1, len(new_list)): if new_list[i] < new_list[i - 1]: raise ValueError(\\"Insertion violates sorted order\\") return new_list"},{"question":"Given a list of words, find all anagram groups within the list. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". The first line contains a single integer n (1 ≤ n ≤ 10000) — the total number of words in the list. The next n lines each contain a single word consisting of lowercase English letters. The length of each word is at most 100 characters. Output each anagram group in a separate line. Each line should contain the words of the group separated by a single space, and groups should be listed in the order of their first appearance in the input list. If there are no anagram groups in the list, output \\"No anagrams found\\". Example: Input: 5 listen silent enlist inlets google Output: listen silent enlist inlets","solution":"def find_anagram_groups(words): Given a list of words, find all anagram groups within the list. from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [] for words_group in anagrams.values(): if len(words_group) > 1: result.append(\\" \\".join(words_group)) return result if result else [\\"No anagrams found\\"] def solve(n, word_list): groups = find_anagram_groups(word_list) return groups"},{"question":"Given an array of integers, your task is to rearrange the elements of the array in such a way that all negative numbers appear before all non-negative numbers. The relative order of both the negative numbers and non-negative numbers should remain unchanged. You should implement a function that performs this rearrangement in place, i.e., without using extra space for another array. # Input: - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - Each of the next t lines contains: - An integer n (1 leq n leq 10^5) — the number of elements in the array. - An array of n integers, where each integer is between -10^9 and 10^9 inclusive. # Output: For each test case, output the rearranged array on a new line. # Example: Input: ``` 2 5 -4 3 -9 0 4 7 12 -1 -7 8 -15 30 12 ``` Output: ``` -4 -9 3 0 4 -1 -7 -15 12 8 30 12 ``` In the first example, the negative numbers -4 and -9 come before the non-negative numbers 3, 0, and 4, and their relative orders are preserved. In the second example, the negative numbers -1, -7, and -15 appear before the non-negative numbers 12, 8, 30, and 12, and their relative orders are preserved.","solution":"def rearrange_array(arr): Rearranges the array such that all negative numbers appear before all non-negative numbers. The relative order of the negative and non-negative numbers should remain unchanged. :param arr: List of integers :return: Rearranged list of integers neg = [x for x in arr if x < 0] non_neg = [x for x in arr if x >= 0] return neg + non_neg def process_test_cases(test_cases): Processes multiple test cases for the rearrange_array function. :param test_cases: List of tuples, where each tuple contains (n, arr) :return: List of rearranged arrays results = [] for n, arr in test_cases: results.append(rearrange_array(arr)) return results"},{"question":"You are given an array of integers and two integers l and r. You need to check whether you can partition the array into two non-empty subarrays such that the sum of the elements in the first subarray is between l and r, and the sum of elements in the second subarray is between l and r. For example, consider the array [1, 2, 3, 4, 5] with l = 5 and r = 10. You can partition it into [1, 2, 3] and [4, 5] where the sum of elements in each subarray is within the given range. The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case starts with a line containing three integers n (1 le n le 100) — the length of the array, and l and r (1 le l le r le 10^4). Then follows a line containing n integers which represent the elements of the array. For each test case, print \\"Yes\\" if such a partition exists, otherwise print \\"No\\". # Input The first line contains the number of test cases t. Each of the next t test cases consists of two lines: 1. The first line contains three integers: n, l, and r. 2. The second line contains n integers representing the elements of the array. # Output For each test case, print \\"Yes\\" if the partition exists, otherwise print \\"No\\". # Sample Input ``` 2 5 5 10 1 2 3 4 5 3 4 6 1 2 3 ``` # Sample Output ``` Yes No ```","solution":"def can_partition(arr, l, r): total = sum(arr) current_sum = 0 for i in range(len(arr) - 1): current_sum += arr[i] if l <= current_sum <= r and l <= (total - current_sum) <= r: return \\"Yes\\" return \\"No\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, l, r = test_cases[i][0] arr = test_cases[i][1] results.append(can_partition(arr, l, r)) return results"},{"question":"You are given an array of n integers and a number k. You need to find whether there exists a pair of elements in the array such that their sum is equal to k. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9). - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Output: - Print \\"YES\\" if there exists a pair of elements in the array whose sum equals to k. Otherwise, print \\"NO\\". Example: Input: 5 10 2 7 11 15 3 Output: YES","solution":"def find_pair_sum_k(arr, k): Returns \\"YES\\" if there exists a pair of elements in the array whose sum equals k, otherwise \\"NO\\". seen_numbers = set() for number in arr: if k - number in seen_numbers: return \\"YES\\" seen_numbers.add(number) return \\"NO\\""},{"question":"A friend of yours is writing a simple text editor, with special features to process a text with hashtag-based commands. Your task is to help them implement one of these features. They want to provide a function to remove all the words that are marked with a hashtag (#), along with the hashtag itself. The rules are as follows: - A hashtag is defined by a `#` character followed by one or more non-space characters. - If a word has a hashtag, that word and the hashtag character should be removed. - Words are separated by single spaces. - There will be no multiple consecutive spaces. - There will be no hashtags at the end of a word without any subsequent characters. Given a single line input string, implement a function to perform the hashtag removal as described. Input: - A single string text, where (1 leq length(text) leq 1000). Output: - A string where all words with hashtags are removed. # Example Input: ``` hello #world this is a #test string ``` Output: ``` hello this is a string ``` Input: ``` keep no#HashInBetween words ``` Output: ``` keep no#HashInBetween words ``` In the first example, the words \\"#world\\" and \\"#test\\" are removed. In the second example, since there are no spaces directly following the \\"#\\", no words are removed.","solution":"def remove_hashtagged_words(text): Removes words with hashtags along with the hashtag itself. Args: text (str): The input text string. Returns: str: The text with hashtagged words removed. words = text.split() cleaned_words = [word for word in words if not word.startswith(\'#\')] return \' \'.join(cleaned_words)"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You need to perform exactly m operations to make all elements of the array equal. In one operation, you can choose an integer x and an index i, and replace a_i with a_i oplus x (oplus denotes bitwise XOR). Determine if it is possible to make all elements in the array equal after exactly m operations. The first line contains two integers n (2 le n le 100) and m (1 le m le 100). The second line contains n integers a_1, a_2, ..., a_n (0 le a_i le 2^{30} - 1). If it is possible to make all elements in the array equal after exactly m operations, print \\"Yes\\". Otherwise, print \\"No\\".","solution":"def can_make_elements_equal(n, m, arr): Determines if it is possible to make all elements in the array equal after exactly m operations. # Calculating frequency of each element from collections import Counter freq = Counter(arr) if len(freq) == 1: # All elements are already equal return \\"Yes\\" if m >= 0 else \\"No\\" if m >= n: # We can make elements equal if the number of operations m is greater than or equal to the number of elements n. return \\"Yes\\" # When n > m, we need exactly n - 1 operations to make all elements equal. if m == n - 1: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers and a target number. Your task is to determine if there are two distinct elements in the array that sum up to the target number. If such a pair exists, return the indices of the two numbers in the array. If no such pair exists, return an empty list. The pair of indices should be returned in a list with the smaller index first. The first line contains a single integer t (1 le t le 100) — the number of test cases in the input. The following lines contain the test cases. Each test case starts with an integer n (2 le n le 10^3) — the number of elements in the array. In the same line, the target number x (-10^6 le x le 10^6) is also given. The next line contains n space-separated integers (-10^6 le a_i le 10^6), representing the elements of the array. Output t lines, each containing the result for the corresponding test case: - If there are two distinct elements in the array that sum up to the target number x, print the indices of the two numbers in the array (1-indexed) in ascending order in a single line. - If there is no such pair, print an empty list. If there are multiple pairs, you can return any one of them. # Example: Input: ``` 3 5 9 2 7 11 15 1 4 20 8 4 3 6 3 10 1 2 3 ``` Output: ``` 1 2 [] [] ```","solution":"def find_pair_with_target(t, test_cases): Given multiple test cases with arrays and a target number, find pairs of indices such that the values at those indices sum up to the target number. Parameters: - t: int, number of test cases - test_cases: list of tuples [(n, x, array), ..., (n, x, array)] Returns: - list of lists containing indices for each test case if such pair exists, else empty list results = [] for n, x, array in test_cases: value_index_map = {} found = False for i, num in enumerate(array): diff = x - num if diff in value_index_map: results.append(f\\"{value_index_map[diff] + 1} {i + 1}\\") found = True break value_index_map[num] = i if not found: results.append(\\"[]\\") return results def parse_input(input_string): Parses the input string into the number of test cases and the respective test cases. Parameters: - input_string: str, input string containing the number of test cases followed by each test case Returns: - tuple of (int, list of tuples): number of test cases and list of test case tuples lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] i = 1 while i < len(lines): n, x = map(int, lines[i].split()) array = list(map(int, lines[i+1].split())) test_cases.append((n, x, array)) i += 2 return t, test_cases def format_output(results): Formats the output results into the string form expected. Parameters: - results: list of lists containing integer pairs or empty lists Returns: - Output formatted as a string return \\"n\\".join(results)"},{"question":"# Problem Statement Maya loves hiking. She often goes on hikes with groups of her friends. Each hiking trail can vary in difficulty, ranging from easy to very hard. She has a collection of hiking trails she wants to try, and she knows the difficulty level of each trail. Additionally, she keeps track of her friends\' hiking skill levels. Maya wants to plan a hike where all her friends in a given group can participate. Write a program that helps Maya plan her hikes. The program should determine the maximum difficulty level of the hike that all her friends in a particular group can manage. # Input Format - The first line contains two integers, `n` and `m` (1 ≤ `n`, `m` ≤ 100,000), where `n` is the number of friends and `m` is the number of hiking trails. - The second line contains `n` space-separated integers, where the i-th integer represents the hiking skill level of the i-th friend. - The third line contains `m` space-separated integers, where the i-th integer represents the difficulty level of the i-th hiking trail. # Output Format - Print a single integer representing the maximum difficulty level of the hike that all friends in the group can manage. # Example Input ``` 4 5 3 4 2 5 1 3 4 2 5 ``` Output ``` 2 ``` # Explanation In this example, the group of friends has hiking skill levels [3, 4, 2, 5]. The hiking trails have difficulty levels [1, 3, 4, 2, 5]. The most challenging trail that all friends can manage is the one with a difficulty level of 2, because the friend with the lowest skill level has a skill level of 2. # Constraints - Each friend can only attempt trails that are equal to or below their skill level. - There is guaranteed to be at least one hiking trail and one friend.","solution":"def max_trail_difficulty(n, m, friends_skills, trails_difficulties): Determines the maximum difficulty level of the hike that all friends in the group can manage. Parameters: n (int): Number of friends m (int): Number of hiking trails friends_skills (list of int): List of skill levels of friends trails_difficulties (list of int): List of difficulty levels of hiking trails Returns: int: Maximum difficulty level that all friends can manage # Minimum skill level among friends min_skill_level = min(friends_skills) # Maximum difficulty level of trails that is <= minimum skill level of friends max_difficulty = float(\'-inf\') for difficulty in trails_difficulties: if difficulty <= min_skill_level: max_difficulty = max(max_difficulty, difficulty) return max_difficulty if max_difficulty != float(\'-inf\') else -1"},{"question":"You are given a list of n integers a1, a2, ..., an. Find the number of unique triplets (i, j, k) such that i < j < k and ai + aj = ak. The first line contains the single positive integer n (3 ≤ n ≤ 1000) — the number of integers. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^5). Print the number of unique triplets (i, j, k) that satisfy the condition ai + aj = ak. For example, in the first example, the list [1, 2, 3, 4] includes the following triplets: (1, 2, 3) and (1, 3, 4). In the second example, given the list [1, 1, 2, 3], the following triplets include in the answer: (1, 1, 2), and (1, 2, 3).","solution":"def count_unique_triplets(n, numbers): This function returns the number of unique triplets (i, j, k) such that i < j < k and ai + aj = ak. Arguments: n: an integer representing the number of elements in the list. numbers: a list of n positive integers. Returns: An integer representing the count of unique triplets satisfying the condition. count = 0 for k in range(2, n): sums = set() for j in range(k): if numbers[k] - numbers[j] in sums: count += 1 sums.add(numbers[j]) return count"},{"question":"Create a function that calculates the \'beauty\' of a string. The beauty of a character is defined as its position in the English alphabet (A is 1, B is 2, ..., Z is 26). The beauty of a string is the sum of the beauties of its characters. The function should also be able to take a list of strings and return the string with the highest beauty. If there are multiple strings with the same beauty, return the one that appears first in the list. # Input - A single input will be provided, either a single string of uppercase Latin letters (1 ≤ |s| ≤ 100), or a list of strings (1 ≤ n ≤ 100, 1 ≤ |s_i| ≤ 100). # Output - If the input is a single string, output its beauty. - If the input is a list of strings, output the string with the highest beauty. # Examples Example 1: Input: ``` ZEBRA ``` Output: ``` 55 ``` Explanation: Z(26) + E(5) + B(2) + R(18) + A(1) = 52 Example 2: Input: ``` [\\"APPLE\\", \\"ORANGE\\", \\"BANANA\\"] ``` Output: ``` BANANA ``` Explanation: APPLE = 50, ORANGE = 60, BANANA = 33. So the function returns \\"ORANGE\\". Note: There should be no separators between input elements. If a list is given, it will be in the form of JSON array.","solution":"def char_beauty(c): Returns the beauty of a single character. return ord(c) - ord(\'A\') + 1 def string_beauty(s): Returns the beauty of a string. return sum(char_beauty(c) for c in s) def max_beauty(input_data): If input_data is a single string, returns its beauty. If input_data is a list of strings, returns the string with the highest beauty. if isinstance(input_data, str): return string_beauty(input_data) elif isinstance(input_data, list): highest_beauty_string = input_data[0] highest_beauty_value = string_beauty(highest_beauty_string) for string in input_data: current_beauty_value = string_beauty(string) if current_beauty_value > highest_beauty_value: highest_beauty_string = string highest_beauty_value = current_beauty_value return highest_beauty_string"},{"question":"You are a software engineer and have been assigned to create a simplified shopping list manager. A shopping list consists of items that you intend to purchase, and each item has a name (a string of letters), a quantity (a positive integer), and a category (either \'food\', \'clothing\', or \'electronics\'). Implement a class `ShoppingList` with the following functionality: - A method `add_item(self, name: str, quantity: int, category: str) -> None` that adds an item to the shopping list. If the item already exists, just update its quantity. - A method `remove_item(self, name: str) -> bool` that removes an item from the shopping list by name. The method should return True if the item was successfully removed, and False if the item was not found. - A method `get_items_by_category(self, category: str) -> List[Tuple[str, int]]` that retrieves all items in the given category as a list of tuples where each tuple contains the item name and its quantity. - A method `get_total_items(self) -> int` that returns the total number of items in the shopping list. Here is an example of how your class should behave: ```python shopping_list = ShoppingList() shopping_list.add_item(\'Apple\', 4, \'food\') shopping_list.add_item(\'T-Shirt\', 2, \'clothing\') shopping_list.add_item(\'Apple\', 6, \'food\') # Should update the quantity shopping_list.add_item(\'Laptop\', 1, \'electronics\') print(shopping_list.get_items_by_category(\'food\')) # Should output: [(\'Apple\', 10)] print(shopping_list.get_total_items()) # Should output: 3 print(shopping_list.remove_item(\'T-Shirt\')) # Should output: True print(shopping_list.get_total_items()) # Should output: 2 print(shopping_list.remove_item(\'T-Shirt\')) # Should output: False ``` Constraints: - The name of the items will consist of alphabetic characters only and they are case-sensitive. - The quantity will be a positive integer. - The category will be one of the predefined strings: \'food\', \'clothing\', \'electronics\'. - The `ShoppingList` class should efficiently handle up to 1000 item operations. Write the implementation of this class in Python.","solution":"class ShoppingList: def __init__(self): self.items = {} def add_item(self, name: str, quantity: int, category: str) -> None: if name in self.items: self.items[name][\'quantity\'] += quantity else: self.items[name] = {\'quantity\': quantity, \'category\': category} def remove_item(self, name: str) -> bool: if name in self.items: del self.items[name] return True return False def get_items_by_category(self, category: str): result = [] for name, details in self.items.items(): if details[\'category\'] == category: result.append((name, details[\'quantity\'])) return result def get_total_items(self) -> int: return len(self.items)"},{"question":"In the kingdom of Zodia, there are frequent fights between the tribes due to differences in their preferred magic spells. Each spell is represented by a distinct lowercase English letter. A fight happens between two tribes if their spells have at least one common magic letter. Given a string s of length n, consisting of lowercase English letters where each letter in the string denotes a magic spell of some tribe, determine the longest substring that can exist such that it avoids fighting. In other words, find the longest substring without any repeating characters. Your task is to write a program that will receive the string and output the length of the longest substring without any repeating characters. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string s. - The second line contains the string s which consists of n lowercase English letters. # Output - Output a single integer — the length of the longest substring of s with all distinct characters. # Example Input ``` 10 abcabcbbcc ``` Output ``` 3 ``` In this example, the longest substring without repeating characters is either \\"abc\\" or \\"bca\\" or \\"cab\\", and its length is 3.","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring without repeating characters. # Dictionary to store the last positions of occurrence last_seen = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in last_seen and last_seen[char] >= start: start = last_seen[char] + 1 last_seen[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"In a mystical kingdom, there exist n villages connected by aqueducts allowing the transportation of water. The kingdom values cleanliness and each village has a unique cleanliness index. The value of an aqueduct connecting two villages depends on the cleanliness index of both villages. The kingdom has k visitors. Each visitor stays in a village and needs to travel to another village to attend events. The visitors travel along the shortest path in terms of aqueduct value between their starting and destination villages. The cost for each visitor\'s journey is the sum of the values of the aqueducts on the shortest path they travel. For the purpose of this problem, the value of an aqueduct connecting village a and village b can be calculated as the absolute difference between their cleanliness indices. Given the layout of the villages and the visitors\' travel plans, calculate the travel cost for each visitor. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of villages. - The second line contains n integers, where the i-th integer represents the cleanliness index of the i-th village. - The third line contains an integer m (1 ≤ m ≤ 2000), the number of bidirectional aqueducts. - The next m lines each contain two integers a and b (1 ≤ a, b ≤ n, a ≠ b), indicating that there is an aqueduct directly connecting village a and village b. - The next line contains an integer k (1 ≤ k ≤ 100), the number of visitors. - Each of the next k lines contains two integers si and li (1 ≤ si, li ≤ n), representing the starting and destination villages for the i-th visitor. Output: - Print k lines, where the i-th line contains a single integer representing the travel cost for the i-th visitor. Examples: Input: 5 10 20 30 40 50 5 1 2 2 3 3 4 4 5 1 5 3 1 3 2 4 5 1 Output: 30 20 40 Explanation: - For the first visitor, starting at village 1 with cleanliness index 10 and traveling to village 3 (30), the possible paths are (1 → 2) and (2 → 3) with a sum of (|10 - 20| + |20 - 30| = 10 + 10 = 20), or direct (1 → 5) and (5 → 4) and (4 → 3) with a sum of (|10 - 50| + |50 - 40| + |40 - 30| = 40 + 10 + 10 = 60). Hence, the shortest path cost is 20. - For the second visitor, the path is (2 → 3) and (3 → 4) with a cost of |20 - 30| + |30 - 40| = 10 + 10 = 20. - For the third visitor, the path is (5 → 4), (4 → 3), (3 → 2), and (2 → 1) with the sum of (|50 - 40| + |40 - 30| + |30 - 20| + |20 - 10| = 10 + 10 + 10 + 10 = 40).","solution":"import heapq def travel_costs(n, cleanliness, m, edges, k, travels): adj = [[] for _ in range(n)] for a, b in edges: a -= 1 b -= 1 cost = abs(cleanliness[a] - cleanliness[b]) adj[a].append((cost, b)) adj[b].append((cost, a)) def dijkstra(start, end): costs = [float(\'inf\')] * n costs[start] = 0 priority_queue = [(0, start)] heapq.heapify(priority_queue) while priority_queue: current_cost, current_node = heapq.heappop(priority_queue) if current_node == end: return current_cost if current_cost > costs[current_node]: continue for next_cost, neighbor in adj[current_node]: new_cost = current_cost + next_cost if new_cost < costs[neighbor]: costs[neighbor] = new_cost heapq.heappush(priority_queue, (new_cost, neighbor)) return costs[end] result = [] for s, l in travels: s -= 1 l -= 1 result.append(dijkstra(s, l)) return result"},{"question":"In a city, there are n hospitals, numbered 1 through n. Each hospital is part of a unique network of hospitals or operates independently. The city health authority occasionally issues instructions to merge two networks of hospitals, resulting in the hospitals from one network being moved to the other network. Initially, each hospital belongs to its own network. When two networks are merged, all hospitals in the first network become part of the second network. The city health authority is also interested in knowing how many distinct networks are currently in operation. The city health authority asks you for help. Initially, each hospital is in its own distinct network. Your task is to handle q queries of two types: 1. Merge the network containing hospital u with the network containing hospital v. (u and v are different hospitals). 2. Output the number of distinct hospital networks currently in operation. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000) - the number of hospitals and the number of queries, respectively. Each of the next q lines describes a query. Each query is one of two types: - \\"1 u v\\" (1 ≤ u, v ≤ n; u ≠ v) - merge the network containing hospital u with the network containing hospital v. - \\"2\\" - output the number of distinct hospital networks. Output the result of each query of the second type. # Example Input ``` 5 6 1 1 2 1 3 4 2 1 4 5 2 1 2 3 2 ``` Output ``` 3 2 1 ```","solution":"class HospitalNetworks: def __init__(self, n): self.parent = list(range(n + 1)) self.size = [1] * (n + 1) self.networks_count = n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: # Merge smaller tree under larger tree to keep it balanced if self.size[root_u] < self.size[root_v]: self.parent[root_u] = root_v self.size[root_v] += self.size[root_u] else: self.parent[root_v] = root_u self.size[root_u] += self.size[root_v] self.networks_count -= 1 def hospital_networks(n, queries): hospital_networks = HospitalNetworks(n) result = [] for query in queries: if query[0] == 1: u, v = query[1], query[2] hospital_networks.union(u, v) elif query[0] == 2: result.append(hospital_networks.networks_count) return result"},{"question":"You are given a list of integers where every integer appears exactly three times, except for one integer that appears exactly once. Your task is to find this single integer that appears only once. The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 10^6) — the length of the list. The second line contains n integers ai (0 ≤ ai ≤ 10^9) - the elements of the list. Print the single integer that appears only once. Example: ``` Input: 7 2 2 3 2 4 4 4 Output: 3 ```","solution":"def find_single_number(nums): Finds the single number in a list where every number except one appears exactly three times. ones, twos = 0, 0 for num in nums: # Add `num` to `twos` if it is already in `ones` twos |= ones & num # Add `num` to `ones` ones ^= num # `threes` will contain all the numbers appearing three times threes = ones & twos # Remove `threes` from `ones` and `twos` ones &= ~threes twos &= ~threes return ones def parse_input_and_find_single_number(input_data): Parses the input data to extract the list of numbers and calls the `find_single_number` function to find the result. lines = input_data.strip().split(\\"n\\") n = int(lines[0]) nums = list(map(int, lines[1].strip().split())) return find_single_number(nums)"},{"question":"Title: Binary Search Tree Validation Description: Given an integer array `arr` representing the preorder traversal of a binary search tree (BST), determine if the array can represent a valid BST preorder traversal. In a valid BST, for each node, all the values in its left subtree are smaller, and all the values in its right subtree are larger. Input: - The input consists of a single integer `n` (1 ≤ n ≤ 10^5), the number of test cases. - Each of the next `n` lines contains an integer `m` (1 ≤ m ≤ 10^4), the length of the array for that test case followed by `m` integers representing the preorder traversal of the BST. Output: - For each test case, output \\"YES\\" if the given array can represent a valid BST preorder traversal, otherwise output \\"NO\\". Example: ``` Input: 3 5 8 5 1 7 10 5 8 10 7 5 1 3 5 2 1 Output: YES NO YES ``` Explanation: In the first test case, the array [8, 5, 1, 7, 10] represents a BST where the root is 8, with left child 5 (which has left child 1 and right child 7) and right child 10. This is a valid preorder traversal of a BST. In the second test case, the array [8, 10, 7, 5, 1] cannot represent a valid BST preorder traversal, as 7 appears after 10 but should be in the left subtree of 10. In the third test case, the array [5, 2, 1] represents a BST where the root is 5 with left child 2 (which has left child 1). This is a valid preorder traversal of a BST.","solution":"def can_represent_bst(preorder): Determine if the given preorder traversal array can represent a valid BST. stack = [] root = -float(\'inf\') for value in preorder: if value < root: return \\"NO\\" while stack and stack[-1] < value: root = stack.pop() stack.append(value) return \\"YES\\" def bst_preorder_validation(n, test_cases): Validate multiple test cases of preorder traversals for BST. results = [] for m, preorder in test_cases: result = can_represent_bst(preorder) results.append(result) return results"},{"question":"You are given an array of integers and a target value. Your task is to determine whether there exist two separate elements in the array that sum up to the target value. If such elements exist, return their indices, otherwise return -1. Your solution should have the following properties: 1. It solves the problem in O(n) time. 2. It uses O(n) additional space. # Input - The first line of input contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The second line contains `n` integers representing the array of elements, where each element is in the range of -10^9 to 10^9. - The third line contains an integer `target` indicating the target value. # Output - If such elements exist, print their indices (0-based). If there are multiple pairs, print any one of them. - If no such elements exist, print `-1`. # Example Input 6 2 7 11 15 3 6 9 Output 0 1 (or any other valid pair like 4 5 depending on the implementation) Input 4 1 2 3 4 8 Output -1 # Note You can assume that the input arrays are always valid and there is at most one pair of elements that adds up to the target value.","solution":"def find_two_sum_indices(n, array, target): Returns the indices of two elements in the array that sum up to the target value. If no such elements exist, returns -1. :param n: int - Number of elements in the array. :param array: list of int - The elements of the array. :param target: int - The target sum value. :return: tuple of two integers - Indices of the two elements, or -1 if no such elements exist. seen = {} for i, num in enumerate(array): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return -1"},{"question":"You are given an array of **n** integers. You need to perform **q** operations on it. Each operation either updates the array by setting the value of a specific element, or queries the subarray sum over a specific range. The operations are divided into two types: 1. Update Operation: `1 x v` - Update the value at index `x` to `v` in the array. 2. Query Operation: `2 l r` - Compute the sum of the elements from index `l` to `r` inclusive. The array uses 1-based indexing. # Input Format: - The first line contains two integers **n** and **q** (1 leq n leq 10^5, 1 leq q leq 10^5): the size of the array and the number of operations. - The second line contains **n** space-separated integers (1 leq a_i leq 10^9): the elements of the array. - The next **q** lines each contain an operation in the format described above. # Output Format: For each query operation (type 2), output the sum of the subarray from index `l` to `r` on a new line. # Example: Input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 1 3 ``` Output: ``` 6 13 ``` # Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first operation is a query from index 1 to 3: 1 + 2 + 3 = 6. - The second operation updates the value at index 3 to 10. The array becomes [1, 2, 10, 4, 5]. - The third operation is a query from index 1 to 3: 1 + 2 + 10 = 13.","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr self.n = len(arr) def update(self, x, v): if 1 <= x <= self.n: self.arr[x - 1] = v def query(self, l, r): if 1 <= l <= r <= self.n: return sum(self.arr[l - 1:r]) def perform_operations(n, q, arr, operations): array_operations = ArrayOperations(arr) result = [] for operation in operations: op_details = operation.split() op_type = int(op_details[0]) if op_type == 1: x = int(op_details[1]) v = int(op_details[2]) array_operations.update(x, v) elif op_type == 2: l = int(op_details[1]) r = int(op_details[2]) result.append(array_operations.query(l, r)) return result"},{"question":"# Histogram Update Given a histogram represented by an array of integers where each integer represents the height of a bar (all bars have the same width of 1 unit), you are required to perform multiple update operations on the histogram. Each update operation increases the height of all bars in a given range by 1. After performing a list of given update operations, you should return the updated histogram. Write a function `update_histogram(histogram: List[int], operations: List[Tuple[int, int]]) -> List[int]` that takes the original histogram and a list of update operations, and returns the updated histogram. The input details are as follows: - `histogram`: A list of integers representing the initial heights of the bars in the histogram. - `operations`: A list of tuples `(l, r)` representing the range of indices (1-based inclusive) for each update operation. For each operation `(l, r)`, increase the height of histogram bars at indices between `l` and `r` inclusive by 1. **Constraints:** - The length of the histogram is between 1 and 1000 inclusive (`1 ≤ len(histogram) ≤ 1000`). - Each height in the histogram is an integer between 0 and 100 inclusive (`0 ≤ histogram[i] ≤ 100`). - The number of operations is between 1 and 1000 inclusive (`1 ≤ len(operations) ≤ 1000`). - Each operation `(l, r)` satisfies `1 ≤ l ≤ r ≤ len(histogram)`. **Example 1:** ```python histogram = [2, 1, 4, 5, 3] operations = [(1, 3), (2, 4)] print(update_histogram(histogram, operations)) ``` _Output:_ ``` [3, 3, 6, 6, 3] ``` **Explanation:** - After the first operation `(1, 3)`, the histogram becomes `[3, 2, 5, 5, 3]`. - After the second operation `(2, 4)`, the histogram becomes `[3, 3, 6, 6, 3]`. **Example 2:** ```python histogram = [1, 1, 1, 1] operations = [(1, 2), (3, 4), (2, 3)] print(update_histogram(histogram, operations)) ``` _Output:_ ``` [2, 3, 3, 2] ``` **Explanation:** - After the first operation `(1, 2)`, the histogram becomes `[2, 2, 1, 1]`. - After the second operation `(3, 4)`, the histogram becomes `[2, 2, 2, 2]`. - After the third operation `(2, 3)`, the histogram becomes `[2, 3, 3, 2]`.","solution":"from typing import List, Tuple def update_histogram(histogram: List[int], operations: List[Tuple[int, int]]) -> List[int]: Updates the histogram based on the given operations. Args: histogram: List[int] - The original histogram. operations: List[Tuple[int, int]] - A list of operations to be performed. Returns: List[int] - The updated histogram. # Loop through each operation for l, r in operations: # Increase the height of each bar in the range [l, r] by 1 for i in range(l - 1, r): histogram[i] += 1 return histogram"},{"question":"In a game, you are tasked with controlling the movements of a robot on a grid. The grid is an m x n matrix, and the robot can move up, down, left, or right, but cannot move diagonally or off the grid. Given a starting position (x, y) of the robot and a series of movement commands, determine the final position of the robot on the grid. The first line of input contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. The second line contains two integers x and y (0 ≤ x < m, 0 ≤ y < n) — the starting position of the robot. The third line contains an integer k (1 ≤ k ≤ 100) — the number of movement commands. The following k lines each contain one of the four strings: \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\", representing a movement command. Output the final position (row and column) of the robot after executing all the commands. Ensure that the robot does not move outside the grid — ignore any command that would result in a move off the grid.","solution":"def move_robot(m, n, x, y, k, commands): Simulates the movement of a robot on an m x n grid starting from position (x, y) and moving according to the given commands. Parameters: - m: int, number of rows in the grid. - n: int, number of columns in the grid. - x: int, starting row position of the robot. - y: int, starting column position of the robot. - k: int, number of movement commands. - commands: list of str, each string is one of \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". Returns: - tuple: final row and column position of the robot. for command in commands: if command == \\"UP\\": if x > 0: x -= 1 elif command == \\"DOWN\\": if x < m - 1: x += 1 elif command == \\"LEFT\\": if y > 0: y -= 1 elif command == \\"RIGHT\\": if y < n - 1: y += 1 return (x, y)"},{"question":"Write a function `find_knight_tour(n, m)` that attempts to find a Knight\'s Tour on an `n` x `m` chessboard. A Knight\'s Tour is a sequence of moves of a knight on a chessboard such that the knight visits every square exactly once. The knight moves in an \\"L\\" shape: it can move two squares in one direction and then one square perpendicular, or one square in one direction and two squares perpendicular. The function should start the tour from the top-left corner of the board (position (0, 0)) and, if a tour is found, return a list of tuples representing the sequence of moves. If no such tour exists, return an empty list. # Input - An integer `n` (1 ≤ n ≤ 10), the number of rows of the chessboard. - An integer `m` (1 ≤ m ≤ 10), the number of columns of the chessboard. # Output - A list of tuples `(r, c)` representing the sequence of the knight\'s moves. Each tuple `(r, c)` specifies the row `r` and column `c` where the knight lands in that move. If no tour is possible, return an empty list. # Example ```python def find_knight_tour(n, m): # Your code here # Example usage: print(find_knight_tour(5, 5)) ``` # Note In the example with `n=5` and `m=5`, the function should return a list of 25 tuples, each representing a unique position on the board that the knight visits exactly once. If, however, no such path exists, it should return an empty list. The sequence should start from position `(0, 0)`. This problem can be solved using backtracking where the knight explores all possible moves from the current position and recursively checks if a solution can be reached.","solution":"def find_knight_tour(n, m): def is_valid_move(x, y, board): return 0 <= x < n and 0 <= y < m and board[x][y] == -1 def solve(x, y, movei, board, xMove, yMove): if movei == n * m: return True for k in range(8): next_x = x + xMove[k] next_y = y + yMove[k] if is_valid_move(next_x, next_y, board): board[next_x][next_y] = movei if solve(next_x, next_y, movei + 1, board, xMove, yMove): return True else: board[next_x][next_y] = -1 return False board = [[-1] * m for _ in range(n)] xMove = [2, 1, -1, -2, -2, -1, 1, 2] yMove = [1, 2, 2, 1, -1, -2, -2, -1] board[0][0] = 0 if not solve(0, 0, 1, board, xMove, yMove): return [] path = [] for i in range(n): for j in range(m): path.append((i, j)) path.sort(key=lambda pos: board[pos[0]][pos[1]]) return path"},{"question":"Alice is an avid gardener and loves to plant flowers in her large garden. The garden is a long, narrow plot with cells arranged in a straight line. Each cell can either be empty or contain a flower. Alice wants to plant new flowers such that no two flowers are adjacent to each other. You are given a binary array representing the garden, where 0 means an empty cell and 1 means a cell already containing a flower. You are also given a number n, which represents the number of new flowers Alice wants to plant. Return True if Alice can plant the n new flowers without violating the no-adjacent-flowers rule, and False otherwise. # Constraints: - The garden array will have a length of at most 10^4. - Each new flower must be planted in an empty cell. - Two flowers are adjacent if there are no empty cells between them. # Input - An integer t, the number of test cases. - For each test case: - An integer n, the number of flowers to plant. - An integer m, the length of the garden array. - A binary array of length m representing the garden. # Output - For each test case, return true if Alice can plant the n new flowers without violating the no-adjacent-flowers rule, otherwise return false. # Example Input: ``` 3 1 5 [1, 0, 0, 0, 1] 2 5 [1, 0, 0, 1, 0] 1 4 [1, 0, 0, 0] ``` Output: ``` True False True ``` # Explanation: - In the first test case, Alice can plant 1 flower at the third position. - In the second test case, Alice cannot plant 2 flowers without violating the rule. - In the third test case, Alice can plant 1 flower at the second or third position.","solution":"def can_plant_flowers(garden, n): Determines if n new flowers can be planted in the garden without violating the no-adjacent-flowers rule. Parameters: garden (list of int): The garden array where 0 means an empty cell and 1 means a cell with a flower. n (int): The number of new flowers Alice wants to plant. Returns: bool: True if Alice can plant the n new flowers, False otherwise. length = len(garden) count = 0 for i in range(length): # Check if current position is empty and both neighbors (if any) are empty or boundaries if garden[i] == 0 and (i == 0 or garden[i-1] == 0) and (i == length-1 or garden[i+1] == 0): # Plant a flower here garden[i] = 1 count += 1 if count >= n: return True return count >= n def process_test_cases(test_cases): results = [] for t in test_cases: n, m, garden = t results.append(can_plant_flowers(garden, n)) return results"},{"question":"You are given a matrix of dimensions n x m (1 ≤ n, m ≤ 20) consisting of non-negative integers. Your task is to find the cell that has the minimum sum of its Manhattan distances to all other cells. The Manhattan distance between two cells (i1, j1) and (i2, j2) is |i1 - i2| + |j1 - j2|. The input consists of: - The first line contains two integers n and m, denoting the number of rows and columns in the matrix respectively. - The n following lines each contain m integers, representing the elements of the matrix. The output should be: - Two integers x and y, representing the row and column indices of the cell with the minimum sum of Manhattan distances. If there are multiple cells with the same minimum sum, output the one with the smallest row index. If there are still ties, choose the cell with the smallest column index. Example: Input: 3 3 1 0 0 0 0 0 0 1 0 Output: 2 1 Explanation: For the 3x3 matrix, the Manhattan distances from each cell to all other cells are calculated. The sums of these distances for each cell are: - (1, 1): 12 - (1, 2): 10 - (1, 3): 12 - (2, 1): 10 - (2, 2): 8 (minimum sum) - (2, 3): 10 - (3, 1): 12 - (3, 2): 10 - (3, 3): 12 The minimum sum of Manhattan distances is 8, occurring at cell (2, 2). Thus, the output is \\"2 2\\".","solution":"def find_min_manhattan_distance(n, m, matrix): Find the cell with the minimum sum of Manhattan distances to all other cells. Parameters: n (int): number of rows in the matrix m (int): number of columns in the matrix matrix (list of list of int): 2D list representing the matrix Returns: tuple: row index (1-based), column index (1-based) of the cell with the minimum sum of distances min_sum = float(\'inf\') min_cell = (0, 0) for i in range(n): for j in range(m): current_sum = 0 for x in range(n): for y in range(m): current_sum += abs(i - x) + abs(j - y) if current_sum < min_sum: min_sum = current_sum min_cell = (i, j) return (min_cell[0] + 1, min_cell[1] + 1)"},{"question":"A software company MicronTech keeps track of important events happening within the day. However, due to an error, the timestamps of some of the events got corrupted. What remains is a list of events with partial information about the times. From the data, it\'s known that each event happened between specific hours (a range). Additionally, an event could occur multiple times within the same timeframe on different, but contiguous days, but not more than once per hour. Given the constraints, determine the minimum number of hours required to cover all events recorded. The input consists of: 1. An integer n (1 ≤ n ≤ 100) — the number of event entries. 2. The following n lines each describing an event in the format «start_time-end_time: message», where start_time and end_time follow the format hh:mm and denote the range in which the event could have occurred. The event messages are composed of Latin letters and/or spaces and the length of each message does not exceed 50. Output a single integer — the minimum number of hours required to cover all the events. Note: - The start and end times are inclusive. - Events can span across multiple contiguous days within their respective time windows. Example: Input: ``` 3 08:00-09:00: Meeting with team 10:30-11:30: Client call 14:00-15:00: Code review ``` Output: ``` 3 ```","solution":"def parse_time_range(time_range): start_time, end_time = time_range.split(\'-\') start_hour, start_minute = map(int, start_time.split(\':\')) end_hour, end_minute = map(int, end_time.split(\':\')) return (start_hour, start_minute), (end_hour, end_minute) def min_hours_to_cover_events(n, events): time_slots = set() for event in events: time_range, message = event.split(\': \') (start_hour, start_minute), (end_hour, end_minute) = parse_time_range(time_range) current_hour = start_hour current_minute = start_minute while current_hour < end_hour or (current_hour == end_hour and current_minute <= end_minute): time_slots.add((current_hour, current_minute)) current_minute += 1 if current_minute == 60: current_minute = 0 current_hour += 1 return len(time_slots) // 60 def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) events = data[1:] result = min_hours_to_cover_events(n, events) print(result)"},{"question":"Emily is fascinated by interesting number sequences. She is currently studying sequences that contain consecutive repetitions of the same digit. She defines an interesting sequence as one where every digit appears in repeated blocks of size exactly `k`. Given a number sequence consisting of digits (0-9), your task is to determine if the sequence is interesting based on her definition. The sequence should be such that each digit should appear in blocks of size exactly `k` without any interruptions or leftover digits. Write a function that takes an integer `k` (1 ≤ k ≤ 100) representing the block size, and a string `sequence` representing the number sequence (1 ≤ length(sequence) ≤ 1000) consisting of digits from `0` to `9`. The function should return \\"YES\\" if the sequence is interesting, otherwise return \\"NO\\". # Example ```python def is_interesting_sequence(k, sequence): # Your code goes here # Example usage: print(is_interesting_sequence(2, \\"112233\\")) # Output: \\"YES\\" print(is_interesting_sequence(3, \\"111222333\\")) # Output: \\"YES\\" print(is_interesting_sequence(2, \\"12233\\")) # Output: \\"NO\\" print(is_interesting_sequence(1, \\"1234567890\\")) # Output: \\"YES\\" print(is_interesting_sequence(3, \\"1112223334\\")) # Output: \\"NO\\" ``` # Constraints: - Each digit must appear in blocks of exactly `k` for the entire sequence to be interesting. - If a digit appears less or more than `k` consecutive times or with interruptions, return \\"NO\\".","solution":"def is_interesting_sequence(k, sequence): Determines if the given sequence is interesting by Emily\'s definition. Args: k (int): The block size. sequence (str): The number sequence consisting of digits (0-9). Returns: str: \\"YES\\" if the sequence is interesting, otherwise \\"NO\\". current_digit = sequence[0] count = 0 for digit in sequence: if digit == current_digit: count += 1 if count > k: return \\"NO\\" else: if count != k: return \\"NO\\" current_digit = digit count = 1 # Check the last block if count != k: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string of length N consisting of characters \'a\' and \'b\'. You need to transform this string into a \'balanced\' string. A string is considered balanced if the number of occurrences of \'a\' is equal to the number of occurrences of \'b\'. In one operation, you can change any character in the string to either \'a\' or \'b\'. Your task is to determine the minimum number of operations required to make the string balanced. Input: - The first line contains a single integer N (1 leq N leq 100) representing the length of the string. - The second line contains the string of length N consisting only of characters \'a\' and \'b\'. Output: - Output a single integer denoting the minimum number of operations required to make the string balanced. Example: Input: 6 aabbbb Output: 1 Explanation: Change one \'b\' to \'a\' to make the string balanced as \\"aaabbb\\".","solution":"def min_operations_to_balance(N, s): Given a string s of length N consisting of characters \'a\' and \'b\', returns the minimum number of operations required to transform s into a balanced string. count_a = s.count(\'a\') count_b = s.count(\'b\') # To balance the string, the number of \'a\' and \'b\' should be equal # To achieve that, we need to change (count_a - count_b) / 2 characters return abs(count_a - count_b) // 2"},{"question":"A recently discovered ancient palace has an intricate network of hidden tunnels. The tunnels are arranged in such a way that each room is connected to exactly two other rooms, forming a circular layout. The rooms are numbered consecutively from 1 to n. Whenever you enter a room, the number on the door of the room is visible to you. You, an archaeologist, need to explore all the rooms starting from room 1 and return back to room 1 after visiting all other rooms exactly once. Each time you move from one room to an adjacent room, you spend 1 unit of energy. Since the tunnels are extraordinarily built, rooms may have a special lock mechanism that can be bypassed by pronouncing certain numeric combinations that form a mathematical sequence. You need to reconfigure the numeric sequence of rooms into an arithmetic progression to open the final secret chamber. Write a program that determines the order in which you should reconfigure the room numbers so that the sequence of numbers on the doors follows an arithmetic progression. The difference between consecutive numbers in the arithmetic progression should be minimized. If there are multiple solutions, any of them will be acceptable. **Input:** - The first line contains an integer n (3 ≤ n ≤ 100). - The second line contains n space-separated integers representing the current numbering of the rooms: a1, a2, ..., an. **Output:** - Print n integers in one line which represents the room numbers reconfigured into an arithmetic progression with the minimal difference between consecutive numbers. The sequence should start from room 1 and should be in the same order as you visit the rooms in a circular manner. **Example:** Input: ``` 6 8 3 7 1 5 9 ``` Output: ``` 1 3 5 7 8 9 ``` Input: ``` 4 10 1 4 7 ``` Output: ``` 1 4 7 10 ``` Constraints: - Assume the input will always form a valid circular configuration where each room is connected in a loop. - The number of rooms (n) will always be more than or equal to 3 and less than or equal to 100.","solution":"def reconfigure_rooms(n, rooms): Reconfigures the room numbers into an arithmetic progression with the minimal difference between consecutive numbers. :param n: The total number of rooms. :param rooms: A list of current room numbers. :return: A list of room numbers reconfigured into an arithmetic progression. # Sort the list of room numbers rooms.sort() # Return the sorted list since it will be the arithmetic sequence with minimum difference return rooms"},{"question":"Julia is training for a marathon and wants to keep track of her running progress across different segments of her route. She runs through multiple segments each week and records the distance she runs in each segment. She also records the time it takes to complete each segment. Julia is interested in finding out the slowest segment she runs each week. Given m weeks of training data, where each week consists of n segments, determine the slowest segment for each week. The slowest segment is defined as the one with the highest time-to-distance ratio. The first line contains two integers m and n (1 ≤ m, n ≤ 1,000) — the number of weeks and the number of segments each week, respectively. Each of the next m lines contains n pairs of integers di and ti (1 ≤ di, ti ≤ 1,000), representing the distance (in meters) and time (in seconds) for each segment of that week. For each week, output two integers: the 1-based index of the slowest segment and the time-to-distance ratio of that segment, rounded to six decimal places. # Example Input: ``` 2 3 500 100 600 120 700 140 1000 150 2000 300 500 90 ``` Output: ``` 3 0.200000 1 0.150000 ``` Explanation: For the first week: - Segment 1: 500 meters in 100 seconds, ratio = 100 / 500 = 0.200000 - Segment 2: 600 meters in 120 seconds, ratio = 120 / 600 = 0.200000 - Segment 3: 700 meters in 140 seconds, ratio = 140 / 700 = 0.200000 The segment with the highest ratio is segment 1 (or any segment since they have equal ratios). For the second week: - Segment 1: 1000 meters in 150 seconds, ratio = 150 / 1000 = 0.150000 - Segment 2: 2000 meters in 300 seconds, ratio = 300 / 2000 = 0.150000 - Segment 3: 500 meters in 90 seconds, ratio = 90 / 500 = 0.180000 The segment with the highest ratio is segment 3.","solution":"def find_slowest_segments(m, n, data): Determines the slowest segment for each week. Parameters: m (int): Number of weeks. n (int): Number of segments each week. data (list of list of tuples): Training data for each week, where each inner list represents one week and contains tuples (di, ti) representing distance and time for each segment. Returns: list of tuples: Each tuple contains the 1-based index of the slowest segment and the time-to-distance ratio. result = [] for week in data: slowest_ratio = 0 slowest_index = 0 for i in range(n): di, ti = week[i] ratio = ti / di if ratio > slowest_ratio: slowest_ratio = ratio slowest_index = i + 1 result.append((slowest_index, round(slowest_ratio, 6))) return result"},{"question":"Hanna loves binary numbers. A binary number is a number that contains only the digits 0 and 1. Hanna has two binary strings, c and d, of the same length m. Both strings consist solely of binary digits. Hanna can perform operations of two types: 1. Flip: Change a \'0\' to a \'1\' or a \'1\' to a \'0\'. 2. Swap: Swap two digits in the string. Hanna wants to transform string c into string d using the minimum number of operations. Can you help her figure out the smallest number of operations needed to achieve this transformation? Input: - The first line contains the integer m, the length of the binary strings (1 ≤ m ≤ 10^5). - The second and third lines contain the binary strings c and d, respectively. Output: - Output a single line with the minimum number of operations required to transform string c into string d. In the first sample, a single flip is sufficient to turn the first digit from \'0\' to \'1\'. In the second sample, a swap of the first and second digits (or a flip of both digits) will suffice. In the third sample, one flip operation each would be needed for all three positions.","solution":"def min_operations_to_transform(c, d): Returns the minimum number of operations required to transform binary string c into binary string d. m = len(c) flip_count = 0 swap_count = 0 # Count the number of different positions for i in range(m): if c[i] != d[i]: flip_count += 1 # Count potential swap opportunities i = 0 while i < m - 1: if c[i] != d[i] and c[i+1] != d[i+1] and c[i] != c[i+1]: swap_count += 1 i += 2 else: i += 1 # Minimum operations is flips - swaps, because a swap corrects two flips total_operations = flip_count - swap_count return total_operations"},{"question":"Alice has a collection of n different books and Bob has m different books. They decide to exchange some books so that both of them end up with exactly the same number of books they originally had, but they do not have any previous books that they possessed before the exchange. You are given two lists of integers, A and B. The list A consists of n integers representing the unique IDs of books Alice has, and the list B consists of m integers representing the unique IDs of books Bob has. Each book ID is guaranteed to be unique in its own list. Determine the maximum number of books Alice and Bob can exchange. The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of books Alice and Bob initially have. The second line contains n integers, the unique IDs of the books Alice has. The third line contains m integers, the unique IDs of the books Bob has. Output a single integer which is the maximum number of books Alice and Bob can exchange. Example: Input: 4 4 1 2 3 4 5 6 7 8 Output: 4 Explanation: Alice and Bob can exchange all 4 books, each giving up their entire collection and receiving the other\'s entire collection in return.","solution":"def max_books_to_exchange(n, m, A, B): Determine the maximum number of books Alice and Bob can exchange. Parameters: n (int): Number of books Alice has. m (int): Number of books Bob has. A (list of int): List of book IDs Alice has. B (list of int): List of book IDs Bob has. Returns: int: Maximum number of books that can be exchanged. # The maximum number of books to exchange is the minimum of the number of books Alice # and Bob have. return min(n, m)"},{"question":"You are given a set of n games that have to be scheduled over k days. Each game has a specific duration and a unique difficulty level. The goal is to determine if it\'s possible to schedule all games such that the total difficulty of games scheduled each day does not exceed a given threshold T. No two games of the same difficulty can be scheduled on the same day. The first line of the input contains three integers n, k, and T (1 ≤ n, k ≤ 1000, 1 ≤ T ≤ 10000) — the number of games, the number of days, and the maximum difficulty threshold for each day, respectively. Each of the following n lines contains two integers di and hi (1 ≤ di ≤ 100, 1 ≤ hi ≤ 1000) — the duration and difficulty of the i-th game. Print \\"YES\\" if it\'s possible to schedule all games under the given constraints, otherwise print \\"NO\\". # Example Input ``` 5 3 12 3 4 2 5 1 4 5 6 3 7 ``` Output ``` YES ``` In the example, it is possible to schedule the games over 3 days without exceeding the threshold on any day, while ensuring no two games of the same difficulty are scheduled on the same day.","solution":"def can_schedule_games(n, k, T, games): Determines if it\'s possible to schedule all games under the given constraints. :param n: Number of games :param k: Number of days :param T: Maximum difficulty threshold for each day :param games: List of tuples. Each tuple contains two integers (di, hi) representing the duration and difficulty of the i-th game. :return: \\"YES\\" if it\'s possible to schedule all games under the given constraints, otherwise \\"NO\\" # Create a dictionary to count occurrences of each difficulty level difficulty_count = {} for _, hi in games: if hi not in difficulty_count: difficulty_count[hi] = 0 difficulty_count[hi] += 1 # If any difficulty occurs more times than the number of days, return \\"NO\\" if difficulty_count[hi] > k: return \\"NO\\" # Sort games by difficulty games.sort(key=lambda x: x[1]) # Initialize list to store daily difficulties daily_difficulties = [0] * k for _, hi in games: # Find the day with the current minimum difficulty min_day = min(range(k), key=lambda x: daily_difficulties[x]) # Check if adding this game exceeds the threshold if daily_difficulties[min_day] + hi > T: return \\"NO\\" # Add the game\'s difficulty to the selected day daily_difficulties[min_day] += hi return \\"YES\\""},{"question":"Gina has recently taken an interest in \\"almost geometric progressions\\". A sequence is considered an almost geometric progression if its elements can be represented as: ``` a[i] = a[1] * q^(i-1) + d ``` where `q` is a constant ratio, `d` is a constant difference, and `i` indicates the element\'s position in the sequence. Given a sequence of integers, Gina wants to find the longest subsequence that is an almost geometric progression. A subsequence is derived by removing zero or more elements from the original sequence without changing the order of the remaining elements. # Input - The first line contains an integer `n` (1 ≤ n ≤ 4000) representing the number of elements in the sequence. - The next line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6) which are the elements of the sequence. # Output - Print a single integer representing the length of the longest subsequence that is an almost geometric progression. # Example Input ``` 5 2 4 8 16 32 ``` Output ``` 5 ``` Input ``` 6 1 2 4 8 7 64 ``` Output ``` 4 ``` The longest subsequence for the second example is `1, 2, 4, 8`.","solution":"def longest_almost_geometric_subsequence(n, sequence): def is_almost_geometric(subseq): if len(subseq) < 2: return True q = subseq[1] / subseq[0] d = subseq[1] - q * subseq[0] for i, val in enumerate(subseq): if not (val == subseq[0] * (q ** i) + d): return False return True max_length = 0 for i in range(n): for j in range(i + 1, n + 1): subseq = sequence[i:j] if is_almost_geometric(subseq): max_length = max(max_length, len(subseq)) return max_length # Sample Usage: # n = 5 # sequence = [2, 4, 8, 16, 32] # print(longest_almost_geometric_subsequence(n, sequence)) # Output: 5"},{"question":"You are given an integer n and an array a of n distinct integers. Your task is to construct an array b such that for each integer c in a, its position in b is the count of numbers in a that are less than c. Specifically, for each i (1 ≤ i ≤ n), the element b_i should represent the number of elements in a that are less than a_i. For example, given the array [3, 1, 2], the array b would be [2, 0, 1] because: - There are 2 elements less than 3 (1 and 2). - There are 0 elements less than 1. - There is 1 element less than 2 (1). The first line of the input contains a single integer n (1 ≤ n ≤ 100). The second line contains n distinct integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6). Print the array b such that for each i (1 ≤ i ≤ n), b_i represents the number of elements in a that are less than a_i. All possible answers for the first example: [2, 0, 1] All possible answers for the second example: [0, 2, 1]","solution":"def count_less_than_elements(n, a): Constructs an array b such that for each integer c in a, its position in b is the count of numbers in a that are less than c. :param n: Number of integers :param a: List of n distinct integers :return: List of integers representing the counts of numbers less than each element in array a b = [] for i in range(n): count = sum(1 for x in a if x < a[i]) b.append(count) return b"},{"question":"You are given a list of events as pairs of integers, where the first integer is the start time and the second integer is the end time of the event. The events occur in a day, and the times are given in the range [0, 24]. Your task is to determine the maximum number of events that can be attended if a person can only attend one event at a time. Each event lasts from its start time to its end time. If two events have overlapping times, a person cannot attend both. The goal is to find the largest subset of non-overlapping events. Write a function `maxEvents(events)` that takes a list of tuples `events` where each tuple `(start, end)` represents the start and end time of an event and returns the maximum number of events that can be attended. # Input - List of tuples `events` where each tuple `(start, end)` consists of two integers: - `start` (0 ≤ start < 24) - `end` (0 < end ≤ 24) - The list `events` can have between 1 and 1000 tuples. # Output - An integer representing the maximum number of non-overlapping events that can be attended. # Example Input ```python events = [(1, 3), (2, 5), (4, 6), (6, 8)] ``` Output ```python 3 ``` Explanation The maximum number of non-overlapping events that can be attended is 3, such as attending events (1, 3), (4, 6), and (6, 8).","solution":"def maxEvents(events): Returns the maximum number of non-overlapping events that can be attended. Parameters: events (list of tuple): List of tuples where each tuple (start, end) represents the start and end time of an event. Returns: int: Maximum number of non-overlapping events. # Sort events by end time events.sort(key=lambda x: x[1]) # Initialize count and current end time count = 0 curr_end = 0 for start, end in events: # If the start time is after or at the end time of the last attended event if start >= curr_end: # Attend this event count += 1 curr_end = end return count"},{"question":"You are given an array of n integers representing the heights of students standing in a row. The students are supposed to follow a rule such that each student should either be taller than the student directly in front of them or should be shorter than the student directly behind them. It is your task to determine the minimum number of students that should be reorganized to meet this rule. The first line of the input contains a single integer n (1 le n le 100,000) – the number of students. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 1,000,000) – the heights of the students in the order they are currently standing. The output should be a single integer – the minimum number of students that should be reorganized to meet the requirement. # Example Input: ``` 5 4 1 3 2 5 ``` Output: ``` 2 ``` Explanation: One valid reorganization could be to swap the students at positions 2 and 4, resulting in the sequence [4, 2, 3, 1, 5]. In this case, students at positions 1, 2, 3 satisfy the rule. Alternatively, we can swap the students at positions 2 and 3, resulting in the sequence [4, 3, 1, 2, 5], which also satisfies the rule. Therefore, the minimum number of swaps required is 2.","solution":"def min_reorganize_students_heights(n, heights): if n <= 1: return 0 discrepancies = 0 last_height = heights[0] for i in range(1, n): if heights[i] <= last_height: discrepancies += 1 last_height = heights[i] return discrepancies"},{"question":"Write a function that takes a list of tuples as input, each containing start and end times of meetings (in the format (start_time, end_time)), and determines whether a person can attend all the meetings without overlap. The times are given as 24-hour format strings (e.g., \\"09:00\\"). The function should return `True` if all meetings can be attended without any overlaps; otherwise, it should return `False`. # Example ```python meetings = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"12:00\\"), (\\"12:30\\", \\"14:00\\")] assert can_attend_meetings(meetings) == True meetings = [(\\"09:00\\", \\"10:30\\"), (\\"10:15\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")] assert can_attend_meetings(meetings) == False ``` # Constraints - The number of meetings `n` is between 1 and 10^5. - Meeting times are represented as strings in the format \\"HH:MM\\" (24-hour format). - `0 <= start_time < end_time <= 24:00` and the duration of a meeting is at least one minute. # Function Signature ```python def can_attend_meetings(meetings: List[Tuple[str, str]]) -> bool: pass ```","solution":"from typing import List, Tuple def time_to_minutes(t: str) -> int: Convert a time string in the format \'HH:MM\' to the number of minutes since 00:00. hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes def can_attend_meetings(meetings: List[Tuple[str, str]]) -> bool: Determines if a person can attend all meetings without overlaps. if not meetings: return True # Convert meeting times to minutes from 00:00 meetings_in_minutes = [(time_to_minutes(start), time_to_minutes(end)) for start, end in meetings] # Sort meetings by start time meetings_in_minutes.sort() # Check for overlaps for i in range(1, len(meetings_in_minutes)): if meetings_in_minutes[i][0] < meetings_in_minutes[i-1][1]: return False return True"},{"question":"Meg recently started learning how to manipulate strings in Python and decided to create a simple encryption method. For a given string `s`, she wants to rotate the positions of its characters by `k` steps. If `k` is positive, the characters are shifted to the right; if `k` is negative, the characters are shifted to the left. For example, for the string \\"abcdefg\\" and `k = 2`, the result would be \\"fgabcde\\". For the same string with `k = -2`, the result would be \\"cdefgab\\". She also wants to handle special cases: 1. If `k` is 0, the string remains unchanged. 2. If the absolute value of `k` is greater than the length of the string, it should be treated as `k % len(s)` to simplify the rotation. Your task is to implement a function `rotate_string(s, k)` that performs the rotation. The function should take a string `s` of length `n` (1 ≤ n ≤ 1000) and an integer `k` (-10000 ≤ k ≤ 10000) as input and return the rotated string. # Function Signature: ```python def rotate_string(s: str, k: int) -> str: ``` # Input: - `s` (1 ≤ |s| ≤ 1000): a non-empty string consisting of lowercase English letters. - `k` (-10000 ≤ k ≤ 10000): an integer denoting the number of positions to rotate the string. # Output: - The rotated string after performing the specified rotation. # Example: ```python rotate_string(\\"abcdefg\\", 2) # Output: \\"fgabcde\\" rotate_string(\\"abcdefg\\", -2) # Output: \\"cdefgab\\" rotate_string(\\"abcdefg\\", 0) # Output: \\"abcdefg\\" rotate_string(\\"abcdefg\\", 10) # Output: \\"efgabcd\\" ```","solution":"def rotate_string(s: str, k: int) -> str: Rotates the characters in the string s by k steps. n = len(s) if n == 0 or k == 0: return s # Normalize the value of k to be within the bounds of the string length k = k % n # For a negative k, we convert it to a positive rotation if k < 0: k += n # Perform the rotation, characters moved from end to front return s[-k:] + s[:-k]"},{"question":"Katrina is managing a new software system which consists of n modules numbered from 1 to n. Module 1 is the central module. Additionally, there are m directed connections between the modules. One can go from module ui to module vi using the i-th connection, with a latency of xi milliseconds. Additionally, there are k secure paths from the central module to other modules. The i-th secure path goes from module 1 to module si, with a latency of yi milliseconds. Katrina needs to decommission some of these secure paths to reduce maintenance costs. Help her determine the maximum number of secure paths she can decommission without increasing the shortest latency from the central module to any other module. The first line contains three integers n, m, and k (2 ≤ n ≤ 105; 1 ≤ m ≤ 3·105; 1 ≤ k ≤ 105). Each of the next m lines contains three integers ui, vi, and xi (1 ≤ ui, vi ≤ n; ui ≠ vi; 1 ≤ xi ≤ 109). Each of the next k lines contains two integers si and yi (2 ≤ si ≤ n; 1 ≤ yi ≤ 109). It is guaranteed that there is at least one way to reach every module from the central module. Note, that there can be multiple connections between two modules. Also, there can be multiple secure paths to the same module from the central module. Output a single integer representing the maximum number of secure paths which can be decommissioned.","solution":"from heapq import heappop, heappush from collections import defaultdict import sys def min_latencies(n, adj): dist = [float(\'inf\')] * (n + 1) dist[1] = 0 pq = [(0, 1)] while pq: d, u = heappop(pq) if d > dist[u]: continue for v, w in adj[u]: if dist[u] + w < dist[v]: dist[v] = dist[u] + w heappush(pq, (dist[v], v)) return dist def max_decommissioned_paths(n, m, k, connections, secure_paths): adj = defaultdict(list) secure_path_map = defaultdict(list) for u, v, x in connections: adj[u].append((v, x)) adj[v].append((u, x)) secure_paths_list = [] for s, y in secure_paths: secure_paths_list.append((s, y)) secure_path_map[s].append(y) secure_paths_list.sort(key=lambda x: x[1]) # Sort based on latency min_dists = min_latencies(n, adj) count_decommissioned = 0 for s, y in secure_paths_list: if y > min_dists[s]: count_decommissioned += 1 return count_decommissioned"},{"question":"Consider an MxN grid consisting of different elevations represented by a 2D array. You are on a cell at the top-left corner (0,0) and want to travel to the bottom-right corner (M-1,N-1). You can move up, down, left, or right from a cell, but you can only move to an adjacent cell if the elevation difference between the current cell and the destination cell is at most `k`. Write a program to determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. **Input:** - The first line contains three integers M, N, and k (1 ≤ M, N ≤ 1000, 1 ≤ k ≤ 10^4). - The next M lines each contain N integers representing the elevation values of the grid (0 ≤ elevation ≤ 1000). **Output:** - Print a single integer representing the minimum number of steps required to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, print -1. **Example:** ```plaintext Input: 4 4 2 1 3 5 8 2 2 4 7 1 3 3 6 5 4 2 1 Output: 5 Explanation: The grid is: 1 3 5 8 2 2 4 7 1 3 3 6 5 4 2 1 One possible path with elevation differences <= 2: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,3) ``` Note: Multiple paths may exist, and the goal is to find the path with the minimum number of steps.","solution":"from collections import deque def min_steps_to_reach_bottom_right(M, N, k, grid): Returns the minimum number of steps required to reach the bottom-right corner of the grid from the top-left corner. if M == 1 and N == 1: return 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, step) visited = set((0, 0)) while queue: row, col, step = queue.popleft() for dr, dc in directions: nr, nc = row + dr, col + dc if 0 <= nr < M and 0 <= nc < N and (nr, nc) not in visited: elevation_diff = abs(grid[nr][nc] - grid[row][col]) if elevation_diff <= k: if nr == M - 1 and nc == N - 1: return step + 1 queue.append((nr, nc, step + 1)) visited.add((nr, nc)) return -1 # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) k = int(data[2]) grid = [] index = 3 for i in range(M): row = list(map(int, data[index:index + N])) grid.append(row) index += N print(min_steps_to_reach_bottom_right(M, N, k, grid))"},{"question":"You are given a list of `n` integers representing the heights of `n` buildings in a row. You need to calculate the maximum amount of rainwater that can be trapped between these buildings. Assume that the buildings are adjacent to each other and that the width of each building is 1 unit. The first line contains an integer `n` (1 ≤ n ≤ 10^5). The second line contains `n` non-negative integers representing the heights of the buildings (0 ≤ height ≤ 10^9). Output a single integer representing the maximum units of rainwater that can be trapped between the buildings. Example: ``` Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 ``` Explanation: The elevation map is [0,1,0,2,1,0,1,3,2,1,2,1], and the maximum amount of water that can be trapped is 6 units.","solution":"def max_water_trapped(n, heights): Calculates the maximum amount of rainwater that can be trapped between the buildings. :param n: Integer, the number of buildings. :param heights: List of integers, representing the heights of the buildings. :return: Integer, the maximum units of rainwater that can be trapped. if n < 3: # Less than 3 buildings cannot trap any water return 0 left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"You\'re given an array of integers, `arr`, where each element represents the height of a block. You can remove at most one block from the array. Your task is to determine whether it\'s possible to make the array sorted in non-decreasing order after removing at most one block. # Input: - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - For each test case, the first line contains an integer `n` (2 ≤ n ≤ 100), the number of blocks. - The second line contains `n` integers representing the heights of the blocks, `arr[i]` (1 ≤ arr[i] ≤ 100). # Output: For each test case, output \\"YES\\" if it\'s possible to make the array non-decreasing by removing at most one block. Otherwise, output \\"NO\\". # Sample Input: ``` 3 5 1 2 5 3 4 4 4 3 2 1 6 10 20 30 40 50 60 ``` # Sample Output: ``` YES NO YES ``` # Explanation: - In the first test case, by removing the third block with height 5, the sequence becomes [1, 2, 3, 4], which is sorted in non-decreasing order. - In the second test case, removing any one block won\'t make the sequence sorted in non-decreasing order. - In the third test case, the array is already sorted in non-decreasing order, so no need to remove any block.","solution":"def can_sort_by_removing_one_block(t, test_cases): results = [] for n, arr in test_cases: # Check if the array is already non-decreasing if all(arr[i] <= arr[i + 1] for i in range(n - 1)): results.append(\\"YES\\") continue # Try removing each block one by one can_be_sorted = False for i in range(n): temp = arr[:i] + arr[i + 1:] if all(temp[j] <= temp[j + 1] for j in range(n - 2)): can_be_sorted = True break results.append(\\"YES\\" if can_be_sorted else \\"NO\\") return results"},{"question":"A network administrator needs to monitor server activity across multiple data centers. Each data center logs access requests, but the logs are distributed across different servers. For simplicity, we will model this with a series of servers numbered from 1 to n, where each server maintains its own log of access requests. You need to write a program to help the administrator aggregate these logs to determine how many unique users have accessed any servers during the monitoring period. The program should consider m access events happening in chronological order. Each event records either an access by a user at a specific server or a request to show the count of unique users who accessed any server up to that point. The input format is as follows: The first line contains two integers n and m (1 ≤ n, m ≤ 200,000) — the number of servers and the number of access events. The next m lines describe the events. Each event is represented by two types: 1. An access event in the form of `1 user server` - indicating user id accessed server id. 2. A query event in the form of `2 time` - querying the number of unique users who accessed any server up to and including the given event number (time). Note: - The user ids and server ids are integers ranging from 1 to 100,000. - A user accessing a server multiple times is only counted once for that particular server. For each query event, output the count of unique users who accessed any server up to that time. Sample Input: ``` 3 5 1 1001 1 1 1002 2 2 3 1 1001 3 2 5 ``` Sample Output: ``` 2 2 ``` Explanation: - After the first two access events, two unique users (1001 and 1002) have accessed servers. - The first query event at time 3 checks these two access events and reports 2 unique users. - The fourth event is another access event from user 1001, but this time to server 3, it doesn\'t change the unique user count. - The second query event at time 5 checks all access events up to that point and still reports 2 unique users since user 1001 was already counted.","solution":"def monitor_access_events(n, m, events): from collections import defaultdict # Dictionary to keep track of unique users on each server servers = defaultdict(set) # List to gather results of queries results = [] # Set to keep track of unique users globally unique_users = set() for i in range(m): event = events[i] if event[0] == 1: # Access event _, user, server = event if user not in servers[server]: servers[server].add(user) unique_users.add(user) elif event[0] == 2: # Query event _, time = event results.append(len(unique_users)) return results # Example input output n = 3 m = 5 events = [ (1, 1001, 1), (1, 1002, 2), (2, 3), (1, 1001, 3), (2, 5) ] print(monitor_access_events(n, m, events)) # Expected Output: [2, 2]"},{"question":"You have an array of positive integers representing the heights of buildings in a city where heights[i] is the height of the i-th building. You want to select a subarray of buildings such that the difference between the maximum and minimum heights in this subarray is minimized. Write a program that takes as input the number of buildings n (1 ≤ n ≤ 10^5) and an array of integers heights (1 ≤ heights[i] ≤ 10^9), and finds the smallest possible difference between the maximum and minimum heights in any subarray of length k (1 ≤ k ≤ n). The first line of the input contains two integers n and k. The second line contains n space-separated integers representing the heights of the buildings. Output a single integer, which is the smallest possible difference between the maximum and minimum heights in any subarray of length k. Example Input: 7 3 1 3 4 9 2 8 7 Output: 2 Explanation: - One possible subarray of length 3 is [1, 3, 4] with a difference of 3 - 1 = 2. - Another possible subarray is [4, 9, 2] with a difference of 9 - 2 = 7. - The minimum difference across all subarrays of length 3 is 2, which occurs in subarray [1, 3, 4]. Note: - The answer should be computed efficiently to handle the large constraints.","solution":"def minimize_height_difference(n, k, heights): Finds the smallest possible difference between the maximum and minimum heights in any subarray of length k. Parameters: n (int): Number of buildings. k (int): Length of the subarray. heights (list of int): Heights of the buildings. Returns: int: The smallest possible difference between the maximum and minimum heights in any subarray of length k. # Sort the heights array heights.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Iterate over the sorted list and find the minimum difference for i in range(n - k + 1): diff = heights[i + k - 1] - heights[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a rectangular field of dimensions n x m represented as a grid. Some cells of the grid are blocked due to obstacles. You are to determine the number of distinct paths from the top-left corner to the bottom-right corner of the grid. You can move either down or right from a cell. Write a function to calculate the number of distinct paths while avoiding the blocked cells. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) which denotes the number of rows and columns of the grid. The next n lines each contain m characters where: - \'.\' denotes a free cell. - \'#\' denotes a blocked cell. Output a single integer representing the number of distinct paths from the top-left to the bottom-right corner of the grid. If no such path exists, return 0. **Example Input:** ``` 3 3 ... .#. ... ``` **Example Output:** ``` 2 ``` In the example above, there are two paths from the top-left to the bottom-right corners without passing through blocked cells: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def num_paths(grid): n = len(grid) m = len(grid[0]) # If the start or end is blocked, return 0 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a DP table with 0 paths dp = [[0]*m for _ in range(n)] # Start point dp[0][0] = 1 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def read_grid(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid def main(input_string): grid = read_grid(input_string) return num_paths(grid)"},{"question":"You are given an undirected graph represented as an adjacency list. Each vertex in the graph has a value assigned to it. You need to perform two types of operations on this graph: 1) Update the value of a given vertex. 2) Calculate the sum of values for all vertices reachable from a given vertex, including the vertex itself. Your task is to write a program that handles these operations efficiently. The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of vertices in the graph and the number of queries, respectively. The second line contains n integers vi (1 ≤ vi ≤ 10^9) — the values assigned to the vertices. The next n-1 lines contain two integers u and v (1 ≤ u, v ≤ n) — indicating an edge between vertex u and vertex v. The next q lines contain the operations of either type 1 or type 2. If it is a type 1 operation then the line contains three integers 1, x, y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) — indicating an update of the value of vertex x to y. If it is a type 2 operation then the line contains two integers 2, z (1 ≤ z ≤ n) — indicating a request to calculate the sum of values for all vertices reachable from vertex z, including z itself. For each type 2 operation, print one integer — the sum of values for the reachable vertices. Input: ``` n q v1 v2 v3 ... vn u1 v1 u2 v2 ... un-1 vn-1 <type 1 or type 2 query> ``` Output: ``` <sum of values for type 2 queries> ```","solution":"class Graph: def __init__(self, n, values): self.n = n self.values = values self.adj_list = [[] for _ in range(n + 1)] self.visited = [False] * (n + 1) def add_edge(self, u, v): self.adj_list[u].append(v) self.adj_list[v].append(u) def update_value(self, x, y): self.values[x - 1] = y def dfs(self, node): stack = [node] total_sum = 0 while stack: curr = stack.pop() if not self.visited[curr]: self.visited[curr] = True total_sum += self.values[curr - 1] for neighbor in self.adj_list[curr]: if not self.visited[neighbor]: stack.append(neighbor) return total_sum def sum_reachable(self, z): self.visited = [False] * (self.n + 1) return self.dfs(z) def process_queries(n, q, values, edges, queries): graph = Graph(n, values) for u, v in edges: graph.add_edge(u, v) results = [] for query in queries: if query[0] == 1: graph.update_value(query[1], query[2]) elif query[0] == 2: result = graph.sum_reachable(query[1]) results.append(result) return results"},{"question":"You are given a string representation of a binary tree. The binary tree is represented in a peculiar format: each node is represented by a pair of parentheses containing three items: the node value, the left subtree, and the right subtree. If a subtree is empty, it is represented by an empty pair of parentheses. For example: - A single node tree: `(1()())` - A tree with root value 1, left subtree with root value 2, and empty right subtree: `(1(2()())())` - A tree with root value 1, left subtree with root value 2 having a right child 3, and right subtree with root value 4: `(1(2()(3()()))(4()()))` Your task is to return the height of the binary tree. The height of a binary tree is the number of edges on the longest path from the root to a leaf. An empty tree has height -1, and a single node tree has height 0. **Input:** A string `s` representing the binary tree (1 ≤ |s| ≤ 10^4). **Output:** An integer representing the height of the given binary tree. **Example:** - Input: `(1()())` - Output: 0 - Input: `(1(2()())())` - Output: 1 - Input: `(1(2()(3()()))(4()()))` - Output: 2 **Notes:** - You may assume that the input string format is always valid. - The input string will have balanced parentheses and proper node values.","solution":"def find_tree_height(tree_str): def parse_tree(index): if tree_str[index] == \'(\' and tree_str[index+1] == \')\': return -1, index + 2 index += 1 # skip \'(\' while index < len(tree_str) and tree_str[index] != \'(\': index += 1 left_height, index = parse_tree(index) right_height, index = parse_tree(index) return max(left_height, right_height) + 1, index + 1 # skip \')\' if tree_str == \'()\': return -1 height, _ = parse_tree(0) return height"},{"question":"A forest has several clearings, connected by surprisingly straight paths. Adventurers traveling from one point to another often encounter multiple possible routes between the same pair of clearings. However, thick forest growth and active wildlife make travel between clearings difficult, so adventurers prefer to travel the shortest possible route. You are given a set of clearings and the lengths of the paths between them. Your task is to write a program that, for every pair of clearings, computes the length of the shortest path between them. The first line of the input contains an integer n (2 ≤ n ≤ 100) — the number of clearings. The next n lines each contain n integers, where the j-th integer in the i-th line, a[i][j], is the length of the path between clearing i and clearing j (0 ≤ a[i][j] ≤ 1000). If there is no direct path between two clearings, the corresponding integer is -1. Note that a clearing is always at zero distance from itself (i.e., a[i][i] = 0 for all i). Print the shortest path between each pair of clearings in a matrix format. If there is no path between the clearings, print -1 for that pair. # Example: Input: ``` 4 0 3 -1 7 3 0 2 8 -1 2 0 1 7 8 1 0 ``` Output: ``` 0 3 5 6 3 0 2 3 5 2 0 1 6 3 1 0 ``` Your task is to implement a function that performs this calculation efficiently.","solution":"def floyd_warshall(n, graph): Uses Floyd-Warshall algorithm to find the shortest paths between all pairs of clearings. :param n: Number of clearings. :param graph: Adjacency matrix representing path lengths. :return: Matrix of shortest paths between all pairs of clearings. # Initialize the distance matrix dist = [[float(\'inf\')] * n for _ in range(n)] # Initialize distances according to the input graph for i in range(n): for j in range(n): if i == j: dist[i][j] = 0 elif graph[i][j] != -1: dist[i][j] = graph[i][j] # Floyd-Warshall algorithm for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < float(\'inf\') and dist[k][j] < float(\'inf\'): dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # Replace float(\'inf\') with -1 to indicate no path exists for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist # Example usage: def shortest_path_matrix(n, matrix): return floyd_warshall(n, matrix)"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, you need to find the length of the longest subarray whose sum is equal to `k`. A subarray is a contiguous subset of elements from the array. You need to efficiently determine the maximum length of such a subarray. # Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9). - The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (-10^4 ≤ arr[i] ≤ 10^4). # Output - Output a single integer, the length of the longest subarray with sum equal to `k`. # Example Input ``` 8 15 10 5 2 7 1 9 3 6 ``` Output ``` 4 ``` # Explanation In the provided example, the longest subarray with a sum of 15 is `[2, 7, 1, 5]`, which has a length of 4. # Note - If no such subarray exists, output `0`.","solution":"def longest_subarray_with_sum_k(arr, k): Returns the length of the longest subarray whose sum is equal to k. Parameters: arr (list of int): The list of integers. k (int): The target sum. Returns: int: The length of the longest subarray with sum equal to k, or 0 if no such subarray exists. sum_map = {} current_sum = 0 max_length = 0 for i in range(len(arr)): current_sum += arr[i] # Check if current sum is equal to k if current_sum == k: max_length = i + 1 # Check if (current_sum - k) is in the dictionary if (current_sum - k) in sum_map: max_length = max(max_length, i - sum_map[current_sum - k]) # If current sum is not in the dictionary, add it if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"Alice is playing a game with her friends in a country called Graphland. Graphland consists of m cities numbered from 1 to m, with bidirectional roads connecting a few pairs of these cities. It is possible to traverse from any city to any other city, either directly or via other cities. Alice challenges her friends to find the shortest path between two given cities. As a game master, Alice has asked for an algorithm that efficiently computes the shortest path distances from a specified city to all other cities. She then wants the solution to be presented with each city\'s distance from the start city. The first line of input contains two integers m and n (1 ≤ m ≤ 100,000 and 0 ≤ n ≤ 200,000) — the number of cities and the number of roads respectively. The next n lines describe the roads between cities. Each line contains three integers u, v, and w (1 ≤ u, v ≤ m, 1 ≤ w ≤ 1,000), meaning there is a bidirectional road between city u and city v with weight w. The last line contains a single integer s (1 ≤ s ≤ m) — the starting city. Print m numbers where the i-th number is the shortest path distance from city s to city i. If city i is not reachable from city s, print -1 for city i. Note: - The graph may contain multiple roads between the same pairs of cities. - Consider efficient algorithms such as Dijkstra\'s or Bellman-Ford to solve this problem.","solution":"import heapq import sys def shortest_paths(m, n, roads, s): Find the shortest paths from city `s` to all other cities. Parameters: - m (int): the number of cities - n (int): the number of roads - roads (list of tuples): each tuple contains three integers u, v, w indicating a road between city u and city v with weight w - s (int): the starting city Returns: - list of int: distance from city `s` to every other city. If a city is not reachable, the distance is -1. # Create adjacency list graph = {i: [] for i in range(1, m + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm distances = [float(\'inf\')] * (m + 1) distances[s] = 0 priority_queue = [(0, s)] # (distance, city) while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Format the distances as required: replace `inf` with -1, adjust for zero-based index result = [] for i in range(1, m + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given an array of integers of length n and an integer x. You need to determine whether there exists a contiguous subarray of the given array with exactly x unique elements. The first line of input contains an integer t (1 le t le 10^4) - the number of test cases. Each of the next t test cases begins with a line containing two integers, n and x (1 le n, x le 2 cdot 10^5). The next line contains n integers separated by spaces, representing the array elements. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. Output \\"YES\\" if there is a contiguous subarray with exactly x distinct elements, otherwise output \\"NO\\". # Example Input 3 5 3 1 2 1 3 4 5 2 1 1 1 1 1 6 4 1 2 3 4 5 6 Output YES NO YES # Note In the first test case, the subarray [1, 2, 1, 3] has exactly 3 unique elements. In the second test case, there is no subarray with exactly 2 unique elements since there is only 1 unique element in the array. In the third test case, the subarray [1, 2, 3, 4] has exactly 4 unique elements.","solution":"def has_contiguous_subarray_with_x_unique_elements(t, test_cases): results = [] for test in test_cases: n, x, arr = test if x > n: results.append(\\"NO\\") continue unique_count = {} current_unique = 0 found = False for i in range(n): if arr[i] not in unique_count: unique_count[arr[i]] = 0 unique_count[arr[i]] += 1 if unique_count[arr[i]] == 1: current_unique += 1 if i >= x: unique_count[arr[i - x]] -= 1 if unique_count[arr[i - x]] == 0: current_unique -= 1 if current_unique == x: found = True break if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A museum is setting up a digital display that shows the next available tour start time for visitors. Tours start every 30 minutes, and the first tour of the day starts at 10:00 AM. The last tour starts at 4:00 PM. Write a program that, given the current time, displays the next available tour start time in HH:MM format. If the current time is exactly on a tour start time, the program should show that time. **Input:** - A string in HH:MM format representing the current time in a 12-hour clock format (e.g., \\"09:35 PM\\"). **Output:** - A string in HH:MM format representing the next available tour start time in a 12-hour clock format (e.g., \\"10:00 AM\\"). **Constraints:** - The input time will always be between 09:00 AM and 05:00 PM inclusive. - The time format is always valid. **Example:** **Input:** ``` 09:35 AM ``` **Output:** ``` 10:00 AM ``` **Input:** ``` 03:47 PM ``` **Output:** ``` 04:00 PM ```","solution":"def next_tour_time(current_time): Returns the next available tour time based on the given current time. The function assumes that tours start every 30 minutes, starting from 10:00 AM until 4:00 PM. import datetime # Define format for input and output times time_format = \\"%I:%M %p\\" # Parse the input time current_time_dt = datetime.datetime.strptime(current_time, time_format) # Define the tour start times tour_start_times = [ \\"10:00 AM\\", \\"10:30 AM\\", \\"11:00 AM\\", \\"11:30 AM\\", \\"12:00 PM\\", \\"12:30 PM\\", \\"01:00 PM\\", \\"01:30 PM\\", \\"02:00 PM\\", \\"02:30 PM\\", \\"03:00 PM\\", \\"03:30 PM\\", \\"04:00 PM\\" ] # Iterate over tour start times and find the next available tour time for tour_time in tour_start_times: tour_time_dt = datetime.datetime.strptime(tour_time, time_format) if current_time_dt <= tour_time_dt: return tour_time # If no tour is found (shouldn\'t happen in this case due to constraints), return None return None"},{"question":"In a country called AlgoLand, a new sorting competition has been introduced. The participants are given an array of integers and must rearrange the elements in such a way that the sum of products of successive pairs of elements is minimized. For example, for an array [a, b, c, d], the sum of products of successive pairs is: (a * b) + (b * c) + (c * d). The contestants are, however, only allowed to swap adjacent elements of the array and each swap counts as one operation. You need to find out the minimum number of such adjacent swaps required to achieve the arrangement that minimizes the sum of successive products. You may assume that the array will always have at least 2 and at most 1000 elements, and each element will be between 1 and 10^6. Input: The first line of input contains an integer n (2 ≤ n ≤ 1000), the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output: Print the minimum number of adjacent swaps needed. Example input: 4 4 3 2 1 Example output: 6","solution":"def minimum_adjacent_swaps(n, arr): Function to calculate the minimum number of adjacent swaps required to sort an array in non-decreasing order. # Copy array sorted_arr = sorted(arr) swaps = 0 for i in range(n): # If the number is not in the correct position while arr[i] != sorted_arr[i]: index = arr.index(sorted_arr[i]) arr[index], arr[index - 1] = arr[index - 1], arr[index] swaps += 1 return swaps # Example usage n = 4 arr = [4, 3, 2, 1] print(minimum_adjacent_swaps(n, arr)) # Output: 6"},{"question":"**Problem Statement:** A software company awards its employees monthly based on the performance of the software updates they release. The metric used for this performance evaluation is the number of positive user feedbacks received after an update is deployed. Every time the number of positive feedbacks is a perfect square, the team responsible for the update receives a bonus. One of the team members, Alex, anticipates receiving n positive feedbacks for the update. He wants to determine how many bonuses his team might receive this month. The only line of the input contains one integer n (1 ≤ n ≤ 10^18) — the predicted number of positive feedbacks. Output one integer showing how many numbers from 1 to n are perfect squares. **Example:** Input: ``` 10 ``` Output: ``` 3 ``` **Explanation:** The perfect squares from 1 to 10 are 1, 4, and 9. Thus, the team would receive 3 bonuses.","solution":"import math def count_perfect_squares(n): Returns the number of perfect squares between 1 and n, inclusive. return math.isqrt(n)"},{"question":"Given an array of integers a, you need to determine if there exists a way to partition the array into two non-empty subsets such that the sum of elements in both subsets is equal. If such a partition exists, print \\"YES\\", otherwise print \\"NO\\". # Input The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains a single integer n (2 leq n leq 10^5) — the length of the array a. The second line of each test case contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. # Output For each test case, print \\"YES\\" if there exists a way to partition the array into two non-empty subsets such that the sum of elements in both subsets is equal. Otherwise, print \\"NO\\". # Example Input ``` 3 4 1 5 11 5 5 1 2 3 5 3 4 4 1 ``` Output ``` YES NO NO ```","solution":"def can_partition_equal_sum(t, test_cases): Given an array of integers a, determine if there exists a way to partition the array into two non-empty subsets such that the sum of elements in both subsets is equal. results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] total = sum(array) if total % 2 != 0: results.append(\\"NO\\") continue target = total // 2 dp = [False] * (target + 1) dp[0] = True for num in array: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] if dp[target]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s consisting of lowercase English letters. A lexicographical rotation of s is any string that can be obtained by rotating s in a circular fashion. For example, if s = \\"abcde\\", then the lexicographical rotations of s include \\"abcde\\", \\"bcdea\\", \\"cdeab\\", \\"deabc\\", and \\"eabcd\\". Among all possible lexicographical rotations of s, you need to find the one that is the lexicographically smallest. Given the string s, produce the lexicographically smallest rotation of s. # Input: - A single string s (1 le |s| le 10^5), consisting of lowercase English letters. # Output: - A single line containing the lexicographically smallest rotation of s. # Example: Input: ``` bca ``` Output: ``` abc ``` Input: ``` cba ``` Output: ``` acb ``` Note: In the first example, the possible rotations of \\"bca\\" are \\"bca\\", \\"cab\\", and \\"abc\\". Among these, \\"abc\\" is the smallest lexicographically. Therefore, the output is \\"abc\\". In the second example, the possible rotations of \\"cba\\" are \\"cba\\", \\"bac\\", and \\"acb\\". Among these, \\"acb\\" is the smallest lexicographically. Therefore, the output is \\"acb\\".","solution":"def smallest_lexicographical_rotation(s): Returns the lexicographically smallest rotation of the string s. n = len(s) s = s + s # Concatenate the string to itself to handle rotations min_rotation = s[:n] # Check all rotations for i in range(1, n): current_rotation = s[i:i+n] if current_rotation < min_rotation: min_rotation = current_rotation return min_rotation"},{"question":"You are designing a simple calculator that supports addition, subtraction, multiplication, and division of two integers. However, this calculator should follow a unique set of rules for division, where instead of producing a floating-point result, it only considers the integer part of the result (floor division). Additionally, the calculator should raise an error if an attempt is made to divide by zero or if any of the inputs are outside the allowable range of -10^5 to 10^5, inclusive. Write a function `custom_calculator` that takes three parameters: two integers and a string that specifies the operation (\'add\', \'subtract\', \'multiply\', \'divide\'). The function should perform the given operation and return the result. If the operation is \'divide\' and the second integer is zero, the function should return the string \\"Error: Division by zero\\". If any of the input integers are outside the allowable range, the function should return the string \\"Error: Out of range\\". For valid inputs and operations, the function should return an integer. Example: ``` Input: custom_calculator(10, 5, \'add\') Output: 15 Input: custom_calculator(10, 0, \'divide\') Output: \\"Error: Division by zero\\" Input: custom_calculator(1000001, 5, \'subtract\') Output: \\"Error: Out of range\\" ``` Note: - You should not use any libraries other than the standard math operators. - The function signature should be: ```python def custom_calculator(a: int, b: int, operation: str) -> Union[int, str]: ```","solution":"def custom_calculator(a: int, b: int, operation: str): Performs a custom calculator operation: addition, subtraction, multiplication, or floor division. Args: a (int): The first integer input. b (int): The second integer input. operation (str): The operation to perform (\'add\', \'subtract\', \'multiply\', \'divide\'). Returns: int: The result of the operation. str: Error message if the operation is invalid or inputs are out of range. if a < -10**5 or a > 10**5 or b < -10**5 or b > 10**5: return \\"Error: Out of range\\" if operation == \'add\': return a + b elif operation == \'subtract\': return a - b elif operation == \'multiply\': return a * b elif operation == \'divide\': if b == 0: return \\"Error: Division by zero\\" else: return a // b else: return \\"Error: Invalid operation\\""},{"question":"Sophia is an enthusiastic coder who loves solving puzzles in her free time. Recently, she came across an interesting challenge related to strings and binary numbers. Given a binary string (a string containing only characters \'0\' and \'1\'), she wants to determine the minimum number of bit flips required to make the string a palindrome. A palindrome is a string that reads the same backward as forward. For instance, \\"10101\\" and \\"1001\\" are palindromes, whereas \\"1100\\" and \\"1110\\" are not. Your task is to write a program to help Sophia figure out the minimum number of bit flips required to make the given binary string a palindrome. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a non-empty binary string. The length of each binary string does not exceed 100. For each test case, print a single integer: the minimum number of bit flips required to make the binary string a palindrome. # Example: **Input:** ``` 3 1100 1001 111010 ``` **Output:** ``` 2 0 2 ``` **Explanation:** 1. For the first test case \\"1100\\", we can flip the first and last characters to obtain \\"1001\\", which is a palindrome. Thus, 2 flips are needed. 2. For the second test case \\"1001\\", the string is already a palindrome, so no flips are necessary. 3. For the third test case \\"111010\\", flipping the second and the fifth characters to \'0\' and \'1\', respectively, would give us \\"110011\\", which is a palindrome. Thus, 2 flips are needed.","solution":"def min_flips_to_palindrome(s): Given a binary string, returns the minimum number of bit flips required to make it a palindrome. n = len(s) flips = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: flips += 1 return flips def solve(t, strings): results = [] for s in strings: results.append(min_flips_to_palindrome(s)) return results"},{"question":"A city is represented as a grid with m rows and n columns. Each cell in the grid either contains a street (denoted by \'S\') or a building (denoted by \'B\'). The goal is to add streetlights such that every street cell is illuminated. A streetlight illuminates the cell it is placed in as well as all the contiguous street cells in the same row or column, stopping when it hits a building cell or the grid boundary. You need to determine the minimum number of streetlights required to illuminate all the street cells in the grid. The first line of input contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. The next m lines each contain n characters, representing the grid. Print a single integer — the minimum number of streetlights required. Example: Input: 4 4 SBBB SSSB BSSS SSBB Output: 2","solution":"def min_streetlights(grid): m = len(grid) n = len(grid[0]) streetlights = 0 # To count the number of streetlights placed illum_rows = [False] * m # Track if a row is already lit by a streetlight illum_cols = [False] * n # Track if a column is already lit by a streetlight for i in range(m): for j in range(n): if grid[i][j] == \'S\' and not illum_rows[i] and not illum_cols[j]: # Place a streetlight here streetlights += 1 # Illuminate the entire row until B or grid boundary k = j while k < n and grid[i][k] != \'B\': illum_cols[k] = True k += 1 # Illuminate the entire column until B or grid boundary k = i while k < m and grid[k][j] != \'B\': illum_rows[k] = True k += 1 return streetlights"},{"question":"A professor is studying the migratory patterns of birds. The researcher has observed that birds migrate in a specific manner that can be represented as a grid. The grid consists of N rows and M columns of cells, and each cell can either be traversable (.) or an obstacle (#). The birds can move to an adjacent traversable cell (left, right, up, down). The researcher places a bird initially at a specific starting cell in the grid and wants to understand the shortest path the bird would take to reach a goal cell. Given that the bird can only pass through traversable cells, you need to calculate the minimum number of steps required for the bird to reach the goal from the starting position. If the goal is unreachable, return -1. Input Format: - The first line contains two integers N and M (1 ≤ N, M ≤ 1000), the number of rows and columns in the grid. - The next N lines each contain M characters (either \'.\' or \'#\') representing the grid. - The next line contains four integers r1, c1, r2, and c2 (1 ≤ r1, r2 ≤ N, 1 ≤ c1, c2 ≤ M), the starting row and column followed by the goal row and column. Output Format: - Output a single integer representing the minimum number of steps required for the bird to reach the goal. If the goal is unreachable, output -1. Example: ``` Input: 5 5 ..... .#... ..#.. ...#. ..... 1 1 5 5 Output: 8 ``` Explanation: The bird starts at the top-left corner (1,1) and moves to the bottom-right corner (5,5) in 8 steps avoiding obstacles.","solution":"from collections import deque def min_steps_to_goal(grid, start, goal): N, M = len(grid), len(grid[0]) r1, c1 = start r2, c2 = goal def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(r1, c1, 0)]) visited = set((r1, c1)) while queue: x, y, steps = queue.popleft() if (x, y) == (r2, c2): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def migratory_patterns(N, M, grid, r1, c1, r2, c2): start = (r1 - 1, c1 - 1) goal = (r2 - 1, c2 - 1) return min_steps_to_goal(grid, start, goal) # Example Usage: # grid = [ # [\'.\', \'.\', \'.\', \'.\', \'.\'], # [\'.\', \'#\', \'.\', \'.\', \'.\'], # [\'.\', \'.\', \'#\', \'.\', \'.\'], # [\'.\', \'.\', \'.\', \'#\', \'.\'], # [\'.\', \'.\', \'.\', \'.\', \'.\'] # ] # print(migratory_patterns(5, 5, grid, 1, 1, 5, 5)) # Output: 8"},{"question":"In an ancient forest, there are several magical creatures each with unique abilities. Abilities can be either physical (strength, agility) or elemental (fire, water). Every day, two creatures engage in a duel in a particular ability chosen by the forest\'s elder. The creature with the higher value in the chosen ability always wins, and the losing creature leaves the forest. The last creature remaining is crowned the ruler of the forest. The duels are held in a sequence of days, and each day a duel happens in a randomly chosen ability category. Given the ability values of each creature, you need to determine the winners of n duels if the creatures were to compete in the given order of abilities. The first line contains two integers n and m (1 ≤ n ≤ 5·10^4, 1 ≤ m ≤ 10) — the number of creatures and the number of different abilities respectively. Each of the next n lines contains m integers a_1, a_2, ..., a_m (1 ≤ a_ij ≤ 10^9), where a_ij is the value of the i-th creature in the j-th ability. It is guaranteed that for any ability category, all values are distinct. Output the index of the creature who would become the ruler of the forest after n duels. **Example:** Input: ``` 4 2 10 15 20 5 25 30 10 40 1 2 2 1 ``` Output: ``` 3 ``` Explanation: - In the first duel, the competition is held in the first ability category: creature 1 (10) vs creature 2 (20). Creature 2 wins. - In the second duel, the competition is held in the second ability category: creature 2 (5) vs creature 3 (30). Creature 3 wins. - In the third duel, the competition is held in the second ability category: creature 3 (30) vs creature 4 (40). Creature 4 wins. - In the fourth duel, the competition is held in the first ability category: creature 4 (10) vs creature 1 (10). Neither can win, move to next in sequence if number of creatures exceeds duels. Thus, the creature 3 wins the last duel making it the ruler of the forest.","solution":"def find_ruler(n, m, creatures, abilities): current_creatures = list(range(n)) # index of creatures still in the forest for ability in abilities: ability -= 1 # converting to 0-based index # Perform duels for the current ability new_creatures = [] while len(current_creatures) > 1: for i in range(0, len(current_creatures) - 1, 2): if creatures[current_creatures[i]][ability] > creatures[current_creatures[i + 1]][ability]: new_creatures.append(current_creatures[i]) else: new_creatures.append(current_creatures[i + 1]) if len(current_creatures) % 2 == 1: new_creatures.append(current_creatures[-1]) current_creatures = new_creatures new_creatures = [] return current_creatures[0] + 1 # converting back to 1-based index # Helper function to initiate the process def ruler_of_forest(n, m, creatures, abilities): return find_ruler(n, m, creatures, abilities)"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a weight associated with it. Your task is to determine if there exists a path between any two vertices such that the sum of weights along the path equals k. Input: - The first line contains three integers n (2 le n le 1000), m (1le m le 10000) and k (-10^6 le k le 10^6) — the number of vertices, edges, and the desired sum of weights, respectively. - The next m lines contain three integers each u, v, and w (1 le u, v le n, -10^3 le w le 10^3) indicating there is an edge between vertices u and v with weight w. Output: - \\"YES\\" (without quotes) if there exists any path between any two vertices such that the sum of weights along the path equals k. - \\"NO\\" (without quotes) otherwise. Note: - The graph does not contain self-loops or multiple edges between any pair of vertices. - The graph may be disconnected. - The path can be any sequence of vertices such that each consecutive pair in the sequence is connected by an edge in the graph. Example: Input: ``` 5 6 7 1 2 3 2 3 4 1 3 5 3 4 2 2 5 1 4 5 -1 ``` Output: ``` YES ``` Explanation: In this example, one possible path is from vertex 1 to vertex 2 to vertex 3 to vertex 4. The sum of weights along this path (3 + 4 + 2) equals 9, which means there are potentially multiple correct solutions. Your implementation needs to find at least one path with the required sum if it exists.","solution":"import collections from itertools import product def does_path_exist(n, m, k, edges): Returns \\"YES\\" if there exists any path between any two vertices such that the sum of weights along the path equals k. Otherwise, returns \\"NO\\". graph = collections.defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dfs(node, target, visited, current_sum): if current_sum == target: return True visited.add(node) for neighbor, weight in graph[node]: if neighbor not in visited: if dfs(neighbor, target, visited, current_sum + weight): return True visited.remove(node) return False for start_node in range(1, n + 1): if dfs(start_node, k, set(), 0): return \\"YES\\" return \\"NO\\" def graph_path_exists(n, m, k, edges): return does_path_exist(n, m, k, edges)"},{"question":"You are given an undirected graph with n nodes and e edges. Each edge between node u and node v has a weight w. Given q queries, each consisting of a pair of nodes (x, y), your task is to find the shortest distance between nodes x and y, if it exists. Input: - The first line contains two integers n and e (1 ≤ n ≤ 500, 0 ≤ e ≤ 124750), representing the number of nodes and the number of edges in the graph, respectively. - The following e lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is an edge of weight w connecting node u and node v. - The next line contains a single integer q (1 ≤ q ≤ 200), representing the number of queries. - The following q lines each contain two integers x and y (1 ≤ x, y ≤ n), representing a query for the shortest distance between node x and node y. Output: - For each query, output a single integer - the shortest distance between nodes x and y. If there is no path between x and y, output -1. Example: Input: ``` 5 6 1 2 3 1 3 8 2 3 2 2 4 5 3 4 4 4 5 1 3 1 5 3 5 2 4 ``` Output: ``` 9 5 5 ``` Explanation: - For the first query (1 to 5), the shortest path is 1 -> 2 -> 3 -> 4 -> 5 with a total weight of 9. - For the second query (3 to 5), the shortest path is 3 -> 4 -> 5 with a total weight of 5. - For the third query (2 to 4), the shortest path is 2 -> 4 with a total weight of 5.","solution":"import sys def floyd_warshall(n, graph): dist = [[sys.maxsize] * n for _ in range(n)] for u in range(n): dist[u][u] = 0 for u in range(n): for v, w in graph[u]: dist[u][v] = w for k in range(n): for i in range(n): for j in range(n): if dist[i][k] != sys.maxsize and dist[k][j] != sys.maxsize: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def process_queries(n, edges, queries): graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) shortest_paths = floyd_warshall(n, graph) results = [] for x, y in queries: distance = shortest_paths[x-1][y-1] results.append(distance if distance != sys.maxsize else -1) return results"},{"question":"Design a function that plays a game of Tic-Tac-Toe on a 3x3 grid, taking in a sequence of moves and determining the game\'s outcome. The function should take a list of tuples as input, each representing the moves made by either player \'X\' or player \'O\'. Each tuple contains three elements — the player (\'X\' or \'O\'), the row index (0, 1, or 2), and the column index (0, 1, or 2). The function should return \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Pending\\" based on the game state after all the moves have been played. # Function Signature ```python def check_tic_tac_toe(moves: [(str, int, int)]) -> str: ``` # Input - `moves`: A list of tuples, where each tuple is of the form (str, int, int) representing the player\'s move (\'X\' or \'O\'), the row index (0, 1, or 2), and the column index (0, 1, or 2). The moves are given in the order they are played, and the list length can range from 0 to 9. # Output - The function should return a string indicating the game\'s outcome — \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Pending\\". # Example ```python moves = [(\'X\', 0, 0), (\'O\', 1, 1), (\'X\', 0, 1), (\'O\', 1, 0), (\'X\', 0, 2)] print(check_tic_tac_toe(moves)) # Output: \\"X wins\\" moves = [(\'X\', 0, 0), (\'O\', 1, 1), (\'X\', 0, 1), (\'O\', 1, 0), (\'X\', 2, 2), (\'O\', 1, 2)] print(check_tic_tac_toe(moves)) # Output: \\"O wins\\" moves = [(\'X\', 0, 0), (\'O\', 1, 1), (\'X\', 0, 1), (\'O\', 1, 0), (\'X\', 2, 2), (\'O\', 1, 2), (\'X\', 2, 0), (\'O\', 2, 1), (\'X\', 1, 1)] print(check_tic_tac_toe(moves)) # Output: \\"Draw\\" moves = [(\'X\', 0, 0), (\'O\', 1, 1)] print(check_tic_tac_toe(moves)) # Output: \\"Pending\\" ``` # Explanation In the first example, player \'X\' wins with a horizontal line on the top row. In the second example, player \'O\' wins with a vertical line on the middle row. In the third example, the game ends in a draw with no remaining moves and no winner. In the fourth example, the game is still ongoing or pending as not all moves have been played. # Constraints - The grid size is fixed at 3x3. - The input list will contain valid moves in a valid order and range. - Handle edge cases such as incomplete games or draws.","solution":"def check_tic_tac_toe(moves): Determines the outcome of a Tic-Tac-Toe game. Args: - moves: List of tuples. Each tuple contains a play (\'X\' or \'O\'), and two integers indicating the row index (0, 1, or 2) and the column index (0, 1, or 2). Returns: - A string representing the game\'s outcome: \\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Pending\\". grid = [[\'\' for _ in range(3)] for _ in range(3)] for move in moves: player, row, col = move grid[row][col] = player # Check rows for row in grid: if row[0] == row[1] == row[2] and row[0] != \'\': return f\\"{row[0]} wins\\" # Check columns for col in range(3): if grid[0][col] == grid[1][col] == grid[2][col] and grid[0][col] != \'\': return f\\"{grid[0][col]} wins\\" # Check diagonals if grid[0][0] == grid[1][1] == grid[2][2] and grid[0][0] != \'\': return f\\"{grid[0][0]} wins\\" if grid[0][2] == grid[1][1] == grid[2][0] and grid[0][2] != \'\': return f\\"{grid[0][2]} wins\\" # Check for pending moves for row in grid: if \'\' in row: return \\"Pending\\" # If no winner and no pending moves, it\'s a draw return \\"Draw\\""},{"question":"Apona is a botanist who is studying a unique species of plants. Each plant has a characteristic height that Apona wants to analyze. She has noticed that when a certain group of plants is aligned in a specific way, they can form interesting patterns. To explore these patterns, Apona has decided to group the plants into sequences where each sequence constitutes a peak. A sequence of plants is considered a peak if it first strictly increases to a certain point and then strictly decreases. For example, given the heights [1, 3, 5, 4, 2], the sequence 1, 3, 5, 4, 2 forms a peak because it increases from 1 to 5 and then decreases to 2. Apona now wants to find the longest peak sequence that can be formed from the given heights of the plants. Write a program that, given an array of integers representing the heights of the plants, determines the length of the longest peak sequence. The first line contains an integer n (3 ≤ n ≤ 1000), where n is the number of plants. The second line contains n integers h_i (1 ≤ h_i ≤ 10^4), representing the heights of the plants. Print the length of the longest peak sequence. Example: Input: 8 1 3 2 1 5 6 4 2 Output: 5 Explanation: The longest peak sequence is 1, 5, 6, 4, 2 which has length 5.","solution":"def longest_peak_sequence(heights): Function to find the length of the longest peak sequence in an array of plant heights. A peak sequence is one that strictly increases to a peak and then strictly decreases. if len(heights) < 3: return 0 longest_peak = 0 n = len(heights) for i in range(1, n - 1): if heights[i - 1] < heights[i] > heights[i + 1]: # peak condition left = i - 1 while left > 0 and heights[left - 1] < heights[left]: left -= 1 right = i + 1 while right < n - 1 and heights[right] > heights[right + 1]: right += 1 current_peak_length = right - left + 1 longest_peak = max(longest_peak, current_peak_length) return longest_peak"},{"question":"Kevin\'s friend, Alice, is an avid gardener. She wants to design a beautiful garden with n plants arranged in a single row. Alice knows that some plants need special care due to their height differences. In order to make her garden aesthetically pleasing, she decides to ensure that the absolute difference in height between any two adjacent plants does not exceed a certain value d. Given the heights of the plants, Alice can swap any two plants for free. She would like to know if it\'s possible to rearrange her plants in a way that meets the above condition. If it\'s possible, she also wants to know the maximum difference in the heights of any two adjacent plants in such a valid arrangement. The first line of the input contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 1,000,000), where n is the number of plants and d is the maximum allowed difference in height between any two adjacent plants. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000), representing the heights of the plants. Output \\"YES\\" followed by the maximum difference in the heights of any two adjacent plants in the rearranged garden if it is possible to rearrange the plants to meet the condition, otherwise print \\"NO\\". Example: Input: 5 3 2 9 4 7 1 Output: YES 3 Input: 4 1 10 5 8 3 Output: NO In the first example, Alice can rearrange her plants in the following order: {1, 2, 4, 7, 9}. The maximum difference between the heights of two adjacent plants in this arrangement is 3, which is equal to d and meets Alice\'s requirement. In the second example, there is no way to rearrange the plants to ensure that the absolute difference in height between any two adjacent plants does not exceed 1, so the output is \\"NO\\".","solution":"def can_rearrange_plants(n, d, heights): Determines if the plants can be rearranged such that the absolute difference in height between any two adjacent plants does not exceed d. If possible, returns \\"YES\\" and the maximum difference in the heights of any two adjacent plants in such a valid arrangement. Otherwise, returns \\"NO\\". heights.sort() max_difference = 0 for i in range(1, n): diff = heights[i] - heights[i - 1] if diff > d: return \\"NO\\" max_difference = max(max_difference, diff) return f\\"YES {max_difference}\\""},{"question":"You are given a string that contains only digits, and you need to decode it following a certain set of rules. Each digit from \'1\' to \'9\' can be mapped to an alphabet from \'A\' to \'I\' respectively (i.e., 1 -> \'A\', 2 -> \'B\', ..., 9 -> \'I\'). Additionally, digits from \'10\' to \'26\' can be mapped to \'J\' to \'Z\' respectively (i.e., 10 -> \'J\', 11 -> \'K\', ..., 26 -> \'Z\'). Write a function decodeString(s: str) -> int that returns the number of ways the given string can be decoded. **Example:** ``` Input: s = \\"226\\" Output: 3 Explanation: \\"226\\" can be decoded as \\"BZ\\", \\"VF\\", and \\"BBF\\". ``` **Note:** - The input string is non-empty and contains only digits. - You may assume the input string does not contain any leading zero unless the string is \\"0\\" which is invalid.","solution":"def decodeString(s: str) -> int: Returns the number of ways to decode the given string s. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 # Base case: empty string has one way to decode dp[1] = 1 # Single character string has one way to decode if not \'0\' for i in range(2, n + 1): one_digit = int(s[i-1:i]) two_digits = int(s[i-2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i-1] if 10 <= two_digits <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Phoenix is decorating cookies and decided to use colored sprinkles. He has n cookies and wants to decorate them using exactly k different colors of sprinkles. To make it interesting, he wants each type of sprinkle to be used on an exact number of cookies. In other words, each color should be used on exactly frac{n}{k} cookies. Given that Phoenix has n cookies and k colors of sprinkles, determine if he can decorate his cookies such that each color is used on an exact number of cookies. If it’s possible, print \\"YES\\", otherwise print \\"NO\\". For example, if Phoenix has 12 cookies and 3 colors of sprinkles, it is possible to use each color on exactly 4 cookies. But if he has 10 cookies and 3 colors of sprinkles, it is not possible to use each color on an exact number of cookies. The input consists of multiple test cases. The first line contains an integer t (1 le t le 100) – the number of test cases. Each test case consists of two integers n and k (1 le n, k le 10^9), separated by a space. For each test case, print \\"YES\\" if Phoenix can decorate exactly frac{n}{k} cookies with each color, otherwise print \\"NO\\". # Example ``` Input 5 12 3 10 3 15 5 100 25 30 7 Output YES NO YES YES NO ``` In the first test case, Phoenix can decorate 12 cookies with 3 colors such that each color is used on 4 cookies. In the second test case, there is no exact way to divide 10 cookies among 3 colors.","solution":"def can_decorate_cookies(t, test_cases): results = [] for n, k in test_cases: if n % k == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a grid with N rows and M columns, you need to find the largest rectangle (sub-grid) containing only 1s. You are given N x M grid of 0s and 1s. Your task is to write a program that calculates the area of the largest rectangle (sub-grid) in the grid that contains only 1s. **Input:** - The first line contains two integers N and M (1 ≤ N, M ≤ 2000) — the number of rows and columns in the grid. - Each of the next N lines contains M integers (0 or 1), representing the grid. **Output:** - Print a single integer — the area of the largest rectangle containing only 1s. Example: **Input:** ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` **Output:** ``` 6 ``` Explanation: The largest rectangle containing only 1s has area 6 (i.e., 2 rows by 3 columns).","solution":"def largestRectangleArea(heights): Helper function to find the largest rectangle in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def maximalRectangle(matrix): Given a grid of 0s and 1s, finds the largest rectangle containing only 1s. if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): if matrix[i][j] == 0: heights[j] = 0 else: heights[j] += 1 max_area = max(max_area, largestRectangleArea(heights)) return max_area"},{"question":"You are given a series of n activities that Alex needs to complete sequentially. Each activity i has a duration di (1 ≤ di ≤ 10^4) and a deadline ti (1 ≤ ti ≤ 10^9). Alex starts working on an activity as soon as the previous one is completed. He cannot switch between activities or pause them once started. Your task is to determine if it is possible for Alex to complete all activities within their respective deadlines. If possible, output \\"YES\\" and the earliest completion time for each activity. Otherwise, output \\"NO\\" and the activity index after which Alex would miss a deadline. The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of activities. The next n lines each contain two integers di and ti, the duration and deadline of the i-th activity. Print the result as outlined above. If there is any activity that cannot be completed on time, print the zero-based index of the first such activity. If all activities can be completed on time, print \\"YES\\" followed by n integers, each denoting the completion time of the respective activities. Example: Input: 5 3 10 7 15 2 17 5 20 6 25 Output: YES 3 10 12 17 23","solution":"def can_complete_activities(n, activities): Determines if Alex can complete all the activities within their deadlines, and if so, returns the earliest completion times for each activity. If not, returns the index of the first activity that cannot be completed on time. :param n: Number of activities :param activities: List of tuples, each containing the duration di and deadline ti of an activity :return: \\"YES\\" followed by completion times if all activities can be completed on time, otherwise \\"NO\\" and the index of the first problematic activity current_time = 0 completion_times = [] for i in range(n): d, t = activities[i] current_time += d if current_time > t: return \\"NO\\", i completion_times.append(current_time) return \\"YES\\", completion_times"},{"question":"You have n cards placed in a row, each card has a certain integer written on it. You have to play a game with these cards using the following rules: 1. You take turns alternately with your opponent. 2. On each turn, a player can take one card from either the beginning or the end of the current row of cards. 3. The game ends when there are no more cards left to take. 4. The player with the highest sum of the integers on the cards they have taken is the winner. Both players are perfect and will play optimally. Determine the maximum possible sum that you can achieve if you take the first turn. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of cards. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the values written on the cards. Output a single integer — the maximum possible sum you can achieve by playing optimally.","solution":"def max_sum_cards(cards): # Use dynamic programming to find the max sum achievable by the first player n = len(cards) dp = [[0] * n for _ in range(n)] for length in range(1, n+1): for i in range(n-length+1): j = i + length - 1 if i == j: dp[i][j] = cards[i] else: take_start = cards[i] + (sum(cards[i+1:j+1]) - dp[i+1][j]) take_end = cards[j] + (sum(cards[i:j]) - dp[i][j-1]) dp[i][j] = max(take_start, take_end) return dp[0][n-1]"},{"question":"Alice is organizing a bookshelf with her collection of books. She has n books, and she wants to arrange them in such a way that no book stands next to another book of the same height (to make it more visually appealing). Each book has a height denoted by bi for the i-th book. Alice can rearrange the books in any order but wants to know if it’s possible to achieve the arrangement where no two adjacent books have the same height. Help her determine if it’s possible and if so, outline a possible arrangement. The first line contains an integer n (1 ≤ n ≤ 100) — the number of books. The second line contains n space-separated integers. The i-th integer equals the height of the i-th book bi (1 ≤ bi ≤ 100). Output \\"YES\\" if Alice can arrange the books satisfying the condition, followed by a possible arrangement of the books\' heights. If it\'s not possible, output \\"NO\\". If there are multiple solutions, you can provide any of them.","solution":"def can_arrange_books(n, heights): from collections import Counter height_count = Counter(heights) max_count = max(height_count.values()) if max_count > (n + 1) // 2: return \\"NO\\" sorted_heights = sorted(heights, key=lambda h: (-height_count[h], h)) result = [0] * n result[::2] = sorted_heights[:(n + 1) // 2] result[1::2] = sorted_heights[(n + 1) // 2:] return \\"YES\\", result # Example use-case for testing n = 7 heights = [1, 1, 1, 2, 2, 3, 4] print(can_arrange_books(n, heights)) # Expected output: \\"YES\\", followed by a valid arrangement"},{"question":"Lena enjoys creating sequences of numbers. Today, she decided to work on a special sequence based on her rules. Given an initial sequence of n integers, Lena wants to perform m operations. Each operation consists of choosing two indices i and j (1 ≤ i, j ≤ n, i ≠ j), and applying one of the following two transformations: 1. Swap the elements at positions i and j. 2. Set the element at position i to the value at position j. Your task is to help Lena determine the final sequence after she performs all operations. The first line of the input contains two space-separated integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100) — the length of the sequence and the number of operations. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the initial sequence of numbers. Each of the next m lines contains the description of an operation in the format \\"type i j\\", where type is either 1 or 2, indicating the type of the operation, and i and j are the indices involved in the operation. Output the final sequence of numbers after Lena performs all the operations. # Example Input ``` 5 3 4 7 2 5 9 1 2 3 2 4 5 1 1 5 ``` Output ``` 9 2 7 9 4 ``` # Note In the first example, the operations are performed as follows: 1. Swap elements at positions 2 and 3: the sequence becomes [4, 2, 7, 5, 9]. 2. Set the element at position 4 to the value at position 5: the sequence becomes [4, 2, 7, 9, 9]. 3. Swap elements at positions 1 and 5: the sequence becomes [9, 2, 7, 9, 4].","solution":"def transform_sequence(n, m, initial_sequence, operations): Transforms the sequence according to the given operations. Parameters: n (int): Length of sequence. m (int): Number of operations. initial_sequence (list): Initial sequence of integers. operations (list): List of operations, where each operation is a list in the form [type, i, j]. Returns: list: The transformed sequence. sequence = initial_sequence[:] for op in operations: type, i, j = op if type == 1: # Swap elements at positions i and j sequence[i-1], sequence[j-1] = sequence[j-1], sequence[i-1] elif type == 2: # Set the element at position i to the value at position j sequence[i-1] = sequence[j-1] return sequence"},{"question":"Given a sequence of integers a_1, a_2, ..., a_n and an integer k, you are to perform the following operation exactly once: choose two distinct indices i and j (1 ≤ i < j ≤ n) and swap the values of a_i and a_j. After the swap, you need to determine if the resulting sequence is an increasing subsequence of length at least k. An increasing subsequence is a sequence where each element is strictly larger than the preceding one. The first line contains two integers n and k (2 le n le 2 cdot 10^5, 1 le k le n) — the length of the sequence and the required length of the increasing subsequence. The second line contains the sequence of integers aa_1, a_2, ..., a_n (1 le a_i le 10^9). Output \\"YES\\" if there\'s a way to swap exactly two elements to create an increasing subsequence of length at least k. Otherwise, print \\"NO\\".","solution":"def can_form_increasing_subsequence(n, k, sequence): def is_increasing_subsequence(arr, m): length = 1 for i in range(1, len(arr)): if arr[i] > arr[i-1]: length += 1 if length >= m: return True return length >= m for i in range(n): for j in range(i+1, n): # Swap elements at i and j sequence[i], sequence[j] = sequence[j], sequence[i] if is_increasing_subsequence(sequence, k): return \\"YES\\" # Revert swap sequence[i], sequence[j] = sequence[j], sequence[i] return \\"NO\\""},{"question":"Given a non-negative integer `x`, determine whether it is possible to rearrange its digits such that they form a power of 2. The first line contains an integer `x` (0 ≤ x ≤ 10^9). In a single line, print \\"YES\\" if it is possible to rearrange the digits of `x` to form a power of 2, otherwise print \\"NO\\". **Examples:** Input: ``` 128 ``` Output: ``` YES ``` Input: ``` 123 ``` Output: ``` NO ``` Input: ``` 46 ``` Output: ``` YES ```","solution":"from itertools import permutations def is_power_of_two(n): # n is a single number return n > 0 and (n & (n - 1)) == 0 def can_form_power_of_two(x): x_str = str(x) perm = set(permutations(x_str)) # get all permutations of x_str for p in perm: num = int(\'\'.join(p)) if is_power_of_two(num): return \\"YES\\" return \\"NO\\" # Wrapper function to handle input and output def check_power_of_two_rearrangement(x): print(can_form_power_of_two(x))"},{"question":"Kiran has been learning about different sorting algorithms, and he is particularly interested in the Merge Sort algorithm. He understands how Merge Sort works, but he wants to see its specific application on an array of strings. Kiran has an array of n strings, and he needs to sort the array using the Merge Sort algorithm. Each string in the array contains only lowercase English letters. Your task is to implement the Merge Sort algorithm to sort the given array of strings in ascending lexicographical order. # Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of strings in the array. - The second line contains n strings separated by spaces. Each string has a maximum length of 1000 characters. # Output Print the sorted array of strings in a single line, with each string separated by a space. # Example Input ``` 5 apple banana orange grape mango ``` Output ``` apple banana grape mango orange ``` # Note - You should implement the Merge Sort algorithm manually and not use any built-in sort functions. - Ensure your implementation is efficient enough to handle large inputs as per the constraints given.","solution":"def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): merged = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 while i < len(left): merged.append(left[i]) i += 1 while j < len(right): merged.append(right[j]) j += 1 return merged def sort_strings(n, strings): return merge_sort(strings)"},{"question":"Write a function that takes an array of integers and returns a new array containing only the unique elements, but in the order they appeared in the original array. The input array will have a length between 1 and 1000 inclusive, and each integer will be between -1000 and 1000 inclusive. **Input:** An array of integers, where the length of the array is between 1 and 1000 inclusive. **Output:** A new array of integers, containing only the unique elements from the input array, in the order they originally appeared. **Example:** ``` Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] Input: [7, -1, -1, 5, 5, 10] Output: [7, -1, 5, 10] ```","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the input array in the order they appeared originally. seen = set() unique_arr = [] for num in arr: if num not in seen: seen.add(num) unique_arr.append(num) return unique_arr"},{"question":"A new project at the company requires processing a list of tasks with dependencies. Each task must be completed before certain other tasks can begin. You are tasked with implementing the scheduling of these tasks such that all dependencies are met and additionally optimizing for the total time taken to complete all tasks. Each task has a specific duration, and you can only perform one task at a time. The input will consist of the following: 1. An integer `n` (1 ≤ n ≤ 1000) representing the number of tasks. 2. An integer `m` (0 ≤ m ≤ 5000) representing the number of dependencies. 3. `n` integers `d1, d2, ..., dn` (1 ≤ di ≤ 1000), where `di` represents the duration of task i. 4. `m` pairs of integers `a b` (1 ≤ a, b ≤ n) representing that task `a` must be completed before task `b`. Output: The output should be a single integer representing the total time to complete all tasks, adhering to their dependencies. Consider the following example to understand the structure better: ``` Input: 4 3 4 3 2 1 1 2 2 3 3 4 Output: 10 ``` Explanation: Tasks should be completed in order 1 → 2 → 3 → 4. The total time to complete all these tasks is 4 + 3 + 2 + 1 = 10. Create a function that reads the input values, processes the tasks according to their dependencies, and outputs the total time required to complete all tasks.","solution":"def total_time_to_complete_tasks(n, m, durations, dependencies): from collections import defaultdict, deque # Create adjacency list and in-degree counter adj_list = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph and in-degree list for a, b in dependencies: adj_list[a].append(b) in_degree[b] += 1 # Initialize the queue with tasks that have no dependencies queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) # Process tasks total_time = 0 while queue: current_task = queue.popleft() total_time += durations[current_task - 1] for neighbor in adj_list[current_task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return total_time"},{"question":"Given an array of integers, you need to find the longest subsequence of consecutive integers. A subsequence is derived from an array by deleting some or no elements without changing the order of the remaining elements. Two integers a and b are consecutive if b = a + 1. # Input The first line contains an integer N (1 ≤ N ≤ 100,000) – the number of elements in the array. The second line contains N space-separated integers which are the elements of the array. Each element is from the interval [1, 1,000,000]. # Output Output a single integer which represents the length of the longest subsequence of consecutive integers. # Example 1 Input ``` 6 1 9 3 10 4 20 ``` Output ``` 2 ``` Explanation: The longest subsequence of consecutive elements can be [3, 4]. # Example 2 Input ``` 10 2 5 3 6 7 8 4 9 10 1 ``` Output ``` 10 ``` Explanation: The longest subsequence of consecutive elements can be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].","solution":"def longest_consecutive_subsequence(arr): if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Ella has recently become interested in prime numbers and their properties. To challenge herself, she came up with a new game involving prime sums. The game is defined as follows: Given an integer n, find two distinct positive prime numbers p and q such that their sum equals n (i.e., p + q = n). If there are multiple pairs of primes that satisfy the condition, output the pair with the smallest possible value of p. If no such pair exists, output -1. The first line contains an integer n (4 ≤ n ≤ 10^9) — the number for which you need to find the prime pair. Output two integers p and q if there exists such a pair of primes whose sum is n, with p < q. Otherwise, output -1. It is guaranteed that at least one prime pair sum representation exists for the given range. Here is an example: Input: 26 Output: 5 21 In this example, the prime pair 5 and 21 sum to 26, and there are no smaller valued prime pair sums.","solution":"def sieve(n): Implement Sieve of Eratosthenes to generate all prime numbers up to n. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def find_prime_pair(n): max_limit = n primes = sieve(max_limit) prime_set = set(primes) for p in primes: q = n - p if q in prime_set: return p, q return -1 # Example usage result = find_prime_pair(26) print(result) # (3, 23)"},{"question":"You are given a rectangular maze represented by a 2D grid n times m. Each cell in the grid can be either empty (represented by \'.\') or blocked (represented by \'#\'). You need to navigate from the top-left corner (1,1) to the bottom-right corner (n,m) and determine if this is possible. You can only move right or down at each step. If there\'s a path that allows you to reach the bottom-right corner from the top-left corner, print \\"YES\\". Otherwise, print \\"NO\\". The input consists of several test cases. The first line contains a single integer T (1 le T le 10,000) — the number of test cases. Each test case starts with a line containing two integers n and m (1 le n, m le 1,000)— the dimensions of the maze. The next n lines contain m characters (either \'.\' or \'#\') representing the maze. It\'s guaranteed that the top-left corner and the bottom-right corner are empty cells (\'.\'). # Input ``` 3 4 4 .... ..#. ..#. .... 3 3 .#. .#. ... 2 2 .# #. ``` # Output For each test case, print \\"YES\\" if there exists a path from the top-left to the bottom-right corner, otherwise, print \\"NO\\". ``` YES YES NO ```","solution":"def is_path_possible(n, m, maze): Determines if there is a path from the top-left to the bottom-right of the maze. Parameters: n (int): The number of rows in the maze. m (int): The number of columns in the maze. maze (list of list of str): The 2D grid representing the maze. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. from collections import deque # Directions for moving right or down directions = [(0, 1), (1, 0)] # To keep track of visited cells visited = set() # Start BFS from the top-left corner (0, 0) queue = deque([(0, 0)]) visited.add((0, 0)) while queue: x, y = queue.popleft() # If we\'ve reached the bottom-right corner if (x, y) == (n-1, m-1): return \\"YES\\" # Explore the next cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def solve(test_cases): results = [] for n, m, maze in test_cases: result = is_path_possible(n, m, maze) results.append(result) return results"},{"question":"You are given a list of n intervals, where each interval is represented as a pair of integers [start, end] (inclusive). Your task is to find the maximum number of intervals that do not overlap. Two intervals [a, b] and [c, d] do not overlap if and only if they satisfy either b < c or d < a. The first line contains an integer n (1 le n le 1000) – the number of intervals. Each of the next n lines contains two integers start_i and end_i (0 le start_i le end_i le 10^9) – the start and end points of the interval. Print one integer – the maximum number of non-overlapping intervals. # Example **Input:** ``` 5 1 3 2 4 3 5 6 7 5 8 ``` **Output:** ``` 3 ``` **Explanation:** The maximum set of non-overlapping intervals are [1, 3], [6, 7], and [5, 8] or [1, 3], [3, 5], and [6, 7].","solution":"def max_non_overlapping_intervals(intervals): Finds the maximum number of non-overlapping intervals. Parameters: intervals (list of lists): List of intervals represented as [start, end]. Returns: int: Maximum number of non-overlapping intervals. # Sort intervals based on their end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = float(\'-inf\') for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] return count"},{"question":"Given an array of integers, find the length of the longest subsequence in which the elements are in sorted order (strictly increasing). You need to write a function `longest_increasing_subsequence(array)` that takes an array of integers as input and returns the length of the longest strictly increasing subsequence. # Input - The input is an array of integers `array` with length `n` (1 ≤ n ≤ 10^5). # Output - The output should be a single integer representing the length of the longest strictly increasing subsequence. # Example ``` longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 ``` Explanation: The longest increasing subsequence is [2, 3, 7, 101], which has length 4. **Note:** - A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements.","solution":"def longest_increasing_subsequence(array): Returns the length of the longest strictly increasing subsequence in the given array of integers. if not array: return 0 # Initialize DP array where dp[i] will store the length of the LIS ending at index i dp = [1] * len(array) for i in range(1, len(array)): for j in range(i): if array[i] > array[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Julia recently found an odd-looking sequence of numbers while analyzing some data, and she wants to identify if a given number is part of that sequence. The sequence follows a simple rule: starting from 1, each number is obtained by adding all the digits of its previous number to the previous number itself. For example, the sequence starting from 1 would be: 1, 2 (1+1), 4 (2+2), 8 (4+4), 16 (8+8), 23 (16+1+6), and so on. Given a number x, determine if it is part of this sequence starting from 1. Write a function to solve the problem, adhering to the following format: # Function Signature: ```python def is_in_sequence(x: int) -> bool: ``` **Input:** - An integer x (1 leq x leq 1000) — the number to be checked. **Output:** - Return `True` if x is in the sequence; otherwise, return `False`. # Examples: ```python print(is_in_sequence(1)) # True print(is_in_sequence(2)) # True print(is_in_sequence(15)) # False print(is_in_sequence(23)) # True print(is_in_sequence(100)) # False ```","solution":"def is_in_sequence(x: int) -> bool: Determine if a given number x is part of the sequence where each number is obtained by adding all the digits of its previous number to the previous number itself, starting from 1. current = 1 while current <= x: if current == x: return True current += sum(int(digit) for digit in str(current)) return False"},{"question":"You are given a list of n integers, and you need to determine if there exists a subset of the list whose sum is equal to a given integer k. If such a subset exists, print \\"YES\\" and the subset. If no such subset exists, print \\"NO\\". The first line contains two integers n and k (1 le n le 20, -10^6 le k le 10^6) — the number of integers in the list and the target sum. The second line contains n integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6), which are the elements of the list. If it is impossible to form a suitable subset, print \\"NO\\" (without quotes). Otherwise print \\"YES\\", followed by the number of elements in the subset, and then the elements of the subset. If there are multiple answers, print any of them. Example: Input: ``` 5 9 1 2 3 4 5 ``` Output: ``` YES 3 2 3 4 ``` Input: ``` 3 10 1 2 3 ``` Output: ``` NO ```","solution":"from typing import List, Tuple def subset_sum(n: int, k: int, arr: List[int]) -> Tuple[str, List[int]]: Determines if there exists a subset of `arr` whose sum is equal to `k`. Returns: - A tuple with a string (\\"YES\\" or \\"NO\\") and the subset list if the subset exists If no such subset exists, return \\"NO\\" and an empty list. # Using a dynamic programming approach to solve the subset sum problem # Lookup table to store subproblems dp = {0: []} # A dictionary with {current_sum: subset} for num in arr: temp = dict(dp) # Temporary copy to update the dp dictionary for current_sum, subset in dp.items(): new_sum = current_sum + num if new_sum not in temp: temp[new_sum] = subset + [num] if new_sum == k: return \\"YES\\", temp[new_sum] dp = temp return \\"NO\\", [] def main(): n, k = map(int, input().split()) arr = list(map(int, input().split())) result, subset = subset_sum(n, k, arr) if result == \\"YES\\": print(result) print(len(subset)) print(\\" \\".join(map(str, subset))) else: print(result)"},{"question":"You are given an array of integers A. An inversion in the array is a pair of indices (i, j) such that i < j and A[i] > A[j]. Your task is to modify the array by changing each integer to either 0, epsilon, or -epsilon (where epsilon is a small positive number) such that the number of inversions in the modified array is minimized. You need to determine the minimum number of inversions possible in the modified array. The first line contains a single integer n (1 leq n leq 50) — the size of the array. The second line contains n integers A[i] (-10^3 leq A[i] leq 10^3). Print a single integer, the minimum number of inversions possible in the modified array. Note that since epsilon is a small positive number, for any indices (i, j) with i < j, the relation A[i] < A[j] will always hold when A[i] is -epsilon, and A[j] is epsilon.","solution":"def minimum_inversions_after_modification(A): Given a list of integers A, this function modifies each integer to 0, epsilon, or -epsilon and returns the minimum number of inversions possible in the modified array. :param A: List[int] :return: int n = len(A) if n <= 1: return 0 # No inversions possible in a single element array. # Count provides the number of zeroes, positive and negative numbers zeros = sum(1 for x in A if x == 0) positives = sum(1 for x in A if x > 0) negatives = sum(1 for x in A if x < 0) # Sorting orders negatives first, followed by zeros, then positives, # leading to the minimal number of inversions. return 0 # After sorting the transformed array correctly, we will have 0 inversions."},{"question":"Write a function `find_subsets` that takes a list of n integers and returns all possible non-empty subsets of the list. Each subset should be presented in non-descending order of their elements. In addition, create a function `unique_subsets` that ensures subsets with the same elements, regardless of order, are considered identical and are returned only once. Finally, print the list of unique subsets in lexicographical order. # Input The input consists of: - An integer n (1 ≤ n ≤ 10), the number of elements in the list. - A list of n integers, where each integer is between -109 and 109. # Output The output should be a list of unique non-empty subsets, where each subset is represented as a list of its elements in non-descending order. The overall list should be sorted in lexicographical order. # Example Input ``` 3 [1, 2, 2] ``` Output ``` [[1], [1, 2], [1, 2, 2], [2], [2, 2]] ``` # Constraints - Each subset within the output list should be displayed in non-descending order. - The list of subsets should be displayed in lexicographical order. Implement the `find_subsets` and `unique_subsets` functions in Python.","solution":"import itertools def find_subsets(nums): Returns all possible non-empty subsets of nums. subsets = [] for i in range(1, len(nums) + 1): subsets.extend(itertools.combinations(nums, i)) return subsets def unique_subsets(nums): Returns all non-empty unique subsets of nums, sorted in lexicographical order. nums.sort() all_subsets = find_subsets(nums) unique_subsets_set = set(tuple(sorted(subset)) for subset in all_subsets) unique_subsets_list = sorted(unique_subsets_set) return [list(subset) for subset in unique_subsets_list]"},{"question":"Bob has recently taken an interest in geology and is studying rock formations. He has collected n rocks, each with a unique identifier and a hardness level. Bob wants to organize his rock collection so that each rock is assigned to one of three crates based on its hardness level. The hardness levels are given in such a way that any hardness level can belong to exactly one crate. Additionally, Bob wants no crate to be empty if possible. The task is to find a valid way to assign each rock to a crate. The first line contains an integer n (3 ≤ n ≤ 100) – the number of rocks Bob has collected. The second line contains n space-separated integers hi (1 ≤ hi ≤ 1000) – the hardness levels of the rocks. Output \\"YES\\" and three lists of indices representing the rocks in each crate. If it is not possible to assign the rocks such that each crate has at least one rock, output \\"NO\\". Examples: Input: 7 5 3 10 8 6 2 4 Output: YES 1 2 3 4 5 6 7 Input: 4 1 1 1 1 Output: NO","solution":"def assign_rocks_to_crates(n, hardness_levels): Assigns rocks to three crates such that each crate has at least one rock. Returns a tuple (\\"YES\\", crates) where crates is a list of three lists containing rock indices. Returns \\"NO\\" if it is not possible to assign the rocks to three non-empty crates. :param n: Integer, number of rocks. :param hardness_levels: List of integers, hardness levels of the rocks. :return: Tuple or string (\\"YES\\", [lists of indices]) if possible, \\"NO\\" otherwise. if n < 3: return \\"NO\\" rocks = list(range(1, n + 1)) # List of rock indices crates = [[], [], []] # Dividing the rocks in a round robin manner for i in range(n): crates[i % 3].append(rocks[i]) # Checking if all crates are non-empty if all(crates): return \\"YES\\", crates else: return \\"NO\\" def parse_input(input_data): Parses the input data into the expected format. lines = input_data.strip().split(\\"n\\") n = int(lines[0]) hardness_levels = list(map(int, lines[1].split())) return n, hardness_levels def format_output(result): Formats the output as expected based on the result provided. if result == \\"NO\\": return \\"NO\\" else: status, crates = result return \\"{}n{}n{}n{}\\".format( status, \\" \\".join(map(str, crates[0])), \\" \\".join(map(str, crates[1])), \\" \\".join(map(str, crates[2])), )"},{"question":"Rudolph the Reindeer has a busy delivery schedule during the holiday season. He has received x number of deliveries and y number of hours available. Each delivery takes exactly one hour, but with some magic, he can sometimes complete a delivery in half an hour. Rudolph wants to ensure that he completes x deliveries within y hours using minimal magic to half his delivery time due to its energy cost. Given the integers x and y (1 ≤ x, y ≤ 100; x ≤ 2y), print the minimum number of deliveries Rudolph can finish using exactly one hour, and the maximum number of deliveries that he can finish using half an hour. The deliveries should total exactly to x. Print two space-separated integers: the first integer is the number of deliveries taking one hour, and the second integer is the number of deliveries taking half an hour. If there are multiple valid solutions, any one of them will be acceptable.","solution":"def calculate_deliveries(x, y): Finds the minimum number of 1-hour deliveries and maximum number of half-hour deliveries to complete exactly x deliveries in y hours. Args: x (int): the number of deliveries. y (int): the number of hours available. Returns: tuple: (min_1hour_deliveries, max_half_hour_deliveries) # half_hour_deliveries can take a maximum of 2y-x hours. for half_hour_deliveries in range(x, -1, -1): one_hour_deliveries = x - half_hour_deliveries if half_hour_deliveries * 0.5 + one_hour_deliveries == y: return one_hour_deliveries, half_hour_deliveries"},{"question":"You are given a list of intervals, where each interval has a start and end time. Intervals represent events that happen during the day. Your task is to determine the minimum number of conference rooms required to hold all the events such that no two events overlap in the same room. For example, given intervals `[(0, 30), (5, 10), (15, 20)]`, the minimum number of rooms required is `2`, since `(0, 30)` and `(15, 20)` overlap, requiring two different rooms. The input is given as follows: - The first line contains an integer `n` (1 le n le 10^4), the number of intervals. - Each of the next `n` lines contains two integers `s` and `e` (0 le s < e le 10^6), the start and end of each interval. Output a single integer, the minimum number of conference rooms required. **Example:** Input: ``` 3 0 30 5 10 15 20 ``` Output: ``` 2 ``` **Explanation:** - Conference room 1: [(0, 30)] - Conference room 2: [(5, 10), (15, 20)] Even though `(5, 10)` ends before `(15, 20)` starts, they cannot be scheduled in the same room as `(0, 30)` overlaps with both.","solution":"import heapq def minMeetingRooms(intervals): if not intervals: return 0 # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Initialize a min-heap to keep track of end times of meetings min_heap = [] # Add the end time of the first meeting heapq.heappush(min_heap, intervals[0][1]) # Iterate over remaining intervals for i in range(1, len(intervals)): # If the current meeting starts after the meeting in the heap ends, we can reuse the room if intervals[i][0] >= min_heap[0]: heapq.heappop(min_heap) # Add the current meeting\'s end time to the heap heapq.heappush(min_heap, intervals[i][1]) # The size of the heap is the minimum number of rooms required return len(min_heap)"},{"question":"Given a binary tree, you need to return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). You will be provided with a string representing the tree nodes in level order where \'null\' indicates an absence of a node. You need to construct the binary tree from the string and then return the level order traversal as a list of lists. The first and only line contains the tree nodes in level order as a string, with nodes separated by commas. Print the list of lists containing the level order traversal of the binary tree. Example: Input: \\"3,9,20,null,null,15,7\\" Output: [[3], [9, 20], [15, 7]] Explanation: The binary tree is: 3 / 9 20 / 15 7 The level order traversal is: - Level 1: [3] - Level 2: [9, 20] - Level 3: [15, 7]","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree_from_string(data): if not data or data == \\"null\\": return None nodes = data.split(\',\') root = TreeNode(int(nodes[0])) queue = deque([root]) index = 1 while queue: node = queue.popleft() if index < len(nodes) and nodes[index] != \\"null\\": node.left = TreeNode(int(nodes[index])) queue.append(node.left) index += 1 if index < len(nodes) and nodes[index] != \\"null\\": node.right = TreeNode(int(nodes[index])) queue.append(node.right) index += 1 return root def level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) current_level = [] for _ in range(level_size): node = queue.popleft() current_level.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(current_level) return result"},{"question":"You are given a string containing only the following characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Determine if the input string is valid. A string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Note that an empty string is also considered valid. Your function should take a single argument, a string `s`, and return a boolean value indicating whether the string is valid. You are allowed to use the standard library of your programming language of choice. Aim for a solution with O(n) time complexity where n is the length of the string. **Example 1:** ``` Input: s = \\"()\\" Output: true ``` **Example 2:** ``` Input: s = \\"()[]{}\\" Output: true ``` **Example 3:** ``` Input: s = \\"(]\\" Output: false ``` **Example 4:** ``` Input: s = \\"([)]\\" Output: false ``` **Example 5:** ``` Input: s = \\"{[]}\\" Output: true ``` **Explanation:** - In Example 1, the string contains a single pair of parentheses which are correctly matched, so the output is `true`. - In Example 2, the string contains three pairs of brackets which are correctly matched and in correct order, so the output is also `true`. - In Example 3, the string has an unmatched closing parenthesis, so the output is `false`. - In Example 4, even though the number of each type of bracket matches, the order is incorrect, so the output is `false`. - In Example 5, the string contains correctly matched and ordered brackets, so the output is `true`.","solution":"def is_valid(s): Returns True if the input string of brackets is valid, False otherwise. A string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. :param s: str - a string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: bool - True if the string is valid, False otherwise stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: # It is a closing bracket top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: # It is an opening bracket stack.append(char) return not stack"},{"question":"Jenna received a list of integers a=[a_1, a_2, dots, a_n] as a present for her recent graduation. The list is special because she can perform an operation multiple times where she selects any index i (1 le i le n) and sets a_i := lceil a_i/3 rceil, where lceil x rceil is the ceiling function, i.e., it rounds x up to the nearest integer. For instance, if a_i = 7, then after the operation a_i becomes 3. Jenna wonders if she can perform this operation on the list such that the sum of elements of the list becomes as small as possible but still consisting only of integers. Please help Jenna achieve this by writing a program to find the resulting list with the minimum possible sum and print it. If there are multiple possible resulting lists that have the minimal sum, print any of them. Input: The first line contains an integer n (1 leq n leq 10^5) — the number of integers in the list. The second line contains n integers a_1,a_2, ldots, a_n (1 leq a_i leq 10^{6}) — the elements of the list. Output: Print n integers — the elements of the resulting list after performing the operation in some order to minimize the sum of the list. If there are multiple answers, print any of them.","solution":"import math def minimize_sum(n, a): Function to minimize the sum of list `a` by repeatedly applying the operation a[i] := ceil(a[i] / 3). for i in range(n): while a[i] > 1: a[i] = math.ceil(a[i] / 3) return a # Example usage: # n = 3 # a = [7, 9, 13] # print(minimize_sum(n, a)) # Output should be [1, 1, 1] or any other possible minimal sum combination"},{"question":"You are given a grid of size n x n, where each cell contains either a 0 or a 1. The task is to find the length of the largest square sub-grid that contains only 1s. # Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the size of the grid. - Each of the next n lines contains n integers (either 0 or 1), representing the rows of the grid. # Output: - Output a single integer, the size of the largest square sub-grid that contains only 1s. # Example: **Input:** ``` 4 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 ``` **Output:** ``` 3 ``` **Explanation:** In the provided grid, the largest square sub-grid containing only 1s has a size of 3x3. Here is the 3x3 sub-grid that is all 1s: ``` 1 1 1 1 1 1 1 1 1 ``` # Notes: - The solution to this problem involves dynamic programming. - Create a 2D array `dp` where `dp[i][j]` represents the size of the largest square sub-grid that ends at cell (i, j). - Initialize the `dp` array with the grid values and use the state transition equation to calculate the sizes of subsequent squares. - Return the maximum value in the `dp` array as the result.","solution":"def largest_square_subgrid(n, grid): if n == 0: return 0 dp = [[0]*n for _ in range(n)] max_square_length = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_square_length: max_square_length = dp[i][j] return max_square_length"},{"question":"A museum has decided to arrange tickets for its visitors in a way that reduces the waiting time for everyone. There are n visitors standing in line to buy tickets, labeled from 1 to n in the order they arrived. Each visitor can be in one of four categories: senior citizen, child, adult, and VIP. You need to arrange the visitors so that the following rules are met: 1. VIPs are served first. 2. Then senior citizens are served. 3. Next, children are served. 4. Adults are served last. 5. If there are multiple visitors within the same category, they are served in their original order of arrival. You are given a list of n visitors, where each visitor is identified by a name and a category. Each name is composed of Latin letters, starts with an uppercase letter and the rest are lowercase, and has a length of 1 to 10 characters. The categories can be \'VIP\', \'senior\', \'child\', \'adult\'. Your task is to determine the order in which visitors should be served according to the given rules. The input starts with an integer n (1 ≤ n ≤ 100), the number of visitors. The next n lines each contain a name of a visitor followed by their category. Print n lines where the i-th line corresponds to the name of the visitor who should be served i-th according to the rules. Example: Input: 6 Alice VIP Bob senior Charlie child Daisy adult Eve VIP Fred senior Output: Alice Eve Bob Fred Charlie Daisy","solution":"def sort_visitors(n, visitors): Sort the visitors based on the given rules. :param n: Number of visitors :param visitors: List of tuples where each tuple contains (name, category) :return: List of names sorted according to the rules category_priorities = {\'VIP\': 1, \'senior\': 2, \'child\': 3, \'adult\': 4} # Sort visitors according to category priority and their original order sorted_visitors = sorted(visitors, key=lambda v: category_priorities[v[1]]) # Extract sorted names sorted_names = [visitor[0] for visitor in sorted_visitors] return sorted_names"},{"question":"You are given a list of integers and a series of queries. Each query consists of two integers, l and r, and asks you whether the sum of the subarray from index l to index r (inclusive) is even or odd. For example, if given the list a = [3, 1, 4, 1, 5] and queries are: 1. (1, 3) 2. (2, 5) 3. (1, 5) The answers to the queries are: - (1, 3): subarray is [3, 1, 4], sum is 8 which is even. - (2, 5): subarray is [1, 4, 1, 5], sum is 11 which is odd. - (1, 5): subarray is [3, 1, 4, 1, 5], sum is 14 which is even. The first line contains one integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. For each test case: - The first line contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of elements in the list and the number of queries, respectively. - The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the list. - The following q lines each contain two integers l and r (1 le l le r le n) — the indices for the queries. It is guaranteed that the total sum of n and q over all test cases does not exceed 2 cdot 10^5. For each test case, print q lines — the answer to each query, either `EVEN` or `ODD`.","solution":"def is_sum_even_or_odd(n, q, arr, queries): For each query, check if the sum of the subarray is even or odd. Return a list of results where each result is either \'EVEN\' or \'ODD\'. # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] results = [] for l, r in queries: subarray_sum = prefix_sums[r] - prefix_sums[l - 1] if subarray_sum % 2 == 0: results.append(\\"EVEN\\") else: results.append(\\"ODD\\") return results def process_test_cases(test_cases): Process multiple test cases and return results for all queries in a list. all_results = [] for n, q, arr, queries in test_cases: all_results.append(is_sum_even_or_odd(n, q, arr, queries)) return all_results"},{"question":"Bob and Alice are playing a game with two piles of stones. They start with two piles containing `a` and `b` stones respectively. They take turns removing stones from one of the piles, with the additional constraint that the number of stones they take must be a multiple of 3. Bob always goes first. The player who cannot make a move (because there are no stones left that meet the constraints) loses the game. Given the initial numbers of stones in the two piles, determine who will win if both players play optimally. The first line contains the two space-separated integers `a` and `b` (0 ≤ `a`, `b` ≤ 1000). Output \\"Bob\\" if Bob has a winning strategy and \\"Alice\\" otherwise.","solution":"def game_winner(a, b): Determines who will win if both players play optimally. Parameters: a (int): Number of stones in the first pile. b (int): Number of stones in the second pile. Returns: str: \\"Bob\\" if Bob has a winning strategy, \\"Alice\\" otherwise. if a == 0 and b == 0: return \\"Alice\\" if (a % 3 == 0 and b % 3 == 0): return \\"Alice\\" return \\"Bob\\""},{"question":"Given a string of characters representing a sequence of positive and negative changes in elevation during a hike, determine if a hiker returns to the starting elevation. Each character in the string represents a step in the hike: - \'U\' means a step up in elevation (positive change), - \'D\' means a step down in elevation (negative change). For example, a string \\"UD\\" indicates going up one step and then coming back down to the starting elevation. The input consists of a single string containing only characters \'U\' and \'D\'. The length of the string is between 1 and 100,000 inclusive. Write a function that: 1. Takes this string as input, 2. Returns a boolean indicating whether the hiker returns to the starting elevation at the end of the hike. # Function Signature ```python def hiker_returns_to_start(elevation_changes: str) -> bool: ``` # Input - A single string `elevation_changes` (1 ≤ |elevation_changes| ≤ 100,000): containing only \'U\' and \'D\' characters. # Output - A single boolean value: `True` if the hiker returns to the starting elevation, `False` otherwise. # Examples Example 1 ```python elevation_changes = \\"UD\\" # Expected Output: True ``` Example 2 ```python elevation_changes = \\"UUDD\\" # Expected Output: True ``` Example 3 ```python elevation_changes = \\"UUDDU\\" # Expected Output: False ``` Example 4 ```python elevation_changes = \\"DU\\" # Expected Output: True ```","solution":"def hiker_returns_to_start(elevation_changes: str) -> bool: Determines if the hiker returns to the starting elevation. # count the number of up steps and down steps up_steps = elevation_changes.count(\'U\') down_steps = elevation_changes.count(\'D\') # if the number of up steps equals the number of down steps, # the hiker returns to the starting elevation return up_steps == down_steps"},{"question":"Given an array of integers, your task is to find the length of the longest subset of the array where the sum of any two numbers in the subset is not divisible by a given integer k. # Input - The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100) — the size of the array and the integer k. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. # Output - Print the length of the longest subset where the sum of any two numbers is not divisible by k. # Example Input ``` 7 3 1 7 2 4 5 6 3 ``` Output ``` 4 ``` Explanation In the given example, one possible solution is the subset {1, 7, 4, 5}. The sum of any two elements in this subset is not divisible by 3. Hence, the length of this subset is 4.","solution":"def longest_subset_not_divisible_by_k(n, k, arr): mod_count = [0] * k for num in arr: mod_count[num % k] += 1 result = min(mod_count[0], 1) for i in range(1, (k // 2) + 1): if i != k - i: result += max(mod_count[i], mod_count[k - i]) else: result += min(mod_count[i], 1) return result"},{"question":"You are given a string consisting of lowercase English letters. Each letter of the string can be assigned a value using its position in the alphabet: \'a\' is 1, \'b\' is 2, ..., \'z\' is 26. You can select any non-empty subsequence of characters in the string and swap them any number of times among themselves, but you can\'t change their order in the original string. Your task is to determine if it is possible to rearrange the characters of the given string such that the value of every character is strictly greater than the value of the preceding character when read from left to right. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of one string of lowercase letters. The length of each string is between 1 and 100. For each test case, print \\"YES\\" if it is possible to rearrange the characters to meet the condition, and \\"NO\\" otherwise. Example: Input: 3 a abc cba Output: YES YES NO Explanation: In the first test case, the string already consists of a single character, so it satisfies the condition. In the second test case, the string is already in strictly increasing order. In the third test case, it is not possible to rearrange the characters \'c\', \'b\', \'a\' to be in strictly increasing order as \'c\' has a higher value than both \'b\' and \'a\', and \'b\' is greater than \'a\'.","solution":"def can_rearrange_to_strictly_increasing(string): Determines if the characters in the string can be rearranged into a strictly increasing sequence. # Deduplicate and sort the string to check strictly increasing possibility sorted_unique_chars = sorted(set(string)) return sorted_unique_chars == list(string) def solve(test_cases): Process multiple test cases and return results for each results = [] for string in test_cases: if can_rearrange_to_strictly_increasing(string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an integer array and a target integer. Your task is to find out whether there exists a pair of distinct indices such that the absolute difference between the values at these indices is equal to the target integer. If such a pair exists, return their indices, otherwise return [-1, -1]. Note: - The indices should be returned in ascending order. - If there are multiple valid pairs, return any one of them. # Input - An integer array `arr` of length `n` (1 ≤ n ≤ 10^5), where each element in the array is an integer between -10^9 and 10^9. - An integer `target` (0 ≤ target ≤ 10^9). # Output - An array of two integers representing the indices of the pair, or [-1, -1] if no such pair exists. # Examples Example 1: **Input:** ``` arr = [1, 5, 3, 4, 2] target = 2 ``` **Output:** ``` [0, 2] ``` (Note: The pair (1, 3) has an absolute difference of 2 and the indices 0 and 2 are returned) Example 2: **Input:** ``` arr = [1, 2, 3, 4, 5] target = 5 ``` **Output:** ``` [-1, -1] ``` Example 3: **Input:** ``` arr = [8, 7, 5, 1, 10] target = 3 ``` **Output:** ``` [1, 2] ``` # Constraints - The function should run in O(n log n) time complexity or better. - The solution should handle up to 10^5 elements efficiently.","solution":"def find_indices_with_target_diff(arr, target): Returns a pair of indices such that the absolute difference between the values at these indices is target. If no such pair exists, returns [-1, -1]. num_to_index = {} for i, num in enumerate(arr): if (num - target) in num_to_index: return [num_to_index[num - target], i] if (num + target) in num_to_index: return [num_to_index[num + target], i] num_to_index[num] = i return [-1, -1]"},{"question":"In an online trekking competition, teams of hikers must complete a series of trails to win. Each trail has a specific difficulty level and a certain number of checkpoints. To be considered for the win, a team must accumulate at least d difficulty points and visit at least c checkpoints by completing various trails. You are given t distinct trails. The i-th trail has a difficulty level of ai and contains bi checkpoints. Teams can choose to complete any subset of these trails. Determine the minimum number of trails a team needs to complete to meet the required difficulty points and checkpoints. For example, consider there are three trails where a1 = 4, b1 = 5; a2 = 2, b2 = 4; a3 = 6, b3 = 3. The required difficulty points (d) are 8 and the required number of checkpoints (c) is 7. By completing the first and second trails, the team completes (4 + 2) = 6 checkpoints and (5 + 4) = 9 difficulty points. Thus, they need to complete 2 trails. The first line of input contains three integers t, d, and c (1 ≤ t ≤ 100, 1 ≤ d, c ≤ 1000) — the number of trails and the required difficulty points and checkpoints. Each of the next t lines contains two integers ai and bi (1 ≤ ai, bi ≤ 100) — the difficulty level and the number of checkpoints for the i-th trail. Print an integer — the minimum number of trails a team needs to complete to meet the required difficulty points and checkpoints. If it\'s not possible to meet the requirements with the given trails, print -1. First sample corresponds to the example in the problem statement. Sample Input: ``` 3 8 7 4 5 2 4 6 3 ``` Sample Output: ``` 2 ```","solution":"from itertools import combinations def min_trails(t, d, c, trails): Calculate the minimum number of trails a team needs to complete to meet the required difficulty points and checkpoints. If it\'s not possible, return -1. for i in range(1, t + 1): for comb in combinations(trails, i): sum_difficulty = sum(trail[0] for trail in comb) sum_checkpoints = sum(trail[1] for trail in comb) if sum_difficulty >= d and sum_checkpoints >= c: return i return -1 # Example usage: # t = 3 # d = 8 # c = 7 # trails = [(4, 5), (2, 4), (6, 3)] # print(min_trails(t, d, c, trails)) # Output: 2"},{"question":"A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N. For example, number 529 has binary representation 1000010001 and contains two binary gaps, of lengths 4 and 3. The longest one is of length 4. Write a function: ```python def longest_binary_gap(N: int) -> int: pass ``` that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn\'t contain a binary gap. # Input - A single integer N (1 ≤ N ≤ 2,147,483,647). # Output - A single integer that represents the length of the longest binary gap within the binary representation of N. # Constraints - The input value N will always be within the range [1, 2,147,483,647]. # Example ```python # Example 1 assert longest_binary_gap(9) == 2 # Binary representation is \'1001\' # Example 2 assert longest_binary_gap(529) == 4 # Binary representation is \'1000010001\' # Example 3 assert longest_binary_gap(20) == 1 # Binary representation is \'10100\' # Example 4 assert longest_binary_gap(15) == 0 # Binary representation is \'1111\' # Example 5 assert longest_binary_gap(32) == 0 # Binary representation is \'100000\' ```","solution":"def longest_binary_gap(N: int) -> int: Returns the length of the longest binary gap within the binary representation of a positive integer N. # Convert the integer N to binary representation (removing the \'0b\' prefix) binary_representation = bin(N)[2:] # Initialize variables to track the longest gap and the current gap length longest_gap = 0 current_gap = 0 found_one = False # Iterate through the binary representation for char in binary_representation: if char == \'1\': # If current character is a \'1\', update longest_gap and reset current_gap if found_one and current_gap > longest_gap: longest_gap = current_gap current_gap = 0 found_one = True elif char == \'0\' and found_one: # If current character is a \'0\', increment current_gap current_gap += 1 return longest_gap"},{"question":"You are given two strings, A and B, each consisting of lowercase English letters. The task is to determine whether string B can be formed by rearranging the letters of string A and inserting exactly one additional character at any position in the rearranged string. Formally, you need to check if there is any character x such that after removing one occurrence of x from B, the remaining characters can be rearranged to match A. The first line contains the string A (1 ≤ |A| ≤ 10^5). The second line contains the string B (2 ≤ |B| ≤ 10^5). Print \\"YES\\" if it is possible to make string B by rearranging the letters of string A and adding exactly one character, otherwise print \\"NO\\". Example: Input: ``` abc abdc ``` Output: ``` YES ```","solution":"from collections import Counter def can_form_string_with_one_additional_char(A, B): Determines if B can be formed by rearranging the letters of A and adding one extra character. if len(B) != len(A) + 1: return \\"NO\\" count_A = Counter(A) count_B = Counter(B) difference = count_B - count_A if len(difference) == 1 and list(difference.values())[0] == 1: return \\"YES\\" else: return \\"NO\\" # Example function call print(can_form_string_with_one_additional_char(\\"abc\\", \\"abdc\\")) # Output: YES"},{"question":"A scientist is conducting an experiment with a sequence of n test tubes filled with various chemicals. Each test tube is assigned a unique label from 1 to n. During the experiment, some chemical reactions occur, and the chemicals could have spread between adjacent test tubes. After the reactions, the scientist suspects that the chemicals have possibly contaminated their adjacent test tubes, but he doesn\'t know the exact state now. He recalls that originally, the chemical in test tube i had a specific property value between c_i and d_i inclusive. He needs to determine whether it\'s possible to assign a unique property value to each test tube such that each value remains within its respective range [c_i, d_i] and also ensure that each test tube has a value distinct from its immediate neighbors (test tubes on either side). If it\'s possible, print YES, followed by the property values assigned to each test tube. Otherwise, print NO. If there are multiple solutions, print any one of them. The first line contains a single integer n (1 le n le 10^5) - the number of test tubes. The next n lines contain two integers c_i and d_i (1 le c_i le d_i le n) - the scientist\'s remembered property range for the i-th test tube. It is guaranteed that there is at least one valid assignment of property values. # Examples Input: ``` 3 1 2 2 3 1 1 ``` Output: ``` YES 1 3 2 ``` Input: ``` 2 1 2 1 2 ``` Output: ``` YES 1 2 ``` or ``` NO 1 2 2 1 ```","solution":"def assign_property_values(n, ranges): Assigns unique property values to each test tube within the specified ranges, ensuring each value remains within its respective range [c_i, d_i] and is distinct from immediate neighbors. :param n: Number of test tubes :param ranges: List of tuples containing (c_i, d_i) for each test tube :return: A tuple (status, values) where status is \'YES\' or \'NO\' and values is a list of assigned values # Initialize the list for the final assigned values result = [0] * n # Start with the smallest value within the range of the first test tube for i in range(n): ci, di = ranges[i] # Try to assign a value within the specified limits assigned = False for val in range(ci, di + 1): # Check if it doesn\'t conflict with the previous test tube\'s value if i == 0 or result[i - 1] != val: result[i] = val assigned = True break if not assigned: return \\"NO\\", [] return \\"YES\\", result # Example usage: # n = 3 # ranges = [(1, 2), (2, 3), (1, 1)] # print(assign_property_values(n, ranges))"},{"question":"You are given a string consisting only of uppercase English letters. Your task is to determine if you can rearrange the characters in the string so that no two adjacent characters are the same. You have to answer multiple independent test cases. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. The next t lines describe the test cases. Each test case is a single line containing a string s (1 le |s| le 100), where |s| is the length of the string. For each test case, print \\"YES\\" (without quotes) if it is possible to rearrange the characters to meet the condition, and \\"NO\\" otherwise. Example input: ``` 3 AABB AAAB ABAB ``` Example output: ``` YES NO YES ```","solution":"from collections import Counter def can_rearrange_no_adjacent(t, cases): results = [] for s in cases: char_count = Counter(s) max_freq = max(char_count.values()) if max_freq > (len(s) + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results def solve(input_data): input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) cases = input_lines[1:t+1] return can_rearrange_no_adjacent(t, cases)"},{"question":"You are tasked with building a simple shopping cart system for a supermarket. The cart allows you to add items, remove items, and calculate the total cost. Each item in the cart is represented by an item ID and a price. Implement the functionality to manage the cart. The following operations should be supported: 1. Add an item to the cart with a given item ID and price. 2. Remove an item from the cart using the item ID. 3. Calculate the total cost of all the items in the cart. Write a function `shopping_cart(operations)` that takes a list of strings representing operations. Each operation is either \\"add id price\\" to add an item, \\"remove id\\" to remove an item, or \\"total\\" to calculate the total cost. The function should return a list of results for each \\"total\\" operation in the order they were made. Example input: ```python operations = [ \\"add 1 10.99\\", \\"add 2 5.49\\", \\"total\\", \\"remove 1\\", \\"add 3 15.00\\", \\"total\\" ] ``` Example output: ```python [16.48, 20.49] ``` Constraints: - Prices are positive floating-point numbers rounded to two decimal places. - 1 ≤ number of operations ≤ 100 - Each item ID is a unique integer within the shopping cart.","solution":"def shopping_cart(operations): cart = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"add\\": item_id = int(parts[1]) price = float(parts[2]) cart[item_id] = price elif command == \\"remove\\": item_id = int(parts[1]) if item_id in cart: del cart[item_id] elif command == \\"total\\": total = sum(cart.values()) results.append(round(total, 2)) return results"},{"question":"Given an integer array `nums` of length `n` and an array `queries` of length `m`, where each element in `queries` is a pair of integers `[l, r]` representing a query range `[l, r]` (1-indexed). The task is to determine, for each query, the number of unique integers in the range `nums[l]` to `nums[r]` inclusive. The problem statement requires an efficient solution to handle up to `100,000` queries on `nums` with length up to `100,000`. # Input - First line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000), representing the length of the `nums` array and the number of queries, respectively. - Second line contains `n` integers representing the array `nums` (1 ≤ nums[i] ≤ 1,000,000). - Next `m` lines contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n) representing the query range `[l, r]`. # Output - For each query, output the number of unique integers in the range `[l, r]` inclusive. # Example **Input:** ``` 5 3 1 2 1 3 4 1 3 2 4 1 5 ``` **Output:** ``` 2 3 4 ``` **Explanation:** 1. For the first query range `[1, 3]`, the unique integers are `{1, 2}`. 2. For the second query range `[2, 4]`, the unique integers are `{2, 1, 3}`. 3. For the third query range `[1, 5]`, the unique integers are `{1, 2, 3, 4}`. # Note: - The solution must handle large inputs efficiently. - Consider optimization techniques like Mo\'s algorithm or segment trees for range queries.","solution":"def unique_integers_in_range(n, m, nums, queries): This function takes in: - An integer n representing the length of the nums array. - An integer m representing the number of queries. - A list of integers nums representing the array. - A list of pair of integers queries, where each pair [l, r] represents a query range. It returns a list of integers where each integer represents the number of unique integers in the corresponding query range. from collections import defaultdict # Results to be returned results = [] # Mega Data Structures unique_count = defaultdict(int) frequency = defaultdict(int) # Initialize the Mo\'s algorithm data structures current_l, current_r, current_unique_count = 0, 0, 0 def add(x): nonlocal current_unique_count frequency[x] += 1 if frequency[x] == 1: current_unique_count += 1 def remove(x): nonlocal current_unique_count if frequency[x] == 1: current_unique_count -= 1 frequency[x] -= 1 queries = [(l-1, r-1, i) for i, (l, r) in enumerate(queries)] # Mo\'s algorithm magic (Square Root Decomposition) block_size = int(n ** 0.5) queries.sort(key=lambda x: (x[0] // block_size, x[1] if (x[0] // block_size) % 2 == 0 else -x[1])) for l, r, idx in queries: while current_r <= r: add(nums[current_r]) current_r += 1 while current_r > r + 1: current_r -= 1 remove(nums[current_r]) while current_l < l: remove(nums[current_l]) current_l += 1 while current_l > l: current_l -= 1 add(nums[current_l]) results.append((current_unique_count, idx)) results.sort(key=lambda x: x[1]) return [res[0] for res in results]"},{"question":"You are given a number of test cases. For each test case, you are given a positive integer n, and you are required to partition the integer n into two non-negative integers a and b such that a + b = n, and the product of the individual digits of a and b is maximized. The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The only line of each test case contains a single integer n (1 ≤ n ≤ 10^9). For each test case, you should print two non-negative integers a and b such that: 1. a + b = n 2. The product of digits of a and b is maximized. If there are multiple solutions, you may print any. Example: ``` Input: 3 10 25 99 Output: 1 9 2 3 45 54 ``` Explanation: In the first test case, for n=10, the possible partitions (a, b) could be (1, 9), (2, 8), (3, 7), etc. Among these, the maximum product of digits is 9 (from 1 × 9). In the second test case, for n=25, the possible partitions (a, b) could be (12, 13), (10, 15), etc. Among these, the maximum product of digits is 6 (from 2 × 3). In the third test case, for n=99, the possible partitions (a, b) could be (45, 54), (49, 50), etc. Among these, the maximum product of digits is 81 (from 9 × 9).","solution":"def partition_and_maximize_product(t, test_cases): results = [] for n in test_cases: a = n // 2 b = n - a results.append((a, b)) return results"},{"question":"A university campus is represented as a grid of M x N cells. Each cell can either be empty or have a building. You start at the top-left corner of the grid (0, 0) and need to reach the bottom-right corner (M-1, N-1). You can only move right or down through the grid, but you cannot pass through cells with buildings. Write a function to determine the number of distinct paths from the top-left corner to the bottom-right corner. If there is no path, return 0. The first line of input contains two integers M and N (1 ≤ M, N ≤ 100) - representing the number of rows and columns in the grid, respectively. The next M lines contain N integers each (either 0 or 1), representing the grid. A 1 signifies a building and a 0 signifies an empty cell. Output a single integer — the number of distinct paths from (0, 0) to (M-1, N-1). Example: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Explanation: There are two paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 M = len(grid) N = len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # Start point # Initialize first row for j in range(1, N): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Initialize first column for i in range(1, M): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] for i in range(1, M): for j in range(1, N): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[M-1][N-1]"},{"question":"A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". Your task is to modify a given string so that it contains the longest possible palindrome as a subsequence. You need to remove some characters from the given string to achieve this. Note that the order of characters should be preserved, but the length of the resulting palindromic subsequence should be maximized. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 200) — the string for which you need to find the longest palindromic subsequence. For each test case, output the length of the longest palindromic subsequence in the given string. # Example **Input:** ``` 3 abcbca aabcdcb abcde ``` **Output:** ``` 5 5 1 ``` # Explanation - In the first test case, the string \\"abcbca\\" has \\"abca\\" or \\"bcb\\" as the longest palindromic subsequence of length 5. - In the second test case, the string \\"aabcdcb\\" has \\"abcba\\" or \\"bcdcb\\" as the longest palindromic subsequence of length 5. - In the third test case, the string \\"abcde\\" has \\"a\\", \\"b\\", \\"c\\", \\"d\\", or \\"e\\" as the longest palindromic subsequence of length 1.","solution":"def longest_palindromic_subseq_length(s): n = len(s) dp = [[0]*n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def longest_palindromic_subsequences(t, strings): results = [] for s in strings: results.append(longest_palindromic_subseq_length(s)) return results"},{"question":"A rectangular matrix is given with n rows and m columns. The matrix contains only binary values (0 or 1). Your task is to find the largest rectangle containing only 1\'s and return its area. # Input format - The first line contains two integers n and m (1 le n, m le 2000), the dimensions of the matrix. - The next n lines contain m characters (0 or 1), representing the matrix. # Output format - Print one integer, the area of the largest rectangle containing only 1\'s. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ```","solution":"def maximal_rectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) heights = [0] * m max_area = 0 for row in matrix: for i in range(m): if row[i] == \'1\': heights[i] += 1 else: heights[i] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): stack = [] max_area = 0 heights.append(0) # Add a zero to make sure all elements are processed for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Restore the original list return max_area"},{"question":"You are given an initially empty list of integers. You need to perform a series of operations on this list. There are three types of operations: 1. Add a given integer to the list. 2. Remove all occurrences of a given integer from the list. 3. Query the list to find out how many distinct integers are currently in the list. You will be given a sequence of these operations and should output the result of each query operation. The format for the input is as follows: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of operations to be performed. Each of the next n lines contains an operation in one of the following formats: - \\"1 x\\": Add the integer x (1 ≤ x ≤ 10^9) to the list. - \\"2 x\\": Remove all occurrences of the integer x (1 ≤ x ≤ 10^9) from the list. - \\"3\\": Query the number of distinct integers in the list. For each query operation, print the result on a new line. # Function Signature **def process_operations(n: int, operations: List[str]) -> List[int]:** # Sample Input ```python 5 1 5 1 10 1 5 3 2 5 3 ``` # Sample Output ```python 2 1 ```","solution":"def process_operations(n, operations): Processes a list of operations on an initially empty list of integers and returns the results of query operations. n: int - the number of operations operations: List[str] - a list of operations in the format specified Returns a list of integers which are the results of the query operations. distinct_numbers = set() output = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: number = int(parts[1]) distinct_numbers.add(number) elif op_type == 2: number = int(parts[1]) if number in distinct_numbers: distinct_numbers.remove(number) elif op_type == 3: output.append(len(distinct_numbers)) return output"},{"question":"In the kingdom of Algorithmia, there is a circular city with houses built exactly on the circumference of a circle. The city\'s center is at the origin (0, 0) and the radius of the circle is R. The houses are evenly distributed along the circumference, and each house has a unique integer address in the range from 1 to N. The positions of the houses can be calculated using the polar coordinates, where the angle θ for the i-th house is calculated as follows: theta_i = 2pi frac{i-1}{N} Each house can be represented in Cartesian coordinates as: (x_i, y_i) = (R cos(theta_i), R sin(theta_i)) The kingdom is planning a grand festival and wants to set up a central tent at a point on the circle. The location of the tent should be equidistant from all houses in terms of the angle between them (i.e., the tent should be at one of the house locations). Write a program to find the house address (house number) that can act as the optimal location for the tent, ensuring that the sum of the angles between the tent and all houses is minimized. # Input The first line contains two integers N and R (3 leq N leq 10^5, 1 leq R leq 10^6) — the number of houses and the radius of the circle, respectively. # Output Print a single integer — the address of the house that is the optimal location for the tent. # Example **Input:** ``` 5 2 ``` **Output:** ``` 1 ``` **Explanation:** In a circle with 5 houses and radius 2, all houses are located at equidistant angles. Any house, such as the house with address 1, can be selected as the optimal location for the tent because all houses are evenly distributed and the circle is symmetrical. **Note:** If there are multiple valid positions, output any of them.","solution":"def optimal_tent_location(N, R): Returns the optimal house address for the tent location. # In a perfectly symmetrical circular city, any house can be optimal # for setting up the tent as distances and angle between any houses # will remain the same due to symmetry. return 1"},{"question":"Tom, a farmer, wants to organize his farm which is divided into a grid of cells. Each cell can either contain a crop or be empty. Tom is particularly interested in finding the largest square area within the grid that contains only crops. Write a program that takes the dimensions of the grid and the grid itself, and returns the area of the largest square containing only crops. Input: - The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 1000), the number of rows and columns in the grid, respectively. - The next `m` lines each contain `n` characters, where each character is either `C` (representing a crop) or `E` (representing an empty cell). Output: - Print the area of the largest square that consists only of crops. Example 1: ``` Input: 5 6 CCCCEE CCCCCC CCCCCC EECCCC EEEEEE Output: 9 ``` Example 2: ``` Input: 3 3 CCE CEC EEC Output: 1 ``` Explanation: In Example 1, the largest square containing only crops is a 3x3 square (area = 9). In Example 2, the largest square containing only crops is a single cell (area = 1).","solution":"def largest_crop_square(m, n, grid): dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if grid[i][j] == \'C\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"You are given a tree with n vertices rooted at vertex 1. For every vertex, if it has children, it will be denoted by a list of its children’s indices. You need to calculate the size of the subtree for each vertex. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of vertices in the tree. Then, n-1 lines follow. Each line contains two integers u and v (1 ≤ u, v ≤ n) — indicating there is an edge between vertex u and vertex v. Print n integers in a single line where the i-th integer is the size of the subtree rooted at vertex i. Example: Input: 7 1 2 1 3 2 4 2 5 3 6 3 7 Output: 7 3 3 1 1 1 1 Explanation: - Vertex 1: Whole tree; size = 7 vertices. - Vertex 2: Subtree rooted at vertex 2 includes vertices [2, 4, 5]; size = 3. - Vertex 3: Subtree rooted at vertex 3 includes vertices [3, 6, 7]; size = 3. - Vertex 4: Single vertex itself; size = 1. - Vertex 5: Single vertex itself; size = 1. - Vertex 6: Single vertex itself; size = 1. - Vertex 7: Single vertex itself; size = 1.","solution":"from collections import defaultdict def calculate_subtree_sizes(n, edges): def dfs(node, parent): size = 1 for neighbor in tree[node]: if neighbor != parent: size += dfs(neighbor, node) subtree_sizes[node] = size return size tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) subtree_sizes = [0] * (n + 1) dfs(1, -1) return subtree_sizes[1:] # Example usage: edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)] print(calculate_subtree_sizes(7, edges)) # Output: [7, 3, 3, 1, 1, 1, 1]"},{"question":"You are given a list of q queries, each requiring you to process a string and determine if it follows a certain arrangement of letters. For each query string s, you must check if it can be rearranged to form a palindromic string. A string is a palindrome if it reads the same forwards and backwards. To determine this, each character should appear an even number of times, with the possible exception of one character that may appear an odd number of times (for the middle character in odd-length palindromic strings). Your task is to write a program that reads the input and for each query, prints \\"YES\\" if the query string can be rearranged to form a palindrome, and \\"NO\\" otherwise. The input format is as follows: - The first line contains a single integer q (1 ≤ q ≤ 100) — the number of queries. - The next q lines contain one string each. Each string consists of lowercase English letters and has length between 1 and 100, inclusive. The output should consist of exactly q lines, each being \\"YES\\" or \\"NO\\" corresponding to each query. Example: Input: 4 aabb racecar abcdefgh cdcd Output: YES YES NO YES Note: - In the first query, the string \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\". - In the second query, the string \\"racecar\\" is already a palindrome. - In the third query, the string \\"abcdefgh\\" cannot be rearranged to form a palindrome. - In the fourth query, the string \\"cdcd\\" can be rearranged to form \\"cddc\\".","solution":"def can_form_palindrome(s): Determines if the input string s can be rearranged to form a palindrome. Returns \\"YES\\" if possible, otherwise returns \\"NO\\". from collections import Counter # Count the occurrence of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_occurrences = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd number of occurrences return \\"YES\\" if odd_occurrences <= 1 else \\"NO\\" def process_queries(queries): Given a list of query strings, returns a list of \\"YES\\" or \\"NO\\" for each query based on whether the string can be rearranged to form a palindrome. return [can_form_palindrome(query) for query in queries]"},{"question":"In a magical forest, there are n uniquely colored trees standing in a row, and each tree has a unique height. Each tree is represented by its height ( h ) and color ( c ). Your task is to answer q queries of the following kind: Given two indices ( l ) and ( r ) (1 ≤ ( l ) ≤ ( r ) ≤ ( n )), find the tree within the range [l, r] with the maximum height. If there are multiple trees with the maximum height, among them, select the tree with the smallest color value and return its color. The first line of the input contains two integers ( n ) and ( q ) (1 ≤ ( n, q ) ≤ 100,000) — the number of trees and the number of queries respectively. The second line contains ( n ) integers ( h_i ) (1 ≤ ( h_i ) ≤ 1,000,000) — the heights of the trees. The third line contains ( n ) integers ( c_i ) (1 ≤ ( c_i ) ≤ 1,000,000) — the colors of the trees. Each of the following ( q ) lines contains two integers ( l ) and ( r ) — the indices defining the query range. Output ( q ) lines, each containing the color of the required tree for the corresponding query. # Example: Input: ``` 5 3 3 5 2 5 1 4 3 6 2 5 1 3 2 4 1 5 ``` Output: ``` 4 3 2 ``` # Explanation: For the first query, the trees within the range [1, 3] have heights [3, 5, 2]. The maximum height is 5 and the corresponding color is 3. For the second query, the trees within the range [2, 4] have heights [5, 2, 5]. The maximum height is 5 and the corresponding colors are 3 and 2. The smallest color among [3, 2] is 2. For the third query, the trees within the range [1, 5] have heights [3, 5, 2, 5, 1]. The maximum height is 5 and the corresponding colors are 3 and 2. The smallest color among [3, 2] is 2.","solution":"def find_max_height_color(n, q, heights, colors, queries): results = [] for l, r in queries: max_height = -1 min_color = float(\'inf\') for i in range(l-1, r): if heights[i] > max_height: max_height = heights[i] min_color = colors[i] elif heights[i] == max_height: if colors[i] < min_color: min_color = colors[i] results.append(min_color) return results"},{"question":"You are given a 2D grid of size m x n representing a map where \'1\' represents land and \'0\' represents water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function that, given this grid, returns the number of islands. Example 1: Input: [ [\'1\',\'1\',\'1\',\'1\',\'0\'], [\'1\',\'1\',\'0\',\'1\',\'0\'], [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'0\',\'0\',\'0\',\'0\',\'0\'] ] Output: 1 Example 2: Input: [ [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'0\',\'0\',\'1\',\'0\',\'0\'], [\'0\',\'0\',\'0\',\'1\',\'1\'] ] Output: 3 Constraints: - m == grid.length - n == grid[0].length - 1 <= m, n <= 300 - grid[i][j] is \'0\' or \'1\'","solution":"def numIslands(grid): Given a 2D grid of \'1\'s (land) and \'0\'s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. def dfs(grid, r, c): grid[r][c] = \'0\' for x, y in [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]: if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == \'1\': dfs(grid, x, y) if not grid: return 0 count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'1\': count += 1 dfs(grid, r, c) return count"},{"question":"You are given a rectangular grid of size n times m consisting only of asterisks \'*\' and periods (dots) \'.\' and a single string t consisting of lowercase English letters. Rows of the grid are numbered from 1 to n, columns are numbered from 1 to m. Your task is to find one way to place the string t on the grid such that all the characters of the string, concatenated in the order provided, fit into horizontally, vertically, or diagonally (in any of the four possible directions) adjacent cells of the grid (including wrapping around edges if needed). The string t must not intersect any asterisks \'*\' in the grid and should only be placed on \'.\' cells. The characters of the string should be placed consecutively and must not skip any cells. If it is impossible to place the string t in the grid, print \\"-1\\". Otherwise, print the positions of the string t placement in the grid. Each position should be represented by two integers p_i, q_i denoting the row number and column number where the i-th character of the string t is placed. The first line of the input contains two integers n and m (3 le n, m le 100) — the sizes of the given grid. The next n lines contain m characters each, the i-th line describes the i-th row of the grid. It is guaranteed that the grid consists of characters \'*\' and \'.\' only. The last line of the input contains a string t (1 le |t| le n times m) — the string you need to place on the grid. If it is possible to place the string, output a total of |t| lines. Each line should contain two integers p_i and q_i - the coordinates of the i-th character of the string on the grid. If there are multiple solutions, output any one of them. If it is impossible, print \\"-1\\". Example: ```plaintext Input: 4 5 ..... ..*.. ..... ..... hello Output: 1 1 1 2 1 3 1 4 1 5 ```","solution":"def find_string_placement(n, m, grid, t): directions = [ (1, 0), (0, 1), (1, 1), (1, -1), # Down, Right, Diagonal Down-Right, Diagonal Down-Left (-1, 0), (0, -1), (-1, -1), (-1, 1) # Up, Left, Diagonal Up-Left, Diagonal Up-Right ] def is_valid_position(positions): for pi, pj in positions: if grid[pi][pj] == \'*\': return False return True for i in range(n): for j in range(m): if grid[i][j] == \'.\': for di, dj in directions: positions = [] for k in range(len(t)): ni = (i + k * di) % n nj = (j + k * dj) % m positions.append((ni, nj)) if is_valid_position(positions): result = [(pi + 1, pj + 1) for pi, pj in positions] return result return -1"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains a positive integer representing the height of the cell. Your task is to calculate the size of the largest plateau in the grid. A plateau is defined as a collection of connected cells that have the same height. Two cells are connected if they share a common edge (horizontal or vertical). Input Description: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. - The next n lines each contain m integers, describing the heights of the cells in the grid. All the heights are positive integers not greater than 1000. Output Description: - Print a single integer, the size of the largest plateau in the grid. Example: ``` Input 3 3 1 2 3 3 3 3 2 2 2 Output 4 ``` Explanation: In the given example, the largest plateau of connected cells with the same height is composed of cells with height 3, located at positions (1, 2), (2, 1), (2, 2), and (2, 3), and it has a size of 4.","solution":"def largest_plateau(grid, n, m): Returns the size of the largest plateau in the grid. A plateau is a collection of connected cells that have the same height. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y, height): return 0 <= x < n and 0 <= y < m and grid[x][y] == height and not visited[x][y] def bfs(x, y): queue = [(x, y)] visited[x][y] = True height = grid[x][y] size = 0 while queue: cx, cy = queue.pop(0) size += 1 for dir_x, dir_y in directions: nx, ny = cx + dir_x, cy + dir_y if is_valid(nx, ny, height): queue.append((nx, ny)) visited[nx][ny] = True return size visited = [[False] * m for _ in range(n)] largest = 0 for i in range(n): for j in range(m): if not visited[i][j]: largest = max(largest, bfs(i, j)) return largest"},{"question":"A transportation company manages a network of bus routes between cities. They want to create a system that can help them find the shortest path between any two given cities. The cities are represented as nodes, and bus routes as edges with assigned travel times. Write a program to find the shortest path between two cities in the network. The program should input the number of cities `n` (2 ≤ n ≤ 100) and the number of bus routes `m` (1 ≤ m ≤ n*(n-1)/2). Each of the next `m` lines describes a bus route with three integers `u`, `v`, and `w` - where `u` and `v` are the cities connected by the route (1 ≤ u, v ≤ n, u ≠ v) and `w` is the travel time between them (1 ≤ w ≤ 100). After the description of routes, two integers `start` and `end` will be given, representing the cities (1 ≤ start, end ≤ n). The program should print the shortest travel time between `start` and `end`. If there is no path between the two cities, print \\"-1\\". Input format: - The first line contains two integers, `n` and `m`. - The next `m` lines each contain three integers `u`, `v`, and `w`, describing a bus route. - The last line contains two integers `start` and `end`. Example: Input: ``` 4 4 1 2 1 2 3 2 3 4 1 1 4 4 1 3 ``` Output: ``` 3 ``` In this example, there are 4 cities and 4 bus routes. The shortest path from city 1 to city 3 is through city 2, with a total travel time of 3.","solution":"import heapq def find_shortest_path(n, m, routes, start, end): Finds the shortest path between start and end using Dijkstra\'s algorithm. Parameters: n (int): Number of cities m (int): Number of bus routes routes (list of tuples): List of routes described by tuples (u, v, w) start (int): Starting city end (int): Destination city Returns: int: Shortest travel time between start and end; -1 if no path exists # Create a graph from the routes graph = {i: [] for i in range(1, n + 1)} for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm min_heap = [(0, start)] shortest_paths = {i: float(\'inf\') for i in range(1, n + 1)} shortest_paths[start] = 0 while min_heap: current_time, current_city = heapq.heappop(min_heap) if current_city == end: return current_time for neighbor, travel_time in graph[current_city]: time = current_time + travel_time if time < shortest_paths[neighbor]: shortest_paths[neighbor] = time heapq.heappush(min_heap, (time, neighbor)) return -1 if shortest_paths[end] == float(\'inf\') else shortest_paths[end]"},{"question":"You are given a list of `n` logs entries from a distributed system. Each log entry is a string in one of the following two formats: 1. \\"id1: event_description\\" 2. \\"id2: event_description\\" Where: - `id1` and `id2` are unique alphanumeric identifiers of the format consisting of lowercase English letters or digits (no spaces), up to 15 characters in length. - `event_description` is a string that describes an event and can contain letters, digits, spaces, and special characters, up to 100 characters in length. At the end of the log entries, you are given a list of commands to retrieve certain logs or perform some operations related to the logs. There are three types of commands: 1. `FILTER id_prefix` - Filters and returns all log entries that start with the given `id_prefix`. 2. `COUNT substring` - Counts the number of log entries that contain the specified substring in their event description. 3. `UNIQUE` - Returns a unique list of all event descriptions that are present in the logs in the order they appeared. Write a function that processes the logs according to the given commands. The input format is as follows: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of log entries. - Each of the next `n` lines contains a single log entry. - The next line contains an integer `m` (1 ≤ m ≤ 100), the number of commands. - Each of the next `m` lines contains a single command. Output the results for each command in the order they appear. Example: Input: ``` 4 123: Login successful abc123: User updated profile xyz456: Error while processing request ab123: User logged out 3 FILTER abc COUNT User UNIQUE ``` Output: ``` abc123: User updated profile 2 Login successful User updated profile Error while processing request User logged out ``` Constraints: - The log entries and commands preserve their order. - There are no duplicate log entries, and log identifiers are unique. - Substring filtering in `COUNT` command is case-sensitive. - Log entries may contain leading or trailing spaces, which should be trimmed before processing.","solution":"def process_logs(logs, commands): Processes the logs according to the given commands. :param logs: List of log entries. :param commands: List of commands to process the logs. :return: List of command results. results = [] # Trim the logs to remove leading/trailing spaces logs = [log.strip() for log in logs] for command in commands: command_parts = command.split(maxsplit=1) cmd_type = command_parts[0] if cmd_type == \\"FILTER\\": id_prefix = command_parts[1] filtered_logs = [log for log in logs if log.startswith(id_prefix)] results.extend(filtered_logs) elif cmd_type == \\"COUNT\\": substring = command_parts[1] count = sum(substring in log.split(\':\', 1)[1] for log in logs) results.append(count) elif cmd_type == \\"UNIQUE\\": seen = set() unique_descriptions = [] for log in logs: description = log.split(\':\', 1)[1].strip() if description not in seen: seen.add(description) unique_descriptions.append(description) results.extend(unique_descriptions) return results"},{"question":"A group of students is involved in a game where they pass a token among themselves. The students are sitting in a circular manner and are numbered from 1 to n. The game starts with the student numbered 1 holding the token. In each turn, the student holding the token passes it to the student seated next to them (either clockwise or counterclockwise). After m turns, we want to determine which student will have the token. The input consists of two integers: - n (2 ≤ n ≤ 10^5): the number of students. - m (-10^9 ≤ m ≤ 10^9): the number of turns (positive for clockwise and negative for counterclockwise). You have to output the number of the student who will have the token after m turns. For example, for the input: ``` 5 2 ``` the output should be: ``` 3 ``` This is because the token goes from student 1 to student 2 and then to student 3 in two turns. Another example, for the input: ``` 7 -3 ``` the output should be: ``` 5 ``` Here, the token goes from student 1 to student 7, then to student 6, and finally to student 5 in three counterclockwise turns.","solution":"def determine_token_holder(n, m): Determine the student who will have the token after m turns. :param n: Number of students (2 ≤ n ≤ 10^5) :param m: Number of turns (-10^9 ≤ m ≤ 10^9) :return: Student number holding the token after m turns. starting_position = 1 final_position = (starting_position - 1 + m) % n return final_position + 1"},{"question":"A company manages various types of projects, and each project is assigned an importance level. As time passes, some projects become redundant or less important, and their priority may need to be changed. To keep track of priorities, projects are assigned levels from 1 to n, where 1 represents the highest priority and n the lowest. Some importance levels might be missing, and some projects might have duplicate or invalid priority levels. Your task is to correct the priority levels such that it forms a sequence from 1 to n again with minimum changes. You are given information about the current priority levels for n projects. Adjust the priority levels so that they form a permutation of numbers from 1 to n as closely as possible, changing as few priority levels as possible. If there are multiple possible answers, you may print any of them. * The first line contains a single integer n — the number of projects (1 ≤ n ≤ 10⁵). * The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10⁵) — the initial priority levels of the projects. Output n integers representing the corrected priority levels of the projects in the order they appear in the input. Ensure that the output is a permutation of numbers from 1 to n. **Example:** **Input:** ``` 5 5 3 3 3 1 ``` **Output:** ``` 5 3 2 4 1 ``` **Explanation:** In this case, the given priority levels are 5, 3, 3, 3, 1. We need to change two of the duplicate 3\'s to 2 and 4 to make a sequence from 1 to 5.","solution":"def correct_priorities(n, priorities): Corrects the priority levels such that they form a permutation of numbers from 1 to n. Parameters: n (int): The number of projects priorities (list): The initial priority levels of the projects Returns: list: The corrected priority levels correct_set = set(range(1, n + 1)) current_set = set(priorities) missing = list(correct_set - current_set) duplicates = [p for p in priorities if priorities.count(p) > 1] result = [] duplicate_seen = set() missing_ptr = 0 for priority in priorities: if priorities.count(priority) == 1: result.append(priority) else: if priority not in duplicate_seen: result.append(priority) duplicate_seen.add(priority) else: result.append(missing[missing_ptr]) missing_ptr += 1 return result"},{"question":"You are given a rectangular grid consisting of cells, each with a certain cost associated with entering it. This grid represents a map, and you need to navigate from the top-left corner to the bottom-right corner of the grid. You can move in four possible directions: up, down, left, or right, but you cannot move diagonally. Given the grid, your task is to determine the minimum cost to travel from the top-left corner of the grid to the bottom-right corner. # Input The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, representing the cost of entering each cell in the grid. The cost c_{i,j} (0 le c_{i,j} le 1000) is the cost of entering the cell in the i-th row and j-th column. # Output Print a single integer — the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` Explanation One possible path with the minimum cost is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2). The cost of this path is 1 + 3 + 1 + 1 + 1 = 7. # Note To solve this problem, consider using a shortest path algorithm suitable for grids, such as Dijkstra’s algorithm with a priority queue.","solution":"import heapq def min_cost_to_travel(grid): n = len(grid) m = len(grid[0]) # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Priority queue for Dijkstra\'s algorithm pq = [(grid[0][0], 0, 0)] # (cost, row, column) costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] while pq: current_cost, x, y = heapq.heappop(pq) if (x, y) == (n-1, m-1): return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return costs[n-1][m-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_cost_to_travel(grid)) # Output: 7"},{"question":"Given a large dataset of web server logs, you are tasked with finding the most frequently visited webpage. The log entries are in the format: ``` timestamp userID webpageURL ``` The `timestamp` is a string in the format \\"YYYY-MM-DDTHH:MM:SS\\". The `userID` is an alphanumeric string representing a unique user. The `webpageURL` is the URL of the accessed webpage. Your goal is to write a program that reads the log entries and finds the webpage that has been visited the most times. If there are multiple webpages with the same highest number of visits, return any one of them. # Input The input is as follows: - The first line contains an integer `n` (1 ≤ n ≤ 10^6) — the number of log entries. - The next `n` lines each contain a log entry in the format \\"timestamp userID webpageURL\\". # Output Print a single line containing the URL of the most frequently visited webpage. # Example Input ``` 5 2023-07-16T20:20:30 user1 http://example.com/page1 2023-07-16T20:21:45 user2 http://example.com/page2 2023-07-16T20:22:56 user3 http://example.com/page1 2023-07-16T20:23:59 user2 http://example.com/page1 2023-07-16T20:24:01 user1 http://example.com/page3 ``` Output ``` http://example.com/page1 ```","solution":"from collections import Counter import sys def most_frequent_webpage(n, logs): Finds the most frequently visited webpage from the logs. Args: n (int): number of log entries. logs (list of str): log entries. Returns: str: the webpage URL most frequently visited. webpage_counter = Counter() for log in logs: _, _, webpageURL = log.split() webpage_counter[webpageURL] += 1 # Find the most common webpage most_common_webpage = webpage_counter.most_common(1)[0][0] return most_common_webpage"},{"question":"Create a function that takes a list of integers and returns another list which contains the square of every number present in the input list, but only if the square is an even number. Your function should accept a list of integers as input, calculate the square of each number, and return a list containing only the squares that are even. For example, if the input list is `[1, 2, 3, 4, 5]`, then the output list should be `[4, 16]` because: - The square of 1 is 1 (which is odd, so it is not included in the result list). - The square of 2 is 4 (which is even, so it is included). - The square of 3 is 9 (which is odd, so it is not included). - The square of 4 is 16 (which is even, so it is included). - The square of 5 is 25 (which is odd, so it is not included). **Function Signature:** ```python def even_squares(numbers: List[int]) -> List[int]: ``` **Input:** - `numbers`: A list of integers of length n (1 ≤ n ≤ 1000), where each integer is in the range -1000 ≤ number ≤ 1000. **Output:** - A list of integers, containing the squares of the even numbers from the input list. **Example: ** ```python assert even_squares([1, 2, 3, 4, 5]) == [4, 16] assert even_squares([-2, -1, 0, 1, 2]) == [4, 0, 4] ``` Your function should be efficient and handle both positive and negative numbers correctly.","solution":"from typing import List def even_squares(numbers: List[int]) -> List[int]: This function takes a list of integers and returns a list of squares of those integers, but only if the square is even. result = [] for number in numbers: square = number ** 2 if square % 2 == 0: result.append(square) return result"},{"question":"# **Problem Statement: Farmer\'s Fieldwork** Farmer Joe wants to optimize the irrigation system for his farm fields. He has `n` rectangular fields, each defined by four corners such that the sides are parallel to the coordinate axes. Initially, each corner of a rectangular field is placed at some position `(xi, yi)` in the Cartesian plane. Farmer Joe wants to rotate some fields to make them stand upright, i.e., such that the sides are aligned along the x and y-axes. Each field can be rotated 90 degrees counter-clockwise about its geometric center. Rotating a field changes the position of each corner accordingly. Note that the geometric center of a field with corners at `(x1, y1)`, `(x2, y2)`, `(x3, y3)`, `(x4, y4)` is given by: ``` (cx, cy) = ((x1 + x2 + x3 + x4) / 4, (y1 + y2 + y3 + y4) / 4) ``` Help Farmer Joe determine the minimal number of 90-degree rotations required for each field to align with the coordinate axes. The first line contains one integer `n` (1 ≤ n ≤ 100), the number of rectangular fields. The next `4n` lines contain four integers `xi, yi` (-104 ≤ `xi`, `yi` ≤ 104) each, representing one of the corners of a field. Print `n` lines to the standard output. For each field print the minimal number of required rotations to make the field upright. If it\'s already upright, print `0`. If the field cannot be made upright, print `-1`. # Example Input: ``` 2 0 0 1 0 1 1 0 1 0 0 2 1 3 4 -1 3 ``` Output: ``` 0 -1 ``` # Explanation: - For the first rectangle, it is already upright, so the output is `0`. - For the second rectangle, it cannot be made upright by rotating 90 degrees, so the output is `-1`.","solution":"def min_rotations_to_upright(fields): results = [] for field in fields: x_coords = [field[i][0] for i in range(4)] y_coords = [field[i][1] for i in range(4)] intersections_x = len(set(x_coords)) intersections_y = len(set(y_coords)) if intersections_x == 2 and intersections_y == 2: results.append(0) else: results.append(-1) return results"},{"question":"Maria loves reading books. She recently visited her local library and borrowed n books. The library has a policy that every book is assigned a unique ID number from 1 to n. Maria likes to read books in a specific order, starting from book 1, then book 2, and so on, until she reads book n. However, with her busy schedule, she sometimes cannot read books every day. For each book, Maria knows the number of days it took her to finish reading it. Given the number of days it took Maria to finish reading each book, starting from the first book to the last, determine the day when Maria started reading each book. The first line contains an integer n (1 ≤ n ≤ 20). The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 50) — the number of days it took Maria to finish reading each book. Print n integers, where the i-th integer represents the day when Maria started reading the i-th book. In the first sample Maria takes 1 day to finish the first book, 2 days to finish the second book, and 1 day to finish the third book. - She starts the first book on day 1. - She starts the second book on day 2 (right after finishing the first). - She starts the third book on day 4 (she took 2 days for the second book). In the second sample Maria takes 2 days to finish the first book and 3 days to finish the second book. - She starts the first book on day 1. - She starts the second book on day 3 (right after finishing the first).","solution":"def find_start_days(n, days): Determines the start day for each book given the number of books and the days taken to finish each book. Args: n (int): The number of books. days (list of int): A list where each element represents the days taken to finish each book. Returns: list of int: A list where each element represents the start day for each book. start_days = [] current_day = 1 # Maria starts reading on the first day for d in days: start_days.append(current_day) current_day += d # Update the current day to the next starting day return start_days"},{"question":"You are given a permutation of n unique integers where n is odd (1 ≤ n ≤ 100). Your task is to partition these n integers into two parts such that the absolute difference of their sums is minimized. The output should be a single integer — the minimum possible absolute difference between the sums of the two partitions. **Input:** The first line contains an integer n. The second line contains n unique integers separated by space. **Output:** Output a single integer — the minimum possible absolute difference between the sums of the two partitions. **Example:** ``` Input: 5 3 1 4 2 5 Output: 1 ``` **Explanation:** One possible partition is {3, 1, 5} and {4, 2} with sums 9 and 6. The absolute difference is |9 - 6| = 3. Another partition is {3, 1, 2} and {5, 4} with sums 6 and 9. The absolute difference is |6 - 9| = 3. The optimal partition in this case is {3, 1, 5} and {4, 2} with the minimum absolute difference of 1.","solution":"def partition_min_difference(n, nums): def find_min_difference(index, current_sum): if index == n: return abs(total_sum - 2 * current_sum) if (index, current_sum) in memo: return memo[(index, current_sum)] include = find_min_difference(index + 1, current_sum + nums[index]) exclude = find_min_difference(index + 1, current_sum) memo[(index, current_sum)] = min(include, exclude) return memo[(index, current_sum)] total_sum = sum(nums) memo = {} return find_min_difference(0, 0)"},{"question":"In a faraway land, there is a mysterious forest called the Enchanted Woods. The forest is home to many magical creatures, including unicorns, which are known for their powerful magic that can only be activated when they stand in a specific pattern on a special grid. The grid is an n x m rectangular field divided into n rows and m columns. Each cell of the grid can either be occupied by a unicorn or remain empty. The magical pattern that activates the unicorns\' power requires that no two unicorns are in the same row or the same column. Your task is to calculate the maximum number of unicorns that can be placed on the grid such that no two unicorns are in the same row or the same column. Input The single line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the grid. Output Print a single integer representing the maximum number of unicorns that can be placed on the grid following the given restrictions. Example Input: 3 5 Output: 3 Input: 1 10 Output: 1 Input: 6 6 Output: 6","solution":"def max_unicorns(n, m): Returns the maximum number of unicorns that can be placed on an n x m grid such that no two unicorns are in the same row or the same column. return min(n, m)"},{"question":"You are given a list of integers. Write a program that finds the length of the longest contiguous subarray where all elements are equal. For example, consider the array [1, 1, 2, 2, 2, 3, 3, 3, 3]. The longest contiguous subarray where all elements are equal is [3, 3, 3, 3]. The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n space-separated integers — the elements of the list, each integer is between 1 and 10^9. Output a single integer — the length of the longest contiguous subarray where all elements are equal. Example: ``` Input: 9 1 1 2 2 2 3 3 3 3 Output: 4 ```","solution":"def longest_contiguous_equal_subarray_length(n, arr): Returns the length of the longest contiguous subarray where all elements are equal. Parameters: n (int): Number of elements in the list. arr (list): List of n integers. Returns: int: Length of the longest contiguous subarray where all elements are equal. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Alex and Bob are playing a string game. The game rules are as follows: 1. Alex will first form a string, s, consisting of lowercase English alphabets. 2. Bob\'s task is to determine if it is possible to rearrange the characters in the string to form a palindrome. A string is called a palindrome if it reads the same forward and backward (e.g., \\"madam\\" or \\"racecar\\"). You need to help Bob find out if it is possible to rearrange the characters of the given string s to form a palindrome. # Input The first line contains a single integer T (1 leq T leq 10^3) - the number of test cases. Each of the following T lines contains a single string s (1 leq |s| leq 10^5) where |s| represents the length of the string. # Output For each test case, print \\"YES\\" if it\'s possible to rearrange the characters of the string s to form a palindrome. Otherwise, print \\"NO\\". # Example Input: ``` 3 aabb abc aabbcc ``` Output: ``` YES NO YES ``` # Note: - In the first test case, the string \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. - In the second test case, the string \\"abc\\" cannot be rearranged into a palindrome. - In the third test case, the string \\"aabbcc\\" can be rearranged to \\"abccba\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of a string can be rearranged to form a palindrome. from collections import Counter # Count the frequencies of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 == 1) # A string can form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"The kingdom of Almas has n islands numbered from 1 to n. Some of these islands are connected by bidirectional bridges. The king of Almas wishes to cut some of these bridges to create a scenario where no two islands are directly connected by more than one bridge, but still keep all islands accessible from the capital island 1. The task is to find the minimum number of bridges that need to be removed to satisfy the king\'s requirement. You are given n islands and m bridges. Each bridge connects two distinct islands ui and vi and has a unique bridge id i. An island i is accessible from the capital island if there exists a sequence of islands starting from 1 and ending at i such that each adjacent pair of islands in the sequence is connected by a bridge in the list. The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 × 10^5). Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi), describing the islands that are connected by the ith bridge. Output the minimum number of bridges that need to be removed. **Example:** ``` Input: 5 5 1 2 2 3 3 4 4 5 1 3 Output: 1 ```","solution":"def find_min_bridges_to_remove(n, m, bridges): from collections import defaultdict graph = defaultdict(list) for u, v in bridges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) parent = [-1] * (n + 1) def dfs(u): nonlocal cycle_edge_count visited[u] = True for v in graph[u]: if not visited[v]: parent[v] = u dfs(v) elif v != parent[u]: cycle_edge_count += 1 cycle_edge_count = 0 for i in range(1, n + 1): if not visited[i]: dfs(i) # Each cycle introduces 2 counts of edges, so we divide by 2 return cycle_edge_count // 2"},{"question":"You are given an `n x n` grid of integers, where each cell represents the elevation at that point. The player can start from any cell in the first row and can only move to the cell directly below, the cell diagonally left below, or the cell diagonally right below. The goal is to find the maximum sum of elevations a player can obtain starting from any cell in the first row to any cell in the last row. Write a function that takes an `n x n` grid as input and returns the maximum sum of elevations possible. # Function Signature ```python def max_elevation_sum(grid: List[List[int]]) -> int: pass ``` # Input - A list of lists of integers `grid` where each sublist represents a row in the grid and `grid[i][j]` represents the elevation at row `i` and column `j`. - The grid size is `n x n` (2 ≤ n ≤ 1000). # Output - Return an integer which is the maximum sum of elevations possible. # Example ```python grid = [ [10, 11, 12], [14, 13, 10], [17, 15, 19] ] assert max_elevation_sum(grid) == 44 ``` # Explanation In this example, the player starts at `grid[0][2]` (elevation = 12), moves to `grid[1][1]` (elevation = 13), and then moves to `grid[2][2]` (elevation = 19). The maximum sum of elevations is 12 + 13 + 19 = 44. # Constraints - The player can only move downwards to the cell directly below, diagonally left below, or diagonally right below. - The player must start in the first row and end in the last row. - You can assume elevation values are non-negative integers.","solution":"from typing import List def max_elevation_sum(grid: List[List[int]]) -> int: n = len(grid) dp = [[0] * n for _ in range(n)] # Initialize the dp array with the first row of the grid for j in range(n): dp[0][j] = grid[0][j] # Fill the dp array for i in range(1, n): for j in range(n): dp[i][j] = grid[i][j] max_prev = dp[i-1][j] if j > 0: max_prev = max(max_prev, dp[i-1][j-1]) if j < n - 1: max_prev = max(max_prev, dp[i-1][j+1]) dp[i][j] += max_prev # The result is the maximum value in the last row return max(dp[n-1])"},{"question":"Ariana is setting up a candy distribution system for a party. She has an unlimited supply of candies, but she wants to distribute them according to a specific set of rules to ensure fairness and excitement. There are n children at the party, and they are standing in a line. Each child i has a preferred number of candies p_i and a limit of candies l_i they can hold. Ariana can give any number of candies to each child but must ensure the following conditions: 1. Each child receives at least their preferred number of candies. 2. The number of candies given to each child does not exceed their limit. 3. The total number of candies given to all children is minimized. Help Ariana figure out the minimum number of candies she needs to distribute to satisfy all children. You are given multiple test cases. For each test case: - The first line contains an integer t (1 leq t leq 10^5) – the number of test cases. - For each test case, the first line contains an integer n (1 leq n leq 10^5) – the number of children. - The next line contains n integers p_1, p_2, ldots, p_n (0 leq p_i leq 10^9) – the preferred number of candies for each child. - The next line contains n integers l_1, l_2, ldots, l_n (p_i leq l_i leq 10^9) – the limit of candies each child can hold. It is guaranteed that the sum of all n over all test cases does not exceed 5 cdot 10^5. For each test case, print a single integer - the minimum number of candies Ariana needs to distribute to satisfy all children. Example: Input: ``` 2 3 1 2 3 3 4 5 4 2 2 2 2 3 3 3 3 ``` Output: ``` 6 8 ``` Explanation: For the first test case: - Child 1 prefers 1 candy and can hold up to 3 candies. At least 1 candy must be given. - Child 2 prefers 2 candies and can hold up to 4 candies. At least 2 candies must be given. - Child 3 prefers 3 candies and can hold up to 5 candies. At least 3 candies must be given. Thus, the minimum number of candies to distribute is 1 + 2 + 3 = 6. For the second test case: - All children prefer 2 candies and can hold up to 3 candies each. Thus, the minimum number of candies to distribute is 2 + 2 + 2 + 2 = 8.","solution":"def min_candies_distribution(test_cases): results = [] for case in test_cases: n, preferred, limit = case candies = 0 for p, l in zip(preferred, limit): if p > l: candies += l else: candies += p results.append(candies) return results # Handling the input and converting it to the required format for the function def process_input(input_string): input_lines = input_string.strip().split(\'n\') idx = 0 t = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(input_lines[idx]) idx += 1 preferred = list(map(int, input_lines[idx].split())) idx += 1 limit = list(map(int, input_lines[idx].split())) idx += 1 test_cases.append((n, preferred, limit)) return test_cases"},{"question":"You are given a sequence of n integers represented by array A. You want to form an array B from A that contains only the unique elements of A while preserving their order of first occurrence. Additionally, you are given an integer d and you need to remove all occurrences of integers from B which are divisible by d. Your task is to return the resulting array. # Input: * The first line contains an integer t (1 le t le 100) — the number of test cases. * The first line of each test case contains two integers n (1 le n le 10^5) and d (1 le d le 10^9). * The second line of each test case contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^9) — the elements of the array A. # Output: * For each test case, output a single line containing the elements of the resulting array B separated by spaces. If B is empty, output an empty line. # Example: Input: 2 7 3 1 2 3 2 4 3 5 6 2 5 4 4 2 8 5 Output: 1 2 4 5 5","solution":"def remove_divisible_and_unique(t, test_cases): results = [] for i in range(t): n, d, A = test_cases[i] seen = set() B = [] for num in A: if num not in seen: if num % d != 0: B.append(num) seen.add(num) results.append(B) return results"},{"question":"In the mystical land of Northlandia, there resides a network of enchanted castles connected by magical portals. Each portal only works in one direction and has a magic fee associated with crossing it. The Kingdom of Northlandia wants to determine the maximum amount of magic energy required to travel between castles under a constraint. The Kingdom’s wise wizard has tasked you with determining the longest path (in terms of magic energy consumed) that one can travel starting from Castle 1 and making exactly M stops (including the start and end points) on the way. Each castle is uniquely numbered from 1 to C. Typically, such a task would be simple, but the tricky part is that each portal can only be used once in this path. The first line of input contains C, the number of castles in Northlandia. The second line contains the number of portals, P. The next P lines each contain three integers u, v, and w, indicating there exists a portal from castle u to castle v requiring w units of magic energy to cross. The final line contains the number M, indicating the required number of stops on the path. Your task is to compute the maximum amount of magic energy consumed on any valid path starting from Castle 1 and making exactly M stops. If it is impossible to achieve such a path, return -1. Input: ``` The first line contains the number of castles C. The second line contains the number of portals P. The next P lines each contain three integers u, v, and w describing a portal from castle u to castle v with a magic fee of w units. The final line contains the integer M, representing the number of stops. ``` Output: ``` Output the maximum amount of magic energy consumed on any valid path that makes exactly M stops starting at Castle 1. If no such path exists, print -1. ``` Example: Input: ``` 5 7 1 2 4 2 3 5 3 4 9 1 3 7 1 4 2 4 5 1 3 5 6 4 ``` Output: ``` 18 ``` Explanation: One valid path with exactly 4 stops from Castle 1 could be: ``` 1 → 2 (4 units) → 3 (5 units) → 4 (9 units) ``` Total magic energy consumed is 4 + 5 + 9 = 18 units. Hence, the output is 18.","solution":"def longest_path_with_stops(castles, portals, paths, stops): from collections import defaultdict import heapq # Building the graph from input paths graph = defaultdict(list) for u, v, w in paths: graph[u].append((v, w)) # DP table initialization dp = [[-float(\'inf\')] * (stops + 1) for _ in range(castles + 1)] dp[1][1] = 0 # Starting from castle 1 with 1 stop # Priority Queue to explore nodes heap = [(-0, 1, 1)] # (negated magic_energy, current_castle, current_stops) # Process is similar to Bellman-Ford but with limited stops while heap: current_energy, current_castle, current_stops = heapq.heappop(heap) current_energy = -current_energy # Revert to positive if current_stops == stops: continue # No point in exploring further from here for next_castle, weight in graph[current_castle]: new_energy = current_energy + weight new_stops = current_stops + 1 if new_energy > dp[next_castle][new_stops]: dp[next_castle][new_stops] = new_energy heapq.heappush(heap, (-new_energy, next_castle, new_stops)) # Get the maximum value with exactly M stops from any castle (not necessarily 1) max_energy = max(dp[i][stops] for i in range(1, castles + 1)) return max_energy if max_energy != -float(\'inf\') else -1"},{"question":"You are given an array of n integers and q queries. Each query is either: 1. 1 x v: An update query to set the x-th element of the array to the value v. 2. 2 l r: A sum query to calculate the sum of integers in the subarray from the l-th element to the r-th element, inclusive. The first line contains two integers n and q (1 le n, q le 2 cdot 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. The next q lines contain the queries in the following format: - For an update query, the format is \\"1 x v\\" (1 le x le n, -10^9 le v le 10^9). - For a sum query, the format is \\"2 l r\\" (1 le l le r le n). Print the result of each sum query on a new line. # Example Input ``` 5 5 1 5 2 4 -1 2 1 3 1 3 10 2 2 5 1 5 0 2 1 5 ``` Output ``` 8 18 20 ```","solution":"class ArrayOperations: def __init__(self, n, array): self.n = n self.array = array def update(self, x, v): self.array[x - 1] = v def sum_query(self, l, r): return sum(self.array[l - 1:r]) def process_queries(n, array, queries): arr_op = ArrayOperations(n, array) results = [] for query in queries: if query[0] == 1: _, x, v = query arr_op.update(x, v) elif query[0] == 2: _, l, r = query results.append(arr_op.sum_query(l, r)) return results"},{"question":"You are given a list of words. Two words are considered \\"brothers\\" if one word can be formed by rearranging the letters of the other. Your task is to count the number of brother words a given target word has in the list. Additionally, you need to find the k-th brother word in alphabetical order if there are k or more brother words. The input data consists of multiple lines. The first line contains a single integer n, the number of words in the list. The second line contains n space-separated words. The third line contains the target word. The fourth line contains a single integer k. All words consist of lowercase alphabets only and have lengths between 1 and 20. The number of words in the list does not exceed 1000. Output the count of brother words the target word has. If the count is at least k, output the k-th brother word in alphabetical order. If there are fewer than k brother words, output just the count. # Example Input ``` 6 listen silent enlist inlets google sinister listen 2 ``` Output ``` 3 inlets ``` In this example, the brother words of \\"listen\\" are \\"silent\\", \\"enlist\\", and \\"inlets\\". There are 3 brother words in total, and the 2nd brother word in alphabetical order is \\"inlets\\".","solution":"def count_and_find_kth_brother(n, words, target, k): def is_brother(word1, word2): return sorted(word1) == sorted(word2) and word1 != word2 brother_words = [word for word in words if is_brother(word, target)] brother_words.sort() count = len(brother_words) kth_brother = brother_words[k-1] if k <= count else None return count, kth_brother"},{"question":"You are given an array of integers a of length n, where 2 le n le 10^5. You can perform the following operation any number of times: choose two adjacent elements of the array and swap them. Your goal is to sort the array in such a way that the sum of absolute differences between consecutive elements is minimized. Formally, let the sorted array be b, you need to minimize the value of: |b[2] - b[1]| + |b[3] - b[2]| + cdots + |b[n] - b[n-1]| For example, suppose you are given the array a = [4, 2, 1, 3]. A possible sorted array would be [1, 2, 3, 4], in which case the sum of absolute differences between consecutive elements is |2 - 1| + |3 - 2| + |4 - 3| = 1 + 1 + 1 = 3. In the first line of the input, you are given an integer n – the length of the array. The second line contains n space-separated integers forming the array a. Print two lines: 1. The minimized value of the sum of absolute differences between consecutive elements. 2. The sorted array b that achieves this minimized value. If there are multiple valid answers, print any of them. # Example **Input:** ``` 4 4 2 1 3 ``` **Output:** ``` 3 1 2 3 4 ```","solution":"def minimize_absolute_difference_sum(n, a): This function takes in an integer n and a list a of length n. It returns the minimized value of the sum of absolute differences between consecutive elements and the sorted array that achieves this minimized value. b = sorted(a) total_sum = sum(abs(b[i] - b[i-1]) for i in range(1, n)) return total_sum, b"},{"question":"**Problem Statement:** You are given an array of n integers and a series of q queries. Each query provides three integers l, r, and k. The goal is to determine the k-th smallest integer in the subarray extending from index l to index r (inclusive, 1-based index). Given the constraints: - 1 ≤ n ≤ 10^5 (n is the number of elements in the array) - 1 ≤ q ≤ 10^5 (q is the number of queries) - 1 ≤ l ≤ r ≤ n - 1 ≤ k ≤ (r - l + 1) - The array elements are integers in the range [1, 10^9] **Input:** - The first line contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers, the elements of the array. - The third line contains a single integer q, the number of queries. - The following q lines each contain three space-separated integers l, r, and k, representing each query. **Output:** For each query, output the k-th smallest element in the subarray from index l to r. **Example:** **Input:** ``` 6 5 3 1 6 4 2 3 1 4 2 2 5 3 1 6 4 ``` **Output:** ``` 3 4 4 ``` **Explanation:** - For the query (1, 4, 2): The subarray is [5, 3, 1, 6]. The sorted subarray is [1, 3, 5, 6]. The 2nd smallest element is 3. - For the query (2, 5, 3): The subarray is [3, 1, 6, 4]. The sorted subarray is [1, 3, 4, 6]. The 3rd smallest element is 4. - For the query (1, 6, 4): The subarray is [5, 3, 1, 6, 4, 2]. The sorted subarray is [1, 2, 3, 4, 5, 6]. The 4th smallest element is 4. **Note:** - Handle each query efficiently considering the constraints. - The primary challenge lies in efficiently finding the k-th smallest element multiple times.","solution":"def kth_smallest_numbers(n, nums, queries): Given an array of n integers and a series of q queries, this function finds the k-th smallest integer in the subarray for each query. Parameters: n (int): the number of elements in the array. nums (list): the array of n integers. queries (list of tuples): each tuple contains three integers l, r, and k representing each query. Returns: list: a list containing the k-th smallest element from the subarray for each query. results = [] for l, r, k in queries: subarray = nums[l-1:r] subarray.sort() results.append(subarray[k-1]) return results"},{"question":"You are consulting for an e-commerce startup that operates a series of small warehouses distributed across a country. Their system tracks orders in a log file with time stamps and performs regular periodic inventory audits. Your task is to analyze the logs, understand the sequence of events, and determine the final inventory in each warehouse after all operations. Each order decrements the stock in the warehouse that ships it. Each restock increments the stock in the affected warehouse(s). You need to process a given sequence of these events for multiple warehouses and determine the final stock levels. The first line of the input contains two integers n (1 le n le 10^5) and m (1 le m le 10^4) — the number of warehouss and the initial stock level of each warehouse. The second line contains n integers, where the i-th integer is the initial stock level in warehouse i. The third line contains a single integer k (1 le k le 10^5), the total number of log entries. Each of the next k lines contains one of the following events: - \\"order t i c\\" (1 le t le 10^9, 1 le i le n, 1 le c le 10^3) meaning at time t, warehouse i ships an order and reduces its stock by c. - \\"restock t i c\\" (1 le t le 10^9, 1 le i le n, 1 le c le 10^3) meaning at time t, warehouse i receives a restock and increases its stock by c. You need to determine the stock level in each warehouse after all events. Output an array of n integers where the i-th integer is the final stock level in warehouse i. # Example **Input:** ``` 3 100 50 80 90 5 order 1 1 20 restock 2 2 30 order 3 3 50 order 4 1 10 restock 5 3 100 ``` **Output:** ``` 20 110 140 ``` Explanation: Initially the stock levels are [50, 80, 90]. The first event (order 1) decreases the stock of warehouse 1 by 20 units: [30, 80, 90]. The second event (restock 2) increases the stock of warehouse 2 by 30 units: [30, 110, 90]. The third event (order 3) decreases the stock of warehouse 3 by 50 units: [30, 110, 40]. The fourth event (order 4) decreases the stock of warehouse 1 by 10 units: [20, 110, 40]. The fifth event (restock 5) increases the stock of warehouse 3 by 100 units: [20, 110, 140]. So the final stock levels are [20, 110, 140].","solution":"def final_inventory(n, initial_stocks, k, events): Calculate the final inventory in each warehouse after processing the events. :param n: Number of warehouses :param initial_stocks: List of integers representing initial stock in each warehouse :param k: Number of log entries (events) :param events: List of event strings that describe an order or restock event :return: Final stock levels in each warehouse as a list of integers # Create a copy of initial stocks to update final_stocks = initial_stocks[:] # Process each event for event in events: details = event.split() t = int(details[1]) # time, not used in this problem i = int(details[2]) # warehouse index (1-based) c = int(details[3]) # amount change if details[0] == \'order\': final_stocks[i - 1] -= c elif details[0] == \'restock\': final_stocks[i - 1] += c return final_stocks"},{"question":"You are given a sequence of n integers, determine the length of the longest contiguous subsequence where the difference between the maximum and minimum element is at most k. The first line of input contains the number of integers n (2 ≤ n ≤ 100). The second line contains the sequence of n integers, each ranging from -1000 to 1000. The third line contains the integer k (0 ≤ k ≤ 2000). Output the length of the longest contiguous subsequence where the difference between the maximum and minimum element does not exceed k. In the first case, the longest contiguous subsequence is [1, 3, 5] with a difference of 4. In the second case, the longest contiguous subsequence is [4, 6, 7] with a difference of 3.","solution":"def longest_contiguous_subsequence_with_limited_diff(n, sequence, k): Determine the length of the longest contiguous subsequence where the difference between the maximum and minimum element is at most k. max_length = 0 for i in range(n): current_min = current_max = sequence[i] for j in range(i, n): current_min = min(current_min, sequence[j]) current_max = max(current_max, sequence[j]) if current_max - current_min <= k: max_length = max(max_length, j - i + 1) else: break return max_length"},{"question":"You are given two arrays `A` and `B`, both consisting of `n` integers. Your task is to find the maximum possible value of `C` such that `A[i] + B[j] <= C` for some `i` and `j` (1 ≤ i, j ≤ n). The first line contains a single integer `n` (1 ≤ n ≤ 1000). The second line contains `n` space-separated integers which are elements of array `A` (-10^9 ≤ A[i] ≤ 10^9). The third line contains `n` space-separated integers which are elements of array `B` (-10^9 ≤ B[j] ≤ 10^9). Print the maximum possible value of `C`. For example, in the first test case, if `A = [1, 2, 3]` and `B = [4, 5, 6]`, the output should be `9` since `3 (from A) + 6 (from B) = 9` is the maximum value that satisfies the condition.","solution":"def find_max_sum(A, B): Finds the maximum possible value of C such that A[i] + B[j] <= C for some i and j. max_A = max(A) max_B = max(B) return max_A + max_B # Sample Input n = 3 A = [1, 2, 3] B = [4, 5, 6] # Output print(find_max_sum(A, B)) # Output: 9"},{"question":"John is organizing a charity event where he needs to arrange different types of donation items on a table. He has n packets of food and m toys. Each packet of food or toy is characterized by two parameters — its value vi and size si. John wants to place some of these items on a table with size t such that: - Each item on the table is either a packet of food or a toy. - The total size of the items on the table does not exceed the size t of the table. - He can choose any combination of items as long as the above conditions are met. Your task is to determine the maximum possible total value of the items that John can place on the table with size t, considering all the conditions mentioned above. The total value is the sum of values of all the items placed on the table. The first line contains three integers n, m, and t (1 ≤ n, m ≤ 100 000, 1 ≤ t ≤ 109) — the number of packets of food, the number of toys, and the size of the table. Each of the following n lines contains two integers vi and si (1 ≤ vi, si ≤ 109) — value and size of the i-th packet of food. Each of the following m lines contains two integers vj and sj (1 ≤ vj, sj ≤ 109) — value and size of the j-th toy. Print the maximum possible total value of the items that John can place on the table with size t, considering all the conditions mentioned. If it is not possible to place any items on the table, print 0. In the first example, John has only one toy which must be placed on the table. Its value equals 4 and size equals 3, so after John places it, the size of free space on the table becomes equal to 7. Also, John must place the second packet of food (which has size 5), because it is the most valuable packet of food (its value equals 6). After that John cannot place more items on the table, because there isn\'t enough free space. Thus, the maximum total value of the items placed on the table equals to 10.","solution":"def max_total_value(n, m, t, food_items, toy_items): Returns the maximum possible total value of the items that John can place on the table. Parameters: n (int): Number of packets of food. m (int): Number of toys. t (int): Size of the table. food_items (list of tuples): Each tuple contains two integers, value and size of a food packet. toy_items (list of tuples): Each tuple contains two integers, value and size of a toy. Returns: int: The maximum total value of items that can be placed on the table. # Combine all items into a single list items = food_items + toy_items # Sort items based on their value-to-size ratio in descending order items.sort(key=lambda x: x[0] / x[1], reverse=True) total_size = 0 total_value = 0 for value, size in items: if total_size + size <= t: total_size += size total_value += value return total_value"},{"question":"You are given two strings, s1 and s2, of the same length consisting of characters \'0\' and \'1\'. Your task is to repeatedly apply the following operation until no more operations can be applied: 1. If there is a subsequence \'01\' in s1 and a subsequence \'10\' in s2, you can swap one \'0\' from s1 with one \'0\' from s2, and one \'1\' from s1 with one \'1\' from s2 to remove these subsequences. Your goal is to maximize the number of swaps. The input consists of two lines: - The first line contains a string s1 (1 ≤ |s1| ≤ 100) consisting of characters \'0\' and \'1\'. - The second line contains a string s2 (1 ≤ |s2| ≤ 100) consisting of characters \'0\' and \'1\'. Print the maximum number of swaps that can be applied. Example: Suppose the input is: ``` 0101 1010 ``` In this case, you can perform two swaps, resulting in: ``` s1: 1111 s2: 0000 ``` So, the output is: ``` 2 ```","solution":"def max_swaps(s1, s2): Returns the maximum number of swaps that can be applied between s1 and s2. swaps = 0 while \'01\' in s1 and \'10\' in s2: s1 = s1.replace(\'01\', \'\', 1) s2 = s2.replace(\'10\', \'\', 1) swaps += 1 return swaps"},{"question":"You are given a list of N projects, each with a start time, end time, and a profit. You can only work on one project at a time. Your goal is to maximize the profit you can obtain by selecting a subset of non-overlapping projects. Write a function that takes an integer N and a list of tuples representing the projects, where each tuple contains three integers (start, end, profit) and returns the maximum profit you can obtain. The projects are sorted by their start times, and you need to ensure that the selected projects do not overlap. # Input: - An integer N (1 ≤ N ≤ 10^5) - the number of projects. - A list of N tuples, each containing three integers (start, end, profit) representing the start time, end time, and profit of a project respectively. (1 ≤ start < end ≤ 10^9, 1 ≤ profit ≤ 10^6) # Output: - An integer representing the maximum profit you can obtain. # Example: ```python def maximize_profit(N, projects): # Your code here # Example case N = 4 projects = [(1, 3, 50), (2, 5, 20), (3, 6, 100), (4, 8, 70)] print(maximize_profit(N, projects)) # Output: 150 ``` # Notes: In the given example, the maximum profit can be obtained by selecting the projects (1, 3, 50) and (3, 6, 100), resulting in a total profit of 150.","solution":"import bisect def maximize_profit(N, projects): Returns the maximum profit that can be obtained without overlapping projects. :param N: Integer, number of projects :param projects: List of tuples, each containing three integers (start, end, profit) :return: Integer, maximum profit # Sort the projects based on their end times projects.sort(key=lambda x: x[1]) # List to keep track of max profit at each project end time dp = [] end_times = [] for project in projects: start, end, profit = project # Find the latest project that ends before the current project starts idx = bisect.bisect_right(end_times, start) - 1 max_profit_without_current = dp[idx] if idx != -1 else 0 max_profit_with_current = max_profit_without_current + profit # Determine the maximum profit up to the current project end time if dp: max_profit_with_current = max(max_profit_with_current, dp[-1]) dp.append(max_profit_with_current) end_times.append(end) return dp[-1] if dp else 0"},{"question":"You have been selected to help design a transportation system for a newly planned city called Techville. The objective is to minimize the travel time between various points in the city. The city\'s layout can be represented as an undirected graph where buildings are vertices and the roads connecting them are edges, each with an associated travel time. The city\'s administration needs your expertise to find the shortest paths between a given building and all other buildings. Specifically, they want to know the shortest travel times from a central building to all other buildings in the city. Given the number of buildings n (1 ≤ n ≤ 200,000) and the number of roads m (1 ≤ m ≤ 500,000), followed by the road connections and their respective travel times, write a program that computes the minimum travel times from the central building to all other buildings. The first line of the input contains three space-separated integers n, m, and s (1 ≤ s ≤ n), where n is the number of buildings, m is the number of roads, and s is the central building. The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n and 1 ≤ w ≤ 1000), representing a road between buildings u and v with a travel time of w. Print n space-separated integers, where the ith integer is the minimum travel time from the central building s to building i (1-based indexing). If a building is unreachable from the central building, print -1 for that building. Example input: ``` 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 3 5 5 ``` Example output: ``` 0 2 3 6 8 ```","solution":"import heapq def shortest_paths(n, m, s, roads): graph = [[] for _ in range(n)] for u, v, w in roads: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) dist = [float(\'inf\')] * n dist[s-1] = 0 priority_queue = [(0, s-1)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > dist[u]: continue for weight, v in graph[u]: distance = current_distance + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return [d if d != float(\'inf\') else -1 for d in dist] # Example usage # n = 5 # m = 6 # s = 1 # roads = [(1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 4, 3), (3, 5, 5)] # print(shortest_paths(n, m, s, roads)) # Output: [0, 2, 3, 6, 8]"},{"question":"You are given a string that consists of lowercase English letters. You can perform operations on this string to modify it. In one operation, you can pick any two adjacent distinct characters and remove them from the string. Your task is to determine the minimum length of the string that can be achieved by performing any sequence of such operations. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Print a single integer representing the minimum possible length of the string after performing any sequence of operations. Example: Input: 5 abbba Output: 1","solution":"def min_string_length(s): Return the minimum length of the string after performing any sequence of operations. In each operation, you can pick any two adjacent distinct characters and remove them. stack = [] for char in s: if stack and stack[-1] != char: stack.pop() # Remove the top element because it\'s distinct from the current char else: stack.append(char) return len(stack)"},{"question":"You are given a sequence of integers representing temperatures recorded over several days. Your task is to find the longest subarray that has a strictly increasing temperature sequence. Specifically, given an array of integers `temperatures`, you need to write a function that returns the length of the longest strictly increasing subarray. # Input - The first line contains a single integer `n` (1 leq n leq 1000) – the number of days. - The second line contains `n` integers `temperatures[i]` (1 leq temperatures[i] leq 1000) – the temperatures recorded on each day. # Output - Print a single integer – the length of the longest strictly increasing subarray. # Example Input ``` 7 2 2 3 4 3 5 6 ``` Output ``` 3 ``` Explanation The longest strictly increasing subarray is `[3, 4, 5]` which has a length of 3.","solution":"def longest_increasing_subarray(temperatures): n = len(temperatures) if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len # Example usage: # n = 7 # temperatures = [2, 2, 3, 4, 3, 5, 6] # print(longest_increasing_subarray(temperatures)) # Output: 3"},{"question":"A group of friends are planning a trip. They want to visit exactly k islands out of n available islands. Each friend can have only one visit per island, but multiple friends can visit an island simultaneously. They can start from any island and move to any other island. They want to minimize the largest distance any one of them has to travel. You are given the (x, y) coordinates of the islands. Calculate the minimum possible value of the largest distance any one of the friends would travel when planning the trip optimally. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100) — the number of islands and the number of islands to visit. The next n lines each contain two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the islands. Output one integer — the minimum possible value of the largest distance a friend would need to travel. In the first sample, there are four islands at (0,0), (3,4), (6,8), and (9,12). If friends visit islands at (0,0), (3,4), (6,8), and (9,12), the maximum distance any friend travels is 5.","solution":"import math from itertools import combinations def calculate_distance(p1, p2): Computes the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def min_largest_distance(n, k, coordinates): Returns the minimum possible value of the largest distance any friend would need to travel. def max_distance_selected(islands): Helper function to calculate the maximum distance among selected islands. max_dist = 0 for i in range(len(islands)): for j in range(i + 1, len(islands)): max_dist = max(max_dist, calculate_distance(islands[i], islands[j])) return max_dist selected_combinations = combinations(coordinates, k) min_max_distance = float(\'inf\') for selected in selected_combinations: min_max_distance = min(min_max_distance, max_distance_selected(selected)) return min_max_distance"},{"question":"You are given a binary string of length n. You can perform the following operation as many times as you want: choose two distinct indices i and j (1 ≤ i, j ≤ n) and swap the characters at positions i and j. Your task is to determine the lexicographically smallest string you can obtain after performing any number of swaps. Input The first line contains an integer n (1 ≤ n ≤ 1000), the length of the binary string. The second line contains a binary string of length n. Output Output the lexicographically smallest string that you can obtain. Example Input: 5 11010 Output: 00111 In the first sample, the smallest lexicographic string that can be obtained by performing swaps is 00111.","solution":"def smallest_lexicographic_string(n, binary_string): Given a binary string of length n, returns the lexicographically smallest string that can be obtained by performing any number of swaps. return \'\'.join(sorted(binary_string))"},{"question":"You are organizing a music festival and need to manage the schedules of various events at different stages. Each event has a start time and an end time, and they take place on specific stages. You want to build a system that allows you to perform the following operations: 1. Add an event to a specific stage. 2. Remove an event from a specific stage. 3. Given a timeframe and a specific stage, find all events that are scheduled to be active during that timeframe. Help build a system to schedule and retrieve events effectively. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of queries. Then follow n lines with query descriptions. Each of them contains four integers: - ai (1 ≤ ai ≤ 3) — type of the query: - 1 represents adding an event. - 2 represents removing an event. - 3 represents retrieving events happening at a specific stage in a given timeframe. - si (1 ≤ si ≤ 100) — the stage number for the event. - ti (1 ≤ ti ≤ 10^9) — the start time of the event. - ei (1 ≤ ei ≤ 10^9) — the end time of the event. It\'s guaranteed that for each removal operation, the event to be removed exists at the specified stage and timeframe. For each retrieval query, output the number of events happening in the specified timeframe and stage. # Input ``` 6 1 1 10 20 1 2 15 25 1 1 30 40 3 1 10 15 2 1 10 20 3 1 10 40 ``` # Output ``` 1 1 ``` # Explanation - The first query adds an event to stage 1 from time 10 to 20. - The second query adds an event to stage 2 from time 15 to 25. - The third query adds an event to stage 1 from time 30 to 40. - The fourth query asks for the number of events at stage 1 from time 10 to 15, and there is 1 event. - The fifth query removes the event from stage 1 that was scheduled from 10 to 20. - The sixth query asks for the number of events at stage 1 from time 10 to 40, and there is 1 event remaining.","solution":"class MusicFestival: def __init__(self): self.schedule = {} def add_event(self, stage, start, end): if stage not in self.schedule: self.schedule[stage] = [] self.schedule[stage].append((start, end)) def remove_event(self, stage, start, end): if stage in self.schedule and (start, end) in self.schedule[stage]: self.schedule[stage].remove((start, end)) def retrieve_events(self, stage, t_start, t_end): events = 0 if stage in self.schedule: for start, end in self.schedule[stage]: if not (end < t_start or start > t_end): events += 1 return events def process_queries(queries): festival = MusicFestival() results = [] for query in queries: qtype, stage, start, end = query if qtype == 1: festival.add_event(stage, start, end) elif qtype == 2: festival.remove_event(stage, start, end) elif qtype == 3: events = festival.retrieve_events(stage, start, end) results.append(events) return results"},{"question":"Emma works as a librarian and has been tasked with organizing the shelves. She has n books, and each book is identified by a unique integer ID. The library has m empty shelves, numbered from 1 to m. Emma can place any book on any shelf, and she can also move any book from one shelf to another. However, there are certain constraints: 1. Each shelf can hold at most one book. 2. Emma can move a book from one shelf to another, but this operation takes some time. Emma wants to minimize the total number of moves required to organize the books such that all books are placed from ID 1 to ID n, consecutively on the shelves starting with shelf 1. If there are less than n shelves, not all books can be placed and Emma should place as many books consecutively as possible starting from shelf 1. You need to write a program to help Emma find the minimum number of moves required to organize the books under these constraints. The first line contains two integers n (1 ≤ n ≤ 105) and m (1 ≤ m ≤ 105) — the number of books and the number of shelves, respectively. The second line contains n integers, where the i-th integer represents the ID of the i-th book. The third line contains m integers, where the i-th integer represents the current ID of the book on the i-th shelf (0 if the shelf is empty). Output a single integer — the minimum number of moves required to organize the books as described above. Example Input: 5 3 3 1 4 2 5 0 3 0 Example Output: 3 Explanation: Initially, the shelves are arranged as follows: Shelf 1: empty Shelf 2: book with ID 3 Shelf 3: empty Emma performs the following moves: 1. Move book 3 from shelf 2 to shelf 1. 2. Place book 1 on shelf 2. Now shelves look like: Shelf 1: book with ID 3 Shelf 2: book with ID 1 Shelf 3: empty 3. Move book 3 from shelf 1 to shelf 3. Now: Shelf 1: book with ID 1 Shelf 2: empty Shelf 3: book with ID 3 4. Place book 2 on shelf 2. The final arrangement will be: Shelf 1: book with ID 1 Shelf 2: book with ID 2 Shelf 3: book with ID 3 This results in a minimum of 3 moves.","solution":"def min_moves_to_organize(n, m, book_ids, shelf_states): This function calculates the minimum number of moves required to organize the books on shelves. n: int - Number of books. m: int - Number of shelves. book_ids: list - List of book IDs (length n). shelf_states: list - List representing each shelf state (length m). 0 if empty, otherwise the ID of the book on that shelf. Returns an integer representing the minimum number of moves. book_pos = {book_id: i for i, book_id in enumerate(book_ids, 1)} # map book IDs to positions move_count = 0 # A list of desired book positions desired_positions = list(range(1, min(n, m) + 1)) index = 0 for pos in desired_positions: current_book_id = shelf_states[index] if current_book_id != pos: move_count += 1 shelf_states[index] = pos index += 1 if index >= m: break return move_count"},{"question":"A social networking app has recently added a feature called \'trending posts,\' where posts that receive a lot of engagement within a short time span are highlighted. The app records user interactions as a list of user IDs and post IDs. Each interaction adds one like to the corresponding post. The posts that receive at least k likes within a window of d seconds are considered trending. You are given a list of interactions where each interaction is represented as a tuple of three values: (timestamp, user ID, post ID). Write a function that takes the list of interactions, the minimum number of likes k, and the time window d, and returns a list of all the post IDs that are considered trending. Function signature: ```python def find_trending_posts(interactions: List[Tuple[int, int, int]], k: int, d: int) -> List[int]: ``` # Input - `interactions`: a list of tuples, each containing an integer timestamp (0 ≤ timestamp ≤ 10^9), an integer user ID, and an integer post ID. - `k`: an integer (1 ≤ k ≤ 1000), the minimum number of likes required for a post to be trending. - `d`: an integer (1 ≤ d ≤ 10^9), the size of the time window in seconds. # Output - A list of integers representing the post IDs that are trending. # Example ``` python interactions = [(1, 101, 10), (2, 102, 20), (5, 101, 10), (6, 103, 20), (7, 104, 10), (8, 105, 30), (12, 102, 10)] k = 2 d = 5 print(find_trending_posts(interactions, k, d)) # Output: [10, 20] ``` # Explanation In the above example: - Post 10 received likes at times 1, 5, and 7; within the 5-second window starting from 1, it received 3 likes. - Post 20 received 2 likes within a 5-second window starting from 2. - Post 30 did not receive enough likes within any 5-second window to reach the threshold. Thus, the trending posts within the required constraints are [10, 20].","solution":"from typing import List, Tuple from collections import defaultdict import heapq def find_trending_posts(interactions: List[Tuple[int, int, int]], k: int, d: int) -> List[int]: Finds posts that are trending based on given interactions, minimum likes k and time window d. Args: interactions (List[Tuple[int, int, int]]): List of tuples with (timestamp, user_id, post_id). k (int): The minimum number of likes required for a post to be trending. d (int): The time window in seconds. Returns: List[int]: List of post IDs that are trending. # Initialize structures for processing post_interactions = defaultdict(list) # Group interactions by post ID for timestamp, user_id, post_id in interactions: post_interactions[post_id].append(timestamp) trending_posts = [] # Evaluate each post ID for trending status for post_id, timestamps in post_interactions.items(): timestamps.sort() start_idx = 0 # Use a sliding window algorithm to find if the post is trending for end_idx in range(len(timestamps)): while timestamps[end_idx] - timestamps[start_idx] > d: start_idx += 1 if end_idx - start_idx + 1 >= k: trending_posts.append(post_id) break return trending_posts"},{"question":"You are given two strings s and t. You need to transform string s into string t using the following operations: 1. Insert a character at any position. 2. Remove a character from any position. 3. Replace a character at any position with another character. Your task is to determine the minimum number of operations required to transform string s into string t. The first line contains the string s (1 ≤ |s| ≤ 100), the second line contains the string t (1 ≤ |t| ≤ 100). The strings consist of lowercase Latin letters only. Print a single integer — the minimum number of operations required to transform string s into string t. Example: ``` Input: sunday saturday Output: 3 Explanation: 1. Insert \'a\' after the first \'s\': \\"sunday\\" -> \\"saunday\\" 2. Insert \'t\' after the \'a\': \\"saunday\\" -> \\"satunday\\" 3. Replace \'n\' with \'r\': \\"satunday\\" -> \\"saturday\\" ```","solution":"def min_operations(s, t): Returns the minimum number of operations required to transform string s into string t. Uses dynamic programming to find the edit distance between the two strings. m = len(s) n = len(t) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last char # and recur for remaining string elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character are different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You are given an array of integers and a window size, k. Your task is to write a function that calculates the maximum sum of any contiguous subarray of size k within the given array. The function should have the following signature: ```python def max_sum_subarray(arr: List[int], k: int) -> int: ``` # Input: - A list of integers `arr` where 1 ≤ len(arr) ≤ 10^6 and -10^5 ≤ arr[i] ≤ 10^5. - An integer `k` where 1 ≤ k ≤ len(arr). # Output: - An integer representing the maximum sum of any contiguous subarray of size k. # Example: **Input**: ```python arr = [2, 1, 5, 1, 3, 2] k = 3 ``` **Output**: ```python 9 ``` # Explanation: In the example above, the subarray of size 3 with the maximum sum is [5, 1, 3], which sums up to 9. # Constraints: - The function should run in O(n) time complexity where n is the length of `arr`. - The function should use O(1) additional space. # Notes: - Consider edge cases where the array may contain negative numbers. - Ensure your solution handles the smallest and largest possible input sizes efficiently.","solution":"from typing import List def max_sum_subarray(arr: List[int], k: int) -> int: Calculates the maximum sum of any contiguous subarray of size k within the given array. # Calculate the sum of the first window max_sum = current_sum = sum(arr[:k]) # Slide the window over the array, updating the sum and tracking the maximum sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a warehouse, there are several types of boxes, each identified by a distinct positive integer ID. A worker has a list of box IDs and needs to place boxes with the same ID together. After arranging the boxes, the worker wants to count the number of batches of identical boxes. Given an array of integers representing the IDs of the boxes, write a function that returns the number of batches of identical boxes. # Input - An array of integers `box_ids` of length `n` where `1 ≤ n ≤ 10^5` and each element in the array is a positive integer. # Output - Return a single integer representing the number of batches of identical boxes. # Example Example 1: Input: ``` [1, 2, 2, 3, 3, 3, 4] ``` Output: ``` 4 ``` Explanation: There are 4 batches of boxes with IDs 1, 2, 3, and 4. Specifically: - ID 1 appears in one batch. - ID 2 appears in one batch. - ID 3 appears in one batch. - ID 4 appears in one batch. Example 2: Input: ``` [5, 5, 5, 5, 5] ``` Output: ``` 1 ``` Explanation: There is only 1 batch of boxes with ID 5, as all boxes are identical. # Note: - You may assume all input box IDs are positive integers. - There is no limit on the size of the box IDs. - The order of the elements in the output does not matter if there are multiple valid arrangements. Write your function to solve the problem described.","solution":"def count_batches(box_ids): Returns the number of batches of identical boxes. Args: box_ids (list): A list of integers representing the IDs of the boxes. Returns: int: The number of batches of identical boxes. return len(set(box_ids))"},{"question":"Given a string containing only lowercase alphabets, write a function to find the longest substring without repeating characters. You do not need to send the source code of the solution, just provide the length of the longest substring. The input is a single string of lowercase alphabets with length n (1 leq n leq 10^5). Submit the length of the longest substring without repeating characters.","solution":"def longest_substring_length(s): Returns the length of the longest substring without repeating characters. char_index = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Let\'s assume that you are given a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). You are also given an integer k (1 ≤ k ≤ n). Your task is to count the number of distinct k-length subsequences of this sequence which are strictly increasing. A subsequence of a sequence is a sequence that can be derived by deleting some or no elements of the original sequence without changing the order of the remaining elements. A subsequence is strictly increasing if each element of the subsequence is strictly greater than the previous one. The first line contains two integers n and k (1 ≤ n ≤ 100; 1 ≤ k ≤ n). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). In a single line, print the number of distinct k-length strictly increasing subsequences.","solution":"def count_distinct_increasing_subsequences(n, k, arr): from itertools import combinations # Get all possible k-length subsequences subsequences = combinations(arr, k) # Filter to keep only strictly increasing subsequences increasing_subsequences = [seq for seq in subsequences if all(seq[i] < seq[i+1] for i in range(k-1))] # Count the distinct increasing subsequences distinct_increasing_subsequences = set(increasing_subsequences) return len(distinct_increasing_subsequences)"},{"question":"You are given a grid of size n x n, where each cell contains a unique integer ranging from 1 to n^2. Your goal is to perform a zigzag traversal starting from the top-left cell and moving down through the diagonal, then from the bottom up through the next diagonal, and so on. Specifically, you start at cell (1,1), then move to (2,1), then to (1,2), then to (1,3), then to (2,2), and so on until you reach cell (n,n). Your task is to write a function that takes an integer n and a 2D array representing the grid, and returns a list of integers representing the zigzag traversal of the grid. # Input - The first line contains an integer n (2 ≤ n ≤ 1000), which is the size of the grid. - The next n lines each contain n integers, where the j-th integer of the i-th line represents the cell (i, j) of the grid. # Output - Output a single line containing n * n integers representing the zigzag traversal of the grid in the order they are visited. # Example: Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 1 4 2 3 5 7 8 6 9 ``` # Note: For the given example: - Start from (1,1): 1 - Move to (2,1): 4 - Move diagonally up to (1,2): 2 - Continue to (1,3): 3 - Move diagonally down to (2,2): 5 - Move further to (3,1): 7 - Move diagonally up to (2,3): 6 - Finally, to (3,2) and (3,3): 8, 9","solution":"def zigzag_traversal(n, grid): Returns the zigzag traversal of a given n x n grid. Parameters: n (int): The size of the grid. grid (list of list of int): The n x n grid with unique integers. Returns: list of int: The zigzag traversal of the grid. result = [] for line in range(1, (n + n)): start_col = max(0, line - n) count = min(line, (n - start_col), n) if line % 2 == 0: for j in range(0, count): result.append(grid[min(n, line) - j - 1][start_col + j]) else: for j in range(0, count): result.append(grid[start_col + j][min(n, line) - j - 1]) return result"},{"question":"Create a function in Python that takes a string representing a mathematical expression and returns the result of the evaluated expression. The function should support the following operators: addition (+), subtraction (-), multiplication (*), and division (/). The input may contain spaces which should be ignored by your function. You can assume the input expression is always valid. Your function should have the following signature: ```python def evaluate_expression(expression: str) -> float: ``` **Examples:** ```python evaluate_expression(\\"3 + 5 / 2\\") # returns 5.5 evaluate_expression(\\"10 - 3 * 2\\") # returns 4.0 evaluate_expression(\\" 3*5 + 8 / 2 \\") # returns 19.0 ``` **Hints:** - You may use Python\'s `eval()` function to simplify the parsing process, but ensure the input is sanitized to prevent code injection. - Consider removing spaces from the input string before evaluation. - Be mindful of division by zero cases and handle them gracefully.","solution":"def evaluate_expression(expression: str) -> float: Takes a string representing a mathematical expression and returns the result of the evaluated expression. Supported operators: +, -, *, /. # Remove spaces from the expression expression = expression.replace(\\" \\", \\"\\") try: # Evaluate the expression result = eval(expression) except ZeroDivisionError: return float(\'inf\') # Return infinity for division by zero return result"},{"question":"You are given two strings, s and t, each consisting of lowercase English letters. You need to determine the minimum number of operations required to convert both strings into the same string, if possible. The allowed operations are: 1. Insert a character at any position in either string. 2. Remove a character from any position in either string. 3. Replace a character at any position in either string with another character. Given the lengths of the strings can be up to 2000, your task is to write a function that finds the minimum number of operations needed. If it is not possible to make the strings identical, return -1. # Input - The first line contains an integer k (1 ≤ k ≤ 2000) — the length of the first string. - The second line contains the first string s of length k. - The third line contains an integer l (1 ≤ l ≤ 2000) — the length of the second string. - The fourth line contains the second string t of length l. # Output - Print an integer — the minimum number of operations required to make the strings identical, or -1 if it is not possible. # Example Input ``` 4 abcd 4 abcf ``` Output ``` 1 ``` Input ``` 3 abc 3 xyz ``` Output ``` -1 ``` # Note In the first example, only one replace operation is needed to change `d` to `f`, so the number of operations required is 1. In the second example, there is no direct way to convert `abc` to `xyz` using the allowed operations while maintaining the characters\' meaningful transformation, hence the output is -1.","solution":"def min_operations_to_same_string(s, t): Calculate the minimum number of operations required to convert both strings into the same string. Args: s (str): The first string. t (str): The second string. Returns: int: Minimum number of operations if possible to make both strings identical, otherwise -1. # Initialize dp table len_s, len_t = len(s), len(t) dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] # Initialize base cases for i in range(len_s + 1): dp[i][0] = i # Delete all characters in s to match empty t for j in range(len_t + 1): dp[0][j] = j # Insert all characters of t to empty s # Fill the dp table for i in range(1, len_s + 1): for j in range(1, len_t + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation required else: dp[i][j] = min(dp[i - 1][j], # Remove character from s dp[i][j - 1], # Insert character to s dp[i - 1][j - 1]) + 1 # Replace character in s return dp[len_s][len_t]"},{"question":"Given an array of integers, you need to determine whether it\'s possible to partition the array into two non-empty subsets such that the sum of elements in both subsets is equal. Write a function that takes an array of integers as input and returns a boolean value indicating whether such a partition is possible. Your function should have the following signature: ```python def can_partition(nums: List[int]) -> bool: ``` # Input - The input is a list of integers `nums` where 1 ≤ len(nums) ≤ 200 and `-10^4 ≤ nums[i] ≤ 10^4`. # Output - Return `True` if a partition is possible, otherwise return `False`. # Example Example 1 Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2 Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into equal sum subsets. # Notes - Consider using dynamic programming or a similar approach to check for the possibility of such partitioning efficiently.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, it\'s impossible to split into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True # Iterate through the numbers in the list for num in nums: # Update the dp array from back to front for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are organizing a coding competition and you have received the registration forms from n participants, numbered from 1 to n. Each participant has provided a schedule of coding problems they will solve, which needs to be followed in a strict sequential order. Each problem provided by a participant is characterized by an integer bi, j, where i (1 ≤ i ≤ n) is the number of the participant, j (1 ≤ j ≤ li) is the number of the problem, and bi, j is the difficulty level of the problem. The schedule should minimize the number of \\"difficult transitions\\", where the subsequent problem has a higher difficulty level than the previous one. However, due to a mistake in the registration forms, the beginning difficulty bi, 1 of each participant is known, but subsequent difficulties must be generated using the formula bi, j = (bi, j - 1 + vi * wj) mod mi, where vi and wj are fixed values provided in the form and mi is the modulus. The first line contains the integer n — the number of participants. Each of the following n lines contains five integers li, bi, 1, vi, wj, mi (0 ≤ bi, 1 < mi ≤ 10^9, 1 ≤ vi, wj ≤ 10^9) — the number of problems of the i-th participant, the initial difficulty value, and three parameters for generating subsequent difficulties. For all j from 2 to li, inclusive, the values are generated by the formula bi, j. Your task is to compute and arrange these problems in a way that the number of \\"difficult transitions\\" (consecutive problems where the latter has a higher difficulty level than the former) is minimized. The first line should output a single number — the number of \\"difficult transitions\\" in the optimal order. If the total number of problems does not exceed 200000, also output the details of the order as lines composed of two integers separated by a space — the difficulty level of the problem and the participant who offered this problem, respectively. Participants are numbered from 1 to n as per input order. Example: Input: ``` 2 2 5 3 2 100 2 4 1 5 50 ``` Output: ``` 0 4 2 5 1 7 1 9 2 ``` Explanation: We\'ve got two participants. The first problem from the first participant has an initial difficulty of 5, and the second problem\'s difficulty is (5 + 3 * 2) % 100 = 11. The first problem from the second participant has a difficulty of 4, and the second problem\'s difficulty is (4 + 1 * 5) % 50 = 9. By arranging the problems as 4, 5, 7, 9, there\'s no \\"difficult transition\\" since difficulties increase sequentially.","solution":"def generate_difficulties(l, b1, v, w, m): difficulties = [b1] for j in range(1, l): next_difficulty = (difficulties[-1] + v * w) % m difficulties.append(next_difficulty) return difficulties def minimize_difficult_transitions(n, participants): all_problems = [] for i, (l, b1, v, w, m) in enumerate(participants): difficulties = generate_difficulties(l, b1, v, w, m) problems = [(difficulty, i + 1) for difficulty in difficulties] all_problems.extend(problems) all_problems.sort() difficult_transitions = 0 for i in range(1, len(all_problems)): if all_problems[i][0] < all_problems[i - 1][0]: difficult_transitions += 1 return difficult_transitions, all_problems def solve(n, participants): difficult_transitions, ordered_problems = minimize_difficult_transitions(n, participants) print(difficult_transitions) if len(ordered_problems) <= 200000: for problem in ordered_problems: print(problem[0], problem[1]) # Example usage: n = 2 participants = [ (2, 5, 3, 2, 100), (2, 4, 1, 5, 50), ] solve(n, participants)"},{"question":"You are given a list of integers which represents the heights of buildings in a straight line from left to right. Each building has a width of 1 unit. You are to find the largest rectangular area that can be formed by a contiguous subset of buildings. The height of the rectangle is determined by the shortest building in the subset, and the width is determined by the number of buildings in the subset. Write a function `largestRectangleArea(buildings: List[int]) -> int` that takes in a list of non-negative integers and returns the area of the largest rectangle that fits these criteria. # Input - A single line containing space-separated integers representing the heights of the buildings. The length of this list will be between 1 and 10^5. # Output - A single integer representing the maximum area of the rectangle that can be formed by a contiguous subset of buildings. # Examples Example 1 Input: ``` 2 1 5 6 2 3 ``` Output: ``` 10 ``` Example 2 Input: ``` 2 4 ``` Output: ``` 4 ``` # Explanation - For the first example, the largest rectangle area can be formed by using buildings with heights 5 and 6, giving an area of 5 * 2 = 10. - For the second example, the largest rectangle area can be formed by using the single building with height 4, giving an area of 4 * 1 = 4.","solution":"from typing import List def largestRectangleArea(buildings: List[int]) -> int: stack = [] max_area = 0 index = 0 while index < len(buildings): if not stack or buildings[stack[-1]] <= buildings[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (buildings[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (buildings[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a 2D matrix of size `n x m` where each cell contains an integer, implement an algorithm that rotates the matrix 90 degrees clockwise. The final rotated matrix should be returned. For example, given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` the rotated matrix should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Your implementation should correctly handle matrices of varying sizes, including edge cases where `n` or `m` is 1. **Note:** You are not allowed to use any extra space other than variables to store loop counters and temporary variables for swapping elements. Your code should have the following signature: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Second, reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"You are given an array of integers ( text{a} ) of size ( n ). Your task is to determine the fewest number of operations required to make all elements of the array equal. In one operation, you can either: 1. Select a subarray (contiguous part of the array) and add 1 to each element of the subarray. 2. Select a subarray and subtract 1 from each element of the subarray. Write a function that returns the minimum number of operations needed. # Input - The first line contains a single integer ( n ) ((1 leq n leq 10^5)) — the size of the array. - The second line contains ( n ) integers ( a_i ) ((|a_i| leq 10^9)) — the elements of the array. # Output - Print a single integer — the minimum number of operations required to make all elements of the array equal. # Example Input ``` 5 2 2 2 2 2 ``` Output ``` 0 ``` Input ``` 5 1 3 5 7 9 ``` Output ``` 4 ``` # Note In the second example, the optimal set of operations would be: - Increment the subarray ( [1, 5] ) four times each, reducing the problem to having all elements equal to 9. By processing the elements in this way, you ensure that all become identical with the minimum number of operations required.","solution":"def min_operations_to_equal_elements(n, a): Returns the minimum number of operations required to make all elements in array a equal. # The target is to make all elements equal to the median of the array sorted_a = sorted(a) median = sorted_a[n // 2] # Calculate the number of operations required operations = sum(abs(x - median) for x in a) return operations"},{"question":"You are given a sequence of integers a1, a2, ..., an. You can perform an operation on any subarray of this sequence, where a subarray is defined as any contiguous segment of the original array. The operation involves picking any subarray and increasing each element of that subarray by 1. You need to determine the minimum number of operations required to make all elements of the array equal. The first line contains a single positive integer n (1 ≤ n ≤ 100,000) — the number of integers in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the initial sequence. In a single line, print a single integer — the minimum number of operations required to make all elements of the array equal. **Example:** ``` Input: 3 1 2 3 Output: 2 Input: 4 5 5 5 5 Output: 0 ``` **Explanation:** In the first example, we can make the array elements equal with the following operations: 1. Increment the subarray [1, 2] by 1 to get [2, 3, 3] 2. Increment the subarray [2] by 1 to get [3, 3, 3] In the second example, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_array(n, array): Returns the minimum number of operations required to make all elements of the array equal. max_val = max(array) min_val = min(array) return max_val - min_val"},{"question":"Polycarp has a sequence of n integers a_1, a_2, ldots, a_n. He can perform the following operation on it any number of times: - Select any subarray of the sequence and reverse its order. Polycarp needs to make all the elements in the sequence equal using the minimum number of reversal operations. Your task is to help Polycarp determine the minimum number of reversals required to do so. The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case contains two lines: - The first line contains a single integer n (1 leq n leq 2000) — the number of elements in the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100). For each test case, output a single number — the minimum number of reversals required to make all the elements in the sequence equal. **Example input:** ``` 3 4 1 3 2 1 5 3 3 3 3 3 6 1 2 1 2 1 2 ``` **Example output:** ``` 2 0 3 ``` Explanation: 1. For the first test case, you can reverse the subarray [1, 3, 2] to get [1, 2, 3, 1], then reverse the entire array to get [1, 1, 3, 2], and finally reverse the subarray [3, 2] to get [1, 1, 1, 1], using a total of 2 reversals. 2. For the second test case, all elements are already the same, so no reversals are required. 3. For the third test case, you can reverse the subarray [1, 2, 1] to get [1, 1, 2, 2, 1, 2], then reverse the entire array to get [2, 1, 2, 2, 1, 1], and finally reverse the subarray [2, 1, 1] to get [2, 1, 1, 2, 2, 2], using a total of 3 reversals.","solution":"def min_reversals_to_make_equal(t, test_cases): results = [] for case in test_cases: n, a = case max_frequency = max(a.count(x) for x in set(a)) min_reversals = n - max_frequency results.append(min_reversals) return results"},{"question":"You are given an integer array a consisting of n integers and a target number x. Your task is to determine if there exists a pair of indices (i, j) (1 leq i < j leq n) such that a_i + a_j = x. The first line contains two integers n and x (1 leq n leq 10^5, 1 leq x leq 10^9) — the length of the array and the target sum respectively. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. If there is such a pair, print \\"YES\\", otherwise print \\"NO\\". # Examples: Input ``` 4 8 1 2 3 5 ``` Output ``` YES ``` Explanation In the first example, the pair (2, 3) has a sum of 8 (3 + 5). Input ``` 5 10 1 2 3 4 5 ``` Output ``` NO ``` Explanation In the second example, there is no pair of elements that sum up to 10.","solution":"def has_pair_with_sum(a, x): Determines if there exists a pair of elements in the list a that sum up to x. :param a: List of integers :param x: Target sum :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for number in a: if x - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\" # Example usage: # n = 4 # x = 8 # a = [1, 2, 3, 5] # print(has_pair_with_sum(a, x)) # Output should be: YES"},{"question":"A large technology firm is organizing a team-building puzzle-solving event. Among the challenges, one is a string manipulation puzzle. The participants are given a string s consisting of lowercase Latin letters and need to determine if it can be rearranged to form a palindromic string. A palindromic string reads the same forwards and backwards. To solve this puzzle, participants must write a function that, given a string s, returns \\"YES\\" if it is possible to rearrange the string to form a palindrome and \\"NO\\" otherwise. # Input - The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), which consists only of lowercase Latin letters. # Output - The output should be a single line: \\"YES\\" if the given string can be rearranged to form a palindrome, and \\"NO\\" otherwise. # Examples Example 1 Input: ``` civic ``` Output: ``` YES ``` Example 2 Input: ``` ivicc ``` Output: ``` YES ``` Example 3 Input: ``` hello ``` Output: ``` NO ``` Example 4 Input: ``` aabb ``` Output: ``` YES ```","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Parameters: s (str): The input string consisting of lowercase Latin letters. Returns: str: \\"YES\\" if it\'s possible to rearrange the string to form a palindrome, \\"NO\\" otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a list of words and a target word. Your task is to find the smallest subset of the list such that the concatenation of all words in the subset contains all the characters of the target word at least once. The first line of the input contains an integer n (1 ≤ n ≤ 20) — the number of words in the list. The second line contains the target word which consists of lowercase English letters with length between 1 and 50 characters. Each of the next n lines contains a word, consisting of lowercase English letters, with length between 1 and 50 characters. Output the size of the smallest subset of words that contains all characters of the target word at least once. If it\'s not possible, output -1. If there are multiple subsets of the same size, output the smallest lexicographical subset. Example input: 4 apple ael pe pl ae Example output: 2 Explanation: The subset [\\"ael\\", \\"pe\\"] or [\\"ael\\", \\"ae\\"] are both valid and contain the characters \'a\', \'p\', \'l\', and \'e\'. Both have length 2, which is the smallest possible.","solution":"from itertools import combinations def smallest_subset_size(n, target_word, words): def contains_all_chars(word, target_chars): for char in target_chars: if char in word: target_chars = target_chars.replace(char, \'\', 1) return not target_chars target_chars = \'\'.join(set(target_word)) for size in range(1, n+1): for combo in combinations(words, size): combined = \'\'.join(combo) if contains_all_chars(combined, target_chars): return size return -1"},{"question":"Alice and Bob are playing a string manipulation game. Each player is given a string of lowercase English letters of equal length. Alice always starts first. The players take turns choosing a single character from their respective strings and writing it down on a common piece of paper. The selected character should be removed from the player\'s string after being written down. The game ends when all characters from both strings are written down. After the game ends, the two players calculate their respective scores. For Alice, the score is calculated by summing the ASCII values of the characters she chose. Similarly, Bob\'s score is calculated by summing the ASCII values of the characters he chose. The player with the highest score wins the game. If both scores are equal, the game ends with a draw. Your task is to determine the outcome of the game given that both Alice and Bob play optimally well. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the strings. - The second line contains string a — Alice\'s string of length n. - The third line contains string b — Bob\'s string of length n. Output: - Print \\"Alice\\", if Alice wins. - Print \\"Bob\\", if Bob wins. - Print \\"Draw\\", if the game ends with a draw. Example: Input: 4 acbd dbca Output: Draw","solution":"def determine_winner(n, a, b): Determines the winner of the string manipulation game between Alice and Bob. Parameters: n (int): The length of the strings a and b. a (str): Alice\'s string. b (str): Bob\'s string. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, and \\"Draw\\" if the game ends with a draw. alice_score = sum(ord(char) for char in a) bob_score = sum(ord(char) for char in b) if alice_score > bob_score: return \\"Alice\\" elif bob_score > alice_score: return \\"Bob\\" else: return \\"Draw\\""},{"question":"Imagine you are given a `m × n` matrix of different characters. You need to determine if there is a cycle in the matrix. A cycle is a path of the same character that starts and ends at the same cell, and visits at least one other cell. From a given cell, you can move to one of the neighbouring cells which share a common side. Input: - The first line contains two integers m and n (1 ≤ m, n ≤ 1,000) – the number of rows and columns in the matrix. - The next m lines contain a string of length n consisting of lowercase English letters. Output: - Output \\"Yes\\" (without quotes) if there is a cycle in the matrix, otherwise print \\"No\\" (without quotes). Example: Input: 3 4 aaaa abca aaaa Output: Yes Explanation: In the given matrix: ``` aaaa abca aaaa ``` A cycle is formed by the character \'a\' at positions (0,0), (0,1), (1,1), and (0,0) again, visiting the cell (1,1) which is a different cell, hence forming a cycle. Note: - You can only move to the neighboring cells (up, down, left, right). - Same cell can’t be traversed more than once within the same \'cycle check\' exploration to validate the cycle formation.","solution":"def contains_cycle(matrix, m, n): def dfs(x, y, from_x, from_y, char): if visited[x][y]: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: next_x, next_y = x + dx, y + dy if 0 <= next_x < m and 0 <= next_y < n and (next_x != from_x or next_y != from_y) and matrix[next_x][next_y] == char: if dfs(next_x, next_y, x, y, char): return True return False visited = [[False]*n for _ in range(m)] for i in range(m): for j in range(n): if not visited[i][j]: if dfs(i, j, -1, -1, matrix[i][j]): return \\"Yes\\" return \\"No\\" def input_to_matrix(input_string): lines = input_string.strip().split(\'n\') m, n = map(int, lines[0].split()) matrix = [list(line) for line in lines[1:]] return matrix, m, n"},{"question":"You are given an undirected graph with n nodes labeled from 1 to n and m edges. You need to determine if there is a simple cycle (a path that starts and ends at the same node and visits each node exactly once along the way) that includes all the nodes of the graph. The first line of the input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 4950) indicating the number of nodes and edges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) which indicate an edge between nodes u and v. Output a single word \\"YES\\" if such a cycle exists and \\"NO\\" otherwise. Example input: 4 4 1 2 2 3 3 4 4 1 Example output: YES Explanation: The graph forms a simple cycle: 1 -> 2 -> 3 -> 4 -> 1.","solution":"def is_hamiltonian_cycle_possible(n, edges): from itertools import permutations if n <= 2: return \\"NO\\" # Convert edges to adjacency matrix adj = [[False]*n for _ in range(n)] for u, v in edges: adj[u-1][v-1] = adj[v-1][u-1] = True # Check all permutations of vertices to see if they form a Hamiltonian cycle nodes = list(range(n)) for perm in permutations(nodes): found_cycle = True # Check the cycle for i in range(n): if not adj[perm[i]][perm[(i+1) % n]]: found_cycle = False break if found_cycle: return \\"YES\\" return \\"NO\\" # Example Usage n = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(is_hamiltonian_cycle_possible(n, edges)) # Output: YES"},{"question":"In a magical forest, there are n enchanted trees arranged in a straight line. Each tree has a certain enchantment level associated with it. Over time, forest keepers cast spells to increase the enchantment levels of trees within specific ranges. A spell is defined by two integers, Li and Ri, which indicate that the enchantment levels of all trees from Li to Ri (inclusive) should be incremented by 1. Given q spells, determine the final enchantment levels of all trees after applying all the spells. **Input:** - The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000), the number of trees and the number of spells respectively. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), the initial enchantment levels of the trees. - The following q lines each contain two integers Li and Ri (1 ≤ Li ≤ Ri ≤ n), denoting the range of each spell. **Output:** - Print a single line with n integers, the final enchantment levels of the trees from left to right after all spells have been applied. **Example:** ``` Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 3 4 5 5 6 ``` **Explanation:** - Initially, the enchantment levels are [1, 2, 3, 4, 5]. - After the first spell (1, 3): [2, 3, 4, 4, 5] - After the second spell (2, 4): [2, 4, 5, 5, 5] - After the third spell (1, 5): [3, 5, 6, 6, 6]","solution":"def apply_spells(n, q, initial_levels, spells): Returns the final enchantment levels of trees after applying all spells. Parameters: n (int): Number of trees. q (int): Number of spells. initial_levels (list of int): Initial enchantment levels of the trees. spells (list of tuple): List of spells represented by (Li, Ri). Returns: list: Final enchantment levels of the trees. # Initialize a difference array diff = [0] * (n + 1) for Li, Ri in spells: diff[Li - 1] += 1 if Ri < n: diff[Ri] -= 1 # Apply the difference array to get final increments increment = 0 for i in range(n): increment += diff[i] initial_levels[i] += increment return initial_levels"},{"question":"The Roman Empire used a peculiar system for writing numbers known as Roman numerals. Roman numerals are based on combinations of the following seven symbols: Symbol Value I -> 1 V -> 5 X -> 10 L -> 50 C -> 100 D -> 500 M -> 1000 Given a positive integer, convert it to its corresponding Roman numeral representation. The integer input will be between 1 and 3999 inclusive. The following are rules for Roman numerals: 1. The symbols are written from largest to smallest from left to right. 2. When a smaller symbol appears before a larger symbol, it is subtracted (e.g., IV = 4, IX = 9). 3. The same symbol cannot be repeated more than three times in a row. Implement a function which takes an integer as input and returns a string representing the Roman numeral form of that integer. # Input - An integer n, where 1 ≤ n ≤ 3999 # Output - A string representing the Roman numeral of the number # Example Input ``` 58 ``` Output ``` LVIII ``` Input ``` 1994 ``` Output ``` MCMXCIV ``` # Function Signature ```python def int_to_roman(n: int) -> str: pass ```","solution":"def int_to_roman(n: int) -> str: Convert an integer to a Roman numeral. :param n: Integer input (1 ≤ n ≤ 3999) :return: A string representing the Roman numeral of the integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" i = 0 while n > 0: for _ in range(n // val[i]): roman_numeral += syms[i] n -= val[i] i += 1 return roman_numeral"},{"question":"Given a directed graph with `n` nodes and `m` edges, where each edge has a weight, your task is to find the shortest path distances from a given source node to all other nodes in the graph. The edges may have negative weights, but there are no negative weight cycles. Input: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000), representing the number of nodes and the number of edges respectively. - The second line contains an integer `s` (1 ≤ s ≤ n), representing the source node. - The next `m` lines each contain three integers `u`, `v`, and `w` (-10,000 ≤ w ≤ 10,000), representing a directed edge from node `u` to node `v` with weight `w`. Output: - Output `n` space-separated integers, where the `i-th` integer represents the shortest distance from the source node `s` to node `i+1`. If a node is not reachable from the source, output `infinity` for that node. Example: ``` Input 5 7 1 1 2 -1 1 3 4 2 3 3 2 4 2 2 5 2 4 2 1 5 4 -3 Output 0 -1 2 -2 1 ``` Explanation: - The shortest distance from node 1 to itself is 0. - The shortest distance from node 1 to node 2 is -1 (1 -> 2). - The shortest distance from node 1 to node 3 is 2 (1 -> 2 -> 3). - The shortest distance from node 1 to node 4 is -2 (1 -> 2 -> 5 -> 4). - The shortest distance from node 1 to node 5 is 1 (1 -> 2 -> 5). Use the Bellman-Ford algorithm to solve this problem, as it handles graphs with negative weight edges. Implement the solution efficiently to ensure it runs within the given constraints. Explanation: This problem is suitable for a coding assessment as it requires understanding of graphs, traversal algorithms (specifically Bellman-Ford), and handling edge cases such as unreachable nodes and negative weights. It is also of comparable length and complexity to the provided question.","solution":"def bellman_ford(n, m, s, edges): Finds shortest path distances from a source node to all other nodes in a directed graph. Parameters: n (int): Number of nodes m (int): Number of edges s (int): Source node (1-indexed) edges (list of tuples): List of edges (u, v, w) Returns: list: Shortest distance from source to each node (0-indexed), \'infinity\' if not reachable # Initialize distance list dist = [float(\'inf\')] * n dist[s-1] = 0 # Relax all edges (n-1) times for _ in range(n-1): for u, v, w in edges: if dist[u-1] != float(\'inf\') and dist[u-1] + w < dist[v-1]: dist[v-1] = dist[u-1] + w # Check for negative weight cycles for u, v, w in edges: if dist[u-1] != float(\'inf\') and dist[u-1] + w < dist[v-1]: raise ValueError(\\"Graph contains a negative weight cycle\\") # Replace \'inf\' with string \'infinity\' as requested dist = [\'infinity\' if x == float(\'inf\') else x for x in dist] return dist"},{"question":"You are given a rectangular grid of dimensions n x m. Each cell in the grid can either be an obstacle or a free space. Your task is to determine if there exists a path from the top-left corner to the bottom-right corner of the grid, passing only through free spaces and moving only up, down, left, or right. You will be given the grid as an array of strings, where \'1\' represents a free space and \'0\' represents an obstacle. Your function should output \\"YES\\" if a path exists and \\"NO\\" otherwise. Input: - The first line contains two integers, n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), which are the dimensions of the grid. - The next n lines contain strings of length m, consisting of characters \'1\' and \'0\'. Output: - Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner. Otherwise, print \\"NO\\". Example: Input: 5 5 11000 01100 00110 00011 00001 Output: YES Input: 5 5 11000 01000 00110 01011 00001 Output: NO Note: Consider implementing a graph traversal algorithm such as Breadth-First Search (BFS) or Depth-First Search (DFS) to determine the existence of the path.","solution":"def is_path_exists(n, m, grid): Determines if there exists a path from the top-left corner to the bottom-right corner of the grid, passing only through free spaces (denoted by \'1\') and moving only up, down, left, or right. Args: n: int, number of rows in the grid. m: int, number of columns in the grid. grid: List of strings, each string representing a row in the grid (values are \'1\' or \'0\'). Returns: str: \\"YES\\" if there exists a path, \\"NO\\" otherwise. from collections import deque if grid[0][0] == \'0\' or grid[n-1][m-1] == \'0\': return \\"NO\\" queue = deque([(0, 0)]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'1\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Ashley\'s hobby is working with numbers and discovering new patterns. Recently, she has been intrigued by special numbers she calls \\"Quasi-Primes\\". A number is considered a Quasi-Prime if it has exactly three positive divisors, including 1 and itself. Ashley wants to count how many Quasi-Primes exist in the range from 1 to a given number N. Write a program to help her find that count. The first line contains an integer T (1 ≤ T ≤ 10^5) — the number of test cases. Each of the next T lines contains an integer N (1 ≤ N ≤ 10^6), representing the limit of the range (from 1 to N) within which you need to count the Quasi-Primes. Output T integers. For each test case, output the count of Quasi-Primes within the given range. Note: Quasi-Primes are numbers whose only divisors are 1, p, and p^2 for some prime p. Therefore, Quasi-Primes are always squares of prime numbers.","solution":"def count_quasi_primes(n): Returns the count of Quasi-Primes up to number n. Quasi-Primes are numbers of the form p^2 where p is a prime number. if n < 2: return 0 is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False quasi_primes_count = 0 for i in range(2, int(n**0.5) + 1): if is_prime[i] and i*i <= n: quasi_primes_count += 1 return quasi_primes_count def process_queries(T, queries): results = [] for n in queries: results.append(count_quasi_primes(n)) return results"},{"question":"You are given an undirected connected graph with n nodes and m edges. Each edge has an associated positive integer weight. To make your travels more efficient, you want to find the minimum spanning tree (MST) of this graph. However, due to certain restrictions, you can only use edges whose weights are divisible by a given integer d. Your task is to compute the weight of the minimum spanning tree that uses only edges with weights divisible by d. If it\'s not possible to form such an MST, return -1. Input: - The first line contains three integers n, m, and d — the number of nodes, the number of edges, and the integer d (1 ≤ n ≤ 1000, 1 ≤ m ≤ 20000, 1 ≤ d ≤ 100). - The next m lines each contain three integers u, v, and w — representing an edge between nodes u and v with weight w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000). - The graph is guaranteed to be connected. Output: - Print a single integer — the total weight of the MST that uses only edges with weights divisible by d. If no such MST can be formed, print -1. Example: Input: 4 5 3 1 2 3 1 3 6 2 3 3 2 4 9 3 4 5 Output: 18 Explanation: The edges used in the MST with weights divisible by 3 are (1-2: 3), (2-3: 3), and (2-4: 9). Their total weight is 3 + 3 + 9 = 15. No MST can use only the allowed edges. The answer should be -1.","solution":"def find_MST(n, m, d, edges): parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 valid_edges = [edge for edge in edges if edge[2] % d == 0] valid_edges.sort(key=lambda x: x[2]) mst_weight = 0 mst_edges = 0 for u, v, w in valid_edges: if find(u) != find(v): union(u, v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break if mst_edges == n - 1: return mst_weight else: return -1 # Example usage: # edges = [(1, 2, 3), (1, 3, 6), (2, 3, 3), (2, 4, 9), (3, 4, 5)] # print(find_MST(4, 5, 3, edges)) # Output should be 15"},{"question":"You are given a list of n employees, where each employee has worked for a certain number of years in the company and has achieved a certain performance score. The employee\'s performance score is an integer value representing their achievements. The company wants to promote a subset of these employees based on their years of service and performance scores. The selection criteria are as follows: 1. An employee can only be selected if they have worked for at least a minimum number of years (k years) specified by the company. 2. Among the employees who meet the minimum years of service requirement, select the ones who have the highest performance scores. Write a function `selectForPromotion` that takes an integer k and a list of tuples representing the employees. Each tuple contains two integers: the first integer is the number of years the employee has worked, and the second integer is their performance score. The function should return a list of tuples representing the employees who are selected for promotion, sorted in descending order based on their performance scores. If two employees have the same performance score, the one with more years of service should come first. If there\'s still a tie, they can appear in any order. **Function Signature** ```python def selectForPromotion(k: int, employees: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` **Input** - An integer `k` (1 ≤ k ≤ 100). - A list of n tuples where each tuple contains two integers `(years, score)` (0 ≤ years ≤ 100, 0 ≤ score ≤ 100), where `n` is the number of employees. **Output** - A list of tuples representing the selected employees, sorted in descending order based on their performance scores. **Examples** ```python selectForPromotion(5, [(3, 50), (7, 85), (10, 90), (5, 80), (8, 75), (6, 90)]) # Output: [(10, 90), (6, 90), (7, 85), (5, 80), (8, 75)] selectForPromotion(10, [(10, 60), (12, 70), (9, 85), (14, 90)]) # Output: [(14, 90), (12, 70), (10, 60)] selectForPromotion(3, [(2, 65), (3, 70), (4, 75), (4, 60), (5, 80)]) # Output: [(5, 80), (4, 75), (3, 70), (4, 60)] ```","solution":"from typing import List, Tuple def selectForPromotion(k: int, employees: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Select employees for promotion based on minimum years of service and performance scores. Args: k: int - Minimum years of service required for promotion eligibility. employees: List[Tuple[int, int]] - List of tuples containing (years of service, performance score). Returns: List[Tuple[int, int]] - List of tuples representing the selected employees, sorted in descending order based on performance scores. # Filter out employees who don\'t meet the minimum years of service requirement eligible_employees = [emp for emp in employees if emp[0] >= k] # Sort eligible employees by performance score in descending order, # and by years of service in descending order if scores are tied. eligible_employees.sort(key=lambda x: (-x[1], -x[0])) return eligible_employees"},{"question":"You are given an integer array a of length n. For each element in the array, find the number of elements to its right that are smaller than the element itself. For instance, The first line of input contains a single integer t (1 leq t leq 2000) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. For each test case, output n integers, where the i-th integer is the number of elements to the right of a_i that are smaller than a_i. Example: Input: 2 5 5 2 6 1 3 4 4 3 2 1 Output: 3 1 2 0 0 3 2 1 0","solution":"def count_smaller_elements_to_right(arr): Given an array arr, return a list where each element represents the number of elements to its right that are smaller than itself. n = len(arr) result = [0] * n for i in range(n): count = 0 for j in range(i + 1, n): if arr[j] < arr[i]: count += 1 result[i] = count return result def process_test_cases(test_cases): Given multiple test cases, process each and return their corresponding results. results = [] for n, arr in test_cases: results.append(count_smaller_elements_to_right(arr)) return results"},{"question":"A shipment of supplies is being delivered to a group of space stations located along a straight line. Each space station requires a specific amount of supplies, and the cargo ship can carry an exact total of these supplies. However, the ship must make stops at each intermediate space station, and at each stop, it must unload the exact amount of supplies required by that station. Furthermore, due to security protocol, the ship\'s path should minimize the number of stops where supply is unloaded. The ship can only unload at most one type of supply (i.e., supplies for only one space station) at each stop. Your task is to write a program to determine the minimum number of stops required to deliver supplies to all space stations. The input file contains: - A single integer `n` representing the number of space stations (1 ≤ n ≤ 100). - An array of `n` integers `a` where `a[i]` represents the amount of supplies required by the ith space station (1 ≤ a[i] ≤ 100). Print a single integer representing the minimum number of stops required to deliver all supplies. **Example**: Input: ``` 4 3 2 4 1 ``` Output: ``` 4 ``` Explanation: To minimize the stops, the ship should stop at each of the 4 space stations and unload the exact amount of supplies required for each. Thus, the minimum number of stops required is 4.","solution":"def minimum_stops(n, a): Returns the minimum number of stops required to deliver supplies to all space stations. Parameters: n (int): The number of space stations. a (list of int): The amount of supplies required by each space station. Returns: int: The minimum number of stops required. # Each space station needs a separate stop because each requires a unique amount of supplies return n"},{"question":"Implement a function that takes a string `text` and an integer `width`, then returns a list of strings representing the text wrapped to the given width. Text should be wrapped such that: - Each line is at most `width` characters long. - Words should not be split between lines; if a word does not fit within the width, it should be moved to the next line. - There should be no trailing spaces in the lines. # Detailed Description: The wrapping should ensure that: 1. Only complete words should be on each line (words are separated by spaces). 2. Leading and trailing spaces on each line should be removed. 3. If a word itself is longer than the width, it should be placed on a new line by itself. 4. The function should maintain the order of the words as they appear in the input `text`. The function signature is: ```python def wrap_text(text: str, width: int) -> List[str]: ``` # Input: - `text`: A string consisting of words separated by single spaces. There will be no leading or trailing spaces and no multiple spaces between words. - `width`: A positive integer representing the maximum number of characters per line. # Output: - A list of strings, where each string is a wrapped portion of the input text. # Example: ```python >>> wrap_text(\\"The quick brown fox jumps over the lazy dog\\", 10) [\'The quick\', \'brown fox\', \'jumps over\', \'the lazy\', \'dog\'] >>> wrap_text(\\"This is an example of text wrapping.\\", 8) [\'This is\', \'an\', \'example\', \'of text\', \'wrapping.\'] ``` # Constraints: - `1 <= len(text) <= 10^4` - `1 <= width <= 10^4`","solution":"from typing import List def wrap_text(text: str, width: int) -> List[str]: Wraps the text into lines with each line at most `width` characters long. Words are not split between lines. words = text.split() lines = [] current_line = [] for word in words: # Check if the word can fit in the current line if current_line and len(\' \'.join(current_line) + \' \' + word) > width: # If it can\'t, finalize the current line and start a new one lines.append(\' \'.join(current_line)) current_line = [word] else: # If it can, add the word to the current line current_line.append(word) if current_line: lines.append(\' \'.join(current_line)) return lines"},{"question":"Given is a list of n integers, where each integer is guaranteed to be in the range from 1 to k (inclusive). Your task is to determine whether it is possible to divide this list into two non-empty parts such that the greatest common divisor (GCD) of the numbers in each part is greater than 1. The first line of input contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the size of the list and the maximum possible value in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ k) — the elements of the list. Print \\"YES\\" (without quotes) if it is possible to divide the list as described above, otherwise print \\"NO\\". # Example Input 4 6 4 6 8 9 Output YES Input 5 5 1 2 3 4 5 Output NO # Notes In the first example, one possible way to split the list is to take [4, 8] and [6, 9]. The GCD of the first part is 4 (which is greater than 1), and the GCD of the second part is 3 (which is also greater than 1). In the second example, it is not possible to split the list into two parts where the GCD of each part is greater than 1.","solution":"from math import gcd from itertools import combinations def can_divide_with_gcd_greater_than_one(n, k, arr): def find_gcd(nums): g = nums[0] for num in nums[1:]: g = gcd(g, num) return g for i in range(1, n): left_part = arr[:i] right_part = arr[i:] if find_gcd(left_part) > 1 and find_gcd(right_part) > 1: return \\"YES\\" return \\"NO\\""},{"question":"Given a set of integers, find a strictly increasing sub-sequence of maximum length. A strictly increasing sub-sequence is a sequence such that each element is greater than the preceding one. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the sequence. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000), the elements of the sequence. **Output:** - On the first line, print the length of the longest strictly increasing sub-sequence. - On the second line, print the elements of the longest strictly increasing sub-sequence separated by spaces. If there are multiple such sub-sequences, print any one of them. **Example:** **Input:** ``` 8 10 22 9 33 21 50 41 60 ``` **Output:** ``` 5 10 22 33 50 60 ``` **Explanation:** One possible longest strictly increasing sub-sequence is 10, 22, 33, 50, and 60. Note that there could be other sub-sequences of the same length; in this case, any strictly increasing sequence of maximum length will be accepted as a correct answer.","solution":"def longest_increasing_subsequence(sequence): n = len(sequence) if n == 0: return 0, [] dp = [1] * n parent = [-1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 parent[i] = j max_length = max(dp) index = dp.index(max_length) lis = [] while index != -1: lis.append(sequence[index]) index = parent[index] lis.reverse() return max_length, lis"},{"question":"You are given an array of n integers. Your task is to sort the array in such a way that the first and second halves of the array are sorted in non-decreasing and non-increasing order, respectively. In other words, the first half of the array should be sorted in ascending order and the second half of the array should be sorted in descending order. The input contains a single integer n (1 ≤ n ≤ 100 000) representing the number of elements in the array, followed by an array of n integers where each element ai (1 ≤ ai ≤ 10^9). Output the transformed array or if it\'s impossible to split array return -1 otherwise output the transformed array in a single line. Note that if n is odd, the first half should contain the extra element (i.e., ⌈n/2⌉ elements). Example: Input: 7 5 9 1 3 6 2 4 Output: 1 3 5 9 6 4 2 Input: 4 1 1 1 1 Output: 1 1 1 1","solution":"def split_sort_array(n, arr): if n == 1: return arr mid = (n + 1) // 2 first_half = sorted(arr[:mid]) second_half = sorted(arr[mid:], reverse=True) return first_half + second_half"},{"question":"Design a function that takes a list of integers representing the weights of boxes and an integer, `target`, representing the maximum allowed weight a single shipment can carry. Your task is to return the minimum number of shipments required to transport all the boxes without exceeding the target weight for any shipment. You can assume that the weights of the individual boxes are all less than or equal to the target weight. You need to implement a function with the following signature: ```python def min_shipments(boxes: List[int], target: int) -> int: ``` # Example: ```python # Example 1: boxes = [10, 5, 10, 5] target = 15 min_shipments(boxes, target) # Output: 2 # Example 2: boxes = [1, 2, 3, 4, 5] target = 10 min_shipments(boxes, target) # Output: 2 ``` # Constraints: - All weights of the boxes are positive integers and each is less than or equal to the target. - The length of the boxes list will be at most 1000. - The target weight is a positive integer.","solution":"from typing import List def min_shipments(boxes: List[int], target: int) -> int: Returns the minimum number of shipments required to transport all boxes without exceeding the target weight for any shipment. boxes.sort(reverse=True) shipments = 0 while boxes: current_shipment = 0 to_remove = [] for i, box in enumerate(boxes): if current_shipment + box <= target: current_shipment += box to_remove.append(i) if current_shipment == target: break for index in reversed(to_remove): boxes.pop(index) shipments += 1 return shipments"},{"question":"A string s consisting of only the characters \'A\' and \'B\' is given. A balanced substring is defined as a substring that contains equal number of \'A\' and \'B\'. Given q queries, each query contains two numbers l and r (1 le l le r le |s|). For each query, find the length of the longest balanced substring within the range [l, r]. The first line contains the string s (1 le |s| le 10^5). The second line contains an integer q (1 le q le 10^4) — the number of queries. Each of the next q lines contains two integers l and r (1 le l, r le |s|) — the indices which define the range for the query. Output q lines. The i-th line should contain the answer for the i-th query: the length of the longest balanced substring within the specified range. **Example:** Input: ``` ABBA 3 1 4 1 2 2 4 ``` Output: ``` 4 2 2 ```","solution":"def longest_balanced_substring(s, queries): from itertools import accumulate # Pre-process prefix sum array prefix_sum = [0] + list(accumulate(1 if ch == \'A\' else -1 for ch in s)) # Function to find the longest balanced substring in range [l, r] def get_longest_balanced(l, r): balance_indices = {} max_length = 0 for i in range(l - 1, r + 1): balance = prefix_sum[i] if balance in balance_indices: max_length = max(max_length, i - balance_indices[balance]) else: balance_indices[balance] = i return max_length results = [] for l, r in queries: results.append(get_longest_balanced(l, r)) return results # Example usage: # s = \\"ABBA\\" # queries = [(1, 4), (1, 2), (2, 4)] # print(longest_balanced_substring(s, queries)) # Output: [4, 2, 2]"},{"question":"A prestigious university is conducting a new online course, and they want to implement a grading system that awards students not only for their scores but also for their improvement over time. The course consists of m assignments, each with a maximum score of 100. Each student has a unique ID and their scores for each assignment are recorded in the same order. To encourage sustained improvement, the university wants to check if a student\'s scores form a strictly increasing sequence, meaning each score is higher than the previous one. If a student\'s scores do form such a sequence, they will qualify for an \\"Improvement Award\\". Write a function `improvement_award(m, scores)` that takes the number of assignments `m` (1 ≤ m ≤ 100) and a list of `scores`, which is a list of k lists, where each sublist contains the scores of one student for the m assignments (1 ≤ k ≤ 100 and 0 ≤ score ≤ 100 for each score in scores). The function should return a list of student IDs (starting from 1) that qualify for the \\"Improvement Award\\" in ascending order of their IDs. # Input - An integer `m` representing the number of assignments. - A list of lists `scores` with k sublists, each containing `m` integers representing the scores of each student. # Output - A list of integers representing the student IDs that qualify for the \\"Improvement Award\\" in ascending order. # Example ```python improvement_award(3, [[50, 60, 70], [90, 85, 87], [10, 20, 30]]) ``` Output: ```python [1, 3] ``` # Explanation - Student 1 scores: [50, 60, 70] (strictly increasing) - Student 2 scores: [90, 85, 87] (not strictly increasing) - Student 3 scores: [10, 20, 30] (strictly increasing) Students 1 and 3 qualify for the \\"Improvement Award\\". Therefore, the output is [1, 3].","solution":"def improvement_award(m, scores): Returns the list of student IDs who have strictly increasing scores over `m` assignments. award_students = [] for student_id, student_scores in enumerate(scores, start=1): if all(student_scores[i] < student_scores[i + 1] for i in range(m - 1)): award_students.append(student_id) return award_students"},{"question":"You are given an array of integers where each integer represents a person’s strength within a group, and your task is to form teams based on the following rules: - Each team must consist of exactly three members. - The difference in strength between the strongest and the weakest member of any team should not exceed a specified threshold value, t. Determine the maximum number of teams you can form from the given array under the given condition. # Input Format The first line contains two space-separated integers n (3 le n le 10^5) — the number of people in the group, and t (0 le t le 10^9) — the maximum allowed strength difference between the strongest and the weakest member in a team. The second line contains n space-separated integers representing the strength of each person in the group. # Output Format Output a single integer, the maximum number of teams you can form. # Sample Input ``` 6 3 4 8 5 3 6 7 ``` # Sample Output ``` 2 ``` # Explanation You can form two teams: - Team 1: [4, 5, 6] - Team 2: [7, 8, 6] Both teams satisfy the condition that the difference in strength between the strongest and the weakest member does not exceed 3.","solution":"def max_teams(n, t, strengths): # Sort the strengths array to facilitate team formation strengths.sort() teams_count = 0 i = 0 while i <= n - 3: if strengths[i + 2] - strengths[i] <= t: teams_count += 1 i += 3 else: i += 1 return teams_count"},{"question":"You are given a list of integers. Your task is to form the largest possible number using the digits present in the list of integers. If the result starts with one or more zeroes, remove the leading zeroes. Write a function `largestNumber(nums: List[int]) -> str` where: - `nums` is a list of non-negative integers (0 ≤ nums[i] ≤ 10^9, 1 ≤ len(nums) ≤ 10^4). The function should return the largest possible number formed by the digits of the integers in the list as a string. **Example:** ```python Input: nums = [10, 2] Output: \\"210\\" Input: nums = [3, 30, 34, 5, 9] Output: \\"9534330\\" Input: nums = [0, 0] Output: \\"0\\" ``` **Explanation:** For the first input: - By concatenating 2 then 10, we get the string \\"210\\", which is the largest possible number. For the second input: - By concatenating in the following order: 9, 5, 34, 3, 30, we get the string \\"9534330\\". For the third input: - The result \\"00\\" should be formatted as \\"0\\". You can assume that the integers in the input list can be arranged in a way to form the largest number possible.","solution":"from functools import cmp_to_key def largestNumber(nums): Returns the largest possible number formed by the digits of the integers in the given list. def compare(a, b): if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 nums_str = list(map(str, nums)) nums_str.sort(key=cmp_to_key(compare)) largest_num = \'\'.join(nums_str) return largest_num.lstrip(\'0\') or \'0\'"},{"question":"You are given an integer n (2 le n le 500), which denotes the size of an n times n matrix. Each cell in the matrix contains either a \'+\', \'-\', \'*\' or \'/\'. Your task is to determine whether you can form a valid arithmetic expression by combining the values in any row or column of this matrix to equal to a given integer k. An arithmetic expression is valid if it only contains numbers and the arithmetic operators \'+\', \'-\', \'*\', and \'/\'. Note that, the matrix may also contain cells with invalid operators which should be ignored. You can query whether a specific row or column contains the required integer k by printing \\"? i type\\" where i represents the row/column number (1-based index) and type can either be \\"row\\" or \\"column\\". After which, you will receive the response \\"YES\\" if the row or column can produce the integer k and \\"NO\\" otherwise. You can perform at most 3 cdot n queries to find a valid arithmetic expression. Print \\"! FOUND\\" if you find a valid row or column that produces k, otherwise print \\"! NOT FOUND\\". # Input The first line of the input contains two integers n and k (2 le n le 500, -10^9 le k le 10^9). The next n lines contain n characters each, describing the elements of the matrix. Each character is either \'+\', \'-\', \'*\', \'/\' or an invalid operator. # Output Output either \\"! FOUND\\" or \\"! NOT FOUND\\". # Example Input: ``` 3 12 *-/- +//- -//*- ``` Output: ``` ? 1 row ? 2 row ? 3 row ? 1 column ? 2 column ? 3 column ! NOT FOUND ``` You need to implement a function: ```python def find_expression(n: int, k: int, matrix: List[str]) -> str: pass ```","solution":"def find_expression(n, k, matrix): def query(index, type): return f\\"? {index + 1} {type}\\" # Maximum allowed queries max_queries = 3 * n # Perform row queries for i in range(n): print(query(i, \\"row\\")) response = input().strip() if response == \\"YES\\": return \\"! FOUND\\" # Perform column queries for i in range(n): print(query(i, \\"column\\")) response = input().strip() if response == \\"YES\\": return \\"! FOUND\\" return \\"! NOT FOUND\\""},{"question":"Masha is a software engineer who enjoys automation. She has n tasks to complete, each having a difficulty level. Masha wants to schedule these tasks over m days. Each day, she wants to work on exactly k tasks, and she wants the difficulty levels of the tasks for each day to strictly increase. Help Masha create a suitable schedule or determine if it is impossible to do so. Input: - The first line contains three space-separated integers n, m, and k (1 ≤ n, m, k ≤ 1000), where n is the total number of tasks, m is the number of days, and k is the number of tasks per day. - The second line contains n space-separated integers denoting the difficulty levels of the tasks. Output: - If it is possible to schedule the tasks according to Masha’s requirements, print m lines, each containing k integers in strictly increasing order representing the difficulty levels of the tasks for each day. - If it is not possible to create such a schedule, print -1.","solution":"def schedule_tasks(n, m, k, tasks): if n != m * k: return -1 tasks.sort() schedule = [] for i in range(m): day_tasks = tasks[i * k : (i + 1) * k] schedule.append(day_tasks) return schedule"},{"question":"Given an integer array nums, you need to find a continuous subarray with the largest sum and return its sum. A subarray is a contiguous part of an array. # Input - The first line contains an integer n (1 ≤ n ≤ 10^4) - the length of the array. - The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array. # Output - Output a single integer, which is the sum of the subarray with the largest sum. # Example Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 # Note In the example above, the contiguous subarray [4,-1,2,1] has the largest sum = 6.","solution":"def max_sub_array(nums): Returns the sum of the contiguous subarray with the largest sum. if not nums: return 0 max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are organizing a group of friends to go on a hiking trip. You have m different hiking trails available, each with a different length in kilometers. Your group has n friends, each with a different walking speed in kilometers per hour. You need to assign one trail to each friend in such a way that every friend is assigned exactly one trail. After the hike, the last friend to finish will be the one who determines the total time taken for the hike. You want to minimize the total time taken for all friends to complete their respective trails. Given the lengths of the m trails and the speeds of the n friends, find the minimum possible total time taken for all friends to complete their assigned trails. Each of the next m lines contains an integer li (1 ≤ li ≤ 100), where li represents the length of trail i in kilometers. Each of the next n lines contains an integer si (1 ≤ si ≤ 100), where si represents the walking speed of friend i in kilometers per hour. Output a single integer representing the minimum possible time in hours for all friends to complete their assigned trails. # Example Input: ``` 4 4 10 8 12 6 3 4 2 1 ``` Output: ``` 6 ``` Explanation: One possible way to minimize the total hiking time is by assigning the trails as follows: - Assign trail of length 6 to the friend with speed 1 km/h (takes 6 hours) - Assign trail of length 8 to the friend with speed 2 km/h (takes 4 hours) - Assign trail of length 10 to the friend with speed 3 km/h (takes 3.33 hours) - Assign trail of length 12 to the friend with speed 4 km/h (takes 3 hours) The slowest friend finishes in 6 hours, which is the minimum possible total time for all friends to complete their trails.","solution":"def minimize_hiking_time(trails, speeds): Given the lengths of hiking trails and the walking speeds of friends, computes the minimum possible total time in hours for all friends to complete their assigned trails. Args: trails (list of int): The lengths of hiking trails in kilometers. speeds (list of int): The walking speeds of friends in kilometers per hour. Returns: int: The minimum possible time in hours for all friends to complete their trails. # Sort both lists trails.sort() speeds.sort() # Assign longest trails to the fastest friends and find the maximum time taken by any friend max_time = max(trail / speed for trail, speed in zip(trails, speeds)) return int(max_time)"},{"question":"You are given an array of n integers. A sequence is called \\"beautiful\\" if for every two consecutive elements in the sequence, the absolute difference between those two elements is at least k. Your task is to determine the number of beautiful subsequences of length m that can be formed from the given array. Since the result can be very large, output the number of beautiful subsequences modulo 109 + 7. The first line of input contains three integers n, m, and k (1 ≤ m ≤ n ≤ 100, 1 ≤ k ≤ 50) — the length of the array, the length of the subsequences, and the minimum absolute difference between consecutive elements in a beautiful sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array. Output a single integer — the number of beautiful subsequences of length m modulo 109 + 7. For example: Input: ``` 5 3 2 1 3 5 7 9 ``` Output: ``` 10 ``` Explanation: The beautiful subsequences of length 3 that can be formed are: (1, 3, 5), (1, 3, 7), (1, 3, 9), (1, 5, 7), (1, 5, 9), (3, 5, 7), (3, 5, 9), (3, 7, 9), (5, 7, 9), (3, 7, 9). Thus, there are 10 beautiful subsequences of length 3 with the given constraints.","solution":"MOD = 10**9 + 7 def count_beautiful_subsequences(n, m, k, arr): from itertools import combinations def is_beautiful(seq): return all(abs(seq[i] - seq[i-1]) >= k for i in range(1, len(seq))) beautiful_count = 0 for comb in combinations(arr, m): if is_beautiful(comb): beautiful_count += 1 return beautiful_count % MOD # Example usage: # n, m, k = 5, 3, 2 # arr = [1, 3, 5, 7, 9] # print(count_beautiful_subsequences(n, m, k, arr))"},{"question":"A company XenoTech wants to build a smart office where all devices are interconnected and can be controlled remotely. One of the tasks is to optimize energy consumption using an automated lighting system. The system turns lights on in occupied rooms and turns off lights in unoccupied rooms based on sensor data. You are tasked with creating a program that can predict which rooms will have lights on at a specific future time based on the given schedule of room occupancy. The building has n rooms, and each room has its own occupancy schedule. Each schedule consists of multiple time intervals during which the room is occupied. You need to find the state of each room (either \\"on\\" or \\"off\\") at a specific time t. The first line contains two integers n and m (1 le n le 1,000, 1 le m le 10,000) — the number of rooms and the number of intervals. The next m lines each contain three integers r, start and end (1 le r le n; 0 le start < end le 10^9) — indicating that room r is occupied from second start to second end (inclusive of start and exclusive of end). The last line contains an integer t (0 le t le 10^9) — the specific time for which you need to check the state of each room. For each room, print \\"on\\" if the room is occupied at time t, and \\"off\\" otherwise. **Example:** ``` Input: 3 5 1 0 10 2 5 15 3 10 20 1 30 40 3 25 30 11 Output: off on on ``` In this example: - Room 1 is occupied from [0, 10) and [30, 40). Since 11 is not in either interval, Room 1 is \\"off\\". - Room 2 is occupied from [5, 15). Since 11 is within this interval, Room 2 is \\"on\\". - Room 3 is occupied from [10, 20) and [25, 30). Since 11 is within the first interval, Room 3 is \\"on\\".","solution":"def room_lights_state(n, m, intervals, t): Determines the state of each room (\'on\' or \'off\') at time t based on given intervals. Parameters: - n (int): number of rooms - m (int): number of intervals - intervals (list of tuples): list containing the intervals (r, start, end) - t (int): the specific time to check Returns: - list: list of strings \\"on\\" or \\"off\\" for each room from 1 to n states = [\'off\'] * n # Initially, assume all rooms are \\"off\\" for r, start, end in intervals: if start <= t < end: states[r - 1] = \'on\' return states # Example input n = 3 m = 5 intervals = [ (1, 0, 10), (2, 5, 15), (3, 10, 20), (1, 30, 40), (3, 25, 30) ] t = 11 print(room_lights_state(n, m, intervals, t))"},{"question":"You are given two strings, `s` and `t`, where `s` consists of lowercase Latin letters, and `t` consists of both lowercase Latin letters and the wildcard character `\'*\'`. The wildcard `\'*\'` can match any sequence of lowercase Latin letters (including the empty sequence). Your task is to determine if `s` can be matched by `t`, where each `\'*\'` in `t` can be replaced by any sequence of lowercase Latin letters. The first line of the input contains one integer `n` (1 le n le 200,000) — the length of string `s`. The second line of the input contains string `s` of length `n` consisting of lowercase Latin letters. The third line of the input contains string `t` consisting of lowercase Latin letters and the wildcard character `\'*\'`. Print \\"YES\\" if string `t` can match string `s`, otherwise print \\"NO\\". # Example **Input:** ``` 5 hello h*o ``` **Output:** ``` YES ``` **Explanation:** The string \\"h*o\\" can match \\"hello\\" because the `\'*\'` can be replaced by \\"ell\\". In another example: **Input:** ``` 3 abc a*c ``` **Output:** ``` YES ``` **Explanation:** The string \\"a*c\\" can match \\"abc\\" because the `\'*\'` can be replaced by \\"b\\".","solution":"def can_match(s, t): Determines if string s can be matched by string t where each \'*\' in t can be replaced by any sequence of lowercase Latin letters. Args: s (str): The input string to be matched. t (str): The pattern string containing lowercase Latin letters and the wildcard character \'*\'. Returns: str: \'YES\' if t can match s; otherwise \'NO\'. ns, nt = len(s), len(t) if \'*\' not in t: return \\"YES\\" if s == t else \\"NO\\" prefix, suffix = t.split(\'*\') # Check if s starts with prefix and ends with suffix if s.startswith(prefix) and s.endswith(suffix): if ns >= len(prefix) + len(suffix): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers where each element represents the price of a stock on a given day. You can perform as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the restriction that you cannot engage in multiple transactions simultaneously (you must sell the stock before you can buy it again). Write a function to find the maximum profit you can achieve. The first line of the input contains an integer n (1 leq n leq 100,000), representing the total number of days. The second line contains n space-separated integers p_1, p_2, ..., p_n (1 leq p_i leq 10^5), where p_i represents the price of the stock on the i-th day. Print a single integer, the maximum profit that can be achieved. **Example:** Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 7 ``` Explanation: - Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. - Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. - Total profit is 4+3 = 7.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from the given list of stock prices. One can do multiple transactions, but cannot engage in multiple transactions simultaneously. :param prices: List of integers representing stock prices on different days. :return: Integer representing the maximum profit. n = len(prices) if n <= 1: return 0 max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"You are given a connected, undirected graph with n vertices and m edges. Each vertex has a unique integer identifier from 1 to n. Your task is to determine if the graph contains a cycle, and if so, find one such cycle and print the vertices in the order they appear in the cycle. For example, if the graph contains a cycle consisting of vertices with identifiers [2, 4, 3], print these identifiers in any order, e.g., [2, 4, 3] or [3, 2, 4]. The first line contains two integers n and m (2 le n le 1000, 1 le m le 1000). The following m lines contain two integers each, u and v (1 le u, v le n), representing an undirected edge between vertices u and v. No edge is repeated, and there are no self-loops. If there are no cycles in the graph, print \\"No cycle\\". Otherwise, print the vertices of one cycle. Each vertex in the output must be visited exactly once. Output the result for each test case in the form of a list of vertex identifiers. Example input: ``` 5 5 1 2 1 3 2 3 3 4 4 5 ``` Example output: ``` 2 1 3 2 ```","solution":"def find_cycle(n, m, edges): from collections import defaultdict def dfs(vertex, parent): visited[vertex] = True path.append(vertex) on_stack[vertex] = True for neighbor in graph[vertex]: if not visited[neighbor]: if dfs(neighbor, vertex): return True elif on_stack[neighbor] and neighbor != parent: cycle_start_index = path.index(neighbor) cycle.extend(path[cycle_start_index:]) return True path.pop() on_stack[vertex] = False return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) on_stack = [False] * (n + 1) path = [] cycle = [] for v in range(1, n + 1): if not visited[v]: if dfs(v, -1): return cycle return \\"No cycle\\""},{"question":"You are given two strings, `s1` and `s2`, both consisting only of lowercase alphabets. You need to determine if it is possible to rearrange the characters of `s1` to form `s2`. The objective is to find out whether the frequency of each character in `s1` matches the frequency of each character in `s2`. If the frequencies match, then it is possible to rearrange `s1` to match `s2`; otherwise, it is not. Your task is to write a function that takes in the two strings `s1` and `s2` and returns `true` if `s1` can be rearranged to form `s2`, and `false` otherwise. # Input - Two strings, `s1` and `s2`, each consisting of lowercase alphabets. (1 ≤ |s1|, |s2| ≤ 1000) # Output - A boolean value `true` or `false`. # Examples 1. If `s1 = \\"listen\\"` and `s2 = \\"silent\\"`, the function should return `true` because the characters of `s1` can be rearranged to form `s2`. 2. If `s1 = \\"triangle\\"` and `s2 = \\"integral\\"`, the function should return `true` because the characters of `s1` can be rearranged to form `s2`. 3. If `s1 = \\"apple\\"` and `s2 = \\"pale\\"`, the function should return `false` because the characters of `s1` cannot be rearranged to form `s2` as the lengths and frequencies of characters differ. # Notes - You might want to use a dictionary or an array to count character frequencies. - Ensure that both strings have the same length before comparing the frequencies. If not, return `false` immediately.","solution":"def can_rearrange_to_form(s1, s2): Determines if it is possible to rearrange the characters of s1 to form s2. Parameters: s1 (str): The first string s2 (str): The second string Returns: bool: True if s1 can be rearranged to form s2, False otherwise if len(s1) != len(s2): return False from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"There exists an array of n integers, where each integer represents a special object with a particular magic power level. The power levels can be both positive and negative. Your task is to determine the maximum sum of magic power levels for any non-empty contiguous subarray of the given array. A contiguous subarray is defined as a sequence of elements within the array that are adjacent and have maintained their order. # Input - The first line contains an integer n (1 leq n leq 10^5), denoting the number of special objects. - The second line contains n integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4), representing the magic power levels of the objects. # Output - Print a single integer, the maximum sum of magic power levels for any non-empty contiguous subarray. # Example **Input:** ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` **Output:** ``` 6 ``` **Explanation:** The subarray [4, -1, 2, 1] has the largest sum 6. # Note - A subarray must contain at least one element. - Consider different possible subarrays and then determine the maximum possible sum. # Constraints - The constraints ensure that the array length is large enough that an efficient algorithm, like the Kadane’s algorithm, is necessary to solve it within a reasonable time limit.","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of magic power levels for any non-empty contiguous subarray of the given array. Parameters: n (int): The number of elements in the array. arr (list): A list of integers representing the magic power levels of the objects. Returns: int: The maximum sum of magic power levels for any non-empty contiguous subarray. # Implementing Kadane\'s algorithm max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a sequence of integers array a of length n. Your task is to determine if it is possible to form two non-overlapping subarrays such that each subarray has a sum equal to a given integer k. Any subarray should have at least one element. The first line of the input contains two integers n and k (1 le n le 200, -10^8 le k le 10^8). The second line contains n integers a_1, a_2, ..., a_n (-10^8 le a_i le 10^8). Print \\"YES\\" if it is possible to form two non-overlapping subarrays such that each subarray has a sum equal to k. Otherwise, print \\"NO\\".","solution":"def find_two_subarrays_with_sum_k(n, k, arr): Determines if it\'s possible to find two non-overlapping subarrays that both sum to k. Parameters: n (int): The length of the array. k (int): The target sum for subarrays. arr (list of int): The input array. Returns: str: \\"YES\\" if two such subarrays exist, otherwise \\"NO\\". prefix_sums = {0} current_sum = 0 for i in range(n): current_sum += arr[i] if current_sum - k in prefix_sums: prefix_sums_at_i = prefix_sums.copy() current_sum_i = current_sum for j in range(i + 1, n): current_sum_i += arr[j] if (current_sum_i - k) in prefix_sums_at_i: return \\"YES\\" prefix_sums_at_i.add(current_sum_i) prefix_sums.add(current_sum) return \\"NO\\""},{"question":"Alice and Bob love to play a game on a rectangular grid of candies. The grid consists of n rows and m columns, where each cell contains a certain number of candies. Alice and Bob take turns to collect candies. Alice always starts first. On each turn, a player must collect all candies from exactly one cell. However, a player can only collect candies from a cell that is not adjacent to any other cell that the opponent has taken candies from in any previous turns. Two cells are adjacent if they share a common edge. Your task is to help Alice determine the maximum number of candies she can collect, assuming both players play optimally. Input: - The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the grid. - Each of the next n lines contains m space-separated integers where the j-th integer in the i-th line represents the number of candies in the cell located at the i-th row and the j-th column. Output: - Output a single integer: the maximum number of candies Alice can collect. Example: Input: 3 4 1 3 1 5 2 2 4 1 1 5 3 1 Output: 15 Explanation: In one of the optimal solutions, Alice collects candies from (1,4) (5 candies) in her first turn, then from (2,3) (4 candies) and finally from (2,1) (2 candies), totaling 15 candies.","solution":"def max_candies_collected(n, m, grid): Returns the maximum number of candies Alice can collect, assuming both players play optimally. # Since the problem is adversarial and involves optimization, we can use dynamic programming to simulate the game. dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the dp array with the values given in the grid for i in range(n): for j in range(m): dp[i][j] = grid[i][j] # Traverse the grid and update the dp array as per the game\'s rule for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j]) if i > 0 and j > 0: dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + grid[i][j]) # Maximum sum is the maximum value in the dp table result = 0 for i in range(n): for j in range(m): result = max(result, dp[i][j]) return result"},{"question":"Two large cities, City A and City B, are planning to connect through a high-speed train network for which you need to establish train stations and tracks in a cost-effective manner. You have been provided with a list of potential stations and the cost to set up a track between each pair of stations. The goal is to ensure that all stations are connected either directly or indirectly, and to minimize the total cost of establishing tracks. You are given the following input: - n (2 ≤ n ≤ 100,000): the number of stations. - m (1 ≤ m ≤ 200,000): the number of potential tracks. - m lines of three integers each (u, v, w) (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6): each representing a potential track between station u and station v with cost w. Your task is to determine the minimum cost required to connect all stations. Input: The first line contains two integers n (number of stations) and m (number of potential tracks). Next m lines each contain three integers u, v, and w describing a potential track between station u and station v with cost w. Output: Print the minimum total cost to connect all stations. If it is not possible to connect all the stations, print \\"Impossible\\". Example: Input: 4 5 1 2 5 1 3 10 1 4 7 2 3 6 3 4 1 Output: 13 Explanation: One possible way to connect all stations with the minimum cost is: - Track from 3 to 4 with cost 1 - Track from 1 to 2 with cost 5 - Track from 2 to 3 with cost 6 Total cost = 1 + 5 + 6 = 12 If no set of tracks can connect all stations, print \\"Impossible\\".","solution":"def minimum_cost_to_connect_stations(n, m, tracks): Calculates the minimum cost to connect all stations using Kruskal\'s algorithm. If all stations cannot be connected, returns \\"Impossible\\". Args: n (int): the number of stations. m (int): the number of potential tracks. tracks (list of tuples): each tuple contains u, v, w representing a track between station u and station v with cost w. Returns: int: minimum total cost to connect all stations or \\"Impossible\\" if it is not possible. # Helper function to find the representative of a set def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] # Helper function to unify two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort all the edges based on their weight tracks.sort(key=lambda x: x[2]) parent = list(range(n+1)) rank = [0] * (n+1) mst_cost = 0 edges_used = 0 for u, v, w in tracks: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w edges_used += 1 if edges_used == n - 1: # early exit if we\'ve used exactly n-1 edges break # If we used fewer edges than n-1, it means we couldn\'t connect all stations if edges_used != n - 1: return \\"Impossible\\" return mst_cost"},{"question":"# Puzzle Vault Manager Vera is the curator of a mysterious puzzle vault. The vault is electronic and can only be opened by solving a specific puzzle. The vault gives a puzzle in the form of a sequence of numbers, and you need to find the minimum number of operations to rearrange the sequence such that it becomes non-decreasing. In one operation, you can pick an element from the sequence, remove it, and insert it at any position in the sequence. Given a sequence of integers, find the minimum number of operations required to make the sequence non-decreasing. The first line of input is the number of test cases, t (1 le t le 1000). Each of the following t lines contains: - An integer n (1 le n le 10^5) indicating the length of the sequence. - A sequence of n integers (1 le a_i le 10^9). For each test case, output the minimum number of operations required to make the sequence non-decreasing. # Input ``` 2 5 5 3 6 1 7 6 8 5 9 4 3 2 ``` # Output ``` 2 4 ``` # Explanation In the first test case, you can: 1. Remove the \'5\' and insert it before the \'3\' to get [3, 5, 6, 1, 7] 2. Remove the \'1\' and insert it before the \'3\' to get [1, 3, 5, 6, 7] In the second test case, you can: 1. Remove the \'8\' and insert it after \'9\' to get [5, 9, 8, 4, 3, 2] 2. Remove the \'5\' and insert it after \'9\' to get [9, 5, 8, 4, 3, 2] 3. Remove the \'4\' and insert it after \'8\' to get [9, 8, 5, 3, 2, 4] 4. Remove the \'3\' and insert it after \'5\' to get [9, 8, 5, 4, 2, 3]","solution":"def min_operations_to_non_decreasing(sequence): Given a sequence of integers, find the minimum number of operations required to make the sequence non-decreasing. Parameters: sequence (list of int): The list of integers to be processed. Returns: int: The minimum number of operations required. from bisect import bisect_right # Longest Non-Decreasing Subsequence (LNDS) will help us determine the # number of moves required lnds = [] for num in sequence: pos = bisect_right(lnds, num) if pos == len(lnds): lnds.append(num) else: lnds[pos] = num # The number of operations required is the length of the sequence minus # the length of the longest non-decreasing subsequence return len(sequence) - len(lnds) def solve_puzzles(test_cases): results = [] for sequence in test_cases: results.append(min_operations_to_non_decreasing(sequence)) return results # Function to read input, useful for testing purposes def read_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0].strip()) test_cases = [] idx = 1 for _ in range(t): n = int(lines[idx].strip()) sequence = list(map(int, lines[idx + 1].strip().split())) test_cases.append(sequence) idx += 2 return test_cases # Function to format output, useful for testing purposes def format_output(results): return \\"n\\".join(map(str, results))"}]'),j={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],R={key:0},C={key:1};function L(s,e,h,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",C,"Loading...")):(n(),i("span",R,"See more"))],8,z)):l("",!0)])}const D=d(j,[["render",L],["__scopeId","data-v-6d06e789"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/27.md","filePath":"quotes/27.md"}'),P={name:"quotes/27.md"},H=Object.assign(P,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{M as __pageData,H as default};
