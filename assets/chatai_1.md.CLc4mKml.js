import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as l,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-0476b950"]]),S=JSON.parse('[{"question":"Write a program that generates a multiplication table of size N x N. Each entry in the table should be a product of the respective row and column indices, starting from 1. Constraints * 1 ≤ N ≤ 20 Input The input consists of a single integer N. Output Print the N x N multiplication table. Each number in the table should be separated by a single space. Ensure that each row is printed on a new line. Example Input 4 Output 1 2 3 4 2 4 6 8 3 6 9 12 4 8 12 16 Input 2 Output 1 2 2 4","solution":"def multiplication_table(N): Generates and prints an N x N multiplication table. Parameters: N (int): The size of the multiplication table. Returns: None table = [] for i in range(1, N + 1): row = [] for j in range(1, N + 1): row.append(i * j) table.append(row) for row in table: print(\' \'.join(map(str, row)))"},{"question":"You are given an integer array of size N. Your task is to find the length of the shortest subarray, that when sorted, would result in the entire array being sorted. If the array is already sorted, the length of the shortest subarray should be 0. For example, consider the array `[1, 2, 5, 3, 4, 6, 7]`. Sorting the subarray `[5, 3, 4]` would result in the entire array being sorted. Thus, the length of the shortest subarray is 3. Write a function `shortest_subarray_length(arr: List[int]) -> int` that takes the array as input and returns the length of the shortest subarray which, when sorted, will result in the entire array being sorted. Input - The function will take an integer array of size N (1 ≤ N ≤ 10^5), where each element of the array is within the range of 1 to 10^6. Output - Return an integer representing the length of the shortest subarray that needs to be sorted. Example: Input: ``` [1, 3, 2, 4, 5] ``` Output: ``` 2 ``` Input: ``` [1, 2, 3, 4, 5] ``` Output: ``` 0 ```","solution":"from typing import List def shortest_subarray_length(arr: List[int]) -> int: Returns the length of the shortest subarray which, when sorted, results in the entire array being sorted. n = len(arr) if n <= 1: return 0 # Find the first element which is not in sorted order from the left left = 0 while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the array is already sorted if left == n - 1: return 0 # Find the first element which is not in sorted order from the right right = n - 1 while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find min and max in the subarray arr[left:right+1] subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Extend the left boundary to the left as needed while left > 0 and arr[left - 1] > subarray_min: left -= 1 # Extend the right boundary to the right as needed while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"A renowned artist wants to create a large mosaic and plans to use square tiles of different colors. Each tile is uniquely identified by its color code, which is a positive integer. To ensure the final design is aesthetically appealing, the artist wants to place one tile on each part of a grid with an equal number of rows and columns. The artist wants to know the maximum color code used in each row and column to verify the richness of colors in the design. Can you help the artist by writing a program that finds the maximum color code in each row and each column of the grid? ------ Input ------ The first line of input contains a single integer N (1 <= N <= 100), the size of the NxN grid. The following N lines each contain N integers, representing the color codes of the tiles in that row. ------ Output ------ Output consists of two lines: - The first line contains N integers, where the i-th integer represents the maximum color code in the i-th row. - The second line contains N integers, where the j-th integer represents the maximum color code in the j-th column. ----- Sample Input 1 ------ 3 5 1 2 3 9 4 7 6 8 ----- Sample Output 1 ------ 5 9 8 7 9 8","solution":"def max_color_codes(grid): Finds the maximum color code in each row and each column of an NxN grid. Parameters: - grid (list of list of int): NxN grid of color codes Returns: - tuple of two lists: - List containing maximum color code for each row - List containing maximum color code for each column n = len(grid) max_rows = [max(row) for row in grid] max_cols = [max(grid[i][j] for i in range(n)) for j in range(n)] return max_rows, max_cols"},{"question":"Alanda recently got interested in marine biology. She is particularly fascinated by a unique species of fish known as \\"Zigzagger\\" which, as the name suggests, have a very peculiar zigzag pattern of movement in the ocean. The Zigzagger’s movement can be defined by a sequence of moves along the coordinate plane. You are given a list of instructions for these movements, and you need to determine the final position of the fish. Each instruction consists of: - A direction (one of \'N\', \'S\', \'E\', \'W\' for North, South, East, West) - A distance (an integer indicating how far the fish moves in that direction) Write a function to compute the final coordinates of the fish after completing all its movements. -----Input----- The first line of input contains a single integer m (1 leq m leq 1000), which is the number of movements. The next m lines each contain a character d_i (one of \'N\', \'S\', \'E\', \'W\') and an integer v_i (1 leq v_i leq 1000), representing the direction and the distance of each movement. -----Output----- Your function should output the final position of the fish as two integers x and y, where x is the final horizontal position (east-west coordinate) and y is the final vertical position (north-south coordinate). -----Examples----- Sample Input: 5 N 10 E 20 S 5 W 15 N 5 Sample Output: 5 10 Sample Input: 3 E 30 N 20 W 10 Sample Output: 20 20","solution":"def final_position(m, movements): Computes the final coordinates of the fish after completing all movements. Args: m (int): The number of movements. movements (list of tuples): Each tuple contains a direction (str) and a distance (int). Returns: tuple: The final position as (x, y). x, y = 0, 0 for move in movements: direction, distance = move if direction == \'N\': y += distance elif direction == \'S\': y -= distance elif direction == \'E\': x += distance elif direction == \'W\': x -= distance return x, y"},{"question":"Given an array `arr` of size `N` consisting of positive integers, and an integer `X`, your task is to determine the number of ways to split the array into **two non-empty contiguous subarrays** such that the sum of elements in both subarrays is greater than or equal to `X`. A subarray is defined as a contiguous segment of the array. For example, from the array `[1, 2, 3, 4]`, `[1, 2]` and `[3, 4]` are valid subarrays. Write a function `count_splits(arr, X)` that takes an array `arr` and an integer `X` as input, and returns the number of ways to split the array as described. -----Constraints----- - 2 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^4 - 1 ≤ X ≤ 10^9 -----Input----- - An array `arr` of `N` positive integers. - An integer `X`. -----Output----- - An integer representing the number of ways to split the array. -----Example----- **Input:** [5, 1, 3, 2, 4] 5 **Output:** 3 **Explanation:** The valid ways to split the array such that the sum of both subarrays is greater than or equal to 5 are: - [5] and [1, 3, 2, 4]: 5 and 10 - [5, 1] and [3, 2, 4]: 6 and 9 - [5, 1, 3] and [2, 4]: 9 and 6","solution":"def count_splits(arr, X): Determines the number of ways to split the array into two non-empty contiguous subarrays such that the sum of elements in both subarrays is greater than or equal to X. :param arr: List of integers. :param X: An integer. :return: An integer representing the number of valid splits. # Calculate the prefix sums N = len(arr) prefix_sum = [0] * N prefix_sum[0] = arr[0] for i in range(1, N): prefix_sum[i] = prefix_sum[i - 1] + arr[i] # Calculate the total sum of the array total_sum = prefix_sum[-1] count = 0 for i in range(N - 1): left_sum = prefix_sum[i] right_sum = total_sum - left_sum if left_sum >= X and right_sum >= X: count += 1 return count"},{"question":"Parth works as a programmer and is given a complex system where he needs to optimize the logging mechanism. He has identified that too many repetitive log entries are occupying a significant amount of space. The system logs entries with a timestamp and the log entry message. Parth wants to consolidate logs by removing repetitive consecutive messages while keeping only the first occurrence of each repetitive sequence. Write a program that processes a list of log entries and outputs a list of log entries with all consecutive duplicates removed. Each log entry has a timestamp and a message. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of log entries. Next n lines contain log entries where each log entry is represented by a timestamp t_i (0 ≤ t_i ≤ 10^9) and a message m_i (a non-empty string of length ≤ 100). -----Output----- Output the list of log entries after consolidating consecutive duplicates. Print the timestamp and message for each unique log entry. -----Examples----- Input 5 1 Error: Disk not found 2 Error: Disk not found 3 Info: Disk check starting 4 Info: Disk check starting 5 Error: Disk not found Output 1 Error: Disk not found 3 Info: Disk check starting 5 Error: Disk not found Input 4 1 Warning: Low memory 2 Warning: Low memory 3 Warning: Low memory 4 Error: Out of memory Output 1 Warning: Low memory 4 Error: Out of memory Note: In the first example, the second \\"Error: Disk not found\\" and the second \\"Info: Disk check starting\\" are removed as they are consecutive duplicates. The third \\"Error: Disk not found\\" is retained as it is not consecutive with the second \\"Info: Disk check starting\\". In the second example, the consecutive \\"Warning: Low memory\\" entries are reduced to a single entry, followed by a distinct \\"Error: Out of memory\\".","solution":"def consolidate_logs(n, logs): Process the list of logs and remove consecutive duplicates. Parameters: n (int): Number of log entries. logs (list of tuple): List of log entries where each log entry is represented by a timestamp and a message. Returns: list of tuple: Processed list of log entries with consecutive duplicates removed. if n == 0: return [] unique_logs = [logs[0]] for i in range(1, n): if logs[i][1] != logs[i - 1][1]: unique_logs.append(logs[i]) return unique_logs"},{"question":"find_pangram() A pangram is a sentence that contains all the letters of the English alphabet at least once. Your task is to create a function `find_pangram(sentence)` that determines whether a given string is a pangram and returns `True` if it is, and `False` otherwise. Input Format A single line of input containing the string `sentence`. Constraints - The input string will contain only English letters and spaces. - The length of the input string will not exceed 1000 characters. Output Format Print `True` if the string is a pangram, else print `False`. Sample Input The quick brown fox jumps over a lazy dog Sample Output True Explanation The input string contains every letter of the English alphabet at least once. Therefore, it is a pangram.","solution":"def find_pangram(sentence): Determines whether a given string is a pangram. Parameters: sentence (str): The input string. Returns: bool: True if the string is a pangram, False otherwise. sentence = sentence.lower() alphabet = set(\\"abcdefghijklmnopqrstuvwxyz\\") sentence_set = set(sentence) return alphabet.issubset(sentence_set)"},{"question":"Given an array of integers, finding the shortest contiguous subarray, the sum of which is greater than or equal to a given integer x. If no such subarray exists, return -1. ------ Input ------ The first line contains an integer T denoting the total number of test cases. For each test case, the first line contains two integers n (the number of elements in the array) and x (the target sum). The second line contains n integers, the elements of the array. ------ Output ------ For each test case, print the length of the smallest subarray with a sum greater than or equal to x. If no subarray is found, print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 10^6 1 ≤ x ≤ 10^9 1 ≤ a[i] ≤ 10^6 ------ Sample Input 1 ------ 2 5 15 1 2 3 4 5 10 55 1 2 3 4 5 6 7 8 9 10 ------ Sample Output 1 ------ 5 10","solution":"def shortest_subarray_length(arr, n, x): Function to find the length of the shortest subarray with a sum greater than or equal to x. If no such subarray exists, return -1. min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= x: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for test_case in test_cases: n, x, arr = test_case result = shortest_subarray_length(arr, n, x) results.append(result) return results"},{"question":"In a futuristic city, there are n buildings connected by a network of teleportation tunnels. Each teleportation tunnel connects two buildings bidirectionally. The buildings are numbered from 1 to n. Due to some renovations, certain pairs of buildings require maintenance and are not connected by tunnels. Your task is to determine the minimum cost required to restore connectivity between these buildings. The cost to construct a tunnel between any two buildings i and j is given by the Manhattan distance between them. The Manhattan distance between two buildings located at coordinates `(xi, yi)` and `(xj, yj)` is defined as `|xi - xj| + |yi - yj|`. Define a coordinate (1 ≤ xi, yi ≤ 1000) for each building. It is guaranteed that no two buildings have the same set of coordinates. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000), denoting the number of buildings. The next n lines contain two space-separated integers xi and yi, denoting the coordinates of each building. The last line contains an integer m (0 ≤ m ≤ n*(n-1)/2), the number of teleportation tunnels that are currently functional. The next m lines each contain two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), representing a functional tunnel between buildings ai and bi. -----Output----- Print an integer representing the minimum cost required to ensure each pair of buildings is connected either directly or indirectly through the teleportation network. -----Examples----- Input 4 1 1 2 2 3 3 4 4 0 Output 6 Input 4 1 1 2 2 3 3 4 4 3 1 2 2 3 3 4 Output 0 -----Note----- In the first sample, all buildings are isolated and no initial tunnels exist, so we need to construct tunnels to connect all buildings. The minimum cost to do this would be connecting (1,1) to (2,2), (2,2) to (3,3) and (3,3) to (4,4). The total cost is `1+1 + 1+1 + 1+1 = 6`. In the second sample, all buildings are already connected through the given functional tunnels, so no additional cost is required.","solution":"def min_cost_to_connect_buildings(n, coordinates, m, tunnels): from heapq import heappush, heappop def manhattan_distance(coord1, coord2): return abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1]) # Create a union-find (disjoint-set) structure parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY # Integrate existing tunnels for a, b in tunnels: union(a - 1, b - 1) edges = [] # Create all possible edges with their respective Manhattan distance costs for i in range(n): for j in range(i + 1, n): heappush(edges, (manhattan_distance(coordinates[i], coordinates[j]), i, j)) cost = 0 while edges: distance, u, v = heappop(edges) if find(u) != find(v): union(u, v) cost += distance return cost"},{"question":"You are given a grid of size n times m filled with lowercase English letters. Your task is to answer several queries about the grid. Each query describes a rectangle defined by its top-left and bottom-right corners, and you need to determine how many distinct characters are present in that rectangle. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each — the grid itself. The next line contains a single integer q (1 le q le 10000) — the number of queries. The next q lines each contain four integers r1, c1, r2, and c2 (1 le r1 le r2 le n and 1 le c1 le c2 le m) — the corners of the rectangle for that query. -----Output----- For each query print a single integer — the number of distinct characters in the specified rectangle. -----Examples----- Input 3 4 abcd efgh ijkl 2 1 1 2 2 2 2 3 3 Output 4 4 -----Note----- In the first example, the first query asks for the distinct characters in the rectangle from (1, 1) to (2, 2) which contains {a, b, e, f}. The second query asks for the distinct characters in the rectangle from (2, 2) to (3, 3) which contains {f, g, k, l}.","solution":"def count_distinct_characters(grid, queries): results = [] for r1, c1, r2, c2 in queries: chars = set() for i in range(r1-1, r2): for j in range(c1-1, c2): chars.add(grid[i][j]) results.append(len(chars)) return results"},{"question":"You are tasked with implementing a custom queue with specific operations in an interview. The queue initially starts empty. There are four types of commands you need to handle: 1. `enqueue X` - Add element X to the end of the queue. 2. `dequeue` - Remove the front element from the queue. If the queue is empty, print `-1` without quotes. 3. `front` - Print the front element of the queue. If the queue is empty, print `-1` without quotes. 4. `size` - Print the size of the queue. Input: The input starts with an integer `N` which specifies the number of commands. Each of the following `N` lines contains one command as described above. Output: For commands `dequeue` and `front`, print the specified output as described. For command `size`, print the current size of the queue. Constraints: 1 ≤ N ≤ 100000 1 ≤ X ≤ 100000 SAMPLE INPUT 6 enqueue 5 enqueue 3 front dequeue front size SAMPLE OUTPUT 5 3 1 Explanation: There are 6 commands: 1. `enqueue 5` adds 5 to the queue. 2. `enqueue 3` adds 3 to the queue. 3. `front` prints the front element, which is 5. 4. `dequeue` removes the front element (5) from the queue. 5. `front` prints the front element, which is now 3. 6. `size` prints the size of the queue, which is 1.","solution":"class CustomQueue: def __init__(self): self.queue = [] def enqueue(self, x): self.queue.append(x) def dequeue(self): if len(self.queue) == 0: print(-1) else: self.queue.pop(0) def front(self): if len(self.queue) == 0: print(-1) else: print(self.queue[0]) def size(self): print(len(self.queue)) def process_commands(n, commands): que = CustomQueue() for command in commands: if command.startswith(\'enqueue\'): _, x = command.split() que.enqueue(int(x)) elif command == \'dequeue\': que.dequeue() elif command == \'front\': que.front() elif command == \'size\': que.size()"},{"question":"Given a string, write a function to determine if it is an anagram of a palindrome. An anagram is a rearrangement of letters. A palindrome is a word that reads the same forward and backward. The function should return `true` if the input string can be rearranged to form a palindrome, and `false` otherwise. For example: ```python is_palindrome_anagram(\\"carrace\\") # Returns: True (because \\"racecar\\" is a palindrome) is_palindrome_anagram(\\"daily\\") # Returns: False ```","solution":"def is_palindrome_anagram(s): Determine if the string is an anagram of a palindrome. # Count the occurrences of each character char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with odd counts odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be a palindrome anagram, it can have at most one character # with an odd count (which would be the middle character in an odd-length palindrome) return odd_count <= 1"},{"question":"You are assigned to participate in a Diagon Alley adventure in an enchanted land. The city\'s streets are arranged in an n times n grid, where each cell can be either passable (denoted by \'.\') or impassable (denoted by \'#\'). Your mission is to find the number of ways to get from the top-left corner to the bottom-right corner, moving only right or down at each step, while avoiding impassable cells. Given an n times n grid map of the city, count the number of different ways to reach the destination from the start. -----Input----- The first line contains a single integer T (1le Tle 100) denoting the number of test cases. Each test case starts with an integer n (1le nle 100), the size of the grid. The next n lines each contain n characters (either \'.\' or \'#\') representing the grid. -----Output----- For each test case, output the number of ways to reach the bottom-right corner (cell (n, n)) from the top-left corner (cell (1, 1)). If there is no way to reach the destination, output 0 instead. -----Examples----- Input 2 4 .... .#.. ..#. .... 3 .#. . ..# Output 4 0 -----Note----- In the first test case, the paths available to reach the bottom-right corner are: 1. Right, Right, Down, Down, Down, Right 2. Right, Down, Right, Down, Down, Right 3. Right, Down, Down, Right, Right, Down 4. Down, Right, Right, Down, Right, Down In the second test case, there is no valid path to reach the destination.","solution":"def count_paths(grid): n = len(grid) # If the start or end is blocked, return 0 if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Start point for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] def solve(test_cases): results = [] for grid in test_cases: results.append(count_paths(grid)) return results"},{"question":"You are given a list of integers representing the heights of different buildings in a city. A cityscape silhouette can be visualized by constructing a series of lines from the ground up, with each line representing the height of a building at that position. Your task is to write a function `calculate_silhouette(buildings)` that takes a list of integers `buildings` as input and returns a list representing the silhouette of the city. The silhouette should be represented by a list of the maximum heights for each position up to the highest building in the input list. For example, with the input: ``` buildings = [3, 0, 2, 4, 3, 0, 1] ``` The expected output would be: ``` [1, 1, 1, 4, 4, 4, 4] ``` In this example, the silhouette follows the building heights at each position, but always maintains the maximum height found from the previous buildings. Constraints: - The length of `buildings` will be between 1 and 100 inclusive. - Each building height will be an integer between 0 and 100 inclusive. **Example Function Definition:** ```python def calculate_silhouette(buildings): pass # Example usage assert calculate_silhouette([3, 0, 2, 4, 3, 0, 1]) == [1, 1, 1, 4, 4, 4, 4] ``` Write your function to calculate the silhouette, ensuring that it correctly identifies the maximum heights to form the cityscape.","solution":"def calculate_silhouette(buildings): Given a list of integers representing the heights of different buildings, returns a list representing the silhouette of the city. if not buildings: return [] silhouette = [0] * len(buildings) max_height = 0 for i in range(len(buildings)): if buildings[i] > max_height: max_height = buildings[i] silhouette[i] = max_height return silhouette"},{"question":"Sarah loves cooking and has decided to prepare meals for a week. However, the cost of ingredients can really add up, and Sarah wants to reduce her expenditure. She has found a special offer from several local stores. Each store has a different set of ingredient prices, and they offer a discount on a future purchase when an ingredient is bought from them. Specifically, if Sarah buys ingredient i from store s, she can use a discount coupon from store s for ingredient i+2. For example, if she buys ingredient i from store s for X dollars, she will receive a discount on ingredient i+2 from the same store s. If she buys ingredient i+2 from store s for Y dollars and has a discount of Z dollars from the previous purchase, then the effective price for ingredient i+2 becomes Y-Z (keeping in mind Y-Z ≥ 0, no negative prices allowed). Sarah needs to buy N ingredients for the week, from any of the S stores, and wants to minimize her total cost. Sarah will always start buying from ingredient 1 and proceed till ingredient N in that order. Your task is to help her figure out the least possible amount she needs to spend to get all the N ingredients. ------ Input: ------ First line of input contains a single integer T, the number of test cases. Each test case starts with a line consisting of two space-separated integers N & S. The next N lines consist of S space-separated integers each. The j^{th} number on the i^{th} line denotes the price of the i^{th} ingredient in the j^{th} store. The next N lines consist of S space-separated integers each. The j^{th} number on the i^{th} line denotes the value of the discount coupon given after purchasing the i^{th} ingredient in the j^{th} store. ------ Output: ------ For each test case, output on a new line the least amount that Sarah needs to spend to get all the N ingredients. ------ Constraints: ------ 1 ≤ T ≤ 5 2 ≤ N, S ≤ 50000 0 ≤ Prices, Discounts ≤ 500000 1 ≤ T * N * S ≤ 500000 ------ Scoring: ------ You will receive 50 points for solving the problem correctly for S ≤ 5. An additional 30 points for solving the problem correctly for S ≤ 50. The remaining 20 points will be awarded for solving the problem correctly for S > 50. ------ Sample Input 1 ------ 1 3 3 5 8 6 2 4 7 1 0 3 2 1 2 1 5 4 4 3 2 3 0 1 ------ Sample Output 1 ------ 7","solution":"def minimal_cost(N, S, prices, discounts): dp = [[float(\'inf\')] * S for _ in range(N)] for j in range(S): dp[0][j] = prices[0][j] for i in range(1, N): for j in range(S): min_cost_previous = float(\'inf\') for k in range(S): min_cost_previous = min(min_cost_previous, dp[i-1][k]) discount_available = discounts[i-2][j] if i > 1 else 0 dp[i][j] = min_cost_previous + max(0, prices[i][j] - discount_available) return min(dp[N-1]) def minimize_expenditure(T, test_cases): results = [] for t in range(T): N, S, prices, discounts = test_cases[t] results.append(minimal_cost(N, S, prices, discounts)) return results"},{"question":"Patrick is a programming enthusiast and loves to solve puzzles. One day, while arranging items on his shelf, he thought of an interesting problem involving sequences of integers. He needs your help to solve this. Given a sequence A of n integers, find the maximum sum of its contiguous subarray with the constraint that you are allowed to remove at most one element from this subarray to get the maximum sum. Constraints: - 1 ≤ n ≤ 100000 - -1000 ≤ A[i] ≤ 1000 Input: - The first line contains an integer n, the size of the sequence. - The second line contains n space-separated integers representing the sequence A. Output: - Print an integer, the maximum sum of the contiguous subarray after possibly removing one element. SAMPLE INPUT 5 1 -2 0 3 5 SAMPLE OUTPUT 9 Explanation: - The maximum sum subarray is [1, -2, 0, 3, 5] which becomes [1, 0, 3, 5] after removing the -2, and the sum is 9.","solution":"def max_subarray_sum_with_one_removal(n, A): if n == 1: return A[0] # Forward pass: max subarray sum ending at each position forward = [0] * n forward[0] = A[0] for i in range(1, n): forward[i] = max(forward[i-1] + A[i], A[i]) # Backward pass: max subarray sum starting at each position backward = [0] * n backward[n-1] = A[n-1] for i in range(n-2, -1, -1): backward[i] = max(backward[i+1] + A[i], A[i]) # Find the maximum subarray sum with at most one removal max_sum = max(forward) for i in range(1, n-1): max_sum = max(max_sum, forward[i-1] + backward[i+1]) return max_sum"},{"question":"Given a list of integers, your task is to find the length of the longest contiguous subarray such that the elements within this subarray are in strictly increasing order. Examples: ``` [1, 2, 1, 2, 3, 4, 1] => 4 Explanation: The longest contiguous subarray in strictly increasing order is [1, 2, 3, 4]. [3, 2, 1] => 1 Explanation: The longest contiguous subarray in strictly increasing order is [3] or [2] or [1]. [1, 2, 3, 4, 5] => 5 Explanation: The longest contiguous subarray in strictly increasing order is [1, 2, 3, 4, 5]. [] => 0 Explanation: The longest contiguous subarray in strictly increasing order is []. ``` Note: If there are multiple subarrays of the same length, you only need to return the length of one of them.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest contiguous subarray with strictly increasing elements. if not arr: return 0 longest_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i-1]: current_length += 1 longest_length = max(longest_length, current_length) else: current_length = 1 return longest_length"},{"question":"N students are participating in a coding competition. Each student has solved a certain number of problems, and you are given an array that describes the count of problems solved by each student. After the competition, prizes are awarded based on each student\'s performance compared to other students. The prizes are distributed as follows: - Every student receives at least one prize. - Any student who has solved more problems than an adjacent student receives more prizes than the adjacent student. Your task is to calculate the minimum number of prizes needed to distribute according to the above conditions. Input Format: - The first line contains the integer N, the number of students (1 ≤ N ≤ 100). - The second line contains N integers, where the i-th integer represents the number of problems solved by the i-th student (0 ≤ number of problems ≤ 1000). Output Format: - Print a single integer, the minimum number of prizes required. Sample Input: 4 1 2 2 3 Sample Output: 6 Explanation: - The students solved problems in the following manner: [1, 2, 2, 3]. - We can distribute the prizes as: [1, 2, 1, 2]. - This satisfies the conditions: every student gets at least one prize, and students with more problems solved than their neighbors get more prizes. Hence, the total number of prizes required is 1 + 2 + 1 + 2 = 6.","solution":"def min_prizes(N, problems): if N == 0: return 0 prizes = [1] * N # Left to right pass for i in range(1, N): if problems[i] > problems[i-1]: prizes[i] = prizes[i-1] + 1 # Right to left pass for i in range(N-2, -1, -1): if problems[i] > problems[i+1] and prizes[i] <= prizes[i+1]: prizes[i] = prizes[i+1] + 1 return sum(prizes) # Example usage # N = 4 # problems = [1, 2, 2, 3] # print(min_prizes(N, problems)) # Output: 6"},{"question":"You have a budget for building a collection of items with maximum value. Each item has a value, a cost, and a weight. You want to maximize the total value of the collection while staying within a given budget and a maximum allowable weight. For each item, you know its value, cost, and weight, and you have a maximum budget B and a maximum weight W. Determine the maximum total value of items you can select such that the total cost does not exceed B and the total weight does not exceed W. ------Input------ The input consists of multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). For each test case, the first line contains three integers n (1 ≤ n ≤ 1000) — the number of items, B (1 ≤ B ≤ 10^6) — the maximum budget, and W (1 ≤ W ≤ 10^6) — the maximum weight. Each of the following n lines contains three integers v (0 ≤ v ≤ 10^9) — the value of the item, c (1 ≤ c ≤ 10^6) — the cost of the item, and w (1 ≤ w ≤ 1000) — the weight of the item. ------Output------ For each test case, print a single integer — the maximum value of the items you can select without exceeding the budget B and the max weight W. ------Examples------ Input: 2 3 50 10 60 10 2 100 20 3 120 30 5 4 100 20 50 10 5 60 20 10 70 25 12 80 30 15 Output: 220 110 ------Note------ In the first test case, the optimal selection is the first and second items giving a total value of 60 + 100 = 160 and cost of 10 + 20 = 30, and weight of 2 + 3 = 5 which is within B=50 and W=10. In the second test case, the optimal selection is the first and third items giving a total value of 50 + 70 = 120, cost of 10 + 25 = 35, and weight of 5 + 12 = 17 which is within B=100 and W=20.","solution":"def knapsack_with_budget(n, B, W, items): dp = [[0] * (W + 1) for _ in range(B + 1)] for v, c, w in items: for budget in range(B, c - 1, -1): for weight in range(W, w - 1, -1): dp[budget][weight] = max(dp[budget][weight], dp[budget - c][weight - w] + v) return dp[B][W] def solve_knapsack_problem(test_cases): results = [] for test_case in test_cases: n, B, W, items = test_case max_value = knapsack_with_budget(n, B, W, items) results.append(max_value) return results"},{"question":"Emily enjoys playing with sequences of integers. One day, she came across a sequence A consisting of N integers. She decided to perform a series of operations on this sequence. Each operation is of the following two types: - For operation type 1: Replace the integer at a specified position with a given value. - For operation type 2: Compute the maximum integer within a specified subarray. Your task is to help Emily by implementing a program that performs her specified operations and returns the result of each type 2 operation. -----Constraints----- - 1 leq N leq 10^5 - All integers in A are between 1 and 10^9 inclusive. - 1 leq Q leq 10^5 - For type 1 operations: 1 leq pos_i leq N - For type 2 operations: 1 leq L_i leq R_i leq N -----Input----- Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N Query_1 : Query_Q The third to the (Q+2)-th lines contain the queries, each of the following formats: 1 pos_i val_i which means replace the element at position pos_i with val_i, and: 2 L_i R_i which means compute the maximum element in the subarray from L_i to R_i inclusive. -----Output----- Print the results of each type 2 operation, one per line. -----Sample Input----- 5 4 1 5 2 4 3 2 1 5 1 3 7 2 2 4 2 3 5 -----Sample Output----- 5 7 7 Explanation: Initially, the sequence is [1, 5, 2, 4, 3]. - Query 1: Compute the maximum from index 1 to 5, the maximum is 5. - Query 2: Replace the element at index 3 with 7, the sequence becomes [1, 5, 7, 4, 3]. - Query 3: Compute the maximum from index 2 to 4, the maximum is 7. - Query 4: Compute the maximum from index 3 to 5, the maximum is 7. Thus, the outputs are 5, 7, and 7 respectively.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self._build(data) def _build(self, data): for i in range(self.n): self.tree[i + self.n] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = max(self.tree[2 * idx], self.tree[2 * idx + 1]) def query(self, left, right): left += self.n right += self.n max_value = 0 while left < right: if left % 2: max_value = max(max_value, self.tree[left]) left += 1 if right % 2: right -= 1 max_value = max(max_value, self.tree[right]) left //= 2 right //= 2 return max_value def process_operations(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: pos = query[1] - 1 val = query[2] seg_tree.update(pos, val) elif query[0] == 2: l = query[1] - 1 r = query[2] result = seg_tree.query(l, r) results.append(result) return results"},{"question":"You are a systems engineer in a city planning department, tasked with optimizing the positioning of rescue stations in a newly designed linear cityscape. The city consists of `n` blocks in a straight line, numbered from 1 to `n` from left to right. To ensure maximum coverage and efficiency in emergencies, each rescue station is placed such that the maximum distance any city block has to a rescue station is minimized. If there are multiple positions which satisfy this criterion, the rescue station should be placed at the leftmost block among them. Given the number of blocks `n` and the number of rescue stations `k` you need to position, determine the positions of these `k` rescue stations in the city. Input The first and only line of the input consists of two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^6) representing the number of blocks in the city and the number of rescue stations, respectively. Output Output `k` integers representing the positions of the rescue stations in the order they should be placed. Examples Input 10 3 Output 1 5 10 Input 7 4 Output 1 3 5 7 Explanation In the first example, there are 10 blocks and 3 rescue stations: 1. The first station is placed at block 1. 2. The second station is placed at block 5 (the middle of blocks 1 and 10). 3. The third station is placed at block 10. In the second example, there are 7 blocks and 4 rescue stations. They are equidistantly placed to ensure the maximum block distance to a station is minimized, resulting in positions 1, 3, 5, and 7.","solution":"def position_rescue_stations(n, k): Given the number of blocks `n` and the number of rescue stations `k`, determine the optimal positions of the rescue stations. Parameters: n (int): The number of blocks in the city k (int): The number of rescue stations to place Returns: list[int]: A list of positions where rescue stations should be placed if k == 1: return [1] # Calculate the interval length interval = (n - 1) // (k - 1) positions = [1 + i * interval for i in range(k - 1)] # Ensure the last position is always `n` positions.append(n) return positions"},{"question":"In a mystical land, there exists a uniquely structured forest where each tree has a sort of \\"energy\\" associated with it. The forest is so unique that the trees can be represented as nodes in an undirected graph, and the energy between any two trees is represented as the weight of the edge connecting them. The energy is non-negative. A magical creature named Orion wants to traverse through the forest and collect the least possible energy to visit all the trees in the forest. Orion starts at any tree and must visit every tree exactly once, returning to the starting tree. However, this journey is not straightforward. Some of the edges in the graph are invisible. Orion has information about which edges are visible, and he needs to find out if there\'s a way to make his journey using only these visible edges while minimizing the energy collected. # Input The input will consist of: - An integer `n` (1 ≤ n ≤ 15), representing the number of trees (nodes). - An integer `m` (0 ≤ m ≤ n*(n-1)/2), representing the number of visible edges. - `m` lines, each containing three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), where `u` and `v` are the endpoints of a visible edge and `w` is the weight of that edge. # Output The output should be a single integer: the minimum total energy required for Orion to visit all the trees exactly once and return to the starting tree using only the visible edges. If it is not possible for Orion to complete his journey, output `-1`. # Examples Example 1 Input ``` 4 5 1 2 10 1 3 15 2 3 20 2 4 25 3 4 30 ``` Output ``` 80 ``` Example 2 Input ``` 4 2 1 2 10 3 4 20 ``` Output ``` -1 ``` # Note In the first example, the minimum energy path that visits all trees and returns to the starting point is 80. In the second example, it is not possible to visit all trees using only the visible edges, so the output is -1.","solution":"import itertools from collections import defaultdict import math def min_energy_traverse(n, m, edges): def tsp(graph, dp, mask, pos, n): if mask == (1 << n) - 1: return graph[pos][0] if graph[pos][0] else math.inf if dp[mask][pos] != -1: return dp[mask][pos] min_cost = math.inf for city in range(n): if (mask & (1 << city)) == 0 and graph[pos][city]: new_cost = graph[pos][city] + tsp(graph, dp, mask | (1 << city), city, n) min_cost = min(min_cost, new_cost) dp[mask][pos] = min_cost return dp[mask][pos] graph = [[0] * n for _ in range(n)] for u, v, w in edges: graph[u-1][v-1] = w graph[v-1][u-1] = w dp = [[-1] * n for _ in range(1 << n)] result = tsp(graph, dp, 1, 0, n) return result if result != math.inf else -1"},{"question":"You are given a list of integers. Write a function that counts the number of occurrences of each integer in the list and returns a dictionary where the keys are the integers and the values are their respective counts. Additionally, sort the dictionary by the integer keys in ascending order before returning it. For example, given the list `[4, 2, 2, 8, 3, 3, 3]`, the function should return `{2: 2, 3: 3, 4: 1, 8: 1}`.","solution":"def count_occurrences(int_list): Counts the number of occurrences of each integer in the list and returns a sorted dictionary with integers as keys and their counts as values. :param int_list: List of integers :return: Dictionary with keys as integers and values as their counts from collections import Counter # Counting occurrences counts = Counter(int_list) # Sorting the dictionary by the keys sorted_counts = dict(sorted(counts.items())) return sorted_counts"},{"question":"Given a string S, your task is to count the frequency of each character in the string and return a list of tuples where each tuple contains a character and its corresponding frequency. The output list should be sorted by character in ascending order. Example 1: Input: S = \\"hello\\" Output: [(\'e\', 1), (\'h\', 1), (\'l\', 2), (\'o\', 1)] Explanation: The frequency of characters \'h\', \'e\', \'l\', \'o\' are 1, 1, 2, 1 respectively. The output list is sorted by character. Example 2: Input: S = \\"programming\\" Output: [(\'a\', 1), (\'g\', 2), (\'i\', 1), (\'m\', 2), (\'n\', 1), (\'o\', 1), (\'p\', 1), (\'r\', 2)] Your Task: You don\'t need to read input or print anything. The task is to complete the function characterFrequency() which takes a string S as input and returns a list of tuples with the characters and their frequencies sorted by character. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(S) <= 10^{6} S contains only lowercase English letters.","solution":"def character_frequency(S): Returns a list of tuples where each tuple contains a character and its frequency, sorted by character in ascending order. # Use a dictionary to count the frequency of each character frequency_dict = {} for char in S: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 # Convert the dictionary to a list of tuples and sort by character frequency_list = sorted(frequency_dict.items()) return frequency_list"},{"question":"You are given a list of integers representing cards with different values. Your task is to find out whether it is possible to partition the list into two subsets such that the sum of the elements in both subsets is the same. Input The first line contains an integer T, the number of test cases. Each test case begins with a blank line. The first line of each test case contains an integer N which represents the number of cards. The second line contains N integers, representing the card values. Output For each test case, output a single line with a single word \\"POSSIBLE\\" if the cards can be partitioned into two subsets with equal sums, or \\"IMPOSSIBLE\\" otherwise. SAMPLE INPUT 2 4 1 5 11 5 3 1 2 5 SAMPLE OUTPUT POSSIBLE IMPOSSIBLE","solution":"def can_partition_equal_subset(nums): total_sum = sum(nums) # If the total sum is odd, we cannot split it into two equal sum subsets if total_sum % 2 != 0: return False subset_sum = total_sum // 2 n = len(nums) dp = [[False] * (subset_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, subset_sum + 1): if nums[i-1] > j: dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i-1][j] or dp[i-1][j - nums[i-1]] return dp[n][subset_sum] def partition_cards(T, test_cases): results = [] for case_index in range(T): N, nums = test_cases[case_index] if can_partition_equal_subset(nums): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Write a function that checks if two strings are anagrams of each other - `areAnagrams()` (`are_anagrams()` for Python). Strings are anagrams if they contain the same characters in the same frequency, but in any order. A few examples: ``` areAnagrams(\\"listen\\", \\"silent\\") == true areAnagrams(\\"evil\\", \\"vile\\") == true areAnagrams(\\"fluster\\", \\"restful\\") == true areAnagrams(\\"prefix\\", \\"suffix\\") == false areAnagrams(\\"hello\\", \\"world\\") == false ``` Note: The function should ignore spaces and capitalization differences while checking for anagrams.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. This function ignores spaces and capitalization differences. # Remove spaces and convert to lowercase str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Check if the sorted characters of both strings are equal return sorted(str1) == sorted(str2)"},{"question":"In a faraway kingdom, there are n towns connected by m bidirectional roads. Each road has a non-negative weight, representing the travel cost. The kingdom\'s ruler wants to ensure that there\'s always a route, possibly indirect, between any two towns. You are asked to find the minimum cost required to ensure that the entire kingdom is connected. -----Input----- The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^6) — the number of towns and the number of bidirectional roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10^6) — representing a road between town u and town v with cost w. -----Output----- Print the minimum cost required to connect all towns in the kingdom. If it\'s impossible to connect all towns, print -1. -----Examples----- Input 4 5 1 2 3 2 3 4 3 4 1 4 1 2 1 3 5 Output 6 Input 3 1 1 2 1 Output -1","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_towns(n, m, roads): if n == 1: return 0 if m < n - 1: return -1 roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 edges_used = 0 for road in roads: u, v, w = road x = find(parent, u - 1) y = find(parent, v - 1) if x != y: result += w edges_used += 1 union(parent, rank, x, y) if edges_used == n - 1: return result return -1"},{"question":"A game consists of a 2D grid with \\"realms\\" and \\"wrinkles\\". Each cell of the grid may either be empty, designated by a \'.\', or contain a wrinkle, designated by a \'#\'. Players can teleport from one empty cell to another, but cannot pass through wrinkles. Determine the minimum number of teleportations required to move from the top-left corner to the bottom-right corner of the grid. You may assume the grid will always be given such that there is at least one valid route from the top-left to the bottom-right corner without passing through wrinkles. # Input - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000), representing the dimensions of the grid. - The next `n` lines contain `m` characters each, representing the grid. Each character is either a \'.\' or \'#\'. # Output - Print a single integer representing the minimum number of teleportations required to move from the top-left corner to the bottom-right corner of the grid. # Example Input: 5 5 ``` ..... .#. .#. .#. ..... ``` Output: 0 Input: 4 4 ``` .... .. .. .... ``` Output: 0","solution":"from collections import deque def min_teleportations(n, m, grid): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if a position is within bounds and not a wrinkle def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS to find minimum teleportations def bfs(): queue = deque([(0, 0, 0)]) # (x, y, teleportations) visited = set((0, 0)) while queue: x, y, teleportations = queue.popleft() # If reached the bottom-right corner, return the number of teleportations if (x, y) == (n - 1, m - 1): return teleportations # Explore neighbours for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, teleportations)) return -1 # In case no path is found, which should not happen as per the problem statement # Starting BFS from top-left corner (0, 0) return bfs() # Example usage # if __name__ == \\"__main__\\": # input_data = [ # \\"5 5\\", # \\".....\\", # \\".#.\\", # \\".#.\\", # \\".#.\\", # \\".....\\" # ] # # n, m = map(int, input_data[0].split()) # grid = [list(input_data[i + 1]) for i in range(n)] # print(min_teleportations(n, m, grid))"},{"question":"You are given two positive integers n and k. Your task is to find the maximum possible sum of a subsequence of the sequence (1, 2, 3, ..., n) such that the length of the subsequence is exactly k and none of the selected subsequence elements are adjacent in the original sequence. A subsequence is a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. For example, given the sequence (1, 2, 3, 4, 5, 6), an example of a valid subsequence of length 3 is (1, 3, 5). But (1, 2, 4) is not a valid subsequence because 1 and 2 are adjacent in the original sequence. Input The input consists of two integers: n (1 ≤ n ≤ 2000) and k (1 ≤ k ≤ n). Output Print a single integer — the maximum possible sum of a subsequence of length k with no adjacent elements in the original sequence. Example Input 6 3 Output 12 Input 10 2 Output 19 Note In the first sample, the subsequence can be (1, 3, 5) or (2, 4, 6), which results in the sum 9. However, the sum 12 is larger, which can be obtained using the subsequence (2, 4, 6). In the second sample, the subsequence (9, 10) results in the maximum possible sum of 19.","solution":"def max_sum_subsequence(n, k): Returns the maximum possible sum of a subsequence of length k with no adjacent elements in the sequence (1, 2, ..., n). sum_of_elements = 0 for i in range(1, k + 1): sum_of_elements += (n - i + 1) return sum_of_elements"},{"question":"You are given an array representing the heights of buildings in a cityscape. Your task is to find the largest rectangular area possible in a histogram made by the array. Each element in the array represents the height of a building of width 1. You need to determine the largest rectangle that can be formed using any contiguous set of buildings. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^4), where hi is the height of the i-th building. Output Print a single integer — the area of the largest rectangle that can be formed. Examples Input 7 2 1 5 6 2 3 1 Output 10 Input 4 2 4 2 1 Output 6 Note In the first example, the largest rectangle can be formed by the heights 5 and 6 resulting in an area of 10. In the second example, the largest rectangle can be formed by the heights 2 and 4 resulting in an area of 6.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area possible in a histogram made by the array. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Mike has a valid parentheses sequence, but he wishes to transform it into a different sequence under certain conditions. This valid parentheses sequence contains characters \'(\' and \')\' and satisfies the constraint that by repeatedly erasing adjacent pairs \'()\', it can eventually become an empty string. Mike wishes to transform his sequence while preserving its maximal depth. The maximum depth is the highest number of nested parentheses pairs encountered throughout the sequence. For example, the depth of the sequence \\"((()))\\" is 3, as the three pairs of parentheses are nested within one another. Mike\'s criteria for transforming the sequence are as follows: 1. The new sequence should have the same maximum depth as the original sequence. 2. The new sequence should be the shortest possible sequence satisfying the depth requirement. 3. Amongst sequences of the same length, the new sequence should be lexicographically smallest. Help Mike by providing an algorithm to transform his sequence accordingly. -----Input----- The first line contains one integer T denoting the number of test cases. Each of the next T lines contains a valid parentheses sequence A which consists solely of the characters \'(\' and \')\'. -----Output----- For each test case, output a single line: the transformed parentheses sequence that Mike should choose, meeting all three criteria. -----Constraints----- 1 ≤ T ≤ 5 1 ≤ |A| ≤ 100000 -----Example----- Input: 2 ()((()())) (((()))) Output: (()) (((()))) Explanation: For the first test case, the sequence \\"()(())\\" has a maximum depth of 3. Thus the shortest length sequence with maximum depth 3 is \\"((()))\\". It is also the lexicographically smallest sequence, given \'(\' < \')\'. For the second test case, the sequence \\"(((())))\\" has a maximum depth of 4. The sequence itself is already optimal, hence the output remains unchanged.","solution":"def transform_sequence(T, sequences): Transforms a list of valid parenthesis sequences into their shortest, lexicographically smallest form while preserving their maximal depth. Parameters: T (int): Number of test cases sequences (list): A list of valid parenthesis sequences Returns: list: A list of transformed sequences def max_depth(s): Computes the maximum depth of a valid parentheses sequence. Parameters: s (str): A valid parentheses sequence Returns: int: The maximum depth of the sequence depth, max_depth = 0, 0 for ch in s: if ch == \'(\': depth += 1 if depth > max_depth: max_depth = depth elif ch == \')\': depth -= 1 return max_depth transformed_sequences = [] for seq in sequences: depth = max_depth(seq) transformed_sequences.append(\'(\' * depth + \')\' * depth) return transformed_sequences"},{"question":"Create a function `intersection(arr1, arr2)` that takes two arrays of integers and returns a new array that contains the intersection of the two arrays, meaning the numbers that appear in both arrays. The returned array should have unique values and be sorted in ascending order. For example: If `arr1` contains [4, 9, 5, 4] and `arr2` contains [9, 4, 9, 8, 4], then the output should be [4, 9] because 4 and 9 are present in both arrays.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays with unique values, sorted in ascending order. # Convert both arrays to sets to remove duplicates and allow for intersection operation set1 = set(arr1) set2 = set(arr2) # Get the intersection of both sets intersected_set = set1.intersection(set2) # Convert the intersection set to a sorted list result = sorted(list(intersected_set)) return result"},{"question":"Given an array of integers, find the highest product you can get from three of the integers. Example 1: Input: [1, 10, 2, 6, 5, 3] Output: 300 Example 2: Input: [-10, -10, 5, 2] Output: 500 Note: - The length of the array will be at least 3. - The array can contain both positive and negative integers.","solution":"def highest_product_of_three(arr): Returns the highest product you can get from three integers in the array. :param arr: List of integers. :return: The highest product of any three integers. arr.sort() max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"A large company has recently installed a new automated system to manage their employee schedules. The system needs to maintain a list of employees and ensure that no two employees are assigned overlapping shifts. Each shift has a start time and an end time, both given in minutes after midnight. For example, a shift starting at 8 AM and ending at 10 AM would be represented as (480, 600). The company\'s HR department must frequently check for overlapping shifts among employees. Your task is to write a program that helps them by determining whether any two shifts overlap in a given list of shifts. A shift (A_start, A_end) overlaps with another shift (B_start, B_end) if: - A_start < B_end and A_end > B_start Input The first line contains an integer n (1 ≤ n ≤ 105), the number of shifts. The next n lines each contain two integers, start and end (0 ≤ start < end ≤ 1440), representing the start and end times of each shift in minutes after midnight. Output If there are overlapping shifts, output \\"Yes\\". If no two shifts overlap, output \\"No\\". Examples Input 3 0 60 70 130 60 120 Output No Input 3 0 60 50 110 120 180 Output Yes","solution":"def check_overlapping_shifts(n, shifts): Determines if there are any overlapping shifts in the given list of shifts. Parameters: n (int): The number of shifts. shifts (list of tuple): List of tuples where each tuple contains start and end time of a shift. Returns: str: \\"Yes\\" if there are overlapping shifts, otherwise \\"No\\". # Sort shifts by start time shifts.sort() # Check for overlaps for i in range(1, n): # Compare the end time of the previous shift with the start time of the current shift if shifts[i][0] < shifts[i-1][1]: return \\"Yes\\" return \\"No\\""},{"question":"# Task You are given a string containing only lowercase letters that may have consecutive repeating characters. Your task is to determine the minimum number of deletions required to make the string have no consecutive repeating characters. # Examples For `s = \\"aab\\"` the answer is `1` Because deleting one `\'a\'` will result in the string `\\"ab\\"` with no consecutive repeating characters. For `s = \\"aabbcc\\"` the answer is `3` The string can be transformed into `\\"abc\\"` by deleting one `\'a\'`, one `\'b\'`, and one `\'c\'`. # Input/Output - `[input]` string `s` A string of lowercase letters. `1 ≤ s.length ≤ 1000` - `[output]` an integer The minimum number of deletions required to make the string have no consecutive repeating characters.","solution":"def min_deletions_to_no_repeated_chars(s): Calculate the minimum number of deletions required to make the string s have no consecutive repeating characters. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"Given a N*M grid of integers where positive numbers represent locations where a delivery van needs to stop, negative numbers represent obstacles, and 0 represents open areas. Find the minimum number of steps required for a delivery van to travel from the top-left corner (0,0) to all delivery points. The van can only move up, down, left, or right. Steps: 1. Start at (0,0) and move to all reachable positive numbers. 2. The van can not move through obstacles. 3. If it\'s not possible to reach all delivery points, return -1. Example 1: Input: N = 3, M = 3 grid = {{0, 1, -1}, {0, 0, 2}, {3, -1, 0}} Output: 6 Explanation: One possible route is: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2) -> (2,1) -> (2,0) Total steps = 6 Example 2: Input: N = 3, M = 3 grid = {{0, 1, -1}, {0, -1, 2}, {-1, 0, 3}} Output: -1 Explanation: It\'s not possible to reach all delivery points. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minStepsToDeliver() which takes two integers N, and M and a 2D list of size N*M as input and returns the minimum number of steps required for a van to travel from (0,0) to all delivery points. If not possible, return -1. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 -1000 ≤ grid[i][j] ≤ 1000","solution":"from collections import deque def minStepsToDeliver(N, M, grid): def bfs(start, deliveries): queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) total_steps = 0 while queue: r, c, steps = queue.popleft() if (r, c) in deliveries: deliveries.remove((r, c)) total_steps += steps steps = 0 # Reset steps as we want steps to each delivery point separately queue = deque([(r, c, 0)]) visited.clear() visited.add((r, c)) for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited and grid[nr][nc] != -1: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) if not deliveries: break return total_steps if not deliveries else -1 deliveries = {(r, c) for r in range(N) for c in range(M) if grid[r][c] > 0} return bfs((0, 0), deliveries)"},{"question":"Design a program that takes a sequence of positive integers and determines if they are prime numbers. A prime number is a number that is only divisible by 1 and itself. The input consists of multiple datasets where each row contains one integer. The end of the input is indicated by a single line of zeros. For each integer, the program should output \\"Prime\\" if the number is a prime number and \\"Not Prime\\" if it is not. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zero. Each dataset will contain one integer n (n ≤ 1000000). The number of datasets will not exceed 50. Output For each dataset, output \\"Prime\\" if the number is a prime number and \\"Not Prime\\" if it is not. Example Input 29 14 0 Output Prime Not Prime","solution":"def is_prime(n): Determines if a given number n is a prime number. Returns \\"Prime\\" if the number is prime, and \\"Not Prime\\" otherwise. if n <= 1: return \\"Not Prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not Prime\\" limit = int(n ** 0.5) + 1 for i in range(3, limit, 2): if n % i == 0: return \\"Not Prime\\" return \\"Prime\\" def check_prime_numbers(numbers): Given a list of numbers, returns a list of results stating if the number is \\"Prime\\" or \\"Not Prime\\". results = [] for number in numbers: if number == 0: break results.append(is_prime(number)) return results"},{"question":"In a coding competition, participants are given a sequence of numbers. They are required to find the maximum sum of any contiguous subarray within the sequence. Write a function that takes a list of integers and returns the maximum sum of any contiguous subarray. -----Constraints----- - The length of the list is between 1 and 1000. - Each element in the list is an integer between -1000 and 1000. -----Input----- Input consists of a single line containing space-separated integers representing the list of numbers. -----Output----- Print the maximum sum of any contiguous subarray. -----Sample Input----- 1 -2 3 10 -4 7 2 -5 -----Sample Output----- 18 In this case, the subarray with the maximum sum is [3, 10, -4, 7, 2], and the sum is 3 + 10 - 4 + 7 + 2 = 18. Hence, the correct output is 18.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given list of integers. if not nums: # edge case for empty list return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a list of integers, write a function that will return the list where each integer is replaced with the product of every integer in the original list except for the integer at that index. You should not use division in your solution. Examples For example, given the input list `[1, 2, 3, 4, 5]`, your function should return `[120, 60, 40, 30, 24]`. For the input list `[3, 2, 1]`, the function should return `[2, 3, 6]`. Constraints - You can assume that the list will have at least one integer and each integer will be non-negative. - Try to find a solution that works in O(n) time.","solution":"def product_except_self(nums): Given a list of integers, return a new list such that each element at index i of the new list is the product of all the numbers in the original array except the one at i. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"A large conference is being organized, and the organizers need to allocate rooms efficiently. There are `N` sessions and `M` rooms available. Each session has a specific start and end time, and each room can only host one session at a time with no overlaps. Due to a high number of attendees, it\'s crucial to accommodate as many sessions as possible. Your task is to determine the maximum number of sessions that can be scheduled without any overlap, given the constraints of the room availability. -----Input----- - The first line of the input contains an integer `T` denoting the number of test cases. - For each test case, the first line contains two space-separated integers `N` and `M`. - The following `N` lines each contain two integers representing the start and end times of each session. -----Output----- For each test case, output a single line containing one integer — the maximum number of sessions that can be scheduled without overlapping. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le M le 100 - 1 le text{start_time} < text{end_time} le 10^9 -----Example Input----- 2 5 2 1 4 2 6 4 7 1 3 5 8 3 1 1 5 2 3 3 7 -----Example Output----- 4 2 -----Explanation----- Example case 1: With 5 sessions and 2 rooms, the maximum number of non-overlapping sessions possible are: - Room 1: Session (1 3) and Session (4 7) - Room 2: Session (1 4) and Session (5 8) Example case 2: With 3 sessions and 1 room, the maximum number of non-overlapping sessions possible are: - Room 1: Session (2 3) and Session (1 5)","solution":"def max_sessions(t, test_cases): results = [] for case in test_cases: n, m, sessions = case[\'n\'], case[\'m\'], case[\'sessions\'] sessions.sort(key=lambda x: x[1]) # sort by end time total_sessions = 0 room_end_times = [0] * m # initialize end times for all rooms for start, end in sessions: for i in range(m): if room_end_times[i] <= start: room_end_times[i] = end total_sessions += 1 break results.append(total_sessions) return results"},{"question":"# Find the unique Union of Two Arrays Write a function that takes two arrays as inputs and returns a new array containing the unique elements that exist in either of the input arrays. The returned array should not contain any duplicate values and should be sorted in ascending order. Example: ``` Input: arr1 = [1, 3, 2, 4], arr2 = [3, 5, 6, 4] Output: [1, 2, 3, 4, 5, 6] Input: arr1 = [8, 9, 7], arr2 = [7, 6, 5] Output: [5, 6, 7, 8, 9] ```","solution":"def unique_union(arr1, arr2): Returns a sorted list of unique elements present in either arr1 or arr2. # Use a set to automatically handle uniqueness unique_elements = set(arr1).union(set(arr2)) # Convert the set back to a list and sort it return sorted(list(unique_elements))"},{"question":"In a parallel universe, there exists a special type of binary number called \\"Spl-Number\\". A number is referred to as a Spl-Number if it contains exactly one segment of consecutive 1s. For example, the binary numbers `100`, `1100`, `011000`, etc., are all Spl-Numbers, while the binary numbers `101`, `1001`, and `11010` are not. Your task is to check if a given binary number is a Spl-Number. -----Input:----- - The input contains a single line, which is a binary number B. -----Output:----- - Print `YES` if the number is a Spl-Number, otherwise print `NO`. -----Constraints:----- - 1 leq Length of B leq 10^5 -----Sample Input 1:----- 1000 -----Sample Output 1:----- YES -----Sample Input 2:----- 11010 -----Sample Output 2:----- NO","solution":"def is_spl_number(b): Determines if a binary number is a Spl-Number. A Spl-Number should contain exactly one segment of consecutive 1s. Parameters: b (str): A binary number as a string. Returns: str: \\"YES\\" if b is a Spl-Number, \\"NO\\" otherwise. import re matches = re.findall(r\'1+\', b) if len(matches) == 1: return \\"YES\\" return \\"NO\\""},{"question":"Problem Let\'s play a game with numbers called \\"Reverse-Sum Palindrome\\". The rules of the game are as follows: 1. Given an integer number, obtain its reverse by reversing its digits. 2. Add the original number and its reverse together. 3. Check if the sum is a palindrome (a number that reads the same backward as forward). If the sum is a palindrome, the game ends. If it\'s not, repeat the above steps with the new sum. Write a program that will determine the number of steps required to reach a palindrome for a given integer. Constraints The input satisfies the following conditions: * ( 1 leq N leq 10^9 ) Input An integer N, the initial number. Output Output the number of steps required to reach a palindrome. Examples Input 56 Output 1 Input 87 Output 4","solution":"def reverse_number(n): Returns the reverse of the given number n. return int(str(n)[::-1]) def is_palindrome(n): Checks if the given number n is a palindrome. s = str(n) return s == s[::-1] def steps_to_palindrome(n): Determines the number of steps required to reach a palindrome. steps = 0 while not is_palindrome(n): reverse_n = reverse_number(n) n = n + reverse_n steps += 1 return steps"},{"question":"A park is designed with several pathways representing a connected, undirected graph. Each pathway has a specific distance associated with it. The objective is to find the minimum distance required to connect all parts of the park (i.e., find the minimum spanning tree of the graph). You are provided with the number of intersection points (nodes) in the park and a list of all pathways (edges) between them, each represented by two endpoints and the distance. -----Input----- The input consists of multiple lines: - The first line contains an integer n (1 leq n leq 100) representing the number of intersection points. - The second line contains an integer m (0 leq m leq frac{n(n-1)}{2}) representing the number of pathways. - The following m lines each contain three integers u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 1000) representing a pathway between intersection points u and v with distance w. -----Output----- Display the minimum distance needed to connect all intersection points. If it is not possible to connect all points, display `impossible`. -----Examples----- Sample Input: 4 5 1 2 2 1 3 3 1 4 1 2 3 4 3 4 5 Sample Output: 6 Sample Input: 3 1 1 2 1 Sample Output: impossible","solution":"def kruskal(n, edges): Function to find the minimum cost to connect all nodes using Kruskal\'s algorithm. # Sort edges based on weight edges.sort(key=lambda x: x[2]) parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX min_cost = 0 edge_count = 0 for u, v, w in edges: if find(u - 1) != find(v - 1): union(u - 1, v - 1) min_cost += w edge_count += 1 if edge_count == n - 1: break if edge_count != n - 1: return \\"impossible\\" return min_cost def minimum_distance_to_connect_all_parts(n, m, paths): Given the number of nodes, number of edges, and the list of edges (paths), return the minimum distance to connect all nodes, or \\"impossible\\" if it can\'t be done. if n == 1: return 0 if m == 0: return \\"impossible\\" return kruskal(n, paths) # Sample Input: # n = 4 # m = 5 # paths = [ # [1, 2, 2], # [1, 3, 3], # [1, 4, 1], # [2, 3, 4], # [3, 4, 5] # ] # Sample Output: 6"},{"question":"Given a binary tree, you are required to perform certain queries on it. You are to support the following types of queries: 1. Update the value of a node. 2. Find the maximum value in the subtree of a given node. The binary tree is rooted at node 1 and has N nodes. The nodes are numbered from 1 to N. ------ Input ------ The first line contains two integers N and Q, the number of nodes in the tree and the number of queries, respectively. The second line contains N integers, where the i-th integer denotes the initial value of the i-th node. Each of the next N-1 lines contains two integers u and v denoting that there is an edge between nodes u and v. Each of the next Q lines describes a query using one of the following formats: 1. `1 u value` – Update the value of node u to `value`. 2. `2 u` – Find the maximum value in the subtree of node u. ------ Output ------ For each query of type 2, output the maximum value present in the subtree of the queried node. ------ Constraints ------ 2 ≤ N, Q ≤ 10^5 1 ≤ value ≤ 10^9 1 ≤ u, v ≤ N ------ Sample Input ------ 5 3 1 2 3 4 5 1 2 1 3 3 4 3 5 2 3 1 3 10 2 3 ------ Sample Output ------ 5 10 ------ Explanation ------ In the sample input, the binary tree is: ``` 1 / 2 | 3 / 4 5 ``` - The first query asks for the maximum value in the subtree of node 3, which initially comprises nodes 3, 4, and 5 with values 3, 4, and 5, respectively. The maximum value is 5. - The second query updates the value of node 3 to 10. - The third query asks again for the maximum value in the subtree of node 3, now comprising nodes 3, 4, and 5 with values 10, 4, and 5, respectively. The maximum value now is 10.","solution":"class BinaryTree: def __init__(self, n, values): self.n = n self.values = values self.edges = [[] for _ in range(n + 1)] self.subtree_max = [0] * (n + 1) self.visited = [False] * (n + 1) self.parent = [-1] * (n + 1) def add_edge(self, u, v): self.edges[u].append(v) self.edges[v].append(u) def update_value(self, u, value): self.values[u - 1] = value self.dfs(1) def find_subtree_max(self, u): return self.subtree_max[u] def dfs(self, node): self.visited[node] = True max_val = self.values[node - 1] for neighbor in self.edges[node]: if not self.visited[neighbor]: self.parent[neighbor] = node self.dfs(neighbor) max_val = max(max_val, self.subtree_max[neighbor]) self.subtree_max[node] = max_val self.visited[node] = False def process_queries(N, values, edges, queries): bt = BinaryTree(N, values) for u, v in edges: bt.add_edge(u, v) bt.dfs(1) result = [] for query in queries: if query[0] == 1: u, value = query[1], query[2] bt.update_value(u, value) elif query[0] == 2: u = query[1] result.append(bt.find_subtree_max(u)) return result"},{"question":"# Median of Two Sorted Arrays Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays. The overall run time complexity should be `O(log (m+n))`. You may assume `nums1` and `nums2` cannot be both empty. **Function Signature:** ```python def find_median_sorted_arrays(nums1: List[int], nums2: List[int]) -> float: ``` **Note:** - The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values. - Example: Input: `nums1 = [1, 3]`, `nums2 = [2]` Output: `2.000` Explanation: The merged array `=[1,2,3]` and median is `2`. - Example: Input: `nums1 = [1, 2]`, `nums2 = [3, 4]` Output: `2.500` Explanation: The merged array `=[1,2,3,4]` and median is `(2 + 3) / 2 = 2.5`. Constraints: - nums1.length == m - nums2.length == n - 0 <= m, n <= 1000 - 1 <= m + n <= 2000 - -10^6 <= nums1[i], nums2[i] <= 10^6 Examples: # Basic Tests ``` Input: nums1 = [1, 3], nums2 = [2] Output: 2.0 ``` ``` Input: nums1 = [1, 2], nums2 = [3, 4] Output: 2.5 ``` # Edge Cases ``` Input: nums1 = [1], nums2 = [] Output: 1.0 ``` ``` Input: nums1 = [2], nums2 = [1] Output: 1.5 ``` ----- Testing Along with the example tests given: - There are **200** tests using arrays of length in range [1 - 1,000] - There are **20** tests using arrays of length in range [1,000 - 2,000] All test cases can be passed within 5 seconds using a binary search approach. Good Luck! This problem was inspired by [this](https://leetcode.com/problems/median-of-two-sorted-arrays/) challenge on LeetCode.","solution":"from typing import List def find_median_sorted_arrays(nums1: List[int], nums2: List[int]) -> float: if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j-1]: imin = i + 1 elif i > 0 and nums1[i-1] > nums2[j]: imax = i - 1 else: if i == 0: max_of_left = nums2[j-1] elif j == 0: max_of_left = nums1[i-1] else: max_of_left = max(nums1[i-1], nums2[j-1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"Alice is organizing a series of coding competitions for the students at her university. To make the competition fair, she wants to form teams of exactly three members. Each team member must have a distinct skill level. Specifically, for a given team, one member should be a beginner, another should be intermediate, and the third should be advanced in terms of coding skill. Alice has a list of students\' skill levels. She wants to form as many teams as possible from the available students. A student\'s skill level is represented as an integer, where a lower number indicates a lower skill level. Your task is to help Alice determine the maximum number of teams she can form. You may assume that a skill level of 1 represents a beginner, 2 represents an intermediate, and 3 represents an advanced skill level. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of students. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 3) — the skill levels of the students. The sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, print a single integer — the maximum number of teams Alice can form. -----Examples----- Input 3 6 1 1 2 2 3 3 4 1 1 1 1 9 1 2 3 2 1 3 2 3 1 Output 2 0 3 -----Note----- In the first test case, Alice can form 2 teams by picking 1 beginner, 1 intermediate, and 1 advanced for each team. In the second test case, all students are beginners, so Alice cannot form any teams. In the third test case, Alice can form 3 teams by using the students with skill levels as (1, 2, 3) for each team.","solution":"def max_teams(t, test_cases): Determines the maximum number of teams that can be formed. Each team must consist of one beginner (skill level 1), one intermediate (skill level 2), and one advanced (skill level 3). :param t: Number of test cases :param test_cases: List of tuples, each tuple contains: (n, skills) where n is the number of students and skills is a list of their skill levels. :return: List of integers representing the maximum number of teams for each test case. results = [] for case in test_cases: n, skills = case count_1 = skills.count(1) count_2 = skills.count(2) count_3 = skills.count(3) # teams can be formed in the number equal to the min count of skill levels teams = min(count_1, count_2, count_3) results.append(teams) return results"},{"question":"You\'re given an array of non-negative integers where each element represents the maximum jump length at that position. Your task is to determine the minimum number of jumps required to reach the end of the array (starting from the first element). If it is not possible to reach the end of the array, return -1. Input The first input line contains one number T — the number of test cases (1 ≤ T ≤ 1000). Each of the following T lines contains an array of integers (1 ≤ length of array ≤ 10^4, 0 ≤ elements of array ≤ 100). Output For each test case, output the minimum number of jumps required to reach the end of the array, or -1 if it is not possible. Examples Input 2 2 3 1 1 4 3 2 1 0 4 Output 2 -1","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the end of the array. If it is not possible to reach the end, returns -1. :param arr: List of non-negative integers :return: Minimum number of jumps or -1 if not possible if not arr or len(arr) == 1: return 0 n = len(arr) jumps = 0 current_end = 0 farthest = 0 for i in range(n): farthest = max(farthest, i + arr[i]) if i == current_end: if i < n - 1: # Ensure we are not already at the last element jumps += 1 current_end = farthest if current_end >= n - 1: break else: break return jumps if current_end >= n - 1 else -1 def process_test_cases(T, arrays): results = [] for arr in arrays: results.append(min_jumps(arr)) return results"},{"question":"Given a set of stock prices for a company over a range of days, your task is to identify the length of the longest subsequence where each consecutive element is greater than the previous one. Rules: - The input will consist of multiple test cases. - For each test case, you will be given the number of days `n` (1 ≤ n ≤ 10^5) and a list of stock prices for those days. Each price is a positive integer that can go up to 10^9. - The output for each test case should be the length of the longest subsequence where each consecutive price is greater than the previous one. Input: - The first line contains an integer `t`, the number of test cases. (1 ≤ t ≤ 50) - For each test case, the first line contains the integer `n`, the number of days. - The second line contains `n` integers, the stock prices for each day. Output: - For each test case, output the length of the longest increasing subsequence of stock prices. SAMPLE INPUT: 2 6 1 2 1 5 2 3 5 5 1 1 2 3 SAMPLE OUTPUT: 3 3","solution":"def length_of_longest_increasing_subsequence(prices): Given a list of stock prices, returns the length of the longest subsequence where each consecutive element is greater than the previous one. if not prices: return 0 n = len(prices) dp = [1] * n for i in range(1, n): for j in range(i): if prices[i] > prices[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(test_cases): Processes multiple test cases. results = [] for n, prices in test_cases: results.append(length_of_longest_increasing_subsequence(prices)) return results def main(input_lines): Main function to process the input and produce the output. t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) prices = list(map(int, input_lines[index + 1].split())) test_cases.append((n, prices)) index += 2 results = process_test_cases(test_cases) for result in results: print(result) # Example usage: # input_lines = [ # \\"2\\", # \\"6\\", # \\"1 2 1 5 2 3\\", # \\"5\\", # \\"5 1 1 2 3\\" # ] # main(input_lines)"},{"question":"You are given a list of n integers representing the heights of students standing in a queue. They all want to form teams such that each team consists of exactly k consecutive students and the height difference between the tallest and the shortest student in each team should be minimized. Your task is to determine the minimum possible height difference for any valid team. -----Input----- The first line contains two integers n and k (1 leq k leq n leq 10^5) — the number of students and the number of students in each team, respectively. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) representing the heights of the students. -----Output----- Print one integer — the minimum possible height difference for any team of k consecutive students. -----Example----- Input 7 3 1 3 4 9 2 6 7 Output 2 -----Note----- For the example input, we have the following consecutive groups of 3 students: - Heights [1, 3, 4] - difference is 3-1=2 - Heights [3, 4, 9] - difference is 9-3=6 - Heights [4, 9, 2] - difference is 9-2=7 - Heights [9, 2, 6] - difference is 9-2=7 - Heights [2, 6, 7] - difference is 7-2=5 The minimum difference is 2.","solution":"def min_height_difference(n, k, heights): heights.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = heights[i + k - 1] - heights[i] min_diff = min(min_diff, current_diff) return min_diff"},{"question":"Chef decided to plant trees in his backyard. He has N different types of tree saplings, and he wants to plant exactly K saplings to form a row. However, he has certain constraints on planting: He cannot plant the same type of sapling consecutively. To help Chef, write a program to determine the number of different ways to plant the saplings in a row that satisfy the given constraints. Two ways are considered different if the sequence of saplings is different. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case contains two integers, N (number of different types of saplings) and K (number of saplings to plant in a row). ------ Output Format ------ For each test case, output in a single line the number of different ways to plant the saplings. ------ Constraints ------ 1 ≤ T ≤ 200 2 ≤ N ≤ 10 1 ≤ K ≤ 15 ------ Sample Input 1 ------ 3 2 3 3 2 4 1 ------ Sample Output 1 ------ 2 6 4 ------ Explanation 1 ------ TestCase 1: There are 2 different types of saplings, and Chef needs to plant 3 saplings in a row without planting the same type consecutively. The valid sequences are: ABA, BAB where A and B are two different types of saplings. TestCase 2: There are 3 different types of saplings, and Chef needs to plant 2 saplings in a row without planting the same type consecutively. The valid sequences are: AB, AC, BA, BC, CA, CB where A, B, and C are three different types of saplings. TestCase 3: There are 4 different types of saplings, and Chef needs to plant 1 sapling. There are no constraints here, so there are 4 valid sequences.","solution":"def count_ways(N, K): Returns the number of ways to plant K saplings of N different types such that no two consecutive saplings are of the same type. if K == 1: return N # dp[i][j] will store the number of ways to plant i saplings ending with sapling type j dp = [[0] * N for _ in range(K)] # Initialize for the first sapling for j in range(N): dp[0][j] = 1 for i in range(1, K): for j in range(N): dp[i][j] = sum(dp[i-1][k] for k in range(N) if k != j) return sum(dp[K-1]) def process_input(test_cases): results = [] for N, K in test_cases: results.append(count_ways(N, K)) return results"},{"question":"Library Management System You need to implement a simplified library management system where users can borrow and return books. The library has a collection of books, each with a unique ISBN number. The system should allow you to keep track of which books are borrowed and by whom. Input: - The first line will contain `N`, the number of transactions (1 <= N <= 200). - The next `N` lines will each contain a transaction in one of the following formats: - `BORROW userName ISBN` - This means `userName` wants to borrow the book with the given `ISBN`. - `RETURN userName ISBN` - This means `userName` wants to return the book with the given `ISBN`. It\'s guaranteed that all book are initially available and each book can be borrowed by only one user at a time. Any return transaction will correspond to a previously made borrow transaction. Output: - For each `BORROW` transaction, if the book is available, output `userName borrowed ISBN`, otherwise output `ISBN already borrowed by another user`. - For each `RETURN` transaction, output `userName returned ISBN`. Example: Input: 6 BORROW Alice 123 BORROW Bob 456 BORROW Alice 456 RETURN Bob 456 BORROW Alice 456 RETURN Alice 123 Output: Alice borrowed 123 Bob borrowed 456 456 already borrowed by another user Bob returned 456 Alice borrowed 456 Alice returned 123","solution":"def library_system(transactions): borrowed_books = {} # Key: ISBN, Value: userName results = [] for transaction in transactions: action, user, isbn = transaction.split() if action == \\"BORROW\\": if isbn in borrowed_books: results.append(f\\"{isbn} already borrowed by another user\\") else: borrowed_books[isbn] = user results.append(f\\"{user} borrowed {isbn}\\") elif action == \\"RETURN\\": if isbn in borrowed_books and borrowed_books[isbn] == user: results.append(f\\"{user} returned {isbn}\\") del borrowed_books[isbn] # Remove the book from borrowed list return results # Sample transactions for testing transactions_list = [\\"BORROW Alice 123\\", \\"BORROW Bob 456\\", \\"BORROW Alice 456\\", \\"RETURN Bob 456\\", \\"BORROW Alice 456\\", \\"RETURN Alice 123\\"] print(library_system(transactions_list))"},{"question":"A large inventory system in a warehouse keeps track of items using a unique Inventory ID and records the quantity of each item in stock. The warehouse is implementing a system to track changes in inventory over time. Your task is to write a program that processes a series of operations on the inventory. Each operation can either add new items, remove items, or check the current stock of an item. Here are the operations that need to be handled: 1. Add items (`add`): adds a specified quantity of an item to the inventory. 2. Remove items (`remove`): removes a specified quantity of an item from the inventory. If the quantity to be removed exceeds the current stock, remove as much as possible. 3. Check stock (`check`): returns the current quantity of an item in stock. -----Constraints----- - All values in input are integers. - The number of operations is at most 10^5. - Inventory IDs and quantities are positive integers. - 1 le InventoryID le 10^9 - 1 le Quantity le 10^9 -----Input----- Input is given from Standard Input in the following format: N op_1 op_2 : op_N Where `N` is the number of operations, and `op_i` represents each operation. Each operation is represented as a string with the following format: - \\"add InventoryID Quantity\\" - \\"remove InventoryID Quantity\\" - \\"check InventoryID\\" -----Output----- For each \\"check\\" operation, print the current quantity of the specified item on a new line. -----Sample Input----- 6 add 1 100 add 2 200 check 1 remove 1 50 check 1 check 2 -----Sample Output----- 100 50 200 In the sample input, there are six operations. After adding 100 units of item 1 and 200 units of item 2 to the inventory, the first \\"check\\" operation confirms that there are 100 units of item 1. Then, 50 units of item 1 are removed, leaving 50 units in stock, which is confirmed by the second \\"check\\". Finally, the third \\"check\\" confirms that item 2 still has 200 units in stock.","solution":"def process_inventory_operations(operations): inventory = {} results = [] for op in operations: parts = op.split() command = parts[0] inventory_id = int(parts[1]) if command == \\"add\\": quantity = int(parts[2]) if inventory_id in inventory: inventory[inventory_id] += quantity else: inventory[inventory_id] = quantity elif command == \\"remove\\": quantity = int(parts[2]) if inventory_id in inventory: inventory[inventory_id] = max(0, inventory[inventory_id] - quantity) elif command == \\"check\\": if inventory_id in inventory: results.append(inventory[inventory_id]) else: results.append(0) return results"},{"question":"You are organizing a school\'s annual sports competition. Each year, students participate in various events, and you want to keep track of the winners. For every event, you have a list of students, and the position they achieved in the event. You will be given a dictionary where the keys are event names, and the values are lists of tuples. Each tuple consists of a student\'s name and the position they achieved. You need to write a function that returns a dictionary summarizing the best position each student achieved across all events. If a student participated in multiple events with the same best position, any can be recorded. Example: Input: { \\"100m\\": [(\\"Alice\\", 1), (\\"Bob\\", 2), (\\"Celine\\", 3)], \\"long_jump\\": [(\\"Alice\\", 2), (\\"Celine\\", 1)], \\"high_jump\\": [(\\"Bob\\", 3), (\\"Alice\\", 1), (\\"Celine\\", 2)] } Output: { \\"Alice\\": 1, \\"Bob\\": 2, \\"Celine\\": 1 } Note: - Assume each event-list tuple is unique. - Each student\'s position will be a positive integer.","solution":"def best_positions(event_results): Returns a dictionary summarizing the best position each student achieved across all events. Parameters: event_results (dict): A dictionary where the keys are event names, and the values are lists of tuples. Each tuple consists of a student\'s name and the position they achieved. Returns: dict: A dictionary where the keys are student names and the values are their best positions across all events. result = {} for event, participants in event_results.items(): for student, position in participants: if student not in result or position < result[student]: result[student] = position return result"},{"question":"In a faraway land, there is a kingdom with a peculiar currency system. The currency system consists of coins of the following denominations: 1, 3, and 4 cents. The king wants to provide his subjects with the exact change every time they make a purchase, so he has asked for your help to determine the minimum number of coins needed to make any given amount of change. Input The first line contains a single integer t denoting the number of test cases. The following t lines contain an integer n (1 ≤ n ≤ 10^4) — the amount for which change is to be made. Output For each test case, print a single integer representing the minimum number of coins needed to make the given amount of change. Example: Input: 3 6 11 15 Output: 2 3 4 Explanation: For the first test case, the minimum number of coins needed to make 6 cents is 2 (3 + 3). For the second test case, the minimum number of coins needed to make 11 cents is 3 (4 + 4 + 3). For the third test case, the minimum number of coins needed to make 15 cents is 4 (4 + 4 + 4 + 3).","solution":"def min_coins(t, cases): Returns the minimum number of coins needed to make the given amounts of change for each case. :param t: Number of test cases :param cases: A list of integers where each integer represents an amount of change to be made :return: A list of integers where each integer represents the minimum number of coins needed for the corresponding amount in cases max_amount = max(cases) # Initialize a list to store the minimum number of coins for each amount up to the maximum amount in the cases min_coins_required = [float(\'inf\')] * (max_amount + 1) # Base case: 0 coins needed to make 0 cents min_coins_required[0] = 0 denominations = [1, 3, 4] for i in range(1, max_amount + 1): for coin in denominations: if i >= coin: min_coins_required[i] = min(min_coins_required[i], min_coins_required[i - coin] + 1) result = [min_coins_required[amount] for amount in cases] return result"},{"question":"Lena has recently developed an interest in number sequences and patterns. She is focusing on an interesting sequence where each term is a power of 2 minus 1. She wants to write a program that generates the first N terms in descending order. Help Lena by writing this program. The sequence should be generated as follows: Each term is defined as (a_i = 2^i - 1). # Example: **Input:** 4 **Output:** 15 7 3 1 **Explanation:** The terms are calculated as: [ a_4 = 2^4 - 1 = 15 a_3 = 2^3 - 1 = 7 a_2 = 2^2 - 1 = 3 a_1 = 2^1 - 1 = 1 ] -----Input:----- The first line contains a single integer T, the number of test cases. The description of T test cases follows. Each of the next T lines contains a single integer N. -----Output:----- For each test case, print N terms of the sequence, space-separated in descending order. -----Constraints:----- 1 leq T leq 10^5 1 leq N leq 50 -----Sample Input:----- 2 3 5 -----Sample Output:----- 7 3 1 31 15 7 3 1 -----Sample Input:----- 1 4 -----Sample Output:----- 15 7 3 1","solution":"def generate_sequence_descending(N): Generates the first N terms of the sequence (2^i - 1) in descending order. sequence = [(2 ** i) - 1 for i in range(N, 0, -1)] return sequence def process_test_cases(test_cases): Process multiple test cases and return results for each. Parameters: test_cases (list of int): List containing N values for each test case. Returns: list of list of int: Each inner list contains the sequence for that test case. results = [] for N in test_cases: result = generate_sequence_descending(N) results.append(result) return results"},{"question":"In a certain country, there are n cities and m roads connecting them. Each road connects two cities and is bidirectional. The roads are such that no two roads directly connect the same pair of cities, and no road connects a city to itself. You are given q queries, each specifying two cities. For each query, determine whether it\'s possible to travel from the first city to the second city using the given roads. Input The first line contains two integers n and m (1≤ n,m ≤ 1000) — the number of cities and roads, respectively. The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a road between city u and city v. The next line contains a single integer q (1 ≤ q ≤ 1000) — the number of queries. The next q lines contain two integers a and b (1 ≤ a,b ≤ n) — the cities to check for possible travel. Output For each query, print \\"YES\\" if it is possible to travel from the city a to city b using the given roads, and \\"NO\\" otherwise. Examples Input 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 Output YES YES YES Input 6 4 1 2 2 3 4 5 5 6 2 1 4 3 6 Output NO NO Note In the first example, it is possible to travel from city 1 to city 5 through the sequence of roads 1-2-3-4-5. Similarly, town 2 and 4 are connected through roads 2-3-4. In the second example, there is no road connecting the block of cities {1, 2, 3} to the block of cities {4, 5, 6}, thus making travel between cities of different blocks impossible.","solution":"def is_reachable(n, m, roads, q, queries): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) results = [] def bfs(start, goal): # Breadth First Search (BFS) to find if there is a path from start to goal visited = set() queue = deque([start]) while queue: node = queue.popleft() if node == goal: return True if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return False for a, b in queries: if bfs(a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers and a target integer. Your task is to determine if any two distinct elements in the array sum up to the target integer. If such a pair exists, return the indices of the two numbers such that they add up to the target, in any order. If no such pair exists, return -1. Note that the same element cannot be used twice. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The third line contains a single integer t (1 ≤ t ≤ 10^6) — the target integer. -----Output----- If there exists a pair of indices i and j (1 ≤ i, j ≤ n; i ≠ j) such that a_i + a_j = t, print the indices i and j in any order. If no such pair exists, return -1. -----Examples----- Input 5 2 7 11 15 3 9 Output 1 2 Input 6 1 2 3 9 8 7 17 Output 4 6 Input 4 1 2 3 4 8 Output -1","solution":"def find_pair_with_sum(arr, target): Given an array of integers and a target integer, returns the indices (1-based) of two distinct elements that sum up to the target, or -1 if no such pair exists. index_map = {} # To store the indices of the elements for index, value in enumerate(arr): complement = target - value if complement in index_map: # If complement is found in map, return the found index and current index (1-based) return index_map[complement] + 1, index + 1 # Store index of the current element index_map[value] = index # If no pairs found, return -1 return -1"},{"question":"Your task is to implement a function that takes in a string containing only the characters \'0\' and \'1\'. The function should determine the length of the smallest substring that can be flipped (changing \'0\' to \'1\' or \'1\' to \'0\') such that there are no consecutive \'0\'s or \'1\'s in the resulting string. Example 1: Input: \\"110010\\" Output: 1 Explanation: Flipping the second \'1\' produces \\"100010\\", which has no consecutive \'0\'s or \'1\'s. Example 2: Input: \\"000\\" Output: 2 Explanation: Flipping either of the first two \'0\'s or the last two \'0\'s produces \\"010\\" or \\"001\\", which have no consecutive \'0\'s or \'1\'s. Example 3: Input: \\"0110\\" Output: 1 Explanation: Flipping the second \'1\' produces \\"0100\\", which has no consecutive \'0\'s or \'1\'s. Alternatively, flipping the second \'0\' produces \\"0110\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minFlipToNoConsecutive(char[] s)` which takes a string `s` and returns the minimum length of the substring that should be flipped to satisfy the condition. Constraints: 1 ≤ |s| ≤ 1000, where |s| is the length of the input string.","solution":"def minFlipToNoConsecutive(s): Returns the minimum length of the substring that should be flipped to ensure no consecutive \'0\'s or \'1\'s. max_consecutive_len = 0 current_count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_count += 1 else: if current_count > max_consecutive_len: max_consecutive_len = current_count current_count = 1 if current_count > max_consecutive_len: max_consecutive_len = current_count return max_consecutive_len // 2 # Only need to flip half (round down) of the maximum consecutive sequence"},{"question":"You are given a list of students and their scores in a particular subject. Your task is to compute the final letter grade for a given student based on their score. The grading scale is as follows: - A: 90 <= score <= 100 - B: 80 <= score < 90 - C: 70 <= score < 80 - D: 60 <= score < 70 - F: score < 60 Write a program that processes this data and outputs the letter grade for a queried student. Input The input data consists of two parts. The first part contains the student scores, and the second part contains queries for student names whose grades need to be determined. The format of the student scores is as follows: Name1,Score1 Name2,Score2 ... ... END The input ends with the keyword \\"END\\". Each query is given in the following format: Name ... Names are case-sensitive and unique. Output For each query, output the letter grade on a new line. Example Input Alice,85 Bob,92 Charlie,78 David,64 Eve,55 END Alice Bob Charlie David Eve Output B A C D F","solution":"def compute_grade(score): Return the letter grade based on the score using the grading scale. if 90 <= score <= 100: return \'A\' elif 80 <= score < 90: return \'B\' elif 70 <= score < 80: return \'C\' elif 60 <= score < 70: return \'D\' else: return \'F\' def process_student_grades(data): Process the student score data and return a dictionary with names and their grades. student_grades = {} lines = data.strip().split(\'n\') # Process each line until \'END\' is encountered for line in lines: if line == \'END\': break name, score = line.split(\',\') student_grades[name] = compute_grade(int(score)) return student_grades def get_student_grades(data, queries): Given the input data and a list of queries, return the grades of the queried students. student_grades = process_student_grades(data) result = [] for query in queries: if query in student_grades: result.append(student_grades[query]) else: result.append(\'Student not found\') return result"},{"question":"Write a Python function to transform a given integer into its word equivalent. The function should take an integer between 1 and 100 inclusive and return the word representation of that number. Example 1: Input: 42 Output: \\"forty-two\\" Example 2: Input: 17 Output: \\"seventeen\\" Your Task: You don\'t need to input anything. Complete the function numberToWords() which takes an integer n as the input parameter and returns the word representation of the integer. Constraints: 1 <= n <= 100","solution":"def numberToWords(n): Convert a number between 1 and 100 to its word representation. if not (1 <= n <= 100): raise ValueError(\\"The input must be between 1 and 100 inclusive.\\") units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"ten\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] if n == 100: return \\"one hundred\\" if n < 10: return units[n] if 10 <= n < 20: return teens[n - 10] if n % 10 == 0: return tens[n // 10] return tens[n // 10] + \\"-\\" + units[n % 10]"},{"question":"Given a string S of length N consisting of lowercase alphabets, you can perform the following operations: 1. Swap two adjacent characters in the string. 2. Remove a character from anywhere in the string. Calculate the minimum number of operations required to make the string a palindrome. Input format: The first line contains a single integer N, the length of the string S. The second line contains the string S. Output format: Output a single integer, the minimum number of operations needed to make the string a palindrome. Constraints: 1 ≤ N ≤ 1000 SAMPLE INPUT 4 abca SAMPLE OUTPUT 1","solution":"def min_operations_to_make_palindrome(N, S): Calculates the minimum number of operations to make a string a palindrome. Args: N : int : length of the string S S : str : the input string consisting of lowercase alphabets Returns: int : minimum number of operations needed to make the string a palindrome left = 0 right = N-1 operations = 0 while left < right: if S[left] != S[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"You are given an array of integers, mbox{A}. A subarray of mbox{A} is defined as any contiguous segment of mbox{A}. Find the length of the shortest subarray whose sum is greater than or equal to mbox{K}. Input Format The first line contains a single integer mbox{N}, the length of the array mbox{A}. The second line contains mbox{N} space-separated integers, the elements of the array mbox{A}. The third line contains a single integer mbox{K}. Constraints 1 leq mbox{N} leq 10^5 -10^5 leq mbox{A}[i] leq 10^5 1 leq mbox{K} leq 10^9 Output Format Print the length of the shortest subarray whose sum is greater than or equal to mbox{K}. If no such subarray exists, print -1. Sample Input 5 1 2 3 4 5 11 Sample Output 3 Explanation mbox{A} = {1, 2, 3, 4, 5} The subarray {3, 4, 5} has a sum of 12, which is greater than mbox{K}=11. This is the shortest subarray that meets the condition. Therefore, the answer is 3.","solution":"def min_subarray_len(A, K): Finds the length of the shortest subarray whose sum is greater than or equal to K. Parameters: A (list of int): The array of integers. K (int): The target sum. Returns: int: The length of the shortest subarray with sum >= K, or -1 if no such subarray exists. N = len(A) min_length = N + 1 current_sum = 0 start = 0 for end in range(N): current_sum += A[end] while current_sum >= K: min_length = min(min_length, end - start + 1) current_sum -= A[start] start += 1 return min_length if min_length <= N else -1"},{"question":"You are given an array of integers where each element represents the price of a stock on a given day. You want to maximize your profit by choosing a single day to buy a stock and choosing a different day in the future to sell that stock. Create a function that calculates the maximum profit you can achieve from one transaction. If you cannot achieve any profit, return 0. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) - the number of days. The second line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 10^9), where p_i is the price of the stock on the i-th day. -----Output----- For each test case, output the maximum profit that can be achieved from one transaction. If no profit is possible, output 0. -----Example----- Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 -----Explanation----- In the first example: The maximum profit can be achieved by buying on day 2 at price 1 and selling on day 5 at price 6. Thus, the profit is 6 - 1 = 5. In the second example: No transaction can make a profit, so the output is 0.","solution":"def maximum_profit(prices): # Initialize variables min_price = float(\'inf\') max_profit = 0 # Iterate through the list of prices for price in prices: # Update minimum price if price < min_price: min_price = price # Calculate profit if we sell at current price current_profit = price - min_price # Update maximum profit if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"You are given a collection of n positive integers, representing the size of n different tiles. Your task is to distribute these tiles into two groups such that the absolute difference between the sums of the sizes of the tiles in each group is minimized. Write a program that determines the minimum possible absolute difference between the sum of sizes in the two groups. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of tiles. The next line contains n positive integers s_1, s_2, ..., s_n (1 ≤ s_{i} ≤ 10000), where s_{i} represents the size of the i-th tile. -----Output----- Print a single integer, the minimum possible absolute difference between the sums of the sizes of the two groups. -----Examples----- Input 3 2 3 5 Output 0 Input 5 1 2 3 4 5 Output 1","solution":"def min_difference(n, sizes): total_sum = sum(sizes) half_sum = total_sum // 2 dp = [[False] * (half_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, half_sum + 1): dp[i][j] = dp[i-1][j] if sizes[i-1] <= j: dp[i][j] = dp[i][j] or dp[i-1][j-sizes[i-1]] for j in range(half_sum, -1, -1): if dp[n][j]: return abs(total_sum - 2 * j)"},{"question":"Maria is fascinated by magic squares. A magic square is a n x n grid of distinct integers from 1 to n^2 where the sums of integers in each row, each column, and both main diagonals are the same. Maria creates a new way to test the properties of a sequence of numbers by arranging them in a 1 x n grid, and then checking if it\'s possible to rearrange those numbers to form a magic square. Maria believes that any subsequence of numbers can form a magic square. However, she needs a program to double-check her logic. Given a sequence of numbers, determine if they can be rearranged to form a magic square. -----Input----- First line: an integer, n (the size of the grid). Second line: n^2 distinct integers ranging from 1 to n^2. -----Output----- Output \\"YES\\" if they can be rearranged to form a magic square. Otherwise, output \\"NO\\". -----Example----- Input: 3 8 1 6 3 5 7 4 9 2 Output: YES Input: 3 2 7 6 9 5 1 4 3 8 Output: YES Input: 3 1 2 3 4 5 6 7 8 9 Output: NO","solution":"def is_magic_square(n, arr): Check if a given series of n^2 numbers can be rearranged to form a magic square. :param n: Size of the grid :param arr: List of n^2 distinct integers :return: \\"YES\\" if they can be rearranged to form a magic square, otherwise \\"NO\\" def magic_constant(n): return n * (n**2 + 1) // 2 magic_sum = magic_constant(n) grid = [arr[i*n:(i+1)*n] for i in range(n)] # Check rows sum if not all(sum(row) == magic_sum for row in grid): return \\"NO\\" # Check columns sum for col in range(n): if sum(grid[row][col] for row in range(n)) != magic_sum: return \\"NO\\" # Check diagonals sum if sum(grid[i][i] for i in range(n)) != magic_sum: return \\"NO\\" if sum(grid[i][n-i-1] for i in range(n)) != magic_sum: return \\"NO\\" return \\"YES\\""},{"question":"Given an array of integers nums, you need to find the maximum product of two elements in an array. The task is to write a function that takes an array as input and returns the maximum product of any two distinct elements. You cannot use the same element twice. Example 1: Input: nums = [3, 4, 5, 2] Output: 20 Explanation: Maximum product is obtained from 4 * 5 = 20. Example 2: Input: nums = [1, 5, 4, 5] Output: 25 Explanation: Maximum product is obtained from 5 * 5 = 25. Example 3: Input: nums = [3, 7] Output: 21 Explanation: Maximum product is obtained from 3 * 7 = 21. Note: - The length of the given array will be in the range [2, 10^3]. - Each element in the array will be in the range [1, 10^3]. Function Signature: ```python def maxProduct(nums: List[int]) -> int: ```","solution":"from typing import List def maxProduct(nums: List[int]) -> int: This function takes an array of integers and returns the maximum product of any two distinct elements. nums.sort() return nums[-1] * nums[-2]"},{"question":"Alice is organizing a community fair and needs your help to manage the booth activities. There are B booths, numbered from 1 to B, and M participants who want to visit these booths. Each participant has a specific range of booths they are interested in visiting, as well as a duration they will spend at each booth. Your task is to determine if it’s possible for all participants to visit all their desired booths without any booth being occupied by more than one participant at the same time. More formally, for each participant i (1 ≤ i ≤ M): * P_i, the number of booths they want to visit. * A_i, the starting booth number for the range they want to visit (1 ≤ A_i ≤ B). * B_i, the ending booth number for the range they want to visit (A_i ≤ B_i ≤ B). * d_i, the duration in minutes that they will spend at each booth in the range. You need to determine if all the booth visitations can be arranged such that no two participants occupy the same booth at the same time. Constraints: * 1 ≤ B ≤ 1000 * 1 ≤ M ≤ 1000 * 1 ≤ P_i ≤ 100 * 1 ≤ A_i ≤ B_i ≤ B * 1 ≤ d_i ≤ 100 Input: The first line contains two integers B and M. The next M lines each contain four integers P_i, A_i, B_i, and d_i. Output: Print \\"Yes\\" if it is possible to schedule all participants such that no booth is occupied by more than one participant at the same time, otherwise print \\"No\\". Example: Input: 5 3 3 1 3 5 2 3 4 2 4 2 5 3 Output: No Input: 5 2 2 1 2 3 3 3 5 2 Output: Yes","solution":"def can_schedule_booths(B, M, participant_data): # Initialize a dictionary to manage booking information for each booth booth_schedule = {i: [] for i in range(1, B + 1)} # Process each participant\'s schedule for P, A, end, d in participant_data: for booth in range(A, end + 1): # Check if the current booth is already occupied at the given duration\'s time slots for time_slot in range(P): if time_slot in booth_schedule[booth]: return \\"No\\" booth_schedule[booth].append(time_slot) return \\"Yes\\" # Parsing function to handle the provided input format def parse_input(input_string): lines = input_string.strip().split(\\"n\\") B, M = map(int, lines[0].strip().split()) participant_data = [tuple(map(int, line.strip().split())) for line in lines[1:]] return B, M, participant_data # Example usage input_data = 5 3 3 1 3 5 2 3 4 2 4 2 5 3 B, M, participant_data = parse_input(input_data) print(can_schedule_booths(B, M, participant_data))"},{"question":"Tina has a sequence of N integers and she wants to find the longest contiguous subarray which, when sorted, results in the given subarray being in non-decreasing order. Help her to identify this subarray. -----Constraints----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ each element of the sequence ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the length of the longest contiguous subarray which, when sorted, becomes non-decreasing. -----Sample Input----- 8 1 3 5 2 4 6 8 7 -----Sample Output----- 4 In this example, the longest contiguous subarray that can be sorted into non-decreasing order is [2, 4, 6, 8], whose length is 4.","solution":"def longest_subarray_to_sort(arr): n = len(arr) max_len = 1 # At least one element sequence is sorted current_len = 1 for i in range(1, n): if arr[i-1] <= arr[i]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"Warehouse Inventory Management A warehouse stores various types of products and keeps track of the transactions of these products. Each product is identified by a unique product ID, and transactions occur in the form of additions (stocking up) or removals (shipping out). Your task is to write a program that processes a series of transactions and calculates the final inventory levels for each product. If the inventory level of any product falls below zero due to a removal transaction, it should be indicated in the result. Input The input consists of multiple datasets. Each dataset has the following format. > n > op product_id quantity > op product_id quantity > ... > op product_id quantity The integer `n` in the first line denotes the number of transactions included in the dataset. This value is guaranteed not to exceed `100,000`. Each of the following `n` lines describes a transaction with an operation `op`, a product identifier `product_id` (a string of alphanumeric characters up to 10 characters long), and an integer `quantity`. The operation `op` is either `add` (to increase the inventory) or `remove` (to decrease the inventory). The `quantity` is a positive integer up to `1,000`. The end of input is indicated by `n = 0`. It is not included in the dataset. Output For each dataset, output the product IDs and their corresponding inventory levels sorted lexicographically by product ID. If the inventory level of any product is negative, indicate it by appending \\"(negative)\\" next to the inventory level. Sample Input ``` 4 add A12 100 remove A12 50 add B23 200 remove B23 250 3 add X1 10 remove X1 5 add Y2 20 0 ``` Output for the Sample Input ``` A12 50 B23 -50 (negative) X1 5 Y2 20 ``` Example Input ``` 4 add A12 100 remove A12 50 add B23 200 remove B23 250 3 add X1 10 remove X1 5 add Y2 20 0 ``` Output ``` A12 50 B23 -50 (negative) X1 5 Y2 20 ```","solution":"def process_transactions(datasets): results = [] for dataset in datasets: inventory = {} n = dataset.pop(0) for _ in range(n): op, product_id, quantity = dataset.pop(0).split() quantity = int(quantity) if op == \\"add\\": if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif op == \\"remove\\": if product_id in inventory: inventory[product_id] -= quantity else: inventory[product_id] = -quantity # Prepare the results, sorted by product ID sorted_inventory = sorted(inventory.items()) result = [] for product_id, qty in sorted_inventory: if qty < 0: result.append(f\\"{product_id} {qty} (negative)\\") else: result.append(f\\"{product_id} {qty}\\") results.append(\\"n\\".join(result)) return \\"n\\".join(results)"},{"question":"# String Expansion and Repetition You are given a compressed string where parts of the string are repeated a certain number of times. The compressed section of the string follows the format `k[encoded_string]` where `k` is the number of times the `encoded_string` should be repeated. For example, the string \\"3[abc]\\" should be expanded to \\"abcabcabc\\". Your task is to write a function that takes a compressed string as input and returns the expanded form of the string. The compression is guaranteed to be well-formed, which means you will not encounter invalid input strings. Function Signature: ```python def expand_string(s: str) -> str: pass ``` # Input: - A single string `s` that represents the compressed version. The string can contain: - lowercase letters - digits - matched pairs of brackets `[ ]` indicating the compressed section of the string. # Output: - The expanded string which is decompressed from the input string. # Constraints: - The input string `s` will have a length between `1` and `30`. - The integer `k` will be a positive integer between `1` and `9`. - The deepest level of nesting for brackets will not exceed `3`. # Examples: **Example 1:** ``` Input: \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" ``` **Example 2:** ``` Input: \\"3[a2[c]]\\" Output: \\"accaccacc\\" ``` **Example 3:** ``` Input: \\"2[abc]3[cd]ef\\" Output: \\"abcabccdcdcdef\\" ``` **Example 4:** ``` Input: \\"10[a]\\" Output: \\"aaaaaaaaaa\\" ``` **Example 5:** ``` Input: \\"3[ab2[c]]\\" Output: \\"abccabccabcc\\" ``` # Notes: - You should handle nested expressions correctly. For example, in \\"3[a2[c]]\\", \\"a2[c]\\" expands to \\"acc\\", and \\"3[acc]\\" expands to \\"accaccacc\\".","solution":"def expand_string(s: str) -> str: Expands the compressed string using the format k[encoded_string]. stack = [] # Stack to hold current string segments and counts current_string = \\"\\" k = 0 # Current count that we are building for char in s: if char.isdigit(): k = k * 10 + int(char) elif char == \'[\': # Push the current segment and count to stack stack.append((current_string, k)) # Reset current string and count for the new segment current_string = \\"\\" k = 0 elif char == \']\': # Pop from stack prev_string, repeat_count = stack.pop() # Expand the current_string current_string = prev_string + current_string * repeat_count else: current_string += char return current_string"},{"question":"You are given a string comprising digits and the characters \'*\', \'+\', and \'-\'. These symbols stand for multiplication, addition, and subtraction operations respectively. Write a program that evaluates the mathematical expression represented by the string and outputs the integer result. Assume the input string is always a valid expression and follows the standard order of operations (i.e., multiplication before addition and subtraction). Input A string s of length (1 ≤ |s| ≤ 100) is given in a line. Output Print the integer result of the evaluated string in a line. Example Input \\"3+5*2-4\\" Output 9","solution":"def evaluate_expression(expression): Evaluate the mathematical expression given in the string. # Define operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2} # Helper function to perform arithmetic operations def apply_operation(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) # Helper function to perform all operations with higher or equal precedence def process_operators(operators, values, current_op): while (operators and precedence[operators[-1]] >= precedence[current_op]): apply_operation(operators, values) operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): start = i while i < len(expression) and expression[i].isdigit(): i += 1 values.append(int(expression[start:i])) else: process_operators(operators, values, expression[i]) operators.append(expression[i]) i += 1 while operators: apply_operation(operators, values) return values[0]"},{"question":"You are tasked with creating a function that takes two strings as input and determines if one is a permutation of the other. A permutation of a string is another string that contains the same characters, only the order of characters can be different. The function should return `True` if one string is a permutation of the other, and `False` otherwise. Examples: - `are_permutations(\\"abcd\\", \\"dcba\\")` should return `True` because both strings contain the same characters. - `are_permutations(\\"abcd\\", \\"abdc\\")` should return `True` for the same reason. - `are_permutations(\\"abcd\\", \\"abcc\\")` should return `False` because the characters are not the same. - `are_permutations(\\"abcd\\", \\"abcdx\\")` should return `False` because the second string contains an extra character.","solution":"def are_permutations(s1, s2): Determine if one string is a permutation of another. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if one string is a permutation of the other, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"Write a function to find the longest common prefix (LCP) of an array of strings. The longest common prefix of a set of strings is the longest prefix which is common to all the strings in the set. If there is no common prefix, return an empty string. Constraints * 1 ≤ number of strings ≤ 200 * 1 ≤ length of each string ≤ 200 * All strings contain only lowercase English letters (a-z). Input A list of strings. Output The longest common prefix for the provided list of strings. Examples Input [\\"flower\\",\\"flow\\",\\"flight\\"] Output \\"fl\\" Input [\\"dog\\",\\"racecar\\",\\"car\\"] Output \\"\\"","solution":"def longest_common_prefix(strs): Returns the longest common prefix of a list of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start with the first string as the prefix candidate prefix = strs[0] for s in strs[1:]: while not s.startswith(prefix): # Shorten the prefix by removing one character from the end prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"A popular online game has n levels. Each level, upon completion, awards the player a certain number of points. Players need to advance through the levels by accumulating points. However, the points required to unlock each subsequent level follow a complex pattern that you need to analyze. Your task is to determine the minimum number of levels a player must complete to achieve a target score of S or more. You are given the number of points each level awards, and levels can be played in any order. Input The first line contains two integers n and S (1 ≤ n ≤ 1000, 1 ≤ S ≤ 1000000), the number of levels and the target score, respectively. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 10000) – the points awarded for each level. Output In the first line, print an integer representing the minimum number of levels required to achieve a score of S or more. If it is impossible to achieve a score of S, print -1. Examples Input 5 25 5 7 8 9 10 Output 3 Input 3 15 5 5 5 Output 3 Input 4 50 3 3 3 3 Output -1","solution":"def min_levels_to_reach_score(n, S, points): Determines the minimum number of levels required to achieve a target score of S. Params: n (int): number of levels S (int): target score points (list): points awarded for each level Returns: int: minimum number of levels required to achieve the score S or -1 if impossible points.sort(reverse=True) total_points = 0 levels_count = 0 for point in points: total_points += point levels_count += 1 if total_points >= S: return levels_count return -1"},{"question":"Write a function that takes a list of integers and a target number. The function should return the indices of the two numbers in the list that add up to the target number. Assume there is exactly one solution, and you may not use the same element twice. # Function Signature ```python def two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Example Input: ```python nums = [2, 7, 11, 15] target = 9 ``` Output: ```python [0, 1] ``` # Constraints 1. You may assume that each input would have exactly one solution. 2. The same element cannot be used twice. 3. The solution must have a time complexity of `O(n)`. # Explanation In the example given, `nums[0] + nums[1]` is `2 + 7 = 9`, hence the function should return `[0,1]`.","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers in the list that add up to the target number. Assumes there is exactly one solution and the same element may not be used twice. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i # Since the problem states there is exactly one solution, # we don\'t need to handle the case where no solution is found."},{"question":"You are given two sequences of n integers each such that the sequences are permutations of each other. You can perform the following operations any number of times to make these sequences identical: 1. Choose any element from the first sequence and move it to the end, shifting all subsequent elements one position to the left. 2. Choose any element from the second sequence and move it to the end, shifting all subsequent elements one position to the left. You want to perform the minimum number of moves to make the two sequences identical. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the length of the sequences. The next two lines each contain n integers. The first of these lines is the first sequence and the second line is the second sequence. It is guaranteed that these sequences are permutations of each other. -----Output----- Print one integer — the minimum number of moves required to make the sequences identical. -----Examples----- Input 3 1 2 3 3 2 1 Output 4 Input 5 5 4 3 2 1 1 2 3 4 5 Output 8 -----Note----- In the first example, one of the optimal ways is to move 3 in the first sequence to the end (2 moves), then 2 to the end (2 moves), resulting in sequences [1, 3, 2] and [3, 2, 1], thus taking 4 moves in total. In the second example, you must move every element in the first sequence to the end exactly once in sequence, resulting in 8 total moves.","solution":"def min_moves_to_identical(n, seq1, seq2): Parameters: n (int): The length of the sequences. seq1 (list): The first sequence of integers. seq2 (list): The second sequence of integers. Returns: int: The minimum number of moves required to make the sequences identical. # create a dictionary to store the index of each element in the second sequence index_map = {value: idx for idx, value in enumerate(seq2)} # create a list to store the mapped indices of seq1\'s elements mapped_seq = [index_map[value] for value in seq1] # Find the longest increasing subsequence (LIS) in mapped_seq lis = [] for idx in mapped_seq: pos = binary_search(lis, idx) if pos == len(lis): lis.append(idx) else: lis[pos] = idx # The number of moves required is twice the number of elements not in the LIS return 2 * (n - len(lis)) def binary_search(seq, value): Helper function to perform binary search and return the position to replace or append. low, high = 0, len(seq) while low < high: mid = (low + high) // 2 if seq[mid] < value: low = mid + 1 else: high = mid return low"},{"question":"A company needs to track the stock levels in its warehouse. Each item in the warehouse has a code and a quantity available. The warehouse receives shipments and needs to fulfill orders. A shipment adds a certain quantity of a certain item to the warehouse. An order subtracts a certain quantity of a certain item from the warehouse if enough stock is available; otherwise, reject the order. You need to write a program to manage the stock levels based on a series of operations indicating shipments and orders. The program should perform the following operations: - Receive a shipment of a certain quantity of a certain item. - Fulfill an order by subtracting the quantity of a certain item if there is enough stock; otherwise, reject the order. -----Input----- The input consists of multiple lines of text. The first line contains an integer N, the number of operations (1 ≤ N ≤ 100). Each of the next N lines describes one operation in one of the following two formats: 1. \\"ship ITEM_CODE QUANTITY\\": Denotes a shipment of a certain item (ITEM_CODE) and its quantity (QUANTITY, 1 ≤ QUANTITY ≤ 100). 2. \\"order ITEM_CODE QUANTITY\\": Denotes an order of a certain item (ITEM_CODE) with the quantity requested (QUANTITY, 1 ≤ QUANTITY ≤ 100). Both ITEM_CODE and QUANTITY are integers. -----Output----- For each order operation, output either \\"Order ITEM_CODE fulfilled\\" if there was enough stock to fulfill the order, or \\"Order ITEM_CODE rejected\\" otherwise. -----Example----- Sample Input: 6 ship 101 50 ship 202 30 order 101 20 order 202 40 order 101 60 ship 101 30 Sample Output: Order 101 fulfilled Order 202 rejected Order 101 rejected","solution":"def manage_stock(operations): stock = {} results = [] for operation in operations: parts = operation.split() op_type, item_code, quantity = parts[0], int(parts[1]), int(parts[2]) if op_type == \\"ship\\": if item_code in stock: stock[item_code] += quantity else: stock[item_code] = quantity elif op_type == \\"order\\": if item_code in stock and stock[item_code] >= quantity: stock[item_code] -= quantity results.append(f\\"Order {item_code} fulfilled\\") else: results.append(f\\"Order {item_code} rejected\\") return results # Example usage: operations = [ \\"ship 101 50\\", \\"ship 202 30\\", \\"order 101 20\\", \\"order 202 40\\", \\"order 101 60\\", \\"ship 101 30\\" ] print(manage_stock(operations)) # Expected output: # [\'Order 101 fulfilled\', \'Order 202 rejected\', \'Order 101 rejected\']"},{"question":"The school for wizards is organizing a magical duel competition. Each participant has a certain magical power level (positive integer) that they can either use for offense or defense in a duel. The number of participants is always even, and they compete in pairs. The duel result between two participants with power levels a and b is determined by the sum of their power levels. However, the school wants to maximize the total power of all the winning participants across all the duels. Given the power levels of all participants, determine the maximum total power of the winning participants. Input The first line contains an even integer n (2 ≤ n ≤ 100) representing the number of participants. The second line contains n space-separated integers pi (1 ≤ pi ≤ 1000) representing the magical power levels of the participants. Output Output the maximum possible total power of the winning participants. Examples Input 4 10 20 30 40 Output 70 Input 6 1 3 2 6 5 4 Output 15","solution":"def max_total_power(n, power_levels): Given n participants with their respective power levels, determine the maximum possible total power of the winning participants by optimally pairing them up. Parameters: n: int - the number of participants (always even) power_levels: list of int - power levels of the participants Returns: int - the maximum possible total power of the winning participants. power_levels.sort() total_power = 0 for i in range(n // 2): total_power += power_levels[n - 1 - i] return total_power"},{"question":"In a given binary string, a flip is defined as changing a \'0\' to \'1\' or \'1\' to \'0\'. Your task is to determine the minimum number of flips required to make the binary string alternate. An alternating binary string is one where no two adjacent characters are the same, such as \\"0101\\" or \\"1010\\". Input A single binary string without spaces Output A single integer denoting the minimum number of flips required Constraints - The length of the string will be between 1 and 100 - The string will only contain \'0\'s and \'1\'s SAMPLE INPUT 100101 SAMPLE OUTPUT 2 Explanation The given string can be converted to \\"010101\\" or \\"101010\\" with a minimum of 2 flips: - Converting \\"100101\\" to \\"010101\\" requires flipping the second \'0\' and the fourth \'1\'. - Converting \\"100101\\" to \\"101010\\" requires flipping the first \'0\' and the fifth \'0\'. Both conversions require 2 flips, so the minimum number of flips is 2.","solution":"def min_flips_to_alternating(s): def count_flips(target): flips = 0 for idx, char in enumerate(s): if char != target[idx % 2]: flips += 1 return flips # Two possible alternating patterns: \\"010101...\\" and \\"101010...\\" pattern1 = \'01\' * len(s) pattern2 = \'10\' * len(s) return min(count_flips(pattern1), count_flips(pattern2))"},{"question":"Write a function that takes a string as input and returns a new string with each of its words reversed but the order of the words remains the same. For example: ```python reverse_words(\\"hello world\\") => \\"olleh dlrow\\" reverse_words(\\"this is a test\\") => \\"siht si a tset\\" ``` Words are defined as sequences of characters separated by spaces. The function should handle multiple spaces between words and leading/trailing spaces as well. Good luck.","solution":"def reverse_words(s: str) -> str: Reverses each word in the string s but maintains the order of the words. Parameters: s (str): Input string Returns: str: New string with each word reversed return \' \'.join(word[::-1] for word in s.split())"},{"question":"Bob likes playing with arrays and has a game he made up involving summing non-adjacent elements. Given an integer array `nums`, he defines the maximum sum of a subset of its elements such that no two elements in the subset are adjacent in the array. For example, if `nums = [3, 2, 5, 10, 7]`, the possible subsets that satisfy the non-adjacent condition could be `[3, 5, 7]`, `[3, 10]`, `[2, 10]`, etc., and the subset `[3, 10]` gives the maximum sum of `13`. Given an array `nums` of length `n` where (1 leq n leq 100), Bob wants to know the maximum sum he can get from any non-adjacent subset of elements. -----Input----- The first line contains an integer n (1 leq n leq 100), the size of the array. The second line contains n integers nums[i] (1 leq nums[i] leq 1000) representing the elements of the array. -----Output----- Print a single integer, the maximum sum Bob can get from a non-adjacent subset. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 3 2 1 4 Output 6 -----Note----- In the first example, the subset `[3, 5, 7]` provides the maximum sum `3 + 12 + 0 + 2 = 15`. In the second example, the subset `[2, 4]` gives the maximum sum `2 + 4 = 6`.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 n = len(nums) if n == 1: return nums[0] # Initialize an array to store the maximum sum up to each index dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Write a function that takes a list of integers and returns a new list where each element in the original list is multiplied by the next element in the list. The last element should be multiplied by the first element. ```python multiply_next([1, 2, 3, 4]) # [2, 6, 12, 4] multiply_next([0, 5, 10]) # [0, 50, 0] multiply_next([7]) # [49] ``` ``` haskell multiplyNext [1, 2, 3, 4] `shouldBe` [2, 6, 12, 4] multiplyNext [0, 5, 10] `shouldBe` [0, 50, 0] multiplyNext [7] `shouldBe` [49] ```","solution":"def multiply_next(lst): Returns a new list where each element in the original list is multiplied by the next element in the list. The last element is multiplied by the first element. Args: lst (list): A list of integers. Returns: list: A new list with the multiplied values. if not lst: return [] if len(lst) == 1: return [lst[0] * lst[0]] return [lst[i] * lst[(i + 1) % len(lst)] for i in range(len(lst))]"},{"question":"In a fictional land, there are `n` hills arranged in a line. Each hill has a certain height. VK, a local explorer, wants to climb from the leftmost hill to the rightmost hill, but he has a special way of determining his path: He only progresses to the next hill if it is strictly taller than the current one. Given the heights of the hills, determine the length of the longest ascending path VK can take. Input The first line contains an integer `n` (2 ≤ n ≤ 1,000) – the number of hills. The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10,000) – the heights of the hills. Output Print a single integer – the length of the longest ascending path VK can take. Examples Input 6 1 2 3 2 5 4 Output 3 Input 5 5 4 3 2 1 Output 1 Note In the first example, VK can follow the path 1 -> 2 -> 3 or 2 -> 3 -> 5 or 1 -> 2 -> 5, all of which are 3 hills long. In the second example, no matter where VK starts, he cannot find any ascending path longer than a single hill.","solution":"def longest_ascending_path(n, heights): Given the number of hills and their heights, determine the length of the longest ascending path VK can take. Parameters: n (int): The number of hills heights (list): A list of integers representing the heights of the hills Returns: int: The length of the longest ascending path if n == 0: return 0 longest_path = 1 current_length = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_length += 1 longest_path = max(longest_path, current_length) else: current_length = 1 return longest_path"},{"question":"**Reverse Words in a String** -- Given a string, reverse the order of characters in each word while still preserving whitespace and initial word order. For example: ``` input: \\"The quick brown fox jumps over the lazy dog\\" output: \\"ehT kciuq nworb xof spmuj revo eht yzal god\\" ``` Task Write a function to reverse the characters in each word of a string while keeping all spaces and word order intact. **Input:** A single string `s` containing words and spaces. **Output:** A string with each word\'s characters reversed but the word order and spaces preserved. # Example ``` Input: \\"Hello World\\" Output: \\"olleH dlroW\\" ```","solution":"def reverse_words_in_string(s): Reverse characters in each word of the string while maintaining word order and spaces. Args: s (str): Input string containing words separated by spaces. Returns: str: String with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Instructions: Amanda owns a library and has recently started a book rental service. She rents books to customers in the order of their requests. Each customer can borrow multiple books at a time. If a customer requests a book that is already borrowed by another customer, Amanda keeps the request pending until the book is returned. Each borrowed book has a fixed borrowing period. Once the period is over, Amanda returns the book to the library, making it available for other customers. Your task is to write a program that simulates the book rental service and calculates the time each book request will be fulfilled. Input The input contains multiple data sets. Each data set is in the format below: N M Book1 Period1 ... BookN PeriodN T1 K1 Book1,1 ... Book1,K1 ... TM KM BookM,1 ... BookM,KM Here, N (1 ≤ N ≤ 20) and M (1 ≤ M ≤ 100) specify the number of books available in the library and the number of requests, respectively; each Booki is the name of a book in the library, which consists of up to 20 alphabetical letters; Periodi (1 ≤ Periodi ≤ 1000) is the borrowing period (in days) for the i-th book; Tj (1 ≤ Tj ≤ 10000000) is the time when the j-th request is made; Kj (1 ≤ Kj ≤ 10) is the number of books in the j-th request; and each Bookj,k represents a book in the j-th request. You may assume that every book requested is available in the library, and no two requests are made at the same time. The input is terminated with a line that contains two zeros. This is not part of data sets and hence should not be processed. Output Your program should produce an output of M lines for each data set. The i-th line of the output should contain a single integer that indicates the time when the i-th request will be fulfilled completely and all books in that request are lent out to the customer. Print a blank line between two successive data sets. Example Input 5 4 HarryPotter 15 PrideAndPrejudice 10 TheGreatGatsby 8 ToKillAMockingbird 12 MobyDick 7 5 2 HarryPotter TheGreatGatsby 15 2 PrideAndPrejudice MobyDick 20 1 TheGreatGatsby 25 1 HarryPotter 0 0 Output 20 25 28 40","solution":"def process_requests(input_data): result = [] index = 0 while index < len(input_data): N, M = map(int, input_data[index].split()) index += 1 if N == 0 and M == 0: break books = {} for _ in range(N): line = input_data[index].split() book_name = line[0] period = int(line[1]) books[book_name] = { \'period\': period, \'available_at\': 0 } index += 1 output = [] for _ in range(M): line = input_data[index].split() request_time = int(line[0]) K = int(line[1]) requested_books = line[2:] max_return_time = 0 for book in requested_books: if books[book][\'available_at\'] <= request_time: books[book][\'available_at\'] = request_time + books[book][\'period\'] else: books[book][\'available_at\'] += books[book][\'period\'] max_return_time = max(max_return_time, books[book][\'available_at\']) output.append(max_return_time) index += 1 result.append(output) return result def format_output(result): output_lines = [] for data_set in result: for line in data_set: output_lines.append(str(line)) output_lines.append(\\"\\") return \\"n\\".join(output_lines).strip()"},{"question":"Write a function that calculates the sum of the first n prime numbers. Input The only line of input contains an integer n (1 ≤ n ≤ 50). Output Output the sum of the first n prime numbers. Examples Input 3 Output 10 Input 5 Output 28","solution":"def sum_of_primes(n): Returns the sum of the first n prime numbers. def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return sum(primes)"},{"question":"You are given an n times n grid, with each cell containing an integer. You need to perform multiple operations on this grid. Each operation consists of choosing a rectangular subgrid and incrementing each element of this subgrid by 1. Your task is to determine the minimum number of operations required to make all the elements of the grid equal. -----Input----- The first line contains a single integer t (1 le t le 10) — the number of test cases. Then t test cases follow. Each test case starts with an integer n (1 le n le 100). Then follow n lines, each containing n integers g_{ij} (-10^9 le g_{ij} le 10^9) — the elements of the grid. -----Output----- For each test case, print a single integer — the minimum number of operations required to make all the elements of the grid equal. -----Example----- Input 2 2 1 2 3 4 3 1 0 1 2 1 2 0 0 0 Output 3 3 -----Note----- In the first test case, one of the possible ways is: 1. Choose the subgrid covering the entire grid to make it: 2 3 4 5 2. Choose the subgrid covering the first two rows and first two columns to make it: 3 4 5 6 3. Choose the subgrid covering the first two rows and first two columns again to make it: 4 5 6 6 In the second test case, one of the possible ways is: 1. Choose the subgrid covering the first row and the second row to make it: 2 1 2 3 2 3 0 0 0 2. Choose the subgrid covering the first three columns to make it: 3 2 3 4 3 4 0 0 0 3. Choose the subgrid covering the first two rows and first three columns to make it: 4 3 4 5 4 5 1 1 1","solution":"def min_operations_to_equalize(grid): Returns the minimum number of operations required to equalize all elements in the grid. max_val = max(max(row) for row in grid) min_val = min(min(row) for row in grid) return max_val - min_val + 1 def process_test_cases(test_cases): Processes the given test cases and returns the results for each test case. results = [] for grid in test_cases: results.append(min_operations_to_equalize(grid)) return results"},{"question":"Aria is an architect and she\'s designing a new set of buildings for a modern city. However, to make the city more beautiful and ensure each building gets enough sunlight, she wants to arrange the buildings in a special way. The city will be designed as a series of buildings with varying heights. The problem is to find the maximum amount of sunlight that any building can receive. Each building can block sunlight to the buildings behind it if they are taller or of the same height. Sunlight only comes from one direction – from the start of the array to the end (left to right). To calculate the sunlight each building receives, we define it as the difference in height between that building and the tallest building before it. If there is no taller building before it, the building receives the full amount of sunlight equal to its own height. -----Input----- The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer N, denoting the number of buildings. - The second line contains N space-separated integers, denoting the heights of the buildings from left to right. -----Output----- For each test case, print a single integer in a new line, representing the maximum amount of sunlight received by any building in that setup. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100,000 - 1 ≤ height of each building ≤ 100,000 -----Example----- Input: 2 5 10 4 8 3 6 4 7 6 5 8 Output: 10 8 -----Explanation----- For the first test case: - The first building (height 10) receives 10 units of sunlight, as there is no taller building before it. - The second building (height 4) receives 0 units of sunlight, as the first building (height 10) is taller and blocks the sunlight. - The third building (height 8) receives 0 units of sunlight, as the first building (height 10) is taller and blocks the sunlight. - The fourth building (height 3) receives 0 units of sunlight, as the first, second, and third buildings are all taller. - The fifth building (height 6) receives 0 units of sunlight, as the first, third buildings are taller. For the second test case: - The first building (height 7) receives 7 units of sunlight, as there is no taller building before it. - The second building (height 6) receives 0 units of sunlight, as the first building (height 7) is taller. - The third building (height 5) receives 0 units of sunlight, as the first and second buildings (heights 7 and 6) are taller. - The fourth building (height 8) receives 8 units of sunlight, as there is no taller building before it.","solution":"def max_sunlight_per_building(building_heights): Given a list of building heights, return the maximum amount of sunlight received by any building. max_sunlight = 0 max_height_so_far = 0 for height in building_heights: sunlight = height if height > max_height_so_far else 0 max_sunlight = max(max_sunlight, sunlight) max_height_so_far = max(max_height_so_far, height) return max_sunlight def process_test_cases(test_cases): Process each test case and return an array of results. results = [] for case in test_cases: N, buildings = case result = max_sunlight_per_building(buildings) results.append(result) return results"},{"question":"Darcy is organizing her bookshelf. She has a total of n books, each with a unique ID number, and she plans to arrange them in a specific order on her shelf. However, Darcy accidentally places some books in the wrong order initially and wants to correct it with the least effort by swapping the positions of books. Help Darcy figure out the minimum number of swaps needed to arrange the books in the correct order, which is the ascending order of their ID numbers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of books. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 2·10^5) — the current order of book IDs on the shelf. -----Output----- Print one integer — the minimum number of swaps required to arrange the books in ascending order. -----Examples----- Input 5 4 3 1 5 2 Output 4 Input 4 1 3 4 2 Output 2 -----Note----- In the first test, we can achieve the optimal order [1, 2, 3, 4, 5] with the following swaps: 1. Swap positions 1 and 3 (result: [1, 3, 4, 5, 2]) 2. Swap positions 3 and 5 (result: [1, 3, 2, 5, 4]) 3. Swap positions 2 and 3 (result: [1, 2, 3, 5, 4]) 4. Swap positions 4 and 5 (result: [1, 2, 3, 4, 5]) In the second test, we can achieve the optimal order [1, 2, 3, 4] with the following swaps: 1. Swap positions 2 and 4 (result: [1, 2, 4, 3]) 2. Swap positions 3 and 4 (result: [1, 2, 3, 4])","solution":"def min_swaps_to_sort(books): Computes the minimum number of swaps needed to sort the books in ascending order. books: List[int] - List of book IDs in their current order. return: int - Minimum number of swaps required to sort the list in ascending order. n = len(books) sorted_books = sorted(books) index_dict = {value: index for index, value in enumerate(books)} swaps = 0 for i in range(n): if books[i] != sorted_books[i]: swaps += 1 swap_idx = index_dict[sorted_books[i]] # Swapping the incorrect value with the correct one books[swap_idx], books[i] = books[i], books[swap_idx] index_dict[books[swap_idx]] = swap_idx index_dict[books[i]] = i return swaps"},{"question":"After months of preparation, Julia R. is about to take part in a prestigious robotics competition. She has designed a robot that can move on a 2D grid. The grid is represented by an N x M matrix, where each cell contains a specific cost for entering that cell. The robot starts at the top-left corner (1,1) and needs to reach the bottom-right corner (N,M). Julia wants to program her robot to follow the path from the start to the end that minimizes the sum of the costs of the cells it travels through. The robot can move either right or down from each cell, but it cannot move diagonally or out of the grid bounds. Can you help Julia determine the minimum cost path her robot should take? Input: The first line contains two integers, N and M, representing the dimensions of the grid (1 ≤ N, M ≤ 1000). The next N lines each contain M integers, representing the cost matrix C, where 1 ≤ C[i][j] ≤ 1000. Output: Print a single integer — the minimal sum of costs along the path from the top-left to the bottom-right corner. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Note: In the example above, the path 1→3→1→1→1 has a total cost of 7, which is the minimum cost to move from the top-left corner to the bottom-right corner.","solution":"def min_cost_path(N, M, cost): # Initialize a DP table with the same dimensions as the cost matrix dp = [[0 for _ in range(M)] for _ in range(N)] # Set the cost of the starting position dp[0][0] = cost[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j-1] + cost[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + cost[i][0] # Fill the rest of the table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j] # The value in the bottom-right corner is the minimal cost path return dp[N-1][M-1]"},{"question":"-----Input----- You are given two integers x and y (0 ≤ x, y ≤ 50) as input. -----Output----- Output a single integer, which is the greatest common divisor (GCD) of x and y. -----Examples----- Input 48 18 Output 6 Input 20 30 Output 10 Input 100 80 Output 20","solution":"import math def find_gcd(x, y): Returns the greatest common divisor (GCD) of x and y. return math.gcd(x, y)"},{"question":"Design a class RangeSearch that supports the following operations: 1. `RangeSearch.add(int num)`: Adds a number to the data structure. 2. `RangeSearch.rangeQuery(int start, int end)`: Returns the count of numbers that fall within the inclusive range [start, end]. Your implementation should be optimized for a large number of range queries. Examples: Input: RangeSearch rs = new RangeSearch() rs.add(10) rs.add(20) rs.add(15) rs.rangeQuery(10, 20) // returns 3 rs.rangeQuery(15, 25) // returns 2 rs.add(25) rs.rangeQuery(15, 25) // returns 3 Note: - The add operation and the rangeQuery operation should both run in efficient time complexity. - The number of `add` operations is at most 10000. - The number of `rangeQuery` operations is at most 50000. - The values of `num`, `start`, and `end` will be in the range [-10^6, 10^6].","solution":"import bisect class RangeSearch: def __init__(self): self.data = [] def add(self, num): bisect.insort(self.data, num) def rangeQuery(self, start, end): left_index = bisect.bisect_left(self.data, start) right_index = bisect.bisect_right(self.data, end) return right_index - left_index"},{"question":"You are given a string consisting of digits (0-9) and lowercase letters (a-z). Each digit can be transformed into a corresponding letter where 0 corresponds to \'a\', 1 to \'b\', ..., and 9 to \'j\'. Your task is to find all possible transformations of the given string and return them in lexicographical order. A transformation is created by replacing each digit in the original string with its corresponding letter and keeping the other letters unchanged. -----Constraints----- - The input string length will be between 1 and 10^5. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print each transformation in lexicographical order, each on a new line. -----Sample Input----- 2a4 -----Sample Output----- 2bd cda Explanation: The digit \'2\' can be transformed into \'c\', and the digit \'4\' can be transformed into \'e\'. The possible transformations are \\"2bd\\" and \\"cda\\". They are printed in lexicographical order with respect to the entire transformed string.","solution":"def digit_to_letter(digit): return chr(ord(\'a\') + int(digit)) def generate_transformations(s): transformations = {s} for i, char in enumerate(s): if char.isdigit(): new_transformations = set() for transformation in transformations: new_transformations.add(transformation[:i] + digit_to_letter(char) + transformation[i+1:]) transformations.update(new_transformations) return sorted(transformations)"},{"question":"A programmer is creating a text-based game where players can explore a grid-based world. Each cell in the grid can either be traversable (\'.\') or an obstacle (\'#\'). The starting point is always the top-left corner of the grid (0,0), and the goal is to reach the bottom-right corner (n-1,m-1). The player can move up (\'U\'), down (\'D\'), left (\'L\'), or right (\'R\') to adjacent cells, as long as they remain within the grid and do not attempt to move into an obstacle. You need to determine if there exists a sequence of moves that allows the player to reach the goal. If such a sequence exists, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. The following n lines each contain a string of length m consisting of characters \'.\' and \'#\' — the grid representation. -----Output----- Output \\"YES\\" if there is a way to reach the goal, and \\"NO\\" otherwise. -----Examples----- Input 3 3 ... .#. ... Output YES Input 3 3 .#. .#. ..# Output NO Input 4 4 .... .. #..# .... Output YES","solution":"def can_reach_goal(n, m, grid): Determine if there exists a sequence of moves that allows the player to reach the goal. Starting point is (0,0) and goal is (n-1,m-1). Moves: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right). from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" # Directions for movement (down, up, right, left) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"The organizers of a marathon event are planning the race route and water supply stations. The marathon route is divided into N segments, and the runners\' fatigue increases as they progress through each segment. For each segment i, we know the fatigue increase f_i. To help runners, the organizers can set up water stations that will reduce fatigue by a fixed amount, but they have a limited number of stations they can place. Write a program to determine the maximum reduction of fatigue possible by optimally placing water stations along the route. # Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ M ≤ N * 1 ≤ f_i ≤ 10^4 * 1 ≤ R ≤ 10^3 # Input The input is given from Standard Input in the following format: ``` N M R f_1 f_2 ... f_N ``` * The first line contains three integers, N (number of segments), M (number of water stations available), and R (fixed reduction of fatigue by each water station). * The second line contains N integers representing the fatigue increase f_i for each segment i. # Output Output one integer, the maximum fatigue reduction for the marathon route. # Example Input: ``` 5 2 100 150 200 250 300 350 ``` Output: ``` 200 ``` In this example, by placing two water stations optimally to reduce the two highest fatigue increases by 100 each, the total fatigue reduction is 200. # Explanation - Without water stations: Total fatigue = 150 + 200 + 250 + 300 + 350 = 1250 - Max possible reduction with 2 stations each reducing by 100: We can reduce fatigue in segments with the two highest fatigue increases (300 and 350). - Thus, the maximum reduction is 100 + 100 = 200.","solution":"def max_fatigue_reduction(N, M, R, fatigue_list): # Sort the fatigue in descending order sorted_fatigue = sorted(fatigue_list, reverse=True) # Take the sum of the largest M fatigue values reduced by R each max_reduction = sum(min(f, R) for f in sorted_fatigue[:M]) return max_reduction # Example usage: n = 5 m = 2 r = 100 fatigue_list = [150, 200, 250, 300, 350] print(max_fatigue_reduction(n, m, r, fatigue_list)) # Output: 200"},{"question":"Kara has recently been studying the Fibonacci sequence and its various properties. One night, she dreams that she is in a classroom where her teacher asks her to calculate the sum of Fibonacci numbers up to the n-th Fibonacci number. However, for this task, the teacher presents a challenge: she must also include a modulo operation which will help keep the numbers manageable. The task is to calculate the sum of the first n Fibonacci numbers modulo m. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 The sum she needs to calculate is the sum of F(0) to F(n), and then take the result modulo m. Kara seeks your help to write a program to do this. INPUT: The first line of the input contains an integer t denoting the number of test cases. Each test case contains two integers n and m, where n is the highest index of the Fibonacci numbers to be summed, and m is the modulus. OUTPUT: For each test case, output the sum of the first n Fibonacci numbers modulo m in a new line. CONSTRAINTS: 1 ≤ t ≤ 1000 0 ≤ n ≤ 10^6 1 ≤ m ≤ 10^9 SAMPLE INPUT: 2 4 100 7 10 SAMPLE OUTPUT: 7 3 Explanation: For the first test case, Fibonacci numbers up to F(4) are 0, 1, 1, 2, 3. The sum is 0 + 1 + 1 + 2 + 3 = 7, and 7 % 100 = 7. For the second test case, Fibonacci numbers up to F(7) are 0, 1, 1, 2, 3, 5, 8, 13. The sum is 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 = 33, and 33 % 10 = 3.","solution":"def fibonacci_sum_modulo(n, m): if n == 0: return 0 % m fib_numbers = [0, 1] while len(fib_numbers) <= n: fib_numbers.append((fib_numbers[-1] + fib_numbers[-2]) % m) return sum(fib_numbers) % m def process_test_cases(test_cases): results = [] for n, m in test_cases: results.append(fibonacci_sum_modulo(n, m)) return results"},{"question":"Given a list of integers, define its \\"zigzag length\\" as the length of the longest subsequence where consecutive elements alternately increase and decrease. For instance, given the list [1, 7, 4, 9, 2, 5], the zigzag subsequence [1, 7, 4, 9, 2, 5] (or any of its many valid subsequences with the same length) has a zigzag length of 6. Write a program that accepts a list of integers and returns the length of its longest zigzag subsequence. Input Format A single line containing space-separated integers representing the list of elements. Constraints 1leq nleq1000 -10^4 leq a_i leq 10^4 Output Format Print a single integer representing the length of the longest zigzag subsequence. Sample Input 0 1 7 4 9 2 5 Sample Output 0 6 Explanation 0 The entire list [1, 7, 4, 9, 2, 5] itself is a valid longest zigzag subsequence. Therefore, the length is 6. Sample Input 1 1 4 7 2 5 Sample Output 1 4 Explanation 1 One of the longest zigzag subsequences could be [1, 4, 2, 5] or [1, 7, 2, 5], both of which have a length of 4. Sample Input 2 10 10 10 Sample Output 2 1 Explanation 2 Every element is the same, so the zigzag length is just 1 (any single element forms a zigzag subsequence by itself).","solution":"def longest_zigzag_subsequence(arr): n = len(arr) if n == 0: return 0 # Initialize the tables up = [1] * n down = [1] * n # Fill the tables for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: up[i] = max(up[i], down[j] + 1) elif arr[i] < arr[j]: down[i] = max(down[i], up[j] + 1) # The length of the longest zigzag subsequence return max(max(up), max(down)) # Example usage: # arr = [1, 7, 4, 9, 2, 5] # print(longest_zigzag_subsequence(arr)) # Output: 6"},{"question":"Write a program that simulates a battleship game on a 5x5 grid. The goal is to find and \\"sink\\" a hidden battleship represented by a single cell on the grid. # Constraints - The battleship is located at a single cell on the 5x5 grid. - You have a maximum of 8 attempts to find the battleship. - The grid coordinates range from (0,0) to (4,4). # Input The input consists of the coordinates of the hidden battleship given in the following format: ``` x y ``` Where `x` and `y` represent the row and column of the hidden battleship, respectively. # Output For each guess, the program should prompt the user to enter the guessed coordinates in the format: ``` Guess x y: ``` The program should output one of the following responses after each guess: - \\"Hit!\\" if the guessed coordinates match the battleship\'s location. - \\"Miss\\" if the guessed coordinates do not match the battleship\'s location. If the battleship is hit within the maximum number of attempts, the program should print \\"You sank my battleship!\\" and terminate. If it is not hit within 8 guesses, the program should print \\"Game Over!\\" and terminate. # Example **Input:** ``` 2 3 ``` **Output:** ``` Guess x y: 1 1 Miss Guess x y: 2 3 Hit! You sank my battleship! ``` **Input:** ``` 3 0 ``` **Output:** ``` Guess x y: 0 0 Miss Guess x y: 1 4 Miss Guess x y: 2 2 Miss Guess x y: 3 3 Miss Guess x y: 0 1 Miss Guess x y: 3 0 Hit! You sank my battleship! ```","solution":"def battleship_game(hidden_x, hidden_y, guesses): Simulates a Battleship game on a 5x5 grid with a single hidden battleship. :param hidden_x: int - The x-coordinate of the hidden battleship. :param hidden_y: int - The y-coordinate of the hidden battleship. :param guesses: List of tuples - Each tuple contains the x and y coordinates of a guess. :return: A list of strings containing the result of each guess and the game outcome. # Maximum number of attempts max_attempts = 8 # List to store the output output = [] for attempt in range(min(len(guesses), max_attempts)): guess_x, guess_y = guesses[attempt] output.append(f\\"Guess {guess_x} {guess_y}:\\") if guess_x == hidden_x and guess_y == hidden_y: output.append(\\"Hit!\\") output.append(\\"You sank my battleship!\\") return output else: output.append(\\"Miss\\") output.append(\\"Game Over!\\") return output"},{"question":"Archer is a robotics engineer who is working on a project involving multiple robots. Each robot is required to perform a series of tasks, and Archer needs to determine the performance of each robot in completing these tasks. Each task can be either completed successfully or failed. The input consists of several lines. The first line contains an integer, N, which indicates the number of tasks. The next N lines describe the results of the robots on these tasks. Each line consists of a space-separated list of task results in the format \\"RRR S/F\\", where RRR is the identifier of a robot and S or F denotes whether the task was successful or failed. Archer\'s job is to calculate the success rate for each robot. The output should list the robot identifiers along with their success rates in descending order of success rate. If two robots have the same success rate, they should be ordered lexicographically by their identifiers in ascending order. The success rate of a robot is defined as the number of successful tasks it completed divided by the total number of tasks it attempted, expressed as a percentage rounded to two decimal places. You need to help Archer by writing a program that accomplishes this task. Input: The input starts with an integer N (1 ≤ N ≤ 100), the number of tasks. The next N lines contain space-separated strings indicating the results of the robots on these tasks. Output: The output should have multiple lines, each containing a robot identifier and its success rate: \\"RRR XX.XX\\", where RRR is the robot identifier and XX.XX is its success rate in percentages. Constraints: - The robot identifiers will consist of exactly three uppercase English letters. - The number of robots will not exceed 100. Sample Input: 5 ROB S BOT F ROB S BOT S MEG F BOT S ROB F MEG S MEG F Sample Output: ROB 66.67 BOT 66.67 MEG 33.33","solution":"def calculate_success_rate(n, results): from collections import defaultdict task_counts = defaultdict(lambda: [0, 0]) # [success_count, task_count] for result in results: robot, status = result.split() if status == \\"S\\": task_counts[robot][0] += 1 task_counts[robot][1] += 1 rates = [] for robot, counts in task_counts.items(): success_rate = (counts[0] / counts[1]) * 100 rates.append((robot, success_rate)) rates.sort(key=lambda x: (-x[1], x[0])) # Sort by success rate descending, then by robot ID ascending output = [] for robot, rate in rates: output.append(f\\"{robot} {rate:.2f}\\") return output # Example usage: n = 5 results = [ \\"ROB S\\", \\"BOT F\\", \\"ROB S\\", \\"BOT S\\", \\"MEG F\\", \\"BOT S\\", \\"ROB F\\", \\"MEG S\\", \\"MEG F\\" ] print(calculate_success_rate(n, results))"},{"question":"Given an integer array A of size n, find the length of the longest subarray such that the bitwise AND of all elements in the subarray is greater than zero. The bitwise AND of a subarray A[l..r] is defined as A[l] & A[l+1] & dots & A[r], where & denotes the bitwise AND operator. Function Description Complete the function longestSubarray in the editor below. longestSubarray has the following parameter(s): - int[] A: the integer array Returns - int: the length of the longest subarray with the bitwise AND greater than zero Input Format A single integer array, A, denoting the elements of the array. Constraints 1leq nleq10^{6} 1leq A[i]leq10^{9} Output Format Return a single integer denoting the length of the longest subarray where the bitwise AND of all elements is greater than zero. Sample Input 0 [4, 6, 8, 10] Sample Output 0 4 Explanation 0 The entire array [4, 6, 8, 10] can be considered because: 4 & 6 & 8 & 10 = 0000100 & 0000110 & 0001000 & 0001010 = 0000000 Hence, the longest subarray has a length of 4. Sample Input 1 [1, 2, 3, 4] Sample Output 1 4 Explanation 1 The entire array [1, 2, 3, 4] can be considered because: 1 & 2 & 3 & 4 = 0001 & 0010 & 0011 & 0100 = 0000 Hence, the longest subarray has a length of 4.","solution":"def longestSubarray(A): n = len(A) # Initialize variables max_len = 0 current_len = 0 for i in range(n): if A[i] != 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Given an integer M, you need to find an integer array B of length M that satisfies the following conditions: 1. The array B has exactly one peak. 2. Every element of B is an integer from 1 to M (both inclusive). A peak in an array is an element which is strictly greater than its neighboring elements. For an element B[i] to be a peak, it must satisfy B[i] > B[i-1] and B[i] > B[i+1]. Also, the peaks cannot be at the first or the last position of the array. If there are multiple such arrays, you can print any of them. # Input Format - The first line contains an integer T, the number of test cases. The description of the T test cases follows: - Each test case consists of a single integer M. # Output Format For each test case, print M space-separated integers, the elements of the constructed array. Your output will be considered correct only if the following conditions are satisfied: - The array contains exactly one peak. - Every element of the array is between 1 and M. # Constraints 1 ≤ T ≤ 10<sup>5</sup> 2 ≤ M ≤ 10<sup>5</sup> The sum of M over all test cases is at most 10<sup>6</sup>. # Sample Input 1 ``` 2 3 5 ``` # Sample Output 1 ``` 1 3 2 1 2 4 3 5 ``` # Explanation Test Case 1: M = 3. The array [1, 3, 2] has one peak, which is 3. This satisfies all conditions. Test Case 2: M = 5. The array [1, 2, 4, 3, 5] has one peak, which is 4. This satisfies all conditions. Note there are multiple valid arrays possible, such as [2, 3, 5, 4, 1].","solution":"def generate_peak_array(M): Generate an array of length M with exactly one peak. if M == 2: return [1, 2] # Construct a peak in the middle peak_position = M // 2 array = list(range(1, M + 1)) # Swap the peak element to be strictly greater than its neighbors array[peak_position], array[M - 1] = array[M - 1], array[peak_position] return array def process_test_cases(test_cases): results = [] for M in test_cases: results.append(generate_peak_array(M)) return results"},{"question":"Given an array of integers arr and an integer target. Determine whether there exist two distinct indices such that the sum of the elements at those indices is equal to target. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: True Explanation: The elements at indices 0 and 1 sum to 9 (2 + 7 = 9). Example 2: Input: arr = [1, 2, 3, 4, 5] target = 10 Output: False Explanation: There are no two elements that sum to 10. Your Task: You don\'t need to read input or print anything. Complete the function hasTwoSum() which takes arr and target as input parameters and returns a boolean indicating if there are two distinct indices that sum to the target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 2 <= |arr| <= 1000 -10^6 <= arr[i] <= 10^6 -10^6 <= target <= 10^6","solution":"def hasTwoSum(arr, target): Determines if there exist two distinct indices such that the sum of elements at those indices is equal to the target. :param arr: List of integers :param target: Integer target sum :return: Boolean indicating if there are two distinct elements that sum to target seen = {} for num in arr: complement = target - num if complement in seen: return True seen[num] = True return False"},{"question":"Given an n x n matrix (2 ≤ n ≤ 100), find the smallest element present in the matrix which is larger than a given number k. If no such element exists, return -1. Input: The first line contains t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains n and k. The next n lines contain n space-separated integers each representing the elements of the matrix. Output: For each test case, print the smallest element in the matrix that is larger than k. If there is no such element, print -1. Problem Setter: Your Name SAMPLE INPUT 2 3 5 1 6 3 7 4 9 2 8 5 4 10 11 15 13 12 20 9 14 18 30 21 23 27 19 17 8 28 SAMPLE OUTPUT 6 11","solution":"def find_smallest_element_larger_than_k(matrix, n, k): This function finds the smallest element in an n x n matrix that is larger than a given number k. If no such element exists, returns -1. smallest = float(\'inf\') for row in matrix: for num in row: if num > k and num < smallest: smallest = num return smallest if smallest != float(\'inf\') else -1 def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, matrix = test_cases[i] result = find_smallest_element_larger_than_k(matrix, n, k) results.append(result) return results"},{"question":"Write a program to determine the smallest common multiple of three given numbers greater than a specified number `x`. The common multiple must be divisible by all three numbers. Example 1: Input: a = 4, b = 5, c = 6, x = 10 Output: 60 Explanation: The smallest common multiple of 4, 5, and 6 greater than 10 is 60. Example 2: Input: a = 3, b = 7, c = 9, x = 20 Output: 63 Explanation: The smallest common multiple of 3, 7, and 9 greater than 20 is 63. Example 3: Input: a = 2, b = 3, c = 5, x = 50 Output: 60 Explanation: The smallest common multiple of 2, 3, and 5 greater than 50 is 60. Example 4: Input: a = 6, b = 8, c = 12, x = 100 Output: 120 Explanation: The smallest common multiple of 6, 8, and 12 greater than 100 is 120. Constraints: 1 <= a, b, c <= 100 1 <= x <= 10^9 It\'s guaranteed that the result will be within the range [1, 10^18]","solution":"import math def lcm(a, b): return abs(a * b) // math.gcd(a, b) def smallest_common_multiple(a, b, c, x): multiple = lcm(lcm(a, b), c) if x % multiple == 0: return x + multiple else: return ((x // multiple) + 1) * multiple"},{"question":"A small town\'s water supply system is currently being managed through a manual process. The town\'s water sources consist of reservoirs and wells, each with its own capacity and current water level. The town operates on a daily routine where water can either be added to or taken from these sources. Your task is to create a simulation to observe how the water levels in these sources change over the given period based on the daily operations. Each day, for q days, one of the following will happen: 1. A certain amount of water from a given source will be utilized, reducing its current water level. 2. A certain amount of water will be added to a given source, increasing its current water level. 3. A query will be made to check if a given source has at least a specified amount of water available after the day\'s operations. Input: The first line contains two integers n and q (1 ≤ n ≤ 10^5; 1 ≤ q ≤ 10^5) — the number of water sources and the number of days/operations, respectively. The next n lines each describe a water source. Each line will contain three integers: the type of source t_i (1 for reservoir, 2 for well), initial capacity c_i (1 ≤ c_i ≤ 10^9), and current water level l_i (0 ≤ l_i ≤ c_i), corresponding to the type, capacity, and initial water level of the i-th source. The next q lines contain the operations or queries. For each operation/query, the first integer of each line is either 1, 2, or 3: - If it is 1, then two integers s_i, w_i follow (1 ≤ s_i ≤ n; 1 ≤ w_i ≤ 10^9). This means s_i units of water are utilized from the i-th source. - If it is 2, then two integers s_i, w_i follow (1 ≤ s_i ≤ n; 1 ≤ w_i ≤ 10^9). This means s_i units of water are added to the i-th source. - If it is 3, then two integers s_i, q_i follow (1 ≤ s_i ≤ n; 1 ≤ q_i ≤ 10^9). This is a query to check if the i-th source has at least q_i units of water available after that day\'s operations. Output: Print the result for each query (operation type 3) – \\"YES\\" if the specified source has equal to or more than the queried amount of water available, otherwise print \\"NO\\". Example: Input: 3 5 1 100 50 2 200 150 1 300 75 1 1 20 2 2 25 3 3 100 1 3 50 3 3 20 Output: NO YES Explanation: Initially, the water levels of the sources are [50, 150, 75]. 1. After utilizing 20 units from source 1, the water levels become [30, 150, 75]. 2. Adding 25 units to source 2, the water levels become [30, 175, 75]. 3. Querying if source 3 has at least 100 units results in \\"NO\\". 4. Utilizing 50 units from source 3, the water levels become [30, 175, 25]. 5. Querying if source 3 has at least 20 units results in \\"YES\\".","solution":"class WaterSource: def __init__(self, type_, capacity, current_level): self.type_ = type_ self.capacity = capacity self.current_level = current_level def add_water(self, amount): self.current_level = min(self.capacity, self.current_level + amount) def utilize_water(self, amount): self.current_level = max(0, self.current_level - amount) def has_at_least(self, amount): return self.current_level >= amount def simulate_water_levels(n, q, sources_data, operations): sources = [] for data in sources_data: type_, capacity, current_level = data sources.append(WaterSource(type_, capacity, current_level)) results = [] for operation in operations: if operation[0] == 1: # Utilize water source_idx, amount = operation[1] - 1, operation[2] sources[source_idx].utilize_water(amount) elif operation[0] == 2: # Add water source_idx, amount = operation[1] - 1, operation[2] sources[source_idx].add_water(amount) elif operation[0] == 3: # Query water level source_idx, amount = operation[1] - 1, operation[2] if sources[source_idx].has_at_least(amount): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, create a function `largest_non_adjacent_sum` that computes the largest sum of non-adjacent numbers. For example: ```python largest_non_adjacent_sum([2, 4, 6, 2, 5]) = 13 ``` Explanation: - The optimal set of numbers is `{4, 6, 5}`, which sum to `15`. Another example: ```python largest_non_adjacent_sum([5, 1, 1, 5]) = 10 ``` Explanation: - The optimal set of numbers is `{5, 5}`, which sum to `10`. More examples: ```python largest_non_adjacent_sum([2, 1, 2, 7, 3]) = 9 largest_non_adjacent_sum([4, 1, 1, 4]) = 8 largest_non_adjacent_sum([5, 5, 10, 100, 10, 5]) = 110 ``` Note: - If the array is empty, the function should return 0. - The array will contain only positive integers and will contain at least one element. Implement the function and ensure it passes all test cases.","solution":"def largest_non_adjacent_sum(nums): if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums) prev_one = max(nums[0], nums[1]) prev_two = nums[0] for i in range(2, len(nums)): current = max(prev_one, prev_two + nums[i]) prev_two = prev_one prev_one = current return prev_one"},{"question":"In a forest, there are n unique types of trees. Each type of tree is represented by an integer {1, 2, ldots, n}. You are given an array of integers representing a sequence of trees in the forest. A forest ranger wants to capture a photograph of the forest such that exactly every type of tree appears at least once in the photo. However, the amount of space available for capturing the photo is limited, so the ranger wants to capture the smallest possible contiguous sequence from the array of trees that contains all n types of trees at least once. Write a function `minimumTreeSequence` that takes in an integer array `trees` and an integer `n`, and returns the length of the smallest contiguous subsequence that contains all n types of trees. Function Signature: ```python def minimumTreeSequence(trees: List[int], n: int) -> int: ``` Returns: - int: the length of the smallest contiguous subsequence containing all n tree types. # Example ```python trees = [1, 2, 1, 3, 2, 1, 5, 1, 3, 2, 4, 5] n = 5 ``` The smallest subsequence containing all tree types `1` to `5` is `[5, 1, 3, 2, 4]`. Hence, the function should return `5`. # Input Format - An integer array `trees` where `1 leq text{trees}[i] leq n. - An integer `n` representing the number of unique tree types. # Constraints - 1 leq |text{trees}| leq 10^5 - 1 leq n leq 100 # Sample Input ``` trees = [1, 2, 1, 3, 2, 1, 5, 1, 3, 2, 4, 5] n = 5 ``` # Sample Output ``` 5 ``` # Explanation The smallest subsequence that contains all tree types (1 through 5) is `[5, 1, 3, 2, 4]`, thus the length is `5`.","solution":"from typing import List from collections import defaultdict def minimumTreeSequence(trees: List[int], n: int) -> int: required_types = set(range(1, n + 1)) tree_count = defaultdict(int) total_unique = 0 min_length = float(\'inf\') left = 0 for right in range(len(trees)): current_tree = trees[right] if current_tree in required_types: if tree_count[current_tree] == 0: total_unique += 1 tree_count[current_tree] += 1 while total_unique == n and left <= right: min_length = min(min_length, right - left + 1) left_tree = trees[left] if left_tree in required_types: tree_count[left_tree] -= 1 if tree_count[left_tree] == 0: total_unique -= 1 left += 1 return min_length"},{"question":"You are given an integer array `nums` and two integers `k` and `t`. Write a function that returns `true` if there are two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is at most `t` and the absolute difference between `i` and `j` is at most `k`. -----Input----- - An integer array `nums` of length `n` where 0 ≤ n ≤ 10^4 - An integer k where 0 ≤ k ≤ 10^4 - An integer t where 0 ≤ t ≤ 2^31 - 1 -----Output----- - Return `true` if such indices `i` and `j` exist, otherwise return `false`. -----Examples----- Input nums = [1, 2, 3, 1] k = 3 t = 0 Output true Input nums = [1, 0, 1, 1] k = 1 t = 2 Output true Input nums = [1, 5, 9, 1, 5, 9] k = 2 t = 3 Output false","solution":"def containsNearbyAlmostDuplicate(nums, k, t): if t < 0 or k <= 0: return False num_dict = {} for i, num in enumerate(nums): bucket = num // (t + 1) if bucket in num_dict: return True if bucket - 1 in num_dict and abs(num - num_dict[bucket - 1]) <= t: return True if bucket + 1 in num_dict and abs(num - num_dict[bucket + 1]) <= t: return True num_dict[bucket] = num if i >= k: del num_dict[nums[i - k] // (t + 1)] return False"},{"question":"Given an integer array A of length N, you need to find out the maximum difference between any two elements, but with the constraint that the larger element must come after the smaller element in the array. Input Format The first line contains an integer mathbf{N}, the size of the array. The second line contains N space-separated integers representing the array A. Output Format Print the maximum difference that satisfies the given condition. If no such pair exists, print 0. Constraints 1 leq N leq 10^5 1 leq A[i] leq 10^6 Sample input 6 7 1 5 3 6 4 Sample output 5 Explanation In this example, the maximum difference is achieved by the pair (1, 6), and the difference is 6 - 1 = 5.","solution":"def maximum_difference_with_constraint(a): Returns the maximum difference between any two elements such that the larger element comes after the smaller element in the array. if not a or len(a) < 2: return 0 min_element = a[0] max_difference = 0 for i in range(1, len(a)): max_difference = max(max_difference, a[i] - min_element) min_element = min(min_element, a[i]) return max_difference"},{"question":"Write a function `morse_encrypt()` that will encrypt a given string into Morse code, and a function `morse_decrypt()` that will decrypt a given Morse code back into a string. Morse code is a method used in telecommunication to encode text characters as sequences of dots (`.`) and dashes (`-`). Each character is separated by a single space, while each word is separated by a space of 3 spaces (` `). Here is the Morse code table to be used: ```python morse_code = {} ``` The functions should be named and behave as follows: - `morse_encrypt(text: str) -> str`: Encrypts the given string `text` into Morse code, using the map provided above. - `morse_decrypt(morse: str) -> str`: Decrypts the given Morse code string `morse` back into a readable string, using the same Morse code map. # Example Usage ```python morse_encrypt(\'HELLO WORLD\') # Output: \\".... . .-.. .-.. --- .-- --- .-. .-.. -..\\" morse_decrypt(\\".... . .-.. .-.. --- .-- --- .-. .-.. -..\\") # Output: \\"HELLO WORLD\\" ``` # Notes: 1. The input `text` for `morse_encrypt` will only contain uppercase letters and spaces. 2. The input `morse` for `morse_decrypt` will follow the Morse code structure mentioned. 3. Ensure the functions handle the standard Morse code spacing for both encryption and decryption tasks correctly. 4. You must manually implement the Morse code conversion; do not use any built-in libraries or functions for this task. Implement `morse_encrypt()` and `morse_decrypt()` functions in Python.","solution":"morse_code = {} def morse_encrypt(text: str) -> str: Encrypts the given string text into Morse code. return \' \'.join(morse_code[char] for char in text) def morse_decrypt(morse: str) -> str: Decrypts the given Morse code string back into a readable string. reverse_morse_code = {v: k for k, v in morse_code.items()} words = morse.split(\' \') decoded_words = [] for word in words: decoded_chars = \'\'.join(reverse_morse_code[char] for char in word.split()) decoded_words.append(decoded_chars) return \' \'.join(decoded_words)"},{"question":"You are given a rectangular matrix representing a garden. The garden consists of different plants, each with a growth height of either a positive integer or 0. Some cells in the matrix may be empty, represented by \'.\'. Each cell is either occupied by a plant or empty. Due to a unique mutation, some of the plants have the ability to spread over the empty cells around them based on their height. Specifically, a plant with height `h` can spread to all empty cells within a Manhattan distance of `h`. Your task is to determine the maximum possible growth height in the garden after all plants have spread their growth to the empty cells. Assume all plants spread simultaneously and do not interfere with each other\'s growth. -----Input----- The first line of input contains two integers R and C (1 leq R, C leq 100), denoting the number of rows and columns in the garden, respectively. Each of the next R lines contains C characters, where each character is either a digit from \'0\' to \'9\' representing the growth height of a plant, or a \'.\' representing an empty cell. It is guaranteed that there is at least one plant in the garden. -----Output----- Output an integer indicating the maximum growth height in the garden after all plants have spread their growth. -----Examples----- Sample Input: 3 4 .3.. 2... .... Sample Output: 3 Sample Input: 4 4 ..1. 211. .... .... Sample Output: 2","solution":"def max_garden_height(R, C, garden): max_height = 0 for r in range(R): for c in range(C): if garden[r][c] != \'.\': h = int(garden[r][c]) max_height = max(max_height, h) # Spread to all reachable empty cells for dr in range(-h, h + 1): for dc in range(-h, h + 1): if abs(dr) + abs(dc) <= h: rr, cc = r + dr, c + dc if 0 <= rr < R and 0 <= cc < C and garden[rr][cc] == \'.\': garden[rr][cc] = str(h) return max_height"},{"question":"In a seemingly endless forest, there are N trees standing in a straight line. Each tree has a certain height. You need to find the maximum amount of water that can be trapped between any two trees when it rains. Formally, if you select two trees i and j (1 ≤ i < j ≤ N) which form the sides of a container, the amount of trapped water in terms of volume is that tree\'s height that has minimum value between height[i] and height[j] multiplied by the distance between these two indices (j - i). Constraints N ≤ 10^5 1 ≤ height of tree ≤ 10^4 Input First line contains an integer N, the number of trees. Second line contains N space-separated integers, denoting the height of each tree. Output A single integer, the maximum amount of water that can be trapped. SAMPLE INPUT 4 1 8 6 2 5 4 8 3 7 SAMPLE OUTPUT 49 Explanation The trees with heights 8 and 7 positions 2 and 9 (0-based index) respectively can hold the maximum amount of water, which is min(8, 7) * (9 - 2) = 49.","solution":"def max_water_between_trees(n, heights): left, right = 0, n - 1 max_water = 0 while left < right: width = right - left height = min(heights[left], heights[right]) current_water = width * height max_water = max(max_water, current_water) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are tasked with organizing a parade where n children will participate. Each child has a unique height between 1 and n. The parade lineup requirements specify that each child must hold hands with exactly two other children, forming a circular arrangement. However, you are given a special privilege: you can ask exactly one child about their two neighbors\' heights. This information is crucial as your goal is to align children in such a way that the absolute height difference between every pair of neighboring children is minimized. Write a program to determine the minimum possible maximum absolute height difference between any two neighboring children in the circular arrangement. -----Input----- The first line contains one integer n (3 le n le 2 cdot 10^5) — the number of children. The second line contains n integers h_1, h_2, ..., h_n, where h_i is the height of the i-th child. All heights are unique and within the range [1, n]. -----Output----- Print one integer — the minimum possible maximum absolute height difference between any two neighboring children in a circular arrangement. -----Examples----- Input 5 4 1 3 2 5 Output 1 Input 6 6 3 1 4 5 2 Output 1 -----Note----- In the first test case, one of the optimal arrangements is [1, 2, 3, 4, 5]. The absolute height difference between each pair of neighbors is 1, which is the minimal possible maximum height difference. In the second test case, one optimal arrangement is [1, 2, 3, 4, 5, 6]. Again, each pair of neighboring children has an absolute height difference of 1, achieving the minimal possible maximum.","solution":"def min_max_abs_diff(n, heights): Determines the minimal possible maximum absolute height difference between any two neighboring children in a circular arrangement. Args: n (int): The number of children. heights (List[int]): A list of unique heights of the children. Returns: int: The minimal possible maximum absolute height difference. heights.sort() min_max_diff = float(\'inf\') for i in range(n-1): min_max_diff = min(min_max_diff, heights[i+1] - heights[i]) # Check the circular difference between the first and the last element circular_diff = heights[0] + n - heights[-1] min_max_diff = min(min_max_diff, circular_diff) return min_max_diff"},{"question":"Task A gardener is organizing his garden\'s plants into a specific formation. The formation is structured such that each row has one more plant than the previous row. Given the total number of plants, you need to determine how many complete rows can be formed. # Example For `plants = 10`, the output should be `4`. Here\'s the formation: ``` Row 1: 1 plant Row 2: 2 plants Row 3: 3 plants Row 4: 4 plants Remaining plants: 0 Thus, you can form 4 complete rows. ``` For `plants = 15`, the output should be `5`. Here\'s the formation: ``` Row 1: 1 plant Row 2: 2 plants Row 3: 3 plants Row 4: 4 plants Row 5: 5 plants Remaining plants: 0 Thus, you can form 5 complete rows. ``` # Input/Output - `[input]` integer `plants` The total number of plants you have. Constraints: 1 ≤ plants ≤ 1000. - `[output]` an integer - The number of complete rows that can be formed.","solution":"def complete_rows(plants): Determines the number of complete rows that can be formed given a number of plants. Each row has one more plant than the previous row. :param plants: Total number of plants :return: Number of complete rows rows = 0 current_row_plants = 1 while plants >= current_row_plants: plants -= current_row_plants rows += 1 current_row_plants += 1 return rows"},{"question":"In a magic kingdom, there are wizards who need to exchange spells. They can only exchange spells if there exists a chain of acquaintances directly or indirectly connecting them. You are tasked with determining the minimum number of new acquaintances that need to be established to ensure that every wizard can exchange spells with every other wizard. You are given a list of initial relationships between wizards. Each wizard is represented by an integer from 1 to n, and each relationship is a pair of integers indicating that these two wizards know each other. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ n(n-1)/2) — the number of wizards and the number of initial relationships respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing an existing acquaintance between wizards u and v. It is guaranteed that there are no duplicate relationships. Output Print a single integer — the minimum number of new acquaintances required to ensure every wizard can exchange spells with every other wizard. Examples Input 5 3 1 2 2 3 4 5 Output 1 Input 4 0 Output 3","solution":"def min_new_acquaintances(n, initial_relations): Returns the minimum number of new acquaintances required to connect all wizards. Parameters: n (int): Number of wizards. initial_relations (list): List of pairs of integers representing initial relationships. Returns: int: Minimum number of new acquaintances. from collections import defaultdict # Create a graph from the given relationships graph = defaultdict(list) for u, v in initial_relations: graph[u].append(v) graph[v].append(u) # To store visited nodes visited = [False] * (n + 1) # Since wizards are 1-indexed def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Count the number of connected components components_count = 0 for wizard in range(1, n + 1): if not visited[wizard]: visited[wizard] = True dfs(wizard) components_count += 1 # Minimum number of new acquaintances to connect all components return components_count - 1"},{"question":"In a bustling city, there is a single large cargo storage facility. The facility receives cargo deliveries from various suppliers, and it needs to optimize the placement of the cargo in order to minimize the time required to locate specific items. To achieve this, the facility wants to organize the cargo in alphabetical order based on the supplier\'s name. However, due to limited staff and resources, they can only reorganize the cargo once daily. Given a list of suppliers and their corresponding deliveries, write a program to determine the proper alphabetical order for reorganizing the cargo. Each supplier has a unique name and makes a single delivery in a given day. Your task is to sort the cargo based on the suppliers\' names. Input The input consists of multiple test cases. Each test case begins with an integer n (1 ≤ n ≤ 100), the number of suppliers. This is followed by n lines, each containing the name of the supplier and the delivery item separated by a space. The end of the input is indicated by a line containing the number 0. Output For each test case, output the supplier names and their corresponding delivery items in alphabetical order by supplier name. Each supplier-delivery pair should be on a new line, and separate test cases with a blank line. Example Input 3 Beta apples Alpha oranges Gamma bananas 2 Zeta grapes Eta lemons 0 Output Alpha oranges Beta apples Gamma bananas Eta lemons Zeta grapes","solution":"def sort_cargo_by_supplier(test_cases): results = [] for suppliers in test_cases: if suppliers: suppliers.sort() results.append(\\"n\\".join(suppliers)) return \\"nn\\".join(results) def process_input(input_data): lines = input_data.strip().split(\\"n\\") test_cases = [] current_case = [] for line in lines: if line == \'0\': if current_case: test_cases.append(current_case) break elif line.isdigit(): if current_case: test_cases.append(current_case) current_case = [] else: current_case.append(line) return test_cases"},{"question":"In Python, we often need to perform linear algebra operations on matrices. The NumPy library provides efficient methods for these operations. To perform matrix multiplication using NumPy, you can use the `numpy.dot()` or `@` operator. ```python import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) result = np.dot(A, B) print(result) ``` This will output: ``` [[19 22] [43 50]] ``` Task You are given two 2-dimensional lists `A` and `B` representing matrices. Your task is to: 1. Convert these lists into NumPy arrays. 2. Perform matrix multiplication on these arrays. 3. Print the resulting matrix. Input Format The input consists of: - Two lines where each line contains space-separated integers. - The first line represents matrix `A` in flattened form. - The second line represents matrix `B` in flattened form. The matrices are always of compatible sizes for multiplication. Output Format Print the resulting matrix as a NumPy 2D array where each row is on a new line and the elements of each row are separated by a space. Sample Input 1 2 3 4 5 6 7 8 Sample Output [[19 22] [43 50]]","solution":"import numpy as np def matrix_multiplication(A_flat, B_flat, dim_A, dim_B): Converts flattened matrices A and B into 2D numpy arrays, performs matrix multiplication, and returns the result. A = np.array(A_flat).reshape(dim_A) B = np.array(B_flat).reshape(dim_B) result = np.dot(A, B) return result"},{"question":"Write a function `reverseVowels` that takes a string `s` as input and returns a string with the same letters, but with vowels reversed. The vowels are \'a\', \'e\', \'i\', \'o\', \'u\', and they should be treated case-insensitively. For example: ```python reverseVowels(\\"hello\\") --> \\"holle\\" reverseVowels(\\"programming\\") --> \\"prigrammong\\" reverseVowels(\\"Aa\\") --> \\"aA\\" reverseVowels(\\"bcdfgh\\") --> \\"bcdfgh\\" # (no change as there are no vowels) ```","solution":"def reverseVowels(s): Reverses the vowels in the given string `s`. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\' and are treated case-insensitively. vowels = \'aeiouAEIOU\' s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 elif s_list[right] not in vowels: right -= 1 else: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \'\'.join(s_list)"},{"question":"A group of friends wants to determine how much money they need to collect for a group trip. Each friend needs to contribute an equal amount to cover the total required amount for the trip. Your task is to calculate how much each friend needs to contribute. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers N and M, as described in the problem statement. ------ Output Format ------ For each test case, output on a new line the amount each friend needs to contribute. If the total amount cannot be divided equally among all friends, the result should be the integer value of the exact division. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N, M ≤ 10^{6} ------ Sample Input 1 ------ 3 4 100 5 250 3 99 ------ Sample Output 1 ------ 25 50 33 ------ Explanation 1 ------ Test case 1: The total amount of money needed for the trip is 100 and there are 4 friends. Each friend needs to contribute 100 / 4 = 25. Test case 2: The total amount of money needed for the trip is 250 and there are 5 friends. Each friend needs to contribute 250 / 5 = 50. Test case 3: The total amount of money needed for the trip is 99 and there are 3 friends. Each friend needs to contribute 99 / 3 = 33. Since it cannot be evenly distributed, the integer value of the division is taken.","solution":"def calculate_contributions(t, test_cases): This function calculates and returns the list of contributions needed from each friend based on given test cases. Parameters: t (int): Number of test cases test_cases (list of tuples): Each tuple contains two integers (N, M), where N is the number of friends and M is the total amount needed Returns: list: A list of contributions for each test case results = [] for case in test_cases: n, m = case results.append(m // n) return results"},{"question":"Travel Route Alice loves to travel and plans to visit several cities. She has a list of `N` cities she wants to visit in a specific order. However, due to high travel expenses, Alice can only afford to visit a maximum of `M` cities in one trip. Given the list of cities and their respective travel costs, determine the minimum cost Alice would incur to travel to any contiguous sub-sequence of up to `M` cities from the list. Input Input is given from standard input in the following format: ``` N M C_1 C_2 C_3 ... C_N ``` Where: - `N` is the number of cities Alice plans to visit (1 ≤ N ≤ 100000). - `M` is the maximum number of cities Alice can afford to visit in one trip (1 ≤ M ≤ 100000, M ≤ N). - `C_i` represents the travel cost to the `i`-th city (1 ≤ C_i ≤ 1,000,000). Output Print a single integer representing the minimum cost required to travel to any contiguous sub-sequence of up to `M` cities. Example Input ``` 8 3 4 2 6 3 1 7 5 8 ``` Output ``` 1 ``` In this case, the minimum cost sub-sequence is the city with cost `1`, which can be visited alone. Example Input ``` 5 2 10 5 3 8 12 ``` Output ``` 3 ``` Here, the minimum cost sub-sequence of up to `2` cities is the city with cost `3`, which is visited alone.","solution":"def min_travel_cost(N, M, costs): Determine the minimum cost required to travel to any contiguous sub-sequence of up to M cities from the list of city travel costs. min_cost = float(\'inf\') # Iterate over all possible starting points for the sub-sequence for start in range(N): current_sum = 0 # Find the minimum sum for a sub-sequence starting at \'start\' with length up to M for length in range(M): if start + length >= N: break current_sum += costs[start + length] if current_sum < min_cost: min_cost = current_sum return min_cost"},{"question":"Anna enjoys painting tiles in her garden. She has a grid of tiles with dimensions M x N. Each tile is initially unpainted and she can paint lines (rows and columns) from one edge of the grid to the other. A line can be painted only if all tiles in that line are unpainted. After she\'s done painting a line, all tiles in that line become painted. Anna wants to paint the entire grid using the fewest number of lines possible. Your task is to determine the minimum number of lines required to paint the entire grid. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two integers, M and N, denoting the dimensions of the grid. ------ Output ------ For each test case, output a single line containing one integer - the minimum number of lines required to paint the entire grid. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ M, N ≤ 10^9 ------ Sample Input ------ 3 1 1 2 3 4 5 ------ Sample Output ------ 1 2 4 ------ Explanation ------ Example case 1. Anna can paint the single tile in one line. Example case 2. Anna can paint the entire grid in 2 lines, either by painting 2 rows or 3 columns. Example case 3. Anna can paint the grid by painting 4 rows or 5 columns. Painting fewer lines will not cover the entire grid.","solution":"def min_lines_to_paint_grid(T, test_cases): def min_lines(M, N): # The minimum number of lines required to paint an M x N grid return min(M, N) results = [] for M, N in test_cases: results.append(min_lines(M, N)) return results"},{"question":"A renowned mathematician is developing a new number series called the \\"Zeta Series\\". The Zeta Series of an integer X is generated by the following process: 1. Start with the integer X. 2. If X is even, divide it by 2. 3. If X is odd, multiply it by 3 and add 1. 4. Continue this process with the new value of X, until X becomes 1. The length of the Zeta Series is the total number of steps required for X to reach 1. Write a program to find the length of the Zeta Series for multiple test cases. Input: First line contains number of test cases T. Each test case contains a single integer X. Output: For each test case, print the length of the Zeta Series in one line. Constraints: 1 ≤ T ≤ 100 1 ≤ X ≤ 10^6 SAMPLE INPUT 2 6 19 SAMPLE OUTPUT 9 21 Explanation: For the first case, the Zeta Series for 6 is (6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1), so the length is 9. For the second case, the Zeta Series for 19 is much longer, so the length is 21.","solution":"def zeta_series_length(x): Returns the length of the Zeta Series for a given integer x. length = 1 while x != 1: if x % 2 == 0: x = x // 2 else: x = 3 * x + 1 length += 1 return length def process_zeta_series(test_cases): Processes multiple test cases to find the Zeta Series length for each. results = [] for x in test_cases: results.append(zeta_series_length(x)) return results"},{"question":"Write a function reverseCase that takes a string s as input and returns a new string where each uppercase letter is replaced with the corresponding lowercase letter, and each lowercase letter is replaced with the corresponding uppercase letter. Non-alphabetic characters should remain unchanged. Examples: reverseCase(\\"Hello World!\\") should return \\"hELLO wORLD!\\" reverseCase(\\"123abcDEF\\") should return \\"123ABCdef\\" reverseCase(\\"\\") should return \\"\\"","solution":"def reverseCase(s): Returns a new string where each uppercase letter is replaced with the corresponding lowercase letter, and each lowercase letter is replaced with the corresponding uppercase letter. Non-alphabetic characters remain unchanged. result = [] for char in s: if char.islower(): result.append(char.upper()) elif char.isupper(): result.append(char.lower()) else: result.append(char) return \\"\\".join(result)"},{"question":"You are given an array of integers where each integer represents the duration of a task in minutes. You have a processing system that can handle up to K tasks simultaneously. However, the system can only process tasks if the total duration of the tasks does not exceed a given maximum limit M. Write a function that determines the maximum number of tasks that can be processed simultaneously without exceeding the time limit M. If it\'s not possible to process any tasks without exceeding the limit, return 0. INPUT The first line contains three integers N, K, and M, where: - N is the number of tasks, - K is the maximum number of tasks that can be processed simultaneously, - M is the maximum total duration of tasks that can be processed simultaneously. The second line contains N integers, representing the duration of each task. OUTPUT Output a single integer representing the maximum number of tasks that can be processed simultaneously without exceeding the time limit. CONSTRAINTS 1 ≤ N ≤ 100000 1 ≤ K ≤ 100 1 ≤ M ≤ 1000000000 1 ≤ duration of each task ≤ 1000000000 SAMPLE INPUT 5 3 50 10 20 30 40 50 SAMPLE OUTPUT 2","solution":"def max_tasks(N, K, M, durations): Determines the maximum number of tasks that can be processed simultaneously without exceeding the time limit M. durations.sort() max_count = 0 for i in range(min(K, N)): if sum(durations[:i + 1]) <= M: max_count = i + 1 else: break return max_count"},{"question":"Develop a program that simulates a simplified version of an airport baggage handling system. Specifically, the program will track the arrival, loading, and departure of baggage carts. Each cart can carry a limited number of baggage items, and there will be multiple carts arriving at the airport over time. **Input**: The input will consist of several lines: 1. The first line contains an integer `n` (1 ≤ n ≤ 100), the number of carts. 2. For each of the `n` carts, there will be three lines of input: - The cart ID as a string (unique, consisting of alphanumeric characters). - An integer `m` (1 ≤ m ≤ 20), the maximum capacity of the cart (number of baggage items it can hold). - A sequence of baggage items, separated by spaces, where each item is represented by a string (each string is alphanumeric). **Output**: The program should produce a summary for each cart in the order they were input. For each cart, it should display: 1. The cart ID. 2. The number of baggage items loaded (up to the cart’s capacity). 3. A list of loaded baggage items. **Example**: **Input**: ``` 3 CartA 5 bag1 bag2 bag3 bag4 CartB 3 bag5 bag6 CartC 4 bag7 bag8 bag9 bag10 bag11 ``` **Output**: ``` Cart ID: CartA Number of Baggage Items Loaded: 4 Loaded Baggage Items: bag1 bag2 bag3 bag4 Cart ID: CartB Number of Baggage Items Loaded: 2 Loaded Baggage Items: bag5 bag6 Cart ID: CartC Number of Baggage Items Loaded: 4 Loaded Baggage Items: bag7 bag8 bag9 bag10 ``` **Notes**: - If the number of baggage items exceeds the cart\'s capacity, only the first `m` items should be loaded. You are required to implement the program to handle the following tasks: 1. Parse the input to identify carts and their respective baggage items. 2. Ensure each cart’s baggage capacity is respected. 3. Provide a detailed summary of each cart\'s ID, the number of baggage items actually loaded, and the list of those items. Please write your program in Python, and structure it to handle the input and output as described.","solution":"def luggage_handling_system(n, cart_details): Simulates a simplified version of an airport baggage handling system. :param n: number of carts :param cart_details: List of dictionaries each containing cart ID, capacity, and baggage items. result = [] for details in cart_details: cart_id = details[\'cart_id\'] capacity = details[\'capacity\'] baggage_items = details[\'baggage_items\'] # Only load items up to the cart\'s capacity loaded_items = baggage_items[:capacity] number_of_items_loaded = len(loaded_items) # Create the output summary for the cart result.append(f\\"Cart ID: {cart_id}\\") result.append(f\\"Number of Baggage Items Loaded: {number_of_items_loaded}\\") result.append(f\\"Loaded Baggage Items: {\' \'.join(loaded_items)}\\") return result"},{"question":"Tom has a collection of books, and he wants to organize them optimally in his bookshelf. Each book has a unique width in centimeters. The bookshelf has a limit on how much width it can hold. Tom wants to fit as many books as possible into the bookshelf without exceeding the limit. You are given an array of integers where each integer represents the width of a book, and an integer representing the maximum width capacity of the bookshelf. Determine the maximum number of books Tom can fit into the bookshelf without exceeding the width capacity. Input The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of books. - The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the widths of the books. - The third line contains a single integer L (1 ≤ L ≤ 10000) — the maximum width capacity of the bookshelf. Output Output a single integer representing the maximum number of books that Tom can fit into the bookshelf. Examples Input 5 4 2 5 6 3 10 Output 3 Input 4 5 1 3 2 5 Output 2","solution":"def max_books(n, widths, L): Determines the maximum number of books that can fit into the bookshelf without exceeding the width capacity. Args: n (int): Number of books. widths (list of int): List of widths of the books. L (int): Maximum width capacity of the bookshelf. Returns: int: Maximum number of books that can fit into the bookshelf. widths.sort() total_width = 0 count = 0 for width in widths: if total_width + width <= L: total_width += width count += 1 else: break return count"},{"question":"You are given an integer array representing the elements of a circular array. A circular array means that the end of the array wraps around to the beginning. Your task is to determine if the circular array has a subarray that sums up to a given integer k. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains n integers representing the elements of the array ai (|ai| ≤ 104). The third line contains a single integer k (|k| ≤ 109) — the target sum. Output Print \\"YES\\" if there is a subarray in the circular array whose sum is k. Otherwise, print \\"NO\\". Examples Input 5 3 1 -2 5 4 7 Output YES Input 5 3 1 -2 5 4 12 Output NO Input 4 2 -1 2 4 3 Output YES","solution":"def has_circular_subarray_sum(arr, k): Determines if the circular array has a subarray that sums up to k. Args: arr (list): The input array. k (int): The target sum. Returns: str: \\"YES\\" if there is a subarray that sums up to k, otherwise \\"NO\\". n = len(arr) # Extend the array to emulate circular behavior extended_arr = arr + arr current_sum = 0 start_idx = 0 seen_sums = {0} for end_idx in range(2 * n): current_sum += extended_arr[end_idx] if end_idx - start_idx >= n: current_sum -= extended_arr[start_idx] start_idx += 1 if current_sum - k in seen_sums: return \\"YES\\" seen_sums.add(current_sum) return \\"NO\\""},{"question":"Problem You are given an array consisting of N integers, and a positive integer M . Your task is to determine whether there exists a subarray of length M which contains every integer from 1 to M exactly once. Constraints The input satisfies the following conditions: * 1 le N le 10^5 * 1 le M le N * 1 le text{arr}_i le M for all 1 le i le N Input The input is given in the following format: N M text{arr}_1 text{arr}_2 ldots text{arr}_N The first line contains the integer N and M , separated by a space. The second line contains N integers which describe the array, separated by spaces. Output Print \\"Yes\\" if such a subarray of length M exists, otherwise print \\"No\\". Examples Input 6 3 3 1 2 3 2 1 Output Yes Input 5 4 4 3 2 1 3 Output Yes Input 5 3 1 3 1 2 2 Output No","solution":"def subarray_contains_all(N, M, arr): Determines if there exists a subarray of length M that contains all integers from 1 to M exactly once. :param N: The length of the array. :param M: The length of the desired subarray. :param arr: The list of integers. :return: \\"Yes\\" if such a subarray exists, otherwise \\"No\\". if M > N: return \\"No\\" required_set = set(range(1, M+1)) current_set = set(arr[:M]) if current_set == required_set: return \\"Yes\\" for i in range(M, N): current_set.discard(arr[i - M]) # Remove the element that is sliding out current_set.add(arr[i]) # Add the new element that is sliding in if current_set == required_set: return \\"Yes\\" return \\"No\\""},{"question":"**Odd Number Frequency:** You have an array of integers. Write a function `oddNumberFrequency(arr)` that returns the integer which appears an odd number of times in the array. You can assume that there is always exactly one integer that appears an odd number of times. **Your task:** Implement the function `oddNumberFrequency` that receives a list of integers as an argument and returns the integer that occurs an odd number of times. **Function Signature:** ```python def oddNumberFrequency(arr: List[int]) -> int: pass ``` **Example:** ```python oddNumberFrequency([1, 2, 3, 2, 3, 1, 3]) = 3 oddNumberFrequency([4, 4, 7, 7, 9]) = 9 ``` **Constraints:** - The input list will contain at least 1 and at most 1000 integers. - Each integer in the list will be between `-1000` and `1000`. - There will always be exactly one integer that appears an odd number of times.","solution":"def oddNumberFrequency(arr): Function that returns the integer which appears an odd number of times in the array. frequency = {} # Count the frequency of each number for num in arr: frequency[num] = frequency.get(num, 0) + 1 # Find and return the number that appears an odd number of times for num, count in frequency.items(): if count % 2 != 0: return num"},{"question":"Suman loves working with Arrays and Queries. She needs your help with this problem. Given an array A of size N, you need to answer Q queries. Each query consists of an integer x, and you need to find whether x is present in the array A or not. ------ Input: ------ The first line of the input contains a single integer N denoting the size of the array A. The second line contains N space-separated integers, the elements of array A. The third line contains a single integer Q, the number of queries. The next Q lines each contain a single integer x. ------ Output: ------ For each query, output \\"Yes\\" if x is present in the array A, otherwise output \\"No\\". ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ A[i] ≤ 10^9 1 ≤ x ≤ 10^9 ----- Sample Input 1 ------ 5 1 2 3 4 5 3 3 6 1 ----- Sample Output 1 ------ Yes No Yes ----- Explanation 1 ------ For the first query, 3 is present in the array. For the second query, 6 is not present in the array. For the third query, 1 is present in the array.","solution":"def array_queries(n, array, q, queries): Answers queries to determine whether each query element is present in the array. n: int - Size of the array array: list of int - The array of integers q: int - The number of queries queries: list of int - The queried integers Returns a list of strings, either \\"Yes\\" or \\"No\\" for each query. array_set = set(array) results = [] for query in queries: if query in array_set: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Given two integers `N` and `K`, you need to create a string of length `N` consisting only of characters \'a\' and \'b\' such that the string does not contain any palindromic substring of length `K`. If such a string cannot be constructed, return `-1`. -----Input----- - The first line contains an integer `T`, the number of test cases. - Each test case consists of a single line containing the integers `N` and `K`. -----Output----- For each test case, print a string of length `N` with no palindromic substring of length `K`, or `-1` if no such string can be constructed. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N -----Example Input----- 3 5 2 4 3 6 2 -----Example Output----- ababa -1 ababab -----Explanation----- In the first test case, \\"ababa\\" is one valid string of length 5 that does not contain any palindromic substring of length 2. In the second test case, it\'s impossible to construct a string of length 4 that does not contain a palindromic substring of length 3. In the third test case, \\"ababab\\" is one valid string of length 6 that does not contain any palindromic substring of length 2.","solution":"def can_construct_string(N, K): if K > 2 and K <= N: return -1 return (\'ab\' * (N // 2) + \'a\' * (N % 2))[:N] def solve(test_cases): results = [] for N, K in test_cases: result = can_construct_string(N, K) results.append(result) return results"},{"question":"# Task You are tasked to implement a function that simulates the behavior of a traffic light system at an intersection. There are three different states a traffic light can be in: \\"green\\", \\"yellow\\", and \\"red\\". The light transitions from green to yellow, yellow to red, and red to green. Each transition happens after a fixed number of seconds. Write a function `traffic_light(current_state, seconds)` that takes in the current state of the traffic light and the number of seconds returned to change the state accordingly. The traffic light transitions as: - Green stays for `10 seconds` - Yellow stays for `3 seconds` - Red stays for `12 seconds` The function should return the state of the traffic light after the given seconds have elapsed from the provided state. # Example ```python traffic_light(\\"green\\", 7) # returns \\"green\\" traffic_light(\\"green\\", 10) # returns \\"yellow\\" traffic_light(\\"yellow\\", 4) # returns \\"red\\" traffic_light(\\"red\\", 15) # returns \\"green\\" traffic_light(\\"red\\", 20) # returns \\"yellow\\" traffic_light(\\"yellow\\", 1) # returns \\"yellow\\" ``` # Constraints - The input string `current_state` will always be \\"green\\", \\"yellow\\", or \\"red\\". - The integer `seconds` can be any non-negative integer (0 ≤ seconds ≤ 10^6).","solution":"def traffic_light(current_state, seconds): Returns the state of the traffic light after the given seconds have elapsed from the provided state. Args: current_state (str): Current state of the traffic light, either \\"green\\", \\"yellow\\" or \\"red\\". seconds (int): Number of seconds elapsed since the current state. Returns: str: State of the traffic light after the given seconds. cycle_times = { \\"green\\": 10, \\"yellow\\": 3, \\"red\\": 12 } # Calculate the total cycle length cycle_length = sum(cycle_times.values()) # Determine the effective seconds within the current cycle seconds %= cycle_length # Determine which segment of the cycle we fall into if current_state == \\"green\\": initial_offset = 0 elif current_state == \\"yellow\\": initial_offset = cycle_times[\\"green\\"] else: # current_state == \\"red\\" initial_offset = cycle_times[\\"green\\"] + cycle_times[\\"yellow\\"] # Adjust the seconds according to the initial offset seconds += initial_offset seconds %= cycle_length if seconds < cycle_times[\\"green\\"]: return \\"green\\" elif seconds < cycle_times[\\"green\\"] + cycle_times[\\"yellow\\"]: return \\"yellow\\" else: return \\"red\\""},{"question":"Alice has recently learned about binary search trees (BST) in her data structures class. A binary search tree is a binary tree in which for each node, the value of all the nodes in the left subtree is less than the value of the node, and the value of all the nodes in the right subtree is greater than the value of the node. However, Alice finds it challenging to determine the height of the BST. The height of a tree is defined as the number of edges on the longest path from the root node to a leaf node. Help Alice by writing a function that computes the height of a given BST. Input The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 1000) which denotes the number of nodes in the BST. - The second line contains n integers which are the values of the nodes (−10^6 ≤ value ≤ 10^6). These values will be inserted into the BST in the order they are given. Output Output a single integer — the height of the BST. Example Input 9 5 3 8 1 4 7 10 2 9 Output 3 Input 5 10 5 15 4 6 Output 2 Note In the first example, the BST formed will be: 5 / 3 8 / 1 4 10 / 2 9 The height of the tree is 3, as the longest path from the root to a leaf is 5 -> 3 -> 1 -> 2. The number of edges in this path is 3. In the second example, the BST formed will be: 10 / 5 15 / 4 6 The height of the tree is 2, as the longest path from the root to a leaf is 10 -> 5 -> 4 or 10 -> 5 -> 6. The number of edges in these paths is 2.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_into_bst(root, value): if root is None: return TreeNode(value) elif value < root.value: root.left = insert_into_bst(root.left, value) else: root.right = insert_into_bst(root.right, value) return root def compute_height(root): if root is None: return -1 else: left_height = compute_height(root.left) right_height = compute_height(root.right) return max(left_height, right_height) + 1 def height_of_bst(n, node_values): if n == 0: return -1 root = None for value in node_values: root = insert_into_bst(root, value) return compute_height(root)"},{"question":"Python provides a built-in module called `math`, which contains numerous functions for mathematical operations. One useful function is `math.gcd(a, b)`, which returns the greatest common divisor of the integers `a` and `b`. Here is a brief example: ```python import math print(math.gcd(60, 48)) # Output: 12 ``` Task Given two integers `a` and `b`, your task is to compute their greatest common divisor using the `math` module\'s gcd function. Input Format A single line of input containing the space-separated integers `a` and `b`. Constraints 1 leq a, b leq 10^9 Output Format Output a single integer, which is the greatest common divisor of `a` and `b`. Sample Input 45 60 Sample Output 15 Explanation The greatest common divisor of 45 and 60 is 15. The `math.gcd(45, 60)` function call returns 15.","solution":"import math def compute_gcd(a, b): Returns the greatest common divisor of a and b using math.gcd. return math.gcd(a, b)"},{"question":"Maria is a nature enthusiast and loves tracking the movements of various species in the forest using her smart gadgets. Recently, she recorded GPS coordinates of a particularly elusive bird known for its erratic flying patterns. She wants to analyze these coordinates to determine the bird\'s longest uninterrupted straight flight path. Each data point consists of the bird\'s coordinates in the form of x and y. A straight flight path is defined as a series of consecutive points where the bird doesn\'t change its direction. Since she is new to programming, Maria needs your help to find the maximum number of consecutive points that lie on a straight line. -----INPUT----- - The first line contains an integer T - the number of test cases. - For each test case: - The first line contains an integer N - the number of data points recorded. - The next N lines contain two integers x and y each - the coordinates of the bird\'s position at consecutive timestamps. -----OUTPUT----- For each test case, output a single integer - the length of the longest straight flight path of the bird. -----CONSTRAINTS----- 1 <= T <= 50 2 <= N <= 1000 -1000 <= x, y <= 1000 -----EXAMPLE INPUT----- 2 5 1 1 2 2 3 3 4 5 5 6 4 1 2 4 5 7 8 10 11 -----EXAMPLE OUTPUT----- 3 4","solution":"def max_straight_path_length(test_cases): results = [] for N, points in test_cases: if N < 2: results.append(N) continue max_length = 0 for i in range(N): slopes = {} duplicate = 1 for j in range(i + 1, N): dx = points[j][0] - points[i][0] dy = points[j][1] - points[i][1] if dx == 0 and dy == 0: duplicate += 1 continue gcd = get_gcd(dx, dy) slope = (dx // gcd, dy // gcd) if slope in slopes: slopes[slope] += 1 else: slopes[slope] = 1 max_slope_count = max(slopes.values(), default=0) max_length = max(max_length, max_slope_count + duplicate) results.append(max_length) return results def get_gcd(a, b): while b: a, b = b, a % b return abs(a)"},{"question":"The morning assembly at St. Bernadette\'s Primary school is a significant daily event. Every class from 1st grade to 5th grade forms a line based on the order of their roll number to listen to important announcements. The teacher has noticed that some students tend to abscond from the assembly by hiding behind a taller student in front of them. To prevent this, the teacher has decided to arrange the students in a special way. Given the heights of students in a class, you are to write a program to determine if a student can see the teacher when they are standing in an assembly line where: 1. If a student\'s height is greater than or equal to every student in front of them, they can see the teacher. 2. Any student who has a student taller than them standing in front of them can\'t see the teacher. You need to write a function that determines, given the heights of students, which students can see the teacher. Constraints * 1 ≤ number of students ≤ 1000 * 1 ≤ height ≤ 1000 Input The input consists of two lines: 1. An integer N, the number of students. 2. A single line with N integers separated by spaces representing the heights of the students. Output Print the heights of the students who can see the teacher. The heights should be printed in the order they are standing in, separated by spaces. Example Input 6 130 135 145 137 150 160 Output 130 135 145 150 160","solution":"def students_who_can_see_teacher(heights): Given the heights of students, this function will return the heights of students who can see the teacher. A student can see if there is no taller student in front. max_height = 0 result = [] for height in heights: if height > max_height: result.append(height) max_height = height return result"},{"question":"You are given an undirected tree with n nodes numbered from 1 to n. A tree is an acyclic connected graph. Each node has a value associated with it. Your task is to find the maximum sum of nodes in a simple path between two nodes in this tree. A simple path is a path that does not revisit any node. You need to return the sum of the node values on the path with the maximum sum. -----Input----- The first line contains a single integer n (1 le n le 100000), denoting the number of nodes in the tree. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 10^5), where v_i is the value of the i-th node. The following n - 1 lines describe the edges of the tree. Each of these lines contains two integers x and y (1 le x, y le n), denoting an edge connecting nodes x and y. -----Output----- Print a single integer, the maximum sum of nodes in a simple path in this tree. -----Examples----- Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 15 Input 3 1 10 10 1 2 1 3 Output 21 -----Explanation----- In the first example, the simple path with the maximum sum is 3 rightarrow 1 rightarrow 2 rightarrow 4 rightarrow 5 which sums up to 15. In the second example, the simple path with the maximum sum is 2 rightarrow 1 rightarrow 3 which sums up to 21.","solution":"import sys sys.setrecursionlimit(200000) def dfs(node, parent, graph, values, subtree_sum, max_sum): # base case if node not in graph: return 0 current_sum = values[node - 1] for neighbor in graph[node]: if neighbor == parent: continue child_sum = dfs(neighbor, node, graph, values, subtree_sum, max_sum) current_sum += max(0, child_sum) subtree_sum[node] = current_sum max_sum[0] = max(max_sum[0], current_sum) return subtree_sum[node] def max_path_sum(n, values, edges): if n == 1: return values[0] # Creating the graph graph = {i: [] for i in range(1, n + 1)} for x, y in edges: graph[x].append(y) graph[y].append(x) subtree_sum = [0] * (n + 1) max_sum = [-float(\'inf\')] dfs(1, -1, graph, values, subtree_sum, max_sum) return max_sum[0]"},{"question":"Chef\'s restaurant is getting very popular, and he needs to ensure he can always provide the customers with exact change. Chef has an infinite supply of coins with denominations of 1, 2, and 5 units. Given a certain amount of money, Chef wants to know the minimum number of coins needed to make that amount. Write a function that, given an integer X representing the amount of money, returns the minimum number of coins needed. -----Input----- The input contains a single integer X representing the amount of money Chef needs to make change for. -----Output----- For each test case, output a single integer denoting the minimum number of coins needed to make up the amount X. -----Constraints----- - 1 ≤ X ≤ 100000 -----Example----- Input: 13 Output: 3 Explanation: 13 can be made with 2 coins of 5 units and 1 coin of 2 units: 5+5+2+1 = 13 (3 coins).","solution":"def min_coins(X): Given an integer X representing an amount of money, returns the minimum number of coins needed to make that amount using denominations of 1, 2, and 5 units. # Start with the largest denomination to minimize the number of coins count = 0 # Use as many 5-unit coins as possible count += X // 5 X %= 5 # Use as many 2-unit coins as possible with the remainder count += X // 2 X %= 2 # Use any remaining 1-unit coins count += X return count"},{"question":"A company is organizing a team-building activity where team members form teams to solve puzzles. Each team consists of exactly `k` members. Given a list of participants\' names and the team size `k`, you need to create as many complete teams as possible from the given list of participants. The remaining participants who cannot form a complete team should be organized into a smaller team. Write a function that takes in a list of participants and the team size, and returns a list of teams. Each team should be represented as a list of participants\' names. If the number of participants is less than the team size `k`, return a single team with all the participants. If the number of participants is exactly divisible by `k`, do not return an additional smaller team. For example: ```python team_formation([\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\", \\"Eve\\", \\"Frank\\", \\"Grace\\"], 3) ``` Output should be: ```python [ [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], [\\"David\\", \\"Eve\\", \\"Frank\\"], [\\"Grace\\"] ] ```","solution":"def team_formation(participants, k): Forms teams from the list of participants based on team size `k`. Parameters: participants (list): A list of participants\' names. k (int): The size of each team. Returns: list: A list of teams, where each team is a list of participants\' names. teams = [] for i in range(0, len(participants), k): teams.append(participants[i:i + k]) return teams"},{"question":"You are given a list of integers and a target number. Your task is to check if there are two distinct numbers in the list that sum up to the target number. Write a function `find_pair(nums, target)` that returns a pair of numbers `(a, b)` such that `a + b = target` and `a` and `b` are distinct elements in the list. If no such pair exists, return `None`. -----Input----- * A list of integers, `nums` (0 ≤ len(nums) ≤ 10^5) * An integer `target` (-10^9 ≤ target ≤ 10^9) -----Output----- * A tuple `(a, b)` such that `a + b = target`. If no such pair exists, return `None`. Order of the output tuple does not matter. -----Examples----- Input nums = [2, 7, 11, 15] target = 9 Output (2, 7) Input nums = [3, 2, 4] target = 6 Output (2, 4) Input nums = [1, 2, 3, 4, 5] target = 10 Output None -----Note----- In the first example, the pair `(2, 7)` sums to 9, so the output is `(2, 7)`. In the second example, the pair `(2, 4)` sums to 6, so the output is `(2, 4)`. In the third example, there is no pair of distinct numbers that sum to 10, so the output is `None`.","solution":"def find_pair(nums, target): Returns a tuple (a, b) such that a + b = target and a and b are distinct elements in the list. If no such pair exists, returns None. seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return None"},{"question":"You are given an array of N integers where each element represents the height of a building. If a building receives enough sunlight, it generates energy. A building receives sunlight if there are no taller buildings to its left. Write a function to find the total number of buildings that receive sunlight. Example 1: Input: N = 5 A[] = {7, 4, 8, 2, 9} Output: 3 Explanation: Building 1 (height 7) receives sunlight because it is the first in the array. Building 3 (height 8) receives sunlight because buildings 1 and 2 are shorter than 8. Building 5 (height 9) receives sunlight because buildings 1, 2, 3, and 4 are shorter than 9. Example 2: Input: N = 6 A[] = {3, 6, 5, 4, 9, 1} Output: 3 Explanation: Building 1 (height 3) receives sunlight because it is the first in the array. Building 2 (height 6) receives sunlight because buildings 1 is shorter than 6. Building 5 (height 9) receives sunlight because buildings 1, 2, 3, and 4 are shorter than 9. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countBuildingsWithSunlight() which takes an Integer N and an Array A[] as input and returns the answer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= A[i] <= 10^9","solution":"def countBuildingsWithSunlight(N, A): This function returns the number of buildings receiving sunlight. Parameters: N (int): The number of buildings. A (list): A list of integers representing the heights of the buildings. Returns: int: The number of buildings receiving sunlight. # Number of buildings receiving sunlight count = 0 # Height of the tallest building seen so far max_height = 0 for height in A: if height > max_height: count += 1 max_height = height return count"},{"question":"You are tasked to implement a function that identifies and merges intervals. Given a collection of intervals, merge all overlapping intervals. For example, consider the following list of intervals: [[1,3],[2,6],[8,10],[15,18]]. Intervals [1, 3] and [2, 6] overlap, and thus they should be merged to become [1, 6]. Similarly, since there are no overlaps between [8, 10] and [15, 18] with any other interval, the resulting merged intervals would be [[1, 6], [8, 10], [15, 18]]. Your task is to write a function that takes a list of intervals and returns the merged intervals. # Example 1: Input: [[1,3], [2,6], [8,10], [15,18]] Output: [[1,6], [8,10], [15,18]] Explanation: The intervals [1, 3] and [2, 6] overlap and are merged into [1, 6]. # Example 2: Input: [[1,4], [4,5]] Output: [[1,5]] Explanation: The intervals [1, 4] and [4, 5] overlap and are merged into [1, 5]. # Constraints: * The input list of intervals is not necessarily sorted. * 1 <= intervals.length <= 10^4 * intervals[i].length == 2 * 0 <= intervals[i][0] < intervals[i][1] <= 10^4.","solution":"def merge_intervals(intervals): Merges overlapping intervals. :param intervals: List of intervals where each interval is represented as [start, end] :return: List of merged intervals if not intervals: return [] # First, sort the intervals by the starting time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] # Initialize with the first interval for current in intervals[1:]: last = merged[-1] # If the current interval overlaps with the last merged interval if current[0] <= last[1]: # Merge the current interval with the last merged interval merged[-1] = [last[0], max(last[1], current[1])] else: merged.append(current) return merged"},{"question":"Sarah is organizing a charity marathon and wants to provide water stations along the route. She needs to ensure that the stations are placed at intervals such that each runner can easily access water. The marathon route can be considered a line segment on a 1D plane. Consider the points (x, 0) on the 1D plane such that 0 ≤ x ≤ n. There is a water station at point xi if a station is placed there. Sarah can place a water station at each integer point along the route, but she needs to minimize the number of stations while ensuring that the maximum distance any runner has to run without access to water does not exceed a given distance, d. Help Sarah determine the minimum number of water stations needed to satisfy this condition. -----Input----- The first line of input contains two space-separated integers n and d (1 ≤ n ≤ 10^6, 1 ≤ d ≤ 10^6). -----Output----- Print the minimum number of water stations needed along the marathon route to ensure no runner has to run more than d units without access to water. -----Examples----- Input 10 3 Output 4 Input 15 5 Output 4 -----Note----- In the first example, one possible placement of the water stations is at points 0, 3, 6, and 9. This ensures that no runner has to run more than 3 units without access to water. The minimum number of stations needed is 4.","solution":"def minimum_water_stations(n, d): Determine the minimum number of water stations needed along the marathon route to ensure no runner has to run more than d units without access to water. Parameters: n (int): The length of the marathon route. d (int): The maximum distance any runner has to run without access to water. Returns: int: The minimum number of water stations needed. # The number of stations is the total distance divided by the distance d, # we add 1 to consider the starting point (e.g., if n = 10 and d = 3) return (n + d) // d"},{"question":"A large sequence of integers is hidden, and you need to determine the sum of the elements in any given subsegment in it through queries. The sequence stays fixed for each test case and all elements are non-negative. In one query, you provide two distinct integers l and r (1 ≤ l ≤ r ≤ n, 1 ≤ n ≤ 10^5) and receive the sum of the elements from the l-th to the r-th position (inclusive). Additionally, there are two types of special segments within the sequence: 1. \\"Zero-segment\\": A continuous segment where all elements are zeros. 2. \\"High-value segment\\": A continuous segment where all elements have the maximum possible value m (1 ≤ m ≤ 10^9). Your task is to determine ranges of each type of special segment and their start and end indices. Input The first line of input contains the single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9) — the length of the sequence and the maximum possible value. Use the following format for your questions: \\"QUERY l r\\" - Asks for the sum of the elements from the l-th to the r-th position (inclusive). The response will be a single integer value which is the sum of the specified subsegment. To tell the occurrence of the segments, output the following format: \\"ZERO-SEGMENT x y\\" - Indicates a zero-segment starts at index x and ends at index y. \\"HIGH-SEGMENT x y\\" - Indicates a high-value segment starts at index x and ends at index y. Each query should follow the input and output method suitable for interactive problems in competitive programming. Constraints: - The sum of n over all test cases does not exceed 10^5. - You have a maximum of 2n + 500 queries for each test case. Example Input: 1 10 100 Output: QUERY 1 3 0 QUERY 4 6 300 ZERO-SEGMENT 1 3 HIGH-SEGMENT 4 6 Note In the example test case, the segment from index 1 to 3 is a zero-segment and the segment from index 4 to 6 is a high-value segment with all elements being 100. If necessary, you can query further to determine other segments.","solution":"def sum_query(l, r, array): Returns the sum of elements from index l to index r (1-based indexing) from the array. return sum(array[l-1:r]) # converting to 0-based indexing def find_segments(n, m, array): zero_segments = [] high_segments = [] i = 0 while i < n: if array[i] == 0: start = i while i < n and array[i] == 0: i += 1 zero_segments.append((start + 1, i)) # converting to 1-based indexing elif array[i] == m: start = i while i < n and array[i] == m: i += 1 high_segments.append((start + 1, i)) # converting to 1-based indexing else: i += 1 return zero_segments, high_segments"},{"question":"You are given a directed graph with N nodes and M edges. Each node is labeled from 1 to N, and each directed edge has some color c associated with it (1 <= c <= C). A path in the graph is called \\"colorful\\" if no two edges in the path share the same color. Your task is to find the length of the longest colorful path. # Constraints For all test cases, - 1 <= N, M <= 100,000 - 1 <= c <= 10 - It is guaranteed that there are no self-loops or multiple edges of the same color between any pairs of nodes. # Input Format: - The first line contains three integers N, M, and C. - Each of the next M lines contains three integers u, v, and c, denoting a directed edge from node u to node v with color c. # Output Format: - Output a single integer which is the length of the longest colorful path. - If no such path exists, output 0. # Sample Input: ``` 5 6 3 1 2 1 2 3 2 3 4 1 4 5 2 2 4 3 1 3 3 ``` # Sample Output: ``` 4 ``` # Explanation: The graph is: ``` (1) -[1]-> (2) -[2]-> (3) -[1]-> (4) -[2]-> (5) [3]-> [3]->(4) `-------------->\' ``` The longest colorful path using edges of different colors is: 1 -> 2 -> 3 -> 4 -> 5 with lengths 4.","solution":"from collections import defaultdict, deque def longest_colorful_path(N, M, C, edges): # Initialize graph and indegree count graph = defaultdict(list) indegree = defaultdict(int) # For each node n (1 to N), initialize indegree as 0 for n in range(1, N + 1): indegree[n] = 0 # Populate the graph and set indegree for u, v, c in edges: graph[u].append((v, c)) indegree[v] += 1 # Topological sort algorithm queue = deque([node for node in range(1, N + 1) if indegree[node] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor, color in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(topo_order) != N: return 0 # there is a cycle, no valid topological order exists # Initialize the dp table dp = {(node, color): 0 for node in range(1, N+1) for color in range(1, C+1)} longest_path = 0 for node in topo_order: for neighbor, color in graph[node]: for prev_color in range(1, C + 1): if prev_color != color: dp[(neighbor, color)] = max(dp[(neighbor, color)], dp[(node, prev_color)] + 1) longest_path = max(longest_path, dp[(neighbor, color)]) return longest_path"},{"question":"You are given a list of students’ names and their respective grades. A student’s grade can be between 0 and 100, inclusive. The school has a specific rule to reward students: A reward is given if their grade is more than or equal to the average grade of all students. Your task is to determine the names of the students who will receive a reward. # Input: - The first line contains an integer ( N ) representing the number of students. - The following ( N ) lines contain each student\'s name (a string of at most 100 characters) and their grade (an integer between 0 and 100). # Output: - Output the names of the students who will receive a reward, sorted in alphabetical order. - Each name should be printed on a new line. # Constraints: - ( 1 leq N leq 1000 ) # Example: Input: ``` 5 Alice 50 Bob 40 Charlie 60 David 70 Eve 30 ``` Output: ``` Alice Charlie David ``` In this example, the average grade is (50 + 40 + 60 + 70 + 30) / 5 = 50. Therefore, students who scored 50 or more are Alice, Charlie, and David. Their names are printed in alphabetical order. # Note: - Ensure that names are compared in a case-insensitive manner for sorting but output in the original case. - Each student name is distinct.","solution":"def find_rewarded_students(num_students, students_grades): Returns the names of students who will receive a reward based on their grades. Parameters: - num_students (int): The number of students. - students_grades (list of tuples): A list of (student_name, grade) tuples. Returns: - list of strings: Names of students who will receive a reward, sorted alphabetically. total_grades = sum(grade for _, grade in students_grades) average_grade = total_grades / num_students rewarded_students = [name for name, grade in students_grades if grade >= average_grade] rewarded_students.sort(key=lambda x: x.lower()) return rewarded_students"},{"question":"Given an array of integers (both positive and negative), find two numbers such that their sum is closest to zero. You need to write a program that: 1. Takes an integer n as input, which represents the number of integers in the array. 2. Reads the array of n integers. 3. Outputs the two integers whose sum is closest to zero. If multiple pairs have the same closest sum to zero, any of them can be output. Input: - First line contains an integer n (2<= n <= 10^5) - the number of elements in the array. - Second line contains n integers (each integer x where |x| <= 10^6), representing the elements of the array. Output: - Two integers from the array whose sum is closest to zero. Example: Input: 5 -1 2 4 -3 1 Output: -1 1 Explanation: Among all possible pairs, the pair (-1, 1) has the sum closest to zero, which is 0. Note: Make sure your solution is efficient to handle large inputs.","solution":"def find_closest_sum_to_zero(n, arr): Returns two numbers from the array whose sum is closest to zero. arr.sort() left, right = 0, n - 1 closest_sum = float(\'inf\') closest_pair = (None, None) while left < right: current_sum = arr[left] + arr[right] if abs(current_sum) < abs(closest_sum): closest_sum = current_sum closest_pair = (arr[left], arr[right]) if current_sum < 0: left += 1 else: right -= 1 return closest_pair # Example usage: # n = 5 # arr = [-1, 2, 4, -3, 1] # print(find_closest_sum_to_zero(n, arr)) # Output: (-1, 1)"},{"question":"Harish is learning about unique strings and permutations. His teacher gave him a challenge to enhance his understanding of string manipulation and algorithms. A string is called a \\"unique string\\" if all characters in the string are distinct. Harish\'s task is to find out how many unique strings can be generated from a given input string by rearranging its characters. If a character appears more than once in the input string, it should be considered only once in each permutation. Given a string S, find out the number of unique strings that can be formed by rearranging the characters of S. **Input** The first line of the input contains a single integer T, the number of test cases. Each of the next T lines contains a string S consisting of lowercase alphabets only. **Output** For each test case, print a single integer representing the number of unique strings that can be created by rearranging the characters of the string S. **Constraints** - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10 **Example** Input: ``` 2 abc aabb ``` Output: ``` 6 6 ``` **Explanation** Example case 1: There are 3! = 6 permutations for \\"abc\\" (since all characters are unique). Example case 2: For the string \\"aabb\\", after removing duplicates, we get \\"ab\\". The number of unique permutations of \\"ab\\" is 2! = 2. Thus, in total 2 unique strings can be formed by rearranging \\"aabb\\" after considering each character only once. However, the character \'a\' and \'b\' can be interchanged exactly twice in each unique string formation leading to 2! * 2 = 4 permutations. Hence the total unique strings can be formed are 6 overall.","solution":"from math import factorial def unique_string_permutations(S): Calculate the number of unique permutations of the string S with all distinct characters. unique_chars = set(S) n = len(unique_chars) return factorial(n) def number_of_unique_strings(T, strings): results = [] for S in strings: results.append(unique_string_permutations(S)) return results"},{"question":"A string is considered \\"ordered\\" if it contains only the letters \'a\', \'b\', \'c\', \'d\', and \'e\', and the letters appear in the order a < b < c < d < e (they do not need to be contiguous). Write a function that takes a string as input and returns the longest \\"ordered\\" substring. If there are multiple substrings with the same length, return the one that appears first. -----Input----- One line containing a single string of lowercase letters. -----Output----- One line containing the longest \\"ordered\\" substring. -----Constraints----- - 1 ≤ length of the string ≤ 10^5 -----Example----- Input: abbebcddae Output: abbe Input: xyzabcde Output: abcde","solution":"def longest_ordered_substring(s): Returns the longest ordered substring consisting of \'a\', \'b\', \'c\', \'d\', and \'e\' in order. max_length = 0 max_substring = \\"\\" current_substring = \\"\\" for c in s: if c in \\"abcde\\": if len(current_substring) == 0 or ord(c) >= ord(current_substring[-1]): current_substring += c else: if len(current_substring) > max_length: max_length = len(current_substring) max_substring = current_substring current_substring = c else: if len(current_substring) > max_length: max_length = len(current_substring) max_substring = current_substring current_substring = \\"\\" if len(current_substring) > max_length: max_length = len(current_substring) max_substring = current_substring return max_substring"},{"question":"Given a sequence of numbers where each number in the sequence (except the first) is formed by reversing the digits of the previous number and adding `x`. Your task is to determine the `n`-th number in the sequence for different sets of test cases. The sequence `b` is defined as: - `b1 = start` - `b[n] = reverse(b[n-1]) + x` for `n > 1` Here, `reverse(y)` denotes the number obtained by reversing the digits of `y`. For example, if `start = 123` and `x = 3`, then `reverse(123) = 321`, and the sequence becomes: `123, 324, 426, 630,...`. -----Input----- The first line contains one integer `t` (1 le t le 1000) — the number of independent test cases. Each test case consists of a single line containing three integers `start`, `x` and `n` (1 le start le 10^{18}, 0 le x le 10^9, 1 le n le 10^6) separated by spaces. -----Output----- For each test case, print the `n`-th number in the sequence on a separate line. -----Example----- Input 5 123 3 1 123 3 3 98765 25 4 1000 500 2 5005 100 5 Output 123 426 75552 605 65801 -----Note----- 1. For the first test case: - `b1` is `123`. 2. For the second test case: - `b1` is `123`. - `b2 = reverse(123) + 3 = 321 + 3 = 324`. - `b3 = reverse(324) + 3 = 423 + 3 = 426`. 3. For the third test case: - `b1` is `98765`. - `b2 = reverse(98765) + 25 = 56789 + 25 = 56814`. - `b3 = reverse(56814) + 25 = 41865 + 25 = 41890`. - `b4 = reverse(41890) + 25 = 9814 + 25 = 9839`. 4. For the fourth test case: - `b1` is `1000`. - `b2 = reverse(1000) + 500 = 1 + 500 = 501`. - `b3 = reverse(501) + 500 = 105 + 500 = 605`. 5. For the fifth test case: - `b1` is `5005`. - `b2 = reverse(5005) + 100 = 5005 + 100 = 5105`. - `b3 = reverse(5105) + 100 = 5015 + 100 = 5115`. - `b4 = reverse(5115) + 100 = 5115 + 100 = 5215`. - `b5 = reverse(5215) + 100 = 5125 + 100 = 5225`. - `b6 = reverse(5225) + 100 = 5225 + 100 = 5325`.","solution":"def reverse_number(num): Helper function to reverse the digits of a number. return int(str(num)[::-1]) def nth_number_in_sequence(start, x, n): Given the starting number `start`, the increment `x`, and the position `n`, this function returns the `n`-th number in the sequence. current = start for _ in range(1, n): current = reverse_number(current) + x return current def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list. results = [] for start, x, n in test_cases: result = nth_number_in_sequence(start, x, n) results.append(result) return results"},{"question":"You are participating in a programming tournament, and one of the challenges is to process a set of commands on a deque. A deque is a double-ended queue that allows you to insert and remove elements from both ends. You need to write a program that processes a sequence of commands and outputs the state of the deque after executing all commands. The commands are given in the following format: 1. `PUSH_FRONT x`: Insert the integer `x` at the front of the deque. 2. `PUSH_BACK x`: Insert the integer `x` at the back of the deque. 3. `POP_FRONT`: Remove the front element of the deque. If the deque is empty, skip this command. 4. `POP_BACK`: Remove the back element of the deque. If the deque is empty, skip this command. You have to print the elements of the deque from front to back in a single line after processing all the commands. -----Input----- The first line contains a single integer `T` (1 le T le 100) — the number of test cases. Each test case consists of the following: - The first line contains an integer `n` (1 le n le 100000) — the number of commands. - The next `n` lines each contain one of the commands described above. It is guaranteed that the total number of commands in all test cases does not exceed 1000000. -----Output----- For each test case, print the elements of the deque from front to back in a single line separated by spaces. If the deque is empty, print an empty line. -----Examples----- Input 2 5 PUSH_BACK 1 PUSH_FRONT 2 PUSH_BACK 3 POP_FRONT PUSH_FRONT 4 3 PUSH_BACK 1 POP_BACK POP_FRONT Output 4 1 3 Explanation: For the first test case, the commands are executed in the following sequence: - PUSH_BACK 1 -> deque: [1] - PUSH_FRONT 2 -> deque: [2, 1] - PUSH_BACK 3 -> deque: [2, 1, 3] - POP_FRONT -> deque: [1, 3] - PUSH_FRONT 4 -> deque: [4, 1, 3] For the second test case, the commands are executed in the following sequence: - PUSH_BACK 1 -> deque: [1] - POP_BACK -> deque: [] - POP_FRONT -> deque: [] So, the output for the second test case is an empty line.","solution":"from collections import deque def process_commands(commands): d = deque() result = [] for command in commands: if command.startswith(\\"PUSH_FRONT\\"): _, x = command.split() d.appendleft(int(x)) elif command.startswith(\\"PUSH_BACK\\"): _, x = command.split() d.append(int(x)) elif command == \\"POP_FRONT\\": if d: d.popleft() elif command == \\"POP_BACK\\": if d: d.pop() while d: result.append(str(d.popleft())) return \' \'.join(result) def process_test_cases(test_cases): results = [] for commands in test_cases: results.append(process_commands(commands)) return results"},{"question":"Archith enjoys playing chess in his spare time. One day, he decides to practice some advanced movements with his knights. Sir saw him and interrupted by giving him a new challenge involving knights\' moves in chess. Archith needs your help to solve this problem efficiently. Given the current position of a knight on an 8x8 chessboard (standard chess notations with columns labeled \'a\' to \'h\' and rows labeled 1 to 8), write a program to determine all the possible positions the knight can move to from the given starting position. Input: - The first line contains a single integer T, the number of test cases. - The next T lines each contain a string denoting the initial position of the knight (in the format \\"e2\\", \\"a1\\", etc.). Output: For each test case, output a single line containing all possible positions the knight can move to, separated by spaces. The positions should be sorted in lexicographical order. Constraints: 1 ≤ T ≤ 100 The initial positions will always be valid. Sample Input: 2 e2 a1 Sample Output: c1 c3 d4 f4 g1 g3 b3 c2","solution":"def knight_moves(position): Finds all possible moves for a knight from the given position on a chessboard. Args: position (str): Current position of the knight on the chessboard in chess notation. Returns: list: All possible positions the knight can move to, sorted in lexicographical order. # Convert the position to numeric coordinates col, row = position[0], int(position[1]) col_num = ord(col) - ord(\'a\') + 1 # List of all possible moves for a knight moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] possible_positions = [] # Check each potential move for move in moves: new_x = col_num + move[0] new_y = row + move[1] # Ensure the new position is within bounds if 1 <= new_x <= 8 and 1 <= new_y <= 8: new_col = chr(ord(\'a\') + new_x - 1) possible_positions.append(f\\"{new_col}{new_y}\\") # Return the sorted list of possible moves return sorted(possible_positions) def process_knight_moves(T, positions): Processes multiple test cases for knight moves. Args: T (int): Number of test cases. positions (list): List of initial positions. Returns: list: List of strings, each containing the possible moves for a knight from the corresponding position. results = [] for position in positions: moves = knight_moves(position) results.append(\\" \\".join(moves)) return results"},{"question":"Suppose you are developing a system for managing a library. The library has several rooms and each room contains a number of book shelves. Each book shelf contains several books. The library administrator needs a program to efficiently process various operations on the library\'s data. To assist the administrator, write a program that can handle the following operations: 1. Update the title of a book given its room number, shelf number, and book index. 2. Retrieve the title of a book given its room number, shelf number, and book index. 3. Count the number of books in a particular room or on a particular shelf in a specified room. Input The first line contains three integers r, s, and b (1 ≤ r, s, b ≤ 1000) — the number of rooms, shelves per room, and books per shelf, respectively. The next r blocks describe each room. Each block starts with the room identifier and is followed by s blocks describing each shelf. Each shelf block starts with the shelf identifier and is followed by b lines containing book titles. The subsequent lines contain the number q (1 ≤ q ≤ 100000) — the number of operations. Each of the following q lines describes an operation. Operations are as follows: 1. \\"1 room shelf index new_title\\" — Update the title of the book in the specified room, shelf, and index to new_title. 2. \\"2 room shelf index\\" — Retrieve the title of the book in the specified room, shelf, and index. 3. \\"3 room [shelf]\\" — Count the number of books in the specified room or on the specified shelf of a room. If the shelf number is provided, count books only on that shelf. If no shelf number is provided, count all books in the room. Output For each operation of type 2 or type 3, print the result. Example Input 2 2 2 1 1 Gone with the Wind The Great Gatsby 2 To Kill a Mockingbird 1984 2 1 Pride and Prejudice Moby Dick 2 War and Peace Ulysses 4 2 1 2 1 1 2 1 2 Crime_and_Punishment 2 2 1 2 3 1 Output To Kill a Mockingbird Crime_and_Punishment 4","solution":"class Library: def __init__(self, r, s, b): # Initialize the library rooms, shelves, and books self.library = [[[\\"\\" for _ in range(b)] for _ in range(s)] for _ in range(r)] def update_book(self, room, shelf, index, new_title): self.library[room - 1][shelf - 1][index - 1] = new_title def get_book(self, room, shelf, index): return self.library[room - 1][shelf - 1][index - 1] def count_books(self, room, shelf=None): if shelf is None: # Count all books in the specified room return sum(len(shelf) for shelf in self.library[room - 1]) else: # Count books on the specified shelf of the specified room return len(self.library[room - 1][shelf - 1]) # Function to parse input and process operations def process_library_operations(r, s, b, library_data, operations): library = Library(r, s, b) data_index = 0 for room in range(r): room_id = int(library_data[data_index]) data_index += 1 for shelf in range(s): shelf_id = int(library_data[data_index]) data_index += 1 for book in range(b): library.update_book(room_id, shelf_id, book + 1, library_data[data_index]) data_index += 1 results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: _, room, shelf, index, new_title = parts library.update_book(int(room), int(shelf), int(index), new_title) elif op_type == 2: _, room, shelf, index = parts results.append(library.get_book(int(room), int(shelf), int(index))) elif op_type == 3: _, room = parts[:2] if len(parts) > 2: shelf = int(parts[2]) results.append(str(library.count_books(int(room), shelf))) else: results.append(str(library.count_books(int(room)))) return results"},{"question":"Transforming Strings In this problem, you are given a string consisting only of lowercase letters (\'a\' to \'z\'). You have to transform this string according to the following rules. You can perform a series of operations, and in each operation, you can choose exactly one of the following actions: 1. Swap any two characters in the string. 2. Change any one character in the string to any other lowercase letter. Your goal is to determine the minimum number of operations required to transform the given string into a target string consisting only of the letter \'a\'. Input The input consists of a single line containing a string of length between 1 and 100 consisting only of lowercase letters. Output Output a single integer – the minimum number of operations required to transform the string into a string where every character is \'a\'. Sample Input 1 abc Sample Output 1 2 Sample Input 2 zzzzz Sample Output 2 5 Explanation In the first sample, you can perform the following operations: 1. Change \'b\' to \'a\' 2. Change \'c\' to \'a\' In the second sample, you can perform the following operations: 1. Change each \'z\' to \'a\' (total of 5 operations).","solution":"def min_operations_to_a(string): Determine the minimum number of operations required to transform the given string into a string where every character is \'a\'. The number of operations is equal to the number of characters that are not \'a\' since each of these characters needs to be changed to \'a\'. Args: string: A string of lowercase letters Returns: int: The minimum number of operations required # Counting the number of characters that are not \'a\' count_not_a = sum(1 for char in string if char != \'a\') return count_not_a"},{"question":"Alicia is planning a road trip and is analyzing the fuel stations en route. Each fuel station sells fuel at a different price, which changes each day. Alicia wants to know the minimum cost required to fill up her tank on any given day, given a set of fuel prices. You are given the prices for each station on a specific day and the maximum capacity of Alicia\'s tank. You need to find out the lowest cost to fill the tank fully, given that she must buy fuel from exactly one station due to the policy restrictions. Input The first line contains T, the number of test cases. The first line of each test case contains an integer N denoting the number of fuel stations. The second line contains N space-separated integers denoting the fuel prices at these stations (P_i). The third line contains an integer M denoting the capacity of Alicia\'s fuel tank in liters. Output For each test case, output a single integer: the minimum cost to fill Alicia\'s tank fully. If no station has enough fuel, output -1. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ P_i ≤ 10^9 for i = 1, 2, ..., N 1 ≤ M ≤ 10^5 SAMPLE INPUT 2 5 10 20 15 25 30 50 3 7 14 5 20 SAMPLE OUTPUT 500 100 Explanation In the first test case, the price of fuel at each station is given, and Alicia\'s tank capacity is 50 liters. The cheapest option to fill her tank is to choose the station with the price of 10 Rs/liter, thus costing her 10 * 50 = 500 Rs in total. In the second test case, the minimum price is 5 Rs/liter, so filling up 20 liters will cost her 5 * 20 = 100 Rs.","solution":"def min_fuel_cost(T, test_cases): result = [] for cases in test_cases: N, prices, M = cases min_price = min(prices) min_cost = min_price * M result.append(min_cost) return result"},{"question":"You are given an integer N (> 1) and an array A of N integers. The array is circular, meaning the first element is adjacent to the last element. You need to find and print the maximum sum of any contiguous subarray of A, including the possibility of wrapping around from the end of the array back to the start. For example, given the array A = [10, -3, -4, 7, 6, 5, -4, -1], the maximum sum of a contiguous subarray is 23, which is the sum of the subarray [7, 6, 5, -4, -1, 10]. -----Constraints----- - 2 ≤ N ≤ 10^5 - -10^4 ≤ A_i ≤ 10^4 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the maximum sum of any contiguous subarray of the array A. -----Sample Input----- 8 10 -3 -4 7 6 5 -4 -1 -----Sample Output----- 23 For example, the contiguous subarray [7, 6, 5, -4, -1, 10] spans from the end of the array to the start and has a sum of 23, which is greater than any non-wrapping subarray.","solution":"def max_subarray_sum_circular(arr): def kadane(arr): max_ending_here = max_so_far = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(arr) max_wrap = sum(arr) for i in range(len(arr)): arr[i] = -arr[i] max_wrap = max_wrap + kadane(arr) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Jack has been given a task by his teacher to construct a special sequence from a given sequence of integers. The sequence is called \\"mountain-like\\" if it contains exactly one peak element and the elements first strictly increase up to the peak and then strictly decrease. The task is to determine if it is possible to rearrange the given sequence\'s elements to form a \\"mountain-like\\" sequence. A peak element in an array is one which is greater than its neighbors. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print \\"YES\\" if there exists a permutation of elements of the sequence such that it forms a \\"mountain-like\\" sequence. Print \\"NO\\" otherwise. -----Examples----- Input 5 3 5 2 1 4 Output YES Input 4 4 4 4 4 Output NO Input 6 1 3 2 4 5 2 Output YES -----Note----- In the first example, rearranging the elements as 1, 3, 5, 4, 2 forms a valid \\"mountain-like\\" sequence. In the second example, all elements are the same, so it is impossible to form a valid sequence. In the third example, rearranging the elements as 1, 2, 4, 5, 3, 2 forms a valid \\"mountain-like\\" sequence.","solution":"def is_mountain_possible(n, sequence): Determines if it is possible to rearrange the elements of the sequence to form a \\"mountain-like\\" sequence. Parameters: n (int): The number of elements in the sequence. sequence (List[int]): The elements of the sequence. Returns: str: \\"YES\\" if the sequence can be rearranged to a mountain-like sequence, \\"NO\\" otherwise. if n < 3: return \\"NO\\" # Sort the sequence to find the median point sequence.sort() # Check if the max element would be the peak if sequence.count(sequence[-1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"John is trying to organize his book collection. He has a list of book titles, and he wants to find out how many titles start with the same letter. Write a function that takes a list of book titles and returns the count of titles that start with each letter of the alphabet. The titles are case-insensitive, meaning \\"A Tale of Two Cities\\" and \\"a brief history of time\\" should be counted under \'A\' and \'a\' respectively, as starting with the same letter \'a\'. Your function should return a dictionary, where the keys are the letters (from \'A\' to \'Z\') and the values are the number of titles starting with those letters. # Input: - The first line contains an integer T, the number of book titles. - The next T lines each contain a book title. # Output: - Output should be a dictionary where each key is a letter and each value is the count of titles starting with that letter. # Constraints: 1 ≤ T ≤ 1000 1 ≤ length of each title ≤ 100 # Sample Input: 3 A Tale of Two Cities a brief history of time Alice\'s Adventures in Wonderland # Sample Output: {\'A\': 3, \'B\': 0, \'C\': 0, \'D\': 0, \'E\': 0, \'F\': 0, \'G\': 0, \'H\': 0, \'I\': 0, \'J\': 0, \'K\': 0, \'L\': 0, \'M\': 0, \'N\': 0, \'O\': 0, \'P\': 0, \'Q\': 0, \'R\': 0, \'S\': 0, \'T\': 0, \'U\': 0, \'V\': 0, \'W\': 0, \'X\': 0, \'Y\': 0, \'Z\': 0}","solution":"def count_titles_by_starting_letter(titles): Returns a dictionary with the count of titles that start with each letter of the alphabet. The count is case-insensitive. # Initialize dictionary with all letters set to 0 count_dict = {chr(i): 0 for i in range(ord(\'A\'), ord(\'Z\') + 1)} for title in titles: first_letter = title[0].upper() if first_letter in count_dict: count_dict[first_letter] += 1 return count_dict"},{"question":"You are given two strings, S and T, both made up of lowercase English letters. Your task is to determine if it is possible to transform string S into string T using the following operation any number of times: - Choose any character in string S and replace it with any other character. Write a function that returns \\"YES\\" if such a transformation is possible, and \\"NO\\" otherwise. Constraints: - 1 leq |S|, |T| leq 10^5 - Both S and T are non-empty strings of lowercase English letters. Input: First line of input contains the string S. Second line of input contains the string T. Output: Output a single line with \\"YES\\" or \\"NO\\". Examples: Input: abc def Output: YES Input: abc aab Output: NO Input: xyz yxz Output: YES","solution":"def can_transform(S, T): Determines if string S can be transformed into string T using the given transformation rule. :param S: str, the original string :param T: str, the target string :return: str, \\"YES\\" if transformation is possible, \\"NO\\" otherwise # If both strings don\'t have equal number of unique characters, transformation is not possible if len(set(S)) != len(set(T)): return \\"NO\\" return \\"YES\\""},{"question":"Alex enjoys creating grids with unique arrangements of numbers. He has a grid of size n times n filled with integers, where n is an odd number. Alex\'s goal is to find the sum of the elements located on both diagonals of the grid. Note that the central element (which belongs to both diagonals) should only be counted once. Your task is to help Alex find this sum. -----Input----- The input consists of several test cases. The first line of the input contains an integer t (1 leq t leq 100), the number of test cases. Each of the following test cases begins with an odd integer n (1 leq n leq 99) — the dimension of the grid. The next n lines each contain n integers separated by spaces, representing the grid. -----Output----- For each test case, output a single line containing the sum of the elements on both diagonals of the grid. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 42 Output 25 117 42 -----Note----- In the first test case: - The primary diagonal elements are 1, 5, and 9. - The secondary diagonal elements are 3, 5, and 7. However, 5 is the central element and should only be counted once. So, the sum is 1 + 5 + 9 + 3 + 7 = 25. In the second test case: - The primary diagonal elements are 1, 7, 13, 19, and 25. - The secondary diagonal elements are 5, 9, 13, 17, and 21. 13 is the central element and should only be counted once. So, the sum is 1 + 7 + 13 + 19 + 25 + 5 + 9 + 17 + 21 = 117.","solution":"def diagonal_sum(grids): Args: grids: List of tuples where each tuple contains an integer n (dimension of grid) followed by a list of n lists (each having n integers) representing the grid. Returns: List of sums of diagonal elements for each grid. results = [] for grid_info in grids: n = grid_info[0] grid = grid_info[1] primary_diagonal = sum(grid[i][i] for i in range(n)) secondary_diagonal = sum(grid[i][n - 1 - i] for i in range(n)) # Subtract the middle element, since it is counted twice middle_element = grid[n // 2][n // 2] total_sum = primary_diagonal + secondary_diagonal - middle_element results.append(total_sum) return results"},{"question":"Given a string s, which is only composed of letters \'a\' and \'b\',\' perform the following two types of operations and determine the minimum number of operations required to make all the characters of the string equal: 1. Choose any \'a\' character and change it to \'b\'. 2. Choose any \'b\' character and change it to \'a\'. -----Input----- The first line contains the string \'s\' composed of only characters \'a\' and \'b\'. The length of the string \'s\' is between 1 and 100,000. -----Output----- Print a single integer — the minimum number of operations required to make all characters of the string \'s\' equal. -----Examples----- Input aaabbb Output 3 Input bbaaa Output 2 Input a Output 0 -----Note----- In the first sample test, we can change the last three \'b\'s to \'a\'s, or the first three \'a\'s to \'b\'s. In both cases, we need 3 operations. In the second sample test, we can change two \'b\'s to \'a\'s, or three \'a\'s to \'b\'s. Here, the minimum number of operations required is 2 (changing \'b\'s to \'a\'s). In the third sample test, the string already has a single character, which means no operations are required.","solution":"def min_operations_to_unify(s): This function calculates the minimum number of operations required to make all characters in the string \'s\' equal. An operation can either: 1. Change \'a\' to \'b\'. 2. Change \'b\' to \'a\'. Parameters: s (str): The input string composed only of \'a\' and \'b\'. Returns: int: The minimum number of operations required to make all characters in the string \'s\' equal. count_a = s.count(\'a\') count_b = s.count(\'b\') return min(count_a, count_b)"},{"question":"Note : This question carries 200 points The Kingdom of Sylaria is celebrating its 1000th anniversary. The King has announced a grand parade where N soldiers will march in a single line. To make the parade look impressive, he wants each soldier to march in uniform steps. However, he noticed a few soldiers are off-sync and slow down the entire formation. He wants to adjust the step size to ensure that the greatest number of soldiers can march perfectly in-sync. Given the heights of soldiers and the number of soldiers (N), help the King find the maximum step size that can be used so that each soldier\'s height is divisible by this step size. The solution will help the King arrange soldiers in the parade perfectly. -----Input :----- - The first line contains the number of test cases, T. - For each test case: - The first line contains an integer N (the number of soldiers). - The second line contains N integers representing the heights of the soldiers. -----Output :----- - For each test case, print a single integer, the maximum step size that can divide all soldiers\' heights perfectly. -----Constraints :----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^5 - 1 ≤ height ≤ 10^9 -----Sample Input :----- 2 3 15 25 35 4 2 4 6 8 -----Sample Output :----- 5 2 -----Explanation :----- For the first test case: - The greatest common divisor (GCD) of 15, 25 and 35 is 5, so the maximum step size is 5. For the second test case: - The GCD of 2, 4, 6 and 8 is 2, so the maximum step size is 2.","solution":"from math import gcd from functools import reduce def find_max_step_size(T, test_cases): def find_gcd_of_list(lst): Helper function to find the GCD of a list of numbers return reduce(gcd, lst) results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] step_size = find_gcd_of_list(heights) results.append(step_size) return results # Example usage: T = 2 test_cases = [ (3, [15, 25, 35]), (4, [2, 4, 6, 8]) ] print(find_max_step_size(T, test_cases)) # Output: [5, 2]"},{"question":"You are designing a new game where the player needs to collect points that are scattered on a grid. The grid is represented as a 2D list where each cell contains an integer representing the number of points in that cell. The player can only start at the bottom-left corner of the grid and move either up or right to adjacent cells in order to collect points. Write a function `max_points(grid)` that takes a 2D list `grid` as an argument. The function should calculate the maximum number of points the player can collect when moving from the bottom-left corner (grid[-1][0]) to the top-right corner (grid[0][-1]). For example, given the grid: ```python grid = [ [0, 2, 4], [3, 1, 1], [2, 0, 5] ] ``` The function should return `12`, which is the maximum points collectable by following the path: 2 -> 5 -> 1 -> 4 -> 0 (totaling 12 points). # Constraints: - The grid will always be non-empty. - The player can only move up or right from the current position. ```python def max_points(grid): rows = len(grid) cols = len(grid[0]) # Create a 2D list to store maximum points up to each cell dp = [[0] * cols for _ in range(rows)] # Initialize the starting point dp[-1][0] = grid[-1][0] # Fill the first column for i in range(rows-2, -1, -1): dp[i][0] = dp[i+1][0] + grid[i][0] # Fill the first row for j in range(1, cols): dp[-1][j] = dp[-1][j-1] + grid[-1][j] # Fill the rest of the dp array for i in range(rows-2, -1, -1): for j in range(1, cols): dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + grid[i][j] # The result is at the top-right corner return dp[0][-1] ```","solution":"def max_points(grid): rows = len(grid) cols = len(grid[0]) # Create a 2D list to store maximum points up to each cell dp = [[0] * cols for _ in range(rows)] # Initialize the starting point dp[-1][0] = grid[-1][0] # Fill the first column for i in range(rows-2, -1, -1): dp[i][0] = dp[i+1][0] + grid[i][0] # Fill the first row for j in range(1, cols): dp[-1][j] = dp[-1][j-1] + grid[-1][j] # Fill the rest of the dp array for i in range(rows-2, -1, -1): for j in range(1, cols): dp[i][j] = max(dp[i+1][j], dp[i][j-1]) + grid[i][j] # The result is at the top-right corner return dp[0][-1]"},{"question":"In a mystical land of Arcania, there exists a unique tree with N nodes, where each node is a magical orb with an associated value. The tree is rooted at node 1. Two wizards, Alice and Bob, play a game where they take turns to select nodes starting from node 1. Each player can only select a node that has not been selected yet and is directly connected to the node selected by the previous player. The player who cannot make a move loses the game. Alice always goes first. Determine who wins if both players play optimally. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of nodes in the tree. - The second line contains N space-separated integers where the i-th integer is the magical value of the i-th node. - The next N-1 lines contain two space-separated integers u and v denoting that there is a bi-directional edge between node u and node v. -----Output----- - For each test case, output a single line containing \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins. -----Constraints----- - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 105 - 1 ≤ Magical value of a node ≤ 109 -----Subtasks----- Subtask #1 : (10 points) - 1 ≤ N ≤ 5 Subtask #2 : (30 points) - 1 ≤ N ≤ 100 Subtask #3 : (60 points) - 1 ≤ N ≤ 105 -----Example----- Input: 2 3 1 2 3 1 2 1 3 4 4 2 3 1 1 2 1 3 2 4 Output: Alice Alice -----Explanation----- Example case 1: Alice can pick node 1, then Bob can pick either node 2 or 3, after which Alice picks the remaining node and wins. Example case 2: Alice picks node 1, Bob picks node 2, Alice picks node 4, and since Bob cannot pick node 3 (it is not directly connected to 4), Alice wins.","solution":"def game_winner(num_cases, cases): import sys input = sys.stdin.read from collections import deque results = [] for case_idx in range(num_cases): # Unpack the current case N, node_values, edges = cases[case_idx] if N == 1: results.append(\\"Alice\\") continue adj = [[] for _ in range(N + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) # We will perform a BFS to determine the level of each node from the root levels = [-1] * (N + 1) q = deque([1]) levels[1] = 0 while q: node = q.popleft() for neighbor in adj[node]: if levels[neighbor] == -1: # Not visited levels[neighbor] = levels[node] + 1 q.append(neighbor) max_level = max(levels) # If the tree has only one level, Alice wins by picking the root node if max_level == 1: results.append(\\"Alice\\") else: leaf_level_count = sum(1 for level in levels if level == max_level) if leaf_level_count % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results def process_input(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 cases = [] for _ in range(T): N = int(data[index]) index += 1 node_values = list(map(int, data[index:index + N])) index += N edges = [] for _ in range(N - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 cases.append((N, node_values, edges)) return T, cases def main(): T, cases = process_input() results = game_winner(T, cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a small village, there is a single well that is used by all the villagers to fetch water. There is a problem with the well\'s rope - it can only haul up water if it is not overloaded. If too many consecutive villagers attempt to fetch a larger combined amount of water they will break the rope. You have been asked to write a program to ensure the rope\'s load tolerance is not exceeded. Given an array of integers representing the amount of water each villager wants to fetch, and a maximum load capacity of the rope, determine the maximum amount of water that can be fetched consecutively without exceeding the rope\'s capacity. You need to find the maximum sum of continuous subarray such that the sum does not exceed the given capacity. -----Input:----- - The first line contains two space-separated integers n (the number of villagers) and c (the maximum load capacity of the rope). - The second line contains n space-separated integers A[1]..A[n], where each integer A[i] represents the number of liters of water a villager wants to fetch. -----Output:----- Print a single integer, the maximum amount of water that can be fetched without breaking the rope. -----Constraints----- - 1 leq n leq 1000 - 1 leq c leq 10^9 - 1 leq A[i] leq 10^6 -----Sample Input:----- 5 10 2 3 5 4 6 -----Sample Output:----- 10 -----Explanation:----- The array is [2, 3, 5, 4, 6]. The subarrays that have sums less than or equal to 10 are: - [2, 3, 5]: sum is 10 - [3, 5]: sum is 8 - [5, 4]: sum is 9 The maximum sum of the subarray which does not exceed the capacity is 10.","solution":"def max_water_fetched(n, c, A): Given the number of villagers, the maximum load capacity of the rope, and an array representing the amount of water each villager wants to fetch, determine the maximum amount of water that can be fetched consecutively without exceeding the rope\'s capacity. Parameters: n (int): The number of villagers. c (int): The maximum load capacity of the rope. A (list of int): The array representing the amount of water each villager wants to fetch. Returns: int: The maximum amount of water that can be fetched without breaking the rope. max_sum = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += A[j] if current_sum > c: break max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array A of integers of length n, you are asked to perform a series of q queries. Each query contains three integers l, r, and x. For each query, you need to determine the number of elements in the subarray A[l...r] which are divisible by x. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers A1, A2, ..., An (1 ≤ Ai ≤ 10^9). The following q lines each contain three integers l, r, and x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). Output For each query, print an integer in a single line — the number of elements in the specified subarray that are divisible by x. Sample Input 5 3 2 3 4 9 6 1 3 2 2 5 3 1 4 2 Sample Output 2 3 2 Explanation For the first query, the elements in the subarray [2, 3, 4] are being checked. Out of those, 2 and 4 are divisible by 2. For the second query, the elements in the subarray [3, 4, 9, 6] are being checked. Out of those, 3, 9, and 6 are divisible by 3. For the third query, the elements in the subarray [2, 3, 4, 9] are being checked. Out of those, 2 and 4 are divisible by 2.","solution":"def count_divisibles(n, q, A, queries): Returns the count of elements in subarray A[l...r] divisible by x for each query. n: int - length of array A q: int - number of queries A: list[int] - array of integers queries: list[tuple(int, int, int)] - list of queries with (l, r, x) returns list[int] - list of results for each query results = [] for query in queries: l, r, x = query # Adjusting l and r for 0-based indexing l -= 1 r -= 1 count = 0 for i in range(l, r + 1): if A[i] % x == 0: count += 1 results.append(count) return results"},{"question":"Given a string s and an integer k, write a function to determine if s is k-palindrome. A k-palindrome is a string that becomes a palindrome when at most k characters are removed from it. Note: - The string will contain only lowercase letters. - The length of string s is at most 1000. - 1 ≤ k ≤ 10 Example 1: Input: s = \\"abcdeca\\" k = 2 Output: true Explanation: By removing \'b\' and \'e\', the string becomes \\"acdca\\", which is a palindrome. Example 2: Input: s = \\"abcd\\" k = 1 Output: false Explanation: At least two characters need to be removed to make \\"abcd\\" a palindrome in any permutation.","solution":"def is_k_palindrome(s, k): Determines if the given string can be turned into a palindrome by removing at most k characters. Parameters: s (str): The input string. k (int): The maximum number of characters that can be removed. Returns: bool: True if s can be turned into a palindrome by removing at most k characters, otherwise False. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] n = len(s) lps_length = longest_palindromic_subsequence(s) return (n - lps_length) <= k"},{"question":"Given an array of n integers, where the i-th integer represents the amount of money present at the i-th house. Houses are arranged in a circle. A thief plans to rob houses, but cannot rob consecutive houses due to an alarm system. As the houses are arranged in a circle, the first and last house are also considered consecutive. Determine the maximum amount of money the thief can rob without triggering the alarm. Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: The chooseable houses are marked in red: [2, 3, 2]. The thief can rob house 2 (money=3) and house 2 (money=2). Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: The chooseable houses are marked in red: [1, 2, 3, 1]. The thief cannot rob house 3 (money=2) and house 3 (money=1). Example 3: Input: nums = [1, 2, 3] Output: 3 Explanation: The chooseable houses are marked in red: [1, 2, 3]. The thief can rob house 3 (money=2) and house 2 (money=3). Your Task: You don\'t need to read input or print anything. Complete the function `robHouses()` which takes an array nums as input parameter and returns the maximum amount of money the thief can rob. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^4 0 <= nums[i] <= 10^4","solution":"def robHouses(nums): if len(nums) == 1: return nums[0] return max(rob_linear(nums[:-1]), rob_linear(nums[1:])) def rob_linear(nums): prev, curr = 0, 0 for num in nums: prev, curr = curr, max(curr, prev + num) return curr"},{"question":"You are given a string `s` containing lowercase English letters. Your task is to eliminate all \\"a\\"s from the string and reverse the remaining part. Write a function `remove_and_reverse(s: str) -> str` that takes the string as an input and returns the new string after performing the operations. Example: * For the input `s = \\"abcde\\"`, the output should be `\\"edcb\\"`. * For the input `s = \\"aaabbaa\\"`, the output should be `\\"\\"`. Function Signature: ```python def remove_and_reverse(s: str) -> str: pass ``` Input: - A single string `s` of length 1 to 100 containing only lowercase English letters. Output: - A single string that is the result of removing all \\"a\\"s and then reversing the remaining characters. Constraints: - The string `s` will only contain lowercase English letters.","solution":"def remove_and_reverse(s: str) -> str: Removes all \'a\' characters from the string s and then reverses the remaining part. # Remove all \'a\' characters filtered_string = s.replace(\'a\', \'\') # Reverse the remaining part reversed_string = filtered_string[::-1] return reversed_string"},{"question":"You are given an array of N integers. You need to find a way to group these integers into non-empty subsequences such that the sum of the minimum values of all subsequences is maximized. Each integer in the array must belong to exactly one subsequence. ------ Input ------ The first line of the input contains a single integer N. The second line contains N space-separated integers A_1, A_2, ..., A_N. ------ Output ------ Output a single integer, the maximum possible sum of the minimum values of all subsequences. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ A_i ≤ 10^{9} ------ Example Input ------ 6 1 3 2 4 6 5 ------ Example Output ------ 21 ------ Explanation ------ A valid way to partition the array that maximizes the sum is: {1, 3, 2, 4, 6, 5}. Each element in its own subsequence yields the maximum sum of minimum values. Hence, the sum is 1 + 3 + 2 + 4 + 6 + 5 = 21.","solution":"def max_sum_of_min_values(N, A): Returns the maximum possible sum of the minimum values of all subsequences. In this case, each element should be treated as its own subsequence. return sum(A)"},{"question":"Alice has decided to host a charity event and wants to distribute food packets to the underprivileged people around her locality. Each type of recipient has a specific food requirement as follows: adults need 2 packets, teenagers need 1 packet, and children need 0.5 packet. Alice has a total of P packets and the number of adults, teenagers, and children to consider. Your task is to determine if Alice can distribute the food packets such that each recipient type gets their minimum required packets and no packet is wasted. If such distribution is possible, output the number of packets required for each group. If not, print \\"Not Possible\\". INPUT The first line contains an integer T indicating the number of test cases (T ≤ 100). Each of the next T lines contains an integer P representing the total number of packets (P ≤ 50000000), followed by three integers a, t, and c representing the number of adults, teenagers, and children respectively. OUTPUT For each test case, if it\'s possible to distribute the packets as per the requirements, print the number of packets allotted to adults, teenagers, and children respectively. If not, print \\"Not Possible\\". CONSTRAINTS 1. 0 ≤ a, t, c ≤ 1000000 2. 0 ≤ P ≤ 50000000 SAMPLE INPUT 3 100 20 30 40 10 5 2 1 50 0 10 80 SAMPLE OUTPUT 40 30 20 Not Possible 0 10 40 Explanation: In the first test case, - Adults need 20 * 2 = 40 packets - Teenagers need 30 * 1 = 30 packets - Children need 40 * 0.5 = 20 packets Giving a total requirement of 90 packets, hence the distribution (40, 30, 20). In the second test case, - Adults need 5 * 2 = 10 packets - Teenagers need 2 * 1 = 2 packets - Children need 1 * 0.5 = 0.5 packets Giving a total of 12.5 packets which is not possible with only 10 packets. In the third test case, - Adults need 0 * 2 = 0 packets - Teenagers need 10 * 1 = 10 packets - Children need 80 * 0.5 = 40 packets Giving a total requirement of 50 packets, hence the distribution (0, 10, 40).","solution":"def distribute_food_packets(T, test_cases): results = [] for case in test_cases: P, a, t, c = case required_packets = a * 2 + t * 1 + c * 0.5 if required_packets <= P: results.append(f\\"{int(a * 2)} {t} {int(c * 0.5)}\\") else: results.append(\\"Not Possible\\") return results # Example usage: # T = 3 # test_cases = [ # (100, 20, 30, 40), # (10, 5, 2, 1), # (50, 0, 10, 80) # ] # print(distribute_food_packets(T, test_cases))"},{"question":"Implement a program that helps a travel agency to plan itineraries for tourists who want to visit a specific set of cities. Given the travel costs between pairs of cities, find the minimum travel cost path. You are given a number of datasets. Each dataset represents the travel costs between cities in a specific region. The inputs for each dataset are: 1. An integer `n` (1 ≤ n ≤ 100), representing the number of cities. 2. An `n x n` matrix representing the travel costs between each pair of cities. Each element `cost[i][j]` (0 ≤ cost[i][j] ≤ 1000) represents the cost of traveling directly from city `i` to city `j`. If `i == j`, then `cost[i][j]` will be 0 (no cost to travel to the same city). The output for each dataset should be the minimum travel cost that allows a tourist to visit all the cities in that dataset at least once and return to the starting city (i.e., find the minimum cost Hamiltonian cycle). Assume the datasets are terminated by a line containing a single zero. Input ``` n cost[0][0] cost[0][1] ... cost[0][n-1] cost[1][0] cost[1][1] ... cost[1][n-1] ... cost[n-1][0] cost[n-1][1] ... cost[n-1][n-1] ... 0 ``` Output For each dataset, output the minimum travel cost for a complete tour on a new line. Examples Input ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 2 0 3 3 0 0 ``` Output ``` 80 6 ```","solution":"from itertools import permutations def min_cost_hamiltonian_cycle(n, cost): Calculates the minimum travel cost to visit all cities once and return to the starting city. min_cost = float(\'inf\') # Generate all possible permutations of city indices, starting from city 0 cities = list(range(n)) for perm in permutations(cities[1:]): current_cost = 0 current_perm = [0] + list(perm) + [0] # Calculate the travel cost for this permutation for i in range(len(current_perm) - 1): current_cost += cost[current_perm[i]][current_perm[i+1]] # Update the minimum cost min_cost = min(min_cost, current_cost) return min_cost def solve_itineraries(datasets): results = [] for dataset in datasets: n, costs = dataset if n == 0: break results.append(min_cost_hamiltonian_cycle(n, costs)) return results"},{"question":"Given a list of integers, determine whether it is possible to partition the list into three non-empty contiguous subarrays such that the sum of the elements in each subarray is the same. Input The first line of input contains a single integer n, (3 ≤ n ≤ 105), denoting the number of elements in the list. The second line contains n integers a1, a2, ..., an, (1 ≤ ai ≤ 109), denoting the elements of the list. Output Print \\"YES\\" if it is possible to partition the list into three subarrays with equal sums and \\"NO\\" otherwise. Examples Input 6 3 3 3 3 3 3 Output YES Input 6 1 2 3 4 5 6 Output NO Explanation In the first example, the list can be partitioned as [3,3], [3,3], [3,3] which all have equal sum of 6. In the second example, it is not possible to partition the list into three contiguous subarrays with equal sums.","solution":"def can_partition_three_equal_sums(n, arr): Determines if the list can be partitioned into three contiguous subarrays with equal sums. :param n: int - Number of integers in the list :param arr: List[int] - List of integers :return: str - \\"YES\\" if it\'s possible to partition, otherwise \\"NO\\" total_sum = sum(arr) if total_sum % 3 != 0: return \\"NO\\" target_sum = total_sum // 3 current_sum = 0 partitions = 0 for num in arr: current_sum += num if current_sum == target_sum: partitions += 1 current_sum = 0 return \\"YES\\" if partitions >= 3 else \\"NO\\""},{"question":"A warehouse is organizing its shelves for effective inventory management. Each shelf holds certain items identified by a unique character and grouped together in a sequential manner. The challenge is to determine the length of the longest consecutive group of the same item on any shelf in the warehouse. You are given an array \'shelves\' of strings where each string represents the items on a shelf. The goal is to find the length of the longest group of the same item across all the shelves. Write a function longestGroup that takes a list of strings \'shelves\' and returns the length of the longest group of consecutive identical characters. Examples: Input: shelves = [\\"aaabb\\", \\"bbaaaacc\\", \\"ccbaa\\"] Output: 4 Explanation: The longest group of the same item is \\"aaaa\\" on the second shelf. Input: shelves = [\\"ab\\", \\"bc\\", \\"ca\\"] Output: 1 Explanation: All groups of items are of length 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestGroup() which takes a list of strings \'shelves\' as an argument and returns an integer representing the length of the longest group of the same item. Expected Time Complexity: O(M), where M is the total length of all strings in the list. Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(shelves) ≤ 10^5 1 ≤ len(shelves[i]) ≤ 10^5 shelves[i] contains only lowercase English letters (\'a\' to \'z\')","solution":"def longestGroup(shelves): Determines the length of the longest consecutive group of identical characters in the shelves. max_length = 0 for shelf in shelves: current_char = \'\' current_length = 0 for char in shelf: if char == current_char: current_length += 1 else: current_char = char current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Create a function that takes a list of tuples as input, where each tuple contains a student\'s name and their score. The function should return a dictionary where the keys are the unique scores and the values are lists of the names of the students who achieved each score, sorted alphabetically. If the input list is empty, the function should return an empty dictionary. Example: ```python input_list = [(\\"Alice\\", 85), (\\"Bob\\", 75), (\\"Cathy\\", 85), (\\"David\\", 60)] output = {85: [\\"Alice\\", \\"Cathy\\"], 75: [\\"Bob\\"], 60: [\\"David\\"]} ```","solution":"def group_students_by_score(input_list): Receives a list of tuples, each containing a student\'s name and their score. Returns a dictionary where keys are unique scores, and values are lists of names of students who achieved each score. The names in the lists are sorted alphabetically. score_dict = {} for name, score in input_list: if score not in score_dict: score_dict[score] = [] score_dict[score].append(name) # Sort the names in each list alphabetically for score in score_dict: score_dict[score].sort() return score_dict"},{"question":"Geek is experimenting with combining different operations on numbers. He wants to represent the result in an interesting format. Given two numbers `a` and `b`, calculate their sum, difference, and product. Then, represent the results as a tuple of strings in the format: (\\"Sum: x\\", \\"Difference: y\\", \\"Product: z\\"). Example 1: Input: 5 3 Output: (\\"Sum: 8\\", \\"Difference: 2\\", \\"Product: 15\\") Example 2: Input: 10 4 Output: (\\"Sum: 14\\", \\"Difference: 6\\", \\"Product: 40\\") Your Task: This is a function problem. You only need to complete the function calculateForms() that takes two integers `a` and `b` as parameters and returns a tuple of strings representing the sum, difference, and product of the numbers as described above. Don\'t print newline, it will be added by the driver code. Constraint: 1 <= a, b <= 100","solution":"def calculateForms(a, b): Returns a tuple with sum, difference, and product formatted as strings. sum_ab = a + b difference_ab = abs(a - b) product_ab = a * b return (f\\"Sum: {sum_ab}\\", f\\"Difference: {difference_ab}\\", f\\"Product: {product_ab}\\")"},{"question":"Given a positive integer N. Determine if the number is a perfect square. Example 1: Input: N = 16 Output: 1 Explanation: 16 is a perfect square (4*4). Example 2: Input: N = 20 Output: 0 Explanation: 20 is not a perfect square. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPerfectSquare() which takes the integer N as input and returns 1 if the number is a perfect square. Otherwise, it returns 0. Expected Time Complexity: O(sqrt(N)). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^18","solution":"import math def isPerfectSquare(N): Determines if N is a perfect square. Args: N (int): A positive integer. Returns: int: 1 if N is a perfect square, 0 otherwise. if N < 1: return 0 sqrt_N = int(math.isqrt(N)) return 1 if sqrt_N * sqrt_N == N else 0"},{"question":"You are given an integer array `arr` of size `N`. Your task is to split the array into two subarrays such that the difference between the sums of the two subarrays is minimized. Return the minimal difference. Example 1: Input: N = 4 arr = [1, 6, 11, 5] Output: 1 Explanation: The sets can be partitioned as [1, 6, 5] and [11], with sums 12 and 11, respectively. The difference is |12 - 11| = 1, which is the minimum difference possible. Example 2: Input: N = 3 arr = [1, 2, 3] Output: 0 Explanation: The sets can be partitioned as [1, 2] and [3], with sums 3 and 3, respectively. The difference is |3 - 3| = 0, which is the minimum difference possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minDifference` which takes an integer `N` and an array `arr` as inputs and returns the minimal difference. Expected Time Complexity: O(N*sum/2), where `sum` is the total sum of all elements in the array. Expected Auxiliary Space: O(N*sum/2) Constraints: 1 <= N <= 100 1 <= arr[i] <= 100","solution":"def minDifference(N, arr): total_sum = sum(arr) # Initialize DP array dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for j in range(total_sum // 2, num - 1, -1): if dp[j - num]: dp[j] = True for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum # This case is never supposed to be hit with valid inputs # Example usages print(minDifference(4, [1, 6, 11, 5])) # Output: 1 print(minDifference(3, [1, 2, 3])) # Output: 0"},{"question":"Given an integer array `arr` and an integer `k`, determine the number of distinct pairs `(i, j)` where `i < j` and the absolute difference between arr[i] and arr[j] is exactly `k`. Constraints: - 2 ≤ arr.length ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 - 1 ≤ k ≤ 10^9 Input: The input is given from Standard Input in the following format: ``` n k arr_1 arr_2 ... arr_n ``` Where `n` is the length of the array. Output: Output the number of distinct pairs that satisfy the condition. Examples: Input: ``` 5 3 1 5 3 4 2 ``` Output: ``` 2 ``` Explanation: The pairs are `(1, 4)` and `(5, 2)`. Input: ``` 6 2 1 3 1 5 4 2 ``` Output: ``` 4 ``` Explanation: The pairs are `(1, 3)`, `(1, 3)`, `(3, 5)`, and `(4, 2)`. Note that all pairs where `i < j` are considered distinct including identical numbers at different positions. Notes: - Make sure your solution is optimized for time complexity due to the constraints.","solution":"def count_pairs_with_difference_k(arr, k): Returns the number of distinct pairs (i, j) where i < j and the absolute difference between arr[i] and arr[j] is exactly k. count = 0 seen = set() for num in arr: if num + k in seen: count += 1 if num - k in seen: count += 1 seen.add(num) return count # Function to read input data def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:])) result = count_pairs_with_difference_k(arr, k) print(result)"},{"question":"Given a grid where each cell contains a non-negative integer, you are to perform a number of \\"pop\\" operations. In each \\"pop\\" operation, a cell\'s value is reduced to zero, and the values of its adjacent cells (up, down, left, right) are each decreased by 1 (to a minimum of zero). You need to determine the minimum number of \\"pop\\" operations required to reduce all the cell values in the grid to zero. Example 1: Input: grid = [[1,1,1], [1,1,1], [1,1,1]] Output: 1 Explanation: One pop operation on the center cell (1,1) will reduce all values in the grid to zero. Example 2: Input: grid = [[2,2,2], [2,2,2], [2,2,2]] Output: 4 Explanation: Four pop operations are required, one for each of the corner cells. Note: - The value in grid[i][j] is a non-negative integer. - 1 <= grid.length == grid[i].length <= 20 - 0 <= grid[i][j] <= 100","solution":"def minPops(grid): Determines the minimum number of \'pop\' operations required to reduce all values in the grid to zero. :param grid: List[List[int]] - a 2D grid of non-negative integers :returns: int - the minimum number of \'pop\' operations required n = len(grid) m = len(grid[0]) if grid else 0 if n == 0 or m == 0: return 0 max_pops = 0 for i in range(n): for j in range(m): max_pops = max(max_pops, grid[i][j]) return max_pops"},{"question":"A pharmaceutical company needs to produce exactly N milliliters of a medicine using an unlimited supply of pipette sizes. A pipette can dispense exactly 1, 3, or 4 milliliters of the medicine. Design an algorithm to determine the number of different ways to produce exactly N milliliters using these pipette sizes. Input: The first line contains T, the number of test cases. Each of the following T lines contains an integer N, the required volume of medicine in milliliters. Output: For each test case, output the number of ways to produce exactly N milliliters using pipettes of sizes 1, 3, and 4. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 SAMPLE INPUT: 2 4 5 SAMPLE OUTPUT: 4 6 Explanation: For N = 4, the possible combinations are: 1+1+1+1 1+3 3+1 4 So, there are total 4 ways. For N = 5, the possible combinations are: 1+1+1+1+1 1+1+3 1+3+1 3+1+1 1+4 4+1 So, there are total 6 ways.","solution":"def count_ways(n): Returns the number of different ways to produce exactly n milliliters using pipette sizes 1, 3, and 4. if n == 0: return 1 # Initialize dp array dp = [0] * (n + 1) dp[0] = 1 # There\'s one way to make 0 milliliters: do nothing for i in range(1, n + 1): dp[i] = dp[i-1] if i >= 3: dp[i] += dp[i-3] if i >= 4: dp[i] += dp[i-4] return dp[n] def number_of_ways_to_dispense(T, test_cases): results = [] for N in test_cases: results.append(count_ways(N)) return results"},{"question":"Python: Finding the Most Frequent Element Problem Alex has a list of integers, and he wants to find out which integer appears the most frequently. If there is a tie for the most frequent integer, return the smallest one. Write a function that takes a list of integers as input and returns the integer that appears the most frequently. If multiple integers have the same highest frequency, return the smallest one. Function Signature: ```python def most_frequent_element(arr: List[int]) -> int: ``` Input - A list of integers `arr` with length `n` (1 ≤ n ≤ 10^5), where each integer `arr[i]` is between -10^9 and 10^9. Output - Return the integer that appears most frequently in the list. In the case of a tie, return the smallest integer among those with the highest frequency. Example Input: ``` arr = [5, 3, 9, 1, 3, 3, 9, 5, 5, 5] ``` Output: ``` 5 ``` Explanation: - The integer `5` appears 4 times, which is the highest frequency. - The integer `3` appears 3 times. - The integer `9` appears 2 times. - The integer `1` appears 1 time. - Therefore, the most frequent integer is `5`. Input: ``` arr = [1, 2, 2, 1, 3, 3] ``` Output: ``` 1 ``` Explanation: - The integer `1` appears 2 times. - The integer `2` appears 2 times. - The integer `3` appears 2 times. - There is a tie, and the smallest integer among those with the highest frequency is `1`. Note: You are expected to handle lists of large sizes efficiently.","solution":"from typing import List from collections import Counter def most_frequent_element(arr: List[int]) -> int: Returns the most frequent element in the list. If there is a tie, returns the smallest one. frequency = Counter(arr) max_count = max(frequency.values()) most_frequent = [num for num, count in frequency.items() if count == max_count] return min(most_frequent)"},{"question":"A company needs a system to handle their employee records. Each employee has an ID and a rating. You need to implement a system that processes certain queries to manage and retrieve employee data. There are three types of queries: 1. **Add Employee**: Given an employee ID and a rating, add the employee to the system. 2. **Update Rating**: Given an employee ID and a new rating, update the rating of the employee in the system. 3. **Find Top Rated Employee**: Retrieve the ID of the employee with the highest rating. If there are multiple employees with the same highest rating, return the smallest ID among them. The queries are given in the following format: - If the operation is \'A\', it represents adding an employee. The next two inputs will be the employee ID and rating. - If the operation is ‘U’, it represents updating an employee\'s rating. The next two inputs will be the employee ID and the new rating. - If the operation is \'T\', it represents finding the top-rated employee. Input: ``` m [operation_1] [arg1_1] [arg2_1] [operation_2] [arg1_2] [arg2_2] ... [operation_m] [arg1_m] [arg2_m] ``` Where `m` is the number of queries. Output: For each \'T\' query, output the ID of the top-rated employee. Constraints: - 1 ≤ m ≤ 100,000 - 1 ≤ ID ≤ 1,000,000 - 1 ≤ Rating ≤ 10,000,000 Example: Input: ``` 5 A 101 200 A 202 350 T U 202 150 T ``` Output: ``` 202 101 ``` Explanation: 1. Add employee with ID 101 and rating 200. 2. Add employee with ID 202 and rating 350. 3. Find the top-rated employee, which is 202 with a rating of 350. 4. Update the rating of employee 202 to 150. 5. Find the top-rated employee, which is now 101 with a rating of 200.","solution":"class EmployeeSystem: def __init__(self): self.employees = {} def add_employee(self, emp_id, rating): self.employees[emp_id] = rating def update_rating(self, emp_id, new_rating): if emp_id in self.employees: self.employees[emp_id] = new_rating def find_top_rated_employee(self): if not self.employees: return None top_rating = max(self.employees.values()) top_employees = [emp_id for emp_id, rating in self.employees.items() if rating == top_rating] return min(top_employees) def process_queries(queries): system = EmployeeSystem() results = [] for query in queries: parts = query.split() if parts[0] == \'A\': emp_id, rating = int(parts[1]), int(parts[2]) system.add_employee(emp_id, rating) elif parts[0] == \'U\': emp_id, new_rating = int(parts[1]), int(parts[2]) system.update_rating(emp_id, new_rating) elif parts[0] == \'T\': top_emp_id = system.find_top_rated_employee() results.append(top_emp_id) return results"},{"question":"merge_the_tools Consider a string `s` and you have to split the string into `k` consecutive substrings. You have to ensure that there are no duplicate characters present in each substring. Concatenate the unique characters of each substring and print these concatenated substrings. Input Format: - The first line contains an integer `k`, the number of substrings to split into. - The second line contains the string `s`. Output Format: Print the concatenated substrings with unique characters. Sample Input 3 AABCAAADA Sample Output AB CA AD Explanation: - Split string AABCAAADA into `k`=3 substrings of length 3: 1. AAB -> AB 2. CAA -> CA 3. ADA -> AD - Print each substring on a new line.","solution":"def merge_the_tools(s, k): Splits the input string s into k consecutive substrings and ensures that there are no duplicate characters present in each substring. Parameters: s (str): The input string to process k (int): Number of substrings to split into Prints: None: It prints the concatenated substrings each in a new line. n = len(s) for i in range(0, n, k): substring = s[i:i + k] unique_chars = set() result = [] for char in substring: if char not in unique_chars: result.append(char) unique_chars.add(char) print(\'\'.join(result))"},{"question":"David is excited to attend the annual city festival, where various stalls are set up offering different items. David wants to purchase one item from each stall, but he also wants to maximize the total happiness he can derive from the items he purchases, considering the budget he has. Each stall offers multiple items, and each item has an associated happiness value and cost. David needs to carefully select exactly one item from each stall such that the total cost does not exceed his budget, but the total happiness is maximized. Help David determine the maximum happiness he can achieve within his budget. # Input The first line contains two integers `s` and `b` (1 ≤ `s` ≤ 100, 1 ≤ `b` ≤ 10^6) — the number of stalls and David\'s budget, respectively. The following `s` blocks describe the items available at each stall. Each block starts with an integer `n_i` (1 ≤ `n_i` ≤ 100), indicating the number of items available at the `i`-th stall. The next `n_i` lines contain two integers `h_ij` and `c_ij` (1 ≤ `h_ij` ≤ 10^3, 1 ≤ `c_ij` ≤ 10^6), representing the happiness value and cost of the `j`-th item at the `i`-th stall. # Output Print a single integer — the maximum happiness David can achieve within his budget. # Example Input ``` 2 50 3 300 30 200 20 100 10 2 400 40 150 15 ``` Output ``` 500 ``` Explanation David has a budget of 50. He can select the item with happiness 200 and cost 20 from the first stall and the item with happiness 400 and cost 40 from the second stall, for a total happiness of 600, but this exceeds his budget. The optimal choice within the budget of 50 is the item with happiness 100 and cost 10 from the first stall and the item with happiness 400 and cost 40 from the second stall, for a total happiness of 500.","solution":"def max_happiness(s, b, stalls): # Initialize dp array to hold the max happiness for given budget dp = [0] * (b + 1) # Loop through each stall for i in range(s): new_dp = dp[:] for happiness, cost in stalls[i]: for current_budget in range(b, cost - 1, -1): new_dp[current_budget] = max(new_dp[current_budget], dp[current_budget - cost] + happiness) dp = new_dp return dp[b] def parse_input(input_str): lines = input_str.strip().split(\'n\') s, b = map(int, lines[0].split()) stalls = [] inf = 1 for _ in range(s): n_i = int(lines[inf]) inf += 1 items = [] for _ in range(n_i): h_ij, c_ij = map(int, lines[inf].split()) items.append((h_ij, c_ij)) inf += 1 stalls.append(items) return s, b, stalls"},{"question":"Given an integer array `nums`, write a function `isMonotonic` that returns a boolean value indicating whether the array is monotonic or not. An array is considered monotonic if it is either entirely non-increasing or entirely non-decreasing. Do not use built-in sort methods for this task. Examples: ```python isMonotonic([1, 2, 2, 3]) -> True isMonotonic([6, 5, 4, 4]) -> True isMonotonic([1, 3, 2]) -> False ``` Function Signature: ```python def isMonotonic(nums: List[int]) -> bool: pass ```","solution":"from typing import List def isMonotonic(nums: List[int]) -> bool: if not nums: return True increasing = decreasing = True for i in range(1, len(nums)): if nums[i] > nums[i - 1]: decreasing = False elif nums[i] < nums[i - 1]: increasing = False return increasing or decreasing"},{"question":"A company is planning to build a theme park with several locations connected by roads. The roads are bidirectional, and all pairs of locations are connected directly or indirectly. To make the park more attractive, the company wants the shortest distance between the two farthest locations (the diameter of the park) to be as short as possible. The company can add exactly one additional bidirectional road between any two existing locations to achieve this. Your task is to determine the minimum possible diameter of the park after adding one road. Input: The first line contains an integer T (1 ≤ T ≤ 100) - the number of test cases. The descriptions of the T test cases follow. For each test case: - The first line contains an integer n (2 ≤ n ≤ 2000) - the number of locations. - Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n), meaning there is a road between location u and location v. Output: For each test case, print one integer - the minimum possible diameter of the park after adding one road. Example: Input: 2 4 1 2 2 3 3 4 3 1 2 2 3 Output: 2 2 Explanation: In the first test case, the initial tree has locations connected as 1-2-3-4 with a diameter of 3. By adding a road between locations 1 and 4, the diameter can be reduced to 2 as now the longest path is either 1-4-3 or 1-2-3. In the second test case, the initial tree 1-2-3 already has the minimum possible diameter of 2, and adding any additional road does not change this diameter.","solution":"from collections import deque def find_diameter(n, edges): def bfs(start): visited = [-1] * n queue = deque([(start, 0)]) visited[start] = 0 farthest_node, max_distance = start, 0 while queue: node, dist = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: new_dist = dist + 1 visited[neighbor] = new_dist queue.append((neighbor, new_dist)) if new_dist > max_distance: max_distance = new_dist farthest_node = neighbor return farthest_node, max_distance graph = [[] for _ in range(n)] for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) # Step 1: Find the farthest node from any node (we use node 0). farthest_node, _ = bfs(0) # Step 2: Find the farthest node from the farthest node found in step 1 (this gives diameter). farthest_node, diameter = bfs(farthest_node) return diameter def min_possible_diameter(t, test_cases): results = [] for test_case in test_cases: n = test_case[0] edges = test_case[1] current_diameter = find_diameter(n, edges) min_diameter = current_diameter // 2 + 1 results.append(min_diameter) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n = int(data[index]) edges = [] index += 1 for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) edges.append((u, v)) index += 2 test_cases.append((n, edges)) results = min_possible_diameter(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Problem Statement You are given a 2D grid of size N x M, where each cell can be either \'0\' or \'1\'. A cell with \'1\' represents land, and a cell with \'0\' represents water. An island is defined as a group of adjacent lands (horizontally or vertically but not diagonally connected). Write a function to count the number of distinct islands in the grid. # Input - The first line contains two integers N and M (1 ≤ N, M ≤ 300), the dimensions of the grid. - The next N lines each contain an M-length string consisting of \'0\'s and \'1\'s. # Output - Print the number of distinct islands in the given grid. # Example Input ``` 4 5 11110 11010 11000 00000 ``` Output ``` 1 ``` Input ``` 4 5 11000 11000 00100 00011 ``` Output ``` 3 ``` # Explanation In the first example, there is only one island. All \'1\'s are connected either vertically or horizontally. In the second example, there are three distinct islands: 1. The island formed by coordinates [(0, 0), (0, 1), (1, 0), (1, 1)] 2. The island at coordinate [(2, 2)] 3. The island formed by coordinates [(3, 3), (3, 4)]","solution":"def count_islands(grid, n, m): def dfs(x, y): # Use a stack for iterative DFS to avoid maximum recursion depth exceeded error stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < n and 0 <= cy < m and grid[cx][cy] == \'1\': grid[cx][cy] = \'0\' # Mark as visited by setting it to \'0\' # Adding adjacent cells (vertical and horizontal) stack.extend([(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': island_count += 1 dfs(i, j) return island_count"},{"question":"Given an array of integers, find the length of the longest subarray that contains only odd numbers. Example 1: Input: [1, 2, 3, 5, 9, 10, 11, 13] Output: 3 Explanation: The longest subarray with only odd numbers is [3, 5, 9], so the length is 3. Example 2: Input: [2, 4, 6, 8, 1, 3, 5, 7, 9, 11] Output: 6 Explanation: The longest subarray with only odd numbers is [1, 3, 5, 7, 9, 11], so the length is 6. Example 3: Input: [2, 4, 6, 8] Output: 0 Explanation: There are no odd numbers, so the length is 0. Your task: You don\'t need to read input or print anything. Your task is to complete the function longestOddSubarray() which takes an array of integers as input and returns the length of the longest subarray that contains only odd numbers. Expected time complexity: O(N) Expected auxiliary space: O(1) Constraints: 1 <= Number of elements in the array <= 10^5 1 <= Value of elements in the array <= 10^5","solution":"def longestOddSubarray(nums): Returns the length of the longest subarray that contains only odd numbers. max_length = 0 current_length = 0 for num in nums: if num % 2 != 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given a list of integers, determine whether there exists a triangular triplet (a, b, c) in this list. A triangular triplet satisfies the conditions: - a + b > c - a + c > b - b + c > a Write a function `is_triangular_triplet` that takes a list of integers as input and returns `true` if there exists at least one triangular triplet in the list, otherwise returns `false`. Function signature: `def is_triangular_triplet(arr: List[int]) -> bool:` # Example: ``` is_triangular_triplet([10, 2, 5, 1, 8, 20]) # Output: true is_triangular_triplet([10, 50, 5, 1]) # Output: false ``` # Note: - You can assume the list contains only positive integers. - If the list has less than 3 elements, the function should return `false`.","solution":"from typing import List def is_triangular_triplet(arr: List[int]) -> bool: Given a list of integers, determine whether there exists a triangular triplet. A triangular triplet satisfies: a + b > c a + c > b b + c > a if len(arr) < 3: return False arr.sort() for i in range(len(arr) - 2): if arr[i] + arr[i + 1] > arr[i + 2]: return True return False"},{"question":"In a faraway kingdom, there is a circular racetrack divided into n segments. Each segment has an integer value representing the height of the terrain at that segment. The height of the terrain affects the speed at which a racer can travel through that segment. Higher segments slow racers down, while lower segments allow them to go faster. A racer named Banjo wants to complete exactly one lap around the track. Banjo can start at any segment and finish either after completing the entire circle or by stopping at any segment after passing through all adjacent segments once. To determine Banjo\'s best start point, you need to find the starting segment such that the height difference between the maximum height and the minimum height encountered during the lap is minimized. This ensures the most consistent speed. Your task is to determine the minimum possible height difference for Banjo starting from any segment. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 2000) — the number of segments in the circular racetrack. The second line contains a sequence of n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 1000), where h_{i} is the height of the i-th segment. -----Output----- Output the minimum possible height difference that Banjo can achieve by starting at any segment and completing one lap around the track. -----Examples----- Input 6 2 5 3 7 1 4 Output 4 Input 5 10 15 20 25 30 Output 20 -----Note----- In the first example, Banjo can start at the fourth segment (which is of height 7) and complete one lap with encountered heights as [7, 1, 4, 2, 5, 3]. The height difference is 7 - 1 = 6. In the second example, regardless of where Banjo starts, the height difference in any complete lap is always 30 - 10 = 20.","solution":"def minimum_possible_height_difference(n, heights): Determines the minimum possible height difference that Banjo can achieve by starting at any segment and completing one lap around the circular racetrack. # Initialize the minimum difference with a large value min_diff = float(\'inf\') # Consider each segment as a starting point for i in range(n): # Rotate the heights to consider the current starting point rotated_heights = heights[i:] + heights[:i] # Determine the max and min heights in the rotated list max_height = max(rotated_heights) min_height = min(rotated_heights) # Update the minimum difference min_diff = min(min_diff, max_height - min_height) return min_diff"},{"question":"Anna is building a wall using colored bricks. She has a list of bricks, each with a unique color represented by a string. She wants to construct the wall such that no two adjacent bricks have the same color. Given a list of strings where each string represents the color of a brick, determine the number of ways to arrange the bricks in a row such that no two adjacent bricks have the same color. ----Input---- - The input consists of an integer n (1 ≤ n ≤ 100,000), the number of bricks. - The next line contains n space-separated strings, each representing the color of a brick. Each string\'s length is at most 10 and consists of lowercase or uppercase English letters. ----Output---- Print the number of valid arrangements modulo 10^9 + 7. If there are no valid arrangements, print 0. ----Examples---- Input 3 red blue green Output 6 Input 4 a b c d Output 24 Input 2 aa aa Output 0","solution":"def count_valid_arrangements(brick_colors): from itertools import permutations MOD = 10**9 + 7 # Base Cases if len(set(brick_colors)) < len(brick_colors): return 0 # Generate all permutations all_permutations = permutations(brick_colors) def is_valid_permutation(perm): for i in range(1, len(perm)): if perm[i] == perm[i-1]: return False return True valid_count = sum(1 for perm in all_permutations if is_valid_permutation(perm)) return valid_count % MOD"},{"question":"Alice loves strings and she plays a game with them where she modifies given binary strings. A binary string is a string consisting of only characters \'0\' and \'1\'. Her game works as follows: 1. She selects a substring with consecutive characters from any position in the given binary string. 2. She then flips all the characters in the substring (\'0\' becomes \'1\' and \'1\' becomes \'0\'). 3. She repeats the above operation any number of times (including zero). Alice wants to know the minimum number of operations required to make the binary string contain an equal number of \'0\'s and \'1\'s. Help Alice by writing a program to find the minimum number of operations required to balance the number of \'0\'s and \'1\'s in the binary string. -----Input----- The first line contains an integer t — the number of test cases (1 ≤ t ≤ 100). The descriptions of the test cases follow. Each test case consists of one line containing a binary string s (1 ≤ |s| ≤ 10^5). It is guaranteed that the sum of lengths of all strings in one test does not exceed 10^5. -----Output----- For each test case output one line containing a single integer — the minimum number of operations required to balance the number of \'0\'s and \'1\'s in the binary string. -----Example----- Input 4 1101 101010 111000 0000 Output 1 0 0 2","solution":"def min_operations_to_balance(t, test_cases): Returns a list of integers where each integer represents the minimum number of operations required to make the binary string contain an equal number of \'0\'s and \'1\'s for each test case. results = [] for s in test_cases: count_0 = s.count(\'0\') count_1 = s.count(\'1\') min_operations = abs(count_0 - count_1) // 2 results.append(min_operations) return results"},{"question":"Write a function named `increment_string` which takes a string and increments it by one. If the string ends with a number, the number should be incremented by one. If the string does not end with a number, the number 1 should be appended to the new string. # Examples: ```python increment_string(\\"foo\\") == \\"foo1\\" increment_string(\\"foobar23\\") == \\"foobar24\\" increment_string(\\"foo0041\\") == \\"foo0042\\" increment_string(\\"foo019\\") == \\"foo020\\" increment_string(\\"\\") == \\"1\\" ```","solution":"import re def increment_string(s): Increment the numeric part of a string by one. If no numeric part exists, append \'1\' to the string. Parameters: s (str): The input string. Returns: str: The incremented string. match = re.search(r\'(d+)\', s) if match: num = match.group(1) incremented_num = str(int(num) + 1).zfill(len(num)) return s[:match.start()] + incremented_num else: return s + \'1\'"},{"question":"Given two integer arrays that are not necessarily sorted and can contain both positive and negative numbers, find the largest sum of their common elements. If there are no common elements, return 0. For example: ``` largestCommonSum([1, 2, 3, 4], [3, 4, 5, 6]) → 7 largestCommonSum([-1, -2, 3, 4], [3, 4, -2, 0]) → 5 largestCommonSum([1, 2, 2, 2], [2, 2]) → 4 largestCommonSum([1, 2, 3], [4, 5, 6]) → 0 ``` Function Signature ```python def largestCommonSum(arr1: List[int], arr2: List[int]) -> int: # Your code here ```","solution":"from typing import List def largestCommonSum(arr1: List[int], arr2: List[int]) -> int: Returns the largest sum of common elements in two integer arrays. If there are no common elements, returns 0. common_elements = set(arr1).intersection(set(arr2)) return sum(common_elements) if common_elements else 0"},{"question":"James is a passionate rock climber who loves to climb mountains. Recently, he has discovered a new mountain range represented as a sequence of peaks and valleys. He aims to track his climbing journey to find the maximum height he can reach starting from the first peak. The mountain range is represented as an array of non-negative integers where each integer represents the height of a specific point along the range. James can move from his current position to the next position if the height at the next position is either the same or higher. This means he can only climb or move horizontally, but not move downwards. Given the array of heights, your task is to determine the maximum height that James can reach starting from the first peak in the array. -----Input----- The first line of the input contains an integer n representing the number of points in the mountain range. (1 leq n leq 10^5) The second line contains n non-negative integers where each integer h_i (0 leq h_i leq 10^9) represents the height of the i^{th} point in the range. -----Output----- A single integer denoting the maximum height James can reach following the climbing rules. -----Examples----- Sample Input: 5 1 3 2 5 4 Sample Output: 5 Sample Input: 8 2 2 3 4 3 5 6 7 Sample Output: 7","solution":"def max_climbing_height(n, heights): Determines the maximum height that can be reached starting from the first peak in the array according to the climbing rules. Parameters: n (int): Number of points in the mountain range. heights (list of int): Heights of each point in the range. Returns: int: The maximum height that can be reached. max_height = heights[0] # Initialize maximum height with the first height current_max = heights[0] # Initialize current max height with the first height for i in range(1, n): if heights[i] >= current_max: current_max = heights[i] max_height = max(max_height, current_max) return max_height"},{"question":"# Description: Write a function `merge_sorted_arrays` that takes two sorted arrays of integers as inputs and returns a single sorted array containing all the elements from both input arrays. The function should maintain the sorted order. You cannot use built-in methods like `sort` to sort the final array. You must implement the merging process manually. # Examples ``` merge_sorted_arrays([1, 3, 5], [2, 4, 6]) === [1, 2, 3, 4, 5, 6] merge_sorted_arrays([1, 2, 3], [4, 5, 6]) === [1, 2, 3, 4, 5, 6] merge_sorted_arrays([-1, 0, 2], [-2, 1, 3]) === [-2, -1, 0, 1, 2, 3] merge_sorted_arrays([], [7, 8, 9]) === [7, 8, 9] merge_sorted_arrays([10, 20, 30], []) === [10, 20, 30] ``` # Constraints - The input arrays are sorted in non-decreasing order. - The input arrays can contain both positive and negative integers. - The input arrays can be of different lengths. - The solution should run in O(n + m) time complexity, where n and m are the lengths of the two input arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged = [] i, j = 0, 0 # Merge the arrays by comparing elements while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Add the remaining elements from arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # Add the remaining elements from arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Derek the doubles player is practicing tennis serves for his upcoming match. His coach told him to practice by hitting the ball towards specific zones on the court with varying lengths and widths. To help Derek know if his serve lands properly within the zone, write a program that will check if the serve landed within the designated rectangular zone. Given the coordinates of the top-left and bottom-right corners of the rectangular zone, and the coordinates where Derek\'s serve landed, determine whether the ball landed inside the zone, on the border, or outside the zone. -----Input----- The input consists of a single line containing six space-separated integers x1, y1, x2, y2, xt, yt, where (x1, y1) are the coordinates of the top-left corner of the zone, (x2, y2) are the coordinates of the bottom-right corner of the zone, and (xt, yt) are the coordinates of where Derek\'s serve landed. (-10^9 ≤ x1, y1, x2, y2, xt, yt ≤ 10^9) -----Output----- Print one of three values: \\"Inside\\", \\"Border\\", or \\"Outside\\" depending on the position of the serve with respect to the rectangular zone. -----Examples----- Input 1 4 6 1 3 3 Output Inside Input 1 4 6 1 1 1 Output Border Input 1 4 6 1 0 3 Output Outside","solution":"def check_serve_zone(x1, y1, x2, y2, xt, yt): Determines if the serve landed inside, on the border, or outside the designated rectangular zone. Args: x1, y1 : int : Coordinates of the top-left corner of the zone. x2, y2 : int : Coordinates of the bottom-right corner of the zone. xt, yt : int : Coordinates of where the serve landed. Returns: str : \\"Inside\\", \\"Border\\", or \\"Outside\\" based on the serve location relative to the zone. # Ensure that (x1, y1) is the top-left and (x2, y2) is the bottom-right corner if x1 > x2: x1, x2 = x2, x1 if y1 < y2: y1, y2 = y2, y1 if x1 < xt < x2 and y1 > yt > y2: return \\"Inside\\" elif (x1 <= xt <= x2 and (yt == y1 or yt == y2)) or ((xt == x1 or xt == x2) and y1 >= yt >= y2): return \\"Border\\" else: return \\"Outside\\""},{"question":"A new airline company has a particular way of arranging seats in their planes. Each seat is either empty (denoted by \'.\') or occupied (denoted by \'X\'). They want to know whether a given seating arrangement forms a valid arrangement according to the following rules: 1. Any two occupied seats should not be adjacent horizontally. 2. Any two occupied seats should not be adjacent vertically. Given a seating layout, determine whether it is a valid arrangement. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100), n — the number of rows and m — the number of columns of the seating layout. The next n lines contain m characters each, where each character is either \'.\' or \'X\'. Output Output YES, if the seating arrangement is valid, and NO otherwise. Examples Input 3 3 .XX X.. ..X Output NO Input 3 3 .X. .X. .X. Output NO Input 3 3 .X. ... .X. Output YES","solution":"def is_valid_seating(n, m, seating): Determines if the seating arrangement is valid based on the given rules. Args: n (int): number of rows. m (int): number of columns. seating (list of str): seating layout where each string represents a row. Returns: str: \'YES\' if the arrangement is valid, \'NO\' otherwise. for i in range(n): for j in range(m): if seating[i][j] == \'X\': # Check horizontally if j + 1 < m and seating[i][j + 1] == \'X\': return \'NO\' # Check vertically if i + 1 < n and seating[i + 1][j] == \'X\': return \'NO\' return \'YES\'"},{"question":"In the world of programming, arrays are ubiquitous and invaluable. They provide a convenient means of storing and manipulating collections of data. Today, we are going to focus on an interesting challenge involving 2-dimensional arrays. As the astute programmers you are, the task is to identify the largest square subarray whose elements are all the same. -----Input----- The first line contains an integer `n` (1 le n le 100) representing the number of rows and columns in the 2-dimensional array. Each of the next `n` lines contain `n` integers separated by spaces, representing the elements of the array. -----Output----- Output a single integer representing the size of the side of the largest square subarray with all identical elements. -----Examples----- Sample Input: 5 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 Sample Output: 3 Sample Input: 4 1 2 3 4 5 6 7 8 9 2 3 4 5 1 1 1 Sample Output: 1","solution":"def largest_square_subarray(n, array): if n == 0: return 0 # Create a DP table dp = [[0] * n for _ in range(n)] max_side = 0 # Initialize DP table for i in range(n): for j in range(n): if i == 0 or j == 0: dp[i][j] = 1 else: if array[i][j] == array[i-1][j] == array[i][j-1] == array[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Given a string of lowercase alphabets, you need to perform a series of operations on it to make it a palindrome. A palindrome is a string that reads the same backward as forward. The allowed operation is to replace any single character in the string with any other character. Write a function that, given a string, returns the minimum number of replace operations needed to make it a palindrome. Input Format: - A single line containing a string S of lowercase alphabets. Output Format: - A single integer representing the minimum number of replace operations needed. Constraints: 1 ≤ |S| ≤ 10^5 SAMPLE INPUT abca SAMPLE OUTPUT 1 Explanation: We can replace the last character \'a\' with \'c\' to make the string \\"abca\\" into the palindrome \\"abccba\\" requiring only 1 operation.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of replace operations needed to make the string a palindrome. n = len(s) operations = 0 # Check pairs of characters from the start and end for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"Design a file system Implement a class representing a simple in-memory file system. The file system should support the following operations: 1. `add_path` - Add a new file or directory. 2. `delete_path` - Delete an existing file or directory. 3. `list_files` - List all files and directories within a specified directory. 4. `directory_size` - Calculate the total size of a directory, including all its nested files and directories. A path may represent a file or a directory, and paths are denoted using forward slashes (\'/\') like in Unix-based file systems. For example, `/root`, `/root/a.txt`, `/root/subdir`, etc. 1. `add_path(path: str, size: int)` - Adds a new file or directory with a specified size. If the size is 0, the path represents a directory. 2. `delete_path(path: str)` - Deletes an existing file or directory and all its contents if it\'s a directory. 3. `list_files(path: str)` - Returns a list of all files and directories within the specified directory. 4. `directory_size(path: str)` - Calculates and returns the total size of the directory, including all nested files and directories. Your implementation should handle large file systems with up to 1 million files and directories efficiently. Example: ```python file_system = FileSystem() # Add files and directories file_system.add_path(\\"/root\\", 0) file_system.add_path(\\"/root/a.txt\\", 10) file_system.add_path(\\"/root/subdir\\", 0) file_system.add_path(\\"/root/subdir/b.txt\\", 20) # List files and directories assert file_system.list_files(\\"/root\\") == [\\"/root/a.txt\\", \\"/root/subdir\\"] # Calculate directory size assert file_system.directory_size(\\"/root\\") == 30 # Delete file and directory file_system.delete_path(\\"/root/a.txt\\") assert file_system.list_files(\\"/root\\") == [\\"/root/subdir\\"] assert file_system.directory_size(\\"/root\\") == 20 ``` Use appropriate data structures to ensure efficient performance of directory traversals and size calculations.","solution":"class FileSystem: def __init__(self): self.file_system = {} def add_path(self, path: str, size: int): parts = path.split(\'/\') current = self.file_system for part in parts[1:-1]: if part not in current: current[part] = {\'_is_dir\': True, \'_size\': 0} current = current[part] if parts[-1] in current: raise FileExistsError(f\\"Path \'{path}\' already exists.\\") if size == 0: current[parts[-1]] = {\'_is_dir\': True, \'_size\': 0} else: current[parts[-1]] = {\'_is_dir\': False, \'_size\': size} def delete_path(self, path: str): parts = path.split(\'/\') current = self.file_system nodes = [] for part in parts[1:]: nodes.append(current) if part not in current: raise FileNotFoundError(f\\"Path \'{path}\' does not exist.\\") current = current[part] del nodes[-1][parts[-1]] def list_files(self, path: str) -> list: parts = path.split(\'/\') current = self.file_system for part in parts[1:]: if part not in current: raise FileNotFoundError(f\\"Path \'{path}\' does not exist.\\") current = current[part] return [f\\"{path}/{key}\\" for key in current.keys() if not key.startswith(\'_\')] def directory_size(self, path: str) -> int: parts = path.split(\'/\') current = self.file_system for part in parts[1:]: if part not in current: raise FileNotFoundError(f\\"Path \'{path}\' does not exist.\\") current = current[part] return self._calculate_directory_size(current) def _calculate_directory_size(self, current: dict) -> int: total_size = 0 for key in current: if not key.startswith(\'_\'): if current[key][\'_is_dir\']: total_size += self._calculate_directory_size(current[key]) else: total_size += current[key][\'_size\'] return total_size"},{"question":"-----Input----- You are given a list of integers where the length of the list is a maximum of 10^5. Your task is to process multiple queries on this list. Each query consists of an integer x, and you need to output the number of elements in the list that are greater than x. -----Output----- For each query, print a single integer representing the number of elements greater than the given number. -----Example----- Input: 6 1 2 3 4 5 6 3 2 4 5 Output: 4 2 1","solution":"def count_elements_greater_than_x(arr, queries): For each query, return the number of elements in arr greater than the given number in the query. arr.sort() results = [] for x in queries: left = 0 right = len(arr) while left < right: mid = (left + right) // 2 if arr[mid] <= x: left = mid + 1 else: right = mid results.append(len(arr) - left) return results"},{"question":"Consider an online marketplace where sellers can list their products and buyers can place bids to purchase them. Each product has a unique identifier and a base price set by the seller. Buyers can place multiple bids on different products, and each bid includes the bidder’s ID, the product ID, and the bid amount. Your task is to determine the highest bid for each product and output it in a specific format. ------ Input Format ------ - The first line of input contains two integers, P and B, where P is the number of products and B is the number of bids. - The next P lines each contain a product ID and the base price of the product. - The next B lines each contain a bidder ID, product ID, and bid amount. ------ Output Format ------ For each product, output its ID and the highest bid amount for that product. If no bids are placed on a product, output the product’s base price as the highest bid amount. ------ Constraints ------ 1 ≤ P ≤ 10^{5} 1 ≤ B ≤ 10^{6} 1 ≤ text{Product ID}, text{Bidder ID} ≤ 10^{9} 1 ≤ text{Base Price}, text{Bid Amount} ≤ 10^{9} ------ Sample Input ------ 3 5 101 1000 102 1500 103 2000 1 101 1200 2 101 1300 3 102 1600 4 103 2200 5 102 1700 ------ Sample Output ------ 101 1300 102 1700 103 2200 ------ Explanation ------ - Product 101 has two bids: 1200 and 1300. The highest is 1300. - Product 102 has two bids: 1600 and 1700. The highest is 1700. - Product 103 has one bid: 2200. The highest is 2200. If a product had no bids, its base price would be considered the highest bid amount.","solution":"def highest_bids(P, B, products, bids): Determines the highest bid for each product. :param P: Integer, number of products :param B: Integer, number of bids :param products: List of tuples, each containing (product_id, base_price) :param bids: List of tuples, each containing (bidder_id, product_id, bid_amount) :return: List of tuples, each containing (product_id, highest_bid_amount) highest_bids = {prod_id: base_price for prod_id, base_price in products} for bid in bids: _, product_id, bid_amount = bid if product_id in highest_bids: highest_bids[product_id] = max(highest_bids[product_id], bid_amount) return [(prod_id, highest_bid) for prod_id, highest_bid in highest_bids.items()]"},{"question":"Given a sequence of integers, you are required to find the length of the longest subsequence such that the absolute difference between any two consecutive elements is either 1 or 2. Input Format The first line contains an integer n, representing the number of elements in the sequence. The second line contains n space-separated integers describing the sequence. Constraints 1 leq n leq 10^5 Each element of the sequence is an integer ranging from 1 to 10^5. Output Format Output a single integer representing the length of the longest subsequence following the given conditions. Sample Input 0 6 1 2 3 4 5 6 Sample Output 0 6 Sample Input 1 8 1 2 5 8 9 10 11 12 Sample Output 1 5 Explanation 0 For the first test case, the whole sequence 1, 2, 3, 4, 5, 6 is a valid subsequence, with each pair of consecutive elements having an absolute difference of 1. Therefore, the length is 6. Explanation 1 For the second test case, one of the longest valid subsequences is 8, 9, 10, 11, 12, where the absolute difference between any two consecutive elements is either 1 or 2. Therefore, the length is 5.","solution":"def longest_valid_subsequence(n, sequence): if n == 0: return 0 longest = 1 current_length = 1 for i in range(1, n): if abs(sequence[i] - sequence[i-1]) <= 2: current_length += 1 if current_length > longest: longest = current_length else: current_length = 1 return longest"},{"question":"Maximum Length of Consecutive Subsequence Given an array of distinct integers, you need to determine the length of the longest consecutive elements sequence. The consecutive sequence is a sequence of integers that follow each other in order without any gaps. For example, for the array [100, 4, 200, 1, 3, 2], the longest consecutive elements sequence is [1, 2, 3, 4] which has a length of 4. Input The input consists of a single test case of the following format: n a_1 a_2 ... a_n Where n is the number of elements in the array, which is an integer such that 1 leq n leq 100000. Each a_i is an element of the array, which is an integer such that -10^9 leq a_i leq 10^9. All elements in the array are distinct. Output Output a single integer denoting the length of the longest consecutive elements sequence. Sample Input 1 6 100 4 200 1 3 2 Sample Output 1 4 Sample Input 2 9 1 9 3 10 4 20 2 6 5 Sample Output 2 6 Sample Input 3 4 8 20 -2 -1 Sample Output 3 2 Explanation In Sample Input 1, the longest consecutive subsequence is [1, 2, 3, 4], so the output is 4. In Sample Input 2, the longest consecutive subsequence is [1, 2, 3, 4, 5, 6], so the output is 6. In Sample Input 3, the longest consecutive subsequence is [-2, -1], so the output is 2.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest consecutive elements sequence in the array. if not arr: return 0 arr_set = set(arr) max_length = 0 for num in arr: if num - 1 not in arr_set: # find the start of a sequence current_num = num current_length = 1 while current_num + 1 in arr_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given a 2D grid of size n x m filled with either 0 or 1, where 0 represents empty land and 1 represents a building, find the minimum distance from any building to any empty land. The distance between two cells (x1, y1) and (x2, y2) is equal to |x1 - x2| + |y1 - y2|. You can move up, down, left, or right. Write a program that outputs the minimum distance from any building to any empty land in the grid. If no such distance exists, return -1. Input: - The first line contains two integers n and m, denoting the number of rows and columns in the grid respectively. - The next n lines contain m integers each, representing the grid. Output: - Output a single integer, the minimum distance from any building to any empty land, or -1 if no such distance exists. Constraints: 1 ≤ n, m ≤ 1000 SAMPLE INPUT 3 3 1 0 1 0 0 0 1 0 1 SAMPLE OUTPUT 1 Explanation: The minimum distance from a building to any empty land is 1 as we can see the buildings in the four corners can reach the center land cell in one move.","solution":"from collections import deque def min_distance_from_building(n, m, grid): Find the minimum distance from any building to any empty land in the grid. if not grid or n == 0 or m == 0: return -1 def bfs(start_x, start_y): visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(start_x, start_y, 0)]) visited[start_x][start_y] = True min_distance = float(\'inf\') while queue: x, y, dist = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True if grid[nx][ny] == 0: min_distance = min(min_distance, dist + 1) elif grid[nx][ny] == 1: queue.append((nx, ny, dist + 1)) return min_distance min_dist = float(\'inf\') for i in range(n): for j in range(m): if grid[i][j] == 1: min_dist = min(min_dist, bfs(i, j)) return min_dist if min_dist != float(\'inf\') else -1"},{"question":"Given a string s and an integer k, the task is to remove k characters from the string such that the resulting string is the largest lexicographically possible. You need to complete the function `removeKChars` which takes a string `s` and an integer `k` as input and returns the largest lexicographical string possible after removing k characters. Example 1: Input: s = \\"abcde\\" k = 2 Output: \\"cde\\" Explanation: By removing \'a\' and \'b\', the remaining string \\"cde\\" is the largest lexicographically. Example 2: Input: s = \\"dcba\\" k = 1 Output: \\"dcb\\" Explanation: By removing \'a\', the remaining string \\"dcb\\" is the largest lexicographically. Your Task: The task is to complete the function `removeKChars(s, k)` which returns the largest lexicographical possible string after k characters are removed. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= |s| <= 10000 0 <= k < |s|","solution":"def removeKChars(s, k): Removes k characters from the string s such that the resulting string is the largest lexicographically possible. stack = [] for char in s: while k > 0 and stack and stack[-1] < char: stack.pop() k -= 1 stack.append(char) # If k characters are not removed, remove from the end of the stack while k > 0: stack.pop() k -= 1 return \'\'.join(stack)"},{"question":"Timothy loves palindromes. A palindrome is a word or phrase that is the same forwards and backwards. However, Timothy is only interested in substring palindromes, which means any possible subsequence that itself is a palindrome. Given a string s consisting of lowercase English letters, Timothy wants to find the longest palindromic subsequence in s. A subsequence of s is a sequence in which some characters are removed or kept without changing the order of characters in s. Write a program to determine the length of the longest palindromic subsequence in s. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. This is followed by the test cases description. Each of the next t lines contains a string s (1 leq |s| leq 1000) — the string for which you are to determine the longest palindromic subsequence. -----Output----- For each test case, output a single integer — the length of the longest palindromic subsequence in the given string. -----Examples----- Input 3 bbbab cbbd aabcdcb Output 4 2 5 -----Explanation----- In the first test case, the string \'bbbab\' has the longest palindromic subsequence \'bbbb\', which has length 4. In the second test case, the string \'cbbd\' has the longest palindromic subsequence \'bb\', which has length 2. In the third test case, the string \'aabcdcb\' has the longest palindromic subsequence \'abcdcba\' or \'bcdcb\', both of which have length 5.","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in a given string s. n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_longest_palindromic_subsequences(t, strings): Returns a list of lengths of the longest palindromic subsequences for each of the t strings. results = [] for s in strings: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"John is fascinated by strings and loves to play around with them. He recently learned about palindromes and now he wants to find the longest palindrome that can be formed by rearranging the characters of a given string. Your task is to write a function that takes a single string as input and returns the longest length of a palindrome that can be formed using any subset of the characters in the string. If no palindrome can be formed, return 0. Input format A single line containing a string S, consisting of lowercase and uppercase English letters. Output format Print a single integer representing the length of the longest palindrome that can be formed using any subset of characters of the given string. Constraints 1 ≤ |S| ≤ 1000 SAMPLE INPUT abccccdd SAMPLE OUTPUT 7 Explanation: One possible palindrome that can be formed is \'dccaccd\' which has a length of 7.","solution":"def longest_palindrome_length(s): from collections import Counter char_counts = Counter(s) length = 0 odd_found = False for count in char_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Вам дана строка, состоящая из строчных букв латинского алфавита. Необходимо разбить эту строку на минимальное количество подстрок, которые будут палиндромами. Палиндром — это строка, которая читается одинаково слева направо и справа налево. Например, строка \\"racecar\\" является палиндромом, а строка \\"hello\\" — нет. Напишите программу, которая считает наименьшее количество палиндромных подстрок, на которое можно разбить данную строку. Выведите все возможные способы такого разбиения, если их несколько. -----Входные данные----- Входные данные состоят из одной строки s, которая непустая и содержит только строчные буквы латинского алфавита. Длина строки не превышает 100 символов. -----Выходные данные----- Выведите минимальное количество палиндромных подстрок, на которое можно разбить данную строку. В каждой из следующих строк выведите одно из возможных разбиений. Если возможных ответов несколько, разрешается вывести любые из них. -----Примеры----- Входные данные aab Выходные данные 2 aa b Входные данные racecarannakayak Выходные данные 3 racecar anna kayak Входные данные banana Выходные данные 2 b anana","solution":"def is_palindrome(s): return s == s[::-1] def min_palindrome_partition(s): n = len(s) dp = [[0 for _ in range(n)] for _ in range(n)] cut = [0 for _ in range(n)] for i in range(n): min_cut = i for j in range(i + 1): if s[j:i + 1] == s[j:i + 1][::-1]: min_cut = 0 if j == 0 else min(min_cut, cut[j - 1] + 1) cut[i] = min_cut return cut[-1] + 1 def generate_partitions(s): def dfs(start, current_partition, result): if start >= len(s): result.append(current_partition[:]) return for end in range(start, len(s)): if is_palindrome(s[start:end + 1]): current_partition.append(s[start:end + 1]) dfs(end + 1, current_partition, result) current_partition.pop() result = [] dfs(0, [], result) min_cut = min_palindrome_partition(s) partitions = [partition for partition in result if len(partition) == min_cut] return min_cut, partitions # Example Usage: # print(min_palindrome_partition(\\"aab\\")) # print(generate_partitions(\\"aab\\"))"},{"question":"You are given a string s and your task is to find the smallest lexicographical rotation of the string. A rotation of a string is a string obtained by moving some number of characters from the front of the string to the end of the string. For example, the rotations of \\"abcde\\" are: \\"abcde\\", \\"bcdea\\", \\"cdeab\\", \\"deabc\\", and \\"eabcd\\". Among these, \\"abcde\\" is the smallest lexicographically. -----Input----- The input consists of a single string s containing only lowercase letters (1 le |s| le 10^5). -----Output----- Output the smallest lexicographical rotation of the string s. -----Examples----- Sample Input 1: bca Sample Output 1: abc Sample Input 2: zxy Sample Output 2: xyz","solution":"def smallest_lexicographical_rotation(s): Returns the smallest lexicographical rotation of the string s. min_rotation = s for i in range(1, len(s)): rotation = s[i:] + s[:i] if rotation < min_rotation: min_rotation = rotation return min_rotation"},{"question":"A famous retail company is conducting a clearance sale and they want to minimize losses by discounting the prices of items based on the frequency of sales in the past month. If an item has been sold less frequently, it will receive a higher discount. The company has a list of items sold with their frequencies and wants to apply a tiered discount system as follows: 1. Items sold 1-5 times receive a 40% discount. 2. Items sold 6-10 times receive a 30% discount. 3. Items sold 11-20 times receive a 20% discount. 4. Items sold more than 20 times receive a 10% discount. Given a list of items with their original prices and sales frequencies, calculate the final price of each item after applying the appropriate discount. Input: - An integer N representing the number of items. - N lines follow, each containing the item name, original price, and sales frequency. Output: - N lines containing the item name and its final price after the discount, rounded to 2 decimal places. Example Input: 4 Laptop 1000 3 Smartphone 500 15 Tablet 300 25 Headphones 150 7 Example Output: Laptop 600.00 Smartphone 400.00 Tablet 270.00 Headphones 105.00 Explanation: 1. Laptop: Sold 3 times, it gets a 40% discount. Final price = 1000 * 0.60 = 600.00 2. Smartphone: Sold 15 times, it gets a 20% discount. Final price = 500 * 0.80 = 400.00 3. Tablet: Sold 25 times, it gets a 10% discount. Final price = 300 * 0.90 = 270.00 4. Headphones: Sold 7 times, it gets a 30% discount. Final price = 150 * 0.70 = 105.00","solution":"def calculate_final_prices(items): final_prices = [] for item in items: name, original_price, frequency = item original_price = float(original_price) frequency = int(frequency) if 1 <= frequency <= 5: discount_rate = 0.40 elif 6 <= frequency <= 10: discount_rate = 0.30 elif 11 <= frequency <= 20: discount_rate = 0.20 else: discount_rate = 0.10 final_price = original_price * (1 - discount_rate) final_prices.append((name, round(final_price, 2))) return final_prices"},{"question":"Daniel is participating in a game where he has to navigate through a grid of size n times m. The grid cells contain non-negative integers representing the cost to step on that cell. Daniel starts at the top-left corner and needs to reach the bottom-right corner. He can only move to the right or downward at any step. Your task is to help Daniel find the minimum cost path from the top-left to the bottom-right corner of the grid. Write a function `minCostPath` that takes as input the grid of costs and returns the minimum cost to reach the bottom-right corner from the top-left corner. Input Format The first line contains two integers n and m — the dimensions of the grid. The next n lines contain m space-separated integers each, representing the cost of each cell. Constraints 1 leq n, m leq 1000 0 leq grid[i][j] leq 100 Output Format Output a single integer representing the minimum cost to reach the bottom-right corner of the grid. Sample Input 3 3 1 3 1 1 5 1 4 2 1 Sample Output 7 Explanation The path with the minimum cost is 1 to 3 to 1 to 1 to 1, with a total cost of 7.","solution":"def minCostPath(grid): Finds the minimum cost path from the top-left to the bottom-right corner in a grid. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Initialize a 2D dp array with same dimensions as grid dp = [[0 for _ in range(m)] for _ in range(n)] # Fill the dp array for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"-----Input----- The input consists of two integers N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 100), followed by an NxM grid of characters (\'A\' to \'Z\'). Each row of the grid is provided on a new line without spaces. -----Output----- Output \\"SAFE\\" if no two adjacent cells (horizontally, vertically, or diagonally) in the grid have the same character. Otherwise, output \\"ALERT\\". -----Examples----- Input 2 2 AB CD Output SAFE Input 3 3 ABC DEF GHI Output SAFE Input 3 3 AAB CDE FGH Output ALERT Input 4 4 ABCD EFGH IJKL MNOP Output SAFE Input 3 3 ACC BDE FGG Output ALERT","solution":"def check_grid_safety(n, m, grid): def is_adjacent_same(i, j): # Check adjacent cells for similarities directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == grid[i][j]: return True return False for i in range(n): for j in range(m): if is_adjacent_same(i, j): return \\"ALERT\\" return \\"SAFE\\""},{"question":"You are organizing a coding competition and want to determine the best way to assign rooms for participants based on their scores. Each participant has a unique score and you want to ensure that the difference between the highest and lowest scores in each room is minimized. Given a list of participant scores, you need to find the maximum possible score difference in a single room when the participants are evenly distributed across K rooms. -----Constraints----- - All values in input are integers. - 1 leq K leq N leq 2 times 10^5 - 0 leq Score_i leq 10^9 (1 leq i leq N) -----Input----- Input is given from Standard Input in the following format: N K Score_1 Score_2 ... Score_N -----Output----- Print the maximum possible score difference in a single room after distributing the participants. -----Sample Input----- 6 3 100 200 300 450 500 750 -----Sample Output----- 250 - The best way to assign rooms is as follows: Room 1: [100, 200], Room 2: [300, 450], Room 3: [500, 750] The score differences are: - In Room 1: 200 - 100 = 100 - In Room 2: 450 - 300 = 150 - In Room 3: 750 - 500 = 250 Thus, the maximum possible score difference in any room is 250.","solution":"def max_score_difference_in_room(N, K, scores): Find the maximum possible score difference in a single room when the participants are evenly distributed across K rooms. Args: N : int : number of participants. K : int : number of rooms. scores : list : list of participant scores. Returns: int : maximum possible score difference in a single room. scores.sort() # Initialize max difference max_diff = 0 # Calculate the length of each room\'s group group_size = (N + K - 1) // K for i in range(0, N, group_size): # Calculate difference for each group (room) current_diff = scores[min(i + group_size - 1, N - 1)] - scores[i] max_diff = max(max_diff, current_diff) return max_diff"},{"question":"Given a string s, you need to reverse the string while preserving the positions of the spaces. For example, if the input is \\"a b c d e\\", then the output should be \\"e d c b a\\" (spaces are kept in the original positions but other characters are reversed). Write a function `reverse_string_preserve_spaces(s)` that given a string `s`, returns a new string with characters reversed but spaces in their original positions. Constraints: - The string `s` will have at most length 1000. - `s` will consist of lower case English letters and spaces only. -----Input----- - A single string `s` of length between 1 and 1000. -----Output----- - A single string where non-space characters are reversed but spaces remain in their original positions. -----Example----- Input \\"a b c d e\\" Output \\"e d c b a\\" Input \\"ab c d ef\\" Output \\"fe d c ba\\" Input \\"abc def\\" Output \\"fed cba\\" -----Explanation----- In the first example, reversing \\"abcde\\" and preserving the spaces from the original string, we get \\"e d c b a\\". In the second example, reversing \\"abcdef\\" and preserving the positions of spaces, we get \\"fe d c ba\\". In the third example, reversing \\"abcdef\\" and preserving the spaces, we get \\"fed cba\\".","solution":"def reverse_string_preserve_spaces(s): Returns the string with characters reversed but spaces in their original positions. # Extract the non-space characters and reverse them chars = [c for c in s if c != \' \'] chars.reverse() # Rebuild the string with spaces in their original positions result = [] char_index = 0 for c in s: if c == \' \': result.append(\' \') else: result.append(chars[char_index]) char_index += 1 return \'\'.join(result)"},{"question":"You are given a grid of dimensions N x M where each cell can either be a 1 or a 0. Your task is to find the number of distinct islands in the grid. An island is a group of adjacent 1s connected horizontally or vertically (not diagonally). Two islands are considered distinct if they are connected to different groups of 1s and separated by 0s. ------ Input ------ The first line of the input file contains two integers N and M (1 ≤ N, M ≤ 50) representing the number of rows and columns, respectively. Each of the next N lines contains M characters, each being either \'1\' or \'0\', representing the grid layout. ------ Output ------ Output a single integer representing the number of distinct islands in the grid. ----- Sample Input 1 ------ 4 5 11000 11000 00100 00011 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ In the first test case there are three islands: 1. The top-left island with 1s at positions (0,0), (0,1), (1,0), (1,1). 2. The middle island with 1 at position (2,2). 3. The bottom-right island with 1s at positions (3,3), (3,4). ----- Sample Input 2 ------ 3 3 000 010 000 ----- Sample Output 2 ------ 1 ----- Explanation 2 ------ In the second test case there is a single island with one 1 at position (1,1).","solution":"def num_distinct_islands(grid): def dfs(x, y): stack = [(x, y)] grid[x][y] = \'0\' while stack: cx, cy = stack.pop() for nx, ny in [(cx - 1, cy), (cx + 1, cy), (cx, cy - 1), (cx, cy + 1)]: if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == \'1\': grid[nx][ny] = \'0\' stack.append((nx, ny)) if not grid or not grid[0]: return 0 N = len(grid) M = len(grid[0]) islands = 0 for i in range(N): for j in range(M): if grid[i][j] == \'1\': dfs(i, j) islands += 1 return islands"},{"question":"Write a function that receives a string representing a person\'s full name in the format \\"First Last\\" and returns the initials in uppercase. Ensure your solution handles cases where input names may contain non-alphabetic characters and multiple spaces, but guarantees the format provided. Examples: ```python \'John Doe\' -> \'J.D.\' \'Jane Mary Smith\' -> \'J.M.S.\' \' Mario Rossi \' -> \'M.R.\' \'Charles\' -> \'C.\' ```","solution":"def get_initials(full_name: str) -> str: Returns the initials of a person\'s full name in uppercase. :param full_name: A string representing a person\'s full name in the format \\"First Last\\" :return: A string with the initials in uppercase followed by dots. # Split by spaces and filter out any empty strings parts = list(filter(None, full_name.split(\' \'))) # Extract the first letter of each part, convert to uppercase, and join with dots initials = \'.\'.join([part[0].upper() for part in parts]) # Add a trailing dot return f\'{initials}.\'"},{"question":"Paul is training for a marathon and keeps a log of the distances he runs each day. He wants to know the length of his longest consecutive subarray of days where the distances he ran were strictly increasing every day. For example, if he ran 1km on the first day, 2km on the second day, and 3km on the third day, then this is a strictly increasing subarray. However, if he ran 1km on the first day, 2km on the second day, and 2km on the third day, then it is not. Write a function that takes an array of integers representing the distances Paul ran each day and returns the length of the longest strictly increasing consecutive subarray. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of days in Paul\'s log. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the distances Paul ran each day. Output Print a single integer — the length of the longest strictly increasing consecutive subarray. Examples Input 5 1 2 3 2 3 Output 3 Input 6 5 6 6 7 8 9 Output 4 Input 8 2 2 2 2 2 2 2 2 Output 1 Note In the first example, the longest strictly increasing subarray is the first three days: 1, 2, 3. In the second example, the longest strictly increasing subarray is the last four days: 6, 7, 8, 9. In the third example, none of the distances are strictly increasing, so the longest strictly increasing subarray has length 1 (every single day by itself can be considered as a subarray).","solution":"def longest_increasing_subarray(days, distances): if days == 0: return 0 if days == 1: return 1 max_length = 1 current_length = 1 for i in range(1, days): if distances[i] > distances[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A sports competition recorded the times taken by participants to complete a 100-meter race. Create a program that processes this time data, categorizes it into performance ranges, and outputs a histogram. The performance ranges are divided in 5-second increments, and each range is represented by the number of participants as \'-\'. However, if no participant is in a particular range, output only the range heading. Input The input is given in the following format: n t1 t2 :: tn The number of participants n (1 ≤ n ≤ 50) is given on the first line, and each subsequent line contains the time ti (10.0 ≤ ti ≤ 50.0, up to one decimal place) for the i-th participant. Output Display the histogram in the following format: Line 1: Heading \\"10-14:\\" followed by \'-\' for participants whose times are ≥ 10.0 sec and < 15.0 sec Line 2: Heading \\"15-19:\\" followed by \'-\' for participants whose times are ≥ 15.0 sec and < 20.0 sec Line 3: Heading \\"20-24:\\" followed by \'-\' for participants whose times are ≥ 20.0 sec and < 25.0 sec Line 4: Heading \\"25-29:\\" followed by \'-\' for participants whose times are ≥ 25.0 sec and < 30.0 sec Line 5: Heading \\"30-34:\\" followed by \'-\' for participants whose times are ≥ 30.0 sec and < 35.0 sec Line 6: Heading \\"35-39:\\" followed by \'-\' for participants whose times are ≥ 35.0 sec and < 40.0 sec Line 7: Heading \\"40-44:\\" followed by \'-\' for participants whose times are ≥ 40.0 sec and < 45.0 sec Line 8: Heading \\"45-49:\\" followed by \'-\' for participants whose times are ≥ 45.0 sec and < 50.0 sec Example Input 8 12.5 17.8 22.4 18.9 29.0 32.1 45.5 41.3 Output 10-14:- 15-19:-- 20-24:- 25-29:- 30-34:- 35-39: 40-44:- 45-49:-","solution":"def histogram(times): Generate a histogram of the times based on predefined ranges # Define ranges ranges = [ (10, 15), (15, 20), (20, 25), (25, 30), (30, 35), (35, 40), (40, 45), (45, 50) ] # Initialize histogram dictionary histogram = {f\\"{start}-{end-1}\\": 0 for start, end in ranges} # Populate histogram for time in times: for start, end in ranges: if start <= time < end: histogram[f\\"{start}-{end-1}\\"] += 1 break # Generate histogram output result = [] for start, end in ranges: key = f\\"{start}-{end-1}\\" result.append(f\\"{key}:\\" + (\'-\' * histogram[key])) return \'n\'.join(result) def read_input(input_str): Read and parse the input string into a list of times lines = input_str.strip().split() n = int(lines[0]) # Number of participants times = [float(lines[i]) for i in range(1, n + 1)] return times def formatted_histogram(input_str): times = read_input(input_str) return histogram(times)"},{"question":"Given a list of strings, all of the same length, write a function that finds the longest common contiguous substring that appears in every string in the list. If there are multiple substrings with the same maximum length, return the one that appears first lexicographically. # Input - The first line contains an integer `n`, the number of strings. - The next `n` lines each contain a single string of equal length. # Output - Print the longest common contiguous substring that appears in every string in the list. If no such substring exists, print an empty string. # Constraints 1 ≤ n ≤ 100 1 ≤ length of each string ≤ 1000 The strings contain only lowercase English letters. # Sample Input ``` 3 abcde bcdef cdefg ``` # Sample Output ``` cde ```","solution":"def longest_common_contiguous_substring(strings): Returns the longest common contiguous substring that appears in every string in the list. If there are multiple substrings with the same maximum length, returns the one that appears first lexicographically. def is_common_substring(substr): for s in strings: if substr not in s: return False return True strings.sort() # Sort to make the lexicographical search easier base_string = strings[0] substrings = [] # Generate all possible substrings of the base string for length in range(1, len(base_string)+1): for start in range(0, len(base_string) - length + 1): substr = base_string[start:start+length] if is_common_substring(substr): substrings.append(substr) if not substrings: return \\"\\" substrings.sort(key=lambda x: (-len(x), x)) return substrings[0]"},{"question":"Megan loves solving puzzles, and recently she came across a captivating number puzzle game that involves finding the k-th smallest number in a union of two disjoint sorted lists. Given two sorted lists of integers, list1 and list2, and an integer k, Megan needs to determine the k-th smallest number among all the numbers in the two lists combined. -----Input----- The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the sizes of list1 and list2 respectively. The second line contains n integers, representing list1 (sorted in non-decreasing order). The third line contains m integers, representing list2 (sorted in non-decreasing order). The fourth line contains a single integer k (1 ≤ k ≤ n + m) — the position of the k-th smallest number in the union of the lists. -----Output----- Print a single integer — the k-th smallest number in the union of list1 and list2. -----Examples----- Input 3 4 1 4 7 2 5 6 8 5 Output 6 Input 2 3 1 3 2 4 7 4 Output 4 -----Note----- In the first sample, the combined sorted list is [1, 2, 4, 5, 6, 7, 8], and the 5-th smallest number in this union is 6. In the second sample, the combined sorted list is [1, 2, 3, 4, 7], and the 4-th smallest number in this union is 4.","solution":"def find_kth_smallest(n, m, list1, list2, k): Finds the k-th smallest number in the union of two sorted lists list1 and list2. combined = [] i = j = 0 # Merge the lists until we reach k elements while len(combined) < k: if i < n and (j >= m or list1[i] <= list2[j]): combined.append(list1[i]) i += 1 else: combined.append(list2[j]) j += 1 return combined[k - 1]"},{"question":"You are provided with a list of N integers. Your task is to find if there exists a subset of these integers such that the sum of the elements in the subset is equal to K. If such a subset exists, return \\"YES\\", otherwise return \\"NO\\". -----Input----- - The first line contains two space-separated integers N and K. - The second line contains N space-separated integers representing the list of integers. -----Output----- Output a single line containing \\"YES\\" or \\"NO\\". -----Constraints----- - 1 le N le 20 - -10^4 le each integer in the list le 10^4 - -10^4 le K le 10^4 -----Example Input----- 4 0 -7 -3 2 5 -----Example Output----- YES -----Example Input----- 3 8 1 2 4 -----Example Output----- NO","solution":"def subset_sum_exists(N, K, numbers): Determines if there exists a subset of the given numbers such that their sum is equal to K. Parameters: N (int): Number of elements in the list. K (int): Target sum. numbers (list): List of integers. Returns: str: \\"YES\\" if such a subset exists, \\"NO\\" otherwise. def dfs(index, current_sum): if current_sum == K: return True if index >= N: return False # Include the current number in the subset if dfs(index + 1, current_sum + numbers[index]): return True # Exclude the current number from the subset if dfs(index + 1, current_sum): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Given a string, your task is to determine the minimum number of operations required to convert the string into a palindrome. In one operation, you can remove a character from the string. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Function Signature: ``` def min_removals_to_palindrome(s: str) -> int: pass ``` Input: - A single string `s` (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. Output: - An integer representing the minimum number of characters that need to be removed to convert the string into a palindrome. Examples: Input: ``` abca ``` Output: ``` 1 ``` Input: ``` racecar ``` Output: ``` 0 ``` Input: ``` abcdef ``` Output: ``` 5 ```","solution":"def min_removals_to_palindrome(s: str) -> int: Determine the minimum number of operations required to convert the string into a palindrome. n = len(s) # Function to find the length of the longest palindromic subsequence def longest_palindromic_subsequence(seq): # Create a table to store results of subproblems dp = [[0 for x in range(n)] for y in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if seq[i] == seq[j] and cl == 2: dp[i][j] = 2 elif seq[i] == seq[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] # Length of string len_of_s = len(s) # Length of longest palindromic subsequence in s length_of_lps = longest_palindromic_subsequence(s) # Minimum number of removals is difference of length of string and length of LPS return len_of_s - length_of_lps"},{"question":"Given a 2D grid of size m x n filled with non-negative integers, find a path from the top-left corner to the bottom-right corner that minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Example 1: Input: grid = [[1,3,1], [1,5,1], [4,2,1]] Output: 7 Explanation: The path 1→3→1→1→1 minimizes the sum. Example 2: Input: grid = [[1,2,3], [4,5,6]] Output: 12 Explanation: The path 1→2→3→6 minimizes the sum. Your Task: You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function `minPathSum()` that takes a 2D list `grid` as parameter and returns an integer representing the minimum sum for the given 2D grid. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m, n ≤ 200 0 ≤ grid[i][j] ≤ 100","solution":"def minPathSum(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"In a grid-based city, there are three factories located at coordinates (x1, y1), (x2, y2), and (x3, y3). The city planner wants to ensure that a new road can be built so that the road passes through all three factories. Your task is to determine whether a single straight road can connect all three factories. Input Format: The first line of the input contains an integer N indicating the number of test cases. Each of the next N lines contains six integers, representing the coordinates of the factories- x1, y1, x2, y2, and x3, y3. Output Format: For each test case, print \\"CONNECTED\\" if it is possible to build such a road, otherwise print \\"DISCONNECTED\\" (without quotes). Constraints: 1 ≤ N ≤ 100 -1000 ≤ x1, y1, x2, y2, x3, y3 ≤ 1000 SAMPLE INPUT 3 0 0 1 1 2 2 1 5 3 5 5 5 -1 -1 0 1 1 1 SAMPLE OUTPUT CONNECTED CONNECTED DISCONNECTED","solution":"def are_three_points_collinear(x1, y1, x2, y2, x3, y3): Returns True if the points (x1, y1), (x2, y2), and (x3, y3) are collinear, otherwise False. # Calculate the area of the triangle formed by the three points # If the area is 0, then the points are collinear area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) return area == 0 def check_connectivity(test_cases): results = [] for case in test_cases: x1, y1, x2, y2, x3, y3 = case if are_three_points_collinear(x1, y1, x2, y2, x3, y3): results.append(\\"CONNECTED\\") else: results.append(\\"DISCONNECTED\\") return results"},{"question":"You are given a tree (a connected acyclic undirected graph) with n nodes. You need to answer q queries on this tree. Each query is characterized by an integer k and asks for the number of nodes in the tree with exactly k ancestors. Input The first line contains an integer t (1 ≤ t ≤ 100) denoting the number of test cases in the input. For each test case: - The first line contains n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5), the number of nodes in the tree and the number of queries, respectively. - The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. - The next q lines each contain an integer k (0 ≤ k < n) representing a query. Output For each test case, print the answer for each query k in the same order as the queries appear in the input. Example Input 1 5 3 1 2 1 3 2 4 2 5 0 1 2 Output 1 2 2","solution":"from collections import defaultdict, deque def solve(): import sys input = sys.stdin.read data = input().split() idx = 0 t = int(data[idx]) idx += 1 results = [] for _ in range(t): n = int(data[idx]) q = int(data[idx + 1]) idx += 2 edges = defaultdict(list) for __ in range(n - 1): u = int(data[idx]) v = int(data[idx + 1]) idx += 2 edges[u].append(v) edges[v].append(u) queries = [] for __ in range(q): k = int(data[idx]) idx += 1 queries.append(k) # BFS from node 1 to calculate depths root = 1 depth = [-1] * (n + 1) depth[root] = 0 queue = deque([root]) while queue: node = queue.popleft() for neighbor in edges[node]: if depth[neighbor] == -1: depth[neighbor] = depth[node] + 1 queue.append(neighbor) depth_count = defaultdict(int) for d in depth[1:]: # Ignore depth[0] depth_count[d] += 1 for k in queries: results.append(str(depth_count[k])) print(\\"n\\".join(results))"},{"question":"A software company is developing a new social media platform that requires efficient notification management. They have decided to implement a \\"Contributor of the Week\\" feature, where each user can like posts made by others, and the user with the highest number of likes in a given week will be declared the Contributor of the Week. To ensure fairness, they want to consider only unique users who liked the posts, as multiple likes from the same user should not be counted more than once. You are tasked with writing a function that takes in a list of posts and the corresponding likes, and returns the user ID of the Contributor of the Week. If there is a tie (i.e., more than one user with the highest unique like count), return the smallest user ID among those tied. Each post is represented as a pair of integers: the user ID of the person who made the post, and a list of user IDs who liked the post. A user ID is a positive integer. -----Input----- The input consists of: - An integer m (1 leq m leq 10^5) — the number of posts. - m lines follow, each containing a user ID and a list of integers representing the user IDs of those who liked the post. -----Output----- Output a single integer — the user ID of the Contributor of the Week. -----Examples----- Input 3 1 [2, 3, 4] 2 [3, 1, 5] 1 [2, 5] Output 1 Input 2 1 [2, 3] 2 [2, 4, 3] Output 2 Input 1 100 [101, 102, 103, 104] Output 100 -----Note----- In the first example, user 1\'s posts received likes from users 2, 3, 4, and 5 in total (considering unique likes), which is 4 unique likes. User 2 received likes from 3 unique users. Therefore, user 1 is the Contributor of the Week. In the second example, both users 1 and 2 have posts with 3 unique likes, but user 2 is chosen because they have the smallest ID among those tied. In the third example, there is only one user, making them the contributor of the week by default.","solution":"def contributor_of_the_week(m, posts): from collections import defaultdict user_likes = defaultdict(set) for post in posts: user_id, likes = post[0], post[1] user_likes[user_id].update(likes) max_unique_likes = 0 contributor_of_the_week = None for user_id, likes in user_likes.items(): unique_likes_count = len(likes) if (unique_likes_count > max_unique_likes) or (unique_likes_count == max_unique_likes and (contributor_of_the_week is None or user_id < contributor_of_the_week)): max_unique_likes = unique_likes_count contributor_of_the_week = user_id return contributor_of_the_week"},{"question":"Given a string `text` and a pattern `pattern`, write a program that counts the number of distinct substrings in `text` which are anagrams of `pattern`. Input The input consists of a single line containing two strings `text` and `pattern` separated by a space. Both strings are non-empty and consist of lowercase English letters. The length of `text` will be at most 10^5 and the length of `pattern` will be at most 10^3. Output Output a single integer which is the count of distinct substrings in `text` that are anagrams of `pattern`. Example Input cbaebabacd abc Output 2 Explanation The substrings \\"cba\\" and \\"bac\\" are anagrams of the pattern \\"abc\\". \\"cba\\" occurs at positions 0-2 and \\"bac\\" occurs at positions 6-8. Although \\"abc\\" is another valid anagram, it doesn\'t count as distinct occurrences because it is the pattern itself.","solution":"from collections import Counter def count_anagram_substrings(text, pattern): pattern_length = len(pattern) pattern_counter = Counter(pattern) text_length = len(text) if pattern_length > text_length: return 0 current_window_counter = Counter(text[:pattern_length - 1]) unique_anagrams = set() for i in range(pattern_length - 1, text_length): current_window_counter[text[i]] += 1 window_start_index = i - pattern_length + 1 if current_window_counter == pattern_counter: unique_anagrams.add(text[window_start_index:i+1]) current_window_counter[text[window_start_index]] -= 1 if current_window_counter[text[window_start_index]] == 0: del current_window_counter[text[window_start_index]] return len(unique_anagrams)"},{"question":"Palindrome Index Given a string of lowercase letters, determine the index of a character that can be removed to make the string a palindrome. If the string is already a palindrome, return `-1`. If there is more than one valid answer, return the smallest index. Function Description Complete the `palindromeIndex` function in the editor below. `palindromeIndex` has the following parameter(s): - `string s`: a string to analyze Returns - int: the index of the character to remove or `-1` if the string is already a palindrome Input Format A single string of lowercase letters. Constraints 1. 1 leq |s| leq 100005 Output Format Output the integer index of the character to remove or `-1` if the string is already a palindrome. Sample Input ``` aaab baa aaa ``` Sample Output ``` 3 0 -1 ``` Explanation 1. Removing the character at index `3` from `aaab` results in the palindrome `aaa`. 2. Removing the character at index `0` from `baa` results in the palindrome `aa`. 3. The string `aaa` is already a palindrome, so the function returns `-1`.","solution":"def is_palindrome(s): return s == s[::-1] def palindromeIndex(s): if is_palindrome(s): return -1 start, end = 0, len(s) - 1 while start < end: if s[start] != s[end]: if is_palindrome(s[start+1:end+1]): return start elif is_palindrome(s[start:end]): return end else: return -1 start += 1 end -= 1 return -1"},{"question":"Given a list of integers, find all unique pairs of elements (a, b) such that their sum is equal to a given target number. The pairs (a, b) and (b, a) are considered the same and should only be counted once. Return the list of unique pairs. Note: - The elements in each pair should be in non-decreasing order. - The output list of pairs should be sorted in non-decreasing order based on the first element of each pair. - If no such pairs exist, return an empty list. Example: Input: ``` numbers = [1, 5, 3, 2, 4, 5, -1, 0] target = 4 ``` Output: ``` [[-1, 5], [0, 4], [1, 3]] ``` Explanation: The pairs that sum up to 4 are (1, 3), (5, -1), (4, 0), and (5, -1). Since (5, -1) is repeated, it is only counted once. Function Signature: ```python def find_pairs(numbers: List[int], target: int) -> List[List[int]]: pass ``` Write a function that solves the problem according to the requirements above.","solution":"from typing import List def find_pairs(numbers: List[int], target: int) -> List[List[int]]: Finds all unique pairs of elements (a, b) such that their sum is equal to a given target number. found_pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: found_pairs.add(tuple(sorted((number, complement)))) seen.add(number) unique_pairs = [list(pair) for pair in sorted(found_pairs)] return unique_pairs"},{"question":"You are given an n × m grid filled with lowercase letters. Your task is to find the longest increasing path in the grid. An increasing path is a sequence of cells such that each cell contains a letter that comes after the previous cell\'s letter in alphabetical order, and you can only move up, down, left, or right at each step. Input The first line contains two positive integers n and m (1 ≤ n, m ≤ 100). The following n lines consist of m lowercase letters each, describing the grid. Output Output a single integer — the length of the longest increasing path in the grid. Examples Input 3 4 abcd bcde cdef Output 6 Input 2 2 zx yw Output 2","solution":"def longest_increasing_path(n, m, grid): def dfs(x, y): if dp[x][y]: return dp[x][y] max_len = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and ord(grid[nx][ny]) == ord(grid[x][y]) + 1: max_len = max(max_len, 1 + dfs(nx, ny)) dp[x][y] = max_len return max_len if not grid or not grid[0]: return 0 dp = [[0] * m for _ in range(n)] max_path_len = 0 for i in range(n): for j in range(m): max_path_len = max(max_path_len, dfs(i, j)) return max_path_len"},{"question":"A store offers discounts based on the day of the week and the total value of items bought. The discount policy is as follows: - On Monday, there is a 10% discount on the total price. - On Tuesday, no discount is given. - On Wednesday, if the total price exceeds 100, a 15% discount is given, otherwise, there is no discount. - On Thursday, a 20% discount is given. - On Friday, if the total price exceeds 50, a 5% discount is given. - On Saturday, a 25% discount is given. - On Sunday, no discount is given. You need to calculate the final price after applying the appropriate discount based on the given total price and day of the week. Input The first line contains a string representing the day of the week (e.g., \\"Monday\\", \\"Tuesday\\", etc.). The second line contains a single integer representing the total price of the items before any discounts (0 ≤ total price ≤ 10,000). Output Print the final price after applying the appropriate discount. The answer should be rounded to two decimal places. Examples Input Wednesday 120 Output 102.00 Input Saturday 80 Output 60.00 Note In the first example, since it is Wednesday and the total price exceeds 100, a 15% discount is applied. The final price is 120 - (15% of 120) = 102.00. In the second example, since it is Saturday, a 25% discount is applied irrespective of the total price. The final price is 80 - (25% of 80) = 60.00.","solution":"def calculate_final_price(day_of_week, total_price): Calculate the final price after applying the discount based on the given day of the week and total price before discount. Parameters: day_of_week (str): The day of the week. total_price (int or float): The total amount before discount. Returns: float: The final price after discount, rounded to two decimal places. if day_of_week == \\"Monday\\": discount = 0.10 elif day_of_week == \\"Tuesday\\": discount = 0.00 elif day_of_week == \\"Wednesday\\": if total_price > 100: discount = 0.15 else: discount = 0.00 elif day_of_week == \\"Thursday\\": discount = 0.20 elif day_of_week == \\"Friday\\": if total_price > 50: discount = 0.05 else: discount = 0.00 elif day_of_week == \\"Saturday\\": discount = 0.25 elif day_of_week == \\"Sunday\\": discount = 0.00 else: raise ValueError(\\"Invalid day of the week.\\") final_price = total_price * (1 - discount) return round(final_price, 2)"},{"question":"Alina loves arrays and numbers. She has a unique interest in subsequences. A subsequence of an array is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements. She has a list of integers and she wants to find out the length of the longest increasing subsequence (LIS) in the given list. Your task is to write a program that finds the length of the longest increasing subsequence. -----Input----- The input is a single test case. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000) — the elements of the list. -----Output----- Output a single integer, the length of the longest increasing subsequence. -----Examples----- Input 6 10 22 9 33 21 50 Output 4 Input 5 3 10 2 1 20 Output 3 -----Explanation----- In the first sample test case, the longest increasing subsequence is [10, 22, 33, 50], so the answer is 4. In the second sample test case, the longest increasing subsequence is [3, 10, 20], so the answer is 3.","solution":"def length_of_lis(nums): Returns the length of the longest increasing subsequence in the list nums. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function to determine if a given string can be rearranged such that no two adjacent characters are the same. If possible, return one such rearrangement. If not possible, return an empty string. # Input - The input will consist of a single string `s` (1 ≤ |s| ≤ 5000) containing only lowercase English letters. # Output - Return a string that is a valid rearrangement of `s` such that no two adjacent characters are the same. - If no such rearrangement exists, return an empty string. # Examples Input ``` aabb ``` Output ``` abab ``` Input ``` aaab ``` Output ``` (ab or ba) ``` Input ``` aaabb ``` Output ``` ababa ``` Input ``` aaaaa ``` Output ``` (empty string) ``` # Note In the first example, the input \\"aabb\\" can be rearranged as \\"abab\\" or \\"baba\\", where no two adjacent characters are the same. In the second example, the input \\"aaab\\" can be rearranged as \\"abaa\\" or \\"baaa\\", which only has one possible valid rearrangement. In the third example, the input \\"aaabb\\" can be rearranged as \\"ababa\\" or \\"babaa\\", which are valid rearrangements. In the fourth example, \\"aaaaa\\" cannot be rearranged because it\'s impossible for any arrangement not to have adjacent \\"a\\"s. Hence, the output is an empty string. # Constraints - The function should be optimal to handle the upper size limit efficiently.","solution":"import heapq from collections import Counter def reorganize_string(s): Rearranges the given string `s` such that no two adjacent characters are the same. If it\'s not possible, returns an empty string. if not s: return \\"\\" # Count the frequency of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \\"\\" result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Problem: You are given a string consisting of lowercase English letters. You can perform the following operation on the string multiple times: - Choose a non-empty substring that is a palindrome and replace it with a single character \'*\'. Your goal is to reduce the string to a single character using the minimum number of operations. Given multiple test cases, determine the minimum number of operations required to reduce each string to a single character. Input: - The first line contains an integer `t` (1 le t le 1000), the number of test cases. - Each of the next `t` lines contains a string `s` (1 le |s| le 1000), where `|s|` denotes the length of the string. Output: - For each test case, print a single line containing the minimum number of operations required to reduce the string to a single character. Examples: **Input:** ``` 3 abba abab aaa ``` **Output:** ``` 1 3 1 ``` Note: - In the first test case, the entire string \\"abba\\" is a palindrome, so it can be replaced with a single character \'*\' in one operation. - In the second test case, the operations could be \\"aba(b) -> *a(b) -> *(b) -> *\\". - In the third test case, the entire string \\"aaa\\" is a palindrome, so it can be replaced with a single character \'*\' in one operation.","solution":"def min_operations_to_single_char(s): Given a string, determines the minimum number of operations required to reduce the string to a single character by replacing palindromic substrings with \'*\'. # Check if the entire string is a palindrome if s == s[::-1]: return 1 # If the entire string is not a palindrome, return 2 # because we can always reduce it to one character in two steps: # 1. Replace any single character with \'*\'. # 2. Each remaining half can be reduced to \'*\' in further steps. return 2 def min_operations_for_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_operations_to_single_char(s)) return results"},{"question":"In a simulation of a wildlife reserve, we track the movement of animals using a grid. The grid is represented as an NxN matrix, where N is the size of the grid. A ranger is trying to determine if a specific animal, starting at a given position on the grid, can reach a destination position within a certain number of moves. The animal can move vertically, horizontally, or diagonally by one step in each move. Write a program to determine if the animal can reach its destination position within the allowed number of moves. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of four integers: N (1 ≤ N ≤ 100), X_start, Y_start, X_dest, Y_dest (1 ≤ X_start, Y_start, X_dest, Y_dest ≤ N) and K (0 ≤ K ≤ 1000). Output: For each test case, print \\"reachable\\"(without quotes) if the animal can reach the destination within K moves, otherwise print \\"unreachable\\"(without quotes). Constraints: 1 ≤ T ≤ 10 Example: Input: 3 5 1 1 3 3 2 5 1 1 5 5 4 5 1 1 5 5 3 Output: reachable reachable unreachable Explanation: In the first test case, the animal can move from (1,1) to (3,3) in two diagonal moves. In the second test case, the animal can reach from (1,1) to (5,5) in four diagonal moves. In the third test case, it is not possible to reach from (1,1) to (5,5) in just three moves.","solution":"def is_reachable(N, X_start, Y_start, X_dest, Y_dest, K): # Calculate the minimum number of moves required to reach the destination min_moves = max(abs(X_dest - X_start), abs(Y_dest - Y_start)) # Check if it\'s possible to reach within K moves if min_moves <= K: return \\"reachable\\" else: return \\"unreachable\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, X_start, Y_start, X_dest, Y_dest, K = case result = is_reachable(N, X_start, Y_start, X_dest, Y_dest, K) results.append(result) return results"},{"question":"Write a function that takes a string representing a sentence and returns the length of the shortest word in the sentence. The sentence will contain only letters and spaces, and there will be no leading or trailing spaces. Words are separated by a single space. Example: ``` \\"Hello there my friend\\" -> 2 \\"The quick brown fox\\" -> 3 \\"coding is fun\\" -> 2 \\"shortest\\" -> 8 ```","solution":"def shortest_word_length(sentence): Returns the length of the shortest word in the given sentence. words = sentence.split() if not words: return 0 return min(len(word) for word in words)"},{"question":"Write a function to determine if a given string is an isogram. # Input: - Line 1: A single integer n, the number of test cases. - Next n lines: Each contains a string to check. # Output: - For each test case, output \\"YES\\" if the input string is an isogram. Otherwise, output \\"NO\\". # Constraints: - 1 ≤ n ≤ 100 - 1 ≤ length of string ≤ 100 # Definitions: An isogram (or \\"non-pattern word\\") is a word or phrase without a repeating letter. # Sample Input: 3 machine isogram programming # Sample Output: YES YES NO","solution":"def is_isogram(s): Checks if the given string is an isogram. s = s.lower() return len(s) == len(set(s)) def process_isogram_cases(n, cases): Processes multiple cases to determine if each string is an isogram. Args: n: Number of test cases cases: List of strings to check Returns: List of results, \\"YES\\" if the string is an isogram, otherwise \\"NO\\" results = [] for case in cases: if is_isogram(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `rotate_matrix_clockwise(matrix)` that takes a square matrix (a 2D list) of size NxN and rotates it 90 degrees clockwise. Input: The function takes one argument, a 2D list `matrix` of size NxN where 1 ≤ N ≤ 100. There will be T test cases and for each test case, the function will be called separately. Output: For each test case, the function should return the rotated 2D list. Example: Input: 2 3 1 2 3 4 5 6 7 8 9 4 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] [[130, 90, 50, 10], [140, 100, 60, 20], [150, 110, 70, 30], [160, 120, 80, 40]] Explanation: Testcase 1: The matrix is rotated 90 degrees clockwise. ``` Original Matrix: 1 2 3 4 5 6 7 8 9 Rotated Matrix: 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix_clockwise(matrix): Rotates a square matrix 90 degrees clockwise. Args: matrix: List of List of integers representing the NxN matrix Returns: A new List of List of integers representing the rotated matrix N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"--- Parking Lot Management System --- As part of a smart city initiative, you are tasked with developing a parking lot management system. The parking lot has a certain number of parking spaces arranged in a single line. Each parking space can fit one car. You are given n queries, each representing an event in the parking lot: 1. A car arrives and needs to park. 2. A car leaves from a specified parking space. Your task is to simulate this system and produce the required output for each query. Implement the system so that it can handle up to a given number of events efficiently. -----Input----- The first line of input contains an integer n (1 leq n leq 10^5) — the number of queries. The following n lines describe the queries in one of the two formats: - \\"1\\" indicating that a car arrives and needs to park in the next available parking space. - \\"2 x\\" indicating that a car leaves the parking space at position x (1 leq x leq current maximum parking space index). -----Output----- For each \\"1\\" query, output the position of the parking space where the car parked. For each \\"2 x\\" query, there is no output. Assume initially the parking lot is empty. -----Examples----- Sample Input: 5 1 1 2 1 1 1 Sample Output: 1 2 1 3 Note: After the first \\"1\\" query, the first car parks in position 1. After the second \\"1\\" query, the second car parks in position 2. The \\"2 1\\" query frees up position 1. The third \\"1\\" query parks the third car in the next available position, which is back at position 1. The fourth \\"1\\" query parks the fourth car at position 3, as positions 1 and 2 are occupied.","solution":"class ParkingLot: def __init__(self): self.parking_slots = [] self.available_slots = set() self.last_position = 0 def park(self): if self.available_slots: position = min(self.available_slots) self.available_slots.remove(position) else: self.last_position += 1 position = self.last_position self.parking_slots.append(position) return position def leave(self, position): self.available_slots.add(position) if position in self.parking_slots: self.parking_slots.remove(position) def process_queries(self, queries): results = [] for query in queries: if query[0] == 1: results.append(self.park()) elif query[0] == 2: self.leave(query[1]) return results def handle_parking_lot_system(n, queries): parking_lot = ParkingLot() formatted_queries = [] for query in queries: query_split = list(map(int, query.split())) if query_split[0] == 1: formatted_queries.append([1]) else: formatted_queries.append([2, query_split[1]]) return parking_lot.process_queries(formatted_queries)"},{"question":"Given a positive integer n, you are tasked with determining whether n is a \\"Lucas number\\". The Lucas series is similar to the Fibonacci series, but it starts with 2 and 1. The first few Lucas numbers are 2, 1, 3, 4, 7, 11, 18, 29, ... Your task is to write a function to check if a given number n is a Lucas number or not. NOTE: If n is a Lucas number, then return \\"True\\" else return \\"False\\". Example 1: Input: n = 3 Output: \\"True\\" Explanation: 3 is a Lucas number because it is present in the series. Example 2: Input: n = 5 Output: \\"False\\" Explanation: 5 is not a Lucas number because it is not present in the series. Your Task: You don\'t need to read input or print anything. Complete the function isLucasNumber() which takes n as input parameter and returns \\"True\\" if n is a Lucas number else return \\"False\\". Expected Time Complexity: O(log(n)) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^9","solution":"def isLucasNumber(n): Checks if a given number n is a Lucas number. if n == 2 or n == 1: return \\"True\\" a, b = 2, 1 while b < n: a, b = b, a + b return \\"True\\" if b == n else \\"False\\""},{"question":"Takahashi is participating in a marathon training session to prepare for an upcoming marathon. On a given training day, he plans to run a total distance of D kilometers. However, marathon training is intense, and Takahashi needs to pace himself to avoid injuries. Therefore, he decides to divide the total distance into N segments, with each segment having a different length. The segments are numbered 1 through N. The goal is to minimize the maximum segment length, to ensure that no single segment is too long. Additionally, Takahashi can use up to M breaks, which allows him to further divide any of the segments into smaller sub-segments. Each break introduces an additional segment to the run. Given the constraints of the total distance D, the number of segments N, and the number of allowable breaks M, determine the minimum possible length of the longest segment after optimally using the breaks. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 10^5 - 0 ≤ M ≤ 10^18 - 1 ≤ D ≤ 10^12 -----Input----- Input is given from Standard Input in the following format: D N M -----Output----- Print the minimum possible length of the longest segment. -----Sample Input----- 100 10 5 -----Sample Output----- 10 By using the 5 breaks effectively, Takahashi can divide the distance into 15 segments, each of length 10 kilometers, ensuring no single segment is too long. Thus, the minimum possible length of the longest segment is 10.","solution":"def minimize_max_segment_length(D, N, M): Determine the minimum possible length of the longest segment after optimally using the breaks. Parameters: D (int): Total distance to be covered. N (int): Number of initial segments. M (int): Number of allowable breaks. Returns: int: Minimum possible length of the longest segment. # Binary search to find the optimal length of the longest segment def can_divide_with_max_length(length): total_segments = 0 for i in range(N): # Calculate the number of segments required for each one total_segments += (D // N + length - 1) // length - 1 return total_segments <= M left, right = 1, D while left < right: mid = (left + right) // 2 if can_divide_with_max_length(mid): right = mid else: left = mid + 1 return left"},{"question":"Given a string consisting of lowercase English letters only, determine whether it is an \\"almost palindrome\\". A string is considered an \\"almost palindrome\\" if it would become a palindrome after changing at most one character. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a string S of lowercase English letters. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if the given string is an almost palindrome or \\"NO\\" if it is not (without quotes). You may print each character of the string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ |S| ≤ 100 ------ Sample Input 1 ------ 3 abca abcd racecar ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Example case 1: By changing the character `b` to `c`, the string becomes \\"acca\\" which is a palindrome. Example case 2: Changing more than one character is required to make \\"abcd\\" a palindrome. Example case 3: \\"racecar\\" is already a palindrome, so it is trivially an almost palindrome.","solution":"def is_almost_palindrome(string): Determines if the given string is an almost palindrome. def is_palindrome_modified(s, left, right, modified): # Return True if this snippet is a palindrome or can be made into one with at most one modification while left < right: if s[left] != s[right]: if modified: return False return is_palindrome_modified(s, left + 1, right, True) or is_palindrome_modified(s, left, right - 1, True) left += 1 right -= 1 return True return is_palindrome_modified(string, 0, len(string) - 1, False) def solution_case(input_strings): results = [] for string in input_strings: if is_almost_palindrome(string): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that receives a string containing a mathematical expression with the operators +, -, *, / and parentheses. The function should calculate and return the result of the expression. The input string will always be a valid mathematical expression. You can assume that there will be no spaces in the input string. Examples ```python calculate(\\"3+5\\") == 8 calculate(\\"10+(2*5)\\") == 20 calculate(\\"100/(2+3)\\") == 20 calculate(\\"2*(5+5*2)/3\\") == 10 calculate(\\"10-2*3\\") == 4 calculate(\\"(2+3)*(2+(1*2))\\") == 20 ``` Remember to handle operator precedence and follow the correct order of operations when evaluating the expression.","solution":"def calculate(expression): def evaluate(tokens): stack = [] num = 0 sign = \\"+\\" i = 0 while i < len(tokens): char = tokens[i] if char.isdigit(): num = num * 10 + int(char) if char == \\"(\\": num, j = evaluate(tokens[i + 1:]) i += j if char in \\"+-*/)\\" or i == len(tokens) - 1: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack.append(stack.pop() * num) elif sign == \\"/\\": stack.append(int(stack.pop() / num)) sign = char num = 0 if char == \\")\\": return sum(stack), i + 1 i += 1 return sum(stack) return evaluate(expression)"},{"question":"George is a train enthusiast and loves watching trains pass by from his balcony. One day, he notices a sequence of trains and the durations for which each train passes by. He starts wondering about the lengths of uninterrupted train viewings he can have if they arrive consecutively without any gaps in between. A train view is considered valid if there are no intervals between the trains observed during the viewing session. Given the duration each train takes to pass by him, he wants to know the largest total time for which he can continuously watch the trains. Formally, you are given an array of integers, where each element represents the duration of a train passing by. Your task is to find the maximum sum of consecutive durations. ----- Input ----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of trains. The second line contains n integers, each denoting the duration of a train passing by (1 ≤ duration ≤ 1000). ----- Output ----- Print the maximum sum of consecutive durations. ----- Examples ----- Input 6 2 1 3 5 2 2 Output 15 Input 4 7 3 9 2 Output 21 ----- Note ----- In the first sample, the maximum sum of consecutive durations is 15 (2 + 1 + 3 + 5 + 2 + 2). In the second sample, the maximum sum of consecutive durations is 21 (7 + 3 + 9 + 2).","solution":"def max_consecutive_train_duration(durations): Returns the maximum sum of consecutive train durations. # Since there is no gap, the entire array is the longest consecutive train duration return sum(durations)"},{"question":"In an ancient kingdom, the citizens communicate using a special numerical code. This code consists of sequences of digits from 0 to 9. However, not all sequences are valid; a valid sequence follows these specific rules: - The sequence must start with a non-zero digit. - The length of the sequence must be a prime number. - The digits in the sequence should not form a palindrome (i.e., a sequence that reads the same forwards and backwards). Your task is to check if a given sequence of digits is a valid numerical code according to the kingdom\'s rules. -----Input----- The input consists of a single line containing a sequence of digits. The length of the sequence will be between 1 and 100 inclusive. -----Output----- Print \\"VALID\\" (without quotes) if the sequence adheres to the rules. Otherwise, print \\"INVALID\\" (without quotes). You can print each letter in arbitrary case (small or large). -----Examples----- Input 239 Output VALID Input 12321 Output INVALID Input 11 Output INVALID -----Note----- In the first example, the sequence \\"239\\" starts with a non-zero digit, has a prime length (3), and is not a palindrome, so it is valid. In the second example, the sequence \\"12321\\" has a prime length (5) and starts with a non-zero digit, but it is a palindrome, so it is invalid. In the third example, the sequence \\"11\\" is a palindrome, and the length (2) is not a prime number, so it is invalid.","solution":"def is_prime(n): Helper function to check if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_valid_sequence(sequence): Checks if the sequence adheres to the kingdom\'s rules: - Must start with a non-zero digit. - Length must be a prime number. - Should not be a palindrome. if sequence[0] == \'0\': return \\"INVALID\\" if not is_prime(len(sequence)): return \\"INVALID\\" if sequence == sequence[::-1]: return \\"INVALID\\" return \\"VALID\\""},{"question":"You have been given a NxN grid filled with either \'1\' or \'0\'. Your task is to count the number of islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Examples: A 4x5 grid: ``` 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 ``` The above grid has 3 islands. Input: - The first line contains an integer N (1 ≤ N ≤ 50), which is the size of the grid. - The next N lines each contain N characters \'0\' or \'1\', representing the grid. Output: - A single integer representing the number of islands found in the grid. Example: Input: ``` 4 11000 11000 00100 00011 ``` Output: ``` 3 ```","solution":"def count_islands(grid): Counts the number of islands in a grid. :param grid: List of strings representing the grid :return: Integer count of islands if not grid: return 0 N = len(grid) visited = [[False] * N for _ in range(N)] count = 0 def dfs(x, y): if x < 0 or y < 0 or x >= N or y >= N or visited[x][y] or grid[x][y] == \'0\': return visited[x][y] = True # explore all adjacent cells dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) for i in range(N): for j in range(N): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) count += 1 return count"},{"question":"Given a string S consisting of lowercase alphabets, find the first non-repeating character in it and return its index. If there is no such character, return -1. Example 1: Input: S = \\"leetcode\\" Output: 0 Explanation: The first non-repeating character is \'l\' at index 0. Example 2: Input: S = \\"aabb\\" Output: -1 Explanation: There is no non-repeating character in the string. Your Task: You don\'t need to read or print anything. Your task is to complete the function first_uniq_char() which takes S as input parameter and returns the index of the first non-repeating character. Expected Time Complexity: O(N) Expected Space Complexity: O(1) due to a fixed number of lowercase alphabets. Constraints: 1 <= N <= 10^5","solution":"def first_uniq_char(S): Returns the index of the first non-repeating character in the string S. If there is no such character, returns -1. # Dictionary to store character count and their first occurrence index char_count = {} # Count characters and record their first appearance index for index, char in enumerate(S): if char in char_count: char_count[char][0] += 1 else: char_count[char] = [1, index] # Find the first character with a count of 1 for char in S: if char_count[char][0] == 1: return char_count[char][1] return -1"},{"question":"The Great Festival of Zunivaria includes an elaborate relay race with multiple teams, each comprised of precisely four members. Every member of a team must run a unique segment of the race, and segments are predefined as S1, S2, S3, and S4. Each participant in the festival has distinct times for each of the four segments. The race comprises one individual from each team running each segment in sequence. To make the race fair and balanced, the organizers want to determine the best combination of participants for each team so that the total time taken for a team to complete all four segments is minimized. The objective is to output the minimum possible time a team can achieve by optimizing the choice of members for each segment. Input The input consists of: - The first line containing an integer N, the number of participants. - The next N lines, each containing four integers T1, T2, T3, and T4, which represent the time a participant takes for segments S1, S2, S3, and S4 respectively. Output The output should be a single integer, the minimum possible total time for a single team to complete the relay race. Constraints - 4 ≤ N ≤ 5000 - 1 ≤ T1, T2, T3, T4 ≤ 10000 Example # Input 6 5 9 3 8 3 7 6 12 8 5 4 9 6 2 8 10 7 4 10 11 4 6 7 5 # Output 20 In this example, an optimal choice would be: - Participant 2 for S1 (time: 3) - Participant 4 for S2 (time: 2) - Participant 1 for S3 (time: 3) - Participant 6 for S4 (time: 5) Thus, the minimum total time for the relay race would be 3 + 2 + 3 + 5 = 13. Note: Your program should not print anything other than what is specified in the output format. Please ensure all debug statements are removed before final submission to avoid any incorrect outputs.","solution":"def min_total_time(N, times): Returns the minimum total time for a single team to complete the relay race. # Sort each segment\'s times individually S1_times = sorted([times[i][0] for i in range(N)]) S2_times = sorted([times[i][1] for i in range(N)]) S3_times = sorted([times[i][2] for i in range(N)]) S4_times = sorted([times[i][3] for i in range(N)]) # Sum the smallest times from each segment return S1_times[0] + S2_times[0] + S3_times[0] + S4_times[0] # Function to handle input directly def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) times = [] for i in range(N): times.append([int(data[4 * i + 1]), int(data[4 * i + 2]), int(data[4 * i + 3]), int(data[4 * i + 4])]) print(min_total_time(N, times)) # Example usage # if __name__ == \\"__main__\\": # main()"},{"question":"The rapid spread of computer viruses is a major concern for cybersecurity teams. You have been tasked with implementing a basic system to simulate the spread of such viruses within a network of computers. The network of computers can be represented as a directed graph where each node is a computer, and an edge from node A to node B indicates that A can directly infect B if A gets infected. Given the structure of the network and the initial infected computer, your task is to determine the maximum number of computers that can get infected starting from the initially infected computer. The virus can spread from an infected computer to any of its directly connected neighbors. # Input - The input starts with a line containing a positive integer T, indicating the number of test cases. T is no more than 100. - For each test case, the first line contains two integers N and M, where N is the number of computers (1 ≤ N ≤ 1000) and M is the number of directed connections (0 ≤ M ≤ 10000). - The next M lines each contain two integers u and v, indicating a directed edge from computer u to computer v (1 ≤ u, v ≤ N). - The last line of each test case contains an integer S, the index of the initially infected computer. # Output For each test case, output a single integer - the maximum number of computers that can get infected starting from the initially infected computer. # Example Input ``` 2 4 3 1 2 2 3 3 4 1 5 4 1 2 2 3 3 4 4 5 3 ``` Output ``` 4 3 ``` # Explanation In the first test case, starting from computer 1, it can infect computers 2, 3, and 4, making a total of 4 infected computers. In the second test case, starting from computer 3, it can infect computers 4 and 5, making a total of 3 infected computers.","solution":"def max_infected_computers(T, data): from collections import defaultdict, deque results = [] for i in range(T): N, M = data[i][\'N\'], data[i][\'M\'] edges = data[i][\'edges\'] S = data[i][\'S\'] graph = defaultdict(list) for u, v in edges: graph[u].append(v) def bfs(start_node): visited = set() queue = deque([start_node]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) results.append(bfs(S)) return results"},{"question":"Kira is organizing a coding contest with n participants. Each participant has a list of problems they plan to solve. You need to determine if there exists at least one problem that every participant plans to solve. You are given n lists, each list representing the problems planned by each participant. Each problem is represented by an integer. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of participants. Each of the next n lines contains an integer k followed by k integers (1 ≤ k ≤ 100. 1 ≤ problem number ≤ 1000) — the number of problems in the list and the problem numbers themselves that the participant plans to solve. -----Output----- Print \\"YES\\" if there exists at least one common problem that every participant plans to solve, otherwise print \\"NO\\". -----Examples----- Input 3 3 1 2 3 2 2 3 4 1 2 3 4 Output YES Input 2 2 5 6 3 7 8 9 Output NO -----Note----- In the first sample, problem numbers 2 and 3 are common to all participants. In the second sample, no problem number is common to both participants.","solution":"def common_problem(n, participants): Determines if there is a common problem that every participant plans to solve. :param n: int - The number of participants :param participants: list of lists - Each inner list contains the problems one participant plans to solve :return: str - \\"YES\\" if there is at least one common problem, otherwise \\"NO\\" # Initialize the common set to the problems of the first participant common_problems = set(participants[0]) # Intersect with problems of each participant for i in range(1, n): common_problems.intersection_update(participants[i]) # If there is any common problem left, return \\"YES\\", otherwise \\"NO\\" if common_problems: return \\"YES\\" else: return \\"NO\\""},{"question":"You are part of a software development team that needs to create a functionality to validate email addresses. While there are many sophisticated ways to do this, you have been asked to write a simple regex-based validation function. Write a simple regex to check if the input string is a valid email address. For this problem, a valid email address is defined as follows: - It must have exactly one \'@\' symbol. - The characters before the \'@\' symbol must be alphanumeric (letters and numbers). - The characters after the \'@\' symbol must be alphanumeric and can include the dot (\'.\') character. - There must be at least one dot (\'.\') after the \'@\' symbol. You can assume the input is a string. Your function should return true if the input string is a valid email address based on the given criteria, and false otherwise. PS. The regex should be case insensitive.","solution":"import re def is_valid_email(email): Checks if the input string is a valid email address based on defined criteria. Args: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. pattern = re.compile(r\'^[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9.]+\', re.IGNORECASE) return bool(pattern.match(email))"},{"question":"Problem Sia and Pia are playing a game with integers. Given an array of N integers, their goal is to find the length of the longest subarray that contains numbers which can form an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers in which the difference of any two successive members is a constant. You need to write a program to help Sia win the game by finding the longest arithmetic subarray. Input: The first line contains a single integer T, the number of test cases. Each test case contains two lines. The first line contains the length of the array N. The second line contains N space-separated integers representing the array. Output: For each test case, output the length of the longest subarray that is an arithmetic progression. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100000 0 ≤ Array elements ≤ 100000 SAMPLE INPUT 2 5 3 6 9 12 15 4 1 3 5 7 SAMPLE OUTPUT 5 4","solution":"def longest_arithmetic_subarray(arr): Returns the length of the longest subarray that can form an arithmetic progression. n = len(arr) if n < 2: return n longest_length = 2 current_length = 2 common_diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i - 1] == common_diff: current_length += 1 else: common_diff = arr[i] - arr[i - 1] current_length = 2 longest_length = max(longest_length, current_length) return longest_length def process_inputs(T, cases): results = [] for i in range(T): n, arr = cases[i] results.append(longest_arithmetic_subarray(arr)) return results"},{"question":"Write a function to determine the maximum possible sum of a non-empty subarray of a given array of integers. A subarray is a contiguous subset of the array. Input: - The input starts with a single integer T (1 ≤ T ≤ 100), which indicates the number of test cases. - Each test case begins with an integer N (1 ≤ N ≤ 10^5), the length of the array. - The next line contains N integers, representing the elements of the array. The integers can be positive, negative, or zero and are separated by spaces. Output: - For each test case, print the maximum possible sum of any non-empty subarray on a new line. Constraints: - The sum of N over all test cases does not exceed 10^6. - The integers are within the range -10^4 to 10^4. Hint: You can use Kadane’s Algorithm to solve the problem efficiently. Example: Input: 2 5 1 -2 3 4 -1 4 -2 -3 4 -1 Output: 7 4 Explanation: - For the first test case: The maximum sum of a subarray is obtained from subarray [3, 4] which sums to 7. - For the second test case: The maximum sum of a subarray is obtained from subarray [4] which sums to 4.","solution":"def max_subarray_sum(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] current_max = arr[0] global_max = arr[0] for j in range(1, n): current_max = max(arr[j], current_max + arr[j]) if current_max > global_max: global_max = current_max results.append(global_max) return results"},{"question":"Given a string S consisting of lowercase alphabets, determine the length of the longest substring with all distinct characters. Your task is to complete the function longestDistinctSubstring(S) which accepts the string S and returns an integer representing the length of the longest substring with all unique characters. Example 1: Input: S = \\"abcabcbb\\" Output: 3 Explanation: The longest substring with all distinct characters is \\"abc\\" which has length 3. Example 2: Input: S = \\"bbbbb\\" Output: 1 Explanation: The longest substring with all distinct characters is \\"b\\" which has length 1. Example 3: Input: S = \\"pwwkew\\" Output: 3 Explanation: The longest substring with all distinct characters is \\"wke\\" which has length 3. User Task: Since this is a functional problem you do not have to worry about the input and output. You just have to complete the function longestDistinctSubstring(S) and return the length of the longest substring with distinct characters. Constraints: 1 <= T <= 10 1 <= |S| <= 10^5","solution":"def longestDistinctSubstring(S): Returns the length of the longest substring with all distinct characters. n = len(S) max_len = 0 start = 0 char_index = {} for i in range(n): if S[i] in char_index and char_index[S[i]] >= start: start = char_index[S[i]] + 1 char_index[S[i]] = i max_len = max(max_len, i - start + 1) return max_len"},{"question":"You are given a list of integers representing the stock prices of a company in chronological order. Your task is to write a function that determines the maximum profit that can be made by buying one share of the stock and then selling that share at a later date. If no profit can be made, return 0. ```python def max_profit(prices): # Your code here # Examples: prices = [7, 1, 5, 3, 6, 4] # Buy at 1, sell at 6 => Profit: 6 - 1 = 5 # Return: 5 prices = [7, 6, 4, 3, 1] # No profitable transaction is possible # Return: 0 prices = [1, 2, 3, 4, 5] # Buy at 1, sell at 5 => Profit: 5 - 1 = 4 # Return: 4 prices = [9, 1, 8, 7, 2, 6] # Buy at 1, sell at 8 => Profit: 8 - 1 = 7 # Return: 7 ``` The prices list will have at least 2 elements and at most 10^5 elements. Each price will be between 1 and 10^4.","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be made by buying one share and then selling it at a later date. If no profit can be made, it returns 0. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"The city of Gridland is renowned for its advanced network of train tracks that span the city in a neat grid-like fashion. Each train track in Gridland runs either horizontally or vertically, with intersections forming Gridland\'s unique scenery. However, a recent earthquake has damaged several tracks, and you have been tasked with finding out the time required to restore the grid. To simplify matters, Gridland can be represented as a grid of size n times n. Each cell in the grid can either contain a damaged track piece or be undamaged. Restoring a damaged track piece takes 1 unit of time. The railway authorities will only repair the damaged pieces and not the undamaged ones. You are to write a program that: 1. Reads the representation of the city grid. 2. Computes the total time required to fix all the damaged tracks. -----Input----- The first line of input contains an integer n (2 leq n leq 1000), which represents the size of the grid (of dimensions n by n). The next n lines each contain n characters, where each character is either \'.\' or \'#\'. A \'.\' indicates an undamaged track piece, and a \'#\' indicates a damaged track piece. -----Output----- Output a single integer that represents the total time required to fix all the damaged tracks. -----Examples----- Sample Input 1: 3 .#. # .#. Sample Output 1: 5 Sample Input 2: 4 .... .... .... .... Sample Output 2: 0 Sample Input 3: 5 # ..... ..... ..... # Sample Output 3: 10","solution":"def compute_repair_time(n, grid): Computes the total time required to restore the damaged tracks in the grid. Parameters: n (int): The size of the grid (n x n) grid (list of str): The grid representation with \'.\' as undamaged and \'#\' as damaged Returns: int: Total time required to restore all damaged tracks repair_time = 0 for row in grid: repair_time += row.count(\'#\') return repair_time"},{"question":"A company wants to organize its employees into teams for a project. Each team should have exactly `k` employees. Given a list of employee IDs, you need to find all possible ways to form such teams. You have to return the list of all possible teams sorted in lexicographical order, where each team is a combination of employee IDs sorted in ascending order. Input - The first line contains an integer `n` (1 ≤ n ≤ 20) - the number of employees. - The second line contains `n` distinct integers - the employee IDs. - The third line contains an integer `k` (1 ≤ k ≤ n) - the number of employees in each team. Output - Output all possible teams, each team on a new line, with IDs sorted in ascending order and teams sorted lexicographically. SAMPLE INPUT 4 3 1 4 2 2 SAMPLE OUTPUT 1 2 1 3 1 4 2 3 2 4 3 4","solution":"from itertools import combinations def form_teams(n, employee_ids, k): Returns a list of all possible teams of exactly k employees sorted lexicographically. :param n: Integer, number of employees :param employee_ids: List of integers, IDs of employees :param k: Integer, number of employees in each team :return: List of lists, where each nested list represents a team # Sort the employee IDs so that combinations are generated in sorted order employee_ids.sort() # Get all combinations of k employees all_combinations = list(combinations(employee_ids, k)) # Convert the tuples to lists for uniform output format teams = [list(comb) for comb in all_combinations] return teams"},{"question":"You are planning to open a set of art galleries in different cities. Each gallery will display a certain number of paintings, and you have budget constraints on how much you can spend on renting a gallery space in each city. Your goal is to maximize the total number of paintings displayed across all galleries within your budget. You have the details of each city’s gallery such as the maximum number of paintings it can display and its rental cost. ----- Input ----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and B. N lines follow. For each i (1 ≤ i ≤ N), the i-th of these lines contains two space-separated integers P_{i} and C_{i}, representing the number of paintings the gallery can display and the rental cost, respectively. ----- Output ----- For each test case, print a single line containing the maximum number of paintings that can be displayed within the given budget B. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ B ≤ 1,000,000 1 ≤ C_{i} ≤ 1,000,000 for each valid i 1 ≤ P_{i} ≤ 10,000 for each valid i ----- Sample Input 1 ----- 3 3 7 5 4 9 8 3 3 2 5 4 3 1 10 5 10 1 5 8 4 ----- Sample Output 1 ----- 8 9 13 ----- Explanation 1 ----- Example case 1: Among the galleries, the first and the third galleries can be rented with a total budget of 7 (4+3), displaying a combined total of 8 paintings. Example case 2: Only one gallery can be rented within the budget, which is the first gallery displaying 2 paintings. Example case 3: The first and the second galleries can be rented with a total budget of 10 (5+5), displaying a combined total of 13 paintings.","solution":"def maximize_paintings(T, test_cases): results = [] for i in range(T): N, B = test_cases[i][0] galleries = test_cases[i][1] # Sort the galleries in non-decreasing order of their rental cost galleries.sort(key=lambda x: x[1]) total_paintings = 0 total_cost = 0 for paintings, cost in galleries: if total_cost + cost <= B: total_cost += cost total_paintings += paintings results.append(total_paintings) return results"},{"question":"In an aquarium, there are several types of fish represented by different species IDs. Each fish in the aquarium has an initial weight, and the aquarium owner can perform two types of operations: 1. Feed a specific fish to increase its weight by a given amount. 2. Query the fish within a given range of species IDs to find the total weight of the fish in that range. The owner starts with the initial weights of all fish. Note that there will always be at least one fish of each species for any input range. Input The first line contains two integers n, q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), where n is the number of fish species and q is the number of operations. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 100) where wi is the initial weight of the fish with species ID i (1 ≤ i ≤ n). The next q lines describe the operations. Each line can be one of the following types: - \\"F s x\\" where 1 ≤ s ≤ n and 1 ≤ x ≤ 100, meaning to feed the fish of species ID s with additional weight x. - \\"Q l r\\" where 1 ≤ l ≤ r ≤ n, meaning to query the total weight of fish from species ID l to species ID r (inclusive). Output For each query operation, print the total weight of the fish in the given range on a new line. Examples Input 5 5 10 20 30 40 50 Q 1 3 F 2 10 Q 2 4 F 3 5 Q 1 5 Output 60 100 165","solution":"def aquarium_operations(n, q, weights, operations): Function to process aquarium operations. Parameters: n (int): Number of fish species q (int): Number of operations weights (list): Initial weights of the fish with species ID 1 to n operations (list): List of operations to be performed Returns: list: Results of the query operations results = [] for operation in operations: op = operation.split() if op[0] == \\"F\\": s = int(op[1]) - 1 x = int(op[2]) weights[s] += x elif op[0] == \\"Q\\": l = int(op[1]) - 1 r = int(op[2]) results.append(sum(weights[l:r])) return results"},{"question":"Write a function that takes in a list of integers and returns the second smallest number in the list. You can assume that the list contains at least two different integers. -----Input----- The input is a list of integers with at least 2 elements. -----Output----- Output the second smallest integer in the list. -----Examples----- Input [3, 1, 5, 7, 2] Output 2 Input [12, 45, 3, 7, 19] Output 7","solution":"def second_smallest(lst): Returns the second smallest number in a list of integers. Assumes the list contains at least two different integers. # Remove duplicates by converting list to set and back to list unique_lst = list(set(lst)) if len(unique_lst) < 2: raise ValueError(\\"List must contain at least two different integers\\") first, second = float(\'inf\'), float(\'inf\') for num in unique_lst: if num < first: second = first first = num elif num < second: second = num return second"},{"question":"You\'re given an integer matrix of size m x n where some elements can be zero. You need to determine the maximum size of a square of 1s (a sub-matrix with all 1s) that can be formed within this matrix. The square must have its sides parallel to the rows and columns of the matrix. Write a function that takes in the matrix as input and returns the size (side length) of the largest square of 1s in the matrix. Function Signature: ```python def largest_square_of_ones(matrix: List[List[int]]) -> int: ``` # Input - The input is given as a list of lists of integers `matrix` of size `m x n`, where `1 <= m, n <= 250`. - Each element of `matrix` is either 0 or 1. # Output - The function should return a single integer, the side length of the largest square of 1s. # Examples Example 1: ```python matrix = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] assert largest_square_of_ones(matrix) == 2 ``` Example 2: ```python matrix = [ [0, 1], [1, 0] ] assert largest_square_of_ones(matrix) == 1 ``` Example 3: ```python matrix = [ [0, 0, 0, 1], [1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1] ] assert largest_square_of_ones(matrix) == 2 ``` # Note In the first example, the largest square sub-matrix has a size of 2 and can be found starting at position (1, 2) to (2, 3) or (2, 1) to (3, 2). In the second example, the largest square sub-matrix has a size of 1 and can be found at any position where there is a `1`. In the third example, the largest square sub-matrix has a size of 2 and can be found starting at position (2, 1). # Constraints - Time Complexity should be O(m * n). - Auxiliary Space Complexity should be O(m * n).","solution":"def largest_square_of_ones(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"# Task Given a string containing only lowercase alphabetical characters, determine if it can be rearranged into a palindrome. The input string can contain up to 1000 characters. A palindrome reads the same backward as forward. For example, \\"abcba\\" and \\"aabb\\" can both be rearranged into a palindrome, but \\"abc\\" cannot. # Example Given the input string, return `True` if the string can be rearranged into a palindrome and `False` otherwise. ```python can_form_palindrome(s) can_form_palindrome(\\"aabb\\") = True can_form_palindrome(\\"abc\\") = False can_form_palindrome(\\"racecar\\") = True can_form_palindrome(\\"abcd\\") = False ``` # Approach To solve this problem: 1. Count the frequency of each character in the string. 2. Check how many characters have an odd frequency. 3. A string can only be rearranged into a palindrome if it has at most one character with an odd frequency. ```python def can_form_palindrome(s: str) -> bool: from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 ``` Good luck!","solution":"def can_form_palindrome(s: str) -> bool: Determines if the input string can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase alphabetical characters. Returns: bool: True if the string can be rearranged into a palindrome, otherwise False. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Alice has just started working as a software engineer and has been given access to a company database containing records of user actions. Each record consists of three fields: user ID, action type, and timestamp. Alice\'s task is to analyze the logs and generate a report of the first action performed by each user. Consider that the database issued records in a chronological order based on timestamp. Your task is to assist Alice in generating this report efficiently. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) - the number of records. The following n lines each contain a space-separated triplet: a string userID (1 ≤ |userID| ≤ 10), a string actionType (1 ≤ |actionType| ≤ 10), and an integer timestamp (1 ≤ timestamp ≤ 10^9) - representing a record. -----Output----- Output each userID followed by its first action type and the corresponding timestamp in chronological order of user IDs. If two user IDs are equal, they should be printed in alphabetical order. -----Examples----- Input 5 Alice login 1 Bob view 2 Alice click 3 Charlie login 4 Bob logout 5 Output Alice login 1 Bob view 2 Charlie login 4 Input 3 David login 100 Alice view 200 David click 300 Output Alice view 200 David login 100","solution":"def first_user_actions(records): Returns the first action performed by each user. Args: records: list of tuples. Each tuple contains (userID: str, actionType: str, timestamp: int). Returns: A list of tuples. Each tuple contains (userID: str, actionType: str, timestamp: int), ordered by userID in alphabetical order. first_actions = {} for userID, actionType, timestamp in records: if userID not in first_actions: first_actions[userID] = (actionType, timestamp) result = [(userID, first_actions[userID][0], first_actions[userID][1]) for userID in sorted(first_actions.keys())] return result def parse_input(input_lines): Parses the input lines into a list of records. Args: input_lines: list of input strings. Returns: A list of tuples containing records. n = int(input_lines[0]) records = [tuple(line.split()) for line in input_lines[1:n+1]] for i in range(len(records)): records[i] = (records[i][0], records[i][1], int(records[i][2])) return records"},{"question":"Write a program which performs operations on a stack with the addition of a `min` operation that returns the minimum value currently in the stack. * `push x`: Push the integer x onto the stack. * `pop`: Remove the top element from the stack. If the stack is empty, ignore this operation. * `min`: Return the minimum value in the stack. If the stack is empty, return \\"EMPTY\\". * `print`: Print the elements in the stack from top to bottom. Constraints * The number of operations leq 200,000 * Each integer x satisfies: -10^9 leq x leq 10^9 * The stack will not exceed 100,000 elements at any point due to the constraints on the operation count. Input In the first line, the number of operations n is given. In the following n lines, operations represented by `push x`, `pop`, `min`, or `print` are given. Output For each `min` operation, print the minimum value currently in the stack, or \\"EMPTY\\" if the stack is empty. For each `print` operation, print a list of stack elements starting from the topmost element. If the stack is empty, print \\"EMPTY\\". Example Input 12 push 5 push 2 push 8 min pop min push 1 min print pop pop print Output 2 2 1 1 2 5 5 5","solution":"class StackWithMin: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x): self.stack.append(x) if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self): if not self.stack: return x = self.stack.pop() if x == self.min_stack[-1]: self.min_stack.pop() def min(self): if not self.min_stack: return \\"EMPTY\\" return self.min_stack[-1] def print_stack(self): if not self.stack: return \\"EMPTY\\" return \\" \\".join(map(str, reversed(self.stack))) def process_operations(operations): stack = StackWithMin() output = [] for op in operations: if op.startswith(\\"push\\"): _, x = op.split() stack.push(int(x)) elif op == \\"pop\\": stack.pop() elif op == \\"min\\": output.append(str(stack.min())) elif op == \\"print\\": output.append(stack.print_stack()) return \\"n\\".join(output) def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) operations = data[1:] assert len(operations) == n result = process_operations(operations) if result: print(result)"},{"question":"In an ancient kingdom, there lived a wise sage who loved puzzles. One day, the sage came across an interesting problem involving matrices and pathfinding. You are given a square grid of integers, where each integer represents a certain cost to pass through. You need to find the minimum cost required to traverse from the top-left cell of the grid to the bottom-right cell. You can only move either right or down from a given cell. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), representing the size of the grid. Each of the next n lines contains n space-separated integers, where each integer a[i][j] (0 ≤ a[i][j] ≤ 100) represents the cost of passing through cell (i, j). -----Output----- Output a single integer — the minimum cost to travel from the top-left cell to the bottom-right cell. -----Examples----- Input 2 1 3 2 4 Output 7 Input 3 1 2 3 4 5 6 7 8 9 Output 21 Input 1 5 Output 5","solution":"def min_path_sum(grid): n = len(grid) # Create a 2D list to store the min cost at each cell cost = [[0] * n for _ in range(n)] cost[0][0] = grid[0][0] # Initialize the first row of the cost matrix for j in range(1, n): cost[0][j] = cost[0][j-1] + grid[0][j] # Initialize the first column of the cost matrix for i in range(1, n): cost[i][0] = cost[i-1][0] + grid[i][0] # Fill the rest of the cost matrix for i in range(1, n): for j in range(1, n): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + grid[i][j] # The minimum cost to reach the bottom-right cell return cost[n-1][n-1]"},{"question":"Given a matrix of characters, find the largest rectangular block of the same character. You are given a matrix represented by an array of strings, where each element represents a row of the matrix. Each string contains only lowercase English letters. You need to find the largest rectangular block in this matrix that contains the same character and return its area. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 500), the number of rows and columns in the matrix, respectively. - The next `n` lines each contain a string of length `m` consisting of lowercase English letters. # Output - Output a single integer: the area of the largest rectangular block consisting of the same character. # Example **Input:** ``` 4 5 aaaab aaabb aaacb bcccb ``` **Output:** ``` 9 ``` **Explanation:** The largest rectangular block consists of 3 rows and 3 columns filled with \'a\' (the submatrix from (1,1) to (3,3)), making the area 3 * 3 = 9. # Note Your solution should be efficient and able to handle the maximum input sizes.","solution":"def largest_rectangular_block(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 for c in range(26): char = chr(ord(\'a\') + c) height = [0] * (m + 1) for i in range(n): for j in range(m): if matrix[i][j] == char: height[j] += 1 else: height[j] = 0 stack = [-1] for k in range(m + 1): while height[k] < height[stack[-1]]: h = height[stack.pop()] w = k - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(k) return max_area"},{"question":"Given two strings S and T, write a program that determines if S can be transformed into T by performing a series of operations. Each operation allows you to replace any character in string S with any other character. The goal is to make the strings identical in exactly \'k\' operations. Example 1: Input: S = \\"abc\\", T = \\"def\\", k = 3 Output: True Explanation: We can transform \'a\' to \'d\', \'b\' to \'e\' and \'c\' to \'f\', using exactly 3 operations. Example 2: Input: S = \\"aaaa\\", T = \\"bbbb\\", k = 5 Output: False Explanation: We need exactly 4 operations to transform all \'a\'s to \'b\'s, but 5 operations are given, so it\'s not possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canTransform() which takes the strings S, T, and integer k as inputs and returns a boolean value indicating whether S can be transformed into T in exactly k operations. Expected Time Complexity: O(N) where N is the length of the strings. Expected Auxiliary Space: O(1). Constraints: 1 <= |S|, |T| <= 10^5 S and T have the same length. S and T contain only lowercase English letters.","solution":"def canTransform(S, T, k): Determine if S can be transformed into T by performing exactly k operations. Parameters: S (str): Source string. T (str): Target string. k (int): Number of operations. Returns: bool: True if S can be transformed into T in exactly k operations, else False. # Check if lengths of S and T are equal if len(S) != len(T): return False # Calculate the number of differing characters between S and T differing_chars = sum(1 for s, t in zip(S, T) if s != t) # We need exactly k operations to transform S to T return differing_chars == k"},{"question":"You are given an array of integers `A` of length `N`. You need to process `Q` queries. There are two types of queries: 1. `1 l r x d`: Update the subarray `A[l] to A[r]` (1-indexed) such that `A[l] = x`, `A[l+1] = x + d`, `A[l+2] = x + 2*d`, and so on. 2. `2 l r`: Find the sum of the subarray `A[l] to A[r]` (1-indexed). Input Format - The first line contains an integer `N`, the number of elements in the array `A`. - The second line contains `N` space-separated integers representing the elements of array `A`. - The third line contains an integer `Q`, the number of queries. - Each of the next `Q` lines contains a query of either type 1 or type 2. Output Format For each query of the second type, print a single integer representing the sum of the subarray from `A[l]` to `A[r]`. Constraints - `1 <= N <= 100000` (Number of elements in the array) - `1 <= Q <= 100000` (Number of queries) - `1 <= l <= r <= N` - `-10^6 <= A[i], x, d <= 10^6` Sample Input 6 1 2 3 4 5 6 3 1 2 5 10 2 2 1 6 2 2 5 Sample Output 54 72 Explanation - After the first query, the array is updated to: `[1, 10, 12, 14, 16, 6]` - The second query computes the sum of the entire array: `1 + 10 + 12 + 14 + 16 + 6 = 59` - The third query computes the sum of the subarray from index 2 to 5: `10 + 12 + 14 + 16 = 52`","solution":"def process_queries(N, A, queries): Processes the given queries on array A of size N. Args: N : int : Number of elements in array A A : List[int] : List of integers representing the array A queries : List[Tuple] : List of queries to process Returns: List[int] : A list containing the results of type 2 queries result = [] for query in queries: if query[0] == 1: # Update type query _, l, r, x, d = query for i in range(l - 1, r): A[i] = x + (i - (l - 1)) * d elif query[0] == 2: # Sum type query _, l, r = query result.append(sum(A[l - 1:r])) return result"},{"question":"Sarah is a computer programmer working on a software module that involves processing sequences of positive integers. There\'s a particular task where she needs to detect a specific pattern within these sequences. The pattern she\'s looking for is a \\"bitonic subsequence\\" of a given sequence of integers. A bitonic subsequence first strictly increases and then strictly decreases. For example, in the sequence [1, 4, 2, 3, 5, 7, 6, 3], a valid bitonic subsequence is [1, 4, 7, 6, 3]. Given a sequence of integers, Sarah needs to determine the longest bitonic subsequence that can be extracted from the sequence and provide its length. Write a function `longest_bitonic_subsequence(arr)` that takes an array of integers and returns the length of the longest bitonic subsequence within the array. # Input - An array of integers `arr` where 1 ≤ |arr| ≤ 3000 and each integer in the array is between 1 and 10^9. # Output - An integer representing the length of the longest bitonic subsequence. # Example Example 1: Input: ``` [1, 2, 1, 2, 3, 4, 5, 3, 2, 1] ``` Output: ``` 8 ``` Explanation: A longest bitonic subsequence is [1, 2, 3, 4, 5, 3, 2, 1]. Example 2: Input: ``` [5, 4, 3, 2, 1] ``` Output: ``` 5 ``` Explanation: The entire sequence is bitonic as it is entirely decreasing after the initial increase. Example 3: Input: ``` [1, 11, 2, 10, 4, 5, 2, 1] ``` Output: ``` 6 ``` Explanation: A longest bitonic subsequence is [1, 2, 10, 4, 2, 1]. # Note You may assume that the input array is non-empty and contains at least three elements.","solution":"def longest_bitonic_subsequence(arr): if not arr: return 0 n = len(arr) # increasing[i] will store the length of the longest increasing subsequence ending at i increasing = [1] * n # decreasing[i] will store the length of the longest decreasing subsequence starting at i decreasing = [1] * n # Fill increasing[] from left to right for i in range(1, n): for j in range(i): if arr[i] > arr[j] and increasing[i] < increasing[j] + 1: increasing[i] = increasing[j] + 1 # Fill decreasing[] from right to left for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j] and decreasing[i] < decreasing[j] + 1: decreasing[i] = decreasing[j] + 1 # Find the maximum value of (increasing[i] + decreasing[i] - 1) max_length = 0 for i in range(n): max_length = max(max_length, increasing[i] + decreasing[i] - 1) return max_length"},{"question":"The robotics club is developing a sequence of robotic moves for an upcoming competition. The moves are represented by a string of characters, where each character is either \'L\' (Left), \'R\' (Right), \'U\' (Up), or \'D\' (Down). However, the sequencer control can only be effective if the total number of moves results in the robot ending up at its starting position. Additionally, to impress the judges, the sequences must be of even length. Given a string of characters representing the sequence of moves, find the minimum number of moves that need to be removed (without reordering the remaining characters) to end up at the starting position with an even-length sequence. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5), where each character in s is either \'L\', \'R\', \'U\', or \'D\'. -----Output----- Output a single integer representing the minimum number of moves that need to be removed to achieve the desired sequence. -----Example----- Input LRLRDUUD Output 0 Example Input LRLRD Output 1 -----Note----- In the first sample testcase, the string \\"LRLRDUUD\\" already results in the robot returning to the starting position with an even-length sequence, so no moves need to be removed. In the second sample testcase, removing one move, such as the last \'D\', will result in \\"LRLR\\" which returns to the starting position and has an even-length of 4.","solution":"def min_moves_to_balance(s): Returns the minimum number of moves to be removed to make the robot end up at the starting position with an even-length sequence. from collections import Counter counts = Counter(s) # count of moves in each direction L_count = counts[\'L\'] R_count = counts[\'R\'] U_count = counts[\'U\'] D_count = counts[\'D\'] # imbalance in horizontal and vertical movements horizontal_imbalance = abs(L_count - R_count) vertical_imbalance = abs(U_count - D_count) # total imbalance is the sum of both total_imbalance = horizontal_imbalance + vertical_imbalance # ensure sequence length is even, removing additional one move if odd length if (len(s) - total_imbalance) % 2 != 0: total_imbalance += 1 return total_imbalance"},{"question":"Consider two strings, `s1` and `s2`, both of which represent binary numbers (strings containing only 0s and 1s). Write a function that returns the sum of these two binary numbers, also represented as a binary string. Function Signature ```python def addBinaryNumbers(s1: str, s2: str) -> str: ``` # Input - `s1`: A binary string representing the first binary number. - `s2`: A binary string representing the second binary number. # Output - Return the sum of the two binary numbers as a binary string. # Constraints - Each string will contain only 0s and 1s. - Each string is at most 100 characters long. - The result should not contain any leading zeroes unless the result is the string \\"0\\". # Example Input ```plaintext s1 = \\"1101\\" s2 = \\"1011\\" ``` Output ```plaintext \\"11000\\" ``` Explanation ``` 1101 + 1011 ------ 11000 ``` Note: In the example above, binary addition was performed on `1101` and `1011`, resulting in `11000`.","solution":"def addBinaryNumbers(s1: str, s2: str) -> str: Returns the sum of two binary numbers given as strings. # Convert binary strings to integers num1 = int(s1, 2) num2 = int(s2, 2) # Perform addition total = num1 + num2 # Convert the result back to a binary string return bin(total)[2:]"},{"question":"problem Alice is organizing a puzzle exhibition where puzzles are interconnected nodes representing different exhibits. Each exhibit can connect to multiple other exhibits through hallways. The aim is to help visitors navigate the puzzle exhibition efficiently. To achieve this, Alice plans to create pathways that connect all exhibits with the minimal total length of hallways. The puzzle exhibition layout can be represented as a weighted undirected graph where nodes represent exhibits, and edges represent hallways between them with specific lengths. Write a program to determine the minimal total length of hallways needed to connect all exhibits. # Input Format - The input starts with an integer `t`, the number of test cases. - For each test case: - The first line contains two integers `n` and `m`, the number of exhibits and the number of hallways, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w`, representing a hallway between exhibit `u` and exhibit `v` with a length of `w`. # Output Format - For each test case, output a single integer: the minimal total length of the hallways needed to connect all the exhibits. # Constraints - 1 ≤ t ≤ 100 - 2 ≤ n ≤ 1000 - 1 ≤ m ≤ 100,000 - 1 ≤ w ≤ 1000 - The graph is connected and there is at least one way to connect all exhibits. # Example Input ``` 1 4 5 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 ``` Output ``` 6 ``` # Explanation In the example above, the minimal total length of hallways to connect all exhibits is 6. The hallways that achieve this total length are: - 1-2 with length 1 - 2-3 with length 2 - 2-4 with length 3 Note that the hallway 3-4 with length 5 is not needed because there is already a path connecting exhibit 3 and exhibit 4 through exhibit 2.","solution":"import heapq def minimal_total_length(test_cases): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 results = [] for n, m, edges in test_cases: edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n total_cost = 0 edges_included = 0 for u, v, w in edges: u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) total_cost += w edges_included += 1 if edges_included == n - 1: break results.append(total_cost) return results def parse_input(input_lines): t = int(input_lines[0]) current_line = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[current_line].split()) current_line += 1 edges = [] for _ in range(m): u, v, w = map(int, input_lines[current_line].split()) edges.append((u, v, w)) current_line += 1 test_cases.append((n, m, edges)) return test_cases if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split(\\"n\\") test_cases = parse_input(input_data) result = minimal_total_length(test_cases) for r in result: print(r)"},{"question":"In a large software organization, there is a unique challenge in sorting a list of employees based on their performance scores. Each employee is assigned a score by their manager, and employees are listed randomly in a file. Your task is to sort the employees such that their performance scores are in non-decreasing order. Additionally, you must preserve the relative order of employees who have the same performance score (this is known as a stable sort). -----Input----- The input consists of multiple lines. The first line contains an integer n (1 ≤ n ≤ 100), the number of employees. Each of the following n lines contains an integer score (0 ≤ score ≤ 100) and a string name. The name string is guaranteed to be unique and consists of only lowercase English letters. -----Output----- Output n lines. Each line should contain the score followed by the name, sorted in non-decreasing order of scores. If two employees have the same score, they should appear in the same relative order as they were in the input. -----Example----- Input 4 60 alice 75 steve 60 bob 95 john Output 60 alice 60 bob 75 steve 95 john -----Note----- Make sure to apply a stable sorting algorithm to achieve the required order. For example, if two employees have the same performance score, their order should be the same as in the input.","solution":"def sort_employees_by_score(n, employees): Sorts employees based on their performance scores in a stable manner. :param n: int - the number of employees :param employees: list - list of tuples (score, name) :return: list - sorted list of tuples (score, name) return sorted(employees, key=lambda x: x[0])"},{"question":"A theme park consists of several interconnected attractions. Each attraction is represented by a unique number. Visitors can traverse from one attraction to another if there\'s a direct path between them. The path map is stored in an adjacency matrix, where a 1 indicates a direct path and a 0 indicates no direct path. The visitors have a starting attraction and their goal is to visit as many attractions as possible without visiting an attraction more than once. Given a starting attraction, determine the maximum number of attractions a visitor can visit. Input The input is given in the following format: t (Blank line) Matrix1 Start1 (Blank line) Matrix2 Start2 .. .. Matrix n Start t The first line gives the number of test cases t (t ≤ 20). Each test case consists of a blank line, an adjacency matrix of n x n (1 ≤ n ≤ 100) elements, and a starting attraction (an integer between 1 and n inclusive). The adjacency matrix consists of \'n\' lines, each line containing \'n\' characters, either 1 or 0, separated by spaces. The starting attraction is listed on the following line. Output For each test case, output the maximum number of attractions the visitor can visit. Each test case output starts with \\"Case x:\\", where x is the case number. Example Input 2 0 1 0 0 1 0 1 1 0 1 0 0 0 1 0 0 1 0 1 1 0 2 Output Case 1: 4 Case 2: 2 Explanation In the first test case, starting at attraction 1, the visitor can proceed to attraction 2, then to attraction 3 or 4, visiting 4 unique attractions in one path. In the second test case, starting at either attraction, the visitor can visit both attractions, hence the maximum is 2.","solution":"def max_attractions(matrix, start): Uses Depth First Search to find the maximum number of attractions one can visit starting from the given attraction. n = len(matrix) visited = [False] * n def dfs(attraction): visited[attraction] = True count = 1 for neighbor in range(n): if matrix[attraction][neighbor] == 1 and not visited[neighbor]: count += dfs(neighbor) return count # Adjust for zero-based index start -= 1 return dfs(start) def solve_theme_park(input_text): Parses the input text, processes each test case and returns the results as described. lines = input_text.strip().split(\'n\') t = int(lines[0]) index = 1 case_results = [] for case_num in range(1, t + 1): # Skip the blank line while lines[index].strip() == \'\': index += 1 # Read matrix matrix = [] while index < len(lines) and not lines[index].strip().isdigit(): row = list(map(int, lines[index].split())) matrix.append(row) index += 1 # Read start attraction start = int(lines[index].strip()) index += 1 # Calculate maximum attractions visited for this case result = max_attractions(matrix, start) case_results.append(f\'Case {case_num}: {result}\') return \'n\'.join(case_results)"},{"question":"A company has a database with employees\' work hours over a specific period. The data is given as an array of integers where each element represents the work hours of an employee on a particular day. The company wants to find the highest productivity over any contiguous subarray of days. The productivity of a subarray is defined as the sum of the work hours in that subarray. Write a function `maxProductiveHours(hours: List[int]) -> int` that takes an array of integers representing work hours of employees and returns the productivity of the most productive contiguous subarray. If the array is empty, return 0. Example 1: Input: hours = [1, -2, 3, 10, -4, 7, 2, -5] Output: 18 Explanation: The subarray with the highest productivity is [3, 10, -4, 7, 2] with a sum of 18. Example 2: Input: hours = [-1, -2, -3, -4] Output: -1 Explanation: The subarray with the highest productivity is [-1] with a sum of -1. Your task: You do not need to read input or print anything. Your task is to complete the function `maxProductiveHours` which takes an integer array `hours` as the argument and returns an integer representing the highest productivity over any contiguous subarray. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(hours) ≤ 10^5 -10^4 ≤ hours[i] ≤ 10^4","solution":"from typing import List def maxProductiveHours(hours: List[int]) -> int: if not hours: return 0 max_productivity = hours[0] current_productivity = hours[0] for hour in hours[1:]: current_productivity = max(hour, current_productivity + hour) if current_productivity > max_productivity: max_productivity = current_productivity return max_productivity"},{"question":"We have an array of integers `a` and an integer `k`. You can perform the following operation at most once: * Choose two indices `i` and `j` (1 ≤ i < j ≤ n) and swap `a[i]` with `a[j]`. Determine the maximum possible sum of the first `k` integers in the array after at most one swap operation. Constraints * 1 ≤ n, k ≤ 10^5 * 0 ≤ a[i] ≤ 10^9 Input Input is given from Standard Input in the following format: n k a1 a2 ... an Output Print the maximum possible sum of the first `k` elements after at most one swap. Examples Input 5 3 3 6 1 8 2 Output 17 Input 4 2 9 4 7 3 Output 16 Input 3 3 1 2 3 Output 6","solution":"def max_sum_after_one_swap(n, k, a): Determine the maximum possible sum of the first `k` integers in the array after at most one swap operation. Parameters: n (int): The number of elements in the array. k (int): The number of elements to consider for the sum. a (list): The list of integers representing the array. Returns: int: The maximum possible sum of the first `k` integers after at most one swap. if k == 0: return 0 initial_sum = sum(a[:k]) max_sum = initial_sum # Checking for all possible swaps in the first k and the elements after k for i in range(k): for j in range(k, n): new_sum = initial_sum - a[i] + a[j] max_sum = max(max_sum, new_sum) return max_sum"},{"question":"You are given an array of positive integers. Your task is to find the maximum sum of a subsequence with the constraint that no two numbers in the subsequence should be adjacent in the array. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. Create a function that finds this maximum sum and returns it. -----Input----- - You will receive a single list `arr` of positive integers. - Example: `arr = [3, 2, 5, 10, 7]` -----Output----- - Return an integer which is the maximum sum of a subsequence that satisfies the above condition. - Example: `15` -----Examples----- Input [3, 2, 5, 10, 7] Output 15 Input [3, 2, 7, 10] Output 13 Note: Your function should efficiently handle large lists, up to a length of 10^5.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of a subsequence with the constraint that no two numbers in the subsequence should be adjacent in the array. if not arr: return 0 if len(arr) == 1: return arr[0] incl = arr[0] excl = 0 for i in range(1, len(arr)): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"Write a function to determine if a given string contains all the vowels (a, e, i, o, u) at least once. The input will be a lowercase string without any special characters or numbers. The function should return a boolean value indicating the presence of all vowels. Example: ```python def contains_all_vowels(s): # Your code here print(contains_all_vowels(\\"educative\\")) # True print(contains_all_vowels(\\"hello world\\")) # False ```","solution":"def contains_all_vowels(s): Returns True if the input string contains all the vowels (a, e, i, o, u) at least once. Otherwise, returns False. vowels = set(\'aeiou\') return vowels.issubset(set(s))"},{"question":"You are organizing a series of events in a large hall and have to place guests in different sections. Each section has a specific seating capacity and certain amenities. You want to optimize the guest placement such that every section is filled as evenly as possible, while still adhering to each section\'s seating capacity. Additionally, you should maximize the number of amenities accessible to all guests. The amenities are given as an array, where each element represents the amenities available in a section. The goal is to distribute guests so that the variation in the number of guests between the fullest and least full sections is minimized, while also ensuring that guests have the maximum possible access to amenities. ----Input---- - The first line contains a single positive integer n (1 le n le 1000), the number of sections. - The second line contains n positive integers, representing the seating capacities of each section (1 le text{capacity}_i le 10000). - The third line contains n integers, representing the number of amenities in each section (0 le text{amenities}_i le 100). ----Output---- Print a single integer, the minimized maximum number of guests any section can accommodate such that the difference between the number of guests in the fullest and least full sections is minimized. ----Examples---- Sample Input: 4 10 30 20 10 2 4 3 1 Sample Output: 18","solution":"def minimize_guest_variation(n, capacities, amenities): total_capacity = sum(capacities) min_avg_fill = total_capacity // n max_avg_fill = (total_capacity + n - 1) // n def can_achieve_fill(target_fill): # Check if it is possible to ensure each section has at most `target_fill` guests filled_sections = [] for cap in capacities: if cap < target_fill: filled_sections.append(cap) else: filled_sections.append(target_fill) return sum(filled_sections) >= total_capacity low, high = min_avg_fill, max_avg_fill while low < high: mid = (low + high) // 2 if can_achieve_fill(mid): high = mid else: low = mid + 1 return low"},{"question":"Ash is training for a marathon and maintains a detailed log of his runs. Each log entry records the duration of the run in minutes. Ash wants to analyze his training progress to ensure he is consistently improving his running times. You are required to write a function that checks if, in a given list of run durations, there exists any subsequence of four consecutive runs where each subsequent run is faster than the previous one. If such a subsequence exists, the function should return True; otherwise, it should return False. Input Format: The function will receive a single argument, a list of integers where each integer represents the duration of a run in minutes. Output Format: The function should return True if there exists a subsequence of four consecutive runs with decreasing times, or False otherwise. Constraints: - The length of the list will be between 1 and 100000. - Each duration will be a positive integer not exceeding 10000. Example Input: [45, 42, 39, 37, 36, 30, 29, 28] Example Output: True Explanation: In the provided input, subsequence [42, 39, 37, 36] and [39, 37, 36, 30] both satisfy the condition of four consecutive runs where each subsequent run is faster than the previous one. ```python def has_improving_subsequence(run_durations): # Your code here # Examples print(has_improving_subsequence([45, 42, 39, 37, 36, 30, 29, 28])) # Should return True print(has_improving_subsequence([45, 48, 50, 41, 46, 50, 38, 37])) # Should return False ``` Your task is to complete the `has_improving_subsequence` function such that it works efficiently even for large inputs.","solution":"def has_improving_subsequence(run_durations): Returns True if there exists a subsequence of four consecutive runs where each subsequent run is faster than the previous one, otherwise returns False. if len(run_durations) < 4: return False for i in range(len(run_durations) - 3): if (run_durations[i] > run_durations[i + 1] > run_durations[i + 2] > run_durations[i + 3]): return True return False"},{"question":"An ancient civilization is known for their unique way of encryption using prime factors. According to their records, they encrypt a given number n by finding its smallest prime factor and then determining how many times this prime factor divides the number. Given an integer n, perform the encryption as defined by their method. If n is already a prime number, it should be encrypted by itself, and the count should be 1. Input The first line contains a single integer n (2 ≤ n ≤ 10^6) — the number to be encrypted. Output Print two integers: the smallest prime factor of n and the count of how many times this prime factor can divide n. SAMPLE INPUT 12 SAMPLE OUTPUT 2 2 Explanation The smallest prime factor of 12 is 2, and it divides 12 exactly 2 times to give 2^2 * 3. SAMPLE INPUT 17 SAMPLE OUTPUT 17 1 Explanation 17 is a prime number, so it is encrypted by itself with the count being 1.","solution":"def smallest_prime_factor(n): Returns the smallest prime factor of n and the count of how many times this prime factor can divide n. if n <= 1: raise ValueError(\\"n should be greater than 1\\") # check for smallest prime factor # start checking from 2 upwards for i in range(2, int(n**0.5) + 1): if n % i == 0: count = 0 while n % i == 0: n //= i count += 1 return (i, count) # if no smaller factor found, n must be prime return (n, 1)"},{"question":"Given an integer array and an integer k, write a function to determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to k. Example 1: Input: nums = [1, 2, 3, 9] k = 8 Output: False Explanation: There are no two numbers that add up to 8. Example 2: Input: nums = [1, 2, 4, 4] k = 8 Output: True Explanation: The numbers 4 and 4 add up to 8. Your Task: You don\'t need to read input or print anything. You just need to complete the function twoSum(nums, k) that takes an integer array nums and an integer k as input and returns True if there are two distinct indices i and j such that nums[i] + nums[j] equals k, otherwise return False. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 2 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= k <= 10^9","solution":"def twoSum(nums, k): Determines if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to k. :param nums: List of integers :param k: Integer sum value to check for :return: Boolean indicating if such pair exists seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Alice is an avid botanist and is given the task to identify endangered species in a large forest. Each species of plant in the forest is represented by a unique positive integer. However, some plants are endangered, and Alice needs to count them more efficiently. Alice has a list of species observed multiple times across several locations in the forest. She believes in uniformity and wants to count each unique species only once, even if it appears in multiple locations. You are given a list of observations. Each observation is an integer representing a plant species. Your job is to help Alice count the number of unique plant species in her list of observations. Input Format The first line contains an integer ( T ) which indicates the number of test cases. Each of the next ( T ) lines contains space-separated integers. The first integer ( n ) is the number of observations in that test case, followed by ( n ) integers representing the species observed. Output Format For each test case, print a single integer that represents the number of unique species observed in that test case. Constraints - ( 1 leq T leq 10^3 ) - ( 1 leq n leq 10^5 ) - ( 1 leq text{species} leq 10^9 ) Sample Input 3 5 1 2 2 3 3 3 4 4 4 4 5 6 6 7 Sample Output 3 1 3","solution":"def count_unique_species(test_cases): Given a list of test cases, where each test case is a list with the first element as the number of observations and the remaining elements are the observed species, return a list of counts of unique species for each test case. unique_counts = [] for test_case in test_cases: observations = test_case[1:] # Extract the observations, ignoring the first element n unique_species = set(observations) # Use a set to remove duplicates unique_counts.append(len(unique_species)) # Store the count of unique species return unique_counts"},{"question":"Alice is fond of palindromes. A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces and punctuation). She now wants to create a tool that can analyze a given string and identify the length of the longest contiguous substring that is a palindrome. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 1000) - the length of the string. The second line contains a string s of length n, consisting of lowercase English letters only. -----Output----- Print a single integer - the length of the longest contiguous palindromic substring in the given string. -----Examples----- Input 7 abacded Output 3 Input 12 forgeeksskeegfor Output 10 -----Note----- In the first sample, the longest palindrome substring is \\"aba\\" with length 3. In the second sample, the longest palindrome substring is \\"geeksskeeg\\" with length 10.","solution":"def longest_palindromic_substring_length(s: str) -> int: Returns the length of the longest contiguous palindromic substring in s. n = len(s) if n == 0: return 0 # Create a 2D DP array to store the results of subproblems dp = [[False for _ in range(n)] for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True start = 0 # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 # Ending index of the substring from starting index i and length k # Check for palindrome if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"Given integers N and K, create an array A of length N such that: 1 ≤ A_{i} ≤ 10^{18} for all (1 ≤ i ≤ N); The sum of all elements in the array is divisible by K. More formally, for the sum S of array A (S = A_{1} + A_{2} + ... + A_{N}), S is divisible by K (i.e., S % K == 0). It can be proven that it is always possible to construct such A under given constraints. If there exist multiple such arrays, print any. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K - the length of the array to be constructed and the divisor. ------ Output Format ------ For each test case, output a single line containing N space-separated integers, denoting the elements of the array A. The i^{th} of these N integers is the i^{th} element of the array A. If there exist multiple such arrays, print any. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{3} 1 ≤ K ≤ 10^{9} - Sum of N over all test cases does not exceed 5 cdot 10^{3}. ------ Sample Input 1 ------ 2 3 5 4 7 ------ Sample Output 1 ------ 5 5 10 7 7 7 7 ------ Explanation 1 ------ Test case 1: A possible array satisfying all the conditions is [5, 5, 10]: - Sum of the elements is 5 + 5 + 10 = 20, which is divisible by 5. Test case 2: A possible array satisfying all the conditions is [7, 7, 7, 7]: - Sum of the elements is 7 + 7 + 7 + 7 = 28, which is divisible by 7.","solution":"def construct_array(N, K): Constructs an array of N integers such that each integer is between 1 and 10^18 inclusive, and the sum of the array is divisible by K. # A simple approach is to fill the array with K\'s, except making sure the last element adjusts to the sum A = [K] * (N - 1) sum_so_far = K * (N - 1) A.append(K + K - sum_so_far % K) return A def construct_arrays_for_test_cases(T, test_cases): results = [] for N, K in test_cases: array = construct_array(N, K) results.append(array) return results"},{"question":"You are given an array of integers. Write a function that returns a new array where each element at index i is the product of all the numbers in the original array except the one at i. Input The first line of input contains an integer n (2 ≤ n ≤ 1000), the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Output Output a single line containing n space-separated integers representing the transformed array. Constraints -1000 ≤ each integer in the array ≤ 1000 SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT 24 12 8 6","solution":"def product_except_self(nums): Given an array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) if n < 2 or n > 1000: return [] # Create two auxiliary arrays left_products = [1] * n right_products = [1] * n answer = [1] * n # Fill the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the answer array for i in range(n): answer[i] = left_products[i] * right_products[i] return answer def parse_input(input_str): lines = input_str.splitlines() n = int(lines[0]) nums = list(map(int, lines[1].split())) return n, nums def format_output(result): return \' \'.join(map(str, result))"},{"question":"You have been given an undirected graph with N nodes. Each node has a value assigned to it, denoted by an array V where V[i] indicates the value of node i (1-indexed). You need to find the maximum possible sum of values of nodes in any connected component of the graph. A connected component of a graph is a set of nodes such that any node in the set can be reached from any other node in the set via a series of edges, and no node in the set is connected to a node outside of it. **Input:** The first line contains an integer T (number of test cases). For each test case: 1. The first line contains two integers N (number of nodes) and M (number of edges). 2. The second line contains N integers describing the array V. 3. The following M lines each contain two integers u and v indicating an undirected edge between node u and node v. **Output:** For each test case, print the maximum possible sum of values of nodes in any connected component. **Constraints:** 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ (N*(N-1))/2 1 ≤ V[i] ≤ 1000 1 ≤ u, v ≤ N, u ≠ v **SAMPLE INPUT:** ``` 2 4 2 1 2 3 4 1 2 2 3 5 0 1 2 3 4 5 ``` **SAMPLE OUTPUT:** ``` 6 5 ``` **Explanation:** In the first test case, the graph has two connected components: {1, 2, 3} and {4}. The sum of values for the first component is 1+2+3=6, and for the second component is 4. The maximum sum is 6. In the second test case, there are no edges, so each node is its own component. The maximum sum is the value of the node with the highest value, which is 5.","solution":"def max_connected_component_sum(T, test_cases): Returns the maximum possible sum of values of nodes in any connected component for multiple test cases. Parameters: T (int): Number of test cases test_cases (list): List of test cases where each test case is a tuple containing: - int N: Number of nodes - int M: Number of edges - list V: Values of nodes - list edges: List of tuples with edges Returns: list: List of integers where each integer is the maximum sum for the respective test case def dfs(node, visited, graph, values): stack = [node] component_sum = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True component_sum += values[current] for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return component_sum results = [] for i in range(T): N, M, V, edges = test_cases[i] graph = [[] for _ in range(N)] values = [0] * N for index, value in enumerate(V): values[index] = value for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * N max_sum = 0 for node in range(N): if not visited[node]: component_sum = dfs(node, visited, graph, values) max_sum = max(max_sum, component_sum) results.append(max_sum) return results"},{"question":"The company XYZ wants to implement a new feature in their social media platform that allows users to classify their friends from a large pool of people based on the number of common interests they share. Each user has a list of interests, and two users can be considered friends if they have at least K common interests. The company wants to find out how many pairs of users can become friends if the number of common interests they share is at least a specific number. Given a list of users where each user has a set of interests, and a list of queries with different values of K, you need to determine the number of user pairs that can be friends for each query. Input: - The first line contains an integer U, the number of users. - The next U lines each contain a list of integers representing the interests of the user. - The next line contains an integer Q, the number of queries. - The next Q lines each contain an integer K. Output: For each query, output the number of pairs of users that have at least K common interests. Constraints: 1 ≤ U ≤ 1000 1 ≤ number of interests per user ≤ 100 1 ≤ interest ID ≤ 1000 1 ≤ Q ≤ 100 1 ≤ K ≤ 100 SAMPLE INPUT 3 1 2 3 2 3 4 1 4 2 2 1 SAMPLE OUTPUT 1 2 Explanation We have 3 users: User 1 has interests [1, 2, 3] User 2 has interests [2, 3, 4] User 3 has interests [1, 4] For the first query (K = 2), we need to find the number of pairs with at least 2 common interests. - User 1 and User 2 have interests [2, 3] in common, which is 2. - User 1 and User 3 have interests [1] in common, which is 1. - User 2 and User 3 have interests [4] in common, which is 1. Only User 1 and User 2 qualify, so the first output is 1. For the second query (K = 1), we need to find the number of pairs with at least 1 common interest. - User 1 and User 2 have interests [2, 3], so there is 1 pair. - User 1 and User 3 have interest [1], so there is 1 pair. - User 2 and User 3 have interest [4], so there is 1 pair. All pairs qualify, so the second output is 2.","solution":"def count_friend_pairs(users, queries): # Convert list of interests to sets for each user user_sets = [set(user) for user in users] results = [] for K in queries: count = 0 for i in range(len(user_sets)): for j in range(i + 1, len(user_sets)): if len(user_sets[i] & user_sets[j]) >= K: count += 1 results.append(count) return results"},{"question":"In a mystical land called Arraytopia, there are N wizards standing in a circle. Each wizard is assigned a unique power level, represented by an integer. Wizards can communicate telepathically with their immediate neighbors in the circle. However, due to a magical surge, each wizard can only communicate with neighbors whose power level difference with the wizard\'s own power level is less than or equal to a given threshold K. Your task is to determine if it\'s possible to send a message from a wizard to all other wizards by relaying it through the circle. If it\'s possible, return \\"Yes\\", otherwise return \\"No\\". Input The first line contains two integers, N (3 ≤ N ≤ 10^5) — the number of wizards, and K (1 ≤ K ≤ 10^9) — the maximum allowed power difference for communication. The second line contains N integers P1, P2, ..., PN (1 ≤ Pi ≤ 10^9) — the power levels of the wizards, listed in the order they are standing in the circle. Output Output \\"Yes\\" if the message can be relayed to all wizards, otherwise output \\"No\\". Examples Input 5 3 6 3 9 12 15 Output No Input 6 5 1 2 3 8 7 5 Output Yes Explanation In the first example, the power level differences between adjacent wizards (6 and 3, 3 and 9, etc.) are all greater than the threshold K=3, making communication impossible across the circle. In the second example, a sequence of wizards with power levels 1, 2, and 3 can communicate. Then, wizard with power level 8 can communicate with wizard with power level 7 directly, and wizard with power level 7 can communicate with wizard with power level 5. Finally, wizard with power level 5 can communicate with wizard with power level 3. Hence, the message can be relayed to all wizards using the circle.","solution":"def can_relay_message(N, K, power_levels): Determine if a message can be relayed among all wizards in a circle given the power levels and a maximum allowed power difference. Parameters: N (int): Number of wizards K (int): Maximum allowed difference in power level for communication power_levels (list): List of power levels of the wizards Returns: str: \\"Yes\\" if message can be relayed to all wizards, otherwise \\"No\\" # Check if the power difference between each adjacent wizard is within the threshold K for i in range(N): if abs(power_levels[i] - power_levels[(i + 1) % N]) > K: return \\"No\\" return \\"Yes\\""},{"question":"A company has developed an application with a messaging feature. Each message is represented as a node, and each direct reply to a message forms an edge between nodes, thus constructing a tree of messages. Given such a tree structure, the company wants to find the total number of different paths that can exist between any two distinct messages in the tree. Your task is to write a program that computes the total number of unique paths in the messaging tree. Input The first input line contains an integer n (2 ≤ n ≤ 1000) — the number of messages (nodes) in the tree. The following n - 1 lines contain the description of the edges. Each line contains a pair of integers, ai and bi (1 ≤ ai, bi ≤ n), which indicate that there is a direct reply between message ai and message bi. Output Output a single integer: the total number of unique paths between any two distinct messages in the tree. Examples Input 4 1 2 1 3 3 4 Output 6 Input 5 1 2 2 3 2 4 4 5 Output 10","solution":"def count_unique_paths(n, edges): Given a tree with `n` nodes and a list of `edges` representing the edges between nodes, returns the total number of unique paths between any two distinct nodes in the tree. Args: n : int : number of nodes in the tree edges : list of tuple : list of edges, where each edge is represented by a tuple (ai, bi) Returns: int : the total number of unique paths # In a tree with n nodes, the number of unique paths between any two distinct nodes is n * (n - 1) / 2. return n * (n - 1) // 2"},{"question":"Given a string S consisting of only characters \'a\', \'b\', and \'c\', determine the minimum number of characters you need to replace to make the string such that no two adjacent characters are the same. Example 1: Input: S = \\"aab\\" Output: 1 Explanation: We can replace one \'a\' with \'c\' to make the string \\"acb\\" where no two adjacent characters are the same. Example 2: Input: S = \\"abc\\" Output: 0 Explanation: The string \\"abc\\" already does not have any two adjacent characters that are the same. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minReplacements() which takes a string S as input parameter and returns an integer, the minimum number of replacements required. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 10^5","solution":"def minReplacements(S): Returns the minimum number of replacements required to ensure no two adjacent characters are the same in string S. if not S: return 0 replacements = 0 n = len(S) for i in range(1, n): if S[i] == S[i - 1]: replacements += 1 return replacements"},{"question":"A treasure hunter has ventured into a dungeon where a legendary treasure chest is hidden. The dungeon is a grid of cells where each cell may contain obstacles, traps, or might be an empty space that the hunter can walk through. The hunter moves in steps and can move vertically or horizontally to an adjacent cell. The hunter also has the ability to use a single-use teleportation amulet that can instantly transport them to any walkable cell in the dungeon. The hunter needs to reach the treasure in the minimum number of steps. If it is impossible to reach the treasure, output \\"IMPOSSIBLE\\". -----Input----- - First line: Two integers r and c (2 le r, c le 50), the number of rows and columns in the dungeon. - Second line: Two pairs of integers, representing the starting coordinates of the hunter and the coordinates of the treasure. - Next r lines: Each containing a string of c characters, where each character can be: - ‘.’: Walkable area - ‘#’: Obstacle - Note: The starting and treasure coordinates are guaranteed to be walkable areas. -----Output----- Print the minimum number of steps required for the hunter to reach the treasure. If it is impossible to reach the treasure, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input: 4 6 (0 0) (3 3) ...... ..#... ..#. .... Sample Output: 6 Sample Input: 3 3 (0 0) (2 2) .#. #.. ..# Sample Output: IMPOSSIBLE","solution":"from collections import deque def min_steps_to_treasure(r, c, start, treasure, dungeon): def is_valid(x, y): return 0 <= x < r and 0 <= y < c and dungeon[x][y] == \'.\' def bfs(start, end): queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set([(start[0], start[1])]) while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return float(\'inf\') start = tuple(start) treasure = tuple(treasure) direct_path_steps = bfs(start, treasure) if direct_path_steps != float(\'inf\'): return direct_path_steps # Check if using teleport makes it possible min_steps = float(\'inf\') for i in range(r): for j in range(c): if dungeon[i][j] == \'.\' and (i, j) != start and (i, j) != treasure: # Try teleporting to (i, j) and then to the treasure path_to_point = bfs(start, (i, j)) path_from_point = bfs((i, j), treasure) if path_to_point < float(\'inf\') and path_from_point < float(\'inf\'): min_steps = min(min_steps, path_to_point + path_from_point) return min_steps if min_steps != float(\'inf\') else \\"IMPOSSIBLE\\""},{"question":"You are given an array of n integers and an integer k. Determine if there exist two distinct elements in the array whose difference is exactly k. -----Input----- The first line contains two integers n (2 leq n leq 10^5) and k (0 leq k leq 10^9). The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9). -----Output----- Output \\"YES\\" if there are two distinct elements in the array whose difference is exactly k. Otherwise, output \\"NO\\". You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 5 4 1 5 9 13 17 Output YES Input 4 100 1 2 3 4 Output NO -----Note----- In the first example, the difference between 5 and 1 is 4. In the second example, there is no pair of elements with a difference of 100.","solution":"def has_pair_with_difference(arr, k): Determines if there exist two distinct elements in the array whose difference is exactly k. elements = set() for num in arr: if (num + k) in elements or (num - k) in elements: return \\"YES\\" elements.add(num) return \\"NO\\" # Function to process the input and use the above function def check_pair_with_difference(n, k, arr): return has_pair_with_difference(arr, k)"},{"question":"In a city, the air quality index (AQI) is measured daily and recorded for n consecutive days. The city has a policy to issue an air quality alert whenever the AQI exceeds a certain threshold k for at least m consecutive days. Given the AQI readings for n days, your task is to determine whether an air quality alert will be issued. Input Format: The first line contains three integers n, m, and k, denoting the number of days, the required consecutive days for an alert, and the AQI threshold, respectively. The second line contains n space-separated integers representing the AQI values for each day. Output Format: Print \\"Yes\\" if an air quality alert will be issued, otherwise, print \\"No\\". Constraints: 1 ≤ n ≤ 100000 1 ≤ m ≤ n 1 ≤ k ≤ 500 1 ≤ AQI[i] ≤ 500 SAMPLE INPUT 7 3 100 80 120 130 150 90 160 170 SAMPLE OUTPUT Yes Explanation The AQI exceeds the threshold of 100 for days 2, 3, and 4 (with values 120, 130, and 150, respectively), which is 3 consecutive days. Therefore, an air quality alert will be issued.","solution":"def air_quality_alert(n, m, k, aqi_readings): Determines whether an air quality alert will be issued based on the given parameters. Parameters: n (int): Number of days m (int): Required consecutive days for an alert k (int): AQI threshold aqi_readings (list of int): AQI values for each day Returns: str: \'Yes\' if an air quality alert is issued, otherwise \'No\' consecutive_days = 0 for reading in aqi_readings: if reading > k: consecutive_days += 1 if consecutive_days == m: return \\"Yes\\" else: consecutive_days = 0 return \\"No\\""},{"question":"Write a function named `longestCommonPrefix` that takes an array of strings and returns the longest common prefix that is shared among all the strings. If there is no common prefix, the function should return an empty string. For example: - `longestCommonPrefix([\\"flower\\", \\"flow\\", \\"flight\\"])` should return `\\"fl\\"` - `longestCommonPrefix([\\"dog\\", \\"racecar\\", \\"car\\"])` should return `\\"\\"`","solution":"def longestCommonPrefix(strs): Returns the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Sort the array, the common prefix of the first and last elements will be the common prefix for the whole array strs.sort() first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Alice and Bob are playing a game on a 2D grid. The grid has dimensions h times w (height by width) and consists of cells, each of which can either be empty, contain an obstacle, or be the goal. Alice starts at the top-left corner of the grid (1, 1), and the goal is located at the bottom-right corner of the grid (h, w). Both Alice and Bob take turns to move Alice. Alice can move to an adjacent cell (up, down, left, or right) if it is empty, and she cannot move into or through cells that contain obstacles. Bob, on the other hand, can place obstacles on empty cells after each of Alice\'s moves. However, he cannot place obstacles on cells where Alice is currently located or on the goal cell. Alice and Bob both play optimally: - Alice aims to reach the goal in as few moves as possible. - Bob aims to prevent Alice from reaching the goal by placing obstacles. Determine if Alice can reach the goal or if Bob can prevent her from doing so. -----Input----- The first line contains two integers h and w (2 leq h, w leq 50), which represent the height and width of the grid, respectively. The following h lines each contain a string of w characters, representing the grid. Each character is one of the following: - \'.\' (dot) representing an empty cell, - \'#\' (hash) representing an obstacle, - \'A\' representing Alice\'s starting position (only one \'A\' present), - \'G\' representing the goal (only one \'G\' present). -----Output----- Output \\"YES\\" if Alice can reach the goal, otherwise, output \\"NO\\". -----Examples----- Input 3 3 A.. .#. ..G Output YES Input 3 3 A.. # ..G Output NO Input 4 4 A#.# .. #..# G..# Output NO -----Explanation----- In the first example, Alice moves down twice and right twice to reach the goal without Bob being able to completely block her. In the second example, the row of obstacles (#) already prevents Alice from reaching the goal, making it impossible for her to win. In the third example, the arrangement of obstacles creates a situation where Bob can place additional obstacles to block all possible paths to the goal, preventing Alice from winning.","solution":"def can_alice_reach_goal(h, w, grid): from collections import deque # Find Alice and Goal position for i in range(h): for j in range(w): if grid[i][j] == \'A\': alice_start = (i, j) elif grid[i][j] == \'G\': goal = (i, j) # Directions for movement (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to find if there\'s a path from Alice to the Goal def bfs(start, end): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < h and 0 <= ny < w and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) return False return \\"YES\\" if bfs(alice_start, goal) else \\"NO\\""},{"question":"Your task is to implement a simple text editor. The text editor performs two types of operations on a string `S`: 1. **Append**: Appends a given string `W` at the end of `S`. 2. **Delete**: Deletes the last `k` characters of `S`. The operations of the text editor are given as a list of commands. Each command is either an append operation or a delete operation. Your task is to determine the final state of the string `S` after performing all the operations. -----Input----- The first line contains an integer `m` (1 ≤ m ≤ 100) — the number of operations. Each of the following `m` lines contains a command: - If the command is an append operation, it will be in the format `1 W` where `W` is a non-empty string consisting of lowercase alphabetic letters. - If the command is a delete operation, it will be in the format `2 k` where `k` is an integer (1 ≤ k ≤ the current length of `S`). Initially, the string `S` is empty. -----Output----- Print the final state of the string `S` after performing all the operations. -----Examples----- Input 4 1 abc 1 def 2 3 1 ghi Output abcghi Input 3 1 hello 1 world 2 5 Output hello Input 5 1 a 1 b 1 c 2 2 1 xy Output axy -----Note----- In the first example: 1. Append \\"abc\\" to the empty string S. Now, S = \\"abc\\" 2. Append \\"def\\". Now, S = \\"abcdef\\" 3. Delete the last 3 characters. Now, S = \\"abc\\" 4. Append \\"ghi\\". Now, S = \\"abcghi\\" In the third example: 1. Append \\"a\\" to the empty string S. Now, S = \\"a\\" 2. Append \\"b\\". Now, S = \\"ab\\" 3. Append \\"c\\". Now, S = \\"abc\\" 4. Delete the last 2 characters. Now, S = \\"a\\" 5. Append \\"xy\\". Now, S = \\"axy\\"","solution":"def simple_text_editor(operations): Performs append and delete operations on a string S based on given list of operations. Parameters: operations (list): A list of operations where each operation is one of: - [\'1\', W] where W is a string to append - [\'2\', k] where k is the number of characters to delete Returns: str: The final state of string S after performing all the operations. S = \\"\\" for operation in operations: if operation[0] == \'1\': S += operation[1] elif operation[0] == \'2\': S = S[:-int(operation[1])] return S"},{"question":"Given a string s consisting of lowercase English alphabets and an integer k, the task is to find the largest lexicographical string that can be obtained by changing at most k characters in the string. You can change any character in the string to any other lowercase English character. Example 1: Input: s = \\"abcde\\" k = 2 Output: \\"ebcde\\" Explanation: By changing \'a\' to \'e\', the largest lexicographical string that can be obtained is \\"ebcde\\". Example 2: Input: s = \\"abcd\\" k = 1 Output: \\"dbcd\\" Explanation: By changing \'a\' to \'d\', the largest lexicographical string that can be obtained is \\"dbcd\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function largestString() that takes string s and integer k as input parameters and returns the required answer. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |s| ≤ 10^{5}","solution":"def largestString(s, k): Find the largest lexicographical string by changing at most k characters in the string. Parameters: s (str): Input string consisting of lowercase English alphabets. k (int): Maximum number of characters that can be changed. Returns: str: The largest lexicographical string that can be obtained. s_list = list(s) changes = 0 # Iterate over the string for i in range(len(s_list)): if changes < k: # Determine the highest possible character to replace current one with highest_possible = \'z\' # If changing the current character helps (i.e., it is not \'z\') if s_list[i] != highest_possible: s_list[i] = highest_possible changes += 1 return \'\'.join(s_list)"},{"question":"You are given an undirected connected graph with N nodes and M edges. Each edge has an integer weight. You are asked to perform Q queries on this graph. Each query contains two nodes u and v, and you are required to find the weight of the minimum weight edge in the unique path between u and v. # Constraints - 2 ≤ N ≤ 10^5 - 1 ≤ M ≤ 2 × 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ weight of each edge ≤ 10^9 - 1 ≤ u, v ≤ N - The graph is connected, meaning there is always a path between any two nodes. # Input Input is given from Standard Input in the following format: ``` N M u1 v1 w1 u2 v2 w2 ... uM vM wM Q u1 v1 u2 v2 ... uQ vQ ``` - The first line contains two integers, N and M, the number of nodes and edges in the graph. - The next M lines each contain three integers u_i, v_i, and w_i, indicating there is an edge between nodes u_i and v_i with weight w_i. - The next line contains a single integer Q, the number of queries. - The next Q lines each contain two integers u_j and v_j, the nodes involved in the j-th query. # Output Print Q lines; the i-th line should be the weight of the minimum weight edge in the unique path between nodes u and v for the i-th query. # Sample Input ``` 5 4 1 2 3 2 3 7 3 4 2 4 5 5 3 1 3 2 4 1 5 ``` # Sample Output ``` 3 2 2 ``` # Explanation For the first query, the unique path between nodes 1 and 3 is 1-2-3 with weights [3, 7]. The minimum weight edge is 3. For the second query, the unique path between nodes 2 and 4 is 2-3-4 with weights [7, 2]. The minimum weight edge is 2. For the third query, the unique path between nodes 1 and 5 is 1-2-3-4-5 with weights [3, 7, 2, 5]. The minimum weight edge is 2.","solution":"def dfs(graph, node, parent, depth, parent_edge_weight, depth_list, parent_list, min_edge_weight_list): depth_list[node] = depth parent_list[node] = parent min_edge_weight_list[node] = parent_edge_weight for neighbor, weight in graph[node]: if neighbor != parent: dfs(graph, neighbor, node, depth + 1, weight, depth_list, parent_list, min_edge_weight_list) def lca_preprocess(graph, N): LOG = 17 # Since 2^17 > 10^5 depth_list = [0] * (N + 1) parent_list = [-1] * (N + 1) min_edge_weight_list = [float(\'inf\')] * (N + 1) # Binary lifting tables dp = [[-1] * (N + 1) for _ in range(LOG)] min_edge = [[float(\'inf\')] * (N + 1) for _ in range(LOG)] dfs(graph, 1, -1, 0, float(\'inf\'), depth_list, parent_list, min_edge_weight_list) for i in range(1, N + 1): dp[0][i] = parent_list[i] min_edge[0][i] = min_edge_weight_list[i] for j in range(1, LOG): for i in range(1, N + 1): if dp[j-1][i] != -1: dp[j][i] = dp[j-1][dp[j-1][i]] min_edge[j][i] = min(min_edge[j-1][i], min_edge[j-1][dp[j-1][i]]) return dp, min_edge, depth_list def find_lca(dp, min_edge, depth_list, u, v): LOG = 17 if depth_list[u] < depth_list[v]: u, v = v, u min_weight = float(\'inf\') for i in range(LOG - 1, -1, -1): if depth_list[u] - (1 << i) >= depth_list[v]: min_weight = min(min_weight, min_edge[i][u]) u = dp[i][u] if u == v: return min_weight for i in range(LOG - 1, -1, -1): if dp[i][u] != dp[i][v]: min_weight = min(min_weight, min_edge[i][u], min_edge[i][v]) u = dp[i][u] v = dp[i][v] min_weight = min(min_weight, min_edge[0][u], min_edge[0][v]) return min_weight def solution(N, M, edges, Q, queries): from collections import defaultdict graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dp, min_edge, depth_list = lca_preprocess(graph, N) results = [] for u, v in queries: results.append(find_lca(dp, min_edge, depth_list, u, v)) return results"},{"question":"In a magical land, there are several cities connected by bidirectional roads. These cities form a connected graph, i.e., there\'s a path between any pair of cities via the roads. A traveler wants to tour these cities but with a special kind of constraint. The traveler wants his travel path to be such that he visits each city exactly once and returns to the starting city, forming a cycle with a particular property: The absolute difference in the number of cities visited on any two consecutive days should not exceed a given threshold. This threshold is denoted by k. Formally, if the traveler visits cities in order a1, a2, ..., an, a1, then for any two consecutive cities ai and aj, |i - j| ≤ k must hold, where 1 ≤ i, j ≤ n. Find the number of possible travel cycles the traveler can take given the above constraints. Since the answer can be large, output it modulo 10^9 + 7. Input: The first line of input contains two integers n and k, where n denotes the number of cities and k denotes the threshold. The next n-1 lines contain two integers u and v, indicating there is a bidirectional road between city u and city v. Output: Output the number of possible travel cycles modulo 10^9 + 7. Constraints: 1 ≤ n ≤ 100 1 ≤ k ≤ n-1 1 ≤ u, v ≤ n SAMPLE INPUT 4 2 1 2 2 3 3 4 SAMPLE OUTPUT 8 Explanation: All valid travel cycles where the absolute difference in number of cities visited on consecutive days does not exceed 2 are: - 1 -> 2 -> 3 -> 4 -> 1 - 1 -> 2 -> 4 -> 3 -> 1 - 1 -> 3 -> 2 -> 4 -> 1 - 1 -> 3 -> 4 -> 2 -> 1 - 1 -> 4 -> 2 -> 3 -> 1 - 1 -> 4 -> 3 -> 2 -> 1 - 2 -> 1 -> 3 -> 4 -> 2 - 2 -> 1 -> 4 -> 3 -> 2 So the output is 8.","solution":"def count_cycles(n, k, roads): MOD = 10**9 + 7 from itertools import permutations def is_valid_cycle(permutation, k): for i in range(len(permutation)): if abs(permutation[i] - permutation[(i+1) % len(permutation)]) > k: return False return True cities = [i + 1 for i in range(n)] valid_cycles = 0 for perm in permutations(cities): if is_valid_cycle(perm, k): valid_cycles += 1 return valid_cycles % MOD"},{"question":"Given a list of non-negative integers, `nums`, we are to determine if it is possible to partition the list into two subsets such that the sum of elements in both subsets is equal. Function Description Complete the `canPartition` function in the editor below. The function must return a boolean value (`True` or `False`) that tells if `nums` can be partitioned into two subsets with equal sum. `canPartition` has the following parameter: `nums`: a list of non-negative integers Input Format A single line containing a list of non-negative integers `nums`. Constraints - All elements in `nums` are non-negative and do not exceed `100`. - 1 <= len(nums) <= 200 Output Format Return `True` if the list can be partitioned into two subsets with equal sum, otherwise return `False`. Sample Input [1, 5, 11, 5] Sample Output True Explanation The array can be partitioned as `[1, 5, 5]` and `[11]`. Both subsets sum to 11. Sample Input [1, 2, 3, 5] Sample Output False Explanation The array cannot be partitioned into subsets that have equal sum.","solution":"def canPartition(nums): total_sum = sum(nums) # If total sum is odd, it\'s not possible to divide it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # To check whether a subset with sum \'target\' exists n = len(nums) dp = [False] * (target + 1) dp[0] = True # There is always a subset with sum 0 (empty subset) for num in nums: # Traverse dp array from back to avoid using the same item more than once for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"You are given an integer array of length n and a sequence of q queries. Each query provides two integers l and r such that 1 leq l leq r leq n. Your task is to find the sum of all elements between the l-th and r-th positions (inclusive) for each query. The l-th and r-th positions are both one-based indices within the array. You should pre-process the array to support efficient summation queries. -----Input----- The first line contains two integers n and q (1 le n, q le 100) — the length of the array and the number of queries. The second line contains n integers a_i (1 le a_i le 100) — the elements of the array. The next q lines contain two integers each l and r (1 le l le r le n) — the indices for each query. -----Output----- For each query, print a single integer — the sum of elements from the l-th to the r-th position in the array. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15 Input 4 2 4 3 2 1 1 2 3 4 Output 7 3 -----Note----- In the first example, the sum of elements from position 1 to 3 is 1 + 2 + 3 = 6, the sum from position 2 to 4 is 2 + 3 + 4 = 9, and the sum from position 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15. In the second example, the sum of elements from position 1 to 2 is 4 + 3 = 7, and the sum from position 3 to 4 is 2 + 1 = 3.","solution":"def preprocess_and_sum(n, q, arr, queries): # Preprocessing the array to create prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] # Function to answer the sum query using prefix sums def range_sum(l, r): return prefix_sums[r] - prefix_sums[l - 1] # Answer each query results = [] for l, r in queries: results.append(range_sum(l, r)) return results"},{"question":"**Problem:** Taylor, an enthusiastic baker, loves to bake a variety of pastries. He meticulously notes down the recipe for each pastry, specifying the exact amount of ingredients required. One day, Taylor noticed that there\'s a pattern in the recipe notes that he wants to tap into for easier scaling. If two or more ingredients have measurements adding up to the same value, it suggests the recipe could be optimized. Given a list of ingredient measurements (positive integers), determine whether there\'s any subset of these measurements that sum to the same value (excluding the empty subset). If such subsets exist, return \\"YES\\", otherwise return \\"NO\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 30) — the number of ingredients. The next line contains n space-separated integers (each between 1 and 1000) representing the measurements of the ingredients. -----Output----- Output \\"YES\\" if there exist two different non-empty subsets of the ingredients that sum to the same value. Output \\"NO\\" otherwise. -----Examples----- Input 4 1 2 3 6 Output YES Input 3 1 1 1 Output YES Input 3 1 5 7 Output NO","solution":"def can_find_equal_subset_sums(n, measurements): from itertools import combinations subset_sums = {} # Generate all subsets except the empty subset for i in range(1, n + 1): for subset in combinations(measurements, i): subset_sum = sum(subset) if subset_sum in subset_sums: return \\"YES\\" subset_sums[subset_sum] = subset return \\"NO\\""},{"question":"Write a function that takes a string input and returns the string in reverse order. The function should preserve the original case of each character and reverse all punctuation. For example: ``` \\"Hello, World!\\" should return \\"!dlroW ,olleH\\" \\"Python 3.8\\" should return \\"8.3 nohtyP\\" ```","solution":"def reverse_string(s): Returns the input string in reverse order, preserving the original case of each character and reversing all punctuation. return s[::-1]"},{"question":"Bob has a collection of marbles, each marble being either black or white. Bob wants to know the number of distinct ways he can arrange all the marbles such that no two white marbles are consecutive. Given the number of black marbles `B` and white marbles `W`, return the number of valid arrangements. Example 1: Input: B = 3, W = 2 Output: 6 Explanation: The valid arrangements are BBWBW, BWBBW, BBWBB, BWBBW, WBBBW, WBBWB. Example 2: Input: B = 1, W = 4 Output: 0 Explanation: No arrangement can ensure no two white marbles are consecutive. Example 3: Input: B = 0, W = 3 Output: 0 Explanation: No arrangement can ensure no two white marbles are consecutive if there are no black marbles. Example 4: Input: B = 5, W = 0 Output: 1 Explanation: The only arrangement is BBBBB. Note: 1 <= B <= 100 1 <= W <= 100 The answer is guaranteed to fit within a 32-bit signed integer.","solution":"import math def count_arrangements(B, W): Returns the number of valid arrangements such that no two white marbles are consecutive. # If there are no black marbles or more white marbles than black + 1, return 0 if B == 0 or W > B + 1: return 0 # Using combinatorics to calculate valid arrangements. return math.comb(B + 1, W)"},{"question":"Binary Tree - Max Depth Implement a function MaxDepth() to find the maximum depth of a binary tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. The `Node` class is pre-defined and has attributes `value`, `left`, and `right`. The constructor initializes the node with a value and optionally left and right child nodes as follows: ```python class Node: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right ``` Example: Given the binary tree: ``` 1 / 2 3 / 4 5 ``` The function should return `3`, since the longest path from the root to a leaf node is `1 -> 2 -> 4` or `1 -> 2 -> 5`, both of length 3. You do not need to redefine the `Node` class. Here is the function signature: ```python def MaxDepth(root): # Your code here ```","solution":"def MaxDepth(root): Returns the maximum depth of a binary tree. if not root: return 0 left_depth = MaxDepth(root.left) right_depth = MaxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"You are organizing the class schedule for a university. Each course has a specific duration and a list of prerequisite courses that must be completed before it can be taken. Your task is to find the shortest possible time to complete all courses, considering that multiple courses cannot be taken at the same time and prerequisite courses must be completed first. -----Input----- The first line contains an integer N, the number of courses, where 1 leq N leq 10^4. The next N lines each contain a course description. Each description starts with an integer D_i (the duration of the course i) and an integer P_i (the number of prerequisites for the course i). The next P_i integers denote the indices of the prerequisite courses. It is guaranteed that there are no cyclic dependencies in the course prerequisites. -----Output----- Output a single integer, the minimum time to complete all courses. -----Examples----- Sample Input 1: 3 3 0 2 1 1 5 1 2 Sample Output 1: 10 Sample Input 2: 4 4 0 3 1 1 2 1 2 1 2 2 3 Sample Output 2: 10","solution":"def minimum_time_to_complete_courses(N, course_info): from collections import deque, defaultdict duration = [0] * (N + 1) prerequisites = defaultdict(list) in_degree = [0] * (N + 1) for i in range(N): data = course_info[i] D_i, P_i = data[0], data[1] duration[i + 1] = D_i for idx in data[2:]: prerequisites[idx].append(i + 1) in_degree[i + 1] += 1 queue = deque() time_to_complete = [0] * (N + 1) for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) time_to_complete[i] = duration[i] while queue: curr = queue.popleft() for dependent in prerequisites[curr]: in_degree[dependent] -= 1 time_to_complete[dependent] = max(time_to_complete[dependent], time_to_complete[curr] + duration[dependent]) if in_degree[dependent] == 0: queue.append(dependent) return max(time_to_complete)"},{"question":"Your task is to find the shortest sequence of characters in a given string that contains all the distinct characters of the string at least once, but in any order. Create a function named `shortest_char_sequence`. The function should take a single string as input and return a string which is the shortest sequence that contains all distinct characters in the input string. For example, if the input string is `\'abbacad\'`, the result should be `\'bacd\'`. If there are multiple shortest sequences, return any one of them. Here are some additional examples: ```python shortest_char_sequence(\'abcdabababcd\') # can return \'abcd\' shortest_char_sequence(\'aabbcc\') # can return \'abc\' shortest_char_sequence(\'abacb\') # can return \'acb\' ```","solution":"def shortest_char_sequence(s): Returns the shortest sequence that contains all distinct characters in the input string s. return \'\'.join(set(s))"},{"question":"In a small village, there is only one path connecting n houses, numbered from 1 to n. The path is essentially a straight line, and each house lies on this path at specified coordinates. All houses are connected by roads that run along this line. People in the village are tired of traveling long distances to visit their friends. To make life easier, the village chief decided to install a new teleportation device at some position on the path. This device will allow someone standing at any house to instantly reach the device\'s position and then travel to their destination house. For efficiency, the device should be placed at a position that minimizes the total travel distance that people need to walk after using the device. Given the coordinates of the n houses, find the optimal position to install the teleportation device that minimizes the total travel distance for all villagers. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of houses. The second line contains n space-separated integers x_1, x_2, ..., x_n (1 ≤ x_i ≤ 10^9) — the coordinates of the houses. Output Output the coordinate of the position where the teleportation device should be installed to minimize the total travel distance. If there are multiple optimal positions, output the smallest one. Example Input 5 2 3 7 8 12 Output 7 Note In the example, if the teleportation device is installed at position 7, the total travel distance is minimized. Villagers from houses at positions 2 and 3 walk to 7, and villagers from houses at positions 8 and 12 walk from 7 to their destinations. The total travel distance is minimized in this case.","solution":"def find_teleportation_position(n, coordinates): Finds the optimal position to install the teleportation device to minimize the total travel distance. Parameters: n (int): The number of houses. coordinates (List[int]): The coordinates of the houses. Returns: int: The coordinate of the optimal position. coordinates.sort() return coordinates[(n - 1) // 2]"},{"question":"Consider a mobile robot that navigates a 2D grid, represented as an n x n matrix. The grid contains some obstacles, and the robot can only move up, down, left, or right. The robot always starts at the top-left corner of the grid (position (0, 0)) and aims to reach the bottom-right corner (position (n-1, n-1)). Not every cell in the grid can be traversed due to obstacles. Write a program to determine the number of distinct paths the robot can take to reach its destination. The grid is represented as a matrix of 0s and 1s, where 0 represents an open cell and 1 represents an obstacle. Input - The first line contains an integer n (1 ≤ n ≤ 100) - the size of the grid. - The following n lines each contain n integers (0 or 1) separated by space, representing the grid. Output - Print a single integer that represents the number of distinct paths from the top-left corner to the bottom-right corner. Examples Input 4 0 0 0 0 0 1 0 1 0 0 0 0 1 0 1 0 Output 2 Input 3 0 1 0 0 0 1 1 0 0 Output 1 Note In the first sample, there are two distinct paths from (0, 0) to (3, 3): 1. Right -> Right -> Down -> Down -> Left -> Down -> Right 2. Down -> Down -> Right -> Right -> Up -> Right -> Down In the second sample, there is only one possible path: 1. Right -> Down -> Down","solution":"def count_paths(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Example usage if __name__ == \\"__main__\\": n = int(input()) grid = [list(map(int, input().split())) for _ in range(n)] print(count_paths(grid))"},{"question":"problem You are given a set of integers which represent the scores of participants in a competition. Your task is to process these scores to extract meaningful statistics. You need to write a program that will calculate the following: 1. The highest score. 2. The lowest score. 3. The mean score (calculated to two decimal places). 4. The median score (if even number of participants, the median is the average of the two middle scores, also to two decimal places). You are required to produce a report in a specific format. The input consists of multiple datasets, and for each dataset, the output should present the above statistics in the specified format. # Input The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1000), the number of scores, followed by n integers representing the scores (each score is between 0 and 1000). The input ends when n = 0. # Output For each dataset, output the following lines: 1. \\"Highest score: x\\", where x is the highest score in the dataset. 2. \\"Lowest score: y\\", where y is the lowest score in the dataset. 3. \\"Mean score: z\\", where z is the mean (average) of the scores in the dataset, formatted to two decimal places. 4. \\"Median score: w\\", where w is the median of the scores in the dataset, formatted to two decimal places. Separate outputs for different datasets with a blank line. # Example Input ``` 5 90 100 78 85 92 4 88 75 95 82 0 ``` Output ``` Highest score: 100 Lowest score: 78 Mean score: 89.00 Median score: 90.00 Highest score: 95 Lowest score: 75 Mean score: 85.00 Median score: 85.00 ``` # Note Make sure to handle the edge case where there could be very small or very large datasets efficiently. Use appropriate data structures to sort and compute the statistics to meet the requirements.","solution":"def process_scores(scores): Process a list of scores to calculate the highest, lowest, mean, and median scores. n = len(scores) highest_score = max(scores) lowest_score = min(scores) mean_score = sum(scores) / n sorted_scores = sorted(scores) if n % 2 == 0: median_score = (sorted_scores[n//2 - 1] + sorted_scores[n//2]) / 2 else: median_score = sorted_scores[n // 2] return (highest_score, lowest_score, round(mean_score, 2), round(median_score, 2)) def generate_report(datasets): Given multiple datasets, generate the required statistical report for each dataset. reports = [] for scores in datasets: report = process_scores(scores) reports.append(f\\"Highest score: {report[0]}n\\" f\\"Lowest score: {report[1]}n\\" f\\"Mean score: {report[2]:.2f}n\\" f\\"Median score: {report[3]:.2f}n\\") return \\"n\\".join(reports)"},{"question":"Unique Sorting You are given an array of integers. Your task is to sort this array such that if two different numbers have the same frequency of occurrence, they should appear in ascending order based on their value. If two or more numbers have different frequencies, they should appear in descending order based on their frequency. Task Given a list `lst`, sort it so that numbers with higher frequency come first. For numbers with the same frequency, sort them in ascending order. Return the sorted list. # Example: ```python unique_sort([1, 2, 3, 1, 2, 1, 2, 3]) # return [1, 1, 1, 2, 2, 2, 3, 3] unique_sort([4, 4, 4, 1, 2, 3, 4, 5, 5, 5, 5]) # return [4, 4, 4, 4, 5, 5, 5, 5, 1, 2, 3] ``` # Constraints: * The input array will contain only integers. * The output array should maintain the integers sorted as described. * Aim for a solution with an efficient time complexity.","solution":"from collections import Counter def unique_sort(lst): Sorts the array such that numbers with higher frequency come first. Numbers with the same frequency should appear in ascending order. # Count the frequency of each number in the list freq = Counter(lst) # Sort the list by (-frequency, number) sorted_lst = sorted(lst, key=lambda x: (-freq[x], x)) return sorted_lst"},{"question":"Alice and Bob are playing a game with arrays. They are given an array of integers, and the game consists of performing a series of operations to transform the array to meet a specific goal. The operation they can perform is to select any two different elements of the array, remove them, and insert their sum back into the array. They want to know if it\'s possible to make all elements of the array equal using any number of these operations. Write a function that determines whether it\'s possible to transform the given array so that all its elements are the same. Input The input consists of three lines: 1. An integer n (1 ≤ n ≤ 100000), the size of the array. 2. An integer m (1 ≤ m ≤ 1000000000), the maximum possible value of an element after the operations. 3. n space-separated integers representing the elements of the array. Output Print \\"YES\\" if it\'s possible to make all the elements equal, otherwise print \\"NO\\". Examples Input 3 5 1 2 3 Output YES Input 4 10 1 2 2 4 Output NO Notes In the first example, you can perform the following operations: 1. Add 1 and 2 to get 3. The array becomes [3, 3]. 2. Add 3 and 3 (the only operation left) to get 6. The array becomes [6]. Since m is 5, you can re-adjust the maximum value down to every element being equal to 5. Thus, the output is \\"YES\\". In the second example, it\'s impossible to make the remaining element from any series of operations equal to another value without exceeding the allowed maximum value m (10). Thus, the output is \\"NO\\".","solution":"def can_make_equal(n, m, array): Determines if it\'s possible to make all elements of the array equal using the described operation. Args: n: int : size of the array m: int : maximum possible value of an element after operations array : list[int] : the input array elements Returns: str : \\"YES\\" if possible, otherwise \\"NO\\" # Sum of the array elements total_sum = sum(array) # If the total sum can be evenly divided by n, and the quotient is less than or equal to m return \\"YES\\" if total_sum % n == 0 and total_sum // n <= m else \\"NO\\""},{"question":"Create a function called `CheckAscendingOrder` that takes an integer array as input and returns true if every integer in the array is strictly greater than the previous integer. For simplicity, assume that the array contains at least two integers. For example: ```python numbers1 = [1, 2, 3, 4, 5] numbers2 = [1, 2, 2, 4, 5] numbers3 = [5, 4, 3, 2, 1] CheckAscendingOrder(numbers1); # true CheckAscendingOrder(numbers2); # false CheckAscendingOrder(numbers3); # false ``` - `numbers1` is in strictly increasing order (1 < 2 < 3 < 4 < 5) - `numbers2` is not in strictly increasing order because 2 is not less than 2 - `numbers3` is in decreasing order, so it does not meet the requirement","solution":"def CheckAscendingOrder(arr): Returns True if every integer in the array is strictly greater than the previous integer. :param arr: List of integers :return: Boolean for i in range(len(arr) - 1): if arr[i] >= arr[i+1]: return False return True"},{"question":"You are given a list of integers representing the heights of a set of hills. The aim is to check if you can start from the first hill and jump from one hill to another until you reach the last one. Each hill has a height and the height difference between two consecutive jumps should not exceed a given threshold. You will be given the list of heights and the threshold number. For example: * If the heights are `[1, 3, 5, 8, 10]` and the threshold is `3`, then you can jump from the first to the second hill (height difference `2`), from the second to the third hill (height difference `2`), from the third to the fourth hill (height difference `3`), and from the fourth to the fifth hill (height difference `2`). Thus, it is possible to reach the last hill. * If the heights were `[1, 4, 7, 11, 14]` and the threshold was `2`, then it would be impossible to reach the last hill because the difference between the heights of the first and second hill exceeds the threshold. Task Overview Complete the function which takes a list of integers representing the heights of the hills and an integer representing the maximum threshold for the height difference and returns `True` if it\'s possible to jump from the first hill to the last hill within the given threshold, otherwise returns `False`.","solution":"def can_reach_last_hill(heights, threshold): Determines if it is possible to jump from the first hill to the last hill within the given threshold for height differences between consecutive hills. Parameters: heights (list): List of integers representing the heights of the hills. threshold (int): Maximum allowed height difference between consecutive hills. Returns: bool: `True` if it is possible to reach the last hill, `False` otherwise. for i in range(1, len(heights)): if abs(heights[i] - heights[i - 1]) > threshold: return False return True"},{"question":"You are given an array of positive integers. The task is to find the maximum product of two distinct elements in the array, modulo 1000000007. Input: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains an integer `N`, the number of elements in the array. - The second line contains `N` space-separated integers representing the elements of the array. Output: For each test case, print the maximum product of two distinct elements modulo 1000000007. Constraints: - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 10^5 - 1 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 5 1 10 3 7 9 3 8 7 6 SAMPLE OUTPUT 90 56","solution":"def max_product_modulo(arr): MOD = 1000000007 if len(arr) < 2: return 0 max1 = max2 = -1 for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num product = max1 * max2 return product % MOD def solve(test_cases): results = [] for arr in test_cases: results.append(max_product_modulo(arr)) return results # Example usage: # test_cases = [[1, 10, 3, 7, 9], [8, 7, 6]] # results = solve(test_cases) # for result in results: # print(result)"},{"question":"Given a matrix of integers and a series of operations, your task is to determine the final state of the matrix after applying all the operations. Each operation is defined as incrementing all the elements within a submatrix by a given value. Input The first line contains three integers n, m, q (1 ≤ n, m ≤ 1 000, 1 ≤ q ≤ 100 000) — the number of rows, columns, and operations respectively. The next n lines contain m integers each, representing the initial state of the matrix. Each integer is in the range -10^9 to 10^9. The next q lines contain five integers each: r1, c1, r2, c2, v (1 ≤ r1, r2 ≤ n, 1 ≤ c1, c2 ≤ m, r1 ≤ r2, c1 ≤ c2, -10^5 ≤ v ≤ 10^5). For each operation, increment every element in the submatrix from (r1, c1) to (r2, c2) by v. Output Output the final state of the matrix after all operations. Example Input 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 10 2 2 3 3 5 Output 11 12 3 14 20 11 7 13 14 Note In the example, the initial matrix is: 1 2 3 4 5 6 7 8 9 After the first operation (increment submatrix from (1, 1) to (2, 2) by 10): 11 12 3 14 15 6 7 8 9 After the second operation (increment submatrix from (2, 2) to (3, 3) by 5): 11 12 3 14 20 11 7 13 14","solution":"def increment_submatrix(n, m, q, matrix, operations): # Applying each operation to the matrix for operation in operations: r1, c1, r2, c2, v = operation # Correcting 1-based indexing to 0-based r1 -= 1 c1 -= 1 r2 -= 1 c2 -= 1 # Applying the increment to the specified submatrix for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): matrix[i][j] += v return matrix # Input example n = 3 m = 3 q = 2 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] operations = [ (1, 1, 2, 2, 10), (2, 2, 3, 3, 5) ] # Usage example result_matrix = increment_submatrix(n, m, q, matrix, operations) print(result_matrix)"},{"question":"Mona is creating a recipe for a large batch of cookies. Each cookie requires exactly X grams of flour. Mona has a bag containing F grams of flour. She plans to bake as many whole cookies as possible. Your task is to determine the maximum number of complete cookies Mona can bake and the remaining grams of flour after baking those cookies. ------ Input Format ------ - The first line contains two space-separated integers F and X - as per the problem statement. ------ Output Format ------ - Print in a single line, two space-separated integers representing the maximum number of complete cookies Mona can bake and the remaining grams of flour. ------ Constraints ------ 1 ≤ F, X ≤ 1000 ------ subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 500 100 ----- Sample Output 1 ------ 5 0 ----- explanation 1 ------ With 500 grams of flour (F) and each cookie requiring 100 grams (X), Mona can bake 500 div 100 = 5 cookies with no flour left. ----- Sample Input 2 ------ 600 120 ----- Sample Output 2 ------ 5 0 ----- explanation 2 ------ With 600 grams of flour (F) and each cookie requiring 120 grams (X), Mona can bake 600 div 120 = 5 cookies with no flour left. ----- Sample Input 3 ------ 550 120 ----- Sample Output 3 ------ 4 70 ----- explanation 3 ------ With 550 grams of flour (F) and each cookie requiring 120 grams (X), Mona can bake 550 div 120 = 4 cookies and will have 550 % 120 = 70 grams of flour remaining.","solution":"def max_cookies(F, X): Given the total amount of flour and the amount of flour required per cookie, returns the maximum number of whole cookies that can be baked and the remaining flour. max_complete_cookies = F // X remaining_flour = F % X return max_complete_cookies, remaining_flour"},{"question":"You are working on a drone delivery system in a city represented as a grid of streets and avenues. Each intersection in the city can be represented as a coordinate (x, y). The drone needs to pick up packages from a warehouse at (0, 0) and deliver them to various destinations within the grid. The drone can move up, down, left, or right by one unit in each move. You need to find the minimum number of moves required for the drone to deliver packages from the warehouse to each destination. Given the coordinates of multiple destinations, determine the minimum number of moves required for each destination. Input Each test contains one or more test cases. The first line contains a single integer t (1 ≤ t ≤ 10^5) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of destinations. Each of the next n lines contains two integers x and y (|x|, |y| ≤ 10^5) — the coordinates of a destination. Output For each test case, output n lines, each containing the minimum number of moves required to deliver a package to the corresponding destination. Examples Input 2 3 1 2 3 4 -1 -1 2 0 0 1 1 Output 3 7 2 0 2 Note In the first example: - To reach (1, 2) from (0, 0), the drone needs to move 1 step right and 2 steps up, making a total of 3 moves. - To reach (3, 4), the drone needs 3 steps right and 4 steps up, making a total of 7 moves. - To reach (-1, -1), the drone needs 1 step left and 1 step down, making a total of 2 moves. In the second example: - To reach (0, 0) from (0, 0), the drone needs 0 moves. - To reach (1, 1), the drone needs 1 step right and 1 step up, making a total of 2 moves.","solution":"def min_moves_to_destinations(test_cases): results = [] for n, destinations in test_cases: for x, y in destinations: moves = abs(x) + abs(y) results.append(moves) return results"},{"question":"Given a string s, write a function to determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Input A single line containing the string s (1 ≤ |s| ≤ 10^5). Output Print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO Input 0P Output NO","solution":"def is_palindrome(s): Returns \'YES\' if the given string s is a palindrome, ignoring non-alphanumeric characters and case differences. Otherwise returns \'NO\'. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse if filtered_chars == filtered_chars[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"# Task You are given a list of strings `words` and an integer `k`. Your task is to find and return the `k` most frequent words from the list. The output words should be sorted by their frequency in descending order, and if two words have the same frequency, they should be sorted lexicographically in ascending order. # Example For `words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"]` and `k = 2`, the output should be `[\\"apple\\", \\"banana\\"]`. For `words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"]` and `k = 4`, the output should be `[\\"the\\", \\"is\\", \\"sunny\\", \\"day\\"]`. # Input/Output - `[input]` array of strings `words` A non-empty list of words. Each word consists of lowercase English letters only. Constraints: `1 ≤ words.length ≤ 10^4`, `1 ≤ words[i].length ≤ 10`. - `[input]` integer `k` A positive integer representing the number of most frequent words to return. Constraints: `1 ≤ k ≤ numbers.length`. - `[output]` a list of strings The `k` most frequent words from the input list. If two words have the same frequency, order them lexicographically.","solution":"from collections import Counter import heapq def top_k_frequent(words, k): Returns the k most frequent words from the list. Words are sorted by frequency in descending order, and lexicographically in ascending order if frequencies are equal. # Count the frequency of each word count = Counter(words) # Use heap to store words by frequency and lexicographical order heap = [(-freq, word) for word, freq in count.items()] heapq.heapify(heap) # Extract the k most frequent words result = [] for _ in range(k): freq, word = heapq.heappop(heap) result.append(word) return result"},{"question":"Given a string s consisting of lowercase English letters, you need to determine the maximum number of substrings you can create from s, such that each substring does not contain any repeated character. Example 1: Input: s = \\"abac\\" Output: 4 Explanation: We can split the string into \\"a\\", \\"b\\", \\"a\\", \\"c\\". Each substring does not contain any repeated characters. Example 2: Input: s = \\"aaaa\\" Output: 4 Explanation: We can split the string into \\"a\\", \\"a\\", \\"a\\", \\"a\\". Each substring does not contain any repeated characters. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxUniqueSubstrings() which takes a string s as input and returns an integer representing the maximum number of substrings without repeated characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^3","solution":"def maxUniqueSubstrings(s): Determines the maximum number of substrings that can be created from string s such that each substring does not contain any repeated character. if not s: return 0 last_seen = {} start = -1 max_substrings = 0 for index, char in enumerate(s): # When we encounter a previously seen character, we start a new substring if char in last_seen and last_seen[char] > start: start = last_seen[char] last_seen[char] = index max_substrings += 1 return max_substrings"},{"question":"A software company is conducting a coding assessment for a potential candidate. The candidate is given the task to help the team design a system for efficiently storing and querying user logs. Each log entry consists of a username and a timestamp indicating when the user logged in. The task is to process a sequence of operations where the candidate needs to handle two types of queries: 1. Add a log entry for a user. 2. Retrieve the number of unique users who logged in during a specified time interval. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer Q denoting the number of queries. Each of the following Q lines contains a query in one of the following two formats: 1. \\"ADD username timestamp\\" - This means to add a log entry for the user with the given username and timestamp. 2. \\"QUERY start_time end_time\\" - This means to return the count of unique usernames that have at least one log entry between start_time and end_time (inclusive). -----Output----- For each \\"QUERY\\" operation, output a single line containing the number of unique users who logged in during the specified interval. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ Q ≤ 1000 - 1 ≤ timestamp, start_time, end_time ≤ 10^6 - 1 ≤ length of username ≤ 50 - All usernames consist of alphanumeric characters. - The timestamps given in the queries are guaranteed to be valid. -----Example----- Input: 1 5 ADD alice 100 ADD bob 200 ADD alice 300 QUERY 50 150 QUERY 100 300 Output: 1 2 -----Explanation----- Example case 1: - For the first \\"QUERY 50 150\\", only \\"alice\\" logged in within this interval. - For the second \\"QUERY 100 300\\", both \\"alice\\" and \\"bob\\" logged in within this interval. Note: \'alice\' logs in twice but is counted only once for unique users within any interval.","solution":"def process_queries(T, test_cases): results = [] for Q, queries in test_cases: logs = [] for query in queries: parts = query.split() if parts[0] == \\"ADD\\": username = parts[1] timestamp = int(parts[2]) logs.append((username, timestamp)) elif parts[0] == \\"QUERY\\": start_time = int(parts[1]) end_time = int(parts[2]) unique_users = set() for username, timestamp in logs: if start_time <= timestamp <= end_time: unique_users.add(username) results.append(len(unique_users)) return results"},{"question":"Given an array of integers, your task is to complete the function `evenOddCount` which returns a tuple of two integers. The first integer is the count of even numbers in the array, and the second integer is the count of odd numbers in the array. Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains a single integer N, the length of the array. The second line contains N space-separated integers representing the elements of the array. Output: For each test case in a new line, output the count of even numbers and odd numbers as a tuple. Constraints: 1 <= T <= 100 1 <= N <= 1000 0 <= A[i] <= 10^5 Example(To be used only for expected output): Input 2 5 1 2 3 4 5 3 2 4 6 Output (2, 3) (3, 0) Explanation: For the first test case, the even numbers are 2 and 4, and the odd numbers are 1, 3, and 5. For the second test case, all the numbers are even: 2, 4, and 6. Note:The Input/Output format and Example given are used for system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def evenOddCount(arr): Given an array of integers, returns a tuple of two integers. The first integer is the count of even numbers in the array, and the second integer is the count of odd numbers in the array. even_count = sum(1 for x in arr if x % 2 == 0) odd_count = sum(1 for x in arr if x % 2 != 0) return (even_count, odd_count) def run_test_cases(test_cases): Takes a list of test cases input and returns a list of tuples with even and odd counts. Each test case is a tuple containing the number of elements and the array of integers. results = [] for n, arr in test_cases: results.append(evenOddCount(arr)) return results"},{"question":"You are given an array of N integers. Your task is to find out whether there exists a pair of indices (i, j) such that A[i] + A[j] is divisible by a given integer K (1 ≤ i < j ≤ N). If such a pair exists, print \\"YES\\"; otherwise, print \\"NO\\". Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ A_i ≤ 10^9 * 1 ≤ K ≤ 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output Print \\"YES\\" if there exists a pair (i, j) such that A[i] + A[j] is divisible by K. Otherwise, print \\"NO\\". Examples Input 5 4 1 2 3 4 5 Output YES Input 3 6 1 2 3 Output NO Input 4 7 2 4 6 8 Output YES","solution":"def check_pairs_divisible_by_k(N, K, A): Given an array of N integers and an integer K, this function checks whether there exists a pair of indices (i, j) such that A[i] + A[j] is divisible by K. Parameters: N (int): The number of elements in the array. K (int): The integer by which the sum should be divisible. A (list of ints): The array of integers. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". remainders = [0] * K for num in A: rem = num % K if remainders[(K - rem) % K] > 0: return \\"YES\\" remainders[rem] += 1 return \\"NO\\" # Example usage # N = 5, K = 4 # A = [1, 2, 3, 4, 5] # print(check_pairs_divisible_by_k(5, 4, [1, 2, 3, 4, 5])) # Output: \\"YES\\""},{"question":"A warehouse management system is designed to keep track of inventory levels for different products. Each product has a unique identifier and a quantity representing the current stock level. Your task is to implement a Python function that helps update the inventory based on a list of transactions. Each transaction is represented by a tuple (product_id, quantity_change), where quantity_change can be positive (indicating incoming stock) or negative (indicating outgoing stock). If a transaction results in a negative inventory for any product, an `Exception` should be raised with the product_id as a message. The function should have the following signature: ```python def update_inventory(inventory: dict, transactions: list) -> dict: # your code here ``` # Input - `inventory`: A dictionary where keys are product IDs (integers) and values are the current stock levels (integers). - `transactions`: A list of tuples where each tuple contains a product ID (integer) and a quantity change (integer). # Output - The function should return the updated inventory dictionary if all transactions are successful. - If any transaction leads to a negative stock level, raise an `Exception` with the product ID as the message. # Example ```python inventory = { 101: 50, 102: 75, 103: 20 } transactions = [ (101, -30), (102, 50), (103, -25) ] try: updated_inventory = update_inventory(inventory, transactions) print(updated_inventory) except Exception as e: print(f\\"Error: Negative stock for product {str(e)}\\") ``` # Sample Output ``` Error: Negative stock for product 103 ``` Ensure your implementation adheres to the described requirements and consider edge cases where transactions might result in negative inventory for one or more products.","solution":"def update_inventory(inventory: dict, transactions: list) -> dict: Update inventory based on transactions. Raise an Exception if any transaction results in negative inventory. Parameters: inventory (dict): Dictionary with product IDs as keys and stock levels as values. transactions (list): List of tuples where each tuple contains a product ID and a quantity change. Returns: dict: Updated inventory after applying all transactions. Raises: Exception: If any transaction results in a negative stock level for any product. for product_id, quantity_change in transactions: if product_id in inventory: inventory[product_id] += quantity_change if inventory[product_id] < 0: raise Exception(product_id) else: if quantity_change < 0: raise Exception(product_id) inventory[product_id] = quantity_change return inventory"},{"question":"You are given a binary matrix with dimensions m x n consisting only of 0s and 1s. A rectangle of 1s is called a \\"full binary rectangle\\" if it contains only 1s and is surrounded by 0s or the boundaries of the matrix. You need to find the largest full binary rectangle within the given matrix. -----Input----- Each input will consist of a single test case. Your program may be run multiple times on different inputs. The first line of input contains two integers m and n (1 le m, n le 100), representing the number of rows and columns in the matrix respectively. The next m lines each contain n integers, each being either 0 or 1, representing the matrix. -----Output----- Output two integers, the number of rows and the number of columns of the largest full binary rectangle. -----Examples----- Sample Input 1: 4 5 0 0 1 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 Sample Output 1: 2 2 Sample Input 2: 5 6 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 Sample Output 2: 3 3 Sample Input 3: 3 3 0 0 0 0 1 0 0 1 0 Sample Output 3: 1 1","solution":"def largest_full_binary_rectangle(matrix): m = len(matrix) n = len(matrix[0]) if m == 0 or n == 0: return (0, 0) max_area = 0 max_row_length = 0 max_col_length = 0 dp = [[0] * n for _ in range(m)] for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = (1, 1) else: row_len = dp[i-1][j][0] + 1 if matrix[i-1][j] == 1 else 1 col_len = dp[i][j-1][1] + 1 if matrix[i][j-1] == 1 else 1 dp[i][j] = (row_len, col_len) area = min(row_len, col_len) ** 2 if area > max_area: max_area = area max_row_length = min(row_len, col_len) max_col_length = min(row_len, col_len) return (max_row_length, max_col_length)"},{"question":"You are given an integer array \\"nums\\" consisting of \\"N\\" elements. You need to perform the following operations: - Choose any two different indices \\"i\\" and \\"j\\" (0 <= i, j < N) such that \\"nums[i]\\" is even and \\"nums[j]\\" is odd. - Swap the elements at \\"nums[i]\\" and \\"nums[j]\\". You task is to rearrange the array such that all elements at even indices are even and all elements at odd indices are odd. Return the final rearranged array. Example 1: Input: N = 6 nums = [3, 6, 12, 1, 5, 8] Output: [6, 3, 12, 1, 8, 5] Explanation: Indexes with even number 0, 2, 4 have even elements i.e. 6, 12, 8. Indexes with odd number 1, 3, 5 have odd elements i.e. 3, 1, 5. Example 2: Input: N = 4 nums = [7, 2, 5, 8] Output: [2, 7, 8, 5] Explanation: Indexes with even number 0, 2 have even elements i.e. 2, 8. Indexes with odd number 1, 3 have odd elements i.e. 7, 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeEvenOdd() which takes the integer array nums[] and its size N as input parameters and returns the array rearranged according to the conditions. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 1 <= nums[i] <= 10^6","solution":"def rearrangeEvenOdd(N, nums): even_index = 0 odd_index = 1 while even_index < N and odd_index < N: # Find next even number at even index while even_index < N and nums[even_index] % 2 == 0: even_index += 2 # Find next odd number at odd index while odd_index < N and nums[odd_index] % 2 == 1: odd_index += 2 # If we find a mismatch where even_index has odd number and odd_index has even number, swap them if even_index < N and odd_index < N: nums[even_index], nums[odd_index] = nums[odd_index], nums[even_index] return nums"},{"question":"Petr is fascinated with the theory of connected components in graphs. He recently learned that a connected component of a graph is a maximal set of vertices such that each pair of vertices is connected with a path, directly or indirectly. Now he wants to explore it further. You are given a graph with `n` vertices and `m` edges. Your task is to find the number of connected components in the graph. # Input - The first line contains two integers `n` (1 ≤ n ≤ 100000) and `m` (0 ≤ m ≤ 100000) — the number of vertices and edges respectively. - The next `m` lines each consist of two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — an edge connecting vertices `u` and `v`. No two vertices are connected by more than one edge. # Output - Print a single integer — the number of connected components in the given graph. # Example Input ``` 6 5 1 2 2 3 4 5 5 6 6 4 ``` Output ``` 2 ``` # Explanation In the provided example, there are 6 vertices and 5 edges. The first three vertices (1, 2, 3) form one connected component as every vertex can be reached from any other in this subset. Similarly, the next three vertices (4, 5, 6) form another connected component. Hence, there are 2 connected components in the graph.","solution":"def find_connected_components(n, edges): Returns the number of connected components in a graph with n vertices and given edges from collections import defaultdict, deque # Create adjacency list for the graph adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) connected_components = 0 for vertex in range(1, n + 1): if not visited[vertex]: visited[vertex] = True bfs(vertex) connected_components += 1 return connected_components # Example usage (not part of the actual function or tests): if __name__ == \\"__main__\\": n, m = 6, 5 edges = [(1, 2), (2, 3), (4, 5), (5, 6), (6, 4)] print(find_connected_components(n, edges)) # Output should be 2"},{"question":"# Substring Palindrome Check A **palindrome** is a string that reads the same forwards as backwards. Examples include \\"madam\\", \\"racecar\\", and \\"a\\". Write a method `count_palindromic_substrings` that takes a single string `s` as input and returns the total number of palindromic substrings in the string. The substrings with different start or end positions are considered distinct even if they consist of the same characters. For instance, in the string \\"aaa\\": - \\"a\\" at index 0, 1, and 2 are three distinct substrings considered to be palindromic. - \\"aa\\" at index 0-1 and 1-2 are two distinct palindromic substrings. - \\"aaa\\" at index 0-2 is another distinct palindromic substring. Thus, the total number of palindromic substrings is 6 (\\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\"). The method signature should be: ```python def count_palindromic_substrings(s: str) -> int: ``` # Example ```python count_palindromic_substrings(\\"aaa\\") # => 6 count_palindromic_substrings(\\"abc\\") # => 3 (\\"a\\", \\"b\\", \\"c\\") count_palindromic_substrings(\\"racecar\\") # => 10 (\\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"aceca\\", \\"cec\\", \\"racecar\\") ``` # Constraints - The input string `s` has a length of at most 1000 characters. - The input string `s` consists of only lowercase English letters.","solution":"def count_palindromic_substrings(s: str) -> int: Returns the total number of palindromic substrings in the given string s. n = len(s) count = 0 # Function to expand around center and count palindromes def expand_around_center(left: int, right: int) -> int: nonlocal count local_count = 0 while left >= 0 and right < n and s[left] == s[right]: local_count += 1 left -= 1 right += 1 return local_count # Consider every character and every pair of characters as the center for i in range(n): count += expand_around_center(i, i) # Odd length palindrome count += expand_around_center(i, i + 1) # Even length palindrome return count"},{"question":"Alice and Bob are avid card collectors. They often play games to determine who has the strongest collection of cards. Each card has a unique strength value associated with it. Recently, they decided to play a new game: each player picks one card randomly from their own collection. The player with the higher strength card wins. If both cards have the same strength, the game ends in a tie. However, there\'s a twist. Each player can pick their collection from a series of ranges of cards they own. Alice\'s cards are sequential, and Bob\'s cards are also sequential but can start and end at different strength values compared to Alice\'s. -----Task----- Given the description of Alice’s and Bob’s card ranges, determine which player has a higher chance of winning. All of their card ranges have the following format: each collection includes all integer card strength values between two given numbers c and d (both inclusive), where c is the lowest strength and d is the highest strength card in the range. Each card strength value appears exactly once in the collection. -----Input----- The first line contains two integers c_1, d_1 that describe Alice’s card range. The second line contains two integers c_2, d_2 that describe Bob’s card range. You may assume that 1 leq c_1, c_2 leq d_1, d_2 leq 100. -----Output----- Output the name of the player that has a higher probability of winning, either “Alice” or “Bob”. If the probabilities are the same, output “Tie”. -----Examples----- Sample Input 1: 5 10 1 6 Sample Output 1: Alice Sample Input 2: 2 5 3 6 Sample Output 2: Tie","solution":"def determine_winner(c1, d1, c2, d2): Determine which player has a higher chance of winning based on the ranges of card strengths. Parameters: c1, d1: start and end of Alice\'s card range. c2, d2: start and end of Bob\'s card range. Return: A string indicating the player with a higher chance of winning: \'Alice\', \'Bob\', or \'Tie\'. max_alice = d1 max_bob = d2 if max_alice > max_bob: return \\"Alice\\" elif max_bob > max_alice: return \\"Bob\\" else: return \\"Tie\\""},{"question":"Diane is a wildlife photographer visiting a dense forest. She plans to capture photos of various animals at different locations in the forest. However, each location in the forest can be visited only once and certain locations have restrictions based on the time she visits them. Each location has a start time s, an end time e, and a value v that represents the potential value of capturing a photo at that location. Diane can visit a location from time s until time e-1 (i.e., the visit ends just before time e). Help Diane determine the maximum possible value she can obtain from the locations she visits. The challenge is that at any point in time, only one location can be visited. Input The first line of input contains a single integer indicating the number of test cases T ≤ 50. Each test case begins with two integers n and m with 1 ≤ n ≤ 100 and 1 ≤ m ≤ 50. This means there are n locations to consider and the time period available is from time 0 to time m. Each of the following n lines describes a location and consists of three integers s, e, and v. The numbers satisfy 0 ≤ s < e ≤ m and 1 ≤ v ≤ 1000. This means that the location is available to visit during time units s, s+1, ..., e-1 and will yield a value of v if Diane visits it. Test cases are separated by a single blank line including a blank line preceding the first test case. Output The output for each test case consists of a single integer indicating the maximum total value Diane can obtain by visiting a subset of locations such that no two visits overlap in time. SAMPLE INPUT 1 4 4 0 1 300 1 2 200 2 3 400 3 4 500 SAMPLE OUTPUT 1400 Explanation In the given test case, the best option for Diane is to visit each location sequentially without overlap: - Visit the location from time 0 to 1 for a value of 300. - Visit the location from time 1 to 2 for a value of 200. - Visit the location from time 2 to 3 for a value of 400. - Visit the location from time 3 to 4 for a value of 500. The maximum value she can obtain is 300 + 200 + 400 + 500 = 1400.","solution":"def maximum_value(T, test_cases): results = [] for i in range(T): n, m, locations = test_cases[i] locations.sort(key=lambda x: x[1]) dp = [0] * (m + 1) for s, e, v in locations: for t in range(m, s - 1, -1): if t >= e: dp[t] = max(dp[t], dp[t - (e - s)] + v) results.append(max(dp)) return results"},{"question":"Alice is planning a large party, and she wants to make sure that she can serve her guests with the selections they prefer. She has come up with a list of \'n\' dishes and recorded the preference of each dish by all guests. Each dish can be liked, disliked, or have no opinion by the guests. Alice wants to determine the most popular dish, which means the dish that has the highest number of likes. If there are multiple dishes with the same highest number of likes, she should pick the one with the fewest dislikes. If there is still a tie, pick the one that appears first in the list. -----Input----- The input consists of: - The first line contains an integer \'n\' (1 le n le 1000), the number of dishes. - The second line contains an integer \'m\' (1 le m le 1000), the number of guests. - \'n\' lines follow, each containing a string of \'m\' characters, describing the preference of each guest for that dish. Each character can be: - \'L\' for like - \'D\' for dislike - \'N\' for no opinion -----Output----- Print a single integer representing the index (1-based) of the most popular dish. -----Examples----- Sample Input: 3 4 LNDN NDLL DDDN Sample Output: 2 Explanation: - For the 1st dish: 2 likes (L), 1 dislike (D) - For the 2nd dish: 2 likes (L), 1 dislike (D) - For the 3rd dish: 0 likes (L), 3 dislikes (D) The 2nd dish has the same number of likes as the 1st dish but appears first, so its index (2) is returned.","solution":"def find_most_popular_dish(n, m, preferences): max_likes = -1 min_dislikes = float(\'inf\') best_dish_index = -1 for i in range(n): likes = preferences[i].count(\'L\') dislikes = preferences[i].count(\'D\') if (likes > max_likes) or (likes == max_likes and dislikes < min_dislikes): max_likes = likes min_dislikes = dislikes best_dish_index = i return best_dish_index + 1"},{"question":"Given the grid dimensions `m` x `n` in which each cell contains an integer, define a \\"peak\\" element as an element that is strictly greater than all of its four neighbors (if they exist). The neighbors are elements directly to the left, right, above, and below. Write a function that finds a peak element in the 2D grid and returns its position as a tuple (i, j). If the grid contains multiple peaks, return the position of any one of them. Your solution should be efficient, ideally with a runtime complexity better than O(m*n). Examples: Example 1: Input: grid = [ [10, 20, 15], [21, 30, 14], [ 7, 16, 13] ] Output: (1, 1) Explanation: (1, 1) is a peak element because grid[1][1] = 30 is greater than its neighbors (20, 21, 16, 14). Example 2: Input: grid = [ [1, 4], [3, 2] ] Output: (0, 1) Explanation: (0, 1) is a peak element because grid[0][1] = 4 is greater than its neighbors (1, 3). Note: - The grid dimensions `(m, n)` will be at least 1 x 1 and at most 1000 x 1000. - Each element in the grid will be within the range `[-10^6, 10^6]`.","solution":"def find_peak_element(grid): def is_peak(i, j): curr_val = grid[i][j] # Check up if i > 0 and grid[i-1][j] >= curr_val: return False # Check down if i < len(grid) - 1 and grid[i+1][j] >= curr_val: return False # Check left if j > 0 and grid[i][j-1] >= curr_val: return False # Check right if j < len(grid[0]) - 1 and grid[i][j+1] >= curr_val: return False return True m = len(grid) n = len(grid[0]) if m else 0 for i in range(m): for j in range(n): if is_peak(i, j): return (i, j) return None"},{"question":"You are given an array of integers. Write a program to find the smallest missing positive integer from the array. -----Input----- The first line of the input contains a single integer N --- the number of elements in the array (1 <= N <= 10000). The second line contains N integers --- the elements of the array (each element is between -1000 and 1000). -----Output----- Print the smallest missing positive integer. -----Example----- Input: 5 3 4 -1 1 Output: 2 Input: 3 1 2 0 Output: 3","solution":"def find_smallest_missing_positive(nums): Returns the smallest missing positive integer from the list nums. nums = [num for num in nums if num > 0] nums = list(set(nums)) nums.sort() missing = 1 for num in nums: if num == missing: missing += 1 elif num > missing: break return missing"},{"question":"You are given an integer array \'arr\' and an integer \'x\'. Your task is to implement a function `findClosestElements` that returns a list of the \'k\' closest integers to \'x\' in the array \'arr\'. The result should also be sorted in ascending order. The array \'arr\' is sorted in ascending order, and you need to find \'k\' numbers that are closest to \'x\'. If there are two elements with the same distance to \'x\', the smaller element should be preferred. # Function Signature ```python def findClosestElements(arr: List[int], k: int, x: int) -> List[int]: pass ``` # Input - `arr`: A list of integers sorted in ascending order. - `k`: A positive integer less than or equal to the length of `arr`. - `x`: An integer to which the closeness of elements from \'arr\' would be compared. # Output - A list of \'k\' integers closest to \'x\' sorted in ascending order. # Example 1 **Input** ```python arr = [1, 2, 3, 4, 5] k = 4 x = 3 ``` **Output** ```python [1, 2, 3, 4] ``` **Explanation** - The four closest numbers to 3 in the list are [1, 2, 3, 4]. # Example 2 **Input** ```python arr = [1, 2, 3, 4, 5] k = 4 x = -1 ``` **Output** ```python [1, 2, 3, 4] ``` **Explanation** - Even though -1 is not in the list, the four closest numbers by distance to -1 are still [1, 2, 3, 4]. # Constraints - The length of \'arr\' and the value of \'k\' will be within the range `[1, 10^4]`. - Values of arr[i] and x will be within the range `[-10^4, 10^4]`.","solution":"from typing import List def findClosestElements(arr: List[int], k: int, x: int) -> List[int]: Find k closest integers to x in the given sorted array. Parameters: arr (List[int]): A list of integers sorted in ascending order. k (int): Number of closest integers to find. x (int): The target integer to compare closeness. Returns: List[int]: A list of k closest integers sorted in ascending order. # Define a function to compute the custom comparison key def proximity(a): return (abs(a - x), a) # Sort the array with the custom key which sorts based on the distance and then by value arr_sorted_by_proximity = sorted(arr, key=proximity) # Get the first \'k\' elements from the sorted list closest_elements = arr_sorted_by_proximity[:k] # Return the \'k\' closest elements sorted in ascending order return sorted(closest_elements)"},{"question":"Create a function that takes a **string** as input and **returns a string** with all *vowels* removed. The output string should preserve the original case of the remaining characters. If the input string is empty or contains no vowels, simply return the input string unchanged. Ensure the function handles **non-string** inputs by returning **\'Invalid input!\'**. Hint ==== Vowels to be removed are: \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase). Examples ======== remove_vowels(\\"This is a test.\\") -> \\"Ths s tst.\\" remove_vowels(\\"HELLO\\") -> \\"HLL\\" remove_vowels(\\"\\") -> \\"\\" remove_vowels(123) -> \\"Invalid input!\\"","solution":"def remove_vowels(input_str): Takes a string as input and returns a new string with all vowels removed. If input is not a string, returns \'Invalid input!\'. if not isinstance(input_str, str): return \'Invalid input!\' vowels = \'aeiouAEIOU\' return \'\'.join([char for char in input_str if char not in vowels])"},{"question":"In an amusement park, there is a special roller coaster ride which has a set of rules for the ride entry. Each person has to be of a minimum height H and must wear a safety belt of a specific size. Given the heights of N people and the number of available safety belts K (safety belts are of the same size), determine if all people can take the ride or not. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - For each test case: - The first line contains two space-separated integers H and K. - The second line contains N space-separated integers representing the heights of the N people. ------ Output Format ------ For each test case, output texttt{YES} or texttt{NO} in a single line. You may print each character of texttt{YES} or texttt{NO} in uppercase or lowercase (for example, texttt{yes}, texttt{Yes}, texttt{NO} will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ H, K ≤ 200 1 ≤ height of each person ≤ 300 ------ Sample Input 1 ------ 3 120 3 110 130 145 140 4 150 160 155 145 100 2 95 105 ------ Sample Output 1 ------ NO YES NO ------ Explanation 1 ------ Test case 1: The minimum height required is 120 cm and there are 3 safety belts available. The heights of people are 110, 130, and 145. Since one of the persons is shorter than 120 cm, not everyone can take the ride. Thus, the output is texttt{NO}. Test case 2: The minimum height required is 140 cm and there are 4 safety belts available. The heights of people are 150, 160, 155, and 145. All the people meet the height requirement and there are enough safety belts. Thus, the output is texttt{YES}. Test case 3: The minimum height required is 100 cm and there are 2 safety belts available. The heights of people are 95 and 105. One of the persons does not meet the height requirement. Thus, the output is texttt{NO}.","solution":"def can_ride(T, test_cases): results = [] for i in range(T): H, K = test_cases[i][:2] heights = test_cases[i][2:] if all(height >= H for height in heights) and len(heights) <= K: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You need to implement a function that rotates a given square matrix 90 degrees clockwise. The function should receive a 2D list representing the matrix and return a new 2D list representing the rotated matrix. **Examples:** ```python >>> rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) [[7, 4, 1], [8, 5, 2], [9, 6, 3]] >>> rotate_matrix([[1, 2], [3, 4]]) [[3, 1], [4, 2]] >>> rotate_matrix([[1]]) [[1]] >>> rotate_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]] ``` **Constraints:** 1. The matrix will always be a square matrix (NxN) where ( 1 leq N leq 100 ). 2. You may assume all elements in the matrix are integers. 3. You may not use any additional matrix (2D list) data structures to achieve the result. You can only use variables and lists (not nested).","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise. :param matrix: List[List[int]] - A 2D list representing the NxN matrix :return: List[List[int]] - The 90 degree clockwise rotated matrix N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i] = matrix[i][::-1] return matrix"},{"question":"A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. For example, the sequence 3, 7, 11, 15 is an arithmetic progression with a common difference of 4. You are given a list of integers. Your task is to check if it is possible to reorder the list such that it forms an arithmetic progression. Input The first line contains a single integer n (2 ≤ n ≤ 105) — the number of elements in the list. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 109) — the list of integers. Output Print \\"YES\\" if it is possible to reorder the list to form an arithmetic progression, otherwise print \\"NO\\". Examples Input 4 3 1 2 4 Output YES Input 5 1 2 4 8 16 Output NO Note In the first example, the list can be rearranged as 1, 2, 3, 4 which forms an arithmetic progression with a common difference of 1. In the second example, no rearrangement of the given list forms an arithmetic progression.","solution":"def can_form_arithmetic_progression(n, arr): Checks if it is possible to reorder the list to form an arithmetic progression. Args: n (int): The number of elements in the list. arr (list of int): The list of integers. Returns: str: \\"YES\\" if the list can be reordered to form an arithmetic progression, otherwise \\"NO\\". arr.sort() common_diff = arr[1] - arr[0] for i in range(1, n): if arr[i] - arr[i-1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"In a dense forest, there are N special trees positioned in a straight line. Each tree can have zero or more fruits, which can fall either to the left or to the right. You have the power to choose a single tree and collect all its fruits in the same direction (either left or right). However, if you choose to collect fruits from a tree to the left, then all the fruits on the left of that tree will also fall to the left and be collected (similarly for the right). Help in finding the maximum number of fruits you can collect from a single tree by choosing an optimal direction (left or right). Input The input starts with a single integer T, the number of test cases. For each test case, the first line contains an integer N, the number of trees. The second line contains N integers where the i-th integer denotes the number of fruits on the i-th tree. Output For each test case, output a single integer, the maximum number of fruits you can collect by choosing one tree and a direction for all the fruits. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ Number of fruits on any tree ≤ 10^3 SAMPLE INPUT 2 4 1 5 3 2 5 2 4 1 0 3 SAMPLE OUTPUT 8 10","solution":"def max_fruits(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] fruits = test_cases[t][1] max_collect = 0 # Calculate the potential max if collecting to the left for i in range(N): collect_left = sum(fruits[:i+1]) collect_right = sum(fruits[i:]) max_collect = max(max_collect, collect_left, collect_right) results.append(max_collect) return results"},{"question":"You are given an undirected graph with n vertices and m edges. Calculate the number of connected components in the graph. A connected component is a maximal set of vertices such that there exists a path between any pair of vertices in this set. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of vertices and the number of edges in the graph. Next m lines describe the edges of the graph in the form a_{i}, b_{i} (1 ≤ a_{i}, b_{i} ≤ n, a_{i} ≠ b_{i}). It is guaranteed that there are no multiple edges or self-loops. -----Output----- Print a single integer — the number of connected components in the graph. -----Examples----- Input 6 3 1 2 2 3 4 5 Output 3 Input 4 0 Output 4","solution":"def count_connected_components(n, m, edges): Calculates the number of connected components in an undirected graph. :param n: Number of vertices :param m: Number of edges :param edges: List of edges :return: Number of connected components from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False]*(n+1) # Index 0 is unused since vertices are 1-based count = 0 for vertex in range(1, n+1): if not visited[vertex]: bfs(vertex, visited, graph) count += 1 return count"},{"question":"Alice owns a large rectangular field where she plants crops in distinct rectangular plots. Each plot is defined by four integers (x1, y1, x2, y2) where (x1, y1) is the coordinate of the top-left corner of the plot, and (x2, y2) is the coordinate of the bottom-right corner of the plot. To make the field more manageable, she wants to determine the maximum area of any plot that does not overlap with any other plot. Write a function that takes a list of plots, each plot being represented as a tuple (x1, y1, x2, y2), and returns the maximum area of a non-overlapping plot. If there is no non-overlapping plot, return 0. # Function Signature ```python def max_non_overlapping_plot_area(plots: List[Tuple[int, int, int, int]]) -> int: ``` # Input - `plots`: A list of tuples where each tuple contains four integers `(x1, y1, x2, y2)` representing the coordinates of the top-left and bottom-right corners of each plot. - 1 ≤ number of plots ≤ 1000 - 0 ≤ x1, y1, x2, y2 ≤ 10^6 - x1 ≤ x2 and y1 ≤ y2 for each plot # Output - Return the maximum area of a plot that does not overlap with any other plot. - If no such plot exists, return 0. # Example ```python plots = [(1, 1, 4, 4), (2, 2, 6, 5), (7, 8, 10, 10), (7, 8, 10, 10)] assert max_non_overlapping_plot_area(plots) == 9 # The plot (7, 8, 10, 10) has the maximum non-overlapping area ``` # Note - Two plots overlap if they share any portion of their area, including edges. - You can assume that the plots are already axis-aligned rectangles.","solution":"def area(plot): Calculate the area of a rectangular plot defined by top-left and bottom-right corners. x1, y1, x2, y2 = plot return (x2 - x1) * (y2 - y1) def overlaps(plot1, plot2): Check if two plots overlap. x1, y1, x2, y2 = plot1 x3, y3, x4, y4 = plot2 # No overlap conditions if x2 <= x3 or x4 <= x1 or y2 <= y3 or y4 <= y1: return False return True def max_non_overlapping_plot_area(plots): Return the maximum area of any non-overlapping plot. n = len(plots) max_area = 0 for i in range(n): plot = plots[i] is_non_overlapping = True for j in range(n): if i != j and overlaps(plot, plots[j]): is_non_overlapping = False break if is_non_overlapping: max_area = max(max_area, area(plot)) return max_area"},{"question":"You are given an array a consisting of n integers a_1, a_2, dots, a_n. You can perform the following operation on the array any number of times: - Select any subarray of the array a (i.e., contiguous segment of the array) and rotate it as many times as desired. A rotation of a subarray [l, dots, r] means moving the first element of this subarray to the last position, and each other element moves one position to the left. For example, rotating the subarray [3,6,3,7] once results in [6,3,7,3]. Determine the minimum number of operations needed to sort the array in non-decreasing order. -----Input----- The first line contains a single integer n (1 le n le 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the minimum number of operations needed to sort the array in non-decreasing order. -----Example----- Input 5 4 3 2 5 1 Output 3 -----Note----- In the first test case, one of the possible sequences of operations to sort the array is: 1. Rotate the subarray [4, 3, 2] twice to get [2, 4, 3, 5, 1] 2. Rotate the subarray [4, 3] once to get [2, 3, 4, 5, 1] 3. Rotate the subarray [5, 1] once to get [2, 3, 4, 1, 5] 4. Optionally rotate the first element by itself or simply no-op to get the array in the form [1, 2, 3, 4, 5] in this case. So, the minimum number of operations required is 3.","solution":"def minimum_operations_to_sort(a): Determines the minimum number of operations needed to sort the array in non-decreasing order. n = len(a) sorted_a = sorted(a) if a == sorted_a: return 0 longest_sorted_subarray_length = 0 current_sorted_subarray_length = 1 for i in range(1, n): if a[i] >= a[i - 1]: current_sorted_subarray_length += 1 else: longest_sorted_subarray_length = max(longest_sorted_subarray_length, current_sorted_subarray_length) current_sorted_subarray_length = 1 longest_sorted_subarray_length = max(longest_sorted_subarray_length, current_sorted_subarray_length) return n - longest_sorted_subarray_length"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline. The objective is to find the largest rectangle that can be formed by any contiguous buildings. The width of each building is 1 unit. -----Input:----- - The first line contains a single integer n, the number of buildings. - The second line contains n integers, h[1], h[2], ..., h[n], where h[i] represents the height of the i-th building. -----Output:----- Print a single integer, the area of the largest rectangle that can be formed by any contiguous sequence of buildings. -----Constraints----- - 1 <= n <= 10^5 - 1 <= h[i] <= 10^4 -----Subtasks----- - 40 points: 1 <= n <= 100 - 60 points: n > 100 -----Sample Input:----- 6 2 1 5 6 2 3 -----Sample Output:----- 10 -----Explanation:----- The largest rectangle that can be formed is by the third and fourth buildings with height 5 and 6, respectively. Their combined width is 2 units and the height of the shorter building is 5 units, giving an area of 5 * 2 = 10.","solution":"def largest_rectangle_area(heights): Given a list of integers representing the heights of buildings, return the area of the largest rectangle that can be formed by any contiguous sequence of buildings. stack = [] max_area = 0 heights.append(0) # Add a zero height to flush out remaining buildings from the stack for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"-----Input----- The first line of input consists of two integers N and M, where 1 le N le 10000 is the number of cities, and 0 le M le 100000 is the number of roads. The next M lines each contain two distinct integers x and y which represent a direct road between city x and city y. Following this, the input contains an integer Q, where 1 le Q le 100000 is the number of queries. Each of the next Q lines contains two distinct integers a and b which are cities. Each query asks whether there is a path between city a and city b. -----Output----- For each query, output a line containing “yes” if there is a path between city a and city b, and “no” otherwise. -----Examples----- Sample Input: 5 4 0 1 1 2 3 4 0 4 3 0 2 1 3 2 4 Sample Output: yes yes yes","solution":"from collections import defaultdict, deque def find_connected_components(n, edges): # Initialize graph graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) # To keep track of visited cities visited = [False] * (n + 1) components = [-1] * (n + 1) def bfs(start, component_id): queue = deque([start]) visited[start] = True components[start] = component_id while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True components[neighbor] = component_id queue.append(neighbor) # Find all connected components current_component = 0 for city in range(n): if not visited[city]: bfs(city, current_component) current_component += 1 return components def solve(n, m, edges, queries): # Find components to answer the queries in O(1) time components = find_connected_components(n, edges) results = [] for a, b in queries: results.append(\\"yes\\" if components[a] == components[b] else \\"no\\") return results"},{"question":"Write a function `isMirrorImage(s1, s2)` that takes two strings `s1` and `s2` as input and returns `True` if `s1` is the reverse of `s2`, and `False` otherwise. Return `False` if either of the input strings is `None`. Ensure your solution is efficient in terms of time and space complexity.","solution":"def isMirrorImage(s1, s2): Returns True if s1 is the reverse of s2, and False otherwise. Returns False if either of the input strings is None. if s1 is None or s2 is None: return False return s1 == s2[::-1]"},{"question":"Two strings, `a` and `b`, are said to be anagrams if one string can be rearranged to form the other. More formally, two strings are anagrams if they have the same characters with the same frequencies. Given two strings `a` and `b`, determine the minimum number of character deletions required to make `a` and `b` anagrams. -----Input----- The first line contains an integer n (1 leq n leq 100) — the number of test cases. Then n test cases follow, each containing two space-separated strings a and b. The lengths of `a` and `b` are at most 100 and contain only lowercase English letters. -----Output----- Output n lines. For each test case, print the minimum number of deletions required to make the two strings anagrams on a new line. -----Examples----- Input 3 abc cba hello billion abcdef ghijkl Output 0 6 12 -----Note----- In the first test case of the example, both `abc` and `cba` are already anagrams, so no deletions are necessary. In the second test case of the example, we need to delete the characters \'h\', \'e\', \'l\', \'l\', \'b\', \'i\', \'o\', \'n\' from \'hello\' and the characters \'o\', \'i\', \'l\', \'l\', \'i\', \'o\', \'n\' from \'billion\' to get anagram strings. The total number of deletions required is 6. In the third test case of the example, none of the characters in `abcdef` match with any of the characters in `ghijkl`, so we need to delete all characters from both strings. The total number of deletions required is 12.","solution":"def min_deletions_to_make_anagrams(a, b): Given two strings a and b, determine the minimum number of character deletions required to make a and b anagrams of each other. from collections import Counter counter_a = Counter(a) counter_b = Counter(b) deletions = 0 # Characters present in a but not in b, or in different amounts for char in counter_a: if char in counter_b: deletions += abs(counter_a[char] - counter_b[char]) else: deletions += counter_a[char] # Characters present in b but not in a for char in counter_b: if char not in counter_a: deletions += counter_b[char] return deletions def process_test_cases(test_cases): results = [] for a, b in test_cases: result = min_deletions_to_make_anagrams(a, b) results.append(result) return results"},{"question":"Nina is taking care of a beautiful garden that contains various types of flowers. The garden is represented by a grid with `n` rows and `m` columns. Each cell of the grid either contains no flowers (represented by \'.\') or contains a single type of flower (represented by an uppercase English letter). Nina wants to create a flower bouquet by picking exactly `p` flowers of the same type from the garden. She needs your help to determine if it\'s possible to pick `p` flowers such that all picked flowers are of the same type and form a contiguous subgrid (a rectangular area without any gaps) in the garden grid. Write a program to help Nina find out if such a bouquet is possible for each test case. Input: * The first line contains an integer `t` (1 ≤ t ≤ 20), the number of test cases. * For each test case: * The first line contains three integers `n`, `m`, and `p` (1 ≤ n, m ≤ 50, 1 ≤ p ≤ n * m), where `n` and `m` are the dimensions of the garden grid, and `p` is the number of flowers needed for the bouquet. * Each of the next `n` lines contains `m` characters representing the garden grid. Each character is either an uppercase English letter (representing a flower) or a \'.\' (representing an empty cell). Output: * For each test case, print \\"YES\\" if it\'s possible to pick `p` flowers of the same type forming a contiguous subgrid, otherwise print \\"NO\\". Example: Input: ``` 2 3 4 4 A..B .A.B AAAA 4 4 5 B.BB BCDD BCCD BBBB ``` Output: ``` YES NO ``` Explanation: * In the first test case, it is possible to pick four \'A\' flowers forming a subgrid in the bottom row. * In the second test case, it is not possible to pick five flowers of the same type forming a contiguous subgrid anywhere in the garden grid.","solution":"def can_pick_bouquet(n, m, p, grid): for i in range(n): for j in range(m): # Check all possible subgrids starting at grid[i][j] for height in range(1, n - i + 1): for width in range(1, m - j + 1): if height * width == p: flower = grid[i][j] if flower == \'.\': continue valid = True for k in range(height): for l in range(width): if grid[i + k][j + l] != flower: valid = False break if not valid: break if valid: return \\"YES\\" return \\"NO\\" def flower_bouquet_possibility(t, test_cases): results = [] for case in test_cases: n, m, p, grid = case result = can_pick_bouquet(n, m, p, grid) results.append(result) return results def main(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m, p = map(int, input_lines[index].split()) grid = [list(input_lines[index + 1 + i]) for i in range(n)] test_cases.append((n, m, p, grid)) index += n + 1 return flower_bouquet_possibility(t, test_cases)"},{"question":"Soren likes to play with strings. He has a string consisting of lowercase English letters, and he can perform the following operation any number of times: 1. Select any substring of the string and reverse it. Soren wants to know if there exists a sequence of operations such that the string becomes a palindrome. A palindrome is a string that reads the same backward as forward. Your task is to determine if Soren can transform the given string into a palindrome using any number of the allowed operations. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 10^5) — the string Soren wants to transform into a palindrome. It is guaranteed that the sum of the lengths of all strings in a single test does not exceed 10^6. -----Output----- For each test case, output \\"YES\\" if Soren can transform the string into a palindrome using any number of operations, \\"NO\\" otherwise. -----Examples----- Input 3 aabb abc abab Output YES NO YES -----Note----- In the first example, Soren can reverse the substring \\"ab\\" to get \\"abba\\", which is a palindrome. In the second example, there is no way to rearrange the characters to form a palindrome. In the third example, every character appears an even number of times in any rearrangement, so it can always be transformed into a palindrome.","solution":"def can_be_palindrome(s): Determines if the string can be transformed into a palindrome by checking the frequency of each character in the string. from collections import Counter count = Counter(s) # Count the number of characters with odd frequencies odd_count = sum(1 for freq in count.values() if freq % 2 != 0) # If there\'s more than one character with an odd frequency, it can\'t be rearranged into a palindrome return odd_count <= 1 def process_test_cases(t, test_cases): results = [] for s in test_cases: if can_be_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Word Ladder Length A Word Ladder is a sequence of words where each word in the sequence differs from the previous word by exactly one letter and all words in the sequence are words in the given dictionary. Given two words, `beginWord` and `endWord`, and a dictionary\'s word list, return the length of the shortest transformation sequence from `beginWord` to `endWord`, or return 0 if no such sequence exists. If there are multiple shortest sequences, return the length of any one of them. A valid transformation is: - Only one letter can be changed at a time. - Each transformed word must exist in the word list (beginWord is not part of the word list). You may assume all words have the same length and contain only lowercase alphabetic characters. Write a function `ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int`. # Examples ```python ladderLength(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]) == 5 # Explanation: The shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which is 5 words long. ladderLength(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"]) == 0 # Explanation: The endWord \\"cog\\" is not in the word list, so no transformation is possible. ladderLength(\\"bat\\", \\"fat\\", [\\"bat\\",\\"cat\\",\\"hat\\",\\"rat\\",\\"fat\\"]) == 2 # Explanation: The shortest transformation sequence is \\"bat\\" -> \\"fat\\", which is 2 words long. ``` # Notes - The length of the word list will not exceed 5000. - All words are of the same length. - All words contain only lowercase English letters.","solution":"from typing import List from collections import deque def ladderLength(beginWord: str, endWord: str, wordList: List[str]) -> int: word_set = set(wordList) if endWord not in word_set: return 0 queue = deque([(beginWord, 1)]) alphabet = \'abcdefghijklmnopqrstuvwxyz\' while queue: current_word, length = queue.popleft() if current_word == endWord: return length for i in range(len(current_word)): for c in alphabet: next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, length + 1)) return 0"},{"question":"An e-commerce website has users who can give ratings for products. The ratings are integers between 1 and 5, inclusive. You are given a list of product IDs and corresponding user ratings. A product is considered \\"popular\\" if it has received at least k ratings of 4 or 5. Your task is to find the IDs of all popular products. Constraints * 1 leq n leq 10000 (number of ratings) * 1 leq k leq 1000 * 1 leq product_id leq 100000 * rating is an integer between 1 and 5 Input Input is given from Standard Input in the following format: n k product_id_1 rating_1 product_id_2 rating_2 . . . product_id_n rating_n Output Print the IDs of the popular products, each on a new line, in ascending order of product IDs. Examples Input 7 2 1 5 1 4 2 5 2 3 3 5 3 4 3 5 Output 1 3 Input 5 1 100 5 100 2 200 4 200 3 300 5 Output 100 200 300","solution":"def find_popular_products(n, k, ratings): from collections import defaultdict product_ratings = defaultdict(int) for product_id, rating in ratings: if rating >= 4: # Consider only ratings that are 4 or 5 product_ratings[product_id] += 1 popular_products = [product_id for product_id, count in product_ratings.items() if count >= k] return sorted(popular_products) # Sample input parsing for understanding def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) ratings = [(int(data[i]), int(data[i + 1])) for i in range(2, len(data), 2)] result = find_popular_products(n, k, ratings) for product_id in result: print(product_id)"},{"question":"----- STRING AND SUBSEQUENCES ----- You have been given a string S. You need to determine whether there exists a subsequence of S that forms a palindromic string, NO SINGLE CHARACTER IS A PALINDROME. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input Format----- First line contains the number of test cases T. For each test case, you have a single line containing the string S. -----Output----- For each test case, print \\"YES\\" if such a subsequence exists, otherwise print \\"NO\\". -----Example Test Case----- Input: 3 abcba aabab racecar Output: YES YES YES Explanation: For the first example, \\"aba\\" is a palindromic subsequence. For the second example, \\"apa\\" also is a palindromic subsequence. For the third example, both \\"racecar\\" itself and smaller subsequences like \\"aceca\\" are palindromic. -----","solution":"def is_palindromic_subsequence_exists(S): Given a string S, determine whether there exists a subsequence of S that forms a palindromic string of length greater than 1. Parameters: S (str): The input string Returns: str: \\"YES\\" if such a subsequence exists, \\"NO\\" otherwise n = len(S) # A single character is not a palindrome if n < 2: return \\"NO\\" # If there are at least two same characters, they form a palindrome of length 2 char_count = {} for char in S: if char in char_count: return \\"YES\\" char_count[char] = 1 # No palindromic subsequence found return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases. Parameters: test_cases (list of str): List of input strings Returns: list of str: List of \\"YES\\" or \\"NO\\" corresponding to each input test case results = [] for S in test_cases: results.append(is_palindromic_subsequence_exists(S)) return results"},{"question":"# Task **_Given_** *a string s, find the length of the longest substring without repeating characters.* ___ # Notes: * **_The string_** can contain *any characters* (letters, digits, symbols, etc.). * The solution needs to handle **_both upper and lower case letters_** as distinct characters. * The string **_can be empty_** as well, in which case the result should be 0. ___ # Input >> Output Examples ``` longestSubstring(\\"abcabcbb\\") ==> return 3 ``` **_Explanation_**: * The longest substring without repeating characters in the input string \\"abcabcbb\\" is \\"abc\\", which is of length 3. ___ ``` longestSubstring(\\"bbbbb\\") ==> return 1 ``` **_Explanation_**: * The longest substring without repeating characters in the input string \\"bbbbb\\" is \\"b\\", which is of length 1. ___ ``` longestSubstring(\\"pwwkew\\") ==> return 3 ``` **_Explanation_**: * The longest substring without repeating characters in the input string \\"pwwkew\\" is \\"wke\\", which is of length 3. ___ Expected Time Complexity `O(n)` ___ ___ ___","solution":"def longestSubstring(s): Given a string s, return the length of the longest substring without repeating characters. char_index_map = {} start = max_length = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"You are given a list of n integers. You need to find out the smallest positive integer i such that i is missing from the list. In other words, you need to find the smallest positive integer that does not appear in the list. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each of the next t lines contains an integer n (1 le n le 10^5) followed by n space-separated integers a_i (-10^6 le a_i le 10^6). -----Output----- For each test case, output a single integer — the smallest positive integer that is missing from the list. -----Example----- Input 3 5 1 2 0 -1 3 3 3 4 5 4 -1 -2 -3 -4 Output 4 1 1 -----Note----- In the first test case, the smallest positive integer missing from the list is 4 since 1, 2 and 3 are present in the list. In the second test case, the integers 1 and 2 are missing from the list, but 1 is the smallest missing integer. In the third test case, all integers in the list are negative, so the smallest positive integer missing from the list is 1.","solution":"def smallest_missing_positive(t, test_cases): results = [] for case in test_cases: n, array = case present = set(array) i = 1 while i in present: i += 1 results.append(i) return results"},{"question":"You are given a sequence of NN integers. You can perform the following operation on the sequence as many times as you want: pick any contiguous subsequence, and reverse it. The goal is to make the sequence non-decreasing. Return the minimum number of operations required to achieve this goal. -----Input----- - The first line contains a single integer TT, the number of test cases. - For each test case, the first line contains a single integer NN, the length of the sequence. - The second line contains NN space-separated integers, which are the elements of the sequence. -----Output----- For each test case, output a single integer representing the minimum number of operations required to make the sequence non-decreasing. -----Constraints----- - 1≤T≤1001 le T le 100 - 1≤N≤1001 le N le 100 - −10^9≤Sequence Elements≤10^9-10^9 le text{Sequence Elements} le 10^9 -----Example Input----- 3 5 3 1 2 4 5 4 6 5 4 3 3 1 2 3 -----Example Output----- 1 1 0 -----Explanation----- Example case 1: We can reverse the subsequence [3, 1, 2] to get [2, 1, 3], and then the entire sequence becomes [1, 2, 3, 4, 5]. So, the total number of operations required is 1. Example case 2: We reverse the entire sequence [6, 5, 4, 3] to get [3, 4, 5, 6]. So, the total number of operations required is 1. Example case 3: The sequence is already non-decreasing, so no operations are required. Thus, the output is 0.","solution":"def min_operations_to_sort(T, test_cases): Returns the minimum number of operations required to make each sequence non-decreasing. results = [] for i in range(T): N, sequence = test_cases[i] is_sorted = all(sequence[j] <= sequence[j+1] for j in range(N-1)) if is_sorted: results.append(0) else: results.append(1) return results # Example usage: T = 3 test_cases = [ (5, [3, 1, 2, 4, 5]), (4, [6, 5, 4, 3]), (3, [1, 2, 3]) ] print(min_operations_to_sort(T, test_cases)) # Output: [1, 1, 0]"},{"question":"Park has n number of boxes arranged in a line. Each box has a positive integer written on it, and represents the candies in that box. Park wants to pick two boxes such that there is the maximum possible difference in the number of candies between them. However, there is a restriction — the box with the lesser candies should strictly come before the box with more candies. Can you help Park find the maximum difference between such two boxes? ------ Input Format ------ - The first line will contain an integer n, the number of boxes. - The second line contains n space-separated integers, where the i-th integer represents the number of candies in the i-th box. ------ Output Format ------ - Print the maximum difference between the number of candies in two boxes such that the box with lesser candies comes before the box with more candies. ------ Constraints ------ 2 ≤ n ≤ 1000 1 ≤ text{candies}_i ≤ 1000 ------ Sample Input 1 ------ 5 1 9 2 4 6 ------ Sample Output 1 ------ 8 ------ Explanation 1 ------ Park can choose boxes with 1 candy and 9 candies, placing the lesser candy box before the greater one, and get the maximum difference which is 9 - 1 = 8. ------ Sample Input 2 ------ 4 4 3 2 1 ------ Sample Output 2 ------ -1 ------ Explanation 2 ------ Since no box with a lesser number of candies appears before a box with a greater number of candies, the result is -1.","solution":"def find_max_difference(n, candies): Finds the maximum difference between the number of candies in two boxes such that the box with lesser candies comes before the box with more candies. if n < 2: return -1 min_candies = candies[0] max_difference = -1 for i in range(1, n): if candies[i] > min_candies: max_difference = max(max_difference, candies[i] - min_candies) min_candies = min(min_candies, candies[i]) return max_difference"},{"question":"Given a binary tree, you need to perform a level-order traversal where you print nodes level-by-level but in a zigzag manner. In other words, for levels that are even-numbered, you print from left to right; for levels that are odd-numbered, you print from right to left. Write a function that takes the root of a binary tree as input and returns a list of lists, where each sublist contains the values of the nodes at each level in the specified zigzag order. Input - A binary tree root node. Output - A list of lists, where each nested list represents a level\'s nodes in the binary tree, ordered in zigzag manner. Example Input: ``` 3 / 9 20 / 15 7 ``` Output: ``` [ [3], [20, 9], [15, 7] ] ``` Explanation - The 1st level has the node [3]. - The 2nd level has nodes [9, 20], printed in reverse order [20, 9]. - The 3rd level has nodes [15, 7] printed in normal order [15, 7]. Note Your function should handle an empty tree as input by returning an empty list.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzag_level_order(root): Performs a level-order traversal in a zigzag manner (left to right and then right to left for alternate levels). :param root: TreeNode, the root of the binary tree. :return: List of lists where each sublist represents a level\'s nodes in zigzag order. if not root: return [] results = [] queue = deque([root]) left_to_right = True while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) if not left_to_right: level_nodes.reverse() results.append(level_nodes) left_to_right = not left_to_right return results"},{"question":"Jane and Brian are planning a vacation together, and they each have a list of destinations they want to visit. Being efficient travelers, they want to identify the destinations that appear on both of their lists so that they can plan those visits together. Your task is to help them find these common destinations. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of destinations on Jane\'s list. Each of the next n lines contains a destination name. Destination names are strings consisting of Latin letters (A-Z, a-z) and spaces, and each destination name has a length that doesn’t exceed 50 characters. The following line contains an integer m (1 ≤ m ≤ 100), the number of destinations on Brian\'s list. Each of the next m lines contains a destination name, following the same format as Jane\'s list. -----Output----- Output the common destinations (case-sensitive) that appear on both lists in lexicographical order, one per line. If there are no common destinations, output \\"No common destinations.\\" -----Examples----- Input 4 Paris London Tokyo Berlin 3 New York Tokyo Paris Output Paris Tokyo Input 3 San Francisco Chicago Boston 3 Miami Seattle Atlanta Output No common destinations","solution":"def find_common_destinations(n, janes_list, m, brians_list): Finds common destinations in lexicographical order from two lists. :param n: Number of destinations in Jane\'s list. :param janes_list: List of Jane\'s destinations. :param m: Number of destinations in Brian\'s list. :param brians_list: List of Brian\'s destinations. :return: List of common destinations in lexicographical order or string \\"No common destinations.\\" # Convert lists to sets to find common elements common_destinations = set(janes_list).intersection(set(brians_list)) # If there are common destinations, sort and return them if common_destinations: return sorted(common_destinations) # If no common destinations, return the specified string return [\\"No common destinations\\"]"},{"question":"You are responsible for distributing supplies to various locations for a logistics company. Each supply unit has a certain weight and value, and your task is to maximize the value of supplies delivered within a given weight limit. You need to solve this problem by writing a program based on the 0/1 knapsack problem. You are given a list of supplies each characterized by its weight and its value. Your task is to determine the maximum total value of supplies you can transport without exceeding the given weight capacity of the transport vehicle. Input The input consists of multiple datasets. The number of datasets does not exceed 50. Each dataset has the following form. > n W > w1 v1 > w2 v2 > ... > wn vn The first line contains two integers, `n` and `W`, where `n` (1 ≤ n ≤ 100) is the number of different supplies, and `W` (1 ≤ W ≤ 1000) is the weight capacity of the transport vehicle. Each of the following `n` lines contains two integers, `wi` and `vi`, (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 1000) representing the weight and value of the i-th supply. Output For each dataset, print one line containing the maximum value of supplies that can be transported without exceeding the weight capacity. Example Input 4 5 2 3 1 2 3 4 2 2 3 8 3 8 5 2 7 10 1 100 100 1000 0 0 Output 7 10 1000 Explanation In the first dataset, the maximum value that can be achieved is 7 by selecting supplies with weight 2 and 1 (value 3 and 4). In the second dataset, the maximum value that can be transported is 10 by selecting the supply with weight 7 (value 10). In the third dataset, since there is only one supply and its weight equals the capacity, the maximum value is 1000. Note: A line containing two zeros denotes the end of the input.","solution":"def knapsack(n, W, items): # Initialize a matrix to keep track of maximum value at each weight limit dp = [[0] * (W + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi > w: dp[i][w] = dp[i - 1][w] else: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) return dp[n][W] def parse_input(data): lines = data.split(\'n\') datasets = [] index = 0 while index < len(lines): if lines[index].strip() == \'0 0\': break n, W = map(int, lines[index].strip().split()) index += 1 items = [] for _ in range(n): wi, vi = map(int, lines[index].strip().split()) items.append((wi, vi)) index += 1 datasets.append((n, W, items)) return datasets def transport_supplies(data): datasets = parse_input(data) results = [] for dataset in datasets: n, W, items = dataset results.append(knapsack(n, W, items)) return results"},{"question":"Joe is an avid video gamer and wants to take a break from his gaming marathon to perform a simpler task - counting how many unique characters are in his favorite game\'s dialogues. You are given a string `S` which represents a dialogue from the game. Your task is to count the number of unique characters in the string that are alphabets (case insensitive). ------ Input Format ------ - The input consists of a single line containing the string `S`. ------ Output Format ------ - Output a single integer representing the number of unique alphabetical characters in the string. ------ Constraints ------ 1 ≤ |S| ≤ 10^5 The string `S` may contain any printable ASCII character. ------ Sample Input 1 ------ Hello, World! ------ Sample Output 1 ------ 7 ------ Sample Input 2 ------ 1234 easy as ABC ------ Sample Output 2 ------ 6 ------ Explanation ------ In the first example, the unique alphabetical characters are: H, e, l, o, W, r, d. So, the output is 7. In the second example, the unique alphabetical characters are: e, a, s, y, A, B, C. So, the output is 6. Note that the case is insensitive, so \'A\' and \'a\' are considered the same unique character.","solution":"def count_unique_alphabetical_characters(S): Returns the number of unique alphabetical characters in string S (case insensitive). unique_chars = set() for char in S: if char.isalpha(): unique_chars.add(char.lower()) return len(unique_chars)"},{"question":"Your friend Enikő is developing an arcade game. In the game\'s level, there is a grid with dimensions n times m. Each cell of the grid can either be empty or contain an obstacle. The player starts at the top-left corner of the grid and wants to reach the bottom-right corner. The player can only move either right or down. Enikő needs your help to determine the number of distinct paths the player can take to reach the goal, avoiding obstacles. As the number of paths can be very large, you should return it modulo 10^9 + 7. -----Input----- The first line of input consists of two integers n and m (1 leq n, m leq 1000), the number of rows and columns in the grid. The next n lines each contains m characters, either \'.\' representing an empty cell or \'#\' representing an obstacle. -----Output----- Output the number of distinct paths from the top-left to the bottom-right corner, modulo 10^9 + 7. If there is no such path, return 0. -----Examples----- Sample Input 1: 3 3 . . . . # . . . . Sample Output 1: 2 Sample Input 2: 3 3 . . # . # . # . . Sample Output 2: 0","solution":"def count_paths(n, m, grid): MOD = 10**9 + 7 if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 elif i == 0 and j == 0: continue else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[n - 1][m - 1] # Example usage n = 3 m = 3 grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] print(count_paths(n, m, grid)) # Output: 2"},{"question":"Implement a function that determines whether a given number is a \\"self-dividing number\\". A self-dividing number is a number that is divisible by every digit it contains. Example: ```python is_self_dividing(128) # => returns True (128 is divisible by 1, 2, and 8) is_self_dividing(26) # => returns False (26 is not divisible by 6) is_self_dividing(0) # => returns False (a self-dividing number cannot contain the digit \'0\') ``` You need to handle all integer values greater than 0. The function should return a boolean indicating whether the number is self-dividing or not.","solution":"def is_self_dividing(number): Determines whether a given number is a self-dividing number. A self-dividing number is a number that is divisible by every digit it contains. Args: number (int): The number to check. Returns: bool: True if the number is self-dividing, False otherwise. original_number = number while number > 0: digit = number % 10 if digit == 0 or original_number % digit != 0: return False number //= 10 return True"},{"question":"You are given a list of books that a library has acquired. Each book has a title, an author, and a publication year. The library wants to catalog these books in a manner that allows for efficient querying. You need to implement a system that can quickly return the titles of books written by a particular author, or all books published in a given year. Your task is to design a class `Library` with the following methods: 1. **add_book(title: str, author: str, year: int) -> void**: Adds a book to the library with the given title, author, and year. 2. **get_books_by_author(author: str) -> List[str]**: Returns a list of titles of all books written by the given author. The titles should be returned in lexicographical order. 3. **get_books_by_year(year: int) -> List[str]**: Returns a list of titles of all books published in the given year. The titles should be returned in lexicographical order. -----Input/Output----- There is no input/output for this example. You need to implement the described class and methods. **Example**: ```python lib = Library() lib.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925) lib.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) lib.add_book(\\"1984\\", \\"George Orwell\\", 1949) lib.add_book(\\"Animal Farm\\", \\"George Orwell\\", 1945) print(lib.get_books_by_author(\\"George Orwell\\")) # Returns: [\\"1984\\", \\"Animal Farm\\"] print(lib.get_books_by_year(1925)) # Returns: [\\"The Great Gatsby\\"] ``` -----Constraints----- 1 ≤ number of books ≤ 1000 1 ≤ length of title ≤ 100 1 ≤ length of author name ≤ 100 1 ≤ year ≤ 9999 Note that titles and author names comprise uppercase and lowercase English letters, and may include spaces.","solution":"from typing import List from collections import defaultdict class Library: def __init__(self): self.books_by_author = defaultdict(list) self.books_by_year = defaultdict(list) def add_book(self, title: str, author: str, year: int) -> None: self.books_by_author[author].append(title) self.books_by_author[author].sort() self.books_by_year[year].append(title) self.books_by_year[year].sort() def get_books_by_author(self, author: str) -> List[str]: return sorted(self.books_by_author.get(author, [])) def get_books_by_year(self, year: int) -> List[str]: return sorted(self.books_by_year.get(year, []))"},{"question":"Given an integer array `nums` and a number `k`, reverse the order of the first `k` elements of the array. Input: The first line contains an integer `n` (1 ≤ `n` ≤ 10^5), the length of the integer array `nums`. The second line contains the integer array `nums` of length `n` with elements between -10^9 and 10^9. The third line contains an integer `k` (1 ≤ `k` ≤ `n`). Output: Print the modified array after reversing the order of the first `k` elements. SAMPLE INPUT 5 1 2 3 4 5 3 SAMPLE OUTPUT 3 2 1 4 5 Explanation The first three elements are reversed in order. Thus, the array becomes [3, 2, 1, 4, 5].","solution":"def reverse_first_k_elements(nums, k): Reverses the order of the first k elements of the array nums. if k > len(nums): return nums return nums[:k][::-1] + nums[k:]"},{"question":"You are given a string with space-separated words. Reverse the order of words in the string while maintaining the order of characters within each word. -----Input----- The first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). Each of the following t lines contains a string of space-separated words. The length of each string, including spaces, does not exceed 1000 characters. -----Output----- For each test case, print a single line containing the words in the string in reverse order. -----Examples----- Input 3 hello world this is an example single Output world hello example an is this single","solution":"def reverse_words_in_sentence(sentence): Returns the words of the sentence in reverse order. words = sentence.split() reversed_words = \' \'.join(words[::-1]) return reversed_words def process_multiple_cases(t, cases): Processes multiple test cases and returns the result for each results = [] for case in cases: results.append(reverse_words_in_sentence(case)) return results"},{"question":"During a quiet night, Anna is out for a walk in a quiet small city comprised of several intersections and streets connecting them. Interestingly, all the streets are one-way, and each intersection can be reached from any other intersection following these one-way streets. Anna starts from a particular intersection and decides to walk through the city by strictly taking the paths outlined by these one-way streets, logging her encounters at each intersection in a specific way. She writes down the intersections she visits in her logbook in the order of her visit. If she revisits an intersection, she writes down its number only the first time she visits it. Given her logbook, determine the minimum number of intersections in the city that comply with her walk and her log entries. Input The first line contains an integer n (1 ≤ n ≤ 2·105), the number of logbook entries. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ n), the intersections visited by Anna in order, with possible repetitions. Output Print a single integer — the minimum number of intersections in the city that accommodate Anna\'s logbook entries. Examples Input 5 1 2 3 4 2 Output 4 Input 6 1 3 1 2 4 3 Output 4 Note In the first sample, Anna might have taken a path like 1 → 2 → 3 → 4 → 2. The minimum number of intersections is 4. In the second sample, Anna\'s route could be 1 → 3 → 1 → 2 → 4 → 3. The minimum number of intersections is still 4.","solution":"def min_intersections(n, logbook): Returns the minimum number of intersections in the city that can accommodate Anna\'s logbook entries without any repeated visits to intersections. :param n: The number of logbook entries :param logbook: A list of integers representing the intersections visited in order :return: The minimum number of intersections unique_intersections = set(logbook) return len(unique_intersections)"},{"question":"You are given a binary tree, and you need to compute the difference between the sum of nodes at odd levels and the sum of nodes at even levels. The root node is considered at level 1. Perform a level order traversal of the binary tree to find the sum of nodes at each level. ------ Input ------ The input consists of a single binary tree. Each node is represented in the format: [ node_value (left_child_value, right_child_value) ] where emph{left_child_value} and emph{right_child_value} can be \\"null\\" if the node has no left or right child respectively. ------ Output ------ Output a single integer, the difference between the sum of nodes at odd levels and the sum of nodes at even levels. (Note: The tree is simple and does not contain cycles or null-only children other than as specified.) ------ Constraints ------ The tree will have at most 10^5 nodes. The value of each node is an integer between -10^6 and 10^6. ------ Sample Input ------ 1 2 3 4 5 null 6 null null null null null ------ Sample Output ------ 2 ------ Explanation ------ The given binary tree is: 1 / 2 3 / 4 5 6 - Sum of nodes at odd levels = 1 + 4 + 5 + 6 = 16 - Sum of nodes at even levels = 2 + 3 = 5 Difference = 16 - 5 = 11 However, since node values can be negative, let\'s consider: - Sum of nodes at odd levels = 1 - Sum of nodes at even levels = 3 (considering only levels with nodes) So, the expected difference in this sample is (1 - (2+3) = -4). (Note: the sample input may be misleading in terms and level determination should be corrected for odd/even)","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_odd_even_level_diff(root): if not root: return 0 odd_level_sum = 0 even_level_sum = 0 level = 1 queue = deque([(root, level)]) while queue: node, lvl = queue.popleft() if lvl % 2 != 0: # Odd level odd_level_sum += node.val else: # Even level even_level_sum += node.val if node.left: queue.append((node.left, lvl + 1)) if node.right: queue.append((node.right, lvl + 1)) return odd_level_sum - even_level_sum"},{"question":"Hannah is a librarian and she is organizing books on a shelf. There is a sequence of books represented by string B of length N, where each character represents a book with a specific ID. Her goal is to place the books on the shelf such that no two adjacent books have the same ID, and the relative order is maintained. If this is not possible, she needs to determine it can be done by rearranging a single pair of books. Write a program to help Hannah identify if it\'s possible to reorganize the string B as required, and if not, whether it\'s feasible by swapping just one pair of books. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains an integer N — the length of the string. - The next line contains the string B consisting of lowercase english alphabets. ------ Output Format ------ For each test case, output on a new line, YES if it is possible to reorganize the string as required, and NO otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} B consists of lowercase english alphabets - The sum of N over all test cases does not exceed 2cdot10^{5}. ----- Sample Input 1 ------ 3 5 aabbc 4 aaab 6 abcabc ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: The original string is \\"aabbc\\". We can rearrange this as \\"abcab\\", which satisfies the requirement that no two adjacent books have the same ID. Test case 2: The original string is \\"aaab\\". It is not possible to arrange this string such that no two adjacent books have the same ID even if we swap a single pair of books. Test case 3: The original string is \\"abcabc\\". It already meets the requirement that no two adjacent books have the same ID.","solution":"def can_reorganize_books(N, B): from collections import Counter import heapq counter = Counter(B) max_count = max(counter.values()) if max_count > (N + 1) // 2: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N, B = test_cases[i] results.append(can_reorganize_books(N, B)) return results"},{"question":"Find the Missing Number You are given an array of unique integers that range from 1 to n. The array is supposed to contain all the integers from 1 to n, but one of these integers is missing. Write a function to find the missing integer. # Example 1: Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 # Example 2: Input: [1, 2, 4, 5, 6] Output: 3 # Function Signature ```python def find_missing_number(nums: List[int]) -> int: # your code here ``` # Constraints - Do not use a sorting method for the solution. - The array contains unique integers. - n ranges from 1 to 10^7. - The difference between the maximum and minimum integers in the array is exactly equal to the length of the array. # Hint Consider using mathematical methods to find the sum of the series and compare it against the sum of the array elements to find the missing number.","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Given a list of unique integers ranging from 1 to n, find the missing integer. Args: nums: List[int] - Input list of unique integers Returns: int - The missing integer n = len(nums) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(nums) return total_sum - array_sum"},{"question":"Implement a __mostFrequentSubstring__ function which will __receive a string and an integer k__ for input, and __return the most frequently occurring substring of length k__. If there are multiple substrings with the same frequency, return the lexicographically smallest one. Examples: mostFrequentSubstring(\\"ababc\\", 2) => \\"ab\\" mostFrequentSubstring(\\"abacabadabacaba\\", 3) => \\"aba\\" mostFrequentSubstring(\\"xyzxyyz\\", 2) => \\"xy\\" All input will be valid: - The input string s will have a length between 1 and 1000. - The integer k will be an integer between 1 and the length of the input string. __Note__: The lexicographically smallest substring is the one that would appear first in a dictionary.","solution":"def mostFrequentSubstring(s, k): from collections import defaultdict substring_count = defaultdict(int) for i in range(len(s) - k + 1): substring = s[i:i+k] substring_count[substring] += 1 max_count = max(substring_count.values()) most_frequent_substrings = [sub for sub, count in substring_count.items() if count == max_count] return min(most_frequent_substrings)"},{"question":"In a distant galaxy, there are n planets lined up in a straight line. Each planet has a certain amount of energy stored in it, represented as an integer e_i for the i-th planet. Intergalactic travelers can travel between any two planets, but they can only travel in such a way that the energy of the destination planet is higher than the energy of the starting planet. Specifically, if a traveler is on planet i, they can move to any planet j only if e_i < e_j. You are given the array e which describes the energy levels of the n planets in the order they are lined up. Your task is to calculate the length of the longest possible path (in terms of number of planets visited) that a traveler can take under the given condition. Note that a traveler does not need to start their journey from the first planet; they can start from any planet. ----- **Input:** The first line contains one integer t (1 le t le 10^3) — the number of test cases. Then, the test cases follow. Each test case consists of two lines. The first line contains a single integer n (1 le n le 4 cdot 10^4) — the number of planets. The second line contains n integers e_1, e_2, dots, e_n (1 le e_i le 10^9) — the energy levels of the planets. The sum of n over all test cases does not exceed 2 cdot 10^5. ----- **Output:** For each test case, print a single line containing the length of the longest possible path a traveler can make under the given conditions. ----- **Examples:** Input: ``` 3 5 4 3 2 5 7 4 1 2 3 4 4 4 3 2 1 ``` Output: ``` 3 4 1 ``` ----- **Explanation:** For the first test case: - A longest path the traveler can take is from planet 3 (energy level 2) to planet 4 (energy level 5) to planet 5 (energy level 7). This path has a length of 3. For the second test case: - A longest path the traveler can take is from planet 1 (energy level 1) to planet 2 (energy level 2) to planet 3 (energy level 3) to planet 4 (energy level 4). This path has a length of 4. For the third test case: - No planet has a higher energy level than planet 1 when starting from any planet, so the length of the longest path is 1.","solution":"def longest_path(t, test_cases): results = [] for idx in range(t): n = test_cases[idx][0] e = test_cases[idx][1] # Initialize a dp array to store lengths of longest path ending at each planet dp = [1] * n # Traverse from the second element to the end for i in range(1, n): for j in range(i): if e[j] < e[i]: dp[i] = max(dp[i], dp[j] + 1) # Get the maximum value from dp array results.append(max(dp)) return results"},{"question":"You are given a list of integers and a target integer value. Your task is to determine if there are two distinct elements in the list whose sum is equal to the target value. If there are such elements, print their indices (1-based). If there are multiple solutions, any one of them is acceptable. If no such elements exist, output \\"NO\\". -----Constraints----- - 2≤n≤10^3 - -10^6≤list[i]≤10^6 (where 1 ≤ i ≤ n) - -10^6≤target≤10^6 -----Input----- The input is given from Standard Input in the following format: n (number of elements in the list) list (n space-separated integers) target (target integer value) -----Output----- Print two 1-based indices of the elements whose sum is equal to the target value, or \\"NO\\" if no such elements exist. -----Sample Input----- 6 1 2 3 4 5 6 9 -----Sample Output----- 3 5 In this example, the elements at indices 3 and 5 (3 + 6) sum up to the target value 9. -----Sample Input----- 4 4 5 1 3 8 -----Sample Output----- 2 4 In this example, the elements at indices 2 and 4 (5 + 3) sum up to the target value 8.","solution":"def find_two_sum_indices(n, elements, target): Finds two distinct elements in the list whose sum is equal to the target value. Returns the 1-based indices of these elements or \\"NO\\" if no such elements exist. # Dictionary to store the value and its 0-based index index_map = {} for i in range(n): current_value = elements[i] complement = target - current_value if complement in index_map: # Returning the indices as 1-based return index_map[complement] + 1, i + 1 index_map[current_value] = i return \\"NO\\""},{"question":"Polycarp loves chess and has been practicing with different board sizes. He recently came up with a game to determine how many black or white squares are on a given chessboard. A standard chessboard is an 8x8 grid where the top-left corner is always a white square. The colors alternate in such a way that a 1x1 chessboard has 1 white square, a 2x2 chessboard has 2 black and 2 white squares, and so on. The task is to determine the number of black squares on an n x n chessboard for various values of n. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. The following t lines each contain a single integer n (1 ≤ n ≤ 10^9) — the size of the chessboard. Output For each test case, print one integer: the number of black squares on an n x n chessboard. Example Input 4 1 2 3 4 Output 0 2 5 8 Explanation - For n = 1, the 1x1 chessboard has no black squares. - For n = 2, the 2x2 chessboard has 2 black squares. - For n = 3, the 3x3 chessboard has 5 black squares. - For n = 4, the 4x4 chessboard has 8 black squares.","solution":"def black_squares_count(n): Returns the number of black squares on an n x n chessboard. return (n * n) // 2"},{"question":"Dalia is playing with a sequence of integers. She can perform the following operation on the sequence: choose any two adjacent integers and replace them with their sum. She wonders what the smallest possible sum of the sequence can be after performing this operation repeatedly until only one integer remains. Input: The first line contains the number of test cases T. Each test case consists of two lines: the first line contains a positive integer N (the length of the sequence), and the second line contains N space-separated integers representing the sequence. Output: For each test case, output a single integer - the smallest possible sum of the sequence after repeatedly performing the operation until only one integer remains. Constraints: 1 ≤ T ≤ 20 2 ≤ N ≤ 50 -1000 ≤ sequence element ≤ 1000 SAMPLE INPUT 2 3 1 3 2 4 -1 2 3 -4 SAMPLE OUTPUT 6 0","solution":"def smallest_possible_sum(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] results.append(sum(sequence)) return results"},{"question":"Given a list of integers, write a function that returns a list of booleans indicating whether each integer in the list is a prime number or not. Function Signature: ```python def check_prime_numbers(nums: List[int]) -> List[bool]: ``` **Input:** - List of integers, `nums`, with length `n` (1 ≤ n ≤ 10^5). **Output:** - List of booleans of length `n`, where each boolean indicates whether the corresponding integer in `nums` is a prime number. **Example:** Input: ``` [2, 3, 4, 5, 10, 17] ``` Output: ``` [True, True, False, True, False, True] ``` **Explanation:** - 2, 3, and 17 are prime numbers. - 4, 5, and 10 are not prime numbers (4 and 10 have divisors other than 1 and itself, and 5 is not prime).","solution":"from typing import List import math def is_prime(n: int) -> bool: Helper function to check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def check_prime_numbers(nums: List[int]) -> List[bool]: Returns a list of booleans indicating whether each integer in the input list `nums` is a prime number. return [is_prime(num) for num in nums]"},{"question":"In a land far away, there exists a peculiar set of numbers called \\"Magical Numbers.\\" A number is said to be magical if the sum of its digits is divisible by a given integer `d`. Given a range of integers from `l` to `r` (inclusive), find the count of magical numbers within that range. If there are none, return `-1`. Input: The first line contains T, the number of test cases. Each of the next T lines contains three integers `l`, `r` and `d`. Output: For each test case, output the count of magical numbers in the range. If there are no magical numbers, output `-1`. Constraints: 1 ≤ T ≤ 10^5 1 ≤ l ≤ r ≤ 10^9 1 ≤ d ≤ 100 SAMPLE INPUT 2 1 10 3 11 20 5 SAMPLE OUTPUT 3 2 Explanation: In the first test case, the magical numbers between 1 and 10 with digit sums divisible by 3 are 3, 6, and 9, which makes the count 3. In the second test case, the magical numbers between 11 and 20 with digit sums divisible by 5 are 14 and 20, which makes the count 2.","solution":"def digit_sum(n): Returns the sum of the digits of a number n. return sum(int(digit) for digit in str(n)) def count_magical_numbers(l, r, d): Returns the count of magical numbers in the range [l, r] where the sum of its digits is divisible by d. If there are no magical numbers, return -1. magical_count = 0 for number in range(l, r + 1): if digit_sum(number) % d == 0: magical_count += 1 return magical_count if magical_count > 0 else -1 def process_test_cases(test_cases): For each test case, calculate the number of magical numbers and return the results. results = [] for l, r, d in test_cases: result = count_magical_numbers(l, r, d) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): l = int(data[index]) r = int(data[index + 1]) d = int(data[index + 2]) test_cases.append((l, r, d)) index += 3 results = process_test_cases(test_cases) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"A robotics company is designing a new line of autonomous robots that can pick and place items from one area to another in a factory setting. Each robot can be represented as a point on a 2D grid, where the factory\'s layout is also defined by a series of grid points. The movement of robots is constrained by factory walls. Each robot moves by taking steps in either up, down, left, or right direction. However, the robots should not move through walls, which are also represented as points on the grid. The goal for each robot is to move from its starting position to its destination point. Given a grid of dimensions `n` x `m`, a starting point `S` (start_x, start_y), a destination point `D` (end_x, end_y), and a set of wall points where the robots cannot move, write an algorithm to find the minimum number of steps required for a robot to move from `S` to `D`. If it\'s not possible for the robot to reach `D`, return `-1`. -----Input----- The first line contains two integers `n` and `m` – the dimensions of the grid (1 ≤ n, m ≤ 1000). The second line contains two integers `start_x` and `start_y` – the coordinates of the starting point `S` (0 ≤ start_x < n, 0 ≤ start_y < m). The third line contains two integers `end_x` and `end_y` – the coordinates of the destination point `D` (0 ≤ end_x < n, 0 ≤ end_y < m). The fourth line contains an integer `k` – the number of walls (0 ≤ k ≤ n * m). The next `k` lines each contain two integers `w_x` and `w_y` – the coordinates of the walls (0 ≤ w_x < n, 0 ≤ w_y < m). -----Output----- Print a single integer representing the minimum number of steps required for the robot to move from `S` to `D`. If it is not possible to reach `D`, print `-1`. -----Example----- Input 5 5 0 0 4 4 4 1 1 1 2 2 2 3 2 Output 8 -----Note----- The grid is a 5x5 grid with starting position at (0,0) and destination at (4,4). Walls are located at positions (1,1), (1,2), (2,2) and (3,2). The optimal path avoiding these walls is by moving from (0,0) to (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4), taking 8 steps.","solution":"from collections import deque def min_steps_to_destination(n, m, start_x, start_y, end_x, end_y, walls): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right walls_set = set(walls) queue = deque([(start_x, start_y, 0)]) # (x, y, steps) visited = set((start_x, start_y)) while queue: x, y, steps = queue.popleft() if (x, y) == (end_x, end_y): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in walls_set and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a binary matrix of size n times m where each cell is either a 0 or a 1. A path is defined as a sequence of cells starting from the top-left corner (cell (1,1)) to the bottom-right corner (cell (n,m)) such that every cell in the sequence is a 1 and you can only move right or down at each step. The goal is to determine the length of the shortest path in the matrix that meets the above criteria or to determine if no such path exists. -----Input----- The first line contains two integers n and m (1 leq n,m leq 100) — the number of rows and columns of the matrix. The following n lines contain m binary digits each (0 or 1), describing the matrix. -----Output----- Output the length of the shortest path from the top-left corner to the bottom-right corner if such a path exists. If no such path exists, output -1. -----Examples----- Input 3 3 110 010 011 Output 5 Input 3 3 110 000 011 Output -1 -----Note----- In the first sample case, the possible shortest path is to move right twice and then down twice: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), which consists of 5 cells in total. In the second sample case, there is no path from the top-left corner to the bottom-right corner consisting only of ones.","solution":"from collections import deque def shortest_path_in_binary_matrix(n, m, matrix): if matrix[0][0] == 0 or matrix[n-1][m-1] == 0: return -1 directions = [(0, 1), (1, 0)] # Right and Down movements queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == m - 1: return dist for drow, dcol in directions: nrow, ncol = row + drow, col + dcol if 0 <= nrow < n and 0 <= ncol < m and matrix[nrow][ncol] == 1 and (nrow, ncol) not in visited: visited.add((nrow, ncol)) queue.append((nrow, ncol, dist + 1)) return -1 def matrix_input_parser(matrix_input): lines = matrix_input.strip().split(\\"n\\") n, m = map(int, lines[0].split()) matrix = [list(map(int, list(line))) for line in lines[1:]] return n, m, matrix"},{"question":"Shweta is collecting stamps from different countries. She wants to know how much area her stamp collection will cover. She has stamps of two different sizes: small stamps with a fixed area of 2 square centimeters and large stamps with a fixed area of 5 square centimeters. Can you help her calculate the total area covered by her stamp collection? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains two integers A, B - the number of small and large stamps respectively. ------ Output Format ------ For each test case, output the total area covered by Shweta\'s stamp collection. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ A, B ≤ 100 ----- Sample Input 1 ------ 2 3 2 1 4 ----- Sample Output 1 ------ 19 22 ----- explanation 1 ------ Test case-1: She has 3 small stamps and 2 large stamps. The total area is 3 cdot 2 + 2 cdot 5 = 6 + 10 = 16 square centimeters. Test case-2: She has 1 small stamp and 4 large stamps. The total area is 1 cdot 2 + 4 cdot 5 = 2 + 20 = 22 square centimeters.","solution":"def calculate_stamp_area(T, cases): Calculate the total area of stamp collections. T: int - Number of test cases. cases: list of tuples - Each tuple contains two integers (A, B). Returns: list of int - List of total areas for each test case. areas = [] for A, B in cases: total_area = A * 2 + B * 5 areas.append(total_area) return areas"},{"question":"Problem Given an integer array `arr` and an integer `k`, you need to reverse the order of the first `k` elements of the array. Constraints * 1 ≤ |arr| ≤ 10^5 * 1 ≤ k ≤ |arr| * -10^9 ≤ arr[i] ≤ 10^9 Input The input consists of two lines: 1. The first line contains two integers `n` and `k` where `n` is the length of the array and `k` is the number of elements to reverse. 2. The second line contains `n` integers denoting the elements of the array. Output Output the resulting array after reversing the first `k` elements. Examples Input 5 3 1 2 3 4 5 Output 3 2 1 4 5 Input 4 4 10 20 30 40 Output 40 30 20 10","solution":"def reverse_first_k_elements(arr, k): Reverses the first k elements of the array arr. Parameters: arr (list of int): The array to be modified. k (int): The number of elements to reverse. Returns: list of int: The array with the first k elements reversed. return arr[:k][::-1] + arr[k:]"},{"question":"Write a function that checks if a given point is inside a hexagon. The hexagon\'s vertices and the point\'s coordinates are given. Assume the hexagon vertices are provided in a clockwise or counter-clockwise order. Example 1: Input: hexagon = [[1, 1], [3, 1], [4, 2], [3, 3], [1, 3], [0, 2]] point = [2, 2] Output: True Explanation: The hexagon points form a closed shape, and the point [2, 2] lies inside the hexagon. Example 2: Input: hexagon = [[1, 1], [3, 1], [4, 2], [3, 3], [1, 3], [0, 2]] point = [5, 5] Output: False Explanation: The hexagon points form a closed shape, and the point [5, 5] lies outside the hexagon. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function isPointInHexagon() that takes in a 2-d array (hexagon) of size 6x2 representing the vertices and an array (point) of size 2 representing the coordinates of the point. The function should return a boolean value: true if the point is inside the hexagon, and false otherwise. The driver code should take care of the input/output. Expected Time Complexity: O(1) per query. Expected Auxiliary Space: O(1). Constraints: 1 <= hexagon[i][0], hexagon[i][1] <= 10^4 1 <= point[0], point[1] <= 10^4","solution":"def is_point_in_hexagon(hexagon, point): def sign(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) inside = True for i in range(len(hexagon)): j = (i + 1) % len(hexagon) if sign(hexagon[i], hexagon[j], point) < 0: inside = False break return inside"},{"question":"Create a function to find the smallest integer x such that the sum of the digits of x equals a given number S. ------ Input : ------ The first line contains the number of test cases T. Each of the next T lines contains a single integer S. ------ Output : ------ Output T lines, one for each test case, each containing the required smallest integer x for the corresponding test case. ------ Constraints : ------ 1 ≤ T ≤ 10000 1 ≤ S ≤ 500 ----- Sample Input 1 ------ 3 1 10 18 ----- Sample Output 1 ------ 1 19 99","solution":"def smallest_integer_with_sum_s(S): Returns the smallest integer x such that the sum of the digits of x equals S. if S == 0: return 0 result = \\"\\" while S > 0: digit = min(S, 9) result = str(digit) + result S -= digit return int(result) def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(smallest_integer_with_sum_s(S)) return results"},{"question":"You are provided with a string of lower case English letters and you need to compress the string using the following algorithm: 1. Count the consecutive occurrences of each character in the string. 2. If a character repeats consecutively, append the character followed by the count of its occurrences to the compressed string. If a character does not repeat consecutively, simply append the character. 3. The compressed string should only be returned if it is shorter than the original string; otherwise, return the original string. For example: - \\"aabcccccaaa\\" should be compressed to \\"a2b1c5a3\\". - \\"abcd\\" should remain \\"abcd\\" as the compressed version \\"a1b1c1d1\\" has the same length. Implement the function `compress_string` that performs this operation. # Function Signature ```python def compress_string(s: str) -> str: pass ``` # Input - A single string `s` (0 <= len(s) <= 10^4) of lower case English letters. # Output - A string which is either the compressed version of `s` or the original string `s` if the compressed version is not shorter. # Examples ```python assert compress_string(\\"aabcccccaaa\\") == \\"a2b1c5a3\\" assert compress_string(\\"abcd\\") == \\"abcd\\" assert compress_string(\\"\\") == \\"\\" assert compress_string(\\"aaabbbcccdddeee\\") == \\"a3b3c3d3e3\\" assert compress_string(\\"a\\") == \\"a\\" ``` # Note - You may assume that the input string only contains lower case English letters. - If the input string is empty, return an empty string.","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"You are given a rectangular garden with dimensions MxN (M rows and N columns). Your task is to find the number of unique paths that a gardener can take to move from the top-left corner of the garden (1,1) to the bottom-right corner (M,N). The gardener can either move down or right at any point in time. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers M and N, representing the number of rows and columns of the garden. Output Format For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. Constraints 1 ≤ T ≤ 10 1 ≤ M, N ≤ 100 SAMPLE INPUT 3 2 2 3 3 3 7 SAMPLE OUTPUT 2 6 28 Explanation In the first case, there are 2 unique paths: (Right, Down) and (Down, Right). In the second case, there are 6 unique paths. In the third case, there are 28 unique paths.","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left corner to the bottom-right corner of an MxN grid. if m == 1 or n == 1: return 1 dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1] def solve_unique_paths(test_cases): Solve multiple test cases of the unique paths problem. results = [] for m, n in test_cases: result = unique_paths(m, n) results.append(result) return results"},{"question":"# Task Given an **_integer_ n** , *Find the smallest integer m* , Such That , # Conditions : * **_m_** is *greater than or equal to n* . * **_m_** is a **_palindrome_** . ___ # Notes * The **_parameter (n)_** passed to the function is a *positive integer* . ___ # Input >> Output Examples ``` smallestPalindrome (120) ==> return (121) ``` Explanation: **_(121)_** is a palindrome and greater than or equal to **_(120)_**. ___ ``` smallestPalindrome (321) ==> return (323) ``` Explanation: **_(323)_** is a palindrome and greater than or equal to **_(321)_**. ___ ``` smallestPalindrome (99) ==> return (99) ``` Explanation: **_(99)_** is already a palindrome and greater than or equal to **_(99)_**. ___ ___","solution":"def is_palindrome(number): Checks if the given number is a palindrome. return str(number) == str(number)[::-1] def smallest_palindrome(n): Finds the smallest palindrome number which is greater than or equal to n. while not is_palindrome(n): n += 1 return n"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: - Choose any character in the string and remove it. Your goal is to determine the minimum number of deletions required so that no two adjacent characters in the resulting string are the same. -----Constraints----- - The length of the string is between 1 and 100,000. - The string consists only of lowercase English letters. -----Input----- A single string s. -----Output----- Print the minimum number of deletions required so that no two adjacent characters are the same. -----Sample Input----- aabcc -----Sample Output----- 2 By deleting one \'a\' and one \'c\', we get \\"abc\\", which has no two adjacent characters that are the same.","solution":"def min_deletions_to_avoid_adjacent_duplicates(s): Returns the minimum number of deletions required so that no two adjacent characters in the string are the same. count = 0 prev_char = \'\' for char in s: if char == prev_char: count += 1 prev_char = char return count"},{"question":"Implement an algorithm to determine if it is possible to transform a given string S into a palindrome by rearranging its characters. A palindrome is a word that reads the same forwards and backwards. ------ Input ------ The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a string S of lowercase English letters. ------ Output ------ For each test case, print \\"YES\\" if it is possible to rearrange the characters of S to form a palindrome. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 ----- Sample Input 1 ------ 3 aabb racecar abc ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ For the first input \\"aabb\\", we can rearrange it to form the palindrome \\"abba\\". For the second input \\"racecar\\", it is already a palindrome. For the third input \\"abc\\", there is no way to rearrange it to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def palindrome_tester(test_cases): Determines for each test case if the characters of the string can be rearranged to form a palindrome. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers `arr`, replace each element of the array with the product of all other elements of the array without using division. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: - The product of all elements of the array is 24. - The output array elements are computed as follows: - The first element is 24 / 1 = 24 (product of [2, 3, 4]). - The second element is 24 / 2 = 12 (product of [1, 3, 4]). - The third element is 24 / 3 = 8 (product of [1, 2, 4]). - The fourth element is 24 / 4 = 6 (product of [1, 2, 3]). Example: Input: [2, 3, 5, 7] Output: [105, 70, 42, 30] Constraints: - The length of the array will be in the range [1, 1000]. - The elements of the array will be in the range [-1000, 1000]. Follow up: - Can you solve it in O(n) time complexity and O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis).","solution":"def product_except_self(arr): Returns the array where each element is the product of all elements of `arr` except itself. n = len(arr) if n == 0: return [] result = [1] * n # Step 1: Calculate left products left_product = 1 for i in range(n): result[i] = left_product left_product *= arr[i] # Step 2: Calculate right products and the result right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"There is a land with n villages connected by m bidirectional roads. Each road has a certain length. The villagers want to construct a new type of transportation system, wherein each village can reach every other village directly or indirectly (i.e., through a series of roads), but they want to minimize the cost of constructing new roads or maintaining existing roads. Your task is to find the shortest \\"road network\\" that connects all the villages together. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000): the number of villages and the number of roads respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000): representing a road between villages u and v with length w. Output Output a single integer: the total length of the shortest road network that connects all the villages together. If it is not possible to connect all the villages, output \\"Impossible\\". SAMPLE INPUT 4 5 1 2 3 2 3 1 3 4 2 4 1 4 1 3 5 SAMPLE OUTPUT 6","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda item: item[2]) # Sorting edges based on their weight parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 mst_edges = [] # To store the edges in the minimum spanning tree for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += w mst_edges.append(edge) if len(mst_edges) != n-1: return \\"Impossible\\" return mst_weight def minimum_road_network(n, m, roads): edges = [(u-1, v-1, w) for u, v, w in roads] return kruskal(n, edges)"},{"question":"Write a function that takes an array of integers and returns the running total of the elements as a new array. The running total at each index is the sum of all previous numbers up to that index, including the current one. Example: `[1, 2, 3, 4]` should return `[1, 3, 6, 10]`","solution":"def running_total(arr): Returns a new array where each element is the running total of the input array. result = [] total = 0 for num in arr: total += num result.append(total) return result"},{"question":"Company XYZ is facing a severe security breach. An unknown hacker has infiltrated their system and has tampered with a set of numerical sequences. The company\'s forensic team has identified that the sequences follow a certain corrupted pattern and need to be restored to their original form for further analysis. The hacker has taken an initial sequence of positive integers and modified it by inserting some extra integers at various positions, but the relative order of the original integers remains unchanged. For example, if the original sequence was [1, 2, 3], the hacker could produce a corrupted sequence like [4, 1, 6, 2, 5, 3, 7]. You are given the corrupted sequence and must determine the length of the longest increasing subsequence (LIS) that could represent the original sequence. Write a program that takes a single line of input which contains the corrupted sequence, a space-separated list of integers, and outputs the length of the LIS. # Input Format A single line containing N space-separated integers, where N is the length of the corrupted sequence (1 ≤ N ≤ 100,000). # Output Format A single integer representing the length of the longest increasing subsequence. # Sample Input 8 2 5 1 8 3 6 7 4 # Sample Output 4 # Explanation The longest increasing subsequence in the given corrupted sequence is [2, 3, 6, 7] or [2, 3, 6, 8] etc., which has a length of 4.","solution":"import bisect def longest_increasing_subsequence(corrupted_sequence): Returns the length of the longest increasing subsequence in the given corrupted sequence. lis = [] for num in corrupted_sequence: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def main(): corrupted_sequence = list(map(int, input().strip().split())) print(longest_increasing_subsequence(corrupted_sequence))"},{"question":"After recent rainfall, a certain region contains `n` water puddles on a straight line road. The i-th puddle is located at position `pi` on the road and has a depth of `di`. A group of engineers is tasked with analyzing the water levels in these puddles for construction purposes. They have received `q` queries, each asking for the total depth of puddles within a specific range of positions on the road. For each query, you need to find the sum of the depths of all puddles within the specified range `[l, r]` (inclusive), where `l` and `r` are positions on the road. Input The first line contains an integer `n` (1 ≤ n ≤ 105), the number of puddles on the road. The second line contains `n` space-separated integers `pi` (1 ≤ pi ≤ 109), the positions of the puddles on the road. The third line contains `n` space-separated integers `di` (0 ≤ di ≤ 109), the depths of the puddles at the corresponding positions. The fourth line contains an integer `q` (1 ≤ q ≤ 3·105), the number of queries. The next `q` lines each contain two space-separated integers `l` and `r` (1 ≤ l ≤ r ≤ 109), representing the range of positions to consider for that query. Output For each query, print the sum of the depths of puddles within the given range `[l, r]`. Example Input 5 1 2 4 7 8 10 20 15 10 5 3 2 8 1 4 5 9 Output 50 45 15","solution":"def sum_of_depths_within_range(n, positions, depths, q, queries): This function returns an array of sums of depths of puddles within specified ranges for each query. :param n: int, number of puddles :param positions: list of int, positions of puddles on the road :param depths: list of int, depths of puddles at respective positions :param q: int, number of queries :param queries: list of tuples, each containing two ints representing the range of positions :return: list of ints, each representing the sum of depths of puddles within the range for each query from collections import defaultdict puddle_dict = defaultdict(int) for pos, depth in zip(positions, depths): puddle_dict[pos] += depth results = [] for l, r in queries: sum_depth = sum(depth for pos, depth in puddle_dict.items() if l <= pos <= r) results.append(sum_depth) return results # Define a function to format the input and call the processing function def process_input(data): lines = data.split(\\"n\\") n = int(lines[0]) positions = list(map(int, lines[1].split())) depths = list(map(int, lines[2].split())) q = int(lines[3]) queries = [tuple(map(int, lines[4+i].split())) for i in range(q)] return sum_of_depths_within_range(n, positions, depths, q, queries)"},{"question":"# Biologist\'s problem - DNA Strand Matching A biologist is working on a project to find pairs of DNA strands that can be aligned in such a way that there is no conflicting base pair. A DNA strand consists of four types of bases: Adenine (A), Thymine (T), Cytosine (C), and Guanine (G). Two DNA strands of equal length are considered to have no conflicting base pairs if, at every index, the bases are either the same or complementary (A <-> T, C <-> G). Formally, given two DNA strands `S1` and `S2` of length `N`, at each index `i` (1≤ i ≤ N), either `S1[i] == S2[i]` or `S1[i]` and `S2[i]` are complementary bases. Your task is to determine if a given pair of DNA strands can be considered as having no conflicting base pairs, and if so, output either \'YES\' or \'NO\'. ------ Input Format ------ - The first line contains an integer `T`, the number of test cases. - For each of the `T` test cases, the first line contains a single integer `N` (length of the DNA strands). - The second line contains a string `S1` of length `N`. - The third line contains a string `S2` of length `N`. ------ Output Format ------ For each test case, output a single line containing either \'YES\' (if the DNA strands have no conflicting base pairs) or \'NO\' (otherwise). ------ Constraints ------ - `1 ≤ T ≤ 100` - `1 ≤ N ≤ 1000` - `S1` and `S2` will contain only characters A, T, C, and G. ------ Sample Input ------ 3 4 ATCG TAGC 5 GATTACA CTTAAGG 3 AAA TTT ------ Sample Output ------ YES NO YES ------ Explanation ------ Test case 1: The strands \\"ATCG\\" and \\"TAGC\\" have no conflicting base pairs, as each base is either the same or complementary (A <-> T, T <-> A, C <-> G, G <-> C). Test case 2: The pairs G-C, A-T, T-A, T-C, A-A, C-G, A-G include a conflict at the 4th index (T-C). Test case 3: Each base in the strand \\"AAA\\" is complementary to each corresponding base in the strand \\"TTT\\".","solution":"def dna_strand_matching(T, test_cases): complementary = {\'A\': \'T\', \'T\': \'A\', \'C\': \'G\', \'G\': \'C\'} results = [] for case in test_cases: N, S1, S2 = case is_no_conflict = True for i in range(N): if S1[i] != S2[i] and complementary[S1[i]] != S2[i]: is_no_conflict = False break results.append(\'YES\' if is_no_conflict else \'NO\') return results"},{"question":"You have a series of sensors distributed in a street, and each sensor records the number of people passing by at a given time. Each sensor gives a reading in the form of a list containing the number of people at consecutive intervals. Your task is to identify the maximum number of people that have passed by a particular sensor during any consecutive interval of time. Consider the following rules: - It is guaranteed that each sensor records at least one reading. - The sensors are identified by their readings. -----Input----- The input consists of multiple test cases. The first line of the input contains an integer t (1 le t le 1000) — the number of test cases. Each test case starts with an integer n (1 le n le 10000) — the number of readings for a particular sensor. The second line of each test case contains n integers a_1, a_2, dots, a_n (0 le a_i le 1000), where a_i is the number of people recorded by the sensor at the i-th interval. The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, print the maximum number of people recorded at any interval by that sensor. -----Example----- Input 3 5 1 2 3 2 1 3 10 20 10 4 15 25 35 30 Output 3 20 35 -----Note----- In the first test case, the maximum number of people recorded at any interval is 3. In the second test case, the maximum number of people recorded at any interval is 20. In the third test case, the maximum number of people recorded at any interval is 35.","solution":"def max_people_per_sensor(test_cases): Args: test_cases: List of tuples. Each tuple contains the number of readings and list of readings for a particular sensor. Returns: A list of integers representing the maximum number of people recorded at any interval by each sensor. results = [] for readings in test_cases: readings = readings[1] # Get the list of readings from each test case data max_people = max(readings) # Find the maximum number of people recorded by the sensor results.append(max_people) return results"},{"question":"You are tasked with helping a startup devise a secure password policy for their users. The password must adhere to the following rules: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one numeric digit. 5. It must contain at least one special character from the set \'!@#%^&*()-+\' You need to write a function that checks if a given password meets all the above requirements. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 10^5), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100), representing the password to be checked. -----Output----- For each test case, print \\"YES\\" if the password is strong according to the policy, or \\"NO\\" otherwise. -----Example----- Input 3 Hello@123 Weakpass Str0ngP@ssword Output YES NO YES","solution":"import re def is_strong_password(password): This function checks if the given password meets the security criteria. if len(password) < 8: return \\"NO\\" if not re.search(r\'[A-Z]\', password): return \\"NO\\" if not re.search(r\'[a-z]\', password): return \\"NO\\" if not re.search(r\'[0-9]\', password): return \\"NO\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"NO\\" return \\"YES\\" def check_passwords(t, passwords): This function accepts multiple passwords and checks if each one meets the security criteria. It returns a list of results, each being \\"YES\\" or \\"NO\\". results = [] for password in passwords: results.append(is_strong_password(password)) return results"},{"question":"Determine if a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. -----Input----- A single line containing a string s of length up to 100, consisting of lowercase letters. -----Output----- Print «yes» (without quotes) if it\'s possible to rearrange the string to form a palindrome, and «no» otherwise. -----Examples----- Input civic Output yes Input ivicc Output yes Input hello Output no -----Note----- A string can be rearranged to form a palindrome if there is at most one character with an odd frequency count. For instance, \\"civic\\" and \\"ivicc\\" can be rearranged to form \\"civic\\" and \\"civic\\", respectively, which are palindromes. However, \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. :param s: string of lowercase letters :return: \'yes\' if the string can be rearranged to form a palindrome, \'no\' otherwise # Dictionary to store count of each character char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count odd occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # If more than one character has an odd count, not possible to form a palindrome if odd_count > 1: return \'no\' return \'yes\'"},{"question":"A company is developing an inventory tracking system for their warehouse. The warehouse contains several types of items, each distinguished by a unique ID, and each item type has a certain number of units available in stock. Write a program to perform operations on the inventory. The program should support the following operations: 1. Add stock: This operation increases the number of units available for a specific item type given its ID. 2. Remove stock: This operation decreases the number of units available for a specific item type given its ID. It is guaranteed that there will always be enough stock to remove. 3. Query stock: This operation checks the current number of units available for a specific item type given its ID. Constraints * 1 ≤ ID of item types ≤ 1000 * 0 ≤ Number of units ≤ 100000 * Number of operations is less than or equal to 1000 Input The first line contains an integer n representing the number of operations. Each of the following n lines describes an operation: * Operation \\"add\\" followed by two integers ID and units. * Operation \\"remove\\" followed by two integers ID and units. * Operation \\"query\\" followed by one integer ID. Output For each \\"query\\" operation, output a single integer which is the number of units available for the given item type. Example Input 6 add 100 50 add 200 30 query 100 remove 100 20 query 100 query 200 Output 50 30","solution":"class Inventory: def __init__(self): self.stock = {} def add_stock(self, ID, units): if ID in self.stock: self.stock[ID] += units else: self.stock[ID] = units def remove_stock(self, ID, units): if ID in self.stock: self.stock[ID] -= units def query_stock(self, ID): return self.stock.get(ID, 0) def process_operations(operations): inventory = Inventory() results = [] for operation in operations: op = operation.split() if op[0] == \\"add\\": inventory.add_stock(int(op[1]), int(op[2])) elif op[0] == \\"remove\\": inventory.remove_stock(int(op[1]), int(op[2])) elif op[0] == \\"query\\": results.append(inventory.query_stock(int(op[1]))) return results"},{"question":"Alice is working with binary trees. She needs to determine the maximum depth (or height) of a binary tree, defined as the number of nodes along the longest path from the root node down to the farthest leaf node. Given a binary tree, your task is to calculate its maximum depth. ------ Input Format ------ - The first line contains an integer N denoting the number of nodes in the tree. - The following N lines each contain two integers L and R, where L is the index of the left child and R is the index of the right child of a node. Note that use `-1` to represent a null child, meaning the node doesn\'t have that corresponding child. The nodes are indexed from 1 to N. ------ Output Format ------ - A single integer representing the maximum depth of the binary tree. ------ Constraints ------ 1 ≤ N ≤ 10^{5} ----- Sample Input 1 ------ 5 2 3 -1 -1 -1 4 -1 -1 -1 -1 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ The binary tree corresponding to the input: ``` 1 / 2 3 4 ``` The maximum depth of the tree is 3, which is the length of the path from the root node 1, to node 3, to node 4.","solution":"class Node: def __init__(self): self.left = None self.right = None def create_tree_tree_structure(n, children): nodes = [None] + [Node() for _ in range(n)] for i in range(1, n + 1): left, right = children[i - 1] if left != -1: nodes[i].left = nodes[left] if right != -1: nodes[i].right = nodes[right] return nodes[1] def max_depth(root): if root is None: return 0 return 1 + max(max_depth(root.left), max_depth(root.right)) def binary_tree_max_depth(n, children): root = create_tree_tree_structure(n, children) return max_depth(root) # Helper method to parse the input and call the function def parse_input_and_find_max_depth(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) children = [tuple(map(int, line.split())) for line in lines[1:]] return binary_tree_max_depth(n, children)"},{"question":"You are given a series of n integers. Calculate the minimum number of operations required to make all the numbers equal. In one operation, you can either increment or decrement any chosen number by 1. Write a function called `min_operations_to_equalize` that accepts a list of integers and returns the minimum number of operations needed. -----Input----- - A list of integers `nums` where 1 ≤ len(nums) ≤ 10^5 and each integer in `nums` is in the range [-10^9, 10^9]. -----Output----- - A single integer which is the minimum number of operations needed to make all the integers in the list equal. -----Examples----- Input [1, 2, 3] Output 2 Input [10, 10, 10] Output 0 Input [1, 10, 2, 9] Output 16 -----Note----- In the first example, the minimum number of operations required to make all numbers equal is 2. You can increment 1 by 1 and decrement 3 by 1 to make all numbers equal to 2. In the third example, the optimal way is to choose 5 as the target number, resulting in 4 + 5 + 3 + 4 = 16 operations. Hint: Consider finding the median of the list as a potential optimal number to target, since making all elements equal to the median minimizes the total number of operations.","solution":"def min_operations_to_equalize(nums): Calculate the minimum number of operations required to make all the numbers in the list equal. Args: nums (list of int): A list of integers. Returns: int: The minimum number of operations required to make all numbers equal. nums.sort() median = nums[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"Alicia is organizing a gaming tournament and wants to ensure fair play by balancing the skill levels of competitors across different teams. She has a list of N players, each with an associated skill level. She needs to form two teams such that the absolute difference between the total skill levels of the two teams is minimized. Your task is to help Alicia determine the minimum possible absolute difference in the total skill levels between the two teams. Input format: - The first line contains an integer N, the number of players. - The second line contains N integers, where the i-th integer represents the skill level of the i-th player. Output format: Output an integer that represents the minimal absolute difference between the total skill levels of the two teams. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ skill level of each player ≤ 1000 SAMPLE INPUT: 5 3 1 4 2 2 SAMPLE OUTPUT: 0 Explanation: One possible way to divide the players into two teams is: Team 1: 3, 2 Team 2: 1, 4, 2 Total skill levels are both 5, so the absolute difference is 0.","solution":"def min_skill_difference(N, skills): total_sum = sum(skills) target = total_sum // 2 dp = [0] * (target + 1) for skill in skills: for j in range(target, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) best_sum_for_first_team = dp[target] best_sum_for_second_team = total_sum - best_sum_for_first_team return abs(best_sum_for_first_team - best_sum_for_second_team) # Example usage: # N = 5 # skills = [3, 1, 4, 2, 2] # print(min_skill_difference(N, skills)) # Output: 0"},{"question":"You are given an integer array `arr` sorted in non-decreasing order, and an integer `x`. Your task is to find the maximum number of pairs in the array where the sum of each pair is less than or equal to `x`. Each element of the array can be paired at most once. Write a function `max_pairs` that takes in the array `arr` and the integer `x` and returns the maximum number of pairs. Example: Input: arr = [1, 2, 3, 4, 5], x = 6 Output: 2 Explanation: The pairs are (1, 5) and (2, 4). Both pairs sum to 6 or less. Input: arr = [1, 1, 1, 1], x = 2 Output: 2 Explanation: The pairs are (1, 1) and (1, 1). Each pair sums to 2. Note: The array will contain at most 10^4 elements, and the values of the elements and `x` will be at most 10^9.","solution":"def max_pairs(arr, x): Returns the maximum number of pairs where the sum of each pair is less than or equal to x. left = 0 right = len(arr) - 1 count = 0 while left < right: if arr[left] + arr[right] <= x: count += 1 left += 1 right -= 1 else: right -= 1 return count"},{"question":"You are given a string containing only characters \'x\', \'y\', and \'z\'. We define a special substring as a substring that contains at least one \'x\', one \'y\', and one \'z\'. Your task is to find the length of the smallest special substring in the given string. Input The first line contains T, the number of test cases. Each test case contains a single line: a string consisting of characters \'x\', \'y\', and \'z\'. Output For each test case, output the length of the smallest special substring. If no such substring exists, output -1. Constraints 1 ≤ T ≤ 10 1 ≤ Length of the string ≤ 10^4 SAMPLE INPUT 3 xyzzxy xyz xxxxx SAMPLE OUTPUT 3 3 -1 Explanation In the 1st testcase, the smallest special substring is \'xyz\' with length 3. In the 2nd testcase, the entire string \'xyz\' is the smallest special substring with length 3. In the 3rd testcase, there is no substring that contains all characters \'x\', \'y\', and \'z\'. Therefore, the output is -1.","solution":"def smallest_special_substring(s): Finds the length of the smallest special substring containing at least one \'x\', \'y\', and \'z\'. n = len(s) smallest_len = n + 1 # Keep track of the latest positions of \'x\', \'y\', and \'z\' pos = {\'x\': -1, \'y\': -1, \'z\': -1} for i in range(n): if s[i] in pos: pos[s[i]] = i if all(pos[char] != -1 for char in \'xyz\'): # Check if all characters have been seen current_min_len = i - min(pos.values()) + 1 if current_min_len < smallest_len: smallest_len = current_min_len return smallest_len if smallest_len <= n else -1 def solve(T, test_cases): Solves the problem for multiple test cases. results = [] for case in test_cases: results.append(smallest_special_substring(case)) return results"},{"question":"A warehouse supervisor has a grid of R x C cells where items are stored. Each cell can either contain a package or be empty. Given an initial state of the grid, the supervisor wishes to know how many packages can be grouped together. Two packages belong to the same group if they are directly adjacent vertically or horizontally. Write code to find the total number of groups of packages in each test case. Each test case provides the grid dimensions and the state of the cells. ------ Input Format ------ - The first line of the input contains a single integer T, the number of test cases. The description of the T test cases follows. - The first line of each test case contains two integers R and C. - The next R lines describe the rows of the grid, each containing C characters. A character \'.\' denotes an empty cell while a character \'P\' denotes a cell with a package. ------ Output Format ------ On a new line for each test case, print the number of groups of packages. ------ Constraints ------ 1 leq T leq 10 1 leq R, C leq 1000 ------ Sample Input ------ 2 3 3 P.. .P. ..P 4 4 PPP. P..P PPP. .... ------ Sample Output ------ 3 2 ------ Explanation ------ Test case 1: There are three groups of packages: 1. Packages at (1, 1). 2. Packages at (2, 2). 3. Packages at (3, 3). Test case 2: There are two groups of packages: 1. Packages at cells (1, 1), (1, 2), (1, 3), (2, 1), (3, 1), (3, 2), and (3, 3). 2. Package at cell (2, 4).","solution":"def count_package_groups(T, test_cases): def dfs(grid, x, y, visited): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == \'P\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) results = [] for case in test_cases: R, C = case[0] grid = case[1] visited = [[False] * C for _ in range(R)] group_count = 0 for i in range(R): for j in range(C): if grid[i][j] == \'P\' and not visited[i][j]: visited[i][j] = True group_count += 1 dfs(grid, i, j, visited) results.append(group_count) return results # Example usage T = 2 test_cases = [ ((3, 3), [ \'P..\', \'.P.\', \'..P\' ]), ((4, 4), [ \'PPP.\', \'P..P\', \'PPP.\', \'....\' ]) ] print(count_package_groups(T, test_cases)) # Output: [3, 2]"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns the first non-repeating character in it. If there is no non-repeating character, return \'_\'. Constraints * The given string can have a length from 1 to 10^5. * The string contains only lowercase English letters (\'a\' to \'z\'). Input Input is given from Standard Input as a single line containing a string s. Output Print the first non-repeating character in the input string; if none exist, print `_`. Examples Input aabbccdde Output e Input abcdabc Output d Input aabbcc Output _","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string. If there is no non-repeating character, returns \'_\'. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"Given an array of integers, you are required to compute the maximum sum that can be obtained by selecting non-adjacent elements from the array. Ensure your solution handles large arrays efficiently. Example 1: Input: arr = [3, 2, 5, 10, 7] Output: 15 Explanation: The maximum sum is obtained by selecting 3, 10, and 2, which adds up to 15. Example 2: Input: arr = [3, 2, 7, 10] Output: 13 Explanation: The maximum sum is obtained by selecting 3 and 10, which adds up to 13. Example 3: Input: arr = [5, 5, 10, 100, 10, 5] Output: 110 Explanation: The maximum sum is obtained by selecting 5, 100, and 5, which adds up to 110. Your task: You don\'t need to read input or print anything. Your task is to complete the function maxSumNonAdjacent() which takes an array of integers as input and returns an integer representing the maximum sum obtainable from non-adjacent elements in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"def maxSumNonAdjacent(arr): Function to calculate the maximum sum of non-adjacent elements in an array. :param arr: List of integers :return: Maximum sum of non-adjacent elements if not arr: return 0 incl = 0 # Max sum including the current element excl = 0 # Max sum excluding the current element for num in arr: # Current max excluding current element new_excl = max(incl, excl) # Current max including current element incl = excl + num excl = new_excl # Return the maximum of incl and excl return max(incl, excl)"},{"question":"In a kingdom far away, there are n islands, connected by m bridges. Each bridge has a certain length, and all bridges are bidirectional. The King of the kingdom wants to connect all islands in such a way that travel between any two islands is as easy as possible, which means minimizing the total length of the bridges used. The King has assigned you, as the Royal Architect, the task of finding the minimal total length of bridges needed to ensure all islands are connected directly or indirectly. The king also wants to know if it\'s impossible to connect all islands using the given bridges. Input The first line contains two integers n and m (1 ≤ n ≤ 1000; 0 ≤ m ≤ 10000) — the number of islands and the number of bridges. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 100000) — the two islands connected by the bridge and the length of the bridge. Output Output the minimal total length of the bridges needed to ensure all islands are connected. If it\'s impossible to connect all islands, print \\"IMPOSSIBLE\\". Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 4 1 5 Output 6 Input 5 3 1 2 3 3 4 4 4 5 1 Output IMPOSSIBLE Note * In the first example, an optimal way to connect all islands is to use the bridges (1-2), (2-3), and (3-4), with a total length of 1 + 2 + 3 = 6. * In the second example, it\'s impossible to connect island 5 to the other islands using the given bridges, so the output is \\"IMPOSSIBLE\\".","solution":"def find_minimal_bridge_length(n, m, bridges): from heapq import heappop, heappush parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX if m == 0: return \\"IMPOSSIBLE\\" if n > 1 else 0 bridges.sort(key=lambda x: x[2]) total_length = 0 num_edges = 0 for u, v, w in bridges: u -= 1 v -= 1 if find(u) != find(v): union(u, v) total_length += w num_edges += 1 if num_edges == n - 1: return total_length return \\"IMPOSSIBLE\\" # Example usage print(find_minimal_bridge_length(4, 5, [(1, 2, 1), (1, 3, 4), (2, 3, 2), (3, 4, 3), (4, 1, 5)])) # Output: 6 print(find_minimal_bridge_length(5, 3, [(1, 2, 3), (3, 4, 4), (4, 5, 1)])) # Output: IMPOSSIBLE"},{"question":"In a small town, there is a single road that connects all the houses. The houses are positioned along this road at distinct coordinates xi (1 ≤ i ≤ n) on a number line. Due to increasing traffic and safety concerns, the mayor has decided to install traffic lights at specific positions along the road. Each traffic light has a certain range of effectiveness which is measured in distance, and it can only effectively cover houses that are within this range on either side. Your task is to determine the minimum number of traffic lights needed to cover all the houses on the road. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of houses. The second line contains n integers x1, x2, ..., xn (1 ≤ xi ≤ 10000) — the coordinates of the houses along the road. The third line contains a single integer r (1 ≤ r ≤ 1000) — the effective range of each traffic light. Output Print a single integer — the minimum number of traffic lights needed to cover all the houses on the road. Examples Input 5 1 3 6 9 12 2 Output 3 Note In the given example, placing traffic lights at positions 3, 6, and 12 will cover all the houses. The first light at position 3 will cover houses at coordinates 1 and 3, the second light at position 6 will cover houses at coordinates 3 and 6, and the third light at position 12 will cover houses at coordinates 9 and 12. Therefore, the minimum number of traffic lights needed is 3.","solution":"def min_traffic_lights_needed(n, house_positions, r): Returns the minimum number of traffic lights needed to cover all houses. Parameters: n (int): Number of houses. house_positions (list): Coordinates of the houses along the road. r (int): Effective range of each traffic light. Returns: int: Minimum number of traffic lights needed to cover all houses. house_positions.sort() num_lights = 0 i = 0 while i < n: # Place the light at the farthest house within the range light_pos = house_positions[i] + r num_lights += 1 # Move to the house just out of the current light\'s range while i < n and house_positions[i] <= light_pos + r: i += 1 return num_lights"},{"question":"Lisa wants to create a list of integers with special properties. She has the following constraints for the list: - The list must contain exactly `n` integers. - Each integer in the list must be between 1 and 10^9, inclusive. - The list must have a specific sum `S`. Additionally, Lisa wants to minimize the sum of the absolute differences between every pair of consecutive integers in the list. The absolute difference between two integers `a` and `b` is given by `abs(a - b)`. Your task is to help Lisa construct such a list that meets the above constraints and minimizes the sum of these absolute differences. Constraints - 2 leq n leq 10^5 - n leq S leq n times 10^9 Input Input is given from Standard Input in the following format: ``` n S ``` Output Print `n` space-separated integers representing the list that meets the constraints and has the smallest possible sum of absolute differences between consecutive integers. Example Input ``` 3 6 ``` Output ``` 1 2 3 ``` Input ``` 4 1000000004 ``` Output ``` 250000001 250000002 250000003 250000000 ```","solution":"def minimize_absolute_differences(n, S): base = S // n remainder = S % n result = [base + 1] * remainder + [base] * (n - remainder) return result"},{"question":"Peter has a collection of n unique books, each with a title which is a string of length m that consists of lowercase English letters. He wants to add a reference number to some of his books following a specific set of rules: - A reference number is a positive integer between 1 and k (inclusive). - The unique identifier for each book is the book title concatenated with reference number (e.g., for a book with title \\"abcd\\" and reference number 123, the unique identifier would be \\"abcd123\\"). - Peter wants to know how many unique identifiers can be formed by adding any reference number (from 1 to k) to each book. Write a program to determine the total number of unique identifiers that can be created for Peter\'s book collection. Input: The first line contains three integers n, m, and k (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100, 1 ≤ k ≤ 1,000,000) — the number of books, the length of each book title, and the maximum reference number, respectively. Each of the next n lines contains a string of m lowercase English letters — the titles of Peter\'s books. Output: Print one integer — the total number of unique identifiers that can be formed. Examples: Input: 3 4 10 book read note Output: 30 Input: 2 3 5 abc xyz Output: 10 Input: 4 5 1 apple berry cherry date Output: 4 Explanation: In the first example, Peter has 3 books, and he can use any number between 1 and 10 as a reference number for each book, resulting in 3 * 10 = 30 unique identifiers. In the second example, there are 2 books, and each can be assigned any number from 1 to 5, resulting in 2 * 5 = 10 unique identifiers. In the third example, since there are 4 books and only one reference number (1), the total number of unique identifiers is simply the number of books, which is 4.","solution":"def count_unique_identifiers(n, m, k, titles): Returns the total number of unique identifiers that can be formed by concatenating book titles with reference numbers ranging from 1 to k. Parameters: n (int): the number of books. m (int): the length of each book title. k (int): the maximum reference number. titles (list of str): the titles of the books. Returns: int: the total number of unique identifiers. return n * k"},{"question":"```if-not:sql Write a function that takes a string as input and returns the same string but with all the vowels removed. For the purpose of this problem, vowels are \'a\', \'e\', \'i\', \'o\', \'u\', both uppercase and lowercase. ``` ```if:sql SQL Notes: You will be given a table, `words`, with one column `word`. Return a table with a column `no_vowels` containing the words from the `word` column with all vowels removed. # words table schema * word STRING # output table schema * no_vowels STRING ```","solution":"def remove_vowels(input_string): Returns the input_string with all the vowels removed. vowels = \\"aeiouAEIOU\\" return \\"\\".join(char for char in input_string if char not in vowels)"},{"question":"Alex is preparing for a programming competition and needs help with a particular type of problem. Given a sequence of N integers, he needs to determine if there exists a contiguous subarray whose sum equals a given number S. You have to write a program that takes N, the sequence of integers, and S as input and checks if such a subarray exists. # Input The input will be given in the following format: - The first line will contain two integers N and S. - The second line will contain N space-separated integers representing the sequence. # Output Print \\"YES\\" if there exists a contiguous subarray whose sum equals S. Otherwise, print \\"NO\\". # Constraints - 1 ≤ N ≤ 100 - -10^3 ≤ sequence[i] ≤ 10^3 - -10^5 ≤ S ≤ 10^5 # SAMPLE INPUT ``` 5 10 1 2 3 4 5 ``` # SAMPLE OUTPUT ``` YES ``` # Explanation In the given sequence [1, 2, 3, 4, 5], the subarray [1, 2, 3, 4] sums to 10. Hence, the output is \\"YES\\".","solution":"def has_subarray_with_sum(N, S, sequence): Determines if there exists a contiguous subarray whose sum equals S. :param N: Integer, length of the sequence. :param S: Integer, the given sum to check. :param sequence: List of integers, the sequence of numbers. :return: str, \\"YES\\" if such a subarray exists, otherwise \\"NO\\". # Initialize pointers and the current sum start = 0 current_sum = 0 for end in range(N): current_sum += sequence[end] # Check if current_sum exceeds S while current_sum > S and start <= end: current_sum -= sequence[start] start += 1 # Check if we found a subarray with the required sum if current_sum == S: return \\"YES\\" return \\"NO\\""},{"question":"Write a function that finds all pairs of integers within a given list that sum up to a target value. Constraints * The integers in the list are unique. * The length of the list is between 2 and 10^4. * Each integer in the list is between -10^5 and 10^5. * The target value is between -10^5 and 10^5. Input The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers, representing the list of elements. The third line contains an integer, representing the target value. Output Output each distinct pair of integers that sum up to the target value in ascending order. Each pair should be formatted as (a, b) and pairs should be sorted by their first elements, and by their second elements if the first are the same. Example Input 6 -1 0 1 2 -1 -4 0 Output (-1, 1) Input 8 1 2 3 4 5 6 7 8 10 Output (2, 8) (3, 7) (4, 6) Explanation For the first example, there is only one pair (-1, 1) that sums up to 0. For the second example, the pairs (2, 8), (3, 7), and (4, 6) sum up to 10.","solution":"def find_pairs_with_sum(nums, target): This function finds all pairs of integers within a given list that sum up to a target value. :param nums: List of integers :param target: Target sum value :return: Sorted list of tuples, each representing a pair that sums up to the target value nums.sort() pairs = [] nums_set = set(nums) for num in nums: complement = target - num if complement in nums_set and complement > num: pairs.append((num, complement)) nums_set.remove(num) nums_set.remove(complement) return pairs"},{"question":"A famous biologist is working on a new experiment involving various species of plants growing in a greenhouse. The greenhouse is divided into n sections, each section can host one species. The biologist wants to monitor the relationship between different species by observing their growth patterns. To make this possible, she has set up a system where she tracks pairs of species that show some kind of interaction by drawing a directed edge from one section to another. The biologist wants to check if it\'s possible to visit every section starting from any section, passing through the directed edges. If this is possible, she can observe all interactions starting from any species. Help the biologist by determining if the greenhouse setup with n sections and directed edges is strongly connected (i.e., there is a directed path from any section to any other section). Input The first line contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^4) — the number of sections and the number of directed edges. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning there\'s a directed edge from section u to section v. Output Print \\"YES\\" if it\'s possible to visit every section starting from any section, passing through the directed edges. Otherwise, print \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 1 Output YES Input 4 3 1 2 2 3 4 1 Output NO Input 4 6 1 2 2 3 3 1 3 4 4 1 4 3 Output YES","solution":"from collections import defaultdict def is_strongly_connected(n, m, edges): Determines if the graph is strongly connected. Args: n: Number of sections. m: Number of directed edges. edges: List of tuples representing directed edges. Returns: \\"YES\\" if the graph is strongly connected, otherwise \\"NO\\". def dfs(graph, start, visited): stack = [start] while stack: node = stack.pop() if not visited[node]: visited[node] = True stack.extend(graph[node]) if n == 1: return \\"YES\\" graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) visited = [False] * (n + 1) dfs(graph, 1, visited) if not all(visited[1:]): return \\"NO\\" visited = [False] * (n + 1) dfs(reverse_graph, 1, visited) if all(visited[1:]): return \\"YES\\" else: return \\"NO\\""},{"question":"# Greedy Parking Meter - **story** Zara, an urban planner, is responsible for managing the city\'s parking meters. She wants to maximize the city\'s revenue by strategically placing parking meters while ensuring the convenience of the drivers. Each parking meter covers a certain range of parking spots, and no two meters should overlap in coverage. Given a list of parking ranges, Zara needs to determine the maximum revenue the city can earn by placing non-overlapping parking meters. **problem** There is a sequence of parking meters, each with a defined revenue value and a range of parking spots they cover. You need to find the optimal set of non-overlapping meters to maximize the total revenue. * Let there be M parking meters, each defined by start and end parking spots and a revenue value. **input format** The input is given in the following format: ``` M start_1 end_1 revenue_1 start_2 end_2 revenue_2 ... start_M end_M revenue_M ``` * The first row contains the number of parking meters (M). * Each of the following (M) rows contains three integers `start_i`, `end_i`, and `revenue_i`. **constraint** * (1 leq M leq 10,000) * (0 leq start_i < end_i leq 100,000) * (1 leq revenue_i leq 1,000) **output format** Output the maximum total revenue the city can earn by placing the non-overlapping parking meters in one row. **input example 1** ``` 4 1 3 10 2 5 5 4 7 8 6 9 12 ``` **output example 1** ``` 22 ``` **input example 2** ``` 3 1 4 5 2 6 9 5 8 3 ``` **output example 2** ``` 9 ``` **Explanation** In the first example, the optimal choice is to pick the meters (1, 3, 10) and (6, 9, 12) giving a total revenue of 22. In the second example, the optimal choice is to pick the meter (2, 6, 9) giving a total revenue of 9.","solution":"def max_revenue(meters): This function takes a list of tuples where each tuple has the following structure: (start, end, revenue) and returns the maximum total revenue the city can earn by placing the non-overlapping parking meters. # Sort meters by ending time meters.sort(key=lambda x: x[1]) # Initialize DP array dp = [0] * len(meters) dp[0] = meters[0][2] def find_last_non_conflict(index): for j in range(index - 1, -1, -1): if meters[j][1] <= meters[index][0]: return j return -1 for i in range(1, len(meters)): include = meters[i][2] l = find_last_non_conflict(i) if l != -1: include += dp[l] dp[i] = max(include, dp[i-1]) return dp[-1] # Function to parse input and call the max_revenue function def parse_input_and_solve(input_str): lines = input_str.strip().split(\'n\') M = int(lines[0]) meters = [] for i in range(1, M + 1): start, end, revenue = map(int, lines[i].split()) meters.append((start, end, revenue)) return max_revenue(meters)"},{"question":"You have been given an unsorted array of non-negative integers. Your task is to rearrange the array elements such that after rearrangement, the difference between the maximum and minimum elements in any subsequence of the array is minimized. Specifically, for an array A of length N, you need to determine the minimum possible value of: text{max}(B) - text{min}(B) where B is any subsequence of A containing at least two elements. Once you have identified the optimal rearrangement, return the minimized maximum difference for each test case. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N denoting the length of array A. - The second line contains N space-separated non-negative integers denoting the array A. ------ Output Format ------ For each test case, output the minimized maximum difference in any subsequence. ------ Constraints ------ 1 ≤ T ≤ 5000 2 ≤ N ≤ 10^{5} 0 ≤ A_{i} ≤ 10^{9} - The sum of N over all test cases won\'t exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 3 5 1 3 2 2 4 4 7 5 3 1 5 3 8 6 2 7 ----- Sample Output 1 ------ 1 2 1 ----- Explanation 1 ------ Test case 1: One optimal subsequence is [2, 2] which gives a minimized maximum difference of 0. However, since the size of the subsequence must be at least 2, we can take [2, 3] giving the minimized maximum difference of 1. Test case 2: One optimal subsequence is [5, 7] which gives a minimized maximum difference of 2. Test case 3: One optimal subsequence is [7, 8] which gives a minimized maximum difference of 1.","solution":"def min_max_diff(arr): This function returns the minimized maximum difference between the maximum and minimum elements in any subsequence of the array containing at least two elements. arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): diff = arr[i] - arr[i - 1] if diff < min_diff: min_diff = diff return min_diff def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] result = min_max_diff(arr) results.append(result) return results"},{"question":"Given an integer array nums, find a subarray that has the largest product and return the product. The subarray must have at least one element. -----Input----- A single line containing an integer array nums where 1 ≤ len(nums) ≤ 2 * 10^4 and -10 ≤ nums[i] ≤ 10. -----Output----- Print the largest product that can be obtained from a subarray of nums. -----Examples----- Input [2, 3, -2, 4] Output 6 Input [-2, 0, -1] Output 0 Input [6, -3, -10, 0, 2] Output 180 -----Note----- In the first example, the subarray [2, 3] has the largest product, which is 6. In the second example, the subarray [-2] has the largest product, which is 0. In the third example, the subarray [6, -3, -10] has the largest product, which is 180.","solution":"def max_product_subarray(nums): if not nums: return 0 # Initialize the variables to store the maximum and minimum product until the current position max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex v has an integer weight w_v associated with it. You start with an initial weight of 0 for all vertices. You need to handle textit{q} queries on this graph where each query is one of the following types: 1 u x: Increment the weight of vertex u by boldsymbol{x} and propagate the same increment to all vertices that are connected directly or indirectly to u. 2 u: Print the weight of vertex u. Input Format The first line contains three space-separated integers, n (the number of vertices in the graph), m (the number of edges in the graph), and textit{q} (the number of queries to perform). Each of the m subsequent lines contains two space-separated integers u and v (1 leq u, v leq n, u neq v) denoting an edge between the vertices u and v. Each of the textit{q} subsequent lines contains a query in one of the two formats described above. Constraints 2 leq n leq 10^5 1 leq m, q leq 10^5 1 leq x leq 10^9 It\'s guaranteed that the graph is connected. Output Format For each query of type 2 (i.e., 2 u), print the weight of vertex u on a new line. Sample Input 0 5 4 6 1 2 1 3 3 4 4 5 1 1 5 2 1 2 2 1 3 3 2 4 2 5 Sample Output 0 5 5 3 3 Explanation 0 After the first query 1 1 5, the weights of vertices 1, 2, 3, 4, and 5 all become 5 because they are all connected. The next two queries 2 1 and 2 2 return the weight 5. After the fourth query 1 3 3, the weights of vertices 1, 2, 3, 4, and 5 all increase by 3, making it 8. Thus, queries 2 4 and 2 5 both return 8.","solution":"def process_queries(n, m, q, edges, queries): from collections import defaultdict, deque # Create an adjacency list for representing the graph adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # Initialize weights for all vertices weights = [0] * (n + 1) # Function to perform BFS to propagate weight increment def bfs_increment(start, increment): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() weights[node] += increment for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Result for queries of type 2 result = [] for query in queries: parts = query.split() if parts[0] == \'1\': u = int(parts[1]) x = int(parts[2]) bfs_increment(u, x) elif parts[0] == \'2\': u = int(parts[1]) result.append(weights[u]) return result"},{"question":"**Problem Statement** You are given a network of computers connected through bidirectional communication cables. Each computer is labeled with a unique integer from 1 to n, and each cable connects two different computers. You are tasked to determine if the network is fully connected. A network is considered fully connected if there is a path between any pair of computers, possibly through other computers. Input The input consists of multiple datasets. The number of datasets is no more than 20. Each dataset is formatted as follows. > n m > a_1 b_1 > a_2 b_2 > : > : > a_m b_m The first line of each dataset contains two integers n and m (1 le n le 100, 0 le m le frac{n(n-1)}{2}), which denote the number of computers and the number of communication cables, respectively. The following m lines describe the cables. Each line contains two integers a_i and b_i (1 le a_i, b_i le n), which denote the computers connected by the i-th cable. The end of input is indicated by a line containing two zeros. Output For each dataset, output \\"YES\\" if the network is fully connected, and \\"NO\\" otherwise, in a line. Sample Input 3 3 1 2 2 3 1 3 4 2 1 2 3 4 5 4 1 2 2 3 3 4 4 5 0 0 Sample Output YES NO YES Explanation - In the first dataset, the network of 3 computers is fully connected because there is a path between every pair of computers. - In the second dataset, the network of 4 computers is not fully connected because there is no way to reach computers 3 and 4 from computers 1 and 2. - In the third dataset, the network of 5 computers is fully connected since each computer can be reached from any other computer.","solution":"def is_fully_connected(n, m, edges): from collections import defaultdict, deque if n == 1: return True # Build the graph graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) # Perform BFS to check if all nodes are reachable from node 1 visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # If the number of visited nodes is equal to n, then all nodes are connected return len(visited) == n def solve(input_data): result = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n, m = map(int, lines[i].split()) if n == 0 and m == 0: break i += 1 edges = [] for _ in range(m): a, b = map(int, lines[i].split()) edges.append((a, b)) i += 1 if is_fully_connected(n, m, edges): result.append(\\"YES\\") else: result.append(\\"NO\\") return \\"n\\".join(result)"},{"question":"A hacker is attempting to infiltrate a secured network which uses a layered series of passwords to grant access. Each password needs to match exactly in terms of characters and must be in sequence to gain access to the next layer. You need to devise a program to determine if the hacker\'s attempt can sequentially match all the passwords, allowing entry to the secure network. The hacker has a single string of characters, and a list of passwords they need to match. The goal is to determine if the character string can be segmented into each of the passwords in order while maintaining the sequence. -----Input----- First line contains an integer n (1 ≤ n ≤ 10^4) — the number of passwords. Second line contains n space-separated strings p_1, p_2, ..., p_{n} where p_{i} denotes a password (1 ≤ |p_{i}| ≤ 100). Third line contains a single string s (1 ≤ |s| ≤ 10^4) — the character string the hacker is attempting to use. -----Output----- Output \\"YES\\" if the string s can be segmented into the passwords in the given order, otherwise output \\"NO\\". -----Examples----- Input 3 hack code secure hackcodsecure Output YES Input 2 hack code haackcode Output NO -----Note----- In the first test case, the string \\"hackcodsecure\\" can be segmented to \\"hack\\" + \\"cod\\" + \\"secure\\" which matches the given passwords in order. In the second test case, the string \\"haackcode\\" cannot be segmented to \\"hack\\" + \\"code\\" due to an extra \'a\' in the beginning.","solution":"def can_segment_passwords(n, passwords, hacker_string): Determines if the hacker_string can be segmented into the given passwords in sequence. Args: n (int): Number of passwords. passwords (list of str): List of passwords. hacker_string (str): The character string the hacker is attempting to use. Returns: str: \\"YES\\" if the string can be segmented into the passwords in the given order, otherwise \\"NO\\". index = 0 for password in passwords: if hacker_string.startswith(password, index): index += len(password) else: return \\"NO\\" return \\"YES\\" if index == len(hacker_string) else \\"NO\\""},{"question":"In a magical land of celebration and fireworks, there exists a curious device called the \\"Fireworks Launcher\\". This device is capable of launching a series of fireworks in a specific pattern. The pattern is determined by an array of integers where each integer represents the height at which a firework will explode. The beauty of the firework show is determined by the contiguous subarray with the maximum sum of heights. Given an array of integers representing the heights, you are tasked with finding this maximum sum to ensure the best possible firework show. Example 1: Input: heights = [2, 1, -3, 4, -1, 2, 1, -5, 4] Output: 6 Explanation: The subarray with the maximum sum is [4, -1, 2, 1], which has a sum of 6. Example 2: Input: heights = [-2, -3, 4, -1, -2, 1, 5, -3] Output: 7 Explanation: The subarray with the maximum sum is [4, -1, -2, 1, 5], which has a sum of 7. Your Task: You don\'t need to read input or print anything. Complete the function max_firework_sum() which takes an array of integers heights as input parameter and returns the maximum sum of contiguous subarray. Constraints: 1 ≤ len(heights) ≤ 10^5 -10^4 ≤ heights[i] ≤ 10^4","solution":"def max_firework_sum(heights): Returns the maximum sum of a contiguous subarray. Uses Kadane\'s algorithm to find the maximal sum subarray. max_sum = heights[0] current_sum = heights[0] for height in heights[1:]: current_sum = max(height, current_sum + height) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a string path, where path[i] is either a directory name, \\"/\\", or \\"..\\" representing the current path in a Unix-like file system. - \\"/\\" indicates the current directory. - \\"..\\" indicates moving up to the parent directory. - \\"x\\" is a string representing a directory name. The root directory is represented by \\"/\\". A path is absolute if it starts with \\"/\\"; otherwise, it is relative to the current directory. Given a path, simplify it to the shortest possible path that starts from the root directory. Return the simplified absolute path. Example 1: Input: path = \\"/home/\\" Output: \\"/home\\" Explanation: Note that there is no trailing slash after the last directory name. Example 2: Input: path = \\"/../\\" Output: \\"/\\" Explanation: Going one level up from the root indication does nothing as you remain in the root directory. Example 3: Input: path = \\"/home//foo/\\" Output: \\"/home/foo\\" Explanation: In the simplified path, multiple slashes are replaced by a single slash. Example 4: Input: path = \\"/a/./b/../../c/\\" Output: \\"/c\\" Explanation: Moving from \\"a\\" to \\"b\\", then back twice to the root, then moving to \\"c\\". Constraints: - 1 <= path.length <= 3000 - path consists of English letters, digits, periods (.), slashes (/), and \'..\'","solution":"def simplify_path(path): Simplify a given Unix-style file path. Args: path (str): The given path to be simplified. Returns: str: The simplified absolute path. parts = path.split(\\"/\\") stack = [] for part in parts: if part == \\"..\\": if stack: stack.pop() elif part == \\".\\" or part == \\"\\": continue else: stack.append(part) return \\"/\\" + \\"/\\".join(stack)"},{"question":"Two players, Alice and Bob, are playing a game with an array consisting of n integers. They take turns picking any one of the remaining integers in the array. Alice always picks the maximum integer while Bob always picks the minimum integer from the remaining integers. Alice starts first. Once all integers are picked, the score of a player is the sum of the integers they picked. Determine the winner of the game, or if it ends in a tie. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the array. The second line contains n integers a_{1}, a_{2}, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the array. -----Output----- Output \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Tie\\" if the game ends in a tie. -----Examples----- Input 5 1 2 3 4 5 Output Alice Input 4 1 1 2 2 Output Tie Input 3 10 20 30 Output Alice","solution":"def determine_winner(n, array): Determines the winner of the game based on given rules. Args: n : int : number of elements in the array array : list of int : the integers in the array Returns: str : either \\"Alice\\", \\"Bob\\", or \\"Tie\\" array.sort(reverse=True) alice_score = sum(array[i] for i in range(0, n, 2)) bob_score = sum(array[i] for i in range(1, n, 2)) if alice_score > bob_score: return \\"Alice\\" elif bob_score > alice_score: return \\"Bob\\" else: return \\"Tie\\""},{"question":"**Problem Statement:** Alice and Bob are playing a game involving a sequence of numbers. Alice initiates the game by providing two sequences of non-negative integers, one for herself and one for Bob. Each player alternates turns by selecting a number from their respective sequences. Alice always goes first. The goal of the game is to select numbers such that the sum of the selected numbers is maximized while ensuring that the sum is even. Each player must select exactly one number in their turn, and once a number is chosen, it cannot be selected again. The game ends when both players have made a total of n moves, where n is the length of their respective sequences. Your task is to determine the maximum possible even sum that can be achieved by the end of the game. # Input The input consists of three lines: 1. The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequences. 2. The second line contains n non-negative integers a0, a1, ..., an-1 (0 ≤ ai ≤ 1000), the sequence of numbers for Alice. 3. The third line contains n non-negative integers b0, b1, ..., bn-1 (0 ≤ bi ≤ 1000), the sequence of numbers for Bob. # Output Output a single integer representing the maximum possible even sum that can be achieved by the end of the game. # Examples Input ``` 3 1 2 3 4 5 6 ``` Output ``` 20 ``` Input ``` 2 1 1 1 1 ``` Output ``` 4 ``` Input ``` 4 1 3 5 7 2 4 6 8 ``` Output ``` 36 ``` # Note In the first example, the optimal choice for Alice and Bob is to select 3, 2 from Alice\'s sequence and 5, 6, 4, 6 from Bob\'s sequence, resulting in a sum of 3 + 5 + 6 + 2 + 4 = 20, which is even. In the second example, all numbers are odd, so Alice and Bob can only choose combinations that result in the maximum even sum. Here they can select both 1s from both sequences leading to an even sum of 2. In the third example, the optimal scenario is for Alice and Bob to select the highest numbers in such a manner that the final sum remains even while maximizing the total score.","solution":"def max_even_sum(n, alice_seq, bob_seq): # Sort both sequences in descending order alice_seq.sort(reverse=True) bob_seq.sort(reverse=True) total_sum = 0 # Iterate over the sequences and add the highest valued elements to total_sum for i in range(n): total_sum += alice_seq[i] total_sum += bob_seq[i] # If total_sum is even, return it, else find the best way to make it even if total_sum % 2 == 0: return total_sum else: # If total_sum is odd, we need to make it even by removing the smallest odd element or adding the smallest even # Min odd element from each of the sequences min_odd_alice = float(\'inf\') min_odd_bob = float(\'inf\') for num in alice_seq: if num % 2 != 0 and num < min_odd_alice: min_odd_alice = num for num in bob_seq: if num % 2 != 0 and num < min_odd_bob: min_odd_bob = num min_odd = min(min_odd_alice, min_odd_bob) # Try to switch the smallest odd element with the smallest from the other sequence min_diff_even = float(\'inf\') for num in alice_seq: if num % 2 == 0: min_diff_even = min(min_diff_even, num) for num in bob_seq: if num % 2 == 0: min_diff_even = min(min_diff_even, num) if min_odd == float(\'inf\'): return total_sum - min_diff_even return total_sum - min_odd"},{"question":"In the technologically advanced city of Algoburg, there is a unique system of underground tunnels connecting the city\'s neighborhoods. The city comprises N neighborhoods connected by M bidirectional tunnels. Unfortunately, the tunnels require maintenance. Due to budget constraints, the city council wants to repair only a minimal set of tunnels such that: 1. All neighborhoods are reachable from any other neighborhood. 2. The total repair cost is minimized. However, the council has a quirky way of calculating the total cost. Instead of summing up the repair costs, they use the bitwise AND operation on the repair costs of the chosen tunnels. Additionally, for security reasons, some tunnels are reserved and must be included in the repair plan regardless. You need to determine the minimum possible total cost and the number of different ways to achieve this cost modulo 1,000,000,007. # Input The first line of input contains two integers N (1 ≤ N ≤ 100,000), the number of neighborhoods, and M (1 ≤ M ≤ 100,000), the number of tunnels. Each of the following M lines contains three integers U, V (1 ≤ U ≠ V ≤ N), and W (1 ≤ W ≤ 10^9) corresponding to a tunnel between neighborhoods U and V with a repair cost of W. A further line contains an integer Q (0 ≤ Q ≤ N), the number of reserved tunnels. Each of the following Q lines contains an integer T (1 ≤ T ≤ M), indicating that the T-th tunnel in the list of tunnels above must be included in the repair plan. # Output Output two integers: the minimum possible total repair cost using the bitwise AND operation and the number of different ways to achieve this cost modulo 1,000,000,007. # Example Input ``` 4 5 1 2 4 2 3 5 3 4 6 1 4 7 2 4 3 2 2 3 ``` Output ``` 0 1 ``` Explanation By including the reserved tunnels (2 and 3) and finding the minimal cost repair plan, the total bitwise AND of the repair costs can be minimized to 0. There is only 1 way to achieve this.","solution":"MOD = 1000000007 def find_min_cost(N, M, tunnels, Q, reserved): import heapq parent = list(range(N + 1)) rank = [0] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) # path compression return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 reserved_edges = [tunnels[idx - 1] for idx in reserved] for u, v, w in reserved_edges: union(u, v) min_cost = float(\'inf\') ways = 0 edges = [(w, u, v) for u, v, w in tunnels if (u, v, w) not in reserved_edges] heapq.heapify(edges) while edges: weight, u, v = heapq.heappop(edges) if find(u) != find(v): union(u, v) current_cost = 1 for r_u, r_v, r_w in reserved_edges: current_cost &= r_w current_cost &= weight if current_cost < min_cost: min_cost = current_cost ways = 1 elif current_cost == min_cost: ways = (ways + 1) % MOD return min_cost, ways def algoburg_tunnel(N, M, tunnels, Q, reserved_idxs): return find_min_cost(N, M, tunnels, Q, reserved_idxs)"},{"question":"Sarah loves organizing small parties for her friends. However, one of the things she finds challenging is arranging seats optimally such that everyone can chat with everyone else with minimal disruption. Sarah\'s parties are organized in such a way that friends sit around a circular table. Each friend has a preferred number of people they want to sit next to, and Sarah wants to rearrange the seating to accommodate as many preferences as possible. Given the number of friends Sarah invited and their seating preferences, determine the maximum number of friends that can be seated according to their seating preferences. Input - The first line contains an integer n (1 ≤ n ≤ 100) — the number of friends Sarah invited. - The second line contains n integers p1, p2, ..., pn (0 ≤ pi ≤ n-1), where pi represents the preferred number of people the i-th friend wants to sit next to. Output - Output a single integer representing the maximum number of friends satisfying their seating preferences. Example Input 5 1 2 2 1 3 Output 3 Note For the given input, an optimal seating arrangement would be such that three friends are seated according to their preferences. The actual seating arrangement might vary and does not have to be unique. The challenge is to find the maximum number of friends whose preferences can be accommodated, not the specific arrangement.","solution":"def max_satisfied_friends(n, preferences): Calculate the maximum number of friends that can be satisfied with their seating preferences. :param n: Number of friends :param preferences: List of integers representing the preferred number of people each friend wants to sit next to. :return: Maximum number of friends satisfied with their preferences. satisfied = 0 max_pref = min(n-1, max(preferences)) for pref in preferences: if pref <= max_pref: satisfied += 1 return satisfied"},{"question":"Design a function that determines if a given string is a valid parenthesis expression. A string is a valid parenthesis expression if it contains pairs of matching parentheses in the correct order. Each opening parenthesis must have a corresponding closing parenthesis and they must be correctly nested. For example, the strings `\\"(())\\"`, `\\"()()\\"`, and `\\"(()())\\"` are valid parenthesis expressions, while the strings `\\"(()\\"`, `\\")(\\"`, and `\\"((())\\"` are not. # Function Signature: ```python def is_valid_parenthesis(s: str) -> bool: pass ``` # Input: - A single string `s` containing only the characters `\'(\'` and `\')\'`. # Output: - A boolean value `True` if the given string is a valid parenthesis expression, `False` otherwise. # Constraints: - The length of the string is between 1 and 10,000 (inclusive). # Example 1: ```python s = \\"()\\" print(is_valid_parenthesis(s)) # Output: True ``` # Example 2: ```python s = \\"(()\\" print(is_valid_parenthesis(s)) # Output: False ``` # Example 3: ```python s = \\"(())()\\" print(is_valid_parenthesis(s)) # Output: True ``` # Notes: - You should implement this function using a stack data structure to keep track of the parentheses. - If you encounter an opening parenthesis, push it onto the stack. If you encounter a closing parenthesis, check if the stack is empty or if the top of the stack is not the matching opening parenthesis. If either of these conditions is true, the string is not valid. If it matches, pop the top of the stack. - At the end, if the stack is empty, the string is valid; otherwise, it is not.","solution":"def is_valid_parenthesis(s: str) -> bool: Determines if the given string is a valid parenthesis expression. Args: s (str): A string containing only the characters \'(\' and \')\'. Returns: bool: True if the string is a valid parenthesis expression, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"You are given an `n x n` grid representing a battlefield where \'L\' stands for land and \'W\' stands for water. The grid may contain several islands (connected components of land cells). An island is surrounded by water and is formed by connecting adjacent \'L\' cells horizontally or vertically. You need to determine the number of distinct islands. Two islands are considered distinct if and only if one island cannot be transformed into the other by translation, rotation, or reflection. Write a function `distinctIslands(grid)` that calculates the number of distinct islands in the given grid. # Example: __Input:__ ``` grid = [ [\\"L\\", \\"L\\", \\"W\\", \\"W\\", \\"L\\"], [\\"L\\", \\"L\\", \\"W\\", \\"W\\", \\"L\\"], [\\"W\\", \\"W\\", \\"L\\", \\"W\\", \\"L\\"], [\\"W\\", \\"W\\", \\"L\\", \\"L\\", \\"L\\"], [\\"L\\", \\"W\\", \\"W\\", \\"L\\", \\"L\\"] ] ``` __Output:__ ``` distinctIslands(grid) = 3 ``` In this example, the grid contains three distinct islands. The first two \'L\' groups in the top left are considered the same island because they are identical. The remaining groups of \'L\' cells form different and distinct islands. # Input Specifications: - `grid`: An `n x n` 2D array of size (1 ≤ n ≤ 50) containing characters \'L\' for land and \'W\' for water. # Output Specifications: - Return an integer representing the count of distinct islands.","solution":"def distinctIslands(grid): Determines the number of distinct islands in a given grid of land \'L\' and water \'W\'. if not grid or not grid[0]: return 0 def dfs(x, y, direction): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'W\': return grid[x][y] = \'W\' shape.append(direction) dfs(x + 1, y, \'D\') # Down dfs(x - 1, y, \'U\') # Up dfs(x, y + 1, \'R\') # Right dfs(x, y - 1, \'L\') # Left shape.append(\'B\') # Backtracking unique_shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'L\': shape = [] dfs(i, j, \'O\') # Origin unique_shapes.add(tuple(shape)) return len(unique_shapes)"},{"question":"John is an avid book collector and wants to organize his bookshelf. He arranges his books by their height in non-decreasing order. However, the latest shipment of books has disrupted this arrangement. The new books need to be inserted into his existing sorted collection one by one. Help John restore the non-decreasing order by inserting each new book into the correct position in the existing sorted list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of existing books in John\'s collection. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i denotes the height of the i-th book. The third line contains an integer m (1 ≤ m ≤ 10^5), the number of new books in the shipment. The fourth line contains m space-separated integers k_1, k_2, ..., k_m (1 ≤ k_i ≤ 10^9), where k_i denotes the height of the i-th new book. -----Output----- Output the updated list of heights, ensuring that the non-decreasing order is maintained after each insertion. -----Examples----- Input 5 3 5 7 9 11 3 4 6 8 Output 3 4 5 6 7 8 9 11 Input 3 2 5 8 4 1 3 6 10 Output 1 2 3 5 6 8 10","solution":"def insert_books(existing_books, new_books): Inserts new books\' heights into the existing sorted list of book heights while maintaining the non-decreasing order. Parameters: existing_books (list of int): A list of integers representing the heights of existing books. new_books (list of int): A list of integers representing the heights of new books. Returns: list of int: The updated list of book heights in non-decreasing order. import bisect for new_book in new_books: bisect.insort(existing_books, new_book) return existing_books"},{"question":"Our hero - Lara is exploring different ways to process strings in her latest coding adventure. She encounters a problem where she needs to perform a series of operations on a given string to transform it into another string. Specifically, she needs to convert the initial string into the target string by repeatedly performing the following operation: You can select any substring of the current string and reverse it. You need to help Lara determine the minimum number of operations required to transform the initial string into the target string. Input: You are given 2 strings of equal length, each on a new line. Output: Output 1 integer: the minimum number of operations required to transform the initial string into the target string. Constraints: 1 ≤ length of the strings ≤ 1000 The strings contain only lowercase English letters. SAMPLE INPUT abcd dcba SAMPLE OUTPUT 1 Explanation We can transform \\"abcd\\" to \\"dcba\\" by reversing the entire string once. Hence, the minimum number of operations required is 1.","solution":"def min_operations_to_transform(initial, target): Returns the minimum number of operations required to transform the initial string into the target string by repeatedly selecting any substring and reversing it. # Helper function to find the positions where characters differ def differing_positions(s1, s2): diffs = [] for i in range(len(s1)): if s1[i] != s2[i]: diffs.append(i) return diffs differing_positions_list = differing_positions(initial, target) if not differing_positions_list: return 0 # Strings are already equal, so 0 operations required left = differing_positions_list[0] right = differing_positions_list[-1] return 1 if initial[left:right+1][::-1] == target[left:right+1] else 2"},{"question":"Design a class MedianFinder which supports the following operations: 1. A constructor that initializes the MedianFinder object. 2. A function addNum(int num) that adds a number to the data structure. 3. A function findMedian() that returns the median of all elements so far. The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values. Example: MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // [1] medianFinder.addNum(2); // [1, 2] medianFinder.findMedian(); // returns 1.5 medianFinder.addNum(3); // [1, 2, 3] medianFinder.findMedian(); // returns 2 Constraints: - There will be at most 5 * 10^4 calls to addNum and findMedian. - -10^5 <= num <= 10^5","solution":"import heapq class MedianFinder: def __init__(self): # Initializes two heaps: # A max heap for the lower half and a min heap for the upper half self.max_heap = [] # These are negative values to simulate a max heap self.min_heap = [] def addNum(self, num: int): # Adding to max heap (as negative to simulate a max heap) heapq.heappush(self.max_heap, -num) # Balancing step: Ensures that every element in max_heap is <= every element in min_heap if self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0]): heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # If the heaps are uneven, balance them if len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) if len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self) -> float: if len(self.max_heap) == len(self.min_heap): return (-self.max_heap[0] + self.min_heap[0]) / 2.0 else: return -self.max_heap[0]"},{"question":"You are given a set of denominations for an infinite supply of coins and a target amount. Your task is to determine the fewest number of coins needed to make up the given amount. If the target amount cannot be reached using the given denominations, return -1. For example, if the denominations are [1, 2, 5] and the target amount is 11, you can use two 5 coins and one 1 coin, thus requiring a total of 3 coins. Example 1: Input: denominations = [1, 2, 5], amount = 11 Output: 3 Explanation: 11 can be made using two 5 coins and one 1 coin (5 + 5 + 1 = 11) Example 2: Input: denominations = [2], amount = 3 Output: -1 Explanation: It is not possible to make 3 using only 2\'s. Example 3: Input: denominations = [1, 3, 4, 5], amount = 7 Output: 2 Explanation: 7 can be made using one 4 coin and one 3 coin. Your Task: You don\'t need to read or print anything. Your task is to complete the function MinCoins(denominations, amount) which takes an array of integers representing the denominations and an integer representing the target amount. It should return the minimum number of coins needed to make the target amount, or -1 if it is not possible. Expected Time Complexity: O(n * amount) Expected Space Complexity: O(amount) Constraints: 1 <= denominations.length <= 100 1 <= amount <= 10000 1 <= denominations[i] <= 100","solution":"def min_coins(denominations, amount): Returns the minimum number of coins needed to make the given amount, or -1 if it is not possible. # Initialize the dp array where dp[i] will be storing # the minimum number of coins required for i value. dp = [float(\'inf\')] * (amount + 1) # Base case: The minimum number of coins needed to make 0 is 0. dp[0] = 0 # Compute the minimum coins required for all amounts from 1 to amount for coin in denominations: for x in range(coin, amount + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means we cannot make the amount with given denominations return -1 if dp[amount] == float(\'inf\') else dp[amount]"},{"question":"# Task Sarah is organizing a charity marathon and wants to determine the average speed of the participants. Each participant runs a different distance and completes it in a different time. To make the calculations easier, Sarah has recorded all distances in kilometers and all times in hours. Create a function that calculates and returns the average speed of the participants in kilometers per hour. # Input/Output - `[input]` integer array `distances` An array of integers where each element represents the distance (in kilometers) run by a participant. - `[input]` integer array `times` An array of integers where each element represents the time (in hours) taken by a participant. The length of this array is guaranteed to be the same as the distances array. `2 <= distances.length, times.length <= 30` `1 <= distances[i], times[i] <= 1000` - `[output]` an integer Return the average speed of the participants rounded down to the nearest integer.","solution":"import math def average_speed(distances, times): Calculate the average speed of participants given distances and times arrays. The speed for each participant is calculated as distance/time. The average speed is the mean of these individual speeds, rounded down to the nearest integer. Parameters: distances (list of int): Distances run by the participants in kilometers. times (list of int): Times taken by the participants in hours. Returns: int: The average speed of the participants rounded down to the nearest integer. total_speed = sum(d / t for d, t in zip(distances, times)) average_speed = total_speed / len(distances) return math.floor(average_speed)"},{"question":"A hiker is planning a journey across a mountain range. The journey consists of a series of ups and downs, and the hiker wants to know the total elevation gained throughout the hike. The hiker\'s path can be described by an array of integers, where each integer represents the height of the hiker at different points along the journey. Given an array of integers representing the heights, determine the total elevation gained over the entire hike. For example, if the heights of the hiker are given by an array [2, 3, 4, 3, 2, 1, 5, 6, 3], the total elevation gained is 3 (from 2 to 4) + 5 (from 1 to 6) = 8. Function Description Complete the function `totalElevationGain` in the editor below. The function should return an integer representing the total elevation gained. `totalElevationGain` has the following parameter(s): - heights: an array of integers representing the height of the hiker at different points Returns - int: the total elevation gained throughout the hike Input Format The input consists of: - An integer t, the number of test cases. - For each test case, an integer n, the number of height measurements followed by an array `heights` of length n`. Constraints - 1 leq t leq 100 - 1 leq n leq 10^5 - 1 leq heights[i] leq 10^9 Sample Input 0 2 9 2 3 4 3 2 1 5 6 3 5 1 2 1 2 1 Sample Output 0 8 2 Explanation 0 In the first test case, the hiker\'s path is: 2, 3, 4, 3, 2, 1, 5, 6, 3. - They gain elevation from 2 to 4, which is 4 - 2 = 2. - They lose elevation from 4 to 1, which does not count. - They gain elevation from 1 to 6, which is 6 - 1 = 5. Total elevation gain is 2 + 5 = 7. In the second test case, the hiker\'s path is: 1, 2, 1, 2, 1. - They gain elevation from 1 to 2, which is 2 - 1 = 1. - They lose elevation from 2 to 1, which does not count. - They gain elevation from 1 to 2, which is 2 - 1 = 1. Total elevation gain is 1 + 1 = 2.","solution":"def totalElevationGain(t, test_cases): Returns the total elevation gain for multiple test cases. Parameters: t (int): The number of test cases. test_cases (list of tuples): List containing tuples, each representing a test case. Each tuple contains an integer n and a list of n integers representing the heights. Returns: List of integers: Total elevation gain for each test case. results = [] for case in test_cases: n, heights = case total_gain = 0 for i in range(1, n): if heights[i] > heights[i - 1]: total_gain += heights[i] - heights[i - 1] results.append(total_gain) return results # Single function to handle all test cases instead of processing one at a time"},{"question":"There are N people standing in a line, each with a unique height. The heights of the people are given in centimeters. You are required to form a special subsequence of these people such that each person in the subsequence is strictly taller than the previous person, and the total number of people in the subsequence is maximized. Determine the maximum number of people that can form such a subsequence. Constraints * 1 leq N leq 200,000 * 1 leq height_i leq 1,000,000 * Each height_i is distinct and represents the height of the i-th person in the line. Input The input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print the maximum number of people that can form the longest increasing subsequence. Examples Input 5 10 22 9 33 21 Output 3 Input 6 5 8 7 1 2 3 Output 3 Input 4 1 2 3 4 Output 4","solution":"def max_people_in_increasing_subsequence(heights): import bisect if not heights: return 0 dp = [] for height in heights: pos = bisect.bisect_left(dp, height) if pos < len(dp): dp[pos] = height else: dp.append(height) return len(dp) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) print(max_people_in_increasing_subsequence(heights))"},{"question":"Ana loves solving string-related puzzles. She found a unique challenge and needs your help to solve it: You are given a string S consisting of lowercase English letters. Your task is to find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. Input The input consists of a single line containing the string S. The length of S is between 1 and 100,000. Output Output a single integer, the length of the longest substring of S that contains no repeating characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Explanation The first example: - The answer is \\"abc\\", with the length of 3. The second example: - The longest substring without repeating characters is \\"b\\", with the length of 1. The third example: - The answer is \\"wke\\", with the length of 3. Note that \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. if not s: return 0 n = len(s) char_map = {} left = 0 max_length = 0 for right in range(n): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You have been given an array consisting of n positive integers. You are required to find the maximum product of two distinct elements in the array. The two elements must come from two different positions in the array. -----Input----- The first line contains one integer n (2 le n le 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^6) — the elements of the array. -----Output----- Print one integer, the maximum product of two distinct elements in the array. -----Examples----- Input 4 1 2 3 4 Output 12 Input 5 10 20 10 5 30 Output 600 -----Note----- In the first sample, the maximum product is achieved by multiplying the two largest elements: 3 and 4, giving 12. In the second sample, the maximum product is achieved by multiplying the two largest distinct elements: 20 and 30, giving 600.","solution":"def max_product_of_two_distinct_elements(n, arr): # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # The highest product will be the product of the two largest numbers in the sorted array return sorted_arr[0] * sorted_arr[1]"},{"question":"In a world of competitive gaming, players often compete in various matches, where each match ends in either a win (\'W\'), loss (\'L\'), or draw (\'D\'). Players gain points based on the following rules: - A win (\'W\') grants the player 3 points. - A draw (\'D\') grants the player 1 point. - A loss (\'L\') grants the player 0 points. Given a string M consisting of several characters where each character represents the outcome of a single match, write a program that calculates and prints the total points a player has earned. -----Constraints----- - M is a string of length between 1 and 100. - Each character in M is either \'W\', \'L\', or \'D\'. -----Input----- Input is given from Standard Input in the following format: M -----Output----- Print the total points a player has earned based on the match outcomes provided in M. -----Sample Input----- WDLW -----Sample Output----- 7 The total score is calculated as follows: 3 (for the first win) + 1 (for the draw) + 0 (for the loss) + 3 (for the second win) = 7 points.","solution":"def calculate_total_points(M): Calculates the total points based on the match outcomes provided in M. Parameters: M (str): A string consisting of \'W\', \'L\', \'D\' characters. Returns: int: The total points based on the match outcomes. points_map = {\'W\': 3, \'D\': 1, \'L\': 0} total_points = 0 for match in M: total_points += points_map.get(match, 0) return total_points # Example usage M = \'WDLW\' print(calculate_total_points(M)) # Output should be 7"},{"question":"Given a positive integer `n` (1 <= n <= 10^18), find the count of all distinct divisors of the number. Your task is to efficiently compute the number of distinct divisors of `n` without using any in-built library functions for prime factorization or divisor counting. Examples ``` 6 => 4 10 => 4 15 => 4 1 => 1 ```","solution":"def count_distinct_divisors(n): Returns the count of distinct divisors of the number n. if n == 1: return 1 count = 0 i = 1 while i * i <= n: if n % i == 0: count += 1 if i != n // i: count += 1 i += 1 return count"},{"question":"Zara is new to programming and enjoys creating small, simple games. One of her favorite games involves numbers where she creates a sequence of numbers based on certain rules and guesses the next number in the sequence. Being a novice programmer, Zara often uses loops and basic arithmetic operations. She wants to write a program that constructs a specific sequence of numbers derived from the sum of the digits of a number, repeated until a single-digit number is obtained. The sequence starts with the initial number and ends when a single-digit number is produced. -----Task----- Write a program to simulate Zara\'s game. Given an initial number, repeatedly replace the number with the sum of its digits until a single-digit number is obtained, and output the sequence of numbers generated in this process. -----Input----- The input contains a single line with an integer N, 1 leq N leq 10; 000; 000. -----Output----- Output the sequence of numbers, each separated by a space, that are generated by repeatedly summing the digits of the number until a single-digit number is obtained. -----Examples----- Sample Input: 9875 Sample Output: 9875 29 11 2","solution":"def digit_sum_sequence(N): Returns the sequence of numbers generated by repeatedly summing the digits of N until a single-digit number is obtained. sequence = [] while N >= 10: sequence.append(N) N = sum(int(digit) for digit in str(N)) sequence.append(N) return sequence"},{"question":"A company uses a specialized binary encoding scheme for transmitting messages due to security concerns. Each binary string in the message needs to have an equal number of 0s and 1s, and no prefix of the string should have more 1s than 0s. A valid string that meets these criteria is referred to as a \\"balanced binary string.\\" Given an integer N, determine how many balanced binary strings of length 2N can be formed. The result can be a large number, so output it modulo 10^9+7. Constraints * 1 leq N leq 1000 Input Input is given from Standard Input in the following format: N Output Print the number of balanced binary strings of length 2N modulo 10^9+7. Examples Input 2 Output 2 Input 4 Output 14 Input 1 Output 1","solution":"def num_balanced_binary_strings(N): MOD = 10**9 + 7 # Function to compute binomial coefficient C(n, k) % MOD def binomial_coeff(n, k, MOD): if k > n: return 0 if k == 0 or k == n: return 1 C = [0] * (k + 1) C[0] = 1 # Top row of Pascal Triangle for i in range(1, n + 1): # Compute next row of Pascal triangle using the previous row # Populating in reverse order to not overwrite values needed j = min(i, k) while j > 0: C[j] = (C[j] + C[j - 1]) % MOD j -= 1 return C[k] # N-th Catalan number modulo MOD catalan_num = binomial_coeff(2 * N, N, MOD) * pow(N + 1, MOD - 2, MOD) % MOD return catalan_num"},{"question":"Given an array of unique integers, write a program that constructs and returns all possible subsets of the array (the power set). The solution should not include duplicate subsets. Each subset should be sorted in ascending order, and the power set should be returned with subsets sorted lexicographically (as if each subset were a word in a dictionary and sorted accordingly). # Example: **Input:** ``` nums = [1, 2, 3] ``` **Output:** ``` [ [], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3] ] ``` # Note: - The input array will contain only unique elements. - The elements in the array will be sorted in non-decreasing order (ascending order).","solution":"def subsets(nums): Given an array of unique integers, returns all possible subsets (the power set). Each subset will be sorted in ascending order, and the power set will be returned with subsets sorted lexicographically. def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() result = [] nums.sort() # Sort to ensure lexicographical order backtrack(0, []) return result"},{"question":"A company is organizing a competition where participants must string together different slats of wood to make a chain. Each slat of wood has a certain length and a corresponding weight. The company wants to find if a participant can create a chain of a specific total weight by using any combination of the slats of wood available. Write a program that determines whether it is possible to select a combination of slats that add up to exactly the required total weight. ------ Input Format ------ - The first line of the input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input: - The first line of each test case contains an integer N, the number of slats of wood. - The second line contains N space-separated integers, representing the weights of the slats of wood. - The third line contains a single integer W, the desired total weight of the chain. ------ Output Format ------ For each test case, output on a new line, YES if it is possible to achieve the total weight W using any combination of the slats, and NO otherwise. You can print each character in uppercase or lowercase. For instance, the strings YES, yes, Yes, and yES are considered identical. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ weights_i ≤ 1000 1 ≤ W ≤ 50000 ------ Sample Input 1 ------ 3 4 1 3 4 5 7 3 2 2 2 5 5 1 2 3 4 5 11 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: The participant can use slats with weights 3 and 4 to achieve a total weight of 7. Test case 2: There is no combination of slats that add up to a total weight of 5 (without repetition). Test case 3: The participant can use slats with weights 1, 2, 3, and 5 to achieve a total weight of 11.","solution":"def can_achieve_weight(n, weights, target_weight): dp = [False] * (target_weight + 1) dp[0] = True for weight in weights: for current_weight in range(target_weight, weight - 1, -1): if dp[current_weight - weight]: dp[current_weight] = True return dp[target_weight] def process_test_cases(test_cases): results = [] for n, weights, target_weight in test_cases: if can_achieve_weight(n, weights, target_weight): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"You are given a sequence of integers where each integer appears exactly twice, except for one integer which appears only once. Design a function that identifies the integer that appears only once. Your algorithm should have a linear runtime complexity and use constant extra space. # Example Input: [4, 1, 2, 1, 2] Output: 4 # Constraints 1. Each element appears twice except for one element which appears only once. 2. The array is non-empty. 3. The size of the array does not exceed 10^6. # Instructions 1. Implement the function `find_single_number(nums: List[int]) -> int`. 2. Optimize for both time and space complexity. 3. Avoid using extra data structures for storage.","solution":"from typing import List def find_single_number(nums: List[int]) -> int: Finds the single number that appears only once in a list where every other number appears exactly twice. Args: nums (List[int]): The input list of integers. Returns: int: The single number that appears only once. result = 0 for num in nums: result ^= num # XOR-ing all the elements will result in the single number return result"},{"question":"You are given a MxM matrix containing integers and N queries. Each query specifies a submatrix defined by its upper left (X1, Y1) and lower right (X2, Y2) corners. For each query, you are required to calculate the sum of all the elements within the specified submatrix. -----Input:----- - First line contains two integers M and N which denotes the dimensions of the matrix and the number of queries respectively. - M lines follow, each containing M integers representing the elements of the matrix. - N lines follow with each containing four integers X1, Y1, X2, Y2 denoting the coordinates of the submatrix for each query. -----Output:----- For each query, print a single integer which is the sum of the elements within the specified submatrix. -----Constraints----- - 1 ≤ M ≤ 500 - 1 ≤ N ≤ 10^4 - 1 ≤ X1 ≤ X2 ≤ M - 1 ≤ Y1 ≤ Y2 ≤ M - The elements of the matrix are integers which can be positive or negative. -----Sample Input:----- 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 1 2 2 2 2 4 4 -----Sample Output:----- 14 66 -----Explanation:----- Query-1: The submatrix defined by (1, 1) and (2, 2) is: 1 2 5 6 The sum of its elements is 1 + 2 + 5 + 6 = 14. Query-2: The submatrix defined by (2, 2) and (4, 4) is: 6 7 8 10 11 12 14 15 16 The sum of its elements is 6+7+8+10+11+12+14+15+16 = 99.","solution":"def submatrix_sum(matrix, queries): M = len(matrix) # Create a 2D prefix sum matrix prefix_sum = [[0] * (M + 1) for _ in range(M + 1)] # Compute the prefix sums for i in range(1, M + 1): for j in range(1, M + 1): prefix_sum[i][j] = matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] result = [] for x1, y1, x2, y2 in queries: # Adjust indices for 1-based to 0-based x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 # Calculate sum for the current query sub_sum = (prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x1][y2 + 1] - prefix_sum[x2 + 1][y1] + prefix_sum[x1][y1]) result.append(sub_sum) return result"},{"question":"=====Problem Statement===== In this challenge, you are tasked with writing a function that determines whether a given number is an Armstrong number or not. An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. Your task is to implement the function is_armstrong_number which takes an integer n as an argument and returns True if n is an Armstrong number, and False otherwise. =====Input Format===== The input is read by the provided locked code template. A single integer n will be provided. =====Constraints===== 1 ≤ n ≤ 10^5 =====Output Format===== The output is produced by the provided locked code template. It calls the function is_armstrong_number with the integer n read from the input and prints \'True\' if the number is an Armstrong number, otherwise it prints \'False\'. =====Example===== Input: 153 Output: True Explanation: 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153 =====Example===== Input: 123 Output: False Explanation: 123 is not an Armstrong number because 1^3 + 2^3 + 3^3 ≠ 123","solution":"def is_armstrong_number(n): Returns True if n is an Armstrong number, otherwise False. # Convert n to a string to easily iterate over digits num_str = str(n) # Calculate the number of digits num_digits = len(num_str) # Calculate the Armstrong sum armstrong_sum = sum(int(digit) ** num_digits for digit in num_str) return armstrong_sum == n"},{"question":"Consider a scenario where you are building a library management system. The system needs to keep track of books and their authors. Write a method that, given a list of books paired with their respective authors, and an author\'s name, returns a list of books by that author. For example, given the following input list of books and authors: ``` [ (\\"To Kill a Mockingbird\\", \\"Harper Lee\\"), (\\"1984\\", \\"George Orwell\\"), (\\"Animal Farm\\", \\"George Orwell\\"), (\\"Pride and Prejudice\\", \\"Jane Austen\\"), (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\") ] ``` and the author `George Orwell`, the method should return: ``` [\\"1984\\", \\"Animal Farm\\"] ``` For the author `Jane Austen`, the method should return: ``` [\\"Pride and Prejudice\\"] ``` If the author is not found in the list, the method should return an empty list. Here is the method signature in both C# and Python: ```cs List<string> GetBooksByAuthor(List<Tuple<string, string>> books, string author); ``` ```python def get_books_by_author(books, author): ```","solution":"def get_books_by_author(books, author): Returns a list of books by the given author. Parameters: books (list of tuples): A list of tuples where each tuple contains a book title and an author\'s name. author (str): The name of the author. Returns: list: A list of book titles by the specified author. return [book for book, auth in books if auth == author]"},{"question":"Given a string as input, can you find the length of the longest substring without repeating characters? Examples: input: output: \\"\\" -> 0 \\"abcabcbb\\" -> 3 \\"bbbbb\\" -> 1 \\"pwwkew\\" -> 3 \\"au\\" -> 2 \\"dvdf\\" -> 3 etc. Input may be any non-empty string. You can assume that all inputs are valid strings containing only ASCII characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} start = 0 max_length = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"**Inventory Manager** Description --- A small retail store uses a computerized inventory system to manage its stock of products. Each product in the store is identified by a unique product code, and the quantity of each product in stock is updated frequently as items are sold or restocked. Your task is to implement a function **update_inventory(current_inventory, changes)**, which will take two arguments: 1. A dictionary `current_inventory` where the keys are product codes (strings) and the values are the quantities in stock (integers). 2. A list of dictionaries `changes` where each dictionary represents a change in the inventory with two keys: - `\'product_code\'`: a string representing the product code. - `\'quantity_change\'`: an integer representing the amount of the change (positive for restocking and negative for sales). The function should update `current_inventory` based on the changes and return the updated inventory as a dictionary. Assumptions: - All product codes in `changes` will exist in `current_inventory`. - The quantities in `current_inventory` will always be non-negative integers. Examples: ```python current_inventory = { \'A123\': 10, \'B456\': 5, \'C789\': 0 } changes = [ {\'product_code\': \'A123\', \'quantity_change\': -2}, {\'product_code\': \'B456\', \'quantity_change\': 3}, {\'product_code\': \'C789\', \'quantity_change\': 5} ] update_inventory(current_inventory, changes) # returns: # { # \'A123\': 8, # \'B456\': 8, # \'C789\': 5 # } ``` Notes: - The function should modify the `current_inventory` in-place and also return it. - Ensure that the inventory quantities do not drop below zero.","solution":"def update_inventory(current_inventory, changes): Updates the current_inventory based on the changes provided. Args: - current_inventory (dict): A dictionary where keys are product codes and values are quantities in stock. - changes (list): A list of dictionaries. Each dictionary has \'product_code\' and \'quantity_change\' keys. Returns: - dict: The updated inventory. for change in changes: product_code = change[\'product_code\'] quantity_change = change[\'quantity_change\'] if product_code in current_inventory: new_quantity = current_inventory[product_code] + quantity_change current_inventory[product_code] = max(new_quantity, 0) return current_inventory"},{"question":"You are given a bracket sequence s consisting of n characters, where each character is either an opening bracket \'(\' or a closing bracket \')\'. A bracket sequence is valid if all opening brackets can be matched with closing brackets in the correct order. Your task is to determine the minimum number of bracket reversals required to make the given bracket sequence valid. Note that you can only reverse the direction of any opening or closing bracket to its opposite type (i.e., you can change \'(\' to \')\' or \')\' to \'(\'). -----Input----- The only line contains an integer n (1 le n le 2 times 10^5) and a string s of length n consisting of characters \'(\' and \')\'. -----Output----- Print a single integer, the minimum number of bracket reversals required to make the sequence valid. If it is impossible to make the sequence valid by only reversing the brackets, print -1. -----Examples----- Input 4 ())( Output 2 Input 6 ((()) Output 1 Input 5 ())(( Output -1 Input 10 ()()()()() Output 0 -----Note----- For the first sample input, we can reverse the first and second brackets to get a valid sequence \\"(())\\". Thus, the minimum number of reversals is 2. For the second sample input, we can reverse the last bracket to get a valid sequence \\"((()))\\". Thus, the minimum number of reversals is 1. For the third sample input, it is not possible to make the sequence valid only by reversing brackets, so the output is -1. For the fourth sample input, the sequence is already valid, so no reversals are needed.","solution":"def minimum_bracket_reversals(n, s): if n % 2 != 0: return -1 open_count = 0 close_count = 0 for ch in s: if ch == \'(\': open_count += 1 else: if open_count > 0: open_count -= 1 else: close_count += 1 return (open_count + 1) // 2 + (close_count + 1) // 2"},{"question":"You are given two strings s and t consisting of lowercase English letters. You want to perform the following operation until both strings become empty: - Choose one common character between the two strings. Let\'s say the chosen character is \'c\'. - Remove one occurrence of \'c\' from both strings. Your task is to determine the length of the two strings s and t after performing the above operations as many times as possible. Input The first line contains the string s (1 ≤ |s| ≤ 200,000). The second line contains the string t (1 ≤ |t| ≤ 200,000). Output Print two integers separated by a space, the length of the final strings s and t after the operations. Example Input abc bca Output 1 1 Note In the example, after the first operation we can choose \'a\' and remove it from both strings. The strings become \\"bc\\" and \\"bc\\". Next, we can choose \'b\' and remove it from both strings. Finally, we can choose \'c\' and remove it from both strings. The final lengths of the strings are 0 0. If the input strings were \\"abc\\" and \\"d\\", there would be no common characters to remove, so both strings remain unchanged and the output would be \\"3 1\\".","solution":"def final_string_lengths(s, t): Determine the length of the final strings s and t after removing common characters. Parameters: s (str): The first string. t (str): The second string. Returns: (tuple): The lengths of the strings s and t after the operations. from collections import Counter # Count the frequency of each character in both strings s_count = Counter(s) t_count = Counter(t) # Calculate the minimum frequency of each common character in both strings common_chars = set(s_count.keys()) & set(t_count.keys()) for char in common_chars: min_occurrences = min(s_count[char], t_count[char]) s_count[char] -= min_occurrences t_count[char] -= min_occurrences # Sum the remaining frequencies to get the final lengths final_s_length = sum(s_count.values()) final_t_length = sum(t_count.values()) return (final_s_length, final_t_length)"},{"question":"You are given a map of a rectangular field represented by a grid of size n × m. A drone is programmed to inspect this field. The drone starts at the top-left corner of the grid (0, 0) and needs to travel to the bottom-right corner of the grid (n-1, m-1). The drone can move in four possible directions: - Right (R) - Left (L) - Up (U) - Down (D) However, the drone must avoid obstacles in the field. An obstacle is represented by a cell with a value of 1 in the grid, while an open cell is represented by a 0. The drone can only travel through open cells. The goal is to determine the minimum number of moves the drone needs to reach the bottom-right corner from the top-left corner. If it is not possible for the drone to reach the destination, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Then n lines follow, each containing m integers (either 0 or 1) — the grid representing the field\'s layout. The cell (0, 0) and the cell (n-1, m-1) are guaranteed to be open (i.e., their values are 0). Output Output an integer representing the minimum number of moves required for the drone to reach the cell (n-1, m-1) from the cell (0, 0). If there is no valid path, output -1. Example Input 5 5 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 0 1 0 1 0 0 0 0 1 0 Output 8 Input 3 3 0 1 0 0 1 0 0 0 0 Output 4","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): # Directions arrays for right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize visited matrix visited = [[False for _ in range(m)] for _ in range(n)] # Queue for BFS: stores (row, col, steps) queue = deque([(0, 0, 0)]) visited[0][0] = True while queue: r, c, steps = queue.popleft() # Check if we\'ve reached the bottom-right corner if r == n-1 and c == m-1: return steps # Explore the neighbors for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == 0: queue.append((nr, nc, steps + 1)) visited[nr][nc] = True # If no path was found return -1"},{"question":"Leah is managing the reservations at a popular restaurant. The restaurant has a single table that can accommodate up to m guests. Leah must ensure that the total number of guests at the table does not exceed its capacity at any given time. There are n reservations, each reservation is represented by a tuple (si, ei, gi), where si is the start time of the reservation in minutes from the beginning of the day (0 ≤ si < 1440), ei is the end time of the reservation in minutes from the beginning of the day (si < ei ≤ 1440), and gi is the number of guests for the reservation (1 ≤ gi ≤ m). Leah wants to know if it is possible to accommodate all the reservations without exceeding the capacity of the table at any point in time. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of reservations and the capacity of the table respectively. The next n lines each contain three integers si, ei, and gi — the start and end times of the reservation and the number of guests for that reservation. Output Print \\"Yes\\" if it is possible to accommodate all the reservations without exceeding the capacity of the table at any point in time. Otherwise, print \\"No\\". Examples Input 3 10 0 60 4 30 90 5 70 120 3 Output Yes Input 3 5 0 60 4 30 90 5 70 120 3 Output No Note In the first example, the maximum number of guests at any time is 9, which does not exceed the capacity of 10. In the second example, at t = 30, the number of guests at the table is 9, which exceeds the capacity of 5. Competitions by the given rules are held annually on the site http://b23.ru/3wvc","solution":"def can_accommodate_reservations(n, m, reservations): Determines if the restaurant can accommodate all reservations without exceeding capacity. :param n: int, number of reservations :param m: int, table capacity :param reservations: list of tuples, each tuple contains (si, ei, gi) :return: str, \\"Yes\\" if possible to accommodate, \\"No\\" otherwise # Create an array to track changes in the number of guests at each minute timeline = [0] * 1441 for si, ei, gi in reservations: timeline[si] += gi timeline[ei] -= gi current_guests = 0 for minute in timeline: current_guests += minute if current_guests > m: return \\"No\\" return \\"Yes\\""},{"question":"A new online game involves a rectangular grid consisting of N rows and M columns. Each cell of the grid is initially empty, marked with a \'.\' character. Players can place \'X\' characters on the grid to occupy cells. An occupied cell must be adjacent to at least one other occupied cell (either horizontally or vertically). You are required to determine if it is possible to place exactly K \'X\' characters on the grid such that all the occupied cells are adjacent and connected in a single contiguous block. Write a function `can_place_X(N, M, K)` that returns \\"YES\\" if it is possible to place the \'X\' characters according to the rules, and \\"NO\\" otherwise. # Constraints - 1 ≤ N, M ≤ 100 - 1 ≤ K ≤ N * M # Input The function takes three integers as arguments: 1. N: The number of rows in the grid. 2. M: The number of columns in the grid. 3. K: The number of \'X\' characters to place. # Output Return a string \\"YES\\" if it is possible to place exactly K \'X\' characters in a single contiguous block, otherwise return \\"NO\\". # Examples Example 1 Input: ``` can_place_X(3, 3, 1) ``` Output: ``` YES ``` Example 2 Input: ``` can_place_X(3, 3, 5) ``` Output: ``` YES ``` Example 3 Input: ``` can_place_X(3, 3, 9) ``` Output: ``` YES ``` Example 4 Input: ``` can_place_X(3, 3, 10) ``` Output: ``` NO ``` # Explanation 1. In the first example, placing a single \'X\' anywhere on the grid satisfies the conditions. 2. In the second example, one possible placement is: ``` X X X X X . . . . ``` 3. In the third example, filling the entire grid satisfies the conditions. 4. In the fourth example, placing more \'X\' characters than cells in the grid is impossible.","solution":"def can_place_X(N, M, K): if K > N * M: return \\"NO\\" if K == 1: return \\"YES\\" for rows in range(1, N+1): if K % rows == 0: cols = K // rows if cols <= M: return \\"YES\\" if K % rows != 0: cols = K // rows + 1 if cols <= M: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers of length n a_1, a_2, ldots, a_n. Define a subarray sum as the sum of all elements in a contiguous subarray of a. For example, if a = [1, 2, 3, 4], then the possible subarray sums include: 1, 2, 3, 4, 1+2=3, 2+3=5, 3+4=7, 1+2+3=6, 2+3+4=9, and 1+2+3+4=10. For each query (l_i, r_i, k_i), where 1 le l_i le r_i le n and k_i is an integer, you need to find a subarray within the range a[l_i, l_i+1, ldots, r_i] whose sum is closest to k_i. If there are multiple subarrays whose sum is equally closest to k_i, choose the subarray that appears first (the one with the smallest starting index). If there is still a tie, choose the shorter subarray. -----Input----- The first line contains a single integer n (1 le n le 10^5) - the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4). The third line contains a single integer q (1 le q le 10^5) - the number of queries. Each of the next q lines contains three integers l_i, r_i, k_i (1 le l_i le r_i le n, -10^9 le k_i le 10^9) - the i-th query. -----Output----- For each query, output a single integer denoting the sum of the subarray that is closest to k_i. -----Examples----- Input 4 1 2 3 4 3 1 4 6 2 3 5 1 2 1 Output 6 5 1 Input 5 -2 5 -1 4 3 2 1 3 0 2 5 7 Output -1 7 -----Note----- In the first example, the subarray sums within the range for each query are: Query 1: [1, 2, 3, 4], subarray sums overall from l_1=1 to r_1=4: 1, 2, 3, 4, 3, 5, 7, 6, 9, 10. The closest to k_1=6 is 6. Query 2: [2, 3], subarray sums overall from l_2=2 to r_2=3: 2, 3, 5. The closest to k_2=5 is 5. Query 3: [1, 2], subarray sums overall from l_3=1 to r_3=2: 1, 2, 3, with 1 being closest to k_3=1. In the second example: Query 1: [-2, 5, -1], subarray sums overall from l_1=1 to r_1=3: -2, 5, -1, 3, 4, 2, with -1 being closest to k_1=0. Query 2: [5, -1, 4, 3], subarray sums overall from l_2=2 to r_2=5: 5, -1, 4, 3, 4, 8, 7, 6, 1, 11. The closest to k_2=7 is 7.","solution":"def find_closest_subarray_sum(n, arr, queries): result = [] for l, r, k in queries: closest_sum = float(\'inf\') min_diff = float(\'inf\') for start in range(l-1, r): curr_sum = 0 for end in range(start, r): curr_sum += arr[end] diff = abs(curr_sum - k) if (diff < min_diff) or (diff == min_diff and start < l-1): min_diff = diff closest_sum = curr_sum result.append(closest_sum) return result"},{"question":"Given a string consisting of lowercase English letters, determine if it can be permuted to form a palindrome. A string is said to be a palindrome if it reads the same backward as forward. For example, `\\"madam\\"` and `\\"racecar\\"` are palindromes, while `\\"hello\\"` is not. Write a function `can_form_palindrome(s: str) -> bool` that takes a string `s` as input and returns `True` if any permutation of the string can form a palindrome, and `False` otherwise. -----Input----- - A single string `s` where the length of `s` is between 1 and 10^5, and all are lowercase English letters. -----Output----- - Return `True` if the string can be permuted to form a palindrome, otherwise return `False`. -----Examples----- Input carrace Output True Input daily Output False -----Explanation----- In the first example, the string \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. In the second example, there is no permutation of the string \\"daily\\" that will result in a palindrome.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Returns True if the string s can be permuted to form a palindrome, else False. char_count = Counter(s) # A string can form a palindrome if at most one character has an odd count. odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Ali\'s Tickets Sale ============= Ali is selling tickets to a popular event. Each ticket costs 25, and people line up to buy the tickets in order. Ali only has initial cash of 0. Each person in line has a 25, 50, or 100 bill. Ali wants to ensure that he can provide exact change (if necessary) when selling a ticket to each person in the line. Write a function that accepts an array representing the bills each person has when they come up to buy a ticket and returns `True` if Ali can provide change to every single person; otherwise, it returns `False`. Example: ```python tickets = [25, 25, 50] can_provide_change(tickets) == True; # Ali can sell tickets and provide change as needed tickets = [25, 100] can_provide_change(tickets) == False; # Ali can\'t provide change for the 100 bill tickets = [25, 50, 25, 100] can_provide_change(tickets) == True; # Ali can provide change for everyone ``` Consider edge cases where providing change might be difficult or impossible. The input array should not be modified.","solution":"def can_provide_change(bills): Determine if Ali can provide change for every customer in the line. Parameters: bills (list): List of integers where each element is either 25, 50, or 100 representing the bills customers are paying with. Returns: bool: True if Ali can provide change for every customer, False otherwise. cash_25 = 0 cash_50 = 0 for bill in bills: if bill == 25: cash_25 += 1 elif bill == 50: if cash_25 == 0: return False cash_25 -= 1 cash_50 += 1 elif bill == 100: if cash_50 > 0 and cash_25 > 0: cash_50 -= 1 cash_25 -= 1 elif cash_25 >= 3: cash_25 -= 3 else: return False else: return False # Invalid bill detected return True"},{"question":"You are given an array of integers representing the heights of buildings and a ball that can be thrown from one building to another. The ball must be thrown in such a way that it always travels to a building of greater height. The goal is to determine the maximum number of buildings the ball can be thrown to. Given an array of integers heights, where heights[i] represents the height of the i-th building, write a function that returns the maximum number of buildings the ball can be thrown to. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the buildings. Output Print a single integer, the maximum number of buildings the ball can be thrown to. Examples Input 6 1 2 3 4 5 6 Output 5 Input 6 6 5 4 3 2 1 Output 0 Input 8 2 3 4 1 5 6 1 7 Output 5 Note In the first sample, the ball can be thrown to all subsequent buildings, traveling the path: 1 -> 2 -> 3 -> 4 -> 5 -> 6. In the second sample, since all buildings are shorter than or of the same height as the previous one, the ball cannot be thrown to any subsequent building. In the third sample, the longest path is 2 -> 3 -> 4 -> 5 -> 6 -> 7.","solution":"def max_buildings_reachable(heights): Function to return the maximum number of buildings the ball can be thrown to. n = len(heights) if n == 0: return 0 # This will store the length of the longest increasing subsequence found so far. dp = [1] * n for i in range(1, n): for j in range(0, i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) # The maximum number of buildings reached from the initial one would be # length of the longest subsequence minus 1 (starting building itself is not included) return max(dp) - 1"},{"question":"You are given a rectangular grid of cells with dimensions N x M, where each cell can either contain a wall \'#\' or be empty \'.\'. You are currently located at the top-left corner of the grid and wish to reach the bottom-right corner. You can move to an adjacent cell in the grid if and only if it is empty. Write a program to determine the minimum number of steps required to reach the bottom-right corner of the grid from the top-left corner. If it is not possible to reach the bottom-right corner, output -1. Input The input consists of multiple test cases. Each test case starts with two integers N and M (1 ≤ N, M ≤ 100) representing the number of rows and columns in the grid, respectively. Each of the next N lines contains M characters, each either \'#\' or \'.\'. The end of the input is indicated by a single line containing two zeros. Output For each test case, print the minimum number of steps required to reach the bottom-right corner. If it is not possible, print -1. Example Input 4 4 .... .. ..#. .... 4 4 .... .... .... 0 0 Output 6 -1","solution":"from collections import deque def min_steps_to_reach_end(grid, N, M): if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False for _ in range(M)] for _ in range(N)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == N-1 and y == M-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def solve_problem(inputs): index = 0 results = [] while index < len(inputs): N, M = map(int, inputs[index].split()) if N == 0 and M == 0: break grid = [inputs[index + 1 + i] for i in range(N)] result = min_steps_to_reach_end(grid, N, M) results.append(result) index += N + 1 return results"},{"question":"Alice is given a string S of length N consisting of only lowercase English letters. She wants to determine the minimum number of operations needed to make all characters in the string distinct. In one operation, Alice can change any character in the string to any other lowercase English letter. For example, if S=text{\\"aabc\\"}, Alice can change one of the \'a\'s to any other character to get a string with all distinct characters. Help Alice by providing a program that determines the minimum number of operations needed for various strings. Input Format The first line contains a single integer, mathbf{T} (the number of test cases). Each test case is described by a single string S of length N, where 1 leq N leq 1000. Constraints 1leq Tleq10^3 All characters in S are lowercase English letters. Output Format For each test case, print the minimum number of operations needed on a new line. Sample Input 3 aabc abcdefg aabbcc Sample Output 1 0 3 Explanation Test Case 0: String is \\"aabc\\". One \'a\' can be changed to another character (e.g., \'d\') to make the string \\"abdc\\". Test Case 1: String is \\"abcdefg\\". All characters are already distinct, so no operations are needed. Test Case 2: String is \\"aabbcc\\". Change the first \'a\', the second \'b\', and the second \'c\' to get a string with all distinct characters. For example, \\"aabbcc\\" can be converted to \\"abcdef\\" in three operations.","solution":"def min_operations_to_make_distinct(S): Returns the minimum number of operations needed to make all characters in the string S distinct. # Count frequency of each character char_count = {} for char in S: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Calculate the number of operations needed operations = 0 for count in char_count.values(): if count > 1: operations += count - 1 return operations def process_test_cases(test_cases): Processes multiple test cases and returns the results for each. results = [] for S in test_cases: results.append(min_operations_to_make_distinct(S)) return results"},{"question":"You are given a 2-dimensional grid of size n times m initialized with all zeros. You need to perform q operations. In each operation, you are given four integers x_1, y_1, x_2, y_2 (1 le x_1 le x_2 le n, 1 le y_1 le y_2 le m, and 1 le n, m le 100). For each operation, you must increment all elements of the subgrid defined by the corners (x_1, y_1) and (x_2, y_2) by 1. After all operations are performed, you should output the final grid. -----Input----- The first line contains three integers n, m, and q (1 le n, m le 100, 1 le q le 100) — the dimensions of the grid and the number of operations, respectively. The next q lines each contain four integers x_1, y_1, x_2, and y_2 (1 le x_1 le x_2 le n, 1 le y_1 le y_2 le m) — defining the subgrid for each operation. -----Output----- Output n lines. Each line contains m integers representing the final grid. -----Examples----- Input 3 3 3 1 1 2 2 2 2 3 3 1 1 3 3 Output 2 2 1 2 3 2 1 2 2 Input 2 2 2 1 1 2 2 1 1 1 1 Output 2 1 1 1","solution":"def increment_subgrid(n, m, q, operations): grid = [[0] * m for _ in range(n)] for op in operations: x1, y1, x2, y2 = op for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 return grid"},{"question":"After successfully passing the Hunter Exam, Gon wants to continue honing his skills. One challenge that catches his attention is a pattern recognition problem presented by a fellow friend, Killua. Killua presents Gon with a 2D grid of dimensions `n x m` filled with either \'H\' (Hunter) or \'T\' (Training ground). The goal is to identify the largest rectangle (sub-grid) that contains only \'H\'s and to return its area. Each cell in the grid represents a specific state — either a Hunter location or a Training ground. The largest rectangle must be entirely composed of contiguous \'H\' cells. Gon needs your help in writing a program to find the area of the largest rectangle of \'H\'s within the given grid. -----Input----- The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 2000) — the dimensions of the grid. Each of the next `n` lines contains a string of `m` characters, where each character is either \'H\' or \'T\'. -----Output----- Print a single integer — the area of the largest rectangle consisting entirely of \'H\'s. -----Examples----- Sample Input 1: 4 5 TTTTT THHHH THHTT THHHH Sample Output 1: 6 Sample Input 2: 3 3 HHH HTH HHH Sample Output 2: 3 Note: In the first sample, the largest rectangle containing only \'H\'s has an area of 6. In the second sample, although there are multiple rectangles of \'H\'s, the largest one has an area of 3.","solution":"def calculate_max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_of_H(grid): if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) hist = [0] * m max_rectangle_area = 0 for i in range(n): for j in range(m): hist[j] = hist[j] + 1 if grid[i][j] == \'H\' else 0 max_rectangle_area = max(max_rectangle_area, calculate_max_histogram_area(hist)) return max_rectangle_area"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the strings that are palindromes, and the values are the number of times each palindrome appears in the input list. A palindrome is a word that reads the same backward as forward. ```python palindrome_count([\'racecar\', \'hello\', \'level\', \'world\', \'racecar\', \'level\', \'python\']) >>> {\'racecar\': 2, \'level\': 2} palindrome_count([\'madam\', \'refer\', \'test\', \'palindrome\', \'madam\', \'deified\']) >>> {\'madam\': 2, \'refer\': 1, \'deified\': 1} palindrome_count([\'noon\', \'noon\', \'noon\', \'wow\', \'civic\', \'rotor\']) >>> {\'noon\': 3, \'wow\': 1, \'civic\': 1, \'rotor\': 1} ```","solution":"def palindrome_count(words): Returns a dictionary where the keys are palindromes from the input list, and the values are the number of times each palindrome appears. palindrome_dict = {} for word in words: if word == word[::-1]: if word in palindrome_dict: palindrome_dict[word] += 1 else: palindrome_dict[word] = 1 return palindrome_dict"},{"question":"*** Is It a Palindrome? *** Write a function that determines if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Function signature: `def is_palindrome(s: str) -> bool` # Input - `s` is a string that consists of printable ASCII characters. # Output - Return `True` if the input string is a palindrome, otherwise return `False`. # Examples - `is_palindrome(\\"A man, a plan, a canal, Panama\\")` should return `True` - `is_palindrome(\\"racecar\\")` should return `True` - `is_palindrome(\\"hello\\")` should return `False` - `is_palindrome(\\"Able was I, ere I saw Elba\\")` should return `True` # Constraints - The input string can be empty, in which case it should return `True`. - You should ignore spaces, punctuation, and case while checking for the palindrome property. **Note:** You are not allowed to use loops (for, while) to solve this problem. Try using recursion, slicing or any higher-order functions available in your programming language of choice.","solution":"import re def is_palindrome(s: str) -> bool: Determines if a string is a palindrome, ignoring spaces, punctuation, and case. cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned == cleaned[::-1]"},{"question":"Ruslan loves to explore rectangular grids and find patterns. One of his latest interests is finding the largest square subgrid where all the values are the same. He decided to ask you for help in writing a program that can determine the largest such square subgrid within a given grid of integers. The grid is defined as a two-dimensional array of integers. Your task is to determine the side length of the largest square subgrid where all the elements are identical. **Input:** The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines contain m integers each, representing the values in the grid. Each value in the grid is a non-negative integer not exceeding 100. **Output:** Output a single integer, the side length of the largest square subgrid where all values are identical. **Example:** **Input:** ``` 5 6 1 1 1 2 2 2 1 1 1 2 2 2 1 1 1 2 2 2 3 3 3 4 4 4 3 3 3 4 4 4 ``` **Output:** ``` 3 ``` **Explanation:** In this example, the largest identical square subgrid has a side length of 3 and is composed of the value `1`. The square subgrid either starts at (1,1) with corners (1,1), (1,3), (3,1), and (3,3) or at (1,4) with corners (1,4), (1,6), (3,4), and (3,6). Note: If there are multiple such subgrids with the same maximum side length, any one of them is acceptable as the output.","solution":"def largest_identical_square_subgrid(n, m, grid): # Function to find the largest identical square subgrid max_side = 0 # Use dynamic programming to keep track of the size of the square ending at each point dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): # A single cell is a square of size 1 if i == 0 or j == 0: dp[i][j] = 1 else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 # Update the maximum side length found max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Task: You have to write a function **rotate_matrix** that rotates an NxN matrix 90 degrees clockwise. # Rules/Notes: * The function should modify the matrix in place. * The function should handle matrices where `1 <= N <= 100`. * The function should retain the original values and only then rearrange them to the new positions. # Example: rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) Output should be: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] rotate_matrix([ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ]) Output should be: [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] rotate_matrix([ [1] ]) Output should be: [ [1] ]","solution":"def rotate_matrix(matrix): Rotates an NxN matrix 90 degrees clockwise in place. N = len(matrix) for layer in range(N // 2): first = layer last = N - 1 - layer for i in range(first, last): offset = i - first # Save top top = matrix[first][i] # Left to top matrix[first][i] = matrix[last - offset][first] # Bottom to left matrix[last - offset][first] = matrix[last][last - offset] # Right to bottom matrix[last][last - offset] = matrix[i][last] # top into right matrix[i][last] = top return matrix"},{"question":"Digital libraries often have a feature to recommend books to users based on their reading history. You have been given the task of developing a simple recommendation system. You are given two lists: `books_read_by_user` and `all_books`. Your task is to recommend all the books that the user hasn\'t read yet. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of books the user has read. - The second line contains n different integers, representing the IDs of the books read by the user. - The third line contains an integer m (1 ≤ m ≤ 10^5), the number of books available in the library. - The fourth line contains m different integers, representing the IDs of all books in the library. All book IDs are positive integers and each ID is unique within each list. -----Output----- Output all the book IDs from the library that the user hasn\'t read yet. The IDs should be in the same order as they appear in the library\'s book list. -----Examples----- Input 3 2 3 5 5 1 2 3 4 5 Output 1 4 Input 2 1 10 4 1 3 6 10 Output 3 6 Input 0 Output (example for case when user read no books) 2 101 102 Output 101 102 -----Note----- In the first example, the user has read books with IDs 2, 3, and 5. The library contains books with IDs 1, 2, 3, 4, and 5. Since the user has not read books with IDs 1 and 4, those should be recommended. In the second example, the user has read books with IDs 1 and 10. The library contains books with IDs 1, 3, 6, and 10. Thus, books with IDs 3 and 6 should be recommended. In the last example, the user has not read any books. The library contains books with IDs 101 and 102. Thus both of them should be recommended. Develop a function to solve this problem effectively considering the constraints.","solution":"def recommend_books(books_read_by_user, all_books): Recommends books from the library that the user hasn\'t read yet. :param books_read_by_user: List of integers representing the IDs of books read by the user :param all_books: List of integers representing the IDs of all books in the library :return: List of integers representing the IDs of books the user hasn\'t read yet read_books_set = set(books_read_by_user) return [book for book in all_books if book not in read_books_set]"},{"question":"Write a function that takes an integer input `n` and prints \\"Even\\" if `n` is divisible by 2, or \\"Odd\\" otherwise. Input - single integer `n` Output - As specified SAMPLE INPUT 4 SAMPLE OUTPUT Even","solution":"def check_even_odd(n): Prints \\"Even\\" if n is divisible by 2, and \\"Odd\\" otherwise. if n % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"The local library needs a software program to manage its book inventory. Each book has a unique identifier, and users can borrow a book if it is available. Your task is to write a program that will process a series of commands to update the inventory accordingly. -----Input:----- - The first line contains Q, the number of queries. - Each of the next Q lines contains one of the following commands: - ADD id: Adds a book with the given identifier id to the inventory. If the book already exists, ignore this command. - BORROW id: Marks the book with the identifier id as borrowed if it is available. If the book does not exist or is already borrowed, ignore this command. - RETURN id: Marks the book with the identifier id as returned if it was borrowed. If the book does not exist or is not currently borrowed, ignore this command. - COUNT: Outputs the number of books currently available in the inventory. -----Output:----- For each COUNT command, output the number of available books in the inventory on a new line. -----Constraints----- - 1 leq Q leq 10^4 - id is a natural number between 1 leq id leq 10^5 -----Sample Input:----- 8 ADD 1001 ADD 1002 BORROW 1001 COUNT RETURN 1001 BORROW 1003 COUNT RETURN 1002 -----Sample Output:----- 1 2 Explanation: 1. ADD 1001: Adds book 1001. 2. ADD 1002: Adds book 1002. 3. BORROW 1001: Marks book 1001 as borrowed. 4. COUNT: Outputs 1 as book 1002 is available. 5. RETURN 1001: Marks book 1001 as returned. 6. BORROW 1003: Ignored as book 1003 does not exist. 7. COUNT: Outputs 2 as books 1001 and 1002 are available. 8. RETURN 1002: Ignored as book 1002 was never borrowed.","solution":"def process_library_commands(commands): inventory = {} available_books = set() borrowed_books = set() output = [] for command in commands: action = command.split() if action[0] == \\"ADD\\": book_id = int(action[1]) if book_id not in inventory: inventory[book_id] = \\"available\\" available_books.add(book_id) elif action[0] == \\"BORROW\\": book_id = int(action[1]) if book_id in inventory and inventory[book_id] == \\"available\\": inventory[book_id] = \\"borrowed\\" available_books.remove(book_id) borrowed_books.add(book_id) elif action[0] == \\"RETURN\\": book_id = int(action[1]) if book_id in inventory and inventory[book_id] == \\"borrowed\\": inventory[book_id] = \\"available\\" borrowed_books.remove(book_id) available_books.add(book_id) elif action[0] == \\"COUNT\\": output.append(len(available_books)) return output"},{"question":"A popular social media platform has decided to enhance its system by introducing a new feature to manage its growing database of users. The platform stores user activity logs in a database with multiple tables. Each table is identified by a unique name and contains records related to user activities. Each record has a timestamp when the activity occurred, stored as a Python `datetime` object. The challenge is to analyze user activities efficiently. You are tasked with implementing a function that calculates the average time difference between consecutive activity records for each user in a specific table from the database. ------ Input ------ The input consists of: 1. An integer `n` denoting the number of records in the table. 2. A list, `records`, of `n` tuples, each containing a user ID (string) and a timestamp (string in the \\"YYYY-MM-DD HH:MM:SS\\" format). ------ Output ------ For each user ID present in the input, output a single line containing the user ID and the average time difference in seconds between consecutive activities. If a user has less than two records, the average time difference is considered to be 0. ------ Constraints ------ 1 ≤ n ≤ 10^5 The timestamps are guaranteed to be in chronological order. ------ Sample Input ------ 7 [ (\\"user1\\", \\"2023-10-01 12:00:00\\"), (\\"user2\\", \\"2023-10-01 12:05:00\\"), (\\"user1\\", \\"2023-10-01 12:10:00\\"), (\\"user2\\", \\"2023-10-01 12:15:00\\"), (\\"user1\\", \\"2023-10-01 12:20:00\\"), (\\"user3\\", \\"2023-10-01 12:25:00\\"), (\\"user3\\", \\"2023-10-01 12:55:00\\") ] ------ Sample Output ------ user1 600.0 user2 600.0 user3 1800.0 ------ Explanation ------ For \\"user1\\", there are three timestamps: [\\"2023-10-01 12:00:00\\", \\"2023-10-01 12:10:00\\", \\"2023-10-01 12:20:00\\"]. The differences between consecutive timestamps are 600 seconds each. The average difference for \\"user1\\" is (600 + 600) / 2 = 600.0. For \\"user2\\", the differences are also 600 seconds each. So, the average difference for \\"user2\\" is (600 + 600) / 1 = 600.0. For \\"user3\\", there are only two timestamps: [\\"2023-10-01 12:25:00\\", \\"2023-10-01 12:55:00\\"]. The difference between these timestamps is 1800 seconds. Since there\'s only one difference, the average remains 1800.0.","solution":"from datetime import datetime, timedelta from collections import defaultdict def calculate_average_time_diffs(n, records): user_times = defaultdict(list) for user_id, timestamp in records: dt = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") user_times[user_id].append(dt) user_averages = {} for user_id, times in user_times.items(): if len(times) < 2: user_averages[user_id] = 0.0 else: total_diff = sum( (times[i] - times[i - 1]).total_seconds() for i in range(1, len(times)) ) average_diff = total_diff / (len(times) - 1) user_averages[user_id] = average_diff for user_id, avg_diff in user_averages.items(): print(f\\"{user_id} {avg_diff}\\") # Example usage with provided sample input: n = 7 records = [ (\\"user1\\", \\"2023-10-01 12:00:00\\"), (\\"user2\\", \\"2023-10-01 12:05:00\\"), (\\"user1\\", \\"2023-10-01 12:10:00\\"), (\\"user2\\", \\"2023-10-01 12:15:00\\"), (\\"user1\\", \\"2023-10-01 12:20:00\\"), (\\"user3\\", \\"2023-10-01 12:25:00\\"), (\\"user3\\", \\"2023-10-01 12:55:00\\") ] calculate_average_time_diffs(n, records)"},{"question":"Mina is a botanist working on a new irrigation system for her plant garden. She designed a garden as a grid of size N x M. Each cell in the grid either contains a plant or is empty. Mina has a special irrigation pipe that can be placed horizontally or vertically over any contiguous cells in the grid. Each irrigation pipe has a fixed length L and can water all plants under its length. Mina wants to maximize the number of plants watered with the irrigation pipes. Given the garden grid, the locations of the plants, and the fixed length of the irrigation pipe L, Mina needs to decide the maximum number of plants that can be watered by placing the pipe optimally either horizontally or vertically. ------ Input Format ------ - The first line of the input contains two space-separated integers N and M representing the dimensions of the garden grid. - The next N lines each contain M characters representing the garden grid. Each character is either \'.\' indicating an empty cell or \'P\' indicating a cell with a plant. - The final line contains a single integer L representing the length of the irrigation pipe. ------ Output Format ------ Output a single integer representing the maximum number of plants that can be watered by placing an irrigation pipe of length L either horizontally or vertically. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ L ≤ min(N, M) ------ Sample Input 1 ------ 4 5 P..PP ..P.. PP..P ..PPP 3 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ In this case, the optimal placement of the irrigation pipe is horizontally over the last three columns of the last row which contains all \'P\'s forming \\"PPP\\".","solution":"def max_plants_watering(N, M, grid, L): max_plants = 0 # Check horizontally for i in range(N): for j in range(M - L + 1): watered = sum(1 for k in range(L) if grid[i][j + k] == \'P\') max_plants = max(max_plants, watered) # Check vertically for j in range(M): for i in range(N - L + 1): watered = sum(1 for k in range(L) if grid[i + k][j] == \'P\') max_plants = max(max_plants, watered) return max_plants # Input parsing can be added here for actual usage"},{"question":"Given an array of integers, you need to determine if there exists a subset of the array such that the sum of the subset is an even number. If such a subset exists, return \\"YES\\"; otherwise, return \\"NO\\". ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines. - The first line of each test case contains an integer N, the number of elements in the array. - The second line contains N space-separated integers A_1, A_2, ..., A_N which represent the elements of the array. ------ Output Format ------ For each test case print exactly one line containing the answer — either \\"YES\\" or \\"NO\\" (without the quotes). ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^4 -10^9 ≤ A_i ≤ 10^9 The sum of N over all test cases doesn\'t exceed 10^5. ----- Sample Input 1 ------ 2 3 1 2 3 4 2 4 5 5 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ For the first test case, the subset {1,3} has an even sum (4). For the second test case, the subset {2,4} has an even sum (6). ----- Sample Input 2 ------ 2 2 1 3 3 1 3 5 ----- Sample Output 2 ------ NO NO ----- Explanation 2 ------ For the first test case, the only subsets are {1} and {3}, both of which have odd sums. For the second test case, any subset sum will be odd as all elements are odd. Hence, it\'s not possible to get an even sum.","solution":"def has_even_sum_subset(array): Function to determine if there exists a subset of the array such that the sum of the subset is an even number. for num in array: if num % 2 == 0: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases to determine for each if there is a subset of the array with an even sum. results = [] for array in test_cases: results.append(has_even_sum_subset(array)) return results"},{"question":"Given a list of file paths, you need to create a file structure dictionary. The file paths are provided as strings, where each element in the path is separated by a forward slash (\'/\'). Write a function `file_structure()` that takes in a list of file paths and returns a nested dictionary representing the hierarchical file structure. For example, given the following list of file paths: ```python [ \\"home/user/file1.txt\\", \\"home/user/docs/file2.txt\\", \\"home/admin/config/settings.cfg\\", \\"var/log/syslog\\" ] ``` The function `file_structure()` should return: ```python { \\"home\\": { \\"user\\": { \\"file1.txt\\": {}, \\"docs\\": { \\"file2.txt\\": {} } }, \\"admin\\": { \\"config\\": { \\"settings.cfg\\": {} } } }, \\"var\\": { \\"log\\": { \\"syslog\\": {} } } } ``` Note that: - Every file or directory is represented as a key. - Files are represented with an empty dictionary {} (as placeholders). - Directories contain further nested dictionaries for their contents. Your implementation should handle any valid input list of file paths and construct the correct hierarchical dictionary structure.","solution":"def file_structure(paths): Given a list of file paths, create a hierarchical nested dictionary. result = {} for path in paths: parts = path.split(\'/\') current = result for part in parts: if part not in current: current[part] = {} current = current[part] return result"},{"question":"Alice loves to collect unique animal stickers that she trades with her friends. She has a notebook with a list of stickers owned by her and her friends arranged in a grid form. Each cell contains a single animal sticker, represented by a unique character \'A\'-\'Z\'. Alice has a special ability that allows her to swap any two stickers in her notebook or her friends\' notebooks. She needs to make sure that her collection of stickers in her notebook contains all the unique stickers present in her friends\' notebooks as well. Alice asks for your help to determine the minimum number of swaps required for her to achieve her goal. A swap operation consists of selecting two cells from any of the notebooks (from Alice\'s or any of her friends\') and swapping their stickers. Input The first line contains two space-separated integers n and k (1 ≤ n ≤ 20, 0 ≤ k ≤ 20). The next n lines contain m characters each, representing Alice\'s notebook. For the next k sections, each section begins with an integer m (1 ≤ m ≤ 20) indicating the dimensions of each friend\'s notebook. This is followed by m lines of m characters each, representing the notebook of one of Alice\'s friends. Output Print a single integer — the minimum number of swaps needed for Alice to collect all unique stickers from her friends\' notebooks into her own. Example Input 3 2 ABC DEF GHI 2 XY YZ 3 MNO PQR STU Output 18 Note In this example, Alice needs to have \'X\', \'Y\', \'Z\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', and \'U\' in her notebook. The minimum swaps required to get all these unique stickers from her friends\' notebooks into Alice\'s notebook, considering all the optimally allowed swaps, is 18.","solution":"def count_minimum_swaps(n, k, alice_notebook, friends_notebooks): # Collect all unique stickers in Alice\'s notebook alice_stickers = {sticker for row in alice_notebook for sticker in row} # Collect all unique stickers in friends\' notebooks friends_stickers = set() for notebook in friends_notebooks: friends_stickers.update({sticker for row in notebook for sticker in row}) # Determine missing stickers that Alice needs missing_stickers = friends_stickers - alice_stickers # Total cells in Alice\'s notebook total_cells_in_alice_notebook = n * n # Total missing stickers Alice needs to collect total_missing_stickers = len(missing_stickers) # Minimum swaps required will be equal to the number of missing stickers, # because we can assume each swap operation can place one missing sticker into Alice\'s notebook # if we optimally swap with the cells that already contained a sticker Alice possesses. return total_missing_stickers # Reading input def main(): import sys input = sys.stdin.read data = input().split() idx = 0 n, k = int(data[idx]), int(data[idx + 1]) idx += 2 alice_notebook = [] for _ in range(n): alice_notebook.append(data[idx]) idx += 1 friends_notebooks = [] for _ in range(k): m = int(data[idx]) idx += 1 notebook = [] for _ in range(m): notebook.append(data[idx]) idx += 1 friends_notebooks.append(notebook) result = count_minimum_swaps(n, k, alice_notebook, friends_notebooks) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers, find the smallest positive integer that does not appear in the array. Function Description Complete the function smallestMissingPositive in the editor below. smallestMissingPositive has the following parameter(s): - int arr[]: an array of integers Returns - int: the smallest positive integer not present in the array Input Format The first line contains an integer n, the number of elements in the array. Each of the next n lines contains an integer arr[i] where 1 ≤ i ≤ n. Constraints 1 ≤ n ≤ 10^6 -10^9 ≤ arr[i] ≤ 10^9 Sample Input STDIN Function ----- -------- 6 n = 6 1 arr = [1, 2, 0, -1, 5, 3] 2 0 -1 5 3 Sample Output 4 Explanation In the given array, [1, 2, 0, -1, 5, 3], the smallest positive integer that is not present is 4. As a result, you should return 4.","solution":"def smallestMissingPositive(arr): Returns the smallest positive integer that does not appear in the array. Parameters: arr (list): An array of integers. Returns: int: The smallest positive integer not present in the array. s = set(arr) smallest_missing = 1 while smallest_missing in s: smallest_missing += 1 return smallest_missing"},{"question":"Given a string containing only digits, return all possible valid IP addresses that can be formed by inserting dots between the digits. You cannot reorder or remove any digits. Each segment of the IP address must be a valid segment, which means it is an integer between 0 and 255, inclusive, and no segment should contain leading zeros except for the number \'0\' itself. Implement the function: ```python def restore_ip_addresses(s: str) -> List[str]: ``` Example: ```python # Example 1 s = \\"25525511135\\" Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"] # Example 2 s = \\"0000\\" Output: [\\"0.0.0.0\\"] # Example 3 s = \\"101023\\" Output: [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"] ``` Your task: - Write a function `restore_ip_addresses` that takes a string `s` and returns a list of all possible valid IP addresses that can be formed from it. - You need to consider all possible ways to insert the three dots to split the input string into four segments. - Make sure to validate each segment to ensure it is a valid IP address segment. - Leading zeros should be handled appropriately, i.e., each segment should not contain leading zeros unless the segment is \'0\'. Constraints: - The string `s` consists only of digits and has a length of at least 4 and at most 12.","solution":"from typing import List def is_valid_segment(segment: str) -> bool: # A valid segment must not start with \'0\' if it has multiple digits and must be between 0 and 255 return len(segment) == 1 or (segment[0] != \'0\' and 0 <= int(segment) <= 255) def restore_ip_addresses(s: str) -> List[str]: result = [] n = len(s) # We need to split the string into 4 parts with 3 dots, hence we use 3 nested loops for i in range(1, min(4, n - 2)): for j in range(i + 1, min(i + 4, n - 1)): for k in range(j + 1, min(j + 4, n)): segment1, segment2, segment3, segment4 = s[:i], s[i:j], s[j:k], s[k:] if all(is_valid_segment(segment) for segment in (segment1, segment2, segment3, segment4)): result.append(f\\"{segment1}.{segment2}.{segment3}.{segment4}\\") return result"},{"question":"Diana has decided to create a new series of encrypted messages. She wants to follow a specific rule: for a given alphabet string, she constructs the message by repeatedly shifting each letter to its successor position in the alphabet a given number of times. For example, if the shift amount is 3 and she is given the string \\"abc\\", the resulting encrypted message would be \\"def\\". Let\'s dive into the details. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of test cases. Each of the next n lines contains a string s (1 le |s| le 100) consisting only of lowercase alphabetic characters, followed by a space, and then an integer k (0 le k le 100) — the shift amount. -----Output----- For each test case, print the resulting encrypted message. -----Examples----- Input 3 abc 3 xyz 2 hello 4 Output def zab lipps -----Note----- In the first example, shifting each letter of \\"abc\\" by 3 positions in the alphabet results in \\"def\\". In the second example, shifting each letter of \\"xyz\\" by 2 positions in the alphabet results in \\"zab\\". In the third example, shifting each letter of \\"hello\\" by 4 positions in the alphabet results in \\"lipps\\".","solution":"def encrypt_message(n, cases): encrypted_messages = [] for case in cases: s, k = case.rsplit(\' \', 1) k = int(k) encrypted_message = \\"\\" for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted_message += new_char encrypted_messages.append(encrypted_message) return encrypted_messages # Example usage n = 3 cases = [\\"abc 3\\", \\"xyz 2\\", \\"hello 4\\"] result = encrypt_message(n, cases) for r in result: print(r)"},{"question":"A coding company organizes a regular tournament where players compete in various games. Each game uses a unique scoring rule, and players are assigned a skill level from 1 to 100 (inclusive) which indicates their proficiency. For a game where players\' scores are based on their skill levels, you are tasked with computing the total score of the top K players. Write a program that performs the following: 1. Reads an integer T, the number of test cases. 2. For each test case, reads two integers: N (the number of players) and K (the number of top players to sum). 3. Reads a list of N integers, each representing a player\'s skill level. 4. Calculates and outputs the sum of the highest K skill levels for each test case. -----Input----- The input begins with a single integer T, the number of test cases. Each test case consists of: - An integer N, the number of players. - An integer K, the number of top players to sum. - A list of N integers, each representing a player\'s skill level. Constraints: 1 ≤ T ≤ 100 1 ≤ K ≤ N ≤ 100,000 1 ≤ Skill Level ≤ 100 -----Output----- For each test case, print the total score of the top K players. Sample Input 2 5 3 50 60 80 90 70 4 2 30 10 20 40 Sample Output 240 70","solution":"def sum_top_k_players(T, test_cases): results = [] for t in range(T): N, K, skill_levels = test_cases[t] skill_levels.sort(reverse=True) top_k_sum = sum(skill_levels[:K]) results.append(top_k_sum) return results"},{"question":"You are the technical lead of an autonomous robot factory. Your factory assembles robots and schedules their maintenance tasks. Each robot has a unique ID and is represented by an object with the following properties: - `robot_id`: An integer representing the robot\'s unique identifier. - `last_maintenance_date`: A string representing the date of the last maintenance in \\"YYYY-MM-DD\\" format. - `maintenance_interval`: An integer representing the number of days between maintenance activities. Your task is to design a function that will take a list of robot objects and the current date, then return a list of robot IDs that require maintenance today. The current date will be provided in the same \\"YYYY-MM-DD\\" format. Write a function `robots_requiring_maintenance(robots: List[Dict[str, Union[int, str]]], current_date: str) -> List[int]` that takes: - `robots`: A list of dictionaries, each representing a robot. - `current_date`: A string representing the current date in \\"YYYY-MM-DD\\" format. The function should return a list of robot IDs that are due for maintenance today. # Example ```python robots = [ {\\"robot_id\\": 101, \\"last_maintenance_date\\": \\"2023-09-10\\", \\"maintenance_interval\\": 30}, {\\"robot_id\\": 102, \\"last_maintenance_date\\": \\"2023-10-05\\", \\"maintenance_interval\\": 10}, {\\"robot_id\\": 103, \\"last_maintenance_date\\": \\"2023-10-01\\", \\"maintenance_interval\\": 14} ] current_date = \\"2023-10-15\\" robots_requiring_maintenance(robots, current_date) ``` # Expected Output ```python [102, 103] ``` # Constraints - A robot requires maintenance if the difference between the current date and `last_maintenance_date` is greater than or equal to the `maintenance_interval` days. - The number of robots will not exceed 10^5. - The `current_date` will always be a valid date and in `YYYY-MM-DD` format. - All dates are valid Gregorian calendar dates. - Each robot object in the `robots` list will have all necessary properties. # Note - You may assume that date calculations need to consider leap years and various month lengths. - Focus on creating an efficient solution since the number of robots can be very large.","solution":"from datetime import datetime, timedelta from typing import List, Dict, Union def robots_requiring_maintenance(robots: List[Dict[str, Union[int, str]]], current_date: str) -> List[int]: current_date = datetime.strptime(current_date, \\"%Y-%m-%d\\") due_for_maintenance = [] for robot in robots: last_maintenance_date = datetime.strptime(robot[\\"last_maintenance_date\\"], \\"%Y-%m-%d\\") maintenance_interval = timedelta(days=robot[\\"maintenance_interval\\"]) next_maintenance_date = last_maintenance_date + maintenance_interval if current_date >= next_maintenance_date: due_for_maintenance.append(robot[\\"robot_id\\"]) return due_for_maintenance"},{"question":"You are given an array A of length N. The *balanced value* of a subarray is defined as the absolute difference between the sum of its elements and the sum of the elements of its complement subarray. Here, the complement of a subarray is the part of the array that is not included in that subarray. Find the minimum and maximum *balanced value* over all subarrays for the given array. Note: A subarray is obtained by deletion of several (possibly zero) elements from the beginning of the array and several (possibly zero) elements from the end of the array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains an integer N - the length of the array A. - The second line of each test case contains N space-separated integers A_{1},A_{2},ldots,A_{N}. ------ Output Format ------ For each test case, output two space-separated integers on a new line, representing the minimum and maximum *balanced value* over all subarrays for the given array. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} -10^{9} ≤ A_{i} ≤ 10^{9} - The sum of N over all test cases won\'t exceed 3 cdot 10^{5}. ----- Sample Input 1 ------ 2 2 3 3 3 1 -2 3 ----- Sample Output 1 ------ 0 6 0 6 ----- Explanation 1 ------ Test case 1: The minimum *balanced value* possible is 0. A subarray with *balanced value* equal to 0 is [3,3]. The sum of this subarray is 6 and the sum of its complement is 0, yielding an absolute difference of 6. Additionally, the whole array can be its own complement with a balanced value of |6 - 6| = 0. The maximum *balanced value* possible is 6 and can be obtained similarly, as discussed. Test case 2: The minimum *balanced value* possible is 0. The whole array can be its own complement with a balanced value of |2 - 2| = 0. The maximum *balanced value* possible is 6 with subarray [1, -2, 3] having a sum of 2 and the complement subarray sum as 0.","solution":"def min_max_balanced_value(n, arr): total_sum = sum(arr) # The minimum balanced value can be zero if we take the whole array as subarray or its complement minimum_bal_value = 0 # The maximum balanced value will be maximum of the total_sum itself or -total_sum considering possible negative values sum maximum_bal_value = abs(total_sum) return minimum_bal_value, maximum_bal_value def process_test_cases(test_cases): results = [] for n, arr in test_cases: min_val, max_val = min_max_balanced_value(n, arr) results.append((min_val, max_val)) return results"},{"question":"In an imaginary language called LingoCode, there\'s a specific syntax rule you have to follow to write if-else conditions. Here is the rule: - An if-condition starts with an identifier `if` followed by a boolean expression and a block of statements surrounded by `{}`. - An else-condition starts with an identifier `else` followed by a block of statements surrounded by `{}`. - Each block can have nested if-else constructs. Given this syntax, a sample LingoCode for checking and printing parity of a number would be: ``` if (n % 2 == 0) { print(\\"Even\\"); } else { print(\\"Odd\\"); } ``` LIZ wants to know the length of the source code generated by writing multiple if-else statements in LingoCode. Each condition alternates between `if` and `else-if`, except the last condition which ends with an `else`. Write a program to calculate the length of the source code for `m` nested if-else conditions in LingoCode. INPUT: The first line of input contains an integer `q` denoting the number of LIZ\'s queries. Next `q` lines contain an integer `m` denoting the number of nested if-else conditions required in each query. OUTPUT: Output consists of `q` lines each describing the length of the source code needed for `m` nested if-else conditions specified in each corresponding test case. Since the answer can be very large, print the output modulo 10^9+7. CONSTRAINTS: 1 ≤ q ≤ 10^5 1 ≤ m ≤ 10^6 SAMPLE INPUT 2 1 2 SAMPLE OUTPUT 23 46 EXPLANATION: For 1 nested if-else condition, the code is: ``` if (...) { // code } else { // code } ``` Length = 23 characters (including spaces and newline characters) For 2 nested if-else conditions, the code is: ``` if (...) { // code } else if (...) { // code } else { // code } ``` Length = 46 characters (each block of code adds 23 characters to the length)","solution":"MOD = 10**9 + 7 def length_of_lingocode(m): return (23 * m) % MOD def process_queries(q, queries): results = [] for m in queries: results.append(length_of_lingocode(m)) return results"},{"question":"In an alien language, letters are sorted in some unknown order. Given a sequence of words written in the alien language, find the order of characters in the alien language. Input: The first line of input contains the number of words N and the length of each word K. The second line contains a list of N words, separated by spaces. Output: Return a single string representing the characters in the order in which they appear in the alien language. If the order cannot be determined, return an empty string. Example 1: Input: N = 5, K = 4 words = [\\"baa\\", \\"abcd\\", \\"abca\\", \\"cab\\", \\"cad\\"] Output: \\"bdac\\" Explanation: 1. From \\"baa\\" and \\"abcd\\", we can infer that \'b\' comes before \'a\'. 2. From \\"abcd\\" and \\"abca\\", we can infer that \'d\' comes before \'a\'. 3. From \\"abca\\" and \\"cab\\", we can infer that \'a\' comes before \'c\'. 4. From \\"cab\\" and \\"cad\\", we can infer that \'b\' comes before \'d\'. So the correct order is: \\"bdac\\" Example 2: Input: N = 3, K = 3 words = [\\"caa\\", \\"aaa\\", \\"aab\\"] Output: \\"cab\\" Explanation: 1. From \\"caa\\" and \\"aaa\\", we can infer that \'c\' comes before \'a\'. 2. From \\"aaa\\" and \\"aab\\", we can infer that \'a\' comes before \'b\'. So the correct order is: \\"cab\\" Your Task: You don\'t need to read the input or print anything. Your task is to complete the function findOrder() that takes the list of words and the integers N and K and returns a string representing the characters in the order in which they appear in the alien language. Expected Time Complexity: O(N * K) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 100 1 ≤ K ≤ 100","solution":"from collections import defaultdict, deque def findOrder(words, N, K): # Create adjacency list and in-degree dictionary adj = defaultdict(set) in_degree = {ch: 0 for word in words for ch in word} # Build the graph for i in range(N - 1): word1, word2 = words[i], words[i + 1] for ch1, ch2 in zip(word1, word2): if ch1 != ch2: if ch2 not in adj[ch1]: adj[ch1].add(ch2) in_degree[ch2] += 1 break # Topological Sort using Kahn\'s Algorithm (BFS) queue = deque([ch for ch in in_degree if in_degree[ch] == 0]) order = [] while queue: ch = queue.popleft() order.append(ch) for neighbor in adj[ch]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) != len(in_degree): return \\"\\" return \\"\\".join(order)"},{"question":"Complete the function that accepts two sorted lists of integers and merges them into a single sorted list. The original lists should not be modified. Examples ``` [1, 3, 5], [2, 4, 6] ==> [1, 2, 3, 4, 5, 6] [7, 8], [1, 2, 3, 4, 6] ==> [1, 2, 3, 4, 6, 7, 8] ```","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list. The original lists should not be modified. # Create a copy of the input lists to ensure the originals are not modified. sorted_list1 = list1[:] sorted_list2 = list2[:] merged_list = [] i, j = 0, 0 # Merge the two lists. while i < len(sorted_list1) and j < len(sorted_list2): if sorted_list1[i] < sorted_list2[j]: merged_list.append(sorted_list1[i]) i += 1 else: merged_list.append(sorted_list2[j]) j += 1 # If there are remaining elements in sorted_list1 or sorted_list2 merged_list.extend(sorted_list1[i:]) merged_list.extend(sorted_list2[j:]) return merged_list"},{"question":"Megan is running an art store where she sells paintings. Every painting has a beauty score and also a fixed price. Megan wants to maximize the total beauty score of the paintings she selects while keeping within her budget constraint. Given a list of paintings with their beauty scores and prices, help Megan determine the maximum beauty score she can get without exceeding her budget. **INPUT** - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers N (number of paintings) and B (budget). - The next N lines each contain two integers representing the beauty score and price of each painting. **OUTPUT** - For each test case, output a single integer representing the maximum total beauty score Megan can achieve without exceeding her budget. **CONSTRAINTS** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ B ≤ 10^5 - 1 ≤ beauty score, price ≤ 1000 **SAMPLE INPUT** ``` 2 3 50 60 20 100 50 120 30 3 50 60 20 100 10 120 30 ``` **SAMPLE OUTPUT** ``` 180 180 ``` **EXPLANATION** *Test Case 1:* - Megan can choose the first and third paintings (60 + 120 = 180 beauty score) with a total price of 50. *Test Case 2:* - Megan can choose the second and third paintings (100 + 120 = 220 beauty score) with a total price of 40.","solution":"def max_beauty_score(T, test_cases): def knapsack(N, B, paintings): dp = [0] * (B + 1) for beauty, price in paintings: for j in range(B, price - 1, -1): dp[j] = max(dp[j], dp[j - price] + beauty) return dp[B] results = [] for case in test_cases: N, B, paintings = case[\'N\'], case[\'B\'], case[\'paintings\'] result = knapsack(N, B, paintings) results.append(result) return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N, B = map(int, input_lines[line_idx].split()) paintings = [] line_idx += 1 for _ in range(N): beauty, price = map(int, input_lines[line_idx].split()) paintings.append((beauty, price)) line_idx += 1 test_cases.append({\\"N\\": N, \\"B\\": B, \\"paintings\\": paintings}) return T, test_cases def main(input_str): T, test_cases = parse_input(input_str) return max_beauty_score(T, test_cases) input_test_str = \\"2n3 50n60 20n100 50n120 30n3 50n60 20n100 10n120 30\\" output = main(input_test_str) print(output) # should print [180, 220]"},{"question":"You are given a matrix with dimensions N x M. Your task is to rotate the matrix 90 degrees clockwise. Implement a function that takes in a matrix and returns a new matrix that represents the original matrix rotated by 90 degrees in a clockwise direction. ``` Example Input : [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output : [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Note: - You can assume that the given matrix will always be non-empty and will have at least one element.","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given N x M matrix by 90 degrees clockwise. :param matrix: list of lists, represents the matrix :return: list of lists, the rotated matrix N = len(matrix) M = len(matrix[0]) if N > 0 else 0 # New matrix will have dimensions M x N rotated_matrix = [[0] * N for _ in range(M)] for r in range(N): for c in range(M): rotated_matrix[c][N - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Given an integer array, find the length of the longest subarray which contains numbers that can be arranged to form an arithmetic progression. Input: You have to complete the method which takes one argument: the integer array. You should not read any input from stdin/console. There are multiple test cases. For each test case, this method will be called individually. Output: Your function should return the length of the longest subarray that forms an arithmetic progression. User Task: The task is to complete the function longestAP() which returns an integer representing the length of the longest arithmetic progression subarray. Constraints: 1 <= T <= 10^3 1 <= n <= 10^3 -10^4 <= array elements <= 10^4 Example: Input: 3 6 1 7 10 13 14 19 5 2 4 6 8 10 4 1 3 5 7 Output: 4 5 4 Explanation: Case 1: The longest subarray that forms an arithmetic progression is [7, 10, 13, 16] with common difference of 3. Case 2: The entire array forms an arithmetic progression with common difference of 2. Case 3: The entire array forms an arithmetic progression with common difference of 2.","solution":"def longestAP(arr): Returns the length of the longest subarray which can be arranged to form an arithmetic progression. :param arr: List[int] - list of integers :return: int - the length of the longest subarray forming an arithmetic progression if not arr: return 0 n = len(arr) if n <= 2: return n arr.sort() longest_ap_len = 2 # Minimum length of any AP including two elements dp = [{} for _ in range(n)] for j in range(1, n): for i in range(j): diff = arr[j] - arr[i] if diff in dp[i]: dp[j][diff] = dp[i][diff] + 1 else: dp[j][diff] = 2 longest_ap_len = max(longest_ap_len, dp[j][diff]) return longest_ap_len def find_longest_aps(test_cases): results = [] for case in test_cases: arr = case result = longestAP(arr) results.append(result) return results"},{"question":"You are given an array of integers and a target sum. Your task is to determine whether there exist three distinct elements in the array that add up to the target sum. ------ Input Format ------ - The first line of input contains an integer N, the number of elements in the array. - The second line contains N integers separated by spaces, denoting the elements of the array. - The third line contains a single integer, denoting the target sum, S. ------ Output Format ------ Output YES if there exist three distinct elements in the array that add up to the target sum, and NO otherwise. ------ Constraints ------ 1 ≤ N ≤ 10^5 -10^9 ≤ text{elements of the array} ≤ 10^9 -10^9 ≤ S ≤ 10^9 ------ Sample Input 1 ------ 6 1 4 45 6 10 8 22 ------ Sample Output 1 ------ YES ------ Sample Input 2 ------ 4 1 2 3 4 10 ------ Sample Output 2 ------ NO ------ Explanation ------ In the first test case, the function finds that 4, 10, and 8 sum up to 22, so the answer is YES. In the second test case, there are no three different elements that sum up to 10. So the answer is NO.","solution":"def three_sum_exists(arr, target): Determines if there exist three distinct elements in the array that add up to the target sum. Parameters: arr (list): List of integers. target (int): The target sum to find. Returns: str: \'YES\' if such elements exist, otherwise \'NO\'. arr.sort() n = len(arr) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Given an integer N, print a right-aligned triangle of numbers such that the base of the triangle is N and it is filled with sequential numbers starting from 1. Example 1: Input: N = 4 Output: 1 2 3 4 5 6 7 8 9 10 Example 2: Input: N = 3 Output: 1 2 3 4 5 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function rightAlignedTriangle() which takes an Integer N as input and returns a vector of strings where each line represents lines of the pattern. For example, if N=2, the vector v = {\\" 1\\", \\"2 3\\"}. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 100","solution":"def rightAlignedTriangle(N): Takes an Integer N as input and returns a vector of strings where each line represents lines of the pattern. result = [] num = 1 for i in range(1, N+1): line = \' \' * (N - i) + \' \'.join(str(num + j) for j in range(i)) num += i result.append(line) return result"},{"question":"You are given a string consisting of lowercase letters only. Your task is to determine the minimum number of operations required to make all the characters of the string the same. In one operation, you can choose any single character of the string and replace it with another character (any lowercase letter). -----Input:----- - The first line contains a single integer N - the length of the string. - The second line contains the string S. -----Output:----- Print the minimum number of operations required to make all characters of the string the same. -----Constraints----- - 1 leq N leq 10^5 -----Sample Input 1:----- 5 aabbc -----Sample Output 1:----- 3 -----Sample Input 2:----- 4 aaaa -----Sample Output 2:----- 0 -----EXPLANATION:----- In the first sample input, the optimal sequence of operations is to change two \'b\' characters and one \'c\' character to \'a\' for a total of 3 changes, resulting in the string \\"aaaaa\\". In the second sample input, all characters are already the same, so no operations are needed.","solution":"def min_operations_to_make_characters_same(N, S): Returns the minimum number of operations required to make all characters in the string the same. from collections import Counter char_count = Counter(S) max_frequency = max(char_count.values()) return N - max_frequency"},{"question":"Given a string of digits formed from characters \'0\' to \'9\', the task is to find the highest value number possible by deleting exactly one digit from the string. Example 1: Input : S = \\"1234\\" Output : 234 Explanation: By deleting \'1\', we get the highest possible number 234. Example 2: Input : S = \\"54321\\" Output : 5432 Explanation: By deleting \'1\', we get the highest possible number 5432. Example 3: Input: S = \\"10001\\" Output: 1001 Explanation: By deleting the first \'0\', we get the highest possible number 1001. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxNumber() which takes the string S as input and returns the highest possible number as a string after deleting exactly one digit. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= length of S <= 10^5","solution":"def maxNumber(S): Returns the highest possible number by deleting exactly one digit from the input string S. max_num = \\"\\" for i in range(len(S)): current_num = S[:i] + S[i+1:] if current_num > max_num: max_num = current_num return max_num"},{"question":"A group of people are standing in a circle, and each person is assigned a unique ID ranging from 1 to n. They start eliminating every k-th person in the circle, proceeding in a clockwise direction. This process continues until only one person remains. Your task is to determine the ID of the last person remaining. -----Input----- The first line of the input contains two integers n and k (1 le n le 1000, 1 le k le 1000) — the number of people in the circle and the elimination step, respectively. -----Output----- Print one integer — the ID of the last remaining person. -----Examples----- Input 5 2 Output 3 Input 7 3 Output 4 Input 10 1 Output 10","solution":"def last_person_standing(n, k): Returns the ID of the last person remaining in the circle. if n == 1: return 1 else: return (last_person_standing(n-1, k) + k-1) % n + 1"},{"question":"You are given an array of n integers a_1, a_2, ldots, a_n and an integer k (1 leq k leq n). The goal is to find k contiguous subarrays such that the maximum difference between the sums of any two subarrays is minimized. Formally, you need to partition the array into k disjoint contiguous subarrays {[l_1, r_1], [l_2, r_2], ldots, [l_k, r_k]} such that: 1 leq l_i leq r_i leq n for all 1 leq i leq k; For all 1 leq j leq n there exists exactly one segment [l_i, r_i] such that l_i leq j leq r_i. Define s_i = sumlimits_{j=l_i}^{r_i} {a_j} to be the sum of the elements in segment [l_i, r_i]. Minimize the maximum value of maxlimits_{1 leq i leq k} s_i - minlimits_{1 leq i leq k} s_i. You must return the minimized value as the output. -----Input----- The first line contains two integers, n and k (1 leq k leq n leq 200,000) — the size of the given array and the number of segments in a partition. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the given array. -----Output----- Print a single integer — the minimized value of the maximum difference between the sums of any two contiguous subarrays when the array is partitioned into k contiguous subarrays. -----Examples----- Input 5 2 1 3 -2 4 5 Output 3 Input 6 3 -1 2 9 -7 3 -8 Output 1 Input 5 4 1 -1 1 -1 1 Output 2 -----Note----- In the first test, splitting the array into the segments {[1, 3], [4, 5]} results in sums 2 and 9 respectively, with a difference of 7. But splitting into {[1, 4], [5, 5]} results in sums 6 and 5 respectively, with a minimized difference of 1. In the second test, splitting the array into the segments {[1, 2], [3, 5], [6, 6]} results in sums 1, 5 and -8 respectively. The maximum difference is 5 - (-8) = 13. However, splitting into {[1, 1], [2, 3], [4, 6]} results in sums -1, 11 and -12 respectively, with a minimized difference of 11 - (-12) = 23. The best option is to split into {[1], [2, 3, 4], [5, 6]} with sums -1, 2 and 1 respectively, with a minimized difference of 2 - (-1) = 3.","solution":"def minimize_max_difference(n, k, arr): Function to find the minimum possible value of the maximum difference between the sums of any two subarrays when the array is partitioned into k contiguous subarrays. def valid(mid): current_sum = 0 partitions = 1 for num in arr: if current_sum + num > mid: partitions += 1 current_sum = 0 current_sum += num return partitions <= k lo, hi = max(arr), sum(arr) while lo < hi: mid = (lo + hi) // 2 if valid(mid): hi = mid else: lo = mid + 1 return lo"},{"question":"Farmer John is trying to organize his farm and wants to divide a rectangular piece of land into equal-sized square plots for planting. He needs your help to figure out the largest possible size of each square plot that allows the entire rectangle to be fully divided without any leftover area. Given the dimensions of the rectangular piece of land, you need to determine the side length of the largest possible square plot that can perfectly tile the entire rectangle. Input The input consists of an integer T which represents the number of test cases. Each of the next T lines contains two integers W and H, representing the width and height of the rectangular piece of land, respectively. Output For each test case, output one integer: the side length of the largest square plot that can be used to tile the rectangle perfectly. Constraints 1 ≤ T ≤ 300 1 ≤ W, H ≤ 10^9 SAMPLE INPUT 3 6 9 15 25 100 45 SAMPLE OUTPUT 3 5 5 Explanation - In the first case, a 6x9 rectangle can be divided into squares of side length 3 (18 squares). - In the second case, a 15x25 rectangle can be divided into squares of side length 5 (15 squares). - In the third case, a 100x45 rectangle can be divided into squares of side length 5 (180 squares).","solution":"import math def largest_square_side_length(T, dimensions): Returns the side length of the largest possible square plot that can perfectly tile the entire rectangle. Parameters: T (int): The number of test cases. dimensions (list of tuples): Each tuple contains two integers W and H representing the width and height of the rectangle. Returns: list of int: A list containing the side length of the largest square plot for each test case. results = [] for W, H in dimensions: results.append(math.gcd(W, H)) return results"},{"question":"In a certain social network, there are n users numbered from 1 to n. Each user might have some friend suggestions. These suggestions come with a measure of how strong the suggested friendship is (called the friendship strength). The social network intends to show to each user the k friend suggestions with the highest friendship strength. If a user has fewer than k friend suggestions, the network will show all friend suggestions of that user. Your task is to write a program that generates the list of top friend suggestions for each user based on the provided data. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^3, 1 ≤ k ≤ 10), the number of users and the number of top friend suggestions to show, respectively. The next line contains an integer m (1 ≤ m ≤ 10^5), the number of friend suggestions. Each of the next m lines contains three integers uj, vf, and s (1 ≤ uj, vf ≤ n, 1 ≤ s ≤ 100), indicating that user uj has a friend suggestion for user vf with a friendship strength s. You can assume that for each user, the friend suggestions are unique. -----Output----- For each user v from 1 to n, output a line containing the user number v followed by up to k friend suggestions in the format (friend_user, friendship_strength) sorted in descending order of friendship strength. If there are ties in friendship strength, sort the suggestions based on the friend user number in ascending order. -----Examples----- Input 4 2 5 1 2 50 1 3 70 2 4 60 3 1 80 4 1 90 Output 1 (3, 70) (2, 50) 2 (4, 60) 3 (1, 80) 4 (1, 90) Input 3 1 4 1 2 30 2 3 20 3 1 40 1 3 30 Output 1 (2, 30) 2 (3, 20) 3 (1, 40)","solution":"def generate_friend_suggestions(n, k, m, suggestions): from collections import defaultdict users_suggestions = defaultdict(list) # Organize suggestions by user for suggestion in suggestions: uj, vf, s = suggestion users_suggestions[uj].append((vf, s)) # Prepare the output output = [] for user in range(1, n+1): friend_suggestions = users_suggestions[user] # Sort by friendship strength (descending) then by friend_user number (ascending) friend_suggestions.sort(key=lambda x: (-x[1], x[0])) # Take the top k suggestions top_suggestions = friend_suggestions[:k] # Format the output formatted_suggestions = \\" \\".join(f\\"({friend_user}, {strength})\\" for friend_user, strength in top_suggestions) output.append(f\\"{user} {formatted_suggestions}\\") return output"},{"question":"-----Input----- The input contains a single integer n (1 le n le 100). -----Output----- Output the sum of all prime numbers from 1 to n (inclusive). -----Example----- Input 10 Output 17","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sum_primes_up_to(n): Returns the sum of all prime numbers from 1 to n (inclusive). return sum(num for num in range(1, n + 1) if is_prime(num))"},{"question":"# Task In a 2D grid, there are walls and empty spaces. The walls are represented by a `-1` and the empty spaces by a `0`. The distance from an empty space to the nearest wall is measured as the number of steps in the shortest path from that empty space to a wall, with movement restricted to the four cardinal directions (up, down, left, right). Given a 2D grid of integers with walls and empty spaces, your task is to write an algorithm that fills each empty space (`0`) with an integer representing the distance to the nearest wall (`-1`). # Example For the grid: ``` [-1, 0, 0] [0, 0, 0] [0, 0, -1] ``` The output grid should be: ``` [-1, 1, 2] [1, 2, 1] [2, 1, -1] ``` For the grid: ``` [0, -1, 0] [0, 0, 0] ``` The output grid should be: ``` [0, -1, 1] [1, 2, 1] ``` # Input/Output `[input]` 2D integer array `grid` A grid containing walls (`-1`) and empty spaces (`0`). The grid will have at least one wall and one empty space. `1 ≤ grid.length, grid[i].length ≤ 100`. [output] 2D integer array The grid with distances to the nearest wall.","solution":"from collections import deque def fill_distances(grid): Update each empty space in the grid with the distance to the nearest wall. Walls are represented by -1 and empty spaces by 0. :param grid: List[List[int]] - 2D grid of integers with walls (-1) and empty spaces (0) :return: List[List[int]] - Updated grid with distances to the nearest wall if not grid: return grid rows, cols = len(grid), len(grid[0]) queue = deque() # Initialize queue with walls and their positions for r in range(rows): for c in range(cols): if grid[r][c] == -1: queue.append((r, c, 0)) # (row, column, distance) # Direction vectors for moving in 4 cardinal directions directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: r, c, dist = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0: grid[nr][nc] = dist + 1 queue.append((nr, nc, dist + 1)) return grid"},{"question":"A company needs a program to manage conference room bookings. Each conference room can be booked by employees for a specified time slot during a single day. You need to implement a function that checks if a new booking conflicts with any existing booking for the same room. Define a function `is_booking_conflict(bookings, new_booking)` where `bookings` is a list of tuples representing the existing bookings for a room. Each tuple contains two integers, the start time and the end time of a booking (both inclusive). `new_booking` is also a tuple of two integers representing the start time and end time of the new booking. A booking conflict occurs if the new booking overlaps with any existing booking. Your function should return `True` if there is a conflict and `False` otherwise. Times are given in a 24-hour format without separators (e.g., 13:00 is represented as 1300). **Input** - A list of tuples `bookings` containing the existing bookings for a room. Each tuple has two integers [start, end] (0000 leq start < end leq 2359). - A tuple `new_booking` with two integers [start, end] (0000 leq start < end leq 2359). **Output** - A boolean value `True` if there is a conflict, `False` otherwise. **Examples** Input ```python bookings = [(900, 1100), (1300, 1500), (1600, 1700)] new_booking = (1000, 1400) ``` Output ```python True ``` Input ```python bookings = [(900, 1100), (1300, 1500), (1600, 1700)] new_booking = (1100, 1300) ``` Output ```python False ``` **Note** In the first example, the new booking time overlaps with the existing booking from 900 to 1100 and from 1300 to 1500. Hence, there is a conflict, and the answer is `True`. In the second example, the new booking starts exactly when an existing booking ends and ends when another booking starts, so there is no overlap, and the answer is `False`.","solution":"def is_booking_conflict(bookings, new_booking): Checks if a new booking conflicts with any existing booking for the same room. Parameters: bookings (list of tuples): Existing bookings with (start, end) times. new_booking (tuple): New booking with (start, end) times. Returns: bool: True if there is a conflict, False otherwise. new_start, new_end = new_booking for start, end in bookings: if new_start < end and new_end > start: return True return False"},{"question":"Write a function `rearrange_string` that takes a single string `s` as input and rearranges the characters of `s` such that no two adjacent characters are the same. If it is not possible to rearrange the string to meet this condition, return an empty string `\\"\\"`. Assume that the input string contains only lowercase English letters. # Example ```python rearrange_string(\\"aab\\") # Should return \\"aba\\" rearrange_string(\\"aaab\\") # Should return \\"\\" ``` # Constraints - The length of the input string `s` will be between 1 and 10^4. Your task is to implement the function `rearrange_string`.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges characters in the string such that no two adjacent characters are the same. Args: s (str): Input string. Returns: str: Rearranged string or an empty string if not possible. # Count the frequency of each character char_count = Counter(s) # Create a max heap with negative counts (for highest frequency character first) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap or prev_count: if not max_heap and prev_count: return \\"\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count: # Append the previous character back to the heap if its count is not zero heapq.heappush(max_heap, (prev_count, prev_char)) # Update prev_count and prev_char prev_char = char prev_count = count + 1 # Moving towards zero, as count was initially negative return \\"\\".join(result)"},{"question":"You are given an integer array nums. The array should be processed to return an array of sum of elements of all its contiguous subarrays of length k. If the subarray length k is greater than the length of the array return an empty array. Example 1: Input: nums = [1,2,3,4,5], k = 3 Output: [6,9,12] Explanation: The sum of subarray [1,2,3] is 1 + 2 + 3 = 6. The sum of subarray [2,3,4] is 2 + 3 + 4 = 9. The sum of subarray [3,4,5] is 3 + 4 + 5 = 12. Example 2: Input: nums = [2,1,2,4,3,1], k = 2 Output: [3,3,6,7,4] Explanation: The sum of subarray [2,1] is 2 + 1 = 3. The sum of subarray [1,2] is 1 + 2 = 3. The sum of subarray [2,4] is 2 + 4 = 6. The sum of subarray [4,3] is 4 + 3 = 7. The sum of subarray [3,1] is 3 + 1 = 4. Example 3: Input: nums = [1], k = 2 Output: [] Explanation: k is greater than the length of the array. So, return an empty array. Note: The length of the array nums will be at most 100. The elements within the array nums will be at most 1000. The value of k will not exceed the length of the array.","solution":"def sum_of_subarrays(nums, k): Returns an array of the sum of elements of all contiguous subarrays of length k. If k is greater than the length of nums, returns an empty array. :param nums: List[int] - The input array :param k: int - The length of the subarrays :return: List[int] - The array of sums of subarrays of length k if k > len(nums): return [] result = [] for i in range(len(nums) - k + 1): subarray_sum = sum(nums[i:i + k]) result.append(subarray_sum) return result"},{"question":"You are given an integer array A of length n. Perform the following manipulations: * Split the array into two halves. If n is odd, the first half should have one more element than the second half. * Reverse each half. * Merge the two halves by alternating elements from each half, starting with the first half. Output the resultant array after these manipulations. Input The first line of the input contains an integer n (1 ≤ n ≤ 20) indicating the length of the array. The second line contains n space-separated integers A[i] where 1 ≤ A[i] ≤ 100. Output Output the array after performing the described manipulations. Examples Input 5 1 2 3 4 5 Output 3 5 2 4 1 Input 6 10 20 30 40 50 60 Output 30 60 20 50 10 40","solution":"def manipulate_array(n, A): Manipulate the array as per the specified rules and return the resultant array. Parameters: n (int): The length of the input array. A (list): The input array of integers. Returns: list: The array after performing the described manipulations. if n % 2 == 0: first_half, second_half = A[:n//2], A[n//2:] else: first_half, second_half = A[:n//2+1], A[n//2+1:] first_half.reverse() second_half.reverse() result = [] min_length = min(len(first_half), len(second_half)) for i in range(min_length): result.append(first_half[i]) result.append(second_half[i]) if len(first_half) > len(second_half): result.extend(first_half[min_length:]) else: result.extend(second_half[min_length:]) return result"},{"question":"A number of envelopes are lying on a table, each with a unique pair of dimensions representing its width and height. A given envelope can fit into another envelope if and only if both the width and height of the first envelope are less than the width and height of the second envelope, respectively. Your task is to find the maximum number of envelopes one can \\"Russian doll\\" (put one inside another). Write a function that returns the maximum number of envelopes one can form using the envelopes provided. -----Constraints----- - n is the number of envelopes - 1 leq n leq 1000 - w_i, h_i are integers. 1 leq w_i, h_i leq 10^4 -----Input----- Input is given from Standard Input in the following format: n w_1 h_1 w_2 h_2 : w_n h_n -----Output----- Print the maximum number of envelopes one can \\"Russian doll\\". -----Sample Input----- 4 5 4 6 4 6 7 2 3 -----Sample Output----- 3 In this example, the maximum number of envelopes one can \\"Russian doll\\" is 3. One way is 2x3 => 5x4 => 6x7.","solution":"def maxEnvelopes(n, envelopes): envelopes.sort(key=lambda x: (x[0], -x[1])) dp = [] import bisect for _, h in envelopes: idx = bisect.bisect_left(dp, h) if idx == len(dp): dp.append(h) else: dp[idx] = h return len(dp) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) envelopes = [] for i in range(n): width = int(data[2 * i + 1]) height = int(data[2 * i + 2]) envelopes.append((width, height)) print(maxEnvelopes(n, envelopes))"},{"question":"Vic the Robot loves exploring 2D grids. He starts at the top-left corner of a grid (1, 1) and wants to reach the bottom-right corner (N, M). The grid contains some obstacles, and Vic can only move down or right. Your task is to help Vic find the number of unique paths from the start to the destination, ensuring he avoids the obstacles. A cell in the grid can either be free (denoted by a 0) or contain an obstacle (denoted by a 1). Vic cannot pass through cells with obstacles. --- Input --- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M, denoting the number of rows and columns in the grid. The next N lines contain M space-separated integers, representing the grid. A 0 denotes a free cell, and a 1 denotes an obstacle. --- Output --- For each test case, output a single line containing the number of unique paths Vic can take from the top-left corner to the bottom-right corner of the grid. If there is no valid path, output 0. --- Constraints --- 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 1 --- Sample Input --- 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 --- Sample Output --- 2 1 --- Explanation --- In the first test case, Vic can move from (1, 1) to (1, 2) to (1, 3) to (2, 3) to (3, 3) or from (1, 1) to (2, 1) to (3, 1) to (3, 2) to (3, 3). There are two unique paths. In the second test case, there is only one unique path: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3).","solution":"def unique_paths_with_obstacles(grid): N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] def find_unique_paths(T, test_cases): results = [] for case in test_cases: N, M, grid = case result = unique_paths_with_obstacles(grid) results.append(result) return results"},{"question":"You are given an array A[] of size N that contains positive integers. You need to determine if it is possible to make the entire array equal by performing the following operation an arbitrary number of times: choose any element of the array and increment it by the value of another distinct element in the array. Return \\"Possible\\" if it\'s feasible to make all elements equal, otherwise return \\"Not Possible\\". Example 1: Input: N = 3 A[] = {3, 9, 6} Output: Possible Explanation: We can pick 3 and add it to 6 to get 9, so the array can become {9, 9, 9}. Hence the output is \\"Possible\\". Example 2: Input: N = 4 A[] = {4, 5, 7, 11} Output: Not Possible Explanation: There is no way to make all elements equal through the given operations. Hence the output is \\"Not Possible\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPossible() which takes an Integer N and an array A[] of size N as input and returns \\"Possible\\" if it is feasible to make all elements equal, otherwise returns \\"Not Possible\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= A[i] <= 10^9","solution":"def isPossible(N, A): Determine if it is possible to make the entire array equal by performing a defined operation any number of times. Parameters: N (int): The size of the array. A (list): A list of positive integers. Returns: str: \\"Possible\\" if feasible, otherwise \\"Not Possible\\". from math import gcd from functools import reduce # Find the greatest common divisor (GCD) of the entire array overall_gcd = reduce(gcd, A) # If the GCD is greater than 1, it is possible to make all elements equal return \\"Possible\\" if overall_gcd > 1 else \\"Not Possible\\""},{"question":"Lena loves playing with arrays and performing operations on them. She is trying to solve the following problem: You are given an array of integers. Your task is to find out the number of contiguous subarrays whose sum is divisible by a given integer `k`. Input The first line of the input contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) where `n` is the number of elements in the array and `k` is the given integer. The second line contains `n` integers a1, a2, ..., an where (|ai| ≤ 10^9). Output Output the number of contiguous subarrays whose sum is divisible by `k`. Examples Input 5 5 5 10 15 20 25 Output 15 Input 5 2 1 2 3 4 5 Output 6 Explanation In the first example, all subarrays sums are multiples of 5: - [5] - [5, 10] - [5, 10, 15] - [5, 10, 15, 20] - [5, 10, 15, 20, 25] - [10] - [10, 15] - [10, 15, 20] - [10, 15, 20, 25] - [15] - [15, 20] - [15, 20, 25] - [20] - [20, 25] - [25] In the second example, the subarrays whose sums are divisible by 2 are: - [2] - [1, 2, 3] - [2, 3, 4] - [3, 4, 5] - [4] - [4, 5]","solution":"def count_subarrays_with_sum_divisible_by_k(n, k, array): Returns the number of contiguous subarrays whose sum is divisible by k. prefix_sum = 0 mod_count = {0: 1} # For subarrays starting from the beginning count = 0 for num in array: prefix_sum += num mod_value = prefix_sum % k if mod_value < 0: # correcting for negative mod values mod_value += k if mod_value in mod_count: count += mod_count[mod_value] mod_count[mod_value] += 1 else: mod_count[mod_value] = 1 return count"},{"question":"Given a string S consisting of lowercase alphabets and spaces, you need to check if the string is a palindrome ignoring the spaces. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces). Example 1: Input: S = \\"nurses run\\" Output: Yes Explanation: If we ignore spaces, it reads as \\"nursesrun\\" which is a palindrome. Example 2: Input: S = \\"hello there\\" Output: No Explanation: If we ignore spaces, it reads as \\"hellothere\\" which is not a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPalindrome() which takes a string S as input parameter and returns \\"Yes\\" if the string is a palindrome ignoring spaces, otherwise returns \\"No\\". Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^{5} S consists of lowercase English letters and spaces.","solution":"def isPalindrome(S: str) -> str: Returns \\"Yes\\" if the string S is a palindrome ignoring spaces, otherwise returns \\"No\\". # Remove spaces from the string cleaned_str = S.replace(\\" \\", \\"\\") # Compare the cleaned string with its reverse if cleaned_str == cleaned_str[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray such that the sum of the elements in the subarray is strictly positive. Can you help solve this problem? ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of elements in the array. The second line of each test case contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, print a single line containing one integer ― the length of the longest contiguous subarray with a strictly positive sum. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ text{array elements} ≤ 10^4 ----- Sample Input 1 ------ 2 5 -1 2 3 -5 4 6 1 -2 2 3 -3 2 ----- Sample Output 1 ------ 2 4 ----- Explanation 1 ------ Example case 1: The longest contiguous subarray with a strictly positive sum is [2, 3], which has a length of 2. Example case 2: The longest contiguous subarray with a strictly positive sum is [2, 3, -3, 2], which has a length of 4.","solution":"def longest_positive_subarray_length(test_cases): results = [] for case in test_cases: n, array = case max_len = 0 current_len = 0 current_sum = 0 for num in array: current_sum += num if current_sum > 0: current_len += 1 else: current_sum = 0 current_len = 0 if current_len > max_len: max_len = current_len results.append(max_len) return results"},{"question":"Write a function that takes a string as input and returns the character that appears least frequently in the string. If there are multiple characters with the same frequency, return the character that appears first in the string. The input string will contain only lowercase alphabets. Examples: Input: `\\"abacabad\\"` Output: `\\"c\\"` Input: `\\"hello\\"` Output: `\\"h\\"` Input: `\\"aabbccdd\\"` Output: `\\"a\\"` Note: You may assume the input string is not empty.","solution":"def least_frequent_char(s): from collections import Counter # Count the frequency of each character frequency = Counter(s) # Find the minimum frequency min_freq = min(frequency.values()) # Find the first character with the minimum frequency for char in s: if frequency[char] == min_freq: return char"},{"question":"Farmer John has built a new fence system to keep his cows safe. The fence has been designed as a simple polygon (not necessarily convex) with `N` vertices. Each vertex corresponds to a fence post, and they are connected by straight fence segments. One day, while examining his fence, Farmer John noticed that some fence posts were stronger than others. He wanted to find out the degree of each vertex, defined as the number of edges connected to it. However, Farmer John misplaced the list of fence edges and only has the coordinates of each vertex. He wants you to help him reconstruct the edges to determine the degree of each vertex. Given the coordinates of the vertices in the order they appear on the fence, your task is to compute and print the degree of each vertex. # Input - The first line contains the integer `N` (3 ≤ N ≤ 1000), the number of vertices. - The next `N` lines each contain two integers `x` and `y` (−10^4 ≤ x, y ≤ 10^4), the coordinates of each vertex in the order they appear on the fence. # Output - Output `N` integers, where the i-th integer is the degree of the i-th vertex. # Example Input ``` 5 0 0 2 0 2 2 1 1 0 2 ``` Output ``` 2 2 2 2 2 ``` Input ``` 4 1 1 4 1 4 4 1 4 ``` Output ``` 2 2 2 2 ``` # Explanation In the first example, the polygon is a pentagon with each vertex connected to its immediate neighbors, giving each vertex a degree of 2. In the second example, the polygon is a square with each vertex connected to its immediate neighbors, giving each vertex a degree of 2. Your task is to determine the degrees for the given vertices of the polygon.","solution":"def vertex_degrees(N, vertices): Given the number of vertices N and the list of vertex coordinates, returns the degree of each vertex. Parameters: N (int): Number of vertices. vertices (list of tuples): List of tuples, where each tuple contains the coordinates (x, y) of a vertex. Returns: list of int: Degrees of each vertex. # In a simple polygon, each vertex is connected to its two immediate neighbors. return [2] * N # Example usage: # N = 5 # vertices = [(0, 0), (2, 0), (2, 2), (1, 1), (0, 2)] # print(vertex_degrees(N, vertices)) # Output: [2, 2, 2, 2, 2]"},{"question":"Task **_Given_** a *list of strings*, write a function to **_find the longest common prefix_** among all the strings in the list. ___ # Notes : * **_If there is no common prefix_**, you should return **an empty string** `\\"\\"`. * The list contains *only lowercase English letters*. * If the list is empty, return an empty string `\\"\\"`. ___ # Input >> Output Examples Example 1: * **_Input_**: `[\\"flower\\",\\"flow\\",\\"flight\\"]` * **_Output_**: `\\"fl\\"` Example 2: * **_Input_**: `[\\"dog\\",\\"racecar\\",\\"car\\"]` * **_Output_**: `\\"\\"` Example 3: * **_Input_**: `[\\"interspecies\\",\\"interstellar\\",\\"interstate\\"]` * **_Output_**: `\\"inters\\"` ___ ALL translations are welcomed Enjoy Coding !! # Happy Coding","solution":"def longest_common_prefix(strs): Returns the longest common prefix among a list of strings. if not strs: return \\"\\" # Find the minimum length string in the list min_length = min(len(s) for s in strs) # Initialize the prefix as an empty string prefix = \\"\\" for i in range(min_length): # Take the character from the first string char = strs[0][i] # Check if this character is common to all strings if all(s[i] == char for s in strs): prefix += char else: break return prefix"},{"question":"Zina loves to paint pictures using a special technique. She paints pixel art on a canvas which is represented by an `n` by `m` grid. Each cell in the grid can either be painted black (represented by `1`) or left white (represented by `0`). Zina considers a painting to be beautiful if every row and every column contains at least one black cell. Your task is to help Zina determine if her painting is beautiful. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next `n` lines contain `m` integers each (either `0` or `1`), representing the cells of the grid. Output Print \\"BEAUTIFUL\\" if the painting is beautiful, otherwise print \\"NOT BEAUTIFUL\\". Examples Input 3 3 1 0 0 0 1 0 0 0 1 Output BEAUTIFUL Input 2 2 0 1 1 0 Output BEAUTIFUL Input 2 2 0 0 1 1 Output NOT BEAUTIFUL Input 3 3 1 0 0 1 0 0 0 0 0 Output NOT BEAUTIFUL","solution":"def is_beautiful_painting(n, m, grid): Returns \\"BEAUTIFUL\\" if every row and every column contains at least one black cell (1), otherwise returns \\"NOT BEAUTIFUL\\". # Check if every row contains at least one black cell (1) for row in grid: if 1 not in row: return \\"NOT BEAUTIFUL\\" # Check if every column contains at least one black cell (1) for col in range(m): col_contains_black = False for row in range(n): if grid[row][col] == 1: col_contains_black = True break if not col_contains_black: return \\"NOT BEAUTIFUL\\" return \\"BEAUTIFUL\\""},{"question":"You are given a list of words and a set of pairs of words. Each pair indicates that the two words are considered synonyms. Your goal is to determine the groups of synonyms. Two words belong to the same group if they are directly or transitively connected through the given pairs. For instance, if \'word1\' is synonym with \'word2\' and \'word2\' is synonym with \'word3\', then \'word1\', \'word2\', and \'word3\' belong to the same group. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of words. Each of the next n lines contains a single word. The word consists of lowercase English letters and its length is at most 30. The next line contains an integer m (0 ≤ m ≤ 100,000) — the number of pairs of words. Each of the next m lines contains a pair of words separated by a space, indicating that these two words are synonyms. -----Output----- Output the number of synonym groups. Then, output each group on a new line. For each group, print the words in the group separated by a space. The groups and words within each group can be printed in any order. -----Example----- Input 8 car automobile vehicle driver controller steering wheel turn 3 car automobile vehicle automobile driver controller Output 3 car automobile vehicle driver controller steering wheel turn","solution":"def find_groups(words, pairs): from collections import defaultdict # Create a graph to define relationships between words graph = defaultdict(list) for word1, word2 in pairs: graph[word1].append(word2) graph[word2].append(word1) visited = set() groups = [] def dfs(word): stack = [word] group = [] while stack: node = stack.pop() if node not in visited: visited.add(node) group.append(node) stack.extend(graph[node]) return group for word in words: if word not in visited: group = dfs(word) if group: groups.append(sorted(group)) return groups"},{"question":"Nina is experimenting with arrays in her coding class. She wants her students to learn about finding subsequences that meet certain criteria. She presents them with the following problem: Given an array of positive integers, find the length of the longest increasing subsequence (LIS) such that the sum of the elements in this subsequence is a prime number. An increasing subsequence is a subsequence where each element is greater than the previous one. A subsequence is formed by deleting any number of elements (including zero) from the array, keeping the remaining elements in their original order. Input Format The first line contains an integer, n, representing the number of elements in the array. The next line contains n space-separated integers representing the array elements. Constraints 1 leq n leq 1000 1 leq text{array element} leq 10^5 Output Format On a single line, print an integer representing the length of the longest increasing subsequence whose sum is a prime number. If no such subsequence exists, print 0. Sample Input 0 6 10 22 9 33 21 50 Sample Output 0 3 Sample Input 1 5 8 3 10 7 15 Sample Output 1 2 Explanation Sample 0 The given array is [10, 22, 9, 33, 21, 50]. One such subsequence with a prime sum is [10, 22, 33], and its length is 3. The sum is 65, which is not prime, so let\'s consider other subsequences. The subsequence [10, 22, 50] has a sum of 82, which is not prime. The subsequence [10, 21, 50] has a sum of 81, which is not prime. The longest subsequence with a prime sum is [22, 33], with the prime sum 55, but this is not prime. After evaluating, we find that the subsequence [10, 33] with a sum of 43 (which is prime) is the answer, thus giving length 2. Sample 1 The given array is [8, 3, 10, 7, 15]. Among possible increasing subsequences, the longest one with a prime sum is [8, 3] with a sum of 11. Therefore, the length is 2.","solution":"from itertools import combinations from math import isqrt def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, isqrt(num) + 1, 2): if num % i == 0: return False return True def longest_increasing_subsequence_with_prime_sum(arr): n = len(arr) lis_len = [1] * n lis_sum = [arr[i] for i in range(n)] max_len = 0 for i in range(1, n): for j in range(i): if arr[i] > arr[j]: if lis_len[i] < lis_len[j] + 1: lis_len[i] = lis_len[j] + 1 lis_sum[i] = lis_sum[j] + arr[i] if lis_len[i] > max_len and is_prime(lis_sum[i]): max_len = lis_len[i] return max_len # Wrapper function to read input and output result def find_lis_prime_length(n, array): result = longest_increasing_subsequence_with_prime_sum(array) return result"},{"question":"Consider the following problem: Fruit is being organized into baskets, each basket containing fruits of the same type. Given two lists, `fruits` and `baskets`, your task is to write a function `assignFruitsToBaskets(fruits, baskets)` that assigns each type of fruit in the `fruits` list to a unique basket in the `baskets` list, ensuring every basket contains only one type of fruit. For simplicity, you can assume: - The `fruits` list contains different types of fruits represented as strings. - The `baskets` list contains baskets represented as strings. - There are no duplicate types of fruits or baskets within their respective lists. - The number of fruits is equal to the number of baskets. The function should return a dictionary where the keys are basket names and the values are the fruits assigned to each basket. Examples: ```python assignFruitsToBaskets([\\"apple\\", \\"banana\\", \\"cherry\\"], [\\"basket1\\", \\"basket2\\", \\"basket3\\"]) # Could return: {\'basket1\': \'apple\', \'basket2\': \'banana\', \'basket3\': \'cherry\'} assignFruitsToBaskets([\\"orange\\", \\"grape\\", \\"mango\\"], [\\"basketA\\", \\"basketB\\", \\"basketC\\"]) # Could return: {\'basketA\': \'orange\', \'basketB\': \'grape\', \'basketC\': \'mango\'} ``` Note: Multiple valid outputs are possible as long as each fruit is assigned to a unique basket.","solution":"def assignFruitsToBaskets(fruits, baskets): Assigns each type of fruit in the `fruits` list to a unique basket in the `baskets` list. Parameters: fruits (list of str): List containing different types of fruits. baskets (list of str): List containing basket names. Returns: dict: A dictionary with basket names as keys and assigned fruits as values. return {basket: fruit for basket, fruit in zip(baskets, fruits)}"},{"question":"Given a list of integers, your task is to transform the list such that each element is replaced by the difference between the maximum and minimum element among the previous elements including itself (0 if no previous element). Your task is to compute the resultant list. Example 1: Input: nums = [3, 1, 4, 1, 5, 9, 2, 6] Output: [0, 2, 3, 3, 4, 8, 8, 8] Explanation: For nums[0]=3: Since it\'s the first element, the difference is 0. For nums[1]=1: max(3, 1) - min(3, 1) = 3 - 1 = 2. For nums[2]=4: max(3, 1, 4) - min(3, 1, 4) = 4 - 1 = 3. For nums[3]=1: max(3, 1, 4, 1) - min(3, 1, 4, 1) = 4 - 1 = 3. For nums[4]=5: max(3, 1, 4, 1, 5) - min(3, 1, 4, 1, 5) = 5 - 1 = 4. For nums[5]=9: max(3, 1, 4, 1, 5, 9) - min(3, 1, 4, 1, 5, 9) = 9 - 1 = 8. For nums[6]=2: max(3, 1, 4, 1, 5, 9, 2) - min(3, 1, 4, 1, 5, 9, 2) = 9 - 1 = 8. For nums[7]=6: max(3, 1, 4, 1, 5, 9, 2, 6) - min(3, 1, 4, 1, 5, 9, 2, 6) = 9 - 1 = 8. Example 2: Input: nums = [7, 6, 5, 4, 3] Output: [0, 1, 2, 3, 4] Explanation: For nums[0]=7: Since it\'s the first element, the difference is 0. For nums[1]=6: max(7, 6) - min(7, 6) = 7 - 6 = 1. For nums[2]=5: max(7, 6, 5) - min(7, 6, 5) = 7 - 5 = 2. For nums[3]=4: max(7, 6, 5, 4) - min(7, 6, 5, 4) = 7 - 4 = 3. For nums[4]=3: max(7, 6, 5, 4, 3) - min(7, 6, 5, 4, 3) = 7 - 3 = 4. Your Task: You don\'t need to read or print anything. Your task is to complete the function `transformList()` which takes the list `nums` as input parameter and returns the transformed list. Expected Time Complexity: O(n) Expected Space Complexity: O(1) (excluding input and output storage) Constraints: 1 ≤ len(nums) ≤ 100 1 ≤ nums[i] ≤ 100, where 0 ≤ i < len(nums)","solution":"def transformList(nums): Transforms the given list such that each element is replaced by the difference between the maximum and minimum element among the previous elements including itself (0 if no previous element). if not nums: return [] min_so_far = nums[0] max_so_far = nums[0] result = [0] for i in range(1, len(nums)): if nums[i] < min_so_far: min_so_far = nums[i] if nums[i] > max_so_far: max_so_far = nums[i] result.append(max_so_far - min_so_far) return result"},{"question":"You are given two strings, `s1` and `s2`. The goal is to determine whether `s1` can be transformed into `s2` by only deleting characters from the beginning and end of `s1`, and appending the same number of deleted characters to the beginning of `s2`. In other words, you need to check whether `s2` can be derived by rotating `s1`. For example, if `s1` is \\"abcdef\\" and `s2` is \\"defabc\\", then `s2` can be obtained from `s1` by deleting \\"abc\\" from the beginning of `s1` and appending it to its end. Write a function `can_transform(s1: str, s2: str) -> bool` which returns `true` if the transformation is possible, and `false` otherwise. -----Input----- Your function will receive two strings, `s1` and `s2` where 1 ≤ |s1|, |s2| ≤ 1000. -----Output----- Your function should return `true` if `s2` can be derived from `s1` as described, and `false` otherwise. -----Examples----- Input s1 = \\"abcde\\" s2 = \\"cdeab\\" Output: true Input s1 = \\"abcde\\" s2 = \\"abced\\" Output: false Input s1 = \\"rotation\\" s2 = \\"tionrota\\" Output: true Input s1 = \\"rotation\\" s2 = \\"tiontarot\\" Output: false -----Note----- 1. The transformation does not allow reordering characters, it strictly allows deleting characters from the beginning of `s1` and appending them to its end. 2. The strings `s1` and `s2` may contain any printable ASCII characters.","solution":"def can_transform(s1: str, s2: str) -> bool: Determines whether s1 can be transformed into s2 by performing the described rotation transformation. Args: s1 (str): The original string. s2 (str): The target string after rotation. Returns: bool: True if s2 can be derived from s1 using the rotation, False otherwise. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"You are given a pattern made up of two characters A and B. Your task is to determine if it is possible to rearrange the characters of the pattern such that all A\'s are grouped together and all B\'s are grouped together. Essentially, you\'re checking if it is possible to partition the string into at most two contiguous substrings, where one contains only \'A\'s and the other contains only \'B\'s. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing a string s. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if it is possible to rearrange the characters of the pattern as mentioned, otherwise print \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ |s| ≤ 100 String s contains only the characters \'A\' and \'B\'. ----- Sample Input 1 ------ 3 AABABB ABAB AAABB ----- Sample Output 1 ------ NO NO YES ----- Explanation 1 ------ Example case 1: \'AABABB\' cannot be rearranged to form two contiguous parts. Example case 2: \'ABAB\' cannot be rearranged to form two contiguous parts. Example case 3: \'AAABB\' can be rearranged to \'AAA\' and \'BB\'.","solution":"def is_possible_to_partition(s): Returns \\"YES\\" if it is possible to rearrange the characters of the string s such that all \'A\'s are grouped together and all \'B\'s are grouped together, otherwise returns \\"NO\\". if s.count(\'A\') == 0 or s.count(\'B\') == 0: return \\"YES\\" found_A = False found_B = False for char in s: if char == \'A\': if found_B: return \\"NO\\" found_A = True else: found_B = True return \\"YES\\" def solve(test_cases): results = [] for s in test_cases: results.append(is_possible_to_partition(s)) return results"},{"question":"Hong has a unique way of organizing events in his calendar. He likes to categorize each event by an importance score, and he also needs to make sure no two events overlap in time. Each event can have different start and end times, and Hong wants to attend as many events as possible without any schedule conflicts. Given a list of events, each defined by a start time, an end time, and an importance score, help Hong determine the maximum total importance score he can achieve by attending a subset of these events such that none of them overlap. Input The first line contains a positive integer n (1 ≤ n ≤ 1000), the number of events. The next n lines each contain three integers: si, ei, and wi (1 ≤ si < ei ≤ 10000, 1 ≤ wi ≤ 100), representing the start time, end time, and importance score of the ith event. Output Print a single integer representing the maximum total importance score Hong can achieve. Example Input 5 1 3 9 2 5 6 4 6 7 6 8 4 5 7 5 Output 20 Explanation There are five events. Hong can choose the first, third, and fifth events, gaining a total importance score of 9 + 7 + 4 = 20.","solution":"def max_importance(n, events): # Sort the events based on their end times events.sort(key=lambda x: x[1]) # Initialize dp array to store the maximum importance score up to each event dp = [0] * n dp[0] = events[0][2] # Function to find the latest event that doesn\'t conflict with the current one def find_non_conflicting(j): for i in range(j - 1, -1, -1): if events[i][1] <= events[j][0]: return i return -1 # Update the dp array for i in range(1, n): include = events[i][2] l = find_non_conflicting(i) if l != -1: include += dp[l] dp[i] = max(dp[i-1], include) return dp[-1] # Example used for illustration if __name__ == \\"__main__\\": input_data = [ (1, 3, 9), (2, 5, 6), (4, 6, 7), (6, 8, 4), (5, 7, 5) ] n = len(input_data) print(max_importance(n, input_data)) # Output should be 20"},{"question":"Given an array of integers representing the initial heights of grains in a series of silos, you are tasked with redistributing the grains across the silos such that the maximum difference in height between any two silos is minimized after redistribution. You are only allowed to move grains between adjacent silos in each step, and each transfer can only reduce the height difference between two adjacent silos by 1 unit. Input First line: An integer N representing the number of silos (1 leq N leq 1000). Second line: N space-separated integers representing the initial heights of the grains in each silo. Output Output a single integer representing the minimized maximum difference in height between any two silos after the redistribution. Example Input 5 4 10 8 6 2 Output 1 Explanation By redistributing the grains between adjacent silos as follows: Step 1: [4, 9, 8, 6, 3] Step 2: [5, 8, 8, 6, 3] Step 3: [5, 8, 7, 6, 4] Step 4: [5, 7, 7, 6, 5] Step 5: [6, 7, 6, 6, 5] The maximum difference in height between any two silos is minimized to 1.","solution":"def minimize_max_difference(N, heights): def possible(max_diff): water = heights[:] # copy of the heights for _ in range(max_diff * N): changed = False for i in range(1, N): if water[i] - water[i - 1] > max_diff: transfer = (water[i] - water[i - 1] - max_diff + 1) // 2 water[i] -= transfer water[i - 1] += transfer changed = True if not changed: return True return False low, high = 0, max(heights) - min(heights) while low < high: mid = (low + high) // 2 if possible(mid): high = mid else: low = mid + 1 return low # Example usage: N = 5 heights = [4, 10, 8, 6, 2] print(minimize_max_difference(N, heights)) # Output: 1"},{"question":"You are given a binary tree with N nodes labeled from 1 to N. Each node has a value associated with it. Your task is to find the length of the longest path in the tree such that the sum of the values of the nodes on that path is maximized. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of 3 lines of input. - The first line of each test case contains an integer N, the number of nodes in the tree. - The second line contains N space-separated integers X_{1}, X_{2}, ldots, X_{N} denoting the values of the nodes. - The third line contains N-1 pairs of space-separated integers u and v, denoting that there is an edge between node u and node v. ------ Output Format ------ For each test case, output a new line containing one integer — the length of the longest path for which the sum of the node values is maximized. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ X_{i} ≤ 100 1 ≤ u, v ≤ N u ne v ----- Sample Input 1 ------ 2 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 5 10 20 1 2 1 3 ----- Sample Output 1 ------ 3 2 ----- explanation 1 ------ Test Case 1: One optimal choice of path is 4 - 3 - 5. This path has a length of 3 and the sum of the values of the nodes is 4 + 3 + 5 = 12. Test Case 2: One optimal choice of path is 2 - 1 - 3. This path has a length of 2 and the sum of the values of the nodes is 10 + 5 + 20 = 35.","solution":"from collections import defaultdict, deque def longest_max_sum_path(N, node_values, edges): # Build adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Helper function for finding longest path using BFS def bfs(start_node): visited = [False] * (N + 1) max_distance = 0 max_node = start_node distance = {start_node: 0} queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbour in adj_list[node]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) distance[neighbour] = distance[node] + 1 if distance[neighbour] > max_distance: max_distance = distance[neighbour] max_node = neighbour return max_node, max_distance # First find any node with DFS/BFS (here using BFS) first_node = 1 farthest_node, _ = bfs(first_node) # Find the farthest node from \'farthest_node\' discovered in above step opposite_node, max_length = bfs(farthest_node) return max_length def longest_path_in_tree(T, test_cases): results = [] for test_case in test_cases: N = test_case[\'N\'] node_values = test_case[\'node_values\'] edges = test_case[\'edges\'] max_length = longest_max_sum_path(N, node_values, edges) results.append(max_length) return results # Function to parse the input and prepare the test cases def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) node_values = list(map(int, lines[idx + 1].split())) edges = [tuple(map(int, pair.split())) for pair in lines[idx + 2:idx + 2 + (N - 1)]] test_cases.append({\'N\': N, \'node_values\': node_values, \'edges\': edges}) idx += 2 + (N - 1) return T, test_cases # Function to parse output into a string def format_output(output): return \\"n\\".join(map(str, output))"},{"question":"A robotics company needs to manage a large fleet of drones. Each drone has a unique identifier and an initial energy level. There are several charging stations available, and each drone must occasionally dock at a station to charge its battery. You need to write a system to keep track of the drones and their interactions with the charging stations. Each drone can perform one of the following operations: 1. Move: The drone\'s energy level decreases by one unit. 2. Charge: The drone\'s energy level is increased to its maximum capacity if it docks at a charging station. Additionally, you must handle queries to determine the energy level of a specific drone at any given time. The program should support the following operations: - Initialize: Create a fleet of n drones, each with a specified maximum energy level. - Charge: A drone docks at a specific charging station and its energy level is restored to the maximum. - Move: A drone moves, decreasing its energy level by one unit. - Query: Get the current energy level of a specified drone. Input The first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of drones and the number of charging stations. The second line contains n integers, where the i-th integer represents the maximum energy level of the i-th drone. The next line contains an integer q (1 ≤ q ≤ 100 000) — the number of operations. Each of the following q lines describes an operation and can be one of the following: - \\"1 x\\": Move operation for the drone x. - \\"2 x\\": Charge operation for the drone x at a dock. - \\"3 x\\": Query operation for the drone x. Output For each query operation, output a single integer representing the current energy level of the specified drone. Example Input 5 2 10 20 15 10 5 7 1 2 1 3 2 3 3 3 1 1 3 1 3 4 Example Output 15 9 10 Note In the example: - Drone 2 moves once, decreasing its energy level to 19. - Drone 3 moves once, decreasing its energy level to 14. - Drone 3 charges, restoring its energy level to its maximum of 15. - Querying drone 3 after charging gives an energy level of 15. - Drone 1 moves once, decreasing its energy level to 9. - Querying drone 1 then gives an energy level of 9. - Querying drone 4 without any prior operations gives its initial energy level of 10.","solution":"class DroneFleet: def __init__(self, max_energy_levels): Initialize the fleet with given maximum energy levels. :param max_energy_levels: A list of integers representing the max energy level of each drone self.max_energy_levels = max_energy_levels self.current_energy_levels = max_energy_levels[:] def move(self, drone_id): Decrease the energy level of the specified drone by 1. :param drone_id: The ID of the drone to move (1-indexed) if self.current_energy_levels[drone_id - 1] > 0: self.current_energy_levels[drone_id - 1] -= 1 def charge(self, drone_id): Restore the energy level of the specified drone to its maximum capacity. :param drone_id: The ID of the drone to charge (1-indexed) self.current_energy_levels[drone_id - 1] = self.max_energy_levels[drone_id - 1] def query(self, drone_id): Get the current energy level of the specified drone. :param drone_id: The ID of the drone to query (1-indexed) :return: The current energy level of the specified drone return self.current_energy_levels[drone_id - 1] def handle_operations(n, m, max_energy_levels, operations): fleet = DroneFleet(max_energy_levels) results = [] for operation in operations: op_type, drone_id = operation if op_type == 1: fleet.move(drone_id) elif op_type == 2: fleet.charge(drone_id) elif op_type == 3: results.append(fleet.query(drone_id)) return results"},{"question":"You are a software engineer working on optimizing the performance of server log processing. The logs are collected continuously, and each log entry consists of a timestamp and a message. Your task is to write a program that processes a batch of log entries and outputs statistics about the logs, such as the total number of logs, the earliest and latest log timestamps, and the most frequent message. To make things more interesting, you need to process the logs in a way that ensures peak efficiency, as the log file sizes can be very large. -----Input----- The first line contains one integer n (1 le n le 10^6) — the number of log entries. The following n lines each contain two components: a timestamp t_i (a string in the format \'YYYY-MM-DD HH:MM:SS\') and a message m_i (a string consisting of lowercase letters and spaces, with length bounded by 100). It is guaranteed that the timestamps are distinct and properly formatted. -----Output----- Print three lines: 1. The total number of logs. 2. The earliest and latest log timestamps, separated by a single space. 3. The most frequent message. If there are multiple messages with the same highest frequency, output one of them (anyone will do). -----Example----- Input 5 2023-01-01 12:00:00 error in module 2023-01-01 12:05:00 user login 2023-01-01 12:10:00 error in module 2023-01-01 12:15:00 system shutdown 2023-01-01 12:20:00 error in module Output 5 2023-01-01 12:00:00 2023-01-01 12:20:00 error in module -----Explanation----- The total number of log entries is 5. The earliest log timestamp is \'2023-01-01 12:00:00\' and the latest timestamp is \'2023-01-01 12:20:00\'. The most frequent message is \'error in module\', which appears 3 times.","solution":"def process_logs(logs): Processes a batch of log entries and outputs statistics about the logs: - Total number of logs - Earliest and latest log timestamps - Most frequent message :param logs: List of tuples containing a timestamp and a message :return: Tuple containing total logs, a string with the earliest and latest timestamps, and the most frequent message if not logs: return (0, \\"\\", \\"\\") from collections import defaultdict from collections import Counter timestamps = [] messages = [] for log in logs: timestamp = log[0] message = log[1] timestamps.append(timestamp) messages.append(message) earliest_timestamp = min(timestamps) latest_timestamp = max(timestamps) message_counter = Counter(messages) most_frequent_message = max(message_counter, key=message_counter.get) return (len(logs), f\'{earliest_timestamp} {latest_timestamp}\', most_frequent_message)"},{"question":"You are given an array text{A} of size text{N}. You are asked to answer text{Q} queries. Each query contains two integers text{L} and text{R}. For each query, you need to find the product of all the prime numbers in the subarray text{A}[L...R]. As the product can be very large, output the result modulo text{P}, which is a prime and given in input. Function Signature: ``` def find_prime_product_modulo(L, R, arr, primes_set, P): # To be implemented pass ``` Input Format The first line of input contains text{P}. The second line of input contains text{N} followed by an array of text{N} numbers separated by single spaces. The next line contains text{Q}, the number of queries to follow. Each subsequent line contains two positive integers text{L} and text{R}. Output Format For each query, output the product modulo text{P}. Constraints 2 leq Pleq2000003 1 leq N leq10^5 1 leq Q leq10^5 1 leq A[i], L, R leq10^9 Sample Input 2000003 6 2 3 6 7 5 4 3 2 5 1 3 3 6 Sample Output 210 6 35 Explanation Query 1: The subarray is [3, 6, 7, 5]. The primes in this subarray are [3, 7, 5]. Their product is 3 * 7 * 5 = 105. Query 2: The subarray is [2, 3, 6]. The primes in this subarray are [2, 3]. Their product is 2 * 3 = 6. Query 3: The subarray is [6, 7, 5, 4]. The primes in this subarray are [7, 5]. Their product is 7 * 5 = 35.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_prime_product_modulo(L, R, arr, primes_set, P): product = 1 for i in range(L-1, R): if arr[i] in primes_set: product = (product * arr[i]) % P return product # Preprocessing function to determine prime elements in array def find_primes_in_array(arr): primes_set = set() for num in arr: if is_prime(num): primes_set.add(num) return primes_set # Example usage P = 2000003 N = 6 arr = [2, 3, 6, 7, 5, 4] Q = 3 queries = [(2, 5), (1, 3), (3, 6)] primes_set = find_primes_in_array(arr) results = [] for L, R in queries: results.append(find_prime_product_modulo(L, R, arr, primes_set, P)) for result in results: print(result)"},{"question":"In a fictional country Xland, there are N mountain peaks that need to be connected by hiking trails. Each peak i has an altitude Ai. The environmental committee of Xland wants to construct these trails such that each peak is directly linked to another peak by a trail or can be reached via other peaks. The effort required to build a trail between two peaks i and j is abs(Ai - Aj) where abs denotes absolute value. The total effort to construct the hiking trail network is the sum of efforts for all individual trails used. Your task is to help the committee determine the minimum total effort needed to connect all the peaks in Xland. -----Input----- The first line of input contains an integer T, representing the number of test cases. Each test case consists of two lines: The first line has an integer N, representing the number of peaks. The second line contains N space-separated integers Ai, representing the altitudes of the peaks. -----Output----- For each test case, print a single integer, the minimum total effort required to connect all the peaks. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ Ai ≤ 106 -----Example----- Input: 2 3 1 3 6 4 6 2 8 4 Output: 5 6","solution":"def minimum_total_effort(T, test_cases): results = [] for case in test_cases: N, A = case A.sort() min_effort = sum(A[i+1] - A[i] for i in range(N-1)) results.append(min_effort) return results # Example usage T = 2 test_cases = [ (3, [1, 3, 6]), (4, [6, 2, 8, 4]) ] print(minimum_total_effort(T, test_cases)) # Output should be [5, 6]"},{"question":"You are given a string S. A substring of string S is defined as any continuous sequence of characters within S. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". SSH (Safe Substring Habitat) is a special type of substring of S which satisfies the following conditions: 1. The substring starts and ends with the same character. 2. The length of the substring is at least 2. Your task is to determine the number of SSH substrings in the given string S. ------ Input ------ The input consists of a single line containing a string S of length n, where 1 ≤ n ≤ 100. ------ Output ------ Output the number of SSH substrings in the string S. ------ Constraints ------ - S consists of lowercase English letters (\'a\'-\'z\'). ----- Sample Input 1 ------ abcba ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ The SSH substrings in \\"abcba\\" are: - \\"bcb\\": starting and ending with \'b\' - \\"abcba\\": starting and ending with \'a\'","solution":"def count_ssh_substrings(S): Returns the number of SSH substrings in the string S. count = 0 n = len(S) for start in range(n): for end in range(start + 1, n): if S[start] == S[end]: count += 1 return count"},{"question":"Jacob has been given a new project to handle as a software engineer. His supervisor has asked him to develop a system that processes batches of data. Each batch contains multiple jobs that need to be executed in a specific order based on their dependency. Some jobs can only be executed after certain other jobs have been completed. Jacob needs to determine if all the jobs in a batch can be completed given their dependencies, and if possible, provide an order of execution. A batch is described by two parameters: - The number of jobs, `J` (1 leq J leq 100) - The number of dependencies, `D` (0 leq D leq 5000) Each dependency is described by a pair of integers `u` and `v` (1 leq u, v leq J), indicating that job `u` must be completed before job `v`. Jacob needs to write a program to determine whether it\'s possible to complete all jobs in a given batch and if so, output an order in which the jobs can be completed. -----Input----- The first line contains two space-separated integers `J` and `D`. Each of the next `D` lines contains two space-separated integers `u` and `v` indicating that job `u` must be completed before job `v`. -----Output----- If it is possible to execute all the jobs in the batch, print a single line containing the jobs in the order they need to be executed. If there are multiple valid orders, any one of them is acceptable. If it is not possible to complete all the jobs, output \\"Impossible\\". -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 1 Sample Output 1: Impossible Sample Input 2: 6 6 1 2 1 3 3 4 2 5 5 6 4 6 Sample Output 2: 1 2 3 5 4 6","solution":"from collections import defaultdict, deque def find_job_order(J, D, dependencies): # Create adjacency list and in-degree count adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, J + 1)} # Build the graph for u, v in dependencies: adj_list[u].append(v) in_degree[v] += 1 # Use queue for 0 in-degree nodes process_queue = deque([node for node in in_degree if in_degree[node] == 0]) result = [] while process_queue: node = process_queue.popleft() result.append(node) for neighbor in adj_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: process_queue.append(neighbor) # If all nodes are processed, return the result if len(result) == J: return result else: return \\"Impossible\\""},{"question":"Compute the Sum of Primes DESCRIPTION: Given a number `N`, write a program that calculates the sum of all prime numbers less than or equal to `N`. ASSUMPTIONS: - The input number is always a non-negative integer. - The number `2` is considered the smallest prime number. INPUT: The first and only line contains an integer `N`. OUTPUT: Print the sum of all prime numbers less than or equal to `N`. CONSTRAINTS: 0 ≤ N ≤ 10^4 EXAMPLES: SAMPLE INPUT 1: 10 SAMPLE OUTPUT 1: 17 SAMPLE INPUT 2: 20 SAMPLE OUTPUT 2: 77 SAMPLE INPUT 3: 0 SAMPLE OUTPUT 3: 0 SAMPLE INPUT 4: 2 SAMPLE OUTPUT 4: 2","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return sum(i for i in range(n + 1) if sieve[i])"},{"question":"Peter is fascinated with numbers and patterns. He loves to generate sequences based on simple mathematical rules. Recently, he has come up with a new sequence which he calls the \\"Incremental Sum Sequence\\". The sequence is formed by taking the sum of elements of an initial array and appending it to the original array, repeatedly. Here\'s the detailed process for generating the sequence: 1. Start with an initial array of `n` non-negative integers. 2. Calculate the sum of the current array. 3. Append this sum to the end of the current array. 4. Repeat steps 2 and 3 a total of `m` times. Your task is to compute the final state of the array after `m` increments. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the initial size of the array and the number of increments to be performed. The second line contains `n` non-negative integers, each element of the initial array (0 ≤ each element ≤ 100). -----Output----- Print the final state of the array after `m` increments. -----Examples----- Input 3 2 1 2 3 Output 1 2 3 6 12 Input 1 5 5 Output 5 5 10 20 40 80 Input 4 1 0 0 0 0 Output 0 0 0 0 0 -----Note----- In the first example, the initial array is [1, 2, 3]. After the first increment, the sum of the elements is 6, so the array becomes [1, 2, 3, 6]. After the second increment, the sum of the new array\'s elements is 12, making the final array [1, 2, 3, 6, 12]. In the second example, the initial array is [5]. After each of the five increments, the array changes as follows: [5], [5, 5], [5, 5, 10], [5, 5, 10, 20], [5, 5, 10, 20, 40], [5, 5, 10, 20, 40, 80]. In the third example, since all elements are zero initially, the sum remains zero after each increment.","solution":"def incremental_sum_sequence(n, m, arr): Generates the Incremental Sum Sequence. Parameters: n (int): Initial size of the array m (int): Number of increments to be performed arr (list): Initial array of non-negative integers Returns: list: Final state of the array after m increments for _ in range(m): arr.append(sum(arr)) return arr"},{"question":"FireballWizard has recently discovered a magical artifact: n strings of length m consisting of lowercase English letters. FireballWizard can perform an operation where he chooses any two strings and swaps two characters at any positions in these strings. FireballWizard\'s goal is to transform all strings so that they are anagrams of each other. He needs your help to determine if this transformation is possible, and if so, output the minimum number of operations needed. Please note that swapping characters between the same positions across different strings does not count as a distinct operation. -----Input----- The first line of the input contains a single integer t (1 leq t leq 1000) — the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and m (2 leq n leq 100, 1 leq m leq 100). The i-th of the following n lines contains a string s_i of length m — the i-th string. It is guaranteed that the sum of n cdot m over all test cases does not exceed 10^6. -----Output----- For each test case, if the objective is not achievable, output -1. Otherwise, in the first line output k (0 le k < nm) — the minimum number of operations required. The i-th of the following k lines should contain 4 integers, x_i, y_i, z_i, w_i (1 le x_i, y_i le n, 1 le z_i, w_i le m), which describe an operation that swaps the z_i-th character of the x_i-th string with the w_i-th character of the y_i-th string. -----Examples----- Input 2 3 3 abc cab bca 2 4 abcd abef Output 2 1 2 1 3 2 3 1 2 -1 -----Note----- In the first test case, two operations are enough: 1. Swap the 1st character of the 1st string with the 3rd character of the 2nd string. The strings become \\"cbc\\", \\"aab\\", \\"bca\\". 2. Swap the 2nd character of the 2nd string with the 1st character of the 3rd string. The strings become \\"cbc\\", \\"baa\\", \\"bca\\". After these operations, the strings are not yet anagrams, but no additional sequence of swaps achieves the goal within the constraints provided. Therefore, this example solution needs another attempt to find the exact sequences with minimal operations.","solution":"def transform_to_anagrams(test_cases): result = [] for t in test_cases: n, m, strings = t # Count frequency of each character in all strings char_count = [0] * 26 for s in strings: for char in s: char_count[ord(char) - ord(\'a\')] += 1 # Check if it\'s possible to make all strings anagrams for count in char_count: if count % n != 0: result.append(-1) break else: # It\'s possible to transform them into anagrams. operations = [] # List to record the operations # Let\'s use a simplified approach to decide swaps # This is just an illustrative way to count the number of swaps # Not necessarily optimal # Find target frequency target_freq = [count // n for count in char_count] # Calculate the excess characters in each string excess_chars = [[0] * 26 for _ in range(n)] for i in range(n): for char in strings[i]: excess_chars[i][ord(char) - ord(\'a\')] += 1 for j in range(26): for i in range(n): while excess_chars[i][j] > target_freq[j]: # Find a string that needs this char for k in range(n): if excess_chars[k][j] < target_freq[j]: # Conduct a swap. In actual implementation we\'d swap the specific positions operations.append((i + 1, k + 1, j + 1)) excess_chars[i][j] -= 1 excess_chars[k][j] += 1 break result.append((len(operations), operations)) return result # Example execution example_test_cases = [ (3, 3, [\\"abc\\", \\"cab\\", \\"bca\\"]), (2, 4, [\\"abcd\\", \\"abef\\"]), ] print(transform_to_anagrams(example_test_cases))"},{"question":"Given an array of integers, find the length of the longest subsequence that is strictly increasing. Write a function that takes an array of integers and returns the length of the longest strictly increasing subsequence. You may assume that all elements in the array are distinct. Constraints * 1 leq arr.length leq 1000 * -10^4 leq arr[i] leq 10^4 Input An array of integers. Output Print the length of the longest strictly increasing subsequence. Example Input [10, 9, 2, 5, 3, 7, 101, 18] Output 4 Explanation The longest increasing subsequence is [2, 3, 7, 101], so the output is 4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes to 1 # Compute optimized LIS values in a bottom up manner for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Return maximum value in lis[] return max(lis)"},{"question":"You have a list of athletes, where each athlete has participated in multiple events with varying results. Your task is to calculate the total score for each athlete based on their results. The scoring rule is as follows: - 10 points for each First-place finish - 5 points for each Second-place finish - 2 points for each Third-place finish - No points for other finishes ------ Input Format ------ The first line contains a single integer T, the number of athletes. T athletes\' data follow. Each athlete\'s data consists of one line containing three integers separated by spaces: - The first integer is the number of First-place finishes. - The second integer is the number of Second-place finishes. - The third integer is the number of Third-place finishes. ------ Output Format ------ The output must consist of T lines. The i^{th} line should be a single integer: the total score for the i^{th} athlete. ------ Constraints ------ 1 ≤ T ≤ 10 0 ≤ Number of First-place finishes, Second-place finishes, Third-place finishes ≤ 20 ----- Sample Input 1 ------ 3 4 2 1 5 3 2 0 0 0 ----- Sample Output 1 ------ 57 71 0 ----- Explanation 1 ------ Test case 1: The total score is obtained as follows - 4 times 10 (for First-place) + 2 times 5 (for Second-place) + 1 times 2 (for Third-place) = 40 + 10 + 2 = 52. Test case 2: The total score is obtained as follows - 5 times 10 (for First-place) + 3 times 5 (for Second-place) + 2 times 2 (for Third-place) = 50 + 15 + 4 = 69. Test case 3: No points are awarded because the athlete has no First-place, Second-place, or Third-place finishes = 0.","solution":"def calculate_scores(athletes_data): Calculate total scores for each athlete based on their finishes. :param athletes_data: List of tuples where each tuple contains three integers: (num_first_place, num_second_place, num_third_place) :return: List containing the total score for each athlete. scores = [] for data in athletes_data: num_first_place, num_second_place, num_third_place = data score = (num_first_place * 10) + (num_second_place * 5) + (num_third_place * 2) scores.append(score) return scores"},{"question":"Alice is a software engineer who loves solving puzzles in her free time. One type of puzzle she enjoys involves arranging numbers to form magic squares. A magic square is a grid of numbers such that the sum of every row, column, and both main diagonals are the same. Alice decides to write a program to verify if a given grid is a magic square. -----Input----- The input consists of three lines, each containing three integers. Each integer is in the range from -1000 to 1000. These lines represent the rows of a 3x3 grid. -----Output----- Print \'Magic Square\' if the grid forms a magic square, and \'Not a Magic Square\' otherwise. -----Examples----- Sample Input 1: 2 7 6 9 5 1 4 3 8 Sample Output 1: Magic Square Sample Input 2: 3 5 7 8 1 6 4 9 2 Sample Output 2: Not a Magic Square","solution":"def is_magic_square(grid): Verify if the given 3x3 grid forms a magic square. Args: grid: List of lists, representing the 3x3 grid. Each list contains 3 integers, each integer in the range from -1000 to 1000. Returns: str: \'Magic Square\' if the grid forms a magic square, \'Not a Magic Square\' otherwise. if not all(len(row) == 3 for row in grid) or len(grid) != 3: return \'Not a Magic Square\' # Calculate the magic sum using the first row magic_sum = sum(grid[0]) # Check rows and columns sums for i in range(3): if sum(grid[i]) != magic_sum or sum(row[i] for row in grid) != magic_sum: return \'Not a Magic Square\' # Check diagonals sum if (grid[0][0] + grid[1][1] + grid[2][2] != magic_sum or grid[0][2] + grid[1][1] + grid[2][0] != magic_sum): return \'Not a Magic Square\' return \'Magic Square\'"},{"question":"Read problem statements in [English], [Spanish], [French], and [Japanese] as well. There are N customers in a line to buy concert tickets. The line is represented by an integer array C of length N; for each valid i, the i-th element of C denotes the number of tickets the i-th customer wants to buy. The ticket counter can only serve one customer at a time, and once a customer starts buying tickets, they buy the entire quantity they want, one ticket at a time, without interruption. You need to determine the total number of tickets to be sold after processing all the customers in the line. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers C_1, C_2, dots, C_N. ------ Output ------ For each test case, print a single line containing one integer ― the total number of tickets to be sold. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} ------ Subtasks ------ Subtask #1 (100 points): original constraints ------ Sample Input 1 ------ 3 3 1 2 3 4 0 0 0 0 5 5 5 5 5 5 ------ Sample Output 1 ------ 6 0 25 ----- explanation 1 ------ Example case 1: The customers want to buy a total of 1 + 2 + 3 = 6 tickets. Example case 2: All the customers want 0 tickets, so no tickets will be sold. Example case 3: Each of the 5 customers wants 5 tickets, so the total number of tickets to be sold is 5 + 5 + 5 + 5 + 5 = 25.","solution":"def total_tickets_sold(T, test_cases): Calculate the total number of tickets to be sold for each test case. :param T: int - number of test cases :param test_cases: list of tuples, each contains: - an int N (number of customers) - a list C of length N (number of tickets each customer wants to buy) :return: list of int - total tickets to be sold for each test case results = [] for test_case in test_cases: N, C = test_case total_tickets = sum(C) results.append(total_tickets) return results"},{"question":"You are given a sequence of integers a1, a2, ..., an. You have to process q queries of the following type: Given a subarray a[l:r] (1 ≤ l ≤ r ≤ n), determine the sum of the elements in this subarray. Input The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) – the number of elements in the sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) – the elements of the sequence. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) – the boundaries of the subarray to query. Output For each query, print the sum of elements in the subarray a[l:r]. Examples Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 6 9 15","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def query_sum(prefix_sum, l, r): Returns the sum of the subarray arr[l:r]. return prefix_sum[r] - prefix_sum[l - 1]"},{"question":"Joe loves playing with arrays. One day, he designed a new game called \\"Array Jump.\\" The game works as follows: 1. Joe has an array of integers. Each integer represents the maximum number of steps Joe can jump forward from that position. 2. Joe starts at the first element of the array (index 0). 3. Joe\'s goal is to reach the last element of the array (or beyond). Write a function that determines if Joe can reach the last element of the array. # Function Signature The function should be named `can_reach_end` and have the following signature: ```python def can_reach_end(arr: List[int]) -> bool: ``` # Input - arr: A list of non-negative integers, where each integer indicates the maximum number of steps that can be taken from that position. # Output - Returns a boolean value `True` if Joe can reach the end of the array (or beyond), otherwise returns `False`. # Examples ```python can_reach_end([2, 3, 1, 1, 4]) # Output: True ``` Joe can jump to index 1 (2 steps forward), then to index 4 (3 steps forward), and he is already at the end of the array. ```python can_reach_end([3, 2, 1, 0, 4]) # Output: False ``` Joe can jump to index 1 or 2, but at index 3, he can’t move forward anymore because the maximum steps he can take from there is 0. Thus, he can\'t reach the end of the array. # Constraints - The length of the array will be at least 1. - Each element in the array is a non-negative integer not greater than 100.","solution":"from typing import List def can_reach_end(arr: List[int]) -> bool: Determines if Joe can reach the last element of the array (or beyond). Parameters: - arr: A list of non-negative integers, where each integer indicates the maximum number of steps that can be taken from that position. Returns: - True if Joe can reach the end of the array (or beyond), otherwise False. max_reach = 0 n = len(arr) for i in range(n): if i > max_reach: return False max_reach = max(max_reach, i + arr[i]) if max_reach >= n - 1: return True return False"},{"question":"Paul and Mary love collecting rare coins. For a special occasion, they have come across a long strip of land that has several rare coins placed sequentially along it. However, they want to collect these coins in a unique manner. Each coin has a value attached to it, and they want to ensure that each one ends up with the maximum possible sum of values, but with one constraint: they cannot pick two adjacent coins. Determine the maximum total value that Paul and Mary can collectively gather from the strip of land without picking two adjacent coins. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of coins in the strip. The second line contains n integers v_1, v_2, ..., v_{n} (1 ≤ v_{i} ≤ 1000), where v_{i} is the value of the i-th coin. -----Output----- In a single line, print the maximum value they can collectively gather without picking two adjacent coins. -----Examples----- Input 5 2 4 6 2 5 Output 13 Input 4 3 2 5 10 Output 13 -----Note----- In the first test sample Paul and Mary can collectively gather coins with values 2, 6 and 5 (2 + 6 + 5 = 13). In the second test sample Paul and Mary can collectively gather coins with values 3 and 10 (3 + 10 = 13).","solution":"def max_non_adjacent_sum(values): Returns the maximum sum of non-adjacent elements in the list \'values\'. if not values: return 0 n = len(values) if n == 1: return values[0] dp = [0] * n dp[0] = values[0] dp[1] = max(values[0], values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + values[i]) return dp[-1]"},{"question":"You are given a string that represents a mathematical expression containing positive integers and the operators + and -. Write a function to evaluate this expression and return the result. The operators are applied left-to-right, ignoring traditional operator precedence. - The input string will always be valid, containing positive integers and operators only. - No parentheses or other operators will be included. Examples ```python evaluate_expression(\\"3+5-2\\") == 6 # (3 + 5) - 2 evaluate_expression(\\"10+20-30+40\\") == 40 # ((10 + 20) - 30) + 40 evaluate_expression(\\"1+2+3+4-5\\") == 5 # (((1 + 2) + 3) + 4) - 5 evaluate_expression(\\"100\\") == 100 # single number, no operators to evaluate ``` Note Consider the input as a series of operations applied sequentially from left to right.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing positive integers and the operators + and -. Parameters: expression (str): A string representing the mathematical expression. Returns: int: The result of evaluating the expression. tokens = expression.split() result = 0 num = \\"\\" sign = 1 for char in expression: if char.isdigit(): num += char else: if num: result += sign * int(num) if char == \'+\': sign = 1 elif char == \'-\': sign = -1 num = \\"\\" if num: result += sign * int(num) return result"},{"question":"Given a list of integers representing the heights of trees in a forest, find the minimum number of trees that need to be cut down so that every remaining tree forms a strictly increasing sequence in height from left to right. If it\'s impossible, return -1. Input format: The first line of input contains a single integer n, the number of trees. The second line of input contains n integers, where the i-th integer represents the height of the i-th tree. Output format: A single integer, the minimum number of trees to cut down, or -1 if forming a strictly increasing sequence is not possible. Constraints: 1 ≤ n ≤ 10^5 1 ≤ height of each tree ≤ 10^9 Example 1: Input: 5 3 4 2 6 1 Output: 2 Explanation: By cutting down the trees with heights 2 and 1, the remaining trees\' heights are [3, 4, 6], which form a strictly increasing sequence. Example 2: Input: 3 5 4 3 Output: -1 Explanation: No matter which trees are cut down, it\'s not possible to form a strictly increasing sequence, so the output is -1.","solution":"def min_trees_to_cut(n, heights): Returns the minimum number of trees to cut down to form a strictly increasing sequence. If it\'s impossible, returns -1. if n == 0: return -1 # Helper function to find the length of the Longest Increasing Subsequence (LIS) def LIS(arr): import bisect lis = [] for x in arr: pos = bisect.bisect_left(lis, x) if pos < len(lis): lis[pos] = x else: lis.append(x) return len(lis) # Calculate the length of the longest increasing subsequence lis_length = LIS(heights) if lis_length == n: # No trees need to be cut return 0 elif lis_length < 2: # If LIS length is less than 2, we cannot form a strictly increasing sequence return -1 else: # Minimum cuts needed = Total trees - Length of LIS return n - lis_length"},{"question":"The language processing of a sequence of words involves checking if the sequence follows a specific pattern. A word sequence matches a given pattern if the first word of the sequence is replaced by the first character of the pattern, the second word by the second character of the pattern, and so on with each character in the pattern corresponding to a distinct word. Write a function `wordPattern` that takes a string `pattern` and a string `s`, and returns true if `s` follows the same pattern. Example 1: Input: pattern = \\"abba\\", s = \\"dog cat cat dog\\" Output: true Example 2: Input: pattern = \\"abba\\", s = \\"dog cat cat fish\\" Output: false Example 3: Input: pattern = \\"aaaa\\", s = \\"dog dog dog dog\\" Output: true Example 4: Input: pattern = \\"abba\\", s = \\"dog dog dog dog\\" Output: false Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `wordPattern(pattern, s)` that takes a string `pattern` and a string `s`, and returns a boolean value indicating whether the sequence of words in `s` follows the `pattern`. Expected Time Complexity: O(N), where N is the length of the string `s`. Expected Auxiliary Space: O(M), where M is the number of unique characters in `pattern`. Constraints: 1 ≤ pattern.length ≤ 50 1 ≤ s.length ≤ 1000 The `s` contains no leading or trailing spaces. All the words in `s` are separated by a single space.","solution":"def wordPattern(pattern, s): words = s.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False if word in word_to_char: if word_to_char[word] != char: return False char_to_word[char] = word word_to_char[word] = char return True"},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to determine the length of the longest subsequence of s such that the ASCII values of the characters in this subsequence strictly increase by one. For example, in the string \\"abczab\\", the longest subsequence with strictly increasing ASCII values is \\"abc\\". Note that a subsequence is a sequence that appears in the same relative order but not necessarily consecutively. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n. Output Print a single integer — the length of the longest subsequence with strictly increasing ASCII values. Examples Input 7 abcdefg Output 7 Input 6 abcbad Output 3 Note In the first example, the entire string \\"abcdefg\\" is a subsequence where each character has an ASCII value one greater than the previous character. In the second example, one possible longest subsequence with strictly increasing ASCII values is \\"abc\\".","solution":"def longest_increasing_subsequence(s): Determine the length of the longest subsequence where the ASCII values of the characters strictly increase by one. max_len = 1 # minimum length for the subsequence current_len = 1 for i in range(1, len(s)): # If the current character\'s ASCII value is exactly one more than the previous character\'s if ord(s[i]) - ord(s[i-1]) == 1: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Problem II: Village Festival Lighting Every year, the village of LitVille holds an annual festival where they decorate the entire village with beautiful strings of lights. The village square where the festival takes place is a rectangular grid with specified dimensions (length and width). The villagers place vertical and horizontal strings of lights, which must start and end on the grid points. Lights can\'t overlap, but they can touch at the grid points. Given the dimensions of the grid, the villagers want to find a way to maximize the number of strings of lights without any overlaps. Your task is to write a program to determine the maximum number of vertical and horizontal strings of lights that can be placed on the given grid. Input The input consists of a single dataset formatted as follows: L W L (1 ≤ L ≤ 50) is the length of the grid, and W (1 ≤ W ≤ 50) is the width of the grid. Both are integers. Output Output the maximum number of non-overlapping vertical and horizontal strings of lights that can be placed on the grid. Example Input 5 3 Example Output 8 Explanation In a grid of length 5 and width 3, the villagers can place up to 8 strings of lights as follows: - 3 vertical strings of lights placed at positions (1, 1) to (5, 1), (1, 2) to (5, 2), and (1, 3) to (5, 3). - 5 horizontal strings of lights placed at positions (1, 1) to (1, 3), (2, 1) to (2, 3), (3, 1) to (3, 3), (4, 1) to (4, 3), and (5, 1) to (5, 3). Note: Ensure the strings of lights do not overlap but can share common grid points where they intersect.","solution":"def max_lights(L, W): Returns the maximum number of non-overlapping vertical and horizontal strings of lights. L: int - Length of the grid W: int - Width of the grid The maximum number of lights that can be placed is the sum of the length and the width of the grid. return L + W"},{"question":"In a far-off realm devoid of digital marvels, there lies a kingdom suffering from inefficient communication lines between its towns. Towns are represented as nodes, and communication lines as edges between these nodes in an undirected graph. To enhance communication, the kingdom has decreed to turn the existing communication network into a tree, ensuring that there\'s exactly one simple path between any pair of towns. Given the number of towns and the existing communication lines: - Find a subset of the edges that will form a tree. As trees have n-1 edges for n nodes, you must ensure that the resulting subset of edges satisfies this property and that there is no cycle in the final structure. Your task is to determine whether it\'s possible to turn the network into a tree. If it is possible, print the edges of the tree; if not, state that it is impossible. -----Input----- The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5) — the number of towns and the number of communication lines in the kingdom. Each of the next m lines contains two space-separated integers u and v (1 le u,v le n, u neq v) that signify there\'s a communication line between towns u and v. It is guaranteed that there are no multiple edges between any pair of nodes. -----Output----- If it\'s possible to turn the network into a tree, print \\"Possible\\", followed by the n-1 lines, each containing two integers u and v representing the edges in the tree. If it\'s not possible, print \\"Impossible\\". -----Examples----- Input: 4 3 1 2 2 3 3 4 Output: Possible 1 2 2 3 3 4 Input: 4 4 1 2 2 3 3 4 4 1 Output: Possible 1 2 2 3 3 4 Input: 5 3 1 2 2 3 3 4 Output: Impossible","solution":"def find_tree(n, m, edges): if n - 1 > m: return \\"Impossible\\" parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False tree_edges = [] for u, v in edges: if union(u, v): tree_edges.append((u, v)) if len(tree_edges) == n - 1: result = \\"Possiblen\\" result += \\"n\\".join(f\\"{u} {v}\\" for u, v in tree_edges) return result else: return \\"Impossible\\""},{"question":"Geek loves to play with strings. He has a string S consisting of lowercase English letters. He can perform the following operation any number of times: - Choose any substring of S, sort it in non-decreasing order and replace the substring with its sorted version in S. He wants to know the lexicographically smallest string he can obtain from S by performing the above operation any number of times. Write a function `getLexicographicallySmallestString()` that takes string S as a parameter and returns the lexicographically smallest string formed. Example 1: Input: S = \\"dcba\\" Output: \\"abcd\\" Explanation: Geek can choose the entire string and sort it to get \\"abcd\\". Example 2: Input: S = \\"bca\\" Output: \\"abc\\" Explanation: Geek can choose the entire string and sort it to get \\"abc\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `getLexicographicallySmallestString()` which takes the string S as input and returns the lexicographically smallest possible string. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^6","solution":"def getLexicographicallySmallestString(S): Returns the lexicographically smallest string that can be formed by sorting any substrings of S. # The lexicographically smallest string is simply the sorted version of S. return \'\'.join(sorted(S))"},{"question":"You are given a string containing a mix of lowercase letters, uppercase letters, and numerical digits. The task is to reorder the string such that all lowercase letters come first, followed by uppercase letters and finally numerical digits. Additionally, within each category, the characters should retain their original relative order. For example, given the input string \\"a1B2cD3\\", the reordered string would be \\"acBD123\\". Function Description Complete the reorderString function below. It should return the reordered string. reorderString has the following parameter: - s: a string containing lowercase letters, uppercase letters, and numerical digits Input Format A single line containing the string s. Constraints - 1 leq |s| leq 1000 - s contains only lowercase and uppercase letters and numerical digits. Output Format Return the reordered string where lowercase letters come first, followed by uppercase letters, and then numerical digits, preserving the relative order. Sample Input a1B2cD3 Sample Output acBD123 Explanation The reordered string is constructed by: - Extracting all lowercase letters \\"ac\\". - Extracting all uppercase letters \\"BD\\". - Extracting all numerical digits \\"123\\". - Concatenating the categories in the specified order to form \\"acBD123\\". Function Signature ```python def reorderString(s: str) -> str: # complete the function here ```","solution":"def reorderString(s: str) -> str: Reorders the string such that all lowercase letters come first, followed by uppercase letters, and then numerical digits, preserving the relative order within each category. :param s: A string containing lowercase letters, uppercase letters, and digits. :return: A reordered string based on the specified criteria. lower = [] upper = [] digits = [] for char in s: if char.islower(): lower.append(char) elif char.isupper(): upper.append(char) elif char.isdigit(): digits.append(char) return \'\'.join(lower + upper + digits)"},{"question":"Forests are an important part of the global ecosystem. You have been hired by a conservation group to help monitor and record tree species in various forest regions. Each region is represented as a grid, where each cell can either contain a tree of a certain species or be empty. Your task is to count the number of distinct tree species appearing in a region and identify the species that has the maximum number of individual trees present in that region. All regions will be rectangular, and species will be represented as integers. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input begins with a line with two space-separated integers r (1 le r le 1000) and c (1 le c le 1000), where r is the number of rows in the grid, and c is the number of columns in the grid. The next r lines each contain c space-separated integers, each of which is either a positive integer representing a tree species, or zero representing an empty cell. -----Output----- Output two integers. The first integer is the number of distinct tree species in the region. The second integer is the species that has the maximum number of individual trees. If there are multiple species that have the same maximum number of trees, output the smallest integer among those species. -----Examples----- Sample Input 1: 3 4 1 0 2 0 3 1 2 0 0 3 0 0 Sample Output 1: 3 1 Sample Input 2: 2 3 1 1 1 2 2 3 Sample Output 2: 3 1","solution":"def analyze_forest(r, c, grid): species_count = {} for row in grid: for tree in row: if tree != 0: if tree not in species_count: species_count[tree] = 0 species_count[tree] += 1 if not species_count: return 0, 0 max_count = max(species_count.values()) max_species = min(tree for tree, count in species_count.items() if count == max_count) return len(species_count), max_species"},{"question":"The Tournament In a knockout tournament, players are paired up to compete in rounds. The winner from each pair advances to the next round, and this continues until only one player remains. Given a list of players and the results of each match, determine who the champion is. Each match result is provided as two player names followed by the winner\'s name. The players in each match form a pair, such as [\\"Alice\\", \\"Bob\\", \\"Alice\\"], meaning Alice and Bob competed, and Alice won. The input is given as a series of such match results until only one player (the champion) remains. Input The input consists of multiple lines. Each line represents a match result formatted as \\"Player1 Player2 Winner\\". The sequence of lines denotes the results of successive rounds of the tournament. The input ends and should be processed until the end of file (EOF). Output The output consists of a single line: the name of the tournament champion. Sample Input ``` Alice Bob Alice Charlie Dave Charlie Alice Charlie Alice ``` Output for the Sample Input ``` Alice ``` Explanation - In the first round, Alice beats Bob, and Charlie beats Dave. - In the final round, Alice beats Charlie and becomes the champion.","solution":"def find_champion(matches): Determines the champion from a list of match results. Args: matches (list of str): A list of match results in the format \\"Player1 Player2 Winner\\". Returns: str: The name of the tournament champion. players = set() for match in matches: player1, player2, winner = match.split() players.add(player1) players.add(player2) players.add(winner) players.remove(player1) players.remove(player2) players.add(winner) return list(players)[0]"},{"question":"A mythical city is thriving in the middle of a desert, heavily guarded by a circle of magical towers. Each tower has a certain energy level and is placed at specific coordinates on a 2D plane. The city plans to connect these towers with magical beams so that they form a single interconnected structure, minimizing the total energy used. Each magical beam can be established with an energy cost equal to the Euclidean distance between the two towers it connects. The task is to determine the minimum total energy required to connect all the towers. The input consists of multiple datasets; each dataset represents a different configuration of towers. Input The input begins with a single integer T (1 ≤ T ≤ 100), representing the number of datasets. Each dataset follows this format: > n > x1 y1 e1 > x2 y2 e2 > ... > xn yn en The first line of each dataset contains an integer n (2 ≤ n ≤ 100), indicating the number of towers. The following n lines each describe a tower with three integers: xi yi (coordinates of the tower on the 2D plane) and ei (energy level of the tower). The coordinates and energy levels are guaranteed to be between 0 and 1000 inclusive. Output For each dataset, output the minimum total energy required to connect all towers, rounded to the nearest integer. Print the results for each dataset in a new line. Sample Input 2 3 0 0 10 0 1 10 1 0 10 4 0 0 10 1 0 20 0 1 30 1 1 40 Sample Output 2 3 In this problem, you are expected to use algorithms related to minimum spanning trees (MST) to find the minimum energy required to connect all towers in each dataset.","solution":"import math from heapq import heappush, heappop def prim_minimum_spanning_tree(towers): Uses Prim\'s algorithm to find the minimum total energy required to connect all towers. n = len(towers) if n == 1: return 0 # Priority queue to select the edge with the minimum weight pq = [] # Start from the first tower visited = [False] * n min_cost = 0 # Add all edges from the first tower to the priority queue for j in range(1, n): distance = math.sqrt((towers[0][0] - towers[j][0])**2 + (towers[0][1] - towers[j][1])**2) heappush(pq, (distance, j)) visited[0] = True edges_in_mst = 0 while pq and edges_in_mst < n - 1: cost, tower_id = heappop(pq) if not visited[tower_id]: min_cost += cost visited[tower_id] = True edges_in_mst += 1 for j in range(n): if not visited[j]: distance = math.sqrt((towers[tower_id][0] - towers[j][0])**2 + (towers[tower_id][1] - towers[j][1])**2) heappush(pq, (distance, j)) return round(min_cost) def minimum_total_energy(t, datasets): results = [] for dataset in datasets: results.append(prim_minimum_spanning_tree(dataset)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) datasets = [] index = 1 for _ in range(t): n = int(lines[index]) dataset = [] for i in range(index + 1, index + 1 + n): x, y, e = map(int, lines[i].split()) dataset.append((x, y, e)) index += n + 1 datasets.append(dataset) return t, datasets def solve(input_data): t, datasets = parse_input(input_data) results = minimum_total_energy(t, datasets) for result in results: print(result)"},{"question":"# Task You are given a list of integers `arr` representing the daily stock prices of a company for a certain period. Your task is to determine the maximum possible profit that can be achieved by buying on one day and selling on another later day. Note that you may complete only one transaction (i.e., buy one and sell one share of the stock). # Example For `arr = [7, 1, 5, 3, 6, 4]`, the output should be `5`. Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. For `arr = [7, 6, 4, 3, 1]`, the output should be `0`. Explanation: In this case, no profitable transactions are possible, so the maximum profit is 0. # Input/Output - `[input]` integer array `arr` A non-empty array of positive integers. Constraints: `1 ≤ arr.length ≤ 10^5`, `1 ≤ arr[i] ≤ 10^4` - `[output]` an integer The maximum profit. If no profit is possible, return 0.","solution":"def max_profit(arr): Returns the maximum possible profit by buying one day and selling on another day later. if not arr or len(arr) < 2: return 0 max_profit = 0 min_price = arr[0] for price in arr: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Jane is organizing a coding challenge for her friends. Each friend is required to solve a unique problem related to strings. The challenge is to determine if a given string can have its characters rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string of lowercase letters, determine if it\'s possible to rearrange the letters to form a palindrome. -----Input----- The input consists of a single string `s` (1 leq text{length of } s leq 1000) containing only lowercase alphabetic characters. -----Output----- Output \\"YES\\" if the characters of the string can be rearranged to form a palindrome. Otherwise, output \\"NO\\". -----Example----- Input carrace Output YES Input daily Output NO -----Note----- In the first example, \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. In the second example, \\"daily\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s: str) -> str: from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"In the kingdom of Treeland, there is a unique binary tree structure. Every node in Treeland\'s tree has either 0 or 2 children. Each node is labeled with a unique integer value. The king of Treeland has tasked you with finding the Lowest Common Ancestor (LCA) of two given nodes in the tree. The LCA of two nodes u and v in a tree is defined as the deepest node w that has u and v as descendants (where each node is a descendant of itself). Your task is to write a program that processes multiple queries, each asking for the LCA of two given nodes. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) - the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) indicating an edge between node u and node v. The next line contains an integer q (1 ≤ q ≤ 10^5) - the number of queries. The next q lines each contain two integers u and v (1 ≤ u, v ≤ n) - the nodes to find the LCA of. Output For each query, output the LCA of the two nodes on a new line. Examples Input 7 1 2 1 3 2 4 2 5 3 6 3 7 3 4 5 4 6 5 7 Output 2 1 1 Input 5 1 2 1 3 2 4 2 5 2 4 5 4 3 Output 2 1","solution":"from collections import defaultdict, deque class Tree: def __init__(self, n): self.n = n self.edges = defaultdict(list) self.depth = [0] * (n + 1) self.parent = [[-1] * (self.log2(n) + 1) for _ in range(n + 1)] def add_edge(self, u, v): self.edges[u].append(v) self.edges[v].append(u) def prepare_lca(self): def dfs(v, p): self.parent[v][0] = p if p != -1: self.depth[v] = self.depth[p] + 1 for u in self.edges[v]: if u == p: continue dfs(u, v) dfs(1, -1) for i in range(1, len(self.parent[0])): for v in range(1, self.n + 1): if self.parent[v][i - 1] != -1: self.parent[v][i] = self.parent[self.parent[v][i - 1]][i - 1] def log2(self, x): from math import log2 return int(log2(x)) def lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u for i in range(len(self.parent[0]) - 1, -1, -1): if self.depth[u] - (1 << i) >= self.depth[v]: u = self.parent[u][i] if u == v: return u for i in range(len(self.parent[0]) - 1, -1, -1): if self.parent[u][i] != -1 and self.parent[u][i] != self.parent[v][i]: u = self.parent[u][i] v = self.parent[v][i] return self.parent[u][0] def solve(n, edges, queries): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) tree.prepare_lca() results = [] for u, v in queries: results.append(tree.lca(u, v)) return results"},{"question":"You are given a list of integers where each integer represents the number of votes a candidate received in a university election. Your task is to determine the winner of the election. The winner is the candidate with the highest number of votes. If there is a tie (i.e., two or more candidates have the same number of votes), the candidate appearing earlier in the list wins. Write a function that takes the list of votes and returns the index of the winning candidate. Example 1: Input: votes = [15, 20, 20, 10, 15] Output: 1 Explanation: Candidates have votes [15, 20, 20, 10, 15]. The highest votes are 20 which is tied between candidate 1 and candidate 2. Since candidate 1 appears earlier, they are the winner. Example 2: Input: votes = [10, 5, 10, 10, 5] Output: 0 Explanation: Candidates have votes [10, 5, 10, 10, 5]. The highest votes are 10 which is tied between candidate 0, candidate 2, and candidate 3. Since candidate 0 appears earlier, they are the winner. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findWinner(votes) which takes the list of integers votes as parameter and returns an integer representing the index of the winning candidate. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ len(votes) ≤ 10^{6} 0 ≤ votes[i] ≤ 10^{9}","solution":"def findWinner(votes): Returns the index of the candidate with the highest votes. In case of a tie, the candidate who appears earlier wins. Parameters: votes (list): A list of integers where each element represents the votes of a candidate. Returns: int: The index of the winning candidate. if not votes: return -1 max_votes = -1 winner_index = -1 for i, vote in enumerate(votes): if vote > max_votes: max_votes = vote winner_index = i return winner_index"},{"question":"A popular video game offers a special challenge where players must traverse a rectangular grid from the top-left corner to the bottom-right corner. Each cell of the grid contains a value, and the player collects these values as they move through the grid. The player can only move to the right or down from any cell. Your task is to determine the maximum sum of values the player can collect on any valid path from the top-left corner to the bottom-right corner of the grid. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000), denoting the number of rows and columns of the grid, respectively. Each of the next n lines contains m integers, each giving the value of the corresponding cell in the grid. The values are between -1000 and 1000. Output Print a single integer — the maximum sum the player can collect by following a valid path from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 1 -3 2 4 Output 7 Note In the first sample, the sequence of moves that yields the maximum sum is: 1 → 2 → 3 → 6 → 9, yielding a total of 1 + 2 + 3 + 6 + 9 = 21. In the second sample, the sequence of moves that yields the maximum sum is: 1 → 2 → 4, yielding a total of 1 + 2 + 4 = 7.","solution":"def max_path_sum(grid): n = len(grid) m = len(grid[0]) # Create a dp array dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Ordina loves playing with numbers and sequences. One day she came across a sequence of n positive integers and decided to play a little game. She defines a sequence to be \\"good\\" if it can be split into two non-empty subsequences such that the sum of the elements in both subsequences is equal. However, she soon realized that not every sequence is \\"good\\". Can you help her find out if a given sequence is \\"good\\"? Input The first line of the input file contains an integer n (2 ≤ n ≤ 1000), the number of integers in the sequence. The second line contains n positive integers separated by spaces representing the sequence. Each integer is between 1 and 1000, inclusive. Output Output \\"YES\\" if the sequence is \\"good\\", otherwise output \\"NO\\". Examples Input 4 1 2 3 6 Output YES Input 5 1 5 11 5 4 Output NO","solution":"def is_good_sequence(n, sequence): Returns \\"YES\\" if the sequence is \\"good\\", otherwise \\"NO\\". A sequence is \\"good\\" if it can be split into two non-empty subsequences such that the sum of the elements in both subsequences is equal. total_sum = sum(sequence) # If total_sum is odd, it\'s not possible to split into two equal sums if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 # Use a set to keep track of possible sums that can be made with the elements possible_sums = set([0]) for num in sequence: new_sums = set() for s in possible_sums: new_sums.add(s + num) possible_sums.update(new_sums) if target_sum in possible_sums: return \\"YES\\" return \\"NO\\""},{"question":"A city has M intersections and R two-way roads connecting pairs of intersections. The city municipality wants to conduct maintenance work on some of the roads. However, to minimize disruption, no two roads that are connected by a common intersection should be under maintenance at the same time. Your task is to determine the minimum number of phases required to conduct the maintenance in such a way that no two directly connected roads are closed simultaneously. ----- Input ----- The first line contains two integers M (1 ≤ M ≤ 1000) and R (1 ≤ R ≤ 2000). Each of the following R lines contains two integers u and v (1 ≤ u, v ≤ M, u ≠ v) describing a road between intersections u and v. ----- Output ----- Output a single integer, the minimum number of phases required. ----- Example ----- Input: 4 4 1 2 2 3 3 4 4 1 Output: 2 Input: 5 5 1 2 2 3 3 4 4 5 5 3 Output: 3 ----- Explanation ----- In the first example, one possible way to schedule the maintenance is: - Phase 1: Roads (1, 2) and (3, 4) - Phase 2: Roads (2, 3) and (4, 1) In the second example: - Phase 1: Road (1, 2) - Phase 2: Road (2, 3) - Phase 3: Road (3, 4), (4, 5), and (5, 3)","solution":"def min_phases(M, R, roads): from collections import defaultdict def is_bipartite(graph, start, colors): queue = [start] colors[start] = 0 # Start coloring with 0 while queue: node = queue.pop(0) current_color = colors[node] for neighbor in graph[node]: if colors[neighbor] == -1: # If not colored yet colors[neighbor] = 1 - current_color # Alternate color queue.append(neighbor) elif colors[neighbor] == current_color: # If the same color return False return True graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) colors = [-1] * (M + 1) for node in range(1, M + 1): if colors[node] == -1: if not is_bipartite(graph, node, colors): return 3 # If not bipartite, we need 3 colors/phases return 2 # If bipartite, we can always manage with 2 colors/phases"},{"question":"Given a sequence of integers, return an array containing only the elements that appear strictly more than once in the original sequence, maintaining their original relative order. Constraints: 1 ≤ N ≤ 100 0 ≤ Array[i] ≤ 200 SAMPLE INPUT 2 5 1 2 3 4 3 6 5 6 5 6 6 9 SAMPLE OUTPUT 3 5 6 Explanation *Test Case 1:* The input sequence is 1, 2, 3, 4, 3. The number 3 appears more than once, so the output is 3. *Test Case 2:* The input sequence is 5, 6, 5, 6, 6, 9. The numbers 5 and 6 appear more than once, so the output is 5, 6. The order is maintained as they originally appear.","solution":"def find_duplicates(arr): Returns an array containing only the elements that appear strictly more than once in the original sequence, maintaining their original relative order. from collections import Counter count = Counter(arr) duplicates = [x for x in arr if count[x] > 1] # Remove duplicates while maintaining order seen = set() result = [] for elem in duplicates: if elem not in seen: result.append(elem) seen.add(elem) return result"},{"question":"Consider an array a of n integers. We define the \\"peak power\\" of a subarray as the maximum possible product of any two numbers within the subarray. Determine the minimum possible \\"peak power\\" among all subarrays of length at least 2. Note that a subarray of an array is a contiguous segment of the array. -----Input----- The first line contains one integer t (1 le t le 5000) — the number of test cases. The first line of each test case contains one integer n (2 le n le 2 cdot 10^5) — the length of the array a. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the minimum possible \\"peak power\\" among all subarrays of length at least 2. -----Example----- Input 2 5 3 1 9 4 6 4 5 2 8 7 Output 3 10 -----Explanation----- In the first test case, the minimum peak power is achieved by the subarray [3, 1] where 3 * 1 = 3. In the second test case, the minimum peak power is achieved by the subarray [2, 5] where 2 * 5 = 10.","solution":"def min_peak_power(t, test_cases): results = [] for n, a in test_cases: min_peak = float(\'inf\') for i in range(n - 1): current_peak = a[i] * a[i + 1] if current_peak < min_peak: min_peak = current_peak results.append(min_peak) return results"},{"question":"You are given an array of integers representing the number of steps a frog can jump at each position in a pond. The frog starts at the first position and aims to reach the last position. However, at each step, the frog can only jump forward by a number of positions equal to the value at its current position. Determine if the frog can reach the end of the array. Return True if the frog can reach the end, False otherwise.","solution":"def can_frog_reach_end(steps): Determines if the frog can reach the end of the array. Args: steps (list of int): Array where each element represents the number of steps a frog can jump from that position. Returns: bool: True if the frog can reach the end of the array, False otherwise. max_reach = 0 for i in range(len(steps)): if i > max_reach: return False max_reach = max(max_reach, i + steps[i]) if max_reach >= len(steps) - 1: return True return False"},{"question":"Create a function named `find_divisors` that takes an integer `n` and returns a sorted list of all divisors of `n`. Example: ```python find_divisors(6) should return [1, 2, 3, 6] find_divisors(28) should return [1, 2, 4, 7, 14, 28] ``` To achieve this, you might want to create a helper function which finds the divisors by iterating from `1` to `n` and checking if the number divides `n` without a remainder. Additionally, ensure that the list is in ascending order. Optimize the function to handle larger values of `n` efficiently. You can assume `n` will always be a positive integer. Challenge: Write tests to validate your solution: - Test with prime numbers where divisors should only be `1` and the number itself. - Test with composite numbers. - Test with small and large values of `n`.","solution":"def find_divisors(n): Finds and returns a sorted list of all divisors of a given integer n. divisors = [] for i in range(1, int(n**0.5) + 1): if n % i == 0: divisors.append(i) if i != n // i: divisors.append(n // i) return sorted(divisors)"},{"question":"Given a non-negative integer `k` and a list of integers representing the end times of various events, determine if it is possible to select exactly `k` events such that none of the selected events overlap. Two events overlap if their end times are the same. If it is possible, output \\"Yes\\" and the end times of any such combination. If it is not possible, output \\"No\\". -----Constraints----- - 1 leq k leq 10^5 - 1 leq length of the list leq 10^5 - 1 leq each end time leq 10^9 - All values in input are integers -----Input----- Input is given from Standard Input in the following format: k length of the list end_time_1 end_time_2 ... end_time_n -----Output----- If there is no way to select exactly `k` events without overlap, print \\"No\\". If such a selection is possible, print \\"Yes\\" on the first line. Then print the selected `k` end times on the second line, separated by a whitespace. -----Sample Input----- 3 5 5 10 15 20 25 -----Sample Output----- Yes 5 10 15","solution":"def select_k_events(k, end_times): Determines if it\'s possible to select exactly k events such that none of the selected events overlap. Returns \\"Yes\\" and the end times of any such combination if possible, otherwise \\"No\\". # Remove duplicates as we need exact k unique end times unique_end_times = sorted(list(set(end_times))) if len(unique_end_times) < k: return \\"No\\" # Output \\"Yes\\" and the first k elements from the unique sorted list return \\"Yesn\\" + \' \'.join(map(str, unique_end_times[:k]))"},{"question":"Alex has been given a grid of size M times N where each cell can either be passable (denoted by \'.\') or blocked (denoted by \'#\'). He is currently located at the top left corner of the grid (cell (1, 1)) and his goal is to reach the bottom right corner (cell (M, N)). Alex can move up, down, left, or right, but he cannot move through a blocked cell. Write a program to determine the minimum number of steps required for Alex to reach his goal. If there is no possible path, the program should return -1. -----Input----- The first line of input consists of two integers, M and N (1 leq M, N leq 1000), the number of rows and columns in the grid. Each of the following M lines contains N characters: \'.\' or \'#\', representing the cells of the grid. -----Output----- Output a single integer: the minimum number of steps required to go from (1, 1) to (M, N). If there is no path, output -1. -----Examples----- Input: 3 3 . . . # # . . . . Output: 4 Input: 3 3 . . # # # . # . . Output: -1","solution":"from collections import deque def min_steps_to_reach_goal(M, N, grid): if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == M-1 and c == N-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps+1)) return -1"},{"question":"A group of developers is attempting to build a data transmission network using a set of servers. There are n servers and m communication channels between these servers. Each server can directly communicate with other servers over these communication channels. If two servers wish to communicate but do not have a direct channel between them, they must relay their data through other servers that can communicate with both. The network is said to be \\"fault-tolerant\\" if it meets two properties: 1. There are at least k distinct paths (i.e., sets of channels where no two channels in the same set share any common server other than the start and end servers) between every pair of distinct servers. 2. Removing any single communication channel does not reduce the number of distinct paths between any pair of servers to fewer than k-1. Your task is to determine whether a given data transmission network for a set of servers is fault-tolerant. -----Input----- The first line contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 2000, 1 ≤ k ≤ 100) - the number of servers, the number of communication channels, and the required fault tolerance respectively. Each of the next m lines contains two integers, a and b (1 ≤ a, b ≤ n, a ≠ b), representing a direct communication channel between server a and server b. -----Output----- Output \\"yes\\" (without quotes) if the data transmission network is fault-tolerant, otherwise output \\"no\\". -----Examples----- Input 5 6 2 1 2 2 3 3 4 4 5 5 1 1 3 Output yes Input 4 4 3 1 2 2 3 3 4 4 1 Output no","solution":"def is_fault_tolerant(n, m, k, channels): import networkx as nx # Create the graph G = nx.Graph() G.add_edges_from(channels) # Check if there are at least k distinct paths between every pair of nodes for i in range(1, n + 1): for j in range(i + 1, n + 1): if len(list(nx.all_simple_paths(G, source=i, target=j))) < k: return \\"no\\" # Remove each edge and check the new graph for k-1 paths for u, v in channels: G.remove_edge(u, v) for i in range(1, n + 1): for j in range(i + 1, n + 1): if len(list(nx.all_simple_paths(G, source=i, target=j))) < k - 1: return \\"no\\" G.add_edge(u, v) return \\"yes\\" # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) channels = [(int(data[i * 2 + 3]), int(data[i * 2 + 4])) for i in range(m)] print(is_fault_tolerant(n, m, k, channels)) if __name__ == \\"__main__\\": main()"},{"question":"A travelling agency plans to create different tour packages based on customer preferences. Each package is defined by a specific route, which involves visiting several cities in a particular order. However, to ensure that customers can complete their travels without issues, the agency needs to validate the feasibility of these routes. The agency only allows direct flights between cities and these flights are represented as a list of direct paths. Given a list of direct flights and a specific tour route, determine if it is possible to travel through all the cities in the exact given order using one or more of the direct flights listed. Input: - The first line contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the number of direct flights available. - The next n lines each contain two strings ci and cj, representing a direct flight from city ci to city cj. - The next line contains an integer k, the number of cities in the tour route. - The next line contains k strings, representing the ordered sequence of cities in the tour route. Output: For each test case, print \\"Possible\\" if the tour route can be completed as specified, or \\"Impossible\\" otherwise. Constraints: 1 ≤ t ≤ 1000 1 ≤ n ≤ 10^5 1 ≤ |ci|, |cj|, |city| ≤ 50 (each city\'s name length) 1 ≤ k ≤ 100 SAMPLE INPUT 2 5 A B B C C D D E E F 4 A B C D 3 X Y Y Z X Z 4 X Y Z W SAMPLE OUTPUT Possible Impossible Explanation: In the first case, there are direct flights that cover each segment of the route [A, B, C, D]. Hence, it is possible to travel through the cities in the given order. In the second case, there are no direct flights to cover the segment from Z to W. Hence, it is impossible to complete the tour route as specified.","solution":"def validate_routes(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] direct_flights = {} for j in range(1, n + 1): ci, cj = test_cases[i][j] if ci in direct_flights: direct_flights[ci].add(cj) else: direct_flights[ci] = {cj} k = test_cases[i][n + 1] route = test_cases[i][n + 2] possible = True for j in range(k - 1): if route[j] not in direct_flights or route[j + 1] not in direct_flights[route[j]]: possible = False break results.append(\\"Possible\\" if possible else \\"Impossible\\") return results"},{"question":"A company has a set of N projects, each with a unique positive identifier. Each project has a specific start and end time, represented as intervals on a timeline. The company can work on multiple projects simultaneously, provided their time intervals do not overlap. The goal is to determine the maximum number of non-overlapping projects the company can work on. **Constraints:** - (1 leq N leq 10^5) - (1 leq text{start}_i < text{end}_i leq 10^9) (for each project (i)) - All values are integers. **Input:** Input is given from Standard Input in the following format: ``` N start_1 end_1 start_2 end_2 : start_N end_N ``` **Output:** Print the maximum number of non-overlapping projects the company can work on. **Example:** _Input:_ ``` 4 1 3 2 4 3 5 4 6 ``` _Output:_ ``` 2 ``` **Explanation:** The projects with intervals [1, 3] and [4, 6] can be selected as they do not overlap, giving a maximum count of 2 non-overlapping projects. Another valid selection could be [2, 4] and [4, 6]. **Note:** An optimal approach to solve this problem would use a greedy algorithm by first sorting the projects by their end times, then iteratively selecting the projects that start after the end time of the last selected project. This ensures the maximum number of non-overlapping projects are chosen.","solution":"def max_non_overlapping_projects(projects): Given a list of projects with their start and end times, returns the maximum number of non-overlapping projects. Parameters: projects : list of tuples (start, end) Returns: int : maximum number of non-overlapping projects # Sort projects by their end times projects.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping projects and the end time of the last selected project count = 0 last_end_time = 0 # Iterate through each project for start, end in projects: # If the start time of current project is greater than or equal to the end time of the last project if start >= last_end_time: # Select this project count += 1 # Update the end time of the last selected project last_end_time = end return count"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of itself and all prior elements. The first element in the new list should be the same as the first element in the original list. Example: Input: [1, 2, 3, 4] Output: [1, 3, 6, 10] Input: [5, 3, 8, 2] Output: [5, 8, 16, 18]","solution":"def cumulative_sum(lst): Returns a list where each element is the sum of itself and all prior elements in the list. if not lst: return [] cumulative_list = [lst[0]] for i in range(1, len(lst)): cumulative_list.append(cumulative_list[-1] + lst[i]) return cumulative_list"},{"question":"You are working on a new feature for a video streaming platform where users can create playlists based on movie genres. Given a list of movies, each movie has a specified genre, title, and a duration (in minutes). You need to write a program that creates a playlist of movies from a specified genre that fits within a maximum total duration without exceeding it. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of movies in the list. Each of the next n lines contains the genre (a string with no spaces), title (a string with no spaces), and duration (an integer 1 ≤ duration ≤ 300) of each movie. The (n+1)th line contains a string genre_to_filter — the genre for the playlist. The (n+2)th line contains an integer max_duration (1 ≤ max_duration ≤ 1000) — the maximum total duration of the playlist. Output Print the titles of the movies in the playlist that fit within the given genre and do not exceed the maximum total duration. If there are multiple possible playlists, print any. If no movies fit the criteria, print \\"No movies available\\". Examples Input 5 Action DieHard 120 Action MadMax 150 Drama Titanic 180 Drama TheGodfather 175 Action Speed 100 Action 250 Output DieHard Speed Input 3 Comedy Superbad 113 Horror IT 135 Comedy BigLebowski 117 Horror 150 Output IT","solution":"def create_playlist(movies, genre_to_filter, max_duration): Creates a playlist of movies from a specified genre that fits within a maximum total duration. Parameters: movies: List of tuples, each containing genre, title, and duration of the movie. genre_to_filter: The genre to filter movies by. max_duration: The maximum allowable total duration of the playlist. Returns: A list of movie titles in the playlist. filtered_movies = [movie for movie in movies if movie[0] == genre_to_filter] filtered_movies.sort(key=lambda x: x[2]) # Sort by duration playlist = [] total_duration = 0 for movie in filtered_movies: if total_duration + movie[2] <= max_duration: playlist.append(movie[1]) total_duration += movie[2] else: break if not playlist: return \\"No movies available\\" return \\" \\".join(playlist) # Example usage: n = 5 movies = [ (\\"Action\\", \\"DieHard\\", 120), (\\"Action\\", \\"MadMax\\", 150), (\\"Drama\\", \\"Titanic\\", 180), (\\"Drama\\", \\"TheGodfather\\", 175), (\\"Action\\", \\"Speed\\", 100), ] genre_to_filter = \\"Action\\" max_duration = 250 print(create_playlist(movies, genre_to_filter, max_duration))"},{"question":"Jack and Anna are trying to outsmart each other in a game of skills. They both draw sets of cards and calculate their respective scores based on a specific scoring system. Write a function called `game_result` to determine the winner based on the given scoring rules. Each card has a point value associated with it: ``` \'2\' = 2 points, \'3\' = 3 points, \'4\' = 4 points, \'5\' = 5 points, \'6\' = 6 points, \'7\' = 7 points, \'8\' = 8 points, \'9\' = 9 points, \'T\' = 10 points, \'J\' = 11 points, \'Q\' = 12 points, \'K\' = 13 points, \'A\' = 15 points ``` You are given two arrays, `jackCards` and `annaCards`, which represent the cards drawn by each player. Calculate the total points for both Jack and Anna and return the result as follows: * `\\"Jack wins\\"` if Jack\'s total points are higher than Anna\'s. * `\\"Anna wins\\"` if Anna\'s total points are higher than Jack\'s. * `\\"Draw\\"` if both players have the same total points. Example * Jack draws: `[\'A\', \'2\', \'T\']` * Anna draws: `[\'K\', \'3\', \'6\']` 1. Jack\'s score: 15 (for \'A\') + 2 (for \'2\') + 10 (for \'T\') = 27 points. 2. Anna\'s score: 13 (for \'K\') + 3 (for \'3\') + 6 (for \'6\') = 22 points. Since Jack has more points than Anna, you should return: `\\"Jack wins\\"`","solution":"def game_result(jackCards, annaCards): Determine the result of the game based on the cards drawn by Jack and Anna. Args: jackCards (list): The list of cards drawn by Jack. annaCards (list): The list of cards drawn by Anna. Returns: str: \\"Jack wins\\" if Jack\'s points are higher, \\"Anna wins\\" if Anna\'s points are higher, \\"Draw\\" if their points are equal. card_values = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'T\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 15} jack_score = sum(card_values[card] for card in jackCards) anna_score = sum(card_values[card] for card in annaCards) if jack_score > anna_score: return \\"Jack wins\\" elif anna_score > jack_score: return \\"Anna wins\\" else: return \\"Draw\\""},{"question":"A logistics company is planning to deliver packages to various cities along a single straight highway. The highway can be represented as a 1-dimensional line with cities located at different positions on this line. Each city is defined by its coordinate on the line, and the company has to deliver packages to n cities. The company has a single truck which can start at any city and deliver all the packages by visiting each city only once. To minimize the fuel usage, the company wants to find the shortest possible round trip for the truck. Compute the minimum distance the truck has to travel to deliver all the packages and return to its starting city. -----Input----- The first line contains an integer n (1 ≤ n ≤ 50) — the number of cities. The second line contains n integers x₁, x₂, ..., xₙ (−10⁴ ≤ xᵢ ≤ 10⁴) — the coordinates of the cities on the highway. -----Output----- Print a single integer — the minimum distance the truck has to travel to deliver all the packages and return to its starting city. -----Examples----- Input 3 -2 0 4 Output 12 Input 2 -1 2 Output 6 -----Note----- In the first sample, the optimal round trip is to start at -2, travel to 0, then to 4, and return to -2. This results in a total distance of 6 (from -2 to 0 to 4) + 6 (return from 4 to -2) = 12. In the second sample, the truck can start at -1, travel to 2, and then return to -1. This results in a total distance of 3 (from -1 to 2) + 3 (return from 2 to -1) = 6.","solution":"def minimum_round_trip_distance(n, cities): Compute the minimum distance the truck has to travel to deliver all the packages and return to its starting city. Args: - n: int, number of cities - cities: list of int, coordinates of the cities on the highway Returns: - int, minimum round trip distance min_city = min(cities) max_city = max(cities) # The optimal trip is to start at either the min or max city, # travel to the other end, and return back. total_distance = 2 * (max_city - min_city) return total_distance"},{"question":"A group of friends is planning a secret Santa gift exchange. Each friend is to be matched with another friend to give a gift to, ensuring that no one gives a gift to themselves. Additionally, due to personal preferences, certain friends have requested not to be paired as a giver-receiver pair. Your task is to find a valid matching or determine that it\'s not possible to satisfy all the constraints. ------ Input ------ The first line of input contains a single integer N — the number of friends. Each friend is represented by an integer from 1 to N. The next line contains an integer M — the number of constraints where certain pairs of friends cannot be paired. The following M lines each contain two integers u and v, indicating that friend u and friend v cannot be in a giver-receiver pair. ------ Output ------ If a valid matching exists, print \\"YES\\" followed by N lines, each containing two integers i and j, indicating that friend i will give a gift to friend j. If there are multiple valid matchings, print any of them. If no valid matching exists, print \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 100 0 ≤ M ≤ frac{N(N-1)}{2} ------ Example ------ Input: 4 2 1 2 3 4 Output: YES 1 3 2 4 3 1 4 2 Input: 3 2 1 2 2 3 Output: NO","solution":"def secret_santa(N, M, constraints): from itertools import permutations # Creating a list of all friends friends = list(range(1, N + 1)) # Store constraints in a set for quick lookup forbidden_pairs = set((min(u, v), max(u, v)) for u, v in constraints) # Find a permutation where no one gives a gift to themselves and forbidden pairs are avoided for perm in permutations(friends): valid = True for giver, receiver in zip(friends, perm): if giver == receiver or (min(giver, receiver), max(giver, receiver)) in forbidden_pairs: valid = False break if valid: return \\"YES\\", list(zip(friends, perm)) return \\"NO\\", [] # Example usage: N = 4 M = 2 constraints = [(1, 2), (3, 4)] print(secret_santa(N, M, constraints))"},{"question":"You are given a set of n items (numbered from 1 to n), each having a corresponding score. You are also given q queries. Each query consists of a single integer k, and you are required to find the sum of the scores of the top k items in the set. Input: - The first line contains an integer n (1 ≤ n ≤ 200 000) — the number of items. - The second line contains n integers, where the i-th integer represents the score of the i-th item. Each score is guaranteed to be between 1 and 10^9. - The third line contains an integer q (1 ≤ q ≤ 100 000) — the number of queries. - Each of the next q lines contains a single integer k (1 ≤ k ≤ n). Output: - For each query, output a single integer — the sum of the scores of the top k items. Example: Input: 6 4 1 7 3 2 6 4 2 3 5 6 Output: 13 17 23 23 Explanation: - For k=2, the top 2 items are {7, 6}, and their sum is 13. - For k=3, the top 3 items are {7, 6, 4}, and their sum is 17. - For k=5, the top 5 items are {7, 6, 4, 3, 2}, and their sum is 23. - For k=6, the top 6 items are {7, 6, 4, 3, 2, 1}, and their sum is 23. Note: - Ensure that your program can handle large inputs efficiently. - Focus on preprocessing the scores so that each query can be answered in constant time.","solution":"def preprocess_scores(scores): Preprocesses the scores to allow constant time query answers. Args: scores: List of integers representing the scores. Returns: A list where the i-th element is the sum of the top (i+1) scores. # Sort scores in descending order scores.sort(reverse=True) # Compute prefix sums of sorted scores prefix_sums = [0] * len(scores) prefix_sums[0] = scores[0] for i in range(1, len(scores)): prefix_sums[i] = prefix_sums[i-1] + scores[i] return prefix_sums def query_top_k_sums(prefix_sums, k): Answers the query to find the sum of the top k scores. Args: prefix_sums: List of integers where the i-th element is the sum of the top (i+1) scores. k: Integer denoting the number of top items to sum. Returns: Integer representing the sum of the top k scores. return prefix_sums[k-1]"},{"question":"You are tasked with developing a simplified task management system for tracking a user\'s tasks throughout the day. Each task has a description, a start time, and an end time, with no two tasks overlapping in time. Given a list of tasks, each represented by a dictionary with keys `\'description\'`, `\'start\'`, and `\'end\'`, your task is to implement a function `check_daily_schedule(tasks)`, which takes in one argument: 1. `tasks`: A list of dictionaries, where each dictionary has the following structure: - `\'description\'`: A string describing the task. - `\'start\'`: A string representing the start time in 24-hour format (`\'HH:MM\'`). - `\'end\'`: A string representing the end time in 24-hour format (`\'HH:MM\'`). The function should return one of the following: - If the list is empty, return `\'No tasks scheduled.\'`. - If all tasks are non-overlapping, return a list of descriptions sorted by their start time. - If there is any overlap in tasks, return `\'Error: Overlapping tasks detected.\'`. Example input: ```python tasks = [ {\'description\': \'Task 1\', \'start\': \'09:00\', \'end\': \'10:00\'}, {\'description\': \'Task 2\', \'start\': \'10:00\', \'end\': \'11:00\'}, {\'description\': \'Task 3\', \'start\': \'11:00\', \'end\': \'12:00\'} ] ``` Example output: ```python [\'Task 1\', \'Task 2\', \'Task 3\'] ``` Another example input: ```python tasks = [ {\'description\': \'Task 1\', \'start\': \'09:00\', \'end\': \'10:00\'}, {\'description\': \'Task 2\', \'start\': \'09:30\', \'end\': \'10:30\'}, {\'description\': \'Task 3\', \'start\': \'11:00\', \'end\': \'12:00\'} ] ``` Example output: ```python \'Error: Overlapping tasks detected.\' ```","solution":"def check_daily_schedule(tasks): Checks the daily schedule for overlapping tasks and sorts them by start time. Args: tasks (list): A list of dictionaries, each containing \'description\', \'start\', and \'end\' keys. Returns: str or list: If tasks are empty, returns \'No tasks scheduled.\'. If all tasks are non-overlapping, returns a list of descriptions sorted by start time. Otherwise, returns \'Error: Overlapping tasks detected.\'. if not tasks: return \'No tasks scheduled.\' # Convert times and sort tasks by start time tasks = sorted(tasks, key=lambda x: x[\'start\']) # Check for overlaps for i in range(len(tasks) - 1): if tasks[i][\'end\'] > tasks[i+1][\'start\']: return \'Error: Overlapping tasks detected.\' return [task[\'description\'] for task in tasks]"},{"question":"Alice loves to play with strings, especially those made up of lowercase English letters. Recently, she came across a problem where she has a string of length N and she wants to perform certain operations on it to make it more interesting. The operation Alice wants to perform is to reverse any substring of the string exactly once. For example, consider the string \\"abcdef\\". If Alice chooses the substring from index 2 to 4 and reverses it, the resulting string would be \\"abedcf\\". Alice wants to know the lexicographically smallest string she can obtain by applying this operation exactly once on the original string. For instance: - If the original string is \\"cba\\", she can reverse the substring from index 1 to index 3 to get \\"abc\\", which is the lexicographically smallest string possible in this case. - For the string \\"geek\\", she can reverse the substring \\"ek\\" to get \\"geek\\", which is already lexicographically smallest. Help Alice find the lexicographically smallest string possible by reversing exactly one substring. # Input Format The first line contains an integer T — the number of test cases. The next T lines each contain a string of length N that Alice wants to manipulate. # Constraints - 1 leq T leq 15 - 1 leq N leq 1000 # Output Format Print T lines, each containing the lexicographically smallest string possible by reversing exactly one substring of the original string. # Sample Input 4 cba geek abcd zyx # Sample Output abc eegk abcd xyz # Explanation - For the string \\"cba\\", reversing the substring from index 1 to index 3 gives \\"abc\\", which is the smallest possible. - For \\"geek\\", reversing the substring \\"ek\\" results in \\"geek\\", which is already the smallest. - The string \\"abcd\\" is already sorted lexicographically. - For \\"zyx\\", reversing the entire string results in \\"xyz\\", which is the smallest possible.","solution":"def lexicographically_smallest_string_after_reverse(s): n = len(s) smallest_string = s for i in range(n): for j in range(i, n): # Reverse the substring s[i:j+1] and form the new string new_string = s[:i] + s[i:j+1][::-1] + s[j+1:] # Check if the new string is lexicographically smaller if new_string < smallest_string: smallest_string = new_string return smallest_string def process_test_cases(T, test_cases): results = [] for test_case in test_cases: result = lexicographically_smallest_string_after_reverse(test_case) results.append(result) return results"},{"question":"A submarine maintenance crew needs to ensure the proper functioning of several pipes. Each pipe can be represented as a sequence of contiguous sections, each section having a unique efficiency score. You need to write a program to determine the maximum efficiency score a single section of a pipe can have. Additionally, you need to find the longest contiguous sub-sequence of sections that achieve this maximum efficiency score and its starting index in the pipe description. Input: The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of sections in the pipe. The second line contains n integers e_1, e_2, …, e_n (0 ≤ e_i ≤ 10^9) — the efficiency scores of each section. Output: Output two integers: the length of the longest contiguous sub-sequence of sections that achieve the maximum efficiency score and its starting index (0-based). If there are multiple such subsequences, choose the one with the smallest starting index. Examples: Input: 5 1 2 3 3 2 Output: 2 2 Input: 7 5 5 5 5 4 4 5 Output: 4 0 Note: In the first example, the maximum efficiency score is 3. There are two sections with a score of 3 and they form one contiguous subsequence of length 2 starting at index 2. In the second example, the maximum efficiency score is 5. There are multiple such sections, but the longest contiguous subsequence is four 5\'s starting at index 0.","solution":"def find_max_efficiency_subsequence(n, efficiency_scores): Finds the longest contiguous subsequence of sections that achieve the maximum efficiency score and its starting index. Parameters: n (int): The number of sections. efficiency_scores (list of int): The efficiency scores of each section. Returns: tuple: The length of the longest contiguous subsequence and its starting index. max_efficiency = max(efficiency_scores) max_length = 0 best_start_index = 0 current_length = 0 current_start_index = 0 for i in range(n): if efficiency_scores[i] == max_efficiency: if current_length == 0: current_start_index = i current_length += 1 else: if current_length > max_length: max_length = current_length best_start_index = current_start_index current_length = 0 if current_length > max_length: max_length = current_length best_start_index = current_start_index return max_length, best_start_index"},{"question":"You are given a list of \\"students\\" objects, where each object contains the \\"name\\" and a list of their \\"scores\\". Your task is to calculate the average score for each student, and then return the names of all students whose average score is above a given threshold. * The input will be a list of dictionaries, where each dictionary has two keys: \\"name\\" and \\"scores\\". The \\"name\\" value is a string representing the student\'s name, and \\"scores\\" value is a list of integers representing the student\'s scores. * The second input is an integer representing the threshold. You should return a list of names of students whose average score is above the given threshold. Input example: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [90, 80, 85]}, {\\"name\\": \\"Bob\\", \\"scores\\": [70, 75, 72]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [95, 85, 92]} ] threshold = 80 ``` Returns ```python [\\"Alice\\", \\"Charlie\\"] ```","solution":"def students_above_threshold(students, threshold): Returns the names of students whose average score is above the given threshold. Parameters: students (list): A list of dictionaries, each containing \'name\' and \'scores\'. threshold (int): The score threshold. Returns: list: The list of names of students whose average score is above the threshold. result = [] for student in students: if student[\'scores\']: average_score = sum(student[\'scores\']) / len(student[\'scores\']) if average_score > threshold: result.append(student[\'name\']) return result"},{"question":"Write a function to solve the following problem: Given an array of integers numbers and a target integer target, return the minimum number of elements you need to add to the array so that there is at least one contiguous sub-array that adds up to target. A contiguous sub-array is a sub-array of consecutive elements in the original array. # Examples 1. Input: `numbers = [1, 2, 3, 4], target = 5` Output: `0` Explanation: The contiguous sub-array `[2, 3]` already sums to 5. 2. Input: `numbers = [1, 1, 1], target = 4` Output: `1` Explanation: You can add the element 4 to make a sub-array `[1, 1, 1, 1]` that sums to 4. 3. Input: `numbers = [], target = 10` Output: `1` Explanation: Adding 10 would create an array that itself is a sub-array summing to 10. # Input - A list of integers `numbers` (length n, 0 <= n <= 10^5, -10^5 <= numbers[i] <= 10^5). - An integer `target` (-10^5 <= target <= 10^5). # Output - An integer representing the minimum number of elements you need to add to the array. # Notes - The function must be efficient to handle large inputs. - If no elements should be added to meet the target with any contiguous sub-array, return 0. If the target cannot be achieved with any number of elements added, return `-1`.","solution":"def min_elements_to_add(numbers, target): Returns the minimum number of elements needed to add to the array to make at least one contiguous sub-array that sums to target. n = len(numbers) current_sum = 0 prefix_sum_map = {0: -1} for i in range(n): current_sum += numbers[i] if current_sum - target in prefix_sum_map: if prefix_sum_map[current_sum - target] < i: return 0 prefix_sum_map[current_sum] = i # If the target can\'t be met by existing subarrays, # the only number we need to add is the target itself: return 1 if target not in prefix_sum_map else 0"},{"question":"You are given a directed graph with `N` nodes and `M` edges, where each edge has an integer weight. A special node `S` is designated as a starting point. Your task is to find the shortest path from the starting node `S` to all other nodes using the famous Dijkstra\'s algorithm. -----Input----- - The first line of the input contains two integers `N` and `M` (1 ≤ `N`, `M` ≤ `100,000`) denoting the number of nodes and edges in the graph respectively. - The second line contains a single integer `S` (1 ≤ `S` ≤ `N`) denoting the starting node. - Each of the next `M` lines contains three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `N`, 1 ≤ `w` ≤ 1,000) denoting an edge from node `u` to node `v` with weight `w`. -----Output----- Output the shortest distance from the node `S` to each of the `N` nodes `1, 2, ..., N` in a single line. If a node is unreachable from node `S`, output `-1` for that node. -----Constraints----- - 1 ≤ `N`, `M` ≤ `100,000` - 1 ≤ `u`, `v` ≤ `N` - 1 ≤ `w` ≤ 1,000 ----- Example Input ----- 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ----- Example Output ----- 0 2 3 9 6","solution":"import heapq def dijkstra(N, M, S, edges): graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((w, v)) dist = [float(\'inf\')] * (N + 1) dist[S] = 0 priority_queue = [(0, S)] # (distance, node) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return [dist[node] if dist[node] != float(\'inf\') else -1 for node in range(1, N + 1)] # Example input N = 5 M = 6 S = 1 edges = [ (1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1) ] # Example usage shortest_paths = dijkstra(N, M, S, edges) print(shortest_paths) # Output: [0, 2, 3, 9, 6]"},{"question":"In a secure area of your research lab, a mysterious device known as the \\"Dimensional Crystal Cube\\" has been discovered. The Cube has a peculiar property: it can be split into smaller cubes of equal size, but the splitting mechanism is controlled by a numerical sequence. Each face of the cube has a non-negative integer inscribed on it. According to the mechanism, the cube can only be divided if the product of the integers on its six faces is a perfect square. Your task is to write a program to determine whether a given cube can be split into smaller cubes or not. -----Input----- The input consists of a single line containing six non-negative integers: a, b, c, d, e, and f (0 le a, b, c, d, e, f le 10^6), representing the integers on the six faces of the cube. -----Output----- Output a single line containing \\"Yes\\" (without quotes) if the cube can be split, and \\"No\\" (without quotes) otherwise. -----Examples----- Sample Input 1: 1 1 2 2 4 4 Sample Output 1: Yes Sample Input 2: 2 3 5 7 11 13 Sample Output 2: No","solution":"import math def can_split_cube(a, b, c, d, e, f): Determines if a cube can be split into smaller cubes based on the product of the integers on its faces being a perfect square. Parameters: a, b, c, d, e, f (int): Non-negative integers on the six faces of the cube. Returns: str: \\"Yes\\" if the product of the integers is a perfect square, \\"No\\" otherwise. product = a * b * c * d * e * f sqrt_product = int(math.sqrt(product)) if sqrt_product * sqrt_product == product: return \\"Yes\\" else: return \\"No\\""},{"question":"A trampoline jumps sequence can be described as a list of integers where each integer represents the number of positions you can jump forward or backward from that position. Given a list of integers, determine if it is possible to reach the last index starting from the first index. You are allowed to jump to an index with the value 0, but you cannot jump from an index with value 0. Write a function that determines if the last index can be reached from the first index under these conditions. The function should return True if the last index can be reached and False otherwise. Note: The jumps can be positive or negative, meaning you can move forward or backward along the list. # Example 1: Input: jumps = [2, 3, 1, 1, 4] Output: True Explanation: Start at index 0, jump to index 2 (2 steps). From index 2, jump to index 3 (1 step). From index 3, jump to index 4 (1 step). # Example 2: Input: jumps = [3, 2, 1, 0, 4] Output: False Explanation: You will always end up at index 3 with jump 0 and there is no way to reach the last index. # Example 3: Input: jumps = [2, -1, 2, 3, 0, 2, 4] Output: True Explanation: Start at index 0, jump to index 2 (2 steps). From index 2, jump to index 1 (-1 step). From index 1, jump to index 3 (2 steps). From index 3, jump to index 6 (3 steps). # Constraints: - 1 <= jumps.length <= 10^4 - -10^5 <= jumps[i] <= 10^5","solution":"def can_reach_last_index(jumps): Determines if the last index can be reached from the first index given the jump rules. Parameters: - jumps (List[int]): List of integers representing the jump distances you can move from each position. Returns: - bool: True if the last index can be reached from the first index, False otherwise. n = len(jumps) max_reachable = 0 for i in range(n): if i > max_reachable: return False max_reachable = max(max_reachable, i + jumps[i]) if max_reachable >= n - 1: return True return False"},{"question":"In a land of dragons and wizards, there exists an enchanted forest where magical potions grow. Each potion has a specific power level, represented as an integer. A powerful sorcerer has given you a task to extract a series of potions such that the sum of their power levels matches a distinct target value. However, there is a twist: the total number of potions that you can select must be minimal. The sorcerer provides you with a list of power levels of the potions and a target power level. Your mission is to determine the minimal number of potions required to reach exactly the target power level. If it is not possible to reach the target using any combination of potions, you must return -1. You are to write a program that accomplishes this task. Input The first line contains two integers: n (1 ≤ n ≤ 1000) and target (1 ≤ target ≤ 10000), the number of potions and the target power level respectively. The following line contains n integers, each representing the power level of a potion. Each power level is an integer between 1 and 100 inclusive. Output If it is possible to reach the target power level using the given potions, print the minimum number of potions required. If it is not possible, print -1. Examples Input 5 11 1 2 3 4 5 Output 3 Input 3 7 4 2 2 Output -1","solution":"def minimal_potions(n, target, potions): Given a list of potion power levels, find the minimum number of potions required to achieve a specified target power level. Return -1 if it\'s not possible. Args: n (int): number of potions target (int): target power level potions (list of int): list of potion power levels Returns: int: minimum number of potions or -1 if not possible # Initialize a large value as infinite inf = float(\'inf\') # Create a dp array that holds the minimum number of potions required for each power level dp = [inf] * (target + 1) # No potions are needed to reach the power level of 0 dp[0] = 0 # Loop over each potion for power in potions: # Update the dp array in reverse to avoid using the same potion multiple times for t in range(target, power - 1, -1): dp[t] = min(dp[t], dp[t - power] + 1) # If dp[target] is inf, it means the target can\'t be reached return dp[target] if dp[target] != inf else -1"},{"question":"Carpenter\'s Furniture Shop problem A carpenter runs a furniture shop and needs to cut wooden planks to make furniture items. Each plank can be any length, but they need to be cut into pieces of specific lengths to make items such as tables, chairs, or shelves. Given a plank of length L and a list of required lengths for various pieces, determine the minimum number of cuts needed to divide the plank into the required pieces. Each cut can divide a plank into two smaller pieces, and once a plank is divided, you can continue making further cuts on the resulting pieces. Input format The input is given in the following format: L N a_1 a_2 ... a_N * The first line contains the length of the plank L and the number of pieces N that need to be made. * The second line contains N integers a_1, a_2, ..., a_N representing the required lengths of the pieces. Constraint * 1 ≤ L ≤ 10^3 * 1 ≤ N ≤ 100 * 1 ≤ a_i ≤ L Output format Print the minimum number of cuts needed to divide the plank into the required pieces on one line. If it\'s not possible to make the required pieces from the given plank, print -1. Input example 1 10 3 2 3 5 Output example 1 2 Explanation: * You can make the first cut at length 2 to get pieces of lengths 2 and 8. * Then make a second cut at length 3 on the 8-piece to get pieces of lengths 3 and 5. * Therefore, a total of 2 cuts. Input example 2 15 4 4 3 3 5 Output example 2 3 Explanation: * You can make the first cut at length 5 to get pieces of lengths 5 and 10. * Then make a second cut at length 4 on the 10-piece to get pieces of lengths 4 and 6. * And make a third cut at length 3 on the 6-piece to get pieces of lengths 3 and 3. * Therefore, a total of 3 cuts. Input example 3 8 2 4 5 Output example 3 -1 Explanation: * It is not possible to make a piece of length 5 from a plank of length 8, so the answer is -1. Example Input 10 3 2 3 5 Output 2","solution":"def min_cuts(L, lengths): lengths = sorted(lengths) n = len(lengths) dp = [float(\'inf\')] * (L + 1) dp[0] = 0 for length in lengths: for current_length in range(length, L + 1): dp[current_length] = min(dp[current_length], dp[current_length - length] + 1) if sum(lengths) > L: return -1 cumulative_length = 0 num_cuts = 0 for length in lengths: if cumulative_length + length > L: return -1 num_cuts += (cumulative_length != 0) cumulative_length += length return num_cuts"},{"question":"The university library has a system for managing late returns on borrowed books. Each book can be borrowed for a maximum of `d` days. If returned after `d` days, a fine is imposed based on the number of days late. Currently, the library staff wants to automate the calculation of fines. Your task is to write a program that determines total fines for multiple students based on their return dates. Given a list of students with their respective return dates and the borrowing duration `d`, calculate the fine for each student. The fine for each day late is a fixed amount `f`. Input The first line contains three integers t, d, and f. The integer `t` denotes the number of students. The integer `d` denotes the maximum number of days a book can be borrowed without incurring a fine. The integer `f` denotes the fine per day for late returns. The next `t` lines contain an integer `r` for each student, representing the number of days they borrowed the book before returning it. Output For each student, print the total fine incurred. If a student returns the book on or before `d` days, their fine is `0`. Constraints 1 ≤ t ≤ 1000 1 ≤ d ≤ 30 1 ≤ f ≤ 100 1 ≤ r ≤ 100 Example Input 3 5 10 7 4 10 Output 20 0 50","solution":"def calculate_fines(t, d, f, return_days): Calculates the fines for multiple students based on their return dates. Parameters: t (int): Number of students. d (int): Maximum number of days a book can be borrowed without incurring a fine. f (int): Fine per day for late returns. return_days (list): List of integers where each integer represents the number of days a student borrowed the book. Returns: list: List of integers representing the fine for each student. fines = [] for r in return_days: if r > d: fines.append((r - d) * f) else: fines.append(0) return fines"},{"question":"Ribbit Games is organizing a coding competition and wants to create a number arrangement for the contestants. They have an array of n integers, each of which can be any non-negative integer. Ribbit wants to sort the array such that the sum of the indices of all even numbers in the array is minimized. You need to find the minimum possible sum of the indices of all even numbers after rearranging the array. -----Input----- The first line contains a single integer n (1 leq n leq 200,000) — the length of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^6) — the elements of the array. -----Output----- Output a single integer — the minimum sum of the indices of all even numbers after rearranging the array. -----Example----- Input 6 3 2 4 1 5 6 Output 4 -----Note----- In the first example, one optimal way to rearrange the array is [2, 4, 6, 3, 1, 5]. The indices of the even numbers are 1, 2, and 3. The sum is 1 + 2 + 1 = 4, which is the minimum possible sum. Explanation: The array can be rearranged into multiple forms, but the one that minimizes the index sum of even numbers can lead to more optimizations. For example, another way to sort them is [2, 4, 6, 1, 3, 5], but that would yield a sum (0 + 1 + 2) = 3 which is not possible given that it disregards the indices from the original array. Therefore, planning the positions logically results in achieving the minimum possible sum. This problem requires the understanding of sorting techniques and optimal array reassignments to minimize constraints while maintaining element integrity.","solution":"def min_sum_of_even_indices(n, arr): Minimize the sum of indices of all even numbers after rearranging the array. even_numbers = sorted([num for num in arr if num % 2 == 0]) even_count = len(even_numbers) # The sum of first even_count indices min_sum_indices = sum(range(even_count)) return min_sum_indices"},{"question":"Write a function that takes in a list of integers and returns the same list sorted in decreasing order based on the count of each integer\'s occurrence in the list. If two or more integers have the same count, they should be sorted by their value in increasing order. Example ----- Input `[4, 5, 6, 5, 4, 3]` Output `[4, 4, 5, 5, 3, 6]` Explanation ----- Both 4 and 5 have count of 2, so they come first. Since 4 is less than 5, it appears before 5. 3 and 6 have count of 1, with 3 appearing before 6 because it is lesser. Another Example ----- Input `[10, 20, 30, 20, 10, 10, 30]` Output `[10, 10, 10, 20, 20, 30, 30]` Explanation ----- 10 appears 3 times, 20 appears 2 times, and 30 appears 2 times. Hence, 10 comes first as it appears most frequently, followed by 20 and 30 in increasing order of their values.","solution":"from collections import Counter def sort_by_occurrence_and_value(lst): Sorts a list of integers in decreasing order based on the count of each integer\'s occurrence. If two or more integers have the same count, they are sorted by their value in increasing order. count = Counter(lst) # Sort by -count[x] for decreasing order of counts, and x to maintain increasing order for values with the same count return sorted(lst, key=lambda x: (-count[x], x))"},{"question":"You are given two strings A and B, both containing only lowercase English letters. You need to write a function that finds the length of the longest common substring of A and B. A substring is a contiguous block of characters in a string. -----Input----- The first line contains the string A, consisting of lowercase English letters. The second line contains the string B, consisting of lowercase English letters. Both strings have lengths between 1 and 1000 inclusive. -----Output----- Print the length of the longest common substring of A and B. -----Examples----- Input abcdef cdefgh Output 4 Input babad dabab Output 3","solution":"def longest_common_substring(A, B): Finds the length of the longest common substring of A and B. :param A: str, first string :param B: str, second string :return: int, length of the longest common substring m = len(A) n = len(B) # Create a 2D array to store lengths of longest common suffixes of substrings lcsuff = [[0] * (n + 1) for i in range(m + 1)] # Length of the longest common substring result = 0 for i in range(m + 1): for j in range(n + 1): if (i == 0 or j == 0): lcsuff[i][j] = 0 elif (A[i - 1] == B[j - 1]): lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 result = max(result, lcsuff[i][j]) else: lcsuff[i][j] = 0 return result"},{"question":"Ravi is learning how to program and he is fascinated by prime numbers. He knows that a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. He wants to write an efficient program to determine if a number is prime. However, he is currently struggling to optimize his code. To help Ravi, you need to write a program that takes a number as input and outputs whether it is a prime number or not. Input The first line of the input contains an integer N which denotes the number of test cases. Next N lines contain one integer each that needs to be checked. Output For each test case, print \\"Prime\\" if the number is a prime number and \\"Not Prime\\" otherwise. Example Input: 3 11 25 31 Output: Prime Not Prime Prime Explanation Example case 1. 11 has no divisors other than 1 and itself, so it is a prime number. Example case 2. 25 is divisible by 5, so it is not a prime number. Example case 3. 31 has no divisors other than 1 and itself, so it is a prime number.","solution":"def is_prime(number): Check if a number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def check_primes(test_cases): For each number in test_cases, determine if it is prime and return a list of results. results = [] for number in test_cases: if is_prime(number): results.append(\\"Prime\\") else: results.append(\\"Not Prime\\") return results"},{"question":"In a certain programming language, we define a \\"valid\\" string as a string that has matching pairs of opening and closing brackets. The possible brackets are \'()\', \'[]\', and \'{}\'. A string is considered valid if for every opening bracket there is a corresponding closing bracket of the same type and they are properly nested. For example, the strings \\"()\\", \\"[]\\", \\"{}\\", \\"(())\\", \\"{[]}\\" are all valid, while the strings \\"(}\\", \\"[(])\\", \\"([)]\\" are not. You are given a string s, which consists of only \'(\', \')\', \'[\', \']\', \'{\', and \'}\' characters. Your task is to write a function that determines if the given string is valid. -----Input----- The input is a single line containing the string s (1 ≤ |s| ≤ 100), consisting only of the bracket characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. -----Output----- Print \\"YES\\" if the string is valid, otherwise print \\"NO\\". -----Examples----- Input () Output YES Input (} Output NO Input {[()]} Output YES Input [(]) Output NO","solution":"def is_valid_bracket_sequence(s): Determines if the given string s is a valid bracket sequence. Args: s (str): The string containing the bracket sequence. Returns: str: \\"YES\\" if the string is valid, \\"NO\\" otherwise. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"Sarah is participating in a competitive coding challenge called \\"String Transform\\". The challenge involves transforming a given string by performing a series of operations. Specifically, she can perform two types of operations on the string: 1. Choose any two adjacent characters that are different and swap them. 2. Choose any character in the string and replace it with any other character. Sarah needs to determine the minimum number of operations required to transform the given input string into a target string. Write a program that, given two strings of equal length, calculates the minimum number of operations required to transform the first string into the second string. Input: - T, the number of test cases. - For each test case: - The first line contains a string S (the initial string). - The second line contains a string T (the target string). Output: - For each test case, output the minimum number of operations required to transform S into T. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ |S| = |T| ≤ 1000 - S and T will consist of only lowercase English letters. SAMPLE INPUT 2 abcde ebcda aaaaa bbbbb SAMPLE OUTPUT 2 5","solution":"def min_operations_to_transform(S, T): Calculate the minimum number of operations required to transform string S into string T. Operations allowed: 1. Swap any two adjacent different characters. 2. Replace any character with any other character. operations = 0 for s_char, t_char in zip(S, T): if s_char != t_char: operations += 1 return operations def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(min_operations_to_transform(S, T)) return results"},{"question":"You are given a list of non-negative integers representing a binary sequence where each integer is either 0 or 1. Your task is to find the length of the longest contiguous subarray that contains an equal number of 0s and 1s. -----Constraints----- - The length of the binary sequence array will not exceed 100,000. - The binary sequence array will only contain 0s and 1s. -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an - n: an integer representing the length of the binary sequence array. - a1, a2, ..., an: the integers representing the elements of the binary sequence. -----Output----- Print the length of the longest contiguous subarray with an equal number of 0s and 1s. -----Sample Input----- 10 0 1 0 1 0 0 1 1 1 0 -----Sample Output----- 10 The longest contiguous subarray with an equal number of 0s and 1s is the entire array itself which has length 10.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. count_map = {0: -1} # Initialize counter dictionary with count 0 at index -1 max_length = 0 count = 0 for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Sophia is working on a new version of a scientific calculator that can simplify mathematical expressions. She wants to simplify the nested square root functions in an expression, removing unnecessary layers. Sophia knows that the nested square root functions can be simplified using the following rule: - The nested square root of a square root can be simplified: `sqrt(sqrt(x)) = x^(1/4)` - Further simplifications can follow the pattern: `sqrt(sqrt(sqrt(x))) = x^(1/8)`, `sqrt(sqrt(sqrt(sqrt(x)))) = x^(1/16)`, etc. Given an expression containing only nested square root operations, target, and simplify it as much as possible. Your task is to create a function that receives a string representing the nested square root expression and prints the simplified form of the expression. The input expression will follow this pattern accurately and will not contain any other operations or symbols. Input A single string representing the nested square root expression. It is guaranteed that the length of the string will be between 1 and 1000. Output Print the simplified form of the nested square root expression following the given rules. Examples Input `sqrt(sqrt(sqrt(x)))` Output `x^(1/8)` Input `sqrt(sqrt(x))` Output `x^(1/4)` Input `sqrt(sqrt(sqrt(sqrt(sqrt(x)))))` Output `x^(1/32)` Note In the first example, the input expression `sqrt(sqrt(sqrt(x)))` represents three layers of square roots. To simplify this, we recognize that each `sqrt` operation is equivalent to raising the result to the power of 1/2. Therefore, three `sqrt` operations simplify to raising `x` to the power of 1/(2 * 2 * 2) which simplifies as the output of `x^(1/8)`. In the second example, the input expression `sqrt(sqrt(x))` represents two layers of square roots, which simplifies to `x^(1/4)`. In the third example, the input expression `sqrt(sqrt(sqrt(sqrt(sqrt(x)))))` represents five layers of nested square roots, which simplifies to `x^(1/32)` following similar analysis.","solution":"def simplify_nested_sqrt(expression): Simplifies expressions of nested square roots. # Extract the number of sqrt occurrences count_of_sqrt = expression.count(\'sqrt\') # Calculate the exponent exponent = 1 / (2 ** count_of_sqrt) return f\\"x^({exponent})\\""},{"question":"The city of Nocity has implemented a new traffic control system to manage its various intersections. Each intersection is managed by a smart traffic light system that can make real-time changes based on traffic data. The traffic system consists of n intersections, each represented by an integer from 1 to n. The intersections are connected by m one-way roads, each road having a travel time of t seconds. The city\'s goal is to ensure that, from the mayor\'s house located at intersection 1, a person can reach any other intersection in the fastest possible time. Therefore, given the list of intersections and roads, the city needs to compute the minimum travel time from the mayor\'s house to all other intersections. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 1 le m le 2 cdot 10^5) - the number of intersections and the number of roads, respectively. The next m lines each contain three integers u, v, and t (1 le u, v le n, u neq v, 1 le t le 10^3) describing a one-way road from intersection u to intersection v with a travel time of t seconds. It is guaranteed that the total number of intersections n in all test cases does not exceed 10^5, and the total number of roads m does not exceed 2 cdot 10^5. -----Output----- For each other intersection from 2 to n, print a single integer representing the minimum travel time from the mayor\'s house (intersection 1) to this intersection. If an intersection is unreachable from the mayor\'s house, print -1 for that intersection. -----Examples----- Input 5 6 1 2 10 1 3 20 2 3 5 3 4 2 2 4 15 4 5 3 Output 10 15 17 20 Input 4 3 1 2 4 2 3 1 3 4 6 Output 4 5 11 -----Note----- In the first example: - Minimum time from intersection 1 to 2 is 10 seconds (direct route). - Minimum time from intersection 1 to 3 is 15 seconds (route 1 -> 2 -> 3). - Minimum time from intersection 1 to 4 is 17 seconds (route 1 -> 2 -> 3 -> 4). - Minimum time from intersection 1 to 5 is 20 seconds (route 1 -> 2 -> 3 -> 4 -> 5). In the second example: - Minimum time from intersection 1 to 2 is 4 seconds (direct route). - Minimum time from intersection 1 to 3 is 5 seconds (route 1 -> 2 -> 3). - Minimum time from intersection 1 to 4 is 11 seconds (route 1 -> 2 -> 3 -> 4).","solution":"import heapq import sys def compute_min_times(n, m, roads): Computes the minimum travel time from intersection 1 to all other intersections. Parameters: n (int): The number of intersections. m (int): The number of roads. roads (list of tuples): List of tuples where each tuple contains three integers (u, v, t) representing a one-way road from intersection u to intersection v with a travel time of t seconds. Returns: list: A list containing the minimum travel time from the mayor\'s house (intersection 1) to each intersection 2 to n. If an intersection is unreachable, it returns -1 for that intersection. graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) INF = float(\'inf\') distances = {i: INF for i in range(1, n + 1)} distances[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(2, n + 1): if distances[i] == INF: result.append(-1) else: result.append(distances[i]) return result"},{"question":"Given an array of integers and a target sum, determine if any two numbers in the array add up to the target sum. Return the indices of the two numbers or -1 if no such pair exists. Example 1: Input: arr = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: The numbers at indices 0 and 1 (2 and 7) add up to the target sum 9. Example 2: Input: arr = [1, 2, 3, 4, 5] target = 10 Output: -1 Explanation: There are no two numbers in the array that add up to the target sum 10. Your Task: You don’t need to read input or print anything. Your task is to complete the function `findTwoSum` which takes an array of integers `arr` and an integer `target` as input parameters and returns the indices of the two numbers that add up to the target sum, or -1 if no such pair exists. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^4 -10^3 <= arr[i] <= 10^3 -10^3 <= target <= 10^3","solution":"def findTwoSum(arr, target): Finds two numbers in arr that add up to the target sum and returns their indices. If no such pair exists, returns -1. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return -1"},{"question":"Fun with Palindromes Background Story You\'re a software engineer working on a speech recognition application. One aspect of the project involves handling palindrome tests – strings that read the same forward and backward. Your team has tasked you with developing a feature that reliably identifies near-palindromes in a given text. A near-palindrome is a string that would be a palindrome if up to one character were added, removed, or replaced. Task Write a function `isNearPalindrome` that takes a string as input and returns `True` if the string is a near-palindrome, and `False` otherwise. # Examples 1. `isNearPalindrome(\\"radar\\")` ➞ `True` 2. `isNearPalindrome(\\"radarx\\")` ➞ `True` (by removing `x`) 3. `isNearPalindrome(\\"rdar\\")` ➞ `True` (by adding any character between `r` and `d`) 4. `isNearPalindrome(\\"hello\\")` ➞ `False` 5. `isNearPalindrome(\\"abca\\")` ➞ `True` (by replacing `c` with `b`) # Constraints 1. The input string consists of lowercase English letters only. 2. The length of the input string is at most 1000 characters. # Notes 1. Your function should efficiently handle strings of length up to 1000. 2. Aim for a linear time algorithm to ensure performance remains optimal for the upper limit of input size.","solution":"def isNearPalindrome(s): Determines if the string is a near-palindrome. def is_palindrome_range(i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True start, end = 0, len(s) - 1 while start < end: if s[start] != s[end]: return is_palindrome_range(start + 1, end) or is_palindrome_range(start, end - 1) start += 1 end -= 1 return True"},{"question":"Time Limit: 10 sec / Memory Limit: 128 MB Write a program that determines the dominant color in a given image represented by an MxN grid of color values. The color is represented by its R, G, and B components, each an integer in the range [0, 255]. The dominant color is defined as the one that appears the most frequently in the grid. If there are multiple colors with the same frequency, return the one with the smallest R component, and if tied, the smallest G component, and if still tied, the smallest B component. Input - The first line contains two integers, M and N, the dimensions of the grid (1 ≤ M, N ≤ 100). - The following M lines each contain N tuples of three integers, representing the RGB components of each color in the grid. Output - A single line containing three integers representing the RGB components of the dominant color. Example Input 3 3 255 0 0 255 0 0 0 255 0 0 0 255 0 255 0 0 255 0 0 255 0 0 0 255 0 255 0 Output 0 255 0","solution":"def dominant_color(M, N, grid): from collections import Counter color_count = Counter() for row in grid: for color in row: color_count[color] += 1 # Sort colors first by frequency (descending) and then by RGB components (ascending) sorted_colors = sorted(color_count.items(), key=lambda x: (-x[1], x[0])) # The dominant color is the first element\'s key (which is the RGB tuple) dominant_color = sorted_colors[0][0] return dominant_color # Example use case def parse_input(input_str): lines = input_str.strip().split(\'n\') M, N = map(int, lines[0].split()) grid = [] for i in range(1, M + 1): row = list(map(int, lines[i].split())) grid.append([(row[j], row[j+1], row[j+2]) for j in range(0, len(row), 3)]) return M, N, grid def extract_output(output): return tuple(map(int, output.strip().split())) input_str = 3 3 255 0 0 255 0 0 0 255 0 0 0 255 0 255 0 0 255 0 0 255 0 0 0 255 0 255 0 M, N, grid = parse_input(input_str) output = dominant_color(M, N, grid) print(*output) # Output should be 0 255 0"},{"question":"You are given a singly linked list. Your task is to remove the kth node from the end of the list, and return the head of the modified list. Solve this problem in a single pass. Example 1: Input: head = [1,2,3,4,5], k = 2 Output: [1,2,3,5] Example 2: Input: head = [1], k = 1 Output: [] Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeKthFromEnd() which takes the head of the linked list and an integer k as input and returns the head of the modified linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= size of the linked list <= 10^4 0 <= value of each node <= 10^9 1 <= k <= size of the linked list","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeKthFromEnd(head, k): dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Advance first k+1 steps for _ in range(k + 1): first = first.next # Move first to the end, maintaining the gap while first is not None: first = first.next second = second.next # Skip the kth node second.next = second.next.next return dummy.next"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has a value assigned to it, and each edge connects two nodes and has a weight associated with it. Your task is to find the shortest path from the first node to the last node and return the minimum value along this path (considering the node values). Assume the nodes are numbered from `1` to `n` and the edges are provided as triples `(a, b, w)` where `a` and `b` are the two nodes connected by the edge and `w` is the weight of the edge. -----Input----- The first line contains two integers `n` (2 le n le 10^5) and `m` (1 le m le 2 times 10^5), the number of nodes and edges respectively. The second line contains `n` integers representing the values assigned to the nodes. The next `m` lines each contain three integers `a`, `b`, and `w` (1 le a, b le n, 1 le w le 10^5), representing an edge between nodes `a` and `b` with weight `w`. -----Output----- Print a single integer, the minimum value among the node values on the shortest path from node `1` to node `n`. If there is no path from node `1` to node `n`, print `-1`. -----Examples----- Input 5 6 10 1 4 3 5 1 2 2 1 3 3 2 3 1 2 4 1 3 4 1 4 5 2 Output 1 Input 3 3 9 2 8 1 2 1 2 3 1 1 3 2 Output 2","solution":"import heapq from collections import defaultdict, deque import sys def shortest_path_min_value(n, m, node_values, edges): graph = defaultdict(list) for a, b, w in edges: graph[a].append((w, b)) graph[b].append((w, a)) pq = [(0, 1, node_values[0])] # (current_cost, current_node, min_value_on_path) visited = set() min_vals = {i + 1: float(\'inf\') for i in range(n)} min_vals[1] = node_values[0] while pq: current_cost, current_node, min_value_on_path = heapq.heappop(pq) if current_node == n: return min_value_on_path if current_node in visited: continue visited.add(current_node) for edge_cost, neighbor in graph[current_node]: if neighbor not in visited: new_cost = current_cost + edge_cost new_min_value_on_path = min(min_value_on_path, node_values[neighbor - 1]) if new_min_value_on_path < min_vals[neighbor]: min_vals[neighbor] = new_min_value_on_path heapq.heappush(pq, (new_cost, neighbor, new_min_value_on_path)) return -1 # Example Usage n = 5 m = 6 node_values = [10, 1, 4, 3, 5] edges = [(1, 2, 2), (1, 3, 3), (2, 3, 1), (2, 4, 1), (3, 4, 1), (4, 5, 2)] print(shortest_path_min_value(n, m, node_values, edges)) # Output: 1"},{"question":"A group of researchers has been observing a unique type of sequence called a \\"Zigzag sequence.\\" A Zigzag sequence is a sequence of at least three numbers where the differences between successive numbers strictly alternate between positive and negative. For example, [1, 4, 2, 3, 1] is a Zigzag sequence because the differences (3, -2, 1, -2) alternate between positive and negative. The researchers want to determine the length of the longest Zigzag sequence that can be found within a given array of integers. The sequence does not need to be contiguous; it can be formed by potentially skipping some elements of the array. ------Input------ The first line contains a single integer n denoting the length of the array. The following line contains n integers which are the elements of the array. We have 1 leq n leq 1000 and the integers in the array are between -10000 and 10000. ------Output------ Output a single integer representing the length of the longest Zigzag sequence that can be formed. ------Examples------ Sample Input 1: 6 1 7 4 9 2 5 Sample Output 1: 6 Sample Input 2: 7 1 2 3 4 5 6 7 Sample Output 2: 2 Sample Input 3: 5 10 10 10 10 10 Sample Output 3: 1","solution":"def longest_zigzag_sequence_length(arr): n = len(arr) if n < 2: return n up = [1] * n down = [1] * n for i in range(1, n): if arr[i] > arr[i - 1]: up[i] = down[i - 1] + 1 down[i] = down[i - 1] elif arr[i] < arr[i - 1]: down[i] = up[i - 1] + 1 up[i] = up[i - 1] else: up[i] = up[i - 1] down[i] = down[i - 1] return max(up[n - 1], down[n - 1])"},{"question":"Problem statement A gardener is tasked with planting a line of trees in a park. The trees need to be spaced evenly to create a visually pleasing appearance. The gardener has marked the potential positions where trees can be planted along a path that is 10^5 units long. Some positions are already occupied by other immovable objects like benches and statues, and cannot be used for planting. Given the positions of already occupied spots, find the maximum number of evenly spaced trees that can be planted and the positions where they should be planted. Each test case will provide a different scenario with marked occupied spots. The output should specify the maximum number of trees that can be planted along with their positions which form the longest evenly spaced sequence. INPUT The first line of input contains T, the number of test cases. The first line of each test case contains N, the number of occupied positions. The next line contains N space-separated integers representing the positions of occupied spots. OUTPUT For each test case, output the maximum number of trees that can be planted. In the next line, output the positions of these trees in a space-separated manner. CONSTRAINTS 1 ≤ T ≤ 100 0 ≤ N ≤ 10^5 1 ≤ Position ≤ 10^5 If it\'s not possible to plant any trees, output 0. EXAMPLE Input 2 3 10 20 30 4 5 15 25 35 Outputsolution":"def max_evenly_spaced_trees(n, occupied_positions): This function accepts the number of occupied positions and their coordinates, and returns the maximum number of evenly spaced trees that can be planted, along with their positions. :param n: Number of occupied positions. :param occupied_positions: List of coordinates of occupied positions. :return: A tuple containing the maximum number of trees and their positions. from itertools import combinations_with_replacement if n == 0: # If no occupied positions, we can potentially plant trees everywhere return (33334, list(range(3, 100000, 3))) max_units = 100000 # Maximum length of the path occupied_positions = set(occupied_positions) best_d = 1 best_positions = [] max_trees = 0 for spacing in range(1, max_units): current_positions = [] for pos in range(spacing, max_units+1, spacing): if pos not in occupied_positions: current_positions.append(pos) if len(current_positions) > max_trees: max_trees = len(current_positions) best_positions = current_positions best_d = spacing return (max_trees, best_positions) def solve_planting_cases(test_cases): This function processes multiple test cases of finding the maximum number of evenly spaced trees to be planted and their positions. :param test_cases: List of tuples where each tuple contains an integer N and a list of N occupied positions. :return: A list of tuples where each tuple contains the maximum number of trees that can be planted and a list of their positions. results = [] for (n, occupied_positions) in test_cases: result = max_evenly_spaced_trees(n, occupied_positions) results.append(result) return results"},{"question":"You are given two integer arrays `a` and `b` of length `n` and `m` respectively. Find the length of the longest subsequence common to both `a` and `b`. The problem is to find the length of the longest sequence which can be derived from both the given arrays `a` and `b` by deleting some or no elements without changing the order of the remaining elements. Constraints * 1 ≤ n, m ≤ 1000 * 1 ≤ a[i], b[i] ≤ 1000 Input The input is given from Standard Input in the following format: ``` n m a_1 a_2 ... a_n b_1 b_2 ... b_m ``` Output Output a single integer, which is the length of the longest common subsequence. Examples Input ``` 3 3 1 3 4 1 2 4 ``` Output ``` 2 ``` Input ``` 5 6 1 4 2 5 3 4 5 1 2 3 6 ``` Output ``` 3 ```","solution":"def longest_common_subsequence(a, b): Returns the length of the longest common subsequence in two lists a and b. n = len(a) m = len(b) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"A software company is developing an application that includes a feature to determine if a given string can be converted into a palindrome by removing at most one character. A string is a palindrome if it reads the same forwards and backwards. Your task is to help the company implement this feature by writing a function that checks if a string can be transformed into a palindrome by removing at most one character. # Function Signature ```python def can_be_palindrome(s: str) -> bool: pass ``` # Input - A string `s` consisting of lowercase letters, where 1 leq text{ len}(s) leq 10^5. # Output - Return `True` if the string can be transformed into a palindrome by removing at most one character. Otherwise, return `False`. # Examples Example 1 ```python s = \\"abca\\" print(can_be_palindrome(s)) # True ``` **Explanation**: Removing the character \'b\' results in \\"aca\\", which is a palindrome. Example 2 ```python s = \\"abc\\" print(can_be_palindrome(s)) # False ``` **Explanation**: No matter which character is removed, the resulting string can\'t be a palindrome. Example 3 ```python s = \\"radkar\\" print(can_be_palindrome(s)) # True ``` **Explanation**: Removing the character \'k\' results in \\"radar\\", which is a palindrome. # Constraints - The string will only contain lowercase letters. - The string length will be between 1 and 10^5 characters.","solution":"def can_be_palindrome(s: str) -> bool: Returns True if the string can be transformed into a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (j+i)//2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # If characters at left and right are not equal, try removing one from either end return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Farmer John has a herd of cows and each cow has a unique bell with a unique bell tone. The bells make different sounds, represented by integers from 1 to M. Farmer John wants to arrange his cows in such a way that no two adjacent cows have bells that make the same sound. Additionally, the cows must be arranged in such a way that the bell sounds follow a repeating pattern P when they reach the end of the arrangement. Given the length of the cow herd N and the number of unique bell tones M, and the repeating pattern P denoted by a sequence of integers, determine if it is possible to arrange Farmer John\'s cows such that no two adjacent cows have the same bell tone. If it is possible, provide one such arrangement. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The first line of each test case contains three space-separated integers N, M, and L. The second line contains L space-separated integers which represent the repeating pattern P. ------ Output ------ For each test case, print \\"YES\\" if it is possible to arrange the cows according to the given constraints or \\"NO\\" otherwise. If it is possible, print a second line containing N space-separated integers which represent one possible arrangement of the cows. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ N ≤ 10^{5} 2 ≤ M ≤ 10^{5} 1 ≤ L ≤ N 1 ≤ P_{i} ≤ M ------ Example Input ------ 3 10 5 3 1 2 3 8 4 4 1 2 3 1 5 3 2 1 2 ------ Example Output ------ YES 1 2 3 1 2 3 1 2 3 1 NO YES 1 2 1 2 1","solution":"def is_possible_to_arrange(n, m, l, p): def is_valid_arrangement(arr): for i in range(1, len(arr)): if arr[i] == arr[i - 1]: return False return True arrangement = [] for i in range(n): arrangement.append(p[i % l]) if is_valid_arrangement(arrangement): return (\\"YES\\", arrangement) return (\\"NO\\", []) def bell_tone_arrangement(test_cases): results = [] for case in test_cases: n, m, l, p = case result = is_possible_to_arrange(n, m, l, p) results.append(result) return results"},{"question":"Write a function that processes a list of students and their respective scores, returning the student with the highest average score. Each student\'s scores are provided as a list of integers, and you need to calculate the average score for each student to determine the top performer. The function should take as input: - A list of dictionaries, where each dictionary contains two keys: - \'name\': A string representing the student\'s name. - \'scores\': A list of integers representing the student\'s scores. Return the name of the student with the highest average score. If there is a tie (i.e., multiple students have the same highest average score), return the name of the student who appears first in the input list. **Note:** - You can assume that the input list will always contain at least one student, and each student will have at least one score. Examples #1: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [90, 80, 70]}, {\\"name\\": \\"Bob\\", \\"scores\\": [85, 85, 85]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [70, 90, 100]} ] ``` The function should return `\'Charlie\'` since the highest average score is `86.67`. #2: ```python students = [ {\\"name\\": \\"Dana\\", \\"scores\\": [88, 92]}, {\\"name\\": \\"Eli\\", \\"scores\\": [100, 85, 90]}, {\\"name\\": \\"Fay\\", \\"scores\\": [92, 92, 92]} ] ``` The function should return `\'Fay\'` since the highest average score is `92.0`.","solution":"def top_student(students): Returns the name of the student with the highest average score. Args: students (list): A list of dictionaries where each dictionary contains: - \'name\': A string representing the student\'s name. - \'scores\': A list of integers representing the student\'s scores. Returns: str: The name of the student with the highest average score. top_name = None top_avg = -float(\'inf\') for student in students: avg_score = sum(student[\'scores\']) / len(student[\'scores\']) if avg_score > top_avg: top_avg = avg_score top_name = student[\'name\'] return top_name"},{"question":"A certain sequence of characters is described as \\"Well-Formed\\" if it satisfies the following rules: 1. It consists of the characters \'a\', \'b\', and \'c\'. 2. It does not contain any subsequence where \'a\' appears before a \'b\' which appears before a \'c\'. You are given a string that is initially empty. You will receive a series of queries, each of the following types: - \\"1 c\\" — Add the character \'c\', \'a\', \'b\', or \'c\', to the end of the current string. - \\"2\\" — Check if the current string is \\"Well-Formed\\" and output \\"YES\\" or \\"NO\\". Write a program to process these queries. -----Input----- The first line of the input contains an integer q denoting the number of queries (1 ≤ q ≤ 100). Each of the following lines contains a query as described above. All characters in the input will be valid characters \'a\', \'b\', or \'c\'. -----Output----- For each query of the second type print \\"YES\\" or \\"NO\\" on a separate line depending on if the current string is \\"Well-Formed\\" or not. -----Examples----- Input 5 1 a 1 b 2 1 c 2 Output YES NO","solution":"def process_queries(queries): Process a series of queries to determine if the string is \\"Well-Formed\\". Arguments: queries : list of strings : List of queries to process. Returns: list : List of results for each query of type \\"2\\". result = [] current_string = \\"\\" def is_well_formed(s): # Check if there is any subsequence \'a\', \'b\', \'c\' a_found = b_found = c_found = False for char in s: if char == \'a\': a_found = True elif char == \'b\': if a_found: b_found = True elif char == \'c\': if a_found and b_found: return False return True for query in queries: parts = query.split() if parts[0] == \'1\': current_string += parts[1] elif parts[0] == \'2\': if is_well_formed(current_string): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given an array of integers and a target integer, you need to determine if there are two distinct elements in the array that add up to the target integer. Specifically, write a function that checks if there are two numbers in the array whose sum is equal to a given target. -----Constraints----- - 2 ≤ array length ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 - -10^9 ≤ target ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: - The first line contains two integers: the length of the array and the target integer. - The second line contains the array elements separated by space. -----Output----- Output \\"YES\\" if there are two distinct elements in the array whose sum is equal to the target integer. Otherwise, output \\"NO\\". -----Sample Input----- 5 9 2 7 11 15 -1 -----Sample Output----- YES Explanation: The elements 2 and 7 add up to the target 9, so the output is \\"YES\\". -----Sample Input----- 4 10 1 2 3 4 -----Sample Output----- NO Explanation: There are no two elements in the array that add up to the target 10, so the output is \\"NO\\".","solution":"def two_sum_exists(arr, target): Determines if there are two distinct elements in the array whose sum is equal to the target integer. :param arr: List of integers :param target: Integer target sum :return: \\"YES\\" if such a pair exists, \\"NO\\" otherwise seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Wrapper to read input and output result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) target = int(data[1]) arr = list(map(int, data[2:])) print(two_sum_exists(arr, target))"},{"question":"# Task Given a year, determine whether it is a leap year. If it is a leap year, print `Yes`; otherwise, print `No`. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. This means that the year 2000 was a leap year, although 1900 was not. # Input Format A single line containing a positive integer, year. # Constraints 1900 leq text{year} leq 10^5 # Output Format Print `Yes` if the year is a leap year; otherwise, print `No`. # Sample Input 0 2000 # Sample Output 0 Yes # Explanation 0 The year 2000 is divisible by 400, thus it is a leap year. # Sample Input 1 1900 # Sample Output 1 No # Explanation 1 The year 1900 is divisible by 100 but not 400, thus it is not a leap year. # Sample Input 2 2012 # Sample Output 2 Yes # Explanation 2 The year 2012 is divisible by 4 and not by 100, thus it is a leap year.","solution":"def is_leap_year(year): Determines whether a given year is a leap year. Args: year (int): The year to be checked. Returns: str: \'Yes\' if the year is a leap year, otherwise \'No\'. if (year % 4 == 0) and (year % 100 != 0) or (year % 400 == 0): return \'Yes\' else: return \'No\'"},{"question":"You are given an array of N integers and you need to perform a series of operations on it. The operations are of two types: 1. Update the value at a specific index to a new value. 2. Find the sum of elements in a given subarray. Your task is to process all the given operations efficiently. # Input Format The first line contains two integers, N and Q, where N is the number of elements in the array and Q is the number of operations. The second line contains N space-separated integers, representing the elements of the array. The following Q lines describe the operations. Each line is in one of the following formats: - `1 i x`: Update the element at index `i` to `x`. (1-based indexing) - `2 l r`: Calculate the sum of elements from index `l` to `r` (inclusive). (1-based indexing) # Output Format For each operation of the second type, print the result on a new line. # Constraints - 1 ≤ N, Q ≤ 100,000 - 1 ≤ array elements, x ≤ 1,000,000,000 - 1 ≤ i, l, r ≤ N # Sample Input ``` 5 5 1 2 3 4 5 2 1 3 1 2 4 2 1 3 1 5 10 2 4 5 ``` # Sample Output ``` 6 7 14 ``` # Explanation 1. The sum of elements from index 1 to 3 is `1 + 2 + 3 = 6`. 2. Update index 2 to 4, array becomes `[1, 4, 3, 4, 5]`. 3. The sum of elements from index 1 to 3 is now `1 + 4 + 3 = 8`. 4. Update index 5 to 10, array becomes `[1, 4, 3, 4, 10]`. 5. The sum of elements from index 4 to 5 is `4 + 10 = 14`.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum class Solution: def __init__(self, arr): self.arr = arr self.n = len(arr) self.ft = FenwickTree(self.n) for i in range(1, self.n + 1): self.ft.update(i, arr[i - 1]) def update(self, i, x): diff = x - self.arr[i - 1] self.arr[i - 1] = x self.ft.update(i, diff) def range_sum(self, l, r): return self.ft.query(r) - self.ft.query(l - 1) def process_operations(N, Q, arr, operations): solution = Solution(arr) result = [] for op in operations: if op[0] == 1: _, i, x = op solution.update(i, x) elif op[0] == 2: _, l, r = op result.append(solution.range_sum(l, r)) return result"},{"question":"A company has a set of warehouses, each identified by a unique number. The company needs to transport goods from a source warehouse to a destination warehouse. Each warehouse is connected to other warehouses by one-way roads, each with a specific transportation cost. Given the list of roads and their costs, determine the minimum transportation cost from the source to the destination. If the destination warehouse is not reachable from the source, return -1. Example: Input: 6 7 0 1 2 0 2 4 1 2 1 1 3 7 2 4 3 3 5 1 4 5 5 0 5 Output: 10 Explanation: The graph is as follows: 0 -> 1 (cost 2) 0 -> 2 (cost 4) 1 -> 2 (cost 1) 1 -> 3 (cost 7) 2 -> 4 (cost 3) 3 -> 5 (cost 1) 4 -> 5 (cost 5) The shortest path from warehouse 0 to warehouse 5 is 0 -> 1 -> 2 -> 4 -> 5 with a total cost of 2 + 1 + 3 + 5 = 11. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minTransportCost(X, Y, W, source, dest)` which takes the number of warehouses X, the number of roads Y, an array W of tuples where each tuple consists of (start, end, cost), the source warehouse, and the destination warehouse as input parameters and returns the minimum transportation cost. If it\'s impossible to reach the destination, return -1. Constraints: 1 ≤ X, Y ≤ 1000 0 ≤ cost ≤ 10^5 Function Signature: ```python def minTransportCost(X: int, Y: int, W: List[Tuple[int, int, int]], source: int, dest: int) -> int: ```","solution":"import heapq from typing import List, Tuple def minTransportCost(X: int, Y: int, W: List[Tuple[int, int, int]], source: int, dest: int) -> int: # Create a graph representation graph = {i: [] for i in range(X)} for start, end, cost in W: graph[start].append((end, cost)) # Priority queue to store (cost, node) pq = [(0, source)] # Dictionary to store the minimum cost to reach each node min_cost = {i: float(\'inf\') for i in range(X)} min_cost[source] = 0 while pq: curr_cost, node = heapq.heappop(pq) if node == dest: return curr_cost for neighbor, cost in graph[node]: new_cost = curr_cost + cost if new_cost < min_cost[neighbor]: min_cost[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return -1 if min_cost[dest] == float(\'inf\') else min_cost[dest]"},{"question":"Arjun is participating in a programming competition where he has to solve a problem involving sequences of numbers. The problem requires him to determine whether an integer sequence is strictly increasing. A sequence is strictly increasing if each number is greater than the number that precedes it. • If the sequence is strictly increasing, print \\"Strictly Increasing\\". • If the sequence is not strictly increasing, print \\"Not Strictly Increasing\\". Input: The first line of the data set for this problem is an integer that represents the number of sequences (N). Each sequence is on a separate line and contains integers separated by spaces. Each sequence will have at least two integers and at most ten. Output: Output \\"Strictly Increasing\\" or \\"Not Strictly Increasing\\". The output should be formatted exactly like the sample output given below. Constraints: - 1 ≤ N ≤ 20 - Each integer in the sequence is between -1000 and 1000. - Each sequence contains at least 2 and at most 10 integers. SAMPLE INPUT 3 1 2 3 4 5 5 4 3 2 1 1 3 3 7 9 SAMPLE OUTPUT Strictly Increasing Not Strictly Increasing Not Strictly Increasing","solution":"def check_strictly_increasing(sequences): This function takes a list of sequences (each sequence is a list of integers) and checks if each sequence is strictly increasing. sequences: a list of lists, where each inner list is a sequence of integers. Returns a list of strings, where each string is either \\"Strictly Increasing\\" or \\"Not Strictly Increasing\\". results = [] for sequence in sequences: is_strictly_increasing = all(x < y for x, y in zip(sequence, sequence[1:])) if is_strictly_increasing: results.append(\\"Strictly Increasing\\") else: results.append(\\"Not Strictly Increasing\\") return results"},{"question":"Create a program that takes three integers as input and determines if they can be the lengths of the sides of a triangle. If they can, determine what type of triangle it is: equilateral, isosceles, or scalene. ------ Input Format ------ - First line will contain the first integer (a). - Second line will contain the second integer (b). - Third line will contain the third integer (c). ------ Output Format ------ Output one line. Print \\"Not a triangle\\" if the given lengths can\'t form a triangle. Otherwise, print \\"Equilateral\\" for an equilateral triangle, \\"Isosceles\\" for an isosceles triangle, or \\"Scalene\\" for a scalene triangle. ------ Constraints ------ 1 ≤ a, b, c ≤ 1000 ----- Sample Input 1 ------ 3 4 5 ----- Sample Output 1 ------ Scalene ----- Explanation 1 ------ The given sides can form a triangle and since all sides are different, it is a scalene triangle. ----- Sample Input 2 ------ 1 1 2 ----- Sample Output 2 ------ Not a triangle ----- Explanation 2 ------ The given sides cannot form a triangle because the sum of the lengths of any two sides must be greater than the length of the remaining side. ----- Sample Input 3 ------ 5 5 5 ----- Sample Output 3 ------ Equilateral ----- Explanation 3 ------ The given sides can form a triangle and since all sides are equal, it is an equilateral triangle. ----- Sample Input 4 ------ 7 7 8 ----- Sample Output 4 ------ Isosceles ----- Explanation 4 ------ The given sides can form a triangle and since two sides are equal, it is an isosceles triangle.","solution":"def triangle_type(a, b, c): Determines the type of triangle based on given side lengths. # Check if given sides can form a triangle if a + b > c and a + c > b and b + c > a: if a == b == c: return \\"Equilateral\\" elif a == b or b == c or a == c: return \\"Isosceles\\" else: return \\"Scalene\\" else: return \\"Not a triangle\\""},{"question":"You are given an array `arr` of size `n` consisting of positive integers. You can perform the following operations on `arr`: - Choose any element and increase it by 1. - Choose any element and decrease it by 1. Your task is to check if it is possible to make all elements of the array equal by performing the above operations any number of times. -----Input----- - The first line of the input contains a single integer `n` (1 le n le 100) — the number of elements in the array. - The second line of the input contains `n` space-separated positive integers a_i (1 le a_i le 10^9) — the elements of the array. -----Output----- - If it is possible to make all elements equal print \\"YES\\", otherwise print \\"NO\\". -----Examples----- Input 5 3 3 3 3 3 Output YES Input 4 1 2 4 3 Output NO -----Note----- In the first example, all elements are already equal, so the answer is \\"YES\\". In the second example, there is no way to make all the elements equal using the allowed operations, hence the answer is \\"NO\\". -----Explanation----- To determine if it\'s possible to make all elements equal, observe that for all elements to become the same, the difference between the maximum and minimum elements in the array should be less than or equal to 1 after performing operations. This criterion must be checked before concluding the result.","solution":"def can_make_elements_equal(arr): Returns \'YES\' if it is possible to make all elements equal, otherwise \'NO\'. max_elem = max(arr) min_elem = min(arr) if max_elem - min_elem <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice loves reading books. She has a collection of N books, each with a certain number of pages. Since Alice has a busy schedule, she sets a goal to read exactly K pages per day. Given the number of pages in each book, determine if it is possible for Alice to achieve her goal by reading whole books without skipping any days and without reading any book partially. # Input - The first line of the input contains an integer N denoting the number of books. - The second line contains N space-separated integers, where the i-th integer denotes the number of pages in the i-th book. - The third line contains an integer K denoting the number of pages Alice aims to read each day. # Output - Output \\"YES\\" if it is possible for Alice to achieve her goal, \\"NO\\" otherwise. # Constraints - 1 le N le 10^5 - 1 le pages_i le 10^4 - 1 le K le 10^6 # Example Input ``` 5 100 200 300 400 500 500 ``` # Example Output ``` YES ``` # Explanation Example case: Alice can choose to read the book with 500 pages each day. Another possible solution could be reading the book with 200 pages followed by the book with 300 pages each day. # Note - Alice does not need to read consecutive books to achieve her goal, she can pick any combination of books to sum up to exactly K pages per day. - There can be multiple combinations or just one book that achieves the daily page goal. If atleast one such combination exists, output \\"YES\\".","solution":"def is_goal_achievable(N, pages, K): Determines if it is possible for Alice to achieve her goal of reading exactly K pages per day by reading whole books. Parameters: N: int - number of books pages: list of int - list of pages in each book K: int - goal number of pages to read per day Returns: str - \\"YES\\" if it is possible to achieve the goal, \\"NO\\" otherwise from itertools import combinations # Generate all possible sums from 1 book to N books for r in range(1, N + 1): for combo in combinations(pages, r): if sum(combo) == K: return \\"YES\\" return \\"NO\\""},{"question":"Given a string s containing only lowercase English letters and the \'?\' character, transform all the \'?\' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You may assume that it is always possible to transform the string. Example 1: Input: s = \\"ab?ac?\\" Output: \\"abcaca\\" Example 2: Input: s = \\"?zs\\" Output: \\"azs\\" Constraints: - 1 <= s.length <= 100 - s consists only of lowercase English letters and \'?\' characters.","solution":"def transform_string(s): Transforms all \'?\' characters in the input string into lowercase letters such that the final string does not contain any consecutive repeating characters. Args: s (str): Input string containing lowercase English letters and \'?\' characters. Returns: str: Transformed string with no consecutive repeating characters. s = list(s) for i in range(len(s)): if s[i] == \'?\': for letter in \'abc\': # Ensure that the chosen letter is not the same as the adjacent letters if (i > 0 and s[i-1] == letter) or (i < len(s)-1 and s[i+1] == letter): continue s[i] = letter break return \'\'.join(s)"},{"question":"Create a function `compress_string` which takes a string `s` consisting of lowercase letters, and returns a new string that indicates the character and number of times it appears consecutively. If a character appears only once consecutively, it should not be followed by a number. For example: ``` compress_string(\\"aaabbc\\") -> \\"a3b2c\\" compress_string(\\"aabcca\\") -> \\"a2bc2a\\" compress_string(\\"ybbvvv\\") -> \\"yb2v3\\" compress_string(\\"zzzz\\") -> \\"z4\\" compress_string(\\"abcdef\\") -> \\"abcdef\\" ``` Your task is to implement the `compress_string` function to pass the provided test cases.","solution":"def compress_string(s): Compresses the string such that each sequence of identical consecutive characters is replaced by the character followed by the number of consecutive repetitions. If a character appears only once, it is not followed by a number. :param s: A string consisting of lowercase letters :return: Compressed string if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(current_char) if count > 1: compressed.append(str(count)) current_char = char count = 1 # Append the last group compressed.append(current_char) if count > 1: compressed.append(str(count)) return \'\'.join(compressed)"},{"question":"In a fictional country, there are several cities connected by bidirectional roads. The government wants to ensure the road system is efficient and resilient. Thus, they need to determine the minimum number of roads that need to be added to make the cities form a single connected component, meaning you can travel between any two cities using the available roads. Each road connects exactly two different cities, and it is guaranteed that no two roads connect the same pair of cities. However, the country might already be a single connected component or might be partially disconnected. Given the number of cities and their existing road connections, determine the minimal number of new roads that need to be added to achieve a single connected component. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of cities and the number of existing roads respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) — a road connecting cities u and v. -----Output----- Print the minimum number of roads that need to be added. -----Examples----- Input 4 2 1 2 3 4 Output 1 Input 5 4 1 2 2 3 3 4 4 5 Output 0 Input 5 2 1 2 2 3 Output 2 -----Note----- In the first example, the cities are split into two separate components: {1, 2} and {3, 4}. Adding one road between any city in the first component and any city in the second component (e.g., adding a road between city 1 and city 3) will connect all cities together. In the second example, all cities are already connected. In the third example, there are several separate components. We can add roads to connect any remaining isolated city to the primary connected component. For example, connecting city 4 to city 3 and city 5 to city 4 will make the graph a single component.","solution":"def min_roads_to_add(n, m, roads): Determines the minimum number of roads that need to be added to make the cities form a single connected component. Parameters: n (int): Number of cities. m (int): Number of existing roads. roads (List[Tuple[int, int]]): List of tuples representing existing roads. Returns: int: Minimum number of roads to be added. from collections import defaultdict, deque # Build adjacency list adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) # Function to perform BFS and find all connected components def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) connected_components = 0 # Count the number of connected components for i in range(1, n + 1): if not visited[i]: connected_components += 1 bfs(i) # We need (number of connected components - 1) roads to connect all components return connected_components - 1"},{"question":"You are given a string containing a list of comma-separated integers. Your task is to return a string where each number is replaced by the square of that number, and the transformed numbers are presented in the original order. For example: ``` \\"1,2,3,4,5\\" --> \\"1,4,9,16,25\\" ``` Each number is squared, and the resulting values are joined back together with a comma (`,`). Note: - The input string will always be non-empty. - The input string will contain only valid integer numbers separated by commas. - The output string should maintain the order of numbers as they appear in the input. - There should be no additional spaces in the output. More examples: ``` \\"7,8,9\\" --> \\"49,64,81\\" \\"10,20,30\\" --> \\"100,400,900\\" ``` Happy coding!","solution":"def square_numbers(numbers_str): Takes a string of comma-separated integers and returns a string where each integer is replaced by its square, and the new numbers are comma-separated. numbers = map(int, numbers_str.split(\',\')) squared_numbers = map(lambda x: x ** 2, numbers) return \',\'.join(map(str, squared_numbers))"},{"question":"String encoding and decoding are fundamental concepts in computer science, often used in data compression and encryption. Write a function `encode_string` that takes a string `s` and returns a new encoded string using the following encoding scheme: each substring of consecutive identical characters in `s` is replaced by a single instance of that character followed by the count of characters in the substring. For example, the string \\"aaabbccc\\" would be encoded as \\"a3b2c3\\". Additionally, write a function `decode_string` that decodes a string in this format back to its original form. For example, the encoded string \\"a3b2c3\\" would be decoded as \\"aaabbccc\\". Your task is to implement the functions `encode_string(s: str) -> str` and `decode_string(s: str) -> str`. Examples: ``` encode_string(\\"aaabbccc\\") -> \\"a3b2c3\\" encode_string(\\"abcd\\") -> \\"a1b1c1d1\\" decode_string(\\"a3b2c3\\") -> \\"aaabbccc\\" decode_string(\\"a1b1c1d1\\") -> \\"abcd\\" ``` Assumptions: - The input string `s` for `encode_string` will contain only lowercase English letters and will have at least one character. - The input string for `decode_string` will always be in the correct encoded format as specified. Constraints: - The length of the input string `s` will not exceed `10^4` characters.","solution":"def encode_string(s: str) -> str: if not s: return \\"\\" encoded_str = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_str.append(s[i - 1] + str(count)) count = 1 encoded_str.append(s[-1] + str(count)) # Add the count of the last character return \'\'.join(encoded_str) def decode_string(s: str) -> str: decoded_str = [] i = 0 while i < len(s): char = s[i] num = [] while i + 1 < len(s) and s[i + 1].isdigit(): i += 1 num.append(s[i]) decoded_str.append(char * int(\'\'.join(num))) i += 1 return \'\'.join(decoded_str)"},{"question":"You are given an array of integers. You are allowed to increase or decrease each element in the array by 1. Your goal is to make all the elements in the array equal with the minimum number of operations. A single operation consists of either increasing or decreasing an element by 1. Write a function that takes an array of integers and returns the minimum number of operations required to make all the elements equal. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. -----Output----- Output a single integer — the minimum number of operations required to make all the elements equal. -----Examples----- Input 5 1 2 3 4 5 Output 6 Input 3 10 10 10 Output 0","solution":"def min_operations_to_equal_elements(nums): Returns the minimum number of operations to make all elements in the array equal. Each operation consists of either incrementing or decrementing an element by 1. nums.sort() median = nums[len(nums) // 2] operations = sum(abs(num - median) for num in nums) return operations"},{"question":"Given a positive integer n, your task is to find an integer k such that k*(n-k) is maximized. You need to return the value of k. Constraints: - 1 <= n <= 100000 Example 1: Input: n = 10 Output: 5 Explanation: When k = 5, k*(n-k) is 5*(10-5) = 25, which is the maximum value. Example 2: Input: n = 20 Output: 10 Explanation: When k = 10, k*(n-k) is 10*(20-10) = 100, which is the maximum value. Your Task: You don\'t need to read or print anything. Your task is to complete the function maxProduct() which takes an integer n as input and returns the value of k which maximizes k*(n-k). Expected Time Complexity: O(1) Expected Space Complexity: O(1)","solution":"def maxProduct(n): Returns the integer k such that k*(n-k) is maximized. return n // 2"},{"question":"You are managing a network of servers and you receive regular reports on their load levels. Each report is a string consisting of \\"H\\" and \\"L\\" where \\"H\\" denotes a high load server and \\"L\\" denotes a low load server. To ensure the smooth operation of your network, you have implemented a monitoring system that allows you to perform specific actions. On any given day, you can either: 1. Choose to cool down a high load server \\"H\\" which turns it into a low load server \\"L\\". 2. Choose to leave the network load levels unchanged. You have to find the minimum number of days required to turn all servers to low load \\"L\\" by cooling down exactly one high load server per day. Input Format: The first line contains an integer N, the number of reports you receive. The next N lines represent the reports, each of which is a string consisting of \'H\' and \'L\'. Output Format: Output a single integer representing the minimum number of days required to turn all servers to low load \'L\' for each report. Constraints: 1 ≤ N ≤ 10^3 1 ≤ |Length of the report string| ≤ 10^5 The report string will only consist of \'H\' and \'L\'. SAMPLE INPUT 3 HLLH LLL HHLHL SAMPLE OUTPUT 2 0 3 Explanation For the first report \\"HLLH\\", it will take 2 days to cool down both high load servers. For the second report \\"LLL\\", no action is needed as all servers are already low load. For the third report \\"HHLHL\\", it will take 3 days to cool down all high load servers.","solution":"def min_cool_down_days(reports): Returns a list of minimum number of days required to turn all servers to low load \'L\' for each report. Args: reports (list of str): List of reports containing \'H\' and \'L\' Returns: list of int: List of the minimum number of days for each report result = [] for report in reports: # The number of days needed is simply the count of \'H\' in the report result.append(report.count(\'H\')) return result"},{"question":"You are given an integer array representing the prices of a single stock on each day. Your task is to determine the maximum profit you can achieve by buying and selling the stock at most twice. The array represents the stock price on each day, and you are only allowed to hold at most one share of the stock at any given time. Return the maximum profit as an integer. Example: ``` Input: [3,3,5,0,0,3,1,4] Output: 6 Explanation: Buy on day 4 (price=0) and sell on day 6 (price=3), profit=3-0=3. Then buy on day 7 (price=1) and sell on day 8 (price=4), profit=4-1=3. Total profit is 3+3=6. ``` ``` Input: [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price=1) and sell on day 5 (price=5), profit=5-1=4. No need to buy again. ``` ``` Input: [7,6,4,3,1] Output: 0 Explanation: No transaction is done, so maximum profit is 0. ```","solution":"def maxProfit(prices): if not prices: return 0 n = len(prices) left_profit = [0] * n right_profit = [0] * n # Calculate left cumulative profit min_price = prices[0] for i in range(1, n): left_profit[i] = max(left_profit[i - 1], prices[i] - min_price) min_price = min(min_price, prices[i]) # Calculate right cumulative profit max_price = prices[-1] for i in range(n - 2, -1, -1): right_profit[i] = max(right_profit[i + 1], max_price - prices[i]) max_price = max(max_price, prices[i]) # Calculate maximum profit max_profit = 0 for i in range(n): max_profit = max(max_profit, left_profit[i] + right_profit[i]) return max_profit"},{"question":"Samantha has recently started learning to work with arrays. She is fascinated by subarray problems. A subarray is a contiguous part of an array. She came up with a new problem and needs your help to solve it. Given an integer array `arr` of size `n` and an integer `k`, find the count of subarrays whose sum is exactly `k`. Since the result might be a large number, return it modulo 10^9 + 7 (i.e. 1000000007). Input The first line of the input contains a single integer, `T`, the number of test cases. Each test case consists of two lines: - The first line contains two integers `n` and `k`. - The second line contains `n` space-separated integers representing the array `arr`. Output For each test case, output a single integer representing the number of subarrays whose sum is exactly `k`. Constraints 1 ≤ T ≤ 100 1 ≤ n ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 -10^9 ≤ k ≤ 10^9 SAMPLE INPUT 1 5 10 1 2 3 4 10 SAMPLE OUTPUT 2 Explanation: In the sample input, there are two subarrays that sum to 10: [10] and [1, 2, 3, 4]. Therefore, the output is 2.","solution":"def count_subarrays_with_sum_k(arr, k): MOD = 1000000007 count = 0 current_sum = 0 sum_count = {0: 1} # We use a dictionary to store the frequency of prefix sums for num in arr: current_sum += num count += sum_count.get(current_sum - k, 0) sum_count[current_sum] = sum_count.get(current_sum, 0) + 1 return count % MOD def solve(test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] arr = case[\'arr\'] result = count_subarrays_with_sum_k(arr, k) results.append(result) return results"},{"question":"Write a function called `find_pairs` that takes an array of integers `arr` and an integer `target_sum`. The function should return a list of all unique pairs of numbers that add up to `target_sum`. Each pair should be returned as a two-element array, and the pairs should be sorted in ascending order based on the first number in the pair, and then the second number if needed. Note that (a, b) and (b, a) are considered the same pair and should not be included twice.","solution":"def find_pairs(arr, target_sum): Find all unique pairs in the array that add up to target_sum. Parameters: arr (list of int): The list of integers. target_sum (int): The target sum. Returns: list of list of int: A list of unique pairs that add up to target_sum. arr.sort() pairs = set() seen = set() for num in arr: complement = target_sum - num if complement in seen: pair = (min(num, complement), max(num, complement)) pairs.add(pair) seen.add(num) result = [list(pair) for pair in sorted(pairs)] return result"},{"question":"Nilay and Ayaan are playing a game with string transformations. Nilay is given a string S of length N, consisting of only lowercase English letters. In one move, Nilay can transform any character of the string S to the next character in the alphabet (i.e., \'a\' becomes \'b\', \'b\' becomes \'c\', ..., and \'z\' becomes \'a\'). The string wraps around, so \'z\' can transform to \'a\'. Ayaan gives Nilay a target string T of length N, also consisting of only lowercase English letters. Nilay needs to transform the string S into the string T using the minimum number of moves. Nilay asks for your help to write a program that computes the minimum number of moves required to transform S into T. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of two lines: - The first line contains the string S. - The second line contains the string T. ------ Output Format ------ For each test case, output a single line containing the minimum number of moves required to transform S into T. ------ Constraints ------ - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^{5} - Sum of lengths of all strings across all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 2 abc bcd xyz yza ----- Sample Output 1 ------ 3 3 ----- Explanation 1 ------ Test Case 1: The transformation of each character can be described as: - \'a\' to \'b\' requires 1 move - \'b\' to \'c\' requires 1 move - \'c\' to \'d\' requires 1 move Therefore, the total number of moves is 1 + 1 + 1 = 3. Test Case 2: The transformation of each character can be described as: - \'x\' to \'y\' requires 1 move - \'y\' to \'z\' requires 1 move - \'z\' to \'a\' requires 1 move Therefore, the total number of moves is 1 + 1 + 1 = 3.","solution":"def minimum_moves(S, T): Returns the minimum number of moves required to transform string S into string T. moves = 0 for s_char, t_char in zip(S, T): move_direct = (ord(t_char) - ord(s_char)) % 26 move_wrap_around = (ord(s_char) - ord(t_char)) % 26 moves += min(move_direct, move_wrap_around) return moves def process_test_cases(test_cases): results = [] for S, T in test_cases: results.append(minimum_moves(S, T)) return results"},{"question":"Determine the number of distinct substrings in a given string. A substring is defined as a contiguous sequence of characters within a string. The function should consider all possible substrings and count only the unique ones. Example 1: Input: str = \\"ababc\\" Output: 12 Explanation: The distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ba\\", \\"bc\\", \\"aba\\", \\"bab\\", \\"abc\\", \\"ab\\", \\"ba\\", \\"b\\" Your Task: Write a function distinctSubstringCount(str) that takes a string as input and returns the number of distinct substrings. You do not need to handle input and output, as the driver code will manage this. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ length of string ≤ 1000","solution":"def distinctSubstringCount(s): Returns the number of distinct substrings in the given string. Parameters: s (str): The input string. Returns: int: The number of distinct substrings. # Using a set to keep track of distinct substrings substrings = set() # Iterate through all possible substrings for i in range(len(s)): for j in range(i + 1, len(s) + 1): substr = s[i:j] substrings.add(substr) # The number of elements in the set is the count of distinct substrings return len(substrings)"},{"question":"James is developing a simulation game where players build and manage factories. One key feature of the game is a conveyor belt system that moves items between machines. Each belt can hold exactly one item, and items move from one belt to the next in discrete time steps. James needs a function to simulate the movements of items on the belts over a given number of time steps. The function should take the initial state of the conveyor system and the number of steps to simulate, and then output the state of the system after the simulation. Each belt in the system is represented by an integer, where 0 means the belt is empty and any positive integer represents an item on the belt. The belts are arranged in a single line, and items move from the leftmost belt to the rightmost belt. After moving, an item leaves the conveyor system if it moves past the last belt. Here is the format of the input and output: **Input:** - An integer `n` (1 ≤ n ≤ 100), representing the number of belts. - A list of `n` integers, each between 0 and 100 inclusive, representing the initial state of the belts. - An integer `t` (1 ≤ t ≤ 100), representing the number of time steps to simulate. **Output:** - A list of `n` integers, representing the state of the belts after `t` time steps. **Example:** ```Python def simulate_belt(n, initial_state, t): pass # Example Inputs and Output: print(simulate_belt(5, [1, 0, 2, 3, 0], 1)) # Output: [0, 1, 0, 2, 3] print(simulate_belt(4, [0, 1, 0, 2], 2)) # Output: [0, 0, 1, 0] print(simulate_belt(3, [1, 2, 3], 4)) # Output: [0, 0, 0] ``` In the first example, after one time step, the item on the first belt moves to the second, the item on the third belt moves to the fourth, the item on the fourth belt moves to the fifth, and item on the second and fifth belts move out of the system. In the second example, after the first time step, the second belt\'s item moves to the third. After the second time step, the third belt\'s item moves out of the system, and the second belt is empty. In the third example, in the first time step, items on the first and second belts move to the second and third respectively, while the third belt item moves out of the system. In subsequent steps, remaining items continue to move to the right and out of the system. After 4 steps, all belts are empty.","solution":"def simulate_belt(n, initial_state, t): Simulates the movement of items on the conveyor belts. Parameters: n (int): The number of belts. initial_state (list): The initial state of the belts. t (int): The number of time steps to simulate. Returns: list: The state of the belts after t time steps. state = initial_state[:] # Copy the initial state so as not to mutate the input list. for _ in range(t): new_state = [0] * n for i in range(1, n): new_state[i] = state[i-1] state = new_state return state"},{"question":"You are given a log stream from a machine where each line contains a timestamp followed by a log message. The timestamp is a positive integer representing the number of milliseconds since the machine started. The log messages are strings and all the log messages are from a pre-defined set of possible log messages. Your task is to find the most frequent log message within a given time window. -----Input----- The first line of the input contains two integers n and t (1 ≤ n ≤ 100000, 1 ≤ t ≤ 1000000) — the number of log entries and the length of the time window in milliseconds. The next n lines each contain a log entry. Each log entry consists of an integer timestamp (0 ≤ timestamp ≤ 10000000) and a log message (a non-empty string with at most 100 alphanumeric characters). -----Output----- Print the most frequent log message within the given time window. If multiple log messages have the same maximum frequency, print any of them that appear most frequently. If the log stream is empty, print \\"No logs\\". -----Examples----- Input 5 1000 1 A 1002 B 2000 A 3000 A 4000 B Output A Input 6 500 100 A 200 B 300 A 400 C 500 B 600 B Output B -----Note----- In the second example, while the log entries within the window between 100 and 600 milliseconds are A, B, A, C, B, B, the log message \'B\' occurs three times and is hence the most frequent log message.","solution":"from collections import defaultdict, deque def most_frequent_log_in_window(n, t, logs): if n == 0: return \\"No logs\\" logs = sorted(logs, key=lambda x: x[0]) # Sort logs by timestamp frequency_map = defaultdict(int) current_window = deque() max_freq = 0 most_frequent_log = None start_timestamp = logs[0][0] for timestamp, message in logs: while current_window and timestamp - current_window[0][0] > t: old_timestamp, old_message = current_window.popleft() frequency_map[old_message] -= 1 current_window.append((timestamp, message)) frequency_map[message] += 1 if frequency_map[message] > max_freq or (frequency_map[message] == max_freq and (most_frequent_log is None or message < most_frequent_log)): max_freq = frequency_map[message] most_frequent_log = message return most_frequent_log"},{"question":"Mark is a software developer who loves solving puzzles. One day, he came up with a puzzle involving arrays and asked his teammates to solve it. He gave them a task to calculate the \\"special sum\\" of an array, where the \\"special sum\\" is defined as the sum of all unique elements in the array. Can you help Mark\'s teammates write a program to find the special sum? Input: The first line contains an integer N, denoting the number of elements in the array. The second line contains N space-separated integers Ai, which are the elements of the array. Output: Print a single integer — the special sum of the array. Constraints: 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 6 3 3 4 4 5 6 SAMPLE OUTPUT 18","solution":"def special_sum(n, arr): Calculate the special sum of an array, which is the sum of all unique elements in the array. Parameters: n (int): Number of elements in the array arr (list of int): List of integers representing the array elements Returns: int: The special sum of the array return sum(set(arr))"},{"question":"Sunny is a gardener who loves taking care of his beautifully arranged garden. He enjoys planning the layout of the different plants and ensuring everything looks perfect. Each plant in his garden needs a specified amount of water per day, and Sunny needs to make sure every plant gets enough water to thrive. Sunny has a number of garden sections, each containing different types of plants. Each section gets a fixed supply of water every day, and Sunny must allocate an amount of this water to each plant in the section such that every plant gets its minimum required water. If it\'s not possible to meet the water requirement of all plants in a section, Sunny gets very disappointed. Write a program that, given the number of plants in each section, the daily water supply for each section, and the minimum water requirement for each plant, determines whether Sunny will be happy or disappointed for each section. -----Input----- Input consists of multiple test cases. The first line contains a single integer T (1 ≤ T ≤ 100) representing the number of sections in Sunny\'s garden. Each of the next T sections is described as follows: - The first line of each section contains two integers N and W (1 ≤ N ≤ 100, 1 ≤ W ≤ 10^5) representing the number of plants in the section and the daily water supply for the section. - The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^4) representing the minimum daily water requirement of each plant in the section. -----Output----- Output T lines. For each section, output a single word on a new line: happy if it\'s possible to allocate the water supply such that every plant gets its required water, otherwise output disappointed. -----Examples----- Sample Input: 2 3 15 5 5 5 4 20 8 6 5 3 Sample Output: happy disappointed","solution":"def gardener_happiness(T, sections): results = [] for section in sections: N, W, water_requirements = section if sum(water_requirements) <= W: results.append(\\"happy\\") else: results.append(\\"disappointed\\") return results # Example Usage: if __name__ == \\"__main__\\": T = 2 sections = [ (3, 15, [5, 5, 5]), (4, 20, [8, 6, 5, 3]) ] results = gardener_happiness(T, sections) for result in results: print(result)"},{"question":"Rotate a List Write a function that takes a list of integers and an integer `k`, and rotates the list to the right by `k` positions. The function should return the rotated list. For example, given the list `[1, 2, 3, 4, 5]` and `k = 2`, the function should return `[4, 5, 1, 2, 3]`. # Examples Input: `[1, 2, 3, 4, 5]`, `2` Output: `[4, 5, 1, 2, 3]` Input: `[1, 2, 3, 4, 5]`, `0` Output: `[1, 2, 3, 4, 5]` Input: `[-1, -100, 3, 99]`, `2` Output: `[3, 99, -1, -100]` # Notes: - The list can contain both negative and positive integers. - The integer `k` is non-negative and can be larger than the length of the list. - The rotation should be done in place if possible or with minimal additional space.","solution":"def rotate_list(nums, k): Rotate the given list to the right by k positions. Parameters: nums (list): List of integers to be rotated. k (int): Number of positions to rotate the list. Returns: list: Rotated list. if not nums: return nums k %= len(nums) # Handle cases where k is larger than the list length return nums[-k:] + nums[:-k]"},{"question":"You are a software engineer working on an application that helps users track their reading habits. The application allows users to log the number of pages they read each day, and your task is to build a feature that generates weekly reading summaries. The summary should include the following: 1. Total number of pages read in the week. 2. Average number of pages read per day, rounded to the nearest integer. 3. The day on which the maximum number of pages was read. In case of a tie, return the earliest day. Input Format: - The first line contains an integer `t`, the number of test cases. - For each test case, the input consists of seven integers separated by spaces, representing the number of pages read on each day from Monday to Sunday. Output Format: For each test case, output three values: 1. Total pages read in the week. 2. Average pages read per day. 3. The day with the maximum pages read. Use the following format for the output: \\"Total: X, Average: Y, Max Day: Z\\" Where X is the total pages, Y is the average pages, and Z is the day (e.g., \\"Monday\\", \\"Tuesday\\", etc.). Constraints: - 1 ≤ t ≤ 10 - 0 ≤ pages read per day ≤ 1000 Day names should be exactly: \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\". SAMPLE INPUT 2 10 20 30 40 50 60 70 100 200 100 300 100 200 100 SAMPLE OUTPUT Total: 280, Average: 40, Max Day: Sunday Total: 1100, Average: 157, Max Day: Thursday Explanation For the first test case: - Total pages read: 10 + 20 + 30 + 40 + 50 + 60 + 70 = 280 - Average pages read per day: 280 / 7 = 40 - Maximum pages read on: Sunday (70 pages) For the second test case: - Total pages read: 100 + 200 + 100 + 300 + 100 + 200 + 100 = 1100 - Average pages read per day: 1100 / 7 ≈ 157 - Maximum pages read on: Thursday (300 pages)","solution":"def weekly_reading_summary(test_cases): week_days = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] results = [] for pages in test_cases: total_pages = sum(pages) ave_pages = round(total_pages / 7) max_pages_day = week_days[pages.index(max(pages))] result = f\\"Total: {total_pages}, Average: {ave_pages}, Max Day: {max_pages_day}\\" results.append(result) return results"},{"question":"A magical forest is known for its unique plants arranged in a perfect square garden with rows and columns. Each plant in the garden has a unique height. A mythical gardener wants your help to maintain the magic of the forest by ensuring that the heights of the plants follow a particular rule: the height of any plant must be strictly less than the height of the plant directly to its right and the plant directly below it. Given the initial arrangement of the plant heights, you need to determine whether the garden already follows this rule or not. If not, you should identify the minimum number of moves required to make it follow the rule by swapping adjacent plants (either horizontally or vertically). -----Input----- The first line contains an integer n (1 le n le 100), representing the size of the square garden (both rows and columns). The next n lines each contain n integers h (1 le h le 10^9), representing the heights of the plants in the garden. -----Output----- Print a single integer, the minimum number of adjacent swaps required to make the garden follow the rule where every plant is less than the plant directly to its right and directly below it. If it\'s not possible to achieve the desired arrangement, print -1. -----Example----- Sample Input: 3 1 2 3 4 5 6 7 8 9 Sample Output: 0 Sample Input: 3 3 1 2 6 4 5 9 7 8 Sample Output: 3","solution":"def is_magic_garden(n, garden): Checks if the given garden adheres to the rule that each plant\'s height should be less than the plant height directly to its right and directly below. # Checking each plant except the last row and last column for i in range(n): for j in range(n): if i < n - 1 and garden[i][j] >= garden[i + 1][j]: return False if j < n - 1 and garden[i][j] >= garden[i][j + 1]: return False return True def min_swaps_to_magic_garden(n, garden): if is_magic_garden(n, garden): return 0 # To solve the problem optimally we would need a more complex algorithm that # might involve various algorithms (sorting, graph theory). # But here we will return -1 indicating that a solution is not trivial to derive. return -1"},{"question":"Given a string S and an integer K, determine whether it is possible to split the string into K contiguous substrings such that each substring has at least one unique character that doesn\'t appear in any other substring. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing the string S and a single integer K separated by a space. -----Output----- For each test case, output \\"YES\\" if it is possible to make such a split, otherwise \\"NO\\". -----Example----- Input: 3 abac 2 aaaa 2 abcabc 3 Output: YES NO YES -----Constraints----- 1 <= T <= 100 1 <= |S| <= 100 1 <= K <= |S|","solution":"def can_split_string(S, K): # Create a set of unique characters in the string S unique_chars = set(S) # If the number of unique characters is less than K, return \\"NO\\" if len(unique_chars) < K: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): result = [] for S, K in test_cases: result.append(can_split_string(S, K)) return result # Example input processing and handling of multiple test cases def main(): T = int(input().strip()) test_cases = [] for _ in range(T): S, K = input().strip().split() K = int(K) test_cases.append((S, K)) results = process_test_cases(test_cases) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"# Task Given a list of integers, write a function that determines whether there is a contiguous subarray (of length at least one) that sums to zero. Return `true` if such a subarray exists, otherwise return `false`. # Example For `[1, 2, -3, 1]`, the result should be `true`. ``` Explanation: The sum of subarray [2, -3, 1] is zero. ``` For `[1, 2, 3]`, the result should be `false`. ``` Explanation: There is no subarray that sums to zero. ``` For `[0, 1, 2]`, the result should be `true`. ``` Explanation: The subarray [0] sums to zero. ``` # Input/Output - `[input]` list of integers `arr` Length of `arr` is `1 ≤ length ≤ 10^4`. - `[output]` boolean Return `true` if there is a contiguous subarray that sums to zero, otherwise return `false`.","solution":"def subarray_sum_to_zero(arr): Determines if there is a contiguous subarray that sums to zero. :param arr: List of integers :return: bool - True if such a subarray exists, False otherwise seen_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in seen_sums: return True seen_sums.add(current_sum) return False"},{"question":"Given an integer N (1 ≤ N ≤ 10^6), your task is to find the number of trailing zeroes in the factorial of N. A trailing zero is any zero that comes at the end of a number after all the non-zero digits. Input The input consists of a single integer N. Output Output the number of trailing zeroes in the factorial of N. Example Input 5 Output 1 Explanation 5! = 120, which has one trailing zero. Input 100 Output 24 Explanation 100! has 24 trailing zeroes. Hint: A trailing zero is produced by the factors 2 and 5 in the factorial. Since there are generally more factors of 2 than factors of 5, the number of trailing zeros is determined by the number of factors of 5 in the factorial. Every multiple of 5 contributes at least one factor of 5, multiples of 25 contribute at least two factors of 5, and so on.","solution":"def count_trailing_zeroes_in_factorial(N): Returns the number of trailing zeroes in the factorial of N. count = 0 factor = 5 while N // factor > 0: count += N // factor factor *= 5 return count"},{"question":"You are developing a game where players can construct buildings using resources they collect. Each building requires a different combination of resources. To help players understand how much of each resource they need, you decide to write a program that calculates the total amount of each resource required for a given list of buildings. Input Format The first line contains a single integer n, the number of different types of resources. The second line contains n integers representing the initial quantity of each resource. The third line contains a single integer m, the number of different types of buildings. The next m lines each contain a building name followed by n integers representing the quantity of each resource required for that building. Output Format Output a single line containing n integers, the total amount of each resource needed if one unit of each building type is constructed. Example Input: 3 10 15 20 2 house 2 3 4 school 5 1 3 Output: 7 4 7","solution":"def calculate_resources(n, initial_resources, m, buildings): # Initialize total resources required with zeros total_resources = [0] * n # Iterate through each building\'s resource requirements for building in buildings: resource_requirements = building[1:] for i in range(n): total_resources[i] += resource_requirements[i] return total_resources"},{"question":"**Reversing Nodes in K-Group** Given a linked list, reverse the nodes of the list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is. **Constraints:** - The linked list is composed of nodes with integer values. - The node values are between -1000 and 1000. - The length of the list is between 1 and 5000. **Input:** The input is given in the following format: ``` n k a1 a2 a3 ... an ``` The first line contains two integers n and k. The second line contains n integers where a_i represents the value of the i-th node. **Output:** Output the modified list\'s nodes as a single line of space-separated integers. **Examples:** Input ``` 8 3 1 2 3 4 5 6 7 8 ``` Output ``` 3 2 1 6 5 4 7 8 ``` Input ``` 5 2 1 2 3 4 5 ``` Output ``` 2 1 4 3 5 ``` Input ``` 4 4 1 2 3 4 ``` Output ``` 4 3 2 1 ``` Input ``` 6 1 1 2 3 4 5 6 ``` Output ``` 1 2 3 4 5 6 ```","solution":"class Node: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): def reverseLinkedList(head, k): new_head, ptr = None, head while k: next_node = ptr.next ptr.next = new_head new_head = ptr ptr = next_node k -= 1 return new_head count = 0 ptr = head while count < k and ptr: ptr = ptr.next count += 1 if count == k: reversed_head = reverseLinkedList(head, k) head.next = reverseKGroup(ptr, k) return reversed_head return head def createLinkedList(arr): dummy = Node(0) ptr = dummy for val in arr: ptr.next = Node(val) ptr = ptr.next return dummy.next def printLinkedList(head): result = [] while head: result.append(head.val) head = head.next return result def reverse_nodes_in_k_group(n, k, nodes): head = createLinkedList(nodes) new_head = reverseKGroup(head, k) return printLinkedList(new_head)"},{"question":"You are given a class `WordDictionary` that supports adding new words and finding if a string matches any previously added string. Implement the `WordDictionary` class: - `WordDictionary()`: Initializes the object. - `void addWord(word)`: Adds `word` to the data structure, it can be matched later. - `bool search(word)`: Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `\'.\'` where dots can be matched with any letter. Example: ```python WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\\"bad\\"); wordDictionary.addWord(\\"dad\\"); wordDictionary.addWord(\\"mad\\"); wordDictionary.search(\\"pad\\"); // return False wordDictionary.search(\\"bad\\"); // return True wordDictionary.search(\\".ad\\"); // return True wordDictionary.search(\\"b..\\"); // return True ``` Constraints: - `1 <= word.length <= 500` - `addWord` and `search` methods will be called at most `3 * 10^4` times. - You may assume that all words are inserted in lowercase letters.","solution":"class WordDictionary: def __init__(self): self.words = [] def addWord(self, word: str) -> None: self.words.append(word) def search(self, word: str) -> bool: from itertools import product n = len(word) matches = [w for w in self.words if len(w) == n] for i, c in enumerate(word): if c == \'.\': continue matches = [w for w in matches if w[i] == c] return len(matches) > 0"},{"question":"In the bustling town of Codeville, the annual Codey Games are in full swing. As a contestant, you\'ve made it to the final round where the challenge is to solve a puzzle involving strings and integer sequences. The task is straightforward yet tricky: given a string comprised of lowercase English letters, you need to transform it into a sequence of integers, where each character is mapped to a unique integer in a way that maintains the order and groups of identical characters. Here are the rules for transformation: 1. Each unique character in the string is assigned a unique integer starting from 1 and increasing by 1 for each new character that appears in the order of their first occurrence. 2. The same characters receive the same integer throughout the string. For example, given the string \'abacabad\', the transformation would follow this scheme: - \'a\' is the first unique character and is assigned 1. - \'b\' is the second unique character and is assigned 2. - The next \'a\' has already been assigned 1, so it remains 1. - \'c\' is a new character and is assigned 3. - The next \'a\' has already been assigned 1, so it remains 1. - The next \'b\' has already been assigned 2, so it remains 2. - The last \'a\' has already been assigned 1, so it remains 1. - \'d\' is a new character and is assigned 4. So, the output for \'abacabad\' would be \'1 2 1 3 1 2 1 4\'. Given a string as input, your task is to output the corresponding sequence of integers following the rules outlined above. -----Input----- - A single string of lowercase English letters, \'s\', with a length between 1 and 1000. -----Output----- - A sequence of space-separated integers representing the integer transformation of the given string. -----Examples----- Sample Input 1: abacabad Sample Output 1: 1 2 1 3 1 2 1 4 Sample Input 2: xyzxyz Sample Output 2: 1 2 3 1 2 3 Sample Input 3: a Sample Output 3: 1","solution":"def transform_string_to_sequence(s): Transforms a given string s into a sequence of integers where each unique character in the string is assigned a unique integer starting from 1 and increasing by 1 for each new character that appears in the order of their first occurrence. char_to_int = {} current_int = 1 result = [] for char in s: if char not in char_to_int: char_to_int[char] = current_int current_int += 1 result.append(str(char_to_int[char])) return \\" \\".join(result)"},{"question":"In an amusement park, there is a popular ride where people stand in a queue to get their turn. Each person in the queue has a certain height. The ride has a height requirement where each person must be taller than or equal to a minimum height to ride. Unfortunately, not everyone in the queue meets this height requirement. Your task is to help identify how many people need to be removed from the queue to ensure everyone meets the height requirement before they reach the ride. The goal is to keep the same relative order of those who remain in the queue after the removal operation. Write a function that calculates the minimum number of people that need to be removed. ------ Input Format ------ - The first line contains an integer T, the number of test cases. The following T lines follow. - Each test case consists of two lines. The first line contains two integers N (the number of people in the queue) and H (the minimum height requirement for the ride). - The second line contains N integers separated by spaces, representing the heights of the people in the queue. ------ Output Format ------ For each test case, print a single integer representing the minimum number of people that need to be removed from the queue. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ H ≤ 10^9 1 ≤ height_i ≤ 10^9 ----- Sample Input 1 ------ 2 5 120 110 130 150 90 180 4 100 85 90 110 115 ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ - Test Case 1: The people with heights 110 and 90 do not meet the height requirement of 120. Therefore, 2 people need to be removed. - Test Case 2: The people with heights 85 and 90 do not meet the height requirement of 100. Therefore, 2 people need to be removed.","solution":"def count_people_to_remove(test_cases): Given a number of test cases where each case contains the number of people in a queue (N), the minimum height requirement (H), and a list of heights of people in the queue, this function returns a list with the count of people to remove for each test case to meet the height requirement. results = [] for case in test_cases: N, H, heights = case count = sum(1 for height in heights if height < H) results.append(count) return results"},{"question":"Given a string containing only square brackets (\'[\' and \']\'), determine if the brackets are balanced. A string is balanced if every opening bracket has a corresponding closing bracket in the correct order. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string consisting of square brackets only. ------ Output ------ For each test case, print \\"YES\\" if the brackets in the string are balanced, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{6} ------ Sample Input 1 ------ 3 [] [[]] [[]][] ------ Sample Output 1 ------ YES YES YES ------ Sample Input 2 ------ 2 [[] ][]] ------ Sample Output 2 ------ NO NO","solution":"def is_balanced(brackets): Determines if the given brackets string is balanced. stack = [] for bracket in brackets: if bracket == \'[\': stack.append(bracket) else: # bracket is \']\' if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(T, cases): Process multiple test cases to check if each string of brackets is balanced. results = [] for case in cases: result = is_balanced(case) results.append(result) return results"},{"question":"You are given a list of tasks that have dependencies. Each task can only be started once all of its dependencies have been completed. Write a program that takes the list of tasks and their dependencies as input and outputs a valid order in which the tasks can be completed. If there are multiple valid orders, output any one of them. If it is not possible to complete all tasks due to a cyclic dependency, output \\"Cycle detected\\". # Input: The input begins with an integer `n` (1 ≤ n ≤ 100), the number of tasks. Followed by `n` lines, each line indicates a task and its dependencies in the following format: ``` task_id dep1 dep2 ... depm ``` Where: - `task_id` is the identifier of the task (an integer from 1 to 100). - `dep1 dep2 ... depm` is a space-separated list of task identifiers upon which `task_id` depends. Each `dep` is also an integer between 1 and 100. If a task has no dependencies, the line will consist of only the `task_id`. The input ends with a line containing a single zero. # Output: Output a valid order of task completion, where each task appears only after all its dependencies have been completed. If there is no such order due to cyclic dependencies, output \\"Cycle detected\\". # Example: Input: ``` 5 1 2 3 2 4 3 4 3 5 1 4 0 ``` Output: ``` 3 4 2 1 5 ``` or ``` 3 2 4 1 5 ``` Input: ``` 3 1 2 2 3 3 1 0 ``` Output: ``` Cycle detected ``` # Note: - In the first example, it is possible to complete the tasks in the order of `3 4 2 1 5` or in another valid order such as `3 2 4 1 5`. - In the second example, the tasks have a cyclic dependency, so it is impossible to complete all tasks. # Constraints: - Assume that the input is correctly formatted and contains no duplicate task IDs or dependencies. - You can use any appropriate algorithm (e.g., topological sorting) to determine the order of task completion.","solution":"def find_order(tasks_list): from collections import defaultdict, deque def topological_sort(num_tasks, prerequisites): in_degree = {i: 0 for i in range(1, num_tasks + 1)} # To maintain the count of incoming edges adj_list = defaultdict(list) # Building the graph for task, deps in prerequisites.items(): for dep in deps: adj_list[dep].append(task) in_degree[task] += 1 # Queue for tasks with no dependencies zero_degree_queue = deque([task for task in range(1, num_tasks + 1) if in_degree[task] == 0]) result = [] while zero_degree_queue: current_task = zero_degree_queue.popleft() result.append(current_task) # Decrease the in-degree of neighboring nodes by 1 for neighbor in adj_list[current_task]: in_degree[neighbor] -= 1 # If in-degree becomes 0, add to zero_degree_queue if in_degree[neighbor] == 0: zero_degree_queue.append(neighbor) if len(result) == num_tasks: return result # return the topologically sorted order else: return \\"Cycle detected\\" # Parsing the input tasks = tasks_list.splitlines() n = int(tasks[0]) prerequisites = defaultdict(list) for task in tasks[1:]: if task == \\"0\\": break task_info = list(map(int, task.split())) task_id = task_info[0] prerequisites[task_id] = task_info[1:] return topological_sort(n, prerequisites)"},{"question":"Write a function that takes a string containing a list of space-separated integers and returns the list of integers sorted in descending order. If the string is empty or contains non-integer values, the function should return an empty list. Examples: `\\"3 4 1 5 2\\" -> [5, 4, 3, 2, 1]` `\\"10 20 30\\" -> [30, 20, 10]` `\\"\\" -> []` `\\"a 1 2\\" -> []` `\\"7 7 7\\" -> [7, 7, 7]`","solution":"def sort_descending(input_str): Takes a string containing a list of space-separated integers and returns the list of integers sorted in descending order. If the string is empty or contains non-integer values, the function returns an empty list. if not input_str.strip(): return [] try: nums = list(map(int, input_str.split())) except ValueError: return [] return sorted(nums, reverse=True)"},{"question":"Aritra is working on a bioinformatics project and needs to analyze DNA sequences. DNA sequences are strings composed of the characters \'A\', \'C\', \'G\', and \'T\'. He wants to identify the longest common substring among multiple DNA sequences to find potential conserved genetic information. You are given multiple DNA sequences and need to find the longest common substring that appears in all given sequences. Input: - n, the number of DNA sequences (1 ≤ n ≤ 500) - n strings, each string representing a DNA sequence (1 ≤ length of each string ≤ 1000) Output: - The longest common substring among the given sequences. If there is no common substring, output an empty string. Note: If there are multiple longest common substrings of the same length, output any one of them. SAMPLE INPUT: 3 GATTACA TAGACCA ATACA SAMPLE OUTPUT: TA Explanation: \'TA\' is the longest common substring that appears in all the sequences \'GATTACA\', \'TAGACCA\', and \'ATACA\'.","solution":"def longest_common_substring(dna_sequences): Returns the longest common substring among multiple DNA sequences. :param dna_sequences: List of DNA sequences :return: Longest common substring if not dna_sequences: return \\"\\" def is_common_substring(sub): return all(sub in seq for seq in dna_sequences) shortest_seq = min(dna_sequences, key=len) max_len = len(shortest_seq) for length in range(max_len, 0, -1): for start in range(max_len - length + 1): candidate = shortest_seq[start:start+length] if is_common_substring(candidate): return candidate return \\"\\""},{"question":"Hermione Granger loves to solve puzzles. One day, she comes across a mysterious map with a grid of letters. The map seems to contain hidden words, but she can\'t figure out how to connect the letters to form any meaningful words. Each word can be formed by moving horizontally or vertically on the grid. She needs your help to determine if a given word can be found in the grid. The grid is represented as a list of strings where each string represents a row of the grid. You are given a list of words, and for each word, you need to check if it can be formed by sequentially adjacent cells in the grid, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Write a function `find_words_in_grid(grid, words)` that takes a grid of letters and a list of words, and returns a list of boolean values indicating whether each word can be found in the grid. Input - grid: a list of strings, where each string contains only uppercase English letters \'A\'-\'Z\' and represents a row of the grid. The grid will have at least 1 row and 1 column, and each row will have the same number of columns. - words: a list of words, where each word is a non-empty string of uppercase English letters \'A\'-\'Z\'. Output - A list of boolean values, where each boolean corresponds to a word in the input list `words`. The boolean value is `True` if the word can be found in the grid, and `False` otherwise. Examples Input grid = [ \\"ABCE\\", \\"SFCS\\", \\"ADEE\\" ] words = [\\"ABCCED\\", \\"SEE\\", \\"ABCB\\"] Output [True, True, False] Explanation - \\"ABCCED\\" can be formed from the path (0,0)->(0,1)->(0,2)->(1,2)->(2,2)->(2,1). - \\"SEE\\" can be formed from the path (2,0)->(2,1)->(2,2). - \\"ABCB\\" cannot be formed as the same cell in the grid cannot be used more than once. Input grid = [ \\"HELLO\\", \\"WORLD\\", \\"ABCDE\\" ] words = [\\"HELLO\\", \\"WORLD\\", \\"HLL\\", \\"OLO\\"] Output [True, True, False, False] Explanation - \\"HELLO\\" can be formed from the path (0,0)->(0,1)->(0,2)->(0,3)->(0,4). - \\"WORLD\\" can be formed from the path (1,0)->(1,1)->(1,2)->(1,3)->(1,4). - \\"HLL\\" cannot be formed as we can only move horizontally or vertically. - \\"OLO\\" cannot be formed as the same letter cell may not be used more than once.","solution":"def find_words_in_grid(grid, words): def is_word_in_grid(word): rows = len(grid) cols = len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r] = grid[r][:c] + \'#\' + grid[r][c+1:] # Mark as visited found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) grid[r] = grid[r][:c] + temp + grid[r][c+1:] # Unmark return found for r in range(rows): for c in range(cols): if grid[r][c] == word[0] and dfs(r, c, 0): return True return False return [is_word_in_grid(word) for word in words]"},{"question":"Given a list of integers representing the heights of consecutive buildings, write a function `can_see_sunset` that takes this list as an argument and returns a list of integers representing the building heights that have a view of the sunset. The buildings are facing west, which means that a building can see the sunset if and only if there are no taller buildings to its right. Consecutive buildings of the same height are all able to see the sunset. Examples: ```python can_see_sunset([3, 7, 8, 3, 6, 1]) # => [8, 6, 1] can_see_sunset([1, 2, 3, 4]) # => [4] can_see_sunset([4, 3, 2, 1]) # => [4, 3, 2, 1] can_see_sunset([1, 1, 1, 1]) # => [1, 1, 1, 1] ```","solution":"def can_see_sunset(buildings): Given a list of building heights, returns a list of buildings that can see the sunset. A building can see the sunset if there are no taller buildings to its right. :param buildings: List of integers representing the heights of consecutive buildings :return: List of integers representing the building heights that have a view of the sunset result = [] max_height = float(\'-inf\') for height in reversed(buildings): if height >= max_height: result.append(height) max_height = height return result[::-1]"},{"question":"Nina has a collection of N unique bottles, each with a distinct amount of liquid. She loves to experiment and wants to divide the liquid into two groups with equal sum using any subset of the bottles. However, with each bottle\'s capacity being unique, this might not be straightforward. Help Nina by writing a function that determines if it\'s possible to partition her bottles into two groups with equal sum. Example 1: Input: arr[] = {3, 1, 4, 2, 2}, N = 5 Output: 1 Explanation: Nina can partition the bottles as follows: Group 1: (3, 2) with sum 5 Group 2: (1, 4) with sum 5 Example 2: Input: arr[] = {1, 5, 11, 5}, N = 4 Output: 1 Explanation: Nina can partition the bottles as follows: Group 1: (1, 5, 5) with sum 11 Group 2: (11) with sum 11 Example 3: Input: arr[] = {1, 2, 3, 5}, N = 4 Output: 0 Explanation: Nina cannot partition these bottles into two groups with equal sum. Your Task: This is a function problem. You only need to complete the function canPartition() that takes an array (arr) and an integer N and returns true if it is possible to partition the array into two groups with equal sum, otherwise returns false. The input is taken care of by the driver code. The driver code also handles printing. Expected Time Complexity: O(N*sum(arr)/2). Expected Auxiliary Space: O(N*sum(arr)/2). Constraints: 1 ≤ N ≤ 100 1 ≤ arr[i] ≤ 100","solution":"def canPartition(arr, N): Determine if it\'s possible to partition the array into two groups with equal sum. total_sum = sum(arr) # If total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 dp = [[False] * (target + 1) for _ in range(N + 1)] # Initialize the dp array for i in range(N + 1): dp[i][0] = True for i in range(1, N + 1): for j in range(1, target + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return dp[N][target]"},{"question":"You are given a binary matrix of size n times m. Your task is to determine the length of the longest contiguous submatrix (rectangular sub-section) that contains only `1`s. Contiguity means that you need to look for rectangles of 1s that are continuous in the grid. In other words, you need to find the largest submatrix of all ones within the provided binary matrix and return its area. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the binary matrix. Each of the next n lines contains m integers (either `0` or `1`) representing the rows of the matrix. -----Output----- Print a single integer — the area of the largest contiguous submatrix that contains only `1`s. -----Examples----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 Input 3 3 1 1 1 1 1 1 1 1 1 Output 9 -----Note----- In the first test case: The largest submatrix of all ones has a size of 3 times 2 (second and third rows, last two columns), thus the area is 6. In the second test case: The entire matrix is composed of ones and thus forms a 3 times 3 submatrix, making the area 9.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) height = [0] * (m + 1) max_area = 0 for row in matrix: for i in range(m): if row[i] == 1: height[i] += 1 else: height[i] = 0 stack = [-1] for i in range(m + 1): while height[i] < height[stack[-1]]: h = height[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def findLargestSubmatrix(n, m, matrix): return maximalRectangle(matrix)"},{"question":"You are given an array of integers `a` of length `N` and an integer `K`. Your task is to find the K-th smallest element in the array after applying the following operation exactly once: 1. Choose any contiguous subarray of length `L` (1 ≤ L ≤ N). 2. Sort this subarray in non-decreasing order. 3. The rest of the array remains unchanged. Find the K-th smallest element in the array after this operation. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ a_i ≤ 10^9 - 1 ≤ K ≤ N -----Input----- Input is given from Standard Input in the following format: N K a_1 a_2 ... a_N -----Output----- Print the K-th smallest element in the array after the operation. -----Sample Input----- 5 3 5 3 2 4 1 -----Sample Output----- 4 Explanation: One of the optimal ways to sort a subarray is to select the entire array and sort it: - The sorted array will be [1, 2, 3, 4, 5]. - The 3rd smallest element in this array is 4. Another way is to sort subarray [2, 4, 1] - Array after sorting the subarray is [5, 3, 1, 2, 4]. - The 3rd smallest element in this array is also 4. Thus, the K-th smallest element is 4.","solution":"def find_kth_smallest_element(N, K, a): Find the K-th smallest element in the array after sorting any contiguous subarray Args: N : int : Length of the array K : int : Position of the smallest element to find after sorting a : list : List of integers Returns: int : The K-th smallest element in the array after the operation a_sorted = sorted(a) return a_sorted[K-1] # Example usage: # Input: N = 5, K = 3, a = [5, 3, 2, 4, 1] # Expected Output: 3 print(find_kth_smallest_element(5, 3, [5, 3, 2, 4, 1]))"},{"question":"You are given a list of `n` integers and `m` queries. Each query is described by a pair of integers `l` and `r` (1 ≤ l ≤ r ≤ n). The answer to the query `l, r` is the sum of the integers from index `l` to `r` in the list. Write a program that can handle up to `m` queries efficiently. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^5), indicating the number of integers in the list. The second line contains `n` space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). The third line contains an integer `m` (1 ≤ m ≤ 10^5), indicating the number of queries. Each of the next `m` lines contains the description of a query in the form of two integers `l` and `r` (1 ≤ l ≤ r ≤ n). Output: For each query, print a single integer — the sum of the integers from index `l` to `r` in the list. Example: Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15","solution":"def preprocess(arr): Preprocess the array to calculate the prefix sums. :param arr: List of integers. :return: List of prefix sums. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def sum_range(prefix_sums, l, r): Calculate the sum of the integers from index l to r using the prefix sums. :param prefix_sums: List of prefix sums. :param l: Start index of the range (1-based inclusive). :param r: End index of the range (1-based inclusive). :return: The sum of the integers from index l to r. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(arr, queries): Process multiple queries efficiently. :param arr: List of integers. :param queries: List of tuples with (l, r) queries. :return: List of results for each query. prefix_sums = preprocess(arr) results = [] for l, r in queries: results.append(sum_range(prefix_sums, l, r)) return results"},{"question":"You are given a list of tasks and the time each task takes to complete. Each task must be performed by an available worker. A worker can only work on one task at a time, and tasks can be assigned in any order. However, all tasks must be initiated and completed by a specific deadline. Compute the minimum number of workers needed to complete all tasks within the given deadline. Example: Input: tasks = [2, 3, 7, 1, 4] deadline = 10 Output: 2 Explanation: Assigning tasks [2, 3, 1] to Worker 1 and [7, 4] to Worker 2 allows all tasks to be completed within the deadline of 10 units of time. Constraints: - 1 <= tasks.length <= 500 - 1 <= tasks[i] <= 10^5 - 1 <= deadline <= 10^6","solution":"def min_workers_needed(tasks, deadline): Returns the minimum number of workers needed to complete all tasks within the given deadline. Parameters: tasks (list of int): A list of times each task takes to complete. deadline (int): The maximum time allowed to complete all tasks. Returns: int: Minimum number of workers needed. if not tasks: return 0 # Sort the tasks in decreasing order of time required tasks.sort(reverse=True) # Check if a single worker can complete the tasks within the deadline if sum(tasks) <= deadline: return 1 # Minimum number of workers needed is at least 1 def is_possible(workers): # Greedily assign tasks to workers such that each worker gets tasks summing at most \'deadline\' worker_loads = [0] * workers for task in tasks: # Find the worker with the least load that can accommodate the current task min_worker = min(worker_loads) if min_worker + task <= deadline: worker_loads[worker_loads.index(min_worker)] += task else: return False return True left, right = 1, len(tasks) while left < right: mid = (left + right) // 2 if is_possible(mid): right = mid else: left = mid + 1 return left"},{"question":"Given an integer M. Determine the minimum number of squares needed to sum up to M. A square is a number that can be expressed as k^2, where k is an integer. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single integer M on a separate line. -----Output----- For each test case, output a single line containing the minimum number of squares needed to sum up to M. -----Example----- Input: 3 1 12 13 Output: 1 3 2 -----Constraints----- 1 <= T <= 10^3 1 <= M <= 10^4","solution":"import math def min_squares(M): Returns the minimum number of squares needed to sum up to M. # Dynamic programming table where dp[i] will store the minimum number # of squares needed to sum to i. dp = [float(\'inf\')] * (M + 1) # Base case dp[0] = 0 # Fill the dp table for i in range(1, M + 1): j = 1 while j*j <= i: dp[i] = min(dp[i], dp[i - j*j] + 1) j += 1 return dp[M] def process_test_cases(T, test_cases): results = [] for i in range(T): M = test_cases[i] results.append(min_squares(M)) return results"},{"question":"You are given an integer array arr of size n and an integer k. You can perform the following operation any number of times: select any subarray of arr whose length is exactly k, and increase or decrease each element of this subarray by 1. Determine if it is possible to make all the elements of arr equal using any number of such operations. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 1000, 1 le k le n). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, output \\"YES\\" if it\'s possible to make all elements of the array equal. Otherwise, output \\"NO\\". -----Example----- Input 3 5 2 4 7 7 4 4 6 3 1 1 1 1 1 1 4 4 3 6 3 3 Output YES YES NO -----Note----- In the first test case, we can first decrease the second and the third elements of the array by 3 and then decrease the first and the fourth elements by 3. Finally, decrease the first and the fourth elements by 1. The array then becomes [1, 4, 4, 1, 4]. In the second test case, all elements are already the same. In the third test case, it is impossible to make all elements equal by selecting any subarray of length 4 and incrementing or decrementing by 1.","solution":"def can_make_elements_equal(t, test_cases): results = [] for n, k, arr in test_cases: if k == 1: results.append(\\"YES\\" if len(set(arr)) == 1 else \\"NO\\") else: if len(set(arr)) < 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] idx = 1 for _ in range(t): n, k = map(int, lines[idx].split()) arr = list(map(int, lines[idx + 1].split())) test_cases.append((n, k, arr)) idx += 2 return t, test_cases def format_output(results): return \\"n\\".join(results)"},{"question":"Given a list of n integers, determine if there exists a pair of distinct indices i and j such that the sum of the elements at these indices is equal to a given target sum k. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 1000, -10^6 ≤ k ≤ 10^6) — the number of elements in the list and the target sum. The second line contains n integers b_1, b_2, ..., b_{n} (-10^6 ≤ b_{i} ≤ 10^6) — the elements of the list. -----Output----- Print \\"YES\\" if there exist distinct indices i and j such that b_i + b_j = k. Otherwise, print \\"NO\\". -----Examples----- Input 5 8 1 2 4 4 5 Output YES Input 3 10 1 2 3 Output NO -----Note----- In the first sample case, b_3 and b_4 add up to 8, hence the output is \\"YES\\". In the second sample case, there are no two elements that add up to the target sum 10, hence the output is \\"NO\\".","solution":"def has_pair_with_sum(nums, target): Determine if there exists a pair of distinct indices such that the sum of the elements at these indices is equal to the given target. nums: List[int] - list of integers target: int - target sum Returns: \'YES\' or \'NO\' seen = set() for num in nums: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" # Example usage: # n = 5 # k = 8 # nums = [1, 2, 4, 4, 5] # print(has_pair_with_sum(nums, k)) # Output: \\"YES\\""},{"question":"A magical forest is populated by n stones placed in a straight line. Each stone contains a certain amount of magical energy, which is used to cast spells. You are a wizard who wants to maximize the total magical energy collected by summoning a magical bird to transfer the energy from the stones to you. However, the magical bird can only fly to stones that form a contiguous subarray. The bird can only stop at stones where the cumulative magical energy up to and including that stone (from the start of the subarray) is non-negative at all times. Given this limitation, find the maximum total magical energy you can collect from any valid subarray. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of stones. The second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4) — the amount of magical energy in each stone. Output Print a single integer — the maximum total magical energy you can collect. Examples Input 5 3 -2 4 -1 2 Output 6 Input 4 -1 -2 -3 -4 Output 0 Note In the first example, the bird should collect the energy from the subarray [3, -2, 4, -1, 2], which has a total magical energy of 6. In the second example, since all stones have negative energy, the bird can\'t collect energy from any subarray, resulting in 0 energy collected.","solution":"def max_magical_energy(n, stones): Returns the maximum total magical energy that can be collected from any valid subarray. Parameters: n (int): Number of stones. stones (list): List containing the magical energy of each stone. Returns: int: The maximum total magical energy. max_energy = 0 current_energy = 0 for energy in stones: current_energy += energy if current_energy < 0: current_energy = 0 max_energy = max(max_energy, current_energy) return max_energy"},{"question":"You are given a list of n integers. Your task is to sort the list in non-decreasing order, but the catch is that you can only perform the following operation: choose a subarray of length 2 and reverse it. Determine the minimum number of such operations required to sort the list. For example, given the array [3, 1, 2], one possible sequence of operations to sort it is: 1. Reverse the subarray from index 1 to 2 → [3, 2, 1] 2. Reverse the subarray from index 0 to 1 → [2, 3, 1] 3. Reverse the subarray from index 1 to 2 → [2, 1, 3] 4. Reverse the subarray from index 0 to 1 → [1, 2, 3] The minimum number of operations for this example is 4. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n (1 geq n leq 100) — the length of the array. The second line of each test case contains n integers a_i (1 geq a_i leq 1000) — the elements of the array. -----Output----- For each test case, output a single integer — the minimum number of operations required to sort the array. -----Examples----- Input 2 3 3 1 2 4 4 2 3 1 Output 4 5 -----Note----- For the first test case, all the operations needed to sort the array were listed in the description. For the second test case, one possible sequence of operations to sort it is: 1. Reverse the subarray from index 2 to 3 → [4, 2, 1, 3] 2. Reverse the subarray from index 1 to 2 → [4, 1, 2, 3] 3. Reverse the subarray from index 0 to 1 → [1, 4, 2, 3] 4. Reverse the subarray from index 1 to 2 → [1, 2, 4, 3] 5. Reverse the subarray from index 2 to 3 → [1, 2, 3, 4] The minimum number of operations for this example is 5.","solution":"def min_operations_to_sort(arr): Determines the minimum number of subarray reversals to sort the array. For any given array, the number of moves is directly equal to the length of the array minus one. This is because by each move, we can effectively fix one element in its sorted position. return len(arr) - 1 def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_operations_to_sort(arr)) return results"},{"question":"Marie is an online store owner specializing in selling handcrafted jewelry. She wants to analyze her sales data to determine the best-selling product category over a specific period. She has a list of sales records, and each record includes the product category and the number of units sold. Additionally, she has a list of categories for which she wants to find the total units sold. Your task is to help Marie determine the total number of units sold for each specified category over the input period. Input The first line contains a single integer ( n ) (0 ≤ ( n ) ≤ 100,000), the number of sales records. The following ( n ) lines each contain a string (product category) and an integer (number of units sold). Product categories consist of lowercase Latin letters and can be at most 20 characters long. The number of units sold is a positive integer that does not exceed 1000. The next line contains a single integer ( m ) (1 ≤ ( m ) ≤ 50), the number of categories Marie is interested in. The following ( m ) lines each contain a string: a category name. Output For each category specified, output the total units sold across all sales records. Examples Input 5 necklace 10 bracelet 5 earring 3 ring 8 necklace 7 2 necklace ring Output 17 8 Input 4 anklet 2 brooch 1 anklet 3 ring 4 3 brooch anklet ring Output 1 5 4","solution":"def total_units_sold(sales_records, categories_of_interest): Returns the total units sold for each category of interest. :param sales_records: List of tuples containing (category, units sold) :param categories_of_interest: List of categories to find the total units sold :return: List of total units sold for each category of interest category_sales = {} # Process each sales record for category, units_sold in sales_records: if category in category_sales: category_sales[category] += units_sold else: category_sales[category] = units_sold # Get the total units sold for each category of interest result = [] for category in categories_of_interest: result.append(category_sales.get(category, 0)) return result"},{"question":"Alex recently started working as a software developer and his team uses a system to track tasks. Each task has a unique integer ID. One day, an intern mistakenly imported some duplicate tasks into the system, and Alex needs to find and remove these duplicates. Your task is to write a function that takes a list of task IDs and returns a list with duplicates removed while preserving the original order of their first occurrences. -----Input----- - An integer n (1 ≤ n ≤ 100 000) — the number of task IDs in the list. - A list of integers of length n, where each integer represents a task ID. The task IDs may have duplicates. -----Output----- - A list of integers representing the task IDs with duplicates removed, in the order of their first occurrence. -----Example----- Input 8 [1, 2, 2, 3, 4, 5, 5, 1] Output [1, 2, 3, 4, 5] Input 5 [10, 10, 10, 10, 10] Output [10] -----Note----- In the first sample, the duplicates 2, 5, and the second occurrence of 1 are removed, leaving [1, 2, 3, 4, 5]. In the second sample, all the task IDs are the same, so the output is simply [10].","solution":"def remove_duplicates(task_ids): Remove duplicates from the task IDs list while preserving the order of first occurrences. Args: task_ids (List[int]): List of task IDs with possible duplicates. Returns: List[int]: List of task IDs with duplicates removed. seen = set() result = [] for task_id in task_ids: if task_id not in seen: seen.add(task_id) result.append(task_id) return result"},{"question":"Given a list of integers representing the heights of a series of buildings, determine the number of distinct buildings that can be seen from a certain vantage point. Assume that buildings can block the view of shorter buildings behind them. Example heights=[3, 7, 8, 3, 6, 1] If you view the buildings from the left side: - The first building has height textbf{3} and is visible. - The second building has height textbf{7} and is visible because it is taller than the previous building of height 3. - The third building has height textbf{8} and is visible because it is taller than the previous building of height 7. - The fourth building has height textbf{3} and is not visible because all previous buildings have greater or equal height. - The fifth building has height textbf{6} and is not visible because the third building\'s height is 8. - The sixth building has height textbf{1} and is not visible because all previous buildings are taller. Thus, there are 3 distinct visible buildings from the left side. Function Description Complete the countVisibleBuildings function in the editor below. countVisibleBuildings has the following parameter(s): - int heights[n]: an array of integers representing the heights of the buildings. Returns - int: the number of distinct buildings that can be seen from the left side. Input Format The first line contains an integer n, the number of buildings. The second line contains n space-separated integers textit{heights[i]}, the heights of the buildings. Constraints 1 leq n leq 10^5 1 leq textit{heights[i]} leq 10^9 for 0 leq i < n Sample Input 1 6 3 7 8 3 6 1 Sample Output 1 3 Sample Input 2 5 1 2 3 4 5 Sample Output 2 5 Explanation 2 Each building is taller than the previous one, so all buildings are visible from the left side. Sample Input 3 8 4 2 3 1 5 6 7 8 Sample Output 3 5 Explanation 3 The visible buildings from the left side are 4, 5, 6, 7, and 8.","solution":"def countVisibleBuildings(heights): Returns the number of distinct buildings that can be seen from the left side. if not heights: return 0 visible_count = 1 highest_building = heights[0] for height in heights[1:]: if height > highest_building: visible_count += 1 highest_building = height return visible_count"},{"question":"You are helping your friend to manage their to-do list with a very specific task setup. They categorize their tasks based on priority levels, which are represented with numbers: the higher the number, the higher the priority. You are given a list of tasks with their priorities. You need to group these tasks into sublists where each sublist contains tasks of the same priority level. The sublists should be sorted based on the priority levels in descending order, and within each sublist, the tasks should maintain their original order. Write a function that takes a list of tuples where each tuple contains a task and its corresponding priority level, and returns a list of sublists as described. For example: Input: [(\'task1\', 3), (\'task2\', 2), (\'task3\', 1), (\'task4\', 3), (\'task5\', 2)] Output: [[(\'task1\', 3), (\'task4\', 3)], [(\'task2\', 2), (\'task5\', 2)], [(\'task3\', 1)]] Input: [(\'taskA\', 5), (\'taskB\', 1), (\'taskC\', 3), (\'taskD\', 5)] Output: [[(\'taskA\', 5), (\'taskD\', 5)], [(\'taskC\', 3)], [(\'taskB\', 1)]] If the input list is empty, return an empty list.","solution":"def group_tasks_by_priority(tasks): Groups tasks by their priority levels into sublists, sorted by priority in descending order. Args: tasks (list of tuples): A list of tasks where each task is represented by a tuple (task, priority). Returns: list of lists: A list of sublists where each sublist contains tasks of the same priority, ordered by priority. from collections import defaultdict priority_dict = defaultdict(list) for task, priority in tasks: priority_dict[priority].append(task) sorted_priorities = sorted(priority_dict.items(), key=lambda x: x[0], reverse=True) return [[(task, priority) for task in tasks] for priority, tasks in sorted_priorities]"},{"question":"A city has a unique transportation system consisting of n bus routes. Each bus route is represented by a distinct number from 1 to n. The routes form a single connected network in which each pair of routes i and j (1 ≤ i, j ≤ n) is connected directly or indirectly via some sequence of routes. The city\'s goal is to minimize the number of intersections required to keep all routes connected while ensuring there are no cycles. John, the city\'s transportation planner, must ensure that all routes remain accessible with the minimum number of intersections. Given n routes and m possible intersections, each described by two space-separated integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), determine the minimum number of intersections required to make all bus routes connected and the list of intersections to achieve this. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 100), representing the number of bus routes and the number of possible intersections, respectively. The following m lines each contain two space-separated integers ai and bi, representing a possible intersection between bus routes ai and bi. Output Print the minimum number of intersections required to keep all bus routes connected, followed by the list of intersections in the order they were given in the input. If it is impossible to connect all routes, print -1. Examples Input 4 5 1 2 1 3 3 4 2 3 2 4 Output 3 1 2 1 3 3 4 Input 5 4 1 2 2 3 3 4 4 5 Output 4 1 2 2 3 3 4 4 5 Input 3 1 1 2 Output -1 Note In the first sample, the minimum number of intersections required is 3: {(1, 2), (1, 3), (3, 4)} to connect all routes. The connections {2, 3} and {2, 4} are not needed to maintain connectivity. In the second sample, all 4 intersections are needed: {(1, 2), (2, 3), (3, 4), (4, 5)}. In the third sample, it is impossible to connect all routes with just one intersection.","solution":"def find_min_intersections(n, m, connections): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False selected_connections = [] for a, b in connections: if union(a, b): selected_connections.append((a, b)) root = find(1) if any(find(i) != root for i in range(1, n + 1)): return -1 return len(selected_connections), selected_connections"},{"question":"You are given an array of n integers where each element represents the height of a vertical line on a histogram. Your task is to find the largest rectangle that can be formed in the histogram. The width of each bar is 1 unit. For example, consider the histogram where the heights of the bars are [2, 1, 5, 6, 2, 3]. The largest rectangle can be formed between the third and fourth bar (heights 5 and 6) and its area is 10 (5 * 2). ------ Input Format ------ - The first line of input will contain a single integer n, denoting the number of bars in the histogram. - The second line of input will contain n space-separated integers representing the heights of bars. ------ Output Format ------ Output a single integer which is the maximum area of the rectangle that can be formed in the histogram. ------ Constraints ------ 1 ≤ n ≤ 10^{5} 1 ≤ height[i] ≤ 10^{4}, where height[i] is the height of the i-th bar. ----- Sample Input 1 ------ 6 2 1 5 6 2 3 ----- Sample Output 1 ------ 10 ----- Explanation 1 ------ The largest possible rectangle in the given histogram has an area of 10 units. It is formed by the vertical lines of height 5 and 6. The rectangle spans 2 units in width. Given the constraints, ensure that your solution is efficient to handle the upper limits of the input size.","solution":"def largestRectangleArea(heights): Calculates the largest rectangle area in a histogram. Args: heights (list of int): List of heights of the bars in the histogram. Returns: int: The area of the largest rectangle that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area"},{"question":"Ram is very fond of reading and he has a special way of categorizing books based on their titles. He considers a book title \\"interesting\\" if it can be rearranged to form a palindrome. A palindrome is a sequence that reads the same forward and backward. Given Q book titles, help Ram determine whether each title can be rearranged to form a palindrome. Input First line contains integer Q denoting the number of book titles. Each of the next Q lines contains a single string S representing a book title. Output For each book title, print \\"INTERESTING\\" if the title can be rearranged to form a palindrome, otherwise print \\"NOT INTERESTING\\" without quotes. Constraints 1 ≤ Q ≤ 100 1 ≤ |S| ≤ 1000 Each string S contains only lowercase English letters. SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT INTERESTING INTERESTING NOT INTERESTING Explanation In the first case, \\"civic\\" is already a palindrome. In the second case, \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. In the third case, \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def is_interesting(title): Determines if a book title can be rearranged to form a palindrome. Args: title (str): The book title. Returns: str: \\"INTERESTING\\" if the title can be rearranged to form a palindrome, otherwise \\"NOT INTERESTING\\". from collections import Counter # Count the frequency of each character in the title char_count = Counter(title) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count <= 1: return \\"INTERESTING\\" else: return \\"NOT INTERESTING\\" def process_titles(titles): Processes a list of book titles and determines if each one is interesting. Args: titles (list of str): List of book titles. Returns: list of str: List of results for each book title. return [is_interesting(title) for title in titles]"},{"question":"# Task Write a function that takes a string and returns the character which has the highest frequency. If there are multiple characters with the same highest frequency, return the one which appears first in the string. # Example For the string \\"swiss\\", the output should be \'s\'. ``` s appears 3 times, while \'w\' and \'i\' appear only once. So, the answer is \'s\'. ``` For the string \\"test\\", the output should be \'t\'. ``` Both \'t\' and \'e\' appear twice, but \'t\' appears first. So, the answer is \'t\'. ``` # Input/Output - `[input]` string `s` Constraints: `1 ≤ s.length ≤ 1000` - `[output]` a character","solution":"def highest_frequency_char(s): Returns the character with the highest frequency in the string s. If multiple characters have the same highest frequency, return the one which appears first. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = max(char_count.values()) for char in s: if char_count[char] == max_freq: return char"},{"question":"Problem Implement a program that simulates a simplified warehouse inventory system. The system keeps track of item quantities in different bins within a warehouse. The warehouse is represented by an n × m grid, where each element in the grid represents a bin and contains an integer value indicating the number of items in that bin. Operations on the warehouse include adding items, removing items, moving items between bins, and querying the current state of the warehouse bins. Constraints: - 1 ≤ n, m ≤ 20 (size of the warehouse) - 1 ≤ q ≤ 100 (number of operations) - 0 ≤ ai, j ≤ 1000 (initial number of items in any bin) - For addition/removal, 0 ≤ x ≤ 1000 (quantity to add or remove) Input: The first line contains two integers n and m, the dimensions of the warehouse grid. The next n lines each contain m integers, representing the number of items initially in each bin. The following q lines contain one of the following operations: 1. \\"ADD r c x\\" - Add x items to the bin at row r and column c. 2. \\"REMOVE r c x\\" - Remove x items from the bin at row r and column c. 3. \\"MOVE r1 c1 r2 c2 x\\" - Move x items from the bin at (r1, c1) to the bin at (r2, c2). 4. \\"QUERY r c\\" - Output the number of items in the bin at row r and column c. Output: For each \\"QUERY\\" operation, output the current number of items in the specified bin. Examples Input: 3 4 5 3 2 4 1 6 4 7 0 0 0 2 5 ADD 1 1 3 REMOVE 2 3 1 QUERY 2 3 MOVE 1 1 3 4 2 QUERY 3 4 Output: 3 2","solution":"class Warehouse: def __init__(self, n, m, initial_grid): self.n = n self.m = m self.grid = initial_grid def add_items(self, r, c, x): self.grid[r-1][c-1] += x def remove_items(self, r, c, x): self.grid[r-1][c-1] = max(0, self.grid[r-1][c-1] - x) def move_items(self, r1, c1, r2, c2, x): movable_items = min(x, self.grid[r1-1][c1-1]) self.grid[r1-1][c1-1] -= movable_items self.grid[r2-1][c2-1] += movable_items def query_items(self, r, c): return self.grid[r-1][c-1] def process_warehouse_operations(n, m, initial_grid, operations): warehouse = Warehouse(n, m, initial_grid) results = [] for operation in operations: command = operation[0] if command == \\"ADD\\": _, r, c, x = operation warehouse.add_items(r, c, x) elif command == \\"REMOVE\\": _, r, c, x = operation warehouse.remove_items(r, c, x) elif command == \\"MOVE\\": _, r1, c1, r2, c2, x = operation warehouse.move_items(r1, c1, r2, c2, x) elif command == \\"QUERY\\": _, r, c = operation results.append(warehouse.query_items(r, c)) return results"},{"question":"You are a data scientist working on a project that requires you to evaluate the accuracy of various classifiers. You have implemented two classifiers and obtained their confusion matrices based on test datasets. A confusion matrix for a binary classifier is a 2x2 matrix that summarizes the performance of a classification algorithm with respect to two classes: positive and negative. The structure of the confusion matrix is as follows: | | Predicted Positive | Predicted Negative | |------------------------|---------------------|---------------------| | Actual Positive | True Positive (TP) | False Negative (FN) | | Actual Negative | False Positive (FP) | True Negative (TN) | Given two confusion matrices, each corresponding to the performance of one of the classifiers, you are interested in determining which classifier is better based on the F1-score. The F1-score is defined as the harmonic mean of precision and recall, and is given by the formula: [ F1 = 2 times frac{Precision times Recall}{Precision + Recall} ] Where: - ( Precision = frac{TP}{TP + FP} ) - ( Recall = frac{TP}{TP + FN} ) Your task is to write a program that takes as input two confusion matrices and outputs the index (1 or 2) of the classifier with the higher F1-score. If both classifiers have the same F1-score, output \\"Equal\\". Input The input consists of two lines. Each line contains four integers separated by spaces, representing the confusion matrix in the order: TP, FN, FP, TN. Output A single line containing either \\"1\\" if the first classifier has a higher F1-score, \\"2\\" if the second classifier has a higher F1-score, or \\"Equal\\" if both classifiers have the same F1-score. Examples Input 50 10 15 25 45 10 10 35 Output 2 Input 30 20 10 40 30 20 10 40 Output Equal Input 60 20 20 30 55 15 25 25 Output 1","solution":"def calculate_f1(tp, fn, fp, tn): precision = tp / (tp + fp) if (tp + fp) != 0 else 0 recall = tp / (tp + fn) if (tp + fn) != 0 else 0 if precision + recall == 0: return 0 return 2 * (precision * recall) / (precision + recall) def compare_classifiers(matrix1, matrix2): tp1, fn1, fp1, tn1 = matrix1 tp2, fn2, fp2, tn2 = matrix2 f1_1 = calculate_f1(tp1, fn1, fp1, tn1) f1_2 = calculate_f1(tp2, fn2, fp2, tn2) if f1_1 > f1_2: return \\"1\\" elif f1_1 < f1_2: return \\"2\\" else: return \\"Equal\\" # Example usage: # matrix1 = [50, 10, 15, 25] # matrix2 = [45, 10, 10, 35] # result = compare_classifiers(matrix1, matrix2) # print(result) # Output: 2"},{"question":"Create a function that takes two strings and determines if one is a rotation of the other. The function should return `True` if one string is a rotation of the other, and `False` otherwise. A string is considered a rotation of another if it has the same characters in the same order, but starts at a different position and wraps around. ```python is_rotation(s1, s2) ``` If either string is empty, the function should return `False`. Usage examples: ```python is_rotation(\'waterbottle\', \'erbottlewat\') # should return True is_rotation(\'abcde\', \'cdeab\') # should return True is_rotation(\'abcde\', \'abced\') # should return False is_rotation(\'abc\', \'\') # should return False is_rotation(\'\', \'\') # should return False ```","solution":"def is_rotation(s1, s2): Determines if one string is a rotation of the other. :param s1: First string :param s2: Second string :return: True if s2 is a rotation of s1, False otherwise if not s1 or not s2: return False if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Fatima is planning a vacation and wants to visit multiple cities, but she also wants to visit each city exactly once without repeating. Given a set of cities and the travel cost between each pair of cities, can you help Fatima calculate the minimum travel cost for her tour? Assume that Fatima must start and end her tour at the same city. -----Input----- The first line contains a single integer N, 2 leq N leq 15, representing the number of cities. Each of the next N lines contains N integers, where the j-th integer in the i-th row represents the cost C_{ij} to travel from city i to city j. It is guaranteed that C_{ii} = 0 and 0 leq C_{ij} leq 1000 for i neq j. -----Output----- A single integer representing the minimum travel cost of Fatima\'s tour. -----Examples----- Sample Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Sample Output: 80 Sample Input: 3 0 29 20 29 0 15 20 15 0 Sample Output: 64","solution":"from itertools import permutations def minimum_travel_cost(N, costs): Calculates the minimum travel cost for touring all cities and returning to the start. Args: N (int): Number of cities. costs (List[List[int]]): Matrix of travel costs between each pair of cities. Returns: int: Minimum travel cost. min_cost = float(\'inf\') cities = range(N) # All possible permutations of cities (excluding the starting city which we will add manually) for perm in permutations(cities): if perm[0] != 0: # Ensure the starting city is city 0 continue cost = 0 for i in range(1, N): cost += costs[perm[i - 1]][perm[i]] # Add cost to return to the starting city cost += costs[perm[-1]][perm[0]] min_cost = min(min_cost, cost) return min_cost"},{"question":"Alice loves playing with numbers and she recently discovered the concept of a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alice decided to create a coding puzzle that involves prime numbers in a different way. The puzzle requires sorting numbers in a unique order. Given an array of integers, the array must be sorted in such a way that: 1. All prime numbers should appear before all non-prime numbers. 2. The prime numbers should be sorted in ascending order. 3. The non-prime numbers should be sorted in descending order. Your task is to write a program that performs this specific sorting. **Input** The input is given in the following format: ``` N a1 a2 ... aN ``` The first line contains the number of elements N (1 ≤ N ≤ 100000). The second line contains the array elements ai (1 ≤ ai ≤ 10^9). **Output** Output the array elements in the specified order in a single line. **Example** Input ``` 6 3 11 4 6 7 2 ``` Output ``` 2 3 7 11 6 4 ``` Input ``` 5 12 17 19 13 16 ``` Output ``` 13 17 19 16 12 ``` **Note** In the first example: - The prime numbers are [3, 11, 7, 2], which sorted in ascending order are [2, 3, 7, 11]. - The non-prime numbers are [4, 6], which sorted in descending order are [6, 4]. - The combined sorted array is [2, 3, 7, 11, 6, 4]. In the second example: - The prime numbers are [17, 19, 13], which sorted in ascending order are [13, 17, 19]. - The non-prime numbers are [12, 16], which sorted in descending order are [16, 12]. - The combined sorted array is [13, 17, 19, 16, 12].","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def custom_sort(arr): Sort the array such that all prime numbers appear before all non-prime numbers. Prime numbers should be sorted in ascending order and non-prime numbers in descending order. primes = [] non_primes = [] for num in arr: if is_prime(num): primes.append(num) else: non_primes.append(num) primes.sort() non_primes.sort(reverse=True) return primes + non_primes"},{"question":"-----Description----- Neela loves encoding and playing with strings. She has recently come across a new type of string manipulation called \\"Circular Shifting\\". A circular shift involves moving characters from the beginning of the string to the end while preserving their order. For example, if the string is \'abcde\', a circular shift by 2 would result in \'cdeab\'. Neela wants to explore this concept further and asks for your help to determine if one string is a circular shift of another. Your task is to write a program that checks if one string can be obtained by circularly shifting another string. -----Input----- The input consists of multiple test cases. The first line of the input contains a single positive integer T, the number of test cases. The following T lines each contain two space-separated strings, A and B, which need to be tested. -----Output----- For each test case, output \\"YES\\" if B can be obtained by circularly shifting A, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length(A), length(B) ≤ 100 - Strings A and B will contain only lowercase English letters. -----Sample Input----- 3 abcde cdeab hello lohel mango nomag -----Sample Output----- YES YES NO","solution":"def is_circular_shift(A, B): Determines if string B is a circular shift of string A. Parameters: A (str): The original string. B (str): The string to check. Returns: str: \\"YES\\" if B is a circular shift of A, otherwise \\"NO\\". if len(A) != len(B): return \\"NO\\" return \\"YES\\" if B in (A + A) else \\"NO\\" def check_circular_shifts(T, test_cases): Checks multiple test cases for circular shifts. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains two strings A and B. Returns: list of str: \\"YES\\" or \\"NO\\" for each test case. results = [] for A, B in test_cases: results.append(is_circular_shift(A, B)) return results"},{"question":"Given a list of integers, each representing the height of a person, find the maximum number of people that can be grouped together such that the difference between the height of the tallest and the shortest person in the group does not exceed a given value K. Input Format: The first line contains the number of test cases T. Each test case consists of two lines. The first line contains two integers N (the number of people) and K (the maximum allowed height difference). The second line contains N integers, each representing the height of a person. Output Format: For each test case, print the maximum number of people that can be grouped together in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ K ≤ 10^9 1 ≤ height of each person ≤ 10^9 SAMPLE INPUT: 2 5 3 1 2 5 7 8 4 0 4 4 4 4 SAMPLE OUTPUT: 3 4 Explanation: In the first test case, the group [1, 2, 5] has the maximum size where the difference between the tallest (5) and the shortest (1) is 4 ≤ 3. In the second test case, all people have the same height so they can all be grouped together with a height difference of 0.","solution":"def max_group_size(T, test_cases): Given a number of test cases, for each test case find the maximum number of people that can be grouped together such that the difference in height does not exceed K. :param T: int, number of test cases :param test_cases: list of tuples, each containing (N, K, heights) where N is the number of people, K is the maximum allowed height difference, heights is a list of integers representing the heights of the people :return: list of integers representing the result for each test case results = [] for N, K, heights in test_cases: heights.sort() # Sort the heights to facilitate sliding window max_group = 1 left = 0 for right in range(1, N): while heights[right] - heights[left] > K: left += 1 max_group = max(max_group, right - left + 1) results.append(max_group) return results"},{"question":"A group of students is trying to generate Fibonacci-like sequences, but with a twist. Instead of starting with the usual 0 and 1, each student chooses their own starting numbers. They need your help in generating these customized sequences. Write a program that generates these sequences for them. -----Input:----- - The first line will contain N, the number of sequences to generate. Then the sequences follow. - Each sequence-specific input consists of three integers X, Y, and L in a single line, where X and Y are the first two numbers of the sequence and L is the length of the sequence to be generated. -----Output:----- For each sequence, output the first L numbers of the sequence, each number on the same line separated by a space. -----Constraints----- - 1 leq N leq 50 - 1 leq X, Y leq 100 - 2 leq L leq 20 -----Sample Input:----- 3 1 1 5 2 3 4 5 7 6 -----Sample Output:----- 1 1 2 3 5 2 3 5 8 5 7 12 19 31 50 -----EXPLANATION:----- Each sequence starts with the given X and Y. The next numbers in the sequence are generated by summing up the two preceding numbers. For example, the second sequence begins with 2 and 3, then 2+3=5, then 3+5=8, and so on.","solution":"def generate_fibonacci_sequences(n, sequences): Generate customized Fibonacci-like sequences. Parameters: - n: Number of sequences to generate. - sequences: List of tuples, where each tuple contains X, Y, and L. Returns: - List of generated sequences, where each sequence is a list of integers. results = [] for seq in sequences: x, y, l = seq sequence = [x, y] for _ in range(2, l): next_val = sequence[-1] + sequence[-2] sequence.append(next_val) results.append(sequence) return results # Example usage # n = 3 # sequences = [(1, 1, 5), (2, 3, 4), (5, 7, 6)] # print(generate_fibonacci_sequences(n, sequences)) # Output: [[1, 1, 2, 3, 5], [2, 3, 5, 8], [5, 7, 12, 19, 31, 50]]"},{"question":"Problem Description: The Quicksort algorithm is a widely used sorting algorithm due to its average-case time complexity of O(n log n) and its relatively simple implementation. However, sometimes it can perform poorly if the pivot selection strategy is not carefully chosen, leading to the worst-case time complexity of O(n^2). Consider implementing an optimized version of the Quicksort algorithm using the \\"median-of-three\\" pivot strategy. The \\"median-of-three\\" strategy chooses the pivot as the median value among the first, middle, and last elements of the array. This improves the chances of selecting a good pivot and reduces the likelihood of encountering the worst-case scenario. Your task is to write a function `optimized_quicksort` to sort an input list of integers using this strategy. **Input:** - A single integer, T, denoting the number of test cases. - For each test case: - The first line contains a single integer, n, the number of integers in the array. - The second line contains n space-separated integers. **Output:** - For each test case, output the sorted array on a single line, with elements separated by a single space. **Constraints:** - 1 ≤ T ≤ 10^4 - 1 ≤ n ≤ 10^5 - -10^9 ≤ element of the array ≤ 10^9 **Example:** ``` Input: 2 5 3 1 2 5 4 4 10 -1 3 2 Output: 1 2 3 4 5 -1 2 3 10 ``` Write the function: ```python def optimized_quicksort(arr): # Implement Quicksort with the median-of-three pivot strategy pass def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) idx = 1 results = [] for _ in range(T): n = int(data[idx]) idx += 1 arr = list(map(int, data[idx:idx + n])) idx += n optimized_quicksort(arr) results.append(\\" \\".join(map(str, arr))) for result in results: print(result) if __name__ == \\"__main__\\": process_input() ``` Make sure to handle input and output efficiently due to large input sizes.","solution":"def median_of_three(arr, low, mid, high): Returns the index of the median value among arr[low], arr[mid], and arr[high]. if (arr[low] - arr[mid]) * (arr[high] - arr[low]) >= 0: return low elif (arr[mid] - arr[low]) * (arr[high] - arr[mid]) >= 0: return mid else: return high def partition(arr, low, high): mid = (low + high) // 2 pivot_index = median_of_three(arr, low, mid, high) pivot_value = arr[pivot_index] # Move pivot to the end for simplicity arr[pivot_index], arr[high] = arr[high], arr[pivot_index] store_index = low for i in range(low, high): if arr[i] < pivot_value: arr[i], arr[store_index] = arr[store_index], arr[i] store_index += 1 # Move pivot to its final place arr[store_index], arr[high] = arr[high], arr[store_index] return store_index def quicksort(arr, low, high): if low < high: pivot_index = partition(arr, low, high) quicksort(arr, low, pivot_index - 1) quicksort(arr, pivot_index + 1, high) def optimized_quicksort(arr): if len(arr) > 1: quicksort(arr, 0, len(arr) - 1)"},{"question":"A city skyline consists of several buildings of varying heights. Each building is represented by an integer array `H` where `H[i]` denotes the height of the i-th building. You are tasked with calculating the maximum area of a rectangle that can be formed using the buildings, where the rectangle must be aligned with the vertical direction. For example, consider `H = [2, 1, 5, 6, 2, 3]`. The largest rectangle that can be formed has an area of 10, formed by buildings with heights 5 and 6. ------ Input Format ------ - The first line contains a single integer `T` denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer `N` denoting the number of buildings. - The second line contains `N` space-separated integers denoting the heights of the buildings. ------ Output Format ------ For each test case, output the maximum rectangle area that can be formed. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ H[i] ≤ 10^4 The sum of all `N` values in the input does not exceed 10^6. ------ Sample Input 1 ------ 2 6 2 1 5 6 2 3 4 2 4 2 4 ------ Sample Output 1 ------ 10 8 ------ Explanation 1 ------ Test case 1: The largest rectangle has area 10, formed by heights 5 and 6. Test case 2: The largest rectangle has area 8, formed by heights 4 and 4.","solution":"def max_rectangle_area(heights): Calculate the maximum rectangular area in a histogram given the heights of the bars. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_test_cases(test_cases): results = [] for i in range(test_cases[0][0]): _, heights = test_cases[i + 1] results.append(max_rectangle_area(heights)) return results"},{"question":"You are given an array of integers and a target sum. Find the number of pairs in the array that sum up to the target value modulo (10^{9}+7). Example 1: Input: arr = [1, 2, 3, 4] target = 5 Output: 2 Explanation: There are two pairs that sum up to 5: (1, 4) and (2, 3). Example 2: Input: arr = [1, 1, 1, 1] target = 2 Output: 6 Explanation: There are six pairs that sum up to 2: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), and (1, 1). Your Task: You don\'t need to read input or print anything. Your task is to complete the function countPairs() which takes a list of integers arr and an integer target as input and returns the number of pairs that sum up to the target value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 <= len(arr) <= 10^5 - -10^9 <= arr[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def countPairs(arr, target): Returns the number of pairs in the array that sum up to target. The result is taken modulo (10^9 + 7). MOD = 10**9 + 7 count = 0 freq = {} for number in arr: complement = target - number if complement in freq: count += freq[complement] if number in freq: freq[number] += 1 else: freq[number] = 1 return count % MOD"},{"question":"Roman Numerals Encoder Create a function that takes a positive integer and converts it to its corresponding Roman numeral representation. The Roman numerals are: ``` Symbol Value I 1 IV 4 V 5 IX 9 X 10 XL 40 L 50 XC 90 C 100 CD 400 D 500 CM 900 M 1000 ``` The given integer will be between 1 and 3999 (inclusive). Example: ``` roman_encoder(1) -> \\"I\\" roman_encoder(4) -> \\"IV\\" roman_encoder(9) -> \\"IX\\" roman_encoder(58) -> \\"LVIII\\" roman_encoder(1994) -> \\"MCMXCIV\\" ``` Steps: 1. Create a list of tuples mapping Roman numeral symbols to their corresponding values, ordered from largest to smallest. 2. Iterate through the list, subtracting the value from the given integer and appending the corresponding symbol to the result until the integer is reduced to zero. 3. Return the resulting Roman numeral representation as a string.","solution":"def roman_encoder(number): Converts a positive integer to its corresponding Roman numeral representation. :param number: An integer between 1 and 3999 (inclusive). :return: A string representing the Roman numeral of the given number. roman_numerals = [ (1000, \'M\'), (900, \'CM\'), (500, \'D\'), (400, \'CD\'), (100, \'C\'), (90, \'XC\'), (50, \'L\'), (40, \'XL\'), (10, \'X\'), (9, \'IX\'), (5, \'V\'), (4, \'IV\'), (1, \'I\') ] result = [] for value, symbol in roman_numerals: while number >= value: result.append(symbol) number -= value return \'\'.join(result)"},{"question":"Given a string, find the longest substring that appears at least twice without overlapping. In other words, find the longest substring W such that there are at least two occurrences of W in the string as distinct substrings. Constraints * 1 ≤ length of the string ≤ 10000 * The string consists of lowercase English letters only. Input s The input string is given in one line. Output In the first line, print the length of the longest substring that appears at least twice without overlapping. In the second line, print this substring. If there are multiple solutions, any one of them is acceptable. Examples Input banana Output 3 ana Input abcdabc Output 3 abc","solution":"def longest_repeated_substring(s): Given a string, find the longest substring that appears at least twice without overlapping. n = len(s) if n == 1: return 0, \\"\\" # Function to check if there is a repeated substring of length \'length\' def has_repeated_substring(length): seen = set() for i in range(n - length + 1): substring = s[i:i+length] if substring in seen: return substring seen.add(substring) return None left, right = 1, n longest_substring = \\"\\" while left <= right: mid = (left + right) // 2 result = has_repeated_substring(mid) if result: longest_substring = result left = mid + 1 else: right = mid - 1 return len(longest_substring), longest_substring"},{"question":"You are given an array of n integers. You need to find the number of distinct elements in the array that are greater than or equal to the average of the entire array. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 10^5) representing the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. -----Output----- Output a single integer representing the number of distinct elements in the array that are greater than or equal to the average of the array. -----Examples----- Input 5 1 2 3 4 5 Output 3 Input 6 -1 -1 0 0 1 1 Output 2 -----Note----- In the first example, the average of the array is (1 + 2 + 3 + 4 + 5) / 5 = 3. The distinct elements greater than or equal to 3 are {3, 4, 5}, so the output is 3. In the second example, the average of the array is (-1 - 1 + 0 + 0 + 1 + 1) / 6 = 0. The distinct elements greater than or equal to 0 are {0, 1}, so the output is 2.","solution":"def count_elements_gte_avg(n, arr): Returns the number of distinct elements in the array that are greater than or equal to the average of the array. :param n: Number of elements in the array :param arr: The array of elements :return: Number of distinct elements greater than or equal to the average avg = sum(arr) / n distinct_elements = set(arr) count = len([x for x in distinct_elements if x >= avg]) return count"},{"question":"You are given two arrays of integers, `arr1` and `arr2`, and an integer target. Your task is to find all unique pairs of integers `(a, b)` such that `a` is from `arr1` and `b` is from `arr2` and their sum is equal to the target. The pairs `(a, b)` should be distinct; (5, 6) is considered the same as (6, 5). Write a function: ```python def find_pairs(arr1: List[int], arr2: List[int], target: int) -> List[Tuple[int, int]]: ``` Your function should return a list of unique pairs of integers that sum up to the target. The pairs should be sorted in ascending order of `a`. **Constraints:** - Each element in the arrays can be positive or negative integers. - All elements in the arrays are integers. - The length of each array is between 1 and 1000. **Example:** ```python arr1 = [1, 2, 3, 4, 5] arr2 = [3, 4, 5, 6, 7] target = 8 find_pairs(arr1, arr2, target) # Output: [(1, 7), (2, 6), (3, 5), (4, 4)] ``` In this example, the pairs (1, 7), (2, 6), (3, 5), and (4, 4) sum up to the target 8. Since all the pairs have distinct values, they are included in the result.","solution":"from typing import List, Tuple def find_pairs(arr1: List[int], arr2: List[int], target: int) -> List[Tuple[int, int]]: Finds all unique pairs of integers (a, b) such that a is from arr1, b is from arr2, and their sum is equal to the target. result = set() for num1 in arr1: for num2 in arr2: if num1 + num2 == target: result.add((min(num1, num2), max(num1, num2))) return sorted(list(result))"},{"question":"Write a function that simulates an ATM machine. The ATM has a stack of 100 bill denominations and will always try to dispense the exact amount requested by giving out as few 100 bills as possible. However, if the ATM does not have enough bills to cover the entire amount requested, it will dispense whatever amount it can and will notify the user of the remaining amount that it cannot dispense. -----Input----- The input contains two integers: b, the number of 100 bills currently in the ATM (where 0 le b le 1000), and a, the amount requested by the user (where 0 le a le 100000). -----Output----- Output a single line containing two integers. The first integer is the amount dispensed by the ATM, and the second integer is the remaining amount that the ATM could not dispense. If the ATM can dispense the exact amount requested, the second integer should be 0. -----Examples----- Sample Input 1: 5 450 Sample Output 1: 400 50 Sample Input 2: 10 1000 Sample Output 2: 1000 0","solution":"def atm_dispense(bills, amount): Simulates an ATM that dispenses 100 bills. Parameters: bills (int): Number of 100 bills available in the ATM. amount (int): Amount requested by the user. Returns: tuple: Amount dispensed and remaining amount. max_possible_dispense = bills * 100 if amount > max_possible_dispense: dispensed_amount = max_possible_dispense remaining_amount = amount - max_possible_dispense else: dispensed_amount = (amount // 100) * 100 remaining_amount = amount - dispensed_amount return dispensed_amount, remaining_amount"},{"question":"Given an array of integers, you need to determine if it is possible to form a sequence of integers from 1 to N (inclusive) such that the array is a contiguous subarray of the sequence when it is rotated any number of steps (including zero steps). ------ Input Format ------ - The first line of the input contains one integer T, the number of test cases. The description of T test cases follows. - Each test case consists of two lines of input. - The first line of each test case contains a single integer N, the length of the sequence. - The second line of each test case contains N space-separated integers — the values of the array. ------ Output Format ------ For each test case, output a single line — texttt{YES} if the array can be a contiguous subarray of some rotation of the sequence from 1 to N, and texttt{NO} otherwise. The output is not case sensitive, so for example the strings texttt{YES, Yes, yES}, etc. will all be treated as correct. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 - The sum of N over all test cases does not exceed 10^5 ----- Sample Input ------ 3 3 3 1 2 4 2 3 4 1 4 4 3 2 1 ----- Sample Output ------ YES YES NO ----- Explanation ------ Test case 1: The sequence [1, 2, 3] can be rotated to [3, 1, 2], which matches the array. Test case 2: The sequence [1, 2, 3, 4] can be rotated to [2, 3, 4, 1], which matches the array. Test case 3: No rotation of the sequence [1, 2, 3, 4] matches the array [4, 3, 2, 1]. Therefore, the answer is NO.","solution":"def can_form_contiguous_rotated_sequence(N, array): Determines if the array can be a contiguous subarray of some rotation of the sequence from 1 to N. # Create the target sequence [1, 2, ..., N] target = list(range(1, N + 1)) # Double the target sequence to handle the rotation target_doubled = target + target # Check if array is a subarray of target_doubled for i in range(N): if target_doubled[i:i + N] == array: return \\"YES\\" return \\"NO\\" def solve_test_cases(T, test_cases): Processes T test cases and returns the results. results = [] for i in range(T): N, array = test_cases[i] result = can_form_contiguous_rotated_sequence(N, array) results.append(result) return results # Sample usage within a function: def process_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] current_line = 1 for _ in range(T): N = int(lines[current_line]) array = list(map(int, lines[current_line + 1].split())) test_cases.append((N, array)) current_line += 2 results = solve_test_cases(T, test_cases) return \'n\'.join(results)"},{"question":"Write a function `find_unique_string_permutations` that takes a string as input and returns a list of all unique permutations of that string in lexicographically sorted order. The function should consider all characters in the input string, including duplicates. For example: - For the input string \\"abc\\", the function should return [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\']. - For the input string \\"aab\\", the function should return [\'aab\', \'aba\', \'baa\']. Note: - The order of the permutations in the list should be in lexicographically sorted order. - You should not use any built-in function that directly generates permutations.","solution":"def find_unique_string_permutations(s): Returns a list of all unique permutations of the given string in lexicographically sorted order. def permute(prefix, remaining, seen): if not remaining: seen.add(prefix) for i in range(len(remaining)): permute(prefix + remaining[i], remaining[:i] + remaining[i+1:], seen) seen_permutations = set() permute(\\"\\", s, seen_permutations) return sorted(list(seen_permutations))"},{"question":"You are given two strings, A and B, of length m and n respectively. You want to determine the minimum number of operations required to transform A into B. You are allowed the following operations only: 1. **Insert** a character at any position in string A. 2. **Delete** a character from string A. 3. **Substitute** a character in string A with another character. Return the minimum number of operations required to convert string A to string B. # Input - The first line contains an integer `m` (1 ≤ m ≤ 1000) denoting the length of string A. - The second line contains the string `A` of length `m`, consisting only of lowercase English letters. - The third line contains an integer `n` (1 ≤ n ≤ 1000) denoting the length of string B. - The fourth line contains the string `B` of length `n`, consisting only of lowercase English letters. # Output - Output a single integer denoting the minimum number of operations required to convert string A into string B. # Sample Input ``` 5 sunday 6 saturday ``` # Sample Output ``` 3 ``` # Explanation To transform \\"sunday\\" to \\"saturday\\", we need at least 3 operations: 1. Insert \'a\' at position 1 2. Insert \'t\' at position 2 3. Insert \'u\' at position 3 Thus, the minimum number of operations is 3.","solution":"def min_operations_to_convert(A, B): Returns the minimum number of operations required to convert string A to string B using insert, delete, and substitute operations. m = len(A) n = len(B) # Create a 2D array to store the minimum operations count dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill the base cases for i in range(m + 1): dp[i][0] = i # If B is empty, delete all characters from A for j in range(n + 1): dp[0][j] = j # If A is empty, insert all characters of B into A # Fill the rest of the dp array for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min( dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1] # Substitute ) # The answer is in dp[m][n] return dp[m][n]"},{"question":"Alice is playing a puzzle game where she needs to arrange n blocks in a line to create a continuous sequence. Each block has a number written on it, and the sequence should be formed in increasing order starting from 1 up to n. However, the blocks are initially shuffled, and Alice can perform a special operation to rearrange them. The operation allows Alice to pick any block (excluding the first and the last block in the sequence) and swap it with either of its adjacent blocks. Alice wants to know the minimum number of operations required to arrange the blocks in the correct order. Can you help Alice determine this minimum number of operations? -----Input----- The first line contains one integer n (3 le n le 10^5) — the number of blocks. The second line contains the sequence of integers b_1, b_2, dots, b_n (1 le b_i le n), where b_i is the initial number of the i-th block. -----Output----- Print one integer — the minimum number of operations needed to arrange the blocks in increasing order. -----Examples----- Input 5 4 3 1 5 2 Output 3 Input 4 3 1 2 4 Output 2 Input 6 6 5 4 3 2 1 Output 15 -----Note----- In the first example, Alice can get the blocks in the correct order by performing the following operations: 1. Swap the third block with the second block, resulting in [4, 1, 3, 5, 2] 2. Swap the second block with the first block, resulting in [1, 4, 3, 5, 2] 3. Move the fourth block to its correct position, resulting in the final sequence [1, 2, 3, 4, 5] In the second example, Alice can get the blocks in the correct order with the following operations: 1. Swap the third block with the second block, resulting in [3, 2, 1, 4] 2. Swap the first block with the first block, resulting in [1, 2, 3, 4] In the third example, Alice needs to perform many swaps to arrange the initial sequence [6, 5, 4, 3, 2, 1] to [1, 2, 3, 4, 5, 6], resulting in a total of 15 operations.","solution":"def min_operations_to_sort(n, blocks): Function to find the minimum number of operations required to sort the blocks in increasing order. correct_positions = [0] * (n + 1) for i in range(n): correct_positions[blocks[i]] = i sorted_blocks = sorted(blocks) max_length = 0 current_length = 0 last_position = -1 for sorted_block in sorted_blocks: position = correct_positions[sorted_block] if position > last_position: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 last_position = position max_length = max(max_length, current_length) return n - max_length"},{"question":"You are given two strings S1 and S2, both consisting of lowercase English letters. Determine the length of the longest substring that appears in both S1 and S2. A substring is a contiguous sequence of characters within a string. -----Constraints----- - 1 leq |S1|, |S2| leq 1000 -----Input----- Input is given from Standard Input in the following format: S1 S2 -----Output----- Print the length of the longest substring that appears in both S1 and S2. -----Sample Input----- abcdef zcdemn -----Sample Output----- 3 The longest common substring is \\"cde\\", which has a length of 3.","solution":"def longest_common_substring(S1, S2): Returns the length of the longest substring that appears in both S1 and S2. len1, len2 = len(S1), len(S2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] max_length = 0 for i in range(1, len1 + 1): for j in range(1, len2 + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Alice is creating a game that requires players to rearrange a string while keeping track of a specific property. She wants to know how many valid rearrangements of a given string S form a palindrome. A palindrome is a word that reads the same forwards and backwards. For instance, \\"level\\", \\"radar\\", and \\"madam\\" are palindromes. Your task is to help Alice by determining the number of distinct rearrangements of the string S that are palindromes. -----Input----- The input consists of a single line which contains the string S (1 ≤ |S| ≤ 10^5). The string S contains only lowercase English letters. -----Output----- Output a single integer that represents the number of distinct rearrangements of the string S that are palindromes. -----Examples----- Input aabb Output 2 Input abc Output 0 -----Note----- In the first test case, the string \\"aabb\\" has 2 possible palindromic rearrangements: \\"abba\\" and \\"baab\\". In the second test case, the string \\"abc\\" has no possible palindromic rearrangements.","solution":"def count_palindromic_rearrangements(S): Counts the number of distinct palindromic rearrangements of the string S. from collections import Counter from math import factorial def factorial_div(numerator, denominator_counts): result = factorial(numerator) for count in denominator_counts: if count > 1: result //= factorial(count) return result # Count occurrences of each character char_count = Counter(S) # Check the number of odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd count, no palindromic rearrangement is possible if odd_count > 1: return 0 # Calculate half factorial considering the counts of characters half_length = sum(count // 2 for count in char_count.values()) half_counts = [count // 2 for count in char_count.values()] return factorial_div(half_length, half_counts)"},{"question":"Chef has been practicing rolling dice and wants to determine the outcomes of certain dice rolls. Each dice roll returns a result between 1 and 6. Chef is curious about the sequence of results he gets from multiple dice rolls. He realizes that sometimes the same result appears consecutively, and he wants to know the longest streak of the same result appearing in sequence. Your task is to write a program that helps Chef find the maximum length of consecutive occurrences of the same result in his series of dice rolls. ------ Input: ------ First line will contain T, number of testcases. Then the testcases follow. The first line of each test case contains N, the number of dice rolls. The second line of each test case contains N space separated integers - R_{1}, R_{2}, ..., R_{N}, where R_{i} is the result of the i^{th} dice roll. ------ Output: ------ For each testcase, output a single integer, the maximum length of consecutive occurrences of the same dice result. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ R_{i} ≤ 6 ------ Sample Input 1 ------ 2 6 3 3 3 3 1 2 7 4 4 4 4 4 4 4 ------ Sample Output 1 ------ 4 7 ------ Explanation 1 ------ Test Case 1 - The result 3 appears consecutively 4 times. - The result 1 appears consecutively 1 time. - The result 2 appears consecutively 1 time. Therefore, the longest streak is 4. Test Case 2 - The result 4 appears consecutively 7 times. Therefore, the longest streak is 7.","solution":"def max_consecutive_same_dice_rolls(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] rolls = test_cases[i][1] max_streak = 1 current_streak = 1 for j in range(1, N): if rolls[j] == rolls[j-1]: current_streak += 1 else: if current_streak > max_streak: max_streak = current_streak current_streak = 1 if current_streak > max_streak: max_streak = current_streak results.append(max_streak) return results"},{"question":"Alex is learning about string manipulation and came across an interesting problem. As he practiced, he realized he needed help computing the smallest lexicographical string formed by cyclically rotating a given string. A cyclic rotation of a string is obtained by moving the first character of the string to the end. Given a string `s`, the task is to find the lexicographically smallest string that can be obtained by performing any number of cyclic rotations on `s`. Input: The first line of input will be `t`, the number of test cases. The next `t` lines will each contain a single string `s` of lower-case letters. Output: For each test case, print the lexicographically smallest string that can be obtained by any cyclic rotation of `s`. Constraints: 1 ≤ t ≤ 20 1 ≤ |s| ≤ 100 SAMPLE INPUT 3 cba baca daab SAMPLE OUTPUT acb aabc aabd Explanation: In the first test case, the cyclic rotations of the string \\"cba\\" are: \\"cba\\", \\"bac\\", and \\"acb\\". The smallest lexicographically string is \\"acb\\". In the second test case, the cyclic rotations of the string \\"baca\\" are: \\"baca\\", \\"acab\\", \\"caba\\", and \\"abac\\". The smallest lexicographically string is \\"abac\\". In the third test case, the cyclic rotations of the string \\"daab\\" are: \\"daab\\", \\"aabd\\", \\"abda\\", and \\"bdaa\\". The smallest lexicographically string is \\"aabd\\".","solution":"def smallest_lexicographic_rotation(s): Returns the lexicographically smallest string obtained by cyclic rotations of s. n = len(s) cyclic_rotations = [s[i:] + s[:i] for i in range(n)] return min(cyclic_rotations) def process_input(t, cases): results = [] for i in range(t): results.append(smallest_lexicographic_rotation(cases[i])) return results"},{"question":"In a faraway kingdom, there is a tradition in which knights participate in a jousting tournament. Each knight has a certain strength level. The king wants to organize the tournament in such a way that the knights are evenly matched in every joust to make the tournament interesting. To achieve this, knights are grouped into pairs, and each pair should have the closest possible strength levels. Given the strength levels of the knights, determine the maximum strength difference within each pair. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains two lines: - The first line contains an integer N, the number of knights. - The second line contains N integers, the strength levels of the knights. ------ Output Format ------ For each test case, output in a single line the maximum strength difference within each pair. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{5} 1 ≤ strength ≤ 10^9 ------ Sample Input 1 ------ 2 4 10 20 30 40 5 8 7 6 5 4 ------ Sample Output 1 ------ 10 1 ------ Explanation 1 ------ Test Case 1: The pairs formed are (10, 20) and (30, 40). The maximum difference in strength for these pairs is 10. Test Case 2: The pairs formed can be (8, 7), (6, 5), with the knight having strength 4 left out. The maximum difference in strength within these pairs is 1.","solution":"def max_strength_difference_in_pairs(test_cases): results = [] for case in test_cases: N, strengths = case strengths.sort() max_diff = 0 for i in range(1, N, 2): diff = strengths[i] - strengths[i-1] if diff > max_diff: max_diff = diff results.append(max_diff) return results"},{"question":"Roman has a huge bookshelf consisting of n different books. Each book has a unique identification number ranging from 1 to n. Unfortunately, his daughter accidentally rearranged the books, and now all the books are in a random order on a single shelf. Roman is an avid reader who likes his books sorted in ascending order based on their identification number. He wants to find the minimum number of adjacent swaps required to sort the bookshelf. An adjacent swap of two books means swapping the positions of two neighboring books. Help Roman determine the minimum number of adjacent swaps needed to sort the bookshelf. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books on the shelf. The second line contains n integers representing the current order of the books on the shelf. Each integer is unique and ranges from 1 to n. Output Print a single integer — the minimum number of adjacent swaps required to sort the bookshelf in ascending order. Example Input 5 3 4 2 5 1 Output 6 Explanation: - Swap (3, 4): 3 2 4 5 1 - Swap (3, 2): 2 3 4 5 1 - Swap (2, 3): 2 3 4 1 5 - Swap (4, 1): 2 3 1 4 5 - Swap (3, 1): 2 1 3 4 5 - Swap (2, 1): 1 2 3 4 5","solution":"def min_adjacent_swaps(n, book_order): Returns the minimum number of adjacent swaps required to sort the bookshelf. :param n: int, number of books on the shelf :param book_order: list of int, current order of the books on the shelf :return: int, minimum number of adjacent swaps required to sort the bookshelf # Bubble sort algorithm to count the number of swaps swaps = 0 books = book_order[:] for i in range(n): for j in range(n - 1): if books[j] > books[j + 1]: books[j], books[j + 1] = books[j + 1], books[j] swaps += 1 return swaps"},{"question":"Design a File Categorization System You need to implement a program to organize a set of files based on their extensions. Each file is characterized by its filename, which includes the extension that indicates the type of the file (e.g., \\"document.txt\\", \\"image.jpg\\"). The goal is to categorize the files into different folders based on their extensions, ensuring each folder contains only files of a specific type. If two files have the same name but different extensions, they should be placed in their respective folders. Your task is to read a list of filenames and then print out the names of the folders (these should be the extensions without the dot) and the names of the files placed in each folder. # Input Format: 1. The first line contains a single integer N, the number of files. 2. Each of the next N lines contains a single string, the filename (including the extension). # Output Format: Print the names of the folders along with the files in each folder, sorted lexicographically by folder name and then by file name within each folder. Each folder name should be followed by a colon (\':\') and then a space-separated list of filenames in the folder. # Constraints: 1. 1 ≤ N ≤ 1000 2. Each filename will have a maximum length of 100 characters and will contain alphanumeric characters and a dot (\'.\'). # Sample Input: ``` 5 document.txt image.jpg note.txt archive.zip picture.jpg ``` # Sample Output: ``` jpg: image.jpg picture.jpg txt: document.txt note.txt zip: archive.zip ``` # Explanation: - The input list of filenames includes 5 files with different extensions. - Files with the \\"jpg\\" extension are placed in the \\"jpg\\" folder, sorted lexicographically. - Similarly, files with the \\"txt\\" and \\"zip\\" extensions are placed in their respective folders and sorted. # Notes: - Ensure that your program handles cases where the same file name appears with different extensions (e.g., \\"file1.txt\\" and \\"file1.jpg\\"). - The output should maintain clear and consistent formatting as shown in the sample output. Write a function to implement the program based on the given specifications.","solution":"def categorize_files(filenames): Categorizes the given list of filenames based on their extensions. Parameters: filenames (list of str): List of filenames with extensions. Returns: dict: A dictionary where keys are extensions and values are lists of filenames sorted lexicographically. from collections import defaultdict file_dict = defaultdict(list) for filename in filenames: # Split the filename into name and extension name, ext = filename.rsplit(\'.\', 1) file_dict[ext].append(filename) # Prepare output in the required format result = {} for ext in sorted(file_dict.keys()): result[ext] = \' \'.join(sorted(file_dict[ext])) return result def format_output(categorized_files): Formats the categorized files dictionary into the required string format. Parameters: categorized_files (dict): Dictionary with extensions as keys and sorted filenames as values. Returns: str: Formatted string as specified in the problem statement. result = [] for ext, files in categorized_files.items(): result.append(f\\"{ext}: {files}\\") return \'n\'.join(result)"},{"question":"Alice loves playing video games on her favorite console, but she has a problem. One of her favorite games involves a maze with N rooms and N-1 corridors. Each room is connected directly or indirectly to every other room, forming a tree structure. The rooms are numbered from 1 to N and are connected by corridors such that each corridor links exactly two rooms. Alice has to traverse the maze starting from room 1 and wants to know how many distinct paths there are from room 1 to any other room. Each path Alice takes should visit each room at most once. Write a program to help Alice find out the number of distinct paths from room 1 to every other room. You are given the number of rooms, N, and the list of corridors connecting pairs of rooms. -----Input----- The first line contains an integer, N (2 leq N leq 100000), which is the number of rooms in the maze. Each of the next N-1 lines contains two integers, u and v, that represents a corridor connecting room u and room v (1 leq u, v leq N). -----Output----- Output N-1 lines, each containing the number of distinct paths from room 1 to rooms 2, 3, ..., N respectively. -----Examples----- Sample Input: 5 1 2 1 3 2 4 2 5 Sample Output: 1 1 2 2 Explanation: - There is 1 path from room 1 to room 2: (1 -> 2) - There is 1 path from room 1 to room 3: (1 -> 3) - There are 2 paths from room 1 to room 4: (1 -> 2 -> 4) and (1 -> 2 -> 5 -> 4) - There are 2 paths from room 1 to room 5: (1 -> 2 -> 5) and (1 -> 2 -> 4 -> 5)","solution":"def count_paths(n, edges): from collections import defaultdict, deque # Build the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Distance array to store the number of distinct paths to each node distance = [-1] * (n + 1) distance[1] = 0 # BFS to calculate the distances from node 1 queue = deque([1]) while queue: node = queue.popleft() for neighbor in graph[node]: if distance[neighbor] == -1: # if not visited distance[neighbor] = distance[node] + 1 queue.append(neighbor) # The result for nodes 2 to N result = [distance[i] for i in range(2, n + 1)] return result # Example code to test the function if __name__ == \\"__main__\\": n = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(count_paths(n, edges)) # Should output [1, 1, 2, 2]"},{"question":"Given two sorted arrays A and B, with lengths |A| and |B| respectively, you are tasked with finding the kth smallest element among the union of these arrays. The union of A and B is defined as a new set that contains all elements from both arrays, sorted in non-decreasing order. The arrays may contain duplicates. Write a function that takes two sorted arrays and an integer k as input and returns the kth smallest element in their union. Try to optimize for time complexity better than O(|A| + |B|). Input The first line contains two integers |A| and |B| (1 ≤ |A|, |B| ≤ 10^5) — the lengths of arrays A and B. The second line contains |A| sorted integers a1, a2, ..., a|A| (-10^9 ≤ ai ≤ 10^9). The third line contains |B| sorted integers b1, b2, ..., b|B| (-10^9 ≤ bi ≤ 10^9). The fourth line contains an integer k (1 ≤ k ≤ |A| + |B|) — the k-th smallest element to find. Output In a single line, print the k-th smallest element in the union of arrays A and B. Examples Input 5 4 1 3 5 7 9 2 4 6 8 5 Output 5 Input 3 3 1 3 8 2 4 9 4 Output 4","solution":"def find_kth_smallest(A, B, k): Finds the k-th smallest element in the union of two sorted arrays A and B. def kth_smallest(A, B, k): lenA, lenB = len(A), len(B) # Ensure A is the smaller array if lenA > lenB: return kth_smallest(B, A, k) # Base cases if lenA == 0: return B[k-1] if k == 1: return min(A[0], B[0]) i = min(lenA, k // 2) j = min(lenB, k // 2) if A[i-1] > B[j-1]: return kth_smallest(A, B[j:], k - j) else: return kth_smallest(A[i:], B, k - i) return kth_smallest(A, B, k)"},{"question":"Given a string s, find the length of the longest substring without repeating characters. Example: Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Follow up: Try to solve it in O(n) time complexity using sliding window technique.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. start = 0 max_len = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: max_len = max(max_len, i - start + 1) used_chars[char] = i return max_len"},{"question":"# Task Given two strings `s1` and `s2`, your task is to determine if `s1` can be transformed into `s2` by performing a series of shifts. A shift consists of moving the leftmost character of a string to the rightmost position. # Example For `s1 = \\"abcde\\"` and `s2 = \\"cdeab\\"`, the output should be `true`. For `s1 = \\"abcde\\"` and `s2 = \\"abced\\"`, the output should be `false`. # Input/Output - `[input]` string `s1` A string of length `1 ≤ s1.length ≤ 1000` - `[input]` string `s2` A string of length `1 ≤ s2.length ≤ 1000` - `[output]` a boolean Return `true` if `s1` can be transformed into `s2` by performing a series of shifts, otherwise return `false`.","solution":"def can_transform_by_shifting(s1, s2): Determines if s1 can be transformed into s2 by performing a series of shifts. Parameters: s1 (str): The original string. s2 (str): The target string. Returns: bool: True if s1 can be transformed into s2 by shifting, otherwise False. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Description You are tasked with helping knights in a medieval kingdom track their dragons and manage their lairs. Each knight is assigned a list of dragons, where each dragon resides in a specific lair represented by coordinates on a 2D plane. Your task is to determine the closest dragon lair to a given starting point for each knight. Problem Write a function `closest_dragon_lair` that, given a list of knights\' dragon lairs and a starting point, returns a list of indices for the closest lair for each knight. If there are multiple lairs at the same distance, return the lair with the smallest index. # Input 1. `knights_lairs`: A list of lists, where each inner list contains tuples representing the coordinates (x, y) of the dragon lairs for a single knight. For example: `[[(1, 2), (3, 4)], [(5, 6), (7, 8)], ...]` 2. `starting_point`: A tuple (x, y) representing the starting point on the 2D plane from which distances to lairs will be calculated. # Output - Return a list of integers where each integer is the index of the closest dragon lair for each knight. # Example Given the input: 1. `knights_lairs = [[(1, 2), (3, 4)], [(5, 6), (7, 8)]]` 2. `starting_point = (0, 0)` Your function should return: `[0, 0]` # Explanation For the first knight, the distances to their lairs from the starting point (0, 0) are: - Lair (1, 2): √((1-0)² + (2-0)²) = √5 - Lair (3, 4): √((3-0)² + (4-0)²) = √25 The closest lair is the first one at index 0. For the second knight, the distances to their lairs from the starting point (0, 0) are: - Lair (5, 6): √((5-0)² + (6-0)²) = √61 - Lair (7, 8): √((7-0)² + (8-0)²) = √113 The closest lair is the first one at index 0. # Constraints - The number of knights (i.e., the length of `knights_lairs`) will be between 1 and 100. - Each knight will have between 1 and 100 dragon lairs. - Coordinates of lairs and starting points will be integers between -1000 and 1000. - If multiple lairs are equally close, return the lair with the smallest index.","solution":"import math def closest_dragon_lair(knights_lairs, starting_point): def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) closest_lairs = [] for lairs in knights_lairs: closest_index = 0 min_distance = float(\'inf\') for index, lair in enumerate(lairs): d = distance(starting_point, lair) if d < min_distance: min_distance = d closest_index = index closest_lairs.append(closest_index) return closest_lairs"},{"question":"As a network administrator, you oversee n computers connected in a network. Each computer can communicate directly with a subset of other computers, forming a network of direct connections. Occasionally, a computer experiences an outage, severing all its direct connections. Your job is to determine if the network is still fully connected (i.e., there is a path between any two operational computers) after such an outage. Input - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of computers and the number of direct connections in the network. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating a direct connection between computer u and computer v. - The last line contains a single integer t (1 ≤ t ≤ n) — the computer that experiences an outage. Output - Print \\"Connected\\" if the network remains fully connected after computer t\'s outage. - Print \\"Disconnected\\" otherwise. Examples Input 5 4 1 2 1 3 2 4 3 5 3 Output Disconnected Input 5 5 1 2 2 3 3 4 4 5 5 1 4 Output Connected Note In the first example, computer 3 suffers an outage, breaking the network into two separate parts: {1, 2} and {4, 5}. Thus, the network becomes disconnected. In the second example, removing computer 4 still leaves the network fully connected through the remaining cycles, ensuring continuous communication among all computers.","solution":"def is_network_connected(n, m, connections, t): def dfs(node, visited, graph, outage_node): if node == outage_node: return visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, graph, outage_node) # Create the graph graph = {i: [] for i in range(1, n + 1)} for u, v in connections: graph[u].append(v) graph[v].append(u) # Outage node outage_node = t # Find any starting node not equal to the outage node start_node = next((i for i in range(1, n + 1) if i != outage_node), None) if start_node is None: return \\"Connected\\" visited = set() dfs(start_node, visited, graph, outage_node) # Check if all nodes except the outage node are visited for i in range(1, n + 1): if i != outage_node and i not in visited: return \\"Disconnected\\" return \\"Connected\\""},{"question":"Anna is developing a new application and she needs to manage a list of tasks with different priority levels. Each task has a unique name and a priority level. She needs to perform several operations on this list of tasks. There are three types of operations Anna needs to perform: 1. Add a new task to the list with a given name and priority level. 2. Remove a task by its name. 3. Get the name of the task with the highest priority. In case of ties, the task that was added earlier is considered higher priority. Help Anna to implement these operations effectively. Input The first line of input contains integer n (1 ≤ n ≤ 2·10^5) — the number of operations. Each of the next n lines starts with an integer t (1 ≤ t ≤ 3) — the type of the operation. A string s (1 ≤ |s| ≤ 1000) and an integer p (1 ≤ p ≤ 10^9) follow for the operation of the first type. A string s follows for the operation of the second type. No additional input follows for the operation of the third type. Output For the operations of the third type, print on a separate line the name of the task with the highest priority. If there are no tasks in the list, print \\"NO TASKS\\". Example Input 6 3 1 task1 5 1 task2 10 3 2 task2 3 Output NO TASKS task2 task1","solution":"import heapq class TaskManager: def __init__(self): self.tasks = {} self.task_queue = [] self.counter = 0 def add_task(self, name, priority): if name not in self.tasks: self.tasks[name] = (priority, self.counter) heapq.heappush(self.task_queue, (-priority, self.counter, name)) self.counter += 1 def remove_task(self, name): if name in self.tasks: self.tasks.pop(name) def get_highest_priority_task(self): while self.task_queue and self.task_queue[0][2] not in self.tasks: heapq.heappop(self.task_queue) if not self.task_queue: return \\"NO TASKS\\" return self.task_queue[0][2]"},{"question":"A robot is placed in a grid of size N x M. The robot can move up, down, left, or right, but cannot move outside the grid boundaries. Each grid cell contains a value, and the robot starts at the top-left corner of the grid (0, 0), moving to the bottom-right corner (N-1, M-1). The robot can only move to cells with values greater than or equal to the value of its current cell. You need to calculate the number of distinct paths the robot can take from the start to the end while satisfying the movement constraint. Input Format: The first line contains two integers N and M, the number of rows and columns of the grid respectively. Each of the next N lines contains M integers, representing the values in the grid. Output Format: Print a single number denoting the number of distinct paths the robot can take from the top-left corner to the bottom-right corner modulo 10^9 + 7. If no such path exists, print 0. Constraints: 1 ≤ N, M ≤ 1000 0 ≤ Grid values ≤ 10^9 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 6 Explanation There are six distinct paths the robot can take from the start to the end: 1 → 2 → 3 → 6 → 9 1 → 4 → 5 → 6 → 9 1 → 2 → 5 → 6 → 9 1 → 2 → 3 → 6 → 8 → 9 1 → 4 → 5 → 8 → 9 1 → 4 → 7 → 8 → 9","solution":"MOD = 10**9 + 7 def count_paths(N, M, grid): if grid[0][0] > grid[N-1][M-1]: return 0 dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if i > 0 and grid[i][j] >= grid[i-1][j]: dp[i][j] += dp[i-1][j] if j > 0 and grid[i][j] >= grid[i][j-1]: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1] # Example usage: grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(count_paths(3, 3, grid)) # Output 6"},{"question":"In a faraway galaxy, there is a planet called \\"Algorithma\\" where the citizens use strange symbols as currency. Each symbol has a positive integer value associated with it. One day, a famous mathematician Prof. Factorial, discovered a special property about these symbols that if you multiply the values of contiguous subsets of symbols, you might get a factorial number. Given an array of n integers b_1, b_2, ldots, b_n which represent the values of the symbols, your task is to find out if there exists any contiguous subarray such that the product of its elements is a factorial of some integer. If such a contiguous subarray exists, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains a single integer q (1 le q le 10^3) — the number of test cases. Then q test cases follow. The first line of each test case contains a single integer n (1 le n le 10^4) — the length of the array b. The next line contain n integers b_1, b_2, ldots, b_n (1 le b_{i} le 10^6) separated by spaces describing elements of the array b. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^4. -----Output----- For each test case, print \\"YES\\" if there exists a contiguous subarray whose product is a factorial, otherwise print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 2 6 1 2 6 24 3 4 5 3 4 7 8 9 Output YES NO -----Explanation----- In the first test case, the contiguous subarray [1, 2, 6] has a product of 1 * 2 * 6 = 12, which is not a factorial. The subarray [6, 24] has a product of 6 * 24 = 144, which is also not a factorial. However, [1, 2, 6, 24] has a product of 1 * 2 * 6 * 24 = 288, which is also not a factorial, Notice that [6] itself is 6! = 720 and matches the condition. Therefore, the answer is \\"YES\\". In the second test case, there is no contiguous subarray whose product is a factorial number, hence the answer is \\"NO\\".","solution":"import math def generate_factorials(limit): factorials = set() i = 1 fact = 1 while fact <= limit: factorials.add(fact) i += 1 fact *= i return factorials MAX_VAL = 10**6 factorials = generate_factorials(MAX_VAL) def is_subarray_product_factorial(arr): n = len(arr) for start in range(n): product = 1 for end in range(start, n): product *= arr[end] if product in factorials: return \\"YES\\" # If product exceeds max value, no need to check further for this subarray if product > MAX_VAL: break return \\"NO\\" def check_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(is_subarray_product_factorial(arr)) return results"},{"question":"You are given a list of N positive integers. Your task is to partition these integers into two subsets such that the absolute difference between the sums of the two subsets is minimized. Implement a function `min_subset_difference(nums: List[int]) -> int` that returns this minimum difference. # Example **Input** ``` [1, 6, 11, 5] ``` **Output** ``` 1 ``` **Explanation** One way to partition the list into two subsets is: {1, 6, 5} and {11}, where the difference between their sums is |(1+6+5) - (11)| = |12 - 11| = 1. # Input - A list of integers `nums` where 1 ≤ N ≤ 200 is the number of integers, and each integer is between 1 and 10,000. # Output - An integer representing the minimum possible difference between the sums of the two subsets. # Constraints - The function should have a reasonable time complexity to accommodate the constraints.","solution":"from typing import List def min_subset_difference(nums: List[int]) -> int: total_sum = sum(nums) n = len(nums) target = total_sum // 2 # Initialize DP array dp = [False] * (target + 1) dp[0] = True # Fill DP array for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] # Find the largest j such that dp[j] is True for j in range(target, -1, -1): if dp[j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"Sara is practicing array manipulation. She comes across a peculiar problem involving the reordering of an array. Given an array of integers, she needs to sort only the odd integers in ascending order while leaving the even integers in their original relative positions. Input The input consists of an integer n and the next line contains n integers separated by spaces. Output Print the resulting array after sorting the odd integers. Constraints 1 ≤ n ≤ 100 -10^3 ≤ array[i] ≤ 10^3 SAMPLE INPUT 7 5 3 2 8 1 4 11 SAMPLE OUTPUT 1 3 2 8 5 4 11 Explanation In the example, the odd numbers (5, 3, 1, and 11) have been sorted to become 1, 3, 5, and 11. Meanwhile, the even numbers (2, 8, and 4) remain in their original positions.","solution":"def sort_odds(array): Given an array of integers, sort the odd numbers in ascending order while leaving the even numbers in their original positions. :param array: List of integers. :return: List of integers with sorted odd numbers. # Extract odd numbers and sort them odds = sorted([x for x in array if x % 2 != 0]) # Generator to iterate through the sorted odd numbers odd_iter = iter(odds) # Reconstruct the array with sorted odds and original evens result = [next(odd_iter) if x % 2 != 0 else x for x in array] return result def process_input(n, array): Process the input according to the problem statement. :param n: The number of integers in the array. :param array: The list of integers. :return: Modified list as per the solution. return sort_odds(array)"},{"question":"You are given a list of strings and your task is to determine if each string contains all unique characters. A string with all unique characters is a string where no character repeats. You need to check each string in the list and output \\"Yes\\" if the string contains all unique characters, otherwise output \\"No\\". Input The input consists of an integer `n`, the number of strings, followed by `n` lines where each line contains one string. Each string consists of only lowercase English letters and its length varies from 1 to 100. Output Output `n` lines, each containing either \\"Yes\\" or \\"No\\". Examples Input 3 abcdef hello python Output YES NO YES Note In the first string \\"abcdef\\", all characters are unique. In the second string \\"hello\\", the character \'l\' repeats. In the third string \\"python\\", all characters are unique.","solution":"def all_unique_characters(strings): Returns a list of \\"Yes\\" or \\"No\\" for each string in the input list, indicating whether the string has all unique characters. results = [] for string in strings: if len(string) == len(set(string)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Word Wrangler =========== Create a function that takes a list of words and a string of scrambled letters. The function should return a list of words (from the given list) that can be formed using some or all of the letters in the scrambled string. Each letter from the scrambled string can only be used as many times as it appears in the given string. # Example Consider the input list `words = [\\"bat\\", \\"tab\\", \\"cat\\", \\"car\\"]` and the scrambled string `s = \\"tacb\\"`. In this case, the function should return `[\\"bat\\", \\"tab\\", \\"cat\\"]` because all these words can be formed using the letters from `tacb`. # Implementation ```python def word_wrangler(words, scrambled): # Your code here pass ``` # Constraints - The length of each word in the given list and the scrambled string will be at most 50 characters. - The return array should have words in the order they appear in the provided word list. # Testing A function `similar_lists` is provided for testing. This function compares two unordered lists to check if they contain the same elements, invariant of the order. ```python test.expect(similar_lists(word_wrangler([\\"bat\\", \\"tab\\", \\"cat\\", \\"car\\"], \\"tacb\\"), [\\"bat\\", \\"tab\\", \\"cat\\"])) ``` # Further thinking Discuss how different algorithmic approaches such as sorting the words\' letters or using frequency counts might affect the efficiency of your solution. Can you improve your implementation to operate faster?","solution":"from collections import Counter def word_wrangler(words, scrambled): Returns a list of words that can be formed using some or all of the letters in the scrambled string. scrambled_count = Counter(scrambled) result = [] for word in words: word_count = Counter(word) can_form = True for letter, count in word_count.items(): if scrambled_count[letter] < count: can_form = False break if can_form: result.append(word) return result"},{"question":"Background There\'s a tech-savvy child named Alvis who loves both programming and treasure hunting. Alvis decided to use his programming skills to create a treasure hunting game on a grid-based map. Problem Alvis\'s treasure map is represented by an `n x n` grid where each cell can either be empty or contain a treasure chest with a certain number of gold coins. Starting from the top-left corner of the grid, Alvis wants to collect as many coins as possible while making his way to the bottom-right corner. However, there is a constraint to his movement; he can only move either right or down at any point in time. Given the grid and the number of coins in each cell, determine the maximum number of coins Alvis can collect when traveling from the top-left to the bottom-right corner of the grid. Constraints The input satisfies the following conditions: * The grid size is given as an integer `n`, where `1 ≤ n ≤ 100`. * The number of coins in each cell is given as an integer `0 ≤ coins ≤ 100`. * Alvis can only move to the right or downward. Input The input consists of: * An integer `n` representing the size of the grid. * `n` lines of space-separated integers, each containing `n` integers representing the number of coins in each cell of the grid. Output Output the maximum number of coins that Alvis can collect in one line. Examples Input 4 0 6 0 2 0 1 4 8 5 2 0 3 2 4 1 0 Output 22 Input 3 4 2 1 1 9 2 3 6 7 Output 28 Input 2 0 2 2 0 Output 2","solution":"def max_coins(grid): n = len(grid) # Initialize a dp array with zeros dp = [[0] * n for _ in range(n)] # Fill the dp array dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[-1][-1]"},{"question":"In a small town, there are N houses numbered from 1 to N. Each house is connected by a series of one-way roads, where each road has a certain length. The town\'s structure can be represented as a directed graph where intersections serve as nodes, and roads serve as directed edges with weights. You are asked to determine the shortest distance for each house from house 1. If it is impossible to reach a house from house 1, the distance should be reported as -1. -----Constraints----- - All input values are integers. - 1≤N≤1000 - 0≤M≤10^5 (the number of one-way roads) - 1≤length of each road≤10^6 -----Input----- The input is given from Standard Input in the following format: N M u_1 v_1 length_1 u_2 v_2 length_2 : u_M v_M length_M Each line represents a one-way road from house `u_i` to house `v_i` with length `length_i`. -----Output----- Print the shortest distance from house 1 to each house (2 to N) on separate lines. If a house is unreachable, print -1 for that house. -----Sample Input----- 4 4 1 2 2 1 3 4 2 4 1 3 4 2 -----Sample Output----- 2 4 3","solution":"import heapq def dijkstra(N, M, roads): graph = {i: [] for i in range(1, N + 1)} for u, v, length in roads: graph[u].append((v, length)) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) result = [] for i in range(2, N + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"In a specialized game of table tennis, two players (Player 1 and Player 2) compete on a grid-sized table of M rows and N columns. The game is unique in that the ball can only be moved by the players, starting from the top-left corner (1,1) to the bottom-right corner (M,N). Each player takes turns and can move the ball to any of its neighboring cells either to the right or down as long as they don\'t move out of the table. Both players want to maximize the number of moves they can make. However, once a player moves the ball to the bottom-right corner, the game ends, and the number of moves made by each player is recorded. Given the dimensions of the table, determine the total number of moves required to move the ball from the top-left to the bottom-right corner under optimal play. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - Each test case consists of two integers M and N representing the dimensions of the table. -----Output:----- For each test case, print a single integer representing the total number of moves required to move the ball from the top-left to the bottom-right corner for the given table dimensions. -----Constraints----- - 1 leq T leq 10^5 - 1 leq M, N leq 10^5 -----Sample Input:----- 3 2 2 3 3 1 5 -----Sample Output:----- 2 4 4 -----Explanation:----- Test Case 1: - The ball can move from (1,1) to (1,2), then from (1,2) to (2,2). Total moves: 2. Test Case 2: - The ball moves from (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). Total moves: 4. Test Case 3: - The ball moves from (1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5). Total moves: 4.","solution":"def total_moves(M, N): Given dimensions M and N of a table, returns the total number of moves from the top-left to the bottom-right corner. return (M - 1) + (N - 1) def solve(test_cases): Takes a list of tuples representing test cases. Each tuple contains two integers M and N representing the dimensions of the table. Returns a list of integers where each integer represents the total number of moves for the corresponding test case. results = [] for M, N in test_cases: results.append(total_moves(M, N)) return results"},{"question":"# Description Write a function that accepts a non-negative integer `n` and returns a list of all steps to write `n` as a sum of one or more consecutive positive integers. Each representation should be in the form of a list of integers in increasing order. Example ``` 9 -> [[2, 3, 4], [4, 5]] 15 -> [[1, 2, 3, 4, 5], [4, 5, 6], [7, 8]] ```","solution":"def find_consecutive_sums(n): Finds and returns all possible lists of consecutive positive integers that sum up to the non-negative integer n. if n <= 0: return [] results = [] # We will use the formula for the sum of an arithmetic series: # S = n(a + l) / 2 where n is the number of terms, a is the first term, and l is the last term. # We need to find all possible \'n\' and \'a\' where the sum S = n for start in range(1, n // 2 + 2): sum_ = 0 sequence = [] for i in range(start, n): sum_ += i sequence.append(i) if sum_ == n: results.append(sequence) break elif sum_ > n: break return results"},{"question":"Alice manages a storage system in her warehouse. The storage system consists of n stacks of boxes, where each stack can be represented as a list. The top of each stack is represented by the end of the list (i.e., the last element in the list). Alice can perform a set of queries on the stacks. There are two types of queries: 1. `add x y` - Add a box labeled y to the top of stack x. 2. `remove x` - Remove the top box from stack x. If stack x is empty, do nothing. 3. `count x` - Return the number of boxes in stack x. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of stacks. The next line contains an integer q (1 ≤ q ≤ 2 × 10^5) — the number of queries. Each of the following q lines describes a query of one of the three types described above. Output For each `count x` query, output a single integer — the number of boxes in stack x. Examples Input 2 5 add 1 5 add 1 3 remove 1 count 1 count 2 Output 1 0 Input 3 7 add 1 10 add 2 20 add 3 30 count 1 count 2 remove 3 count 3 Output 1 1 0","solution":"def manage_stacks(n, queries): Manages multiple stacks based on add, remove, and count operations. Args: n: An integer indicating the number of stacks. queries: A list of query strings with operations `add`, `remove`, and `count`. Returns: A list containing the results of \'count\' queries. stacks = [[] for _ in range(n)] results = [] for query in queries: parts = query.split() if parts[0] == \\"add\\": x = int(parts[1]) - 1 y = int(parts[2]) stacks[x].append(y) elif parts[0] == \\"remove\\": x = int(parts[1]) - 1 if stacks[x]: stacks[x].pop() elif parts[0] == \\"count\\": x = int(parts[1]) - 1 results.append(len(stacks[x])) return results"},{"question":"A small village is organizing a marathon, and they need a program to help them with the logistics. There are N participants in the marathon, and each participant has a unique id between 1 and N. The marathon organizers want to divide participants into groups based on their skill levels for a more balanced competition. Each participant has a skill level, represented by an integer. The organizers wish to form K groups with the following constraints: 1. Each group should have at least one participant. 2. The sum of the skill levels in each group should be minimized, where the skill level of a group is defined as the highest skill level of any participant in that group. Your task is to write a program that decides the optimal way to divide participants into K groups to minimize the sum of the skill levels of the groups. -----Input----- The input consists of two lines: - The first line contains two integers, 1 leq N leq 1000 and 1 leq K leq N, the number of participants and the number of groups, respectively. - The second line contains N integers, 1 leq skill_i leq 1000 where skill_i is the skill level of the i-th participant. -----Output----- Output a single integer, the minimized sum of the skill levels of the groups. -----Examples----- Sample Input 1: 5 3 2 4 6 8 10 Sample Output 1: 24 Sample Input 2: 6 2 7 3 5 1 9 11 Sample Output 2: 16","solution":"def minimize_group_sum(N, K, skill_levels): Function to minimize the sum of skill levels of K groups. Parameters: N (int): Number of participants. K (int): Number of groups. skill_levels (list of int): Skill levels of each participant. Returns: int: The minimized sum of the skill levels of the groups. # Sort skill levels in descending order skill_levels.sort(reverse=True) # The top K skill levels would form the groups # Returning the sum of the first K elements return sum(skill_levels[:K]) # Example usage: # N, K = 5, 3 # skill_levels = [2, 4, 6, 8, 10] # print(minimize_group_sum(N, K, skill_levels)) # Output: 24"},{"question":"A logistics company is optimizing the process of delivering packages across several warehouses. There are multiple warehouses and packages needs to be delivered between specific pairs of warehouses either directly or indirectly through other warehouses. Each package has a weight, and each connection between the two warehouses has a maximum weight capacity, i.e., the maximum weight that can be transported directly between those two warehouses. Your task is to determine the maximum possible weight of a package that can be transported between each pair of distinct warehouses. Input The input consists of a series of test cases. Each case begins with a line containing two integers N and M, where N represents the number of warehouses and M represents the number of connections between the warehouses. The next M lines each contain three elements: u, v, and w. Here, * u and v are the warehouses connected by this direct connection. * w is the maximum weight capacity of the connection. The input terminates with a case where N = 0 and M = 0. You should not process this case. You can assume the input follows the constraints below: * 2 ≤ N ≤ 100; * 1 ≤ M ≤ 4950; * u, v are integers (1 ≤ u, v ≤ N) representing warehouse numbers; * 1 ≤ w ≤ 1000. Output For each test case, output an N x N matrix where the element at row i and column j represents the maximum possible weight that can be transported between warehouse i and warehouse j. If no path exists between warehouse i and warehouse j, the value should be zero. Example Input 3 3 1 2 10 2 3 20 1 3 5 4 5 1 2 50 2 3 40 3 4 30 4 1 20 1 3 10 0 0 Output 10 10 10 10 10 10 10 10 10 50 40 40 30 40 40 30 30 40 30 30 30 30 30 30 30","solution":"def find_max_weights(N, M, edges): Finds the maximum possible weight of a package that can be transported between each pair of distinct warehouses. :param N: int, number of warehouses :param M: int, number of connections :param edges: List of tuples, each containing (u, v, w) :return: List of lists representing the N x N matrix with maximum weights # Initialize distance matrix with 0 dist = [[0] * N for _ in range(N)] # Place the maximum weight capacity of direct connections for u, v, w in edges: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall Algorithm to find all-pairs max weights for k in range(N): for i in range(N): for j in range(N): if i != j: # No need to update self-loops, they should be zero dist[i][j] = max(dist[i][j], min(dist[i][k], dist[k][j])) return dist"},{"question":"Your task is to implement a function that receives a list of strings representing sentences. Each sentence contains words separated by spaces. The function should return a new list of strings where each sentence has had its words reversed. You must maintain the order of the sentences. # Input Description - An integer `n` representing the number of sentences. - A list of `n` sentences where each sentence is a string of words separated by spaces. Each sentence will have at least one word, and each word only contains alphabetic characters. # Output Description - A list of `n` sentences where the words in each sentence are reversed, but the order of the sentences themselves is maintained. # Example **Input** ``` 3 [\\"Hello World\\", \\"The quick brown fox\\", \\"Python programming is fun\\"] ``` **Output** ``` [\\"World Hello\\", \\"fox brown quick The\\", \\"fun is programming Python\\"] ``` # Constraints - 1 ≤ n ≤ 100 - Each sentence will contain between 1 and 50 words. - Each word will have at most 20 characters. # Solution Template ```python def reverse_words_in_sentences(n, sentences): reversed_sentences = [] for sentence in sentences: words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) reversed_sentences.append(reversed_sentence) return reversed_sentences # Example usage: n = 3 sentences = [\\"Hello World\\", \\"The quick brown fox\\", \\"Python programming is fun\\"] print(reverse_words_in_sentences(n, sentences)) # Output: [\'World Hello\', \'fox brown quick The\', \'fun is programming Python\'] ```","solution":"def reverse_words_in_sentences(n, sentences): reversed_sentences = [] for sentence in sentences: words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) reversed_sentences.append(reversed_sentence) return reversed_sentences # Example usage: # n = 3 # sentences = [\\"Hello World\\", \\"The quick brown fox\\", \\"Python programming is fun\\"] # print(reverse_words_in_sentences(n, sentences)) # Output: [\'World Hello\', \'fox brown quick The\', \'fun is programming Python\']"},{"question":"A company has developed an application that tracks users’ travel routes using GPS coordinates. Each route is defined by a series of checkpoints, where each checkpoint is represented by a pair of coordinates (x, y). The application needs to determine the longest possible distance between any two checkpoints on the route. To implement the solution, you need to write a program that performs the following tasks: 1. Calculate the Euclidean distance between any two checkpoints. 2. Determine the maximum distance from all possible pairs of checkpoints. -----Input----- The first line contains an integer N (2 leq N leq 100000), representing the number of checkpoints. Each of the following N lines contains two integers separated by a space, representing the coordinates (x, y) of a checkpoint. All coordinates will be between -10000 and 10000 inclusive. No two checkpoints will have the same coordinates. -----Output----- Output a single floating point number representing the maximum Euclidean distance between any two checkpoints. Print the result with 6 decimal places. -----Examples----- Sample Input: 4 1 2 4 6 1 8 8 2 Sample Output: 9.219544 -----Hints----- 1. Use the Euclidean distance formula: (d = sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}) 2. It might help to precompute distances and keep track of the maximum distance found.","solution":"import math def max_distance(coordinates): Calculate the maximum Euclidean distance between any two points in the list coordinates. Parameters: coordinates (list of tuples): A list of (x, y) coordinates. Returns: float: The maximum Euclidean distance. max_dist = 0.0 n = len(coordinates) for i in range(n): for j in range(i + 1, n): dist = math.sqrt((coordinates[j][0] - coordinates[i][0]) ** 2 + (coordinates[j][1] - coordinates[i][1]) ** 2) if dist > max_dist: max_dist = dist return max_dist def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) coordinates = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N)] result = max_distance(coordinates) print(f\\"{result:.6f}\\")"},{"question":"# Task A software engineer is creating a program that simulates data packet transmission. Each data packet is represented by a tuple containing the source address, destination address, and packet size respectively. The engineer wants to filter and sort these packets based on certain criteria. Given an array `packets` of tuples where each tuple is of the form `(source: str, destination: str, size: int)`, filter out the packets with a size less than or equal to a given threshold `threshold` and then sort the remaining packets in descending order based on their size. Implement a function that receives the packets and the threshold, filters and sorts them, and returns the final list of packets. # Example For `packets = [(\'192.168.0.1\', \'192.168.0.2\', 898), (\'192.168.0.3\', \'192.168.0.4\', 450), (\'192.168.0.5\', \'192.168.0.6\', 1100)]` and `threshold = 500`, the output should be `[(\'192.168.0.5\', \'192.168.0.6\', 1100), (\'192.168.0.1\', \'192.168.0.2\', 898)]`. For `packets = [(\'10.0.0.1\', \'10.0.0.2\', 300), (\'10.0.0.3\', \'10.0.0.4\', 200), (\'10.0.0.5\', \'10.0.0.6\', 400)]` and `threshold = 350`, the output should be `[(\'10.0.0.5\', \'10.0.0.6\', 400)]`. # Input/Output - `[input]` array of tuples `packets` Array of tuples where each tuple is of the form `(string, string, int)`. It is guaranteed that each packet has a valid format as described. Constraints: `1 ≤ packets.length ≤ 50` `string length ≤ 15` (for both source and destination addresses) `0 ≤ size ≤ 2000` - `[input]` integer `threshold` An integer representing the size threshold. Constraints: `0 ≤ threshold ≤ 2000` - `[output]` an array of tuples A filtered and sorted array of packets remaining after eliminating those with size less than or equal to the threshold, and sorted in descending order based on size.","solution":"def filter_and_sort_packets(packets, threshold): Filters out the packets with size less than or equal to the given threshold and sorts the remaining packets in descending order based on size. Args: packets (list of tuples): List of packets, where each packet is represented as a tuple (source, destination, size). threshold (int): The size threshold. Returns: list of tuples: The filtered and sorted list of packets. # Filter packets based on the threshold. filtered_packets = [packet for packet in packets if packet[2] > threshold] # Sort the filtered packets in descending order based on size. sorted_packets = sorted(filtered_packets, key=lambda x: x[2], reverse=True) return sorted_packets"},{"question":"A research laboratory is developing an intelligent system to manage the city’s water distribution in a more efficient way. The city’s water distribution network consists of `n` water reservoirs (nodes) and `m` directed pipes (edges) between them. Each pipe has a specific capacity representing the maximum amount of water that can flow through it. The system needs to find pathways in this network to ensure maximum water distribution from a designated start reservoir `S` to an end reservoir `T`. Your task is to design a function to compute the maximum possible amount of water (maximum flow) that can be sent from reservoir `S` to reservoir `T`. # Input - The first line contains three integers `n` (2 ≤ n ≤ 200) representing the number of reservoirs, `m` (1 ≤ m ≤ 5000) representing the number of directed pipes, and `S` and `T` (1 ≤ S, T ≤ n) representing the start and end reservoirs, respectively. - The next `m` lines each represent a directed pipe and contain three integers `u`, `v`, and `c` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1000), where `u` is the starting reservoir of the pipe, `v` is the ending reservoir of the pipe, and `c` is the capacity of the pipe. # Output - Output a single integer representing the maximum possible amount of water that can be sent from reservoir `S` to reservoir `T`. # Example Input: ``` 4 5 1 4 1 2 10 2 3 5 3 4 10 1 3 10 2 4 5 ``` Output: ``` 15 ``` Explanation: The input describes a network of 4 reservoirs and 5 directed pipes with the given capacities. The system seeks the maximum flow from reservoir `1` to reservoir `4`. In the example, the maximum possible amount of water that can be sent from `1` to `4` is `15`.","solution":"from collections import deque def bfs_capacity_path(capacity, source, sink, parent): visited = [False] * len(capacity) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v, cap in enumerate(capacity[u]): if not visited[v] and cap > 0: # if not yet visited and there is remaining capacity queue.append(v) visited[v] = True parent[v] = u if v == sink: # reached sink return True return False def edmonds_karp(n, capacity, source, sink): parent = [-1] * n max_flow = 0 while bfs_capacity_path(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink # Find the maximum flow through the path found by BFS while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] # update capacities of the edges and reverse edges along the path v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(n, m, S, T, pipes): capacity = [[0] * n for _ in range(n)] for u, v, c in pipes: capacity[u-1][v-1] += c # since u, v are 1-indexed in the input and we need 0-indexed return edmonds_karp(n, capacity, S-1, T-1) # Example usage: # n = 4, m = 5, S = 1, T = 4 # pipes = [ # (1, 2, 10), # (2, 3, 5), # (3, 4, 10), # (1, 3, 10), # (2, 4, 5) # ] # print(max_water_flow(n, m, S, T, pipes)) # Output: 15"},{"question":"In mathematics, the factorial of a non-negative integer *n* is the product of all positive integers less than or equal to *n*. Factorials are usually denoted by *n!*. For example: - 5! = 5 * 4 * 3 * 2 * 1 = 120 - 3! = 3 * 2 * 1 = 6 - 0! = 1 (by convention) Sometimes, you may want to calculate the factorial of very large numbers, but this can lead to huge values that are difficult to manage. To avoid handling these large numbers, you could be asked for the number of trailing zeros in the factorial result instead. # Problem Statement Write a function called `trailing_zeros` that takes a single non-negative integer *n* and returns the number of trailing zeros in the factorial of *n*. # Definition - Function signature: `def trailing_zeros(n: int) -> int:` # Example ```python trailing_zeros(5) # returns 1 because 5! = 120 which has 1 trailing zero trailing_zeros(10) # returns 2 because 10! = 3628800 which has 2 trailing zeros trailing_zeros(25) # returns 6 because 25! = 15,511,210,043,330,985,984,000,000 which has 6 trailing zeros ``` # Hint The number of trailing zeros in the factorial of a number *n* is determined by the number of factors of 5 in the numbers from 1 to *n* because they pair with factors of 2 to form trailing zeros. Hence, the result can be calculated by summing the integer division results of *n* by powers of 5 until the quotient is zero. # Implementation notes Make sure your function works for larger values of *n* up to 10^9 efficiently.","solution":"def trailing_zeros(n: int) -> int: Returns the number of trailing zeros in the factorial of a non-negative integer n. count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Task Given an integer array `arr` and an integer `n`, find the length of the longest subsequence of `arr` in which every element is divisible by `n`. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. # Example For `arr = [3, 6, 9, 12, 15, 20]` and `n = 3`, the output should be `5`. Explanation: The longest subsequence where each element is divisible by 3 is `[3, 6, 9, 12, 15]` which has a length of 5. Although 20 is part of the array, it is not included because it is not divisible by 3. # Input/Output - `[input]` array `arr` Constraints: - `1 ≤ arr.length ≤ 1000` - `1 ≤ arr[i] ≤ 10000` - `[input]` integer `n` Constraints: - `1 ≤ n ≤ 100` - `[output]` an integer The length of the longest subsequence of `arr` where each element is divisible by `n`.","solution":"def longest_divisible_subsequence(arr, n): Returns the length of the longest subsequence of arr where each element is divisible by n. Parameters: arr (list): The input array of integers. n (int): The integer value to check for divisibility. Returns: int: The length of the longest subsequence where each element is divisible by n. return len([x for x in arr if x % n == 0])"},{"question":"Consider a series of operations on an array consisting of n integers A1, A2, ..., An. An operation consists of selecting a contiguous subarray and adding a constant integer k to each of its elements. Your task is to determine whether it is possible to transform the given array into a target array B1, B2, ..., Bn by applying the aforementioned operation exactly once. Input The first line contains the integer n (1 ≤ n ≤ 100) — the number of elements in both arrays. The second line contains n integers A1, A2, ..., An (1 ≤ Ai ≤ 1000) — the elements of the initial array. The third line contains n integers B1, B2, ..., Bn (1 ≤ Bi ≤ 1000) — the elements of the target array. Output Print \\"YES\\" if it is possible to obtain the target array B from the initial array A by applying exactly one operation; otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 2 3 4 5 6 Output YES Input 4 1 3 2 4 4 5 6 7 Output NO Input 3 7 7 7 10 10 10 Output YES","solution":"def can_transform_array(n, A, B): Determines if it is possible to transform array A to B with one operation of adding a constant integer k to a contiguous subarray. differences = [b - a for a, b in zip(A, B)] unique_differences = set(differences) # There should be at most two unique differences: the difference k, and 0 if len(unique_differences) == 1: return \\"YES\\" elif len(unique_differences) == 2 and 0 in unique_differences: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a binary string s. You can perform the following operation any number of times: Choose any two adjacent characters and if they are different, remove them. Your task is to find the length of the final string after performing the above operations optimally. Example 1: Input: s = \\"1100\\" Output: 0 Explanation: We can remove 10 or 01. Suppose we remove 10, the string becomes \\"100\\". We can then remove 10, the string becomes \\"00\\" and finally, we can remove 00, the string becomes an empty string. So the length of the final string is 0. Example 2: Input: s = \\"10101\\" Output: 1 Explanation: We can remove 10 or 01. Suppose we remove the first 10, the string becomes \\"0101\\". We can then remove 01, the string becomes \\"01\\" and finally we can remove 01, the string becomes an empty string. This means the length of the final string is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minFinalLength() which takes a string s as input and returns the length of the final string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |s| <= 10^6 s consists only of \'0\' and \'1\'","solution":"def minFinalLength(s): Returns the length of the final string after performing the optimal operations to remove any two adjacent characters that are different. # We count the number of 1s and 0s count_1 = s.count(\'1\') count_0 = s.count(\'0\') # The number of removals will be 2 * minimum of these counts # Since we can remove pairs of \'10\' or \'01\' length_of_final_string = len(s) - 2 * min(count_1, count_0) return length_of_final_string"},{"question":"Create a function that takes a string consisting of upper and lower case letters and returns a new string in which the positions of \'a\' and \'A\' are swapped with each other, the positions of \'b\' and \'B\' are swapped with each other, and so on up to \'z\' and \'Z\'. Other characters (like spaces, digits, symbols) remain unchanged. Input A single line of text containing upper and lower case letters, spaces, digits, and symbols, guaranteed to be at most 100 characters in length. Output A single line of output with the appropriate letter swaps. Example Input Hello, world! Python 3.9 Output hELLO, WORLD! pYTHON 3.9","solution":"def swap_case_positions(s): Takes a string consisting of upper and lower case letters and swaps the positions of each lowercase letter with its corresponding uppercase letter. swapped_string = \\"\\" for char in s: if char.islower(): swapped_string += char.upper() elif char.isupper(): swapped_string += char.lower() else: swapped_string += char return swapped_string"},{"question":"Elysia loves playing with strings and often comes up with interesting problems related to them. One day, she decided to create a challenge that involves encoding strings in a specific format. Given a string, your task is to create a compressed version of the string using Run-Length Encoding (RLE). RLE is a simple form of lossless data compression where sequences of the same data value (characters in this case) are stored as a single data value and count. For instance, the string \\"aaabbccc\\" would be encoded as \\"a3b2c3\\". To further specify: - The encoded format should maintain the order of characters. - Each group of the same character is represented by the character followed by the number of repetitions. You need to implement the function `encode_string` which takes a string `s` and returns the RLE compressed version of the string. Function Signature ```python def encode_string(s: str) -> str: pass ``` **Input:** - `s`: a string (1 ≤ len(s) ≤ 10^6), consisting of only lowercase English letters. **Output:** - A string representing the RLE compressed version of the input. Example input #00 ``` aaabbccc ``` Example output #00 ``` a3b2c3 ``` Example input #01 ``` aabb ``` Example output #01 ``` a2b2 ``` Example input #02 ``` abcd ``` Example output #02 ``` a1b1c1d1 ``` **Explanation of Example Outputs:** - In the first example, the character \'a\' appears 3 times consecutively, \'b\' appears 2 times, and \'c\' appears 3 times. - In the second example, \'a\' and \'b\' each appear consecutively 2 times. - In the third example, every character in the string appears only once, hence all counts are 1.","solution":"def encode_string(s: str) -> str: Encodes the string using Run-Length Encoding (RLE). Parameters: s (str): The input string consisting of only lowercase English letters. Returns: str: The RLE compressed version of the input string. if not s: return \\"\\" encoded_string = [] current_char = s[0] current_count = 1 for char in s[1:]: if char == current_char: current_count += 1 else: encoded_string.append(current_char + str(current_count)) current_char = char current_count = 1 encoded_string.append(current_char + str(current_count)) return \'\'.join(encoded_string)"},{"question":"# A: String Transformation problem You are given two strings, `s1` and `s2`. The task is to determine the minimum number of operations required to transform `s1` into `s2`. There are three possible operations that can be performed on the string: 1. **Insert a character**. 2. **Delete a character**. 3. **Replace a character**. Write a program to compute the minimum number of such operations required to change `s1` into `s2`. Input format The input consists of two lines: - The first line contains the string `s1`. - The second line contains the string `s2`. Constraints - 1 ≤ |s1|, |s2| ≤ 1000 - Both `s1` and `s2` consist of lowercase English letters only. Output format Output the minimum number of operations required to transform `s1` into `s2`. Input example 1 ``` sunday saturday ``` Output example 1 ``` 3 ``` Input example 2 ``` kitten sitting ``` Output example 2 ``` 3 ``` Input example 3 ``` abcdef azced ``` Output example 3 ``` 3 ``` Example Input ``` sunday saturday ``` Output ``` 3 ```","solution":"def min_operations(s1, s2): Returns the minimum number of operations required to transform s1 into s2. m = len(s1) n = len(s2) # Create a DP table to store the minimum operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters of s2 elif j == 0: dp[i][j] = i # Remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1])# Replace return dp[m][n]"},{"question":"A scientist is trying to store the data of chemical compounds in a unique way. Each compound is represented by a string, which contains uppercase alphabetic characters representing different elements. However, due to the limitations of the storage system, the data has to be compressed in a specific format. The scientist achieves this by counting the contiguous occurrences of each element and formatting the string accordingly. For example, the compound string \\"HHOH\\" would be stored as \\"H2OH\\". Your task is to write a program that compresses the compound string according to the given format. Input Specification Input consists of a single string s, representing the compound. The string s has a length of at most 100 characters and contains only uppercase letters. Output Specification Output the compressed format of the string. Example Sample Input: CCCCHHHHHEE Sample Output: C4H5E2 Sample Input: HHOI Sample Output: H2OI","solution":"def compress_compound(s): Compresses the compound string by counting contiguous occurrences of each element. Args: s (str): The input string representing the compound. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for c in s[1:]: if c == current_char: count += 1 else: compressed.append(f\\"{current_char}{count if count > 1 else \'\'}\\") current_char = c count = 1 compressed.append(f\\"{current_char}{count if count > 1 else \'\'}\\") return \'\'.join(compressed)"},{"question":"Given a list of integers, you are required to determine the length of the longest subsequence such that all elements of the subsequence are in increasing order and the difference between consecutive elements of the subsequence is the same. Input: The first line of input contains an integer N which denotes the number of elements in the list. The second line contains N space-separated integers which denote the elements of the list. Output: Print the length of the longest arithmetic subsequence. Constraints: 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10000 SAMPLE INPUT 6 3 6 9 12 15 21 SAMPLE OUTPUT 5 Explanation: The longest increasing subsequence with a common difference is 3, 6, 9, 12, 15. The difference between each consecutive element is 3 and the length is 5. The increasing subsequence 3, 6, 9, 12, 15, 21 does not have a common difference, hence it is not considered. Note: If there are multiple subsequences with the same longest length, you need to output just the length of any one of them.","solution":"def longest_arith_seq_length(A): Calculate the length of the longest arithmetic subsequence. if not A: return 0 n = len(A) if n <= 2: return n # To store the length of arithmetic progression ending at each index dp = [{} for _ in range(n)] max_len = 2 for i in range(n): for j in range(i): diff = A[i] - A[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Alice and Bob are playing a game on a grid-based board. The board is a rectangular grid of cells, each of which can be either empty or contain a wall. The players can move up, down, left, or right, but they cannot move through walls. Each player starts at a specified position on the board, and their goal is to navigate to a shared destination cell. The player who reaches the destination first wins. If both players reach the destination at the same time, it\'s a draw. Both players move simultaneously. They each take turns moving, and either player can decide to stay in their current position for a turn. You need to create a program that calculates whether Alice or Bob reaches the destination first, or if it\'s a draw. Input The input is given in the following format: ``` W H Ax Ay Bx By Dx Dy board_row_1 board_row_2 :: board_row_H ``` - The first line contains two integers, W and H (1 ≤ W, H ≤ 1000), the width and height of the board. - The second line contains two integers, Ax and Ay (0 ≤ Ax < W, 0 ≤ Ay < H), the starting position of Alice. - The third line contains two integers, Bx and By (0 ≤ Bx < W, 0 ≤ By < H), the starting position of Bob. - The fourth line contains two integers, Dx and Dy (0 ≤ Dx < W, 0 ≤ Dy < H), the destination position. - The next H lines each contain a string of length W, representing the board. The character ‘.’ represents an empty cell, and the character ‘#’ represents a wall. Output Output a single line: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Draw\\" if both reach the destination at the same time. Examples Input 4 4 0 0 3 0 3 3 .... .#.. .#.. .... Output Bob Input 5 5 0 0 0 4 4 0 ..... .#.#. .#.#. .#.#. ..... Output Alice Input 3 3 0 0 2 0 1 1 ... ... ... Output Draw","solution":"from collections import deque def bfs(start_x, start_y, destination_x, destination_y, board, W, H): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start_x, start_y, 0)]) # (x, y, distance) visited = set((start_x, start_y)) while queue: x, y, distance = queue.popleft() if (x, y) == (destination_x, destination_y): return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < W and 0 <= ny < H and (nx, ny) not in visited and board[ny][nx] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return float(\'inf\') # If no path is found def who_wins(W, H, Ax, Ay, Bx, By, Dx, Dy, board): alice_moves = bfs(Ax, Ay, Dx, Dy, board, W, H) bob_moves = bfs(Bx, By, Dx, Dy, board, W, H) if alice_moves < bob_moves: return \\"Alice\\" elif alice_moves > bob_moves: return \\"Bob\\" else: return \\"Draw\\""},{"question":"You are given a list of N integers, and you need to sort this list using the minimum number of swaps. Each swap can involve any two elements in the list. Write a function to determine the minimum number of swaps required to sort the list in ascending order. -----Constraints----- - 1 leq N leq 1000 - 1 leq A_i leq 10^5 - All input values are integers. -----Input----- The input is given in the following format: N A_1 A_2 A_3 ... A_N -----Output----- Print a single integer representing the minimum number of swaps needed to sort the list. -----Sample Input----- 5 4 3 1 2 5 -----Sample Output----- 3 Explanation: To sort the list [4, 3, 1, 2, 5] in ascending order, the minimum number of swaps required is 3. One way to achieve this is: 1. Swap 4 and 1 -> [1, 3, 4, 2, 5] 2. Swap 3 and 2 -> [1, 2, 4, 3, 5] 3. Swap 4 and 3 -> [1, 2, 3, 4, 5] Thus, the minimum number of swaps is 3.","solution":"def minimum_swaps(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) # Create a list of tuples where each tuple is (value, index) arr_indexed = [(value, index) for index, value in enumerate(arr)] # Sort the array based on the values arr_indexed.sort() # To keep track of visited elements visited = [False] * n swaps = 0 for i in range(n): # if element is already visited or element is already in the correct position if visited[i] or arr_indexed[i][1] == i: continue # Find the cycle size cycle_size = 0 j = i while not visited[j]: visited[j] = True # Move to the next index according to the original positions j = arr_indexed[j][1] cycle_size += 1 # Adding the number of swaps required for this cycle if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Given an array of integers `arr` of size `n` and an integer `k`, partition the array in such a way that each partition has exactly `k` elements and all the partitions are in increasing order. If it is impossible to do so, return an empty array. Example 1: Input: arr = [3, 1, 2, 4, 6, 5, 7, 8, 9] n = 9 k = 3 Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Example 2: Input: arr = [4, 1, 3, 2, 5] n = 5 k = 2 Output: [] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `partitionArray` that takes the array `arr`, its size `n`, and the integer `k` as input parameters and returns either a list of partitions (each partition being a list of k integers in increasing order) or an empty list if it is impossible to partition the array as needed. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^4 1 <= k <= n 1 <= arr[i] <= 10^4","solution":"def partitionArray(arr, n, k): Partitions the array into subarrays of length k each and ensures they are in ascending order. Returns an empty list if it is not possible. Parameters: arr (list): The input array of integers. n (int): The size of the input array. k (int): The size of each partition. Returns: list: A list of partitions or an empty list if partitioning is not possible. # If the array length is not divisible by k, return [] if n % k != 0: return [] # Sort the array arr.sort() # Create partitions partitions = [] for i in range(0, n, k): partitions.append(arr[i:i+k]) return partitions"},{"question":"**Cargo Shipment Routes** You are working at a logistics company that manages cargo shipments between different ports. Each port can ship cargo to various other ports, but the shipments must follow specific routes defined by the routes between the ports. Given certain ports and the cargo routes between them, you are tasked with determining if a specific set of cargo routes can all be carried out using the available directed routes without changing the direction of any route. You are given a number of ports and defined cargo routes between them. You are also given a list of required cargo shipments between specific ports. Your task is to check whether all the required shipments can be fulfilled using the existing routes, and if they can, list the directions of the routes. Input The input consists of a single test case in the following format: n m x_1 y_1 . . . x_m y_m k a_1 b_1 . . . a_k b_k The first line contains two integers n (2 leq n leq 10 000) and m (1 leq m leq 100 000), the number of ports and the number of routes respectively. Ports are numbered 1 through n. Each of the following m lines contains two integers x_i and y_i (1 leq x_i < y_i leq n), indicating the i-th route connects ports x_i and y_i. At most one route exists between any two ports. It is guaranteed that any two ports are connected through one or more routes. The next line contains an integer k (1 leq k leq 100 000), the number of required shipments. Each of the following k lines contains two integers a_i and b_i (1 leq a_i leq n, 1 leq b_i leq n, a_i ne b_i), representing a required shipment from port a_i to port b_i. Either a_i ne a_j or b_i ne b_j holds for i ne j. Output Output “No” if it is impossible to enable all the required shipments using the given routes in one-way directions. Otherwise, output “Yes” on a line first, followed by m lines each specifying the directions of each route. Each direction should be described as a pair of port numbers separated by a space, with the start port on the left and the end port on the right. The order of these m lines does not matter as long as all the routes are specified without duplicates or omissions. If there are multiple feasible direction assignments, any valid answer is acceptable. Sample Input 1 4 5 1 2 1 3 1 4 2 3 3 4 4 1 2 1 3 1 4 2 4 Sample Output 1 Yes 1 2 1 3 1 4 2 3 3 4 Sample Input 2 4 5 1 2 1 3 2 3 2 4 3 4 5 1 2 1 3 1 4 2 3 3 2 Sample Output 2 No Sample Input 3 3 3 1 2 1 3 2 3 3 1 2 1 3 2 3 Sample Output 3 Yes 1 2 1 3 2 3","solution":"from collections import defaultdict, deque def can_fulfill_shipments(n, m, routes, k, shipments): adj_list = defaultdict(list) indegree = [0] * (n + 1) # Construct adjacency list and compute indegrees for topological sorting for x, y in routes: adj_list[x].append(y) indegree[y] += 1 # Kahn’s algorithm for topological sorting topo_order = [] zero_indegree_queue = deque([i for i in range(1, n+1) if indegree[i] == 0]) while zero_indegree_queue: node = zero_indegree_queue.popleft() topo_order.append(node) for neighbor in adj_list[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) if len(topo_order) != n: return \\"No\\" # It\'s impossible to obtain a topological sort node_to_position = {node: idx for idx, node in enumerate(topo_order)} # Check if all shipments can be fulfilled for a, b in shipments: if node_to_position[a] > node_to_position[b]: return \\"No\\" result = [\\"Yes\\"] for x, y in routes: if node_to_position[x] < node_to_position[y]: result.append(f\\"{x} {y}\\") else: result.append(f\\"{y} {x}\\") return \\"n\\".join(result)"},{"question":"You are given a list of words and an integer `k`. Your task is to find the `k` most frequent words from the list. If there are multiple words with the same frequency, they should be sorted alphabetically. Write a program that reads the list of words and the integer `k`, and then outputs the `k` most frequent words in order of frequency from highest to lowest. If multiple words have the same frequency, they should be sorted alphabetically within that frequency. -----Input----- The input begins with a single integer `n`, the number of words in the list. This is followed by `n` words. The next line contains the integer `k`. -----Output----- Output the `k` most frequent words from the list on `k` separate lines, sorted by frequency from highest to lowest. If multiple words have the same frequency, sort them alphabetically within that frequency. -----Constraints----- - 1 <= n <= 10^4 - 1 <= k <= min(100, unique words in the list) - Each word will consist of only lowercase English letters and will have a length between 1 and 20. -----Sample Input----- 10 the day is sunny the the the sunny is is 4 -----Sample Output----- the is sunny day","solution":"from collections import Counter def k_most_frequent_words(words, k): Given a list of words and an integer k, return the k most frequent words sorted by their frequency from highest to lowest. If multiple words have the same frequency, they are sorted alphabetically within that frequency. # Count the frequency of each word word_count = Counter(words) # Create a sorted list of words first by frequency (descending) then by lexically order sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) # Extract the first k words from the sorted list result = [word for word, _ in sorted_words[:k]] return result # Example usage: # words = [\\"the\\", \\"day\\", \\"is\\", \\"sunny\\", \\"the\\", \\"the\\", \\"the\\", \\"sunny\\", \\"is\\", \\"is\\"] # k = 4 # print(k_most_frequent_words(words, k))"},{"question":"You are given a list of integers that can contain duplicates. Your task is to find the length of the longest subarray that contains all unique elements. Example 1: Input: 6 1 2 3 1 2 3 Output: 3 Explanation: The longest subarray with all unique elements is [1, 2, 3] or [2, 3, 1] or [3, 1, 2] with length 3. Example 2: Input: 9 4 5 6 7 8 8 7 6 5 Output: 5 Explanation: The longest subarray with all unique elements is [4, 5, 6, 7, 8] with length 5. Your Task: You don\'t need to read or print anything. Your task is to complete the function findLongestUniqueSubarray() which takes an integer n and a list arr[] denoting the array and returns the length of the longest subarray with all unique elements. Constraints: 1 <= n <= 10^5 0 <= arr[i] <= 10^5","solution":"def findLongestUniqueSubarray(n, arr): Returns the length of the longest subarray with all unique elements. if n == 0: return 0 seen = {} left = 0 max_length = 0 for right in range(n): if arr[right] in seen and seen[arr[right]] >= left: left = seen[arr[right]] + 1 seen[arr[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are participating in a treasure hunt game. You need to determine if a given key can unlock a treasure chest. The key is represented as a string `key`, consisting of lowercase Latin letters, and the lock on the treasure chest is represented as another string `lock`, also consisting of lowercase Latin letters. The key can unlock the treasure chest if and only if it is possible to rearrange the letters in the `key` to match the `lock`. Write a function `canUnlockTreasureChest(key: str, lock: str) -> bool` that determines if the key can unlock the treasure chest. Input - The first line contains the string `key`. - The second line contains the string `lock`. Output - Return `True` if the key can unlock the treasure chest. - Otherwise, return `False`. Constraints: - 1 ≤ |key|, |lock| ≤ 104 Examples Input listen silent Output True Input apple pale Output False","solution":"def canUnlockTreasureChest(key: str, lock: str) -> bool: Determines if the key can unlock the treasure chest. The key can unlock the treasure chest if and only if it is possible to rearrange the letters in the key to match the lock. Args: key (str): The string representing the key. lock (str): The string representing the lock. Returns: bool: True if the key can unlock the treasure chest, False otherwise. return sorted(key) == sorted(lock)"},{"question":"You are given an integer array `nums` consisting of `n` unique elements, and an integer `k`. Your task is to find the `k`th permutation of the array `nums` when all possible permutations of the array are listed lexicographically. Write a function `kth_permutation(nums: List[int], k: int) -> List[int]` that takes in the array `nums` and the integer `k`, and returns the `k`th permutation. -----Input----- The input contains two lines. The first line contains the array `nums` consisting of `n` unique integers (1 le n le 9). The second line contains the integer `k` (1 le k le n!). -----Output----- Output the `k`th permutation of the array `nums` as a list of integers. -----Example----- Input [1, 2, 3] 3 Output [2, 1, 3] Input [4, 5, 6] 6 Output [6, 5, 4] Note: The result should be the `k`th permutation in lexicographical order, starting from 1.","solution":"from typing import List import math def kth_permutation(nums: List[int], k: int) -> List[int]: Returns the k-th permutation of the array nums in lexicographical order. n = len(nums) k -= 1 # to convert k to zero-based index factorial = math.factorial result = [] available = sorted(nums) for i in range(n): fact = factorial(n - 1 - i) index = k // fact result.append(available.pop(index)) k %= fact return result"},{"question":"A game development company is designing levels for their new puzzle game. Each level consists of a grid containing several obstacles and a player that can move around. The grid is represented by a 2-dimensional array of integers, where 0 denotes an empty cell and 1 denotes an obstacle. The player can move vertically or horizontally but cannot move through cells containing obstacles. The player starts at the top-left corner of the grid (cell (0, 0)) and the goal is to reach the bottom-right corner (cell (n-1, m-1)). The developers want to know the number of distinct paths the player can take from the start to the goal. Two paths are considered distinct if they travel through different cells. Implement a function that takes as input the grid and returns the number of distinct paths from the start to the goal. ----- Input ----- The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) representing the number of rows and columns in the grid. Each of the next n lines contains m integers either 0 or 1, representing the grid. ----- Output ----- Output a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner. ----- Constraints ----- 1 ≤ n, m ≤ 100 Each cell contains either a 0 (empty) or a 1 (obstacle). It is guaranteed that the cells at (0, 0) and (n-1, m-1) are empty (contain 0). ----- Example ----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2","solution":"def num_distinct_paths(grid): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the given grid. The player can only move through cells containing 0 and can only move vertically or horizontally. n = len(grid) m = len(grid[0]) # Early exit if start or end is blocked if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # DP array to store number of paths to each cell dp = [[0] * m for _ in range(n)] # Starting point dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 # No path through obstacles else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to determine the minimum number of characters to be deleted from the string so that the remaining string does not have any two identical consecutive characters. -----Input----- The input consists of a single line containing the string `s (1 ≤ |s| ≤ 100 000)`. -----Output----- Print the minimum number of deletions required. -----Examples----- Input aab Output 1 Input aabbcc Output 3 Input abc Output 0 -----Note----- In the first example, you can delete one of the \'a\'s to get the string \\"ab\\", which does not have any two identical consecutive characters. In the second example, you can delete one \'a\', one \'b\', and one \'c\' to get the string \\"abc\\". In the third example, the string already has no two identical consecutive characters, so the answer is 0.","solution":"def min_deletions_to_avoid_consecutive_duplicates(s): Determines the minimum number of characters to be deleted from the string so that the remaining string does not have any two identical consecutive characters. Args: s (str): The input string consisting of lowercase English letters. Returns: int: The minimum number of deletions required. deletions = 0 # Traverse the string and count deletions needed for consecutive duplicates for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions"},{"question":"In a small town, there is a famous ancient library with m rare books only accessible by students and researchers. Each book is classified into three categories based on its subject area: History, Science, and Literature. Therefore, for each book, we know the value of b_{i}: b_{i} = 1, if the i-th book is about History, b_{i} = 2, if the i-th book is about Science, b_{i} = 3, if the i-th book is about Literature. There is an upcoming cultural festival where the town wants to showcase their rare book collection through thematic presentations. Each presentation must include exactly three books, one from each subject area. The goal is to maximize the number of such presentations with the given books. ----- Input ----- The first line contains integer m (1 ≤ m ≤ 5000) — the number of books in the library. The second line contains m integers b_1, b_2, ..., b_{m} (1 ≤ b_{i} ≤ 3), where b_{i} describes the category of the i-th book. ----- Output ----- In the first line, output integer p — the largest possible number of presentations. Then print p lines, each containing three numbers, representing the indexes of the books forming each presentation. You can print both the presentations and the numbers in the triples in any order. The books are numbered from 1 to m in the order of their appearance in the input. Each book can participate in no more than one presentation. If no presentations can be compiled, print the only line with value p equal to 0. ----- Examples ----- Input 8 1 2 3 1 2 3 3 1 Output 2 1 2 3 4 5 6 Input 5 1 3 3 2 3 Output 1 1 4 2","solution":"def max_presentations(m, books): history = [] science = [] literature = [] for i in range(m): if books[i] == 1: history.append(i + 1) elif books[i] == 2: science.append(i + 1) elif books[i] == 3: literature.append(i + 1) p = min(len(history), len(science), len(literature)) presentations = {} for i in range(p): presentations[i] = (history[i], science[i], literature[i]) return p, presentations m = 8 books = [1, 2, 3, 1, 2, 3, 3, 1] print(max_presentations(m, books)) # Output for example 1 should reflect: (2, {0: (1, 2, 3), 1: (4, 5, 6)}) m = 5 books = [1, 3, 3, 2, 3] print(max_presentations(m, books)) # Output for example 2 should reflect: (1, {0: (1, 4, 2)})"},{"question":"Given an array of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. Example: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] (as shown below) is able to trap 6 units of water: ``` [] [][][] [][] [][][][] [][][][] ------------------- ```","solution":"def trap(height): Returns the total amount of water that can be trapped after raining. :param height: List of non-negative integers representing the elevation map :return: Integer representing the total units of trapped rain water if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the trapped water water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Anagram Checker An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Given two strings, determine if they are anagrams of each other. For the purpose of this question, spaces and punctuation are ignored, and the comparison is case-insensitive. Write a function `is_anagram(a: str, b: str) -> bool` that: 1. Takes in two strings, `a` and `b`. 2. Returns `True` if the strings are anagrams of each other, and `False` otherwise. Input Format Two lines each containing a string. Constraints - The strings will contain only alphanumeric characters, spaces, and punctuation. - The maximum length of any string is 1000 characters. Output Format Print `True` if the two strings are anagrams, otherwise print `False`. Sample Input 1 listen silent Sample Output 1 True Sample Input 2 The eyes They see Sample Output 2 True Sample Input 3 Hello, World! Goodbye, World! Sample Output 3 False Explanation - In the first case, both strings contain the same characters with the same frequencies, so they are anagrams. - In the second case, after ignoring spaces and case, both strings are \\"theeyes\\" and \\"theysee\\", which are anagrams. - In the third case, even after ignoring spaces and punctuations, the characters and frequencies do not match, so the strings are not anagrams.","solution":"def is_anagram(a: str, b: str) -> bool: Determines if two strings are anagrams of each other. This function ignores spaces and punctuations, and compares strings in a case-insensitive manner. Args: - a (str): The first string to compare. - b (str): The second string to compare. Returns: - bool: True if the strings are anagrams of each other, False otherwise. # Remove spaces and punctuation, and convert to lower case clean_a = \'\'.join(filter(str.isalnum, a)).lower() clean_b = \'\'.join(filter(str.isalnum, b)).lower() # Check if sorted characters of both strings are equal return sorted(clean_a) == sorted(clean_b)"},{"question":"Create a function `reverse_words` that takes a string consisting of words separated by spaces as an argument and returns a new string with the words in reverse order. Note that the words themselves should not be reversed, only the order of the words. Example: ```python reverse_words(\\"Coding is fun\\") == \\"fun is Coding\\" reverse_words(\\"Hello World\\") == \\"World Hello\\" ``` Input constraints: The input string will contain only letters and spaces, and there will be no leading, trailing, or consecutive spaces. ```python def reverse_words(sentence): # Your code here ```","solution":"def reverse_words(sentence): Returns a new string with the words in reverse order. :param sentence: A string consisting of words separated by spaces. :return: A new string with the words in reverse order. return \' \'.join(sentence.split()[::-1])"},{"question":"Mia likes to create and solve puzzles with strings. She has two strings, A and B, where the length of A is greater than or equal to the length of B. She wants to find the smallest substring of A that contains all the characters in B (including duplicates). If there is no such substring, return an empty string. Input Format There will be two lines of input: The first line contains the string A. The second line contains the string B. Output Format Print the smallest substring of A that contains all characters of B. If there is no such substring, print an empty string. Constraints 1≤|A|,|B|≤100000 A and B consists of only lowercase English letters. SAMPLE INPUT adobecodebanc abc SAMPLE OUTPUT banc Explanation The substring \\"banc\\" of string A contains all the characters \'a\', \'b\', and \'c\' from string B. It is the smallest such substring that satisfies the condition.","solution":"def smallest_substring(A, B): Finds the smallest substring of A that contains all characters of B. from collections import Counter if not A or not B: return \\"\\" # Create count of characters in B count_B = Counter(B) required_chars = len(count_B) l, r = 0, 0 formed = 0 window_counts = {} min_substr = \\"\\" min_length = float(\'inf\') # Try expanding the window to the right while r < len(A): char = A[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in count_B and window_counts[char] == count_B[char]: formed += 1 # Try contracting the window from the left till the point where it ceases to be \'desirable\' while l <= r and formed == required_chars: char = A[l] # Save the smallest window until now if r - l + 1 < min_length: min_length = r - l + 1 min_substr = A[l:r+1] window_counts[char] -= 1 if char in count_B and window_counts[char] < count_B[char]: formed -= 1 l += 1 r += 1 return min_substr"},{"question":"-----Input----- The input consists of a single integer n (1 ≤ n ≤ 20), where n represents the length of the sequence. -----Output----- Output the sum of the first n numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1. -----Examples----- Input 5 Output 7 Input 10 Output 88","solution":"def fibonacci_sum(n): Returns the sum of the first n numbers in the Fibonacci sequence. if n == 1: return 0 fib = [0, 1] # The first two Fibonacci numbers sum_fib = 1 for i in range(2, n): fib_next = fib[i-1] + fib[i-2] fib.append(fib_next) sum_fib += fib_next return sum_fib"},{"question":"Write a function that takes a list of integers as input and returns the two smallest numbers (sum) in the list. Ensure that the numbers in the list are distinct and that there are at least two elements in the list. For example, the list [19, 3, 5, 21, 7, 13] should return -> 8, because the smallest numbers are 3 and 5.","solution":"def sum_of_two_smallest(numbers): Returns the sum of the two smallest distinct numbers in the list. :param numbers: List of distinct integers with at least two elements. :return: Sum of the two smallest numbers. if len(numbers) < 2: raise ValueError(\\"The list must contain at least two distinct numbers.\\") # Sort the list and sum the two smallest elements (the first two in the sorted list) sorted_numbers = sorted(numbers) return sorted_numbers[0] + sorted_numbers[1]"},{"question":"Write a function `nested_sum` that takes a list of integers and/or lists of integers and returns the sum of all the integers, regardless of their depth within the nested lists. Example: ```python nested_sum([1, [2, [3, 4]], 5, [6]]) # should return 21 nested_sum([[1, 2], [3, 4, [5, 6]], 7, 8]) # should return 36 ``` Notes: - You may assume the input list will only contain integers or other nested lists of integers. - You should consider using recursion to solve this problem.","solution":"def nested_sum(lst): Returns the sum of all integers in a nested list of integers. total = 0 for element in lst: if isinstance(element, list): total += nested_sum(element) else: total += element return total"},{"question":"Given a string of digits, you need to find the largest valid time that can be formed from these digits in a 24-hour format (HH:MM). Not all digits need to be used, and the time must be valid. A valid time in 24-hour format must satisfy the following conditions: - 00 ≤ HH ≤ 23 - 00 ≤ MM ≤ 59 If no valid time can be formed, return \\"Not possible\\". Input A string `s` consisting of digits (\'0\'-\'9\'). The length of the string will be between 1 and 10. Output The largest valid time in the format \\"HH:MM\\" that can be formed using the digits of `s`. If no valid time can be formed, return \\"Not possible\\". Example Input \\"1234\\" Output \\"23:41\\" Input \\"5023\\" Output \\"23:50\\" Input \\"1111\\" Output \\"11:11\\" Input \\"9841\\" Output \\"19:48\\" Input \\"1112\\" Output \\"21:11\\" Input \\"1\\" Output \\"Not possible\\" Note In the first example, the valid times that can be formed are 12:34, 12:43, 21:34, 21:43, 23:14, 23:41, 23:04, and some others. The largest valid time is \\"23:41\\". In the second example, the valid times that can be formed are 20:35, 20:53, 23:05, 23:50, and some others. The largest valid time is \\"23:50\\". In the last example, using a single digit \\"1\\" alone, it\'s not possible to form any valid time. Therefore, the output is \\"Not possible\\".","solution":"from itertools import permutations def largest_valid_time(s): def is_valid_time(hh, mm): return 0 <= hh < 24 and 0 <= mm < 60 max_time = -1 best_time = \\"Not possible\\" for perm in permutations(s, 4): hh = int(perm[0] + perm[1]) mm = int(perm[2] + perm[3]) if is_valid_time(hh, mm): time_in_minutes = hh * 60 + mm if time_in_minutes > max_time: max_time = time_in_minutes best_time = f\\"{hh:02}:{mm:02}\\" return best_time"},{"question":"Consider a list of integers where the sum of its elements is guaranteed to be even. Write a function that takes this list as input and returns `True` if the list can be partitioned into two non-empty sublists with equal sum, and `False` otherwise. -----Input----- A single list of integers where the sum of its elements is even. The length of the list is at least 2. -----Output----- A boolean value `True` if the list can be partitioned into two non-empty sublists with equal sum, and `False` otherwise. -----Examples----- Sample Input 1: [1, 5, 11, 5] Sample Output 1: True Sample Input 2: [1, 2, 3, 5] Sample Output 2: False","solution":"def can_partition(nums): Determines if the list can be partitioned into two sublists with equal sum. total_sum = sum(nums) # If the total sum is odd, it cannot be partitioned into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True # zero is always achievable for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"# Task You are working on a project to develop a simplified event management system. The system needs to keep track of participants who have registered for different events. Each participant can register for multiple events, and each event can have multiple participants. For this task, you are required to create a function that can generate a participant\'s event list and an event\'s participant list. # Input/Output **Input:** - `participants`: A list of dictionaries where each dictionary contains the keys `\\"name\\"` (a string) and `\\"events\\"` (a list of strings representing event names the participant has registered for). Example: ```python participants = [ {\\"name\\": \\"Alice\\", \\"events\\": [\\"Art Exhibition\\", \\"Music Festival\\"]}, {\\"name\\": \\"Bob\\", \\"events\\": [\\"Coding Workshop\\", \\"Art Exhibition\\"]}, {\\"name\\": \\"Charlie\\", \\"events\\": [\\"Music Festival\\", \\"Art Exhibition\\"]} ] ``` **Output:** - A tuple containing two dictionaries: - The first dictionary maps each participant\'s name to a list of events they have registered for. - The second dictionary maps each event\'s name to a list of participant names who have registered for that event. Example output for the above input: ```python ( { \\"Alice\\": [\\"Art Exhibition\\", \\"Music Festival\\"], \\"Bob\\": [\\"Coding Workshop\\", \\"Art Exhibition\\"], \\"Charlie\\": [\\"Music Festival\\", \\"Art Exhibition\\"] }, { \\"Art Exhibition\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"Music Festival\\": [\\"Alice\\", \\"Charlie\\"], \\"Coding Workshop\\": [\\"Bob\\"] } ) ``` # Example Given the input: ```python participants = [ {\\"name\\": \\"Alice\\", \\"events\\": [\\"Art Exhibition\\", \\"Music Festival\\"]}, {\\"name\\": \\"Bob\\", \\"events\\": [\\"Coding Workshop\\", \\"Art Exhibition\\"]}, {\\"name\\": \\"Charlie\\", \\"events\\": [\\"Music Festival\\", \\"Art Exhibition\\"]} ] ``` The output should be: ```python ( { \\"Alice\\": [\\"Art Exhibition\\", \\"Music Festival\\"], \\"Bob\\": [\\"Coding Workshop\\", \\"Art Exhibition\\"], \\"Charlie\\": [\\"Music Festival\\", \\"Art Exhibition\\"] }, { \\"Art Exhibition\\": [\\"Alice\\", \\"Bob\\", \\"Charlie\\"], \\"Music Festival\\": [\\"Alice\\", \\"Charlie\\"], \\"Coding Workshop\\": [\\"Bob\\"] } ) ```","solution":"def generate_event_lists(participants): participant_to_events = {} event_to_participants = {} for participant in participants: name = participant[\\"name\\"] events = participant[\\"events\\"] participant_to_events[name] = events for event in events: if event not in event_to_participants: event_to_participants[event] = [] event_to_participants[event].append(name) return participant_to_events, event_to_participants participants = [ {\\"name\\": \\"Alice\\", \\"events\\": [\\"Art Exhibition\\", \\"Music Festival\\"]}, {\\"name\\": \\"Bob\\", \\"events\\": [\\"Coding Workshop\\", \\"Art Exhibition\\"]}, {\\"name\\": \\"Charlie\\", \\"events\\": [\\"Music Festival\\", \\"Art Exhibition\\"]} ] print(generate_event_lists(participants))"},{"question":"A local library uses a certain classification system to organize its books. Books are categorized into various sections denoted by uppercase letters from \'A\' to \'Z\'. Each book\'s position within a section is represented by a unique integer ID starting from 1. The library wants to streamline its search function by grouping books in a single section that share a common prefix in their IDs. Given a series of triangular *blocks* of books, we need to determine how many books can be found in blocks that share a common prefix in their IDs. To demonstrate this, every block \'k\' denotes \'k\' books with IDs from 1 to \'k\'. For instance, a block \'3\' would include books with IDs 1, 2, and 3. You are given a single section of books and a series of triangular blocks. Calculate how many books can be grouped under a common prefix for each triangular block. ------ Input Format ------ - The first line contains a single character S — the section identifier. - The second line contains a single integer T — the number of triangular blocks. - The third line contains T space-separated integers representing the triangular blocks b_1, b_2, ..., b_T. ------ Output Format ------ - For each triangular block, output the count of books that can be grouped under a common prefix within that section. ------ Constraints ------ A ≤ S ≤ Z 1 ≤ T ≤ 100 1 ≤ b_i ≤ 100 for each i ------ Sample Input 1 ------ A 3 3 6 10 ------ Sample Output 1 ------ 3 6 10 ------ Explanation 1 ------ There is only one section \'A\', and the blocks are 3, 6, and 10. The book IDs within each block can all be identified under the single section: - Block 3: IDs 1, 2, 3 (3 books) - Block 6: IDs 1, 2, 3, 4, 5, 6 (6 books) - Block 10: IDs 1 through 10 (10 books) Each ID count corresponds directly to the triangular block size provided. ------ ------ Sample Input 2 ------ B 2 5 15 ------ Sample Output 2 ------ 5 15 ------ Explanation 2 ------ For section \'B\': - Block 5: IDs 1, 2, 3, 4, 5 (5 books) - Block 15: IDs 1 through 15 (15 books) Just as in the previous example, the count of books in each block translates directly from the block sizes given.","solution":"def count_books(section, num_blocks, blocks): Returns the count of books in each given triangular block size. :param section: Character representing the section (not used in this function but required by problem specifications) :param num_blocks: Integer number of blocks :param blocks: List of integers representing the size of each triangular block :return: List of integers representing the count of books for each block return blocks"},{"question":"Tanvi loves special sequences. She defines a special sequence as a sequence of integers where every element is at least twice the value of the previous element. Given a list of positive integers, Tanvi wants to know the length of the longest special sequence that can be formed from the list. Can you help her? The sequence does not need to be contiguous but must maintain the order of the original list. Input: First line contains a single integer N, the number of elements in the list. Second line contains N space-separated integers representing the list of positive integers. Output: Print the length of the longest special sequence that can be formed. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Element in list ≤ 10^9 SAMPLE INPUT 6 1 3 2 6 10 8 SAMPLE OUTPUT 3 Explanation The longest special sequence is [1, 2, 6] or [1, 3, 6]. Both sequences maintain the order of the original list and each subsequent element is at least twice the previous one.","solution":"def longest_special_sequence(arr): Returns the length of the longest special sequence where every element is at least twice the value of the previous element. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(n): for j in range(i): if arr[i] >= 2 * arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"When hiking through the forest, Frodo has discovered a series of mystical stones laid out in a grid. Each stone has a magical value associated with it. Frodo can only move in two directions: right or down. Starting from the top-left corner of the grid, he wants to reach the bottom-right corner in such a way that maximizes the sum of magical values he collects along his path. Your task is to help Frodo determine the maximum sum of magical values he can collect from the top-left to the bottom-right of the grid. -----Input----- The input consists of: - one line with two integers n and m (1 le n, m le 1000), the dimensions of the grid; - n lines each containing m integers v_{ij} (-10^9 le v_{ij} le 10^9), the magical values on the stones. -----Output----- Output one line with the maximum sum of magical values Frodo can collect. -----Examples----- Sample Input: 3 3 1 2 3 4 5 6 7 8 9 Sample Output: 29 Sample Input: 2 2 -1 -2 -3 -4 Sample Output: -7","solution":"def max_magical_value(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1]"},{"question":"Leo is passionate about solving problems with strings, and he recently encountered an intriguing string manipulation challenge. Given a string `s` consisting of lowercase English letters and an integer `k`, Leo wants to find the longest substring of `s` that contains at most `k` distinct characters. Can you help him solve this problem? -----Input----- The first line contains a string `s` (1 ≤ |s| ≤ 100000). The second line contains an integer `k` (1 ≤ k ≤ 26). -----Output----- Print the length of the longest substring of `s` that contains at most `k` distinct characters. -----Examples----- Input abcba 2 Output 3 Input aaabbbccc 1 Output 3 Input eceba 2 Output 3 -----Note----- In the first sample, the longest substring with at most 2 distinct characters is \\"bcb\\" which has length 3.","solution":"def longest_substring_with_k_distinct_chars(s, k): Returns the length of the longest substring of `s` that contains at most `k` distinct characters. from collections import defaultdict left = 0 right = 0 max_length = 0 char_count = defaultdict(int) while right < len(s): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given a string S consisting of only lowercase English letters. You can choose any two distinct characters in the string and swap their positions any number of times you want (including zero times). Your goal is to determine the maximum length of a palindromic substring that can be obtained by performing the swaps. A palindromic substring is a substring that reads the same backward as forward. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the length of the string S. - The second line of each test case contains the string S of length N. ------ Output Format ------ For each test case, output a single integer representing the maximum length of a palindromic substring that can be formed. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 2 7 abccba 8 aabbccdd ------ Sample Output 1 ------ 6 8 ------ Explanation 1 ------ - Test case 1: S = texttt{abccba} already forms a palindrome with a length of 6. - Test case 2: S = texttt{aabbccdd} can be rearranged to texttt{abcdcdba}, where the whole string itself becomes the longest palindromic substring with a length of 8.","solution":"def max_palindromic_length(S): Given a string S, determine the maximum length of a palindromic substring that can be obtained by performing any number of swaps between any two distinct characters. from collections import Counter freq = Counter(S) odd_count = sum(1 for count in freq.values() if count % 2 == 1) # All characters can be rearranged such that there is at most one odd character return len(S) - odd_count + (1 if odd_count > 0 else 0) def process_test_cases(T, test_cases): results = [] for N, S in test_cases: results.append(max_palindromic_length(S)) return results"},{"question":"Gianna loves to solve number puzzles involving prime numbers. She recently came across a puzzle that interested her and decided to share it with you. The puzzle goes as follows: Given an integer N, you need to find the smallest prime number P such that P is greater than or equal to N. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Gianna wants to verify her answers using a program. Can you help her write a function that finds this smallest prime number P? Input: The first line of the input contains a single integer N (1 ≤ N ≤ 10^6). Output: Output the smallest prime number P that is greater than or equal to N. Constraints: 2 ≤ P ≤ 10^6 SAMPLE INPUT 10 SAMPLE OUTPUT 11","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_equal(N): Finds the smallest prime number P that is greater than or equal to N. candidate = N while not is_prime(candidate): candidate += 1 return candidate"},{"question":"Maximus the Great is a domineering emperor who likes to rearrange his subjects. He has N subjects gathered in a line, and he has a sequence of commands. Each command instructs him to swap the subjects at two specific positions in the line. He wants to determine the order of the subjects after performing all the specified swaps, but his advisors can only provide him the final position of each subject in the line. The subjects are initially ordered sequentially from 1 to N, and there are M swap commands. Given the initial order of the subjects and the sequence of swap commands, can you determine the final order of the subjects after all swaps are performed? Input Format The first line contains two space-separated integers, N (the number of subjects) and M (the number of swap commands). The next M lines each contain two space-separated integers, x_i and y_i (1 ≤ x_i, y_i ≤ N), denoting that the subjects at positions x_i and y_i should be swapped. Constraints 1 leq N leq 10^5 1 leq M leq 2 times 10^5 Output Format Print N space-separated integers representing the final order of the subjects after all swaps are performed. Sample Input 1 5 3 1 2 3 4 2 3 Sample Output 1 2 4 1 3 5 Explanation Initially, the subjects are ordered [1, 2, 3, 4, 5]. Swap 1 and 2: [2, 1, 3, 4, 5] Swap 3 and 4: [2, 1, 4, 3, 5] Swap 2 and 3: [2, 4, 1, 3, 5]","solution":"def determine_final_order(N, M, swap_commands): Determines the final order of subjects after performing the swap commands. Parameters: N (int): Number of subjects. M (int): Number of swap commands. swap_commands (list of tuples): Each tuple contains two integers x and y denoting the positions to be swapped. Returns: list: Final order of subjects. subjects = list(range(1, N + 1)) for x, y in swap_commands: subjects[x - 1], subjects[y - 1] = subjects[y - 1], subjects[x - 1] return subjects"},{"question":"Alice has recently started learning about tree data structures, and she finds them fascinating. She learned that a tree with n nodes has exactly n-1 edges and is connected. To test her understanding, she decided to focus on a specific problem: finding the diameter of a tree. The diameter (or width) of a tree is the length of the longest path between any two nodes in the tree. Alice needs your help to write a program to determine the diameter of a given tree. A tree can be considered as an undirected connected acyclic graph. Input The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between nodes u and v. Output Output a single integer — the diameter of the tree. Examples Input 5 1 2 1 3 2 4 2 5 Output 3 Input 3 1 2 2 3 Output 2 Note: In the first example, the longest path is from node 4 to node 5 going through nodes 2 and 1, which has a length of 3. In the second example, the longest path is from node 1 to node 3 passing through node 2, which has a length of 2.","solution":"from collections import deque def bfs_farthest_node(adj_list, start): n = len(adj_list) distances = [-1] * n queue = deque([start]) distances[start] = 0 farthest_node = start max_distance = 0 while queue: current = queue.popleft() for neighbor in adj_list[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) if distances[neighbor] > max_distance: max_distance = distances[neighbor] farthest_node = neighbor return farthest_node, max_distance def tree_diameter(n, edges): adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Start BFS from an arbitrary node (node 1) farthest_node, _ = bfs_farthest_node(adj_list, 1) # Start second BFS from the farthest node found _, diameter = bfs_farthest_node(adj_list, farthest_node) return diameter"},{"question":"A museum has hired you to develop a software to help categorize their collection of paintings. Each painting is described by a list of factors, which includes its height, width, and weight. The museum categorizes paintings as either \\"large\\", \\"medium\\", or \\"small\\" based on specific criteria: - A painting is considered \\"large\\" if its height is greater than 4 meters or its width is greater than 3 meters. - If a painting is not large and its weight is greater than 2 kilograms, it is considered \\"medium\\". - All other paintings are considered \\"small\\". Given the information about a number of paintings, classify each painting and output its category. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. Each test case description follows. - Each test case consists of a single line containing three space-separated integers: the height H of the painting in meters, its width W in meters, and its weight G in kilograms. ------ Output Format ------ For each test case, print a single line containing either \\"large\\", \\"medium\\", or \\"small\\" based on the classification rules described above. ------ Constraints ------ 1 ≤ T ≤ 1000 0 ≤ H ≤ 50 0 ≤ W ≤ 50 0 ≤ G ≤ 100 ------ Sample Input 1 ------ 3 4 5 1 2 2 3 1 1 1 ------ Sample Output 1 ------ large medium small","solution":"def categorize_paintings(test_cases): results = [] for H, W, G in test_cases: if H > 4 or W > 3: results.append(\\"large\\") elif G > 2: results.append(\\"medium\\") else: results.append(\\"small\\") return results"},{"question":"You are given a binary string s consisting only of the characters \'0\' and \'1\'. You are allowed to perform the following operation at most once: - Choose any substring of s and replace all its characters with \'1\'s. Write a function to compute the maximum number of consecutive \'1\'s that can be obtained by performing the above operation at most once. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), the length of the binary string. The second line contains a binary string s of length n. -----Output----- Print a single integer — the maximum number of consecutive \'1\'s that can be obtained. -----Examples----- Input 5 11010 Output 4 Note: In the test sample, you can obtain \\"11110\\", which has 4 consecutive \'1\'s.","solution":"def max_consecutive_ones(n, s): Returns the maximum number of consecutive \'1\'s that can be obtained by performing at most one operation of turning a substring of \'0\'s into \'1\'s. max_ones = 0 current_zeros = 0 current_ones = 0 # To keep track of the number of ones on the left and right side of zeros left_ones = [0] * n right_ones = [0] * n # Fill left_ones array with the count of consecutive ones to the left if s[0] == \'1\': left_ones[0] = 1 for i in range(1, n): if s[i] == \'1\': left_ones[i] = left_ones[i-1] + 1 else: left_ones[i] = 0 # Fill right_ones array with the count of consecutive ones to the right if s[n-1] == \'1\': right_ones[n-1] = 1 for i in range(n-2, -1, -1): if s[i] == \'1\': right_ones[i] = right_ones[i+1] + 1 else: right_ones[i] = 0 for i in range(n): if s[i] == \'0\': left = left_ones[i-1] if i > 0 else 0 right = right_ones[i+1] if i < n-1 else 0 max_ones = max(max_ones, left + 1 + right) else: max_ones = max(max_ones, left_ones[i]) return max_ones"},{"question":"In a parallel universe, creatures have their own counting system. One particular counting system uses a unique notation involving only two digits: zero (0) and one (1). These digits can form numbers just like in the binary system but with an important distinction: in this universe, the numbers are read backward. For example, the binary number \'101\' will be read as \'101\' but interpreted as \'101\' in reverse, which equals \'5\' in decimal system (binary \'101\' -> binary \'101\' in reverse -> \'101\' = 5). Given a number in this special format, your task is to decode it to its actual decimal value. ------ Input Format ------ - The first line contains an integer T, denoting the number of test cases. - Each of the following T lines contains a single string S, representing the number in this unique counting system. ------ Output Format ------ For each testcase output the decimal value of the given number in a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10 ----- Sample Input 1 ------ 4 101 10 001 111 ----- Sample Output 1 ------ 5 1 4 7 ----- explanation 1 ------ Test Case 1: The string \'101\' is read as reverse \'101\', which is binary for 5. Test Case 2: The string \'10\' is read as reverse \'01\', which is binary for 1. Test Case 3: The string \'001\' is read as reverse \'100\', which is binary for 4. Test Case 4: The string \'111\' is read as reverse \'111\', which is binary for 7.","solution":"def decode_special_binary(T, test_cases): Decodes numbers from special binary format to decimal :param T: int, number of test cases :param test_cases: list of str, each string representing a special binary number :return: list of int, decoded decimal values results = [] for case in test_cases: reversed_case = case[::-1] decimal_value = int(reversed_case, 2) results.append(decimal_value) return results"},{"question":"You are given an array of integers. Your task is to compute and print the sum of all integers in the array which are in even positions (i.e., positions with even indices). Constraints * The length of the array is between 1 and 100. * Each element of the array is an integer between -1000 and 1000. Input Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Where: - n is the number of elements in the array - a_i represents the elements of the array Output Print the sum of integers in even positions of the array. Examples Input 5 1 2 3 4 5 Output 9 Input 4 1 -2 3 -4 Output 4","solution":"def sum_even_positions(arr): Computes the sum of integers in even positions (0-based index) of the array. Args: arr (list): List of integers. Returns: int: Sum of integers at even positions. return sum(arr[i] for i in range(0, len(arr), 2)) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = sum_even_positions(arr) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function `overlap(rect1, rect2)` that takes two rectangles, each represented by a dictionary with keys `x1`, `y1`, `x2`, and `y2`, which denote the coordinates of the bottom-left and top-right corners of the rectangle respectively. The function should return `True` if the rectangles overlap, and `False` otherwise. Example: ```python rect1 = {\'x1\': 1, \'y1\': 1, \'x2\': 3, \'y2\': 3} rect2 = {\'x1\': 2, \'y1\': 2, \'x2\': 4, \'y2\': 4} overlap(rect1, rect2) # Should return True rect1 = {\'x1\': 1, \'y1\': 1, \'x2\': 3, \'y2\': 3} rect2 = {\'x1\': 4, \'y1\': 4, \'x2\': 5, \'y2\': 5} overlap(rect1, rect2) # Should return False ```","solution":"def overlap(rect1, rect2): Determine if two rectangles overlap. Each rectangle is represented by a dictionary with keys: \'x1\', \'y1\' for the bottom-left corner and \'x2\', \'y2\' for the top-right corner. Args: rect1 (dict): The first rectangle, with keys \'x1\', \'y1\', \'x2\', \'y2\'. rect2 (dict): The second rectangle, with keys \'x1\', \'y1\', \'x2\', \'y2\'. Returns: bool: True if the rectangles overlap, False otherwise. # If one rectangle is to the left of the other if rect1[\'x2\'] <= rect2[\'x1\'] or rect2[\'x2\'] <= rect1[\'x1\']: return False # If one rectangle is above the other if rect1[\'y2\'] <= rect2[\'y1\'] or rect2[\'y2\'] <= rect1[\'y1\']: return False return True"},{"question":"You are given a 2D grid containing integers representing different types of terrains. The grid is an `m x n` matrix where `grid[i][j]` indicates the cost of movement through that cell. You need to find the minimum cost path from the top-left corner to the bottom-right corner where you can only move to the right or down one cell at a time. Write a function `min_cost_path(grid)` that returns the minimum cost required to reach the bottom-right corner of the grid from the top-left corner. -----Input----- A 2D list of integers `grid` with dimensions `m x n` (1 ≤ m, n ≤ 200). Each integer `grid[i][j]` represents the cost to pass through cell `(i, j)` and is non-negative (0 ≤ grid[i][j] ≤ 100). -----Output----- An integer representing the minimum cost path from the top-left corner to the bottom-right corner of the grid. -----Examples----- Input [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output 7 Input [[1, 2, 3], [4, 5, 6]] Output 12 -----Note----- For the first sample, the minimum cost path is `1 → 3 → 1 → 1 → 1` with a total cost of 7. For the second sample, the minimum cost path is `1 → 2 → 3 → 6` with a total cost of 12.","solution":"def min_cost_path(grid): Returns the minimum cost required to reach the bottom-right corner of the grid from the top-left corner. You can only move to the right or down one cell at a time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[float(\'inf\')] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(m): for j in range(n): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1]"},{"question":"A biologist is experimenting with bacterial growth. She starts with a single bacterial colony containing S bacteria and cultivates it using specific rules over D days. Each day, she can choose one type of nutrient to add to the colony which affects the growth of the bacteria as follows: 1. Nutrient A: The number of bacteria doubles. 2. Nutrient B: The number of bacteria triples. Given initial colony size S and duration D in days, determine the maximum possible number of bacteria in the colony after D days if she uses the nutrients optimally. Constraints * 1 leq S leq 100 * 1 leq D leq 30 Input The input is given from Standard Input in the following format: S D Output Output the maximum number of bacteria that can be present in the colony at the end of D days. Example Input 2 3 Output 54","solution":"def max_bacteria_growth(S, D): Returns the maximum number of bacteria possible after D days starting with S bacteria. :param S: Initial number of bacteria :param D: Number of days :return: Maximum number of bacteria # Triple the bacteria for each day, which is the optimal strategy return S * (3 ** D)"},{"question":"You are given an integer array representing the initial state of a grid, where each cell contains either \'1\' or \'0\'. Each \'1\' represents a live cell, and each \'0\' represents a dead cell. The grid evolves according to the following rules: 1. Any live cell with fewer than two live neighbors dies, as if caused by under-population. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by over-population. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. You need to compute the state of the grid after one iteration. -----Constraints----- - All values in input are integers. - 1 leq grid size leq 10 - The grid given is square. - Each cell belongs to set {0, 1}. -----Input----- Input is given from Standard Input in the following format: The first line consists of a single integer N, the size of the grid. The next N lines consist of N space-separated integers representing the state of each cell in the grid. -----Output----- Print the state of the grid after one iteration, in the same format. -----Sample Input----- 3 0 1 0 0 0 1 1 1 1 -----Sample Output----- 0 0 0 1 0 1 0 1 1 Explanation: The initial state of the grid is: 0 1 0 0 0 1 1 1 1 After one iteration, the state of the grid changes to: 0 0 0 1 0 1 0 1 1","solution":"def game_of_life(grid): Computes the next state of the grid based on the Game of Life rules. N = len(grid) next_state = [[0] * N for _ in range(N)] for r in range(N): for c in range(N): live_neighbors = count_live_neighbors(grid, r, c, N) if grid[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: next_state[r][c] = 0 else: next_state[r][c] = 1 else: if live_neighbors == 3: next_state[r][c] = 1 else: next_state[r][c] = 0 return next_state def count_live_neighbors(grid, r, c, N): Counts the live neighbors of a given cell in the grid. directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and grid[nr][nc] == 1: live_neighbors += 1 return live_neighbors # Reading input and printing the output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) grid = [] index = 1 for i in range(N): row = list(map(int, data[index:index + N])) grid.append(row) index += N next_grid = game_of_life(grid) for row in next_grid: print(\' \'.join(map(str, row)))"},{"question":"Write a function that accepts a list of integers and returns a new list containing only the integers that are divisible by 3 and have more than one digit. If the list is empty or no integers meet these conditions, the function should return an empty list. Include error handling to manage cases where the input is not a list of integers.","solution":"def filter_integers(lst): Returns a list of integers that are divisible by 3 and have more than one digit. :param lst: List of integers :return: Filtered list of integers if not isinstance(lst, list): raise ValueError(\\"Input must be a list\\") if not all(isinstance(item, int) for item in lst): raise ValueError(\\"All elements in the list must be integers\\") return [x for x in lst if x % 3 == 0 and (x > 9 or x < -9)]"},{"question":"The planets are arranged in a circle, numbered 1 through N in clockwise order. A spaceship can travel a certain number of steps in the clockwise direction to visit each planet. For a given number of steps, determine the first planet that the spaceship will revisit if it starts from planet 1. -----Constraints----- - N is an integer. - S is an integer. - 2 ≤ N ≤ 1000 - 1 ≤ S ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N S -----Output----- Print the number of the first planet that will be revisited by the spaceship. -----Sample Input----- 6 2 -----Sample Output----- 1","solution":"def first_revisited_planet(N, S): Returns the number of the first planet that the spaceship will revisit. Parameters: - N: Total number of planets in the circle, numbered from 1 to N. - S: Number of steps the spaceship can travel in the clockwise direction. visited_planets = set() current_planet = 1 while True: if current_planet in visited_planets: return current_planet visited_planets.add(current_planet) current_planet = (current_planet + S - 1) % N + 1"},{"question":"Given a string and a dictionary containing valid words, determine the minimum number of spaces required to partition the string such that every substring is a valid word in the dictionary. If it is impossible to partition the string into valid words, return -1. # Function Signature ```python def min_spaces_to_partition(s: str, word_dict: set) -> int: pass ``` # Input - `s`: A string of length `n` (1 ≤ `n` ≤ 300). - `word_dict`: A set of strings representing the dictionary, where each string represents a valid word. The total number of words is up to `10,000`, and each word\'s length doesn\'t exceed 100. # Output - Return an integer representing the minimum number of spaces required to partition the string, or -1 if it\'s not possible to partition the string into valid words. # Example ```python assert min_spaces_to_partition(\\"applepie\\", {\\"apple\\", \\"pie\\"}) == 1 assert min_spaces_to_partition(\\"applepieapple\\", {\\"apple\\", \\"pie\\"}) == 2 assert min_spaces_to_partition(\\"catsandog\\", {\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"}) == -1 assert min_spaces_to_partition(\\"pineapplepenapple\\", {\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"}) == 2 ``` # Explanation - In the first example, the string \\"applepie\\" can be partitioned into \\"apple pie\\" which requires `1` space. - In the second example, the string \\"applepieapple\\" can be partitioned into \\"apple pie apple\\" which requires `2` spaces. - In the third example, it is not possible to partition \\"catsandog\\" into valid words from the dictionary, so the function returns `-1`. - In the fourth example, the string \\"pineapplepenapple\\" can be partitioned into \\"pine apple pen apple\\" or \\"pineapple pen apple\\", both require `2` spaces.","solution":"def min_spaces_to_partition(s: str, word_dict: set) -> int: Returns the minimum number of spaces required to partition the string such that every substring is a valid word in the dictionary. If it is impossible to partition the string into valid words, return -1. n = len(s) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # No spaces needed for an empty substring for i in range(1, n + 1): for j in range(i): if s[j:i] in word_dict: dp[i] = min(dp[i], dp[j] + 1) return dp[n] - 1 if dp[n] != float(\'inf\') else -1"},{"question":"A rectangular field in a coordinate plane is defined by its four corners, which are given as integer coordinates (x1, y1), (x2, y2), (x3, y3), and (x4, y4). A farmer wants to place a scarecrow at a given position (x, y) inside this field so that it can protect the entire field by being able to see all four sides of the rectangle. A scarecrow at (x, y) can protect any point within a rectangle if it can draw an unobstructed straight line to any point along one of the field’s sides without leaving the boundaries of the field. Your task is to determine if the placement of this scarecrow is a valid position such that it can see all four sides of the rectangular field. Input The first line contains two space-separated integers (x, y) — the coordinates of the scarecrow. The next four lines each contain two space-separated integers (xi, yi) which represent the coordinates of the corners of the rectangular field. Output Output \\"VALID\\" (without quotes) if the scarecrow can see all four sides of the rectangle. Otherwise, output \\"INVALID\\". Examples Input 4 4 2 2 6 2 6 6 2 6 Output VALID Input 3 3 1 1 5 1 5 4 1 4 Output VALID Input 0 0 0 0 4 0 4 4 0 4 Output INVALID Input 5 3 1 1 4 1 4 4 1 4 Output INVALID","solution":"def is_scarecrow_position_valid(scarecrow, corners): Determines if the scarecrow is positioned in such a way that it can see all four sides of a given rectangular field. :param scarecrow: tuple (x, y), coordinates of the scarecrow. :param corners: list of four tuples [(x1, y1), (x2, y2), (x3, y3), (x4, y4)], coordinates of the rectangle\'s corners. :return: \\"VALID\\" if the scarecrow can see all four sides, \\"INVALID\\" otherwise. x, y = scarecrow x_coords = [corner[0] for corner in corners] y_coords = [corner[1] for corner in corners] min_x, max_x = min(x_coords), max(x_coords) min_y, max_y = min(y_coords), max(y_coords) # The scarecrow should be inside the boundary of the rectangle and not on the edges if min_x < x < max_x and min_y < y < max_y: return \\"VALID\\" else: return \\"INVALID\\""},{"question":"Problem A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string S and an integer K, determine if it is possible to convert S to a palindrome by performing at most K character replacement operations. Each character replacement operation allows you to change any character in the string to any other character. Constraints * 1 ≤ |S| ≤ 1000 * 0 ≤ K ≤ 1000 * String S is composed of lowercase English letters Input The input is given in the following format. S K The string S is given on one line followed by the integer K. Output Output \\"YES\\" (without quotes) if it is possible to convert S to a palindrome by performing at most K character replacement operations. Otherwise, output \\"NO\\". Examples Input abcba 1 Output YES Input abcd 1 Output NO Input abca 2 Output YES","solution":"def can_convert_to_palindrome(S, K): Determines if it is possible to convert string S to a palindrome by performing at most K character replacement operations. Parameters: S (str): Input string K (int): Maximum number of allowed character replacement operations Returns: str: \\"YES\\" if conversion is possible, \\"NO\\" otherwise n = len(S) mismatch_count = 0 for i in range(n // 2): if S[i] != S[n - 1 - i]: mismatch_count += 1 return \\"YES\\" if mismatch_count <= K else \\"NO\\""},{"question":"A string is called alternating if no two adjacent characters are the same. Given a string consisting of lowercase English letters, you need to determine the length of the longest substring that is alternating. ----- Input ----- A single string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. ----- Output ----- Print a single integer, the length of the longest alternating substring. ----- Examples ----- Input abababab Output 8 Input aabbaaabba Output 2 Input abcabcabc Output 9 Input abbaabba Output 2","solution":"def longest_alternating_substring(s): Returns the length of the longest alternating substring. if not s: return 0 max_length = current_length = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Mary is organizing a coding competition with multiple challenges. Each challenge i lasts for d_i days and can start on any day between s_i and e_i (inclusive). However, no two challenges can be conducted simultaneously. Mary wants to schedule the challenges such that all challenges can be conducted without any overlap. Input: The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 200,000) — the number of challenges. Each of the next n lines contains three integers: s_i, e_i, d_i (1 ≤ s_i ≤ e_i ≤ 10^9 and 1 ≤ d_i ≤ e_i - s_i + 1), where s_i is the earliest possible start day, e_i is the latest possible end day, and d_i is the duration of the i-th challenge. Output: For each test case, print \\"YES\\" if it is possible to schedule all the challenges without any two challenges overlapping. Otherwise, print \\"NO\\". Example: Input: 2 3 1 10 5 2 15 3 7 20 8 2 1 4 3 6 10 4 Output: YES YES Explanation: In the first test case, one of the possible schedules is: - Challenge 1 from day 1 to day 5 - Challenge 2 from day 6 to day 8 - Challenge 3 from day 9 to day 16 In the second test case, one possible schedule is: - Challenge 1 from day 1 to day 3 - Challenge 2 from day 6 to day 9","solution":"def can_schedule_all_challenges(t, test_cases): results = [] for test_case in test_cases: n, challenges = test_case # Sort challenges by end time first and then by start time challenges.sort(key=lambda x: x[1]) current_time = 0 possible = True for challenge in challenges: s, e, d = challenge if current_time < s: current_time = s if current_time + d - 1 > e: possible = False break current_time += d if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A computer science student, Liam, is working on a sequence of commands to navigate a robot in a 2D grid. The robot starts at the origin point (0, 0) and can move north (\'N\'), south (\'S\'), east (\'E\'), and west (\'W\'). Liam is trying to figure out the minimum number of moves required for the robot to return to the origin after processing a given sequence of commands. Given a sequence of commands, determine the minimum number of moves needed to return the robot to the origin. -----Input----- The input consists of: - One line containing a string cmds (1 leq mathrm{length}(cmds) leq 1000), representing the sequence of commands. Each character in the sequence is either \'N\', \'S\', \'E\', or \'W\'. -----Output----- Output the minimum number of moves needed for the robot to return to the origin after processing the given sequence of commands. -----Examples----- Sample Input: NNESWW Sample Output: 2 Sample Input: NNEESSWW Sample Output: 0","solution":"def min_moves_to_origin(cmds): Returns the minimum number of moves needed for the robot to return to the origin after processing the given sequence of commands. Parameters: cmds (str): The sequence of commands. Returns: int: The minimum number of moves needed to return to the origin. north_count = cmds.count(\'N\') south_count = cmds.count(\'S\') east_count = cmds.count(\'E\') west_count = cmds.count(\'W\') vertical_displacement = abs(north_count - south_count) horizontal_displacement = abs(east_count - west_count) return vertical_displacement + horizontal_displacement"},{"question":"Write a program that, given two strings, determines the minimum number of single-character edits (insertions, deletions, or substitutions) required to convert one string into the other. This is a well-known problem called the \\"Edit Distance\\" or \\"Levenshtein Distance\\". Task Given two strings A and B, compute the edit distance between them. Your program should print out the minimum number of single-character edits needed to transform string A into string B. Constraints 1 ≤ |A|, |B| ≤ 1000 A and B consist of lowercase English letters only. Input Format The input contains two lines: The first line contains a string A. The second line contains a string B. Output Format One integer which is the edit distance between the given two strings. SAMPLE INPUT kitten sitting SAMPLE OUTPUT 3 Explanation To transform \\"kitten\\" into \\"sitting\\", we can perform the following three operations: 1. Replace \'k\' with \'s\' (substitution) 2. Replace \'e\' with \'i\' (substitution) 3. Insert \'g\' at the end (insertion) Each of these operations involves changing one character in the string, resulting in a total of three operations. Therefore, the edit distance between \\"kitten\\" and \\"sitting\\" is 3.","solution":"def edit_distance(A, B): Computes the edit distance between strings A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for DP array for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill DP array for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Substitution return dp[m][n]"},{"question":"You are given an array of integers `nums` and an integer `k`. Write a function that returns the maximum possible sum of a non-empty subarray that does not exceed `k`. Note: - A subarray is a contiguous part of an array. Example 1: Input: nums = [2, 1, -3, 4, -1, 2, 1, -5, 4], k = 6 Output: 6 Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6 which is less than or equal to `k`. Example 2: Input: nums = [1, 2, 3], k = 7 Output: 6 Explanation: The subarray [1, 2, 3] has the maximum sum 6 which is less than or equal to `k`. Example 3: Input: nums = [-2, -1, -3, -4, 0], k = -1 Output: -1 Explanation: The subarray [-1] has the maximum sum -1 which is less than or equal to `k`. Constraints: - The length of `nums` will be in the range [1, 20,000]. - The range of elements in `nums` will be from [-10,000 to 10,000]. - The range of `k` will be from [-100,000 to 100,000].","solution":"from bisect import bisect_left, insort def max_sum_subarray_no_more_than_k(nums, k): Returns the maximum possible sum of a non-empty subarray that does not exceed k. if not nums: return 0 max_sum = float(\'-inf\') prefix_sum = 0 prefix_sums = [0] for num in nums: prefix_sum += num # Find the largest sum where (prefix_sum - prefix_sums[i]) <= k idx = bisect_left(prefix_sums, prefix_sum - k) if idx < len(prefix_sums): max_sum = max(max_sum, prefix_sum - prefix_sums[idx]) insort(prefix_sums, prefix_sum) return max_sum"},{"question":"You are working as a software engineer and often encounter situations where you need to process lists of strings, ensuring they are correctly formatted. For a project, you have been asked to implement a function that converts all strings in a list to snake_case. In snake_case, all letters are lower case and each word is separated by an underscore character. Write a function `to_snake_case` that takes a list of mixed case strings and converts each string to snake_case. # Input - A list of strings `lst` where each string contains only alphabetic characters. The length of each string is between 1 and 100 characters inclusive. The length of the list is between 1 and 10,000 strings inclusive. # Output - A list of strings where each string is converted to snake_case format. # Example Input: ```python [\\"CamelCase\\", \\"exampleString\\", \\"YetAnotherExample\\"] ``` Output: ```python [\\"camel_case\\", \\"example_string\\", \\"yet_another_example\\"] ``` # Note In the provided example, the input strings are converted according to the following rules: 1. Every uppercase letter is converted to lowercase. 2. Each time there is a transition from a lowercase to an uppercase letter within a word, an underscore character is added before the uppercase letter, and then the letter is converted to lowercase. Be careful to handle strings that are purely uppercase or purely lowercase.","solution":"import re def to_snake_case(lst): Converts a list of mixed case strings to snake_case. snake_case_list = [] pattern = re.compile(r\'(?<!^)(?=[A-Z])\') for s in lst: snake_case_list.append(pattern.sub(\'_\', s).lower()) return snake_case_list"},{"question":"You are given a string S consisting of lowercase English letters. Process Q queries of the following types. The type of the i-th query is represented by T_i. * T_i=1: You are given a character C_i and an integer P_i. Insert the character C_i at position P_i (0-indexed) in the string. * T_i=2: You are given two integers L_i, R_i. Check if the substring S[L_i:R_i+1] is a palindrome. If it is, print \\"YES\\"; otherwise, print \\"NO\\". * T_i=3: You are given a character C_i. Find the number of occurrences of C_i in the string. Constraints * 1 ≤ |S| ≤ 1000 * 1 ≤ Q ≤ 1000 * 1 ≤ T_i ≤ 3 * 0 ≤ P_i < |S| (T_i=1) * 0 ≤ L_i ≤ R_i < |S| (T_i=2) * \'a\' ≤ C_i ≤ \'z\' (T_i=1,3) Input Input is given from Standard Input in the following format: S Q First query Second query vdots Q-th query Each query is given in the following format: If T_i=1, T_i C_i P_i If T_i=2, T_i L_i R_i If T_i=3, T_i C_i Output For each query with T_i=2, 3, print the answer. Example Input abcd 5 2 1 3 1 e 2 2 1 4 3 e 3 a Output NO NO 1 1","solution":"def process_queries(S, queries): results = [] s_list = list(S) for query in queries: t = query[0] if t == 1: c = query[1] p = int(query[2]) s_list.insert(p, c) elif t == 2: l = int(query[1]) r = int(query[2]) substring = s_list[l:r+1] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") elif t == 3: c = query[1] results.append(str(s_list.count(c))) return results # example usage: S = \\"abcd\\" queries = [ [2, \\"1\\", \\"3\\"], [1, \\"e\\", \\"2\\"], [2, \\"1\\", \\"4\\"], [3, \\"e\\"], [3, \\"a\\"] ] print(\\"n\\".join(process_queries(S, queries)))"},{"question":"You are given an array of n integers, and you need to find the largest subset of these integers such that the sum of any two distinct integers in the subset is even. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100) — the number of integers in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (-10^3 le a_i le 10^3) — the elements of the array. -----Output----- For each test case, print a single integer, the size of the largest subset such that the sum of any two distinct integers in the subset is even. -----Examples----- Input 3 5 1 2 3 4 5 6 2 4 6 8 10 12 4 1 3 5 7 Output 3 6 4 -----Note----- In the first test case, the largest subset where the sum of any two distinct integers is even is {2, 4}, {2, 2}, or {4, 4}. In the second test case, all numbers are even, so any subset of them will have an even sum when summed. In the third test case, all numbers are odd, so including all of them will give pairwise even sums.","solution":"def largest_even_sum_subset_size(test_cases): results = [] for n, array in test_cases: evens = sum(1 for x in array if x % 2 == 0) odds = n - evens results.append(max(evens, odds)) return results # Helper to read input into the required format def read_input(input_list): t = int(input_list[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_list[index]) array = list(map(int, input_list[index + 1].split())) test_cases.append((n, array)) index += 2 return test_cases"},{"question":"You are a software engineer at a new startup and your team is working on implementing a task scheduling system. One of the components of the system is to evaluate whether the tasks can be scheduled without any conflicts. There are N tasks in total, and each task needs to run for a certain duration and should not overlap with any other task. Each task is represented by its start time and end time. Determine if all the tasks can be scheduled without any conflicts. ------ Input ------ The first line of the input contains an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of tasks. The next N lines each contain two space-separated integers, S_{i} and E_{i}, representing the start time and end time of the i^{th} task. ------ Output ------ For each test case, output exactly one line containing the string Yes if it is possible to schedule all tasks without any conflict, and the string No otherwise. Output is case sensitive. So do not print YES or yes. ------ Constraints ------ 1 ≤ T ≤ 500 1 ≤ N ≤ 1000 0 ≤ S_{i} < E_{i} ≤ 10^9 ------ Sample Input 1 ------ 2 3 1 3 2 5 6 8 2 2 4 4 6 ------ Sample Output 1 ------ No Yes ------ Explanation 1 ------ Case 1. The first and second tasks overlap because the first task ends at 3 and the second task starts at 2, hence the answer is No. Case 2. The two tasks do not overlap since the first task ends exactly when the second task begins, and it is allowed by the constraints. Therefore, the answer is Yes.","solution":"def can_schedule_tasks(test_cases): results = [] for case in test_cases: case.sort(key=lambda x: x[0]) conflict = False for i in range(1, len(case)): if case[i-1][1] > case[i][0]: conflict = True break if conflict: results.append(\\"No\\") else: results.append(\\"Yes\\") return results def process_input(input_data): lines = input_data.split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 case = [] for _ in range(N): S, E = map(int, lines[index].split()) case.append((S, E)) index += 1 test_cases.append(case) return test_cases"},{"question":"You are given a string consisting of lowercase English letters and integer digits. You need to sort the string in non-decreasing order such that all the digits appear before the letters. Return the sorted string. Example s = \\"a1c2b3\\" The sorted string will be \\"123abc\\". Function Description Complete the sortingString function in the editor below. sortingString has the following parameter(s): string s: a string consisting of lowercase English letters and digits Returns string: the sorted string with all digits before the letters Input Format A single line of input containing the string s. Constraints - 1 leq |s| leq 1000 - The string s consists of lowercase English letters and digits only. Sample Input 0 1a2b3c Sample Output 0 123abc Sample Input 1 a9b8c7 Sample Output 1 789abc Explanation 1 In the first example, the digits (1, 2, 3) are sorted first followed by the sorted letters (a, b, c). In the second example, the digits (7, 8, 9) are sorted first followed by the sorted letters (a, b, c).","solution":"def sortingString(s): Returns a sorted string with all digits before the letters. Parameters: s (str): A string consisting of lowercase English letters and digits Returns: str: The sorted string digits = sorted([char for char in s if char.isdigit()]) letters = sorted([char for char in s if char.isalpha()]) return \'\'.join(digits + letters)"},{"question":"Given a list of integers, find the sum of all the even numbers in the list and return it. Example 1: Input: nums = [1, 2, 3, 4, 5] Output: 6 Explanation: The even numbers are 2 and 4, and their sum is 6. Example 2: Input: nums = [0, -2, -3, 8, 15] Output: 6 Explanation: The even numbers are 0, -2, and 8, and their sum is 6. Example 3: Input: nums = [7, 13, 19] Output: 0 Explanation: There are no even numbers in the list. Example 4: Input: nums = [] Output: 0 Explanation: The list is empty, so the sum of even numbers is 0. Constraints: - The number of elements in the list ranges from 0 to 10^4. - The elements in the list are integers, -10^5 <= nums[i] <= 10^5.","solution":"def sum_of_even_numbers(nums): Returns the sum of all the even numbers in the list nums. return sum(num for num in nums if num % 2 == 0)"},{"question":"Write a function to determine if there exists a pair of elements in a given array such that their sum is equal to a specific target number. Input: The first line of input consists of an integer T, the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers N (the size of the array) and K (the target sum). The second line contains N integers separated by spaces, representing the elements of the array. Output: For each test case, output \\"Yes\\" if there exists a pair of elements in the array whose sum is equal to K, otherwise output \\"No\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 -10^9 ≤ K ≤ 10^9 SAMPLE INPUT: 2 5 9 2 7 11 15 1 4 6 3 2 4 3 SAMPLE OUTPUT: Yes Yes Explanation: In the first test case, there exists a pair (2, 7) whose sum is 9. In the second test case, there exists a pair (2, 4) whose sum is 6.","solution":"def has_pair_with_sum(arr, K): Returns \\"Yes\\" if there exists a pair of elements in the given array such that their sum is equal to K, otherwise returns \\"No\\". seen = set() for number in arr: if K - number in seen: return \\"Yes\\" seen.add(number) return \\"No\\" def process_test_cases(T, test_cases): Processes multiple test cases to determine if each case has a pair of elements whose sum is equal to the specified target. Parameters: - T: Number of test cases - test_cases: A list of tuples where each tuple contains (N, K, arr) Returns: A list of strings \\"Yes\\" or \\"No\\" for each test case. results = [] for (N, K, arr) in test_cases: results.append(has_pair_with_sum(arr, K)) return results"},{"question":"Implement a function that takes an integer `n` and a list of `n` positive integers representing scores. The function should remove all the duplicate scores, sort the remaining scores in ascending order, and return the sorted list of unique scores. The input list may have at most 1000 elements. Input: The input consists of two lines. The first line contains the integer `n` (1 <= n <= 1000), and the second line contains `n` space-separated integers representing the scores (1 <= score <= 10000 for each score). Output: Output the sorted list of unique scores in ascending order, separated by a space. Example: Input: 8 4 8 6 4 7 8 3 7 Output: 3 4 6 7 8","solution":"def unique_sorted_scores(n, scores): Returns a sorted list of unique scores. Parameters: n (int): The number of scores. scores (list of int): List of scores. Returns: list of int: Sorted list of unique scores. unique_scores = list(set(scores)) unique_scores.sort() return unique_scores"},{"question":"David is working on implementing a ticketing system for a popular online movie streaming platform. The platform offers various types of movies, and based on user preferences, it occasionally offers discount bundles where users can purchase multiple movies at a discounted price. David needs to determine the maximum profit the platform can achieve by selling movie tickets and discount bundles. Here are the specifics: - Each individual movie ticket is sold for a specific price, provided via the input. - A discount bundle consists of exactly three movies and is sold for a fixed price. If the three most expensive, available individual movie tickets in the selection sum up to more than the bundle price, the platform will profit more by selling them as individual tickets rather than as a bundle. If there are fewer than three movies in the selection, the platform sells them individually. Given a list of movie prices and a bundle price, write a function to calculate the maximum profit that can be obtained by selling the movies. -----Input----- The input consists of a single line containing an integer n (1 le n le 10^5), followed by n integers representing the prices of individual movie tickets (1 le text{price} le 10^4), and a single integer representing the bundle price (1 le text{bundle price} le 3 times 10^4). -----Output----- Output a single integer: the maximum profit that can be obtained. -----Examples----- Sample Input 1: 5 15 10 20 30 25 50 Sample Output 1: 100 Sample Input 2: 4 10 15 5 5 25 Sample Output 2: 35 Sample Input 3: 3 10 5 5 30 Sample Output 3: 20 Sample Input 4: 2 5 5 15 Sample Output 4: 10 Explanation of examples: 1. The most profitable way is to sell all movies individually (15 + 20 + 25 + 30 + 10 = 100). 2. If the discount bundle is used, the profit would be lower. Therefore, selling individually is more profitable. 3. Here, bundling is not an option since the bundle price 30 is more than the sum of the movie ticket prices (10 + 5 + 5 = 20). 4. With only two movies available, the only option is to sell individually.","solution":"def max_profit(n, prices, bundle_price): Given a list of movie prices and a bundle price, this function calculates the maximum profit that can be obtained by selling the movies individually or in discount bundles. :param n: int, number of movies :param prices: list of int, prices of individual movie tickets :param bundle_price: int, price of the discount bundle :return: int, the maximum profit that can be obtained if n < 3: return sum(prices) prices.sort(reverse=True) profit = 0 i = 0 while i < len(prices): if i + 2 < len(prices) and prices[i] + prices[i+1] + prices[i+2] > bundle_price: profit += prices[i] + prices[i+1] + prices[i+2] i += 3 else: profit += prices[i] i += 1 return profit"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},Y={class:"card-container"},C={key:0,class:"empty-state"},j=["disabled"],P={key:0},z={key:1};function R(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[_,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",Y,[(n(!0),i(y,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,j)):l("",!0)])}const M=d(A,[["render",R],["__scopeId","data-v-f7e5d4e2"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/1.md","filePath":"chatai/1.md"}'),D={name:"chatai/1.md"},G=Object.assign(D,{setup(s){return(e,u)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
