import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(r,e,l,m,a,s){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const A=d(k,[["render",N],["__scopeId","data-v-b638563f"]]),O=JSON.parse('[{"question":"You are given an array of integers. Your task is to write a function that finds the second smallest number in the array. The function should return the second smallest number. If the array has fewer than two unique numbers, the function should return `None`. Your solution should handle both positive and negative integers. **Examples:** ``` find_second_smallest([1, 2, 3, 4, 5]) => 2 find_second_smallest([5, 5, 5, 5, 5]) => None find_second_smallest([10, 5, 1, 3, 4]) => 3 find_second_smallest([-1, -2, -3, -4]) => -3 find_second_smallest([1]) => None find_second_smallest([2, 1, 2, 1, 3]) => 2 ``` Write the function `find_second_smallest(array)`.","solution":"def find_second_smallest(array): Finds the second smallest number in the given array. If the array has fewer than two unique numbers, returns None. if len(array) < 2: return None unique_numbers = list(set(array)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function that takes two integers as inputs and returns the greatest common divisor (GCD) of those two numbers. Your solution should be efficient with respect to time complexity. Avoid using built-in functions that directly compute the GCD. # Example: ```python gcd(48, 18) -> 6 gcd(100, 25) -> 25 gcd(7, 3) -> 1 ``` # Hint: Consider using the Euclidean algorithm, which is efficient for finding the GCD of two numbers. The algorithm is based on the principle that the GCD of two numbers also divides their difference.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"=====Problem Statement===== Write a function that determines if it is possible to rearrange the characters of a given string to form a palindrome. If rearrangement is possible, return True; otherwise, return False. =====Input Format===== A single string, s, consisting of only lowercase English letters. =====Constraints===== 1 ≤ len(s) ≤ 1000 =====Output Format===== Return True if the characters of the string can be rearranged to form a palindrome; otherwise, return False. =====Sample Input===== aabb =====Sample Output===== True =====Explanation===== The characters of the string \'aabb\' can be rearranged to form the palindrome \'abba\'.","solution":"def can_form_palindrome(s): Determines if it is possible to rearrange the characters of a given string to form a palindrome. Args: s (str): The input string Returns: bool: True if it is possible to rearrange the characters to form a palindrome, False otherwise. from collections import Counter # Count characters in the string char_count = Counter(s) # Count characters with odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Suzuki needs help packing his library! Suzuki has a collection of books that he needs to pack into boxes. Each book has a different weight, and he wants to distribute the weights as evenly as possible across all boxes. You will be given a list of integers representing the weights of each book and an integer representing the number of boxes. Your goal is to return a list of lists, where each inner list represents the books packed into a single box. The weights in each box should be distributed as evenly as possible. Example input: ```python weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] num_boxes = 3 ``` Example output from your function: ```python boxes = [[10, 1], [9, 2], [8, 3], [7, 4], [6, 5]] ``` Additional details: - Books should be packed in such a way that the difference in total weight between the heaviest and lightest box is minimized. - It is not required to keep the relative order of books from the input list as long as the optimal packing condition is met. Here is another example input: ```python weights = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] num_boxes = 2 ``` Returns: ```python boxes = [[10, 9, 8, 1], [7, 6, 5, 4, 3, 2]] ``` Try and adjust your algorithm to ensure the volition of weights and boxes is maintained.","solution":"def pack_books(weights, num_boxes): Distribute the weights as evenly as possible across the given number of boxes. Parameters: weights (List[int]): List of book weights. num_boxes (int): Number of boxes. Returns: List[List[int]]: A list of lists, where each inner list contains the weights packed into a single box. # Sort weights in descending order sorted_weights = sorted(weights, reverse=True) # Initialize boxes boxes = [[] for _ in range(num_boxes)] box_weights = [0] * num_boxes # Distribute weights for weight in sorted_weights: # Find the box with the least total weight min_index = box_weights.index(min(box_weights)) # Add the current weight to that box boxes[min_index].append(weight) box_weights[min_index] += weight return boxes"},{"question":"Task: Create a class that simulates a simple bank account. This class should be able to perform basic banking operations such as depositing money, withdrawing money, and checking the balance. You should also add a method to record the transaction history and another method to retrieve it. The purpose of this task is to practice class creation, method definition, and basic data manipulation without using any external libraries. Testing: Python: ```python >>> account = BankAccount(\'John Doe\') >>> account.deposit(1000) 1000 >>> account.withdraw(500) 500 >>> account.check_balance() 500 >>> account.transaction_history() [\'Deposited 1000\', \'Withdrew 500\'] ``` The class should contain the following methods: 1. `__init__(self, account_holder)` - Initializes the BankAccount object with `account_holder` and sets the initial balance to 0. 2. `deposit(self, amount)` - Adds `amount` to the account balance and records the transaction. 3. `withdraw(self, amount)` - Subtracts `amount` from the account balance if there are sufficient funds and records the transaction. If not enough funds, it should print \\"Insufficient funds\\". 4. `check_balance(self)` - Returns the current balance of the account. 5. `transaction_history(self)` - Returns a list of all transactions as strings in the format \\"Deposited X\\", \\"Withdrew Y\\".","solution":"class BankAccount: def __init__(self, account_holder): Initializes the BankAccount object for the given account_holder. The initial balance is set to 0. self.account_holder = account_holder self.balance = 0 self.transactions = [] def deposit(self, amount): Adds the specified amount to the account balance and records the transaction. Returns the new balance. self.balance += amount self.transactions.append(f\\"Deposited {amount}\\") return self.balance def withdraw(self, amount): Subtracts the specified amount from the account balance if there are sufficient funds. If there are not sufficient funds, prints \\"Insufficient funds\\". Returns the new balance if withdrawal is successful, otherwise returns the current balance. if amount > self.balance: print(\\"Insufficient funds\\") return self.balance else: self.balance -= amount self.transactions.append(f\\"Withdrew {amount}\\") return self.balance def check_balance(self): Returns the current balance of the account. return self.balance def transaction_history(self): Returns the list of all transactions as strings in the format \\"Deposited X\\", \\"Withdrew Y\\". return self.transactions"},{"question":"Implement a function `top_k_frequent_words(words, k)` that takes a list of strings `words` and an integer `k`. The function should return the `k` most frequent words in the list. If there is a tie, sort the words alphabetically. # Example: ```python print(top_k_frequent_words([\\"hello\\", \\"world\\", \\"hello\\", \\"python\\", \\"world\\", \\"hello\\"], 2)) # Output: [\'hello\', \'world\'] print(top_k_frequent_words([\\"a\\", \\"b\\", \\"a\\", \\"c\\", \\"b\\", \\"a\\"], 3)) # Output: [\'a\', \'b\', \'c\'] ``` # Constraints: - `words` will have at least one word and at most 10^4 words. - All words in the input list are lower-cased alphabetic strings. - `k` is a positive integer less than or equal to the number of unique words in `words`.","solution":"from collections import Counter def top_k_frequent_words(words, k): Returns the k most frequent words in the list \'words\'. If there is a tie, sort the words alphabetically. # Count the frequency of each word count = Counter(words) # Sort words first alphabetically and then by frequency sorted_words = sorted(count.keys(), key=lambda word: (-count[word], word)) # Return the top k words return sorted_words[:k]"},{"question":"Implement a function that reverses the words in a given sentence without changing the order of the words. The input will be a string consisting of words separated by spaces, and the output should be a string with each word individually reversed but still in the same order. For example, given the input string \\"hello world\\", the function should return \\"olleh dlrow\\". # Function Signature ```python def reverse_words_in_sentence(sentence: str) -> str: pass ``` # Example ```python assert reverse_words_in_sentence(\\"hello world\\") == \\"olleh dlrow\\" assert reverse_words_in_sentence(\\"I love Python\\") == \\"I evol nohtyP\\" assert reverse_words_in_sentence(\\"OpenAI is amazing\\") == \\"IAnepO si gnizama\\" ``` # Constraints 1. The function should handle strings of length up to 10^4. 2. The words in the sentence will only contain alphabetical characters. 3. The input string will not contain leading or trailing spaces and there will be exactly one space between words.","solution":"def reverse_words_in_sentence(sentence: str) -> str: Reverses each word in the given sentence but keeps the order of the words unchanged. Args: sentence (str): The input sentence containing words separated by spaces. Returns: str: A string with each word reversed but still in the same order. return \' \'.join(word[::-1] for word in sentence.split())"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. A twin prime is a prime number that is either 2 less or 2 more than another prime number, for example, (11, 13), (17, 19), and (29, 31). A twin prime consists of two prime numbers with a difference of 2. Given an integer `n`, write a function that returns the number of twin prime pairs less than or equal to `n`. If the input is not a positive integer or is less than 2, return \\"Not valid\\". ```python twin_prime_count(10) => 2 # (3, 5) and (5, 7) twin_prime_count(17) => 3 # (3, 5), (5, 7) and (11, 13) twin_prime_count(30) => 4 # (3, 5), (5, 7), (11, 13) and (17, 19) twin_prime_count(1) => \\"Not valid\\" twin_prime_count(\\"10\\") => \\"Not valid\\" ```","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def twin_prime_count(n): Returns the number of twin prime pairs less than or equal to n. if not isinstance(n, int) or n < 2: return \\"Not valid\\" twin_prime_pairs = 0 for i in range(2, n-1): if is_prime(i) and is_prime(i + 2): twin_prime_pairs += 1 return twin_prime_pairs"},{"question":"Write a function called `findLargestIsland` that receives a 2D grid representing a map of water (`0`) and land (`1`). The function should return the size of the largest island. An island is defined as a group of adjacent land cells (horizontally or vertically). The map is represented as a list of lists of integers. **Input:** - A 2D list `grid` of integers where each integer is either `0` (water) or `1` (land). - The dimensions of the grid are at most `50` x `50`. **Output:** - An integer representing the size of the largest island. **Example:** ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 1, 1, 1] ] findLargestIsland(grid) # should return 5 ``` **Explanation:** - The first island in the top left has `4` land cells. - The second island starting at position (1, 3) has `5` land cells. - The island at (3, 1) has `1` land cell. So the function returns `5` because the largest island has `5` land cells.","solution":"def findLargestIsland(grid): def dfs(x, y): # Check if the current cell is out of bounds or water if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return 0 # Mark the current cell as visited grid[x][y] = 0 size = 1 # Visit all 4 adjacent cells size += dfs(x - 1, y) size += dfs(x + 1, y) size += dfs(x, y - 1) size += dfs(x, y + 1) return size max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: # Calculate the size of the current island max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Write a function that takes a string as an input and returns a dictionary with each word as a key and the number of its occurrences as the value. Ignore punctuation and consider words case-insensitively. ```python word_frequency(\\"Hello world! Hello\\") # => {\\"hello\\": 2, \\"world\\": 1} word_frequency(\\"This is a test. This test is only a test.\\") # => {\\"this\\": 2, \\"is\\": 2, \\"a\\": 2, \\"test\\": 3, \\"only\\": 1} word_frequency(\\"Code more, worry less.\\") # => {\\"code\\": 1, \\"more\\": 1, \\"worry\\": 1, \\"less\\": 1} ```","solution":"import re from collections import defaultdict def word_frequency(s): Returns a dictionary with each word as a key and the number of its occurrences as the value. Words are considered case-insensitively and punctuation is ignored. # Convert to lowercase and remove punctuation s = re.sub(r\'[^ws]\', \'\', s).lower() words = s.split() frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"In a far-away land, people use a unique system of calendar days. Each day is represented by a distinct 5-letter code formed by combining two vowels (a, e, i, o, u) and three consonants (any other alphabetic characters). They have a special tradition where they celebrate a \\"Palindrome Day\\" whenever their day code reads the same forward and backward. Your task is to write a function `is_palindrome_day(day_code)` that takes a string `day_code` representing the day\'s code as input and returns `True` if it is a \\"Palindrome Day\\" and `False` otherwise. The input string `day_code` will always be exactly 5 characters long and all alphabetic (no digits, spaces, or special characters). The case of the letters can be mixed, but the comparison should be case-insensitive. Some examples: - `is_palindrome_day(\\"aboba\\")` should return `True` because \\"aboba\\" reads the same forward and backward. - `is_palindrome_day(\\"aeiou\\")` should return `False` because \\"aeiou\\" does not read the same forward and backward. - `is_palindrome_day(\\"deed\\")` should return `False` because a valid day code should have exactly 5 letters.","solution":"def is_palindrome_day(day_code): Checks if the given day_code is a \\"Palindrome Day\\". A \\"Palindrome Day\\" means the code reads the same forward and backward. The comparison is case-insensitive. Args: - day_code (str): The day\'s code represented by a string of exactly 5 alphabetic characters. Returns: - bool: True if the day_code is a palindrome, False otherwise. if len(day_code) != 5: return False # Make the comparison case-insensitive day_code = day_code.lower() # Check if the day_code is the same forward and backward return day_code == day_code[::-1]"},{"question":"Write a function called `sort_by_length` that takes a list of strings `str_list` and returns the list sorted in ascending order based on the length of the strings. If two strings have the same length, they should remain in their original order. #Examples ```python sort_by_length([\\"apple\\", \\"pie\\", \\"shortcake\\"]) returns [\\"pie\\", \\"apple\\", \\"shortcake\\"] sort_by_length([\\"a\\", \\"abc\\", \\"abcd\\", \\"ab\\"]) returns [\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\"] sort_by_length([\\"hello\\", \\"hi\\", \\"hey\\", \\"hola\\"]) returns [\\"hi\\", \\"hey\\", \\"hola\\", \\"hello\\"] ``` #Notes - You can assume that all strings in the input list will be non-empty.","solution":"def sort_by_length(str_list): Sorts the list of strings in ascending order based on the length of the strings. If two strings have the same length, they remain in their original order. Parameters: str_list (list): A list of strings to be sorted. Returns: list: A list of strings sorted by their lengths. return sorted(str_list, key=len)"},{"question":"John is a big fan of space exploration and loves collecting data about different planets. He is curious about a specific habitability score he has devised based on four factors: average temperature (in °C), availability of water (a boolean), atmosphere composition suitability (a decimal value between 0 and 1), and gravitational strength (in m/s^2). The habitability score is calculated using the following formula: (text{temperature score} + text{water score} + text{atmosphere score} + text{gravity score}) / 4 The temperature score is calculated as follows: - If the temperature is between 0°C and 50°C (inclusive), the score is 1. - If the temperature is outside this range, the score is 0. The water score is: - 1 if water is available - 0 if water is not available The atmosphere score is directly given as a decimal between 0 and 1. The gravity score is: - 1 if the gravity is between 9.0 and 11.0 m/s^2 (inclusive) - 0 if the gravity is outside this range Write a function `habitability_score` that takes a dictionary with keys \'temperature\', \'water\', \'atmosphere\' and \'gravity\' and returns the habitability score for that planet as a float rounded to two decimal places. # Example ```python planet = { \\"temperature\\": 25, \\"water\\": True, \\"atmosphere\\": 0.8, \\"gravity\\": 9.8 } habitability_score(planet) # Output: 0.95 ```","solution":"def habitability_score(planet): Returns the habitability score based on the given planet data. Parameters: planet (dict): A dictionary containing the keys \'temperature\', \'water\', \'atmosphere\' and \'gravity\'. Returns: float: The habitability score rounded to two decimal places. temperature_score = 1 if 0 <= planet[\'temperature\'] <= 50 else 0 water_score = 1 if planet[\'water\'] else 0 atmosphere_score = planet[\'atmosphere\'] gravity_score = 1 if 9.0 <= planet[\'gravity\'] <= 11.0 else 0 hab_score = (temperature_score + water_score + atmosphere_score + gravity_score) / 4 return round(hab_score, 2)"},{"question":"Write a function `vowel_count(word1, word2)` that takes in two strings and returns a dictionary with keys `\'word1_vowels\'` and `\'word2_vowels\'`. Each key should have a value representing the number of vowels in the corresponding word. The vowels are `\'a\', \'e\', \'i\', \'o\', \'u\'`. The function should ignore case when counting vowels. Examples: vowel_count(\\"hello\\", \\"world\\") returns {\'word1_vowels\': 2, \'word2_vowels\': 1} vowel_count(\\"Python\\", \\"Programming\\") returns {\'word1_vowels\': 1, \'word2_vowels\': 3} vowel_count(\\"AAAAAAAAAA\\", \\"bbbbbbbbbbb\\") returns {\'word1_vowels\': 10, \'word2_vowels\': 0} vowel_count(\\"apple\\", \\"orange\\") returns {\'word1_vowels\': 2, \'word2_vowels\': 3} vowel_count(\\"\\", \\"ring\\") returns {\'word1_vowels\': 0, \'word2_vowels\': 1}","solution":"def vowel_count(word1, word2): Returns a dictionary with the number of vowels in each of the provided words. vowels = \'aeiou\' word1_vowels_count = sum(1 for char in word1.lower() if char in vowels) word2_vowels_count = sum(1 for char in word2.lower() if char in vowels) return {\'word1_vowels\': word1_vowels_count, \'word2_vowels\': word2_vowels_count}"},{"question":"Alice is interested in exploring sequences and has designed her own unique mathematical sequence based on a few initial parameters. The sequence SEQ takes the following form: You are given an integer X and two functions f1(N) and f2(N): - f1(N): If N is even, f1(N) = N/2. If N is odd, f1(N) = 3*N + 1. - f2(N): If N is even, f2(N) = N/4. If N is odd, f2(N) = 2*N + 1. The sequence generation follows these rules: 1. Initialize the SEQ with the integer X as its first element. 2. Alternately apply f1 and f2 to the last element of SEQ, and append the result to SEQ. 3. Continue the process until you have applied f1 and f2 exactly K times each, adding the output to the sequence. Your task is to construct the SEQ sequence up to 2*K + 1 elements (including the initial element X) and answer Q queries regarding the sequence. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three integers X, K, and Q. - The second line contains Q integers, each representing an index i (0 <= i <= 2*K). -----Output:----- For each query, output the element of the SEQ sequence at position i. -----Constraints----- - 1 leq T leq 10 - 1 leq X leq 1000 - 1 leq K leq 500 - 1 leq Q leq 100 - 0 leq i leq 2*K -----Sample Input:----- 1 7 3 2 0 4 -----Sample Output:----- 7 8 -----EXPLANATION:----- For the single test case: - We start with X = 7 - The sequence evolves as follows: - SEQ = [7] (initial element) - f1(7) = 3*7 + 1 = 22 - SEQ = [7, 22] - f2(22) = 22/4 = 5 (integer division) - SEQ = [7, 22, 5] - f1(5) = 3*5 + 1 = 16 - SEQ = [7, 22, 5, 16] - f2(16) = 16/4 = 4 - SEQ = [7, 22, 5, 16, 4] - f1(4) = 4/2 = 2 - SEQ = [7, 22, 5, 16, 4, 2] - f2(2) = 2/4 = 0 - SEQ = [7, 22, 5, 16, 4, 2, 0] Upon answering the queries: - The value at index 0 is 7 - The value at index 4 is 8","solution":"def f1(N): return N // 2 if N % 2 == 0 else 3 * N + 1 def f2(N): return N // 4 if N % 2 == 0 else 2 * N + 1 def generate_sequence(X, K): sequence = [X] for i in range(K): sequence.append(f1(sequence[-1])) sequence.append(f2(sequence[-1])) return sequence def answer_queries(X, K, queries): sequence = generate_sequence(X, K) return [sequence[i] for i in queries] def process_input(n, args): results = [] line_idx = 0 for _ in range(n): X, K, Q = args[line_idx] queries = args[line_idx + 1] results.append(answer_queries(X, K, queries)) line_idx += 2 return results"},{"question":"Write a function that takes an integer as input and returns the integer in reverse order. If reversing the number causes it to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then the function should return 0. For example, given `x = 123`, return `321`. If `x = -456`, return `-654`. Given `x = 120`, return `21`. If the result exceeds the 32-bit signed integer range, such as reversing `1534236469`, return `0` because the result exceeds the 32-bit limit.","solution":"def reverse_integer(x: int) -> int: Reverses the digits of an integer x. Returns 0 if the reversed integer exceeds the 32-bit signed integer range [-2^31, 2^31 - 1]. sign = -1 if x < 0 else 1 x_abs = abs(x) reversed_x = int(str(x_abs)[::-1]) * sign # 32-bit signed integer range: [-2^31, 2^31 - 1] if reversed_x < -2**31 or reversed_x > 2**31 - 1: return 0 return reversed_x"},{"question":"Matt loves ordering pizzas and is known for his unique topping preferences. He often gets creative with the combinations of toppings on his pizzas. Matt has a list of toppings, and he wants to know how many unique combinations of those toppings he can create. A combination is defined as selecting any number of toppings (including none), without considering the order of toppings. -----Input----- The first line contains a single integer N, denoting the number of available toppings. The second line contains N space-separated strings representing the names of the toppings. -----Output----- Output a single integer, the number of unique combinations of toppings Matt can create. -----Constraints----- - 0 ≤ N ≤ 20 - The topping names will only contain lowercase English letters and will each be at most 10 characters long. -----Example----- Input: 3 pepperoni mushrooms olives Output: 8 Explanation: The unique combinations of the toppings are: 1. None (no toppings) 2. pepperoni 3. mushrooms 4. olives 5. pepperoni, mushrooms 6. pepperoni, olives 7. mushrooms, olives 8. pepperoni, mushrooms, olives Therefore, the total number of unique combinations is 8.","solution":"def count_unique_combinations(n, toppings): Returns the number of unique combinations of toppings. if n == 0: return 1 # Only one combination: the empty combination # The total number of combinations is 2^N return 2**n"},{"question":"Write a function to identify and sum all unique prime numbers in a given list of integers. The input list will not contain any repeating numbers, and all elements will be valid integers. ```python sum_primes([2, 3, 5, 7, 11, 13]) # => 41 sum_primes([4, 6, 8, 10, 12]) # => 0 sum_primes([17, 29, 1, 4, -3, 22, 37]) # => 83 ```","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_primes(lst): Returns the sum of all unique prime numbers in the given list of integers. return sum(x for x in lst if is_prime(x))"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to determine if the list forms a strictly increasing sequence. A sequence of numbers is strictly increasing if each number is greater than the preceding one. =====Input Format===== The first line contains an integer N, representing the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. =====Constraints===== 1 <= N <= 1000 -10^6 <= A[i] <= 10^6 =====Output Format===== Print \\"True\\" if the list forms a strictly increasing sequence. Otherwise, print \\"False\\". =====Sample Input===== 5 1 2 3 4 5 =====Sample Output===== True =====Explanation===== In the given example, each integer in the sequence is greater than the previous one, making it a strictly increasing sequence. Hence, the output is \\"True\\".","solution":"def is_strictly_increasing(sequence): Determines if the given list forms a strictly increasing sequence. Parameters: sequence (list of int): A list of integers. Returns: bool: True if the list is strictly increasing, False otherwise. for i in range(1, len(sequence)): if sequence[i] <= sequence[i - 1]: return False return True"},{"question":"Description Write a function that receives an array of integers and returns the length of the longest contiguous subarray where all elements are equal. **Function Signature** ```python def longest_equal_subarray(arr: List[int]) -> int: pass ``` **Input** - `arr`: A list of integers (1 ≤ len(arr) ≤ 10000) **Output** - An integer representing the length of the longest contiguous subarray with equal elements. # Constraints - The array will contain at least one element. - The integers in the array can be positive, negative, or zero. **Examples** ``` longest_equal_subarray([1, 1, 2, 2, 2, 3, 3, 3, 3]) returns 4 longest_equal_subarray([4, 4, 4, 4, 4, 4, 4, 4, 4]) returns 9 longest_equal_subarray([5, 5, 5, 1, 2, 3, 4]) returns 3 longest_equal_subarray([1]) returns 1 longest_equal_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9]) returns 1 ``` # Note - In the first example, the longest contiguous subarray with equal elements is `[3, 3, 3, 3]`, which has a length of 4. - In the second example, the entire array consists of equal elements `[4, 4, 4, 4, 4, 4, 4, 4, 4]`, so the length is 9. - In the third example, the longest contiguous subarray with equal elements is `[5, 5, 5]`, which has a length of 3.","solution":"from typing import List def longest_equal_subarray(arr: List[int]) -> int: Returns the length of the longest contiguous subarray where all elements are equal. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Final check in case the longest subarray is at the end max_length = max(max_length, current_length) return max_length"},{"question":"# Reverse Words in a String Write a function that takes a sentence as input and returns a new sentence with the order of characters in each word reversed, but the order of words remains unchanged. **E.g. Input: \\"The quick brown fox\\" => Output: \\"ehT kciuq nworb xof\\"** *Note: The sentence will not contain any punctuation and will have at least one word.*","solution":"def reverse_words_in_sentence(sentence): Reverses the characters in each word of the sentence, but keeps the order of words. Parameters: sentence (str): The input sentence. Returns: str: The transformed sentence with characters in each word reversed. words = sentence.split() reversed_words = [\'\'.join(reversed(word)) for word in words] return \' \'.join(reversed_words)"},{"question":"# Description: Given a list of integers where each integer appears exactly twice except for one integer that appears exactly once, write a function that finds the integer which appears only once. # Notes: * The function should have a linear runtime complexity. * You must implement it using only constant extra space. # Input: * A list of integers, `nums`. # Output: * The integer that appears only once. ___ Examples ``` single_number([2, 2, 1]) === 1 single_number([4, 1, 2, 1, 2]) === 4 single_number([1]) === 1 ``` # Constraints: * `1 <= nums.length <= 3 * 10^4` * `-3 * 10^4 <= nums[i] <= 3 * 10^4` * Each element in the list appears twice except for one element which appears only once.","solution":"def single_number(nums): Finds the integer which appears only once in a list where every other integer appears exactly twice. Args: nums (list): List of integers. Returns: int: The integer that appears only once. result = 0 for num in nums: result ^= num return result"},{"question":"Imagine that you have an n x n grid representing a game board. Each cell can either be empty (represented by 0) or contain an obstacle (represented by 1). A player standing in the top-left corner (0, 0) can move right or down through empty cells to reach the bottom-right corner (n-1, n-1). However, the player can only move right one step at a time or move down one step at a time, and they cannot pass through cells with obstacles. Write a function that takes the game board as an input and returns the number of distinct paths from the top-left corner to the bottom-right corner that avoid all obstacles. If there is no valid path, return 0. Example: ``` Input: [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two distinct paths from (0, 0) to (2, 2): 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ```","solution":"def uniquePathsWithObstacles(obstacleGrid): Returns the number of unique paths from top-left to bottom-right of the grid avoiding obstacles. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 n = len(obstacleGrid) m = len(obstacleGrid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"A new question that matches the style, length, difficulty level, and topic alignment of the given sample question is as follows: A robot is located at the top-left corner of a m x n grid (marked \'Start\' in the grid below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the grid below). Along the way, there may be obstacles in some cells - the obstacle cells are marked with a 1 and empty cells are marked with a 0. Given the grid, count all possible unique paths from the start to the finish. Note: The robot cannot move through obstacle cells. Example 1: Input: grid = [ [0,0,0], [0,1,0], [0,0,0] ] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid, which divides the paths. The two paths that the robot can take are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [ [0,1], [0,0] ] Output: 1 Explanation: There is one obstacle in the grid. The only path available is down -> right. Constraints: - m == grid.length - n == grid[0].length - 1 <= m, n <= 100 - grid[i][j] is 0 or 1","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid, avoiding obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an array of n integers. A subarray is any contiguous part of an array. We define a subarray as good if the sum of the elements in the subarray is non-zero and is divisible by a given integer k. You have to answer q queries, where in each query you will be given an integer k, and you need to determine the number of good subarrays that are divisible by k. -----Input:----- - First line contains 2 integers: the size of the array n and the number of queries q. - Next line contains n integers representing the elements of the array. - Next q lines each contain an integer k for which you need to find the number of good subarrays divisible by k. -----Output:----- For each query, output in a single line the number of good subarrays divisible by k. -----Constraints----- - 1 ≤ n ≤ 1000 - -10^5 ≤ array elements ≤ 10^5 - 1 ≤ q ≤ 100 - 1 ≤ k ≤ 10^5 -----Sample Input:----- 5 2 1 2 -1 2 3 2 3 -----Sample Output:----- 6 4 -----EXPLANATION:----- For k=2, the good subarrays divisible by 2 are: - [1, 2, -1] -> sum = 2 - [2] -> sum = 2 - [-1, 2, 3] -> sum = 4 - [2, -1, 2, 3] -> sum = 6 - [2, 3] -> sum = 5 - [1, 2, -1, 2, 3] -> sum = 7 (Note: subarray sums are recognized modulo `k` to handle large sums.) For k=3, the good subarrays are: - [1, 2] -> sum = 3 - [-1, 2, 3] -> sum = 4 - [2, -1, 2] -> sum = 3 - [1, 2, -1, 2] -> sum = 4","solution":"def count_good_subarrays(array, q, queries): results = [] for k in queries: count = 0 n = len(array) for i in range(n): sum_ = 0 for j in range(i, n): sum_ += array[j] if sum_ != 0 and sum_ % k == 0: count += 1 results.append(count) return results"},{"question":"Write a function that takes a list of integers and a target sum as input and returns `true` if there are any two distinct numbers in the list that add up to the target sum, otherwise return `false`. About finding pairs For example, in the list `[1, 2, 3, 4]`, the numbers 1 and 3 can be paired to make 4 while 2 and 2 (though summing to 4) cannot be paired because they are not distinct. - You can use nested loops to compare each pair of numbers. - Alternatively, you can use a more optimized approach such as using a set or dictionary to keep track of the required complements. Edge cases to consider: - If the list contains fewer than 2 elements, the function should return `false` as there aren\'t enough numbers to form a pair. - If the same element can be used twice to reach the target, the function should return `false` for non-distinct pairs. Example: ```python Input: ([1, 2, 3, 4], 5) Output: `true` Explanation: The pair (1, 4) adds up to 5. Input: ([1, 2, 3, 4], 8) Output: `false` Explanation: There are no pairs that add up to 8. Input: ([1, 2, 3, 4], 10) Output: `false` Explanation: There are no pairs that add up to 10. ```","solution":"def has_pair_with_sum(nums, target): Returns true if there are two distinct numbers in the list that add up to the target sum. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"A company organizes an annual coding competition and wants to rank the participants based on their scores. Each participant can submit up to M submissions, but only their highest score will be considered for the final ranking. If two participants have the same highest score, they should be ranked based on the time of their highest score submission—the earlier the submission, the higher the rank. You are given N participants and their scores along with the time of each submission. For each participant, determine their best possible rank. -----Input----- - The first line contains two integers N (number of participants) and M (maximum number of submissions per participant). - Each of the next N lines contains M pairs representing the submissions of a participant. Each pair consists of an integer S_{ij} (score of the submission) and T_{ij} (time of the submission), where S_{ij} is the score of the j-th submission of the i-th participant and T_{ij} is the time of the j-th submission. - It is guaranteed that scores and times are distinct. -----Output----- - Output N lines, each containing the rank of a participant in the order of their input. -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 100 - 0 leq S_{ij} leq 10^6 - 1 leq T_{ij} leq 10^6 -----Sample Input----- 3 3 100 5 150 10 120 15 200 12 180 9 250 20 90 2 110 4 85 1 -----Sample Output----- 2 1 3 -----Explanation----- For the participants: 1. The first participant has submissions [(100, 5), (150, 10), (120, 15)]. The best score is 150 at time 10. 2. The second participant has submissions [(200, 12), (180, 9), (250, 20)]. The best score is 250 at time 20. 3. The third participant has submissions [(90, 2), (110, 4), (85, 1)]. The best score is 110 at time 4. The rankings are determined by the highest scores first and the earliest times in case of ties: 1. Second participant with a score of 250 at time 20 → rank 1 2. First participant with a score of 150 at time 10 → rank 2 3. Third participant with a score of 110 at time 4 → rank 3","solution":"def rank_participants(N, M, submissions): # Create a list to store (max_score, time_of_max_score, original_index) max_scores = [] for i in range(N): max_score, time_of_max_score = max(submissions[i], key=lambda x: (x[0], -x[1])) max_scores.append((max_score, time_of_max_score, i)) # Sort by max_score (descending) and by time_of_max_score (ascending) for ties max_scores.sort(key=lambda x: (-x[0], x[1])) # Assign ranks based on sorted order ranks = [0] * N for rank, (_, _, original_index) in enumerate(max_scores): ranks[original_index] = rank + 1 return ranks"},{"question":"You are given a list of integers where each integer represents the price of a stock on a given day. You want to identify the maximum profit you can achieve by making at most one buy and one sell operation. However, you must ensure that the buy operation occurs before the sell operation. Write a function that takes in a list of stock prices and returns the maximum profit you can achieve from one transaction. If no profit can be achieved, return 0. -----Input----- The input consists of a single list of integers, prices, where 1 ≤ len(prices) ≤ 10^5 and each element, price, satisfies 1 ≤ price ≤ 10^9. -----Output----- Output a single integer, the maximum profit you can achieve. If no profit can be obtained, print 0. -----Examples----- Input [7, 1, 5, 3, 6, 4] Output 5 Input [7, 6, 4, 3, 1] Output 0 -----Explanation----- In the first example, the optimal buy-sell pair would be buying at price 1 (second day) and selling at price 6 (fifth day) to achieve a maximum profit of 5. In the second example, since the prices are continuously decreasing, no profit can be achieved, and hence the output is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from one buy-sell transaction. If no profit can be achieved, returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Calculate the profit if stock sold at the current price profit = price - min_price # Update the max profit if the current profit is higher if profit > max_profit: max_profit = profit # Update the min price if the current price is lower if price < min_price: min_price = price return max_profit"},{"question":"Given a list of meeting time intervals consisting of start and end times `[[s1,e1],[s2,e2],...]` (where s1,e1,s2,e2 are non-negative integers), write a function that finds the minimum number of meeting rooms required. Function Signature ```python def minMeetingRooms(intervals: List[List[int]]) -> int: ``` Examples ```python assert minMeetingRooms([[0, 30],[5, 10],[15, 20]]) == 2 assert minMeetingRooms([[7,10],[2,4]]) == 1 ``` Constraints - The function should run in O(n log n) time complexity, where n is the number of intervals. - The input list intervals can have at most 10^4 intervals. - Each interval [si, ei] will have 0 <= si < ei <= 10^6. Approach 1. If the list of intervals is empty, return 0. 2. Sort the intervals by their start times. 3. Utilize a min-heap to keep track of end times of meetings. 4. Iterate through each interval. - If the heap is not empty and the start time of the current meeting is greater than or equal to the end time of the meeting at the top of the heap, pop the heap. - Push the end time of the current meeting to the heap. 5. The size of the heap will be the number of meeting rooms required. You need to implement the `minMeetingRooms` function that computes this using the described approach.","solution":"from typing import List import heapq def minMeetingRooms(intervals: List[List[int]]) -> int: if not intervals: return 0 # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Use a heap to keep track of the end times of meetings heap = [] # Start with the first meeting\'s end time heapq.heappush(heap, intervals[0][1]) for i in range(1, len(intervals)): # Check if the room due to free the earliest is free before the next meeting starts if intervals[i][0] >= heap[0]: heapq.heappop(heap) # Add the current meeting\'s end time to the heap heapq.heappush(heap, intervals[i][1]) # The size of the heap is the number of rooms required return len(heap)"},{"question":"Write a function `matrix_spiral_print` that takes a 2D list `matrix` as an input and returns a list of its elements arranged in a clockwise spiral order starting from the top-left corner. # Input - `matrix`: a list of lists of integers, where each inner list represents a row of the matrix. # Output - A list of integers containing the elements of the matrix in spiral order. # Examples Example 1: ```python matrix = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] matrix_spiral_print(matrix) ``` **Output:** ```python [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Example 2: ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] matrix_spiral_print(matrix) ``` **Output:** ```python [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ``` # Constraints - The matrix may have different numbers of rows and columns. - The matrix will have at least one row and one column.","solution":"def matrix_spiral_print(matrix): Given a 2D list matrix, returns a list of its elements arranged in a clockwise spiral order. if not matrix: return [] spiral_order = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for i in range(left, right + 1): spiral_order.append(matrix[top][i]) top += 1 # Traverse from top to bottom along the right column for i in range(top, bottom + 1): spiral_order.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for i in range(right, left - 1, -1): spiral_order.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for i in range(bottom, top - 1, -1): spiral_order.append(matrix[i][left]) left += 1 return spiral_order"},{"question":"You have a list of integers where each integer is repeated twice except for one integer which appears only once. Write a function to identify and return the integer that appears only once. Example: ``` lst = [2, 3, 5, 2, 3, 6, 6] ``` Output: ``` 5 ``` You must complete this problem with O(n) time complexity and O(1) space complexity. Assure that the input list always contains one unique element and the list size is between 1 and 300, inclusive. You can use any programming language to solve this problem. Enjoy coding!","solution":"def find_unique_element(lst): Finds the element that appears only once in the list where every other element appears twice. Args: lst (list): A list of integers with exactly one unique element and all other elements appearing twice. Returns: int: The element that appears only once. unique = 0 for num in lst: unique ^= num return unique"},{"question":"Alex has recently learned about prime numbers and wants to create a binary array that indicates whether a number is prime or not. Given a number N, he needs to construct a binary array of length N+1 (i.e., indexed from 0 to N), where each position i in the array will have the value 1 if i is a prime number and 0 otherwise. Help Alex create such an array efficiently. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. -----Output----- For each test case, print a single line containing N+1 space-separated integers representing the binary array. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 -----Example Input----- 2 10 5 -----Example Output----- 0 0 1 1 0 1 0 1 0 0 0 0 0 1 1 0 1 -----Note----- - Prime numbers are numbers greater than 1 with no divisors other than 1 and themselves. - For the first test case, the binary array for N = 10 is ``0 0 1 1 0 1 0 1 0 0 0`` where the positions 2, 3, 5, and 7 are marked with 1 as they are prime numbers, and all other positions are marked with 0.","solution":"def sieve_of_eratosthenes(max_num): Function to create a boolean array where True represents that the index is a prime number. is_prime = [True] * (max_num + 1) is_prime[0], is_prime[1] = False, False p = 2 while p * p <= max_num: if is_prime[p]: for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 return [int(flag) for flag in is_prime] def generate_prime_binary_arrays(T, test_cases): Function to generate the prime binary arrays for given list of N values max_n = max(test_cases) # Find the maximum N to generate the sieve once. prime_array = sieve_of_eratosthenes(max_n) results = [] for N in test_cases: results.append(\\" \\".join(map(str, prime_array[:N + 1]))) return results"},{"question":"You are given a list of integers, where each integer represents a certain height. You need to identify the longest increasing subsequence of heights. A subsequence is a sequence derived by deleting some or no elements from the original sequence without changing the order of the remaining elements. For example, in the sequence ```[10, 9, 2, 5, 3, 7, 101, 18]```, the longest increasing subsequence is ```[2, 3, 7, 101]```, and thus the length is 4. Write a function that returns the length of the longest increasing subsequence. ```Input```: A list of integers. ```Output```: An integer representing the length of the longest increasing subsequence. Example: ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3 ```","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the given list of integers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Story&Task You are given a list of temperatures recorded over a number of days. A temperature is considered \\"abnormal\\" if it is strictly higher than any of the temperatures recorded on all previous days. For each day, the weather station wants to know if the temperature recorded that day is abnormal. # Input/Output - `[input]` integer array `temperatures` An array of integers representing temperatures recorded over consecutive days. `1 ≤ temperatures.length ≤ 1000` - `[output]` a boolean array An array containing boolean values, where the ith element is `true` if the temperature on the ith day is abnormal, `false` otherwise. # Example For `temperatures = [70, 72, 68, 74, 71]`, the output should be `[true, true, false, true, false]`. ``` For temperatures[0], it’s the first day, so it\'s abnormal. For temperatures[1], 72 > 70, so it\'s abnormal. For temperatures[2], 68 < 72, so it\'s not abnormal. For temperatures[3], 74 > all previous temperatures, so it\'s abnormal. For temperatures[4], 71 < 74, so it\'s not abnormal. ```","solution":"def is_abnormal_temperature(temperatures): Determines if each recorded temperature is abnormal. if not temperatures: return [] max_temp_so_far = float(\'-inf\') result = [] for temp in temperatures: if temp > max_temp_so_far: result.append(True) max_temp_so_far = temp else: result.append(False) return result"},{"question":"# Reversed Words Jonathan has recently started learning Python and he is fascinated by the ways it can manipulate strings. As he was practicing, he stumbled upon a problem. He needs your help to write a function that reverses the words in a given sentence. Task Write a function, `reverse_words`, that takes a string `sentence` as an argument. The function should reverse the order of the words in the string while keeping the words themselves intact. # Example Input: ```python reverse_words(\\"The quick brown fox jumps over the lazy dog\\") ``` Output: ```python \\"dog lazy the over jumps fox brown quick The\\" ``` # Input - `sentence`: A string containing words separated by spaces. The string will not be empty and will not start or end with a space. # Output - A string representing the sentence with the words in the reverse order. # Note - You can assume every word in the sentence is separated by a single space. # Constraints - The input string will have at most 1000 characters. # Function Signature ```python def reverse_words(sentence: str) -> str: ```","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in a given sentence while keeping the words unchanged. Args: sentence (str): A string containing words separated by spaces. Returns: str: A string with the order of words reversed. words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) return reversed_sentence"},{"question":"You are a gardener with a garden of N plants arranged in a straight line, each having a positive integer height h_1, h_2, ldots, h_N. You can perform the following operation any number of times (possibly zero): - Choose two distinct plants i and j (where 1 le i, j le N) such that their heights are equal, i.e., h_i = h_j. - Swap the positions of these two plants. What is the maximum number of plants you can arrange consecutively in non-decreasing order in the garden using zero or more operations? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers h_1, h_2, ldots, h_N. -----Output----- For each test case, print a single line containing one integer ― the maximum number of plants that can be arranged consecutively in non-decreasing order. -----Constraints----- - 1 le T le 500 - 1 le N le 300,000 - 1 le h_i le 10^9 for each valid i - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 5 4 3 2 3 4 4 1 2 2 1 6 1 5 2 4 3 6 -----Example Output----- 5 4 3 -----Explanation----- Example case 1: We can swap the two plants with height 3, resulting in the sequence [4, 3, 3, 2, 4]. Then, we can swap the two plants with height 4, resulting in the sequence [4, 3, 3, 4, 2]. Now we can have the sequence [2, 3, 3, 4, 4] with all 5 plants in non-decreasing order. Example case 2: The sequence is already able to have all plants arranged in non-decreasing order after one swap: [1, 1, 2, 2]. Example case 3: The best arrangement we can achieve is [1, 2, 3], which consists of 3 plants in non-decreasing order.","solution":"def max_consecutive_non_decreasing_plants(T, test_cases): results = [] for N, heights in test_cases: heights.sort() results.append(N) # A sorted list is inherently non-decreasing return results"},{"question":"Write a function `is_valid_parenthesis` that determines if the given string consisting of only characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a valid string. A string is considered valid if: 1. Every opening bracket (\'(\', \'{\', \'[\') has a corresponding closing bracket (\')\', \'}\', \']\'). 2. The brackets are properly nested. Your function should return `True` if the string is valid, and `False` otherwise. * You may assume the input string is non-empty. # Examples: ```python is_valid_parenthesis(\\"()\\") => True is_valid_parenthesis(\\"()[]{}\\") => True is_valid_parenthesis(\\"(]\\") => False is_valid_parenthesis(\\"([)]\\") => False is_valid_parenthesis(\\"{[]}\\") => True ``` # Note: - The input is always a string containing only these characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - You should validate that each opening bracket has a corresponding closing bracket in the correct order and nesting.","solution":"def is_valid_parenthesis(s): Determines if the given string of parentheses is valid. :param s: str - The string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\' :return: bool - True if the string is valid, False otherwise stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an array of non-negative integers representing the amount of money of each house arranged in a row. A thief wants to rob houses, but he cannot rob two consecutive houses because the police will be alerted. Write a function `rob` that returns the maximum amount of money the thief can rob tonight without alerting the police. Example: Given nums = [2, 7, 9, 3, 1] rob(nums) -> 12 (rob house 1 (money = 2) and then rob house 3 (money = 9) and then rob house 5 (money = 1) for a total amount of 2 + 9 + 1 = 12) Note: - You may assume the number of houses is less than or equal to 100. - Non-negative integers representing the amount of money of each house are less than or equal to 4000.","solution":"def rob(nums): Returns the maximum amount of money the thief can rob tonight without alerting the police. Args: nums (list of int): List of non-negative integers representing the amount of money of each house. Returns: int: Maximum amount of money that can be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0], nums[1]) dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i-1], nums[i] + dp[i-2]) return dp[-1]"},{"question":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. Function Signature: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode: ``` Notes: - The input linked lists provided are not empty. - Each node in the linked list can be defined using the `ListNode` class provided. - Return the resulting linked list in the same format (reverse order).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode: dummy_head = ListNode() current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Emma is designing a weather prediction system and needs some functions to help analyze temperature data. First, write a function that takes a list of recorded temperatures for a day and returns the highest and lowest temperatures recorded during the day. The result should be a tuple in the format (highest_temperature, lowest_temperature). Second, write a function that takes a list of temperatures recorded every day for a month and returns a list with the average temperature for each week. Assume each week consists of exactly 7 days, and there are no partial weeks in the data. The result should be a list of floats where each float represents the average temperature of a corresponding week rounded to 2 decimal places. PLEASE NOTE: Input temperatures can have decimals and the returned averages must be rounded to 2 decimal places.","solution":"from typing import List, Tuple def daily_temperature_range(temperatures: List[float]) -> Tuple[float, float]: Returns the highest and lowest temperatures recorded during the day. if not temperatures: raise ValueError(\\"Temperatures list should not be empty.\\") highest_temperature = max(temperatures) lowest_temperature = min(temperatures) return (highest_temperature, lowest_temperature) def weekly_average_temperatures(temperatures: List[float]) -> List[float]: Returns a list with the average temperature for each week. if len(temperatures) % 7 != 0: raise ValueError(\\"The number of temperatures must be a multiple of 7.\\") weeks = [temperatures[i:i+7] for i in range(0, len(temperatures), 7)] weekly_averages = [round(sum(week) / len(week), 2) for week in weeks] return weekly_averages"},{"question":"Given a list of integers, write a program to find the sum of all prime numbers in the list. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a list of space-separated integers. -----Output----- For each test case, display the sum of all prime numbers in the given list in a new line. If there are no prime numbers, display 0. -----Constraints----- - 1 ≤ T ≤ 100 - Each list contains at least 1 and at most 100 integers. - Each integer in the list is between 1 and 1000. -----Example----- Input 3 10 15 3 7 2 4 6 8 10 5 11 13 17 Output 10 2 46","solution":"import math def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def sum_of_primes(nums): Returns the sum of all prime numbers in the list nums. return sum(num for num in nums if is_prime(num)) def process_input(test_cases): For each test case, compute the sum of prime numbers and return the results. results = [] for nums in test_cases: results.append(sum_of_primes(nums)) return results"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to find all unique pairs in the array whose sum is equal to `k`. Each input pair should be sorted in ascending order and the output should be a list of these pairs sorted lexicographically. -----Function Signature----- ```python def find_pairs(nums: List[int], k: int) -> List[Tuple[int, int]]: pass ``` -----Input----- - `nums`: a list of integers where -10^4 <= nums[i] <= 10^4 - `k`: an integer where -10^4 <= k <= 10^4 -----Output----- - A list of tuples containing all unique pairs that sum up to k, sorted lexicographically. -----Example----- ```python nums = [1, 5, 3, 6, 8, -1, -3, 2, 7, 1] k = 7 print(find_pairs(nums, k)) ``` Output: ``` [(-1, 8), (1, 6), (2, 5)] ``` -----Explanation----- - The pairs that sum up to 7 are (1, 6), (5, 2), and (-1, 8). Each pair is sorted internally before being added to the final list. - The final output is sorted lexicographically: [(-1, 8), (1, 6), (2, 5)].","solution":"from typing import List, Tuple def find_pairs(nums: List[int], k: int) -> List[Tuple[int, int]]: seen = set() output = set() for num in nums: target = k - num if target in seen: output.add(tuple(sorted((num, target)))) seen.add(num) return sorted(output)"},{"question":"In a certain city, the local traffic authority uses a specific system to manage traffic lights at numerous intersections. At each intersection, traffic from multiple directions converges, and the traffic lights control the flow of all vehicles. Each traffic light has a cycle, transitioning through three states: Green, Yellow, and Red. However, the traffic light system has malfunctioned, causing lights to remain in one state longer than they should, leading to traffic congestion. Your task is to create an automated script that will help identify intervals where traffic lights have gone beyond their optimal states. Your task Given an instance `traffic_light`, with a `.state()` method that returns the current state of the light as a string (`\\"Green\\"`, `\\"Yellow\\"`, or `\\"Red\\"`) and a `.transition()` method that moves the light to the next state in its cycle. The cycle order is Green → Yellow → Red → Green. You will be provided with a list of tuples representing the optimal time intervals for each state: `[(\\"Green\\", g_time), (\\"Yellow\\", y_time), (\\"Red\\", r_time)]`, where `g_time`, `y_time`, and `r_time` are positive integers indicating the optimal duration (in seconds) that the light should remain in each state. Your task is to write a function `monitor_traffic_light(traffic_light, optimal_times, max_checks)` that continuously checks the state of the `traffic_light` and transitions it through its cycle. The function should return a list of tuples representing any states that exceed their optimal duration along with the amount of time they were in excess. The function should stop after `max_checks` state checks, and you can assume that transition time between states is negligible. Examples ```python traffic_light = TrafficLight() optimal_times = [(\\"Green\\", 10), (\\"Yellow\\", 2), (\\"Red\\", 7)] max_checks = 30 result = monitor_traffic_light(traffic_light, optimal_times, max_checks) # Sample Output: [(\\"Green\\", 12), (\\"Yellow\\", 3)] ``` Notes - The `traffic_light` object may sometimes stay in a state longer or shorter than expected due to the malfunction. - The result should only include states where an excess duration was observed. - The function will be tested under various scenarios and durations of traffic light states, so make sure your logic is robust. - Each state should be checked and transitioned sequentially until `max_checks` are exhausted.","solution":"def monitor_traffic_light(traffic_light, optimal_times, max_checks): Monitors the traffic light states and records any states exceeding their optimal duration. Parameters: traffic_light (object): The traffic light instance with state() and transition() methods. optimal_times (list of tuples): List containing optimal time intervals for each state. max_checks (int): Maximum number of state checks to perform. Returns: List of tuples representing states exceeding their optimal duration along with excess time. state_index = 0 current_state, optimal_duration = optimal_times[state_index] exceeding_times = [] current_duration = 0 for _ in range(max_checks): # Check the current state if traffic_light.state() == current_state: current_duration += 1 else: # Check if the current state exceeded its optimal duration if current_duration > optimal_duration: exceeding_times.append((current_state, current_duration)) # Move to the next state in the cycle state_index = (state_index + 1) % len(optimal_times) current_state, optimal_duration = optimal_times[state_index] current_duration = 1 # Reset the current state duration traffic_light.transition() # Final check for the last state if current_duration > optimal_duration: exceeding_times.append((current_state, current_duration)) return exceeding_times"},{"question":"Create a function named **calc_stats** that takes a string of comma-separated floating point numbers as input and returns a dictionary with the minimum, maximum, mean, and median of the numbers provided. You must compute these statistics without using any library functions for statistics or sorting. Format your dictionary as follows: ```python { \'min\': minimum_value, \'max\': maximum_value, \'mean\': mean_value, \'median\': median_value } ``` # Examples ```python calc_stats(\\"1.0,2.5,3.5,4.0\\") returns {\'min\': 1.0, \'max\': 4.0, \'mean\': 2.75, \'median\': 3.0} calc_stats(\\"11.5,0.5,5.5,2.0,8.5\\") returns {\'min\': 0.5, \'max\': 11.5, \'mean\': 5.6, \'median\': 5.5} calc_stats(\\"5.0,4.0,3.0,2.0,1.0\\") returns {\'min\': 1.0, \'max\': 5.0, \'mean\': 3.0, \'median\': 3.0} ```","solution":"def calc_stats(numbers): Given a string of comma-separated floating point numbers, this function returns a dictionary with the minimum, maximum, mean, and median of the numbers. # Convert input string to list of floats numbers = [float(num) for num in numbers.split(\\",\\")] # Function to compute mean def compute_mean(nums): total = 0 for num in nums: total += num return total / len(nums) # Function to find minimum and maximum def find_min_max(nums): min_val = nums[0] max_val = nums[0] for num in nums: if num < min_val: min_val = num if num > max_val: max_val = num return min_val, max_val # Function to compute median (without sorting library function) def compute_median(nums): # Using a simple bubble sort to sort the list n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] middle = n // 2 if n % 2 == 0: return (nums[middle - 1] + nums[middle]) / 2.0 else: return nums[middle] min_val, max_val = find_min_max(numbers) mean_val = compute_mean(numbers) median_val = compute_median(numbers) return { \'min\': min_val, \'max\': max_val, \'mean\': mean_val, \'median\': median_val }"},{"question":"Given an array of integers, you need to find the maximum product of two distinct elements in the array. Example: Input: [3, 4, 5, 2] Output: 20 Explanation: The maximum product is achieved by multiplying 4 and 5, resulting in 20. Input: [1, 5, 4, 5] Output: 25 Explanation: The maximum product is achieved by multiplying 5 and 5, resulting in 25.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct elements in the array. if len(arr) < 2: raise ValueError(\\"Array must have at least two elements\\") arr = sorted(arr, reverse=True) return arr[0] * arr[1]"},{"question":"Write a function that takes a string and returns a new string with the words in reverse order. Each word in the original string is separated by a single space, and there are no leading or trailing spaces in the input string. You are not allowed to use any built-in string manipulation functions like `split`, `reverse`, or `join`.","solution":"def reverse_words(s): Takes a string and returns a new string with the words in reverse order. Words in the input string are separated by a single space. # identifying space characters between words words = [] word = \\"\\" for char in s: if char != \\" \\": word += char else: words.append(word) word = \\"\\" words.append(word) # reversing the order of words start, end = 0, len(words) - 1 while start < end: words[start], words[end] = words[end], words[start] start += 1 end -= 1 # building the result string result = \\"\\" for word in words: if result: result += \\" \\" result += word return result"},{"question":"Given a list of integers `nums`, return the smallest positive integer missing from the array. In other words, find the smallest positive integer that does not appear in `nums`. You must implement an algorithm that runs in O(n) time and uses constant extra space. Examples: Example 1: Input: nums = [1, 2, 0] Output: 3 Example 2: Input: nums = [3, 4, -1, 1] Output: 2 Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Example 4: Input: nums = [] Output: 1 Example 5: Input: nums = [1] Output: 2 Note: 1. 0 <= nums.length <= 300 2. -2^31 <= nums[i] <= 2^31 - 1","solution":"def first_missing_positive(nums): Returns the smallest positive integer missing from the array. n = len(nums) # Move every positive number to it\'s correct position if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Now all positive numbers within the range 1 to n should be at their correct position for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Lena is throwing a party and wants to arrange the chairs in a row such that no two adjacent guests share a common interest. Given a list of guests, where each guest has a unique ID and a set of interests, help Lena find out whether it\'s possible to arrange the guests accordingly. Each guest is represented as a tuple (ID, interests). Return `YES` if it\'s possible to arrange the guests as per the requirement, otherwise return `NO`. # Examples: ```csharp List<(int, HashSet<string>)> guests = new List<(int, HashSet<string>)> { (1, new HashSet<string> {\\"a\\", \\"b\\"}), (2, new HashSet<string> {\\"b\\", \\"c\\"}), (3, new HashSet<string> {\\"a\\", \\"d\\"}) }; Party.CanArrange(guests) // => YES ``` ```python guests = [ (1, {\\"a\\", \\"b\\"}), (2, {\\"b\\", \\"c\\"}), (3, {\\"a\\", \\"d\\"}) ] can_arrange(guests) # => YES ``` ```cpp std::vector<std::pair<int, std::unordered_set<std::string>>> guests = { {1, {\\"a\\", \\"b\\"}}, {2, {\\"b\\", \\"c\\"}}, {3, {\\"a\\", \\"d\\"}} }; Party::canArrange(guests) // => YES ``` ```csharp List<(int, HashSet<string>)> guests = new List<(int, HashSet<string>)> { (1, new HashSet<string> {\\"a\\", \\"b\\"}), (2, new HashSet<string> {\\"a\\", \\"c\\"}), (3, new HashSet<string> {\\"a\\", \\"d\\"}) }; Party.CanArrange(guests) // => NO ``` ```python guests = [ (1, {\\"a\\", \\"b\\"}), (2, {\\"a\\", \\"c\\"}), (3, {\\"a\\", \\"d\\"}) ] can_arrange(guests) # => NO ``` ```cpp std::vector<std::pair<int, std::unordered_set<std::string>>> guests = { {1, {\\"a\\", \\"b\\"}}, {2, {\\"a\\", \\"c\\"}}, {3, {\\"a\\", \\"d\\"}} }; Party::canArrange(guests) // => NO ```","solution":"def can_arrange(guests): Checks if it is possible to arrange guests in a row such that no two adjacent guests share a common interest. :param guests: List of tuples. Each tuple contains an ID and a set of interests. :return: \'YES\' if arrangement is possible, otherwise \'NO\'. from collections import defaultdict, deque # Edge case: if there\'s no guest or only one guest, return \'YES\' if len(guests) <= 1: return \'YES\' interests_to_guests = defaultdict(list) # Map each interest to the list of guests for guest_id, interests in guests: for interest in interests: interests_to_guests[interest].append(guest_id) # Create graph adjacency list graph = defaultdict(list) for interest, guest_ids in interests_to_guests.items(): for i, guest_id in enumerate(guest_ids): for j in range(i + 1, len(guest_ids)): graph[guest_id].append(guest_ids[j]) graph[guest_ids[j]].append(guest_id) # Coloring the graph (Bipartite check) color = {} for guest_id in graph: if guest_id not in color: queue = deque([guest_id]) color[guest_id] = 0 # Start coloring with 0 while queue: current = queue.popleft() current_color = color[current] for neighbor in graph[current]: if neighbor not in color: color[neighbor] = 1 - current_color queue.append(neighbor) elif color[neighbor] == current_color: return \'NO\' return \'YES\'"},{"question":"Rank the Employees You have been given a list of employees with their names and performance scores. Your task is to sort the employees based on their performance scores in descending order. If two or more employees have the same performance score, they should be ranked in ascending order of their names alphabetically. --- Input * The input list may contain a range of ```2``` to ```1000``` employees. * Each employee is represented by a tuple: (name: str, score: int). * The list may be empty. Example * Input: [(\\"Alice\\", 95), (\\"Bob\\", 85), (\\"Carol\\", 95), (\\"Dave\\", 75)] * Sorted by score then name: [(\\"Alice\\", 95), (\\"Carol\\", 95), (\\"Bob\\", 85), (\\"Dave\\", 75)] * Output: [(\\"Alice\\", 95), (\\"Carol\\", 95), (\\"Bob\\", 85), (\\"Dave\\", 75)] Notes * Names are case-sensitive and should be treated as distinct strings. * Performance scores are integer values ranging from 0 to 100. * In case of an empty list, the output should also be an empty list. * Preserve the original input format when returning the output.","solution":"def rank_employees(employees): Sort the employees based on their scores in descending order. If scores are the same, sort by names in ascending order. Args: employees (list of tuples): List of employees where each tuple contains the name (str) and score (int). Returns: list of tuples: Sorted list of employees. return sorted(employees, key=lambda x: (-x[1], x[0]))"},{"question":"You are given an textit{undirected weighted graph}, represented as an adjacency list. Each node in the graph is represented by an integer, and each edge has a non-negative weight. Your goal is to find the shortest path between two given nodes using Dijkstra\'s algorithm. The adjacency list is given as a dictionary, where the keys are node integers, and the values are lists of tuples representing the connected nodes and the corresponding edge weights. Write a function: ```python def dijkstra(graph: dict, start: int, end: int) -> list: ``` that takes an adjacency list `graph`, a `start` node, and an `end` node, and returns a list of nodes representing the shortest path from the `start` node to the `end` node. If there are multiple shortest paths, return any of them. # Example Input: ```python graph = { 0: [(1, 4), (2, 1)], 1: [(3, 1)], 2: [(1, 2), (3, 5)], 3: [] } start = 0 end = 3 ``` # Example Output: ```python [0, 2, 1, 3] ``` # Constraints: 1. The graph will not contain negative weight edges. 2. The graph is connected, meaning that there is at least one path between any two nodes. 3. There are at most 1000 nodes and 10000 edges in the graph.","solution":"import heapq def dijkstra(graph: dict, start: int, end: int) -> list: Implements Dijkstra\'s algorithm to find the shortest path between start and end nodes. Args: graph (dict): The adjacency list of the graph. start (int): The starting node. end (int): The target node. Returns: list: The shortest path from start to end. # Initialize the priority queue priority_queue = [] heapq.heappush(priority_queue, (0, start)) # This dictionary will store the shortest distance to each node distances = {node: float(\'infinity\') for node in graph} distances[start] = 0 # This dictionary will store the shortest path previous_nodes = {node: None for node in graph} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If we reached the end node, short-circuit if current_node == end: break if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) # Reconstruct the shortest path path = [] current_node = end while current_node is not None: path.append(current_node) current_node = previous_nodes[current_node] path.reverse() return path"},{"question":"Given an m x n grid of characters board and a string word, return true if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Example 1: Input: board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"ABCCED\\" Output: true Example 2: Input: board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"SEE\\" Output: true Example 3: Input: board = [[\\"A\\",\\"B\\",\\"C\\",\\"E\\"],[\\"S\\",\\"F\\",\\"C\\",\\"S\\"],[\\"A\\",\\"D\\",\\"E\\",\\"E\\"]], word = \\"ABCB\\" Output: false Constraints: * m == board.length * n == board[i].length * 1 <= m, n <= 6 * 1 <= word.length <= 15 * board and word consist of only lowercase and uppercase English letters.","solution":"def exist(board, word): def backtrack(x, y, word_idx): # If we have matched the entire word if word_idx == len(word): return True # If out of bounds or the character does not match if (x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y] != word[word_idx]): return False # To avoid using the same letter cell in one search path temp = board[x][y] board[x][y] = \'#\' # Explore all possible directions: up, down, left, right found = (backtrack(x + 1, y, word_idx + 1) or backtrack(x - 1, y, word_idx + 1) or backtrack(x, y + 1, word_idx + 1) or backtrack(x, y - 1, word_idx + 1)) # Restore the original value board[x][y] = temp return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and backtrack(i, j, 0): return True return False"},{"question":"# Task You are given a list of strings. Your task is to find the longest common prefix among all the given strings. If there is no common prefix, return an empty string `\\"\\"`. Write a function that will take an array of strings and return the longest common prefix. # Input/Output - `[input]` array of strings `arr` A list of strings containing only lowercase English letters. `1 ≤ arr.length ≤ 200` `0 ≤ arr[i].length ≤ 200` - `[output]` a string The longest common prefix. If there is no common prefix, return an empty string `\\"\\"`. # Example For `arr = [\\"flower\\", \\"flow\\", \\"flight\\"]`, the result should be `\\"fl\\"`. For `arr = [\\"dog\\", \\"racecar\\", \\"car\\"]`, the result should be `\\"\\"`. ```python def longest_common_prefix(arr): if not arr: return \\"\\" # Initialize the prefix with the first word prefix = arr[0] for s in arr: while s[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] return prefix ``` For `arr = [\\"interspecies\\", \\"interstellar\\", \\"interstate\\"]`, the result should be `\\"inters\\"`. For `arr = [\\"throne\\", \\"throne\\"]`, the result should be `\\"throne\\"`.","solution":"def longest_common_prefix(arr): if not arr: return \\"\\" # Initialize the prefix with the first word prefix = arr[0] for s in arr[1:]: while not s.startswith(prefix) and prefix: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Write a function `palindromeNumber`, `palindrome_number` or `PalindromeNumber` that takes an integer as input and returns `True` if the integer is a palindrome, and `False` otherwise. An integer is a palindrome when it reads the same backward as forward. For example: - Input: 121 - Output: True - Input: -121 - Output: False (as reading backwards gives 121-, which isn\'t a palindrome) - Input: 10 - Output: False","solution":"def palindrome_number(x): Returns True if x is a palindrome number, and False otherwise. # Negative numbers are not palindromes if x < 0: return False # Convert the number to a string to check for palindrome property str_x = str(x) return str_x == str_x[::-1]"},{"question":"Write a function to create a zigzag pattern string from a given string and a specified number of rows. The string should be written out in a zigzag pattern, and then read line by line. For example, with the input string \\"PAYPALISHIRING\\" and 4 rows, the pattern would be as follows: ``` P I N A L S I G Y A H R P I ``` So the output string would be: \\"PINALSIGYAHRPI\\". Your task is to write a function that converts an input string to a zigzag pattern as described. # Function signature ```python def convert(s: str, numRows: int) -> str: pass ``` # Input - `s` (string): The input string, consisting of uppercase/lowercase letters and digits. - `numRows` (integer): The number of rows for the zigzag pattern. # Output - A string representing the zigzag pattern. # Examples ```python convert(\'PAYPALISHIRING\', 3) # \\"PAHNAPLSIIGYIR\\" convert(\'PAYPALISHIRING\', 4) # \\"PINALSIGYAHRPI\\" convert(\'A\', 1) # \\"A\\" ``` # Constraints - `1 <= len(s) <= 1000` - `1 <= numRows <= len(s)`","solution":"def convert(s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s # Create a list of strings for all rows rows = [\'\' for _ in range(numRows)] # Initialize variables cur_row = 0 going_down = False # Iterate through each character in the input string for char in s: rows[cur_row] += char if cur_row == 0 or cur_row == numRows - 1: going_down = not going_down cur_row += 1 if going_down else -1 # Join all rows to form the final result return \'\'.join(rows)"},{"question":"In a small city, there is only one movie theater. The theater can host multiple movies in a week, and each movie has its own start and end time. The theater owner wants to maximize the number of non-overlapping movies that can be hosted in the theater to attract more viewers. Your task is to write a program that receives a list of movies with their respective start and end times, and outputs the maximum number of non-overlapping movies that can be scheduled in the theater. -----Input----- The first line contains a single integer N denoting the number of movies. Each of the next N lines contains two integers Si and Ei, representing the start and end time of the ith movie. -----Output----- Output a single integer indicating the maximum number of non-overlapping movies that can be scheduled. -----Constraints----- 1 ≤ N ≤ 100,000 0 ≤ Si < Ei ≤ 100,000 -----Example----- Input: 6 1 4 2 5 3 6 7 8 5 9 8 10 Output: 3 Explanation: The three non-overlapping movies that can be scheduled are [1, 4], [5, 9], and [7, 8] or [8, 10].","solution":"def max_non_overlapping_movies(movies): Returns the maximum number of non-overlapping movies that can be scheduled. Parameters: movies (list of tuples): A list of tuples where each tuple contains two integers representing the start and end times of a movie. Returns: int: The maximum number of non-overlapping movies. # Sort the movies by their end time movies.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in movies: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given a matrix with N rows and M columns. Your task is to determine whether there exists a path from the top-left corner to the bottom-right corner of the matrix that only moves right or down and passes through cells with increasing values. -----Input----- - The first line contains two integers N and M denoting the number of rows and columns of the matrix. - The next N lines contain M space-separated integers each denoting the elements of the matrix. -----Output----- Print \\"YES\\" if such a path exists. Otherwise, print \\"NO\\". -----Constraints----- - 1 le N, M le 1000 - 1 le text{matrix}[i][j] le 10^9 for all valid i, j -----Example Input----- 2 2 1 3 2 4 -----Example Output----- YES -----Example Input----- 3 3 1 2 3 2 2 4 3 5 1 -----Example Output----- NO","solution":"def is_path_possible(matrix): Determines if there exists a path from the top-left to the bottom-right corner of the matrix with only moving right or down, where each step only passes through cells with increasing values. Args: matrix: List of List of integers representing the matrix. Returns: str: \'YES\' if such a path exists, otherwise \'NO\' N = len(matrix) M = len(matrix[0]) # dp table to keep track of whether a cell can be reached with only increasing value moves dp = [[False] * M for _ in range(N)] dp[0][0] = True for i in range(N): for j in range(M): if dp[i][j]: if i + 1 < N and matrix[i+1][j] > matrix[i][j]: dp[i+1][j] = True if j + 1 < M and matrix[i][j+1] > matrix[i][j]: dp[i][j+1] = True return \\"YES\\" if dp[N-1][M-1] else \\"NO\\""},{"question":"# String Compression Data compression is a crucial tool in computer science for saving storage space and improving transmission speed. One of the simplest forms of data compression is the run-length encoding scheme. In this scheme, consecutive identical characters are replaced by the character followed by the count of repetitions. For example, the string \\"aaabbbcccaaa\\" would be compressed to \\"a3b3c3a3\\". Your task is to write a function that performs this basic run-length encoding. #Task You have to write a function: ```python def compress_string(s): ``` that takes a string `s` as its parameter and returns the compressed version of the string. If the compressed string is not shorter than the original string, return the original string. #Examples ```python compress_string(\\"aaabbbcccaaa\\") = \\"a3b3c3a3\\" compress_string(\\"abcd\\") = \\"abcd\\" compress_string(\\"aabbccdd\\") = \\"aabbccdd\\" compress_string(\\"aaa\\") = \\"a3\\" ``` (Adapted for learning purposes from various string manipulation problems commonly found in coding assessments.)","solution":"def compress_string(s): Compresses a given string using run-length encoding. Consecutive identical characters are replaced by the character followed by the count of repetitions. Parameters: s (str): The input string to be compressed. Returns: str: The compressed string if it is shorter than the original string, otherwise the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Add the last character group compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Create a function to find the first non-repeating character in a string and return its index. If all characters repeat, the function should return -1. You may assume the input string contains only lowercase and uppercase alphabetic characters, and it has a minimum length of 1. Python example:","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in the string s. If all characters repeat, returns -1. char_count = {} # count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a function that determines the category of a given character: ```python def character_category(char): pass ``` - If the character is a lowercase letter (a-z), the function should return \\"Lowercase Letter\\". - If the character is an uppercase letter (A-Z), the function should return \\"Uppercase Letter\\". - If the character is a digit (0-9), the function should return \\"Digit\\". - For any other character, the function should return \\"Special Character\\".","solution":"def character_category(char): Determines the category of a given character. Parameters: char (str): The character to categorize Returns: str: The category of the character, which can be one of the following: - \\"Lowercase Letter\\" - \\"Uppercase Letter\\" - \\"Digit\\" - \\"Special Character\\" if \'a\' <= char <= \'z\': return \\"Lowercase Letter\\" elif \'A\' <= char <= \'Z\': return \\"Uppercase Letter\\" elif \'0\' <= char <= \'9\': return \\"Digit\\" else: return \\"Special Character\\""},{"question":"You are given a list of product names and their respective prices. Write a function to find the top `k` most expensive products, sorted by their prices in descending order. In case of a tie (products with the same price), the products should be sorted alphabetically by their names. # Task: - parameters: - `products`: a list of strings representing product names. - `prices`: a list of integers representing the prices of the products. - `k`: an integer representing the number of top products to return. - return: a list of `k` strings representing the top `k` most expensive product names sorted by their prices in descending order. If there are fewer than `k` products, return all the products sorted as mentioned. # Example: ```python products = [\\"apple\\", \\"banana\\", \\"orange\\", \\"kiwi\\", \\"peach\\"] prices = [2, 2, 3, 5, 2] k = 3 The function should return: [\\"kiwi\\", \\"orange\\", \\"apple\\"] ``` # Notes: - If `products` is empty, return an empty list. - If `k` is greater than the number of products, return all the products sorted by the criteria mentioned.","solution":"def top_k_expensive_products(products, prices, k): Returns the top k most expensive products sorted by price in descending order. In case of a tie, sorts by product name alphabetically. if not products: return [] # Create a list of tuples (price, product) product_price_pairs = list(zip(prices, products)) # Sort the pairs first by price in descending order and then alphabetically by product name product_price_pairs.sort(key=lambda x: (-x[0], x[1])) # Extract the product names from the top k product-price pairs top_products = [pair[1] for pair in product_price_pairs[:k]] return top_products"},{"question":"A company\'s system logs user activity in the following format: \\"User [username] performed [action] on [date and time]\\". For example: \\"User johndoe performed login on 2023-02-15 13:45:30\\" You would like to extract and display only the username and action performed in a more concise way: \\"[username]: [action]\\" Write a function, extractUserAction, that takes a log string in the original format, and returns a shorter string showing only the username and the action. Assume extractUserAction\'s input will always be a string in the proper format, e.g., \\"User johndoe performed login on 2023-02-15 13:45:30\\". Assume extractUserAction\'s output will be the shortened string, e.g., \\"johndoe: login\\".","solution":"def extractUserAction(log): Extracts and returns the username and action from the log string. Args: log (str): The log string in the format \\"User [username] performed [action] on [date and time]\\". Returns: str: A string in the format \\"[username]: [action]\\". parts = log.split() username = parts[1] action = parts[3] return f\\"{username}: {action}\\""},{"question":"Complete the function that determines if a given string is a valid IP address. An IP address is considered valid if it consists of four numerical segments, each ranging from 0 to 255, separated by periods. The function receives a single string and should return `True` if the string represents a valid IP address and `False` otherwise. # Validation rules: 1. The string must consist of exactly four segments. 2. Each segment must contain only digits. 3. Each segment must be in the range from 0 to 255. 4. The segments must be separated by periods (\'.\') without any extra spaces or characters. # Examples ``` \\"192.168.1.1\\" ==> True \\"255.255.255.255\\" ==> True \\"172.16.254.1\\" ==> True \\"192.168.1.256\\" ==> False \\"192.168@1.1\\" ==> False \\"192.168.1\\" ==> False \\"0.0.0.0\\" ==> True \\"300.168.1.1\\" ==> False \\"192.168.1.01\\" ==> False ```","solution":"def is_valid_IP(ip): Returns True if the string ip is a valid IPv4 address, otherwise returns False. segments = ip.split(\'.\') if len(segments) != 4: return False for segment in segments: if not segment.isdigit(): return False num = int(segment) if num < 0 or num > 255 or (segment[0] == \'0\' and len(segment) > 1): return False return True"},{"question":"Given a rectangular matrix of integers, write a function that returns the sum of the elements in a specified submatrix. The submatrix is defined by its top-left and bottom-right corners\' coordinates. `submatrixSum(matrix, top_left, bottom_right)` - matrix - a 2D list of integers. - top_left - a tuple `(row, col)` representing the coordinates of the top-left corner of the submatrix. - bottom_right - a tuple `(row, col)` representing the coordinates of the bottom-right corner of the submatrix. The function should handle edge cases such as submatrices that may align with the matrix borders. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] top_left = (1, 1) bottom_right = (2, 2) # submatrix would be: # [ # [5, 6], # [8, 9] # ] # Sum: 5 + 6 + 8 + 9 = 28 submatrixSum(matrix, top_left, bottom_right) # should return 28 ``` **Note:** The input coordinates are zero-based.","solution":"def submatrixSum(matrix, top_left, bottom_right): Calculate the sum of elements in a specified submatrix. Args: matrix (list of list of int): A 2D list of integers. top_left (tuple of int): Top-left coordinates of the submatrix. bottom_right (tuple of int): Bottom-right coordinates of the submatrix. Returns: int: Sum of the elements in the submatrix. sum_val = 0 for row in range(top_left[0], bottom_right[0] + 1): for col in range(top_left[1], bottom_right[1] + 1): sum_val += matrix[row][col] return sum_val"},{"question":"Write an efficient function that accepts a string and returns the first non-repeating character. For example, for the string \\"swiss\\", the function should return the character \'w\'. If all characters are repeating, return an empty string. The function should make use of a single traversal of the string for optimal efficiency.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If all characters are repeating, returns an empty string. Processes the string in a single traversal for efficiency. char_counts = {} for ch in s: if ch in char_counts: char_counts[ch] += 1 else: char_counts[ch] = 1 for ch in s: if char_counts[ch] == 1: return ch return \\"\\""},{"question":"Design a function that receives a string representation of a mathematical expression and evaluates it. The expression can contain addition `+`, subtraction `-`, multiplication `*`, division `/` operators, and parentheses `()`. The division operator should perform integer division. Assume all the inputs are valid expressions and the result of the expression would fit in a 32-bit signed integer. # Function Signature ```python def evaluate_expression(expression: str) -> int: ``` # Parameters - **expression**: A string representing the mathematical expression to be evaluated. The string is guaranteed to be a valid and contains only non-negative integers, binary operators (`+`, `-`, `*`, `/`), and parentheses. # Return - **int**: The result of the evaluated expression. # Examples Example 1 ```python expression = \\"3+2*2\\" assert evaluate_expression(expression) == 7 ``` Explanation: 3 + (2 * 2) = 3 + 4 = 7 Example 2 ```python expression = \\" 3/2 \\" assert evaluate_expression(expression) == 1 ``` Explanation: 3 divided by 2 equals 1 (integer division) Example 3 ```python expression = \\" 3+5 / 2 \\" assert evaluate_expression(expression) == 5 ``` Explanation: 5 divided by 2 equals 2 (integer division), 3 + 2 = 5 # Note - The string represents a valid expression. - Division should perform integer division. - The function should handle spaces between characters.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a string representation of a mathematical expression containing +, -, *, / operators and parentheses. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operations(values, ops): right = values.pop() left = values.pop() op = ops.pop() values.append(operate(left, right, op)) # Remove spaces from the expression expression = expression.replace(\' \', \'\') values = [] ops = [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while (i < len(expression)) and (expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \'(\': ops.append(expression[i]) elif expression[i] == \')\': while ops and ops[-1] != \'(\': apply_operations(values, ops) ops.pop() else: while ops and precedence(ops[-1]) >= precedence(expression[i]): apply_operations(values, ops) ops.append(expression[i]) i += 1 while ops: apply_operations(values, ops) return values[-1]"},{"question":"# Kata Task You are given an array containing integers, where each element represents the number of people entering (+ number) or leaving (- number) a room. For example, the array `[5, -3, 10, -2]` means: * 5 people entered the room * 3 people left the room * 10 additional people entered the room * 2 people left the room Write a function that calculates the number of people in the room after all the events have been processed. **Notes** * The initial number of people in the room is 0. * Ensure the function handles cases where the room\'s capacity never goes below zero (no negative number of people can be present in the room). **Input** * An array of integers representing the people entering or leaving the room. **Output** * An integer representing the total number of people in the room after all events. **Example** ```python >>> people_in_room([5, -3, 10, -2]) 10 >>> people_in_room([3, 9, -12, 5]) 5 >>> people_in_room([-5, 7, 2, -3]) 1 ```","solution":"def people_in_room(events): Returns the number of people in the room after processing all events of people entering and leaving. :param events: List of integers, where positive numbers indicate entering and negative numbers indicate leaving. :return: The total number of people in the room after all events. current_people = 0 for event in events: current_people += event if current_people < 0: current_people = 0 return current_people"},{"question":"Given a list of movie names, return \\"Time for a movie marathon!\\" if any of those names match the following list of classic \'90s movies: - TheMatrix - JurassicPark - TheLionKing - ForrestGump - ToyStory - Titanic - IndependenceDay If the number of matching movies in the provided list is greater than or equal to 3, add \\"Get the popcorn ready!\\" to the end of the message. If no classic \'90s movies are found, return \\"How about some classic \'90s movies?\\" Examples: ``` movies = [\\"TheMatrix\\", \\"Inception\\", \\"TheLionKing\\", \\"ToyStory\\"] Output: \\"Time for a movie marathon! Get the popcorn ready!\\" movies = [\\"TheShawshankRedemption\\", \\"PulpFiction\\", \\"ForrestGump\\"] Output: \\"Time for a movie marathon!\\" movies = [\\"Avatar\\", \\"Inception\\", \\"Interstellar\\"] Output: \\"How about some classic \'90s movies?\\" ```","solution":"def classic_90s_movie_marathon(movies): Returns a message based on the presence of classic \'90s movies in the input list. Parameters: movies (list): A list of movie names (strings). Returns: str: A message indicating whether it\'s time for a movie marathon or suggesting classic \'90s movies. classic_movies = [ \\"TheMatrix\\", \\"JurassicPark\\", \\"TheLionKing\\", \\"ForrestGump\\", \\"ToyStory\\", \\"Titanic\\", \\"IndependenceDay\\" ] matches = [movie for movie in movies if movie in classic_movies] if matches: if len(matches) >= 3: return \\"Time for a movie marathon! Get the popcorn ready!\\" else: return \\"Time for a movie marathon!\\" else: return \\"How about some classic \'90s movies?\\""},{"question":"A bank maintains a list of customer transactions for the day. Each transaction is represented as a string in the format \\"type-amount\\", where \\"type\\" can either be \\"deposit\\" or \\"withdrawal\\", and \\"amount\\" is a positive integer representing the amount of money in that transaction. You need to write a function that calculates the account balance at the end of the day. The account starts with a balance of 0. For example, given the transactions: ```python [\\"deposit-100\\", \\"withdrawal-30\\", \\"deposit-40\\", \\"withdrawal-20\\"] ``` Your function should return: ```python 90 ``` Where: - Initial balance = 0 - After \\"deposit-100\\", balance = 100 - After \\"withdrawal-30\\", balance = 70 - After \\"deposit-40\\", balance = 110 - After \\"withdrawal-20\\", balance = 90","solution":"def calculate_balance(transactions): balance = 0 for transaction in transactions: type, amount = transaction.split(\'-\') amount = int(amount) if type == \'deposit\': balance += amount elif type == \'withdrawal\': balance -= amount return balance"},{"question":"In a distant land, there is a peculiar vending machine that accepts only coins of denominations 1, 3, and 5. The vending machine is configured such that it can provide change using any combination of these denominations. However, the vending machine has one unique behavior: it will not accept additional coins if the exact change cannot be made with the denominations provided. You are tasked with writing a program that determines the minimum number of coins required to make a specific amount of change, or if it is not possible to make exact change. -----Input----- N: number of test cases, N<=100 then N lines with an input amount M (1 <= M <= 5000) -----Output----- For each input amount M, output the minimum number of coins required to make the amount of change, or -1 if it is not possible. -----Example----- Input: 4 7 8 21 29 Output: 3 2 5 7 Explanation: To make 7: 5+1+1 = 3 coins To make 8: 5+3 = 2 coins To make 21: 5+5+5+3+3 = 5 coins To make 29: 5+5+5+5+5+3+1 = 7 coins","solution":"def min_coins_to_make_change(N, amounts): Returns the minimum number of coins required to make the exact amount for each amount in amounts, or -1 if not possible. The coins denominations are 1, 3, and 5. results = [] for M in amounts: dp = [float(\'inf\')] * (M + 1) dp[0] = 0 # 0 coins to make 0 amount for coin in [1, 3, 5]: for x in range(coin, M + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) results.append(dp[M] if dp[M] != float(\'inf\') else -1) return results"},{"question":"# Problem Statement Write a function that takes an integer as input and generates a zig-zag pattern of stars (*) in the shape of a spiral within a square matrix. The function should return a 2D list representing the matrix. The size of the matrix (both rows and columns) should be equal to the given integer. Each spiral should fill all columns and rows and start filling the pattern from the top left of the matrix, proceeding rightwards, looping through until the center of the matrix is reached. Example For the input integer `n = 5`, the output 2D list should be: ``` [ [\'*\', \'*\', \'*\', \'*\', \'*\'], [\'*\', \' \', \' \', \' \', \'*\'], [\'*\', \' \', \'*\', \' \', \'*\'], [\'*\', \' \', \' \', \' \', \'*\'], [\'*\', \'*\', \'*\', \'*\', \'*\'] ] ``` For the input integer `n = 3`, the output 2D list should be: ``` [ [\'*\', \'*\', \'*\'], [\'*\', \' \', \'*\'], [\'*\', \'*\', \'*\'] ] ``` # Constraints - The input integer will always be a positive odd number (1, 3, 5, 7, etc.). - The input integer will not exceed 99. # Detailed Process Example 1. When `n = 5`, start placing the \'*\' in the spiral order. 2. Continue until the center of the matrix is reached and all positions in the spiral pattern are correctly filled. # Input - An integer `n`. # Output - A 2D list of size `n x n` filled with \'*\' and spaces representing the spiral pattern. # Function Signature ```python def generate_spiral_pattern(n: int) -> List[List[str]]: pass ```","solution":"from typing import List def generate_spiral_pattern(n: int) -> List[List[str]]: Generates a zig-zag pattern of stars in the shape of a spiral within an n x n square matrix. Args: n (int): The size of the square matrix (an odd positive integer). Returns: List[List[str]]: The n x n 2D list containing the spiral pattern. matrix = [[\' \' for _ in range(n)] for _ in range(n)] start_row, start_col = 0, 0 end_row, end_col = n - 1, n - 1 while start_row <= end_row and start_col <= end_col: for col in range(start_col, end_col + 1): matrix[start_row][col] = \'*\' for row in range(start_row + 1, end_row + 1): matrix[row][end_col] = \'*\' if start_row < end_row: for col in range(end_col - 1, start_col - 1, -1): matrix[end_row][col] = \'*\' if start_col < end_col: for row in range(end_row - 1, start_row, -1): matrix[row][start_col] = \'*\' start_row += 2 start_col += 2 end_row -= 2 end_col -= 2 return matrix"},{"question":"# Task Given a list of integers, write a function that finds the second largest distinct element in the list. If no such element exists, return `None`. # Example For `nums = [3, 1, 2, 4, 4]`, the output should be `3`; For `nums = [7, 7, 7]`, the output should be `None`. # Input/Output - `[input]` list of integers `nums` Constraints: `1 ≤ len(nums) ≤ 10^5; -10^9 ≤ nums[i] ≤ 10^9` - `[output]` an integer or `None`","solution":"def second_largest(nums): Finds the second largest distinct element in the list. If no such element exists, returns None. Parameters: nums (list): A list of integers. Returns: int or None: The second largest distinct element or None. if len(nums) < 2: return None distinct_nums = list(set(nums)) if len(distinct_nums) < 2: return None distinct_nums.sort(reverse=True) return distinct_nums[1]"},{"question":"How many Ways? There are N people standing in a queue (numbered from 1 to N). We want to find out how many ways we can pair up the people in this queue so that all the paired individuals can shake hands simultaneously without the handshakes intersecting or crossing each other. Specifically, each handshake connects two people and no two handshakes share a common endpoint. Then the sequence of people standing in the queue forms a valid handshaking arrangement if there are no intersections or crossings between any pairs of handshakes. The following figure shows one example of valid handshakes: (1 pairs with 2, 3 pairs with 4) -----Constraints----- - All input values are integers. - 0 ≤ N ≤ 100 - If N is odd, then it is impossible for everyone to make handshakes in pairs, in such case, return 0. -----Input----- The input is given from Standard Input in the following format: N -----Output----- Print the number of ways N people can pair up for valid handshakes. -----Sample Input----- 2 -----Sample Output----- 1 Explanation: There is only one possible way: (1 pairs with 2) -----Sample Input 2----- 4 -----Sample Output 2----- 2 Explanation: There are two possible ways: - (1 pairs with 2, 3 pairs with 4) - (1 pairs with 4, 2 pairs with 3) Note: A dynamic programming approach is often used to solve this type of combinatorial problem. Consider using Catalan number or dynamic programming concepts for deriving the solution.","solution":"def handshake_ways(N): Returns the number of ways N people can pair up for valid handshakes. # If N is odd, it\'s impossible to pair everyone up if N % 2 != 0: return 0 # dynamic programming array to store handshake ways for 0 to N people dp = [0] * (N + 1) dp[0] = 1 # base case: one way to arrange zero people # Fill dp array using the Catalan number approach for i in range(2, N + 1, 2): for j in range(0, i, 2): dp[i] += dp[j] * dp[i - 2 - j] return dp[N]"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is repeated once. Examples: ```python double_char(\\"hello\\") # should return \\"hheelllloo\\" double_char(\\"12345\\") # should return \\"1122334455\\" double_char(\\"!@#\\") # should return \\"!!@@\\" ```","solution":"def double_char(s): Returns a new string where each character in the original string is repeated once. Parameters: s (str): Input string Returns: str: New string with each character repeated return \'\'.join([char * 2 for char in s])"},{"question":"JSON to Nested Dictionary Write a Python function that takes a JSON string as input and converts it into a nested dictionary. The JSON string will adhere to the following specifications: 1. The input string will always be a valid JSON. 2. It will contain either nested objects, arrays, or both. Your function should return a nested dictionary where: - JSON objects are converted to Python dictionaries. - JSON arrays are converted to Python lists. You can assume the keys in the JSON objects are unique. Example: ```python json_string = \'{\\"name\\": \\"John\\", \\"age\\": 30, \\"children\\": [{\\"name\\": \\"Jane\\", \\"age\\": 10}, {\\"name\\": \\"Doe\\", \\"age\\": 5}]}\' result = json_to_nested_dict(json_string) print(result) # Output: { \'name\': \'John\', \'age\': 30, \'children\': [ {\'name\': \'Jane\', \'age\': 10}, {\'name\': \'Doe\', \'age\': 5} ] } ``` Notes: - The function should correctly convert nested objects and arrays as depicted in the example. - Implement necessary error handling for edge cases (e.g., empty JSON strings, deeply nested structures, etc.)","solution":"import json def json_to_nested_dict(json_string): Converts a JSON string into a nested dictionary. Parameters: json_string (str): A JSON string. Returns: dict: A nested dictionary. try: return json.loads(json_string) except json.JSONDecodeError: raise ValueError(\\"Invalid JSON string\\")"},{"question":"Given an array of distinct integers arr, write a function that returns a resulting array that shifts all elements of the original array to the right by k positions. The elements that overflow to the right end should wrap around to the beginning of the array. Example 1: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: [4, 5, 1, 2, 3] Explanation: The array [1, 2, 3, 4, 5] shifted right by 2 positions becomes [4, 5, 1, 2, 3]. Example 2: Input: arr = [7, 8, 9, 10], k = 1 Output: [10, 7, 8, 9] Explanation: The array [7, 8, 9, 10] shifted right by 1 position becomes [10, 7, 8, 9]. Example 3: Input: arr = [6, -3, 8, 20, 0], k = 3 Output: [8, 20, 0, 6, -3] Explanation: The array [6, -3, 8, 20, 0] shifted right by 3 positions becomes [8, 20, 0, 6, -3]. Constraints: 1 <= arr.length <= 1000 -1000 <= arr[i] <= 1000 0 <= k < arr.length","solution":"def shift_right(arr, k): Shifts the elements of the array \'arr\' to the right by \'k\' positions. n = len(arr) k = k % n # Handle cases where k >= n return arr[-k:] + arr[:-k]"},{"question":"Description: In many applications, it is often necessary to identify the \\"mode\\", which is the number that appears most frequently in a dataset. When multiple numbers qualify as the mode, return the smallest one. If no number repeats, every number can be considered as the mode. Your task is to write a function to find the mode of an array of integers. Assume all inputs are arrays of numbers in integer format. For an empty array, your code should return `NaN` (or `null` in languages that do not support NaN). Examples: Input `[1, 2, 2, 3, 4]` --> Mode `2` Input `[4, 5, 5, 6, 6, 7]` --> Mode `5` Input `[1, 2, 3, 4]` --> Mode `1`","solution":"def find_mode(arr): Returns the mode of the array. The mode is the number that appears most frequently. If multiple numbers qualify, the smallest one is returned. If the array is empty, return `NaN`. import math from collections import Counter if not arr: return math.nan frequency = Counter(arr) max_freq = max(frequency.values()) mode_candidates = [num for num, freq in frequency.items() if freq == max_freq] return min(mode_candidates)"},{"question":"Alice is fond of patterns and sequences. Recently, she came across a sequence where each term is the sum of digits of the previous term. The sequence starts with a given number, and Alice wants to find the eventual smallest single-digit number the sequence converges to. For example, if the sequence starts with 38, the next term would be 3 + 8 = 11, followed by 1 + 1 = 2, hence the sequence would converge to 2. Alice wants you to write a program that will determine the smallest single-digit number for a given starting number of the sequence. -----Input:----- - First line will contain T, number of test cases. - Each test case contains a single integer N, the starting number of the sequence. -----Output:----- For each test case, output a single digit number which is the eventual smallest single-digit number the sequence converges to. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^18 -----Sample Input:----- 2 38 123 -----Sample Output:----- 2 6 Explanation: For the first case, starting sequence 38 leads to 3 + 8 = 11, 1 + 1 = 2. For the second case, starting sequence 123 leads to 1 + 2 + 3 = 6.","solution":"def find_converged_single_digit(n): Determine the smallest single-digit number the sequence converges to starting with the given number n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n def process_test_cases(test_cases): Process multiple test cases where each test case contains the starting number of the sequence. return [find_converged_single_digit(test_case) for test_case in test_cases] def main(test_input): lines = test_input.splitlines() T = int(lines[0]) test_cases = list(map(int, lines[1:T+1])) results = process_test_cases(test_cases) return results"},{"question":"Write a function that finds the longest contiguous subsequence of increasing numbers in a list and returns its length. For instance, given the list `[3, 10, 2, 1, 20, 3, 25, 30, 5, 6, 7]`, the longest contiguous subsequence of increasing numbers is `[3, 25, 30]` and the function should return `3`. You can assume that the list is not empty and contains only positive integers.","solution":"def longest_increasing_contiguous_subsequence(arr): This function returns the length of the longest contiguous subsequence of increasing numbers in the list. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Given a string s consisting of lowercase English letters and a set of queries where each query is a pair of integers (left, right). For each query, return the count of distinct characters in the substring of s that starts at the index left and ends at the index right (inclusive). Implement the function `distinctCharacters(s: str, queries: List[Tuple[int, int]]) -> List[int]` that takes in the string s and a list of queries, and returns a list of integers representing the result for each query. Example 1: Input: s = \\"abcba\\", queries = [(0, 4), (1, 2), (2, 4)] Output: [3, 2, 3] Explanation: - The substring from index 0 to 4 is \\"abcba\\" which has 3 distinct characters: \'a\', \'b\', \'c\'. - The substring from index 1 to 2 is \\"bc\\" which has 2 distinct characters: \'b\', \'c\'. - The substring from index 2 to 4 is \\"cba\\" which has 3 distinct characters: \'a\', \'b\', \'c\'. Example 2: Input: s = \\"aaaa\\", queries = [(0, 3), (1, 2), (2, 3)] Output: [1, 1, 1] Explanation: - The substring from index 0 to 3 is \\"aaaa\\" which has 1 distinct character: \'a\'. - The substring from index 1 to 2 is \\"aa\\" which has 1 distinct character: \'a\'. - The substring from index 2 to 3 is \\"aa\\" which has 1 distinct character: \'a\'. Constraints: - 1 <= len(s) <= 10^5 - 1 <= len(queries) <= 10^4 - 0 <= left <= right < len(s)","solution":"def distinctCharacters(s: str, queries: [(int, int)]) -> [int]: Given a string s and a list of queries, return the count of distinct characters in the substring for each query. :param s: str: The input string of lowercase English letters. :param queries: List[Tuple[int, int]]: List of query tuples (left, right). :return: List[int]: List of counts of distinct characters for each query. results = [] for left, right in queries: substring = s[left:right + 1] distinct_count = len(set(substring)) results.append(distinct_count) return results"},{"question":"Given an array of integers, find two numbers such that they add up to a specific target number. Return the indices of the two numbers such that they add up to the target, where each input has exactly one solution, and you may not use the same element twice. Example: Input: numbers = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: numbers[0] + numbers[1] = 2 + 7 = 9 Input: numbers = [3, 2, 4], target = 6 Output: [1, 2] Explanation: numbers[1] + numbers[2] = 2 + 4 = 6 Note: - Your solution should have a runtime complexity of O(n).","solution":"def two_sum(numbers, target): Finds two numbers in the array `numbers` such that they add up to `target`. Returns their indices as a list. num_to_index = {} for i, num in enumerate(numbers): difference = target - num if difference in num_to_index: return [num_to_index[difference], i] num_to_index[num] = i return []"},{"question":"You are given a list of integers. You can perform a series of operations to make all the elements of the list equal. In each operation, you can increment or decrement any element of the list by 1. Write a function `min_operations(lst)` that returns the minimum number of operations required to make all the elements of the list equal. For example: ``` min_operations([1, 2, 3]) -> 2 Increment 1 to 2 and decrement 3 to 2. min_operations([5, 10, 15]) -> 10 Decrement 15 to 10 and increment 5 to 10. min_operations([8, 8, 8]) -> 0 The list elements are already equal. ```","solution":"def min_operations(lst): Returns the minimum number of operations required to make all elements of the list equal. Increment or decrement operations cost 1 each. n = len(lst) if n == 0: return 0 lst.sort() median = lst[n // 2] # Median as the target value minimizes the total operations operations = sum(abs(x - median) for x in lst) return operations"},{"question":"Calculate the maximum difference between any two elements in an unsorted array, where the larger element comes after the smaller element in the array. * Return the maximum difference * If the array contains less than two elements, return 0 * The array will always contain integers Examples: ``` Input: [10, 3, 5, 7, 3, 19] Output: 16 (19 - 3) Input: [5, 4, 3, 2, 1] Output: 0 (no larger element comes after a smaller element) Input: [1, 2, 90, 10, 110] Output: 109 (110 - 1) Input: [-1, -2, -3, -4, -5] Output: 0 (no larger element comes after a smaller element) Input: [] Output: 0 (not enough elements) ```","solution":"def max_diff(arr): Returns the maximum difference between any two elements in the array where the larger element comes after the smaller element. If the array has less than two elements, returns 0. if len(arr) < 2: return 0 min_element = arr[0] max_difference = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_difference = max(max_difference, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_difference"},{"question":"Given a binary tree represented as a list of tuples, where each tuple consists of two integers representing the left and right children of a node (use -1 if there is no child), you need to determine the minimum value at each level of the tree. The binary tree is presented as an array of tuples where index `i` represents the `i-th` node, the first element of each tuple is the index of the left child, and the second element is the index of the right child (with -1 indicating no child). Write a function `minimum_at_levels(tree: List[Tuple[int, int]], values: List[int]) -> List[int]` that takes the `tree` list and a `values` list, where `values[i]` is the value at the `i-th` node, and returns a list of minimum values at each level of the tree. **Example:** Input: ``` tree = [(1, 2), (3, 4), (-1, -1), (-1, -1), (-1, -1)] values = [5, 3, 8, 2, 4] ``` Explanation: - Index 0 (root) has children at indices 1 and 2. - Index 1 has children at indices 3 and 4. - Indices 2, 3, and 4 have no children. The tree structure looks like: ``` 5 / 3 8 / 2 4 ``` Output: ``` [5, 3, 2] ``` **Constraints:** - The tree list will have `n` tuples (0 <= n <= 10^5) - The values list will have `n` integers. - Values in the values list are integers. **Function Signature:** ```python from typing import List, Tuple def minimum_at_levels(tree: List[Tuple[int, int]], values: List[int]) -> List[int]: # Your code here ```","solution":"from typing import List, Tuple from collections import deque def minimum_at_levels(tree: List[Tuple[int, int]], values: List[int]) -> List[int]: if not tree: return [] result = [] queue = deque([(0, 0)]) # (current node index, level) level_min_values = {} while queue: node, level = queue.popleft() if level not in level_min_values: level_min_values[level] = values[node] else: level_min_values[level] = min(level_min_values[level], values[node]) left_child, right_child = tree[node] if left_child != -1: queue.append((left_child, level + 1)) if right_child != -1: queue.append((right_child, level + 1)) for level in sorted(level_min_values.keys()): result.append(level_min_values[level]) return result"},{"question":"Task Create a function `matrixSum` that takes a 2D list (a list of lists) of integers and returns the sum of all the non-negative integers in the matrix. # Process 1. **Understanding the Structure:** - The input is a matrix represented as a list of lists where each sublist represents a row in the matrix. - Each element in the sublists is an integer that can be positive, negative, or zero. 2. **Summation Criteria:** - Only non-negative integers (i.e., zero and positive) are summed. - Negative integers are ignored. # Examples ```python matrixSum([[1, -2, 3], [4, 5, -6], [7, -8, 9]]) ``` Expected output: ```python 29 # (1 + 3 + 4 + 5 + 7 + 9) ``` ```python matrixSum([[0, -1, -2], [-3, -4, 5], [6, 7, -8]]) ``` Expected output: ```python 18 # (0 + 5 + 6 + 7) ``` ```python matrixSum([[10, -20, 30], [40, 50, -60], [70, -80, 90]]) ``` Expected output: ```python 290 # (10 + 30 + 40 + 50 + 70 + 90) ``` # Additional Requirements - Provide a solution using list comprehensions to maintain brevity and clarity. - Ensure the function is optimized for any size of the matrix. # Solution Write the implementation of the `matrixSum` function considering the given requirements and examples. ```python def matrixSum(matrix): return sum([element for row in matrix for element in row if element >= 0]) ``` In the above implementation: - We use a nested list comprehension to iterate through each element in the 2D list. - The condition `if element >= 0` ensures only non-negative integers are considered. - The `sum` function calculates the total of these filtered values. Test your function with provided example inputs to ensure correctness.","solution":"def matrixSum(matrix): Sums all non-negative integers in a given 2D list (matrix). Parameters: matrix (list of list of int): A 2D list of integers. Returns: int: Sum of all non-negative integers in the matrix. return sum(element for row in matrix for element in row if element >= 0)"},{"question":"Your task is to determine the maximum number of different arrangements of books on a shelf. You are given N books, and there are S different spots on the shelf. Each spot can hold exactly one book, and each book is distinguishable. The order in which the books are placed on the shelf matters. Given the total number of books N and the number of spots S, calculate the maximum number of unique arrangements possible if: 1. N is less than or equal to S. 2. N is greater than S. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers N and S. -----Output----- For each test case, print a single line containing the maximum number of unique arrangements of books on the shelf. -----Constraints----- - 1 le T le 250 - 1 le N, S le 10^3 -----Subtasks----- Subtask #1 (50 points): 1 le N, S le 100 Subtask #2 (50 points): original constraints -----Example Input----- 3 5 3 3 3 2 4 -----Example Output----- 60 6 12 -----Explanation----- Example case 1: There are 5 books and 3 spots. We can choose 3 out of the 5 books in C(5,3) = 10 ways, and arrange them in 3! = 6 ways. So, the total number of arrangements is 10 times 6 = 60. Example case 2: There are exactly 3 books and 3 spots, so we can arrange all 3 books in 3! = 6 ways. Example case 3: We can place 2 books among the 4 spots in C(4,2) = 6 ways, and arrange them in 2! = 2 ways. Therefore, there are 6 times 2 = 12 arrangements in total.","solution":"import math def count_arrangements(N, S): if N <= S: return math.factorial(S) // math.factorial(S - N) else: return math.factorial(N) // math.factorial(N - S) def process_test_cases(test_cases): results = [] for N, S in test_cases: results.append(count_arrangements(N, S)) return results"},{"question":"Create a function that checks if a given triangle is equilateral, isosceles, or scalene. _____________________________________________________________ Rules: 1. Equilateral triangle: All three sides are equal. 2. Isosceles triangle: Exactly two sides are equal. 3. Scalene triangle: All three sides are different. 4. The sum of the lengths of any two sides must be greater than the length of the third side for valid triangles. _______________________________________________________________ The input to the function will be three integers representing the lengths of the sides of a triangle. Example adds up: Input: a=3, b=4, c=5 Output: \'Scalene\' If the sides do not form a valid triangle, return the string \'Not a triangle\'. Input: a=1, b=1, c=2 Output: \'Not a triangle\'","solution":"def triangle_type(a, b, c): Determines the type of the triangle given the lengths of its sides a, b, and c. Returns: str: \'Equilateral\', \'Isosceles\', \'Scalene\', or \'Not a triangle\' # Check if the sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: return \'Not a triangle\' # Check for equilateral triangle if a == b == c: return \'Equilateral\' # Check for isosceles triangle if a == b or b == c or a == c: return \'Isosceles\' # If none of the above, it must be a scalene triangle return \'Scalene\'"},{"question":"=====Problem Statement===== Understanding the concept of string reversal can be very useful in multiple scenarios, such as palindromes, data processing, and algorithms. Given a string, write a function to reverse the entire string without using any built-in reverse functions. =====Example===== Example: >>> string = \\"hello\\" >>> reverse_string(string) \\"olleh\\" You can achieve this by: 1. Iteratively swapping characters from the beginning and the end of the string. 2. Using string slicing to alter the order. Example: Iterative approach: >>> string = \\"hello\\" >>> l = list(string) >>> for i in range(len(l) // 2): l[i], l[len(l) - i - 1] = l[len(l) - i - 1], l[i] >>> string = \'\'.join(l) >>> print(string) \\"olleh\\" Using slicing: >>> string = \\"hello\\" >>> reversed_string = string[::-1] >>> print(reversed_string) \\"olleh\\" =====Input Format===== - The first line contains a string, S. =====Output Format===== - Print the reversed string. =====Function Signature===== - Complete the function `def reverse_string(s: str) -> str:` at the end.","solution":"def reverse_string(s: str) -> str: Reverses the given string without using any built-in reverse functions. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. reversed_str = \'\' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"=====Function Descriptions===== findClosestPoints(points, k) The function takes two parameters: - points: A list of tuples, where each tuple contains two integers representing the x and y coordinates of a point in a 2D plane. - k: An integer representing the number of closest points to the origin (0, 0) that need to be returned. The Euclidean distance of a point (x, y) from the origin is given by √(x² + y²). =====Problem Statement===== Given a list of 2D points and an integer k, write a function to find the k closest points to the origin (0, 0) and return them in a list sorted by their increasing distance from the origin. If two points have the same distance, sort them by their x coordinate. =====Output Format===== Return a list of tuples, where each tuple contains the x and y coordinates of a point, sorted based on the criteria mentioned above.","solution":"import heapq import math def findClosestPoints(points, k): Finds the k closest points to the origin (0, 0) in a 2D plane. :param points: List of tuples, where each tuple has two integers representing x and y coordinates. :param k: Integer representing the number of closest points to the origin to return. :return: List of k closest points sorted by their distance from the origin. # Calculate the Euclidean distance and store in a min-heap heap = [] for (x, y) in points: distance = math.sqrt(x**2 + y**2) heapq.heappush(heap, (distance, x, y)) # Extract the k closest points from the heap k_closest = [heapq.heappop(heap)[1:] for _ in range(k)] return k_closest"},{"question":"Write a function `flatten_dictionary` which takes a dictionary with nested dictionaries as an argument and returns a new dictionary where the keys are the paths to each value in the original dictionary, joined by a designated delimiter. The delimiter is passed as an additional argument to the function. For example: ```python original_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } } } delimiter = \\"_\\" result = flatten_dictionary(original_dict, delimiter) ``` The expected `result` should be: ```python { \\"a\\": 1, \\"b_c\\": 2, \\"b_d_e\\": 3, \\"b_d_f\\": 4 } ``` The function signature should be: ```python def flatten_dictionary(d, delimiter): # your code here ```","solution":"def flatten_dictionary(d, delimiter): Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. delimiter (str): The delimiter to use for joining keys. Returns: dict: A flattened dictionary. def flatten(current_dict, parent_key=\\"\\", result_dict={}): for key, value in current_dict.items(): new_key = f\\"{parent_key}{delimiter}{key}\\" if parent_key else key if isinstance(value, dict): flatten(value, new_key, result_dict) else: result_dict[new_key] = value return result_dict return flatten(d) # Example Usage: # original_dict = { # \\"a\\": 1, # \\"b\\": { # \\"c\\": 2, # \\"d\\": { # \\"e\\": 3, # \\"f\\": 4 # } # } # } # delimiter = \\"_\\" # result = flatten_dictionary(original_dict, delimiter) # Expected result: # { # \\"a\\": 1, # \\"b_c\\": 2, # \\"b_d_e\\": 3, # \\"b_d_f\\": 4 # }"},{"question":"You are given an array of integers of size n, where n is an even number and n leq 10^5. You need to form n/2 pairs out of these n integers such that each number is used exactly once, and the difference between the maximum sum of these pairs and the minimum sum of these pairs is minimized. -----Input----- The first line contains a single integer n (2 le n le 10^5), representing the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), representing the values in the array. -----Output----- Output a single integer, the minimum possible difference between the maximum and minimum sums of the formed pairs. -----Example----- Input 6 1 3 5 9 11 13 Output 2 -----Note----- In the given example: We can form the pairs (1, 13), (3, 11), and (5, 9). The sum of these pairs are 14, 14, and 14. The difference between the maximum and minimum sum is 14 - 14 = 0.","solution":"def minimize_pair_difference(arr): Given an array of integers, forms pairs such that each number is used exactly once, and the difference between the maximum sum of these pairs and the minimum sum of these pairs is minimized. Parameters: arr (List[int]): Array of integers of even size. Returns: int: The minimum possible difference between the maximum and minimum sums of the formed pairs. arr.sort() n = len(arr) pairs_sums = [arr[i] + arr[n - 1 - i] for i in range(n // 2)] return max(pairs_sums) - min(pairs_sums)"},{"question":"Palindromic Subsequences A palindromic subsequence is a subsequence that reads the same forward as backward. Given a string `s`, determine the total number of distinct palindromic subsequences in `s`. Your task is to write a function `countPalindromicSubsequences(s: str) -> int` that takes a string `s` as input and returns the count of such distinct palindromic subsequences. **Input/Output** - The input string `s` consists only of lowercase English letters and has a length of at most 1000 characters. - The function should return an integer, the total count of distinct palindromic subsequences. **Examples** Example 1: ```python s = \\"bccb\\" print(countPalindromicSubsequences(s)) # Output: 6 ``` Explanation: The 6 distinct palindromic subsequences are \\"b\\", \\"c\\", \\"bb\\", \\"cc\\", \\"bcb\\", \\"bccb\\". Example 2: ```python s = \\"abcd\\" print(countPalindromicSubsequences(s)) # Output: 4 ``` Explanation: The 4 distinct palindromic subsequences are \\"a\\", \\"b\\", \\"c\\", \\"d\\". **Note** - The result can be very large, so you may return the answer modulo 10^9 + 7.","solution":"def countPalindromicSubsequences(s: str) -> int: MOD = 10**9 + 7 n = len(s) if n == 0: return 0 # dp[i][j] will be storing number of distinct palindromic subsequence in range s[i..j] dp = [[0] * n for _ in range(n)] # all the letters are palindrome of length 1 for i in range(n): dp[i][i] = 1 # fill the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: low, high = i + 1, j - 1 # expand around the end index while low <= high and s[low] != s[i]: low += 1 while low <= high and s[high] != s[j]: high -= 1 if low > high: dp[i][j] = dp[i + 1][j - 1] * 2 + 2 elif low == high: dp[i][j] = dp[i + 1][j - 1] * 2 + 1 else: dp[i][j] = dp[i + 1][j - 1] * 2 - dp[low + 1][high - 1] else: dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] dp[i][j] = (dp[i][j] + MOD) % MOD return dp[0][n - 1]"},{"question":"An enthusiastic botanist named Aria wants to analyze a special type of sequence of plants in her garden. She defines a sequence of plants as **\\"fertile\\"** if it satisfies the following conditions: 1. A plant can be represented by a number. 2. A sequence of plants is fertile if and only if the sum of every two consecutive plants is even. Given an integer array representing the plants, your task is to determine if the given sequence of plants is fertile or not. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single line of input, an integer N (length of the plant sequence) followed by N space-separated integers representing the plant sequence. -----Output:----- For each test case, print \\"YES\\" if the sequence is fertile, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq A[i] leq 10^9 (where A[i] represents the i-th plant in the sequence) -----Sample Input:----- 3 4 2 4 6 8 3 5 3 7 5 1 2 3 4 5 -----Sample Output:----- YES NO NO -----Explanation:----- i) For the first test case, 2+4=6 (even), 4+6=10 (even), and 6+8=14 (even), so the sequence is \\"fertile\\". ii) For the second test case, 5+3=8 (even) but 3+7=10 (not even), so the sequence is not \\"fertile\\". iii) For the third test case, 1+2=3 (not even), 2+3=5 (not even), so the sequence is not \\"fertile\\".","solution":"def is_fertile_sequence(sequence): Determines if a given sequence is fertile, meaning the sum of every two consecutive plants is even. Parameters: sequence (list): List of integers representing plants. Returns: str: \\"YES\\" if the sequence is fertile, \\"NO\\" otherwise. for i in range(len(sequence) - 1): if (sequence[i] + sequence[i + 1]) % 2 != 0: return \\"NO\\" return \\"YES\\" def analyze_plant_sequences(test_cases): Analyzes multiple test cases to determine if each plant sequence is fertile. Parameters: test_cases (list): List of tuples, each containing an integer N and a list of N integers representing plants. Returns: list: List of results for each test case, either \\"YES\\" or \\"NO\\". results = [] for N, sequence in test_cases: results.append(is_fertile_sequence(sequence)) return results # Function to process input and produce output according to the given problem. def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) sequence = list(map(int, data[index + 1:index + 1 + N])) test_cases.append((N, sequence)) index += N + 1 results = analyze_plant_sequences(test_cases) for result in results: print(result)"},{"question":"You are given a binary tree where each node has a value. Write a function to determine the k-th ancestor of a given node in the tree. The k-th ancestor of a node is defined as the k-th node in the path from the node to the root. If there are fewer than k nodes on the path, return -1. The binary tree is provided as an array where the parent-child relationship is implicit; the root node is at index 0, and for any node at index i, its left child is at index 2i + 1 and its right child is at index 2i + 2. You will also be provided with an array of queries. Each query consists of a node index and a value k. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^4), representing the number of nodes in the binary tree. The second line contains n integers, representing the values of the nodes in the binary tree. The third line contains an integer q (1 ≤ q ≤ 10^4), representing the number of queries. Each of the next q lines contains two integers: node_index (0 ≤ node_index < n) and k (1 ≤ k ≤ 10^4), which represent the node index and the ancestor level. -----Output----- For each query, print the value of the k-th ancestor of the given node, or -1 if it does not exist. -----Examples----- Input 7 3 5 8 6 2 9 7 3 4 2 6 3 2 1 Output 3 -1 8 Input 5 10 20 30 40 50 2 3 1 4 2 Output 10 10 -----Note----- In the first example: The binary tree can be visualized as follows: ``` 3 / 5 8 / / 6 2 9 7 ``` - For the query (4, 2), Node 4 is at index 4, its value is 2. Its path to the root is: 2 (index 4) -> 5 (index 1) -> 3 (index 0). The 2nd ancestor is the node with value 3. - For the query (6, 3), Node 6 is at index 6, its value is 7. Its path to the root is: 7 (index 6) -> 8 (index 2) -> 3 (index 0). The 3rd ancestor does not exist. - For the query (2, 1), Node 2 is at index 2, its value is 8. Its 1st ancestor is the node with value 8 itself. In the second example: The binary tree can be visualized as follows: ``` 10 / 20 30 / 40 50 ``` - For the query (3, 1), Node 3 is at index 3, its value is 40. Its path to the root is: 40 (index 3) -> 20 (index 1) -> 10 (index 0). The 1st ancestor is the node with value 20. - For the query (4, 2), Node 4 is at index 4, its value is 50. Its path to the root is: 50 (index 4) -> 20 (index 1) -> 10 (index 0). The 2nd ancestor is the node with value 10.","solution":"def find_kth_ancestor(n, values, queries): def get_ancestors(node_index): ancestors = [] while node_index > 0: node_index = (node_index - 1) // 2 ancestors.append(node_index) return ancestors results = [] for node_index, k in queries: ancestors = get_ancestors(node_index) if k > len(ancestors): results.append(-1) else: ancestor_index = ancestors[k - 1] results.append(values[ancestor_index]) return results"},{"question":"You have been given a list of words. Your task is to write a function that returns the longest word from the list. If there are multiple words with the same length, return the one that appears first. Examples: ``` python longest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) == \\"banana\\" longest_word([\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\", \\"abc\\"]) == \\"abcd\\" longest_word([\\"same\\", \\"size\\", \\"test\\", \\"case\\"]) == \\"same\\" longest_word([\\"\\"]) == \\"\\" ``` Note: - The input list contains at least one word. - Words only contain alphabetical characters. No need to handle punctuation or numbers. - The solution should work for both Python 2 and Python 3.","solution":"def longest_word(words): Returns the longest word in the list of words. If there are multiple words with the same length, returns the one that appears first. longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates the expression. The string may contain the following characters: digits (\'0\'-\'9\'), parentheses (\'(\' and \')\'), addition and subtraction operators (\'+\' and \'-\'), and whitespace (\' \'). The function should handle properly nested parentheses and follow standard operator precedence (i.e., parentheses, then addition/subtraction from left to right). Example input and output: ```python \\"1 + 1\\" -> 2 \\" 2-1 + 2 \\" -> 3 \\"(1+(4+5+2)-3)+(6+8)\\" -> 23 ```","solution":"def evaluate_expression(s): Evaluates a mathematical expression string containing digits, parentheses, addition and subtraction. Follows standard operator precedence. def helper(tokens): stack = [] num = 0 sign = 1 while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) elif token in \'+-\': stack.append(num * sign) num = 0 sign = 1 if token == \'+\' else -1 elif token == \'(\': num = helper(tokens) elif token == \')\': break stack.append(num * sign) return sum(stack) tokens = [] for char in s: if char in \'0123456789+-()\': tokens.append(char) elif char == \' \': continue return helper(tokens)"},{"question":"Minion is assigned a task to process a text to determine if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Minion wants to know how many substrings of the given string are palindromes. -----Input:----- - The first line contains a single integer T, the number of test cases. - The next T lines each contain a string S. -----Output:----- For each test case, output a single integer representing the number of palindromic substrings in the given string S. -----Constraints----- - 1 leq T leq 50 - 1 leq length(S) leq 1000 - The string S contains only lowercase and uppercase English letters. -----Sample Input:----- 2 ababa racecar -----Sample Output:----- 9 10","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 def is_palindrome(sub): return sub == sub[::-1] for i in range(n): for j in range(i, n): if is_palindrome(S[i:j+1]): count += 1 return count def process_test_cases(test_cases): results = [] for S in test_cases: results.append(count_palindromic_substrings(S)) return results"},{"question":"Given a binary tree, you need to find the maximum sum of the values of nodes on any path from the root node to a leaf node. A binary tree is a tree data structure where each node has at most two children. Each node contains an integer value. You can traverse the tree starting from the root to any of the leaves to find a path. -----Input format----- - The first line of input contains an integer N indicating the number of nodes in the tree. - Each of the next N lines contains an integer value followed by two integers representing the indices of its left and right children respectively. If a node does not have a left or right child, represent it with a -1. The tree is rooted at index 0. -----Output format----- - Output a single integer representing the maximum sum of values along a path from the root node to any leaf node. -----Test Data----- All nodes have values between -10^4 and 10^4. 1 ≤ N ≤ 1000 -----Example----- Here is the sample input and output corresponding to the example above: -----Sample input----- 5 3 1 2 4 -1 -1 5 3 4 7 -1 -1 6 -1 -1 -----Sample output----- 15 Explanation: The tree is as follows: 3 / 4 5 / 7 6 The maximum sum is 3 + 5 + 7 = 15","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_info): nodes = {} for i, (value, left, right) in enumerate(node_info): if i not in nodes: nodes[i] = Node(value) if left != -1: nodes[i].left = nodes[left] if left in nodes else Node(node_info[left][0]) nodes[left] = nodes[i].left if right != -1: nodes[i].right = nodes[right] if right in nodes else Node(node_info[right][0]) nodes[right] = nodes[i].right return nodes[0] def find_max_sum(node): if node is None: return 0 left_sum = find_max_sum(node.left) right_sum = find_max_sum(node.right) return node.value + max(left_sum, right_sum) def maximum_sum_on_path(N, node_info): root = build_tree(node_info) return find_max_sum(root)"},{"question":"Write a function `uniquePairs`, `unique_pairs`, or `UniquePairs` that takes an array of integers and a target integer. Return the number of unique pairs of integers in the array that sum up to the target integer. Each pair should be counted once, and order of elements in the pair doesn’t matter. Example: ``` Input: array = [1, 2, 3, 4, 3], target = 6 Output: 2 Explanation: The pairs (2, 4) and (3, 3) sum up to the target value 6. ```","solution":"def unique_pairs(arr, target): Returns the number of unique pairs of integers in the array that sum up to the target integer. Each pair is counted once, and order of elements in the pair doesn’t matter. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Write a function that takes a list of integers and returns the largest contiguous subarray sum. Your solution should be efficient, with a time complexity of O(n). Aim to implement the algorithm known as \\"Kadane\'s Algorithm.\\" # Example `[-2,1,-3,4,-1,2,1,-5,4]` -> 6 `[1,2,3,4,-10]` -> 10 `[-1,-2,-3,-4]` -> -1 Hint The brute force approach would involve checking all possible subarrays, which can be very inefficient for large lists. Kadane\'s Algorithm allows you to find the maximum sum in linear time by iterating through the array and keeping track of the current subarray sum and the maximum sum found so far.","solution":"def max_subarray_sum(arr): Finds the largest sum of a contiguous subarray using Kadane\'s Algorithm. Args: arr (list): List of integers. Returns: int: The largest sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Your Task In the town of Numland, there is a famous gardener who likes to arrange flowers in a specific pattern. The pattern follows these rules: * The gardener starts with a row of `n` flowers. * In each subsequent step, the gardener increases the row by adding one more flower than the previous one. * For instance, if the starting row has 2 flowers, the next row will have 3 flowers, the one after it will have 4 flowers, and so on. You are given an initial number of flowers `n` and a specific step `k`. Your task is to compute the total number of flowers in the `k`-th step. Input * An integer `n` representing the number of flowers in the starting row. * An integer `k` representing the step number. Output * An integer representing the total number of flowers in the `k`-th step. Example ___ # Input 2 3 # Output 5 ___ # Input 4 5 # Output 8","solution":"def total_flowers(n, k): Calculate the total number of flowers in the k-th step. Parameters: n (int): Initial number of flowers. k (int): The step number. Returns: int: Total number of flowers in the k-th step. return n + (k - 1)"},{"question":"Given a list of unique characters, find all possible permutations of these characters. The permutations should be output in lexicographical order. Example: characters = [\'a\', \'b\', \'c\'] The possible permutations are: [\'a\', \'b\', \'c\'] [\'a\', \'c\', \'b\'] [\'b\', \'a\', \'c\'] [\'b\', \'c\', \'a\'] [\'c\', \'a\', \'b\'] [\'c\', \'b\', \'a\'] Therefore the output is [[\'a\', \'b\', \'c\'], [\'a\', \'c\', \'b\'], [\'b\', \'a\', \'c\'], [\'b\', \'c\', \'a\'], [\'c\', \'a\', \'b\'], [\'c\', \'b\', \'a\']]. Follow up: What if the characters are not unique? How does it change the problem? What additional steps do we need to take to ensure the permutations are still generated correctly?","solution":"from itertools import permutations def find_permutations(characters): Given a list of unique characters, find all possible permutations in lexicographical order. :param characters: List of unique characters. :return: List of permutations sorted lexicographically. return sorted([\'\'.join(p) for p in permutations(characters)])"},{"question":"Alex loves sequences and transformations. He has a sequence of integers a_1, a_2, ldots, a_N. Alex can perform the following operation any number of times: - Choose an element a_i and transform it into a new value: a_i becomes a_i oplus K, where oplus denotes the bitwise XOR operation and K is a given integer. Alex wants to know the minimum number of operations required to make all elements of the sequence equal to some integer X. Help Alex by answering his queries. -----Input----- - The first line of the input contains a single integer T (1 ≤ T ≤ 100) denoting the number of test cases. - The description of each test case follows. - The first line of each test case contains two space-separated integers N and K (1 ≤ N ≤ 10^5, 0 ≤ K ≤ 10^9). - The second line contains N space-separated integers a_1, a_2, ldots, a_N. - The third line contains an integer Q (1 ≤ Q ≤ 2 cdot 10^5). - The fourth line contains Q space-separated integers X_1, X_2, ldots, X_Q, the target values to which Alex wants to transform the sequence. -----Output----- For each query, print a single line containing a single integer ― the minimum number of operations required to make all elements of the sequence equal to the corresponding X. -----Constraints----- - The sum of N in all test cases does not exceed 10^6. - The sum of Q in all test cases does not exceed 2 cdot 10^6. - 0 le a_i le 10^9 for each valid i. - 0 le X_j le 10^9 for each valid j. -----Example Input----- 2 3 2 1 2 3 2 3 1 4 3 4 8 2 6 3 2 6 0 -----Example Output----- 2 3 4 3 -----Explanation----- Example case 1: - For the first query, the minimum number of operations to make {1, 2, 3} all equal to 3, is: Transform 1 to 3 (1 operation) and 2 to 3 (1 operation), total 2 operations. - For the second query, the minimum number of operations to make {1, 2, 3} all equal to 1, is: No transformation needed for 1, and we need to transform both 2 to 1 and 3 to 1, total 2 operations. Example case 2: - For the first query, the minimum number of operations to make {4, 8, 2, 6} all equal to 2, is: Transform 4 to 2 (1 operation), 8 to 2 (1 operation), and 6 to 2 (1 operation), total 3 operations. - For the second query, the minimum number of operations to make {4, 8, 2, 6} all equal to 6, is: Transform 4 to 6 (1 operation), 8 to 6 (1 operation), and 2 to 6 (1 operation), total 3 operations. - For the third query, the minimum number of operations to make {4, 8, 2, 6} all equal to 0, is: Transform 4 to 0 (1 operation), 8 to 0 (1 operation), 2 to 0 (1 operation), and 6 to 0 (1 operation), total 4 operations.","solution":"def min_operations_to_transform(N, K, a, Q, targets): results = [] for X in targets: operations = 0 for value in a: if value != X: if K == 0: operations += float(\'inf\') # Impossible to change value else: operations += 1 results.append(operations) return results"},{"question":"You are given a binary search tree (BST) with unique values. A BST is a binary tree in which each node has at most two children, where for every node, the values in the left subtree are strictly less than the node\'s value, and the values in the right subtree are strictly greater than the node\'s value. Your task is to write a function that finds the k-th smallest element in this BST. The function should take two arguments: 1. The root of the binary search tree. 2. An integer k. You can assume that k is always valid, i.e., 1 ≤ k ≤ number of nodes in the BST. # Function Signature ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kthSmallest(root: TreeNode, k: int) -> int: pass ``` # Example ```python # Example BST # 5 # / # 3 6 # / # 2 4 # / # 1 root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(6) root.left.left = TreeNode(2) root.left.right = TreeNode(4) root.left.left.left = TreeNode(1) print(kthSmallest(root, 3)) # Output: 3 ``` # Notes - Your solution should have a time complexity of O(h + k), where h is the height of the BST. - Assume that the BST is valid and contains unique values. # Constraints - The number of nodes in the BST is in the range [1, 10^4]. - The values of the nodes are in the range [-10^4, 10^4].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def kthSmallest(root: TreeNode, k: int) -> int: Returns the k-th smallest element in the binary search tree (BST). def inorder_traversal(node): if node is None: return [] # Inorder traversal: left, root, right return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right) # Perform inorder traversal which returns the elements in sorted order sorted_elements = inorder_traversal(root) # Return the k-th smallest element (1-based index so k-1 is needed) return sorted_elements[k-1]"},{"question":"# Parking Lot Management System You need to design a simulation for a parking lot that can handle incoming and outgoing cars, while also keeping track of occupancy at any given time. The parking lot has a fixed number of slots and cars arriving and departing at different times. Requirements 1. Implement a `ParkingLot` class with the following methods: - `__init__(self, capacity: int)`: Initialize the parking lot with a specified number of slots. - `arrive(self, car_id: int)`: Register the arrival of a car. If there\'s an available slot, park the car and return `True`. If the parking lot is full, return `False`. - `depart(self, car_id: int)`: Register the departure of a car. If the car is in the parking lot, free the slot and return `True`. If the car is not found, return `False`. - `get_occupancy(self)`: Return the current number of occupied slots. - `get_parked_cars(self)`: Return a list of car IDs currently parked in the lot. Example ```python parking_lot = ParkingLot(2) print(parking_lot.arrive(101)) # Output: True (Car 101 arrives) print(parking_lot.arrive(102)) # Output: True (Car 102 arrives) print(parking_lot.arrive(103)) # Output: False (Parking lot is full) print(parking_lot.get_occupancy()) # Output: 2 (2 cars are currently parked) print(parking_lot.depart(101)) # Output: True (Car 101 departs) print(parking_lot.get_parked_cars()) # Output: [102] (Only car 102 is parked) print(parking_lot.arrive(104)) # Output: True (Car 104 arrives, as one slot is now free) print(parking_lot.get_parked_cars()) # Output: [102, 104] (Cars 102 and 104 are parked) print(parking_lot.get_occupancy()) # Output: 2 (2 cars in parking lot) ``` Explanation The example demonstrates the creation of a parking lot with a capacity of 2 slots. Cars with IDs 101, 102, 103, and 104 arrive at the parking lot. Based on the capacity and availability of slots, the cars are parked or denied entry accordingly. The `get_occupancy` and `get_parked_cars` methods provide the current state of the parking lot.","solution":"class ParkingLot: def __init__(self, capacity: int): Initialize the parking lot with a maximum number of slots. self.capacity = capacity self.occupied_slots = 0 self.parked_cars = set() def arrive(self, car_id: int) -> bool: Register the arrival of a car. If there\'s an available slot, park the car and return True. If the parking lot is full, return False. if self.occupied_slots < self.capacity: self.parked_cars.add(car_id) self.occupied_slots += 1 return True return False def depart(self, car_id: int) -> bool: Register the departure of a car. If the car is in the parking lot, free the slot and return True. If the car is not found, return False. if car_id in self.parked_cars: self.parked_cars.remove(car_id) self.occupied_slots -= 1 return True return False def get_occupancy(self) -> int: Return the current number of occupied slots. return self.occupied_slots def get_parked_cars(self) -> list: Return a list of car IDs currently parked in the lot. return list(self.parked_cars)"},{"question":"You are given an integer `n`. Write a function that determines whether `n` is a Narcissistic number. A Narcissistic number (also known as a pluperfect number) for a given number of digits is a number that is the sum of its own digits each raised to the power of the number of digits. For example: - `153` is a Narcissistic number because `1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153` - `9474` is a Narcissistic number because `9^4 + 4^4 + 7^4 + 4^4 = 6561 + 256 + 2401 + 256 = 9474` Implement the function `is_narcissistic(n)` that takes an integer `n` and returns `True` if it is a Narcissistic number, and `False` otherwise. # Examples: - `is_narcissistic(153)` should return `True` - `is_narcissistic(9474)` should return `True` - `is_narcissistic(123)` should return `False` Note: - You can assume the input will be a non-negative integer. Good luck!","solution":"def is_narcissistic(n): Determines if a number is a Narcissistic number. A Narcissistic number is a number that is the sum of its own digits each raised to the power of the number of digits. Args: n (int): The number to be checked. Returns: bool: True if the number is a Narcissistic number, False otherwise. digits = [int(d) for d in str(n)] num_digits = len(digits) narcissistic_sum = sum(d ** num_digits for d in digits) return narcissistic_sum == n"},{"question":"You are given a grid with dimensions n times m consisting of cells that are either open (\'.\') or blocked (\'#\'). You are required to find the length of the shortest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (n, m)) using only valid moves. Valid moves are to move one cell up, down, left, or right, but you cannot move into blocked cells. If there is no such path, return -1. -----Input----- - The first line contains two integers, n and m, which represents the number of rows and columns of the grid respectively. - The next n lines each contain a string of m characters representing the grid. -----Output----- Output a single integer, the length of the shortest path from (1, 1) to (n, m). If there is no such path, output -1. -----Constraints----- - 1 le n, m le 1000 - Each character of the grid is either \'.\' or \'#\'. - The top-left corner and the bottom-right corner of the grid are always open (i.e., the grid[1][1] = grid[n][m] = \'.\'). -----Sample Input----- 5 5 ..... .#. ..#.. . ..... 5 5 ..#.# .#. ..#.. . .#... -----Sample Output----- 8 -1 -----Explanation----- For the first case: A possible shortest path for the grid is: (Start) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4) -> (3,5) -> (4,5) -> (5,5) -> (End) which has a length of 8. For the second case: There is no valid path from the top-left corner to the bottom-right corner due to some blocked cells, hence output is -1.","solution":"from collections import deque def shortest_path(grid): def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and not visited[x][y] n = len(grid) m = len(grid[0]) visited = [[False] * m for _ in range(n)] # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() # Check if we\'ve reached bottom-right corner if x == n-1 and y == m-1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny): queue.append((nx, ny, dist + 1)) visited[nx][ny] = True # If we\'re here, no valid path was found return -1 # Example usage: # grid = [ # \\".....\\", # \\".#.\\", # \\"..#..\\", # \\".\\", # \\".....\\" # ] # print(shortest_path(grid)) # Output should be 8"},{"question":"Mark is planning a scavenger hunt for his family. To make it interesting, he placed some clues in different rooms of the house. Each clue states the next room to go to. However, some rooms might lead back to an already visited room, indicating a cycle. Mark wants to ensure that his family doesn\'t get stuck in a cycle and that they can find a valid path to the final clue. Therefore, he asks you to write a program to determine if there is a valid path through all rooms without getting stuck in a cycle. Given the starting configuration of t different hunts, determine if there\'s a valid path or if the path leads to a cycle. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of scavenger hunt tests. Each description of a scavenger hunt follows: The first line of each test contains a single integer n (1 le n le 100) — the number of rooms. The second line contains n integers r_1, r_2, dots, r_n (0 le r_i le n), where r_i represents the next room number to go to when the clue in the i-th room is followed. If r_i is 0, it means the room i does not lead to any other room. -----Output----- For each test, print on a single line \\"Valid\\" if there is a valid path that visits each room without entering a cycle, or \\"Cycle\\" if it leads to a cycle. -----Example----- Input 2 4 2 3 4 0 3 1 2 3 Output Valid Cycle -----Note----- In the first hunt, the rooms lead to the sequence 1 to 2 to 3 to 4 to 0, which means there is no cycle and all rooms are visited, so the output is \\"Valid\\". In the second hunt, the rooms lead to the sequence 1 to 2 to 3 to 1, which forms a cycle, so the output is \\"Cycle\\".","solution":"def is_valid_path(hunts): Determines if there\'s a valid path without a cycle for each scavenger hunt. Parameters: hunts (list of list of int): List of scavenger hunts, each hunt is represented as a list of room numbers. Returns: list of str: \\"Valid\\" if there\'s a valid path without cycle for the respective hunt, otherwise \\"Cycle\\". results = [] for hunt in hunts: n = len(hunt) visited = [False] * n in_stack = [False] * n def dfs(v): if visited[v]: return not in_stack[v] visited[v] = True in_stack[v] = True next_room = hunt[v] - 1 # Convert to 0-based index if next_room != -1 and not dfs(next_room): return False in_stack[v] = False return True all_valid = True for i in range(n): if not visited[i]: if not dfs(i): all_valid = False break results.append(\\"Valid\\" if all_valid else \\"Cycle\\") return results # Helper function to parse the input def parse_input(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) index = 1 hunts = [] for _ in range(t): n = int(input_lines[index]) r = list(map(int, input_lines[index + 1].split())) hunts.append(r) index += 2 return hunts def scavenger_hunts(input_data): hunts = parse_input(input_data) return is_valid_path(hunts)"},{"question":"A permutation of a string is another string that contains same characters, only the order of characters can be different. For example, “abcd” and “dabc” are permutations of each other. Your task is to check if two given strings are permutations of each other. Write a function `are_permutations(str1, str2)` that takes two strings as input and returns `True` if they are permutations of each other, otherwise returns `False`. **Input:** - str1: A string with alphanumeric characters. - str2: A string with alphanumeric characters. **Output:** - Boolean: `True` if the strings are permutations of each other, `False` otherwise. **Examples:** ```python print(are_permutations(\'abc\', \'cba\')) # should return True print(are_permutations(\'abc\', \'abz\')) # should return False print(are_permutations(\'abc\', \'abcd\')) # should return False print(are_permutations(\'aaaa\', \'aaaa\')) # should return True ``` **Constraints:** - The function should be case sensitive, i.e., \'A\' and \'a\' are considered different characters. - The function should maintain an efficient time complexity, ideally O(n), where n is the length of the given strings.","solution":"def are_permutations(str1, str2): Check if the two given strings are permutations of each other. Args: str1: string str2: string Returns: bool: True if the strings are permutations of each other, False otherwise. if len(str1) != len(str2): return False char_count = {} for char in str1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in str2: if char in char_count: char_count[char] -= 1 if char_count[char] == 0: del char_count[char] else: return False return len(char_count) == 0"},{"question":"=====Function Descriptions===== itertools.permutations() This tool returns successive r-length permutations of elements in an iterable. Permutations are emitted in lexicographic sort order. So if the input iterable is sorted, the permutation tuples will be produced in a sorted order. Sample Code >>> from itertools import permutations >>> print list(permutations([\'1\',\'2\',\'3\'],2)) [(\'1\', \'2\'), (\'1\', \'3\'), (\'2\', \'1\'), (\'2\', \'3\'), (\'3\', \'1\'), (\'3\', \'2\')] >>> print list(permutations(\'abc\',2)) [(\'a\', \'b\'), (\'a\', \'c\'), (\'b\', \'a\'), (\'b\', \'c\'), (\'c\', \'a\'), (\'c\', \'b\')] >>> A = [1,2,3] >>> print list(permutations(A)) [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)] >>> B = [1, 2, 3, 4] >>> print list(permutations(B, 3)) [(1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 2, 1), (4, 2, 3), (4, 3, 1), (4, 3, 2)] =====Problem Statement===== Given a list S, find all possible permutations of length r (where r is an integer such that 0 ≤ r ≤ len(S)) from the list. Example S = [1, 2, 3] r = 2 Possible permutations of length 2 are: (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2) =====Input Format===== The first line contains the space-separated elements of list S. The second line contains the integer r. =====Constraints===== 0<r<=len(S) 1<=len(S)<=8 =====Output Format===== Print all possible permutations of length r from the list S, each permutation on a new line.","solution":"from itertools import permutations def find_permutations(S, r): Given a list S, find all possible permutations of length r from the list. Args: S (list): The list of elements. r (int): The length of each permutation. Returns: list: A list of tuples, each containing a permutation of length r. return list(permutations(S, r))"},{"question":"Write a function `array_diff(a, b)` that subtracts all values b from array a, while preserving the order of array a. # Examples: ```python array_diff([1,2], [1]) == [2] array_diff([1,2,2], [1]) == [2,2] array_diff([1,2,2], [2]) == [1] array_diff([1,2,2], []) == [1,2,2] array_diff([], [1,2]) == [] ``` # Notes: - If a value in `b` is not present in `a`, no changes should be made for that value. - If a value in `b` appears multiple times in `a`, all instances should be removed. - Preserve the order of elements from `a` that are not deleted.","solution":"def array_diff(a, b): Returns a new list which excludes elements from \'a\' that are present in \'b\'. return [x for x in a if x not in b]"},{"question":"Given a two-dimensional array that represents a grid of integers, write a function that finds the length of the longest increasing path in the grid. The path can move in four directions: left, right, up, or down. Diagonal moves are not allowed. To solve the problem efficiently, you should use dynamic programming along with Depth-First Search (DFS). You may assume that the grid contains at least one integer. Function signature: ```python def longestIncreasingPath(matrix: List[List[int]]) -> int: pass ``` # Constraints - The number of rows in the grid will be in the range [1, 200]. - The number of columns in the grid will be in the range [1, 200]. - Each cell contains an integer. - Moves are limited to up, down, left, and right, and you can only move to a cell with a strictly greater value than the current cell. # Example ``` Input: matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Input: matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 ``` # Explanation In the first example, the longest increasing path is `[1, 2, 6, 9]` which has a length of 4. In the second example, the longest increasing path is `[3, 4, 5, 6]` which also has a length of 4. Note that while the direction of movement is restricted, the path must always be strictly increasing.","solution":"from typing import List def longestIncreasingPath(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1] * cols for _ in range(rows)] def dfs(row, col): if dp[row][col] != -1: return dp[row][col] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_path = 1 for dr, dc in directions: newRow, newCol = row + dr, col + dc if 0 <= newRow < rows and 0 <= newCol < cols and matrix[newRow][newCol] > matrix[row][col]: max_path = max(max_path, 1 + dfs(newRow, newCol)) dp[row][col] = max_path return max_path longest_path = 0 for row in range(rows): for col in range(cols): longest_path = max(longest_path, dfs(row, col)) return longest_path"},{"question":"You are working for a logistics company that needs to optimize the delivery route for a single delivery truck. The truck needs to deliver packages to multiple locations in a city, returning to the starting point after all deliveries are completed. The delivery truck should minimize the total distance traveled. The city map is represented as a weighted undirected graph where nodes represent locations and edges represent direct roads between locations with their respective distances. Your job is to find the optimal route that visits each location exactly once and returns to the starting location, known as the Traveling Salesperson Problem (TSP). However, due to time constraints, you need to provide a heuristic solution that approximates the shortest possible route. Use the nearest neighbor heuristic to construct an approximate solution for TSP. -----Input----- The first line contains an integer n (2 ≤ n ≤ 20) — the number of locations in the city. The next n lines contain n integers each, where the j-th integer in the i-th line represents the distance between location i and location j (0 for diagonal elements since there\'s no distance between a location and itself). -----Output----- The output should contain two lines. The first line should contain the approximate minimal distance of the route. The second line should contain the order in which to visit the locations, starting and ending at location 1. -----Examples----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 1 2 4 3 1 Input 3 0 10 15 10 0 20 15 20 0 Output 45 1 2 3 1 -----Note----- In the first test case, starting at location 1, the nearest neighbor heuristic would visit location 2 first (distance 10), then the nearest unvisited location from location 2 is location 4 (distance 25), and finally returning from location 4 to location 3 before coming back to the starting point 1. The total distance would approximate 80.","solution":"def tsp_nearest_neighbor(n, distances): Solves the TSP problem using the nearest neighbor heuristic. Args: n : int : number of locations in the city distances : list of list of int : n x n matrix of distances between locations Returns: int : approximate minimal distance of the route list of int : order of locations to visit, starting and ending at 1 unvisited = set(range(n)) current_location = 0 route = [current_location] total_distance = 0 while len(unvisited) > 1: unvisited.remove(current_location) nearest_neighbor = min(unvisited, key=lambda x: distances[current_location][x]) total_distance += distances[current_location][nearest_neighbor] route.append(nearest_neighbor) current_location = nearest_neighbor # return to starting point total_distance += distances[current_location][route[0]] route.append(route[0]) return total_distance, [x + 1 for x in route] def parse_input(input_str): Parses the input string and returns number of locations and distance matrix. Args: input_str: str : input string Returns: int : number of locations list of list of int : n x n distance matrix lines = input_str.strip().split(\\"n\\") n = int(lines[0]) distances = [list(map(int, line.split())) for line in lines[1:]] return n, distances"},{"question":"Given an array nums of n integers, return an array of all the unique triplets [nums[i], nums[j], nums[k]] such that 0 ≤ i < j < k < n and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. Write the code that will find and return all such triplets: vector<vector<int>> threeSum(vector<int>& nums); Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Note: - The solution must not contain duplicate triplets. - Consider edge cases where the input array has fewer than three elements.","solution":"def three_sum(nums): Returns a list of unique triplets in the list nums, such that the triplet sums to zero. nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, len(nums)-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left+1]: left += 1 while left < right and nums[right] == nums[right-1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets"},{"question":"A company has a system to manage employee records. Each month, employees are required to report the task IDs of the projects they have worked on, in any order. If an employee works multiple times on the same task during the month, the task ID will appear multiple times in their report. Management wants to create a summary that lists each unique task ID and the number of times each employee worked on that task. Write a function to generate the monthly task report for the employees. The function should take as input the number of employees, followed by each employee\'s task IDs listed in the order they are reported. The function should then output the summary in the form of a dictionary where the keys are the employee IDs (starting from 1 to N) and the values are dictionaries that map unique task IDs to the number of times they were worked on. -----Input----- The input begins with an integer N, the number of employees. Each of the next N lines contains a space-separated list of task IDs (integers) reported by the i-th employee. -----Output----- The output should be a dictionary where each key is an employee ID (from 1 to N) and each value is another dictionary that maps each unique task ID to the number of times the employee worked on that task. -----Constraints----- - N ≤ 100 - 1 ≤ number of task IDs reported by each employee ≤ 100 - 1 ≤ task ID ≤ 1000 -----Example----- Input: 3 1 2 2 3 4 4 5 6 1 1 5 Output: { 1: {1: 1, 2: 2, 3: 1}, 2: {4: 2, 5: 1, 6: 1}, 3: {1: 2, 5: 1} }","solution":"def monthly_task_report(n, task_reports): Generates a monthly task report summarizing the unique task IDs and the number of times each employee worked on that task. :param n: Integer, number of employees :param task_reports: List of strings, each containing space-separated task IDs reported by the i-th employee :return: Dictionary mapping employee IDs to dictionaries mapping unique task IDs to the number of times worked report_summary = {} for employee_id in range(1, n + 1): tasks = task_reports[employee_id - 1].split() task_count = {} for task in tasks: task = int(task) if task in task_count: task_count[task] += 1 else: task_count[task] = 1 report_summary[employee_id] = task_count return report_summary # Example usage: report_input = [ \\"1 2 2 3\\", \\"4 4 5 6\\", \\"1 1 5\\" ] print(monthly_task_report(3, report_input))"},{"question":"Design a function to determine if a string contains all the vowels at least once. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each of the next T lines contains a single string S. -----Output----- For each test case, output a single line containing the word \\"YES\\" or \\"NO\\" (without quotes) depending on whether the string S contains all the vowels \'a\', \'e\', \'i\', \'o\', \'u\' at least once. -----Constraints----- - 1 ≤ T ≤ 10^4 - 1 ≤ |S| ≤ 10^5 - Strings S will contain only lowercase English characters. -----Example----- Input: 2 education beautiful Output: YES NO -----Explanation----- Example case 1. The string \\"education\\" contains all the vowels: \'a\', \'e\', \'i\', \'o\', \'u\'. Example case 2. The string \\"beautiful\\" is missing the vowel \'o\'.","solution":"def contains_all_vowels(s): Checks whether the input string s contains all the vowels \'a\', \'e\', \'i\', \'o\', \'u\' at least once. :param s: Input string :return: \'YES\' if the string contains all the vowels, otherwise \'NO\' vowels = set(\'aeiou\') found_vowels = set(c for c in s if c in vowels) return \'YES\' if found_vowels == vowels else \'NO\' def handle_test_cases(t, cases): Processes a list of test cases and determines for each case whether the input string contains all vowels. :param t: Number of test cases :param cases: List of strings, each representing a test case :return: List of results for each test case results = [contains_all_vowels(s) for s in cases] return results"},{"question":"Task Write code to transpose a square matrix represented as an `n x n` list of lists. # Input - `n x n` list of lists where elements are integers. - It is guaranteed that `1 <= n <= 1000`. # Output - The transposed matrix, also an `n x n` list of lists. The transpose of a matrix is obtained by swapping the rows and columns of the matrix. For a matrix `M`, the element at position (i, j) in the original matrix will be at position (j, i) in the transposed matrix. # Examples ``` input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] transpose_matrix(input_matrix) == [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` ``` input_matrix = [ [1, 2], [3, 4] ] transpose_matrix(input_matrix) == [ [1, 3], [2, 4] ] ```","solution":"def transpose_matrix(matrix): Returns the transpose of the given square matrix. :param matrix: n x n list of lists :return: n x n list of lists with transposed elements n = len(matrix) transposed = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed[j][i] = matrix[i][j] return transposed"},{"question":"___ The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For this task, you need to generate the Fibonacci series up to a certain number n. ___ # Task Write a function that takes an integer n as input and returns a list containing the Fibonacci series up to the nth number. Notes: - The sequence starts with [0, 1, 1, 2, 3, 5, 8, ...]. - If n = 0, return an empty list []. If n = 1, return [0]. - Assume n is a non-negative integer. ___ Examples ```python generate_fibonacci(0) == [] generate_fibonacci(1) == [0] generate_fibonacci(5) == [0, 1, 1, 2, 3] generate_fibonacci(7) == [0, 1, 1, 2, 3, 5, 8] ```","solution":"def generate_fibonacci(n): Generates the Fibonacci series up to the nth number. Parameters: n (int): The number of elements in the Fibonacci series to generate. Returns: list: The Fibonacci series up to the nth number. if n == 0: return [] if n == 1: return [0] fibonacci_series = [0, 1] for i in range(2, n): next_number = fibonacci_series[-1] + fibonacci_series[-2] fibonacci_series.append(next_number) return fibonacci_series"},{"question":"Write a Python function that takes in a list of dictionaries, where each dictionary contains \'name\' (string) and \'score\' (integer) of a student. The function should return a list of names of students who scored above 75. For example: ```python students = [ {\\"name\\": \\"Alice\\", \\"score\\": 85}, {\\"name\\": \\"Bob\\", \\"score\\": 70}, {\\"name\\": \\"Cathy\\", \\"score\\": 80} ] print(high_scorers(students)) ``` Output: ``` [\'Alice\', \'Cathy\'] ``` *Note: If no student scores above 75, the function should return an empty list.*","solution":"def high_scorers(students): Returns a list of names of students who scored above 75. :param students: List of dictionaries with keys \'name\' and \'score\' :return: List of names with scores above 75 return [student[\'name\'] for student in students if student[\'score\'] > 75]"},{"question":"Imagine you are given a string `s` which consists of lowercase and uppercase alphabetic characters. Write a function that returns a new string formed by rearranging the characters of `s` such that two adjacent characters are not the same. If such rearrangement is not possible, return an empty string. Example: Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" Note: The input string `s` will have a length up to 500.","solution":"import heapq from collections import Counter def rearrange_string(s: str) -> str: Rearranges the characters of s such that no two adjacent characters are the same. Returns an empty string if such rearrangement is not possible. # Count frequency of each character counter = Counter(s) # Create a max heap based on character frequency max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return rearranged_string else: return \\"\\""},{"question":"Given a string representing a file path in a Unix-style filesystem, your task is to simplify the path and return a standardized version. The path may contain multiple slashes (`/`), dots (`.`) representing the current directory, and double dots (`..`) representing the parent directory. For example, given the input string `\\"/home//user/.././docs/\\"`, the simplified version should be `\\"/home/docs\\"`. Implement the function `simplify_path(path: str) -> str` that takes a string path and returns the simplified standardized version of the path. **Constraints:** - The input path is a non-empty string consisting of printable ASCII characters. - The path starts with a single slash `/` which represents the root directory. - The simplified path should start with a single slash and should not contain any trailing slashes unless it is the root directory \\"/\\" itself. **Examples:** ```python assert simplify_path(\\"/home/\\") == \\"/home\\" assert simplify_path(\\"/../\\") == \\"/\\" assert simplify_path(\\"/home//user/.././docs/\\") == \\"/home/docs\\" assert simplify_path(\\"/a/./b/../../c/\\") == \\"/c\\" ```","solution":"def simplify_path(path: str) -> str: Simplifies a Unix-style file path. parts = path.split(\'/\') stack = [] for part in parts: if part == \'\' or part == \'.\': continue elif part == \'..\': if stack: stack.pop() else: stack.append(part) return \'/\' + \'/\'.join(stack)"},{"question":"Write a function `long_pressed_name` to determine if a string `typed` could have been produced by long pressing the characters on a string `name`. When a character is long pressed, it gets typed one or more times. Implement a function that takes two strings `name` and `typed` and returns `True` if `typed` could be created based on the long-pressed characters of `name`, otherwise returns `False`. For example: ```python def long_pressed_name(name: str, typed: str) -> bool: # your code here # Examples print(long_pressed_name(\\"alex\\", \\"aaleex\\")) # True (a and e are long pressed) print(long_pressed_name(\\"saeed\\", \\"ssaaedd\\")) # False (d is missed) print(long_pressed_name(\\"leelee\\", \\"lleeelee\\")) # True (l and e are long pressed) print(long_pressed_name(\\"laiden\\", \\"laiden\\")) # True (no characters are long pressed) ``` # Constraints - 1 <= name.length, typed.length <= 1000 - Both `name` and `typed` consists of only lowercase English letters.","solution":"def long_pressed_name(name: str, typed: str) -> bool: Check if `typed` could be produced by long pressing the characters in `name`. i, j = 0, 0 while j < len(typed): if i < len(name) and name[i] == typed[j]: i += 1 elif j == 0 or typed[j] != typed[j - 1]: return False j += 1 return i == len(name)"},{"question":"Given a string `s` and a dictionary of words `wordDict`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words. Return the sentences formed by such a segmentation, preserving the order of words in the original string. You may assume the dictionary does not contain duplicate words. Example: Input: s = \\"catsanddog\\" wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: [ \\"cats and dog\\", \\"cat sand dog\\" ] Constraints: * The input string and dictionary lengths are both up to 3000. * The dictionary contains valid English words without duplicates. * The string is lowercase and has no punctuation, special characters, or spaces apart from being segmented into words.","solution":"def wordBreak(s, wordDict): Returns all possible sentences from the string that can be segmented into space-separated sequence of words from the dictionary. word_set = set(wordDict) memo = {len(s): [\'\']} def sentences(i): if i not in memo: memo[i] = [] for j in range(i + 1, len(s) + 1): word = s[i:j] if word in word_set: for tail in sentences(j): memo[i].append(word + (tail and \' \' + tail)) return memo[i] return sentences(0)"},{"question":"In a country far away, people celebrate a special festival where every year they create patterns with stars in the shape of an inverted pyramid. The pattern always starts with N stars in the first row, followed by N-1 stars in the second row, and decreases one star per row until there\'s only 1 star in the last row. One day, a curious child named Tia wants to know how many stars are used to create the pattern for a given N. Can you help Tia by calculating the total number of stars in the pattern? -----Input----- The first line of the input contains a single integer T denoting the number of test-cases. T test cases follow. For each test case, there will be a single line containing a single integer N. -----Output----- Output the answer for each test-case in a single line. The answer should be the total number of stars used to create the pattern. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^6 -----Example----- Input:3 3 5 1000 Output:6 15 500500 (Note: The sum of the first N natural numbers is given by the formula N * (N + 1) / 2)","solution":"def total_stars_in_pattern(n): Returns the total number of stars in an inverted pyramid pattern with the widest row containing n stars. return n * (n + 1) // 2 def process_test_cases(test_cases): Processes multiple test cases and returns the results for each case. results = [] for n in test_cases: results.append(total_stars_in_pattern(n)) return results"},{"question":"You are responsible for developing a program to help manage a small city\'s water distribution system. The city has several water tanks, and you need to keep track of how much water each tank contains at any given time. The tanks can be filled or drained according to certain requests. Your task is to write a function `manage_water_flow` that will process a series of requests and return the resulting water levels in each tank. Your function will receive two parameters: 1. An initial_list that represents the initial water level (in liters) in each tank. 2. A list of requests, where each request is a dictionary with: - \\"tank\\" (zero-based index of the tank), - \\"operation\\" (a string: either \\"fill\\" or \\"drain\\"), - \\"amount\\" (an integer representing the amount of water to fill or drain in liters). The function should adjust the water levels according to the requests and return the resulting water levels as a list. - If a \\"fill\\" operation would cause the tank\'s water level to exceed its maximum capacity of 1000 liters, just set the water level to 1000 liters. - If a \\"drain\\" operation would cause the tank\'s water level to drop below 0 liters, just set the water level to 0 liters. Example: ```python initial_list = [500, 200, 800] requests = [{\\"tank\\": 0, \\"operation\\": \\"fill\\", \\"amount\\": 350}, {\\"tank\\": 1, \\"operation\\": \\"drain\\", \\"amount\\": 250}, {\\"tank\\": 2, \\"operation\\": \\"fill\\", \\"amount\\": 500}, {\\"tank\\": 0, \\"operation\\": \\"drain\\", \\"amount\\": 1000}] manage_water_flow(initial_list, requests) # should return: [850, 0, 1000] initial_list = [1000, 50] requests = [{\\"tank\\": 0, \\"operation\\": \\"fill\\", \\"amount\\": 100}, {\\"tank\\": 1, \\"operation\\": \\"drain\\", \\"amount\\": 100}] manage_water_flow(initial_list, requests) # should return: [1000, 0] ``` Write a function `manage_water_flow(initial_list, requests)` that takes in an initial list and a list of requests, and returns the resulting water levels in each tank.","solution":"def manage_water_flow(initial_list, requests): Manage the water levels in the tanks based on the requests. Parameters: initial_list: List[int] - Initial water levels of the tanks. requests: List[dict] - List of requests to either fill or drain the tanks. Returns: List[int] - The final water levels of the tanks after processing the requests. for request in requests: tank = request[\\"tank\\"] operation = request[\\"operation\\"] amount = request[\\"amount\\"] if operation == \\"fill\\": initial_list[tank] += amount if initial_list[tank] > 1000: initial_list[tank] = 1000 elif operation == \\"drain\\": initial_list[tank] -= amount if initial_list[tank] < 0: initial_list[tank] = 0 return initial_list"},{"question":"Anagram Finder An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Write a function `anagram_finder` that takes a list of words and returns a list of lists, where each sublist contains words that are anagrams of one another. Input - A list of strings `words` (each string contains only lowercase English alphabet letters). Output - A list of lists, where each sublist contains all words from the input list that are anagrams of each other. - The sublists can be in any order, and the words within each sublist can also be in any order. - Each word must belong to exactly one sublist. Example ```python input_list = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"rat\\", \\"tar\\", \\"art\\", \\"evil\\", \\"vile\\", \\"veil\\"] output = [[\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"], [\\"rat\\", \\"tar\\", \\"art\\"], [\\"evil\\", \\"vile\\", \\"veil\\"]] ``` Constraints - The length of the input list does not exceed 1000 elements. - Each word will not exceed 50 characters. Notes - All input characters are lowercase. - If a word has no anagrams in the list, it should be included in a sublist by itself. # Function Signature ```python def anagram_finder(words: List[str]) -> List[List[str]]: pass ```","solution":"from collections import defaultdict from typing import List def anagram_finder(words: List[str]) -> List[List[str]]: Function to find anagrams in a list of words and return a list of lists where each sublist contains anagrams. :param words: List of strings :return: List of lists of anagrams anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given a grid of size NxM representing a playing field where some cells are marked with 1 (indicating a barrier) and others with 0 (indicating open space). A robot is placed at the top-left cell of the grid and it needs to reach the bottom-right cell. The robot can only move right or down at each step. Determine the total number of unique paths the robot can take to reach its destination without passing through barriers. -----Input:----- - The first line will contain two integers, N and M, representing the number of rows and columns in the grid. - The next N lines each contain M integers (either 0 or 1) representing the grid. -----Output:----- Output the number of unique paths from the top-left to the bottom-right of the grid. -----Constraints----- - 1 leq N, M leq 100 - The top-left and bottom-right cells will always be 0 (i.e., not barriers). -----Sample Input:----- 3 3 0 0 0 0 1 0 0 0 0 -----Sample Output:----- 2 Explanation: In the given grid: ``` 0 0 0 0 1 0 0 0 0 ``` There are two possible unique paths for the robot: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths for a robot to reach the bottom-right corner of a grid with obstacles. :param grid: List[List[int]]: A 2D list representing the grid where 0 is an open space and 1 is a barrier :return: int: The number of unique paths from top-left to bottom-right of the grid N = len(grid) M = len(grid[0]) if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are given a collection of N distinct integers. Your task is to find the maximum difference between any pair of integers in the collection. The maximum difference is defined as the absolute difference between the maximum and minimum values in the collection. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. Each test case starts with a line containing a single integer N (2 ≤ N ≤ 100), the number of integers in the collection. The next line contains N space-separated integers v1, v2, ..., vN, where each integer ( vi ) satisfies (-10^6 ≤ vi ≤ 10^6). -----Output----- For each test case, print a single line with the maximum difference between any pair of integers in the collection. -----Example----- Input: 3 3 1 4 7 5 -10 -5 0 5 10 2 1000000 -1000000 Output: 6 20 2000000","solution":"def max_difference(T, test_cases): Given the number of test cases and the test cases themselves, this function returns the maximum difference for each test case. results = [] for case in test_cases: N = case[0] values = case[1] max_val = max(values) min_val = min(values) max_diff = max_val - min_val results.append(max_diff) return results"},{"question":"Given a matrix of size N x M filled with integers, you need to find the length of the longest path of consecutive increasing numbers in the matrix. The path can start from any cell and you can move in four possible directions: left, right, up, or down. Diagonal movements are not allowed. Write a function `longestIncreasingPath(matrix: List[List[int]]) -> int` that takes a 2D list representing the matrix and returns an integer representing the length of the longest increasing path. # Examples: **Example 1:** ``` Input: [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. **Example 2:** ``` Input: [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. **Constraints:** - 1 <= N, M <= 200 - -10^4 <= matrix[i][j] <= 10^4 # Hint: Consider using dynamic programming with memoization to avoid recalculating the path lengths for matrix cells that have been visited.","solution":"from typing import List def longestIncreasingPath(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] > matrix[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) dp[x][y] = max_length return max_length directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] dp = [[-1 for _ in range(len(matrix[0]))] for _ in range(len(matrix))] max_path_length = 0 for i in range(len(matrix)): for j in range(len(matrix[0])): max_path_length = max(max_path_length, dfs(i, j)) return max_path_length"},{"question":"# The Problem Given an array of strings, sort them in ascending order of their \\"weight\\". Weight of a string is defined as the sum of ASCII values of its characters. If two strings have the same weight, their original order should be preserved in the sorted array. # Example: ```python input: [\\"abc\\", \\"def\\", \\"a\\", \\"gh\\"] output: [\\"a\\", \\"gh\\", \\"abc\\", \\"def\\"] ``` # Explanation: - \\"abc\\" has a weight of 97 + 98 + 99 = 294 - \\"def\\" has a weight of 100 + 101 + 102 = 303 - \\"a\\" has a weight of 97 - \\"gh\\" has a weight of 103 + 104 = 207 Sorting these by their weights yields: [\\"a\\", \\"gh\\", \\"abc\\", \\"def\\"] # Notes: - The input array will contain at least one string. - Each string will contain only lower-case English letters and will not be empty.","solution":"def custom_sort(string_list): Sorts the list of strings based on their weight (sum of ASCII values of characters). If two strings have the same weight, their original order will be preserved. :param string_list: List of strings to be sorted. :return: List of strings sorted by their weight. def string_weight(s): return sum(ord(char) for char in s) return sorted(string_list, key=string_weight)"},{"question":"Fibonacci Sequence with Dynamic Programming The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. Mathematically, it can be expressed as: ```math F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n geq 2 ``` Traditionally, this sequence is computed using recursive methods, but this approach becomes inefficient for large values of `n` due to overlapping subproblems and stack overflow issues. Therefore, dynamic programming can be applied to improve the efficiency by storing the results of subproblems and reusing them. Task Write a function `fib_dp(n)` that takes an integer `n` as input and returns the nth Fibonacci number using dynamic programming. # Input - An integer `n` (0 ≤ `n` ≤ 1,000,000), representing the position in the Fibonacci sequence. # Output - An integer representing the nth Fibonacci number. # Constraints - Your solution should be able to handle very large input values efficiently. - You must use an iterative dynamic programming approach, avoiding recursion. - Consider the computational limits and potential integer overflow scenarios. # Examples ```python fib_dp(0) should return: 0 fib_dp(1) should return: 1 fib_dp(10) should return: 55 fib_dp(20) should return: 6765 fib_dp(50) should return: 12586269025 fib_dp(1000000) should return some large integer ``` Hints - You can use a list to store intermediate Fibonacci numbers, or you can optimize the space complexity by using only a few variables. - Take advantage of Python’s inherent ability to handle arbitrarily large integers. - Ensure your code runs efficiently even for the upper limit of `n`. Notes Dynamic programming provides a robust way to optimize problems with overlapping subproblems. This approach not only helps in reducing time complexity but also ensures that extremely large values are handled efficiently without recursive stack overflow. Consider edge cases such as `n = 0`, `n = 1`, and very large `n` close to 1,000,000 to validate your implementation.","solution":"def fib_dp(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Given a string comprising only lowercase letters, determine the character that appears most frequently. If there is a tie, return the character that comes first alphabetically. Return the character as a string.","solution":"def most_frequent_char(s: str) -> str: Returns the most frequently occurring character in the string s. If there is a tie, returns the character that comes first alphabetically. from collections import Counter # Count frequency of each character in the string frequency = Counter(s) # Find the maximum frequency max_freq = max(frequency.values()) # Filter characters with the maximum frequency and get the smallest alphabetically most_frequent = min([char for char, freq in frequency.items() if freq == max_freq]) return most_frequent"},{"question":"You are given an array of integers and a target integer. Your task is to find three integers in the array such that their sum is closest to the given target. Return the sum of the three integers. You may assume that each input would have exactly one solution. -----Input----- - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers n and target, where n is the size of the array. - The second line of each test case contains n space-separated integers representing the elements of the array. -----Output----- For every test case, print on a new line the sum of the three integers closest to the target. -----Constraints----- - 1 ≤ T ≤ 1000 - 3 ≤ n ≤ 1000 - -10^3 ≤ array[i] ≤ 10^3 - -10^4 ≤ target ≤ 10^4 -----Example Input----- 2 4 1 -1 2 1 -4 6 6 -5 2 -1 4 7 5 -----Example Output----- 2 6 -----Explanation----- In the first test case, the sum that is closest to the target 1 is 2 (-1 + 2 + 1). In the second test case, the sum that is closest to the target 6 is 6 (-1 + 4 + 3).","solution":"def three_sum_closest(nums, target): Function to find the sum of three integers in the array that is closest to the given target. nums.sort() closest_sum = float(\'inf\') for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum def process_test_cases(T, test_cases): Process multiple test cases for the three_sum_closest function. results = [] for i in range(T): n, target = test_cases[i][0] nums = test_cases[i][1] result = three_sum_closest(nums, target) results.append(result) return results"},{"question":"You are given a string consisting of lowercase letters. Your task is to determine the number of substrings that start and end with the same letter. For example, in the string \\"abcab\\", the substrings \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"aba\\", \\"bcab\\", and \\"abcab\\" start and end with the same letter, making a total of 7 substrings. Implement the function `count_substrings(S: str) -> int` that takes as input a string `S` and returns the number of substrings that start and end with the same letter. # Input - A single string `S` (1 ≤ |S| ≤ 10^5) containing only lowercase English letters. # Output - An integer representing the number of substrings that start and end with the same letter. # Example ```python assert count_substrings(\\"aba\\") == 4 # Substrings: \\"a\\", \\"b\\", \\"a\\", \\"aba\\" assert count_substrings(\\"abcab\\") == 7 # Substrings: \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"aba\\", \\"abcab\\" assert count_substrings(\\"aaa\\") == 6 # Substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" ``` # Constraints Your solution should be efficient with a time complexity better than O(n^2).","solution":"def count_substrings(S: str) -> int: Returns the number of substrings that start and end with the same letter. # Array to keep count of occurrences of each character freq = [0] * 26 # Calculate frequencies of each character for char in S: freq[ord(char) - ord(\'a\')] += 1 # Calculate the number of substrings for each character frequency substr_count = 0 for count in freq: # For a character appearing count times, it forms count single letters, # plus combinations of 2s, 3s, up to count times: (count * (count + 1)) // 2 substr_count += (count * (count + 1)) // 2 return substr_count"},{"question":"You are working on a project that involves creating randomized order for a playlist of songs. Your task is to write a function that takes an input list of song names and returns a playlist where each song appears only once, in a randomized order. Make sure your function retains the uniqueness of each song, and that each shuffle produces a different order if called multiple times on the same list. For example, if your song list is: ```[\'song1\', \'song2\', \'song3\', \'song4\', \'song5\']``` One possible randomized playlist could be: ```[\'song3\', \'song1\', \'song4\', \'song2\', \'song5\']``` Another possible randomized playlist could be: ```[\'song2\', \'song3\', \'song5\', \'song1\', \'song4\']``` The function should work for any list of song names, ensuring that the output list has exactly the same songs, each appearing only once, but in a random order each time the function is called. Note: You can use any built-in function or library for randomization.","solution":"import random def randomize_playlist(songs): Takes a list of song names and returns a new list with the same song names in a randomized order, ensuring each song appears only once. :param songs: List of song names :return: List of song names in randomized order playlist = songs[:] random.shuffle(playlist) return playlist"},{"question":"Anna works as an operations manager at a manufacturing company. She tracks the number of units produced by different departments every month. The company provides bonuses based on the total amount of increase in production over a period of time. Anna wants to calculate the total increase in production after every month for a given period and find out the maximum bonus payable. The bonus is simply equal to the maximum increase observed in any month. Your task is to write a program to help Anna calculate the bonuses. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines. - The first line contains a single integer N, the number of months. - The second line contains N integers representing the production numbers for each month. -----Output:----- For each test case, output a single line containing the maximum bonus payable. -----Constraints:----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10^5 - 0 ≤ Production per month ≤ 10^6 -----Sample Input:----- 2 5 10 20 30 25 35 4 5 5 5 5 -----Sample Output:----- 15 0 -----Explanation:----- - In the first test case, the production numbers are [10, 20, 30, 25, 35]. The month-by-month increases are 10, 10, -5, 10. The maximum bonus payable is 15. - In the second test case, the production numbers are [5, 5, 5, 5]. There is no increase in production in any month, so the maximum bonus payable is 0.","solution":"def calculate_maximum_bonus(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] production_numbers = test_cases[i][1] if N < 2: results.append(0) continue max_increase = 0 for j in range(1, N): increase = production_numbers[j] - production_numbers[j - 1] if increase > max_increase: max_increase = increase results.append(max_increase) return results"},{"question":"Write a function that takes an integer n as an input and returns the nth element in the Fibonacci sequence. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1. For example, the sequence starts with 0, 1, 1, 2, 3, 5, 8, etc. Input: n (1 ≤ n ≤ 30) Output: the nth Fibonacci number Example - Input: n=6 Expected Output: 5","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Henry is looking to distribute toys to kids in different cities. There are `n` cities and each city has a certain number of toys. Henry starts in city 1 (not city 0). Each day, he can move to any of the neighboring cities (city i can move to city i+1 or city i-1) and distribute all the toys in that city to the kids in the city where he is currently located. Your task is to help Henry calculate the minimum number of days needed to distribute all the toys in each city starting from city 1. You are given `n` cities and the number of toys in each city. Note that the array is 1-indexed; the i-th element represents the city number and the value at i-th index represents the number of toys in that city. To clarify, Henry can: 1. Move to city i+1 or i-1 in a day. 2. Distribute all toys in a city in a single day. Determine the minimum number of days Henry needs to distribute all toys. -----Input----- - The first line contains a single integer, `n` (1 ≤ n ≤ 2 * 10^5) — the number of cities. - The second line contains `n` integers `t_1, t_2, ..., t_n` (0 ≤ t_i ≤ 10^9) — the number of toys in each city. -----Output----- Output a single integer — the minimum number of days Henry needs to distribute all toys starting from city 1. -----Examples----- Input 3 0 10 0 Output 1 Input 4 1 2 3 0 Output 4 Input 5 0 0 0 0 0 Output 0 -----Note----- In the first example, Henry only needs to move to city 2 to distribute the toys, which takes just 1 day. In the second example, Henry needs the following moves: - Day 1: Distribute toys in city 1 (1 day). - Day 2: Move to city 2 and distribute toys (1 day). - Day 3: Move to city 3 and distribute toys (1 day). - Day 4: Move to city 4 (but no toys to distribute) (1 day). Hence, 4 days in total. In the third example, since there are no toys in any cities, Henry does not need any days to distribute.","solution":"def min_days_to_distribute_toys(n, toys): Determine the minimum number of days needed to distribute all toys in each city starting from city 1. :param n: Number of cities :param toys: List of numbers representing toys in each city :return: Minimum number of days needed to distribute all toys if n == 0: return 0 # Since the array is 1-indexed, we directly start considering from `1st` city days = 0 for toy in toys: if toy > 0: days += 1 return days"},{"question":"You are given an array of integers arr and an integer target. Find the length of the smallest contiguous subarray whose sum is greater than or equal to target. If no such subarray exists, return 0. Example 1: Given arr = [2,3,1,2,4,3] and target = 7, Return: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraints. Example 2: Given arr = [1,1,1,1,1,1,1,1] and target = 11, Return: 0 Explanation: No subarray sums to or exceeds target 11. Example 3: Given arr = [1,4,4] and target = 4, Return: 1 Explanation: The subarray [4] has the minimal length under the problem constraints. The solution should aim to achieve a time complexity better than O(n^2).","solution":"def min_subarray_len(arr, target): Finds the length of the smallest contiguous subarray whose sum is greater than or equal to target. Returns 0 if no such subarray exists. Parameters: arr (list of int): The input array of integers. target (int): The target sum. Returns: int: The length of the smallest contiguous subarray meeting the criteria. n = len(arr) min_length = float(\'inf\') left = 0 current_sum = 0 for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an array of integers and a target integer. Your goal is to determine if there is a subset of the array that sums up exactly to the given target. # Input: - The first line of input contains two integers, n and target where n is the number of elements in the array and target is the target sum. - The second line of input contains n integers representing the elements of the array. # Output: - Output \\"YES\\" if there exists a subset of the array that sums up to the target integer. Otherwise, output \\"NO\\". # Constraints: - 1 leq n leq 100 - -10^4 leq Array Element leq 10^4 - -10^4 leq target leq 10^4 # Sample Input 1: 4 9 1 2 4 7 # Sample Output 1: YES # Sample Input 2: 3 5 2 4 6 # Sample Output 2: NO # Explanation: Sample Input 1: You can obtain the target sum 9 by choosing the subset {2, 7}. Sample Input 2: There is no subset of the array {2, 4, 6} that can sum up to 5.","solution":"def is_subset_sum(arr, target): Determines if there is a subset of the array that sums up exactly to the given target. n = len(arr) # dp[i][j] will be True if there is a subset of the first i elements with sum equal to j dp = [[False] * (target + 1) for _ in range(n + 1)] # There is always a subset with sum 0, which is the empty subset for i in range(n + 1): dp[i][0] = True # Filling dp array for i in range(1, n + 1): for j in range(1, target + 1): if j >= arr[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] return \\"YES\\" if dp[n][target] else \\"NO\\""},{"question":"Implement a function `smallest_subarray_sum` which takes two inputs: an integer `s` and an array of integers `arr`. The function should return the length of the smallest contiguous subarray for which the sum is greater than or equal to `s`. If no such subarray exists, return 0. For example: ```python smallest_subarray_sum(7, [2, 3, 1, 2, 4, 3]) # Returns 2, because the smallest subarray with sum >= 7 is [4,3]. smallest_subarray_sum(15, [1, 2, 3, 4, 5]) # Returns 5, because the sum of the entire array is exactly 15. smallest_subarray_sum(4, [1, 4, 4]) # Returns 1, because [4] is the smallest subarray. ``` # Constraints - The input array will contain positive integers. - The performance requirement is O(n), where n is the length of the input array. # Hints 1. Use a sliding window approach to maintain a current subarray with a sum greater than or equal to `s`. 2. Dynamically adjust the size of the sliding window to find the minimum length.","solution":"def smallest_subarray_sum(s, arr): Returns the length of the smallest contiguous subarray of which the sum is at least s. If no such subarray exists, returns 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += arr[end_index] while current_sum >= s: min_length = min(min_length, end_index - start_index + 1) current_sum -= arr[start_index] start_index += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"# Analyzing Array Parity You are given an array of `n` integers. Your task is to determine whether there exists a way to partition the array into two non-empty subsets such that the sum of the integers in each subset is even. Note that the subsets should be non-overlapping and mutually exclusive. # Input - The first line of input contains a single integer `n` (`2 ≤ n ≤ 100`), representing the number of integers in the array. - The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 100`), representing the elements of the array. # Output - Output \\"YES\\" if there exists such a partition with each subset having an even sum. - Otherwise, output \\"NO\\". # Example Input ``` 5 1 3 2 4 6 ``` Output ``` YES ``` Input ``` 3 1 5 7 ``` Output ``` NO ``` # Note In the first example, the array can be partitioned into subsets `[2, 4, 6]` (sum is 12, which is even) and `[1, 3]` (sum is 4, which is even). In the second example, no such partition exists as the sums of the resulting subsets cannot both be even.","solution":"def can_partition_even_sum(n, arr): Determines if there exists a partition of the array into two non-empty subsets such that the sum of each subset is even. Parameters: n (int): Number of integers in the array. arr (list of int): The integers in the array. Returns: str: \\"YES\\" if such a partition exists, otherwise \\"NO\\". # Check if there\'s at least one even number and there\'s at least one odd number. has_even = any(a % 2 == 0 for a in arr) has_odd = any(a % 2 != 0 for a in arr) if has_even and has_odd: return \\"YES\\" return \\"NO\\""},{"question":"The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. However, in this problem, you are asked to calculate the n-th number in a modified Fibonacci sequence where each number is the sum of the three preceding ones, and the sequence starts with 0, 0, and 1. Write a function that takes a single integer input n and returns the n-th number in this modified Fibonacci sequence. Example: ``` Input: 6 Output: 4 ``` The sequence starts as [0, 0, 1, 1, 2, 4]... and so on.","solution":"def modified_fibonacci(n): Returns the n-th number in a modified Fibonacci sequence where each number is the sum of the three preceding ones, starting with 0, 0, and 1. if n == 0: return 0 elif n == 1: return 0 elif n == 2: return 1 a, b, c = 0, 0, 1 for _ in range(3, n + 1): next_value = a + b + c a, b, c = b, c, next_value return c"},{"question":"In a certain university, two exams are held in a semester, and each student is assigned a grade point average (GPA) for their performance in each examination. The GPA is a floating-point number in the range 0.0 to 10.0. After both exams are completed, the student\'s final GPA is calculated as the average of the two exam GPAs. The university has decided to award academic ranks to students based on their final GPAs. A student’s academic rank is a single letter: - \'A\' if the student’s final GPA is 9.0 or higher, - \'B\' if the final GPA is between 7.0 and 8.9 (inclusive), - \'C\' if the final GPA is between 5.0 and 6.9 (inclusive), - \'D\' if the final GPA is between 3.0 and 4.9 (inclusive), - \'F\' if the final GPA is below 3.0. Given the GPAs of all students for both exams, write a program to determine and print the academic rank for each student. -----Constraints----- - 1 ≤ N ≤ 10^5 (where N is the number of students) - 0.0 ≤ GPA1, GPA2 ≤ 10.0 (GPA1 and GPA2 are floating-point numbers representing the GPAs of the two exams) -----Input----- The input is given from Standard Input in the following format: N GPA1_1 GPA2_1 GPA1_2 GPA2_2 : GPA1_{N} GPA2_{N} -----Output----- Print the academic rank for each student, one per line. -----Sample Input----- 4 9.2 8.8 7.0 7.9 6.0 4.9 1.0 2.8 -----Sample Output----- A B D F - The first student has a final GPA of (9.2 + 8.8) / 2 = 9.0, which results in an academic rank \'A\'. - The second student has a final GPA of (7.0 + 7.9) / 2 = 7.45, which results in an academic rank \'B\'. - The third student has a final GPA of (6.0 + 4.9) / 2 = 5.45, which results in an academic rank \'D\'. - The fourth student has a final GPA of (1.0 + 2.8) / 2 = 1.9, which results in an academic rank \'F\'.","solution":"def get_academic_ranks(n, gpas): Determines the academic rank for each student based on the final GPA. Parameters: n (int): Number of students gpas (List[Tuple[float, float]]): List of tuples where each tuple contains two GPAs for a student Returns: List[str]: List of academic ranks for each student ranks = [] for gpa1, gpa2 in gpas: final_gpa = (gpa1 + gpa2) / 2 if final_gpa >= 9.0: ranks.append(\'A\') elif final_gpa >= 7.0: ranks.append(\'B\') elif final_gpa >= 5.0: ranks.append(\'C\') elif final_gpa >= 3.0: ranks.append(\'D\') else: ranks.append(\'F\') return ranks"},{"question":"You are given a list of N integers a_1, a_2, ldots, a_N. Your task is to determine if it is possible to partition the list into two subsets such that the absolute difference of their sums is minimal. If there are multiple ways to achieve this minimum difference, any valid partition is acceptable. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers a_1, a_2, ldots, a_N. -----Output----- For each test case, print a single integer — the minimum possible absolute difference between the sums of the two subsets. -----Constraints----- - 1 le T le 10 - 1 le N le 100 - 1 le a_i le 1000 for each valid i -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 2 4 1 6 11 5 3 1 2 3 -----Example Output----- 1 0 -----Explanation----- Example case 1: We can partition the list into [1, 6, 5] and [11], or [1, 11] and [6, 5] each giving an absolute difference of 1. Example case 2: The list can be partitioned into [1, 2] and [3] giving an absolute difference of 0.","solution":"def minimum_partition_diff(arr): Function to find the minimum possible absolute difference between the sums of two subsets. :param arr: list of integers :return: the minimum possible absolute difference # Calculate total sum of the array total_sum = sum(arr) n = len(arr) # Initialize the DP table dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] # Empty subset has sum 0 for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): dp[i][j] = dp[i-1][j] if j >= arr[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j - arr[i-1]] diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: diff = total_sum - 2 * j break return diff def solve(test_cases): results = [] for n, arr in test_cases: results.append(minimum_partition_diff(arr)) return results"},{"question":"Given two binary trees, write a function to check if they are identical or not. Two binary trees are considered identical if they are structurally identical and the nodes have the same value. Example 1: Input: Tree 1 1 Tree 2 1 / / 2 3 2 3 Output: True Example 2: Input: Tree 1 1 Tree 2 1 / / 2 3 3 2 Output: False Your function should return a boolean value indicating whether the two trees are identical or not.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_identical(tree1: TreeNode, tree2: TreeNode) -> bool: Returns True if the two binary trees are identical, otherwise False. # Both are None if not tree1 and not tree2: return True # One of them is None if not tree1 or not tree2: return False # Both values are same and subtrees are identical return (tree1.val == tree2.val and is_identical(tree1.left, tree2.left) and is_identical(tree1.right, tree2.right))"},{"question":"Task ==== Create a function that replicates the behavior of a simple RPN (Reverse Polish Notation) calculator. RPN is a mathematical notation in which every operator follows all of its operands. It does not need any parentheses as long as the number of operands for each operator is fixed. Your function should take a string containing an RPN expression and return the result as an integer. If the expression is invalid, return `None`. Operators ========= - `+`: Addition - `-`: Subtraction - `*`: Multiplication - `/`: Integer division You can assume the input string is well-formed and that all numbers are single-digit integers. Division by zero should return `None`. Examples ======== ``` calculate_rpn(\\"3 4 + 2 - 5 *\\") => 25 calculate_rpn(\\"5 1 2 + 4 * + 3 -\\") => 14 calculate_rpn(\\"4 2 / 3 + 2 *\\") => 10 calculate_rpn(\\"2 3 4 * + 5 6 * -\\") => None (since intermediate result would be negative) ``` Notes ===== 1. You may use a stack to hold intermediate results. 2. Be sure to handle division by zero. 3. Be sure to verify if there are enough operands for each operator in the expression.","solution":"def calculate_rpn(expression): Calculate the result of an expression in Reverse Polish Notation (RPN). :param expression: string containing the RPN expression :return: the result of the RPN expression as an integer, or None if invalid if not expression: return None stack = [] tokens = expression.split() for token in tokens: if token in \'+-*/\': if len(stack) < 2: return None b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': if b == 0: return None result = int(a / b) # Ensure integer division stack.append(result) else: try: stack.append(int(token)) except ValueError: return None if len(stack) != 1: return None return stack.pop()"},{"question":"You are given a month and a year as inputs. Print the calendar of that month and year. # Task Write a function `print_calendar` that accepts two parameters `month` (an integer ranging from 1 to 12) and `year` (a four-digit integer). The function should print the calendar for the given month and year in a standard format. # Example: ``` print_calendar(12, 2023) ``` Output should be: ``` December 2023 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ``` # Notes - Use Python\'s calendar module to handle the calendar generation. - Ensure the weekday names and format match the example. - Align the dates properly to ensure the calendar is presented clearly.","solution":"import calendar def print_calendar(month, year): Prints the calendar for a specific month and year. Parameters: - month (int): The month (1-12) - year (int): The year (four-digit) # Create a TextCalendar instance and set the first weekday to Monday cal = calendar.TextCalendar(firstweekday=0) # Print the header with the month and year print(cal.formatmonth(year, month))"},{"question":"Write a function that takes a string containing only parentheses `(` and `)` and determines if the string is a valid parentheses sequence. A valid parentheses sequence is one where every opening parenthesis has a corresponding closing parenthesis and they are properly nested. ``` isValid(\\"()\\") == True isValid(\\")(\\") == False isValid(\\"(())\\") == True isValid(\\"())(\\") == False isValid(\\"(()())\\") == True isValid(\\"(()(()))\\") == True ``` An empty string is considered valid. ``` isValid(\\"\\") == True ``` Your task is to implement this function such that it correctly determines the validity of the parentheses sequence. If the string is valid, return `True`, otherwise return `False`.","solution":"def isValid(s): Determines if the input string s containing only parentheses is a valid parentheses sequence. # Initialize the stack to keep track of opening parentheses stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"# Anagram Groups An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams, as are \\"dusty\\" and \\"study\\". Task: Your task is to write a function `groupAnagrams` that will take in an array of strings and output a list of groups, where each group contains all the anagrams found in the input list. Input: The function will be passed an array of strings, where each string will contain only lowercase alphabetical characters. For example: ``` let exampleInput = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]; ``` Output: The function should return an array of arrays, where each sub-array contains all strings that are anagrams of each other. The order of the groups and the order of the strings within the groups does not matter. For example: ``` let exampleOutput = [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"nat\\", \\"tan\\"], [\\"bat\\"]]; ``` To ensure optimal performance, you may assume the input array will contain at most 10,000 strings. Example: ``` Input: [\\"cat\\", \\"dog\\", \\"tac\\", \\"god\\", \\"act\\"] Output: [[\\"cat\\", \\"tac\\", \\"act\\"], [\\"dog\\", \\"god\\"]] ``` Note: The task tests the ability to manipulate and transform data structures, comparable to the bit manipulation needed in the original set. The complexity of sorting and grouping aligns with the algorithmic skills assessed.","solution":"from collections import defaultdict def groupAnagrams(strs): Given an array of strings, group the anagrams together. Parameters: strs (list[str]): The list of strings to group by anagrams. Returns: list[list[str]]: A list of lists where each sublist contains anagrams. anagrams = defaultdict(list) for s in strs: # Sort the string and use it as a key sorted_str = \'\'.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())"},{"question":"You need to implement a function that generates the \\"spiral order\\" of an MxN matrix. Given a matrix of integers, your task is to traverse the matrix in a spiral order and return the integers in such order as a list. The traversal should start from the top-left corner and continue in the direction of right, down, left, and up, repeating the pattern until all elements have been visited. Your function should take a single parameter: - matrix, a list of lists of integers representing the MxN matrix where M is the number of rows and N is the number of columns. A few hints: - Ensure that your function can handle cases where the matrix is empty. - Consider all possible edge cases such as single rows, single columns, or even single-element matrices. - Pay attention to the boundaries of the matrix to avoid revisiting elements. For example: ``` matrix = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] The function should return the list [1, 2, 3, 6, 9, 8, 7, 4, 5]. ```","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. if not matrix or not matrix[0]: return [] result = [] while matrix: # Take the first row result += matrix.pop(0) # Take the last element of each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Take the last row in reverse order if matrix: result += matrix.pop()[::-1] # Take the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"Tarun is a software engineer who loves to play with binary numbers. One day he was thinking of a problem to convert a given number into a binary number but, with a twist. Tarun started thinking about counting the number of \'1\'s in the binary representation of a given number. Your task is to write a function that receives an integer and returns the number of \'1\'s in its binary representation. -----Input----- Input will begin with an integer T, the number of test cases. Each test case will contain one integer N, which is the number for which the number of \'1\'s in binary representation needs to be calculated. -----Output----- For each test case, output a single integer that represents the number of \'1\'s in the binary representation of N. -----Constraints----- - 1 ≤ T ≤ 20 - 0 ≤ N ≤ 10^6 -----Sample Input----- 3 5 7 10 -----Sample Output----- 2 3 2 -----Explanation----- In the first test case, the binary representation of 5 is \'101\', which contains two \'1\'s. In the second test case, the binary representation of 7 is \'111\', which contains three \'1\'s. In the third test case, the binary representation of 10 is \'1010\', which contains two \'1\'s.","solution":"def count_ones_in_binary(n): Returns the number of \'1\'s in the binary representation of the given number n. return bin(n).count(\'1\') def solve_for_test_cases(test_cases): results = [] for n in test_cases: results.append(count_ones_in_binary(n)) return results"},{"question":"**Grid Rotation Check** You will receive two n x n integer grids `gridA` and `gridB`. Your task is to determine if `gridA` can be transformed into `gridB` by rotating it 90 degrees clockwise any number of times (0, 1, 2, or 3 times). Each grid contains only positive integers and will have dimensions of at least 2x2. All elements in the grids are integers ranging from 1 to 100. You do not need to check for invalid inputs. Implement a function: ```python def can_rotate_to_match(gridA: List[List[int]], gridB: List[List[int]]) -> bool: pass ``` # Constraints - Both `gridA` and `gridB` will have equal dimensions `n x n` where `2 ≤ n ≤ 100`. # Examples ```python gridA = [ [1, 2], [3, 4] ] gridB = [ [3, 1], [4, 2] ] can_rotate_to_match(gridA, gridB) # Returns: True, because rotating gridA 90 degrees counterclockwise matches gridB gridA = [ [1, 2], [3, 4] ] gridB = [ [1, 2], [4, 3] ] can_rotate_to_match(gridA, gridB) # Returns: False, because no rotation of gridA will match gridB ``` # Notes 1. Think about how you can rotate the grid and compare it with the target grid. 2. You may use helper functions to perform the rotations for cleaner code. 3. Efficiently handling the rotation operations is crucial for larger grids.","solution":"from typing import List def rotate_90_clockwise(grid: List[List[int]]) -> List[List[int]]: Rotates the grid 90 degrees clockwise. n = len(grid) new_grid = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_grid[j][n - 1 - i] = grid[i][j] return new_grid def can_rotate_to_match(gridA: List[List[int]], gridB: List[List[int]]) -> bool: Determines if gridA can be transformed into gridB by rotating it 90 degrees clockwise any number of times (0, 1, 2, or 3 times). if gridA == gridB: return True rotated = gridA for _ in range(3): rotated = rotate_90_clockwise(rotated) if rotated == gridB: return True return False"},{"question":"An ancient temple has a mystical maze built on a rectangular grid. The grid consists of M by N cells, each being either traversable or blocked. The entrance to the maze is positioned at the top-left corner (0, 0) and the exit is at the bottom-right corner (M-1, N-1). The traveler can move either right or down at any point in time. Determine the number of unique paths from the entrance to the exit. -----Input----- Two integers M and N representing the grid dimensions. The next M lines consist of N integers each, where 0 represents a traversable cell and 1 represents a blocked cell. -----Output----- A single integer denoting the number of unique paths from the entrance to the exit. -----Constraints----- 2 <= M, N <= 20 -----Example----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 -----Explanation----- There are 2 paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths(grid): Returns the number of unique paths in a grid from top-left to bottom-right corner. Parameters: grid (List[List[int]]): 2D grid where 0 is traversable and 1 is blocked. Returns: int: the number of unique paths. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 M, N = len(grid), len(grid[0]) # Initialize a dp array where dp[i][j] represents the number of ways to reach cell (i, j) dp = [[0 for _ in range(N)] for _ in range(M)] dp[0][0] = 1 # Start at the top-left corner # Fill the dp array for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[-1][-1]"},{"question":"Given a list of integers, write a function that finds the second largest number in the list. - The list is guaranteed to contain at least two distinct integers. - Do not use built-in sorting functions or data structures such as sets or dictionaries. Your function should return the second largest number in the list. # Example **Input:** ```python numbers = [3, 5, 7, 8, 1, 9, 10] ``` **Output:** ```python 9 ``` **Input:** ```python numbers = [1, 1, 2, 2, 3, 3, 4, 4] ``` **Output:** ```python 3 ```","solution":"def find_second_largest(numbers): Returns the second largest number in the list. first = second = float(\'-inf\') for n in numbers: if n > first: second = first first = n elif n > second and n != first: second = n return second"},{"question":"Write a function that takes a list of student names and their respective scores and returns the top `n` students based on their scores. If multiple students have the same score, their names should be sorted alphabetically. The function should be case insensitive when sorting names but case sensitive when returning the result. Input: - A list of tuples `students` each containing a name (string) and a score (integer). - An integer `n` representing the number of top students to return. Output: - A list of top `n` students sorted by their scores in descending order. If scores are the same, sort alphabetically by name. Examples: ``` students = [(\'Alice\', 88), (\'bob\', 87), (\'Charlie\', 88), (\'Diana\', 85)] n = 2 top_n_students(students, n) // returns [(\'Alice\', 88), (\'Charlie\', 88)] students = [(\'alice\', 90), (\'Bob\', 70), (\'Charlie\', 90), (\'Dave\', 85)] n = 1 top_n_students(students, n) // returns [(\'alice\', 90)] ```","solution":"def top_n_students(students, n): Returns the top n students based on their scores. Parameters: students (list of tuples): A list of tuples where each tuple contains a student name (str) and their score (int). n (int): The number of top students to return. Returns: list of tuples: A list of tuples containing top n students\' names and scores sorted by their scores in descending order. # Sort students first by score (descending), then by name (alphabetically, case-insensitive) students_sorted = sorted(students, key=lambda student: (-student[1], student[0].lower())) # Return the top n students return students_sorted[:n]"},{"question":"Given an array `nums` containing `n` distinct numbers taken from the range 0 to n, find the one that is missing from the array. Examples: Input: [3,0,1] Output: 2 Explanation: The range is 0 to 3, and 2 is the missing number. Input: [0,1] Output: 2 Explanation: The range is 0 to 2, and 2 is the missing number. Input: [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: The range is 0 to 9, and 8 is the missing number. Input: [0] Output: 1 Explanation: The range is 0 to 1, and 1 is the missing number. Note: Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?","solution":"def missing_number(nums): Given an array nums containing n distinct numbers taken from the range 0 to n, find the one that is missing from the array. n = len(nums) total_sum = (n * (n + 1)) // 2 array_sum = sum(nums) return total_sum - array_sum"},{"question":"You are given a string consisting of lowercase Latin letters. You may replace at most one character in the string with any other lowercase Latin letter. Your goal is to find the lexicographically smallest string possible after performing at most one such replacement. A string a is lexicographically smaller than a string b if there exists an index i such that a_i < b_i and for any j < i, a_j = b_j. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of testcases. Each of the next t lines contains a single string s (1 le text{length of } s le 100) — the string to be modified. -----Output----- Print t strings — for each testcase output the lexicographically smallest string possible after at most one character replacement. -----Example----- Input 3 abc zzz abcd Output aac ayz aacd -----Note----- In the first test case, replacing \'b\' with \'a\' results in \\"aac\\", which is the lexicographically smallest string possible.","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string possible after at most one character replacement. for i in range(len(s)): if s[i] != \'a\': return s[:i] + \'a\' + s[i+1:] # If all characters are \'a\', replace the last character with \'b\' return s[:-1] + \'b\' def process_test_cases(t, test_cases): Processes multiple test cases and returns the results for each case. results = [] for s in test_cases: results.append(lexicographically_smallest_string(s)) return results"},{"question":"Implement a function called `findFirstNonRepeatingCharacter` that takes a string as input and returns the first non-repeating character. If there is no non-repeating character, return an empty string. The function should ignore spaces while considering characters. Assume the input string will only contain lowercase alphabets and spaces. **Function Signature:** ```python def findFirstNonRepeatingCharacter(s: str) -> str: pass ``` **Examples:** **Example 1:** ```python s = \\"this is a test string\\" findFirstNonRepeatingCharacter(s) -> \\"h\\" ``` Explanation: - The character \'h\' is the first character that does not repeat in the string after ignoring spaces. **Example 2:** ```python s = \\"racecar\\" findFirstNonRepeatingCharacter(s) -> \\"e\\" ``` Explanation: - The character \'e\' is the first character that does not repeat in the string. **Example 3:** ```python s = \\"aabbcc\\" findFirstNonRepeatingCharacter(s) -> \\"\\" ``` Explanation: - Every character in the string repeats, so the function returns an empty string. **Note:** - The function should be case-sensitive for characters other than spaces.","solution":"def findFirstNonRepeatingCharacter(s: str) -> str: Returns the first non-repeating character in the string `s` ignoring spaces. from collections import Counter # Remove spaces from the string filtered_s = s.replace(\' \', \'\') # Count the frequency of each character char_count = Counter(filtered_s) # Find the first character that has a count of 1 for ch in filtered_s: if char_count[ch] == 1: return ch # If no non-repeating character is found, return an empty string return \\"\\""},{"question":"Michael and his friend Sarah are fond of collecting coins from different countries. They decided to play a game with their coin collection. They have a collection of coins represented as an array of integers, where each integer represents the value of a coin. The game involves selecting a subarray of coins and calculating the maximum possible sum of its elements under a certain condition. Given an array of integers COINS and two integers K and M: - You need to find the maximum sum of any subarray of length exactly K such that the subarray contains exactly M distinct values. ----Input:---- - The first line contains a single integer T representing the number of test cases. - Each test case consists of: - The first line contains three integers N, K, and M, where N is the number of coins. - The second line contains N integers representing the array COINS. ----Output:---- - For each test case, print the maximum sum of any subarray of length exactly K with exactly M distinct values. - If no such subarray exists, print -1. ----Constraints:---- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq COINS[i] leq 10^9 - 1 leq K leq N - 1 leq M leq K ----Sample Input:---- 2 6 3 2 1 2 2 3 4 5 5 2 2 1 1 1 1 1 ----Sample Output:---- 7 -1 ----Explanation:---- For the first test case: - The subarray of length 3 that has exactly 2 distinct values and the maximum sum is [2, 2, 3], with a sum of 7. For the second test case: - There is no subarray of length 2 that contains exactly 2 distinct values, so the output is -1.","solution":"def max_sum_subarray_with_exactly_m_distinct(coins, n, k, m): from collections import defaultdict max_sum = -1 current_sum = 0 freq = defaultdict(int) left = 0 for right in range(n): freq[coins[right]] += 1 current_sum += coins[right] while len(freq) > m: freq[coins[left]] -= 1 if freq[coins[left]] == 0: del freq[coins[left]] current_sum -= coins[left] left += 1 if right - left + 1 == k: if len(freq) == m: max_sum = max(max_sum, current_sum) freq[coins[left]] -= 1 if freq[coins[left]] == 0: del freq[coins[left]] current_sum -= coins[left] left += 1 return max_sum def coin_game_solution(test_cases): results = [] for coins, n, k, m in test_cases: results.append(max_sum_subarray_with_exactly_m_distinct(coins, n, k, m)) return results"},{"question":"You are given a string representing a nested list of integers, return the sum of all values in the list. The nested list is represented as a string, where an integer is a decimal number that can be both positive and negative, and a list is enclosed with square brackets. An empty list is represented by \\"[]\\". The integer values range between -10^6 to 10^6, and the entire string has a length at most 2000 characters. Algorithmically parse the nested list string, accurately summing all integers, managing nesting correctly, and respecting list boundaries. You may not use any third-party libraries to parse the string. Examples: Input: \\"[1, 2, [3, 4], 5]\\" Output: 15 Explanation: 1 + 2 + 3 + 4 + 5 = 15 Input: \\"[1, [-2, 3], [-4, [5, -6]], 7]\\" Output: 4 Explanation: 1 - 2 + 3 - 4 + 5 - 6 + 7 = 4 Input: \\"[]\\" Output: 0 Explanation: The list is empty, so the sum is 0. Input: \\"[[-1, 1], [2, -2], [3, -3]]\\" Output: 0 Explanation: (-1 + 1) + (2 - 2) + (3 - 3) = 0 Input: \\"[1, [2, [3, [4, -5]]]]\\" Output: 5 Explanation: 1 + 2 + 3 + 4 - 5 = 5 Note: Ensure that all intermediate calculations can fit in a 32-bit integer.","solution":"def sum_nested_list(nested_string): Returns the sum of all integers in the nested list represented as a string. def parse_nested_list(s, index): total = 0 num = 0 sign = 1 while index < len(s): char = s[index] if char.isdigit(): num = num * 10 + int(char) elif char == \'-\': sign = -1 elif char == \',\': total += sign * num num = 0 sign = 1 elif char == \'[\': part_sum, index = parse_nested_list(s, index + 1) total += part_sum elif char == \']\': total += sign * num return total, index index += 1 return total, index nested_string = nested_string.strip() if nested_string == \\"[]\\": return 0 total_sum, _ = parse_nested_list(nested_string, 0) return total_sum"},{"question":"Write a program that takes a list of employee names and their salaries, and outputs the name(s) of the highest paid employee(s). If multiple employees have the highest salary, list all of them in alphabetical order. Examples ``` Input: [(\\"Alice\\", 50000), (\\"Bob\\", 70000), (\\"Charlie\\", 70000), (\\"David\\", 40000)] Output: [\\"Bob\\", \\"Charlie\\"] Input: [(\\"Emma\\", 55000), (\\"Daniel\\", 57000), (\\"Julia\\", 57000), (\\"Sophia\\", 57000)] Output: [\\"Daniel\\", \\"Julia\\", \\"Sophia\\"] Input: [(\\"Jake\\", 45000)] Output: [\\"Jake\\"] ``` Constraints - The list will have at least one employee. - Salaries will be positive integers. - Employee names will be strings and will not be empty.","solution":"def highest_paid_employees(employees): Returns the name(s) of the highest paid employee(s). If multiple employees have the highest salary, the names are listed in alphabetical order. if not employees: return [] highest_salary = max(employees, key=lambda x: x[1])[1] highest_paid = [employee[0] for employee in employees if employee[1] == highest_salary] return sorted(highest_paid)"},{"question":"Alex is preparing for a long hiking trip and needs to pack his backpack. He wants to carry items that maximize the total value without exceeding the weight capacity of his backpack. There are n items available, each with a given weight and value. However, due to the limited space, he can only take items of certain types: food and equipment. He wants to pack one item of food and one item of equipment such that the sum of their weights does not exceed the backpack\'s capacity and the total value is maximized. Help Alex to determine the maximum total value of one food item and one equipment item he can pack. -----Input----- The first line contains three integers n, w (2 ≤ n ≤ 100 000, 1 ≤ w ≤ 100 000) – the number of items and the weight capacity of the backpack. The next n lines describe items. Each of these lines contains three integers v_{i}, wt_{i} (1 ≤ v_{i}, wt_{i} ≤ 100 000) – the value and the weight of the i-th item, and a letter \\"F\\" or \\"E\\", describing the type of the item: food or equipment, respectively. -----Output----- Print the maximum total value of exactly one food item and one equipment item Alex can pack. If he can\'t pack both types of items, print 0. -----Examples----- Input 4 10 15 8 F 10 5 F 20 5 E 30 9 E Output 40 Input 2 7 12 8 F 8 3 E Output 0 Input 5 15 10 7 F 20 10 E 25 8 F 15 6 E 30 7 F Output 45 -----Note----- In the first example, Alex should pack the second food item with value 10 and weight 5, and the third equipment item with value 20 and weight 5. The total value is 10 + 20 = 30, which is the maximum possible value within the weight capacity. In the second example, the one food item available exceeds the backpack\'s capacity, so Alex cannot pack both an item of food and an item of equipment. In the third example, Alex should pack the last food item with value 30 and weight 7, and the fourth equipment item with value 15 and weight 6. The total weight is 7 + 6 = 13, which is within the backpack\'s capacity, and the total value is 30 + 15 = 45, which is the maximum possible value.","solution":"def max_total_value(n, w, items): max_value = 0 food_items = [(v, wt) for v, wt, t in items if t == \'F\'] equipment_items = [(v, wt) for v, wt, t in items if t == \'E\'] for f_value, f_weight in food_items: for e_value, e_weight in equipment_items: if f_weight + e_weight <= w: max_value = max(max_value, f_value + e_value) return max_value"},{"question":"Given an array of integers, return a new array containing the squares of all the positive numbers in the input array, sorted in non-decreasing order. # Examples ``` Input: [1, -2, 3, 4, -5] Output: [1, 9, 16] Input: [-1, -2, -3, -4] Output: [] Input: [5, 1, 6, 0] Output: [0, 1, 25, 36] ```","solution":"def sorted_squares_of_positives(arr): This function takes an array of integers and returns a new array containing the squares of all the positive numbers (including zero) in the input array, sorted in non-decreasing order. positive_squares = [x**2 for x in arr if x >= 0] return sorted(positive_squares)"},{"question":"# Problem Description You are given two binary trees represented by root nodes `rootA` and `rootB`. Each tree node contains an integer value. Your task is to create a function `leafSimilarity(rootA, rootB)` that determines whether the leaf nodes of both trees are exactly the same in terms of values and order. The trees are leaf-similar if and only if the sequence of values in their leaf nodes are identical when read from left to right. **Function Signature:** ```python def leafSimilarity(rootA: TreeNode, rootB: TreeNode) -> bool: pass ``` **Constraints:** - The number of nodes in each tree is in the range `[1, 200]`. - The values of the nodes in each tree are in the range `[0, 200]`. **Example:** ```python # Example 1: # Tree A: 3 # / # 5 1 # / / # 6 2 9 8 # / # 7 4 # # Tree B: 3 # / # 5 1 # / # 6 2 8 # / # 7 4 # # Leaf nodes sequence for rootA: [6, 7, 4, 9, 8] # Leaf nodes sequence for rootB: [6, 7, 4, 8] # The two sequences are not the same, hence: leafSimilarity(rootA, rootB) == False # Example 2: # Tree A: 1 # / # 2 3 # Leaf nodes sequence for rootA: [2, 3] # Leaf nodes sequence for rootB: [2, 3] # The two sequences are the same, hence: leafSimilarity(rootA, rootB) == True ``` **Explanation:** - In the first example, the sequence of leaf nodes in Tree A is `[6, 7, 4, 9, 8]`, while the sequence of leaf nodes in Tree B is `[6, 7, 4, 8]`. These sequences are not identical, so the function `leafSimilarity(rootA, rootB)` should return `False`. - In the second example, both trees have the same leaf node sequence `[2, 3]`, so the function should return `True`. **Notes:** - A leaf node is a node with no children. - The function should compare the sequence of leaf node values and determine if they are exactly the same in both trees.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def leafSimilarity(rootA: TreeNode, rootB: TreeNode) -> bool: # Helper function to find leaf nodes def find_leaves(root: TreeNode): if not root: return [] if not root.left and not root.right: return [root.value] return find_leaves(root.left) + find_leaves(root.right) # Get leaf sequences for both trees leavesA = find_leaves(rootA) leavesB = find_leaves(rootB) # Compare leaf sequences return leavesA == leavesB"},{"question":"In a video game, a player collects coins from a grid-shaped field. The player\'s objective is to collect the maximum number of coins possible starting from the top-left corner of the grid (0, 0) and moving to the bottom-right corner (n-1, m-1). The player can only move either to the right or down at any point in time. Each cell in the grid contains a certain number of coins. Given the dimensions of the grid and the number of coins in each cell, determine the maximum number of coins the player can collect. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - For each test case: - The first line contains two integers, n (the number of rows) and m (the number of columns). - The next n lines each contain m space-separated integers representing the number of coins in each cell. -----Output:----- For each test case, print the maximum number of coins that can be collected. -----Sample Input:----- 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 -----Sample Output:----- 12 4 -----Constraints----- - 1 leq n, m leq 1000 - 0 leq text{coins_in_cell} leq 100","solution":"def max_coins_collected(T, grids): results = [] for grid in grids: n, m, coins = grid dp = [[0] * m for _ in range(n)] dp[0][0] = coins[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + coins[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + coins[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + coins[i][j] results.append(dp[n-1][m-1]) return results"},{"question":"Given an array of integers and a positive integer K, determine whether there are two distinct elements in the array that add up to K. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case contains two lines: - The first line contains integers N (the size of the array) and K, separated by a space. - The second line contains N space-separated integers denoting the elements of the array. -----Output:----- For each test case, output \\"YES\\" if there are two distinct elements in the array that add up to K, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10^3 - 2 leq N leq 10^5 - 1 leq K leq 10^9 - 1 leq a_i leq 10^9 (where a_i is the element of the array) -----Sample Input:----- 2 4 9 1 2 3 6 5 10 2 2 2 2 2 -----Sample Output:----- YES NO -----EXPLANATION:----- For the first test case: There are two integers 3 and 6 in the array that sum up to 9. For the second test case: No two distinct integers sum up to 10.","solution":"def has_pair_with_sum(arr, K): Checks if there are two distinct elements in the array that add up to K. seen = set() for num in arr: if (K - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(T, test_cases): Process multiple test cases and return the results. Each test case contains the size of the array and the target sum K, followed by the array of integers. results = [] for n, K, arr in test_cases: result = has_pair_with_sum(arr, K) results.append(result) return results"},{"question":"Given two non-empty binary trees, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. Example: Input: Tree 1: 1 / 2 3 Tree 2: 1 / 2 3 Output: True Example: Input: Tree 1: 1 / 2 1 Tree 2: 1 / 1 2 Output: False Note: - Both trees will have at most 100 nodes. - Tree nodes contain integer values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_same_tree(p: TreeNode, q: TreeNode) -> bool: Returns True if the two binary trees are structurally identical and have the same node values. if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"},{"question":"=====Problem Statement===== You are working as a software engineer tasked with building a leaderboard system for an online game. The leaderboard should track the top N players based on their scores. The leaderboard system should support the following operations: - Add a new score to the leaderboard. - Retrieve the top N players from the leaderboard. Each player is identified by a unique player ID, and each score submission includes the player ID and the score. If a player submits multiple scores, only the highest score should be considered for that player. =====Input Format===== The first line contains an integer N, the number of top players to track. The second line contains an integer T, the number of score submissions. Each of the next T lines contains two space-separated integers: playerID and score. =====Constraints===== 1 ≤ N ≤ 10^5 1 ≤ T ≤ 10^6 1 ≤ playerID ≤ 10^6 1 ≤ score ≤ 10^9 =====Output Format===== Output the player IDs of the top N players, sorted by their scores in descending order. If two players have the same score, sort them by their player ID in ascending order. =====Sample Input===== 3 5 1 50 2 30 3 40 2 70 4 90 =====Sample Output===== 4 2 1 =====Explanation===== In the sample input, there are 3 top players to track. The score submissions are: - Player 1 submits 50 - Player 2 submits 30 - Player 3 submits 40 - Player 2 submits 70 (this score replaces the previous 30) - Player 4 submits 90 The top 3 players based on their highest scores are: - Player 4 with a score of 90 - Player 2 with a score of 70 - Player 1 with a score of 50 Therefore, the output is: 4 2 1","solution":"def get_top_n_players(n, t, scores): from heapq import nlargest leaderboard = {} for playerID, score in scores: if playerID in leaderboard: leaderboard[playerID] = max(leaderboard[playerID], score) else: leaderboard[playerID] = score top_players = nlargest(n, leaderboard.items(), key=lambda item: (item[1], -item[0])) return [playerID for playerID, score in top_players]"},{"question":"# Task You are given a non-empty list of non-negative integers. Consider contiguous sublists of the list with length equal to a given integer `k`. For each sublist, calculate the sum of its elements, and return the maximum sum amongst all contiguous sublists of length `k`. # Example - For `arr = [1, 4, 2, 10, 2, 3, 1, 0, 20]` and `k = 4`, the result should be `24`. ``` The sublists of length 4 are: [1, 4, 2, 10] with sum 17 [4, 2, 10, 2] with sum 18 [2, 10, 2, 3] with sum 17 [10, 2, 3, 1] with sum 16 [2, 3, 1, 0] with sum 6 [3, 1, 0, 20] with sum 24 The maximum sum is 24. ``` - For `arr = [2, 3, 5, 2, 9, 7, 1]` and `k = 3`, the result should be `18`. ``` The sublists of length 3 are: [2, 3, 5] with sum 10 [3, 5, 2] with sum 10 [5, 2, 9] with sum 16 [2, 9, 7] with sum 18 [9, 7, 1] with sum 17 The maximum sum is 18. ``` # Input/Output - `[input]` integer array `arr` A non-empty array, `1 ≤ arr.length ≤ 1000` `0 ≤ arr[i] ≤ 1000` - `[input]` integer `k` A positive integer, `1 ≤ k ≤ arr.length` - `[output]` an integer The maximum sum of contiguous sublists of length `k`","solution":"def max_sum_sublist(arr, k): Returns the maximum sum among all contiguous sublists of length k. :param arr: List of non-negative integers. :param k: Length of sublist. :return: Maximum sum of contiguous sublists of length k. # Initial sum of the first window of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array and calculate the sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are working on a system that needs to log events to a file for auditing purposes. Each event is represented as a string, and every log entry should include a timestamp indicating when the event occurred. Design a function that logs an event to a file named \\"event_log.txt\\". Each log entry should be written on a new line and follow this format: ``` [YYYY-MM-DD HH:MM:SS] - Event Description ``` where \\"YYYY-MM-DD\\" represents the date, \\"HH:MM:SS\\" represents the time, and \\"Event Description\\" is the event string passed to the function. If the \\"event_log.txt\\" file does not exist, your function should create it. If it already exists, the new event should be appended to the existing entries. Additionally, ensure proper exception handling is in place in case of any file operation errors. Example Usage: Suppose the function is called with the event description \\"User logged in\\". An example entry in the \\"event_log.txt\\" file would look like: ``` [2023-10-15 14:35:20] - User logged in ``` Note: You do not need to handle the actual retrieval of the current date and time in the function. Assume there is a helper function `get_current_timestamp()` that returns the formatted current timestamp as a string. Your task is to complete the `log_event` function described below: ```python import os def get_current_timestamp(): # This helper function is assumed to exist and return a formatted timestamp pass def log_event(event_description): try: timestamp = get_current_timestamp() log_entry = f\\"[{timestamp}] - {event_description}n\\" with open(\\"event_log.txt\\", \\"a\\") as file: file.write(log_entry) except Exception as e: print(f\\"An error occurred while logging the event: {e}\\") ```","solution":"import os def get_current_timestamp(): from datetime import datetime return datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") def log_event(event_description): try: timestamp = get_current_timestamp() log_entry = f\\"[{timestamp}] - {event_description}n\\" with open(\\"event_log.txt\\", \\"a\\") as file: file.write(log_entry) except Exception as e: print(f\\"An error occurred while logging the event: {e}\\")"},{"question":"Write a function that takes a list of strings and a hash function, and groups the strings into a dictionary of lists based on the hash values. The hash function is provided as a parameter and will return an integer hash for each string. Your function should return a dictionary where: - The keys are the obtained hash values. - The values are lists of strings that correspond to the same hash value. Examples ```python def simple_hash(s): return len(s) group_by_hash([\\"apple\\", \\"bat\\", \\"car\\", \\"dog\\", \\"elephant\\"], simple_hash) == {5: [\\"apple\\"], 3: [\\"bat\\", \\"car\\", \\"dog\\"], 8: [\\"elephant\\"]} def first_letter_hash(s): return ord(s[0]) group_by_hash([\\"apple\\", \\"bat\\", \\"car\\", \\"dog\\", \\"elephant\\", \\"ant\\", \\"banana\\"], first_letter_hash) == {97: [\\"apple\\", \\"ant\\"], 98: [\\"bat\\", \\"banana\\"], 99: [\\"car\\"], 100: [\\"dog\\"], 101: [\\"elephant\\"]} ```","solution":"def group_by_hash(strings, hash_function): Groups a list of strings into a dictionary of lists based on hash values. Parameters: strings (list): A list of strings to be grouped. hash_function (function): A hash function that takes a string and returns an integer. Returns: dict: A dictionary where the keys are hash values and the values are lists of strings. grouped = {} for string in strings: hash_value = hash_function(string) if hash_value not in grouped: grouped[hash_value] = [] grouped[hash_value].append(string) return grouped"},{"question":"# Task In RoboLand, there exists an automated cleaning robot that operates in a rectangular grid. The robot starts at a specific location and can move in four possible directions: up, down, left, and right. However, its movement is constrained by walls placed at certain cells in the grid, through which it cannot pass. The robot stops moving when it tries to move into a wall or boundary of the grid. Given the initial position of the robot, the sequence of directions it attempts to move in, and the grid layout, determine the robot\'s final position. # Example For `grid = [[0, 0, 1], [0, 0, 1], [1, 0, 0]], initPosition = [1, 0], directions = [\\"right\\", \\"right\\", \\"down\\", \\"left\\", \\"down\\"]`, the output should be `[2, 1]`. Here\'s how the robot moves: ``` Starts at [1, 0] Moves right to [1, 1] (free) Moves right to [1, 2] (stops at wall, remains at [1, 1]) Moves down to [2, 1] (free) Moves left to [2, 0] (stops at wall, remains at [2, 1]) Moves down to [3, 1] (boundary, remains at [2, 1]) ``` # Input/Output - `[input]` integer array `grid` A 2D array representing the grid layout where `0` indicates an empty cell and `1` indicates a wall. Constraints: `1 ≤ grid.length, grid[i].length ≤ 20.` - `[input]` integer array `initPosition` An array of two integers representing the starting position of the robot, where `initPosition[0]` is the row index and `initPosition[1]` is the column index. Constraints: `0 ≤ initPosition[0] < grid.length, 0 ≤ initPosition[1] < grid[i].length.` - `[input]` array of strings `directions` An array of strings where each string is one of [\\"up\\", \\"down\\", \\"left\\", \\"right\\"], representing the sequence of directions the robot attempts to move. Constraints: `1 ≤ directions.length ≤ 1000` - `[output]` an integer array An array of two integers representing the final position of the robot in the grid. # Example ```python grid = [ [0, 0, 1], [0, 0, 1], [1, 0, 0] ] initPosition = [1, 0] directions = [\\"right\\", \\"right\\", \\"down\\", \\"left\\", \\"down\\"] # Output: [2, 1] ```","solution":"def final_position(grid, initPosition, directions): Returns the final position of the robot given the grid, initial position, and directions. row, col = initPosition for direction in directions: if direction == \\"up\\" and row > 0 and grid[row - 1][col] == 0: row -= 1 elif direction == \\"down\\" and row < len(grid) - 1 and grid[row + 1][col] == 0: row += 1 elif direction == \\"left\\" and col > 0 and grid[row][col - 1] == 0: col -= 1 elif direction == \\"right\\" and col < len(grid[0]) - 1 and grid[row][col + 1] == 0: col += 1 return [row, col]"},{"question":"Given two strings s1 and s2, write a function to determine if s2 is an anagram of s1. Note: Both strings consist of lower-case English letters only. The length of both strings is < 10000. An anagram is a word or phrase formed by rearranging the letters of another, such as \\"cinema\\" formed from \\"iceman\\". Do not use any built-in sort function or external libraries.","solution":"def is_anagram(s1, s2): Determines if s2 is an anagram of s1. Args: s1: A string to compare. s2: A string to compare. Returns: True if s2 is an anagram of s1, False otherwise. if len(s1) != len(s2): return False count = [0] * 26 for char in s1: count[ord(char) - ord(\'a\')] += 1 for char in s2: count[ord(char) - ord(\'a\')] -= 1 if count[ord(char) - ord(\'a\')] < 0: return False return True"},{"question":"# Valid Parentheses Write a program that takes a string of parentheses as input and determines if the order of the parentheses is valid. A string of parentheses is valid if all opening parentheses have a corresponding closing parenthesis in the correct order. For simplicity, only parentheses \'(\', \')\', \'{\', \'}\', \'[\' and \']\' are considered. The function should return `True` if the parentheses are valid and `False` otherwise. # Examples ```python valid_parentheses(\\"()\\") # Should return True valid_parentheses(\\"()[]{}\\") # Should return True valid_parentheses(\\"(]\\") # Should return False valid_parentheses(\\"([)]\\") # Should return False valid_parentheses(\\"{[]}\\") # Should return True ``` # Constraints - The input string will contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The input string will have a maximum length of 10,000 characters.","solution":"def valid_parentheses(s): Returns True if the input string of parentheses s is valid. Otherwise, returns False. A string of parentheses is considered valid if: - Every opening parenthesis has a corresponding closing parenthesis in the correct order. stack = [] matching_parentheses = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_parentheses.values(): # If it\'s one of \'(\', \'{\', \'[\' stack.append(char) elif char in matching_parentheses.keys(): # If it\'s one of \')\', \'}\', \']\' if stack == [] or matching_parentheses[char] != stack.pop(): return False else: return False # In case there are any other unexpected characters return stack == []"},{"question":"A **k-mixture** of a sequence is an array formed by picking exactly *k* elements from the sequence and summing them. For example, the sequence [1, 2, 3, 4] has the following 2-mixtures: [3, 4, 5, 6, 7] obtained by pairing elements as follows: 1+2=3, 1+3=4, 1+4=5, 2+3=5, 2+4=6, 3+4=7. Write a function that computes the k-mixtures of an input sequence *arr* and returns them as a sorted list. The function should handle sequences of varying lengths and values, and ensure the resulting mixtures are unique (no duplicates). Your function should have the following signature: ```python def k_mixtures(arr: List[int], k: int) -> List[int]: ``` **Examples:** ```python # Example 1 arr = [1, 2, 3] k = 2 expected_output = [3, 4, 5] assert k_mixtures(arr, k) == expected_output # Example 2 arr = [1, 3, 5, 7] k = 3 expected_output = [9, 11, 13, 15] assert k_mixtures(arr, k) == expected_output # Example 3 arr = [2, 4, 4, 6] k = 2 expected_output = [6, 8, 10] assert k_mixtures(arr, k) == expected_output ``` **Constraints:** - The length of the input array `arr` will be between 1 and 10^4. - The values in the input array `arr` will be between -10^5 and 10^5. - The value of `k` will be between 1 and the length of `arr`.","solution":"from typing import List from itertools import combinations def k_mixtures(arr: List[int], k: int) -> List[int]: Compute the k-mixtures of an input sequence arr. Parameters: arr (List[int]): The input sequence of integers. k (int): The number of elements to pick for each mixture. Returns: List[int]: A sorted list containing the unique k-mixtures. mixtures = set(sum(comb) for comb in combinations(arr, k)) return sorted(mixtures)"},{"question":"The city council is planning to beautify city parks by planting trees. There are `n` parks in the city, and some pairs of parks are connected by bidirectional roads. To maximize the beauty, the council wants to plant a tree in each park such that no two adjacent parks (i.e., parks connected by a road) have the same type of tree. The council has an unlimited number of tree types but wants to use the minimum number of different tree types possible. As a consultant, you are tasked to determine the minimum number of different tree types required and the possible assignment of tree types to parks for each scenario. -----Input:----- - First line will contain `T`, number of testcases. Then the testcases follow. - For each testcase: - First line contains an integer `n`, the number of parks. - Second line contains an integer `m`, the number of roads. - The next `m` lines each contain two integers `u` and `v`, representing a bidirectional road connecting parks `u` and `v`. -----Output:----- - For each testcase, output two lines: - First line contains a single integer, the minimum number of different tree types required. - Second line contains `n` integers, where the i-th integer represents the type of tree planted in the i-th park (1-based index). -----Constraints:----- - `1 ≤ T ≤ 100` - `1 ≤ n ≤ 100` - `0 ≤ m ≤ n * (n - 1) / 2` - `1 ≤ u, v ≤ n` - No self-loops or multiple edges between the same pair of parks. -----Sample Input:----- 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 -----Sample Output:----- 2 1 2 1 2 2 1 2 1","solution":"from collections import deque def min_tree_types(n, m, edges): graph = [[] for _ in range(n)] # Build the adjacency list for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) color = [-1] * n def bfs(start): queue = deque([start]) color[start] = 0 # Start coloring with 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True # Check bipartiteness and color the graph for i in range(n): if color[i] == -1: if not bfs(i): return None # Graph is not bipartite # Convert color array from [0, 1] to [1, 2] min_tree_types = 2 tree_types = [c + 1 for c in color] return (min_tree_types, tree_types) def solve_beautify_parks(test_cases): results = [] for n, m, edges in test_cases: result = min_tree_types(n, m, edges) if result: results.append((result[0], result[1])) else: max_degree = max(len(adj) for adj in graph) tree_types = [0] * n result = (max_degree + 1, tree_types) results.append(result) return results"},{"question":"Palindrome List =========== A palindrome is a word, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function `isPalindromeList()` that takes a list of strings as an argument and returns a new list consisting of `True` or `False` for each string, indicating whether the given string is a palindrome or not. The function should ignore case, spaces, and punctuation when determining if a string is a palindrome. Function Signature: ------------------- ```python def isPalindromeList(words: List[str]) -> List[bool]: ``` Input: ------ - `words` (list of strings): A list of strings to be checked for palindrome property. Output: ------- - The function should return a list of booleans, with `True` if the corresponding string is a palindrome, otherwise `False`. Example: -------- ```python isPalindromeList([\\"A man, a plan, a canal, Panama\\", \\"test\\", \\"madam\\", \\"hello, olleh\\"]) # Returns: [True, False, True, True] ```","solution":"import string def isPalindromeList(words): Takes a list of strings and returns a list of booleans indicating if each string is a palindrome (ignores spaces, punctuation, and capitalization). def clean_string(s): # Remove all spaces, punctuation, and convert to lowercase return \'\'.join(char.lower() for char in s if char.isalnum()) def is_palindrome(s): clean_s = clean_string(s) return clean_s == clean_s[::-1] return [is_palindrome(word) for word in words]"},{"question":"You are given a list of integers representing the price of a single share of a stock on different days. You need to find the maximum profit you can achieve if you are allowed to buy one share and then sell one share of the stock. Note that you must buy before you sell and the transaction cannot happen instantaneously (i.e., you must wait at least one day after buying to sell). Implement a function `max_profit(prices: List[int]) -> int` which takes the list of prices as input and returns the maximum profit. If no profit can be made, return 0. Example: ``` prices = [7, 1, 5, 3, 6, 4] max_profit(prices) => 5 # Buy on day 2 (price = 1) and sell on day 5 (price = 6) prices = [7, 6, 4, 3, 1] max_profit(prices) => 0 # No transaction is done, i.e., max profit = 0 ``` Constraints: - 1 ≤ prices.length ≤ 10^5 - 0 ≤ prices[i] ≤ 10^4","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit from buying and selling one share of stock. Prices should be a list of integers representing the stock prices on different days. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"You are given an array of integers. Your task is to determine if you can reorder the array such that the absolute difference between any two consecutive elements is at most 1. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - For every test case, the first line contains a single integer N, the number of elements in the array. - For every test case, the second line contains N space-separated integers Ai denoting the elements of the array. ( 1≤i≤N ). -----Output:----- For every test case, output \\"YES\\" if it is possible to reorder the array in the desired way, otherwise output \\"NO\\". -----Constraints----- - 1≤T≤100 - 1≤N≤1000 - 1≤Ai≤1000 -----Sample Input:----- 3 4 1 2 3 4 5 1 2 4 5 6 3 3 3 2 -----Sample Output:----- YES NO YES -----Explanation:----- - #1: We can reorder the array as [1, 2, 3, 4], where the absolute difference between any two consecutive elements is 1. - #2: It is impossible to reorder the array to satisfy the condition because, for example, the difference between 2 and 4 is 2. - #3: We can reorder the array as [2, 3, 3], where the absolute difference between any two consecutive elements is at most 1.","solution":"def can_reorder(arr): Determines if the array can be reordered such that the absolute difference between any two consecutive elements is at most 1. arr.sort() for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) > 1: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(can_reorder(arr)) return results"},{"question":"You are provided with a list of scores. Your task is to calculate the average score and return a grade based on the average score according to the following criteria: - If the average score is 90 or above, return \'A\' - If the average score is 80 to 89, return \'B\' - If the average score is 70 to 79, return \'C\' - If the average score is 60 to 69, return \'D\' - If the average score is below 60, return \'F\' ```python def calculate_grade(scores): Given a list of scores, calculates the average score and returns the corresponding grade as per the criteria. Args: scores: List of integers representing the scores. Returns: A string denoting the grade. ``` Example: ```python calculate_grade([80, 90, 100]) -> \'A\' calculate_grade([70, 75, 79]) -> \'C\' calculate_grade([55, 60, 63]) -> \'D\' calculate_grade([50, 45, 40]) -> \'F\' ```","solution":"def calculate_grade(scores): Given a list of scores, calculates the average score and returns the corresponding grade as per the criteria. Args: scores: List of integers representing the scores. Returns: A string denoting the grade. if not scores: return \'F\' # No scores to average, assume failure. average_score = sum(scores) / len(scores) if average_score >= 90: return \'A\' elif average_score >= 80: return \'B\' elif average_score >= 70: return \'C\' elif average_score >= 60: return \'D\' else: return \'F\'"},{"question":"Given a grid of letters and a list of words, determine whether each word in the list can be formed by sequentially adjacent letters in the grid, such as left, right, up, or down, without reusing any letter cell. -----Input----- The first line contains an integer T denoting the total number of test cases. In each test case, the first line contains two integers m and n denoting the dimensions of the grid. The next m lines each contain n characters, representing the grid of letters. The following line contains an integer k denoting the number of words. The last line contains k words as a single space-separated list. -----Output----- For each test case, output k lines where each line contains \\"YES\\" if the word can be formed from the grid, otherwise \\"NO\\". -----Constraints----- - 1 <= T <= 5 - 1 <= m, n <= 10 - 1 <= k <= 10 - 1 <= |words[i]| <= m * n -----Example----- Input: 1 3 4 a b c e s f c s a d e e 3 abcced see sexe Output: YES YES NO -----Explanation----- In the first test case, \'abcced\' can be formed from the grid as follows: a -> b -> c -> c -> e -> d. The word \'see\' can also be formed: s -> e -> e. The word \'sexe\' cannot be found in the grid using the given constraints.","solution":"def exist(board, word): def dfs(board, word, i, j, word_index): if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]: return False temp = board[i][j] board[i][j] = \\"#\\" found = (dfs(board, word, i + 1, j, word_index + 1) or dfs(board, word, i - 1, j, word_index + 1) or dfs(board, word, i, j + 1, word_index + 1) or dfs(board, word, i, j - 1, word_index + 1)) board[i][j] = temp return found for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return True return False def word_search(test_cases): results = [] for case in test_cases: m, n, grid, k, words = case for word in words: if exist(grid, word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): m, n = map(int, lines[idx].split()) idx += 1 grid = [] for _ in range(m): grid.append(list(lines[idx].split())) idx += 1 k = int(lines[idx]) idx += 1 words = lines[idx].split() idx += 1 test_cases.append((m, n, grid, k, words)) return test_cases"},{"question":"You are organizing a coding contest and you want to calculate the total score for each participant after the contest ends. The contest consists of several problems and each problem has a different score value. Participants may solve different subsets of the problems. To accurately calculate the total score, you need to consider the score of each solved problem for every participant. Create a method called `calculate_scores` that takes in two arguments: 1. `scores` - a list of integers representing the score value of each problem. 2. `results` - a dictionary where each key is a participant\'s name and the value is a list of booleans representing whether the participant solved each problem or not. The method should return a dictionary where each key is a participant\'s name and the value is the total score they achieved in the contest. # Example ```python scores = [10, 20, 30, 40] results = { \\"Alice\\": [True, False, True, True], \\"Bob\\": [True, True, False, False], \\"Charlie\\": [False, False, False, True] } print(calculate_scores(scores, results)) ``` # Expected Output ```python { \\"Alice\\": 80, \\"Bob\\": 30, \\"Charlie\\": 40 } ``` # Notes: - The length of the `scores` list represents the number of problems. - Each list within `results` also has the same length as `scores`, where `True` indicates the problem was solved by the participant and `False` indicates it was not. - Assume that `scores` list and all lists within `results` contain valid inputs of the same length.","solution":"def calculate_scores(scores, results): Calculate total scores for each participant based on the problems they solved. Parameters: scores (list of int): The score values for each problem. results (dict): A dictionary where each key is a participant\'s name and the value is a list of booleans. Returns: dict: A dictionary where each key is a participant\'s name and the value is their total score. total_scores = {} for participant, solved_problems in results.items(): total_scores[participant] = sum(score for score, solved in zip(scores, solved_problems) if solved) return total_scores"},{"question":"Given a string containing only the characters \'L\' and \'R\', you need to determine the maximum number of balanced substrings that can be obtained. A balanced substring is defined as one where the number of \'L\' characters is equal to the number of \'R\' characters. Write a function that takes the input string and returns the count of the maximum number of balanced substrings. Examples ```python balanced_substrings(\\"RLRRLLRLRL\\") # returns 4 balanced_substrings(\\"RLLLLRRRLR\\") # returns 3 balanced_substrings(\\"LLLLRRRR\\") # returns 1 balanced_substrings(\\"RLRRRLLRLL\\") # returns 2 ```","solution":"def balanced_substrings(s): Returns the maximum number of balanced substrings that can be obtained from the input string. Parameters: s (str): A string containing only the characters \'L\' and \'R\'. Returns: int: The count of the maximum number of balanced substrings. balance_count = 0 max_balanced_count = 0 for char in s: if char == \'L\': balance_count += 1 elif char == \'R\': balance_count -= 1 if balance_count == 0: max_balanced_count += 1 return max_balanced_count"},{"question":"Implement a function `remove_kth_element` that takes a singly linked list and an integer `k` and removes the `k`-th element from the end of the list in a single pass. The function should return the head of the modified linked list. If `k` is greater than the length of the list, it should return the unmodified list. **Examples:** ```python class ListNode: def __init__(self, x): self.val = x self.next = None # Helper function to create a linked list from a list def create_linked_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert linked list to list def linked_list_to_list(head): if not head: return [] result = [] current = head while current: result.append(current.val) current = current.next return result # Here is the function signature you need to implement def remove_kth_element(head, k): # Implement the function here. pass # Example usage head = create_linked_list([1, 2, 3, 4, 5]) k = 2 new_head = remove_kth_element(head, k) print(linked_list_to_list(new_head)) # Output: [1, 2, 3, 5] head = create_linked_list([1]) k = 1 new_head = remove_kth_element(head, k) print(linked_list_to_list(new_head)) # Output: [] head = create_linked_list([1, 2, 3]) k = 4 new_head = remove_kth_element(head, k) print(linked_list_to_list(new_head)) # Output: [1, 2, 3] ```","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def remove_kth_element(head, k): Removes the k-th element from the end of the linked list in a single pass and returns the head of the modified list. dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move first k+1 steps ahead for _ in range(k + 1): if not first: # k is larger than the length of the list return head first = first.next # Move first to the end, maintaining the gap while first: first = first.next second = second.next # Skip the k-th element second.next = second.next.next return dummy.next"},{"question":"Write a function that takes an array of integers and returns the sum of all unique numbers in the array. A number is considered unique if it appears exactly once in the array. For example, given the array `[1, 2, 2, 3, 4, 4, 5]`, the unique numbers are `[1, 3, 5]`, so the function should return `9`. Optimize your function to handle large inputs efficiently!","solution":"def sum_of_unique_numbers(arr): Returns the sum of all unique numbers in the array. A number is considered unique if it appears exactly once. from collections import Counter numbers_count = Counter(arr) unique_sum = sum(number for number, count in numbers_count.items() if count == 1) return unique_sum"},{"question":"Sarah is creating a list of unique passwords for her new website. She wants each password to be highly secure, meaning it should not contain any repeated characters. Given a string, she needs a program that will determine the length of the longest substring without repeating characters. If there are multiple substrings with the same maximum length, the program should return the one that appears first. Write a function `longest_unique_substring(s)` that takes a single string `s` (1 ≤ |s| ≤ 10^5) and returns the length of the longest substring with all unique characters. -----Input----- A single string `s` (1 ≤ |s| ≤ 10^5). -----Output----- Print a single integer - the length of the longest substring with all unique characters along with the starting index of such substring. -----Examples----- Input abcabcbb Output 3 0 Input bbbbb Output 1 0 Input pwwkew Output 3 2 -----Note----- In the first example, the longest substring with all unique characters is \\"abc\\", which has a length of 3 and starts at index 0. In the second example, the longest substring with all unique characters is \\"b\\", which has a length of 1 and starts at index 0. In the third example, the longest substring with all unique characters is \\"wke\\", which has a length of 3 and starts at index 2.","solution":"def longest_unique_substring(s): Returns the length and starting index of the longest substring with all unique characters. start = 0 # starting index of the current substring max_len = 0 # maximum length of the substring found max_start = 0 # starting index of the maximum length substring char_map = {} # dictionary to store the latest index of each character for end, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_start = start return max_len, max_start"},{"question":"A programming company intends to evaluate the efficiency of their code refactoring tool. The company will provide a script consisting of multiple methods, and they need to identify and refactor all method invocations to follow a new naming convention. Specifically, all method names must be changed to camelCase style. The input script and the patterns of method calls are provided in snake_case. The method names should be converted from snake_case to camelCase, meaning all underscores should be removed and each word after the first should begin with an uppercase letter. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of multiple lines: - The first line is an integer N, the number of lines in the script. - The following N lines contain the script. -----Output:----- For each test case, output the modified script with all method names converted to camelCase. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - Each line in the script will be at most 100 characters long. - Method names will only contain lowercase English letters and underscores. -----Sample Input:----- 1 5 def create_user(): pass def get_user_details(): pass user = create_user() user_details = get_user_details() -----Sample Output:----- def createUser(): pass def getUserDetails(): pass user = createUser() user_details = getUserDetails() -----EXPLANATION:----- In this case, all method names which were initially in snake_case are correctly converted to camelCase. \'create_user\' becomes \'createUser\' and \'get_user_details\' changes to \'getUserDetails\', with the underscores removed and subsequent words capitalized.","solution":"import re def convert_snake_to_camel(snake_str): Converts a snake_case string to camelCase string. parts = snake_str.split(\'_\') camel_str = parts[0] + \'\'.join(word.capitalize() for word in parts[1:]) return camel_str def refactor_script(script_lines): Refactors the given list of script lines by converting all method invocations to camelCase. method_pattern = re.compile(r\'bdefs+(w+)|b(w+)s*(\') def replacer(match): method_name = match.group(1) or match.group(2) return match.group(0).replace(method_name, convert_snake_to_camel(method_name)) refactored_lines = [] for line in script_lines: refactored_line = method_pattern.sub(replacer, line) refactored_lines.append(refactored_line) return refactored_lines def refactor_scripts(test_cases): Applies refactor_script to each test case provided. results = [] for script_lines in test_cases: results.append(\'n\'.join(refactor_script(script_lines))) return results"},{"question":"A town hall has received complaints about noise. They want to identify if any two parks in the town have the same model of fountain that could potentially be causing the disturbances. Write a function: ```python def detect_noise_problem(first_park, second_park) ``` The parameters, `first_park` and `second_park`, are two lists representing the models of fountains in each park. You should return a list of unique models that are present in both parks. The models in the resulting list should appear in the order they first appear in `first_park`. If there are no common fountain models, return \\"peaceful\\".","solution":"def detect_noise_problem(first_park, second_park): Determines if there are any common fountain models between two parks. :param first_park: List of fountain models in the first park. :param second_park: List of fountain models in the second park. :return: List of unique models present in both parks, or \\"peaceful\\" if no common models. # Convert second_park to a set for efficient lookup second_park_set = set(second_park) # Initialize a list to hold the common models common_models = [] # Use a set to keep track of added models to avoid duplicates added_models = set() # Iterate over the fountain models in the first park for model in first_park: if model in second_park_set and model not in added_models: common_models.append(model) added_models.add(model) # If no common models were found, return \\"peaceful\\" if not common_models: return \\"peaceful\\" return common_models"},{"question":"# Task You are given an array of integers `a` and a positive integer `n`. Your task is to compute the \\"n-th smallest absolute difference\\" in the array. The \\"absolute difference\\" between any two elements of the array is defined as `|a[i] - a[j]|` where `i` is not equal to `j`. # Example For `a = [1, 3, 4, 9]` and `n = 3`, the output should be `3`. ``` All absolute differences: |1-3| = 2, |1-4| = 3, |1-9| = 8, |3-4| = 1, |3-9| = 6, |4-9| = 5 Sorted absolute differences: [1, 2, 3, 5, 6, 8] 3rd smallest absolute difference: 3 ``` For `a = [2, 7, 5]` and `n = 4`, the output should be `5`. ``` All absolute differences: |2-7| = 5, |2-5| = 3, |7-5| = 2 Sorted absolute differences: [2, 3, 5] 4th smallest absolute difference does not exist. ``` # Input/Output - `[input]` integer array `a` The initial array. Constraints: `1 <= a.length <= 100` `1 <= a[i] <= 1000` - `[input]` integer `n` The n-th smallest absolute difference. Constraints: `1 <= n <= 4950` (The maximum number of absolute differences when `a.length` is 100 is `99 * 100 / 2 = 4950`) - `[output]` an integer The `n-th` smallest absolute difference, or `-1` if `n` is out of bounds.","solution":"def nth_smallest_absolute_difference(a, n): Returns the n-th smallest absolute difference in the array `a`. If n is out of bounds, returns -1. # Compute all absolute differences differences = [] for i in range(len(a)): for j in range(i + 1, len(a)): differences.append(abs(a[i] - a[j])) # Sort the differences differences.sort() # Check if n is within bounds if n > len(differences): return -1 # Return the n-th smallest absolute difference return differences[n - 1]"},{"question":"Design a function named `three_multiples` that accepts a list of integers and returns a new list, which is formed by appending all the multiples of 3 from the input list in the order they appear, followed by all other integers in reverse order. **Function Signature:** ```python def three_multiples(numbers: List[int]) -> List[int]: ``` **Input:** - `numbers`: a list of integers with length `n` where (1 leq n leq 1000). **Output:** - A new list of integers with multiples of 3 from the original list in their original order followed by all other integers in reverse order. **Examples:** ```python Input: [1, 2, 3, 4, 5, 6, 7, 8, 9] => Output: [3, 6, 9, 8, 7, 5, 4, 2, 1] Input: [10, 3, 5, 9, 2, 15] => Output: [3, 9, 15, 2, 5, 10] Input: [10, 5, 8, 11] => Output: [11, 8, 5, 10] Input: [9, 18, 12, 6, 3] => Output: [9, 18, 12, 6, 3] ``` **Explanation:** - In the first example, `3`, `6`, and `9` are multiples of 3 and are added in their original positions. The remaining numbers `[1, 2, 4, 5, 7, 8]` are added in reverse order. - In the second example, the multiples of 3 are `3`, `9`, and `15`. The remaining numbers `[10, 5, 2]` are added in reverse. - In the third example, there are no multiples of 3, so the original list `[10, 5, 8, 11]` is reversed.","solution":"from typing import List def three_multiples(numbers: List[int]) -> List[int]: Returns a new list formed by appending all the multiples of 3 from the input list in the order they appear, followed by all other integers in reverse order. multiples_of_three = [num for num in numbers if num % 3 == 0] non_multiples_of_three = [num for num in numbers if num % 3 != 0] return multiples_of_three + non_multiples_of_three[::-1]"},{"question":"Write a function `longest_unique_substring(s)` that takes a string as input and returns the length of the longest substring without repeating characters. Examples: ```python longest_unique_substring(\\"abcabcbb\\") == 3 # Explanation: The longest substring without repeating characters is \\"abc\\", which the length is 3. longest_unique_substring(\\"bbbbb\\") == 1 # Explanation: The longest substring without repeating characters is \\"b\\", with the length of 1. longest_unique_substring(\\"pwwkew\\") == 3 # Explanation: The longest substring without repeating characters is \\"wke\\", with the length of 3. Notice that \\"pwke\\" is a subsequence and not a substring. ``` Features of the random tests: ``` Low Performance Tests: 30 Length of the strings between 1 to 10,000 High Performance Tests: 50 Length of the strings between 10,000 to 100,000 ``` Your task is to implement the function efficiently to handle the high performance tests within a reasonable time frame.","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"In ChefLand, there are series of marathons happening. Each marathon consists of several checkpoints where Chef and his friends can stop and rest. Each checkpoint has a certain limit on the number of participants that can rest at a time, as well as a defined rest duration required to fully recover. Chef wants to plan his participation so that he can maximize his rest time under the constraints provided. You need to help Chef determine the maximum total rest time possible for the given series of marathons. -----Input----- The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of checkpoints in the marathon. Each of the next N lines contains two integers Ri and Pi, where Ri denotes the rest time at the ith checkpoint and Pi denotes the participant limit at the ith checkpoint for that marathon. -----Output----- For each test case, output a single line containing the maximum total rest time that Chef can achieve. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 50 - 1 ≤ Ri ≤ 100 - 1 ≤ Pi ≤ 100 -----Example----- Input: 2 3 30 2 50 1 70 3 4 45 3 30 4 35 2 60 2 Output: 150 155 -----Explanation----- Example case 1: Chef can potentially rest at all three checkpoints maximizing his rest time (30 + 50 + 70 = 150). Example case 2: Chef can rest at all four checkpoints maximizing his rest time (45 + 30 + 35 + 60 = 170). However, the total participants must not exceed the limit of the checkpoints, but we assume Chef alone can rest up to the limit guidelines as per constraints.","solution":"def max_total_rest_time(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] checkpoints = test_cases[i][1:] total_rest_time = sum([checkpoint[0] for checkpoint in checkpoints]) results.append(total_rest_time) return results"},{"question":"Given a rectangular grid of size n x m, you need to process q queries. Each query can be one of the following types: 1. `+ r c x` – Update the element in the r-th row and c-th column of the grid by adding x to its current value. 2. `- r c x` – Update the element in the r-th row and c-th column of the grid by subtracting x from its current value. 3. `? r1 c1 r2 c2` – Find the sum of all elements in the subgrid defined by the corners (r1, c1) (top-left) and (r2, c2) (bottom-right) inclusive. The grid is initially filled with zeros. -----Input----- The first line of the input contains the integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid, respectively. The second line contains an integer q (1 ≤ q ≤ 100,000) – the number of queries. Each of the next q lines describes a query using one of the three formats as described above. Specifically: - If the query is of the type `+ r c x` or `- r c x`, then `1 ≤ r ≤ n`, `1 ≤ c ≤ m`, and `-1000 ≤ x ≤ 1000`. - If the query is of the type `? r1 c1 r2 c2`, then `1 ≤ r1 ≤ r2 ≤ n` and `1 ≤ c1 ≤ c2 ≤ m`. -----Output----- For each query of the third type (`? r1 c1 r2 c2`), output the sum of the elements in the specified subgrid on a new line. -----Examples----- Input 3 3 8 + 1 1 5 + 2 2 10 ? 1 1 2 2 - 1 1 2 ? 1 1 2 2 + 3 3 7 ? 1 1 3 3 ? 2 2 3 3 Output 15 13 20 17 Input 2 2 4 + 1 1 3 + 2 2 4 - 1 1 1 ? 1 1 2 2 Output 6 -----Note----- Consider the grid state after each operation: 1. Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 ``` 2. After `+ 1 1 5`: ``` 5 0 0 0 0 0 0 0 0 ``` 3. After `+ 2 2 10`: ``` 5 0 0 0 10 0 0 0 0 ``` 4. The sum of the subgrid (1, 1) to (2, 2) is `5 + 0 + 0 + 10 = 15`. Continue in the same fashion for subsequent operations and queries as demonstrated by the example.","solution":"class Grid: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] def update(self, r, c, x, op): if op == \'+\': self.grid[r][c] += x elif op == \'-\': self.grid[r][c] -= x def query(self, r1, c1, r2, c2): total = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total += self.grid[i][j] return total def process_queries(n, m, queries): grid = Grid(n, m) results = [] for query in queries: parts = query.split() if parts[0] == \'+\' or parts[0] == \'-\': r, c, x = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) grid.update(r, c, x, parts[0]) elif parts[0] == \'?\': r1, c1, r2, c2 = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) - 1, int(parts[4]) - 1 result = grid.query(r1, c1, r2, c2) results.append(result) return results # Example usage n, m, q = 3, 3, 8 queries = [ \\"+ 1 1 5\\", \\"+ 2 2 10\\", \\"? 1 1 2 2\\", \\"- 1 1 2\\", \\"? 1 1 2 2\\", \\"+ 3 3 7\\", \\"? 1 1 3 3\\", \\"? 2 2 3 3\\" ] print(process_queries(n, m, queries)) # Output: [15, 13, 20, 17]"},{"question":"Write a function `max_subarray_sum` that finds the maximum sum of any contiguous subarray within an array of integers. The function should take one argument: a list of integers `nums`, and return an integer representing the maximum sum found. For example: - `max_subarray_sum([1, -2, 3, 4, -1, 2, 1, -5, 4])` returns `9` (the subarray is `[3, 4, -1, 2, 1]`) - `max_subarray_sum([-1, -2, -3, -4])` returns `-1` (the subarray is `[-1]`) - `max_subarray_sum([5, 4, -1, 7, 8])` returns `23` (the subarray is `[5, 4, -1, 7, 8]`) - `max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4])` returns `6` (the subarray is `[4, -1, 2, 1]`) - `max_subarray_sum([1])` returns `1` (the subarray is `[1]`) Constraints: - The function should handle edge cases such as an empty list, which should return `0`. - The list `nums` can have at most `10^5` elements and the elements can be between `-10^4` and `10^4`. You should aim for a solution with a time complexity of O(n). Use an efficient algorithm such as Kadane\'s algorithm to solve the problem.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any contiguous subarray within an array of integers. Parameters: nums (list): List of integers. Returns: int: Maximum sum of any contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Objective Write a function that takes a list of integers and returns the largest product of any three numbers from the list. This is a classic problem that involves elements of combinatorics and can be solved by sorting, but your goal is to find an optimized solution. Requirements - Your implementation should have a time complexity of O(n log n) or better. - Handle edge cases: arrays with fewer than three elements should return a message indicating that more elements are required. Function Signature The function should be defined as: ```python def largest_product_of_three(nums: list) -> int: ``` Examples ```python largest_product_of_three([1, 10, 2, 6, 5, 3]) == 300 # Here, the largest product possible is 10 * 6 * 5 = 300 largest_product_of_three([-10, -10, 5, 2]) == 500 # Even though -10 * -10 = 100, you have to multiply by the largest single number 5 or 2, # hence the largest product is 100 * 5 = 500 ``` Constraints - You may assume that there are no integer overflow issues with the calculations. - The input list will contain only integers. *Note*: There can be both negative and positive numbers in the list. The largest product can be a combination of both. Consider sorting and also looking at potential products of the largest and smallest values after sorting.","solution":"def largest_product_of_three(nums: list) -> int: Returns the largest product of any three numbers from the given list. if len(nums) < 3: raise ValueError(\\"List must contain at least three numbers\\") nums.sort() # The largest product of three numbers can be the product of: # 1. The three largest numbers # 2. The two smallest numbers (most negative) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function that takes a positive integer as input and returns the corresponding column title as it appears in an Excel sheet. Columns follow a pattern similar to the alphabetical order, but after \'Z\', it continues with \'AA\', \'AB\', and so on. Example: ```python excel_column_title(1) # => returns \\"A\\" excel_column_title(28) # => returns \\"AB\\" excel_column_title(701) # => returns \\"ZY\\" ``` ```f# excelColumnTitle 1 // => returns \\"A\\" excelColumnTitle 28 // => returns \\"AB\\" excelColumnTitle 701 // => returns \\"ZY\\" ```","solution":"def excel_column_title(n): result = [] while n > 0: n -= 1 # Adjust for 1-based index remainder = n % 26 result.append(chr(65 + remainder)) # Convert to ASCII A-Z n = n // 26 return \'\'.join(result[::-1])"},{"question":"You are given a list of integers representing the heights of several buildings arranged in a line. A building can see the sunset if it is not blocked by a taller building to its right. Complete the function `sunsetViews(buildings)` that returns a new list containing the heights of buildings that can see the sunset. The buildings should be considered from left to right, and buildings with the same height as another building to their left can also see the sunset. **Note:** The input list may contain zero or more integers and should not contain any other types. **Examples** - Example 1: ``` Input: [3, 5, 4, 9, 7, 6] Output: [3, 5, 9] ``` - Example 2: ``` Input: [1, 3, 2, 6, 4, 8, 7, 9] Output: [1, 3, 6, 8, 9] ``` Happy coding!","solution":"def sunsetViews(buildings): Returns a list of building heights that can see the sunset. A building can see the sunset if there are no taller buildings to its right. Parameters: buildings (list of int): The heights of the buildings. Returns: list of int: The heights of the buildings that can see the sunset. if not buildings: return [] result = [] max_height = 0 for height in buildings: if height > max_height: result.append(height) max_height = height return result"},{"question":"Write a function that takes a list of integers and groups them into a specified number of contiguous sublists such that the maximum sum of any sublist is minimized. Your function should return this minimized maximum sum. For example, if you have the list [7, 2, 5, 10, 8] and you want to split it into 2 sublists, you could split it into [7, 2, 5] and [10, 8], giving totals of 14 and 18. The largest sum in either of those sublists is 18, and you cannot do any better. # Input: - arr: A list of integers (1 ≤ len(arr) ≤ 1000, 1 ≤ arr[i] ≤ 1000) - k: An integer denoting the number of sublists to split the list into (1 ≤ k ≤ len(arr)) # Output: - Integer: the minimized maximum sum of the sublists. # Example: ``` minimize_max_sum([7, 2, 5, 10, 8], 2) ``` Should return ``` 18 ``` Explanation: - One possible way to split the list into 2 sublists is [7, 2, 5] and [10, 8], with sums of 14 and 18 respectively. The largest of these sums is 18. - Another way to split it is [7, 2] and [5, 10, 8], with sums of 9 and 23. The largest of these sums is 23. - The first method results in the smallest possible maximum sum, which is 18. # Constraints: - You may use any method taught in approximation algorithms or greedy techniques to achieve the solution. - There is no guarantee that a straightforward greedy approach will always yield the optimal solution. # Note: This problem closely relates to the \\"Partition Problem\\" or \\"Multi-Way Number Partitioning\\", which can be solved using binary search in conjunction with a greedy check.","solution":"def can_split(nums, k, max_sum): current_sum = 0 needed_splits = 1 for num in nums: if current_sum + num > max_sum: needed_splits += 1 current_sum = num if needed_splits > k: return False else: current_sum += num return True def minimize_max_sum(arr, k): left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if can_split(arr, k, mid): right = mid else: left = mid + 1 return left"},{"question":"Palindrome Permutation A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string `s`, write a function that determines whether any permutation of `s` is a palindrome. How this problem works Your task is to write a function `isPermutationPalindrome(s)` which takes a string `s` as input and returns `True` if any permutation of `s` can be rearranged to form a palindrome, and `False` otherwise. The string `s` will consist of lowercase letters only. Example `isPermutationPalindrome(\'civic\')` should return `True` because \'civic\' is a palindrome. `isPermutationPalindrome(\'ivicc\')` should return `True` because one of the permutations of \'ivicc\' is \'civic\', which is a palindrome. `isPermutationPalindrome(\'hello\')` should return `False` because there are no permutations of \'hello\' that form a palindrome. Note - Consider only lowercase letters a-z. - Ignore spaces and punctuation. Have fun (en)coding!","solution":"def isPermutationPalindrome(s): Determines if any permutation of the string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be a permutation of a palindrome, # it can have at most one character with an odd frequency count. return odd_count <= 1"},{"question":"Design a function to balance parentheses and brackets within a given string. Write a function that takes a string as an argument and returns a boolean value indicating whether the parentheses `(` `)` and the square brackets `[` `]` in the string are balanced. A string is considered balanced if: - For every opening parenthesis `(`, there is a corresponding closing parenthesis `)`. - For every opening square bracket `[`, there is a corresponding closing square bracket `]`. - Parentheses and brackets must close in the correct order. For example, the string \\"( [ ] )\\" is balanced, but \\"[ ( )\\" is not balanced. Examples: - `is_balanced(\\"( [ ] )\\")` should return `true`. - `is_balanced(\\"[ ( ) ]\\")` should return `true`. - `is_balanced(\\"( ] [ )\\")` should return `false`. - `is_balanced(\\"())(\\")` should return `false`. Your function should efficiently verify if the parentheses and brackets in the given string are properly balanced and nested.","solution":"def is_balanced(s): Check if the parentheses and brackets in the given string are balanced. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\'} for char in s: if char in \\"([\\": stack.append(char) elif char in \\")]\\": if stack and stack[-1] == matching_bracket[char]: stack.pop() else: return False return not stack"},{"question":"Given a string containing only digits, we can form words by mapping each digit to a set of characters as follows: ``` 2 -> \\"abc\\", 3 -> \\"def\\", 4 -> \\"ghi\\", 5 -> \\"jkl\\", 6 -> \\"mno\\", 7 -> \\"pqrs\\", 8 -> \\"tuv\\", 9 -> \\"wxyz\\" ``` Write a function that returns all possible letter combinations that can be generated by the given input digits. Assume that the input string contains only digits from `2` to `9`. Example: ```python def letter_combinations(digits): # Your code here # Test cases print(letter_combinations(\\"23\\")) # [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] print(letter_combinations(\\"\\")) # [] print(letter_combinations(\\"2\\")) # [\\"a\\", \\"b\\", \\"c\\"] ``` The order of the output does not matter. Make sure to include edge cases in your testing: - An empty input string should return an empty list. - Inputs with a single digit should return all possible letters mapped from that digit. Good luck!","solution":"from typing import List def letter_combinations(digits: str) -> List[str]: if not digits: return [] # Mapping of digits to letters digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Helper function to generate combinations def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return possible_chars = digit_to_char[digits[index]] for char in possible_chars: backtrack(index + 1, path + char) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"You are given a grid with dimensions `n x n`, where `n` is an even integer. Each cell in the grid contains a number representing its height above sea level. The grid forms a landscape with valleys (lower heights) and peaks (higher heights). The goal is to find the lowest point in each quadrant of the grid. You will split the grid into four quadrants: - Top-left - Top-right - Bottom-left - Bottom-right Each quadrant will have dimensions `n/2 x n/2`. Your task is to implement a function `find_lowest_points(grid)` that returns a list of the lowest points from each quadrant in the form `[top_left, top_right, bottom_left, bottom_right]`. For example, given the grid: ``` [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The quadrants are: - Top-left: `[[1, 2], [5, 6]]` - Top-right: `[[3, 4], [7, 8]]` - Bottom-left: `[[9, 10], [13, 14]]` - Bottom-right: `[[11, 12], [15, 16]]` The function would return `[1, 3, 9, 11]` because these are the lowest points in each respective quadrant. # Function Signature ```python def find_lowest_points(grid: List[List[int]]) -> List[int]: pass ``` # Input - `grid`: a list of lists of integers representing the grid, where `n` is the length of the grid and `n` is an even integer (2 ≤ n ≤ 1000). # Output - A list of four integers representing the lowest points in the top-left, top-right, bottom-left, and bottom-right quadrants. # Constraints - The elements in the grid will be integers within the range `-1000000` to `1000000`. - `n` will be an even integer. # Example ```python grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] find_lowest_points(grid) # should return [1, 3, 9, 11] ```","solution":"def find_lowest_points(grid): n = len(grid) half = n // 2 top_left_min = min(grid[i][j] for i in range(half) for j in range(half)) top_right_min = min(grid[i][j] for i in range(half) for j in range(half, n)) bottom_left_min = min(grid[i][j] for i in range(half, n) for j in range(half)) bottom_right_min = min(grid[i][j] for i in range(half, n) for j in range(half, n)) return [top_left_min, top_right_min, bottom_left_min, bottom_right_min]"},{"question":"Design an algorithm that receives an array of integers and a target sum. The function should return an array of unique pairs of integers from the input array that add up to the target sum. Each pair should be sorted in non-descending order, and the output array should not contain duplicate pairs. For instance: - For the input `array = [1, 2, 3, 4, 3, 2, 1]` and `target_sum = 4`, the function should return `[[1, 3], [2, 2]]`. - For the input `array = [0, -1, 2, -3, 1, -4, 3]` and `target_sum = -1`, the function should return `[[-4, 3], [-3, 2], [-1, 0]]`.","solution":"def find_pairs_with_target_sum(array, target_sum): Returns a list of unique pairs of integers in the array that add up to the target sum. Each pair is sorted in non-descending order, and the output list does not contain duplicate pairs. seen = {} pairs = set() for num in array: complement = target_sum - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen[num] = True return [list(pair) for pair in pairs]"},{"question":"# Task You are given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', representing different types of parentheses. Write a function to determine if the string is valid. A string is considered valid if all parentheses are well-formed and properly nested. # Example For `s = \\"([{}])\\"` The result should be `true`. For `s = \\"([)]\\"` The result should be `false`. For `s = \\"{[]}\\"` The result should be `true`. # Input/Output - `[input]` string `s` A string consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The length of the string will not exceed `1000`. - `[output]` boolean Return `true` if the string is valid, and `false` otherwise.","solution":"def is_valid_parentheses(s): Returns True if the input string s contains valid parentheses, and False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Calculate the Sum of Prime Numbers Up to N Write a function `sumOfPrimes` that takes a positive integer `n` and returns the sum of all prime numbers less than or equal to `n`. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. # Example ``` sumOfPrimes(10) => 17 (because the prime numbers are 2, 3, 5, 7 and their sum is 17) sumOfPrimes(20) => 77 (because the prime numbers are 2, 3, 5, 7, 11, 13, 17, 19 and their sum is 77) ``` # Constraints - The function should be optimized for performance. - You can assume `n` will be a positive integer. Write a function in Python: ```python def sumOfPrimes(n): # Your code here ``` # Testing - The function should handle edge cases such as very small values of `n`. - The function should be efficient enough to handle larger values up to `n = 1000000`.","solution":"def sumOfPrimes(n): Returns the sum of all prime numbers less than or equal to n. if n < 2: return 0 # Implementing the Sieve of Eratosthenes to find all primes <= n sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiples in range(start*start, n + 1, start): sieve[multiples] = False # Sum all the numbers that are marked as prime return sum(i for i, is_prime in enumerate(sieve) if is_prime)"},{"question":"-----Coding Assessment Question----- Alice and Bob love playing with strings. They have come up with a new game involving two strings. The rules of the game are as follows: - Alice takes a string `S1`, and Bob takes another string `S2` of exactly the same length as `S1`. - They both can swap any two characters in their respective strings as many times as they want. - The goal is to determine if they can make their strings equal after any number of swap operations. Your task is to help them determine if it\'s possible to make `S1` and `S2` identical by only swapping characters. -----Input:----- - The first line of the input contains an integer `T` (1 <= T <= 1000) denoting the number of test cases. - Next `2*T` lines follow. For each test case: - The first line contains the string `S1`. - The second line contains the string `S2`. -----Output:----- For each test case, print `YES` if it is possible to make the strings identical using any number of swaps. Otherwise, print `NO`. -----Constraints:----- - The length of each string `S1` and `S2` is between 1 and 1000, inclusive. - Both strings consist of lowercase English letters only. -----Sample Input:----- 2 abc bca abcd abdc -----Sample Output:----- YES YES -----Explanation:----- - In the first test case, `abc` can be swapped to become `bca`. Therefore, the output is `YES`. - In the second test case, `abcd` and `abdc` are already identical after the necessary swaps. Therefore, the output is `YES`.","solution":"def can_strings_be_made_equal(T, test_cases): Determines if two strings can be made equal by swapping characters. Args: T: Integer, number of test cases. test_cases: List of tuples, each containing two strings S1 and S2 of equal length. Returns: List of strings: \\"YES\\" or \\"NO\\" for each test case based on the possibility. results = [] for S1, S2 in test_cases: if sorted(S1) == sorted(S2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # test_cases = [(\\"abc\\", \\"bca\\"), (\\"abcd\\", \\"abdc\\")] # print(can_strings_be_made_equal(2, test_cases))"},{"question":"Implement a function `interleave_strings` that takes two strings `s1` and `s2` and interleaves them character by character. If one string is longer than the other, append the remaining characters of the longer string to the result. For example: ``` interleave_strings(\'abc\', \'def\') -> \'adbecf\' interleave_strings(\'abc\', \'d\') -> \'adbc\' interleave_strings(\'a\', \'xyz\') -> \'axyz\' interleave_strings(\'abc\', \'\') -> \'abc\' interleave_strings(\'\', \'xyz\') -> \'xyz\' ``` Note: You are not allowed to use any extra storage other than a few variables. Make sure your implementation runs in linear time and efficiently handles strings of substantial length.","solution":"def interleave_strings(s1, s2): Interleaves two strings character by character. If one string is longer, append the remaining characters to the result. Args: s1 (str): The first string. s2 (str): The second string. Returns: str: The interleaved string. result = [] length1, length2 = len(s1), len(s2) min_length = min(length1, length2) for i in range(min_length): result.append(s1[i]) result.append(s2[i]) if length1 > length2: result.append(s1[min_length:]) else: result.append(s2[min_length:]) return \'\'.join(result)"},{"question":"A social networking website allows users to connect with friends and post status updates. Each user has a unique user ID and can send friend requests to others. Once two users are friends, they can view each other\'s posts. You are given a log of actions performed on the website. Each action can be either a friend request or a status post. Your task is to identify all users who have at least one friend and have made status posts. Return the list of such users sorted by user ID in ascending order. -----Input----- The first line contains an integer N which represents the number of actions performed on the website. Each of the next N lines describes an action. Each action is formatted as follows: - \\"friend_request user1 user2\\" – user1 sends a friend request to user2. - \\"post user\\" – user makes a status update. -----Output----- Print a single line containing the list of user IDs who have at least one friend and have made a status post, sorted in ascending order. -----Constraints----- 1. 1 ≤ N ≤ 105 2. 1 ≤ user1, user2, user ≤ 105 -----Example----- Input: 8 friend_request 1 2 post 1 friend_request 1 3 friend_request 2 3 post 3 post 2 friend_request 4 5 post 5 Output: 1 2 3 5 -----Explanation----- User 1 made a post and has friends (user 2 and user 3). User 2 made a post and has friends (user 1 and user 3). User 3 made a post and has friends (user 1 and user 2). User 5 made a post and has a friend (user 4).","solution":"def get_active_users_with_friends(action_log): from collections import defaultdict # Dictionary to store friends of each user friends = defaultdict(set) # Set to store users who have made posts users_with_posts = set() for action in action_log: parts = action.split() if parts[0] == \\"friend_request\\": user1 = int(parts[1]) user2 = int(parts[2]) friends[user1].add(user2) friends[user2].add(user1) elif parts[0] == \\"post\\": user = int(parts[1]) users_with_posts.add(user) result = [] for user in users_with_posts: if friends[user]: result.append(user) result.sort() return result"},{"question":"There is a list of integers where every integer appears an even number of times except for one integer that appears an odd number of times. Write a function that finds the integer which appears an odd number of times. ```python def find_odd_occurrence(xs): This function takes a list of integers and returns the integer that appears an odd number of times. result = 0 for number in xs: result ^= number return result # Test cases print(find_odd_occurrence([20, 1, 1, 2, 2, 3, 3])) # == 20 print(find_odd_occurrence([4, 3, 3, 4, 4, 4, 99, 99, 99, 99, 99])) # == 99 ``` You can assume that the given list always contains at least one integer and that exactly one integer appears an odd number of times.","solution":"def find_odd_occurrence(xs): This function takes a list of integers and returns the integer that appears an odd number of times. result = 0 for number in xs: result ^= number return result"},{"question":"Given an array of integers, write a function to find the second largest integer in the array. For example: - Given `[34, 15, 88, 2]`, your solution should return `34` - Given `[34, -345, -1, 100]`, your solution should return `34` You can assume that the supplied array will have at least two unique integers.","solution":"def second_largest(nums): Returns the second largest integer in the list nums. Assumes that the list nums has at least two unique integers. first = second = float(\'-inf\') for num in nums: if num > first: second = first first = num elif first > num > second: second = num return second"},{"question":"Write a function that takes a string as input and returns a new string in which each character from the original string is repeated 3 times. For example, if the input string is \\"abc\\", the output should be \\"aaabbbccc\\". If the input string is empty, the function should return an empty string. **Function Signature:** ```python def repeat_each_char_three_times(s: str) -> str: pass ``` **Examples:** ```python assert repeat_each_char_three_times(\\"abc\\") == \\"aaabbbccc\\" assert repeat_each_char_three_times(\\"abcd\\") == \\"aaabbbcccddd\\" assert repeat_each_char_three_times(\\"\\") == \\"\\" assert repeat_each_char_three_times(\\"!\\") == \\"!!!\\" ```","solution":"def repeat_each_char_three_times(s: str) -> str: Returns a new string in which each character from the original string is repeated 3 times. return \'\'.join([char * 3 for char in s])"},{"question":"In the world of competitive programming, finding the optimal path in a grid can be crucial. You are given a grid with `m` rows and `n` columns, where each cell contains a non-negative integer representing the cost to move through that cell. Your task is to write a function `minPathSum` that finds the minimum cost path from the top-left corner to the bottom-right corner of the grid. You can only move to the right or down at any point in time. Here is the function signature: ```python def minPathSum(grid: List[List[int]]) -> int: ``` # Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(minPathSum(grid)) # Output: 7 ``` # Explanation: The path 1 → 3 → 1 → 1 → 1 gives a minimal sum of 7. # Constraints: - `m == len(grid)` - `n == len(grid[i])` - `1 <= m, n <= 200` - `0 <= grid[i][j] <= 1000` # Notes: - The grid will always have at least one cell. - The solution should be optimized to handle large grids efficiently. - Consider using dynamic programming to achieve the optimal solution in terms of time and space complexity.","solution":"from typing import List def minPathSum(grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) # Initialize a 2D dp array where dp[i][j] is the minimum cost to reach (i, j) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1]"},{"question":"Given an input list of integers, write a function that finds and returns a pair of indices `[i, j]` such that `nums[i] + nums[j] == target` and `i < j`. If no such pair exists, return an empty list `[]`. You are not allowed to use the same element twice. Aim for an efficient solution in terms of time complexity. # Example ```python two_sum([2, 7, 11, 15], 9) # returns [0, 1] because nums[0] + nums[1] == 9 two_sum([3, 2, 4], 6) # returns [1, 2] because nums[1] + nums[2] == 6 two_sum([3, 3], 6) # returns [0, 1] because nums[0] + nums[1] == 6 two_sum([1, 2, 3], 7) # returns [] because no two numbers add up to 7 ``` # Constraints - Each input list will have at least two integers. - Each integer in the list will be in the range from `-10^9` to `10^9`. - The target integer will be in the range from `-10^9` to `10^9`. - Optimize your solution to have a linear runtime complexity if possible.","solution":"def two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. num_map = {} # store number and its index for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"You are given a list of intervals representing start and end times of various meetings. Each meeting can be represented as a tuple of two integers, where the first integer denotes the start time and the second integer denotes the end time. Your task is to determine if a person could attend all meetings without any overlap. Write a function `canAttendMeetings(intervals)` that takes a list of intervals as input, and returns a boolean indicating whether a person could attend all meetings without any overlap. Example 1: Input: [(0, 30), (5, 10), (15, 20)] Output: False Explanation: One cannot attend both the meetings (0, 30) and (5, 10) since their time intervals overlap. Example 2: Input: [(5, 8), (9, 15)] Output: True Explanation: There is no overlap between the meetings (5, 8) and (9, 15). Note: - The intervals will be a list of tuples where each tuple contains two integers. - The intervals are sorted by their start time. - 0 <= len(intervals) <= 10^4","solution":"def canAttendMeetings(intervals): Determines if a person can attend all meetings without any overlap. Parameters: intervals (List[Tuple[int, int]]): List of intervals representing meeting times. Returns: bool: True if a person can attend all meetings, False otherwise. # Sort intervals by start time intervals.sort(key=lambda x: x[0]) # Check for any overlap for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Given a string consisting of lowercase letters and spaces, return the most frequent word in the string. If multiple words have the highest frequency, return the lexicographically smallest one. Notes: * Words are separated by spaces. * The input string will have at least one word. * Consider only the alphabetical characters for determining word frequency. Examples ```python most_frequent_word(\\"hello world hello\\") ==> \\"hello\\" most_frequent_word(\\"a banana apple orange a\\") ==> \\"a\\" # \'a\' and \'orange\' both have the max frequency (2), but \'a\' is lexicographically smaller most_frequent_word(\\"apple banana banana pear\\") ==> \\"banana\\" ``` If you get a timeout, just try to resubmit your solution. However, if you ***always*** get a timeout, review your code.","solution":"def most_frequent_word(s): Returns the most frequent word in the string. If multiple words have the highest frequency, return the lexicographically smallest one. words = s.split() freq_map = {} for word in words: if word in freq_map: freq_map[word] += 1 else: freq_map[word] = 1 max_freq = max(freq_map.values()) most_frequent_words = [word for word in freq_map if freq_map[word] == max_freq] return min(most_frequent_words)"},{"question":"Given a set of integers, determine if there exists a subset whose sum is equal to a given target value. Return true if such a subset exists, otherwise return false. The input consists of an array of integers and an integer representing the target value. # Examples **Example 1:** ``` Input: arr = [1, 2, 3, 4, 5], target = 9 Output: true Explanation: The subset [4, 5] sums to 9. ``` **Example 2:** ``` Input: arr = [1, 2, 5, 6, 8], target = 7 Output: true Explanation: The subset [1, 6] sums to 7. ``` **Example 3:** ``` Input: arr = [1, 2, 3], target = 6 Output: true Explanation: The subset [1, 2, 3] sums to 6. ``` **Example 4:** ``` Input: arr = [2, 4, 6], target = 5 Output: false Explanation: There is no subset that sums to 5. ``` # Constraints - The size of the array will not exceed 20. - Each element in the array will be a positive integer. - The target value will be a positive integer.","solution":"def subset_sum_exists(arr, target): Determines if there is a subset of `arr` that sums to `target`. :param arr: List of integers :param target: Integer target sum :return: True if such a subset exists, otherwise False n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][target]"},{"question":"You are given a list of integers representing the heights of consecutive buildings along a street. The buildings are views from the left where the street starts, such that you can only see a building if it is taller than all the buildings before it. Write a function to determine the number of buildings that are visible when looking from the left. Write a function: ```python def count_visible_buildings(heights: List[int]) -> int: ``` Example 1: Input: heights = [3, 1, 4, 2, 5] Output: 3 Explanation: The buildings that are visible are located at heights 3, 4, and 5. Example 2: Input: heights = [1, 2, 3, 4, 5] Output: 5 Explanation: All buildings are visible as each subsequent building is taller than the previous one. Example 3: Input: heights = [5, 4, 3, 2, 1] Output: 1 Explanation: Only the first building is visible as all the subsequent buildings are shorter. Example 4: Input: heights = [3, 3, 3, 3] Output: 1 Explanation: Only the first building is visible as all buildings are of the same height. Example 5: Input: heights = [1, 3, 2, 4, 3, 5] Output: 4 Explanation: The buildings that are visible are located at heights 1, 3, 4, and 5. Constraints: - 1 <= heights.length <= 10^5 - 1 <= heights[i] <= 10^9","solution":"from typing import List def count_visible_buildings(heights: List[int]) -> int: count = 0 max_height = 0 for height in heights: if height > max_height: count += 1 max_height = height return count"},{"question":"Given an unsorted array of integers, write a function to find the smallest positive integer that is missing from the array. Your function should have a time complexity of O(n) and use constant extra space (O(1) space complexity). Example 1: Input: [3, 4, -1, 1] Output: 2 Explanation: The array contains integers 3, 4 (irrelevant for the smallest positive check), and a missing 2 between 1. Example 2: Input: [1, 2, 0] Output: 3 Explanation: The smallest positive integer 3 is missing from the array [1, 2, 0]. Example 3: Input: [7, 8, 9, 11, 12] Output: 1 Explanation: All positive integers up to the size of the array are missing, starting with 1. Constraints: - The array length is between 1 and 100,000. - The array can include any integer within the 32-bit signed integer range. Function Signature (if applicable): ```python def find_missing_positive(nums: List[int]) -> int: # Your code here ```","solution":"def find_missing_positive(nums): n = len(nums) # Move each positive number to the position of its value (1-based index) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i]-1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # The first position which does not have the correct value will be the missing positive number for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, then the missing number is n+1 return n + 1"},{"question":"You are given an array representing the mineral concentrations of various samples. A mineral concentration is defined as positive if the concentration value is greater than zero, and negative if the value is less than zero. Your task is to find the maximum difference in concentration values such that the higher concentration value is positive and the lower concentration value is negative. Write a function called `max_concentration_difference` that takes in a list of integers `concentrations` representing the mineral concentrations of the samples and returns an integer representing the maximum difference. If there are no positive or no negative concentrations, return -1. Example 1: Input: concentrations = [1, -2, 3, -4, 5] Output: 9 Explanation: The maximum difference is 9 which is between the positive concentration 5 and the negative concentration -4. Example 2: Input: concentrations = [-1, -3, -5, -7] Output: -1 Explanation: There are no positive concentration values. Example 3: Input: concentrations = [2, 4, 6, 8] Output: -1 Explanation: There are no negative concentration values. Example 4: Input: concentrations = [1, -1, 1, -1] Output: 2 Explanation: The maximum difference is 2 which is between the positive concentration 1 and the negative concentration -1. Constraints: * 2 <= concentrations.length <= 10^5 * -10^5 <= concentrations[i] <= 10^5","solution":"def max_concentration_difference(concentrations): Finds the maximum difference between a positive and a negative concentration value. Args: concentrations (list of int): List of mineral concentrations. Returns: int: The maximum difference or -1 if no valid pairs are found. max_positive = float(\'-inf\') min_negative = float(\'inf\') for concentration in concentrations: if concentration > 0: max_positive = max(max_positive, concentration) elif concentration < 0: min_negative = min(min_negative, concentration) if max_positive == float(\'-inf\') or min_negative == float(\'inf\'): return -1 return max_positive - min_negative"},{"question":"Given a list of strings, write a function that groups anagrams together. An anagram is a word or phrase formed by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\". The function should return a list of lists, where each sublist contains words that are anagrams of each other. # Input - An array of strings, where each string consists of lowercase alphabets. # Output - An array of arrays, where each subarray contains all the words that are anagrams of each other. # Example ```python input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` # Note - All inputs will be lowercase. - The order of the output subarrays and the order of words within each subarray does not matter. Good luck!","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams together from a list of words. Args: words (list of str): List of words to be grouped. Returns: List of lists: Grouped anagrams. anagram_map = defaultdict(list) for word in words: # Sort the word to get the anagram key key = \'\'.join(sorted(word)) anagram_map[key].append(word) return list(anagram_map.values())"},{"question":"Task: Implement a Text Editor ![text_editor](https://media.giphy.com/media/WtPiHkn22OEXW/giphy.gif) Imagine you are working on a simple text editor which allows users to type text, delete text, and undo their actions. You need to finish the `TextEditor` class that supports these functionalities: # Class Definition: # Methods: * `type_event(text)`: Takes a string `text` which represents the characters to be typed into the editor. This method appends the `text` to the current content. * `delete_event(count)`: Takes an integer `count`, representing the number of characters to be removed from the end of the current content. If `count` exceeds the content length, all content should be deleted. * `undo_event()`: Reverts the most recent change made by either `type_event` or `delete_event`. The class should keep track of the current content, along with maintaining a history of modifications allowing to undo the latest operation. # Edge Cases: 1. Handling if `delete_event` exceeds the existing content length. 2. Ensuring `undo_event` precisely reverts the last change even if it’s a deletion or typing operation. 3. All methods should work even if called one after another repeatedly without errors. # Example: ```python editor = TextEditor() editor.type_event(\\"Hello\\") assert editor.content == \\"Hello\\" editor.type_event(\\" World\\") assert editor.content == \\"Hello World\\" editor.delete_event(5) assert editor.content == \\"Hello\\" editor.undo_event() assert editor.content == \\"Hello World\\" editor.undo_event() assert editor.content == \\"Hello\\" editor.undo_event() assert editor.content == \\"\\" # All changes have been undone. ``` --- # Your Task: Complete the implementation of the `TextEditor` class so that it meets the requirements specified above.","solution":"class TextEditor: def __init__(self): Initialize the TextEditor with empty content and history. self.content = \\"\\" self.history = [] def type_event(self, text): Appends the given text to the editor content. self.history.append(self.content) self.content += text def delete_event(self, count): Deletes the last `count` characters from the editor content. self.history.append(self.content) self.content = self.content[:-count] if count <= len(self.content) else \\"\\" def undo_event(self): Reverts the editor content back to the state before the last event. if self.history: self.content = self.history.pop()"},{"question":"Given an array of integers A, you need to find the maximum sum of a contiguous subarray. The subarray must contain at least one number. Example 1: Input: [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The contiguous subarray [4,-1,2,1] has the largest sum = 6. Example 2: Input: [1] Output: 1 Explanation: The contiguous subarray [1] has the largest sum = 1. Constraints: 1 <= A.length <= 10^4 -10^5 <= A[i] <= 10^5","solution":"def max_subarray_sum(A): Finds the maximum sum of a contiguous subarray. Parameters: A (list of int): The list of integers. Returns: int: The maximum sum of a contiguous subarray. max_so_far = A[0] current_max = A[0] for i in range(1, len(A)): current_max = max(A[i], current_max + A[i]) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"A bookstore keeps a record of books and their related information in a list, where each book\'s data is a string in the format: `\\"Title by Author in Genre, published: YYYY, pages: nnn\\"`. Sometimes, the store receives customer\'s requests to provide books based on genre or year of publication. The bookstore wants a function to facilitate this task efficiently. # Task The function `book_filter` will take two parameters: 1. `records` - a string containing all books\' information, each separated from the others by a semicolon `;`. 2. `criteria` - a dictionary with keys \\"genre\\" and/or \\"year\\" and their corresponding filtering values. The \\"genre\\" value will be a string representing the genre of books to filter. The \\"year\\" value will be an integer representing the year to filter. The function should return a list of book titles that match **all** specified criteria. If no books match the criteria, return an empty list. Examples ``` records = \\"The Great Gatsby by F. Scott Fitzgerald in Fiction, published: 1925, pages: 218;To Kill a Mockingbird by Harper Lee in Fiction, published: 1960, pages: 281;The Art of Computer Programming by Donald Knuth in Non-fiction, published: 1968, pages: 672\\" criteria1 = {\\"genre\\": \\"Fiction\\", \\"year\\": 1960} book_filter(records, criteria1) --> [\\"To Kill a Mockingbird\\"] criteria2 = {\\"genre\\": \\"Non-fiction\\"} book_filter(records, criteria2) --> [\\"The Art of Computer Programming\\"] criteria3 = {\\"year\\": 1925} book_filter(records, criteria3) --> [\\"The Great Gatsby\\"] criteria4 = {\\"genre\\": \\"Science Fiction\\"} book_filter(records, criteria4) --> [] ``` # Notes: - Each record in the list is guaranteed to be well-formatted. - If a criterion is not specified, it should not be considered in filtering. For instance, if `criteria` is `{\\"genre\\": \\"Fiction\\"}`, the year should not be used for filtering.","solution":"def book_filter(records, criteria): Filters a list of books based on given criteria for genre and/or year of publication. Parameters: - records: A string containing all books\' information separated by a semicolon. - criteria: A dictionary with optional keys \'genre\' (str) and \'year\' (int). Returns: - A list of book titles that match the provided criteria. books = records.split(\';\') filtered_books = [] for book in books: title = book.split(\\" by \\")[0].strip() genre_match = True year_match = True if \'genre\' in criteria: genre = book.split(\\" in \\")[1].split(\\",\\")[0].strip() if genre != criteria[\'genre\']: genre_match = False if \'year\' in criteria: year = int(book.split(\\"published: \\")[1].split(\\",\\")[0].strip()) if year != criteria[\'year\']: year_match = False if genre_match and year_match: filtered_books.append(title) return filtered_books"},{"question":"Given an array of integers nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same and you must do this in O(1) extra space complexity. Example 1: Input: nums = [1,1,2] Output: [1,2] Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: [0,1,2,3,4] Note: Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. It doesn\'t matter what you leave beyond the returned length.","solution":"def remove_duplicates(nums): Removes duplicates from the input array in-place, ensuring each unique element appears only once. The relative order of elements is maintained. :param nums: List[int] - List of sorted integers. :return: int - The length of the modified list with unique elements. if not nums: return 0 write_index = 1 # index to write the next unique value for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Given a binary tree, return the sum of values of its deepest leaves. Example 1: Input: 1 / 2 3 / 4 5 6 / / 7 8 9 Output: 24 Explanation: The deepest leaves are 7, 8, and 9 which have a total sum of 7 + 8 + 9 = 24. Note: - The number of nodes in the tree is between 1 and 10^4. - The value of nodes is between 1 and 100.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root): def dfs(node, depth): if not node: return if depth == len(deepest_levels): deepest_levels.append([node.val]) else: deepest_levels[depth].append(node.val) dfs(node.left, depth + 1) dfs(node.right, depth + 1) deepest_levels = [] dfs(root, 0) return sum(deepest_levels[-1])"},{"question":"Write a function that takes a string of digits and returns the phone number represented by that string. The format should be (XXX) XXX-XXXX. Example: ```python create_phone_number(\\"1234567890\\") #=> \\"(123) 456-7890\\" ``` Notes: - The input string will always contain exactly 10 digits. - The function should raise an error if the input string contains any non-digit characters.","solution":"def create_phone_number(digits): Returns the phone number represented by the string of digits in the format (XXX) XXX-XXXX. if len(digits) != 10: raise ValueError(\\"Input string must contain exactly 10 digits\\") if not digits.isdigit(): raise ValueError(\\"Input string must only contain digits\\") return f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\""},{"question":"Write a function that takes a string as input and returns the same string with all numbers (0-9) removed from it. For example: ``` \\"abc123xyz\\" --> \\"abcxyz\\" \\"num8er5\\" --> \\"numer\\" ```","solution":"def remove_numbers(input_string): Removes all numbers from the input string. Parameters: input_string (str): The string from which to remove numbers. Returns: str: The input string with all numbers removed. return \'\'.join(char for char in input_string if not char.isdigit())"},{"question":"# Task Write a function that takes a list of integers and returns the list of the same integers but with each duplicate occurrence removed, while the elements remain in the original order. Example: ``` Input: [1, 2, 3, 1, 2, 3, 4] Output: [1, 2, 3, 4] Input: [4, 5, 4, 4, 5, 6] Output: [4, 5, 6] ``` Constraints: * The input list will contain integers, and can be empty. * The solution should maintain the original order of elements.","solution":"def remove_duplicates(input_list): Removes duplicate integers from the list while maintaining original order. Args: input_list (list of int): List of integers with possible duplicates. Returns: list of int: List of integers with duplicates removed. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"# Introduction and Warm-up (Highly recommended) # [Playing With Strings Series](https://www.codewars.com/collections/playing-with-strings) ___ Task Given a string, **reverse** only all the **vowels** in the string. Notes * A vowel is any of the characters \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase). * You are required to keep non-vowel characters in their original positions. Input >> Output Examples ``` reverseVowels(\\"hello\\") ==> return (\\"holle\\") ``` **Explanation**: * The vowels in \\"hello\\" are \\"e\\" and \\"o\\". After reversing them, the string becomes \\"holle\\". ``` reverseVowels(\\"leetcode\\") ==> return (\\"leotcede\\") ``` **Explanation**: * The vowels in \\"leetcode\\" are \\"e\\", \\"e\\", \\"o\\", and \\"e\\". After reversing them, the string becomes \\"leotcede\\". ``` reverseVowels(\\"aA\\") ==> return (\\"Aa\\") ``` **Explanation**: * The vowels in the string are \\"a\\" and \\"A\\". After reversing them, the string becomes \\"Aa\\". ___ ALL translations are welcomed Enjoy Learning !!","solution":"def reverseVowels(s): vowels = \\"aeiouAEIOU\\" s = list(s) i, j = 0, len(s) - 1 while i < j: while i < j and s[i] not in vowels: i += 1 while i < j and s[j] not in vowels: j -= 1 if i < j: s[i], s[j] = s[j], s[i] i += 1 j -= 1 return \\"\\".join(s)"},{"question":"Given a list of non-negative integers representing the heights of columns where the width of each column is 1, compute how much water it is able to trap after raining. For instance, given the list of heights `[0,1,0,2,1,0,1,3,2,1,2,1]`, the function should return `6`. Explanation: - The first column and the last column cannot trap any water. - Between the first and second column, no water is trapped as there is no boundary on the right. - Between the second and third column, 1 unit of water is trapped (min(1,2) - 0). - Between the third and fourth column, no water is trapped as the boundary on the right is taller. - Proceed similarly for the rest of the columns. Implement a function `trap(height: List[int]) -> int` that returns the total amount of trapped water. The list of heights will have at least one height and no more than 10000 heights.","solution":"from typing import List def trap(height: List[int]) -> int: n = len(height) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"Implement a function `is_valid_ip(ip)` that takes a string representation of an IPv4 address and returns `True` if it is a valid IPv4 address, else `False`. A valid IPv4 address is in the format \\"x.x.x.x\\", where x is an integer between 0 and 255 (inclusive). There should be no leading zeros in any of the integers unless the integer is 0 itself. The function should return `False` if: - The address contains more than three dots. - Any of the four parts are not numeric representations. - Any numeric part is outside the range 0-255. - Any numeric part has leading zeros (e.g., \\"01\\", \\"001\\"). # Examples: `is_valid_ip(\\"192.168.1.1\\")` returns `True` `is_valid_ip(\\"255.255.255.255\\")` returns `True` `is_valid_ip(\\"256.255.255.255\\")` returns `False` # 256 is outside the valid range `is_valid_ip(\\"192.168.01.1\\")` returns `False` # Leading zero in \\"01\\" `is_valid_ip(\\"192.168.1.1.1\\")` returns `False` # More than three dots `is_valid_ip(\\"192.168.a.b\\")` returns `False` # Non-numeric parts","solution":"def is_valid_ip(ip): Checks if the provided string is a valid IPv4 address. parts = ip.split(\'.\') # There must be exactly four parts if len(parts) != 4: return False for part in parts: # Each part must be numeric if not part.isdigit(): return False # Each part must be in the range 0-255 number = int(part) if number < 0 or number > 255: return False # Each part must not have leading zeros unless it\'s exactly \\"0\\" if len(part) > 1 and part[0] == \'0\': return False return True"},{"question":"```if:python You are given a matrix of size `m x n`, consisting of only non-negative integers. Write a function to determine if there exists a path from the top-left corner to the bottom-right corner of the matrix that strictly increases in value. A path is defined as a sequence of cells starting from the top-left corner and ending at the bottom-right corner, where each cell in the path has a value strictly greater than its predecessor. Movement is allowed in four directions: up, down, left, and right. However, you cannot move diagonally. **Function signature:** ```python def is_increasing_path(matrix: List[List[int]]) -> bool: pass ``` **Input:** - A matrix (`List[List[int]]`) of size `m x n` with non-negative integers. **Output:** - Return `True` if there exists a path that strictly increases from the top-left to the bottom-right of the matrix, `False` otherwise. **Constraints:** - `1 <= m, n <= 100` - Each element of the matrix is a non-negative integer. **Examples:** Example 1: ```python matrix = [ [1, 2, 3], [6, 5, 4], [7, 8, 9] ] print(is_increasing_path(matrix)) # Output: True ``` Example 2: ```python matrix = [ [9, 8, 7], [6, 5, 4], [3, 2, 1] ] print(is_increasing_path(matrix)) # Output: False ``` **Explanation:** In Example 1, one possible increasing path is `1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9`. In Example 2, there is no path that strictly increases to reach the bottom-right corner. **Notes:** - The goal is to test the ability to navigate a matrix while maintaining an increasing sequence. - Efficient traversal and optimization techniques may be necessary to handle larger matrices accurately and within time constraints. ```","solution":"from typing import List def is_increasing_path(matrix: List[List[int]]) -> bool: def dfs(x, y, prev_value, visited): if x < 0 or x >= m or y < 0 or y >= n or (x, y) in visited or matrix[x][y] <= prev_value: return False if x == m-1 and y == n-1: return True visited.add((x, y)) result = (dfs(x + 1, y, matrix[x][y], visited) or dfs(x - 1, y, matrix[x][y], visited) or dfs(x, y + 1, matrix[x][y], visited) or dfs(x, y - 1, matrix[x][y], visited)) visited.remove((x, y)) return result m = len(matrix) n = len(matrix[0]) return dfs(0, 0, -1, set())"},{"question":"In the land of Gridtopia, there are N x M grids, each containing some gold. You start at the top-left corner of the grid (1,1) and aim to reach the bottom-right corner (N,M). You can only move right or down, and you collect gold as you go. Your goal is to maximize the total amount of gold collected. Write a program to determine the maximum amount of gold you can collect. For example, suppose N = 3 and M = 3, and the gold amounts in the grids are: ``` 1 3 1 1 5 1 4 2 1 ``` Starting at the top-left corner, a possible path could be right -> right -> down -> down, collecting 1 + 3 + 1 + 1 + 1 = 7 gold. But the optimal path gives you a gold collection of 1 + 3 + 5 + 2 + 1 = 12 gold. -----Input format----- • Line 1 : Two space-separated integers, N and M, with 1 ≤ N, M ≤ 1000. • Next N lines : Each line contains M space-separated integers, representing the gold amounts in each grid cell. -----Output format----- A single line with a single integer, the maximum amount of gold you can collect. -----Example----- Here is the sample input and output corresponding to the example above. -----Sample input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample output----- 12 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def max_gold_collection(N, M, grid): # Initialize the dp array with the same size as grid dp = [[0]*M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the dp array row-wise for i in range(N): for j in range(M): if i == 0 and j == 0: continue elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will hold the result return dp[N-1][M-1] # Function to read input and output result, useable for interactive execution if __name__ == \\"__main__\\": # Read inputs import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 # Since we\'ve also read N and M for i in range(N): row = list(map(int, data[index:index+M])) grid.append(row) index += M # Get the result and print result = max_gold_collection(N, M, grid) print(result)"},{"question":"Given a list of people with their birth and death years, define a method to find the year with the maximum number of people alive. Your function should be able to correctly handle overlapping lifespans. You need to implement the following methods in the `Population` class: - `addPerson(birthYear: int, deathYear: int)`: Add a person with their birth and death year to the records. - `findMaxAliveYear() -> int`: Find and return the year with the maximum number of people alive. Example: ```python p = Population() p.addPerson(1900, 1950) p.addPerson(1920, 1960) p.addPerson(1940, 1980) print(p.findMaxAliveYear()) # Output: 1940 ``` Explanation: - 1940 is selected because in 1940 we have 3 people alive. - In 1940, Person 1 is alive (1900-1950), Person 2 is alive (1920-1960), and Person 3 is alive (1940-1980). Note: - You may assume that all years are given as positive integers. - Years are inclusive in their ranges, meaning if someone was born in 1900 and died in 1950, they were alive in both years.","solution":"class Population: def __init__(self): self.birth_years = [] self.death_years = [] def addPerson(self, birthYear: int, deathYear: int): self.birth_years.append(birthYear) self.death_years.append(deathYear) def findMaxAliveYear(self) -> int: if not self.birth_years or not self.death_years: return None min_year = min(self.birth_years) max_year = max(self.death_years) # Initialize timeline from the earliest birth to the latest death year years = [0] * (max_year - min_year + 1) # Increment the count of population for each birth year for birth in self.birth_years: years[birth - min_year] += 1 # Decrement the count of population for each death year + 1 for death in self.death_years: if death + 1 <= max_year: years[death + 1 - min_year] -= 1 # Calculate the population count year by year max_population = 0 current_population = 0 max_population_year = min_year for year in range(len(years)): current_population += years[year] if current_population > max_population: max_population = current_population max_population_year = year + min_year return max_population_year"},{"question":"A company is organizing a team-building event where employees participate in various activities to earn points. The organizer wants to maximize the total points earned by dividing the employees into several groups. Each employee has certain skills measured as a positive integer value. When employees form a group, the group earns points based on the sum of their individual skills multiplied by the size of the group. Specifically, if the skills of employees in a group are represented by an array `skills`, the points for that group are calculated as `sum(skills) * len(skills)`. Given an array of positive integers representing the skills of each employee, determine the maximum total points the organizer can achieve by optimally grouping the employees. The employees can be divided into any number of groups, including placing all of them in a single group or having each employee as a separate group. Example 1: Input: skills = [4, 5, 6] Output: 45 Explanation: The best way to group employees is to have all of them in a single group. Points = (4 + 5 + 6) * 3 = 45. Example 2: Input: skills = [1, 2, 3, 4] Output: 40 Explanation: The best way to group employees is to have them in a single group. Points = (1 + 2 + 3 + 4) * 4 = 40. Example 3: Input: skills = [6, 2, 1] Output: 27 Explanation: The best way to group employees is to have all of them in a single group. Points = (6 + 2 + 1) * 3 = 27. Example 4: Input: skills = [10, 20] Output: 60 Explanation: The best way to group employees is to have them in a single group. Points = (10 + 20) * 2 = 60. Constraints: n == skills.length 1 <= n <= 500 1 <= skills[i] <= 10^3","solution":"def max_total_points(skills): Calculate the maximum total points by optimally grouping employees. The maximum points are achieved by having all employees in a single group. Args: skills (list of int): List of positive integers representing the skills of each employee. Returns: int: The maximum points that can be achieved. total_sum = sum(skills) num_employees = len(skills) return total_sum * num_employees"},{"question":"Implement a function that performs run-length encoding of a given string. Run-length encoding is a basic form of data compression where sequences of the same character are stored as a single character followed by the length of that sequence. Write a function: ```python def run_length_encode(input_string: str) -> str ``` The function should: 1. If the input string is `None` or empty, return an empty string. 2. Iterate through the input string and replace sequences of the same character with the character followed by the count of its repetitions. 3. If a character appears only once consecutively, it should be followed by the number `1`. Examples: ```python run_length_encode(\\"aaaabbbccdaa\\") -> \\"a4b3c2d1a2\\" run_length_encode(\\"abc\\") -> \\"a1b1c1\\" run_length_encode(\\"\\") -> \\"\\" run_length_encode(\\"wwwwaaadexxxxxx\\") -> \\"w4a3d1e1x6\\" ``` **Additional Requirements**: - The function should be case-sensitive, treating uppercase and lowercase characters as distinct characters. - The input string will only contain ASCII characters.","solution":"def run_length_encode(input_string: str) -> str: if not input_string: return \\"\\" encoded_string = [] count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: encoded_string.append(f\\"{prev_char}{count}\\") count = 1 prev_char = char encoded_string.append(f\\"{prev_char}{count}\\") return \\"\\".join(encoded_string)"},{"question":"Write a function `can_form_palindrome()` that takes a single argument: a string `s`. Your function should return `True` if it\'s possible to rearrange the characters of the string `s` to form a palindrome, and `False` otherwise. A palindrome is a string that reads the same forwards and backwards, e.g., \\"racecar\\" or \\"madam\\". To solve this problem, consider the properties that characters must have for such an arrangement to be possible. For example, `can_form_palindrome(\'civic\')` should return `True`, while `can_form_palindrome(\'hello\')` should return `False`. As an additional challenge, try to achieve this in O(n) time complexity.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Returns True if string s can be rearranged to form a palindrome, else False. # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(count % 2 for count in char_count.values()) # For the string to be rearranged into a palindrome: # - If the length of the string is even, there should be no characters with an odd count. # - If the length of the string is odd, there should be exactly one character with an odd count. return odd_count <= 1"},{"question":"Maximum Consecutive Sum You are given an array of integers, which can contain both positive and negative numbers. Your task is to find the maximum sum of any consecutive subarray of the given array. A subarray is a contiguous part of an array. A single element is considered a valid subarray. For example, for the array [1, -2, 3, 4, -5, 8], the subarray with the maximum sum is [3, 4, -5, 8], which has a sum of 10. Write a function that takes an array of integers as an input and returns the maximum sum of any consecutive subarray. # Example ``` Input: [1, -3, 2, 1, -1] Output: 3 Explanation: The maximum sum is obtained from the subarray [2, 1]. Input: [-2, -3, 4, -1, -2, 1, 5, -3] Output: 7 Explanation: The maximum sum is obtained from the subarray [4, -1, -2, 1, 5]. ``` # Constraints - The array will contain at least one element. - The length of the array does not exceed 10^6. - The array elements will be within the range of [-10^5, 10^5]. # Notes - Consider using efficient algorithms to keep your solution within acceptable time limits for larger arrays.","solution":"def max_consecutive_sum(arr): Returns the maximum sum of any consecutive subarray of the given array. if not arr: return 0 # Initialize variables max_sum = current_sum = arr[0] # Iterate through the array for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a string containing only the characters \'a\' and \'b\', determine the minimum number of \'a\'s that need to be replaced with \'b\'s (or vice versa) so that no two \'a\'s are adjacent and no two \'b\'s are adjacent in the resulting string. The function should return `undefined`/`None`/`nil`/`NULL` for invalid input types.","solution":"def min_replacements_to_alternate(s): Determines the minimum number of \'a\'s that need to be replaced with \'b\'s (or vice versa) so that no two \'a\'s are adjacent and no two \'b\'s are adjacent in the resulting string. if not isinstance(s, str) or any(c not in \'ab\' for c in s): return None n = len(s) if n < 2: return 0 # Initialize the cost counters change_start_a = 0 # Cost to make the string alternate starting with \'a\' change_start_b = 0 # Cost to make the string alternate starting with \'b\' # Check each character in the string for i in range(n): expected_a = \'a\' if i % 2 == 0 else \'b\' expected_b = \'b\' if i % 2 == 0 else \'a\' if s[i] != expected_a: change_start_a += 1 if s[i] != expected_b: change_start_b += 1 return min(change_start_a, change_start_b)"},{"question":"You are given an array A of N integers. Your task is to find the length of the shortest contiguous subarray such that the sum of its elements is at least S. If there is no such subarray, return -1. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and S. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer — the length of the shortest contiguous subarray with sum at least S, or -1 if no such subarray exists. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 1 le A_i le 10^4 for each valid i - 1 le S le 10^9 -----Example Input----- 2 5 11 1 2 3 4 5 4 15 1 2 3 4 -----Example Output----- 3 -1","solution":"def min_length_subarray(T, test_cases): results = [] for t in range(T): N, S = test_cases[t][0] A = test_cases[t][1] n = len(A) min_len = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += A[end] while current_sum >= S: min_len = min(min_len, end - start + 1) current_sum -= A[start] start += 1 if min_len == n + 1: results.append(-1) else: results.append(min_len) return results"},{"question":"You are given a list of integers where every integer appears an even number of times except for one. Your task is to find and return the integer that appears an odd number of times. *Example* ```python find_odd_occurrence([1, 2, 3, 2, 3, 1, 3]) == 3 ```","solution":"def find_odd_occurrence(arr): Returns the integer that appears an odd number of times in the array. Args: arr (list): List of integers where all integers except one appear an even number of times. Returns: int: The integer that appears an odd number of times. result = 0 for number in arr: result ^= number return result"},{"question":"The Grand Puzzle Society has recruited you to solve a crucial puzzle for them. In this challenge, you are given a sequence of integers. Your task is to determine whether it\'s possible to rearrange the sequence into a non-decreasing order (sorted in ascending order) by reversing exactly one sub-sequence (a contiguous section) of the original sequence. For example: - If the sequence is `[3, 5, 4, 9]`, you can reverse the sub-sequence `[5, 4]` to get `[3, 4, 5, 9]`, which is sorted in non-decreasing order. - If the sequence is `[1, 3, 5, 4, 2, 6]`, you cannot rearrange it into a non-decreasing order by reversing only one sub-sequence. Write a function `can_sort_by_reversing_one_subsequence(sequence: List[int]) -> bool` that returns `True` if it is possible to sort the sequence by reversing one sub-sequence; otherwise, it returns `False`. # Function Signature `def can_sort_by_reversing_one_subsequence(sequence: List[int]) -> bool:` # Input - A list of integers, `sequence` (1 ≤ length of sequence ≤ 10<sup>5</sup>, -10<sup>9</sup> ≤ each integer ≤ 10<sup>9</sup>). # Output - A boolean value: `True` if the sequence can be sorted by reversing exactly one sub-sequence, otherwise `False`. # Examples Input: `[3, 5, 4, 9]` Output: `True` Input: `[1, 3, 5, 4, 2, 6]` Output: `False` # Note It is guaranteed that there will be no duplicates in the sequence. The solution should handle large input sizes efficiently.","solution":"def can_sort_by_reversing_one_subsequence(sequence): Determines if the sequence can be sorted by reversing exactly one sub-sequence. :param sequence: List[int], the input sequence of integers. :return: bool, True if the sequence can be sorted by reversing one sub-sequence, otherwise False. n = len(sequence) # Find the first segment that is not in order start = 0 while start < n - 1 and sequence[start] <= sequence[start + 1]: start += 1 # If the whole array is already sorted if start == n - 1: return True # Find the end of this descending sequence end = start while end < n - 1 and sequence[end] >= sequence[end + 1]: end += 1 # Reverse the found segment reversed_segment = sequence[start:end + 1][::-1] # Check if the modified sequence is sorted possible_sequence = sequence[:start] + reversed_segment + sequence[end + 1:] for i in range(1, n): if possible_sequence[i - 1] > possible_sequence[i]: return False return True"},{"question":"Write a function minUniqueSum that takes an array of integers and returns the minimum possible sum of the elements of the array such that all elements are unique. You can increment elements in the array to make them unique, but you cannot decrement them. E.g 1: For the array [1, 2, 2], the result should be 6 because you can increment the second \'2\' to \'3\' making the array [1, 2, 3] and the sum 1 + 2 + 3 = 6. E.g 2: For the array [3, 2, 1, 2, 1, 7], the result should be 17 because you can increment the duplicate \'2\' to \'4\', duplicate \'1\' to \'5\', then \'6\' to get [3, 2, 1, 4, 5, 7] and the sum 3 + 2 + 1 + 4 + 5 + 7 = 22.","solution":"def minUniqueSum(arr): Returns the minimum possible sum of the elements of the array such that all elements are unique. You can increment elements in the array to make them unique. if not arr: return 0 arr.sort() result_sum = arr[0] for i in range(1, len(arr)): if arr[i] <= arr[i-1]: arr[i] = arr[i-1] + 1 result_sum += arr[i] return result_sum"},{"question":"You are given an integer array `nums` and a target `target`. You need to find all pairs of distinct elements in the array that add up to the target. Note that each pair should be listed only once, and the pairs should be returned in ascending order (smallest pair first). If multiple pairs have the same sum, return them in the order they appear in the array. Your task is to write a function that finds these pairs and returns them. You will implement the function `find_pairs(nums, target)` which takes an array of integers `nums` and an integer `target`, and returns a list of tuples representing the pairs. Additionally, the function should be efficient enough to handle large inputs. -----Input----- - The first line of the input consists of an integer `n` (1 le n le 10^5) — the number of elements in the array `nums`. - The second line contains n space-separated integers, `nums[i]` (-10^9 le nums[i] le 10^9) — the elements of the array. - The third line contains a single integer `target (-10^9 le target le 10^9) — the target sum for the pairs. -----Output----- Output the list of pairs of integers whose sum is equal to `target`. -----Example----- **Input** 6 1 2 3 4 5 6 7 **Output** [(1, 6), (2, 5), (3, 4)] **Explanation** - 1 + 6 = 7 - 2 + 5 = 7 - 3 + 4 = 7 These are all the pairs with distinct elements in the array that add up to the target sum of 7.","solution":"def find_pairs(nums, target): Finds all pairs of distinct elements in the array that add up to the target. Each pair should be listed only once and in ascending order. Parameters: nums (list of int): The array of integers. target (int): The target sum. Returns: list of tuples: The list of pairs (tuples) that add up to the target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"Dr. Watson has a string, S, of length N, composed of lowercase English alphabets. He wants to know if it is possible to rearrange the string such that no two adjacent characters are the same. -----Input----- The first line contains a single integer, T. T test cases follow where each test case contains two lines: - The first line of a test case contains a single integer, N. - The second line of the test case contains a string, S, of length N. -----Output----- For each test case, output \\"Yes\\" if it is possible to rearrange the string such that no two adjacent characters are the same. Otherwise, output \\"No\\". Note that the quotes are for clarity. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - S consists of only lowercase English letters. -----Sample Input----- 3 3 aab 3 aaab 4 aabb -----Sample Output----- Yes No Yes -----Explanation:----- In sample test case 1, the string \\"aab\\" can be rearranged to \\"aba\\" such that no two adjacent characters are the same. Therefore, the output is \\"Yes\\". In sample test case 2, the string \\"aaab\\" cannot be rearranged to meet the required condition since there are three \'a\'s and one \'b\'. Therefore, the output is \\"No\\". In sample test case 3, the string \\"aabb\\" can be rearranged to \\"abab\\" such that no two adjacent characters are the same. Therefore, the output is \\"Yes\\".","solution":"def can_rearrange_no_adjacent(s): Determines if the string can be rearranged such that no two adjacent characters are the same. from collections import Counter n = len(s) freq = Counter(s) max_freq = max(freq.values()) # If the max frequency character count is more than (n + 1) // 2, we cannot rearrange it if max_freq > (n + 1) // 2: return \\"No\\" else: return \\"Yes\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] results.append(can_rearrange_no_adjacent(s)) return results"},{"question":"File Handling is a critical skill in many programming tasks, especially when dealing with data processing. # Task Your task is to implement a function that takes a file path as input and returns an object containing properties `word_count` and `line_count`. The `word_count` property should contain the total number of words in the file, and the `line_count` property should contain the total number of lines in the file. Handle invalid input and file reading errors gracefully by returning an object with `word_count` and `line_count` both set to 0. # Input The input is a string representing the file path. You must then read the file content and calculate the total word count and line count. If the input is not a string or if there is any error in reading the file (e.g., the file does not exist), you must return an object with `word_count` and `line_count` total of 0. Refer to the Example section for a more visual representation of the inputs and the expected outputs. Example: ```python Input: get_file_stats(\'sample.txt\') Output: {word_count: 100, line_count: 10} Input: get_file_stats(\'nonexistent.txt\') Output: {word_count: 0, line_count: 0} Input: get_file_stats(12345) Output: {word_count: 0, line_count: 0} ```","solution":"def get_file_stats(file_path): Returns an object with word_count and line_count based on the content of the file at file_path. :param file_path: The path to the file :return: A dictionary with \'word_count\' and \'line_count\' as keys if not isinstance(file_path, str): return {\'word_count\': 0, \'line_count\': 0} try: with open(file_path, \'r\') as file: content = file.readlines() line_count = len(content) word_count = sum(len(line.split()) for line in content) return {\'word_count\': word_count, \'line_count\': line_count} except (FileNotFoundError, IOError): return {\'word_count\': 0, \'line_count\': 0}"},{"question":"Create a function that takes a list of integers and returns a new list containing the middle element if the length of the list is odd, or the average of the two middle elements if the length is even. The average should be an integer, rounded down if necessary. Example: middle_or_average([1, 2, 3, 4, 5]) // returns: [3] middle_or_average([1, 2, 3, 4]) // returns: [2] middle_or_average([10, 20, 30, 40, 50, 60]) // returns: [35]","solution":"def middle_or_average(lst): Returns a list containing the middle element if the length of the list is odd, or the average of the two middle elements if the length is even. n = len(lst) if n % 2 == 1: return [lst[n // 2]] else: middle1, middle2 = lst[n // 2 - 1], lst[n // 2] return [(middle1 + middle2) // 2]"},{"question":"=====Function Descriptions===== groupby(iterable, key=None) This function makes an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified or is None, key defaults to an identity function and returns the element unchanged. Sample Code >>> from itertools import groupby >>> data = [(\\"animal\\", \\"dog\\"), (\\"animal\\", \\"cat\\"), (\\"plant\\", \\"tree\\"), (\\"plant\\", \\"flower\\")] >>> for k, g in groupby(data, lambda x: x[0]): ... print(k, list(g)) ... animal [(\'animal\', \'dog\'), (\'animal\', \'cat\')] plant [(\'plant\', \'tree\'), (\'plant\', \'flower\')] =====Problem Statement===== A retail store manager wants to analyze the sales data to understand trends over a week. Each sales record includes the day of the week and the sales amount. Your task is to group the sales records by day and calculate the total sales for each day. The format for the sales records is: Day of Week -> Mon Tue Wed Thu Fri Sat Sun Sales | 200 150 300 100 250 400 500 The output should show the total sales for each day of the week. =====Input Format===== The first line contains N, the number of sales records. The next N lines contain the day of the week (a string) and the sales amount (an integer) separated by a space. =====Constraints===== 0<N≤100 Day of the week is one of {Mon, Tue, Wed, Thu, Fri, Sat, Sun}. 0≤sales amount≤1000 =====Output Format===== Print the total sales for each day of the week, each on a new line in the format \\"Day: Total\\". Example Input 8 Mon 200 Tue 150 Wed 300 Thu 100 Fri 250 Sat 400 Sun 500 Mon 100 Example Output Mon: 300 Tue: 150 Wed: 300 Thu: 100 Fri: 250 Sat: 400 Sun: 500","solution":"from itertools import groupby def group_sales_by_day(sales_records): Groups sales records by day and calculates total sales for each day. Args: sales_records (list of tuples): List of tuples where each tuple contains a day of the week (str) and sales amount (int). Returns: dict: A dictionary with days of the week as keys and total sales as values. sales_records_sorted = sorted(sales_records, key=lambda x: x[0]) grouped_sales = {} for day, records in groupby(sales_records_sorted, key=lambda x: x[0]): total_sales = sum(record[1] for record in records) grouped_sales[day] = total_sales return grouped_sales # Helper function to format the output as required def formatted_sales_output(sales_dict): output_lines = [f\\"{day}: {sales}\\" for day, sales in sales_dict.items()] return \\"n\\".join(output_lines)"},{"question":"=====Problem Statement===== You are given an integer `n`. Your task is to write a Python function that calculates the sum of all odd numbers from 1 to `n` (inclusive). For example, if `n = 7`, the sum of all odd numbers from 1 to 7 is `1 + 3 + 5 + 7 = 16`. =====Function Signature===== ```python def sum_of_odds(n: int) -> int: ``` =====Input Format===== - An integer `n`, where 1 ≤ n ≤ 10^4. =====Output Format===== - Return the sum of all odd numbers from 1 to `n` (inclusive). =====Sample Input 0===== ``` 7 ``` =====Sample Output 0===== ``` 16 ``` =====Sample Input 1===== ``` 10 ``` =====Sample Output 1===== ``` 25 ``` =====Explanation===== In Sample Input 0, the odd numbers from 1 to 7 are 1, 3, 5, and 7. Their sum is `1 + 3 + 5 + 7 = 16`. In Sample Input 1, the odd numbers from 1 to 10 are 1, 3, 5, 7, and 9. Their sum is `1 + 3 + 5 + 7 + 9 = 25`. =====Note===== Your function should handle the edge case where `n` is 1, resulting in a sum of 1.","solution":"def sum_of_odds(n: int) -> int: Returns the sum of all odd numbers from 1 to n (inclusive). return sum(i for i in range(1, n + 1) if i % 2 != 0)"},{"question":"# Task You are given a list of integers representing the heights of students in a queue. All the students are standing in non-decreasing order of their heights, except for one student who is mistakenly placed in the wrong position. Your task is to help identify the misplaced student and determine the minimum number of swaps required to bring the queue in non-decreasing order. Write a function that returns the number of swaps necessary. # Example For `heights = [1, 2, 4, 3, 5]`, the result should be `1`. ``` heights --> 1 2 4 3 5 swap 4 and 3 --> 1 2 3 4 5 1 swap needed to sort the list. ``` # Input/Output - `[input]` integer array `heights` An array of integers representing the heights of students in a queue. `3 <= heights.length <= 1000` - `[output]` an integer The minimum number of swaps required to sort the array.","solution":"def find_minimum_swaps(heights): Returns the minimum number of swaps to sort the list in non-decreasing order misplaced_index = -1 n = len(heights) # Identify the misplaced element for i in range(n - 1): if heights[i] > heights[i + 1]: misplaced_index = i break if misplaced_index == -1: # If no misplaced element found, array is already sorted return 0 # Check the misplaced element with the following elements to find the correct position for j in range(misplaced_index + 1, n): if heights[j] > heights[misplaced_index]: # Swap the misplaced element with its correct position heights[misplaced_index], heights[j - 1] = heights[j - 1], heights[misplaced_index] break else: # If no later element is found greater than the misplaced element, # swap with the last element heights[misplaced_index], heights[-1] = heights[-1], heights[misplaced_index] return 1 # Since only one swap suffices"},{"question":"Description In a distant kingdom, there is a magical garden guarded by a mystical creature. This garden has **n** magical flowers arranged in a single line. The mystical creature has the power to cast a spell that can reverse any contiguous segment of flowers in the garden. Princess Olivia wants to see the flowers in a specific desired order. She can make a request to the mystical creature to cast the spell up to **k** times. However, Princess Olivia is clever and she wants to achieve her goal with the minimum number of spells. Write a function that returns the minimum number of spells required to transform the current arrangement into the desired arrangement. If it is not possible within **k** spells, return -1. Task You are given: **n** - The total number of magical flowers. **flowers** - An array of integers representing the current arrangement of the flowers. **desired** - An array of integers representing the desired arrangement of the flowers. **k** - The maximum number of spells the mystical creature can cast. Return the minimum number of spells required to transform the current arrangement into the desired arrangement, or -1 if it is not possible within **k** spells. **You can assume that all elements in flowers and desired are distinct and range from 1 to n, inclusive.** # Example Input: `n = 5, flowers = [3, 4, 1, 2, 5], desired = [1, 2, 3, 4, 5], k = 2` Output: `2`","solution":"def min_spells_required(n, flowers, desired, k): Returns the minimum number of spells required to transform the current arrangement into the desired arrangement. If it is not possible within k spells, return -1. # Index maps of flowers and desired arrangements index_map_current = {flower: i for i, flower in enumerate(flowers)} index_map_desired = {flower: i for i, flower in enumerate(desired)} visited = set() swaps = 0 for i in range(n): if flowers[i] == desired[i] or i in visited: continue # Start a new cycle swaps += 1 current_index = i while current_index not in visited: visited.add(current_index) desired_flower = desired[current_index] current_index = index_map_current[desired_flower] if swaps <= k: return swaps else: return -1"},{"question":"# Conway\'s Game of Life Conway\'s Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, alive or dead. Every cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The initial pattern constitutes the seed of the system. The first generation is created by applying the above rules simultaneously to every cell in the seed—births and deaths occur simultaneously, and the discrete moment at which this happens is called a tick. # Task Your task is to create a function called `game_of_life()` that takes a two-dimensional list of integers `grid` representing the state of the grid at a particular tick. Each element of the list can be either 1 (alive) or 0 (dead). The function should return the next generation grid after one tick. # Example ```python def game_of_life(grid): # Your code here initial_grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]] print(game_of_life(initial_grid)) ``` The function should return: ```python [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]] ``` # Notes - The input grid is a list of lists, where each inner list represents a row in the grid. - The outer list length represents the number of rows in the grid. - The inner list length represents the number of columns in the grid. - Cells outside the grid are always considered dead. - The grid size can vary in both dimensions, but it will not be empty.","solution":"def game_of_life(grid): rows, cols = len(grid), len(grid[0]) def count_live_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: live_neighbors += grid[nr][nc] return live_neighbors next_gen = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(r, c) if grid[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: next_gen[r][c] = 0 else: next_gen[r][c] = 1 else: if live_neighbors == 3: next_gen[r][c] = 1 return next_gen"},{"question":"# Introduction A company has assigned you the task of improving their daily operations by automating the report generation process. Currently, they have a system that stores employee timesheet entries, and they need an end-of-day report summarizing each employee\'s total hours worked. Each employee\'s timesheet entry consists of a list of intervals throughout the day when they were working. However, these intervals might overlap, and thus need to be merged to calculate the total time effectively. # Task You need to write a function `calculate_total_hours(entries)` that takes as input a dictionary where keys are employee names (strings) and values are lists of tuples. Each tuple contains two integers representing the start and end times (in hours, using a 24-hour clock) of an interval when the employee was working. The function should return a dictionary where each key is an employee’s name and the corresponding value is the total number of hours worked by that employee. # Example ``` entries = { \\"Alice\\": [(9, 12), (14, 17), (11, 13)], \\"Bob\\": [(10, 13), (13, 16)], \\"Charlie\\": [(9, 10), (12, 14)] } calculate_total_hours(entries) ``` Output: ``` { \\"Alice\\": 5, \\"Bob\\": 6, \\"Charlie\\": 3, } ``` # Notes - Employee intervals are inclusive of start time but exclusive of end time. For example, an interval `(9, 12)` means the employee worked from 9:00 to 11:59. - It is not guaranteed that the intervals for each employee are sorted. - Overlapping intervals should be merged before calculating the total hours worked. For example, intervals `(9, 12)` and `(11, 13)` should be considered as one continuous interval from 9 to 13, covering 4 hours.","solution":"def merge_intervals(intervals): Merge overlapping intervals and return a list of merged intervals. Intervals is a list of tuples (start, end). if not intervals: return [] # Sort intervals by start time intervals.sort() merged = [intervals[0]] for current in intervals[1:]: # If the current interval overlaps with the previous one, merge them last = merged[-1] if current[0] <= last[1]: # Overlap condition merged[-1] = (last[0], max(last[1], current[1])) else: merged.append(current) return merged def calculate_total_hours(entries): Calculate the total working hours for each employee. Entries is a dictionary with employee names as keys and list of working intervals as values. Return a dictionary with employee names as keys and total working hours as values. total_hours = {} for employee, intervals in entries.items(): # Merge overlapping intervals merged_intervals = merge_intervals(intervals) # Calculate total hours from merged intervals total_worked_hours = sum(end - start for start, end in merged_intervals) total_hours[employee] = total_worked_hours return total_hours"},{"question":"Machine Learning Corporation (MLC) wants to validate the login attempts in their system. Each attempt consists of three inputs: a username, a password, and a code. MLC wants to ensure that the login credentials and code meet specific security criteria. A username must: 1. Be between 5 and 15 characters long, inclusive. 2. Only contain lowercase letters and numbers. 3. Not start with a number. A password must: 1. Be between 8 and 20 characters long, inclusive. 2. Contain at least one uppercase letter. 3. Contain at least one lowercase letter. 4. Contain at least one number. 5. Contain at least one special character from the set {!@#%^&*()}. A code must: 1. Be exactly 6 characters long. 2. Only contain numbers or uppercase letters. Write a function that validates N login attempts. For each attempt, output \\"VALID\\" if all three inputs meet the criteria; otherwise, output \\"INVALID\\". -----Input----- The first line of the input contains an integer N denoting the number of login attempts. The next N lines each contain three space-separated strings: username, password, and code. -----Output----- For each login attempt, output a single line containing \\"VALID\\" or \\"INVALID\\". -----Constraints----- - 1 ≤ N ≤ 1000 - length of username, password, code as per the given criteria. -----Example----- Input: 3 alice123 Super@Pass123 G4THJK bob 12345678 Ab12CD eve123 Eve1234@ 1A2B3C Output: VALID INVALID VALID -----Explanation----- Example Case 1. For the first login attempt, \\"alice123\\" is valid as per the username criteria, \\"Super@Pass123\\" is valid as per the password criteria, and \\"G4THJK\\" is valid as per the code criteria, so the output is \\"VALID\\". For the second login attempt, \\"bob\\" is invalid as it does not meet the username criteria (too short), hence the output is \\"INVALID\\". For the third login attempt, all inputs are valid as per their respective criteria, so the output is \\"VALID\\".","solution":"import re def validate_login_attempts(n, attempts): def validate_username(username): return len(username) >= 5 and len(username) <= 15 and username.isalnum() and not username[0].isdigit() def validate_password(password): if len(password) < 8 or len(password) > 20: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()]\', password): return False return True def validate_code(code): return len(code) == 6 and code.isalnum() and code.isupper() results = [] for attempt in attempts: username, password, code = attempt if validate_username(username) and validate_password(password) and validate_code(code): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"You are implementing a system to manage a train schedule, where trains can be scheduled to arrive and depart at a station. Your task is to implement the TrainSchedule class: The class should have: - A method to schedule a train\'s arrival, scheduleArrival(int trainId, int time). - A method to schedule a train\'s departure, scheduleDeparture(int trainId, int time). - A method to cancel a train\'s schedule, cancelSchedule(int trainId). - A method to get a list of trains that are currently scheduled to be at the station, getCurrentTrains(int currentTime). The TrainSchedule class should manage the schedule such that: - If a train is scheduled for arrival or departure, it is added to the schedule. - If a train\'s schedule is canceled, it should no longer appear in the current schedule. - The method getCurrentTrains should return a list of train IDs that are at the station at the provided time, sorted by their arrival time. ```python class TrainSchedule: def __init__(self): self.schedule = {} def scheduleArrival(self, trainId, time): self.schedule[trainId] = (time, \'arrival\') def scheduleDeparture(self, trainId, time): self.schedule[trainId] = (time, \'departure\') def cancelSchedule(self, trainId): if trainId in self.schedule: del self.schedule[trainId] def getCurrentTrains(self, currentTime): trains = [train for train, (time, event) in self.schedule.items() if event == \'arrival\' and time <= currentTime and (train not in self.schedule or (self.schedule[train][0] > currentTime and self.schedule[train][1] == \'departure\'))] trains.sort(key=lambda train: self.schedule[train][0]) return trains ``` # Example: ```python # Initialize train schedule trainSchedule = TrainSchedule() # Schedule arrivals and departures trainSchedule.scheduleArrival(1, 10) trainSchedule.scheduleArrival(2, 15) trainSchedule.scheduleDeparture(1, 20) trainSchedule.scheduleDeparture(2, 25) # Cancel a schedule trainSchedule.cancelSchedule(2) # Get current trains at different times print(trainSchedule.getCurrentTrains(12)) # Output: [1] print(trainSchedule.getCurrentTrains(18)) # Output: [1] print(trainSchedule.getCurrentTrains(22)) # Output: [] ``` # Constraints: - trainId is a unique positive integer. - time is a positive integer. - There will be at most 10000 calls to any method.","solution":"class TrainSchedule: def __init__(self): self.arrivals = {} self.departures = {} def scheduleArrival(self, trainId, time): self.arrivals[trainId] = time def scheduleDeparture(self, trainId, time): self.departures[trainId] = time def cancelSchedule(self, trainId): if trainId in self.arrivals: del self.arrivals[trainId] if trainId in self.departures: del self.departures[trainId] def getCurrentTrains(self, currentTime): current_trains = [train for train in self.arrivals if self.arrivals[train] <= currentTime and (train not in self.departures or self.departures[train] > currentTime)] current_trains.sort(key=lambda train: self.arrivals[train]) return current_trains"},{"question":"Implement a function that determines whether a string follows a specified pattern. The pattern is given as a string of lowercase characters, and the string to be checked is composed of words separated by spaces. The relationship between the pattern and the string is defined as follows: - Each unique character in the pattern corresponds to a unique word in the string. - The order of the characters in the pattern matches the order of the words in the string. Your function should return `True` if the string follows the pattern and `False` otherwise. **Function Signature:** ```python def follows_pattern(pattern: str, s: str) -> bool ``` **Examples:** 1. `follows_pattern(\\"abba\\", \\"dog cat cat dog\\")` should return `True` 2. `follows_pattern(\\"abba\\", \\"dog cat cat fish\\")` should return `False` 3. `follows_pattern(\\"aaaa\\", \\"dog dog dog dog\\")` should return `True` 4. `follows_pattern(\\"abba\\", \\"dog dog dog dog\\")` should return `False` **Note:** - You may assume `pattern` contains only lowercase alphabetic characters and `s` contains lowercase words separated by single spaces. - The input strings `pattern` and `s` will always be non-empty and their lengths will be such that the relationship between the pattern and the string can be reasonably checked.","solution":"def follows_pattern(pattern: str, s: str) -> bool: words = s.split() if len(pattern) != len(words): return False char_to_word = {} word_to_char = {} for char, word in zip(pattern, words): if char in char_to_word: if char_to_word[char] != word: return False else: char_to_word[char] = word if word in word_to_char: if word_to_char[word] != char: return False else: word_to_char[word] = char return True"},{"question":"Given a list of integers nums, and an integer k, your task is to rearrange the elements in the list such that every adjacent pair of elements has an absolute difference less than or equal to k. If it is possible to rearrange the list in such a way, return the modified list. If it is not possible, return an empty list. Example 1: Input: nums = [3, 1, 4, 2], k = 2 Output: [1, 3, 2, 4] Explanation: The absolute differences between adjacent elements are |1-3|=2, |3-2|=1, and |2-4|=2, all of which are less than or equal to 2. Example 2: Input: nums = [1, 5, 9], k = 3 Output: [] Explanation: It is not possible to rearrange the list such that all adjacent pair differences are less than or equal to 3. Example 3: Input: nums = [10, 20, 30, 40], k = 15 Output: [10, 20, 30, 40] Explanation: The absolute differences between adjacent elements are |10-20|=10, |20-30|=10, and |30-40|=10, all of which are less than or equal to 15. Constraints: - 1 <= nums.length <= 1000 - -10^4 <= nums[i] <= 10^4 - 1 <= k <= 10^4","solution":"def rearrange_list(nums, k): nums.sort() n = len(nums) for i in range(1, n): if abs(nums[i] - nums[i-1]) > k: return [] return nums"},{"question":"Write a function that takes a list of positive integers and returns the sum of the product of each pair of integers in the list. A pair (i, j), where i != j, refers to the pair of distinct indices in the list. The result should be the sum of each product. For example, given the list [1, 2, 3, 4], the pairs would be: - (1, 2) - (1, 3) - (1, 4) - (2, 3) - (2, 4) - (3, 4) The sum of the product of these pairs is: - 1 * 2 + 1 * 3 + 1 * 4 + 2 * 3 + 2 * 4 + 3 * 4 Your function should return the result as an integer. ``` Example: For the input list [1, 2, 3, 4], the function should return 35. ```","solution":"def sum_of_products(lst): Returns the sum of the product of each pair of integers in the list. total_sum = 0 n = len(lst) for i in range(n): for j in range(i + 1, n): total_sum += lst[i] * lst[j] return total_sum"},{"question":"A farmer has a large field and he needs to plant crops in sections of the field in a rectangular grid pattern. Each section of the field can either be \\"planted\\" or \\"unplanted\\". The farmer wants to know the maximum size of any contiguous section (a block of connected sections where each section shares a side with at least one other section in the block) of planted crops. You are given a 2D grid of integers where each integer is either 0 (representing unplanted) or 1 (representing planted). Write a function that takes a 2D list (the grid) as input and returns an integer representing the size of the largest contiguous block of planted sections. # Function Signature ```python def largest_contiguous_planted_block(grid: List[List[int]]) -> int: pass ``` # Input - `grid` (2D list of integers): A 2D binary grid of integers representing the field layout where 1 represents a planted section and 0 represents an unplanted section. # Output - An integer value representing the size of the largest contiguous block of planted sections. # Constraints - The grid will have at least 1 row and 1 column. - Each dimension of the grid will not exceed 50. # Example ```python grid = [ [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [1, 0, 0, 1] ] largest_contiguous_planted_block(grid) # Returns: 5 ``` # Explanation In the example above, the largest contiguous block of planted sections comprises positions (0,0), (0,1), (1,1), (1,2), (2,2), making its size 5.","solution":"from typing import List, Tuple def largest_contiguous_planted_block(grid: List[List[int]]) -> int: def dfs(x: int, y: int) -> int: if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark the cell as visited size = 1 # explore all 4 directions (up, down, left, right) size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"In a matrix game, two players take turns placing either a \'+\' or a \'-\' on any empty cell in an n x n grid. The game ends when the grid is fully populated. The value of the game is calculated as the sum of the values in each row and each column interpreted as a binary number where \'+\' is treated as 1 and \'-\' as 0. For example, consider a 3x3 grid with the following placements: + - + - + - + + - The value of the first row (from left to right) is 101 in binary, which is 5 in decimal. The value of the second row is 010 in binary, which is 2 in decimal. The value of the third row is 110 in binary, which is 6 in decimal. Similarly, for the columns from top to bottom, the values are calculated. The first column is 101 in binary and 5 in decimal, the second column is 011 in binary and 3 in decimal, and the third column is 101 in binary and 5 in decimal. Given an initially empty grid of size n x n, determine the maximum possible value the game can achieve if both players play optimally. -----Input----- The first line contains an integer t (1 ≤ t ≤ 100) indicating the number of test cases. For each test case: - A single integer n (1 ≤ n ≤ 10) denotes the size of the square grid. -----Output----- For each test case, output a single line with the maximum possible value of the game. -----Example----- Input: 2 2 3 Output: 10 30 Explanation: For n = 2: The optimal placement could be: + + + + Which gives the maximum possible value of: Row wise: 11 (3 in decimal) + 11 (3 in decimal) = 6 Column wise: 11 (3 in decimal) + 11 (3 in decimal) = 6 Total Value = 6 + 6 = 12 For n = 3: The optimal placement could be: + + + + - + + + + Which gives the maximum possible value of: Row wise: 111 (7 in decimal) + 101 (5 in decimal) + 111 (7 in decimal) = 19 Column wise: 111 (7 in decimal) + 101 (5 in decimal) + 111 (7 in decimal) = 19 Total Value = 19 + 19 = 38","solution":"def max_game_value(n): Given the size of the grid `n`, calculate the maximum possible value of the game. # The maximum value is achieved by filling the entire grid with \'+\' # Each row and column will then have value 2^n - 1 in binary which is (2^n - 1) in decimal. # There are n rows and n columns, so the total value is n * (2^n - 1) * 2 max_value = n * ((1 << n) - 1) * 2 return max_value def solve_game_value(test_cases): Processes multiple test cases to determine the maximum possible value for each grid size given in test cases. results = [] for n in test_cases: results.append(max_game_value(n)) return results # Mock the input process as described def process_input_input(): test_cases = [] t = int(input().strip()) for _ in range(t): n = int(input().strip()) test_cases.append(n) return test_cases def output_solution(results): for result in results: print(result)"},{"question":"Write a function that takes a list of integers and returns a list of the unique integers from the input list, but sorted in the same relative order as they first appeared. Example: ```python unique_integers([5, 7, 5, 2, 7, 2, 3, 5]) => [5, 7, 2, 3] ``` If the input list is empty, the function should return an empty list. ```python unique_integers([]) => [] ``` If the input list only contains one element, the function should return a list containing that element. ```python unique_integers([4]) => [4] ```","solution":"def unique_integers(nums): Returns a list of the unique integers from the input list, sorted in the same relative order as they first appeared. seen = set() unique_nums = [] for num in nums: if num not in seen: seen.add(num) unique_nums.append(num) return unique_nums"},{"question":"Calculate the minimum number of coins needed to make a given amount of change from a given set of coin denominations. -----Input:----- - A single integer M — the amount to make change for. - An integer K — the number of different coin denominations. - K integers — the different coin denominations. -----Output:----- Minimum number of coins needed to make the change. -----Constraints----- - 1 leq M leq 10^5 - 1 leq K leq 100 - Each denomination will be a distinct positive integer, not exceeding M. -----Sample Input:----- 11 4 1 2 5 10 -----Sample Output:----- 2","solution":"def minimum_coins(M, denominations): Calculate minimum number of coins needed to make a given amount of change from a given set of coin denominations. Parameters: - M: the amount to make change for - denominations: list of the different coin denominations Returns: The minimum number of coins needed to make the change. denominations = sorted(denominations, reverse=True) count = 0 for coin in denominations: if M == 0: break count += M // coin M %= coin return count"},{"question":"Write a function that takes an integer array and returns a new array where each element is the product of all the elements in the original array except the one at the current position. For instance, with an input array `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` since `24 = 2*3*4`, `12 = 1*3*4`, `8 = 1*2*4`, and `6 = 1*2*3`. Your solution should not use division and should have a linear time complexity. # Example `[1, 2, 3, 4]` -> `[24, 12, 8, 6]` `[2, 3, 4, 5]` -> `[60, 40, 30, 24]` Hint Think about how you might use two passes through the array, where the first pass calculates the product of all elements before the current position and the second pass calculates the product of all elements after the current position.","solution":"def product_except_self(nums): Returns a new array where each element is the product of all the elements in the original array except the one at the current position. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"# Statement: Write a function to determine the common elements of two sequences of integers and return them as a sorted list in ascending order. You need to write a function `common_elements(sequence1, sequence2)` which takes two lists of integers as input and returns a list of integers. **Input:** - `sequence1`: a list of integers. - `sequence2`: a list of integers. **Output:** - Return a sorted list of integers that are present in both `sequence1` and `sequence2`. - If there are no common elements, return an empty list. **Constraints:** - Both lists will have at least one element and will only contain integers. # Examples: Example 1: ``` common_elements([5, 1, 3, 4, 7], [3, 4, 1, 9]) - Should return [1, 3, 4] ``` Example 2: ``` common_elements([1, 2, 2, 1], [2, 2]) - Should return [2] ``` Example 3: ``` common_elements([4, 9, 5], [9, 4, 9, 8, 4]) - Should return [4, 9] ``` Example 4: ``` common_elements([1, 2, 3], [4, 5, 6]) - Should return [] ``` # Note: - The returned list should be sorted in ascending order and must contain unique elements. - Use the built-in functions and data structures to make your implementation efficient.","solution":"def common_elements(sequence1, sequence2): Return a sorted list of integers that are present in both sequence1 and sequence2. # Convert lists to sets to find the intersection set1 = set(sequence1) set2 = set(sequence2) # Find the intersection of the sets common_set = set1 & set2 # Convert the set to a sorted list and return return sorted(list(common_set))"},{"question":"Description: Write a function that takes an array of integers and an integer `target`. Your task is to find two distinct integers in the array that add up to the target. Return their indices as a tuple `(index1, index2)` where `index1` is less than `index2`. **Constraints:** - Each input would have exactly one distinct solution, and you may not use the same element twice. - You can assume the input array has at least two elements. - The indices should be 0-based. Examples: # Example 1: **Input:** ```python nums = [2, 7, 11, 15] target = 9 ``` **Output:** ```python (0, 1) ``` **Explanation:** `nums[0] + nums[1] == 2 + 7 == 9` # Example 2: **Input:** ```python nums = [3, 2, 4] target = 6 ``` **Output:** ```python (1, 2) ``` **Explanation:** `nums[1] + nums[2] == 2 + 4 == 6` # Example 3: **Input:** ```python nums = [3, 3] target = 6 ``` **Output:** ```python (0, 1) ``` **Explanation:** `nums[0] + nums[1] == 3 + 3 == 6`","solution":"def two_sum(nums, target): Takes an array of integers and a target integer. Finds two distinct integers in the array that add up to the target and returns their indices as a tuple. Args: nums: List of integers target: Integer target sum Returns: Tuple of two integers representing the indices of the two numbers. indices_dict = {} for index, num in enumerate(nums): difference = target - num if difference in indices_dict: return (indices_dict[difference], index) indices_dict[num] = index"},{"question":"The problem of La Zima Corporation: La Zima Corporation is organizing a grand coding hackathon. The event coordinator wants to ensure that there are enough rooms for all the coding teams participating in the event. Each room has a maximum capacity, and the team sizes vary. Your task is to write a program that will determine whether it is possible to accommodate all the teams in the given rooms without exceeding their capacities. -----Input----- The first line of the input contains an integer t (1 ≤ t ≤ 10), the number of test cases. For each test case, the first line contains an integer r (1 ≤ r ≤ 100), the number of rooms. The next line contains r integers representing the capacities of the rooms. The next line contains an integer k (1 ≤ k ≤ 100), the number of teams. The next line contains k integers representing the sizes of the teams. -----Output----- For each test case, print \\"POSSIBLE\\" if it is possible to accommodate all teams within the rooms\' capacities, otherwise print \\"IMPOSSIBLE\\". -----Examples----- Input 2 3 5 10 8 4 2 5 7 8 2 3 2 3 3 4 1 Output POSSIBLE IMPOSSIBLE -----Explanation----- In the first test case, we can accommodate the teams as follows: - Team of size 2 in the first room with capacity 5. - Team of size 5 in the second room with capacity 10. - Team of size 7 in the third room with capacity 8. - Team of size 8 in the second room after accommodating the team of size 5 (remaining capacity is 5). In the second test case, it is not possible to fit the teams within the rooms\' capacities without exceeding them.","solution":"def can_accommodate_teams(test_cases): results = [] for case in test_cases: r, rooms, k, teams = case rooms.sort(reverse=True) teams.sort(reverse=True) possible = True for team in teams: accommodated = False for i in range(r): if rooms[i] >= team: rooms[i] -= team accommodated = True break if not accommodated: possible = False break if possible: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): r = int(lines[index]) rooms = list(map(int, lines[index + 1].split())) k = int(lines[index + 2]) teams = list(map(int, lines[index + 3].split())) test_cases.append((r, rooms, k, teams)) index += 4 return test_cases"},{"question":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them. You need to define the function: ```python def diameterOfBinaryTree(root: TreeNode) -> int: ``` where `root` is the root of the binary tree. The function should return an integer representing the diameter of the binary tree. # Example 1: ``` Input: 1 / 2 3 / 4 5 Output: 3 Explanation: The longest path is 4 -> 2 -> 1 -> 3 or 5 -> 2 -> 1 -> 3, both of which have 3 edges. ``` # Example 2: ``` Input: 1 / 2 Output: 1 Explanation: The longest path is 2 -> 1, which has 1 edge. ``` # Constraints: - The number of nodes in the tree will be in the range [0, 10^4]. - -100 <= Node.val <= 100 # Note: - You may only use the given TreeNode class as defined traditionally in binary tree problems: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def diameterOfBinaryTree(root: TreeNode) -> int: def depth(node): nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 depth(root) return diameter"},{"question":"Write a function that takes a 2-dimensional list (matrix) of integers and returns the transpose of the matrix. The transpose of a matrix is obtained by swapping the rows and columns. Example: `[[1, 2, 3], [4, 5, 6], [7, 8, 9]]` should return `[[1, 4, 7], [2, 5, 8], [3, 6, 9]]`","solution":"def transpose(matrix): Returns the transpose of the given matrix. Arguments: matrix -- a 2-dimensional list of integers Returns: A 2-dimensional list representing the transpose of the given matrix return [list(row) for row in zip(*matrix)]"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid can be empty or contain an obstacle. You are initially located at the top-left corner of the grid (1,1) and your goal is to reach the bottom-right corner (N,M). You can move either down or right one step at a time, but you cannot move into a cell with an obstacle. Write a program to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. Since the number of unique paths can be very large, return the result modulo 10^9+7. -----Constraints----- - 1 ≤ N, M ≤ 1000 - The grid is represented as a list of strings, where \'.\' represents an empty cell and \'#\' represents an obstacle. -----Input----- The input is given from Standard Input in the following format: N M grid -----Output----- Print the number of unique paths from the top-left corner to the bottom-right corner of the grid, modulo 10^9+7. If there is no valid path, print 0. -----Sample Input----- 3 3 ... .#. ... -----Sample Output----- 2 Explanation: The two unique paths are: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)","solution":"MOD = 10**9 + 7 def unique_paths(N, M, grid): # Initialize a DP array with 0s. dp = [[0] * M for _ in range(N)] # If the start or end cell is blocked, return 0. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # Starting point dp[0][0] = 1 # Fill the DP array for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1]"},{"question":"Given a list of integers, your task is to return a new list where each element is the product of all the elements in the original list except the one at the current index. You are not allowed to use division in your algorithm. For example, given the list `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` because: - 24 is the product of 2 * 3 * 4 - 12 is the product of 1 * 3 * 4 - 8 is the product of 1 * 2 * 4 - 6 is the product of 1 * 2 * 3 Try to solve the problem with a time complexity of O(n).","solution":"def product_except_self(nums): Given a list of integers, returns a new list where each element is the product of all the elements in the original list except the one at the current index. The function does not use division and has a time complexity of O(n). n = len(nums) if n == 0: return [] # Initialize the output array with 1s output = [1] * n # Calculate the prefix products prefix = 1 for i in range(n): output[i] = prefix prefix *= nums[i] # Calculate the suffix products and multiply with the prefix products suffix = 1 for i in range(n - 1, -1, -1): output[i] *= suffix suffix *= nums[i] return output"},{"question":"You have a collection of gemstones that you would like to arrange into different necklaces. Each necklace can contain different types of gemstones, and every type has a unique beauty score associated with it. You aim to create the most beautiful necklaces such that the total beauty score of each necklace is maximized. Each type of gemstone can appear only once in a single necklace. However, the same type of gemstone can be used in multiple necklaces. Given the beauty scores of the gemstones and the maximum number of necklaces you can make, determine the maximum total beauty score you can achieve. You are provided with n different types of gemstones and their beauty scores. You also have a limit m on the number of necklaces you can create. Your goal is to come up with an optimal score configuration. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of gemstone types and the maximum number of necklaces you can create, respectively. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10000) — the beauty scores of the gemstones. Output - Print a single integer — the maximum total beauty score that can be achieved with the given constraints. Example # Input ``` 4 2 1 2 3 4 ``` # Output ``` 10 ``` # Input ``` 5 3 10 20 30 40 50 ``` # Output ``` 150 ``` # Note In the first example, you can create two necklaces using the gemstones with the two highest beauty scores (4 and 3). Their combined score is 4 + 3 + 4 + 3 = 10. In the second example, the optimal configuration would be to use all available gemstone types across the three possible necklaces, maximizing the total beauty score to 150.","solution":"def max_total_beauty_score(n, m, beauty_scores): Returns the maximum total beauty score that can be achieved with the given constraints. :param n: int - number of gemstone types :param m: int - maximum number of necklaces :param beauty_scores: list of int - beauty scores of the gemstones :return: int - maximum total beauty score # Sort the beauty scores in descending order sorted_scores = sorted(beauty_scores, reverse=True) # Initialize the total beauty score total_beauty_score = 0 # Sum the beauty scores used in all m necklaces for i in range(n): total_beauty_score += sorted_scores[i] * m return total_beauty_score"},{"question":"*You\'re a security expert helping a company with their network. You need to validate employee access codes based on specific rules. Please use regex if available natively for your language.* You will create a boolean method/function: isValidCode/is_valid_code - The access code must be exactly 8 characters long. - It should start with 1 uppercase letter. - Followed by 5 digits (0-9). - Ends with 2 lowercase letters. **Rules** 1. The function should return true or false. 2. The code length should be exactly 8 characters. 3. Any code that doesn\'t follow the specified pattern should return false. Good luck!","solution":"import re def is_valid_code(code): Validate the access code based on specific rules. The rules are: 1. The access code must be exactly 8 characters long. 2. It should start with 1 uppercase letter. 3. Followed by 5 digits (0-9). 4. Ends with 2 lowercase letters. Parameters: - code (str): The access code to be validated. Returns: - bool: True if the access code is valid, False otherwise. pattern = r\'^[A-Z][0-9]{5}[a-z]{2}\' return bool(re.match(pattern, code))"},{"question":"# Introduction You are tasked with creating a function to determine the most frequently occurring characters in a given string and return the result as a list of tuples. If there are multiple characters that occur the same maximum number of times, the characters should be sorted in ascending order. # Task Write a function `most_frequent` that takes a string as input and returns a list of tuples containing the most frequent characters and their occurrences, sorted by character in ascending order. # Input - A single string `text` which can contain alphabets (both uppercase and lowercase), numbers, and other characters. # Output - A list of tuples where each tuple contains a character and its frequency. The list should be sorted in ascending order of characters. # Examples Example 1: ```python most_frequent(\\"abBAc123c\\") ``` Output: ```python [(\'1\', 1), (\'2\', 1), (\'3\', 1), (\'A\', 1), (\'B\', 1), (\'a\', 1), (\'b\', 1), (\'c\', 2)] ``` Example 2: ```python most_frequent(\\"hello world!\\") ``` Output: ```python [(\' \', 1), (\'!\', 1), (\'d\', 1), (\'e\', 1), (\'h\', 1), (\'l\', 3), (\'o\', 2), (\'r\', 1), (\'w\', 1)] ``` # Notes - Consider all characters in the string, including spaces and punctuation. - Characters should be treated as distinct, i.e., \'A\' and \'a\' are different.","solution":"from collections import Counter def most_frequent(text): Returns a list of tuples with the most frequent characters and their frequencies, sorted by characters in ascending order. # Count the frequency of each character in the string freq = Counter(text) # Convert the counter to a sorted list of tuples freq_list = sorted(freq.items()) return freq_list"},{"question":"You will be given a string and your task is to determine whether the string is a valid IP address. An IP address consists of four numbers (each between 0 and 255) separated by dots. Each number cannot have leading zeros, except the number 0 itself. Return `\\"Valid\\"` if the string is a valid IP address and `\\"Invalid\\"` if it is not. For example: ```python validate_ip(\\"192.168.0.1\\") = \\"Valid\\". -- This is a valid IP address validate_ip(\\"256.100.50.0\\") = \\"Invalid\\". -- 256 is out of the range validate_ip(\\"192.168.01.1\\") = \\"Invalid\\". -- 01 has a leading zero validate_ip(\\"192.168.0\\") = \\"Invalid\\". -- Not enough segments validate_ip(\\"192.168.0.1.1\\") = \\"Invalid\\". -- Too many segments ``` More examples in the test cases. Good luck!","solution":"def validate_ip(ip): Validates whether the given string is a valid IP address. Parameters: ip (str): The IP address string to validate. Returns: str: \\"Valid\\" if the IP address is valid, \\"Invalid\\" otherwise. parts = ip.split(\'.\') if len(parts) != 4: return \\"Invalid\\" for part in parts: if not part.isdigit(): return \\"Invalid\\" if len(part) > 1 and part[0] == \'0\': # leading zero return \\"Invalid\\" if not (0 <= int(part) <= 255): return \\"Invalid\\" return \\"Valid\\""},{"question":"Complete the function so that it takes a string and returns the count of each character as a dictionary. Example ```python \\"hello\\" # should return {\\"h\\": 1, \\"e\\": 1, \\"l\\": 2, \\"o\\": 1} ```","solution":"def count_characters(s): Returns a dictionary with the count of each character in the input string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Ingrid loves collecting flowers and wants to arrange them in a unique way. She represents each flower as a character and creates a string that describes her collection. Ingrid wants to make sure that any string she creates can be split into two non-empty strings such that one is a prefix and the other is a suffix. Both parts should be able to form a valid palindrome after rearranging their characters. You need to determine if it is possible to split the given string in such a way. -----Input:----- - The first and only line contains a string s representing the collection of flowers, which consists of lowercase English letters. -----Output:----- - Print \\"YES\\" if it is possible to split the string into two non-empty parts such that both parts can form a palindrome after rearrangement. Otherwise, print \\"NO\\". -----Constraints----- - 2 leq |s| leq 10^5 -----Sample Input 1----- aabbcc -----Sample Output 1----- YES -----Sample Input 2----- abc -----Sample Output 2----- NO -----Explanation----- - In the first example, the string can be split into \\"aabb\\" and \\"cc\\". After rearranging, both \\"aabb\\" and \\"cc\\" can form palindromes (\\"abba\\" and \\"cc\\"). - In the second example, there\'s no way to split \\"abc\\" into two parts that can form palindromes after rearrangement.","solution":"def can_split_to_palindromes(s): from collections import Counter def can_form_palindrome(s): counts = Counter(s) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 n = len(s) if n < 2: return \\"NO\\" for i in range(1, n): prefix = s[:i] suffix = s[i:] if can_form_palindrome(prefix) and can_form_palindrome(suffix): return \\"YES\\" return \\"NO\\" # Quick test for the function print(can_split_to_palindromes(\\"aabbcc\\")) # Expected output: YES print(can_split_to_palindromes(\\"abc\\")) # Expected output: NO"},{"question":"Given an array of integers, write a function to move all zeroes to the end while preserving the order of the other elements. The function should modify the array in place and not return anything. Example: ```python Input: [0,1,0,3,12] Output: [1,3,12,0,0] ```","solution":"def move_zeroes(nums): Moves all zeroes to the end of the list while preserving the order of other elements. The function modifies the list in place and returns nothing. :param nums: List of integers last_non_zero_index = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_index] = nums[i] last_non_zero_index += 1 for i in range(last_non_zero_index, len(nums)): nums[i] = 0"},{"question":"Given a list of integers, rotate the list to the right by a given number of steps. # Function Signature ```python def rotate_list(nums: List[int], k: int) -> List[int]: ``` # Input - `nums` (List[int]): A list of integers. - `k` (int): The number of steps to rotate the list. # Output - A list of integers after being rotated to the right by `k` steps. # Examples ```python rotate_list([1, 2, 3, 4, 5], 2) # [4, 5, 1, 2, 3] rotate_list([0, 1, 2], 4) # [2, 0, 1] rotate_list([5, 6, 7, 8, 9], 1) # [9, 5, 6, 7, 8] ```","solution":"from typing import List def rotate_list(nums: List[int], k: int) -> List[int]: Rotates the list to the right by k steps. Args: nums (List[int]): A list of integers. k (int): The number of steps to rotate the list. Returns: List[int]: The list after rotating to the right by k steps. if not nums or k <= 0: return nums n = len(nums) k = k % n # In case k is greater than the length of the list return nums[-k:] + nums[:-k]"},{"question":"# Task You are given a string `s` representing a mathematical expression containing non-negative integers and the operators: `+`, `-`, `*`, and `/`. Your task is to evaluate the expression and return the result as an integer. The division should truncate toward zero, meaning it rounds towards zero. The expression is always valid. Note that the input may contain spaces but they should be ignored in the evaluation. # Input/Output - `[input]` string `s` A string representing a mathematical expression. `1 ≤ s.length ≤ 1000` - `[output]` an integer The result of evaluating the expression. # Example For `s = \\"3+2*2\\"`, the output should be: ``` 7 ``` For `s = \\" 3/2 \\"`, the output should be: ``` 1 ``` For `s = \\" 3+5 / 2 \\"`, the output should be: ``` 5 ```","solution":"def evaluate_expression(s): Evaluates the mathematical expression given in the string s and returns the result as an integer. Division truncates toward zero. # Remove all spaces from the string s = s.replace(\' \', \'\') # Initialize stack, number and sign variables stack = [] num = 0 sign = \\"+\\" i = 0 while i < len(s): char = s[i] if char.isdigit(): num = num * 10 + int(char) if not char.isdigit() or i == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = char num = 0 i += 1 return sum(stack)"},{"question":"In a research laboratory, there are N chemical samples (numbered 1 through N) organized in a single line. The efficacy rate of the i-th sample is denoted by e_i. A scientist wants to choose some of these samples and store them in special containers that can preserve samples of sequentially increasing efficacy. In other words, a container can hold samples e_i, e_{i+1}, dots, e_j if and only if e_i < e_{i+1} < dots < e_j. The goal is to find the minimum number of containers needed to store all the samples such that each container holds a sequence of samples with strictly increasing efficacy rates. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers e_1, e_2, dots, e_N. -----Output----- For each test case, print a single line containing one integer — the minimum required number of containers. -----Constraints----- - 1 le N le 10^5 - 1 le e_i le 10^9 for each valid i - the sum of N over all test cases does not exceed 5 cdot 10^5 -----Example Input----- 1 6 5 1 3 6 4 7 -----Example Output----- 2 -----Explanation----- Example case 1: We can split the samples into two containers as follows: - First container: efficacy rates [1, 3, 6, 7] - Second container: efficacy rates [5, 4]","solution":"def min_containers(test_cases): results = [] for n, samples in test_cases: containers = [] for sample in samples: placed = False for container in containers: if container[-1] < sample: container.append(sample) placed = True break if not placed: containers.append([sample]) results.append(len(containers)) return results"},{"question":"You are given an array (or list) of integers, each representing a different product’s quantity in stock. Your task is to create a function `can_achieve_exact_quantity` that determines if it is possible to achieve a given target quantity by combining zero or more quantities from the array. You may use each quantity in the array as many times as needed. The function should accept two arguments: 1. `quantities`: a list of integers, each representing quantities of different products available. 2. `target`: an integer representing the target quantity you want to achieve. The function should return `True` if it is possible to achieve the target quantity, or `False` otherwise. # Examples ```python can_achieve_exact_quantity([1, 2, 3], 5) # Returns True, 5 can be achieved by combining 2+3. can_achieve_exact_quantity([1, 2, 5], 11) # Returns True, 11 can be achieved by combining 5+5+1. can_achieve_exact_quantity([3, 6, 9], 10) # Returns False, 10 cannot be achieved by any combination of 3, 6, and 9. can_achieve_exact_quantity([5, 10, 20], 25) # Returns True, 25 can be achieved by combining 5+20. can_achieve_exact_quantity([7, 14], 21) # Returns True, 21 can be achieved by combining 7+14. can_achieve_exact_quantity([], 3) # Returns False, no quantities to achieve the target. ``` # Notes * The array of quantities and target will contain non-negative integers. * Assume that 0 is not a valid target quantity. * The array can contain duplicates or be empty. * You can use dynamic programming or a greedy approach to solve this problem. Function signature: ```python def can_achieve_exact_quantity(quantities: List[int], target: int) -> bool: pass ```","solution":"def can_achieve_exact_quantity(quantities, target): Determines if it is possible to achieve the target quantity by combining quantities. # Initialize the dp array with False values dp = [False] * (target + 1) dp[0] = True # Base case: 0 quantity can always be achieved for i in range(1, target + 1): for quantity in quantities: if i >= quantity and dp[i - quantity]: dp[i] = True break return dp[target]"},{"question":"Given a string representing a mathematical expression that contains only non-negative integers, +, -, *, and / (integers division), implement a function to evaluate it. The integer division should truncate towards zero. You can assume that the expression is always valid and that there will be no division by zero errors. Example 1: Input: \\"3+2*2\\" Output: 7 Explanation: 3 + (2 * 2) = 3 + 4 = 7 Example 2: Input: \\" 3/2 \\" Output: 1 Explanation: 3 // 2 = 1 since we truncate towards zero. Example 3: Input: \\" 3+5 / 2 \\" Output: 5 Explanation: (5 // 2) + 3 = 2 + 3 = 5 Note: 1. The input strings will not have extra blank spaces besides those between operations. 2. The length of the input string is in the range [1, 10^4]. 3. The input strings will only contain digits and the operators +, -, *, /.","solution":"def evaluate_expression(expression): Evaluate a string mathematical expression consisting of non-negative integers, +, -, *, / operators with integer division truncating towards zero. def apply_ops(ops, nums): right = nums.pop() left = nums.pop() op = ops.pop() if op == \\"+\\": nums.append(left + right) elif op == \\"-\\": nums.append(left - right) elif op == \\"*\\": nums.append(left * right) elif op == \\"/\\": nums.append(int(left / right)) # truncate towards zero ops = [] nums = [] i, n = 0, len(expression) while i < n: if expression[i] == \\" \\": i += 1 continue if expression[i] in \\"+-*/\\": while ops and (ops[-1] in \\"*/\\" or (ops[-1] in \\"+-\\" and expression[i] in \\"+-\\")): apply_ops(ops, nums) ops.append(expression[i]) i += 1 else: j = i while j < n and expression[j].isdigit(): j += 1 nums.append(int(expression[i:j])) i = j while ops: apply_ops(ops, nums) return nums[0]"},{"question":"Given an integer N, determine if it can be represented as the sum of two or more consecutive positive integers. -----Input----- The input contains a single integer T denoting the number of test cases. For each test case, you are given a single integer N. -----Output----- For each test case, print YES or NO depending on whether N can be expressed as the sum of two or more consecutive positive integers. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^9 -----Example----- Input: 3 9 15 8 Output: YES YES NO -----Explanation----- Example case 1: 9 can be expressed as the sum of 4 + 5. Example case 2: 15 can be expressed as the sum of 1 + 2 + 3 + 4 + 5. Example case 3: 8 cannot be expressed as the sum of two or more consecutive positive integers.","solution":"def can_be_expressed_as_sum_of_consecutive_integers(N): Determines if an integer N can be represented as the sum of two or more consecutive positive integers. # N should not be a power of 2 to meet the condition return (N & (N - 1)) != 0 def solve(T, test_cases): results = [] for N in test_cases: if can_be_expressed_as_sum_of_consecutive_integers(N): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tom wants to organize his bookshelf. He has a collection of books, each with a specific number of pages. Tom wants to divide his collection into two stacks such that the difference between the total number of pages in the two stacks is minimized. Write a program that, given the number of books and the number of pages in each book, finds the minimum possible difference between the total number of pages in the two stacks. -----Input----- The first line contains a single integer n (1 le n le 100) — the number of books. The second line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 1000) — the number of pages in each book. -----Output----- Output a single integer — the minimum possible difference between the total number of pages in the two stacks. -----Example----- Input 5 1 2 3 4 5 Output 1 -----Note----- In the example, Tom can arrange the books into two stacks where the total number of pages are 6 and 7, respectively. The difference between the total number of pages is |6-7| = 1, which is the minimum possible difference.","solution":"def min_page_difference(n, pages): total_pages = sum(pages) half_pages = total_pages // 2 # Initialize DP table dp = [0] * (half_pages + 1) for page in pages: for j in range(half_pages, page - 1, -1): dp[j] = max(dp[j], dp[j - page] + page) stack_one = dp[half_pages] stack_two = total_pages - stack_one return abs(stack_one - stack_two)"},{"question":"Given a string containing digits and lowercase English letters, implement a function to reorder the string in such a way that all the digits come before the letters. The relative order of the digits and letters should be preserved. Example 1: Input: \\"a1b2c3\\" Output: \\"123abc\\" Example 2: Input: \\"3z4x1a\\" Output: \\"341zxa\\" Example 3: Input: \\"ab12cd34\\" Output: \\"1234abcd\\"","solution":"def reorder_string(s): Reorders the string such that all digits come before letters while preserving relative order. Parameters: s (str): input string containing digits and lowercase letters Returns: str: reordered string with digits before letters digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] return \'\'.join(digits + letters)"},{"question":"# Description: Write a function that takes a string as input and returns the length of the longest substring that contains no repeating characters. # Examples ``` LongestSubstring(\\"\\") == 0 LongestSubstring(\\"a\\") == 1 LongestSubstring(\\"abcabcbb\\") == 3 LongestSubstring(\\"bbbbb\\") == 1 LongestSubstring(\\"pwwkew\\") == 3 LongestSubstring(\\"dvdf\\") == 3 LongestSubstring(\\"anviaj\\") == 5 ```","solution":"def longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a list of integers and a target integer, find all unique pairs of integers in the list that sum up to the target integer. The solution should not include duplicate pairs. Examples: `([1, 2, 3, 4, 5, 6], 7)` - should return `[(1, 6), (2, 5), (3, 4)]` `([1, 2, 3, 2, 3, 4], 5)` - should return `[(1, 4), (2, 3)]` `([3, 3, 3, 3], 6)` - should return `[(3, 3)]` Details: - the order of the pairs and the order within the pairs do not matter. - the list and target will always contain valid integers.","solution":"def find_pairs(nums, target): Given a list of integers and a target integer, find all unique pairs of integers in the list that sum up to the target integer. nums.sort() seen = set() pairs = set() for num in nums: if target - num in seen: pairs.add((target - num, num)) seen.add(num) return list(pairs)"},{"question":"Write a function called `maxDiff` that takes a list of integers and returns the maximum difference between any two elements such that the larger element comes after the smaller element. If the list has less than two elements, return 0. Example: ``` maxDiff([2, 3, 10, 6, 4, 8, 1]) should return 8 (difference between 10 and 2) maxDiff([7, 9, 5, 6, 3, 2]) should return 2 (difference between 9 and 7) maxDiff([1]) should return 0 (since the list has less than two elements) ```","solution":"def maxDiff(arr): Returns the maximum difference between any two elements such that the larger element comes after the smaller element. If the list has less than two elements, return 0. if len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] - min_element > max_diff: max_diff = arr[i] - min_element if arr[i] < min_element: min_element = arr[i] return max_diff"},{"question":"Lina loves reading. She has recently discovered a new author and is trying to read all of their articles. However, Lina has a peculiar way of reading: she always starts with the shortest unread article and proceeds to read articles of increasing length. Given a list of article lengths Lina has and the order in which she reads them, write a program to determine how many articles she reads in total after reading each article. Specifically, after reading each article, determine the total number of articles Lina has read up to and including that article. -----Input----- - The first line of the input contains an integer N denoting the number of articles. - The second line contains N space-separated integers L_1, L_2, ldots, L_N, representing the lengths of the articles. - The third line contains N space-separated integers R_1, R_2, ldots, R_N, representing the order in which Lina reads the articles. -----Output----- - Output N integers, where the i-th integer is the total number of articles Lina has read after reading R_i-th article in the original list. -----Constraints----- - 1 le N le 10^5 - 1 le L_i le 10^9 for each valid i - 1 le R_i le N for each valid i - The reading order R is a permutation of the integers from 1 to N. -----Example Input----- 5 4 1 3 2 5 5 1 3 2 4 -----Example Output----- 1 2 3 4 5 -----Explanation----- The lengths of the articles are [4, 1, 3, 2, 5]. Lina reads articles in the order of their lengths: [1, 2, 3, 4, 5]. After reading each article the total number of articles read are: - After reading article of length 1 (first article), she has read 1 article. - After reading article of length 2 (second article), she has read 2 articles. - After reading article of length 3 (third article), she has read 3 articles. - After reading article of length 4 (fourth article), she has read 4 articles. - After reading article of length 5 (fifth article), she has read 5 articles.","solution":"def total_articles_read(N, L, R): Computes how many articles Lina has read after reading each specified article in order. Parameters: N (int): the number of articles. L (list): a list containing the lengths of the articles. R (list): a list containing the order in which Lina reads the articles. Returns: list: a list containing the total number of articles read after each article in the order they were read. # Initialize an array to keep track of the read status read_status = [False] * N # To store the results results = [] for read_order in R: # Mark the article as read read_status[read_order - 1] = True # Count how many articles have been read so far total_read = read_status.count(True) # Append the count to the results results.append(total_read) return results"},{"question":"**Problem Statement** Write a function called `rotate_list` that takes a list of integers and rotates the elements of the list to the right by `k` steps where `k` is a non-negative integer. The rotation of the list means that each element is shifted to the right by one position, and the last element is moved to the start of the list. This process is repeated `k` times. **Example**: If the input list is `[1, 2, 3, 4, 5, 6, 7]` and `k = 3`, the list should be rotated to the right three times, resulting in `[5, 6, 7, 1, 2, 3, 4]`. Your task is to implement the `rotate_list` function that accomplishes this. **Function Signature**: ```python def rotate_list(nums: List[int], k: int) -> List[int]: ``` **Input**: - `nums` - A list of integers. - `k` - A non-negative integer representing the number of steps to rotate. **Output**: - A list of integers, rotated to the right by `k` steps. **Examples**: ```python rotate_list([1, 2, 3, 4, 5, 6, 7], 3) -> [5, 6, 7, 1, 2, 3, 4] rotate_list([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] rotate_list([0, -1, -2, -3], 1) -> [-3, 0, -1, -2] rotate_list([1], 10) -> [1] ```","solution":"def rotate_list(nums, k): Rotates the elements of the list \'nums\' to the right by \'k\' steps. if not nums: return [] n = len(nums) k %= n # In case k is greater than the length of the list return nums[-k:] + nums[:-k]"},{"question":"Alice is playing a game with a special string. The string consists of lowercase English letters, but she can perform certain operations to transform it. Her goal is to make the string a palindrome using the minimum number of operations. An operation is defined as choosing a non-empty substring of the string and moving it to the end of the string. Alice wants to find out the minimum number of operations required to make the string a palindrome. --- Input --- The input consists of a single line containing the string s (1 ≤ |s| ≤ 100000). The string s consists of only lowercase English letters. --- Output --- Output a single integer — the minimum number of operations required to make the string a palindrome. --- Example --- Input racecar Output 0 Input aabb Output 2 Input abbab Output 1 --- Note --- In the first example, the input string \\"racecar\\" is already a palindrome, so no operations are required. In the second example, you can take the first \\"aa\\" and move it to the end, resulting in \\"bbaa\\", then take the next \\"bb\\" and move it to the end, resulting in \\"aabb\\", but another operation is still needed to make it a palindrome (\\"abba\\"). Hence the total operations are 2. In the third example, one optimal way is to take \\"bba\\" and move it to the end, resulting in \\"bab\\", which is a palindrome. Therefore, only 1 operation is required.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the string s into a palindrome. def is_palindrome(s): return s == s[::-1] # A string of length 1 is already a palindrome if len(s) == 1: return 0 # If the string is already a palindrome if is_palindrome(s): return 0 n = len(s) # To check how much prefix is already forming a palindrome with its suffix. for i in range(n): if is_palindrome(s[:n-i]): return i # In the worst case, it may take n-1 operations return n - 1"},{"question":"Generate the nth Fibonacci number programmatically given the constraints. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Note: n is a non-negative integer and will fit within the range of a 32-bit signed integer (0 ≤ n < 2^31 - 1). Example 1: Input: 4 Output: 3 Example 2: Input: 10 Output: 55 Explanation: The 10th Fibonacci number in the sequence is 55 since the sequence progresses as: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function called ```checksum_calc```, which receives a string as its argument and returns an integer checksum. The checksum is calculated by summing up the ASCII value of each character in the string and then finding the remainder when divided by 256. If the input string is empty, return 0. Example: ```python checksum_calc(\\"hello\\") => 532 checksum_calc(\\"goodbye\\") => 717 checksum_calc(\\"\\") => 0 ```","solution":"def checksum_calc(input_str): Calculate the checksum of a given string by summing up the ASCII values of characters and taking the remainder when divided by 256. Args: input_str (str): Input string Returns: int: The checksum value return sum(ord(char) for char in input_str) % 256"},{"question":"You are given a grid of characters and a word. You need to check if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell may not be used more than once. Write a function `word_in_grid(grid, word)` that takes in a 2D list of characters and a string word, and returns `True` if the word exists in the grid, and `False` otherwise. **Function signature:** ```python def word_in_grid(grid: List[List[str]], word: str) -> bool: ``` **Input:** - `grid`: A 2D list of characters, e.g., [[\'A\', \'B\', \'C\'], [\'D\', \'E\', \'F\'], [\'G\', \'H\', \'I\']] - `word`: A single word string, e.g., \\"ABFHI\\" **Output:** - Returns `True` if the word can be constructed from the grid, otherwise returns `False`. **Rules:** 1. The word can be constructed from letters of sequentially adjacent cells 2. Cells can be adjacent horizontally, vertically, or diagonally. 3. The same cell cannot be used more than once in the construction of the word. **Examples:** ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" word2 = \\"SEE\\" word3 = \\"ABCB\\" word_in_grid(grid, word1) # returns True word_in_grid(grid, word2) # returns True word_in_grid(grid, word3) # returns False ``` **Notes:** - Consider all possible directions (left, right, up, down, and all four diagonals) while searching for the sequence. - Implement a backtracking algorithm to explore all possible paths in the grid for the given word.","solution":"from typing import List def word_in_grid(grid: List[List[str]], word: str) -> bool: def dfs(x, y, word): if len(word) == 0: return True if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] != word[0]: return False temp = grid[x][y] grid[x][y] = \\"#\\" # Mark the cell as visited # Explore all 8 possible directions found = (dfs(x+1, y, word[1:]) or dfs(x-1, y, word[1:]) or dfs(x, y+1, word[1:]) or dfs(x, y-1, word[1:]) or dfs(x+1, y+1, word[1:]) or dfs(x+1, y-1, word[1:]) or dfs(x-1, y+1, word[1:]) or dfs(x-1, y-1, word[1:])) grid[x][y] = temp # Unmark the cell return found for i in range(len(grid)): for j in range(len(grid[0])): if dfs(i, j, word): return True return False"},{"question":"Given an array of integers, return a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. You must solve it without using division and in O(n) time complexity. For example, given [1, 2, 3, 4], your function should return [24, 12, 8, 6].","solution":"def product_except_self(nums): Given an array of integers, return a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. This must be done without using division and in O(n) time complexity. length = len(nums) # Initialize the left and right product lists left_products = [1] * length right_products = [1] * length result = [1] * length # Compute the left products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Compute the right products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Compute the result array by multiplying left and right products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given a grid of size n x m, you need to find the longest increasing path in the grid. You can move in four possible directions (up, down, left, right) from a cell, and you cannot move diagonally or move outside the boundary. The grid is represented as a list of lists of integers. Write a function that returns the length of the longest increasing path. Each movement must be to a cell with a strictly higher value than the current cell. Example 1: Input: grid = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] Output: 4 Explanation: The longest increasing path is [1, 2, 6, 9]. Example 2: Input: grid = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] Output: 4 Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. Note: - You may assume that all values in the grid are distinct. - 1 <= n, m <= 200","solution":"def longest_increasing_path(grid): Returns the length of the longest increasing path in the given grid. if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] memo = [[-1 for _ in range(m)] for _ in range(n)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) memo[x][y] = max_length return max_length max_path = 0 for i in range(n): for j in range(m): max_path = max(max_path, dfs(i, j)) return max_path"},{"question":"You are given a string `s` which contains uppercase and lowercase letters, and a list of words `banned` that contains words that need to be ignored. Your task is to find the most frequent word in the string that is not in the banned list. If there is a tie, you should return the lexicographically smallest word. Note that the word comparison should be case-insensitive. Implement: ```python def most_frequent_word(s: str, banned: List[str]) -> str: # Your code here ``` **Examples:** 1. ```python s = \\"Jack and Jill went up the hill, to fetch a pail of water. Jack fell down and broke his crown, and Jill came tumbling after.\\" banned = [\\"and\\", \\"the\\", \\"to\\", \\"a\\", \\"of\\"] most_frequent_word(s, banned) # returns \\"jack\\" ``` 2. ```python s = \\"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness.\\" banned = [\\"it\\", \\"was\\", \\"the\\", \\"of\\"] most_frequent_word(s, banned) # returns \\"age\\" ``` 3. ```python s = \\"The quick brown fox jumps over the lazy dog.\\" banned = [\\"the\\"] most_frequent_word(s, banned) # returns \\"brown\\" ``` **Assumptions:** - `1 < len(s) < 10^6` - The banned list will have at most 100 words. - Words in the string are separated by spaces and/or punctuation marks.","solution":"import re from collections import defaultdict from typing import List def most_frequent_word(s: str, banned: List[str]) -> str: # Normalize the string to lower case and remove punctuation s = s.lower() words = re.findall(r\'bw+b\', s) # Create a set of banned words for quicker lookup banned_set = set(banned) # Dictionary to keep count of non-banned words word_count = defaultdict(int) # Count frequency of each word that is not banned for word in words: if word not in banned_set: word_count[word] += 1 # Find the most frequent word (lexicographically smallest in case of a tie) most_frequent = \'\' highest_count = 0 for word, count in word_count.items(): if count > highest_count or (count == highest_count and word < most_frequent): most_frequent = word highest_count = count return most_frequent"},{"question":"Detect Cycles in Graphs Given an undirected graph represented by an adjacency list, determine whether the graph contains any cycles. A cycle is a path of edges and vertices wherein a vertex is reachable from itself. -----Input----- The input starts with a single integer T, the number of test cases. T test cases follow. Each test case begins with a single integer V, the number of vertices in the graph, followed by an integer E, the number of edges. The next E lines contain two integers each, u and v, representing an edge between vertex u and vertex v. -----Output----- For each test case, print a single line containing either \\"YES\\" if the graph contains a cycle or \\"NO\\" if it does not. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ V ≤ 100 0 ≤ E ≤ V(V-1)/2 1 ≤ u, v ≤ V Graph edges will always be between distinct vertices, and no edge is repeated. -----Example----- Input: 3 3 3 1 2 2 3 3 1 4 2 1 2 3 4 5 4 1 2 2 3 3 4 4 5 Output: YES NO NO -----Explanation----- Case 1. The first graph forms a triangle between vertices 1, 2, and 3, which clearly contains a cycle. Case 2. The second graph is simply two disconnected edges between vertices 1-2 and 3-4, with no cycles. Case 3. The third graph is a linear chain of vertices 1-2-3-4-5, which does not form any cycles.","solution":"def has_cycle_in_graph(V, adjacency_list): visited = [False] * V def dfs(current, parent): visited[current] = True for neighbor in adjacency_list[current]: if not visited[neighbor]: if dfs(neighbor, current): return True elif neighbor != parent: return True return False for vertex in range(V): if not visited[vertex]: if dfs(vertex, -1): return True return False def detect_cycles_in_graphs(T, test_cases): results = [] for V, E, edges in test_cases: adjacency_list = [[] for _ in range(V)] for u, v in edges: adjacency_list[u - 1].append(v - 1) adjacency_list[v - 1].append(u - 1) if has_cycle_in_graph(V, adjacency_list): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Task Write a function to determine the sum of the two smallest positive numbers in a given array. The input array will always contain at least two positive integers. # Example For `arr = [19, 5, 42, 2, 77]` The result should be `7`, as the smallest numbers are `2` and `5`. For `arr = [10, 343, 5, 1000, 20, 7, 2]` The result should be `7`, as the smallest numbers are `2` and `5`. # Input/Output - `[input]` integer array `arr` A non-empty array, `2 ≤ arr.length ≤ 1000` `1 ≤ arr[i] ≤ 1000` - `[output]` an integer The sum of the two smallest positive numbers.","solution":"def sum_two_smallest_numbers(arr): Returns the sum of the two smallest positive numbers in the given array. sorted_arr = sorted(arr) return sorted_arr[0] + sorted_arr[1]"},{"question":"In a training session, there are M athletes running on a track. Athletes might decide to form small groups during the run in order to motivate each other. To form a group, athletes must be within a certain distance of each other. Given the initial positions and speeds of the athletes, your task is to determine if all the athletes can potentially form a single group at some point in time. Athletes maintain their speed constantly throughout the session. ----Input:---- - The first line contains a single integer T, representing the number of test cases. - The first line of each test case contains two integers M and R, the number of athletes and the maximum distance for athletes to be considered in the same group. - Then M lines follow, each containing two integers P and S where P is the initial position and S is the speed of the athlete. ----Output:---- For each test case, output \\"YES\\" if it is possible for all athletes to form a single group, otherwise \\"NO\\". ----Constraints---- - 1 leq T leq 10 - 1 leq M leq 10^5 - 0 leq P leq 10^9 - 0 leq S leq 10^9 - 1 leq R leq 10^9 ----Sample Input:---- 2 3 10 0 2 5 3 10 1 3 5 0 1 5 2 10 3 ----Sample Output:---- YES NO ----Explanation:---- In the first test case, even if the initial positions and speeds vary, at some point in time, all athletes can be within 10 units of each other. In the second test case, due to the positions and different speeds, it is not possible for all athletes to be within 5 units of each other at the same time.","solution":"def can_form_single_group(T, test_cases): results = [] for i in range(T): M, R, athletes = test_cases[i] min_position = min(athlete[0] for athlete in athletes) max_position = max(athlete[0] for athlete in athletes) # Check if all athletes can potentially form a single group can_group = True for j in range(M): for k in range(M): if abs(athletes[j][1] - athletes[k][1]) != 0 and abs(athletes[j][0] - athletes[k][0]) > R: can_group = False break if not can_group: break if can_group: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of open and close parenthesis. Your task is to determine if the sequence is a valid balanced parentheses sequence. This means that every open parenthesis has a corresponding close parenthesis and the pairs of parentheses are properly nested. For example, the sequence \\"()()\\" is valid while the sequence \\"(()\\" is not. Your task Implement a function that will determine if a given sequence of parentheses is balanced. ```python sequence1 = \\"((()))\\" sequence2 = \\"(()))\\" sequence3 = \\"())(()\\" is_balanced(sequence1) == True is_balanced(sequence2) == False is_balanced(sequence3) == False ``` *Note* : Return `True` if the sequence is balanced, and `False` otherwise. The implementation should efficiently check the sequence and handle various lengths of sequences.","solution":"def is_balanced(sequence): Determine if the given sequence of parentheses is balanced. Args: sequence (str): A string containing the sequence of parentheses. Returns: bool: True if the sequence is balanced, False otherwise. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"In a fictional kingdom, there are N cities connected by bidirectional roads. Each road has a certain length which is an integer value. The King wants to know the length of the longest path in the kingdom where no city is visited more than once. Your task is to find the length of the longest path between any two cities in the kingdom where no city appears more than once on the path. -----Input:----- - The first line contains an integer T denoting the number of test cases. - Each test case starts with a line containing an integer N, the number of cities. - Each of the next N-1 lines contains three integers u, v, and l, denoting a road between city u and city v with length l. -----Output:----- For each test case, print a single line containing the length of the longest path. -----Constraints:----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^4 - 1 ≤ l ≤ 10^5 -----Sample Input:----- 1 5 1 2 3 1 3 2 3 4 4 3 5 6 -----Sample Output:----- 11","solution":"from collections import defaultdict, deque def longest_path_length(T, test_cases): def bfs(node): visited = {node} queue = deque([(node, 0)]) farthest_node, max_distance = node, 0 while queue: current_node, current_distance = queue.popleft() for neighbor, length in adj[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, current_distance + length)) if current_distance + length > max_distance: max_distance = current_distance + length farthest_node = neighbor return farthest_node, max_distance results = [] for test_case in test_cases: N = test_case[\\"N\\"] edges = test_case[\\"edges\\"] adj = defaultdict(list) for u, v, l in edges: adj[u].append((v, l)) adj[v].append((u, l)) # First BFS to find the farthest node from any node (let\'s pick node 1) farthest_node_from_start, _ = bfs(1) # Second BFS to find the maximum distance from the farthest node found above _, longest_path = bfs(farthest_node_from_start) results.append(longest_path) return results # Test input example. T = 1 test_cases = [ { \\"N\\": 5, \\"edges\\": [ (1, 2, 3), (1, 3, 2), (3, 4, 4), (3, 5, 6) ] } ] print(longest_path_length(T, test_cases)) # Output: [11]"},{"question":"You are given a list of strings `str_list`, where each string consists of lowercase alphabets only. The goal is to find the longest common prefix among all strings in the list. If there is no common prefix, return an empty string `\\"\\"`. Write a function `longest_common_prefix` that takes `str_list` as an argument and returns the longest common prefix. **Examples:** ```python longest_common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) == \\"fl\\" longest_common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) == \\"\\" longest_common_prefix([\\"interstellar\\", \\"internet\\", \\"internal\\", \\"intermediate\\"]) == \\"inter\\" ``` # Constraints: - The input list will have at least one string and at most 100 strings. - The length of each string will be between 1 and 200. - All characters in the input strings are lowercase English letters. # Additional Notes: - If the list contains only one string, the common prefix is the string itself. - The function should be efficient to handle the upper limits of the constraints.","solution":"def longest_common_prefix(str_list): Returns the longest common prefix from a list of strings. :param str_list: List[str], a list of strings consisting of lowercase alphabets only :return: str, the longest common prefix if not str_list: return \\"\\" # Sort the list to get the min and max strings str_list.sort() # Taking the smallest and largest strings by lexicographical order first, last = str_list[0], str_list[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 # The longest common prefix would be the same between the smallest and largest strings in the sorted list return first[:i]"},{"question":"You have been given a string S consisting of lowercase English alphabets. You are required to transform this string such that no two adjacent characters are the same. To achieve this transformation, you can insert any lowercase English letter at any position in the string (including at the beginning and end). Compute the minimum number of insertions needed to achieve the desired transformation. -----Input----- - The first line of the input contains an integer T, the number of test cases. For each test case, there is a single line containing the string S. -----Output----- For each test case, print a single line containing one integer — the minimum number of insertions needed. -----Constraints----- - 1 le T le 50 - 1 le lvert S lvert le 10^5 -----Example Input----- 3 aab aaaa abc -----Example Output----- 1 3 0 -----Explanation----- Example case 1: The string \\"aab\\" can be transformed into \\"abab\\" or \\"aabb\\", requiring one insertion. Example case 2: The string \\"aaaa\\" can be transformed into \\"ababab\\", requiring three insertions. Example case 3: The string \\"abc\\" already has no two adjacent characters the same, requiring no insertions.","solution":"def min_insertions_to_avoid_adjacent_duplicates(T, cases): Returns the minimum number of insertions needed to transform the strings in `cases` such that no two adjacent characters are the same. results = [] for S in cases: count_inserts = 0 for i in range(len(S) - 1): if S[i] == S[i + 1]: count_inserts += 1 results.append(count_inserts) return results"},{"question":"# Longest Common Prefix Write a function `longest_common_prefix` that takes a list of strings and returns the longest common prefix string amongst the list of strings. If there is no common prefix, return an empty string `\\"\\"`. Function Signature ```python def longest_common_prefix(strs: List[str]) -> str: ``` Your Task Implement the function to find the longest common prefix string amongst a list of strings. If there is no common prefix, return an empty string `\\"\\"`. The list will contain at least one string, and can contain between 1 and 200 strings. Each string can be up to 1000 characters long and will consist only of lowercase English letters (`a-z`). Examples | **Input** | **Output** | | ---------|---------| | [\\"flower\\",\\"flow\\",\\"flight\\"] | \\"fl\\" | | [\\"dog\\",\\"racecar\\",\\"car\\"] | \\"\\" | | [\\"interspecies\\",\\"interstellar\\",\\"interstate\\"] | \\"inters\\" | | [\\"throne\\",\\"dungeon\\"] | \\"\\" | | [\\"throne\\",\\"throne\\"] | \\"throne\\" | Constraints - The length of the input list is between 1 and 200 strings. - The length of each string is between 1 and 1000.","solution":"from typing import List def longest_common_prefix(strs: List[str]) -> str: if not strs: return \\"\\" # Find the shortest string in the list min_length = min(len(s) for s in strs) # Initialize the prefix with the first string fully prefix = strs[0][:min_length] for i in range(min_length): # Get the current character to check char = prefix[i] # Compare it with the same position in all strings for s in strs: if s[i] != char: return prefix[:i] return prefix"},{"question":"You are given an m times n grid filled with non-negative numbers representing the cost of travel through each cell. Your task is to find a path from the top left corner to the bottom right corner such that the total travel cost is minimized. You can only move either down or right at any point in time. For example, consider the following grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The path with the minimum travel cost is marked as follows: ``` 1→3→1 ↓ 1 5→1 ↓ 4→2→1 ``` The total travel cost for this path is 7. -----Input:----- The first line of the input contains two integers, m and n, representing the number of rows and columns in the grid. The next m lines each contain n non-negative integers, representing the travel cost of each cell in the grid. -----Output:----- The output should be a single integer, the minimum travel cost from the top left to the bottom right corner of the grid. -----Constraints:----- - 1 leq m, n leq 200. - The cost of travel in each cell is a non-negative integer less than or equal to 100. -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7","solution":"def minPathSum(grid): Function to find the minimum travel cost from the top-left to the bottom-right of the grid. :param grid: List[List[int]]: 2D list representing the cost grid. :return: int: Minimum travel cost. m, n = len(grid), len(grid[0]) # Create a DP table to store min cost for each cell dp = [[0] * n for _ in range(m)] # Initialize first cell dp[0][0] = grid[0][0] # Initialize first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize first row (can only come from left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the rest of the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"In a distant land of Arithmoria, mathematicians are fond of creating magic sequences. A magic sequence of length n is an array of integers where each element is the sum of the two previous elements, starting from the third element. The first two elements can be any integers. They also add a twist to the concept by considering \'interesting subsequences\'. An interesting subsequence is defined as a contiguous subsequence that starts at the beginning of the array and contains at least three elements. You are given an array A of length n and need to determine the number of interesting subsequences for this array. Note that the array may not completely follow the standard \'magic sequence\' rule. -----Input----- The first line of the input contains a single integer n (3 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers A1, A2, ..., An (|Ai| ≤ 10^9), representing the elements of the array A. -----Output----- Print a single integer — the number of interesting subsequences in the array. -----Examples----- Input 5 3 4 7 11 18 Output 3 Input 6 1 2 3 5 8 9 Output 4 -----Explanation----- In the first example, the interesting subsequences are: - [3, 4, 7] - [3, 4, 7, 11] - [3, 4, 7, 11, 18] In the second example, the interesting subsequences are: - [1, 2, 3] - [1, 2, 3, 5] - [1, 2, 3, 5, 8] - [1, 2, 3, 5, 8, 9]","solution":"def count_interesting_subsequences(n, array): Returns the number of interesting subsequences in the array. Parameters: n (int): Length of the array. array (List[int]): The array of integers. Returns: int: The number of interesting subsequences. # Number of interesting subsequences can be directly computed as n - 2 # since any subsequence starting from index 0 with at least 3 elements # forms an interesting subsequence. return n - 2"},{"question":"# Problem Description A *word square* is a special type of n x n grid filled with letters such that each row and each column forms a valid word. For example, the following is a 3x3 word square: ``` cat are tea ``` Given a list of words, determine if a given n x n grid can be formed into a word square using the provided list of words. You should return `True` if the grid can be formed into a word square, and `False` otherwise. Note: - The words used to form the square do not have to be unique. - Each word in the list will have the same length. # Constraints - The input list will contain between 1 and 1000 words. - Each word in the list will have a length of at most 10 characters. - The input list will contain only lowercase alphabetic characters. # Examples ```python can_form_word_square([\\"area\\",\\"lead\\",\\"wall\\",\\"lady\\",\\"ball\\"]) == True # Explanation: One possible word square is: # wall # area # lead # lady can_form_word_square([\\"abat\\",\\"baba\\",\\"atan\\",\\"atal\\"]) == True # Explanation: One possible word square is: # abat # baba # atan # atal can_form_word_square([\\"xyz\\",\\"zyx\\",\\"yxw\\"]) == False # No valid word square can be formed. ``` # Function Signature ```python def can_form_word_square(words: List[str]) -> bool: pass ```","solution":"def can_form_word_square(words): Determines if the given list of words can form a word square. if not words: return False n = len(words[0]) # check if all words are of the same length if not all(len(word) == n for word in words): return False def is_valid_square(square): for i in range(len(square)): for j in range(len(square)): if square[i][j] != square[j][i]: return False return True def build_square(square, words): if len(square) == n: return is_valid_square(square) for word in words: square.append(word) if build_square(square, words): return True square.pop() return False return build_square([], words)"},{"question":"=====Function Descriptions===== collections.deque A deque is a double-ended queue that supports adding and removing elements from either end in O(1) time complexity. It can be used to implement both stacks and queues. Example Code >>> from collections import deque >>> >>> d = deque() >>> d.append(1) >>> d.append(2) >>> d.append(3) >>> print(d) deque([1, 2, 3]) >>> d.appendleft(0) >>> print(d) deque([0, 1, 2, 3]) >>> d.pop() >>> print(d) deque([0, 1, 2]) >>> d.popleft() >>> print(d) deque([1, 2]) =====Problem Statement===== You are managing a coffee shop. You have a list of customer orders on a particular day. Your task is to print each unique order in the order it was placed, followed by the number of times it was placed. order = The type of coffee ordered. count = The number of times the coffee was ordered. =====Input Format===== The first line contains the number of orders, N. The next N lines contain the orders, one per line. =====Constraints===== 0 < N ≤ 100 =====Output Format===== Print the order followed by the count of how many times it was ordered, in the order they were placed. Example Input 5 espresso latte cappuccino espresso latte Output espresso 2 latte 2 cappuccino 1","solution":"from collections import deque, defaultdict def process_orders(order_list): order_count = defaultdict(int) order_queue = deque() unique_orders = set() for order in order_list: order_count[order] += 1 if order not in unique_orders: unique_orders.add(order) order_queue.append(order) result = [] while order_queue: order = order_queue.popleft() result.append(f\\"{order} {order_count[order]}\\") return result"},{"question":"You are given a list of words, and your task is to group the words that are anagrams of each other. Anagrams are words that can be formed by rearranging the letters of another word using all the original letters exactly once. The input will be a list of lowercase words. Your code should output a list of groups of anagrams. Each group should contain the words that are anagrams of each other, sorted in lexicographical order. The groups themselves should also be sorted lexicographical order by their first word. # Function Signature ```python def group_anagrams(words: List[str]) -> List[List[str]]: ``` # Input - `words`: A list of strings `words` where `words[i]` is a string of lowercase letters. # Output - A list of lists of strings, where each sublist contains words that are anagrams of each other, sorted in lexicographical order. The groups themselves should also be sorted in lexicographical order by their first word. # Constraints - All the strings in `words` will have the same length. - `1 <= words.length <= 10^4` - `1 <= words[i].length <= 100` # Examples ```python words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] group_anagrams(words) # Output: [[\'ate\', \'eat\', \'tea\'], [\'bat\'], [\'nat\', \'tan\']] words = [\\"\\"] group_anagrams(words) # Output: [[\'\']] words = [\\"a\\"] group_anagrams(words) # Output: [[\'a\']] ```","solution":"from typing import List from collections import defaultdict def group_anagrams(words: List[str]) -> List[List[str]]: Groups the given list of words into anagrams. Args: words (List[str]): A list of strings where each string is made up of lowercase letters. Returns: List[List[str]]: A list of lists, where each sublist contains anagrams sorted lexicographically, and the groups are sorted lexicographically by their first word. # Dictionary to hold the grouped anagrams anagrams = defaultdict(list) # Group words by their sorted tuple of characters for word in words: sorted_word = tuple(sorted(word)) anagrams[sorted_word].append(word) # Prepare the result list, sorting each group and overall by the first word in each group result = [] for group in anagrams.values(): result.append(sorted(group)) return sorted(result, key=lambda x: x[0])"},{"question":"You are developing a logistics management application, and you are tasked with a function that calculates the minimum time required to load and transport boxes from a warehouse to trucks. Each truck is only capable of carrying a weight not exceeding its capacity in a single trip, and a box can only be transported once. Write a function `calculate_min_loading_time` that takes the following inputs: - A list of integers `box_weights` where each integer represents the weight of a box. - An integer `truck_capacity` representing the maximum capacity of a truck per trip. - An integer `loading_time` representing the time it takes to load and transport one truckload of boxes. The function should return the minimum total loading time required to transport all the boxes. Conditions: - If a box\'s weight exceeds the truck capacity, return `\\"error\\"`. - The loading time must be rounded to the nearest whole number. INPUTS: 1. `box_weights`: a list of integers 2. `truck_capacity`: an integer 3. `loading_time`: an integer OUTPUT: A string `\\"error\\"` or the minimum total loading time as an integer. Example: ```python calculate_min_loading_time([5, 8, 2, 9, 6], 10, 3) # returns: 9 (First trip: [5, 2], Second trip: [8], Third trip: [9], Fourth trip: [6]) ```","solution":"def calculate_min_loading_time(box_weights, truck_capacity, loading_time): Returns the minimum total loading time required to transport all the boxes. Parameters: - box_weights: list of integers representing weights of the boxes - truck_capacity: integer representing maximum capacity of a truck per trip - loading_time: integer representing time to load and transport one truckload of boxes Returns: - \\"error\\" if a box\'s weight exceeds truck capacity. - Minimum total loading time as an integer. # Check if any box weight exceeds the truck capacity for weight in box_weights: if weight > truck_capacity: return \\"error\\" # Sort the box weights in ascending order box_weights.sort() # Initialize the total loading time total_loading_time = 0 while box_weights: current_load = 0 # Load the truck while the remaining capacity allows for weight in box_weights[:]: if current_load + weight <= truck_capacity: current_load += weight box_weights.remove(weight) # Increment the total loading time total_loading_time += loading_time return total_loading_time"},{"question":"*FIND THE ISLAND* Given a 2D grid of integers where 1 represents land and 0 represents water, write a function to count the number of separate islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Input: - A 2D list containing integers 0 and 1. Output: - An integer representing the number of islands. Example: ```python grid1 = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1] ] find_islands(grid1) == 3 grid2 = [ [1, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 1, 0] ] find_islands(grid2) == 6 ``` Criteria: - Your function should handle edge cases such as an empty grid or a grid with no land. - Consider the efficiency of your solution, as the grid size can be large.","solution":"def find_islands(grid): Counts the number of islands in the given grid. Args: grid: List[List[int]] - a 2D list of integers where 1 represents land and 0 represents water. Returns: int - the number of separate islands. if not grid: return 0 def dfs(row, col): # Check for boundary conditions and if the cell is land if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or grid[row][col] == 0: return # Mark the cell as visited by setting it to 0 grid[row][col] = 0 # Visit all adjacent directions dfs(row + 1, col) dfs(row - 1, col) dfs(row, col + 1) dfs(row, col - 1) num_islands = 0 for row in range(len(grid)): for col in range(len(grid[0])): if grid[row][col] == 1: num_islands += 1 dfs(row, col) return num_islands"},{"question":"You are given an array of integers. Each integer is to be mapped to its corresponding binary representation. Your task is to determine the minimum number of contiguous subarrays which need to be sorted in non-decreasing order such that the entire array, when concatenated back to its original structure with the sorted subarrays, becomes sorted in non-decreasing order. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_i (0 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the minimum number of contiguous subarrays required. -----Examples----- Input 5 1 2 4 3 5 Output 2 Input 6 1 2 3 4 5 6 Output 1 -----Note----- In the first sample, one minimal way to sort the array is by breaking it into two subarrays: [1, 2, 4] and [3, 5] and then sorting each subarray. This results in [1, 2, 3, 4, 5]. In the second sample, the array is already sorted, so we only need one subarray which is the array itself.","solution":"def min_contiguous_subarrays_to_sort(arr): Returns the minimum number of contiguous subarrays required to be sorted so that the entire array, when concatenated back, becomes sorted in non-decreasing order. n = len(arr) if n <= 1: return 1 count = 1 for i in range(1, n): if arr[i] < arr[i - 1]: count += 1 return count"},{"question":"In a game, a player has to cross a series of steps numbered from 1 to **n**. Each step has a small engraving showing the step number. The player can either move up 1 step or 2 steps at a time. Write a function **step_paths** that calculates the number of different ways the player can reach the top of the nth step. Keep in mind: * If **n <= 0**, return 0 as there are no valid steps. * The function should be implemented efficiently to handle larger values of **n**. Examples: step_paths(1) returns: 1 step_paths(2) returns: 2 step_paths(3) returns: 3 step_paths(4) returns: 5 Explanation: For **step_paths(4)**, the player has 5 ways to reach the top: 1. [1, 1, 1, 1] 2. [1, 1, 2] 3. [1, 2, 1] 4. [2, 1, 1] 5. [2, 2]","solution":"def step_paths(n): Returns the number of different ways the player can reach the top of the nth step. if n <= 0: return 0 if n == 1: return 1 if n == 2: return 2 previous, current = 1, 2 for i in range(3, n + 1): next_step = previous + current previous = current current = next_step return current"},{"question":"Write a function that takes a list of integers as an input, and returns the same list, but with each integer replaced by a representation of its prime factorization. For each integer in the list: 1. If the integer is 1, simply replace it with \\"1\\". 2. If the integer is prime, replace it with the integer itself. 3. If the integer is not prime, replace it with a string representation of its prime factors, where each prime factor is multiplied the number of times it appears. For example: - The prime factorization of 6 is 2*3. - The prime factorization of 12 is 2*2*3. # Input - A list of integers. Each integer `n` will be such that `2 <= n <= 10^6`. # Output - The list with each integer replaced by its prime factorization string or the integer itself. # Example ```python def prime_factorization(lst): # Your code here print(prime_factorization([12, 7, 1, 18])) # Output: [\\"2*2*3\\", 7, \\"1\\", \\"2*3*3\\"] ``` # Constraints - You may assume the input list will contain at least one integer. - Avoid using Python\'s built-in libraries for prime factorization. You must implement the factorization logic yourself.","solution":"def prime_factors(n): Helper function to calculate the prime factors of a given number n i = 2 factors = [] while i * i <= n: while (n % i) == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors def prime_factorization(lst): Replaces each integer in the list by its prime factorization string or the integer itself result = [] for num in lst: if num == 1: result.append(\\"1\\") else: factors = prime_factors(num) if len(factors) == 1: result.append(num) else: result.append(\\"*\\".join(map(str, factors))) return result"},{"question":"Write a function `calculate_hypotenuse` that takes the lengths of the two shorter sides of a right-angled triangle as parameters (a and b). The function should return the length of the hypotenuse, rounded to two decimal places. Use the Pythagorean theorem to solve this problem (`a² + b² = c²`). If you complete this kata and there are no issues, please remember to give it a ready vote and a difficulty rating. :)","solution":"import math def calculate_hypotenuse(a, b): Returns the hypotenuse of a right-angled triangle given the lengths of the two shorter sides, a and b. hypotenuse = math.sqrt(a**2 + b**2) return round(hypotenuse, 2)"},{"question":"A matrix diagonal is a diagonal line of cells starting from one corner of the matrix and ending at the opposite corner. Diagonals can start from any element of the first row or first column of a matrix and extend to the end of the matrix. Create a function ```checkMatrixDiagonal(matrix)``` that verifies if all diagonals in a given MxN matrix contain the same value. For example, given the following matrix: ``` 1 2 3 4 1 2 5 4 1 ``` All the diagonals contain the same values: - Diagonal starting at (0,0): 1 -> 1 -> 1 - Diagonal starting at (0,1): 2 -> 2 - Diagonal starting at (0,2): 3 - Diagonal starting at (1,0): 4 -> 4 - Diagonal starting at (2,0): 5 Thus, your function should return ```true``` for this matrix. Steps: 1. The function should iterate over the matrix starting at each element of the first row and each element of the first column. 2. For each starting element, it should traverse the matrix diagonally to check if all elements in that diagonal are the same. 3. If any diagonal has different values, return ```false```. 4. If all diagonals have the same value, return ```true```. You can assume that the function will receive a non-empty matrix. Function Signature: ```def checkMatrixDiagonal(matrix: List[List[int]]) -> bool:```","solution":"from typing import List def checkMatrixDiagonal(matrix: List[List[int]]) -> bool: def check_diagonal(i, j): value = matrix[i][j] while i < len(matrix) and j < len(matrix[0]): if matrix[i][j] != value: return False i += 1 j += 1 return True # Check diagonals starting from the first row for j in range(len(matrix[0])): if not check_diagonal(0, j): return False # Check diagonals starting from the first column (excluding the top-left element as it was already checked) for i in range(1, len(matrix)): if not check_diagonal(i, 0): return False return True"},{"question":"The code provided is meant to find the maximum number in a given list of integers `numbers` and return both the maximum number and its index in the list. However, it is not functioning correctly. # Task Fix the bug in the code so that it correctly identifies and returns the maximum number along with its index. # Notes - The list `numbers` will always contain at least one integer. - Return a tuple containing two elements: the maximum number and its index in the list.","solution":"def find_max_and_index(numbers): Find the maximum number in a list and return it along with its index. Parameters: numbers (list): A list of integers Returns: tuple: A tuple containing the maximum number and its index max_number = numbers[0] max_index = 0 for index, number in enumerate(numbers): if number > max_number: max_number = number max_index = index return max_number, max_index"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, you need to process multiple queries. Each query consists of two integers `L` and `R` (1-based indexes). For each query, you are required to find the largest element in the subarray `arr[L:R]` that is strictly less than `k`. If no such element exists, return `-1` for that query. -----Input:----- - The first line will contain two space-separated integers, n (the size of the array) and q (the number of queries). - The second line will contain n space-separated integers, the elements of the array `arr`. - The next q lines will each contain two space-separated integers, L and R representing a query. -----Output:----- For each query, output the result in a new line. -----Constraints----- - 1 leq n leq 10^5 - 1 leq q leq 10^5 - 1 leq arr[i] leq 10^9 - 1 leq L leq R leq n - 1 leq k leq 10^9 -----Example Input:----- 8 3 3 5 7 2 8 10 6 9 1 4 2 6 3 8 -----Example Output:----- 5 7 9 -----Explanation:----- For the first query, the subarray is [3, 5, 7, 2]. The largest element less than k (let\'s assume k = 6 for this explanation) is 5. For the second query, the subarray is [5, 7, 2, 8, 10]. The largest element less than 6 is 5. For the third query, the subarray is [7, 2, 8, 10, 6, 9]. The largest element less than 6 is the element 9.","solution":"def find_largest_in_subarray_less_than_k(arr, queries, k): Function to process the queries to find the largest element in a subarray less than k. results = [] for L, R in queries: max_element = -1 for i in range(L-1, R): if arr[i] < k: max_element = max(max_element, arr[i]) results.append(max_element) return results"},{"question":"Harry the Coder has a problem with understanding prime numbers. He recently learned that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. Harry is now curious about prime factors and wants to find the largest prime factor of a given number n. Help Harry by writing a function that takes an integer n and returns its largest prime factor. -----Input----- The single line contains an integer n (2 ≤ n ≤ 10^12). -----Output----- Output a single integer, the largest prime factor of n. -----Examples----- Input 13195 Output 29 Input 17 Output 17 -----Note----- In the first sample, the prime factors of 13195 are 5, 7, 13, and 29; the largest prime factor is 29. In the second sample, the only prime factor of 17 is itself, so the largest prime factor is 17.","solution":"def largest_prime_factor(n): Returns the largest prime factor of the given number n. # Initialize the smallest prime factor max_prime = -1 # Check the number of 2s that divide n while n % 2 == 0: max_prime = 2 n //= 2 # n must be odd at this point. So starting from 3, check for factors incrementing by 2 for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: max_prime = i n //= i # If n is a prime number > 2 if n > 2: max_prime = n return max_prime"},{"question":"*Let\'s help Lucy segregate her fruit inventory efficiently by identifying the type of each fruit based on its properties. We have three categories of fruits: citrus, berries, and tropical fruits.* You will create two string methods: - **isCitrus/is_citrus**: matches the fruits \\"orange\\", \\"lime\\", \\"lemon\\", \\"grapefruit\\", or \\"mandarin\\". - **isBerry/is_berry**: matches the fruits \\"strawberry\\", \\"blueberry\\", \\"raspberry\\", \\"blackberry\\", or \\"cranberry\\". - **isTropical/is_tropical**: matches the fruits \\"mango\\", \\"papaya\\", \\"pineapple\\", \\"banana\\", or \\"coconut\\". *Note that this is not a general fruit classifier. It is designed specifically for Lucy\'s inventory that only includes the fruits listed above.* **Rules** 1. It should return true or false, simply. 2. Fruit names should be case insensitive. The functions should work regardless of whether the fruit names are in uppercase, lowercase, or a mixture of both. 3. Only fruit names listed should be considered. Any other input should return false. Good luck!","solution":"def is_citrus(fruit): Checks if the fruit is a citrus fruit. citrus_fruits = [\\"orange\\", \\"lime\\", \\"lemon\\", \\"grapefruit\\", \\"mandarin\\"] return fruit.lower() in citrus_fruits def is_berry(fruit): Checks if the fruit is a berry. berry_fruits = [\\"strawberry\\", \\"blueberry\\", \\"raspberry\\", \\"blackberry\\", \\"cranberry\\"] return fruit.lower() in berry_fruits def is_tropical(fruit): Checks if the fruit is a tropical fruit. tropical_fruits = [\\"mango\\", \\"papaya\\", \\"pineapple\\", \\"banana\\", \\"coconut\\"] return fruit.lower() in tropical_fruits"},{"question":"Implement a function `find_missing_number(arr)` which takes an array of unique integers that are sorted in an increasing order. This array contains consecutive numbers from 1 to n, but exactly one number is missing. Your task is to identify and return the missing number. Examples: ```python find_missing_number([1, 2, 4, 5, 6]) == 3 find_missing_number([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]) == 15 ```","solution":"def find_missing_number(arr): Given a sorted array of unique integers from 1 to n with one number missing, returns the missing number. n = len(arr) + 1 # Calculate the expected sum of first n natural numbers total_sum = n * (n + 1) // 2 # Calculate sum of given array actual_sum = sum(arr) # Missing number is the difference between expected sum and actual sum return total_sum - actual_sum"},{"question":"A group of friends is playing a card game that involves calculating scores based on the number of sequences of consecutive card values they can form from their hands. Each card has a unique value between 1 and N, and each friend is given a hand of M cards. The goal is to determine the maximum length of a sequence of consecutive card values that each friend can form from their hand. -----Input----- - The first line of input contains a single integer T, denoting the number of friends (test cases). The description of T test cases follows. - The first line of each test case contains two integers N and M, denoting the number of unique card values and the number of cards in the friend\'s hand respectively. - The second line of each test case contains M integers, representing the values of the cards in the friend\'s hand. -----Output----- For each test case, print a single line containing one integer ― the length of the longest sequence of consecutive card values that the friend can form from their hand. -----Constraints----- - 1 le T le 10^4 - 1 le N le 10^5 - 1 le M le N - Card values are between 1 and N inclusive -----Example Input----- 3 10 6 1 3 5 4 2 6 15 5 1 5 9 3 12 20 4 10 11 13 14 -----Example Output----- 6 1 2 -----Explanation----- Example case 1: The cards are {1, 3, 5, 4, 2, 6}, so the longest sequence of consecutive card values is {1, 2, 3, 4, 5, 6}, which has a length of 6. Example case 2: The cards are {1, 5, 9, 3, 12}, so the longest sequence of consecutive card values is just {[1],[5],[9],[12],[3]}, each sequence has a length of 1. Example case 3: The cards are {10, 11, 13, 14}, so the longest sequence of consecutive card values is {13,14}, which has a length of 2.","solution":"def max_sequence_length(N, M, cards): Returns the length of the longest sequence of consecutive card values that can be formed from the given hand. if M == 0: return 0 cards = sorted(set(cards)) # Remove duplicates and sort the cards max_len = 1 current_len = 1 for i in range(1, len(cards)): if cards[i] == cards[i - 1] + 1: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) # Update max_len for the last sequence return max_len"},{"question":"# Problem Statement: Given an array of integers `nums` sorted in ascending order, and an integer `target`, implement a function `searchInsert` that returns the index where `target` should be inserted in the sorted array. The function should return the index of the `target` if it is found in the array. If not, it should return the index where the `target` would be inserted to maintain the order. You must write an algorithm with O(log n) runtime complexity. Example 1: Input: nums = [1,3,5,6], target = 5 Output: 2 Example 2: Input: nums = [1,3,5,6], target = 2 Output: 1 Example 3: Input: nums = [1,3,5,6], target = 7 Output: 4 Example 4: Input: nums = [1,3,5,6], target = 0 Output: 0 Example 5: Input: nums = [1], target = 0 Output: 0 Constraints: - `1 <= nums.length <= 10000` - `-10000 <= nums[i] <= 10000` - `nums` contains no duplicates. - `-10000 <= target <= 10000`","solution":"def searchInsert(nums, target): Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. :param nums: List[int] - a sorted list of integers :param target: int - the target integer to find or to insert :return: int - the index if the target is found, or the index where it should be inserted left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"=====Problem Statement===== You are given a string S. Your task is to determine the number of distinct vowels (a, e, i, o, u) present in the string S. =====Input Format===== A single line containing a string S. =====Constraints===== 0 < len(S) < 1000 =====Output Format===== Print a single integer denoting the number of distinct vowels in the string S. =====Sample Input===== Hello World =====Sample Output===== 2 =====Explanation===== In the string \\"Hello World\\", there are two distinct vowels: \'e\' and \'o\'. Hence, the output is 2. =====Note===== - The input string S can contain both uppercase and lowercase letters. - Only consider vowels (a, e, i, o, u) regardless of their case.","solution":"def count_distinct_vowels(s): Returns the number of distinct vowels in the string s. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} found_vowels = set() for char in s.lower(): if char in vowels: found_vowels.add(char) return len(found_vowels)"},{"question":"Implement a class that manages a collection of books in a library and provides an API for adding, removing, searching, and listing books based on various criteria. Class Library: Library() constructs an instance of the Library class; add_book(String title, String author, int year) adds a book with the given title, author, and publication year to the library; remove_book(String title) removes a book with the specified title from the library; search_by_title(String title) searches for books with titles containing the given substring (case-insensitive) and returns a list of matching books sorted by title; search_by_author(String author) searches for books by the specified author and returns a list of matching books sorted by title; list_books_by_year(int year) lists all books published in the given year, sorted by title; Each book is represented as a dictionary with keys \\"title\\", \\"author\\", and \\"year\\". Example: Library library = new Library(); library.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925); library.add_book(\\"1984\\", \\"George Orwell\\", 1949); library.add_book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960); library.add_book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951); library.search_by_title(\\"The\\"); // returns [{\\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}] library.search_by_author(\\"George Orwell\\"); // returns [{\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}] library.list_books_by_year(1925); // returns [{\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925}] library.remove_book(\\"1984\\"); library.search_by_author(\\"George Orwell\\"); // returns [] Constraints: All titles and authors are strings of length 1 to 100 containing only alphanumeric characters and spaces. Year is an integer between 0 and 9999. The number of books in the library does not exceed 10000.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year): Adds a book to the library. book = {\\"title\\": title, \\"author\\": author, \\"year\\": year} self.books.append(book) def remove_book(self, title): Removes a book with the specified title from the library. self.books = [book for book in self.books if book[\\"title\\"].lower() != title.lower()] def search_by_title(self, title): Searches for books with titles containing the given substring. matches = [book for book in self.books if title.lower() in book[\\"title\\"].lower()] return sorted(matches, key=lambda x: x[\'title\']) def search_by_author(self, author): Searches for books by the specified author. matches = [book for book in self.books if author.lower() in book[\\"author\\"].lower()] return sorted(matches, key=lambda x: x[\'title\']) def list_books_by_year(self, year): Lists all books published in the given year. matches = [book for book in self.books if book[\\"year\\"] == year] return sorted(matches, key=lambda x: x[\'title\'])"},{"question":"John is planning a virtual event for his company. To make sure that every team member gets equal screen time, he decides to create a new schedule format. Each team member is allocated a certain amount of time for their segment. However, John notices that sometimes the segments for different team members overlap. He wants to adjust segments so that no two segments overlap and every segment remains as close as possible to its original start time. Given a list of segments with their start and end times, the task is to modify the segments such that none of them overlap and they retain the maximum possible length by adjusting the start and end times. If there\'s a tie (multiple possible choices to adjust the segment), choose the one which is alphabetically superior (i.e., comes first lexicographically). -----Input----- The first line of the input contains an integer N denoting the number of team members. The next N lines contain the name of the team member followed by the start and end time of their segment (in 24-hour format, hh:mm). -----Output----- For each team member in the input order, output the name of the team member, followed by the adjusted start and end time of their segment, such that no two segments overlap. -----Constraints----- - 1 ≤ N ≤ 10^3 - The start and end time are given in \\"hh:mm\\" format and 00:00 ≤ hh:mm < 24:00. - Each team member\'s name consists of lowercase alphabets and has length between 1 to 100. -----Example----- Input: 3 john 10:00 11:00 jane 10:30 11:30 doe 11:00 12:00 Output: john 10:00 11:00 jane 11:00 12:00 doe 12:00 13:00","solution":"from datetime import datetime, timedelta def adjust_segments(segments): # Convert time to datetime objects for easier manipulation time_format = \\"%H:%M\\" for segment in segments: segment[\\"start\\"] = datetime.strptime(segment[\\"start\\"], time_format) segment[\\"end\\"] = datetime.strptime(segment[\\"end\\"], time_format) # Sort the segments by their original start times, breaking ties alphabetically by name segments.sort(key=lambda x: (x[\\"start\\"], x[\\"name\\"])) adjusted_segments = [] last_end_time = None for segment in segments: if last_end_time is None: adjusted_segments.append(segment) last_end_time = segment[\\"end\\"] else: if segment[\\"start\\"] < last_end_time: diff = last_end_time - segment[\\"start\\"] duration = segment[\\"end\\"] - segment[\\"start\\"] segment[\\"start\\"] = last_end_time segment[\\"end\\"] = segment[\\"start\\"] + duration adjusted_segments.append(segment) last_end_time = segment[\\"end\\"] # Convert the times back to hh:mm format for segment in adjusted_segments: segment[\\"start\\"] = segment[\\"start\\"].strftime(time_format) segment[\\"end\\"] = segment[\\"end\\"].strftime(time_format) return adjusted_segments def parse_input(input_text): lines = input_text.strip().split(\\"n\\") n = int(lines[0]) segments = [] for i in range(1, n + 1): parts = lines[i].split() name = parts[0] start = parts[1] end = parts[2] segments.append({\\"name\\": name, \\"start\\": start, \\"end\\": end}) return segments def format_output(segments): return \\"n\\".join([f\\"{segment[\'name\']} {segment[\'start\']} {segment[\'end\']}\\" for segment in segments]) # Main function to handle input and output. def main(input_text): segments = parse_input(input_text) adjusted_segments = adjust_segments(segments) return format_output(adjusted_segments)"},{"question":"You are given a list of integers representing the prices of different stocks on different days. Your task is to find out the maximum profit you can achieve by performing a single buy and sell operation. You must buy the stock before you can sell it, and you can perform at most one transaction. Return the maximum profit you can achieve from this transaction. If no profit is possible, return 0. Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Example 3: Input: prices = [3, 2, 4, 8, 7, 6] Output: 6 Explanation: Buy on day 2 (price = 2) and sell on day 4 (price = 8), profit = 8-2 = 6. Example 4: Input: prices = [1] Output: 0 Explanation: There is only one price and no transaction is possible. Constraints: * 1 <= prices.length <= 10^5 * 0 <= prices[i] <= 10^4","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell operation on given stock prices. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function that takes an alphanumeric string and returns the sum of the numbers embedded in the string. Your function will receive 1 argument: an alphanumeric string. Assumptions: * The input string will contain both letters and digits. * Numbers in the string can be of any length greater than zero. * The function should ignore any letters and sum only the numbers. Examples: ```python sum_numbers(\\"abc123xyz\\") ==> returns 123 sum_numbers(\\"aa11b33\\") ==> returns 44 sum_numbers(\\"7abc98xy2z\\") ==> returns 107 ```","solution":"import re def sum_numbers(s): Returns the sum of all the numbers embedded in the alphanumeric string. numbers = re.findall(r\'d+\', s) return sum(int(num) for num in numbers)"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains an integer value which represents the height of that cell. You need to find the path from the top-left corner (1, 1) to the bottom-right corner (n, m) such that the maximum absolute difference in heights between any two consecutive cells in the path is minimized. You are allowed to move to a cell only in the following directions: 1. Right 2. Down Your task is to determine the minimum possible maximum absolute difference in heights between any two consecutive cells for a path that goes from (1, 1) to (n, m). **Input** The first line contains an integer t (1 leq t leq 1000) — the number of test cases. For each test case: - The first line contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid. - The next n lines contain m integers each, representing the heights of the cells. **Output** For each test case, print a single integer — the minimum possible maximum absolute difference in heights between any two consecutive cells for a path from (1, 1) to (n, m). **Example** Input: ``` 2 2 2 1 3 4 2 3 3 8 5 9 7 3 6 2 4 1 ``` Output: ``` 2 3 ``` **Explanation** In the first test case, the optimal path is (1,1) -> (1,2) -> (2,2) with height differences 2 and 1, hence the maximum difference is 2. In the second test case, the optimal path is (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) with height differences 1, 2, 1, 3, hence the maximum difference is 3.","solution":"import heapq def min_max_diff(grid, n, m): directions = [(0, 1), (1, 0)] max_diff = [[float(\'inf\')] * m for _ in range(n)] max_diff[0][0] = 0 heap = [(0, 0, 0)] while heap: diff, x, y = heapq.heappop(heap) if (x, y) == (n - 1, m - 1): return diff for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_diff = max(diff, abs(grid[nx][ny] - grid[x][y])) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heapq.heappush(heap, (new_diff, nx, ny)) return -1 def solve(t, test_cases): results = [] for case in test_cases: n, m, grid = case results.append(min_max_diff(grid, n, m)) return results # Parsing input def parse_input(input_string): data = input_string.split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) index += 2 grid = [] for i in range(n): grid.append(list(map(int, data[index:index + m]))) index += m test_cases.append((n, m, grid)) return t, test_cases input_string = 2 2 2 1 3 4 2 3 3 8 5 9 7 3 6 2 4 1 t, test_cases = parse_input(input_string) output = solve(t, test_cases) for result in output: print(result)"},{"question":"You are given a rectangular bar of chocolate which is divided into smaller square chunks. Your task is to break the chocolate into individual chunks. Each break of the chocolate bar can split it into two smaller rectangles. Determine the minimum number of breaks required to split the chocolate bar into n rows and m columns of individual chunks. For example, given a 2x3 chocolate bar (2 rows and 3 columns), you need to break it into 6 individual pieces. The minimum number of breaks needed will be 5. The objective is to write a function `minimumBreaks(n, m)` that receives two integers n and m, and returns the minimum number of breaks required to split the chocolate bar into n * m individual chunks. Examples: ``` minimumBreaks(2, 3) --> 5 minimumBreaks(1, 1) --> 0 minimumBreaks(4, 4) --> 15 minimumBreaks(3, 1) --> 2 minimumBreaks(1, 5) --> 4 ``` Constraints: - `n` and `m` are positive integers. - 1 <= `n`, `m` <= 10^9","solution":"def minimumBreaks(n, m): Returns the minimum number of breaks required to split an n by m chocolate bar into individual chunks. # The minimum number of breaks required to split an n * m chocolate bar into # individual pieces is (n * m) - 1 return (n * m) - 1"},{"question":"Sort array by frequency Write a function that takes an array of integers as input and returns the array sorted by the frequency of the numbers in descending order. In case of a tie, numbers with the same frequency should be sorted in ascending order. **For example:** Given the input array: `[3, 3, 2, 1, 2, 2, 4]` The output should be: `[2, 2, 2, 3, 3, 1, 4]` **Function Signature** ```python def sort_by_frequency(arr: List[int]) -> List[int]: pass ``` **Input Constraints:** - The array will have at least 1 element and at most 10^5 elements. - The elements in the array will be between -10^5 and 10^5 inclusive. **Output Constraints:** - Return a list of integers sorted by frequency as described above. **Examples:** ```python assert sort_by_frequency([3, 3, 2, 1, 2, 2, 4]) == [2, 2, 2, 3, 3, 1, 4] assert sort_by_frequency([1]) == [1] assert sort_by_frequency([4,4,4,3,3,2]) == [4, 4, 4, 3, 3, 2] ```","solution":"from typing import List from collections import Counter def sort_by_frequency(arr: List[int]) -> List[int]: Sort the array by frequency of elements in descending order. In case of a tie, elements are sorted by value in ascending order. # Count the frequency of each element in the array freq = Counter(arr) # Sort by frequency (in descending order) and then by number (in ascending order) sorted_arr = sorted(arr, key=lambda x: (-freq[x], x)) return sorted_arr"},{"question":"# Flight Booking System - Data Management #1 Airlines need an efficient way to manage their flight bookings. Your job is to develop a minimal booking system that keeps track of the passengers for each flight. # Task Your task is to finish the FlightBooking object that allows adding and removing passengers from flights, and listing all passengers of a particular flight. The Flights will be uniquely identified by flight numbers. # Functions 1. `void add_passenger(flight_number: str, passenger_name: str)`: - Adds a passenger to the flight. - If the passenger is already added to the flight, do nothing. 2. `void remove_passenger(flight_number: str, passenger_name: str)`: - Removes a passenger from the flight. - If the passenger is not found in the flight, do nothing. 3. `List<string> list_passengers(flight_number: str)`: - Returns a list of names of passengers on the specified flight. - If the flight has no passengers, return an empty list. # Requirements - Ensure each flight can hold a dynamic number of passengers. - Maintain a proper data structure to efficiently handle the addition, removal, and listing operations. # Example ```python # FlightBooking object initialization booking_system = FlightBooking() # Add passengers to flight number \'AA123\' booking_system.add_passenger(\'AA123\', \'John Doe\') booking_system.add_passenger(\'AA123\', \'Jane Doe\') # List passengers for flight number \'AA123\' print(booking_system.list_passengers(\'AA123\')) # Output: [\'John Doe\', \'Jane Doe\'] # Remove a passenger from flight number \'AA123\' booking_system.remove_passenger(\'AA123\', \'John Doe\') # List passengers again to check removal print(booking_system.list_passengers(\'AA123\')) # Output: [\'Jane Doe\'] ``` Ensure your implementation is efficient and consider edge cases like adding or removing passengers that do not exist.","solution":"class FlightBooking: def __init__(self): self.flights = {} def add_passenger(self, flight_number: str, passenger_name: str): if flight_number not in self.flights: self.flights[flight_number] = set() self.flights[flight_number].add(passenger_name) def remove_passenger(self, flight_number: str, passenger_name: str): if flight_number in self.flights: self.flights[flight_number].discard(passenger_name) def list_passengers(self, flight_number: str): if flight_number in self.flights: return list(self.flights[flight_number]) return []"},{"question":"Given an array of integers arr, find the length of the longest subarray, which contains an equal number of 0s and 1s. Example 1: Input: arr = [0,1] Output: 2 Explanation: [0, 1] is the longest subarray with equal number of 0s and 1s. Example 2: Input: arr = [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is the longest subarray with equal number of 0s and 1s. Example 3: Input: arr = [0,0,1,0,0,0,1,1] Output: 6 Explanation: The longest subarray is [0, 0, 1, 0, 0, 0, 1, 1] with length 6. Example 4: Input: arr = [1,1,1,1] Output: 0 Explanation: There are no subarrays with equal number of 0s and 1s. Example 5: Input: arr = [0, 0, 0, 1, 1] Output: 4 Constraints: 1 <= arr.length <= 100000 arr[i] is either 0 or 1","solution":"def findMaxLength(nums): Given a binary array nums, returns the maximum length of a contiguous subarray with an equal number of 0 and 1. count = 0 max_length = 0 count_dict = {0: -1} for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length"},{"question":"You are given a robot that is starting at the origin (0, 0) on a 2D coordinate plane. The robot can receive a string of commands where each character corresponds to a movement: - \'U\' -> Move up by 1 unit. - \'D\' -> Move down by 1 unit. - \'L\' -> Move left by 1 unit. - \'R\' -> Move right by 1 unit. The robot can also have an additional command \'S\' which will command the robot to stay in its current position. Determine if the robot returns to the origin after executing all the commands in the given string. Example 1: Input: \\"UD\\" Output: true Explanation: The robot moves up once, and then down once. It returns to the origin. Example 2: Input: \\"LL\\" Output: false Explanation: The robot moves left twice. It does not return to the origin. Example 3: Input: \\"URDL\\" Output: true Explanation: The robot moves up, right, down, and then left, returning to the origin. Example 4: Input: \\"SSSS\\" Output: true Explanation: The robot stays in the same position throughout. Note: The input command string will be a non-empty string of length between 1 and 10000. All characters in the input string will be one of {\'U\', \'D\', \'L\', \'R\', \'S\'}.","solution":"def is_back_to_origin(commands): Determines if the robot returns to the origin after executing all the commands. :param commands: String of commands consisting of \'U\', \'D\', \'L\', \'R\', \'S\' :return: Boolean value indicating whether the robot returns to the origin x, y = 0, 0 # Starting point for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 # \'S\' means stay, so no action needed return x == 0 and y == 0"},{"question":"You are tasked with implementing a feature for a library system to manage book borrowings. Each book has a unique ID and a specific due date. However, some books are returned late. Your task is to determine how many books are returned after their due dates. For each transaction in the system, you are given the ID of the book, the date it was borrowed, the expected due date, and the actual return date. You need to count how many books were returned late. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N representing the number of books. - N lines follow. For each of the N lines, there are three space-separated dates: - The first date B_i is the borrowed date. - The second date D_i is the due date. - The third date R_i is the return date. All dates are given in the format YYYY-MM-DD. -----Output----- For each test case, print a single line containing one integer — the number of books that were returned after their respective due dates. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - Dates are valid and follow the format YYYY-MM-DD. -----Example Input----- 2 3 2023-01-01 2023-01-05 2023-01-04 2023-01-01 2023-01-10 2023-01-12 2023-01-01 2023-01-20 2023-01-20 2 2023-02-01 2023-02-05 2023-02-06 2023-02-10 2023-02-15 2023-02-14 -----Example Output----- 1 1 -----Explanation----- In the first test case: - The first book is returned early. - The second book is returned late by 2 days. - The third book is returned on time. Therefore, the number of late returns is 1. In the second test case: - The first book is returned late by 1 day. - The second book is returned on time. Therefore, the number of late returns is 1.","solution":"from datetime import datetime def count_late_returns(test_cases): late_returns = [] for case in test_cases: N = case[0] transactions = case[1] late_count = 0 for transaction in transactions: borrow_date, due_date, return_date = transaction due_date = datetime.strptime(due_date, \'%Y-%m-%d\') return_date = datetime.strptime(return_date, \'%Y-%m-%d\') if return_date > due_date: late_count += 1 late_returns.append(late_count) return late_returns"},{"question":"A group of intrepid archaeologists is exploring a large rectangular grid that contains ancient artifacts. They want to examine as many distinct rows and columns as possible among the identified rectangular regions. Help the archaeologists by finding the maximum number of non-overlapping rectangles that can be placed in the given grid such that each rectangle covers at least one artifact. A rectangle can cover multiple artifacts but must be distinct from other rectangles. -----Input----- The first line contains two integers M and N, the dimensions of the grid. The next M lines contain N characters each, forming the grid matrix. Each character is either \'.\' (empty cell) or \'A\' (artifact). -----Output----- Output an integer representing the maximum number of non-overlapping rectangles that can be placed in the grid. -----Constraints----- 1 <= M, N <= 50 -----Example----- Input: 5 6 ...... .AAA.. ...... ....A. ..AAAA Output: 4 -----Explanation----- One way to place 4 rectangles is: 1. Covering (2, 2) to (2, 4) 2. Covering (5, 3) to (5, 6) 3. Covering (4, 5) to (4, 5) 4. Covering (5, 4) to (5, 5) Each rectangle is distinct and does not overlap with another rectangle.","solution":"def max_non_overlapping_rectangles(M, N, grid): def find_rectangles(grid): visited = [[False] * N for _ in range(M)] rectangles = [] for i in range(M): for j in range(N): if grid[i][j] == \'A\' and not visited[i][j]: top, left = i, j # Find the bottom row of the rectangle bottom = top while bottom + 1 < M and grid[bottom + 1][j] == \'A\' and not visited[bottom + 1][j]: bottom += 1 # Find the right column of the rectangle right = left while right + 1 < N and grid[i][right + 1] == \'A\' and not visited[i][right + 1]: right += 1 # Mark all cells in this rectangle as visited for r in range(top, bottom + 1): for c in range(left, right + 1): visited[r][c] = True rectangles.append((top, bottom, left, right)) return rectangles rectangles = find_rectangles(grid) return len(rectangles)"},{"question":"Alice and Bob are playing a game using a set of unique tokens. Each token has a unique integer value from 1 to n. The tokens are initially divided between the two players such that each player has at least one token and no tokens are shared between them. The players take turns in playing a token, starting with Alice. On each turn, the current player plays one token from their collection. The player with the highest token value wins the round, adding both tokens to their collection, and the game continues until one player has all the tokens, thus winning the game. Alice and Bob always play their highest-value token if they have more than one token, and they aim to win the game. Can you determine who will win the game, assuming both play optimally? -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of three lines. The first line contains three integers n, m_a, m_b (2 le n le 100, 1 le m_a le n - 1, 1 le m_b le n - 1, m_a + m_b = n) — the total number of tokens, the number of tokens initially owned by Alice, and the number of tokens initially owned by Bob, respectively. The second line contains m_a integers a_1, dots, a_{m_a} (1 le a_i le n) — the tokens initially owned by Alice. The third line contains m_b integers b_1, dots, b_{m_b} (1 le b_i le n) — the tokens initially owned by Bob. It\'s guaranteed that all tokens held by both players are distinct, meaning no two tokens have the same value and each token is owned by exactly one player. -----Output----- For each test case, output \\"Alice\\" if Alice wins, and \\"Bob\\" if Bob wins. -----Example----- Input 2 2 1 1 2 1 3 2 1 3 1 2 Output Alice Bob -----Note----- In the first test case, Alice has the token with value 2 and Bob has the token with value 1. Alice plays her token, which is higher than any token Bob can play, so Alice wins. In the second test case, Alice has tokens 3 and 1 while Bob has tokens 2 and 1. Alice plays her highest-valued token, 3. Bob plays his only token 2 and loses the round. Now Alice has tokens 1, 2, and 3, and Bob has no tokens left. Thus, Alice wins.","solution":"def who_wins(t, test_cases): results = [] for i in range(t): n, m_a, m_b = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] # Determine who has the highest token if max(a) > max(b): results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"The Mystic Forest is a network of enchanted paths connecting ancient trees. There are n trees, each with a magical power level assigned to it. The paths between the trees are unidirectional and form a directed acyclic graph (DAG). You are a mystic warrior who needs to absorb power by visiting trees along any path from a starting tree. Given that you can start your journey from any tree and move along the directed paths, calculate the maximum total power you can absorb on any path. -----Input:----- - The first line contains two integers, n (number of trees) and m (number of paths). - The second line contains n space-separated integers, denoting the magical power levels of the trees. - Each of the next m lines contains two integers u and v, representing a directed path from tree u to tree v (1-indexed). -----Output:----- The maximum magical power obtainable along any path. -----Constraints----- - 1 <= n <= 10^5 - 1 <= m <= 2*10^5 - 1 <= Power levels <= 10^4 -----Sample Input:----- 5 6 10 20 30 40 50 1 2 2 3 2 4 3 5 4 5 1 3 -----Sample Output:----- 120 -----Explanation:----- One of the paths that gives the maximum power absorption is 1 -> 2 -> 4 -> 5, where the total power is 10 + 20 + 40 + 50 = 120. Another way to obtain the maximum power is the path 1 -> 3 -> 5, which also results in 10 + 30 + 50 = 90. The path through the maximum total power is chosen.","solution":"from collections import defaultdict, deque def max_power(n, m, power_levels, edges): graph = defaultdict(list) in_degree = [0] * n # Build the graph for u, v in edges: graph[u - 1].append(v - 1) in_degree[v - 1] += 1 # Topological Sort using Kahn\'s Algorithm topo_order = [] zero_in_degree_queue = deque([i for i in range(n) if in_degree[i] == 0]) while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Dynamic Programming to find the maximum path weight max_power_path = [0] * n for node in topo_order: max_power_path[node] = max(max_power_path[node], power_levels[node]) for neighbor in graph[node]: max_power_path[neighbor] = max(max_power_path[neighbor], max_power_path[node] + power_levels[neighbor]) return max(max_power_path)"},{"question":"You are given a string representing a sequence of colored beads threaded together. The beads can be of four colors: \'R\' (red), \'G\' (green), \'B\' (blue), and \'Y\' (yellow). A valid necklace must adhere to the following rules: 1. No two adjacent beads can be of the same color. 2. The necklace must form a loop, meaning the first and last beads must also follow rule 1. Write a function to check if a given string representing a necklace is valid based on the above rules. The function should return \\"True\\" if the necklace is valid and \\"False\\" otherwise. The input string will have at least 3 beads and will only contain the characters \'R\', \'G\', \'B\', and \'Y\'.","solution":"def is_valid_necklace(necklace): Check if the given necklace is valid. :param necklace: A string representing the sequence of colored beads. :return: \\"True\\" if the necklace is valid, \\"False\\" otherwise. n = len(necklace) # Check all adjacent beads for i in range(n): if necklace[i] == necklace[(i + 1) % n]: return False return True"},{"question":"In this problem, you are tasked with writing a function that finds all pairs of positive integers `(a, b)` such that for a given positive integer `m`, the following equation holds true: ``` a^3 + b^3 = m ``` The function should return a list of tuples `(a, b)` where `a` and `b` are integers and `a <= b`. If there are no such pairs, the function should return an empty list. The order of the pairs in the output list does not matter. # Constraints: - `1 <= m <= 10^6` # Examples: ``` findCubics(9) --> [(1, 2)] findCubics(28) --> [(1, 3)] findCubics(1729) --> [(1, 12), (9, 10)] findCubics(1000) --> [] ``` Hint: Consider iterating only up to the cube root of `m` to find the potential values of `a` and `b`.","solution":"def findCubics(m): Returns all pairs of positive integers (a, b) such that a^3 + b^3 = m and a <= b. result = [] # We only need to check until the cube root of m a = 1 while a**3 <= m: b = 1 while b**3 <= m: if a**3 + b**3 == m and a <= b: result.append((a, b)) b += 1 a += 1 return result"},{"question":"Given an unsorted array **nums**, reorder it in-place such that all occurrences of the most frequent element come first, followed by occurrences of the second most frequent element, and so on. The order of the elements within the same frequency should remain the same as the original order. Example 1: Input: nums = [2, 3, 1, 3, 2, 4, 1, 2] Output: [2, 2, 2, 3, 3, 1, 1, 4] Explanation: - The number 2 occurs 3 times, thus it appears first. - The number 3 occurs 2 times, thus it appears second. - The number 1 occurs 2 times, thus it appears third. - The number 4 occurs 1 time, thus it appears last. - The order within the same frequency is maintained. Example 2: Input: nums = [5, 5, 2, 4, 3, 2, 3, 5] Output: [5, 5, 5, 2, 2, 3, 3, 4] Explanation: - The number 5 occurs 3 times, thus it appears first. - The number 2 occurs 2 times, thus it appears second. - The number 3 occurs 2 times, thus it appears third. - The number 4 occurs 1 time, thus it appears last. - The order within the same frequency is maintained. Example 3: Input: nums = [7, 7, 8, 8, 8, 9] Output: [8, 8, 8, 7, 7, 9] Explanation: - The number 8 occurs 3 times, thus it appears first. - The number 7 occurs 2 times, thus it appears second. - The number 9 occurs 1 time, thus it appears last. - The order within the same frequency is maintained. Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] <= 10^5","solution":"def reorder_by_frequency(nums): Reorder the array such that all occurrences of the most frequent element come first, followed by occurrences of the second most frequent element, and so on. The order of the elements within the same frequency should remain the same as the original order. from collections import Counter # Step 1: Count the frequency of each number freq_count = Counter(nums) # Step 2: Sort numbers by frequency (descending) and then by their first occurrence (ascending) sorted_nums = sorted(nums, key=lambda x: (-freq_count[x], nums.index(x))) return sorted_nums"},{"question":"# Your Task You have been assigned to write a program to help manage inventory in an e-commerce warehouse efficiently. The warehouse receives shipments at the beginning of each day and processes orders throughout the day. Each shipment comes with certain items and gets added to the inventory. Each order may include multiple items and reduces the inventory accordingly. Your task is to simulate this process and report the number of days the warehouse can continue processing orders without running out of any items. # Input - An integer `N` representing the number of different items in the warehouse. - An integer `M` representing the number of days for which you will be given records of shipments and orders. - Two lists of length `M`: - `shipments`: Each element is a list of integers, where the i-th list contains N integers representing the quantity of each item received in the shipment on the i-th day. - `orders`: Each element is a list of integers, where the i-th list contains N integers representing the quantity of each item required to fulfill the orders on the i-th day. # Output - A single integer representing the total number of days the warehouse can fulfill all the orders without any shortage of items. # Constraints - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 0 ≤ quantity of items in shipments and orders ≤ 1000 # Example Input ``` 3 4 [[10, 0, 20], [5, 10, 0], [15, 5, 5], [0, 0, 10]] [[5, 0, 10], [5, 5, 0], [10, 2, 3], [1, 0, 15]] ``` Output ``` 3 ``` Explanation - Day 1: - Initial inventory: [0, 0, 0] - After shipment: [10, 0, 20] - Orders fulfilled: [5, 0, 10] - Remaining inventory: [5, 0, 10] - Day 2: - Inventory: [5, 0, 10] - After shipment: [10, 10, 10] - Orders fulfilled: [5, 5, 0] - Remaining inventory: [5, 5, 10] - Day 3: - Inventory: [5, 5, 10] - After shipment: [20, 10, 15] - Orders fulfilled: [10, 2, 3] - Remaining inventory: [10, 8, 12] - Day 4: - Inventory: [10, 8, 12] - After shipment: [10, 8, 22] - Orders fulfilled: [1, 0, 15] - Remaining inventory: [9, 8, 7] The warehouse can fulfill orders successfully for 4 days. In the given example, the output should be 4.","solution":"def manage_inventory(N, M, shipments, orders): # Initialize inventory with zeros inventory = [0] * N fulfilled_days = 0 for day in range(M): # Add shipment items to inventory for i in range(N): inventory[i] += shipments[day][i] # Check if orders can be fulfilled can_fulfill = True for i in range(N): if inventory[i] < orders[day][i]: can_fulfill = False break if can_fulfill: # Fulfill the orders for i in range(N): inventory[i] -= orders[day][i] fulfilled_days += 1 else: break return fulfilled_days"},{"question":"Given a string ```s``` that represents a sentence, reverse the order of words in the sentence while preserving the whitespace and initial word positions. For example, for ```s = \\" the day is bright\\"```, the output should be ```reverseWords(s) = \\" bright is day the\\"```. Note that sequences of whitespace should be preserved, and the leading and trailing spaces should remain the same. The function should return the new sentence with words reversed but the overall structure and spaces kept intact. S: leetcode.com","solution":"def reverse_words(s): Reverse the order of words in the sentence while preserving the whitespace and initial word positions. Parameters: s (str): The input string sentence. Returns: str: The sentence with the order of words reversed. # Split the string by spaces to get all the segments including empty ones segments = s.split(\' \') # Filter out the empty segments to get the words words = [segment for segment in segments if segment] # Reverse the list of words words.reverse() # Initialize variables result = [] word_index = 0 # Reconstruct the sentence with reversed words and original spaces for segment in segments: if segment == \'\': result.append(\'\') else: result.append(words[word_index]) word_index += 1 return \' \'.join(result)"},{"question":"Given a list of daily stock prices for a certain company, your task is to write a function to calculate the maximum possible profit from buying and selling the stock. You can only complete one transaction: buy one day and sell one another day in the future. # Input ```if-not:c * prices: a list of positive integers representing the stock prices on each day. ``` ```if:c * prices: a pointer to an array of positive integers representing the stock prices on each day. * prices_length: the length of the array that `prices` points to. ``` # Output The function should return an integer, the maximum profit that can be achieved from a single buy-sell transaction. If no profit is possible, return 0. ------------------------------------------- Important **Please look at the examples and clarifications below, to ensure you understand the task correctly :)** ------- # Examples ```python max_profit([7,1,5,3,6,4]) # should return 5 # because buying on day 2 (price=1) and selling on day 5 (price=6) # yields the maximum profit of 6-1 = 5. max_profit([7,6,4,3,1]) # should return 0 # because no transaction is possible that yields a profit. ``` # Clarifications * You can complete at most one transaction (i.e., one buy and one sell). * You cannot sell a stock before you buy one. * If no profit is possible, return 0. * All the prices will be positive integers. # Hints * One straightforward solution is to check every pair of days and calculate the profit, but that might not be efficient for large lists. * Think of using a single pass algorithm to keep track of the minimum price encountered so far and the maximum profit achievable at each day.","solution":"def max_profit(prices): Returns the maximum profit from a single buy-sell transaction. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function that determines the language of a given text snippet. The function should be able to distinguish between English, Spanish, and French. Implement basic keyword detection for simplicity: - English: Identify based on the presence of common English words like \\"the\\", \\"is\\", \\"and\\", \\"love\\". - Spanish: Identify based on common Spanish words like \\"el\\", \\"la\\", \\"es\\", \\"amor\\". - French: Identify based on common French words like \\"le\\", \\"la\\", \\"est\\", \\"amour\\". Your program should accept a string and output the detected language (`\\"English\\"`, `\\"Spanish\\"`, or `\\"French\\"`) based on the frequency of these specific keywords. Handle cases where the text may include words from more than one language by detecting the dominant language based on keyword count.","solution":"def detect_language(text): Determines the language of the given text snippet by identifying the most common words in English, Spanish, and French. english_keywords = [\\"the\\", \\"is\\", \\"and\\", \\"love\\"] spanish_keywords = [\\"el\\", \\"la\\", \\"es\\", \\"amor\\"] french_keywords = [\\"le\\", \\"la\\", \\"est\\", \\"amour\\"] english_count = sum(text.count(word) for word in english_keywords) spanish_count = sum(text.count(word) for word in spanish_keywords) french_count = sum(text.count(word) for word in french_keywords) if english_count > spanish_count and english_count > french_count: return \\"English\\" elif spanish_count > english_count and spanish_count > french_count: return \\"Spanish\\" elif french_count > english_count and french_count > spanish_count: return \\"French\\" else: return \\"Undetermined\\""},{"question":"Given a string of lowercase letters, write a function that determines the number of unique characters in the longest substring that contains no repeating characters. Ensure the function is efficient and runs in optimal time complexity. **Function signature:** ```python def longest_unique_substring_length(s: str) -> int: pass ``` **Input:** - A string `s` (1 <= len(s) <= 10^5), consisting of only lowercase English letters. **Output:** - An integer representing the length of the longest substring without repeating characters. **Example:** ```python assert longest_unique_substring_length(\\"abcabcbb\\") == 3 # \\"abc\\" assert longest_unique_substring_length(\\"bbbbb\\") == 1 # \\"b\\" assert longest_unique_substring_length(\\"pwwkew\\") == 3 # \\"wke\\" ```","solution":"def longest_unique_substring_length(s: str) -> int: Determines the length of the longest substring without repeating characters. char_index_map = {} start = max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Given a matrix of m x n elements (m rows, n columns), find all possible paths from the top-left corner to the bottom-right corner of the matrix. You can only move either down or right at any point in time. Example: Input: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` [ [1, 2, 3, 6, 9], [1, 2, 5, 6, 9], [1, 2, 5, 8, 9], [1, 4, 5, 6, 9], [1, 4, 5, 8, 9], [1, 4, 7, 8, 9] ] ``` The function should return all paths that navigate from the top-left corner to the bottom-right corner of the matrix using the allowed movements. Follow the example provided for clarity.","solution":"def all_paths(matrix): Returns all paths from top-left to bottom-right in a given matrix. if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) result = [] def backtrack(path, i, j): path.append(matrix[i][j]) if i == m - 1 and j == n - 1: result.append(list(path)) if i + 1 < m: backtrack(path, i + 1, j) if j + 1 < n: backtrack(path, i, j + 1) path.pop() backtrack([], 0, 0) return result"},{"question":"Alice is a software engineer who loves exploring new challenges. In her latest project, she works with strings and needs your help to solve a fascinating problem about palindromes. # Task Given a string `s`, you need to determine the minimum number of character insertions required to make the string a palindrome. A palindrome is a string that reads the same forward and backward. # Input - A single line containing the string `s` (1 ≤ |s| ≤ 1000). The string consists of lowercase Latin letters only. # Output - Output a single integer which is the minimum number of character insertions required to make the input string a palindrome. # Examples Example 1 **Input:** ``` race ``` **Output:** ``` 3 ``` **Explanation:** To make \\"race\\" a palindrome, the minimum insertions required are \\"eca\\" at the beginning, resulting in \\"ecarace\\" or \\"aceca\\" at the end, forming \\"racecar\\". Example 2 **Input:** ``` abc ``` **Output:** ``` 2 ``` **Explanation:** To make \\"abc\\" a palindrome, the minimum insertions required are \\"cba\\" at the beginning, resulting in \\"cbabc\\" or \\"abca\\" at the end, forming \\"abcba\\". Example 3 **Input:** ``` a ``` **Output:** ``` 0 ``` **Explanation:** The string \\"a\\" is already a palindrome, so no insertions are needed. # Note You can assume that input strings will always have at least one character. The problem can be efficiently solved using Dynamic Programming techniques that identify the longest palindromic subsequence, as the minimum insertions required will be the difference between the original string length and the length of this subsequence.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions required to make the string s a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0 for i in range(n)] for j in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): h = l + gap if s[l] == s[h]: dp[l][h] = dp[l + 1][h - 1] else: dp[l][h] = min(dp[l][h - 1], dp[l + 1][h]) + 1 # dp[0][n-1] contains the minimum number of insertions for s[0..n-1] return dp[0][n-1]"},{"question":"Islands Count You are given a 2D grid map of \'1\'s (land) and \'0\'s (water). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function that identifies the number of islands in the given grid. The function should take in the grid as a list of lists where each element is either \'1\' or \'0\', and return the count of distinct islands. For example: Input 1: ``` [ [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'0\',\'0\',\'1\',\'0\',\'0\'], [\'0\',\'0\',\'0\',\'1\',\'1\'] ] ``` Output 1: ``` 3 ``` Input 2: ``` [ [\'1\',\'0\',\'1\',\'0\'], [\'0\',\'1\',\'0\',\'1\'], [\'1\',\'0\',\'1\',\'0\'] ] ``` Output 2: ``` 6 ``` Ensure your solution handles edge cases like an empty grid or a grid with no islands.","solution":"def num_islands(grid): if not grid: return 0 def dfs(i, j): if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] != \'1\': return grid[i][j] = \'0\' # Mark as visited dfs(i + 1, j) # Down dfs(i - 1, j) # Up dfs(i, j + 1) # Right dfs(i, j - 1) # Left num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"You are given a list of dictionaries representing people, where each dictionary contains two keys: `\\"name\\"` and `\\"age\\"`. Write a function that finds the name of the youngest person in the list. If there are multiple people with the same youngest age, return all their names in a list. Function Signature: ```python def find_youngest(people: List[Dict[str, Union[str, int]]]) -> Union[str, List[str]]: pass ``` Example: ```python people = [ {\\"name\\": \\"Alice\\", \\"age\\": 25}, {\\"name\\": \\"Bob\\", \\"age\\": 23}, {\\"name\\": \\"Charlie\\", \\"age\\": 23} ] find_youngest(people) # should return [\\"Bob\\", \\"Charlie\\"] people = [ {\\"name\\": \\"Alice\\", \\"age\\": 25}, {\\"name\\": \\"Bob\\", \\"age\\": 23}, {\\"name\\": \\"Charlie\\", \\"age\\": 30} ] find_youngest(people) # should return \\"Bob\\" ```","solution":"from typing import List, Dict, Union def find_youngest(people: List[Dict[str, Union[str, int]]]) -> Union[str, List[str]]: if not people: return \\"\\" # Find the minimum age min_age = min(person[\'age\'] for person in people) # Find all people with the minimum age youngest_people = [person[\'name\'] for person in people if person[\'age\'] == min_age] if len(youngest_people) == 1: return youngest_people[0] return youngest_people"},{"question":"You are given a list of integers. Write a function to sort this list such that all prime numbers appear before all non-prime numbers, while maintaining the relative order of prime numbers and relative order of non-prime numbers from the original list. Here is the step-by-step explanation: 1. Extract all prime numbers from the list and maintain their order. 2. Extract all non-prime numbers from the list and maintain their order. 3. Concatenate the list of prime numbers with the list of non-prime numbers. To check if a number is prime, remember that: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input: - A list of integers, length 1 - 1000, where each integer is in the range 1 to 10000. # Output: - A list of integers sorted such that all prime numbers come before all non-prime numbers, while maintaining the relative order of both from the original list. # Example: Input: [10, 3, 5, 2, 8, 13, 4, 6] Output: [3, 5, 2, 13, 10, 8, 4, 6]","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sort_primes_first(lst): Sort the list such that all prime numbers appear before non-prime numbers while maintaining relative order of both from the original list. primes = [x for x in lst if is_prime(x)] non_primes = [x for x in lst if not is_prime(x)] return primes + non_primes"},{"question":"You are given two strings s and t, both consisting of lowercase English letters. Determine the minimum number of operations required to convert string s into string t. In one operation, you can: - Insert a single character into s, - Remove a single character from s, - Replace a single character in s with another character. Note: The order of characters must be maintained. -----Input----- The first line contains the string s (1 ≤ |s| ≤ 1000) — the string you need to transform. The second line contains the string t (1 ≤ |t| ≤ 1000) — the target string. -----Output----- Print the minimum number of operations required to transform s into t. -----Examples----- Input kitten sitting Output 3 Input flaw lawn Output 2","solution":"def min_operations(s, t): Computes the minimum number of operations required to convert string s into string t. Operations include insert, remove, or replace a character. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # remove dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][n] # Example usage # print(min_operations(\\"kitten\\", \\"sitting\\")) # Output: 3 # print(min_operations(\\"flaw\\", \\"lawn\\")) # Output: 2"},{"question":"Anagram Checker Write a function to determine if two given strings are anagrams of each other. Two strings are anagrams if they are made up of the same characters in the same quantities. -----Function Signature----- ```python def are_anagrams(s1: str, s2: str) -> bool: pass ``` -----Input----- - The function accepts two parameters: - `s1` (string): The first string. - `s2` (string): The second string. -----Output----- - The function should return a boolean value: - `True` if the two strings are anagrams. - `False` otherwise. -----Constraints----- - Length of the strings: 1 leq text{len}(s1), text{len}(s2) leq 10^4 -----Example----- ```python are_anagrams(\'listen\', \'silent\') # Output: True are_anagrams(\'hello\', \'billion\') # Output: False are_anagrams(\'evil\', \'vile\') # Output: True are_anagrams(\'triangle\', \'integral\') # Output: True are_anagrams(\'example\', \'samples\') # Output: False ``` -----Explanation----- - For the first example, both strings \'listen\' and \'silent\' contain exactly the same characters in the same frequency, so they are anagrams. - For the second example, \'hello\' and \'billion\' cannot be rearranged to form the other, hence they are not anagrams. - For the third example, \'evil\' and \'vile\' are made of the same characters, hence true. - For the fourth example, \'triangle\' and \'integral\' are anagrams. - For the fifth example, \'example\' and \'samples\' do not match in character frequencies or characters, so they are not anagrams.","solution":"def are_anagrams(s1: str, s2: str) -> bool: Determine if two strings are anagrams of each other. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(s1) == sorted(s2)"},{"question":"You are given an MxN grid made up of empty cells and some cells that contain obstacles. Your task is to find the number of unique paths from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (M, N), subject to the following constraints: 1. You can only move either down or right at any point in time. 2. You cannot move onto cells that have obstacles. Given multiple test cases, calculate the number of unique paths for each test case. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two space-separated integers M and N, the number of rows and columns in the grid. - The next M lines each contain N space-separated integers, where 0 represents an empty cell and 1 represents an obstacle. -----Output----- For each test case, output the number of unique paths from the top-left corner to the bottom-right corner. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ M, N ≤ 100 - The grid will always start and end with an empty cell. -----Example----- Input: 1 3 3 0 0 0 0 1 0 0 0 0 Output: 2 -----Explanation----- In the above example, there are two unique paths from the top-left to the bottom-right in the 3x3 grid avoiding obstacles: 1. Right -> Down -> Down -> Right 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in a grid with obstacles from the top-left to the bottom-right corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[M - 1][N - 1] def solve_unique_paths_from_input(input_data): Solves multiple test cases for unique paths in grids with obstacles. `input_data` should be a string where the number of test cases are followed by grids described in the question. Returns a list of results for each test case. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) results = [] line_index = 1 for _ in range(T): M, N = map(int, lines[line_index].split()) grid = [] for i in range(M): grid.append(list(map(int, lines[line_index + 1 + i].split()))) line_index += M + 1 results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Write a function named `rotate_image` that takes a two-dimensional array representing an `n x n` image, where each element represents a pixel, and rotates the image 90 degrees clockwise. The function should modify the image in-place and run in O(n^2) time complexity. For example, given the following `4 x 4` image: ``` [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The function should transform the array to: ``` [ [13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4] ] ```","solution":"def rotate_image(matrix): Rotates the given n x n matrix 90 degrees clockwise in-place. :param matrix: List[List[int]] - 2D list representing the image to be rotated :return: None n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Unique Pathways in a Grid Consider you have a grid with `m` rows and `n` columns. You are initially positioned at the top-left corner of the grid (i.e., at cell (1, 1)). Your goal is to reach the bottom-right corner of the grid (i.e., at cell (m, n)). You can only move either down or right at any point in time. Write a function `uniquePaths(m: int, n: int) -> int` that calculates the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Input - `m` (1 <= m <= 100): the number of rows in the grid. - `n` (1 <= n <= 100): the number of columns in the grid. # Output - An integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. # Examples Ex1: ```plaintext m = 3, n = 7 ``` _Answer:_ 28 Ex2: ```plaintext m = 3, n = 2 ``` _Answer:_ 3","solution":"def uniquePaths(m, n): Returns the number of unique paths from the top-left to the bottom-right corner of a m x n grid. # Create a 2D array to store the number of unique paths to each cell dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Given a string s, which consists of lowercase letters only, divide the string into as many parts as possible so that each letter appears in at most one part, and return all the parts\' lengths in an array. # Example: ``` partitionLabels(\\"ababcbacadefegdehijhklij\\") should return [9, 7, 8]. partitionLabels(\\"eccbbbbdec\\") should return [10]. ``` # Explanation: The goal is to partition the string in such a way that each letter in the string only appears in one part. The first part is \\"ababcbaca,\\" which includes letters \'a,\' \'b,\' and \'c\' that appear up to the position 8. The next part is \\"defegde,\\" which includes letters \'d,\' \'e,\' \'f,\' and \'g\' that appear up to the position 14. The last part is \\"hijhklij,\\" which includes letters \'h,\' \'i,\' \'j,\' \'k,\' and \'l\' that appear up to the position 22. # Notes: 1) The input string \\"s\\" will have a length in the range [1, 1000]. 2) The function should have optimal time complexity. 3) The function should return the lengths of each part as an array of integers.","solution":"def partitionLabels(s): Divide the string into as many parts as possible so that each letter appears in at most one part. Return the lengths of each part in an array. # First, find the last occurrence of each character last_occurrence = {char: idx for idx, char in enumerate(s)} parts = [] start, end = 0, 0 for i, char in enumerate(s): end = max(end, last_occurrence[char]) if i == end: parts.append(i - start + 1) start = i + 1 return parts"},{"question":"Given a list of integers, determine the maximum sum of a subarray with at least one element. A subarray is a contiguous part of an array. For instance: ``` max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) ``` should return `6` because the subarray `[4,-1,2,1]` has the largest sum among all subarrays. More examples in test cases. Good luck!","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray with at least one element. Parameters: nums (list): List of integers Returns: int: The maximum subarray sum if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of strings. Your task is to write a function `group_by_length(strings)` that takes the list of strings and returns a dictionary. The dictionary should have keys as the lengths of the strings and values as lists containing strings of each corresponding length. For example: ``` group_by_length([\\"apple\\", \\"bat\\", \\"car\\", \\"dog\\", \\"elephant\\", \\"fox\\", \\"goat\\"]) should return { 3: [\\"bat\\", \\"car\\", \\"dog\\", \\"fox\\"], 4: [\\"goat\\"], 5: [\\"apple\\"], 8: [\\"elephant\\"] } ```","solution":"def group_by_length(strings): Groups strings by their lengths into a dictionary. Parameters: strings (list): List of strings. Returns: dict: Dictionary with keys as lengths and values as lists of strings of that length. length_dict = {} for string in strings: length = len(string) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"Given an integer number n, return the sum of the squares of its digits. Example 1: Input: n = 234 Output: 29 Explanation: Squares of digits = 2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29 Example 2: Input: n = 4421 Output: 37 Explanation: Squares of digits = 4^2 + 4^2 + 2^2 + 1^2 = 16 + 16 + 4 + 1 = 37 Constraints: 1 <= n <= 10^5","solution":"def sum_of_squares_of_digits(n): Given an integer number n, returns the sum of the squares of its digits. return sum(int(digit)**2 for digit in str(n))"},{"question":"Write a function `min_jumps(arr)` that takes in a list of non-negative integers `arr` where each element represents the maximum number of steps that can be jumped going forward from that element. Your task is to determine the minimum number of jumps required to reach the end of the list starting from the first element. Return `-1` if it is not possible to reach the end of the list. Examples: min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]) -> 3 (1 -> 3 -> 8 -> 9) min_jumps([1, 1, 1, 1, 1]) -> 4 min_jumps([1, 0, 1, 0, 1]) -> -1 min_jumps([7, 0, 0, 0, 0, 0, 0, 1]) -> 1 Constraints: - The length of arr will be in the range [1, 1000]. - Each element of arr will be in the range [0, 100].","solution":"def min_jumps(arr): Determine the minimum number of jumps to reach the end of the list. Parameters: arr (list): A list of non-negative integers where each element represents the maximum number of steps that can be jumped forward from that element. Returns: int: The minimum number of jumps required to reach the end of the list, or -1 if it is not possible. if len(arr) <= 1: return 0 # No steps can be taken if the first element is 0 if arr[0] == 0: return -1 jumps = 1 max_reach = arr[0] steps = arr[0] for i in range(1, len(arr)): if i == len(arr) - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Alice is working on a text processing application, and she needs to implement a feature that can identify the longest sub-string within a given string that contains at most K distinct characters. Write a function to help Alice solve this problem. -----Input----- The input consists of a single test case per test file. The first line of input contains an integer K. The second line of input contains a string S. -----Output----- Output a single line containing the longest sub-string of S that contains at most K distinct characters. If there are multiple answers, output the sub-string which appears first in S. -----Constraints----- - 1 ≤ K ≤ 26 - 1 ≤ len(S) ≤ 10000 - S consists only of lowercase English letters. -----Example----- Input: 2 eceba Output: ece","solution":"def longest_substring_with_k_distinct_chars(k, s): Returns the longest substring consisting of at most k distinct characters. Parameters: k (int): The maximum number of distinct characters. s (str): The input string. Returns: str: The longest substring with at most k distinct characters. if k == 0: return \\"\\" n = len(s) if n == 0 or n < k: return s left, right = 0, 0 char_frequency = {} max_length = 0 max_substring = \\"\\" while right < n: right_char = s[right] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 right += 1 while len(char_frequency) > k: left_char = s[left] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] left += 1 if right - left > max_length: max_length = right - left max_substring = s[left:right] return max_substring"},{"question":"Given an integer `n`, return a boolean indicating whether `n` is a palindrome. A palindrome is a number that reads the same backwards as forwards. For example: - For `n = 12321`, the function should return `true`. - For `n = -12321`, the function should return `false` since the negative sign makes it not a palindrome. - For `n = 12345`, the function should return `false`.","solution":"def is_palindrome(n): Returns True if n is a palindrome number, False otherwise. if n < 0: return False str_n = str(n) return str_n == str_n[::-1]"},{"question":"Brief ===== Create a function that takes a **list** of integers and returns a **new list** with all **duplicate** numbers removed, but the order of the original list should be **preserved**. If the input is not a list or contains non-integer elements, return **\'Invalid input!\'**. Empty lists should be returned as they are. Hint ==== Make use of **sets** to identify duplicates efficiently. Good luck!","solution":"def remove_duplicates(lst): Takes a list of integers and returns a new list with all duplicate numbers removed, preserving the order of the original list. If the input is not a list or contains non-integer elements, return \'Invalid input!\'. if not isinstance(lst, list): return \'Invalid input!\' if any(not isinstance(x, int) for x in lst): return \'Invalid input!\' seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Matrix Diagonal Sum In this problem, you will be given a square matrix and you need to calculate the sum of the elements on its primary diagonal. The primary diagonal of a square matrix runs from the top-left to the bottom-right. The input will be a two-dimensional list (a list of lists), where each inner list represents a row of the matrix. Each list will have the same length, creating a square matrix. Write a function `diagonal_sum(matrix)` that takes a square matrix as input and returns the sum of the elements on the primary diagonal. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] diagonal_sum(matrix) = 15 # because 1 + 5 + 9 = 15 ``` # Constraints - The matrix will be square (all rows will have the same length as the number of rows). - The matrix will contain only integers (positive or negative). # Notes Make sure to handle edge cases such as very small or very large matrices.","solution":"def diagonal_sum(matrix): Returns the sum of the elements on the primary diagonal of a square matrix. :param matrix: List of lists representing the square matrix :return: Sum of the primary diagonal elements return sum(matrix[i][i] for i in range(len(matrix)))"},{"question":"Write a function that takes a list of integers and an integer `x`, returning a new list where each integer in the original list has been multiplied by `x` but only if the integer was originally even. Odd integers should remain unchanged. Examples: ```python modify_list([1, 2, 3, 4], 2) #=> [1, 4, 3, 8] modify_list([7, 8, 10, 13], 3) #=> [7, 24, 30, 13] modify_list([0, -2, -3, 5], 5) #=> [0, -10, -3, 5] ```","solution":"def modify_list(int_list, x): This function takes a list of integers and a multiplier x. It returns a new list where each even integer is multiplied by x. Odd integers remain unchanged. return [num * x if num % 2 == 0 else num for num in int_list]"},{"question":"You are given a 2D integer grid of size m x n where each cell has a positive integer value. Your task is to traverse the grid starting from the top-left corner to the bottom-right corner, such that you can only move right or down at each step. Find the minimum sum of the path from the top-left to the bottom-right corner. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the sum. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 Explanation: The path 1 → 2 → 3 → 6 minimizes the sum. Constraints: * m == grid.length * n == grid[0].length * 1 <= m, n <= 100 * 1 <= grid[i][j] <= 100","solution":"def minPathSum(grid): Given a grid where each cell has a positive integer value, this function returns the minimum sum of a path from the top-left to the bottom-right corner of the grid, where you can only move right or down at each step. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1]"},{"question":"Write a function that finds the second smallest number in a list of integers. If the list has fewer than two unique numbers, the function should return `None`. ```python second_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) # 2 second_smallest([1, 1, 1, 1]) # None second_smallest([0, -1, 3, 100]) # 0 ``` ```haskell secondSmallest [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] `shouldBe` Just 2 secondSmallest [1, 1, 1, 1] `shouldBe` Nothing secondSmallest [0, -1, 3, 100] `shouldBe` Just 0 ``` If there are multiple occurrences of numbers, they should be treated as separate instances when determining unique values. For example, in the list `[3, 1, 4, 1, 5, 1, 9, 2]`, the second smallest is `2`, as `1` is considered only once for determining uniqueness.","solution":"def second_smallest(lst): Returns the second smallest unique number in the list. If the list contains fewer than two unique numbers, returns None. unique_numbers = sorted(set(lst)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"``` ************************* * Sudoku Validator * ************************* You are given a partially filled 9x9 Sudoku grid. A valid Sudoku puzzle must adhere to the following conditions: 1. Each row must contain the numbers from 1 to 9 with no duplicates. 2. Each column must contain the numbers from 1 to 9 with no duplicates. 3. Each of the nine 3x3 sub-grids must contain the numbers from 1 to 9 with no duplicates. Your task is to determine if the given grid is valid according to the rules of Sudoku. Notes: * The input grid is represented as a list of lists, where each inner list corresponds to a row in the Sudoku grid. * Empty cells in the grid are represented by the value 0. * The input always contains exactly 9 lists of 9 integers each. Examples: `sudoku_validator([ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ])` Output: `True` (The provided grid is valid.) `sudoku_validator([ [8, 3, 5, 4, 1, 6, 9, 2, 7], [2, 9, 6, 8, 5, 7, 4, 3, 1], [4, 1, 7, 9, 3, 2, 5, 8, 6], [5, 6, 9, 1, 2, 3, 7, 4, 8], [7, 2, 3, 6, 8, 4, 1, 9, 5], [1, 8, 4, 5, 7, 9, 6, 3, 2], [9, 7, 1, 3, 6, 8, 2, 5, 4], [3, 5, 2, 7, 4, 1, 8, 6, 9], [6, 4, 8, 2, 9, 5, 3, 7, 1] ])` Output: `False` (The number 1 is duplicated in the first row, so the grid is invalid.) ```","solution":"def sudoku_validator(grid): def is_valid_line(line): elements = [num for num in line if num != 0] return len(elements) == len(set(elements)) def is_valid_subgrid(grid, start_row, start_col): elements = [] for i in range(3): for j in range(3): num = grid[start_row + i][start_col + j] if num != 0: elements.append(num) return len(elements) == len(set(elements)) for row in grid: if not is_valid_line(row): return False for col in range(9): if not is_valid_line([grid[row][col] for row in range(9)]): return False for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_subgrid(grid, row, col): return False return True"},{"question":"**Student Management System** You are required to design a function called studentManager() that performs specific operations on a student record system. The system maintains a list of student records, where each record is a dictionary containing the keys \'id\', \'name\', and \'score\'. The function takes two arguments: a list of student records and a list of operations. Each operation in the operations list is a tuple where the first element is a string representing the type of operation and the second element is either another tuple or an integer representing the data for the operation. The function should perform each operation sequentially and return the updated list of student records after all operations have been carried out. Valid operations are: - \\"add\\": Add a new student record to the list. The data for this operation is a tuple containing the student\'s id, name, and score. - \\"remove\\": Remove a student record from the list. The data for this operation is the student\'s id. - \\"update\\": Update the score of an existing student. The data for this operation is a tuple containing the student\'s id and the new score. - \\"average\\": Calculate the average score of all students. The data for this operation is an integer representing a threshold score; only students with scores greater than or equal to this threshold are considered. The function should append a dictionary with the key \'average\' and the calculated average as the value to the list of student records and continue with the next operations. Examples: ``` records = [ {\'id\': 1, \'name\': \'Alice\', \'score\': 85}, {\'id\': 2, \'name\': \'Bob\', \'score\': 90}, {\'id\': 3, \'name\': \'Charlie\', \'score\': 78} ] operations = [ (\'add\', (4, \'David\', 88)), (\'remove\', 2), (\'update\', (3, 80)), (\'average\', 80) ] studentManager(records, operations) ``` Expected output: ``` [ {\'id\': 1, \'name\': \'Alice\', \'score\': 85}, {\'id\': 3, \'name\': \'Charlie\', \'score\': 80}, {\'id\': 4, \'name\': \'David\', \'score\': 88}, {\'average\': 84.33} ] ``` The function should handle edge cases such as: - Attempting to remove a student who does not exist in the records. - Updating the score of a student who does not exist. - Calculating the average when no students meet the threshold criteria (should return \'average\': 0). Note: The \'id\' field is unique for each student. If duplicate \'id\' values are provided, the latest entry should replace the previous one. Design the function in a way that additional operations can be easily added in the future.","solution":"def studentManager(records, operations): Manages student records according to the given operations. :param records: List of dictionaries with keys \'id\', \'name\', and \'score\'. :param operations: List of operations to perform on the records. :return: Updated list of student records after performing all operations. record_dict = {record[\'id\']: record for record in records} for operation in operations: op_type = operation[0] if op_type == \\"add\\": student_id, student_name, student_score = operation[1] record_dict[student_id] = {\'id\': student_id, \'name\': student_name, \'score\': student_score} elif op_type == \\"remove\\": student_id = operation[1] if student_id in record_dict: del record_dict[student_id] elif op_type == \\"update\\": student_id, new_score = operation[1] if student_id in record_dict: record_dict[student_id][\'score\'] = new_score elif op_type == \\"average\\": threshold = operation[1] scores = [record[\'score\'] for record in record_dict.values() if record[\'score\'] >= threshold] average_score = round(sum(scores) / len(scores), 2) if scores else 0 record_dict[\'average\'] = {\'average\': average_score} # Convert back to list format result = list(record_dict.values()) # Ensure \'average\' dictionary remains at the end if exists if \'average\' in record_dict: result.append(record_dict[\'average\']) result.remove({\'average\': record_dict[\'average\'][\'average\']}) return result"},{"question":"=====Function Descriptions===== itertools.permutations(iterable, r) This tool returns successive r length permutations of elements in the iterable. Permutations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in sorted order. Sample Code >>> from itertools import permutations >>> >>> print list(permutations(\'ABCD\', 2)) [(\'A\', \'B\'), (\'A\', \'C\'), (\'A\', \'D\'), (\'B\', \'A\'), (\'B\', \'C\'), (\'B\', \'D\'), (\'C\', \'A\'), (\'C\', \'B\'), (\'C\', \'D\'), (\'D\', \'A\'), (\'D\', \'B\'), (\'D\', \'C\')] >>> >>> A = [1, 2, 3] >>> print list(permutations(A, 2)) [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)] =====Problem Statement===== You are given a string S and an integer k. Your task is to print all possible size k permutations of the string in lexicographic sorted order. =====Input Format===== A single line containing the string S and integer value k separated by a space. =====Constraints===== 0 < k ≤ len(S) The string contains only UPPERCASE characters. =====Output Format===== Print the permutations of string S of size k on separate lines. =====Sample Input===== HACK 2 =====Sample Output===== AC AH AK CA CH CK HA HC HK KA KC KH","solution":"from itertools import permutations def generate_permutations(s, k): This function prints all possible size k permutations of the string s in lexicographic sorted order. Args: s (str): The input string containing only uppercase characters. k (int): The size of the permutations. Returns: None: Prints the permutations on separate lines. perms = permutations(sorted(s), k) for perm in perms: print(\'\'.join(perm))"},{"question":"Nadia loves playing with arrays and discovering interesting properties within them. Recently, she came across the concept of an \\"almost palindrome.\\" An \\"almost palindrome\\" is a sequence of digits that becomes a palindrome when at most one digit is modified. To challenge herself, Nadia decided to write a program to check whether a given integer array can be converted into a palindrome by modifying at most one digit. You\'re tasked with helping Nadia by writing such a program. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_i (0 le a_i le 9) — the elements of the array. -----Output----- Print \\"YES\\" if the array can be converted into a palindrome by modifying at most one digit. Otherwise, print \\"NO\\". -----Example----- Input 5 1 2 3 2 1 Output YES Input 5 1 2 3 4 1 Output YES Input 5 1 2 3 1 2 Output NO -----Note----- In the first example, the array [1, 2, 3, 2, 1] is already a palindrome, so the answer is \\"YES\\". In the second example, changing the third digit (3) to 2 turns the array into [1, 2, 2, 2, 1], which is a palindrome, so the answer is \\"YES\\". In the third example, no single change can make the array [1, 2, 3, 1, 2] a palindrome, so the answer is \\"NO\\".","solution":"def can_be_almost_palindrome(arr): Returns \\"YES\\" if the array can be converted into a palindrome by modifying at most one digit, otherwise returns \\"NO\\". left = 0 right = len(arr) - 1 modifications = 0 while left < right: if arr[left] != arr[right]: modifications += 1 if modifications > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"In a given number sequence, a \\"zigzag subarray\\" is defined as a subarray where elements alternate between greater and lesser values. Specifically, if the subarray is denoted as A1, A2, ..., Ak, then: - A1 < A2 > A3 < A4 > ... or - A1 > A2 < A3 > A4 < ... For example, in the sequence [1, 7, 4, 9, 2, 5], the subarrays [1, 7, 4], [7, 4, 9], [4, 9, 2], and [9, 2, 5] are all zigzag subarrays. Given an integer array, your task is to find the length of the longest zigzag subarray. # Function Signature Implement a function `longest_zigzag_subarray(arr: List[int]) -> int` that takes an array of integers `arr` and returns an integer representing the length of the longest zigzag subarray. # Input - An array `arr` of integers where 1 ≤ len(arr) ≤ 1000 and -1000 ≤ arr[i] ≤ 1000. # Output - An integer which is the length of the longest zigzag subarray. # Example ```python assert longest_zigzag_subarray([1, 7, 4, 9, 2, 5]) == 6 assert longest_zigzag_subarray([1, 4, 7, 2, 5]) == 4 assert longest_zigzag_subarray([10, 20, 10, 20, 10]) == 5 assert longest_zigzag_subarray([1, 2, 3, 4, 5]) == 2 ``` # Explanation In the first example, the entire array is a zigzag subarray thus it returns 6, which is the length of the array. In the second example, the longest zigzag subarray is [1, 4, 2, 5]. In the third example, the entire array forms a zigzag subarray alternating between 10 and 20. In the fourth example, the longest zigzag subarray is either [1, 2] or any other pair of consecutive elements since no longer zigzag subarray exists. # Constraints - You are expected to provide an efficient solution with a linear time complexity. **Note**: This problem is inspired by patterns often found in coding competitions and challenges, ensuring you practice identifying and solving subarray-based problems with specific conditions or patterns.","solution":"from typing import List def longest_zigzag_subarray(arr: List[int]) -> int: if len(arr) < 2: return len(arr) # Initialize counters. up = down = max_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: up = down + 1 max_length = max(max_length, up) elif arr[i] < arr[i - 1]: down = up + 1 max_length = max(max_length, down) return max_length"},{"question":"Implement a function that takes a list of non-negative integers and returns a new list where each element is replaced by the number of elements to the right that are smaller than the current element. The function signature should be: ```python def count_smaller(nums: List[int]) -> List[int]: ``` # Examples ```python count_smaller([5, 2, 6, 1]) == [2, 1, 1, 0] count_smaller([1, 2, 3]) == [0, 0, 0] count_smaller([3, 2, 1]) == [2, 1, 0] count_smaller([1, 1, 1]) == [0, 0, 0] count_smaller([]) == [] ``` # Explanation For `count_smaller([5, 2, 6, 1])`, the function returns `[2, 1, 1, 0]` because: - There are 2 elements smaller than 5 to the right of it (2, 1) - There is 1 element smaller than 2 to the right of it (1) - There is 1 element smaller than 6 to the right of it (1) - There are no elements smaller than 1 to the right of it (0) For `count_smaller([1, 2, 3])`, the function returns `[0, 0, 0]` because there are no elements smaller than each element on their right. For `count_smaller([3, 2, 1])`, the function returns `[2, 1, 0]` because: - There are 2 elements smaller than 3 to the right of it (2, 1) - There is 1 element smaller than 2 to the right of it (1) - There are no elements smaller than 1 to the right of it (0)","solution":"from typing import List def count_smaller(nums: List[int]) -> List[int]: Returns a list where each element is replaced by the number of elements to the right that are smaller than the current element. result = [] for i in range(len(nums)): count = sum(1 for j in range(i + 1, len(nums)) if nums[j] < nums[i]) result.append(count) return result"},{"question":"=====Function Descriptions===== collections.Counter() This tool provides a way to count the occurrences of elements in a container. It is especially useful for creating frequency distributions. For example, Counter(\\"hello\\") returns Counter({\'l\': 2, \'h\': 1, \'e\': 1, \'o\': 1}). Sample Code >>> from collections import Counter >>> >>> print Counter([1,2,2,3,4,4,4]) Counter({4: 3, 2: 2, 1: 1, 3: 1}) >>> >>> print Counter(\'banana\') Counter({\'a\': 3, \'n\': 2, \'b\': 1}) >>> >>> fruits = [\'apple\', \'orange\', \'apple\', \'banana\'] >>> print Counter(fruits) Counter({\'apple\': 2, \'orange\': 1, \'banana\': 1}) =====Problem Statement===== You are given a string s. Your task is to count the frequency of each character in the string and print the character along with its corresponding count in the order they first appear in the string. Example s = \\"abracadabra\\" Output: a 5 b 2 r 2 c 1 d 1 =====Input Format===== A single string s. =====Constraints===== 1 ≤ len(s) ≤ 100 =====Output Format===== Output each character (along with its count) in the order they appear in the string. =====Sample Input===== abracadabra =====Sample Output===== a 5 b 2 r 2 c 1 d 1","solution":"def count_characters(s): Function to count the frequency of characters in the input string and return a list of tuples where each tuple contains a character and its frequency in the order they first appear in the string. Parameters: s (str): Input string Returns: list: List of tuples with character and its frequency from collections import Counter counter = Counter(s) seen = set() result = [] for char in s: if char not in seen: result.append((char, counter[char])) seen.add(char) return result"},{"question":"#Task You are tasked with creating a function that calculates the frequency of each character in a given string and returns it as a dictionary. The characters should be considered case-insensitively, meaning that \'A\' and \'a\' are considered the same character. Handle cases where the input might not be a string. #Input The input is any random string. If the input is not a string or an empty string, the function should return an empty dictionary. #Output The function should return a dictionary where the keys are the lowercase characters from the input string, and the values are the number of times each character appears in the input string. Example: ```python Input: character_frequency(\'Hello World\') Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} Input: character_frequency(\'AABBCC\') Output: {\'a\': 2, \'b\': 2, \'c\': 2} Input: character_frequency(\'\') Output: {} Input: character_frequency(12345) Output: {} ```","solution":"def character_frequency(input_str): Calculate the frequency of each character in the given string. Characters are considered case-insensitively. :param input_str: The input string :return: Dictionary with characters as keys and their frequencies as values. if not isinstance(input_str, str) or input_str == \\"\\": return {} frequency_dict = {} for char in input_str.lower(): if char.isalpha(): frequency_dict[char] = frequency_dict.get(char, 0) + 1 return frequency_dict"},{"question":"A mysterious hacker group has gained control of a major banking system. They plan to transfer funds from all user accounts into their own account. The system uses a specific algorithm to secure the transfer process, and it is implemented using a combination of hashing and summation. Your task is to identify if a transfer is possible based on the given algorithm. You are provided with two arrays, `A` and `B`, each containing `n` integers, representing account balances before and after the transfer respectively. A transfer is considered valid if for every element in `A`, there is a unique element in `B` that equals the sum of the current element and a constant integer `k`. Formally, there exists an integer `k` such that `B[i] = A[i] + k` for all `0 ≤ i < n`. -----Input----- - The first line contains a single integer `T` (1 ≤ T ≤ 100) — the number of test cases. - Each test case comprises three lines. The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of accounts. - The second line contains `n` space-separated integers representing the array `A`. - The third line contains `n` space-separated integers representing the array `B`. -----Output----- For each test case, print \\"YES\\" if there exists a unique integer `k` such that for every element in `A`, adding `k` results in the corresponding element in `B`. Otherwise, print \\"NO\\". -----Sample Input----- 3 3 1 2 3 4 5 6 4 10 12 14 16 20 22 24 26 5 1 2 3 4 5 5 6 7 8 10 -----Sample Output----- YES YES NO # Constraints: 1. All integers in `A` and `B` are non-negative and do not exceed 10^9. 2. `A` and `B` are both sorted in non-decreasing order for each test case.","solution":"def is_transfer_possible(n, A, B): Checks if there exists an integer k such that B[i] = A[i] + k for all 0 ≤ i < n. # Calculate the potential k using the first elements of A and B k = B[0] - A[0] # Check if the same k applies to all elements for i in range(n): if B[i] != A[i] + k: return \\"NO\\" return \\"YES\\" def solve(test_cases): Process each test case to determine if the transfer is possible. results = [] for case in test_cases: n, A, B = case results.append(is_transfer_possible(n, A, B)) return results # Example usage: # Input should be provided in a structured format for multiple test cases processing def main(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(input_lines[index]) A = list(map(int, input_lines[index + 1].strip().split())) B = list(map(int, input_lines[index + 2].strip().split())) test_cases.append((n, A, B)) index += 3 results = solve(test_cases) for result in results: print(result) # Example input to test the main function input_data = 3 3 1 2 3 4 5 6 4 10 12 14 16 20 22 24 26 5 1 2 3 4 5 5 6 7 8 10 main(input_data)"},{"question":"Given a list of integers, return a new list containing only the prime numbers found in the original list, maintaining their original order. The list will never be empty and you do not need to account for non-integer values.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_prime_numbers(lst): Returns a list containing only the prime numbers from the original list. return [number for number in lst if is_prime(number)]"},{"question":"Alex is planning to create beautiful circular flower beds in his garden. Each bed should be completely within a square plot of side length `S`. He wants to maximize the radius of the circular flower beds that can fit in the square plot. Help Alex to find out the maximum radius of the circular flower beds that can be constructed in his square plot. -----Input:----- - The first line will contain `N`, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, `S` i.e. the side length of the square plot. -----Output:----- For each test case, output in a single line the maximum radius of the circular flower bed that can fit in the square plot. -----Constraints----- - `1 ≤ N ≤ 1000` - `1 ≤ S ≤ 10^9` -----Sample Input:----- 3 4 7 15 -----Sample Output:----- 2.0 3.5 7.5","solution":"def max_circle_radius(N, sides): Given N indicates number of test cases followed by a list sides which contains the side lengths of the square plots. This function returns the maximum radius of the circular flower bed for each square plot side. radii = [] for S in sides: # The maximum radius of the circle to fit within the square plot is half the side length of the square radius = S / 2.0 radii.append(radius) return radii"},{"question":"# Task: Write a function `squared_numbers_matrix` that generates a square matrix of size `n`, where each element is the square of the difference between its row and column indices. If the argument `n` is less than or equal to 0, the function should return an empty list. # Examples: `squared_numbers_matrix(3)`: [ [0, 1, 4], [1, 0, 1], [4, 1, 0] ] `squared_numbers_matrix(4)`: [ [0, 1, 4, 9], [1, 0, 1, 4], [4, 1, 0, 1], [9, 4, 1, 0] ]","solution":"def squared_numbers_matrix(n): Generates a square matrix of size \'n\' where each element is the square of the difference between its row and column indices. If n is less than or equal to 0, returns an empty list. if n <= 0: return [] return [[(i - j) ** 2 for j in range(n)] for i in range(n)]"},{"question":"----- Alice is organizing a string manipulations tournament where participants are given a string and must perform specific operations to achieve a target output. The operations allowed are: 1. Swap two characters within the string. 2. Reverse a substring of the string. Alice wants to test a new problem for the tournament, and she needs your help to verify if it\'s possible to achieve a target string using only these operations within a limited number of moves. You need to determine if there exists a sequence of at most `M` operations (including swapping and reversing) that transforms the given string `S` into the target string `T`. -----Input:----- - The first line contains an integer `Q`, denoting the number of test cases. `Q` test cases follow, each containing three lines. - The first line of each test case contains an integer `M`. - The second line of each test case contains a string `S`. - The third line of each test case contains a string `T`. -----Output:----- - For each test case, output \\"YES\\" if it\'s possible to transform `S` into `T` using at most `M` operations, otherwise output \\"NO\\". -----Constraints----- - `Q = 10` - `1 leq M leq 1000` - `1 leq |S|, |T| leq 50` - Both `S` and `T` contain only lowercase English letters. -----Sample Input:----- 1 3 abcdef abcfed -----Sample Output:----- YES -----Explanation:----- - In the given testcase, it\'s possible to transform `S=\\"abcdef\\"` into `T=\\"abcfed\\"` in 2 operations: 1. Reverse the substring \\"def\\" to get \\"abc\\" + \\"fed\\" = \\"abcfed\\".","solution":"def is_transform_possible(M, S, T): Determines if it is possible to transform string S into string T using at most M operations (swap or reverse). # Check if S and T are already equal if S == T: return \\"YES\\" # If sorting both results in different strings, it\'s impossible if sorted(S) != sorted(T): return \\"NO\\" # Check if the difference can be made in at most M operations # Consider each mismatch and count the required operations def get_mismatches(S, T): mismatches = [] for i in range(len(S)): if S[i] != T[i]: mismatches.append(i) return mismatches def required_operations(mismatches): if len(mismatches) == 0: return 0 # For each mismatch, counting pairs for swap swaps_needed = len(mismatches) // 2 # Plus remaining one-sided mismatches extra_operations = len(mismatches) % 2 return swaps_needed + extra_operations mismatches = get_mismatches(S, T) operations = required_operations(mismatches) return \\"YES\\" if operations <= M else \\"NO\\" def process_queries(queries): results = [] for M, S, T in queries: results.append(is_transform_possible(M, S, T)) return results"},{"question":"You are given an array of integers `arr` of length `N` and an integer `K`. Your task is to write a function that determines the length of the smallest subarray with a sum of at least `K`. If no such subarray exists, return `-1`. -----Constraints----- - 1 leq N leq 10^5 - 1 leq arr[i] leq 10^4 - 1 leq K leq 10^9 -----Input----- Input is given from standard input in the following format: N K arr_1 arr_2 ... arr_N -----Output----- Print one integer — the length of the smallest subarray with a sum of at least `K`, or `-1` if no such subarray exists. -----Example Input----- 6 7 2 3 1 2 4 3 -----Example Output----- 2 Explanation: In the array [2, 3, 1, 2, 4, 3], the smallest subarray with a sum of at least 7 is [4, 3], which is of length 2.","solution":"def smallest_subarray_with_sum_at_least_k(arr, N, K): Returns the length of the smallest subarray with a sum of at least K. If no such subarray exists, return -1. left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(N): current_sum += arr[right] while current_sum >= K: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"# Description For this task, you will be implementing a Sudoky puzzle solver. The Sudoku puzzle is a 9x9 grid, where some of the cells are filled with digits from 1 to 9, and the rest are empty. The objective is to fill the empty cells such that every row, every column, and each of the nine 3x3 sub-grids contains all of the digits from 1 to 9. # Instructions You need to implement the `SudokuSolver` class and the `solve` method: ```python class SudokuSolver: def __init__(self, board): pass def solve(self): pass ``` The `__init__` method will receive a 2D list `board` representing the Sudoku grid, where empty cells are represented by the number `0`. The `solve` method should return a 2D list representing the solved Sudoku grid. Example: Given the following board: ``` board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` The `solve` method should return: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ``` Good luck! If there is anything unclear or confusing, just let me know :)","solution":"class SudokuSolver: def __init__(self, board): self.board = board def is_valid(self, num, row, col): # Check row for i in range(9): if self.board[row][i] == num: return False # Check column for i in range(9): if self.board[i][col] == num: return False # Check 3x3 sub-grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if self.board[i][j] == num: return False return True def solve_sudoku(self): for row in range(9): for col in range(9): if self.board[row][col] == 0: for num in range(1, 10): if self.is_valid(num, row, col): self.board[row][col] = num if self.solve_sudoku(): return True self.board[row][col] = 0 return False return True def solve(self): if self.solve_sudoku(): return self.board else: return None"},{"question":"Given two strings s1 and s2, determine if a string s3 is formed by an interleaving of s1 and s2. s3 is said to be interleaving of s1 and s2 if it contains all characters of s1 and s2 and the order of the characters is preserved in both. For example: - s1 = \\"abc\\", s2 = \\"def\\", s3 = \\"adbcef\\" should return true because s3 keeps the characters of s1 (\\"abc\\") and s2 (\\"def\\") in their respective orders. - s1 = \\"abc\\", s2 = \\"def\\", s3 = \\"abdecf\\" should also return true for the same reason. - s1 = \\"abc\\", s2 = \\"def\\", s3 = \\"abdeqf\\" should return false because it contains an extra character \'q\' which is not in s1 or s2. Write a function `is_interleaving(s1, s2, s3)` that returns `True` if `s3` is formed by an interleaving of `s1` and `s2`, otherwise return `False`. ```python def is_interleaving(s1, s2, s3): # Your implementation here pass ``` # Constraints: - Length of `s1` and `s2` ranges from `1` to `100`. - Length of `s3` is equal to the sum of the lengths of `s1` and `s2`. - Both `s1` and `s2` contain only lowercase English letters. # Function Signature: ```python def is_interleaving(s1: str, s2: str, s3: str) -> bool: ```","solution":"def is_interleaving(s1, s2, s3): Determines if s3 is formed by interleaving s1 and s2. if len(s1) + len(s2) != len(s3): return False dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)] dp[0][0] = True for i in range(1, len(s1) + 1): dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1] for j in range(1, len(s2) + 1): dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1] for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1]) return dp[len(s1)][len(s2)]"},{"question":"You are developing an inventory management system for a warehouse. The warehouse stores various types of items in different sections. Each item has a unique identifier and belongs to a specific category. The inventory system needs to keep track of the stock levels for each item, identify low stock items, and support restocking actions when needed. To facilitate this, you decide to implement a part of the system that handles restocking of items and reporting low stock items. Each item in the warehouse is represented as a dictionary with the following keys: - `id`: A unique identifier for the item (string) - `category`: The category of the item (string) - `stock`: The current stock level of the item (integer) - `min_stock`: The minimum stock level before the item is considered low stock (integer) You need to write two functions: 1. `restock_item`: This function should take the item dictionary and a number of units to add to the stock. It should update the stock level of the item accordingly. 2. `get_low_stock_items`: This function should take a list of item dictionaries and return a list of item ids that are considered low stock (i.e., their stock level is less than their `min_stock` value). Function signatures: ```python def restock_item(item: dict, units: int) -> None: Updates the stock level of the given item by adding the specified number of units. :param item: Dictionary representing the item with keys: \'id\', \'category\', \'stock\', \'min_stock\' :param units: Number of units to add to the stock pass def get_low_stock_items(items: list) -> list: Returns a list of item ids that are considered low stock from the given list of items. :param items: List of dictionaries, each representing an item with keys: \'id\', \'category\', \'stock\', \'min_stock\' :return: List of item ids with stock level below their minimum stock level pass ``` Example: ```python items = [ {\'id\': \'item1\', \'category\': \'electronics\', \'stock\': 10, \'min_stock\': 15}, {\'id\': \'item2\', \'category\': \'furniture\', \'stock\': 5, \'min_stock\': 3}, {\'id\': \'item3\', \'category\': \'clothing\', \'stock\': 7, \'min_stock\': 10} ] restock_item(items[0], 10) # After restocking, items[0] should have stock 20 low_stock_items = get_low_stock_items(items) # Should return [\'item3\'] as it is the only item with stock less than min_stock ```","solution":"def restock_item(item: dict, units: int) -> None: Updates the stock level of the given item by adding the specified number of units. :param item: Dictionary representing the item with keys: \'id\', \'category\', \'stock\', \'min_stock\' :param units: Number of units to add to the stock item[\'stock\'] += units def get_low_stock_items(items: list) -> list: Returns a list of item ids that are considered low stock from the given list of items. :param items: List of dictionaries, each representing an item with keys: \'id\', \'category\', \'stock\', \'min_stock\' :return: List of item ids with stock level below their minimum stock level return [item[\'id\'] for item in items if item[\'stock\'] < item[\'min_stock\']]"},{"question":"You are given a positive integer n, representing the number of pairs of parentheses. Write a function to generate all combinations of well-formed parentheses. Example: Input: 3 Output: [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] Note: n will be in the range [1, 8].","solution":"def generate_parentheses(n): Generates all combinations of well-formed parentheses for n pairs. Parameters: n (int): Number of pairs of parentheses. Returns: List[str]: List of all combinations of well-formed parentheses. def backtrack(s, left, right): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \\"(\\", left + 1, right) if right < left: backtrack(s + \\")\\", left, right + 1) result = [] backtrack(\\"\\", 0, 0) return result"},{"question":"You are given a binary tree with n vertices. Each vertex in the tree has a unique id from 1 to n and a value associated with it. In one operation, you can change the value of any vertex. Your task is to answer several queries: for each query, calculate the maximum path sum in the subtree rooted at a given vertex. The sum of a path is the sum of the values of the vertices in that path (without counting the same vertex multiple times). -----Input----- The first line contains integer n (1 ≤ n ≤ 100,000) — the number of vertices in the tree. The second line contains n integers v1, v2, ..., vn (|vi| ≤ 10^9), where vi is the value of the i-th vertex. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — an edge between vertex u and vertex v. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains an integer r (1 ≤ r ≤ n) — the id of the root of the subtree for the query. -----Output----- Output q integers, each denoting the maximum path sum in the subtree rooted at vertex r for the corresponding query. -----Examples----- Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 4 Output 15 12 4","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] class Tree: def __init__(self, values): self.nodes = [None] + [TreeNode(v) for v in values] def add_edge(self, u, v): self.nodes[u].children.append(self.nodes[v]) self.nodes[v].children.append(self.nodes[u]) def _dfs(self, node, parent): max_sum = node.value for child in node.children: if child != parent: max_sum += self._dfs(child, node) node.value = max_sum return max_sum def preprocess(self): root = self.nodes[1] self._dfs(root, None) def get_subtree_sum(self, r): return self.nodes[r].value def process_queries(n, values, edges, queries): tree = Tree(values) for u, v in edges: tree.add_edge(u, v) tree.preprocess() results = [tree.get_subtree_sum(r) for r in queries] return results"},{"question":"You are given a string s consisting of lowercase letters. You need to find the length of the longest substring that can be rearranged to form a palindrome. -----Input----- The input consists of a single line containing the string s (1 leq |s| leq 10^5). -----Output----- Print the length of the longest substring that can be rearranged to form a palindrome. -----Example----- Input abccccdd Output 7 Input a Output 1 -----Note----- In the first example, one possible longest substring that can be rearranged to form a palindrome is \\"dccaccd\\", and its length is 7. In the second example, since the string has only one character, the longest palindrome substring is the string itself with length 1.","solution":"def longest_palindrome_length(s): Returns the length of the longest substring that can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character count = Counter(s) length = 0 odd_found = False for char, freq in count.items(): if freq % 2 == 0: length += freq else: length += (freq - 1) odd_found = True if odd_found: length += 1 return length"},{"question":"A sports league needs a system to track player statistics and team rosters. You have been asked to design a `Player` class and a `Team` class with the following specifications: **Player Class:** - Attributes: - `name`: A string representing the player\'s name. - `points`: An integer representing the points scored by the player. - Methods: - `score_points(self, points)`: Adds the specified number of points to the player\'s total points. - Parameter: `points` (integer) - The number of points the player has scored. - Raises `ValueError` if `points` is negative. - Returns a string with the player\'s name and updated points (see examples). **Team Class:** - Attributes: - `name`: A string representing the team\'s name. - `players`: A list of `Player` objects representing the players in the team. - Methods: - `add_player(self, player)`: Adds the specified `Player` object to the team\'s roster. - Parameter: `player` (`Player`) - The player to be added to the team. - Returns a string confirming the player has been added (see examples). - `total_points(self)`: Calculates the total points scored by all players in the team. - Returns an integer representing the total points. - `top_scorer(self)`: Finds the player with the highest points in the team. - Returns the `Player` object with the highest points. - If there are no players in the team, raises a `ValueError`. - `get_team_roster(self)`: Lists all players\' names in the team\'s roster. - Returns a list of strings representing the players\' names. Additional Notes: - Points scored should be stored as integers. - Players cannot have negative points. - You can assume that player names are unique within a team. Examples: ```Python # Create players mike = Player(\'Mike\', 30) kate = Player(\'Kate\', 25) john = Player(\'John\', 40) # Players score points mike.score_points(10) # Returns \'Mike now has 40 points.\' kate.score_points(5) # Returns \'Kate now has 30 points.\' # Create team and add players team = Team(\'Warriors\') team.add_player(mike) # Returns \'Mike has been added to the team Warriors.\' team.add_player(kate) # Returns \'Kate has been added to the team Warriors.\' # Calculate total points team.total_points() # Returns 70 # Find top scorer team.top_scorer().name # Returns \'Mike\' # Get team roster team.get_team_roster() # Returns [\'Mike\', \'Kate\'] # Adding another player and calculate total points team.add_player(john) # Returns \'John has been added to the team Warriors.\' team.total_points() # Returns 110 ```","solution":"class Player: def __init__(self, name, points): self.name = name if points < 0: raise ValueError(\\"Points cannot be negative\\") self.points = points def score_points(self, points): if points < 0: raise ValueError(\\"Points to score cannot be negative\\") self.points += points return f\'{self.name} now has {self.points} points.\' class Team: def __init__(self, name): self.name = name self.players = [] def add_player(self, player): self.players.append(player) return f\'{player.name} has been added to the team {self.name}.\' def total_points(self): return sum(player.points for player in self.players) def top_scorer(self): if not self.players: raise ValueError(\\"No players in the team\\") return max(self.players, key=lambda player: player.points) def get_team_roster(self): return [player.name for player in self.players]"},{"question":"You are given an array of integers. Your task is to find out how many times a target integer `t` appears consecutively in the array. If the integer appears consecutively more than once, count only the longest sequence of consecutive appearances. For example, in the array `[2, 2, 2, 3, 3, 3, 3, 2, 2, 1]` and target `3`, the result should be `4` because `3` appears consecutively `4` times. You need to write a function that takes an array of integers and an integer `t` as inputs and returns an integer representing the length of the longest consecutive sequence of `t`. ```Python find_longest_consecutive_sequence([1, 1, 2, 2, 2, 3, 3], 2) = 3 ``` Additional examples: ```Python find_longest_consecutive_sequence([1, 2, 2, 3, 3, 3, 3, 3], 3) = 5 find_longest_consecutive_sequence([4, 4, 4, 5, 4, 4, 4], 4) = 3 find_longest_consecutive_sequence([7, 8, 8, 8, 7, 8, 9], 8) = 3 ```","solution":"def find_longest_consecutive_sequence(arr, t): Finds the length of the longest consecutive sequence of a given target integer `t` in the array `arr`. max_count = 0 current_count = 0 for num in arr: if num == t: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"A matrix is called \\"Toeplitz\\" if every diagonal from top-left to bottom-right has the same element. Write a function `isToeplitzMatrix(matrix)` that takes a 2D list `matrix` as input and returns `True` if the matrix is Toeplitz, and `False` otherwise. # Example: Example 1: ``` Input: matrix = [ [1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2] ] Output: True Explanation: The diagonals are all consistent in the matrix. ``` Example 2: ``` Input: matrix = [ [1, 2], [2, 2] ] Output: False Explanation: The first diagonal with elements [1, 2] is not consistent. ``` # Constraints: - The elements of the matrix will be integers. - The number of rows and columns in the matrix will not exceed 20. - You may assume the matrix dimensions are greater than 0.","solution":"def isToeplitzMatrix(matrix): Returns True if the given matrix is a Toeplitz matrix, else False. rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"You are given a string as input that contains a mix of letters and digits. Your task is to sort the string such that all the digits come before the letters while preserving the relative order of the digits and letters in the original string. For example, if your input is `a1b2c3`, you should return `123abc`. Write a function `sort_string(s: str) -> str` that takes a single string `s` as input and returns the sorted string. Examples: ```Python sort_string(\'a1b2c3\') -> \'123abc\' sort_string(\'ab12cd34\') -> \'1234abcd\' sort_string(\'3a1b2c\') -> \'312abc\' ```","solution":"def sort_string(s): This function takes a string with a mix of letters and digits. It returns a new string with all the digits coming before the letters, while preserving the relative order of the digits and letters in the original string. digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(digits) + \'\'.join(letters)"},{"question":"Your task is to write a function that rotates a given square matrix 90 degrees clockwise. The input to the function will be a 2D list where each sublist represents a row in the matrix. The function should return a new 2D list representing the rotated matrix. Also: * the matrix will always have the same number of rows and columns; * all elements in the matrix will be integers; * the returned matrix should be a new 2D list, not modifying the original input. Some examples: ```python rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] rotate_matrix([ [1, 2], [3, 4] ]) == [ [3, 1], [4, 2] ] rotate_matrix([ [5] ]) == [ [5] ] ``` Write a function that accomplishes this task.","solution":"def rotate_matrix(matrix): Rotates the given square matrix 90 degrees clockwise. Args: matrix (list of list of int): The input square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]"},{"question":"There is a popular list of tasks that a computer engineer needs to complete before releasing their software. Each task has a unique identifier and a dependency represented as a directed acyclic graph (DAG) where each node is a task and an edge from task U to task V means task U must be completed before task V. You need to determine the minimum number of time units required to complete all tasks if at most K tasks can be done concurrently in one time unit. The tasks can only be executed if all its dependencies are resolved. -----Input:----- - First line will contain T, the number of test cases. - For each test case: - The first line contains two integers N and K where N is the number of tasks and K is the maximum number of tasks that can be executed concurrently. - Each of the next N lines contains a string representation of a task identifier followed by zero or more space-separated task identifiers it depends on. -----Output:----- For each test case, output a single line containing the minimum number of time units required to complete all tasks. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 1000 - 1 ≤ K ≤ N - Task identifiers are unique strings of lowercase alphabets with length ≤ 10 - There are no cyclic dependencies in the tasks -----Sample Input:----- 2 4 2 a b a c a d b c 3 2 x y x z y -----Sample Output:----- 3 3 -----EXPLANATION:----- - In the first test case, the tasks can be completed in the following steps: - Time unit 1: Execute tasks \'a\' - Time unit 2: Execute tasks \'b\' and \'c\' (since both depend on \'a\') - Time unit 3: Execute task \'d\' (since it depends on \'b\' and \'c\') Thus, the minimum number of time units is 3. - In the second test case, the tasks can be completed in the following steps: - Time unit 1: Execute task \'x\' - Time unit 2: Execute task \'y\' (depends on \'x\') - Time unit 3: Execute task \'z\' (depends on \'y\') Thus, the minimum number of time units is 3.","solution":"from collections import defaultdict, deque def min_time_units(t, test_cases): results = [] for N, K, tasks in test_cases: # Step 1: Initialize the graph and in-degrees graph = defaultdict(list) in_degrees = {task[0]: 0 for task in tasks} for task in tasks: u = task[0] dependencies = task[1:] in_degrees[u] = len(dependencies) for dep in dependencies: graph[dep].append(u) # Step 2: Topological sort using K kahn\'s algorithm zero_in_degree_queue = deque([task for task in in_degrees if in_degrees[task] == 0]) time_units = 0 while zero_in_degree_queue: task_batch = [] for _ in range(min(K, len(zero_in_degree_queue))): task = zero_in_degree_queue.popleft() task_batch.append(task) for task in task_batch: for neighbor in graph[task]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: zero_in_degree_queue.append(neighbor) time_units += 1 results.append(time_units) return results"},{"question":"Given a list of integers, create a function that finds the maximum difference between any two elements where the larger element comes after the smaller one in the list. If no such elements exist, return 0. Examples: - For the input [2, 3, 10, 2, 4, 8, 1], the function should return 8 (10 - 2). - For the input [7, 9, 5, 6, 3, 2], the function should return 2 (9 - 7). - For the input [10, 8, 7, 6, 5], the function should return 0, as no such elements exist. The function should have optimal time complexity to handle large lists efficiently.","solution":"def max_difference(arr): Finds the maximum difference between any two elements where the larger element comes after the smaller one in the list. :param arr: List of integers :return: Maximum difference if found, otherwise 0 if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for num in arr[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"Given a list of integers, return a new list containing the product of all the integers in the original list except for the integer at the current position. For example: product_except_self([1,2,3,4]) = [24,12,8,6] and product_except_self([2,3,4,5]) = [60,40,30,24] You must solve this problem without using division and in O(n) time complexity.","solution":"def product_except_self(nums): Returns a list such that, at each index i, the element is the product of all the elements of nums except nums[i]. length = len(nums) # Step 1: Calculate prefix product array prefix_products = [1] * length for i in range(1, length): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Step 2: Calculate suffix product array and final result in a single pass suffix_product = 1 for i in range(length - 1, -1, -1): prefix_products[i] *= suffix_product suffix_product *= nums[i] return prefix_products"},{"question":"# Detail You are given an array of integers representing the daily temperatures, where temperatures[i] is the temperature on the ith day. You need to return an array answer such that answer[i] is the number of days you would have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, put 0 instead. # Task Write a function ```dailyTemperatures(temperatures)``` that takes an array of integers ```temperatures``` representing the daily temperatures and returns an array of integers ```answer``` where answer[i] is the number of days until a warmer temperature or 0 if there is none. Examples ``` temperatures = [73, 74, 75, 71, 69, 72, 76, 73] answer = [1, 1, 4, 2, 1, 1, 0, 0] temperatures = [30, 40, 50, 60] answer = [1, 1, 1, 0] temperatures = [30, 20, 10, 5] answer = [0, 0, 0, 0] ```","solution":"def dailyTemperatures(temperatures): Returns an array of integers answer where answer[i] is the number of days until a warmer temperature or 0 if there is none, given an array of integers temperatures representing the daily temperatures. answer = [0] * len(temperatures) stack = [] # pairs: (index, temperature) for i, temp in enumerate(temperatures): while stack and temp > stack[-1][1]: index, _ = stack.pop() answer[index] = i - index stack.append((i, temp)) return answer"},{"question":"Write a function that takes an array of integers and returns the product of all the integers in the array except the one at the current index. The result must be returned as an array of products. Example 1: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: [2, 3, 4, 5] Output: [60, 40, 30, 24] Note: - The array length should be at least 2. - The algorithm should run without using division. - Your solution should have a linear runtime complexity.","solution":"def product_except_self(nums): Returns an array such that each element is the product of all the elements in the original array except the one at the current index. n = len(nums) if n <= 1: raise ValueError(\\"Array length must be at least 2\\") # Create two arrays to store the prefix and suffix products prefix_products = [1] * n suffix_products = [1] * n # Calculate the prefix products for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Calculate the suffix products for i in range(n - 2, -1, -1): suffix_products[i] = suffix_products[i + 1] * nums[i + 1] # Calculate the result by multiplying the prefix and suffix products result = [prefix_products[i] * suffix_products[i] for i in range(n)] return result"},{"question":"Ananya is a fan of palindromes. She loves creating palindromes from given strings. A palindrome is a string that reads the same forwards and backwards. Ananya wants to know how many ways she can rearrange the characters of a given string to form a palindrome. Can you help her figure this out? -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single string S which consists of lowercase English letters. -----Output----- For each test case, output a single line containing one integer — the number of distinct palindromic permutations of the input string S. -----Constraints----- - 1 le T le 10 - 1 le |S| le 15 -----Example Input----- 2 aabb abc -----Example Output----- 2 0 -----Explanation----- Example case 1: There are 2 distinct palindromic permutations: \\"abba\\" and \\"baab\\". Example case 2: There are no palindromic permutations of the string \\"abc\\". It is impossible to rearrange the characters to form a palindrome.","solution":"from collections import Counter from math import factorial from functools import reduce from operator import mul def num_palindromic_permutations(S): Returns the number of distinct palindromic permutations of the input string S. # Count the occurrences of each character char_count = Counter(S) # Count how many characters have an odd number of appearances odd_count_chars = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd count, we cannot form a palindrome if odd_count_chars > 1: return 0 # Calculating the number of permutations # Divide the counts by 2 (since each palindrome half will reflect the other) half_counts = [count // 2 for count in char_count.values()] # Number of characters in the \\"half\\" string half_len = sum(half_counts) # The number of palindromic permutations is calculated by permutations formula divided by factorials of each count numerator = factorial(half_len) denominator = reduce(mul, (factorial(count) for count in half_counts if count > 0), 1) return numerator // denominator def palindromic_permutations_count(t, cases): results = [] for s in cases: results.append(num_palindromic_permutations(s)) return results"},{"question":"A company is developing a new software for their smart home device. The device contains a feature which constantly monitors the temperature of various rooms in a house. If the temperature in any room deviates too much from the others, an alert should be triggered. You are given a list of integers representing the temperature readings from different rooms. Your task is to write a function that takes this list of temperatures and an integer `T` (the permissible temperature threshold) and returns a boolean indicating whether any temperature deviates from the average temperature by more than `T`. - The function should calculate the average temperature of all the rooms. - Compare each room\'s temperature to this average. - If any deviation is greater than `T`, the function should return `True` indicating an alert. - Otherwise, return `False`. -----Constraints----- - 1 ≤ len(temperatures) ≤ 1000 - -100 ≤ temperature readings ≤ 100 - 0 ≤ T ≤ 100 -----Function Signature----- ```python def temperature_alert(temperatures: List[int], T: int) -> bool: ``` -----Input----- - A list of integers `temperatures` representing the temperature readings of different rooms. - An integer `T` representing the permissible temperature threshold. -----Output----- - A boolean value indicating whether any room\'s temperature deviates from the average by more than `T`. -----Sample Input----- ```python temperatures = [21, 23, 22, 20, 24] T = 2 ``` -----Sample Output----- ```python False ``` -----Explanation----- - The average temperature of the given rooms is `(21 + 23 + 22 + 20 + 24) / 5 = 22`. - None of the room temperatures deviate from this average by more than `2`. - Thus, the function returns `False`.","solution":"from typing import List def temperature_alert(temperatures: List[int], T: int) -> bool: Returns True if any room\'s temperature deviates from the average by more than T. if not temperatures: return False average_temp = sum(temperatures) / len(temperatures) for temp in temperatures: if abs(temp - average_temp) > T: return True return False"},{"question":"Design a class called `SmartTV`, which simulates the operation of a smart television with different apps and channels. Implement the `SmartTV` class: - `SmartTV()` Initializes an empty smart TV with no apps installed. - `void installApp(string appName)` Installs an app with the name `appName`. If the app is already installed, it leaves the state unchanged. - `void uninstallApp(string appName)` Uninstalls an app with the name `appName`. If the app is not installed, it leaves the state unchanged. - `string changeChannel(string appName, int channelNumber)` Changes to a specific `channelNumber` on the app named `appName`. If the app is not installed, return \\"App not installed\\". If the channel is successfully changed, return \\"Channel changed to X on appName\\", where X is the `channelNumber`. Example: Input: [\\"SmartTV\\", \\"installApp\\", \\"installApp\\", \\"changeChannel\\", \\"changeChannel\\", \\"uninstallApp\\", \\"changeChannel\\"] [[], [\\"Netflix\\"], [\\"YouTube\\"], [\\"Netflix\\", 5], [\\"Hulu\\", 10], [\\"YouTube\\"], [\\"YouTube\\", 2]] Output: [null, null, null, \\"Channel changed to 5 on Netflix\\", \\"App not installed\\", null, \\"App not installed\\"] Explanation: SmartTV tv = new SmartTV(); tv.installApp(\\"Netflix\\"); // Install the Netflix app. tv.installApp(\\"YouTube\\"); // Install the YouTube app. tv.changeChannel(\\"Netflix\\", 5); // Change to channel 5 on Netflix. Returns: \\"Channel changed to 5 on Netflix\\" tv.changeChannel(\\"Hulu\\", 10); // Attempt to change to channel 10 on Hulu, but Hulu is not installed. Returns: \\"App not installed\\" tv.uninstallApp(\\"YouTube\\"); // Uninstall the YouTube app. tv.changeChannel(\\"YouTube\\", 2); // Attempt to change to channel 2 on YouTube, but YouTube is uninstalled. Returns: \\"App not installed\\" Constraints: - 1 <= appName.length <= 20 - appName and channelNumber are only present in the arguments of the methods when relevant. - appName consist of uppercase or lowercase English letters. - The number of calls to any function does not exceed 5000.","solution":"class SmartTV: def __init__(self): Initializes an empty smart TV with no apps installed. self.installed_apps = set() def installApp(self, appName): Installs an app with the name appName. If already installed, state remains unchanged. self.installed_apps.add(appName) def uninstallApp(self, appName): Uninstalls an app with the name appName. If not installed, state remains unchanged. self.installed_apps.discard(appName) def changeChannel(self, appName, channelNumber): Changes to a specific channelNumber on the app named appName. if appName not in self.installed_apps: return \\"App not installed\\" return f\\"Channel changed to {channelNumber} on {appName}\\""},{"question":"Given an array of integers, your task is to return a new array such that each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. Example 1: Input: `[1, 2, 3, 4, 5]` Output: `[120, 60, 40, 30, 24]` Example 2: Input: `[3, 2, 1]` Output: `[2, 3, 6]` **Constraints:** 1. The length of the input array will be at least 1 and at most 10^4. 2. Elements of the array will be integers in the range `[-10, 10]`. **Note:** - Solve it using a solution that runs in O(n) time and without using division.","solution":"def product_except_self(nums): Given an array nums, returns an array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. length = len(nums) # Initialize arrays to hold the products from the left and right left_products = [1] * length right_products = [1] * length result = [1] * length # Calculate left products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Develop a function `find_missing_number(arr)` that returns the missing number from an array containing integers ranging from 1 to n (inclusive). The array contains n-1 of these integers, with no duplicates. You should aim for a solution that runs in O(n) time complexity and uses O(1) additional space. **Example:** Input: ```python arr = [3, 7, 1, 2, 8, 4, 5] ``` Output: ```python 6 ``` Explanation: The array contains numbers from 1 to 8, with 6 missing.","solution":"def find_missing_number(arr): Finds the missing number in an array containing integers ranging from 1 to n (inclusive) with one missing number. Parameters: arr (list): The input array containing n-1 integers from 1 to n Returns: int: The missing integer n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) missing_number = total_sum - actual_sum return missing_number"},{"question":"The CodingWizards Academy has created a fun challenge to teach young programmers about merging arrays. The challenge is simple: Given two sorted arrays, you need to merge them into a single sorted array. Your task is to implement this function in your favorite programming language. -----Input----- The first line of input contains an integer T, the number of test cases. Each test case contains three lines: 1. An integer n, the size of the first sorted array. 2. The first sorted array containing n integers. 3. An integer m, the size of the second sorted array. 4. The second sorted array containing m integers. -----Output----- For each test case, output a single line containing the merged sorted array. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n, m ≤ 10^5 - -10^9 ≤ array elements ≤ 10^9 -----Example----- Input: 2 4 1 3 5 7 5 2 4 6 8 9 3 10 20 30 2 5 15 Output: 1 2 3 4 5 6 7 8 9 5 10 15 20 30 -----Explanation----- Example case 1 merges [1, 3, 5, 7] and [2, 4, 6, 8, 9] into [1, 2, 3, 4, 5, 6, 7, 8, 9]. Example case 2 merges [10, 20, 30] and [5, 15] into [5, 10, 15, 20, 30].","solution":"def merge_sorted_arrays(n, arr1, m, arr2): Merges two sorted arrays into a single sorted array. Parameters: n (int): Size of the first sorted array. arr1 (list): The first sorted array. m (int): Size of the second sorted array. arr2 (list): The second sorted array. Returns: list: Merged sorted array. i, j = 0, 0 merged_array = [] while i < n and j < m: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < n: merged_array.append(arr1[i]) i += 1 while j < m: merged_array.append(arr2[j]) j += 1 return merged_array def merge_test_cases(T, test_cases): Processes multiple test cases for merging sorted arrays. Parameters: T (int): Number of test cases. test_cases (list): List containing the test case details. Returns: list: Merged sorted arrays for each test case. results = [] for i in range(T): n, arr1, m, arr2 = test_cases[i] merged_array = merge_sorted_arrays(n, arr1, m, arr2) results.append(merged_array) return results"},{"question":"You are given an array of integers and a target integer. Implement a function that determines whether any two distinct integers in the array sum up to the target value. The function should return `true` if such a pair exists, and `false` otherwise. For example: - If we are given `findPair([1, 2, 3, 4], 5)`, the function should return `true` because 1 and 4 sum to 5. - If we are given `findPair([1, 2, 3, 4], 8)`, the function should return `false` because no two distinct integers sum to 8. - If we are given `findPair([3, 1, 5, 7, -8], -7)`, the function should return `true` because -8 and 1 sum to -7. Consider the following edge cases: - `findPair([], 3)` should return `false` because the array is empty. - `findPair([1], 1)` should return `false` because there is only one number in the array. - `findPair([1, 1], 2)` should return `true` because 1 and 1 sum to 2. Note: - The input array may contain negative numbers. - The same element cannot be used twice to form a pair. - The input array may contain duplicate numbers. Function signature: ```python def findPair(nums: list[int], target: int) -> bool: pass ``` Your task is to implement the `findPair` function.","solution":"def findPair(nums: list[int], target: int) -> bool: Determines if any two distinct integers in the array sum up to the target value. Args: nums (list[int]): List of integers. target (int): Target sum. Returns: bool: True if there exists at least one pair of distinct integers that sum to the target, False otherwise. seen_numbers = set() for num in nums: if target - num in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"You are given a string s consisting of lowercase English letters. You need to transform the string into a palindrome by inserting the minimum number of characters. You can insert characters at any position (including the beginning or end). Write a program to determine the minimum number of characters needed to make the string a palindrome. For example, given the string \\"abca\\", you can insert \'c\' at the beginning to make it \\"cabac\\" (1 insertion), which is a palindrome. -----Input----- The first and only line contains a string s (1 le text{length}(s) le 10^4) consisting of lowercase English letters. -----Output----- Output a single integer - the minimum number of characters needed to insert to make the string a palindrome. -----Examples----- Input abca Output 1 Input race Output 3 -----Note----- In the first example, inserting \'c\' at the beginning or \'a\' at the end transforms the string into a palindrome with one insertion. In the second example, inserting \'e\' at the beginning, \'c\' after \'r\', and \'r\' at the end transforms the string \\"race\\" into the palindrome \\"ecarace\\" with three insertions.","solution":"def min_insertions_to_palindrome(s): def lcs(X, Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for i in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] rev = s[::-1] lcs_len = lcs(s, rev) return len(s) - lcs_len"},{"question":"Write a function that takes an array of integers and returns a new array which contains every integer in the original array that is greater than the average value of the integers in the original array. The order of the integers in the new array should be the same as their order in the original array. If the array is empty, return an empty array. If all integers are the same, return an empty array. Example: Given the array `[1, 2, 3, 4, 5]`, the average value is `3`, and the function should return `[4, 5]`. Given the array `[10, 10, 10, 10]`, the average value is `10`, and the function should return `[]`.","solution":"def greater_than_average(nums): Returns a new list containing elements from the input list \'nums\' that are greater than the average value of the elements in \'nums\'. Preserves the order of elements. Args: nums (list of int): The input list of integers. Returns: list of int: A new list with only the elements greater than the average value. if not nums: return [] average = sum(nums) / len(nums) result = [num for num in nums if num > average] return result"},{"question":"Task A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and capitalization. For example, \\"A man, a plan, a canal, Panama\\" is a palindrome, but \\"Hello, World\\" is not. Write a function `isPalindrome(s)` that checks whether a given string `s` is a palindrome. The function should return `True` if `s` is a palindrome, and `False` otherwise. The check should be case-insensitive and ignore all non-alphanumeric characters. Input: - A string `s`. The string may contain letters, numbers, spaces, and punctuation. The length of `s` will be at most 1000 characters. Output: - A boolean value `True` or `False`. Example: ```python print(isPalindrome(\\"A man, a plan, a canal, Panama\\")) # Expected output: True print(isPalindrome(\\"race a car\\")) # Expected output: False print(isPalindrome(\\"No \'x\' in Nixon\\")) # Expected output: True print(isPalindrome(\\"\\")) # Expected output: True print(isPalindrome(\\"Was it a car or a cat I saw?\\")) # Expected output: True ``` Constraints: - The function should handle both uppercase and lowercase letters. - The function should ignore all characters that are not letters or numbers. - The function should be case-insensitive.","solution":"def isPalindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"You are tasked with implementing a function that takes an integer as input and determines if it is a \\"Beautiful Number\\". A Beautiful Number is defined as a number that remains the same when reversed (a palindrome) and also has an even sum of its digits. -----Input----- The input consists of a single integer `n` (0 <= n <= 10^6). -----Output----- The output should be a single line: \\"Beautiful\\" if the number is a Beautiful Number, otherwise \\"Not Beautiful\\". -----Example----- Input: 1221 Output: Beautiful Input: 1234 Output: Not Beautiful","solution":"def is_beautiful_number(n): Determines if the given number is a Beautiful Number. A Beautiful Number is defined as a number that: 1. Remains the same when reversed (a palindrome). 2. Has an even sum of its digits. Parameters: - n: Integer (0 <= n <= 10^6) Returns: - \\"Beautiful\\" if n is a Beautiful Number, otherwise \\"Not Beautiful\\". n_str = str(n) if n_str != n_str[::-1]: return \\"Not Beautiful\\" digit_sum = sum(int(digit) for digit in n_str) if digit_sum % 2 == 0: return \\"Beautiful\\" else: return \\"Not Beautiful\\""},{"question":"Write a function that takes a string parameter and reverses the characters of every word. A word is defined as a sequence of non-space characters. The words in the string will be separated by a single space. The function should return the modified string with reversed words while preserving the order of the words themselves. ```python reverse_words(\\"hello world\\") ==> \\"olleh dlrow\\" reverse_words(\\"abcd efgh\\") ==> \\"dcba hgfe\\" ```","solution":"def reverse_words(s): Reverses the characters of every word in the input string s. Parameters: s (str): The input string containing words separated by a single space. Returns: str: The modified string with each word\'s characters reversed, while preserving the original order of the words. return \' \'.join(word[::-1] for word in s.split())"},{"question":"Given a string `s`, return the length of the longest substring containing exactly two distinct characters. The substring should only consist of alphabetic characters and no spaces. For example, for the string `eceba`, the longest substring with two distinct characters is `ece`, with a length of 3. Similarly, for the string `ccaabbb`, the longest substring is `aabbb`, with a length of 5. ```if:csharp Documentation: Kata.FindLongestTwoDistinct Method (String) Returns the length of the longest substring containing exactly two distinct characters in a string. Syntax public static int FindLongestTwoDistinct( string str ) Parameters str Type: System.String The string to be processed. Return Value Type: System.Int32 The length of the longest substring containing exactly two distinct characters, or 0 if no such substring exists. Exceptions Exception Condition ArgumentNullException str is null. ```","solution":"def longest_substring_with_two_distinct(s: str) -> int: from collections import defaultdict if not s: return 0 # Dictionary to store frequency of characters in the current window char_count = defaultdict(int) left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] += 1 # If we have more than 2 distinct characters, reduce the window size while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function `canPartitionKSubsets(nums, k)` that takes an array of integers `nums` and an integer `k` as input and returns `True` if it is possible to divide the array into `k` non-empty subsets whose sums are all equal, otherwise returns `False`. # Example: ```python canPartitionKSubsets([4, 3, 2, 3, 5, 2, 1], 4) # returns True # Explanation: The array can be divided into 4 subsets with equal sum: (5), (1, 4), (2, 3), (2, 3) canPartitionKSubsets([1, 2, 3, 4], 3) # returns False # Explanation: It is not possible to divide the array into 3 subsets with equal sum. ``` # Constraints: - The frequency of each element in `nums` is at least 1. - 1 ≤ len(nums) ≤ 16 - 1 ≤ nums[i] ≤ 10000 - 1 ≤ k ≤ len(nums) # Note: 1. The sum of the elements in the array `nums` must be divisible by `k` for the partition to be possible. 2. If k equals 1, the function should return `True` as the entire array itself is the only valid subset. 3. The function should be efficient enough to handle the constraints provided, aiming for a solution that evaluates in reasonable time for len(nums) up to 16.","solution":"def canPartitionKSubsets(nums, k): Determines if it is possible to divide the array `nums` into `k` non-empty subsets with equal sum. total_sum = sum(nums) if total_sum % k != 0: return False target = total_sum // k nums.sort(reverse=True) used = [False] * len(nums) def backtrack(index, k, current_sum): if k == 1: return True if current_sum == target: return backtrack(0, k - 1, 0) for i in range(index, len(nums)): if not used[i] and current_sum + nums[i] <= target: used[i] = True if backtrack(i + 1, k, current_sum + nums[i]): return True used[i] = False return False return backtrack(0, k, 0)"},{"question":"**Task** Implement a function that takes a list of words and finds the longest word that can be made from the combination of other words in the list. Each word in the list can only be used once and it cannot be constructed from the current word itself. **Example** For the input `words = [\\"rat\\", \\"cat\\", \\"cats\\", \\"dog\\", \\"catsdog\\"]`, the output should be `\\"catsdog\\"`. Explanation: ``` \\"catsdog\\" can be constructed from \\"cats\\" + \\"dog\\". Other possible word constructions: \\"cats\\" can be constructed from \\"cat\\" + \\"s\\". \\"rat\\" and \\"dog\\" cannot be constructed from any combination of the words in the list. ``` **Input/Output** - `[input]` array of strings `words` A list of non-empty strings. - `[output]` a string The longest word that can be constructed from the combination of other words in the list. If there are multiple words of the same length, return the one which appears first in the list. If no such word exists, return an empty string.","solution":"def can_construct(word, word_set, original_word): if word in word_set and word != original_word: return True for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and can_construct(suffix, word_set, original_word): return True return False def find_longest_word(words): word_set = set(words) longest_word = \\"\\" for word in words: if can_construct(word, word_set, word) and len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Your story You have recently become fascinated with palindrome numbers and decided to write a program to explore them further. You want to create a function that checks if a given number is a Palindrome Prime. A Palindrome Prime is a number that is both a palindrome and a prime number. Additionally, you want to generate a list of the first n Palindrome Primes. Your Plan * A number is considered a palindrome if it reads the same forwards and backwards. For example, 121 is a palindrome, but 123 is not. * A number is considered a prime if it is greater than 1 and has no positive divisors other than 1 and itself. For instance, 2, 3, and 5 are primes, while 4 is not. * Given a positive integer n, your task is to find the first n Palindrome Primes and return the list of these numbers. Input * A single integer, n, such that 1 <= n <= 1000, indicating the number of Palindrome Primes to find. Output * A list containing the first n Palindrome Primes in ascending order. Some examples ``` 3 [2, 3, 5] 10 [2, 3, 5, 7, 11, 101, 131, 151, 181, 191] 5 [2, 3, 5, 7, 11] 8 [2, 3, 5, 7, 11, 101, 131, 151] 15 [2, 3, 5, 7, 11, 101, 131, 151, 181, 191, 313, 353, 373, 383, 727] ``` Enjoy finding these intriguing Palindrome Primes!","solution":"def is_prime(num): Return True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def is_palindrome(num): Return True if num is a palindrome number, otherwise False. return str(num) == str(num)[::-1] def palindrome_primes(n): Return a list containing the first n palindrome prime numbers. result = [] candidate = 2 while len(result) < n: if is_prime(candidate) and is_palindrome(candidate): result.append(candidate) candidate += 1 return result"},{"question":"You are given a string representing a complex number. Your task is to implement a function that returns the magnitude of this complex number. A complex number is of the form `a + bi`, where `a` and `b` are integers. Examples: ```python magnitude(\\"3 + 4i\\") //=> 5.0 magnitude(\\"1 + 1i\\") //=> 1.4142135623730951 magnitude(\\"0 + 0i\\") //=> 0.0 ``` Documentation: ```python magnitude(complex_number); ``` - complex_number - string representing the complex number in the form `a + bi` The magnitude of a complex number `a + bi` is calculated using the formula `sqrt(a^2 + b^2)`, where `sqrt` denotes the square root function.","solution":"import math def magnitude(complex_number): Calculates the magnitude of a complex number represented as a string. Args: complex_number (str): The complex number in the form \'a + bi\' Returns: float: The magnitude of the complex number # Remove the \'i\' and split the string to extract \'a\' and \'b\' complex_number = complex_number.replace(\\"i\\", \\"\\") a_part, b_part = complex_number.split(\\"+\\") # Convert to integers a = int(a_part.strip()) b = int(b_part.strip()) # Calculate magnitude return math.sqrt(a**2 + b**2)"},{"question":"You have a fleet of drones to deliver packages. Each drone can carry a certain maximum weight. You have a list of packages, each with a unique weight. A package can only be delivered by a drone if its weight is less than or equal to the drone\'s maximum carrying capacity. Given an array `drones` where `drones[i]` represents the maximum carrying capacity of the `i-th` drone, and an array `packages` where `packages[j]` represents the weight of the `j-th` package, your task is to determine the maximum number of packages that can be delivered using the available drones. A drone can deliver at most one package. Also, a package can only be delivered once. -----Input----- The first line contains an integer `n` (`1 ≤ n ≤ 1000`) — the number of drones. The second line contains `n` integers, where `drones[i]` (`1 ≤ drones[i] ≤ 10^4`) is the maximum carrying capacity of the `i-th` drone. The third line contains an integer `m` (`1 ≤ m ≤ 1000`) — the number of packages. The fourth line contains `m` integers, where `packages[j]` (`1 ≤ packages[j] ≤ 10^4`) is the weight of the `j-th` package. -----Output----- Print a single integer — the maximum number of packages that can be delivered. -----Example----- Input 3 10 5 7 4 8 5 6 7 Output 3 Note: In the given example, the first drone with a capacity of 10 can deliver the package with a weight of 8, the second drone with a capacity of 7 can deliver the package with a weight of 7, and the third drone with a capacity of 5 can deliver the package with a weight of 5. Therefore, the maximum number of packages that can be delivered is 3.","solution":"def max_packages(drones, packages): Determines the maximum number of packages that can be delivered by the drones :param drones: list of integers representing the capacities of the drones :param packages: list of integers representing the weights of the packages :return: maximum number of packages that can be delivered drones.sort(reverse=True) packages.sort(reverse=True) i = 0 j = 0 delivered_packages = 0 while i < len(drones) and j < len(packages): if drones[i] >= packages[j]: delivered_packages += 1 i += 1 j += 1 return delivered_packages"},{"question":"A company is planning to build several office buildings along a straight road and wants to place utility poles such that each building has access to electricity. The company has a list of the positions of the buildings along the road and the positions where utility poles can be placed. Your task is to determine the minimum number of utility poles needed to provide electricity to all the buildings. Each building can receive electricity from the closest utility pole that is within a certain maximum distance `D`. A utility pole can serve multiple buildings as long as they are within the distance `D`. -----Input----- Input will begin with an integer `T`, the number of test cases that follow. Each test case will begin with two space-separated integers `N` and `M`, the number of buildings and utility pole positions respectively. The next line contains `N` space-separated integers representing the positions of the buildings. The next line contains `M` space-separated integers representing the positions of the utility poles. The final line contains a single integer `D`, which is the maximum distance a building can be from a utility pole. -----Output----- For each test case, print a single integer representing the minimum number of utility poles needed to provide electricity to all the buildings. If it is not possible to cover all buildings with the given utility poles and distance, print -1. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 100 - 0 ≤ D ≤ 1000 - Positions are integers such that 0 ≤ positions ≤ 10000 -----Sample Input----- 2 3 3 2 5 8 1 5 9 3 4 2 1 4 7 10 2 6 2 -----Sample Output----- 2 -1 -----Explanation----- In the first test case, the minimum number of utility poles needed is 2. The buildings at positions 2 and 5 can be covered by the pole at position 1 (distance 3) and the building at position 8 can be covered by the pole at position 9 (distance 1). In the second test case, there is no way to cover the building at position 7 and 10 with the utility poles at positions 2 and 6 within the maximum distance of 2. Hence, the output is -1.","solution":"def min_poles_needed(T, test_cases): results = [] for i in range(T): N, M, buildings, poles, D = test_cases[i] buildings.sort() poles.sort() used_poles = set() current_pole_index = 0 def within_distance(building, pole): return abs(building - pole) <= D for building in buildings: while current_pole_index < M and not within_distance(building, poles[current_pole_index]): current_pole_index += 1 if current_pole_index == M: results.append(-1) break used_poles.add(poles[current_pole_index]) if len(results) == i: results.append(len(used_poles)) return results"},{"question":"Given a string of words, where all words are separated by a single whitespace, write a function that reverses the letters in each word individually while maintaining the order of words in the string. Return the transformed string. Examples: ``` Input: \\"hello world\\" Output: \\"olleh dlrow\\" Input: \\"The quick brown fox\\" Output: \\"ehT kciuq nworb xof\\" Input: \\"Coding is fun\\" Output: \\"gnidoC si nuf\\" ``` Note: - The input string will not contain any leading or trailing whitespace. - The input string will only contain printable ASCII characters and spaces, without any punctuation.","solution":"def reverse_letters_in_words(s): Reverses the letters in each word of the string while maintaining the order of words in the string. Parameters: s (str): The input string containing words separated by a single whitespace. Returns: str: The string with each word\'s letters reversed. return \' \'.join([word[::-1] for word in s.split()])"},{"question":"A group of treasure hunters are trying to unlock a secret door to a hidden treasure. The door has a numeric keypad that accepts a positive integer input. The door opens if and only if the input number is a **happy number**. A happy number is defined as follows: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Your task is to write a program that determines whether a list of given integers are happy numbers or not. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains a single positive integer N. -----Output----- For each test case, output \\"YES\\" if N is a happy number, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^9 -----Example----- Input: 3 19 2 100 Output: YES NO YES -----Explanation----- For the first test case, starting with 19, the sequence is 19 -> 1^2 + 9^2 = 82 -> 8^2 + 2^2 = 64 -> 6^2 + 4^2 = 52 -> 5^2 + 2^2 = 29 -> 2^2 + 9^2 = 85 -> 8^2 + 5^2 = 89 -> 8^2 + 9^2 = 145 -> 1^2 + 4^2 + 5^2 = 42 -> 4^2 + 2^2 = 20 -> 2^2 + 0^2 = 4 -> 4^2 = 16 -> 1^2 + 6^2 = 37 -> 3^2 + 7^2 = 58 -> 5^2 + 8^2 = 89 and this loops back to 89. Since it does not reach 1, it is not a happy number. For the second test case, starting with 2, the sequence is 2 -> 2^2 = 4 -> 4^2 = 16 -> 1^2 + 6^2 = 37 -> 3^2 + 7^2 = 58 -> 5^2 + 8^2 = 89 -> and keeps on repeating without reaching 1. Hence it is not a happy number. For the third test case, starting with 100, the sequence is 100 -> 1^2 + 0^2 + 0^2 = 1. Hence it is a happy number.","solution":"def is_happy_number(n): def get_next(number): return sum(int(ch)**2 for ch in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1 def determine_happy_numbers(numbers): results = [] for num in numbers: if is_happy_number(num): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(data): T = int(data[0]) numbers = [int(n) for n in data[1:T+1]] return determine_happy_numbers(numbers)"},{"question":"Write a function named `flatten_dictionary` that takes a dictionary with potentially nested dictionaries as an input and returns a flattened dictionary where the keys are the path to each value in the original dictionary. The path key should be formatted by concatenating keys at each level with a period (`.`) in between. For example, given the following dictionary: ```python { \\"key1\\": \\"1\\", \\"key2\\": { \\"key3\\": \\"2\\", \\"key4\\": { \\"key5\\": \\"3\\" } } } ``` the function should return the flattened dictionary: ```python { \\"key1\\": \\"1\\", \\"key2.key3\\": \\"2\\", \\"key2.key4.key5\\": \\"3\\" } ``` Consider edge cases such as: - Nested dictionaries with empty dictionaries, where they should be skipped. - Nested dictionaries with keys that have empty string values.","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. The keys in the flattened dictionary are concatenated with a period or the given separator. :param d: The dictionary to flatten. :param parent_key: The base key to use for nested items. :param sep: The separator to use for key concatenation. Default is \'.\'. :return: A flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict) and v: items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Complete the function that takes a list of integers and a target integer as input, and returns the indices of the two numbers such that they add up to the target. Assume that there is exactly one solution, and you may not use the same element twice. **Notes:** * Your solution should have a time complexity of O(n). * You may assume that each input would have exactly one solution. Examples ``` numbers = [2, 7, 11, 15], target = 9 --> [0, 1] numbers = [3, 2, 4], target = 6 --> [1, 2] numbers = [3, 3], target = 6 --> [0, 1] ``` **Function Signature:** ```python def find_two_sum(numbers: List[int], target: int) -> List[int]: # your code here ```","solution":"from typing import List def find_two_sum(numbers: List[int], target: int) -> List[int]: Returns the indices of the two numbers that add up to the target. num_dict = {} for i, num in enumerate(numbers): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return []"},{"question":"We need you to implement a function that processes a list of daily temperatures. Each day\'s temperature is compared to the first day\'s temperature, and we categorize whether it was \\"hotter,\\" \\"colder,\\" or \\"the same.\\" Your task is to write a function that receives a list of integers representing daily temperatures and returns a list of strings describing the relative temperature compared to the first day. The function signature should be: ```python def compare_temperatures(data: List[int]) -> List[str]: ``` For example: ```python compare_temperatures([70, 74, 68, 70, 72]) ``` The expected output would be: ```python [\'the same\', \'hotter\', \'colder\', \'the same\', \'hotter\'] ``` Explanation: - The temperature on day 0 (70°F) is the baseline for comparison. - Day 1 (74°F) is \\"hotter\\" than day 0. - Day 2 (68°F) is \\"colder\\" than day 0. - Day 3 (70°F) is \\"the same\\" as day 0. - Day 4 (72°F) is \\"hotter\\" than day 0. **Constraints:** - The input list will have at least one temperature reading. - You may assume all temperature readings are valid integers within a reasonable range for daily temperatures. - The function must efficiently handle lists of temperatures of up to 10,000 entries.","solution":"from typing import List def compare_temperatures(data: List[int]) -> List[str]: Compares each day\'s temperature to the first day\'s temperature and describes whether it was \\"hotter,\\" \\"colder,\\" or \\"the same.\\" Parameters: - data (List[int]): A list of integers representing daily temperatures. Returns: - List[str]: A list of strings describing the relative temperature to the first day\'s temperature. if not data: return [] first_day_temp = data[0] result = [] for temp in data: if temp > first_day_temp: result.append(\'hotter\') elif temp < first_day_temp: result.append(\'colder\') else: result.append(\'the same\') return result"},{"question":"Your task is to write a function that takes a list of potentially mixed data types (integers, strings, floats) and returns a dictionary summarizing the count of each data type in the list. --- # Examples ```python >>> summarize_types([1, 2.5, \\"hello\\", 3, \\"world\\", 4.0, 5]) {\'int\': 3, \'float\': 2, \'str\': 2} >>> summarize_types([\\"apple\\", \\"banana\\", 7, 8.2, 3.14]) {\'int\': 1, \'float\': 2, \'str\': 2} >>> summarize_types([True, \\"False\\", 3, 2.0, True]) {\'int\': 1, \'float\': 1, \'str\': 1, \'bool\': 2} ``` --- The function should differentiate between integers, strings, floats, and booleans and output the counts for each type correctly. Good luck!","solution":"def summarize_types(data_list): Returns a dictionary summarizing the count of each data type in the list. type_counts = {} for item in data_list: item_type = type(item).__name__ if item_type in type_counts: type_counts[item_type] += 1 else: type_counts[item_type] = 1 return type_counts"},{"question":"Design a class `Robot` which simulates a robot moving in a 2D grid. Business Rules: - A robot can move in four directions: \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\". - The robot starts at the origin (0,0) in the grid. - Each movement will change the robot\'s position by one unit in the specified direction. - You need to keep track of all the positions visited by the robot. - You should be able to retrieve the robot\'s current position. - The robot should have a method to retrieve its path history of positions visited. - If the robot revisits a position, don\'t add it to the path history again. - Implement methods to retrieve the total distance traveled by the robot and the number of unique positions visited. Move Rules: - \\"UP\\" will increase the y-coordinate by 1. - \\"DOWN\\" will decrease the y-coordinate by 1. - \\"LEFT\\" will decrease the x-coordinate by 1. - \\"RIGHT\\" will increase the x-coordinate by 1. Path History Rules: - The path history contains each unique position that the robot has visited, not in any order. - The original position (0,0) is considered as the first unique position visited. Distance Calculation: - The distance traveled is calculated as the absolute number of steps taken, regardless of direction. Code Examples: ```python r2d2 = Robot() r2d2.move(\\"UP\\") # => None r2d2.move(\\"RIGHT\\") # => None r2d2.get_position() # => (1, 1) r2d2.get_path_history() # => [(0, 0), (0, 1), (1, 1)] r2d2.move(\\"LEFT\\") # => None r2d2.get_position() # => (0, 1) r2d2.get_path_history() # => [(0, 0), (0, 1), (1, 1)] r2d2.move(\\"DOWN\\") # => None r2d2.get_position() # => (0, 0) r2d2.get_path_history() # => [(0, 0), (0, 1), (1, 1)] r2d2.get_distance_traveled() # => 4 r2d2.get_unique_positions_count() # => 3 ``` The class should be defined as follows: - `move(direction)`: Takes one of the \\"UP\\", \\"DOWN\\", \\"LEFT\\", \\"RIGHT\\" strings and updates the robot\'s position. - `get_position()`: Returns the current position as a tuple `(x, y)`. - `get_path_history()`: Returns a list of tuples representing each unique position visited. - `get_distance_traveled()`: Returns the total number of steps taken by the robot. - `get_unique_positions_count()`: Returns the total number of unique positions visited by the robot.","solution":"class Robot: def __init__(self): self.x = 0 self.y = 0 self.history = set() self.history.add((self.x, self.y)) self.steps = 0 def move(self, direction): if direction == \\"UP\\": self.y += 1 elif direction == \\"DOWN\\": self.y -= 1 elif direction == \\"LEFT\\": self.x -= 1 elif direction == \\"RIGHT\\": self.x += 1 self.steps += 1 self.history.add((self.x, self.y)) def get_position(self): return (self.x, self.y) def get_path_history(self): return list(self.history) def get_distance_traveled(self): return self.steps def get_unique_positions_count(self): return len(self.history)"},{"question":"In a distant land, there is a beautiful garden with rectangular plots arranged in a grid of size MxN. Each plot has flowers planted in it, and the beauty of each plot can be represented by an integer value. The gardener wants to pick a continuous rectangular sub-grid such that the sum of the beauty values in the sub-grid is the maximum possible. Your task is to write a program to help the gardener find this maximum sum. -----Input----- - The first line contains two integers M and N, denoting the number of rows and columns of the grid, respectively. - The next M lines contain N space-separated integers each, where the j-th integer of the i-th line denotes the beauty value of the plot at (i, j). -----Output----- Print a single integer, the maximum possible sum of the beauty values from any continuous sub-grid. -----Constraints----- - 1 ≤ M, N ≤ 100 - -1000 ≤ beauty value of each plot ≤ 1000 -----Example Input----- 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 -----Example Output----- 29 -----Explanation----- The maximum sum can be obtained from the sub-grid: 3 8 10 1 -1 1 7 The sum of this sub-grid is 29. [Hints] - Think about how you can use dynamic programming or cumulative sum to solve this problem efficiently. - You might want to consider each possible pair of rows to start and end your sub-grid, and then use a 1D maximum subarray algorithm for each pair of rows on the columns.","solution":"def max_sum_subgrid(M, N, grid): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float(\'-inf\') for top in range(M): row_sum = [0] * N for bottom in range(top, M): for i in range(N): row_sum[i] += grid[bottom][i] max_sum = max(max_sum, kadane(row_sum)) return max_sum # Example input M = 4 N = 5 grid = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_sum_subgrid(M, N, grid)) # => 29"},{"question":"You are given an array of integers A of size N. You are required to perform Q queries on this array. There are two types of queries: 1. Update the value at a specific index. 2. Find and return the maximum integer in a given range of indices. Input: - The first line contains two integers N and Q. - The second line contains N space-separated integers, which are the elements of the array A. - The next Q lines contain the queries which can either be of the form: - `1 x y`, which means update the x-th element of the array to the value y (1-based index). - `2 l r`, which means find the maximum value in the array from index l to index r (inclusive) (1-based index). Output: For each query of the form `2 l r`, output the maximum value in the array from index l to index r on a new line. Constraints: 1. 1 <= N, Q <= 10^5 2. 1 <= A[i] <= 10^9 3. 1 <= x <= N 4. 1 <= l <= r <= N 5. 1 <= y <= 10^9 Sample Input: 6 5 1 3 2 7 9 11 2 2 5 1 3 10 2 2 5 1 6 4 2 1 6 Sample Output: 9 10 10","solution":"class ArrayQueries: def __init__(self, arr): self.arr = arr def update(self, x, y): Update the x-th element (1-based index) of the array to the value y. self.arr[x - 1] = y def query_max(self, l, r): Find and return the maximum integer in the array from index l to index r (inclusive) (1-based index). return max(self.arr[l - 1:r]) def process_queries(n, q, arr, queries): result = [] array_queries = ArrayQueries(arr) for query in queries: if query[0] == 1: x, y = query[1], query[2] array_queries.update(x, y) elif query[0] == 2: l, r = query[1], query[2] result.append(array_queries.query_max(l, r)) return result"},{"question":"Given a string of parentheses consisting of characters \'(\' and \')\', determine whether its proper parentheses matching. A string is said to have proper parentheses matching if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The pairs of parentheses are properly nested. -----Input:----- - First line will contain an integer T, the number of testcases. Then the testcases follow. - Each of the next T lines contains a single string consisting of characters \'(\' and \')\'. -----Output:----- For each testcase, print a single string \\"YES\\" if the string has proper parentheses matching. Otherwise, print \\"NO\\". (Without quotes). -----Constraints:----- - 1 leq T leq 100 - 1 leq text{length of the string} leq 1000 -----Sample Input:----- 3 (()) ()() (())) -----Sample Output:----- YES YES NO","solution":"def has_proper_parentheses(s): Determines if the string s has proper parentheses matching. Parameters: s (str): The string to be checked. Returns: str: \\"YES\\" if the string has proper parentheses matching, otherwise \\"NO\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases and returns their results. Parameters: T (int): The number of test cases. test_cases (list of str): The test cases to be processed. Returns: list of str: The results of the test cases. results = [] for case in test_cases: results.append(has_proper_parentheses(case)) return results"},{"question":"You are a software developer tasked with implementing a new feature for an e-commerce platform. The feature involves providing accurate and efficient search results for products based on user queries. However, your product catalog is massive, and each product can be represented by a unique integer identifier. Your task is to implement a function that finds the product identifier closest to a given user query. If multiple identifiers are equidistant to the query, return the smallest one. For simplicity, consider the list of product identifiers is sorted in ascending order and contains no duplicates. You need to achieve this in an efficient manner. Here are the requirements: - Implement the function `find_closest_product(products, query)` which takes a sorted list of integers `products` and an integer `query`. - The function should return the closest product identifier to the `query`. - If the `query` is equally distant to two product identifiers, return the smaller one. Examples: ```python find_closest_product([1, 2, 4, 5, 6, 8, 9], 7) == 6 find_closest_product([1, 3, 5, 8, 10], 6) == 5 find_closest_product([2, 4, 6, 8], 5) == 4 find_closest_product([100, 200, 300, 400], 250) == 200 ``` Constraint: - You may assume the list contains at least one product identifier and the identifiers are all positive integers. - Aim for a solution with a time complexity better than O(n).","solution":"def find_closest_product(products, query): Finds the product identifier closest to the query. If multiple identifiers are equidistant to the query, return the smallest one. :param products: List[int] - A sorted list of unique product identifiers. :param query: int - The target query. :return: int - The product identifier closest to the query. left, right = 0, len(products) - 1 while left < right: mid = (left + right) // 2 if products[mid] == query: return products[mid] elif products[mid] < query: left = mid + 1 else: right = mid # After binary search, left is the best candidate index. closest = products[left] # Check the candidate and its predecessor (if exists) if left > 0 and abs(products[left - 1] - query) <= abs(closest - query): closest = products[left - 1] return closest"},{"question":"A retail company needs to manage their product inventory. Each product has a unique ID, name, quantity, and price per unit. You are required to write a function `update_inventory` that takes a list of products information and a list of updates and returns the updated list of products. The updates can include adding new products or updating the quantity or price of existing products. Input Information: - Each product and update is represented as a dictionary: - Product Dictionary: `{\\"id\\": <int>, \\"name\\": <str>, \\"quantity\\": <int>, \\"price\\": <float>}` - Update Dictionary: `{\\"id\\": <int>, \\"name\\": <str>, \\"quantity\\": <int>, \\"price\\": <float>}` - If an update product ID matches an existing product ID, update the existing product\'s quantity and price with the values from the update. If the product ID does not exist in the list of products, add the new product to the list. - If the quantity or price in the update is negative or zero, it should be considered invalid and the update should be ignored. Function Signature: ```python def update_inventory(products: List[Dict[str, any]], updates: List[Dict[str, any]]) -> List[Dict[str, any]]: pass ``` Example: ```python products = [ {\\"id\\": 1, \\"name\\": \\"Laptop\\", \\"quantity\\": 10, \\"price\\": 999.99}, {\\"id\\": 2, \\"name\\": \\"Mouse\\", \\"quantity\\": 50, \\"price\\": 19.99} ] updates = [ {\\"id\\": 2, \\"name\\": \\"Mouse\\", \\"quantity\\": 60, \\"price\\": 18.99}, {\\"id\\": 3, \\"name\\": \\"Keyboard\\", \\"quantity\\": 100, \\"price\\": 49.99}, {\\"id\\": 1, \\"name\\": \\"Laptop\\", \\"quantity\\": 0, \\"price\\": 999.99} # This update will be ignored ] output = update_inventory(products, updates) # Expected output: # [ # {\\"id\\": 1, \\"name\\": \\"Laptop\\", \\"quantity\\": 10, \\"price\\": 999.99}, # {\\"id\\": 2, \\"name\\": \\"Mouse\\", \\"quantity\\": 60, \\"price\\": 18.99}, # {\\"id\\": 3, \\"name\\": \\"Keyboard\\", \\"quantity\\": 100, \\"price\\": 49.99} # ] ``` To solve this problem, ensure you carefully handle the rules for updating quantity and price, as well as adding new products to the inventory.","solution":"def update_inventory(products, updates): # Create a dictionary of product ID to product for quick lookup product_dict = {product[\'id\']: product for product in products} for update in updates: product_id = update[\'id\'] quantity = update[\'quantity\'] price = update[\'price\'] if product_id in product_dict: # Update existing product if the update is valid if quantity > 0 and price > 0: product_dict[product_id][\'quantity\'] = quantity product_dict[product_id][\'price\'] = price else: # Add new product if the update is valid if quantity > 0 and price > 0: product_dict[product_id] = update # Convert dictionary back to list return list(product_dict.values())"},{"question":"Task Write a function that takes a positive integer `n` and returns a list of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is defined as: ``` F(0) = 0 F(1) = 1 F(n) = F(n - 1) + F(n - 2) for n >= 2 ``` The result list should contain the Fibonacci numbers in order. Examples ``` fibonacci(1) -> [0] fibonacci(2) -> [0, 1] fibonacci(5) -> [0, 1, 1, 2, 3] fibonacci(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ```","solution":"def fibonacci(n): Returns a list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] fib_sequence = [0] if n == 1: return fib_sequence fib_sequence.append(1) for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Design a function named `string_operations` that takes a string as input and performs the following three operations: 1. `to_upper`: This function should convert all lowercase characters in the string to uppercase and return the modified string. If the input string is empty, return an empty string. 2. `count_vowels`: This function should count and return the number of vowels (\'a\', \'e\', \'i\', \'o\', \'u\', both lowercase and uppercase) present in the string. If the input string is empty, return 0. 3. `is_palindrome`: This function should check if the string is a palindrome (reads the same forward and backward). Return True if it is, otherwise return False. If the input string is empty, return False. After implementing the functions, write **EXACTLY TWO** doc tests for each function. If you haven\'t written doc tests before, you can check the documentation: https://docs.python.org/3/library/doctest.html Here is an example of how to structure your functions and doc tests: ```python def string_operations(): def to_upper(s): Convert all lowercase characters to uppercase. >>> to_upper(\'hello\') \'HELLO\' >>> to_upper(\'\') \'\' return s.upper() def count_vowels(s): Count the number of vowels in the string. >>> count_vowels(\'hello\') 2 >>> count_vowels(\'bcdfg\') 0 vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels) def is_palindrome(s): Check if the string is a palindrome. >>> is_palindrome(\'racecar\') True >>> is_palindrome(\'hello\') False return s == s[::-1] ```","solution":"def to_upper(s): Convert all lowercase characters to uppercase. >>> to_upper(\'hello\') \'HELLO\' >>> to_upper(\'\') \'\' return s.upper() def count_vowels(s): Count the number of vowels in the string. >>> count_vowels(\'hello\') 2 >>> count_vowels(\'bcdfg\') 0 vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels) def is_palindrome(s): Check if the string is a palindrome. >>> is_palindrome(\'racecar\') True >>> is_palindrome(\'hello\') False if s == \\"\\": return False return s == s[::-1]"},{"question":"Description You are given a list of positive integers where each integer represents the height of a building. The buildings are lined up in a row. Your goal is to determine the maximum amount of water that can be trapped between the buildings after a heavy rain. Water can be trapped between buildings if there are taller buildings on both sides, forming a \\"container\\" to hold the water. The width of each container is 1 unit. Write a function that takes a list of integers as input and returns the maximum amount of water that can be trapped. # Important Info: - The width of each building is 1. - You can assume the list has at least 2 buildings. # Examples ```python buildings = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` The function should return `6`, which is the maximum amount of water trapped in the given layout. ```python buildings = [4, 2, 0, 3, 2, 5] ``` The function should return `9`, which is the maximum amount of water trapped in the given layout. # Function Signature ```python def max_trapped_water(heights: List[int]) -> int: ``` # Constraints - The input list will contain at least 2 and at most 10^5 integers. - Each integer in the list is between 0 and 10^4 inclusive.","solution":"from typing import List def max_trapped_water(heights: List[int]) -> int: if not heights or len(heights) < 2: return 0 left = 0 right = len(heights) - 1 left_max = heights[left] right_max = heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped"},{"question":"You are given an array of integers representing heights of consecutive trees in a forest. You need to determine the minimum number of trees that need to be cut so that the remaining trees\' heights form a strictly increasing or strictly decreasing sequence. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains one integer n (1 le n le 10^5) — the number of trees. - The second line contains n space-separated integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the trees. It is guaranteed that sumlimits_{i=1}^{t} n_i le 10^5. -----Output----- For each test case, print one integer — the minimum number of trees to be cut down in order to make the remaining trees\' heights a strictly increasing or strictly decreasing sequence. -----Example----- Input 3 5 3 4 5 1 2 4 2 2 2 2 6 1 6 2 5 3 4 Output 1 3 2","solution":"def min_cuts_to_increase_or_decrease(heights): n = len(heights) # Special cases if n <= 1: return 0 increase_cuts = 0 decrease_cuts = 0 for i in range(1, n): if heights[i] <= heights[i - 1]: increase_cuts += 1 if heights[i] >= heights[i - 1]: decrease_cuts += 1 return min(increase_cuts, decrease_cuts) def solve(test_cases): results = [] for heights in test_cases: result = min_cuts_to_increase_or_decrease(heights) results.append(result) return results"},{"question":"Write a function that takes a string and returns a dictionary with the counts of each character in the string. The function should ignore spaces and be case-insensitive. Example ```python character_counts(\\"Hello World\\") == {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def character_counts(s): Returns a dictionary with the counts of each character in the string. The function ignores spaces and is case-insensitive. count_dict = {} for char in s.replace(\\" \\", \\"\\").lower(): if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Complete the function that takes a list of strings and returns the length of the longest string that contains at least one vowel (a, e, i, o, u). Wait, that\'s not all! You also need to ignore case when checking for vowels and counting the length of the string. Examples ``` [\\"apple\\", \\"BanAnA\\", \\"GRAPE\\", \\"Plum\\"] ==> 6 (BanAnA) [\\"sky\\", \\"nimbus\\", \\"Flight\\", \\"xyz\\"] ==> 6 (nimbus) [\\"bcd\\", \\"fgh\\", \\"jkl\\"] ==> 0 (No vowels) ```","solution":"def longest_string_with_vowel(strings): Returns the length of the longest string from the list that contains at least one vowel. Ignores case in both vowel checking and counting the length of the string. vowels = set(\'aeiou\') max_length = 0 for string in strings: # Check if the string contains at least one vowel if any(char.lower() in vowels for char in string): # Update max_length if this string is longer max_length = max(max_length, len(string)) return max_length"},{"question":"Given an array of n integers, you need to determine if there exists a subset of these integers that sums to a given target value. Return `true` if such a subset exists, otherwise return `false`. Example 1: Input: arr = [3, 34, 4, 12, 5, 2], target = 9 Output: true Explanation: There exists a subset [4, 5] whose sum is 9. Example 2: Input: arr = [3, 34, 4, 12, 5, 2], target = 30 Output: false Explanation: There is no subset that sums up to 30. Example 3: Input: arr = [1, 2, 3], target = 6 Output: true Explanation: The subset [1, 2, 3] sums to 6. Example 4: Input: arr = [2, 4, 6, 8], target = 5 Output: false Explanation: There is no subset that sums up to 5. Constraints: - The number of elements in the array (n) is between 1 and 100. - Each element of the array is a positive integer and does not exceed 100. - The target value is a positive integer and does not exceed 1000.","solution":"def subset_sum(arr, target): Returns True if there exists a subset of `arr` such that the subset sums to `target`, otherwise False. n = len(arr) dp = [[False for _ in range(target + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][target]"},{"question":"You are given an array of integers. A subarray is defined as a contiguous subset of the array. A subarray sum is the sum of the elements in that subarray. You need to find the non-empty subarray with the smallest and the largest sums. Output the two sums in a specific order: first the smallest subarray sum and then the largest subarray sum. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N — the number of elements in the array. - The second line of each test case contains N space-separated integers. -----Output----- For each test case, print a single line containing two integers — the smallest and the largest subarray sum, separated by a space. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - -10^9 le A[i] le 10^9 -----Subtasks----- Subtask #1 (30 points): 1 le N le 100 Subtask #2 (70 points): original constraints -----Example Input----- 2 3 1 2 3 5 -1 -2 -3 -4 -5 -----Example Output----- 1 6 -15 -1 -----Explanation----- Example case 1: The array is [1, 2, 3]. - The subarray with the smallest sum is [1], which has a sum of 1. - The subarray with the largest sum is [1, 2, 3], which has a sum of 6. Example case 2: The array is [-1, -2, -3, -4, -5]. - The subarray with the smallest sum is the entire array [-1, -2, -3, -4, -5], which has a sum of -15. - The subarray with the largest sum is [-1], which has a sum of -1.","solution":"def find_smallest_largest_subarray_sums(arr): Returns the smallest and largest subarray sums for a given array. min_sum = float(\'inf\') max_sum = float(\'-inf\') current_min_sum = 0 current_max_sum = 0 for num in arr: current_min_sum += num if current_min_sum < min_sum: min_sum = current_min_sum if current_min_sum > 0: current_min_sum = 0 current_max_sum += num if current_max_sum > max_sum: max_sum = current_max_sum if current_max_sum < 0: current_max_sum = 0 return min_sum, max_sum def process_test_cases(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] min_sum, max_sum = find_smallest_largest_subarray_sums(arr) results.append(f\\"{min_sum} {max_sum}\\") return results"},{"question":"You are given a list of integers, where each integer appears exactly three times, except for one integer that appears exactly once. Your task is to find the integer that appears only once in the list. Write a function `find_unique_integer(nums)` that takes in a list of integers `nums` and returns the integer that appears only once. *Examples:* ``` find_unique_integer([2, 2, 3, 2]) -> 3 find_unique_integer([0, 1, 0, 1, 0, 1, 99]) -> 99 ``` *Constraints:* - The input list will always have at least one unique integer. - The length of the input list will not exceed (3 * 10^4). - Each integer in the list will be within the 32-bit integer range.","solution":"def find_unique_integer(nums): Finds the integer that appears only once in the list while every other integer appears exactly three times. :param nums: List[int] :return: int ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"Write a function `square_digits` that takes an integer as input and returns an integer, where each digit of the input number has been squared and concatenated to form a new number. For example, if the input is 9119, the function should return 811181, as 9 squared is 81 and 1 squared is 1. # Function Signature ```python def square_digits(num: int) -> int: pass ``` # Input - An integer `num`, where `num` is a positive integer. # Output - An integer formed by concatenating the squares of each digit of the input number. # Examples ```python assert square_digits(9119) == 811181 assert square_digits(1234) == 14916 assert square_digits(0) == 0 ``` # Constraints - The input will always be a valid positive integer. - The function should return an integer, not a string.","solution":"def square_digits(num: int) -> int: Takes an integer as input and returns an integer where each digit of the input number has been squared and concatenated to form a new number. squared_digits = [str(int(digit) ** 2) for digit in str(num)] result = int(\'\'.join(squared_digits)) return result"},{"question":"Jane is organizing a reading group and she wants to order the books for her group in a special way. Each book has a distinct identifier represented as a positive integer. Jane will pick up books in ascending order but with a twist: she will select only those books whose identifiers have distinct digits. For example, the book with identifier 102 has distinct digits (1, 0, and 2), but the book with identifier 112 does not have distinct digits (1 appears twice). Given two integers N and M, help Jane list all the book identifiers in the range [N, M] (inclusive) that have distinct digits. If no such identifiers exist in the given range, return an empty list. -----Input----- - The first line contains a single integer T, the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing two space-separated integers N and M. -----Output----- For each test case, print a list of integers in ascending order, each of which corresponds to a book identifier within the given range [N, M] with distinct digits. If no such identifiers exist, print an empty list. -----Constraints----- - 1 le T le 100 - 1 le N le M le 10^6 -----Example Input----- 2 1 20 105 120 -----Example Output----- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20] [105, 106, 107, 108, 109, 120] -----Explanation----- Example case 1: All integers from 1 to 20 except numbers like 11 have distinct digits. Hence, the output list includes all those numbers. Example case 2: In the range from 105 to 120, the numbers 110 and 111 do not qualify due to repeated digits, so they are excluded from the list.","solution":"def has_distinct_digits(number): Checks whether the given number has all distinct digits. digits = str(number) return len(set(digits)) == len(digits) def books_with_distinct_digits(n, m): Returns a list of book identifiers within the range [n, m] with distinct digits. result = [] for i in range(n, m + 1): if has_distinct_digits(i): result.append(i) return result def solve(inputString): Processes the input and returns the results for all test cases. input_lines = inputString.strip().split(\'n\') t = int(input_lines[0]) results = [] for i in range(1, t + 1): n, m = map(int, input_lines[i].split()) result = books_with_distinct_digits(n, m) results.append(result) return results"},{"question":"You are given a string consisting of lowercase alphabets and spaces. You need to find the frequency of each distinct character in the string. Return the frequencies as a dictionary where the keys are the characters and the values are the respective counts. Additionally, find the character(s) with the highest frequency. If multiple characters have the same maximum frequency, return them all in sorted order. Your function `character_frequencies(s)` will receive a string and should output a tuple containing: - A dictionary with character frequencies. - A list of character(s) with the highest frequency in sorted order. Example: ```python s = \\"the quick brown fox jumps over the lazy dog\\" character_frequencies(s) == ( { \'t\': 2, \'h\': 2, \'e\': 3, \'q\': 1, \'u\': 2, \'i\': 1, \'c\': 1, \'k\': 1, \'b\': 1, \'r\': 2, \'o\': 4, \'w\': 1, \'n\': 1, \'f\': 1, \'x\': 1, \'j\': 1, \'m\': 1, \'p\': 1, \'s\': 1, \'v\': 1, \'l\': 1, \'a\': 1, \'z\': 1, \'y\': 1, \'d\': 1, \'g\': 1 }, [\'o\'] ) ``` Another example: ```python s = \\"banana\\" character_frequencies(s) == ( { \'b\': 1, \'a\': 3, \'n\': 2 }, [\'a\'] ) ``` One more example: ```python s = \\"aabbcc\\" character_frequencies(s) == ( { \'a\': 2, \'b\': 2, \'c\': 2 }, [\'a\', \'b\', \'c\'] ) ```","solution":"def character_frequencies(s): Returns a tuple containing: - A dictionary with the frequencies of each character in the string - A list of characters with the highest frequency in sorted order frequencies = {} for char in s: if char != \' \': # Ignore spaces if char in frequencies: frequencies[char] += 1 else: frequencies[char] = 1 if not frequencies: return frequencies, [] max_freq = max(frequencies.values()) max_chars = [char for char, count in frequencies.items() if count == max_freq] return frequencies, sorted(max_chars)"},{"question":"In an isolated town, there is a network of roads connecting several houses. Each house is represented by a node in a graph, and each road is represented by an edge with a certain cost. The town\'s mayor wants to ensure that there is a way to travel between any two houses with the minimum possible road construction cost while maintaining the road network. Your task is to help the mayor by writing a program that determines the minimal total cost required to connect all the houses using the given roads. Additionally, you need to simulate a scenario where some of the existing roads might be out of service and check whether the network remains connected. For each query about a road going out of service, output whether the town remains connected or disconnects. ----- Input section ----- The first line contains an integer T, the number of test cases. Each test case consists of the following: - The first line contains two integers N and M, representing the number of houses (nodes) and the number of roads (edges), respectively. - The next M lines each contain three integers u, v, and w, representing a road connecting house u and house v with a cost w. - The following line contains an integer Q, the number of queries. - The next Q lines each contain two integers u and v, representing a road that might go out of service between house u and house v. ----- Output section ----- For each test case, output the minimal total cost to connect all houses. Then for each query, output \\"Connected\\" if removing the road does not disconnect the network, or \\"Disconnected\\" if it does. ----- Input constraints ----- 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ M ≤ 5000 1 ≤ Q ≤ 100 1 ≤ u, v ≤ N 1 ≤ w ≤ 10000 ----- Sample Input ----- 1 4 5 1 2 3 1 3 4 2 3 2 3 4 5 2 4 6 3 1 2 2 3 3 4 ----- Sample Output ----- 10 Connected Connected Connected ----- Explanation ----- In the provided example, the minimal total cost to connect all houses is calculated using Kruskal\'s or Prim\'s algorithm for the Minimum Spanning Tree (MST), resulting in a cost of 10. For each query, checking the status of the network after removing the specified road involves determining if the set of edges minus the particular edge still forms a connected graph.","solution":"from heapq import heappop, heappush from collections import defaultdict, deque def find(parent, node): if parent[node] == node: return node root = find(parent, parent[node]) parent[node] = root return root def union(parent, rank, node1, node2): root1 = find(parent, node1) root2 = find(parent, node2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 def kruskal(N, edges): edges.sort(key=lambda x: x[2]) parent = list(range(N)) rank = [0] * N mst_cost = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += w return mst_cost def is_connected_after_removal(N, edges, remove_edge): graph = defaultdict(list) for u, v, w in edges: if (u, v) != remove_edge and (v, u) != remove_edge: graph[u].append(v) graph[v].append(u) # BFS to check connectivity visited = set() queue = deque([0]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return len(visited) == N def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 edges = [] for _ in range(M): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 w = int(data[index + 2]) edges.append((u, v, w)) index += 3 Q = int(data[index]) index += 1 queries = [] for _ in range(Q): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 queries.append((u, v)) index += 2 # Minimum Spanning Tree (MST) cost mst_cost = kruskal(N, edges) results.append(str(mst_cost)) for u, v in queries: if is_connected_after_removal(N, edges, (u, v)): results.append(\\"Connected\\") else: results.append(\\"Disconnected\\") print(\\"n\\".join(results))"},{"question":"Given a string s which contains only lowercase alphabets and the character \'*\', return all possible strings we can obtain by replacing each \'*\' with a lowercase alphabet. Example 1: Input: s = \\"a*b*c\\" Output: [\\"aaabc\\", \\"aaacc\\", \\"aaabc\\", \\"aaacc\\", ..., \\"azazc\\"] Example 2: Input: s = \\"l*e*t*\\" Output: [\\"laebt\\", \\"laect\\", \\"laedt\\", ..., \\"lzezt\\"] Constraints: 1. 1 <= s.length <= 10 2. The number of \'*\' in the given string will be in the range [1, 5]. 3. The order of the output does not matter.","solution":"from itertools import product def generate_strings(s): Generates all possible strings by replacing \'*\' with lowercase alphabet letters. Parameters: s (str): The input string containing lowercase alphabets and \'*\'. Returns: List[str]: A list of all possible strings obtained by replacing \'*\' with lowercase alphabets. positions = [i for i, char in enumerate(s) if char == \'*\'] options = product(\'abcdefghijklmnopqrstuvwxyz\', repeat=len(positions)) results = [] for option in options: temp_list = list(s) for index, pos in enumerate(positions): temp_list[pos] = option[index] results.append(\\"\\".join(temp_list)) return results"},{"question":"**Question: Tournament Brackets** A tournament is organized where players compete in successive rounds. Each round, players are paired up randomly, and the winners move on to the next round. Given a list of player names, implement a function to simulate the rounds of the tournament until a winner is determined. Each match is decided randomly and independent of previous results. # Input - An array of strings, where each string represents a player’s name. Example: `[\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Diana\\"]`. # Output - A list of lists, where each list represents the matchups for that round, and the last list contains a single winner. If the number of players in a round is odd, one player gets a bye to the next round. # Example For an input list of players `[\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Diana\\", \\"Eve\\"]`, possible output could be: ``` [ [[\\"Alice\\", \\"Bob\\"], [\\"Charlie\\", \\"Diana\\"], [\\"Eve\\"]], [[\\"Alice\\", \\"Charlie\\"], [\\"Eve\\"]], [[\\"Alice\\", \\"Eve\\"]], [\\"Alice\\"] ] ``` # Constraints - Ensure all players continue to the next round correctly until a single winner remains. - Handle cases where the number of players is odd by giving a bye to one of the players. # Function Signature ```python from typing import List def tournament_brackets(players: List[str]) -> List[List[List[str]]]: # Your code here pass ``` Use the provided function signature and follow the example input and output format to implement the tournament brackets simulation.","solution":"from typing import List import random def tournament_brackets(players: List[str]) -> List[List[List[str]]]: rounds = [] while len(players) > 1: round_matches = [] random.shuffle(players) while len(players) > 1: round_matches.append([players.pop(), players.pop()]) if players: round_matches.append([players.pop()]) rounds.append(round_matches) next_round_players = [] for match in round_matches: winner = random.choice(match) next_round_players.append(winner) players = next_round_players rounds.append([[players[0]]]) return rounds"},{"question":"Write a function that accepts an array of integers and returns a new array containing only the prime numbers from the input array, preserving the original order. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Example ``` Input: [2, 3, 4, 5, 6, 7, 8, 9, 10] Output: [2, 3, 5, 7] ``` Input: [11, 13, 17, 19, 22, 23, 25, 28, 29] Output: [11, 13, 17, 19, 23, 29] ``` **Function Signature:** ```python def extract_primes(arr: List[int]) -> List[int]: pass ``` **Explanation:** - For an input array `[2, 3, 4, 5, 6, 7, 8, 9, 10]`, the prime numbers are `[2, 3, 5, 7]`. - For an input array `[11, 13, 17, 19, 22, 23, 25, 28, 29]`, the prime numbers are `[11, 13, 17, 19, 23, 29]`.","solution":"from typing import List def is_prime(n: int) -> bool: Check if a given number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for divisor in range(3, max_divisor, 2): if n % divisor == 0: return False return True def extract_primes(arr: List[int]) -> List[int]: Returns a list of prime numbers from the input array. return [num for num in arr if is_prime(num)]"},{"question":"Write a function named `find_unique_elements` that takes a single list of integers as input and returns a new list containing only the distinct elements from the original list in the order they first appeared. The returned list should not have any duplicates. Use a set to keep track of seen elements to ensure the uniqueness in the output list. The function should handle an empty list by returning an empty list. Example: ```python find_unique_elements([1, 2, 2, 3, 4, 4, 5]) # should return [1, 2, 3, 4, 5] find_unique_elements([7, 8, 8, 8, 9, 10, 10]) # should return [7, 8, 9, 10] find_unique_elements([]) # should return [] ```","solution":"def find_unique_elements(lst): Returns a list of unique elements in the order they first appeared. Parameters: - lst: List of integers Returns: - List of distinct integers seen = set() unique_elements = [] for element in lst: if element not in seen: unique_elements.append(element) seen.add(element) return unique_elements"},{"question":"# Problem Statement You are given an array of integers and a non-negative integer `k`. Your task is to rotate the array to the right by `k` steps, where `k` is non-negative. # How to rotate? - The rotate operation moves each element `k` positions to the right. - For example, if `k` is 2 and the array is `[1, 2, 3, 4, 5]`, after rotating the array will be `[4, 5, 1, 2, 3]`. # Requirements Write a function `rotateArray(arr, k)` that takes an array of integers `arr` and an integer `k`, and returns the array rotated to the right by `k` steps. # Examples ```python rotateArray([1, 2, 3, 4, 5], 2) # returns [4, 5, 1, 2, 3] rotateArray([0, 0, 0], 1) # returns [0, 0, 0] rotateArray([1, 2], 3) # returns [2, 1] rotateArray([], 5) # returns [] ``` # Constraints - The length of `arr` is between 0 and 10^5. - `k` is a non-negative integer.","solution":"def rotateArray(arr, k): Rotates the array to the right by k steps. Parameters: arr (list): The input array of integers. k (int): The number of steps to rotate the array. Returns: list: The rotated array. if not arr: return [] n = len(arr) k = k % n # In case k is larger than the array length return arr[-k:] + arr[:-k]"},{"question":"Write a function to check if a vending machine has the desired item in stock. The vending machine\'s stock is represented as a list of dictionaries, each containing \'name\' and \'quantity\' keys. Your function should take the vending machine stock list and the item name as inputs and return a boolean indicating whether the item is in stock (quantity greater than 0). Example: ```python vending_machine_stock = [ {\'name\': \'Soda\', \'quantity\': 10}, {\'name\': \'Chips\', \'quantity\': 0}, {\'name\': \'Candy\', \'quantity\': 5} ] is_item_available(vending_machine_stock, \'Chips\') ``` The expected result is `False` because the \'Chips\' are out of stock.","solution":"def is_item_available(vending_machine_stock, item_name): Returns True if the vending machine has the desired item in stock, otherwise False. Parameters: vending_machine_stock (list of dict): The stock of the vending machine, each item being a dictionary with \'name\' and \'quantity\' keys. item_name (str): The name of the item to check for availability. Returns: bool: True if the item is in stock (quantity > 0), otherwise False. for item in vending_machine_stock: if item[\'name\'] == item_name and item[\'quantity\'] > 0: return True return False"},{"question":"Given a string s containing only lowercase English letters, determine the minimum number of steps to make s empty. In each step, you can select any one palindrome substring and remove it from s. Example 1: Input: s = \\"ababa\\" Output: 1 Explanation: The entire string \\"ababa\\" is a palindrome and can be removed in a single step. Example 2: Input: s = \\"abb\\" Output: 2 Explanation: One way to make the string empty is to remove \\"bb\\" first and then remove \\"a\\". Example 3: Input: s = \\"abc\\" Output: 3 Explanation: The string cannot be removed in one or two steps because there are no palindromic substrings longer than one character. Each character needs to be removed individually. Constraints: 1 <= s.length <= 1000 s consists of only lowercase English letters.","solution":"def min_steps_to_empty_string(s): Returns the minimum number of steps to make the string s empty by removing palindromic substrings. if s == s[::-1]: return 1 else: return 2 # Explanation: # If the string is a palindrome, we can remove it in one step. # If the string is not a palindrome, the minimum steps to remove a non-palindromic # sequence will be 2. One way to think about this is: # In the worst case scenario for a non-palindromic string, it can always be divided # into two parts such that each part can be removed individually in 2 steps."},{"question":"You are given a string consisting of alphabetic characters (both upper and lower case) and digits (0-9). Your task is to translate the string into a \\"dial pad sequence\\". In a dial pad, each set of alphabetic characters maps to a specific number as follows: - 2: ABC - 3: DEF - 4: GHI - 5: JKL - 6: MNO - 7: PQRS - 8: TUV - 9: WXYZ Digits (0-9) remain the same in the sequence. For example, character \'A\' would be translated to \'2\', \'B\' would also be \'2\', \'D\' would be \'3\', and so on. Your task is to replace each alphabetic character in the string with its corresponding digit. Write a function `translate_to_dial_pad` that takes a string `s` and returns the resulting dial pad sequence string. For example: ``` translate_to_dial_pad(\\"HELLO WORLD123\\") = \\"43556 96753123\\" translate_to_dial_pad(\\"HELLO123\\") = \\"43556123\\" ``` Ensure to maintain the same capitalization for digits.","solution":"def translate_to_dial_pad(s): Translates a given string into a dial pad sequence. Parameters: s (str): The input string with alphabetic characters and digits. Returns: str: The translated dial pad sequence string. dial_pad_mapping = { \'A\': \'2\', \'B\': \'2\', \'C\': \'2\', \'D\': \'3\', \'E\': \'3\', \'F\': \'3\', \'G\': \'4\', \'H\': \'4\', \'I\': \'4\', \'J\': \'5\', \'K\': \'5\', \'L\': \'5\', \'M\': \'6\', \'N\': \'6\', \'O\': \'6\', \'P\': \'7\', \'Q\': \'7\', \'R\': \'7\', \'S\': \'7\', \'T\': \'8\', \'U\': \'8\', \'V\': \'8\', \'W\': \'9\', \'X\': \'9\', \'Y\': \'9\', \'Z\': \'9\' } result = [] for char in s: if char.isdigit(): result.append(char) else: result.append(dial_pad_mapping.get(char.upper(), char)) # Use .upper() to handle lowercase letters return \'\'.join(result)"},{"question":"Implement a function to manage seat reservations in a theater. The theater is represented as a grid of seats, where each cell represents a seat that can be either empty or occupied. The goal is to create an algorithm that processes seat reservations efficiently. Each reservation request is a tuple `(row, column)`, where `row` and `column` represent the requested seat. If the seat is available, it should be marked as occupied and the reservation request should be confirmed. If the seat is already occupied, the reservation request should be denied. Write a class `Theater` with the following methods: - `__init__(self, rows: int, columns: int) -> None`: Initializes a theater with the given number of rows and columns. All seats are initially empty. - `reserve_seat(self, row: int, column: int) -> bool`: Attempts to reserve the seat at the specified row and column. Returns `True` if the reservation is successful, and `False` if the seat is already occupied. - `release_seat(self, row: int, column: int) -> bool`: Releases the seat at the specified row and column. Returns `True` if the seat was successfully released, and `False` if the seat was already empty. - `is_seat_occupied(self, row: int, column: int) -> bool`: Returns `True` if the seat at the specified row and column is occupied, and `False` otherwise. Example usage: ```python theater = Theater(3, 3) assert theater.reserve_seat(1, 1) == True # Reservation successful assert theater.is_seat_occupied(1, 1) == True # Seat is now occupied assert theater.reserve_seat(1, 1) == False # Seat already occupied, reservation denied assert theater.release_seat(1, 1) == True # Seat is now released assert theater.is_seat_occupied(1, 1) == False # Seat is no longer occupied assert theater.release_seat(1, 1) == False # Seat is already empty ``` Constraints: - `1 <= rows, columns <= 1000` - `0 <= row < rows` - `0 <= column < columns` Submit your solution by implementing the `Theater` class.","solution":"class Theater: def __init__(self, rows: int, columns: int) -> None: Initializes a theater with the given number of rows and columns. All seats are initially empty. self.rows = rows self.columns = columns # Create a grid of the given size, initialized to False (empty) self.seats = [[False for _ in range(columns)] for _ in range(rows)] def reserve_seat(self, row: int, column: int) -> bool: Attempts to reserve the seat at the specified row and column. Returns True if the reservation is successful, and False if the seat is already occupied. if self.seats[row][column]: return False self.seats[row][column] = True return True def release_seat(self, row: int, column: int) -> bool: Releases the seat at the specified row and column. Returns True if the seat was successfully released, and False if the seat was already empty. if not self.seats[row][column]: return False self.seats[row][column] = False return True def is_seat_occupied(self, row: int, column: int) -> bool: Returns True if the seat at the specified row and column is occupied, and False otherwise. return self.seats[row][column]"},{"question":"Given a string s and an integer n, return the n most frequent characters in the string in descending order of their frequency. If there are multiple characters with the same frequency, return them in alphabetical order. Example 1: Input: s = \\"aabbbcc\\", n = 2 Output: [\'b\', \'a\'] Explanation: \'b\' appears 3 times and \'a\' appears 2 times. Example 2: Input: s = \\"abcabcabc\\", n = 1 Output: [\'a\'] Explanation: \'a\', \'b\', and \'c\' all appear 3 times, but \'a\' is the smallest lexicographically. Constraints: 1 <= len(s) <= 10^5 s contains only lowercase English letters. 1 <= n <= 26","solution":"from collections import Counter def n_most_frequent_characters(s, n): Returns the n most frequent characters in the string s in descending order of their frequency. If there are multiple characters with the same frequency, they are returned in alphabetical order. # Count the frequency of each character frequency = Counter(s) # Sort characters primarily by frequency in descending order, and secondarily by alphabetical order sorted_characters = sorted(frequency.keys(), key=lambda x: (-frequency[x], x)) # Return the top n characters return sorted_characters[:n]"},{"question":"In this task, you will design a waterfall simulation based on a two-dimensional matrix. The purpose is to simulate the flow of water downwards through a matrix where the elements indicate water flow directions. Each cell in the matrix can have one of the following values: - `0`: An empty cell that can be filled with water. - `1`: An obstacle that blocks water flow. Water always starts at the top row and can flow downwards, left-downwards, or right-downwards, but cannot move upwards or horizontally. The output should be a matrix of the same size indicating the filled cells (with water) and obstacles. Here is how we will represent the matrix: - `\'O\'`: Represents water-filled cells. - `\'X\'`: Represents obstacle cells. - `\'.\'`: Represents an empty cell. Your task is to write a function `simulate_waterfall(matrix)` that takes a two-dimensional list `matrix` as input, where `matrix[i][j]` is either `0` or `1`, and returns a new two-dimensional list where the water has been simulated according to the rules described above. # Examples Example 1: ``` Input: matrix = [ [0, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 0], [0, 1, 0, 0] ] Output: matrix = [ [\'O\', \'O\', \'O\', \'O\'], [\'O\', \'X\', \'O\', \'X\'], [\'O\', \'O\', \'O\', \'O\'], [\'O\', \'X\', \'O\', \'O\'] ] ``` Example 2: ``` Input: matrix = [ [0, 1, 0], [0, 1, 0], [0, 0, 0] ] Output: matrix = [ [\'O\', \'X\', \'O\'], [\'O\', \'X\', \'O\'], [\'O\', \'O\', \'O\'] ] ``` # Constraints: 1. The number of rows `m` and the number of columns `n` of the matrix will be between `1` and `50` (inclusive). 2. The matrix will only contain `0` and `1`. # Notes: - The water flows into the first row cells (`0, j`) initially since they are considered the starting points for the waterfall. - Remember, the water can flow downwards, left-downwards, or right-downwards, but it is blocked by obstacles (`\'X\'`). **Hint:** You may need to use depth-first search (DFS) or breadth-first search (BFS) to simulate the water flowing through the matrix.","solution":"def simulate_waterfall(matrix): Simulates the waterfall effect on a given matrix. Arguments: matrix -- 2D list with 0 representing empty cells and 1 representing obstacles. Returns: 2D list with \'O\' representing water, \'X\' representing obstacles, and \'.\' representing empty cells. m, n = len(matrix), len(matrix[0]) result = [[\'.\' for _ in range(n)] for _ in range(m)] # Initialize obstacles in the result matrix for i in range(m): for j in range(n): if matrix[i][j] == 1: result[i][j] = \'X\' # Helper function to fill water using DFS def fill_water(i, j): if i < 0 or i >= m or j < 0 or j >= n: return if result[i][j] == \'O\' or result[i][j] == \'X\': return result[i][j] = \'O\' fill_water(i + 1, j) # downwards if j > 0: fill_water(i + 1, j - 1) # left-downwards if j < n - 1: fill_water(i + 1, j + 1) # right-downwards # Start filling water from the top row for j in range(n): if matrix[0][j] == 0: fill_water(0, j) return result"},{"question":"Given a string (str) containing only lowercase alphabets, find the length of the longest substring without repeating characters. Return the length of the longest substring. Examples: - Input: \\"abcabcbb\\" - Output: 3 (The answer is \\"abc\\", with the length of 3.) - Input: \\"bbbbb\\" - Output: 1 (The answer is \\"b\\", with the length of 1.) - Input: \\"pwwkew\\" - Output: 3 (The answer is \\"wke\\", with the length of 3.) Note: Your solution should have a linear time complexity.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a two-dimensional array where each row represents a point\'s coordinates in the form [x, y], write a function to find K closest points to the origin (0, 0). The distance between two points on a plane is the Euclidean distance. You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in). Example 1: Input: points = [[1,3],[-2,2],[5,8]], K = 1 Output: [[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(1^2 + 3^2) = sqrt(10). The distance between (-2, 2) and the origin is sqrt((-2)^2 + 2^2) = sqrt(8). The distance between (5, 8) and the origin is sqrt(5^2 + 8^2) = sqrt(89). Thus, one closest point is [-2,2]. Example 2: Input: points = [[3,3],[5,-1],[-2,4]], K = 2 Output: [[3,3],[-2,4]] Explanation: The answer [[-2,4],[3,3]] would also be accepted. Note: 1 <= K <= points.length <= 10^4 -10^4 < points[i][0] < 10^4 -10^4 < points[i][1] < 10^4","solution":"from heapq import nlargest from math import sqrt def k_closest(points, K): Finds K closest points to the origin (0, 0). Parameters: points (List[List[int]]): List of points in the form [[x, y], ...]. K (int): Number of closest points to find. Returns: List[List[int]]: K closest points. # Calculate the Euclidean distance for each point points_with_distance = [(sqrt(x**2 + y**2), [x, y]) for x, y in points] # Get the K smallest distances with corresponding points k_closest_points = nlargest(K, points_with_distance, key=lambda x: -x[0]) # Extract the points from the list of tuples return [point for distance, point in k_closest_points]"},{"question":"=====Problem Statement===== Given a string, s, write a function that returns a new string by reversing the order of the words in the original string. A word is defined as a sequence of non-space characters. The words in the string will be separated by exactly one space, with no leading or trailing spaces. =====Example===== s = \\"hello world example\\" Calling your function: reverse_words(s) Should return: \\"example world hello\\" =====Input Format===== The function takes a single argument, a string s. =====Constraints===== 1≤length(s)≤10^4 =====Output Format===== Return a single string with the words in reverse order.","solution":"def reverse_words(s): Returns a new string by reversing the order of the words in the original string. Args: s (str): The original string with words separated by exactly one space. Returns: str: A new string with the words in reverse order. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"A city organizes an annual car race event. Each participant car is identified by a unique number. The task is to find out which car won the race based on the speed records provided. You are given the speed records of each car for all the checkpoints they crossed, and you need to determine the car with the highest average speed. If two cars have the same average speed, the car with the lower participant number wins. -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer M, representing the number of cars. The following M lines each contain a list of integers. The first integer in each line is the participant number of the car, followed by a list of speeds at each checkpoint they crossed. -----OUTPUT----- For each test case, output a single line printing the winner of the race in format Case #T: P, where T is the Tth test case running and P is the participant number of the winning car. -----CONSTRAINTS----- 1 <= T <= 20 2 <= M <= 100 2 <= number of checkpoints speeds <= 100 1 <= speed <= 300 -----EXAMPLE----- Input: 2 3 5 100 150 200 3 120 140 100 2 110 160 130 2 1 200 250 300 2 100 100 300 Output: Case #1: 5 Case #2: 1","solution":"def find_race_winner(T, test_cases): results = [] for t in range(T): M, cars = test_cases[t] max_avg_speed = -1 winner = float(\'inf\') for car in cars: participant_number = car[0] speeds = car[1:] avg_speed = sum(speeds) / len(speeds) if (avg_speed > max_avg_speed) or (avg_speed == max_avg_speed and participant_number < winner): max_avg_speed = avg_speed winner = participant_number results.append(f\\"Case #{t+1}: {winner}\\") return results"},{"question":"# Description \\"You are given a list/array representing the number of apples each tree in an orchard has. Due to some disease, the productivity of the trees has become unequal. For the health and balance of the ecosystem, we need to ensure that all trees have at least the same number of apples as the tree with the least apples. Your task is to implement a function that determines how many apples need to be added to each tree to ensure they all have at least as many apples as the tree with the minimum number of apples. Specifically, for each tree that has more apples than the tree with the fewest apples, you should count how many apples would need to be removed or redistributed to bring it down to that minimum level and then return the total number of apples that need to be redistributed. If there are no trees, or only one tree, return 0.\\" In the first case provided below, the tree with the fewest apples has 2 apples. To bring every other tree to this level, we would need to redistribute the following number of apples: - From tree 1: 5 - 2 = 3 apples - From tree 2: 6 - 2 = 4 apples - From tree 3: 3 - 2 = 1 apple So we would need to redistribute a total of 3 + 4 + 1 = 8 apples. ```python apples([5,6,2,3]) # returns 8 apples([4,4,4]) # returns 0 apples([3,8]) # returns 5 apples([]) # returns 0 apples([4]) # returns 0 ``` ```cs AppleProblem.GetApplesToRedistribute(new [] {5,6,2,3}) // returns 8 AppleProblem.GetApplesToRedistribute(new [] {4,4,4}) // returns 0 AppleProblem.GetApplesToRedistribute(new [] {3,8}) // returns 5 AppleProblem.GetApplesToRedistribute(new [] { }) // returns 0 AppleProblem.GetApplesToRedistribute(new [] {4}) // returns 0 ``` ```haskell apples [5,6,2,3] -- returns 8 apples [4,4,4] -- returns 0 apples [3,8] -- returns 5 apples [] -- returns 0 apples [4] -- returns 0 ```","solution":"def apples(tree_apples): Given a list of integers representing the number of apples each tree in an orchard has, this function returns the number of apples to be redistributed to ensure all trees have at least as many apples as the tree with the least apples. Parameters: tree_apples (list of int): A list of integers where each integer represents the apples on a tree. Returns: int: Total number of apples to be redistributed. if not tree_apples or len(tree_apples) <= 1: return 0 min_apples = min(tree_apples) total_redistribution = sum(apples - min_apples for apples in tree_apples) return total_redistribution"},{"question":"You are given an m x n 2D grid initialized with these three possible values: - `-1` - A wall or an obstacle. - `0` - A gate. - `INF` - An empty room. We use the value `231 - 1` to represent `INF` as you may assume that the distance to a gate is less than `231 - 1`. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should remain filled with `INF`. Example: Given the 2D grid: ``` INF -1 0 INF INF INF INF -1 INF -1 INF -1 0 -1 INF INF ``` Output: ``` 3 -1 0 1 2 2 1 -1 1 -1 2 -1 0 -1 3 4 ```","solution":"from collections import deque def walls_and_gates(rooms): if not rooms or not rooms[0]: return m, n = len(rooms), len(rooms[0]) INF = 2**31 - 1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque() for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) while queue: i, j = queue.popleft() for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < m and 0 <= nj < n and rooms[ni][nj] == INF: rooms[ni][nj] = rooms[i][j] + 1 queue.append((ni, nj))"},{"question":"Given two integers n and k, write a function that returns the number of unique k-combinations of the integers from 1 to n. A k-combination is a subset of k distinct integers chosen from the set of integers [1, 2, ..., n]. Return the result as a sorted list of lists of these k combinations. Example 1: Input: n = 4, k = 2 Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] Explanation: There are 6 unique ways to choose 2 integers from 1 to 4 combining them: - [1,2] - [1,3] - [1,4] - [2,3] - [2,4] - [3,4] Example 2: Input: n = 3, k = 1 Output: [[1],[2],[3]] Explanation: There are 3 unique ways to choose 1 integer from 1 to 3 combining them: - [1] - [2] - [3] Example 3: Input: n = 5, k = 3 Output: [[1,2,3],[1,2,4],[1,2,5],[1,3,4],[1,3,5],[1,4,5],[2,3,4],[2,3,5],[2,4,5],[3,4,5]] Explanation: There are 10 unique ways to choose 3 integers from 1 to 5 combining them: - [1,2,3] - [1,2,4] - [1,2,5] - [1,3,4] - [1,3,5] - [1,4,5] - [2,3,4] - [2,3,5] - [2,4,5] - [3,4,5] Constraints: 1 <= n <= 20 1 <= k <= n","solution":"from itertools import combinations def k_combinations(n, k): Returns the list of unique k-combinations of the integers from 1 to n. # Generate all combinations of k numbers from the range 1 to n comb = combinations(range(1, n+1), k) # Convert iterator to list and return it return [list(c) for c in comb]"},{"question":"A software developer is building a leading zeros handler, and she needs your help to achieve this. She wants to write a function that removes leading zeros from given numbers. For each given number, your task is to remove any leading zeros and print the result. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one number as a string. -----Output:----- For each test case, output the number without leading zeros. -----Constraints----- - 1 leq T leq 100 - The length of the number string will be between 1 and 1000. - The number string will only contain digits and may contain leading zeros. -----Sample Input:----- 4 00123 0000 05678 000456789 -----Sample Output:----- 123 0 5678 456789 -----EXPLANATION:----- No need, as the task is straightforward.","solution":"def remove_leading_zeros(nums): Given a list of numbers as strings, removes leading zeros from each number. Parameters: nums (List[str]): A list of numbers as strings with possible leading zeros. Returns: List[str]: A list of numbers as strings without leading zeros. return [str(int(num)) for num in nums]"},{"question":"Write a function that takes an array of integers and returns a new array in which each element is the count of its divisors. Example: [4, 5, 6] should return [3, 2, 4] Explanation: - 4 has three divisors: 1, 2, and 4 - 5 has two divisors: 1 and 5 - 6 has four divisors: 1, 2, 3, and 6","solution":"def count_divisors(arr): Takes an array of integers and returns a new array in which each element is the count of its divisors. def divisors(n): if n == 1: return 1 count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count return [divisors(x) for x in arr]"},{"question":"# Task You have a series of numbers representing the daily temperatures in a city. You need to create a function that determines the number of days to wait for a warmer temperature. You are given an array `temps` where each element represents the temperature in degrees Fahrenheit for that day. For each day in the array, you must determine how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` in that spot. # Input/Output `[input]` integer array `temps` `1 ≤ temps.length ≤ 10^5` `-100 ≤ temps[i] ≤ 100` `[output]` an integer array An array of integers representing the number of days to wait for a warmer temperature for each day. # Example For `temps = [73, 74, 75, 71, 69, 72, 76, 73]`, the output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Explanation: - For day 0 (temperature 73): You need to wait 1 day for a warmer temperature (74). - For day 1 (temperature 74): You need to wait 1 day for a warmer temperature (75). - For day 2 (temperature 75): You need to wait 4 days for a warmer temperature (76). - For day 3 (temperature 71): You need to wait 2 days for a warmer temperature (72). - For day 4 (temperature 69): You need to wait 1 day for a warmer temperature (72). - For day 5 (temperature 72): You need to wait 1 day for a warmer temperature (76). - For day 6 (temperature 76): There is no future day with a warmer temperature, so 0. - For day 7 (temperature 73): There is no future day with a warmer temperature, so 0.","solution":"def daily_temperatures(temps): Given a list of daily temperatures, return a list of how many days you would have to wait until a warmer temperature. If there is no such day, put 0. n = len(temps) result = [0] * n stack = [] for i in range(n): while stack and temps[i] > temps[stack[-1]]: idx = stack.pop() result[idx] = i - idx stack.append(i) return result"},{"question":"# Introduction: A new automobile company wants to keep track of its car inventory. Each car has a unique VIN, model name, and year of manufacturing. Additionally, they want to provide some functionalities to query and manipulate the inventory list. # Task: You need to design a class `Inventory` that allows adding and removing cars from their inventory, querying cars using their VIN, and retrieving all cars manufactured in a specific year. # The `Inventory` class should support the following operations: 1. `add_car(vin, model, year)` – Adds a car to the inventory. `vin` is a unique string identifier, `model` is a string representing the car model, and `year` is an integer representing the year of manufacturing. 2. `remove_car(vin)` – Removes the car associated with the given VIN from the inventory. If the car doesn\'t exist, do nothing. 3. `get_car(vin)` – Returns a tuple `(vin, model, year)` if the car with the given VIN exists, otherwise returns `None`. 4. `get_cars_by_year(year)` – Returns a list of tuples `(vin, model, year)` for all cars manufactured in the specified `year`. If no cars are found for the given year, returns an empty list. # Examples: ```python inventory = Inventory() inventory.add_car(\\"1HGCM82633A123456\\", \\"Honda Accord\\", 2003) inventory.add_car(\\"1FTFW1EFXEKF51234\\", \\"Ford F-150\\", 2014) print(inventory.get_car(\\"1HGCM82633A123456\\")) # Output: (\'1HGCM82633A123456\', \'Honda Accord\', 2003) print(inventory.get_cars_by_year(2014)) # Output: [(\'1FTFW1EFXEKF51234\', \'Ford F-150\', 2014)] inventory.remove_car(\\"1HGCM82633A123456\\") print(inventory.get_car(\\"1HGCM82633A123456\\")) # Output: None ``` # Notes: 1. Assume all VINs are unique. 2. Each operation should have an expected time complexity that is efficient, i.e., addition, removal, and lookup should ideally be O(1) on average.","solution":"class Inventory: def __init__(self): self.cars_by_vin = {} self.cars_by_year = {} def add_car(self, vin, model, year): if vin not in self.cars_by_vin: self.cars_by_vin[vin] = (vin, model, year) if year not in self.cars_by_year: self.cars_by_year[year] = [] self.cars_by_year[year].append((vin, model, year)) def remove_car(self, vin): car = self.cars_by_vin.pop(vin, None) if car: self.cars_by_year[car[2]].remove(car) if not self.cars_by_year[car[2]]: del self.cars_by_year[car[2]] def get_car(self, vin): return self.cars_by_vin.get(vin, None) def get_cars_by_year(self, year): return self.cars_by_year.get(year, [])"},{"question":"You are given two strings, s and t, both consisting of lowercase letters. Your task is to determine if you can form the string t by rearranging the letters of s and adding at most one additional letter. Write a function: ```python def can_form_with_one_extra(s: str, t: str) -> bool: ``` that returns True if you can form t from s with at most one additional letter, and False otherwise. Example 1: Input: s = \\"abc\\", t = \\"cba\\" Output: True Explanation: The string \\"cba\\" can be formed by rearranging \\"abc\\". Example 2: Input: s = \\"abc\\", t = \\"abcd\\" Output: True Explanation: The string \\"abcd\\" can be formed by rearranging \\"abc\\" and adding one additional letter \\"d\\". Example 3: Input: s = \\"abc\\", t = \\"abcde\\" Output: False Explanation: The string \\"abcde\\" cannot be formed by rearranging \\"abc\\" and adding one additional letter; two extra letters are needed. Example 4: Input: s = \\"ab\\", t = \\"a\\" Output: False Explanation: The string \\"a\\" is missing one letter from \\"ab\\", and no rearrangement will reduce the characters. Constraints: - 1 <= s.length <= 1000 - 1 <= t.length <= 1000 - Both s and t consist of only lowercase letters.","solution":"def can_form_with_one_extra(s: str, t: str) -> bool: Determines if string t can be formed by rearranging the letters of s and adding at most one additional letter. from collections import Counter # If t is shorter than s, it\'s not possible to form t by just adding one letter. if len(t) < len(s): return False # Count the frequency of characters in both strings s_counter = Counter(s) t_counter = Counter(t) # Calculate the number of excess characters in t not present or insufficient in s extra_chars = 0 for char in t_counter: if t_counter[char] > s_counter[char]: extra_chars += t_counter[char] - s_counter[char] # We can add only one extra character return extra_chars <= 1"},{"question":"Write a function that summarizes a list of integers by counting consecutive runs of the same value. For example, given the list [2, 2, 3, 3, 3, 2, 2, 2], the function should return [(2, 2), (3, 3), (2, 3)], where each tuple represents a unique integer and the number of times it consecutively appears. The function should take and return a list of integers as specified. Keep the implementation simple and efficient, utilizing basic data structures and algorithms.","solution":"def summarize_runs(lst): Summarizes a list of integers by counting consecutive runs of the same value. Parameters: - lst: List of integers Returns: - List of tuples, where each tuple contains an integer and the count of its consecutive appearances. if not lst: return [] summary = [] current_value = lst[0] count = 1 for num in lst[1:]: if num == current_value: count += 1 else: summary.append((current_value, count)) current_value = num count = 1 summary.append((current_value, count)) # Add the last run return summary"},{"question":"Complete the function that takes a string `str` of length `n` (2 ≤ n ≤ 1000) as input and returns the length of the longest substring without repeating characters. You may assume that all characters in the string are ASCII characters. For example, given the string `\\"abcabcbb\\"`, the longest substring without repeating characters is `\\"abc\\"`, which has a length of `3`. Given the string `\\"bbbbb\\"`, the longest substring without repeating characters is `\\"b\\"`, with a length of `1`. Given the string `\\"pwwkew\\"`, the answer is `\\"wke\\"`, with the length of `3`. Note that the answer must be a substring, `\\"pwke\\"` is a subsequence and not a substring.","solution":"def longest_substring_without_repeating_characters(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): The input string of length n (2 ≤ n ≤ 1000). Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except the integer at that position. *Note:* Solve this problem without using division. Examples ```python [1, 2, 3, 4] => [24, 12, 8, 6] # (2*3*4, 1*3*4, 1*2*4, 1*2*3) [5, 6, 7, 8] => [336, 280, 240, 210] # (6*7*8, 5*7*8, 5*6*8, 5*6*7) [2, 3, 4] => [12, 8, 6] # (3*4, 2*4, 2*3) ```","solution":"def product_except_self(nums): Takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except the integer at that position. if not nums: return [] length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"# Task You are given an integer array `nums` and an integer `k`. Your task is to find the minimal length of a contiguous subarray for which the sum is greater than or equal to `k`. If no such subarray exists, return -1. For example: ``` nums = [2, 3, 1, 2, 4, 3], k = 7 The minimal length subarray is [4, 3] with length 2. nums = [1, 1, 1, 1, 1, 1, 1, 1], k = 11 There is no such subarray, so the return value is -1. ``` # Input / Output - `[input]` array `nums` 1 ≤ len(nums) ≤ 10^5 - `[input]` integer `k` 1 ≤ k ≤ 10^9 - `[output]` integer the minimal length of a contiguous subarray for which the sum is greater than or equal to `k`, or -1 if no such subarray exists.","solution":"def min_subarray_len(nums, k): Finds the minimal length of a contiguous subarray for which the sum is greater than or equal to k. If no such subarray exists, returns -1. n = len(nums) start = 0 current_sum = 0 min_length = float(\'inf\') for end in range(n): current_sum += nums[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an array of integers, return an array such that each element at index `i` is the product of all the numbers in the original array except the one at `i`. # Examples ``` input: [1, 2, 3, 4] output: [24, 12, 8, 6] input: [2, 3, 4, 5] output: [60, 40, 30, 24] input: [1, 1, 1, 1] output: [1, 1, 1, 1] input: [3, 2, 1] output: [2, 3, 6] ``` # Constraints - Do not use division. - The length of the array will be at least 2 and at most 100. - Each integer in the array will be between -100 and 100.","solution":"def product_except_self(nums): Given an array of integers, return an array such that each element at index `i` is the product of all the numbers in the original array except the one at `i`. length = len(nums) result = [1] * length # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate right products and combine with left products right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are given a `crypticNote` object that encodes a message in an unusual way. Write a function that decodes the message by identifying the pattern and making the necessary transformations to reveal the hidden text.","solution":"def decode_cryptic_note(encoded_message): Decodes a caesar cipher encoded message with a shift of 3 positions. shift = 3 decoded_message = [] for char in encoded_message: if char.isalpha(): # Shift character shifted_char = chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else chr((ord(char) - shift - 65) % 26 + 65) decoded_message.append(shifted_char) else: # Non-alphabetic characters remain the same decoded_message.append(char) return \'\'.join(decoded_message)"},{"question":"Write a function canFormPalindrome that takes a string as input and returns True if the string\'s characters can be rearranged to form a palindrome, and False otherwise. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). E.g 1: For input string \\"civic\\", the result should be True, as \\"civic\\" itself is a palindrome. E.g 2: For input string \\"ivicc\\", the result should be True because the characters can be rearranged to form \\"civic\\", which is a palindrome. E.g 3: For input string \\"hello\\", the result should be False, as it is not possible to rearrange the characters to form a palindrome.","solution":"def canFormPalindrome(s): Returns True if the string\'s characters can be rearranged to form a palindrome, and False otherwise. s = s.lower() char_count = {} for char in s: if char.isalnum(): # ignore non-alphanumeric characters char_count[char] = char_count.get(char, 0) + 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"You are given a list of integers representing a series of stock prices over several days. You can execute one buy and sell operation to maximize your profit, where the buy operation must occur before the sell operation. Task is to determine the maximum possible profit. ---Input--- - The first line contains T, the number of test cases. For each test case, the first line contains N, the number of days. The second line contains N space-separated integers representing the stock prices. ---Output--- For each test case, output an integer representing the maximum profit that can be achieved. If no profit is possible, return 0. ---Constraints--- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 105 - 1 ≤ Stock prices ≤ 104 - Sum of N over all test cases doesn\'t exceed 5×105 ---Sample Input--- 3 6 7 1 5 3 6 4 5 7 6 4 3 1 4 1 2 100 0 ---Sample Output--- 5 0 99 ---Explanation--- In the first test case, buying on day 2 (price = 1) and selling on day 5 (price = 6) results in a maximum profit of 6 - 1 = 5. In the second test case, no profit is possible because the prices are decreasing every day. In the third test case, the optimal strategy is to buy on day 1 (price = 1) and sell on day 3 (price = 100), yielding a profit of 100 - 1 = 99.","solution":"def maximum_profit(prices): Returns the maximum possible profit from a single buy and sell operation on given stock prices. :param prices: List of integers representing stock prices. :return: Integer, maximum possible profit. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit def process_test_cases(test_cases): Processes multiple test cases for the stock profit problem. :param test_cases: List of tuples, each containing the number of days and the stock prices. :return: List of integers representing the maximum profit for each test case. results = [] for days, prices in test_cases: results.append(maximum_profit(prices)) return results"},{"question":"You are given a string s consisting of lowercase alphabet letters and a set of queries. Each query contains two integers l and r (1 leq l leq r leq |s|). For each query, you are required to count how many distinct letters appear in the substring s[l:r] (inclusive). -----Input----- The first line contains the string s (1 leq |s| leq 100,000). The second line contains one integer q (1 leq q leq 100,000), the number of queries. Each of the next q lines contains two integers l and r representing the substring s[l:r] (1-indexed). -----Output----- For each query, print one integer representing the number of distinct letters in the substring s[l:r]. -----Example----- Input abcba 3 1 3 2 5 1 5 Output 3 3 3 -----Note----- For the first query, the substring s[1:3] = \\"abc\\" contains the distinct letters \'a\', \'b\', and \'c\'. For the second query, the substring s[2:5] = \\"bcba\\" contains the distinct letters \'b\', \'c\', \'b\', and \'a\'. Only \'b\', \'c\', and \'a\' are distinct. For the third query, the substring s[1:5] = \\"abcba\\" contains the distinct letters \'a\', \'b\', \'c\', \'b\', and \'a\'. Only \'a\', \'b\', and \'c\' are distinct.","solution":"def count_distinct_letters(s, queries): Given a string s and a list of queries, each containing two integers l and r, this function returns a list of counts of distinct letters in the substring s[l:r] for each query. results = [] for l, r in queries: substring = s[l-1:r] # Convert 1-indexed to 0-indexed distinct_count = len(set(substring)) results.append(distinct_count) return results"},{"question":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. Each number in candidates may only be used once in the combination. Note: The solution set must not contain duplicate combinations. Example 1: Input: candidates = [10,1,2,7,6,1,5], target = 8 Output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] Example 2: Input: candidates = [2,5,2,1,2], target = 5 Output: [ [1,2,2], [5] ] Example 3: Input: candidates = [2,3,5], target = 8 Output: [ [3,5] ] Constraints: The number of candidates (n) is in the range [1, 30]. 1 <= candidates[i] <= 200. All elements of candidates are distinct. 1 <= target <= 500.","solution":"def combination_sum2(candidates, target): candidates.sort() res = [] def backtrack(start, target, path): if target == 0: res.append(path) return for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i-1]: continue if candidates[i] > target: break backtrack(i + 1, target - candidates[i], path + [candidates[i]]) backtrack(0, target, []) return res"},{"question":"Task You have been given a list of daily stock prices for a company, represented as an array `prices` where `prices[i]` is the price of the stock on the i-th day. You are only allowed to complete at most one transaction (i.e., buy one and sell one share of the stock), and you need to maximize your profit. Note that you cannot sell a stock before you buy one. Write a function that determines the maximum profit you can achieve from this transaction. If no profit can be achieved, return 0. Example For `prices = [7, 1, 5, 3, 6, 4]`, the result should be `5`. The optimal strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6), which results in a profit of `6 - 1 = 5`. For `prices = [7, 6, 4, 3, 1]`, the result should be `0`. In this case, no transaction occurs because the stock price never rises and you\'ll return 0. Input/Output - `[input]` integer array `prices` An array of integers representing the stock prices on each day. - `[output]` an integer The maximum profit you can achieve from one transaction.","solution":"def max_profit(prices): Determines the maximum profit that can be achieved from one transaction. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function named `alphabet_position` that takes a string as input and returns a new string where each letter is replaced by its position in the alphabet. For example: ``` alphabet_position(\\"abc\\") # => \\"1 2 3\\" alphabet_position(\\"aBcDeF\\") # => \\"1 2 3 4 5 6\\" alphabet_position(\\"hello\\") # => \\"8 5 12 12 15\\" ``` **Notes:** - Non-alphabet characters should be ignored. - Ensure your function is case-insensitive, treating upper and lower case letters the same. - Your output should not have trailing spaces, and numbers should be separated by a single space.","solution":"def alphabet_position(text): Replace each letter in a given string with its position in the alphabet. Non-alphabet characters are ignored, and the function is case-insensitive. Arguments: text -- the input string Returns: A new string where each letter is replaced by its position in the alphabet. positions = [] for char in text.lower(): if char.isalpha(): position = ord(char) - ord(\'a\') + 1 positions.append(str(position)) return \' \'.join(positions)"},{"question":"=====Problem Statement===== You are given two strings, `s1` and `s2`, of equal length consisting of lowercase alphabetical characters. Your task is to count the number of characters that differ between `s1` and `s2` at the same positions. =====Input Format===== The first line contains the string `s1`. The second line contains the string `s2`. =====Constraints===== - The length of both strings is between 1 and 100 inclusive. - Both strings `s1` and `s2` are of equal length. - Strings consist of only lowercase alphabetical characters (a-z). =====Output Format===== Output the number of characters that differ between the two strings at the same positions. =====Example===== Input: abcdef abcfgh Output: 3","solution":"def count_differing_characters(s1, s2): Returns the number of characters that differ between s1 and s2 at the same positions. return sum(1 for a, b in zip(s1, s2) if a != b)"},{"question":"Write a function, isSudokuValid, that takes in a 9x9 2D list representing a Sudoku board and returns true if the board is a valid Sudoku solution. A Sudoku board is valid if: 1. Each row contains the digits from 1 to 9 without repetition. 2. Each column contains the digits from 1 to 9 without repetition. 3. Each of the 9, 3x3 sub-boxes of the grid contains the digits from 1 to 9 without repetition. The function should return false for invalid arguments (e.g., input is not a 9x9 grid, contains non-digit characters, or the digits are not in the range from 1 to 9). For more information about Sudoku, follow this link: https://en.wikipedia.org/wiki/Sudoku ```python def isSudokuValid(board): # Your code here ```","solution":"def isSudokuValid(board): def is_valid_group(group): Helper function to check if a group contains digits 1-9 without repetition return sorted(group) == list(range(1, 10)) def extract_sub_boxes(board): Extract all 3x3 sub-boxes from the board sub_boxes = [] for i in range(0, 9, 3): for j in range(0, 9, 3): sub_box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] sub_boxes.append(sub_box) return sub_boxes if len(board) != 9 or any(len(row) != 9 for row in board): return False for row in board: if any(not isinstance(cell, int) or not (1 <= cell <= 9) for cell in row): return False # Check rows and columns for i in range(9): row = board[i] column = [board[j][i] for j in range(9)] if not is_valid_group(row) or not is_valid_group(column): return False # Check 3x3 sub-boxes sub_boxes = extract_sub_boxes(board) for sub_box in sub_boxes: if not is_valid_group(sub_box): return False return True"},{"question":"Alice loves sequences and challenges. She comes across a sequence transformation challenge. The challenge involves transforming an integer sequence using a given set of operations until it satisfies a certain condition. Alice needs to find the minimum number of operations required to make all elements of the sequence equal. The allowed operation is to increment or decrement any element of the sequence by 1. Can you help Alice determine the minimum number of operations required? The problem is defined as follows: -----Input:----- - The first line contains a single integer T, representing the number of test cases. The following lines describe each test case. - Each test case starts with a single integer N, the number of elements in the sequence. - The second line of each test case contains N space-separated integers, A_1, A_2, ..., A_N, representing the sequence. -----Output:----- For each test case, print a single integer, the minimum number of operations required to make all elements of the sequence equal. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 100000 - 1 leq A_i leq 100000 for all A_i -----Subtasks:----- Subtask 1 [20 points]: N leq 10, There are at most 10 elements in the sequence. Subtask 2 [30 points]: N leq 1000, There are at most 1000 elements in the sequence. Subtask 3 [50 points]: No additional constraints. -----Sample Input:----- 3 3 1 2 3 2 10 10 4 1 3 3 7 -----Sample Output:----- 2 0 6 -----EXPLANATION:----- For the first sample, the sequence is [1, 2, 3]. One way to make all elements equal is: - Increment the first element: [2, 2, 3] - Decrement the last element: [2, 2, 2] This requires 2 operations. For the second sample, the sequence is [10, 10]. All elements are already equal. This requires 0 operations. For the third sample, the sequence is [1, 3, 3, 7]. One way to make all elements equal is: - Increment the first element twice: [3, 3, 3, 7] - Decrement the last element four times: [3, 3, 3, 3] This requires 6 operations.","solution":"def min_operations_to_make_equal(T, test_cases): Calculate the minimum number of operations required to make all elements of the sequence equal for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): Each tuple contains two elements - an integer N and a list of N integers. Returns: list of int: Minimum number of operations for each test case results = [] for i in range(T): N, A = test_cases[i] median = sorted(A)[N // 2] operations = sum(abs(x - median) for x in A) results.append(operations) return results"},{"question":"=====Function Descriptions===== itertools.product() This tool computes the Cartesian product of input iterables. It is equivalent to nested for-loops. For example, product(A, B) returns the same as ((x,y) for x in A for y in B). itertools.permutations() This tool returns successive r length permutations of elements in the iterable. If r is not specified or is None, then r defaults to the length of the iterable. itertools.combinations() This tool returns the r length subsequences of elements from the input iterable. Combinations are emitted in lexicographic sorted order. itertools.combinations_with_replacement() This tool returns r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once. Example Code >>> from itertools import product, permutations, combinations, combinations_with_replacement >>> for p in product([1,2], [\'a\',\'b\']): ... print(p) ... (1, \'a\') (1, \'b\') (2, \'a\') (2, \'b\') >>> for p in permutations([1,2,3], 2): ... print(p) ... (1, 2) (1, 3) (2, 1) (2, 3) (3, 1) (3, 2) >>> for c in combinations([1,2,3], 2): ... print(c) ... (1, 2) (1, 3) (2, 3) >>> for cr in combinations_with_replacement([1,2], 2): ... print(cr) ... (1, 1) (1, 2) (2, 2) =====Problem Statement===== Given two lists A and B, find the Cartesian product of A and B using itertools.product(). =====Input Format===== The first line contains an integer N, the number of elements in list A. The next line contains N space-separated integers. The third line contains an integer M, the number of elements in list B. The fourth line contains M space-separated integers. =====Constraints===== 0 < N, M ≤ 10 =====Output Format===== Print the Cartesian product of A and B as tuples, each on a new line.","solution":"from itertools import product def cartesian_product(A, B): Given two lists A and B, returns the Cartesian product of A and B. return list(product(A, B)) # Example usage: # A = [1, 2] # B = [\'a\', \'b\'] # print(cartesian_product(A, B)) # Output: # [(1, \'a\'), (1, \'b\'), (2, \'a\'), (2, \'b\')]"},{"question":"Write a function that takes in a string representation of a nested list and returns the sum of all integers in the list. The nested list can contain other lists which may also contain further lists, and so on. All the integers in the nested list, regardless of their level of nesting, should be included in the sum. The input string will always represent a valid nested list of integers. The integers can be positive, negative, or zero. For example: ```python \\"[[1, 2, [-1]], [3, [4, [-5, [6]]]]]\\" -> 10 \\"[1, 2, [3, 4, [5, 6]], 7, 8]\\" -> 36 \\"[[]]\\" -> 0 \\"[[[-1]], -2, 3, [4]]\\" -> 4 [[[[0]]], 0\\" -> 0 ``` If the input string is empty or null, return 0. Hint: You can use a recursive approach to traverse and sum the integers at each level of nesting.","solution":"import ast def sum_nested_list(input_str): Returns the sum of all integers in a nested list represented by a string. if not input_str: return 0 nested_list = ast.literal_eval(input_str) def sum_list(lst): total = 0 for item in lst: if isinstance(item, list): total += sum_list(item) else: total += item return total return sum_list(nested_list)"},{"question":"A group of friends in a park is playing a game where each friend has to give a gift to another friend. The rule is that a friend can give exactly one gift to another friend, and they can receive only one gift in return. The game is over when every friend has given all their gifts away but not necessarily received one. Given N friends, determine how many total gifts need to be exchanged to complete the game. -----Input:----- - First line contains T (Number of test cases). - Each test case contains one integer N (Number of friends). -----Output:----- For each test case, output in a single line the total number of gifts exchanged. -----Constraints:----- - 1 ≤ T ≤ 100,000 - 1 ≤ N ≤ 1,000,000,000 -----Sample Input:----- 2 1 4 -----Sample Output:----- 0 4","solution":"def total_gifts_exchanged(T, test_cases): results = [] for i in range(T): N = test_cases[i] if N == 1: results.append(0) else: results.append(N) return results"},{"question":"The city of Alphaville has a unique public transportation system where buses run on circular routes. Each route has `N` bus stops, numbered consecutively from `1` to `N`. Buses travel in a circular manner: after the `N`-th stop, the next stop is the 1st stop again. One day, a software glitch caused the buses to perform a \\"skip stop\\". This means that a bus, instead of stopping at every bus stop, now only stops at every `K`-th stop. So, starting from bus stop `S`, the bus will stop at the stops `(S % N) + i * (K % N)` for `i = 0, 1, 2, ...`. Given the values `N`, `K`, and `S`, determine the first bus stop that the bus will stop at `N` times. If the bus does not stop at `N` distinct stops, output `-1`. -----Input----- The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains three space-separated integers `N`, `K`, and `S`. -----Output----- For each test case, print a single line containing the number of the first bus stop that the bus will stop at `N` times, or `-1` if it does not stop at `N` distinct stops. -----Constraints----- - 1 ≤ T ≤ 1,000 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 100 - 1 ≤ S ≤ 100 -----Example Input----- 3 5 2 1 6 3 4 7 5 7 -----Example Output----- 1 -1 7 -----Explanation----- In the first case, the bus stops at 1, 3, 5, 2, 4, repeating back to 1, forming a complete cycle. In the second case, the bus stops at 4, 1, 4, 1,..., stopping only at 4 and 1. In the third case, the bus stops at 7, 5, 3, 1, 6, 4, 2, completing a full cycle without repetition.","solution":"def first_full_cycle_stop(N, K, S): Given the values N, K, and S, determine the first bus stop that the bus will stop at N times. If the bus does not stop at N distinct stops, return -1. visited = set() stop = S for i in range(N): if stop in visited: return -1 visited.add(stop) stop = (stop + K - 1) % N + 1 return S if len(visited) == N else -1 def solve(bus_routes): Given a list of test cases (each with N, K, S), determine the result for each case. @param bus_routes: list of tuples, where each tuple contains (N, K, S) @return: list of results for each test case results = [] for N, K, S in bus_routes: results.append(first_full_cycle_stop(N, K, S)) return results"},{"question":"# Instructions Write a function that takes a string representing a mathematical expression containing only non-negative integers, addition (+), subtraction (-), and multiplication (*) operators, and returns the result of the expression as an integer. The input string will have no spaces and the operations should respect the standard order of operations (PEMDAS/BODMAS). ```python evaluate_expression(\\"2+3*4\\") should return 14 evaluate_expression(\\"10+2*6\\") should return 22 evaluate_expression(\\"100*2+12\\") should return 212 evaluate_expression(\\"100*(2+12)\\") should return 1400 evaluate_expression(\\"100*(2+12)/14\\") should return 100 evaluate_expression(\\"4+18/2*3\\") should return 31 evaluate_expression(\\"3+5/2\\") should return 5 ```","solution":"def evaluate_expression(expression: str) -> int: def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while i < len(tokens) and tokens[i].isdigit(): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return evaluate(expression)"},{"question":"Write a function `unique_letters_count` that takes a string and returns a dictionary where the keys are unique letters (ignoring case) found in the string, and the values are the number of times each letter appears in the string. Non-letter characters should be ignored. # Example ``` unique_letters_count(\\"Hello, World!\\") == {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` # Constraints - The input string will have a length between 1 and 1000 characters - The input string may contain various characters, but only alphabetic characters should be considered","solution":"def unique_letters_count(s): Returns a dictionary with the count of unique letters in the string. Non-letter characters are ignored. from collections import defaultdict count = defaultdict(int) for char in s: if char.isalpha(): char = char.lower() count[char] += 1 return dict(count)"},{"question":"Count Vowel Permutations Consider strings formed by a set of vowels: \'a\', \'e\', \'i\', \'o\', \'u\'. A special set of rules apply to these strings. For each character in the string: - \'a\' may only be followed by \'e\' - \'e\' may only be followed by \'a\' or \'i\' - \'i\' may not be followed by another \'i\' - \'o\' may only be followed by \'i\' or \'u\' - \'u\' may only be followed by \'a\' Given an input integer `n`, representing the length of these strings, write a function to count how many permutations of vowels of length `n` are possible. The answer may be large, so return it modulo 10^9 + 7. ```python def count_vowel_permutations(n): # Your code here # Example usage: print(count_vowel_permutations(1)) # should return 5 print(count_vowel_permutations(2)) # should return 10 print(count_vowel_permutations(5)) # should return 68 ``` **Notes:** - Input `n` will be a positive integer (1 ≤ n ≤ 2 * 10^4). - Consider using dynamic programming to efficiently solve the problem.","solution":"def count_vowel_permutations(n): MOD = 10**9 + 7 # Vowel indices: a -> 0, e -> 1, i -> 2, o -> 3, u -> 4 # dp state representing count of permutations ending in a, e, i, o, u dp = [[0]*5 for _ in range(n)] # Initial state: length 1, each vowel can be on its own for j in range(5): dp[0][j] = 1 # Transition rules for i in range(1, n): dp[i][0] = dp[i-1][1] % MOD # a can only follow e dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % MOD # e can follow a or i dp[i][2] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][3] + dp[i-1][4]) % MOD # i can follow a, e, o, u dp[i][3] = (dp[i-1][2] + dp[i-1][4]) % MOD # o can follow i or u dp[i][4] = dp[i-1][0] % MOD # u can follow a return sum(dp[n-1]) % MOD"},{"question":"Write a function `cumulative_triangle` that takes a list of numbers and constructs a cumulative sum triangle, returning the sum of the numbers in the triangle\'s apex. Here is how the triangle is constructed: - Start with the input list as the base of the triangle. - Construct the next row by summing adjacent numbers from the row directly below. - Continue this process until you reach a single number at the top, which is the triangle\'s apex. # Examples ```python cumulative_triangle([1, 2, 3, 4, 5]) => 48 # Explanation: # Start with [1, 2, 3, 4, 5] # Next row: [3, 5, 7, 9] # Next row: [8, 12, 16] # Next row: [20, 28] # Next row: [48] # Result is 48 cumulative_triangle([1, 2, 3]) => 8 # Explanation: # Start with [1, 2, 3] # Next row: [3, 5] # Next row: [8] # Result is 8 cumulative_triangle([-1, -1, -1]) => -4 # Explanation: # Start with [-1, -1, -1] # Next row: [-2, -2] # Next row: [-4] # Result is -4 cumulative_triangle([1, 2, 3, 4]) => 20 # Explanation: # Start with [1, 2, 3, 4] # Next row: [3, 5, 7] # Next row: [8, 12] # Next row: [20] # Result is 20 ``` **Note:** The input list will always contain at least one element, and all elements will be valid numbers.","solution":"def cumulative_triangle(nums): Constructs a cumulative sum triangle and returns the apex value. Args: nums (list of int/float): The base list to start constructing the triangle. Returns: int/float: The apex value of the cumulative sum triangle. # Process until the list is reduced to a single number while len(nums) > 1: # Generate the next row by summing adjacent pairs nums = [nums[i] + nums[i+1] for i in range(len(nums)-1)] # The last remaining number is the apex number return nums[0]"},{"question":"Given a list of integers, write a function that finds the maximum difference between any two elements of the list such that the larger element comes after the smaller element in the list. -----Input----- - The first line of the input contains an integer N, denoting the number of elements in the list. - The second line contains N space-separated integers, representing the elements of the list. -----Output----- Print a single integer, which is the maximum difference between the elements of the list such that the larger element comes after the smaller element. If no such elements exist, print -1. -----Constraints----- - 2 ≤ N ≤ 10^5 - -10^9 ≤ Each element of the list ≤ 10^9 -----Example----- Input: 6 1 2 90 10 110 5 Output: 109 Explanation: The maximum difference is between 110 and 1. Input: 5 4 3 2 1 0 Output: -1 Explanation: No element in the list is larger than a preceding element. -----Note----- - Pay attention to the constraints to ensure efficient implementation. - Consider edge cases including lists where all elements are the same, or in descending order.","solution":"def max_difference(arr): Finds the maximum difference between any two elements in the list such that the larger element comes after the smaller element. :param arr: List of integers :return: Maximum difference or -1 if no such elements exist if not arr or len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Given an array of size n, we denote its k-rotation as the array formed by rotating the original array k positions to the right. For example, a 2-rotation of `[1, 2, 3, 4]` would be `[3, 4, 1, 2]`. Write a function that takes an array of integers and an integer k as input and returns its k-rotation. -----Function Signature----- ```python def k_rotation(arr: List[int], k: int) -> List[int]: pass ``` -----Input----- - `arr`: a list of integers of size n (1 ≤ n ≤ 10^5) - `k`: an integer representing the number of rotations (0 ≤ k ≤ 10^9) -----Output----- - A list of integers representing the k-rotated array. -----Examples----- Input: `arr = [1, 2, 3, 4, 5]` `k = 2` Output: `[4, 5, 1, 2, 3]` Input: `arr = [1, 2, 3, 4, 5]` `k = 5` Output: `[1, 2, 3, 4, 5]` Input: `arr = [1, 2, 3, 4, 5]` `k = 12` Output: `[4, 5, 1, 2, 3]`","solution":"from typing import List def k_rotation(arr: List[int], k: int) -> List[int]: Returns the k-rotated version of the array. n = len(arr) k = k % n # Optimize k to be within the length of the array return arr[-k:] + arr[:-k]"},{"question":"Write a class `HitCounter` that keeps track of number of hits received in the past 5 minutes (300 seconds). Your class should have the following methods: - `HitCounter()`: Initializes the counter with default values. - `void hit(int timestamp)`: Records a hit that happened at `timestamp` (in seconds). - `int getHits(int timestamp)`: Returns the number of hits received in the past 5 minutes from `timestamp`. The `timestamp` is assumed to increase monotonically (i.e. calls to `hit` and `getHits` have strictly increasing values of `timestamp`). Example 1: Input: [\\"HitCounter\\",\\"hit\\",\\"hit\\",\\"hit\\",\\"getHits\\",\\"hit\\",\\"getHits\\"], [[],[1],[2],[3],[4],[300],[301]] Output: [null,null,null,null,3,null,4] Explanation: First, HitCounter = HitCounter() is initialized. Then: hitCounter.hit(1) is called. hitCounter.hit(2) is called. hitCounter.hit(3) is called. hitCounter.getHits(4) is called, returning 3 hits. hitCounter.hit(300) is called. hitCounter.getHits(301) is called, returning 4 hits. Note: - Each function `hit` and `getHits` will be called at most 10^4 times. - The last `timestamp` (in seconds) will not exceed 10^9. - Hits have timestamps strictly in ascending order.","solution":"import collections class HitCounter: def __init__(self): Initializes the hit counter with default values. self.hits = collections.deque() def hit(self, timestamp: int): Records a hit that happened at `timestamp` (in seconds). :param timestamp: int self.hits.append(timestamp) def getHits(self, timestamp: int) -> int: Returns the number of hits received in the past 5 minutes from `timestamp`. :param timestamp: int :return: int # Remove hits that are older than 5 minutes (300 seconds) while self.hits and self.hits[0] <= timestamp - 300: self.hits.popleft() # The remaining hits are within the past 5 minutes return len(self.hits)"},{"question":"Given an integer array nums and an integer k, determine whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Write a function that returns true if there are such elements in the array, otherwise returns false. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: true Explanation: nums[1] and nums[3] are both 1 and their absolute difference is 3 which is at most 3. Example 2: Input: nums = [1, 0, 1, 1], k = 1 Output: true Explanation: nums[2] and nums[3] are both 1 and their absolute difference is 1 which is at most 1. Example 3: Input: nums = [1, 2, 3, 1, 2, 3], k = 2 Output: false Explanation: There are no elements with distance at most 2 that are the same. Function signature: ```python def containsNearbyDuplicate(nums: List[int], k: int) -> bool: ```","solution":"from typing import List def containsNearbyDuplicate(nums: List[int], k: int) -> bool: Determines whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Args: nums (List[int]): List of integers. k (int): An integer representing the maximum allowed difference between indices. Returns: bool: True if such elements exist, otherwise False. index_map = {} for i, num in enumerate(nums): if num in index_map and i - index_map[num] <= k: return True index_map[num] = i return False"},{"question":"-----Problem Statement----- Write a program that accepts two numbers, a and b, and outputs their sum. -----Input----- The only line contains two space-separated integers a and b. -----Output----- Output the answer in a single line. -----Constraints----- - 0 ≤ a, b ≤ 10^5 -----Sample Input----- 12 34 -----Sample Output----- 46","solution":"def sum_of_two_numbers(a, b): Accepts two integers a and b, and returns their sum. return a + b"},{"question":"Write a function that takes a string containing a geographical direction (\\"N\\", \\"S\\", \\"E\\", \\"W\\") and a step size (an integer), and calculates the new coordinates on a Cartesian plane starting from the origin (0, 0). The direction indicates whether to move north, south, east, or west by the given step size. For example: ```python move(\\"N\\", 3) == (0, 3) move(\\"S\\", 2) == (0, -2) move(\\"E\\", 5) == (5, 0) move(\\"W\\", 4) == (-4, 0) ``` The function should return a tuple representing the new coordinates (x, y). Note that the input direction is a single uppercase character and the step size is a non-negative integer (>= 0).","solution":"def move(direction, steps): Given a direction (\\"N\\", \\"S\\", \\"E\\", \\"W\\") and a step size, calculates and returns the new coordinates (x, y) on a Cartesian plane starting from the origin (0, 0). if direction == \\"N\\": return (0, steps) elif direction == \\"S\\": return (0, -steps) elif direction == \\"E\\": return (steps, 0) elif direction == \\"W\\": return (-steps, 0) else: raise ValueError(\\"Invalid direction\\")"},{"question":"Write a function that takes a string of characters and returns the most frequently occurring character within that string. In case of a tie (i.e., multiple characters have the same highest frequency), return the one which appears first in the string. Assume the input string will always have at least one character and contains only lowercase alphabetical characters. For example: - `most_frequent_character(\\"character\\")` should return `\\"c\\"` because \'c\' appears 2 times and is the first to do so. - `most_frequent_character(\\"aabbcc\\")` should return `\\"a\\"` because \'a\', \'b\', and \'c\' all appear 2 times but \'a\' appears first.","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the string s. In case of a tie, returns the character which appears first in the string. from collections import Counter # count the frequency of each character counts = Counter(s) # find the character with maximum frequency max_count = max(counts.values()) # iterate over the string to find the first character with the maximum frequency for char in s: if counts[char] == max_count: return char"},{"question":"You are given an array of integers and a target value. Determine if there are two integers in the array whose sum equals the target value. If such a pair exists, return their indices as a list, otherwise return an empty list. Task: Write ```python find_pair(nums, target) ``` that will find and return the indices of the two integers in the array `nums` such that their sum equals `target`. If no such pair exists, return an empty list. E.g ```python find_pair([2, 7, 11, 15], 9) == [0, 1] # 2 + 7 = 9 find_pair([3, 2, 4], 6) == [1, 2] # 2 + 4 = 6 find_pair([3, 3], 6) == [0, 1] # 3 + 3 = 6 find_pair([1, 2, 3], 7) == [] # No such pair exists ```","solution":"def find_pair(nums, target): Returns indices of the two numbers in the list that add up to the target, otherwise returns an empty list. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"In a game, players collect artifacts identified by distinct IDs, which are positive integers. Each artifact has a specific power value, and the total power of a player is the sum of power values of collected artifacts. The power values of artifacts are given in an array such that the i-th position represents the power value of the artifact with ID i+1. The task is to determine the maximum power a player can achieve by collecting non-adjacent artifacts. Write a function to find the maximum power the player can collect. Assume the input is always a non-empty list of positive integers. For example: ```python def maxPower(artifacts): # Your code here # Example usage print(maxPower([5, 5, 10, 100, 10, 5])) # Output: 110 print(maxPower([3, 2, 5, 10, 7])) # Output: 15 ```","solution":"def maxPower(artifacts): if not artifacts: return 0 n = len(artifacts) if n == 1: return artifacts[0] if n == 2: return max(artifacts[0], artifacts[1]) dp = [0] * n dp[0] = artifacts[0] dp[1] = max(artifacts[0], artifacts[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + artifacts[i]) return dp[-1] # Example usage print(maxPower([5, 5, 10, 100, 10, 5])) # Output: 110 print(maxPower([3, 2, 5, 10, 7])) # Output: 15"},{"question":"You have been tasked with creating a function that receives a positive integer `n` and returns the factorial of `n` as a string. The factorial of a non-negative integer `n`, denoted as `n!`, is the product of all positive integers less than or equal to `n`. For example, the factorial of 5, represented as `5!`, is `5 * 4 * 3 * 2 * 1 = 120`. **Examples:** ```python factorial(5) # returns \'120\' factorial(10) # returns \'3628800\' factorial(0) # returns \'1\' ``` **Note:** You may assume that the input will always be a non-negative integer. Pay special attention to computational efficiency for larger values of `n`, as factorials grow very quickly.","solution":"def factorial(n): Returns the factorial of the given non-negative integer `n` as a string. if n == 0: return \\"1\\" result = 1 for i in range(1, n + 1): result *= i return str(result)"},{"question":"You are provided with a list of integers, where each integer represents the number of pages in a book. Your task is to redistribute these books among a group of people such that each person gets a contiguous block of books, and the maximum number of pages any single person has to read is minimized. Write a function that takes in the list of pages and the number of people, and returns the minimum possible maximum number of pages any single person has to read. You can assume there are at least as many books as people. Function Signature: ```python def minimize_max_pages(pages: List[int], people: int) -> int: ``` Example: ```python pages = [100, 200, 300, 400, 500] people = 2 minimize_max_pages(pages, people) # should return 900 ``` Explanation: - By distributing the books as [100, 200, 300] for one person and [400, 500] for the other, the maximum pages read by a single person is 900. - This is the minimum possible maximum, as giving any other arrangement either increases the pages read by one person or does not reduce the maximum.","solution":"from typing import List def can_allocate(pages: List[int], people: int, max_pages_limit: int) -> bool: required_people = 1 current_pages = 0 for page in pages: if current_pages + page > max_pages_limit: required_people += 1 current_pages = page if required_people > people: return False else: current_pages += page return True def minimize_max_pages(pages: List[int], people: int) -> int: low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if can_allocate(pages, people, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Given an array of integers, we want to find the length of the longest contiguous subarray such that all elements in the subarray are equal. For example, consider the array: `arr = [1, 1, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1]` The longest contiguous subarray where all elements are equal is `[1, 1, 1, 1, 1, 1]`, which has a length of 6. Implement the function `longest_contiguous_subarray(arr)` which takes an array of integers as input and returns the length of the longest contiguous subarray with all elements equal. # Example ```python assert longest_contiguous_subarray([1, 1, 2, 3, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1]) == 6 assert longest_contiguous_subarray([1, 2, 2, 2, 3, 3, 3, 3, 3, 2, 1, 1]) == 5 assert longest_contiguous_subarray([5, 5, 5, 5, 5]) == 5 assert longest_contiguous_subarray([1, 2, 3, 4]) == 1 assert longest_contiguous_subarray([]) == 0 ```","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest contiguous subarray with all elements equal. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You\'ve got a string S consisting of lowercase English letters. You can perform the following operation any number of times: choose a non-empty substring of S and change all of its characters to the same character. Your task is to determine the minimum number of operations required to make all characters of the string the same. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S. The second line contains the string S (|S| = n) consisting of lowercase English letters. -----Output----- Print the minimum number of operations required to make all characters of the string the same. -----Examples----- Input 4 abba Output 2 Input 5 aabaa Output 1 Input 10 abcdefghij Output 9 -----Note----- In the first test, one optimal way is to change \\"bb\\" to \\"a\\" making the string \\"aaaa\\", taking 2 operations (one for \\"a\\", then one for \\"aaaa\\"). In the second test, the string is already almost uniform except for one character, so it takes just 1 operation by changing the single \'b\' to \'a\'. In the third test, changing each character in the string to \'a\' individually takes 9 operations.","solution":"def min_operations_to_unify_string(n, S): Determine the minimum number of operations required to make all characters of the string the same. max_char_count = max(S.count(char) for char in set(S)) return n - max_char_count"},{"question":"*** Matrix Rotation *** In this exercise, you are given a square matrix represented as a 2D list. Write a function to rotate the matrix 90 degrees clockwise. The matrix has NxN dimensions where N is the number of rows (and columns) of the matrix. You are not allowed to use any additional lists or data structures; the rotation must take place in place within the given matrix. The function signature should be: ```python def rotate_matrix(matrix: List[List[int]]) -> None: ``` # Examples: 1. Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) ``` Output: ```python matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` 2. Input: ```python matrix = [ [1, 2], [3, 4] ] rotate_matrix(matrix) ``` Output: ```python matrix = [ [3, 1], [4, 2] ] ``` # Constraints: - The input matrix will always be a square matrix. - The given matrix needs to be rotated in place; no additional data structures such as nested loops or helper arrays should be used. - The function doesn\'t have to return anything; modify the matrix in place.","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are in charge of designing a system to manage packages in a warehouse. Each package has a unique ID, a weight, and a destination city. You need to implement a system that can: 1. Add a new package with a given ID, weight, and destination. 2. Remove a package by its ID. 3. Retrieve the package with the maximum weight. 4. Retrieve all packages destined for a specific city, sorted by their weight in descending order. Implement a class called `Warehouse` with the following methods: - `add_package(id: int, weight: int, destination: str) -> None`: Adds a new package with the specified ID, weight, and destination. - `remove_package(id: int) -> None`: Removes the package with the given ID. If the package does not exist, do nothing. - `get_max_weight_package() -> Tuple[int, int, str]`: Returns a tuple with the ID, weight, and destination of the package with the maximum weight. If there are multiple packages with the same maximum weight, return any one of them. - `get_packages_by_city(destination: str) -> List[Tuple[int, int]]`: Returns a list of tuples where each tuple contains the ID and weight of packages destined for the given city, sorted by weight in descending order. If there are no packages for the given city, return an empty list. You can assume that all package IDs will be unique and all inputs will be valid. Example: ```python warehouse = Warehouse() # Adding packages warehouse.add_package(1, 10, \\"New York\\") warehouse.add_package(2, 15, \\"Boston\\") warehouse.add_package(3, 5, \\"New York\\") warehouse.add_package(4, 20, \\"San Francisco\\") # Retrieving the package with the maximum weight print(warehouse.get_max_weight_package()) # Output: (4, 20, \\"San Francisco\\") # Retrieving packages for \\"New York\\" print(warehouse.get_packages_by_city(\\"New York\\")) # Output: [(1, 10), (3, 5)] # Removing a package warehouse.remove_package(3) # Retrieving packages for \\"New York\\" after removal print(warehouse.get_packages_by_city(\\"New York\\")) # Output: [(1, 10)] ``` Note: - Your solution must be efficient and handle a large number of packages gracefully. - Use appropriate data structures to ensure that each operation (add, remove, get) can be performed in optimal time complexity.","solution":"from typing import Tuple, List class Warehouse: def __init__(self): self.packages = {} def add_package(self, id: int, weight: int, destination: str) -> None: self.packages[id] = (weight, destination) def remove_package(self, id: int) -> None: if id in self.packages: del self.packages[id] def get_max_weight_package(self) -> Tuple[int, int, str]: if not self.packages: return None max_weight_id = max(self.packages, key=lambda id: self.packages[id][0]) return (max_weight_id, self.packages[max_weight_id][0], self.packages[max_weight_id][1]) def get_packages_by_city(self, destination: str) -> List[Tuple[int, int]]: filtered_packages = [(id, weight) for id, (weight, dest) in self.packages.items() if dest == destination] return sorted(filtered_packages, key=lambda pkg: pkg[1], reverse=True)"},{"question":"Adam is working on a new feature for his application that requires him to compute the sum of digits of a number raised to a power. He needs to compute the sum of the digits of a number `A` raised to the power `B`. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing two integers, A and B. -----Output:----- For each test case, output in a single line the sum of the digits of A^B. -----Constraints----- - 1 leq T leq 10^4 - 1 leq A, B leq 100 -----Sample Input:----- 2 2 3 10 2 -----Sample Output:----- 8 1 -----EXPLANATION:----- For 1) 2^3 = 8, sum of digits is 8. For 2) 10^2 = 100, sum of digits is 1.","solution":"def sum_of_digits_of_power(a, b): Returns the sum of the digits of a raised to the power of b. power_result = a ** b digits_sum = sum(map(int, str(power_result))) return digits_sum def process_test_cases(test_cases): Process a list of test cases and return the results. results = [] for a, b in test_cases: results.append(sum_of_digits_of_power(a, b)) return results"},{"question":"=====Function Descriptions===== A dictionary is a collection which is unordered, changeable and indexed. In Python, dictionaries are written with curly brackets, and they have keys and values. =====Example===== >>> print dict() {} >>> print dict(one=1, two=2, three=3) {\'one\': 1, \'two\': 2, \'three\': 3} >>> print dict({\'one\': 1, \'two\': 2, \'three\': 3}) {\'one\': 1, \'two\': 2, \'three\': 3} >>> print dict([(1, 2), (3, 4)]) {1: 2, 3: 4} Basically, dictionaries are often used to store data using a key-value pair. =====Problem Statement===== James works in a data analysis firm and uses Python dictionaries extensively. Recently, his team leader asked him to merge multiple dictionaries into a single dictionary. The dictionaries may contain overlapping keys, in which case the values should be stored as a list in the merged dictionary. =====Input Format===== The first line contains the integer, N, the total number of dictionaries. The next N lines each contain a dictionary in the format \'{\\"key1\\": value1, \\"key2\\": value2, ...}\' =====Constraints===== 1 ≤ N ≤ 10 Each dictionary contains at least one key-value pair and no more than 10 key-value pairs. Each key can be considered a string (i.e. words) and values are integers between 1 and 100. =====Output Format===== Output the merged dictionary in the required format. =====Example===== =====Input===== 3 {\\"a\\": 1, \\"b\\": 2} {\\"b\\": 3, \\"c\\": 4} {\\"a\\": 5, \\"c\\": 6} =====Output===== {\'a\': [1, 5], \'b\': [2, 3], \'c\': [4, 6]}","solution":"def merge_dictionaries(dict_list): Merge multiple dictionaries into a single dictionary. For overlapping keys, store values as a list in the merged dictionary. :param dict_list: List of dictionaries to be merged :return: Merged dictionary merged_dict = {} for d in dict_list: for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], list): merged_dict[key].append(value) else: merged_dict[key] = [merged_dict[key], value] else: merged_dict[key] = value return merged_dict"},{"question":"You are given a string of words. Create a function `transformWords` (or `transform_words` depending on the language) which takes one string parameter and returns a new string where: 1. Each word in the original string is replaced by the length of the word. 2. The first word in the new string should be in lowercase, the second word in UPPERCASE, and so on alternating between (lowercase, UPPERCASE). **Function Signature:** ```python def transform_words(s: str) -> str: ``` **Input:** - `s`: a string consisting of words separated by spaces. The string will contain only alphabetic characters and spaces and will not be empty. **Output:** - a string where each word is replaced by its length and the case alternates between lowercase and uppercase. ``` Example: - transformWords(\\"hello world\\") -> \\"5 5\\" - transformWords(\\"Code Assessments Are Fun\\") -> \\"4 11 3 3\\" - transformWords(\\"I love Coding\\") -> \\"1 4 6\\" Explanation: In the string \\"hello world\\", there are two words: \\"hello\\" (length of 5) and \\"world\\" (length of 5). Since \\"hello\\" is the first word, it\'s replaced by \\"5\\" in lowercase and \\"WORLD\\" is replaced by \\"5\\" in uppercase. Therefore, the resulting string is \\"5 5\\". For \\"Code Assessments Are Fun\\", \\"Code\\" (length 4) remains \\"4\\" in lowercase, \\"Assessments\\" (length 11) becomes \\"11\\" in UPPERCASE, \\"Are\\" (length 3) becomes \\"3\\" in lowercase, and \\"Fun\\" (length 3) becomes \\"3\\" in UPPERCASE. Therefore, the final string is \\"4 11 3 3\\". ```","solution":"def transform_words(s: str) -> str: words = s.split() transformed_words = [] for i, word in enumerate(words): length_word = str(len(word)) if i % 2 == 0: transformed_words.append(length_word.lower()) else: transformed_words.append(length_word.upper()) return \' \'.join(transformed_words)"},{"question":"Given two strings, write a function to determine if one is a permutation of the other. The function should return `True` if the strings are permutations of each other, and `False` otherwise. Notes: * The comparison should be case-sensitive (i.e., \'abc\' and \'ABC\' are not permutations). * Spaces and punctuation are considered as characters (i.e., \'a b c!\' is a permutation of \' c!ab\'). Example `is_permutation(\'god\', \'dog\')` Output: ``` True ``` `is_permutation(\'Hello, World!\', \'World! Hello,\')` Output: ``` True ``` `is_permutation(\'test\', \'ttew\')` Output: ``` False ```","solution":"def is_permutation(str1, str2): Returns True if str1 is a permutation of str2, otherwise, returns False. return sorted(str1) == sorted(str2)"},{"question":"In this coding exercise, your task is to implement a function that takes an integer `n` and returns an array of all prime numbers less than `n`. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Notes: * If the function is passed a number less than or equal to 2, the function should return an empty array. * Your solution should be optimized for performance. Examples ``` primes_less_than(10) ==> [2, 3, 5, 7] primes_less_than(20) ==> [2, 3, 5, 7, 11, 13, 17, 19] primes_less_than(2) ==> [] ```","solution":"def primes_less_than(n): Returns an array of all prime numbers less than n. if n <= 2: return [] primes = [] is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers for i in range(2, n): if is_prime[i]: primes.append(i) for j in range(i * i, n, i): is_prime[j] = False return primes"},{"question":"You have been given a number N. Your task is to determine whether N is a palindrome. A number is a palindrome if it remains the same when its digits are reversed. Write a program that checks whether the given number is a palindrome or not. If it is a palindrome, print \\"YES\\", otherwise print \\"NO\\". **Input:** - The first line will contain an integer T, the number of test cases. - Each of the following T lines contains a single integer N. **Output:** For each test case, output \\"YES\\" if the number is a palindrome, otherwise output \\"NO\\". **Constraints:** - 1 leq T leq 10^5 - 1 leq N leq 10^6 **Sample Input:** 3 121 123 1221 **Sample Output:** YES NO YES","solution":"def is_palindrome(n): Checks if the number n is a palindrome. str_n = str(n) return str_n == str_n[::-1] def check_palindromes(test_cases): For each number in test_cases, check if it is a palindrome and return \'YES\' or \'NO\'. results = [] for n in test_cases: if is_palindrome(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, count the number of contiguous subarrays that sum to a given value k. Your algorithm should take a list of integers and an integer k as input and output the number of contiguous subarrays that sum to k. Note: The array will contain up to 10,000 integers. Example 1: Input: nums = [1, 1, 1], k = 2 Output: 2 Explanation: There are two subarrays [1, 1] and [1, 1] that sum to 2. Example 2: Input: nums = [-1, -1, 1], k = 0 Output: 1 Explanation: There is one subarray [-1, -1, 1] that sums to 0. Example 3: Input: nums = [4, -2, -2, 1, 3, -1, 2], k = 3 Output: 4 Explanation: There are four subarrays [4, -2, -2, 1, 3], [4, -2, -2, 1], [3], and [1, -1, 2] that sum to 3.","solution":"def count_subarrays_with_sum_k(nums, k): Counts the number of contiguous subarrays within `nums` which sum up to `k`. :param nums: List[int] - The list of integers. :param k: int - The target sum. :return: int - The count of subarrays that sum to `k`. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num if current_sum - k in prefix_sums: count += prefix_sums[current_sum - k] if current_sum not in prefix_sums: prefix_sums[current_sum] = 1 else: prefix_sums[current_sum] += 1 return count"},{"question":"You are designing a system to manage bookings for a conference room. The room can only be booked for a specific time slot if it is not already booked for a part or all of that time slot. A booking request consists of a start time and end time, and bookings are recorded in 24-hour format as integers (e.g., 9 for 9:00 AM, 13 for 1:00 PM). Your task is to write a function that takes a list of existing bookings and a new booking request, and returns whether the new booking can be accommodated without conflicts. -----Input----- The input starts with an integer T denoting the number of test cases. Each of the next 2*T lines represents a test case and contains: - An integer N (0 ≤ N ≤ 1000), the number of existing bookings. - N pairs of integers, each representing the start and end time of an existing booking. - Two integers, representing the start and end time of the new booking request. -----Output----- For each test case, output a single line \\"YES\\" if the new booking can be accommodated without conflicts, and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ T ≤ 100 - 0 ≤ start time, end time < 24 - start time < end time for all bookings -----Example----- Input: 2 3 9 11 13 15 18 21 12 13 1 10 14 12 16 Output: YES NO -----Explanation----- Example case 1: The new booking request is from 12:00 PM to 1:00 PM. The existing bookings are from 9:00 AM to 11:00 AM, 1:00 PM to 3:00 PM, and 6:00 PM to 9:00 PM. The new booking does not overlap with any of these, so the output is \\"YES\\". Example case 2: The new booking request is from 12:00 PM to 4:00 PM. The existing booking is from 10:00 AM to 2:00 PM. The new booking overlaps with the existing one, so the output is \\"NO\\".","solution":"def can_accommodate_booking(existing_bookings, new_booking): Determines if a new booking can be accommodated without conflicts. Parameters: existing_bookings (list of tuple): List of tuples where each tuple contains start and end time of an existing booking. new_booking (tuple): A tuple containing start and end time of the new booking request. Returns: str: \\"YES\\" if the new booking can be accommodated, otherwise \\"NO\\". start_new, end_new = new_booking for start_existing, end_existing in existing_bookings: if start_new < end_existing and end_new > start_existing: return \\"NO\\" return \\"YES\\" def manage_bookings(test_cases): Manages multiple test cases of booking requests. Parameters: test_cases (list): List of test cases, where each test case is a tuple with existing bookings and new booking. Returns: list: List of results for each test case. results = [] for existing_bookings, new_booking in test_cases: result = can_accommodate_booking(existing_bookings, new_booking) results.append(result) return results"},{"question":"Write a function to help a gardening club efficiently water their plants. The club has a collection of plants, each needing a specific amount of water every week to stay healthy. Gardeners have a limited total amount of water they can use each week. Your task is to determine if it\'s possible to water all the plants with the available water. Each plant requires a certain amount of water given in an array, and the available water is a single integer. Write a function `canWaterPlants` that takes in two arguments: 1. An array of integers `plantNeeds` where each integer represents the water requirement of a particular plant. 2. An integer `availableWater` representing the total water available for the week. The function should return \\"Possible\\" if the available water is enough to water all the plants according to their needs, otherwise return \\"Impossible\\". # Example ```python canWaterPlants([10, 20, 30], 60) #Output: \\"Possible\\" canWaterPlants([10, 20, 30], 50) #Output: \\"Impossible\\" ``` # Constraints - The length of `plantNeeds` will be between 1 and 1000. - Each element in `plantNeeds` will be between 1 and 100. - `availableWater` will be between 1 and 100,000. Implement the function `canWaterPlants(plantNeeds, availableWater)`.","solution":"def canWaterPlants(plantNeeds, availableWater): Determines if it\'s possible to water all the plants with the available water. Args: plantNeeds (list): List of integers where each integer represents the water requirement of a particular plant. availableWater (int): Total water available for the week. Returns: str: \\"Possible\\" if the available water is enough to water all the plants, otherwise \\"Impossible\\". totalWaterRequired = sum(plantNeeds) if totalWaterRequired <= availableWater: return \\"Possible\\" else: return \\"Impossible\\""},{"question":"Implement Queue using Stacks You are designing a class `MyQueue` which implements a queue using two stacks. Below are the requirements for your class: 1. Implement the class `MyQueue` which includes the following methods: - `__init__()`: Initializes an empty queue. - `push(x: int)`: Adds element `x` to the end of the queue. - `pop() -> int`: Removes and returns the element from the front of the queue. - `peek() -> int`: Returns the front element of the queue without removing it. - `empty() -> bool`: Returns `True` if the queue is empty, otherwise `False`. 2. You must use only standard stack operations (`push`, `pop`, `peek`, `empty`) for the internal stacks. Example: ```python # Initialize the queue queue = MyQueue() # Push elements onto the queue queue.push(1) queue.push(2) # Peek the front element print(queue.peek()) # returns 1 # Pop the front element print(queue.pop()) # returns 1 # Check if the queue is empty print(queue.empty()) # returns False ``` Requirements: - All methods must have an average time complexity of O(1). - Do not use any other data structure apart from two stacks.","solution":"class MyQueue: def __init__(self): Initialize two stacks to simulate queue operations. self.input_stack = [] self.output_stack = [] def push(self, x: int): Add element x to the end of the queue. self.input_stack.append(x) def pop(self) -> int: Removes the element from the front of the queue and returns it. self._move_input_to_output() return self.output_stack.pop() def peek(self) -> int: Returns the element at the front of the queue without removing it. self._move_input_to_output() return self.output_stack[-1] def empty(self) -> bool: Returns True if the queue is empty, otherwise False. return not self.input_stack and not self.output_stack def _move_input_to_output(self): Move elements from input stack to output stack if output stack is empty. if not self.output_stack: while self.input_stack: self.output_stack.append(self.input_stack.pop())"},{"question":"You are tasked with designing a game where players can select a subsequence of numbers from a given array such that the greatest common divisor (GCD) of the selected subsequence equals a specified value G. Help the players identify the largest possible length of such a subsequence, or determine if it\'s impossible. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and G. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer ― the maximum length of a subsequence whose GCD is equal to G, or -1 if no such subsequence exists. -----Constraints----- - 1 le T le 100 - 1 le G le 10^6 - 1 le N le 10^5 - 1 le A_i le 10^6 for each valid i - the sum of N over all test cases does not exceed 10^6 -----Example Input----- 1 5 2 2 4 6 8 10 -----Example Output----- 5 -----Explanation----- Example case 1: The GCD of the entire array [2, 4, 6, 8, 10] is 2, which matches the given value G = 2. Hence, the maximum subsequence length is 5, which includes all elements.","solution":"from math import gcd from functools import reduce def max_gcd_subsequence_length(t, test_cases): results = [] for i in range(t): n, g = test_cases[i][0] a = test_cases[i][1] # Select all numbers that are multiples of g multiples_of_g = [num for num in a if num % g == 0] if not multiples_of_g: results.append(-1) else: # Compute the GCD of the selected numbers current_gcd = reduce(gcd, multiples_of_g) if current_gcd == g: results.append(len(multiples_of_g)) else: results.append(-1) return results"},{"question":"A group of n friends decides to play a game of secret santa. Each friend will draw the name of another friend to whom they must give a gift. Each friend wants to ensure they do not draw their own name, and no two friends can draw the same name. Write a function that takes in an integer n representing the number of friends and returns the number of valid secret santa arrangements (derangements) where no one draws their own name. A derangement is a permutation where none of the objects appear in their original position. -----Input:----- - The input consists of a single integer n representing the number of friends. -----Output:----- - Output a single integer, the number of derangements of n friends with no one drawing their own name. -----Constraints:----- - 1 leq n leq 15 -----Sample Input:----- 4 -----Sample Output:----- 9 -----Explanation:----- There are 9 ways to arrange the drawing of names such that no one draws their own name when there are 4 friends. **Hint**: You may use the formula for the number of derangements D(n) where: [ D(n) = (n-1) times (D(n-1) + D(n-2)) ] with the base cases D(0) = 1 and D(1) = 0.","solution":"def count_derangements(n): Returns the number of derangements for n friends. if n == 0: return 1 elif n == 1: return 0 derangements = [0] * (n + 1) derangements[0] = 1 derangements[1] = 0 for i in range(2, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) return derangements[n]"},{"question":"Write a function that takes an array of strings and an integer `n` as input, and returns a new array containing only the strings whose lengths are greater than or equal to `n`. # Example ```python filter_long_strings([\\"apple\\", \\"bat\\", \\"car\\", \\"doghouse\\"], 4) ==> [\\"apple\\", \\"doghouse\\"] ``` # Notes - If no strings match the criteria, return an empty array. - Assume the input array contains only non-empty strings.","solution":"def filter_long_strings(strings, n): Filters the list of strings to only include strings with length greater than or equal to n. Parameters: strings (list of str): The list of strings to filter. n (int): The minimum length of string to include in the result. Returns: list of str: A new list with strings of length greater than or equal to n. return [string for string in strings if len(string) >= n]"},{"question":"Write a function isPalindrome that takes a string as input and returns a boolean indicating whether the string is a palindrome (a word, phrase, or sequence that reads the same backwards as forwards, ignoring spaces, punctuation, and capitalization). Steps to determine if a string is a palindrome: 1. Remove all non-alphanumeric characters from the string. 2. Convert the string to lowercase. 3. Check if the cleaned string is equal to its reverse. Example: ```python isPalindrome(\\"A man, a plan, a canal, Panama\\") -> True isPalindrome(\\"Hello, World!\\") -> False ```","solution":"import re def isPalindrome(s): Returns True if s is a palindrome, False otherwise. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"A Fibonacci sequence is a series of numbers in which each number ( Fibonacci number ) is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc. For a given positive integer `n`, write a function to find and return the `n`th Fibonacci number. If the input is not an integer or is less than or equal to `0`, return \\"Invalid input\\". Examples: ```python fibonacci(1) -> 1 fibonacci(2) -> 1 fibonacci(3) -> 2 fibonacci(10) -> 55 fibonacci(-1) -> \\"Invalid input\\" fibonacci(0) -> \\"Invalid input\\" fibonacci(\\"a\\") -> \\"Invalid input\\" ```","solution":"def fibonacci(n): Returns the nth Fibonacci number. If the input is not an integer or is less than or equal to 0, returns \\"Invalid input\\". if not isinstance(n, int) or n <= 0: return \\"Invalid input\\" if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Jin loves playing with numbers and experiments with different sequences. He recently came across a fascinating sequence manipulation problem. Given an integer array `A`, Jin wants to create a special \\"X-sequence\\" following these strict rules: 1. The X-sequence must be a permutation of the original array `A`. 2. Each prefix of the X-sequence, when summed, must not exceed a given threshold `T` at any point. Jin is curious about the longest possible X-sequence he can create from the array `A` that adheres to the above constraint. If there is no valid X-sequence, Jin will be disappointed. Help Jin to find out the length of the longest possible X-sequence that can be created following the rules mentioned above. # Input Format - The first line of input contains an integer `N`, which represents the size of the array. - The second line contains `N` space-separated integers representing the elements of the array `A`. - The third line contains an integer `T`, representing the threshold for the prefix sum. # Output Format - Print the length of the longest possible X-sequence that can be created according to the rules. If no valid X-sequence can be created, print `0`. # Constraints - 1 ≤ N ≤ 1000 - 1 ≤ A[i] ≤ 1000 - 1 ≤ T ≤ 100000 # Example Input ``` 6 4 2 5 3 1 6 11 ``` Output ``` 4 ``` Explanation From the array `A`: [4, 2, 5, 3, 1, 6], we can form the X-sequence [2, 3, 1, 4]: - The prefix sum of the sequence [2] is 2, which is ≤ 11. - The prefix sum of the sequence [2, 3] is 5, which is ≤ 11. - The prefix sum of the sequence [2, 3, 1] is 6, which is ≤ 11. - The prefix sum of the sequence [2, 3, 1, 4] is 10, which is ≤ 11. Therefore, the length of the longest X-sequence is 4.","solution":"def longest_x_sequence_length(N, A, T): Returns the length of the longest possible X-sequence :param N: int, the length of the array A :param A: List[int], the array of integers :param T: int, the threshold for the prefix sum :return: int, the length of the longest possible X-sequence A.sort() current_sum = 0 length = 0 for number in A: if current_sum + number <= T: current_sum += number length += 1 else: break return length"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the peaks. A peak is defined as an element that is strictly greater than its neighbours. For example: - In the list `[1, 2, 3, 1]`, the number `3` is a peak. - In the list `[1, 3, 2, 3, 4, 6, 5]`, the numbers `3` and `6` are peaks. The first and last elements of the list are considered peaks if they are greater than their only neighbour. Function signature: `def find_peaks(numbers: List[int]) -> List[int]:` Example: ``` find_peaks([1, 2, 3, 1]) should return [3] find_peaks([1, 3, 2, 3, 4, 6, 5]) should return [3, 6] find_peaks([1, 2, 1, 3, 5, 6, 4]) should return [2, 6] ```","solution":"from typing import List def find_peaks(numbers: List[int]) -> List[int]: Returns a list of peaks from the given list of integers. A peak is defined as an element that is strictly greater than its neighbours. peaks = [] n = len(numbers) if n == 0: return peaks for i in range(n): if i == 0 and n > 1 and numbers[i] > numbers[i + 1]: peaks.append(numbers[i]) elif i == n - 1 and n > 1 and numbers[i] > numbers[i - 1]: peaks.append(numbers[i]) elif 0 < i < n - 1 and numbers[i] > numbers[i - 1] and numbers[i] > numbers[i + 1]: peaks.append(numbers[i]) elif n == 1: peaks.append(numbers[i]) return peaks"},{"question":"Write a function that takes a list of integers and returns the second largest unique number in the list. If no such number exists (i.e., the list has fewer than two unique numbers), return None. Ensure the solution is efficient in terms of both time and space complexity.","solution":"def second_largest_unique(nums): Returns the second largest unique number from the list of integers. If no such number exists, return None. if not nums or len(nums) < 2: return None # Remove duplicates and sort the unique numbers in descending order unique_nums = sorted(set(nums), reverse=True) # If there are fewer than 2 unique numbers, return None if len(unique_nums) < 2: return None return unique_nums[1]"},{"question":"You are given a 2D grid of size n times n filled with non-negative integers. Your task is to find a path from the top-left corner to the bottom-right corner such that the sum of the numbers along the path is minimized. You can only move either down or right at any point in time. Create an algorithm to determine the minimum path sum from the top-left corner to the bottom-right corner of the grid. For example, given the following grid: ``` [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The path with the minimum sum is `1→3→1→1→1`, with a sum of 7. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case starts with a line containing one positive integer n (1 le n le 100) — the size of the grid (both the number of rows and columns). Then follow n lines, each containing n non-negative integers separated by spaces — the elements of the grid. -----Output----- Print t answers to the test cases. Each answer is a single integer — the minimum path sum from the top-left corner to the bottom-right corner of the grid, for each test case. -----Example----- Input 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 Output 7 3","solution":"def min_path_sum(grid): Returns the minimum path sum from the top-left corner to the bottom-right corner of the grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def solve(test_cases): results = [] for grid in test_cases: results.append(min_path_sum(grid)) return results"},{"question":"Given a list of non-negative integers representing the amount of rain that falls on each section of a 2D elevation map, compute how much water it is able to trap after raining. Each non-negative integer represents the height of a section of terrain. Complete the function to compute the amount of trapped water. You may only traverse the array once and use a constant amount of extra space. **Example:** ```python def trap(height): # Your code here # Example usage: print(trap([0,1,0,2,1,0,1,3,2,1,2,1])) # returns 6, as explained below ``` Explanation: Given `height = [0,1,0,2,1,0,1,3,2,1,2,1]`, your function should return `6` because: ``` | . *| * | . *|.|... * | . *|.|.|.|.|*| | *|.|.|.|.|.|.|*| ------------------ 0 1 0 2 1 0 1 3 2 1 2 1 ```","solution":"def trap(height): Computes the amount of trapped water given the height of each section of terrain. :param height: List of non-negative integers. :return: The amount of trapped water. if not height: return 0 n = len(height) left_max = right_max = 0 left = 0 right = n - 1 total_water = 0 while left < right: if height[left] < height[right]: if height[left] >= left_max: left_max = height[left] else: total_water += (left_max - height[left]) left += 1 else: if height[right] >= right_max: right_max = height[right] else: total_water += (right_max - height[right]) right -= 1 return total_water"},{"question":"You are given a grid representing a farm where `0` represents an empty plot and `1` represents a plot containing a tree. Trees require water, and they can only be properly irrigated if there is an adjacent irrigation system plot represented by `2`. Irrigation systems can only be placed on empty plots. Given a grid and a number `m`, return if `m` new irrigation systems can be placed such that every tree has at least one adjacent irrigation system. An irrigation system is considered adjacent if it is directly above, below, left, or right of a tree plot. Example 1: Input: grid = [ [1, 0, 0], [0, 0, 0], [0, 1, 0] ], m = 2 Output: True Example 2: Input: grid = [ [1, 0, 0], [0, 0, 0], [0, 1, 0] ], m = 1 Output: False Note: The grid size is in the range of [1, 100]. m is a non-negative integer which won\'t exceed the number of empty plots in the grid.","solution":"def can_place_irrigation_systems(grid, m): Determines if m irrigation systems can be placed in the grid such that each tree (1) has at least one adjacent irrigation system (2). rows, cols = len(grid), len(grid[0]) # Helper method to check if we can place a 2 and it would help a tree def is_valid_placement(x, y): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: return True return False empty_spots = [] for i in range(rows): for j in range(cols): if grid[i][j] == 0 and is_valid_placement(i, j): empty_spots.append((i, j)) if len(empty_spots) < m: return False irrigated = set() for i in range(rows): for j in range(cols): if grid[i][j] == 1: # It\'s a tree irrigated_adj = False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = i + dx, j + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 2: irrigated_adj = True break if not irrigated_adj: irrigated.add((i, j)) if len(irrigated) > m: return False return True"},{"question":"Max and Lucas love to explore dark caves. The cave system they\'re exploring can be represented as a grid with n rows and m columns. Initially, Max is at the top-left corner of the grid (1, 1), and Lucas is at the bottom-right corner of the grid (n, m). They each take turns to move, with Max going first. In each turn, a player can move to an adjacent cell (up, down, left, or right) if that cell is within the bounds of the grid and has not been visited by either player during the game. No cell can be visited more than once. The goal of each player is to end up in the other\'s starting cell. The first player to reach the opponent\'s starting cell wins. If a player has no valid moves, they lose. If both players play optimally, your task is to determine who will win the game. -----Input----- The first line of input contains two integers n and m (2 ≤ n, m ≤ 1000). -----Output----- Print \\"Max\\" if Max will win the game, \\"Lucas\\" if Lucas will win the game, and \\"Draw\\" if the game will end in a draw when both players are playing optimally. -----Examples----- Input 3 3 Output Max Input 2 2 Output Draw -----Note----- In the first example, Max can reach Lucas\'s starting cell (3, 3) first because there is no obstacle and both players move optimally. So Max wins. In the second example, both Max and Lucas start very close to each other. Since the movement happens optimally and simultaneously, neither can prevent the other from moving into their starting cell. Hence, the game will end in a draw.","solution":"def cave_explorers_winner(n, m): Determines the winner between Max and Lucas in a cave represented by an n x m grid. # The mathematical observation is that if one of n or m is odd, Max wins, # if both n and m are even, it is a draw. if (n % 2 == 1) or (m % 2 == 1): return \\"Max\\" else: return \\"Draw\\""},{"question":"Most hotels have automatic doors that open when they detect motion within a certain distance. Imagine you are responsible for writing the software that detects whether a person is near the door, triggering it to open. The software uses a motion sensor that provides a list of distances of objects from the door at regular intervals. Write a function that determines whether the door should remain open based on these distances. The door should be open if there are more than `N` continuous intervals where the distance is less than or equal to the threshold distance `D`. -----Input----- - The first line contains three integers, T, N, and D, where T is the total number of intervals checked, N is the number of continuous intervals needed to keep the door open, and D is the threshold distance. - The second line contains T space-separated integers representing the distances measured at each interval. -----Output----- - Output \\"Open\\" if there are more than N continuous intervals with distances less than or equal to the threshold distance D. Otherwise, output \\"Closed\\". -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ N ≤ T - 1 ≤ D ≤ 100 - 0 ≤ distance ≤ 100 -----Example----- Input: 10 3 5 1 2 3 6 7 2 1 3 4 5 Output: Open -----Explanation----- In the example, there are at least 3 continuous intervals (1 2 3) and (2 1 3 4 5) where the distances are all less than or equal to 5, so the door should be \\"Open\\".","solution":"def should_door_open(T, N, D, distances): Determines if the door should remain open based on distances measured. Parameters: T (int): Total number of intervals checked. N (int): Number of continuous intervals needed to keep the door open. D (int): Threshold distance. distances (list of int): List of distances measured at each interval. Returns: str: \\"Open\\" if there are more than N continuous intervals with distances less than or equal to D, otherwise \\"Closed\\". continuous_count = 0 for distance in distances: if distance <= D: continuous_count += 1 if continuous_count >= N: return \\"Open\\" else: continuous_count = 0 return \\"Closed\\" # Example usage: # T = 10, N = 3, D = 5 # Distances: [1, 2, 3, 6, 7, 2, 1, 3, 4, 5] # should_door_open(10, 3, 5, [1, 2, 3, 6, 7, 2, 1, 3, 4, 5]) -> \\"Open\\""},{"question":"Skye loves magical strings. A string is magical if every substring of length k contains exactly k/2 \'a\'s and k/2 \'b\'s (let\'s assume k is always even). A substring of a string is any sequence of consecutive characters. Given a string, Skye wants to convert it into a magical string by inserting some number of characters, possibly zero, into it. The inserted characters must be either \'a\' or \'b\'. Characters may be inserted anywhere (even before the first or after the last character), and she is not trying to minimize the number of inserted characters. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 50) — the number of test cases. The first line of each test case contains two integers n and k (2 le k le 100, 1 le n le 100, k is always even). The second line of each test case contains a string of length n consisting of \'a\' and \'b\' characters. -----Output----- For each test case, if it is impossible to create a magical string, print -1. Otherwise, print two lines. The first line should contain the length of the magical string m (n le m le 10^4). You don\'t need to minimize m. The second line should contain m characters — a magical string that Skye can obtain after inserting some, possibly zero, characters. You may print characters that weren\'t originally in the string. If there are multiple solutions, print any. It\'s guaranteed that if we can make the string magical, we can always make it with resulting length no more than 10^4. -----Example----- Input 3 6 4 aabbab 4 2 abab 3 2 aaa Output 6 aabbab 4 abab -1 -----Note----- In the first test case, the string is already magical: all substrings of length k=4 contain exactly 2 \'a\'s and 2 \'b\'s. In the second test case, the string is already magical: all substrings of length k=2 contain exactly 1 \'a\' and 1 \'b\'. In the third test case, it can be shown that we cannot insert characters to make the string magical.","solution":"def make_magical_string(t, test_cases): results = [] for case in test_cases: n, k, s = case count_a = count_b = 0 for char in s: if char == \'a\': count_a += 1 else: count_b += 1 if abs(count_a - count_b) > k // 2: results.append(\\"-1\\") else: substring = \\"a\\" * (k // 2) + \\"b\\" * (k // 2) results.append(f\\"{len(s)}\\") results.append(s) return results # Function to parse inputs def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] for i in range(1, 2 * t, 2): n, k = map(int, lines[i].split()) s = lines[i + 1] test_cases.append((n, k, s)) return t, test_cases # Function to format outputs def format_output(output_list): return \'n\'.join(output_list)"},{"question":"**Mission:** You are to help Detective Phoenix. The detective is working on a new case in Cipher City where criminals communicate through reversed sentences. Every message contains only lowercase letters and spaces, but unfortunately, they reverse the entire sentence to code it. Detective Phoenix needs your help to quickly decode these messages and find the clues. To accomplish this, you must create a function `decode_message` within the `CipherDecoder` class. The function should take a single parameter: - `message`: a string that contains lowercase letters and spaces. The function should return the decoded message by reversing the words back to their normal order while retaining the spaces between them. **Example Use:** ``` input: \\"sihT si a tset egassem\\" output: \\"This is a test message\\" ``` **Constraints:** - The input string will not exceed 10^4 characters. - The input string may contain multiple spaces between words which should be preserved in the output. - Input string will not be empty. Detective Phoenix relies on your coding expertise to crack the case and catch the criminals. Do not let the detective down!","solution":"class CipherDecoder: @staticmethod def decode_message(message): Decodes the given message by reversing the words back to their normal order while retaining the spaces between them. Parameters: message (str): A string that contains lowercase letters and spaces. Returns: str: The decoded message. return \' \'.join(word[::-1] for word in message.split(\' \'))"},{"question":"You are given an array of integers. Write a function that returns a new array where each element is the sum of itself and all previous elements in the array. For example: ``` [1, 2, 3, 4, 5] => [1, 3, 6, 10, 15] [4, -1, 2, 1, 6] => [4, 3, 5, 6, 12] [1, 1, 1, 1, 1] => [1, 2, 3, 4, 5] ``` Your implementation should ensure efficient running time and handle arrays of various lengths and integer ranges.","solution":"def accumulate_sums(arr): Given an array of integers, returns a new array where each element is the sum of itself and all previous elements in the array. if not arr: return [] accumulated = [arr[0]] for i in range(1, len(arr)): accumulated.append(accumulated[-1] + arr[i]) return accumulated"},{"question":"Write a function that checks if a given number is a palindrome, but with a twist. A number is said to be a \\"Reversed Palindrome\\" if it meets the following conditions: 1. When the number is reversed, the resulting number is equal to the original number multiplied by a certain integer. 2. The multiplying integer must be between 2 and 9 (inclusive). # Constraints: - The input number `n` will be a positive integer between 1 and 100,000,000. # Example: ```python is_reversed_palindrome(1089) should return True because reversing 1089 gives 9801, which is 1089 * 9 is_reversed_palindrome(21) should return True because reversing 21 gives 12, which is 21 * 0.5714 (not an integer) is_reversed_palindrome(181) should return False because reversing 181 gives 181, which is 181 * 1 (the multiplying integer is not within the specified range) is_reversed_palindrome(420) should return True because reversing 420 gives 24, which is 420 * 0.0571 (not an integer) ``` Write the function `is_reversed_palindrome(n)` that returns `True` if the number is a Reversed Palindrome; otherwise, `False`. ```python def is_reversed_palindrome(n): reversed_n = int(str(n)[::-1]) for i in range(2, 10): if reversed_n == n * i: return True return False # Test cases print(is_reversed_palindrome(1089)) # should return True print(is_reversed_palindrome(21)) # should return False print(is_reversed_palindrome(181)) # should return False print(is_reversed_palindrome(420)) # should return False ```","solution":"def is_reversed_palindrome(n): Checks if the given number is a Reversed Palindrome. Parameters: n (int): The input number to check. Returns: bool: True if the number is a Reversed Palindrome, False otherwise. reversed_n = int(str(n)[::-1]) for i in range(2, 10): if reversed_n == n * i: return True return False"},{"question":"# Task Alice is developing a new messaging application and as part of the functionality, she needs to implement a feature that finds all unique substrings of a given string and returns them in lexicographically sorted order. A substring is any sequence of characters within a string. Substrings can overlap, and we consider only unique substrings. Write a function that receives a string `s` and returns a list of all unique substrings sorted in lexicographical order. The input string `s` consists only of lowercase English letters and has a length of at most 10. Example For `s = \\"abc\\"`, the output should be: ``` [\\"a\\", \\"ab\\", \\"abc\\", \\"b\\", \\"bc\\", \\"c\\"] ``` For `s = \\"abab\\"`, the output should be: ``` [\\"a\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"b\\", \\"ba\\", \\"bab\\"] ``` For `s = \\"abcd\\"`, the output should be: ``` [\\"a\\", \\"ab\\", \\"abc\\", \\"abcd\\", \\"b\\", \\"bc\\", \\"bcd\\", \\"c\\", \\"cd\\", \\"d\\"] ``` Note: - The function should handle the creation of all unique substrings of the given string. - Ensure that the result list is sorted lexicographically. - The function should return an empty list if the input string is empty.","solution":"def unique_substrings(s): Returns a list of all unique substrings of the given string `s` sorted in lexicographical order. substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) return sorted(substrings)"},{"question":"Rania the Robot is a worldwide renowned mathematician. She is currently working on a problem involving magic sequences. A sequence of integers is called a magic sequence if it satisfies the following property: for every i (1 ≤ i ≤ n-1), the absolute difference between the i-th and (i+1)-th elements of the sequence is exactly equal to 1. Rania has a sequence of integers of length n and wants to transform it into a magic sequence. She can perform operations on this sequence in order to achieve this. In one operation, she can either increase or decrease any element of the sequence by 1. Your task is to determine the minimum number of operations needed to transform the given sequence into a magic sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n — the elements of the sequence (1 ≤ a_i ≤ 10^9). -----Output----- In the single line print the minimum number of operations needed to transform the given sequence into a magic sequence. -----Examples----- Input 4 4 3 2 1 Output 0 Input 4 1 3 6 2 Output 6 -----Note----- In the first sample test, the sequence is already a magic sequence (4 → 3 → 2 → 1), so no operations are needed. In the second sample test, you can perform the following operations: - Decrease 3 to 2 with 1 operation. - Decrease 6 to 3 with 3 operations. - Increase 2 to 4 with 2 operations. Total operations = 1 + 3 + 2 = 6.","solution":"def min_operations_to_magic_sequence(n, sequence): operations = 0 for i in range(1, n): operations += abs(sequence[i] - sequence[i-1]) - 1 return operations"},{"question":"Alex loves reading books and often buys them in bulk. He has a peculiar habit of reading each book exactly once and in a specific order. Alex would like to know how many books he has read in a given period. You are given the logs of his reading activity. Logs are represented as an array of strings where each string is either \\"BUY <bookName>\\" indicating that book <bookName> was bought or \\"READ <bookName>\\" indicating Alex has read the book <bookName>. Given these logs, determine the total number of unique books Alex has read. Note that Alex will never read a book he hasn\'t bought and will not read the same book more than once. ----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case starts with an integer N, the number of log entries. - The next N lines each contain a string describing a log entry. ----Output:----- For each test case, output a single integer representing the number of unique books read by Alex. ----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq |bookName| leq 100 ----Sample Input:----- 2 6 BUY TheHobbit READ TheHobbit BUY HarryPotter BUY GOT READ GOT READ HarryPotter 4 BUY Book1 BUY Book2 READ Book1 READ Book3 ----Sample Output:----- 3 1","solution":"def count_unique_books_read(test_cases): results = [] for test_case in test_cases: n, logs = test_case bought_books = set() read_books = set() for log in logs: action, book = log.split(maxsplit=1) if action == \\"BUY\\": bought_books.add(book) elif action == \\"READ\\" and book in bought_books: read_books.add(book) results.append(len(read_books)) return results # Parsing input (for illustrative purpose) def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) logs = input_lines[index + 1: index + 1 + N] test_cases.append((N, logs)) index += N + 1 return test_cases def formatted_output(results): for result in results: print(result) # Example usage input_string = 2 6 BUY TheHobbit READ TheHobbit BUY HarryPotter BUY GOT READ GOT READ HarryPotter 4 BUY Book1 BUY Book2 READ Book1 READ Book3 test_cases = parse_input(input_string) results = count_unique_books_read(test_cases) formatted_output(results)"},{"question":"You are given two integer sequences A_1, A_2, ldots, A_N and B_1, B_2, ldots, B_M. You need to check if there exists a subsequence of A that matches B in the same order. A subsequence of a sequence is derived by deleting zero or more elements from the sequence without changing the order of the remaining elements. Formally, determine if there exist indices 1 leq i_1 < i_2 < ... < i_M leq N such that A_{i_1} = B_1, A_{i_2} = B_2, ..., A_{i_M} = B_M. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. - The third line contains M space-separated integers B_1, B_2, ldots, B_M. -----Output----- For each test case, print \\"YES\\" if there exists a subsequence of A that matches B in order, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 100 - 1 le N, M le 10^5 - 1 le A_i, B_i le 10^9 for each valid i - the sum of N over all test cases does not exceed 10^6 - the sum of M over all test cases does not exceed 10^6 -----Example Input----- 2 5 3 1 2 3 4 5 2 4 5 5 2 1 2 3 4 5 4 6 -----Example Output----- YES NO","solution":"def is_subsequence(N, M, A, B): i, j = 0, 0 while i < N and j < M: if A[i] == B[j]: j += 1 i += 1 return j == M def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N, M, A, B = test_case if is_subsequence(N, M, A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes in a list of integers `arr` and returns a list of lists (or 2D array) where each sublist contains the start and end indices of the consecutive elements in `arr` that form a non-decreasing sequence. If there are no such consecutive elements, return an empty list. Example 1: Input: [2, 3, 5, 4, 6, 9, 8] Output: [[0, 2], [3, 5], [6, 6]] Example 2: Input: [10, 9, 8, 7] Output: [[0, 0], [1, 1], [2, 2], [3, 3]] Note: - Consecutive elements in the sequence must not decrease, i.e., `arr[i] <= arr[i+1]`. - Each sequence should be reflected as a pair of start and end indices where the sequence begins and ends within the list. - Single-element sequences should also be included as they are trivially non-decreasing.","solution":"def find_non_decreasing_sequences(arr): Takes in a list of integers `arr` and returns a list of lists where each sublist contains the start and end indices of the consecutive elements in `arr` that form a non-decreasing sequence. if not arr: return [] result = [] start = 0 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: result.append([start, i - 1]) start = i result.append([start, len(arr) - 1]) return result"},{"question":"In a distant land, there exists an ancient board game called \\"GridMaster.\\" The game is played on a N x M grid filled with various integers. The objective is to find the \\"Magic Row.\\" A \\"Magic Row\\" is defined as a row that contains the highest sum of integers among all rows. If there are multiple rows with the same highest sum, the row with the smallest index is considered the \\"Magic Row.\\" Your task is to write a program that identifies the Magic Row in the given grid and outputs the indices of the start and end columns where this maximum sum occurs within that row, as well as the sum itself. -----Input----- The first line of input contains two integers N and M, the number of rows and columns of the grid respectively (1 <= N, M <= 1000). Each of the next N lines contains M space-separated integers representing the values in the grid cells (-1000 <= grid[i][j] <= 1000). -----Output----- Your output should contain three integers: the index of the Magic Row (0-based index), the start column index of the subarray with the maximum sum (0-based index), and the sum itself. -----Example----- Input: 3 4 1 -2 3 4 -1 -2 3 4 5 6 -3 -2 Output: 2 0 11 Explanation: - Row 0 has a sum of 6 (1 + (-2) + 3 + 4). - Row 1 has a sum of 4 ((-1) + (-2) + 3 + 4). - Row 2 has a sum of 6 (but it starts from the third column and adds only the first two values, achieving a subarray [5, 6]). Therefore, the Magic Row is Row 2 with the maximum sum of 11. **Note:** If two or more subarrays within a row provide the same maximum sum, the subarray with the smallest starting index should be considered.","solution":"def find_magic_row(grid): Finds the Magic Row in the given grid, which is the row with the highest sum of integers. Returns the index of the Magic Row, the start column index of the subarray with the maximum sum, and the sum itself. def max_subarray_sum(arr): Helper function to find the maximum subarray sum using Kadane\'s Algorithm max_sum = float(\'-inf\') current_sum = 0 start = end = temp_start = 0 for index, value in enumerate(arr): if current_sum <= 0: temp_start = index current_sum = value else: current_sum += value if current_sum > max_sum: max_sum = current_sum start = temp_start end = index return max_sum, start, end N = len(grid) M = len(grid[0]) if N > 0 else 0 max_row_sum = float(\'-inf\') magic_row_index = 0 magic_start_col = 0 for i in range(N): row_sum, start_col, end_col = max_subarray_sum(grid[i]) if row_sum > max_row_sum: max_row_sum = row_sum magic_row_index = i magic_start_col = start_col elif row_sum == max_row_sum and i < magic_row_index: magic_row_index = i magic_start_col = start_col return magic_row_index, magic_start_col, max_row_sum"},{"question":"**Write a function, `factorial` that computes the factorial of a given positive integer `n`. The factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`. Ignore the condition of `n` being zero or negative; the input will always be a positive integer.**","solution":"def factorial(n): Returns the factorial of a given positive integer n. if n == 1: return 1 return n * factorial(n - 1)"},{"question":"A famous author decided to create a new series of detective novels. Each novel in the series contains exactly N chapters. The author has a strict writing style where each chapter in the novel must start with a specific letter. To decide the starting letter of each chapter, the author uses the following rule: The starting letter for the chapter i (where i is the chapter number) is the i-th letter of the alphabet in lowercase (with a being the 1st letter, b the 2nd, and so on). If i exceeds 26, the author wraps around to the start of the alphabet (i.e., the 27th letter would be \'a\' again, the 28th letter as \'b\' and so on). Given the number N of chapters in the novel, you need to determine the starting letter for each chapter. -----Input Format----- - The first line contains an integer T, the number of test cases. - Each of the following T lines contains a single integer N, the number of chapters in the novel. -----Output Format----- - For each test case, output a string of length N, where the i-th character of the string represents the starting letter of the i-th chapter of the novel. -----Constraints----- - 1 leq T leq 100000 - 1 leq N leq 100000 -----Sample Input----- 3 3 28 52 -----Sample Output----- abc abcdefghijklmnopqrstuvwxyza abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz -----Explanation----- In the first test case, the novel has 3 chapters, so the starting letters are \'a\', \'b\', and \'c\'. In the second test case, the novel has 28 chapters, and after \'z\' (the 26th letter), it wraps around to \'a\' again. In the third test case, the novel has 52 chapters, and after the first full cycle from \'a\' to \'z\', it starts again from \'a\' to \'z\'.","solution":"def starting_letters_of_chapters(N): Returns a string where each character represents the starting letter of each chapter, given the number of chapters N. alphabet = \'abcdefghijklmnopqrstuvwxyz\' result = [] for i in range(N): result.append(alphabet[i % 26]) return \'\'.join(result)"},{"question":"A renowned biologist is studying a species of rapidly multiplying bacteria. She notices that every hour, each bacterium doubles in count. She starts with a single bacterium. Your task is to calculate the total number of bacteria present after a given number of hours. Write a function `bacteria_count(hours)` that takes in an integer `hours` and returns the count of bacteria after that many hours. -----Input----- A non-negative integer representing the number of hours, in the range 0 to 20. -----Output----- An integer representing the total number of bacteria. -----Example----- Input: 5 Output: 32 Explanation: Starting with 1 bacterium, after 5 hours the count is: 1 * 2^5 = 32.","solution":"def bacteria_count(hours): Returns the count of bacteria after the given number of hours. Parameters: hours (int): The number of hours the bacteria have been multiplying. Returns: int: The total number of bacteria present after the given number of hours. return 2 ** hours"},{"question":"You\'re participating in a competitive Sudoku tournament. In this tournament, you are given a series of Sudoku puzzles and need to determine whether each provided Sudoku grid is a valid complete Sudoku solution. A valid Sudoku solution must satisfy the following rules: 1. Each of the digits 1-9 must occur exactly once in each row. 2. Each of the digits 1-9 must occur exactly once in each column. 3. Each of the digits 1-9 must occur exactly once in each of the nine 3x3 sub-grids of the 9x9 grid. Your task is to write a function that takes a 9x9 2D list representing a completed Sudoku grid and returns `True` if it is valid, and `False` otherwise. For example, given the following grid: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ``` Your function should return `True`. Function signature: ```python def is_valid_sudoku(grid: List[List[int]]) -> bool: pass ``` Constraints: - The input `grid` is guaranteed to be a 9x9 grid. - Each element of `grid` is an integer in the range from 1 to 9. - You are provided with at most 10 grids to validate in a single run. Additional examples: Example 1: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ``` Output: `True` Example 2: ``` [ [8, 3, 5, 4, 1, 6, 9, 2, 7], [2, 9, 6, 8, 5, 7, 4, 3, 1], [4, 1, 7, 2, 9, 3, 6, 5, 8], [5, 6, 9, 1, 3, 4, 7, 8, 2], [1, 2, 3, 6, 7, 8, 5, 4, 9], [7, 4, 8, 5, 2, 9, 1, 6, 3], [6, 5, 2, 7, 8, 1, 3, 9, 4], [9, 8, 1, 3, 4, 5, 2, 7, 6], [3, 7, 4, 9, 6, 2, 8, 1, 5] ] ``` Output: `False`","solution":"from typing import List def is_valid_sudoku(grid: List[List[int]]) -> bool: def is_valid_set(elements) -> bool: return len(elements) == 9 and len(set(elements)) == 9 # Check rows for row in grid: if not is_valid_set(row): return False # Check columns for col in range(9): if not is_valid_set([grid[row][col] for row in range(9)]): return False # Check 3x3 sub-grids for box_row in range(3): for box_col in range(3): subgrid = [] for row in range(box_row * 3, box_row * 3 + 3): for col in range(box_col * 3, box_col * 3 + 3): subgrid.append(grid[row][col]) if not is_valid_set(subgrid): return False return True"},{"question":"Write a function that takes a list of integers and returns a new list with each element incremented by its position in the original list. For example: * Given the input list `[10, 20, 30]`, the function should return `[10, 21, 32]`. * For the input list `[0, -1, -2]`, the function should return `[0, 0, 0]`. The position in the list is 0-based, so the first element is incremented by 0, the second by 1, and so on. The function should be able to handle empty lists and any integer values, both positive and negative.","solution":"def increment_by_position(lst): Takes a list of integers and returns a new list with each element incremented by its position. Parameters: lst (list): A list of integers Returns: list: a new list where each element is incremented by its position in the list return [elem + idx for idx, elem in enumerate(lst)]"},{"question":"You are given a rectangular grid of size MxN (M rows and N columns). Each cell of the grid contains a certain number of balls. You start at the top-left corner of the grid (cell (1, 1)). Your goal is to reach the bottom-right corner of the grid (cell (M, N)) by moving only to the right or down, collecting balls along the way. You want to determine the maximum number of balls you can collect on this path from the top-left corner to the bottom-right corner. -----Input format----- The first line contains two space-separated integers M and N, which represent the number of rows and columns of the grid, respectively. Each of the next M lines contains N space-separated integers representing the number of balls in each cell of the grid. -----Output format----- Print a single integer representing the maximum number of balls that can be collected from the top-left corner to the bottom-right corner. -----Constraints----- 1 ≤ M, N ≤ 1000 1 ≤ number of balls in each cell ≤ 1000 -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 -----Explanation----- The path that collects the maximum number of balls is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3), which collects 1 + 2 + 3 + 6 + 9 = 21 balls. Another optimal path is (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3), which collects 1 + 4 + 7 + 8 + 9 = 29 balls.","solution":"def max_balls_collected(M, N, grid): dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1]"},{"question":"Write a function that takes a list of dictionaries that each represent information about an employee, and determines the number of employees who share the same department. Each dictionary contains the keys \'name\' (a string) and \'department\' (a string). The function should return a dictionary where the keys are department names and the values are the count of employees in those departments. For example: ```python employees = [ {\'name\': \'Alice\', \'department\': \'HR\'}, {\'name\': \'Bob\', \'department\': \'Engineering\'}, {\'name\': \'Charlie\', \'department\': \'HR\'}, {\'name\': \'David\', \'department\': \'Engineering\'}, {\'name\': \'Eve\', \'department\': \'Marketing\'} ] department_counts(employees) ``` The above should return: ```python { \'HR\': 2, \'Engineering\': 2, \'Marketing\': 1 } ``` Additional examples: ```python employees = [ {\'name\': \'Alice\', \'department\': \'Sales\'}, {\'name\': \'Carlos\', \'department\': \'Sales\'}, {\'name\': \'Dana\', \'department\': \'HR\'}, {\'name\': \'Eve\', \'department\': \'Sales\'}, {\'name\': \'Bob\', \'department\': \'Engineering\'}, {\'name\': \'David\', \'department\': \'Engineering\'} ] department_counts(employees) >>> {\'Sales\': 3, \'HR\': 1, \'Engineering\': 2} ```","solution":"def department_counts(employees): Returns a dictionary with the count of employees in each department. department_count = {} for employee in employees: department = employee[\'department\'] if department in department_count: department_count[department] += 1 else: department_count[department] = 1 return department_count"},{"question":"Task: You are tasked with creating a class that manages an inventory of items for a store. The class should allow adding items, retrieving the quantity of a specific item, and removing items. Additionally, it should be able to provide a list of all items sorted by their name in alphabetical order. Testing: Python: ```python >>> inventory = Inventory() >>> inventory.add_item(\'apple\', 50) >>> inventory.add_item(\'banana\', 30) >>> inventory.add_item(\'orange\', 40) >>> inventory.get_quantity(\'banana\') 30 >>> inventory.remove_item(\'apple\', 20) >>> inventory.get_quantity(\'apple\') 30 >>> inventory.get_all_items() [\'apple\', \'banana\', \'orange\'] ``` Instructions: 1. Implement the class `Inventory` with the necessary methods to meet the requirements above. 2. Use a suitable data structure to ensure efficient operations and sorting capabilities. 3. Ensure the class handles edge cases, such as attempting to remove or get the quantity of an item that does not exist.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_name, quantity): if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def get_quantity(self, item_name): # Return the quantity of the item or 0 if the item does not exist return self.items.get(item_name, 0) def remove_item(self, item_name, quantity): if item_name in self.items: if self.items[item_name] > quantity: self.items[item_name] -= quantity elif self.items[item_name] == quantity: del self.items[item_name] else: raise ValueError(\\"Not enough quantity to remove\\") else: raise KeyError(\\"Item does not exist\\") def get_all_items(self): # Return the list of items sorted by their name in alphabetical order return sorted(self.items.keys())"},{"question":"You are given a list of words, and your task is to write a function that finds the longest word in the list and returns it. If there are multiple words with the same maximum length, the function should return the word that comes first in the list. Additionally, the function should return the length of that word in the form of a tuple. The function signature should be: ```python def find_longest_word(words: List[str]) -> Tuple[str, int]: ``` **Example:** ```python find_longest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]) # Output: (\\"banana\\", 6) find_longest_word([\\"this\\", \\"is\\", \\"a\\", \\"test\\"]) # Output: (\\"this\\", 4) find_longest_word([\\"longword\\", \\"short\\", \\"longwordagain\\"]) # Output: (\\"longword\\", 8) # \\"longword\\" appears first with max length 8 ``` **Notes:** 1. You may assume that the list contains at least one word. 2. Both the word and its length should be returned as a tuple.","solution":"from typing import List, Tuple def find_longest_word(words: List[str]) -> Tuple[str, int]: Finds the longest word in the list and returns it along with its length. If there are multiple words with the same maximum length, the function returns the word that comes first in the list. if not words: return \\"\\", 0 longest_word = words[0] max_length = len(longest_word) for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word, max_length"},{"question":"You are given an array a consisting of n integers numbered from 1 to n. Define the \\"sum distance\\" of an element x in the array a as the sum of absolute differences between x and all other elements in the array. Formally, the \\"sum distance\\" of an element x is defined as: S(x) = sum_{i=1}^{n} |x - a_i| Your task is to find an integer k from 1 to n such that the \\"sum distance\\" of a_k is minimized. If there are multiple such integers k, choose the smallest one. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 3 cdot 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 3 cdot 10^5. -----Output----- For each test case, output one integer — the smallest index k (1 le k le n) such that the \\"sum distance\\" of a_k is minimized. -----Example----- Input 2 3 1 2 3 4 5 3 1 2 Output 2 4","solution":"def find_min_sum_distance_index(t, test_cases): results = [] for case in test_cases: n, arr = case arr_sorted = sorted(arr) median_index = (n - 1) // 2 median_value = arr_sorted[median_index] for i in range(n): if arr[i] == median_value: results.append(i + 1) break return results"},{"question":"Write a function `schedule_meeting(start, duration)` that takes two arguments: a 24-hour start time formatted as a string (\\"HH:MM\\") and a meeting duration in minutes as an integer. Your function should return `True` or `False` based on the following criteria: * The meeting should be scheduled only within the regular work hours of 09:00 to 18:00. * A meeting that finishes exactly at 18:00 is acceptable, but one that starts at 18:00 and goes over is not. * Meetings should not be scheduled before 09:00. Your function should validate this logic and return the appropriate boolean value indicating whether the meeting can be scheduled. For example, `schedule_meeting(\\"17:00\\", 60)` should return `True`. As an additional challenge, consider solving this kata using time calculations to determine if the meeting fits within the acceptable hours.","solution":"def schedule_meeting(start, duration): Determines if a meeting can be scheduled within work hours (09:00 to 18:00) Args: start (str): Start time in HH:MM format duration (int): Duration of the meeting in minutes Returns: bool: True if the meeting can be scheduled, False otherwise start_hour, start_minute = map(int, start.split(\\":\\")) if start_hour < 9 or (start_hour == 18 and start_minute > 0): return False total_start_minutes = start_hour * 60 + start_minute total_end_minutes = total_start_minutes + duration if total_end_minutes > 18 * 60: return False start_work_minutes = 9 * 60 end_work_minutes = 18 * 60 return start_work_minutes <= total_start_minutes < end_work_minutes and total_start_minutes < total_end_minutes <= end_work_minutes"},{"question":"> Emma is organizing the employee database of her company by categorizing employees based on their projects. Each project has a unique ID, and each employee can be associated with multiple projects. The data is represented by a dictionary where each key is a project ID and the value is a list of employee IDs working on that project. Write a function `commonEmployees(projects: Dict[int, List[int]], proj1: int, proj2: int) -> List[int]` that takes the dictionary `projects`, and two project IDs `proj1` and `proj2`, and returns a list of employee IDs that are common to both projects. The returned list should be sorted in ascending order. For example: ```python projects = { 101: [1, 2, 3, 4], 102: [3, 4, 5], 103: [5, 6, 7] } commonEmployees(projects, 101, 102) # Returns: [3, 4] commonEmployees(projects, 102, 103) # Returns: [5] ``` # Notes: - If either of the project IDs does not exist in the dictionary, return an empty list. - If no employees are common to both projects, return an empty list.","solution":"from typing import Dict, List def commonEmployees(projects: Dict[int, List[int]], proj1: int, proj2: int) -> List[int]: Returns a list of employee IDs that are common to both projects proj1 and proj2. The returned list is sorted in ascending order. Args: projects: Dictionary where keys are project IDs and values are lists of employee IDs. proj1: The first project ID. proj2: The second project ID. Returns: A list of common employee IDs sorted in ascending order. If no common employees, returns an empty list. if proj1 not in projects or proj2 not in projects: return [] employees_proj1 = set(projects.get(proj1, [])) employees_proj2 = set(projects.get(proj2, [])) common_employees = sorted(list(employees_proj1 & employees_proj2)) return common_employees"},{"question":"You are the coordinator of a car racing event. Each race track has multiple lanes, and each lane has a series of checkpoints. The results for each lane are recorded as a list of integers, where each integer represents the time (in seconds) to pass each checkpoint for that lane. The race is concluded only after all lanes have passed an equal number of checkpoints. Your task is to determine the winner of the race. The winner is the lane that has the least total time across all its checkpoints. If two or more lanes have the same total time, the winner is the lane that appeared first in the input list. Write a function `race_winner(lanes: List[List[int]]) -> int` that takes a list of lists, where each list contains the times for each lane. The function should return the 1-based index of the winning lane. Example: ```python race_winner([[5, 3, 6], [4, 8, 2], [7, 1, 3]]) ``` Output: ``` 2 ``` Explanation: - Lane 1 total time: 5 + 3 + 6 = 14 - Lane 2 total time: 4 + 8 + 2 = 14 - Lane 3 total time: 7 + 1 + 3 = 11 Lane 3 has the least total time, so the output is `3`. Constraints: - All lanes will have at least one checkpoint. - All lanes will have the same number of checkpoints. - There will be at least two lanes, and no more than 100 lanes. - Each checkpoint time will be a non-negative integer, not greater than 1000.","solution":"from typing import List def race_winner(lanes: List[List[int]]) -> int: Returns the 1-based index of the winning lane with the least total time. min_time = float(\'inf\') winning_lane = -1 for i, lane in enumerate(lanes): total_time = sum(lane) if total_time < min_time: min_time = total_time winning_lane = i + 1 return winning_lane"},{"question":"A hypothetical role-playing game uses a system of experience points (XP) to determine a player\'s level. Your task is to write a function that calculates a player\'s level based on their total experience points. The levels are defined as follows: - Level 1: 0-999 XP - Level 2: 1000-2999 XP - Level 3: 3000-5999 XP - Level 4: 6000-9999 XP - Level 5: 10000-14999 XP - Level 6: 15000-20999 XP - Level 7: 21000-27999 XP - Level 8: 28000-35999 XP - Level 9: 36000-44999 XP - Level 10: 45000+ XP Create a function `calculate_level(xp)` that takes an integer `xp` as input (which represents the player\'s accumulated experience points) and returns the player\'s level as an integer. ```python calculate_level(500) == 1 calculate_level(1500) == 2 calculate_level(3200) == 3 calculate_level(10000) == 5 calculate_level(45000) == 10 ``` Note: Players cannot have negative experience points, but you can assume sensible (non-negative integer) inputs.","solution":"def calculate_level(xp): Calculates the player\'s level based on their experience points. Parameters: xp (int): The player\'s accumulated experience points. Returns: int: The player\'s level. if xp < 0: raise ValueError(\\"XP cannot be negative.\\") if xp < 1000: return 1 elif xp < 3000: return 2 elif xp < 6000: return 3 elif xp < 10000: return 4 elif xp < 15000: return 5 elif xp < 21000: return 6 elif xp < 28000: return 7 elif xp < 36000: return 8 elif xp < 45000: return 9 else: return 10"},{"question":"Task ======= Write a function that takes a non-negative integer and returns the string representation of that integer, but with a twist: for multiples of three, the function should return \\"Fizz\\" instead of the integer, and for multiples of five, it should return \\"Buzz\\". For integers which are multiples of both three and five, it should return \\"FizzBuzz\\". Detail the requirements for your function as follows: **Function Signature:** `def fizz_buzz(n: int) -> str:` Parameters ========== * n: an integer, the number to be converted to its string representation with the FizzBuzz twist. Output ====== * a string, which is either the integer as a string or one of the words \\"Fizz\\", \\"Buzz\\", or \\"FizzBuzz\\" based on the conditions above. Examples ======== ```python assert fizz_buzz(3) == \\"Fizz\\" assert fizz_buzz(5) == \\"Buzz\\" assert fizz_buzz(15) == \\"FizzBuzz\\" assert fizz_buzz(4) == \\"4\\" ```","solution":"def fizz_buzz(n: int) -> str: Returns the string representation of a non-negative integer n with a twist: - Returns \\"Fizz\\" for multiples of 3 - Returns \\"Buzz\\" for multiples of 5 - Returns \\"FizzBuzz\\" for multiples of both 3 and 5 - Otherwise, returns the integer as a string if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return str(n)"},{"question":"# Task Given a list of integers, rearrange the list in such a way that each number appears to the right of all previous occurrences of the same number. The relative order of the first occurrences should be maintained. # Example For `items = [4, 1, 2, 1, 2, 3, 4]`, the output should be `[4, 1, 2, 3, 4, 1, 2]`. # Input/Output - `[input]` integer array `arr` Non-empty array of integers. Constraints: `3 ≤ arr.length ≤ 1000, -1000 ≤ arr[i] ≤ 1000.` - `[output]` an integer array An array rearranged as described above.","solution":"def rearrange_list(arr): Rearranges a list of integers such that each number appears to the right of all previous occurrences of the same number, maintaining the relative order of the first occurrences. first_occurrences = [] remaining_occurrences = [] seen = set() for num in arr: if num not in seen: first_occurrences.append(num) seen.add(num) else: remaining_occurrences.append(num) return first_occurrences + remaining_occurrences"},{"question":"Write a function `find_missing_letter` that takes in an array of consecutive (increasing) letters as input, with one letter missing, and returns the missing letter. You will always get an array that contains consecutive letters in increasing order with exactly one letter missing. The length of the array will always be at least 2. For example: ```python find_missing_letter([\'a\',\'b\',\'c\',\'d\',\'f\']) => \'e\' # because \\"e\\" is missing find_missing_letter([\'O\',\'Q\',\'R\',\'S\']) => \'P\' # because \\"P\\" is missing ``` ```python find_missing_letter([\'a\', \'b\', \'c\', \'d\', \'f\']) # returns \'e\', because \'e\' is missing find_missing_letter([\'O\', \'Q\', \'R\', \'S\']) # returns \'P\', because \'P\' is missing ```","solution":"def find_missing_letter(chars): This function takes a list of consecutive (increasing) letters with one letter missing and returns the missing letter. :param chars: List of consecutive characters with one missing :type chars: list of str :return: The missing character :rtype: str for i in range(len(chars) - 1): if ord(chars[i+1]) - ord(chars[i]) > 1: return chr(ord(chars[i]) + 1)"},{"question":"Write a function that takes an array of integers as input and returns the index of the element with the smallest value. If there are multiple elements with the same smallest value, return the index of the first occurrence. Example: Input: arr = [4, 2, 1, 5, 1] Output: 2 Explanation: The smallest value in the array is 1, which occurs first at index 2.","solution":"def index_of_smallest(arr): Returns the index of the element with the smallest value. If there are multiple elements with the same smallest value, returns the index of the first occurrence. if not arr: raise ValueError(\\"Array is empty\\") min_value = arr[0] min_index = 0 for i in range(1, len(arr)): if arr[i] < min_value: min_value = arr[i] min_index = i return min_index"},{"question":"Write a function that takes two integers representing the range `[start, end]` and returns a list of all the prime numbers within it. The function should be optimized for performance, rather than using a naive approach. Also, ensure the solution handles edge cases such as negative ranges, or a range that includes 0 or 1 effectively. # Example `find_primes(10, 30)` -> [11, 13, 17, 19, 23, 29] `find_primes(0, 10)` -> [2, 3, 5, 7] `find_primes(-10, 10)` -> [2, 3, 5, 7] Hint A naive approach would involve checking each number within the range by dividing it with all numbers smaller than itself to check if it is prime. However, this can be optimized using methods such as the Sieve of Eratosthenes or other mathematical tricks to reduce computational complexity.","solution":"def find_primes(start, end): Returns a list of all prime numbers within the range [start, end]. if end < start: return [] def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Given a positive integer `n`, write a function `prime_factors` that returns a list of all prime factors of `n`. The prime factors should be in ascending order. Each prime factor should appear in the list as many times as it divides `n`. For example, if `n` is divisible by a prime number `p` three times, then `p` should appear three times in the list. You may define a helper function `is_prime` that checks if a number is prime. Note: - A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. - The provided number `n` will always be greater than 1. Example: ```python prime_factors(28) # Output: [2, 2, 7] prime_factors(315) # Output: [3, 3, 5, 7] ```","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def prime_factors(n): Returns a list of all prime factors of the given integer n in ascending order. Each prime factor appears in the list as many times as it divides n. factors = [] # Check for number of 2s in n while n % 2 == 0: factors.append(2) n //= 2 # Check for odd factors from 3 to sqrt(n) for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i if n > 2: factors.append(n) return factors"},{"question":"You are given a 2D grid of size N x N filled with integers. Your task is to find the maximum sum of values starting from the top-left corner (0,0) and moving to the bottom-right corner (N-1,N-1). From each cell, you can only move either right or down to the next cell. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case: - The first line contains an integer N denoting the size of the grid. - The next N lines each contain N integers, describing the grid. -----Output----- For each test case, output a single integer — the maximum sum of values from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - -1000 ≤ grid[i][j] ≤ 1000 -----Example----- Input: 2 3 1 2 3 4 5 6 7 8 9 2 -1 -2 3 4 Output: 29 6 -----Explanation----- Test case 1. The grid is: 1 2 3 4 5 6 7 8 9 The maximum sum path is 1 -> 2 -> 3 -> 6 -> 9 which sums up to 29. Test case 2. The grid is: -1 -2 3 4 The maximum sum path is -1 -> 3 -> 4 which sums up to 6.","solution":"def max_path_sum(grid, N): Function to calculate the maximum path sum from top-left to bottom-right of a 2D grid. # Create a memoization table to store results of subproblems dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1] def process_test_cases(test_cases): results = [] for case in test_cases: N, grid = case[\'N\'], case[\'grid\'] result = max_path_sum(grid, N) results.append(result) return results"},{"question":"Rita loves playing with strings and she has recently learned about palindromes. A palindrome is a string that reads the same backward as forward. Inspired by this concept, she thought about a twist: the Maximum Palindrome Substring (MPS). She defines MPS as the longest substring of a given string that is a palindrome and occurs more than once. Your task is to help Rita by writing a program that finds the length of the MPS in a given string. If there is no such palindrome, return -1. -----Input----- - The input consists of a single string S of lowercase English letters. -----Output----- - Print the length of the MPS in the given string S. If no such palindrome exists, print -1. -----Constraints----- - 1 ≤ |S| ≤ 5000 -----Example----- Input: ababa Output: 3 Input: abcde Output: -1 Note: For the first example, the longest palindromic substrings \\"aba\\" and \\"bab\\" occur more than once, hence the longest length is 3. In the second example, there are no palindromic substrings that occur more than once.","solution":"def mps_length(s): Finds the length of the Maximum Palindrome Substring (MPS) in the given string s. If no such palindrome exists, returns -1. n = len(s) if n <= 1: return -1 # Helper function to check if a string is a palindrome def is_palindrome(sub): return sub == sub[::-1] found = False max_length = 0 seen = {} for length in range(1, n): for start in range(n - length + 1): substr = s[start:start + length] if is_palindrome(substr): if substr in seen and seen[substr] != start: max_length = max(max_length, len(substr)) found = True seen[substr] = start return max_length if found else -1"},{"question":"A company is setting up a new server system to handle its file storage, and they\'ve been given a list of files with specific sizes. The server has a fixed storage capacity and can only save files up to this capacity. The task is to determine the maximum number of files that can be stored without exceeding the server\'s capacity. The files can be saved in any order, but once stored, their size contributes to the server\'s total usage. Each test case will provide you with the file sizes and the server\'s capacity, and you must compute the maximum number of files that can be stored. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. - The first line of each test case contains two space-separated integers N and C, where N denotes the number of files and C denotes the server\'s storage capacity. - The second line of each test case contains N space-separated integers representing the sizes of the files. -----Output----- For each of the T test cases, output a single line: - The maximum number of files that can be stored without exceeding the server\'s capacity. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ C ≤ 10^9 - 1 ≤ file size ≤ 10^6 -----Example----- Input: 2 4 10 2 3 5 8 3 5 4 2 3 Output: 3 2 -----Explanation----- In the first test case, we can store files with sizes 2, 3, and 5 in the server which sums up to 10. Hence, 3 files can be stored. In the second test case, we can store files with sizes 2 and 3 in the server which sums up to 5. Hence, 2 files can be stored.","solution":"def max_files_stored(T, test_cases): results = [] for case in test_cases: N, C, file_sizes = case file_sizes.sort() current_sum, count = 0, 0 for size in file_sizes: if current_sum + size <= C: current_sum += size count += 1 else: break results.append(count) return results"},{"question":"# Task A palindrome is a string that reads the same forward and backward, while an almost palindrome is a string that would be a palindrome if at most one character were deleted. Given a string, determine whether it is almost palindrome. # Example For `input = \\"radkar\\"`, the output should be `true`. You can remove the character \'d\' to make \\"radkar\\" a palindrome. For `input = \\"racecar\\"`, the output should be `true`. The input itself is already a palindrome. For `input = \\"hello\\"`, the output should be `false`. Removing any single character does not make \\"hello\\" a palindrome. # Input/Output - `[input]` string `input` A non-empty string containing lowercase English letters. Its length will not exceed 1000 characters. - `[output]` a boolean value","solution":"def is_palindrome(s): Helper function to check if a string is a palindrome. return s == s[::-1] def is_almost_palindrome(input_string): Returns True if the input string is an almost palindrome, False otherwise. if is_palindrome(input_string): return True length = len(input_string) for i in range(length): # Create a new string with the ith character removed temp_string = input_string[:i] + input_string[i+1:] if is_palindrome(temp_string): return True return False"},{"question":"You run a small restaurant and want to analyze your daily sales performance. Your goal is to determine the maximum profit you can achieve in a day. Given an array of integers where each integer represents the profit of a specific hour in the day (can be positive or negative), write a program to find the maximum sum of a contiguous subarray, which represents the highest profit that can be achieved in a continuous period of hours. Note: The array size can vary, and it contains at least one element. Example: ``` Input: [4, -1, 2, 1, -5, 4] Output: 6 Explanation: The maximum sum of a contiguous subarray is [4, -1, 2, 1], which sums up to 6. ``` If all the numbers in the input array are negative, the maximum profit should be the largest (least negative) single element in the array. [parenthesis can be omitted for mathematical accuracy]","solution":"def max_profit_in_a_day(profits): This function returns the maximum sum of a contiguous subarray representing the highest profit that can be achieved in a continuous period of hours. It implements Kadane\'s algorithm. current_max = total_max = profits[0] for profit in profits[1:]: current_max = max(profit, current_max + profit) total_max = max(total_max, current_max) return total_max"},{"question":"In this task, you need to create a function that finds the common elements among multiple lists of integers. You will be given a list of lists, where each sublist contains integers. The function should return a list of integers that are present in every sublist. If no such elements exist, return an empty list. The order of elements in the output list does not matter. Example: ```python def common_elements(list_of_lists): # Your implementation here test_lists_1 = [ [1, 2, 3, 4], [3, 4, 5, 6], [4, 3, 6, 7] ] print(common_elements(test_lists_1)) # Output: [3, 4] test_lists_2 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(common_elements(test_lists_2)) # Output: [] test_lists_3 = [ [1, 2, 3], [1, 2, 3], [1, 2, 3] ] print(common_elements(test_lists_3)) # Output: [1, 2, 3] ``` Good luck!","solution":"def common_elements(list_of_lists): Finds the common elements among multiple lists of integers. Parameters: list_of_lists (list of list of int): A list of lists of integers. Returns: list of int: A list of integers that are present in every sublist. if not list_of_lists: return [] common_set = set(list_of_lists[0]) for lst in list_of_lists[1:]: common_set.intersection_update(lst) return list(common_set)"},{"question":"Write a function that accepts a list of dictionaries, each containing the keys \'name\' (a string) and \'grades\' (a list of integers). The function should return a new dictionary where each key is a student\'s name and the value is the average of their grades (rounded to the nearest integer). Examples ```python [{\'name\': \'Alice\', \'grades\': [90, 80, 85]}, {\'name\': \'Bob\', \'grades\': [70, 75, 85]}] --> {\'Alice\': 85, \'Bob\': 77} [{\'name\': \'Charlie\', \'grades\': [100, 100, 100]}] --> {\'Charlie\': 100} [{\'name\': \'Diana\', \'grades\': [50, 60, 70]}, {\'name\': \'Evan\', \'grades\': [60, 60, 60]}, {\'name\': \'Frank\', \'grades\': [90, 80, 85]}] --> {\'Diana\': 60, \'Evan\': 60, \'Frank\': 85} ```","solution":"from typing import List, Dict def calculate_averages(students: List[Dict[str, List[int]]]) -> Dict[str, int]: Returns a dictionary with student names as keys and their average grades (rounded to the nearest integer) as values. averages = {} for student in students: name = student[\'name\'] grades = student[\'grades\'] average = round(sum(grades) / len(grades)) averages[name] = average return averages"},{"question":"A city council wants to illuminate a long stretch of road with minimal lamp posts while ensuring that every meter of the road is lit. Each lamp post has a specific lighting range and can illuminate a section extending from its position to a certain number of meters on either side. -----Input----- The first line contains a single integer N, denoting the length of the road in meters. The second line contains a single integer M, denoting the number of types of lamp posts available. The third line contains M space-separated integers where the i-th integer Ri represents the range of the i-th type of lamp post. -----Output----- A single integer representing the minimum number of lamp posts required to fully illuminate the road. -----Constraints----- 1 <= N <= 500 1 <= M <= 10 1 <= Ri <= N -----Example----- Input: 10 3 1 3 4 Output: 3 -----Explanation----- With a road length of 10 meters, the minimal number of lamp posts required to light the entire road is 3. Using three lamp posts of range 4, we can cover the entire length as follows: - Place the first lamp post at meter 1 (covers meters 1 to 5). - Place the second lamp post at meter 6 (covers meters 2 to 10, overlapping slightly with the next). - Place the third lamp post at meter 11 (extends coverage to beyond meter 10, thus fully illuminated).","solution":"def min_lamp_posts(N, M, ranges): Determine the minimum number of lamp posts required to fully illuminate a road of length N. Args: N (int): The length of the road. M (int): The number of types of lamp posts available. ranges (list of int): The list of ranges for each type of lamp post. Returns: int: The minimum number of lamp posts required to fully illuminate the road. # Sort the ranges in descending order ranges.sort(reverse=True) # The maximum range to consider max_range = ranges[0] # Calculate the minimum number of lamp posts needed num_lamps = (N + max_range - 1) // max_range return num_lamps"},{"question":"Given an array of N integers, the goal is to perform a series of operations to make all elements in the array equal. In one operation, you can increment or decrement any element of the array by 1. Determine the minimum number of operations required to make all array elements equal. -----INPUT FORMAT----- - First line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer N, the size of the array followed by N space-separated integers representing the array elements. -----OUTPUT FORMAT----- - For each test case, print a single integer representing the minimum number of operations required to make all elements in the array equal. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ Ai ≤ 10^5 (i.e., each array element is between 1 and 100000) -----Sample Input----- 2 5 1 2 3 4 5 3 10 10 10 -----Sample Output----- 6 0 -----Explanation----- In the first test case, we can make all the elements equal to 3 (the median of the array) with 6 operations: 1 -> 3 (+2) 2 -> 3 (+1) 3 -> 3 (0) 4 -> 3 (-1) 5 -> 3 (-2) Total operations = 2 + 1 + 0 + (-1) + (-2) = 6 In the second test case, all elements are already equal, so the number of operations is 0.","solution":"def minimum_operations_to_equalize(T, test_cases): results = [] for case in test_cases: N = case[0] arr = case[1:] arr.sort() median = arr[N // 2] operations = sum(abs(x - median) for x in arr) results.append(operations) return results"},{"question":"# Task You are given a list of non-negative integers representing the heights of buildings. Your task is to calculate the total amount of rainwater that can be trapped between these buildings after it rains. Implement a function that computes the trapped rainwater using a two-pointer approach. # Example For `heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, the output should be `6`. Here\'s how the answer is obtained: - Between buildings at index 1 and index 3, we can trap 1 unit of water. - Between buildings at index 4 and index 7, we can trap 6 units of water. - Between buildings at index 8 and index 10, we can trap 1 unit of water. # Algorithm 1. Initialize two pointers, `left` and `right`, pointing to the beginning and end of the array, respectively. 2. Initialize variables to keep track of the maximum height encountered from the left (`left_max`) and from the right (`right_max`). 3. Traverse the array by comparing the heights at the left and right pointers: - If the height at the left pointer is less than or equal to the height at the right pointer: - If the height at the left pointer is greater than or equal to `left_max`, update `left_max`. - Else, add the difference between `left_max` and the height at the left pointer to the total water trapped. - Move the left pointer one step to the right. - Else: - If the height at the right pointer is greater than or equal to `right_max`, update `right_max`. - Else, add the difference between `right_max` and the height at the right pointer to the total water trapped. - Move the right pointer one step to the left. 4. Continue this process until the left pointer is greater than the right pointer. # Input/Output `[input]` integer array `heights` Array of non-negative integers, `1 ≤ heights.length ≤ 10^4` and `0 ≤ heights[i] ≤ 10^4`. `[output]` integer The total amount of trapped rainwater.","solution":"def trap_rainwater(heights): Calculate the total amount of rainwater that can be trapped between buildings. :param heights: List of non-negative integers representing the heights of buildings. :return: Total amount of trapped rainwater. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = 0, 0 water_trapped = 0 while left < right: if heights[left] < heights[right]: if heights[left] >= left_max: left_max = heights[left] else: water_trapped += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: water_trapped += right_max - heights[right] right -= 1 return water_trapped"},{"question":"You are given a list of strings. Your task is to write a function that checks if each string in the list can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. Task Create a function that takes a list of strings as input and returns a list of booleans where each boolean corresponds to whether the respective string can be rearranged to form a palindrome. Example ``` Input: [\\"civic\\", \\"ivicc\\", \\"hello\\", \\"abcba\\"] Output: [True, True, False, True] Explanation: - \\"civic\\" is already a palindrome. - \\"ivicc\\" can be rearranged to form \\"civic\\" which is a palindrome. - \\"hello\\" cannot be rearranged to form a palindrome. - \\"abcba\\" is already a palindrome. ``` Constraints - The input list contains at most 100 strings. - Each string has a maximum length of 50 characters. - The strings contain only lowercase English letters. Note You need to check each string individually and determine if it can be rearranged to form a palindrome. Return a list of booleans as the result.","solution":"def can_form_palindrome(strings): Returns a list of booleans indicating if the corresponding strings can be rearranged to form a palindrome. def is_palindrome_permutation(s): from collections import Counter count = Counter(s) odd_occurrences = sum(1 for c in count.values() if c % 2 != 0) return odd_occurrences <= 1 return [is_palindrome_permutation(s) for s in strings]"},{"question":"=====Function Descriptions===== concatenate The concatenate tool is used to join two or more arrays along a specified axis. (a). Using concatenate along axis 0 import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5, 6]]) print numpy.concatenate((array1, array2), axis = 0) #Output [[1 2] [3 4] [5 6]] (b). Using concatenate along axis 1 import numpy array1 = numpy.array([[1, 2], [3, 4]]) array2 = numpy.array([[5], [6]]) print numpy.concatenate((array1, array2), axis = 1) #Output [[1 2 5] [3 4 6]] hstack The hstack tool stacks arrays in sequence horizontally (column-wise). import numpy array1 = numpy.array([1, 2, 3]) array2 = numpy.array([4, 5, 6]) print numpy.hstack((array1, array2)) #Output [1 2 3 4 5 6] vstack The vstack tool stacks arrays in sequence vertically (row-wise). import numpy array1 = numpy.array([1, 2, 3]) array2 = numpy.array([4, 5, 6]) print numpy.vstack((array1, array2)) #Output [[1 2 3] [4 5 6]] =====Problem Statement===== You are given two arrays of integers. Your task is to concatenate these arrays along the second axis and then stack the resulting arrays horizontally. =====Input Format===== The first line contains space-separated integers of the first array. The second line contains space-separated integers of the second array. Note: Both arrays will have the same shape, for simplicity, assume they are both 2x2 arrays. =====Output Format===== Print the final array that results from concatenating the input arrays along the second axis and then stacking them horizontally.","solution":"import numpy as np def process_arrays(array1, array2): Concatenate two 2x2 arrays along the second axis (axis=1) and stack them horizontally. Parameters: array1 (list of list of int): The first 2x2 array. array2 (list of list of int): The second 2x2 array. Returns: numpy.ndarray: The resulting array after concatenation and horizontal stacking. arr1 = np.array(array1) arr2 = np.array(array2) # Concatenating along the second axis which is axis=1 concatenated = np.concatenate((arr1, arr2), axis=1) # Stack them horizontally stacked_result = np.hstack((concatenated, concatenated)) return stacked_result"},{"question":"Given a list of integers, write a function that returns a list of all the values that appear more than once in the input list in ascending order. If no value appears more than once, the function should return an empty list. The integers will range from -100 to 100, and the input list will contain at least one integer but no more than 100 integers. For example: ```python find_duplicates([1, 2, 3, 2, 1, -4, -4, 6, 7]) => [-4, 1, 2] find_duplicates([5, 3, 9, 0, 7]) => [] find_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 5]) => [1, 2, 3] ```","solution":"def find_duplicates(lst): Returns a list of values that appear more than once in the input list in ascending order. from collections import Counter counts = Counter(lst) duplicates = [item for item, count in counts.items() if count > 1] return sorted(duplicates)"},{"question":"You are given a string containing a list of student names and their corresponding scores in the format: `\\"Name1:Score1, Name2:Score2, Name3:Score3\\"`. Write a function, `get_top_student()`, that takes such a string as input and returns the name of the student with the highest score. If there is a tie for the highest score, return the name of the student who appears first in the string. For example, given the input string `\\"Alice:87, Bob:92, Charlie:87, David:92\\"`, the function should return `\\"Bob\\"` because although Bob and David both have the highest score, Bob appears first in the list. You can assume that: - Each student\'s name and score will be separated by a colon `:` - Students\' details will be separated by a comma and a single space `, ` - Each name will only contain alphabetic characters and each score will be a non-negative integer. Function signature: `def get_top_student students: str) -> str:`","solution":"def get_top_student(students: str) -> str: Returns the name of the student with the highest score. If there is a tie, returns the name of the student who appears first in the string. :param students: A string containing names and scores in the format \\"Name1:Score1, Name2:Score2, ...\\" :return: The name of the student with the highest score # Split the input string by \', \' to get individual student details student_details = students.split(\', \') # Initialize variables to store the top student name and highest score found top_student = \\"\\" highest_score = -1 # Iterate through each student detail for detail in student_details: name, score = detail.split(\':\') score = int(score) # Convert score to an integer # Check if the score of the current student is higher than the highest score found so far if score > highest_score: highest_score = score top_student = name # If there is a tie, the first student with the highest score (already encountered) remains the top student return top_student"},{"question":"Given a string containing digits from `2` to `9` inclusive, return all possible letter combinations that the number could represent following the mapping of digits to letters on a telephone keypad: `2 -> \\"abc\\"` `3 -> \\"def\\"` `4 -> \\"ghi\\"` `5 -> \\"jkl\\"` `6 -> \\"mno\\"` `7 -> \\"pqrs\\"` `8 -> \\"tuv\\"` `9 -> \\"wxyz\\"` The function should return all possible combinations in lexicographical order. You may assume that the input string is non-empty and the digits are valid. **Function Signature:** ```python def letter_combinations(digits: str) -> List[str]: pass ``` **Example:** ```python letter_combinations(\\"23\\") # returns [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] letter_combinations(\\"92\\") # returns [\\"wa\\", \\"wb\\", \\"wc\\", \\"xa\\", \\"xb\\", \\"xc\\", \\"ya\\", \\"yb\\", \\"yc\\", \\"za\\", \\"zb\\", \\"zc\\"] ``` **Constraints:** 1. The input string can be of any length between 1 and 4 (inclusive). 2. The input string will only contain digits from \'2\' to \'9\'.","solution":"from typing import List def letter_combinations(digits: str) -> List[str]: if not digits: return [] mapping = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index: int, path: str): if index == len(digits): combinations.append(path) return possible_letters = mapping[digits[index]] for letter in possible_letters: backtrack(index + 1, path + letter) combinations = [] backtrack(0, \\"\\") return combinations"},{"question":"# Introduction and Warm-up # Task **_Given_** a *string* that contains a mixture of lowercase and uppercase letters, **_identify_** the *longest substring* that contains unique characters and return the length of that substring. ___ # Notes * **_String_** length is *at least 1*. * The *substring* can include both uppercase and lowercase characters, and they are considered distinct (i.e., \'a\' and \'A\' are different characters). ___ # Input >> Output Examples ``` longestUniqueSubstring(\\"abcabcbb\\") ==> return (3) ``` **_Explanation_**: The input string is `\\"abcabcbb\\"` and the longest substring with all unique characters is `\\"abc\\"`, which has a length of **_3_**. ___ ``` longestUniqueSubstring(\\"bbbbb\\") ==> return (1) ``` **_Explanation_**: The input string is `\\"bbbbb\\"` and the longest substring with all unique characters is `\\"b\\"`, which has a length of **_1_**. ___ ``` longestUniqueSubstring(\\"pwwkew\\") ==> return (3) ``` **_Explanation_**: The input string is `\\"pwwkew\\"` and the longest substring with all unique characters is `\\"wke\\"`, which has a length of **_3_**. ___ ``` longestUniqueSubstring(\\"aAaAaA\\") ==> return (2) ``` **_Explanation_**: The input string is `\\"aAaAaA\\"` and the longest substring with all unique characters is `\\"aA\\"`, which has a length of **_2_**. ___ ___ ___ # ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def longestUniqueSubstring(s): Returns the length of the longest substring with all unique characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Given an array of integers, your task is to find the longest contiguous subarray such that all elements in the subarray have the same value. Implement a function `longest_same_value_subarray` that takes an array of integers as input and returns the length of the longest subarray and the value that appears in the subarray. # Function Signature: ``` def longest_same_value_subarray(arr: List[int]) -> Tuple[int, int]: ``` # Input: - `arr` (a list of integers): the array in which to find the longest contiguous subarray with the same value. The array length will be between 1 and 100,000. # Output: - A tuple with two elements: 1. The length of the longest contiguous subarray where all elements are the same. 2. The integer value that appears in that subarray. # Example: ``` longest_same_value_subarray([1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1]) # Expected output: (4, 2) longest_same_value_subarray([7, 7, 7, 7]) # Expected output: (4, 7) ``` # Notes: - If there are multiple subarrays of the same maximum length, return the first one encountered from the beginning of the array. - Assume the input array will always have at least one element.","solution":"from typing import List, Tuple def longest_same_value_subarray(arr: List[int]) -> Tuple[int, int]: Given an array of integers, find the longest contiguous subarray such that all elements in the subarray have the same value. if not arr: return (0, None) max_length = 1 current_length = 1 max_value = arr[0] current_value = arr[0] for i in range(1, len(arr)): if arr[i] == current_value: current_length += 1 else: if current_length > max_length: max_length = current_length max_value = current_value current_value = arr[i] current_length = 1 if current_length > max_length: max_length = current_length max_value = current_value return (max_length, max_value)"},{"question":"Write a function that takes a list of numbers and strings, and returns a new list containing only the numbers in it, but each number is squared. # Example ```python square_numbers([1, 2, \'a\', \'b\']) == [1, 4] square_numbers([1, \'a\', \'b\', 0, 15]) == [1, 0, 225] square_numbers([1, 2, \'aasf\', \'1\', \'123\', 123]) == [1, 4, 15129] ```","solution":"def square_numbers(lst): Takes a list of numbers and strings, and returns a new list containing only the numbers, each squared. return [x**2 for x in lst if isinstance(x, (int, float))]"},{"question":"# Longest Substring Without Repeating Characters Given a string, find the length of the longest substring without repeating characters. Task Write a function `length_of_longest_substring`, that takes a string `s`, and returns an integer, which is the length of the longest substring without repeating characters. Constraints - `0 <= s.length <= 5 * 10^4` - `s` consists of English letters, digits, symbols, and spaces. Examples ```python length_of_longest_substring(\\"abcabcbb\\") == 3 # The answer is \\"abc\\", with the length of 3. length_of_longest_substring(\\"bbbbb\\") == 1 # The answer is \\"b\\", with the length of 1. length_of_longest_substring(\\"pwwkew\\") == 3 # The answer is \\"wke\\", with the length of 3. length_of_longest_substring(\\"\\") == 0 # The answer is 0, with the length of 0. length_of_longest_substring(\\" \\") == 1 # The answer is \\" \\", with the length of 1. length_of_longest_substring(\\"au\\") == 2 # The answer is \\"au\\", with the length of 2. ``` Approach 1. Use a sliding window approach with two pointers. 2. Use a set to store the characters in the current window. 3. Iterate through the string while updating the pointers and set as necessary to ensure no repeating characters within the window. 4. Track the maximum length of the window. Example Code ```python def length_of_longest_substring(s): char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a string containing only lowercase letters, write a function to determine if the string is a palindrome permutation. A palindrome permutation is a string that can be rearranged to form a palindrome. The function should return a boolean value: `true` if the string is a palindrome permutation, and `false` otherwise. Examples: - `\'tactcoa\'` can be rearranged to `\'tacocat\'` or `\'atcocta\'`, both of which are palindromes. So, the function should return `true`. - `\'abc\'` cannot be rearranged to form a palindrome. So, the function should return `false`. Constraints: - The function should be case-insensitive, but since the input is given to be all lowercase, you do not need to handle case conversion. - You should consider only the characters in the string. Any spaces, punctuation, or special characters should be ignored (though the example inputs are given to be alphanumeric, you should consider such cases while planning the function). Consider the following underlying points while creating your function: - The maximum length of the string can be 1000 characters.","solution":"def is_palindrome_permutation(s): Determines if the given string is a permutation of a palindrome. Arguments: s -- string containing only lowercase letters Returns: bool -- True if the string is a palindrome permutation, False otherwise # A string can be permuted to a palindrome if and only if # at most one character has an odd count. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check the number of characters with an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A palindrome can tolerate at most one odd-count character return odd_count <= 1"},{"question":"Task You are managing a warehouse, and you need to efficiently place containers on shelves such that the shelves\' capacity is not exceeded, and the placement is done in the minimum number of trips. You are given a list of container weights and the maximum weight capacity of a shelf. Your task is to determine the minimum number of trips required to place all the containers on the shelves without exceeding the weight capacity in any trip. Write a function `minimumTrips` to achieve this. Input/Output - `[input]` integer `n` The number of containers. `1 <= n <= 10^5` - `[input]` list of integers `weights` A list of integers representing the weights of the containers. `1 <= weights[i] <= 10^4` - `[input]` integer `capacity` The maximum weight capacity of each shelf. `1 <= capacity <= 10^9` - `[output]` integer The minimum number of trips required to place all containers on the shelves. Example `minimumTrips(5, [2, 3, 4, 5, 1], 5)` Returns `3` because we can have trips like: - Trip 1: 5 - Trip 2: 4 + 1 - Trip 3: 3 + 2","solution":"def minimumTrips(n, weights, capacity): Returns the minimum number of trips required to place all containers on the shelves. Parameters: n (int): The number of containers. weights (list): A list of integers representing the weights of the containers. capacity (int): The maximum weight capacity of each shelf. Returns: int: The minimum number of trips required. weights.sort() left = 0 right = n - 1 trips = 0 while left <= right: if weights[left] + weights[right] <= capacity: left += 1 right -= 1 trips += 1 return trips"},{"question":"=====Problem Statement===== The provided code stub reads an integer n from STDIN. Write code to print the first n lines of the Fibonacci sequence. =====Example===== n = 5 Print the following: 0 1 1 2 3 =====Input Format===== The first line contains the integer n. =====Constraints===== 1 ≤ n ≤ 30 =====Output Format===== Print each of the first n lines of the Fibonacci sequence, each number on a new line.","solution":"def print_fibonacci(n): Prints the first n lines of the Fibonacci sequence. a, b = 0, 1 for _ in range(n): print(a) a, b = b, a + b"},{"question":"Riya has a string `S` consisting of only lowercase alphabets. She wants to find the length of the longest subsequence of `S` such that the characters of the subsequence are in sorted order alphabetically. Note that a subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help Riya determine the length of this longest sorted subsequence. -----Input:----- - A single line which contains the string `S`. -----Output:----- - Print an integer which is the length of the longest sorted subsequence. -----Constraints----- - 1 <= |S| <= 1000 - \'a\' <= S[i] <= \'z\' for all valid i -----Sample Input 1:----- abcbdab -----Sample Output 1:----- 4 -----Explanation 1:----- One of the possible longest sorted subsequences is \\"abcd\\". -----Sample Input 2:----- zyx -----Sample Output 2:----- 1 -----Explanation 2:----- One of the possible longest sorted subsequences is any single character \\"z\\", \\"y\\", or \\"x\\".","solution":"def longest_sorted_subsequence_length(S): Returns the length of the longest subsequence of S such that the characters of the subsequence are in sorted order alphabetically. n = len(S) # lis[i] will be the length of the longest increasing subsequence that ends with S[i] lis = [1] * n for i in range(1, n): for j in range(i): if S[i] >= S[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Incredible Renewable Energy Inc. wants to monitor the performance of its solar panels. They have a grid of solar panels represented as a 2D array of integers where each value indicates the energy produced by the corresponding panel. The company wants to find the largest square region in the grid where all the panels produce exactly the same amount of energy. Your task is to write a function that determines the size of the largest square subgrid where all the panels have the same energy output. -----Input----- The first line of input contains an integer T, representing the number of test cases. Each test case starts with two integers, N and M, representing the dimensions of the grid (rows and columns). The next N lines each contain M space-separated integers representing the energy produced by the solar panels in that row. -----Output----- For each test case, output a single integer - the size of the largest square region where all the panels produce the same amount of energy. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 100 - 0 ≤ energy_output_value ≤ 1000 -----Example----- Input 2 5 6 1 1 1 1 2 2 1 1 1 3 4 4 1 1 1 3 4 4 5 5 5 5 5 5 5 5 5 5 5 5 4 4 2 2 2 2 2 2 1 1 2 2 1 1 3 3 3 3 Output 3 2 -----Explanation----- Test Case 1: The largest square subgrid of identical values has size 3 and is found in the top left corner (three 1s in rows 1 through 3). Test Case 2: The largest square subgrid of identical values has size 2 and is found at the top left corner (twos in the first two rows and first two columns).","solution":"def find_largest_square_subgrid(grid): N = len(grid) M = len(grid[0]) dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): if i == 0 or j == 0: dp[i][j] = 1 else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side def largest_square_subgrid(T, test_cases): results = [] for case in test_cases: N, M, grid = case results.append(find_largest_square_subgrid(grid)) return results"},{"question":"In this task, you\'ll write a function that restructures a given string by reversing the order of words, without reversing the letters within each word. Every word will be separated by a single space, and there will be no leading, trailing, or multiple spaces between words in the input string. ```python # input string \\"The quick brown fox\\" # reversed words string \\"fox brown quick The\\" ``` --- # Examples ```python >>> reverse_words(\\"hello world\\") \\"world hello\\" >>> reverse_words(\\"Python is fun\\") \\"fun is Python\\" >>> reverse_words(\\"keep calm and code on\\") \\"on code and calm keep\\" >>> reverse_words(\\"open source contributions rock\\") \\"rock contributions source open\\" ``` Good luck!","solution":"def reverse_words(s): Reverses the order of words in a given string without reversing the letters within each word. :param s: The string to reverse the words in :return: A string with the words in reversed order return \' \'.join(s.split()[::-1])"},{"question":"Design a class TimeMap that supports two functions, TimeMap.set(key, value, timestamp) and TimeMap.get(key, timestamp). TimeMap.set(key, value, timestamp) stores the key and value, along with the given timestamp. TimeMap.get(key, timestamp) retrieves the value associated with the key at the highest timestamp that is less than or equal to the given timestamp. If there are no values, it returns an empty string (\\"\\"). Examples: Input: t = TimeMap() t.set(\\"foo\\", \\"bar\\", 1); // stores the key \\"foo\\" and value \\"bar\\" along with timestamp = 1 t.get(\\"foo\\", 1); // returns \\"bar\\" t.get(\\"foo\\", 3); // returns \\"bar\\", since the timestamp 1 is the highest timestamp that is <= 3 t.set(\\"foo\\", \\"bar2\\", 4); t.get(\\"foo\\", 4); // returns \\"bar2\\" t.get(\\"foo\\", 5); // returns \\"bar2\\" Note: All key/value strings are lowercase. All key/value strings have length in the range [1, 100]. The number of timestamps in TimeMap.set is in the range [1, 2 * 10^5]. The timestamp is always greater than 0 and placed in non-decreasing order. t.get and t.set functions will be called always.isEmpty ..","solution":"import collections class TimeMap: def __init__(self): self.store = collections.defaultdict(list) def set(self, key, value, timestamp): Stores the key and value along with the given timestamp :param key: str :param value: str :param timestamp: int :return: None self.store[key].append((timestamp, value)) def get(self, key, timestamp): Retrieves the value associated with the key at the highest timestamp that is less than or equal to the given timestamp. If there are no values, it returns an empty string. :param key: str :param timestamp: int :return: str if key not in self.store: return \\"\\" values = self.store[key] low, high = 0, len(values) - 1 while low <= high: mid = (low + high) // 2 if values[mid][0] <= timestamp: low = mid + 1 else: high = mid - 1 return values[high][1] if high >= 0 else \\"\\""},{"question":"Given an integer array `arr`, and an integer `d`, return the longest length of a strictly decreasing subsequence such that the absolute difference between any two consecutive elements in the subsequence does not exceed `d`. A subsequence of an array is obtained by deleting some (can be zero) elements of the array, leaving the remaining elements in their original order. Example 1: Input: arr = [9, 4, 3, 2, 5, 4, 3, 2], d = 1 Output: 4 Explanation: The longest decreasing subsequence is [9, 4, 3, 2]. Example 2: Input: arr = [5, 4, 7, 6, 5, 1, 0], d = 2 Output: 3 Explanation: The longest decreasing subsequence is [5, 4, 2] or [7, 6, 4]. Example 3: Input: arr = [1, 2, 3, 4, 5], d = 1 Output: 1 Explanation: There is no strictly decreasing sequence, so the answer is 1 for any single element. Constraints: 1 <= arr.length <= 10^5 1 <= d <= 10^4 0 <= arr[i] <= 10^4","solution":"def longest_decreasing_subsequence(arr, d): Function to return the longest length of a strictly decreasing subsequence where the absolute difference between any two consecutive elements in the subsequence does not exceed `d`. n = len(arr) dp = [1] * n max_length = 1 for i in range(1, n): for j in range(i): if arr[j] > arr[i] and arr[j] - arr[i] <= d: dp[i] = max(dp[i], dp[j] + 1) max_length = max(max_length, dp[i]) return max_length"},{"question":"Given a string s and an integer k, determine if the string is k-palindromic. A string is k-palindromic if it can be transformed into a palindrome by removing at most k characters. Example 1: Input: s = \\"abcdeca\\", k = 2 Output: true Explanation: You can remove \'b\' and \'e\' to get \\"acdca\\", which is a palindrome. Example 2: Input: s = \\"abcdef\\", k = 3 Output: false Explanation: The minimum number of characters needed to remove to make it a palindrome exceeds 3. Note: The string will contain only lowercase letters and its length will not exceed 1000.","solution":"def is_k_palindromic(s, k): Determines if a given string can be transformed into a palindrome by removing at most k characters. Parameters: s (str): The input string. k (int): The maximum number of characters that can be removed. Returns: bool: True if the string can be transformed into a palindrome by removing at most k characters, False otherwise. n = len(s) def longest_palindromic_subsequence(x): dp = [[0] * n for _ in range(n)] for i in range(n - 1, -1, -1): dp[i][i] = 1 for j in range(i + 1, n): if x[i] == x[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] lps = longest_palindromic_subsequence(s) return (n - lps) <= k"},{"question":"Residents Movement ================ You are tracking residents\' movements in and out of a building. The movements are recorded as a list of tuples where each tuple represents a resident\'s entry and exit times. Each resident can have one or more entries in the log, and the times are in the format `hh:mm`. Your task: ---------- Write the function `totalTimeSpent()` that calculates, and returns the total time spent in the building by all residents, given the following argument: - `movements`(list of tuples), where each tuple contains two strings representing the entry and exit times in the format `(\'hh:mm\', \'hh:mm\')`. The returned number should be the total time in minutes. >**Hint:** You may find the `datetime` module useful for time calculations! Example: -------- ```python movements = [(\'08:00\', \'12:00\'), (\'14:00\', \'18:00\'), (\'09:30\', \'10:30\')] print(totalTimeSpent(movements)) ``` This should output: ``` 540 ```","solution":"from datetime import datetime def totalTimeSpent(movements): total_minutes = 0 for entry, exit in movements: fmt = \'%H:%M\' entry_time = datetime.strptime(entry, fmt) exit_time = datetime.strptime(exit, fmt) diff = exit_time - entry_time total_minutes += diff.total_seconds() // 60 return int(total_minutes)"},{"question":"You are tasked with designing a rectangular cactus garden. The garden is represented as a grid of square cells, and each cell can either contain a cactus represented by \'C\' or be empty represented by \'.\'. Instructions * Write a function which takes three parameters: the dimensions of the garden (rows and columns) and a list of tuples representing the initial positions of the cacti. Each tuple in the list contains two integers representing the row index and column index of a cactus\'s position. * The function should return a two-dimensional list (a list of lists), representing the garden with cacti placed in their initial positions. Cells not containing a cactus should be represented by \'.\'. Other points * The number of rows and columns of the garden should be greater than zero. If either is less than or equal to zero, return an empty list. * If the provided cacti positions fall outside the bounds of the garden, ignore those positions. Examples: ```python create_cactus_garden(3, 4, [(0, 1), (1, 2), (2, 3)]) # Returns: # [ # [\'.\', \'C\', \'.\', \'.\'], # [\'.\', \'.\', \'C\', \'.\'], # [\'.\', \'.\', \'.\', \'C\'] # ] create_cactus_garden(2, 2, [(0, 0), (1, 1), (2, 2)]) # Returns: # [ # [\'C\', \'.\'], # [\'.\', \'C\'] # ] (ignores the (2, 2) position as it is out of bounds) create_cactus_garden(0, 3, [(0, 0), (1, 1)]) # Returns: # [] ``` Note: Ensure that your function is optimized for performance and clarity.","solution":"def create_cactus_garden(rows, cols, cactus_positions): Creates a 2D list representing a rectangular garden with cacti. Args: - rows (int): Number of rows in the garden. - cols (int): Number of columns in the garden. - cactus_positions (list of tuples): List of (row, col) tuples representing cactus positions. Returns: - list of lists: 2D list representing the garden. if rows <= 0 or cols <= 0: return [] # Initialize garden with empty cells garden = [[\'.\' for _ in range(cols)] for _ in range(rows)] # Place cacti in the garden for r, c in cactus_positions: if 0 <= r < rows and 0 <= c < cols: garden[r][c] = \'C\' return garden"},{"question":"Given two strings A and B, both representing non-negative integers, you are to determine whether it is possible to create the string B using any number of circular shifts of string A. A circular shift of a string is defined as moving the leftmost character of the string to the rightmost position. For example, the circular shifts of the string abcde are: - bcdea - cdeab - deabc - eabcd - abcde (back to the original after n shifts, where n is the length of the string) -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single string A. - The second line contains a single string B. -----Output----- For each test case, print \\"YES\\" if it is possible to create the string B using any number of circular shifts of string A, otherwise print \\"NO\\". -----Constraints----- - 1 le T le 10^5 - 1 le |A|, |B| le 10^5 - A and B contain only lowercase English letters - the sum of |A| + |B| over all test cases does not exceed 10^6 -----Example Input----- 3 abcde cdeab abcde abced abc abc -----Example Output----- YES NO YES -----Explanation----- Example case 1: By performing a circular shift on abcde, we can form bcdea, cdeab, etc. cdeab is a valid circular shift of abcde, so the answer is \\"YES\\". Example case 2: None of the circular shifts of abcde result in abced, so the answer is \\"NO\\". Example case 3: The string abc is already equal to abc, so the answer is \\"YES\\".","solution":"def can_form_by_circular_shift(A, B): Determines if string B can be formed by any number of circular shifts of string A. if len(A) != len(B): return \\"NO\\" return \\"YES\\" if B in (A + A) else \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): A = test_cases[i * 2] B = test_cases[i * 2 + 1] results.append(can_form_by_circular_shift(A, B)) return results"},{"question":"Given a string of lowercase English letters with length n, you can perform the following operation any number of times (possibly zero): remove any one character from the string. Your goal is to make the resulting string a palindrome. Determine the minimum number of characters you need to remove to achieve this. ----Input---- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line of each test case contains a string of length n consisting of lowercase English letters. It is guaranteed that the sum of all n across test cases does not exceed 10^6. ----Output---- For each test case, output a single integer: the minimum number of characters you need to remove to make the string a palindrome. ----Example---- Input 3 3 abc 5 ababa 4 abca Output 2 0 1 ----Note---- In the first test case, you need to remove characters \'a\' and \'c\' to make it a palindrome. In the second test case, \'ababa\' is already a palindrome, so no characters need to be removed. In the third test case, you can remove either \'b\' to get \'aca\' or \'c\' to get \'aba\', both of which are palindromes.","solution":"def min_deletions_to_palindrome(n, s): This function returns the minimum number of deletions required to make a given string a palindrome. def longest_palindromic_subsequence(s): Helper function to calculate the length of the longest palindromic subsequence in s. m = len(s) dp = [[0] * m for _ in range(m)] for i in range(m): dp[i][i] = 1 for cl in range(2, m + 1): for i in range(m - cl + 1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][m - 1] lps = longest_palindromic_subsequence(s) return n - lps def process_test_cases(t, test_cases): This function processes multiple test cases and returns the minimum deletions for each case. result = [] for i in range(t): n, s = test_cases[i] result.append(min_deletions_to_palindrome(n, s)) return result"},{"question":"Word Search Solver Given a 2D board and a list of words, find all the words that can be formed by sequentially adjacent letters of the board. The same letter cell may not be used more than once in a word. Background You are given a 2D grid of letters and a list of words to find. Each word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once per word. Example: Given the board: ``` [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] ``` and words `[\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"]`, return `[\\"oath\\",\\"eat\\"]`. Your Task Create a function `findWords(board: List[List[str]], words: List[str]) -> List[str]` that takes in a 2D grid of characters and a list of words, and returns all the words that can be found in the grid according to the described rules. # Constraints - Each letter in the board can only be used once per word. - Elements of the grid will be lowercase English letters. - The words list will contain words of lowercase English letters only. - 1 ≤ board.length ≤ 12 - 1 ≤ board[0].length ≤ 12 - 1 ≤ words.length ≤ 1000 - 1 ≤ words[i].length ≤ 10 - The returned words must be unique and in any order. # Example ```python board = [ [\'o\',\'a\',\'a\',\'n\'], [\'e\',\'t\',\'a\',\'e\'], [\'i\',\'h\',\'k\',\'r\'], [\'i\',\'f\',\'l\',\'v\'] ] words = [\\"oath\\", \\"pea\\", \\"eat\\", \\"rain\\"] assert findWords(board, words) == [\\"oath\\", \\"eat\\"] ``` # Hints - You may use backtracking to explore the grid. - Consider using a Trie (prefix tree) to store the words for efficient lookup during the backtracking process. - Prune your search as soon as you realize that a path from a cell does not correspond to any word in the list.","solution":"from typing import List, Set class TrieNode: def __init__(self): self.children = {} self.is_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word: str): node = self.root for letter in word: if letter not in node.children: node.children[letter] = TrieNode() node = node.children[letter] node.is_word = True def findWords(board: List[List[str]], words: List[str]) -> List[str]: def backtrack(x: int, y: int, node: TrieNode, path: str): if node.is_word: result.add(path) node.is_word = False # Avoid duplicate entries if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y] == \'#\': return temp, board[x][y] = board[x][y], \'#\' # Mark as visited if temp in node.children: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: backtrack(x + dx, y + dy, node.children[temp], path + temp) board[x][y] = temp # Reset the cell after backtracking # Build Trie from words trie = Trie() for word in words: trie.insert(word) result = set() # Using set to prevent duplicates for i in range(len(board)): for j in range(len(board[0])): backtrack(i, j, trie.root, \\"\\") return list(result)"},{"question":"Farmer John has a rectangular field with dimensions W by H, divided into a grid of WxH cells. He wants to plant crops in such a way that each cell is filled, but he has a special rule: no two adjacent cells must contain the same type of crop. Given two integers W and H representing the width and height of the field respectively, determine if it is possible to plant the crops following Farmer John’s rule. -----Input----- The first line contains a single integer T, the number of test cases. Each test case is described by a single line containing two space-separated integers W and H, the dimensions of the field. -----Output----- For each test case, output \\"YES\\" if it is possible to plant the crops according to the rule, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ W, H ≤ 100 -----Example----- Input: 3 4 4 3 5 1 10 Output: YES YES YES","solution":"def can_plant_crops(t, dimensions): results = [] for i in range(t): W, H = dimensions[i] # It is always possible to plant crops with an alternating pattern (checkerboard) # as long as either W > 1 or H > 1. The only case where it is not possible is # when both W == 1 and H == 1. if W > 1 or H > 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Scenario You are a librarian in a large library. Every day, you receive a list of books that need to be reshelved into their appropriate spots on the shelves. Each book is represented by a unique identifier (an integer). To make your job easier, you want to reorder the list of books in ascending order before reshelving them. # Task Given an unsorted list of book identifiers, write a function `sortBooks` that returns the list sorted in ascending order. # Input - A list of integers where each integer represents the unique identifier of a book. # Output - A list of integers sorted in ascending order. # Notes - The input list will have at least one book. - All identifiers are unique and positive integers. - Your implementation should aim for an efficient sorting algorithm (e.g., quicksort, mergesort). # Input >> Output Examples: ```python sortBooks([9, 3, 5, 1, 7]) ==> [1, 3, 5, 7, 9] ``` Explanation: The sorted list of book identifiers is [1, 3, 5, 7, 9]. ___ ```python sortBooks([15, 23, 4, 42, 8]) ==> [4, 8, 15, 23, 42] ``` Explanation: The sorted list of book identifiers is [4, 8, 15, 23, 42]. ___ ```python sortBooks([5, 3, 1]) ==> [1, 3, 5] ``` Explanation: The sorted list of book identifiers is [1, 3, 5]. ___ # Enjoy Sorting!","solution":"def sortBooks(book_ids): Returns the list of book identifiers sorted in ascending order. Parameters: book_ids (list): A list of integers where each integer represents the unique identifier of a book. Returns: list: A list of integers sorted in ascending order. return sorted(book_ids)"},{"question":"Create a **sumOfDigits** function that will **receive an integer** as input, and **return an integer** which is the **sum of the digits** of the original number. If the resulting sum has more than one digit, the function should repeat the process until a single-digit number is obtained. For example, if the input is `493`, the sum of the digits is `4 + 9 + 3 = 16`. Since `16` has more than one digit, the process repeats: `1 + 6 = 7`. Thus, the function should return `7`. Examples: - `sumOfDigits(1234)` should return `1` because `1 + 2 + 3 + 4 = 10` and `1 + 0 = 1`. - `sumOfDigits(987)` should return `6` because `9 + 8 + 7 = 24` and `2 + 4 = 6`. Note: - The function should handle both positive and negative integers. If the input number is negative, consider only its absolute value. - Input will always be a valid integer (both positive and negative integers).","solution":"def sumOfDigits(n): Returns the single-digit sum of the digits of the absolute value of the integer n. n = abs(n) # Consider only the absolute value of the input integer while n >= 10: # Continue until n becomes a single-digit number n = sum(int(digit) for digit in str(n)) # Compute the sum of the digits return n"},{"question":"You are designing a simplified spell checker and autocorrect feature for a word processor. The initial feature will focus on identifying and correcting common misspellings of given words. Implement a function that takes an array of strings (words) and returns a dictionary where: - The key is the original, correctly spelled word. - The value is a list of common variations or misspellings of that word that you need to correct. Use the following predefined list of common misspellings for this task: - \\"definitely\\": [\\"definately\\", \\"definatly\\", \\"definatley\\"] - \\"separate\\": [\\"seperate\\", \\"seperete\\"] - \\"accommodate\\": [\\"acommodate\\", \\"acomodate\\", \\"accomodate\\", \\"acoommodate\\"] - \\"their\\": [\\"thier\\", \\"ther\\"] - \\"occurrence\\": [\\"occurance\\", \\"occurrance\\", \\"occurence\\"] Your function should process the input array of words and return the dictionary with corrected spellings as described. # Example If the input array is: ``` [\\"definately\\", \\"seperate\\", \\"accomodate\\", \\"thier\\", \\"occurrance\\"] ``` The function should return: ``` { \\"definitely\\": [\\"definately\\"], \\"separate\\": [\\"seperate\\"], \\"accommodate\\": [\\"accomodate\\"], \\"their\\": [\\"thier\\"], \\"occurrence\\": [\\"occurrance\\"] } ```","solution":"def correct_spelling(words): Takes an array of strings (words) and returns a dictionary where: - The key is the original, correctly spelled word. - The value is a list of common variations or misspellings of that word that you need to correct. common_misspellings = { \\"definitely\\": [\\"definately\\", \\"definatly\\", \\"definatley\\"], \\"separate\\": [\\"seperate\\", \\"seperete\\"], \\"accommodate\\": [\\"acommodate\\", \\"acomodate\\", \\"accomodate\\", \\"acoommodate\\"], \\"their\\": [\\"thier\\", \\"ther\\"], \\"occurrence\\": [\\"occurance\\", \\"occurrance\\", \\"occurence\\"], } corrected_dict = {key: [] for key in common_misspellings} for word in words: for correct, misspellings in common_misspellings.items(): if word in misspellings: corrected_dict[correct].append(word) break # Remove empty lists corrected_dict = {key: val for key, val in corrected_dict.items() if val} return corrected_dict"},{"question":"You are given an array of integers where each integer corresponds to a house with a certain amount of money. You are a professional robber planning to rob houses along a street. However, you cannot rob two adjacent houses because the police will be alerted. Your task is to determine the maximum amount of money you can rob without alerting the police. Write a function `max_rob` that takes in an array of non-negative integers representing the amount of money in each house and returns the maximum amount of money you can rob without robbing two consecutive houses. ```python For example: max_rob([1, 2, 3, 1]) == 4 max_rob([2, 7, 9, 3, 1]) == 12 Explanation: In the first example, the optimal strategy is to rob houses 1 and 3, which gives a total of 1 + 3 = 4. In the second example, the optimal strategy is to rob houses 1, 3, and 5, which gives a total of 2 + 9 + 1 = 12. ``` Your function should return an integer representing the maximum amount of money you can rob, such that no two adjacent houses are robbed.","solution":"def max_rob(nums): Returns the maximum amount of money that can be robbed without robbing two consecutive houses. :param nums: List[int] - list of non-negative integers representing money in each house. :return: int - maximum amount of money that can be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] prev1, prev2 = 0, 0 for num in nums: temp = prev1 prev1 = max(prev2 + num, prev1) prev2 = temp return prev1"},{"question":"Write a function that calculates the minimum number of operations needed to transform a given string `s1` into another string `s2`. In each operation, you can: - Insert a character - Remove a character - Replace a character The function should return the minimum number of operations required. # Example: ```python s1 = \\"horse\\" s2 = \\"ros\\" print(min_operations(s1, s2)) # Output: 3 ``` In this example: - Remove \'h\' -> \\"orse\\" - Replace \'r\' with \'o\' -> \\"rose\\" - Remove \'e\' -> \\"ros\\" # Function Signature: ```python def min_operations(s1: str, s2: str) -> int: pass ``` # Constraints: - Both input strings will have a length between `1` and `1000`. - Input strings will consist of lowercase English letters only. # Note: Consider using Dynamic Programming to solve this problem efficiently.","solution":"def min_operations(s1: str, s2: str) -> int: Calculate the minimum number of operations needed to transform s1 into s2. Operations include insertion, deletion, and replacement of characters. m, n = len(s1), len(s2) # Create a 2D array to store the minimum number of operations for each subproblem dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill in the base cases # If s1 is empty, we need to insert all characters of s2 for j in range(n + 1): dp[0][j] = j # If s2 is empty, we need to remove all characters of s1 for i in range(m + 1): dp[i][0] = i # Fill the dp array using the previously computed states for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = min(dp[i - 1][j], # Remove from s1 dp[i][j - 1], # Insert into s1 dp[i - 1][j - 1] # Replace in s1 ) + 1 return dp[m][n]"},{"question":"Time Traveler\'s Watch: You are a software engineer working for a company that designs high-tech devices. Your current project involves a digital timepiece that also functions as a stopwatch. The digital timepiece can be set to start from any given time, and it records time as hours, minutes, and seconds. Your task is to write a function that, given a string representing a time in the format \\"HH:MM:SS\\" and an integer n representing seconds to add, returns the resulting time in the same \\"HH:MM:SS\\" format. The time is on a 24-hour clock. Rules: - HH: range from \\"00\\" to \\"23\\" - MM: range from \\"00\\" to \\"59\\" - SS: range from \\"00\\" to \\"59\\" Example: If the time is \\"12:34:56\\" and you add 10 seconds, you will get \\"12:35:06\\". If the time is \\"23:59:59\\" and you add 1 second, you will get \\"00:00:00\\". Function signature: `def add_seconds(time: str, n: int) -> str:` Example Function Calls: ```python add_seconds(\\"12:34:56\\", 10) -> \\"12:35:06\\" add_seconds(\\"23:59:59\\", 1) -> \\"00:00:00\\" add_seconds(\\"00:00:00\\", 3661) -> \\"01:01:01\\" ``` Your challenge is to handle the time addition operation efficiently, ensuring that the function works correctly for any valid time and within the constraints of a 24-hour clock.","solution":"def add_seconds(time: str, n: int) -> str: Adds n seconds to the given time. Parameters: time (str): A string representing the time in \\"HH:MM:SS\\" format. n (int): The number of seconds to add. Returns: str: The resulting time in \\"HH:MM:SS\\" format. # Parse the input time hh, mm, ss = map(int, time.split(\':\')) # Convert the total time to seconds total_seconds = hh * 3600 + mm * 60 + ss + n # Calculate the new hours, minutes, and seconds new_hh = (total_seconds // 3600) % 24 total_seconds %= 3600 new_mm = total_seconds // 60 new_ss = total_seconds % 60 # Format the results as \\"HH:MM:SS\\" return f\\"{new_hh:02}:{new_mm:02}:{new_ss:02}\\""},{"question":"You are given a list of strings, each representing a book title. Your task is to write a function `common_words(titles)` that takes this list as input and returns a list of words that are common in all the given book titles. Only whole words should be considered, and the case should be ignored (i.e., \\"The\\" and \\"the\\" should be treated as the same word). The returned list should be sorted in ascending alphabetical order. For example: ```python >>> common_words([\\"The Great Gatsby\\", \\"To Kill a Mockingbird\\", \\"Gone with the Wind\\", \\"The Catcher in the Rye\\"]) [] >>> common_words([\\"Brave New World\\", \\"A Brave New Era\\", \\"Brave New Universe\\"]) [\'brave\', \'new\'] >>> common_words([\\"Pride and Prejudice\\", \\"Prejudice and Pride\\"]) [\'and\', \'prejudice\', \'pride\'] ``` You can assume that the input list will always contain at least one title and each title will contain at least one word.","solution":"def common_words(titles): Returns a list of words that are common in all the given book titles. if not titles: return [] # Convert each title to a set of lowercase words sets_of_words = [set(title.lower().split()) for title in titles] # Intersect all sets to find common words common = set.intersection(*sets_of_words) # Return the sorted list of common words return sorted(common)"},{"question":"# Task A robot is programmed to navigate a grid with several obstacles. The robot can move up, down, left, or right, but cannot move through obstacles. You are given the grid and the starting and ending points. Determine if there exists a path for the robot to move from the start to the end point without hitting any obstacle. If a path exists, return the steps taken; otherwise, return -1. - The grid is represented by a 2D array where \'0\' indicates an open cell and \'1\' denotes an obstacle. - The robot can only move vertically or horizontally, not diagonally. # Example For `grid = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 1, 0], [0, 0, 0, 0]]`, `start = (0, 0)`, and `end = (3, 3)`, the output should be `6`. The shortest path is (0,0) -> (1,0) -> (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3) # Input/Output - `[input]` 2D array `grid` The grid where 0 represents an open cell and 1 represents an obstacle. Constraints: 1 ≤ grid.length ≤ 50, 1 ≤ grid[0].length ≤ 50 - `[input]` tuple `start` The starting position in the grid given as a tuple `(row, col)`. Constraints: 0 ≤ start[0] < grid.length, 0 ≤ start[1] < grid[0].length - `[input]` tuple `end` The ending position in the grid given as a tuple `(row, col)`. Constraints: 0 ≤ end[0] < grid.length, 0 ≤ end[1] < grid[0].length - `[output]` an integer The minimum number of steps required to reach from the start to the end point. If no path exists, return -1.","solution":"from collections import deque def min_steps(grid, start, end): Returns the minimum number of steps required to reach from the start to the end point in the grid. If no path exists, return -1. rows = len(grid) cols = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) # (row, col, steps) visited = set() visited.add((start[0], start[1])) while queue: r, c, steps = queue.popleft() if (r, c) == end: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"In a recent coding competition, participants were tasked with creating a program that identifies the longest consecutive sequence of a single character within a given string, and returns an object with the character and the length of the sequence. Write a function `longest_consecutive_sequence` that takes a single string argument and returns a dictionary with keys `\'char\'` and `\'length\'`, where `\'char\'` is the character with the longest consecutive sequence and `\'length\'` is the length of that sequence. In case of ties, return the first occurring character. Examples: ```python longest_consecutive_sequence(\\"aaabbcaaa\\") # {\'char\': \'a\', \'length\': 3} longest_consecutive_sequence(\\"aabbbccccccddddd\\") # {\'char\': \'c\', \'length\': 6} longest_consecutive_sequence(\\"abcd\\") # {\'char\': \'a\', \'length\': 1} longest_consecutive_sequence(\\"\\") # {\'char\': \'\', \'length\': 0} ``` Notes: - The input string can be of any length, including an empty string. - The input string will only contain lowercase alphabetical characters (a-z). - If the input string is empty, return `{\'char\': \'\', \'length\': 0}`.","solution":"def longest_consecutive_sequence(s): if not s: return {\'char\': \'\', \'length\': 0} max_char = s[0] max_len = 1 current_char = s[0] current_len = 1 for i in range(1, len(s)): if s[i] == current_char: current_len += 1 else: if current_len > max_len: max_len = current_len max_char = current_char current_char = s[i] current_len = 1 if current_len > max_len: max_len = current_len max_char = current_char return {\'char\': max_char, \'length\': max_len}"},{"question":"Given an array of integers and a target integer, return indices of the two numbers such that they add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. The returned indices should be in a list and the index order does not matter. Write a function `find_two_sum` that accepts an array `nums` and a target value `target` and returns the indices. For example: ```python find_two_sum([2, 7, 11, 15], 9) => returns [0, 1] find_two_sum([3, 2, 4], 6) => returns [1, 2] find_two_sum([3, 3], 6) => returns [0, 1] ``` **Constraints:** - You can assume that there will always be exactly one solution. - The array will have at least 2 elements and will contain only non-negative integers.","solution":"def find_two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target. Assumes that there\'s exactly one solution. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Given a string S consisting of lowercase Latin characters and spaces, determine the frequency of each character (excluding spaces) in the string and print the characters in ascending order of frequency. If two characters have the same frequency, print the characters in alphabetical order. -----Input----- - The input consists of a single line containing the string S. -----Output----- - For each unique character in the string (excluding spaces), output the characters in ascending order of frequency. If two characters have the same frequency, print them in alphabetical order. -----Constraints----- - 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. -----Example----- Input: examples string Output: a 1 g 1 i 1 l 1 m 1 n 1 p 1 r 1 s 2 e 2 t 1 x 1 -----Explanation----- The frequency of each character in the string (excluding spaces) is calculated. Characters \'a\', \'g\', \'i\', \'l\', \'m\', \'n\', \'p\', \'r\', and \'t\' each appear once. Characters \'s\' and \'e\' each appear twice. The output lists the characters in ascending order of frequency, and alphabetically for those with the same frequency.","solution":"def character_frequency(S): Determine the frequency of each character (excluding spaces) in the string and print the characters in ascending order of frequency. If two characters have the same frequency, print the characters in alphabetical order. from collections import Counter # Remove spaces cleaned_string = S.replace(\\" \\", \\"\\") # Get frequencies of each character freq = Counter(cleaned_string) # Sort characters primarily by frequency and secondarily by alphabet sorted_characters = sorted(freq.items(), key=lambda x: (x[1], x[0])) # Print the result in the specified format result = [\\"{} {}\\".format(char, count) for char, count in sorted_characters] return \\"n\\".join(result)"},{"question":"# Preface You have been hired as a software engineer at an ecommerce company that specializes in selling gourmet foods online. As part of an initiative to improve the company\'s website, you have been tasked with implementing a feature that helps users find products that are recommended based on their previous purchases. # Problem The company\'s database logs each user\'s past purchases, and the team has conducted market research to identify similar products that a user may like based on what they have bought before. Your task is to create a function that receives a user\'s purchase history along with a catalog of products and outputs a list of recommended products that the user has not bought yet. The user\'s purchase history is given as an array of product IDs: ```python purchase_history = [101, 204, 305, ...] ``` The catalog of products is provided as an array of objects with each object containing a product ID, product name, and an array of recommended product IDs: ```python catalog = [ {\\"product_id\\": 101, \\"product_name\\": \\"Olive Oil\\", \\"recommended\\": [102, 201]}, {\\"product_id\\": 204, \\"product_name\\": \\"Truffle Chips\\", \\"recommended\\": [301, 107]}, ... ] ``` Create a function that processes this information and returns a list of recommended product IDs that the user has not yet purchased. The desired output should be in the form of an array containing the unique product IDs of the recommended products: ```python recommended_products = [102, 201, 301, 107, ...] ``` You should also ensure that the function does not recommend duplicate products. If a product has already been recommended from another product\'s recommendation list, it should only appear once in the final output list. ```python def recommend_products(purchase_history: List[int], catalog: List[Dict[str, Any]]) -> List[int]: # Your code here # Example usage recommendations = recommend_products([101, 204, 305], [ {\\"product_id\\": 101, \\"product_name\\": \\"Olive Oil\\", \\"recommended\\": [102, 201]}, {\\"product_id\\": 204, \\"product_name\\": \\"Truffle Chips\\", \\"recommended\\": [301, 107]}, {\\"product_id\\": 305, \\"product_name\\": \\"Gourmet Chocolate\\", \\"recommended\\": [401, 102]} ]) print(recommendations) # Output: [102, 201, 301, 107, 401] ```","solution":"from typing import List, Dict, Any def recommend_products(purchase_history: List[int], catalog: List[Dict[str, Any]]) -> List[int]: recommended_set = set() for product in catalog: if product[\'product_id\'] in purchase_history: for recommendation in product[\'recommended\']: if recommendation not in purchase_history: recommended_set.add(recommendation) return list(recommended_set)"},{"question":"A given array of integers contains both positive and negative numbers. Write a function to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. -----Input----- - The first line of the input contains a single integer N denoting the size of the array. - The second line contains N space-separated integers representing the elements of the array. -----Output----- Print a single integer which is the sum of the contiguous subarray with the largest sum. -----Constraints----- - 1 le N le 10^5 - -10^9 le Array elements le 10^9 -----Example Input----- 8 -2 1 -3 4 -1 2 1 -5 4 -----Example Output----- 6","solution":"def max_subarray_sum(arr): Function to find the sum of the contiguous subarray with the largest sum. max_sum = float(\'-inf\') current_sum = 0 for num in arr: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum"},{"question":"=====Function Definitions===== split(string, delimiter) This function returns a list of substrings obtained by splitting the given string at each occurrence of the specified delimiter. Sample Code: >>> print split(\\"apple,banana,cherry\\", \\",\\") [\'apple\', \'banana\', \'cherry\'] >>> >>> print split(\\"one:two:three:four\\", \\":\\") [\'one\', \'two\', \'three\', \'four\'] >>> >>> text = \\"alpha-beta-gamma\\" >>> print split(text, \\"-\\") [\'alpha\', \'beta\', \'gamma\'] =====Problem Statement===== An online code editor allows users to write code in multiple programming languages. Each line of code in the editor can contain multiple keywords separated by a specific delimiter. The editor needs a feature to count the total number of unique keywords across all lines of code. Your task is to write a function to achieve this. Unique keywords = Number of distinct keywords across all lines of code. ====Input Format===== The first line contains an integer N, the number of lines of code. The next N lines contain the code itself. Each line of code contains keywords separated by a space. =====Constraints===== 0<N≤100 Each line of code contains keywords consisting of lowercase English letters and spaces. =====Output Format===== Print the total number of unique keywords. =====Example===== Input: 3 hello world hello universe world code Output: 4","solution":"def count_unique_keywords(n, lines_of_code): Returns the number of unique keywords across all lines of code. Parameters: n (int): The number of lines of code. lines_of_code (list of str): The list containing each line of code. Returns: int: The number of unique keywords. unique_keywords = set() for line in lines_of_code: keywords = line.split() unique_keywords.update(keywords) return len(unique_keywords) # Example usage: # n = 3 # lines_of_code = [\\"hello world\\", \\"hello universe\\", \\"world code\\"] # print(count_unique_keywords(n, lines_of_code)) # Output: 4"},{"question":"Write a function called `most_frequent_product` that takes a list of transactions as input and returns the product that appears the most frequently across all transactions. Each transaction is represented as a list of product names. For example: ```python transactions = [ [\\"apple\\", \\"banana\\", \\"orange\\"], [\\"banana\\", \\"apple\\", \\"apple\\"], [\\"kiwi\\", \\"banana\\", \\"apple\\", \\"apple\\"], ] most_frequent_product(transactions) # Returns: \\"apple\\" ``` In case of a tie, return any one of the most frequent products. # Specifications: 1. You can assume all transactions will contain at least one product. 2. The product names are case-sensitive, i.e., \\"Apple\\" and \\"apple\\" are considered different products. 3. Aim for an efficient solution in terms of both time and space complexity. 4. The function should handle an empty list of transactions by returning `None`.","solution":"from collections import Counter def most_frequent_product(transactions): Returns the product that appears most frequently across all transactions. In case of a tie, return any one of the most frequent products. Args: transactions (List[List[str]]): A list of transactions where each transaction is a list of product names. Returns: str: The most frequent product. If the list of transactions is empty, return None. if not transactions: return None product_counter = Counter() for transaction in transactions: product_counter.update(transaction) most_common_product, _ = product_counter.most_common(1)[0] return most_common_product"},{"question":"# Task You are given a matrix representing a field where each cell contains an integer value representing the height of the terrain at that point. Your objective is to determine the maximum size of a uniform plateau. A uniform plateau is defined as a contiguous region of cells with the same height. # Example For `matrix = [[1, 2, 2], [3, 2, 2], [4, 4, 4]]`, the output should be 4. There is a plateau of height 2 with size 4 (cells `(0,1)`, `(0,2)`, `(1,1)`, and `(1,2)`). # Input/Output - [input] 2D integer array `matrix` A 2-dimensional array representing the field height matrix. Constraints: `1 ≤ matrix.length ≤ 50` `1 ≤ matrix[i].length ≤ 50` `1 ≤ matrix[i][j] ≤ 100` - `[output]` an integer The size of the largest uniform plateau.","solution":"def largest_plateau(matrix): if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(x, y, height): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if visited[cx][cy]: continue visited[cx][cy] = True size += 1 for nx, ny in ((cx+1, cy), (cx-1, cy), (cx, cy+1), (cx, cy-1)): if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and matrix[nx][ny] == height: stack.append((nx, ny)) return size max_size = 0 for i in range(rows): for j in range(cols): if not visited[i][j]: size = dfs(i, j, matrix[i][j]) max_size = max(max_size, size) return max_size"},{"question":"You are building a software system where users can create and manage their own tasks. Each task has a unique identifier, a description, a start time, an expected duration (in hours), and a priority level (represented as an integer). The system should allow users to check their current tasks and sort them based on given criteria. You need to implement functionality that sorts tasks based on user input. The user can choose to sort tasks by start time, expected duration, or priority level. Moreover, users can also specify whether they want the sorting to be in ascending or descending order. -----Input----- The first line contains a single integer n: the number of tasks (1 ≤ n ≤ 100). Each of the next n lines contains a task in the following format: \\"id description start_time expected_duration priority\\", where: - id is a unique string identifier of the task, - description is a string describing the task, - start_time is a string representing the task\'s start time in the format \\"HH:MM\\", - expected_duration is an integer representing the task\'s duration in hours, - priority is an integer representing the task\'s priority level. The last line contains two strings specifying the sorting criteria and the sorting order, respectively. The first string can be \\"time\\", \\"duration\\", or \\"priority\\", and the second string can be \\"asc\\" or \\"desc\\". -----Output----- Output the sorted list of tasks according to the criteria specified by the user, with each task on a new line in the original input format. The sorting should be stable, meaning if two tasks have the same value for the given sorting criterion, their original order should be maintained. -----Example----- Input 3 t1 \\"Fix bug\\" 09:00 2 3 t2 \\"Develop feature\\" 14:00 5 2 t3 \\"Write tests\\" 11:00 3 1 time desc Output t2 \\"Develop feature\\" 14:00 5 2 t3 \\"Write tests\\" 11:00 3 1 t1 \\"Fix bug\\" 09:00 2 3 Input 3 t1 \\"Fix bug\\" 09:00 2 3 t2 \\"Develop feature\\" 14:00 5 2 t3 \\"Write tests\\" 11:00 3 1 priority asc Output t3 \\"Write tests\\" 11:00 3 1 t2 \\"Develop feature\\" 14:00 5 2 t1 \\"Fix bug\\" 09:00 2 3 -----Note----- In the first example, the tasks are sorted by start time in descending order. In the second example, the tasks are sorted by priority in ascending order. * Assume all input times are valid and correctly formatted.","solution":"def sort_tasks(n, tasks, criteria, order): Sorts the tasks based on the given criteria and order. Args: n : int : Number of tasks tasks : List[Tuple] : List of tasks where each task is represented as a tuple criteria : str : The criteria to sort by (\\"time\\", \\"duration\\", or \\"priority\\") order : str : The order to sort by (\\"asc\\" or \\"desc\\") Returns: List[Tuple] : Sorted list of tasks # Define sorting key based on criteria if criteria == \\"time\\": key_func = lambda x: x[2] elif criteria == \\"duration\\": key_func = lambda x: x[3] elif criteria == \\"priority\\": key_func = lambda x: x[4] else: raise ValueError(\\"Invalid sorting criteria\\") # Sort based on the key function and order reverse = (order == \\"desc\\") sorted_tasks = sorted(tasks, key=key_func, reverse=reverse) return sorted_tasks"},{"question":"Background: Bob is working on a piece of software that manages user records. Each user record contains a unique identifier and a timestamp of when the record was last updated. The records are stored in a list, and Bob needs to implement a function that can efficiently determine which records have not been updated for a specific number of days. Bob wants to simplify this task by writing a function that takes a list of user records and a number `d` (representing the number of days) as input and returns a list of user identifiers that have not been updated in the last `d` days. ___ Task: Write a function that takes a list of user records (list of dictionaries) and an integer `d`. Each user record has an `id` (unique identifier) and a `last_updated` timestamp (ISO 8601 format: \'YYYY-MM-DD\'). Return a list of user ids that have not been updated in the last `d` days. **Note**: Assume today\'s date is given as an input in the same ISO 8601 format. Examples: ``` Example 1: user_records = [ {\\"id\\": 1, \\"last_updated\\": \\"2023-01-01\\"}, {\\"id\\": 2, \\"last_updated\\": \\"2023-03-15\\"}, {\\"id\\": 3, \\"last_updated\\": \\"2023-02-25\\"} ] d = 30 today = \\"2023-03-31\\" Output: [1, 3] Example 2: user_records = [ {\\"id\\": 1, \\"last_updated\\": \\"2023-01-01\\"}, {\\"id\\": 2, \\"last_updated\\": \\"2023-03-01\\"}, {\\"id\\": 3, \\"last_updated\\": \\"2023-03-25\\"} ] d = 10 today = \\"2023-03-31\\" Output: [1, 2] ```","solution":"from datetime import datetime, timedelta def not_updated_in_days(user_records, d, today): Returns a list of user ids that have not been updated in the last `d` days. user_records: list of dictionaries each containing \'id\' and \'last_updated\'. d: integer representing number of days. today: string representing today\'s date in ISO 8601 format (\'YYYY-MM-DD\'). today_date = datetime.strptime(today, \\"%Y-%m-%d\\") threshold_date = today_date - timedelta(days=d) inactive_users = [ record[\\"id\\"] for record in user_records if datetime.strptime(record[\\"last_updated\\"], \\"%Y-%m-%d\\") < threshold_date ] return inactive_users"},{"question":"You\'re given a string consisting of lowercase alphabets. Write a program to determine the frequency of each character and print it in sorted order by the character. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a string. -----Output----- For each test case, print the frequency of each character in the string, sorted by the character. Each character and its count should be displayed in a new line in the format \'character: count\'. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length of each string ≤ 1000 -----Example----- Input 2 hello world Output e: 1 h: 1 l: 2 o: 1 d: 1 l: 1 o: 1 r: 1 w: 1","solution":"def char_frequency(test_cases): Given a list of strings, calculate the frequency of each character in each string. results = [] for string in test_cases: # Create a dictionary to count frequencies frequency = {} for char in string: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 # Sort the dictionary by key (character) and prepare the result in sorted order sorted_frequency = dict(sorted(frequency.items())) results.append(sorted_frequency) return results def process_frequencies(test_cases): Given a list of frequency dictionaries, print the frequency of each character in required format. for frequencies in test_cases: for char, count in frequencies.items(): print(f\\"{char}: {count}\\")"},{"question":"Maxwell is working on a project that involves tracking energy levels in different sectors of a futuristic city grid. Each sector is represented as an integer, which indicates its energy level. Maxwell wants to find out the average energy level for each sector over several time snapshots and identify all the sectors that have energy levels greater than this calculated average. Your task is to help Maxwell analyze the energy levels for a given number of snapshots and determine which sectors exceed the average energy level within each snapshot. -----Input:----- - The first line contains an integer T (1 ≤ T ≤ 10), the number of snapshots. - For each snapshot: - The first line contains the integer N (1 ≤ N ≤ 100000), the number of sectors in the snapshot. - The second line contains N integers representing the energy levels of the sectors in that snapshot. -----Output:----- - For each snapshot, output the number of sectors that have energy levels greater than the average energy level during that snapshot. -----Constraints:----- - 0 leq energy level of each sector leq 10^9 -----Sample Input:----- 2 5 10 20 30 40 50 4 5 9 8 7 -----Sample Output:----- 2 2","solution":"def sectors_above_average(T, snapshots): results = [] for snapshot in snapshots: N, energy_levels = snapshot if N == 0: results.append(0) continue average = sum(energy_levels) / N count_above_average = sum(1 for energy in energy_levels if energy > average) results.append(count_above_average) return results"},{"question":"A grid of size N times M is said to be \\"balanced\\" if, after removing certain cells, each remaining cell is connected to exactly two other cells. Two cells are connected if they share an edge. You can only remove cells such that no two removed cells are adjacent (they cannot share an edge). Help Mr. Adams determine if a given grid can be transformed into a balanced grid by removing cells according to these rules. -----Input:----- - First line will contain an integer T, the number of test cases. - Each of the next T lines contains two integers N and M, representing the dimensions of the grid. -----Output:----- For each test case, output a single line \\"Balanced\\" if it is possible to transform the grid into a balanced grid, otherwise print \\"Not Balanced\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^9 - 1 leq M leq 10^9 -----Sample Input:----- 3 2 3 4 5 3 3 -----Sample Output:----- Balanced Not Balanced Balanced -----Explanation:----- - Test case 1: A 2x3 grid can be balanced by removing cells in a checkerboard pattern. - Test case 2: A 4x5 grid cannot be balanced according to the given rules. - Test case 3: A 3x3 grid can be balanced by removing the central cell, leaving a properly connected ring of cells.","solution":"def is_balanced(n, m): Check if a given grid of size n x m can be transformed into a balanced grid. return (n % 2 == 1) or (m % 2 == 1) def process_test_cases(test_cases): results = [] for n, m in test_cases: if is_balanced(n, m): results.append(\\"Balanced\\") else: results.append(\\"Not Balanced\\") return results"},{"question":"Create a function that takes a string containing a series of comma-separated integers and a target integer. The function should find and return a pair of integers from the string that sum up to the target. If no such pair exists, return an empty tuple. **Constraints**: - The input string will contain only valid integers, separated by commas. - The target integer will be a valid integer. - Each integer in the input string can be used only once to form the pair. - If there are multiple pairs that sum up to the target, any of them can be returned. - If no such pair exists, return an empty tuple. **Examples**: ```python find_pair(\\"1,2,3,4,5\\", 7) # Output: (2, 5) find_pair(\\"10,20,30,40,50\\", 90) # Output: (40, 50) find_pair(\\"1,2,3,4\\", 8) # Output: () find_pair(\\"5,1,2,4,3,6\\", 7) # Output: (1, 6) ``` **Note**: You can assume that the function will always receive a valid input string containing at least two integers.","solution":"def find_pair(numbers_str, target): Finds a pair of integers from the comma-separated input string that sum up to the target. :param numbers_str: A string of comma-separated integers. :param target: The target sum we want to achieve. :return: A tuple containing the pair of integers that sum to the target, or an empty tuple if no such pair exists. numbers = list(map(int, numbers_str.split(\',\'))) seen = set() for number in numbers: complement = target - number if complement in seen: return (complement, number) seen.add(number) return ()"},{"question":"Given a string s which consists of lowercase or uppercase letters, remove the minimum number of invalid parentheses to make the input string valid. Return all possible results. Note: The input string may contain letters other than the parentheses ( and ). Example 1: Input: \\"()())()\\" Output: [\\"()()()\\", \\"(())()\\"] Example 2: Input: \\"(a)())()\\" Output: [\\"(a)()()\\", \\"(a())()\\"] Example 3: Input: \\")(\\" Output: [\\"\\"] Explanation: - The first example can be made valid by removing the last or the fourth \'(\'. - The second example retains any sequences of letter characters and deals similarly with misplaced parentheses. - The third example has no valid way to balance parentheses, so the result is an empty string.","solution":"from collections import deque def remove_invalid_parentheses(s): Remove the minimum number of invalid parentheses to make the input string valid. Return all possible results. def is_valid(string): counter = 0 for char in string: if char == \'(\': counter += 1 elif char == \')\': counter -= 1 if counter < 0: return False return counter == 0 if not s: return [\\"\\"] visited = set() queue = deque([s]) found = False result = [] while queue: current = queue.popleft() if is_valid(current): result.append(current) found = True if found: continue for i in range(len(current)): if current[i].isalpha(): continue next_state = current[:i] + current[i+1:] if next_state not in visited: visited.add(next_state) queue.append(next_state) return result"},{"question":"You are given an array of n integers, where each integer can be either positive, negative, or zero. You can perform any number of operations. In each operation, you can choose any subsegment of the array (a contiguous subsequence) and add or subtract 1 to/from each element in that subsegment. Your task is to make all elements of the array non-negative using the minimal number of operations. -----Input----- The first line of input contains one integer t (1 le t le 10^4) — the number of test cases in the input. Then t test cases follow. The first line of a test case contains n (1 le n le 2cdot10^5) — the number of integers in the array. The second line contains the integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9). The sum of n for all test cases in the input does not exceed 2cdot10^5. -----Output----- For t test cases print the answers in the order of test cases in the input. The answer for each test case is the minimal number of operations needed to make all numbers in the array non-negative. -----Example----- Input 3 5 -1 2 -3 4 -5 4 -1 -2 -3 -4 3 1 1 1 Output 3 4 0 -----Note----- In the first test case of the example, the optimal sequence of operations can be as follows: - Choose the subsegment from index 1 to 1, add 1 to the subsegment; now a = [0, 2, -3, 4, -5] - Choose the subsegment from index 3 to 3, add 1 to the subsegment; now a = [0, 2, -2, 4, -5] - Choose the subsegment from index 3 to 3, add 1 to the subsegment; now a = [0, 2, -1, 4, -5] - Choose the subsegment from index 3 to 3, add 1 to the subsegment; now a = [0, 2, 0, 4, -5] - Choose the subsegment from index 5 to 5, add 1 to the subsegment; now a = [0, 2, 0, 4, -4] - Choose the subsegment from index 5 to 5, add 1 to the subsegment; now a = [0, 2, 0, 4, -3] - Choose the subsegment from index 5 to 5, add 1 to the subsegment; now a = [0, 2, 0, 4, -2] - Choose the subsegment from index 5 to 5, add 1 to the subsegment; now a = [0, 2, 0, 4, -1] - Choose the subsegment from index 5 to 5, add 1 to the subsegment; now a = [0, 2, 0, 4, 0] Thus, all negative numbers become non-negative after 3 operations.","solution":"def min_operations_to_non_negative(arr): Return the minimum number of operations to make all elements in the array non-negative. operations = 0 is_negative_segment = False for num in arr: if num < 0 and not is_negative_segment: operations += 1 is_negative_segment = True elif num >= 0: is_negative_segment = False return operations"},{"question":"You are given a string s consisting of lowercase English letters. You need to find the length of the longest subsequence of s such that there are no two consecutive characters in the subsequence that are the same. A subsequence is derived by deleting some or no characters of a string while maintaining the order of the remaining characters. Return the length of the longest possible subsequence with the given property. Example 1: Input: s = \\"aaabbbccc\\" Output: 3 Explanation: One possible subsequence is \\"abc\\". Example 2: Input: s = \\"abcd\\" Output: 4 Explanation: The whole string \\"abcd\\" is already a valid subsequence. Example 3: Input: s = \\"aabbcc\\" Output: 3 Explanation: One possible subsequence is \\"abc\\". Example 4: Input: s = \\"a\\" Output: 1 Explanation: The whole string \\"a\\" is already a valid subsequence. Example 5: Input: s = \\"abcabc\\" Output: 6 Explanation: The whole string \\"abcabc\\" is already a valid subsequence. Constraints: 1. 1 <= s.length <= 10^5 2. s consists of only lowercase English letters.","solution":"def longest_non_consecutive_subsequence(s): Returns the length of the longest subsequence of s such that no two consecutive characters are the same. if not s: return 0 longest_length = 1 for i in range(1, len(s)): if s[i] != s[i - 1]: longest_length += 1 return longest_length"},{"question":"Write a function that takes a list of strings and returns a single string which is the concatenation of all the strings in the list, separated by commas. If the input list is empty, the function should return an empty string. The input list will contain only valid strings with no null values.","solution":"def concatenate_strings(strings_list): Concatenates a list of strings to a single string separated by commas. Parameters: strings_list (list): A list of strings to concatenate. Returns: str: A single string containing all list elements separated by commas. return \',\'.join(strings_list)"},{"question":"Task You have a list of integers. Determine the length of the longest consecutive subsequence in the list. A consecutive subsequence is a series of numbers in the list which can be rearranged to appear in consecutive order. # Example For `lst = [100, 4, 200, 1, 3, 2]`, the output should be `4`. The longest consecutive subsequence is `[1, 2, 3, 4]`, which has a length of 4. # Input/Output - `[input]` list of integers `lst` Constraints: `0 ≤ len(lst) ≤ 1000`, `0 ≤ lst[i] ≤ 10^9`. - `[output]` an integer","solution":"def longest_consecutive_subsequence(lst): if not lst: return 0 num_set = set(lst) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"# Task **_Given_** a **_list of integers_**, *return a **_list of all unique pairs_** of integers whose product yields an even number.* ___ # Notes: * Each integer pair should be **distinct** and the order of pairs should not matter. * A product is even if at least one of the multiplicand is an even number. * Each pair should be sorted in ascending order within the pair, and the list should be sorted in ascending order of pairs. ___ # Input >> Output Examples ``` uniqueEvenPairs ({1, 3, 2}) ==> return ([(1, 2), (2, 3)]) ``` Explanation: The pairs (1, 2) and (2, 3) both produce an even product (2 and 6). ___ ``` uniqueEvenPairs({4, 5, 6, 7}) ==> return ([(4, 5), (4, 6), (4, 7), (5, 6), (6, 7)]) ``` Explanation: The pairs (4, 5), (4, 6), (4, 7), (5, 6), and (6, 7) are unique and give even products (20, 24, 28, 30, and 42 respectively). ___ ``` uniqueEvenPairs({2, 2, 2}) ==> return [(2, 2)] ``` Explanation: Although 2 is repeated, the only unique pair is (2, 2) which gives an even product (4). ___","solution":"def unique_even_pairs(int_list): Given a list of integers, return a list of all unique pairs of integers whose product yields an even number. Each pair should be sorted in ascending order within the pair, and the list should be sorted in ascending order of pairs. result = set() n = len(int_list) for i in range(n): for j in range(i + 1, n): if int_list[i] * int_list[j] % 2 == 0: result.add(tuple(sorted((int_list[i], int_list[j])))) return sorted(result)"},{"question":"=====Function Descriptions===== Flatten To flatten an array means to collapse it into one dimension, regardless of its original shape. This operation is useful when you need to process all elements of a multi-dimensional array uniformly. During the flattening process, the elements are ordered as they appear in the original array, but they are stored sequentially in a row. This can be achieved with the `flatten` method in NumPy. Example: import numpy array = numpy.array([[1,2,3],[4,5,6]]) print numpy.flatten(array) #Output [1 2 3 4 5 6] =====Problem Statement===== You are given an integer array of size NxM (N rows and M columns). Your task is to flatten the array into a 1D array. =====Input Format===== The first line contains two space-separated integers N and M. The next N lines contain M space-separated integers each, representing the elements of each row. =====Output Format===== Print the flattened array as a single line of space-separated integers. =====Sample Input===== 2 3 1 2 3 4 5 6 =====Sample Output===== 1 2 3 4 5 6","solution":"import numpy as np def flatten_array(n, m, array_2d): Flattens a 2D array into a 1D array. Args: n - Number of rows m - Number of columns array_2d - 2D list of integers (list of lists format) Returns: A list of integers representing the flattened array. array = np.array(array_2d) return array.flatten().tolist()"},{"question":"A scientist has n different chemicals and m different containers. Each chemical has a unique name and some containers can hold specific chemicals while others cannot due to compatibility issues. The scientist wants to store each chemical in exactly one container while maximizing the total compatibility value of the arrangement. The compatibility value between a chemical and a container is given by an integer matrix. Formally, you are given an n x m matrix C where C[i][j] represents the compatibility value between the i-th chemical and the j-th container. You should determine an assignment of chemicals to containers such that each chemical is placed in one container and the sum of the compatibility values is maximized. No container should hold more than one chemical. For example, if there are 3 chemicals and 3 containers with compatibility matrix: [ C = begin{bmatrix} 3 & 2 & 1 5 & 4 & 3 1 & 2 & 3 end{bmatrix} ] Then the optimal assignment would be: chemical 1 to container 2, chemical 2 to container 3, and chemical 3 to container 1, giving a total compatibility value of 2 + 3 + 1 = 6. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 le t le 10) — the number of test cases. Each test case consists of: - A line containing two integers n and m (1 le n, m le 100). - n lines each containing m integers describing the compatibility matrix C where each element C[i][j] (0 le C[i][j] le 1000) represents the compatibility value between the i-th chemical and the j-th container. -----Output----- For each test case, print a line containing n integers representing the index of the container assigned to each chemical in a way that maximizes the total compatibility value. If there are multiple optimal assignments, you may print any of them. -----Example----- Input 2 3 3 3 2 1 5 4 3 1 2 3 2 2 10 50 60 20 Output 2 3 1 2 1 -----Note----- In the first test case, the optimal assignment could be: - Chemical 1 to container 2, Chemical 2 to container 3, and Chemical 3 to container 1 This yields a compatibility value sum of 2 + 3 + 1 = 6. Another valid optimal assignment could be: - Chemical 1 to container 1, Chemical 2 to container 2, and Chemical 3 to container 3 This also yields 3 + 4 + 3 = 10. Both are valid outputs. In the second test case, the optimal assignment is: - Chemical 1 to container 1 and Chemical 2 to container 2 yielding the maximum compatibility sum of 50 + 60 = 110.","solution":"from itertools import permutations def maximize_compatibility(n, m, C): This function finds an optimal assignment of chemicals to containers that maximizes the total compatibility value. max_value = 0 best_assignment = [] for perm in permutations(range(m), n): current_value = sum(C[i][perm[i]] for i in range(n)) if current_value > max_value: max_value = current_value best_assignment = perm return [x + 1 for x in best_assignment] # +1 to convert zero-indexed container to one-indexed def solve(test_cases): results = [] for test in test_cases: n, m, C = test result = maximize_compatibility(n, m, C) results.append(\' \'.join(map(str, result))) return results def main(input_data): input_lines = input_data.strip().split(\\"n\\") t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[index].split()) index += 1 C = [] for i in range(n): C.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append((n, m, C)) results = solve(test_cases) return \'n\'.join(results)"},{"question":"Given a sequence of nested parentheses, determine the maximum depth of the nesting. The depth of a position in a balanced parentheses string is defined by the number of parenthesis pairs containing that position, such as in \\"(())\\", each of the inner parentheses has a depth of 2. For example: ```python max_nesting_depth(\'(1+(2*3)+((8)/4))+1\') # 3 max_nesting_depth(\'(1)+((2))+(((3)))\') # 3 max_nesting_depth(\'1+(2*3)/(2-1)\') # 1 max_nesting_depth(\'1\') # 0 ``` ```if:nasm max_nesting_depth: ```","solution":"def max_nesting_depth(s): Returns the maximum depth of nested parentheses in the input string s. max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \')\': current_depth -= 1 return max_depth"},{"question":"Write a function called `count_vowels_consonants` that takes a string as an argument and returns a formatted string that specifies the number of vowels and consonants in the input string. For this task, vowels are considered to be \'a\', \'e\', \'i\', \'o\', \'u\' (both uppercase and lowercase), and consonants are all other alphabetical characters. Assume the input string contains only alphabetical characters and/or spaces. ```python >>> count_vowels_consonants(\'Hello World\') \'The string \\"Hello World\\" contains 3 vowels and 7 consonants.\' >>> count_vowels_consonants(\'Python Programming\') \'The string \\"Python Programming\\" contains 4 vowels and 13 consonants.\' ```","solution":"def count_vowels_consonants(s): Returns a formatted string specifying the number of vowels and consonants in the input string. vowels = set(\\"aeiouAEIOU\\") vowel_count = sum(1 for char in s if char in vowels) consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels) return f\'The string \\"{s}\\" contains {vowel_count} vowels and {consonant_count} consonants.\'"},{"question":"A singer is preparing for a live concert and needs to arrange a setlist. The singer has `n` songs, each with a particular duration in minutes. The setlist can have a maximum duration of `t` minutes. The singer wants to maximize the number of songs performed, but the total duration must not exceed `t` minutes. Write a function `max_songs(durations, t)` that takes in a list of integers `durations` representing the duration of each song and an integer `t` representing the maximum allowed duration of the setlist. The function should return an integer representing the maximum number of songs that can be included in the setlist without exceeding the total duration `t`. # Example: `max_songs([4, 3, 2, 5], 10)` should return `3` (The best combination is `[4, 3, 2]` with total duration `9`) `max_songs([1, 2, 3, 4], 5)` should return `2` (The best combination is `[2, 3]` with total duration `5`) # Notes: - All durations are positive integers. - It is not necessary for all songs to be unique. - 1 <= n <= 50 - 1 <= durations[i] <= 100 - 1 <= t <= 500","solution":"def max_songs(durations, t): Returns the maximum number of songs that can be included in the setlist without exceeding the total duration t. durations.sort() total_duration = 0 song_count = 0 for duration in durations: if total_duration + duration <= t: total_duration += duration song_count += 1 else: break return song_count"},{"question":"Given an integer array `arr` and a target integer `k`, write a function that determines if there are two distinct indices `i` and `j` in the array such that `arr[i] + arr[j]` is equal to `k`. The function should return a boolean value - `true` if such indices exist, and `false` otherwise. **Function Signature** ```python def has_pair_with_sum(arr: List[int], k: int) -> bool: ``` # Example **Input** ```python arr = [10, 15, 3, 7] k = 17 ``` **Output** ```python True # (because arr[0] + arr[3] = 10 + 7 = 17) ``` # Constraints * The function should handle arrays of length 0 to 10^5. * Each element in the array can be within the range of -10^5 to 10^5. * Aim for an optimal solution with regards to time complexity.","solution":"from typing import List def has_pair_with_sum(arr: List[int], k: int) -> bool: Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] == k. :param arr: List of integers. :param k: Target sum integer. :return: True if such a pair exists, False otherwise. seen = set() for number in arr: if k - number in seen: return True seen.add(number) return False"},{"question":"Given a grid represented as an `m x n` matrix filled with non-negative integers, find the minimum sum of a path from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. You must implement a function `minPathSum(grid: List[List[int]]) -> int` that takes in a matrix `grid` and returns an integer representing the minimum path sum. Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] minPathSum(grid) # should return 7, since the path 1→3→1→1→1 involves the minimum sum. Explanation: 1 → 3 → 1 ↓ 1 → 5 → 1 ↓ 4 2 → 1 ``` Constraints: - `m` == grid.length - `n` == grid[i].length - `1 <= m, n <= 200` - `0 <= grid[i][j] <= 100`","solution":"from typing import List def minPathSum(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"Calculate the nth Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n - 1) + F(n - 2) for n > 1 Write a function that takes a non-negative integer n as input and returns the nth Fibonacci number. Example: Input: 6 Output: 8 Explanation: The first seven Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8; hence, F(6) is 8.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: A non-negative integer. :return: The nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"An array of integers is called `strictly increasing` if for every consecutive pair of elements, the second element is strictly greater than the first element. Write a function named `isStrictlyIncreasing` that returns `true` if its input is a strictly increasing array, and `false` otherwise. Note that an array with fewer than two elements is considered to be strictly increasing.","solution":"def isStrictlyIncreasing(arr): Returns True if the input array is strictly increasing, and False otherwise. An array with fewer than two elements is considered to be strictly increasing. Parameters: arr (list of int): The input array of integers. Returns: bool: True if the array is strictly increasing, False otherwise. if len(arr) < 2: return True for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: return False return True"},{"question":"Create a function `max_digit_product` that takes an integer `n` and returns the maximum product of the digits of any number that can be made with `n` digits. # Example: ```python max_digit_product(3) == 729 max_digit_product(2) == 81 ``` **Note:** The function should work for any positive integer `n`. If `n` is less than 1, return `0`.","solution":"def max_digit_product(n): Returns the maximum product of the digits of any number that can be made with n digits. if n < 1: return 0 # The maximum product is obtained by using the digit \'9\' as many times as possible. max_product = 9 ** n return max_product"},{"question":"Given a list of integers, find out the index of the first non-repeating element. A non-repeating element is one that appears exactly once in the list. If there is no such element, return -1. Example: Input: nums = [2, 3, 4, 2, 3, 5, 4] Output: 5 Explanation: The list is: [2, 3, 4, 2, 3, 5, 4] The first non-repeating element is 5 which is at index 5. Notes: The length of the list is between 1 and 10000. The elements of the list are between -10000 and 10000.","solution":"def first_non_repeating_element_index(nums): Returns the index of the first non-repeating element in a list of integers. If there is no such element, returns -1. element_count = {} for num in nums: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 for index, num in enumerate(nums): if element_count[num] == 1: return index return -1"},{"question":"Write a function `isBalancedBST` that determines if a given binary search tree (BST) is balanced. A balanced binary search tree is defined as a tree in which the depth of the two subtrees of every node never differ by more than 1. The binary search tree will be provided as a nested list where each sublist represents a node in the format [value, left_subtree, right_subtree]. `None` represents the absence of a subtree. For example, the following tree: ``` 5 / 3 8 / 1 4 9 ``` Is represented as: ``` [5, [3, [1, None, None], [4, None, None]], [8, None, [9, None, None]]] ``` The tree below: ``` 5 / 3 8 / 1 ``` is also balanced and would be represented as: ``` [5, [3, [1, None, None], None], [8, None, None]] ``` The tree below: ``` 5 / 3 8 / 1 2 ``` is not balanced because the left subtree of the root has a depth of 3 while the right subtree has a depth of 1. It would be represented as: ``` [5, [3, [1, None, [2, None, None]], None], [8, None, None]] ``` Write the function `isBalancedBST` that takes a nested list as described and returns `True` if the tree is balanced according to the definition, and `False` otherwise. ```python def isBalancedBST(tree): def check_height(node): if not node: return 0 left_height = check_height(node[1]) right_height = check_height(node[2]) if left_height == -1 or right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(tree) != -1 ```","solution":"def isBalancedBST(tree): def check_height(node): if not node: return 0 left_height = check_height(node[1]) right_height = check_height(node[2]) if left_height == -1 or right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(tree) != -1"},{"question":"You are given an array P of N positive integers and an integer K such that the sum of any K consecutive elements in the array should be less than a given integer X. You need to determine if it\'s possible to remove exactly one element from the array and rearrange the remaining elements such that the sum of any K consecutive elements is always less than X. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - The first line of each test case contains three integers N, K, and X. - The second line of each test case contains N space-separated integers, the elements of P. -----Output:----- - For each test case, output \\"YES\\" if it\'s possible to remove one element and rearrange the remaining elements to satisfy the given condition, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10^3 - 2 leq K < N leq 10^5 - 1 leq P_i leq 10^9 - 1 < X leq 10^{10} -----Sample Input:----- 2 5 3 15 1 2 3 4 5 4 2 5 6 5 4 3 -----Sample Output:----- YES NO -----Explanation:----- In the first test case, if we remove the element 5 from the array P, we can rearrange the remaining elements as [1, 2, 3, 4]. The sums of any K=3 consecutive elements are [1+2+3 = 6, 2+3+4 = 9], which are both less than X=15. Hence, the output is \\"YES\\". In the second test case, there is no way to remove one element and rearrange the remaining elements such that the sum of any K=2 consecutive elements is less than X=5. Hence, the output is \\"NO\\".","solution":"def is_possible_to_rearrange(N, K, X, P): Check if it\'s possible to remove exactly one element from the array P and rearrange the remaining elements such that the sum of any K consecutive elements is always less than X. def can_remain_valid(removed_index): modified_P = P[:removed_index] + P[removed_index+1:] for i in range(len(modified_P) - K + 1): if sum(modified_P[i:i+K]) >= X: return False return True for i in range(N): if can_remain_valid(i): return \\"YES\\" return \\"NO\\" def solution(T, test_cases): results = [] for test_case in test_cases: N, K, X, P = test_case results.append(is_possible_to_rearrange(N, K, X, P)) return results"},{"question":"You\'re given a string `s` consisting of lowercase English letters. You need to write a function `longest_substring_without_repeating_chars(s)` that finds the length of the longest substring without repeating characters. For example: ```python >>>longest_substring_without_repeating_chars(\\"abcabcbb\\") 3 >>>longest_substring_without_repeating_chars(\\"bbbbb\\") 1 >>>longest_substring_without_repeating_chars(\\"pwwkew\\") 3 >>>longest_substring_without_repeating_chars(\\"\\") 0 ``` The input string will only contain ASCII characters.","solution":"def longest_substring_without_repeating_chars(s): Returns the length of the longest substring without repeating characters in the given string. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Write a program that will take two lists of integers, `x` and `y`. Each list will consist of 3 positive integers. The program should first calculate the sum of all integers in each list. Then, it should return a boolean indicating whether the sum of the integers in `x` is greater than the sum of the integers in `y`. For example, if the parameters passed are `([1, 2, 3], [3, 3, 1])`, the sum of `x` is 6 and the sum of `y` is 7. Therefore, the function should return `False`. Your function will be tested with pre-made examples as well as random ones. **If you can, try writing it in one line of code.**","solution":"def is_sum_greater(x, y): Returns True if the sum of the integers in list x is greater than the sum of integers in list y, False otherwise. return sum(x) > sum(y)"},{"question":"Murray is constructing a text editor that should automatically convert plain text into markdown-styled bullet lists. Given a string where each line represents a separate item, write a function that converts it into a markdown bullet list. Ensure each new Markdown bullet list item starts with a hyphen followed by a space. Empty lines in the input string should be preserved in the output string, but they should not turn into bullet points. Examples: ```python \\"Item onenItem twonItem three\\" -> \\"- Item onen- Item twon- Item three\\" \\"Item onennItem threenItem four\\" -> \\"- Item onenn- Item threen- Item four\\" \\"First itemnSecond itemnnnFifth item\\" -> \\"- First itemn- Second itemnnn- Fifth item\\" ``` **Note:** - Consecutive newline characters should be retained to preserve multiple line breaks. - An empty input string should return an empty string. ```python \\"\\" -> \\"\\" ``` Happy coding!","solution":"def convert_to_markdown(text): Converts a given text into markdown-styled bullet lists. Parameters: text (str): The input text with each line representing a separate item. Returns: str: The text converted into markdown-styled bullet lists with hyphens. if text == \\"\\": return \\"\\" lines = text.split(\'n\') result = [] for line in lines: if line.strip(): result.append(f\\"- {line}\\") else: result.append(\\"\\") return \'n\'.join(result)"},{"question":"Write a function called `merge_lists` that takes in two lists of integers `list1` and `list2`. The function should return a new list that contains all the elements of `list1` and `list2`, but with the elements in sorted order. The sorting should be done without using built-in sort functions, and you should not use libraries that provide sorting functionality. The resulting list should be sorted in ascending order. Here is the function signature: ```python def merge_lists(list1: List[int], list2: List[int]) -> List[int]: pass ``` **Example:** ```python list1 = [3, 1, 4] list2 = [2, 5, 6] print(merge_lists(list1, list2)) # Output: [1, 2, 3, 4, 5, 6] ``` **Constraints:** - The input lists `list1` and `list2` can be of any length, including zero. - The function should handle edge cases, such as one or both input lists being empty.","solution":"from typing import List def merge_lists(list1: List[int], list2: List[int]) -> List[int]: Merges two lists of integers and returns them in a sorted order without using built-in sort functions. :param list1: List of integers. :param list2: List of integers. :return: A list containing all elements from list1 and list2, sorted in ascending order. def merge_two_sorted_lists(l1, l2): result = [] i = j = 0 while i < len(l1) and j < len(l2): if l1[i] < l2[j]: result.append(l1[i]) i += 1 else: result.append(l2[j]) j += 1 # Append the rest of the elements from l1 or l2 while i < len(l1): result.append(l1[i]) i += 1 while j < len(l2): result.append(l2[j]) j += 1 return result # Sort both lists using merge sort (recursively divide and merge) def merge_sort(lst): if len(lst) <= 1: return lst mid = len(lst) // 2 left = merge_sort(lst[:mid]) right = merge_sort(lst[mid:]) return merge_two_sorted_lists(left, right) # Merge and sort list1 and list2 return merge_sort(list1 + list2)"},{"question":"Create a function eligibleForBonus, which determines if an employee is eligible for a year-end bonus based on two parameters: the employee\'s attendance rate and overall performance score. This function should take two arguments: attendanceRate - a percentage representing the employee\'s attendance rate (from 0 to 100); performanceScore - a score representing the employee\'s overall performance (from 0 to 100); This function should return a boolean (true or false). An employee is eligible for a bonus if: - Their attendance rate is at least 90% and their performance score is at least 80, or - Their attendance rate is at least 75% and their performance score is at least 90. Examples: ~~~if-not:nasm ```python eligible_for_bonus(95, 85) # True eligible_for_bonus(80, 95) # True eligible_for_bonus(85, 75) # False eligible_for_bonus(70, 100) # False eligible_for_bonus(100, 80) # True ``` ~~~ *Use Comparison and Logical Operators.","solution":"def eligible_for_bonus(attendance_rate, performance_score): Determines if an employee is eligible for a year-end bonus based on their attendance rate and performance score. Args: attendance_rate (float): The employee\'s attendance rate as a percentage. performance_score (float): The employee\'s overall performance score as a percentage. Returns: bool: True if the employee is eligible for a bonus, False otherwise. return (attendance_rate >= 90 and performance_score >= 80) or (attendance_rate >= 75 and performance_score >= 90)"},{"question":"A company has an internal system where every user has a unique identification code that is a string consisting of lowercase English letters. The system administrators frequently need to verify whether two given user identification codes can be transformed into one another through a series of operations. The allowed operations are: 1. Swapping any two adjacent characters in the string. 2. Replacing any character with another lowercase English letter. Write a function that determines whether two given identification codes can be transformed into one another using any sequence of these operations. The function should return \\"YES\\" if the codes can be transformed and \\"NO\\" otherwise. -----Input----- The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next 2t lines contains two strings a and b (1 ≤ |a|, |b| ≤ 100), where |a| and |b| denote the lengths of the two strings. -----Output----- For each test case, output \\"YES\\" if the identification codes can be transformed into one another, and \\"NO\\" otherwise. -----Examples----- Input 3 abc bca abcd abdc xyz yxz Output YES YES YES Note: For the first test case, \\"abc\\" can be transformed into \\"bca\\" by swapping \'a\' with \'b\' and then \'a\' with \'c\'. For the second test case, \\"abcd\\" can be transformed into \\"abdc\\" by swapping \'c\' and \'d\'. For the third test case, \\"xyz\\" can be transformed into \\"yxz\\" by swapping \'x\' and \'y\'.","solution":"def can_transform(a, b): Determines if string a can be transformed into string b using the allowed operations. # Transformation is possible if both strings have the same sorted characters return \\"YES\\" if sorted(a) == sorted(b) else \\"NO\\" def process_test_cases(t, test_cases): Processes test cases and returns transformation results. results = [] for i in range(0, 2 * t, 2): a = test_cases[i] b = test_cases[i + 1] result = can_transform(a, b) results.append(result) return results"},{"question":"Deepak is an avid gardener and has a collection of different plants that he waters regularly. Each type of plant requires a specific amount of water every day. Every day, he uses a list to track how much water each plant gets. Deepak wants to ensure that over a month, each plant gets the exact total amount of water it needs. You need to determine if at the end of the month, each plant has received the necessary total amount of water. -----Constraints----- - 1 <= N <= 10 (types of plants) - 1 <= M <= 30 (number of days in the month) - 1 <= Wi <= 100 (amount of water required by the i-th plant over the month) - 0 <= Wd <= 10 (amount of water given to the plants on any particular day) -----Input:----- - First line has two integers N and M, indicating number of types of plants and number of days in the month. - Second line contains N integers representing the amount of water required by each type of plant over the month. - Next M lines contain N integers each, representing the amount of water given to each plant on that day. -----Output:----- - Print YES if each plant has received the required amount of water by the end of the month, otherwise print NO. -----Sample Input:----- 3 4 50 30 40 10 10 10 10 5 10 20 5 10 10 10 10 -----Sample Output:----- YES -----Explanation:----- Number of plants (N) is 3 and number of days (M) is 4. Plant 1 needs 50 units, Plant 2 needs 30 units, and Plant 3 needs 40 units of water over the month. The water given day by day is: - Day 1: 10, 10, 10 - Day 2: 10, 5, 10 - Day 3: 20, 5, 10 - Day 4: 10, 10, 10 Total water given to plants at the end of month is: - Plant 1: 10+10+20+10 = 50 (needed 50) - Plant 2: 10+5+5+10 = 30 (needed 30) - Plant 3: 10+10+10+10 = 40 (needed 40) Hence, the output is YES.","solution":"def check_water_distribution(N, M, water_requirements, daily_water_distribution): Checks if each plant has received the required amount of water by the end of the month. Args: N : int : number of types of plants. M : int : number of days in the month. water_requirements : list of int : amount of water required by each type of plant over the month. daily_water_distribution : list of list of int : water given to each plant on each day. Returns: str : \\"YES\\" if each plant has received the required amount of water, otherwise \\"NO\\". total_water_given = [0] * N for day in daily_water_distribution: for i in range(N): total_water_given[i] += day[i] for i in range(N): if total_water_given[i] != water_requirements[i]: return \\"NO\\" return \\"YES\\""},{"question":"Implement the `is_valid_IP` function that takes a string and returns `True` if it\'s a valid IPv4 address, and `False` otherwise. Notes: - For an IP to be valid, it must be in the format of four decimal numbers separated by periods (`.`), each ranging from 0 to 255. - Leading zeros are not allowed (e.g., `192.168.01.1` is invalid). Example: ``` is_valid_IP(\\"192.168.0.1\\") -> True is_valid_IP(\\"0.0.0.0\\") -> True is_valid_IP(\\"255.255.255.255\\") -> True is_valid_IP(\\"192.168.0.256\\") -> False is_valid_IP(\\"192.168.0\\") -> False is_valid_IP(\\"192.168.0.01\\") -> False ```","solution":"def is_valid_IP(ip): Returns True if ip is a valid IPv4 address, and False otherwise. parts = ip.split(\'.\') # There must be exactly four parts if len(parts) != 4: return False for part in parts: # Each part must only be digits if not part.isdigit(): return False # Convert part to integer and check range num = int(part) if num < 0 or num > 255: return False # Leading zeros are not allowed if part != str(num): return False return True"},{"question":"You are given a grid of size MxN, represented as a 2D list of integers, where each cell contains a non-negative integer representing the cost of stepping into that cell. You are currently standing at the top-left corner of the grid (cell (0, 0)), and you want to travel to the bottom-right corner of the grid (cell (M-1, N-1)). You can only move one step to the right (to (i, j+1)) or one step down (to (i+1, j)) at a time. You need to find the minimal path sum from the top-left to the bottom-right corner. Write a function `min_path_sum(grid: List[List[int]]) -> int` that takes the grid as input and returns the minimum path sum. -----Input:----- - A single argument, `grid`, which is a 2D list of non-negative integers with dimensions MxN (1 ≤ M, N ≤ 1000 and 0 ≤ grid[i][j] ≤ 1000). -----Output:----- - The function should return a single integer, the minimal path sum. -----Example:----- Input: grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] Output: 7 -----Explanation:----- The path that yields the minimal sum is: 1 -> 3 -> 1 -> 1 -> 1, which gives a total sum of 7. -----Constraints:----- - The dimensions of the grid are such that 1 ≤ M, N ≤ 1000. - The values in the grid cells are non-negative integers (0 ≤ grid[i][j] ≤ 1000).","solution":"from typing import List def min_path_sum(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 M = len(grid) N = len(grid[0]) # Initialize the dp table with the same dimensions as grid dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize the first column of the dp table for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] # Initialize the first row of the dp table for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[M-1][N-1]"},{"question":"# Task Given an array of integers, return a new array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. # Example For `arr = [1, 2, 3, 4]` The result should be `[24, 12, 8, 6]`. # Input/Output - `[input]` array of integers `arr` - `[output]` an array of integers","solution":"def product_except_self(arr): Returns a new array where each element at index i is the product of all the numbers in the original array except the one at i. if not arr: return [] length = len(arr) result = [1] * length # Calculate left products left_product = 1 for i in range(length): result[i] = left_product left_product *= arr[i] # Calculate right products and combine with left products right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= arr[i] return result"},{"question":"----- Determine the Maximum Frequency Character You are given a string \\"S\\" consisting of lowercase English letters. Your task is to find the character that appears the most frequently in the string. If there are multiple characters with the same maximum frequency, return the lexicographically smallest character among them. -----Input:----- - The first line of the input contains an integer T, the number of test cases. - The next T lines each contain a single string, S. -----Output:----- - For each test case, output the character that appears the most frequently in the string. If there is a tie, return the lexicographically smallest character. -----Constraints:----- - 1 leq T leq 10^2 - 1 leq |S| leq 10^3 - S consists of lowercase English letters. -----Sample Input:----- 3 banana apple aabbcc -----Sample Output:----- a p a -----Explanation:----- - In the first string \\"banana\\", the character \'a\' appears 3 times, which is more than any other character. - In the second string \\"apple\\", the character \'p\' appears 2 times, which is more than any other character. - In the third string \\"aabbcc\\", the characters \'a\', \'b\', and \'c\' all appear 2 times. Among them, \'a\' is the lexicographically smallest.","solution":"def max_frequency_char(S): Returns the character that appears the most frequently in the string S. If there are multiple characters with the same maximum frequency, returns the lexicographically smallest one. from collections import Counter # Count the frequency of each character in the string freq = Counter(S) # Find the maximum frequency max_freq = max(freq.values()) # Filter characters with the maximum frequency and return the lexicographically smallest one max_freq_chars = [char for char in freq if freq[char] == max_freq] return min(max_freq_chars) def process_test_cases(T, test_cases): Processes multiple test cases and returns the results for each test case. results = [] for case in test_cases: results.append(max_frequency_char(case)) return results"},{"question":"Background - Fibonacci Sequence Variations The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For this question, you will be dealing with a variation of the Fibonacci sequence known as the \\"custom Fibonacci sequence\\". In this custom sequence, instead of starting with `0` and `1`, you will be given two starting integers, `a` and `b`. Your task is to generate the first `n` numbers of this custom Fibonacci sequence. Your task: **Given three integers, `a`, `b`, and `n`, generate an array of the first `n` numbers in the custom Fibonacci sequence that starts with `a` and `b`.** Example: ```python custom_fibonacci(1, 2, 5) == [1, 2, 3, 5, 8] ``` Explanation: Starting with `1` and `2`, the next numbers in the sequence are determined by summing the two previous numbers: ``` 1 (a) 2 (b) 1 + 2 = 3 2 + 3 = 5 3 + 5 = 8 ``` Thus, the first 5 numbers in this custom Fibonacci sequence are `[1, 2, 3, 5, 8]`. Note: 1. The integers `a` and `b` can be any positive or negative integers, or zero. 2. You may assume `n` is always a positive integer greater than or equal to 2.","solution":"def custom_fibonacci(a, b, n): Generate the first n numbers in a custom Fibonacci sequence starting with a and b. Parameters: a (int): The first number in the sequence. b (int): The second number in the sequence. n (int): The number of elements to generate in the sequence. Returns: list: The first n numbers in the custom Fibonacci sequence. if n == 1: return [a] elif n == 2: return [a, b] fib_sequence = [a, b] for _ in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) return fib_sequence"},{"question":"You are given a string consisting of multiple words separated by spaces. Your task is to write a function that reverses the order of the words in the string while maintaining the order of the characters within each word. You should not use any built-in functions that directly perform the desired operation. Implement the function `reverse_words(s: str) -> str` where: - `s` is a string containing words separated by spaces. # Examples 1. `reverse_words(\\"hello world\\")` should return `\\"world hello\\"` 2. `reverse_words(\\"The quick brown fox\\")` should return `\\"fox brown quick The\\"` 3. `reverse_words(\\"a b c d\\")` should return `\\"d c b a\\"` # Constraints - The input string `s` will contain only printable ASCII characters and spaces. - There will be no leading or trailing spaces, and each word will be separated by exactly one space. - The length of the input string will not exceed 10^4.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in the input string s. Parameters: s (str): The input string containing words separated by spaces. Returns: str: The input string with the order of words reversed. words = [] word_start = 0 for i in range(len(s)): if s[i] == \' \': words.append(s[word_start:i]) word_start = i + 1 words.append(s[word_start:]) # Append the last word return \' \'.join(reversed(words))"},{"question":"Given an integer n representing the positions of houses along a street and an array of integers heaters representing the positions of heaters along the street, find the minimum radius of a heater such that all houses can be covered by at least one heater. You can assume all houses have a unique position and that it\'s possible to place heaters on top of houses. Example 1: Input: n = 5, heaters = [2] Output: 3 Explanation: Since there is only one heater at position 2, the radius must be at least 3 to cover all houses from position 1 to position 5. Example 2: Input: n = 5, heaters = [1, 4] Output: 1 Explanation: With heaters at positions 1 and 4, the minimum radius required to cover all houses is 1. Example 3: Input: n = 7, heaters = [2, 4, 6] Output: 1 Explanation: With heaters at positions 2, 4, and 6, the minimum radius required to cover all houses is 1. Example 4: Input: n = 3, heaters = [1] Output: 2 Explanation: Since there is only one heater at position 1, the radius must be at least 2 to cover all houses from position 1 to position 3. Constraints: 1 <= n <= 10^9 1 <= heaters.length <= 10^6 1 <= heaters[i] <= n All the values of heaters are unique.","solution":"def find_min_radius(n, heaters): heaters.sort() max_radius = 0 # Coverage for houses before the first heater if heaters[0] > 1: max_radius = heaters[0] - 1 # Coverage for houses after the last heater if heaters[-1] < n: max_radius = max(max_radius, n - heaters[-1]) # Coverage for houses between heaters for i in range(1, len(heaters)): max_radius = max(max_radius, (heaters[i] - heaters[i - 1]) // 2) return max_radius"},{"question":"You are given a square grid of characters, where each character is either \'#\' representing a wall, or \'.\' representing an open space. You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. You can move up, down, left, or right, but you cannot move through walls. Write a function to determine if there is a path from the top-left corner to the bottom-right corner. Function Signature: ```python def is_path_exists(grid: List[str]) -> bool: # your code here ``` # Input - `grid`: A list of strings, where each string represents a row of the grid and each character in the string represents a cell in that row. The grid will always be a square, meaning the number of rows will be equal to the number of columns. # Output - Return `True` if there is a path from the top-left corner to the bottom-right corner, and `False` otherwise. # Example ```python grid = [ \\"....\\", \\"..\\", \\"...#\\", \\"#...\\" ] print(is_path_exists(grid)) # Should print: True grid = [ \\"....\\", \\"\\", \\"....\\", \\"#...\\" ] print(is_path_exists(grid)) # Should print: False ``` # Constraints - The size of the grid is between 2x2 and 100x100. - There will be at least one valid path in the grid provided for testing purposes.","solution":"from typing import List def is_path_exists(grid: List[str]) -> bool: n = len(grid) visited = [[False] * n for _ in range(n)] def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == \'#\' or visited[x][y]: return False if x == n-1 and y == n-1: return True visited[x][y] = True if (dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1)): return True return False return dfs(0, 0)"},{"question":"Create a function that takes a string of lowercase letters and returns a new string containing the same letters, but sorted in alphabetical order. For example, if the input string is \\"python\\", the function should return \\"hnopty\\". **Note:** The function accepts a string of lowercase letters and returns a string.","solution":"def sort_string(s): Returns a new string with the characters of the input string sorted in alphabetical order. :param s: str : input string consisting of lowercase letters :return: str : sorted string in alphabetical order return \'\'.join(sorted(s))"},{"question":"Given a list of integers, you need to count the number of subarrays (contiguous elements) that form a palindrome. A palindrome is a sequence that reads the same backward as forward. For example: - `[1, 2, 1]` is a palindrome. - `[3, 4, 4, 3]` is a palindrome. - `[5, 6, 7]` is not a palindrome. The function should return the total number of such subarrays present in the given list. # Input - A list of integers. # Output - A single integer representing the count of palindromic subarrays. # Examples ``` count_palindromic_subarrays([1, 2, 3, 2, 1]) # 6 count_palindromic_subarrays([1, 1, 1]) # 6 count_palindromic_subarrays([1, 2, 3]) # 3 ``` # Note - The list can contain up to 10,000 elements. - A subarray can contain just one element.","solution":"def is_palindrome(subarray): Helper function to check if a subarray is a palindrome. return subarray == subarray[::-1] def count_palindromic_subarrays(arr): Returns the count of palindromic subarrays in the given list. count = 0 n = len(arr) for start in range(n): for end in range(start, n): if is_palindrome(arr[start:end+1]): count += 1 return count"},{"question":"You are given a string representing a sequence of brackets. Your task is to write a function that determines if the sequence of brackets is balanced. A sequence of brackets is considered balanced if all opening brackets have corresponding closing brackets in the correct order. Brackets include the following characters: - `()` - `{}` - `[]` The function should return `True` if the sequence is balanced, and `False` otherwise. For example: - for the input string `\\"{[()]}\\"`, the function should return `True` - for the input string `\\"{[(])}\\"`, the function should return `False` Your function should be able to handle strings of varying lengths, including very long strings. If the string contains characters other than the specified brackets, the function should return \\"invalid input\\". Here is the function signature you should use: ```python def is_balanced_brackets(s: str) -> bool: # Your code here ```","solution":"def is_balanced_brackets(s: str) -> bool: Returns True if the sequence of brackets in the string is balanced, False otherwise. If the string contains characters other than the specified brackets, it returns \\"invalid input\\". bracket_pairs = { \'(\': \')\', \'{\': \'}\', \'[\': \']\' } # Stack to keep track of the opening brackets stack = [] for char in s: if char in bracket_pairs: # If it\'s an opening bracket stack.append(char) elif char in bracket_pairs.values(): # If it\'s a closing bracket if stack and bracket_pairs[stack[-1]] == char: stack.pop() else: return False else: return \\"invalid input\\" # If there are no leftover opening brackets, it\'s balanced return not stack"},{"question":"There is a library with N books, each having a unique ID from 1 to N. The library also has a list of book requests from readers, where each request indicates a book by its ID. The librarian processes each request in the order they come, and keeps a counter of how many times each book has been requested. Unfortunately, the librarian\'s computer crashed and the data on the counter was lost. Fortunately, you have a backup of the request log. Can you help the librarian restore the request counters for each book? -----Input----- The first line contains a single integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains two space-separated integers N and Q denoting the number of books and the total number of requests, respectively. The second line contains Q space-separated integers representing the IDs of the requested books. -----Output----- For each test case, output a single line containing N space-separated integers where the i-th integer represents the number of times the book with ID i was requested. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Q ≤ 1000 - 1 ≤ book ID ≤ N -----Example----- Input: 2 5 7 1 2 3 3 2 1 5 4 5 1 1 2 2 3 Output: 2 2 2 0 1 2 2 1 0 -----Explanation----- Example Case 1. There are 5 books and 7 requests. Book 1 is requested 2 times, book 2 is requested 2 times, book 3 is requested 2 times, book 5 is requested 1 time, and book 4 is not requested at all. So the output is \\"2 2 2 0 1\\". Example Case 2. There are 4 books and 5 requests. Book 1 is requested 2 times, book 2 is requested 2 times, book 3 is requested 1 time, and book 4 is not requested at all. So the output is \\"2 2 1 0\\".","solution":"def restore_request_counters(T, test_cases): results = [] for i in range(T): N, Q, requests = test_cases[i] counters = [0] * N for request in requests: counters[request - 1] += 1 results.append(counters) return results"},{"question":"The provided code is intended to reverse the words in a given string `input`. However, it\'s failing to reverse individual words and only reversing the entire string. # Task Revise the code so that it correctly reverses each word within the string while keeping the order of the words the same. # Notes The string `input` will not be null and will contain only alphabetic characters and spaces.","solution":"def reverse_words(input_string): Reverses each word in the input string while keeping the order of the words the same. Args: input_string (str): The input string containing alphabetic characters and spaces. Returns: str: A string with each word reversed. words = input_string.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given an array of integers, find the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by 1. For example: ```python min_moves([1,2,3]) = 2 ``` Explanation: Only two moves are needed (each 2 can be incremented to 3, or each 1 can be incremented to 2). The optimal way to make all elements equal is to find the median of the array and move all elements to that value. Another example: ```python min_moves([10,2,5,7]) = 10 ``` Explanation: The optimal way is to make all elements equal to 5 or 7, requiring 10 moves in total. The function should be implemented with the following signature: ```python def min_moves(arr: list[int]) -> int: pass ``` Note: - The array length will be at least 1. - The array elements can be positive or negative integers.","solution":"from typing import List def min_moves(arr: List[int]) -> int: Finds the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement an element of the array by 1. The optimal way to make all elements equal is to move them to the median of the array. arr.sort() median = arr[len(arr) // 2] return sum(abs(x - median) for x in arr)"},{"question":"Alice is managing a series of bank accounts for her customers. Each account starts with an initial balance. She wants to perform a series of operations to update account balances and query the current balance of specific accounts. The operations can be one of two types: 1. Deposit a certain amount of money to a range of accounts. 2. Query the current balance of a specific account. -----Request----- Help Alice perform the operations on the bank accounts. -----Input----- - The first line contains two integers n and m, representing the number of accounts and the number of operations respectively. - The second line contains n integers, representing the initial balance of each account. - The next m lines describe the operations: - D u v k to describe a deposit operation where k is added to accounts from u to v (inclusive). - Q p to describe a query operation for account p. -----Output----- For each query operation, output the current balance of the specified account. -----Example----- Input: 5 4 100 200 300 400 500 D 1 3 50 Q 2 D 2 5 20 Q 4 Output: 250 420 -----Limitations----- - 0 < n ≤ 10^6 - 0 < m ≤ 250 000 - 0 < u ≤ v ≤ n - -10^9 ≤ initial balance, k ≤ 10^9 - 0 < p ≤ n","solution":"def manage_bank_accounts(n, m, balances, operations): Performs deposit and query operations on bank accounts. Parameters: n (int): Number of accounts. m (int): Number of operations. balances (list of int): Initial balances of accounts. operations (list of str): List of operations to perform. Returns: list of int: Balances of specified accounts based on query operations. results = [] for operation in operations: op = operation.split() if op[0] == \'D\': u = int(op[1]) - 1 v = int(op[2]) - 1 k = int(op[3]) for i in range(u, v + 1): balances[i] += k elif op[0] == \'Q\': p = int(op[1]) - 1 results.append(balances[p]) return results"},{"question":"A gardener is moving a wheelbarrow filled with soil in the coordinate plane from the point (x_1, y_1) to the point (x_2, y_2). The gardener can use a straight path or take a longer route. He has two move options available: 1. Move the wheelbarrow in a straight line directly to the destination. 2. Move the wheelbarrow along grid lines, first to a point (x_2, y_1) or (x_1, y_2) and then to (x_2, y_2). Determine the minimum amount of time he needs to carry the wheelbarrow from (x_1,y_1) to (x_2,y_2). The gardener moves at a constant pace of 1 unit per second. -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 leq t leq 1000): the number of test cases. The description of the test cases follows. Each of the next t lines contains four space-separated integers x_1, y_1, x_2, y_2 (1 leq x_1, y_1, x_2, y_2 leq 10^9), describing the next test case. -----Output----- For each test case, print a single integer: the minimum time in seconds the gardener needs to bring the wheelbarrow from (x_1,y_1) to (x_2,y_2). -----Example----- Input 2 1 2 2 3 1 1 1 5 Output 2 4 -----Note----- In the first test case, the starting point of the wheelbarrow is (1,2) and the ending point is (2,3). The gardener can move directly in a diagonal manner taking 2 seconds. In the second test case, the starting point of the wheelbarrow is (1,1) and the ending point is (1,5). The gardener can move directly along the y-axis, it takes 4 seconds.","solution":"def min_time_to_move(t, test_cases): results = [] for case in test_cases: x1, y1, x2, y2 = case time = abs(x2 - x1) + abs(y2 - y1) results.append(time) return results"},{"question":"You are given a set of positive integers stones each representing the weight of a stone. There is also a special integer k. In one turn, you can choose any two stones such that their weight difference is less than or equal to k, and remove both stones. Your goal is to minimize the total weight of the remaining stones. Return the minimum total weight that can be achieved after performing the optimal sequence of removing stones. Example: Input: stones = [4, 3, 6, 7], k = 2 Output: 1 Explanation: - Choose stones with weights 4 and 3 (difference is 1 which is <= k). Stones after removal: [6, 7]. - Choose stones with weights 6 and 7 (difference is 1 which is <= k). Stones after removal: []. Notes: - The number of stones n is between 1 and 1000. - The weight of each stone is between 1 and 1000. - 1 <= k <= 1000.","solution":"from typing import List def minimize_weight(stones: List[int], k: int) -> int: # Sort stones to easily find pairs with weight differences less than or equal to k stones.sort() while len(stones) > 1: found_pair = False for i in range(len(stones) - 1): if abs(stones[i] - stones[i + 1]) <= k: del stones[i:i + 2] found_pair = True break if not found_pair: break return sum(stones)"},{"question":"Implement a function `duplicate_counter(lst)` that takes a list `lst` as its input and returns a dictionary with each element in the list as the key and the number of times that element appears in the list as the value. Example: ``` For lst = [a, b, b, c, a, c, c, a], the function call duplicate_counter(lst) should return the dictionary {\'a\': 3, \'b\': 2, \'c\': 3}. For lst = [1, 2, 2, 3, 1, 3, 3, 1], the function call duplicate_counter(lst) should return the dictionary {1: 3, 2: 2, 3: 3}. ```","solution":"def duplicate_counter(lst): Returns a dictionary with each element in the list as the key and the number of times that element appears in the list as the value. counter = {} for item in lst: if item in counter: counter[item] += 1 else: counter[item] = 1 return counter"},{"question":"Given a collection of stock prices over several days, write a function to find the maximum profit that can be made by buying and selling a single stock within this period. The purchase must be made on an earlier day, and the sale must be made on a later day. If no profit can be made, return 0. For example: ```python max_profit([7, 1, 5, 3, 6, 4]) returns 5 max_profit([7, 6, 4, 3, 1]) returns 0 ``` In the first example, the maximum profit can be made by buying on day 2 (at price 1) and selling on day 5 (at price 6), giving a profit of 6 - 1 = 5. In the second example, no profit can be made as the prices decrease every day. Function signature: ```python def max_profit(prices: List[int]) -> int: # Your code here ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: Finds the maximum profit that can be achieved from buying and selling a single stock. :param prices: List of stock prices over several days. :return: The maximum profit that can be achieved. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price we\'ve seen so far if price < min_price: min_price = price # Calculate the potential profit with the current price potential_profit = price - min_price # Update the maximum profit if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"You are given a series of daily temperatures, and you need to find out how many days you have to wait until a warmer temperature. If there isn\'t a future day for which this is possible, put 0 instead. Write a function that takes an array of integers representing daily temperatures and returns an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no such day, store 0 in answer[i] instead. # Example: ```text Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] ``` # Constraints: - The length of the input array is in the range [1, 10^5]. - The temperature values are integers in the range [30, 100]. # Note: - Try to implement the function with a time complexity of O(n) to ensure optimal performance for large inputs.","solution":"def daily_temperatures(temperatures): Returns an array indicating the number of days to wait until a warmer temperature for each day. n = len(temperatures) answer = [0] * n stack = [] # stack to store indexes of \'temperatures\' we are considering for i in range(n): # While the stack is not empty and the current temperature is greater than the temperature at the index stored in the top of stack while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"-----General Statement:----- Write a program that reads two matrices and outputs their sum. -----Input:----- The input begins with two integers, n and m, specifying the number of rows and columns of the matrices (1 ≤ n, m ≤ 100). This is followed by 2 blocks, each consisting of n lines with m integers each, where each integer is between -1000 and 1000 inclusive. These blocks represent the two matrices A and B respectively. -----Output:----- Output a single matrix which is the element-wise sum of matrices A and B. Each row of the resulting matrix should be printed on a new line and the values within a row should be separated by a single space. -----Sample Input:----- 2 3 1 2 3 4 5 6 7 8 9 10 11 12 -----Sample Output:----- 8 10 12 14 16 18","solution":"def read_matrix(n, m, matrix_input): Reads a matrix of size n by m from the given input list. matrix = [] for i in range(n): row = matrix_input[i].split() matrix.append([int(num) for num in row]) return matrix def sum_matrices(matrix_a, matrix_b): Returns the summation of two matrices. n, m = len(matrix_a), len(matrix_a[0]) result_matrix = [] for i in range(n): row = [] for j in range(m): row.append(matrix_a[i][j] + matrix_b[i][j]) result_matrix.append(row) return result_matrix # Input format parsing from raw input for testing purposes def parse_input(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix_a_input = lines[1:n+1] matrix_b_input = lines[n+1:] return n, m, matrix_a_input, matrix_b_input # Main processing function combining everything def matrix_sum(input_data): n, m, matrix_a_input, matrix_b_input = parse_input(input_data) matrix_a = read_matrix(n, m, matrix_a_input) matrix_b = read_matrix(n, m, matrix_b_input) result_matrix = sum_matrices(matrix_a, matrix_b) return \'n\'.join(\' \'.join(map(str, row)) for row in result_matrix)"},{"question":"Implement a function `longest_path(matrix)` that takes a 2D matrix of integers as input and returns the length of the longest increasing path in the matrix. For this problem, the \\"longest increasing path\\" is defined as a sequence of adjacent cells (horizontally or vertically) where each cell in the sequence must be strictly greater than the previous one. # Function Signature: ```python def longest_path(matrix: List[List[int]]) -> int: ``` # Input: - `matrix` (List[List[int]]): A 2D list of integers where `1 <= len(matrix), len(matrix[0]) <= 100`. # Output: - An integer representing the length of the longest increasing path. # Examples: Example 1: ```python matrix = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] assert longest_path(matrix) == 4 # Path: 1 → 2 → 6 → 9 ``` Example 2: ```python matrix = [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] assert longest_path(matrix) == 4 # Path: 3 → 4 → 5 → 6 ``` Example 3: ```python matrix = [ [1] ] assert longest_path(matrix) == 1 # Path: 1 ``` # Constraints: - You may assume that all four edges of the matrix are surrounded by sentinel values that are less than any value in the matrix. - Your function must run in `O(n * m)` time complexity, where `n` is the number of rows and `m` is the number of columns in the matrix.","solution":"from typing import List def longest_path(matrix: List[List[int]]) -> int: if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) cache = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(x: int, y: int) -> int: if cache[x][y] != -1: return cache[x][y] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] > matrix[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) cache[x][y] = max_length return max_length max_path_length = 0 for i in range(rows): for j in range(cols): max_path_length = max(max_path_length, dfs(i, j)) return max_path_length"},{"question":"A string S is said to be a \\"perfect\\" string if it can be rearranged such that no adjacent characters in the resulting string are the same. Given a string S, determine whether it is a perfect string. If it is, print the rearranged string; otherwise, print \\"Not possible\\". -----Input----- The input consists of a single string S that contains only lowercase alphabets. -----Output----- If it is possible to rearrange S to form a perfect string, print the rearranged string. If there are multiple valid answers, you may print any of them. If it is not possible, print \\"Not possible\\". -----Constraints----- - 1 ≤ |S| ≤ 1000 -----Examples----- Input: aabb Output: abab Input: aaab Output: Not possible -----Note----- In the first example, \\"abab\\" is a valid rearrangement with no adjacent characters being the same. In the second example, no rearrangement can prevent adjacent \'a\'s, so \\"Not possible\\" is the correct output.","solution":"from collections import Counter import heapq def rearrange_string(S): char_count = Counter(S) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_char, prev_count = None, 0 result = [] while max_heap or prev_count < 0: if prev_count < 0: if not max_heap: return \\"Not possible\\" count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char, prev_count = char, count + 1 else: count, char = heapq.heappop(max_heap) result.append(char) prev_count = count + 1 prev_char = char return \'\'.join(result)"},{"question":"Given the root of a binary tree, create a function that returns true if and only if all the binary tree nodes have the same value. For example, consider the following binary tree: ``` 1 / 1 1 / 1 1 ``` In this example, all nodes have the value 1, so the function should return true. Another example: ``` 2 / 2 3 / 2 2 ``` In this case, not all nodes have the same value, so the function should return false. Function signature: `def is_unival_tree(root: TreeNode) -> bool` # Constraints: - The number of nodes in the binary tree is in the range [1, 1000]. - Each node\'s value will be an integer in the range [0, 1000]. # Examples: ``` Example 1: Input: root = [1,1,1,1,1] Output: True Example 2: Input: root = [2,2,2,2,3] Output: False ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_unival_tree(root: TreeNode) -> bool: def dfs(node, value): if not node: return True if node.val != value: return False return dfs(node.left, value) and dfs(node.right, value) if not root: return True return dfs(root, root.val)"},{"question":"You are given a collection of points in a 2D plane, where points[i] = [xi, yi]. A point p is considered \\"dominating\\" if there are no points that have both higher x and y coordinates. Your goal is to find all the dominating points from the collection. A point pi = [xi, yi] is considered dominating if for any other point pj = [xj, yj], it is not true that xi < xj and yi < yj. Return the list of all dominating points sorted in increasing order first by x-coordinate and then by y-coordinate. Example 1: Input: points = [[1,2],[2,3],[3,4],[5,1],[2,5]] Output: [[2,5],[3,4],[5,1]] Explanation: The dominating points are [2,5] (no points lie strictly above and to the right), [3,4], and [5,1]. Example 2: Input: points = [[4,4],[2,3],[3,2],[1,5],[5,5]] Output: [[5,5]] Explanation: The only dominating point is [5,5]. Example 3: Input: points = [[1,1],[2,2],[3,3]] Output: [[3,3]] Explanation: Only [3,3] is dominating since it is at the highest x and y. Constraints: 1 <= points.length <= 10^5 1 <= xi, yi <= 10^9","solution":"def find_dominating_points(points): Returns the list of dominating points sorted in increasing order first by x-coordinate and then by y-coordinate. if not points: return [] # Sort points in descending order first by x then by y points.sort(key=lambda x: (x[0], x[1]), reverse=True) dominating_points = [] max_y = float(\'-inf\') for x, y in points: if y > max_y: dominating_points.append([x, y]) max_y = y # Sort the result in increasing order first by x-coordinate and then by y-coordinate dominating_points.sort(key=lambda x: (x[0], x[1])) return dominating_points"},{"question":"Alice has a string S of length N, and she wants to find the length of the longest substring of S which contains at most K distinct characters. -----Input----- - The first line of the input contains two space-separated integers N and K. - The second line contains the string S. -----Output----- Print the length of the longest substring of S that contains at most K distinct characters. -----Constraints----- - 1 le N le 10^5 - 1 le K le N -----Subtasks----- Subtask #1 (30 points): 1 le N le 10^3 Subtask #2 (70 points): original constraints -----Example Input----- 7 2 abaccc -----Example Output----- 4 -----Explanation----- The longest substring containing at most 2 distinct characters is \\"abac\\" which has a length of 4.","solution":"def longest_substring_with_k_distinct_characters(S, K): from collections import defaultdict n = len(S) if n * K == 0: return 0 left, right = 0, 0 hashmap = defaultdict(int) max_length = 1 while right < n: hashmap[S[right]] += 1 right += 1 while len(hashmap) > K: hashmap[S[left]] -= 1 if hashmap[S[left]] == 0: del hashmap[S[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Write a function that checks if a word is a palindrome. A palindrome is a word that reads the same forwards and backwards, case insensitive. The function takes a single string (inputStr) as a parameter and returns a boolean indicating whether the word is a palindrome or not. For example, if you get the input string \\"Racecar\\", the function should return True. If the input is \\"hello\\", the function should return False.","solution":"def is_palindrome(inputStr): Checks if the given inputStr is a palindrome. Args: inputStr (str): The string to be checked. Returns: bool: True if inputStr is a palindrome, False otherwise. # Convert the string to lower case to make the function case insensitive inputStr = inputStr.lower() # Check if the string reads the same forwards and backwards return inputStr == inputStr[::-1]"},{"question":"Chroma, a photo editing company, has introduced a new feature in its app to identify and highlight clusters of similar colors in an image. To optimize the feature, you are assigned a task to find the maximum size of the substring with distinct characters in a given string. You need to identify the longest substring where all characters are distinct. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains a single line of input S which is a string of lowercase alphabets. -----Output:----- For each testcase, output in a single line the length of the longest substring with all distinct characters. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 -----Sample Input:----- 2 abcabcbb bbbbb -----Sample Output:----- 3 1 -----EXPLANATION:----- For \\"abcabcbb\\", the longest substring with all distinct characters is \\"abc\\", which has a length of 3. For \\"bbbbb\\", the longest substring with all distinct characters is \\"b\\", which has a length of 1.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters in s. n = len(s) char_index = {} left_pointer = 0 max_length = 0 for right_pointer in range(n): if s[right_pointer] in char_index: left_pointer = max(char_index[s[right_pointer]], left_pointer) max_length = max(max_length, right_pointer - left_pointer + 1) char_index[s[right_pointer]] = right_pointer + 1 return max_length def process_testcases(T, testcases): result = [] for testcase in testcases: result.append(length_of_longest_substring(testcase)) return result"},{"question":"You have been given an array of integers. Your task is to reorder the array such that every second element of the returned array is greater than its left and right elements. Print the reordered array if a solution exists, otherwise, print \\"Not Possible\\". -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, which is the size of the array. - The second line contains n space-separated integers, the elements of the array. -----Output:----- For each test case, print the reordered array on a new line. If no reordering is possible, print \\"Not Possible\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq n leq 100000 - 1 leq A_i leq 10^9 -----Sample Input:----- 2 3 3 1 2 5 5 3 1 2 3 -----Sample Output:----- 1 3 2 Not Possible -----EXPLANATION:----- In the first example, one possible reordering of the array [3, 1, 2] is [1, 3, 2], where 3 is greater than both 1 and 2. In the second example, it is not possible to reorder [5, 3, 1, 2, 3] such that all second elements are greater than their neighboring elements.","solution":"def reorder_array(arr): Reorders the array such that every second element of the array is greater than its left and right elements. n = len(arr) if n < 3: if n == 1 or (n == 2 and arr[0] != arr[1]): return arr else: return \\"Not Possible\\" arr.sort() result = [0] * n left, right = 0, n - 1 for i in range(n): if i % 2 == 0: result[i] = arr[left] left += 1 else: result[i] = arr[right] right -= 1 # Check the condition for i in range(1, n-1, 2): if not (result[i] > result[i-1] and result[i] > result[i+1]): return \\"Not Possible\\" return result def process_test_cases(test_cases): results = [] for n, arr in test_cases: result = reorder_array(arr) results.append(result) return results # To read input # Uncomment and use below lines in actual runtime environment # import sys # input = sys.stdin.read # data = input().split() # T = int(data[0]) # index = 1 # test_cases = [(int(data[index]), [int(x) for x in data[index+1:index+1+int(data[index])]]) for i in range(T)] # index += int(data[index])+1 # results = process_test_cases(test_cases) # for result in results: # if isinstance(result, str): # print(result) # else: # print(\' \'.join(map(str, result)))"},{"question":"Oliver and Nova are passionate about riddles and number games. On their anniversary, they decided to create a new challenge based on string permutations. Given a string with at most one character appearing an odd number of times, they need to determine if it is possible to rearrange the string into a palindrome. A palindrome is a word that reads the same backward as forward. To solve this problem, Nova insists that they first calculate the frequency of each character in the string and then determine if it can be permuted into a palindrome. If it is possible to create a palindrome, print \\"YES\\". Otherwise, print \\"NO\\". -----Input:----- The input consists of a single string s which contains only lowercase letters. The length of the string does not exceed 10^5 characters. -----Output:----- Print \\"YES\\" if the given string can be permuted into a palindrome, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ |s| ≤ 10^5 -----Sample Input:----- civic -----Sample Output:----- YES ---Explanation--- The string \\"civic\\" itself is a palindrome, hence the output is \\"YES\\". -----Sample Input:----- ivicc -----Sample Output:----- YES ---Explanation--- The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome, hence the output is \\"YES\\". -----Sample Input:----- hello -----Sample Output:----- NO ---Explanation--- The string \\"hello\\" cannot be rearranged to a palindrome, hence the output is \\"NO\\".","solution":"from collections import Counter def can_form_palindrome(s): Given a string s, determines if it can be rearranged to form a palindrome. :param s: Input string containing lowercase letters :type s: str :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" :rtype: str # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a 2D grid of size NxM where each cell contains a non-negative integer representing the cost of moving through that cell. Your task is to determine the minimum cost required to move from the top-left corner (1,1) to the bottom-right corner (N,M). You can only move either down or right at any point in time. For example, for the grid 131 123 132 the minimum cost path is 1 → 2 → 3 → 2 → 2 → 3, which gives a total cost of 13. -----Input format ----- The first line contains two integers N and M, representing the number of rows and columns of the grid. Each of the next N lines contains M integers, representing the cost in each cell of the grid. -----Output format ----- The output should consist of a single integer, which is the minimum cost required to reach the bottom-right corner of the grid from the top-left corner. -----Test Data ----- The test data is grouped into two subtasks with the following constraints on the inputs. • Subtask 1 [30 points]: 1 ≤ N, M ≤ 100. • Subtask 2 [70 points]: 1 ≤ N, M ≤ 1000. All the integers in the grid are between 0 and 1000, inclusive. -----Example ----- Here is the sample input and output corresponding to the example above. -----Sample input ----- 3 3 1 3 1 1 2 3 1 3 2 -----Sample output----- 8 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def min_cost_path(grid): N = len(grid) M = len(grid[0]) # Initialize a 2D list to store the minimum cost to reach each cell dp = [[0]*M for _ in range(N)] # Set the cost for the starting cell dp[0][0] = grid[0][0] # Fill out the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill out the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill out the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the minimum cost to reach the bottom-right corner return dp[N-1][M-1]"},{"question":"Create a `Matrix` class that represents a 2x2 matrix with attributes `a`, `b`, `c`, and `d` corresponding to the elements of the matrix: ``` | a b | | c d | ``` Your matrix class should handle matrix multiplication with a `multiply()` method that takes a second matrix as an argument and returns a new matrix which is the product of the matrix you call `multiply()` on and the matrix you pass in. For example: ```python >>> m1 = Matrix(1, 2, 3, 4) >>> m1.a 1 >>> m1.b 2 >>> m1.c 3 >>> m1.d 4 >>> m2 = Matrix(5, 6, 7, 8) >>> m3 = m1.multiply(m2) >>> m3.a 19 >>> m3.b 22 >>> m3.c 43 >>> m3.d 50 ``` Matrix multiplication involves the dot product of rows and columns: ``` | a1 b1 | | a2 b2 | | a1*a2 + b1*c2 a1*b2 + b1*d2 | | c1 d1 | * | c2 d2 | = | c1*a2 + d1*c2 c1*b2 + d1*d2 | ```","solution":"class Matrix: def __init__(self, a, b, c, d): self.a = a self.b = b self.c = c self.d = d def multiply(self, other): a = self.a * other.a + self.b * other.c b = self.a * other.b + self.b * other.d c = self.c * other.a + self.d * other.c d = self.c * other.b + self.d * other.d return Matrix(a, b, c, d)"},{"question":"=====Function Descriptions===== append(data) This function adds a specified element to the end of a list, modifying the original list. Sample Code >>> numbers = [1, 2, 3] >>> numbers.append(4) >>> print(numbers) [1, 2, 3, 4] =====Problem Statement===== You are given a list of integers. Your task is to repeatedly append the last element of the list to its end until the list reaches a specified length. For example, if the initial list is [1,2,3] and the length to reach is 7, you should append the last element, 3, four times, resulting in the list [1,2,3,3,3,3,3]. =====Input Format===== The first line contains an integer N, which is the target length for the list. The second line contains space-separated integers, representing the initial list. =====Constraints===== 0 < N ≤ 100 0 < len(initial list) ≤ N =====Output Format===== Print the final list after adding elements, as space-separated integers, on a single line.","solution":"def extend_list_to_length(target_length, initial_list): Extends the given list by repeatedly appending the last element until it reaches the target length. while len(initial_list) < target_length: initial_list.append(initial_list[-1]) return initial_list"},{"question":"Write a function that takes a string `s` and a list of words `words`, and returns the starting indices of all substrings in `s` that are the concatenation of each word in `words` exactly once. The order of words in the concatenation does not matter. For example: Given s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"], return [0,9]. Explanation: Substrings starting at indices 0 and 9 are \\"barfoo\\" and \\"foobar\\" respectively. The output order does not matter, returning [9,0] is fine. Constraints: - The input string `s` consists of lowercase English letters. - The length of `s` does not exceed 10^4. - The length of each word in `words` is the same. - The total number of words does not exceed 5000, and all the words are non-empty. Features of the random tests: - number of tests = 50 - length of `s` ranges from 10 to 100 - length of words ranges from 2 to 5","solution":"def find_substring_indices(s, words): from collections import Counter if not s or not words or not words[0]: return [] word_length = len(words[0]) num_words = len(words) substring_length = word_length * num_words word_count = Counter(words) result = [] for i in range(len(s) - substring_length + 1): substring = s[i:i + substring_length] seen_words = [substring[j:j + word_length] for j in range(0, substring_length, word_length)] if Counter(seen_words) == word_count: result.append(i) return result"},{"question":"Dr. Dilemma has a number of event logs stored in an array where each element represents the occurrence of an event at a particular timestamp. Unfortunately, some of the events are duplicated. Dr. Dilemma wants to identify the first occurrence of each unique event and discard the remaining duplicates. Your task is to write a function that takes an array of event timestamps and returns a list of all unique timestamps in the order of their first occurrence. # Function Signature ```python def unique_events(events: List[int]) -> List[int]: ``` # Input - `events`: A list of integers where each integer represents an event timestamp. (1 leq text{length of events} leq 10^5, 1 leq text{timestamp value} leq 10^5) # Output - Returns a list of integers that contains the first occurrence of each unique event timestamp in the order they appeared in the input list. # Example ```python # Example 1 events = [4, 5, 4, 6, 7, 4, 7, 8, 6] # The first occurrences are: 4, 5, 6, 7, 8 print(unique_events(events)) # Output: [4, 5, 6, 7, 8] # Example 2 events = [1, 2, 3, 1, 2, 3, 4, 5] # The first occurrences are: 1, 2, 3, 4, 5 print(unique_events(events)) # Output: [1, 2, 3, 4, 5] ``` # Explanation Example 1: In the list `[4, 5, 4, 6, 7, 4, 7, 8, 6]`, the first time 4 appears is at the beginning of the list. The next unique number is 5. Following that, 6 appears first at index 3, 7 at index 4, and 8 at index 7. Therefore, the result is `[4, 5, 6, 7, 8]`. Example 2: In the list `[1, 2, 3, 1, 2, 3, 4, 5]`, by following the same logic, the result is `[1, 2, 3, 4, 5]`.","solution":"from typing import List def unique_events(events: List[int]) -> List[int]: Returns a list of unique event timestamps in the order of their first occurrence. seen = set() unique = [] for event in events: if event not in seen: unique.append(event) seen.add(event) return unique"},{"question":"Write a function that takes a string consisting of lowercase alphabets (\'a\' to \'z\') and returns a new string with each character shifted by a given number of places in the alphabet. The shift should wrap around the end of the alphabet. For example, with a shift of 1, \'a\' would become \'b\', \'z\' would become \'a\', and with a shift of 2, \'y\' would become \'a\', \'z\' would become \'b\', etc. Example 1: Input: (\\"abc\\", 2) Output: \\"cde\\" Example 2: Input: (\\"xyzab\\", 3) Output: \\"abcdc\\" Example 3: Input: (\\"hello\\", 7) Output: \\"olssv\\" Note: - You may assume the input string contains only lowercase alphabets and is non-empty. - The shift value can be any integer (positive or negative). - The function should handle large shift values by normalizing them appropriately.","solution":"def shift_string(s, shift): Returns a new string with each character in s shifted by the given shift value. The shift wraps around the end of the alphabet. Args: s (str): input string containing only lowercase alphabets. shift (int): the number of places to shift each character. Returns: str: a new string with each character shifted by the given shift value. shifted_string = [] for char in s: # Normalize shift to be within the range of 0-25 normalized_shift = shift % 26 # Compute the new character post-shift new_char = chr((ord(char) - ord(\'a\') + normalized_shift) % 26 + ord(\'a\')) shifted_string.append(new_char) return \'\'.join(shifted_string)"},{"question":"Write a program that takes an integer `x` and returns `True` if `x` is a power of 2, and `False` otherwise. Your solution should have a logarithmic time complexity, not linear. Add code to `is_power_of_two(x)` that returns a boolean indicating whether `x` is a power of 2. Examples: 1 -> True (2^0) 2 -> True (2^1) 3 -> False 4 -> True (2^2) 16 -> True (2^4) 18 -> False Note: An input of zero or a negative number should always return `False` as they are not considered powers of 2.","solution":"def is_power_of_two(x): Returns True if x is a power of 2, otherwise returns False. if x <= 0: return False return (x & (x - 1)) == 0"},{"question":"Complete the function ```convertTemperature``` that takes a temperature value in Celsius and returns the corresponding Fahrenheit value. Additionally, if the temperature in Celsius is below the freezing point of water (0 degrees Celsius), return a string concatenated with the word \\"Freezing\\". If the temperature in Celsius is above the boiling point of water (100 degrees Celsius), return a string concatenated with the word \\"Boiling\\". The conversion formula from Celsius to Fahrenheit is: [ F = frac{9}{5}C + 32 ] For example: ```python convertTemperature(25) => \\"77.0\\" convertTemperature(-10) => \\"14.0 Freezing\\" convertTemperature(101) => \\"213.8 Boiling\\" ``` Note: - If the temperature is exactly at the freezing or boiling point, it should return only the Fahrenheit value. - The output string should show the temperature in Fahrenheit rounded to one decimal place.","solution":"def convertTemperature(celsius): Converts a temperature in Celsius to Fahrenheit and adds respective labels if necessary. Args: celsius (float or int): Temperature in Celsius Returns: str: Converted temperature in Fahrenheit with appropriate labels fahrenheit = (celsius * 9/5) + 32 result = f\\"{fahrenheit:.1f}\\" if celsius < 0: result += \\" Freezing\\" elif celsius > 100: result += \\" Boiling\\" return result"},{"question":"Create a function `reverse_words` that takes a string of one or more words and returns the string with the words in reverse order. All spaces in the string should be retained and the words within each space should be reversed. For example: `reverse_words(\\"hello world\\")` should return `“world hello”`. `reverse_words(\\"The quick brown fox\\")` should return `“fox brown quick The”`. `reverse_words(\\"Coding is fun\\")` should return `“fun is Coding”`. You can assume that the input string will not contain leading or trailing spaces, and the words will be separated by a single space.","solution":"def reverse_words(s): Returns the string with the order of words reversed. :param s: A string of one or more words separated by spaces. # Split the string on spaces to get a list of words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words back into a single string with spaces return \' \'.join(reversed_words)"},{"question":"Write a function that takes a string representing a sequence of moves in a 2D grid and determines whether the moves form a closed loop. In a closed loop, you start and end at the same position. The string contains the characters \'L\', \'R\', \'U\', and \'D\', which represent moving one step left, right, up, and down respectively. Rules: - The grid is infinite, so you do not need to worry about boundaries. - The starting position is always the origin (0,0). - A closed loop means that after executing all the moves, the current position is the same as the starting position. Function Signature: ```python def is_closed_loop(moves: str) -> bool: ``` Input: - `moves` (str): A string containing the characters \'L\', \'R\', \'U\', \'D\'. Output: - Returns `True` if the moves form a closed loop, `False` otherwise. Examples: ```python is_closed_loop(\\"UD\\") # True is_closed_loop(\\"LL\\") # False is_closed_loop(\\"LDRRUULD\\") # True is_closed_loop(\\"UDLR\\") # True ```","solution":"def is_closed_loop(moves: str) -> bool: Determines if a series of moves in a 2D grid forms a closed loop. x, y = 0, 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"Given an integer `n`, create a function to determine if `n` can be expressed as the sum of three positive distinct integers each of which also must be a prime number. If such a combination exists, return the three prime numbers as a tuple. If multiple combinations are possible, return any one of them. If no such combination exists, return an empty tuple. # Input - An integer `n` such that `1 ≤ n ≤ 30000` # Output - A tuple of three integers such that their sum is `n` and all three integers are prime, otherwise return an empty tuple. # Example ```python def sum_of_three_primes(n): # Your code here # Example 1 n = 20 print(sum_of_three_primes(n)) # Output: (3, 7, 10) # Example 2 n = 30 print(sum_of_three_primes(n)) # Output: (5, 11, 14) # Example 3 n = 5 print(sum_of_three_primes(n)) # Output: () ```","solution":"def is_prime(num): Determines if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_three_primes(n): Determines if n can be expressed as the sum of three distinct prime numbers. if n < 6: # The smallest sum of three distinct primes is 6 (2 + 3 + 1, but here we\'re looking for distinct primes) return () primes = [num for num in range(2, n) if is_prime(num)] prime_set = set(primes) for i in range(len(primes)): for j in range(i + 1, len(primes)): for k in range(j + 1, len(primes)): if primes[i] + primes[j] + primes[k] == n: return (primes[i], primes[j], primes[k]) return ()"},{"question":"In the world of programming, strings can often contain hidden meanings or patterns. One day, Aria discovered a special type of string called a \\"Balanced String.\\" A string is considered balanced if every character in the string appears the same number of times. Aria, being curious, wants to know whether a given string is balanced. Your task is to help Aria by writing a program that checks if a string is balanced. -----Input:----- - First line will contain T, the number of test cases. - Each of the next T lines will contain a single string S, made up of lowercase English letters. -----Output:----- For each test case, output \\"YES\\" if the string is balanced and \\"NO\\" otherwise. -----Constraints----- - 1 <= T <= 100 - 1 <= |S| <= 1000 -----Sample Input:----- 4 aabbcc abcabcabc aabbccdde abcd -----Sample Output:----- YES YES NO YES ---Explanation--- - In the first test case, characters \'a\', \'b\', and \'c\' each appear twice. - In the second test case, characters \'a\', \'b\', and \'c\' each appear three times. - In the third test case, characters \'a\', \'b\', \'c\', \'d\', and \'e\' have different frequencies. - In the fourth test case, characters \'a\', \'b\', \'c\', and \'d\' each appear once.","solution":"def is_balanced_string(S): Returns whether the string S is balanced or not. from collections import Counter # Count frequency of each character freq = Counter(S) # Get all the frequency values values = list(freq.values()) # Check if all frequency values are the same return all(v == values[0] for v in values) def check_balanced_strings(T, strings): Returns a list indicating whether each string in strings is balanced. results = [] for S in strings: if is_balanced_string(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # The input-output for function can be handled as needed in an external part, here we just focus on logic # For example: # input_strings = [\\"aabbcc\\", \\"abcabcabc\\", \\"aabbccdde\\", \\"abcd\\"] # check_balanced_strings(4, input_strings)"},{"question":"Create a function `find_longest_substring_with_k_distinct_chars(s: str, k: int) -> str` that finds the longest substring of a given string `s` containing up to `k` distinct characters. If there are multiple substrings with the same length, return the one that appears first in the string `s`. Example Input: ``` s = \\"eceba\\" k = 2 ``` Expected Output: ``` \\"ece\\" ``` * The argument `s` will be a string containing only lowercase letters (a-z). * The argument `k` will be a non-negative integer representing the maximum number of distinct characters allowed in the substring. * If `k` is 0, the function should return an empty string. * If `s` is an empty string, the function should return an empty string. * The length of `s` will be between 1 and 100,000 characters. * The function should be optimized for both time and space complexity.","solution":"def find_longest_substring_with_k_distinct_chars(s: str, k: int) -> str: if k == 0 or not s: return \\"\\" n = len(s) left = 0 right = 0 max_length = 0 max_substring = \\"\\" char_frequency = {} while right < n: char_frequency[s[right]] = char_frequency.get(s[right], 0) + 1 while len(char_frequency) > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 if right - left + 1 > max_length: max_length = right - left + 1 max_substring = s[left:right + 1] right += 1 return max_substring"},{"question":"There is a river which flows from west to east and is divided into N sections, each represented by the points (x, y) along the river where at each section there is an integer y, representing the maximum depth at that section (measured from y = 0). You want to build a series of bridges to allow people to cross the river. Each bridge can only be built where the depth is 0. The cost of building each bridge is equal to the square of its length. The length of a bridge is the difference in x-coordinates of the endpoints of the section with depth 0. Given the depths of each section of the river, determine the minimum total cost to build bridges so that all sections with depth 0 are covered by bridges. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 10^5 - 0 ≤ y_i ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: N y_1 y_2 ... y_N -----Output----- Print the minimum total cost to build bridges to cover all the sections with depth 0. -----Sample Input----- 5 0 1 0 0 1 -----Sample Output----- 2 In this case, the minimum cost is obtained by building a bridge from section 3 to section 5 with a length of 2 (cost = 2^2 = 4) plus a bridge from section 1 to section 1 with a length of 0 (cost = 0^2 = 0), resulting in a total cost of 4.","solution":"def min_cost_to_build_bridges(N, depths): Determine the minimum total cost to build bridges to cover all sections with depth 0. Parameters: N (int): Number of sections in the river. depths (list of int): List of depths at each section. Returns: int: Minimum total cost to build bridges. min_cost = 0 i = 0 while i < N: if depths[i] == 0: start = i while i < N and depths[i] == 0: i += 1 length = i - start - 1 min_cost += length ** 2 else: i += 1 return min_cost"},{"question":"Write a function combine_dicts(dict1, dict2) that takes two dictionaries as input and returns a new dictionary that contains all the keys from both dictionaries. If a key is present in both dictionaries, the value in the new dictionary should be the sum of the values from the input dictionaries. For example, given the dictionaries: ``` dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 3, \'c\': 4, \'d\': 5} ``` The function combine_dicts(dict1, dict2) should return: ``` {\'a\': 1, \'b\': 5, \'c\': 7, \'d\': 5} ```","solution":"def combine_dicts(dict1, dict2): Combines two dictionaries into a new dictionary. If a key is present in both dictionaries, the value in the new dictionary is the sum of the values from the input dictionaries. combined_dict = dict(dict1) # Make a copy of the first dictionary for key, value in dict2.items(): if key in combined_dict: combined_dict[key] += value # Sum the values if the key exists in both dictionaries else: combined_dict[key] = value # Add the key-value pair if it doesn\'t exist in the first dictionary return combined_dict"},{"question":"You are given an array of integers representing a series of stock prices over consecutive days. Your task is to find the maximum profit you can achieve by making a single transaction (i.e., buy one and sell one share of the stock). Note that you cannot sell a stock before you buy one. Example: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Not 7 - 1 = 6, as selling price must be after the buying price. Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done, so the max profit = 0. Notes: - The length of the array will not exceed 10^5. - All prices are positive integers. - You may assume that you have access to the unlimited fund, thus you can always buy stock on any day provided you haven\'t bought one already for the current transaction. Write a function `maxProfit(prices: List[int]) -> int` that takes an array of integers representing the stock prices and returns the maximum profit possible with a single transaction.","solution":"def maxProfit(prices): Returns the maximum profit with a single buy-sell transaction. :param prices: List[int] stock prices over consecutive days. :return: int maximum profit possible. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Write a function that takes a list of integers and returns a new list where each element is the sum of its neighbors and itself. For elements at the edges of the list, consider only the available neighbors. Example: Input: `[1, 2, 3, 4, 5]` Output: `[3, 6, 9, 12, 9]` Explanation: - For the first element: 1 + 2 = 3 - For the second element: 1 + 2 + 3 = 6 - For the third element: 2 + 3 + 4 = 9 - For the fourth element: 3 + 4 + 5 = 12 - For the last element: 4 + 5 = 9","solution":"def sum_with_neighbors(lst): Takes a list of integers and returns a new list where each element is the sum of its neighbors and itself. For elements at the edges of the list, consider only the available neighbors. if not lst: return [] n = len(lst) if n == 1: return lst result = [] for i in range(n): if i == 0: result.append(lst[i] + lst[i + 1]) elif i == n - 1: result.append(lst[i] + lst[i - 1]) else: result.append(lst[i - 1] + lst[i] + lst[i + 1]) return result"},{"question":"Write a function `is_valid_IP(str)` which takes a string and returns `True` if the input string is a valid IPv4 address, else returns `False`. An IPv4 address should be in the format `x.x.x.x` where `x` is a number from 0 to 255 (inclusive) and there are no leading zeros. For example: ``` is_valid_IP(\\"192.168.0.1\\") -> True is_valid_IP(\\"255.255.255.255\\") -> True is_valid_IP(\\"192.168.0.256\\") -> False is_valid_IP(\\"192.168.01.1\\") -> False is_valid_IP(\\"192.168.0\\") -> False ``` Consider edge cases such as input strings being empty or containing non-numeric characters.","solution":"def is_valid_IP(ip_str): Returns True if the input string is a valid IPv4 address, else returns False. An IPv4 address should be in the format x.x.x.x where x is a number from 0 to 255 (inclusive) and there are no leading zeros. parts = ip_str.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255 or (part[0] == \'0\' and len(part) > 1): return False return True"},{"question":"In this task, you need to create a function named `weatherReport`. This function will take a list of dictionaries as input, where each dictionary contains the keys \\"city\\" (a string), \\"temperature\\" (an integer representing Celsius temperature), and \\"humidity\\" (an integer representing humidity in percentage). Your function will return a dictionary with the following keys: - \\"hottest_city\\": The name of the city with the highest temperature. - \\"coldest_city\\": The name of the city with the lowest temperature. - \\"average_temperature\\": The average temperature of all cities, rounded to one decimal place. - \\"most_humid_city\\": The name of the city with the highest humidity. - \\"least_humid_city\\": The name of the city with the lowest humidity. Here is an example input: ```python [ {\\"city\\": \\"CityA\\", \\"temperature\\": 30, \\"humidity\\": 70}, {\\"city\\": \\"CityB\\", \\"temperature\\": 25, \\"humidity\\": 60}, {\\"city\\": \\"CityC\\", \\"temperature\\": 35, \\"humidity\\": 80}, {\\"city\\": \\"CityD\\", \\"temperature\\": 20, \\"humidity\\": 50} ] ``` And the corresponding output: ```python { \\"hottest_city\\": \\"CityC\\", \\"coldest_city\\": \\"CityD\\", \\"average_temperature\\": 27.5, \\"most_humid_city\\": \\"CityC\\", \\"least_humid_city\\": \\"CityD\\" } ``` Make sure to handle edge cases where the input list might be empty or contain dictionaries with missing keys.","solution":"def weatherReport(data): This function returns a dictionary with the cities having the highest and lowest temperatures, the city with the highest and lowest humidity and the average temperature among all cities. :param data: list of dictionaries with keys \\"city\\" (str), \\"temperature\\" (int), \\"humidity\\" (int) :return: a dictionary with keys \\"hottest_city\\", \\"coldest_city\\", \\"average_temperature\\", \\"most_humid_city\\" and \\"least_humid_city\\". if not data: return { \\"hottest_city\\": None, \\"coldest_city\\": None, \\"average_temperature\\": None, \\"most_humid_city\\": None, \\"least_humid_city\\": None } valid_entries = [entry for entry in data if {\\"city\\", \\"temperature\\", \\"humidity\\"}.issubset(entry.keys())] if not valid_entries: return { \\"hottest_city\\": None, \\"coldest_city\\": None, \\"average_temperature\\": None, \\"most_humid_city\\": None, \\"least_humid_city\\": None } hottest_city = max(valid_entries, key=lambda x: x[\\"temperature\\"])[\\"city\\"] coldest_city = min(valid_entries, key=lambda x: x[\\"temperature\\"])[\\"city\\"] average_temperature = round(sum(entry[\\"temperature\\"] for entry in valid_entries) / len(valid_entries), 1) most_humid_city = max(valid_entries, key=lambda x: x[\\"humidity\\"])[\\"city\\"] least_humid_city = min(valid_entries, key=lambda x: x[\\"humidity\\"])[\\"city\\"] return { \\"hottest_city\\": hottest_city, \\"coldest_city\\": coldest_city, \\"average_temperature\\": average_temperature, \\"most_humid_city\\": most_humid_city, \\"least_humid_city\\": least_humid_city }"},{"question":"You are given an array of integers, where each element appears twice except for one. Write a function that finds the single element that appears only once. Your solution should have a linear runtime complexity and use constant space. Implement a function `findSingleElement(arr)` that takes a list `arr` of integers as input and returns the integer that appears only once. Function signature: ```python def findSingleElement(arr: list) -> int: pass ``` Examples: ```python findSingleElement([2, 2, 3, 2]) -> 3 findSingleElement([0, 1, 0, 1, 0, 1, 99]) -> 99 findSingleElement([7, 3, 5, 4, 5, 3, 4]) -> 7 ``` Constraints: - The input array `arr` will have a length in the range `[1, 10^4]`. - Each integer in `arr` is in the range `[-3 * 10^4, 3 * 10^4]` (inclusive). - There will always be one element that appears only once, while all others appear exactly twice.","solution":"def findSingleElement(arr): Finds the single element that appears only once in an array where each other element appears twice. Uses XOR to achieve linear runtime complexity and constant space complexity. :param arr: List of integers :return: The integer that appears only once result = 0 for num in arr: result ^= num return result"},{"question":"Nikhil is working on a problem and needs your help. He is given an array of integers and an integer X. His task is to find the length of the longest subarray whose sum is less than or equal to X. Write a program to assist Nikhil in solving this problem. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains of a single line of input, an integer N - the size of the array. - Next line contains N integers - the elements of the array. - Next line contains an integer X. -----Output:----- For each test case, output in a single line the length of the longest subarray with sum less than or equal to X. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^4 - 1 leq A[i] leq 10^4 - 1 leq X leq 10^9 -----Sample Input:----- 1 5 1 2 3 4 5 10 -----Sample Output:----- 4 -----EXPLANATION:----- The longest subarray with sum less than or equal to 10 is [1, 2, 3, 4] with length 4.","solution":"def longest_subarray_with_sum_at_most_x(n, arr, x): Returns the length of the longest subarray with sum less than or equal to x. start = 0 current_sum = 0 max_length = 0 for end in range(n): current_sum += arr[end] while current_sum > x and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length def solve(subarrays): Processes all the test cases and returns the results. results = [] for case in subarrays: n, arr, x = case results.append(longest_subarray_with_sum_at_most_x(n, arr, x)) return results"},{"question":"--- Given a list of **integers** and a positive integer `n`, return a new list of integers arranged so that the first `n` largest numbers are sorted in descending order and the rest in ascending order. If you cannot take enough elements from the list, return `None`/`nil`. Examples ```python numbers = [10, 5, 2, 7, -3, 8] n = 3 ==> [10, 8, 7, -3, 2, 5] n = 2 ==> [10, 8, -3, 2, 5, 7] n = 4 ==> [10, 8, 7, 5, -3, 2] n = 7 ==> None # there are only 6 elements in the list ``` Note: the list may contain both positive and negative integers, and the list length can be up to 1000 elements. --- To maintain the same order of any duplicate elements, always pick the first occurrence from the list.","solution":"def arrange_numbers(numbers, n): if len(numbers) < n: return None sorted_numbers = sorted(numbers, reverse=True) largest_n = sorted_numbers[:n] rest = numbers[:] for ln in largest_n: rest.remove(ln) rest.sort() result = largest_n + rest return result"},{"question":"To help Rajesh manage his budget, he developed an app that tracks his daily expenses. Each day, he manually enters the amount he has spent, and the app logs these values. Recently, Rajesh came across the concept of a \\"Sliding Window\\" sum which can calculate the sum of expenses for any given number of consecutive days. Rajesh is excited about this feature and requests you to implement it. Write a program that, given an array of daily expenses and a window size k, computes the sum of expenses for every window of size k in his expenses list. -----Input:----- The first line contains two integers n (number of days, where 1 leq n leq 100000) and k (window size, where 1 leq k leq n). The second line contains n integers representing Rajesh\'s daily expenses, where each expense e_i (0 leq e_i leq 10000). -----Output:----- Output n-k+1 integers, each representing the sum of expenses for each consecutive window of size k. -----Constraints:----- You may assume that the sum of expenses for any given window does not exceed the range of a standard integer. -----Sample Input:----- 7 3 100 200 300 400 500 600 700 -----Sample Output:----- 600 900 1200 1500 1800 -----Explanation:----- For the input, the window size k is 3. So, the sums of expenses for every window of 3 consecutive days are: (100+200+300), (200+300+400), (300+400+500), (400+500+600), and (500+600+700) respectively, which correspond to the output values 600, 900, 1200, 1500, and 1800.","solution":"def sliding_window_sum(n, k, expenses): Returns the list of sums of expenses for every window of size k. Parameters: n (int): number of days k (int): window size expenses (list of int): list of daily expenses Returns: list of int: sums of each window of size k if k > n: return [] window_sums = [] current_sum = sum(expenses[:k]) window_sums.append(current_sum) for i in range(n - k): current_sum = current_sum - expenses[i] + expenses[i + k] window_sums.append(current_sum) return window_sums"},{"question":"An earthquake has struck a city and knocked out power in several areas. You need to help the electrical company distribute power and restore it to as many regions as possible using the given power lines. Each region can be represented as a node in a graph, and the power lines can be represented as the edges between these nodes. Some regions have power initially, and they can spread power to connected regions. # Instructions Given the following inputs: 1. **n** (integer): the number of regions. 2. **edges** (list of lists): a list containing pairs of integers, where each pair represents a bidirectional power line between two regions. 3. **initial_powered** (list of integers): a list of regions that initially have power. Return the total number of regions that can have power restored after running the restoration process. # Example ```python def power_restoration(n, edges, initial_powered): # Your implementation here pass # Example usage n = 6 edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]] initial_powered = [0, 2] print(power_restoration(n, edges, initial_powered)) # Output: 6 ``` # Explanation In this example, all six regions can have their power restored: - Region 0 and Region 2 are initially powered. - Region 0 can spread power to Region 1. - Region 2 can spread power to Region 1, 3, 4, and finally 5. # Constraints - 1 <= n <= 10^5 (the number of regions) - 0 <= len(edges) <= 2*10^5 - 0 <= len(initial_powered) <= n # Implementation Details - You can use any algorithm or data structure which efficiently processes the given constraints, such as breadth-first search (BFS) or depth-first search (DFS). - Make sure the solution is optimized to handle the upper limits of the constraints.","solution":"def power_restoration(n, edges, initial_powered): from collections import deque, defaultdict # Create adjacency list for the undirected graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Use a deque for BFS queue = deque(initial_powered) # Track visited nodes (i.e., powered regions) visited = set(initial_powered) # Perform BFS while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited)"},{"question":"You are given an array of integers and a target number. Write a function that returns a boolean value indicating whether there are two distinct elements in the array that sum up to the target number. If there are two such elements, the function should return `true`; otherwise, it should return `false`. # Function Signature ```python def has_pair_with_sum(arr: list, target: int) -> bool: pass ``` # Input - `arr` (list of integers): The array of integers. - `target` (integer): The target sum you are looking for. # Output - (boolean): `True` if there are any two distinct elements in the array that sum to the target number, otherwise `false`. # Example ```python # Example 1 arr = [10, 15, 3, 7] target = 17 has_pair_with_sum(arr, target) # returns True (because 10 + 7 = 17) # Example 2 arr = [1, 2, 3, 9] target = 8 has_pair_with_sum(arr, target) # returns False (no pairs sum up to 8) ``` # Constraints - Each element in the array can be positive or negative. - The array can contain duplicate values. - The function should have an average Time Complexity of O(n).","solution":"def has_pair_with_sum(arr: list, target: int) -> bool: Returns true if there are two distinct elements in the array that sum up to the target number. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Write a function that takes in a string and returns the number of distinct substrings of the string. The string consists only of lowercase English letters. A substring is defined as any continuous sequence of characters within the original string. For example: - For the input string `\\"abc\\"`, the output should be `6`. The distinct substrings are: `\\"a\\"`, `\\"b\\"`, `\\"c\\"`, `\\"ab\\"`, `\\"bc\\"`, and `\\"abc\\"`. - For the input string `\\"aaa\\"`, the output should be `3`. The distinct substrings are: `\\"a\\"`, `\\"aa\\"`, and `\\"aaa\\"`. Your task is to implement the function `countDistinctSubstrings(s: str) -> int`. Please make sure your solution is efficient and can handle string lengths up to `10^5`. ```python def countDistinctSubstrings(s: str) -> int: # Your code here pass ``` # Constraints: - The input string, `s`, will have a length between `1` and `10^5`. - The string `s` will only consist of lowercase English letters.","solution":"def countDistinctSubstrings(s: str) -> int: Returns the number of distinct substrings of the input string s. # Set to store all distinct substrings substrings = set() # Generate all substrings and add them to the set for i in range(len(s)): for j in range(i+1, len(s)+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"In a new theme park, there is a popular ride called the \\"Tower of Rings\\". This ride consists of a series of rings placed in a straight line, each ring having a certain height. To enjoy the full experience of this ride, participants must start from the first ring and move towards the last ring, jumping from one ring to another. However, there are some conditions for jumping: 1. You can only jump from a ring of height h_i to another ring of height h_j if h_j > h_i. 2. You can make a jump between two rings if the difference in their heights is less than or equal to a given maximum height difference D. Given the heights of the rings and the maximum height difference D, determine the maximum number of rings a participant can visit starting from the first ring. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - The first line of each test case contains an integer N denoting the number of rings. - The second line of each test case contains N space-separated integers representing the heights of the rings h_1, h_2, ..., h_N. - The third line of each test case contains the maximum height difference integer D. -----Output:----- For each test case, print a single integer representing the maximum number of rings that can be visited. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 1000 - 1 leq h_i leq 10^9 - 1 leq D leq 10^9 -----Sample Input:----- 2 4 1 2 3 4 1 5 1 10 15 12 20 5 -----Sample Output:----- 4 3 -----Explanation:----- Test Case 1: - The participant can start from the first ring (height 1), then jump to the second ring (height 2), then to the third ring (height 3), and finally to the fourth ring (height 4). The participant visits all 4 rings. Test Case 2: - The participant can start from the first ring (height 1), then jump to the second ring (height 10). From there, the next jump can be to the fourth ring (height 12), and then no further jumps are possible within the height difference of 5. - The participant visits 3 rings: 1, 10, and 12.","solution":"def max_rings_visited(N, heights, D): dp = [1] * N for i in range(1, N): for j in range(i): if heights[j] < heights[i] and heights[i] - heights[j] <= D: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def tower_of_rings(T, cases): results = [] for i in range(T): N = cases[i][0] heights = cases[i][1] D = cases[i][2] result = max_rings_visited(N, heights, D) results.append(result) return results"},{"question":"Write a function that takes a list of integers and returns the smallest positive integer that is missing from the list. The function should handle both negative and positive values, as well as duplicates. find_smallest_missing_positive([3, 4, -1, 1]) => 2 The array after sorting and removing negative numbers becomes [1, 3, 4]; hence, the smallest missing positive integer is 2. find_smallest_missing_positive([1, 2, 0]) => 3 The sorted array after removing non-positive numbers is [1, 2]; hence, the smallest missing positive integer is 3. find_smallest_missing_positive([7, 8, 9, 11, 12]) => 1 As there are no positive numbers between 1-6, the smallest missing positive integer is 1. Consider the function must return 1 if the array is empty or contains all non-positive numbers.","solution":"def find_smallest_missing_positive(nums): Returns the smallest positive integer that is missing from the list. nums = [num for num in nums if num > 0] n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: pos = nums[i] - 1 nums[i], nums[pos] = nums[pos], nums[i] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given a tree with n nodes. Each node has a value associated with it. A subtree is defined as any connected component that includes a given node and all its descendants. Let\'s define the sum of a subtree rooted at node u as the sum of values of all nodes in that subtree. Your task is to find a node u such that the sum of the values in the subtree rooted at u is maximum. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of nodes in the tree. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 10^9) — the values associated with the nodes. Each of the next n-1 lines contains two integers a_i and b_i (1 le a_i, b_i le n, a_i neq b_i ) — indicating that there is an edge between nodes a_i and b_i. It is guaranteed that the given graph is a tree. -----Output----- Output a single integer — the maximum sum of values in any subtree. -----Example----- Input 5 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 15 -----Note----- In the given example, the tree has 5 nodes. The values of the nodes are 1, 2, 3, 4, 5. We need to select a node such that the sum of the values in its subtree is maximized. Here, if we select node 3, the sum of the subtree of node 3 will be 15, which is the highest possible sum of any subtree in this particular tree formation.","solution":"def max_subtree_sum(n, values, edges): from collections import defaultdict def dfs(node, parent): subtree_sum = values[node - 1] for neighbor in tree[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) max_sums[node] = subtree_sum return subtree_sum tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) max_sums = [0] * (n + 1) dfs(1, -1) return max(max_sums[1:]) # Example usage: n = 5 values = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(max_subtree_sum(n, values, edges)) # Output: 15"},{"question":"The Problem Sarah manages a small library and she wants to provide a feature on the library website that helps users find books based on their reading duration preference. She has a database of books with estimated reading times and needs to filter these books to match the user\'s preference. What To Do Create a `findBook` helper function that takes 1 integer argument which represents the maximum reading duration in minutes. `books` is an array of objects which are formatted as follows: ```python {\'author\': \'Author Name\', \'title\': \'Book Title\', \'reading_time\': 180} ``` The `reading_time` value is given in minutes. The function should output the `title` of the book with the longest reading time in the database that does not exceed the given maximum duration. If there are multiple books with the same longest reading time, return the title of any one of those books. If there are no books matching the criteria, return `None`.","solution":"def findBook(max_duration, books): Finds the title of the book with the longest reading time that does not exceed the given maximum duration in minutes. Parameters: max_duration (int): The maximum reading duration in minutes. books (list of dicts): A list of dictionary objects representing books with keys \'author\', \'title\', and \'reading_time\'. Returns: str: The title of the book with the longest reading time under the max_duration. Returns None if no such book exists. longest_book = None for book in books: if book[\'reading_time\'] <= max_duration: if longest_book is None or book[\'reading_time\'] > longest_book[\'reading_time\']: longest_book = book return longest_book[\'title\'] if longest_book else None"},{"question":"You are given an array of integers `arr` and a positive integer `K`. Your task is to determine the maximum sum of a subarray of length at most `K` where the subarray can be made by rearranging the elements within `K` contiguous elements. For example, given the array [1, 2, 3, 4, 5] and K = 3, the subarrays of length 3 are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. If we can rearrange elements within any of those subarrays, we might want to check the sum after rearranging to find the maximum sum possible. Write a function `maxSubarraySumWithReorder(arr, K)` that returns this maximum sum. Example 1: Input: arr = [1, 2, 3, 4, 5], K = 2 Output: 9 Explanation: We can take the subarray [4, 5] and the maximum sum is 4 + 5 = 9. Example 2: Input: arr = [1, 5, 2, 6, 3], K = 3 Output: 13 Explanation: We can rearrange the subarray [2, 6, 3] to [6, 3, 2], and the maximum sum is 6 + 3 + 2 = 11. But the largest subarray sum we can get is from [5, 2, 6] by rearranging to [6, 5, 2], which gives 13. Example 3: Input: arr = [4, 4, 4, 4, 4], K = 1 Output: 4 Explanation: Since K = 1, we can only take one element at a time, so the maximum sum from any subarray is just 4. Example 4: Input: arr = [10, 9, 8, 7], K = 4 Output: 34 Explanation: We can take the entire array and sum it as it is, the result will be 10 + 9 + 8 + 7 = 34. Note: - 1 <= arr.length <= 100,000 - 1 <= arr[i] <= 10000 - 1 <= K <= arr.length","solution":"def maxSubarraySumWithReorder(arr, K): Function to find the maximum sum of a subarray of length at most K, where the subarray can be made by rearranging elements within K contiguous elements. n = len(arr) max_sum = 0 for i in range(n - K + 1): # Extract the current subarray of length K subarray = arr[i:i+K] # Sort the subarray in descending order sorted_subarray = sorted(subarray, reverse=True) # Calculate the sum of the sorted subarray current_sum = sum(sorted_subarray) # Update max_sum if current_sum is larger max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A company needs a program to keep track of its employees\' working hours to calculate their weekly wages. The company pays a fixed hourly rate for up to 40 hours a week and an overtime rate of 1.5 times the hourly rate for any hours worked beyond 40 hours. Write a program to calculate the total weekly wage for each employee based on their worked hours and hourly rate. -----Input----- - The input consists of multiple lines. - The first line contains an integer T denoting the number of employees. - Each of the next T lines contains two space-separated integers: the number of hours worked H and the hourly rate R for each employee. -----Output----- For each employee, output a single line containing the weekly wage for that employee. -----Constraints----- - 1 le T le 50 - 0 le H le 168 - 1 le R le 1000 -----Example Input----- 4 35 20 40 15 45 30 50 25 -----Example Output----- 700 600 1425 1375 -----Explanation----- Example case 1: The employee worked 35 hours at a rate of 20 per hour. Their wage is 35*20 = 700. Example case 2: The employee worked 40 hours at a rate of 15 per hour. Their wage is 40*15 = 600. Example case 3: The employee worked 45 hours at a rate of 30 per hour. Their wage includes 40 hours at the standard rate plus 5 hours at the overtime rate. Their wage is 40*30 + 5*1.5*30 = 1200 + 225 = 1425. Example case 4: The employee worked 50 hours at a rate of 25 per hour. Their wage includes 40 hours at the standard rate plus 10 hours at the overtime rate. Their wage is 40*25 + 10*1.5*25 = 1000 + 375 = 1375.","solution":"def calculate_weekly_wage(T, hours_rates): Calculate the weekly wage for each employee based on their worked hours and hourly rate. Parameters: T (int): Number of employees hours_rates (list of tuples): Each tuple contains two integers: hours worked (H) and hourly rate (R) for each employee Returns: list of int: Weekly wages for each employee wages = [] for H, R in hours_rates: if H <= 40: wage = H * R else: wage = 40 * R + (H - 40) * 1.5 * R wages.append(wage) return wages"},{"question":"Andrew loves playing with numbers. He recently encountered a number game while solving puzzles, and he found it quite fascinating. The game involves taking an integer and performing a series of transformations on it until he reaches a palindrome or gets stuck in a loop. Your task is to help Andrew determine the number of steps required to reach a palindrome. Here\'s how the transformation works: 1. Take the original number or the last obtained number. 2. Reverse its digits and add the reversed number to the original. 3. Check if the resulting number is a palindrome. 4. If it is a palindrome, return the number of steps taken. Otherwise, repeat the process with the resulting number. A palindrome is a number that reads the same forwards and backward. If the number does not become a palindrome within 1000 steps, return -1 to indicate it gets stuck in a loop. Write a function `find_palindrome_steps(number)` that takes in an integer `number` and returns the number of steps required to reach a palindrome according to the rules mentioned above. If the input is already a palindrome, the function should return 0. Example: input: 87 output: 4 Explanation: 87 (original) -> 165 (step 1) -> 726 (step 2) -> 1353 (step 3) -> 4884 (step 4, palindrome)","solution":"def is_palindrome(num): Check if the number is a palindrome. return str(num) == str(num)[::-1] def find_palindrome_steps(number): Returns the number of steps required to reach a palindrome. If the number does not become a palindrome within 1000 steps, returns -1. steps = 0 while steps < 1000: if is_palindrome(number): return steps reversed_number = int(str(number)[::-1]) number += reversed_number steps += 1 return -1"},{"question":"Write a function `missing_number` that takes a list of `n` distinct numbers taken from the range 0 to `n`. The function should return the only number in the range that is missing from the list. Examples: ``` missing_number([3, 0, 1]) => 2 missing_number([0, 1]) => 2 missing_number([9,6,4,2,3,5,7,0,1]) => 8 ``` You can assume the input list contains no duplicates and exactly one number is missing from the complete range [0, n].","solution":"def missing_number(nums): Returns the missing number in the range [0, n] from the list nums. n = len(nums) expected_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(expected_sum - actual_sum)"},{"question":"Write a function that receives a list of possible stock prices of a given item over a period of time, and decides the best day to buy and the best day to sell to maximize profit. The function should return a list containing the following information: ```python [buy_day, sell_day, max_profit] ``` - `buy_day`: the day to buy the stock (index in the list). - `sell_day`: the day to sell the stock (index in the list). - `max_profit`: the maximum possible profit (if no profit is possible, return 0). The list of stock prices will contain at least one element and the prices will be given for consecutive days. For example: ```python prices1 = [7, 1, 5, 3, 6, 4] # By buying at day 1 (price=1) and selling at day 4 (price=6), profit is 6-1=5. # So the function should return [1, 4, 5]. prices2 = [7, 6, 4, 3, 1] # No day to buy and sell for profit, thus the function will return [0, 0, 0]. prices3 = [2, 4, 1, 7, 5, 3, 6] # The optimal days are to buy on day 2 (price=1) and sell on day 3 (price=7). The profit will be 6. # So the function should return [2, 3, 6]. def max_profit(prices): n = len(prices) if n < 2: return [0, 0, 0] min_price = prices[0] buy_day = 0 sell_day = 0 max_profit = 0 for i in range(1, n): if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price sell_day = i buy_day = prices.index(min_price) if prices[i] < min_price: min_price = prices[i] if max_profit == 0: return [0, 0, 0] return [buy_day, sell_day, max_profit] # Test cases prices1 = [7, 1, 5, 3, 6, 4] print(max_profit(prices1)) # Output: [1, 4, 5] prices2 = [7, 6, 4, 3, 1] print(max_profit(prices2)) # Output: [0, 0, 0] prices3 = [2, 4, 1, 7, 5, 3, 6] print(max_profit(prices3)) # Output: [2, 3, 6] ``` The function `max_profit()` will precisely provide the best buying and selling days along with the maximum achievable profit.","solution":"def max_profit(prices): n = len(prices) if n < 2: # You need at least two days for a valid transaction return [0, 0, 0] min_price = prices[0] buy_day = 0 sell_day = 0 max_profit = 0 for i in range(1, n): if prices[i] - min_price > max_profit: max_profit = prices[i] - min_price buy_day = prices.index(min_price) sell_day = i if prices[i] < min_price: min_price = prices[i] if max_profit == 0: return [0, 0, 0] return [buy_day, sell_day, max_profit]"},{"question":"Task Design an application to compress a given string based on the lengths of consecutive characters to reduce its size. # What to do? Given a string of characters, compress the string by replacing sequences of the same character with that character followed by the count of occurrences. This can be beneficial for reducing the size of the string when there are multiple repeating characters. # Steps: 1. Traverse the input string and count the occurrences of each character until a different character is encountered. 2. Append the character and its count to the result string. 3. Continue traversing until the end of the string. 4. Return the compressed string. # Important notes: - If the compressed string is not smaller than the original string, return the original string. - The string contains only lowercase alphabetic characters. # Examples: ``` Input: \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" Input: \\"abcd\\" Output: \\"abcd\\" Input: \\"aaabbbcccaaa\\" Output: \\"a3b3c3a3\\" Input: \\"a\\" Output: \\"a\\" ``` Happy compressing! 😊","solution":"def compress_string(s): Compresses the string by replacing sequences of the same character with that character followed by the count of occurrences. If the compressed string is not shorter than the original string, returns the original string. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # Append the last set of characters compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Pascal\'s Triangle Row Calculation Input A single integer: ``` 0 ≤ n ≤ 34 ``` Output A list of integers representing the nth row of Pascal\'s Triangle. Description Pascal\'s Triangle is a triangular array of numbers, where the numbers at the boundary of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. The nth row of Pascal\'s Triangle contains the coefficients of the binomial expansion (a + b)ⁿ. Your task is to compute and return the nth row of Pascal\'s Triangle as a list. For example, the 0th row is [1], the 1st row is [1, 1], the 2nd row is [1, 2, 1], and so on. Note that the row index `n` starts from 0. Example # Example 1 Input: ``` 0 ``` Output: ``` [1] ``` # Example 2 Input: ``` 3 ``` Output: ``` [1, 3, 3, 1] ``` # Example 3 Input: ``` 5 ``` Output: ``` [1, 5, 10, 10, 5, 1] ```","solution":"def pascal_row(n): Returns the nth row of Pascal\'s Triangle (0-indexed). row = [1] for k in range(1, n+1): num = row[k-1] * (n - k + 1) // k row.append(num) return row"},{"question":"Implement a function `reverseWords` that takes a string as input and returns the string with the order of words reversed. Words are defined as sequences of non-space characters. The function should handle multiple spaces between words and trailing or leading spaces appropriately. Example: ``` Input: \\" The sky is blue \\" Output: \\"blue is sky The\\" ```","solution":"def reverseWords(s): Reverses the order of words in a given string s. Args: s (str): Input string. Returns: str: String with the order of words reversed. # Split the string by spaces and filter out empty strings words = list(filter(lambda x: x != \'\', s.split(\' \'))) # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space return \' \'.join(reversed_words)"},{"question":"Alex loves gaming and solving puzzles. He recently played a game where he encountered a particularly tricky puzzle involving strings. Given a string `s` consisting of lowercase English letters, he has to determine if the string can be rearranged such that any two adjacent characters are different from each other. If such a rearrangement is possible, return any one valid rearranged string. If it\'s not possible, return \\"IMPOSSIBLE\\". -----Input----- First line contains an integer T, the number of test cases. Each of the next T lines contains a single string `s`. -----Output----- For each test case, output a single line - either a valid rearranged string or the word \\"IMPOSSIBLE\\". -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ |s| ≤ 1000 -----Example----- Input: 3 aab aaab geeksforgeeks Output: aba IMPOSSIBLE gksrfoegskeeg -----Explanation----- Example case 1. One possible rearrangement of \\"aab\\" is \\"aba\\", where no two adjacent characters are the same. Example case 2. It\'s impossible to rearrange \\"aaab\\" so that no two adjacent characters are the same. Example case 3. There are multiple possible rearrangements for \\"geeksforgeeks\\", one of which is \\"gksrfoegskeeg\\".","solution":"from collections import Counter import heapq def reorganize_string(s): counter = Counter(s) max_heap = [(-count, char) for char, count in counter.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged = \'\'.join(result) if len(rearranged) != len(s): return \\"IMPOSSIBLE\\" return rearranged def solve_puzzles(T, test_cases): results = [] for s in test_cases: results.append(reorganize_string(s)) return results"},{"question":"=====Function Descriptions===== find_isbn(text) In Python, the find_isbn(text) function can be used to extract and validate whether a given text contains a valid ISBN-10 or ISBN-13. ISBN-10 An ISBN-10 is a ten-digit number, which may contain hyphens, and is validated by the following formula: Sum of (digit * (11 - position)) % 11 == 0 Example: \'0-306-40615-2\' ISBN-13 An ISBN-13 is a thirteen-digit number, which may also contain hyphens, and is validated by the following formula: Sum of (digit * (1 or 3 alternately from the left)) % 10 == 0 Example: \'978-0-306-40615-7\' =====Problem Statement===== You are given a string that may contain an ISBN (either ISBN-10 or ISBN-13). Your task is to write a function find_isbn(text) that extracts the first valid ISBN (either ISBN-10 or ISBN-13) from the text and returns it. If no valid ISBN is present, return None. Ignore any ISBNs that do not match the above validation criteria or contain invalid characters. =====Output Format===== If a valid ISBN is found, print its format as found in the text (including hyphens). If no valid ISBN exists, print None.","solution":"import re def is_valid_isbn_10(isbn): Check if the given ISBN-10 is valid isbn = isbn.replace(\'-\', \'\') if len(isbn) != 10 or not isbn[:-1].isdigit() or (isbn[-1] not in \'0123456789X\'): return False total = 0 for i, char in enumerate(isbn): if char == \'X\': total += 10 * (10 - i) else: total += int(char) * (10 - i) return total % 11 == 0 def is_valid_isbn_13(isbn): Check if the given ISBN-13 is valid isbn = isbn.replace(\'-\', \'\') if len(isbn) != 13 or not isbn.isdigit(): return False total = 0 for i, char in enumerate(isbn): if i % 2 == 0: total += int(char) * 1 else: total += int(char) * 3 return total % 10 == 0 def find_isbn(text): Extract and validate an ISBN from the given text isbn_10_pattern = r\'b(d[-d]{8,12}d|X)b\' isbn_13_pattern = r\'b(d[-d]{12,16}d)b\' # Find all potential ISBN-10s and ISBN-13s, interleaved candidates = re.findall(f\\"({isbn_13_pattern })|({isbn_10_pattern})\\", text) if not candidates: return None # Flatten the list and filter out empty strings candidates = [item for sublist in candidates for item in sublist if item] for candidate in candidates: if re.match(isbn_13_pattern, candidate) and is_valid_isbn_13(candidate): return candidate if re.match(isbn_10_pattern, candidate) and is_valid_isbn_10(candidate): return candidate return None"},{"question":"Decoding the Ancient Script An archeologist has discovered an ancient tablet containing a sequence of symbols and wants to decode the message it holds. The symbols are represented by unique characters, and the decoding process maps a sequence of interrelated characters to specific words. The goal is to translate the entire sequence into meaningful words. # How it worked The symbols are grouped into segments, each representing a word in the decoded message. The length of each segment is variable and determined by a predefined list of lengths. # Kata Task `symbols` is a string representing a sequence of symbols, and `lengths` is a list/array of integers representing the length of each word. Implement the `decode_message` method/function to return the decoded message as a list/array of words. # Example Given * `symbols = \\"abcde12345xyz\\"` * `lengths = [5, 5, 3]` So ``` \\"abcde12345xyz\\" ``` is decoded into ``` [\\"abcde\\", \\"12345\\", \\"xyz\\"] ``` Note: * The sum of the lengths in `lengths` will always be equal to the length of `symbols`. # Additional Notes * Each segment in `symbols` always forms a valid word according to the given `lengths`. * The `lengths` list will not be empty and will contain only positive integers. * Assume the `symbols` string will contain only alphanumeric characters. **Answer:** ```python def decode_message(symbols, lengths): result = [] start = 0 for length in lengths: end = start + length result.append(symbols[start:end]) start = end return result ``` **Example Usage:** ```python symbols = \\"abcde12345xyz\\" lengths = [5, 5, 3] print(decode_message(symbols, lengths)) # Outputs: [\'abcde\', \'12345\', \'xyz\'] ``` Good Luck.","solution":"def decode_message(symbols, lengths): Decodes the symbols string into segments based on the provided lengths. :param symbols: str, a string representing a sequence of symbols :param lengths: list of int, lengths of each segment that form words :return: list of str, decoded message as list of words result = [] start = 0 for length in lengths: end = start + length result.append(symbols[start:end]) start = end return result"},{"question":"Create a function that takes an input string describing a move in a grid and returns the final coordinates after making the move. The grid starts at (0, 0). The moves are described in the following format: - \\"up X\\": Move X steps up. - \\"down X\\": Move X steps down. - \\"left X\\": Move X steps to the left. - \\"right X\\": Move X steps to the right. The function should accurately parse the number of steps and return the final coordinates as a tuple (x, y). Examples: ```python move(\\"up 5, down 3, left 2, right 4\\") returns (2, 2) move(\\"up 1, down 1, left 1, right 1\\") returns (0, 0) move(\\"right 3, right 1, up 2\\") returns (4, 2) move(\\"down 3, up 3, left 2\\") returns (-2, 0) ``` Note: - The input string always provides valid instructions. - Assume the input string is well-formed, with \\"X\\" being a positive integer. - The order of operations in the string should be followed sequentially.","solution":"def move(instructions): Takes an input string describing moves in a grid and returns the final coordinates. Parameters: instructions (str): A string of instructions in the format \\"direction X\\". Returns: tuple: Final coordinates after making the moves. x, y = 0, 0 moves = instructions.split(\', \') for move in moves: direction, steps = move.split() steps = int(steps) if direction == \\"up\\": y += steps elif direction == \\"down\\": y -= steps elif direction == \\"left\\": x -= steps elif direction == \\"right\\": x += steps return (x, y)"},{"question":"Create a function `merge_and_sort()` that takes two lists as arguments, merges them into one list, and then returns a sorted version of the merged list. If either of the arguments is not a list, the function should return `None`. Example: ``` merge_and_sort([3, 1, 4], [2, 5, 0]) ``` should return: ``` [0, 1, 2, 3, 4, 5] ``` However, ``` merge_and_sort([3, 1, 4], \\"string\\") ``` should return: ``` None ```","solution":"def merge_and_sort(list1, list2): Merges two lists and returns a sorted version of the merged list. If either of the arguments is not a list, returns None. if not isinstance(list1, list) or not isinstance(list2, list): return None merged_list = list1 + list2 return sorted(merged_list)"},{"question":"Given a list of integers nums, find the length of the shortest subarray, that when sorted, makes the entire list sorted in non-decreasing order. Return the length of the shortest subarray. Example 1: Input: nums = [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: Sorting the subarray [6, 4, 8, 10, 9] makes the whole list sorted in non-decreasing order. Example 2: Input: nums = [1, 2, 3, 4] Output: 0 Explanation: The entire list is already sorted. Example 3: Input: nums = [1, 3, 2, 2, 2] Output: 4 Explanation: Sorting the subarray [3, 2, 2, 2] makes the whole list sorted in non-decreasing order. Constraints: 1 <= nums.length <= 10^4 -10^5 <= nums[i] <= 10^5","solution":"def find_unsorted_subarray(nums): Returns the length of the shortest subarray, that when sorted, makes the entire list sorted in non-decreasing order. n = len(nums) if n <= 1: return 0 start, end = -1, -1 max_val, min_val = float(\'-inf\'), float(\'inf\') for i in range(n): if nums[i] < max_val: end = i else: max_val = nums[i] for i in range(n-1, -1, -1): if nums[i] > min_val: start = i else: min_val = nums[i] if start == -1: return 0 else: return end - start + 1"},{"question":"Your task is to implement a function that converts a given Roman numeral to its corresponding integer value. Roman numerals are represented by the following characters: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are usually written from largest to smallest from left to right. However, the numeral for 4 is not \\"IIII\\", and 9 is not \\"VIIII.\\" Instead, the number 4 is written as \\"IV\\". Similarly, 9 is written as \\"IX\\". There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Your function should take a single string representing a Roman numeral as input and return its corresponding integer value. -----Input----- A string s representing a Roman numeral. The input string is guaranteed to be a valid Roman numeral between 1 and 3999. -----Output----- An integer representing the value of the Roman numeral. -----Example----- Input: \\"III\\" Output: 3 Input: \\"IV\\" Output: 4 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Input: \\"MCMXCIV\\" Output: 1994","solution":"def roman_to_integer(s): Convert a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_values[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"A company manufactures lights and needs to optimize their electricity consumption. Given an array where each element represents the power consumption of a light on a particular day, find the maximum power consumption that can be achieved under the condition that no two lights can be on for two consecutive days. # Function Signature ```python def max_non_consecutive_power(consumptions: List[int]) -> int: ``` # Input - A list of integers, `consumptions`, where `consumptions[i]` represents the power consumption of a light on the i-th day. - The length of the input array is [1, 1000]. - Elements in the given list will be in range [1, 1000]. # Output - Return an integer representing the maximum power consumption under the given constraints. # Example 1 Input ```python consumptions = [3, 2, 5, 10, 7] ``` Output ```python 15 ``` Explanation Selecting the lights on days 1, 3, and 5 results in the maximum consumption of 3 + 5 + 7 = 15. # Example 2 Input ```python consumptions = [3, 2, 7, 10] ``` Output ```python 13 ``` Explanation Selecting the lights on days 1 and 4 results in the maximum consumption of 3 + 10 = 13. # Note You can assume that the optimal solution will always exist for the given constraints. Your implementation should aim for efficient performance, ideally O(n) time complexity.","solution":"from typing import List def max_non_consecutive_power(consumptions: List[int]) -> int: Calculate the maximum power consumption under the constraint that no two lights can be on for two consecutive days. if not consumptions: return 0 n = len(consumptions) if n == 1: return consumptions[0] # We use two variables to store the maximum power up to two previous days include = consumptions[0] # Choosing the current element exclude = 0 # Not choosing the current element for i in range(1, n): # current max excluding i (either exclude[i-1] or include[i-1]) new_exclude = max(include, exclude) # current max including i include = exclude + consumptions[i] exclude = new_exclude return max(include, exclude)"},{"question":"Consider a string S of length N consisting of lowercase English letters. Count the number of pairs of indices (i, j) such that 1 ≤ i < j ≤ N and the substring S[i:j] (inclusive of both i and j) is a palindrome. A palindrome is a string that reads the same forward and backward. ----- Constraints ----- - 1 ≤ N ≤ 2000 - S consists of only lowercase English letters. ----- Input ----- The input consists of a single string S. ----- Output ----- Output the number of pairs (i, j) for which the substring S[i:j] is a palindrome. ----- Sample Input ----- ababa ----- Sample Output ----- 7 Explanation: The 7 palindromic substrings are: 1. \\"aba\\" (indices 1 to 3) 2. \\"bab\\" (indices 2 to 4) 3. \\"aba\\" (indices 3 to 5) 4. \\"ababa\\" (indices 1 to 5) 5. \\"a\\" (indices 1 to 1) 6. \\"b\\" (indices 2 to 2) 7. \\"a\\" (indices 3 to 3) (Note that the other single character substrings like \\"a\\" at indices 4 and 5, and \\"b\\" at index 4 are also palindromic, contributing to the total count of 7.)","solution":"def count_palindromic_substrings(S): This function receives a string S and counts the number of palindromic substrings within it. N = len(S) count = 0 # Initial dp table to store palindrome status dp = [[False] * N for _ in range(N)] # Single letters are palindromes for i in range(N): dp[i][i] = True count += 1 # Check two-letter palindromes for i in range(N-1): if S[i] == S[i+1]: dp[i][i+1] = True count += 1 # Check palindromes of length 3 and more for length in range(3, N+1): for start in range(N-length+1): end = start + length - 1 if S[start] == S[end] and dp[start+1][end-1]: dp[start][end] = True count += 1 return count"},{"question":"Write a function `mergeIntervals`/`merge_intervals` that takes a list of intervals represented as tuples `(start, end)` and merges any overlapping intervals. The resulting intervals should be returned as a list of tuples, ordered by the start value of each interval. For example, ```python mergeIntervals([(1, 3), (2, 4), (5, 7), (6, 8)]) ``` should return `[(1, 4), (5, 8)]`. Another example, ```python mergeIntervals([(1, 10), (2, 6), (8, 10), (15, 18)]) ``` should return `[(1, 10), (15, 18)]`.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of merged intervals. Args: intervals (list of tuple): A list where each element is a tuple (start, end) describing an interval. Returns: list of tuple: A list of merged intervals sorted by the start value. if not intervals: return [] # Sort intervals by their start value intervals.sort(key=lambda x: x[0]) merged = [] start, end = intervals[0] for i in range(1, len(intervals)): current_start, current_end = intervals[i] if current_start <= end: # There is an overlap, so we merge the intervals end = max(end, current_end) else: # No overlap, so we add the previously merged interval and start a new one merged.append((start, end)) start, end = current_start, current_end # Add the last merged interval merged.append((start, end)) return merged"},{"question":"Create a function dailyCalories that calculates the daily caloric intake for a person based on their activity level, age, gender, and weight. This function should take four arguments: activity_level - a string that can be \\"sedentary\\", \\"lightly active\\", \\"moderately active\\", or \\"very active\\"; age - integer representing the person\'s age in years; gender - a string that can be either \\"male\\" or \\"female\\"; weight - weight in kilograms; This function should return an integer (daily caloric intake). Calculate the caloric intake based on the following: - For males under 30: - sedentary: weight * 30 - lightly active: weight * 35 - moderately active: weight * 40 - very active: weight * 45 - For males between 30 and 60: - sedentary: weight * 28 - lightly active: weight * 33 - moderately active: weight * 38 - very active: weight * 43 - For males over 60: - sedentary: weight * 25 - lightly active: weight * 30 - moderately active: weight * 35 - very active: weight * 40 - For females under 30: - sedentary: weight * 25 - lightly active: weight * 30 - moderately active: weight * 35 - very active: weight * 40 - For females between 30 and 60: - sedentary: weight * 23 - lightly active: weight * 28 - moderately active: weight * 33 - very active: weight * 38 - For females over 60: - sedentary: weight * 20 - lightly active: weight * 25 - moderately active: weight * 30 - very active: weight * 35 Examples: ```python daily_calories(\\"sedentary\\", 25, \\"male\\", 70) # 2100 daily_calories(\\"moderately active\\", 45, \\"female\\", 60) # 1980 daily_calories(\\"very active\\", 75, \\"male\\", 80) # 3200 daily_calories(\\"lightly active\\", 65, \\"female\\", 55) # 1375 ```","solution":"def daily_calories(activity_level, age, gender, weight): if gender == \\"male\\": if age < 30: if activity_level == \\"sedentary\\": return weight * 30 elif activity_level == \\"lightly active\\": return weight * 35 elif activity_level == \\"moderately active\\": return weight * 40 elif activity_level == \\"very active\\": return weight * 45 elif 30 <= age <= 60: if activity_level == \\"sedentary\\": return weight * 28 elif activity_level == \\"lightly active\\": return weight * 33 elif activity_level == \\"moderately active\\": return weight * 38 elif activity_level == \\"very active\\": return weight * 43 else: # age > 60 if activity_level == \\"sedentary\\": return weight * 25 elif activity_level == \\"lightly active\\": return weight * 30 elif activity_level == \\"moderately active\\": return weight * 35 elif activity_level == \\"very active\\": return weight * 40 else: # gender == \\"female\\" if age < 30: if activity_level == \\"sedentary\\": return weight * 25 elif activity_level == \\"lightly active\\": return weight * 30 elif activity_level == \\"moderately active\\": return weight * 35 elif activity_level == \\"very active\\": return weight * 40 elif 30 <= age <= 60: if activity_level == \\"sedentary\\": return weight * 23 elif activity_level == \\"lightly active\\": return weight * 28 elif activity_level == \\"moderately active\\": return weight * 33 elif activity_level == \\"very active\\": return weight * 38 else: # age > 60 if activity_level == \\"sedentary\\": return weight * 20 elif activity_level == \\"lightly active\\": return weight * 25 elif activity_level == \\"moderately active\\": return weight * 30 elif activity_level == \\"very active\\": return weight * 35"},{"question":"You are given a long sequence of positive integers. Your task is to determine if there exists a contiguous subarray whose sum is exactly equal to a given integer `S`. -----Input----- The first line of the input contains a single integer corresponding to the number of test cases `t` (1 ≤ t ≤ 10^4). Each test case contains two lines. The first line contains two space-separated integers `n` and `S` (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^12) — the length of the array and the target sum, respectively. The second line contains `n` space-separated integers representing the elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 10^6. -----Output----- For each test case, output a single line containing either \\"yes\\" if there exists a contiguous subarray whose sum equals to `S`, or \\"no\\" otherwise (without quotes). -----Examples----- Input 3 5 12 1 2 3 7 5 5 15 1 2 3 7 5 5 5 1 2 3 7 5 Output yes yes yes -----Note----- Sample 1. There exists a contiguous subarray [2, 3, 7] summing to 12. Sample 2. There exists a contiguous subarray [1, 2, 3, 7, 2] summing to 15. Sample 3. There exists a contiguous subarray [5] summing to 5.","solution":"def check_subarray_sum(t, test_cases): results = [] for i in range(t): n, S = test_cases[i][0] array = test_cases[i][1] current_sum = 0 start = 0 found = False for end in range(n): current_sum += array[end] while current_sum > S and start <= end: current_sum -= array[start] start += 1 if current_sum == S: found = True break if found: results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Write a function to manage an inventory system for a shop. The function should take two parameters: the current inventory (a dictionary with item names as keys and quantities as values) and a list of transactions. * Each transaction is a dictionary with \'item\', \'type\' (either \'add\' or \'remove\'), and \'quantity\'. * The function should update the inventory based on the transactions. * If a \'remove\' transaction tries to remove more items than are available, leave that item unchanged and note the failed transaction. **The function should return two values:** * The updated inventory (a dictionary). * A list of failed transactions where items were not removed due to insufficient stock. # Example ```python # Input: current_inventory = {\'apple\': 10, \'banana\': 5, \'orange\': 7} transactions = [ {\'item\': \'apple\', \'type\': \'remove\', \'quantity\': 3}, {\'item\': \'banana\', \'type\': \'add\', \'quantity\': 2}, {\'item\': \'orange\', \'type\': \'remove\', \'quantity\': 10}, {\'item\': \'pear\', \'type\': \'add\', \'quantity\': 1} ] # Expected Output: updated_inventory = {\'apple\': 7, \'banana\': 7, \'orange\': 7, \'pear\': 1} failed_transactions = [{\'item\': \'orange\', \'quantity\': 10}] ```","solution":"def manage_inventory(current_inventory, transactions): failed_transactions = [] for transaction in transactions: item = transaction[\'item\'] type_ = transaction[\'type\'] quantity = transaction[\'quantity\'] if type_ == \'add\': if item in current_inventory: current_inventory[item] += quantity else: current_inventory[item] = quantity elif type_ == \'remove\': if item in current_inventory and current_inventory[item] >= quantity: current_inventory[item] -= quantity else: failed_transactions.append({\'item\': item, \'quantity\': quantity}) return current_inventory, failed_transactions"},{"question":"A company wants to analyze the activity level of their employees based on their key card swipes. Each employee can swipe in or swipe out multiple times during the day. Your task is to write a function `max_active_employees` that determines the maximum number of employees that were in the building at the same time, given the key card swipe data, following these constraints: * If an employee swipes in without swiping out first, ignore the second swipe in. * If an employee swipes out without swiping in first, ignore the swipe out. Write a function `max_active_employees` that takes a list of tuples representing swipe events `(\'time\', \'in\' or \'out\')` and returns an integer representing the maximum number of simultaneously active employees. INPUTS: - `swipe_data` : List of tuples, where each tuple contains a string representing time in \\"HH:MM\\" format and a string either \'in\' or \'out\'. OUTPUT: - An integer representing the maximum number of employees in the building at the same time. Example: ```python swipe_data = [(\\"08:00\\", \\"in\\"), (\\"09:00\\", \\"in\\"), (\\"09:30\\", \\"out\\"), (\\"10:00\\", \\"in\\"), (\\"11:30\\", \\"out\\"), (\\"12:00\\", \\"in\\")] max_active_employees(swipe_data) # should return 2 ```","solution":"def max_active_employees(swipe_data): active_count = 0 max_active = 0 in_count = {} out_count = {} for time, event in swipe_data: if event == \'in\': if time not in in_count: in_count[time] = 0 in_count[time] += 1 else: if time not in out_count: out_count[time] = 0 out_count[time] += 1 times = sorted(set(list(in_count.keys()) + list(out_count.keys()))) for time in times: if time in in_count: active_count += in_count[time] if time in out_count: active_count -= out_count[time] max_active = max(max_active, active_count) return max_active"},{"question":"You are given a list of words and are required to write a function that finds the rarest word. The rarest word is defined as the word that occurs the fewest number of times in the list. If there are multiple words with the same lowest frequency, return the lexicographically smallest word among them. The input is a list of lower-case words and there will be at least one word in the list. ``` e.g. if the input is [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"banana\\", \\"durian\\"] the rarest word is \\"cherry\\" because it appears only once. another example: e.g. if the input is [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"banana\\", \\"cherry\\"] the rarest word is \\"apple\\" and \\"banana\\" and \\"cherry\\" all occur twice, so \\"apple\\" (which is lexicographically smallest) should be chosen. ``` Write a function `rarest_word(words)` to complete the task. You can assume that the list is non-empty and its length does not exceed 10^6 elements. ```python def rarest_word(words: List[str]) -> str: # Your implementation here pass # Sample Test cases assert rarest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"banana\\", \\"durian\\"]) == \\"cherry\\" assert rarest_word([\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"banana\\", \\"cherry\\"]) == \\"apple\\" assert rarest_word([\\"a\\"]) == \\"a\\" assert rarest_word([\\"banana\\", \\"cherry\\", \\"banana\\", \\"durian\\", \\"apple\\", \\"cherry\\"]) == \\"apple\\" ```","solution":"from typing import List from collections import Counter def rarest_word(words: List[str]) -> str: Returns the rarest word in the list of words. If there are multiple words with the same lowest frequency, the lexicographically smallest word is returned. word_counts = Counter(words) min_count = min(word_counts.values()) rarest_words = [word for word, count in word_counts.items() if count == min_count] return min(rarest_words)"},{"question":"=====Problem Statement===== You are given a string consisting of lowercase English letters. Your task is to determine the length of the longest substring without repeating characters. =====Input Format===== A single line containing the string. =====Constraints===== 1 ≤ Length of the string ≤ 1000 =====Output Format===== Output a single integer, the length of the longest substring without repeating characters. Examples: If the input string is \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has a length of 3. If the input string is \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", which has a length of 1. If the input string is \\"pwwkew\\", the longest substring without repeating characters is \\"wke\\" or \\"kew\\", both having a length of 3.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Task: Write a function `pattern_count` that takes a string `text` and a string `pattern`, and returns the number of times the `pattern` appears in `text`. The function should count overlapping patterns as well. Both `text` and `pattern` will contain only lowercase alphabets. What it looks like: ```python pattern_count(text: str, pattern: str) -> int ``` Some examples: ```python pattern_count(\\"ababa\\", \\"aba\\") #=> 2 pattern_count(\\"aaaa\\", \\"aa\\") #=> 3 pattern_count(\\"abc\\", \\"d\\") #=> 0 ``` Explanation: - In the string \\"ababa\\", the pattern \\"aba\\" appears twice at positions 0 and 2. - In the string \\"aaaa\\", the pattern \\"aa\\" appears thrice at positions 0, 1, and 2. - In the string \\"abc\\", the pattern \\"d\\" does not appear.","solution":"def pattern_count(text: str, pattern: str) -> int: Returns the number of times the pattern appears in text, including overlapping patterns. count = 0 pat_len = len(pattern) for i in range(len(text) - pat_len + 1): if text[i:i + pat_len] == pattern: count += 1 return count"},{"question":"Peter is practicing his coding skills with arrays and needs your help. He is given an array of integers and he needs to perform a specific transformation on the array and return the new array. The transformation involves moving all the zeros to the end of the array while maintaining the order of the other elements. Help Peter write the code to achieve this transformation. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output:----- For each test case, output the transformed array in a single line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - -1000 leq text{Element in array} leq 1000 -----Sample Input:----- 2 5 0 1 0 3 12 6 4 0 0 5 0 6 -----Sample Output:----- 1 3 12 0 0 4 5 6 0 0 0","solution":"def move_zeros_to_end(arr): Moves all zeros in the array to the end while maintaining the order of other elements. non_zero_elements = [x for x in arr if x != 0] zero_elements = [x for x in arr if x == 0] return non_zero_elements + zero_elements def transform_arrays(test_cases): Transforms each test case array by moving zeros to the end. Args: test_cases (list): List of tuples where each tuple contains the number of elements and the array. Returns: list: List of transformed arrays. results = [] for N, arr in test_cases: transformed_array = move_zeros_to_end(arr) results.append(transformed_array) return results # Sample Input T = 2 test_cases_input = [ (5, [0, 1, 0, 3, 12]), (6, [4, 0, 0, 5, 0, 6]) ] # Process the test cases results = transform_arrays(test_cases_input) # Output the transformed arrays for result in results: print(\' \'.join(map(str, result)))"},{"question":"You are given two arrays, \'travelTime\' and \'maxStay\'. \'travelTime[i]\' represents the time in minutes it takes to travel from location i to location i+1, returning to the first location after the last one. \'maxStay[i]\' represents the maximum allowable stay time in minutes at each respective location. A traveler starts at location 0 and needs to make a complete round trip to all locations, returning to the starting point. Determine the maximum time the traveler can spend in total on their journey, including both traveling and staying times, without exceeding any location\'s maximum stay time. Return -1 if it\'s impossible to complete the round trip within the given constraints. Example: Input: travelTime = [5, 10, 15] maxStay = [20, 25, 30] Output: 100 Explanation: The optimal strategy is to spend 20 minutes at location 0, 25 minutes at location 1, and 30 minutes at location 2, with the total travel time being 5 + 10 + 15 = 30 minutes. So, the total time spent is 20 + 25 + 30 + 30 = 105 minutes, within the constraints of staying times. Constraints: 1 <= travelTime.length, maxStay.length <= 1000 1 <= travelTime[i], maxStay[i] <= 10^4","solution":"def max_travel_time(travelTime, maxStay): Calculate the maximum time the traveler can spend in total on their journey. :param travelTime: List of travel times between locations. :param maxStay: List of maximum stay times at each location. :return: The maximum time spent on the journey, including travel and stay times, or -1 if it\'s impossible. total_travel_time = sum(travelTime) total_stay_time = sum(maxStay) # Since the traveler needs to return to the starting point, the full journey includes all travel times twice. # The total available time must be less than the sum of all max stays and total travel times. if total_travel_time > total_stay_time: return -1 return total_travel_time + total_stay_time"},{"question":"Sarah is a biologist studying the cells of a certain species. She collects data on various cell types and their properties. Each cell type has n different properties, and each property is represented by a non-negative integer value between 0 and 100 inclusive. She wants to know which cell type has the highest uniqueness score. The uniqueness score of a cell type is defined as the number of distinct values among its properties. # Input The first line contains a single integer n (1 ≤ n ≤ 100), the number of properties each cell type has. The second line contains a single integer m (1 ≤ m ≤ 10^5), the number of cell types. Then follows m lines, each containing n integers representing the properties of a cell type. # Output Output a single integer, which is the 1-based index of the cell type with the highest uniqueness score. If there is a tie, output the smallest index. # Examples Input 4 3 1 2 3 4 3 3 3 3 0 1 2 1 Output 1 Input 5 2 0 0 0 0 0 0 1 2 3 4 Output 2 # Note For the first sample input: - Cell type 1 has properties [1, 2, 3, 4], with a uniqueness score of 4. - Cell type 2 has properties [3, 3, 3, 3], with a uniqueness score of 1. - Cell type 3 has properties [0, 1, 2, 1], with a uniqueness score of 3. Thus, the first cell type has the highest uniqueness score. For the second sample input: - Cell type 1 has properties [0, 0, 0, 0, 0], with a uniqueness score of 1. - Cell type 2 has properties [0, 1, 2, 3, 4], with a uniqueness score of 5. Thus, the second cell type has the highest uniqueness score.","solution":"def highest_uniqueness_score(n, m, cells): Finds the cell type with the highest uniqueness score. Args: n (int): The number of properties each cell type has. m (int): The number of cell types. cells (list of list of int): A list of cell types, each represented by a list of properties. Returns: int: The 1-based index of the cell type with the highest uniqueness score. max_unique_score = -1 best_cell_index = -1 for index, cell in enumerate(cells): unique_score = len(set(cell)) if unique_score > max_unique_score: max_unique_score = unique_score best_cell_index = index + 1 return best_cell_index"},{"question":"# Matrix Diagonal Sum Difference The function is named `diagonalSumDifference` or `diagonal_sum_difference`, depending on the language. Its parameter is `matrix`, a 2-dimensional list (or array) of integers where: - `matrix` has `n` rows and `n` columns (`n >= 1`), making it a square matrix. Your task is to calculate the absolute difference between the sums of the diagonals of the square matrix. - The primary diagonal is the one running from the top-left to the bottom-right. - The secondary diagonal is the one running from the top-right to the bottom-left. The function should return an integer representing the absolute difference. # Example ``` Example 1: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 0 Explanation: Primary diagonal sum = 1 + 5 + 9 = 15 Secondary diagonal sum = 3 + 5 + 7 = 15 Absolute difference = |15 - 15| = 0 Example 2: Input: matrix = [ [5, 3, 1], [3, 6, 2], [9, 8, 3] ] Output: 10 Explanation: Primary diagonal sum = 5 + 6 + 3 = 14 Secondary diagonal sum = 1 + 6 + 9 = 16 Absolute difference = |14 - 16| = 2 ``` # Constraints - The matrix is guaranteed to be a square matrix. - Values of elements in the matrix are between `-100` and `100`. # Note Ensure the function handles edge cases such as a `1x1` matrix correctly. The overall complexity should be `O(n)`, assuming that `n` is the length of a row (or column) in the `n x n` matrix.","solution":"def diagonal_sum_difference(matrix): Returns the absolute difference between the sums of the primary and secondary diagonals of a square matrix. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n-1-i] return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"Determine the longest substring without repeating characters. Given a string, find the length of the longest substring without repeating characters. The string may contain any type of characters, including punctuation and spaces. Input A normal string (not empty). Output An integer representing the length of the longest substring without repeating characters. Example longest_unique_substring(\\"abcabcbb\\") # should return 3 longest_unique_substring(\\"bbbbb\\") # should return 1 longest_unique_substring(\\"pwwkew\\") # should return 3","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase English letters. Your task is to check whether `s` can be transformed into `t` using the following two operations any number of times: 1. Append any character to the end of the string. 2. Remove the last character of the string. Note that the order of characters must be preserved. -----Input----- The first line contains a single integer q (1 le q le 1000) — the number of queries. Each of the next q lines contains two space-separated strings s and t (1 le |s|, |t| le 100). -----Output----- For each query, on a separate line, print \\"Yes\\" if it is possible to transform string `s` to string `t`, otherwise print \\"No\\". -----Examples----- Input 3 abc abcd apple apl hello oll Output Yes No No -----Note----- In the first query, we can transform \\"abc\\" to \\"abcd\\" by appending the character \'d\'. In the second query, we cannot transform \\"apple\\" to \\"apl\\" because the order of characters is not preserved. In the third query, we cannot reorder \\"hello\\" to become \\"oll\\" as the order must be preserved.","solution":"def can_transform(s, t): Determines whether string s can be transformed into string t by performing any number of append or remove-the-last-character operations. # Check if s is a prefix of t if t.startswith(s): return \\"Yes\\" return \\"No\\" def process_queries(queries): Takes a list of queries, where each query is a tuple (s, t), and returns a list of results for each query. results = [] for s, t in queries: results.append(can_transform(s, t)) return results"},{"question":"Given an array of integers, return the maximum possible sum of its contiguous subarrays. A subarray is a sequence of consecutive elements from the original array. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the maximum sum of `6`. Input: An array of integers. Output: An integer representing the maximum sum of contiguous subarrays. Function signature: `def max_contiguous_subarray_sum(arr: List[int]) -> int:`","solution":"from typing import List def max_contiguous_subarray_sum(arr: List[int]) -> int: Returns the sum of the maximum sum of contiguous subarray. if not arr: # handle empty array return 0 max_so_far = arr[0] current_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return max_so_far"},{"question":"Given a string representing a mathematical expression with single-digit integers and the addition or subtraction operators, evaluate and return the result. For example: ``` evaluateExpression(\\"3+5-2+8\\"); ``` should return ``` 14 ``` ```if:python The string will always be a valid expression with no spaces and will only contain single-digit positive integers. ```","solution":"def evaluateExpression(expression): Evaluates a mathematical expression with single-digit integers and addition or subtraction operators. total = 0 current_num = 0 sign = 1 for char in expression: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'+\': total += current_num * sign current_num = 0 sign = 1 elif char == \'-\': total += current_num * sign current_num = 0 sign = -1 total += current_num * sign return total"},{"question":"Given a binary tree, your task is to implement an algorithm that performs a level-order traversal on the tree (also known as a breadth-first search). The traversal should return a list of lists, where each nested list represents the nodes at each level of the tree. For example, given the following binary tree: ``` 1 / 2 3 / 4 5 6 ``` The output of the level-order traversal should be: ``` [ [1], [2, 3], [4, 5, 6] ] ``` Special Note --> The TreeNode class contains three fields: `val` (the value of the node), `left` (the left child), and `right` (the right child). To access the root of the tree, use root. e.g., binary_tree.root","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal(root): if not root: return [] result = [] queue = deque([root]) while queue: level = [] level_length = len(queue) for i in range(level_length): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"You are given a list of non-negative integers representing the amount of water trapped after it rains at various elevations. Each element in the list represents the height of a bar at that position, with the width of each bar being 1. Compute how much water it is able to trap after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: Elevations are represented as follows: ``` # # # # # # # # ``` The above list traps 6 units of water. Example 2: Input: height = [4,2,3] Output: 1 Explanation: Elevations are represented as follows: ``` # # # # # # # ``` The accumulating water will be 1 unit. Constraints: - The length of the list is at least 1 and at most 20,000. - Each integer element of the list is between 0 and 100, inclusive.","solution":"def trap(height): Calculate the amount of trapped water given the heights of bars. :param height: List[int] - List of non-negative integers :return: int - Total amount of trapped water if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate total trapped water for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"A robot is navigating a grid of size m x n. The robot is initially located at the top-left corner (cell (1, 1)) and wants to reach the bottom-right corner (cell (m, n)). The robot can only move either down or right at any point in time. The grid has some blocked cells represented by \'#\', and open cells represented by \'.\'. The robot cannot move into blocked cells. Your task is to find the number of unique paths that the robot can take to reach the destination, avoiding blocked cells. Let grid[1][1] be the top-left corner and grid[m][n] be the bottom-right corner. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the grid. The next m lines each contain n characters (either \'.\' or \'#\') representing the grid. -----Output----- Print a single integer — the number of unique paths from the top-left corner to the bottom-right corner avoiding blocked cells. -----Examples----- Input 3 3 ..# .#. ... Output 1 Input 3 3 ... .#. ... Output 2 -----Note----- For the first sample, the only path is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). For the second sample, the two paths are: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3).","solution":"def unique_paths_with_obstacles(m, n, grid): # Initializing the dp table with 0s dp = [[0] * n for _ in range(m)] # If the start or end point is blocked, return 0 if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 # Initializing the starting position dp[0][0] = 1 # Filling the dp table for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The result is in the bottom-right corner return dp[m-1][n-1]"},{"question":"You need to implement a function to draw a solid right triangle given a height `h` and using a specific character for visualization. Given an integer `h` and a character `c`, print a right-aligned triangle where the right angle is at the bottom-right corner. The triangle is `h` characters tall, and each row ends with the character `c`. For example, given `h=4` and `c=\'*\'`, the output should be: ``` * ** *** **** ``` Another example, given `h=5` and `c=\'#\'`, the output should be: ``` # # # ``` Make sure to include an extra line feed character at the end of the string. If `h=0`, the function should return an empty string `\\"\\"`. Your function should follow this signature: ```python def draw_triangle(h: int, c: str) -> str: # your code here ```","solution":"def draw_triangle(h: int, c: str) -> str: Draws a right-aligned triangle with height `h` using character `c`. Parameters: h (int): The height of the triangle. c (str): The character used to draw the triangle. Returns: str: The drawn triangle as a string. if h <= 0: return \\"\\" result = \\"\\" for i in range(1, h + 1): spaces = \\" \\" * (h - i) characters = c * i result += spaces + characters + \\"n\\" return result"},{"question":"A major soccer tournament is happening, and the organizers need your help to determine the temporary seating arrangement in the stadium. The stadium’s hallways are organized in a grid of dimension `n` x `n`, and temporary seats can be placed in these hallways. However, the seating arrangement should adhere to certain rules for optimal viewing and safety: 1. No two seats should be adjacent horizontally, vertically, or diagonally. 2. Maximize the number of seats placed under these constraints. The cost to place a seat in any position is `1`. You need to calculate the maximum number of seats that can be placed following the rules. -----Input format----- - A single integer `n`, representing the dimensions of the grid. -----Output format----- - A single integer, the maximum number of seats that can be placed under the given constraints. -----Example Input----- 4 -----Example Output----- 8 In this example, the maximum number of seats that can be placed in a `4 x 4` grid following the given constraints is `8`.","solution":"def max_seats(n): Returns the maximum number of seats that can be placed on an n x n grid such that no two seats are adjacent horizontally, vertically, or diagonally. if n == 1: return 1 return (n * n + 1) // 2"},{"question":"Write a function `letter_histogram`/`letter_histogram()` that takes a string input and returns a dictionary with the count of each letter in the string. The function should ignore case (treat uppercase and lowercase letters as the same) and should only count alphabetic characters (ignore numbers, spaces, and punctuation). For example: ``` letter_histogram(\\"Hello World!\\") ``` should return: ``` {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` And: ``` letter_histogram(\\"Python 3.8\\") ``` should return: ``` {\'p\': 1, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 1, \'n\': 1} ``` Note: Your solution should not use any external libraries and should handle an empty string by returning an empty dictionary.","solution":"def letter_histogram(text): Takes a string input and returns a dictionary with the count of each letter. The function ignores case and only counts alphabetic characters. histogram = {} for char in text.lower(): if char.isalpha(): if char in histogram: histogram[char] += 1 else: histogram[char] = 1 return histogram"},{"question":"Task Write a function that calculates the minimum number of coins needed to make a given amount of money using a given set of coin denominations. Return -1 if it is not possible to make the exact amount with the given denominations. Examples ``` min_coins(11, [1, 2, 5]) == 3 # 11 can be made with 5 + 5 + 1 min_coins(3, [2]) == -1 # 3 cannot be made with just 2 as a denomination ```","solution":"def min_coins(amount, coins): Returns the minimum number of coins needed to make the given amount with the provided coin denominations. If it is not possible to make the exact amount, returns -1. # Initialize the dp array with amount+1 (since this is more than any possible number of coins needed) dp = [amount + 1] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Given an array of integers, find the length of the longest subarray that contains equal numbers of 0s and 1s. For example: ``` Input: [0, 1, 0, 1, 0] Output: 4 Explanation: The longest subarray with equal number of 0s and 1s is [0, 1, 0, 1] which is of length 4. ``` Write a function `longest_equal_subarray(arr)` that takes an array `arr` as input and returns the length of the longest subarray where the number of 0s equals the number of 1s. Note: 1. The input array will only contain 0s and 1s. 2. If no such subarray exists, the function should return 0. ```python def longest_equal_subarray(arr): # Your code here ```","solution":"def longest_equal_subarray(arr): Returns the length of the longest subarray where the number of 0s equals the number of 1s. count_map = {0: -1} max_len = 0 count = 0 for i, num in enumerate(arr): count += -1 if num == 0 else 1 if count in count_map: max_len = max(max_len, i - count_map[count]) else: count_map[count] = i return max_len"},{"question":"Write a function that takes a string representation of a mathematical expression containing positive integers and the operators +, -, *, and /, and returns its computed result as an integer. The function should correctly handle the operator precedence and the absence of parentheses. Implement error handling for divide by zero scenarios by returning \\"Error\\" in such cases.","solution":"def calculate(expression): Evaluates a mathematical expression containing positive integers and the operators +, -, *, and /. Returns the computed result as an integer or \\"Error\\" in case of divide by zero. try: # Replace all integer divisions with float divisions and evaluate the expression result = eval(expression.replace(\'/\', \'//\')) return result except ZeroDivisionError: return \\"Error\\""},{"question":"Given an integer `n`, return the number of trailing zeros in the factorial of `n`. For example: - The factorial of 5 is 120, which has one trailing zero. - The factorial of 10 is 3628800, which has two trailing zeros. Your function should be efficient and handle large values of `n` within a reasonable time frame.","solution":"def trailing_zeroes(n): Returns the number of trailing zeros in the factorial of n. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"# The problem Imagine you have a `deck` of cards numbered from 1 to N. You want to shuffle this deck such that the cards are in random order. # Scalability A brute force or naive approach to shuffling can be very inefficient, especially as N grows larger. For anything beyond a small number of cards, we\'ll need a more efficient approach. The Fisher-Yates (or Knuth) shuffle is an optimal algorithm for generating a random permutation of a finite sequence—in this case, our deck. # Your task is to write a function, which will shuffle the deck of cards numbered from `1` to `N` using the Fisher-Yates shuffle algorithm. ```python def shuffle_deck(N: int) -> list: Shuffles a deck of cards numbered 1 to N. Args: N : int The number of cards in the deck. Returns: list : The shuffled deck of cards. # Your implementation here ``` - `N` is an integer from 1 to 1,000,000 **Example** ```python shuffle_deck(5) # returns a random permutation, e.g., [3, 1, 4, 5, 2] shuffle_deck(52) # returns a random permutation of numbers from 1 to 52 ```","solution":"import random def shuffle_deck(N: int) -> list: Shuffles a deck of cards numbered 1 to N using the Fisher-Yates shuffle algorithm. Args: N : int The number of cards in the deck. Returns: list : The shuffled deck of cards. deck = list(range(1, N + 1)) for i in range(N - 1, 0, -1): j = random.randint(0, i) deck[i], deck[j] = deck[j], deck[i] return deck"},{"question":"For a given list of strings, find and return the list of strings that are anagrams of each other in the provided list. An anagram of a string is another string that contains the same characters, only the order of characters can be different. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of strings. - The next N lines each contain a single string S. -----Output:----- For each test case, output the list of strings that are anagrams of each other. If no anagrams are found, output an empty list. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 - 1 leq |S| leq 100 -----Sample Input:----- 2 5 listen silent enlist google facebook 3 bat tab cat -----Sample Output:----- [\'listen\', \'silent\', \'enlist\'] [\'bat\', \'tab\']","solution":"def find_anagrams(T, test_cases): from collections import defaultdict results = [] for i in range(T): N, strings = test_cases[i] anagrams = defaultdict(list) for string in strings: sorted_string = \'\'.join(sorted(string)) anagrams[sorted_string].append(string) anagram_list = [] for group in anagrams.values(): if len(group) > 1: anagram_list.extend(group) results.append(anagram_list) return results"},{"question":"# What\'s an Anagram Checker? An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word `\\"listen\\"` can be rearranged to form `\\"silent\\"`. # Task: Your job is to write a function `are_anagrams` that determines if two provided strings are anagrams of each other. Both input strings will consist of lowercase alphabets and will not contain spaces or punctuation. # Example: ```python are_anagrams(\\"listen\\", \\"silent\\") #=> True are_anagrams(\\"triangle\\", \\"integral\\") #=> True are_anagrams(\\"apple\\", \\"pale\\") #=> False ``` # Requirements: 1. The function should be case-sensitive and only work with lowercase letters. 2. The function must return a boolean value: `True` if the two strings are anagrams, `False` otherwise. # Examples in Detail: ```python are_anagrams(\\"anagram\\", \\"nagaram\\") #=> True are_anagrams(\\"rat\\", \\"tar\\") #=> True are_anagrams(\\"hello\\", \\"billion\\") #=> False are_anagrams(\\"cycle\\", \\"clcyc\\") #=> False ``` Make sure the function handles edge cases such as: - Different lengths strings, which cannot be anagrams.","solution":"def are_anagrams(s1, s2): Determines if two strings are anagrams of each other. Args: s1 (str): First string to be compared. s2 (str): Second string to be compared. Returns: bool: True if both strings are anagrams, False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Write a function to convert an integer to its Roman numeral representation. Roman numerals are represented by combinations of the following symbols: - I = 1 - V = 5 - X = 10 - L = 50 - C = 100 - D = 500 - M = 1000 Here are some additional rules: 1. Numerals are written in descending order. 2. The numeral for four is not IIII, instead, it’s IV. Similarly, nine is written as IX. 3. The numeral I can be placed before V and X to make 4 and 9. 4. X can be placed before L and C to make 40 and 90. 5. C can be placed before D and M to make 400 and 900. # Function Signature ```python def int_to_roman(num: int) -> str: ``` # Example ```python int_to_roman(3) # \\"III\\" int_to_roman(4) # \\"IV\\" int_to_roman(9) # \\"IX\\" int_to_roman(58) # \\"LVIII\\" (L = 50, V = 5, III = 3) int_to_roman(1994) # \\"MCMXCIV\\" (M = 1000, CM = 900, XC = 90, IV = 4) ``` # Constraints - 1 <= num <= 3999 # Explanation Given a positive integer within the range 1 to 3999, convert it to its Roman numeral representation. The solution should correctly implement the rules and symbols of Roman numerals.","solution":"def int_to_roman(num: int) -> str: Converts an integer to its Roman numeral representation. # Define the values and their corresponding symbols values = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] symbols = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \\"\\" for i in range(len(values)): while num >= values[i]: num -= values[i] roman_numeral += symbols[i] return roman_numeral"},{"question":"Task Given a list of integers, write a function that finds the smallest positive integer that is missing from the list. The list can contain duplicates and both positive and negative numbers. __Function Signature:__ ```python def find_missing_positive(nums: List[int]) -> int: ``` __Input:__ - A list `nums` of `n` integers, where `1 <= n <= 10^5` and `-10^9 <= nums[i] <= 10^9`. __Output:__ - Return the smallest positive integer that is not present in the list. __Example:__ ```python assert find_missing_positive([1, 2, 0]) == 3 assert find_missing_positive([-1, -3, 4, 2, 1]) == 3 assert find_missing_positive([7, 8, 9, 11, 12]) == 1 assert find_missing_positive([1, 1, 0, -1, -2]) == 2 ``` __Explanation:__ In the first example, the numbers 1 and 2 are present, so the smallest missing positive integer is 3. In the second example, the numbers 1, 2, and 4 are present but 3 is missing.","solution":"from typing import List def find_missing_positive(nums: List[int]) -> int: Returns the smallest positive integer that is missing from the list. n = len(nums) # First we filter out the negatives and numbers greater than n for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use index as a hash to record the presence of numbers for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # The first positive index+1 is our answer for i in range(n): if nums[i] > 0: return i + 1 return n + 1 # If all numbers from 1 to n are present"},{"question":"In this Kata, we define a palindrome as a string that reads the same backward as forward. You will be given a non-empty string consisting of lowercase alphabets. Your task is to transform it into a palindrome by the following rule: ```Haskell For each character in the string, you can change it to any other lowercase alphabet. ``` Return the minimum number of changes needed to convert the string into a palindrome. ```Haskell For example: solve(\\"abca\\") == 1 because \\"abca\\" can be changed to \\"abba\\" or \\"acca\\" by making 1 change. solve(\\"race\\") == 1 because \\"race\\" can be changed to \\"racecar\\" by changing one character. solve(\\"abcdcba\\") == 0 because it is already a palindrome, and no changes are needed. solve(\\"ab\\") == 1 because \\"ab\\" can be changed to \\"aa\\" or \\"bb\\" by making 1 change. solve(\\"abcdef\\") == 3 because \\"abcdef\\" can be changed to \\"abccba\\" by making 3 changes. ``` More examples in the test cases. Good luck!","solution":"def solve(s): Returns the minimum number of changes needed to convert the string into a palindrome. l, r = 0, len(s) - 1 changes = 0 while l < r: if s[l] != s[r]: changes += 1 l += 1 r -= 1 return changes"},{"question":"In this challenge, you need to write a function `expandString` that expands a compressed string. The compressed string format consists of characters followed by a number that indicates how many times the character should be repeated consecutively. For example: `expandString(\'a3b2c4d1\')` should return `\'aaabbccccd\'`. - `\'a3\'` expands to `\'aaa\'` - `\'b2\'` expands to `\'bb\'` - `\'c4\'` expands to `\'cccc\'` - `\'d1\'` expands to `\'d\'` If there are multiple character and number pairs, expand them consecutively to form the final string. Another example: `expandString(\'x1y5z2a3\')` should return `\'xxyyyyyzzaaa\'`. The input string will only contain lowercase letters and digits. Assume the input format will always be valid (i.e., characters followed by digits). Write the `expandString` function to handle this expansion process. Good luck!","solution":"def expandString(s): Expands a compressed string where characters are followed by digits indicating repetitions. Args: s (str): The compressed string in the format \\"char_digit\\". Returns: str: The expanded string. expanded_string = [] i = 0 while i < len(s): char = s[i] num = 0 # Move to the next character which should be a digit i += 1 while i < len(s) and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 expanded_string.append(char * num) return \\"\\".join(expanded_string)"},{"question":"Nova polynomial multiply This kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 ) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5) ) Consider a polynomial in a list where each element in the list corresponds to a factor. The factor order is the position in the list. The first element is the zero order factor (the constant). `p = [a0, a1, a2, a3]` signifies the polynomial `a0 + a1x + a2x^2 + a3*x^3` In this kata multiply two polynomials: ```python poly_multiply([1, 2], [1, 3]) = [1, 5, 6] ``` Explanation: `(1 + 2x) * (1 + 3x) = 1 + 3x + 2x + 6x^2 = 1 + 5x + 6x^2`","solution":"def poly_multiply(p1, p2): Multiplies two polynomials p1 and p2 and returns resulting polynomial. Args: p1 (list): Coefficients of the first polynomial. p2 (list): Coefficients of the second polynomial. Returns: list: Coefficients of the resulting polynomial. # Initialize an array to store the result with necessary size result_size = len(p1) + len(p2) - 1 result = [0] * result_size # Multiply the polynomials term by term for i in range(len(p1)): for j in range(len(p2)): result[i + j] += p1[i] * p2[j] return result"},{"question":"Given a list of words, each word consisting of lowercase English letters, the task is to group the words that are anagrams of each other. An anagram of a word is a word that can be formed by rearranging the letters of that word using each letter exactly once. Return the list of groups where each group contains all the words that are anagrams of each other. Example: Input: words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] Explanation: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other. - \\"tan\\" and \\"nat\\" are anagrams of each other. - \\"bat\\" has no anagram in the list. Notes: - All words will have the same length and that length will be less than or equal to 100. - The number of words in the list will be less than or equal to 10^4.","solution":"from collections import defaultdict def group_anagrams(words): Group words that are anagrams of each other. :param words: List of words (all lowercase English letters) :type words: List[str] :return: List of groups where each group contains anagrams :rtype: List[List[str]] anagrams = defaultdict(list) for word in words: # Sort the word and use it as a key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given a list of integers and a target sum. Your task is to determine if there are two distinct numbers in the list that add up to the target sum. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". Input: - First line contains two space-separated integers n (number of integers) and target (target sum). - Second line contains n space-separated integers. Output: - Print \\"YES\\" if there exists two distinct numbers that add up to the target sum, otherwise print \\"NO\\". Constraints: - 2 leq n leq 10^5 - -10^9 leq integers in the list leq 10^9 - -2 times 10^9 leq target leq 2 times 10^9 Sample Input 1: 5 9 2 7 11 15 1 Sample Output 1: YES Sample Input 2: 4 10 1 2 3 4 Sample Output 2: NO Explanation: In the first example, 2 and 7 add up to 9, hence the output is \\"YES\\". In the second example, no two numbers add up to 10, hence the output is \\"NO\\".","solution":"def has_pair_with_sum(lst, target): Determines if there are two distinct numbers in the list that add up to the target sum. Parameters: lst (list of int): List of integers. target (int): The target sum. Returns: str: \\"YES\\" if a pair exists that adds up to the target sum, otherwise \\"NO\\". seen = set() for number in lst: if target - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"# Task Given an array of integers, determine the number of unique pairs of elements that sum up to a specific target value. # Example For ``` arr = [1, 2, 3, 4, 3] target = 6 ``` the output should be `2`. The unique pairs that sum up to 6 are: ``` (2, 4) (3, 3) ``` # Input/Output - `[input]` integer array `arr` Constraints: `2 ≤ arr.length ≤ 10^3,` `-10^9 ≤ arr[i] ≤ 10^9.` - `[input]` integer `target` Constraints: `-10^9 ≤ target ≤ 10^9.` - `[output]` an integer The number of unique pairs of elements in the array that sum up to the target value.","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs of elements in the array that sum up to the target value. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"=====Function Descriptions===== A palindrome is a word, number, phrase, or other sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). For example, \\"madam\\", \\"racecar\\", and \\"A man, a plan, a canal, Panama!\\" are all palindromes. =====Problem Statement===== You must write a function that checks whether a given string is a palindrome. Your function should ignore spaces, punctuation, and capitalization. =====Input Format===== A single line containing a string s. =====Constraints===== The input string will only contain printable ASCII characters. =====Output Format===== Output a single line: - \\"YES\\" if the input string is a palindrome. - \\"NO\\" if the input string is not a palindrome. =====Function Signature===== def is_palindrome(s: str) -> str: =====Example===== Input A man, a plan, a canal, Panama! Output YES =====Explanation===== When ignoring spaces, punctuation, and capitalization, the input string becomes \\"amanaplanacanalpanama\\", which is the same forward and backward, making it a palindrome.","solution":"import re def is_palindrome(s: str) -> str: Check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): The input string. Returns: str: \'YES\' if the input string is a palindrome, \'NO\' otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse if cleaned_s == cleaned_s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to check if there is a pair of distinct elements in the list that add up to a specified target sum. =====Function Signature===== ```python def has_pair_with_sum(nums: list, target: int) -> bool: ``` =====Input Format===== - A list of integers, `nums`, which can contain both negative and positive numbers. - An integer, `target`, representing the target sum. =====Constraints===== - 1 <= len(nums) <= 10^4 - -10^3 <= nums[i] <= 10^3 for each i - -10^6 <= target <= 10^6 =====Output Format===== - Return True if there exists at least one pair of distinct elements in the list that add up to the target sum. - Return False otherwise. =====Example===== ```python >>> has_pair_with_sum([1, 2, 3, 4, 5], 9) True >>> has_pair_with_sum([1, 2, 3, 4, 5], 10) False >>> has_pair_with_sum([5, -1, 4, 0, -5], -6) True >>> has_pair_with_sum([], 1) False >>> has_pair_with_sum([3, 3], 6) True ``` =====Explanation===== In the first example, there exists a pair (4, 5) that adds up to 9. In the second example, no pair adds up to 10. In the third example, there exists a pair (-1, -5) that adds up to -6. In the fourth example, the list is empty, so it\'s not possible to have a pair. In the fifth example, the list has a pair (3, 3) that adds up to 6.","solution":"def has_pair_with_sum(nums: list, target: int) -> bool: Returns True if there is a pair of distinct elements in `nums` that add up to `target`. Returns False otherwise. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of non-negative integers representing the heights of vertically stacked bars of a histogram. Each bar is of fixed width 1. Compute the area of the largest possible rectangle that can be formed within the bounds of the histogram. You should write a function that takes this list as input and returns the largest rectangle\'s area. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle is formed by bars 5 and 6 with a height of 5 and a width of 2. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle is formed by either the first bar or the second bar with a height of 2 and a width of 2. Example 3: Input: heights = [6,2,5,4,5,1,6] Output: 12 Explanation: The largest rectangle is formed by bars 2, 5, 4, and 5 with a height of 4 and a width of 3. Example 4: Input: heights = [1,1,1,1,1] Output: 5 Explanation: The largest rectangle is formed by any 5 bars with a height of 1 and a width of 5. Constraints: - 1 <= heights.length <= 10^5 - 0 <= heights[i] <= 10^4","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed within the bounds of the given histogram heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A game company has introduced a new augmented reality (AR) game where players can place virtual objects on a 2D grid. Due to technical constraints, two virtual objects cannot be placed within a certain minimum distance from each other. The goal is to determine the maximum number of virtual objects that can be placed on the grid while maintaining the minimum distance constraint. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains three lines. First line contains two space separated integers n and m, representing the dimensions of the grid. - Second line contains an integer d, the minimum distance that must be maintained between any two objects. - Third line contains an integer k, the number of potential virtual objects placements given. - Fourth line contains k pairs of space separated integers representing the coordinates of the potential placements on the grid. -----Output:----- For each test case, print the maximum number of virtual objects that can be placed on the grid while maintaining the minimum distance. -----Sample Input:----- 1 5 5 2 5 1 1 2 3 4 4 3 3 5 5 -----Sample Output:----- 3 -----Constraints----- - 1 leq n, m leq 1000 - 1 leq d leq 100 - 1 leq k leq 100 - 1 leq x_i leq n and 1 leq y_i leq m","solution":"def max_virtual_objects(n, m, d, k, potential_positions): def dist(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 def can_place(position): for i, placed in enumerate(placed_positions): if dist(position[0], position[1], placed[0], placed[1]) < d: return False return True placed_positions = [] for i in range(k): x, y = potential_positions[2*i], potential_positions[2*i + 1] if can_place((x, y)): placed_positions.append((x, y)) return len(placed_positions) def process_input(test_cases): results = [] for tc in test_cases: n, m = tc[\'grid_size\'] d = tc[\'min_distance\'] k = tc[\'num_positions\'] potential_positions = tc[\'positions\'] result = max_virtual_objects(n, m, d, k, potential_positions) results.append(result) return results"},{"question":"A robot is placed in a grid of size M times N, beginning at the top-left corner (0, 0). The robot can move either down or right but cannot visit any cell containing an obstacle. You are given the grid configuration and you need to determine how many unique paths the robot can take to reach the bottom-right corner of the grid. A cell in the grid either contains a `1` (which means there is an obstacle) or `0` (which means the cell is free for movement). -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers M and N, denoting the number of rows and columns in the grid, respectively. - The next M lines each contain N integers (either `0` or `1`), representing the grid layout. -----Output----- For each test case, print a single line containing the number of unique paths the robot can use to reach the bottom-right corner of the grid. If there is no valid path, print 0. -----Constraints----- - 1 le T le 50 - 1 le M, N le 100 - Cells with obstacles (`1`) and empty spaces (`0`) are provided in each test case grid. -----Example Input----- 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 -----Example Output----- 2 1 -----Explanation----- Example case 1: There are two paths to reach the bottom-right corner: 1. (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) 2. (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) Example case 2: There is only one path to reach the bottom-right corner: (0,0) -> (1,0) -> (1,1)","solution":"def unique_paths(grid): Given a grid with obstacles (1) and free spaces (0), returns the number of unique paths from the top-left corner to the bottom-right corner. M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] def count_paths(test_cases): results = [] for grid in test_cases: results.append(unique_paths(grid)) return results"},{"question":"Given a robot in a grid represented by a 2D array, write a function `move_robot` that accepts 3 arguments (in order): - `start` - A tuple representing the starting coordinates of the robot (row, column). - `direction` - A string representing the direction the robot should move (\\"up\\", \\"down\\", \\"left\\", \\"right\\"). - `steps` - An integer representing the number of steps the robot should take in the given direction. The function should return the new coordinates of the robot after moving the given number of steps in the specified direction. If the robot tries to move outside the grid boundary, it should stop at the boundary. You can assume the grid is a 5x5 grid, and the inputs for `start` will always be valid coordinates within this grid. Examples: ```python move_robot((2, 2), \\"up\\", 1) # => (1, 2) move_robot((0, 0), \\"down\\", 3) # => (3, 0) move_robot((4, 4), \\"left\\", 2) # => (4, 2) move_robot((1, 1), \\"up\\", 3) # => (0, 1) move_robot((3, 3), \\"right\\", 5) # => (3, 4) ```","solution":"def move_robot(start, direction, steps): Moves the robot from its starting coordinates in the given direction by the given steps. Ensures the robot stops at the grid boundary if it tries to move outside the grid. row, col = start if direction == \\"up\\": row = max(0, row - steps) elif direction == \\"down\\": row = min(4, row + steps) elif direction == \\"left\\": col = max(0, col - steps) elif direction == \\"right\\": col = min(4, col + steps) return (row, col)"},{"question":"On Halloween, a group of kids go trick-or-treating and collect candies. Each kid collects a different amount of candy, which you have to determine. The kids return home and share their candies among themselves such that each kid gets some candy (no kid ends up with nothing). Given the total amount of candies each kid ended up with, compute the initial number of candies collected by each kid. You will be given an array representing the total amount of candies each kid has at the end. It is guaranteed that a valid distribution exists. Write a function that returns an array of the initial number of candies collected by each kid. Example 1: Input: {10, 15, 20} Output: {5, 9, 7} Example 2: Input: {8, 12, 7} Output: {2, 10, 3} Good luck :)","solution":"def initial_candies(final_candies): Returns the initial number of candies collected by each kid given the total amount of candies each kid ended up with. # Kids must have given at least 1 candy to each other initial_distribution = [candies - 1 for candies in final_candies] return initial_distribution"},{"question":"# Task You are given a string `s` consisting of lowercase English letters. You need to determine whether you can reorder the characters of `s` to form a palindrome. If it is possible, return `True`. Otherwise, return `False`. # Example For `s = \\"civic\\"`, the result should be `True`. For `s = \\"ivicc\\"`, the result should be `True`. For `s = \\"hello\\"`, the result should be `False`. For `s = \\"aabb\\"`, the result should be `True`. For `s = \\"aaabbbb\\"`, the result should be `True`. # Input/Output - `[input]` string `s` A string consisting of lowercase English letters. `1 <= s.length <= 1000` - `[output]` a boolean value Return `True` if the string can be reordered to form a palindrome, otherwise return `False`.","solution":"def can_form_palindrome(s): Determines if a string can be reordered to form a palindrome. Args: s (str): A string consisting of lowercase English letters. Returns: bool: True if the string can be reordered to form a palindrome, otherwise False. from collections import Counter count = Counter(s) odd_count = sum(1 for value in count.values() if value % 2 != 0) return odd_count <= 1"},{"question":"Write a function `is_palindrome` that checks if a given string is a palindrome. # Notes: - Return `nil` or `None` for non-string inputs. - Ignore case and non-alphanumeric characters while checking for palindromes. - Return `True` for an empty string as it is considered a palindrome. # Examples: ```python is_palindrome(\\"A man, a plan, a canal, Panama!\\") => True is_palindrome(\\"racecar\\") => True is_palindrome(\\"hello\\") => False is_palindrome(12321) => None ```","solution":"import re def is_palindrome(s): Check if the given string is a palindrome. :param s: The input string or other type to check :return: True if the string is a palindrome, False if it\'s not, None for non-string inputs if not isinstance(s, str): return None s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return s == s[::-1]"},{"question":"Write a function `findLongestPalindromicSubstring` that takes a string `s` and returns the longest palindromic substring in `s`. A palindromic substring is a substring which reads the same backwards as forwards. If there are multiple longest palindromic substrings of the same length, return the one which appears first. For example, given the input string `\\"babad\\"`, the function should return `\\"bab\\"` or `\\"aba\\"` as both are palindromic substrings of length 3. For the input string `\\"cbbd\\"`, the function should return `\\"bb\\"`. You can assume that the input string will have at least one character. Consider the following additional constraints: - The string length will not exceed 1000 characters. - Focus on an efficient solution with a time complexity better than O(n^3). # Example: ```python assert findLongestPalindromicSubstring(\\"babad\\") == \\"bab\\" or findLongestPalindromicSubstring(\\"babad\\") == \\"aba\\" assert findLongestPalindromicSubstring(\\"cbbd\\") == \\"bb\\" assert findLongestPalindromicSubstring(\\"a\\") == \\"a\\" assert findLongestPalindromicSubstring(\\"ac\\") == \\"a\\" or findLongestPalindromicSubstring(\\"ac\\") == \\"c\\" ```","solution":"def findLongestPalindromicSubstring(s): def expandAroundCenter(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 start = 0 end = 0 for i in range(len(s)): len1 = expandAroundCenter(s, i, i) # Odd length palindromes len2 = expandAroundCenter(s, i, i + 1) # Even length palindromes max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return s[start:end + 1]"},{"question":"You are given two strings s and t. You are allowed to perform any number of the following operations on string s: - Insert a character - Delete a character - Replace a character Return the minimum number of operations required to convert string s into string t. Example 1: Input: s = \\"horse\\", t = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Example 2: Input: s = \\"intention\\", t = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Example 3: Input: s = \\"abc\\", t = \\"yabd\\" Output: 2 Explanation: abc -> yab (insert \'y\' at the beginning) yab -> yabd (insert \'d\' at the end) Constraints: 1. 0 <= s.length, t.length <= 1000 2. s and t consist of lowercase English letters.","solution":"def min_distance(s, t): Compute the minimum number of operations required to convert string s into string t. Operations allowed: insert a character, delete a character, replace a character. m, n = len(s), len(t) # If one of the strings is empty if m == 0: return n if n == 0: return m # Create a DP table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Initialize dp table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill dp table for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If current characters match, no new operation required else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete from s dp[i][j - 1], # Insert into s dp[i - 1][j - 1]) # Replace in s return dp[m][n]"},{"question":"[Queue Implementation Using Stacks] Overview One common interview question is to implement a queue using stacks. Recall that a queue is a data structure which follows a FIFO (first-in-first-out) principle, whereas a stack follows a LIFO (last-in-first-out) principle. Task Your task is to implement a class `QueueViaStacks` which uses two stacks to manage the operations of enqueuing and dequeuing. The class should support the following methods: 1. `enqueue(value)` - Adds `value` to the end of the queue. 2. `dequeue()` - Removes the element from the front of the queue and returns its value. If the queue is empty when `dequeue` is called, return `None`. Example ```python q = QueueViaStacks() q.enqueue(1) q.enqueue(2) print(q.dequeue()) # Output: 1 print(q.dequeue()) # Output: 2 print(q.dequeue()) # Output: None ``` Constraints - All values used for the enqueue will be integers. - The methods must operate in O(1) average time complexity.","solution":"class QueueViaStacks: def __init__(self): self.stack_in = [] self.stack_out = [] def enqueue(self, value): self.stack_in.append(value) def dequeue(self): if not self.stack_out: while self.stack_in: self.stack_out.append(self.stack_in.pop()) return self.stack_out.pop() if self.stack_out else None"},{"question":"You are given an integer array `height` of size N representing the height of N buildings. If rain falls, the amount of water that can be trapped between the buildings is determined by the heights of the buildings. Write a function that returns the total amount of rainwater that can be trapped between the buildings. Note: - The array length N is at least 1 and does not exceed 10^4. - Each height element is a non-negative integer and does not exceed 10^5. **Example 1:** ``` Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The structure above can trap 6 units of water. ``` **Example 2:** ``` Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The structure above can trap 9 units of water. ``` # Function Signature ```python def trap(height: List[int]) -> int: pass ``` # Constraints: - The array length N is at least 1 and does not exceed 10^4. - Each height element is a non-negative integer and does not exceed 10^5.","solution":"from typing import List def trap(height: List[int]) -> int: Calculate the amount of water that can be trapped between buildings. Args: height: List[int] -- a list of non-negative integers representing the height of buildings Returns: int -- the total units of trapped water if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill the left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill the right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Pirate Coins is a popular game where players collect coins based on specific rules. Each coin has a specific value, and some special rules modify these values. Write a function that calculates the total value of a collection of coins according to these rules: 1. Each Bronze coin is worth 1 point. 2. Each Silver coin is worth 4 points. 3. Each Gold coin is worth 10 points. 4. For every 3 Bronze coins in the collection, one additional point is added to the total. 5. For every 2 Silver coins in the collection, one additional point is added to the total. 6. For every Gold coin, 2 additional points are added to the total because Gold coins are very special. Input: The function will receive an array of strings, each string representing a type of coin. The recognition of names should be case insensitive. An empty array input should return a total value of 0. Example ``` [\'Gold\', \'Bronze\', \'Silver\', \'Bronze\', \'Gold\', \'Silver\', \'Bronze\'] // the total value is calculated as follows: // Gold: 10 points each, plus 2 additional points per Gold, so (10+2) + (10+2) = 24 // Silver: 4 points each, plus 1 additional point for every 2 Silver, so (4+4+1) = 9 // Bronze: 1 point each, plus 1 additional point for every 3 Bronze, so (1+1+1+1) = 4 // Total value = 24 + 9 + 4 = 37 ```","solution":"def calculate_total_value(coins): bronze_count = sum(1 for coin in coins if coin.lower() == \'bronze\') silver_count = sum(1 for coin in coins if coin.lower() == \'silver\') gold_count = sum(1 for coin in coins if coin.lower() == \'gold\') # Points calculation bronze_points = bronze_count + (bronze_count // 3) silver_points = silver_count * 4 + (silver_count // 2) gold_points = gold_count * 10 + gold_count * 2 return bronze_points + silver_points + gold_points"},{"question":"You are planning to host a coding challenge, and you want to determine if you have enough monitors for each participant. The challenge participants occupy seats in a row, and each participant either has a monitor (\'M\') or not (\'N\'). Write a function that receives a string representing the row of participants. The function should return a list of indices indicating the position of participants who need a monitor. For example, if the input string is \\"NMNNM\\", the function should return the list [0, 2, 3] since participants at indices 0, 2, and 3 are missing monitors. If all participants have monitors, return \'Everyone has a monitor!\'. More in this series: The Office I - Outed The Office II - Boredom Score The Office III - Broken Photocopier The Office IV - Meeting Rooms","solution":"def get_monitorless_participants(row): Given a string representing a row of participants, return a list of indices of participants who need a monitor. If everyone has a monitor, return \'Everyone has a monitor!\'. monitorless_indices = [index for index, seat in enumerate(row) if seat == \'N\'] return monitorless_indices if monitorless_indices else \'Everyone has a monitor!\'"},{"question":"In this problem, you need to implement a system that helps in predicting the next word in a sequence given a set of sentences. -----Input:----- - The first line contains an integer N, the number of sentences. - Each of the next N lines contains a sentence composed of lowercase English letters and spaces. - The last line contains a string s, denoting the sequence of words for which you need to predict the next word. The string s will always be a substring of at least one sentence. -----Output:----- Output the word that is most likely to follow the given sequence s. In case of a tie, output the lexicographically smallest word. -----Constraints:----- - 1 leq N leq 100 - 1 leq |sentence| leq 1000 for each sentence - Each word in the sentences is separated by exactly one space and no sentence has trailing or leading spaces. - 1 leq |s| leq 100 -----Sample Input:----- 3 the quick brown fox jumps over the lazy dog the quick brown bear also jumps the lazy dog sleeps in the sun the lazy -----Sample Output:----- dog","solution":"from collections import defaultdict def predict_next_word(sentences, sequence): Predicts the most likely next word following the given sequence of words. Parameters: sentences (list): A list of sentences (strings). sequence (string): The sequence of words for which to predict the next word. Returns: string: The most likely next word. word_count = defaultdict(int) for sentence in sentences: words = sentence.split() for i in range(len(words) - len(sequence.split())): if \' \'.join(words[i:i+len(sequence.split())]) == sequence: next_word = words[i + len(sequence.split())] word_count[next_word] += 1 most_likely_word = min(word_count, key=lambda word: (-word_count[word], word)) return most_likely_word # Example usage: # sentences = [ # \\"the quick brown fox jumps over the lazy dog\\", # \\"the quick brown bear also jumps\\", # \\"the lazy dog sleeps in the sun\\" # ] # sequence = \\"the lazy\\" # print(predict_next_word(sentences, sequence)) # Output: \\"dog\\""},{"question":"You are given a list of integers. Your task is to reorganize the list such that all zeros are moved to the end while keeping the order of non-zero elements the same. Note: All input lists are valid with at least one element. input: [0, 1, 0, 3, 12] output: [1, 3, 12, 0, 0] Explanation: The input list [0, 1, 0, 3, 12] has two zeros. Moving these zeros to the end while maintaining the order of the non-zero elements results in [1, 3, 12, 0, 0]. Enjoy.","solution":"def move_zeros(nums): Reorganize the list such that all zeros are moved to the end while keeping the order of non-zero elements the same. Parameters: nums (list): A list of integers. Returns: list: The reordered list. non_zero_elements = [num for num in nums if num != 0] zero_count = nums.count(0) return non_zero_elements + [0] * zero_count"},{"question":"A large telecommunications company is trying to manage its network more efficiently. One common task is to diagnose connectivity issues by examining logs of connections between nodes. A connection log is given in the form of a list of tuples. Each tuple contains two strings representing nodes that were connected. Your task is to write a Python function `find_clusters` that identifies clusters of directly or indirectly connected nodes. Each cluster should be represented as a sorted list of node names, and the function should return a list of these clusters, sorted lexicographically by the first node in each cluster. For example, if you are given the following connection logs: ```python [ (\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"D\\", \\"E\\") ] ``` The function should return: ```python [ [\\"A\\", \\"B\\", \\"C\\"], [\\"D\\", \\"E\\"] ] ``` # Constraints: 1. All nodes are represented as strings containing alphanumeric characters only. 2. No duplicate tuples are present in the input list. 3. There can be up to 10,000 connections in the log. # Function Signature: ```python def find_clusters(connections: List[Tuple[str, str]]) -> List[List[str]]: pass ``` # Example: ```python connections = [ (\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"D\\", \\"E\\") ] print(find_clusters(connections)) # Output: [[\'A\', \'B\', \'C\'], [\'D\', \'E\']] ```","solution":"from typing import List, Tuple from collections import defaultdict def find_clusters(connections: List[Tuple[str, str]]) -> List[List[str]]: # Create a graph as an adjacency list graph = defaultdict(list) for node1, node2 in connections: graph[node1].append(node2) graph[node2].append(node1) # Function to perform DFS and find all nodes in a cluster def dfs(node, visited, cluster): visited.add(node) cluster.append(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, cluster) visited = set() clusters = [] # Traverse all nodes and form clusters using DFS for node in graph.keys(): if node not in visited: cluster = [] dfs(node, visited, cluster) clusters.append(sorted(cluster)) return sorted(clusters, key=lambda x: x[0])"},{"question":"Given an integer n, return all structurally unique Binary Search Trees (BSTs) that have n nodes of unique values from 1 to n. A Binary Search Tree is a binary tree with the following properties: - The left subtree of a node contains only nodes with keys less than the node’s key. - The right subtree of a node contains only nodes with keys greater than the node’s key. - Both the left and right subtrees must also be binary search trees. Example 1: Input: 3 Output: [ [1,null,2,null,3], [1,null,3,2], [2,1,3], [3,1,null,null,2], [3,2,null,1] ] Example 2: Input: 1 Output: [[1]] Note: The structure of the output is a list of binary trees represented in level order traversal where only the second and subsequent levels are populated with \\"null\\" to indicate missing nodes. Constraints: 1 <= n <= 8","solution":"from typing import List, Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def generate_trees(n: int) -> List[Optional[TreeNode]]: if n == 0: return [] def generate_trees_range(start, end): if start > end: return [None] all_trees = [] for i in range(start, end + 1): left_trees = generate_trees_range(start, i - 1) right_trees = generate_trees_range(i + 1, end) for l in left_trees: for r in right_trees: current_tree = TreeNode(i) current_tree.left = l current_tree.right = r all_trees.append(current_tree) return all_trees return generate_trees_range(1, n) def serialize_tree(root: TreeNode): Serialize the tree for level order traversal with \'null\' for empty nodes. from collections import deque if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() if node: result.append(node.val) queue.append(node.left) queue.append(node.right) else: result.append(\\"null\\") # Remove trailing nulls while result and result[-1] == \\"null\\": result.pop() return result def generate_and_serialize_trees(n: int) -> List[List[Optional[int]]]: trees = generate_trees(n) return [serialize_tree(tree) for tree in trees]"},{"question":"In a grid represented by a 2D array, you need to find a \\"peak\\" element. An element is considered a peak if it is strictly greater than its neighbors to the left, right, top, and bottom. For simplicity, treat any elements outside the bounds of the array as negative infinity. Write a function `find_peak` that takes a 2D list (grid) of integers as input, and returns the coordinates (i, j) of any one of the peak elements found in the grid. If there are multiple peak elements, return any one of them. For example, consider the following grid: ``` grid = [ [10, 20, 15], [21, 30, 14], [7, 16, 32] ] ``` One possible \\"peak\\" in this grid is 30 located at (1, 1), since 30 is greater than 21 (top), 20 (left), 14 (right), and 16 (bottom). Another possible peak is 32 located at (2, 2) since it\'s greater than 14 (top), 16 (left), any potential values out of bounds. The function should return one of these or any other peak found. Function signature: ```python def find_peak(grid: List[List[int]]) -> Tuple[int, int]: pass ``` Constraints: - The input grid will have at least 1 row and 1 column. - The dimensions of the grid will not exceed 1000x1000.","solution":"from typing import List, Tuple def find_peak(grid: List[List[int]]) -> Tuple[int, int]: Find a peak element in a 2D grid and return its coordinates. An element is a peak if it is greater than its neighbors. Treat elements outside the bounds of the grid as negative infinity. rows = len(grid) cols = len(grid[0]) def is_peak(i: int, j: int) -> bool: Checks if the grid[i][j] is a peak element. current = grid[i][j] # Check top if i > 0 and grid[i-1][j] >= current: return False # Check bottom if i < rows - 1 and grid[i+1][j] >= current: return False # Check left if j > 0 and grid[i][j-1] >= current: return False # Check right if j < cols - 1 and grid[i][j+1] >= current: return False return True for i in range(rows): for j in range(cols): if is_peak(i, j): return (i, j) # Should not reach here as there should be at least one peak in the grid. return (-1, -1)"},{"question":"# Introduction In the world of coding assessments, understanding how data structures work is essential for problem-solving. This problem will test your knowledge of priority queues and heaps. # Description You need to implement a specialized priority queue that supports some additional functions. It will support the following operations: 1. Insert an element into the priority queue. 2. Remove the maximum element from the priority queue. 3. Return the maximum element from the priority queue without removing it. 4. Return the k-th largest element from the priority queue. **More formally about each of the tasks:** 1. **Insert**: - Takes an integer element and inserts it into the priority queue. - Example: Insert(5) - The priority queue becomes [5] 2. **RemoveMax**: - Removes and returns the maximum element from the priority queue. If the queue is empty, return \\"Error!\\". - Example: Given the priority queue [5, 7, 3], RemoveMax() returns 7 and the priority queue becomes [5, 3]. 3. **GetMax**: - Returns the maximum element from the priority queue without removing it. If the queue is empty, return \\"Error!\\". - Example: Given the priority queue [5, 7, 3], GetMax() returns 7 and the priority queue remains [5, 7, 3]. 4. **GetKthLargest(k)**: - Returns the k-th largest element from the priority queue. If k is out of bounds, return \\"Error!\\". - Example: Given the priority queue [5, 7, 3], GetKthLargest(2) returns 5. **Your task is to implement the following functions in Python:** ```python class SpecialPriorityQueue: def __init__(self): self.queue = [] def insert(self, element): # To Do: Write code to insert element pass def remove_max(self): # To Do: Write code to remove and return the maximum element pass def get_max(self): # To Do: Write code to return the maximum element without removing it pass def get_kth_largest(self, k): # To Do: Write code to return the k-th largest element pass ``` # Examples Input: ```python spq = SpecialPriorityQueue() spq.insert(3) spq.insert(5) spq.insert(1) print(spq.get_max()) # Output: 5 print(spq.get_kth_largest(2)) # Output: 3 print(spq.remove_max()) # Output: 5 print(spq.get_max()) # Output: 3 ``` **Note:** - You must use a heap to implement the priority queue. - All operations should have the best possible time complexity. - Make sure to handle edge cases such as empty queue or out-of-bounds k values.","solution":"import heapq class SpecialPriorityQueue: def __init__(self): self.heap = [] def insert(self, element): # We use a negative value to simulate a max-heap heapq.heappush(self.heap, -element) def remove_max(self): if not self.heap: return \\"Error!\\" return -heapq.heappop(self.heap) def get_max(self): if not self.heap: return \\"Error!\\" return -self.heap[0] def get_kth_largest(self, k): if k < 1 or k > len(self.heap): return \\"Error!\\" # Create a copy of the heap to pop elements without affecting the original heap temp_heap = self.heap[:] max_elements = [] for _ in range(k): max_elements.append(-heapq.heappop(temp_heap)) return max_elements[-1]"},{"question":"You are given an array of integers `height` representing the height of bars in a histogram. Each bar is 1 unit wide. Write a function to calculate the largest rectangle in the histogram. Example 1: Input: height = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has a height of 5 and a width of 2. Example 2: Input: height = [2,4] Output: 4 Explanation: The largest rectangle has a height of 4 and a width of 1. Note: - The input array will contain at least one element and at most 10^4 elements. - The height of each bar will be between 1 and 10^4 inclusive.","solution":"def largestRectangleArea(heights): Calculate the largest rectangle in a histogram given by the heights array. :param heights: List[int], heights representing the histogram bars. :return: int, the area of the largest rectangle. stack = [] # stack will store the indices of the heights array max_area = 0 # variable to store the maximum area index = 0 # index to traverse the heights array while index < len(heights): # If stack is empty or the new height is greater than or equal to the height at stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Calculate area with heights[stack.pop()] as the smallest height top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a function `pairwise_distance` that takes a list of `n` distinct integers as input and returns a tuple consisting of two integers: the smallest pairwise absolute difference and the largest pairwise absolute difference among all pairs of the list elements. Example: ``` Input: [3, 8, 10, 17] Output: (2, 14) Explanation: The pairwise absolute differences are: |3 - 8| = 5 |3 - 10| = 7 |3 - 17| = 14 |8 - 10| = 2 |8 - 17| = 9 |10 - 17| = 7 The smallest difference is 2 and the largest difference is 14. ``` Write the function `pairwise_distance` which takes a list of integers and returns a tuple of the smallest and largest pairwise absolute difference. The list will always contain at least two elements and all elements are distinct.","solution":"def pairwise_distance(lst): Returns the smallest and largest pairwise absolute differences in the list. min_diff = float(\'inf\') max_diff = float(\'-inf\') for i in range(len(lst)): for j in range(i + 1, len(lst)): diff = abs(lst[i] - lst[j]) if diff < min_diff: min_diff = diff if diff > max_diff: max_diff = diff return (min_diff, max_diff)"},{"question":"Chef is participating in a cooking contest where he needs to prepare dishes with an exact calorie count. He has a list of ingredients, each with a specific calorie value, and he needs to select some of these ingredients such that their total calorie count is exactly equal to a given target value. It is assured that there will always be a solution. Given the list of calories and the target value, help Chef by determining the number of ways he can achieve the target calorie count using any subset of the ingredients. The same ingredient can be used multiple times. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N (the number of ingredients) and C (the target calorie count). The second line contains N space-separated integers denoting the calorie values of the ingredients. -----Output----- For each test case, output a single line containing one integer - the number of ways Chef can achieve the exact target calorie count using the given ingredients. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ C ≤ 1000 - 1 ≤ calorie value of each ingredient ≤ 200 -----Example----- Input: 2 3 7 2 3 5 4 10 2 5 3 6 Output: 2 5 -----Explanation----- Example case 1. There are two ways to achieve the target calorie count of 7: - Use the ingredients with calories 2 and 5. - Use the ingredients with calories 2, 2, and 3. Example case 2. There are five ways to achieve the target calorie count of 10: - Use the ingredients with calories 2, 2, 2, 2, and 2. - Use the ingredients with calories 2, 2, 3, and 3. - Use the ingredients with calories 2, 3, and 5. - Use the ingredients with calories 2, 2, 2, and 5. - Use the ingredient with calories 10.","solution":"def count_ways_to_reach_calories(T, test_cases): def count_ways(N, C, calories): dp = [0] * (C + 1) dp[0] = 1 # There\'s one way to make 0 calories, by choosing no ingredients. for cal in calories: for i in range(cal, C + 1): dp[i] += dp[i - cal] return dp[C] results = [] for i in range(T): N, C = test_cases[i][0] calories = test_cases[i][1] result = count_ways(N, C, calories) results.append(result) return results"},{"question":"Define a function that takes an array of integers and returns the first recurring number in it. If there are no recurring numbers, return `None`. Note: A recurring number is a number that appears more than once in the array, regardless of order. For example, given the input [2, 5, 1, 2, 3, 5, 1], the function should return 2.","solution":"def first_recurring_number(arr): Returns the first recurring number in the array. If no recurring number is found, return None. seen = set() for num in arr: if num in seen: return num seen.add(num) return None"},{"question":"Write a function that takes a string containing a mathematical expression involving addition and multiplication (e.g., \\"2+3*4\\") and returns the result of the expression following the correct order of operations (i.e., multiplication before addition). Assume the input string is always a valid expression consisting only of non-negative integers and the characters \'+\', \'*\', with no spaces. ``` For example: evaluate_expression(\\"2+3*4\\") => 14 evaluate_expression(\\"10+2*5+3\\") => 23 ```","solution":"import re def evaluate_expression(expression): Evaluate a mathematical expression containing addition and multiplication, ensuring that multiplication is evaluated first. Args: expression (str): The input string containing the expression. Returns: int: The result of evaluating the expression. # Match multi-digit numbers and operators tokens = re.findall(r\'d+|*|+\', expression) # First evaluate all the multiplication parts i = 0 while i < len(tokens): if tokens[i] == \'*\': result = int(tokens[i - 1]) * int(tokens[i + 1]) tokens = tokens[:i - 1] + [str(result)] + tokens[i + 2:] i -= 1 i += 1 # Now evaluate the remaining addition parts result = 0 for token in tokens: if token != \'+\': result += int(token) return result"},{"question":"You are given a list of integers `nums` and an integer `target`. You need to find all unique pairs of integers in the list that sum up to the given `target`. Write a function that returns a list of unique pairs `[a, b]` such that `a + b` equals `target`. The pairs should be returned as a list of lists. The pairs `[a, b]` and `[b, a]` are considered identical, so you should return only one of them. If no such pairs exist, return an empty list. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 6 Output: [[1, 5], [2, 4]] Example 2: Input: nums = [3, 3, 3, 3], target = 6 Output: [[3, 3]] Example 3: Input: nums = [1, 1, 1, 2, 2, 3, 3], target = 4 Output: [[1, 3], [2, 2]] Example 4: Input: nums = [-1, 0, 1, 2, -1, -4], target = 1 Output: [[-1, 2], [0, 1]] Constraints: * The list `nums` contains at most 10^4 integers. * The integer `target` will be within the range of [-10^9, 10^9].","solution":"def find_pairs(nums, target): Returns a list of unique pairs [a, b] such that a + b equals the given target. nums.sort() seen_pairs = set() result = [] left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: if (nums[left], nums[right]) not in seen_pairs: result.append([nums[left], nums[right]]) seen_pairs.add((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Create a function that receives a string and returns the longest subsequence of unique characters. Two characters are considered part of the same subsequence if they appear consecutively and are not repeated anywhere else within the subsequence. For example: ```python longest_unique_subsequence(\\"abcabcbb\\") should return \\"abc\\" longest_unique_subsequence(\\"bbbbb\\") should return \\"b\\" longest_unique_subsequence(\\"pwwkew\\") should return \\"wke\\" longest_unique_subsequence(\\"abcdefg\\") should return \\"abcdefg\\" ``` In the string \\"abcabcbb\\": - The longest subsequence without repeating characters is \\"abc\\". In the string \\"bbbbb\\": - The longest subsequence without repeating characters is \\"b\\". In the string \\"pwwkew\\": - A longest subsequence without repeating characters is \\"wke\\". Note that \\"pw\\" and \\"kew\\" are subsequences with the same length, however \\"kew\\" appears later. In the string \\"abcdefg\\": - The longest subsequence without repeating characters is \\"abcdefg\\". There are no repeating characters, so the whole string is the longest subsequence. Your function should handle both upper and lower case characters. The final subsequence\'s case should match the input string\'s case.","solution":"def longest_unique_subsequence(s): Determines the longest subsequence of unique characters. Args: s (str): The input string. Returns: str: The longest subsequence of unique characters. if not s: return \\"\\" max_subseq = \\"\\" start = 0 seen = {} for end in range(len(s)): if s[end] in seen and seen[s[end]] >= start: start = seen[s[end]] + 1 seen[s[end]] = end current_subseq = s[start:end + 1] if len(current_subseq) > len(max_subseq): max_subseq = current_subseq return max_subseq"},{"question":"Write a function `common_elements(list1, list2)` that takes two lists as input and returns a list containing all the elements that appear in both lists. The returned list should have no duplicates and the elements can be in any order. Do not use any built-in Python set functions to solve this problem. Example: ```python common_elements([1, 2, 2, 3, 4], [2, 3, 5]) == [2, 3] common_elements([5, 5, 5, 8, 8], [5, 8, 8, 8, 9]) == [5, 8] common_elements([1, 2, 3], [4, 5, 6]) == [] ```","solution":"def common_elements(list1, list2): Returns a list containing all the elements that appear in both lists without duplicates. result = [] seen = set() for item in list1: if item in list2 and item not in seen: result.append(item) seen.add(item) return result"},{"question":"You are given an array of positive integers. Your task is to find the minimum number of operations needed to make all the elements of the array equal. In one operation, you can choose any element of the array and decrease it by 1. -----Input:----- - First line of input contains an integer T, number of test cases. - For each test case, the first line contains an integer n, the number of elements in the array. - The second line contains n space-separated positive integers representing the elements of the array. -----Output:----- Print the minimum number of operations needed for each test case on a new line. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 10^5 - 1 leq Array elements leq 10^9 -----Sample Input:----- 3 3 3 1 2 5 4 3 3 4 2 4 1 1 1 1 -----Sample Output:----- 3 6 0","solution":"def min_operations(test_cases): results = [] for case in test_cases: n, array = case min_val = min(array) operations = sum(x - min_val for x in array) results.append(operations) return results def process_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] line_number = 1 for _ in range(T): n = int(input_lines[line_number]) array = list(map(int, input_lines[line_number + 1].split())) test_cases.append((n, array)) line_number += 2 return test_cases def process_output(results): return \\"n\\".join(map(str, results))"},{"question":"# Find the missing books in the library You are given an inventory list of books that should be present in a library and a current list of books found on the shelves. Your task is to determine the list of missing books that should be on the shelves but are currently not present. We will provide you with two arrays: one containing the expected inventory list and another containing the current list of books on the shelves. Your mission is to find out which books are missing from the shelves and return a sorted array of these missing books. Example ```python inventory_list = [101, 202, 303, 404, 505] current_shelves = [202, 303, 505] missing_books = [101, 404] ``` Explanation We have `inventory_list = [101, 202, 303, 404, 505]` and `current_shelves = [202, 303, 505]`. Books `101` and `404` from the inventory list are not found on the current shelves, so they are missing books. Function Signature ```python def find_missing_books(inventory_list: List[int], current_shelves: List[int]) -> List[int]: pass ```","solution":"def find_missing_books(inventory_list, current_shelves): This function takes in two lists: inventory_list and current_shelves, and returns a sorted list of books that are missing in the current_shelves. inventory_set = set(inventory_list) current_set = set(current_shelves) missing_books = list(inventory_set - current_set) missing_books.sort() return missing_books"},{"question":"Consider a grid of size m x n, represented by a 2D array containing only `0`s and `1`s. For each cell in the grid with a `1`, you need to determine the size of the connected region of `1`s that it belongs to. A region is connected if the cells are adjacent horizontally or vertically, but not diagonally. Your task is to return a 2D array of the same dimensions where each cell contains the size of the connected region it belongs to. If a cell contains `0`, it should remain `0` in the output array. For example: ```python solve([ [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 0, 1, 1] ]) = [ [4, 4, 0, 0], [0, 4, 4, 0], [0, 0, 0, 3], [1, 0, 3, 3] ] ``` You may assume all elements of the grid are initially either `0` or `1`. You can modify the input grid for this problem. More examples in the test cases. Good luck!","solution":"def solve(grid): if not grid or not grid[0]: return grid m, n = len(grid), len(grid[0]) result = [[0] * n for _ in range(m)] visited = [[False] * n for _ in range(m)] def dfs(x, y): stack = [(x, y)] region_size = 0 positions = [] while stack: ix, iy = stack.pop() if ix < 0 or ix >= m or iy < 0 or iy >= n or visited[ix][iy] or grid[ix][iy] == 0: continue visited[ix][iy] = True region_size += 1 positions.append((ix, iy)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: stack.append((ix + dx, iy + dy)) for px, py in positions: result[px][py] = region_size for i in range(m): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: dfs(i, j) return result"},{"question":"Aarav loves playing with numbers and has recently learned about prime numbers. Being the curious kid he is, he wants to create a special sequence. A sequence is called **Special Prime Sequence** if every non-negative integer can be represented as the sum of one or more numbers from the sequence. Given a number K, Aarav wants to generate the smallest possible **Special Prime Sequence** of length K. Help Aarav in finding this sequence. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - The first line of each testcase contains an integer K, denoting the length of the required sequence. -----Output:----- For each testcase, output the smallest possible special prime sequence of length K. The numbers in the sequence should be space-separated. -----Constraints----- - 1 leq T leq 10 - 1 leq K leq 100 -----Sample Input:----- 2 3 5 -----Sample Output:----- 2 3 5 2 3 5 7 11 -----EXPLANATION:----- In the first case, the minimum special prime sequence of length 3 is [2, 3, 5]. In the second case, the minimum special prime sequence of length 5 is [2, 3, 5, 7, 11].","solution":"def smallest_special_prime_sequence(K): # Helper function to generate prime numbers using Sieve of Eratosthenes def generate_primes(n): sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return [x for x in range(n + 1) if sieve[x]] # Ensure reasonable upper limit for prime generation upper_limit = 1000 primes = generate_primes(upper_limit) return primes[:K] # Example: Handling multiple test cases def process_test_cases(test_cases): results = [] for K in test_cases: results.append(smallest_special_prime_sequence(K)) return results"},{"question":"Suppose you have a landscape represented by an array of positive integers, where each integer represents the elevation at that point. Your task is to determine the total volume of water that can be trapped between the elevations when it rains. Water can only be trapped between two elevations if there are elevations on both sides of that point and the elevation at that point is less than the elevations on both sides. The volume of water that can be trapped at a particular location depends on the lesser of the two elevations on either side of that location and the elevation at that point. Given an array of positive integers representing the elevation map where the width of each bar is 1, write a function that computes the water trapped after raining. -----Input----- - The first line of the input contains an integer n. - The second line contains n space-separated integers representing the elevation levels. -----Output----- Print a single integer representing the total units of water that can be trapped. -----Constraints----- - 1 le n le 100,000 - 1 le elevation level le 10,000 -----Example Input----- 9 0 1 0 2 1 0 1 3 2 1 2 1 -----Example Output----- 6 -----Explanation----- The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] forms structures where water can be trapped: - Between the 2nd and 4th block: 1 unit of water can be trapped. - Between the 3rd and 5th block: 2 units of water can be trapped. - Between the 6th and 8th block: 1 unit of water can be trapped. - Between the 9th and 11th block: 2 units of water can be trapped. Thus, a total of 6 units of water can be trapped.","solution":"def trap_water(height): Given an array of positive integers representing the elevation map where the width of each bar is 1, computes the total water trapped after raining. :param height: List[int] : A list of positive integers representing elevation levels :return: int : The total units of water that can be trapped if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"# Task The function `order_seats(n, edges)` should return the minimum number of rows needed to seat `n` people in an auditorium. Each person prefers to sit near their friends, and thus, an edge between two people indicates that they should be seated in the same row. Constraints between friendships are given as edges in an undirected graph. Your code must be efficient and complete the tests within 1 second. Input - `n` (1 ≤ n ≤ 1000): The number of people. - `edges` (0 ≤ edges ≤ n*(n-1)/2): A list of tuples where each tuple `(u, v)` represents a friendship between person `u` and person `v`. Each person is numbered from 1 to `n`. Output The function `order_seats` should return the minimum number of rows needed to seat everyone while respecting the friendship constraints. Examples # Example 1: `n` = 5 `edges` = [(1, 2), (2, 3), (3, 4), (4, 5)] Person-to-person seating chart: ``` 1 - 2 - 3 - 4 - 5 ``` Minimum number of rows needed: ``` 1 ``` Thus, the function should return `1`. # Example 2: `n` = 4 `edges` = [(1, 2), (3, 4)] Person-to-person seating chart: ``` 1 - 2 3 - 4 ``` Minimum number of rows needed: ``` 2 ``` Thus, the function should return `2`. # Example 3: `n` = 6 `edges` = [(1, 2), (2, 3), (4, 5), (5, 6)] Person-to-person seating chart: ``` 1 - 2 - 3 4 - 5 - 6 ``` Minimum number of rows needed: ``` 2 ``` Thus, the function should return `2`. Note The function needs to determine the number of connected components in an undirected graph, as each component represents a group of friends who must be seated together. Each group of connected people will occupy a separate row.","solution":"def order_seats(n, edges): Returns the minimum number of rows needed to seat `n` people in an auditorium based on the friendship constraints given as edges in an undirected graph. from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and mark all reachable nodes def bfs(start, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) component_count = 0 # Find all connected components for person in range(1, n + 1): if not visited[person]: component_count += 1 visited[person] = True bfs(person, visited) return component_count"},{"question":"Manhattan Distance Calculator # Story A group of archaeologists is exploring an ancient city buried under a desert. To navigate through the city, they\'ve created a grid that represents the layout of the city streets. As they move from one point to another, they need to calculate the Manhattan Distance between various coordinates to determine how far they have traveled. Your task is to help them by creating a function that returns the Manhattan Distance between two points on the grid. # Manhattan Distance The Manhattan Distance between two points `(x1, y1)` and `(x2, y2)` on a grid is calculated as `|x1 - x2| + |y1 - y2|`. # Task Write a function `manhattan_distance` that accepts two required arguments, `point1` and `point2`. Each argument is a tuple representing the coordinates of a point, such as `(x, y)`. The function should return the Manhattan Distance between the two points. The function should have the following signature: ```python def manhattan_distance(point1: tuple, point2: tuple) -> int: ``` # Examples ```python manhattan_distance((1, 2), (4, 6)) # returns 7 manhattan_distance((1, 1), (1, 1)) # returns 0 manhattan_distance((0, 0), (3, 4)) # returns 7 manhattan_distance((-1, -2), (-4, -6)) # returns 7 manhattan_distance((2, 3), (-2, -3)) # returns 10 ``` # Constraints - Each point tuple `(x, y)` will contain integer coordinates such that `-10^6 <= x, y <= 10^6`. # Note - No need to handle any other inputs outside the described constraints. - Use the `abs` function to compute the absolute value of the differences.","solution":"def manhattan_distance(point1: tuple, point2: tuple) -> int: Returns the Manhattan Distance between two points. Parameters: point1 (tuple): A tuple representing the coordinates of the first point (x1, y1). point2 (tuple): A tuple representing the coordinates of the second point (x2, y2). Returns: int: The Manhattan Distance between the two points. return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])"},{"question":"The Fibonacci sequence is defined as follows: - F(0) = 0, F(1) = 1 - F(n) = F(n - 1) + F(n - 2) for n > 1 Your task is to write a function that takes two non-negative integers, `n` and `m`, and returns a list of the first `n` Fibonacci numbers, but calculates each Fibonacci number modulo `m`. For example, if you have n = 5 and m = 3, the list of the first 5 Fibonacci numbers modulo 3 would be [0, 1, 1, 2, 0]. Function signature: `def fibonacci_mod(n: int, m: int) -> List[int]:` Example 1: Input: n = 5, m = 3 Output: [0, 1, 1, 2, 0] Explanation: The first 5 Fibonacci numbers are [0, 1, 1, 2, 3], and taking each one modulo 3: [0, 1, 1, 2, 0]. Example 2: Input: n = 7, m = 4 Output: [0, 1, 1, 2, 3, 1, 0] Example 3: Input: n = 10, m = 5 Output: [0, 1, 1, 2, 3, 0, 3, 3, 1, 4] Constraints: - `0 <= n <= 1000` - `1 <= m <= 1000`","solution":"from typing import List def fibonacci_mod(n: int, m: int) -> List[int]: Returns the first n Fibonacci numbers taken modulo m. if n == 0: return [] if n == 1: return [0] fib_mod_sequence = [0, 1] for i in range(2, n): next_fib_mod = (fib_mod_sequence[-1] + fib_mod_sequence[-2]) % m fib_mod_sequence.append(next_fib_mod) return fib_mod_sequence[:n]"},{"question":"Given an array of integers and an integer k, return true if the array contains duplicate elements within k distance of each other. Example 1: Input: nums = [1, 2, 3, 1], k = 3 Output: True Explanation: There is a duplicate 1 within 3 distance from the original 1. Example 2: Input: nums = [1, 0, 1, 1], k = 1 Output: True Explanation: There is a duplicate 1 within 1 distance from the original 1. Example 3: Input: nums = [1, 2, 3, 4], k = 2 Output: False Explanation: There are no duplicates within 2 distance of each other. Note: The array will only contain integers. The maximum length of the array is 100000.","solution":"def contains_nearby_duplicate(nums, k): Returns True if the array contains duplicate elements within k distance of each other. Args: nums (list of int): List of integers. k (int): The maximum distance. Returns: bool: True if there are duplicates within k distance, False otherwise. seen = {} for i, num in enumerate(nums): if num in seen and i - seen[num] <= k: return True seen[num] = i return False"},{"question":"A new restaurant has opened in town and they want to implement a simple point system for their loyal customers. Each customer accumulates points based on the amount they spend on each visit. The restaurant wants to determine the top K customers who have the highest total points over a certain period. Write a program to help the restaurant achieve this. -----Input----- - The first line contains two integers N (the number of customers) and M (the number of transactions). - The second line contains a single integer K. - Each of the next M lines contains two space-separated integers C_i (customer ID) and P_i (points earned in the transaction) describing each transaction. -----Output----- Output the IDs of the top K customers who have the highest total points accumulated. If there are ties, customers with lower IDs should be given preference. The output should be a single line containing K space-separated integers. -----Constraints----- - 1 le N le 10^5 - 1 le M le 10^5 - 1 le K le N - 1 le C_i le N - 1 le P_i le 10^4 -----Example Input----- 5 7 3 1 100 2 50 3 50 1 30 4 90 2 70 5 60 -----Example Output----- 1 2 4 -----Explanation----- In this example, the total points for each customer are: - Customer 1: 130 points - Customer 2: 120 points - Customer 3: 50 points - Customer 4: 90 points - Customer 5: 60 points The top 3 customers with the highest total points are 1, 2, and 4.","solution":"def top_k_customers(N, M, K, transactions): from collections import defaultdict import heapq # Step 1: Calculate the total points for each customer points = defaultdict(int) for C_i, P_i in transactions: points[C_i] += P_i # Step 2: Create a min-heap for the top K customers min_heap = [] for customer_id, total_points in points.items(): heapq.heappush(min_heap, (total_points, customer_id)) if len(min_heap) > K: heapq.heappop(min_heap) # Step 3: Extract the top K customers from the heap and sort by total points and customer ID top_k = sorted(min_heap, key=lambda x: (-x[0], x[1])) # Step 4: Return the customer IDs in the required format return [customer_id for _, customer_id in top_k]"},{"question":"Given a list of integers representing daily temperatures, create a function that returns a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. ```if:python Complete the function `daily_temperatures()` that will use the input list of temperatures and return the list of days to wait for a warmer temperature. ``` ```if-not:python Complete the function `dailyTemperatures()` that will use the input list of temperatures and return the list of days to wait for a warmer temperature. ``` Examples ```if-not:python ~~~js dailyTemperatures([73, 74, 75, 71, 69, 72, 76, 73]) === [1, 1, 4, 2, 1, 1, 0, 0] dailyTemperatures([30, 40, 50, 60]) === [1, 1, 1, 0] dailyTemperatures([30, 60, 90]) === [1, 1, 0] dailyTemperatures([30, 30, 30]) === [0, 0, 0] ~~~ ``` ```if:python ~~~py daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0] daily_temperatures([30, 40, 50, 60]) == [1, 1, 1, 0] daily_temperatures([30, 60, 90]) == [1, 1, 0] daily_temperatures([30, 30, 30]) == [0, 0, 0] ~~~ ```","solution":"def daily_temperatures(T): Returns a list of days to wait for a warmer temperature. :param T: List[int] - list of daily temperatures :return: List[int] - list of days to wait for a warmer temperature n = len(T) answer = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Write a function that takes a string as input and returns a new string with the characters in reverse order. If the input is not a string, the function should return `None`.","solution":"def reverse_string(s): Returns the reverse of the input string s. If the input is not a string, returns None. if not isinstance(s, str): return None return s[::-1]"},{"question":"Given an integer array nums and an integer k, return the k-th largest element in the array. Note that it is the k-th largest element in sorted order, not the k-th distinct element. Example 1: Input: nums = [3,2,1,5,6,4], k = 2 Output: 5 Explanation: The 2nd largest element is 5. Example 2: Input: nums = [1,2,3,4,5,6,7], k = 5 Output: 3 Explanation: The 5th largest element is 3. Example 3: Input: nums = [7,6,5,4,3,2,1], k = 1 Output: 7 Explanation: The 1st largest element is 7. Constraints: 1. 1 <= k <= nums.length <= 10^4 2. -10^4 <= nums[i] <= 10^4","solution":"def find_kth_largest(nums, k): Finds the k-th largest element in the array nums. nums.sort(reverse=True) return nums[k-1]"},{"question":"Sentence Reversal (｡♥‿♥｡) You need to implement a function called \\"**reverseWords**\\" that will reverse the order of words in a given sentence. This function should preserve the original spacing of the sentence, including leading, trailing, and multiple spaces between words. The function takes one parameter, called \\"**sentence**\\", which is a string containing multiple words separated by spaces. # Example: ```python reverseWords(\\"Hello world!\\") # \\"world! Hello\\" reverseWords(\\" The sky is blue \\") # \\" blue is sky The \\" ``` # Notes: - The function should not alter the capitalization of letters. - Punctuation marks and other non-alphabetic characters should be treated as part of the words they belong to. - If the input string is empty, return an empty string. - Consecutive spaces between words and at the start or end of the sentence should be preserved. # Constraints: - You may assume the input string will contain printable ASCII characters only (no newline characters). # Example Usage: ```python sentence = \\" This is a test \\" reverseWords(sentence) # \\" test a is This \\" sentence = \\" Hello world! \\" reverseWords(sentence) # \\" world! Hello \\" ``` **More test cases included!** Try it out! (｡♥‿♥｡)","solution":"def reverseWords(sentence): Reverse the order of words in a given sentence while preserving the original spacing. words = sentence.split(\' \') reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"In a data processing system, there is a log with various events, recorded as strings. Each event string contains a unique event ID, followed by a space, and then a message describing the event. Implement a function `extract_events(log, keyword)` that processes the log, filters the events containing a specific keyword in their messages, and returns a list of event IDs for the filtered events. The function should adhere to the following constraints: 1. `log` is a list of event strings. Each event string is formatted as `<event_id> <message>`, where `<event_id>` is a unique identifier without spaces, and `<message>` is the event description which may contain spaces. 2. `keyword` is a string representing the term that should be present in an event\'s message for it to be included in the result. 3. The function should return a list of event IDs corresponding to the events that contain the `keyword` in their messages. 4. The search should be case-insensitive, i.e., events containing the `keyword` in any combination of upper and lower case should be included. **Example:** ```python log = [ \\"event1 Server started successfully\\", \\"event2 User login failed\\", \\"event3 Disk space low\\", \\"event4 User login succeeded\\", \\"event5 Server shutdown initiated\\" ] # Case 1: Keyword is \\"User\\" # Matching events: \\"event2 User login failed\\", \\"event4 User login succeeded\\" # Expected output: [\\"event2\\", \\"event4\\"] result = extract_events(log, \\"User\\") print(result) # Output: [\\"event2\\", \\"event4\\"] # Case 2: Keyword is \\"SERVER\\" # Matching events: \\"event1 Server started successfully\\", \\"event5 Server shutdown initiated\\" # Expected output: [\\"event1\\", \\"event5\\"] result = extract_events(log, \\"SERVER\\") print(result) # Output: [\\"event1\\", \\"event5\\"] # Case 3: Keyword is \\"disk\\" # Matching event: \\"event3 Disk space low\\" # Expected output: [\\"event3\\"] result = extract_events(log, \\"disk\\") print(result) # Output: [\\"event3\\"] # Case 4: Keyword is \\"login\\" # Matching events: \\"event2 User login failed\\", \\"event4 User login succeeded\\" # Expected output: [\\"event2\\", \\"event4\\"] result = extract_events(log, \\"login\\") print(result) # Output: [\\"event2\\", \\"event4\\"] ``` Make sure your solution handles edge cases, such as: - When `log` is an empty list. - When no events contain the `keyword`. - When `keyword` is an empty string (in which case, all event IDs should be returned). ```python def extract_events(log, keyword): # Implement the function here pass ```","solution":"def extract_events(log, keyword): Processes the log, filters the events containing a specific keyword in their messages, and returns a list of event IDs for the filtered events. Parameters: log (list of str): The list of event strings. keyword (str): The term that should be present in an event\'s message for it to be included. Returns: list of str: The list of event IDs corresponding to the events that contain the keyword. keyword = keyword.lower() result = [] for event in log: event_id, message = event.split(\' \', 1) if keyword in message.lower(): result.append(event_id) return result"},{"question":"You are given a matrix of size N times M, and you need to find the number of ways to traverse from the top-left corner to the bottom-right corner. You can move only one step to the right or one step down at any point in time. The matrix has some blocked cells where you cannot move. Write a function to calculate the number of valid paths. -----Input:----- - The first line contains two integers, N and M - the dimensions of the matrix. - The next N lines contain M integers each, where 0 represents an open cell and 1 represents a blocked cell. -----Output:----- - Output a single integer, the number of valid paths from the top-left corner to the bottom-right corner. -----Constraints:----- - 1 leq N, M leq 100 - The value in the matrix is either 0 or 1. -----Sample Input:----- 3 3 0 0 0 0 1 0 0 0 0 -----Sample Output:----- 2 -----Explanation:----- In this example, there are two possible paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Blocked cells (cells with value 1) cannot be part of any valid path. If the starting or ending cell is blocked, the output should be 0. Ensure that the solution works efficiently within the given constraints.","solution":"def num_ways_to_traverse(matrix): N = len(matrix) M = len(matrix[0]) if matrix[0][0] == 1 or matrix[N-1][M-1] == 1: return 0 dp = [[0]*M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if matrix[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"# Description: You are given a string of words. Your task is to find the word with the greatest number of distinct characters. If there\'s a tie, return the word that appears first in the string. For the purpose of this problem, a word is defined as a sequence of non-space characters. # Constraints: - The input string will have at least one word. - Words are separated by single spaces. - Punctuation is considered a distinct character and is part of the word. # Examples: ``` findWordWithMostDistinctChars(\\"hello world\\") === \\"world\\" findWordWithMostDistinctChars(\\"the quick brown fox jumps over the lazy dog\\") === \\"jumps\\" findWordWithMostDistinctChars(\\"difficult to decide which word\\") === \\"difficult\\" findWordWithMostDistinctChars(\\"go, come, stay, or leave\\") === \\"come,\\" findWordWithMostDistinctChars(\\"abc abc abc abcd\\") === \\"abcd\\" ``` # Note: - The function should be case-sensitive, meaning `A` and `a` are counted as distinct characters. - If the input is an empty string, return an empty string.","solution":"def findWordWithMostDistinctChars(s): Finds the word with the most distinct characters in a given string. If there is a tie, it returns the word that appears first. Parameters: s (str): A string of words separated by spaces. Returns: str: The word with the most distinct characters. if not s: return \\"\\" words = s.split(\' \') max_distinct_chars_word = words[0] max_distinct_count = len(set(words[0])) for word in words[1:]: distinct_count = len(set(word)) if distinct_count > max_distinct_count: max_distinct_chars_word = word max_distinct_count = distinct_count return max_distinct_chars_word"},{"question":"A factory is producing widgets in batches. Each batch has a fixed size, and each widget in the batch has a unique production time. You have an array representing the production time of widgets in a single batch. Your task is to determine the maximum time difference between the production of the fastest and the slowest widget. This will help the factory to optimize the production line. Write a function `max_time_difference` that takes an array of production times as input and returns the maximum difference in production time between the fastest and the slowest widget. # Example ``` Input: [3, 8, 1, 9, 7] Output: 8 Explanation: The maximum time difference is the difference between 9 (the slowest) and 1 (the fastest), which is 8. Input: [15, 22, 11, 23, 16] Output: 12 Explanation: The maximum time difference is the difference between 23 and 11, which is 12. ``` # Constraints - The array will contain between 1 and 100 elements, inclusive. - Each element in the array will be a positive integer not exceeding 1000.","solution":"def max_time_difference(production_times): Returns the maximum time difference between the fastest and slowest widget in the batch. if not production_times: return 0 # if the list is empty, return 0 as there is no time difference min_time = min(production_times) max_time = max(production_times) return max_time - min_time"},{"question":"# Task Given an array of integers `a`, for each integer `x` in the array calculate the sum of its digits and return the maximum sum obtained. # Example For `a = [29, 34, 10009, 12345, 77]`, the output should be `15`. Here are the sums of the array\'s elements: ``` 29: sum(29) = 2 + 9 = 11; 34: sum(34) = 3 + 4 = 7; 10009: sum(10009) = 1 + 0 + 0 + 0 + 9 = 10; 12345: sum(12345) = 1 + 2 + 3 + 4 + 5 = 15; 77: sum(77) = 7 + 7 = 14.``` As you can see, the maximum sum is `15`. # Input/Output - `[input]` integer array `a` Constraints: - `1 ≤ a.length ≤ 10000,` - `1 ≤ a[i] ≤ 1000000000.` - `[output]` an integer The maximum sum of the digits in the array `a`.","solution":"def max_digit_sum(a): Given an array of integers `a`, for each integer `x` in the array, calculate the sum of its digits and return the maximum sum obtained. Parameters: a (list): An array of integers. Returns: int: The maximum sum of the digits in the array `a`. def sum_of_digits(x): return sum(int(digit) for digit in str(x)) return max(sum_of_digits(x) for x in a)"},{"question":"Write a function that takes a list of integers and returns a new list containing all the prime numbers from the original list. The returned list should be sorted in ascending order. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. Example: Input: [15, 3, 10, 7, 18, 11] Output: [3, 7, 11] ~~~if:python For python, use lists. ~~~ In the event of duplicate prime numbers in the input list, each occurrence should be included in the output list.","solution":"def is_prime(n): Returns True if n is a prime number, else returns False. A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # other even numbers are not primes for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def extract_sorted_primes(lst): Takes a list of integers and returns a new list containing all the prime numbers from the original list. The returned list is sorted in ascending order. primes = [num for num in lst if is_prime(num)] return sorted(primes)"},{"question":"Write a function that takes a string as input and determines whether it is a valid palindrome, ignoring non-alphanumeric characters and case sensitivity. A palindrome is a string that reads the same backward as forward. -----Input----- The input consists of a single line containing a string S where 1 ≤ |S| ≤ 200. -----Output----- Output \\"YES\\" if the given string is a palindrome, otherwise output \\"NO\\". -----Example----- Input A man, a plan, a canal, Panama Output YES Input Hello, World! Output NO","solution":"def is_palindrome(s): Checks if the input string is a palindrome, ignoring non-alphanumeric characters and case sensitivity. Parameters: s (str): Input string Returns: str: \\"YES\\" if the string is a palindrome, otherwise \\"NO\\" # Removing non-alphanumeric characters and converting to lower case filtered_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Checking if the filtered string is equal to its reverse return \\"YES\\" if filtered_str == filtered_str[::-1] else \\"NO\\""},{"question":"You are working on a project that involves processing a large number of text documents. One common task is to replace all instances of British English spellings with their American English counterparts. For this task, you will need to convert words with British spellings, such as \\"colour\\", \\"favour\\", and \\"realise\\", to their American equivalents \\"color\\", \\"favor\\", and \\"realize\\". Write a function that takes a string as input and replaces the British spellings with the corresponding American spellings. The words and their replacements should be: - \\"colour\\" -> \\"color\\" - \\"honour\\" -> \\"honor\\" - \\"favour\\" -> \\"favor\\" - \\"realise\\" -> \\"realize\\" - \\"defence\\" -> \\"defense\\" - \\"centre\\" -> \\"center\\" Your function should maintain the original case of the input string. ```python convert_to_american(\'She has a great favour to ask.\') == \'She has a great favor to ask.\' convert_to_american(\'The centre of town is beautiful.\') == \'The center of town is beautiful.\' convert_to_american(\'We should honour their defence tactics.\') == \'We should honor their defense tactics.\' convert_to_american(\'Does she realize that colour and favour are British spellings?\') == \'Does she realize that color and favor are British spellings?\' ```","solution":"def convert_to_american(text): Converts British English spellings to American English spellings in the given text. Parameters: text (str): The input string containing British English spellings. Returns: str: The input string with British spellings replaced by American spellings. british_to_american = { \'colour\': \'color\', \'honour\': \'honor\', \'favour\': \'favor\', \'realise\': \'realize\', \'defence\': \'defense\', \'centre\': \'center\' } # Replace each British spelling with its American counterpart for british, american in british_to_american.items(): text = text.replace(british, american).replace(british.capitalize(), american.capitalize()) return text"},{"question":"Task Write a function that takes a positive integer `n` and returns a string representing the number in base `26`. The digits in this base system are the letters \'A\' to \'Z\'. To convert the number to base `26`, use the following steps: 1. Divide the number by `26` repeatedly to obtain the quotient and remainder. 2. Map the remainder to the corresponding letter (\'A\' for 0, \'B\' for 1, ..., \'Z\' for 25). 3. Construct the base `26` string by concatenating these letters in reverse order of obtaining them from the division process. # Examples ```python convert_to_base26(1) => \\"A\\" convert_to_base26(27) => \\"AA\\" convert_to_base26(703) => \\"AAA\\" convert_to_base26(702) => \\"ZZ\\" ``` # Constraint - The input number `n` must be a positive integer (`1 <= n <= 10^6`).","solution":"def convert_to_base26(n): Converts a positive integer n to a string representing the number in base 26 using the letters \'A\' to \'Z\'. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") base26 = [] while n > 0: n -= 1 # Adjust for 0-indexed calculation base26.append(chr((n % 26) + ord(\'A\'))) n //= 26 return \'\'.join(reversed(base26))"},{"question":"A distributed computing system with n servers is represented as a tree structure rooted at the main server with serverID rootID. Each server has a unique ID from 0 to n-1. The parent of server i is given by the parent array, where parent[rootID] = -1 and parent[i] represents the parent server of the i-th server. Each server can send data chunks to its child servers. The dataTransfer array represents the time (in milliseconds) required for each server to transfer data to its direct child servers. Write a function to find the minimum time required for the main server to transfer a data chunk to all servers in the network. The function should return this minimum time in milliseconds. Example 1: Input: n = 1, rootID = 0, parent = [-1], dataTransfer = [0] Output: 0 Explanation: There is only one server and no transfer is needed. Example 2: Input: n = 4, rootID = 0, parent = [-1, 0, 0, 1], dataTransfer = [1, 2, 2, 1] Output: 3 Explanation: - Server 0 transfers data to servers 1 and 2 in 1 millisecond. - Server 1 further transfers data to server 3 in 2 milliseconds. - Therefore, the total time required is 1 + 2 = 3 milliseconds. Example 3: Input: n = 5, rootID = 1, parent = [1, -1, 1, 2, 3], dataTransfer = [3, 5, 2, 3, 1] Output: 6 Explanation: - Server 1 transfers data to servers 0 and 2 in 5 milliseconds. - Server 2 transfers data to server 3 in 2 milliseconds. - Server 3 transfers data to server 4 in 3 milliseconds. - Therefore, the total time required is 5 + 2 + 1 = 6 milliseconds (as server 4 receives data the latest). Example 4: Input: n = 6, rootID = 0, parent = [-1, 0, 0, 1, 1, 2], dataTransfer = [1, 2, 2, 2, 2, 1] Output: 4 Explanation: - Server 0 transfers data to servers 1 and 2 in 1 millisecond. - Server 1 transfers data to servers 3 and 4 in 2 milliseconds. - Server 2 transfers data to server 5 in 2 milliseconds. - Therefore, the total time required is the maximum of 1 + 2 + 1 = 4 milliseconds. Constraints: - 1 <= n <= 10^5 - 0 <= rootID < n - parent.length == n - 0 <= parent[i] < n - parent[rootID] == -1 - dataTransfer.length == n - 0 <= dataTransfer[i] <= 1000","solution":"def min_transfer_time(n, rootID, parent, dataTransfer): from collections import defaultdict def dfs(server): max_time = 0 for child in tree[server]: child_time = dfs(child) + dataTransfer[child] max_time = max(max_time, child_time) return max_time tree = defaultdict(list) for i in range(n): if parent[i] != -1: tree[parent[i]].append(i) return dfs(rootID)"},{"question":"You are given an integer array `A` of size `N`. You need to find the length of the longest subsequence of `A` such that every element of the subsequence is a power of two (i.e., in the form of 2^k where k is a non-negative integer). A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. Your task is to write a function that returns the length of the longest subsequence formed by powers of two. ---Input--- - The first line contains an integer `T`, the number of test cases. - For each of the test cases: - The first line contains a single integer `N`, the size of the array. - The second line contains `N` space-separated integers A_1, A_2, ldots, A_N. ---Output--- For each test case, print a single integer — the length of the longest subsequence that consists of powers of two. ---Constraints--- - 1 le T le 50 - 1 le N le 10^5 - 1 le A_i le 10^9 for each valid `i` ---Example Input--- 3 5 1 2 3 4 8 4 8 10 12 16 6 2 4 6 8 10 32 ---Example Output--- 4 2 4 ---Explanation--- - In the first test case, the longest subsequence of powers of two could be [1, 2, 4, 8], which has length 4. - In the second test case, the longest subsequence of powers of two could be [8, 16], which has length 2. - In the third test case, the longest subsequence of powers of two could be [2, 4, 8, 32], which has length 4.","solution":"def is_power_of_two(n): Check if a number is a power of two. return n > 0 and (n & (n - 1)) == 0 def longest_power_of_two_subsequence(test_cases): For each test case, return the length of the longest subsequence that consists of powers of two. results = [] for test in test_cases: n, array = test count = sum(1 for x in array if is_power_of_two(x)) results.append(count) return results"},{"question":"Imagine the following scenarios: - A security guard monitoring a network for intrusions - A developer identifying bug patterns in code - A shopper comparing product reviews - A detective finding clues in a series of events All these are examples of the **Longest Increasing Subsequence Problem**, where the goal is to identify a sequence of elements that are ordered according to some criterion, which in this case is that each element must be greater than the one before it. The Problem === Given an array of integers, determine the length of the longest increasing subsequence (LIS). The Longest Increasing Subsequence is a subsequence of a given sequence in which the subsequence\'s elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible. This subsequence is not necessarily contiguous, or unique. More than one LIS may exist. For example, if the input array is `[10, 9, 2, 5, 3, 7, 101, 18]`, then the length of the LIS is `4`, and one of the LIS is `[2, 3, 7, 101]`. The Kata === Write a function `longest_increasing_subsequence` that takes a single parameter, `arr`, and returns a positive integer representing the length of the longest increasing subsequence. `arr` will be an array of integers. Example === ```python >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) 1 ``` Constraints === - The length of the input array will not exceed 1000. - The value of each element in the array will be between -10^4 and 10^4.","solution":"def longest_increasing_subsequence(arr): Function to return the length of the longest increasing subsequence in an array of integers. if not arr: return 0 n = len(arr) dp = [1] * n # dp[i] represents the length of LIS ending at index i for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of integers representing the scores of players in a competitive game. Each player competes in several rounds, and their final score is the sum of their scores from each round. Your task is to determine the top 3 scores among all players and return them in descending order. Write a function that takes a list of integers as input and returns a list of the top 3 scores, sorted from highest to lowest. If there are less than 3 scores, return the scores that exist, still sorted from highest to lowest. Example input: ``` scores = [87, 56, 99, 40, 78, 64, 90, 100, 67, 83] ``` Example output: ``` [100, 99, 90] ``` Example input with less than 3 scores: ``` scores = [45, 82] ``` Example output: ``` [82, 45] ``` Note: You may assume that all scores are non-negative integers.","solution":"def top_three_scores(scores): Returns the top 3 scores in descending order. If there are fewer than 3 scores, returns them sorted in descending order. # Sort scores in descending order sorted_scores = sorted(scores, reverse=True) # Return the top 3 scores return sorted_scores[:3]"},{"question":"Maria has a collection of n words. Each word consists only of lowercase English letters. Maria decided to rearrange the letters in each word so that no two words become identical. To achieve this, Maria can perform any number of swap operations on the letters within each word. You are to determine the minimum number of distinct words Maria can obtain by rearranging the letters within each word. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of words in the collection. The following n lines each contain a word consisting of lowercase English letters. The length of each word is between 1 and 100, inclusive. -----Output----- Print the minimum number of distinct words Maria can obtain by rearranging the letters within each word. -----Examples----- Input 4 hello world test sett Output 3 Input 1 aaaa Output 1 Input 5 abc bca cab abc cba Output 1 -----Note----- In the first example, Maria can rearrange the words as follows: - \\"hello\\" remains \\"hello\\" - \\"world\\" remains \\"world\\" - \\"test\\" remains \\"test\\" - \\"sett\\" can be rearranged as \\"test\\" Therefore, the distinct words become \\"hello\\", \\"world\\", and \\"test\\". In the third example, all words can be rearranged to \\"abc\\", thus resulting in only one distinct word.","solution":"def minimum_distinct_words(n, words): Returns the minimum number of distinct words Maria can obtain by rearranging the letters within each word. Args: n : int : number of words words : list of str : list containing the words Returns: int : minimum number of distinct words # Use a set to keep track of unique sorted words unique_words = set() for word in words: # Sort the characters of the word and add the sorted word to the set sorted_word = \'\'.join(sorted(word)) unique_words.add(sorted_word) # The size of the set is the number of unique words return len(unique_words)"},{"question":"You are given a string s, and you are required to find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within a string. For instance, in the string \\"abcabcbb\\", the substring \\"abc\\" is a substring, while \\"acb\\" is not. -----Input----- First line of the input contains an integer T denoting number of test cases. For each test case, the only line contains a string s. -----Output----- For each test case, output the length of the longest substring of the given string s that does not contain any repeated characters. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ |s| ≤ 105 - The string s consists only of printable ASCII characters. -----Subtasks----- - Subtask #1 (20 points): 1 ≤ |s| ≤ 10 - Subtask #2 (80 points): Original Constraints -----Example----- Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3 -----Explanation----- Example case 1. The longest substring without repeating characters in \\"abcabcbb\\" is \\"abc\\", which has a length of 3. Example case 2. The longest substring without repeating characters in \\"bbbbb\\" is \\"b\\", which has a length of 1. Example case 3. The longest substring without repeating characters in \\"pwwkew\\" is \\"wke\\", which has a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the string s. char_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_map: start = max(start, char_map[char] + 1) char_map[char] = end longest = max(longest, end - start + 1) return longest def process_test_cases(test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"# Task Write a function that takes a list of integers and returns the length of the longest contiguous subsequence that consists of non-decreasing elements. # Example For `nums = [1, 3, 2, 3, 4, 8, 3, 3, 5, 6]`, the output should be `4`. # Input/Output - `[input]` integer array `arr` Non-empty array of integers. Constraints: `1 ≤ arr.length ≤ 1000, -10^5 ≤ arr[i] ≤ 10^5`. - `[output]` an integer The length of the longest contiguous subsequence of non-decreasing elements.","solution":"def longest_non_decreasing_subsequence(arr): Takes a list of integers and returns the length of the longest contiguous subsequence that consists of non-decreasing elements. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, arr.length): if arr[i] >= arr[i - 1]: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest"},{"question":"Calculate Factorial Write a function to calculate the factorial of a non-negative integer. The function should return the factorial of the given number. If the input is negative, return None. Example: ```python factorial(5) --> 120 factorial(0) --> 1 factorial(-3) --> None # Return None if input is negative ```","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns None. if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function that takes an array of integers and returns a new array with each element squared and sorted in non-decreasing order. ``` sortedSquares([-4, -1, 0, 3, 10]) => [0, 1, 9, 16, 100] sortedSquares([-7, -3, 2, 3, 11]) => [4, 9, 9, 49, 121] ``` **Note:** Ensure the solution has a time complexity of O(n).","solution":"def sortedSquares(nums): Returns a new array with each element squared and sorted in non-decreasing order. :param nums: List[int] - the input array of integers :return: List[int] - new array with squared elements sorted in non-decreasing order n = len(nums) left, right = 0, n - 1 result = [0] * n pos = n - 1 while left <= right: left_square = nums[left] ** 2 right_square = nums[right] ** 2 if left_square > right_square: result[pos] = left_square left += 1 else: result[pos] = right_square right -= 1 pos -= 1 return result"},{"question":"You need to write a function that takes a string argument and returns a string that is the \'Pig Latin\' version of the input string. Pig Latin is a game of alterations played on the English language game. 1. For words that begin with a vowel (a, e, i, o, u), add \\"way\\" to the end of the word. - Example: \\"apple\\" becomes \\"appleway\\" 2. For consonants, move all the beginning consonants to the end of the word, then add \\"ay\\". - Example: \\"banana\\" becomes \\"ananabay\\" 3. If the word has no vowels, simply return it as is. 4. Maintain the original case of the input word. Function Signature: ```python def pig_latin(word: str) -> str: pass ``` Examples: ```python pig_latin(\\"hello\\") # output: \\"ellohay\\" pig_latin(\\"apple\\") # output: \\"appleway\\" pig_latin(\\"sphinx\\") # output: \\"phinxsay\\" ```","solution":"def pig_latin(word: str) -> str: Converts a given word to its Pig Latin equivalent. Parameters: word (str): The word to be converted. Returns: str: The Pig Latin version of the word. vowels = \'aeiou\' # Check if the word starts with a vowel if word[0].lower() in vowels: return word + \\"way\\" # Find the index of the first vowel for i, char in enumerate(word): if char.lower() in vowels: return word[i:] + word[:i] + \\"ay\\" # If no vowels are found, return the word as is return word"},{"question":"Write a function that accepts a list of integers and returns a new list that contains the elements of the original list sorted in non-decreasing order, but with all duplicate elements removed. The function should not use any built-in sorting functions. You can utilize any sorting algorithm to achieve the sorted list but must ensure duplicates are removed in the process. # Examples: Example 1: Input: ``` [4, 2, 5, 1, 3, 2, 4] ``` Output: ``` [1, 2, 3, 4, 5] ``` Example 2: Input: ``` [10, 9, 8, 10, 9, 9, 7] ``` Output: ``` [7, 8, 9, 10] ``` Example 3: Input: ``` [1] ``` Output: ``` [1] ```","solution":"def remove_duplicates_and_sort(nums): Returns a new sorted list with duplicates removed from the original list. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) sorted_nums = quicksort(nums) unique_sorted_nums = [] for num in sorted_nums: if not unique_sorted_nums or unique_sorted_nums[-1] != num: unique_sorted_nums.append(num) return unique_sorted_nums"},{"question":"A marathon event is being organized where participants have to complete a race along a zigzag path. Each path direction is either \'U\' (uphill) or \'D\' (downhill). You are required to determine the total elevation change after the runner has completed the race. Uphill increases the elevation by 1 unit, while downhill decreases it by 1 unit. The race always starts at sea level, which has an elevation of 0. -----Input----- - The input consists of a single string consisting of the characters \'U\' and \'D\'. The length of the string is between 1 and 100000 (inclusive). -----Output----- - Output a single integer representing the final elevation after the race. -----Example----- Input: UUDDUUU Output: 3 Explanation: Initially at elevation 0, the steps are as follows: - First \'U\' makes elevation 1. - Second \'U\' makes elevation 2. - First \'D\' makes elevation 1. - Second \'D\' makes elevation 0. - Third \'U\' makes elevation 1. - Fourth \'U\' makes elevation 2. - Fifth \'U\' makes elevation 3.","solution":"def calculate_elevation_change(path): Calculates the total elevation change after completing the path. :param path: A string consisting of \'U\' and \'D\' characters. :return: The final elevation after the race as an integer. elevation = 0 for step in path: if step == \'U\': elevation += 1 elif step == \'D\': elevation -= 1 return elevation"},{"question":"Task: Write a function `sort_and_square_numbers` that accepts a list of integers and returns a list of their squares in non-decreasing order. # Rules/Note: * If the input list is empty, the function should return an empty list. * Any integer, positive or negative, can be present in the list. * The output list must have the squares of the integers sorted in non-decreasing order. # Example: * `sort_and_square_numbers([3, -1, 4, 1, 5])` should return `[1, 1, 9, 16, 25]` * `sort_and_square_numbers([-9, -2, 0, 2, 3])` should return `[0, 4, 4, 9, 81]` # Additional Information: * You can use the built-in `sorted()` function to sort the list. * Be sure to handle edge cases such as an empty list or a list with all negative numbers. # Hint: * Use list comprehension to square each number in the list before sorting.","solution":"def sort_and_square_numbers(numbers): Returns a list of the squares of the given list of integers, sorted in non-decreasing order. Parameters: numbers (list): List of integers Returns: list: List of squared integers sorted in non-decreasing order squared_numbers = [n ** 2 for n in numbers] return sorted(squared_numbers)"},{"question":"Given an array of integers, find the minimal number of continuous subarrays that need to be removed to make the remaining array strictly increasing. A strictly increasing array is one where every element is strictly greater than the one before it. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array. -----Output----- Print a single integer — the minimal number of continuous subarrays that need to be removed. -----Examples----- Input 7 3 5 2 6 4 8 7 Output 2 Input 5 1 2 3 4 5 Output 0","solution":"def min_subarrays_to_remove(arr): n = len(arr) if n <= 1: return 0 def is_strictly_increasing(arr): return all(arr[i] < arr[i+1] for i in range(len(arr)-1)) # Check if the array is already strictly increasing if is_strictly_increasing(arr): return 0 # Track the first and last non-increasing elements first_non_increasing = -1 last_non_increasing = -1 for i in range(n - 1): if arr[i] >= arr[i + 1]: if first_non_increasing == -1: first_non_increasing = i last_non_increasing = i # If complete array is non-increasing then we need entire array to be removed if first_non_increasing == 0 and last_non_increasing == n - 2: return 1 # The minimum number of subarrays to remove is either removing the prefix or suffix return 2 if first_non_increasing != -1 else 0"},{"question":"You are given a string `s` consisting only of lowercase English letters. A substring is defined as a sequence of consecutive characters from the original string. Write a function to find the longest palindromic substring in `s`. A palindrome reads the same backward as forward. Return the longest palindromic substring. Example 1: Input: s = \\"babad\\" Output: \\"bab\\" Explanation: \\"aba\\" is also a valid answer. Example 2: Input: s = \\"cbbd\\" Output: \\"bb\\" Example 3: Input: s = \\"a\\" Output: \\"a\\" Example 4: Input: s = \\"ac\\" Output: \\"a\\" Constraints: 1 <= s.length <= 1000 s consists only of lower-case English letters.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string `s`. Args: s (str): A string consisting of lowercase English letters. Returns: str: The longest palindromic substring in `s`. if not s: return \\"\\" n = len(s) start = 0 end = 0 def expand_from_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): # Odd length palindromes left1, right1 = expand_from_center(i, i) if right1 - left1 > end - start: start, end = left1, right1 # Even length palindromes left2, right2 = expand_from_center(i, i+1) if right2 - left2 > end - start: start, end = left2, right2 return s[start:end+1]"},{"question":"You are given a string s consisting of lowercase letters. A substring s[l:r] (where 1 le l le r le |s|) is called \\"beautiful\\" if it satisfies the following conditions: 1. It consists of only one distinct character. 2. Its length is a palindrome (a string is a palindrome if it reads the same backward as forward). For example, let\'s say s = \\"abbaac\\". The string \\"abbaac\\" has 6 beautiful substrings: s[1:1] = \'a\', s[2:2] = \'b\', s[3:3] = \'b\', s[4:4] = \'a\', s[5:5] = \'a\', and s[6:6] = \'c\'. Your task is to calculate the number of beautiful substrings of string s. You have to answer t independent queries. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of queries. The only line of each query contains string s (1 le |s| le 2 cdot 10^5), consisting of only lowercase letters. It is guaranteed that sumlimits_{i=1}^{t} |s_i| le 2 cdot 10^5. -----Output----- For each query print one integer — the number of beautiful substrings of string s. -----Example----- Input 3 banana abccba foobar Output 6 6 6","solution":"def count_beautiful_substrings(s): Returns the number of beautiful substrings in the string s. A beautiful substring has only one distinct character, and its length is a palindrome. beautiful_count = 0 n = len(s) i = 0 while i < n: char = s[i] start = i while i < n and s[i] == char: i += 1 length = i - start # Beautiful substrings will be of every length from 1 to \'length\' beautiful_count += length return beautiful_count def solve(queries): results = [] for s in queries: results.append(count_beautiful_substrings(s)) return results"},{"question":"You have been given the task to write a program that helps track calorie consumption in a fitness application. Users can log their meals throughout the day, each meal having a name and an associated number of calories. Additionally, users can mark meals as either \\"healthy\\" or \\"unhealthy\\" based on their diet preferences. Your task: 1. Create a class `MealLog` that allows users to log meals and categorize them as healthy or unhealthy. 2. Implement methods to: - Add a meal with its name, calorie count, and a boolean indicating if it\'s healthy. - Calculate the total number of calories consumed. - Retrieve a list of all meals, optionally filtered to show only healthy meals or only unhealthy meals. # Requirements: - Define the `MealLog` class with appropriate attributes. - Implement the `add_meal(name: str, calories: int, is_healthy: bool)` method to log a new meal. - Implement the `total_calories()` method to return the total calories consumed. - Implement the `get_meals(show_healthy: bool=None)` method to return a list of meals. If `show_healthy` is `True`, it should return only healthy meals. If `show_healthy` is `False`, it should return only unhealthy meals. If `show_healthy` is `None`, it should return all meals. Here are some example scenarios to illustrate how the `MealLog` class should work: ```python # Example Usage meal_log = MealLog() meal_log.add_meal(\\"Salad\\", 150, True) meal_log.add_meal(\\"Burger\\", 500, False) meal_log.add_meal(\\"Smoothie\\", 200, True) assert meal_log.total_calories() == 850 # Total calories are 150 + 500 + 200 all_meals = meal_log.get_meals() # Expected: [{\'name\': \'Salad\', \'calories\': 150, \'is_healthy\': True}, {\'name\': \'Burger\', \'calories\': 500, \'is_healthy\': False}, {\'name\': \'Smoothie\', \'calories\': 200, \'is_healthy\': True}] healthy_meals = meal_log.get_meals(show_healthy=True) # Expected: [{\'name\': \'Salad\', \'calories\': 150, \'is_healthy\': True}, {\'name\': \'Smoothie\', \'calories\': 200, \'is_healthy\': True}] unhealthy_meals = meal_log.get_meals(show_healthy=False) # Expected: [{\'name\': \'Burger\', \'calories\': 500, \'is_healthy\': False}] ``` Implement the `MealLog` class and the required methods to satisfy the above requirements and examples.","solution":"class MealLog: def __init__(self): self.meals = [] def add_meal(self, name: str, calories: int, is_healthy: bool): meal = { \\"name\\": name, \\"calories\\": calories, \\"is_healthy\\": is_healthy } self.meals.append(meal) def total_calories(self): return sum(meal[\\"calories\\"] for meal in self.meals) def get_meals(self, show_healthy: bool=None): if show_healthy is None: return self.meals return [meal for meal in self.meals if meal[\\"is_healthy\\"] == show_healthy]"},{"question":"Write a function named `is_palindrome` that takes a string as input and returns `True` if the string is a palindrome, and `False` otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. A palindrome reads the same forward and backward, ignoring spaces, punctuation, and capitalization. import re # Remove non-alphanumeric characters and convert to lower case clean_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return clean_s == clean_s[::-1]"},{"question":"# Task You are given a string `s` of lowercase alphabetical characters. You need to determine if any anagram of `s` can be a palindrome. An anagram of a string is another string formed by rearranging the characters of the original string using all the original characters exactly once. A palindrome is a word that reads the same backward as forward. Return a boolean indicating whether any anagram of `s` can be a palindrome (true) or not (false). # Input/Output `[input]` string `s` A non-empty string of lowercase alphabetical characters. `2 ≤ s.length ≤ 1000` `[output]` a boolean # Example For `s = \\"civic\\"`, the output should be `true`. Any permutation of \\"civic\\" (like \\"ivicc\\") can be rearranged to form the palindrome \\"civic\\". For `s = \\"aabb\\"`, the output should be `true`. An anagram \\"abba\\" or \\"baab\\" can be rearranged to form the palindrome \\"abba\\". For `s = \\"abc\\"`, the output should be `false`. No anagram of \\"abc\\" can be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if any anagram of the input string can be a palindrome. Args: s (str): The input string of lowercase alphabetical characters. Returns: bool: True if any anagram of the input string can be a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character counts = Counter(s) # Palindrome Condition: At most one character can have an odd count odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"=====Function Descriptions===== sorted(iterable[, cmp[, key[, reverse]]]) This function returns a new sorted list from the elements of any iterable. The can be specified and to determine the sorted order. The option determines whether the list is sorted in descending order. Sample Code >>> a = [5, 2, 3, 1, 4] >>> sorted(a) [1, 2, 3, 4, 5] >>> sorted(a, reverse=True) [5, 4, 3, 2, 1] >>> sorted(a, key=lambda x: x % 2) [2, 4, 1, 3, 5] =====Problem Statement===== A popular online store conducts a promotion and offers discounts based on the customer\'s total purchase amount. The promotion works as follows: - If the total purchase amount is less than or equal to 50, there is no discount. - If the total purchase amount is more than 50 but less than or equal to 100, there is a 10% discount. - If the total purchase amount is more than 100, there is a 20% discount. Your task is to compute the final total for each customer after applying the respective discounts. =====Input Format===== The first line contains an integer N, the number of customers. The next N lines each contain a number representing the total purchase amount for a customer. =====Constraints===== 0<N≤1000 0≤purchase_amount≤10000 =====Output Format===== Print the final total for each customer on separate lines. The final totals must be correct up to 2 decimal places. =====Example===== Input: 3 45.50 120.00 75.00 Output: 45.50 96.00 67.50","solution":"def calculate_final_total(purchase_amounts): This function takes a list of purchase amounts and returns a corresponding list of final amounts after applying the discount. final_amounts = [] for amount in purchase_amounts: if amount <= 50: final_amounts.append(round(amount, 2)) elif 50 < amount <= 100: final_amounts.append(round(amount * 0.90, 2)) else: final_amounts.append(round(amount * 0.80, 2)) return final_amounts def apply_discounts(N, amounts): Given the number of customers and a list of purchase amounts, calculating the final total for each customer after applying discounts. This function prints the final totals correct to 2 decimal places. final_totals = calculate_final_total(amounts) for total in final_totals: print(format(total, \\".2f\\"))"},{"question":"You are given two strings, x and y. The goal is to determine the length of the longest uncommon subsequence between the two strings. The longest uncommon subsequence is defined as a subsequence that exists in one string but not in the other string. A subsequence of a string is a sequence that can be derived from the string by deleting some or no characters without changing the order of the remaining characters. If there is no uncommon subsequence, the length is considered to be -1. -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases in the input. Each of the following t lines contains two strings x and y (1 le |x|, |y| le 100), consisting of lowercase English letters only. -----Output----- Print t integers: the longest uncommon subsequence lengths for all test cases in the order they are given in the input. -----Example----- Input 3 aba cad abcd abcd abcdefg hi Output 4 -1 7 -----Note----- In the first test case, \\"cad\\" is a subsequence of both strings, but \\"aba\\" is not a subsequence of \\"cad\\", so the answer is 4, the length of \\"cad\\". In the second test case, both strings are identical, so there is no uncommon subsequence, thus the answer is -1. In the third case, any subsequence of \\"abcdefg\\" is not a subsequence of \\"hi\\" and vice versa, hence the answer is 7, the length of \\"abcdefg\\".","solution":"def longest_uncommon_subsequence_length(t, cases): Returns the length of the longest uncommon subsequence between pairs of strings. Parameters: t (int): Number of test cases. cases (list of tuples): Each tuple contains two strings x and y. Returns: list: Length of the longest uncommon subsequence for each test case. result = [] for x, y in cases: if x == y: result.append(-1) else: result.append(max(len(x), len(y))) return result"},{"question":"Your task is to implement a function **findLongestWord** which accepts a string of space-separated words and returns the longest word. In case of a tie (two or more words with the same maximum length), return the first one encountered in the string. Consider words to be sequences of alphabetic characters only. Note: You may assume that the string contains at least one word and it only consists of spaces and alphabetic characters. Example: ```python findLongestWord(\\"The quick brown fox jumped over the lazy dogs\\") -> \\"jumped\\" findLongestWord(\\"To be or not to be that is the question\\") -> \\"question\\" ```","solution":"def findLongestWord(s): Returns the longest word in a given string of space-separated words. If multiple words have the maximum length, the first one encountered is returned. words = s.split() longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word"},{"question":"You are given a list of integers where the i-th integer represents the height of the i-th person in a queue. Your task is to determine the minimum number of subarrays (contiguous subsequence of the array) required to partition the queue such that, within each subarray, the heights are in strictly increasing order. -----Input----- The first line contains one integer n (1 le n leq 200,000) — the number of people in the queue. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), where h_i is the height of the i-th person in the queue. -----Output----- Print one integer — the minimum number of subarrays required. -----Example----- Input 5 1 2 3 4 5 Output 1 Input 6 1 2 1 2 1 2 Output 3 -----Note----- In the first example, the entire queue is already in strictly increasing order, so only one subarray is needed. In the second example, the queue can be partitioned into three subarrays [1, 2], [1, 2], and [1, 2], each of which is in strictly increasing order.","solution":"def min_subarrays(arr): Determines the minimum number of subarrays required such that each subarray is in strictly increasing order. Parameters: arr (list): List of integers representing the heights. Returns: int: Minimum number of subarrays required. if not arr: return 0 subarrays_count = 1 for i in range(1, len(arr)): if arr[i] <= arr[i-1]: subarrays_count += 1 return subarrays_count # Example usage: # n = 5 # heights = [1, 2, 3, 4, 5] # print(min_subarrays(heights)) # Output should be 1"},{"question":"You are given a list of N integers. Your task is to determine if there exist two non-overlapping subarrays of length exactly K such that both subarrays have the same sum. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains N and K. - The second line contains N space-separated integers, the elements of the list. -----Output:----- For each test case, print \\"YES\\" (without quotes) if there exist two non-overlapping subarrays of length exactly K with the same sum, otherwise print \\"NO\\" (without quotes). -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq K leq N - -10^4 leq List elements leq 10^4 -----Sample Input:----- 2 7 3 1 2 3 4 1 2 3 5 2 1 2 3 4 5 -----Sample Output:----- YES NO -----EXPLANATION:----- - Example 1: The subarrays [1, 2, 3] and [1, 2, 3] both have the sum 6 and are non-overlapping. - Example 2: No two non-overlapping subarrays of length 2 have the same sum.","solution":"def find_subarrays_with_same_sum(arr, k): This function checks if there exist two non-overlapping subarrays of length exactly K with the same sum. sums_map = {} n = len(arr) # Compute the sum of the first \'k\' elements current_sum = sum(arr[:k]) sums_map[current_sum] = [0] # Compute sums for subarrays of length \'k\', starting from index 1 to n-k+1 for i in range(1, n - k + 1): current_sum = current_sum - arr[i - 1] + arr[i + k - 1] if current_sum in sums_map: # Check if any stored index range [+K] does not overlap with the current range for start_index in sums_map[current_sum]: if abs(start_index - i) >= k: return \\"YES\\" sums_map[current_sum].append(i) else: sums_map[current_sum] = [i] return \\"NO\\" def process_test_cases(T, test_cases): results = [] for case in test_cases: N, K = case[0] arr = case[1] result = find_subarrays_with_same_sum(arr, K) results.append(result) return results"},{"question":"Given an array and an integer k, you need to write a function to determine if there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most k and the absolute difference between i and j is at most t. Write a function `contains_nearby_almost_duplicate(nums, k, t)` that returns True if such elements are found, otherwise False. # Input - `nums`: A list of integers. - `k`: An integer representing the maximum allowed index difference. - `t`: An integer representing the maximum allowed difference between the values at the two indices. # Output - The function should return a boolean value: True if there exist two indices `i` and `j` such that `|nums[i] - nums[j]| <= t` and `|i - j| <= k`, otherwise False. # Examples ``` contains_nearby_almost_duplicate([1, 3, 1, 4, 2], 1, 1) => False contains_nearby_almost_duplicate([1, 5, 9, 1, 5, 9], 3, 2) => True contains_nearby_almost_duplicate([2, 1, 2, 1], 1, 0) => False ```","solution":"def contains_nearby_almost_duplicate(nums, k, t): Determines if there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is at most t and the absolute difference between i and j is at most k. if k <= 0 or t < 0 or not nums: return False n = len(nums) values = {} for i in range(n): bucket_id = nums[i] // (t + 1) if bucket_id in values: return True if bucket_id - 1 in values and abs(nums[i] - values[bucket_id - 1]) <= t: return True if bucket_id + 1 in values and abs(nums[i] - values[bucket_id + 1]) <= t: return True values[bucket_id] = nums[i] if i >= k: del values[nums[i - k] // (t + 1)] return False"},{"question":"Given an m x n binary matrix `grid`, return the number of distinct islands in the grid. An island is a group of one\'s (representing land) connected 4-directionally (vertical or horizontal). Two islands are considered distinct if and only if one island is not equal to another (not counting rotations or flips). Example 1: Input: grid = [[1,1,0,0,0], [1,1,0,0,0], [0,0,0,1,1], [0,0,0,1,1]] Output: 1 Explanation: There is only one distinct island. Example 2: Input: grid = [[1,1,0,0,1], [1,1,0,0,1], [0,0,0,1,1], [0,0,0,1,1]] Output: 2 Explanation: There are two distinct islands, one top-left and one top-right. Constraints: - m == grid.length - n == grid[i].length - 1 <= m, n <= 100 - grid[i][j] is either 0 or 1. Helper function (optional): You are allowed to write a helper function if necessary to break down the problem into smaller, manageable parts.","solution":"def numDistinctIslands(grid): Returns the number of distinct islands in a binary matrix grid. def dfs(x, y, direction): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 0: return grid[x][y] = 0 shape_signature.append(direction) dfs(x + 1, y, \'d\') # down dfs(x - 1, y, \'u\') # up dfs(x, y + 1, \'r\') # right dfs(x, y - 1, \'l\') # left shape_signature.append(\'b\') # backtracking distinct_shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: shape_signature = [] dfs(i, j, \'o\') # origin distinct_shapes.add(tuple(shape_signature)) return len(distinct_shapes)"},{"question":"Consider you have an array of non-negative integers, and you want to rotate the array clockwise by `k` positions, where `k` is a non-negative integer. When rotating the array clockwise, the last elements are moved to the beginning of the array. Write a function to rotate the array of integers by a given number of positions and return the resulting array. # Function Signature ```python def rotate_array(arr: List[int], k: int) -> List[int]: pass ``` # Input - `arr`: list of non-negative integers, length can be 0 to 1000. - `k`: a non-negative integer representing the number of positions to rotate the array. # Output - Return the rotated array as a list of integers. # Example ```python rotate_array([1, 2, 3, 4, 5], 2) # Output: [4, 5, 1, 2, 3] rotate_array([0, 1, 2], 4) # Output: [2, 0, 1] ```","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: length = len(arr) if length == 0: return arr k = k % length # Ensure k is within the bounds of the array length return arr[-k:] + arr[:-k]"},{"question":"You are given a list of words and need to find the longest word in the list that can be constructed one character at a time by other words in the list. Each step of the word construction must also be a valid word in the list. If there are multiple possible results, return the word that is smallest in lexicographical order. Example 1: Input: words = [\\"a\\", \\"banana\\", \\"app\\", \\"appl\\", \\"ap\\", \\"apply\\", \\"apple\\"] Output: \\"apple\\" Explanation: The word \\"apple\\" can be built from the strings: \\"a\\", \\"ap\\", \\"app\\", \\"appl\\", \\"apple\\". Also, \\"apple\\" is lexicographically smaller than \\"apply\\". Example 2: Input: words = [\\"w\\",\\"wo\\",\\"wor\\",\\"worl\\",\\"world\\"] Output: \\"world\\" Explanation: The word \\"world\\" can be built from the strings: \\"w\\", \\"wo\\", \\"wor\\", \\"worl\\", \\"world\\". Note: - All the strings in the input list consist of lowercase letters. - The input list will be non-empty and contain at most 1000 words. - The length of each word will be in the range [1, 30].","solution":"def longest_word(words): Returns the longest word in the list that can be constructed one character at a time by other words in the list. If multiple words have the same length, returns the smallest lexicographical word. words_set = set(words) longest = \\"\\" for word in words: if all(word[:i] in words_set for i in range(1, len(word) + 1)): if len(word) > len(longest) or (len(word) == len(longest) and word < longest): longest = word return longest"},{"question":"=====Problem Statement===== Consider a dictionary (dict = {}). You can perform the following commands: 1. add k v: Add a key-value pair k:v to the dictionary. 2. remove k: Remove the entry with key k from the dictionary. 3. exists k: Check if key k exists in the dictionary. 4. get k: Retrieve the value corresponding to key k. 5. keys: Print all keys in the dictionary. 6. values: Print all values in the dictionary. 7. clear: Clear the entire dictionary. Initialize your dictionary and read in the value of n followed by n lines of commands where each command will be 7 of the types listed above. Iterate through each command in order and perform the corresponding operation on your dictionary. =====Example===== N = 5 add name Alice add age 25 exists name get age keys add name Alice: Add the entry \\"name\\": \\"Alice\\" to the dictionary, dict = {\\"name\\": \\"Alice\\"}. add age 25: Add the entry \\"age\\": 25 to the dictionary, dict = {\\"name\\": \\"Alice\\", \\"age\\": 25}. exists name: Check if \\"name\\" exists, returns True. get age: Get the value of \\"age\\", returns 25. keys: Print all keys in the dictionary. Output: True 25 [\'name\', \'age\'] =====Input Format===== The first line contains an integer, n, denoting the number of commands. Each line i of the subsequent n lines contains one of the commands described above. =====Constraints===== - The keys will be strings. - The values can be integers or strings. =====Output Format===== For each command of types exists, get, keys, and values, print the corresponding output on a new line.","solution":"def dict_operations(n, commands): dictionary = {} result = [] for command in commands: command_parts = command.split() action = command_parts[0] if action == \'add\': key, value = command_parts[1], command_parts[2] if value.isdigit(): value = int(value) dictionary[key] = value elif action == \'remove\': key = command_parts[1] if key in dictionary: del dictionary[key] elif action == \'exists\': key = command_parts[1] result.append(key in dictionary) elif action == \'get\': key = command_parts[1] result.append(dictionary.get(key)) elif action == \'keys\': result.append(list(dictionary.keys())) elif action == \'values\': result.append(list(dictionary.values())) elif action == \'clear\': dictionary.clear() return result"},{"question":"Task Create a function `unique_in_order` that takes a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements. The function should work for both strings and lists of characters or numbers. ```python unique_in_order(\'AAAABBBCCDAABBB\') == [\'A\', \'B\', \'C\', \'D\', \'A\', \'B\'] unique_in_order(\'ABBCcAD\') == [\'A\', \'B\', \'C\', \'c\', \'A\', \'D\'] unique_in_order([1,2,2,3,3]) == [1, 2, 3] unique_in_order([1,1,2,3,3,2]) == [1, 2, 3, 2] ``` The function should be able to handle an empty input sequence by returning an empty list. ```python unique_in_order(\'\') == [] unique_in_order([]) == [] ```","solution":"def unique_in_order(sequence): Returns a list of items without any elements with the same value next to each other and preserving the original order of elements. Arguments: sequence -- a string or list of characters/numbers Returns: list -- a list of items with adjacent duplicates removed if not sequence: return [] result = [sequence[0]] for item in sequence[1:]: if item != result[-1]: result.append(item) return result"},{"question":"**Introduction** Alex is given a list of integers by his teacher. His teacher asks him to find all unique pairs of integers in the list that sum up to a given target integer. Alex finds it challenging and asks for your help. **Task** Given a list of integers and a target integer, return a list of all unique pairs of integers from the given list that sum up to the target integer. A pair is considered unique if no element in the pair repeats with another pair, and the pairs themselves are unique irrespective of order. **Input:** - A list of integers `nums` (1 <= n <= 10^4, -10^6 <= nums[i] <= 10^6). - An integer `target` (-10^6 <= target <= 10^6). **Output:** - A list of tuples, where each tuple contains two integers that sum up to the given target integer. The order of tuples in the output does not matter, but each element inside a tuple should be in non-decreasing order. **Examples:** ``` (nums = [1, 2, 3, 4, 3, 5], target = 6) => [(1, 5), (2, 4), (3, 3)] (nums = [0, -1, 2, -3, 1], target = -2) => [(-3, 1)] (nums = [4, 4, 4, 4], target = 8) => [(4, 4)] (nums = [5, -2, 4, 0, -2, 7], target = 3) => [(-2, 5)] ``` **Notes:** - Each pair should be output in a tuple sorted in non-decreasing order. - The function should handle cases with no valid pairs by returning an empty list. - There should be no duplicated pairs in the output.","solution":"def find_unique_pairs(nums, target): Returns a list of all unique pairs of integers from nums that sum up to target. Each pair is represented as a tuple in non-decreasing order. nums.sort() pairs_set = set() left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs_set.add((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return list(pairs_set)"},{"question":"The art gallery displays paintings in a unique manner where all paintings are arranged in a single row. Each painting has a beauty score associated with it. The curator wants to select a contiguous subarray of paintings such that the sum of their beauty scores is exactly S. However, the curator has very limited time, so they want you to help determine if such a subarray exists. -----Input:----- - The first line contains two integers N (the number of paintings) and S (the desired sum). - The second line contains N integers, representing the beauty scores of the paintings. -----Output:----- Print \'YES\' if there exists a contiguous subarray of paintings whose total beauty score equals S. Otherwise, print \'NO\'. -----Constraints----- - 1 leq N leq 5 times 10^4 - -10^4 leq text{Beauty score of each painting} leq 10^4 - -10^9 leq S leq 10^9 -----Sample Input:----- 5 7 1 2 3 4 5 -----Sample Output:----- YES -----Sample Input:----- 4 10 -1 3 5 -3 -----Sample Output:----- NO","solution":"def subarray_with_sum_exists(N, S, beauty_scores): Determines if there exists a contiguous subarray with a sum equals to S. Parameters: N (int): Number of paintings. S (int): Desired sum of beauty scores. beauty_scores (list of int): List of integers representing the beauty scores. Returns: str: \'YES\' if such a subarray exists, otherwise \'NO\'. current_sum = 0 prefix_sums = {0} for score in beauty_scores: current_sum += score if (current_sum - S) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"Write a function `validSudoku` that determines if a given 9x9 Sudoku board is valid. The board is represented by a 2D array, where each entry is a character: \'1\'-\'9\', representing a digit, or \'.\' representing an empty space. A valid Sudoku board must satisfy the following rules: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition. Note that the Sudoku board does not necessarily have to be solvable, it just needs to be valid according to the above rules. For example: Given the following board: `````` The function should return True. In another example: Given the following board: `````` The function should return False. Note that the first row and the first column both contain the digit \'8\', violating the rule that each digit must occur once per row and once per column. Additionally, the first 3x3 sub-box in the above example also contains the digit \'8\' twice. Implement the function with the method signature: ```python def validSudoku(board: List[List[str]]) -> bool: ```","solution":"def validSudoku(board): def is_valid_block(block): block = [i for i in block if i != \'.\'] return len(block) == len(set(block)) def get_block(board, start_row, start_col): block = [] for i in range(3): for j in range(3): block.append(board[start_row + i][start_col + j]) return block # Check rows for row in board: if not is_valid_block(row): return False # Check columns for col in range(9): column = [board[row][col] for row in range(9)] if not is_valid_block(column): return False # Check 3x3 sub-boxes for row in range(0, 9, 3): for col in range(0, 9, 3): block = get_block(board, row, col) if not is_valid_block(block): return False return True"},{"question":"Write a function `frequency_sort` that sorts the elements of a list based on their frequency of occurrence. Elements that have the same frequency should be sorted by their natural order. The function should take a list of integers and return a new list with the integers sorted as described above. Examples: ```python frequency_sort([1,1,2,2,2,3]) => [2, 2, 2, 1, 1, 3] frequency_sort([4,5,6,5,4,3]) => [4, 4, 5, 5, 3, 6] frequency_sort([9,2,5,6,9,9,2,2,2,8]) => [2, 2, 2, 2, 9, 9, 9, 5, 6, 8] ```","solution":"from collections import Counter def frequency_sort(lst): Sort elements of the given list based on their frequency of occurrence. Elements with the same frequency are sorted by their natural order. Parameters: lst (List[int]): List of integers to be sorted Returns: List[int]: New list of integers sorted by frequency and natural order frequency = Counter(lst) return sorted(lst, key=lambda x: (-frequency[x], x))"},{"question":"Complete the function that takes a list of integers as input, and returns a new list where each integer is replaced by the sum of itself and all previous integers in the list. Examples ```python nums = [1, 2, 3] ==> [1, 3, 6] # [1, (1+2), (1+2+3)] nums = [4, -1, 2] ==> [4, 3, 5] # [4, (4-1), (4-1+2)] nums = [0, 0, 0] ==> [0, 0, 0] # [0, (0+0), (0+0+0)] ```","solution":"def cumulative_sum(nums): Returns a new list where each integer is replaced by the sum of itself and all previous integers in the list. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"Given a grid of size N x M, and a robot initially positioned at (X, Y), calculate the number of unique paths the robot can take to reach the bottom-right corner of the grid (N, M). The robot can only move either down or right at any point in time. Assume the grid coordinates start from (1, 1) at the top-left corner. -----Constraints----- - 1 leq N, M leq 20 - 1 leq X leq N - 1 leq Y leq M -----Input----- Input is given from Standard Input in the following format: N M X Y -----Output----- Print the number of unique paths the robot can take from (X, Y) to (N, M). -----Sample Input----- 3 3 1 1 -----Sample Output----- 6 -----Explanation----- In a 3x3 grid, starting from (1, 1), the robot has 6 unique paths to reach (3, 3): 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right If starting from a different position, the number of unique paths will vary.","solution":"def unique_paths(N, M, X, Y): Calculate the number of unique paths from (X, Y) to (N, M) in a grid of size N x M where only moves to the right or down are allowed. Parameters: N (int): number of rows M (int): number of columns X (int): starting row Y (int): starting column Returns: int: number of unique paths from (X, Y) to (N, M) # Initialize a table to store the number of paths to each cell dp = [[0] * (M + 1) for _ in range(N + 1)] # Set the starting position dp[X][Y] = 1 # Fill the dp table for i in range(X, N + 1): for j in range(Y, M + 1): if i > X: dp[i][j] += dp[i-1][j] # Move from top if j > Y: dp[i][j] += dp[i][j-1] # Move from left return dp[N][M]"},{"question":"You are given two integer arrays `arr1` and `arr2` sorted in ascending order and with no duplicate elements. Your task is to find the intersection of these two arrays, that is, the numbers that are present in both arrays. Return the intersection as an array of sorted unique integers. Example 1: Input: arr1 = [1, 3, 4, 5, 7], arr2 = [2, 3, 5, 6] Output: [3, 5] Example 2: Input: arr1 = [2, 3, 4, 7, 9], arr2 = [1, 2, 3, 4, 8, 10] Output: [2, 3, 4] Example 3: Input: arr1 = [1, 2, 9, 10, 11, 12], arr2 = [0, 1, 3, 4, 5, 11] Output: [1, 11] Example 4: Input: arr1 = [3, 6, 7, 8, 20], arr2 = [1, 2, 3, 8, 9] Output: [3, 8] Constraints: - 1 <= arr1.length, arr2.length <= 1000 - 0 <= arr1[i], arr2[i] <= 1000 - Both `arr1` and `arr2` are sorted in ascending order.","solution":"def intersection(arr1, arr2): Returns the intersection of two sorted arrays as a sorted list of unique integers. i, j = 0, 0 result = [] while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if not result or result[-1] != arr1[i]: result.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return result"},{"question":"A string is considered to be \\"balanced\\" if all characters in the string appear the same number of times. Given a string `s`, write a function that checks if the string is balanced. The function should return `True` if the string is balanced and `False` otherwise. **Example**: ```python def is_balanced(s): # your code here # Example 1: # Input: \\"aabbcc\\" # Output: True print(is_balanced(\\"aabbcc\\")) # Example 2: # Input: \\"aabbccd\\" # Output: False print(is_balanced(\\"aabbccd\\")) # Example 3: # Input: \\"abcabc\\" # Output: True print(is_balanced(\\"abcabc\\")) # Example 4: # Input: \\"abcabcabc\\" # Output: True print(is_balanced(\\"abcabcabc\\")) # Example 5: # Input: \\"xyzxyyz\\" # Output: False print(is_balanced(\\"xyzxyyz\\")) ``` **Constraints**: - The input string will only contain lowercase alphabets. - The length of the string will be between `1` and `1000`.","solution":"def is_balanced(s): This function checks if the input string s is balanced. A string is considered to be \\"balanced\\" if all characters in the string appear the same number of times. from collections import Counter if not s: return True count = Counter(s) values = list(count.values()) return all(v == values[0] for v in values)"},{"question":"Sam owns a farm with N fields where he grows different crops. Each field i (1 ≤ i ≤ N) has a certain number of units of crop Ci. To maximize his farm\'s productivity, Sam wants to ensure that the difference between the field with the maximum units of crops and the field with the minimum units of crops is as small as possible. He can perform two types of operations: 1. Move one unit of crop from one field to another. 2. Grow one additional unit of crop in any field (this operation is more costly). Sam wants to perform the minimum number of operations to achieve the smallest possible difference between the maximum and minimum units of crops across all fields. He seeks your help to determine this minimum number of operations. -----Input:----- - The first line consists of an integer T representing the number of test cases. - Each test case consists of 2 lines. - The first line contains an integer N, the number of fields. - The second line contains N space-separated integers (C1 to CN), the number of units of crops in each field. -----Output:----- For each test case, you must print the minimum number of operations required. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 0 leq Ci leq 10^9 -----Sample Input:----- 2 4 4 9 7 3 3 1 1 1 -----Sample Output:----- 4 0","solution":"def min_operations_to_balance_crops(test_cases): Given the number of fields and the units of crops in each field, returns the minimum number of operations required to achieve the smallest possible difference between the maximum and minimum units of crops. Parameters: test_cases: List of tuples, where each tuple contains number of fields and a list of integers representing the units of crops in each field. Returns: List of integers where each integer represents the minimum operations needed for each test case. results = [] for num_fields, crops in test_cases: max_crop = max(crops) min_crop = min(crops) result = max_crop - min_crop results.append(result) return results # Example Input Handling def handle_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): N = int(lines[line_index]) crops = list(map(int, lines[line_index + 1].split())) test_cases.append((N, crops)) line_index += 2 return test_cases def main(input_data): test_cases = handle_input(input_data) results = min_operations_to_balance_crops(test_cases) for result in results: print(result) # Sample Input input_data = \\"2n4n4 9 7 3n3n1 1 1\\" main(input_data)"},{"question":"You are given a string representing a sequence of directions where each character corresponds to a specific direction: - \'N\' - North - \'S\' - South - \'E\' - East - \'W\' - West Each direction represents a step taken in that direction on a Cartesian plane, starting from the origin point (0, 0). Create a function that calculates the final coordinates after following the entire sequence of directions. For example: ``` \\"NESW\\" => (0, 0) \\"NNN\\" => (0, 3) \\"EEWWN\\" => (0, 1) ``` The input string can be of arbitrary length and may be empty. All input is guaranteed to be valid, i.e., each input string will only consist of \'N\', \'S\', \'E\', and/or \'W\'.","solution":"def final_coordinates(directions): Calculate the final coordinates after following a sequence of directions. Args: directions (str): A string representing a sequence of directions. Returns: tuple: The final coordinates after following all directions. x, y = 0, 0 for direction in directions: if direction == \'N\': y += 1 elif direction == \'S\': y -= 1 elif direction == \'E\': x += 1 elif direction == \'W\': x -= 1 return (x, y)"},{"question":"You are given an array of integers and an integer `k`. Your task is to write a function `rotateArray(arr, k)` that rotates the array to the right by `k` positions. The rotation should be performed in-place and the function should return the modified array. **Note:** - You should handle both positive and negative values of `k`. - The array can be empty or contain only one element, in which case the array remains unchanged. - If `k` is greater than the length of the array, it should wrap around. **Examples:** ```python rotateArray([1, 2, 3, 4, 5], 2) # Output: [4, 5, 1, 2, 3] rotateArray([1, 2, 3, 4, 5], -2) # Output: [3, 4, 5, 1, 2] rotateArray([], 3) # Output: [] rotateArray([7], 5) # Output: [7] ``` Happy coding!","solution":"def rotateArray(arr, k): Rotates the array arr to the right by k positions. Parameters: arr (list of int): The array to rotate. k (int): The number of positions to rotate the array by. Returns: list of int: The rotated array. n = len(arr) if n == 0: return arr k = k % n # Normalize k to ensure it\'s within the bounds of the array length return arr[-k:] + arr[:-k]"},{"question":"# Task Given an array of integers and a target integer, return the indices of the two numbers in the array that add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. # Example For `nums = [2, 7, 11, 15]` and `target = 9`, the result should be `[0, 1]` because `nums[0] + nums[1] = 2 + 7 = 9`. # Input/Output - `[input]` array of integers `nums` An array of integers where `2 <= len(nums) <= 10^5` and `-10^9 <= nums[i] <= 10^9`. - `[input]` integer `target` An integer target such that `-10^9 <= target <= 10^9`. - `[output]` an array of integers An array containing the indices of the two numbers that add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. Parameters: nums (list of int): The array of integers. target (int): The target integer. Returns: list of int: The indices of the two numbers that add up to the target. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i"},{"question":"In this challenge, you are to create a function that generates all possible pairs of elements from two given lists. The function should return a list of tuples, where each tuple contains one element from the first list and one element from the second list. --- # Examples ```python >>> generate_pairs([1, 2], [\'a\', \'b\']) [(1, \'a\'), (1, \'b\'), (2, \'a\'), (2, \'b\')] >>> generate_pairs([3], [4]) [(3, 4)] >>> generate_pairs([\'x\', \'y\'], [10, 20, 30]) [(\'x\', 10), (\'x\', 20), (\'x\', 30), (\'y\', 10), (\'y\', 20), (\'y\', 30)] >>> generate_pairs([], [1, 2, 3]) [] >>> generate_pairs([7, 8], []) [] ``` Good luck!","solution":"def generate_pairs(list1, list2): Generates all possible pairs of elements from two given lists. Args: list1 (list): First list of elements. list2 (list): Second list of elements. Returns: list: A list of tuples, where each tuple contains one element from list1 and one element from list2. return [(a, b) for a in list1 for b in list2]"},{"question":"You are given an integer array, `nums`, of length `n` and an integer, `k`, with `1 ≤ k ≤ n`. Write a function to find the `k` most frequent elements in the array and return them in an array sorted by their frequency from highest to lowest. If multiple elements have the same frequency, return them in any order relative to each other. The program should include: 1. A function `top_k_frequent_elements(nums, k)` which takes: - `nums` (list of integers): The array of integers. - `k` (integer): The number of most frequent elements to return. 2. A return statement that returns a list with the `k` most frequent elements sorted by frequency. **Examples:** ```python top_k_frequent_elements([1,1,1,2,2,3], 2) # Output: [1, 2] top_k_frequent_elements([1], 1) # Output: [1] ``` **Constraints:** - `1 ≤ nums.length ≤ 10^5` - `k` is always valid, that is `1 ≤ k ≤ nums.length`","solution":"from collections import Counter def top_k_frequent_elements(nums, k): Returns the k most frequent elements from the list nums. :param nums: List of integers. :param k: Number of top frequent elements to return. :return: List of k most frequent elements sorted by their frequency. # Count the frequency of each element in nums frequency_counter = Counter(nums) # Get the k most common elements most_common_elements = frequency_counter.most_common(k) # Extract the elements from the tuples returned by most_common return [element for element, count in most_common_elements]"},{"question":"You are given an array of integers `nums` representing the values of various items, and an integer `limit` representing the maximum weight capacity of your knapsack. There is also a corresponding array `weights` where `weights[i]` is the weight of the `i-th` item. You can either choose to include an item in the knapsack or leave it out, but the total weight of the chosen items must not exceed `limit`. Your objective is to maximize the total value of the items in the knapsack. Return the maximum total value you can achieve without exceeding the weight limit. Example 1: Input: nums = [60, 100, 120], weights = [10, 20, 30], limit = 50 Output: 220 Explanation: Take items with values 100 and 120 (weights 20 and 30), thus total value = 100 + 120 = 220. Example 2: Input: nums = [10, 20, 30], weights = [1, 1, 1], limit = 2 Output: 50 Explanation: Take items with values 20 and 30 (weights 1 and 1), thus total value = 20 + 30 = 50. Example 3: Input: nums = [10], weights = [5], limit = 3 Output: 0 Explanation: Cannot take item with value 10 because its weight exceeds the limit. Note: - 1 <= nums.length, weights.length <= 1000 - 1 <= nums[i], weights[i] <= 1000 - The knapsack weight limit, `limit`, will be between 1 and 1000.","solution":"def knapsack(nums, weights, limit): n = len(nums) # dp[i] will be the maximum value achievable with weight limit i dp = [0] * (limit + 1) for i in range(n): for w in range(limit, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + nums[i]) return dp[limit]"},{"question":"Create a function that takes an array of integers and returns an array of the same integers but sorted in such a way that the even numbers are sorted in ascending order and placed at the beginning, followed by the odd numbers sorted in descending order. For example: ``` [5, 3, 2, 8, 1, 4] ==> [2, 4, 8, 5, 3, 1] [9, 7, 4, 6, 3, 2] ==> [2, 4, 6, 9, 7, 3] ``` If the array is empty, return an empty array: ``` [] ==> [] ```","solution":"def custom_sort(arr): Sorts the array such that even numbers are placed at the beginning in ascending order, followed by odd numbers in descending order. Parameters: arr (list): A list of integers Returns: list: A sorted list with even numbers first in ascending order followed by odd numbers in descending order. evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) return evens + odds"},{"question":"Julia loves playing with sequences of numbers. She especially enjoys finding subsequences that form arithmetic progressions. An arithmetic progression (AP) is a sequence of numbers in which the difference between consecutive terms is constant. For example, the sequence 2, 4, 6, 8 is an AP with a common difference of 2, and the sequence 5, 1, -3 is an AP with a common difference of -4. Given a sequence of n integers, can you determine the length of the longest subsequence that is an arithmetic progression? The subsequence does not need to be contiguous, but it must maintain the original order of the sequence. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 10^3) – the number of test cases. For each test case: The first line contains a single integer n (1 leq n leq 5000) — the length of the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 leq a_i leq 10^9) — the elements of the sequence. -----Output----- For each test case, print a single line containing the length of the longest subsequence that is an arithmetic progression. -----Example----- Input 2 4 3 6 9 12 5 2 4 6 8 10 Output 4 5 -----Note----- In the first test case, the entire sequence 3, 6, 9, 12 is already an arithmetic progression with a common difference of 3, so the answer is 4. In the second test case, the sequence 2, 4, 6, 8, 10 is an arithmetic progression with a common difference of 2, so the answer is 5.","solution":"def longest_arithmetic_subsequence_length(n, sequence): if n == 1: return 1 dp = [{} for _ in range(n)] max_length = 2 for i in range(n): for j in range(i): diff = sequence[i] - sequence[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length def process_test_cases(test_cases): results = [] for n, sequence in test_cases: results.append(longest_arithmetic_subsequence_length(n, sequence)) return results"},{"question":"Write a function `asteroidCollision` that determines the state of asteroids after all collisions. You are given an array of integers `asteroids` representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet. The function: - `asteroidCollision(asteroids)`: should return an array representing the state of the asteroids after all collisions. # Example: - `asteroidCollision([5, 10, -5])` -> `[5, 10]` - Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide. - `asteroidCollision([8, -8])` -> `[]` - Explanation: The 8 and -8 collide exploding each other. - `asteroidCollision([10, 2, -5])` -> `[10]` - Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10. - `asteroidCollision([-2, -1, 1, 2])` -> `[-2, -1, 1, 2]` - Explanation: The -2 and -1 move left. The 1 and 2 move right. No collision occurs. # Guidelines: 1. Implement a stack-based approach to simulate the process of collisions. 2. Iterate over the asteroid array, and use the stack to manage the collision outcomes.","solution":"def asteroidCollision(asteroids): stack = [] for asteroid in asteroids: while stack and asteroid < 0 < stack[-1]: if stack[-1] < -asteroid: stack.pop() continue elif stack[-1] == -asteroid: stack.pop() break else: stack.append(asteroid) return stack"},{"question":"You are given a string consisting of lowercase letters of the English alphabet. You need to count the number of distinct substrings of the given string. To clarify, substrings are contiguous sequences of characters within a string. As an example, the substrings of \\"abc\\" include \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Note that \\"abc\\" and \\"bca\\" are not the same substrings since they start at different positions in different strings. Write a function `distinct_substrings` that takes a single string `s` as its input and returns the number of distinct substrings in the string. Examples: ```python distinct_substrings(\\"abcd\\") => 10 # All substrings are [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\"] distinct_substrings(\\"abcb\\") => 9 # All substrings are [\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"cb\\", \\"abc\\", \\"bcb\\", \\"abcb\\"] distinct_substrings(\\"aaa\\") => 3 # All substrings are [\\"a\\", \\"aa\\", \\"aaa\\"] distinct_substrings(\\"abab\\") => 7 # All substrings are [\\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"bb\\", \\"aba\\", \\"bab\\"] ``` Constraints: - The length of the input string `s` will be between 1 and 1000. - The input string will only contain lowercase English letters.","solution":"def distinct_substrings(s): Returns the number of distinct substrings of the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings)"},{"question":"You are given an integer `N` and an array of `N` integers. Find the longest subarray whose sum is divisible by `k`. Function Signature: `def longest_subarray_with_divisible_sum(arr: List[int], k: int) -> int:` # Input - `arr` which is a list of `N` integers (1 <= N <= 10^5, -10^9 <= arr[i] <= 10^9) - `k` (1 <= k <= 10^5) # Output - Return the length of the longest subarray whose sum is divisible by `k`. # Example Example 1 ```python arr = [2, 7, 6, 1, 4, 5] k = 3 longest_subarray_with_divisible_sum(arr, k) -> 4 ``` Explanation: The subarray [7, 6, 1, 4] has a sum of 18 which is divisible by 3. Example 2 ```python arr = [1, 2, 3, 4, 1] k = 5 longest_subarray_with_divisible_sum(arr, k) -> 4 ``` Explanation: The subarray [2, 3, 4, 1] has a sum of 10 which is divisible by 5. # Notes - Focus on an efficient solution that leverages mathematical properties, considering the constraints. - Avoid brute-force solutions due to large possible input sizes.","solution":"from typing import List def longest_subarray_with_divisible_sum(arr: List[int], k: int) -> int: remainder_dict = {0: -1} max_length = 0 current_sum = 0 for i, num in enumerate(arr): current_sum += num remainder = current_sum % k # normalizing remainder in case it\'s negative if remainder < 0: remainder += k if remainder in remainder_dict: max_length = max(max_length, i - remainder_dict[remainder]) else: remainder_dict[remainder] = i return max_length"},{"question":"Write a function that takes two lists of numbers, representing the coefficients of two polynomials, and returns a list of numbers representing the coefficients of their product. The input lists will represent the coefficients in ascending order of power, meaning the first element corresponds to the constant term, the second to the linear term, and so on. ``` For example: polynomial_product([1, 2], [2, 3]) # Represents (1 + 2x) * (2 + 3x) => [2, 7, 6] # Which represents the polynomial 2 + 7x + 6x^2 polynomial_product([1, 0, -1], [1, 2]) # Represents (1 + 0x - x^2) * (1 + 2x) => [1, 2, -1, -2] # Which represents the polynomial 1 + 2x - x^2 - 2x^3 ```","solution":"def polynomial_product(poly1, poly2): Returns the product of two polynomials represented by their coefficients in ascending order. :param poly1: List[int], coefficients of the first polynomial :param poly2: List[int], coefficients of the second polynomial :return: List[int], coefficients of the product polynomial product = [0] * (len(poly1) + len(poly2) - 1) for i in range(len(poly1)): for j in range(len(poly2)): product[i + j] += poly1[i] * poly2[j] return product"},{"question":"Write a function ```generate_spiral_matrix(n)``` that takes in a number ```n``` and returns an ```nxn``` matrix containing numbers from ```1``` to ```n^2``` in a clockwise spiral pattern. E.g. ```python generate_spiral_matrix(3) == [[ 1, 2, 3], [ 8, 9, 4], [ 7, 6, 5]] generate_spiral_matrix(4) == [[ 1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]] ```","solution":"def generate_spiral_matrix(n): Generates an n x n matrix filled with elements from 1 to n^2 in spiral order. matrix = [[0] * n for _ in range(n)] curr_num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): matrix[top][i] = curr_num curr_num += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = curr_num curr_num += 1 right -= 1 for i in range(right, left - 1, -1): matrix[bottom][i] = curr_num curr_num += 1 bottom -= 1 for i in range(bottom, top - 1, -1): matrix[i][left] = curr_num curr_num += 1 left += 1 return matrix"},{"question":"You are given a sequence B_1, B_2, ldots, B_N consisting of positive integers. Determine the length of the longest subsequence whose elements are alternatively even and odd. -----Input----- - The first line of the input contains a single integer M denoting the number of test cases. The description of M test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers B_1, B_2, ldots, B_N. -----Output----- For each test case, print a single line containing one integer ― the length of the longest subsequence. -----Constraints----- - 1 le M le 10 - 1 le N le 10^5 - 1 le B_i le 10^9 for each valid i -----Subtasks----- Subtask #1 (40 points): N le 1000 Subtask #2 (60 points): original constraints -----Example Input----- 2 5 1 2 5 4 3 6 2 2 2 2 2 2 -----Example Output----- 5 1","solution":"def longest_alternating_subsequence(array): Returns the length of the longest subsequence whose elements are alternatively even and odd if not array: return 0 # Initialize the length of the longest subsequence max_length = 1 current_length = 1 # Iterate through the array for i in range(1, len(array)): # Check if the current element alternates with the previous element if (array[i] % 2) != (array[i - 1] % 2): current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(test_cases): results = [] for N, array in test_cases: results.append(longest_alternating_subsequence(array)) return results"},{"question":"# Overview Your task is to write a function that will calculate the largest possible product of three integers in an array. # Problem Statement Given an array of integers, your task is to find the highest product that can be achieved by multiplying any three of the integers. # Input - An array of integers `arr`. # Output - An integer representing the maximum product of any three integers in the given array. # Example ```python def highest_product_of_three(arr): pass # Example Inputs and outputs print(highest_product_of_three([1, 10, 2, 6, 5, 3])) # Output: 300 - Explanation: The highest product is 10 * 6 * 5 = 300 print(highest_product_of_three([-10, -10, 1, 3, 2])) # Output: 300 - Explanation: The highest product is obtained by multiplying the two negative numbers resulting in a positive product: -10 * -10 * 3 = 300 print(highest_product_of_three([5, 9, 1, 7, 8, -3])) # Output: 504 - Explanation: The highest product is 9 * 8 * 7 = 504 ``` # Constraints - The array will contain at least three integers. - The integers can be both positive and negative. - The size of the array `n` will not exceed `10^5`. Good luck!","solution":"def highest_product_of_three(arr): Calculate the largest possible product of any three integers in the array. Parameters: arr (list): List of integers. Returns: int: The maximum product of any three integers in the array. arr.sort() # The max product is either from the three largest numbers or from two smallest and one largest. max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"Round Robin Tournament Ranking Brief You are responsible for ranking teams after a round-robin tournament. In a round-robin tournament, each team plays every other team exactly once. A team\'s ranking is determined by the total number of points it has, where a win earns 3 points, a draw earns 1 point, and a loss earns 0 points. Write a function `rank_teams` to compute the final rankings. Specifications You are given: - A list of strings `teams`, each a unique team name. - A list of tuples `results`, each representing a match result in the format (`team1`, `score1`, `team2`, `score2`), where `team1` and `team2` are two teams, and `score1` and `score2` are their scores respectively. The function should return a list of tuples where each tuple consists of a team\'s name and their points in descending order of points. If two teams have the same number of points, they should be listed in alphabetical order. # Example ```python teams = [\\"Red\\", \\"Green\\", \\"Blue\\"] results = [(\\"Red\\", 3, \\"Green\\", 1), (\\"Green\\", 2, \\"Blue\\", 2), (\\"Blue\\", 4, \\"Red\\", 1)] # \\"Red\\" vs \\"Green\\": Red wins (3 points for Red, 0 points for Green) # \\"Green\\" vs \\"Blue\\": Draw (1 point each) # \\"Blue\\" vs \\"Red\\": Blue wins (3 points for Blue, 0 points for Red) # Final points: # Red: 3 points # Green: 1 point # Blue: 4 points rank_teams(teams, results) == [(\\"Blue\\", 4), (\\"Red\\", 3), (\\"Green\\", 1)] ``` # Constraints - Each team name in `teams` is unique. - `results` will have entries that involve the same team only once and will cover all pairwise matches between teams. - There will be no more than 10 teams.","solution":"def rank_teams(teams, results): Ranks teams based on their performance in a round-robin tournament. Args: teams (list): List of team names. results (list): List of tuples representing match results in the format (team1, score1, team2, score2). Returns: list: Sorted list of tuples where each tuple is (team_name, points). points = {team: 0 for team in teams} for team1, score1, team2, score2 in results: if score1 > score2: points[team1] += 3 elif score2 > score1: points[team2] += 3 else: points[team1] += 1 points[team2] += 1 ranked_teams = sorted(points.items(), key=lambda x: (-x[1], x[0])) return ranked_teams"},{"question":"You are given an array of integers where each integer represents the gross salary of different employees in a company. You need to determine the **smallest positive integer** that cannot be represented as the sum of any subset of the array. -----Input----- - The first line of input contains a single integer T, denoting the number of test cases. - The following T lines describe each test case as follows: - The first line of each test case contains an integer N, the number of elements in the array. - The second line contains N space-separated integers, representing the array. -----Output----- For each test case, print a single line containing the smallest positive integer that cannot be represented as the sum of any subset of the array. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le A[i] le 10^9 -----Example Input----- 2 3 1 2 2 4 1 2 5 10 -----Example Output----- 6 4","solution":"def smallest_non_representable_integer(arr): Returns the smallest positive integer that cannot be represented as the sum of any subset of the array. arr.sort() smallest_unreachable = 1 for num in arr: if num > smallest_unreachable: break smallest_unreachable += num return smallest_unreachable def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(smallest_non_representable_integer(arr)) return results"},{"question":"Amanda is working on a project that involves managing a database of taxi rides. She is tasked with finding the shortest route between two points in a city, represented as a weighted graph, where intersections are nodes and streets are edges with weights corresponding to the time taken to travel them. As part of this project, she needs to implement Dijkstra\'s algorithm. The program should find the shortest path from a source node to a target node in the graph and output the total time of this path. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5) — the number of nodes and edges in the graph, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5) — representing an edge between nodes u and v with a travel time w. All given edges are bidirectional. The next line contains two integers s and t (1 ≤ s, t ≤ n) — the source node and the target node. -----Output----- Print a single integer — the total travel time of the shortest path from the source node s to the target node t. If there is no path, print -1. -----Examples----- Input 5 7 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 5 1 5 Output 5 Input 4 3 1 2 6 2 3 2 3 4 5 1 4 Output 13 -----Note----- In the first example, the shortest path from node 1 to node 5 is 1 -> 2 -> 3 -> 5 with a total travel time of 2 + 1 + 2 = 5. In the second example, the shortest path from node 1 to node 4 is 1 -> 2 -> 3 -> 4 with a total travel time of 6 + 2 + 5 = 13.","solution":"import heapq def dijkstra(n, edges, source, target): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) min_heap = [(0, source)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node == target: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return -1"},{"question":"Given an integer array `nums` and an integer `k`, determine whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most `k`. Note: - The array can contain negative numbers. - The array may have up to 10^5 elements. - You should aim for a solution with optimal time complexity. Example 1: Input: nums = [1, 2, 3, 1] k = 3 Output: true Explanation: There are two 1s in the array, and the distance between them is 3, which is equal to k. Example 2: Input: nums = [1, 0, 1, 1] k = 1 Output: true Explanation: There are two 1s in the array, and the distance between them is 1, which is equal to k. Example 3: Input: nums = [1, 2, 3, 1, 2, 3] k = 2 Output: false Explanation: Although there are two 1s and two 2s in the array, their distances are greater than 2. For the 1s, the distance is 3 and for the 2s, it is also 3.","solution":"def contains_nearby_duplicate(nums, k): Checks whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k. Args: nums: List[int] - an array of integers. k: int - the maximum allowed index difference. Returns: bool - True if such elements exist, otherwise False. num_indices = {} for i, num in enumerate(nums): if num in num_indices and i - num_indices[num] <= k: return True num_indices[num] = i return False"},{"question":"Chef is teaching his apprentice to create sequences in the kitchen! The apprentice has shown interest in learning about arithmetic sequences. Given an initial term `a`, a common difference `d`, and a position `n`, help the apprentice determine the `n`-th term of the sequence. ---Input:--- - The first line contains a single integer `T`, the number of test cases. - The next `T` lines each contain three space-separated integers `a`, `d`, and `n` where: - `a` is the initial term of the arithmetic sequence. - `d` is the common difference of the arithmetic sequence. - `n` is the position of the term to find in the arithmetic sequence. ---Output:--- For each test case, output the `n`-th term of the arithmetic sequence. ---Constraints:--- - `1 leq T leq 50` - `-1000 leq a, d leq 1000` - `1 leq n leq 10000` ---Sample Input:--- 3 2 3 4 1 -5 10 7 0 5 ---Sample Output:--- 11 -44 7","solution":"def find_nth_term(a, d, n): Returns the n-th term of an arithmetic sequence given the initial term a, the common difference d, and the position n. return a + (n - 1) * d def process_test_cases(T, test_cases): Processes multiple test cases for finding the n-th term in arithmetic sequences. results = [] for a, d, n in test_cases: results.append(find_nth_term(a, d, n)) return results"},{"question":"Write a function `calculate_power_sums(n)` that takes a positive integer `n` and returns the number of distinct sums obtained by adding the cubes of any two distinct positive integers such that both integers are less than or equal to `n`. For example: ``` calculate_power_sums(2) -----> 1 # because the distinct sum is: 1^3 + 2^3 = 9 calculate_power_sums(3) ------> 3 # because the distinct sums are: 1^3 + 2^3 = 9, 1^3 + 3^3 = 28, 2^3 + 3^3 = 35 calculate_power_sums(4) ------> 6 # because the distinct sums are: 1^3 + 2^3 = 9, 1^3 + 3^3 = 28, 1^3 + 4^3 = 65, 2^3 + 3^3 = 35, 2^3 + 4^3 = 72, 3^3 + 4^3 = 91 ``` Note: The same sum should not be counted more than once, even if it can be obtained by different pairs of integers. For instance, the calculation should count only distinct sums and not distinguish between sums obtained in different orders, such as considering 1^3 + 2^3 as the same as 2^3 + 1^3.","solution":"def calculate_power_sums(n): distinct_sums = set() for i in range(1, n): for j in range(i + 1, n + 1): power_sum = i**3 + j**3 distinct_sums.add(power_sum) return len(distinct_sums)"},{"question":"A vending machine dispenses bottles of water for various pricing strategies. Despite different costs, the machine accepts only a fixed set of coins: pennies (1 cent), nickels (5 cents), dimes (10 cents), and quarters (25 cents). Given a specific price for a water bottle, you are to write a function that determines the number of unique ways to make that exact amount using the available coins. Your function should take an integer `amount` representing the cost of the water bottle in cents. **Constraints:** * 1 <= amount <= 1000 The function should output an integer representing the number of different combinations of coins that sum up to the specified `amount`. Example: ``` Input: amount = 5 Output: 2 Explanation: There are two ways to make 5 cents: 1) 5 pennies 2) 1 nickel ``` Implement the function `def coin_combinations(amount):` to solve this problem effectively.","solution":"def coin_combinations(amount): Determines the number of unique ways to make the exact amount using pennies (1 cent), nickels (5 cents), dimes (10 cents), and quarters (25 cents). Parameters: amount (int): The amount in cents. Returns: int: Number of unique ways to make the specified amount. # List of coin values coins = [1, 5, 10, 25] # Initialize a list to store the number of ways to make each amount from 0 to `amount` dp = [0] * (amount + 1) # There is one way to make 0 amount: use no coins dp[0] = 1 # Loop through each coin for coin in coins: # Update the dp array for each amount >= coin for x in range(coin, amount + 1): dp[x] += dp[x - coin] # The value at dp[amount] is the number of ways to make the specified amount return dp[amount]"},{"question":"In a small town, there is a simple library system that keeps track of the availability of different books through a central system. The system logs the borrowing and returning of books in the following format: - \\"BORROW book_id\\" when a book is borrowed. - \\"RETURN book_id\\" when a book is returned. The library wants to generate a report that tells if each book is currently available or borrowed out. Given a log of such events for a period, you need to determine the status of each book. -----Input----- - The first line contains an integer N denoting the number of log entries. - The following N lines each contain a log entry. -----Output----- - For each unique book ID present in the log, print a line in the format \\"book_id: status\\". - \\"available\\" if the book is currently available. - \\"borrowed\\" if the book is currently borrowed out. - The output should be sorted by the book IDs in ascending order. -----Constraints----- - 1 le N le 1,000 - Each log entry is either in the format \\"BORROW book_id\\" or \\"RETURN book_id\\". - The length of book_id is between 1 and 10 characters. - You may assume that all \\"RETURN book_id\\" entries have corresponding \\"BORROW book_id\\" entries before them. -----Example Input----- 6 BORROW book1 BORROW book2 RETURN book1 BORROW book1 BORROW book3 RETURN book2 -----Example Output----- book1: borrowed book2: available book3: borrowed","solution":"def library_status(N, logs): Determines the status of each book based on the borrowing and returning logs. Args: N : int : number of log entries logs : list of str : list of log entries Returns: dict : dictionary of book_id and their status book_status = {} for log in logs: action, book_id = log.split() if action == \\"BORROW\\": book_status[book_id] = \\"borrowed\\" elif action == \\"RETURN\\": book_status[book_id] = \\"available\\" sorted_status = {book_id: book_status[book_id] for book_id in sorted(book_status)} return sorted_status"},{"question":"You are given an array of integers and you need to find the length of the longest subarray where the sum of its elements is exactly equal to a given integer k. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases in the input. Then the test cases follow, each of them is represented by two lines. The first line of each test case contains two integers n and k (1 le n le 10^5, |k| le 10^9) — the length of the array and the desired sum of the subarray, respectively. The second line of each test case contains n integers a_i (-10^4 le a_i le 10^4) — the elements of the array. It is guaranteed that the sum of n over all test cases in the input does not exceed 10^5. -----Output----- For each test case, print the length of the longest subarray that has a sum equal to k. If no such subarray exists, print 0. -----Example----- Input 2 5 5 1 2 3 2 1 4 3 1 1 1 1 Output 2 3","solution":"def longest_subarray_with_sum_k(arr, k): Finds the length of the longest subarray with a sum equal to k. Parameters: arr (list): The list of integers. k (int): The required sum of subarray. Returns: int: Length of the longest subarray whose sum is equal to k. If no such subarray exists, returns 0. sum_indices = {} current_sum = 0 max_length = 0 for index, value in enumerate(arr): current_sum += value if current_sum == k: max_length = index + 1 if current_sum - k in sum_indices: max_length = max(max_length, index - sum_indices[current_sum - k]) if current_sum not in sum_indices: sum_indices[current_sum] = index return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): n, k = test_cases[i * 2] arr = test_cases[i * 2 + 1] results.append(longest_subarray_with_sum_k(arr, k)) return results"},{"question":"# The problem Given a list of integers, find the length of the longest increasing subsequence (LIS). The sequence does not need to be consecutive or unique. For example, for the list `[10, 9, 2, 5, 3, 7, 101, 18]`, the longest increasing subsequence is `[2, 3, 7, 101]` and its length is `4`. # Scalability The naive approach to solving this problem with a time complexity of `O(2^n)` becomes impractical for larger lists due to the exponential time complexity. Hence, a more efficient solution with a time complexity of `O(n log n)` should be preferred for lists containing up to `1,000,000` integers. # Your task Write a function that takes a list of integers and returns the length of the longest increasing subsequence. ```python def length_of_lis(nums: list) -> int: # your code here pass ``` - `nums` is a list containing up to 1,000,000 integers, each between -1,000,000 and 1,000,000. # Example ```python print(length_of_lis([10, 9, 2, 5, 3, 7, 101, 18])) # should return 4 print(length_of_lis([0, 1, 0, 3, 2, 3])) # should return 4 print(length_of_lis([7, 7, 7, 7, 7, 7, 7])) # should return 1 ```","solution":"import bisect def length_of_lis(nums: list) -> int: Returns the length of the longest increasing subsequence in a list of integers. if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) # If num is greater than all elements in lis, append it. if pos == len(lis): lis.append(num) # Otherwise, replace the first element in lis that is # greater than or equal to num. else: lis[pos] = num return len(lis)"},{"question":"You are given two arrays, nums1 and nums2, consisting of n and m integers respectively. Your task is to find the length of their longest common subarray. A subarray is a consecutive part of an array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case starts with a line containing two integers, n and m, which represent the lengths of nums1 and nums2 respectively. - The second line contains n space-separated integers representing the elements of nums1. - The third line contains m space-separated integers representing the elements of nums2. -----Output----- For each test case, print a single line containing one integer — the length of the longest common subarray. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 1000 - 1 ≤ nums1[i], nums2[j] ≤ 109 -----Example----- Input: 2 3 4 1 2 3 2 3 4 5 5 5 1 2 3 4 5 3 4 5 1 2 Output: 2 3 -----Explanation----- Example case 1: The longest common subarray is [2, 3], which has length 2. Example case 2: The longest common subarray is [3, 4, 5], which has length 3.","solution":"def longestCommonSubarray(nums1, nums2): This function returns the length of the longest common subarray between nums1 and nums2. n, m = len(nums1), len(nums2) # Creating a 2D array for dynamic programming dp = [[0] * (m + 1) for _ in range(n + 1)] longest_length = 0 for i in range(1, n + 1): for j in range(1, m + 1): if nums1[i - 1] == nums2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 longest_length = max(longest_length, dp[i][j]) return longest_length def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 results = [] for _ in range(T): n, m = map(int, lines[index].split()) nums1 = list(map(int, lines[index + 1].split())) nums2 = list(map(int, lines[index + 2].split())) index += 3 result = longestCommonSubarray(nums1, nums2) results.append(result) return results"},{"question":"In a distant galaxy, the bar Gorgonzola is a popular hangout for interstellar travelers. The owner, Zorg, has implemented a strict system to manage the bar\'s entry queue. The rules for the queue are as follows: 1. Each visitor arrives with a unique ID number. 2. Some visitors have special priority ID numbers, which must be served before regular visitors. A priority ID number is always an even number. Zorg needs your help to write a program that can simulate the queue management. Given a list of visitor ID numbers in the order they arrive, output the order in which they will be served according to the following rules: - All visitors with priority ID numbers (even) should be served before any regular visitors (odd). - Among visitors of the same type (priority or regular), they should be served in the order they arrived. Input will be a list of integers representing visitor ID numbers. Output the rearranged list of visitor ID numbers according to Zorg\'s queue rules. Example: Input: [5, 3, 2, 4, 1] Output: [2, 4, 5, 3, 1] Input: [7, 8, 6, 3, 11, 10] Output: [8, 6, 10, 7, 3, 11]","solution":"def rearrange_queue(visitor_ids): Rearrange the visitor ID numbers such that all the priority ID numbers (even) are served before all the regular ID numbers (odd). The order of arrival is maintained within each group. Parameters: visitor_ids (list): A list of integers representing visitor ID numbers. Returns: list: A list of visitor ID numbers rearranged according to the rules. priority_queue = [vid for vid in visitor_ids if vid % 2 == 0] regular_queue = [vid for vid in visitor_ids if vid % 2 != 0] return priority_queue + regular_queue"},{"question":"A painter is painting a fence that has n posts. Each fence post can be painted with one of k colors. You need to find the number of ways to paint the fence such that no more than two adjacent fence posts have the same color. Given the number of posts n and the number of colors k, return the total number of ways you can paint the fence. Note: n and k are both non-negative integers and are less than or equal to 1000. If n = 0 or k = 0, return 0 since no posts or no colors mean there are no ways to paint the fence. If n = 1, return k since each post can be painted with any of the k colors. Example 1: Input: n = 3, k = 2 Output: 6 Explanation: We can paint the fence with colors as [1,1,2], [1,2,1], [1,2,2], [2,2,1], [2,1,1], [2,1,2]. Example 2: Input: n = 4, k = 3 Output: 66 Explanation: There are 66 ways to paint the fence such that no more than two adjacent fence posts have the same color.","solution":"def num_ways_to_paint_fence(n, k): Returns the number of ways to paint the fence such that no more than two adjacent fence posts have the same color. Parameters: n (int): Number of fence posts k (int): Number of colors Returns: int: Number of ways to paint the fence if n == 0 or k == 0: return 0 if n == 1: return k if n == 2: return k * k same_color_ways = k diff_color_ways = k * (k - 1) total_ways = same_color_ways + diff_color_ways for i in range(3, n + 1): same_color_ways = diff_color_ways diff_color_ways = total_ways * (k - 1) total_ways = same_color_ways + diff_color_ways return total_ways"},{"question":"=====Problem Statement===== You need to implement a function that takes a dictionary as input and returns a new dictionary with the keys and values swapped. Task You will be given a dictionary, and your task is to create a new dictionary where the keys are the values from the input dictionary and the values are the keys from the input dictionary. =====Example===== Example >>> input_dict = { \'a\': 1, \'b\': 2, \'c\': 3 } For the given input dictionary, the output should be: >>> output_dict = { 1: \'a\', 2: \'b\', 3: \'c\' } Here\'s another example for clarification: >>> input_dict = { \'name\': \'Alice\', \'age\': 30, \'city\': \'New York\' } For the given input dictionary, the output should be: >>> output_dict = { \'Alice\': \'name\', 30: \'age\', \'New York\': \'city\' } =====Input Format===== The input consists of a dictionary with unique values. Keys and values will be of primitive data types (i.e., int, str). =====Output Format===== The output should be a dictionary with the keys and values swapped from the input dictionary.","solution":"def swap_dictionary(input_dict): Takes a dictionary as input and returns a new dictionary with the keys and values swapped. Args: input_dict (dict): The input dictionary to be processed. Returns: dict: The dictionary with keys and values swapped. return {v: k for k, v in input_dict.items()}"},{"question":"You need to write a function that simulates a basic calculator with addition and subtraction operations only. The function will receive a string consisting of non-negative integers and the symbols \'+\' and \'-\'. For example, ``` Input: \\"12+5-3\\" Output: 14 ``` To achieve this, you should parse the string and perform the calculations according to the following rules: 1. Process the string from left to right. 2. Apply addition and subtraction as you encounter \'+\' and \'-\' symbols. 3. The string will always be properly formatted, starting with an integer with no leading zeros, followed by operations in sequence without extra spaces or invalid characters. Implement the function such that it handles various input formats correctly.","solution":"def basic_calculator(expression): Simulates a basic calculator performing addition and subtraction only. total = 0 current_number = \'\' current_operator = \'+\' for char in expression: if char.isdigit(): current_number += char else: if current_operator == \'+\': total += int(current_number) elif current_operator == \'-\': total -= int(current_number) current_number = \'\' current_operator = char # Handle the last number in the expression if current_operator == \'+\': total += int(current_number) elif current_operator == \'-\': total -= int(current_number) return total"},{"question":"Write a function that takes a string containing a mix of words and numbers, and returns a new string where every word is capitalized and every number is doubled. For example: ``` \\"hello 3 world 5\\" --> \\"Hello 6 World 10\\" ``` Input will be a single string containing at least one word and one number, separated by spaces.","solution":"def capitalize_words_and_double_numbers(input_string): This function takes a string containing a mix of words and numbers, and returns a new string where every word is capitalized and every number is doubled. words = input_string.split() result = [] for word in words: if word.isdigit(): result.append(str(int(word) * 2)) else: result.append(word.capitalize()) return \' \'.join(result)"},{"question":"Sum of Digits of a Number # Overview In many situations, it is essential to break down a number into its individual digits and perform operations on those digits. One such common task is to calculate the sum of a number\'s digits. For example, given the number 12345, the sum of its digits is `1 + 2 + 3 + 4 + 5 = 15`. # Task Write a function `sumOfDigits`/`sum_of_digits`/`SumOfDigits` (or equivalent, depending on your language\'s naming conventions) that, given an integer, returns the sum of its digits. The function should work correctly for both positive and negative numbers. For a negative number, you should ignore the negative sign while summing the digits. # Examples ```python sum_of_digits(12345) # Output: 15 sum_of_digits(-12345) # Output: 15 sum_of_digits(0) # Output: 0 ``` # Note - The input number can be zero or any positive or negative integer. - Ensure the function handles edge cases gracefully, such as the number being zero or negative. Your goal is to create the function that correctly implements this logic following the outlined constraints.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. The function works correctly for both positive and negative numbers. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"For those who enjoy logic puzzles, here is a fun challenge: The Mugwump Riddle. A renowned Mugwump archivist is playing with a sequence of integers, and every day he selects a different number to cleverly disguise the sequence elements. He identifies a particular digit \'m\' in the sequence and replaces every occurrence of \'m\' with another digit \'n\'. To add more mystery, he doesn\'t reveal the exact digits chosen. Instead, you\'re provided with the encoded sequence and two numbers \'m\' and \'n\'. Write a function replace_mugwump(sequence: str, m: str, n: str) -> str that takes in three arguments: the original sequence as a string, the digit \'m\' to be replaced, and the digit \'n\' to replace with. The function should return the modified sequence as a string. Assume valid inputs (sequence will only contain digits, and \'m\' and \'n\' will also be single digit characters). # Example ```python replace_mugwump(\\"356783\\", \\"3\\", \\"9\\") -> \\"956789\\" replace_mugwump(\\"556091\\", \\"5\\", \\"2\\") -> \\"226091\\" replace_mugwump(\\"123456\\", \\"0\\", \\"8\\") -> \\"123456\\" ```","solution":"def replace_mugwump(sequence: str, m: str, n: str) -> str: Replaces every occurrence of the digit \'m\' in the \'sequence\' with the digit \'n\'. Parameters: sequence (str): The original sequence of digits as a string. m (str): The digit to be replaced. n (str): The digit to replace with. Returns: str: The modified sequence with all occurrences of \'m\' replaced with \'n\'. return sequence.replace(m, n)"},{"question":"Implement a function named `flattenArray(arr)` that takes a nested array and returns a flattened version of it. The input array may contain integers, other arrays, or a mix of both. The returned array should only contain integers, in the same order they appear in the input array. For example: ```python flattenArray([1, [2, [3, 4], 5], 6]) -> [1, 2, 3, 4, 5, 6] flattenArray([1, [], [2, [3]], 4]) -> [1, 2, 3, 4] flattenArray([[1, 2], [3, 4, [5]]]) -> [1, 2, 3, 4, 5] ``` Write the function in your preferred programming language. ***","solution":"def flattenArray(arr): Flatten a nested list. Args: arr (list): A list that may contain nested lists. Returns: list: A flattened list containing all the elements in arr. result = [] def flatten(sub_arr): for item in sub_arr: if isinstance(item, list): flatten(item) else: result.append(item) flatten(arr) return result"},{"question":"# Task You are given an array of integers. Your task is to find the length of the longest contiguous subarray within the given array that contains no repeating elements. # Example For the array `[2, 6, 4, 2, 3, 4, 5, 6, 7, 8]`, the longest subarray with no repeating elements is `[2, 3, 4, 5, 6, 7, 8]`, so the result should be `7`. For the array `[1, 2, 3, 4, 5]`, the entire array has no repeating elements, so the result should be `5`. # Input/Output - `[input]` integer array `arr` `1 ≤ arr.length ≤ 10^5` `0 ≤ arr[i] ≤ 10^9` - `[output]` an integer The output should be the length of the longest contiguous subarray with no repeating elements.","solution":"def length_of_longest_subarray(arr): Returns the length of the longest contiguous subarray with no repeating elements. n = len(arr) if n == 0: return 0 max_length = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of unsorted integers, write a function that returns the length of the longest consecutive subsequence. A consecutive subsequence is a sequence of numbers where each number is exactly one more than the previous number. Example: For the input list [100, 4, 200, 1, 3, 2], the longest consecutive subsequence is [1, 2, 3, 4]. Thus, the function should return 4. For the input list [10, 5, 12, 3, 55, 4, 13, 6, 11], the longest consecutive subsequence is [3, 4, 5, 6]. Thus, the function should return 4. Note: - The elements in the subsequence do not need to be contiguous in the input list. - Assume the input list will have at least one element.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive subsequence in the list of numbers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"=====Problem Statement===== You are given a string S consisting of alphanumeric characters and parentheses \'(\' and \')\'. Your task is to check if the parentheses are balanced. An expression is considered balanced if there is a matching opening parenthesis for every closing parenthesis and the pairs of parentheses are correctly nested. =====Input Format===== A single line of input containing the string S. =====Constraints===== - 0 < len(S) < 100 - The string will only contain alphanumeric characters and parentheses \'(\' and \')\'. =====Output Format===== Print \\"YES\\" if the parentheses in the string are balanced, otherwise print \\"NO\\". =====Sample Input===== (ab)c(d) =====Sample Output===== YES =====Sample Input===== (a(b)c)d) =====Sample Output===== NO","solution":"def is_balanced(S): Checks if the parentheses in the given string S are balanced. Parameters: S (str): The input string consisting of alphanumeric characters and parentheses. Returns: str: \\"YES\\" if the parentheses are balanced, \\"NO\\" otherwise. stack = [] for char in S: if char == \'(\': stack.append(char) elif char == \')\': if len(stack) == 0: return \\"NO\\" stack.pop() return \\"YES\\" if len(stack) == 0 else \\"NO\\""},{"question":"The objective is to count the number of unique substrings of length 3 in a given string. Assume the input string contains only lowercase English letters. The result should be an integer indicating the number of unique substrings of length 3. Examples ``` \\"abcabc\\" should return 3, because the unique substrings of length 3 are: \\"abc\\", \\"bca\\", \\"cab\\" \\"ababab\\" should return 2, because the unique substrings of length 3 are: \\"aba\\", \\"bab\\" \\"abcdef\\" should return 4, because the unique substrings of length 3 are: \\"abc\\", \\"bcd\\", \\"cde\\", \\"def\\" ```","solution":"def count_unique_substrings(s): Return the number of unique substrings of length 3 in the given string s. unique_substrings = set() for i in range(len(s) - 2): substring = s[i:i+3] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"You are given a list of strings representing file paths, and you need to convert them to a structured directory tree format. Each file path consists of directories separated by forward slashes (`/`). Write a function that takes this list of file paths and returns a nested dictionary representing the directory tree. For example, given the list of file paths: ``` [ \\"folder1/folder2/file1.txt\\", \\"folder1/folder2/file2.txt\\", \\"folder1/folder3/file3.txt\\", \\"folder2/file4.txt\\" ] ``` The function should return the following nested dictionary: ``` { \\"folder1\\": { \\"folder2\\": { \\"file1.txt\\": {}, \\"file2.txt\\": {} }, \\"folder3\\": { \\"file3.txt\\": {} } }, \\"folder2\\": { \\"file4.txt\\": {} } } ``` Assumptions: - All directory and file names are unique. - The input list will contain at least one path. - The paths do not contain redundant leading or trailing slashes. Function signature: ```python def build_directory_tree(paths: List[str]) -> Dict[str, Any]: # Your code here ```","solution":"from typing import List, Dict, Any def build_directory_tree(paths: List[str]) -> Dict[str, Any]: def insert_path(tree: Dict[str, Any], parts: List[str]) -> None: if not parts: return head, *tail = parts if head not in tree: tree[head] = {} insert_path(tree[head], tail) directory_tree = {} for path in paths: parts = path.split(\'/\') insert_path(directory_tree, parts) return directory_tree"},{"question":"Alisa is preparing for a mathematics competition, and she has a specific number of problems she wants to practice every day. However, the practice problems should follow a pattern where the number of problems increases to a peak and then decreases symmetrically. Alisa wants to know if the number of problems she has planned for each day can be rearranged to meet this requirement. For instance, if the number of problems planned per day is [3, 1, 5, 2, 4], it can be rearranged to [1, 2, 3, 4, 5, 4, 3, 2, 1] or [1, 2, 4, 5, 4, 2, 1], which both match the required pattern. Your task is to determine if it is possible to rearrange the number of problems such that it first strictly increases to a single peak and then strictly decreases. You are permitted to add any number of extra zeros to the set of problems to achieve this pattern. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of days Alisa plans to practice problems. The second line contains n integers p_1, p_2, ..., p_{n} (0 ≤ p_{i} ≤ 10^9), where p_{i} represents the number of problems planned for the i-th day. -----Output----- Print \\"YES\\" if it is possible to rearrange the number of problems to meet the pattern; otherwise, print \\"NO\\". -----Examples----- Input 5 3 1 5 2 4 Output YES Input 4 2 2 2 2 Output NO Input 3 1 0 3 Output YES -----Note----- In the first example, the sequence [3, 1, 5, 2, 4] can be rearranged to [1, 3, 4, 5, 4, 3, 1], fulfilling the pattern. In the second example, it\'s impossible to form any increasing-decreasing pattern as all values are the same. In the third example, adding two zeros results in [0, 0, 1, 3], which can be rearranged to [0, 1, 3, 1, 0], satisfying the required pattern.","solution":"def can_rearrange_to_peak_pattern(n, problems): Determines if the problems can be rearranged to form a peak pattern. Args: n (int): The number of days Alisa plans to practice problems. problems (list of int): The number of problems planned for each day. Returns: str: \\"YES\\" if it is possible to rearrange the problems to form a peak pattern, \\"NO\\" otherwise. problems.sort() # We need to count the maximum occurrence of any single element max_count = 0 current_count = 0 current_value = None for p in problems: if p == current_value: current_count += 1 else: current_value = p current_count = 1 if current_count > max_count: max_count = current_count # To form a peak, no element should be repeated more than (n // 2 + 1) times if max_count > (n + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of unique integers, find all unique triplets in the list that sum up to zero. Note: - The solution set must not contain duplicate triplets. - The input list can contain both negative and positive integers. Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, 0, 1], [-1, -1, 2]] Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Constraints: - The length of the list is between 0 and 3000. - The elements of the list are in the range of -10^5 to 10^5.","solution":"def three_sum(nums): Finds all unique triplets in the list that sum up to zero. Args: nums (List[int]): List of unique integers. Returns: List[List[int]]: List of unique triplets that sum up to zero. nums.sort() # Sort the array to use two-pointer technique result = [] n = len(nums) for i in range(n): # Avoid duplicates for the first element if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total_sum = nums[i] + nums[left] + nums[right] if total_sum == 0: result.append([nums[i], nums[left], nums[right]]) # Avoid duplicates for the second and third elements while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total_sum < 0: left += 1 else: right -= 1 return result"},{"question":"Write a function that takes a list of integers and returns a new list with each integer squared and then sorted in ascending order. Your implementation must maintain a time complexity of O(n log n) due to the sorting requirement. You may assume the input list is non-empty. Example ```python [1, 2, 3, 4, 5] --> [1, 4, 9, 16, 25] [-4, -1, 0, 3, 10] --> [0, 1, 9, 16, 100] [-7, -3, 2, 3, 11] --> [4, 9, 9, 49, 121] ```","solution":"def square_and_sort(nums): Function to square each integer in the list and return a new list with the squares sorted in ascending order. :param nums: List of integers :return: List of integers squared and sorted squared_nums = [num ** 2 for num in nums] return sorted(squared_nums)"}]'),F={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:O,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},j=["disabled"],Y={key:0},L={key:1};function P(r,e,l,m,a,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[_,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(y,null,w(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[a.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",Y,"See more"))],8,j)):u("",!0)])}const z=d(F,[["render",P],["__scopeId","data-v-0561f6ed"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/12.md","filePath":"chatai/12.md"}'),D={name:"chatai/12.md"},G=Object.assign(D,{setup(r){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{W as __pageData,G as default};
