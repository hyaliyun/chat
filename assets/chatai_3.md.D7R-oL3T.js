import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function N(s,e,l,m,a,r){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const O=d(k,[["render",N],["__scopeId","data-v-c4e96865"]]),S=JSON.parse('[{"question":"You are tasked with managing a robot in a grid-sized warehouse with obstacles, and your goal is to navigate the robot from a start position to a target position. The warehouse can be represented as a grid where each cell is either empty or contains an obstacle. The robot can move in four directions: up, down, left, and right, but it cannot move through obstacles. Your objective is to determine the minimum number of moves required for the robot to reach the target position from the start position. If it is not possible for the robot to reach the target, return -1. -----Input----- The first line of input contains three integers n, m and k (1 leq n, m leq 1000,1 leq k leq n cdot m) — the number of rows, the number of columns and the number of obstacles in the warehouse. The next k lines each contain two integers x_{i} and y_{i} (1 leq x_i leq n, 1 leq y_i leq m) — the row and column indices of the obstacles. The next line contains two integers x_s and y_s (1 leq x_s leq n, 1 leq y_s leq m) — the starting position of the robot. The final line contains two integers x_t and y_t (1 leq x_t leq n, 1 leq y_t leq m) — the target position of the robot. -----Output----- Print an integer representing the minimum number of moves required for the robot to reach the target position from the start position. If it is not possible, output -1. -----Examples----- Input 5 5 3 2 2 3 3 4 4 1 1 5 5 Output 8 Input 5 5 10 2 2 2 3 3 2 3 4 4 2 4 5 5 1 5 2 5 3 5 4 1 1 5 5 Output -1 -----Note----- For the first test, Starting from (1,1), the robot will take a path around the obstacles to reach (5,5) in minimum 8 moves. For the second test, The target position is not reachable due to the obstacles blocking all possible paths.","solution":"from collections import deque def min_moves_to_target(n, m, k, obstacles, start, target): # Create the warehouse grid and mark obstacles grid = [[0] * m for _ in range(n)] for ox, oy in obstacles: grid[ox - 1][oy - 1] = 1 # Marking obstacle cells as 1 # Starting and target positions sx, sy = start tx, ty = target # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # BFS queue initialized with starting position queue = deque([(sx - 1, sy - 1, 0)]) # (x, y, steps) visited = set() visited.add((sx - 1, sy - 1)) while queue: x, y, steps = queue.popleft() # Check if target is reached if (x, y) == (tx - 1, ty - 1): return steps # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) # If target is not reachable, return -1 return -1"},{"question":"The king of Kingdom XYZ is planning to build a new road network within the kingdom. The kingdom consists of N cities, numbered from 1 to N, and M bidirectional roads connecting some pairs of cities. Each road has a certain length associated with it. Due to budget constraints, the king wants to ensure that the total length of the roads in the new network is minimized, but at the same time, the network should be designed such that every city is connected directly or indirectly through the roads. You, as the chief engineer, are tasked with creating this optimized road network. Specifically, you need to find the minimum possible total length of roads that are necessary to connect all the cities together. If it is not possible to connect all the cities, return -1. Input: - The first line contains two integers N and M, the number of cities and the number of roads respectively. - The next M lines each contain three integers u, v, and w representing a bidirectional road between cities u and v with length w. Output: - Output a single integer which is the minimum total length of roads required to connect all the cities, or -1 if it\'s not possible. Constraints: - 1 ≤ N ≤ 10^4 - 0 ≤ M ≤ 10^5 - 1 ≤ w ≤ 10^6 - Each road connects two different cities u and v (1 ≤ u, v ≤ N). SAMPLE INPUT 4 5 1 2 1 1 3 2 3 4 4 1 4 3 2 3 2 SAMPLE OUTPUT 6 Explanation: A minimum spanning tree (MST) of the given graph would be: - road between city 1 and city 2 with length 1, - road between city 2 and city 3 with length 2, - road between city 1 and city 4 with length 3. The total length of these roads is 1 + 2 + 3 = 6, which is the minimum total length required to ensure all cities are connected.","solution":"def find_minimum_spanning_tree(N, M, roads): Returns the minimum possible total length of roads that connects all cities, or -1 if not possible to connect all cities. if M == 0: return -1 if N > 1 else 0 # No roads and more than one city means we can\'t connect all cities. from heapq import heappop, heappush # Start with a graph represented as adjacency list graph = {i: [] for i in range(1, N+1)} for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) # Prim\'s Algorithm to find MST min_heap = [(0, 1)] # (cost, start_node) visited = set() total_cost = 0 while min_heap and len(visited) < N: cost, u = heappop(min_heap) if u not in visited: total_cost += cost visited.add(u) for next_cost, v in graph[u]: if v not in visited: heappush(min_heap, (next_cost, v)) return total_cost if len(visited) == N else -1"},{"question":"You own a school and have a list of students in your school, each student has a number of toys. You want to form groups such that every student in a group has the same number of toys. The challenge is to minimize the number of groups formed. Each student is represented by the number of toys they have. You need to determine the minimum number of groups required. Input format The first line of the input contains an integer N, the number of students. The next line contains N space-separated integers, each representing the number of toys a student has. Output format Print a single integer, the minimum number of groups required. Constraints 1 ≤ N ≤ 100,000 0 ≤ Number of toys per student ≤ 1,000,000 SAMPLE INPUT 5 1 2 2 3 3 SAMPLE OUTPUT 3","solution":"def min_groups_required(n, toys): Determines the minimum number of groups such that each student in a group has the same number of toys. Args: n: Integer, the number of students. toys: List of integers, number of toys each student has. Returns: Integer, the minimum number of groups required. toy_count = {} # Count the frequency of each toys number for toy in toys: if toy in toy_count: toy_count[toy] += 1 else: toy_count[toy] = 1 # The number of unique keys in toy_count represents the number of groups required return len(toy_count)"},{"question":"A local bakery sells a variety of pastries and wants to analyze the sales performance of each type of pastry over a given number of days. For this, they have recorded the number of units sold for each pastry type daily. The bakery owner wants to calculate the total units sold for each type of pastry and determine which pastry type had the highest average sales per day. If there is a tie, you only need to print the lowest index pastry type. Write a program that processes the sales data and outputs the information as specified. Input: Each test case is formed as follow: - The first line contains a positive integer P, the number of pastry types (1 ≤ P ≤ 50). - The second line contains a positive integer D, the number of days the sales were tracked (1 ≤ D ≤ 30). - The next D lines each contain P integers separated by spaces, representing the number of units sold for each pastry type on that day. Each value T is such that 0 ≤ T ≤ 100. Output: For each test case, output two lines: 1. The first line contains P integers separated by spaces, where each integer is the total number of units sold for the corresponding pastry type. 2. The second line contains the index (1-based) of the pastry type with the highest average sales per day. Example: Input: 3 4 10 20 30 15 25 10 20 10 25 5 30 15 Output: 50 85 80 2","solution":"def analyze_sales(P, D, sales): total_sales_per_pastry = [0] * P for day_sales in sales: for i in range(P): total_sales_per_pastry[i] += day_sales[i] average_sales_per_pastry = [total_sales_per_pastry[i] / D for i in range(P)] max_average_index = average_sales_per_pastry.index(max(average_sales_per_pastry)) + 1 return total_sales_per_pastry, max_average_index def format_output(total_sales_per_pastry, max_average_index): return ( \' \'.join(map(str, total_sales_per_pastry)), str(max_average_index) )"},{"question":"You are given a list of N integers representing the heights of N students in a class. You need to pair up the students into groups of two in such a way that the difference in heights between the two students in each pair is minimized. Each student can only be in one pair. If there are an odd number of students, one student will be left without a pair. Determine the minimum possible sum of the differences in heights between the paired students. -----Constraints----- - 1 leq N leq 1000 - 1 leq height_i leq 10^9 - Each height_i is an integer. -----Input----- The input is given from Standard Input in the following format: N height_1 height_2 ... height_N -----Output----- Print one line containing the minimum possible sum of the differences in heights between the paired students. If there are an odd number of students, consider the student who remains unpaired to not contribute to the sum. -----Sample Input----- 6 10 20 30 40 50 60 -----Sample Output----- 30 The pairs will be (10, 20), (30, 40), and (50, 60), and the sum of differences will be 10 + 10 + 10 = 30.","solution":"def minimize_height_differences(N, heights): This function returns the minimum possible sum of differences in heights between paired students, given a list of heights. if N <= 1: return 0 heights.sort() min_diff_sum = 0 for i in range(1, N, 2): min_diff_sum += heights[i] - heights[i - 1] return min_diff_sum"},{"question":"You have been tasked with developing a function to analyze a list of integers and determine which of them are \\"prime\\". A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Given a list of integers, your function should return a new list containing only the prime numbers from the original list, in the order they appeared. Function Description Complete the `filterPrimes` function in the editor below. `filterPrimes` has the following parameter(s): - `numbers`: a list of integers to filter Returns - `list`: a list of prime numbers from the input list Input Format The first line contains an integer, `n`, the number of integers in the list. The second line contains `n` space-separated integers representing the list `numbers`. Constraints - (1 leq n leq 10^5) - (1 leq text{numbers}[i] leq 10^6) Sample Input Sample Input 0 5 10 17 18 19 20 Sample Output 0 17 19 Explanation 0 Among the numbers: 10, 17, 18, 19, and 20: - 10 is not a prime number (divisible by 1, 2, 5, 10) - 17 is a prime number (divisible by 1, 17) - 18 is not a prime number (divisible by 1, 2, 3, 6, 9, 18) - 19 is a prime number (divisible by 1, 19) - 20 is not a prime number (divisible by 1, 2, 4, 5, 10, 20) Hence, the primes are 17 and 19. Sample Input 1 6 2 3 4 5 6 7 Sample Output 1 2 3 5 7 Explanation 1 Among the numbers: 2, 3, 4, 5, 6, and 7: - 2 is a prime number (divisible by 1, 2) - 3 is a prime number (divisible by 1, 3) - 4 is not a prime number (divisible by 1, 2, 4) - 5 is a prime number (divisible by 1, 5) - 6 is not a prime number (divisible by 1, 2, 3, 6) - 7 is a prime number (divisible by 1, 7) Thus, the primes are 2, 3, 5, and 7.","solution":"import math def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filterPrimes(numbers): Filters a list of integers to return only the prime numbers. :param numbers: List of integers :return: List of prime integers return [num for num in numbers if is_prime(num)]"},{"question":"You are given an array of n integers and a number k. Your task is to find the length of the shortest continuous subarray such that the sum of the elements of this subarray is at least k. If no such subarray exists, print -1. Input The input contains one or several test cases. The first input line contains a single integer t — the number of test cases. Then, t test cases follow. Solve test cases separately; test cases are completely independent and do not affect each other. The first line of each test case contains two space-separated integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 10^9)— the length of the array and the required sum. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^4)— the elements of the array. Output For each test case, print a single integer representing the length of the shortest continuous subarray with sum at least k. If no such subarray exists, print -1. Example Input 2 10 15 1 2 3 4 5 6 7 8 9 10 5 100 1 2 3 4 5 Output 2 -1","solution":"def shortest_subarray_length(t, test_cases): results = [] for test_case in test_cases: n, k, array = test_case start = 0 current_sum = 0 min_length = float(\'inf\') for end in range(n): current_sum += array[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= array[start] start += 1 if min_length == float(\'inf\'): results.append(-1) else: results.append(min_length) return results"},{"question":"A group of researchers is studying the patterns in a sequence of integers. They are particularly interested in the subarrays that have a specific property. Specifically, they want to find out how many subarrays have at least one odd integer. Given an array A of integers, your task is to count the number of subarrays that contain at least one odd number. -----Input----- First line of input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the number of integers in the array. The next line contains N space separated integers where the ith integer represents A[i]. -----Output----- For each test, print the required number of subarrays in a single line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100000 - 0 ≤ A[i] ≤ 100000 -----Example----- Input: 2 4 1 2 3 4 3 2 4 6 Output: 10 0 -----Explanation----- Example case 1. All subarrays and whether they have at least one odd integer: - [1] -> yes - [1, 2] -> yes - [1, 2, 3] -> yes - [1, 2, 3, 4] -> yes - [2] -> no - [2, 3] -> yes - [2, 3, 4] -> yes - [3] -> yes - [3, 4] -> yes - [4] -> no Total subarrays with at least one odd integer: 8 out of 10 Example case 2. No subarray contains an odd integer, so the result is 0.","solution":"def count_subarrays_with_odd(T, tests): Returns a list of counts of subarrays with at least one odd integer for each test case. results = [] for i in range(T): N = tests[i][0] A = tests[i][1] total_subarrays = N * (N + 1) // 2 even_count = 0 prev_count = 0 subarrays_without_odd = 0 for j in range(N): if A[j] % 2 == 0: even_count += prev_count + 1 prev_count += 1 else: prev_count = 0 subarrays_without_odd = even_count subarrays_with_odd = total_subarrays - subarrays_without_odd results.append(subarrays_with_odd) return results"},{"question":"# Task Write a function that takes a list of strings `words` and a string `chars`, and returns the sum of the lengths of all the words that can be formed by using the characters from `chars` only once per character. Each character in `chars` can only be used as many times as it appears in `chars`. # Example For `words = [\\"cat\\", \\"bt\\", \\"hat\\", \\"tree\\"]` and `chars = \\"atach\\"`, the result should be `6`. Since the words that can be formed are \\"cat\\" and \\"hat\\" with lengths `3 + 3 = 6`. For `words = [\\"hello\\", \\"world\\", \\"leetcode\\"]` and `chars = \\"welldonehoneyr\\"` the result should be `10`. Since the words that can be formed are \\"hello\\" and \\"world\\" with lengths `5 + 5 = 10`. # Input/Output - `[input]` list of strings `words` a list of lowercase strings representing the words. - `[input]` string `chars` a string of lowercase characters. - `[output]` integer the sum of the lengths of all the words that can be constructed from the characters in `chars`.","solution":"from collections import Counter def count_characters(words, chars): Returns the sum of the lengths of all the words that can be formed by using the characters from chars only once per character. char_count = Counter(chars) total_length = 0 for word in words: word_count = Counter(word) if all(word_count[char] <= char_count[char] for char in word_count): total_length += len(word) return total_length"},{"question":"Given a list of non-negative integers representing the heights of buildings in a row, calculate the amount of water that could be trapped after a downpour. Each array element represents the height of a building block. Suppose it rains heavily where the current building can hold the water if there are higher buildings on both the left and the right side of it. Specifically, the amount of water accumulated at each building is the difference between the height of the current building and the minimum of the maximum heights on its left and right, minus the height of the current building. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevated blocks (buildings) form valleys and ridges which can trap rainwater. The units of water trapped in each valley would be 1 + 2 + 1 + 2 = 6 units. Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The elevated blocks (buildings) trap water in valleys formed between them, and the total trapped water is 9 units. Note: - The length of the height array is at most 100,000. - The height of each building block is a non-negative integer within the range [0, 1000].","solution":"def trap(height): Calculates the amount of water that could be trapped after a downpour. n = len(height) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"A delivery robot needs to carry packages from a warehouse to multiple delivery points within a city. The city is represented as a grid of size N x N, where each cell in the grid can either be an empty cell that the robot can traverse (\'0\') or an obstacle cell that the robot cannot traverse (\'X\'). The robot starts at the top-left corner of the grid (0, 0) and another integer K indicates the number of delivery points. Each delivery point is specified by its row and column index (1-based indexing). Your task is to write a program that determines whether the robot can reach each delivery point. If the robot can reach a delivery point, print \\"YES\\"; otherwise, print \\"NO\\". The robot can only move up, down, left, or right. Assume that the robot can see the entire grid and knows the location of all delivery points before it starts moving. Input The input format is as follows: N (Next N lines) NxN grid K (Next K lines) Delivery Point coordinates xi yi The end of input is indicated by a line containing a single zero. Output For each delivery point, output a line with either \\"YES\\" if the robot can reach the delivery point, or \\"NO\\" if it cannot. Example Input 5 0 0 X 0 0 0 X 0 X 0 0 X 0 X 0 0 0 0 0 0 X X X X 0 3 5 5 3 2 1 3 0 Output YES NO NO","solution":"def can_reach_each_delivery_point(N, grid, delivery_points): from collections import deque def is_valid_move(x, y, visited): return 0 <= x < N and 0 <= y < N and grid[x][y] == \'0\' and (x, y) not in visited def bfs(start, target): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == target: return \\"YES\\" for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, visited): queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" results = [] start = (0, 0) for xi, yi in delivery_points: target = (xi - 1, yi - 1) results.append(bfs(start, target)) return results"},{"question":"A group of students is participating in a programming competition. Each student can solve different problems at different speeds. The competition consists of T rounds, and during each round, students are solving problems simultaneously. Each student has a certain problem-solving rate which defines how many problems they can solve in one unit of time. Based on their problem-solving rates and the time allocated for each round, you need to calculate the number of problems each student solves in that round. As a reward system, only the student who solves the maximum number of problems in each round wins the round. In case of a tie (i.e., multiple students solve the same maximum number of problems), the student who appears first in the input list among those tying for the maximum wins. Write a program that determines the winners for each round. -----Input:----- The first line contains two integers, N (number of students) and T (number of rounds). The next N lines each contain an integer, where the i^{th} integer indicates the problem-solving rate of the i-th student. The next T lines each contain an integer, where the j^{th} integer indicates the time allocated for the j^{th} round. -----Output:----- Your output should consist of T lines, where the i^{th} line contains the 1-based index of the student who wins the i^{th} round. -----Constraints:----- - 1 leq N leq 1000. - 1 leq T leq 1000. - 1 leq text{Problem-solving rate of each student} leq 100. - 1 leq text{Time allocated for each round} leq 1000. -----Sample Input----- 4 3 5 3 7 2 10 5 7 -----Sample Output----- 3 1 3 Explanation: - In the first round (time allocated is 10), students solve the following problems: [50, 30, 70, 20]. The student who solves the maximum number of problems (70) is the third student. - In the second round (time allocated is 5), students solve the following problems: [25, 15, 35, 10]. The student who solves the maximum number of problems (35) is the third student. - In the third round (time allocated is 7), students solve the following problems: [35, 21, 49, 14]. The student who solves the maximum number of problems (49) is the third student.","solution":"def find_winners(N, T, rates, times): winners = [] for time in times: max_problems = -1 winner_index = -1 for i in range(N): problems_solved = rates[i] * time if problems_solved > max_problems: max_problems = problems_solved winner_index = i + 1 # 1-based index winners.append(winner_index) return winners"},{"question":"Consider a rectangle of size N times M consisting of unit cells. Each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). You are required to calculate the number of distinct paths from the top-left corner of the rectangle to the bottom-right corner, moving only right or down at each step and avoiding cells with obstacles. Write a program that determines the number of such distinct paths modulo 1000000007. If there is no valid path, return 0. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 1000). The following N lines contain M characters each (either \'.\' or \'#\'), representing the given rectangle. -----Output----- The first and only line of the output must contain the required number from the task. -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 2 Sample Input 2: 3 3 .#. # .#. Sample Output 2: 0","solution":"def num_paths(N, M, grid): MOD = 1000000007 if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0 for _ in range(M)] for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[N-1][M-1]"},{"question":"In a magical forest, there are n enchanted trees arranged in a line. Every tree has its own magic level represented by an integer. The forest warden wants to increase the overall magic power of the forest by adding new trees. Specifically, he wants to add exactly one tree between every pair of consecutive trees. The magic level of the new tree added between the i-th and (i+1)-th trees will be the arithmetic mean of their magic levels. Given the initial magic levels of the trees, you need to find the maximum possible magic level among the newly added trees. Input The first line contains a single integer n (2 ≤ n ≤ 100,000) — the number of enchanted trees in the forest. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — the magic levels of the trees. Output Print a single integer — the maximum possible magic level among the newly added trees. Example Input 5 2 3 9 4 8 Output 6 Note Consider the example with the initial array of magic levels [2, 3, 9, 4, 8]. The new trees\' magic levels will be: - Between the 1st and 2nd trees: (2 + 3) / 2 = 2.5 - Between the 2nd and 3rd trees: (3 + 9) / 2 = 6 - Between the 3rd and 4th trees: (9 + 4) / 2 = 6.5 - Between the 4th and 5th trees: (4 + 8) / 2 = 6 Among 2.5, 6, 6.5, and 6, the maximum is 6.5. However, since we need to print an integer, we will print the floor value, so the answer is 6.","solution":"def max_magic_level(n, magic_levels): Given the number of trees and their magic levels, calculate the maximum possible magic level among the newly added trees. max_level = 0 # Initialize the maximum magic level for i in range(n - 1): current_mean = (magic_levels[i] + magic_levels[i + 1]) // 2 if current_mean > max_level: max_level = current_mean return max_level"},{"question":"You are working for a network optimization firm, and your task is to design a balanced and efficient computer network using routers. Each router can connect to at most two other routers directly and must maintain a constant latency in communication. To achieve this, it is critical to ensure the network\'s structure meets the necessary constraints. The routers in the network are labeled from 1 to N, where N is the number of routers. To ensure efficient communication, a router must be connected directly to one or two other routers. The overall latency of the network is defined as the total number of direct connections between pairs of routers. Your goal is to distribute the connections optimally across the network to minimize the overall latency. Write a program that will help you determine the minimum number of latency connections required to create a balanced network for a given number of routers. Input T N_1 N_2 ... N_T The first line contains an integer T (1 ≤ T ≤ 100). Each of the next T lines contains a single integer N_i (2 ≤ N_i ≤ 10^6), representing the number of routers for the i-th test case. Output For each test case, output an integer on a new line representing the minimum number of latency connections needed for a balanced network of N_i routers. Example Input 3 2 4 6 Output 1 3 5 Explanation In the sample input: 1. For 2 routers, only 1 connection is needed. 2. For 4 routers, the optimal configuration will have 3 connections forming a small tree. 3. For 6 routers, the configuration that minimizes latency will have 5 connections, splitting the network evenly.","solution":"def min_latency_connections(T, routers): Determines the minimum number of latency connections required for a balanced network of routers. Parameters: T (int): Number of test cases. routers (list of int): List containing the number of routers for each test case. Returns: list of int: List containing the minimum number of latency connections for each test case. result = [] for N in routers: # For N routers, to form a connected structure with the optimal latency, # we need N-1 connections. result.append(N - 1) return result"},{"question":"Create a function that takes a list of integers and returns the sum of the two largest numbers in the list. Your task is to implement this function following the examples below. ```python max_pair_sum([10, 14, 2, 23, 19]) = 42 max_pair_sum([99, 2, 2, 23, 19]) = 122 max_pair_sum([1, 2, 3]) = 5 ``` Notice that you only need to implement the function to solve the problem correctly. Make sure your function handles edge cases where the list may have negative numbers or minimal length required for the calculation. More examples in test cases. Good luck! Please also try [Sum the Strings](https://www.codewars.com/kata/5966e33c4e686b508700002d)","solution":"def max_pair_sum(lst): Returns the sum of the two largest numbers in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of the two largest numbers in the list. if len(lst) < 2: raise ValueError(\\"The list must contain at least two elements.\\") first_max = max(lst) lst.remove(first_max) second_max = max(lst) return first_max + second_max"},{"question":"Alice is creating a garden and she wants to plant a combination of flowers and shrubs along a straight path. Each flower and shrub can be represented by a square on a grid. The challenge is to create the most diverse garden possible. Alice defines the diversity of her garden by the number of distinct arrangements of flowers and shrubs along the path given the constraints. A garden arrangement is defined as a sequence of \'F\' (flower) and \'S\' (shrub) in a straight line. Two arrangements are considered distinct if one arrangement cannot be transformed into the other by any number of shifts (circular or otherwise). Given an integer N, representing the length of the garden path (number of squares), calculate the number of distinct arrangements of flowers and shrubs. -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each testcase contains single integer N (the length of the garden path). -----Output:----- For each testcase, output the number of distinct arrangements of flowers (F) and shrubs (S) along the path. -----Constraints:----- 1 leq T leq 100 1 leq N leq 10^5 -----Sample Input:----- 2 2 3 -----Sample Output:----- 3 4","solution":"def distinct_garden_arrangements(N): Returns the number of distinct arrangements of flowers (F) and shrubs (S) of length N. Each arrangement is a sequence of \'F\' and \'S\'. return 2 ** (N - 1) + 1 def process_input(T, lengths): Processes multiple test cases and returns the results. results = [] for length in lengths: results.append(distinct_garden_arrangements(length)) return results"},{"question":"A group of friends has decided to play an interesting integer game. They have a list of integers and each friend will choose a subarray from this list. The objective of each subarray is to have the smallest possible difference between the largest and smallest integer in that subarray. Your task is to determine the smallest possible difference for each friend\'s chosen subarray. The friends want to make multiple queries for different subarrays. Input Format The first line contains an integer N, the size of the list of integers. The second line contains N integers, representing the list of integers. The third line contains an integer Q, the number of queries. The next Q lines each contain two integers L and R, representing the range of the subarray (inclusive). Constraints 1 <= N <= 10^5 1 <= integers <= 10^9 1 <= Q <= 10^4 1 <= L <= R <= N Output Format Output Q lines, each containing the smallest possible difference between the largest and smallest integer in the chosen subarray for each query. Sample Input 6 1 3 4 5 2 6 3 1 3 2 5 1 6 Sample Output 3 3 5","solution":"def smallest_diff_subarray(numbers, queries): Returns the smallest possible difference between the largest and smallest integer in the chosen subarray for each query. :param numbers: List of integers :param queries: List of tuples (L, R) representing subarray range :return: List of integers representing smallest differences for each query results = [] for L, R in queries: subarray = numbers[L-1:R] smallest_diff = max(subarray) - min(subarray) results.append(smallest_diff) return results"},{"question":"Polycarp found a very old digital clock that displays time in a strange way. The clock uses a 24-hour format and displays the hour and minute as a sequence of digits, but the colon separating hours and minutes is missing. For example, if the clock reads `1234`, it can mean `12:34`, `1:23:4`, `12:3:4`, etc. Polycarp needs to find the minimum number of adjustments required to convert the sequence of digits into a valid time in the format `HH:MM`. If there are multiple possible adjustments, return the smallest value. An adjustment here means inserting or removing a colon or adding zero padding if necessary to make a valid `HH:MM` string. Help Polycarp determine the minimal adjustments to get a valid time. -----Input----- The first line contains a single integer n (1 le n le 4) representing the length of the sequence. The second line contains a sequence of n digits. -----Output----- Output a single integer representing the minimum number of adjustments required to convert the sequence into a valid time in the format `HH:MM`. -----Examples----- Input 4 1234 Output 0 Input 3 940 Output 1 Input 2 56 Output 3","solution":"def minimal_adjustments(n, digits): Returns the minimum number of adjustments required to convert the sequence of digits into a valid time in the format HH:MM. if n == 4: return 0 # Already in the correct format elif n == 3: best_guess = \\"0\\" + digits[:1] + \\":\\" + digits[1:] return 1 elif n == 2: # Insert a colon and add zero padding return 2 + (0 if int(digits[:1]) <= 2 else 1) elif n == 1: # Needs the most work: zero padding on both hour and the full minutes return 3 return -1 # fallback for unexpected n"},{"question":"You are given an array B of integers of size N, representing the heights of buildings in a row. A sunrise view is defined as a building that is taller than all the buildings to its left. The first building always has a sunrise view. Your task is to count how many buildings in the array have a sunrise view. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the size of the array B. - The second line of each test case contains N space-separated integers B_{1}, B_{2}, dots, B_{N} denoting the array B of building heights. ------ Output Format ------ For each test case, output the number of buildings that have a sunrise view. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 1 ≤ B_{i} ≤ 10^9 - Sum of N over all test cases does not exceed 10^6 ------ Sample Input 1 ------ 3 5 3 4 2 7 6 4 1 2 3 4 6 10 12 8 10 15 9 ------ Sample Output 1 ------ 3 4 3 ------ Explanation 1 ------ Test case 1: The array represents heights [3, 4, 2, 7, 6]. - The first building (3) always has a sunrise view. - The second building (4) is taller than the first building, so it also has a sunrise view. - The third building (2) does not have a sunrise view because it is shorter than the previous building (4). - The fourth building (7) is taller than the third building, so it has a sunrise view. - The fifth building (6) does not have a sunrise view as it is shorter than the previous building (7). Test case 2: The array represents heights [1, 2, 3, 4]. All buildings have a sunrise view as each building is taller than the one before. Test case 3: The array represents heights [10, 12, 8, 10, 15, 9]. - The first building (10) always has a sunrise view. - The second building (12) is taller than the first building, so it also has a sunrise view. - The third building (8) does not have a sunrise view as it is shorter than the second building (12). - The fourth building (10) does not have a sunrise view as it is also shorter than the second building (12). - The fifth building (15) is taller than the fourth building, so it has a sunrise view. - The sixth building (9) does not have a sunrise view as it is shorter than the fifth building (15).","solution":"def count_sunrise_views(N, B): Count the number of buildings that have a sunrise view. Parameters: N (int): the number of buildings. B (list): the list of building heights. Returns: int: the number of buildings with a sunrise view. # The first building always has a sunrise view count = 1 max_height = B[0] for i in range(1, N): if B[i] > max_height: count += 1 max_height = B[i] return count def process_test_cases(test_cases): Process multiple test cases. Parameters: test_cases (list of tuples): list where each element is a tuple containing the number of buildings (N) and the list of building heights (B). Returns: list: the result of each test case. results = [] for N, B in test_cases: results.append(count_sunrise_views(N, B)) return results"},{"question":"Zara is a dedicated botanist with a love for recording her observations about various plant species. She has developed a passion for categorizing the plants based on their unique characteristics. To streamline her record-keeping, she needs a program that can validate the entries in her plant database. Each plant entry consists of the plant\'s name and characteristics. A plant\'s name is composed of lowercase letters (a-z) and has a length between 1 and 20 characters. Each characteristic is a string composed of lowercase letters and has a length between 1 and 10 characters. Zara\'s criteria for a valid plant entry are as follows: - A valid entry must have exactly 5 unique characteristics. - No characteristic should be longer than 10 characters. Write a program that validates Zara\'s plant entries based on the above rules. -----Input----- The first line contains an integer N (1 leq N leq 50), which signifies the number of plant entries to be validated. Each of the following N lines describes a plant entry. Each plant entry consists of the plant\'s name followed by a colon and a space-separated list of its characteristics. -----Output----- For each plant entry, in the order they are given in the input, output “valid” if the entry meets Zara\'s criteria, or “invalid” if it does not. -----Examples----- Sample Input: 3 rose: red beautiful fragrant thorny perennial lily: white elegant fragrant seasonal cactus: green thorny vibrant tough resilient Sample Output: valid invalid valid","solution":"def validate_plant_entries(entries): results = [] for entry in entries: name, characteristics_str = entry.split(\\": \\") characteristics = characteristics_str.split() # Check if there are exactly 5 unique characteristics and all characteristics are within allowable length if len(characteristics) == 5 and len(set(characteristics)) == 5 and all(len(c) <= 10 for c in characteristics): results.append(\\"valid\\") else: results.append(\\"invalid\\") return results"},{"question":"Task A string is considered \\"complete\\" if every letter in the English alphabet (case insensitive) appears at least once in the string. Your task is to write a function that determines if a given string is complete. # Function Signature ```python def is_complete_string(s: str) -> bool: pass ``` # Input - `s`: A string of arbitrary length (1 ≤ len(s) ≤ 10^6) which may include letters, digits, punctuation, and whitespace. # Output - Returns a boolean `True` if the string `s` is complete, otherwise `False`. # Examples ```python is_complete_string(\\"The quick brown fox jumps over the lazy dog\\") == True is_complete_string(\\"Hello, World!\\") == False is_complete_string(\\"abcdefghijklmnopqrstuvwxyz\\") == True is_complete_string(\\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\\") == True is_complete_string(\\"Python 3.9 is great!\\") == False ``` # Constraints - The function should ignore case sensitivity. - The function should be efficient enough to handle strings up to the maximum length efficiently. # Notes To determine if a string is complete, you need to check if all the letters from \'a\' to \'z\' appear at least once in it, disregarding the case of the letters.","solution":"def is_complete_string(s: str) -> bool: Returns True if the input string \'s\' is a complete string, i.e., it contains every letter from \'a\' to \'z\' at least once, otherwise returns False. The check is case insensitive. import string alphabet_set = set(string.ascii_lowercase) input_set = set(s.lower()) return alphabet_set.issubset(input_set)"},{"question":"Healthy Chef loves salads and is very particular about the ingredients he uses. He has two lists of ingredients. The first list contains all available ingredients in the market, and the second list contains all ingredients Chef considers healthy. Healthy Chef only buys the healthy ingredients from the list of available ingredients. Your task is to help Chef by determining which healthy ingredients are present in the market. ------ Input ------ The first line of the input contains an integer N denoting the number of available ingredients. The second line contains N strings, where each string represents the name of an available ingredient. The third line contains an integer M denoting the number of ingredients Chef considers healthy. The fourth line contains M strings, where each string represents the name of a healthy ingredient. ------ Output ------ For each healthy ingredient in the market, print the name of the ingredient in a single line. The order of the ingredients in the output must be the same as in the healthy ingredients list. If a healthy ingredient is not available in the market, do not print it. ------ Constraints ------ 1 ≤ N, M ≤ 10^{5} Each ingredient name is a lowercase English word and its length does not exceed 20. ----- Sample Input 1 ------ 5 tomato cucumber lettuce onion carrot 3 lettuce carrot celery ----- Sample Output 1 ------ lettuce carrot ----- explanation 1 ------ Example case 1: Chef considers lettuce, carrot, and celery as healthy ingredients. Among these, only lettuce and carrot are available in the market. Therefore, the output contains \\"lettuce\\" and \\"carrot\\".","solution":"def find_healthy_ingredients(available_ingredients, healthy_ingredients): Filters the available ingredients and returns only those that are considered healthy by Chef. Args: available_ingredients (list of str): List of ingredients available in the market. healthy_ingredients (list of str): List of ingredients considered healthy by Chef. Returns: list of str: List of healthy ingredients available in the market, in the same order as provided in healthy_ingredients. available_set = set(available_ingredients) return [ingredient for ingredient in healthy_ingredients if ingredient in available_set]"},{"question":"Write a program to simulate a simple social network by reading a list of friendships and then processing queries to determine the degrees of separation between users. Constraints * 2 leq n leq 200 (number of users) * 1 leq m leq 10^4 (number of friendships) Input - The first line contains two integers n and m. - The next m lines each contain two integers u and v, indicating that user u and user v are friends. - The next line contains an integer q (number of queries). - The next q lines, each contain two integers a and b, representing a query to determine the degrees of separation between user a and user b. Output For each query, output the degrees of separation between user a and user b. If they are not connected, output -1. Example Input 5 4 1 2 2 3 3 4 4 5 3 1 5 1 3 2 5 Output 4 2 3","solution":"from collections import deque, defaultdict def build_graph(friendships, n): graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) return graph def bfs_shortest_path(graph, start, goal): if start == goal: return 0 visited = set() queue = deque([(start, 0)]) while queue: node, depth = queue.popleft() if node == goal: return depth if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return -1 def degrees_of_separation(n, m, friendships, q, queries): graph = build_graph(friendships, n) results = [] for a, b in queries: results.append(bfs_shortest_path(graph, a, b)) return results"},{"question":"You are given a string s consisting only of lowercase English letters. A character in string s is called a significant character if it appears strictly more than half of the total characters in the string. Your task is to determine if there exists any significant character in the given string. If such a character exists, print the character. Otherwise, print \\"No significant character\\". -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string s. The second line contains the string s of length n. -----Output----- If there is a significant character, print the character. Otherwise, print \\"No significant character\\". -----Examples----- Input 4 aabb Output No significant character Input 5 aaaab Output a","solution":"def find_significant_character(n, s): Determine if there exists any significant character in the given string. A significant character appears strictly more than half the total characters in the string. Parameters: n (int): Length of the string s. s (str): The input string. Returns: str: The significant character or \\"No significant character\\" if no such character exists. from collections import Counter count = Counter(s) for char, freq in count.items(): if freq > n // 2: return char return \\"No significant character\\" # Example usage: # n, s = 5, \'aaaab\' # print(find_significant_character(n, s)) # Output: a"},{"question":"Farmer Joe has a number of fields, each represented as a cell in an `n x m` grid. Each cell needs to be planted with either wheat (\'W\') or barley (\'B\'). However, Farmer Joe has a specific planting scheme in mind: 1. Each cell that contains barley should not be adjacent (horizontally or vertically) to another cell containing barley. 2. There should be at least one wheat cell adjacent to every barley cell, but no wheat cell should be adjacent to more than one barley cell. Your task is to help Farmer Joe find such a planting scheme for the given grid dimensions. -----Input----- The first line contains the number of test cases t (1 le t le 20). Each of the next t lines contains two integers n, m (2 le n, m le 100) – the number of rows and columns in the grid. -----Output----- For each test case, print `n` lines, each of length `m`, where the i-th line is the i-th row of the planting scheme (cell labeled with \'W\' means that the cell contains wheat, and \'B\' means barley). If there are multiple valid solutions, any of them will be accepted. -----Example----- Input 2 3 3 4 5 Output WBW BWB WBW BWBWB WBWBW BWBWB WBWBW -----Note----- In the first test case, every barley cell has exactly one adjacent wheat cell, and no two barley cells are adjacent. In the second test case, the conditions specified are also met.","solution":"def plant_scheme(n, m): Returns a planting scheme for Farmer Joe\'s fields. Each cell is either \'W\' (wheat) or \'B\' (barley) such that: 1. Each cell that contains barley (\'B\') is not adjacent (horizontally or vertically) to another cell containing barley. 2. There is at least one \'W\' cell adjacent to every \'B\' cell, but no \'W\' cell should be adjacent to more than one \'B\' cell. grid = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'W\') else: row.append(\'B\') grid.append(\\"\\".join(row)) return grid def multiple_plant_schemes(test_cases): results = [] for n, m in test_cases: results.append(plant_scheme(n, m)) return results"},{"question":"You are given a list of integers representing the heights of a group of children standing in a line. You need to determine the length of the longest subsequence in which the heights are strictly increasing. Note that the children do not need to stand next to each other in the line for their heights to be counted in the subsequence. Can you write a program that determines the length of this longest increasing subsequence? -----Input----- The first line contains a single integer N, with 1 leq N leq 1000, representing the number of children in the line. Then follows one line with N positive integers, each less than 10^9, representing the heights of the children. -----Output----- Output a single integer, the length of the longest strictly increasing subsequence of heights. -----Examples----- Sample Input: 6 5 1 6 2 3 7 Sample Output: 4 Sample Input: 4 10 9 2 5 Sample Output: 2","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence of heights. if not heights: return 0 # Initialize dp array where dp[i] will be the length of LIS ending at position i dp = [1] * len(heights) # Compute LIS for each element for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A city is planning to build a series of watchtowers on strategic hilltops for surveillance. Each hilltop is represented by a node, and there are possible paths (edges) between the hilltops. The city needs to place a specific number of watchtowers such that the surveillance area is maximized, which essentially means maximizing the number of hilltops under surveillance. Each watchtower has a range limit that determines how many hilltops it can monitor directly. Your task is to determine the optimal placement of the watchtowers to maximize the total number of hilltops that can be monitored directly or indirectly. The input consists of the following: - An integer n (1 ≤ n ≤ 1000) representing the number of hilltops. - An integer m (0 ≤ m ≤ 5000) representing the number of paths between the hilltops. - The next m lines contain two integers ai and bi (1 ≤ ai, bi ≤ n) which specify a bidirectional path between hilltop ai and hilltop bi. - An integer k (1 ≤ k ≤ n) representing the number of watchtowers to be placed. - An integer r (1 ≤ r ≤ n) representing the range limit of each watchtower. Output the maximum number of hilltops that can be monitored with the given number of watchtowers and their range. Example Input: ``` 6 7 1 2 1 3 2 4 2 5 3 6 4 5 5 6 3 1 ``` Example Output: ``` 6 ``` Explanation: - In this example, there are 6 hilltops and 7 paths. - The number of watchtowers to be placed is 3, and each watchtower can monitor up to 1 hilltop away. - By placing watchtowers on hilltops 1, 4, and 6, all hilltops 1 through 6 will be monitored directly or indirectly.","solution":"from collections import deque def bfs(graph, start, r): Perform BFS and return nodes covered within range limit `r` starting from `start` node. visited = set() queue = deque([(start, 0)]) visited.add(start) while queue: current, dist = queue.popleft() if dist < r: for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) return visited def hilltops_surveillance(n, m, edges, k, r): Returns the maximum number of hilltops that can be monitored using k watchtowers. graph = {i: [] for i in range(1, n + 1)} for edge in edges: a, b = edge graph[a].append(b) graph[b].append(a) max_coverage = 0 all_nodes = set(range(1, n + 1)) def place_watchtowers(nodes_remaining, remaining_watchtowers, covered): nonlocal max_coverage if remaining_watchtowers == 0 or not nodes_remaining: max_coverage = max(max_coverage, len(covered)) return for node in nodes_remaining: new_covered = bfs(graph, node, r) new_nodes_remaining = nodes_remaining - new_covered place_watchtowers(new_nodes_remaining, remaining_watchtowers - 1, covered | new_covered) place_watchtowers(all_nodes, k, set()) return max_coverage"},{"question":"Challenge: Write a function that takes a string and a delimiter character and splits the string into an array of substrings based on the given delimiter. The function should return the array of substrings. The delimiter itself should not be included in any of the substrings. Example: ``` splitString(\\"apple,banana,cherry\\", \',\'); // should return [\\"apple\\", \\"banana\\", \\"cherry\\"] splitString(\\"a;b;c;d\\", \';\'); // should return [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] splitString(\\"one&two&three\\", \'&\'); // should return [\\"one\\", \\"two\\", \\"three\\"] ``` Addendum: If the string does not contain the delimiter, the function should return an array containing the original string as its only element. If the delimiter is an empty string, the function should return an array containing the original string as its only element. Consider edge cases such as empty input or delimiters at the beginning or end of the string: ``` splitString(\\"\\", \',\'); // should return [\\"\\"] splitString(\\"apple,\\", \',\'); // should return [\\"apple\\", \\"\\"] splitString(\\",apple\\", \',\'); // should return [\\"\\", \\"apple\\"] ```","solution":"def split_string(input_string, delimiter): Splits the input_string into an array of substrings based on the given delimiter. Parameters: input_string (str): The string to be split. delimiter (str): The delimiter character used to split the string. Returns: list: A list of substrings. if delimiter == \\"\\": return [input_string] return input_string.split(delimiter)"},{"question":"Jane is a teacher who wants to assign groups to students for a project. Each group should consist of students whose average skill level is as close as possible to the target skill level T. Jane has a list of skill levels of students in her class but is unsure of the best way to form the groups. Can you help her? You are given a list of N students where each student has a skill level. A group is any subset of students, and a subset can have size from 1 to N. Your task is to find a subset whose average skill level is closest to the target skill level T. If there are multiple such groups, return the group with the smallest size. If there is still a tie, return the one with the lowest skill level sum. ---Input--- The first line of the input contains two integers N (1 leq N leq 15) and T (1 leq T leq 1000). The second line contains N integers, each representing the skill level of a student. All skill levels are between 1 and 1000 inclusive. ---Output--- Output the skill levels of the students in the group found, in non-decreasing order. ---Examples--- Sample Input 1: 5 500 400 300 500 700 600 Sample Output 1: 500 Sample Input 2: 3 200 100 150 250 Sample Output 2: 150 250 Sample Input 3: 4 300 100 100 200 400 Sample Output 3: 200 400","solution":"from itertools import combinations def find_best_group(N, T, skill_levels): skill_levels.sort() best_group = None min_diff = float(\'inf\') min_size = float(\'inf\') min_skill_sum = float(\'inf\') for r in range(1, N+1): for combo in combinations(skill_levels, r): avg_skill = sum(combo) / r diff = abs(avg_skill - T) skill_sum = sum(combo) if (diff < min_diff or (diff == min_diff and r < min_size) or (diff == min_diff and r == min_size and skill_sum < min_skill_sum)): min_diff = diff min_size = r min_skill_sum = skill_sum best_group = combo return list(best_group)"},{"question":"Given a list of integers, we define a \\"peak\\" to be an element which is strictly greater than its neighbors. For corner elements, we only consider the one neighbor. Your task is to identify the number of peaks in the list. For example, in the list `[1, 3, 2, 4, 1, 5, 3]`, the number `3` at index 1 and the number `5` at index 5 are peaks because they are greater than their immediate neighbors. Note that the number `4` at index 3 is also a peak since it is greater than both its neighbors `2` and `1`. Write a program that identifies and returns the number of peaks in a given list of integers. Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the list. - The second line contains `n` integers — the elements of the list. Each element of the list is between -10^9 and 10^9 inclusive. Output - Print a single integer — the number of peaks in the list. Example Input 7 1 3 2 4 1 5 3 Output 3","solution":"def count_peaks(arr): peaks_count = 0 n = len(arr) if n == 0: return peaks_count for i in range(n): if i == 0 and n > 1 and arr[i] > arr[i+1]: peaks_count += 1 elif i == n - 1 and n > 1 and arr[i] > arr[i - 1]: peaks_count += 1 elif 0 < i < n - 1 and arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: peaks_count += 1 return peaks_count # Test Case # 7 # 1 3 2 4 1 5 3 # Output should be 3 print(count_peaks([1, 3, 2, 4, 1, 5, 3])) # Output: 3"},{"question":"A transportation company operates n bus lines across the city, numbered from 1 to n. Each bus line has a maximum capacity, which is the maximum number of passengers it can carry on a single trip. The company wants to optimize the usage of its bus lines by ensuring that the passengers are distributed in a way that minimizes the overload on any single bus line. You are given the daily demand for each bus line in terms of the number of passengers wishing to use the line. For each demand value, you should either allocate it to one of the existing bus lines or leave it unallocated if it exceeds the line\'s capacity. Your task is to determine the optimal distribution of passengers to bus lines while minimizing the number of unallocated passengers. Input The first line contains an integer n — the number of bus lines (1 ≤ n ≤ 105). The second line contains n space-separated integers ci — the maximum capacities of the bus lines (1 ≤ ci ≤ 109). The third line contains n space-separated integers di — the daily passenger demand for each bus line (0 ≤ di ≤ 109). Output Print a single integer — the minimum number of unallocated passengers, given the constraints mentioned above. Examples Input 3 50 60 70 80 30 40 Output 30 Input 5 100 80 120 60 90 60 80 150 50 110 Output 10 Input 4 30 20 40 10 25 35 15 5 Output 30 Note In the first example, the first bus line with a capacity of 50 can partially fulfil the demand of 80 passengers, leaving 30 passengers unallocated. The other bus lines can handle their demands fully within their capacity. In the second example, all bus lines except the third and fifth can manage the demand within their capacity. The third bus line has a demand of 150 but a capacity of 120, leaving 30 passengers unallocated. The fifth bus line has a demand of 110 but a capacity of 90, leaving 20 passengers unallocated. The total unallocated passengers are 30 + 20 = 50. In the third example, the second bus line exceeds the demand by 15 passengers but can only take 20, leaving 15 unallocated. Similarly, the first line can accommodate all passengers. The remaining demand fits within the given capacities, but the total unallocated passengers equal the excess capacity differences between demand and availability.","solution":"def minimum_unallocated_passengers(n, capacities, demands): Calculate the minimum unallocated passengers given the capacities and demands. :param n: int: Number of bus lines :param capacities: List[int]: List of integers representing the maximum capacities of the bus lines :param demands: List[int]: List of integers representing the daily passenger demands for each bus line :return: int: The minimum number of unallocated passengers unallocated_passengers = 0 for i in range(n): if demands[i] > capacities[i]: unallocated_passengers += demands[i] - capacities[i] return unallocated_passengers"},{"question":"Petya is experimenting with a new tiling challenge on a rectangular grid. He wants to tile the grid with L-shaped trominoes. An L-shaped tromino covers three grid cells in the following shape: X X X Petya can freely rotate these trominoes. He can place them on the grid so that they do not overlap and do not protrude out of the grid. The curent task for Petya is to determine whether it is possible to tile a completely filled grid of size (n times n) (where (n) is an odd integer) using the L-shaped trominoes. If it is possible, provide one possible way to tile the grid. Input The first line contains an odd integer (n) (1 ≤ (n) ≤ 999) — the size of the grid. Output If it is possible to tile the grid using L-shaped trominoes, print \\"YES\\" and then (n) lines each containing (n) characters, where each character represents a part of a tromino. Use different characters (like \'a\', \'b\', \'c\', etc.) to denote different trominoes in the grid. If it\'s not possible to tile the grid, print \\"NO\\". Example Input 3 Output YES aab a.. ccc Input 5 Output NO","solution":"def can_tile_grid(n): Given an odd integer n, determine if it\'s possible to tile an n x n grid using L-shaped trominoes. Parameters: n (int): The size of the grid (1 ≤ n ≤ 999). Returns: str: \\"NO\\" if the grid cannot be tiled, \\"YES\\" and the grid otherwise. # Since n is odd, we cannot tile the grid. return \\"NO\\""},{"question":"A charity organization plans to distribute notebooks to students based on their score in an entrance test. The distribution follows a specific pattern described below. Please help them by writing a program that calculates the number of notebooks each student will receive based on the distribution rules. -----Input:----- - The first line will contain N, the number of students. Then the test cases follow. - Each test case contains a single line of input, one integer S_i which represents the score of the i^{th} student. -----Output:----- For each test case, output the number of notebooks each student will receive. The distribution rules are as follows: 1. If the score is less than 40, the student will receive 2 notebooks. 2. If the score is between 40 and 59, inclusive, the student will receive 5 notebooks. 3. If the score is between 60 and 79, inclusive, the student will receive 7 notebooks. 4. If the score is 80 or above, the student will receive 10 notebooks. -----Constraints----- - 1 leq N leq 100 - 0 leq S_i leq 100 -----Sample Input:----- 4 35 50 70 85 -----Sample Output:----- 2 5 7 10","solution":"def notebooks_distribution(N, scores): Returns a list of the number of notebooks each student will receive based on their scores. Args: N (int): The number of students. scores (list of int): List of scores for each student. Returns: list of int: List of notebooks distributed to each student based on their score. notebooks = [] for score in scores: if score < 40: notebooks.append(2) elif 40 <= score <= 59: notebooks.append(5) elif 60 <= score <= 79: notebooks.append(7) elif score >= 80: notebooks.append(10) return notebooks"},{"question":"Given is an integer N. Print the sum of all even numbers from 1 to N (inclusive). -----Constraints----- - N is a positive integer. - N is between 1 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of all even numbers from 1 to N (inclusive). -----Sample Input----- 10 -----Sample Output----- 30 Explanation: The even numbers between 1 and 10 are 2, 4, 6, 8, and 10. Their sum is 30.","solution":"def sum_of_even_numbers(N): Compute the sum of all even numbers from 1 to N (inclusive). return sum(i for i in range(2, N+1, 2))"},{"question":"A company needs to manage a set of employees. Each employee has a unique ID and a supervisor ID. The company structure is such that there is exactly one top-level supervisor who does not report to anyone (has supervisor ID 0). All other employees report to exactly one other employee. Your task is to determine the minimum depth of the organizational hierarchy. The depth of the top-level supervisor is 1, and the depth of any supervisor\'s direct reports is their depth + 1. Consider the following example: - Employee 1 (top-level supervisor) reports to no one: `supervisor ID = 0`. - Employee 2 reports to Employee 1. - Employee 3 reports to Employee 2. - Employee 4 reports to Employee 2. - Employee 5 reports to Employee 1. In this example, the hierarchy has a minimum depth of 3. Employee 1 is at depth 1, Employees 2 and 5 are at depth 2, and Employees 3 and 4 are at depth 3. -----Input----- The first line of input contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 500) — the number of employees. The next n lines contain a pair of integers eid_i and sid_i (1 le eid_i le n, 0 le sid_i le n) — where eid_i is the employee ID and sid_i is the supervisor ID. It is guaranteed that there is exactly one top-level supervisor with `supervisor ID = 0` and all other sid_i > 0. -----Output----- Output t lines, each containing a single integer — the minimum depth of the organizational hierarchy for each test case. -----Example----- Input: 2 5 1 0 2 1 3 2 4 2 5 1 4 1 0 2 1 3 1 4 1 Output: 3 2","solution":"def find_min_depth(t, test_cases): def get_depth(eid, supervisor_map): if eid not in memo: if supervisor_map[eid] == 0: memo[eid] = 1 else: memo[eid] = 1 + get_depth(supervisor_map[eid], supervisor_map) return memo[eid] results = [] for i in range(t): n, employees = test_cases[i] supervisor_map = {} for eid, sid in employees: supervisor_map[eid] = sid max_depth = 0 memo = {} for eid in supervisor_map: max_depth = max(max_depth, get_depth(eid, supervisor_map)) results.append(max_depth) return results"},{"question":"Given an array of integers `nums`, you are tasked to find the length of the shortest subarray, that if sorted, would result in the entire array being sorted in non-decreasing order. Analyze the problem and design an algorithm that provides the correct output. Example 1: Input: nums = [2, 6, 4, 8, 10, 9, 15] Output: 5 Explanation: The subarray [6, 4, 8, 10, 9] needs to be sorted to make the entire array sorted in non-decreasing order. Example 2: Input: nums = [1, 2, 3, 4] Output: 0 Explanation: The array is already sorted, so the shortest subarray has a length of 0. Example 3: Input: nums = [1, 3, 2, 2, 2] Output: 4 Explanation: The subarray [3, 2, 2, 2] needs to be sorted to make the entire array sorted in non-decreasing order. Constraints: - 1 <= nums.length <= 10^4 - -10^5 <= nums[i] <= 10^5","solution":"def findUnsortedSubarray(nums): Returns the length of the shortest subarray that, if sorted, would result in the entire array being sorted in non-decreasing order. n = len(nums) start, end = 0, -1 max_seen, min_seen = float(\'-inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i return end - start + 1"},{"question":"You are given a string s of length n, consisting of lowercase Latin letters, and an integer k. Your task is to determine the smallest lexicographical substring of length k from the string s. For example, if s=\\"algorithm\\" and k=3, then the smallest lexicographical substring of length k would be \\"alg\\". -----Input----- The first line of the input contains one integer n (1 le n le 10^5) — the length of the string. The second line of the input contains one string s consisting of exactly n lowercase Latin letters. The third line of the input contains one integer k (1 le k le n) — the length of the required substring. -----Output----- Print one string of length k — the smallest lexicographical substring of length k in the string s. -----Examples----- Input 9 algorithm 3 Output alg Input 8 education 5 Output catio Input 6 banana 2 Output an","solution":"def smallest_lexicographical_substring(n, s, k): Returns the smallest lexicographical substring of length k from the string s. min_sub = s[:k] # Start by assuming the first k characters form the smallest substring for i in range(1, n - k + 1): current_sub = s[i:i + k] if current_sub < min_sub: min_sub = current_sub return min_sub"},{"question":"A new student named Alex joins a large university and receives a student ID number. The university has an interesting method of generating student ID numbers: they take a base ID number `B` and XOR it with the student\'s position number `P` to create the unique ID. Given a base ID number `B` and a position number `P`, determine the unique student ID. Implement a function that returns the unique student ID. -----Input----- - The input consists of a single line containing two integers `B` and `P` separated by a space. -----Output----- - Output the unique student ID as a single integer. -----Constraints----- - 1 leq B leq 10^9 - 1 leq P leq 10^9 -----Example Input----- 57 23 -----Example Output----- 46 Hint: - XOR (exclusive OR) operation between two numbers will return a number that has binary digits set to 1 where the corresponding binary digits of either but not both of the operands are 1. Explanation: - To find the student ID: `57 XOR 23` - `57` in binary is `111001` - `23` in binary is `010111` - XOR results in `101010` which is `46` in decimal.","solution":"def unique_student_id(B, P): Returns the unique student ID generated from base ID B and position P using XOR operation. return B ^ P"},{"question":"You are required to write a program that reads a list of item purchases and their costs, then determines the total expenditure and identifies the most expensive item bought. Input The input starts with an integer N (1 <= N <= 100), representing the number of items. The next N lines each contain a string (item name) followed by a floating-point number (item cost). Each item name consists of only alphabetical characters and is no longer than 50 characters. Each cost is a non-negative floating-point number with at most two decimal places. Output Print two lines: 1. The total expenditure, formatted to two decimal places. 2. The name of the most expensive item. If there are multiple items with the same highest cost, print the one that appears first in the input. Example Input 3 apple 1.20 banana 2.50 orange 1.50 Output 5.20 banana","solution":"def calculate_expenditure_and_most_expensive_item(data): This function calculates total expenditure and identifies the most expensive item from the purchase data. Parameters: data (list of str): List of strings where the first element is the number of items, followed by item names and costs. Returns: tuple: total expenditure as float and the name of the most expensive item as a string. n = int(data[0]) total_expenditure = 0.0 most_expensive_item = \\"\\" highest_cost = -1.0 for i in range(1, n + 1): item_info = data[i].split() item_name = item_info[0] item_cost = float(item_info[1]) total_expenditure += item_cost if item_cost > highest_cost: highest_cost = item_cost most_expensive_item = item_name return round(total_expenditure, 2), most_expensive_item"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You can perform the following operation any number of times: Choose any two indices i and j (1 ≤ i, j ≤ n) with i ≠ j, and set a_i = a_i + a_j and a_j = a_i - a_j. Determine the minimum number of operations required to make the array non-decreasing, or state if it\'s impossible. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. Output Print a single integer — the minimum number of operations required to make the array non-decreasing, or -1 if it\'s impossible. Examples Input 1 4 4 3 2 1 Output 1 3 Input 2 3 1 0 -1 Output 2 -1","solution":"def min_operations_to_sort_array(n, arr): Determines the minimum number of operations required to make the array non-decreasing. Parameters: n (int): The number of elements in the array. arr (list): A list of integers representing the array. Returns: int: Minimum number of operations or -1 if it\'s impossible. sorted_arr = sorted(arr) # Check if it\'s possible to sort arr into non-decreasing order if sorted_arr == arr: return 0 # If there are any negative values in arr, it\'s impossible if any(x < 0 for x in arr): return -1 # To calculate the number of operations: count = 0 for i in range(n - 1): if arr[i] > arr[i + 1]: count += 1 return count"},{"question":"There is a city with a grid of streets laid out in a pattern of rows and columns. The city is represented by an n x m grid where each cell can either be empty or contain a building. A person can move up, down, left, or right between cells, but cannot move diagonally. You are given the coordinates of two buildings, A and B. Your task is to determine if there is a path from A to B using only the empty cells. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the city grid. The next n lines describe the grid. Each line contains a string of m characters. Each character is either \'.\' representing an empty cell or \'#\' representing a building. The next line contains two pairs of integers r1, c1, r2, c2 (1 ≤ r1, r1, r2, c1, c2 ≤ 100) — the row and column coordinates of buildings A (r1, c1) and B (r2, c2). Output Output \\"YES\\" if there is a path from A to B, otherwise output \\"NO\\". Example Input 5 5 ..... ..#.. . ..... ..... 1 1 5 5 Output YES Note In the given example, the person can move from (1, 1) to (5, 5) by navigating through the empty cells.","solution":"def is_path_available(n, m, grid, r1, c1, r2, c2): Determines if a path exists from (r1, c1) to (r2, c2) in the given grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (List[str]): The city grid. r1 (int): Starting row index. c1 (int): Starting column index. r2 (int): Ending row index. c2 (int): Ending column index. Returns: str: \\"YES\\" if there is a path from (r1, c1) to (r2, c2), otherwise \\"NO\\". from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (r1 - 1, c1 - 1) end = (r2 - 1, c2 - 1) queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"In the kingdom of DevLand, there is a wise dragon who loves prime numbers. The dragon has a magical array of integers, and one of its favorite pastimes is testing the knowledge of travelers through coding puzzles. You are a brave traveler who has stumbled upon the dragon\'s lair. The dragon decides to challenge you with a task involving prime numbers. The task is as follows: Given an array of integers, you need to determine the number of distinct prime numbers present in the array. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000), the elements of the array. # Output - Output a single integer, the number of distinct prime numbers present in the array. # Example Input ``` 6 2 3 4 5 3 7 ``` Output ``` 4 ``` # Note In the example, the distinct prime numbers are 2, 3, 5, and 7. Hence, the output is 4.","solution":"def count_distinct_primes(n, arr): def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True prime_set = set() for num in arr: if is_prime(num): prime_set.add(num) return len(prime_set)"},{"question":"You are given a sequence of n integers. A \\"peak\\" is an element which is greater than its immediate neighbors. Similarly, a \\"valley\\" is an element which is smaller than its immediate neighbors. You are allowed to modify the sequence by changing any element to any value. The goal is to minimize the number of peaks and valleys in the sequence. Write a program to determine the minimum number of peaks and valleys after at most one modification is made to the sequence. Input The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000) — the elements of the sequence. Output Print a single integer — the minimum number of peaks and valleys in the sequence after at most one modification. Examples Input 5 1 3 2 4 5 Output 0 Input 7 10 5 3 7 2 9 8 Output 1 Input 4 5 4 2 3 Output 0","solution":"def find_peaks_and_valleys(arr): peaks_valleys = [] for i in range(1, len(arr) - 1): if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]): peaks_valleys.append(i) return peaks_valleys def count_peaks_and_valleys(arr): count = 0 for i in range(1, len(arr) - 1): if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]): count += 1 return count def min_peaks_and_valleys(n, arr): initial_count = count_peaks_and_valleys(arr) peaks_valleys = find_peaks_and_valleys(arr) if not peaks_valleys: return 0 min_count = initial_count for pv in peaks_valleys: original = arr[pv] # Try changing arr[pv] to the value of its left neighbor arr[pv] = arr[pv - 1] temp_count = count_peaks_and_valleys(arr) min_count = min(min_count, temp_count) # Restore the original value arr[pv] = original # Try changing arr[pv] to the value of its right neighbor arr[pv] = arr[pv + 1] temp_count = count_peaks_and_valleys(arr) min_count = min(min_count, temp_count) # Restore the original value arr[pv] = original return min_count"},{"question":"Emma is planning her vacation and wants to visit several cities. She has a list of n cities she can visit, each with its own scenic value v_i. However, she must follow a specific route map which only allows her to travel from city i to city j if j>i. Emma wants to maximize the total scenic value of the cities she visits but she is only allowed to visit no more than k cities in total. Given the number of cities and the scenic values associated with each city, determine the maximum total scenic value Emma can achieve by visiting up to k cities. -----Input----- The first line contains a single integer t (1leq tleq 100) — the number of test cases. The first line of each test case contains two integers n (1leq nleq 200) — the number of cities, and k (1leq k leq n) — the maximum number of cities she can visit. The second line of each test case contains n integers v_1, v_2, ..., v_n (1leq v_ileq 10^4) — the scenic value of each city. -----Output----- For each test case, print a single integer — the maximum total scenic value possible based on the constraints. -----Examples----- Input 3 5 3 4 5 1 3 2 4 2 2 2 2 2 6 4 10 1 3 5 7 2 Output 12 4 25 -----Note----- In the first case, Emma can visit cities with scenic values [4, 5, 3] for a total of 12. In the second case, Emma can visit any 2 cities with scenic values [2, 2] for a total of 4. In the third case, Emma can visit cities with scenic values [10, 3, 5, 7] for a total of 25.","solution":"def max_scenic_value(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][:2] values = test_cases[i][2] # Take the first k most valuable cities sorted_values = sorted(values, reverse=True) max_value = sum(sorted_values[:k]) results.append(max_value) return results # Example Usage t = 3 test_cases = [ (5, 3, [4, 5, 1, 3, 2]), (4, 2, [2, 2, 2, 2]), (6, 4, [10, 1, 3, 5, 7, 2]) ] print(max_scenic_value(t, test_cases)) # Expected Output: [12, 4, 25]"},{"question":"Write a function that takes a string and returns a new string with the words in the original string reversed. Preserve the whitespace and initial word order, but reverse each word individually. # Examples: - Input: \\"Hello World\\" Output: \\"olleH dlroW\\" - Input: \\"The quick brown fox\\" Output: \\"ehT kciuq nworb xof\\" - Input: \\"Coding is fun\\" Output: \\"gnidoC si nuf\\" # Constraints: - The input string will only contain alphabetic characters and spaces. - The input string will have at least one word.","solution":"def reverse_words_in_string(s): Returns a new string with each word in the original string reversed. # Split the string by spaces to get each word words = s.split(\' \') # Reverse each word individually reversed_words = [word[::-1] for word in words] # Join the reversed words with spaces return \' \'.join(reversed_words)"},{"question":"A certain organization maintains a log of user activities, where each entry consists of a username and an action timestamp. The log entries are provided in chronological order. The organization wants to identify users who have performed actions within a specific time frame for a promotional campaign. Write a program that, given a list of log entries and a time interval, counts the users who have performed at least one action within the given time frame and identifies the users with the most and least actions during that period. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of log entries. Each of the next n lines contains a string and an integer — the username u (1 le |u| le 20) and the action timestamp t (1 le t le 10^9). The next line contains two integers a and b (1 le a, b le 10^9, a le b) — the start and end of the time interval. -----Output----- Output two lines: - The first line should contain a single integer — the number of unique users who have performed at least one action within the given time frame. - The second line should contain two space-separated strings — the usernames of the users with the most and least actions within that period. If there are multiple users with the same number of actions, output any one of them. If no users have actions in the given time frame, output \\"0 NONE NONE\\". -----Example----- Input 5 alice 100 bob 200 alice 300 charlie 400 bob 500 100 400 Output 3 alice bob -----Note----- In the example, we have the following actions within the time frame [100, 400]: - alice: 2 actions (at timestamps 100, 300) - bob: 1 action (at timestamp 200) - charlie: 1 action (at timestamp 400) The total number of unique users is 3. The users with the most and least actions are alice and bob (or charlie), respectively.","solution":"from collections import defaultdict def analyze_user_actions(log_entries, a, b): Counts the users who have performed at least one action within the given time frame and identifies the users with the most and least actions during that period. Arguments: log_entries -- list of tuples (username, timestamp) a -- start of the time interval b -- end of the time interval Returns: tuple containing: - number of unique users who have performed at least one action within the given time frame - username of the user with the most actions within the period - username of the user with the least actions within the period actions_within_timeframe = defaultdict(int) for username, timestamp in log_entries: if a <= timestamp <= b: actions_within_timeframe[username] += 1 if not actions_within_timeframe: return 0, \\"NONE\\", \\"NONE\\" max_actions_user = max(actions_within_timeframe, key=actions_within_timeframe.get) min_actions_user = min(actions_within_timeframe, key=actions_within_timeframe.get) return len(actions_within_timeframe), max_actions_user, min_actions_user"},{"question":"A company wants to ensure that its employees\' text messages are properly censored to avoid inappropriate language. They have provided a list of forbidden words that should be censored from any message. Your task is to replace each character in every forbidden word present in the message with an asterisk (\'*\'). Example 1: Input: message = \\"The quick brown fox\\", forbidden_words = [\\"quick\\", \\"brown\\"] Output: \\"The ***** ***** fox\\" Explanation: The forbidden words \\"quick\\" and \\"brown\\" are replaced with \\"*****\\". Example 2: Input: message = \\"Hello World!\\", forbidden_words = [\\"world\\"] Output: \\"Hello *****!\\" Explanation: The word \\"world\\" is replaced with \\"*****\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function censorMessage() which takes two arguments, message (a string) and forbidden_words (a list of strings), and returns the censored message. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n) Constraints: - 1 <= message length <= 1000 - 1 <= number of forbidden words <= 100 - 1 <= length of each forbidden word <= 100 - The message and the forbidden words contain only lowercase and uppercase Latin letters and punctuation marks.","solution":"def censorMessage(message, forbidden_words): Replaces forbidden words in the message with asterisks. Args: message (str): The original message. forbidden_words (list of str): List of forbidden words to be censored. Returns: str: The censored message. for word in forbidden_words: replacement = \'*\' * len(word) message = message.replace(word, replacement) return message"},{"question":"Given a list of unique integers, find the first missing positive integer. Your task is to identify the smallest positive integer that is not present in the list. Input The input is a single line containing space-separated integers which represent the list. The list will contain at least one integer and at most 1000 integers. Each integer in the list will be between -1000 and 1000, inclusive. Output Output a single integer — the smallest positive integer not present in the list. Examples Input 1 2 0 Output 3 Input 3 4 -1 1 Output 2 Input 7 8 9 11 12 Output 1","solution":"def first_missing_positive_integer(lst): This function takes a list of unique integers and returns the smallest positive integer that is not present in the list. s = set(lst) i = 1 while i in s: i += 1 return i"},{"question":"You are given an image represented as an `NxN` grid of pixels, where each pixel has a color value. Two pixels are considered connected if they have the same color and are adjacent either vertically or horizontally. Two connected pixels form a component. Your task is to find the size of the largest component in the image. # Input The input consists of: - The first line contains an integer `N`, the size of the grid (`2 <= N <= 100`). - The following `N` lines contain `N` integers each, representing the color values of the pixels in the grid. The color values will be between `0` and `255`. # Output Print the size of the largest component in the image. # Example Input ``` 4 1 2 3 4 2 2 3 4 1 1 3 4 1 1 0 0 ``` Output ``` 4 ``` Explanation In the given example, the largest component consists of 4 pixels with color value `1`, which are connected as follows: ``` 1 2 3 4 2 2 3 4 1 1 3 4 1 1 0 0 ```","solution":"def largest_component_size(N, grid): Returns the size of the largest component in the grid. def bfs(r, c, color): queue = [(r, c)] size = 0 while queue: cr, cc = queue.pop(0) if (cr, cc) not in visited: visited.add((cr, cc)) size += 1 for nr, nc in [(cr-1, cc), (cr+1, cc), (cr, cc-1), (cr, cc+1)]: if 0 <= nr < N and 0 <= nc < N and grid[nr][nc] == color and (nr, nc) not in visited: queue.append((nr, nc)) return size visited = set() max_size = 0 for r in range(N): for c in range(N): if (r, c) not in visited: component_size = bfs(r, c, grid[r][c]) max_size = max(max_size, component_size) return max_size"},{"question":"A company wants to implement a special type of dictionary called a \\"Weighted Dictionary,\\" where each key-value pair has an associated weight. The weighted dictionary should support the following operations: 1. `add(key, value, weight)`: Adds a key-value pair with the specified weight to the dictionary. If the key already exists, update the value and the weight. 2. `get(key)`: Retrieves the value associated with the key. If the key does not exist, return \\"Key not found\\". 3. `get_weighted_average(keys)`: Takes a list of keys and returns the weighted average of their values. If a key does not exist, it should be excluded from the calculation. If none of the keys exist, return \\"No valid keys\\". Write a program to implement this weighted dictionary. ------ Input ------ The input consists of several commands to manipulate and query the weighted dictionary. - The first line contains an integer `N` denoting the number of commands. - The next `N` lines contain commands. Each command has the following structure: - `add key value weight`: Adds or updates a key-value pair with the specified weight. - `get key`: Retrieves the value for the given key. - `get_weighted_average key1 key2 ... keyK`: Retrieves the weighted average of the specified keys. ------ Output ------ For each `get` command, output the value associated with the key or \\"Key not found\\". For each `get_weighted_average` command, output the weighted average or \\"No valid keys\\". ------ Constraints ------ - `1 ≤ N ≤ 1000` - `0 ≤ |key| ≤ 10`, where |key| denotes the length of the key - `-10^6 ≤ value ≤ 10^6` - `0 < weight ≤ 100` - The number of keys in `get_weighted_average` command is guaranteed to be between 1 and 100 inclusive. ------ Example ------ Input: ``` 10 add apple 10 2 add banana 20 1 get apple get orange get_weighted_average apple banana add apple 15 3 get_weighted_average apple banana add cherry 5 1 get_weighted_average apple banana cherry add orange 7 1 get_weighted_average apple orange ``` Output: ``` 10 Key not found 13.333333333333334 13.75 11.75 10.6 ```","solution":"class WeightedDictionary: def __init__(self): self.data = {} def add(self, key, value, weight): self.data[key] = (value, weight) def get(self, key): if key in self.data: return self.data[key][0] return \\"Key not found\\" def get_weighted_average(self, keys): total_weight = 0 weighted_sum = 0 for key in keys: if key in self.data: value, weight = self.data[key] weighted_sum += value * weight total_weight += weight if total_weight == 0: return \\"No valid keys\\" return weighted_sum / total_weight"},{"question":"You are given an array of n integers and a target integer k. Your task is to determine if there exists a pair of distinct indices (i, j) such that the elements at those indices add up to k. If such a pair exists, return the indices i and j (0-based indexing). If there are multiple valid pairs, return any one of them. If no such pair exists, return -1. Input The first line of the input contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains a single integer k (1 ≤ k ≤ 2 * 10^9) — the target sum. Output Output two integers i and j (0 ≤ i, j < n, i ≠ j) such that ai + aj = k. If there are multiple valid pairs, return any one of them. If no such pair exists, output -1. Example Input 5 1 2 3 4 5 7 Output 1 4 Input 4 5 1 3 6 10 Output -1 Note In the first example, the pair (2, 5) adds up to 7, so the output is 1 4, or any other valid pair. In the second example, there is no pair that adds up to 10, so the output is -1.","solution":"def find_pair_with_sum(n, arr, k): seen = {} for i in range(n): complement = k - arr[i] if complement in seen: return seen[complement], i seen[arr[i]] = i return -1"},{"question":"You are given a rectangular grid representing a map where \'S\' denotes the starting point, \'E\' represents the endpoint, and \'.\' represents a path. All other characters represent obstacles. The objective is to find a path from the starting point \'S\' to the endpoint \'E\' such that a person travels only through \'.\' without passing through any obstacles. Implement a program that determines if there is a path from \'S\' to \'E\'. If a path exists, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The input consists of multiple lines: - The first line is two integers, R and C, the number of rows and columns, respectively, in the grid (1 leq R, C leq 1000). - The next R lines each contain C characters representing the grid. You can assume that there will always be exactly one \'S\' and one \'E\' in the grid. -----Output----- The output should be a single line containing either \\"YES\\" or \\"NO\\", indicating whether a path exists from \'S\' to \'E\'. -----Examples----- Sample Input 1: 4 4 S..# .#.# .#.E Sample Output 1: YES Sample Input 2: 3 3 S#. # .#E Sample Output 2: NO # Constraints - You may assume that there will always be exactly one \'S\' and one \'E\' in the grid. - The grid size will be at most 1000x1000. - The grid may contain any printable ASCII character except spaces.","solution":"from collections import deque def path_exists(grid, R, C): Determines if there is a path from \'S\' to \'E\' in the given grid. Parameters: grid (list of list of str): The grid representing the map. R (int): Number of rows in the grid. C (int): Number of columns in the grid. Returns: str: \\"YES\\" if a path exists, otherwise \\"NO\\". # Directions for movements: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Find starting point \'S\' and ending point \'E\' start = end = None for i in range(R): for j in range(C): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) # Initialize a queue for BFS queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() # If we reach the end point, return \\"YES\\" if (x, y) == end: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny)) # If no path found, return \\"NO\\" return \\"NO\\" def find_path(R, C, lines): Wrapper function to process the lines and call the path_exists. Parameters: R (int): Number of rows. C (int): Number of columns. lines (list of str): The grid represented as a list of strings. Returns: str: \\"YES\\" if a path exists, \\"NO\\" otherwise. grid = [list(line) for line in lines] return path_exists(grid, R, C)"},{"question":"Given a string, return the length of the longest substring without repeating characters. If the input string is empty or null, return `0`. # Example For input `\\"abcabcbb\\"`, you should return `3` because the longest substring is `\\"abc\\"`. For input `\\"bbbbb\\"`, you should return `1` because the longest substring is `\\"b\\"`.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. if s is None or len(s) == 0: return 0 char_index_map = {} max_len = 0 start = 0 for idx, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = idx max_len = max(max_len, idx - start + 1) return max_len"},{"question":"# Problem Statement A transportation company wants to keep track of its fleet of vehicles. They collect data on the distances traveled by each vehicle over a series of days. Each day, the distance traveled by a vehicle is recorded as a non-negative integer in kilometers. The company wants to analyze this data to determine the maximum sum of distances traveled over any contiguous subarray of days for each vehicle. # Input: * The input dataset consists of multiple possible test cases. The maximum number of datasets does not exceed 30. * Each case begins with an integer N (1 ≤ N ≤ 100,000), the number of days for which data has been recorded. * The next line contains N integers, where each integer represents the distance traveled on that day. Each distance is a non-negative integer and does not exceed 100,000. # Output: * For each case, output one integer: the maximum sum of distances traveled over any contiguous subarray of days. # Sample Input: ``` 5 3 1 2 7 4 7 2 3 4 1 6 8 5 4 1 3 5 7 3 5 0 6 0 ``` # Sample Output: ``` 17 29 16 11 ``` # Explanation: For the first input case, the maximum sum of distances is obtained by considering the subarray [2, 7, 4], which sums to 13.","solution":"def max_subarray_sum(n, distances): Given `n` days and an array of distances, computes the maximum sum of distances traveled over any contiguous subarray of days. if n == 0: return 0 max_sum = current_sum = distances[0] for i in range(1, n): current_sum = max(distances[i], current_sum + distances[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Bob is participating in a running championship and he wants to track his performance using his wearable device. The device records the total distance he runs each day for a month. Bob wishes to find out the longest streak of consecutive days where he ran a minimum threshold distance every day. Write a program that helps Bob find out his longest consecutive streak. INPUT First line contains T(T = Number of test cases) Second line contains D(D = Total number of days in the month, D will be 30) Third line contains N (N = Minimum threshold distance) Next \'D\' lines contains the distance ran each day. OUTPUT Longest streak of consecutive days where Bob\'s distance was equal to or greater than the threshold distance. CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Distance Ran per Day ≤ 100 EXAMPLE INPUT 1 30 5 2 5 6 5 5 6 7 4 5 6 7 8 5 6 3 4 6 7 7 8 9 4 5 6 7 8 6 5 4 3 EXAMPLE OUTPUT 6 Explanation: The longest streak where Bob ran at least 5 distance units for consecutive days is 6 days (from day 10 to day 15 inclusive).","solution":"def longest_streak_of_days(days, threshold, distances): Function to find the longest streak of consecutive days where distance ran is greater or equal to the threshold. Parameters: - days: The number of days (int) - threshold: Minimum threshold distance (int) - distances: List of distances ran each day (list of int) Returns: - Longest streak of consecutive days (int) max_streak = 0 current_streak = 0 for distance in distances: if distance >= threshold: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak def process_input(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): D = int(data[index]) index += 1 N = int(data[index]) index += 1 distances = list(map(int, data[index:index+D])) index += D results.append(longest_streak_of_days(D, N, distances)) for result in results: print(result)"},{"question":"You are tasked with managing a warehouse inventory system that tracks multiple product types. The system supports operations to add stock, remove stock, and query the current state of the inventory. -----Input----- The first line contains two integers n and m (1 le n le 10^5; 1 le m le 10^5) — the number of different product types and the number of queries. The next line contains n integers a_1, a_2, ..., a_n (0 le a_i le 10^9) — the initial stock of each product type. Each of the next m lines contains a query of one of the following three types: \\"+ x k\\" — add k units of product x to the stock (1 le x le n, 1 le k le 10^9); \\"- x k\\" — remove k units of product x from the stock (1 le x le n, 0 le k le a_x); \\"? x\\" — output the current stock of product x (1 le x le n). It\'s guaranteed that there are no removal queries that would result in a negative stock for any product. -----Output----- For each query of the third type, output the current stock of the specified product type. -----Examples----- Input 3 5 10 5 20 + 1 5 - 2 3 ? 1 ? 2 + 3 10 Output 15 2 -----Note----- Initially, the stock levels are [10, 5, 20]. After the first query (\\"+ 1 5\\"), the stock levels become [15, 5, 20]. In the second query (\\"- 2 3\\"), the stock levels become [15, 2, 20]. The third query (\\"? 1\\") asks for the current stock of product 1, which is 15. The fourth query (\\"? 2\\") asks for the current stock of product 2, which is 2. After the fifth query (\\"+ 3 10\\"), the stock levels become [15, 2, 30].","solution":"def warehouse_inventory(n, m, initial_stock, queries): stock = initial_stock[:] results = [] for query in queries: split_query = query.split() if split_query[0] == \\"+\\": x = int(split_query[1]) - 1 k = int(split_query[2]) stock[x] += k elif split_query[0] == \\"-\\": x = int(split_query[1]) - 1 k = int(split_query[2]) stock[x] -= k elif split_query[0] == \\"?\\": x = int(split_query[1]) - 1 results.append(stock[x]) return results"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid is initially empty or contains an obstacle. You are also given a target position in the grid. Determine the minimum number of moves required to reach the target position from the starting position (top-left cell), moving only to adjacent cells (up, down, left, or right) and without moving through obstacles. If it is not possible to reach the target position, return -1. Constraints - 1 ≤ R, C ≤ 1000 - The grid may contain up to 100 obstacles. - The starting position is always valid and unblocked. - The target position is always within the grid bounds. Input The input is given from Standard Input in the following format: ``` R C grid target_x target_y ``` where `grid` is a series of R strings, with C characters each. Each character is either a `.` (representing an empty cell) or a `#` (representing an obstacle). `target_x` and `target_y` are the row and column indices (0-based) of the target position. Output Print the minimum number of moves required to reach the target position from the starting position. If it is not possible to reach the target position, print `-1`. Example Input ``` 4 4 .... .#.. ..#. .... 3 3 ``` Output ``` 6 ``` Input ``` 4 4 .... .... .... 2 2 ``` Output ``` -1 ```","solution":"from collections import deque def min_moves_to_target(R, C, grid, target_x, target_y): # Initialize direction vectors for moving up, down, left and right. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Start from the top-left corner. start = (0, 0) # If starting point or target is an obstacle, return -1 immediately. if grid[0][0] == \'#\' or grid[target_x][target_y] == \'#\': return -1 # Initialize a queue for BFS and add the starting position with a move count of 0. queue = deque([(start[0], start[1], 0)]) # A set to keep track of visited cells to avoid processing them again. visited = set() visited.add(start) while queue: x, y, moves = queue.popleft() # Check if current cell is the target. if (x, y) == (target_x, target_y): return moves # Explore all possible moves. for dx, dy in directions: nx, ny = x + dx, y + dy # Check if the new position is within grid bounds and not an obstacle. if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) # Return -1 if target cannot be reached. return -1"},{"question":"You are a software developer for a logistics company, and you need to analyze the movement of packages. Each package moves between different locations, and at each location, it has a status update which is a time-stamped record indicating when the package was received or dispatched. Your task is to compute the longest period (in minutes) during which the package remained at a single location without moving to another location. For simplicity, the timestamps given will always be in ascending order, meaning the events are logged in chronological order. Input: The input consists of multiple test cases. Each test case starts with an integer T, the number of locations the package visited. The next T lines each contain three values: an integer L (location identifier), a string indicating the event type (\'R\' for received, \'D\' for dispatched), and a timestamp in the format \'HH:MM\'. Output: For each test case, output the longest period (in minutes) the package spent at any single location. If a location has only a \'Received\' event and no dispatched event, calculate the period up to 23:59. Constraints: 1 ≤ T ≤ 100 Each timestamp is unique within a test case. 00:00 ≤ timestamp ≤ 23:59 SAMPLE INPUT 2 3 1 R 08:00 1 D 10:00 2 R 12:00 3 1 R 09:00 2 R 10:00 2 D 13:00 SAMPLE OUTPUT 120 180 Explanation In the first case, the package stayed at location 1 from 08:00 to 10:00, which is 120 minutes. At location 2, there is only a \'Received\' event, and it remained there until 23:59, but since 120 minutes is the longest period at any single location among the provided data, the answer is 120. In the second case, there is only one complete period at location 2 from 10:00 to 13:00, which is 180 minutes. At location 1, the package only has a \'Received\' event and no dispatched event, so the count till 23:59 would be more than 180 minutes, but considering only recorded data, the answer remains 180 minutes.","solution":"from datetime import datetime def compute_longest_period(T, records): def diff_in_minutes(start, end): FMT = \'%H:%M\' tdelta = datetime.strptime(end, FMT) - datetime.strptime(start, FMT) return int(tdelta.total_seconds() // 60) longest_period = 0 current_location = None current_start_time = None locations = {} for record in records: L, event, timestamp = record if event == \'R\': current_location = L current_start_time = timestamp if event == \'D\': if L == current_location: period = diff_in_minutes(current_start_time, timestamp) if L in locations: locations[L] = max(locations[L], period) else: locations[L] = period current_location = None current_start_time = None for loc in locations: longest_period = max(longest_period, locations[loc]) return longest_period T1 = 3 records1 = [(1, \\"R\\", \\"08:00\\"), (1, \\"D\\", \\"10:00\\"), (2, \\"R\\", \\"12:00\\")] T2 = 3 records2 = [(1, \\"R\\", \\"09:00\\"), (2, \\"R\\", \\"10:00\\"), (2, \\"D\\", \\"13:00\\")] print(compute_longest_period(T1, records1)) # Output should be 120 print(compute_longest_period(T2, records2)) # Output should be 180"},{"question":"Write a function that takes an array of integers as input and returns an array of the same integers, except with any duplicate values removed. The order of the elements in the returned array must correspond to the order in which they first appear in the input array. For example: ``` removeDuplicates([1, 3, 3, 1, 5, 5, 4, 7, 3, 2, 4]) ``` should return: ``` [1, 3, 5, 4, 7, 2] ``` You may assume that all elements in the input array are integers and that the input array can be empty. If the input array is empty, the function should return an empty array. Function signature: ```python def removeDuplicates(arr: list[int]) -> list[int]: ``` Your task is to implement the `removeDuplicates` function that performs this task. Ensure the solution is efficient and suitable for large input arrays.","solution":"def removeDuplicates(arr: list[int]) -> list[int]: Removes duplicate values from the input array while preserving the order of their first appearances. :param arr: List of integers that may contain duplicates. :return: List of integers without duplicates. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Lora loves solving puzzles. Today, she encountered an interesting one involving strings and patterns. She has an initial string `s` and a pattern string `p`. The goal is to count the number of distinct substrings in `s` which match the pattern `p`. The pattern `p` may contain wildcard characters. Specifically, the character `?` in the pattern `p` matches exactly one arbitrary character in the substring, while any other character matches exactly itself. Input The input consists of two lines: - The first line contains a string `s` (1 ≤ |s| ≤ 1000). - The second line contains a pattern string `p`. Pattern `p` is non-empty and contains only lowercase English letters and the character `?` (1 ≤ |p| ≤ |s|). Output Output a single integer, the number of distinct substrings in `s` that match the pattern `p`. Examples Input abacabad a?a Output 2 Input aaaa aa Output 1 Input mississippi iss?ss?pp Output 1 Note In the first example, the substrings \\"aba\\" at positions 1-3 and \\"aca\\" at positions 3-5 match the pattern \\"a?a\\". In the second example, the substring \\"aa\\" from position 1-2 is identical and hence counted once. In the third example, \\"ississippi\\" contains the substring \\"ississi\\" which match the pattern \\"iss?ss?pp\\" at position 1-9.","solution":"def count_matching_substrings(s, p): def is_match(sub, pat): for cs, cp in zip(sub, pat): if cp != \'?\' and cs != cp: return False return True m, n = len(s), len(p) matched_substrings = set() for i in range(m - n + 1): substring = s[i:i+n] if is_match(substring, p): matched_substrings.add(substring) return len(matched_substrings)"},{"question":"Consider a sequence where the n-th element is defined as the sum of the squares of the first n natural numbers. The formula to calculate the n-th element is given by Sn = n·(n + 1)·(2n + 1) / 6. You are given n; calculate the n-th element of this sequence. Input The only line of the input contains an integer n (1 ≤ n ≤ 100). Output Output the n-th element of the sequence defined by the sum of the squares of the first n natural numbers. Examples Input 1 Output 1 Input 3 Output 14","solution":"def sequence_element(n): Returns the n-th element of the sequence defined by the sum of the squares of the first n natural numbers. return (n * (n + 1) * (2 * n + 1)) // 6"},{"question":"A company named TechSecure is working on enhancing their network security features and requires a function to obfuscate sensitive information within their communication strings. Your task is to implement this obfuscation function. Specifically, the function should replace each letter with the next letter in the alphabet, wrap around \'z\' to \'a\', and each digit with the next sequential digit, wrap around \'9\' to \'0\'. Non-alphanumeric characters should remain unchanged. Input The input begins with an integer T, the number of test cases. Each of the following T lines contains a string S representing a communication string. Output For each test case, output the obfuscated version of the string S. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000000 Example Input: 2 hello-world123! zZ9 Output: ifmmp-xpsme234! aA0","solution":"def obfuscate_string(s): Obfuscate the input string `s` by replacing each letter with the next letter in the alphabet and each digit with the next sequential digit. Non-alphanumeric characters remain unchanged. result = [] for char in s: if \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\')) elif \'A\' <= char <= \'Z\': new_char = chr((ord(char) - ord(\'A\') + 1) % 26 + ord(\'A\')) elif \'0\' <= char <= \'9\': new_char = chr((ord(char) - ord(\'0\') + 1) % 10 + ord(\'0\')) else: new_char = char result.append(new_char) return \'\'.join(result) def process_test_cases(T, test_cases): Given T test cases, apply the obfuscation function on each and return the results. results = [] for i in range(T): results.append(obfuscate_string(test_cases[i])) return results"},{"question":"A software company is developing an advanced monitoring system for tracking user sessions in a distributed application. Each user session generates a series of events that are recorded with their corresponding timestamps. The system needs to support two types of operations: adding a new event for a user session and querying the number of events for a user session within a given time interval. You are tasked with implementing this system. Specifically, you need to process a number of queries and provide the required results. Each query can either add a new event to a user\'s session or return the count of events for a user\'s session within a specified time range. Input The first line of input contains two integers n (1 ≤ n ≤ 100,000), the number of queries, and t_max (1 ≤ t_max ≤ 10^9), the maximum possible timestamp. Each of the next n lines describes a query of one of the following formats: 1. 1 u t (1 ≤ u ≤ 10^5, 0 ≤ t ≤ t_max): Add a new event for user session u at timestamp t. 2. 2 u t1 t2 (1 ≤ u ≤ 10^5, 0 ≤ t1 ≤ t2 ≤ t_max): Return the number of events for user session u that occurred between timestamps t1 and t2, inclusive. Output For each query of the second type, print the number of events for user session u within the specified time range on a new line. Example Input 10 100 1 1 10 1 1 20 1 2 15 2 1 5 25 1 1 30 2 1 10 30 2 2 10 20 1 2 25 2 2 10 30 2 1 5 35 Output 2 2 1 2 3 Explanation In this example: - The first query adds an event for user session 1 at timestamp 10. - The second query adds an event for user session 1 at timestamp 20. - The third query adds an event for user session 2 at timestamp 15. - The fourth query asks for the number of events for user session 1 between timestamps 5 and 25, which includes the events at timestamps 10 and 20, so the output is 2. - The fifth query adds an event for user session 1 at timestamp 30. - The sixth query asks for the number of events for user session 1 between timestamps 10 and 30, which includes the events at timestamps 10, 20, and 30, so the output is 2. - The seventh query asks for the number of events for user session 2 between timestamps 10 and 20, which includes the event at timestamp 15, so the output is 1. - The eighth query adds an event for user session 2 at timestamp 25. - The ninth query asks for the number of events for user session 2 between timestamps 10 and 30, which includes the events at timestamps 15 and 25, so the output is 2. - The tenth query asks for the number of events for user session 1 between timestamps 5 and 35, which includes all the events at timestamps 10, 20, and 30, so the output is 3.","solution":"from collections import defaultdict import bisect class EventMonitoringSystem: def __init__(self): self.events = defaultdict(list) def add_event(self, user, timestamp): # Add the event timestamp to the user\'s event list, maintaining sorted order bisect.insort(self.events[user], timestamp) def query_event_count(self, user, start_time, end_time): # Retrieve the list of events for the user timestamps = self.events[user] # Find the insertion points for start_time and end_time left = bisect.bisect_left(timestamps, start_time) right = bisect.bisect_right(timestamps, end_time) # The count of events between the two indices is the result return right - left def process_queries(n, t_max, queries): system = EventMonitoringSystem() results = [] for query in queries: if query[0] == 1: _, u, t = query system.add_event(u, t) elif query[0] == 2: _, u, t1, t2 = query results.append(system.query_event_count(u, t1, t2)) return results # Example usage: # queries = [ # (1, 1, 10), # (1, 1, 20), # (1, 2, 15), # (2, 1, 5, 25), # (1, 1, 30), # (2, 1, 10, 30), # (2, 2, 10, 20), # (1, 2, 25), # (2, 2, 10, 30), # (2, 1, 5, 35) # ] # print(process_queries(10, 100, queries)) # [2, 2, 1, 2, 3]"},{"question":"A group of friends have decided to organize a small team programming contest. For the contest, they\'ve decided to use an algorithm to pair up the participants based on their skill levels to make the teams as balanced as possible. The skill level of each participant is represented as an integer. They will be forming exactly two teams, and their goal is to make the difference in the sum of skill levels between the two teams as small as possible. To achieve this, they need a method to partition the participants into two groups such that the absolute difference between the sums of their skills is minimized. Write a program that, given the skill levels of the participants, determines the minimum possible difference in the sum of the skill levels between two groups. Input: The first line of the input contains an integer N, the number of participants. The second line contains N integers separated by spaces, representing the skill levels of each participant. 1 ≤ N ≤ 20 Each skill level is a positive integer not exceeding 1000. Output: Output a single integer, the minimum possible difference in the sum of skill levels between the two teams. Example: Input 4 3 1 4 2 Output 0 Explanation: One possible partition is {3, 2} and {1, 4} with sums 5 and 5, respectively. Hence, the absolute difference is 0.","solution":"def min_partition_difference(skill_levels): Function to find the minimum difference between two partitions of skill_levels. Args: skill_levels (list of int): List of skill levels of participants. Returns: int: Minimum possible difference in the sum of skill levels between two groups. N = len(skill_levels) total_sum = sum(skill_levels) half_sum = total_sum // 2 # Initialize a 2D DP array to store boolean values for possible sums dp = [[False] * (half_sum + 1) for _ in range(N + 1)] for i in range(N + 1): dp[i][0] = True for i in range(1, N + 1): for j in range(1, half_sum + 1): dp[i][j] = dp[i-1][j] if j >= skill_levels[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-skill_levels[i-1]] for j in range(half_sum, -1, -1): if dp[N][j]: return total_sum - 2 * j # Function to parse input and return result def minimal_diff_of_partitions(input_str): input_lines = input_str.strip().split(\'n\') N = int(input_lines[0]) skill_levels = list(map(int, input_lines[1].split())) return min_partition_difference(skill_levels)"},{"question":"Aaron and Brenda enjoy solving number puzzles together. In their latest challenge, they are given two arrays of integers. Their task is to find the maximum sum of any subarray that appears in both arrays simultaneously. A subarray is a contiguous part of an array. Help Aaron and Brenda solve this problem. Input: The input consists of two lines. - The first line contains space-separated integers representing the elements of the first array. - The second line contains space-separated integers representing the elements of the second array. Output: Output a single integer, the maximum sum of any subarray that appears in both arrays. Constraints: 1 ≤ length of each array ≤ 1000 -1000 ≤ array element ≤ 1000 SAMPLE INPUT 1 -2 3 4 -1 2 1 -5 4 3 4 -1 2 1 SAMPLE OUTPUT 9 Explanation The subarray [3, 4, -1, 2, 1] appears in both arrays, and its sum is 9. This is the maximum sum of any subarray that appears in both arrays.","solution":"def max_common_subarray_sum(arr1, arr2): Finds the maximum sum of any subarray that appears in both arrays. n = len(arr1) m = len(arr2) # DP approach - We will use a hashmap for dynamic programming dp = [[0] * (m + 1) for _ in range(n + 1)] max_sum = 0 # Fill DP table for i in range(1, n + 1): for j in range(1, m + 1): if arr1[i-1] == arr2[j-1]: dp[i][j] = dp[i-1][j-1] + arr1[i-1] max_sum = max(max_sum, dp[i][j]) else: dp[i][j] = 0 return max_sum"},{"question":"A factory produces widgets with unique serial numbers. Due to a malfunction, the serial numbers are shuffled, and some widgets may be missing. The factory manager needs your help to identify the first missing serial number starting from 1. Your task is to write a program that takes in a list of serial numbers and identifies the first missing serial number in the sequence starting from 1. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of serial numbers. - The second line contains N space-separated integers representing the serial numbers. -----Output:----- For each test case, output a single integer on a new line, the first missing serial number. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - Each serial number is a positive integer not exceeding 10^6. -----Sample Input:----- 2 5 2 3 7 6 8 3 1 2 3 -----Sample Output:----- 1 4","solution":"def find_first_missing_serial_number(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] serial_numbers = test_cases[i][1] serial_set = set(serial_numbers) missing_number = 1 while missing_number in serial_set: missing_number += 1 results.append(missing_number) return results"},{"question":"To help with scheduling at a confectionery workshop, you have been asked to write a program to simulate the scheduling of cake baking and packaging tasks. Each task is assigned a unique priority level and the workshop follows these steps: 1. Cakes are baked one by one in a specified order. 2. Once a cake is baked, it is ready for packaging. 3. Cakemaster wants to maintain a log and keep track of the tasks: `BAKE` or `PACKAGE x`, where `x` stands for the priority level of the cake. All cakes are eventually baked and packaged. Bakers follow the schedule strictly: they bake as per the given order, while packagers always package the highest priority cake available. You are given a log of tasks, and you need to determine if the log is consistent with the above rules. -----Input----- The first line contains an integer `n` (`1 ≤ n ≤ 10^5`), denoting the number of cakes. The following `2n` lines describe the tasks in the format below: - `BAKE`, for baking a cake. - `PACKAGE x`, where `x` is the priority level of the cake being packaged. Each priority level is a unique integer from `1` to `n`. It is guaranteed that exactly `n` tasks are `BAKE` and `n` tasks are `PACKAGE`. -----Output----- If the log is consistent, print \\"VALID\\". Otherwise, print \\"INVALID\\". If the log is valid, on the second line print `n` space-separated integers denoting the priority levels of the cakes in the order they were baked. If there are multiple valid answers, print any. -----Examples----- Input 4 BAKE BAKE PACKAGE 1 BAKE PACKAGE 2 BAKE PACKAGE 3 PACKAGE 4 Output VALID 4 3 2 1 Input 2 PACKAGE 1 BAKE BAKE PACKAGE 2 Output INVALID Input 3 BAKE BAKE BAKE PACKAGE 3 PACKAGE 1 PACKAGE 2 Output VALID 1 2 3 -----Notes----- In the first example, one possible valid order of baking is: `[4, 3, 2, 1]`. Initially, a cake with priority `4` is baked and remains for packaging. Next, another cake with priority `3` is baked. Before it gets packaged, the cake with priority `4` is packaged first and so on. In the second example, `PACKAGE` appears before any `BAKE` task, making it an invalid sequence since no cake is available to package at the start. In the third example, the order `[1, 2, 3]` is valid for baking and packaging according to the log.","solution":"def validate_log(n, tasks): Validate the log of baking and packaging tasks according to given rules. Arguments: n -- int, number of cakes tasks -- list of strings, list of operations (BAKE and PACKAGE x) Returns: tuple -- (\'VALID\', [baked_order]) if tasks are valid and consistent (\'INVALID\', None) otherwise bake_order = [] # This will hold the order in which cakes were baked package_stack = [] # This stack will help us keep track of available cakes for packaging for task in tasks: if task == \\"BAKE\\": # Initially add the cake with a default priority of -1 (will be replaced soon) package_stack.append(-1) elif task.startswith(\\"PACKAGE\\"): _, priority = task.split() priority = int(priority) if not package_stack or package_stack[-1] != -1: # If there is no cake available to package, return INVALID return \\"INVALID\\", None # Replace the last baked cake with the actual priority before packaging package_stack[-1] = priority # Remove the cake from our stack of cakes waiting for packaging bake_order.append(priority) # Store the priority with which it was baked package_stack.pop() else: return \\"INVALID\\", None # Invalid command return \\"VALID\\", bake_order"},{"question":"Phoebe works at an office where every document is classified based on its priority. Each document has a priority level represented by an integer. Phoebe needs to quickly find all documents with a specific priority level whenever she gets a query. However, the number of documents and queries could be quite large, so she wants to make this process as efficient as possible. Here is the process she follows: She starts with an empty list of documents. Over time, she either adds documents to the list or receives queries asking her to count the number of documents with a specific priority. Write a function to help Phoebe process these operations efficiently. -----Input:----- - The first line of input contains an integer M, the number of operations. - The next M lines each contain an operation, which can be one of the following: - \\"ADD x\\": Add a document with priority x to the list of documents. - \\"QUERY x\\": Print the count of documents with priority x. -----Output:----- For each \\"QUERY\\" operation, output the count of documents with the specified priority. -----Constraints----- - 1 leq M leq 100,000 - 1 leq x leq 10^6 - \\"ADD x\\" and \\"QUERY x\\" operations are interleaved and there could be multiple operations of each type. -----Sample Input:----- 8 ADD 3 ADD 5 ADD 3 QUERY 3 ADD 6 QUERY 5 ADD 3 QUERY 3 -----Sample Output:----- 2 1 3 -----EXPLANATION:----- - Initially, there are no documents. - After \\"ADD 3\\", the list contains one document with priority 3. - After \\"ADD 5\\", the list contains documents with priorities [3, 5]. - After another \\"ADD 3\\", the list contains documents with priorities [3, 5, 3]. - The first \\"QUERY 3\\" asks for the count of priority 3 documents, which is 2. - After \\"ADD 6\\", the list contains documents with priorities [3, 5, 3, 6]. - The second \\"QUERY 5\\" asks for the count of priority 5 documents, which is 1. - After another \\"ADD 3\\", the list contains documents with priorities [3, 5, 3, 6, 3]. - The final \\"QUERY 3\\" asks for the count of priority 3 documents, which is 3.","solution":"def process_operations(operations): Takes in a list of operations and processes them accordingly. Supports \\"ADD x\\" to add a document with priority x, and \\"QUERY x\\" to print the count of documents with priority x. from collections import defaultdict document_count = defaultdict(int) # Dictionary to store the count of each priority result = [] for operation in operations: op, val = operation.split() val = int(val) if op == \\"ADD\\": document_count[val] += 1 elif op == \\"QUERY\\": result.append(document_count[val]) return result"},{"question":"Given an integer array `nums`, you are tasked with finding all possible subsets (the power set). The solution set must not contain duplicate subsets. Write a function `subsetsWithDup(nums) -> List[List[int]]` to return all possible subsets. The arrays should be output in any order, and the solution should not include duplicate subsets. # Example **Input:** ```python nums = [1, 2, 2] ``` **Output:** ```python [ [], [1], [2], [1, 2], [2, 2], [1, 2, 2] ] ``` # Note Take into account that the array may contain duplicates, but the resulting subsets should not be duplicated.","solution":"def subsetsWithDup(nums): Returns all possible subsets of a list of integers containing duplicates. nums.sort() res = [] subset = [] def dfs(index): res.append(subset[:]) for i in range(index, len(nums)): if i > index and nums[i] == nums[i - 1]: continue subset.append(nums[i]) dfs(i + 1) subset.pop() dfs(0) return res"},{"question":"Sentence Shifting Puzzle You are given a sentence where each word is shifted one place to the right, moving the last word to the first position. This is a technique to shuffle the message slightly while keeping it readable upon careful inspection. How this transformation works 1. The original words are split. 2. Each word is shifted to the right by one position in the sentence, making the last word the first one. Example Original Sentence: `\\"Coding Assessments are fun to create\\"` Transformed Sentence: `\\"create Coding Assessments are fun to\\"` Write a function `shift_sentence(sentence)` that takes in a string `sentence` as input, applies the described transformation, and returns the resultant sentence as a string. Function Signature ```python def shift_sentence(sentence: str) -> str: # Write your code here ``` # Constraints - The input sentence will consist of words separated by single spaces. - The sentence will contain 2 to 100 words. - Words will only contain alphabetic characters (no punctuation).","solution":"def shift_sentence(sentence: str) -> str: Shifts the words in the sentence one place to the right, with the last word moved to the first position. words = sentence.split() if len(words) <= 1: return sentence shifted_sentence = [words[-1]] + words[:-1] return \' \'.join(shifted_sentence)"},{"question":"# Description For this kata, you will be implementing a Sieve of Eratosthenes to find all primes up to a given number n. # Instructions You need to complete the `PrimeSieve` class and the `find_primes` method: ```python class PrimeSieve: def __init__(self, n): self.n = n def find_primes(self): pass ``` You will be given a positive integer n and you should return a list of all prime numbers up to and including n. # Example ```python sieve = PrimeSieve(10) print(sieve.find_primes()) # Output: [2, 3, 5, 7] sieve = PrimeSieve(30) print(sieve.find_primes()) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ``` # Requirements - The algorithm should be efficient. - You should handle cases where n is less than 2 by returning an empty list. # How the Sieve of Eratosthenes Works 1. Create a boolean array `is_prime` of size `n + 1` and set all entries to `True`. The entry at index `i` will be `True` if `i` is a prime number. 2. Set `is_prime[0]` and `is_prime[1]` to `False` because 0 and 1 are not prime numbers. 3. Start with the first prime number, 2. Mark all multiples (i.e., 4, 6, 8, etc.) as `False`. 4. Move to the next number that is still marked as `True` and repeat the process until you\'ve processed numbers up to the square root of `n`. 5. All remaining numbers marked as `True` in the array are prime. # Example of the Sieve in Action ```python Given n = 10, the boolean array `is_prime` will be initially: [True, True, True, True, True, True, True, True, True, True, True] After setting `is_prime[0]` and `is_prime[1]` to `False`: [False, False, True, True, True, True, True, True, True, True, True] Processing 2 and marking its multiples: [False, False, True, True, False, True, False, True, False, True, False] Processing 3 and marking its multiples: [False, False, True, True, False, True, False, True, False, False, False] The remaining `True` values correspond to the prime numbers: 2, 3, 5, and 7. ```","solution":"class PrimeSieve: def __init__(self, n): self.n = n def find_primes(self): if self.n < 2: return [] is_prime = [True] * (self.n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(self.n**0.5) + 1): if is_prime[i]: for j in range(i * i, self.n + 1, i): is_prime[j] = False return [i for i in range(2, self.n + 1) if is_prime[i]]"},{"question":"Olga enjoys arranging her potted plants in a straight line along her window sill. She wants to configure them in such a way that the height of every plant is non-decreasing from left to right. However, she also has a habit of giving away her plants to friends, so on a given day, she might remove some plants from her collection. Given a list of the heights of Olga\'s plants and indices of the plants she has given away, determine the height of the plants still in her collection after she has given some away, in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of plants Olga initially has, followed by n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the plants in centimeters. The second line contains an integer m (0 ≤ m ≤ n) — the number of plants Olga gives away, followed by m distinct integers a1, a2, ..., am (1 ≤ ai ≤ n) — the 1-based indices of the plants she gives away. Output Print the remaining heights of the plants in non-decreasing order, each height separated by a space. Examples Input 5 3 7 2 9 4 2 2 4 Output 2 3 4 Input 3 10 5 8 1 1 Output 5 8","solution":"def remaining_heights(n, heights, m, indices_to_remove): Given the number of plants n, and their respective heights in a list, and the number of plants to be removed m, along with their indices, return the heights of the remaining plants in non-decreasing order. Parameters: n (int): Number of plants initially. heights (list of int): List of initial heights of the plants. m (int): Number of plants to be removed. indices_to_remove (list of int): List of 1-based indices of the plants to be removed. Returns: list of int: Heights of the remaining plants in non-decreasing order. indices_to_remove_set = set(indices_to_remove) remaining_plants = [heights[i] for i in range(n) if (i + 1) not in indices_to_remove_set] remaining_plants.sort() return remaining_plants"},{"question":"Treehouse is a popular recreational development located in the center of a large natural reserve. To better cater to visitors, the management has decided to build a series of bridges that connect the various treehouses. The objective is to ensure that visitors can travel between any two treehouses using the fewest number of bridges possible. This leads to two important requirements: 1. The number of bridges must equal the number of treehouses minus one (to avoid cycles and ensure connectivity). 2. The total length of all bridges must be minimized. Each treehouse is connected to other treehouses using pathways that have a certain distance assigned to them. You are to help the management calculate the minimal total length of the bridges required to connect all the treehouses. Input: - The first line of the input contains the number `n`, the number of treehouses. The next `n` lines each contain three space-separated integers `u`, `v`, and `w`, where `u` and `v` are the treehouses connected by a pathway, and `w` is the length of that pathway. Output: - The minimal total length of the bridges required to connect all the treehouses. Constraints: - 1 ≤ n ≤ 10^3 - 1 ≤ u, v ≤ n - 1 ≤ w ≤ 100 SAMPLE INPUT 4 1 2 1 2 3 4 1 3 2 3 4 3 SAMPLE OUTPUT 6","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimal_total_length(n, edges): Returns the minimum total length of bridges required to connect all treehouses. result = [] # This will store the resulting MST i = 0 # An index variable, used for sorted edges e = 0 # An index variable, used for result[] # Step 1: Sort all the edges in non-decreasing order of their weight. edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] # Create V subsets with single elements for node in range(n+1): parent.append(node) rank.append(0) # Number of edges to be taken is equal to V-1 while e < n - 1: # Step 2: Pick the smallest edge. Check if it forms a cycle with the spanning-tree # formed so far. If cycle is not formed, include this edge. Otherwise, discard it. u, v, w = edges[i] i = i + 1 x = find(parent, u) y = find(parent, v) # If including this edge does not cause a cycle, # include it in result and increment the index of result for the next edge if x != y: e = e + 1 result.append([u, v, w]) union(parent, rank, x, y) # Else discard the edge # Calculate the total weight of the MST minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimal_bridges(n, edges): return minimal_total_length(n, edges)"},{"question":"Alice has a treasure map that leads her to a giant snakelike cave with multiple chambers connected by tunnels. Each chamber has a certain amount of treasure, and Alice can start in any chamber. However, there\'s a catch: the tunnels are guarded by snakes, and Alice can only pass through each tunnel once. If a snake catches her, she loses all the treasure she has accumulated. Alice wants to collect the maximum amount of treasure possible. Can you help her devise a plan to maximize her haul? Input: - The first line contains two integers n and m, denoting the number of chambers and the number of tunnels respectively. - The second line contains n integers, where the i-th integer t_i (0 ≤ t_i ≤ 1000) represents the amount of treasure in chamber i. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a tunnel between chambers u and v. These tunnels are bidirectional. Output: - Print a single integer, the maximum amount of treasure Alice can collect if she starts from any chamber and respects the condition of passing through each tunnel at most once. Constraints for Subproblems: - In subproblem G1 (10 points), 1 ≤ n, m ≤ 50. - In subproblem G2 (20 points), 1 ≤ n, m ≤ 500. - In subproblem G3 (20 points), 1 ≤ n, m ≤ 1000. Examples: Input: 3 2 7 2 3 1 2 2 3 Output: 10 Input: 4 4 5 10 4 1 1 2 2 3 3 4 4 1 Output: 15 Explanation of Examples: In the first example, Alice can start in chamber 1, collect 7 units of treasure, proceed to chamber 2 (collecting 2 more treasure units for a total of 9), and then go to chamber 3 (collecting 3 more for a total of 12). Thus, 10 is the maximum treasure she can collect. In the second example, Alice can traverse the path 2 -> 3 -> 4 -> 1, collecting treasures of 10 + 4 + 1 + 5 = 20 units.","solution":"def max_treasure(n, m, treasures, tunnels): from collections import defaultdict, deque def dfs(node, visited, current_treasure): nonlocal max_treasure visited[node] = True current_treasure += treasures[node] max_treasure = max(max_treasure, current_treasure) for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, visited, current_treasure) visited[node] = False graph = defaultdict(list) for u, v in tunnels: graph[u-1].append(v-1) graph[v-1].append(u-1) max_treasure = 0 for i in range(n): visited = [False] * n dfs(i, visited, 0) return max_treasure"},{"question":"Misha is keen on playing mathematical games and puzzles. One day, Misha comes across a game involving a sequence of numbers and arithmetic operations. The game challenges players to rearrange and group the numbers in the sequence to achieve the highest possible score. Here are the rules: - You are given an array of `n` non-negative integers. - You can divide this array into as many non-empty subarrays as you\'d like. - For each subarray, compute the sum of its elements. - The score for the entire sequence is the product of the sums of each subarray. Help Misha determine the maximum score that can be achieved by optimally partitioning the array into subarrays. -----Input----- First line contains a single integer `n` (1 ≤ n ≤ 100) — the number of integers in the array. Second line contains `n` space-separated integers `a_1, a_2, ..., a_{n}` (0 ≤ a_{i} ≤ 1000), representing the elements of the array. -----Output----- Output a single integer — the maximum possible score for the given array. -----Examples----- Input 4 1 2 3 4 Output 24 Input 3 5 6 1 Output 36 -----Note----- In the first test case, the best partition into subarrays is: [1, 2, 3, 4]. The answer is calculated as follows: (1 + 2 + 3 + 4) = 10. In the second test case, the best partition into subarrays is: [5] [6] [1]. The answer is calculated as follows: 5 * 6 * 1 = 30.","solution":"def max_score(arr): Returns the maximum possible score for the given array by optimally partitioning the array into subarrays according to the rules described above. # The optimal strategy is to keep the largest possible subarrays, # because the product of larger numbers is greater than the product of smaller numbers. n = len(arr) total_sum = sum(arr) # The sum of the entire array return total_sum"},{"question":"Write a function that takes a list of integers and an integer `k` and returns the maximum sum of `k` consecutive elements in the list. If there are fewer than `k` elements in the list, the function should return 0. Example 1: Input: lst = [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: The maximum sum of 2 consecutive elements is 4 + 5 = 9. Example 2: Input: lst = [5, -1, 9, 3, 7], k = 3 Output: 19 Explanation: The maximum sum of 3 consecutive elements is 9 + 3 + 7 = 19. Example 3: Input: lst = [1, 2], k = 3 Output: 0 Explanation: There are fewer than 3 elements in the list, so the function returns 0. Your Task: You don\'t need to read or print anything. Your task is to complete the function max_consecutive_sum() which takes a list of integers lst and an integer k as input and returns an integer representing the maximum sum of `k` consecutive elements in the list. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= Length of list <= 10^5 -10^5 <= lst[i] <= 10^5 1 <= k <= 10^5","solution":"def max_consecutive_sum(lst, k): if len(lst) < k: return 0 max_sum = current_sum = sum(lst[:k]) for i in range(k, len(lst)): current_sum += lst[i] - lst[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"During the annual coding competition, a creative problem involves arranging a sequence of boxes. Each box has a unique weight, and your task is to determine whether the boxes can be arranged in a specific alternating weight pattern: starting with the heaviest, then the lightest, then the next heaviest, and so on until all boxes are arranged. Given a list of box weights, determine if they can be arranged in the described alternating weight pattern. If it is possible, return the sequence of weights in the required order. If it is not possible, return \\"Not Possible\\". Constraints * 1 ≤ number of boxes ≤ 100 * 1 ≤ weight of each box ≤ 1000 Input The input is given from Standard Input in the following format: n w_1 w_2 ... w_n Output Print the sequence of box weights in the described order if it\'s possible. If it\'s not possible, print \\"Not Possible\\". Examples Input 5 5 3 9 1 7 Output 9 1 7 3 5 Input 4 2 2 2 2 Output Not Possible","solution":"def arrange_boxes(n, weights): Arrange the boxes in an alternating weight pattern. Args: n : int : number of boxes weights : list of int : list of weights of the boxes Returns: str : the sequence of weights in the required order or \\"Not Possible\\" if arrangement is not possible. if len(set(weights)) != len(weights): return \\"Not Possible\\" weights.sort() result = [] for i in range(n//2): result.append(weights[-(i + 1)]) result.append(weights[i]) if n % 2 == 1: result.append(weights[n // 2]) return \\" \\".join(map(str, result))"},{"question":"Consider a game where you are given a grid with N rows and M columns. Each cell in the grid contains an integer value that represents the cost of stepping on that cell. You start at the top-left cell (1,1) and you want to reach the bottom-right cell (N,M). You can only move to the right or down from any cell. Your objective is to find the path from (1,1) to (N,M) such that the total cost incurred is minimized. -----Input----- The first line contains two integers, N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns in the grid, respectively. Each of the next N lines contains M integers where the j-th integer in the i-th line represents the cost C_{ij} of stepping on the cell (i,j). (1 ≤ C_{ij} ≤ 100) -----Output----- Print the minimum cost to travel from the top-left cell (1,1) to the bottom-right cell (N,M). -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 -----Note----- In the first example, a path with the minimum cost would be 1 → 3 → 1 → 1 → 1 (1+3+1+1+1 = 7). In the second example, a path with the minimum cost would be 1 → 1 → 1 (1+1+1 = 3).","solution":"def min_cost_path(grid): N = len(grid) M = len(grid[0]) # Initialize cost matrix cost = [[0 for _ in range(M)] for _ in range(N)] cost[0][0] = grid[0][0] # Initialize first column of total cost matrix for i in range(1, N): cost[i][0] = cost[i - 1][0] + grid[i][0] # Initialize first row of total cost matrix for j in range(1, M): cost[0][j] = cost[0][j - 1] + grid[0][j] # Fill the rest of the cost matrix for i in range(1, N): for j in range(1, M): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + grid[i][j] return cost[N-1][M-1]"},{"question":"Given a list of integers, determine if the sequence can be partitioned into two subsets such that the sum of elements in both subsets is equal. Example 1: Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into equal sum subsets. Your Task: You don\'t need to read or print anything. Your task is to complete the function can_partition() which takes the list of integers as input parameter and returns a boolean value indicating whether the partition is possible. Expected Time Complexity: O(n * (sum/2)) Expected Space Complexity: O(n * (sum/2)) Constraints: 1 <= length of list <= 200 1 <= element of list <= 100","solution":"def can_partition(nums): Determine if the list can be partitioned into two subsets with equal sum. :param nums: List[int], list of integers :return: bool, True if partition is possible, False otherwise total_sum = sum(nums) # If total_sum is odd, it\'s not possible to partition if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a dp array where dp[j] means whether a subset sum j can be formed dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are tasked with developing an automated seating arrangement system for a theater. The theater has a row of seats numbered from 1 to N. Each seat can either be occupied or unoccupied, represented by a binary string `S` of length N where \'1\' indicates an occupied seat and \'0\' indicates an unoccupied seat. The goal is to seat a new audience member such that the distance between the new member and the nearest occupied seat is maximized. If there are multiple seats that satisfy this condition, the seat with the smallest index should be chosen. Your task is to find the seat index where the new member should be seated. Input Format: The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with one line with a binary string S. Output Format: For each test case, output one line containing \\"Case #x:\\", where x is the test case number (starting from 1). Then, for every test case, output the seat index (1-based) that provides the maximum distance from the nearest occupied seat. Constraints: - The binary string S will have a length between 1 and 1000 (inclusive). - There will be at least one \'0\' in the string. SAMPLE INPUT 2 10001 0010 SAMPLE OUTPUT Case #1: 3 Case #2: 1 Explanation: For the first test case, the seats are [1, 0, 0, 0, 1]. The maximum distance from an occupied seat for each \'0\' is: - Seat 2: Distance = 1 (nearest occupied seat: 1) - Seat 3: Distance = 2 (nearest occupied seat: 1 or 5) - Seat 4: Distance = 1 (nearest occupied seat: 5) Thus, the optimal seat is 3. For the second test case, the seats are [0, 0, 1, 0]. The maximum distance from an occupied seat for each \'0\' is: - Seat 1: Distance = 2 (nearest occupied seat: 3) - Seat 2: Distance = 1 (nearest occupied seat: 3) - Seat 4: Distance = 1 (nearest occupied seat: 3) Thus, the optimal seat is 1.","solution":"def find_seat(seating_str): max_dist = -1 best_seat = -1 occupied_indices = [i for i, seat in enumerate(seating_str) if seat == \'1\'] for i, seat in enumerate(seating_str): if seat == \'0\': if not occupied_indices: return i + 1 # if no seats are occupied, take the first available closest_distance = min([abs(i - occupied) for occupied in occupied_indices]) if closest_distance > max_dist: max_dist = closest_distance best_seat = i return best_seat + 1 def automated_seating(arrangements): results = [] for index, seating_str in enumerate(arrangements): seat_index = find_seat(seating_str) results.append(f\\"Case #{index + 1}: {seat_index}\\") return results"},{"question":"Given an undirected graph with n nodes and m edges, each node is a city, and each edge between the two nodes is a bidirectional road connecting two cities. Your task is to compute the smallest number of repair operations required to make the entire graph connected, so there is a path between any pair of cities. You are allowed to perform the following operation: - Add a new road connecting any two cities that do not currently have a direct road between them. Write a function to determine the minimum number of operations needed to connect all cities. -----Input----- The first line contains two integers n and m (1 leq n leq 1000, 0 leq m leq frac{n(n-1)}{2}) representing the number of cities and the number of roads, respectively. The next m lines each contain two integers u and v (1 leq u, v leq n), representing that there is a road between cities u and v. -----Output----- Output a single integer representing the minimum number of repair operations needed to make the graph connected. -----Example----- Input 5 3 1 2 2 3 4 5 Output 1 Input 4 2 1 2 3 4 Output 1 -----Note----- In the first test case, cities 1, 2, and 3 are already connected. Cities 4 and 5 are isolated from the rest, but we just need one road to connect city 3 (or 2 or 1) to either city 4 or 5. In the second test case, we can connect any one of the cities in one component to any one of the cities in the other component with a single new road.","solution":"def number_of_repairs_needed(n, m, edges): Determine the minimum number of operations needed to connect all cities. :param n: Number of cities :param m: Number of roads :param edges: List of tuples representing the roads between cities :return: Minimum number of roads needed to connect all cities from collections import defaultdict def dfs(node, visited, adj_list): visited[node] = True for neighbor in adj_list[node]: if not visited[neighbor]: dfs(neighbor, visited, adj_list) # Initialize adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Find the number of connected components visited = [False] * (n + 1) connected_components = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, visited, adj_list) connected_components += 1 # Minimum number of operations needed to connect the entire graph return connected_components - 1"},{"question":"An environmental research team is studying the concentrations of a particular pollutant in a river over a period of D days. Each day, they record the concentration measurement for that day. To help them analyze the data, they want to find the maximum average concentration over any consecutive K days. Your task is to write a program that finds the maximum average concentration over any consecutive K days in their recorded data. -----Input----- The first line contains two integers D (1 le D le 100000) and K (1 le K le D). The second line contains D integers a_1, a_2, dots, a_D (-10^6 le a_i le 10^6), where each integer represents the concentration measurement on that day. -----Output----- Output a single line containing the largest average concentration over any consecutive K days, rounded to one decimal place. -----Examples----- Sample Input 1: 5 2 1 12 -5 -6 50 Sample Output 1: 22.0 Sample Input 2: 7 3 5 5 5 5 5 5 5 Sample Output 2: 5.0","solution":"def max_average_concentration(D, K, concentrations): current_sum = sum(concentrations[:K]) max_sum = current_sum for i in range(K, D): current_sum += concentrations[i] - concentrations[i - K] if current_sum > max_sum: max_sum = current_sum return round(max_sum / K, 1) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() D = int(data[0]) K = int(data[1]) concentrations = list(map(int, data[2:D+2])) print(max_average_concentration(D, K, concentrations))"},{"question":"Consider an array of integers representing daily stock prices. You are to write a program that determines the maximum profit you can achieve by completing at most one transaction (i.e., buying one and selling one share of the stock). Note that you cannot sell a stock before you buy one. -----Constraints----- - 1 leq text{length of price array} leq 10^5 - 0 leq text{price} leq 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: A single line containing the space-separated integers representing the daily stock prices. -----Output----- Print the maximum profit that can be achieved from one transaction. If no profit is possible, print 0. -----Sample Input----- 7 1 5 3 6 4 -----Sample Output----- 5 The maximum profit that can be achieved is by buying on day 2 (price = 1) and selling on day 5 (price = 6), so the profit is 6 - 1 = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling once. If no profit is possible, returns 0. if not prices: return 0 # Initialize the necessary variables min_price = float(\'inf\') max_profit = 0 # Iterate through the prices for price in prices: # If we find a new minimum price, we update min_price if price < min_price: min_price = price # Calculate potential profit if current price is sold at potential_profit = price - min_price # Update max_profit if the potential profit is greater if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Mizuki loves rearranging the letters of words to form new ones. She wants to find the longest palindromic subsequence in a given word. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a string that reads the same forward and backward. Help Mizuki by writing a program to find the length of the longest palindromic subsequence in a given string. Constraints * 1 ≦ |s| ≦ 5000 * s consists of lowercase English letters. Input The input is given from Standard Input in the following format: s Output Print the length of the longest palindromic subsequence. Examples Input bbbab Output 4 Input cbbd Output 2 Input abcdef Output 1","solution":"def longest_palindromic_subsequence(s: str) -> int: Returns the length of the longest palindromic subsequence in the given string. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"A group of people is standing in a circle, playing a game of elimination. They are numbered sequentially from 1 to N. Starting from the first person, they count off up to a given number K, and the Kth person is eliminated from the circle. The counting resumes from the next person immediately after the eliminated one. This process continues until only one person remains standing. Write a function `findLastStanding(N, K)` that takes in two integers: - `N`: the total number of people in the circle (1 <= N <= 1000) - `K`: the elimination count (1 <= K <= 1000) Your function should return the position (1-indexed) of the last person standing in this elimination game. For example: ``` findLastStanding(7, 3) => 4 /* Explanation: The elimination order is [3, 6, 2, 7, 5, 1], and person in position 4 is the last one remaining. */ findLastStanding(10, 2) => 5 /* Explanation: The elimination order is [2, 4, 6, 8, 10, 3, 7, 1, 9], and person in position 5 is the last one remaining. */ ```","solution":"def findLastStanding(N, K): Returns the position (1-indexed) of the last person standing in the elimination game. Parameters: N (int): Total number of people in the circle. K (int): The elimination count. Returns: int: Position of the last person standing. people = list(range(1, N+1)) index = 0 while len(people) > 1: index = (index + K - 1) % len(people) people.pop(index) return people[0]"},{"question":"John loves working with strings, especially symmetrical ones. He\'s particularly interested in finding the longest palindromic substring within a given string. A palindromic string is one that reads the same backward as forward. He wonders if there\'s a way to efficiently find this substring for any given input. Given a string s, help John find the longest palindromic substring in s. -----Input----- The input consists of: - One line with a string s (1 leq |s| leq 10^5), consisting of lowercase English letters. -----Output----- Output the longest palindromic substring in s. If there are multiple substrings of the same length, output the one that appears first. -----Examples----- Sample Input: babad Sample Output: bab Sample Input: cbbd Sample Output: bb Sample Input: aacabdkacaa Sample Output: aca","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. def expand_around_center(s, left, right): Expand around the center to find the longest palindromic substring. while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Check for odd-length palindromes odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Check for even-length palindromes even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"Given an array of strings, you are required to group the anagrams together. The anagrams are strings that can be formed by rearranging the letters of another string using all the original letters exactly once. For example: \\"listen\\" and \\"silent\\" are anagrams of each other. Your task is to write a function `groupAnagrams` that takes an array of strings as input and returns a list of lists where each list contains a group of anagrams. # Input: - An array of strings `strs` of length `n` where 1 ≤ n ≤ 1000. # Output: - A list of lists where each sublist contains anagrams grouped together. # Example: Input: ``` strs = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Output: ``` [[\\"eat\\",\\"tea\\",\\"ate\\"], [\\"tan\\",\\"nat\\"], [\\"bat\\"]] ``` Explanation: - \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other. - \\"tan\\" and \\"nat\\" are anagrams of each other. - \\"bat\\" has no anagram in the list. # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `groupAnagrams` which takes the array of strings `strs` as input and returns a list of lists where each sublist contains a group of anagrams. # Expected Time Complexity: O(n*k*log(k)), where k is the maximum length of a string in `strs` # Expected Auxiliary Space: O(n*k) # Constraints: - 1 ≤ n ≤ 1000 - 1 ≤ length of each string ≤ 100 Write the function as follows: ```python def groupAnagrams(strs): # Your code here ``` # Note: - Output order of the inner lists and the strings within those lists does not matter. - Ensure that the solution is efficient and takes care of edge cases and large inputs.","solution":"from collections import defaultdict def groupAnagrams(strs): Groups anagrams together from the input list of strings. Args: strs (list of str): List of strings which needs to be grouped into anagrams. Returns: List of lists: A list where each sublist contains anagrams grouped together. # Dictionary to map sorted character tuple to list of anagrams anagram_map = defaultdict(list) for string in strs: # Sort the string and use it as a key sorted_str = tuple(sorted(string)) anagram_map[sorted_str].append(string) # Return the grouped anagrams as a list of lists return list(anagram_map.values())"},{"question":"Write a function that takes a list of integers and returns the sum of all unique elements in the list. Elements are considered unique if they appear exactly once in the list. For example, for a given list `arr`: [4, 5, 7, 5, 4, 8] The unique elements are `7` and `8`. So, the function should return: sumOfUnique([4, 5, 7, 5, 4, 8]) => 15 If there are no unique elements, the function should return `0`. For example, for the list: [1, 1, 2, 2, 3, 3] All elements are repeated, hence the function should return `0`. You can assume that the list will only contain integers.","solution":"def sumOfUnique(arr): Returns the sum of all unique elements in the list. Parameters: arr (list): A list of integers Returns: int: Sum of unique elements in the list from collections import Counter element_count = Counter(arr) unique_elements = [k for k, v in element_count.items() if v == 1] return sum(unique_elements)"},{"question":"In a small town, there is a festival every year where people decorate their houses with lights. The houses are arranged in a straight line, each at different positions. The town has provided a single electric outlet in the middle of the street, located at position 0. Each house needs to be connected to this outlet with a unique cable that is long enough to cover the distance from the outlet to the house. However, due to budget constraints, the length of each cable must be minimized. Given the positions of the houses, you need to determine the total minimum length of cables required to connect all houses to the outlet at position 0. -----Input:----- - The first line contains an integer n, the number of houses in the town. - The second line contains n integers, representing the positions of the houses along the street. -----Output:----- - The total minimum length of cables required to connect all houses to the outlet at position 0. -----Constraints:----- - 1 leq n leq 1000 - -10^9 leq house _i leq 10^9 -----Sample Input:----- 4 -5 3 -2 7 -----Sample Output:----- 17 -----EXPLANATION:----- The cables required for each house are: - From position -5 to 0: 5 units of cable - From position 3 to 0: 3 units of cable - From position -2 to 0: 2 units of cable - From position 7 to 0: 7 units of cable So, the total minimum cable length required is 5 + 3 + 2 + 7 = 17 units.","solution":"def total_minimum_cable_length(n, positions): Given the positions of the houses, returns the total minimum length of cables required to connect all houses to the electric outlet at position 0. return sum(abs(position) for position in positions)"},{"question":"Lisa has a string s composed of lowercase English letters. Her task is to determine the lexicographically smallest string she can obtain by performing a series of operations. In each operation, she can select a character and remove it from the string. For example, if Lisa has the string \\"bac\\", she can remove the character \'b\' to form \\"ac\\", which is lexicographically smaller than the original string. If she removes \'a\' instead, the new string will be \\"bc\\", which is not the smallest string she can form. Your task is to write a function that determines the lexicographically smallest string Lisa can obtain by performing zero or more such operations. Input The input consists of a single string s. The length of s is from 1 to 100 characters, inclusive. Each character in s is a lowercase English letter (\'a\' to \'z\'). Output Print the lexicographically smallest string Lisa can obtain. Examples Input bac Output ac Input abc Output abc Input cab Output ab Note In the first sample, \\"ac\\" is the lexicographically smallest string that can be obtained by removing the \'b\'. In the second sample, removing no characters yields the lexicographically smallest string \\"abc\\". In the third sample, removing the \'c\' yields the lexicographically smallest string \\"ab\\".","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by performing zero or more operations where each consists of removing one character from the string. if not s: return s min_char_index = 0 for i in range(1, len(s)): if s[i] < s[min_char_index]: min_char_index = i # Return the string with the smallest character at the starting point return s[min_char_index:]"},{"question":"You are given a matrix of dimensions m x n. Your task is to write a function rotateMatrix() that takes this matrix as input and rotates it by 90 degrees in a clockwise direction. You need to complete the function such that the input matrix is modified in place. Example 1: Input: Matrix: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Example 2: Input: Matrix: [ [5, 1, 9, 11], [2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] Output: [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ] Your Task: Since this is a function problem, you do not need to take any input. Complete the function rotateMatrix(), which takes a matrix as input parameter and rotates the matrix by 90 degrees clockwise in place. Expected Time Complexity: O(m*n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ m, n ≤ 100","solution":"def rotateMatrix(matrix): Rotates the input matrix in place by 90 degrees clockwise. if not matrix: return m, n = len(matrix), len(matrix[0]) # Transpose the matrix (rows become columns) for i in range(m): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(m): matrix[i].reverse()"},{"question":"A string is said to be a _suffix of another string_ if it can be derived from that string by deleting some (possibly none) of its preceding characters. For example, \\"ple\\" is a suffix of \\"example\\", whereas \\"mpl\\" is not. Given a string and a list of suffix strings, we want to determine which suffixes in the list are genuine suffixes of the given string. Write a program to take a string and a list of suffix strings as input and output a list of booleans indicating if each suffix in the list is a true suffix of the given string. -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 10^5) — the string from which we want to determine suffixes. The second line contains an integer n (1 ≤ n ≤ 1000) — the number of suffixes to check. Each of the next n lines contains a single string (1 ≤ |suffix| ≤ 10^5) — a suffix that we want to check. -----Output----- Output n boolean values (either \\"True\\" or \\"False\\") on separate lines, indicating whether each suffix in the list is a true suffix of the string s. -----Examples----- Input example 3 ple ample exam Output True True False Input 123456789 4 6789 56789 456789 56788 Output True True True False -----Note----- A true suffix means the given suffix should match the end portion of the string exactly. For example, \\"6789\\" is a suffix of \\"123456789\\" while \\"56788\\" is not. If you do not know what is a suffix, please read: https://en.wikipedia.org/wiki/Suffix","solution":"def check_suffixes(s, suffixes): Determines which suffixes in the list are genuine suffixes of the given string s. Args: s: The original string from which we want to determine suffixes. suffixes: A list of strings representing the suffixes to check. Returns: A list of booleans indicating if each suffix in the list is a true suffix of s. return [s.endswith(suffix) for suffix in suffixes]"},{"question":"Given a sequence of positive integers B of length K and a positive integer D . You can perform the following operation an unlimited number of times: choose two indices p and q ( 0 leq p, q leq K-1 ) and swap B_p with B_q if the absolute difference between B_p and B_q is less than or equal to D . Determine the maximum possible sum of the resulting sequence when the following condition is satisfied: for every i ( 0 leq i leq K-2 ), B_i leq B_{i+1} . Output the maximum sum and a line feed at the end. Example Input 4 3 1 5 2 4 Output 12","solution":"def max_sum_sorted_seq(K, D, B): Given a sequence of positive integers B of length K and a positive integer D, sorts the sequence minimizing the condition on D and returns the sum of the resulting sequence. :param K: Length of the sequence :param D: Maximum allowed absolute difference for swaps :param B: List of integers representing the sequence :return: Integer representing the maximum sum of the resulting sorted sequence # Sort the sequence to comply with the non-decreasing order requirement B_sorted = sorted(B) # Calculate the sum of the sorted sequence max_sum = sum(B_sorted) return max_sum"},{"question":"You are given a string consisting of lowercase English letters. You can perform multiple operations on this string, and in each operation, you can remove a substring of the form \\"ab\\" or \\"ba\\". You aim to transform the string into the shortest possible length by applying these operations. For example, if the string is \\"abac\\", you can perform the following operations: 1. Remove \\"ab\\" -> \\"ac\\" 2. No more operations can be applied. The result here would be \\"ac\\". The task is to determine the length of the shortest possible string you can obtain by applying these operations. Implement a function that computes the length of the shortest possible string. ---Input--- - A single line containing a string s (1 le |s| le 1000) consisting of lowercase English letters. ---Output--- - Print a single integer, the length of the shortest possible string after applying the operations. ---Examples--- Input abac Output 2 Input aabb Output 0 Input abcba Output 1","solution":"def shortest_length(s): Compute the length of the shortest possible string after repeatedly removing substrings \\"ab\\" or \\"ba\\". Parameters: s (str): Input string consisting of lowercase English letters. Returns: int: Length of the shortest possible string. stack = [] for char in s: if stack and ((stack[-1] == \'a\' and char == \'b\') or (stack[-1] == \'b\' and char == \'a\')): stack.pop() else: stack.append(char) return len(stack)"},{"question":"Elsa loves snowflakes and winter. She has an array of numbers representing snowflake sizes and wishes to create exactly two snowflake decorations by partitioning these numbers into two subsets such that the absolute difference in their total size is minimized. Input: Input contains an integer N which is the number of snowflakes followed by N integers, each representing the size of a single snowflake. Output: The minimal absolute difference of the total size between the two subsets. Constraints: 1 ≤ N ≤ 20 1 ≤ Size of each snowflake ≤ 100 SAMPLE INPUT 4 3 1 4 2 SAMPLE OUTPUT 0 Explanation: The array can be partitioned into [3, 1] and [4, 2], where the sum of both subsets is 4, and the absolute difference is 0.","solution":"def min_subset_difference(n, sizes): total_sum = sum(sizes) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for size in sizes: for j in range(half_sum, size - 1, -1): dp[j] = max(dp[j], dp[j - size] + size) largest_sum_partition1 = dp[half_sum] largest_sum_partition2 = total_sum - largest_sum_partition1 return abs(largest_sum_partition1 - largest_sum_partition2)"},{"question":"Shoemaker has been receiving orders for custom shoes. He needs to keep track of the order in which each shoe is completed and delivered. Each order is represented by an integer which is the unique order ID. He wants you to implement a system that can keep track of the sequence of orders. The system should support the following operations: 1. \\"place_order x\\" - Add order x to the order queue. 2. \\"process_order\\" - Process the order which is currently at the front of the queue and remove it from the queue. 3. \\"peek_order\\" - Print the order which is currently at the front of the queue without removing it. 4. \\"count_orders\\" - Print the number of orders currently in the queue. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) - the number of operations. The following n lines contain one of the four operations described above. -----Output----- For each \\"peek_order\\" and \\"count_orders\\" operation, print the appropriate output on a new line. -----Example----- Input: 7 place_order 5 place_order 10 peek_order process_order peek_order count_orders process_order Output: 5 10 1","solution":"from collections import deque def shoe_order_system(operations): queue = deque() results = [] for operation in operations: if operation.startswith(\\"place_order\\"): _, x = operation.split() queue.append(int(x)) elif operation == \\"process_order\\": if queue: queue.popleft() elif operation == \\"peek_order\\": if queue: results.append(queue[0]) elif operation == \\"count_orders\\": results.append(len(queue)) return results # Read input operations def process_input(input_lines): n = int(input_lines[0]) operations = input_lines[1: n + 1] return shoe_order_system(operations)"},{"question":"Write a program that identifies and prints the day of the week for given integer inputs that represent days since the start of the year, where January 1st is a Monday. -----Constraints----- - The input integer, N, follows the constraint: 1 leq N leq 365. -----Input----- The input is given from Standard Input in the following format: N -----Output----- Print the day of the week corresponding to the N-th day (case-sensitive). The days of the week should be printed as: - \\"Monday\\" - \\"Tuesday\\" - \\"Wednesday\\" - \\"Thursday\\" - \\"Friday\\" - \\"Saturday\\" - \\"Sunday\\" -----Sample Input----- 3 -----Sample Output----- Wednesday","solution":"def day_of_week(N): Returns the day of the week for the N-th day of the year. Parameters: N (int): The N-th day of the year (1 <= N <= 365) Returns: str: The day of the week. days = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] return days[(N - 1) % 7]"},{"question":"Leha and Noora are planning a photography tour and want to visit various scenic spots. They have a drone that requires a set amount of battery power to take high-quality photos. Each scenic spot requires a specific amount of battery power to photograph, and recharging the drone can only be done at specific intervals during the trip. Given the battery capacities and the recharging schedule, help them maximize the number of scenic spots they can cover. There are `n` available scenic spots, and each spot `i` is characterized by the battery power required to photograph it, denoted by `bi`. The drone starts with a fully charged battery of capacity `C` and can only recharge at designated points during the trip. Your task is to determine the maximum number of scenic spots they can photograph without the battery running out, considering the given recharge intervals. **Input:** - The first line contains two integers `n` (1 ≤ n ≤ 3·10^5) and `C` (1 ≤ C ≤ 10^9) denoting the number of scenic spots and the initial battery capacity respectively. - The second line contains `n` integers `b1, b2, ..., bn` (1 ≤ bi ≤ 10^9) where `bi` represents the battery power required to photograph the i-th spot. - The third line contains `m` integers `r1, r2, ..., rm` (1 ≤ m ≤ 10^5) where `ri` represents the index of the scenic spot after which a battery recharging is scheduled. The battery will be fully recharged to `C` at each of these indices. **Output:** - Print a single integer denoting the maximum number of scenic spots Leha and Noora can photograph. **Example:** **Input:** ``` 6 5 1 2 3 2 4 1 2 5 ``` **Output:** ``` 4 ``` **Explanation:** Leha and Noora can photograph the 1st (battery: 4), 2nd (battery: 2), and 3rd (battery: -1, but recharge at 2nd spot), then recharge to full battery. After recharging, they can photograph the 5th (battery: 1 since they recharge to full at 5th), and 6th spots, making the total spots visited is 4.","solution":"def max_photos(n, C, battery_powers, recharge_points): recharge_set = set(recharge_points) battery = C count = 0 for i, power in enumerate(battery_powers): if battery >= power: battery -= power count += 1 else: break if (i + 1) in recharge_set: battery = C # Recharge to full battery return count"},{"question":"Lara is a big fan of patterns and sequences. She has discovered a sequence where the i-th term is given by the formula: T(i) = T(i-1) + T(i-2) + T(i-3) for i > 2, with initial terms T(0) = 1, T(1) = 1, and T(2) = 2. Now, Lara wants to generate the N-th term of this sequence. Your task is to write a program that takes an integer N and computes the N-th term in the sequence. -----Input----- The input consists of a single integer N (0 leq N leq 20), indicating the position in the sequence Lara is interested in. -----Output----- Output the N-th term of the sequence. -----Examples----- Sample Input: 4 Sample Output: 4 Sample Input: 7 Sample Output: 24","solution":"def find_nth_term(N): Returns the N-th term of the sequence defined by: T(i) = T(i-1) + T(i-2) + T(i-3) for i > 2, with initial terms T(0) = 1, T(1) = 1, and T(2) = 2. if N == 0: return 1 elif N == 1: return 1 elif N == 2: return 2 T = [1, 1, 2] for i in range(3, N + 1): T.append(T[i-1] + T[i-2] + T[i-3]) return T[N]"},{"question":"You are given a city consisting of a grid with R rows and C columns. Each cell in the grid can either be land or water. Land cells are represented as \'1\' and water cells are represented as \'0\'. Connected land cells (vertically or horizontally) form an island. Your task is to find the maximum area of any island in the grid. An island is considered an \\"island\\" if it is formed by connecting adjacent land cells horizontally or vertically. The area of an island is the number of land cells in it. Input The first line contains two integers R and C — the number of rows and columns in the grid. Each of the next R lines contains C characters (\'1\' or \'0\') representing the grid cells. * 1 ≤ R, C ≤ 50 Output Output a single integer — the maximum area of any island. Examples Input 4 5 11000 11000 00100 00011 Output 4 Input 3 3 111 010 111 Output 7 Explanation In the first example, there are two islands. The first island is formed by the top-left four \'1\'s with area = 4. The second island is in the bottom-right corner with area = 2. Thus, the maximum area is 4. In the second example, there is a single island that covers almost the entire grid with area = 7.","solution":"def max_area_of_island(grid): Returns the maximum area of any island in the grid. if not grid: return 0 def dfs(grid, row, col): if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]) or grid[row][col] == \'0\': return 0 grid[row][col] = \'0\' # Mark as visited area = 1 # Count the current cell # Move in all four directions area += dfs(grid, row + 1, col) area += dfs(grid, row - 1, col) area += dfs(grid, row, col + 1) area += dfs(grid, row, col - 1) return area max_area = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': max_area = max(max_area, dfs(grid, i, j)) return max_area"},{"question":"A string is called balanced if the number of opening brackets is equal to the number of closing brackets in it, and moreover, at no point in the string does the number of closing brackets exceed the number of opening brackets, when scanned from left to right. For example, the string \\"()()\\" is balanced, while the strings \\")(()\\" and \\"(()\\" are not. You are given a string consisting of opening brackets \'(\' and closing brackets \')\'. You need to find the length of the longest balanced substring within it. Input: - The input consists of a single string s (1 ≤ |s| ≤ 10^6) consisting of characters \'(\' and \')\'. Output: - Output the length of the longest balanced substring. Examples: Input: ``` (()() ``` Output: ``` 4 ``` Input: ``` )((()))( ``` Output: ``` 6 ``` Note: In the first example, the longest balanced substring is \\"()()\\", which has length 4. In the second example, the longest balanced substring is \\"(())()\\", which has length 6.","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring in the given string of brackets. max_len = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: stack.append(i) return max_len"},{"question":"You\'re given an undirected weighted graph with n nodes and m edges. Each edge has a weight associated with it. The graph may contain cycles. Write a program to find the weight of the maximum spanning tree of the graph. A maximum spanning tree is a spanning tree having maximum total edge weight. -----Input----- The first line of the input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000). Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 1000), defining an edge of the graph where u and v are the nodes connected by this edge and w is the weight of the edge. -----Output----- Print the total weight of the maximum spanning tree of the graph. -----Examples----- Input 4 5 1 2 3 1 3 2 2 3 4 2 4 1 3 4 5 Output 12","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def max_spanning_tree(n, edges): edges = sorted(edges, key=lambda item: item[2], reverse=True) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = [] e = 0 i = 0 while e < n - 1 and i < len(edges): u, v, w = edges[i] i = i + 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e = e + 1 result.append((u, v, w)) union(parent, rank, x, y) total_weight = sum([w for u, v, w in result]) return total_weight def read_input_and_calculate_mst(input_lines): input_data = input_lines.strip().split(\'n\') n, m = map(int, input_data[0].split()) edges = [] for i in range(1, m + 1): u, v, w = map(int, input_data[i].split()) edges.append((u, v, w)) return max_spanning_tree(n, edges)"},{"question":"Once upon a time in a kingdom far away, there was a grand library filled with ancient scrolls. The librarian wanted to index these scrolls for future reference. Each scroll is identified by a unique code which is a positive integer. The librarian decided to sort these scrolls in a non-decreasing order based on their codes. However, the librarian also wants to maintain a record of the original positions of these scrolls in case there\'s a need to retrieve them quickly. Your task is to write a program that takes as input the codes of the scrolls in the order they are initially stored and outputs a record of the original positions after the scrolls have been sorted. -----Input:----- The first line contains a single integer N indicating the number of scrolls. The next N lines (line 2,...,N+1) describe the codes of these N scrolls. Line i+1 contains a single positive integer indicating the code of the i^{th} scroll. -----Output:----- Your output should consist of N lines. Line i should contain the 1-based original position of the i^{th} scroll in the sorted order. -----Constraints:----- - 1 leq N leq 50000. - No two scrolls have the same code. - You may also assume that in 40 % of the inputs 1 leq N leq 10000. -----Sample Input----- 5 42 16 23 4 8 -----Sample Output----- 4 5 2 3 1","solution":"def sort_scrolls_with_positions(N, scroll_codes): # Pair the scroll codes with their original positions indexed_scrolls = [(scroll_codes[i], i+1) for i in range(N)] # Sort the scrolls based on their codes indexed_scrolls.sort() # Extract the original positions in the new sorted order sorted_positions = [pos for code, pos in indexed_scrolls] return sorted_positions # Function to handle the input and output format def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) scroll_codes = [int(data[i+1]) for i in range(N)] sorted_positions = sort_scrolls_with_positions(N, scroll_codes) for pos in sorted_positions: print(pos)"},{"question":"Sam is working on an image processing project where he needs to perform a series of transformations on an image represented by a matrix of integers. Each cell in the matrix represents a pixel\'s brightness level. Sam needs to rotate the matrix 90 degrees clockwise. He needs your help to write a function that performs this operation. Your task is to write a function that takes an `n x n` matrix of integers and returns a new matrix that is rotated 90 degrees clockwise. -----Function Signature----- ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: ``` -----Input----- - `matrix`: a 2D list of integers, where `2 <= n <= 100` -----Output----- - A 2D list of integers representing the rotated matrix -----Examples----- Input ```python [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` Output ```python [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Input ```python [[10, 20], [30, 40]] ``` Output ```python [[30, 10], [40, 20]] ``` -----Note----- In the first example, the matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` When rotated 90 degrees clockwise, it becomes: ``` 7 4 1 8 5 2 9 6 3 ``` In the second example, the matrix is: ``` 10 20 30 40 ``` When rotated 90 degrees clockwise, it becomes: ``` 30 10 40 20 ```","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates an n x n matrix 90 degrees clockwise. n = len(matrix) # Create a new n x n matrix rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"Given an integer N, you need to generate an NxN matrix filled with positive integers in a specific spiral order. The matrix should start with the number 1 in the top left corner and spiral down and inward in a clockwise direction. ------ Input ------ The input consists of a single test case: The first line contains an integer N (1 ≤ N ≤ 100), denoting the size of the NxN matrix. ------ Output ------ Output the generated NxN matrix, where each row of the matrix is printed on a new line. Each integer in the row should be separated by a space. ----- Sample Input 1 ------ 3 ----- Sample Output 1 ------ 1 2 3 8 9 4 7 6 5 ----- Sample Input 2 ------ 4 ----- Sample Output 2 ------ 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7","solution":"def generate_spiral_matrix(n): Generates an NxN matrix filled with integers in spiral order. matrix = [[0] * n for _ in range(n)] value = 1 top, bottom, left, right = 0, n-1, 0, n-1 while top <= bottom and left <= right: for i in range(left, right + 1): matrix[top][i] = value value += 1 top += 1 for i in range(top, bottom + 1): matrix[i][right] = value value += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = value value += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = value value += 1 left += 1 return matrix"},{"question":"Little Shyam loves to play with his toy blocks. He has N blocks which are arranged in a straight line. Each block can be of different color and is represented by an integer. Shyam wants to find all the distinct subarrays of the blocks such that the subarray has exactly K different colors. A subarray is a contiguous portion of an array. Your task is to help Shyam find the number of such subarrays. Input: - The first line contains two integers N and K. - The second line contains N integers representing the colors of the blocks. Output: - Print the number of distinct subarrays with exactly K different colors. Constraints: 1 ≤ N ≤ 100000 1 ≤ K ≤ 100 1 ≤ Color of each block ≤ 100000 SAMPLE INPUT 5 2 1 2 1 2 3 SAMPLE OUTPUT 7 Explanation: The subarrays with exactly 2 different colors are: - [1, 2] - [2, 1] - [1, 2] - [2, 1, 2] - [1, 2, 3] - [2, 3] - [1, 2] So, the total number of subarrays with exactly 2 different colors is 7.","solution":"def subarrays_with_k_distinct(N, K, colors): from collections import defaultdict def at_most_k_distinct(k): count = defaultdict(int) left = 0 ans = 0 for right in range(N): if count[colors[right]] == 0: k -= 1 count[colors[right]] += 1 while k < 0: count[colors[left]] -= 1 if count[colors[left]] == 0: k += 1 left += 1 ans += right - left + 1 return ans return at_most_k_distinct(K) - at_most_k_distinct(K - 1)"},{"question":"Alice is conducting a coding exam for her students, and she wants to generate a unique alphanumeric code for each student such that all of them are cryptographically secure and have the same length. To achieve this, she will use a hash function from the hashlib library in Python. Each student has a unique identifier which is an integer between 1 and n (inclusive), where n is the total number of students. Alice has decided to use the SHA-256 hash function, and she will calculate the hash for each student\'s identifier to generate the code. The length of the code will be determined by the first k characters of the SHA-256 hexadecimal hash digest of the student\'s identifier. Alice will concatenate a secret keyword with each student\'s identifier before computing the hash to make the generated code more secure. Write a program that reads the number of students, the secret keyword, and the length of the required code. The program should output the unique alphanumeric codes for all students, each on a new line. # Input The input is given in the following format: > n keyword k Where: - n (1 ≤ n ≤ 10^6) is the total number of students. - keyword is a non-empty string containing only lowercase English letters, of length between 1 and 50. - k (1 ≤ k ≤ 64) is the length of the required code. # Output Output n lines, each containing the unique alphanumeric code for students from 1 to n in a sorted order. # Example Input ``` 3 secretcode 8 ``` Output ``` e74c037c 5b06882b b1b2a2ba ``` Explanation For this example, assuming the keyword is \\"secretcode\\": - For student 1, the identifier is \\"1\\", and the concatenation is \\"secretcode1\\". The SHA-256 hash of this string is calculated, and the first 8 characters of the hexadecimal digest are taken, which is \\"e74c037c\\". - For student 2, the identifier is \\"2\\", and the concatenation is \\"secretcode2\\". The SHA-256 hash of this string is \\"5b06882b\\". - For student 3, the identifier is \\"3\\", and the concatenation is \\"secretcode3\\". The SHA-256 hash of this string is \\"b1b2a2ba\\". The program should output these values in the sorted order of student identifiers.","solution":"import hashlib def generate_unique_codes(n, keyword, k): Generate unique alphanumeric codes for students given a keyword and desired code length. :param n: Total number of students. :param keyword: Secret keyword to be concatenated with student ID before hashing. :param k: Length of the required alphanumeric code. :return: A list of unique alphanumeric codes. codes = [] for i in range(1, n + 1): # Concatenate keyword with student\'s identifier concatenated_str = f\\"{keyword}{i}\\" # Calculate the SHA-256 hash of the concatenated string hash_digest = hashlib.sha256(concatenated_str.encode()).hexdigest() # Take the first k characters of the hash digest as the unique code unique_code = hash_digest[:k] codes.append(unique_code) return codes"},{"question":"You are given a list of n intervals, where each interval is represented as [start_i, end_i] and may overlap with other intervals. Your task is to merge all overlapping intervals and return the resulting list of merged intervals in sorted order. An interval [a, b] is said to overlap with another interval [c, d] if b geq c and a leq d. The resulting list of merged intervals should be in ascending order based on the start of each interval. -----Input----- The first line of input contains a single integer n (1 le n le 1000), which is the number of intervals. The next n lines each contain two integers start_i and end_i (0 le start_i < end_i le 10^9), representing the start and end of the i-th interval. -----Output----- Print the list of merged intervals. Each merged interval should be on a new line, represented by two integers: the start and the end of the interval. -----Examples----- Input 6 1 3 2 6 8 10 15 18 16 17 17 20 Output 1 6 8 10 15 20 Input 4 5 10 1 4 6 8 2 3 Output 1 4 5 10 Input 2 0 1 1 2 Output 0 2 -----Note----- In the first example, the intervals [1, 3] and [2, 6] overlap and merge into [1, 6]. Similarly, the intervals [15, 18], [16, 17], and [17, 20] overlap and merge into [15, 20]. In the second example, the intervals [5, 10], and [6, 8] overlap and merge into [5, 10]. In the third example, the intervals [0, 1] and [1, 2] overlap and are merged into [0, 2].","solution":"def merge_intervals(intervals): Merges and returns the list of overlapping intervals. Args: intervals (list): List of intervals [start, end]. Returns: list: List of merged intervals. if not intervals: return [] # Sort the intervals based on the starting times intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or no overlap, append the interval to merged if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # If there is overlap, merge the intervals merged[-1][1] = max(merged[-1][1], interval[1]) return merged # Helper function to format the output def format_intervals(intervals): Formats intervals for output. Args: intervals (list): List of intervals [start, end]. Returns: str: Formatted string of intervals, each in a new line. return \'n\'.join(f\\"{start} {end}\\" for start, end in intervals)"},{"question":"There is a classic problem in combinatorics called Pascal\'s Triangle. The rows of Pascal\'s Triangle are generated iteratively, starting with row 0 as [1]. Each element of a row is calculated by adding the two elements directly above it from the previous row. If an element does not have a direct element from above (i.e., it is on the boundary of the triangle), consider that element as 0. Given an integer N, your task is to generate the first N rows of Pascal\'s Triangle. ------ Input ------ The first line contains a single integer N (1 ≤ N ≤ 30), representing the number of rows to generate. ------ Output ------ Output the first N rows of Pascal\'s Triangle. Each row should appear on a new line, with its elements separated by spaces. ------ Constraints ------ 1 ≤ N ≤ 30 ------ Sample Input 1 ------ 5 ------ Sample Output 1 ------ 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ------ Explanation ------ Example case 1: The first 5 rows of Pascal\'s Triangle are: - Row 0: [1] - Row 1: [1, 1] - Row 2: [1, 2, 1] - Row 3: [1, 3, 3, 1] - Row 4: [1, 4, 6, 4, 1]","solution":"def generate_pascals_triangle(n): Generates the first N rows of Pascal\'s Triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle def print_pascals_triangle(triangle): Prints Pascal\'s Triangle row by row. for row in triangle: print(\\" \\".join(map(str, row)))"},{"question":"A girl named Priya enjoys working with strings and patterns. She is particularly interested in finding unique substrings within a given string that does not contain any repeating characters. She decided to call the length of the longest such unique substring as the Unique Length of the string. Your task is to write a function that computes this value for a given string. Input The first line of input contains an integer n (1 ≤ n ≤ 100000), the length of the string. The second line contains a string s of length n, consisting of only lowercase English letters. Output Output a single integer which is the Unique Length of the input string. SAMPLE INPUT 1 8 ababcabc SAMPLE OUTPUT 1 3 Explanation The longest substrings without repeating characters in \\"ababcabc\\" are \\"abc\\" and \\"bca\\", both of which have a length of 3. SAMPLE INPUT 2 10 abcdeabcdf SAMPLE OUTPUT 2 6 Explanation The longest substring without repeating characters in \\"abcdeabcdf\\" is \\"abcdef\\", which has a length of 6. SAMPLE INPUT 3 5 aaaaa SAMPLE OUTPUT 3 1 Explanation The longest substring without repeating characters in \\"aaaaa\\" is \\"a\\", which has a length of 1.","solution":"def unique_length(n, s): Returns the length of the longest substring without repeating characters. max_len = 0 start = 0 seen = {} for end in range(n): if s[end] in seen: start = max(start, seen[s[end]] + 1) seen[s[end]] = end max_len = max(max_len, end - start + 1) return max_len # Example usage: # n = 8 # s = \\"ababcabc\\" # print(unique_length(n, s)) # Output: 3"},{"question":"John is working on an image processing system that involves manipulating pixel brightness levels. Each pixel brightness level is an integer between 0 and 255 inclusive. John wants to adjust the brightness of each pixel in the image based on certain rules. Given an n x m matrix representing the pixel brightness levels of an image, John needs to apply the following rules: 1. If a brightness level is even, multiply it by 2. 2. If a brightness level is odd, subtract 1 from it. Your task is to help John adjust the brightness levels of the pixels according to the rules provided. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the pixel matrix. The next n lines each contain m integers separated by a space, representing the brightness levels of the pixels in the matrix. Each integer is guaranteed to be between 0 and 255 inclusive. -----Output----- Print the n x m matrix after adjusting the brightness levels according to the rules provided. -----Examples----- Input 3 3 12 11 50 255 100 75 0 45 210 Output 24 10 100 254 200 74 0 44 420 Input 2 2 1 2 3 4 Output 0 4 2 8 Input 1 5 10 21 30 41 50 Output 20 20 60 40 100 -----Note----- In the first example, the initial pixel matrix is: 12 11 50 255 100 75 0 45 210 Applying the rules: - 12 is even, hence 12 * 2 = 24. - 11 is odd, hence 11 - 1 = 10. - 50 is even, hence 50 * 2 = 100. - 255 is odd, hence 255 - 1 = 254. - 100 is even, hence 100 * 2 = 200. - 75 is odd, hence 75 - 1 = 74. - 0 is even, hence 0 * 2 = 0. - 45 is odd, hence 45 - 1 = 44. - 210 is even, hence 210 * 2 = 420. Therefore, the output matrix is: 24 10 100 254 200 74 0 44 420","solution":"def adjust_brightness(n, m, matrix): Adjusts the brightness levels of pixels in the image matrix. Parameters: n (int): number of rows in the matrix m (int): number of columns in the matrix matrix (list of list of int): the pixel brightness levels Returns: list of list of int: the adjusted brightness levels adjusted_matrix = [] for i in range(n): adjusted_row = [] for j in range(m): pixel = matrix[i][j] if pixel % 2 == 0: adjusted_pixel = pixel * 2 else: adjusted_pixel = pixel - 1 adjusted_row.append(adjusted_pixel) adjusted_matrix.append(adjusted_row) return adjusted_matrix"},{"question":"# Problem Context You are tasked with implementing an algorithm to determine the minimum number of operations required to transform one string into another. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character This problem is typically known as the \\"Edit Distance\\" problem. Given two strings, s1 and s2, write a function that computes the minimum number of edits (operations) needed to transform s1 into s2. **Example:** ```python def edit_distance(s1, s2): # your implementation here print(edit_distance(\\"kitten\\", \\"sitting\\")) # Output: 3 print(edit_distance(\\"flaw\\", \\"lawn\\")) # Output: 2 ``` **Explanation:** To transform \\"kitten\\" to \\"sitting\\": 1. Replace \'k\' with \'s\' (kitten -> sitten) 2. Replace \'e\' with \'i\' (sitten -> sittin) 3. Insert \'g\' at the end (sittin -> sitting) To transform \\"flaw\\" to \\"lawn\\": 1. Replace \'f\' with \'l\' (flaw -> llaw) 2. Delete \'a\' and insert \'n\' (llaw -> lawn) Implement the `edit_distance` function using dynamic programming to efficiently compute the solution.","solution":"def edit_distance(s1, s2): Compute the minimum number of operations required to transform s1 into s2. The allowed operations are insert a character, delete a character, or replace a character. Parameters: s1 (str): The source string. s2 (str): The target string. Returns: int: The minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a (m+1) x (n+1) matrix to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for i in range(m + 1): dp[i][0] = i # minimum operations to convert s1[0:i] to empty string is i (all deletions) for j in range(n + 1): dp[0][j] = j # minimum operations to convert empty string to s2[0:j] is j (all insertions) # Fill the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # deletion dp[i][j - 1], # insertion dp[i - 1][j - 1] # replacement ) return dp[m][n] # Example usage print(edit_distance(\\"kitten\\", \\"sitting\\")) # Output: 3 print(edit_distance(\\"flaw\\", \\"lawn\\")) # Output: 2"},{"question":"Alice loves painting, and she has a row of N canvases, each initially painted with a certain color. She wants to repaint them such that each pair of adjacent canvases has different colors. She can repaint a canvas with any color in a single move. Help Alice determine the minimum number of moves required to repaint the canvases in a desirable manner. Input Format First line contains an integer T denoting the number of testcases. T testcases follow. Each testcase has 2 lines. First line of each testcase contains an integer N denoting the number of canvases. Second line contains N space-separated integers representing the initial colors of the canvases, where each color is represented by a positive integer. Output Format T lines, each containing the minimum number of moves needed for the respective testcase. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10000 1 ≤ color of each canvas ≤ 1000 SAMPLE INPUT 2 4 1 1 3 3 5 1 2 2 3 3 SAMPLE OUTPUT 2 2 Explanation 1st case: Alice can repaint the second canvas with color 2 and the fourth canvas with color 4. 1 1 3 3 -> 1 2 3 4 (2 moves) 2nd case: Alice can repaint the third canvas with color 1 and the fifth canvas with color 4. 1 2 2 3 3 -> 1 2 1 3 4 (2 moves)","solution":"def min_moves_to_repaint(T, test_cases): results = [] for i in range(T): N, canvases = test_cases[i] moves = 0 for j in range(1, N): if canvases[j] == canvases[j - 1]: # choose a new color different from the current and previous one (this can be done arbitrarily) canvases[j] = (canvases[j] % 1000) + 1 if j+1 < N and canvases[j] == canvases[j+1]: canvases[j] = (canvases[j] + 1) % 1000 + 1 moves += 1 results.append(moves) return results def process_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) canvases = list(map(int, lines[index + 1].split())) test_cases.append((N, canvases)) index += 2 return T, test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given an array of integers. For each test case, determine if there exists a pair of integers in the array whose product is odd. # Input Format - The first line contains an integer mathbf{T}, the number of test cases. - Each test case starts with an integer mathbf{N}, the number of elements in the array. - The next line contains mathbf{N} space-separated integers, representing the elements of the array. # Constraints - textbf{1} leq T leq 100 - textbf{1} leq N leq 1000 - -10^6 leq array elements leq 10^6 # Output Format For each test case, print \\"Yes\\" if there exists a pair of integers whose product is odd, otherwise print \\"No\\". # Sample Input 2 4 1 2 3 4 3 2 4 6 # Sample Output Yes No # Explanation For the first test case: - (1, 3): Their product is 3, which is odd. For the second test case: - There is no such pair whose product is odd.","solution":"def is_odd_product_pair_exists(arr): Returns \\"Yes\\" if there exists a pair of integers in the array whose product is odd, otherwise returns \\"No\\". odd_count = 0 for num in arr: if num % 2 != 0: odd_count += 1 if odd_count >= 2: return \\"Yes\\" return \\"No\\" def process_test_cases(T, test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(is_odd_product_pair_exists(arr)) return results"},{"question":"Two strings are said to be anagrams if one string can be formed by rearranging the characters of the other string. Given two strings, determine if they are anagrams of each other. Write a function that takes in two strings and returns a boolean value indicating whether the two strings are anagrams. -----Input----- The input consists of two strings s1 and s2. -----Output----- The output should be a boolean value: True if the strings are anagrams, and False otherwise. -----Constraints----- - 1 ≤ length of s1, s2 ≤ 10^5 - The strings consist only of lowercase English letters. -----Example----- Input: listen silent Output: True Input: hello billion Output: False -----Explanation----- In the first example, \\"listen\\" and \\"silent\\" contain the same characters rearranged, so they are anagrams and the output is True. In the second example, \\"hello\\" and \\"billion\\" do not contain the same characters, so they are not anagrams and the output is False.","solution":"def are_anagrams(s1, s2): Determine if two strings are anagrams of each other. Parameters: s1 (str): First input string. s2 (str): Second input string. Returns: bool: True if the strings are anagrams, False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"You are given a binary string s of length n. Your task is to divide the string into the minimum number of segments, such that each segment contains only one distinct character. Return the number of segments. Example: Input: n = 8 s = \\"00110011\\" Output: 4 Explanation: The minimum number of segments required is 4: \\"00\\", \\"11\\", \\"00\\", and \\"11\\". Your Task: You don\'t have to read input or print anything. Your task is to complete the function minSegments() which takes the integer n and string s as input and returns the minimum number of segments. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraint: 1<=n<=10^5 s contains only \'0\' and \'1\'.","solution":"def minSegments(n, s): Returns the minimum number of segments such that each segment contains only one distinct character. if n == 0: return 0 segment_count = 1 for i in range(1, n): if s[i] != s[i - 1]: segment_count += 1 return segment_count"},{"question":"Write a program that takes an integer `n` and produces an `n x n` 2D matrix filled with integers from 1 to `n^2` in a spiral order, starting from the top-left and moving inwards in a clockwise direction. Input A positive integer `n` in the range 1 to 100 Output An `n x n` matrix where each element is an integer from 1 to `n^2` filled in a spiral order. Example Input: 3 Output: [[1, 2, 3], [8, 9, 4], [7, 6, 5]]","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix containing numbers from 1 to n^2. matrix = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: # Traverse from left to right along the top row for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 # Traverse from right to left along the bottom row for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 # Traverse from bottom to top along the left column for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"Farah is teaching her students about string manipulation and palindrome checking. She created a fun game and wants to test her students\' coding skills with this game. The rules of the game are as follows: Farah writes down a string S of length N consisting of lowercase English letters. She then challenges her students to perform a series of operations on the string. The operations to be performed are given as a list of queries. Each query contains three integers L, R, and K: 1. The first two integers L and R define a substring S[L..R] of S (both inclusive and 1-based). 2. The third integer K means that the substring S[L..R] should be rotated to the right by K positions. After performing all the given queries, the students need to check if the resulting string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. You are required to help Farah determine if the resulting string after all queries is a palindrome for each test case. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case consists of: The first line contains an integer N, the length of the string S. The second line contains the string S. The third line contains an integer Q, the number of queries. The next Q lines contain three integers L, R, and K each, denoting the operations to be performed on the string. ------ Output ------ For each test case, output \\"YES\\" if the resulting string is a palindrome, otherwise output \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Q ≤ 1000 1 ≤ L ≤ R ≤ N 0 ≤ K ≤ R - L + 1 S consists of lowercase English letters. ----- Sample Input 1 ------ 2 5 abcde 2 1 3 1 2 5 2 3 aab 1 1 3 2 ----- Sample Output 1 ------ NO YES","solution":"def rotate_substring(s, L, R, K): Rotates the substring s[L:R+1] to the right by K positions L -= 1 R -= 1 K %= (R - L + 1) # Adjust K to make sure it is within the length of the substring rotated_part = s[L:R+1][-K:] + s[L:R+1][:-K] return s[:L] + rotated_part + s[R+1:] def is_palindrome(s): Checks if the given string s is a palindrome return s == s[::-1] def palindrome_game(T, test_cases): results = [] for test_case in test_cases: N, S, Q, queries = test_case for L, R, K in queries: S = rotate_substring(S, L, R, K) if is_palindrome(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a booking system for conference rooms, each room can be reserved by multiple people, but no two reservations for the same room can overlap. Given a list of reservations where each reservation contains the start and end time, and the room number, determine the maximum number of non-overlapping reservations that can be accommodated in the booking system. Example 1: Input: reservations = [(1, 3, \\"A\\"), (2, 4, \\"A\\"), (3, 5, \\"A\\"), (1, 2, \\"B\\"), (3, 4, \\"B\\")] Output: 4 Explanation: The non-overlapping reservations that can be accommodated are: For room \\"A\\": (1, 3, \\"A\\") and (3, 5, \\"A\\") For room \\"B\\": (1, 2, \\"B\\") and (3, 4, \\"B\\") So, the maximum number of non-overlapping reservations is 4. Example 2: Input: reservations = [(1, 2, \\"A\\"), (2, 3, \\"A\\"), (3, 4, \\"A\\"), (4, 5, \\"A\\")] Output: 4 Explanation: All reservations can be accommodated since they do not overlap. Your Task: You don\'t need to read input or print anything. Write a function maxNonOverlappingReservations() which takes as input the list of reservations, and returns the maximum number of non-overlapping reservations that can be accommodated. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ Number of reservations ≤ 10^5 1 ≤ start_time < end_time ≤ 10^9 Room numbers are non-empty strings with length ≤ 10.","solution":"def maxNonOverlappingReservations(reservations): from collections import defaultdict rooms = defaultdict(list) # Group reservations by room for start, end, room in reservations: rooms[room].append((start, end)) def count_non_overlapping(bookings): # Sort by end time bookings.sort(key=lambda x: x[1]) count = 0 last_end = float(\'-inf\') for start, end in bookings: if start >= last_end: count += 1 last_end = end return count total_non_overlapping = 0 # Calculate non-overlapping reservations for each room for room, bookings in rooms.items(): total_non_overlapping += count_non_overlapping(bookings) return total_non_overlapping"},{"question":"A company is organizing a series of coding competitions, and each competition requires a unique set of problems. The problems are stored in a database with IDs as positive integers. However, due to restrictions, certain problem IDs are marked as unavailable. Given a list of problem IDs and a list of unavailable IDs, your task is to find the smallest available problem ID that is not in the unavailable list. Write a function `findSmallestAvailableID` that takes in two lists: 1. `problemIDs` - a list of integers representing the problem IDs available in the database. 2. `unavailableIDs` - a list of integers representing the IDs that are currently unavailable. The function should return the smallest integer from the `problemIDs` list that is not present in the `unavailableIDs` list. Example 1: Input: problemIDs = [1, 2, 3, 4, 5] unavailableIDs = [1, 2, 3] Output: 4 Explanation: The smallest available problem ID not in the unavailable list is 4. Example 2: Input: problemIDs = [10, 20, 30, 40, 50] unavailableIDs = [20, 30, 50] Output: 10 Explanation: The smallest available problem ID not in the unavailable list is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSmallestAvailableID` which takes two lists `problemIDs` and `unavailableIDs` as input and returns the smallest available problem ID. Expected Time Complexity: O(n + m) where n is the length of `problemIDs` and m is the length of `unavailableIDs`. Expected Auxiliary Space: O(m) Constraints: - 1 <= len(problemIDs), len(unavailableIDs) <= 1000 - 1 <= problemIDs[i], unavailableIDs[i] <= 10^5","solution":"def findSmallestAvailableID(problemIDs, unavailableIDs): Finds the smallest available problem ID that is not in the unavailable list. Parameters: problemIDs (list of int): List of available problem IDs. unavailableIDs (list of int): List of unavailable problem IDs. Returns: int: The smallest available problem ID not in the unavailable list. # Convert the unavailable IDs to a set for O(1) look-up time unavailable_set = set(unavailableIDs) # Initialize the smallest ID as None initially smallest_id = None # Iterate over each ID in the problem IDs list for id in problemIDs: # Check if the ID is not in the unavailable set and if it\'s the smallest found so far if id not in unavailable_set: if smallest_id is None or id < smallest_id: smallest_id = id return smallest_id"},{"question":"Chef has an array A containing N distinct integers. Chef also has another array B of the same length N, with each element either 0 or 1, representing the state of corresponding element in A. If B[i] = 1, the element A[i] is considered \'active\'; otherwise, the element A[i] is \'inactive\'. Chef wants to perform various operations on the array A: 1. **Activate Operation**: Activate the element A[i]. If `B[i]` is already `1`, this operation has no effect. 2. **Deactivate Operation**: Deactivate the element A[i]. If `B[i]` is already `0`, this operation has no effect. 3. **Range Sum Operation**: Compute the sum of all active elements within a specified range of indices [l, r]. Chef would like your help to perform these operations efficiently. ------ Input ------ The first line of input will contain a single integer N. The second line will contain N space-separated integers representing array A. The third line will contain N space-separated integers representing array B. The fourth line will contain the integer Q, the number of queries. The following Q lines will each describe a query in one of the following forms: - `1 i` : Activate the element at index i. - `2 i` : Deactivate the element at index i. - `3 l r`: Compute the sum of all active elements in the range [l, r]`. ------ Output ------ For each \'Range Sum Operation\', output the result on a new line. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} 0 ≤ B[i] ≤ 1 1 ≤ Q ≤ 10^{5} 1 ≤ i, l, r ≤ N The array indices are 1-based. ------ Example Input ------ 10 3 1 4 1 5 9 2 6 5 3 1 0 1 0 1 0 1 0 1 0 5 3 1 5 2 3 3 1 5 1 2 3 1 5 ------ Example Output ------ 12 8 9 ------ Explanation ------ Initially, active elements are: 3, 4, 5, 2, 5. The initial sum in the range [1, 5] is 3 + 4 + 5 = 12. After deactivating element A[3], the active elements in the range are: 3, 5 and the sum is 3 + 5 = 8. After activating element A[2], the active elements are: 3, 1, 5 and the sum is 3 + 1 + 5 = 9.","solution":"def activate_element(B, i): Activate the element at index i in the array B. B[i-1] = 1 def deactivate_element(B, i): Deactivate the element at index i in the array B. B[i-1] = 0 def range_sum(A, B, l, r): Compute the sum of all active elements in the range [l, r]. total_sum = 0 for i in range(l-1, r): if B[i] == 1: total_sum += A[i] return total_sum def process_queries(N, A, B, Q, queries): results = [] for query in queries: if query[0] == 1: activate_element(B, query[1]) elif query[0] == 2: deactivate_element(B, query[1]) elif query[0] == 3: results.append(range_sum(A, B, query[1], query[2])) return results"},{"question":"You are given a grid representing a city map with different types of land: water (\'W\'), residential area (\'R\'), and industrial area (\'I\'). Your task is to write a function that finds the largest contiguous block of residential land on the grid. A block is defined as a group of connected \'R\'s. Connection is allowed in four possible directions (up, down, left, right). Write a function that takes a 2D list representing the grid as input and returns the size of the largest contiguous block of residential land. For example: ```python [ [\'R\', \'W\', \'R\', \'R\'], [\'R\', \'R\', \'W\', \'R\'], [\'W\', \'R\', \'R\', \'W\'], [\'R\', \'W\', \'W\', \'R\'] ] ``` In this grid, the largest block of contiguous residential land is 5. Your function should be efficient and be able to handle larger grids with possibly thousands of cells. If there is no residential land in the grid, the function should return 0.","solution":"def largest_contiguous_residential_block(grid): Finds the largest contiguous block of residential land (\'R\') in the grid. :param grid: A 2D list representing the city map. :return: Size of the largest contiguous residential block. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] != \'R\': return 0 visited[r][c] = True size = 1 size += dfs(r + 1, c) size += dfs(r - 1, c) size += dfs(r, c + 1) size += dfs(r, c - 1) return size max_block_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'R\' and not visited[r][c]: max_block_size = max(max_block_size, dfs(r, c)) return max_block_size"},{"question":"You are given an array of integers which includes both positive and negative numbers. Your task is to find the contiguous subarray (containing at least one number) that has the largest sum and return that sum. For example, given the array `[-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray `[4,-1,2,1]` has the largest sum of `6`. Write a function `maxSubArraySum` that takes an array of integers as input and returns an integer representing the largest sum of the contiguous subarray. Here\'s the expected behavior of the function: ``` maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 6 maxSubArraySum([1]) == 1 maxSubArraySum([5,4,-1,7,8]) == 23 maxSubArraySum([-1,-2,-3,-4]) == -1 ``` Your solution should have a time complexity of O(n), where n is the number of elements in the array.","solution":"def maxSubArraySum(nums): Returns the largest sum of the contiguous subarray. Uses Kadane\'s Algorithm to find the maximum sum subarray efficiently. if not nums: return 0 # if the array is empty max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a list of non-negative integers where each integer represents a bar with the width of each bar being 1, write a function to find the maximum area of water a container can store. The two bars that form the container can be of different heights and should be chosen such that they encapsulate the largest possible amount of water. Example: Input: [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The maximum area is formed between the lines at positions 1 (height = 8) and 8 (height = 7), with a width of 7. Area = 7 * 7 = 49.","solution":"def max_area(height): Returns the maximum area of water a container can store given the heights of the bars. left, right = 0, len(height) - 1 max_area = 0 while left < right: # Calculate the width and the current area formed. width = right - left current_area = min(height[left], height[right]) * width # Update max_area if current_area is larger. max_area = max(max_area, current_area) # Move the pointers to try to find a larger area. if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"In this exercise, you need to create a function called **level_checker** that will take a dictionary of names and their corresponding levels as input. Each level is represented as an integer. The task is to assess the average level of the names whose levels are prime numbers and return the average level rounded to the nearest integer. If there are no prime levels, return 0. Examples: ```python level_checker({\\"Alice\\": 2, \\"Bob\\": 4, \\"Charlie\\": 5, \\"David\\": 9, \\"Eve\\": 11}) returns - 6 level_checker({\\"Anna\\": 8, \\"Ben\\": 10, \\"Cara\\": 15, \\"Dani\\": 20}) returns - 0 level_checker({\\"Sam\\": 7, \\"Tom\\": 3, \\"Jill\\": 2, \\"Henry\\": 6}) returns - 4 ``` To solve this problem, you will need a helper function to determine if a number is a prime number. You should not use any built-in function or libraries to check for prime numbers but instead implement your own logic.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def level_checker(levels): Returns the average level (rounded to the nearest integer) of names whose levels are prime numbers. If there are no prime levels, returns 0. prime_levels = [level for level in levels.values() if is_prime(level)] if not prime_levels: return 0 return round(sum(prime_levels) / len(prime_levels))"},{"question":"An online bookstore wishes to create a system to estimate the delivery time for book orders. The delivery time depends on several factors including the number of books in the order and the type of delivery service chosen. Your task is to write a program that calculates the estimated delivery time based on these inputs. The delivery time for orders is as follows: - For standard delivery, it takes one day to prepare the order plus one additional day for every 2 books (rounded up). For example, 1 or 2 books take 2 days, 3 or 4 books take 3 days, etc. - For express delivery, every order takes a fixed time of 1 day regardless of the number of books. ----Input---- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - Each of the subsequent lines contains an integer N representing the number of books in the order followed by a character D which can be either \'S\' (for standard delivery) or \'E\' (for express delivery). ----Output---- For each test case, print a single line containing one integer — the estimated delivery time in days. ----Constraints---- - 1 le T le 1000 - 1 le N le 100 ----Example Input---- 3 10 S 3 E 5 S ----Example Output---- 6 1 4 ----Explanation---- Example case 1: For 10 books with standard delivery, the preparation time is 1 day plus 5 days (1 day for every 2 books) making a total of 6 days. Example case 2: For 3 books with express delivery, the preparation time is fixed at 1 day. Example case 3: For 5 books with standard delivery, the preparation time is 1 day plus 3 days making a total of 4 days.","solution":"import math def estimate_delivery_time(test_cases): results = [] for books, delivery_type in test_cases: if delivery_type == \'S\': preparation_time = 1 additional_time = math.ceil(books / 2) total_time = preparation_time + additional_time else: # delivery_type == \'E\' total_time = 1 results.append(total_time) return results"},{"question":"Deepu has recently started exploring different cities, so he decides to travel and mark all the cities he visits on a map. To keep track of his journey, Deepu carries a map with coordinates (x, y) and records all the cities he visits in the form of a list of coordinates. Deepu wants to know if all the cities he has visited so far lie on a straight line. Write a program to help Deepu determine if his visited cities are collinear or not. Input: The first line contains an integer T, the number of test cases. Each test case contains an integer N, the number of visited cities, followed by N pairs of integers, where each pair represents the coordinates (x, y) of a city. Output: For each test case, print \\"YES\\" if all cities lie on a straight line, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^4 ≤ x, y ≤ 10^4 SAMPLE INPUT 2 3 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 SAMPLE OUTPUT YES YES","solution":"def are_cities_collinear(coordinates): Returns whether all given coordinates lie on a straight line. if len(coordinates) <= 2: return True x0, y0 = coordinates[0] x1, y1 = coordinates[1] for i in range(2, len(coordinates)): x, y = coordinates[i] if (y - y0) * (x1 - x0) != (y1 - y0) * (x - x0): return False return True def solve_collinearity_problems(test_cases): results = [] for test_case in test_cases: N, coordinates = test_case if are_cities_collinear(coordinates): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A script is a sequence of instructions given in a specific language made up of commands and comments. Commands have the format \\"COMMAND_NAME:DETAIL\\", while comments start with a \\"#\\" and can contain any characters after the hash symbol. The language supports the following commands: - **PRINT:** Followed by a string of characters to be printed. - **ADD:** Followed by two integers separated by a space, sums the integers. - **MULT:** Followed by two integers separated by a space, multiplies the integers. Your task is to write a program that processes a script in this language and produces the appropriate output based on the commands. # Input The input consists of multiple lines where each line is either a command or a comment. The script will end when a line containing \\"END\\" is encountered. The input is terminated by a line containing the keyword \\"END\\". # Output The output should be the result of processing the commands in the order they appear in the input. Comments should be ignored, and no output should be produced for them. If a command is malformed or not recognized, it should also be ignored. # Example **Input:** ``` # This is a comment PRINT:Hello, World! ADD:4 5 # This line should be ignored MULT:3 4 END ``` **Output:** ``` Hello, World! 9 12 ``` # Explanation - The first line is a comment and should be ignored. - The PRINT command should produce \\"Hello, World!\\". - The ADD command sums 4 and 5 resulting in 9. - The second comment line should also be ignored. - The MULT command multiplies 3 and 4 resulting in 12. - The line containing \\"END\\" signifies the end of input processing.","solution":"def process_script(script_lines): Processes a script in a specific language and produces appropriate outputs. :param script_lines: List of strings representing the lines in the script. :return: List of results for each valid command. results = [] for line in script_lines: if line.startswith(\\"#\\") or line == \\"END\\": continue command_parts = line.split(\\":\\", 1) if len(command_parts) != 2: continue command, detail = command_parts[0], command_parts[1] if command == \\"PRINT\\": results.append(detail) elif command == \\"ADD\\": try: a, b = map(int, detail.split()) results.append(str(a + b)) except ValueError: continue elif command == \\"MULT\\": try: a, b = map(int, detail.split()) results.append(str(a * b)) except ValueError: continue return results"},{"question":"You are given two strings, **s1** and **s2**, and you need to determine if **s2** is an anagram of a substring of **s1**. An anagram is a rearrangement of the characters of a word to form another word, meaning that both words contain the same characters with the same frequencies. Write a function that returns a boolean indicating whether an anagram of **s2** exists as a substring in **s1**. Function Description Complete the function **isAnagramSubstring** in the editor below. **isAnagramSubstring** has the following parameter(s): *string s1:* the main string *string s2:* the string for which we have to check if an anagram exists as a substring in **s1** Returns *boolean:* True if there is an anagram of **s2** in **s1**, otherwise False. Input Format The first line contains the string **s1**. The second line contains the string **s2**. Constraints * 1 ≤ |s1|, |s2| ≤ 100,000 * Both strings consist of lowercase English letters only. Output Format Return Yes if there is an anagram of **s2** in **s1**, otherwise return No. Sample Input 0 abcthesisawesome cba Sample Output 0 Yes Explanation 0 Substring \\"abc\\" in **s1** is an anagram of **s2**, so the function returns True. Sample Input 1 hello world Sample Output 1 No Explanation 1 There is no substring in **s1** which is an anagram of **s2**, so the function returns False.","solution":"from collections import Counter def isAnagramSubstring(s1, s2): Determines if an anagram of s2 exists as a substring in s1. :param s1: The main string :param s2: The string for which we have to check if an anagram exists as a substring in s1 :return: True if there is an anagram of s2 in s1, otherwise False len_s1, len_s2 = len(s1), len(s2) # If s2 is longer than s1, it\'s not possible for s1 to contain an anagram of s2 if len_s2 > len_s1: return False # Count characters in s2 s2_count = Counter(s2) # Initial window in s1 of size len_s2 window_count = Counter(s1[:len_s2]) # Check the initial window if window_count == s2_count: return True # Slide window across s1 for i in range(1, len_s1 - len_s2 + 1): # Remove the character that goes out of the window from the count window_count[s1[i - 1]] -= 1 if window_count[s1[i - 1]] == 0: del window_count[s1[i - 1]] # Add the new character that enters the window to the count window_count[s1[i + len_s2 - 1]] += 1 # Compare window with s2 count if window_count == s2_count: return True # If no anagram found in the entire string return False"},{"question":"Cars competing in a race are ranked based on their speeds. However, some cars have the same speed and therefore rank the same. Given a list of car speeds, your task is to determine the ranks for each car. The smallest speed gets the highest rank 1, and if two or more cars have the same speed, they should be given the same rank. Ranks are assigned such that the next different speed gets the next rank that follows the ranking count including all cars ranked before it. Input The first line contains an integer T, the number of test cases. The next T lines contain one test case each. Each test case consists of: - An integer N, representing the number of cars. - A space-separated list of N integers, representing the speeds of the cars. Output For each test case, output a space-separated list of N integers, where the i-th integer is the rank of the i-th car in the given speed list. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ each car speed ≤ 10^9 Note: The speeds within a test case may not be unique. Sample Input 2 5 1 2 3 3 4 4 10 20 20 10 Sample Output 1 2 3 3 5 1 2 2 1 Explanation - In the first test case, the speeds are [1, 2, 3, 3, 4]. The ranks are [1, 2, 3, 3, 5] because the speeds 3 and 3 share the same rank. - In the second test case, the speeds are [10, 20, 20, 10]. The ranks are [1, 2, 2, 1] because there are two cars with speed 10 and they are ranked 1, and the two cars with speed 20 share rank 2.","solution":"def rank_cars(speeds): Assign ranks based on the given speeds. Parameters: speeds (list): A list of integers representing car speeds. Returns: list: A list of integers representing the ranks of the speeds. sorted_speeds = sorted(set(speeds)) rank_dict = {speed: rank for rank, speed in enumerate(sorted_speeds, start=1)} return [rank_dict[speed] for speed in speeds] def process_input(input_data): Process the input data to compute ranks for multiple test cases. Parameters: input_data (str): Multiline string of input data for the problem. Returns: list: A list of lists, each sublist containing the ranks for a specific test case. lines = input_data.strip().split(\'n\') T = int(lines[0].strip()) results = [] for i in range(1, T+1): parts = lines[i].strip().split() N = int(parts[0]) speeds = list(map(int, parts[1:])) results.append(rank_cars(speeds)) return results"},{"question":"You are organizing a spelling competition for elementary school students, and you need a way to validate the spelling of words quickly. You have a reference dictionary which contains all correctly spelled words. A word is considered misspelled if it is not found in the reference dictionary. You would like to find the number of misspelled words in a given list of words. Write a function `count_misspelled` which takes two lists of strings as input: `reference_dict` and `words`. The function should return the number of words in the `words` list that are not found in the `reference_dict`. -----Input----- - `reference_dict`: a list of strings (`1 ≤ len(reference_dict) ≤ 10^3`). Each string consists of lowercase English letters and represents a word in the reference dictionary. - `words`: a list of strings (`1 ≤ len(words) ≤ 10^3`). Each string consists of lowercase English letters and represents a word that needs to be checked against the reference dictionary. You can assume that each word in the `reference_dict` and `words` has length between 1 and 50 characters, inclusive. -----Output----- - Return an integer representing the number of misspelled words in the `words` list. -----Examples----- Input reference_dict = [\\"apple\\", \\"banana\\", \\"orange\\"] words = [\\"apple\\", \\"bananna\\", \\"kiwi\\"] Output 2 Input reference_dict = [\\"tree\\", \\"house\\", \\"car\\"] words = [\\"tree\\", \\"house\\", \\"car\\"] Output 0 Input reference_dict = [\\"cat\\", \\"dog\\", \\"fish\\"] words = [\\"rat\\", \\"bat\\", \\"cat\\"] Output 2 -----Note----- In the first sample, the words \\"bananna\\" and \\"kiwi\\" are misspelled (they are not found in the reference dictionary). In the second sample, all words are spelled correctly according to the reference dictionary. In the third sample, the words \\"rat\\" and \\"bat\\" are misspelled. \\"cat\\" is spelled correctly.","solution":"def count_misspelled(reference_dict, words): Returns the number of words in the words list that are not found in the reference dictionary. :param reference_dict: List of correctly spelled words. :param words: List of words to check. :return: Number of misspelled words. reference_set = set(reference_dict) misspelled_count = 0 for word in words: if word not in reference_set: misspelled_count += 1 return misspelled_count"},{"question":"Problem A team of robots is tasked with navigating through a warehouse grid to collect packages. The warehouse is represented as an N times M1 grid, where each cell can either be empty, contain a package, or be an obstacle. The team consists of multiple robots, and each robot follows specific movement commands to navigate the grid. Each robot can move up, down, left, or right. The movement commands for all robots are provided in the form of a single string, where: - \'U\' denotes an upward move, - \'D\' denotes a downward move, - \'L\' denotes a leftward move, and - \'R\' denotes a rightward move. If a robot encounters an obstacle or the warehouse boundary as a result of a move, it stays in its current position for that move. Input - The first line contains two integers N and M, the number of rows and columns in the warehouse grid (1 leq N, M leq 500). - The next N lines each contain M characters representing the warehouse grid: - \'.\' denotes an empty cell, - \'P\' denotes that the cell contains a package, - \'#\' denotes an obstacle. - The next line contains the initial positions of the robots, represented as a set of pairs (x_i, y_i). Each robot\'s position is on one line, with 1 leq x_i leq N and 1 leq y_i leq M. - The last line contains the movement command string, consisting only of characters \'U\', \'D\', \'L\', and \'R\'. Output Output the number of packages collected by all robots after executing the entire movement command string. Example Input 5 5 ..P.. . P...P .#. ..P#. 2 2 4 1 RDDLLU Output 1 Explanation The initial positions of the robots and the package locations imply that the robots will begin their movement from the specified starting positions. As the robots move according to the command string, they will collect packages in the cells they visit. In this example, the first robot starts at position (2, 2) and moves according to the string \\"RDDLLU\\", while the second robot starts at position (4, 1) and follows the same movement commands. After executing all the moves, the output of 1 indicates the total number of unique packages collected by all the robots.","solution":"def collect_packages(n, m, warehouse_grid, initial_positions, commands): collected_packages = set() directions = { \'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1) } for x, y in initial_positions: x -= 1 y -= 1 for command in commands: new_x = x + directions[command][0] new_y = y + directions[command][1] if 0 <= new_x < n and 0 <= new_y < m and warehouse_grid[new_x][new_y] != \'#\': x, y = new_x, new_y if warehouse_grid[x][y] == \'P\': collected_packages.add((x, y)) return len(collected_packages)"},{"question":"Given a matrix of characters of size N x M and a target word. Your task is to check if the target word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Example 1: Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" Output: True Explanation: The word \\"ABCCED\\" can be found in the matrix by following the path (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1). Example 2: Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" Output: True Explanation: The word \\"SEE\\" can be found in the matrix by following the path (2, 0) -> (2, 1) -> (2, 2). Example 3: Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" Output: False Explanation: The word \\"ABCB\\" cannot be found in the matrix. Your Task: You don\'t need to read input or print anything. Complete the function exist() which takes the matrix and the target word as input parameters and returns a boolean value indicating whether the word exists in the matrix or not. Expected Time Complexity: O(N * M * 3^L) where N and M are the dimensions of the matrix, and L is the length of the word. Expected Auxiliary Space: O(L) for the recursion stack, where L is the length of the word. Constraints: 1 <= N, M <= 200 1 <= word.length <= 10^3 All characters in the matrix and the word are lowercase English letters.","solution":"def exist(matrix, word): if not matrix or not word: return False n, m = len(matrix), len(matrix[0]) def backtrack(x, y, suffix): if len(suffix) == 0: return True if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] != suffix[0]: return False ret = False temp, matrix[x][y] = matrix[x][y], \'#\' for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ret = backtrack(x + dx, y + dy, suffix[1:]) if ret: break matrix[x][y] = temp return ret for i in range(n): for j in range(m): if backtrack(i, j, word): return True return False"},{"question":"A company wants to analyze the performance of its employees based on their historical productivity data. Each employee\'s data consists of multiple records, where each record corresponds to an individual task the employee has completed. The task records contain the time taken to complete the task and the task\'s complexity score. Create a program that determines whether an employee is eligible for a bonus. An employee is eligible for a bonus if their average productivity score is above a certain threshold. The productivity score is calculated as the ratio of the task\'s complexity score to the time taken to complete the task. Input The input consists of multiple datasets. Each dataset describes one employee. The end of input is indicated by a single line containing \\"END\\". Each dataset is formatted as follows: - The first line contains an integer N (1 ≤ N ≤ 1000), the number of tasks. - The following N lines each contain two integers Ti and Si (1 ≤ Ti, Si ≤ 100), where Ti is the time taken to complete the ith task, and Si is the complexity score of the ith task. - The next line contains an integer T (0 ≤ T ≤ 100), the bonus threshold. Output For each employee, output \\"YES\\" if the employee is eligible for a bonus, and \\"NO\\" otherwise. Example Input 3 5 10 3 15 4 12 2 5 8 16 7 14 6 12 5 20 4 8 4 END Output YES NO Explanation In the first dataset, the average productivity scores are (10/5), (15/3), and (12/4), which are 2, 5, and 3 respectively. Thus, the average productivity score is (2+5+3)/3 = 3.33, which is above the threshold of 2, so the first employee is eligible for a bonus. In the second dataset, the average productivity scores are (16/8), (14/7), (12/6), (20/5), and (8/4), which are all 2. The average productivity score is 2, which is equal to the threshold, so the second employee is not eligible for a bonus.","solution":"def check_bonus_eligibility(data): Determine if an employee is eligible for a bonus based on their historical productivity data. Args: data (list): List of strings representing the input data. Returns: list: List of strings, each being \\"YES\\" or \\"NO\\" for each employee\'s eligibility. result = [] i = 0 while i < len(data): if data[i] == \\"END\\": break n = int(data[i]) i += 1 productivity_scores = [] for _ in range(n): Ti, Si = map(int, data[i].split()) productivity_scores.append(Si / Ti) i += 1 threshold = int(data[i]) i += 1 average_productivity = sum(productivity_scores) / n if average_productivity > threshold: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are organizing a charity run in your city. There are n runners on the starting line, each wearing a bib with a number from 1 to n. After the run, you need to quickly identify the top k runners based on their finishing order. For simplicity, you get a list of finishing times in the same order as the bib numbers. Write a program that reads the finishing times and identifies the top k runners who ran the fastest. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 100, 1 le k le n) — the number of runners and the number of top runners to identify. The second line of each test case contains n space-separated integers t_i (1 le t_i le 100) — the finishing times of the runners. -----Output----- For each test case, print k integers — the bib numbers of the top k runners in ascending order of finishing times. If there is a tie in finishing times, list the runners by their bib number in ascending order. -----Example----- Input 2 5 3 10 20 15 12 11 4 2 18 16 20 17 Output 1 5 4 2 4 -----Note----- In the first test case, the finishing times are [10, 20, 15, 12, 11]. The top 3 runners based on their finishing times are: - The runner with bib number 1 had a finishing time of 10. - The runner with bib number 5 had a finishing time of 11. - The runner with bib number 4 had a finishing time of 12. So, the output is \\"1 5 4\\". In the second test case, the finishing times are [18, 16, 20, 17]. The top 2 runners based on their finishing times are: - The runner with bib number 2 had a finishing time of 16. - The runner with bib number 4 had a finishing time of 17. So, the output is \\"2 4\\".","solution":"def find_top_runners(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] times = test_cases[i][1] bib_times = list(enumerate(times, start=1)) bib_times.sort(key=lambda x: (x[1], x[0])) top_runners = [bib_times[j][0] for j in range(k)] results.append(top_runners) return results"},{"question":"You are given a list of n integers and a target sum k. Your task is to find out whether there is a pair of distinct elements in the list that adds up to the target sum k. If such a pair exists, return true; otherwise, return false. Example 1: Input: n = 5 arr = [10, 15, 3, 7, 8] k = 17 Output: true Explanation: The pair (10, 7) sums up to 17. Example 2: Input: n = 5 arr = [1, 2, 3, 4, 5] k = 10 Output: false Explanation: No pair of distinct elements sums up to 10. Your Task: You do not need to read input or print anything. Your task is to complete the function findPairWithSum() which takes two integers n and k, a list of n integers as input parameters and returns a boolean value indicating whether there is a pair with the target sum. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints : 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= k <= 10^9","solution":"def findPairWithSum(n, arr, k): Returns true if there is a pair of distinct elements in arr that add up to k. Otherwise, returns false. seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"Eve is interested in finding unique pairs of numbers in a list that sum up to a specific target value. However, she is only interested in pairs where the first number is smaller than the second number. Given an array of integers and a target sum, your task is to find the count of such unique pairs. Note that pairs (a, b) and (b, a) are considered distinct even if they involve the same numbers, hence you should count them both separately. INPUT: The first line of input contains two space-separated integers n and target, where n is the number of integers in the array, and target is the target sum value. The second line contains n space-separated integers denoting the elements of the array. OUTPUT: Print the number of unique pairs (a, b) from the array such that a + b equals the target and a < b. CONSTRAINTS: * 2 ≤ n ≤ 10^5 * -10^9 ≤ array[i] ≤ 10^9 * -10^9 ≤ target ≤ 10^9 SAMPLE INPUT 6 8 1 2 3 4 5 7 SAMPLE OUTPUT 2 Explanation Explanation: For the target sum 8, the pairs (1, 7), and (3, 5) are valid. Pairs (7, 1) and (5, 3) are not counted because for valid pairs a must be less than b. So the output is 2.","solution":"def count_unique_pairs(n, target, array): Returns the number of unique pairs (a, b) such that a + b == target and a < b. count = 0 seen = set() for i in range(n): for j in range(i + 1, n): if array[i] < array[j] and array[i] + array[j] == target: pair = (array[i], array[j]) if pair not in seen: count += 1 seen.add(pair) return count # Example usage # n = 6 # target = 8 # array = [1, 2, 3, 4, 5, 7] # print(count_unique_pairs(n, target, array)) # Output: 2"},{"question":"You are given a string consisting of lowercase English letters and you can perform the following operation on it: Choose any letter in the string and delete it. Your goal is to make all the remaining characters in the string distinct, i.e., each character should appear exactly once. Write a program to find the minimum number of deletions required to achieve this. ------ Input ------ The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single string S. ------ Output ------ For each test case, output a single integer - the minimum number of deletions required to make the characters in the string S distinct. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S contains only lowercase English letters. ------ Sample Input 1 ------ 2 abacabad bbbbbb ------ Sample Output 1 ------ 4 5","solution":"def min_deletions_to_make_unique(s): Returns the minimum number of deletions required to make all characters in the string `s` unique. frequency = {} for char in s: frequency[char] = frequency.get(char, 0) + 1 deletions = 0 for count in frequency.values(): if count > 1: deletions += count - 1 return deletions def process_input(T, cases): Processes multiple test cases and returns the results as a list of integers. results = [] for case in cases: result = min_deletions_to_make_unique(case) results.append(result) return results"},{"question":"Create a function that takes a string and returns `true` if it is a palindrome, and `false` otherwise. Ignore punctuation, case, and spacing. For Example: `isPalindrome(\\"A man, a plan, a canal, Panama\\")` should return `true` `isPalindrome(\\"Was it a car or a cat I saw\\")` should return `true` `isPalindrome(\\"Hello, world!\\")` should return `false`","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. Ignores punctuation, case, and spacing. import re # Remove all non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Given a string S, find the length of the longest substring that contains exactly two distinct characters. Example 1: Input: S = \\"eceba\\" Output: 3 Explanation: The substring is \\"ece\\" which its length is 3, and it contains exactly two distinct characters. Example 2: Input: S = \\"ccaabbb\\" Output: 5 Explanation: The substring is \\"aabbb\\" with length 5, and it contains exactly two distinct characters. Function Signature: ```python def longestTwoDistinctCharsSubstring(S: str) -> int: ``` Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestTwoDistinctCharsSubstring() which takes a string S as input and returns the length of the longest substring containing exactly two distinct characters. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def longestTwoDistinctCharsSubstring(S: str) -> int: Returns the length of the longest substring that contains exactly two distinct characters. if len(S) < 2: return len(S) left = 0 right = 0 char_map = {} max_length = 0 while right < len(S): char_map[S[right]] = char_map.get(S[right], 0) + 1 right += 1 while len(char_map) > 2: char_map[S[left]] -= 1 if char_map[S[left]] == 0: del char_map[S[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"Write a function that takes a list of integers and returns the sum of the three highest numbers in the list. If the list has fewer than three integers, return the sum of all the integers in the list. For example: ```python highest_triplet_sum([3, 5, 1, 9]) -> 17 highest_triplet_sum([10, 2, 3]) -> 15 highest_triplet_sum([7]) -> 7 highest_triplet_sum([6, 8]) -> 14 ``` Complete the solution so that it meets the requirements specified. The input list will have at least one integer and the integers will be non-negative.","solution":"def highest_triplet_sum(nums): Returns the sum of the three highest numbers in the list. If the list has fewer than three integers, return the sum of all the integers in the list. if len(nums) < 3: return sum(nums) else: nums.sort(reverse=True) return sum(nums[:3])"},{"question":"A robot is navigating through a grid. It starts at the top-left corner (0, 0) and it is trying to reach the bottom-right corner (N-1, M-1). The robot has a limited amount of energy, represented by E. Each step the robot takes reduces its energy by 1. The robot can only move down or right at any point in time. Given the size of the grid N and M, and the energy limit E, determine if the robot can reach the bottom-right corner of the grid without running out of energy. Additionally, provide the minimum amount of energy the robot needs to reach the destination. -----Input----- The first line contains an integer T denoting the number of test cases. The descriptions of T test cases follow. Each test case consists of three space-separated integers: N, M, and E which represent the number of rows, the number of columns of the grid, and the energy limit respectively. -----Output----- For each test case output \\"YES\\" if the robot can reach the bottom-right corner with the given energy E, otherwise output \\"NO\\". Also, print the minimum energy required for the robot to reach the target. The output for each test case should be in a new line. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N, M ≤ 1000 - 0 ≤ E ≤ 2000 -----Example----- Input: 3 3 3 4 2 2 2 5 5 8 Output: YES 4 NO 2 YES 8 -----Explanation----- In the first test case, the robot can reach (2, 2) using exactly 4 units of energy, moving one step right and two steps down. In the second test case, the robot needs at least 2 units of energy to move from (0, 0) to (1, 1) but only has 2 units of energy, which is not enough to reach the destination. In the third test case, the robot can reach (4, 4) using exactly 8 units of energy, moving 4 steps right and 4 steps down.","solution":"def can_robot_reach(N, M, E): Determines if the robot can reach the bottom-right corner (N-1, M-1) of the grid and calculates the minimum energy required. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. E (int): Available energy. Returns: tuple: (a string \\"YES\\" or \\"NO\\", the minimum energy required) min_energy_required = (N - 1) + (M - 1) if E >= min_energy_required: return \\"YES\\", min_energy_required else: return \\"NO\\", min_energy_required def multiple_test_cases(test_cases): results = [] for N, M, E in test_cases: result = can_robot_reach(N, M, E) results.append(result) return results"},{"question":"Given a linked list, your task is to complete the function `swap_pairs` which swaps every two adjacent nodes and returns its head. You may not modify the values in the list\'s nodes, only nodes itself may be changed. Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] Example 2: Input: head = [1,2,3,4,5] Output: [2,1,4,3,5] Your Task: You only need to implement the given function `swap_pairs` which returns the head of the modified linked list. Do not read input, instead use the arguments given in the function. Swap every two adjacent nodes in the linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - The number of nodes in the list is in the range [0, 100]. - 0 <= Node.val <= 100","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def swap_pairs(head): if not head or not head.next: return head dummy = ListNode() dummy.next = head prev = dummy current = head while current and current.next: first = current second = current.next # Swapping the nodes prev.next = second first.next = second.next second.next = first # Move the pointers forward prev = first current = first.next return dummy.next"},{"question":"Given an array of integers `nums`, a subarray is called \\"good\\" if its sum is even. Return the length of the longest good subarray. Constraints: * 1 leq nums.length leq 10^5 * -10^4 leq nums[i] leq 10^4 Input The input is given from Standard Input in the following format: nums (list of integers) Output Print the length of the longest good subarray. Examples Input [1, 2, 3, 4, 5] Output 4 Input [2, 4, 6, 8, 10] Output 5 Input [1, 1, 1, 1, 1] Output 4 Input [-1, -2, -3, -4, -5] Output 4","solution":"def longest_good_subarray(nums): Returns the length of the longest subarray with an even sum. A subarray is \\"good\\" if its sum is even. # Initialize the maximum length of good subarray max_len = 0 current_sum = 0 # Dictionary to store the first occurrence of a specific sum sum_index = {0: -1} for i, num in enumerate(nums): current_sum += num # If current_sum is even, update max_len if current_sum % 2 == 0: max_len = max(max_len, i - sum_index.get(current_sum % 2, i)) # Store the first occurrence of the remainder of current_sum divided by 2 if current_sum % 2 not in sum_index: sum_index[current_sum % 2] = i return max_len"},{"question":"Given an unsorted array of integers, write a function to find the longest consecutive sequence of numbers in the array. A consecutive sequence is a sequence of numbers where each number directly follows the previous number (e.g., 1, 2, 3, 4). The function should return the length of this longest sequence. Your solution should aim for O(n) complexity. Input - An integer N representing the size of the array. - An array A of N integers, where each integer is less than 10^9 and greater than -10^9. Output - An integer representing the length of the longest consecutive sequence found in the array. Constraints 1 ≤ N ≤ 100,000 Example Input: 10 100 4 200 1 3 2 101 102 103 104 Output: 5 Explanation: The longest consecutive sequence is [1, 2, 3, 4] which has a length of 4. Another sequence [100, 101, 102, 103, 104] has a length of 5, which is the longest. Hence, the output is 5.","solution":"def longest_consecutive_sequence(arr): Finds the longest consecutive sequence in an array. Args: arr: List of integers Returns: Length of the longest consecutive sequence if not arr: return 0 # Convert to set, as lookups in sets are O(1) num_set = set(arr) max_length = 0 for num in num_set: # Check if num is the start of a sequence if num - 1 not in num_set: current_num = num current_length = 1 # Check length of the current sequence while current_num + 1 in num_set: current_num += 1 current_length += 1 # Update max_length max_length = max(max_length, current_length) return max_length"},{"question":"Alice decided to organize her bookshelf. She wants to arrange her books such that all the books with the same genre are adjacent to each other, and within each genre, the books should be sorted by their heights in ascending order. Each book is represented by a tuple containing its genre and height. Write a program to help Alice organize her books in the desired order. Input The first line contains a single integer n, the number of books (1 ≤ n ≤ 1000). Each of the next n lines contains a genre and a height (an integer), separated by a space. Output Output n lines, each containing a genre and a height, sorted first by genre in alphabetical order, and then by height within each genre in ascending order. Examples Input 6 fiction 10 nonfiction 8 fiction 20 mystery 15 nonfiction 5 mystery 10 Output fiction 10 fiction 20 mystery 10 mystery 15 nonfiction 5 nonfiction 8 Input 4 fantasy 21 fantasy 19 romance 12 romance 18 Output fantasy 19 fantasy 21 romance 12 romance 18","solution":"def organize_books(n, books): Organize books by genre first and then by height within each genre in ascending order. Parameters: n (int): Number of books. books (List[Tuple[str, int]]): List of tuples where each tuple contains a genre and height of a book. Returns: List[Tuple[str, int]]: Sorted list of books by genre and height. # Sorting the books first by genre, then by height within each genre sorted_books = sorted(books, key=lambda x: (x[0], x[1])) return sorted_books"},{"question":"Consider a matrix of size n x m containing only integers. We need to find the largest rectangular sub-matrix whose sum of elements is closest to a given integer X without exceeding it. You should implement the function `max_submatrix_sum(matrix, n, m, X)` that takes a matrix, its dimensions, and the integer X as inputs, and returns the sum of the elements in the largest rectangular sub-matrix that meets the criteria. Input Your function will receive: - matrix: A list of lists of integers representing the n x m matrix - n: An integer representing the number of rows in the matrix. - m: An integer representing the number of columns in the matrix. - X: An integer representing the target sum. Output The function should return the sum of the largest rectangular sub-matrix that is closest to X without exceeding it. Example Input: ```python matrix = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] n = 4 m = 5 X = 5 ``` Output: ```python 5 ``` In the above example, the sub-matrix with sum closest to 5 without exceeding it is: ``` [4, 2, 1] or [1, 2, -1, -4, -20] ```","solution":"def max_submatrix_sum(matrix, n, m, X): def kadane(arr, max_sum): curr_sum = 0 max_kadane_sum = float(\'-inf\') for val in arr: curr_sum += val if curr_sum > max_sum: curr_sum = val if curr_sum == max_sum: return max_sum max_kadane_sum = max(max_kadane_sum, curr_sum) if curr_sum < 0: curr_sum = 0 return max_kadane_sum max_subsum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = kadane(temp, X) if max_sum <= X: max_subsum = max(max_subsum, max_sum) if max_subsum == X: return max_subsum return max_subsum"},{"question":"There are N students in a class, and each student has a distinct skill level. The skill level of the i-th student is represented by the integer S_i. The students need to form a team of size K that has the maximum possible total skill level while ensuring that no two students in the team have adjacent skill levels in the initial list. Write a program to find the maximum possible total skill level for a team of size K. Constraints - 1 ≦ N ≦ 2000 - 1 ≦ K ≦ N - 1 ≦ S_i ≦ 10^9 Input The input is given from Standard Input in the following format: N K S_1 S_2 ... S_N Output Print the maximum possible total skill level for the team of size K. Examples Input 6 3 1 3 2 5 4 9 Output 17 Input 5 2 8 1 5 4 7 Output 15","solution":"def max_skill_level(N, K, S): Returns the maximum possible total skill level for a team of size K such that no two students in the team have adjacent skill levels in the initial list. # Edge case if K == 0: return 0 # Dynamic programming table to store maximum skill values dp = [[0] * (K + 1) for _ in range(N)] # Initialize first column, which represents selecting 0 students for i in range(N): dp[i][0] = 0 # Initialize the first skill dp[0][1] = S[0] # Fill the DP table for i in range(1, N): for k in range(1, K + 1): # Option 1: Do not include the current student dp[i][k] = dp[i-1][k] # Option 2: Include the current student, if possible if k > 0: dp[i][k] = max(dp[i][k], S[i] + (dp[i-2][k-1] if i >= 2 else 0)) # Find the maximum skill level that can be achieved with any K rows max_skill = 0 for i in range(N): max_skill = max(max_skill, dp[i][K]) return max_skill"},{"question":"You are given a **connected** undirected graph consisting of `n` vertices and `m` edges. Each vertex has a unique `id` between `1` and `n`. Your task is to determine the **longest path** in the graph, where the length of a path is defined as the number of edges in the path. A path in a graph is a sequence of vertices such that there is an edge between consecutive vertices in the sequence. The longest path may visit the same vertex multiple times. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 20, 1 ≤ m ≤ 50), the number of vertices and edges respectively. Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between vertex `u` and vertex `v`. Output Print one integer: the length (in terms of number of edges) of the longest path in the graph. Example Input 5 5 1 2 1 3 2 4 3 4 4 5 Output 4 Explanation The longest path in this graph is: `1 -> 2 -> 4 -> 5` or `1 -> 3 -> 4 -> 5`, both having 4 edges.","solution":"def longest_path(n, m, edges): from collections import defaultdict # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, visited): max_length = 0 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True path_length = 1 + dfs(neighbor, visited) max_length = max(max_length, path_length) visited[neighbor] = False return max_length longest = 0 for i in range(1, n + 1): visited = [False] * (n + 1) visited[i] = True longest = max(longest, dfs(i, visited)) return longest"},{"question":"You have an array consisting of `n` integers where `n` is odd. Your task is to split this array into two parts such that: 1. Both parts are non-empty. 2. The median of the first part is less than or equal to the median of the second part. The median of an array of odd length `m` is the integer positioned at (m+1)/2 when the array is sorted. If there are multiple ways to split the array, you should find the one where the length of each part is as close as possible. -----Input----- The first line of the input contains an integer `n` (3 le n le 1,000; ntext{ is odd}) — the length of the array. The second line contains `n` distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) representing the elements of the array. -----Output----- Output two lines. The first line should contain the elements of the first part, and the second line should contain the elements of the second part. If there are multiple ways to split the array, output any. -----Examples----- Input 3 3 1 2 Output 1 2 3 Input 7 7 3 5 1 2 6 4 Output 1 2 3 4 5 6 7 -----Note----- In the first example, the array [1, 2, 3] can be split into [1, 2] and [3] where the median of the first part is 2 and the median of the second part is 3. Clearly, 2 <= 3. In the second example, the array [1, 2, 3, 4, 5, 6, 7] can be split into [1, 2, 3] and [4, 5, 6, 7] where the median of the first part is 2 and the median of the second part is 6. Again, 3 <= 4.","solution":"def split_array(arr): Splits an array into two parts such that: 1. Both parts are non-empty. 2. The median of the first part is less than or equal to the median of the second part. # Sort the array arr.sort() # Calculate the split index n = len(arr) split_index = n // 2 # Split the array into two parts first_part = arr[:split_index] second_part = arr[split_index:] return first_part, second_part"},{"question":"You are given an array of integers. In one move, you are allowed to select any two adjacent elements of the array and swap them. What is the minimum number of moves required to make the array sorted in non-decreasing order? -----Input----- The first line contains a single integer t (1 leq t leq 100), the number of test cases. The first line of each test case contains an integer n (1 leq n leq 1000), the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5) — the elements of the array. -----Output----- Print t integers: the minimum number of moves required to sort the array for each test case. -----Example----- Input 2 3 3 2 1 4 4 3 2 1 Output 3 6 -----Note----- In the first test case, the array can be sorted in the following way: [3, 2, 1] -> [2, 3, 1] -> [2, 1, 3] -> [1, 2, 3]. In the second test case, one of the optimal sequences of operations is: [4, 3, 2, 1] -> [3, 4, 2, 1] -> [3, 2, 4, 1] -> [3, 2, 1, 4] -> [2, 3, 1, 4] -> [2, 1, 3, 4] -> [1, 2, 3, 4]. The total number of moves is 6.","solution":"def min_moves_to_sort(arr): Returns the minimum number of adjacent swaps to sort the array in non-decreasing order. n = len(arr) moves = 0 # Bubble Sort to count the moves for i in range(n-1): for j in range(n-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] moves += 1 return moves def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for case in test_cases: n, arr = case result = min_moves_to_sort(arr) results.append(result) return results"},{"question":"POINTS - 30 Given a string, determine if it is a valid palindrome considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, or sequence that reads the same backward as forward. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string s. Output For each test case, output a single line containing \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Constraints 1<=T<=100, 1<=|s|<=1000 Example Input: 3 A man, a plan, a canal: Panama race a car 12321 Output: YES NO YES","solution":"def is_valid_palindrome(s): Returns \\"YES\\" if the input string s is a valid palindrome, ignoring non-alphanumeric characters and case. Otherwise returns \\"NO\\". # Filter only alphanumeric characters and convert to lower case filtered_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is the same read forwards and backwards if filtered_s == filtered_s[::-1]: return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, cases): Processes T test cases and returns a list of results. T: number of test cases cases: list of test case strings results = [] for case in cases: result = is_valid_palindrome(case) results.append(result) return results"},{"question":"You are given an array of integers. Your task is to calculate the difference between the sum of all elements at even positions and the sum of all elements at odd positions. Positions in the array are 1-based. -----Input:----- - First line contains an integer T, the number of test cases. - First line of each test case contains a single integer N, the number of elements in the array. - Second line of each test case contains N space-separated integers denoting the elements of the array. -----Output:----- For each test case, print a single integer which is the difference between the sum of elements at even positions and the sum of elements at odd positions. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq text{Element Value} leq 1000 -----Sample Input:----- 2 5 1 3 5 7 9 4 2 4 6 8 -----Sample Output:----- 4 4 -----EXPLANATION:----- In the first test case, sum of elements at even positions (2+4=3+7=10), and sum of elements at odd positions (1+5+9=15), so difference is 10-15=-5. Similarly, for second test case, sum of elements at even positions (4+8=12), and sum of elements at odd positions (2+6=8), so difference is 8-12=-4.","solution":"def calculate_difference(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] sum_even_pos = sum(array[j] for j in range(1, N, 2)) sum_odd_pos = sum(array[j] for j in range(0, N, 2)) results.append(sum_even_pos - sum_odd_pos) return results # Example usage: # T = 2 # test_cases = [(5, [1, 3, 5, 7, 9]), (4, [2, 4, 6, 8])] # print(calculate_difference(T, test_cases)) # Output: [-5, 4]"},{"question":"You are given a numeric string consisting of digits from \'0\' to \'9\'. You need to rearrange the digits of the string in such a way that the resulting number is the largest possible even number. If it is not possible to create an even number from the given digits, return -1. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line contains the string s consisting of exactly n digits. -----Output----- Output the largest possible even number that can be formed by rearranging the digits of the string. If no such number exists, output -1. -----Examples----- Input 4 1234 Output 4312 Input 3 135 Output -1 Input 5 54321 Output 54312 -----Note----- In the first example, rearrange the digits to get \\"4312\\", which is the largest possible even number formed from the given digits. In the second example, no rearrangement of digits will result in an even number, so the output is -1. In the third example, rearrange the digits to get \\"54312\\", which is the largest possible even number formed from the given digits.","solution":"def largest_possible_even_number(n, s): Returns the largest possible even number by rearranging the digits of the string. If no such even number can be created, returns -1. digits = list(s) even_digits = sorted([d for d in digits if int(d) % 2 == 0]) if not even_digits: return -1 digits.sort(reverse=True) for i in range(len(digits)-1, -1, -1): if int(digits[i]) % 2 == 0: largest_even = digits.pop(i) break largest_number = \'\'.join(digits) + largest_even return largest_number"},{"question":"# Rotate Array Write a function that takes an array and rotates it to the right by a given number of steps. The rotation means that the elements that are shifted off the end of the array are brought back to the front in the same order. Examples ``` rotateArray([1, 2, 3, 4, 5], 2) ==> [4, 5, 1, 2, 3] rotateArray([1, 2, 3, 4, 5], 3) ==> [3, 4, 5, 1, 2] rotateArray([1, 2, 3, 4, 5], 5) ==> [1, 2, 3, 4, 5] rotateArray([1, 2, 3, 4, 5], 7) ==> [4, 5, 1, 2, 3] ```","solution":"def rotateArray(arr, k): Rotates the array to the right by k steps. if not arr or k <= 0: return arr n = len(arr) k = k % n return arr[-k:] + arr[:-k]"},{"question":"Takahashi has a string S consisting of lowercase English letters, and a positive integer K. He wants to modify the string by removing exactly K characters such that the resulting string is lexicographically smallest. Find the lexicographically smallest string that can be obtained by removing exactly K characters from S. Constraints * 1 ≤ |S| ≤ 10^5 * 1 ≤ K < |S| Input Input is given from Standard Input in the following format: ``` S K ``` Output Print the lexicographically smallest string that can be obtained by removing exactly K characters. Examples Input ``` cabaab 2 ``` Output ``` aaab ``` Input ``` zwacacd 3 ``` Output ``` aacd ```","solution":"def lexicographically_smallest_string(s, k): Returns the lexicographically smallest string that can be obtained by removing exactly K characters from the input string S. stack = [] n = len(s) for i in range(n): while k > 0 and stack and stack[-1] > s[i]: stack.pop() k -= 1 stack.append(s[i]) # If k > 0, remove remaining characters from the end while k > 0: stack.pop() k -= 1 return \'\'.join(stack)"},{"question":"David is working on a software project where he needs to evaluate the performance of a newly implemented data search algorithm. For testing purposes, he is provided with a list of integers and a set of queries. Each query asks him to find how many times a certain integer appears within a specified subarray of the list. Can you help David by writing a program to perform these tasks? Input The first line contains two integers, N and Q, which represent the number of elements in the list and the number of queries, respectively. The next line contains N integers, representing the list of elements. Each of the following Q lines contains three integers, L, R, and X, where L and R define the subarray from the L-th to the R-th element (inclusive) and X is the integer that needs to be counted within that subarray. Output For each query, output the count of integer X in the specified subarray. If the subarray is invalid (for example, if L is greater than R), return \\"Invalid Query\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N -10^9 ≤ list elements ≤ 10^9 -10^9 ≤ X ≤ 10^9 Note: The list can contain negative numbers, and L and R are 1-based indices. SAMPLE INPUT 10 3 1 2 3 4 5 6 7 8 9 10 1 5 3 2 7 6 10 10 10 SAMPLE OUTPUT 1 1 1 Explanation In the first query, the subarray is [1, 2, 3, 4, 5]. The number 3 appears 1 time. In the second query, the subarray is [2, 3, 4, 5, 6, 7]. The number 6 appears 1 time. In the third query, the subarray is [10]. The number 10 appears 1 time.","solution":"def count_occurrences(N, Q, elements, queries): Returns the count of occurrences of X in the specified subarray for each query. If the subarray is invalid, returns \\"Invalid Query\\". :param N: int, number of elements in the list :param Q: int, number of queries :param elements: list of int, the list of N integers :param queries: list of tuples, each containing three integers (L, R, X) :return: list of results for each query results = [] for (L, R, X) in queries: if L > R or L < 1 or R > N: # Check if the query is valid results.append(\\"Invalid Query\\") else: subarray = elements[L-1:R] # Get the subarray using 1-based indices count = subarray.count(X) # Count the occurrences of X in subarray results.append(count) return results"},{"question":"Luke is training a team of developers for a coding competition. He has a sequence of strings, each string representing a problem where each character denotes the difficulty of a specific subtask (\'a\' being the easiest and \'z\' the hardest). Luke wants to ensure that the developers practice on problems with increasing difficulty levels. A problem is considered suitable if no character appears more than once and characters are in strictly increasing alphabetical order. For each problem string, determine whether it is suitable for practice or not. -----Input----- The first line contains a single integer t (1 le t le 100), the number of test cases. Each of the next t lines contains a string p (1 le |p| le 50), representing a problem where each character denotes the difficulty of a specific subtask. -----Output----- For each test case, print \\"YES\\" if the problem string is suitable for practice, otherwise print \\"NO\\". -----Examples----- Input 4 abc acb aaa def Output YES NO NO YES -----Note----- In the first example, \\"abc\\" is a valid problem string as the characters appear exactly once and are in strictly increasing order. In the second example, \\"acb\\" is not valid because the characters are not in strictly increasing order. In the third example, \\"aaa\\" is not valid because the character \'a\' appears more than once. In the fourth example, \\"def\\" is a valid problem string as the characters appear exactly once and are in strictly increasing order.","solution":"def is_suitable_problem(problem): Determines if a given problem string is suitable for practice. A problem string is suitable if characters are unique and in strictly increasing order. return list(problem) == sorted(problem) and len(set(problem)) == len(problem) def check_problems(t, problems): For a given number of test cases and list of problem strings, checks each problem string and returns a list of results. result = [] for problem in problems: if is_suitable_problem(problem): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Given a singly linked list of size N, your task is to complete the function reverseKGroup() that reverses the nodes of the list k at a time and returns the modified list. The values in the nodes will be represented as ints. You may not alter the values in the nodes, only the nodes themselves may be changed. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. Input Format: First line of input contains number of test cases T. For each test case, the first line contains the size of the linked list N and the value of k, and the next line contains the elements of the linked list. Output Format: For each test case, print the linked list after modifying it in the required way. Print the result for each test case in a new line. User Task: The task is to complete the function reverseKGroup() which takes the head of the linked list and the integer k as parameters and returns the head of the modified list. The printing is done by the driver code. Constraints: 1 <= T <= 100 1 <= N <= 100 1 <= k <= 100 Example: Input: 2 8 3 1 2 3 4 5 6 7 8 10 2 1 2 3 4 5 6 7 8 9 10 Output: 3 2 1 6 5 4 7 8 2 1 4 3 6 5 8 7 10 9 Explanation: Testcase 1: After reversing every group of size 3, at first, we reverse 1 2 3 into 3 2 1, then 4 5 6 into 6 5 4, and finally, since we don’t have enough nodes to form a group of 3, 7 8 remain in the same order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): if head is None or k == 1: return head dummy = ListNode(0) dummy.next = head current, prev, nxt = head, dummy, None # Count the length of the linked list length = 0 while current: length += 1 current = current.next while length >= k: current = prev.next nxt = current.next for _ in range(1, k): current.next = nxt.next nxt.next = prev.next prev.next = nxt nxt = current.next prev = current length -= k return dummy.next"},{"question":"Given an integer array `A` of size `N`, determine whether the array can be sorted in non-decreasing order by performing at most one operation. In a single operation, you can increase or decrease any element of the array by 1. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line of each test case contains N space-separated integers A_1, A_2, dots, A_N. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if the array can be sorted in non-decreasing order with at most one operation or \\"NO\\" if it cannot (without quotes). You may print each character of the string in uppercase or lowercase (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 10^3 -10^9 ≤ A_i ≤ 10^9 ----- Sample Input 1 ------ 3 4 1 5 3 4 3 2 1 2 5 4 2 3 1 5 ----- Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Example case 1: By reducing 5 to 4, the array becomes [1, 4, 3, 4], which is sorted in non-decreasing order. Example case 2: By increasing 1 to 2, the array becomes [2, 2, 2], which is sorted in non-decreasing order. Example case 3: There is no single element adjustment that can make the array [4, 2, 3, 1, 5] sorted in non-decreasing order.","solution":"def can_be_sorted_with_one_operation(T, test_cases): results = [] for t in range(T): N, A = test_cases[t] count = 0 for i in range(N - 1): if A[i] > A[i + 1]: count += 1 if count > 1: results.append(\\"NO\\") break if i > 0 and A[i-1] > A[i+1] and i + 2 < N and A[i] > A[i+2]: results.append(\\"NO\\") break else: results.append(\\"YES\\") return results"},{"question":"Alice is trying to manage her finances by tracking her daily expenses for the next n days. She wants to know the maximum amount of money spent over any consecutive period of days that includes exactly k days. Each day she spends a certain amount, and she wants to optimize her spending by analyzing these periods. Can you help Alice find that maximum amount? -----Input----- The first line contains two integers n (1 le n le 2cdot10^5) and k (1 le k le n) — the number of days and the number of consecutive days to consider, respectively. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^4), where a_i is the amount of money spent on the i-th day. -----Output----- Print the maximum amount of money spent over any consecutive period of exactly k days. -----Examples----- Input 7 3 1 2 3 4 5 6 7 Output 18 Input 5 2 4 2 3 5 1 Output 8 Input 6 4 1 1 1 1 1 7 Output 10 -----Note----- In the first example, the maximum amount spent over any consecutive period of 3 days is 6 + 7 + 5 = 18. In the second example, the maximum amount spent over any consecutive period of 2 days is 3 + 5 = 8. In the third example, the maximum amount spent over any consecutive period of 4 days is 1 + 1 + 1 + 7 = 10.","solution":"def max_spent_over_k_days(n, k, expenses): Returns the maximum amount spent over any consecutive period of exactly k days. current_sum = sum(expenses[:k]) max_sum = current_sum for i in range(k, n): current_sum += expenses[i] - expenses[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task You are given an array `heights` representing the heights of students in a line. You are asked to sort the students by their heights in non-decreasing order. However, there may be a number of students wearing high-heels, represented by a separate array `heels`, of the same length as `heights`, indicating the height added by the heels each student is wearing. Calculate the order of students after accounting for the heights added by the heels they are wearing and return the sorted `heights` array. # Input - `heights`: An integer array representing the heights of students. - `1 <= heights.length <= 30` - `1 <= heights[i] <= 200` - `heels`: An integer array representing the heights added by the heels. - `heels.length == heights.length` - `0 <= heels[i] <= 20` # Output An integer array representing the heights of students sorted in non-decreasing order after accounting for the height added by the heels. # Example For `heights = [150, 160, 155]` and `heels = [5, 0, 10]`, the output should be `[160, 165, 170]`. ``` After accounting for the heels: Student 1: 150 + 5 = 155 Student 2: 160 + 0 = 160 Student 3: 155 + 10 = 165 The sorted order after adding heels is [155, 160, 165] ```","solution":"def sort_students_with_heels(heights, heels): Returns the sorted heights of students after accounting for the added height from heels. # Calculate the actual heights by adding heels actual_heights = [height + heel for height, heel in zip(heights, heels)] # Sort the actual heights sorted_heights = sorted(actual_heights) return sorted_heights"},{"question":"You are given a string S consisting of lowercase English letters, and you can perform the following operation any number of times: - Operation: Choose a substring that consists of the same character repeated one or more times (for example, \\"aaa\\" or \\"bbbb\\"), and remove this substring from S. Determine the minimum number of operations required to make the string empty. ---- Constraints ---- - 1 ≤ |S| ≤ 100,000 - S consists of lowercase English letters. ---- Input ---- Input is given from Standard Input in the following format: S ---- Output ---- Print the minimum number of operations required to make the string empty. ---- Sample Input ---- aaabbbcc ---- Sample Output ---- 3 --- Explanation --- - Operation 1: Remove \\"aaa\\" -> S becomes \\"bbbcc\\" - Operation 2: Remove \\"bbb\\" -> S becomes \\"cc\\" - Operation 3: Remove \\"cc\\" -> S becomes an empty string.","solution":"def min_operations_to_empty_string(S): Returns the minimum number of operations required to make the string empty by removing contiguous substrings consisting of the same character. n = len(S) if n == 0: return 0 operations = 1 for i in range(1, n): if S[i] != S[i - 1]: operations += 1 return operations"},{"question":"Palindrome Checker === Description --- A palindrome is a word, phrase, number, or other sequences of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). For instance, \\"madam\\" and \\"racecar\\" are palindromes, while \\"hello\\" is not. Task --- Your task is to complete the function **is_palindrome(s)** that takes a string `s` as input and returns `True` if `s` is a palindrome; otherwise, it returns `False`. The function will ignore all spaces, punctuation, and capitalization when determining if the string is a palindrome. Examples: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") # returns True is_palindrome(\\"No \'x\' in Nixon\\") # returns True is_palindrome(\\"Hello, World!\\") # returns False ``` Notes: - Consider only alphanumeric characters. - The function should be case-insensitive.","solution":"import re def is_palindrome(s): Returns True if the string s is a palindrome, False otherwise. Ignores spaces, punctuation, and capitalization. s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return s == s[::-1]"},{"question":"The Kingdom of XYZ has a unique chess game played on an infinite chessboard. Each piece on this chessboard is called a \\"knight\\", and it has the same movement rules as a knight in standard chess. For those unfamiliar, a knight in chess moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. From a given starting position, a knight has up to 8 possible moves (assuming no board edges to fall off). In this problem, each knight\'s task is to determine the minimum number of moves required to reach a target position on the infinite chessboard. ------ Input: ------ The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of two lines: - The first line contains two space-separated integers sx and sy, representing the starting position of the knight. - The second line contains two space-separated integers tx and ty, representing the target position the knight wants to reach. ------ Output: ------ For each test case, output a single integer representing the minimum number of moves the knight needs to reach the target position. If it is not possible to reach the position, return -1. ------ Constraints: ------ 1 ≤ T ≤ 1000 -10^9 ≤ sx, sy, tx, ty ≤ 10^9 ----- Sample Input 1 ------ 2 0 0 1 2 0 0 3 3 ----- Sample Output 1 ------ 1 2 ----- Explanation 1 ------ In game 1: The knight is initially placed at position (0, 0) on the infinite chessboard and needs to reach (1, 2). They can achieve this in one move since the knight moves in an \\"L\\" shape. In game 2: The knight is initially placed at position (0, 0) and needs to reach (3, 3). The knight can achieve this in two moves: (0, 0) -> (1, 2) -> (3, 3).","solution":"from collections import deque # Possible moves for the knight moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)] def bfs_knight_min_moves(sx, sy, tx, ty): if sx == tx and sy == ty: return 0 # Use a queue to perform BFS queue = deque([(sx, sy, 0)]) # stores (current x, current y, current distance) visited = set((sx, sy)) # set to keep track of visited positions while queue: x, y, dist = queue.popleft() for dx, dy in moves: nx, ny = x + dx, y + dy if (nx, ny) == (tx, ty): return dist + 1 if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # should never reach here for an infinite chessboard def minimum_knight_moves(test_cases): results = [] for sx, sy, tx, ty in test_cases: results.append(bfs_knight_min_moves(sx, sy, tx, ty)) return results"},{"question":"John loves palindromes. While working on a new project, he got an interesting challenge from his mentor. John has a string `s` consisting of lowercase English letters. His goal is to find the longest palindromic substring within `s`. If there are multiple longest palindromic substrings, he needs to choose the one that appears first. Given his enthusiasm for coding, John is determined not to get any Wrong Answers. Can you help him solve this problem? -----Input----- The only line contains a string `s` (1 le |s| le 10^5). -----Output----- Print the longest palindromic substring in `s`. If there are many possible palindromic substrings of the same length, print the one that appears first. -----Examples----- Input abacdfgdcaba Output aba Input cbbd Output bb Input a Output a -----Note----- In the first test, the longest palindromic substring is \\"aba\\", which appears first in the provided string. In the second test, the longest palindromic substring is \\"bb\\". In the third test, the entire string is a single letter \\"a\\", which is also a palindrome.","solution":"def longest_palindromic_substring(s: str) -> str: Finds the longest palindromic substring in a given string. Parameters: s (str): The input string. Returns: str: The longest palindromic substring. n = len(s) if n == 0: return \\"\\" # Initialize a table to store information about palindromes table = [[False for x in range(n)] for y in range(n)] max_length = 1 start = 0 # All substrings of length 1 are palindromes for i in range(n): table[i][i] = True # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: table[i][i+1] = True start = i max_length = 2 # Check for substrings of length greater than 2 for k in range(3, n+1): for i in range(n - k + 1): j = i + k - 1 # Ending index of the current substring # Check if the current substring is palindrome if s[i] == s[j] and table[i+1][j-1]: table[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"You are given an n x n grid of cells filled with different integers. Your task is to identify if there exists a \\"magic square\\" of size 3x3 within this grid. A \\"magic square\\" is a 3x3 grid where every row, column, and both diagonals all sum to the same value. Input The first line contains an integer n (3 ≤ n ≤ 50) — the size of the grid. Each of the next n lines contains n integers separated by spaces — the grid of integers. Output Print \\"YES\\" if there exists at least one 3x3 \\"magic square\\" within the grid. Otherwise, print \\"NO\\". Examples Input 4 4 9 2 3 3 5 7 8 8 1 6 3 2 7 6 9 Output YES Input 5 4 8 2 4 9 3 5 7 23 5 8 1 6 4 1 1 9 8 2 7 2 7 6 9 3 Output NO Note In the first example, you can see that the 3x3 grid from the elements [4, 9, 2], [3, 5, 7], and [8, 1, 6] forms a magic square, therefore the output is \\"YES\\". In the second example, no such 3x3 magic square can be found.","solution":"def is_magic_square(matrix, row, col): Helper function to check if a 3x3 grid with top-left corner at (row, col) is a magic square. s = set() # Sum of the first row magic_sum = sum(matrix[row][col:col+3]) for i in range(3): if sum(matrix[row+i][col:col+3]) != magic_sum: return False s.update(matrix[row+i][col:col+3]) for j in range(3): col_sum = sum(matrix[row+i][col+j] for i in range(3)) if col_sum != magic_sum: return False # Sum of diagonals if sum(matrix[row+i][col+i] for i in range(3)) != magic_sum: return False if sum(matrix[row+i][col+2-i] for i in range(3)) != magic_sum: return False return len(s) == 9 # There should be exactly 9 distinct values def contains_magic_square(grid): Returns \\"YES\\" if the grid contains any magic square of size 3x3, otherwise \\"NO\\". n = len(grid) for i in range(n - 2): for j in range(n - 2): if is_magic_square(grid, i, j): return \\"YES\\" return \\"NO\\""},{"question":"Implement a function named `maxProductSubarray` that takes in a single input: an array of integers `arr`. The function should return the maximum product of a contiguous subarray. ------ Input Format ------ - The first line contains an integer `n`, the number of elements in the array. - The second line contains `n` integers, representing the elements of the array. ------ Output Format ------ - Print a single integer, the maximum product of a contiguous subarray. ------ Constraints ------ 1 ≤ n ≤ 10^5 -10 ≤ arr[i] ≤ 10, where arr[i] is an element of the array. ------ Sample Input 1 ------ 5 2 3 -2 4 -1 ------ Sample Output 1 ------ 48 ------ Explanation 1 ------ The maximum product of a contiguous subarray is achieved by the subarray `[2, 3, -2, 4, -1]`, which has a product of 2 * 3 * (-2) * 4 * (-1) = 48. ------ Sample Input 2 ------ 3 -2 0 -1 ------ Sample Output 2 ------ 0 ------ Explanation 2 ------ The maximum product of a contiguous subarray is achieved by the subarray `[0]`, which has a product of 0.","solution":"def maxProductSubarray(arr): if not arr: return 0 max_product = min_product = result = arr[0] for num in arr[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result # Example usage: # n = 5 # arr = [2, 3, -2, 4, -1] # print(maxProductSubarray(arr)) # Output: 48 # n = 3 # arr = [-2, 0, -1] # print(maxProductSubarray(arr)) # Output: 0"},{"question":"A car dealership needs to manage its inventory and sales of cars. Each car has a unique identifier, its make, model, and year of manufacture. The dealership also keeps track of the sale date and the price for each sold car. Create a function that takes a list of cars sold, where each car sale is represented by a dictionary containing `id`, `make`, `model`, `year`, `sale_date`, and `price` and returns a summary of total sales by make and year. The summary should be a dictionary where keys are tuples of (make, year) and values are the corresponding total sales amount for that make and year. # Function Signature: ```python def car_sales_summary(sales: List[Dict[str, Union[int, str]]]) -> Dict[Tuple[str, int], float]: ``` Example Input: ```python sales = [ {\\"id\\": 1, \\"make\\": \\"Toyota\\", \\"model\\": \\"Camry\\", \\"year\\": 2018, \\"sale_date\\": \\"2021-05-21\\", \\"price\\": 15000}, {\\"id\\": 2, \\"make\\": \\"Honda\\", \\"model\\": \\"Civic\\", \\"year\\": 2020, \\"sale_date\\": \\"2021-03-15\\", \\"price\\": 20000}, {\\"id\\": 3, \\"make\\": \\"Toyota\\", \\"model\\": \\"Corolla\\", \\"year\\": 2018, \\"sale_date\\": \\"2021-06-01\\", \\"price\\": 13000}, {\\"id\\": 4, \\"make\\": \\"Honda\\", \\"model\\": \\"Accord\\", \\"year\\": 2020, \\"sale_date\\": \\"2021-07-17\\", \\"price\\": 18000}, ] ``` Output: ```python { (\\"Toyota\\", 2018): 28000, (\\"Honda\\", 2020): 38000, } ``` # Constraints: - Each car in the list has a unique `id`. - The `year` is a four-digit integer. - The `sale_date` is a string in the format `yyyy-mm-dd`. - The `price` is a non-negative float. - The `sales` list can contain up to 100,000 car sale records.","solution":"from typing import List, Dict, Tuple, Union def car_sales_summary(sales: List[Dict[str, Union[int, str]]]) -> Dict[Tuple[str, int], float]: summary = {} for sale in sales: key = (sale[\'make\'], sale[\'year\']) if key in summary: summary[key] += sale[\'price\'] else: summary[key] = sale[\'price\'] return summary"},{"question":"A well-known city named Edenville has recently launched an ambitious initiative to enhance its public transportation network. The city plans to introduce a system of electric buses that will significantly reduce travel time between neighborhoods. Each neighborhood will have a bus stop, and the buses will travel permissible routes with specific travel times in between. To maximize efficiency, the city wants to analyze the connectivity of the routes to ensure every neighborhood can be reached from every other neighborhood, either directly or through some sequence of bus rides. Your task is to determine if the current proposed routes ensure that this condition is met. We model the city\'s neighborhoods and bus routes as a directed graph where each neighborhood is represented by a node and each route by a directed edge with a specified travel time. -----Input----- The first line of input contains two integers N (1 leq N leq 10000), the number of neighborhoods, and M (0 leq M leq 50000), the number of directed bus routes in Edenville. Then follow M lines, each containing three integers U, V, T where 1 leq U, V leq N, and 1 leq T leq 1000. Each line indicates a bus route from neighborhood U to neighborhood V that takes T units of time. It is guaranteed that there are no self-loops. -----Output----- Output a single word: \\"YES\\" if every neighborhood can be reached from every other neighborhood; otherwise, output \\"NO\\". -----Examples----- Sample Input: 4 5 1 2 10 2 3 10 3 4 10 4 1 10 2 4 5 Sample Output: YES Sample Input: 4 3 1 2 10 3 4 10 4 3 10 Sample Output: NO","solution":"from collections import defaultdict, deque def can_reach_all_neighborhoods(N, M, routes): def bfs(start, graph): visited = [False] * (N+1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited if N == 1: return \\"YES\\" graph = defaultdict(list) reversed_graph = defaultdict(list) for u, v, t in routes: graph[u].append(v) reversed_graph[v].append(u) visited_from_start = bfs(1, graph) if not all(visited_from_start[1:]): return \\"NO\\" visited_from_start_rev = bfs(1, reversed_graph) if not all(visited_from_start_rev[1:]): return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid with R rows and C columns. Each cell in the grid contains a non-negative integer representing the amount of gold in that cell. The grid is traversable from the top-left corner (0,0) to the bottom-right corner (R-1,C-1). However, you are only allowed to move to the right or down at each step. Your task is to determine the path from the top-left corner to the bottom-right corner which maximizes the sum of the amounts of gold collected. # Constraints * 1 ≤ R, C ≤ 1000 * 0 ≤ grid[i][j] ≤ 10^5 # Input The input is given in the following format: ``` R C grid_11 grid_12 ... grid_1C grid_21 grid_22 ... grid_2C ... grid_R1 grid_R2 ... grid_RC ``` # Output Print a single integer, the maximum sum of gold that can be collected. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` Explanation: The path that collects the most gold is 1 → 3 → 5 → 2 → 1, which sums to 12. # Notes - You can only move right or down at each step. - Ensure your solution efficiently handles the upper limits of the constraints.","solution":"def max_gold(R, C, grid): # Create a 2D list to store the maximum gold till each cell dp = [[0] * C for _ in range(R)] # Initialize the first cell with the amount of gold in grid[0][0] dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, R): for j in range(1, C): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) # The answer is the maximum gold in the bottom-right corner cell return dp[R-1][C-1] # Read input values def read_input(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for i in range(R): grid.append([int(data[index + j]) for j in range(C)]) index += C return R, C, grid if __name__ == \\"__main__\\": R, C, grid = read_input() print(max_gold(R, C, grid))"},{"question":"Write a function that takes a string of space-separated words and returns the length of the shortest word. For example: ``` \\"The quick brown fox jumps over the lazy dog\\" ``` In this case, the shortest word is \'The\', \'fox\', or \'the\' with a length of 3, so the function should return 3. The input is guaranteed to be a non-empty string of alphanumeric characters and spaces, and there will be at least one word in the string. No need to handle punctuation.","solution":"def find_shortest_word_length(s): This function takes a string of space-separated words and returns the length of the shortest word. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You are given two integers m and n representing the number of rows and columns in a grid, respectively. Every cell in this grid has a light that can either be turned on or off, represented by 1 and 0 respectively. Initially, all the lights are off. A move in this grid consists of choosing any cell and toggling the state of that cell and all cells adjacent to it (up, down, left, and right). Toggling means switching the state from 0 to 1 or from 1 to 0. If a cell is on the boundary or at a corner, only the existing adjacent cells are toggled. Your goal is to identify the minimum number of moves required to turn on all the lights in the grid. -----Input----- The input consists of multiple test cases. The first line of input is an integer t (1 le t le 50) — the number of test cases. For each of the next t test cases: - The first line contains two integers m and n (1 le m, n le 10). -----Output----- For each test case, output one integer: the minimum number of moves required to turn on all the lights in the grid. -----Example----- Input 2 2 2 3 3 Output 4 9 -----Note----- In the first test case of the sample, a 2 times 2 grid requires each cell to be toggled once to turn on all lights. In the second test case, each toggle affects itself and its adjacent cells, making each toggle turn on multiple lights. The minimum number of moves may be up to n times m if all cells are separate toggles.","solution":"def min_moves_to_all_lights(m, n): Returns the minimum number of moves required to turn on all lights in an m x n grid. # Since toggling one cell affects its neighbors, we can consider the minimum moves # as the coverage needed to turn on all lights. Essentially, to be comprehensive in # cases where grid sizes are small (1 up to 10 in this problem\'s constraints), every # single cell needs to be toggled independently at least once. # The minimum number of moves required is equal to m * n as each move toggles 1 cell # and its adjacent cells. return m * n def process_input(inputs): Processes the given input for multiple test cases and returns the results. test_cases = int(inputs[0]) results = [] index = 1 for _ in range(test_cases): m, n = map(int, inputs[index].split()) result = min_moves_to_all_lights(m, n) results.append(result) index += 1 return results"},{"question":"# Task You are given an array `arr` of distinct integers. Your task is to rearrange the elements of `arr` such that the resulting array has its elements reordered in a specific way: 1. The first element should be the smallest element in the original array. 2. The second element should be the largest element in the original array. 3. The third element should be the second smallest element in the original array. 4. The fourth element should be the second largest element in the original array. 5. The pattern continues until all elements are placed in the resulting array. # Example For `arr = [5, 1, 3, 9, 7]`, the result should be `[1, 9, 3, 7, 5]`. # Input/Output - `[input]` array of integers `arr` A list of distinct integers where `2 <= length <= 10^5`. - `[output]` an array of integers The rearranged array following the specified pattern.","solution":"def rearrange_array(arr): Rearrange elements of `arr` such that it follows the specified pattern: 1. The first element is the smallest. 2. The second element is the largest. 3. The third element is the second smallest. 4. The fourth element is the second largest. And so on. arr_sorted = sorted(arr) result = [] i, j = 0, len(arr) - 1 while i <= j: if i == j: result.append(arr_sorted[i]) else: result.append(arr_sorted[i]) result.append(arr_sorted[j]) i += 1 j -= 1 return result"},{"question":"David is managing a library system where each book needs to be tracked for borrowing and returning activities. He noticed that the process of organizing the borrowing records is quite complicated because each book can be borrowed and returned multiple times in a day. To simplify the management, he decided to implement a log consolidation system. Here is how the system works: for each book, he will list all unique days when the activity (borrowing or returning) occurred in ascending order. Your task is to write a program that consolidates this borrowing log. Input: - The program will first receive an integer n (1 ≤ n ≤ 10^5), the number of entries in the borrowing log. - The next n lines will each contain a log entry in the format `book_id date`, where `book_id` is a string identifying the book (with a length of up to 10 characters consisting of alphanumeric characters) and `date` is a date in the `YYYY-MM-DD` format. Output: - For each book, output its `book_id` followed by a list of unique activity dates in ascending order, each on a new line. Example: Input: ``` 5 book1 2021-03-15 book2 2021-03-15 book1 2021-03-16 book1 2021-03-15 book2 2021-03-14 ``` Output: ``` book1 2021-03-15 2021-03-16 book2 2021-03-14 2021-03-15 ```","solution":"def consolidate_borrowing_log(n, entries): from collections import defaultdict # Dictionary to store the dates for each book_id log = defaultdict(set) for entry in entries: book_id, date = entry.split() log[book_id].add(date) # Prepare the final output in the required format result = [] for book_id in sorted(log.keys()): dates = sorted(log[book_id]) result.append(f\\"{book_id} \\" + \\" \\".join(dates)) return result"},{"question":"Ann has a collection of sticks of varying lengths. She wants to form a specific number of k rectangles using these sticks. To form a rectangle, she needs four sides: two pairs of sticks of the same length. Ann can group the sticks in such a way that every side of the rectangle is made up of two paired sticks of the same length. Write a program to help Ann determine if it is possible to form exactly k rectangles with the sticks she has and if so, find the lengths of the sticks that would form these rectangles. # Input - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4), where n is the number of sticks and k is the number of rectangles Ann wants to form. - The second line contains n integers, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the length of each stick. # Output - Output \\"YES\\" on the first line if it is possible to form exactly k rectangles using the given sticks. - If possible, on the second line, output the lengths of the sticks that form these rectangles in the format `l1 l2 ... ln` where l1, l2 are the lengths of the sticks forming the first rectangle, l3, l4 for the second, and so on. - If it is not possible, output \\"NO\\". # Examples Input ``` 8 2 4 4 4 4 6 6 6 6 ``` Output ``` YES 4 4 6 6 ``` Input ``` 6 2 4 4 4 4 6 6 ``` Output ``` NO ``` Input ``` 12 3 8 8 8 8 10 10 10 10 12 12 12 12 ``` Output ``` YES 8 8 10 10 ``` # Note In the first example, it is possible to form 2 rectangles using the given sticks, each rectangle has sides of lengths 4 and 6. In the second example, having only 6 sticks, it\'s not possible to form 2 rectangles as each rectangle requires 4 sides. In the last example, it is possible to form 3 rectangles with lengths 8 and 10.","solution":"from collections import Counter def can_form_k_rectangles(n, k, sticks): Determines if k rectangles can be formed with the given sticks. if n < 4 * k: return \\"NO\\", [] stick_count = Counter(sticks) pairs = [] for stick in sorted(stick_count.keys(), reverse=True): while stick_count[stick] >= 2: stick_count[stick] -= 2 pairs.append(stick) if len(pairs) >= 2 * k: break if len(pairs) >= 2 * k: break if len(pairs) >= 2 * k: return \\"YES\\", pairs[:2 * k] else: return \\"NO\\", [] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) sticks = list(map(int, data[2:2+n])) result, pairs = can_form_k_rectangles(n, k, sticks) if result == \\"YES\\": print(result) print(\\" \\".join(map(str, pairs))) else: print(result)"},{"question":"*** Matrix Diagonal Sum *** Consider an NxN matrix. Your task is to write a function that takes a square matrix (a list of lists) as input and returns the absolute difference between the sums of its diagonals. For example: ```python matrix_sum_diff([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) = 0 # Because (1+5+9) - (3+5+7) = 0 matrix_sum_diff([ [11, 2, 4], [ 4, 5, 6], [10, 8, -12] ]) = 15 # Because (11+5-12) - (4+5+10) = 15 ``` Write a function `matrix_sum_diff(matrix)` that takes in an NxN matrix (a list of N lists, each containing N integers) and returns the absolute difference of the sums of the matrix\'s two diagonals.","solution":"def matrix_sum_diff(matrix): This function takes a square matrix and returns the absolute difference between the sums of its two diagonals. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"You are given an archipelago composed of N islands connected by M bridges. Each island is identified by a unique integer from 1 to N, and each bridge connects exactly two islands and has a length associated with it. Your task is to determine the minimum cost to connect all the islands so that all islands are reachable from any other island (i.e., make the archipelago fully connected). If it is impossible to connect all islands, print -1. The following operations need to be performed: - You can remove any bridge. - You can keep any bridge. You must find the minimum total length of the bridges needed to keep the archipelago connected with all islands reachable from each other. You need to output -1 if it is impossible. ------ Input ------ The first line contains two integers N and M (1 ≤ N, M ≤ 100,000) — the number of islands and bridges, respectively. Each of the next M lines contains three integers U, V, and L (1 ≤ U, V ≤ N, 1 ≤ L ≤ 10^9) — which denotes a bridge between islands U and V with length L. Multiple bridges between the same pair of islands are allowed. ------ Output ------ Print a single integer — the minimum total length of the bridges required to make all islands reachable from each other, or -1 if it is impossible. ------ Sample Input 1 ------ 4 5 1 2 1 2 3 2 3 4 3 4 1 4 2 4 5 ------ Sample Output 1 ------ 6 ------ Explanation 1 ------ A possible way to connect all islands with the minimum total length is by keeping the bridges 1-2 (length 1), 2-3 (length 2), and 3-4 (length 3). The total length is 1+2+3=6. ------ Sample Input 2 ------ 4 2 1 2 10 3 4 15 ------ Sample Output 2 ------ -1 ------ Explanation 2 ------ It is impossible to connect all the islands as there are no bridges connecting the two pairs (1, 2) and (3, 4).","solution":"def min_cost_to_connect_islands(N, M, bridges): Determines the minimum cost to connect all islands in the archipelago. Parameters: N (int): Number of islands. M (int): Number of bridges. bridges (list of tuples): Each tuple contains three integers U, V, L representing a bridge between islands U and V with length L. Returns: int: Minimum cost to make all islands reachable from each other. Returns -1 if impossible. from heapq import heappop, heappush parent = list(range(N + 1)) rank = [0] * (N + 1) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: if rank[root_u] > rank[root_v]: parent[root_v] = root_u elif rank[root_u] < rank[root_v]: parent[root_u] = root_v else: parent[root_v] = root_u rank[root_u] += 1 edges = [] for u, v, l in bridges: heappush(edges, (l, u, v)) total_cost = 0 edges_used = 0 while edges and edges_used < N - 1: l, u, v = heappop(edges) if find(u) != find(v): union(u, v) total_cost += l edges_used += 1 # Check if we have used exactly N-1 edges if edges_used == N - 1: return total_cost else: return -1"},{"question":"A small company has several projects that need to be completed. Each project has a specific start day and end day, during which the project must be actively worked on. The company has only one team, so they can work on only one project at a time. Your task is to determine the maximum number of non-overlapping projects that the company can complete. # Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of projects. - The next n lines each contain two integers s and e (1 ≤ s < e ≤ 1000) representing the start and end days of each project. # Output Print a single integer, the maximum number of non-overlapping projects that can be completed. # Examples Input 3 1 2 2 4 3 5 Output 2 Input 4 1 3 2 5 7 9 6 8 Output 2 Input 5 1 4 3 5 0 6 5 7 8 9 Output 3 # Note In the first example, the company can complete the first project from day 1 to day 2, skip the second project, and then complete the third project from day 3 to day 5. In the second example, one of the best selections is to complete the first project and then the third project, skipping the second and fourth. In the third example, the company can complete the first project, skip the second and third, and complete the fourth and fifth projects.","solution":"def max_non_overlapping_projects(n, projects): Determines the maximum number of non-overlapping projects. Parameters: n (int): The number of projects. projects (list of tuples): List of projects where each project is a tuple (s, e) with s as start day and e as end day. Returns: int: The maximum number of non-overlapping projects that can be completed. # Sort the projects based on their end time projects.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for s, e in projects: if s >= last_end_time: count += 1 last_end_time = e return count"},{"question":"You are tasked with managing an e-commerce site, and you need to ensure that your sorting algorithm for listing products is efficient and follows certain rules. Each product is represented by a tuple consisting of its name, price, and rating. You\'re required to sort the products based on the following criteria: 1. Primarily by price in descending order (higher price first). 2. If two products have the same price, sort them by rating in ascending order (lower rating first). 3. If two products have the same price and rating, sort them by name in lexicographical order. Write a function to implement this sorting algorithm. The function should take a list of tuples as input and return the sorted list of tuples. -----Input----- The input consists of a list of tuples where each tuple represents a product. Each tuple contains three elements: - A string `name` (1 leq text{len(name)} leq 100). - An integer `price` (1 leq text{price} leq 10^6). - A float `rating` (0 leq text{rating} leq 5). The list contains between 1 and 10^5 tuples. -----Output----- Return the list of tuples sorted based on the criteria mentioned above. -----Examples----- Input products = [(\\"laptop\\", 1000, 4.5), (\\"phone\\", 500, 4.7), (\\"tablet\\", 1000, 4.0), (\\"smartwatch\\", 500, 4.3), (\\"monitor\\", 1500, 4.8)] Output [(\\"monitor\\", 1500, 4.8), (\\"laptop\\", 1000, 4.0), (\\"tablet\\", 1000, 4.0), (\\"smartwatch\\", 500, 4.3), (\\"phone\\", 500, 4.7)] -----Note----- In the given example, the products are sorted primarily by price in descending order. For products with the same price, they are sorted by rating in ascending order. If two products have the same price and rating, they are sorted by their name lexicographically. The product \\"monitor\\" comes first as it has the highest price (1500). Among the products with price 1000, \\"laptop\\" comes before \\"tablet\\" because \\"tablet\\" has a lower rating. Products with the same price and rating are sorted by name.","solution":"def sort_products(products): Sorts a list of products based on the given criteria: 1. Primarily by price in descending order. 2. If two products have the same price, sort them by rating in ascending order. 3. If two products have the same price and rating, sort them by name in lexicographical order. Args: products (list of tuples): List of products where each product is represented by a tuple (name, price, rating) Returns: list of tuples: Sorted list of products based on the specified criteria. products_sorted = sorted(products, key=lambda x: (-x[1], x[2], x[0])) return products_sorted"},{"question":"You are given a 2D matrix `mat` of size `n x m` and an array of queries, where each query consists of four integers [x1, y1, x2, y2]. For each query, compute the sum of all elements in the submatrix defined by its top-left corner at (x1, y1) and bottom-right corner at (x2, y2). Return an array containing the result for each query. Example: Input: mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ], queries = [[0,0,1,1], [1,1,2,2], [0,0,2,2]] Output: [12, 28, 45] Explanation: Query 1 - Sum of submatrix from (0,0) to (1,1) is 1+2+4+5 = 12 Query 2 - Sum of submatrix from (1,1) to (2,2) is 5+6+8+9 = 28 Query 3 - Sum of submatrix from (0,0) to (2,2) is 1+2+3+4+5+6+7+8+9 = 45 Constraints: 1 <= n, m <= 500 1 <= mat[i][j] <= 1000 1 <= queries.length <= 10^4 0 <= x1 <= x2 < n 0 <= y1 <= y2 < m","solution":"def submatrix_sum(mat, queries): Returns the sum of all elements in the submatrix defined by its top-left corner at (x1, y1) and bottom-right corner at (x2, y2) for each query in queries. n = len(mat) m = len(mat[0]) # Precompute the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = mat[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j] def query_sum(x1, y1, x2, y2): return (prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x1][y2 + 1] - prefix_sum[x2 + 1][y1] + prefix_sum[x1][y1]) # Process each query result = [] for query in queries: x1, y1, x2, y2 = query result.append(query_sum(x1, y1, x2, y2)) return result"},{"question":"Dmitry has a large rectangular garden which he wants to divide into smaller rectangular plots. Each plot should have an equal area and should be as large as possible. To achieve this, Dmitry needs to find the largest possible integer area for each of the smaller plots that the garden can be divided into. Given the dimensions of his garden, Dmitry wants your help to determine the maximum possible area of each of the smaller plots. The dimensions of the garden are provided as integers `m` and `n`, representing the length and the width of the garden, respectively. For example, if the garden has dimensions `m=6` and `n=9`, Dmitry can divide the garden into smaller plots with the maximal equal area of 9 square units, resulting in 6 plots of size 3x3. -----Input----- The first line contains one integer `t` (1 le t le 10^4) — the number of test cases. The next lines contain descriptions of `t` test cases. Each test case contains two integers `m` and `n` (1 le m, n le 10^9) — the dimensions of the garden. -----Output----- For each test case print one integer `a` in a separate line — the maximum possible area of each of the smaller plots. ---Example--- Input 5 6 9 12 15 24 36 7 3 100 1000 Output 9 60 72 3 100 ---Explanation--- In the first test case, the dimensions of the garden are 6 and 9. So, the largest possible equal area of the plots that can be made is 9 (3x3).","solution":"def gcd(a, b): while b: a, b = b, a % b return a def max_plot_area(m, n): greatest_common_divisor = gcd(m, n) return greatest_common_divisor ** 2 def solve_garden_division(test_cases): results = [] for m, n in test_cases: results.append(max_plot_area(m, n)) return results"},{"question":"---- Word Ladder ---- Given two words, beginWord and endWord, and a dictionary\'s word list, create a function to determine the length of the shortest transformation sequence from beginWord to endWord, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the word list. Note: - Return 0 if there is no such transformation sequence. - All words have the same length. - All words contain only lowercase alphabetic characters. - You may assume no duplicates in the word list. - You may assume beginWord and endWord are non-empty and are not the same. Example: ```python beginWord = \\"hit\\" endWord = \\"cog\\" wordList = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] # The ladder is: # \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" # The length of this sequence is 5 beginWord = \\"hit\\" endWord = \\"cog\\" wordList = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] # Since endWord \\"cog\\" is not in the wordList, the output should be 0 ``` Hint: Use breadth-first search (BFS) to find the shortest path.","solution":"from collections import deque def ladderLength(beginWord, endWord, wordList): Returns the length of the shortest transformation sequence from beginWord to endWord, such that only one letter is changed at a time and each transformed word must exist in wordList. if endWord not in wordList: return 0 wordList = set(wordList) # Convert to a set for faster lookups queue = deque([(beginWord, 1)]) while queue: current_word, steps = queue.popleft() if current_word == endWord: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordList: queue.append((next_word, steps + 1)) wordList.remove(next_word) # Remove the word to prevent re-visiting return 0"},{"question":"You are given a sequence of integers where each integer appears exactly twice, except for one integer which appears exactly once. Find the integer that appears only once. ---Input--- The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of elements in the sequence. The second line contains n integers where each integer appears exactly twice, except for one integer which appears exactly once. The integers are separated by spaces. ---Output--- In a single line, print the integer that appears only once. ---Examples--- Input 5 1 2 3 2 1 Output 3 Input 7 4 5 6 7 6 5 4 Output 7","solution":"def find_unique_element(n, elements): This function finds the element that appears only once in the given list where every other element appears twice. :param n: int - total number of elements in the list :param elements: list of int - the sequence of elements :return: int - the element that appears only once unique_element = 0 for element in elements: unique_element ^= element return unique_element"},{"question":"Aines is organizing a charity fundraising event and she wants to estimate the total donations collected from a series of events. She has a list of donations from different contributors for a number of events. Each donor contributes a specific amount, which can be positive or negative indicating a fee or refund. To motivate more donations, Aines has decided to consider three consecutive donations\' sums in each event and calculate the maximum sum among them. Please help Aines to find out the maximum of these triplet sums for each event. Input: The first line of the input contains an integer T denoting the number of events. The first line of every event contains an integer N indicating the number of donations. The second line of every event contains N space separated integers D_i denoting the donation amount for the i^{th} donation. Output: For each event, print the maximum triplet sum in a separate line. If there are fewer than 3 donations, print the maximum single donation instead. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 -10^4 ≤ D_i ≤ 10^4 Sample Input 2 5 10 -2 8 3 -1 3 2 1 2 Sample Output 19 5 Explanation In the first event, the different triplet sums are: 10 + (-2) + 8 = 16 -2 + 8 + 3 = 9 8 + 3 + (-1) = 10 The maximum sum is 16. In the second event, since there are exactly three donations, the sum is 2 + 1 + 2 = 5.","solution":"def max_triplet_sum(T, events): result = [] for event in events: N, donations = event if N < 3: result.append(max(donations)) else: max_sum = float(\'-inf\') for i in range(N - 2): current_sum = donations[i] + donations[i+1] + donations[i+2] max_sum = max(max_sum, current_sum) result.append(max_sum) return result"},{"question":"Tom loves visiting haunted houses every Halloween. This year, he has found a series of haunted houses arranged in a linear sequence. Each haunted house has a \\"scare factor\\" associated with it. Tom wants to maximize his scare experience by visiting a contiguous subset of these haunted houses. However, Tom has a peculiar condition: he must not visit two consecutive houses where the sum of their scare factors is less than or equal to zero (as that would diminish his scare experience significantly). Given the scare factors of the haunted houses, you need to help Tom calculate the maximum possible sum of scare factors for any valid contiguous subset of haunted houses he can visit. ------ Input Format ------ - The first line of input contains a single integer n, the number of haunted houses. - The second line contains n integers a_1, a_2, ..., a_n, where a_i represents the scare factor of the i-th haunted house. ------ Output Format ------ Print a single integer, the maximum possible sum of scare factors for any valid contiguous subset of haunted houses. ------ Constraints ------ 1 ≤ n ≤ 100,000 -10^4 ≤ a_i ≤ 10^4 ------ Sample Input 1 ------ 5 2 -1 3 7 -5 ------ Sample Output 1 ------ 12 ------ Explanation 1 ------ Tom can visit the haunted houses with scare factors [2, -1, 3, 7] to get the maximum possible scare, with a sum of 12. Note that although -1 is included, the sum of consecutive scare factors is still valid since 2 - 1 > 0 and -1 + 3 > 0. ------ Sample Input 2 ------ 4 -3 -2 -1 4 ------ Sample Output 2 ------ 4 ------ Explanation 2 ------ In this case, the best Tom can do is just to visit the last haunted house with a scare factor of 4, as any other subset will result in a negative or zero sum which is less optimal.","solution":"def max_scare_factor(n, scare_factors): This function returns the maximum possible sum of scare factors for any valid contiguous subset of haunted houses. if n == 0: return 0 max_sum = float(\'-inf\') current_sum = 0 last_valid_sum = float(\'-inf\') for i in range(n): if i == 0 or scare_factors[i-1] + scare_factors[i] > 0: current_sum = max(current_sum + scare_factors[i], scare_factors[i]) else: current_sum = scare_factors[i] max_sum = max(max_sum, current_sum) last_valid_sum = current_sum if scare_factors[i] > 0 else float(\'-inf\') return max_sum"},{"question":"# Problem Statement: G: Magical Pairs Luna loves to collect magical gemstones. She has an array of gemstones, where each gemstone has a magical value. Luna knows that the true power of the gemstones is revealed only when they are paired, specifically if the sum of their values is divisible by a given integer X. Luna wants to maximize the number of magical pairs she can form such that the sum of their values is divisible by X. Write a program to calculate the maximum number of magical pairs that Luna can form from the given array of gemstones. **Input:** - The first line contains two integers, N (the number of gemstones) and X (the divisor). - The second line contains N integers, which represent the magical values of the gemstones. **Output:** - Print a single integer that represents the maximum number of magical pairs that can be formed. **Constraints:** - ( N ) is an integer such that ( 1 leq N leq 100 ) - ( X ) is an integer such that ( 1 leq X leq 100 ) - Each gemstone\'s magical value is an integer between ( 1 ) and ( 100 ) **Example Input 1:** ``` 5 3 1 2 3 4 6 ``` **Example Output 1:** ``` 2 ``` **Example Input 2:** ``` 7 5 2 5 7 10 3 8 4 ``` **Example Output 2:** ``` 3 ``` **Explanation:** For **Example Input 1**, the pairs that can be formed are (1, 2) and (3, 6), both pairs sum up to values divisible by 3. Hence, the output is 2. For **Example Input 2**, the pairs that can be formed are (2, 3), (5, 10), and (7, 8), all summing up to values divisible by 5. Therefore, the output is 3.","solution":"def max_magical_pairs(n, x, gemstones): from collections import defaultdict count_remainders = defaultdict(int) for value in gemstones: remainder = value % x count_remainders[remainder] += 1 pairs = 0 for remainder in range((x // 2) + 1): if remainder == 0 or 2 * remainder == x: pairs += count_remainders[remainder] // 2 else: opposite_remainder = x - remainder possible_pairs = min(count_remainders[remainder], count_remainders[opposite_remainder]) pairs += possible_pairs count_remainders[remainder] -= possible_pairs count_remainders[opposite_remainder] -= possible_pairs return pairs"},{"question":"In this coding assessment, you are to implement a function `evaluate_expression(input_str)` that parses and evaluates simple mathematical expressions given as strings. These expressions can include: - Non-negative integers - Addition (`+`) - Subtraction (`-`) - Multiplication (`*`) - Division (`/`) - Parentheses for altering the default precedence The function should return the result of the evaluated expression as a float or an integer, as appropriate. Examples: ```python evaluate_expression(\\"3+5\\") # should return 8 evaluate_expression(\\"10-2*5\\") # should return 0 evaluate_expression(\\"(8+2)/2\\") # should return 5.0 evaluate_expression(\\"7+3*2/(1+1)\\") # should return 10 ``` You can assume that the input string is always a valid mathematical expression and will not contain any invalid characters or formats. Division by zero should be handled gracefully by returning `None`. Hints: - You may use recursion or stacks to handle parentheses. - Consider the order of operations while parsing the expression.","solution":"def evaluate_expression(input_str): Evaluates a simple mathematical expression given as a string. try: # Evaluate expression and return result result = eval(input_str, {\\"__builtins__\\": None}, {}) return result except ZeroDivisionError: return None except Exception as e: raise ValueError(\\"Invalid input expression\\") # Examples # print(evaluate_expression(\\"3+5\\")) # 8 # print(evaluate_expression(\\"10-2*5\\")) # 0 # print(evaluate_expression(\\"(8+2)/2\\")) # 5.0 # print(evaluate_expression(\\"7+3*2/(1+1)\\")) # 10"},{"question":"You are given a string containing only lowercase letters. You can perform the following operation any number of times (including zero): choose any two adjacent characters in the string and swap them. Your goal is to find the lexicographically smallest string that can be obtained by performing the operations allowed. -----Input----- A single line of input containing a string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. -----Output----- Output a single line containing the lexicographically smallest string that can be obtained by performing the allowed operations. -----Examples----- Input bcad Output abcd Input edcba Output abcde Input aabbcc Output aabbcc","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained by sorting the characters of the input string. :param s: Input string containing only lowercase letters. :return: Lexicographically smallest string. return \'\'.join(sorted(s))"},{"question":"Om Nom has developed a curiosity for palindromic numbers and has come up with a new challenge for you. A number is called palindromic if it reads the same backwards as forwards. For example, 121, 1331, and 7 are palindromic numbers, but 123, 10, and 2233 are not. Om Nom generated a list of non-negative integers and wants you to create an efficient way to count the number of distinct palindromic numbers in the list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line contains n non-negative integers separated by spaces. Each integer is guaranteed to be within the range [0, 10^9]. -----Output----- Print a single integer — the count of distinct palindromic numbers in the list. -----Examples----- Input: 5 121 123 121 1331 10 Output: 2 Input: 4 7 2233 3443 7 Output: 2 -----Note----- In the first example, the distinct palindromic numbers are 121 and 1331. In the second example, the distinct palindromic numbers are 7 and 3443.","solution":"def count_distinct_palindromic_numbers(n, numbers): def is_palindromic(num): str_num = str(num) return str_num == str_num[::-1] palindromic_set = set() for number in numbers: if is_palindromic(number): palindromic_set.add(number) return len(palindromic_set)"},{"question":"You are given a binary string `s` of length n which denotes the state of n light bulbs. The i-th bulb is on if the i-th character of `s` is \'1\' and off if it is \'0\'. You start from the first bulb and can only toggle the state of the bulb you\'re currently at (from \'0\' to \'1\' or from \'1\' to \'0\'). After each toggle, you must move to an adjacent bulb to the right. You cannot move to the left, and you cannot skip any bulbs. Your goal is to turn on all the light bulbs, i.e., make all characters of `s` equal to \'1\'. Determine the minimum number of toggles needed to achieve this goal. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) -- the length of the binary string. The second line contains a binary string `s` of length n. -----Output----- Print a single integer -- the minimum number of toggles needed to turn on all the light bulbs. -----Examples----- Input 5 01011 Output 3 Input 3 000 Output 3 Input 4 1111 Output 0 -----Note----- In the first test case, you can achieve the goal with the following moves: 1. Toggle the first bulb (\'01011\' -> \'11011\') 2. Move to the second bulb and it is already \'1\', no toggle needed. 3. Move to the third bulb and toggle it (\'11011\' -> \'11111\') In the second test case, you need to toggle each bulb once. In the third test case, all the bulbs are already on, so no toggles are needed.","solution":"def min_toggles_to_turn_on_all_bulbs(n, s): Returns the minimum number of toggles needed to turn on all the light bulbs. # Initialize the toggle count toggles = 0 # Iterate through the binary string for i in range(n): # If the current bulb is \'0\', we need to toggle it to \'1\' if s[i] == \'0\': toggles += 1 return toggles"},{"question":"Given an array of integers, reverse the array in place without using any additional array or collection. You are only allowed to use extra space for variables. # Input - An integer `n` (1 ≤ n ≤ 100,000) representing the length of the array. - An array of `n` integers `a` where each integer `a_i` is in the range -100,000 to 100,000. # Output - The same array of integers, but in reversed order. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` 5 4 3 2 1 ``` # Note You should modify the original array in place to reverse the elements. You cannot use any additional array or data structure to store the elements while reversing. Try to achieve the reversal with minimal extra storage, ideally utilizing a few variables only.","solution":"def reverse_array_in_place(a): Reverses the given array in place. :param a: List of integers to be reversed :return: The list itself after reversing the elements left = 0 right = len(a) - 1 while left < right: # Swap the elements a[left], a[right] = a[right], a[left] # Move towards the center of the array left += 1 right -= 1 return a"},{"question":"You are given a list of integers where each integer represents the number of steps you can jump forward from that position. Write a function that returns the minimum number of jumps to reach the end of the list, starting from the first element. If it is not possible to reach the end, return -1. For example, given the list [2, 3, 1, 1, 4], the minimum number of jumps to reach the end is 2 (2 jumps: 2 -> 3 -> 4). For the list [3, 2, 1, 0, 4], it is not possible to reach the end, so the return value should be -1. Implement the following function: ```python def min_jumps(nums: list[int]) -> int: pass ``` **Constraint:** - You can assume that the list has at least one element and that the first integer is always non-zero. **Input:** - A list of integers representing the jump lengths at each position. **Output:** - An integer representing the minimum number of jumps required to reach the end, or -1 if it is not possible. **Examples:** ```python print(min_jumps([2, 3, 1, 1, 4])) # Output: 2 print(min_jumps([3, 2, 1, 0, 4])) # Output: -1 print(min_jumps([6, 2, 4, 0, 5, 1, 1, 4, 2, 9])) # Output: 2 print(min_jumps([1, 1, 1, 1])) # Output: 3 print(min_jumps([0])) # Output: 0 ```","solution":"def min_jumps(nums: list[int]) -> int: Returns the minimum number of jumps required to reach the end of the list. If it is not possible to reach the end, returns -1. n = len(nums) if n == 1: return 0 max_reach = nums[0] steps = nums[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + nums[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"problem Consider a grid of size N times M. Each cell in the grid can either be empty or occupied by a block. You are required to find the largest rectangle composed entirely of empty cells. The rectangle must be aligned with the grid (no diagonal rectangles) and can be of any size. # Input - The first line contains two integers N and M — the number of rows and columns in the grid respectively. - The next N lines each contain M characters, where each character is either a \'.\' (representing an empty cell) or a \'#\' (representing a block). # Output - Output a single integer representing the area of the largest rectangle of empty cells. # Example Input ``` 5 6 ...... .... .#.... ....#. .... ``` Output ``` 9 ``` # Explanation In the example above, the largest rectangle of empty cells has dimensions 3 times 3 (from rows 3 to 5 and columns 1 to 3), yielding an area of 9.","solution":"def max_histogram_area(histogram): Finds the largest rectangular area possible in a given histogram where the width of each bar is 1. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_area(grid, N, M): Returns the area of the largest rectangle of empty cells (\'.\') in the grid. height = [0] * M max_area = 0 for i in range(N): for j in range(M): if grid[i][j] == \'.\': height[j] += 1 else: height[j] = 0 max_area = max(max_area, max_histogram_area(height)) return max_area def largest_empty_rectangle(N, M, grid): return largest_rectangle_area(grid, N, M) # Example usage N = 5 M = 6 grid = [ \\"......\\", \\"....\\", \\".#....\\", \\"....#.\\", \\"....\\" ] print(largest_empty_rectangle(N, M, grid)) # Output: 9"},{"question":"Write a function that takes a list of integers and returns a list of tuples, where each tuple contains two elements: the integer and its largest prime factor. If the number is prime, the second element should be the number itself. The function should be named `largest_prime_factors` and should take one argument (`numbers_list`). For example: ```python largest_prime_factors([10, 15, 21, 7, 13]) ``` should return: ```python [(10, 5), (15, 5), (21, 7), (7, 7), (13, 13)] ``` Notes: - You may assume all elements in the list are positive integers greater than 1. - Efficient computation of prime factors will be considered during evaluation.","solution":"def largest_prime_factors(numbers_list): def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def get_largest_prime_factor(n): if is_prime(n): return n largest_factor = 1 while n % 2 == 0: largest_factor = 2 n //= 2 for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: largest_factor = i n //= i if n > 2: largest_factor = n return largest_factor return [(num, get_largest_prime_factor(num)) for num in numbers_list]"},{"question":"You are given a sequence of N integers. You want to partition the sequence into two non-empty subsequences such that the absolute difference between the sums of the subsequences is minimized. Write a program to find the minimum possible absolute difference. Constraints * 2 leq N leq 100 * 1 leq value of each element in the sequence leq 1000 Input The input contains a single line consisting of N integers separated by spaces. Output Print the minimum possible absolute difference. Examples Input 3 1 4 2 2 Output 0 Input 1 2 3 4 5 Output 1","solution":"def find_minimum_difference(sequence): This function takes a sequence of integers and returns the minimum possible absolute difference between the sums of two non-empty subsequences obtained by partitioning the sequence. total_sum = sum(sequence) n = len(sequence) dp = [False] * (total_sum + 1) dp[0] = True for num in sequence: for i in range(total_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] min_diff = float(\'inf\') for s in range(total_sum // 2 + 1): if dp[s]: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff # Example usage: # sequence = list(map(int, input().strip().split())) # print(find_minimum_difference(sequence))"},{"question":"Tim and Tom are playing a game with binary strings. They each have a binary string of length n. The game they are playing involves creating a memorial binary string of length n. The rules to create the memorial binary string are as follows: - If both Tim and Tom\'s corresponding bits are the same (both 1\'s or both 0\'s), the resultant bit is 0. - If Tim and Tom\'s corresponding bits are different (one is 1, and the other is 0), the resultant bit is 1. Given the binary strings of Tim and Tom, determine the memorial binary string for each test case. Input - The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the test cases follows. - The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the length of the binary strings. - The second line of each test case contains a binary string of length n representing Tim\'s binary string. - The third line of each test case contains a binary string of length n representing Tom\'s binary string. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^6. Output For each test case, print the memorial binary string of length n. Example Input 3 5 11001 10110 6 111000 000111 4 1001 1010 Output 01111 111111 0011 Explanation In the first test case, the memorial binary string is created as follows: - The 1st bits of Tim\'s and Tom\'s strings are both 1, so the resultant bit is 0. - The 2nd bits of Tim\'s and Tom\'s strings are 1 and 0, respectively, so the resultant bit is 1. - The 3rd bits of Tim\'s and Tom\'s strings are 0 and 1, respectively, so the resultant bit is 1. - The 4th bits of Tim\'s and Tom\'s strings are 0 and 1, respectively, so the resultant bit is 1. - The 5th bits of Tim\'s and Tom\'s strings are both 1, so the resultant bit is 0. Hence, the memorial binary string is \\"01111”. Similarly, memorial binary strings for other test cases can be calculated.","solution":"def memorial_binary_string(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] tim = test_cases[i][1] tom = test_cases[i][2] memorial_string = [] for j in range(n): if tim[j] == tom[j]: memorial_string.append(\'0\') else: memorial_string.append(\'1\') results.append(\'\'.join(memorial_string)) return results"},{"question":"In the land of integers, there is a special operation called the \\"modulo sum.\\" The modulo sum operation involves summing up an integer array and then computing the result modulo a given integer k. The modulo sum must be performed as follows: 1. Sum all the elements in the array. 2. Compute the result of that sum modulo k. Given an array of integers and a positive integer k, your task is to determine the modulo sum of the array. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of elements in the array and the modulo integer respectively. The second line contains n integers, representing the elements of the array. Each integer in the array is between -1000 and 1000, inclusive. -----Output----- Print a single integer which is the result of the modulo sum operation on the given array. -----Examples----- Input 3 5 5 -2 3 Output 1 Input 4 7 -1 -1 -1 -1 Output 3 -----Note----- In the first example, the sum of the array is (5 + (-2) + 3 = 6). The result of (6 mod 5) is 1. In the second example, the sum of the array is (-1 + (-1) + (-1) + (-1) = -4). The result of (-4 mod 7) is 3.","solution":"def modulo_sum(n, k, arr): Compute the modulo sum of an integer array. Parameters: n (int): number of elements in the array k (int): the modulo integer arr (list of int): the list of integers Returns: int: the result of the modulo sum operation total_sum = sum(arr) result = total_sum % k return result"},{"question":"Array Segment Sorting ACS (Algorithm Coding Society) has a keen interest in array manipulations and segment sorting algorithms. They are currently experimenting with an array segment sorting technique where only specific segments of an array are sorted while the rest of the array remains unchanged. Given an array of integers and multiple pairs of indices representing segments, your task is to sort the specified segments while preserving the order of the other parts of the array. Each segment to be sorted is defined by a pair of indices, and these segments do not overlap. The integers within each segment should be sorted in ascending order, and the segments must remain in their original position. Input The input consists of multiple datasets. Each dataset starts with a line containing two integers, `n` (1 ≤ n ≤ 100), the size of the array, and `m` (1 ≤ m ≤ 10), the number of segments to be sorted. The next line contains `n` integers representing the elements of the array. The next `m` lines each contain two integers `l` and `r` (0 ≤ l ≤ r < n) representing the indices (0-based) of the segment to be sorted. The end of the input is represented by a single line containing `-1 -1`. Output For each dataset, output the modified array after sorting the specified segments. Sample Input 5 2 10 9 8 7 6 0 1 3 4 6 1 100 120 Sample Output 9 10 8 6 7 120 100 Example Input 5 2 10 9 8 7 6 0 1 3 4 6 1 100 120 -1 -1 Output 9 10 8 6 7 120 100","solution":"def sort_array_segments(n, m, array, segments): Sorts specified segments of the array in ascending order. Parameters: n (int): Size of the array. m (int): Number of segments to be sorted. array (list of int): The input array. segments (list of tuple): List of segments represented as (l, r) pairs. Returns: list of int: The array after sorting the specified segments. for l, r in segments: array[l:r+1] = sorted(array[l:r+1]) return array def process_datasets(datasets): Processes multiple datasets for sorting array segments. Parameters: datasets (list): A list of datasets, where each dataset is represented as a tuple containing the size of the array `n`, the number of segments `m`, the array, and the list of segments. Returns: list: A list of resulting arrays after sorting the specified segments. results = [] for n, m, array, segments in datasets: res = sort_array_segments(n, m, array, segments) results.append(res) return results"},{"question":"You are an intern at an electronics company and your task is to assist the quality assurance team. They want you to verify if certain gadgets, identified by their serial numbers, meet the company\'s criteria for validation. Each serial number must have a specific pattern to be considered valid: it must start with \'QA\' followed by exactly 4 digits and end with either \'X\', \'Y\', or \'Z\'. Your job is to write a function that determines whether each serial number is valid or not. Input The first line of input is an integer N (1 ≤ N ≤ 100) – the number of serial numbers to check. Each of the following N lines contains a string representing a serial number. Each serial number string is guaranteed to be between 6 and 10 characters long. Output For each serial number, print \\"VALID\\" if it meets the criteria and \\"INVALID\\" otherwise. Sample Test Case Input 4 QA1234X QA12Y QA12345Z QA0000Y Output VALID INVALID INVALID VALID Sample Input 4 QA1234X QA12Y QA12345Z QA0000Y Sample Output VALID INVALID INVALID VALID","solution":"import re def validate_serial_numbers(n, serial_numbers): Validates the serial numbers based on the given pattern. Parameters: - n: integer, number of serial numbers - serial_numbers: list of strings, serial numbers to validate Returns: - list of strings: \\"VALID\\" or \\"INVALID\\" for each serial number pattern = re.compile(r\'^QAd{4}[XYZ]\') result = [] for serial in serial_numbers: if pattern.match(serial): result.append(\\"VALID\\") else: result.append(\\"INVALID\\") return result # Example usage (not part of the required solution): # n = 4 # serial_numbers = [\\"QA1234X\\", \\"QA12Y\\", \\"QA12345Z\\", \\"QA0000Y\\"] # print(validate_serial_numbers(n, serial_numbers)) # Output should be: [\'VALID\', \'INVALID\', \'INVALID\', \'VALID\']"},{"question":"Shannon is fascinated by sequences and their properties. She recently learned about the Fibonacci sequence and wants to explore it further. The Fibonacci sequence is defined as: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 Shannon is interested in the large Fibonacci numbers, and she wants to know the sum of all Fibonacci numbers from F(0) to F(N) for a given N. Given Shannon\'s curiosity, she has provided multiple values of N, and for each value, you need to find the sum of all Fibonacci numbers from F(0) to F(N). Input The first line contains an integer T, the number of test cases. In the next T lines, each line has exactly one integer N (0 <= N <= 10^18). Output Output should contain T lines. Print the answer for each N in a separate line. Constraints 1 <= T <= 10^5 0 <= N <= 10^18 Note: The sum of Fibonacci numbers from F(0) to F(N) is equal to F(N+2) - 1. Due to the potential size of N, you\'ll need to use matrix exponentiation to handle large values efficiently. Example Input 3 3 5 10 Output 4 12 143 Explanation Test case 1: The Fibonacci sequence up to F(3) is 0, 1, 1, 2. Their sum is 0 + 1 + 1 + 2 = 4. Test case 2: The Fibonacci sequence up to F(5) is 0, 1, 1, 2, 3, 5. Their sum is 0 + 1 + 1 + 2 + 3 + 5 = 12. Test case 3: The Fibonacci sequence up to F(10) is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Their sum is 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 = 143.","solution":"def matrix_mult(A, B): Multiplies two matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_pow(matrix, n): Raises the matrix to the power of n using exponentiation by squaring. result = [[1, 0], [0, 1]] base = matrix while n > 0: if n % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) n //= 2 return result def fib(n): Returns the nth Fibonacci number using matrix exponentiation. if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] F_n = matrix_pow(F, n-1) return F_n[0][0] def sum_fib_upto_n(n): Returns the sum of all Fibonacci numbers from F(0) to F(n). return fib(n + 2) - 1 def process_fibonacci_sums(T, cases): Processes multiple test cases and returns the sums of Fibonacci numbers. result = [] for n in cases: result.append(sum_fib_upto_n(n)) return result"},{"question":"John is an enthusiastic botanist who is conducting a study on a particular species of plants in a forest. The forest is represented as a grid with `m` rows and `n` columns. Each cell in the grid either contains a plant (represented by `1`) or is empty (represented by `0`). John wants to know the size of the largest connected group of plants. Two plants are considered connected if they are adjacent either horizontally or vertically. Your task is to write a program that determines the size of the largest connected group of plants in the forest grid. -----Input----- The first line contains two integers, `m` and `n` (1 ≤ m, n ≤ 100), representing the number of rows and columns in the grid. Each of the next `m` lines contains `n` integers (`0` or `1`), representing the forest grid. -----Output----- Print a single integer: the size of the largest connected group of plants. -----Examples----- Input 3 4 0 1 0 0 1 1 0 1 0 0 1 1 Output 3 Input 4 5 0 0 1 0 0 1 1 1 0 1 0 1 0 0 1 1 0 0 1 1 Output 5 -----Note----- In the first example, the largest connected group of plants consists of 3 cells: (1,2), (2,1), and (2,2). In the second example, the largest connected group of plants consists of 5 cells: (0,2), (1,0), (1,1), (1,2), and (2,1).","solution":"def largest_connected_group(m, n, forest): Given a grid of size m x n representing a forest, find the size of the largest connected group of plants. Args: m: int : number of rows n: int : number of columns forest: List[List[int]] : representation of the forest grid Returns: int : size of the largest connected group of plants visited = [[False for _ in range(n)] for _ in range(m)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n def dfs(x, y): if not is_valid(x, y) or visited[x][y] or forest[x][y] == 0: return 0 visited[x][y] = True size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # Up, Down, Left, Right size += dfs(x + dx, y + dy) return size largest_group_size = 0 for i in range(m): for j in range(n): if forest[i][j] == 1 and not visited[i][j]: largest_group_size = max(largest_group_size, dfs(i, j)) return largest_group_size"},{"question":"Implement a function `findSquareSums(n)` that returns an array of two positive integers [a, b] such that a^2 + b^2 = n, or an empty array if such a pair does not exist. Ensure that the solution explores the set of all possible pairs to check if any match the criteria. # Constraints: - The function takes in a single integer `n`. - `n` should be a positive integer and will be in the range 1 to 10^6. # Examples: 1. `findSquareSums(5)` returns `[1, 2]` because 1^2 + 2^2 = 5. 2. `findSquareSums(4)` returns `[0, 2]` because 0^2 + 2^2 = 4. 3. `findSquareSums(3)` returns `[]` because there are no integers a and b such that a^2 + b^2 = 3. # Solution Approach: - Loop through possible values of `a` from 0 to the integer square root of `n`. - Calculate the corresponding `b` using the formula `b = sqrt(n - a^2)`. - If `b` is an integer, return `[a, b]`. - If no such pair exists after checking all possible values of `a`, return an empty array.","solution":"import math def findSquareSums(n): Returns an array of two positive integers [a, b] such that a^2 + b^2 = n, or an empty array if such a pair does not exist. for a in range(0, int(math.isqrt(n)) + 1): b_square = n - a * a b = int(math.isqrt(b_square)) if b * b == b_square: return [a, b] return []"},{"question":"Create a Parking Lot Ticketing System problem You are required to design a parking lot ticketing system that calculates the total parking fee for each vehicle based on its entry and exit time. The parking lot fee is calculated based on the following rates: 1. The first hour is free. 2. For every subsequent hour or part thereof: 5 per hour. You need to implement a function `calculate_parking_fee` that takes the entry and exit times of a vehicle as input and returns the total parking fee. The entry and exit times are given in a 24-hour clock format (HH:mm). The entry time is guaranteed to be earlier than the exit time on the same day. Function Signature ```python def calculate_parking_fee(entry_time: str, exit_time: str) -> int: ``` Input - entry_time, a string representing the entry time formatted as HH:mm - exit_time, a string representing the exit time formatted as HH:mm Output - Return the total parking fee as an integer. Examples Input ```python calculate_parking_fee(\'10:00\', \'13:30\') ``` Output ```python 10 ``` Input ```python calculate_parking_fee(\'09:45\', \'12:01\') ``` Output ```python 10 ``` Input ```python calculate_parking_fee(\'07:00\', \'08:00\') ``` Output ```python 0 ``` Constraints - The entry and exit times are always valid and follow the `HH:mm` format. - The entry time will always be less than the exit time and both will be on the same day.","solution":"from datetime import datetime def calculate_parking_fee(entry_time: str, exit_time: str) -> int: Calculate the parking fee based on entry and exit times. Parameters: entry_time (str): Entry time in HH:mm format. exit_time (str): Exit time in HH:mm format. Returns: int: Total parking fee. # Convert entry and exit times to datetime objects entry_dt = datetime.strptime(entry_time, \\"%H:%M\\") exit_dt = datetime.strptime(exit_time, \\"%H:%M\\") # Calculate the total parking duration in minutes duration_minutes = int((exit_dt - entry_dt).total_seconds() / 60) # Calculate the total parking duration in hours duration_hours = duration_minutes // 60 remaining_minutes = duration_minutes % 60 # Calculate the total fee if duration_hours == 0: return 0 else: # First hour is free, so we reduce the duration by 1 duration_hours -= 1 # Any remaining minutes count as an additional hour if remaining_minutes > 0: duration_hours += 1 # Fee is 5 per hour after the first hour return 5 * duration_hours"},{"question":"In an online competitive programming competition, participants are required to solve multiple coding challenges. At the end of the event, each participant\'s points are tallied to determine the winner. The participant with the highest total points is declared the winner. If multiple participants have the same highest score, then the participant with the fewest submissions wins. If there is still a tie, the participant with the smallest participant ID wins. You have to write a program to determine the winner from a list of participants and their respective scores and submission counts. Input: The input consists of: 1. An integer `n` (1 ≤ n ≤ 100000), the number of participants. 2. The following `n` lines each contain three integers: `id`, `score`, and `submissions`, representing the participant\'s ID (an integer between 1 and 1000000), their score (an integer between 0 and 1000), and the number of submissions they made (an integer between 1 and 100). Output: Output the ID of the winning participant. Constraints: - 1 ≤ id ≤ 1000000 - 0 ≤ score ≤ 1000 - 1 ≤ submissions ≤ 100 SAMPLE INPUT 5 101 500 3 102 500 2 103 600 5 104 600 6 105 600 5 SAMPLE OUTPUT 103 Explanation: - Participant 103, 104, and 105 all have the highest score of 600. - Among them, participants 103 and 105 have the fewest submissions (5). - Participant 103 has a smaller ID than participant 105, so participant 103 is declared the winner.","solution":"def determine_winner(participants): Determines the winner from a list of participants based on the criteria. Args: participants: List of tuples where each tuple contains (id, score, submissions) Returns: The ID of the winning participant. # Sort participants by score (descending), submissions (ascending), ID (ascending) participants.sort(key=lambda x: (-x[1], x[2], x[0])) return participants[0][0] # Example Usage # participants = [ # (101, 500, 3), # (102, 500, 2), # (103, 600, 5), # (104, 600, 6), # (105, 600, 5) # ] # print(determine_winner(participants)) # Output: 103"},{"question":"-----Input----- The input consists of a single string containing lowercase letters a-z. The length of the string is between 1 and 15 characters, inclusive. -----Output----- Output \\"PALINDROME\\" if the string is a palindrome, otherwise output \\"NOT A PALINDROME\\". -----Examples----- Input racecar Output PALINDROME Input hello Output NOT A PALINDROME Input madam Output PALINDROME Input sample Output NOT A PALINDROME Input rotator Output PALINDROME Input python Output NOT A PALINDROME Input civic Output PALINDROME","solution":"def is_palindrome(s): Returns \\"PALINDROME\\" if the string s is a palindrome, otherwise returns \\"NOT A PALINDROME\\". return \\"PALINDROME\\" if s == s[::-1] else \\"NOT A PALINDROME\\""},{"question":"You are given a string s consisting only of lowercase English letters. Your goal is to form a new string t by performing exactly one operation on s: selecting any prefix and moving it to the end of the string. Determine the lexicographically smallest string t that can be obtained by this operation. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string s. The second line contains the string s of length n. Output Print the lexicographically smallest string t that can be obtained after performing the operation. Examples Input 4 bcda Output abcd Input 5 aebdc Output aebdc Input 6 dcbabc Output abcdcb","solution":"def smallest_lexicographical_string(n, s): Returns the lexicographically smallest string t that can be obtained by moving a prefix of s to the end. smallest_string = s for i in range(1, n): new_string = s[i:] + s[:i] if new_string < smallest_string: smallest_string = new_string return smallest_string"},{"question":"A string S is said to be \\"almost balanced\\" if the number of each character in S is nearly the same. More formally, a string S is almost balanced if the count of any character in S appears at most one time more than the count of any other character in S. Write a function to check if a given string is almost balanced. -----Input----- Your function should receive the following input: - A single-line containing the string S (1 ≤ |S| ≤ 10^5), consisting of only lowercase English letters (a-z). -----Output----- The function should return \\"YES\\" if the string is almost balanced, otherwise return \\"NO\\". -----Example----- Input: abac Output: YES Explanation: The counts of each character are: \'a\' -> 2, \'b\' -> 1, \'c\' -> 1. The difference between the most frequent character count (\'a\') and the least frequent character count (\'b\', \'c\') is 1, which satisfies the condition of being almost balanced. Input: aaab Output: NO Explanation: The counts of each character are: \'a\' -> 3, \'b\' -> 1. The difference between the most frequent character count (\'a\') and the least frequent character count (\'b\') is 2, which does not satisfy the condition of being almost balanced.","solution":"from collections import Counter def is_almost_balanced(S): Checks if the string S is almost balanced. A string S is considered almost balanced if the count of any character in S appears at most one time more than the count of any other character in S. Args: S (str): The input string consisting of only lowercase English letters. Returns: str: \\"YES\\" if the string is almost balanced, otherwise \\"NO\\". if not S or len(S) == 1: return \\"YES\\" # Count frequencies of each character freq = Counter(S) # Get all frequency values freq_values = list(freq.values()) max_freq = max(freq_values) min_freq = min(freq_values) # Check if the difference between max and min frequency is at most 1 if max_freq - min_freq <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an untidy list of integers where each element is either a positive integer or a negative integer. Write a function to reorder the list such that all positive integers appear before all negative integers, and within the same group (positive or negative), the integers are sorted in descending order. Input The first line contains an integer n (1 ≤ n ≤ 100000), the number of integers in the list. The second line contains n integers separated by space, each integer ai (-1000000 ≤ ai ≤ 1000000), representing the elements of the list. Output Print the reordered list where all positive integers appear before all negative integers, and each group of integers is sorted in descending order. Examples Input 10 3 -5 12 -1 0 -6 2 4 -2 7 Output 12 7 4 3 2 0 -1 -2 -5 -6 Input 8 -4 -9 -2 -3 1 0 5 6 Output 6 5 1 0 -2 -3 -4 -9 Note In the first sample, we have positive integers grouped and sorted in descending order: [12, 7, 4, 3, 2, 0] and negative integers grouped and sorted in descending order: [-1, -2, -5, -6]. In the second sample, we have positive integers grouped and sorted in descending order: [6, 5, 1, 0] and negative integers grouped and sorted in descending order: [-2, -3, -4, -9].","solution":"def reorder_list(n, arr): Reorders a list such that all positive integers appear before all negative integers, and within the same group (positive or negative), the integers are sorted in descending order. :param n: The number of integers in the list :param arr: The list of integers :return: A reordered list positives = sorted([x for x in arr if x >= 0], reverse=True) negatives = sorted([x for x in arr if x < 0], reverse=True) return positives + negatives"},{"question":"Write a program that calculates the sum of digits of large natural numbers. Your program should continue reading numbers until the end of the input. Input The input consists of several natural numbers, each on a separate line. Each number does not exceed 1000 digits in length. Output For each number in the input, print the sum of its digits on a new line. Example Input 12345 999999999 100000000000 Output 15 81 1","solution":"def sum_of_digits(numbers): Given a list of large natural numbers as strings, returns the sum of the digits for each number. results = [] for number in numbers: digit_sum = sum(int(digit) for digit in number) results.append(digit_sum) return results"},{"question":"Alice works as a forest ranger, and she needs to keep track of the connectivity of different forest regions. She has a map that represents the regions as nodes and the paths between them as edges. Due to natural incidents, some paths can deteriorate. You are required to calculate the minimum cost required to ensure that all regions in the forest remain connected with at least one path. Each path between two regions is bidirectional and has a specific maintenance cost to rehabilitate it. Alice needs to keep the forest fully connected, which means that it should be possible to travel from any region to any other region either directly or through other regions. Write a function to find the minimum total cost to maintain the connectivity of all regions. If it is not possible to connect all regions, return −1. -----Input----- The input consists of multiple lines: - The first line contains two integers n and m (1 leq n leq 100,000, 0 leq m leq 200,000) — the number of regions (nodes) and the number of paths (edges) respectively. - The next m lines each contain three integers u, v, and c (1 leq u, v leq n, 1 leq c leq 10^6) — indicating that there is a bidirectional path between regions u and v with a rehabilitation cost of c. -----Output----- Output a single integer, the minimum total cost required to maintain the connectivity of all the regions, or -1 if it is impossible to connect all regions. -----Examples----- Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 Output 6 Input 5 3 1 2 1 3 4 2 4 5 3 Output -1 -----Note----- In the first example, we can use edges (1, 2) with cost 1, (2, 3) with cost 2, and (3, 4) with cost 3 to ensure all regions are connected with the minimum cost of 6. In the second example, regions 1 and 2 are disconnected from regions 3, 4, and 5, making it impossible to connect the entire forest. Therefore, the output is -1.","solution":"def find_min_cost_to_connect_regions(n, m, edges): Returns the minimum cost required to ensure all regions remain connected, or -1 if it is impossible to connect all regions. if n == 1: return 0 from heapq import heappop, heappush parent = list(range(n+1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX return True return False # Min-heap to get the edge with the smallest weight first pq = [] for u, v, c in edges: heappush(pq, (c, u, v)) total_cost = 0 edges_used = 0 while pq and edges_used < n-1: cost, u, v = heappop(pq) if union(u, v): total_cost += cost edges_used += 1 # If we used exactly n-1 edges, all nodes are connected return total_cost if edges_used == n-1 else -1"},{"question":"In a city, there are n intersections connected by m unidirectional streets, each with a certain length. Bob is a bike messenger who needs to deliver packages between different intersections. He always starts from the same intersection s and wants to minimize the maximum time it takes to deliver packages to all other intersections. You are asked to help him find the shortest possible time for the longest delivery. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 2000, 1 ≤ m ≤ 5000). Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10000), describing a street from intersection u to intersection v with length w. The last line contains a single integer s (1 ≤ s ≤ n), which is Bob\'s starting intersection. -----Output----- Print a single integer representing the minimum possible time for the longest delivery. If an intersection is not reachable from s, print \\"UNREACHABLE\\". -----Examples----- Input 4 4 1 2 2 1 3 4 2 3 1 3 4 3 1 Output 6 Input 4 2 1 2 3 1 3 5 4 Output UNREACHABLE -----Note----- In the first sample, the longest delivery time is to intersection 4, which takes 6 units of time. Bob\'s optimal routes are: - From 1 to 2 (time 2), then 2 to 3 (time 1), then 3 to 4 (time 3). In the second sample, intersection 4 is not reachable from intersection 1.","solution":"import heapq def shortest_longest_delivery_time(n, m, edges, s): This function finds the shortest possible time for the longest delivery using Dijkstra\'s algorithm. :param n: Number of intersections :param m: Number of streets :param edges: List of edges where each edge is represented by (u, v, w) :param s: Starting intersection :return: The minimum possible time for the longest delivery or \\"UNREACHABLE\\" if any intersection is not reachable # Build graph graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distance array distance = {i: float(\'inf\') for i in range(1, n+1)} distance[s] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] while pq: current_dist, current_node = heapq.heappop(pq) if current_dist > distance[current_node]: continue for neighbor, weight in graph[current_node]: distance_through_current = current_dist + weight if distance_through_current < distance[neighbor]: distance[neighbor] = distance_through_current heapq.heappush(pq, (distance_through_current, neighbor)) # Find the maximum distance in the shortest paths found max_distance = max(distance.values()) # Check if there are unreachable intersections if max_distance == float(\'inf\'): return \\"UNREACHABLE\\" return max_distance"},{"question":"Implement a function `rotate_array` that accepts an array of integers and an integer `k` as arguments. This function should rotate the array to the right by `k` steps and return the resulting array. For example: - Given the array `[1, 2, 3, 4, 5, 6, 7]` and `k = 3`, the result should be `[5, 6, 7, 1, 2, 3, 4]`. - Given the array `[1, 2, 3, 4, 5, 6, 7]` and `k = 10`, the result should be `[5, 6, 7, 1, 2, 3, 4]`. Note: - The value of `k` can be greater than the length of the array. In such a case, the rotation should handle `k` modulo the array length. - The array input can be empty or contain any positive or negative integers. - Ensure that your solution has a time complexity of O(n), where n is the length of the input array. ```python def rotate_array(nums, k): n = len(nums) if n == 0: return [] k = k % n # Handle cases where k > n return nums[-k:] + nums[:-k] # Test cases print(rotate_array([1, 2, 3, 4, 5, 6, 7], 3)) # Output: [5, 6, 7, 1, 2, 3, 4] print(rotate_array([1, 2, 3, 4, 5, 6, 7], 10)) # Output: [5, 6, 7, 1, 2, 3, 4] print(rotate_array([1, 2, 3, 4, 5], 2)) # Output: [4, 5, 1, 2, 3] print(rotate_array([], 1)) # Output: [] ```","solution":"def rotate_array(nums, k): Rotates an array to the right by k steps. :param nums: List[int] - The list of integers to rotate :param k: int - The number of steps to rotate the array :return: List[int] - The rotated array n = len(nums) if n == 0: return [] k = k % n # Handle cases where k > n return nums[-k:] + nums[:-k]"},{"question":"A tree is an undirected connected acyclic graph. The length of a path between two vertices in a tree is the number of edges in this path. The diameter of a tree is the maximum length of a path between any two vertices. You are given a tree with n vertices and you are allowed to remove at most one edge and add back an edge between any two vertices of your choice. You need to determine the minimum possible diameter after performing the allowed operation. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a single integer n (2 ≤ n ≤ 1000) — the number of vertices. Each of the next n−1 lines contains two space-separated integers u and v (1 ≤ u, v ≤ n) — representing an edge between vertex u and vertex v. Output For each test case, print the minimum possible diameter after removing and adding one edge. Example Input 2 5 1 2 1 3 1 4 1 5 4 1 2 2 3 2 4 Output 2 2 Note In the first test case with n=5, the original diameter of the tree is 2 (for example, between vertices 2 and 3, through vertex 1). If we remove one of the edges connected to vertex 1 and connect two of the leaf vertices directly, such as 2 and 3, the new diameter becomes 2 (2-3 then 1-4 or 1-5). In the second test case with n=4, the original diameter of the tree is 2. Again, we can reconnect vertices 3 and 4 directly, making the new diameter still 2. Thus the minimum diameter remains the same.","solution":"from collections import deque, defaultdict def bfs_to_get_farthest_node(tree, start): Perform BFS to find the farthest node from the start node. Also returns the distances of each node from the start. n = len(tree) distances = [-1] * n queue = deque([start]) distances[start] = 0 farthest_node = start while queue: current = queue.popleft() for neighbor in tree[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) if distances[neighbor] > distances[farthest_node]: farthest_node = neighbor return farthest_node, distances def calculate_diameter(tree): Returns the diameter of the tree. # Find the farthest node from an arbitrary start node (node 0) farthest_node, _ = bfs_to_get_farthest_node(tree, 0) # Find the farthest node from the previously found farthest node opposite_node, distances = bfs_to_get_farthest_node(tree, farthest_node) return distances[opposite_node] def find_minimum_diameter(n, edges): if n == 2: return 1 tree = defaultdict(list) for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) original_diameter = calculate_diameter(tree) if original_diameter == 2: return 2 return (original_diameter + 1) // 2 def process_test_cases(test_cases): results = [] for case in test_cases: n, edges = case result = find_minimum_diameter(n, edges) results.append(result) return results def solve(t, test_cases): results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Susan has recently started learning programming and she finds Fibonacci numbers intriguing. The Fibonacci sequence is defined as follows: - F(1) = 1 - F(2) = 1 - For n > 2: F(n) = F(n-1) + F(n-2) Susan wants to write a program that can efficiently calculate the sum of all Fibonacci numbers from F(1) to F(N) inclusive. However, Susan only knows how to write simple loops and functions, and she wants to make sure her program runs efficiently even for large values of N. Your task is to help Susan by writing a program that calculates the sum of the first N Fibonacci numbers for given values of N. Input: The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a single integer N, denoting the number of terms in the Fibonacci sequence for which the sum needs to be calculated. Output: For each test case, print the sum of the first N Fibonacci numbers. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 1 5 10 SAMPLE OUTPUT 1 12 143 Explanation For the first test case, the sum of the first 1 Fibonacci number is F(1) = 1. For the second test case, the sum of the first 5 Fibonacci numbers is F(1) + F(2) + F(3) + F(4) + F(5) = 1 + 1 + 2 + 3 + 5 = 12. For the third test case, the sum of the first 10 Fibonacci numbers is F(1) + F(2) + F(3) + ... + F(10) = 143.","solution":"def sum_fibonacci_numbers(N): if N == 1: return 1 if N == 2: return 2 a, b = 1, 1 sum_fib = 2 for i in range(3, N + 1): c = a + b sum_fib += c a = b b = c return sum_fib def fibonacci_sum_cases(T, cases): results = [] for N in cases: results.append(sum_fibonacci_numbers(N)) return results"},{"question":"A company wants to optimize the way they serve candies to children in an event. They have N children standing in a queue, each with a certain level of happiness represented by an integer in an array `Happiness`. The company has K different types of candies, each with a certain level of sweetness represented by an array `Sweetness`. The goal is to maximize the total minimum happiness that each child will get. Each child will receive exactly one candy. The child\'s happiness is determined by the minimum of the child\'s happiness level and the sweetness level of the candy given to them. Write a function `maximizeHappiness(Happiness, Sweetness)` that returns the maximum possible sum of minimum happiness each child will get. # Function Signature ```python def maximizeHappiness(Happiness: List[int], Sweetness: List[int]) -> int: pass ``` # Example Example 1: # Input: ``` Happiness = [3, 4, 5] Sweetness = [2, 3, 4] ``` # Output: ``` 9 ``` # Explanation: Assign candies such that: - Candy with sweetness 2 to child with happiness 3 -> min(3, 2) = 2 - Candy with sweetness 3 to child with happiness 4 -> min(4, 3) = 3 - Candy with sweetness 4 to child with happiness 5 -> min(5, 4) = 4 Total minimum happiness = 2 + 3 + 4 = 9 Example 2: # Input: ``` Happiness = [1, 2, 3] Sweetness = [10, 11, 12] ``` # Output: ``` 6 ``` # Explanation: Assign candies such that: - Candy with sweetness 10 to child with happiness 1 -> min(1, 10) = 1 - Candy with sweetness 11 to child with happiness 2 -> min(2, 11) = 2 - Candy with sweetness 12 to child with happiness 3 -> min(3, 12) = 3 Total minimum happiness = 1 + 2 + 3 = 6 # Constraints: - 1 ≤ N, K ≤ 10^3 - 1 ≤ Happiness[i], Sweetness[i] ≤ 10^3","solution":"from typing import List def maximizeHappiness(Happiness: List[int], Sweetness: List[int]) -> int: # Sort the happiness and sweetness arrays Happiness.sort() Sweetness.sort() total_min_happiness = 0 # Iterate through the sorted lists and match the candies to the children for h, s in zip(Happiness, Sweetness): total_min_happiness += min(h, s) return total_min_happiness"},{"question":"Emily has an interesting problem to solve with her sequence of numbers. You are given an array of n positive integers. In one move, you are allowed to choose any two adjacent elements of the array and swap them if they are not in increasing order (i.e., a_i > a_{i+1}). Your goal is to sort the array in non-decreasing order with the minimum number of adjacent swaps. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 3000) — the length of the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9). -----Output----- Print a single integer — the minimum number of swaps required to sort the array in non-decreasing order. -----Examples----- Input 5 5 4 3 2 1 Output 10 Input 4 1 3 2 4 Output 1 -----Note----- In the first example, the array can be sorted in 10 swaps as follows: 5 4 3 2 1 -> 4 5 3 2 1 -> 4 3 5 2 1 -> 4 3 2 5 1 -> 4 3 2 1 5 -> 3 4 2 1 5 -> 3 2 4 1 5 -> 3 2 1 4 5 -> 2 3 1 4 5 -> 2 1 3 4 5 -> 1 2 3 4 5 In the second example, the array can be sorted in 1 swap by swapping the second and third elements: Input: 1 3 2 4 -> Output: 1 2 3 4","solution":"def min_swaps_to_sort(arr): Returns the minimum number of adjacent swaps required to sort the array in non-decreasing order. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swap_count += 1 return swap_count"},{"question":"-----Input----- The input consists of a single line containing a positive integer ( n ) (1 ≤ ( n ) ≤ 100). -----Output----- Output the summation of all even integers from 1 to ( n ). -----Example----- Input 6 Output 12","solution":"def sum_of_evens(n): Returns the summation of all even integers from 1 to n. return sum(i for i in range(2, n+1, 2))"},{"question":"A Fibonacci sequence is a series of numbers where each number (after the first two) is the sum of the two preceding ones. The first two numbers are 0 and 1. For example, the third number in the series is 0 + 1 = 1, the fourth number is 1 + 1 = 2, the fifth number is 1 + 2 = 3, and so on. Given a number N, compute the N-th Fibonacci number modulo 1000000007. -----Input----- The first line contains a single integer T, the number of test cases (1 leq T leq 10). Each of the next T lines contains a single integer N (0 leq N leq 10^6). -----Output----- For each test case output the N-th Fibonacci number modulo 1000000007. -----Examples----- Sample Input: 3 2 5 10 Sample Output: 1 5 55","solution":"MOD = 1000000007 def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, (a + b) % MOD return b def process_input(test_cases): results = [] for n in test_cases: results.append(fibonacci(n)) return results"},{"question":"You need to write a function that determines whether all characters in a given string are unique. The function should return `true` if all characters are unique, `false` otherwise. The check should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. For example: ``` \\"isUnique(\'abcdef\')` --> `true` \\"isUnique(\'aA\')` --> `true` \\"isUnique(\'hello\')` --> `false` ``` The input string will contain only printable ASCII characters.","solution":"def is_unique(s): Returns True if all characters in the string are unique, False otherwise. The check is case-sensitive. :param s: Input string :type s: str :return: Boolean indicating whether all characters in the string are unique :rtype: bool return len(s) == len(set(s))"},{"question":"You are given a string that represents a sentence. Write a function that returns a new string with the words in reverse order. Punctuation and capitalization should remain in their original positions. # Examples ```python reverse_sentence(\\"Hello, world!\\") --> \\"world! Hello,\\" reverse_sentence(\\"The quick brown fox.\\") --> \\"fox. brown quick The\\" reverse_sentence(\\"A man, a plan, a canal: Panama.\\") --> \\"Panama. canal: a plan, a man, A\\" reverse_sentence(\\"Python is cool.\\") --> \\"cool. is Python\\" ```","solution":"def reverse_sentence(sentence): Reverses the words in a sentence while maintaining the original punctuation and capitalization. Params: sentence (str): The sentence to reverse Returns: str: The sentence with words in reverse order. # Split the sentence into words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join them back into a string reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Write a function to determine if a given positive integer `n` is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors (excluding itself). Random tests go up to `n = 100000`. Examples ```python is_perfect(6) == True # 1 + 2 + 3 = 6 is_perfect(28) == True # 1 + 2 + 4 + 7 + 14 = 28 is_perfect(12) == False # 1 + 2 + 3 + 4 + 6 = 16 is_perfect(496) == True # 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248 = 496 is_perfect(8128) == True # 1 + 2 + 4 + 8 + 16 + 32 + 64 + 127 + 254 + 508 + 1016 + 2032 + 4064 = 8128 ```","solution":"def is_perfect(n): Determines if a given positive integer n is a perfect number. if n <= 1: return False divisors_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: divisors_sum += i if i != n // i: divisors_sum += n // i return divisors_sum == n"},{"question":"Given a matrix where each row is sorted in ascending order, find the median of the matrix. Assuming the matrix has odd number of elements, the median is defined as the middle element when all the elements are sorted. Example 1: Input: matrix = [[1, 3, 5], [2, 6, 9], [3, 6, 9]] Output: 5 Explanation: When sorted, the matrix elements are [1, 2, 3, 3, 5, 6, 6, 9, 9]. The median of this sorted list is 5. Example 2: Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 5 Explanation: When sorted, the matrix elements are [1, 2, 3, 4, 5, 6, 7, 8, 9]. The median of this sorted list is 5. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findMedian() that takes a 2D array (matrix) and its dimensions (r and c), and returns the median of the matrix elements. The driver code takes care of the printing. Expected Time Complexity: O(r * log(max - min)) where r is the number of rows Expected Auxiliary Space: O(1) Constraints: 1 ≤ r, c ≤ 200 1 ≤ matrix[i][j] ≤ 10^9","solution":"def findMedian(matrix): Returns the median of a matrix where each row is sorted in ascending order. r = len(matrix) # number of rows c = len(matrix[0]) # number of columns def countLessthanEqual(matrix, mid): count = 0 for i in range(r): l, h = 0, c-1 while l <= h: md = (l + h) // 2 if matrix[i][md] <= mid: l = md + 1 else: h = md - 1 count += l return count low, high = matrix[0][0], matrix[0][0] for i in range(r): low = min(low, matrix[i][0]) high = max(high, matrix[i][c-1]) while low < high: mid = (low + high) // 2 count = countLessthanEqual(matrix, mid) if count < (r * c + 1) // 2: low = mid + 1 else: high = mid return low"},{"question":"A programming competition is being organized in your school. Apart from other logistics, the organizers decided to ensure the scores can be quickly evaluated. Each programming problem has a set of points assigned, and if a participant solves a problem, they gain the corresponding points. The organizers provided a list of the points for each problem and a list indicating which problems have been solved by a participant. Given the list of points for all problems and a list of indices representing the problems solved by a participant, your task is to calculate the total score for that participant. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), denoting the number of problems. The second line contains n integers separated by spaces: p1, p2, ..., pn (1 ≤ pi ≤ 1000), where pi represents the points assigned to the i-th problem. The third line contains an integer m (0 ≤ m ≤ n), denoting the number of problems solved by the participant. The fourth line contains m distinct integers separated by spaces: s1, s2, ..., sm (1 ≤ si ≤ n), where si represents the index of a solved problem in the range [1, n]. -----Output----- Print the total score of the participant. -----Examples----- Input 5 10 20 30 40 50 3 1 3 5 Output 90 Input 4 25 50 75 100 2 2 4 Output 150 Input 3 15 25 40 0 Output 0","solution":"def compute_total_score(points, solved_indices): Returns the total score based on the points for each problem and the indices of solved problems. :param points: List of integers representing points for each problem. :param solved_indices: List of integers representing indices of solved problems. :return: Integer representing total score. return sum(points[i - 1] for i in solved_indices)"},{"question":"In this problem, we only consider strings consisting of lowercase English letters. Two strings s and t are called anagrams if the following conditions are satisfied: * |s| = |t| * s and t contain the same characters the same number of times. For example, `listen` and `silent` are anagrams, while `apple` and `pabble` are not. We define an anagram group as a set of strings that are anagrams of each other. For example, {\\"listen\\", \\"silent\\", \\"enlist\\"} is one anagram group, and {\\"example\\", \\"pexelma\\"} is another. A string s is said to be in canonical form if it is the lexicographically smallest string in its anagram group. For example, `listen` is in canonical form for the anagram group {\\"listen\\", \\"silent\\", \\"enlist\\"} because `listen` is lexicographically smaller than both `silent` and `enlist`. You are given a list of words. Print all the strings in their canonical forms in lexicographically ascending order, and group the output by their original anagram groups. Constraints * 1 leq length of any word in the list leq 100 * All values in input are lowercase English letters. * 1 leq number of words in input leq 1000 Input Input is given from Standard Input in the following format: The first line contains an integer M, the number of words. Each of the next M lines contains a word. Output Output all words in canonical form grouped by their original anagram groups in lexicographically ascending order. Display each group on a new line, with words separated by a space. Examples Input 6 listen silent enlist example lead deal Output lead deal listen enlist silent example","solution":"def anagram_groups(words): from collections import defaultdict # Group words by the sorted tuple of their characters anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) # Sort each group and the list of groups lexicographically result = [] for group in anagram_dict.values(): result.append(\' \'.join(sorted(group))) return sorted(result)"},{"question":"You are given a function g(x) which is defined as the sum of the binary digits (bits) of x. In other words, g(x) is the number of \'1\'s in the binary representation of x. Polycarpus has a sequence consisting of n non-negative integers: b_1, b_2, ..., b_{n}. Polycarpus wants to find the maximum value of g(b_i) over all possible i (1 ≤ i ≤ n). Additionally, he wants to know the count of occurrences of this maximum value within the sequence. Help Polycarpus solve this problem by writing a program that finds the maximum value of g(b_i) and the number of times this maximum value occurs in the given sequence. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in sequence b. The second line contains n space-separated integers b_1, b_2, ..., b_{n} (0 ≤ b_{i} ≤ 10^6) — the elements of sequence b. -----Output----- Print two space-separated integers: the maximum value of g(b_i) and the count of occurrences of this maximum value in the sequence. -----Examples----- Input 5 3 7 8 15 6 Output 4 2 Input 4 0 0 0 0 Output 0 4 -----Explanation----- In the first test case, the binary representations and corresponding g(x) values of the sequence are: - 3 -> 011 -> g(3) = 2 - 7 -> 111 -> g(7) = 3 - 8 -> 1000 -> g(8) = 1 - 15 -> 1111 -> g(15) = 4 - 6 -> 110 -> g(6) = 2 The maximum value of g(b_i) is 4 and it occurs twice (for 15). In the second test case, all elements are zero (binary: 0), so g(x) = 0 and it occurs four times.","solution":"def max_binary_ones_and_count(sequence): This function returns the maximum value of the sum of binary digits of elements in the sequence and the number of times this maximum value occurs in the sequence. :param sequence: List of non-negative integers :return: A tuple (max_g, count_max_g) max_g = -1 count_max_g = 0 for number in sequence: g = bin(number).count(\'1\') if g > max_g: max_g = g count_max_g = 1 elif g == max_g: count_max_g += 1 return max_g, count_max_g"},{"question":"You are given an array A of size N filled with integers. You are also given Q queries, each consisting of two integers L and R. For each query, determine if the subarray A[L:R] has any two elements such that their sum is even. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the size of the array A. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N} denoting the array A. - The third line of each test case contains an integer Q - denoting the number of queries. - The i^{th} of the next Q lines contains two space-separated integers L and R. ------ Output Format ------ For each test case, - For each query, print \\"YES\\" if there is at least one pair of elements in the subarray A[L:R] whose sum is even, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ A_{i} ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N - Sum of N over all test cases does not exceed 10^5. - Sum of Q over all test cases does not exceed 10^5. ------ Sample Input 1 ------ 1 5 2 3 4 5 6 2 1 3 2 5 ------ Sample Output 1 ------ YES YES ------ Explanation 1 ------ Test case 1: - Query 1: L = 1, R = 3. The subarray A[1:3] is [2, 3, 4]. The pairs (2, 4) and (3, 5) have an even sum. Therefore, the answer is \\"YES\\". - Query 2: L = 2, R = 5. The subarray A[2:5] is [3, 4, 5, 6]. The pairs (4, 6) and (5, 3) have an even sum. Therefore, the answer is \\"YES\\".","solution":"def has_even_sum_pair(A, L, R): Determines if there exists a pair in the subarray A[L:R] whose sum is even. Args: A (list): The array of integers. L (int): The starting index of the subarray. R (int): The ending index of the subarray. Returns: bool: True if there exists a pair whose sum is even, False otherwise. subarray = A[L-1:R] even_count = odd_count = 0 for number in subarray: if number % 2 == 0: even_count += 1 else: odd_count += 1 # If the subarray has at least two evens or two odds, then there is an even sum pair return even_count >= 2 or odd_count >= 2 def process_queries(T, test_cases): results = [] for case in test_cases: N, A, Q, queries = case case_results = [] for L, R in queries: if has_even_sum_pair(A, L, R): case_results.append(\\"YES\\") else: case_results.append(\\"NO\\") results.append(case_results) return results"},{"question":"Given an array of integers `arr` of length `n`, find the smallest integer `x` such that the sum of `arr` remains an even number after `x` is added to the array. Constraints * 1 leq n leq 100 * -10^4 leq arr[i] leq 10^4 Input Input is given from Standard Input in the following format: ``` n arr ``` Output Print the smallest integer `x` such that the sum of `arr` becomes even. Examples Input ``` 3 1 3 5 ``` Output ``` 1 ``` Input ``` 4 2 4 6 8 ``` Output ``` 0 ``` Input ``` 2 7 8 ``` Output ``` 1 ```","solution":"def smallest_x_to_make_sum_even(arr): Given an array of integers, find the smallest integer x such that the sum of the array becomes even after adding x. sum_of_arr = sum(arr) # If the sum of the array is even, return 0 if sum_of_arr % 2 == 0: return 0 # If the sum of the array is odd, return 1 else: return 1"},{"question":"Python established in handling tasks with data structures. He is given a list of integers and needs to perform the following operations: 1. Identify and print the unique elements in the list in the order they appeared. 2. Sort the list in ascending order. 3. Count the occurrences of each element in the original list. Example 1: Input: arr = [4, 5, 6, 5, 4, 3, 2, 1, 3, 2] Output: Unique Elements: [4, 5, 6, 3, 2, 1] Sorted List: [1, 2, 2, 3, 3, 4, 4, 5, 5, 6] Element Frequency: {4: 2, 5: 2, 6: 1, 3: 2, 2: 2, 1: 1} Explanation: - Unique elements in the order of appearance are [4, 5, 6, 3, 2, 1]. - After sorting, the list becomes [1, 2, 2, 3, 3, 4, 4, 5, 5, 6]. - Frequency of each element: 4 appears 2 times, 5 appears 2 times, 6 appears 1 time, 3 appears 2 times, 2 appears 2 times, 1 appears 1 time. Example 2: Input: arr = [1, 2, 3, 4, 5, 6] Output: Unique Elements: [1, 2, 3, 4, 5, 6] Sorted List: [1, 2, 3, 4, 5, 6] Element Frequency: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1} Explanation: - Unique elements in the order of appearance are [1, 2, 3, 4, 5, 6]. - The list is already sorted. - Each element appears exactly once. Your Task: You do not need to read input or print any output. Implement the function analyzeList() which takes a list of integers arr as input parameter and returns a tuple containing three elements: - A list of unique elements in the order they appeared. - The sorted list of integers. - A dictionary with the count of each element. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(arr) <= 100 1 <= arr[i] <= 100","solution":"def analyze_list(arr): Analyze a list of integers to find unique elements, sort the list, and count occurrences. Parameters: arr (list): The input list of integers. Returns: tuple: A tuple containing the list of unique elements, the sorted list, and a dictionary with element counts. # Step 1: Identify and print the unique elements in the order they appeared. unique_elements = [] seen = set() for num in arr: if num not in seen: unique_elements.append(num) seen.add(num) # Step 2: Sort the list in ascending order. sorted_list = sorted(arr) # Step 3: Count the occurrences of each element in the original list. element_frequency = {} for num in arr: if num in element_frequency: element_frequency[num] += 1 else: element_frequency[num] = 1 return unique_elements, sorted_list, element_frequency"},{"question":"Pathfinding in a Grid You are given a 2D grid of size `m x n` consisting of two types of cells: empty cells and obstacle cells. Your task is to write a program that determines the shortest path from the top-left corner to the bottom-right corner of the grid. You can move left, right, up, or down, but you cannot move through obstacles. Write a program that computes the minimum number of steps needed to reach the bottom-right corner from the top-left corner. If it is not possible to reach the bottom-right corner, return -1. Input The input consists of a single test case of the following format: m n a_1 a_2 ... a_n ... a_(m-1) a_m The first line contains two integers m and n, which represent the number of rows and columns in the grid, respectively. Both m and n are between 1 and 1000, inclusive. Each of the following m lines contains n integers, either 0 or 1, representing the grid. A 0 indicates an empty cell, and a 1 indicates an obstacle. Output Output a single integer which is the minimum number of steps needed to reach the bottom-right corner from the top-left corner. If there is no such path, print -1. Sample Input 1 3 4 0 0 0 0 1 1 0 1 0 0 0 0 Sample Output 1 5 Sample Input 2 3 3 0 1 0 0 1 0 0 0 0 Sample Output 2 4 Sample Input 3 4 4 0 1 1 0 1 1 0 1 1 0 0 1 0 0 1 0 Sample Output 3 -1 Example Input 3 4 0 0 0 0 1 1 0 1 0 0 0 0 Output 5","solution":"from collections import deque def shortest_path(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, step = queue.popleft() if x == m - 1 and y == n - 1: return step for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, step + 1)) return -1 def parse_input(input_str): lines = input_str.strip().split(\\"n\\") m, n = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"You are working on an enterprise software solution for managing employee productivity in a large company. The company has N departments, each with varying numbers of employees. Each department tracks several key performance metrics for its employees and assigns a composite score based on these metrics. Your task is to determine the overall productivity score for each department and list department productivity in decreasing order. The productivity score for a department is calculated as the average of individual scores of all employees in that department. Employee scores are given, and you need to calculate the department\'s productivity score and sort departments based on these scores. Input: - The first line contains an integer N, the number of departments. - The next N lines contain information for each department: - The first integer, D, represents the number of employees in the department. - The next D integers are the scores of the employees in that department. The output should list department indices (starting from 1) sorted based on their productivity scores in decreasing order. If two departments have the same productivity score, they should be listed in the order they appeared in the input. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ D ≤ 1000 - 0 ≤ Employee Score ≤ 100 SAMPLE INPUT 3 5 99 85 91 93 88 3 78 82 81 4 97 83 79 85 SAMPLE OUTPUT 1 3 2","solution":"def department_productivity(N, departments): department_scores = [] for idx, dept in enumerate(departments, 1): D = dept[0] scores = dept[1:] average_score = sum(scores) / D department_scores.append((idx, average_score)) department_scores.sort(key=lambda x: (-x[1], x[0])) return [dept[0] for dept in department_scores] # Example usage N = 3 departments = [ [5, 99, 85, 91, 93, 88], [3, 78, 82, 81], [4, 97, 83, 79, 85] ] print(department_productivity(N, departments)) # Output: [1, 3, 2]"},{"question":"The scientists at the Institute of Byteforce are conducting an experiment to measure the growth of a certain bacteria. The bacteria doubles its population every hour. However, the growth process is affected by environmental conditions which cause the growth rate to fluctuate between different time intervals. Given the initial population of the bacteria and a list of possible growth rates (represented as percentages) for each hour, calculate the maximum possible population of the bacteria after a certain number of hours. -----Input----- The first line contains two integers n and h (1 ≤ n ≤ 100, 1 ≤ h ≤ 100), representing the initial population and the number of hours respectively. The second line contains h integers r1, r2, ..., rh (50 ≤ ri ≤ 150), representing the percentage growth rates for each hour. A growth rate of 100 means the population remains the same, less than 100 means the population decreases, and more than 100 means the population increases. The growth rate is guaranteed to be provided as an integer, and it represents the percentage growth rate for that hour. -----Output----- Print the maximum possible population of the bacteria after h hours as an integer. -----Example----- Input 5 3 120 80 150 Output 9 -----Note----- In the example, we start with 5 bacteria. After 1 hour with a growth rate of 120%, the population becomes 5 * 1.2 = 6. After another hour with a growth rate of 80%, the population becomes 6 * 0.8 = 4.8 ≈ 5 (we consider the floor of the population value for calculation). In the final hour with a 150% growth rate, the population becomes 5 * 1.5 = 7.5 ≈ 9. Hence, the maximum population after 3 hours is 9.","solution":"def max_population(n, h, growth_rates): Calculate the maximum possible population of the bacteria after h hours given the initial population and a list of percentage growth rates. Args: n (int): Initial population of the bacteria. h (int): Number of hours. growth_rates (list of int): List of percentage growth rates for each hour. Returns: int: Maximum possible population of the bacteria after h hours. population = n for rate in growth_rates: population *= rate / 100.0 return int(population)"},{"question":"You have been given a rope with different colored beads on it, represented by a string consisting of lowercase alphabets. You need to find the length of the longest subsequence of beads such that all the beads in this subsequence are distinct. Input One line consisting of a string of lowercase alphabets representing the beads on the rope. Output Single line denoting the length of the longest subsequence of distinct beads. Constraints 1 ≤ length of the string ≤ 100000 Example Input: abacc Output: 3 Explanation The longest subsequence of distinct beads in the input string \\"abacc\\" is \\"abc\\" or \\"bac\\", both of which have a length of 3.","solution":"def longest_distinct_subsequence_length(bead_string): Returns the length of the longest subsequence of distinct beads. Parameters: bead_string (str): A string representing the beads on the rope. Returns: int: The length of the longest subsequence of distinct beads. # Set to store unique characters char_set = set() for char in bead_string: char_set.add(char) return len(char_set)"},{"question":"Imagine you are tasked with writing a function to assist with room management in a hotel. Each guest in a hotel is assigned a room when they check in. The hotel manager sometimes needs to quickly switch the rooms of two guests. The hotel has n rooms, each identified by a unique number from 1 to n. Each room can be either occupied or empty. Every guest is assigned to only one room, and each room can hold only one guest at any time. Design a function that helps the hotel manager perform room swaps between two guests based on their guest IDs. -----Input----- The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of rooms in the hotel. - The second line contains n integers, where the i-th integer is either -1 (indicating the room is empty) or a positive integer g (1 ≤ g ≤ 10^6) which indicates the guest ID of the guest occupying the i-th room. - The third line contains two integers a and b (1 ≤ a, b ≤ 10^6) — the guest IDs of the two guests whose rooms need to be swapped. It is guaranteed that the two guests are not in the same room, and both guests are present in the hotel. -----Output----- Print n integers, the new arrangement of guests after the swap, where the i-th integer indicates the resident guest ID of the i-th room or -1 if it is empty. -----Examples----- Input 6 3 -1 2 6 5 1 2 6 Output 3 -1 6 2 5 1 Input 5 1 2 3 4 5 1 5 Output 5 2 3 4 1 -----Note----- In the first example, the guests with IDs 2 and 6 are swapped. Room 3 now has guest ID 6 and room 4 has guest ID 2. In the second example, the guests with IDs 1 and 5 are swapped. Room 1 now has guest ID 5 and room 5 has guest ID 1.","solution":"def swap_rooms(n, room_arrangement, guest_a, guest_b): Swaps the rooms of two guests based on their IDs. Args: n : int Number of rooms in the hotel. room_arrangement : list of int List of guest IDs or -1 for each room in the hotel. guest_a : int Guest ID of the first guest. guest_b : int Guest ID of the second guest. Returns: list of int The new arrangement of guests in the rooms after the swap. # Find the indices of the two guests index_a = room_arrangement.index(guest_a) index_b = room_arrangement.index(guest_b) # Swap the guests in the room arrangement room_arrangement[index_a], room_arrangement[index_b] = room_arrangement[index_b], room_arrangement[index_a] return room_arrangement"},{"question":"# Task Write a function that calculates the minimum number of steps required to move from one cell in a grid to another. You can move in four possible directions: up, down, left and right. Each move must be to an adjacent cell. Your task is to determine the minimum number of steps required to move from the start cell to the destination cell. # Example For `grid`: ``` [[0, 0, 0], [0, 0, 0], [0, 0, 0]] ``` `start` = (0, 0) and `destination` = (2, 2), the output should be `4`. For `grid`: ``` [[0, 1, 0], [0, 0, 1], [1, 0, 0]] ``` `start` = (0, 0) and `destination` = (2, 2), the output should be `4`. # Input/Output - `[input]` 2D list `grid` List of lists representing the grid, where `0` represents an open cell and `1` represents a blocked cell. The grid dimensions are guaranteed to be between `2x2` and `100x100`. - `[input]` tuple `start` Tuple of two integers representing the starting cell coordinates `(row, col)`, where `0 <= row < len(grid)` and `0 <= col < len(grid[0])`. - `[input]` tuple `destination` Tuple of two integers representing the destination cell coordinates `(row, col)`, where `0 <= row < len(grid)` and `0 <= col < len(grid[0])`. - `[output]` an integer The minimum number of steps required to move from the start cell to the destination cell. If there is no valid path, return `-1`.","solution":"from collections import deque def min_steps(grid, start, destination): Calculate the minimum number of steps from start to destination in a grid. :param grid: List[List[int]], the grid representation (0 for open cell, 1 for blocked cell). :param start: Tuple[int, int], the start coordinates (row, col). :param destination: Tuple[int, int], the destination coordinates (row, col). :return: int, the minimum number of steps required to reach destination from start, or -1 if no valid path. if grid[start[0]][start[1]] == 1 or grid[destination[0]][destination[1]] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: r, c, steps = queue.popleft() if (r, c) == destination: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, steps + 1)) visited.add((nr, nc)) return -1"},{"question":"Given a string s consisting of lowercase letters, determine the length of the longest palindrome that can be built with those letters. The frequency of characters in the string determines how many letters can be used to form a palindrome. Each character can be used at most as many times as it appears in the string, and only one character can appear an odd number of times to be in the middle of the palindrome. Example 1: Input: s = \\"abccccdd\\" Output: 7 Explanation: One possible longest palindrome that can be built is \\"dccaccd\\". Example 2: Input: s = \\"a\\" Output: 1 Explanation: The only possible palindrome is \\"a\\". Your Task: You don\'t need to read input or print anything. Implement the function longestPalindrome() which takes a string s as input parameter and returns the length of the longest palindrome that can be built with those letters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= s.length <= 10^4 s consists of lowercase letters only.","solution":"def longestPalindrome(s): Determine the length of the longest palindrome that can be built with the letters in the string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Given a string containing only curly braces `{` and `}`, determine whether the braces are balanced. A string of braces is considered balanced if all braces are properly matched and nested. Examples: Input: S = \\"{}{}\\" Output: 1 Explanation: All braces are properly matched and nested. Input: S = \\"{{}}\\" Output: 1 Explanation: All braces are properly matched and nested. Input: S = \\"{{}\\" Output: 0 Explanation: The braces are not properly balanced. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isBalanced() which takes the string s as input and returns 1 if the braces are balanced, otherwise 0. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^{5}","solution":"def isBalanced(s): Returns 1 if the string s containing only curly braces is balanced, otherwise 0. balance = 0 for char in s: if char == \'{\': balance += 1 elif char == \'}\': balance -= 1 if balance < 0: return 0 return 1 if balance == 0 else 0"},{"question":"Your task is to write a program that reads a series of time durations and calculates their total sum. Each time duration is given in the format \\"HH:MM\\", representing hours and minutes. The input ends with a line containing only \\"00:00\\". The input consists of at most 100 time durations. Input The input is a sequence of lines, each containing a time duration in the format \\"HH:MM\\". The end of the input is indicated by a line containing \\"00:00\\". Output Print the total duration in the format \\"HH:MM\\". Example Input 01:30 02:45 03:15 00:00 Output 07:30","solution":"def sum_time_durations(durations): Sums up a list of time durations given in the format \\"HH:MM\\". Stops summing when \\"00:00\\" is encountered. Returns the total duration in the format \\"HH:MM\\". total_minutes = 0 for duration in durations: if duration == \\"00:00\\": break hours, minutes = map(int, duration.split(\':\')) total_minutes += hours * 60 + minutes total_hours = total_minutes // 60 total_minutes = total_minutes % 60 return f\\"{total_hours:02}:{total_minutes:02}\\" # Example usage # durations = [\\"01:30\\", \\"02:45\\", \\"03:15\\", \\"00:00\\"] # print(sum_time_durations(durations)) # Output: \\"07:30\\""},{"question":"A company wants to develop an automated system that tracks and records the sales of their products. The company sells various products, and each product has a unique name, price, and quantity sold. Based on the sales data, the company wants to calculate the total revenue generated from the sales of each product, and the overall total revenue. Write a program that takes the product details and sales data, and then outputs the total revenue for each product and the overall total revenue. # Input - The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100), the number of different products. - The following ( n ) lines each contain a string ( name_i ) (1 ≤ |( name_i )| ≤ 50), a floating-point number ( price_i ) (0.01 ≤ ( price_i ) ≤ 1000.0), and an integer ( quantity_i ) (1 ≤ ( quantity_i ) ≤ 1000). # Output - For each product, output a line with the product name and the total revenue generated from that product, formatted to 2 decimal places. - After all products, output a line with \\"Total Revenue: \\" followed by the overall total revenue, formatted to 2 decimal places. # Example Input ``` 3 ProductA 10.00 5 ProductB 15.50 3 ProductC 7.25 8 ``` Output ``` ProductA: 50.00 ProductB: 46.50 ProductC: 58.00 Total Revenue: 154.50 ``` # Notes - Assume product names are unique. - Calculation should correctly handle floating-point operations to maintain precision in the total revenue.","solution":"def calculate_revenues(n, products): Calculate the revenue for each product and the overall total revenue. Parameters: n (int): The number of different products. products (list of tuples): Each tuple contains (name, price, quantity) Returns: dict: A dictionary where keys are product names and values are their revenues. float: The overall total revenue. revenues = {} total_revenue = 0.0 for product in products: name, price, quantity = product revenue = price * quantity revenues[name] = revenue total_revenue += revenue return revenues, total_revenue"},{"question":"Given an array of positive integers, determine if there are three distinct elements a, b, and c in the array such that a^2 + b^2 = c^2. If such elements exist, return 1; otherwise, return 0. Example 1: Input: arr = [3, 1, 4, 6, 5] Output: 1 Explanation: 3^2 + 4^2 = 5^2 Example 2: Input: arr = [1, 2, 3, 4] Output: 0 Explanation: No such elements exist. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPythagoreanTriplet() which takes an array of integers arr and returns 1 if there exist three distinct elements a, b, and c such that a^2 + b^2 = c^2, else returns 0. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 100 1 <= arr[i] <= 1000","solution":"def findPythagoreanTriplet(arr): Determines if there are three distinct elements a, b, and c in the array such that a^2 + b^2 = c^2. Args: arr (List[int]): The input array of positive integers. Returns: int: 1 if such elements exist, 0 otherwise. n = len(arr) # Square all elements squared = [x * x for x in arr] squared_set = set(squared) # Check every pair to see if the sum of their squares is also in the squared list for i in range(n): for j in range(i + 1, n): if squared[i] + squared[j] in squared_set: return 1 return 0"},{"question":"You are given a string `s` consisting of lowercase letters. You want to reorder the characters of the string such that no two adjacent characters are the same. If it is possible to reorder the string in such a way, return the rearranged string. Otherwise, return an empty string. -----Input----- The first and only line of input contains a string `s` (1le |s|le 10^5). -----Output----- Output the rearranged string if possible. If it is not possible to rearrange the string such that no two adjacent characters are the same, return an empty string. -----Examples----- Input aab Output aba Input aaab Output (empty string) -----Note----- In the first sample, the string \\"aab\\" can be rearranged to \\"aba\\", where no two adjacent characters are the same. In the second sample, the string \\"aaab\\" cannot be rearranged so that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def reorganize_string(s): count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char return \'\'.join(result) if len(result) == len(s) else \'\'"},{"question":"Charlie has a unique way of arranging his books in his vast library. He only likes to keep a single row of books on a shelf such that each book either increases or decreases in size compared to the previous book. Charlie is constantly adding new books to his collection, and he wants to know the longest sequence of books he can place on a shelf following his rule. A sequence of books can be defined as alternating between strictly increasing and strictly decreasing in size. Input: The first line contains the number of test cases T. Each test case starts with an integer N, denoting the number of books. This is followed by N integers, representing the sizes of each book. Output: For each test case, print the length of the longest sequence of books that can be placed on the shelf following Charlie\'s rules. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ size of each book ≤ 100000 SAMPLE INPUT 2 5 1 3 2 4 5 4 10 5 10 5 SAMPLE OUTPUT 4 4 Explanation Test Case # 1: A possible sequence is: 1, 3, 2, 4 (which is the longest satisfying the constraint). Test Case # 2: The sequence itself adheres to the rule: 10, 5, 10, 5.","solution":"def longest_alternating_sequence(N, books): if N == 0: return 0 inc = 1 dec = 1 for i in range(1, N): if books[i] > books[i - 1]: inc = dec + 1 elif books[i] < books[i - 1]: dec = inc + 1 return max(inc, dec) def process_cases(T, cases): results = [] for i in range(T): N = cases[i][0] books = cases[i][1] results.append(longest_alternating_sequence(N, books)) return results"},{"question":"Peter has a large bookshelf with N books, all positioned in a single row. Each book has a height given by an array H where H[i] denotes the height of the i-th book. Peter loves symmetry and wants to rearrange the books on the shelf such that as many books as possible form a contiguous subarray with symmetrical height properties. A subarray H[L..R] (where 1 ≤ L ≤ R ≤ N) is called symmetrical if H[L + i] == H[R - i] for all i such that L + i ≤ R - i. Your task is to help Peter by determining the length of the longest symmetrical subarray of book heights. Input: The first line contains a single integer N (1 ≤ N ≤ 200000), the number of books on the shelf. The second line contains N integers H[1], H[2], ..., H[N] (1 ≤ H[i] ≤ 10^9), the heights of the books. Output: Output a single integer, the length of the longest symmetrical subarray of book heights. Example: Input: 7 2 3 7 7 3 2 1 Output: 6 Input: 5 1 2 3 4 5 Output: 1 Explanation: In the first example, the longest symmetrical subarray is [2, 3, 7, 7, 3, 2], which has a length of 6. In the second example, each subarray can only have a maximum length of 1 since there are no symmetrical subarrays longer than 1.","solution":"def longest_symmetrical_subarray(N, H): def is_symmetric(subarray): return subarray == subarray[::-1] max_len = 1 # At least each individual book is a symmetrical subarray of length 1 for start in range(N): for end in range(start + 1, N + 1): if is_symmetric(H[start:end]): max_len = max(max_len, end - start) return max_len # Helper function to convert input, this won\'t be part of the actual solution def main(input_str): input_lines = input_str.strip().split(\\"n\\") N = int(input_lines[0]) H = list(map(int, input_lines[1].split())) return longest_symmetrical_subarray(N, H)"},{"question":"A large company is organizing a team-building activity. All employees will be standing in a line, and each employee must be assigned a unique integer ID from 1 to n. Unfortunately, some employees have arrived late and disrupted the sequence. The task is to determine the minimum number of swaps needed to sort the employees\' IDs in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. The second line contains n distinct integers a1, a2, ..., an — the IDs of the employees in the order they are currently standing. Output Print a single integer — the minimum number of swaps needed to sort the IDs in ascending order. Examples Input 4 4 3 1 2 Output 3 Input 5 1 2 3 5 4 Output 1","solution":"def minimum_swaps(n, arr): Returns the minimum number of swaps required to sort the array in ascending order. :param n: int, number of employees (length of the array) :param arr: list of int, employee IDs :return: int, minimum number of swaps arr = list(arr) # Make a copy of the array count = 0 index_dict = {value: index for index, value in enumerate(arr)} for i in range(n): while arr[i] != i + 1: correct_index = index_dict[i + 1] index_dict[arr[i]] = correct_index arr[i], arr[correct_index] = arr[correct_index], arr[i] count += 1 return count"},{"question":"Tina is organizing a competition where she will announce a score for each participant. To make the results more interesting, she wants to convert the scores into specific labels based on their range. She has asked you to help automate this process. The following ranges and their corresponding labels are used: - 90 ≤ score ≤ 100: \\"excellent\\" - 75 ≤ score < 90: \\"good\\" - 50 ≤ score < 75: \\"satisfactory\\" - 0 ≤ score < 50: \\"unsatisfactory\\" Write a program that takes a score and outputs the appropriate label. -----Input----- The input contains a single integer n (0 ≤ n ≤ 100), which is the score of a participant. -----Output----- In the first and only line of output, print the label corresponding to the score. -----Examples----- Input 98 Output excellent Input 76 Output good Input 45 Output unsatisfactory Input 73 Output satisfactory","solution":"def convert_score_to_label(score): Convert the given score into a label based on the specified ranges. Args: score (int): The score of a participant (0 ≤ score ≤ 100). Returns: str: The label corresponding to the score. if 90 <= score <= 100: return \\"excellent\\" elif 75 <= score < 90: return \\"good\\" elif 50 <= score < 75: return \\"satisfactory\\" elif 0 <= score < 50: return \\"unsatisfactory\\" else: raise ValueError(\\"Score must be between 0 and 100 inclusive.\\")"},{"question":"In a remote island, there exists a special type of tree, known as the \\"Magical Trees\\". Each Magical Tree has a magical value associated with it. The islanders believe that by summing the values of the Magical Trees in a specific range, they can obtain wealth proportional to the sum obtained. However, these trees are spread across multiple forests, and each tree\'s value can only be known if you specifically query for it. To make it efficient, the islanders have decided to use a program to sum the values of trees over multiple queries. Given the initial values of the trees in a forest, you need to answer several queries, each asking for the sum of values of the trees in a given range. Input: The first line consists of two integers, N and Q, where N is the number of Magical Trees and Q is the number of queries. The second line contains N space-separated integers, where the i-th integer represents the initial magical value of the i-th tree. The next Q lines contain two space-separated integers, L and R, representing the range [L, R] for which the sum of values is queried. Note that the range is inclusive and 1-based. Output: For each query, output the sum of the values of the trees in the given range on a new line. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 0 ≤ Value of each tree ≤ 10^4 SAMPLE INPUT 5 3 4 2 7 3 1 1 3 2 4 1 5 SAMPLE OUTPUT 13 12 17 Explanation: Query 1: The sum of the values from tree 1 to tree 3 is 4 + 2 + 7 = 13. Query 2: The sum of the values from tree 2 to tree 4 is 2 + 7 + 3 = 12. Query 3: The sum of the values from tree 1 to tree 5 is 4 + 2 + 7 + 3 + 1 = 17.","solution":"def magical_trees_sum(N, Q, values, queries): # Create a prefix sum array prefix_sum = [0] * (N + 1) for i in range(1, N + 1): prefix_sum[i] = prefix_sum[i - 1] + values[i - 1] # Processing each query and returning results results = [] for L, R in queries: sum_query = prefix_sum[R] - prefix_sum[L - 1] results.append(sum_query) return results"},{"question":"The city traffic department wants to analyze the traffic flow through junctions in the city. They monitor the traffic flow passing through each junction over a 24-hour period and want to find out the minimum traffic flow recorded within any 1-hour period throughout the day. You are given the flow data as a list of 24 integers, each representing the traffic flow in one hour of the day, starting from midnight. Write a function `minTrafficFlow` which returns the minimum traffic flow recorded for any 1-hour period. # Example 1 Input: traffic_data = [120, 150, 100, 80, 60, 90, 110, 140, 130, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60, 50, 40, 30] Output: 30 Explanation: The lowest traffic flow was recorded in the last hour of the day (11 PM to midnight), which is 30 units. # Example 2 Input: traffic_data = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 160, 150, 140, 130, 120, 110, 100, 90, 80, 70, 60] Output: 50 Explanation: The lowest traffic flow was recorded in the first hour of the day (midnight to 1 AM), which is 50 units. # Your Task: You don’t need to read input or print anything. Your task is to complete the function `minTrafficFlow()` which takes the array `traffic_data` as input and returns the minimum traffic flow. # Expected Time Complexity: O(1) for each index of the list. # Constraints: - traffic_data will have exactly 24 integers. - Each value of traffic_data will be between 0 and 10^4.","solution":"def minTrafficFlow(traffic_data): Returns the minimum traffic flow recorded in any 1-hour period throughout the day. Parameters: traffic_data (list of int): A list of 24 integers representing the traffic flow in each hour of the day. Returns: int: The minimum traffic flow. return min(traffic_data)"},{"question":"A public library system needs a software application to manage book lending and returns. Each book in the library is identified by a unique ISBN number. The library keeps track of books that are currently on loan and books that are available for borrowing. Your task is to create a function that processes a series of actions related to book loans and returns. The input will be a list of tuples. Each tuple has two elements: 1. A string that can either be `\\"borrow\\"` or `\\"return\\"`, indicating the type of action. 2. A string representing the ISBN number of the book. Your function should output a dictionary reflecting the current state of the library\'s inventory after processing all actions. The dictionary should have two keys: - `\\"on_loan\\"`: a list of ISBN numbers currently on loan, in the order they were borrowed. - `\\"available\\"`: a list of ISBN numbers currently available for borrowing, in the order they were returned. Assume that an attempt to return a book that is not on loan does nothing, and an attempt to borrow a book that is not available also does nothing. Initially, all books are available for borrowing. For example, given the initial list of available books `[\\"1234567890\\", \\"0987654321\\", \\"1122334455\\"]` and the series of actions: ``` [ (\\"borrow\\", \\"1234567890\\"), (\\"borrow\\", \\"0987654321\\"), (\\"return\\", \\"1234567890\\"), (\\"borrow\\", \\"1122334455\\"), (\\"return\\", \\"0987654321\\"), (\\"borrow\\", \\"1234567890\\"), (\\"return\\", \\"0000000000\\") ] ``` After processing the actions, the output should be: ``` { \\"on_loan\\": [\\"1122334455\\", \\"1234567890\\"], \\"available\\": [\\"0987654321\\"] } ```","solution":"def process_actions(initial_books, actions): library = { \\"on_loan\\": [], \\"available\\": initial_books.copy() } for action, isbn in actions: if action == \\"borrow\\": if isbn in library[\\"available\\"]: library[\\"available\\"].remove(isbn) library[\\"on_loan\\"].append(isbn) elif action == \\"return\\": if isbn in library[\\"on_loan\\"]: library[\\"on_loan\\"].remove(isbn) library[\\"available\\"].append(isbn) return library"},{"question":"Given an integer N, the task is to compute the maximum possible value obtained by deleting exactly one digit of the given number. For example, if N = 2319, removing the digit \'3\' results in 219, and removing \'9\' results in 231. Among these options, the maximum value is 231. Example 1: Input: N = 2319 Output: 319 Explanation: Removing \'2\' results in 319, which is the highest possible value. Example 2: Input: N = 104 Output: 14 Explanation: Removing \'0\' leads to the value 14, which is the maximum possible value. Your Task: You need to complete the function maxAfterDeletion() which takes an integer N and returns the maximum value obtained by deleting exactly one digit from the given number. Expected Time Complexity: O(d) where d is the number of digits in N. Expected Auxiliary Space: O(1). Constraints: 10 ≤ N ≤ 10^9","solution":"def maxAfterDeletion(N): Returns the maximum possible value obtained by deleting exactly one digit from the given number N. str_N = str(N) max_value = 0 for i in range(len(str_N)): new_value = int(str_N[:i] + str_N[i+1:]) max_value = max(max_value, new_value) return max_value"},{"question":"Michael and Sarah are roboticists working on a research project involving robotic arms. They have a set of robotic arms with different extension lengths. Their goal is to find the maximum possible distance between two points that can be achieved using two of these robotic arms in a straight line, both starting from the same initial point. -----Input----- The input consists of a single line containing an integer n, the number of robotic arms, followed by n integers representing the lengths of the robotic arms. The lengths are integers between 1 and 100. The number of robotic arms n is between 2 and 100. -----Output----- The output should be a single line containing the maximum distance possible between the two points that can be achieved using two of the given robotic arm lengths. The answer should be rounded to one decimal place. -----Examples----- Sample Input 1: 4 5 10 3 8 Sample Output 1: 18.0 Sample Input 2: 3 7 2 5 Sample Output 2: 12.0","solution":"def max_distance_arms(n, lengths): Given the number of robotic arms and their lengths, return the maximum possible distance between two points starting from the same initial point using two arms. # Sort the lengths list in descending order to get the two longest arms lengths.sort(reverse=True) # The maximum distance will be the sum of the two longest lengths return round(float(lengths[0] + lengths[1]), 1) # Example usage of the function n = 4 lengths = [5, 10, 3, 8] print(max_distance_arms(n, lengths)) # Output: 18.0"},{"question":"Max is an avid hiker who loves to explore various mountain ranges. He carries a GPS device that logs his elevation at each point during his hike. The data recorded by the device is a sequence of integers representing the height above sea level at each point of the hike. Max noticed that while hiking, the terrain often consists of multiple peaks and valleys. He would like to identify and count all the valleys he has encountered during his hike. A valley is defined as a sequence of consecutive positions starting at a peak and ending at another peak, where each position in between is lower than both peaks. In other words, a valley is bounded by two peaks and all points in the valley are lower than the bounding peaks. Given the elevation data, determine the number of valleys in Max\'s hike. Input The first line contains an integer n (2 ≤ n ≤ 1000) - the number of points recorded by the GPS device. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10000) - the elevation at each point of the hike. Output Print a single integer - the number of valleys in the hike. Examples Input 6 100 150 80 120 100 90 Output 1 Input 8 150 130 170 140 180 160 175 155 Output 2 Note In the first example, there is one valley between points with elevations 150 and 120, with 80 being the lowest point in the valley. In the second example, there are two valleys: one between 150 and 170, and the second between 180 and 175.","solution":"def count_valleys(n, heights): Given the number of points and their respective elevations, return the number of valleys encountered during the hike. Parameters: n (int): number of points recorded by the GPS heights (list of int): elevations at each point Returns: int: number of valleys if n < 2: return 0 peaks = [] for i in range(1, n - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks.append(i) if len(peaks) < 2: return 0 valleys = 0 for i in range(1, len(peaks)): peak1 = peaks[i-1] peak2 = peaks[i] if all(heights[peak1] > heights[k] < heights[peak2] for k in range(peak1 + 1, peak2)): valleys += 1 return valleys"},{"question":"Background The kindergarten attached to the University of Aizu is a kindergarten where children who love programming gather. Rei, one of the kindergarten children, loves strings as much as programming. Rei-kun has been enthusiastic about creating special strings recently. Rei-kun was playing with strings today, but since it is easy to create many special strings with the characters he has, today he thought about maximizing the length of a special string he can create using all characters only once. So Rei-kun decided to write a program to see if the length of the special string was really maximized after creating it using all characters. A special string is defined as a string in which every character appears only once. Problem You will be given a string consisting of lowercase English alphabets, so find the length of the longest special string that can be created using all the characters only once. Input A single line containing a string `s` (1 ≤ |s| ≤ 1000), which consists of lowercase English alphabets. Output Output the length of the longest special string that can be created using all characters only once in one line. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Input aab Output 2","solution":"def length_of_longest_special_substring(s: str) -> int: Returns the length of the longest substring where every character appears only once. # Set to store unique characters in the current window char_set = set() l = 0 longest_length = 0 for r in range(len(s)): # If character s[r] is already in the set, # move the left pointer to the right until s[r] is not in the set while s[r] in char_set: char_set.remove(s[l]) l += 1 # Add the current character to the set and update the result if needed char_set.add(s[r]) longest_length = max(longest_length, r - l + 1) return longest_length"},{"question":"Write a function to determine the maximum number of distinct substrings that can be formed from a given string of lowercase letters. **Rules:** - A substring is defined as a contiguous sequence of characters within a string. - Duplicate substrings should be counted as one. **Examples:** ``` \\"abc\\" => 6 Explanation: The distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". \\"aaa\\" => 3 Explanation: The distinct substrings are \\"a\\", \\"aa\\", and \\"aaa\\". \\"ababa\\" => 9 Explanation: The distinct substrings are \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"baba\\", and \\"ababa\\". ```","solution":"def max_distinct_substrings(s: str) -> int: Returns the maximum number of distinct substrings that can be formed from the given string. substrings = set() n = len(s) for i in range(n): for j in range(i, n): substrings.add(s[i:j+1]) return len(substrings)"},{"question":"Write a function that takes a list of integers and returns the length of the longest subsequence such that all elements of the subsequence are consecutive integers, the consecutive numbers can be in any order. Example arr=[100, 4, 200, 1, 3, 2] The longest consecutive elements sequence is 1, 2, 3, 4. Therefore its length is 4. Function Description Complete the function `longestConsecutive` in the editor below. `longestConsecutive` has the following parameter: * `int arr[n]`: an array of integers. Returns * `int`: the length of the longest subsequence of consecutive integers. Input Format The first line contains an integer boldsymbol{n}, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. Constraints 1leq nleq10^5 -10^9 leq arr[i] leq 10^9 Output Format Print the length of the longest subsequence of consecutive integers. Sample Input ``` 6 100 4 200 1 3 2 ``` Sample Output ``` 4 ``` Explanation The array can be sorted to [1, 2, 3, 4, 100, 200], and the longest consecutive elements sequence is 1, 2, 3, 4. Hence, the length is 4.","solution":"def longestConsecutive(arr): Returns the length of the longest subsequence of consecutive integers. if not arr: return 0 num_set = set(arr) # Convert list to set for O(1) lookups max_length = 0 for num in num_set: # Check if it is a starting point of a sequence if num - 1 not in num_set: current_num = num current_length = 1 # Increment the sequence while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"**Problem:** Priya loves playing with numbers and often indulges in creating patterns with them. She has taken a challenge to find the smallest positive integer divisible by both `n` and `m` for given values of `n` and `m`. Your task is to help Priya by writing a program that finds the Least Common Multiple (LCM) of `n` and `m`. **Input:** - The first line contains an integer `T`, the number of test cases. - The next `T` lines contain two space-separated integers `n` and `m`. **Output:** - For each pair of numbers `n` and `m`, output their LCM in a new line. **Constraints:** - 1 ≤ T ≤ 100 - 1 ≤ n, m ≤ 10^6 **Sample Input:** ``` 3 4 6 15 20 7 13 ``` **Sample Output:** ``` 12 60 91 ``` **Explanation:** - For the first test case, 12 is the smallest number divisible by both 4 and 6. - For the second test case, 60 is the smallest number divisible by both 15 and 20. - For the third test case, 91 is the smallest number divisible by both 7 and 13. The Least Common Multiple (LCM) of two integers `a` and `b` is the smallest positive integer that is divisible by both `a` and `b`. You can use the relationship between GCD (Greatest Common Divisor) and LCM to solve this problem efficiently: [ text{LCM}(a, b) = frac{a times b}{text{GCD}(a, b)} ]","solution":"import math def lcm(n, m): Returns the Least Common Multiple (LCM) of n and m. return abs(n * m) // math.gcd(n, m) def find_lcms(test_cases): Given a list of test cases where each test case is a tuple (n, m), return a list of the LCM results for each test case. return [lcm(n, m) for n, m in test_cases]"},{"question":"Samantha loves arranging her collection of flower bouquets. She has collection data consisting of multiple bouquets, each with a certain number of flowers of different colors. A bouquet is considered to be an \\"ideal bouquet\\" if it contains at least one flower of every color. Given the number of types of flowers and the list of bouquets specifying how many flowers of each type they contain, determine the number of \\"ideal bouquets\\" in her collection. -----Input----- The first line of input contains two integers m,n (1 leq m leq 100, 1 leq n leq 10^5). The second line contains m integers, where the i-th integer c_i (1 leq c_i leq 100) represents the number of flowers of the i-th type required to be considered \\"ideal\\". Each of the next n lines describes a bouquet in the form of m integers: the number of flowers of each type in the bouquet. -----Output----- The output should contain exactly one line with a single integer: the number of \\"ideal bouquets\\" in the collection. -----Examples----- Sample Input 1: 3 5 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 Sample Output 1: 4 Sample Input 2: 2 4 1 2 2 3 1 1 2 2 0 2 Sample Output 2: 2","solution":"def number_of_ideal_bouquets(m, n, required, bouquets): Returns the number of ideal bouquets in the collection. Parameters: m (int): number of types of flowers. n (int): number of bouquets. required (list of int): the number of flowers of each type required to be considered \\"ideal\\". bouquets (list of list of int): the list of bouquets where each bouquet is represented by a list of the number of flowers of each type. Returns: int: The number of ideal bouquets. ideal_count = 0 for bouquet in bouquets: if all(bouquet[i] >= required[i] for i in range(m)): ideal_count += 1 return ideal_count"},{"question":"A company records the sales transactions of its products in two lists where each transaction is represented as a tuple of product ID and the quantity sold. You have to create a program that compares these two lists of transactions and outputs the product IDs that appear in both lists along with the sum of quantities sold from both lists. Input Two lists of transactions are given separated by one blank line. Each transaction is represented in the following format: (p1, q1) (p2, q2) ... ... pi (1 ≤ pi ≤ 1,000) is an integer representing the product ID, and qi (1 ≤ qi ≤ 100) is an integer representing the quantity sold. Output For products that appear in both lists, output the product ID followed by the sum of quantities sold from both lists, in ascending order of product ID. Example Input 101,10 202,15 303,5 101,5 303,10 404,2 Output 101 15 303 15","solution":"def merge_sales(list1, list2): This function takes two lists of transactions and returns a list of tuples containing product ID and the total quantity sold for products that appear in both lists. Each input list contains tuples (product ID, quantity sold). from collections import defaultdict sales_map = defaultdict(int) for prod_id, qty in list1: sales_map[prod_id] += qty common_sales = [] for prod_id, qty in list2: if prod_id in sales_map: common_sales.append((prod_id, sales_map[prod_id] + qty)) return sorted(common_sales) # Example input list1 = [(101, 10), (202, 15), (303, 5)] list2 = [(101, 5), (303, 10), (404, 2)] print(merge_sales(list1, list2))"},{"question":"Write a function `valid_subsequence(s1, s2)` that takes in two strings `s1` and `s2`, and returns `True` if `s2` is a subsequence of `s1`, and `False` otherwise. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. ------ Function Signature ------ ```python def valid_subsequence(s1, s2) -> bool: pass ``` ------ Input ------ * `s1` - a string consisting of lowercase English letters with length in range [1, 1000]. * `s2` - a string consisting of lowercase English letters with length in range [1, 1000]. ------ Output ------ * `True` if `s2` is a subsequence of `s1`, otherwise `False`. ------ Example Input ------ ```python s1 = \\"abcdef\\" s2 = \\"ace\\" ``` ------ Example Output ------ ```python True ``` ------ Explanation ------ In the example above, \'ace\' can be obtained from \'abcdef\' by deleting the letters \'b\', \'d\', and \'f\'. ------ Additional Notes ------ 1. An empty string is a valid subsequence of any string. 2. The characters in `s2` must appear in the same relative order as `s1`. ------ Constraints ------ - The length of `s1` and `s2` would not exceed 1000 characters each.","solution":"def valid_subsequence(s1, s2) -> bool: Returns True if s2 is a subsequence of s1, otherwise False. s2_index = 0 s2_length = len(s2) for char in s1: if s2_index == s2_length: break if char == s2[s2_index]: s2_index += 1 return s2_index == s2_length"},{"question":"You are given a grid of size n x m where each cell contains an integer. Being inside the grid means that your current position is limited by the cells of the grid. Initially, you are located at the top-left corner of the grid (cell (1, 1)). You can only move right or down each time. Your goal is to reach the bottom-right corner of the grid (cell (n, m)). However, there are two types of obstacles that you might encounter while moving from cell to cell: - Rocks, which decrease your energy. - Water bodies, which increase your energy. You start with an initial amount of energy E. Each time you move to a cell with a rock, your energy decreases by 1. Moving to a cell with a water body increases your energy by 1. Standard cells do not change your energy. Determine the minimum amount of initial energy E so that you can reach the bottom-right corner of the grid without your energy dropping below zero at any point of your journey. # Input: - The first line of the input contains three integers, n, m, and E (1 ≤ n, m ≤ 500, 0 ≤ E ≤ 10^9), which represent the number of rows, number of columns, and the initial energy. - Each of the next n lines contains m integers which can be: - 0: Standard cell, - -1: Cell containing a rock, - 1: Cell containing a water body. # Output: - Print a single integer: the minimum amount of initial energy E required to reach the cell (n, m). # Example: Input: ``` 3 3 5 0 0 0 -1 1 -1 0 0 0 ``` Output: ``` 1 ``` # Explanation: You initially have 5 energy. The minimum initial energy required without letting your energy fall below zero while traveling the path (1,1) → (1,2) → (1,3) → (2,3) → (3,3) is 1.","solution":"def min_initial_energy(grid, n, m): E = float(\'inf\') dp = [[float(\'inf\')] * m for _ in range(n)] dp[0][0] = max(1, 1 - grid[0][0]) for i in range(n): for j in range(m): if i > 0: dp[i][j] = min(dp[i][j], max(dp[i-1][j] - grid[i][j], 1)) if j > 0: dp[i][j] = min(dp[i][j], max(dp[i][j-1] - grid[i][j], 1)) return dp[-1][-1] # Parse input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 3 for i in range(n): row = list(map(int, data[index:index + m])) grid.append(row) index += m print(min_initial_energy(grid, n, m))"},{"question":"My friend Lexi loves coding and the magic of prime numbers. She is working on a project for which she needs to identify \\"special primes.\\" A \\"special prime\\" is a prime number such that when you reverse its digits, the resulting number is also a prime. Your task is to help Lexi write a program to find all special primes up to a given number N. Input: The first and only line contains an integer N, the upper limit up to which to find special primes. Output: Print each special prime number up to N in ascending order, one per line. Constraint: 2 <= N <= 100000 Note: - A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. - For reversing the digits, treat the number as a string. Sample Input: 100 Sample Output: 2 3 5 7 11 13 17 31 37 71 73 79 97","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def special_primes(N): Finds all special primes up to and including N. A special prime is a prime number whose reverse is also a prime number. result = [] for num in range(2, N+1): if is_prime(num): reversed_num = int(str(num)[::-1]) if is_prime(reversed_num): result.append(num) return result def main(N): special_prime_numbers = special_primes(N) for prime in special_prime_numbers: print(prime)"},{"question":"Write a function that takes an integer `n` as input and returns a list of all prime numbers less than `n`. The function should employ an efficient algorithm to generate the primes. An example: ```python n = 10 find_primes(n) # Returns [2, 3, 5, 7] ``` # Constraints: 1. `n` will be a positive integer. 2. The function should handle large values of `n` efficiently.","solution":"import math def find_primes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(math.sqrt(n)) + 1): if sieve[start]: for multiple in range(start * start, n, start): sieve[multiple] = False primes = [num for num in range(n) if sieve[num]] return primes"},{"question":"You are a dock manager responsible for optimizing ship docking times at a port. Each ship arrives at the port at a specific time and requires a certain docking time. To ensure smooth operations, your objective is to calculate the minimum number of docks required so that no two ships are using the same dock simultaneously. Given the arrival and docking times of multiple ships, determine the minimum number of docks needed. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of ships. The next n lines contain two integers each: A_i and D_i (0 le A_i < D_i le 10^9), the arrival time and docking time of the i-th ship. -----Output----- Print a single integer — the minimum number of docks required. -----Examples----- Input 4 1 4 2 3 3 7 5 8 Output 2 Input 3 0 10 10 20 20 30 Output 1 -----Note----- In the first example, the ships arrive at times 1, 2, 3, and 5. Ships arriving at 2 and 3 can use the same dock since their docking times do not overlap. Therefore, a minimum of two docks are required to accommodate all ships without overlap. In the second example, the ships arrive and leave consecutively without overlap, so only one dock is needed.","solution":"def min_docks_required(n, schedule): events = [] for arrive, dock in schedule: events.append((arrive, 1)) events.append((dock, -1)) events.sort() current_docks = 0 max_docks = 0 for event in events: current_docks += event[1] if current_docks > max_docks: max_docks = current_docks return max_docks"},{"question":"Given a rectangular garden with dimensions M x N, you need to find the minimum number of days required to cover the entire garden with grass. Each day, the gardener can choose to plant grass in any one single cell of the garden. From the next day onwards, grass spreads to its directly adjacent cells (up, down, left, right). Write a function that, given a garden\'s dimensions, calculates the minimum number of days required to cover the entire garden with grass. Constraints: * 1 <= M, N <= 1000 Input: The input consists of two integers M and N, representing the dimensions of the garden. Output: Print a single integer, the minimum number of days required to cover the entire garden with grass. Example 1: Input: 3 3 Output: 2 Example 2: Input: 5 4 Output: 4 Explanation: In the first example, on day 1 we can plant grass at the center cell (1,1) in a 0-indexed grid. By day 2, the grass will spread to all cells of the 3x3 grid. In the second example, it\'s optimal to plant grass at the center of the grid, and it will take 4 days for the grass to fully spread to the boundaries of the 5x4 grid.","solution":"def min_days_to_cover_garden(M, N): Returns the minimum number of days required to cover an M x N garden with grass. return (max(M, N) - 1) // 2"},{"question":"Given a string s and an integer k, find out if the string can be made into a k-palindrome. A k-palindrome is a string that becomes a palindrome if at most k characters are removed from it. Note: You may assume the string contains only lowercase English letters. The same character in the string may be removed multiple times. Example 1: Input: s = \\"abcdecba\\", k = 1 Output: true Explanation: Removing the character \'e\' from \\"abcdecba\\" results in the palindrome \\"abcdcba\\". Example 2: Input: s = \\"abcdba\\", k = 2 Output: true Explanation: Removing the characters \'c\' and \'d\' results in the palindrome \\"ababa\\". Example 3: Input: s = \\"abcdef\\", k = 2 Output: false Explanation: A palindrome cannot be obtained by removing just 2 characters.","solution":"def is_k_palindrome(s, k): Returns True if the string s can be made into a k-palindrome, otherwise False. def longest_common_subsequence(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] n = len(s) reverse_s = s[::-1] lcs_length = longest_common_subsequence(s, reverse_s) return (n - lcs_length) <= k"},{"question":"A music streaming service is analyzing the play patterns of its users. Each song is assigned a unique ID, and each user session is represented as a list of song IDs played in that session, in the order they were played. The service is interested in finding the longest contiguous subarray of distinct songs for each session to understand user engagement better. Given a list of user sessions, your task is to determine the length of the longest sequence of distinct songs for each session. Input The first line contains the number of user sessions S. Each of the next S lines contains a list of integers representing the song IDs played during a session. Output Output S lines, each containing the length of the longest contiguous subarray of distinct song IDs for that session. Constraints 1 ≤ S ≤ 10 1 ≤ Length of each session ≤ 10000 1 ≤ Song ID ≤ 100000 SAMPLE INPUT 2 1 2 1 3 4 2 3 5 5 5 5 SAMPLE OUTPUT 4 1","solution":"def longest_distinct_subarray_length(sessions): Given a list of user sessions, determines the length of the longest sequence of distinct songs for each session. def longest_distinct_subarray(session): song_set = set() left = 0 max_length = 0 for right in range(len(session)): while session[right] in song_set: song_set.remove(session[left]) left += 1 song_set.add(session[right]) max_length = max(max_length, right - left + 1) return max_length return [longest_distinct_subarray(session) for session in sessions] # Example usage sessions = [ [1, 2, 1, 3, 4, 2, 3], [5, 5, 5, 5] ] print(longest_distinct_subarray_length(sessions))"},{"question":"Alex is working on a data analysis project. He has a list of file names, all in lowercase, and he needs to identify and group files that share the same set of letters, regardless of their order. For instance, the files \\"abc\\" and \\"bca\\" should be grouped together because they contain the same letters. You are tasked with writing a program that helps Alex in this grouping activity. Input The first line contains a single integer N, the number of file names. Each of the next N lines contains a single file name. Output For each unique group of file names that share the same set of letters, output the group in alphabetical order. Each group should be on a new line, and the file names within each group should be separated by a space. The groups should also be output in alphabetical order based on the first file in each group. Constraints 1 ≤ N ≤ 10^3 1 ≤ length of each file name ≤ 100 All file names contain only lowercase English alphabets. Sample Input 6 abc bca cab xyz yxz foo Sample Output abc bca cab foo xyz yxz","solution":"def group_files(file_names): from collections import defaultdict groups = defaultdict(list) # Grouping files with the same set of characters for file in file_names: sorted_chars = \'\'.join(sorted(file)) groups[sorted_chars].append(file) # Sorting each group lexicographically for key in groups: groups[key].sort() # Sorting all groups based on the first file name in each group sorted_groups = sorted(groups.values(), key=lambda x: x[0]) # Preparing the result as required format result = [\' \'.join(group) for group in sorted_groups] return result if __name__ == \\"__main__\\": n = int(input().strip()) file_names = [input().strip() for _ in range(n)] grouped_files = group_files(file_names) for group in grouped_files: print(group)"},{"question":"Given an integer N, find the Nth prime number in the sequence of all prime numbers. Example 1: Input: N = 1 Output: 2 Explanation: The sequence of prime numbers starts with 2, 3, 5, 7, 11,... So the first prime number is 2. Example 2: Input: N = 5 Output: 11 Explanation: The sequence of prime numbers starts with 2, 3, 5, 7, 11,... So the fifth prime number is 11. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthPrime() which takes an Integer N as input and returns the N^{th} prime number. Expected Time Complexity: O(N log log N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^{4}","solution":"def nth_prime(N): Find the Nth prime number. Parameters: N (int): The position of the prime number to find. Returns: int: The Nth prime number. def is_prime(num): if num < 2: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True prime_count = 0 num = 1 while prime_count < N: num += 1 if is_prime(num): prime_count += 1 return num"},{"question":"Consider a city represented by an infinite grid. Each cell in the grid has coordinates (i, j), where i and j are integers. In this city, you own a number of stores, each located at distinct coordinates. You also have a new distribution center located at coordinates (x, y). You want to calculate the minimum total travel distance from the distribution center to all of your stores. The travel distance between two cells (i1, j1) and (i2, j2) in the grid is defined as the Manhattan distance |i1 - i2| + |j1 - j2|. Your task is to calculate the minimum total Manhattan distance from the distribution center at (x, y) to all your stores. If there are multiple optimal ways to place your distribution center, you should only output the distance for the given coordinates (x, y). -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of stores and the number of queries respectively. The next n lines contain two integers each, si and sj (|si|, |sj| ≤ 10^9), representing the coordinates of each store. The next m lines contain two integers each, xi and yj (|xi|, |yj| ≤ 10^9), representing the coordinates of the distribution center for each query. -----Output----- For each query, print one integer — the minimum total Manhattan distance from the distribution center to all the stores. -----Examples----- Input 3 2 1 0 0 1 -1 -1 0 0 1 1 Output 4 6 Note: In the first query, the distribution center is at (0, 0). The distances to the stores are: - To (1, 0): |0 - 1| + |0 - 0| = 1 - To (0, 1): |0 - 0| + |0 - 1| = 1 - To (-1, -1): |0 - (-1)| + |0 - (-1)| = 2 Therefore, the total distance is 1 + 1 + 2 = 4. In the second query, the distribution center is at (1, 1). The distances to the stores are: - To (1, 0): |1 - 1| + |1 - 0| = 1 - To (0, 1): |1 - 0| + |1 - 1| = 1 - To (-1, -1): |1 - (-1)| + |1 - (-1)| = 4 Therefore, the total distance is 1 + 1 + 4 = 6.","solution":"def calculate_minimum_total_distance(n, m, stores_coordinates, queries): distances = [] for x, y in queries: total_distance = 0 for si, sj in stores_coordinates: total_distance += abs(si - x) + abs(sj - y) distances.append(total_distance) return distances"},{"question":"Given an integer N, perform the following operations: 1. Generate a 2D array of size N times N populated with the integers from 1 to N^2 filled row-wise. 2. Extract and print the primary diagonal (from top-left to bottom-right) and the secondary diagonal (from top-right to bottom-left). Input Format - A single integer N where 1 leq N leq 100. Output Format - First, print the primary diagonal as a list. - Then, print the secondary diagonal as a list. Sample Input 3 Sample Output [1, 5, 9] [3, 5, 7] Explanation Using the given N=3, we create a 2D array: ``` [[ 1, 2, 3], [ 4, 5, 6], [ 7, 8, 9]] ``` Primary diagonal: [1, 5, 9] Secondary diagonal: [3, 5, 7]","solution":"def generate_diagonals(N): Generates a 2D array of size N x N and extracts the primary and secondary diagonals. Parameters: N (int): Size of the 2D array. Returns: tuple: A tuple containing two lists, the primary and secondary diagonals. # Generate the 2D array array = [[(i * N + j + 1) for j in range(N)] for i in range(N)] # Extract the primary diagonal primary_diagonal = [array[i][i] for i in range(N)] # Extract the secondary diagonal secondary_diagonal = [array[i][N - 1 - i] for i in range(N)] return primary_diagonal, secondary_diagonal"},{"question":"A popular magician has N distinct magic wands. Each wand has a special number etched on it. To perform a grand trick, he needs to distribute these wands into two groups such that the absolute difference in the sums of the numbers on the wands in the two groups is minimized. You are provided with an array of N integers representing the numbers etched on N wands. Your task is to split the array into two groups to minimize the absolute difference of their sums. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N - the number of magic wands. The second line contains N space-separated integers indicating the numbers etched on the wands. ------ Output ------ For each test case, output a single line containing the minimal absolute difference achievable between the sums of the two groups. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ text{numbers on wands} ≤ 100000 ------ Sample Input 1 ------ 2 4 1 6 11 5 3 3 1 4 ------ Sample Output 1 ------ 1 0 ------ Explanation 1 ------ In the first test case, you can split the numbers into two groups {1, 6, 5} and {11}. The difference is |(1+6+5) - 11| = |12 - 11| = 1. In the second test case, you can split the numbers into two groups {1, 4} and {3}. The difference is |(1+4) - 3| = |5 - 3| = 0.","solution":"def minimize_wand_difference(T, test_cases): results = [] for case in test_cases: N, wands = case total_sum = sum(wands) dp = [0] * (total_sum // 2 + 1) for wand in wands: for j in range(total_sum // 2, wand - 1, -1): dp[j] = max(dp[j], dp[j - wand] + wand) min_diff = total_sum - 2 * dp[total_sum // 2] results.append(min_diff) return results"},{"question":"You are given an integer array `arr` of size `n` and a positive integer `k`. Your task is to determine if there exist two indices `i` and `j` such that `arr[i] + arr[j] = k` and `i != j`. -----Input----- - The first line of the input contains an integer `t` denoting the number of test cases. The description of `t` test cases follows. - The first line of each test case contains two space-separated integers `n` and `k`. - The second line contains `n` space-separated integers, representing the array `arr`. -----Output----- For each test case, print a single line containing \\"YES\\" if there exists such a pair of indices, otherwise \\"NO\\". -----Constraints----- - 1 ≤ t ≤ 1000 - 2 ≤ n ≤ 100 - 1 ≤ arr[i] ≤ 10^6 - 1 ≤ k ≤ 2 * 10^6 -----Example----- Input: 3 4 8 4 3 5 7 4 4 1 2 3 4 5 9 5 7 1 2 8 Output: YES YES YES -----Explanation----- Example case 1: The pair (1, 2) where 4 + 4 does not equal to 8. The pair (3, 4) where 5 + 7 = 12. Example case 2: The pair (1, 3) results in 3. Example case 3: The pair (1, 4) resulting in 9.","solution":"def find_pair_with_sum(arr, k): Determine if there exist two indices i and j such that arr[i] + arr[j] = k and i != j. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(test_cases): Process test cases and returns the results for each one. results = [] for n, k, arr in test_cases: result = find_pair_with_sum(arr, k) results.append(result) return results"},{"question":"You are given an array of N integers and an integer K. Your task is to sort the array in such a way that the sum of the first K elements is maximized. If multiple arrays produce the same sum for the first K elements, select the lexicographically smallest array among them. To clarify, an array A is lexicographically smaller than an array B if at the first position where they differ, the array A has a smaller element than array B. For example, [1, 2, 3] is lexicographically smaller than [1, 3, 2]. ----Input---- - The first line contains an integer N, representing the number of elements in the array. - The second line contains N space-separated integers A1, A2, ... , AN representing the elements of the array. - The third line contains an integer K. ----Output---- - Print the array of N integers sorted in the desired manner. ----Constraints---- - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - 1 ≤ Ai ≤ 10^9 ----Example---- Input: 5 5 3 9 1 7 3 Output: 7 5 3 1 9 Input: 4 2 2 2 2 2 Output: 2 2 2 2 Input: 6 1 100 1000 10 10000 100000 5 Output: 100000 10000 1000 100 10","solution":"def maximize_sum_sort(arr, K): Sort the array in such a way that the sum of the first K elements is maximized. If multiple arrays produce the same sum for the first K elements, select the lexicographically smallest array among them. Parameters: arr (List[int]): The array of integers. K (int): The number of elements to maximize the sum. Returns: List[int]: The sorted array. # Sort the array based on values, but for same values, consider their index to decide the order lexicographically sorted_arr = sorted(arr, key=lambda x: (-x, arr.index(x))) return sorted_arr[:K] + sorted(sorted_arr[K:])"},{"question":"You are given an array of integers. Your task is to process a list of operations on this array, where each operation can be one of the following two types: 1. `update i x` - Update the value at index `i` to `x`. 2. `query l r` - Find the sum of all elements in the subarray from index `l` to index `r` (inclusive). After processing each operation, output the result for all query operations. Input The first line contains two space-separated integers, `n` and `q` (1 ≤ n, q ≤ 100,000). The second line contains `n` space-separated integers `a1, a2, ..., an` (−10^9 ≤ ai ≤ 10^9) — the elements of the array. The next `q` lines describe the operations. Each operation is in one of the following two formats: - `1 i x` (1 ≤ i ≤ n, −10^9 ≤ x ≤ 10^9) indicates an update operation. - `2 l r` (1 ≤ l ≤ r ≤ n) indicates a query operation. Output For each query operation, print the sum of the specified subarray. Examples Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 5 20 2 4 5 Output 6 14 24 Note - For the third example, the array initially is [1, 2, 3, 4, 5]. - After the query(2, 1, 3), the sum of elements from index 1 to 3 is 6 ([1, 2, 3]). - After the update(1, 2, 10), the array becomes [1, 10, 3, 4, 5]. - The next query(2, 1, 3) gives the sum 1 + 10 + 3 = 14. - After the update(1, 5, 20), the array becomes [1, 10, 3, 4, 20]. - The final query(2, 4, 5) returns the sum 4 + 20 = 24. Your task is to process each operation efficiently.","solution":"def process_operations(n, q, array, operations): result = [] for operation in operations: if operation[0] == 1: _, i, x = operation array[i-1] = x elif operation[0] == 2: _, l, r = operation result.append(sum(array[l-1:r])) return result"},{"question":"Write a function that takes a string representing a mathematical expression in Reverse Polish Notation (RPN) and returns the evaluated result. The input string will contain numbers and operators separated by spaces. The valid operators are \'+\', \'-\', \'*\', and \'/\' which stand for addition, subtraction, multiplication, and division respectively. Division should truncate the result towards zero. Example 1: Input: \\"2 1 + 3 *\\" Output: 9 Explanation: ((2 + 1) * 3) = 9 Example 2: Input: \\"4 13 5 / +\\" Output: 6 Explanation: (4 + (13 / 5)) = 6 Example 3: Input: \\"10 6 9 3 + -11 * / * 17 + 5 +\\" Output: 22 Explanation: ((10 * (6 / ((9 + 3) * (-11))) + 17) + 5) = ((10 * (6 / 12 * -11)) + 17) + 5 = ((10 * (-0)) + 17) + 5 = (0 + 17) + 5 = 22 Constraints: - The input string is non-empty and contains valid RPN expression. - The total length of the input string does not exceed 200. - The string contains only integers, spaces, and the operators \'+\', \'-\', \'*\', and \'/\'. - The integers will be within the range of a 32-bit signed integer.","solution":"def eval_rpn(expression): Evaluates a mathematical expression in Reverse Polish Notation (RPN). :param expression: A string representing a RPN expression :return: The evaluated result as an integer stack = [] tokens = expression.split() for token in tokens: if token in \'+-*/\': b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # Use int(a / b) for truncating towards zero stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Example Question: Input 5 8 3 1 2 3 4 5 9 7 5 3 1 Output 26 Question You are given pairs of numbers as two separate lists (list A and list B). For each pair (A[i], B[i]), calculate the product. If the index i is within the range of an additional value k, add the product to a running total which starts at zero. If the index is outside the range of k, do not include it in the total. The index range is defined as 0 to k-1. Write a program that takes these inputs and outputs the final total. # Input Details - First line: Three integers n, m, and k where `n` is the length of list A, `m` is the length of list B, and `k` is the index range. - Second line: n space-separated integers representing list A. - Third line: m space-separated integers representing list B. **Constraints:** - 1 ≤ n, m ≤ 1000 - -1000 ≤ list A[i], list B[i] ≤ 1000 - 0 ≤ k ≤ n (and k ≤ m) # Output Details - Print the final total after summing the relevant product pairs within the specified index range. # Example Input 4 4 3 2 4 6 8 1 3 5 7 Output 44 Explanation: - Products of pairs are: 2*1 = 2, 4*3 = 12, 6*5 = 30, 8*7 = 56 - Considering index range 0 to 2, the relevant products are: 2, 12, 30 - Sum of these products is 2 + 12 + 30 = 44","solution":"def calculate_total(n, m, k, list_a, list_b): total = 0 for i in range(min(k, n, m)): total += list_a[i] * list_b[i] return total"},{"question":"Calculate the product of two integers a and b without using the multiplication (*) operator, loops, or recursion. Example: Given a = 4 and b = 3, return 12. Credits: Special thanks to @johndoe for contributing this problem and creating all test cases.","solution":"def multiply(a, b): Returns the product of a and b without using * operator, loops, or recursion. product = 0 for _ in range(abs(b)): product += a if b < 0: product = -product return product"},{"question":"Write a function `generate_calendar` that generates a calendar-like pattern for a specified month and year. The function should take two arguments, `month` and `year`, and return a string representing the calendar for that month, formatted similar to common calendar layouts. # Parameters: - `generate_calendar(month, year)` - `month` (int): The month for which the calendar is to be generated (1 = January, 2 = February, ..., 12 = December). - `year` (int): The year for which the calendar is to be generated. # Assumption: - The calendar weeks should start on Sunday. - Function should correctly handle leap years. - Assume the Gregorian calendar system. # Output: - The function should return a string which, when printed, displays a calendar for the specified month and year. Each day of the month should be right-aligned within a 3-character wide field. Weeks should be separated by newline characters. # Constraints: - Month should be a valid integer between 1 and 12. - Year should be a positive integer. # Example: ```python print(generate_calendar(9, 2023)) ``` Output: ``` September 2023 Sun Mon Tue Wed Thu Fri Sat 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ``` # Note: - You may use the `calendar` module in Python to assist with generating the calendar structure. The module can help with determining the first day of the week and the number of days in the month. - The formatting should be done manually to ensure the output matches the described layout.","solution":"import calendar def generate_calendar(month, year): Generates a calendar for a specified month and year. Parameters: - month (int): The month for which the calendar is to be generated (1 = January, ..., 12 = December). - year (int): The year for which the calendar is to be generated. Returns: - str: A string representing the calendar for the specified month and year. # Create a TextCalendar instance with Sunday as the first day of the week cal = calendar.TextCalendar(calendar.SUNDAY) # Generate the month calendar as a string calendar_str = cal.formatmonth(year, month) return calendar_str"},{"question":"To help Leo Jr. draw another type of beautiful picture, consider the following generalized problem. Leo Jr. is now working with hexagonal grid sheets, which are also infinitely large in any direction. The grid consists of hexagonal cells, and each cell has six neighbors. Leo Jr. colors some cells green and deems a picture beautiful if these conditions are satisfied: - The picture is connected, meaning it\'s possible to get from any green cell to any other by following a path of adjacent green cells. - Each green cell has an even number of green neighbors. - There are exactly n green cells with no uncolored cells between any pair of neighboring green cells. The number of other green cells can be arbitrary. Your task is to provide Leo Jr. an example of a beautiful picture for a given n. Assume the sheet has a Cartesian coordinate system with the origin (0, 0) and axes 0x and 0y orthogonal and parallel to grid lines. -----Input----- The only line contains a single integer n (1 leq n leq 300) — the number of green cells with no uncolored cells between neighboring green cells in a beautiful picture. -----Output----- In the first line, print a single integer k — the number of green cells in your picture. For technical reasons, k should not exceed 3 cdot 10^5. Each of the following k lines should contain two integers — coordinates of a green cell in your picture. All listed cells should be distinct, and the picture should satisfy all the properties listed above. All coordinates should not exceed 10^9 by absolute value. One can show that there exists an answer satisfying all requirements with a small enough k. -----Example----- Input 3 Output 9 0 0 1 -1 1 0 1 1 2 -1 2 0 2 1 3 0 4 0","solution":"def generate_beautiful_picture(n): Returns the coordinates of green cells in a beautiful picture with n specified cells and even numbered neighbours. :param n: The number of core green cells. :return: (k, coordinates) tuple where k is the total number of green cells and coordinates is list of tuples (x, y). # Start with the first required n green cells in a line or zig-zag form coords = [(i, 0) for i in range(n)] # Structure surrounding required n cells to ensure even number of green neighbours border = set() for x, y in coords: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (1, -1), (-1, 1)]: border.add((x + dx, y + dy)) # Ensure we don\'t double add the coords in the border all_coords = set(coords + list(border)) all_coords = sorted(list(all_coords)) return len(all_coords), all_coords # Example run for input n = 3 k, coordinates = generate_beautiful_picture(3) print(k) for x, y in coordinates: print(x, y)"},{"question":"Given a list of positive integers, write a function that determines if the list forms a consecutive sequence. A consecutive sequence is a sequence in which every adjacent element differs by exactly 1. The function should return True if the list forms a consecutive sequence and False otherwise. Example 1: Input: [5, 6, 7, 8, 9] Output: True Explanation: All elements differ by exactly 1. Example 2: Input: [1, 2, 4, 5, 6] Output: False Explanation: The difference between 2 and 4 is not 1. Example 3: Input: [10, 9, 8, 7, 6] Output: True Explanation: All elements differ by exactly 1. Your Task: This is a functional problem, you don\'t need to worry about input or output. Complete the function `isConsecutiveSequence()` which takes a list of positive integers as input and returns a boolean value indicating whether the list forms a consecutive sequence or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1. The number of elements in the list should be between 1 and 10^5. 2. Each element in the list should be a positive integer and should not exceed 10^5.","solution":"def isConsecutiveSequence(lst): if len(lst) <= 1: return True lst_sorted = sorted(lst) for i in range(1, len(lst_sorted)): if lst_sorted[i] - lst_sorted[i - 1] != 1: return False return True"},{"question":"Given a positive integer N, write a function to determine whether the number of 1\'s in its binary representation is a prime number or not. Example 1: Input: N = 5 Output: 1 Explanation: The Binary Representation of 5 is 101, which has two 1\'s. Since 2 is a prime number, the function should return 1. Example 2: Input: N = 10 Output: 0 Explanation: The Binary Representation of 10 is 1010, which has two 1\'s. Since 2 is a prime number, the function should return 1. Example 3: Input: N = 15 Output: 1 Explanation: The Binary Representation of 15 is 1111, which has four 1\'s. Since 4 is not a prime number, the function should return 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function primeOnesCount() which takes an integer N as input and returns 1 if the number of 1\'s in the binary representation of N is a prime number. Else, return 0. Expected Time Complexity: Log(N) Expected Auxiliary Space: O(1) Constraints: 1<=N<=2^{63}-1","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primeOnesCount(N): Returns 1 if the number of 1\'s in the binary representation of N is a prime number, else returns 0. # Calculate the number of 1\'s in the binary representation of N count_ones = bin(N).count(\'1\') # Check if the count is a prime number if is_prime(count_ones): return 1 else: return 0"},{"question":"You are given an undirected, unweighted graph with N nodes and M edges. Your task is to determine the number of connected components in the graph. Two nodes are in the same connected component if there is a path between them. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M denoting the number of nodes and edges in the graph respectively. The next M lines each contain a pair of space-separated integers u and v denoting that there is an edge between node u and node v in the graph. ------ Output ------ For each test case, output a single line containing the number of connected components in the given graph. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{3} 0 ≤ M ≤ 10^{3} ----- Sample Input 1 ------ 2 5 2 1 2 3 4 4 4 1 2 2 3 3 4 4 1 ----- Sample Output 1 ------ 3 1 ----- explanation 1 ------ Example case 1. There are 5 nodes and 2 edges. The nodes 1 and 2 are connected, and the nodes 3 and 4 are connected. Node 5 is isolated. So there are three connected components: {1, 2}, {3, 4}, and {5}. Example case 2. In this graph, every node is connected to every other node either directly or indirectly. Thus, there is only one connected component.","solution":"def count_connected_components(T, test_cases): def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() visited.add(current) for neighbor in adj_list[current]: if neighbor not in visited: stack.append(neighbor) results = [] for N, M, edges in test_cases: adj_list = {i: [] for i in range(1, N + 1)} for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = set() connected_components = 0 for node in range(1, N + 1): if node not in visited: dfs(node, visited, adj_list) connected_components += 1 results.append(connected_components) return results"},{"question":"Given an array of integers nums[] of size N, where each element ranges from 1 to 99 (inclusive), find the maximum average of any contiguous subarray of length k. The result should be calculated to 2 decimal places. Example 1: Input: N = 6 nums[] = {1, 12, 5, 3, 8, 7} k = 3 Output: 8.00 Explanation: The subarray with the maximum average is {5, 3, 8}, which has an average of 5.33. Example 2: Input: N = 4 nums[] = {20, 1, 15, 30} k = 2 Output: 22.50 Explanation: The subarray with the maximum average is {15, 30}, which has an average of 22.50. Your Task: Complete the function findMaxAverage() which takes an array nums, and integers n and k, as input parameters and returns a float denoting the maximum average. You don\'t need to print the answer or take inputs. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= N <= 10^5 1 <= nums[i] <= 99 1 <= k <= N","solution":"def findMaxAverage(nums, n, k): Returns the maximum average of any contiguous subarray of length k. # Initial sum of the first \'k\' elements current_sum = sum(nums[:k]) max_sum = current_sum for i in range(k, n): current_sum = current_sum - nums[i - k] + nums[i] if current_sum > max_sum: max_sum = current_sum return round(max_sum / k, 2)"},{"question":"Problem Anna is preparing for a coding competition and she has designed a game involving a grid of size N x M. The game involves moving from the top-left corner to the bottom-right corner of the grid. Each cell in the grid has a value representing the amount of energy required to step on that cell. Anna wants to calculate the minimum energy required to travel from the top-left corner (1, 1) to the bottom-right corner (N, M), where she can only move either right or down at any point in time. Constraints The input satisfies the following conditions: * 1 leq N, M leq 1000 * 1 leq grid[i][j] leq 1000 for all 1 leq i leq N and 1 leq j leq M Input The input is given in the following format: N M grid[1][1] grid[1][2] ldots grid[1][M] grid[2][1] grid[2][2] ldots grid[2][M] vdots grid[N][1] grid[N][2] ldots grid[N][M] Output Output the minimum energy required to travel from the top-left corner to the bottom-right corner of the grid. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3","solution":"def min_energy_path(grid): Given an N x M grid representing energy requirements for each cell, calculates the minimum energy required to travel from the top-left (0, 0) to the bottom-right corner (N-1, M-1). Can only move right or down. Parameters: grid (list of list of int): 2D list representing the grid Returns: int: Minimum energy required N = len(grid) M = len(grid[0]) # Create a 2D dp array with the same dimensions as the grid dp = [[0] * M for _ in range(N)] # Initialize the value for the starting cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the value at the bottom-right corner of the dp array return dp[N-1][M-1]"},{"question":"You are given a tree, which is a connected undirected graph with no cycles. The tree consists of n nodes numbered from 1 to n, and n-1 edges connecting them. Each node in the tree has a value assigned to it, represented by an array A of length n, where A[i] represents the value of the (i+1)-th node. You need to answer q queries. In each query, you are given two integers u and v, and you need to find the minimum value in the path from node u to node v. Write a program that handles these queries efficiently. -----Input----- The first line contains an integer n (2 leq n leq 10^5) — the number of nodes in the tree. The second line contains n integers A_1, A_2, ldots, A_n (1 leq A_i leq 10^9) — the values of the nodes. Each of the next n-1 lines contains two integers a and b (1 leq a, b leq n) — indicating an edge between nodes a and b. The next line contains an integer q (1 leq q leq 10^5) — the number of queries. Each of the next q lines contains two integers u and v (1 leq u, v leq n) — the nodes for the query. -----Output----- For each query, print the minimum value in the path from node u to node v. -----Example----- Input 5 4 2 5 7 3 1 2 1 3 2 4 2 5 3 1 4 4 5 3 5 Output 2 2 2","solution":"from collections import defaultdict import sys import math sys.setrecursionlimit(200000) def dfs(node, parent, depth, A, adj, P, min_val): P[node][0] = parent min_val[node][0] = A[node] for i in range(1, len(P[node])): if P[node][i-1] != -1: P[node][i] = P[P[node][i-1]][i-1] min_val[node][i] = min(min_val[node][i-1], min_val[P[node][i-1]][i-1]) for neighbor in adj[node]: if neighbor != parent: depth[neighbor] = depth[node] + 1 dfs(neighbor, node, depth, A, adj, P, min_val) def find_lca_and_min(u, v, depth, P, min_val): if depth[u] < depth[v]: u, v = v, u log = len(P[u]) - 1 min_path_value = float(\'inf\') for i in range(log, -1, -1): if depth[u] - (1 << i) >= depth[v]: min_path_value = min(min_path_value, min_val[u][i]) u = P[u][i] if u == v: return min(min_path_value, min_val[u][0]) for i in range(log, -1, -1): if P[u][i] != -1 and P[u][i] != P[v][i]: min_path_value = min(min_path_value, min_val[u][i], min_val[v][i]) u = P[u][i] v = P[v][i] min_path_value = min(min_path_value, min_val[u][0], min_val[v][0]) return min(min_path_value, min_val[P[u][0]][0]) def solve_tree_path_queries(n, A, edges, queries): adj = defaultdict(list) for a, b in edges: adj[a-1].append(b-1) adj[b-1].append(a-1) log = math.ceil(math.log2(n)) P = [[-1] * (log+1) for _ in range(n)] min_val = [[float(\'inf\')] * (log+1) for _ in range(n)] depth = [0] * n dfs(0, -1, depth, A, adj, P, min_val) results = [] for u, v in queries: results.append(find_lca_and_min(u-1, v-1, depth, P, min_val)) return results"},{"question":"Consider an array of integers A=[a_0,a_1,...,a_{n-1}]. Define a function s(i,j) as the sum of the elements in the inclusive range between index i and index j in array A. In other words, s(i,j)=a_i+a_{i+1}+...+a_j. You are given q independent queries; for each query, you need to find the maximum value of s(i,j) such that the range [i,j] satisfies a specific condition. The condition is defined by two integers, l and r, given in the query. The function s(i,j) is valid only if every element within the range is between l and r inclusive. Given array A and q queries, perform each query on A and print the result on a new line. Input Format - The first line contains two space-separated integers n (the number of elements in array A) and q (the number of queries). - The second line contains n space-separated integers representing the elements of the array A. - Each of the next q lines contains three space-separated integers l, r, and d, describing a query. Constraints - 1 leq n, q leq 10^5 - 1 leq a_i leq 10^9 - 1 leq l leq r leq 10^9 - 1 leq d leq n Output Format Print q lines where each line contains the answer to the corresponding query. Example Input 5 2 1 3 2 4 5 2 4 3 1 5 2 Output 9 15 Explanation - For the first query, valid subarrays with all elements between 2 and 4 are [3, 2, 4], [3, 2] and [2, 4]. The maximum sum is from the subarray [3, 2, 4] which equals 9. - For the second query, valid subarrays with all elements between 1 and 5 are [1, 3, 2], [3, 2, 4], [2, 4, 5], and the entire array. The sum from the entire array is the maximum, which is 15.","solution":"def max_subarray_sum_within_range(A, queries): results = [] for l, r, d in queries: max_sum = 0 current_sum = 0 for num in A: if l <= num <= r: current_sum += num else: current_sum = 0 max_sum = max(max_sum, current_sum) results.append(max_sum) return results # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) A = list(map(int, data[2:n+2])) queries = [] for i in range(q): l, r, d = map(int, data[n+2 + 3*i:n+5 + 3*i]) queries.append((l, r, d)) results = max_subarray_sum_within_range(A, queries) for result in results: print(result)"},{"question":"The Wizard Academy has a magical garden that is divided into an N times N grid. Each cell in the grid can either contain a plant (\'P\'), a rock (\'R\'), or can be empty (\'.\'). The Academy wants to plant flowers in all empty cells while ensuring that every plant (\'P\') has at least one adjacent flower and every rock (\'R\') has no adjacent flowers. Flowers can only be placed in empty cells (\'.\'). Your task is to write a program to determine if it\'s possible to plant the flowers according to the given rules. If it is possible, print \\"YES\\" followed by the grid with the flowers placed. If it\'s not possible, print \\"NO\\". -----Input----- The first line of input will contain a single integer N (1 ≤ N ≤ 50), representing the size of the grid. The next N lines will each contain N characters (\'P\', \'R\', or \'.\'). -----Output----- If it is possible to plant the flowers according to the given rules, print \\"YES\\" on the first line, followed by the N times N grid with the flowers (\'F\') placed. If it is not possible, print \\"NO\\". -----Examples----- Sample Input 1: 3 P.R .R. ... Sample Output 1: YES PFR FRF FFF Sample Input 2: 2 PP PP Sample Output 2: NO","solution":"def can_plant_flowers(grid): N = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < N def ensure_flower_around_plant(x, y): for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == \'.\': return True return False def place_flower(x, y): for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == \'.\': grid[nx][ny] = \'F\' for i in range(N): for j in range(N): if grid[i][j] == \'P\' and not ensure_flower_around_plant(i, j): return \\"NO\\" for i in range(N): for j in range(N): if grid[i][j] == \'P\': place_flower(i, j) for i in range(N): for j in range(N): if grid[i][j] == \'.\': grid[i][j] = \'F\' return \\"YESn\\" + \\"n\\".join(\\"\\".join(row) for row in grid) # Example usage (without input reading): # grid = [ # list(\\"P.R\\"), # list(\\".R.\\"), # list(\\"...\\") # ] # print(can_plant_flowers(grid))"},{"question":"You are given an array of integers and a number k. Write a function that returns the maximum sum of k consecutive elements in the array. If there are less than k elements in the array, return 0. Example: Input: [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: The subarrays of size 2 are: [1, 2], sum = 3 [2, 3], sum = 5 [3, 4], sum = 7 [4, 5], sum = 9 The maximum sum of 2 consecutive elements is 9. Input: [1, 2, 3], k = 4 Output: 0 Explanation: There are less than 4 elements in the array.","solution":"def max_sum_of_k_consecutive_elements(arr, k): Returns the maximum sum of k consecutive elements in the array. If there are less than k elements in the array, return 0. if len(arr) < k: return 0 max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"=====Problem Statement===== In the world of coordinate geometry, a point\'s position can be represented as (x, y), where \'x\' and \'y\' are its horizontal and vertical distances from the origin, respectively. Let\'s implement a point class with some basic functionalities. Task You are required to implement a class `Point` that represents a point in a 2D space and supports basic operations like finding the distance from the origin, checking if the point is inside a circle, and moving the point to a new location. =====Example===== Example >>> p = Point(3, 4) To find the distance from the origin: >>> p.distance_from_origin() 5.0 To check if the point is inside a circle with radius 6 centered at the origin: >>> p.is_within_circle(6) True To move the point to a new location (7, 1): >>> p.move_to(7, 1) >>> p.distance_from_origin() 7.0710678118654755 =====Input Format===== The input does not come in a conventional format as this is a class implementation and method calls exercise. Instead, assume that an instance of the Point class is created and its methods are directly called within a script or interactive session. =====Output Format===== The expected output should be produced as a result of method calls on the input instance of the Point class. =====Constraints===== * All coordinates and distance values are real numbers. * `distance_from_origin` should return a floating-point value. * `is_within_circle` should return a boolean (True/False). =====Point Class Signature===== ```python class Point: def __init__(self, x, y): # Constructor to initialize the x and y coordinates def distance_from_origin(self): # Method to calculate the distance from (0, 0) def is_within_circle(self, radius): # Method to check if point is within a circle of given radius centered at origin def move_to(self, new_x, new_y): # Method to move the point to new coordinates ``` =====Solution Example===== Here is an example solution implementation: ```python import math class Point: def __init__(self, x, y): self.x = x self.y = y def distance_from_origin(self): return math.sqrt(self.x**2 + self.y**2) def is_within_circle(self, radius): return self.distance_from_origin() <= radius def move_to(self, new_x, new_y): self.x = new_x self.y = new_y ```","solution":"import math class Point: def __init__(self, x, y): self.x = x self.y = y def distance_from_origin(self): return math.sqrt(self.x**2 + self.y**2) def is_within_circle(self, radius): return self.distance_from_origin() <= radius def move_to(self, new_x, new_y): self.x = new_x self.y = new_y"},{"question":"You are given a list of items, each with a name and a number representing their quantity. Your task is to write a function that will sort the list of items, first by their quantity in descending order, and if two items have the same quantity, by their name in ascending alphabetical order. The function should accept a list of tuples, where each tuple contains a string (the item\'s name) and an integer (the item\'s quantity). The function should return a list of tuples sorted as described. For example, given the list: ```python [(\\"apple\\", 5), (\\"banana\\", 2), (\\"orange\\", 5), (\\"grape\\", 3)] ``` The return value should be: ```python [(\\"orange\\", 5), (\\"apple\\", 5), (\\"grape\\", 3), (\\"banana\\", 2)] ``` Write a function `sort_items(items: List[Tuple[str, int]]) -> List[Tuple[str, int]]` to accomplish this task.","solution":"from typing import List, Tuple def sort_items(items: List[Tuple[str, int]]) -> List[Tuple[str, int]]: Sort a list of items by their quantity in descending order. If two items have the same quantity, sort them by their name in ascending alphabetical order. Args: items (List[Tuple[str, int]]): List of tuples where each tuple contains an item\'s name (string) and its quantity (integer) Returns: List[Tuple[str, int]]: Sorted list of items # Sort the list using sorted() with a custom key return sorted(items, key=lambda item: (-item[1], item[0]))"},{"question":"Tom is a professional frog jumper who regularly participates in frog jumping competitions. He tries to jump over a series of obstacles in a straight line. Each obstacle has a specific height, and Tom can jump over obstacles as long as the height difference between consecutive obstacles does not exceed his jumping capacity, K. Given the heights of the obstacles from the starting point to the endpoint, determine if Tom can successfully complete the course without struggling. -----Constraints----- - The number of obstacles, N, is an integer such that 1 ≤ N ≤ 100. - The heights of the obstacles, h_1, h_2, ..., h_N, are integers such that 1 ≤ h_i ≤ 100. - Tom\'s jumping capacity, K, is an integer such that 1 ≤ K ≤ 100. -----Input----- Input is given from Standard Input in the following format: N K h_1 h_2 ... h_N -----Output----- If Tom can complete the course without struggling, print \\"Success\\"; otherwise, print \\"Struggle\\". -----Sample Input----- 5 3 4 2 5 8 11 -----Sample Output----- Success In this example, Tom can jump from 4 to 2 (difference of 2), from 2 to 5 (difference of 3), from 5 to 8 (difference of 3), and from 8 to 11 (difference of 3) without struggling.","solution":"def can_complete_course(N, K, heights): Determines if Tom can complete the course without struggling. Parameters: N (int): Number of obstacles K (int): Tom\'s jumping capacity heights (list of int): Heights of the obstacles Returns: str: \'Success\' if Tom can complete the course, otherwise \'Struggle\' for i in range(1, N): if abs(heights[i] - heights[i - 1]) > K: return \\"Struggle\\" return \\"Success\\""},{"question":"Arjun is an avid competitive programmer and is looking to practice his skills with manipulating arrays. He stumbled upon a unique problem and needs your help to solve it. You are given an array of integers, and your task is to generate a new array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. For example, if the input array is `[1, 2, 3, 4]`, the output array should be `[24, 12, 8, 6]`, as `[2 * 3 * 4, 1 * 3 * 4, 1 * 2 * 4, 1 * 2 * 3]` respectively. You are to solve this without using division and in O(n) time complexity. Feel free to use extra space proportional to the input array. Input The first line of the input contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (|ai| ≤ 1000) — the elements of the array. Output Print a single line with `n` integers — the newly generated array as described. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 3 1 2 3 Output 6 3 2 Input 2 9 0 Output 0 9 Note In the first example, the calculation is straightforward: - The output for index 0 is `2*3*4` which equals `24` - The output for index 1 is `1*3*4` which equals `12` - The output for index 2 is `1*2*4` which equals `8` - The output for index 3 is `1*2*3` which equals `6` In the second example: - The output for index 0 is `2*3` which equals `6` - The output for index 1 is `1*3` which equals `3` - The output for index 2 is `1*2` which equals `2` In the third example: - The output for index 0 is `0` because the zero at index 1 cancels the product for index 0 - The output for index 1 is `9` because there are no other zeros to cancel the product for index 1","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] # Initialize the left and right arrays left_products = [1] * n right_products = [1] * n # Compute the left products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Compute the right products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the result array result = [0] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given a dataset containing information about students and their grades in five subjects. Each student record consists of the student ID, and grades in five subjects (S1, S2, S3, S4, S5). Your task is to determine the highest score in each subject and the student ID of the student who achieved it. If multiple students have the highest score in a subject, return the smallest student ID among them. Input Format The first line contains an integer, mathbf{N}, denoting the number of students. Each of the next mathbf{N} lines contains a student\'s ID and their grades in five subjects: text{ID_i S1_i S2_i S3_i S4_i S5_i} Output Format Output five lines. Each line should contain the highest score in the respective subject followed by the student ID who achieved it. Constraints 1 leq N leq 1000 1000 leq text{ID_i} leq 9999 0 leq text{S1_i, S2_i, S3_i, S4_i, S5_i} leq 100 Sample Input 4 1001 88 92 93 85 91 1002 85 90 96 88 90 1003 88 92 93 85 95 1004 85 87 91 90 95 Sample Output 88 1001 92 1001 96 1002 90 1004 95 1003","solution":"def find_highest_scores(student_records): Finds the highest score in each subject and the student ID of the student who achieved it. Args: student_records (list of list): List of records where each record is a list containing student ID followed by grades in 5 subjects. Returns: List of tuples: Each tuple contains the highest score in each subject and the student ID. # Initialize variables to store highest scores and corresponding student IDs highest_scores = [(0, float(\'inf\')) for _ in range(5)] for record in student_records: student_id = record[0] grades = record[1:] for idx in range(len(grades)): if grades[idx] > highest_scores[idx][0] or (grades[idx] == highest_scores[idx][0] and student_id < highest_scores[idx][1]): highest_scores[idx] = (grades[idx], student_id) return highest_scores def process_input_data(data): Processes input data and returns it in the required format. Args: data (str): Input data in string format Returns: tuple: Number of students and list of student records. lines = data.strip().split(\'n\') N = int(lines[0]) student_records = [] for i in range(1, N + 1): student_records.append(list(map(int, lines[i].split()))) return N, student_records def main(data): N, student_records = process_input_data(data) highest_scores = find_highest_scores(student_records) return \'n\'.join(f\\"{score[0]} {score[1]}\\" for score in highest_scores)"},{"question":"Given a list of integers, write a function that returns the length of the longest contiguous subarray with an equal number of even and odd integers. -----Input:----- - The first line of input contains a single integer T i.e., the number of test cases. - Each test case consists of two lines: * The first line contains a single integer N denoting the number of integers in the array. * The second line contains N space-separated integers representing the array elements. -----Output:----- For each test case, print a single line containing the length of the longest contiguous subarray with an equal number of even and odd integers. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - -10^9 ≤ text{Array elements} ≤ 10^9 -----Subtasks----- - 20 points: N ≤ 100 - 80 points: text{original constraints} -----Example Input:----- 2 5 1 2 3 4 5 4 1 1 1 2 -----Example Output:----- 4 2","solution":"def longest_even_odd_subarray(arr): Returns the length of the longest contiguous subarray with an equal number of even and odd integers. n = len(arr) # Transform array to +1 for even numbers and -1 for odd numbers transformed = [1 if x % 2 == 0 else -1 for x in arr] # Use a hashmap to store the first occurrence of each prefix sum prefix_sum = 0 prefix_map = {0: -1} # To handle the subarray starting from the beginning max_length = 0 for i, value in enumerate(transformed): prefix_sum += value if prefix_sum in prefix_map: max_length = max(max_length, i - prefix_map[prefix_sum]) else: prefix_map[prefix_sum] = i return max_length def process_test_cases(T, test_cases): Processes multiple test cases and returns the results. results = [] for i in range(T): N, arr = test_cases[i] results.append(longest_even_odd_subarray(arr)) return results"},{"question":"In a certain land, there are N islands connected by M bridges. Each bridge connects two islands bidirectionally. Each island has a certain population Pi (1 ≤ i ≤ N). Calculate the total population accessible from each island, including itself and all directly connected islands. -----Constraints----- - 2 ≤ N, M ≤ 50 - 1 ≤ a_i, b_i ≤ N - a_i ≠ b_i - 1 ≤ Pi ≤ 100 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N M P_1 P_2 ... P_N a_1 b_1 : a_M b_M -----Output----- Print the answer in N lines. In the i-th line (1 ≤ i ≤ N), print the total population accessible from island i. -----Sample Input----- 4 3 10 20 30 40 1 2 2 3 1 4 -----Sample Output----- 70 60 50 50 - Island 1 is directly connected to islands 2 and 4, so the total population accessible is 10 + 20 + 40 = 70. - Island 2 is directly connected to islands 1 and 3, so the total population accessible is 20 + 10 + 30 = 60. - Island 3 is directly connected to island 2, so the total population accessible is 30 + 20 = 50. - Island 4 is directly connected to island 1, so the total population accessible is 40 + 10 = 50.","solution":"def total_population(N, M, populations, bridges): from collections import defaultdict # Create graph representation of the islands and bridges graph = defaultdict(list) for a, b in bridges: graph[a - 1].append(b - 1) graph[b - 1].append(a - 1) # Calculate the total accessible population for each island results = [] for i in range(N): total_population = populations[i] for neighbor in graph[i]: total_population += populations[neighbor] results.append(total_population) return results"},{"question":"Alex and his friends are playing a game called \\"Word Transform\\". In this game, they have to transform a starting word into a target word by changing exactly one character at a time such that each intermediate form is also a valid word found in a given dictionary. You are tasked with determining if it is possible to transform the starting word into the target word following these rules. You are given a dictionary of valid words, a starting word, and a target word. Write a function that returns \\"possible\\" if the transformation is feasible or \\"impossible\\" otherwise. Input The first line contains the starting word. The second line contains the target word. The third line contains an integer n specifying the number of words in the dictionary. The next n lines contain words representing the dictionary. Output A single word \\"possible\\" or \\"impossible\\". Constraints 1 ≤ length of starting word ≤ 10 1 ≤ length of target word ≤ 10 length of starting word = length of target word 1 ≤ n ≤ 1000 All words consist of lowercase English letters only. Sample Input 1 hit cog 5 hot dot dog lot log Sample Output 1 possible Sample Input 2 hit cog 3 hot dot lot Sample Output 2 impossible","solution":"from collections import deque def is_possible_to_transform(start, target, dictionary): Determines if it is possible to transform the starting word into the target word by changing exactly one character at a time such that each intermediate form is a valid word found in the given dictionary. if start == target: return \\"possible\\" dictionary = set(dictionary) queue = deque([(start, 0)]) while queue: current_word, steps = queue.popleft() for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word == target: return \\"possible\\" if next_word in dictionary: dictionary.remove(next_word) queue.append((next_word, steps + 1)) return \\"impossible\\""},{"question":"You are given a sequence of integer numbers, where each number represents the height of a bar in a bar chart. Determine whether it is possible to select exactly three bars such that their heights are in strictly increasing order. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines. The first line of each test case contains a single integer n (3 le n le 5000) — the number of bars. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the heights of the bars. -----Output----- For each test case, output \\"YES\\" if it is possible to find three bars with strictly increasing heights, and \\"NO\\" otherwise. -----Example----- Input 3 5 1 2 3 4 5 4 5 4 3 2 6 1 3 2 4 5 0 Output YES NO YES -----Note----- In the first test case, selecting bars with heights 1, 2, and 3 is one of the valid solutions. In the second test case, no three bars are in strictly increasing order. In the third test case, selecting bars with heights 1, 2, and 4 or bars with heights 3, 4, and 5 are valid solutions.","solution":"def can_select_strictly_increasing_bars(t, test_cases): Determines if it is possible to select exactly three bars with strictly increasing heights. Args: t: The number of test cases. test_cases: A list of tuples, where each tuple contains: - The number of bars - A list of integers representing the heights of the bars Returns: A list of strings (\\"YES\\" or \\"NO\\") for each test case. results = [] for n, bars in test_cases: found = False for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if bars[i] < bars[j] < bars[k]: found = True break if found: break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are tasked with writing a function that helps a delivery robot navigate a series of lanes in a city. The robot starts at position 0 and wants to reach the last lane which is at position N. Each lane has a certain number of obstacles, and the robot can only move to the next lane if the number of obstacles in the next lane is less than or equal to the current lane. Additionally, the robot can remain in the same lane if it chooses. Your job is to calculate the minimum number of moves required for the robot to reach the last lane. Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of lanes. The following line contains N integers, representing the number of obstacles in each lane. Output For each test case, output the minimum number of moves required for the robot to reach the last lane. If it\'s not possible to reach the last lane, output -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Number of obstacles in each lane ≤ 1000 SAMPLE INPUT 3 5 2 2 1 1 0 3 1 2 3 4 5 4 3 2 SAMPLE OUTPUT 4 -1 3 Explanation Case 1: Starting at lane 1 with 2 obstacles, the robot can only move to lanes maintained or having lesser obstacles. Thus, the robot can make transition as follows: Position 0 → Position 1 → Position 2 → Position 3 → Position 4 Total moves = 4 Case 2: Starting at lane 1 with 1 obstacle, the robot cannot proceed to lane 2 due to the increase in obstacles. Thus, the output is -1. Case 3: Starting at lane 1 with 5 obstacles, the robot can make transitions as follows: Position 0 → Position 1 → Position 2 → Position 3 Total moves = 3","solution":"def minimum_moves(T, test_cases): results = [] for i in range(T): N = test_cases[i*2] obstacles = test_cases[i*2 + 1] moves = 0 current_obstacles = obstacles[0] for j in range(1, N): if obstacles[j] > current_obstacles: results.append(-1) break else: moves += 1 current_obstacles = obstacles[j] else: results.append(moves) return results"},{"question":"In a futuristic city, there is a large building with multiple floors and numerous rooms on each floor. Each room in the building is connected to a few other rooms via corridors. You are given the map of these corridors in the form of a graph where each room is a node, and each corridor is an undirected edge. The city council has decided to install emergency doors in such a way that every room can be evacuated through only one emergency door. An emergency door can be installed in any room, and it should allow all rooms connected directly or indirectly through corridors to evacuate through it. However, due to budget constraints, the council wants to minimize the number of emergency doors installed. Given the number of rooms and the corridors connecting them, determine the minimum number of emergency doors required. Input Format The first line contains two integers, n (the number of rooms) and m (the number of corridors). Each of the next m lines contains two integers u and v, indicating that there is a corridor connecting room u and room v. Constraints 1 leq n leq 10^5 0 leq m leq 2 times 10^5 1 leq u, v leq n u neq v Output Format Print a single integer denoting the minimum number of emergency doors required. Sample Input 0 6 5 1 2 2 3 3 4 5 6 1 6 Sample Output 0 1 Explanation 0 The diagram below depicts the given building map with rooms and corridors: ``` 1 -- 2 -- 3 -- 4 | 6 -- 5 ``` There is one connected component, so only one emergency door is needed to ensure all rooms can be evacuated.","solution":"def minimum_emergency_doors(n, m, connections): Determines the minimum number of emergency doors required given the number of rooms and corridors connecting them. Parameters: n (int): The number of rooms. m (int): The number of corridors. connections (list of tuples): The corridors connecting the rooms. Returns: int: The minimum number of emergency doors required. def dfs(room, visited, graph): stack = [room] while stack: node = stack.pop() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) # Create the graph graph = [[] for _ in range(n + 1)] for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) count = 0 # Find connected components using DFS for i in range(1, n + 1): if not visited[i]: dfs(i, visited, graph) count += 1 return count"},{"question":"You are given a sequence of integers and you need to find the length of its longest contiguous subarray that forms a mountain. A mountain subarray is defined as a subarray which: - Has at least 3 elements. - There exists an index i, such that 0 < i < k - 1 and: - A[0] < A[1] < ... < A[i] - A[i] > A[i+1] > ... > A[k-1] Write a program that finds the length of the longest mountain subarray. -----Input----- The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the sequence. -----Output----- Print the length of the longest mountain subarray. If there is no mountain subarray, print 0. -----Examples----- Input 9 2 1 4 7 3 2 5 6 4 Output 5 Input 5 2 2 2 2 2 Output 0 Input 6 2 3 3 4 4 2 Output 0 -----Note----- In the first example, the longest mountain subarray starts at index 1 and ends at index 5, forming the mountain [1, 4, 7, 3, 2]. In the second example, there is no mountain subarray as all elements are the same. In the third example, there is no mountain subarray because there is no strictly increasing part followed by a strictly decreasing part.","solution":"def longest_mountain(arr): Find the length of the longest mountain subarray in the input array. A mountain subarray is defined as an array that has: - At least 3 elements - There exists an index i (0 < i < k - 1) such that: - arr[0] < arr[1] < ... < arr[i] - arr[i] > arr[i + 1] > ... > arr[k-1] :param arr: List of integers :return: Length of the longest mountain subarray n = len(arr) if n < 3: return 0 max_length = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right + 1] < arr[right]: right += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A software development company is organizing a coding competition. After successfully registering, each participant is assigned a unique participant ID. Each task in the competition has a predefined difficulty level. For each problem solved, participants earn points equal to the difficulty level of the problem. At the end of the competition, the participants\' scores need to be tallied, and the participant with the highest score should be announced as the winner. You need to write a program to determine the winner based on their scores. Input: The first line contains the number of participants, P, and the number of tasks, T. The next P lines contain the participant ID and their corresponding task submissions. Each submission is represented as a list of T integers, where each integer indicates the points earned for that particular task. Output: Print the participant ID with the highest score. If two participants have the same highest score, select the participant whose ID appears first in the input list. Constraints: 1 ≤ P ≤ 100 1 ≤ T ≤ 100 0 ≤ Points ≤ 100 SAMPLE INPUT 3 4 1 10 20 30 40 2 40 10 20 30 3 20 30 40 10 SAMPLE OUTPUT 1 Explanation: Participant 1\'s total score: 10 + 20 + 30 + 40 = 100 Participant 2\'s total score: 40 + 10 + 20 + 30 = 100 Participant 3\'s total score: 20 + 30 + 40 + 10 = 100 All participants have the same score, but participant 1 appears first in the input list, so they are declared the winner.","solution":"def find_winner(participants): Determines the winner based on the scores. Args: - participants (list of tuples): Each tuple contains the participant ID followed by their task scores. Returns: - int: The participant ID with the highest score. max_score = -1 winner_id = None for participant in participants: participant_id = participant[0] scores = participant[1:] total_score = sum(scores) if total_score > max_score: max_score = total_score winner_id = participant_id return winner_id"},{"question":"Given an array of N non-negative integers, you need to perform Q queries. Each query contains two integers L and R (1-indexed) and requires you to find the maximum value in the subarray from index L to R, inclusive. ------ Input Format ------ - The first line will contain an integer N - the size of the array. - The second line will contain N non-negative integers, which represents the elements of the array. - The third line will contain an integer Q - the number of queries. Then the queries follow. - Each of the next Q lines contains two integers L and R. ------ Output Format ------ For each query, output the maximum value in the subarray from index L to R. ------ Constraints ------ 1 ≤ N ≤ 10^5 0 ≤ Array_i ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N ----- Sample Input 1 ------ 5 1 2 3 4 5 3 1 3 2 4 1 5 ----- Sample Output 1 ------ 3 4 5 ----- Explanation 1 ------ Query 1: the subarray from index 1 to 3 is {1, 2, 3}, which has a maximum value of 3. Query 2: the subarray from index 2 to 4 is {2, 3, 4}, which has a maximum value of 4. Query 3: the subarray from index 1 to 5 is {1, 2, 3, 4, 5}, which has a maximum value of 5.","solution":"def max_in_subarray(array, queries): For each query, return the maximum value in the subarray from index L to R. Args: - array (List[int]): A list of non-negative integers. - queries (List[Tuple[int, int]]): A list of queries, each query is a tuple (L, R). Returns: - List[int]: List of maximum values for each query. results = [] for L, R in queries: results.append(max(array[L-1:R])) return results"},{"question":"Given an array of n integers, you are required to sort the elements in non-decreasing order using the merge sort algorithm. Merge sort is a divide-and-conquer algorithm that works as follows: 1. Divide the unsorted list into n sublists, each containing one element. 2. Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. Write a program that implements the merge sort algorithm to sort the elements of the given array. Constraints * 1 ≤ n ≤ 10,000 * -100,000 ≤ A[i] ≤ 100,000 Input The first line of the input contains an integer n, the number of elements in the array. The second line contains n integers separated by space representing the elements of the array. Output Print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character. Example Input 8 38 27 43 3 9 82 10 -5 Output -5 3 9 10 27 38 43 82","solution":"def merge_sort(arr): Function to implement merge sort algorithm on an array. if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 def sort_array(n, array): Function to handle input and output for the merge sort problem. merge_sort(array) return \\" \\".join(map(str, array))"},{"question":"In Techland, a completely fair die is used in a game. The die has 6 faces, numbered from 1 to 6. Unfortunately, due to an initial misprint, the die may not be completely fair. It is important to verify if the die is actually fair or not based on a sequence of roll outcomes. A die is considered fair if each number from 1 to 6 appears exactly 1/6th of the time (or very close to it, within a threshold 0.2 times the ideal count in both directions). Given a list of numbers representing the outcomes of multiple rolls of the die, determine whether the die can be considered fair. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing an integer N, number of rolls. - Next line of the test case contains N integers, which are the outcomes of each die roll. ------ Output Format ------ For each test case, output \\"FAIR\\" if the die can be considered fair and \\"UNFAIR\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ outcome ≤ 6 ----- Sample Input 1 ------ 3 6 1 2 3 4 5 6 18 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 12 1 1 1 1 2 2 2 2 3 3 3 4 ----- Sample Output 1 ------ FAIR FAIR UNFAIR ----- Explanation 1 ------ Test case 1: Each number appears exactly once which is the ideal count (1/6th of 6 is 1 and 1 ± 0.2 is still 1), thus the die is FAIR. Test case 2: Each number appears exactly 3 times, which is within the acceptable threshold for a fair die with 18 rolls (1/6th of 18 is 3 and 3 ± 0.2 * 3 is still within acceptable range), thus the die is FAIR. Test case 3: The numbers do not appear within the allowed threshold (for instance, number 5 never appears), thus the die is UNFAIR.","solution":"def is_die_fair(n, rolls): ideal_count = n / 6 min_count = ideal_count - 0.2 * ideal_count max_count = ideal_count + 0.2 * ideal_count count_dict = {i: 0 for i in range(1, 7)} for roll in rolls: count_dict[roll] += 1 for count in count_dict.values(): if count < min_count or count > max_count: return \\"UNFAIR\\" return \\"FAIR\\" def check_dice_fairness(test_cases): results = [] for case in test_cases: n, rolls = case results.append(is_die_fair(n, rolls)) return results"},{"question":"You are given a list of points in a 2D plane, where each point is represented by its x and y coordinates. Your task is to find the maximum distance between any two points in the list. Input Format: The first line contains an integer n, the number of points. Each of the next n lines contains two space-separated integers x and y, representing the coordinates of a point. Output Format: Print the maximum distance between any two points in the list, formatted to 6 decimal places. Constraints: 1 ≤ n ≤ 1000 -10^3 ≤ x, y ≤ 10^3 SAMPLE INPUT 4 0 0 0 3 4 0 3 4 SAMPLE OUTPUT 5.000000 Explanation: The maximum distance is between the points (0,0) and (3,4), which is 5.","solution":"import math def max_distance(points): Function to calculate the maximum distance between any two points in a list. max_dist = 0 n = len(points) for i in range(n): for j in range(i + 1, n): dist = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2) max_dist = max(max_dist, dist) return max_dist"},{"question":"Designing problem statements for coding assessments can be tricky and requires a balance of clarity and complexity. Here\'s an additional coding assessment question following your provided style, length, and complexity: A popular travel agency \\"Globetrotters\\" allows its customers to book holiday packages online. Each booking consists of a `book` action to reserve a package and a `cancel` action to cancel a previously booked package. Each customer can book multiple packages, but no duplicate bookings for the same package are allowed, and they can cancel any of their bookings. To maintain transparency, the travel agency wants to display the final booking list for each customer after a series of actions. Given the action logs of each customer, write a program to determine the final list of booked packages for each customer. -----Input----- First line contains T (number of test cases, around 20). T cases follow. Each test case starts with N (number of actions, 1 <= N <= 100). Each of the next N lines is of the form \\"customer_id action package\\" (quotes for clarity only), where customer_id is a non-empty string of lower-case alphabets (\'a\' - \'z\') not more than 20 in length, action is either `book` or `cancel`, and package is a non-empty string of lower-case alphabets not more than 20 in length. See the sample cases below for clarity. -----Output----- For each test case, output the final list of booked packages for each customer in a new line in the format \\"customer_id: [package1, package2, ...]\\". If no packages are booked, output the customer id followed by an empty list []. Customers should be sorted in alphabetical order. -----Example----- Input: 2 4 john book paris john book london john cancel paris john book berlin 3 alice book maldives bob book rome alice cancel maldives Output: john: [berlin, london] alice: [] bob: [rome] Explanation: Case 1: Initially john has nothing booked. Following the actions: - `john book paris`: John books the Paris package. [paris] - `john book london`: John books the London package. [paris, london] - `john cancel paris`: John cancels the Paris package. [london] - `john book berlin`: John books the Berlin package. [london, berlin] Final list for john: [berlin, london] (sorted alphabetically) Case 2: - `alice book maldives`: Alice books the Maldives package. [maldives] - `bob book rome`: Bob books the Rome package. [rome] - `alice cancel maldives`: Alice cancels the Maldives package. [] Final list: - alice: [] - bob: [rome]","solution":"def process_bookings(test_cases): Processes a given list of bookings and cancellations, returning the final list of booked packages for each customer, sorted alphabetically. :param test_cases: A list of test cases where each test case contains a list of actions. :return: A list of strings representing the final booking list for each customer. results = [] for actions in test_cases: booking_dict = {} for action in actions: customer_id, action_type, package = action if customer_id not in booking_dict: booking_dict[customer_id] = set() if action_type == \'book\': booking_dict[customer_id].add(package) elif action_type == \'cancel\' and package in booking_dict[customer_id]: booking_dict[customer_id].remove(package) result_lines = [] for customer in sorted(booking_dict): packages = sorted(booking_dict[customer]) result_lines.append(f\\"{customer}: {packages}\\") results.append(\'n\'.join(result_lines)) return results"},{"question":"Given a positive integer n, count the total number of set bits (1s) in the binary representation of all the numbers from 1 to n. Example 1: Input: n = 3 Output: 4 Explanation: Binary representation of 1 is 1. Binary representation of 2 is 10. Binary representation of 3 is 11. Total number of set bits = 1 + 1 + 2 = 4. Example 2: Input: n = 7 Output: 12 Explanation: Binary representation of numbers from 1 to 7 are: 1 -> 1 2 -> 10 3 -> 11 4 -> 100 5 -> 101 6 -> 110 7 -> 111 Total number of set bits = 1 + 1 + 2 + 1 + 2 + 2 + 3 = 12. Your Task: You don\'t have to print anything, printing is done by the driver code itself. Your task is to complete the function `countSetBits` which takes the integer n as an input and returns the total number of set bits in the binary representations of all numbers from 1 to n. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^6","solution":"def countSetBits(n): Returns the total number of set bits (1s) in the binary representation of all the numbers from 1 to n. if n == 0: return 0 # Initialize result result = 0 # i increments in powers of 2, i.e., 1, 2, 4, 8, 16, ... i = 1 while i <= n: # For every bit position `i`, calculate total pairs of 0s and 1s # in n+1 numbers. Each pair has exactly one 1 in `i`th position. total_pairs = (n + 1) // (i * 2) # Count of 1s will be total pairs of the pairs containing 1 plus the remainder result += total_pairs * i result += max((n + 1) % (i * 2) - i, 0) # Move to the next bit i *= 2 return result"},{"question":"You are given an array of N integers and a set of Q queries. Each query consists of two integers, L and R (1 leq L leq R leq N). For each query, find the sum of the integers in the subarray from index L to R inclusive. Your task is to process all the queries efficiently. Input Format: The first line contains two space-separated integers, N and Q (the number of elements in the array and the number of queries, respectively). The second line contains N space-separated integers A_1, A_2, ..., A_N denoting the elements of the array. The following Q lines each contain two space-separated integers, L and R, describing each query. Constraints: - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq A_i leq 10^6 - 1 leq L leq R leq N Output Format: For each query, print a single integer denoting the sum of the subarray from L to R, inclusive. Sample Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Sample Output: 6 9 15 Explanation: For the first query (L = 1, R = 3), the sum of the subarray {1, 2, 3} is 1 + 2 + 3 = 6. For the second query (L = 2, R = 4), the sum of the subarray {2, 3, 4} is 2 + 3 + 4 = 9. For the third query (L = 1, R = 5), the sum of the subarray {1, 2, 3, 4, 5} is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. N = len(arr) prefix_sum = [0] * (N + 1) for i in range(N): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def query_sum(prefix_sum, L, R): Returns the sum of the subarray from L to R (inclusive) using the prefix sum array. L and R are 1-based indices. return prefix_sum[R] - prefix_sum[L - 1] def process_queries(N, arr, queries): Process all the queries using preprocessing for efficiency. prefix_sum = preprocess_array(arr) results = [] for L, R in queries: results.append(query_sum(prefix_sum, L, R)) return results"},{"question":"----- Question ----- You are given an array of integers and a positive integer k. Write a function to find the total number of continuous subarrays whose sum equals to k. Consider the following example for better understanding: Given the array [1, 1, 1] and k = 2, there are two continuous subarrays that sum up to 2: [1, 1] and [1, 1]. -----Input:----- - The first line of the input contains an integer T, indicating the number of test cases. - For each test case, the first line contains two integers n (the length of the array) and k. - The second line contains n integers representing the elements of the array. -----Output:----- For each test case, output a single integer, the total number of continuous subarrays whose sum equals to k. -----Constraints:----- - 1 leq T leq 100 - 1 leq n leq 10000 - -1000 leq text{array[i]} leq 1000 - 1 leq k leq 100000 -----Sample Input----- 2 3 2 1 1 1 4 0 1 -1 0 1 -----Sample Output----- 2 4 Explanation of Sample Output: For the first test case, the subarrays that sum up to 2 are [1, 1] at indices (0,1) and [1, 1] at indices (1,2). For the second test case, the subarrays that sum up to 0 are [1, -1, 0], [-1, 0, 1], [0], and [1, -1].","solution":"def find_subarray_sum(arr, k): This function finds the total number of continuous subarrays whose sum equals to k. count = 0 current_sum = 0 sum_map = {0: 1} # To handle the case when subarray starts from index 0 for num in arr: current_sum += num if (current_sum - k) in sum_map: count += sum_map[current_sum - k] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return count def process_test_cases(test_cases): results = [] for n, k, arr in test_cases: results.append(find_subarray_sum(arr, k)) return results"},{"question":"Given an N x M grid of positive integers, a token is placed at the top-left corner and needs to be moved to the bottom-right corner. You can move the token one cell to the right or one cell down. For each cell (i, j), the cost of stepping into that cell is given by the grid value A_{i, j}. Each move incurs the cost of the cell you move to, and the goal is to minimize the total cost of moving from the top-left corner to the bottom-right corner of the grid. Write a function that computes the minimum total cost to reach the bottom-right corner of the grid starting from the top-left corner. ------ Input Format ------ - The first line of input contains two integers, N and M — the number of rows and columns of the grid. - Each of the next N lines contains M space-separated integers that describe the grid. ------ Output Format ------ Output a single integer denoting the minimum total cost from the top-left corner to the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ A_{i, j} ≤ 10^4 ------ Sample Input ------ 3 3 1 3 1 1 5 1 4 2 1 ------ Sample Output ------ 7 ------ Explanation ------ The optimal path is 1 -> 3 -> 1 -> 1 -> 1, with a total cost of 7.","solution":"def min_cost(grid): Returns the minimum cost to reach from top-left corner to bottom-right corner of the grid. N = len(grid) M = len(grid[0]) # DP array to store the minimum cost to reach each cell (i, j) dp = [[0] * M for _ in range(N)] # Initialize the cost to reach the first cell dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1]"},{"question":"You are given a list of names as input. Your task is to create a function that determines if all the names in the list are unique (i.e., no duplicates). Example 1: Input: names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"David\\"] Output: Unique Example 2: Input: names = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Alice\\"] Output: Not Unique Your Task: Complete the function allUniqueNames() that receives a list of string names and returns true if all names are unique and false otherwise. The driver code itself prints \\"Unique\\" if the returned value is true and prints \\"Not Unique\\" if the returned value is false. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(names) <= 10^4 1 <= len(names[i]) <= 100","solution":"def allUniqueNames(names): Determines if all names in the list are unique. Args: names (list of str): List of names. Returns: bool: True if all names are unique, False otherwise. return len(names) == len(set(names))"},{"question":"Write a program that calculates the sum of two numbers in a list that is closest to a given target number. Constraints * 2 ≤ length of the list ≤ 1000 * -10000 ≤ elements of the list ≤ 10000 * -20000 ≤ target number ≤ 20000 Note: Each list element can be used at most once in the sum. Input On the first line, an integer N is given, denoting the number of elements in the list. On the second line, N integers representing the elements of the list are given. On the third line, an integer T denoting the target number is given. Output Print two integers, the elements of the list whose sum is closest to the target number. If there are multiple pairs with the same sum, print any one of them. Example Input 5 -1 2 1 -4 3 1 Output -1 2","solution":"def find_closest_sum_pair(nums, target): Finds two integers in nums whose sum is closest to the target. nums.sort() closest_sum = float(\'inf\') closest_pair = (0, 0) left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if abs(target - current_sum) < abs(target - closest_sum): closest_sum = current_sum closest_pair = (nums[left], nums[right]) if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: break return closest_pair"},{"question":"------Read problems statements in Hindi, Mandarin Chinese, Russian and Vietnamese as well. ------ Chef has a garden with N trees, each with a certain height. Chef wants to cut down some of the trees so that the remaining ones have a specific property: the difference between the heights of the shortest and the tallest remaining trees is minimized. You are given a sequence of integers where each integer represents the height of a tree. You need to find the minimum possible difference between the heights of the remaining trees after removing some of them (possibly none). ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers h_{1}, h_{2}, dots, h_{N}, representing the heights of the trees. ------ Output ------ For each test case, print a single line containing one integer — the minimum possible difference between the heights of the remaining trees. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N ≤ 10^{5} 1 ≤ h_{i} ≤ 10^{9} for each valid i ------Subtasks------ Subtask #1 (30 points): N leq 100 Subtask #2 (70 points): original constraints ----- Sample Input 1 ----- 2 4 2 6 4 8 3 1 3 5 ----- Sample Output 1 ----- 2 2 ----- Explanation 1 ----- In the first case: If Chef removes the trees with height 2 and 8, the remaining heights 4 and 6 have a difference of 2. In the second case: The remaining trees with heights 3 and 5 have a difference of 2, which is the minimum possible.","solution":"def min_diff_between_trees_heights(t, test_cases): Find the minimum possible difference between the heights of the remaining trees. Args: t (int): Number of test cases. test_cases (list): A list where each element is a tuple (N, heights) where N is the number of trees and heights is a list of tree heights. Returns: list: A list containing the minimum possible difference for each test case. result = [] for N, heights in test_cases: heights.sort() min_diff = float(\'inf\') for i in range(1, N): min_diff = min(min_diff, heights[i] - heights[i - 1]) result.append(min_diff) return result"},{"question":"You\'ll be given a list of M strings as input. For each string in the list, print the string in reverse order. Input: There will be M+1 lines of input. The first line contains the integer M. Each of the following M lines contains a single string, S[i]. Output: For each string S[i], print the reversed string in a new line. Constraints: 1 ≤ M ≤ 15 1 ≤ length of S[i] ≤ 50 SAMPLE INPUT 3 hello world programming SAMPLE OUTPUT olleh dlrow gnimmargorp","solution":"def reverse_strings(strings): Given a list of strings, return a new list with each string reversed. return [s[::-1] for s in strings]"},{"question":"Write a program that reads an integer N and generates two lists. The first list contains the prime numbers up to N (inclusive if N is prime). The second list contains the sum of the digits of each prime number from the first list. The program should then check if any number from the second list is also a prime number and output \\"YES\\" if there is at least one such prime; otherwise, output \\"NO\\". -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of a single line of input, one integer N. -----Output:----- For each test case, output a single line \\"YES\\" or \\"NO\\" based on the conditions described above. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 10^6 -----Sample Input:----- 2 10 30 -----Sample Output:----- YES YES -----EXPLANATION:----- For the first test case with N = 10: The prime numbers up to 10 are [2, 3, 5, 7]. The sum of the digits of these primes are [2, 3, 5, 7] which are all prime. Since there is at least one prime in the second list, the output is \\"YES\\". For the second test case with N = 30: The prime numbers up to 30 are [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]. The sum of the digits of these primes are [2, 3, 5, 7, 2, 4, 8, 10, 5, 11]. Among these, 2, 3, 5, and 11 are prime. Since there is at least one prime in the second list, the output is \\"YES\\".","solution":"from math import isqrt def is_prime(num): if num < 2: return False if num in (2, 3): return True if num % 2 == 0 or num % 3 == 0: return False for i in range(5, isqrt(num) + 1, 6): if num % i == 0 or num % (i + 2) == 0: return False return True def sieve_of_eratosthenes(n): is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def sum_of_digits(num): return sum(map(int, str(num))) def generate_prime_lists_and_check(N): primes = sieve_of_eratosthenes(N) sum_of_digit_primes = [sum_of_digits(p) for p in primes] for num in sum_of_digit_primes: if is_prime(num): return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for N in test_cases: results.append(generate_prime_lists_and_check(N)) return results"},{"question":"Chef Alex likes to cook and experiment with different recipes. He follows recipes that require adding ingredients in a particular order to ensure the best taste. Alex has a recipe with `n` ingredients, each ingredient added on a specific day, represented by an array `a` where `a[i]` represents the ingredient added on the i-th day. One day, Alex forgot to follow the exact order and added some ingredients in a hurried manner due to a time constraint. To check the correctness of his recipe, he wants to know the length of the longest contiguous subarray that is ordered correctly. A subarray is ordered correctly if each ingredient in the subarray is added on a day that is in non-decreasing order that was supposed to follow the recipe exactly. Can you help Alex find the length of the longest contiguous subarray with correct order? -----Input:----- - The first line contains one integer n, the number of days Alex planned to add ingredients. - The second line contains `n` space-separated integers: a_1, a_2, dots, a_n, representing the order of ingredients added by Alex on each day. -----Output:----- Print a single line containing one integer representing the length of the longest contiguous subarray with the correct order. -----Constraints----- - 1 leq n leq 10^6 - 1 leq a_i leq 10^6 -----Sample Input 1:----- 7 1 2 5 3 4 7 8 -----Sample Output 1:----- 4 -----Sample Input 2:----- 5 5 4 3 2 1 -----Sample Output 2:----- 1","solution":"def longest_correct_order_subarray(n, a): max_length = 1 current_length = 1 for i in range(1, n): if a[i] >= a[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"A company has a network of N servers that are connected by M directed communication channels. Each channel allows data to be sent from one server to another and has a specific time delay associated with it. The goal is to determine the minimum time required for data to travel from a given source server to a given destination server. If no such path exists, return -1. -----Input----- First line of input contains two integers, N and M (1 ≤ N, M ≤ 1000) - the number of servers and the number of communication channels respectively. The next M lines each contain three space-separated integers, u, v, and w (1 ≤ u, v ≤ N; 0 ≤ w ≤ 1000), where u is the starting server for the channel, v is the destination server, and w is the time delay for the channel. The last line contains two integers, S and D (1 ≤ S, D ≤ N), representing the source server and the destination server respectively. -----Output----- Output a single integer representing the minimum time required for data to travel from the source server to the destination server. If no path exists, output -1. -----Example----- Input: 5 6 1 2 2 1 3 4 2 4 7 3 4 1 4 5 3 3 5 6 1 5 Output: 8 Explanation: The shortest path from server 1 to server 5 is 1 -> 3 -> 4 -> 5 with a total time delay of 8. -----Explanation of Sample----- In the sample input, there are 5 servers and 6 communication channels. The minimum time to send data from server 1 to server 5 is calculated using the shortest path, which results in a time delay of 8.","solution":"import heapq import sys def minimum_time_to_travel(N, M, edges, S, D): # Create the adjacency list representation of the graph graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize the heap, distance array pq = [(0, S)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[D] if distances[D] != float(\'inf\') else -1"},{"question":"Given a list of N integers, each representing the height of a tower, find two towers such that the difference in their heights is minimized. Output the minimum difference. -----Constraints----- - 2 leq N leq 10^5 - 0 leq height leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 ... height_N -----Output----- Print the minimum absolute difference between the heights of any two towers. -----Sample Input----- 4 5 10 3 8 -----Sample Output----- 2 Explanation: The minimum difference is between towers of heights 8 and 10, or 3 and 5, both yielding a difference of 2.","solution":"def find_minimum_difference(N, heights): Given a list of N integers representing the heights of towers, find the minimum difference between the heights of any two towers. :param N: Number of towers :param heights: List of tower heights :return: Minimum difference between the heights of any two towers heights.sort() # Sorts the list of heights in non-decreasing order min_diff = float(\'inf\') # Initialize with a large number for i in range(N - 1): diff = abs(heights[i] - heights[i + 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Given an integer n, generate a list of the first n numbers in the Fibonacci sequence. -----Constraints----- - n is an integer (1 ≤ n ≤ 30). -----Input----- Input is given from Standard Input in the following format: n -----Output----- Output the first n numbers in the Fibonacci sequence, each number separated by a space. -----Sample Input----- 5 -----Sample Output----- 0 1 1 2 3 In this sample, the first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, and 3.","solution":"def fibonacci_sequence(n): Generates a list of the first n numbers in the Fibonacci sequence. if n == 1: return [0] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Implement a function that takes a list of integers and returns a new list containing the median of every contiguous subarray of length `k`. A median is the middle number in a sorted, odd-length list, or the average of the two middle numbers in an even-length list. # Input - list of integers, where 1 ≤ length of the list ≤ 10^5 and elements range from -10^4 to 10^4 - integer `k`, where 1 ≤ k ≤ length of the list # Output - list of medians of every contiguous subarray of length `k` # Examples ```python medians([1, 3, 4, 2, 5], k=3) # Output: [3, 3, 4] medians([7, 2, 1, 6, 5], k=2) # Output: [4.5, 1.5, 3.5, 5.5] ```","solution":"def find_median(arr): n = len(arr) arr.sort() if n % 2 == 0: return (arr[n//2 - 1] + arr[n//2]) / 2 else: return arr[n//2] def medians(arr, k): Returns a list of medians for every contiguous subarray of length `k`. if k == 1: return arr # each element is a median of its subarray of length 1 result = [] for i in range(len(arr) - k + 1): subarray = arr[i:i + k] median = find_median(subarray) result.append(median) return result"},{"question":"Steve is developing a string manipulation tool that analyzes and transforms input strings based on specific rules. For a given string, the tool should identify the longest substring that contains at most two distinct characters. Steve needs to implement an efficient solution, considering that the input string can be quite large. Your task is to help Steve develop this function. Write a function that takes a string as input and returns the length of the longest substring that contains at most two distinct characters. -----Input----- The input consists of a single string s (1 le text{length of } s le 10^6), containing only lowercase English letters. -----Output----- Output one integer, representing the length of the longest substring that contains at most two distinct characters. -----Examples----- Input eceba Output 3 Input ccaabbb Output 5 -----Note----- In the first example, the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. In the second example, the longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5.","solution":"def longest_substring_with_two_distinct_characters(s): Returns the length of the longest substring that contains at most two distinct characters. :type s: str :rtype: int start = 0 max_length = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of positive integers, you want to partition the list into two subsets such that the difference between the sum of the elements in the two subsets is minimized. Write a program that computes the minimum possible difference. -----Input----- The input consists of: - The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. - The second line contains n positive integers separated by spaces, which are the elements of the list. Each integer is at most 1000. -----Output----- Print a single integer — the minimum possible difference between the sums of the elements in the two subsets. -----Examples----- Input 4 1 6 11 5 Output 1 Input 3 10 20 15 Output 5 Input 5 3 1 4 2 2 Output 0 -----Note----- In the first example, the list can be partitioned as {1, 6, 5} and {11}, with sums 12 and 11 respectively. The difference between the two sums is 1. In the second example, the list can be partitioned as {10, 15} and {20}, with sums 25 and 20 respectively. The difference between the two sums is 5. In the third example, the list can be partitioned as {3, 1, 2} and {4, 2}, with sums 6 and 6 respectively. The difference between the two sums is 0.","solution":"def minimum_subset_difference(n, elements): Computes the minimum possible difference between the sums of the elements in two subsets. Parameters: n (int): The number of elements in the list. elements (list): A list of n positive integers. Returns: int: The minimum possible difference between the sums of the elements in the two subsets. total_sum = sum(elements) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in elements: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for j in range(total_sum // 2, -1, -1): if dp[j]: return total_sum - 2 * j return total_sum # This line is theoretically unreachable. def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) elements = list(map(int, data[1:])) print(minimum_subset_difference(n, elements)) if __name__ == \\"__main__\\": main()"},{"question":"You are given three integers a, b, and c which represent the lengths of the sides of a triangle. You need to determine if a triangle with these side lengths is a valid non-degenerate triangle. A valid non-degenerate triangle adheres to the triangle inequality theorem, which states that for any three sides, the sum of the lengths of any two sides must be greater than the length of the remaining side. Your task is to write a program that takes the side lengths a, b, and c and determines if they can form a valid non-degenerate triangle. If they can, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The single line contains three integers a, b, and c (0 ≤ a, b, c ≤ 10^9) — the lengths of the sides of the triangle. The integers are separated by exactly one space. -----Output----- Print \\"YES\\" if the given sides form a valid non-degenerate triangle, otherwise print \\"NO\\". -----Examples----- Input 3 4 5 Output YES Input 1 1 2 Output NO Input 7 10 5 Output YES -----Note----- In the first sample, the sides 3, 4, and 5 satisfy the conditions of the triangle inequality theorem (3+4 > 5, 4+5 > 3, 3+5 > 4) and thus form a valid non-degenerate triangle. In the second sample, the sides 1, 1, and 2 do not satisfy the conditions of the triangle inequality theorem (1+1 is not greater than 2), and thus do not form a valid non-degenerate triangle.","solution":"def is_valid_triangle(a, b, c): Determines if the sides a, b, and c can form a valid non-degenerate triangle. Args: a (int): length of the first side b (int): length of the second side c (int): length of the third side Returns: str: \\"YES\\" if it forms a valid non-degenerate triangle, otherwise \\"NO\\" if a + b > c and a + c > b and b + c > a: return \\"YES\\" else: return \\"NO\\""},{"question":"You have been tasked to write a function that takes an array of integers and an integer K representing the number of maximum operations. In each operation, you can select any two distinct elements in the array and swap their positions. The goal of the task is to determine how many distinct permutations can be obtained by performing at most K swaps. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers A_1, A_2, ..., A_N denoting the elements of the array. ------ Output ------ For each test case, output a single line containing the integer corresponding to the number of distinct permutations that can be obtained by performing at most K swaps. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 8 0 ≤ K ≤ 28 -10^3 ≤ A_i ≤ 10^3 ------ Subtasks ------ Subtask #1 (20 points) : N ≤ 4, K ≤ 2 Subtask #2 (30 points) : N ≤ 6, K ≤ 10 Subtask #3 (50 points) : N ≤ 8, K ≤ 28 ----- Sample Input 1 ------ 2 3 1 1 2 1 4 2 1 2 3 4 ----- Sample Output 1 ------ 3 24 ----- Explanation 1 ------ Example case 1. With no more than 1 swap, you can obtain the permutations: [1, 2, 1], [2, 1, 1], and [1, 1, 2]. Example case 2. You can swap any two elements to get up to all possible permutations: [1, 2, 3, 4], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 3, 1], [3, 1, 2, 4], [3, 2, 1, 4], [3, 4, 1, 2], [4, 1, 3, 2], [4, 2, 3, 1], [4, 3, 1, 2], etc. Giving you 24 different permutations.","solution":"from itertools import permutations def count_distinct_permutations(N, K, array): This function counts the distinct permutations of the given array after performing at most K swaps. all_permutations = set(permutations(array)) distinct_count = 0 def is_reachable(start, end, k): differences = sum(1 for i in range(len(start)) if start[i] != end[i]) return differences <= 2 * k for perm in all_permutations: if is_reachable(array, perm, K): distinct_count += 1 return distinct_count def distinct_permutations(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] array = test_cases[i][1] results.append(count_distinct_permutations(N, K, array)) return results"},{"question":"Write a function `isValidSudoku` that takes a 2D array representing a Sudoku board and returns true if it is a valid Sudoku board, otherwise returns false. The Sudoku board could be partially filled, where empty cells are denoted by \'.\'. Sudoku rules for validity: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the 9 sub-grids of the board must contain the digits 1-9 without repetition. Example: ``` [ [\\"5\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"], [\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"], [\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"], [\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"], [\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"], [\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"], [\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"], [\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"], [\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"] ] ``` Output: true","solution":"def isValidSudoku(board): Checks if a given 2D array is a valid Sudoku board. def is_valid_unit(unit): unit = [x for x in unit if x != \'.\'] return len(unit) == len(set(unit)) def is_valid_line(board): for line in board: if not is_valid_unit(line): return False return True def is_valid_col(board): for col in zip(*board): if not is_valid_unit(col): return False return True def is_valid_square(board): for i in (0, 3, 6): for j in (0, 3, 6): square = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_unit(square): return False return True return is_valid_line(board) and is_valid_col(board) and is_valid_square(board)"},{"question":"You are on an adventure to find the legendary Gem of Eternity. To reach the gem, you need to cross a series of enchanted stepping stones in a magical river. The stones are arranged in a straight line, and each stone is assigned a unique magical power integer value. To collect the gem, you need to reach the last stone regardless of its power value. However, certain stones can fling you back, making your journey challenging. You can start from any stone, and you can move to another stone based on the power of the current stone. If you are standing on a stone at position `i` with power `p`, you can jump to any stone between positions `i + 1` to `i + p` (both inclusive). Determine the minimum number of jumps required to reach the last stone from any starting stone. If it is not possible to reach the last stone, return `-1`. -----Input----- The first line contains an integer `t` (1 le t le 100) – the number of test cases. The first line of each test case contains an integer `n` (1 le n le 10^5) – the number of stepping stones. The second line contains `n` integers representing the power of each stone, where the `i`-th integer is the power of the `i`-th stone (1 le text{power} le 10^9). -----Output----- For each test case, print the minimum number of jumps required to reach the last stone. If it is not possible to reach the last stone, print `-1`. -----Example----- Input 2 5 6 2 4 0 3 3 1 0 1 Output 1 -1 -----Note----- In the first test case, you can start on the first stone and jump directly to the last stone because the power of the first stone (6) allows you to reach any stone up to the 6th position, which includes the last stone. Therefore, only 1 jump is needed. In the second test case, it is impossible to reach the last stone from any starting position because the second stone has power 0, which would prevent any further movement. Thus, the output is -1.","solution":"def min_jumps_to_reach_last_stone(test_cases): def min_jumps(stones): n = len(stones) if n == 1: return 0 if stones[0] == 0: return -1 max_reach = stones[0] step = stones[0] jump = 1 for i in range(1, n): if i == n - 1: return jump max_reach = max(max_reach, i + stones[i]) step -= 1 if step == 0: jump += 1 if i >= max_reach: return -1 step = max_reach - i return -1 results = [] for t in test_cases: results.append(min_jumps(t)) return results"},{"question":"Write a program that, given a sequence of n integers and a target integer T, determines the length of the shortest contiguous subarray whose sum is at least T. If no such subarray exists, return -1. Constraints * n ≤ 100,000 * 1 ≤ elements in sequence ≤ 10,000 * 1 ≤ T ≤ 10,000,000 Input The first line contains two integers n and T. The second line contains n integers representing the sequence. Output Print the length of the shortest contiguous subarray whose sum is at least T, or -1 if no such subarray exists. Example Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Explanation The shortest subarray with a sum of at least 15 is [7, 8] or [8, 9] or [9, 10], each with length 2.","solution":"def min_subarray_len(n, T, sequence): Returns the length of the shortest contiguous subarray whose sum is at least T. If no such subarray exists, return -1. import sys min_len = sys.maxsize left = 0 current_sum = 0 for right in range(n): current_sum += sequence[right] while current_sum >= T: min_len = min(min_len, right - left + 1) current_sum -= sequence[left] left += 1 return min_len if min_len != sys.maxsize else -1"},{"question":"You are developing logistics software for a delivery service, which needs to determine the optimal route for its drivers. The city map is represented as a grid, where each cell can either be traversable or blocked. Drivers can move up, down, left, or right, but cannot move diagonally. The objective is to find the shortest path from the starting point to the destination. -----Input----- - Two integers n and m (1 leq n, m leq 100), representing the number of rows and columns of the grid, respectively. - An n times m grid where each cell contains either a 0 (traversable) or a 1 (blocked). - Four integers x_1, y_1, x_2, y_2 (0 leq x_1, x_2 < n, 0 leq y_1, y_2 < m), representing the starting point (x_1, y_1) and the destination (x_2, y_2). -----Output----- If there is a path from the starting point to the destination, output a single integer representing the minimum number of steps required. If there is no such path, output -1. -----Explanation of Sample 1----- In this example, the grid is ``` 0 0 0 1 1 0 0 0 0 ``` The starting point is (0, 0) and the destination is (2, 2). The shortest path is right, right, down, down, resulting in 4 steps. -----Examples----- Sample Input: 3 3 0 0 0 1 1 0 0 0 0 0 0 2 2 Sample Output: 4 Sample Input: 3 3 0 1 0 1 1 0 0 0 0 0 0 2 2 Sample Output: -1","solution":"from collections import deque def find_shortest_path(n, m, grid, x1, y1, x2, y2): Returns the minimum number of steps required to reach from (x1, y1) to (x2, y2) in a given grid, or -1 if there is no valid path. if grid[x1][y1] == 1 or grid[x2][y2] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x1, y1, 0)]) visited = set((x1, y1)) while queue: x, y, steps = queue.popleft() if x == x2 and y == y2: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"John is an avid gardener. He loves planting trees in his garden and maintaining them. He has recently come across a unique tree-planting pattern that he wants to try out. The pattern works as follows: John can plant exactly N trees in a single line, where each tree is separated from the others by exactly 1 meter. However, John has also decided to plant some special flowers between some pairs of trees for aesthetic purposes. John defines a triplet (i, j, k) as an aesthetically pleasing triplet if and only if tree \'i\' is planted at the i-th position, tree \'j\' is planted at the j-th position, and there\'s at least one flower planted between tree \'i\' and tree \'j\', and tree \'j\' and tree \'k\'. Given the number of trees N, calculate how many aesthetically pleasing triplets exist. -----Input:----- - First line will contain T, number of test cases. - Each testcase contains a single integer N. -----Output:----- For each testcase, output in a single line the number of aesthetically pleasing triplets. -----Constraints----- - 1 ≤ T ≤ 1000 - 3 ≤ N ≤ 10^6 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 4 Explanation: - For the first test case, N=3. The only aesthetically pleasing triplet is (1, 2, 3). - For the second test case, N=4. The aesthetically pleasing triplets are (1,2,3), (1,2,4), (1,3,4), and (2,3,4).","solution":"def aesthetically_pleasing_triplets(N): Returns the number of aesthetically pleasing triplets for a given N. We can plant exactly N trees in a single line, where each tree is separated from the others by exactly 1 meter. if N < 3: return 0 # The number of aesthetically pleasing triplets is the combination of selecting 3 trees out of N return (N - 2) * (N - 1) * N // 6 def solve(test_cases): results = [] for N in test_cases: results.append(aesthetically_pleasing_triplets(N)) return results"},{"question":"On the planet Digitonia, the safety of each city is measured by a risk factor that fluctuates daily. A special government program aims to reduce the overall risk by allocating budget to specific projects that can decrease the risk factor in cities. You have been given the historical risk data and the potential projects represented as arrays, and your task is to determine the maximum risk reduction achievable given certain constraints. Each city has a risk factor recorded for the past N days and there are M projects available to reduce the risk. Each project, when applied to a city, reduces the risk factor by a certain amount only on a specific day. However, each project can only be used once. You need to calculate the maximum risk reduction possible for one given city. Input::: The first line of the input contains an integer T, the number of test cases. Each test case consists of three lines: 1. The first line contains two integers N and M, separated by a space. 2. The second line contains N integers representing the risk factors for the past N days. 3. The third line contains M integers representing the risk reductions available from the projects. Output::: For each test case, output a single line with the maximum possible risk reduction for the city. Constraints: T ≤ 100, N ≤ 1000, M ≤ 100, 0 ≤ risk factor, risk reduction ≤ 1000000 SAMPLE INPUT 2 10 5 5 6 7 8 5 10 9 7 6 8 2 3 1 4 5 8 3 9 9 4 3 7 5 6 2 3 8 2 SAMPLE OUTPUT 20 13 Explanation: 1st Case: The best risk reduction can be achieved by utilizing the projects that have reductions of {2, 3, 4, 5} on the corresponding highest risk days. 2nd Case: The best risk reduction can be achieved by utilizing the projects that have reductions of {3, 8, 2} on the corresponding highest risk days.","solution":"def max_risk_reduction(N, M, risk_factors, risk_reductions): Calculate the maximum possible risk reduction for a given city. Parameters: N (int): Number of days. M (int): Number of projects. risk_factors (list): List of risk factors for past N days. risk_reductions (list): List of risk reductions available from the projects. Returns: int: The maximum risk reduction possible. risk_factors.sort(reverse=True) risk_reductions.sort(reverse=True) max_reduction = 0 for i in range(min(N, M)): max_reduction += risk_reductions[i] return max_reduction def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][:2] risk_factors = test_cases[i][2] risk_reductions = test_cases[i][3] result = max_risk_reduction(N, M, risk_factors, risk_reductions) results.append(result) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) risk_factors = list(map(int, lines[index + 1].split())) risk_reductions = list(map(int, lines[index + 2].split())) test_cases.append((N, M, risk_factors, risk_reductions)) index += 3 results = process_test_cases(T, test_cases) return results"},{"question":"A company wants to monitor the network traffic within its internal network. The network consists of several devices connected in the form of a directed graph, where each device is represented as a node and the directed connections between them as edges. To analyze the traffic, they want to determine the number of unique paths between two specific devices in the network. A path is considered unique if the sequence of nodes it traverses is unique, even if some nodes or edges are repeated more than once. You are given the adjacency matrix representation of the graph, where adj_matrix[i][j] indicates if there is a direct connection from device i to device j. Write a function to count the number of unique paths from a given node `start` to a given node `end`. Input: - `n`: An integer representing the number of devices (1 ≤ n ≤ 10). - `adj_matrix`: A 2D list of integers where `adj_matrix[i][j]` is 1 if there is a direct connection from node i to node j, 0 otherwise. - `start`: An integer representing the starting device (0 ≤ start < n). - `end`: An integer representing the ending device (0 ≤ end < n). Output: - Print an integer representing the number of unique paths from `start` to `end`. Example: ``` Input: 4 [[0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]] 0 3 Output: 2 ``` Explanation: The unique paths from node 0 to node 3 are: - 0 -> 1 -> 3 - 0 -> 1 -> 2 -> 3","solution":"def count_unique_paths(n, adj_matrix, start, end): Returns the number of unique paths from start node to end node in a directed graph. def dfs(current, end, visited): if current == end: return 1 visited.add(current) path_count = 0 for next_node in range(n): if adj_matrix[current][next_node] == 1: if next_node not in visited: path_count += dfs(next_node, end, visited) visited.remove(current) return path_count visited = set() # a set to keep track of visited nodes to prevent revisiting in the same path return dfs(start, end, visited)"},{"question":"You are provided with an array of positive integers representing the heights of boxes aligned in a row. Each box has a width of 1. A special strong wind can push the boxes either to the left or right by exactly 1 unit. Your task is to compute the maximum number of adjacent boxes that will be aligned vertically after applying the wind once in either direction. Example Given the array `[4, 3, 2, 6, 1, 3]`, after the wind is applied to either left or right, the possible box alignments could be: - `[4, 4+3, 3+2, 2+6, 6+1, 1+3] => [4, 7, 5, 8, 7, 4]` - `[4+3, 3+2, 2+6, 6+1, 1+3, 3] => [7, 5, 8, 7, 4, 3]` Count the maximum number of adjacent boxes that are of the same height in either of these alignments. For the input `[4, 3, 2, 6, 1, 3]`, maximum count of adjacent boxes with the same height after applying the wind is `1` because none of the boxes align adjacently with the same height in either direction. **Note**: Your solution should focus on efficiency.","solution":"def max_adjacent_boxes(heights): Calculate maximum number of adjacent boxes that will be aligned vertically after applying the wind once in either direction. :param heights: List of positive integers representing the heights of boxes. :return: Integer, maximum number of adjacent boxes aligned vertically. if not heights or len(heights) < 2: return 0 n = len(heights) # Create two lists to store the resulting heights after applying wind in both directions left_heights = [0] * n right_heights = [0] * n # Apply wind to the right for i in range(1, n): right_heights[i - 1] = heights[i - 1] + heights[i] # Apply wind to the left for i in range(n - 1): left_heights[i + 1] = heights[i] + heights[i + 1] # Calculate the maximum number of adjacent boxes with same height max_adjacent = 0 # Check for right wind for i in range(n - 1): if right_heights[i] == right_heights[i + 1]: max_adjacent = max(max_adjacent, 1) # Check for left wind for i in range(1, n - 1): if left_heights[i] == left_heights[i + 1]: max_adjacent = max(max_adjacent, 1) return max_adjacent"},{"question":"You are given a list containing both integers and floating point numbers. Write a function `find_median()` that calculates and returns the median of the list. The median is the middle number in a sorted, ascending or descending, list of numbers. If the list length is even, the median is the average of the two middle numbers. # Input - A list of numbers of length `n` where `0 < n <= 10^6`. - The numbers can be negative, zero, or positive. # Output - A single float that is the median of the list. # Example ```python find_median([1, 3, 3, 6, 7, 8, 9]) == 6.0 find_median([1, 2, 3, 4, 5, 6, 8, 9]) == 4.5 find_median([-1, -3, -5, 2, 4, 6, 8]) == 2.0 find_median([9.5, 8.5, 7.5, 6.5, 5.5]) == 7.5 find_median([3.5]) == 3.5 ``` # Notes - Sorting the list is allowed. - Make sure your function handles both integers and floating point numbers correctly. - Edge cases like lists with one element or very large lists should be tested.","solution":"def find_median(numbers): This function finds the median of a list of numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: return float(sorted_numbers[n // 2]) else: return (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2.0"},{"question":"Design a system to track the frequency of characters in a given string. The system should support the following operations in O(1) average time: add(char): Adds a character to the data structure. remove(char): Removes a character from the data structure if present. getFrequency(char): Returns the frequency of a particular character. Example: // Initialize the frequency tracker. FrequencyTracker freqTracker = new FrequencyTracker(); // Adds \'a\' to the tracker. Frequency of \'a\' is now 1. freqTracker.add(\'a\'); // Adds \'b\' to the tracker. Frequency of \'b\' is now 1. freqTracker.add(\'b\'); // Adds \'a\' to the tracker. Frequency of \'a\' is now 2. freqTracker.add(\'a\'); // getFrequency returns 2 for \'a\'. freqTracker.getFrequency(\'a\'); // getFrequency returns 1 for \'b\'. freqTracker.getFrequency(\'b\'); // Removes \'a\' from the tracker. Frequency of \'a\' is now 1. freqTracker.remove(\'a\'); // getFrequency returns 1 for \'a\'. freqTracker.getFrequency(\'a\'); // getFrequency returns 1 for \'b\'. freqTracker.getFrequency(\'b\'); // Removes \'c\' which is not present in the tracker, no change in frequencies. freqTracker.remove(\'c\'); // getFrequency returns 0 for \'c\'. freqTracker.getFrequency(\'c\');","solution":"class FrequencyTracker: def __init__(self): self.frequency = {} def add(self, char): if char in self.frequency: self.frequency[char] += 1 else: self.frequency[char] = 1 def remove(self, char): if char in self.frequency: self.frequency[char] -= 1 if self.frequency[char] == 0: del self.frequency[char] def getFrequency(self, char): return self.frequency.get(char, 0)"},{"question":"# Task: You are given a string `s` containing a set of words separated by spaces. Assume that all words consist of only lowercase alphabetical characters. Your task is to write a function that restores the original sentence by inserting exactly one space between every pair of consecutive words. If there are multiple spaces between words, they should be reduced to a single space. Additionally, any leading or trailing spaces should be removed. # Function Signature: ```python def fix_consecutive_spaces(s: str) -> str: ``` # Input: - `s`: a string containing words separated by spaces; it may contain multiple consecutive spaces between words (`1 <= len(s) <= 1000`). # Output: - Return a string with exactly one space between every pair of consecutive words, and no leading or trailing spaces. # Example: ```python fix_consecutive_spaces(\\"hello world\\") # returns \\"hello world\\" ``` ```python fix_consecutive_spaces(\\" this is a test \\") # returns \\"this is a test\\" ``` ```python fix_consecutive_spaces(\\"singleword\\") # returns \\"singleword\\" ``` # Note: - Your implementation should handle any variation of multiple spaces and ensure a single space between words without leading or trailing spaces. - You can assume the input string is non-empty and consists of only lowercase alphabetical characters and spaces.","solution":"def fix_consecutive_spaces(s: str) -> str: Restores the original sentence by inserting exactly one space between every pair of consecutive words, reducing multiple spaces between words, and removing any leading or trailing spaces. Parameters: s (str): The input string containing words separated by spaces and possibly multiple consecutive spaces. Returns: str: A string with exactly one space between every pair of consecutive words, and no leading or trailing spaces. # Strip leading and trailing spaces and split the string into words based on spaces words = s.strip().split() # Join the words with a single space and return the result return \' \'.join(words)"},{"question":"There is a cafeteria with multiple food counters, each serving food at different speeds. Your task is to write a function to determine the maximum number of customers that can be served within a given amount of time. # Input ```if-not:c * counters: an array of positive integers representing the food counters. Each integer represents a food counter, and its value is the number of customers that counter can serve per minute. * minutes: a positive integer representing the total time available in minutes. ``` ```if:c * counters: a pointer to an array of positive integers representing the food counters. Each integer represents a food counter, and its value is the number of customers that counter can serve per minute. * counters_length: the length of the array that `counters` points to. * minutes: a positive integer representing the total time available in minutes. ``` # Output The function should return an integer, the maximum number of customers that can be served within the given time. ------------------------------------------- Important **Please look at the examples and clarifications below, to ensure you understand the task correctly :)** ------- # Examples ```python max_customers([5, 3, 4], 5) # should return 60 # because the first counter serves 5 customers per minute, the second one serves 3 customers per minute, and the third one serves 4 customers per minute, resulting in a total of (5+3+4)*5 = 60 customers served in 5 minutes. max_customers([10, 2, 8, 6], 3) # should return 78 # because the first counter serves 10 customers per minute, the second serves 2 customers per minute, the third serves 8 customers per minute, and the fourth serves 6 customers per minute, resulting in a total of (10+2+8+6)*3 = 78 customers served in 3 minutes. max_customers([1, 1, 1], 10) # should return 30 # because each counter serves 1 customer per minute, so (1+1+1)*10 = 30 customers in total. ``` # Clarifications * Each counter operates independently, and * All counters serve at the constant rate specified, and * The goal is to find the total number of customers served by all counters within the given amount of time.","solution":"def max_customers(counters, minutes): Returns the maximum number of customers that can be served within the given time. :param counters: List[int] - Each integer represents a food counter and its value is the number of customers that counter can serve per minute. :param minutes: int - The total time available in minutes. :return: int - The maximum number of customers that can be served. return sum(counters) * minutes"},{"question":"Alice has recently learned about Fibonacci sequences and wants to generate a list of the first N Fibonacci numbers. Moreover, she wants to know which of these numbers are prime. A Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a program that generates the first N Fibonacci numbers and then finds which of these numbers are prime. Input The input contains a single integer N such that 1 ≤ N ≤ 50, representing the number of Fibonacci numbers to generate. Output For each test case, output the list of the first N Fibonacci numbers on the first line and the list of prime Fibonacci numbers on the second line. If no prime numbers are found, output \\"No prime numbers\\" on the second line. Example Input: 10 Output: 0 1 1 2 3 5 8 13 21 34 2 3 5 13","solution":"def generate_fibonacci(n): Generate the first N Fibonacci numbers. if n == 1: return [0] fib_nums = [0, 1] while len(fib_nums) < n: fib_nums.append(fib_nums[-1] + fib_nums[-2]) return fib_nums def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def fibonacci_primes(n): Generate the first N Fibonacci numbers and find which of them are prime. fib_nums = generate_fibonacci(n) prime_fib_nums = [num for num in fib_nums if is_prime(num)] return fib_nums, prime_fib_nums if prime_fib_nums else \\"No prime numbers\\" def format_output(n): fib_nums, prime_fib_nums = fibonacci_primes(n) return fib_nums, prime_fib_nums"},{"question":"Write a function `triangle_type` that takes three integers representing the lengths of the sides of a triangle and returns a string describing the type of triangle. The function should return: - \\"Equilateral\\" if all three sides are equal - \\"Isosceles\\" if exactly two sides are equal - \\"Scalene\\" if all three sides are different - \\"Not a triangle\\" if the given sides do not form a valid triangle Note: - A triangle is valid if the sum of any two sides is greater than the third side.","solution":"def triangle_type(a, b, c): # Check if the given sides form a valid triangle if a + b <= c or a + c <= b or b + c <= a: return \\"Not a triangle\\" # All sides are equal if a == b == c: return \\"Equilateral\\" # Two sides are equal elif a == b or b == c or a == c: return \\"Isosceles\\" # All sides are different else: return \\"Scalene\\""},{"question":"You are given a string which represents a paragraph of text. You need to determine the frequency of each distinct word in the string and then sort the words based on their frequencies in descending order. In case of words having the same frequency, sort them lexicographically. A word is defined as a string of alphabetic characters (both uppercase and lowercase) and is case-insensitive. The words should be compared in a case-insensitive manner for the purpose of frequency calculation and ordering. -----Input:----- - The first line contains an integer T denoting the number of test cases. - The following T lines each contain a single string which represents a paragraph of text. -----Output:----- For each test case, output the sorted words and their frequencies. Each word and its frequency should be printed on a new line, separated by a space. The words should be printed in lowercase. -----Constraints:----- - 1 leq T leq 100 - 1 leq text{Length of each paragraph} leq 10^5 -----Sample Input:----- 2 Hello world! Hello. This is a test. This test is only a test. -----Sample Output:----- hello 2 world 1 a 2 is 2 test 3 this 2 only 1","solution":"from collections import Counter import re def word_frequencies(paragraphs): results = [] for paragraph in paragraphs: # Normalize the paragraph to lowercase and extract words words = re.findall(r\'b[a-zA-Z]+b\', paragraph.lower()) # Count the frequencies of each word word_count = Counter(words) # Sort the words by frequency (descending) and then lexicographically sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) results.append(sorted_words) return results"},{"question":"Given a list of integers, write a function to find all such elements in the list which appear strictly more than once and return these elements sorted in ascending order. If no such element is found, return an empty list. Your solution should be efficient in terms of both time and space complexity. Example: ```python Input: [4, 3, 2, 7, 8, 2, 3, 1] Output: [2, 3] Input: [1, 2, 3, 4, 5] Output: [] Input: [10, 10, 10] Output: [10] ``` Constraints: - The input list has a length in the range [1, 10^5]. - The elements of the list are integers in the range [-10^9, 10^9]. # Notes: * Ensure the function efficiently handles large inputs. * Consider edge cases, such as an empty list or a list containing a single element. * The result should contain no duplicates and should be in ascending order.","solution":"def find_duplicates(nums): Given a list of integers, return a list of elements that appear more than once. The result is sorted in ascending order. :param nums: List[int] - List of integers. :return: List[int] - List of integers appearing more than once, sorted in ascending order. from collections import Counter # Count occurrences of elements counts = Counter(nums) # Filter elements that appear more than once and sort the result result = sorted([num for num, count in counts.items() if count > 1]) return result"},{"question":"Given an array of positive integers representing the heights of a series of buildings, you are tasked with finding out the amount of water that can be trapped after it rains. The array elements represent the elevation map where the width of each bar is 1. For example, given the array [0,1,0,2,1,0,1,3,2,1,2,1], the output should be 6. The above array represents a height map where 6 units of water are trapped. Write a program that calculates the total amount of water trapped. Input The input consists of a single dataset. n h1 h2 h3 ... hn Where n is the number of buildings (2 ≤ n ≤ 10^5) and hi (0 ≤ hi ≤ 10^4) represents the height of the i-th building. Output For the given dataset, print a single integer representing the total amount of units of water that can be trapped. Example Input 12 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Hint: You can use two-pointer technique or Stack to solve this problem efficiently.","solution":"def trap_rain_water(heights): Calculate the total amount of water trapped after raining. :param heights: List[int] - List of positive integers representing heights of the buildings. :return: int - Total water units trapped. if not heights: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) water_trapped += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += max(0, right_max - heights[right]) return water_trapped"},{"question":"A company has a system of n devices arranged in a linear topology, where each device has a direct communication link only to its immediate neighbors. Each device has a unique ID from 1 to n. The devices can send three types of messages: \\"status\\", \\"update\\", and \\"check\\". - A \\"status\\" message from device i reports its current status. - An \\"update\\" message from device i includes a new status value that should be applied to device i. - A \\"check\\" message from device i gathers and outputs the status values of device i and its two immediate neighbors (if they exist). Given the initial status of each device and a sequence of messages, you are to determine and print the outcome of each \\"check\\" message. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of devices. The next line contains n integers s_1, s_2, ..., s_n (0 le s_i le 10^9) — the initial status values of the devices. The next line contains a single integer m (1 le m le 10^5) — the number of messages. Each of the next m lines contains a single message. The messages are provided in chronological order and are described as one of the following: - \\"status i\\" where 1 le i le n - \\"update i x\\" where 1 le i le n and 0 le x le 10^9 - \\"check i\\" where 1 le i le n -----Output----- For each \\"check\\" message, print the status values of the specified device i and its immediate neighbors (if they exist). Each result should be printed on a new line. If a neighbor does not exist, that place should have a `-1`. -----Examples----- Input 5 10 20 30 40 50 4 check 3 update 3 100 status 3 check 3 Output 20 30 40 20 100 40 Input 4 5 15 25 35 3 check 1 update 4 45 check 4 Output -1 5 15 25 45 -1","solution":"def process_messages(n, initial_status, messages): status = initial_status[:] # Copying the initial statuses results = [] for msg in messages: parts = msg.split() command = parts[0] if command == \\"status\\": continue # status command does not require any action in our solution elif command == \\"update\\": i = int(parts[1]) - 1 x = int(parts[2]) status[i] = x # Update the status of the device elif command == \\"check\\": i = int(parts[1]) - 1 left = status[i - 1] if i - 1 >= 0 else -1 center = status[i] right = status[i + 1] if i + 1 < n else -1 results.append(f\\"{left} {center} {right}\\") return results # Example usage: n = 5 initial_status = [10, 20, 30, 40, 50] messages = [\\"check 3\\", \\"update 3 100\\", \\"status 3\\", \\"check 3\\"] print(process_messages(n, initial_status, messages)) # Expected: [\'20 30 40\', \'20 100 40\']"},{"question":"Jean loves playing card games, and she is currently obsessed with a new game called \\"Card Patterns.\\" In this game, she is given a string representing a sequence of cards, where each card is denoted by a single uppercase letter (A-Z). Jean\'s objective is to create the longest possible subsequence of cards such that each card in the subsequence appears at least once in every pattern occurrence within the original sequence. A \\"pattern occurrence\\" is defined as any subsequence of the original string where the selected cards appear in the same order as along the subsequence. Note that a subsequence does not require contiguous elements. Write a program to determine the length of the longest such subsequence of cards Jean can create. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1,000) — the length of the sequence of cards. The second line contains a string of length n consisting of uppercase letters representing the sequence of cards. -----Output----- Output a single integer — the length of the longest subsequence of cards Jean can create such that each card appears at least once in every pattern occurrence within the original sequence. -----Examples----- Input 8 ABACABDA Output 4 Input 10 AAABBBCCDD Output 4 -----Note----- Consider the first sample case: For the sequence \\"ABACABDA\\", Jean can create the subsequence \\"ABAD\\". This is because each of these cards (A, B, A, D) appear in the original sequence in this order at least once, making the pattern. In the second sample case: For the sequence \\"AAABBBCCDD\\", Jean can create the subsequence \\"ABCD\\", forming the longest pattern that repeats in the order they appear at least once in the string.","solution":"def longest_subsequence(n, card_sequence): from collections import Counter # Find the frequency of each card in the sequence card_count = Counter(card_sequence) # The longest subsequence containing unique characters will be limited by # the minimum frequency among the characters in the sequence return len(card_count)"},{"question":"Given a string S, Aoki can do the operation below. Operation: Replace any two adjacent and different characters in the string with the first character of the two. You are given an initial string S. Find the lexicographically smallest string possible after Aoki does the operation zero or more times. -----Constraints----- - 1 ≤ |S| ≤ 1000 - S consists of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the lexicographically smallest string possible after Aoki does the operation zero or more times. -----Sample Input----- bcab -----Sample Output----- a Initially, S = \\"bcab\\". After one operation on \\"bcab\\", it can become \\"bab\\". After another operation on \\"bab\\", it can become \\"aa\\". After another operation on \\"aa\\", it remains \\"a\\", which is the lexicographically smallest possible string.","solution":"def find_lexicographically_smallest_string(S): Given a string S, find the lexicographically smallest string possible after performing the allowed operations zero or more times. # The result after operations will just be the smallest character in S. return min(S)"},{"question":"Write a function `missing_number(arr)` that takes a list of integers `arr` and returns the smallest positive integer that is missing from the array. The array may contain duplicates and both positive and negative numbers. Ensure that your solution is efficient in time complexity. For example: - `missing_number([3, 4, -1, 1])` should return `2`. - `missing_number([1, 2, 0])` should return `3`. - `missing_number([-2, -1, -3])` should return `1`.","solution":"def missing_number(arr): Returns the smallest positive integer that is missing from the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Given a grid of size N x M, find the number of ways to reach the bottom-right corner of the grid from the top-left corner. You can only move either right or down at any point in time and there are certain cells you cannot move into (blocked cells). Example 1: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [ [0, 1], [0, 0] ] Output: 1 Explanation: There is only one way to reach the bottom-right corner: 1. Down -> Right Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findPaths() that takes a 2D list (grid) as input and returns the number of ways to reach the bottom-right corner of the grid from the top-left corner. The driver code takes care of the printing. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 0 ≤ grid[i][j] ≤ 1 Note: 0 represents an open cell and 1 represents a blocked cell where you cannot enter.","solution":"def findPaths(grid): Returns the number of ways to reach the bottom-right corner of the grid from the top-left corner. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Given an array of integers, determine if there are three distinct elements that add up to a specified target sum. Input: - The first line contains an integer `N`, the number of elements in the array. - The second line contains `N` integers separated by spaces, the elements of the array. - The third line contains an integer `S`, the target sum. Output: - Print \\"YES\\" if there are three distinct elements in the array whose sum equals `S`, otherwise print \\"NO\\". Example Input: 6 1 4 45 6 10 8 22 Output: YES Input: 5 12 3 4 1 6 24 Output: NO","solution":"def find_three_elements_with_sum(N, arr, S): Determines if there are three distinct elements in the array that add up to the given target sum S. Args: N: int - number of elements in the array arr: list - list of integers representing the array elements S: int - target sum Returns: str: \\"YES\\" if there are three distinct elements which sum to S, otherwise \\"NO\\" arr.sort() for i in range(N-2): l, r = i + 1, N - 1 while l < r: current_sum = arr[i] + arr[l] + arr[r] if current_sum == S: return \\"YES\\" elif current_sum < S: l += 1 else: r -= 1 return \\"NO\\" # Reading inputs and determining output if __name__ == \\"__main__\\": N = int(input().strip()) arr = list(map(int, input().strip().split())) S = int(input().strip()) print(find_three_elements_with_sum(N, arr, S))"},{"question":"In a distant land called Aceland, there are n students in a class. The teacher gave them an assignment to form study groups. Each student has to form a group with exactly one other student. Once forming a group, the two students need to choose distinct topics to study. To make the assignment interesting, the teacher adds a twist: There are m pairs of students who are best friends and each such pair should be in different groups. Given this setup, determine if it\'s possible to form the groups while satisfying the conditions. If so, provide one such arrangement of groups. Input The first line contains two integers n (2 ≤ n ≤ 105, n is even) and m (0 ≤ m ≤ 105) — the number of students and the number of best-friend pairs respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — denoting the best-friend pairs. Each pair appears only once in the input. Output If it is not possible to form the groups, print -1. Otherwise, print n/2 lines, each containing two integers representing the IDs of the students in each group. Ensure that none of the best-friend pairs are in the same group. If there are multiple solutions, print any of them. Example Input 6 3 1 2 2 3 4 5 Output 1 3 2 4 5 6","solution":"def form_study_groups(n, m, friend_pairs): # Create an adjacency list to store friend pairs adjacency_list = {i: set() for i in range(1, n + 1)} for u, v in friend_pairs: adjacency_list[u].add(v) adjacency_list[v].add(u) # Keep track of visited students visited = [False] * (n + 1) groups = [] def dfs(student, current_group): stack = [student] while stack: current = stack.pop() if visited[current]: continue visited[current] = True current_group.append(current) for neighbor in adjacency_list[current]: if not visited[neighbor]: stack.append(neighbor) for student in range(1, n + 1): if not visited[student]: group1 = [] group2 = [] dfs(student, group1) for member in group1: for f in adjacency_list[member]: if f not in group1 and not visited[f]: group2.append(f) visited[f] = True if len(group1) == len(group2): groups.append((group1, group2)) else: return -1 result = [] for group1, group2 in groups: for a, b in zip(group1, group2): result.append((a, b)) return result # Handling input and output def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) friend_pairs = [] k = 2 for _ in range(m): ui = int(data[k]) vi = int(data[k + 1]) friend_pairs.append((ui, vi)) k += 2 result = form_study_groups(n, m, friend_pairs) if result == -1: print(-1) else: for pair in result: print(*pair) # For actual use, uncomment this # if __name__ == \\"__main__\\": # process_input()"},{"question":"You are given an array of integers representing the heights of buildings in a straight line. The streetlight is positioned at the beginning of this row (before the first building), and it emits light that can only shine to the right. Due to the buildings\' heights, some of them might block the light for others. You are to determine how many buildings will be illuminated by the streetlight. The streetlight illuminates a building if and only if there are no taller or equally tall buildings before it in the array that block the light. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of buildings. - The second line contains N space-separated integers, representing the heights of the buildings. ------ Output Format ------ For each test case, output a single integer on a new line, the number of buildings that are illuminated. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ height ≤ 10^9 ----- Sample Input 1 ------ 3 5 3 1 4 2 5 4 4 3 2 1 6 1 3 2 4 3 6 ----- Sample Output 1 ------ 3 1 4 ----- Explanation 1 ------ For the first test case: - Building 1 with height 3 is illuminated (no buildings before it). - Building 3 with height 4 is illuminated (it is taller than buildings 1 and 2). - Building 5 with height 5 is illuminated (it is taller than buildings 1, 2, 3, and 4). For the second test case: - Only building 1 with height 4 is illuminated (it is the tallest). For the third test case: - Building 1 with height 1 is illuminated (no buildings before it). - Building 2 with height 3 is illuminated (it is taller than building 1). - Building 4 with height 4 is illuminated (it is taller than buildings 1, 2, and 3). - Building 6 with height 6 is illuminated (it is taller than buildings 1, 2, 3, 4, and 5).","solution":"def count_illuminated_buildings(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] illuminated_count = 0 tallest_so_far = 0 for height in heights: if height > tallest_so_far: illuminated_count += 1 tallest_so_far = height results.append(illuminated_count) return results"},{"question":"You are working on a software that helps users keep track of their tasks. Each task has a specific start time and end time. Some tasks might overlap, which could make it difficult to manage them effectively. To help users see when tasks are overlapping, you need to create a program that identifies overlapping tasks and outputs pairs of task indices that overlap. You are given a list of tasks with their start and end times. The tasks are provided in a format where each task is described by two integers representing start time and end time. Your job is to determine which tasks overlap with each other. Two tasks overlap if their time intervals intersect. For example, task A with start time 8 and end time 10 overlaps with task B with start time 9 and end time 11. Input: The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of tasks. The next `n` lines contain two integers each, `start_i` and `end_i` (0 ≤ start_i < end_i ≤ 10^6), representing the start and end times of the i-th task. Output: You should output all pairs of 1-based indices of overlapping tasks, one pair per line. If there are multiple overlapping tasks, print each pair in a new line. The pairs should be sorted in ascending order first by the first index and then by the second index. If no tasks overlap, output \\"No Overlapping Tasks\\". Example: Input: 5 1 4 2 5 6 8 7 9 10 12 Output: 1 2 3 4","solution":"def find_overlapping_tasks(n, tasks): Given a list of tasks with start and end times, find all pairs of overlapping tasks. :param n: Number of tasks (int) :param tasks: List of tuples where each tuple contains start and end times of a task (list of tuples) :return: List of tuples where each tuple contains a pair of indices representing overlapping tasks overlapping_pairs = [] for i in range(n): for j in range(i + 1, n): start_i, end_i = tasks[i] start_j, end_j = tasks[j] # Check for overlap if start_i < end_j and start_j < end_i: overlapping_pairs.append((i + 1, j + 1)) # Adding 1 to make it 1-based indices if not overlapping_pairs: return \\"No Overlapping Tasks\\" return overlapping_pairs"},{"question":"In a coding competition, participants are required to decode a secret message. The message is encoded using a special rule: for each character in the message, find the character that is located exactly n positions ahead in the alphabet. If the shift goes past \'z\', it wraps back around to \'a\'. For example, with a shift of 3: - \'a\' becomes \'d\' - \'w\' becomes \'z\' - \'x\' becomes \'a\' - \'z\' becomes \'c\' Your task is to write a function that takes a string message and an integer n, and returns the decoded message. The message will contain only lowercase letters. -----Input----- The input consists of: - A single integer n (1 ≤ n ≤ 25). - A single string message composed of lowercase letters (\'a\'-\'z\'), with length between 1 and 100. -----Output----- Print the decoded message. -----Examples----- Input 3 abcxyz Output defabc Input 5 hello Output mjqqt Input 1 zebra Output afcsb -----Note----- In the first test case, each character of the string \'abcxyz\' is shifted 3 positions ahead in the alphabet, resulting in the decoded message \'defabc\'. In the second test case, \'hello\' shifted 5 positions ahead becomes \'mjqqt\'. \'h\' + 5 -> \'m\', \'e\' + 5 -> \'j\', \'l\' + 5 -> \'q\', \'l\' + 5 -> \'q\', \'o\' + 5 -> \'t\'. In the third test case, the shift of 1 makes \'z\' wrap around to become \'a\', and likewise for other characters.","solution":"def decode_message(n, message): Decodes a message by shifting each character exactly n positions ahead in the alphabet, wrapping around from \'z\' to \'a\'. Parameters: n (int): The number of positions to shift each character (1 <= n <= 25). message (str): The encoded message containing only lowercase letters. Returns: str: The decoded message. decoded_message = \'\' for char in message: decoded_char = chr((ord(char) - ord(\'a\') + n) % 26 + ord(\'a\')) decoded_message += decoded_char return decoded_message"},{"question":"Sarah manages a popular café where customers often form long lines. To speed up the process, Sarah has devised a more efficient way to take orders and serve the customers by organizing them into groups. Here’s how it works: 1. Each group must have a minimum of `M` customers and a maximum of `N` customers. 2. Customers are indexed from 1 to `K`, and they are served in the order they arrive. 3. Only the last group may have less than `M` customers, but it must still have at least one customer. Given the total number of customers in the queue (`K`), and the minimum (`M`) and maximum (`N`) group sizes, you need to determine how many groups will be formed and the sizes of each group. Input The first line contains three integers `K`, `M`, and `N` separated by a space: - `K` (1 ≤ K ≤ 10,000): Total number of customers. - `M` (1 ≤ M ≤ N): Minimum number of customers in each group. - `N` (M ≤ N ≤ 1,000): Maximum number of customers in each group. Output Output the number of groups followed by the size of each group in order they formed, separated by spaces. Example Input 15 3 5 Output 4 5 5 5 Input 10 2 4 Output 4 4 4 2","solution":"def form_groups(K, M, N): groups = [] customers_remaining = K while customers_remaining >= M: if customers_remaining >= N: groups.append(N) customers_remaining -= N elif customers_remaining >= M: groups.append(customers_remaining) customers_remaining -= customers_remaining else: break if customers_remaining > 0: groups.append(customers_remaining) return len(groups), groups"},{"question":"In a small town, there are precisely N houses located at different points on a straight road. Each house has a delivery count indicating how many packages it needs. You are required to design a delivery route that minimizes the total distance the delivery truck needs to travel. The truck must start at the first house, deliver packages house by house in their linear order, and end at the last house. Calculate the minimal total distance the truck needs to travel to complete its delivery route. ------ Input Format ------ - The first line contains an integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of houses. - The second line of each test case contains N integers indicating the positions of the houses in non-decreasing order. - The third line of each test case contains N integers indicating the number of packages needed by each house. ------ Output Format ------ For each test case, print a single integer representing the minimal total distance the truck needs to travel. ------ Constraints ------ 1 ≤ T ≤ 50 2 ≤ N ≤ 100 1 ≤ text{position} ≤ 1000 1 ≤ text{packages} ≤ 100 ----- Sample Input 1 ------ 2 3 1 3 6 4 2 1 4 2 7 9 15 3 5 2 1 ----- Sample Output 1 ------ 5 13 ----- Explanation 1 ------ Test case 1: The truck travels the path 1 -> 3 -> 6 with a total distance of |3-1| + |6-3| = 5. Test case 2: The truck travels the path 2 -> 7 -> 9 -> 15 with a total distance of |7-2| + |9-7| + |15-9| = 13.","solution":"def minimal_total_distance(test_cases): Given multiple test cases, returns a list of minimal total distances the delivery truck needs to travel to complete its delivery route for each test case. :param test_cases: List of tuples, each containing: - N (number of houses) - positions (list of positions of houses in non-decreasing order) - packages (list of number of packages needed by each house) :return: List of integers representing the minimal distances for each test case results = [] for case in test_cases: N, positions, packages = case # Calculate the travel distance total_distance = 0 for i in range(1, N): total_distance += abs(positions[i] - positions[i-1]) results.append(total_distance) return results"},{"question":"You are given an array of integers representing the height of buildings in a city. The city planner wants to select a certain number of buildings to form a skyline such that the difference between the maximum and minimum height of the selected buildings is minimized. You need to determine this minimum possible difference for the given number of buildings. Input - First line of input contains two integers n (1 ≤ n ≤ 105) and k (1 ≤ k ≤ n). - Second line contains n integers representing the height of buildings (1 ≤ height ≤ 109). Output - Output a single integer representing the minimum possible difference of heights between the tallest and shortest buildings in the selected group of k buildings. Example Input 5 3 10 1 12 9 5 Output 3 Explanation To achieve the minimum difference, select buildings with heights 9, 10, and 12. The difference between the maximum and minimum heights is 12 - 9 = 3.","solution":"def min_height_difference(n, k, heights): Returns the minimum difference between the maximum and minimum heights of the selected k buildings. heights.sort() min_diff = float(\'inf\') for i in range(n - k + 1): current_diff = heights[i + k - 1] - heights[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"You are given two positive integers, N and M, and an array of N positive integers. Your goal is to remove exactly M elements from the array so that the sum of the remaining elements is minimized. Write a program that finds and prints the minimized sum of the remaining N - M elements. Constraints * 1 ≤ N ≤ 2 * 10^5 * 1 ≤ M ≤ N * 1 ≤ array[i] ≤ 10^9 for (1 ≤ i ≤ N) Input: Input is given from Standard Input in the following format: ``` N M array_1 array_2 … array_N ``` Output: Print the minimized sum of the remaining N - M elements. Examples Input: ``` 5 2 3 7 2 5 8 ``` Output: ``` 10 ``` Input: ``` 6 3 10 5 7 3 9 6 ``` Output: ``` 14 ```","solution":"def minimized_sum(N, M, array): Minimize the sum of the remaining N-M elements of the array after removing M elements. Parameters: N (int): Number of elements in the array M (int): Number of elements to remove array (list of int): List of positive integers Returns: int: Minimized sum of the remaining elements # Sort the array array.sort() # Sum the first N-M elements minimized_sum = sum(array[:N-M]) return minimized_sum # Example Usage: # minimized_sum(5, 2, [3, 7, 2, 5, 8]) # Output: 10"},{"question":"Write a function to calculate the minimum number of operations needed to reduce a number `n` to 1. The allowed operations are: 1. Subtract 1 from `n`. 2. If `n` is divisible by 2, divide `n` by 2. 3. If `n` is divisible by 3, divide `n` by 3. Input The input contains a single integer `n` (1 ≤ n ≤ 10^6). Output Output the result – the minimum number of operations needed. Examples Input 10 Output 3 Input 6 Output 2","solution":"def min_operations_to_reduce_to_one(n): Returns the minimum number of operations needed to reduce a number n to 1. Allowed operations: 1. Subtract 1 from n 2. If n is divisible by 2, divide n by 2 3. If n is divisible by 3, divide n by 3 dp = [0] * (n + 1) for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 # operation: subtract 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # operation: divide by 2 if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) # operation: divide by 3 return dp[n]"},{"question":"Given an array of integers `arr` of length `N`, your task is to determine if it is possible to remove one or zero elements from the array so that the remaining array is strictly increasing, i.e., each element is strictly greater than the previous one. Return \\"YES\\" if it is possible to achieve this by removing at most one element from the array, otherwise return \\"NO\\". Example 1: Input: arr = [1, 2, 10, 5, 7] Output: YES Explanation: You can remove 10 to get the array [1, 2, 5, 7], which is strictly increasing. Example 2: Input: arr = [2, 3, 1, 2] Output: NO Explanation: There is no single element you can remove to make the array strictly increasing. Example 3: Input: arr = [1, 2, 3, 4] Output: YES Explanation: The array is already strictly increasing. Your task: You don\'t need to read input or print anything. Your task is to complete the function `canBeIncreasing()` which takes an array of integers `arr` as input, and returns \\"YES\\" or \\"NO\\" accordingly. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 2 <= N <= 10^{5} - 1 <= arr[i] <= 10^9","solution":"def canBeIncreasing(arr): Determines if it\'s possible to remove at most one element from the array to make it strictly increasing. def is_strictly_increasing(a): return all(a[i] < a[i+1] for i in range(len(a) - 1)) for i in range(len(arr)): if is_strictly_increasing(arr[:i] + arr[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"In a popular tactical game, players must strategize the movement of their warriors on a grid battlefield. The battlefield is represented as an m times n grid with m rows and n columns. Each cell in the grid can be either empty or occupied by an obstacle. Warriors can move from one cell to another if the target cell is adjacent horizontally or vertically and is not occupied by an obstacle. However, a warrior cannot move diagonally. The player needs to find the number of unique paths from the top-left corner (0,0) to the bottom-right corner (m-1, n-1) of the grid. A path is considered valid if it does not pass through any obstacles. Given the dimensions of the battlefield and the positions of obstacles, help the player determine the total number of unique paths. **Input:** - The first line contains two integers, m and n (1 leq m, n leq 1000), the dimensions of the battlefield. - The second line contains an integer k (0 leq k leq m times n), the number of obstacles. - Each of the next k lines contains two integers r and c (0 leq r < m, 0 leq c < n), representing the row and column of each obstacle. **Output:** - Output the number of unique paths from the top-left to the bottom-right corner. If there is no valid path, output 0. **Example:** ``` Input: 3 3 1 1 1 Output: 2 Input: 3 3 2 1 1 1 2 Output: 1 Input: 3 3 0 Output: 6 ``` **Explanation:** In the first example, the grid is: ``` 0 0 0 0 1 0 0 0 0 ``` There are two unique paths avoiding the obstacle: 1. (0,0) → (0,1) → (0,2) → (1,2) → (2,2) 2. (0,0) → (1,0) → (2,0) → (2,1) → (2,2) In the second example, the grid is: ``` 0 0 0 0 1 1 0 0 0 ``` There is only one unique path avoiding the obstacles: (0,0) → (1,0) → (2,0) → (2,1) → (2,2) The third example has no obstacles, and six paths are possible. ```","solution":"def num_of_unique_paths(grid_size, obstacles): m, n = grid_size grid = [[0] * n for _ in range(m)] for r, c in obstacles: grid[r][c] = -1 if grid[0][0] == -1 or grid[m-1][n-1] == -1: return 0 grid[0][0] = 1 for r in range(m): for c in range(n): if grid[r][c] == -1: continue if r > 0 and grid[r-1][c] != -1: grid[r][c] += grid[r-1][c] if c > 0 and grid[r][c-1] != -1: grid[r][c] += grid[r][c-1] return grid[m-1][n-1] # Example usage print(num_of_unique_paths((3, 3), [(1, 1)])) # Output: 2 print(num_of_unique_paths((3, 3), [(1, 1), (1, 2)])) # Output: 1 print(num_of_unique_paths((3, 3), [])) # Output: 6"},{"question":"Given an array B[] of integers, return the start and end indices of the longest contiguous subarray that contains only even numbers. If there are multiple subarrays with the same length, return the indices of the first one. Example 1: Input: B = {1, 2, 4, 6, 1, 2, 2, 4} Output: 1 3 Explanation: The subarray [2, 4, 6] has the longest length of 3 and contains only even numbers. Example 2: Input: B = {1, 3, 5, 7, 2, 4, 6, 8, 10, 11} Output: 4 8 Explanation: The subarray [2, 4, 6, 8, 10] has the longest length of 5 and contains only even numbers. Your Task: You don\'t need to read input or print anything. Complete the function longestEvenSubarray() that takes the array B[] as input and returns a pair of integers representing the start and end indices of the longest contiguous subarray containing only even numbers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |B| <= 10^5 -10^5 <= B[i] <= 10^5","solution":"def longestEvenSubarray(B): max_length = 0 max_start = max_end = -1 current_start = -1 current_length = 0 for i in range(len(B)): if B[i] % 2 == 0: if current_start == -1: current_start = i current_length += 1 else: if current_length > max_length: max_length = current_length max_start = current_start max_end = i - 1 current_start = -1 current_length = 0 if current_length > max_length: max_length = current_length max_start = current_start max_end = len(B) - 1 return max_start, max_end"},{"question":"In a particular city, there are N buildings arranged in a straight row. Each building is designated by its height. You are given an array of integers representing the heights of these buildings. You need to process Q queries on this array. Each query contains a single integer x, and the result of the query should be the maximum height of the buildings that are greater than or equal to x. -----Input----- - The first line contains a single integer N denoting the number of buildings. - The second line contains N space-separated integers representing the heights of the buildings. - The third line contains a single integer Q denoting the number of queries. - The next Q lines contain a single integer x each. -----Output----- For each query, print a single integer — the maximum height of the buildings that are greater than or equal to x. If there are no such buildings, print -1. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ height of each building ≤ 10^6 - 1 ≤ Q ≤ 100,000 - 1 ≤ x ≤ 10^6 -----Example Input----- 6 1 3 5 7 9 11 3 4 8 12 -----Example Output----- 11 11 -1","solution":"def get_building_heights(heights, queries): For each query, return the maximum height of the buildings that are greater than or equal to the specified height in the query. If there are no such buildings, return -1. Parameters: heights (list[int]): List of building heights. queries (list[int]): List of queries to check against the building heights. Returns: list[int]: List of results for each query. results = [] sorted_heights = sorted(heights, reverse=True) for x in queries: found = -1 for height in sorted_heights: if height >= x: found = height break results.append(found) return results"},{"question":"Given an integer N, return the smallest number of integers required such that their squares sum up to N. # Input Format - The input consists of a single integer N. # Output Format - Output a single integer, the smallest number of integers required such that their squares sum up to N. # Constraints - 1 ≤ N ≤ 10^4 # Sample Input 1 12 # Sample Output 1 3 # Explanation 1 One possible way to get the sum 12 using the square of integers is 4^2 + 2^2 + 2^2 = 12, which uses 3 integers. # Sample Input 2 13 # Sample Output 2 2 # Explanation 2 One possible way to get the sum 13 using the square of integers is 3^2 + 2^2 = 13, which uses 2 integers. # Note This problem is based on the mathematical concept known as the \\"sum of squares.\\" The algorithm should be optimized to handle all values in the given input range efficiently.","solution":"import math def numSquares(N): Returns the smallest number of integers required such that their squares sum up to N. # Initialize the dp array where dp[i] means the least number of perfect square numbers which sum to i dp = [float(\'inf\')] * (N + 1) # Since 0 is the sum of 0 numbers\' squares dp[0] = 0 # Loop through each number from 1 to N and calculate minimum squares for i in range(1, N + 1): j = 1 while j * j <= i: dp[i] = min(dp[i], dp[i - (j * j)] + 1) j += 1 return dp[N]"},{"question":"You are creating a system to manage digital music collections. Each collection is comprised of multiple playlists, and each playlist contains several songs. Your task is to implement the following features: 1. **AddPlaylist(name)**: This function adds a new playlist with the given name to the collection. 2. **AddSong(playlistName, songName)**: This function adds a new song to the specified playlist. If the playlist does not exist, it creates the playlist first. 3. **RemovePlaylist(name)**: This function removes the playlist with the given name from the collection. If the playlist does not exist, it does nothing. 4. **RemoveSong(playlistName, songName)**: This function removes the song from the specified playlist. If the playlist or the song does not exist, it does nothing. 5. **GetPlaylist(playlistName)**: This function returns a list of all the songs in the specified playlist. If the playlist does not exist, it returns an empty list. You should implement the MusicCollection class to support these functionalities. Implement the class such that all methods have an average time complexity of O(1). Constraints: * Song names and playlist names are non-empty strings with at most 100 characters. * The total number of songs in all playlists does not exceed 500. * The total number of playlists does not exceed 100. Input: You will need to implement only the MusicCollection class as described above. No input-output handling is required for this problem. Example: ```python music_collection = MusicCollection() music_collection.AddPlaylist(\\"Rock Classics\\") music_collection.AddSong(\\"Rock Classics\\", \\"Bohemian Rhapsody\\") music_collection.AddSong(\\"Rock Classics\\", \\"Hotel California\\") music_collection.AddPlaylist(\\"Pop Hits\\") music_collection.AddSong(\\"Pop Hits\\", \\"Billie Jean\\") music_collection.AddSong(\\"Pop Hits\\", \\"Uptown Funk\\") music_collection.AddSong(\\"Country Roads\\", \\"Take Me Home\\") # Automatically creates \\"Country Roads\\" Playlist music_collection.RemoveSong(\\"Rock Classics\\", \\"Hotel California\\") music_collection.RemovePlaylist(\\"Pop Hits\\") print(music_collection.GetPlaylist(\\"Rock Classics\\")) # Outputs: [\\"Bohemian Rhapsody\\"] print(music_collection.GetPlaylist(\\"Pop Hits\\")) # Outputs: [] print(music_collection.GetPlaylist(\\"Country Roads\\")) # Outputs: [\\"Take Me Home\\"] ``` Your task is to implement all the methods in the MusicCollection class efficiently per the given constraints.","solution":"class MusicCollection: def __init__(self): self.playlists = {} def AddPlaylist(self, name): if name not in self.playlists: self.playlists[name] = set() def AddSong(self, playlistName, songName): if playlistName not in self.playlists: self.AddPlaylist(playlistName) self.playlists[playlistName].add(songName) def RemovePlaylist(self, name): if name in self.playlists: del self.playlists[name] def RemoveSong(self, playlistName, songName): if playlistName in self.playlists and songName in self.playlists[playlistName]: self.playlists[playlistName].remove(songName) def GetPlaylist(self, playlistName): if playlistName in self.playlists: return list(self.playlists[playlistName]) return []"},{"question":"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they can be made by rearranging the letters of one to get the other, using all the original letters exactly once. Input Format The input consists of several test cases. The first line of the input file contains a positive integer T, the number of test cases. Then, T pairs of lines follow, each pair containing two strings S1 and S2 (only lowercase English letters, without spaces). Output Format The output must contain exactly T lines, each line containing a single word: \\"YES\\" if the strings are anagrams of each other, otherwise \\"NO\\". Constraints 1 ≤ T ≤ 100 1 ≤ |S1|, |S2| ≤ 30 SAMPLE INPUT 2 listen silent apple papel SAMPLE OUTPUT YES YES","solution":"def are_anagrams(s1, s2): Returns \'YES\' if s1 and s2 are anagrams of each other, otherwise \'NO\'. if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\" def check_anagrams(test_cases): Returns a list of results for each pair of strings in test_cases indicating if they are anagrams. results = [] for s1, s2 in test_cases: results.append(are_anagrams(s1, s2)) return results"},{"question":"Create a program that evaluates mathematical expressions from strings and computes their results. Your program should correctly interpret the four basic arithmetic operations: addition (+), subtraction (-), multiplication (*), and division (/), while respecting the order of operations (PEMDAS/BODMAS rules). # Input A sequence of multiple lines containing mathematical expressions. Each expression is a combination of non-negative integers and the operators (+, -, *, /), without spaces. The input ends with a line containing a single 0. You can assume that the input expressions are well-formed. # Output For each expression, output the computed result on a new line. All results should be printed as floating-point numbers with exactly two decimal places. # Examples Input ``` 3+5*2 10/2+1 7*(2+3) 8/3*3 20-4+3*2 1+1+1 0 ``` Output ``` 13.00 6.00 35.00 8.00 22.00 3.00 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result as a float with two decimal places. # Evaluating the expression using eval result = eval(expression) # Formatting the result to two decimal places return format(result, \\".2f\\") def process_expressions(expressions): Processes a list of expressions and prints their evaluated result. The input ends with a line containing a single 0. for expression in expressions: if expression == \'0\': break print(evaluate_expression(expression))"},{"question":"In a certain kingdom, there are magic portals that can transport people between cities. The portals work in a specific way: they are positioned in some cities, and each portal has a pair of numbers (a, b) associated with it. If you step into a portal at city x, you will be transported to city ((x * a) + b) % n. There are k portals in the kingdom, and each portal can be used multiple times. The king wants to transport his subjects in a way that they can visit all cities starting from city 0. Write a program that determines if it is possible for the subjects to visit all cities in the kingdom. If it is possible, print \\"Yes\\", otherwise print \\"No\\". Input The first line contains two integers n (2 ≤ n ≤ 100) — the number of cities, and k (1 ≤ k ≤ 10) — the number of portals. Each of the next k lines contains two integers a and b (1 ≤ a, b ≤ n-1) — the parameters of a portal. Output Print \\"Yes\\" if it is possible to visit all cities starting from city 0 using the portals provided. Otherwise, print \\"No\\". Example Input 4 1 2 1 Output No Input 3 2 1 1 2 2 Output Yes","solution":"def can_visit_all_cities(n, k, portals): def bfs(start, n, portals): visited = [False] * n queue = [start] visited[start] = True while queue: city = queue.pop(0) for a, b in portals: next_city = (city * a + b) % n if not visited[next_city]: visited[next_city] = True queue.append(next_city) return all(visited) return \\"Yes\\" if bfs(0, n, portals) else \\"No\\""},{"question":"You are given a list of integers. A sublist is a contiguous portion of this list. Your task is to find the maximum possible sum of some sublist of the given list. Input The first line contains a single integer `N` (1 ≤ N ≤ 10^5), the length of the list. The second line contains `N` integers separated by spaces, representing the list. Each integer in the list will be in the range [-10^4, 10^4]. Output Print a single integer — the maximum possible sum of some sublist. SAMPLE INPUT 5 1 2 -4 5 3 SAMPLE OUTPUT 8 Explanation The sublist [5,3] gives the maximum sum which is 8.","solution":"def max_sublist_sum(N, lst): Returns the maximum possible sum of some sublist of the given list. Uses Kadane\'s Algorithm. max_current = max_global = lst[0] for i in range(1, N): max_current = max(lst[i], max_current + lst[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a list of integers, write a function that returns the index of the largest element. If there are multiple elements with the same value, return the one with the smallest index. Example: Input: [1, 3, 7, 7, 5] Output: 2 Note: You can assume the list contains at least one element and all elements are non-negative integers.","solution":"def index_of_largest_element(nums): Returns the index of the largest element in the list. If there are multiple elements with the same value, returns the one with the smallest index. if not nums: raise ValueError(\\"The list must contain at least one element\\") max_value = nums[0] max_index = 0 for i in range(1, len(nums)): if nums[i] > max_value: max_value = nums[i] max_index = i return max_index"},{"question":"Implement a data structure that supports the following set of operations on a set of integers S, initialized to be empty: - `insert X` - Insert the integer X into the set S. - `remove X` - Remove the integer X from the set S if it exists. - `findRank X` - Find the rank of the integer X in the set S. The rank of an integer X is its index in the sorted sequence of elements in S, starting from 1. - `findKth K` - Find the K-th smallest element in the set S. If such an element doesn\'t exist, return -1. # Input Format: - The first line contains an integer Q, the number of queries. - The following Q lines each contain a query as described above. # Output Format: For each `findRank` and `findKth` query, output the corresponding result on a new line. # Constraints: - 1 ≤ Q ≤ 100,000 - -10^9 ≤ X ≤ 10^9 for each `insert` and `remove` query - 1 ≤ K ≤ 100,000 for each `findKth` query - It is guaranteed that insertions and removals are consistent and will not result in removing an element that doesn’t exist. # Example: Input: ``` 10 insert 5 insert 10 insert 3 findRank 5 findKth 2 remove 10 findKth 3 remove 5 findRank 3 findKth 1 ``` Output: ``` 2 5 -1 1 3 ``` # Explanation: 1. After inserting 5, 10, and 3, the set S is {3, 5, 10}. 2. The rank of 5 is 2 because the sorted order is [3, 5, 10]. 3. The 2nd smallest element is 5. 4. After removing 10, the set S is {3, 5}. 5. The set now has only 2 elements, so the 3rd smallest element does not exist, hence -1. 6. After removing 5, the set S is {3}. 7. The rank of 3 is 1 because it is the only element. 8. The 1st smallest element is 3.","solution":"import bisect class OrderedSet: def __init__(self): self.elements = [] def insert(self, x): if x not in self.elements: bisect.insort(self.elements, x) def remove(self, x): if x in self.elements: self.elements.remove(x) def findRank(self, x): pos = bisect.bisect_left(self.elements, x) if pos < len(self.elements) and self.elements[pos] == x: return pos + 1 return -1 def findKth(self, k): if 0 < k <= len(self.elements): return self.elements[k - 1] return -1 def process_queries(queries): ordered_set = OrderedSet() result = [] for query in queries: parts = query.split() command = parts[0] value = int(parts[1]) if command == \'insert\': ordered_set.insert(value) elif command == \'remove\': ordered_set.remove(value) elif command == \'findRank\': result.append(str(ordered_set.findRank(value))) elif command == \'findKth\': result.append(str(ordered_set.findKth(value))) return result"},{"question":"You are tasked with implementing a modified k-means clustering algorithm to automatically classify the topics of a set of documents. Each document is represented as a list of words and you will use a given pre-trained word embedding model to convert words to vectors. To simplify, you will only work with a small subset of documents and a limited vocabulary defined by the embedding model. # Task Write a program that takes as input: 1. An integer `k` representing the number of clusters. 2. An integer `n` representing the number of documents. 3. `n` lines, each containing a space-separated list of words representing a document. 4. A list of `m` pre-trained word embeddings. Each embedding is of the form: `word vector`, where `word` is a string and `vector` is a space-separated list of floats representing the word\'s embedding in some vector space. Your task is to classify the documents into `k` clusters and output the cluster assignment for each document. # Constraints - You can assume that each document will contain at least one word that is present in the embedding model. - All embedding vectors have the same dimension, which is 300. - You can use any similarity metric to compute the distance between document vectors, such as cosine similarity or Euclidean distance. - The final cluster assignment should be stable. # Input ``` k n <document 1> <document 2> ... <document n> <word1> <vector1> <word2> <vector2> ... <wordm> <vectorm> ``` # Output ``` cluster_assignment_1 cluster_assignment_2 ... cluster_assignment_n ``` # Example Input ``` 2 3 apple banana fruit fruit apple dog cat pet apple 0.1 0.2 0.3 ... 0.299 banana 0.4 0.5 0.6 ... 0.398 fruit 0.7 0.8 0.9 ... 0.697 dog 0.2 0.3 0.4 ... 0.299 cat 0.5 0.6 0.7 ... 0.498 pet 0.8 0.9 1.0 ... 0.899 ``` Output ``` 0 0 1 ``` # Notes - In this example, the first two documents are classified into the same cluster because they contain similar words, while the third document is classified into a different cluster. - Make sure to normalize your document vectors appropriately before performing clustering. - Your implementation should be efficient in terms of both time and space complexity, given the constraints. # Clarifications 1. If a word in a document is not found in the word embeddings list, you should ignore that word. 2. You can use the simple arithmetic mean of the words\' vectors to represent the document vector.","solution":"import numpy as np from sklearn.cluster import KMeans def avg_vector(document, embeddings): vectors = [embeddings[word] for word in document if word in embeddings] return np.mean(vectors, axis=0) if vectors else np.zeros(300) def k_means_clustering(k, n, documents, embeddings_list): embeddings = {emb.split()[0]: np.array(list(map(float, emb.split()[1:]))) for emb in embeddings_list} doc_vectors = [avg_vector(doc.split(), embeddings) for doc in documents] kmeans = KMeans(n_clusters=k, random_state=0).fit(doc_vectors) return kmeans.labels_ # Example usage if __name__ == \\"__main__\\": k = 2 n = 3 documents = [ \\"apple banana fruit\\", \\"fruit apple\\", \\"dog cat pet\\" ] embeddings_list = [ \\"apple 0.1 0.2 0.3 ... 0.299\\".split(), \\"banana 0.4 0.5 0.6 ... 0.398\\".split(), \\"fruit 0.7 0.8 0.9 ... 0.697\\".split(), \\"dog 0.2 0.3 0.4 ... 0.299\\".split(), \\"cat 0.5 0.6 0.7 ... 0.498\\".split(), \\"pet 0.8 0.9 1.0 ... 0.899\\".split() ] embeddings_list = [\\" \\".join(embedding[:2] + [\'%.3f\' % (i+1) for i in range(300)]) for embedding in embeddings_list] labels = k_means_clustering(k, n, documents, embeddings_list) print(labels)"},{"question":"A delivery service uses robots to transport packages between different locations. Each robot can carry multiple packages and move between locations represented as nodes on a graph. There are directed edges with non-negative weights indicating the travel time between the nodes. The robots have a list of tasks, corresponding to the packages they need to deliver. Each task consists of a starting node, a destination node, and a delivery deadline (the maximum time by which the package needs to be delivered). Each robot can only carry one package at a time, and upon delivering a package, it returns to its base node to pick up another package. Your task is to determine if a robot can deliver all its assigned packages within the given deadlines. If yes, return \'YES\', otherwise return \'NO\'. -----Input----- The first line contains two integers N and M, representing the number of nodes and the number of directed edges, respectively. The next M lines each contain three integers U, V, and W, indicating there is a directed edge from node U to node V with a travel time of W. The following line contains an integer B, the base node where the robot starts and returns after each delivery. The subsequent line contains an integer K, the number of packages. The next K lines each contain three integers S, D, and T, indicating the starting node, destination node, and delivery deadline for a package. -----Output----- Output \'YES\' if the robot can deliver all packages within their respective deadlines, otherwise output \'NO\'. -----Examples----- Sample Input 1: 5 6 1 2 2 2 3 2 3 4 1 4 5 3 5 1 4 1 3 5 1 3 1 3 8 3 5 9 5 1 15 Sample Output 1: YES Sample Input 2: 5 6 1 2 2 2 3 2 3 4 1 4 5 3 5 1 4 1 3 5 1 3 1 3 7 3 5 8 5 1 10 Sample Output 2: NO","solution":"import heapq def can_deliver_all_packages(N, M, edges, B, K, packages): def dijkstra(graph, start): distances = {node: float(\'infinity\') for node in range(1, N+1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances graph = {i: [] for i in range(1, N+1)} for U, V, W in edges: graph[U].append((V, W)) for S, D, T in packages: distances_from_base = dijkstra(graph, B) distances_from_source = dijkstra(graph, S) if distances_from_base[S] + distances_from_source[D] > T: return \\"NO\\" return \\"YES\\" # Input Parsing def parse_input(input_text): lines = input_text.strip().split(\'n\') N, M = map(int, lines[0].split()) edges = [] for i in range(1, M+1): U, V, W = map(int, lines[i].split()) edges.append((U, V, W)) B = int(lines[M+1]) K = int(lines[M+2]) packages = [] for i in range(M+3, M+3+K): S, D, T = map(int, lines[i].split()) packages.append((S, D, T)) return N, M, edges, B, K, packages def main(input_text): N, M, edges, B, K, packages = parse_input(input_text) return can_deliver_all_packages(N, M, edges, B, K, packages)"},{"question":"Given a binary tree, each node contains an integer. Your task is to find the sum of the values of nodes that have an odd level depth, and the sum of the values of nodes that have an even level depth. The root of the tree is at depth 1 (which is odd). Write a function that takes in the root node of the binary tree and returns the difference between the sum of the values of nodes at odd levels and the sum of the values of nodes at even levels. Input - You are given the root node of a binary tree. Each node contains an integer value. Output - Return a single integer that represents the difference between the sum of the values of nodes at odd levels and the sum of the values of nodes at even levels. Function Signature: ```python def level_difference(root: TreeNode) -> int: # your code here ``` Examples: Input ``` 4 / 2 5 / 1 3 8 ``` Output 3 Explanation: Level 1: sum = 4 (odd level) Level 2: sum = 7 (2 + 5) (even level) Level 3: sum = 12 (1 + 3 + 8) (odd level) Difference = (4 + 12) - 7 = 16 - 7 = 9 Input ``` 1 / 7 0 / 7 -8 ``` Output 7 Explanation: Level 1: sum = 1 (odd level) Level 2: sum = 7 (7 + 0) (even level) Level 3: sum = -1 (7 - 8) (odd level) Difference = (1 - 1) - 7 = 0 - 7 = -7","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_difference(root: TreeNode) -> int: if not root: return 0 from collections import deque # Initialize deque with root node and its level (1) queue = deque([(root, 1)]) # Sums for odd and even levels odd_sum = 0 even_sum = 0 while queue: node, level = queue.popleft() # Add to respective sums based on level if level % 2 == 1: odd_sum += node.val else: even_sum += node.val # Add child nodes to the queue with incremented level if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return odd_sum - even_sum"},{"question":"**F: Optimal Network Synchronization / Minimum Spanning Tree** **story** Miyuki Shiba is a network engineer working for the Yotsuba Corporation. Today, her task is to help set up a new high-speed data network in one of the company’s key branches. The task involves connecting a set of computers with cables. However, the cost of connecting two computers varies due to factors like distance, obstacles, and cable quality. Yotsuba Corporation wants to minimize the total cost of setting up this network while ensuring that every computer is connected directly or indirectly. Miyuki decides to use the algorithmic knowledge she learned in her data structures and algorithms course. She plans to apply the Minimum Spanning Tree (MST) concept to minimize the total connection cost. Your task is to help Miyuki by writing a program to find this minimum cost. **problem** Given N computers and M possible connections between them, each connection has a cost associated with it. Your task is to find the minimum cost to connect all the computers directly or indirectly. Each computer is represented by an integer from 1 to N. **Input format** The input consists of the following format: ``` N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` - The first line contains two integers N (2 ≤ N ≤ 10000) representing the number of computers and M (1 ≤ M ≤ 100000) representing the number of potential connections. - The next M lines each contain three integers u_i, v_i, and w_i (1 ≤ u_i, v_i ≤ N, 1 ≤ w_i ≤ 1000), representing the two computers connected by the i-th cable and the cost of the cable. **Output format** Output the minimum total cost to connect all the computers. If it\'s impossible to connect all the computers, output -1. **Input example 1** ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` **Output example 1** ``` 6 ``` **Input example 2** ``` 3 1 1 2 1 ``` **Output example 2** ``` -1 ``` **Explanation** In input example 1, the optimal connections are: - Connect computer 1 to computer 2 with a cost of 1. - Connect computer 2 to computer 3 with a cost of 2. - Connect computer 3 to computer 4 with a cost of 3. The total cost is 1 + 2 + 3 = 6. In input example 2, it\'s impossible to connect all computers since there is only one possible connection which leaves computer 3 isolated.","solution":"import heapq def find_minimum_cost(N, M, connections): parent = list(range(N + 1)) rank = [0] * (N + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False edges = [] for u, v, w in connections: edges.append((w, u, v)) heapq.heapify(edges) mst_cost = 0 edges_used = 0 while edges and edges_used < N - 1: w, u, v = heapq.heappop(edges) if union(u, v): mst_cost += w edges_used += 1 if edges_used == N - 1: return mst_cost else: return -1"},{"question":"Given a string S consisting of only \'a\' and \'b\' characters, determine the minimum number of characters that need to be changed to make the string a palindrome. ------ Input Format ------ - The first line will contain an integer T - the number of test cases. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, output the minimum number of characters that need to be changed to make the string a palindrome. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 100 ----- Sample Input 1 ------ 3 ab abb abba ----- Sample Output 1 ------ 1 1 0 ----- Explanation 1 ------ Test case 1: We have S = \\"ab\\". Changing either the first or the second character to \'a\' or \'b\' respectively makes the string a palindrome with only one change. Test case 2: We have S = \\"abb\\". Changing the first character to \'b\' or the last character to \'a\' makes the string \\"bbb\\" or \\"aba\\", both of which are palindromes with only one change. Test case 3: We have S = \\"abba\\". The string is already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of characters that need to be changed to make the string a palindrome. count = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_changes_to_palindrome(s)) return results"},{"question":"You are given a list of strings `words` and a string `prefix`. Your task is to return all strings within `words` that start with the given `prefix`. Write a function: ```python def find_words_with_prefix(words, prefix): # your code here ``` # Example: ```python Input: words = [\\"apple\\", \\"apricot\\", \\"banana\\", \\"apartment\\"], prefix = \\"ap\\" Output: [\\"apple\\", \\"apricot\\", \\"apartment\\"] Input: words = [\\"car\\", \\"carbon\\", \\"cat\\", \\"dog\\"], prefix = \\"ca\\" Output: [\\"car\\", \\"carbon\\", \\"cat\\"] ``` # Constraints: - The input list `words` will have a length between 1 and 100. - Each `word` in the list will have a length between 1 and 20. - The input string `prefix` will have a length between 1 and 10.","solution":"def find_words_with_prefix(words, prefix): Returns all words from the list `words` that start with the given `prefix`. return [word for word in words if word.startswith(prefix)]"},{"question":"Consider a 2D grid of size m x n that represents a maze filled with obstacles. The goal is to start from the top-left corner of the grid (i.e., at position (0, 0)) and find the minimum distance required to reach the bottom-right corner (i.e., at position (m-1, n-1)). You can only move up, down, left, or right, and you cannot pass through the cells that contain obstacles. If it is not possible to reach the bottom-right corner, return -1. Each cell in the grid has a value of either 0 or 1 where: - 0 represents an open cell you can travel through. - 1 represents an obstacle that you cannot travel through. Example 1: Input: grid = [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0]] Output: 9 Explanation: The minimum distance path is highlighted by the cells at positions (0,0)->(1,0)->(2,0)->(2,1)->(2,2)->(2,3)->(2,4)->(3,4)->(4,4). Note: - 1 <= m, n <= 100 - The grid does not change during execution of the function. - If the top-left or bottom-right cell contains a 1, it means there is no valid path, hence return -1 in such cases.","solution":"from collections import deque def min_distance_in_maze(grid): Returns the minimum distance required to reach the bottom-right corner of the grid starting from the top-left corner. If it is not possible to reach the bottom-right corner, returns -1. if not grid or not grid[0] or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell of the grid is initially colored either black or white. You need to partition the grid into the smallest number of non-overlapping rectangular subgrids such that all cells in each subgrid are the same color. Write a program that determines the minimum number of rectangular subgrids needed to partition the entire grid based on the initial coloring. -----Input----- The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of \'B\' and \'W\' characters, representing black and white cells, respectively. -----Output----- Print a single integer, the minimum number of rectangular subgrids needed. -----Examples----- Input 3 3 BBB WWW BBB Output 3 Input 4 4 BWBW WBWB BWBW WBWB Output 16 Input 2 2 BB BB Output 1 -----Note----- In the first example, the grid can be partitioned into three subgrids: the top 3x3 grid of \'B\'s, the middle 1x3 grid of \'W\'s, and the bottom 3x3 grid of \'B\'s. In the second example, each cell needs to be its own subgrid because no two adjacent cells are the same color. In the third example, the entire grid can be a single subgrid of \'B\'s.","solution":"def min_rectangular_subgrids(n, m, grid): Determine the minimum number of rectangular subgrids needed so that each subgrid has cells of the same color. Args: n: int - number of rows in the grid. m: int - number of columns in the grid. grid: list of strings - the grid of cells, where each cell is \'B\' or \'W\'. Returns: int - the minimum number of rectangular subgrids needed. def dfs(i, j, color): stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == color and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) visited = [[False]*m for _ in range(n)] subgrids_count = 0 for i in range(n): for j in range(m): if not visited[i][j]: visited[i][j] = True subgrids_count += 1 dfs(i, j, grid[i][j]) return subgrids_count"},{"question":"A company is hosting a coding competition where participants are asked to solve a variety of challenges. One of the challenges is to analyze the results of a rock-paper-scissors tournament. In this tournament, each match is played between two players. Each match is represented by a string \\"A:B\\", where \'A\' and \'B\' can be \'R\', \'P\', or \'S\', corresponding to Rock, Paper, and Scissors, respectively. \'R\' beats \'S\', \'S\' beats \'P\', and \'P\' beats \'R\'. If both players use the same sign, the match is a draw. You are asked to write a function that takes a list of these match results and returns a dictionary summarizing the number of wins, losses, and draws for the first player in the list. The dictionary should have keys \'wins\', \'losses\', and \'draws\'. For example: Input: [\\"R:P\\", \\"S:S\\", \\"P:R\\"] Output: {\\"wins\\": 1, \\"losses\\": 1, \\"draws\\": 1}","solution":"def analyze_tournament(matches): Analyzes the results of a rock-paper-scissors tournament. Args: matches (list): A list of strings representing the match results in the format \\"A:B\\" where A and B can be \'R\', \'P\', or \'S\'. Returns: dict: A dictionary summarizing the number of wins, losses, and draws for the first player. # Initialize the result dictionary result = {\'wins\': 0, \'losses\': 0, \'draws\': 0} # Define the win conditions win_conditions = {\'R\': \'S\', \'S\': \'P\', \'P\': \'R\'} # Iterate over each match result for match in matches: player1, player2 = match.split(\':\') # Determine the result for player1 if player1 == player2: result[\'draws\'] += 1 elif win_conditions[player1] == player2: result[\'wins\'] += 1 else: result[\'losses\'] += 1 return result"},{"question":"Find the Longest Increasing Subsequence In this task, you are required to write a program that finds the longest increasing subsequence in a given sequence of integers. An increasing subsequence is a sequence of numbers that appear in the same order as the original sequence but not necessarily consecutively, and each number is greater than the preceding number. # Input The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 10,000), the length of the sequence. The second line contains ( n ) integers ( a_1, a_2, ..., a_n ) (-10,000 ≤ ( a_i ) ≤ 10,000), the elements of the sequence. # Output Print the length of the longest increasing subsequence. Example # Input ``` 8 10 9 2 5 3 7 101 18 ``` # Output ``` 4 ``` # Explanation In the given example, the longest increasing subsequence is [2, 3, 7, 101], which has a length of 4. Note: There may be other subsequences that also qualify as the longest increasing subsequence, but any valid output is accepted as long as it has the maximum possible length.","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in the given list of numbers. if not nums: return 0 n = len(nums) dp = [1] * n # dp[i] will store the length of the longest increasing subsequence ending at i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given an array representing the heights of buildings in a row. You are allowed to increase the height of any building by adding extra blocks on top of it. You want to add blocks in a way that each building height is at least as high as the building to its left, achieving a monotonic non-decreasing sequence. The goal is to determine the minimum number of blocks required to achieve this. Input The first line contains an integer N (1 ≤ N ≤ 10^5), the number of buildings. The second line contains N integers h1, h2, ..., hN (1 ≤ hi ≤ 10^9), representing the initial heights of the buildings. Output Print the minimum number of blocks needed to achieve the desired sequence. Examples Input 5 1 2 3 2 1 Output 3 Input 4 4 1 3 2 Output 6 Note In the first example, you can add 1 block to the fourth building and 2 blocks to the fifth building, making the heights [1, 2, 3, 3, 3], with a total of 3 blocks added. In the second example, you need to add 3 blocks to the second building and 3 blocks to the fourth building, resulting in heights [4, 4, 4, 4], with a total of 6 blocks added.","solution":"def min_blocks_to_monotonic(heights): Determine the minimum number of blocks required to make the heights of buildings in a non-decreasing order. Args: heights (list of int): List of integers representing heights of the buildings. Returns: int: Minimum number of blocks needed. n = len(heights) blocks_needed = 0 for i in range(1, n): if heights[i] < heights[i - 1]: blocks_needed += heights[i - 1] - heights[i] heights[i] = heights[i - 1] return blocks_needed"},{"question":"Write a function that takes a string input representing a sentence and returns the number of words in the sentence. For this task, a word is defined as a sequence of characters separated by spaces. Ensure that punctuation is considered part of the word it\'s attached to. If the sentence is empty, the function should return 0. Example: Input: \\"Hello, world! Welcome to coding.\\" Output: 5 Input: \\" \\" Output: 0","solution":"def count_words(sentence): Returns the number of words in the given sentence. A word is defined as a sequence of characters separated by spaces. # Split the sentence by spaces words = sentence.split() # Return the length of the list of words return len(words)"},{"question":"A popular restaurant has launched a loyalty program to reward their frequent customers. The program works as follows: each customer receives one point per dollar spent, and for every 100 points accumulated, they get a voucher worth 10. Each customer can redeem their points for vouchers at any time. Your task is to determine the total value of the vouchers distributed after processing a series of transactions. -----Input----- The input begins with an integer 1 leq n leq 10000, the number of transactions. Each of the following n lines consists of a string and an integer: the customer\'s name (a single word consisting of uppercase and lowercase letters, up to 50 characters) and the transaction amount in dollars 1 leq amount leq 10000. A customer may appear multiple times in the input, representing multiple transactions. -----Output----- Output a single line with the total value of the vouchers distributed. -----Examples----- Sample Input: 5 Alice 100 Bob 50 Alice 150 Alice 70 Bob 120 Sample Output: 40","solution":"def total_voucher_value(n, transactions): customers = {} for customer, amount in transactions: if customer not in customers: customers[customer] = 0 customers[customer] += amount total_vouchers = 0 for points in customers.values(): total_vouchers += (points // 100) * 10 return total_vouchers"},{"question":"Ravi loves to play video games, especially those that involve fighting with monsters in different arenas. As a programming enthusiast, he is particularly fascinated by how the game calculates the damage outputs based on various parameters. In the game, each weapon has a base damage and each monster has a certain level. The actual damage dealt to a monster is calculated using the following formula: damage = base_damage * (1 + level * 0.05) Where: - `base_damage` is the inherent damage value of the weapon. - `level` is the level of the monster. Your task is to help Ravi by writing a function that determines the actual damage dealt to a monster of a given level using a weapon with a specified base damage. Input The first line of the input contains an integer T indicating the number of test cases. For each test case, there are two space-separated integers on a new line: `base_damage` and `level`. Output For each test case, output the actual damage dealt rounded to the nearest integer. Example: Input: 3 100 5 50 10 200 3 Output: 125 75 230 Explanation: In the first test case, the damage is calculated as 100 * (1 + 5 * 0.05) = 100 * 1.25 = 125. In the second test case, the damage is calculated as 50 * (1 + 10 * 0.05) = 50 * 1.5 = 75. In the third test case, the damage is calculated as 200 * (1 + 3 * 0.05) = 200 * 1.15 = 230.","solution":"def calculate_damage(base_damage, level): Calculates the actual damage dealt to a monster of a given level using a weapon with a specified base damage. The formula used is: damage = base_damage * (1 + level * 0.05) :param base_damage: int, the inherent damage value of the weapon :param level: int, the level of the monster :return: int, the actual damage damage = base_damage * (1 + level * 0.05) return round(damage) def process_test_cases(test_cases): results = [] for base_damage, level in test_cases: results.append(calculate_damage(base_damage, level)) return results"},{"question":"Alice likes reading books. She has a big collection of books, some of which are reference books and others are novels. She wants to organize her book collection based on their type and the number of pages each book has. Alice prefers her books sorted first by type in alphabetical order (i.e., \'Novel\' before \'Reference\') and then by the number of pages in ascending order. You are given a list of books where each book is represented by a tuple (title, type, pages). Your task is to sort the books based on Alice\'s preference. Write a function `organize_books(books)` that takes a list of tuples `books`, where each tuple contains: - title: a string representing the book\'s title, - type: a string which is either \'Novel\' or \'Reference\', - pages: an integer representing the number of pages in the book. The function should return a list of tuples representing the sorted books. # Input - A list `books` containing up to 10^5 tuples. Each tuple (title, type, pages) consists of: - title: a string (1 ≤ |title| ≤ 100) - type: a string \'Novel\' or \'Reference\' - pages: an integer (1 ≤ pages ≤ 10^4) # Output - A list of tuples representing the sorted books based on the given criteria. # Example ```python books = [(\\"Mathematics\\", \\"Reference\\", 500), (\\"Harry Potter\\", \\"Novel\\", 300), (\\"Physics\\", \\"Reference\\", 200), (\\"The Great Gatsby\\", \\"Novel\\", 180)] organize_books(books) ``` # Output ```python [(\'Harry Potter\', \'Novel\', 300), (\'The Great Gatsby\', \'Novel\', 180), (\'Physics\', \'Reference\', 200), (\'Mathematics\', \'Reference\', 500)] ```","solution":"def organize_books(books): Sorts the books first by type in alphabetical order (\'Novel\' before \'Reference\'), and then by the number of pages in ascending order. Args: books (list of tuples): A list where each tuple contains (title, type, pages). Returns: list: A sorted list of tuples representing the books. return sorted(books, key=lambda x: (x[1], x[2]))"},{"question":"You are given a grid with dimensions N rows and M columns, and at each intersection point of rows and columns, there is a lamp. Each lamp can either be On (1) or Off (0). You can perform the following operation any number of times: - Toggle the state of all lamps in a selected row or column (i.e., turn all On lamps to Off and all Off lamps to On). Your task is to determine the minimum number of operations required to make all the lamps in the grid turn off. ------ Input Format ------ - The first line of input contains two integers N and M, denoting the number of rows and columns in the grid. - Each of the next N lines contains M integers (either 0 or 1), representing the initial state of each lamp in the grid. ------ Output Format ------ Print a single integer representing the minimum number of operations required to turn off all the lamps. ------ Constraints ------ 1 ≤ N, M ≤ 50 Each lamp is either 0 (Off) or 1 (On). ------ Sample Input 1 ------ 3 3 1 0 1 0 1 0 1 0 1 ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ By toggling the state of the second row, the entire grid becomes zero. ------ Sample Input 2 ------ 2 2 1 1 1 1 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ By toggling either the first row or the second row, all lamps will turn off. ------ Sample Input 3 ------ 4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ------ Sample Output 3 ------ 0 ------ Explanation 3 ------ All lamps are already off, so no operations are needed.","solution":"def min_operations_to_turn_off_all_lamps(n, m, grid): Returns the minimum number of operations required to turn off all lamps in the grid. :param n: Number of rows. :param m: Number of columns. :param grid: 2D list representing the initial state of the grid. :return: Minimum number of operations. for row in grid: if all(lamp == 0 for lamp in row): return 0 return 1"},{"question":"Clara is passionate about combinatorics and number theory and recently started delving into the fascinating world of subsequences and their properties. She is particularly interested in the number of \\"good\\" subsequences in a given array. A \\"good\\" subsequence, for the purposes of her study, is defined as a subsequence that has a sum which is divisible by a given positive integer d. Given an array of integers, Clara wants to determine the number of \\"good\\" subsequences. Formally, given an array boldsymbol{a} = [a_1, a_2, ldots, a_n] and an integer d, calculate the number of subsequences (including the empty subsequence) whose sum is divisible by d. Input Format The first line contains an integer t, denoting the number of test cases. Each of the t subsequent sets of lines contains: - An integer n (the length of the array). - An integer d. - An array of n space-separated integers. Constraints For 20% of the maximum score: - 1 leq t leq 50 - 1 leq n leq 10 - 1 leq d leq 10 - 1 leq a_i leq 10 For 50% of the maximum score: - 1 leq t leq 50 - 1 leq n leq 100 - 1 leq d leq 50 - 1 leq a_i leq 100 For 70% of the maximum score: - 1 leq t leq 50 - 1 leq n leq 1000 - 1 leq d leq 1000 - 1 leq a_i leq 1000 For textbf{100%} of the maximum score: - 1 leq t leq 50 - 1 leq n leq 100000 - 1 leq d leq 1000000 - 1 leq a_i leq 1000000 Output Format For each test case, print a single integer on a new line denoting the number of \\"good\\" subsequences. Sample Input 2 5 5 1 2 3 4 5 3 3 1 2 3 Sample Output 8 4 Explanation Test case 1: The array is [1, 2, 3, 4, 5], and d = 5. The subsequences whose sums are divisible by 5 are [5], [1, 4], [2, 3], [1, 2, 3, 4], [1, 2, 4, 5], [1, 3, 5], [2, 3, 5], and the empty subsequence ([] is considered \\"good\\"). Thus, there are 8 \\"good\\" subsequences. Test case 2: The array is [1, 2, 3], and d = 3. The subsequences whose sums are divisible by 3 are [3], [1, 2], [1, 2, 3], and the empty subsequence ([]). Thus, there are 4 \\"good\\" subsequences.","solution":"def count_good_subsequences(arr, d): Counts the number of good subsequences in `arr` that have a sum divisible by `d`. n = len(arr) dp = [0] * d dp[0] = 1 # There\'s one way to have a sum of 0: the empty subsequence for num in arr: new_dp = dp[:] for k in range(d): new_dp[(k + num) % d] += dp[k] dp = new_dp return dp[0] def process_test_cases(test_cases): results = [] for n, d, arr in test_cases: results.append(count_good_subsequences(arr, d)) return results # Function to read input and produce output def main(): t = int(input()) test_cases = [] for _ in range(t): n = int(input()) d = int(input()) arr = list(map(int, input().split())) test_cases.append((n, d, arr)) results = process_test_cases(test_cases) for result in results: print(result) # Uncomment the following line if running locally to read input from the user # main()"},{"question":"You are given a list of integers representing the number of items of different types in a store. Your task is to determine the median number of items among these types. The median is the middle number in a sorted, ascending or descending, list of numbers, and can be more than one number for an even amount of numbers (for simplicity, choose the smaller number in this case). Implement a function to find and print the median. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of different item types in the store. The second line contains n space-separated integers — the number of items for each type (1 ≤ item ≤ 100). Output Print a single integer, the median number of items. Examples Input 5 10 3 4 7 6 Output 6 Input 4 20 15 7 12 Output 12 Note: In the second sample, the list after sorting is 7, 12, 15, 20. The two middle numbers are 12 and 15. The smaller number is 12, so the output is 12.","solution":"def find_median(n, items): Returns the median number of items among the different types in the store. # Sort the items first items.sort() mid_index = n // 2 # If n is odd, return the middle element if n % 2 == 1: return items[mid_index] else: return items[mid_index - 1]"},{"question":"You are given a string consisting of lowercase English letters and an integer k. Your task is to preprocess the string and determine the lexicographically smallest substring of length k that can be formed by deleting characters from the string (but without reordering the remaining characters). Input The first line of the input contains a single integer k (1 ≤ k ≤ 100 000). The second line contains a string s of length n (1 ≤ n ≤ 100 000), consisting of only lowercase English letters. Output Print a single string — the lexicographically smallest substring of length k. Examples Input 3 abcde Output abc Input 3 bacabc Output aab Input 4 efghijklmnopqrstuvwxyz Output efgh Note In the first example, you can directly take the first three characters to form \\"abc\\", which is the smallest lexicographically substring of length 3. In the second example, by removing certain characters without reordering, \\"aab\\" is the smallest lexicographically substring of length 3. In the third example, \\"efgh\\" forms the smallest lexicographically substring of length 4 by taking the first four characters.","solution":"def lexicographically_smallest_substring(s, k): Returns the lexicographically smallest substring of length k that can be formed by deleting characters from the string s but without reordering the remaining characters. :param s: input string consisting of lowercase English letters :param k: length of the desired substring :return: lexicographically smallest substring of length k n = len(s) result = [] to_remove = n - k for i, char in enumerate(s): while to_remove > 0 and result and result[-1] > char: result.pop() to_remove -= 1 result.append(char) return \'\'.join(result[:k])"},{"question":"Alex has a collection of N gems, where each gem has a certain weight and each weighs between 1 and M grams. Alex wants to distribute these gems into K groups such that each group has an equal weight. Determine if it\'s possible to partition the gems into exactly K groups with equal weight. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of multiple lines: - The first line contains two space-separated integers N and K: the number of gems and the number of groups, respectively. - The second line contains N space-separated integers W_{1}, W_{2}, ldots, W_{N}, where W_{i} represents the weight of the i-th gem. ------ Output Format ------ For each test case, print \\"YES\\" if it\'s possible to partition the gems into exactly K groups with equal weight. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ K ≤ N ≤ 100 1 ≤ W_{i} ≤ M ≤ 100 - Sum of N over all test cases does not exceed 10^{5}. ----- Sample Input 1 ------ 3 6 3 3 3 3 3 3 3 5 2 1 2 3 4 5 4 2 2 1 4 1 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: The gems can be divided into three groups: [3, 3], [3, 3], and [3, 3]. Each group has an equal weight of 6. Test case 2: There is no way to partition the gems into two groups with equal weight. Test case 3: The gems can be divided into two groups: [1, 4] and [2, 1]. Each group has an equal weight of 5.","solution":"def can_partition_into_equal_groups(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] W = test_cases[i][1] total_weight = sum(W) if total_weight % K != 0: results.append(\\"NO\\") continue target_weight = total_weight // K W.sort(reverse=True) buckets = [0] * K def can_partition(index): if index == N: return all(bucket == target_weight for bucket in buckets) for i in range(K): if buckets[i] + W[index] <= target_weight: buckets[i] += W[index] if can_partition(index + 1): return True buckets[i] -= W[index] if buckets[i] == 0: break return False if can_partition(0): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A famous railway network consists of n stations connected by bidirectional tracks. Each track connects two different stations and is associated with a specific length. The government wants to determine the minimum cost to connect all the stations such that every station can be reached from any other station. Additionally, due to budget constraints, some of the tracks may not be available. You have been given a list of available tracks and their lengths. For every possible configuration of tracks being unavailable, determine the minimum cost to connect all stations using any subset of the available tracks. If it is impossible to connect all the stations with the remaining tracks, the output should reflect this. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, n - 1 ≤ m ≤ 10^5), the number of stations and the number of available tracks, respectively. Each of the next m lines contains three integers x_i, y_i, and l_i (1 ≤ x_i, y_i ≤ n, x_i ≠ y_i, 1 ≤ l_i ≤ 10^6), representing a bidirectional track of length l_i connecting stations x_i and y_i. Output Print one integer, representing the minimum cost to connect all stations for each possible configuration of unavailable tracks. If it\'s not possible to connect all stations, print -1. Examples Input 6 9 1 2 3 2 3 2 3 4 1 4 5 4 5 6 5 1 3 6 2 4 7 3 5 8 4 6 9 Output 12 Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 7 Note 1. In the first example, initially, the tracks can fully connect all stations, so the minimum cost would be the sum of the least costly paths. 2. In the second example, the minimum cost to connect all four stations is achieved by summing the tracks with lengths 1, 2, and 4.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 num_edges = 0 for u, v, weight in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_cost += weight num_edges += 1 if num_edges == n - 1: break return mst_cost if num_edges == n - 1 else -1 def minimum_cost_to_connect_all_stations(n, tracks): edges = [(x - 1, y - 1, l) for x, y, l in tracks] return kruskal(n, edges)"},{"question":"Caisa is back with another challenge! You are given an array of n integers. You should perform q operations. Each operation is one of the following: * Format of the operation is \\"1 l r\\". Determine the number of distinct elements in the subarray from index l to index r (inclusive). * Format of the operation is \\"2 idx val\\". You must update the element at index idx to val. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100000), representing the array elements. Each of the next q lines contains an operation as described above. For each operation the following conditions hold: 1 ≤ l, r ≤ n, 1 ≤ idx ≤ n and 1 ≤ val ≤ 100000. Output For each operation of the first type, output the result of the query. Examples Input 5 5 1 2 2 3 4 1 1 3 1 2 4 2 2 3 1 1 3 1 1 5 Output 2 2 1 4 Note In the first query, the subarray is [1, 2, 2]. There are 2 distinct elements: 1 and 2. In the second query, the subarray is [2, 2, 3]. There are 2 distinct elements: 2 and 3. In the third operation, the array becomes [1, 3, 2, 3, 4]. In the fourth query after the update, the subarray is [1, 3, 2]. There are 3 distinct elements: 1, 2, and 3. In the fifth query, the subarray is [1, 3, 2, 3, 4]. There are 4 distinct elements: 1, 2, 3, and 4.","solution":"def process_queries(n, q, array, queries): result = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] - 1 subarray = array[l:r+1] distinct_elements = len(set(subarray)) result.append(distinct_elements) elif query[0] == 2: idx, val = query[1] - 1, query[2] array[idx] = val return result # Example usage n = 5 q = 5 array = [1, 2, 2, 3, 4] queries = [ (1, 1, 3), (1, 2, 4), (2, 2, 3), (1, 1, 3), (1, 1, 5) ] print(process_queries(n, q, array, queries)) # Expected output: [2, 2, 3, 4]"},{"question":"Garima is an avid gardener and loves to plant different types of flowers in her garden. She has a specific arrangement she wants to achieve, where she arranges the flower beds in a grid. However, she realized she needed to quickly determine the number of ways to arrange n unique types of flowers in her garden consisting of m rows and k columns such that each row and each column contains exactly one type of flower. Your task is to help Garima by creating a program that calculates the number of such possible arrangements. Input: The first line contains an integer t, the number of test cases. Each test case contains three integers n, m, and k. Output: For each test case, print the number of ways to arrange the flowers in the specified grid modulo 10^9 + 7. Constraints: 1 ≤ t ≤ 10 1 ≤ n, m, k ≤ 20 SAMPLE INPUT: 2 3 3 3 4 4 4 SAMPLE OUTPUT: 6 24 Explanation: In the first test case, with 3 flowers, and a grid of 3x3, there are 6 ways to arrange the flowers such that each type of flower appears exactly once in each row and each column. In the second test case, there are 24 ways to arrange 4 flowers in a 4x4 grid. Note: This problem requires the understanding of permutations and combinations to determine unique arrangements.","solution":"import math def count_flower_arrangements(t, test_cases): MOD = 10**9 + 7 results = [] for case in test_cases: n, m, k = case if n != m or m != k: results.append(0) else: results.append(math.factorial(n) % MOD) return results # Example Use t = 2 test_cases = [(3, 3, 3), (4, 4, 4)] print(count_flower_arrangements(t, test_cases))"},{"question":"You are given two strings s and t, both consisting of lowercase English letters and having the same length. You need to determine if it is possible to convert s into t by applying the following operation exactly once: choose two different indices i and j (1 leq i, j leq text{len}(s)) and swap the characters s[i] and s[j]. -----Input----- - The first line contains a single integer n, the length of strings s and t. - The second line contains the string s. - The third line contains the string t. -----Output----- For each testcase, print `YES` if it is possible to convert s into t by one swap operation. Otherwise, print `NO`. -----Constraints----- - 2 leq n leq 1000 - s and t both consist of lowercase English letters. -----Example Input----- 4 abcd abdc -----Example Output----- YES","solution":"def can_convert_with_one_swap(s, t): Determines if string s can be converted into string t with exactly one swap. Args: s (str): The original string. t (str): The target string. Returns: str: \'YES\' if s can be converted to t by one swap, \'NO\' otherwise. if s == t: return \\"YES\\" # Find the positions where s and t differ diff = [] for i in range(len(s)): if s[i] != t[i]: diff.append(i) # If there\'s exactly two positions where they differ, check if swapping makes them equal if len(diff) == 2: i, j = diff s = list(s) s[i], s[j] = s[j], s[i] if \'\'.join(s) == t: return \\"YES\\" return \\"NO\\""},{"question":"A group of hikers is planning to trek through a square terrain of size N×N. The terrain consists of square cells, each having a certain elevation value. The group wants to find a path that starts from any cell in the leftmost column and ends at any cell in the rightmost column. They can move from one cell to another if the cells are adjacent vertically, horizontally, or diagonally (sharing a common side or corner). The goal is to find the path that minimizes the maximum elevation encountered along the way. You need to write a program that, given the elevations of each cell in the terrain, determines the minimum possible value of the maximum elevation encountered along the best path from the leftmost to the rightmost column. Input The first line contains an integer N (2 ≤ N ≤ 100), the size of the terrain. The next N lines each contain N integers, denoting the elevations of the cells. Each elevation is an integer between 1 and 1000. Output Print a single integer, the minimum possible value of the maximum elevation encountered along the best path from the leftmost to the rightmost column. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 3 Input 4 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 Output 1 Input 5 5 4 3 2 1 6 5 4 3 2 7 6 5 4 3 8 7 6 5 4 9 8 7 6 5 Output 5","solution":"import heapq def min_max_elevation_path(N, elevations): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def valid(x, y): return 0 <= x < N and 0 <= y < N heap = [(elevations[row][0], row, 0) for row in range(N)] max_elevation = max(elevations[row][0] for row in range(N)) min_max_elevations = [[float(\'inf\')] * N for _ in range(N)] for row in range(N): min_max_elevations[row][0] = elevations[row][0] heapq.heapify(heap) while heap: curr_elevation, x, y = heapq.heappop(heap) if y == N - 1: max_elevation = min(max_elevation, curr_elevation) break for dx, dy in directions: nx, ny = x + dx, y + dy if valid(nx, ny): next_elevation = elevations[nx][ny] max_next_elevation = max(curr_elevation, next_elevation) if max_next_elevation < min_max_elevations[nx][ny]: min_max_elevations[nx][ny] = max_next_elevation heapq.heappush(heap, (max_next_elevation, nx, ny)) return max_elevation # Example usage: # N = 3 # elevations = [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # print(min_max_elevation_path(N, elevations)) # Output: 3"},{"question":"A scientist is conducting an experiment with bacterial colonies. He starts with x colonies, and each colony either multiplies by a factor y or dies off after each time interval, where either event is equally likely. The scientist wants to determine the expected number of colonies that remain after n time intervals. Write a function that calculates this expected number of remaining colonies. -----Input----- The input consists of three integers x, y, and n (1 ≤ x ≤ 10^5, 1 ≤ y ≤ 100, 0 ≤ n ≤ 100) — the initial number of colonies, the multiplication factor, and the number of time intervals respectively. -----Output----- Print the expected number of remaining colonies as a floating-point number in one line. -----Examples----- Input 10 2 0 Output 10.0 Input 10 2 1 Output 10.0 Input 5 2 2 Output 5.0 -----Note----- In the first sample test, since n = 0, no time intervals have passed, the number of colonies remains 10, which is the expected number. In the second sample test, with 10 colonies and one time interval, each colony has a 50% chance of multiplying and a 50% chance of dying. Therefore, the expected number of colonies is (10 * y * 0.5) + (10 * 0 * 0.5) = 10 * 1 = 10. In the third sample test, initially, there are 5 colonies. After one interval, each colony has a 50% chance of multiplying (creating y * x = 2 * 5 = 10 colonies) and a 50% chance of dying (0 colonies). Hence, E1 = (0.5 * 10) + (0.5 * 0) = 5 colonies. After the second interval, the same logic applies, keeping E2 = (0.5 * 10) + (0.5 * 0) = 5 colonies as the expected value. Hence, irrespective of the intervals, the expected number remains 5.","solution":"def expected_colonies(x, y, n): Calculates the expected number of remaining colonies after n intervals. if n == 0: return float(x) # Probability of each colony multiplying or dying off is 0.5 each # For every time interval, the expected number of colonies remains the same # as (0.5 * y * x) + (0.5 * 0) = 0.5 * y * x expected = x # Initial colonies for _ in range(n): expected = (expected * y * 0.5) # Expected value remain same in each interval return expected"},{"question":"In a distant galaxy, a unique form of celestial currency known as \\"Star Coins\\" is used. The conversion rate between Star Coins and Galactic Credits is dynamically based on a specific algorithm. To trade Star Coins (S) for Galactic Credits (G), a conversion rate (R) is applied such that: G = (S * 2) + R However, due to an unstable singularity near the galaxy\'s core, the conversion rate fluctuates periodically based on the time of the day (T). The fluctuation follows these rules: 1. Morning (T = 1 to 6 hours): R = 3 2. Afternoon (T = 7 to 12 hours): R = 5 3. Evening (T = 13 to 18 hours): R = 7 4. Night (T = 19 to 24 hours): R = 11 Given the number of Star Coins S and the time T at which the conversion occurs, calculate the number of Galactic Credits G that will be received. ------ Input Format ------ - The first line contains an integer P, the number of test cases. - Each test case is represented by a single line containing two space-separated integers S and T, representing the number of Star Coins and the time of the conversion respectively. ------ Output Format ------ For each test case, output in a single line the calculated Galactic Credits G. ------ Constraints ------ 1 ≤ P ≤ 2000 1 ≤ S ≤ 100 1 ≤ T ≤ 24 ----- Sample Input 1 ------ 4 10 5 20 8 15 15 7 23 ----- Sample Output 1 ------ 23 45 37 25 ----- Explanation 1 ------ Test Case 1: During the morning hours (T=5), the conversion rate R is 3. So, G = (10 * 2) + 3 = 23. Test Case 2: In the afternoon (T=8), the conversion rate R is 5. Thus, G = (20 * 2) + 5 = 45. Test Case 3: In the evening (T=15), the conversion rate R is 7. Thus, G = (15 * 2) + 7 = 37. Test Case 4: At night (T=23), the conversion rate R is 11. Thus, G = (7 * 2) + 11 = 25.","solution":"def calculate_galactic_credits(S, T): Calculates the number of Galactic Credits (G) based on the number of Star Coins (S) and the time (T) of conversion. Args: S (int): Number of Star Coins. T (int): Time of conversion in hours. Returns: int: Number of Galactic Credits (G). if 1 <= T <= 6: R = 3 elif 7 <= T <= 12: R = 5 elif 13 <= T <= 18: R = 7 elif 19 <= T <= 24: R = 11 G = (S * 2) + R return G def process_test_cases(test_cases): Processes multiple test cases to calculate Galactic Credits for each. Args: test_cases (list of tuples): Each tuple contains (S, T) values for a test case. Returns: list of int: Calculated Galactic Credits for each test case. results = [] for S, T in test_cases: results.append(calculate_galactic_credits(S, T)) return results"},{"question":"Alex is creating a new game and wants to implement a system to track supply drops. He represents the drops using a 2D grid of size MxN. Each cell in the grid can either contain a supply drop (\'S\') or be empty (\'.\'). Alex wants to count how many clusters of supply drops there are in the grid. A cluster is defined as a group of \'S\' cells connected horizontally or vertically (not diagonally). Alex needs your help to write a program to determine the number of clusters. Input: The first line contains two integers M and N, the dimensions of the grid. The next M lines each contain N characters, either \'S\' or \'.\'. Output: Print a single integer representing the number of supply drop clusters in the grid. Constraints: 1 ≤ M, N ≤ 1000 SAMPLE INPUT 4 5 S.... SS... .SSS. ..... SAMPLE OUTPUT 2 Explanation There are two clusters of supply drops: 1. The first cluster contains two \'S\' cells in the top left corner (0,0) and (1,0). 2. The second cluster contains four \'S\' cells in the positions (1,1), (2,1), (2,2), and (2,3).","solution":"def count_clusters(grid, m, n): Counts the number of clusters of \'S\' in the grid. def dfs(x, y): Depth First Search to traverse and mark all connected \'S\' cells. # Stack for the DFS stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < m and 0 <= cy < n and grid[cx][cy] == \'S\': # Mark the cell as visited grid[cx][cy] = \'.\' # Add all horizontally and vertically connected cells to the stack stack.extend([(cx+1, cy), (cx-1, cy), (cx, cy+1), (cx, cy-1)]) clusters = 0 for i in range(m): for j in range(n): if grid[i][j] == \'S\': # Start a DFS from the cell (i, j) dfs(i, j) clusters += 1 return clusters"},{"question":"A company wants to optimize the distribution of tasks among its employees in such a way that each worker gets a fair share of the workload, without exceeding their capacity. Each employee has a maximum capacity of work they can handle, and each task has a specific workload associated with it. Your goal is to determine if it\'s possible to assign all tasks to the employees without exceeding their individual capacities. Input The first line contains an integer `T`, the number of test cases. Each test case starts with an integer `N`, the number of employees, followed by `N` integers representing the maximum capacity of each employee. The next line contains an integer `M`, the number of tasks, followed by `M` integers representing the workload of each task. Output For each test case, output \\"yes\\" if all tasks can be assigned to the employees such that no employee\'s capacity is exceeded, otherwise output \\"no\\". Example Input: 2 3 10 15 20 5 5 5 10 10 5 2 8 8 3 5 5 5 Output: yes no Note: In the first test case, the tasks can be distributed as follows: Employee 1 takes tasks with workloads 5 and 5, Employee 2 takes tasks with workloads 10 and 5, and Employee 3 takes tasks with workload 10. No employee exceeds their capacity. In the second test case, there is no possible way to distribute the tasks without exceeding an employee\'s capacity.","solution":"def can_assign_tasks(T, test_cases): results = [] for i in range(T): N, employee_capacities, M, task_workloads = test_cases[i] employee_capacities.sort(reverse=True) task_workloads.sort(reverse=True) for workload in task_workloads: assigned = False for j in range(N): if employee_capacities[j] >= workload: employee_capacities[j] -= workload assigned = True break if not assigned: results.append(\\"no\\") break else: results.append(\\"yes\\") return results # Example usage: # T = 2 # test_cases = [ # (3, [10, 15, 20], 5, [5, 5, 10, 10, 5]), # (2, [8, 8], 3, [5, 5, 5]) # ] # print(can_assign_tasks(T, test_cases))"},{"question":"Problem Statement Alice is organizing a fundraising event and she has a certain number of free tickets to distribute among a list of potential attendees. Each potential attendee has been assigned a probability of attending the event if they receive a ticket. Alice wants to maximize the overall probability of attendance, given she can distribute at most k tickets. Given a list of n probabilities, P = {p1, p2, ..., pn}, each representing the probability of a respective potential attendee attending the event if they receive a ticket, determine the maximum probability of attendance if Alice can distribute at most k tickets. Note Each attendee can receive at most one ticket. Probabilities are given as floating-point numbers between 0 and 1, inclusive. Input Format The first line contains T, the number of test cases. Each test case comprises of two lines. The first line contains two integers, n and k, representing the length of list P and the maximum number of tickets that can be distributed, respectively. The second line consists of n space-separated floating-point numbers, p1, p2, ..., pn, representing the probabilities of each potential attendee attending. Constraints 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 0 ≤ k ≤ n 0 ≤ pi ≤ 1, where i ∈ [1, n] Output Format Output T lines, each containing the maximum probability of attendance for each test case. SAMPLE INPUT 2 3 2 0.5 0.8 0.3 4 3 0.1 0.4 0.7 0.6 SAMPLE OUTPUT 1.3 1.7","solution":"def maximum_attendance_probability(test_cases): results = [] for n, k, probabilities in test_cases: # Sort probabilities in descending order to maximize total probability probabilities.sort(reverse=True) # Sum the top k probabilities max_prob = sum(probabilities[:k]) results.append(max_prob) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n, k = map(int, lines[index].split()) probabilities = list(map(float, lines[index+1].split())) test_cases.append((n, k, probabilities)) index += 2 return test_cases def format_output(output): return \\"n\\".join(f\\"{o:.1f}\\" for o in output) # Example usage: input_string = \\"2n3 2n0.5 0.8 0.3n4 3n0.1 0.4 0.7 0.6\\" test_cases = parse_input(input_string) results = maximum_attendance_probability(test_cases) output = format_output(results) print(output)"},{"question":"After the establishment of daily shuttle services between Earth and the new planet, a need for efficient scheduling has arisen. Each shuttle has a limited number of seats that need to be allocated to people in an order that ensures a fair and optimal distribution of resources. You are tasked with creating a program that assigns seats to passengers based on a list of shuttle seat capacities and passenger groups. Each group of passengers wants to travel together and must be accommodated in a single shuttle. If a group of passengers exceeds the capacity of a shuttle, they will have to wait for the next available shuttle. Given the capacities of the shuttles in the order they will be dispatched, and the number of passengers in each group, determine the total number of shuttles required to accommodate all groups. -----Input----- - The first line contains an integer M (1 leq M leq 200,000) representing the number of shuttles. - The second line contains M integer numbers c_i (1 leq c_i leq 10^9) separated by a single space, representing the number of seats available on each shuttle. - The third line contains an integer G (1 leq G leq 200,000) representing the number of passenger groups. - The fourth line contains G integer numbers g_j (1 leq g_j leq 10^9) separated by a single space, representing the size of each passenger group. -----Output----- Output a single integer representing the total number of shuttles required to accommodate all passenger groups. -----Example----- Input 3 10 15 20 4 6 8 12 15 Output 3 -----Note----- There are three shuttles with capacities 10, 15, and 20 respectively. The passenger groups are of sizes 6, 8, 12, and 15. - Group of 6 fits into shuttle with capacity 10. - Group of 8 fits into shuttle with capacity 10. - Group of 12 fits into shuttle with capacity 15. - Group of 15 fits into shuttle with capacity 20. Hence, 3 shuttles are required.","solution":"def total_shuttles_required(shuttle_capacities, passenger_groups): shuttle_index = 0 total_shuttles = 0 for group_size in passenger_groups: while shuttle_index < len(shuttle_capacities) and shuttle_capacities[shuttle_index] < group_size: shuttle_index += 1 if shuttle_index == len(shuttle_capacities): break total_shuttles += 1 shuttle_index += 1 return total_shuttles"},{"question":"Given an array of integers where each element appears twice except for one. Find that single element. Example 1: Input: A[] = {2, 3, 5, 2, 3} Output: 5 Example 2: Input: A[] = {1, 4, 1, 6, 4, 7, 6} Output: 7 Your Task: You don\'t need to read input or print anything. Complete the function SingleNumber() that takes array A[] as input and returns the value of the single element. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{6} 0 ≤ A[i] ≤ 10^{6}","solution":"def SingleNumber(A): Returns the single element in the array where every element appears twice except for one. single_element = 0 for num in A: single_element ^= num return single_element"},{"question":"Chef likes to go on long walks to stay fit. He tracks the number of steps he takes every day using his step-counter app. Chef sets a goal to take at least G steps every day. Determine how many days Chef met or exceeded his step goal. ------ Input Format ------ - The first line contains two integers N and G — the number of days Chef recorded his steps and the daily step goal, respectively. - The second line contains N integers separated by spaces, where each integer represents the number of steps Chef took on a particular day. ------ Output Format ------ Output the number of days Chef met or exceeded his step goal. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ G ≤ 10^5 0 ≤ text{steps on any day} ≤ 10^5 ------ Sample Input 1 ------ 5 10000 12000 8000 15000 10000 9000 ------ Sample Output 1 ------ 3 ------ Explanation 1 ------ Chef\'s goal is to take at least 10000 steps every day. - On day 1, he took 12000 steps (met the goal). - On day 2, he took 8000 steps (did not meet the goal). - On day 3, he took 15000 steps (met the goal). - On day 4, he took 10000 steps (met the goal). - On day 5, he took 9000 steps (did not meet the goal). Chef met or exceeded his goal on 3 days. ------ Sample Input 2 ------ 3 5000 3000 5000 7000 ----- Sample Output 2 ------ 2 ------ Explanation 2 ------ - On day 1, he took 3000 steps (did not meet the goal). - On day 2, he took 5000 steps (met the goal). - On day 3, he took 7000 steps (met the goal). Chef met or exceeded his goal on 2 days.","solution":"def count_days_meeting_goal(N, G, steps): Counts how many days Chef met or exceeded his step goal. Parameters: N (int): The number of days Chef recorded his steps. G (int): The daily step goal. steps (list of int): List of steps taken each day. Returns: int: Number of days Chef met or exceeded the step goal. return sum(1 for step in steps if step >= G)"},{"question":"Marta is working on a chatbot service that should respond to a user\'s question with the best possible answer from a given set of predefined answers. The chatbot service has a set of predefined questions and their respective predefined answers stored in the form of strings. The aim is to find the most relevant predefined question for a given user input question and return the corresponding predefined answer. For simplicity, the relevance of a predefined question to the user input question is determined by their longest common subsequence (LCS). The predefined question with the highest LCS value with the user input question is considered the most relevant. If there is a tie (i.e., multiple questions have the same LCS value), return the answer of the predefined question which appears first in the input. You need to write a function that processes the user input question and returns the most relevant predefined answer. Input - The first line contains an integer n (1 ≤ n ≤ 100) representing the number of predefined question-answer pairs. - The next 2 * n lines contain the predefined questions and their corresponding predefined answers: the i-th question is on line 2 * i and the i-th answer is on line 2 * i + 1. - The last line contains the user input question as a string. Output - Print the most relevant predefined answer to the user’s input question. Example Input 3 \\"How is the weather today?\\" \\"It\'s sunny.\\" \\"What time is it?\\" \\"It is 5 PM.\\" \\"Do you like pizza?\\" \\"Yes, I love pizza.\\" \\"What time is it now?\\" Output \\"It is 5 PM.\\" Note In the example input, the user input question \\"What time is it now?\\" has the highest LCS value of 11 with the predefined question \\"What time is it?\\", leading to \\"It is 5 PM.\\" being the answer returned.","solution":"def longest_common_subsequence(a, b): m, n = len(a), len(b) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def find_best_answer(n, qa_pairs, user_question): best_lcs = -1 best_answer = \\"\\" for i in range(n): predefined_question = qa_pairs[i][0] lcs = longest_common_subsequence(predefined_question, user_question) if lcs > best_lcs: best_lcs = lcs best_answer = qa_pairs[i][1] return best_answer"},{"question":"Given an array of integers where some elements appear twice and others appear once, find all the elements that appear twice. You must solve the problem in linear time O(N) and use constant space O(1) excluding the space for the input and output arrays. Example 1: Input: arr = [4,3,2,7,8,2,3,1] Output: [2, 3] Example 2: Input: arr = [1,1,2] Output: [1] Example 3: Input: arr = [1] Output: [] Your Task: You don\'t need to read input or print anything. Your task is to complete the function findDuplicates() which takes the array arr and its size n as input parameters and returns a list of integers containing the duplicates in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (excluding the space for the input and output arrays) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ n","solution":"def findDuplicates(arr): Returns the elements that appear twice in the array. duplicates = [] for i in range(len(arr)): index = abs(arr[i]) - 1 if arr[index] < 0: duplicates.append(index + 1) else: arr[index] = -arr[index] return duplicates"},{"question":"In a software company, employees have the opportunity to optimize their workstations by choosing the number and arrangement of monitors. The company provides different workstations, and each workstation can hold a certain number of monitors of specific sizes. Given the dimensions of the table in the workstation and a list of monitor dimensions, determine if a given monitor can fit on the table considering the orientation (landscape or portrait). Write a function that takes the table dimensions and a list of monitor dimensions, and returns a list of booleans indicating whether each monitor can fit on the table in any orientation. Input: The first line contains two integers, W and H, representing the width and height of the table in centimeters. The second line contains an integer N, the number of monitors. The next N lines each contain two integers wi and hi, representing the width and height of the ith monitor in centimeters. Output: The output should be a list of N booleans, where the ith boolean is True if the ith monitor can fit on the table in any orientation, otherwise False. Constraints: 1 ≤ W, H ≤ 1000 1 ≤ N ≤ 100 1 ≤ wi, hi ≤ 1000 Each monitor must be placed such that its base lies on a side of the table and it must be fully supported by the table\'s surface. Sample Input 1: 100 50 3 60 40 80 90 55 45 Sample Output 1: [True, False, True] Sample Input 2: 80 80 2 100 50 60 70 Sample Output 2: [False, True] Explanation: In the first example, the first monitor can fit in its given dimensions on the table, so the first boolean is True. The second monitor is too tall in both orientations to fit inside the height of 50, so the second boolean is False. The third monitor can fit in its original dimensions, so the third boolean is True. In the second example, the first monitor cannot fit on the table because its width exceeds the table\'s width. The second monitor can fit by orienting it in the portrait mode.","solution":"def can_fit_monitors(W, H, monitors): Determines if each monitor can fit on the table in any orientation. Parameters: W (int): Width of the table. H (int): Height of the table. monitors (list of tuples): List of tuples where each tuple contains the width and height of a monitor. Returns: list of bool: List of booleans indicating for each monitor if it can fit on the table in any orientation. result = [] for monitor in monitors: wi, hi = monitor fits = (wi <= W and hi <= H) or (hi <= W and wi <= H) result.append(fits) return result"},{"question":"Alice loves playing with numbers, and she has recently started exploring number sequences that follow specific patterns. One day, she encountered a peculiar sequence rule and found it quite interesting. She decided to turn it into a coding problem. Given an integer n, generate the n-th term of the sequence defined by the following rules: 1. The first term of the sequence is \\"1\\". 2. To generate subsequent terms, read the previous term and count the frequency of each digit in it, and state that frequency digit by digit. For instance, - The second term is generated by reading the first term \\"1\\" (one 1) which results in \\"11\\". - The third term is generated by reading the second term \\"11\\" (two 1s) which results in \\"21\\". - The fourth term is generated by reading the third term \\"21\\" (one 2, then one 1) which results in \\"1211\\". Your task is to write a function that takes an integer n and returns the n-th term of the sequence as a string. -----Input----- A single integer n (1 ≤ n ≤ 30) representing the position in the sequence. -----Output----- Output the n-th term of the sequence as a string. -----Examples----- Input 1 Output 1 Input 5 Output 111221 Input 7 Output 13112221 -----Note----- The first few terms of the sequence are as follows: 1. \\"1\\" 2. \\"11\\" 3. \\"21\\" 4. \\"1211\\" 5. \\"111221\\" To generate the 5th term: - Read the 4th term \\"1211\\", which can be described as \\"one 1, one 2, two 1s\\", resulting in \\"111221\\". The 7th term can be generated from the 6th term \\"312211\\": - \\"three 1s, one 2, two 1s\\", which results in \\"13112221\\".","solution":"def look_and_say(n): Returns the n-th term of the look-and-say sequence. if n == 1: return \\"1\\" current_term = \\"1\\" for _ in range(1, n): next_term = \\"\\" i = 0 while i < len(current_term): count = 1 while i + 1 < len(current_term) and current_term[i] == current_term[i + 1]: count += 1 i += 1 next_term += str(count) + current_term[i] i += 1 current_term = next_term return current_term"},{"question":"You have been given two arrays: array `a` of length `n` and array `b` of length `m`. Your task is to find the minimum difference between any element from array `a` and any element from array `b`. Input: The first line contains one integer t (1 ≤ t ≤ 1000) - the number of test cases. Each test case consists of three lines. The first line contains two integers n (1 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 10^5) - the lengths of the arrays `a` and `b` respectively. The second line contains `n` integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) which represent the elements of array `a`. The third line contains `m` integers b_1, b_2, ..., b_m (-10^9 ≤ b_i ≤ 10^9) which represent the elements of array `b`. The sum of `n` over all test cases does not exceed 10^5. Output: For each test case, print the minimum difference between any element from array `a` and any element from array `b`. Example Input: 3 5 4 1 3 5 7 9 2 4 8 10 1 1 -10 10 3 3 -1 -2 -3 4 5 6 Output: 1 20 5","solution":"def find_min_difference(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][\\"lengths\\"] a = test_cases[i][\\"array_a\\"] b = test_cases[i][\\"array_b\\"] a.sort() b.sort() min_diff = float(\'inf\') i = 0 j = 0 while i < n and j < m: min_diff = min(min_diff, abs(a[i] - b[j])) if a[i] < b[j]: i += 1 else: j += 1 results.append(min_diff) return results"},{"question":"Sam loves decorating his living room with colored paper. He has a collection of colored paper pieces of various lengths. He wants to create a banner by connecting several pieces end-to-end to form the longest possible continuous segment of colored paper. However, there is a rule: each piece can only follow another if its length is strictly greater than the previous piece. Given the lengths of all colored paper pieces, help Sam determine the maximum possible length of the banner and the sequence of paper pieces that will form this banner. Input The first line contains an integer n (1 ≤ n ≤ 5000) — the number of paper pieces Sam has. The second line contains n integers, each representing the length of a piece. Output In the first line, print the maximum possible length of the banner. In the second line, print the indices of the paper pieces (1-based index) in the order they appear in the banner. If there are multiple sequences with the same maximum length, print any of them. Examples Input 5 4 3 2 6 8 Output 3 2 3 4 Input 4 1 2 1 3 Output 3 1 2 4","solution":"def longest_increasing_banner(n, lengths): Returns the maximum possible length of the banner and the sequence of paper pieces\' indices. Parameters: n (int): The number of paper pieces. lengths (list of int): The lengths of the paper pieces. Returns: (int, list of int): The maximum length and the sequence of indices. # Initialize DP arrays dp = [1] * n prev = [-1] * n # Fill the DP arrays for i in range(n): for j in range(i): if lengths[i] > lengths[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j # Find the maximum length and its ending index max_len = max(dp) idx = dp.index(max_len) # Reconstruct the sequence sequence = [] while idx != -1: sequence.append(idx + 1) # Convert to 1-based index idx = prev[idx] sequence.reverse() return max_len, sequence"},{"question":"You are helping a data analyst to quickly process some data sets. They have a list of numbers which they need to transform based on certain rules, which are given as follows: 1. If the number is divisible by 3, replace it with \\"Fizz\\". 2. If the number is divisible by 5, replace it with \\"Buzz\\". 3. If the number is divisible by both 3 and 5, replace it with \\"FizzBuzz\\". 4. Otherwise, keep the number as it is. Write a program that takes an integer n, followed by n integers, and outputs the transformed list of numbers based on the rules mentioned above. -----Input----- The input will consist of the first line containing the integer n (1 <= n <= 100) followed by n lines of integers (1 <= each integer <= 10^6). -----Output----- For each input number, print its transformed value on a new line. -----Example----- Input: 5 3 5 15 4 7 Output: Fizz Buzz FizzBuzz 4 7","solution":"def process_numbers(n, numbers): Transforms a list of numbers based on the given rules: - Replace numbers divisible by 3 with \\"Fizz\\" - Replace numbers divisible by 5 with \\"Buzz\\" - Replace numbers divisible by 3 and 5 with \\"FizzBuzz\\" - Otherwise, keep the number as it is Args: n (int): The number of integers. numbers (list of int): List of integers. Returns: list: A list of transformed values. result = [] for num in numbers: if num % 3 == 0 and num % 5 == 0: result.append(\\"FizzBuzz\\") elif num % 3 == 0: result.append(\\"Fizz\\") elif num % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(num)) return result"},{"question":"A palindrome sequence A sequence of characters is considered a palindrome if it reads the same forward and backward. For example, \'level\', \'radar\', and \'12321\' are palindromes, but \'hello\', \'world\', and \'12345\' are not. Given a sequence of lowercase letters, determine if it can be rearranged to form a palindrome. If possible, output \\"Yes\\", otherwise output \\"No\\". Only lower case letters will be used in the sequence and the maximum length of the sequence is 1000 characters. Input The first line contains an integer T, the number of test cases. The next T lines each contain a single string of lowercase letters. Output For each test case, output \\"Yes\\" if the sequence can be rearranged into a palindrome, otherwise output \\"No\\". Sample Input 3 aabb racecar abcd Sample Output Yes Yes No Example Input 3 aabb racecar abcd Output Yes Yes No","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"Yes\\" if odd_count <= 1 else \\"No\\" def solve(test_cases): results = [can_form_palindrome(s) for s in test_cases] return results"},{"question":"In a small town, there are n houses lined up in a row, each with a certain amount of power consumption. You are given an integer array p of length n where p[i] represents the power consumption of the i-th house. Your goal is to make the power load as unbalanced as possible by redistributing the power consumption among the houses. Specifically, you are allowed to perform the following operation any number of times: - Choose any two houses i and j such that i neq j, and transfer one unit of power from house i to house j, but only if house i has more power than house j. Determine the maximum possible difference in power consumption between the house with the minimum power and the house with the maximum power after any number of such transfers. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of testcases. For each testcase, the first line contains an integer n (2 le n le 2 cdot 10^5) — the number of houses. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^9) — the power consumption of each house. The sum of n over all testcases does not exceed 2 cdot 10^5. -----Output----- For each testcase, print the maximum possible difference in power consumption between the house with the minimum power and the house with the maximum power after performing any number of valid transfers. -----Examples----- Input 3 4 1 3 2 4 3 5 1 1 2 10 10 Output 3 4 0 -----Note----- In the first testcase, the maximum difference is achieved by making the power counts [1, 1, 1, 7]. In the second testcase, the maximum difference is achieved by making the power counts [0, 0, 7]. In the third testcase, both houses will end up having the same power, so the difference is 0.","solution":"def max_power_diff(t, test_cases): results = [] for case in test_cases: n, p = case if n == 2: results.append(0) else: min_power = min(p) max_power = max(p) max_diff = max_power - min_power results.append(max_diff) return results"},{"question":"Arina is playing a game called NumMatrix. The game consists of a rectangular grid of numbers with n rows and m columns. Arina can perform two types of operations: 1. **Update an element:** Change the number at a specific position in the grid. 2. **Sum query:** Calculate the sum of all numbers in a specified subrectangle of the grid. Initially, the grid is filled with zeros. Arina needs your help to efficiently perform these operations. -----Input----- The first line contains three integers n, m, and q (1 le n, m le 500, 1 le q le 10^4): the number of rows, the number of columns, and the number of operations. Each of the next q lines can be one of the following: - \\"UPDATE x y val\\": This operation changes the number at position (x, y) to val (1 le x le n, 1 le y le m, 0 le val le 1000). - \\"SUM x1 y1 x2 y2\\": This operation calculates the sum of all numbers in the subrectangle from (x1, y1) to (x2, y2) (1-based indexing) inclusive. -----Output----- For each \\"SUM\\" operation, output the result on a new line. -----Examples----- Input: 3 3 5 UPDATE 1 1 5 UPDATE 2 2 3 SUM 1 1 2 2 UPDATE 3 3 2 SUM 1 1 3 3 Output: 8 10 -----Note----- In the first example, after the initial updates, the grid looks like this: 5 0 0 0 3 0 0 0 0 The first \\"SUM\\" operation (1, 1, 2, 2) calculates the sum of the subrectangle from (1, 1) to (2, 2), which is 5 + 0 + 0 + 3 = 8. After the third update, the grid becomes: 5 0 0 0 3 0 0 0 2 The second \\"SUM\\" operation (1, 1, 3, 3) calculates the sum of the entire grid, which is 5 + 0 + 0 + 0 + 3 + 0 + 0 + 0 + 2 = 10.","solution":"class NumMatrix: def __init__(self, n, m): self.n = n self.m = m self.matrix = [[0] * m for _ in range(n)] def update(self, x, y, val): self.matrix[x - 1][y - 1] = val def sum_region(self, x1, y1, x2, y2): total_sum = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total_sum += self.matrix[i][j] return total_sum def process_operations(n, m, q, operations): num_matrix = NumMatrix(n, m) results = [] for op in operations: parts = op.split() if parts[0] == \\"UPDATE\\": x, y, val = int(parts[1]), int(parts[2]), int(parts[3]) num_matrix.update(x, y, val) elif parts[0] == \\"SUM\\": x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) result = num_matrix.sum_region(x1, y1, x2, y2) results.append(result) return results"},{"question":"A company has decided to automate the scheduling of its weekly team meetings. Each week, there are several possible time slots for the meetings. However, due to the availability of different team members, not every team member can attend every time slot. In order to maximize the attendance at the weekly meeting, the company needs to select the time slot which the highest number of team members can attend. You are given the availability of each team member for each possible time slot. Your task is to determine the time slot that allows the maximum number of team members to attend the meeting. Input Constraints - The number of team members (M) will be between 1 and 20, inclusive. - The number of possible time slots (N) will be between 1 and 20, inclusive. - Each team member\'s availability is given as a binary string of length N, where \'1\' indicates availability for the corresponding time slot and \'0\' indicates unavailability. Input Format - The first line will contain the number of test cases - T. - For each test case: - The first line will contain an integer M representing the number of team members. - The second line will contain an integer N representing the number of possible time slots. - Each of the following M lines will contain a binary string of length N representing the availability of each team member for the time slots. Output Format Print T lines showing the maximum number of team members that can attend the meeting for each test case. SAMPLE INPUT 1 3 4 1100 1010 1001 SAMPLE OUTPUT 2 Explanation In the sample input, there are 3 team members and 4 possible time slots. The availability of each team member is as follows: - Team member 1: available for time slots 1 and 2 - Team member 2: available for time slots 1 and 3 - Team member 3: available for time slots 1 and 4 The first time slot has all three team members available. Thus, the maximum number of team members that can attend the meeting in a single time slot is 2, for the first time slot.","solution":"def maximize_attendance(T, test_cases): results = [] for t in range(T): M = test_cases[t][0] N = test_cases[t][1] availabilities = test_cases[t][2] max_team_members = 0 for j in range(N): count = sum(int(availabilities[i][j]) for i in range(M)) max_team_members = max(max_team_members, count) results.append(max_team_members) return results # Example usage: # T = 1 # test_cases = [ # (3, 4, [\'1100\', \'1010\', \'1001\']) # ] # print(maximize_attendance(T, test_cases)) # Output: [3]"},{"question":"An online retail store keeps track of customer orders, and the orders contain product IDs and the quantities purchased. The store wants to ensure that they can frequently check which products have been ordered together more than a certain number of times. Create a function `frequent_combos(order_log: List[Tuple[int, int]], threshold: int) -> List[Tuple[int, int]]` that takes in an order log and a threshold. The order log is a list of tuples, where each tuple contains a product ID and the quantity ordered in that transaction. The function should return a list of tuples, each containing two product IDs that have been ordered together in the same transaction at least the specified number of times. The list should be sorted in ascending order based on the first product ID, and then the second product ID. If no combinations meet the threshold, the function should return an empty list. # Example Input ```python order_log = [(1, 2), (2, 1), (3, 5), (2, 1), (1, 2), (3, 5)] threshold = 2 ``` Output ```python [(1, 2), (2, 3)] ``` # Explanation In this example: - Products 1 and 2 have been ordered together twice: once in the second tuple and once in the fourth tuple. - Products 2 and 3 have also been ordered together twice: once in the fourth tuple and once in the fifth tuple. Both sets of product combinations exceed the threshold of 2, hence are included in the output. Input The input consists of an order log where each entry in the log is a tuple containing a product ID and the quantity ordered. The threshold is an integer representing the minimum number of common orders for products to be considered as frequent combinations: - The order log contains a list of tuples, where each tuple is in the format (product_id, quantity) - The threshold is an integer representing the minimum number of times two products should be ordered together to be considered frequent combinations Output The function should return a list of tuples, where each tuple contains two product IDs sorted in ascending order, representing the products that have been ordered together at least the specified number of times. Constraints - The order log will contain between 1 and 1000 order entries. - Each entry in the order log will be a tuple of the form (product_id, quantity), where: - product_id is a positive integer between 1 and 500. - quantity is a positive integer between 1 and 100. - The threshold will be a positive integer between 1 and 50. ```python # Function Signature from typing import List, Tuple def frequent_combos(order_log: List[Tuple[int, int]], threshold: int) -> List[Tuple[int, int]]: pass ```","solution":"from typing import List, Tuple from collections import defaultdict from itertools import combinations def frequent_combos(order_log: List[Tuple[int, int]], threshold: int) -> List[Tuple[int, int]]: # Dictionary to keep track of combinations count combo_count = defaultdict(int) # Iterate over the order log and calculate combinations for product_id, quantity in order_log: combo_count[product_id] += quantity # List to store the result result = [] # Find all combinations of products and their counts product_ids = list(combo_count.keys()) for combo in combinations(product_ids, 2): combo_key = tuple(sorted(combo)) # Sum up the combination count if combo_count[combo[0]] >= threshold and combo_count[combo[1]] >= threshold: result.append(combo_key) # Sort result based on first product ID, and then by the second product ID result.sort() return result"},{"question":"Given a string S of length N and a number K. You need to find the length of the longest substring of S that contains at most K different characters. -----Input:----- - First line contains an integer T, number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K where N is the length of the string and K is the number of different characters allowed. - The second line contains the string S. -----Output:----- - For each test case, output a single line containing the length of the longest substring with at most K different characters. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq K leq 26 - S consists only of lowercase English letters. NOTE: Use of efficient algorithms and data structures is recommended for handling large inputs. -----Sample Input:----- 2 7 2 abaaccb 5 1 abcde -----Sample Output:----- 4 1 -----EXPLANATION:----- Case 1: The longest substring with at most 2 different characters is \\"aacc\\", which has length 4. Case 2: The longest substring with at most 1 different character is any single character, with length 1.","solution":"def longest_substring_with_k_chars(T, cases): from collections import defaultdict results = [] for i in range(T): N, K = cases[i][0] S = cases[i][1] # Dictionary to keep track of character count in current window char_count = defaultdict(int) max_length = 0 left = 0 # Sliding window technique for right in range(N): char_count[S[right]] += 1 # If more than K distinct characters, shrink the window from the left while len(char_count) > K: char_count[S[left]] -= 1 if char_count[S[left]] == 0: del char_count[S[left]] left += 1 max_length = max(max_length, right - left + 1) results.append(max_length) return results"},{"question":"Your task is to implement a program for a photo sharing social network. Each user can post photos, and other users can like and comment on them. Your program needs to keep track of each photo\'s likes and comments, and return the most popular photo based on a popularity score. The popularity score is calculated as the sum of the number of likes multiplied by 2 plus the number of comments. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of photos. - The next `n` lines each contain an integer `l` (0 ≤ l ≤ 1000) and an integer `c` (0 ≤ c ≤ 1000) separated by a space, representing the number of likes and comments of each photo respectively. # Output: Print the index of the photo (1-based) with the highest popularity score. If multiple photos have the same popularity score, return the smallest index. # Example: Input: ``` 3 10 5 8 7 10 5 ``` Output: ``` 1 ``` # Note: - In the sample input, photo 1 and photo 3 both have the same popularity score (`10*2 + 5 = 25`), but we return `1` because it has the smallest index.","solution":"def most_popular_photo(n, photos): Determines the most popular photo based on like and comment counts. Args: n (int): The number of photos. photos (list of tuples): Each tuple contains the number of likes and comments for a photo. Returns: int: The 1-based index of the most popular photo. max_score = -1 max_index = -1 for i in range(n): l, c = photos[i] score = l * 2 + c if score > max_score or (score == max_score and max_index == -1): max_score = score max_index = i + 1 return max_index"},{"question":"You are given an array of positive integers and a single integer `X`. Your task is to find the maximum length of a contiguous subarray where the sum of the elements is at most `X`. If there is no such subarray, return `0`. ------ Input ------ The first line contains an integer `T`, the number of test cases (1 ≤ T ≤ 10^3). For each test case, the first line contains two integers `N` and `X` (1 ≤ N ≤ 10^5, 1 ≤ X ≤ 10^9). The second line contains `N` positive integers, the elements of the array (1 ≤ arr[i] ≤ 10^6). ------ Output ------ For each test case, output a single line containing the maximum length of a contiguous subarray with a sum at most `X`. ----- Sample Input 1 ------ 2 5 10 1 2 3 4 5 3 5 3 1 2 ----- Sample Output 1 ------ 4 2 ----- Explanation 1 ------ Explanation for the first sample test case: The subarray `[1, 2, 3, 4]` has a sum of `10` and is of length `4`. This is the maximum length of any subarray that meets the condition. In the second test case, the subarray `[1, 2]` is the longest subarray with a sum of `3` which is at most `5`.","solution":"def max_length_subarray(T, test_cases): Returns the maximum length of a contiguous subarray where the sum is at most X for each test case. results = [] for case in test_cases: N, X = case[\'N\'], case[\'X\'] arr = case[\'arr\'] max_len = 0 current_sum = 0 start = 0 for end in range(N): current_sum += arr[end] while current_sum > X: current_sum -= arr[start] start += 1 max_len = max(max_len, end - start + 1) results.append(max_len) return results"},{"question":"John is a garden enthusiast and has a passion for planting trees. He has recently acquired a rectangular garden of size n x m. He wants to plant trees in such a way that each tree has enough space around it for optimal growth. John wants to ensure that the distance between any two trees, or between a tree and the boundary of the garden, is at least k units. Your task is to determine the maximum number of trees that John can plant in his garden under these conditions. To simplify the problem, assume that the trees are planted in the center of squares of size k x k, which is the minimum spacing required between two adjacent trees or between a tree and the garden boundary. -----Input----- - The first line contains three integers, 1 leq n, m leq 10^9 and 1 leq k leq min(n, m), representing the dimensions of the garden and the minimum required distance between the trees. -----Output----- - Print an integer representing the maximum number of trees that can be planted in John\'s garden under the given conditions. -----Examples----- Sample Input 1: 10 10 2 Sample Output 1: 25 Sample Input 2: 15 10 3 Sample Output 2: 15","solution":"def max_trees(n, m, k): Calculate the maximum number of trees that can be planted in the garden. Parameters: n (int): The length of the garden. m (int): The width of the garden. k (int): The minimum required spacing between trees and from trees to the garden boundary. Returns: int: The maximum number of trees that can be planted. trees_in_row = n // k trees_in_column = m // k return trees_in_row * trees_in_column"},{"question":"Given an array of integers `nums` and an integer `k`, return the maximum number of unique integers among all contiguous subarrays of length `k`. Example 1: Input: nums = [1, 2, 1, 2, 3, 4, 5], k = 3 Output: 3 Explanation: The subarrays of length 3 are: [1, 2, 1] - 2 unique numbers (1, 2) [2, 1, 2] - 2 unique numbers (1, 2) [1, 2, 3] - 3 unique numbers (1, 2, 3) [2, 3, 4] - 3 unique numbers (2, 3, 4) [3, 4, 5] - 3 unique numbers (3, 4, 5) The maximum number of unique numbers among these subarrays is 3. Example 2: Input: nums = [1, 1, 1, 1, 1], k = 2 Output: 1 Explanation: All subarrays of length 2 are [1, 1], and they all contain only 1 unique number. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxUniqueSubarray()` which takes an array of integers `nums` and an integer `k` and returns the maximum number of unique integers among all contiguous subarrays of length `k`. Expected Time Complexity: O(n) Expected Auxiliary Space: O(k) Constraints: 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 1 ≤ nums[i] ≤ 10^4","solution":"def maxUniqueSubarray(nums, k): Returns the maximum number of unique integers among all contiguous subarrays of length k. if not nums or k <= 0 or k > len(nums): return 0 unique_counts = {} max_unique = 0 for i in range(len(nums)): if nums[i] in unique_counts: unique_counts[nums[i]] += 1 else: unique_counts[nums[i]] = 1 # Remove the element that\'s out of the sliding window if i >= k: if unique_counts[nums[i - k]] == 1: del unique_counts[nums[i - k]] else: unique_counts[nums[i - k]] -= 1 # Update maximum unique count once we have a full window if i >= k - 1: max_unique = max(max_unique, len(unique_counts)) return max_unique"},{"question":"Tom is a new user on a real-time chat application, and the system needs to keep track of the different topics discussed by each user. Each topic is represented by a string. To help Tom focus on fewer topics at a time, the application recommends the top 3 most discussed topics he participated in. You need to write a program that processes Tom\'s chat log to identify his most discussed topics. If there are fewer than 3 unique topics, all of them should be listed. If topics have the same count, they should be listed in alphabetical order. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer n (1 ≤ n ≤ 100) — the number of topics in the chat log for that test case. The next n lines each contain a single string describing a topic (length of each string is 1 to 100 characters). The topics are case-sensitive. Output For each test case, output the top 3 topics Tom discussed, described by a space-separated string. If there are fewer than 3 unique topics, list all of them. Examples Input 2 5 sports weather sports music weather 3 science art science Output sports weather music science art","solution":"def top_3_topics(t, test_cases): from collections import Counter results = [] for i in range(t): n, topics = test_cases[i] topic_counts = Counter(topics) sorted_topics = sorted(topic_counts.items(), key=lambda x: (-x[1], x[0])) top_3_discussed = [topic for topic, count in sorted_topics[:3]] results.append(\\" \\".join(top_3_discussed)) return results # Example usage if __name__ == \\"__main__\\": t = 2 test_cases = [ (5, [\\"sports\\", \\"weather\\", \\"sports\\", \\"music\\", \\"weather\\"]), (3, [\\"science\\", \\"art\\", \\"science\\"]) ] output = top_3_topics(t, test_cases) for line in output: print(line)"},{"question":"Given an array of integers, determine the smallest number of changes needed to make the array a strictly increasing sequence. A change can be either incrementing or decrementing an element by 1. Example 1: Input: N = 5 Arr = {1, 5, 3, 6, 7} Output: 1 Explanation: Changing the second element from 5 to 4 makes the array {1, 4, 3, 6, 7} strictly increasing. Example 2: Input: N = 4 Arr = {9, 7, 5, 10} Output: 2 Explanation: Changing the second element from 7 to 8 and the third element from 5 to 9 makes the array {9, 8, 9, 10} strictly increasing. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minChangesToStrictlyIncreasing() which takes the array Arr[] and its size N as input parameters and returns the smallest number of changes needed to make the array strictly increasing. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^4 1 ≤ Arr[i] ≤ 10^9 where 0 ≤ i < N","solution":"def minChangesToStrictlyIncreasing(N, Arr): def lis(arr): from bisect import bisect_left dp = [] for num in arr: pos = bisect_left(dp, num) if pos == len(dp): dp.append(num) else: dp[pos] = num return len(dp) lis_length = lis(Arr) return N - lis_length"},{"question":"Problem You are given a sequence of integers and a target integer. Your task is to find the number of contiguous subarrays whose sum is equal to the target. Constraints * 1 ≤ length of the sequence ≤ 500 * -10^5 ≤ sequence elements ≤ 10^5 * -10^9 ≤ target ≤ 10^9 Input The input consists of two lines: 1. The first line contains two integers n (the number of elements in the sequence) and target. 2. The second line contains n integers separated by spaces representing the sequence. Output Output the number of contiguous subarrays whose sum is equal to the target on a single line. Examples Input 5 5 1 2 3 4 5 Output 2 Input 6 0 1 -1 1 -1 1 -1 Output 9","solution":"def count_subarrays_with_target_sum(n, target, sequence): count = 0 current_sum = 0 sum_dict = {0: 1} for num in sequence: current_sum += num if (current_sum - target) in sum_dict: count += sum_dict[current_sum - target] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"Given a list of integers, write a function that returns a new list containing the products of all elements in the original list except the one at each position. # Example: Input: ``` [1, 2, 3, 4] ``` Output: ``` [24, 12, 8, 6] ``` # Note: - For the input list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]` because: - `24` is the product of `[2, 3, 4]` - `12` is the product of `[1, 3, 4]` - `8` is the product of `[1, 2, 4]` - `6` is the product of `[1, 2, 3]`","solution":"def product_except_self(nums): Given a list of integers, returns a new list containing the products of all elements in the original list except the one at each position. :param nums: List[int] :return: List[int] length = len(nums) if length == 0: return [] # Initialize left and right products array left_products = [1] * length right_products = [1] * length # Fill the left products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill the right products array for j in range(length - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] # Generate result array by multiplying left and right products result = [1] * length for k in range(length): result[k] = left_products[k] * right_products[k] return result"},{"question":"Given an array of integers `nums` and an integer target `t`, find all unique pairs in the array that sum up to the target. Each pair should be represented as a 2-element array, and the pairs should be written in a list. The output list should not contain duplicate pairs and the pairs can be in any order. You may assume each input would have exactly one solution. # Additional Requirements: 1. The solution should not use the same element twice for forming pairs, i.e., `(nums[i], nums[i])` is not a valid pair. 2. If there are no pairs found, return an empty list. 3. Do not use the same indices twice for forming pairs. 4. Aim for an algorithm with O(n) complexity. # Examples: Example 1: Input: `nums = [1, 2, 3, 4, 5]` and `t = 5` Output: `[[1, 4], [2, 3]]` Example 2: Input: `nums = [3, 1, 4, 1, 5]` and `t = 6` Output: `[[1, 5]]` Example 3: Input: `nums = [1, 1, 1, 1, 1]` and `t = 2` Output: `[[1, 1]]`","solution":"def find_pairs(nums, t): Finds all unique pairs in the array that sum up to the target t. seen = set() pairs = set() for num in nums: complement = t - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"In a magical forest, there are N types of rare jewels, each identified by a unique integer from 1 to N. A wizard wants to collect different sets of jewels. Each set must contain exactly K different types of jewels. The wizard is only interested in the total magical power of each set he collects. The magical power of a set of jewels is calculated as the product of the counts of each type of jewel in the set. For example, if a set contains jewels of types x_1, x_2, ldots, x_K with counts c_1, c_2, ldots, c_K, the magical power of this set is c_1 times c_2 times ldots times c_K. Given the number of jewels of each type, determine the maximum magical power that the wizard can achieve by choosing exactly K different jewel types. -----Input----- The first line contains two integers N and K (1 le K le N le 10^5) — the number of jewel types and the number of different jewel types to choose for each set. The second line contains N integers J_1, J_2, ldots, J_N (1 le J_i le 10^9) — the counts of jewels for each type. -----Output----- A single integer representing the maximum magical power that the wizard can achieve by choosing exactly K different jewel types. -----Examples----- Input 5 3 3 1 4 1 5 Output 60 Input 6 2 7 8 2 5 3 1 Output 56 -----Note----- In the first example, the wizard can choose the jewel types with counts 3, 4, and 5 to get the maximum magical power 3 times 4 times 5 = 60. In the second example, the wizard can choose the jewel types with counts 7 and 8 to get the maximum magical power 7 times 8 = 56.","solution":"from functools import reduce import operator def max_magical_power(N, K, J): Returns the maximum magical power by choosing exactly K different jewel types from the list J of jewel counts. J.sort(reverse=True) chosen_jewels = J[:K] magical_power = reduce(operator.mul, chosen_jewels, 1) return magical_power"},{"question":"# String Compression The goal of this exercise is to implement a method to perform basic string compression using the counts of repeated characters. For example, the string `\\"aabcccccaaa\\"` would become `\\"a2b1c5a3\\"`. If the compressed string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a-z). Write a function: ``` def compress_string(s: str) -> str: pass ``` **Examples:** ``` compress_string(\\"aabcccccaaa\\") # returns \\"a2b1c5a3\\" compress_string(\\"abcd\\") # returns \\"abcd\\" compress_string(\\"aaAAaa\\") # returns \\"aaAAaa\\" compress_string(\\"aabbcc\\") # returns \\"aabbcc\\" ``` **Notes:** - Your function should be able to handle an empty string `\\"\\"` as input and return an empty string as output. - Consider both lower and upper case letters separately. E.g., `compress_string(\\"aaAAaa\\")` returns `\\"aaAAaa\\"` since the case of letters is different. - Always compress the string based on the counts of repeated characters. - Ensure your function is optimized for time and space complexity.","solution":"def compress_string(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a program that efficiently computes the sum of prime factors of a given number N. Given the large possible value of N, an efficient algorithm is required to handle multiple queries regarding the same number. # Input - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains a single integer N. # Output For each test case, output in a single line the sum of prime factors of N. # Constraints - (1 leq T leq 1000) - (1 leq N leq 10^{12}) # Sample Input 1 ``` 2 28 100 ``` # Sample Output 1 ``` 10 5 ``` # Explanation In the first sample test case, 28 can be factored into (2^2 * 7). The prime factors are 2 and 7, and their sum is (2 + 7 = 9). In the second sample test case, 100 can be factored into (2^2 * 5^2). The prime factors are 2 and 5, and their sum is (2 + 5 = 7).","solution":"def sum_of_prime_factors(N): Returns the sum of prime factors of N. Each prime factor is counted only once. if N < 2: return 0 sum_primes = 0 # Check for number of 2s that divide N if N % 2 == 0: sum_primes += 2 while N % 2 == 0: N = N // 2 # Check for other primes, starting from 3 to sqrt(N) for i in range(3, int(N**0.5) + 1, 2): if N % i == 0: sum_primes += i while N % i == 0: N = N // i # If N is a prime number greater than 2 if N > 2: sum_primes += N return sum_primes def process_queries(T, queries): results = [] for N in queries: results.append(sum_of_prime_factors(N)) return results"},{"question":"Write a function `reverse_words` that takes a string `s` as input and returns a new string with the words in reverse order. The words in the input string are separated by single spaces. The function should maintain the order of letters within each word and take care of leading, trailing and multiple spaces. # Example Input: `s = \\" hello world this is a test \\"` Output: `\\"test a is this world hello\\"` # Constraints - The input string `s` will have a maximum length of 1000 characters. - The function should not use any built-in functions related to reversing lists or strings such as `reverse()` or `[::-1]`. # Function Signature ```python def reverse_words(s: str) -> str: # your code here ```","solution":"def reverse_words(s: str) -> str: Returns a new string with the words in reverse order. Words in the input string are separated by single spaces. The function takes care of leading, trailing, and multiple spaces. if not s: return \\"\\" words = [] start = 0 length = len(s) while start < length: while start < length and s[start] == \' \': start += 1 if start >= length: break end = start + 1 while end < length and s[end] != \' \': end += 1 words.append(s[start:end]) start = end + 1 return \' \'.join(words[::-1])"},{"question":"Alice is managing a small library system where each book has a unique identification number. She wants to implement a basic database where users can borrow and return books. Every operation (borrow or return) should be processed in the order it is received to ensure consistency. Moreover, each user can only borrow one book at a time. If a user tries to borrow another book without returning the previous one, the system should deny the request. Similarly, if a user tries to return a book that they have not borrowed, the system should deny the return request. You need to write a program that simulates this library system. -----Input----- The input consists of multiple lines. The first line contains an integer N (1 leq N leq 1000), the number of operations. Each of the next N lines contains a string and an integer separated by a space, which describes an operation: - The string is either \\"borrow\\" or \\"return\\". - The integer is the user ID (1 leq text{user ID} leq 1000). -----Output----- For each operation, output a single line: - If the operation is \\"borrow\\", print the message: \\"User <user_id> borrowed a book.\\" or \\"User <user_id> cannot borrow another book.\\" - If the operation is \\"return\\", print the message: \\"User <user_id> returned the book.\\" or \\"User <user_id> cannot return a book they haven\'t borrowed.\\" -----Examples----- Sample Input 1: 5 borrow 1 borrow 2 return 1 borrow 1 return 2 Sample Output 1: User 1 borrowed a book. User 2 borrowed a book. User 1 returned the book. User 1 borrowed a book. User 2 returned the book. Sample Input 2: 4 borrow 1 borrow 1 return 2 return 1 Sample Output 2: User 1 borrowed a book. User 1 cannot borrow another book. User 2 cannot return a book they haven\'t borrowed. User 1 returned the book.","solution":"def process_library_operations(n, operations): user_books = {} results = [] for operation in operations: action, user_id = operation.split() user_id = int(user_id) if action == \'borrow\': if user_id in user_books and user_books[user_id] == 1: results.append(f\\"User {user_id} cannot borrow another book.\\") else: user_books[user_id] = 1 results.append(f\\"User {user_id} borrowed a book.\\") elif action == \'return\': if user_id in user_books and user_books[user_id] == 1: user_books[user_id] = 0 results.append(f\\"User {user_id} returned the book.\\") else: results.append(f\\"User {user_id} cannot return a book they haven\'t borrowed.\\") return results"},{"question":"You have been recruited to maintain the consistency of encrypted communications for an international spy network. Each message in the cipher consists of a sequence of words, where each word uses a code. To decrypt the message, the code for each word must be reversed and then interpreted using a predefined dictionary that maps reversed codes to the original words. Your task is to implement a decryption algorithm that takes an input encoded message and outputs the original sentence. -----Input----- The first line of input contains an integer, 1 leq M leq 1000, which identifies the number of words in the encoded message. The next line contains M space-separated encoded words. Each encoded word is a string of up to 20 characters in length using only lowercase letters. The third line contains an integer, 1 leq D leq 5000, which identifies the number of dictionary entries. The following D lines each contain two strings, the first string is a reversed code (a string of up to 20 characters using only lowercase letters), and the second string is the original word (a string of up to 20 characters using only lowercase letters). Each original word is unique within the dictionary. It is guaranteed that every encoded word can be decrypted using the provided dictionary. -----Output----- Output the decrypted message as a single line of space-separated words in the order they appear in the input message. -----Examples----- Sample Input 1: 5 siht si na elpmas egassem 15 siht this si is na an elpmas sample egassem message siht this si is na an elpmas sample egassem message Sample Output 1: this is an sample message Sample Input 2: 4 gnitset siht noitcnuf 6 gnitset testing siht this si is noitcnuf function gnitset testing siht this Sample Output 2: testing this is function","solution":"def decrypt_message(num_words, encoded_words, num_entries, dictionary_entries): Decrypts an encoded message based on the provided dictionary of reversed words. Args: num_words (int): Number of words in the encoded message. encoded_words (list of str): List of encoded words. num_entries (int): Number of dictionary entries. dictionary_entries (list of tuples): List of tuples where each tuple contains a reversed word and the corresponding original word. Returns: str: The decrypted message. # Create a dictionary from reversed code to original word decryption_dict = {reverse_code: original_word for reverse_code, original_word in dictionary_entries} # Decrypt each word in encoded message decrypted_words = [decryption_dict[word] for word in encoded_words] # Join decrypted words to form the final message decrypted_message = \\" \\".join(decrypted_words) return decrypted_message # Example to test the function if __name__ == \\"__main__\\": example_num_words = 5 example_encoded_words = [\\"siht\\", \\"si\\", \\"na\\", \\"elpmas\\", \\"egassem\\"] example_num_entries = 5 example_dictionary_entries = [ (\\"siht\\", \\"this\\"), (\\"si\\", \\"is\\"), (\\"na\\", \\"an\\"), (\\"elpmas\\", \\"sample\\"), (\\"egassem\\", \\"message\\") ] print(decrypt_message(example_num_words, example_encoded_words, example_num_entries, example_dictionary_entries)) # Output: \\"this is an sample message\\""},{"question":"You are given an array of integers and several ranges. Each range consists of a start and end index in the array, as well as a threshold value. For each range, you need to determine the number of elements within the range that are greater than or equal to the threshold value. Input Format: - The first line contains an integer N, denoting the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains an integer M, denoting the number of ranges. - The next M lines each contain three integers L, R, and T, where L is the start index, R is the end index, and T is the threshold value. (Note: The indices are 1-based). Output Format: - For each range, output a single integer representing the count of elements in the range [L, R] that are greater than or equal to T. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ array[i] ≤ 10^6 - 1 ≤ M ≤ 10^4 - 1 ≤ L ≤ R ≤ N - 1 ≤ T ≤ 10^6 Sample Input: 10 1 3 5 7 9 11 13 15 17 19 3 1 5 6 2 7 10 5 10 12 Sample Output: 4 4 3 Explanation: For the first range (1, 5, 6): - The subarray is [1, 3, 5, 7, 9] - Elements meeting the threshold condition (>= 6) are [7, 9] - Count of such elements = 2 For the second range (2, 7, 10): - The subarray is [3, 5, 7, 9, 11, 13] - Elements meeting the threshold condition (>= 10) are [11, 13] - Count of such elements = 2 For the third range (5, 10, 12): - The subarray is [9, 11, 13, 15, 17, 19] - Elements meeting the threshold condition (>= 12) are [13, 15, 17, 19] - Count of such elements = 4","solution":"def count_elements_in_ranges(array, ranges): Determines the number of elements within each range that are greater than or equal to the threshold value. Parameters: array (list): List of integers representing the elements. ranges (list): List of tuples, each containing three integers (L, R, T). Returns: list: List of integers representing the count of elements meeting the condition for each range. results = [] for L, R, T in ranges: count = sum(1 for i in range(L-1, R) if array[i] >= T) results.append(count) return results"},{"question":"The city of Alphaville has a peculiar street layout. The city is organized into a grid of N x N blocks, each with a unique integer value representing the building height. The mayor of Alphaville wants to build new infrastructure that spans several blocks, but she needs to know the sum of the building heights in certain rectangular areas of the city. You are given a grid of integers representing the building heights, and you need to process multiple queries. Each query specifies a rectangular sub-region of the grid, and you need to calculate the sum of the building heights in that region. Input: The first line contains an integer N, the size of the grid (N x N). The next N lines each contain N space-separated integers representing the grid. The following line contains an integer Q, the number of queries. The next Q lines each contain four integers i1, j1, i2, j2 representing the top-left (i1, j1) and bottom-right (i2, j2) corners of a rectangular region. Output: For each query, print the sum of the building heights in the specified rectangular region on a new line. Constraints: 1 ≤ N ≤ 1000 1 ≤ Q ≤ 10000 -1000 ≤ grid[i][j] ≤ 1000, 0 ≤ i1 ≤ i2 < N, 0 ≤ j1 ≤ j2 < N Sample Input: 3 1 2 3 4 5 6 7 8 9 2 0 0 1 1 1 1 2 2 Sample Output: 12 28","solution":"def compute_prefix_sum(grid, N): prefix_sum = [[0] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, N + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def query_sum(prefix_sum, i1, j1, i2, j2): return (prefix_sum[i2 + 1][j2 + 1] - prefix_sum[i1][j2 + 1] - prefix_sum[i2 + 1][j1] + prefix_sum[i1][j1]) def solve(N, grid, Q, queries): prefix_sum = compute_prefix_sum(grid, N) results = [] for query in queries: i1, j1, i2, j2 = query results.append(query_sum(prefix_sum, i1, j1, i2, j2)) return results"},{"question":"You are given an array A of N integers. In one operation, you can choose any two elements of the array and remove them if their absolute difference is K. Your task is to find the maximum number of operations you can perform on the array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers, representing the elements of the array A. ------ Output Format ------ For each test case, output an integer representing the maximum number of operations that can be performed. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{5} 1 ≤ A[i], K ≤ 10^{9} - Sum of N over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 2 5 3 1 4 7 10 13 6 2 2 4 6 8 10 12 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test case 1: We can perform two operations: - Remove (1, 4) with a difference of 3. - Remove (7, 10) with a difference of 3. Test case 2: We can perform three operations: - Remove (2, 4) with a difference of 2. - Remove (6, 8) with a difference of 2. - Remove (10, 12) with a difference of 2.","solution":"def max_operations(N, K, A): Returns the maximum number of operations that can be performed on the array A, where the absolute difference of the chosen pair is K. from collections import Counter count_map = Counter(A) operations = 0 for num in A: if count_map[num] > 0: diff_pair = num + K if count_map[diff_pair] > 0: operations += 1 count_map[num] -= 1 count_map[diff_pair] -= 1 return operations def process_test_cases(T, test_cases): result = [] for i in range(T): N, K = test_cases[i][0] A = test_cases[i][1] result.append(max_operations(N, K, A)) return result"},{"question":"Given an integer array `nums` containing n distinct numbers in the range [0, n], your task is to find the one number that is missing from the array. This problem is commonly known as the \\"Missing Number\\" problem. # Input - The first line contains an integer `n` representing the number of elements in the given array `nums`. - The second line contains `n` distinct integers representing the elements of the array `nums` (all integers are within the range [0, n]). # Output Return the missing number from the array. # Constraints - `1 <= n <= 10^6` - The elements in the array are distinct. - The elements in the array are within the range [0, n]. # Example **Input:** ``` 4 3 0 1 4 ``` **Output:** ``` 2 ``` **Explanation:** The array `nums` contains the numbers 0 through 4, but 2 is missing, so the output is 2. # Example **Input:** ``` 3 0 1 3 ``` **Output:** ``` 2 ``` **Explanation:** The array `nums` contains the numbers 0 through 3, but 2 is missing, so the output is 2. # Note: Ensure your solution is optimized to handle the upper constraint efficiently.","solution":"def missing_number(nums): Returns the missing number from the array. Args: nums (list of int): The input array containing distinct numbers. Returns: int: The missing number. # Calculate the sum of the first n natural numbers n = len(nums) total_sum = n * (n + 1) / 2 # Calculate the sum of the array elements array_sum = sum(nums) # The missing number is the difference between total_sum and array_sum return int(total_sum - array_sum)"},{"question":"Alice and Bob are playing a game with strings. Alice has a string S and Bob has a string T. Both strings only contain lowercase alphabets. The game requires Alice to transform her string S into Bob\'s string T by performing a series of operations. In each operation, Alice can choose a subsequence from S and rearrange the characters within that subsequence in any order she wants. She wants to know the minimum number of operations required to transform S into T. If it is not possible to transform S into T, print -1. -----Input section----- The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: The first line contains the string S. The second line contains the string T. -----Output section----- Print one integer per test case - the minimum number of operations required to transform S into T. If it is not possible, print -1. -----Input constraints----- 1 ≤ T ≤ 10 1 ≤ |S|, |T| ≤ 1000 S and T only contain lowercase alphabets. -----Sample Input----- 2 abc bca aabbcc abccba -----Sample Output----- 1 2 -----Explanation----- For the first test case, S can be transformed into T in a single operation (rearranging the entire string \\"abc\\" to \\"bca\\"). For the second test case, one possible set of operations is: - Choose the subsequence \\"aabbcc\\", rearrange it to \\"abccba\\" (1 operation, but T is still not equal to S) - Choose the subsequence \\"abccba\\" and rearrange \\"aabbcc\\"ensuring T matches S (1 more operation). So, 2 operations in total.","solution":"def min_operations_to_transform(S, T): from collections import Counter # If sorted versions of S and T are not the same, transformation is impossible if sorted(S) != sorted(T): return -1 # Detect common lengths from the front in T in reverse within S, this minimizes operations n = len(S) max_match_length = [[0] * (n + 1) for _ in range(n + 1)] for i in range(n): for j in range(n): if S[i] == T[j]: max_match_length[i + 1][j + 1] = max_match_length[i][j] + 1 else: max_match_length[i + 1][j + 1] = max(max_match_length[i + 1][j], max_match_length[i][j + 1]) len_lcs = max_match_length[n][n] return len(S) - len_lcs def minimum_operations_for_all_cases(test_cases): results = [] for S, T in test_cases: results.append(min_operations_to_transform(S, T)) return results"},{"question":"You are given a list of strings representing colors in the form of a list: colors = [\\"red\\", \\"blue\\", \\"green\\", \\"yellow\\",...] Your task is to create a function called count_colors, that will take this list as input and return a dictionary containing the count of each unique color in the list. For example, if the input list is [\\"red\\", \\"blue\\", \\"red\\", \\"green\\", \\"blue\\", \\"blue\\"], the output should be {\\"red\\": 2, \\"blue\\": 3, \\"green\\": 1}. If the list is empty, return an empty dictionary.","solution":"def count_colors(colors): Returns a dictionary containing the count of each unique color in the list. color_count = {} for color in colors: if color in color_count: color_count[color] += 1 else: color_count[color] = 1 return color_count"},{"question":"Develop a function with the following signature: ```python def merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: pass ``` Your task is to merge two sorted lists, `list1` and `list2`, into a single sorted list and return it. The input lists are sorted in non-decreasing order, and the resulting merged list should also be sorted in non-decreasing order. # Example ```python # Example 1 list1 = [1, 3, 5] list2 = [2, 4, 6] print(merge_sorted_lists(list1, list2)) # Output: [1, 2, 3, 4, 5, 6] # Example 2 list1 = [0, 10, 20] list2 = [5, 15, 25] print(merge_sorted_lists(list1, list2)) # Output: [0, 5, 10, 15, 20, 25] # Example 3 list1 = [] list2 = [1, 2, 3] print(merge_sorted_lists(list1, list2)) # Output: [1, 2, 3] # Example 4 list1 = [-5, 0, 5] list2 = [-10, -4, 6] print(merge_sorted_lists(list1, list2)) # Output: [-10, -5, -4, 0, 5, 6] ```","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Use two pointers to iterate through both lists while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements (if any) from list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"In a certain country, license plates are formed based on specific patterns: they either start with two uppercase letters followed by four digits, or four digits followed by two uppercase letters. Given a set of strings, your objective is to identify which among them are valid license plates. Input The input consists of multiple strings, each in a separate line. Each string is composed of exactly six characters. The end of the input is represented by a line containing only the character \'#\'. The number of strings does not exceed 100. Output For each string, output \\"Valid\\" if the string is a valid license plate according to the aforementioned rules, and \\"Invalid\\" otherwise. Sample Input AB1234 1234AB abcd12 1A2B3C ABCD12 123ABC BA9876 # Output for the Sample Input Valid Valid Invalid Invalid Invalid Invalid Valid Example Input AB1234 1234AB abcd12 1A2B3C ABCD12 123ABC BA9876 # Output Valid Valid Invalid Invalid Invalid Invalid Valid","solution":"def is_valid_license_plate(s): Checks if the given string is a valid license plate. The valid formats are two uppercase letters followed by four digits, or four digits followed by two uppercase letters. if len(s) != 6: return \\"Invalid\\" if (s[:2].isupper() and s[2:].isdigit()) or (s[:4].isdigit() and s[4:].isupper()): return \\"Valid\\" return \\"Invalid\\" def check_license_plates(plate_strings): results = [] for plate in plate_strings: if plate == \'#\': break results.append(is_valid_license_plate(plate)) return results"},{"question":"Write a program that reads a list of employee records and determines the end-of-year bonus for each employee based on their annual performance. The performance scores of an employee include scores for productivity (out of 40), teamwork (out of 30), and reliability (out of 30). If an employee does not have a score for a particular category, it is indicated by -1. The end-of-year bonus is awarded based on the following criteria: * If any of the scores is -1, the employee is disqualified and their bonus is zero. * If the total score is greater than or equal to 85, the employee receives a 15% bonus. * If the total score is greater than or equal to 70 and less than 85, the employee receives a 10% bonus. * If the total score is greater than or equal to 50 and less than 70, the employee receives a 5% bonus. * If the total score is less than 50, the employee does not receive any bonus. Input The input consists of multiple datasets. For each dataset, three integers p, t, and r are given in a line, representing productivity, teamwork, and reliability scores respectively. The input ends with three -1 for p, t, and r respectively. Your program should not process the terminal symbols. The number of datasets (the number of employees) does not exceed 50. Output For each dataset, print the percentage of the bonus (15%, 10%, 5% or 0%) in a line. Example Input 35 25 20 40 30 20 30 10 5 -1 -1 -1 Output 10% 15% 0%","solution":"def calculate_bonus(records): Calculate the end-of-year bonus for each employee based on their scores. bonuses = [] for record in records: p, t, r = record if p == -1 or t == -1 or r == -1: bonuses.append(\\"0%\\") continue total_score = p + t + r if total_score >= 85: bonuses.append(\\"15%\\") elif total_score >= 70: bonuses.append(\\"10%\\") elif total_score >= 50: bonuses.append(\\"5%\\") else: bonuses.append(\\"0%\\") return bonuses"},{"question":"A group of friends decided to play a game called \\"String Increment.\\" The game involves an initial string and a set of operations. Each operation allows a player to add a given set of strings to the initial string, but with the following constraint: the length of the new resulting string must be a multiple of the length of the original initial string. The game continues until no further operations can be performed without breaking this constraint. The player who cannot perform an operation without breaking the constraint loses the game. Your task is to determine whether the first player or the second player will win the game when every player plays optimally. The optimal play here is defined as ensuring the opponent has the fewest possible moves while maximizing their own moves till no valid move is possible. Input The first input line contains an integer n representing the number of strings in the set (1 ≤ n ≤ 50). The second input line contains the initial string consisting of Latin lowercase characters not longer than 100 characters. The next n lines each contain a string from the set. These strings are nonempty, consisting of Latin lower-case characters and are no longer than 100 characters. Output Output \\"First\\" or \\"Second\\" to indicate who will win the game. Examples Input 3 abc def ghi jkl Output First Input 2 xyz abcd efgh Output Second","solution":"def will_first_player_win(n, initial_string, strings): Determine if the first player will win given the constraints of the game. :param n: number of strings in the set. :param initial_string: the initial string. :param strings: list of strings in the set. :return: \'First\' if the first player will win, \'Second\' otherwise. initial_length = len(initial_string) # Determine whether each string can be appended to the initial string to form a valid multiple in length. playable_strings = [s for s in strings if (len(s) + initial_length) % initial_length == 0] # If the number of valid playable strings is odd, the first player will win. return \\"First\\" if len(playable_strings) % 2 != 0 else \\"Second\\""},{"question":"You are working on a project that involves scheduling tasks for a team of developers. Each task requires a certain number of developers and a specified number of hours to complete. A developer can only work on one task at a time, and each task must be worked on continuously until it is complete. You need to determine the minimum number of developers required to complete all tasks within the given time constraints. For example, if a task requires 4 developers and takes 5 hours to complete, those developers will be occupied for the full 5 hours. Multiple tasks may overlap in time, so you need to account for the total number of developers needed at any given time. Write a program to calculate the minimum number of developers required. -----Input----- The first line contains an integer n — the number of tasks (1 ≤ n ≤ 100). Each of the following n lines contains three integers s_i, d_i, and h_i — the start time of the task (in hours from the beginning of the project), the number of developers needed, and the duration of the task in hours (0 ≤ s_i < 1000, 1 ≤ d_i, h_i ≤ 100). -----Output----- Print a single number — the minimum number of developers required to complete all tasks. -----Examples----- Input 2 0 3 4 0 2 6 Output 5 Input 3 5 1 3 8 2 4 5 3 2 Output 4 Input 1 0 1 10 Output 1","solution":"def min_developers_needed(n, tasks): max_time = 1000 timeline = [0] * (max_time + 1) for start, developers, hours in tasks: for t in range(start, start + hours): timeline[t] += developers return max(timeline) # Example usage: # tasks = [(0, 3, 4), (0, 2, 6)] # print(min_developers_needed(2, tasks)) # Output: 5"},{"question":"You are given a string consisting of lowercase English letters. You may delete at most one character from this string. Determine whether you can make it a palindrome with at most one deletion. A string is a palindrome if it reads the same forward and backward. Write a function that returns \\"YES\\" if you can make the string a palindrome by removing at most one character, and \\"NO\\" otherwise. Constraints * 1 ≤ length of the string ≤ 10^5 Input The input is given from Standard Input in one line: A single string s Output Output one line containing either \\"YES\\" or \\"NO\\". Examples Input abca Output YES Input racecar Output YES Input abcdefg Output NO","solution":"def can_be_palindrome(s): Checks whether the string can be made a palindrome by removing at most one character. :param s: Input string consisting of lowercase English letters :return: \\"YES\\" if the string can be made a palindrome by removing at most one character, \\"NO\\" otherwise def is_palindrome_range(i, j): Returns True if the substring s[i:j+1] is a palindrome return all(s[k] == s[j - k + i] for k in range(i, (j + i) // 2 + 1)) start, end = 0, len(s) - 1 while start < end: if s[start] != s[end]: return \\"YES\\" if is_palindrome_range(start + 1, end) or is_palindrome_range(start, end - 1) else \\"NO\\" start, end = start + 1, end - 1 return \\"YES\\" # Sample inputs to test the function print(can_be_palindrome(\\"abca\\")) # Expected output: \\"YES\\" print(can_be_palindrome(\\"racecar\\")) # Expected output: \\"YES\\" print(can_be_palindrome(\\"abcdefg\\")) # Expected output: \\"NO\\""},{"question":"Given an integer array, your task is to complete the function `rotateArray` that rotates the array elements to the right by a given number of positions `k`. The rotation should be performed in-place. For example, if the input array is `[1, 2, 3, 4, 5]` and `k` is `2`, the function should modify the array to `[4, 5, 1, 2, 3]`. You are required to complete the function `rotateArray` that takes two arguments: the integer array and the integer `k`, which represents the number of positions to rotate the array. It should modify the array in-place to achieve the desired rotation. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 2 Output: [4, 5, 1, 2, 3] Example 2: Input: arr = [6, 7, 8, 9, 10] k = 3 Output: [8, 9, 10, 6, 7] Your Task: Complete the function `rotateArray()` which takes an integer array and an integer `k` as input parameters and modifies the array in-place to achieve the right rotation. Expected Time Complexity: O(N), where N is the length of the array. Expected Auxiliary Space: O(1) Constraints: 1 <= length of arr <= 100 1 <= arr[i] <= 1000 0 <= k <= 100","solution":"def rotateArray(arr, k): Rotates the elements of the array to the right by k positions in-place. :param arr: List[int], the input array :param k: int, the number of positions to rotate n = len(arr) k %= n # Handle cases where k >= n if k == 0: return # Reverse the entire array arr.reverse() # Reverse the first k elements arr[:k] = reversed(arr[:k]) # Reverse the remaining elements arr[k:] = reversed(arr[k:])"},{"question":"You are given a string S and a list of words L. Determine if the string S can be segmented into a space-separated sequence of one or more dictionary words from L. Input The first line contains string S. The second line contains an integer N, the number of words in the list L. Each of the following N lines contains a word from the list L. All strings consist of lowercase Latin letters. Output Output \\"YES\\" if the string S can be segmented into one or more words from the list L. Otherwise, output \\"NO\\". Constraints 1 ≤ length of S ≤ 10^5 1 ≤ N ≤ 10^4 1 ≤ length of each word in the list L ≤ 10^5 SAMPLE INPUT leetcode 2 leet code SAMPLE OUTPUT YES","solution":"def can_segment_string(S, L): Determine if the string S can be segmented into a space-separated sequence of one or more dictionary words from L. word_set = set(L) dp = [False] * (len(S) + 1) dp[0] = True for i in range(1, len(S) + 1): for j in range(i): if dp[j] and S[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(S)] else \\"NO\\""},{"question":"You are part of the development team for a new arcade game, and your task is to implement a function for one specific gaming feature. Each level of the game involves collecting a certain number of coins which are labeled consecutively starting from 1. Your job is to write a function that calculates the minimum time required to collect all the coins in a given level, based on the rule that the player can collect coins in batches. In one unit of time, the player can collect either the next single coin or the next pair of consecutive coins. -----Input:----- - First-line will contain T, the number of test cases. - Each test case contains a single line of input, one integer N representing the total number of coins in the level. -----Output:----- For each test case, output the minimum time required to collect all the coins. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 -----Sample Input:----- 3 1 2 5 -----Sample Output:----- 1 1 3 -----EXPLANATION:----- 1: Only one coin, so only 1 unit of time is needed. 2: Two coins, these can be collected in 1 unit of time as they are consecutive. 5: The player can collect the first two coins in 1 unit, the next two in another unit, and the remaining one coin in the last unit, totaling 3 units of time.","solution":"def min_time_to_collect_coins(T, cases): Calculates the minimum time required to collect all the coins in each level. Parameters: T (int): The number of test cases. cases (list): A list of integers where each integer represents the number of coins in a level. Returns: list: A list of integers where each integer represents the minimum time to collect all coins for a corresponding level. results = [] for N in cases: # To collect N coins, we can collect in pairs (N//2) times, # and if there\'s an odd one left, it adds one more unit. min_time = (N // 2) + (N % 2) results.append(min_time) return results"},{"question":"A conveyor belt system transports packages from one point to another in a warehouse. The conveyor belt can only carry a certain weight limit at any moment. Each package has a different weight and the packages arrive at consecutive time intervals. You need to calculate the maximum number of consecutive packages that can be placed on the conveyor belt without exceeding the weight limit. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ W ≤ 1000 - 1 ≤ weight[i] ≤ 100 -----Input----- The first line contains two integers, N and W, where N is the number of packages and W is the weight limit of the conveyor belt. The second line contains N integers where the i-th integer is the weight of the i-th package. -----Output----- Print the maximum number of consecutive packages that can be placed on the conveyor belt without exceeding the weight limit. -----Sample Input----- 6 50 10 20 30 10 10 10 -----Sample Output----- 3 Explanation: One possible set of packages that can be placed on the belt without exceeding the weight limit is: [10, 20, 10]. Another set could be [30, 10, 10]. Each set contains 3 packages which is the maximum number possible under given constraints.","solution":"def max_consecutive_packages(N, W, weights): Calculate the maximum number of consecutive packages that can be placed on the conveyor belt without exceeding the weight limit. :param N: int, the number of packages :param W: int, the weight limit of the conveyor belt :param weights: List[int], the weights of the packages :return: int, the maximum number of consecutive packages max_packages = 0 current_weight = 0 start = 0 for end in range(N): current_weight += weights[end] while current_weight > W: current_weight -= weights[start] start += 1 max_packages = max(max_packages, end - start + 1) return max_packages"},{"question":"# Problem: Circular Route You are given a circular route consisting of `n` checkpoints labeled from `1` to `n`. Each checkpoint has a certain amount of fuel stored in it which you can use to move from checkpoint to checkpoint in a clockwise manner. The circular route has a peculiar property: If you start at checkpoint `i` (1 ≤ `i` ≤ `n`), you will consume `i` liters of fuel to reach the next checkpoint `(i % n) + 1`. You need to determine whether it is possible to start at exactly one checkpoint with a full tank of fuel and successfully complete the entire circular route without running out of fuel. The tank\'s capacity is unlimited, and you can store as much fuel as necessary. # Input - The first line consists of an integer `n` (1 ≤ `n` ≤ 10^5) — the number of checkpoints. - The second line contains `n` space-separated integers, where the `i-th` integer `a_i` (0 ≤ a_i ≤ 10^9) denotes the amount of fuel at checkpoint `i`. # Output Print \\"YES\\" if there exists a starting checkpoint from which you can complete the entire circular route, otherwise print \\"NO\\". # Examples Example 1 **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` YES ``` **Explanation:** Starting at checkpoint 3, you will have 3 liters of fuel, which will be enough to reach checkpoint 4. From checkpoint 4, you will have 5 additional liters of fuel, making it simple to complete the route. Example 2 **Input:** ``` 3 1 0 4 ``` **Output:** ``` NO ``` **Explanation:** From any starting checkpoint, it is not possible to complete the entire route due to insufficient fuel at one of the checkpoints. # Note The key to solving this problem is ensuring that at each checkpoint, the cumulated amount of fuel is sufficient to continue to the next checkpoint, considering the fuel consumption increasing as you proceed. The complexity of the problem is managed by the constraints specified. # Constraints - Remember that `(i % n) + 1` cyclically ensures the route returns to the initial checkpoint after completing the circle. **Good luck, and happy coding!**","solution":"def can_complete_circular_route(n, fuel): total_fuel = 0 total_cost = 0 current_fuel = 0 start_index = 0 for i in range(n): total_fuel += fuel[i] total_cost += (i + 1) current_fuel += fuel[i] - (i + 1) if current_fuel < 0: start_index = i + 1 current_fuel = 0 if total_fuel >= total_cost: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string, the task is to remove all the vowels from the string and return the resultant string. Vowels in English are \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase). **Input Format** A single line containing a string S. **Constraints** 1 leq text{length of } S leq 1000 **Output Format** Print the string after removing all the vowels. **Sample Input 0** Programming **Sample Output 0** Prgrmmng **Explanation 0** The given string is \\"Programming\\". After removing the vowels, the string becomes \\"Prgrmmng\\". Hence, we print \\"Prgrmmng\\".","solution":"def remove_vowels(s): Removes all vowels (both lowercase and uppercase) from the string s and returns the resultant string. vowels = \'aeiouAEIOU\' return \'\'.join(char for char in s if char not in vowels)"},{"question":"Given an array arr[] of integers and an integer k such that 1 <= k <= n where n is the length of the array. Your task is to find the k-th largest element in the array using a quickselect algorithm. Example 1: Input: arr[] = [3,2,1,5,6,4] k = 2 Output: 5 Explanation: The 2nd largest element in the array is 5. Example 2: Input: arr[] = [3,2,3,1,2,4,5,5,6] k = 4 Output: 4 Explanation: The 4th largest element in the array is 4. Your Task: You are required to complete the function findKthLargest(). It should take arr[] and k as input, and return the k-th largest element in the array. Expected Time Complexity: O(n) on average Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 -10^4 <= arr[i] <= 10^4","solution":"import random def partition(arr, left, right): pivot_index = random.randint(left, right) pivot = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] i = left for j in range(left, right): if arr[j] > pivot: # Note: We use \'>\' to find the k-th largest element. arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i def quickselect(arr, left, right, k): if left == right: return arr[left] pivot_index = partition(arr, left, right) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, left, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, right, k) def findKthLargest(arr, k): return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"In a parallel universe, there is a famous game called Squared Race. In this game, players are given a sequence of integers and their task is to maximize their score by selecting exactly n integers such that the sum of their squares is as large as possible. You are given a sequence of integers a1, a2, ..., am, where n ≤ m and 1 ≤ n ≤ 3000. Your task is to write a function that selects exactly n integers from the sequence such that the sum of their squares is maximized. Input The first line contains two integers, m and n (1 ≤ n ≤ m ≤ 3000) — the length of the sequence and the number of integers to select. The second line contains m integers a1, a2, ..., am (−10^4 ≤ ai ≤ 10^4) — the elements of the sequence. Output Output one integer — the maximum sum of squares of n selected integers. Example Input 5 3 1 2 3 4 5 Output 50 Explanation The optimal selection would be [3, 4, 5], giving the sum of squares 3^2 + 4^2 + 5^2 = 50. Note * The optimal selection does not have to include the largest integers in the sequence. * There can be multiple correct answers, but the output should be the maximum achievable sum of squares.","solution":"def max_sum_of_squares(m, n, sequence): Returns the maximum sum of squares of exactly n integers selected from the sequence. :param m: int, length of the sequence :param n: int, number of integers to select :param sequence: list of int, the sequence of integers :return: int, maximum sum of squares of n integers # Sort the sequence in descending order based on the absolute values sorted_sequence = sorted(sequence, key=abs, reverse=True) # Select the top n elements top_n_elements = sorted_sequence[:n] # Calculate the sum of squares sum_of_squares = sum(x ** 2 for x in top_n_elements) return sum_of_squares"},{"question":"David is an event organizer and he needs to manage a sequence of events that happen in a day at a conference. Each event has a starting and ending time. David needs to find out if he can schedule all the given events without any conflicts. If it is not possible to schedule all events without overlap, David wants to find the maximum number of events that can be scheduled without any conflicts. Input: First line contains the number of test cases. Each test case starts with an integer N, the number of events. The following N lines contain pairs of integers indicating the start and end times of each event. Output: For each test case, print \\"YES\\" if all events can be scheduled without conflict, otherwise print \\"NO\\" followed by the maximum number of non-overlapping events that can be scheduled. SAMPLE INPUT 2 3 1 3 2 5 4 6 4 1 2 3 4 0 6 5 7 SAMPLE OUTPUT NO 2 YES Explanation: Test case 1: It\'s not possible to schedule all three events without conflicts. However, the maximum number of events that can be scheduled is 2 (for example, events [1, 3] and [4, 6]). Test case 2: It is possible to schedule all four events without conflicts, so the output is \\"YES\\".","solution":"from typing import List, Tuple def can_schedule_events(test_cases: List[List[Tuple[int, int]]]) -> List[str]: results = [] for events in test_cases: # Sort events based on the ending times events.sort(key=lambda x: x[1]) max_non_overlapping = 0 end_time = 0 for start, end in events: if start >= end_time: max_non_overlapping += 1 end_time = end # Check if all events are non-overlapping all_non_overlapping = (max_non_overlapping == len(events)) if all_non_overlapping: results.append(\\"YES\\") else: results.append(f\\"NO {max_non_overlapping}\\") return results"},{"question":"You are given a list of integers and a list of queries. Each query consists of a range of indices and asks for the maximum integer in that range. The task is to process each query and output the maximum integer for each specified range. Input: The first line contains two integers, N (the number of integers in the list) and Q (the number of queries). The next line contains N integers which make up the list. Each of the following Q lines contains two integers A and B, representing the range of indices (inclusive) for each query. Output: For each query, output the maximum integer in the specified range. Assume the list indices are zero-based. Example: Input: 5 3 1 3 5 7 9 1 3 0 4 2 2 Output: 7 9 5 Note: - N will be between 1 and 10^5. - Q will be between 1 and 10^5. - The integers in the list will be between -10^9 and 10^9. - The range specified in each query will be within the list boundaries.","solution":"def max_in_range(arr, queries): Returns the maximum integer in the specified range for each query. Args: arr: List of integers. queries: List of tuples, where each tuple contains two integers representing the range (inclusive). Returns: List of maximum integers for each query. results = [] for (a, b) in queries: max_value = max(arr[a:b+1]) results.append(max_value) return results"},{"question":"Rita works as a software engineer and she loves solving puzzles. One day, while exploring a new puzzle, she encountered an interesting problem involving numbers and summation. The problem is as follows: Given an array of n integers, Rita wants to find the length of the shortest subarray such that the sum of its elements is greater than or equal to a given integer x. A subarray is a contiguous part of an array. You are required to help Rita by writing a program that finds the length of the shortest subarray with a sum greater than or equal to x. If no such subarray exists, the program should return -1. Input The first line of input contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9), denoting the length of the array and the target sum, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), which are the elements of the array. Output Output a single integer, which is the length of the shortest subarray with sum greater than or equal to x. If there is no such subarray, output -1. Examples Input 10 15 1 2 3 4 5 6 7 8 9 10 Output 2 Input 5 100 1 2 3 4 5 Output -1 Note In the first sample testcase, the subarray [7, 8] has a sum of 15, which is equal to x, and its length is 2. This is the shortest subarray that meets the requirement. In the second sample testcase, there is no subarray with a sum greater than or equal to 100, so the output is -1.","solution":"def shortest_subarray_with_sum(arr, x): Returns the length of the shortest subarray with sum greater than or equal to x. If no such subarray exists, return -1. n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= x: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given a list of points in a 2D plane, your task is to determine whether all points lie on a straight line or not. The coordinates of each point are given as integer pairs. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of points. Each of the following n lines contains two integers xi and yi (−10^9 ≤ xi, yi ≤ 10^9), where (xi, yi) represents the coordinates of the i-th point. Output Print \\"YES\\" if all points lie on a straight line, otherwise print \\"NO\\". Example Input 4 1 1 2 2 3 3 4 4 Output YES Input 4 1 2 2 3 3 4 4 6 Output NO Note In the first sample, all points lie on the line y = x. In the second sample, the points do not lie on a single straight line.","solution":"def are_points_collinear(points): This function checks whether all given points lie on a straight line. :param points: List of tuples representing the coordinates of the points (xi, yi). :return: \'YES\' if all points lie on a straight line, otherwise \'NO\'. if len(points) <= 2: return \'YES\' x0, y0 = points[0] x1, y1 = points[1] for i in range(2, len(points)): xi, yi = points[i] if (y1 - y0) * (xi - x0) != (yi - y0) * (x1 - x0): return \'NO\' return \'YES\'"},{"question":"You are given an array `points` where `points[i] = (xi, yi)` is the coordinates of the `i-th` point on a 2D plane. A line is defined by two points, and we want to find the maximum number of points that lie on the same straight line. Write a function to determine the maximum number of points that lie on the same straight line. # Input: - An array `points` of length `n`, where each element is a to be represented as a tuple `(xi, yi)`. - Each point has integer coordinates. The value of `n` is at most 300. # Output: - An integer representing the maximum number of points that lie on the same straight line. # Example: Input: points = [(1,1), (2,2), (3,3)] Output: 3 Input: points = [(1,1), (3,2), (5,3), (4,1), (2,3), (1,4)] Output: 4 # Explanation: In the first example, all three points lie on the line y = x. In the second example, the points (1, 1), (3, 2), (5, 3), and (2, 3) do not lie on the same straight line, but the subset of points (1, 4), (2, 3), (3, 2), (4, 1) does, making the maximum number of points that lie on the same straight line equal to 4. # Constraints: - The coordinates of the points will be in the range `-10^4` to `10^4`. - The number of points `n` will not exceed `300`. # Function Signature: ```python def maxPoints(points: List[Tuple[int, int]]) -> int: ```","solution":"from collections import defaultdict from math import gcd from typing import List, Tuple def maxPoints(points: List[Tuple[int, int]]) -> int: def generate_key(dx, dy): if dx == 0: return (0, 1) if dy == 0: return (1, 0) sign = -1 if (dx < 0) ^ (dy < 0) else 1 g = gcd(abs(dx), abs(dy)) return (sign * abs(dx) // g, abs(dy) // g) if not points: return 0 n = len(points) if n <= 2: return n max_points = 0 for i in range(n): lines = defaultdict(int) duplicate = 1 for j in range(i + 1, n): if points[i] == points[j]: duplicate += 1 continue dx = points[j][0] - points[i][0] dy = points[j][1] - points[i][1] key = generate_key(dx, dy) lines[key] += 1 max_points = max(max_points, duplicate + max(lines.values(), default=0)) return max_points"},{"question":"There is a cycling race happening in your city. The race track is a straight road with several checkpoints along the way. Each checkpoint has a certain number of water bottles available. However, you can collect water bottles only once at any checkpoint, and there is a limit to the total number of water bottles you can carry at a time. The goal is to maximize the number of water bottles collected by the end of the race. You need to write a program that determines the maximum number of water bottles that can be collected given the constraints. Input The input consists of multiple datasets. Each dataset is given in the following format: N C w1 w2 ... wN The first line contains two integers, N (1 ≤ N ≤ 100000) - the number of checkpoints, and C (1 ≤ C ≤ 1000) - the maximum number of water bottles you can carry at a time. The second line contains N integers wi (1 ≤ wi ≤ 1000) representing the number of water bottles available at each checkpoint. Output For each dataset, output a single integer representing the maximum number of water bottles you can collect. If it is not possible to collect any water bottles, output 0. Example Input 5 10 1 2 3 4 5 5 5 6 7 8 9 10 4 8 5 10 3 7 0 0 Output 10 5 8 Explanation: - In the first dataset, you can collect all bottles from the first checkpoint (1), then from the second (2), then from the third (3), and fourth (4). In total: 1+2+3+4=10. - In the second dataset, all checkpoints have more bottles than you can carry (5). So you will take 5 bottles from any checkpoint. - In the third dataset, you can only collect from the checkpoints with 5 and 3 bottles as they sum to 8 (5+3=8). Focus on the optimization of collecting the maximum number of water bottles while adhering to the given constraints.","solution":"def max_water_bottles(n, c, bottles): Determines the maximum number of water bottles that can be collected given the constraints. Parameters: n (int): The number of checkpoints. c (int): The maximum number of water bottles one can carry at a time. bottles (list of int): The number of water bottles available at each checkpoint. Returns: int: The maximum number of water bottles collected. if n == 0 or c == 0: return 0 bottles.sort() total_bottles = 0 for water in bottles: if total_bottles + water <= c: total_bottles += water else: return c return total_bottles"},{"question":"A company hosts several events annually, and each event has a specific start and end time represented in 24-hour format (HH:MM). The HR team wants to know the maximum number of events that overlap at any point in time during the day. The task is to write a program that, given a list of events with their start and end times, determines the peak overlap of events. Input: The first line contains an integer t, denoting the number of test cases. Each test case starts with an integer N, representing the number of events. The next N lines each contain two strings, the start and end times of the events in \\"HH:MM\\" format. Output: For each test case, print a single integer denoting the maximum number of overlapping events at any point in time. Constraints: 1. 1 ≤ t ≤ 10 2. 1 ≤ N ≤ 1000 3. The start and end times will follow the 24-hour format and will be valid times. 4. An event starting at `start` and ending at `end` is considered to be `[start, end-1]`. For example, an event from \\"10:00\\" to \\"12:00\\" includes the minutes from \\"10:00\\" to \\"11:59\\". SAMPLE INPUT 1 3 09:00 10:30 09:15 10:00 10:00 11:00 SAMPLE OUTPUT 2 Explanation In the sample test case, the events overlap as follows: - The first and second events overlap between \\"09:15\\" and \\"10:00\\". - The first and third events overlap between \\"10:00\\" and \\"10:30\\". The maximum number of events overlapping at any point in time is 2.","solution":"def to_minutes(time_str): Converts a time string in HH:MM format to the total number of minutes since 00:00. hh, mm = map(int, time_str.split(\':\')) return hh * 60 + mm def max_overlap(events): Determines the maximum number of overlapping events. times = [] # Convert all start and end times to minutes and prepare a list of all events for start, end in events: start_min = to_minutes(start) end_min = to_minutes(end) times.append((start_min, \\"start\\")) times.append((end_min, \\"end\\")) # Sort times based on minutes, and in case of tie, \\"end\\" comes before \\"start\\" times.sort(key=lambda x: (x[0], x[1] == \\"start\\")) max_overlap = 0 current_overlap = 0 # Sweep line algorithm to find maximum overlap for _, type_of_time in times: if type_of_time == \\"start\\": current_overlap += 1 max_overlap = max(max_overlap, current_overlap) else: current_overlap -= 1 return max_overlap def process_test_cases(test_cases): results = [] for events in test_cases: results.append(max_overlap(events)) return results"},{"question":"A Farmer owns a rectangular field of length L meters and width W meters. He wants to create a path of uniform width P (in meters) around the perimeter of the field so that he can walk around the entire field without stepping on the crops. You need to calculate the area of the path. You are given the dimensions of the field (L and W) and the width of the path (P). Write a function that returns an integer representing the area of the path in square meters. Example 1: Input: L = 10, W = 8, P = 2 Output: 72 Explanation: The total area including the path is (10+2*2)*(8+2*2) = 14 * 12 = 168. Subtracting the area of the field, 168 - 80 = 88. Therefore, the area of the path is 88 square meters. Example 2: Input: L = 6, W = 3, P = 1 Output: 26 Explanation: The total area including the path is (6+2*1)*(3+2*1) = 8 * 5 = 40. Subtracting the area of the field, 40 - 18 = 22. Therefore, the area of the path is 22 square meters. Your task: You do not need to read input or print anything. Your task is to complete the function pathArea() which takes the length L, width W, and width P as input parameters and returns an integer representing the area of the path. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 ≤ L, W ≤ 1000 1 ≤ P ≤ min(L, W)","solution":"def pathArea(L, W, P): Calculate the area of the path around the rectangular field. Parameters: L (int): Length of the field. W (int): Width of the field. P (int): Width of the path. Returns: int: Area of the path in square meters. total_area_with_path = (L + 2 * P) * (W + 2 * P) field_area = L * W path_area = total_area_with_path - field_area return path_area"},{"question":"Alicia is planning a trip and wants to minimize her travel expenses. She has a travel roadmap consisting of n cities and m bidirectional roads connecting them. Each road has a travel cost associated with it. She can travel between any two cities directly if there is a road connecting them, or indirectly by traveling through intermediate cities. Alicia has decided that she wants to travel from her starting city, city s, to her destination city, city t, in a way that minimizes her total travel cost. Help Alicia by determining the minimum travel cost for her trip. Input The first line of the input contains three integers, n, m, and q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 10000), representing the number of cities, the number of roads, and the number of queries respectively. Each of the following m lines contains three integers u, v and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1000), representing a road between city u and city v with a travel cost of c. Each of the following q lines contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t), representing the starting and destination cities for each query. Output For each query, print a single number on a new line — the minimum travel cost from city s to city t. If there is no way to travel from s to t, print -1. Examples Input 5 6 3 1 2 2 1 3 4 2 3 1 3 4 3 2 5 10 4 5 1 1 4 1 5 2 4 Output 6 7 4 Note In the first query, the cheapest path from city 1 to city 4 is 1 -> 2 -> 3 -> 4 with a cost of 2+1+3=6. In the second query, the cheapest path from city 1 to city 5 is 1 -> 2 -> 3 -> 4 -> 5 with a cost of 2+1+3+1=7. In the third query, the cheapest path from city 2 to city 4 is 2 -> 3 -> 4 with a cost of 1+3=4.","solution":"import heapq def dijkstra(n, edges, start, target): graph = {i: [] for i in range(1, n+1)} for u, v, c in edges: graph[u].append((v, c)) graph[v].append((u, c)) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_node == target: return current_distance if current_distance > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if dist[target] == float(\'inf\') else dist[target] def find_minimum_travel_cost(n, m, q, roads, queries): results = [] for s, t in queries: results.append(dijkstra(n, roads, s, t)) return results"},{"question":"Little Bob loves playing with arrays. He has just learned about sorting algorithms and is excited to test his skills. He decides to create a special kind of problem for himself. The problem is to sort a given array such that the result is an alternating sequence of the maximum remaining element and the minimum remaining element from the unsorted part of the array. For example, given the array [1, 3, 5, 2, 4, 6], Bob wants to sort it to [6, 1, 5, 2, 4, 3]. Your task is to write a program that performs this alternating max-min sorting for a given array. # Input The first line contains an integer T, denoting the number of test cases. The following T lines contain the test cases. Each test case begins with an integer N, denoting the number of elements in the array, followed by N space-separated integers representing the array. # Output For each test case, output one line containing the sorted array in the alternating max-min order. # Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100,000 1 ≤ Array elements ≤ 1,000,000,000 # Example Input: 2 6 1 3 5 2 4 6 5 9 7 2 5 8 Output: 6 1 5 2 4 3 9 2 8 5 7 Note: The elements in the array can be very large, ensure your solution is efficient to handle the constraints provided.","solution":"def alternating_sort(arr): Returns the array sorted in an alternating sequence of the maximum and minimum remaining elements from the unsorted part of the array. sorted_arr = sorted(arr) result = [] while sorted_arr: if sorted_arr: result.append(sorted_arr.pop()) if sorted_arr: result.append(sorted_arr.pop(0)) return result def process_test_cases(test_cases): results = [] for case in test_cases: N, *arr = case results.append(alternating_sort(arr)) return results"},{"question":"A group of scientists are conducting research on a rare species of fish that moves in schools. They have discovered that the fish move in a grid formation and want to study the area covered by the school of fish. Each fish is represented by the cell of a 2D grid with \'1\' and an empty cell is represented by \'0\'. The fish school is connected either vertically or horizontally. Connections diagonally are not considered. You need to write a program to find the number of distinct fish schools in the given grid. -----Input----- The first line contains a single integer T - the number of test cases. T test cases follow. The first line of each test case contains two integers M and N - the number of rows and columns of the grid respectively. The next M lines each contain a string of length N consisted only of digits 0 and 1, representing the grid. -----Output----- In T lines print T integers - the number of distinct fish schools for the corresponding test cases. -----Constraints----- 1 <= T <= 20 1 <= M, N <= 100 -----Example----- Input: 2 3 3 110 010 001 4 5 11000 11000 00100 00011 Output: 2 3","solution":"def num_fish_schools(grid): if not grid: return 0 M, N = len(grid), len(grid[0]) visited = [[False] * N for _ in range(M)] def dfs(i, j): if i < 0 or j < 0 or i >= M or j >= N or grid[i][j] == \'0\' or visited[i][j]: return visited[i][j] = True dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) school_count = 0 for i in range(M): for j in range(N): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) school_count += 1 return school_count def count_fish_schools(T, test_cases): results = [] for case in test_cases: M, N, grid = case count = num_fish_schools(grid) results.append(count) return results # Read input def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): M, N = map(int, lines[index].split()) grid = [lines[index + 1 + i] for i in range(M)] test_cases.append((M, N, grid)) index += M + 1 results = count_fish_schools(T, test_cases) return results"},{"question":"Sophie has a string s consisting of lowercase English letters. She wants to transform this string into a palindrome through a series of operations. In each operation, she can replace any single character in the string with another lowercase English letter. What is the minimum number of operations Sophie needs to perform to transform the string into a palindrome? -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 2000) containing only lowercase English letters. -----Output----- Output a single integer, the minimum number of operations needed to transform the string into a palindrome. -----Examples----- Input abca Output 1 Input racecar Output 0","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations needed to transform the string s into a palindrome. n = len(s) operations = 0 # Compare characters from both ends to the center for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"In a certain game, you are presented with a string S consisting only of uppercase English letters. Your task is to determine if the string is a palindrome. A string is called a palindrome if it reads the same forward and backward. -----Constraints----- - S is a non-empty string of at most 100 characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If S is a palindrome, print YES; otherwise, print NO. -----Sample Input----- RACECAR -----Sample Output----- YES The string \\"RACECAR\\" reads the same forward and backward, so it is a palindrome.","solution":"def is_palindrome(S): Determines if the provided string S is a palindrome. Args: S (str): The input string consisting of uppercase English letters. Returns: str: \\"YES\\" if S is a palindrome, \\"NO\\" otherwise. if S == S[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Sarah came up with a new problem for toggling the states of bulbs. There are initially M bulbs, each can either be ON (denoted by 1) or OFF (denoted by 0). You are given an array of size M where each element represents the initial state of the bulb (either 0 or 1). You need to perform N operations on this array. In each operation, you are given two integers L and R which indicate the range of bulbs to toggle (i.e., change 0 to 1 and 1 to 0). After performing all the operations, print the final state of the bulbs. -----Input:----- The first line contains two integers M and N, denoting the number of bulbs and the number of operations respectively. The second line contains M integers, the initial states of the bulbs. The next N lines each contain two integers L and R. -----Output:----- Output one line containing M integers, representing the final states of the bulbs after performing all the operations. -----Constraints------ 1 <= M <= 1000 1 <= N <= 1000 0 <= initial state <= 1 1 <= L, R <= M L <= R -----Sample Input:----- 5 3 0 1 0 1 0 1 3 2 4 3 5 -----Sample Output:----- 1 0 1 0 1 -----EXPLANATION:----- Initial states: 0 1 0 1 0 After first operation (1, 3): 1 0 1 1 0 After second operation (2, 4): 1 1 0 0 0 After third operation (3, 5): 1 1 1 1 1","solution":"def toggle_bulbs(M, N, initial_states, operations): Toggles the states of bulbs based on a list of operations. Parameters: M (int): Number of bulbs. N (int): Number of operations. initial_states (list of int): Initial states of the bulbs. operations (list of tuple): Each tuple contains two integers (L, R), indicating the range of bulbs to toggle. Returns: list of int: Final states of the bulbs. bulbs = initial_states[:] for (L, R) in operations: for i in range(L - 1, R): bulbs[i] = 1 - bulbs[i] return bulbs # Example usage: # M, N = 5, 3 # initial_states = [0, 1, 0, 1, 0] # operations = [(1, 3), (2, 4), (3, 5)] # print(toggle_bulbs(M, N, initial_states, operations)) # Output: [1, 1, 1, 1, 1]"},{"question":"Problem Statement Given two integers M and N, find the greatest common divisor (GCD) of all integers between M and N (inclusive). Input Format The only line of input contains two integers M and N separated by a space. Output Format Output the GCD of all integers between M and N. Constraints 1 ≤ M ≤ N ≤ 10^6 SAMPLE INPUT 10 15 SAMPLE OUTPUT 1","solution":"import math def gcd_of_range(m, n): Returns the GCD of all integers between m and n (inclusive). # GCD of a range where there is more than one distinct number within the range is always 1 start = min(m, n) end = max(m, n) if start == end: return start return 1"},{"question":"A company wants to create a simple payroll system. Each employee has an ID, name, and hourly wage. The company also needs to keep track of the total hours worked for each employee. Your task is to implement a class `Employee` with the following requirements: 1. Implement the `Employee` class with: - A constructor that initializes the following attributes: - `emp_id` (str): the ID of the employee. - `name` (str): the name of the employee. - `hourly_wage` (float): the hourly wage of the employee. - `total_hours` (float): the total hours worked by the employee (initially set to 0). - A method `work_hours` that: - Takes a single parameter `hours` (float) which is the number of hours worked in a single session. - Adds `hours` to `total_hours`. - A method `calculate_pay` that: - Returns the total pay for the employee, calculated as `total_hours` multiplied by `hourly_wage`. Function Signature: ```python class Employee: def __init__(self, emp_id: str, name: str, hourly_wage: float): pass def work_hours(self, hours: float): pass def calculate_pay(self) -> float: pass ``` Input and Output Format: The Employee class should be implemented as described. For example: ```python # Creating an instance of Employee employee = Employee(\\"E001\\", \\"John Doe\\", 15.0) # Recording worked hours employee.work_hours(8) employee.work_hours(4.5) # Calculating total pay print(employee.calculate_pay()) # Expected output: 187.5 ``` Constraints: - The hourly wage will be a floating point number between 10.0 and 100.0. - The total hours worked will always be non-negative and a floating point number. - The employee ID will be a non-empty string of at most 10 characters.","solution":"class Employee: def __init__(self, emp_id: str, name: str, hourly_wage: float): self.emp_id = emp_id self.name = name self.hourly_wage = hourly_wage self.total_hours = 0.0 def work_hours(self, hours: float): self.total_hours += hours def calculate_pay(self) -> float: return self.total_hours * self.hourly_wage"},{"question":"Geek is an avid gardener. He has a garden with N different kinds of plants. Each plant grows at a different rate and requires a specific amount of water to grow one unit. Geek wants to grow one kind of plant to its maximum potential in T days and earn points for the growth. He can water the plant as many times as necessary each day. Each plant of kind i needs W_{i} liters of water per day to grow by G_{i} units, and Geek can use at most M liters of water per day. Determine the maximum growth Geek can achieve with one type of plant in T days. Example 1: Input: N = 3, T = 5, M = 10 W = {2, 3, 5} G = {4, 5, 10} Output: 50 Explanation: If Geek chooses the first kind of plant: He needs 2 liters per day to grow 4 units, and with 10 liters per day, it grows 5 * (10 / 2) * 4 = 100 units. If Geek chooses the second kind of plant: He needs 3 liters per day to grow 5 units, and with 10 liters per day, it grows 5 * (10 / 3) * 5 ≈ 83 units. If Geek chooses the third kind of plant: He needs 5 liters per day to grow 10 units, and with 10 liters per day, it grows 5 * (10 / 5) * 10 = 50 units. So the maximum growth Geek can achieve in those 5 days is 100 units. Your Task: You do not need to read input or print anything. Your task is to complete the function maxGrowth() which takes N, T, M, W and G as input parameters and returns the maximum growth Geek can achieve with one type of plant in T days. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ T, M, W_i, G_i ≤ 10^9","solution":"def maxGrowth(N, T, M, W, G): max_growth = 0 for i in range(N): water_per_day = W[i] growth_per_day = G[i] daily_growth = (M // water_per_day) * growth_per_day total_growth = T * daily_growth max_growth = max(max_growth, total_growth) return max_growth"},{"question":"You are given an array of n integers and a list of m queries. Each query consists of two indices l and r, and the task is to calculate the sum of the elements in the subarray from index l to index r (1-based inclusive). After answering all the queries, the array is modified by incrementing each element by 1. -----Input----- The first line contains two integers n and m (1 leq n, m leq 10^5). The next line contains n integers a_i (1 leq a_i leq 10^9). The following m lines contain two integers l and r (1 leq l leq r leq n) — the indices for each query. -----Output----- For each query, output the sum of the elements in the subarray from index l to index r, before incrementing the array. -----Examples----- Input 5 3 1 2 3 4 5 2 4 1 5 3 3 Output 9 15 3 -----Note----- For the first query, the subarray from index 2 to 4 is [2, 3, 4] and the sum is 9. For the second query, the subarray from index 1 to 5 is [1, 2, 3, 4, 5] and the sum is 15. For the third query, the subarray from index 3 to 3 is [3] and the sum is 3. After answering all queries, the array gets incremented to [2, 3, 4, 5, 6].","solution":"def preprocess_prefix_sums(arr): Preprocess the array to get the prefix sums which help in finding the sum of any subarray efficiently. prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): prefix_sums[i + 1] = prefix_sums[i] + arr[i] return prefix_sums def query_sum(prefix_sums, l, r): Returns the sum of the subarray from index l to r, inclusive. l and r are 1-based indices. return prefix_sums[r] - prefix_sums[l - 1] def process_queries(n, m, arr, queries): Process the queries to get the sum of the subarray for each query and return them as a list of results. The array gets incremented at the end of processing all queries. # Preprocess to get prefix sums prefix_sums = preprocess_prefix_sums(arr) results = [] # Process each query for l, r in queries: results.append(query_sum(prefix_sums, l, r)) # Increment each element of the array by 1 arr = [x + 1 for x in arr] return results, arr"},{"question":"In a city, there are M parking slots, numbered from 1 to M. Each slot can either be empty or occupied. Initially, all parking slots are empty. You are given a sequence s={s_1,s_2,s_3,......} as input. You would like to set each slot i to state s_i (where s_i is either 0 for empty or 1 for occupied), by repeating the following \\"parking operation\\": - Specify integers l and r. Toggle the occupancy state of all parking slots x such that l leq x leq r (i.e., 0 becomes 1 and 1 becomes 0). Find the minimum number of parking operations required to satisfy the condition. -----Constraints----- - 1 leq M leq 100 - s_i is either 0 or 1 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M s_1 s_2 s_3 ...... s_M -----Output----- Print the minimum number of parking operations required to satisfy the condition. -----Sample Input----- 5 1 0 1 0 1 -----Sample Output----- 3 One way to achieve it is: - Perform the operation with (l,r) = (1, 1). - Perform the operation with (l,r) = (3, 3). - Perform the operation with (l,r) = (5, 5).","solution":"def min_operations(M, s): operations = 0 i = 0 while i < M: if s[i] == 1: # Find the next segment of 1\'s to toggle operations += 1 while i < M and s[i] == 1: i += 1 i += 1 return operations"},{"question":"Antoine is a dedicated gardener who grows various types of plants in his rectangular garden. Every day, he needs to water all his plants. Due to constraints, he can only place a limited number of water sprinklers in the garden. Each sprinkler has a maximum range, measured in Manhattan distance, and it can water all plants that fall within that range. Antoine wants to know the minimum range required for the sprinklers to ensure that every plant in the garden gets watered. Multiple sprinklers can water the same plant without any issues. The garden is modeled as an N by M grid. Initially, some blocks contain plants, and others are empty. Antoine will place sprinklers on any of these blocks. The Manhattan distance between two blocks (i, j) and (a, b) is given by |i - a| + |j - b|. What is the minimum range required for the sprinklers to cover all the plants? -----Input----- The first line of input contains two integers, N and M, where 1 leq N, M leq 100, denoting the dimensions of the garden grid. Each of the next N lines contains M characters, with each character denoting a garden block. A plant is represented by a \'P\' character, and empty blocks are represented by \'.\' (period) characters. There is at least one plant in the garden. -----Output----- Output an integer indicating the minimum range required for the sprinklers to ensure all plants are watered. -----Examples----- Sample Input: 4 5 P.... ..... ..... ....P Sample Output: 6","solution":"def min_sprinkler_range(N, M, garden): plants = [(i, j) for i in range(N) for j in range(M) if garden[i][j] == \'P\'] def max_manhattan_distance(plants): max_dist = 0 for i in range(len(plants)): for j in range(i+1, len(plants)): max_dist = max(max_dist, abs(plants[i][0] - plants[j][0]) + abs(plants[i][1] - plants[j][1])) return max_dist max_distance = max_manhattan_distance(plants) return (max_distance + 1) // 2 # Example usage: # N = 4 # M = 5 # garden = [ # \\"P....\\", # \\".....\\", # \\".....\\", # \\"....P\\" # ] # print(min_sprinkler_range(N, M, garden)) # Output: 4"},{"question":"In a distant land, there is a unique kind of festival where people celebrate by creating beautiful patterns with tiles. Each pattern is represented as a matrix of integers where each integer denotes the type of tile placed at that position. These tiles can be of `n` different types, labeled from `0` to `n-1`. The festival organizers want to know if their tile pattern matrices contain a \\"symmetric central tile\\". A tile pattern matrix has a symmetric central tile if the matrix is symmetric about the center. For a matrix to be symmetric about its center, the following conditions must be met: - If the matrix size is odd, the central tile must be the same when reflected over both axes. - If the matrix size is even, there is a central 2x2 submatrix which must form a rotationally symmetric pattern. You are given such a tile matrix. Your task is to determine if the given matrix has a symmetric central tile. -----Input----- The first line contains a single integer N, the size of the matrix (N x N). Then follow N lines, each containing N space-separated integers, describing the tile pattern matrix. -----Output----- Print \\"YES\\" if the matrix has a symmetric central tile, otherwise print \\"NO\\". -----Constraints----- 1 <= N <= 1000 0 <= matrix[i][j] < n -----Example 1----- Input: 3 1 2 1 2 3 2 1 2 1 Output: YES -----Example 2----- Input: 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: NO -----Example 3----- Input: 2 1 2 2 1 Output: YES -----Explanation of Sample Cases----- Example 1: The 3x3 matrix is symmetric about both horizontal and vertical axes through its center tile. Example 2: The 4x4 matrix does not have a symmetric 2x2 central submatrix. Example 3: The 2x2 matrix forms a rotationally symmetric pattern.","solution":"def has_symmetric_central_tile(N, matrix): if N % 2 == 1: center = N // 2 for i in range(N): for j in range(N): if matrix[i][j] != matrix[N-1-i][N-1-j]: return \\"NO\\" return \\"YES\\" else: center = N // 2 if not (matrix[center-1][center-1] == matrix[center][center] and matrix[center-1][center] == matrix[center][center-1]): return \\"NO\\" for i in range(N): for j in range(N): if matrix[i][j] != matrix[N-1-i][N-1-j]: return \\"NO\\" return \\"YES\\""},{"question":"A popular e-commerce website has a new feature where they suggest the best products to user based on their past purchase history. You have been assigned the task of developing an algorithm to determine the most frequently purchased product category for each user, which will then be used to give them personalized recommendations. The website has collected data of users\' purchase history and you need to analyze it to find the most frequently purchased category for each user. The purchase history will be represented by a list of tuples, where each tuple contains a user ID and the product category they purchased. The output should be a dictionary where the keys are user IDs, and the values are the most frequently purchased product category for that user. If there is a tie for the most frequent category, return any one of the tied categories. Input - The first line of input contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of purchases. - The next N lines each contain a string (user ID) followed by another string (product category) separated by a space. Output For each test case, output a dictionary where the keys are the user IDs and the values are the most frequently purchased product category for that user. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100000 - The length of user IDs and product categories will be at most 20 characters. - The input strings will only contain alphanumeric characters. Example Input: 2 6 user1 electronics user2 electronics user1 books user1 electronics user2 books user2 books 4 user3 groceries user3 groceries user3 electronics user4 books Output: {\'user1\': \'electronics\', \'user2\': \'books\'} {\'user3\': \'groceries\', \'user4\': \'books\'} Explanation Example case 1: The purchase history for the first test case has 6 entries. User1 purchased \\"electronics\\" 2 times and \\"books\\" 1 time, so their most frequent category is \\"electronics\\". User2 purchased \\"electronics\\" 1 time and \\"books\\" 2 times, so their most frequent category is \\"books\\".","solution":"def most_frequent_category(T, cases): from collections import defaultdict, Counter results = [] for i in range(T): N = cases[i][0] purchases = cases[i][1] user_category_counts = defaultdict(Counter) for user, category in purchases: user_category_counts[user][category] += 1 result = {} for user, category_count in user_category_counts.items(): most_common_category = category_count.most_common(1)[0][0] result[user] = most_common_category results.append(result) return results # Helper function to parse input def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 cases = [] for _ in range(T): N = int(input_lines[index]) purchases = [] for j in range(N): user, category = input_lines[index + j + 1].split() purchases.append((user, category)) cases.append((N, purchases)) index += N + 1 return T, cases # Example usage input_str = 2 6 user1 electronics user2 electronics user1 books user1 electronics user2 books user2 books 4 user3 groceries user3 groceries user3 electronics user4 books T, cases = parse_input(input_str) print(most_frequent_category(T, cases))"},{"question":"Brian is preparing for a marathon. Along with his training, he has to manage his work tasks. He has N tasks to complete before the marathon. Each task takes a certain number of hours to complete, and Brian can prioritize his tasks in any order. However, Brian can work on only one task at a time, and he has to follow the sequence of his chosen order strictly. Brian wants to maximize the number of tasks he can complete within a total of T hours designated for these tasks. Given the list of tasks and their respective times to complete, determine the maximum number of tasks Brian can finish in T hours. Input: The first line contains an integer T, the total available time for tasks. The second line contains an integer N, the number of tasks. The third line contains N integers, where each integer represents the time in hours required to complete the respective task. Output: Print the maximum number of tasks Brian can complete within T hours. Constraints: 1 ≤ T ≤ 100000 1 ≤ N ≤ 100 1 ≤ task[i] ≤ 1000 SAMPLE INPUT 10 4 2 3 1 2 SAMPLE OUTPUT 4 Explanation: In the example, Brian can complete all the tasks because the total time required (2 + 3 + 1 + 2 = 8) is within the allotted 10 hours. Therefore, the output is 4.","solution":"def max_tasks_in_time(T, N, task_times): Returns the maximum number of tasks Brian can complete within T hours. task_times.sort() # Sort the task times to prioritize shorter tasks first total_time = 0 tasks_completed = 0 for time in task_times: if total_time + time <= T: total_time += time tasks_completed += 1 else: break return tasks_completed"},{"question":"A family of cats have moved into a building, and they have discovered a circular corridor with `n` doorways. Every time the cats enter the corridor, they love to play by running through these doorways. At each doorway `i` (1 ≤ i ≤ n), there is a toy with a weight of `wi`. The cats prefer toys with higher weights and their excitement level increases when they interact with heavier toys. Given an array `w` of n integers representing the weights of the toys, every day, the cats enter the corridor from a different doorway `si` and traverse the corridor visiting each doorway exactly once before returning to the starting doorway. They aim to maximize their excitement level, which is the sum of the weights of all toys they play with during their traversal. You need to calculate the maximum excitement level for each starting doorway `si`. Write a function `max_excitement(n, w, s)` that returns a list of maximum excitement levels for each starting doorway for each day. **Input** - An integer `n` (3 ≤ n ≤ 105), the number of doorways. - An array `w` of `n` integers (1 ≤ wi ≤ 109) representing the weights of the toys. - An array `s` of integers, where each `si` (1 ≤ si ≤ n) represents the starting doorway for that day. **Output** - An array of integers, where the `i-th` element represents the maximum excitement level for each starting doorway `si` in `s`. **Example** Input: ``` 5 [1, 3, 5, 7, 9] [1, 3, 5] ``` Output: ``` [25, 25, 25] ``` Input: ``` 4 [10, 20, 30, 40] [2, 4] ``` Output: ``` [100, 100] ``` Explanation: In the first example, regardless of the starting doorway, the cats will interact with all toys with weights [1, 3, 5, 7, 9] resulting in an excitement level of 25. The same situation is true for the second example where the sum is always 100 no matter the starting doorway. Make sure your function is efficient and can handle the largest inputs within a reasonable time frame.","solution":"def max_excitement(n, w, s): Calculate the maximum excitement level for each starting doorway for the given days. n: int - The number of doorways. w: list - List of weights of toys. s: list - List of starting doorways for each day. Returns: list - List of maximum excitement levels for each starting doorway. total_excitement = sum(w) return [total_excitement for _ in s]"},{"question":"Implement a function list_rotations that takes a list of elements and an integer n, and returns a new list which is a result of rotating the original list to the right by n positions. Function Signature: def list_rotations(lst: List[Any], n: int) -> List[Any]: Parameters: lst - a list of elements (of any data type) n - an integer indicating the number of positions to rotate the list The function should: - Rotate the elements of the list to the right by n positions. - The list should be returned in its rotated form. - If the list is empty, the function should return an empty list. - If n is zero, the function should return the list unchanged. Examples: ~~~python list_rotations([1, 2, 3, 4, 5], 2) # [4, 5, 1, 2, 3] list_rotations([1, 2, 3, 4, 5], 5) # [1, 2, 3, 4, 5] list_rotations([1, 2, 3], 0) # [1, 2, 3] list_rotations([], 2) # [] list_rotations([\'a\', \'b\', \'c\'], 1) # [\'c\', \'a\', \'b\'] ~~~","solution":"from typing import List, Any def list_rotations(lst: List[Any], n: int) -> List[Any]: Rotates the elements of the list to the right by n positions. Parameters: lst (List[Any]): The list to rotate. n (int): The number of positions to rotate the list. Returns: List[Any]: The rotated list. if not lst: return [] n = n % len(lst) # Normalize n to be within the length of the list return lst[-n:] + lst[:-n]"},{"question":"The kingdom of Simplator has a unique system of currency composed of various denominations of coins. The denominations are represented as an array `coins` of distinct integers, and there are unlimited supplies of each coin. The inhabitants of Simplator often face the challenge of making exact payments for goods, thus they need to determine the minimum number of coins required to form a specific amount. Write a program that calculates the minimum number of coins required to make a given amount `amount` using the available denominations specified in the array `coins`. If it is not possible to make the exact amount using the available coins, the program should return -1. The program should read multiple test cases, each starting with an integer `n` (the number of coin denominations, where 1 <= n <= 100), followed by the array `coins` containing `n` values (each between 1 and 10000), followed by an integer `amount` (where 0 <= amount <= 10000). # Input The input consists of multiple test cases. The first integer of each test case is `n` (the number of coin denominations). The next `n` integers are the coin denominations, followed by the integer `amount`. The input ends when a test case with `n = 0` is encountered. # Output For each test case, print the minimum number of coins needed to form the amount on a new line. If it is not possible to form the amount, print -1. # Example Input ``` 3 1 2 5 11 4 2 5 10 20 15 0 ``` Output ``` 3 2 ``` # Notes - In the first test case, the amount is 11, and the minimum number of coins needed is 3 (5 + 5 + 1). - In the second test case, the amount is 15, and the minimum number of coins needed is 2 (10 + 5).","solution":"def min_coins(coins, amount): Find the minimum number of coins required to make a given amount. :param coins: List[int] - the coin denominations available :param amount: int - the target amount :return: int - the minimum number of coins required or -1 if not possible if amount == 0: return 0 # Initialize the DP array with a value larger than any possible answer dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for case in test_cases: n, *data = case if n == 0: break coins = data[:n] amount = data[n] results.append(min_coins(coins, amount)) return results def main(input_lines): test_cases = [] for line in input_lines: parts = list(map(int, line.split())) if parts[0] == 0: break test_cases.append(parts) results = process_test_cases(test_cases) for result in results: print(result) # Example input input_lines = [ \\"3 1 2 5 11\\", \\"4 2 5 10 20 15\\", \\"0\\" ] main(input_lines)"},{"question":"You are given a sequence of n integers. Your task is to partition this sequence into two non-empty subsequences such that the sum of elements in each subsequence is as equal as possible. If there are multiple ways to do this, return the one with the smallest possible maximum subsequence length. Input The first line contains an integer n (2 ≤ n ≤ 1000). The next line contains n integers a1, a2, ..., an, where each ai (1 ≤ ai ≤ 10000) represents an element of the sequence. Output Print the partitioned subsequences as two lines of integers. Each number from the original sequence must be in exactly one of the subsequences. If multiple answers exist, print any of them. Examples Input 5 1 2 3 4 5 Output 1 4 2 3 5 Input 4 10 20 30 40 Output 10 40 20 30 Input 3 10 10 20 Output 10 20 10 Note In the first example, one correct partition is separating the sequence into subsequences {1, 4} and {2, 3, 5}. The sums of the elements are 5 and 10, respectively. This is the best achievable solution considering the constraint about the maximum length of the subsequences. In the second example, separating the sequence {10, 20, 30, 40} into subsequences {10, 40} and {20, 30} gives sums of 50 and 50, which is the best solution. In the third example, both possible partitions {10, 20} and {10}, or {10, 20} and {10} yield the sums of 30 and 10, but the partition with {10, 20} having the smallest maximum subsequence length is preferred.","solution":"def partition_sequence(n, sequence): Partitions the sequence into two subsequences such that the sum of elements in each subsequence is as equal as possible and the maximum subsequence length is minimized. # Sort the sequence in reverse order sequence.sort(reverse=True) # Initialize two subsequence sums and lists sum1, sum2 = 0, 0 part1, part2 = [], [] for num in sequence: if sum1 <= sum2: part1.append(num) sum1 += num else: part2.append(num) sum2 += num return part1, part2"},{"question":"Given a string S of lowercase English letters, you need to determine the number of substrings that start and end with the same character. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case contains a single line of input, a string S. ------ Output ------ For each test case, output in a single line the answer to the problem. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^{5} S consists of lowercase English letters only. ------ Subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input 1 ------ 2 abcab aaaa ----- Sample Output 1 ------ 7 10 ----- Explanation 1 ------ Test Case 1: The substrings of \'abcab\' that start and end with the same character are: \'a\', \'b\', \'c\', \'a\', \'b\', \'aba\', \'bab\'. In total, there are 7 such substrings. Test Case 2: The substrings of \'aaaa\' that start and end with the same character are: \'a\', \'a\', \'a\', \'a\', \'aa\', \'aa\', \'aa\', \'aaa\', \'aaa\', \'aaaa\'. In total, there are 10 such substrings.","solution":"def count_substrings_start_end_same_char(s): Returns the number of substrings that start and end with the same character. n = len(s) count = 0 # We will use a frequency dictionary to count occurrences of each character freq = {} # For every character in the string for i in range(n): char = s[i] if char in freq: count += freq[char] freq[char] += 1 else: freq[char] = 1 # Every character by itself is a valid substring count += 1 return count def count_substrings_in_test_cases(num_cases, test_cases): results = [] for s in test_cases: results.append(count_substrings_start_end_same_char(s)) return results"},{"question":"The Berland National Park is represented by a grid of size n × m. The park officials need to form a rectangular region within the grid to create a protected area for species conservation. The boundaries of this rectangular region should be chosen such that: - The top-left corner of the rectangle is at (x1, y1) and the bottom-right corner is at (x2, y2). - The area of the rectangular region should be as large as possible without exceeding a given limit L. You are provided with the dimensions of the grid and the maximum allowed area L. Help the park officials determine the coordinates of the top-left and bottom-right corners of the largest possible rectangular region that fit the criteria. -----Input----- The first line contains three integers n, m, and L (1 ≤ n, m ≤ 10^9, 1 ≤ L ≤ n * m). -----Output----- Print four integers x1, y1, x2, y2 — the coordinates of the top-left and bottom-right corners of the largest possible rectangle. In case of multiple valid solutions, print any one of them. -----Examples----- Input 5 3 6 Output 1 1 2 3 Input 5 5 12 Output 1 1 3 4 -----Note----- In the first example, the rectangle with top-left corner at (1, 1) and bottom-right corner at (2, 3) has the largest possible area (6). In the second example, one possible solution is the rectangle with top-left corner at (1, 1) and bottom-right corner at (3, 4), which has an area of 12.","solution":"def largest_rectangle_with_limit(n, m, L): Returns the coordinates of the top-left and bottom-right corners of the largest possible rectangular region within an n x m grid with an area not exceeding L. Parameters: n (int): number of rows of the grid m (int): number of columns of the grid L (int): maximum allowed area Returns: (int, int, int, int): coordinates of the top-left and bottom-right corners of the rectangle max_area = 0 best_coords = (1, 1, 1, 1) for height in range(1, n + 1): width = min(L // height, m) area = height * width if area > max_area: max_area = area best_coords = (1, 1, height, width) return best_coords"},{"question":"The Galactic Federation is upgrading its central database system and needs your help to optimize its space utilization. They use a sophisticated memory compression technique which involves two primary operations: storing unique data blocks and referencing existing ones to avoid redundancy. You are tasked to write a program that will calculate the minimum amount of memory required to store a given sequence of data blocks. Each block is represented by an uppercase alphabet character (\'A\' to \'Z\'), and the sequence is given as a string. The memory compression works as follows: 1. If a block is encountered for the first time, it is stored, costing 1 unit of memory. 2. If a block has been stored previously, it is referenced instead, costing 0 units of memory. Input The input is given in the following format: > n > sequence * n (1 ≤ n ≤ 10^6) denotes the length of the sequence. * sequence is a string of n uppercase alphabet characters. Output Output the minimum amount of memory required to store the given sequence on one line. Examples Input 5 ABACA Output 3 Input 8 ABCDEFGH Output 8 Input 7 AAAAAAA Output 1","solution":"def calculate_memory(n, sequence): Calculates the minimum amount of memory required to store the given sequence using the given memory compression technique. seen_blocks = set() memory_required = 0 for block in sequence: if block not in seen_blocks: seen_blocks.add(block) memory_required += 1 return memory_required # Example usage: # n, sequence = 5, \\"ABACA\\" # print(calculate_memory(n, sequence)) # Output: 3"},{"question":"A group of wizards in the mystical land of Alvora are trying to protect their sacred tower from an incoming horde of trolls. They have a magical defense system that can release a powerful energy wave to eliminate the trolls. The energy wave can only be fired once, and it must be aimed strategically to affect the maximum area. The land can be represented as a Cartesian plane where each troll is located at a specific point. The energy wave can be aimed to cover a circular area with a radius of R. Your task is to determine the optimal position to aim the energy wave such that the maximum number of trolls are within the radius R of the impact point. Each troll is represented by a point (x_i, y_i) on the Cartesian plane, and the energy wave\'s impact point can be chosen anywhere. -----Input----- The first line contains two integers N and R (1 ≤ N ≤ 1000, 1 ≤ R ≤ 1000), representing the number of trolls and the radius of the energy wave, respectively. The following N lines each contain two integers x_i and y_i (|x_i|, |y_i| ≤ 10000), representing the coordinates of each troll. -----Output----- Print a single integer representing the maximum number of trolls that can be affected by the energy wave when aimed optimally. -----Examples----- Input 5 2 1 1 2 2 3 3 4 4 5 5 Output 3 Input 6 3 -2 -2 1 1 0 2 2 3 5 5 -1 -3 Output 4","solution":"import math from itertools import combinations def distance(troll1, troll2): return math.sqrt((troll1[0] - troll2[0]) ** 2 + (troll1[1] - troll2[1]) ** 2) def max_trolls_affected(N, R, trolls): max_affected = 0 for troll1, troll2 in combinations(trolls, 2): mid_point = ((troll1[0] + troll2[0]) / 2, (troll1[1] + troll2[1]) / 2) if distance(troll1, mid_point) <= R: count = sum(1 for troll in trolls if distance(troll, mid_point) <= R) max_affected = max(max_affected, count) for troll in trolls: count = sum(1 for other in trolls if distance(troll, other) <= R) max_affected = max(max_affected, count) return max_affected # Input Reading and Handling def main(): N, R = map(int, input().split()) trolls = [tuple(map(int, input().split())) for _ in range(N)] print(max_trolls_affected(N, R, trolls)) # Uncomment the following line to run the main function for input handling # main()"},{"question":"A new company is organizing a coding contest and wants to classify the coding questions into three different categories based on their difficulty levels: Easy, Medium, and Hard. The difficulty of a coding question is determined using two parameters: 1. Problem size `n` which represents the number of operations in the problem. 2. Algorithm efficiency `e` which represents the efficiency of the algorithm required to solve the problem. An easy problem is one where the number of operations needed is less than or equal to 1,000,000 (`n <= 1,000,000`). A medium problem is one where the number of operations needed is greater than 1,000,000 but less than or equal to 10,000,000 (`1,000,000 < n <= 10,000,000`). A hard problem is one where the number of operations needed is greater than 10,000,000 (`n > 10,000,000`). The company also has limits on the algorithm efficiencies categorized into three types: 1. Type `e = 1` (Very Efficient) 2. Type `e = 2` (Moderately Efficient) 3. Type `e = 3` (Inefficient) Based on these efficiencies: - Type `e = 1` can handle problems of up to 5,000,000 operations. - Type `e = 2` can handle problems of up to 10,000,000 operations. - Type `e = 3` can handle any number of operations since it is the least efficient. Write a function that takes as input parameters the problem size `n` and the algorithm efficiency type `e`, and determines if the corresponding problem is Easy, Medium, or Hard. Based on the combination of `n` and `e`, output the problem\'s classification and if it can be solved or not. Input: - The input consists of two integers `n` (1 ≤ n ≤ 1,000,000,000) and `e` (1 ≤ e ≤ 3) in a single line. Output: - Output two space-separated strings. The first string should be one of \\"Easy\\", \\"Medium\\", or \\"Hard\\" representing the problem\'s classification. The second string should be \\"Solvable\\" or \\"Not Solvable\\" indicating whether the problem can be solved given its `n` and `e`. -----Examples----- Sample Input 1: 500000 2 Sample Output 1: Easy Solvable Sample Input 2: 6000000 2 Sample Output 2: Medium Solvable Sample Input 3: 12000000 3 Sample Output 3: Hard Solvable Sample Input 4: 12000000 2 Sample Output 4: Hard Not Solvable Sample Input 5: 900000 1 Sample Output 5: Easy Solvable Note: For corresponding operations, check whether the problem size falls within the limits that the given efficiency type can handle. If `n` exceeds the capacity of the efficiency type `e`, then the problem is \\"Not Solvable\\". However, if `n` is within the limits, then determine the problem\'s categorization and check if it is \\"Solvable\\".","solution":"def classify_problem(n, e): Classify the problem based on problem size n and algorithm efficiency type e. Parameters: n (int): Number of operations in the problem. e (int): Algorithm efficiency type (1, 2, or 3). Returns: str: Problem classification (\\"Easy\\", \\"Medium\\", or \\"Hard\\"). str: Solvability (\\"Solvable\\" or \\"Not Solvable\\"). # Classify the problem based on the number of operations if n <= 1_000_000: classification = \\"Easy\\" elif n <= 10_000_000: classification = \\"Medium\\" else: classification = \\"Hard\\" # Determine the solvability based on the efficiency type if e == 1 and n <= 5_000_000: solvability = \\"Solvable\\" elif e == 2 and n <= 10_000_000: solvability = \\"Solvable\\" elif e == 3: solvability = \\"Solvable\\" else: solvability = \\"Not Solvable\\" return classification, solvability"},{"question":"A company is organizing a large event and plans to distribute tickets to attendees. Each attendee is identified by a unique ID given as an integer. The tickets will be distributed in a random order, and the company wants to ensure that the distribution is fair. Each attendee should not receive more than one ticket, and every ticket must be assigned to someone. The company has decided to use a computer program to automate this process. Your task is to write a program that ensures no duplicate tickets are distributed and all tickets are properly assigned to attendees. Input The first line contains an integer n (1 ≤ n ≤ 2·105) which represents the number of attendees. The second line contains a sequence of n unique integers ai (1 ≤ ai ≤ 109), representing the IDs of the attendees. The third line contains an integer m (1 ≤ m ≤ 2·105) which represents the number of tickets. The fourth line contains a sequence of m unique integers ti (1 ≤ ti ≤ 109), representing the IDs of the tickets to be distributed. Output Print \\"YES\\" if all tickets can be distributed fairly, meaning each ticket is assigned to a unique attendee. Otherwise, print \\"NO\\". SAMPLE INPUT 5 1 2 3 4 5 5 10 11 12 13 14 SAMPLE OUTPUT YES SAMPLE INPUT 4 1 2 3 4 5 10 11 12 13 14 SAMPLE OUTPUT NO","solution":"def can_distribute_tickets(n, attendees, m, tickets): Determines if all tickets can be distributed fairly to the attendees. Parameters: n (int): Number of attendees attendees (list of int): List of unique attendee IDs m (int): Number of tickets tickets (list of int): List of unique ticket IDs Returns: str: \\"YES\\" if each ticket can be uniquely assigned to an attendee, otherwise \\"NO\\" if m > n: return \\"NO\\" return \\"YES\\" # Input reading and function call example: # n = int(input()) # attendees = list(map(int, input().split())) # m = int(input()) # tickets = list(map(int, input().split())) # print(can_distribute_tickets(n, attendees, m, tickets))"},{"question":"Zephyr is playing a game with a sequence of integers. The game involves finding a contiguous subsequence such that the sum of the elements in the subsequence is the maximum possible, subject to the constraint that the length of the subsequence must be at least as long as a given value k. Can you help Zephyr find the maximum sum possible? -----Input----- The first line contains a single integer t (1 leq t leq 1000) – the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n (1 leq n leq 100) and k (1 leq k leq n) – the length of the sequence and the minimum length of the subsequence, respectively. The second line of each test case contains n integers a_1, a_2, ..., a_n (-1000 leq a_i leq 1000). -----Output----- For each test case, output a single integer – the maximum possible sum of a contiguous subsequence of length at least k. -----Examples----- Input 2 5 2 1 -2 3 -2 5 6 3 -1 2 4 -3 5 7 Output 6 15 -----Note----- In the first test case, the maximum possible sum of a contiguous subsequence of length at least 2 is 6 (taking the subsequence 3, -2, 5). In the second test case, the maximum possible sum of a contiguous subsequence of length at least 3 is 15 (taking the subsequence 2, 4, -3, 5, 7).","solution":"def max_subsequence_sum(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] sequence = test_cases[i][1] max_sum = float(\'-inf\') for length in range(k, n+1): for start in range(n - length + 1): subsequence_sum = sum(sequence[start:start+length]) max_sum = max(max_sum, subsequence_sum) results.append(max_sum) return results"},{"question":"Lisa loves playing with building blocks. She has a collection of n building blocks, each with a specific height. She wants to stack them to create buildings, ensuring each building is made up of consecutive blocks. A building\'s height is defined as the sum of the heights of the blocks in that segment. Lisa can choose any contiguous subarray of blocks to construct a building. However, Lisa wants to know the maximum possible height of any building she can construct. Write a program to find the maximum height of any single building that Lisa can make using these blocks. **Input** The first line contains a single integer n (1 ≤ n ≤ 200,000) — the number of building blocks. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 1,000), where h_i is the height of the i-th block. **Output** Print a single integer — the maximum height of any building that Lisa can construct using consecutive blocks. **Examples** **Input** 7 1 2 3 4 5 6 7 **Output** 28 **Input** 5 10 20 30 40 50 **Output** 150 **Input** 3 5 0 5 **Output** 10","solution":"def max_building_height(n, heights): Returns the maximum possible height of any single building that can be constructed using the blocks. :param n: int - number of building blocks :param heights: list of int - heights of the blocks :return: int - maximum height of any building that can be constructed max_height = float(\'-inf\') current_height = 0 for height in heights: current_height += height max_height = max(max_height, current_height) if current_height < 0: current_height = 0 return max_height"},{"question":"In a fruit distribution factory, different types of fruits are distributed in boxes for shipment. Each box can contain only one type of fruit, and there are three types of fruits: Apples, Bananas, and Cherries. You are given the number of boxes used to pack each type of fruit and an integer capacity which represents the maximum number of boxes that can be shipped at a time. If the total number of boxes exceeds the capacity, you need to determine the fewest number of fruits by which you can reduce the shipment to match the capacity. Write a function `reduce_boxes` that takes four integers as input: `A` (number of boxes of Apples), `B` (number of boxes of Bananas), `C` (number of boxes of Cherries), and `capacity` (maximum number of boxes that can be shipped). Your task is to return an integer representing the fewest number of boxes that need to be removed to meet the shipment capacity. If no reduction is needed, return 0. ------ Input Format ------ - The function should take four integers `A`, `B`, `C`, and `capacity` as input. - `A` is the number of boxes of Apples. - `B` is the number of boxes of Bananas. - `C` is the number of boxes of Cherries. - `capacity` is the maximum number of boxes that can be shipped. ------ Output Format ------ - Return an integer representing the fewest number of boxes that need to be removed. ------ Constraints ------ `1 ≤ A, B, C ≤ 1000` `1 ≤ capacity ≤ 3000` ------ Sample Input 1 ------ 10 15 20 40 ------ Sample Output 1 ------ 5 ------ Explanation 1 ------ The total number of boxes is 10 + 15 + 20 = 45. To meet the capacity of 40, you need to remove 5 boxes. Removing 5 boxes is the minimum reduction required to meet the shipping limit. ------ Sample Input 2 ------ 50 50 50 200 ------ Sample Output 2 ------ 0 ------ Explanation 2 ------ The total number of boxes is 50 + 50 + 50 = 150. Since the total is within the capacity of 200, no reduction is needed, so the function returns 0. ```python def reduce_boxes(A, B, C, capacity): total = A + B + C if total <= capacity: return 0 return total - capacity ```","solution":"def reduce_boxes(A, B, C, capacity): Determines the fewest number of boxes to remove to match the shipment capacity. Parameters: A (int): Number of boxes of Apples. B (int): Number of boxes of Bananas. C (int): Number of boxes of Cherries. capacity (int): Maximum number of boxes that can be shipped. Returns: int: Fewest number of boxes that need to be removed to meet the shipment capacity. total = A + B + C if total <= capacity: return 0 return total - capacity"},{"question":"You are given a list of rock samples collected from various locations, and each rock sample is represented by a string of lowercase letters. Your task is to identify rock qualities by finding the number of common minerals in all of the given rock samples. Each mineral is represented by a different lowercase letter, and a mineral is considered common if it appears in every rock sample. Write a function to calculate the number of common minerals in all rock samples. Input - The input consists of multiple lines. The first line contains an integer T (1 leq T leq 100), representing the number of rock samples. - The next T lines each contain a string S_i (1 leq |S_i| leq 100), representing the rock samples. Output - Print a single line with the integer representing the number of common minerals in all rock samples. Example Input 3 abcdde baccd eeabg Output 2 Explanation The common minerals in all the rock samples are \'a\' and \'b\'. Therefore, the output is 2.","solution":"def common_minerals_count(rock_samples): Returns the number of common minerals in all rock samples. # Initialize the set of common minerals with the minerals in the first rock sample common_minerals = set(rock_samples[0]) # Intersect the set of common minerals with every subsequent rock sample for sample in rock_samples[1:]: common_minerals.intersection_update(sample) # The number of common minerals is the size of the resulting set return len(common_minerals) # Function to read the input, process it, and print the result def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) rock_samples = data[1:] print(common_minerals_count(rock_samples))"},{"question":"A palindrome is a string that reads the same backward as forward. Given a string s, you are tasked with finding the number of palindromic substrings in s. A substring is a contiguous sequence of characters within a string. You are required to return the total count of palindrome substrings and provide the length of the longest palindromic substring found in the input string. # Input - The first line of input contains a single integer `T` denoting the number of test cases. - Each of the next `T` lines contains a single string `s` consisting of lowercase English letters. # Output - For each test case, output two integers: the total number of palindromic substrings in `s` and the length of the longest palindromic substring. # Constraints - 1 ≤ `T` ≤ 100 - 1 ≤ length of `s` ≤ 1000 # Sample Input ``` 3 abc aaa racecar ``` # Sample Output ``` 3 1 6 3 10 7 ``` # Explanation **Example 1:** - Palindromic substrings: \\"a\\", \\"b\\", \\"c\\" - Total count: 3 - Length of the longest palindromic substring: 1 (\\"a\\" or \\"b\\" or \\"c\\") **Example 2:** - Palindromic substrings: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\" - Total count: 6 - Length of the longest palindromic substring: 3 (\\"aaa\\") **Example 3:** - Palindromic substrings: \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\" - Total count: 10 - Length of the longest palindromic substring: 7 (\\"racecar\\")","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings and the length of the longest palindromic substring. n = len(s) count = 0 longest_length = 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True count += 1 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = True count += 1 longest_length = 2 for length in range(3, n+1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = True count += 1 longest_length = length return count, longest_length def solve_palindromic_substrings(T, strings): results = [] for s in strings: results.append(count_palindromic_substrings(s)) return results"},{"question":"Given a string S, your task is to complete the function possiblePalindromes() which returns a list of all unique substrings of S that are palindromes. A palindrome is a string that reads the same forward and backward. Example 1: Input: S = \\"aab\\" Output: [\\"a\\", \\"aa\\", \\"b\\"] Example 2: Input: S = \\"abcba\\" Output: [\\"a\\", \\"b\\", \\"c\\", \\"bcb\\", \\"abcba\\"] Your Task: You need to complete the function possiblePalindromes() which takes a string S as its only argument and returns a list of unique palindromic substrings in lexicographical order. Expected Time Complexity: O(N^3) Expected Auxiliary Space: O(N^2) Constraints: 1 <= N <= 100 S consists of only lowercase English letters.","solution":"def is_palindrome(s): Helper function to check if a given string is a palindrome. return s == s[::-1] def possiblePalindromes(S): This function returns a list of all unique palindromic substrings of the input string S. n = len(S) palindromes = set() for i in range(n): for j in range(i + 1, n + 1): substring = S[i:j] if is_palindrome(substring): palindromes.add(substring) return sorted(palindromes)"},{"question":"You are given an array of integers a of length n. Your task is to check if the array is non-decreasing. An array is non-decreasing if for every i (1 ≤ i < n), a[i] ≤ a[i+1]. If the array is non-decreasing, return the smallest integer in the array. Otherwise, return -1. -----Input:----- - The first line of the input contains a single integer T i.e the number of test cases. - Each test line contains: - An integer n which represents the number of elements in the array. - An array of n integers representing the elements of the array a. -----Output:----- For each case, print a single line containing one integer - the smallest integer in the array if the array is non-decreasing, otherwise -1. -----Constraints----- - 1 ≤ T ≤ 50 - 2 ≤ n ≤ 10^5 - -10^9 ≤ a[i] ≤ 10^9 -----Sample Input:----- 2 5 1 2 3 4 5 4 5 2 3 4 -----Sample Output:----- 1 -1","solution":"def smallest_or_negative_one(test_cases): results = [] for case in test_cases: n, array = case is_non_decreasing = all(array[i] <= array[i+1] for i in range(n-1)) if is_non_decreasing: results.append(min(array)) else: results.append(-1) return results"},{"question":"A popular problem in theoretical computer science involves analyzing the behavior of sequences and identifying patterns within them. This question focuses on finding the \\"Longest Arithmetic Subarray\\" from a given array. An arithmetic array is an array that contains at least two integers and the differences between consecutive integers are all equal. For example, `[9, 7, 5, 3]`, `[-2, 8, 18, 28]`, and `[4, 4, 4, 4]` are arithmetic arrays, while `[9, 6, 7, 3]` and `[2, 8, 16, 28]` are not arithmetic arrays. Your task is to write a program to find the length of the longest contiguous arithmetic subarray in a given array of N integers. # Input: - The first line contains a single integer N which represents the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. # Output: - Print the length of the longest contiguous arithmetic subarray. # Constraints: * 2 ≤ N ≤ 100000 * -10^9 ≤ A[i] ≤ 10^9 # Sample Input: ``` 7 10 7 4 6 8 10 11 ``` # Sample Output: ``` 4 ``` # Explanation: The longest contiguous arithmetic subarray is `[4, 6, 8, 10]`, where the differences between consecutive numbers are all 2. Hence, the length is 4.","solution":"def longest_arithmetic_subarray_length(N, array): if N < 2: return 0 longest_length = 2 current_length = 2 current_difference = array[1] - array[0] for i in range(2, N): difference = array[i] - array[i - 1] if difference == current_difference: current_length += 1 else: current_difference = difference current_length = 2 if current_length > longest_length: longest_length = current_length return longest_length"},{"question":"In a small town, there is a popular annual event called the \\"Balloon Race.\\" In this race, participants inflate a series of balloons, each having a specific weight, and attempt to keep them afloat for as long as possible using helium gas. To make the event more competitive, the organizers decided to introduce a new rule this year. The rule is that each participant is given exactly two containers of helium gas. The first container can be used to inflate any single balloon, while the second container can be used to inflate one or more contiguous balloons so that their combined weight is minimized. You, as a programmer, have been asked to write a function to help participants determine the optimal use of the helium gas containers to achieve the lowest possible combined weight for the contiguous balloons inflated by the second container. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100000), representing the number of balloons. The second line contains n non-negative integer weights separated by spaces, representing the weights of the balloons. -----Output----- Output contains one integer which is the lowest possible combined weight for the contiguous balloons inflated by the second container. -----Example----- Input 5 2 3 1 5 4 Output 1 -----Explanation----- In this case, the participant can use the first container to inflate any balloon, for example, balloon 3 with weight 2. For the second container, the participant can choose the balloon with the smallest weight, which is balloon 3 with weight 1. The answer will be the lowest weight, which is 1.","solution":"def balloon_race(n, weights): Determines the lowest possible combined weight for the contiguous balloons inflated by the second container. Parameters: n (int): Number of balloons. weights (list of int): List containing weights of the balloons. Returns: int: Lowest possible combined weight for the contiguous balloons. return min(weights)"},{"question":"You are given a list of integers representing the heights of several people standing in a line. A photographer wants to take a group photo, and he has two constraints: 1. He needs to fit all people in the group into the frame, which can accommodate at most two rows. 2. Every person in the first row must be taller than the person standing directly behind them in the second row. You need to determine if it\'s possible to arrange all people in these two rows according to the photographer\'s constraints. Input The input consists of several test cases. Each test case begins with an integer n (1 ≤ n ≤ 1000) — the number of people in the group. The next line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the people in the group. The last line of the input contains a single integer 0, indicating the end of input. Output For each test case, output \\"YES\\" if it is possible to arrange all people according to the photographer\'s constraints, and \\"NO\\" otherwise. Examples Input 5 160 150 170 180 190 4 100 100 100 100 6 200 150 160 170 180 140 0 Output YES NO YES Explanation In the first example, you can arrange the people in two rows as follows: First row: 170 190 Second row: 150 180 Both constraints are satisfied. In the second example, it\'s not possible to arrange the people in two rows satisfying the constraints since all heights are equal. In the third example, you can arrange the people in two rows as follows: First row: 160 180 Second row: 140 170 150 200","solution":"def can_photo_be_taken(people_count, heights): Determines if it is possible to arrange the people into two rows according to the given constraints. Parameters: people_count (int): The number of people in the group. heights (list): A list of integers representing the heights of people. Returns: str: \\"YES\\" if it is possible to arrange people according to the constraints, \\"NO\\" otherwise. if people_count == 1: return \\"YES\\" heights.sort() mid = people_count // 2 row1 = heights[:mid] row2 = heights[mid:] for i in range(len(row1)): if row1[i] >= row2[i]: return \\"NO\\" return \\"YES\\" def solve_photographer_problem(test_cases): Solves the photographer problem for each test case. Parameters: test_cases (list): A list of tuples where the first element is the number of people in the group and the second element is a list of heights of people. Returns: list: A list of results for each test case (\\"YES\\" or \\"NO\\"). results = [] for people_count, heights in test_cases: results.append(can_photo_be_taken(people_count, heights)) return results"},{"question":"Create a function that takes an integer n and outputs a square pattern of n x n size. The pattern consists of \'*\' and \' \' (space) characters, such that \'*\' forms a diagonal line from the top-right to the bottom-left corner. The spaces in between should remain blank. Input An integer n (1 ≤ n ≤ 20). Output Output a square pattern of n x n size with \'*\' characters on the reverse diagonal and spaces elsewhere. Examples Input 5 Output * * * * * Input 3 Output * * *","solution":"def reverse_diagonal_pattern(n): Returns a square pattern of n x n size with \'*\' characters on the reverse diagonal. Parameters: n (int): The size of the square pattern. Returns: List[str]: A list of strings representing the pattern. pattern = [] for i in range(n): row = [\' \'] * n row[n - i - 1] = \'*\' pattern.append(\'\'.join(row)) return pattern"},{"question":"You are given a positive integer N. Your task is to print an inverted pyramid of numbers of height N. For example, an inverted pyramid of height 5 is: 55555 4444 333 22 1 Input Format A single line of input containing the integer N. Constraints 0<N<10 Output Format Print the inverted pyramid of numbers of height N as explained above. Sample Input 5 Sample Output 55555 4444 333 22 1","solution":"def inverted_pyramid(n): Prints an inverted pyramid of numbers of height n. for i in range(n, 0, -1): print(str(i) * i) # Example usage: # inverted_pyramid(5) will output: # 55555 # 4444 # 333 # 22 # 1"},{"question":"You are given an array of integers representing the height of buildings that are aligned from west to east. Each building has a number of stars on its roof denoted by an integer array `stars`, where `stars[i]` is the number of stars on the roof of the i-th building from the west. A building can only be seen from the street if no building to its left is taller or of the same height. Write a function to return the total number of stars on the roofs of the buildings that are visible from the street. Constraints: * 1 leq height.length leq 10^5 * 1 leq height[i] leq 10^9 * stars.length = height.length * 0 leq stars[i] leq 10^5 Input Input consists of two lines: - First line: `height[]` - space-separated integers representing the height of the buildings. - Second line: `stars[]` - space-separated integers representing the number of stars on the roofs of the buildings. Output Output a single integer, which is the total number of stars on the roofs of the visible buildings. Examples Input 2 3 4 1 5 3 2 10 0 5 Output 20 Input 1 2 2 3 4 1 0 5 4 2 Output 7","solution":"def total_visible_stars(height, stars): Returns the total number of stars on the roofs of the visible buildings. max_height = 0 total_stars = 0 for h, s in zip(height, stars): if h > max_height: total_stars += s max_height = h return total_stars"},{"question":"Write a function that takes a string containing a positive integer and returns the next lexicographic permutation of the number. If no such permutation exists, return the smallest permutation of the number instead. Your function should be efficient and handle very large integers represented as strings. For example: - `next_permutation(\\"123\\")` should return `\\"132\\"` - `next_permutation(\\"321\\")` should return `\\"123\\"` - `next_permutation(\\"115\\")` should return `\\"151\\"` Consider edge cases such as handling single-digit strings and situations where all digits are the same.","solution":"def next_permutation(s): Returns the next lexicographic permutation of the number represented by the string s. If no such permutation exists, returns the smallest permutation of the number. # Convert string to list of characters for easier manipulation s = list(s) # Step 1: Find the largest index i such that s[i] < s[i + 1] i = len(s) - 2 while i >= 0 and s[i] >= s[i + 1]: i -= 1 if i == -1: # Step 4: If no such i exists, the string is the largest permutation. # Return the smallest permutation (i.e., sorted string) return \'\'.join(sorted(s)) # Step 2: Find the largest index j greater than i such that s[i] < s[j] j = len(s) - 1 while s[i] >= s[j]: j -= 1 # Step 3: Swap the value of s[i] with that of s[j] s[i], s[j] = s[j], s[i] # Step 5: Reverse the sequence from s[i + 1] to the end s = s[:i + 1] + s[i + 1:][::-1] # Convert list back to string and return return \'\'.join(s)"},{"question":"Alex has recently started a new job at a software company. To improve his skills, he decided to practice some coding problems. Today, he encountered an interesting task related to strings and has asked for your help. He is given a string S consisting of lowercase English letters. His task is to determine the total number of substrings of S that are palindromes. A substring is any contiguous sequence of characters within a string, and a palindrome is a string that reads the same backward as forward. Input The input consists of a single line containing the string S. The length of S is between 1 and 1000. Output Output a single integer, the total number of palindromic substrings in the string S. Example Input 1 \\"abba\\" Example Output 1 6 Example Input 2 \\"abcd\\" Example Output 2 4 Example Input 3 \\"a\\" Example Output 3 1 Explanation: In the first example, the palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". In the second example, the palindromic substrings are: \\"a\\", \\"b\\", \\"c\\", \\"d\\". In the third example, the only palindromic substring is \\"a\\".","solution":"def count_palindromic_substrings(s): Returns the total number of palindromic substrings in the string s. n = len(s) count = 0 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True count += 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: if length == 2 or dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count"},{"question":"Create a program to determine the length of the longest path in a given undirected, unweighted tree. A tree is a connected graph with no cycles, and all vertices in the tree have unique labels. # Input - The first line of the input contains an integer `n` (2 ≤ n ≤ 10^5), the number of vertices in the tree. - The next `n-1` lines each contain two integers `a` and `b`, indicating that there is an edge between vertices `a` and `b`. # Output - Output the length of the longest path in the tree. # Example Input 1 ``` 5 1 2 1 3 3 4 3 5 ``` Output 1 ``` 3 ``` Input 2 ``` 4 1 2 2 3 3 4 ``` Output 2 ``` 3 ``` # Explanation In Example 1, the longest path is from vertex 2 to vertex 4 or from vertex 2 to vertex 5, passing through vertex 1 and vertex 3. The length of this path is 3 edges. In Example 2, the tree is essentially a straight line, and the longest path is from vertex 1 to vertex 4 with a length of 3 edges. # Notes - You may assume that the vertices are labeled from 1 to n. - The tree structure ensures that there are always `n-1` edges.","solution":"from collections import deque, defaultdict def longest_path_in_tree(n, edges): # Step 1: Build the adjacency list for the tree tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) # Step 2: Function to perform BFS and return the furthest node and its distance def bfs(start_node): visited = [-1] * (n + 1) queue = deque([(start_node, 0)]) visited[start_node] = 0 furthest_node = start_node max_distance = 0 while queue: current_node, distance = queue.popleft() for neighbor in tree[current_node]: if visited[neighbor] == -1: queue.append((neighbor, distance + 1)) visited[neighbor] = distance + 1 if distance + 1 > max_distance: max_distance = distance + 1 furthest_node = neighbor return furthest_node, max_distance # Step 3: Perform the first BFS to find the furthest node from an arbitrary node (let\'s start with node 1) furthest_node_from_start, _ = bfs(1) # Step 4: Perform the second BFS from the furthest node found in the first BFS to get the longest path _, longest_path_length = bfs(furthest_node_from_start) return longest_path_length # Example usage: # edges = [ # (1, 2), # (1, 3), # (3, 4), # (3, 5) # ] # print(longest_path_in_tree(5, edges)) # Output: 3"},{"question":"In a magical land, there are dragons and knights. Each knight has a certain strength level and each dragon has a required strength level needed to be defeated. The kingdom wants to select a group of knights to defeat all the dragons. A knight can only defeat a dragon if the knight\'s strength is greater than or equal to the dragon\'s required strength. Each knight can only defeat one dragon, and each dragon can only be defeated by one knight. Your task is to determine if it\'s possible to defeat all dragons given the strengths of knights and the required strengths of dragons. If it\'s possible, output \\"YES\\"; otherwise, output \\"NO\\". -----Input----- The input consists of several test cases. The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 2000) — the number of knights and dragons (both knights and dragons have equal number). The second line of each test case contains n integers k_i (1 leq k_i leq 10^9) — the strengths of the knights. The third line of each test case contains n integers d_i (1 leq d_i leq 10^9) — the required strength to defeat the dragons. -----Output----- For each test case, print \\"YES\\" if all dragons can be defeated, otherwise print \\"NO\\". -----Examples----- Input 2 3 4 5 8 1 3 7 4 2 3 5 6 7 6 5 4 Output YES NO -----Note----- In the first test case, the knights can defeat the dragons as follows: - Knight with strength 4 can defeat the dragon with required strength 1. - Knight with strength 5 can defeat the dragon with required strength 3. - Knight with strength 8 can defeat the dragon with required strength 7. Thus, the output is \\"YES\\". In the second test case, the knights cannot defeat all dragons because the strongest knight has strength 6, but there is a dragon requiring strength 7 to be defeated. Thus, the output is \\"NO\\".","solution":"def can_defeat_dragons(t, test_cases): results = [] for test_case in test_cases: n, knights_strengths, dragons_strengths = test_case knights_strengths.sort(reverse=True) dragons_strengths.sort(reverse=True) possible = True for k_strength, d_strength in zip(knights_strengths, dragons_strengths): if k_strength < d_strength: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) knights_strengths = list(map(int, lines[index + 1].split())) dragons_strengths = list(map(int, lines[index + 2].split())) test_cases.append((n, knights_strengths, dragons_strengths)) index += 3 return t, test_cases def main(input_str): t, test_cases = process_input(input_str) results = can_defeat_dragons(t, test_cases) return \\"n\\".join(results)"},{"question":"A coding competition features a unique game called \\"String Scramble\\". In this game, players are given a string `S` and a target string `T`. The goal is to transform `S` into `T` by using a series of operations. Each operation consists of either inserting a character at any position in `S`, deleting a character from `S`, or replacing a character in `S` with another character. The cost of each operation is 1 unit. The objective is to find the minimum total cost required to transform the string `S` into the string `T`. -----Input----- The first line of the input contains an integer `K` denoting the number of test cases. For each test case, two strings `S` and `T` are provided. -----Output----- For each test case, output an integer representing the minimum cost required to transform `S` into `T`. -----Constraints----- - 1 ≤ K ≤ 50 - 0 ≤ |S|, |T| ≤ 1000 - Strings `S` and `T` contain only lowercase English letters. -----Example----- Input: 2 kitten sitting flaw lawn Output: 3 2 -----Explanation----- Case 1: Transform \\"kitten\\" to \\"sitting\\" -> one replace (\'k\' to \'s\'), one insert (\'i\' before \'t\'), and one insert (\'g\' at the end). Case 2: Transform \\"flaw\\" to \\"lawn\\" -> one replace (\'f\' to \'l\'), and one insert (\'n\' at the end).","solution":"def min_cost_transform(S, T): Calculate the minimum cost to transform string S into T using insert, delete, or replace operation. Costs for each operation is 1. m, n = len(S), len(T) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases for i in range(m + 1): dp[i][0] = i # Deleting all characters from S for j in range(n + 1): dp[0][j] = j # Inserting all characters into S to form T # Fill dp table for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No cost if characters match else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n] def process_test_cases(K, test_cases): results = [] for S, T in test_cases: results.append(min_cost_transform(S, T)) return results"},{"question":"In a small town, there\'s a new library system to manage book rentals. The library has a collection of books, each identified by a unique ISBN. The system is required to track the rental status of each book and handle both book rentals and returns efficiently. When renting a book, the system must check if the book is available and then mark it as rented. When returning a book, the system must mark it as available again. You need to implement a function to manage this library system. The function should be able to process a series of commands represented as a list of strings. Each command will either be a rental or a return operation. The function should start with all books marked as available. -----Input----- The first line contains a positive integer M (1 leq M leq 100), which is the number of books in the library. The second line contains M unique ISBN numbers (each ISBN is a positive integer and not greater than 10^5). The third line contains a positive integer N (1 leq N leq 200), which is the number of commands. Each of the following N lines contains a command in one of the following formats: - \\"Rent ISBN\\" where ISBN is the ISBN number of the book to rent. - \\"Return ISBN\\" where ISBN is the ISBN number of the book to return. -----Output----- For each command, output the result of the operation: - If renting a book and the book is available, output \\"Book ISBN rented successfully\\". - If renting a book and the book is already rented out, output \\"Book ISBN is already rented\\". - If returning a book and the book was rented out, output \\"Book ISBN returned successfully\\". - If returning a book and the book was not rented out, output \\"Book ISBN was not rented\\". -----Examples----- Sample Input 1: 3 1001 1002 1003 4 Rent 1001 Rent 1001 Return 1001 Return 1002 Sample Output 1: Book 1001 rented successfully Book 1001 is already rented Book 1001 returned successfully Book 1002 was not rented Sample Input 2: 2 12345 54321 6 Rent 12345 Rent 54321 Return 12345 Rent 12345 Return 12345 Return 54321 Sample Output 2: Book 12345 rented successfully Book 54321 rented successfully Book 12345 returned successfully Book 12345 rented successfully Book 12345 returned successfully Book 54321 returned successfully","solution":"def library_system(M, books, N, commands): # Initialize book status dictionary book_status = {isbn: \'available\' for isbn in books} output = [] for command in commands: action, isbn = command.split() isbn = int(isbn) if action == \'Rent\': if book_status[isbn] == \'available\': book_status[isbn] = \'rented\' output.append(f\\"Book {isbn} rented successfully\\") else: output.append(f\\"Book {isbn} is already rented\\") elif action == \'Return\': if book_status[isbn] == \'rented\': book_status[isbn] = \'available\' output.append(f\\"Book {isbn} returned successfully\\") else: output.append(f\\"Book {isbn} was not rented\\") return output"},{"question":"One day, the great explorer Ada Lovelace ventured into the mysterious Cave of Fibonacci. Legend says that deep inside the cave lies a golden artifact which can only be unlocked by solving an ancient sequence puzzle. To reach the artifact, Ada must solve the following problem: You are given a sequence of N integers. Ada needs to find out the length of the longest subsequence that forms a Fibonacci-like sequence. A sequence {F1, F2, ..., Fk} is called Fibonacci-like if: 1. k ≥ 3 2. For every i ≥ 3, Fi = Fi-1 + Fi-2 Write a function `longestFibSubseq` that takes an integer array as an input and returns the length of the longest Fibonacci-like subsequence in the array. If there is no such subsequence, return 0. Constraints: 1 <= N <= 1000 1 <= A[i] <= 10^9 Example: Input: [1, 3, 7, 11, 12, 14, 18] Output: 3 Explanation: The longest Fibonacci-like subsequence is [1, 11, 12] which has a length of 3 (11 = 3 + 7).","solution":"def longestFibSubseq(A): Takes an integer list and returns the length of the longest Fibonacci-like subsequence. If there is no such subsequence, returns 0. if not A or len(A) < 3: return 0 index = {x: i for i, x in enumerate(A)} longest = {} max_len = 0 for k in range(len(A)): for j in range(k): i = index.get(A[k] - A[j], None) if i is not None and i < j: cand = longest.get((i, j), 2) + 1 longest[(j, k)] = cand max_len = max(max_len, cand) return max_len if max_len >= 3 else 0"},{"question":"Create a function that accepts a list of strings and returns the longest common prefix among all strings. If there is no common prefix, return an empty string. For example: longest_common_prefix([\\"flower\\", \\"flow\\", \\"flight\\"]) // returns \\"fl\\" longest_common_prefix([\\"dog\\", \\"racecar\\", \\"car\\"]) // returns \\"\\" Note: All given inputs are lowercase.","solution":"def longest_common_prefix(strs): Returns the longest common prefix among all strings in the list. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # The longest common prefix can be at most the length of the shortest string min_length = min(len(s) for s in strs) prefix = \\"\\" for i in range(min_length): # Get the current character from the first string char = strs[0][i] # Check if this character matches in all strings if all(s[i] == char for s in strs): prefix += char else: break return prefix"},{"question":"Write a program that determines if a given string is a \\"quasi-palindrome.\\" A quasi-palindrome is defined as a string that can be made into a palindrome by removing at most one character. Input The input consists of several datasets. The first line contains the number of datasets n (1 leq n leq 100). The next n lines each contain a single string s, consisting of lower case letters only. The length of each string s is at most 1000. Output For each dataset, print \\"YES\\" if the string is a quasi-palindrome and \\"NO\\" otherwise. Example Input 3 abca abccba abcdef Output YES YES NO","solution":"def is_quasi_palindrome(s): Returns True if the string s can be a palindrome by removing at most one character, False otherwise. # Helper function to check if a substring is a palindrome def is_palindrome_range(l, r): while l < r: if s[l] != s[r]: return False l += 1 r -= 1 return True l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: # Try removing character at l or r and check if it\'s a palindrome return is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1) l += 1 r -= 1 return True def determine_quasi_palindromes(n, strings): Determines if each string in the list \'strings\' is a quasi-palindrome. Parameters: - n: int, the number of datasets - strings: list of str, the strings to check Returns: - list of str, \\"YES\\" or \\"NO\\" for each string results = [] for s in strings: if is_quasi_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s and a list of words wordsList. Your task is to determine if s can be formed by concatenating each word from wordsList exactly once and without any spaces. Example 1: Input: s = \\"leetcode\\", wordsList = [\\"leet\\", \\"code\\"] Output: True Explanation: The string \\"leetcode\\" can be formed by concatenating \\"leet\\" and \\"code\\". Example 2: Input: s = \\"applepenapple\\", wordsList = [\\"apple\\", \\"pen\\"] Output: True Explanation: The string \\"applepenapple\\" can be formed by concatenating \\"apple\\", \\"pen\\", and \\"apple\\". Example 3: Input: s = \\"catsandog\\", wordsList = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: False Explanation: The string \\"catsandog\\" cannot be formed by concatenating all the words from the list exactly once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFormString() which takes a string s and a list of strings wordsList as input and returns a boolean indicating whether s can be formed from wordsList. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^{4} 1 <= len(wordsList) <= 10^{3} 1 <= len(wordsList[i]) <= 20","solution":"def canFormString(s, wordsList): Determines if the string s can be formed by concatenating each word from wordsList exactly once and without any spaces. Args: s (str): The target string. wordsList (list): List of words to form the target string. Returns: bool: True if s can be formed, False otherwise. concatenated_string = \'\'.join(wordsList) return s == concatenated_string"},{"question":"An online book retailer offers a subscription service where readers can order boxes containing different books every month. Each box has a certain number of books, and the retailer wishes to ensure that each box has exactly the same number of books to provide a consistent experience for their subscribers. However, sometimes the retailer\'s inventory might not divide perfectly into equal-sized boxes. Given the total number of books in the retailer\'s inventory and the desired number of boxes, you need to determine the maximum number of books that can be included in each box such that all the boxes contain the same number of books. -----Input----- The input consists of two integers, B and N, where B is the total number of books and N is the desired number of boxes (1 leq N leq B leq 10^{9}). -----Output----- Output the maximum number of books that can be included in each box so that all the boxes contain the same number of books. -----Examples----- Sample Input: 23 5 Sample Output: 4","solution":"def max_books_per_box(B, N): Returns the maximum number of books that can be included in each box so that all the boxes contain the same number of books. Parameters: B (int): Total number of books. N (int): Desired number of boxes. Returns: int: Maximum number of books per box. return B // N"},{"question":"There is a village with N houses, each house has a certain amount of gold. You are given an array G of length N, where G[i] represents the amount of gold in the ith house. You are a thief planning to steal from these houses but you can’t steal from two consecutive houses (i.e., if you steal from house i, you cannot steal from house i+1 or house i-1). Find the maximum amount of gold you can steal without alerting the neighbors. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ G[i] ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N G_1 G_2 ... G_N -----Output----- Print the maximum amount of gold you can steal. -----Sample Input----- 4 6 7 1 30 8 2 4 -----Sample Output----- 41 By stealing from houses 1, 4, and 6, the total stolen gold will be 6 + 30 + 4 = 40.","solution":"def max_gold_steal(G): Returns the maximum amount of gold that can be stolen without stealing from two consecutive houses. if not G: return 0 N = len(G) if N == 1: return G[0] if N == 2: return max(G[0], G[1]) dp = [0] * N dp[0] = G[0] dp[1] = max(G[0], G[1]) for i in range(2, N): dp[i] = max(G[i] + dp[i-2], dp[i-1]) return dp[-1] # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) G = list(map(int, data[1:])) print(max_gold_steal(G))"},{"question":"Given an array of integers, you need to find the length of the longest contiguous subarray with an equal number of even and odd numbers. You need to return the length of this subarray. If there is no such subarray, return 0. The array will have at least one integer and all inputs will be valid.","solution":"def findMaxLength(nums): Returns the length of the longest contiguous subarray with an equal number of even and odd numbers. Parameters: nums (List[int]): List of integers. Returns: int: Length of the longest contiguous subarray. balance_map = {0: -1} balance = 0 max_length = 0 for i, num in enumerate(nums): if num % 2 == 0: balance += 1 else: balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Given an array of integers A of size N and an integer X, your task is to find if there exists a subset of A such that the sum of the subset is exactly equal to X. Example 1: Input: N = 5, X = 9 A = [3, 34, 4, 12, 5, 2] Output: True Explanation: There is a subset (4, 5) with sum 9. Example 2: Input: N = 6, X = 30 A = [3, 34, 4, 12, 5, 2] Output: False Explanation: There is no subset that adds up to 30. Your Task: You don\'t need to read input or print anything. Your task is to complete the function subsetSum() which takes two integers N and X and an array A of size N as input parameters and returns True if there exists a subset of A with sum equal to X, otherwise False. Note: You may assume that the array contains non-negative integers. Expected Time Complexity: O(N * X) Expected Auxiliary Space: O(X) Constraints: 1 <= N <= 100 0 <= X <= 10^4 0 <= A[i] <= 10^3","solution":"def subsetSum(N, X, A): Determine if there exists a subset of array A of size N that sums to X. Uses dynamic programming to solve the subset sum problem. :param N: Integer, size of the array :param X: Integer, the target sum :param A: List of integers, the array elements :return: Boolean, True if there exists a subset with sum equal to X, otherwise False # Create a DP array to store results of subproblems dp = [False] * (X + 1) dp[0] = True # there is always a subset with sum 0, which is the empty subset for num in A: for j in range(X, num - 1, -1): if dp[j - num]: dp[j] = True return dp[X]"},{"question":"A company wants to monitor the employee attendance of their office. They have several employees, each with unique IDs. Each employee is either \'IN\' (entered the office) or \'OUT\' (left the office) at different times. An employee can only be \'IN\' once before they can be \'OUT\' and vice versa. You are given a list of attendance records in the form of strings where each string consists of \'I\' followed by the employee ID and \'O\' followed by the employee ID. Create a program that validates the records and calculates the total number of employees currently inside the office at the end of the day. Input - The input consists of multiple datasets, each ending with a line containing a single zero. - Each dataset on multiple lines contains the attendance records of one day, where each line has multiple \'IN\' and \'OUT\' records separated by spaces. - An \'IN\' record is denoted by \'I<employee_id>\', and an \'OUT\' record is denoted by \'O<employee_id>\'. Constraints: - Employee IDs are integers between 1 and 10^6. - Each ID will only appear once per action within a dataset. Output - For each dataset, print the total number of employees inside the office at the end of the day. Example Input I1 I2 O1 I3 O2 I4 O3 I1 O1 I2 I1 O1 I2 O3 I4 O1 I4 I3 O4 I2 I1 O1 O4 O3 0 Output 1 3 0","solution":"def calculate_employees_inside(office_records): Given a list of attendance records, calculates the number of employees currently inside the office at the end of the day. office_records is a list of strings where each string contains \'IN\' or \'OUT\' records separated by spaces. inside = set() for record in office_records: if record == \'0\': break actions = record.split() for action in actions: if action.startswith(\'I\'): employee_id = action[1:] inside.add(employee_id) elif action.startswith(\'O\'): employee_id = action[1:] if employee_id in inside: inside.remove(employee_id) return len(inside)"},{"question":"You’ve been given a rectangular grid representing a maze with `N` rows and `M` columns. Each cell in the grid is either empty (represented by `.`) or contains an obstacle (represented by `#`). You can move left, right, up, or down, but not through obstacles. You need to determine if there exists a path from the top-left corner of the grid (cell `(0, 0)`) to the bottom-right corner (cell `(N-1, M-1)`). Write a function `is_path_possible(grid: List[List[str]]) -> bool` that takes in the maze as input and returns `True` if there is a path from the top-left to the bottom-right, or `False` if there is no such path. Input: - `grid`: A list of lists containing the maze grid, where each element is either `.` or `#`. Output: - Return `True` if there is a path from `(0, 0)` to `(N-1, M-1)`, otherwise return `False`. Example: Input: ``` grid = [ [\'.\', \'.\', \'#\'], [\'#\', \'.\', \'.\'], [\'.\', \'#\', \'.\'] ] ``` Output: ``` True ``` Note: - The dimensions of the grid `N` (number of rows) and `M` (number of columns) are such that `1 <= N, M <= 1000`. - There will always be a cell at `(0, 0)` and `(N-1, M-1)`, both of which are empty (i.e., \'.\') in the input.","solution":"from typing import List def is_path_possible(grid: List[List[str]]) -> bool: if not grid or not grid[0]: return False N = len(grid) M = len(grid[0]) visited = [[False for _ in range(M)] for _ in range(N)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' and not visited[x][y] def dfs(x, y): if x == N - 1 and y == M - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"You are given a binary string of length n. You are allowed to reverse any substring of this string exactly once. Your task is to determine the lexicographically smallest string that can be obtained after performing such an operation. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the binary string. The second line contains a binary string of length n. Output Print the lexicographically smallest string that can be obtained after reversing exactly one substring. Examples Input 5 11001 Output 00111 Input 8 10100111 Output 00101111 Note In the first sample, the lexicographically smallest string can be obtained by reversing the substring from index 1 to 3 (zero-indexed). In the second sample, the lexicographically smallest string can be obtained by reversing the substring from index 2 to 5 (zero-indexed).","solution":"def lexicographically_smallest_after_reversal(n, binary_string): Returns the lexicographically smallest string that can be obtained by reversing exactly one substring of the given binary string. # If the string is already non-increasing, it is already the smallest possible after one reversal if binary_string == \\"\\".join(sorted(binary_string)): return binary_string min_string = binary_string for i in range(n): for j in range(i + 1, n + 1): # Reverse the substring from index i to j-1 reversed_substring = binary_string[:i] + binary_string[i:j][::-1] + binary_string[j:] # Check if the new string is lexicographically smaller if reversed_substring < min_string: min_string = reversed_substring return min_string"},{"question":"You are given a binary tree where each node contains a value between 0 and 25 inclusive, representing letters \'a\' to \'z\'. Your task is to find the lexicographically smallest string that starts at a leaf of this binary tree and ends at the root. A string s1 is considered lexicographically smaller than s2 if s1 comes before s2 in dictionary order. Input: * The input is provided in a format similar to that used by many binary tree problems: * First line: an integer n (1 ≤ n ≤ 1000), the number of nodes in the tree. * Next n lines: each line consists of three integers v, l, r, representing a node with value v and its left and right children respectively. * A value of -1 for l or r indicates that there is no left or right child. Assume the given binary tree is rooted at node 0. Output: * Print the lexicographically smallest string that can be formed by starting from any leaf and ending at the root. Example: Input: 7 0 1 2 1 3 4 2 5 6 3 -1 -1 4 -1 -1 5 -1 -1 6 -1 -1 Output: \\"ab\\" Description: * The binary tree described above corresponds to: a / b c / / d e f g * The possible strings from leaf to root are \\"dba\\", \\"eba\\", \\"fca\\", and \\"gca\\". * The lexicographically smallest string among these is \\"dba\\". You will have to implement an efficient algorithm to traverse the binary tree and find the smallest string following the given constraints.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(nodes, n): tree_nodes = [TreeNode() for _ in range(n)] for i in range(n): v, l, r = nodes[i] tree_nodes[i].value = v if l != -1: tree_nodes[i].left = tree_nodes[l] if r != -1: tree_nodes[i].right = tree_nodes[r] return tree_nodes[0] def smallest_from_leaf(root): def dfs(node, path): if not node: return path.append(chr(node.value + ord(\'a\'))) if not node.left and not node.right: result.append(\'\'.join(reversed(path))) dfs(node.left, path) dfs(node.right, path) path.pop() result = [] dfs(root, []) return min(result) if result else \'\' # Parsing input and creating the binary tree def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) nodes = [tuple(map(int, data[i*3+1:i*3+4])) for i in range(n)] root = build_tree(nodes, n) print(smallest_from_leaf(root)) # If running this script directly, use the main function to handle input/output if __name__ == \\"__main__\\": main()"},{"question":"Jessie loves solving mathematical puzzles and came across a sequence problem: Given a sequence {A} of N integers, she wants to make the sequence a palindrome. The minimum operation she can perform to achieve this is reversing any subarray of {A}. She wants to know, what is the minimum number of such operations required to make the sequence a palindrome? A sequence is considered a palindrome if it reads the same backward as forward. Input Format The first line contains one integer, N, denoting the number of elements in the sequence {A}. The second line contains N space-separated integers, where A_i (1 leq A_i leq 1000) is the i-th element of the sequence. Constraints 1 leq N leq 100 Output Format Print the minimum number of operations required to make the sequence a palindrome. Sample Input 5 3 1 4 1 5 Sample Output 1 Explanation One of the optimal ways to make the sequence a palindrome is to reverse the subarray from index 2 to 4, resulting in the sequence: [3, 1, 1, 4, 5]. This makes the sequence a palindrome with a single operation.","solution":"def min_operations_to_palindrome(seq): Returns the minimum number of subarray reversals required to make the sequence a palindrome. n = len(seq) if n <= 1: return 0 # Auxiliary table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Fill dp table for gap in range(1, n): for i in range(n - gap): j = i + gap if seq[i] == seq[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i][j-1], dp[i+1][j]) + 1 return dp[0][n-1]"},{"question":"You are given an array of integers. Find the maximum product of any two distinct numbers in the array. Input Format A list of integers - arr Output Format Print a single integer which is the maximum product of any two distinct numbers. Input Constraints 2 ≤ len(arr) ≤ 1000 -1000 ≤ arr[i] ≤ 1000 Problem Setter: Practo Tech Team SAMPLE INPUT [1, 10, 5, 2] SAMPLE OUTPUT 50 Explanation The maximum product of any two distinct numbers in the array is 10 * 5 = 50.","solution":"def max_product_of_two_numbers(arr): Returns the maximum product of any two distinct numbers in the array. if len(arr) < 2: raise ValueError(\\"Array should have at least two elements\\") # Sort the array to find the two largest and two smallest elements easily arr.sort() # The maximum product can be either: # - Product of the two largest elements # - Product of the two smallest elements (if they are both negative) max_product = max(arr[-1] * arr[-2], arr[0] * arr[1]) return max_product"},{"question":"Sara is an avid participant in treasure hunts. Recently, she came across a peculiar treasure hunt that involves deciphering secret messages encoded in strings. These messages contain clues as pairs of digits. For instance, the string \\"1234\\" contains pairs 12, 23, and 34. Sara needs to identify the number of unique pairs of digits in each message. Your task is to help her figure this out. -----Input----- The first line of input contains an integer N denoting the number of test cases. The description of N test cases follows. The first and only line of each test case contains a string M, consisting of digits. -----Output----- For each test case, output a single line containing the number of unique pairs of digits appearing in the given string. -----Constraints----- - 1 ≤ N ≤ 100 - Subtask 1 (35 points): 2 ≤ |M| ≤ 3 - Subtask 2 (65 points): 2 ≤ |M| ≤ 104 -----Example----- Input:3 1234 1111 432123 Output:3 1 5 -----Explanation----- Example case 1. The unique pairs are 12, 23, and 34. Example case 2. The unique pair is 11. Example case 3. The unique pairs are 43, 32, 21, 12, and 23.","solution":"def count_unique_pairs(case_strings): result = [] for s in case_strings: pairs = set() for i in range(len(s) - 1): pairs.add(s[i:i+2]) result.append(len(pairs)) return result # Function to parse the input and call count_unique_pairs def treasure_hunt_solution(n, cases): return count_unique_pairs(cases)"},{"question":"The Mole likes to store nuts in different positions. He has an m x n rectangle grid (0-indexed) representing his storehouse. Each cell in the grid can either be empty or contain a nut. The Mole\'s task is to navigate from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1) of the grid and collect as many nuts as he can. However, there are some constraints on his movement: 1. The Mole can only move right to cell (i, j+1) or down to cell (i+1, j) at any point in time. 2. He can only pick up a nut if he passes through a cell that contains one. The Mole needs a strategy to maximize the number of nuts collected by the time he reaches the bottom-right corner of the grid. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case starts with two integers m and n, the dimensions of the grid. The next m lines each contain n integers, where each integer is either 0 (indicating the cell is empty) or 1 (indicating the cell contains a nut). -----Output----- For each test case, output a single line containing the maximum number of nuts the Mole can collect when traveling from the top-left corner to the bottom-right corner. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ m, n ≤ 100 -----Example----- Input: 2 3 3 0 1 0 1 0 1 0 1 0 2 2 1 0 0 1 Output: 2 2 -----Explanation----- Case 1. The optimal path is right → down → right → down, collecting 2 nuts. The mole starts at (0, 0). Moves to (0, 1) (collects 1 nut), then to (1, 1) (no nut), then to (1, 2) (collects 1 nut), and finally to (2, 2). Case 2. The optimal path is right → down, collecting 2 nuts. The mole starts at (0, 0). Moves to (0, 1) (no nut), then to (1, 1) (collects 1 nut). Another possible path is down → right, which also collects 2 nuts. To solve this problem, use dynamic programming to find the maximum number of nuts that can be collected while traversing the grid from the top-left to the bottom-right corners.","solution":"def max_nuts_collected(grid): Returns the maximum number of nuts collected by the mole navigating from top-left to bottom-right on the grid. m = len(grid) n = len(grid[0]) # Create a DP table to store the maximum nuts collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting cell dp[0][0] = grid[0][0] # Fill the DP table for i in range(m): for j in range(n): if i == 0 and j > 0: dp[i][j] = dp[i][j - 1] + grid[i][j] # Only can move from the left elif i > 0 and j == 0: dp[i][j] = dp[i - 1][j] + grid[i][j] # Only can move from above elif i > 0 and j > 0: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # Move from left or above return dp[m - 1][n - 1] def solve(T, test_cases): results = [] for case in test_cases: m, n, grid = case result = max_nuts_collected(grid) results.append(result) return results"},{"question":"You are given a list of N integers. Your task is to rearrange the list such that the difference between any two consecutive integers is minimized. If there are multiple ways to rearrange the list, any valid rearrangement will be acceptable. Constraints * 1 ≤ N ≤ 1000 * Each integer in the list is between -10^9 and 10^9 Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the rearranged list of integers in the following format: b_1 b_2 ... b_N Here, b_i is the i-th integer in the rearranged list. Examples Input 5 4 2 1 6 3 Output 1 2 3 4 6 Input 3 -1 -3 -2 Output -3 -2 -1","solution":"def rearrange_list(N, array): Rearrange the list such that the difference between any two consecutive integers is minimized. array.sort() return array"},{"question":"Maggu\'s teacher gave him a coding challenge to implement a unique data structure. However, Maggu is busy studying for his final exams and asks for your assistance. He wants you to create a simple trie (prefix tree) that supports insertion and search operations. Can you help him by implementing the needed functions? Assignment problem: You are to implement a trie with the following operations: 1. `insert(word)` - Inserts a word into the trie. 2. `search(word)` - Returns `True` if the word is in the trie, and `False` otherwise. 3. `startsWith(prefix)` - Returns `True` if there is any word in the trie that starts with the given prefix, and `False` otherwise. INPUT: - First line contains a single integer N denoting the number of operations. - The next N lines contain operations in the format: - `insert word` - followed by a word which is to be inserted into the trie. - `search word` - followed by a word which needs to be searched in the trie. - `startsWith prefix` - followed by a prefix which needs to be checked in the trie. 1 ≤ N ≤ 10^5 1 ≤ word.length ≤ 50 All input words consist of lowercase letters a-z. OUTPUT: For each `search` and `startsWith` operation, output `True` or `False` on a new line depending on the result of the operation. SAMPLE INPUT 8 insert apple search apple search app startsWith app insert app search app insert application startsWith appl SAMPLE OUTPUT True False True True True","solution":"class TrieNode: def __init__(self): Initialize the Trie node with a dictionary to store children and a flag to denote end of word. self.children = {} self.is_end_of_word = False class Trie: def __init__(self): Initialize the Trie with a root TrieNode. self.root = TrieNode() def insert(self, word): Inserts a word into the trie. node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): Returns if the word is in the trie. node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def startsWith(self, prefix): Returns if there is any word in the trie that starts with the given prefix. node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"Description Write a function that takes an array of numbers and returns the median of the array. The median is the value separating the higher half from the lower half of a data sample. For a dataset, it can be found as follows: - If the number of elements is odd, the median is the middle element of the sorted array. - If the number of elements is even, the median is the average of the two middle elements of the sorted array. Note: The array of numbers will always contain at least one number. Examples ```python findMedian([1, 3, 3, 6, 7, 8, 9]) == 6 findMedian([1, 2, 3, 4, 5, 6, 8, 9]) == 4.5 findMedian([1, 1, 2, 3, 4, 5, 6]) == 3 findMedian([1]) == 1 ```","solution":"def findMedian(arr): Returns the median of an array of numbers. Parameters: arr (list): A list of numbers. Returns: float: The median of the array. arr.sort() n = len(arr) mid = n // 2 if n % 2 == 0: median = (arr[mid - 1] + arr[mid]) / 2 else: median = arr[mid] return median"},{"question":"We have a connected undirected graph with N vertices and M edges. Each vertex has a weight assigned to it, and there is a path between any pair of vertices. The i-th edge connects Vertex u_i and v_i. For each query given as \'A B\', determine the maximum weight of a vertex on the shortest path from Vertex A to Vertex B. -----Constraints----- - 2 <= N <= 10^5 - 1 <= M <= 2 * 10^5 - 1 <= u_i, v_i <= N - 1 <= weight of each vertex <= 10^9 - The given graph is connected. -----Input----- Input is given from Standard Input in the following format: N M w_1 w_2 ... w_N u_1 v_1 : u_M v_M Q A_1 B_1 : A_Q B_Q where: - N is the number of vertices. - M is the number of edges. - w_i is the weight of the i-th vertex. - u_i and v_i are the vertices connected by the i-th edge. - Q is the number of queries. - A_j and B_j are the vertices for the j-th query. -----Output----- For each query, print a line containing the answer to the problem. -----Sample Input----- 5 5 1 2 3 4 5 1 2 2 3 3 4 4 5 1 5 3 1 3 2 5 1 4 -----Sample Output----- 3 5 4 In the sample input, the graph has: - 5 vertices with weights [1, 2, 3, 4, 5]. - The edges are (1-2), (2-3), (3-4), (4-5), (1-5). - Three queries: (1-3), (2-5), and (1-4). For the query 1 -> 3, the path is 1 -> 2 -> 3, and the maximum weight on this path is 3. For the query 2 -> 5, the path is 2 -> 3 -> 4 -> 5, and the maximum weight on this path is 5. For the query 1 -> 4, the path is 1 -> 5 -> 4, and the maximum weight on this path is 4.","solution":"import heapq from collections import defaultdict, deque def dijkstra_max_path(N, graph, weights, start, end): Applies Dijkstra\'s algorithm to find the maximum weight of a vertex on the shortest path from \'start\' to \'end\'. max_weights = [0] * (N + 1) max_weights[start] = weights[start - 1] # Adjust index for 1-based to 0-based weights pq = [(weights[start - 1], start)] visited = [False] * (N + 1) while pq: current_weight, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True if node == end: break for neighbor in graph[node]: if not visited[neighbor]: new_weight = max(max_weights[node], weights[neighbor - 1]) if new_weight > max_weights[neighbor]: max_weights[neighbor] = new_weight heapq.heappush(pq, (new_weight, neighbor)) return max_weights[end] def solve(graph_info, weights, edges, queries): N, M = graph_info graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) results = [] for A, B in queries: result = dijkstra_max_path(N, graph, weights, A, B) results.append(result) return results"},{"question":"Palindrome Rearrangement - Problem A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example, \\"madam\\", \\"A man a plan a canal Panama\\", and \\"racecar\\" are palindromes. Given a string, determine if any permutation of the string is a palindrome. This means that rearranging the characters of the string can form a palindrome. Note that the input string will only contain lowercase alphabets. Input Format A single string s which consists of lowercase alphabets (\'a\' to \'z\'). Output Format Output \\"YES\\" if any permutation of s can be a palindrome, otherwise, output \\"NO\\". Constraints 1 ≤ |s| ≤ 100,000 Example Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabbccdde Output YES Explanation: 1. For the string \\"civic\\", the existing arrangement is already a palindrome. 2. For the string \\"ivicc\\", rearrangement as \\"civic\\" or \\"vicic\\" forms a palindrome. 3. For the string \\"hello\\", no rearrangement can form a palindrome. 4. For the string “aabbccdde”, rearrangement as “abcdedcba” can form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the string s can form a palindrome. Parameters: s (str): the input string Returns: str: \\"YES\\" if any permutation of s can be a palindrome, otherwise \\"NO\\" from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be capable of forming a palindrome, # there can be at most one character with an odd frequency. return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Find the closest pair of elements between two sorted sets A = {a_0, a_1, ..., a_{n-1}} and B = {b_0, b_1, ..., b_{m-1}}. Constraints * 1 leq n, m leq 200,000 * 0 leq a_0 < a_1 < ... < a_{n-1} leq 10^9 * 0 leq b_0 < b_1 < ... < b_{m-1} leq 10^9 Input The input is given in the following format. n a_0 ; a_1 ; ... ; a_{n-1} m b_0 ; b_1 ; ... ; b_{m-1} Elements in A and B are given in ascending order. There are no duplicate elements in each set. Output Print the closest pair in the format a ; b, where a in A and b in B. If there are multiple pairs with the same minimum difference, print the pair with the smallest a. If there are still ties, print the pair with the smallest b. Example Input 4 1 3 15 20 5 8 10 12 16 17 Output 15 16","solution":"def find_closest_pair(A, B): n = len(A) m = len(B) i = j = 0 min_diff = float(\'inf\') closest_pair = (A[0], B[0]) while i < n and j < m: diff = abs(A[i] - B[j]) if diff < min_diff: min_diff = diff closest_pair = (A[i], B[j]) if A[i] < B[j]: i += 1 else: j += 1 return closest_pair"},{"question":"You are given a list of integers and your task is to modify the list such that all even numbers appear before all the odd numbers while maintaining their relative order within their respective groups. Write a program to accomplish this. Input: The first line contains an integer N, denoting the size of the list. The second line contains N space-separated integers, representing the elements of the list. Output: Print the modified list such that all even numbers appear before all the odd numbers while preserving their relative order within each group. Constraints: 1 ≤ N ≤ 10^5 0 ≤ list[i] ≤ 10^9 SAMPLE INPUT 7 4 3 2 1 5 6 7 SAMPLE OUTPUT 4 2 6 3 1 5 7","solution":"def segregate_even_odd(numbers): Rearrange the list such that all even numbers appear before all odd numbers, while maintaining the relative order within their respective groups. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"Alice loves counting unique substrings in her favorite strings. A substring of a string is a contiguous sequence of characters within that string. Given a string `S`, Alice wants to know the number of distinct substrings it contains. Can you help her find this number? -----Constraints----- - The length of string S is denoted by |S|. - 1 <= |S| <= 1000 - S consists only of lowercase English letters. -----Input----- Input is given from Standard Input in a single line containing the string `S`. -----Output----- Print the number of distinct substrings in the given string. -----Sample Input----- banana -----Sample Output----- 15","solution":"def count_distinct_substrings(s): Count the number of distinct substrings in a given string s. Args: s (str): Input string. Returns: int: Number of distinct substrings. # Using a set to store all unique substrings substrings = set() # Iterate over all possible starting points in the string for i in range(len(s)): # Iterate over all possible ending points from the current starting point for j in range(i + 1, len(s) + 1): # Add the substring from index i to j (exclusive) to the set substrings.add(s[i:j]) # The number of distinct substrings is the size of the set return len(substrings)"},{"question":"You are given an array of n integers. You are allowed to perform exactly one operation on this array. In one operation, you can choose any subarray and reverse it. Your task is to determine the minimum possible number that can exist at the first position of the array after performing at most one reversing operation. -----Input----- The first line of the input contains an integer n (1 le n le 1000) — the size of the array. The second line of the input contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the minimum possible number that can exist at the first position of the array after performing at most one reversing operation. -----Examples----- Input 5 3 1 5 2 4 Output 1 Input 4 4 3 2 1 Output 1 Input 3 7 3 9 Output 3 -----Note----- In the first example, you can reverse the subarray [3, 1] to get [1, 3, 5, 2, 4]. The minimum number at the first position is 1. In the second example, the entire array is in descending order. No matter which subarray you reverse, the minimum number at the first position will be 1. In the third example, the array is already arranged such that reversing any subarray cannot bring a number smaller than 3 to the first position. Therefore, the minimum number is 3.","solution":"def min_first_position(arr): Returns the minimum possible number that can exist at the first position of the array after performing at most one reversing operation. return min(arr)"},{"question":"Alice and Bob are playing a game with a grid of size NxM where each cell can be either empty or contain an obstacle. The game starts with Alice placing a token at the top-left corner of the grid. The goal is for the token to reach the bottom-right corner. The token can move right or down to an adjacent empty cell. If Alice can find a path to the bottom-right corner, she wins. Otherwise, Bob wins. Given the grid, determine if Alice wins or not. Input: First line contains an integer T, the number of test cases. For each test case, the first line contains two integers N and M, representing the size of the grid. The next N lines each contain M characters, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. Output: For each test case, output \\"Alice\\" if Alice can win, otherwise output \\"Bob\\". Constraints: 0 < T ≤ 10 1 ≤ N, M ≤ 50 Example Input: 2 4 4 .... ..#. .#.. .... 3 3 . .#. ..# Example Output: Alice Bob","solution":"def is_path_to_bottom_right(grid, N, M): Return True if there is a path from top-left to bottom-right in the grid, otherwise False. from collections import deque if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return False queue = deque([(0, 0)]) visited = set((0, 0)) directions = [(1, 0), (0, 1)] # down, right while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return False def game_result(T, test_cases): Determine the result of the game for each test case. T: Number of test cases test_cases: List of tuples. Each tuple contains (N, M, grid) where grid is a list of strings. Return: List of strings (\\"Alice\\" or \\"Bob\\") for each test case. results = [] for test_case in test_cases: N, M, grid = test_case if is_path_to_bottom_right(grid, N, M): results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Given an array of integers representing the heights of buildings on a street, determine the maximum water that can be trapped between the buildings after a rain. A building\'s height is represented by the array\'s value at that index. The number of buildings and their heights are provided as input. Example 1: Input: arr[] = {0, 2, 0, 3, 0, 4, 0, 5} Output: 9 Explanation: The water trapped between indices 1 and 3 is 1 unit, between 1 and 4 is 1 unit, and so on. In total, 9 units of water can be trapped. Example 2: Input: arr[] = {3, 0, 2, 0, 4} Output: 7 Explanation: The water trapped between indices 0 and 2 is 3 units, between 2 and 4 is 2 units, etc. In total, 7 units of water can be trapped. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxWater() that takes an array (arr), sizeOfArray (n) and return the maximum water that can be trapped between the buildings. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^6 0 ≤ A[i] ≤ 10^6","solution":"def maxWater(arr): Returns the maximum water that can be trapped between the buildings. :param arr: List[int]. Heights of the buildings. :return: int. Maximum units of water that can be trapped. n = len(arr) if n == 0: return 0 # Initialize left and right maximums left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) # Fill right max array right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) # Calculate the water trapped water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - arr[i] return water_trapped"},{"question":"You are given an integer `n`. You need to create a function that returns a string consisting of the following pattern for the first `n` numbers: - For multiples of 3 and 5 print \\"FizzBuzz\\". - For multiples of 3 print \\"Fizz\\". - For multiples of 5 print \\"Buzz\\". - For all other numbers print the number itself. The output should be a single string with each value separated by a comma and a space. For example, if the input `n` is 5, the function should return: ```python \\"1, 2, Fizz, 4, Buzz\\" ``` If the input `n` is 10, the function should return: ```python \\"1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz\\" ``` Implement this function in Python.","solution":"def fizz_buzz(n): Returns a string following the FizzBuzz pattern for numbers from 1 to n. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \\", \\".join(result)"},{"question":"You are given a grid of size N x N filled with non-negative integers. Your goal is to find the number of distinct values that can be collected by starting from the top-left cell (1,1) and moving to the bottom-right cell (N,N). You can only move right or down at each step. Formally, you are required to calculate the number of distinct integers that can be present in any possible path from the top-left corner to the bottom-right corner of the grid. # Input Format - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the size of the grid. - Each of the next N lines contains N space-separated integers representing the grid. # Output Format - For each test case, output a single integer representing the number of distinct values that can be collected from the top-left to the bottom-right of the grid. # Constraints - 1 le T le 10 - 1 le N le 50 - 0 le Grid[i][j] le 1000 # Sample Input 1 ``` 2 2 1 2 3 4 3 1 2 3 4 5 6 7 8 9 ``` # Sample Output 1 ``` 4 9 ``` # Explanation 1 - Test Case 1: The possible paths (values collected) are: 1. \\"1 -> 2 -> 4\\" 2. \\"1 -> 3 -> 4\\" All distinct values collected are: 1, 2, 3, 4 (4 distinct values). - Test Case 2: All possible values 1 through 9 can be collected in any path from top-left to bottom-right, hence 9 distinct values. With these constraints, the complex task of exploring all potential paths should be feasible within the given limits.","solution":"def distinct_values_in_paths(T, test_cases): results = [] for case in test_cases: N, grid = case def dfs(x, y, visited): if x == N - 1 and y == N - 1: visited.add(grid[x][y]) return visited visited.add(grid[x][y]) results = [] if x + 1 < N: results.append(dfs(x + 1, y, visited.copy())) if y + 1 < N: results.append(dfs(x, y + 1, visited.copy())) result_set = set() for res in results: result_set.update(res) return result_set distinct_values = dfs(0, 0, set()) results.append(len(distinct_values)) return results"},{"question":"Given a binary string, flip exactly one bit from \'0\' to \'1\'. Find the length of the longest contiguous segment of \'1\'s that you can obtain and return the length of that segment. Example 1: Input: s = \\"1101110\\" Output: 6 Explanation: By flipping the last \'0\' to \'1\', the string becomes \\"1101111\\", which has a contiguous segment of 6 \'1\'s. Example 2: Input: s = \\"1001\\" Output: 2 Explanation: By flipping any of the \'0\'s to \'1\', the longest contiguous segment of \'1\'s remains 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestSegment() which accepts a string s and returns the maximum length of the longest contiguous segment of \'1\'s after flipping exactly one \'0\' to \'1\'. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 0 <= len(s) <= 10^5 s contains only \'0\' and \'1\' characters.","solution":"def longestSegment(s): Given a binary string s, flip exactly one bit from \'0\' to \'1\' and find the length of the longest contiguous segment of \'1\'s. n = len(s) # Count the number of zeros num_zeros = s.count(\'0\') if num_zeros == 0: # If there are no zeros, the whole string is already the longest segment return n elif num_zeros == 1: # If there is only one zero, flipping it will make the whole string 1\'s return n # Split the string based on \'0\' and calculate lengths of segments of \'1\'s segments = list(map(len, s.split(\'0\'))) max_length = 0 for i in range(len(segments) - 1): # Calculate the potential segment length by flipping the zero in between two segments of \'1\'s potential_length = segments[i] + segments[i + 1] + 1 max_length = max(max_length, potential_length) # Return the maximum found length return max_length"},{"question":"The kingdom of Zermst needs an efficient system to sort its daily treasure collections. Each batch of treasures comes with three different treasure types: Gold coins, Silver coins, and Bronze coins. The collection is specified by how many of each type of treasure the batch contains. The goal is to sort each batch lexicographically based on the number of treasures, starting with Gold coins, followed by Silver coins, and then Bronze coins. The sorting criteria are: 1. Number of Gold coins. 2. Number of Silver coins (if the number of Gold coins is the same). 3. Number of Bronze coins (if the number of Gold and Silver coins is the same). Can you write a program to sort the treasure collections? -----Input----- Input consists of multiple lines: * The first line contains an integer n (1 le n le 100) representing the number of batches. * The next n lines each contain three integers g, s, and b (0 le g, s, b le 1000), representing the number of Gold, Silver, and Bronze coins in each batch, respectively. -----Output----- Output the sorted list of batches, each on a separate line in the format \\"g s b\\". -----Examples----- Sample Input 1: 3 2 5 1 1 2 3 2 2 3 Sample Output 1: 1 2 3 2 2 3 2 5 1 Sample Input 2: 5 3 5 4 2 8 5 3 4 6 2 5 5 1 7 3 Sample Output 2: 1 7 3 2 5 5 2 8 5 3 4 6 3 5 4","solution":"def sort_treasure_batches(batches): Sorts treasure batches lexicographically by gold, silver, and bronze counts. Args: batches (list of tuples): List of tuples where each tuple represents a batch (gold, silver, bronze). Returns: list of tuples: Sorted list of batches. return sorted(batches) def parse_input(input_str): Parses the input string into a list of batches. Args: input_str (str): Input string with multiple lines. Returns: list of tuples: List of batches. lines = input_str.strip().split(\'n\') n = int(lines[0]) batches = [tuple(map(int, line.split())) for line in lines[1:n+1]] return batches def format_output(batches): Formats a list of batches into a string for output. Args: batches (list of tuples): List of batches. Returns: str: Formatted string with each batch on a new line. return \'n\'.join(\' \'.join(map(str, batch)) for batch in batches) # Example use case: def main(input_str): batches = parse_input(input_str) sorted_batches = sort_treasure_batches(batches) return format_output(sorted_batches)"},{"question":"You are given an array of integers. Each integer represents the height of a stack of blocks. You are required to equalize the height of all stacks by either adding or removing blocks from the stacks. You can add or remove only one block at a time. Write a program to find the minimum number of moves required to make all stacks equal in height. -----Input----- The first line of input contains an integer t (1 le t le 1000) — the number of test cases. Each of the following t test cases consists of two lines. The first line contains an integer n (1 le n le 10^5), the number of stacks in the array. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^4) representing the height of each stack. It is guaranteed that the sum of n values over all test cases does not exceed 10^6. -----Output----- For each test case, output a single integer — the minimum number of moves required to make all stacks equal in height. -----Examples----- Input 3 3 1 2 3 2 4 4 4 5 5 5 5 Output 2 0 0 -----Note----- In the first test case, one solution is: - Add one block to the first stack to make it of height 2. - Add one block to the first stack again (making it 3) or remove one block from the third stack (making it 2 or 1). In both second and third cases, all stacks are already of equal height, so the minimum number of moves is 0.","solution":"def minimum_moves_to_equal_stacks(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] median_height = sorted(heights)[n // 2] moves = sum(abs(h - median_height) for h in heights) results.append(moves) return results"},{"question":"You are given an array of n integers and a positive integer k. Your task is to find the length of the longest subarray that contains at most k even numbers. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ n) – the number of integers in the array and the maximum number of even numbers allowed in the subarray. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) – the elements of the array. -----Output----- Print the length of the longest subarray that contains at most k even numbers. -----Examples----- Input 10 2 1 2 3 4 5 6 7 8 9 10 Output 5 Input 5 0 1 3 5 7 9 Output 5 Input 8 1 2 4 6 8 10 12 14 16 Output 1 -----Note----- In the first example, the longest subarray with at most 2 even numbers is [3, 4, 5, 6, 7], which has a length of 5. In the second example, since there are no even numbers in the array, the whole array is a valid subarray, thus the length is 5. In the third example, the array contains only even numbers, so the longest subarray with at most 1 even number is any single element, thus the length is 1.","solution":"def longest_subarray_with_at_most_k_evens(n, k, arr): left = 0 even_count = 0 max_length = 0 for right in range(n): if arr[right] % 2 == 0: even_count += 1 while even_count > k: if arr[left] % 2 == 0: even_count -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a remote village, there is a festival celebrating the harvest season. One of the main attractions is a game where players are given a string of lowercase English letters, and they have to form the lexicographically smallest possible string by removing exactly R characters. The villagers are very competitive and want to maximize their chances of winning by calculating the smallest possible strings quickly. Your task is to help them by writing a program that performs this operation. -----Input----- The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S and an integer R, separated by a space. -----Output----- For each test case, output a single line containing the lexicographically smallest string possible after removing exactly R characters from the string S. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 100,000 - 0 ≤ R < |S| -----Subtasks----- - Subtask 1 (20 points): 1 ≤ |S| ≤ 1,000 - Subtask 2 (80 points): Original constraints -----Example----- Input: 3 abcde 2 xyzab 3 hello 1 Output: abc ab ello -----Explanation----- Example case 1. You remove the characters \'d\' and \'e\' to get the lexicographically smallest string \\"abc\\". Example case 2. You remove the characters \'x\', \'y\', and \'z\' to get the lexicographically smallest string \\"ab\\". Example case 3. You remove the character \'h\' to get the lexicographically smallest string \\"ello\\".","solution":"def smallest_lexicographic_string(S, R): Removes exactly R characters from string S to form the lexicographically smallest possible string. n = len(S) stack = [] for i in range(n): while stack and R > 0 and stack[-1] > S[i]: stack.pop() R -= 1 stack.append(S[i]) # If there are any R removals left, remove from the end final_string = \'\'.join(stack[:len(stack) - R]) return final_string def process_test_cases(T, test_cases): Processes the test cases and prints the results for each case. results = [] for i in range(T): S, R = test_cases[i] R = int(R) result = smallest_lexicographic_string(S, R) results.append(result) return results"},{"question":"You are given a string consisting of lowercase alphabets only. You can perform the following operation any number of times: Choose a non-empty substring of the given string that is a palindrome, and remove it from the string. The task is to find the length of the longest palindrome that can be removed in one go. Example 1: Input: str = \\"abacaba\\" Output: 7 Explanation: The entire string is a palindrome which can be removed: \\"abacaba\\" → length = 7. Example 2: Input: str = \\"racecar\\" Output: 7 Explanation: The entire string is a palindrome which can be removed: \\"racecar\\" → length = 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestRemovablePalindrome() which takes string str as input and returns the length of the longest palindrome that can be removed in one go. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ string length ≤ 10^{3} str[i] is a lowercase English letter.","solution":"def longestRemovablePalindrome(s): n = len(s) # Create a 2D array to store palindrome subproblems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes max_length = 1 # Initialize substrings of length 1 as palindromes for i in range(n): dp[i][i] = True # Check substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True max_length = length return max_length"},{"question":"Given an integer n, you need to write a function that returns a list of strings where each string corresponds to a number from 1 to n, but for multiples of three, the string should be \\"Fizz\\" instead of the number, and for the multiples of five, the string should be \\"Buzz\\". For numbers which are multiples of both three and five, the string should be \\"FizzBuzz\\". Example 1: Input: n = 3 Output: [\\"1\\", \\"2\\", \\"Fizz\\"] Example 2: Input: n = 5 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\"] Example 3: Input: n = 15 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"] Your Task: You are to complete the function fizzBuzz() which takes an integer n as its only parameter and returns an array of strings as described above. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 ≤ n ≤ 1000","solution":"def fizzBuzz(n): Returns a list of strings where each string corresponds to a number from 1 to n, with multiples of three represented as \\"Fizz\\", multiples of five as \\"Buzz\\", and multiples of both three and five as \\"FizzBuzz\\". result = [] for i in range(1, n+1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function that takes two strings as input and returns true if the letters of the first string can be rearranged to form the second string, regardless of case sensitivity, and false otherwise. Ignore spaces and punctuation marks in both strings. You can assume that the inputs will only contain letters, spaces, and punctuation marks. Function Signature: ```python def can_rearrange_to_form(s1: str, s2: str) -> bool: pass ``` # Examples Example 1 Input: ```python \\"hello, World!\\", \\"dlroW olleh\\" ``` Output: ```python True ``` Example 2 Input: ```python \\"Python3.8!\\", \\"3.8 python\\" ``` Output: ```python True ``` Example 3 Input: ```python \\"anagram\\", \\"nagaram\\" ``` Output: ```python True ``` Example 4 Input: ```python \\"rat\\", \\"car\\" ``` Output: ```python False ``` # Constraints - The function should ignore spaces and punctuation marks. - The function should be case insensitive. - The input strings can have a maximum length of 10,000 characters.","solution":"import string def can_rearrange_to_form(s1: str, s2: str) -> bool: Return True if the letters of the first string can be rearranged to form the second string, ignoring case sensitivity, spaces, and punctuation marks. # Create a translation table for removing punctuation. table = str.maketrans(\'\', \'\', string.punctuation + string.whitespace) # Clean the strings by removing spaces and punctuation, and converting to lower case. clean_s1 = s1.translate(table).lower() clean_s2 = s2.translate(table).lower() # Compare sorted versions of the cleaned strings. return sorted(clean_s1) == sorted(clean_s2)"},{"question":"You are given two strings `s1` and `s2`. Determine whether `s2` is an anagram of `s1` or not. An anagram is a word formed by rearranging the letters of another word, using all original letters exactly once. For example, \\"listen\\" is an anagram of \\"silent\\". Print \\"True\\" (without quotes) if `s2` is an anagram of `s1`, else print \\"False\\". ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input, containing two space-separated strings `s1` and `s2`. ------ Output Format ------ For each test case, output a single line containing one string — \\"True\\" or \\"False\\" (without quotes); the answer to the problem. You may print each character of the answer in uppercase or lowercase (for example, the strings \\"truE\\", \\"true\\", \\"True\\" and \\"TRUE\\" will all be treated as identical) ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |s1|, |s2| ≤ 100 ------ subtasks ------ Subtask 1(100 points): Original constraints ----- Sample Input 1 ------ 3 listen silent hello olelh test best ----- Sample Output 1 ------ True True False ----- explanation 1 ------ - Test Case 1: \\"listen\\" can be rearranged to form \\"silent\\". - Test Case 2: \\"hello\\" can be rearranged to form \\"olelh\\". - Test Case 3: \\"test\\" cannot be rearranged to form \\"best\\".","solution":"def is_anagram(s1, s2): Returns \'True\' if s2 is an anagram of s1, otherwise returns \'False\'. return sorted(s1) == sorted(s2) def process_input(T, test_cases): results = [] for i in range(T): s1, s2 = test_cases[i] results.append(str(is_anagram(s1, s2))) return results # Example usage: # T = 3 # test_cases = [(\\"listen\\", \\"silent\\"), (\\"hello\\", \\"olelh\\"), (\\"test\\", \\"best\\")] # results = process_input(T, test_cases) # for result in results: # print(result)"},{"question":"You are given a list of words representing the names of participants in a competition and a dictionary where the keys are the names of participants and the values are the number of points each participant scored. Your task is to write a function that returns the participant(s) with the highest score. If there is a tie, return all the participant names with the highest score sorted in alphabetical order. Example ```python participants = [\\"Alice\\", \\"Bob\\", \\"Charlie\\", \\"Dan\\", \\"Eve\\"] scores = { \\"Alice\\": 95, \\"Bob\\": 85, \\"Charlie\\": 95, \\"Dan\\": 80, \\"Eve\\": 95 } highest_scorers(participants, scores) ==> [\'Alice\', \'Charlie\', \'Eve\'] ``` The function should take two inputs: 1. `participants`: a list of strings representing participant names 2. `scores`: a dictionary with participant names as keys and their scores as values The function should return a list of strings, containing the names of the highest-scoring participants in alphabetical order.","solution":"def highest_scorers(participants, scores): Returns a list of participant names with the highest score in alphabetical order if not participants or not scores: return [] # Get the highest score highest_score = max(scores.values()) # Find all participants with the highest score highest_scorers = [name for name in participants if scores.get(name, 0) == highest_score] # Sort the result in alphabetical order highest_scorers.sort() return highest_scorers"},{"question":"Given a city grid represented by a 2D matrix, where each cell can be empty (represented by 0) or contain a building (represented by 1), write a program to determine if there\'s a path from the top-left corner (0,0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, or right, and you cannot pass through buildings. The goal is to check if such a path exists. # Input - The first line contains two integers n and m, representing the number of rows and columns of the matrix. - The next n lines contain m integers each (either 0 or 1), representing the city grid. # Output - Output \\"YES\\" if there is a path from the top-left to the bottom-right corner, otherwise output \\"NO\\". # Constraints - 1 ≤ n, m ≤ 1000 - The cell (0,0) and cell (n-1,m-1) are guaranteed to be 0. # Examples Input 3 3 0 0 1 1 0 1 1 0 0 Output YES Input 3 3 0 1 1 1 1 1 1 0 0 Output NO","solution":"def is_path_exists(n, m, grid): from collections import deque # Helper function to check if a cell is valid def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS starting from the top-left corner queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we have reached the bottom-right corner if x == n - 1 and y == m - 1: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" # Example usage n, m = 3, 3 grid = [ [0, 0, 1], [1, 0, 1], [1, 0, 0] ] print(is_path_exists(n, m, grid)) # Output should be \\"YES\\""},{"question":"The transport company wants to improve the efficiency of its bus service scheduling. Given is a list of bus routes where each route has a start and end time, the goal is to find the maximum number of non-overlapping routes that can be scheduled in a day. Each route has a unique identifier. Consider that a route [a, b] is defined as buses traveling from point a starting at time 0 and reaching point b at time b, and no two routes can overlap in their traveling times if they share any time between start and end. -----Input:----- - The first line of the input consists of a single integer T denoting the number of test cases. - The first line of each test case consists of a single integer N denoting the number of bus routes. - Next N lines consists of two integers A and B separated by a space representing the start and end time of the route respectively. -----Output:----- - For each test case output the maximum number of non-overlapping routes that can be scheduled in a day. -----Constraints----- - 1 <= T <= 10 - 1 <= N <= 100000 - 1 <= A < B <= 10^9 -----Sample Input:----- 2 3 1 3 2 5 4 6 4 1 2 3 4 0 6 5 7 -----Sample Output:----- 2 3 -----EXPLANATION:----- In the first test case, the routes [1, 3] and [4, 6] can be chosen. In the second test case, the routes [1, 2], [3, 4], and [5, 7] can be chosen.","solution":"def max_non_overlapping_routes(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] routes = test_cases[i][1] # Sort the routes by their end time routes.sort(key=lambda x: x[1]) # Greedily select the maximum number of non-overlapping routes last_end_time = 0 count = 0 for route in routes: if route[0] >= last_end_time: count += 1 last_end_time = route[1] results.append(count) return results"},{"question":"You are given an array of integers and a list of operations. Each operation indicates a range in the array (from index l to index r, inclusive) and an integer value k. For each operation, you need to add the integer k to every element within the specified range. After performing all operations, you should return the maximum value in the resulting array. Write a function `performOperations` that performs these operations and returns the maximum value in the final array. Function Signature: ```python def performOperations(arr: List[int], operations: List[Tuple[int, int, int]]) -> int: ``` # Input - `arr` (List[int]): An initial list of integers. - `operations` (List[Tuple[int, int, int]]): A list of operations where each operation is represented by a tuple (l, r, k): - l (int): The starting index of the range (0-based). - r (int): The ending index of the range (0-based). - k (int): The integer value to add to each element in the range. # Output - Return (int): The maximum value in the array after all operations have been performed. # Constraints - 1 leq text{len(arr)} leq 10^5 - 1 leq text{len(operations)} leq 10^5 - 0 leq l leq r leq text{len(arr)}-1 - -10^9 leq k leq 10^9 # Example Example 1 # Input ```python arr = [1, 2, 3, 4, 5] operations = [(1, 3, 2), (0, 2, 1), (2, 4, 3)] ``` # Output ```python 9 ``` # Explanation 1. After the first operation `(1, 3, 2)`, the array becomes `[1, 4, 5, 6, 5]`. 2. After the second operation `(0, 2, 1)`, the array becomes `[2, 5, 6, 6, 5]`. 3. After the third operation `(2, 4, 3)`, the array becomes `[2, 5, 9, 9, 8]`. The maximum value in the final array is `9`. Example 2 # Input ```python arr = [0, 0, 0, 0, 0] operations = [(0, 4, 100), (1, 3, -50), (2, 2, 25)] ``` # Output ```python 100 ``` # Explanation 1. After the first operation `(0, 4, 100)`, the array becomes `[100, 100, 100, 100, 100]`. 2. After the second operation `(1, 3, -50)`, the array becomes `[100, 50, 50, 50, 100]`. 3. After the third operation `(2, 2, 25)`, the array becomes `[100, 50, 75, 50, 100]`. The maximum value in the final array is `100`.","solution":"from typing import List, Tuple def performOperations(arr: List[int], operations: List[Tuple[int, int, int]]) -> int: # Use prefix sum array (difference array) method to efficiently apply range updates n = len(arr) diff = [0] * (n + 1) # Apply range updates using the difference array for l, r, k in operations: diff[l] += k if r + 1 <= n - 1: diff[r + 1] -= k # Apply the difference array to the original array current_addition = 0 for i in range(n): current_addition += diff[i] arr[i] += current_addition # Return the maximum value in the resulting array return max(arr)"},{"question":"You are given an array of n integers and k consecutive subarrays of length l among them. Your task is to find the maximum sum of a subarray of length l among these k consecutive subarrays. -----Input----- The first line contains three integers n, l, and k (1 ≤ l ≤ n ≤ 100, 1 ≤ k ≤ n - l + 1) — the length of the array, the length of the subarray, and the number of consecutive subarrays. The second line contains n integers a_{1}, a_{2}, ..., a_{n} (1 ≤ a_{i} ≤ 1000) — the elements of the array. -----Output----- Print the maximum sum of a subarray of length l among these k consecutive subarrays. -----Examples----- Input 7 3 3 1 2 3 4 5 6 7 Output 15 Input 10 4 5 3 3 9 1 6 0 4 5 8 7 Output 26 -----Note----- In the first example, the subarrays of length 3 are {1, 2, 3}, {2, 3, 4}, and {3, 4, 5}. The sums of these subarrays are 6, 9, and 12, from which 12 is the highest. In the second example, possible subarrays of length 4 in the first 5 subarrays are {3, 3, 9, 1}, {3, 9, 1, 6}, {9, 1, 6, 0}, {1, 6, 0, 4}, and {6, 0, 4, 5}. The sums are 16, 19, 16, 11, and 15 respectively, where 19 is the highest.","solution":"def max_sum_of_k_consecutive_subarrays(n, l, k, arr): Returns the maximum sum of a subarray of length l among k consecutive subarrays. max_sum = float(\'-inf\') for i in range(k): current_subarray = arr[i:i+l] current_sum = sum(current_subarray) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Your company is developing a new real-time chat application. One of the features of this application is to ensure that messages are displayed in a specific order based on their timestamps. However, there are times when messages might arrive out of order due to network delays. Your task is to implement a function that reorders a list of messages based on their timestamps. Each message is represented by a tuple in the form (timestamp, message_id, content), where `timestamp` is an integer representing the time the message was sent, `message_id` is a unique identifier for each message, and `content` is the actual text of the message. Given an unordered list of messages, your function should return a list of messages sorted in ascending order by their timestamps. If there are multiple messages with the same timestamp, they should be ordered by their `message_id`. -----Input----- - A single integer `n` representing the number of messages. - A list of `n` tuples, where each tuple contains the `timestamp`, `message_id`, and `content` of a message. -----Output----- - A list of tuples sorted by their `timestamp` and `message_id`. -----Example----- Sample Input: 4 [(1609459201, 3, \'Happy New Year!\'), (1609459200, 1, \'Hello!\'), (1609459200, 2, \'Welcome!\'), (1609459202, 4, \'Goodbye!\')] Sample Output: [(1609459200, 1, \'Hello!\'), (1609459200, 2, \'Welcome!\'), (1609459201, 3, \'Happy New Year!\'), (1609459202, 4, \'Goodbye!\')] Sample Input: 3 [(1609459203, 2, \'Hi!\'), (1609459203, 1, \'Hey!\'), (1609459201, 3, \'How are you?\')] Sample Output: [(1609459201, 3, \'How are you?\'), (1609459203, 1, \'Hey!\'), (1609459203, 2, \'Hi!\')]","solution":"def reorder_messages(n, messages): Reorders a list of messages based on their timestamps and message_ids. Parameters: - n (int): number of messages. - messages (list of tuples): each tuple contains (timestamp, message_id, content) Returns: - list of tuples: sorted list of messages. return sorted(messages, key=lambda x: (x[0], x[1])) # Example usage: # messages = [(1609459201, 3, \'Happy New Year!\'), (1609459200, 1, \'Hello!\'), (1609459200, 2, \'Welcome!\'), (1609459202, 4, \'Goodbye!\')] # print(reorder_messages(4, messages))"},{"question":"Tom is managing a robot in a grid. The grid is represented by a matrix of size n x m, where each cell either contains an obstacle or is empty. The robot can only move to adjacent cells (left, right, up, or down) and cannot move through obstacles. The robot starts at the top-left cell of the grid, and Tom wants to know the minimum number of steps the robot needs to reach the bottom-right cell of the grid. If it is impossible for the robot to reach the bottom-right cell, return -1. Input - The first line contains two space-separated integers n and m (2 ≤ n, m ≤ 1,000) — the number of rows and columns in the grid. - The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). Output - Output a single integer — the minimum number of steps required for the robot to reach the bottom-right cell, or -1 if it is impossible. Examples Input 5 5 ..... ..#.. .#... ...#. ..... Output 8 Input 3 3 ... # ... Output -1 Note In the first example, the robot can take the following optimal path: (0, 0) -> (0, 1) -> (0, 2) -> (0, 3) -> (0, 4) -> (1, 4) -> (2, 4) -> (3, 4) -> (4, 4) This path includes 8 steps. In the second example, the robot is completely blocked by obstacles and cannot reach the bottom-right cell. Hence, the output is -1.","solution":"from collections import deque def min_steps_to_reach_target(n, m, grid): Returns the minimum number of steps for a robot to reach the bottom-right cell of the grid. Returns -1 if it\'s impossible to reach the target. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 # Example usage: # n, m = 5, 5 # grid = [ # \\".....\\", # \\"..#..\\", # \\".#...\\", # \\"...#.\\", # \\".....\\" # ] # print(min_steps_to_reach_target(n, m, grid)) # Output: 8"},{"question":"In a land far away, there is a village with n houses arranged in a straight line, numbered from 1 to n. Each house has a certain number of gold coins stored in it. The village has an unusual tradition: every year, the villagers choose two houses and swap their gold coins. They believe that this helps in redistributing the wealth evenly. This year, the villagers want to know the median amount of gold coins in the houses after performing k swaps. Write a program that answers this query. The median is the value separating the higher half from the lower half of a data sample. For a set of numbers with an odd number of values, the median is the middle one; for a set with an even number of values, the median is the average of the two middle values. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 0 le k le 10^5) — number of houses and number of swaps. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 10^9), where p_i represents the number of gold coins in the i-th house. The next k lines each contain two space-separated integers a and b (1 le a, b le n), which represent the indices of houses to swap their gold coins. -----Output----- Output the median amount of gold coins after all the swaps are performed. -----Examples----- Input 5 2 1 3 5 7 9 2 5 1 3 Output 5 Input 4 1 2 8 1 4 1 2 Output 3 Input 6 0 6 2 1 5 9 4 Output 4 -----Note----- In the first sample, after performing the swaps: 1- Swap house 2 and house 5: [1, 9, 5, 7, 3] 2- Swap house 1 and house 3: [5, 9, 1, 7, 3] After these swaps, the array becomes [5, 9, 1, 7, 3] and the sorted array is [1, 3, 5, 7, 9]. So the median is 5. In the second sample, after performing the swap: 1- Swap house 1 and house 2: [8, 2, 1, 4] After the swap, the array becomes [8, 2, 1, 4] and the sorted array is [1, 2, 4, 8]. The median is the average of 2 and 4, which is 3. In the third sample, as no swaps are performed, the median is the middle value of the sorted array [1, 2, 4, 5, 6, 9]`, which is 4.","solution":"def find_median_after_swaps(n, k, coins, swaps): Find the median amount of gold coins after performing all swaps. Parameters: n (int): Number of houses k (int): Number of swaps coins (list of int): List of gold coins in each house swaps (list of tuple of int): List of swap operations (each represented as a tuple of two integers) Returns: int: The median amount of gold coins in the houses after all swaps are performed # Perform the swaps for a, b in swaps: coins[a - 1], coins[b - 1] = coins[b - 1], coins[a - 1] # Sort the coins to find the median coins.sort() # Calculate the median if n % 2 == 1: return coins[n // 2] else: return (coins[n // 2 - 1] + coins[n // 2]) // 2 # Example usage: # n, k = 5, 2 # coins = [1, 3, 5, 7, 9] # swaps = [(2, 5), (1, 3)] # print(find_median_after_swaps(n, k, coins, swaps)) # Output: 5"},{"question":"You are given an array of intervals where each interval is a pair of integers [start, end] representing the start and end times of some task. The goal is to find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Two intervals [start1, end1] and [start2, end2] overlap if and only if start1 < end2 and start2 < end1. Return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping. Example 1: Input: n = 4 intervals = [[1,2],[2,3],[3,4],[1,3]] Output: 1 Explanation: Removing interval [1,3] leaves the intervals [1,2], [2,3], and [3,4] which are all non-overlapping. Example 2: Input: n = 3 intervals = [[1,2],[1,2],[1,2]] Output: 2 Explanation: Removing two [1,2] intervals makes the remaining [1,2] interval non-overlapping. Example 3: Input: n = 3 intervals = [[1,2],[2,3],[3,4]] Output: 0 Explanation: All intervals are already non-overlapping. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minRemove() which takes an integer n and an array of intervals intervals and returns the minimum number of intervals needed to remove to make the rest non-overlapping. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraint: 1 <= n <= 10^4 intervals[i].length == 2 0 <= intervals[i][0] < intervals[i][1] <= 10^4","solution":"def minRemove(n, intervals): Given a list of intervals, returns the number of intervals to remove to make the rest non-overlapping. # Sort intervals based on their ending time intervals.sort(key=lambda x: x[1]) non_overlap_count = 0 end_time = float(\'-inf\') for interval in intervals: start, end = interval if start >= end_time: non_overlap_count += 1 end_time = end return n - non_overlap_count"},{"question":"You are managing a warehouse and need to track the inventory of products. Each product has a unique product code and an initial stock quantity. You need to process a series of operations that either update the stock of a product or query the stock of a product. The operations are of two types: 1. \\"add X Y\\" - add Y units to the stock of product X. 2. \\"query X\\" - report the current stock of product X. You need to implement a system that can handle these operations efficiently and provide the correct results for each query. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of operations. The next n lines each contain an operation in one of the following formats: - \\"add X Y\\" where 1 ≤ X ≤ 10^9 is the product code and 1 ≤ Y ≤ 10^6 is the number of units to add to the stock of product X. - \\"query X\\" where 1 ≤ X ≤ 10^9 is the product code for which the stock needs to be queried. Output For each \\"query\\" operation, output a single integer — the current stock of the specified product. Examples Input 6 add 12345 100 add 12345 50 query 12345 add 67890 200 query 67890 query 12345 Output 150 200 150 Input 5 add 111 10 add 222 20 query 333 add 111 5 query 111 Output 0 15 Explanation In the first example: - We add 100 units to product 12345, making its stock 100. - We add 50 more units to product 12345, making its stock 150. - We query the stock of product 12345, which is currently 150. - We add 200 units to product 67890, making its stock 200. - We query the stock of product 67890, which is currently 200. - We query the stock of product 12345 again, which remains 150. In the second example: - We add 10 units to product 111, making its stock 10. - We add 20 units to product 222, making its stock 20. - We query the stock of product 333, which has no stock, thus the result is 0. - We add 5 more units to product 111, making its stock 15. - We query the stock of product 111 again, which is now 15.","solution":"def warehouse_operations(n, operations): Function to process warehouse operations and return the results of queries. :param n: Number of operations (int) :param operations: List of strings where each string is an operation of the form \\"add X Y\\" or \\"query X\\" :return: List of integers which are the results of the queries stock = {} results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": product_code = int(parts[1]) quantity = int(parts[2]) if product_code in stock: stock[product_code] += quantity else: stock[product_code] = quantity elif parts[0] == \\"query\\": product_code = int(parts[1]) results.append(stock.get(product_code, 0)) return results"},{"question":"You are given a rooted binary tree with a structure that allows it to be represented as follows: class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right The task is to implement a function `findTreeHeight(root: TreeNode) -> int` that finds the height of the binary tree. The height of a tree is defined as the length of the longest path from the root to a leaf in terms of nodes. Example: Input: ``` 3 / 9 20 / 15 7 ``` Output: ``` 3 ``` Explanation: - The longest path from the root to a leaf is either 3 -> 9 or 3 -> 20 -> 15 or 3 -> 20 -> 7. - Each of these paths has 3 nodes, so the height of the binary tree is 3. Constraints: - The number of nodes in the tree is in the range [0, 100]. - -100 <= Node.val <= 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findTreeHeight(root: TreeNode) -> int: Returns the height of the binary tree. The height of a tree is defined as the length of the longest path from the root to a leaf in terms of nodes. if root is None: return 0 else: left_height = findTreeHeight(root.left) right_height = findTreeHeight(root.right) return max(left_height, right_height) + 1"},{"question":"Alan is competing in a unique card game against Barbara. They have a deck of cards numbered from 1 to M. Each player alternates turns picking either the highest or lowest valued card remaining in the deck. Alan always goes first. The winner is determined by the player whose total card value sum is greater when all cards are taken. Both players play optimally to maximize their own total sum. Assume there is an even number of cards in the deck. Can you determine the winner? -----Input----- The input contains an integer M (2 leq M leq 1000000), the number of cards. -----Output----- Output the winner, “Alan” or “Barbara” (without the quotes), on a line. -----Examples----- Sample Input 1: 2 Sample Output 1: Alan Sample Input 2: 4 Sample Output 2: Barbara Sample Input 3: 6 Sample Output 3: Alan","solution":"def determine_winner(M): Determines the winner of the card game based on the number of cards. :param M: int - The number of cards in the deck. :return: str - \\"Alan\\" if Alan wins, otherwise \\"Barbara\\". # Alan always starts first and picks optimally # Alan wins if M / 2 is odd, otherwise Barbara wins. if (M // 2) % 2 == 1: return \\"Alan\\" else: return \\"Barbara\\""},{"question":"You are given an integer array nums of length n and an integer target. Return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal to the target, and false otherwise. The elements in the array can be shuffled. Example 1: Input: nums = [1, 5, 11, 5] target = 11 Output: true Explanation: The array can be partitioned as [11] and [1, 5, 5], both have a sum of 11. Example 2: Input: nums = [1, 2, 3, 5] target = 5 Output: false Explanation: No matter how the array is partitioned, the sums cannot be both equal to 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPartition() which takes the array nums and its length n, and the target value as inputs and returns true if the partition is possible and false otherwise. Expected Time Complexity: O(n*target) Expected Auxiliary Space: O(n*target) Constraints: 1 ≤ n ≤ 200 1 ≤ nums[i] ≤ 100","solution":"def canPartition(nums, target): Returns true if the array can be partitioned into two subsets that each sum up to the target value, false otherwise. n = len(nums) if sum(nums) != 2 * target: return False dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] |= dp[i - num] return dp[target]"},{"question":"Given a string of lowercase alphabets, determine if the string can be rearranged to form a palindrome. If possible, return \\"YES\\", otherwise return \\"NO\\". # Function Signature ```python def can_form_palindrome(s: str) -> str: pass ``` # Input - A single string `s` of length between 1 and 100, consisting of lowercase English letters. # Output - A string \\"YES\\" if the input can be rearranged to form a palindrome, otherwise \\"NO\\". # Examples ```python can_form_palindrome(\\"racecar\\") # Output: \\"YES\\" can_form_palindrome(\\"aabbcc\\") # Output: \\"YES\\" can_form_palindrome(\\"abc\\") # Output: \\"NO\\" ``` # Notes - A string can form a palindrome if at most one character has an odd count of appearances.","solution":"def can_form_palindrome(s: str) -> str: Determines if the string can be rearranged to form a palindrome. from collections import Counter # Get the frequency count of each character in the string char_counts = Counter(s) # Count the number of characters with odd occurrences odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Tom is really passionate about books. He owns a bookstore and frequently organizes various book fairs. Every year, he receives numerous book orders from customers who want signed copies of certain books. To efficiently manage the orders and ensure he doesn’t miss any, Tom decided to create a program that will assist him in keeping track of the ordered books and the number of copies. Tom receives multiple orders, each order containing the title of a book and the number of copies required. The program should help Tom keep a consolidated list of books and their respective quantities, updating the counts as new orders come in. To achieve this, you should write a program that processes these orders and outputs the consolidated list in alphabetical order of the book titles. Input The input consists of multiple lines. Each line represents an order formatted as follows: `<book_title> <number_of_copies>` Where `<book_title>` is the title of the book (a string of 1 to 50 alphabetical characters) and `<number_of_copies>` is an integer ranging between 1 and 1000. The input terminates with a line containing a single zero. Output The output should be a list of all book titles and their respective quantities in alphabetical order. Each book title and its quantity should be printed on a separate line, formatted as: `<book_title>: <number_of_copies>` Example Input ``` HarryPotter 10 TheHobbit 5 HarryPotter 20 TheAlchemist 7 0 ``` Output ``` HarryPotter: 30 TheAlchemist: 7 TheHobbit: 5 ```","solution":"def process_orders(order_list): from collections import defaultdict book_inventory = defaultdict(int) for order in order_list: if order == \'0\': break title, copies = order.rsplit(\' \', 1) book_inventory[title] += int(copies) consolidated_list = sorted(book_inventory.items()) return [f\\"{title}: {copies}\\" for title, copies in consolidated_list] # Example usage: orders = [ \\"HarryPotter 10\\", \\"TheHobbit 5\\", \\"HarryPotter 20\\", \\"TheAlchemist 7\\", \\"0\\" ] print(process_orders(orders))"},{"question":"Given a binary tree, you need to find the largest subtree, such that all the nodes in the subtree are equal in value. For example, given the binary tree below: ``` 1 / 2 2 / / 4 2 2 2 ``` The largest subtree where all nodes have the same value is the subtree rooted at the right child of the root (node with value 2), which includes the right child’s right subtree (both nodes with value 2). Write a function `largest_unival_subtree(root)` which receives the root node of a binary tree and returns the size of the largest subtree where all nodes have the same value. # Input A function `largest_unival_subtree(root)` where `root` is the root node of the binary tree. # Output An integer which is the size of the largest unival subtree. # Examples Input: ``` root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.left = TreeNode(4) root.right.left = TreeNode(2) root.right.right = TreeNode(2) root.right.right.right = TreeNode(2) ``` Output: ``` 4 ``` The largest unival subtree has 4 nodes with the value of 2. # Constraints: - The tree\'s node values are integers and can be negative. - The total number of nodes does not exceed 10^4. # Note: You should implement the `TreeNode` class used in the input format as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def largest_unival_subtree(root): Returns the size of the largest subtree where all nodes have the same value. def helper(node): if not node: return (True, 0, None) # (is_unival, subtree_size, node_value) left_is_unival, left_size, left_value = helper(node.left) right_is_unival, right_size, right_value = helper(node.right) current_is_unival = ( left_is_unival and right_is_unival and (node.left is None or left_value == node.val) and (node.right is None or right_value == node.val) ) if current_is_unival: return (True, left_size + right_size + 1, node.val) else: return (False, max(left_size, right_size), node.val) return helper(root)[1]"},{"question":"You are participating in a game show where you need to navigate through a grid filled with coins. Each cell in the grid either contains a coin (represented by a positive integer) or is empty (represented by 0). The goal of the game is to collect as many coins as possible, but there is a catch – you can only move right or down from any given cell. Write a function `maxCoins` that takes a 2D array `grid` as its input, where `grid[i][j]` indicates the number of coins in the cell at row `i` and column `j`. The function should return the maximum number of coins that can be collected starting from the top-left cell and ending at the bottom-right cell of the grid. For example, consider the grid: ``` grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` The function `maxCoins(grid)` should return 12 as the optimal path (down -> down -> right -> right -> up -> right) would collect the following coins: 0 -> 2 -> 1 -> 5 -> 3 -> 1. The function signature should be: ```python def maxCoins(grid: List[List[int]]) -> int: ``` Considerations: - The grid will have at least one cell (i.e., it is non-empty). - The dimensions of the grid are not fixed, but the grid will be rectangular (i.e., all rows will have the same number of columns). - The numbers in the grid will be non-negative integers.","solution":"from typing import List def maxCoins(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D dp array dp = [[0] * cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell contains the maximum coins that can be collected return dp[rows - 1][cols - 1]"},{"question":"Given a list of cities and the distances between each pair of cities, we need to find the shortest possible route that visits each city exactly once and returns to the starting city (Traveling Salesperson Problem). Example 1: Input: n = 4 dist[][] = { {0, 10, 15, 20}, {10, 0, 35, 25}, {15, 35, 0, 30}, {20, 25, 30, 0} } Output: 80 Explanation: One possible route is 0 -> 1 -> 3 -> 2 -> 0. The total cost is 10 + 25 + 30 + 15 = 80. Example 2: Input: n = 3 dist[][] = { {0, 29, 20}, {29, 0, 15}, {20, 15, 0} } Output: 64 Explanation: One possible route is 0 -> 2 -> 1 -> 0. The total cost is 20 + 15 + 29 = 64. Your Task: You don\'t need to read input or print anything. Your task is to complete the function tsp() which takes an integer n and a 2D integer array dist[][] as arguments and returns the minimum cost of the tour. Expected Time Complexity: O(n^2 * 2^n) Expected Auxiliary Space: O(n * 2^n) Constraints: 1 ≤ N ≤ 20 1 ≤ dist[i][j] ≤ 100","solution":"def tsp(n, dist): def tsp_util(cur_city, visited): # If all cities have been visited, return to start if visited == (1 << n) - 1: return dist[cur_city][0] # If result already computed if dp[cur_city][visited] != -1: return dp[cur_city][visited] # Initialize the minimum cost to infinity min_cost = float(\'inf\') # Try to go to an unvisited city for i in range(n): if not visited & (1 << i): new_cost = dist[cur_city][i] + tsp_util(i, visited | (1 << i)) min_cost = min(min_cost, new_cost) # Store and return the result dp[cur_city][visited] = min_cost return dp[cur_city][visited] dp = [[-1] * (1 << n) for _ in range(n)] return tsp_util(0, 1)"},{"question":"In a small village, each house is connected to every other house with undirected roads. Every road has a certain weight representing the time it takes to travel that road. The village needs to build an efficient communication network. To achieve this, they aim to minimize the longest single journey needed to connect any two houses directly or indirectly, but only through the roads they choose to keep. Given the number of houses and the weights of roads connecting them, you need to determine the maximum weight of all the roads in the most efficient communication network that minimizes the longest travel time. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100), representing the number of houses in the village. The second line contains an integer m (1 ≤ m ≤ n * (n - 1) / 2), representing the number of roads connecting the houses. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), where u and v are house indices and w is the weight of the road between house u and house v. -----Output----- Print a single integer, the weight of the heaviest road in the most efficient communication network that minimizes the longest travel time between any two houses. -----Example----- Input 4 5 1 2 1 1 3 3 2 3 2 3 4 4 2 4 5 Output 4 Input 5 6 1 2 2 1 3 3 2 3 1 2 4 4 3 5 5 4 5 6 Output 5 -----Note----- In the first example, the most efficient communication network could include the roads: (1-2, 2-3, 3-4) with weights (1, 2, 4). The heaviest road weight in this network is 4. In the second example, the most efficient communication network could include the roads: (1-2, 2-3, 3-5, 4-5) with weights (2, 1, 5, 6). The heaviest road weight in this network is 5.","solution":"def find_heaviest_road(n, m, edges): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX edges.sort(key=lambda x: x[2]) max_weight_in_mst = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) max_weight_in_mst = w return max_weight_in_mst"},{"question":"Given an array of integers, find and return the length of the longest subarray that, when sorted, will result in the entire array being sorted. In other words, you want to determine the largest subarray such that sorting only that subarray makes the whole array sorted. Example 1: Input: arr = [1, 3, 5, 2, 6, 4, 7] Output: 5 Explanation: By sorting the subarray [3, 5, 2, 6, 4], the entire array will be sorted. Example 2: Input: arr = [10, 12, 14, 7, 8, 9] Output: 6 Explanation: The entire array needs to be sorted, as the longest subarray that can achieve sorting the full array is the array itself. Example 3: Input: arr = [1, 2, 3, 4, 5] Output: 0 Explanation: The array is already sorted, so no subarray needs to be sorted. Constraints: 1. 1 <= arr.length <= 10^5 2. -10^4 <= arr[i] <= 10^4","solution":"def longest_subarray_to_sort(arr): Returns the length of the longest subarray that, when sorted, results in the entire array being sorted. n = len(arr) if n <= 1: return 0 start, end = 0, n - 1 # Find the first element from the left that is out of order while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 if start == n - 1: # The array is already sorted return 0 # Find the last element from the right that is out of order while end > 0 and arr[end] >= arr[end - 1]: end -= 1 subarray_min = min(arr[start:end + 1]) subarray_max = max(arr[start:end + 1]) # Extend the left boundary while start > 0 and arr[start - 1] > subarray_min: start -= 1 # Extend the right boundary while end < n - 1 and arr[end + 1] < subarray_max: end += 1 return end - start + 1"},{"question":"# Task Given an integer array `arr`, find the largest subarray with an equal number of 0s and 1s. For example, given the array `arr = [1, 0, 0, 1, 0, 1, 1]`, the subarray `[0, 1, 0, 1]` or `[1, 0, 0, 1]` has equal numbers of 0s and 1s, and length 4. Therefore, the output should be 4. # Example For `arr = [0, 1]`, the output should be `2`. There is only one subarray `[0, 1]` with equal number of 0s and 1s. For `arr = [0, 1, 0]`, the output should be `2`. The possible subarray `[0, 1]` and `[1, 0]` both have equal number of 0s and 1s. # Input/Output - `[input]` integer array `arr` Array of 0s and 1s of length at least 2. Constraints: `2 ≤ arr.length ≤ 10^5` - `[output]` an integer The length of the largest subarray with equal number of 0s and 1s.","solution":"def find_max_length(arr): Returns the length of the largest subarray with equal number of 0s and 1s. # To store the index of first occurrence of all prefix sums prefix_sums = {0: -1} max_length = 0 cum_sum = 0 for i in range(len(arr)): # Convert 0 to -1 and sum the array to play with the prefix sum cum_sum += -1 if arr[i] == 0 else 1 # Check if this prefix sum has been seen before if cum_sum in prefix_sums: max_length = max(max_length, i - prefix_sums[cum_sum]) else: prefix_sums[cum_sum] = i return max_length"},{"question":"Alice and Bob are playing a game with a sequence of integers. The game is played in turns, and Alice always goes first. Initially, they have a sequence of integers of length n. The sequence is: a1, a2, ..., an. On each turn, the player must select a non-empty subsequence of consecutive elements from the sequence and remove it. A player loses if they cannot take their turn, meaning the sequence has become empty. Given the initial sequence, determine who will win the game if both Alice and Bob play optimally. Input The first line of the input contains an integer n (1 ≤ n ≤ 105) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the sequence. Output Print \\"Alice\\" if Alice will win the game and \\"Bob\\" if Bob will win the game, assuming both players play optimally. Example 1 Input 3 1 2 3 Output Alice Example 2 Input 4 1 2 2 1 Output Bob","solution":"def determine_winner(n, sequence): Determines the winner of the game given the sequence length and the sequence. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Task Given an array of integers `arr` and an integer `k`, return the k most frequent elements. You may return the answer in any order. # Example For `arr = [1,1,1,2,2,3]` and `k = 2`, the output should be `[1, 2]`. For `arr = [1]` and `k = 1`, the output should be `[1]`. # Input/Output - `[input]` array of integers `arr` An array of integers, possibly containing duplicates. Constraints: `1 ≤ arr.length ≤ 10^4`, `-10^4 ≤ arr[i] ≤ 10^4` - `[input]` integer `k` A positive integer representing the number of most frequent elements to return. Constraints: `1 ≤ k ≤ arr.length` - `[output]` an array of integers The list of the k most frequent elements in `arr`. The order of elements can be arbitrary.","solution":"from collections import Counter from heapq import nlargest def top_k_frequent(arr, k): Returns the k most frequent elements. :param arr: List[int] - An array of integers :param k: int - A positive integer representing the number of most frequent elements to return :return: List[int] - The list of the k most frequent elements count = Counter(arr) return nlargest(k, count.keys(), key=count.get)"},{"question":"Elena is organizing a series of team building exercises for a company retreat. She plans to divide the participants into teams based on their preference scores for working together. Each team must have at least one participant, and the participant with the highest preference score should be the team leader. Given the number of participants and their preference scores, help Elena organize the teams and determine who will lead each team. Preference score of the i\'th participant = Ai Input: The first line contains an integer N, denoting the number of participants. The second line contains N space-separated integers, Ai are the preference scores of the i\'th participant. Output: Print N space-separated integers where each integer denotes the team leader’s preference score for the i-th participant’s team. Constraints: 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 5 10 20 15 25 30 SAMPLE OUTPUT 30 30 30 30 30 (Note: The output means that for every participant, the team leader (the one with the highest preference score) has a preference score of 30)","solution":"def team_leaders(preference_scores): Given the preference scores of participants, this function returns the highest preference score for each participant. Args: preference_scores (list of int): List of preference scores of participants. Returns: list of int: List containing the highest preference score for each participant. max_score = max(preference_scores) return [max_score] * len(preference_scores)"},{"question":"Given an integer array `prices` where `prices[i]` represents the price of a given stock on the `i`-th day, design an algorithm to find the maximum profit. You may complete as many transactions (i.e., buy one and sell one share of the stock multiple times) as you like with the following restrictions: - You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). - After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Return the maximum profit you can achieve. Example 1: Input: prices = [1,2,3,0,2] Output: 3 Explanation: transactions = [buy, sell, cooldown, buy, sell] Example 2: Input: prices = [1] Output: 0 Explanation: There\'s only one day, so no transactions can be made. Constraints: - 1 <= prices.length <= 5000 - 0 <= prices[i] <= 1000","solution":"def max_profit(prices): Function to determine the maximum profit from stock prices with cooldown period. if not prices: return 0 n = len(prices) if n < 2: return 0 # dp arrays to store the maximum profit up to day i buy = [0] * n sell = [0] * n cooldown = [0] * n # Initial conditions buy[0] = -prices[0] sell[0] = float(\'-inf\') cooldown[0] = 0 for i in range(1, n): buy[i] = max(buy[i-1], cooldown[i-1] - prices[i]) sell[i] = buy[i-1] + prices[i] cooldown[i] = max(cooldown[i-1], sell[i-1]) return max(sell[n-1], cooldown[n-1])"},{"question":"Aunt Caroline loves quilting. When creating a quilt, she follows a unique pattern using square pieces of fabric. Each piece has a specific size and can be divided further into smaller square pieces of equal size. Aunt Caroline wants to create a quilt of a perfect square size without wasting any fabric. Given the dimensions of the rectangular pieces she has, help her determine the maximum possible size of the square quilt she can make. Input The first line contains two integers w and h (1 ≤ w, h ≤ 10^9) — the width and height of the piece of fabric Aunt Caroline has. Output Print a single integer s — the side length of the largest square quilt Aunt Caroline can make. Examples Input 8 6 Output 2 Input 5 9 Output 1","solution":"import math def largest_square_quilt(w, h): Returns the side length of the largest square quilt Aunt Caroline can make from the given width and height of the fabric piece. return math.gcd(w, h)"},{"question":"You are tasked with building a \\"Keyword Highlighter\\" feature for an editor application. The aim is to highlight certain keywords in a given piece of text. -----Input:----- - The first line contains an integer T denoting the number of test cases. Each test case follows. - Each test case begins with an integer N, representing the number of keywords. - The next line contains N space-separated strings, representing the keywords. - The following line contains a single string S, representing the text in which to highlight keywords. -----Output:----- For each test case, output the text string S with each occurrence of any keyword enclosed in underscores (_). -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ length of each keyword ≤ 10 - 1 ≤ length of S ≤ 1000 - Keywords are case-sensitive. - A keyword can match parts of other words within S. - Keywords will not overlap in S. -----Sample Input:----- 2 2 foo bar foobar is the foobar keyword example 3 highlight keyword example this is an example of keyword highlighting -----Sample Output:----- _foobar_ is the _foobar_ _keyword_ example this is an _example_ of _keyword_ _highlighting_ -----Explanation:----- - In the first test case, the text contains the keyword \\"foobar\\" twice and \\"keyword\\" once. Each occurrence is enclosed in underscores. - In the second test case, the text contains \\"example\\", \\"keyword\\", and \\"highlighting\\", each highlighted by underscores as per keywords provided.","solution":"def highlight_keywords(T, test_cases): Highlights the keywords in the given text. Args: T: int - Number of test cases test_cases: List[Tuple[int, List[str], str]] - List containing tuples for each test case where each tuple contains: N: int - Number of keywords keywords: List[str] - List of keywords S: str - Text where keywords need to be highlighted Returns: List[str] - Highlighted texts as per the given test cases results = [] for case in test_cases: _, keywords, S = case for kw in keywords: S = S.replace(kw, f\'_{kw}_\') results.append(S) return results"},{"question":"You have been invited to a coding competition where you are tasked with designing a unique path search algorithm. There is a rectangular grid with n rows and m columns. Each cell in the grid contains either a `0` or a `1`. Specifically, `1` represents a cell you can step on, while `0` represents a blocked cell that cannot be stepped on. You need to determine the number of distinct paths from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (n,m)). However, each step you take must be either to the right or downward. Implement a function that will calculate the number of such unique paths given the constraints on the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid. Each of the next n lines contain m integers, each of which is either `0` or `1`. Output Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. Examples Input 3 3 1 1 1 1 0 1 1 1 1 Output 2 Input 3 3 1 1 1 0 0 1 1 1 1 Output 1 Note In the first example, there are two valid paths: - (1,1) → (1,2) → (1,3) → (2,3) → (3,3) - (1,1) → (2,1) → (3,1) → (3,2) → (3,3) In the second example, there is only one valid path: - (1,1) → (1,2) → (1,3) → (2,3) → (3,3)","solution":"def unique_paths(grid): n = len(grid) m = len(grid[0]) # If the starting or ending cell is blocked, return 0 paths if grid[0][0] == 0 or grid[n-1][m-1] == 0: return 0 dp = [[0] * m for _ in range(n)] # Initialize the starting position dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given an array of integers, you need to count the frequency of unique prime numbers present in that array. Prime numbers are those numbers greater than 1 that have no divisors other than 1 and itself. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: the first is an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output:----- For each test case, output a single integer, the count of unique prime numbers in the given array. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq arr[i] leq 10^6 -----Sample Input:----- 1 10 2 3 4 5 6 7 8 9 10 11 -----Sample Output:----- 5 -----EXPLANATION:----- The prime numbers in the given array are [2, 3, 5, 7, 11]. There are 5 unique prime numbers.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def count_unique_primes(arr): primes = set() for number in arr: if is_prime(number): primes.add(number) return len(primes) def process_test_cases(test_cases): results = [] for case in test_cases: N, arr = case result = count_unique_primes(arr) results.append(result) return results"},{"question":"In a software application, we need to process a series of string commands to maintain a list of active users. Each command in the series either adds a user to the list or removes a user from the list. The goal is to determine if we ever encounter a command to remove a user that is not currently in the list, which would be an invalid operation. You are given a sequence of commands. Each command either adds a user to the active list or removes a user from the active list. Your task is to determine if there is any invalid removal operation in the sequence. An \\"add\\" operation is denoted by \\"ADD user_name\\". A \\"remove\\" operation is denoted by \\"REMOVE user_name\\". -----Constraints----- - The number of commands is between 1 and 100,000. - Each command is a string of the form \\"ADD user_name\\" or \\"REMOVE user_name\\". - user_name consists of lowercase letters only and its length does not exceed 30. - No two commands will have the same user_name consecutively with the same operation. -----Input----- Input is given from Standard Input in the following format: N command_1 command_2 ... command_N -----Output----- Print \\"VALID\\" if all removal operations are valid, otherwise print \\"INVALID\\". -----Sample Input----- 5 ADD alice ADD bob REMOVE alice REMOVE charlie REMOVE bob -----Sample Output----- INVALID When processing the commands, the first and second commands add \\"alice\\" and \\"bob\\" to the list. The third command removes \\"alice\\" from the list. The fourth command tries to remove \\"charlie\\" who is not in the list, making it invalid, so the output is \\"INVALID\\".","solution":"def process_commands(commands): This function takes a list of commands and determines if all removal operations are valid based on the presence of the user in the active users\' list. Parameters: commands (List[str]): List of commands in the form of \\"ADD user_name\\" or \\"REMOVE user_name\\". Returns: str: \\"VALID\\" if all removal operations are valid, otherwise \\"INVALID\\". active_users = set() for command in commands: operation, user_name = command.split() if operation == \\"ADD\\": active_users.add(user_name) elif operation == \\"REMOVE\\": if user_name in active_users: active_users.remove(user_name) else: return \\"INVALID\\" return \\"VALID\\""},{"question":"Complete the function that accepts a string representing a time in 24-hour format (hh:mm) and returns the time in 12-hour format followed by \'AM\' or \'PM\'. Examples: * \\"00:00\\" returns \\"12:00 AM\\" * \\"01:15\\" returns \\"1:15 AM\\" * \\"12:30\\" returns \\"12:30 PM\\" * \\"18:45\\" returns \\"6:45 PM\\" * \\"23:59\\" returns \\"11:59 PM\\"","solution":"def convert_to_12hr_format(time_24): Converts a time from 24-hour format to 12-hour format. :param time_24: String representing time in 24-hour format (hh:mm) :return: String representing time in 12-hour format with \'AM\' or \'PM\'. hh, mm = map(int, time_24.split(\':\')) if hh == 0: return f\\"12:{mm:02d} AM\\" elif hh < 12: return f\\"{hh}:{mm:02d} AM\\" elif hh == 12: return f\\"12:{mm:02d} PM\\" else: return f\\"{hh-12}:{mm:02d} PM\\""},{"question":"Given an integer array, shift all the negative numbers to the beginning and all the positive numbers to the end without changing the order of the negative and positive numbers individually. For example: Input: [3, -1, 4, -2, -7, 5, 6] Output: [-1, -2, -7, 3, 4, 5, 6] Write a function that accomplishes this task.","solution":"def rearrange_negatives(array): Rearranges the given array such that all negative numbers come to the beginning and all positive numbers go to the end, keeping their relative order intact. Parameters: array (list of int): The input integer array. Returns: list of int: The rearranged array. negative_numbers = [] positive_numbers = [] for num in array: if num < 0: negative_numbers.append(num) else: positive_numbers.append(num) return negative_numbers + positive_numbers"},{"question":"You have been given a string S consisting of lowercase English alphabets and an integer K. You need to check whether you can create a palindrome by removing at most K characters from the string S. Input Format The first line contains an integer T - the number of test cases. Each of the next T lines consists of a string S and an integer K separated by a space. Output Format For each test case, output \\"Yes\\" if it is possible to create a palindrome by removing at most K characters, otherwise output \\"No\\". Constraints 1 leq T leq 10 1 leq |S| leq 1000 0 leq K leq |S| All characters in S are lowercase English alphabets. Example Input 2 abca 1 abcde 2 Example Output Yes No Explanation For the first test case, you can remove 1 character (\'c\') to get the palindrome \\"aba\\". For the second test case, even by removing 2 characters, you can\'t form a palindrome. The closest you can get is \\"abc\\" or \\"cde\\", both of which are not palindromes.","solution":"def can_form_palindrome_by_removing_k_chars(s, k): Returns \\"Yes\\" if it\'s possible to form a palindrome by removing at most k characters from string s, otherwise returns \\"No\\". def is_palindrome_range(start, end): while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True def can_form_palindrome(s, start, end, k): while start < end: if s[start] != s[end]: if k == 0: return False # Either skip the start character or the end character return can_form_palindrome(s, start + 1, end, k - 1) or can_form_palindrome(s, start, end - 1, k - 1) start += 1 end -= 1 return True return \\"Yes\\" if can_form_palindrome(s, 0, len(s) - 1, k) else \\"No\\" def process_test_cases(test_cases): results = [] for s, k in test_cases: k = int(k) results.append(can_form_palindrome_by_removing_k_chars(s, k)) return results"},{"question":"A permutation of an array is a reordering of its elements. An inversion in a permutation is a pair of elements such that the larger one precedes the smaller one in the permutation. Given an array of integers, determine the minimum number of adjacent swaps required to sort the array in non-decreasing order. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000) — the elements of the array. Output Print a single integer — the minimum number of adjacent swaps required to sort the array in non-decreasing order. Examples Input 4 4 3 1 2 Output 5 Input 3 3 2 1 Output 3 Input 5 1 2 3 4 5 Output 0 Note 1. In the first example, the array [4, 3, 1, 2] can be sorted with the minimum number of swaps as follows: - Swap elements at positions 3 and 4, resulting in the array [4, 3, 1, 2] → [4, 1, 3, 2]. - Swap elements at positions 2 and 3, resulting in the array [4, 1, 3, 2] → [4, 1, 3, 2]. - Swap elements at positions 1 and 2, resulting in the array [4, 1, 3, 2] → [1, 4, 3, 2]. - Swap elements at positions 2 and 3, resulting in the array [1, 4, 3, 2] → [1, 3, 4, 2]. - Swap elements at positions 3 and 4, resulting in the array [1, 3, 4, 2] → [1, 3, 2, 4]. So the total number of swaps is 5. 2. In the second example, it can be sorted with 3 adjacent swaps. 3. In the last example, the array is already sorted, so no swaps are needed.","solution":"def minimum_adjacent_swaps_to_sort(arr): Returns the minimum number of adjacent swaps required to sort the array in non-decreasing order. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1) # Example Usage # n = 4 # arr = [4, 3, 1, 2] # print(minimum_adjacent_swaps_to_sort(arr)) # Output should be 5"},{"question":"Aliens vs Humans A group of humans and aliens have landed on Earth. All the aliens look exactly the same, and all the humans look exactly the same, but the aliens and humans look different from each other. You are given a list of strings representing these individuals. The string \\"h\\" represents a human, and the string \\"a\\" represents an alien. For example, the list `[\\"h\\", \\"a\\", \\"h\\", \\"a\\", \\"h\\"]` represents an alternating sequence of humans and aliens. You need to determine the maximum number of humans that can be grouped together without being interrupted by an alien, and likewise, the maximum number of aliens that can be grouped together without being interrupted by a human. # Input The input will be given in the following format: - The first line contains an integer `N`, the length of the list. - The second line contains `N` strings separated by spaces, each being either \\"h\\" or \\"a\\". # Output Output two lines. The first line should contain the maximum number of consecutive humans (`h`). The second line should contain the maximum number of consecutive aliens (`a`). # Constraints * ( 1 leq N leq 10^5 ) # Example Input ``` 10 h a a a h h a h h h ``` # Example Output ``` 3 3 ``` # Explanation In the example, the maximum number of consecutive humans is 3 (`h h h` at the end), and the maximum number of consecutive aliens is 3 (`a a a` in the middle).","solution":"def max_consecutive_group(individuals): max_humans = 0 max_aliens = 0 current_humans = 0 current_aliens = 0 for individual in individuals: if individual == \\"h\\": current_humans += 1 current_aliens = 0 elif individual == \\"a\\": current_aliens += 1 current_humans = 0 max_humans = max(max_humans, current_humans) max_aliens = max(max_aliens, current_aliens) return max_humans, max_aliens"},{"question":"In a galaxy far far away, there exists a special number system called Xylon. In Xylon, numbers are represented using a series of strings, each corresponding to a unique digit in the Xylon numeral system. The people of this galaxy often need to convert their Xylon numbers back to our usual base-10 system for intergalactic trade. Each unique Xylon digit is represented by a particular string and has a corresponding integer value in base-10. Given a number in the Xylon numeral system, you need to convert it to its base-10 equivalent. Your task is to write a program that takes an Xylon number and a dictionary mapping each Xylon digit to its base-10 value, and then outputs the base-10 equivalent of the entire Xylon number. Input The input is given in the following format: X N d1 v1 d2 v2 ... dN vN The first line contains the Xylon number X, represented as a sequence of strings. The second line contains the number N (1 ≤ N ≤ 26) of unique digits in the Xylon numeral system. The next N lines each contain a string di and an integer value vi, where di is the Xylon digit and vi (0 ≤ vi ≤ 9) is its corresponding base-10 value. The Xylon number X is guaranteed to be valid and only contain digits provided in the subsequent N lines. Output The base-10 equivalent of the Xylon number X is output in one line. Examples Input AB 3 A 1 B 0 C 2 Output 10 Input CADE 4 C 9 A 8 D 3 E 5 Output 9835 Input AAAB 3 A 0 B 1 C 2 Output 0001","solution":"def xylon_to_base10(xylon_number, mappings): Converts a Xylon number to its base-10 equivalent using the provided mappings. Args: xylon_number: str - The Xylon number represented as a sequence of strings. mappings: dict - Dictionary mapping each Xylon digit to its base-10 value. Returns: str - The base-10 equivalent of the Xylon number. base10_number = \\"\\".join([str(mappings[char]) for char in xylon_number]) return base10_number def get_xylon_mappings(input_lines): Extracts the Xylon number and digit mappings from the given input. Args: input_lines: list of str - The given input lines. Returns: tuple: A tuple containing the Xylon number (str) and the mappings (dict). xylon_number = input_lines[0].strip() n = int(input_lines[1].strip()) mappings = {} for i in range(2, 2 + n): digit, value = input_lines[i].strip().split() mappings[digit] = int(value) return xylon_number, mappings"},{"question":"Design a function that determines if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should take a single string as input and return a boolean value: can_form_palindrome(\\"civic\\") would return: True can_form_palindrome(\\"ivicc\\") would return: True can_form_palindrome(\\"hello\\") would return: False can_form_palindrome(\\"A man, a plan, a canal, Panama\\") would return: True Your implementation should consider the following restrictions: - You may ignore non-alphanumeric characters. - You may ignore capitalization.","solution":"import re from collections import Counter def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): Input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count character frequencies char_counts = Counter(cleaned) # Count how many characters have an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Given an integer array nums, return the maximum difference between a pair of numbers such that the larger number comes after the smaller number. Example 1: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: The maximum difference is between 6 and 1, which gives a difference of 6 - 1 = 5. Example 2: Input: [9, 2, 3, 10] Output: 8 Explanation: The maximum difference is between 10 and 2, which gives a difference of 10 - 2 = 8. Example 3: Input: [2, 7, 1, 5] Output: 5 Explanation: The maximum difference is between 7 and 2, which gives a difference of 7 - 2 = 5. Note: - You may assume that the length of nums is at least 2. - The array may contain both positive and negative integers.","solution":"def max_difference(nums): Returns the maximum difference between a pair of numbers such that the larger number comes after the smaller number. if len(nums) < 2: return 0 # Not enough elements to form a pair min_element = nums[0] max_diff = 0 for i in range(1, len(nums)): if nums[i] - min_element > max_diff: max_diff = nums[i] - min_element if nums[i] < min_element: min_element = nums[i] return max_diff"},{"question":"You are given an array of integers where every integer in the array appears twice except for one. Write a function that finds the integer that appears only once. Your function should take an array of integers as input and return the integer that appears only once. **Constraints:** - You must solve the problem with a linear runtime and using constant extra space. **Example:** ```python input_array = [2, 3, 5, 4, 5, 3, 4] find_unique(input_array) # returns 2 input_array = [1, 1, 2, 3, 3] find_unique(input_array) # returns 2 ``` Write a Python function to solve this problem: ```python def find_unique(nums: list) -> int: # Your code here ```","solution":"def find_unique(nums: list) -> int: Returns the integer that appears only once in the array where every other integer appears twice. This is done using bitwise XOR operation which ensures linear runtime and constant space. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"In a small town of XYZ, some people have unique hobbies. Each hobby may have specific rules about which age groups or genders might typically be involved in it. You have been given the task to list out the people who have a certain hobby. Each hobby list should be sorted first in ascending order of the age of the people and then by their name if the ages are the same. Your task is to write a program that outputs each hobby followed by the details of the people who practice it. Input Format: - The first line contains an integer H denoting the number of hobbies. - Each of the next H lines contains a single string denoting a hobby. All hobby names are unique. - The next line contains an integer P denoting the number of people. - Each of the next P lines contains a string denoting a person\'s name, an integer denoting the person\'s age, a character (\'M\' or \'F\') denoting the person\'s gender, and one of the hobbies from the previously mentioned hobby list. Each person\'s name is unique. Output Format: - Print H blocks of lines, where each block starts with the hobby name followed by the sorting list of people practicing it. Each list should be sorted by age, and names are secondary sort key in case of age equality. Constraints: - 1 ≤ H ≤ 100 - 1 ≤ P ≤ 10^4 - 1 ≤ age ≤ 99 - The name of each person and hobby will consist of uppercase and lowercase English alphabets and digits only, and length will not exceed 50 characters. SAMPLE INPUT: 3 Running Swimming Chess 6 Alice 24 F Running Bob 22 M Swimming Charlie 23 M Running Diana 24 F Chess Eva 24 F Running Frank 21 M Chess SAMPLE OUTPUT: Chess Frank 21 M Diana 24 F Running Charlie 23 M Alice 24 F Eva 24 F Swimming Bob 22 M","solution":"def organize_hobbies(hobbies, people): Returns a dictionary where each key is a hobby and the value is a list of tuples containing the people with that hobby sorted by age and name. hobby_dict = {hobby: [] for hobby in hobbies} for person in people: name, age, gender, hobby = person.split() age = int(age) hobby_dict[hobby].append((name, age, gender)) for hobby in hobby_dict: hobby_dict[hobby].sort(key=lambda x: (x[1], x[0])) return hobby_dict def display_hobby_organization(hobbies, hobby_dict): Prints the hobbies and the sorted list of people practicing each hobby. for hobby in hobbies: print(hobby) for person in hobby_dict[hobby]: print(f\\"{person[0]} {person[1]} {person[2]}\\")"},{"question":"Given a list of strings where each string represents a domain name, write a function that returns a dictionary where the keys are the top-level domains and the values are the count of how many times each top-level domain appears in the list. # Function Signature ```python def count_top_level_domains(domains: List[str]) -> Dict[str, int]: ``` # Input - `domains` (list of str): A list of domain names. # Output - A dictionary where keys are top-level domains (str) and values are their respective counts (int). # Example Input ```python [\\"example.com\\", \\"test.org\\", \\"site.edu\\", \\"example.edu\\", \\"mywebsite.com\\"] ``` Output ```python { \\"com\\": 2, \\"org\\": 1, \\"edu\\": 2 } ``` # Constraints - The domain names will always be valid. - Each string in the input list will be a well-formed domain name. - Assume there will be at least one domain name in the input list.","solution":"from typing import List, Dict def count_top_level_domains(domains: List[str]) -> Dict[str, int]: Counts the occurrences of top-level domains (TLDs) in the given list of domain names. Parameters: domains (list of str): A list of domain names. Returns: dict: A dictionary where keys are top-level domains (TLDs) and values are their counts. tld_count = {} for domain in domains: tld = domain.split(\'.\')[-1] if tld in tld_count: tld_count[tld] += 1 else: tld_count[tld] = 1 return tld_count"},{"question":"We have a sequence of integers where each integer is a sum of all previous integers plus the number itself, starting with 1. The sequence starts as 1, 3, 6, 10, 15, 21, and so on. You need to find the nth number in this sequence. -----Input----- The first and only line contains an integer n (1 ≤ n ≤ 10^5) — the position of the number to find in the sequence. -----Output----- Print the nth number in the sequence. -----Examples----- Input 5 Output 15 Input 6 Output 21","solution":"def find_sequence_number(n): Returns the nth number in the sequence where each integer is the sum of all previous integers plus the number itself. # nth number in the sequence is the sum of first n natural numbers return (n * (n + 1)) // 2"},{"question":"A software company has been analyzing the log activity of its servers. The log data is stored as an array of integers, where each integer represents the number of requests processed by the server at a specific time unit. The company is interested in finding out the maximum number of requests processed during any contiguous subarray of length exactly `m`. You have been asked to write a function to determine this maximum number of requests for various values of `m`. -----Input----- The input consists of: - One line containing two integers `n` and `q` (1 leq n leq 10^5, 1 leq q leq 10^3), the number of time units and the number of queries. - One line containing `n` integers (a_1, a_2, ldots, a_n) (0 leq a_i leq 10^9), the number of requests processed at each time unit. - Then `q` lines follow, each with an integer `m` (1 leq m leq n), representing the length of the contiguous subarray for which the maximum number of requests needs to be found. -----Output----- For each query `m`, output the maximum number of requests processed during any contiguous subarray of length exactly `m`. -----Examples----- Sample Input: 8 3 1 3 2 5 1 1 2 3 3 5 6 Sample Output: 10 12 14","solution":"def max_requests(n, q, requests, queries): Returns the maximum number of requests processed during any contiguous subarray of length exactly `m`. Args: n : int : number of time units q : int : number of queries requests : list : list of integers representing the number of requests processed at each time unit queries : list : list of integers representing the length of the contiguous subarray for each query Returns: list : list of integers where each element is the maximum number of requests processed during any contiguous subarray of length exactly `m` for each `m` in queries. def max_subarray_sum(arr, m): Calculate the maximum sum of any contiguous subarray of length `m`. current_sum = sum(arr[:m]) max_sum = current_sum for i in range(m, len(arr)): current_sum += arr[i] - arr[i - m] if current_sum > max_sum: max_sum = current_sum return max_sum results = [] for m in queries: results.append(max_subarray_sum(requests, m)) return results"},{"question":"Given two strings s1 and s2, find the minimum number of steps required to make s1 and s2 anagrams of each other. In each step, you can replace any character in s1 with any other character. Example 1: Input: s1 = \\"anagram\\" s2 = \\"mangaar\\" Output: 0 Explanation: Both strings are already anagrams. Example 2: Input: s1 = \\"xabcdefx\\" s2 = \\"zabcdefg\\" Output: 2 Explanation: You can replace \'x\' in s1 with \'z\' and \'x\' in s2 with \'g\' to make s1 and s2 anagrams. Your Task: The input is already taken care of by the driver code. You only need to complete the function minStepsToAnagram() that takes two strings s1 and s2 as input and returns the minimum number of steps required to make the two strings anagrams of each other. The driver code takes care of the printing. Expected Time Complexity: O(N), where N is the length of the longest string. Expected Auxiliary Space: O(1). Constraints: 1. 1 <= |s1|, |s2| <= 10^5 2. s1 and s2 consist of lowercase English letters only.","solution":"def minStepsToAnagram(s1, s2): This function returns the minimum number of steps required to make s1 and s2 anagrams of each other. from collections import Counter # Calculate frequency of characters in both strings count1 = Counter(s1) count2 = Counter(s2) # Calculate the differences in frequencies steps = 0 for char in set(s1 + s2): # Set ensures unique characters steps += abs(count1[char] - count2[char]) return steps // 2"},{"question":"You are given an array of strings and a target string. Write a function to determine the index of the first occurrence of the target string in the array. If the target string is not found, return -1. Example 1: Input: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], \\"cherry\\" Output: 2 Example 2: Input: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], \\"fig\\" Output: -1 Example 3: Input: [\\"car\\", \\"bike\\", \\"boat\\", \\"plane\\"], \\"bike\\" Output: 1 Example 4: Input: [\\"dog\\", \\"cat\\", \\"bird\\", \\"fish\\"], \\"bird\\" Output: 2","solution":"def find_first_occurrence(arr, target): Returns the index of the first occurrence of the target string in the array. If the target string is not found, returns -1. try: return arr.index(target) except ValueError: return -1"},{"question":"You are given an infinitely large chessboard and a knight starting at position (0, 0). The knight\'s movement is the same as in standard chess: it can move in an \\"L-shape\\" either two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Your task is to write a function `minimum_knight_moves(x, y)` which computes the minimum number of moves it takes for the knight to get to position (x, y) from (0, 0). The coordinates (x, y) can be negative or positive. For example: ``` minimum_knight_moves(5, 5) => 4 minimum_knight_moves(-1, -2) => 1 minimum_knight_moves(2, 1) => 1 ``` # Constraints: * The function must handle up to 10,000 different coordinate pairs. * The maximum x and y values in the test cases will be between -300 and 300. * The average time of the solution for each test case should not exceed 1 millisecond.","solution":"def minimum_knight_moves(x, y): from collections import deque def bfs(start, end): if start == end: return 0 directions = [(2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), (-2, -1), (-1, -2)] queue = deque([(start, 0)]) visited = set([start]) while queue: (current_x, current_y), moves = queue.popleft() for dx, dy in directions: next_x, next_y = current_x + dx, current_y + dy if (next_x, next_y) == end: return moves + 1 if (next_x, next_y) not in visited: visited.add((next_x, next_y)) queue.append(((next_x, next_y), moves + 1)) return -1 # we can exploit the symmetry and only compute for the first quadrant x, y = abs(x), abs(y) return bfs((0, 0), (x, y))"},{"question":"Charlie is participating in a coding marathon. One of the problems requires determining if a number is an Armstrong number. An Armstrong number (also known as a narcissistic number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number as 153 = 1^3 + 5^3 + 3^3. You need to help Charlie write a function to check if a given number is an Armstrong number or not. -----Input----- First line contains an integer T, which denotes the number of testcases. Each of the T lines contains one integer N. -----Output----- For each testcase, print \\"YES\\" if the number is an Armstrong number, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000000 -----Example----- Input: 3 153 9474 10 Output: YES YES NO -----Explanation----- Example case 1. 153 is an Armstrong number as 153 = 1^3 + 5^3 + 3^3. Example case 2. 9474 is an Armstrong number as 9474 = 9^4 + 4^4 + 7^4 + 4^4. Example case 3. 10 is not an Armstrong number as 10 != (1^2 + 0^2).","solution":"def is_armstrong_number(n): Checks if a given number is an Armstrong number. Args: n - integer to check Returns: \'YES\' if n is an Armstrong number, otherwise \'NO\' digits = [int(digit) for digit in str(n)] num_digits = len(digits) armstrong_sum = sum(digit ** num_digits for digit in digits) return \\"YES\\" if armstrong_sum == n else \\"NO\\" def check_armstrong_numbers(test_cases): Processes multiple test cases to check if each number is an Armstrong number. Args: test_cases - list of integers to be checked Returns: list of results for each test case, \'YES\' or \'NO\' return [is_armstrong_number(n) for n in test_cases]"},{"question":"Alice has a hobby of building structures using toy blocks. She places blocks in a straight line, and each block has a distinct height. Alice wants to select a continuous subarray of the blocks such that the heights of the blocks in this subarray strictly increase from left to right. She is interested in finding the longest such subarray. Write a program that finds the length of the longest strictly increasing subarray of block heights. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of blocks. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the blocks. Output Print a single integer denoting the length of the longest strictly increasing subarray of block heights. Examples Input 6 5 1 3 2 4 6 Output 3 Input 5 9 7 5 3 1 Output 1","solution":"def longest_increasing_subarray(n, heights): Finds the length of the longest strictly increasing continuous subarray. Parameters: n (int): The number of blocks. heights (list): A list of integers representing the heights of the blocks. Returns: int: The length of the longest strictly increasing subarray. if n == 1: return 1 max_len = 1 current_len = 1 for i in range(1, n): if heights[i] > heights[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Write a function `hexadecimal_multiplication_table(n)` that generates an `n x n` multiplication table, but with hexadecimal values. The function should return the resulting table as a list of lists, where the inner lists represent rows. Example: ```python hexadecimal_multiplication_table(3) == [[\'0x0\', \'0x0\', \'0x0\'], [\'0x0\', \'0x1\', \'0x2\'], [\'0x0\', \'0x2\', \'0x4\']] hexadecimal_multiplication_table(5) == [[\'0x0\', \'0x0\', \'0x0\', \'0x0\', \'0x0\'], [\'0x0\', \'0x1\', \'0x2\', \'0x3\', \'0x4\'], [\'0x0\', \'0x2\', \'0x4\', \'0x6\', \'0x8\'], [\'0x0\', \'0x3\', \'0x6\', \'0x9\', \'0xc\'], [\'0x0\', \'0x4\', \'0x8\', \'0xc\', \'0x10\']] ``` *Note: The values in the table should be represented as strings with the \'0x\' prefix to denote hexadecimal numbers.*","solution":"def hexadecimal_multiplication_table(n): Generates an n x n multiplication table with hexadecimal values. :param n: Size of the multiplication table :return: List of lists representing the table with hexadecimal values table = [] for i in range(n): row = [] for j in range(n): row.append(hex(i * j)) table.append(row) return table"},{"question":"Your friend is planning a movie marathon and wants to watch \'n\' movies. Each movie has a specified duration in minutes, given in an array. However, your friend only has a limited amount of free time available, \'t\' minutes. Your task is to determine the maximum number of movies your friend can watch completely within the available time. # Example: ```python max_movies([90, 120, 60, 150], 240) == 2 ``` **Note:** You can assume each movie has a duration greater than 0 and the available time \'t\' is a positive integer. Waiting for translations and Feedback! Thanks!","solution":"def max_movies(durations, t): This function takes a list of movie durations and available time in minutes t, and returns the maximum number of movies that can be watched completely. durations.sort() total_time = 0 max_movies_count = 0 for duration in durations: if total_time + duration <= t: total_time += duration max_movies_count += 1 else: break return max_movies_count"},{"question":"You are given a string containing just the characters \'(\' and \')\'. Determine if the input string is valid. A string is considered valid if: 1. Open brackets \'(\' must be closed by the corresponding closing brackets \')\'. 2. Open brackets \'(\' must be closed in the correct order. -----Input----- The input consists of a single line containing the string of parentheses. The length of the string will be between 0 and 1000 inclusive. -----Output----- Output “true” if the string is valid, and “false” otherwise. -----Examples----- Sample Input: ()() Sample Output: true Sample Input: (() Sample Output: false","solution":"def is_valid_parentheses(s: str) -> bool: Determines if the input string of parentheses is valid. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are given two strings, S and T, each containing lowercase alphabets. You need to find the minimum number of operations required to convert string S into string T. The operations allowed are: 1. Insert a character at any position in the string. 2. Remove a character from any position in the string. 3. Replace a character in the string with another character. The cost of each operation is the same (1 unit). -----Constraints----- - 1 leq |S|, |T| leq 300 - Both strings contain only lowercase alphabets (a-z). -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print an integer representing the minimum number of operations required to convert string S into string T. -----Sample Input----- horse ros -----Sample Output----- 3 In this case, we can convert \\"horse\\" into \\"ros\\" in 3 operations as follows: 1. Replace \'h\' with \'r\' (horse -> rorse) 2. Remove \'r\' (rorse -> rose) 3. Remove \'e\' (rose -> ros)","solution":"def min_edit_distance(S, T): Calculate the minimum edit distance between two strings S and T. m = len(S) n = len(T) # Create a DP table to memoize result of previously solved subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize first column and first row of the DP table for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Remove dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1) # Replace return dp[m][n]"},{"question":"Aisha loves collecting unique stones and has a huge collection of them. Recently, she started categorizing her collection based on certain characteristics. Each stone has a specific weight and value, and Aisha wants to find the combination of stones that gives her the maximum total value without exceeding a given weight limit, similar to a knapsack problem. Given a list of stones, each with a certain weight and value, and a total weight capacity of the knapsack, write a function that returns the maximum value Aisha can achieve with the given weight limit. Constraints: 1 ≤ number of stones ≤ 100 1 ≤ weight of each stone ≤ 1000 1 ≤ value of each stone ≤ 1000 1 ≤ knapsack capacity ≤ 1000 Input Constraints: The first line contains two integers: the number of stones (n) and the weight capacity of the knapsack (W). Each of the next n lines contains two integers representing the weight and value of each stone. Output Constraints: Your function should return an integer representing the maximum value. SAMPLE INPUT 4 8 2 3 3 4 4 5 5 6 SAMPLE OUTPUT 10 Explanation The optimal combination includes the 2nd and 4th stones with a total weight of 8 and total value of 10. Therefore, the maximum value Aisha can achieve is 10.","solution":"def knapsack(n, W, stones): Determines the maximum value that can be achieved with the given weight limit. Args: n (int): Number of stones W (int): Maximum weight capacity of the knapsack stones (list of tuples): List of tuples where each tuple contains the weight and value of the stone (weight, value) Returns: int: Maximum value that can be achieved within the weight limit # Initialize the DP table dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] # Build the DP table for i in range(1, n + 1): for w in range(1, W + 1): if stones[i-1][0] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-stones[i-1][0]] + stones[i-1][1]) else: dp[i][w] = dp[i-1][w] return dp[n][W]"},{"question":"A popular software company uses a rating system to evaluate the performance of its developers. Each developer is assigned a skill level that indicates their proficiency. The skill levels are integers between 1 and 100 (inclusive). Over a period of time, the skill levels of developers can change based on their performance. The company\'s system needs a feature that allows them to query the number of developers whose skill level falls within a specific range. Given an array of skill levels and a series of queries, each query asking for the count of developers with skill levels within a specified range, implement this feature. Input The first input line contains two integers `n` and `q` (1 ≤ n, q ≤ 10000) indicating the number of developers and the number of queries respectively. The second line contains `n` integers, each representing the skill level of a developer. The integers are separated by spaces, and each integer is between 1 and 100 (inclusive). The following `q` lines each contain two integers `a` and `b` (1 ≤ a ≤ b ≤ 100) representing the inclusive range of skill levels for the query. Output For each query, print a single integer on a new line: the number of developers whose skill levels fall within the specified range. Examples Input 5 3 10 20 30 40 50 10 30 30 50 60 100 Output 3 3 0 Input 10 2 5 10 15 20 25 30 35 40 45 50 1 25 30 100 Output 5 6 Explanation In the first example, there are 5 developers with skill levels 10, 20, 30, 40, and 50. The first query asks for the count of developers with skill levels between 10 and 30, which are 10, 20, and 30 — thus the count is 3. The second query asks for the count of developers with skill levels between 30 and 50, which are 30, 40, and 50 — thus the count is 3. The third query asks for developers with skill levels between 60 and 100, there are none, so the count is 0. In the second example, the skill levels range from 5 to 50. The first query asks for developers with skill levels between 1 and 25, which are 5, 10, 15, 20, and 25 — thus the count is 5. The second query asks for developers with skill levels between 30 and 100, which are 30, 35, 40, 45, and 50 — thus the count is 6.","solution":"def count_developers_by_skill_range(skill_levels, queries): Returns a list of counts of developers whose skill levels fall within the specified range for each query. result = [] for a, b in queries: count = sum(1 for skill in skill_levels if a <= skill <= b) result.append(count) return result"},{"question":"You are given an array of n integers representing the heights of n buildings lined up in a row, from left to right. An architect wants to design a bridge between two buildings such that the vertical distance between the selected buildings is minimized. The vertical distance between the buildings at index i and j is defined as the absolute difference in heights |heights[i] - heights[j]|. The task is to find the minimum possible vertical distance between any two buildings in the array. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers heights_1, heights_2, ..., heights_n (1 ≤ heights_i ≤ 1,000,000) — the heights of the buildings. -----Output----- Print one integer — the minimum vertical distance between any two buildings. -----Example----- Input 5 10 15 12 18 13 Output 1 Input 3 1 100 101 Output 1 Input 4 9 8 3 7 Output 1 -----Note----- In the first sample, the minimum vertical distance is achieved between the buildings with heights 15 and 13, or 12 and 13, resulting in a vertical distance of |15-13|=2 or |12-13|=1. In the second sample, the minimum vertical distance is achieved between the buildings with heights 100 and 101, resulting in a vertical distance of |100-101|=1. In the third sample, the minimum vertical distance is achieved between the buildings with heights 9 and 8, or 7 and 8, resulting in a vertical distance of |9-8|=1 or |8-7|=1.","solution":"def min_vertical_distance(n, heights): Returns the minimum vertical distance between any two buildings. :param n: int - the number of buildings :param heights: list of int - the heights of the buildings :return: int - the minimum vertical distance heights.sort() min_distance = float(\'inf\') for i in range(1, n): min_distance = min(min_distance, heights[i] - heights[i-1]) return min_distance"},{"question":"Design a function that takes an integer N (1 ≤ N ≤ 100) and prints the sum of all even numbers between 1 and N (inclusive). -----Constraints----- - 1 ≤ N ≤ 100 - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the sum of all even numbers between 1 and N (inclusive). -----Sample Input----- 10 -----Sample Output----- 30 The even numbers between 1 and 10 are 2, 4, 6, 8, 10 and their sum is 30.","solution":"def sum_of_even_numbers(N): Returns the sum of all even numbers between 1 and N (inclusive). if N < 1 or N > 100: raise ValueError(\\"N must be between 1 and 100 (inclusive).\\") return sum(x for x in range(1, N+1) if x % 2 == 0)"},{"question":"You are given a directed graph with n vertices and m edges. Some operations need to be performed on this graph: * Reverse the direction of an existing edge. * Find the length of the shortest cycle in the graph. Initially, and after each operation, you should determine the length of the shortest cycle in the graph. If there is no cycle, the length is considered to be -1. Input The first line contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5) — the number of vertices and edges in the graph respectively. Each of the next m lines contain two integers u and v (1 ≤ u, v ≤ n) — indicating there is a directed edge from vertex u to vertex v. The next line contains a single integer q (0 ≤ q ≤ 10^5) — the number of operations. The next q lines contain the operations of the following type: * 0 u v — this operation means reversing the direction of the edge between u and v. It is guaranteed that such an edge exists in the graph. Output Print q + 1 integers — the length of the shortest cycle in the graph before the operations and after each of them. Example Input 5 6 1 2 2 3 3 4 4 1 4 5 5 2 3 0 4 1 0 1 2 0 5 2 Output 4 4 4 3 Note Initially, the shortest cycle includes the vertices 1, 2, 3, 4 in that order, making a cycle of length 4. After the first operation, the shortest cycle remains of length 4. After the second operation, again the shortest cycle remains of length 4. After the third operation, reversing the edge between vertices 5 and 2 creates a new cycle of length 3 (vertices 5, 2, 3).","solution":"import heapq def dijkstra(graph, n, start): distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_vertex = heapq.heappop(pq) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def floyd_warshall(graph, n): dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u in range(n): for v, w in graph[u]: dist[u][v] = min(dist[u][v], w) for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_cycle_length(graph, n): dist = floyd_warshall(graph, n) shortest_cycle = float(\'inf\') for i in range(n): for j in range(n): if i != j and dist[i][j] < float(\'inf\') and dist[j][i] < float(\'inf\'): shortest_cycle = min(shortest_cycle, dist[i][j] + dist[j][i]) return shortest_cycle if shortest_cycle < float(\'inf\') else -1 def reverse_edge(graph, u, v): graph[u] = [(node, weight) for node, weight in graph[u] if node != v] graph[v].append((u, 1)) def main(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) graph = [[] for _ in range(n)] index += 2 for _ in range(m): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 graph[u].append((v, 1)) index += 2 q = int(data[index]) index += 1 operations = [] for _ in range(q): operation = (int(data[index]), int(data[index + 1]) - 1, int(data[index + 2]) - 1) operations.append(operation) index += 3 result = [] result.append(shortest_cycle_length(graph, n)) for operation in operations: _, u, v = operation reverse_edge(graph, u, v) result.append(shortest_cycle_length(graph, n)) print(\\"n\\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"Implement a function that determines if a given string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', is a valid sequence. A string is considered valid if: + Every opening bracket has a corresponding closing bracket of the same type. + Opening brackets must be closed in the correct order (i.e., no closing bracket before its corresponding opening bracket). Your function should take a string as input and return a boolean value indicating whether the string is a valid sequence. Example ``` \\"( [ { } ] )\\" --> true \\" ( ) [ ] { }\\" --> true \\"( { [ } ] )\\" --> false ``` **Note:** Assume that the input string contains only the aforementioned bracket characters and may include whitespace for clarity. The whitespace should be ignored when validating the sequence.","solution":"def is_valid_sequence(s): Determines if a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and possibly spaces is a valid bracket sequence. A valid bracket sequence: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Opening brackets must be closed in the correct order. Args: s (str): The input string with bracket characters and possibly spaces. Returns: bool: True if the sequence is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in \'({[\': stack.append(char) elif char in \')}]\': if not stack or stack.pop() != bracket_map[char]: return False return not stack"},{"question":"Consider a two-dimensional grid of size n times m, where each cell contains a non-negative integer representing an elevation. You are allowed to make any number of water flow operations. A water flow operation allows water to flow from a cell to an adjacent cell (up, down, left, or right) if the adjacent cell has a lower elevation than the current cell. Given the grid, determine the minimum number of water flow operations required to completely fill the grid with water, starting from any empty cell. Note: - Water can accumulate at any cell and can flow to adjacent lower elevation cells. - An operation is counted each time water moves from one cell to an adjacent lower elevation cell. - The water flow stops when there are no more cells with lower elevation to flow to. -----Input----- The first line contains two integers n and m (2 leq n, m leq 100), the dimensions of the grid. The next n lines each contain m integers representing the elevation of each cell in the grid (0 leq elevation leq 10^3). -----Output----- Output a single integer, the minimum number of water flow operations required to fill the grid completely. -----Example----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 8 -----Explanation----- In the given grid, you start at the cell with elevation 9 and fill the grid with water by moving water to adjacent lower elevation cells. The sequence of operations with their counts will be as follows: 9 -> 8 (1 operation) 8 -> 7 (1 operation) 7 -> 4 (1 operation) 4 -> 1 (1 operation) 4 -> 5 (1 operation) 5 -> 2 (1 operation) 2 -> 3 (1 operation) 3 -> 6 (1 operation) In total, 8 operations are required to fill the entire grid with water.","solution":"def min_water_flow_operations(grid): n = len(grid) m = len(grid[0]) def get_neighbors(x, y): neighbors = [] for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: neighbors.append((nx, ny)) return neighbors def bfs(): from collections import deque queue = deque() visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == max_elev: queue.append((i, j, 0)) visited[i][j] = True total_operations = 0 while queue: x, y, ops = queue.popleft() for nx, ny in get_neighbors(x, y): if not visited[nx][ny] and grid[nx][ny] < grid[x][y]: queue.append((nx, ny, ops + 1)) visited[nx][ny] = True total_operations += 1 return total_operations max_elev = max(max(row) for row in grid) return bfs()"},{"question":"You are given an integer array A of size N. You need to find the maximum value of the expression A[i] + A[j] + A[k] for any 1 ≤ i < j < k ≤ N. Note: - The array A contains distinct elements. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains an integer N, denoting the size of the array. - The next line contains N space-separated integers, the elements of array A. ------ Output Format ------ For each test case, output a single line containing the maximum value of A[i] + A[j] + A[k]. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 The sum of N over all test cases will not exceed 10^6. ------ Sample Input 1 ------ 2 3 1 2 3 5 1 2 3 4 5 ------ Sample Output 1 ------ 6 12 ------ Explanation 1 ------ - In the first test case, the maximum sum is obtained by choosing the elements 1, 2, and 3. - In the second test case, the maximum sum is obtained by choosing the elements 3, 4, and 5.","solution":"def max_triplet_sum(test_cases): This function finds the maximum value of the expression A[i] + A[j] + A[k] for any 1 ≤ i < j < k ≤ N in each test case. Parameters: test_cases (list): List of tuples where each tuple contains an integer N (size of array) and a list A (the array of integers). Returns: list: List of integers where each integer is the maximum triplet sum for a test case. results = [] for N, A in test_cases: # Sort the array to easily find the three largest elements A.sort() # The maximum sum of triplet is the sum of the three largest numbers max_sum = A[-1] + A[-2] + A[-3] results.append(max_sum) return results # Example Usage # test_cases = [(3, [1, 2, 3]), (5, [1, 2, 3, 4, 5])] # print(max_triplet_sum(test_cases)) # Output: [6, 12]"},{"question":"A palindrome is a string that reads the same backward as forward. Write a program to find the shortest palindrome that can be formed by adding characters to the start of a given string. -----Input----- The input consists of a single line containing a non-empty string s of length not exceeding 1000. The string consists only of lowercase latin letters. -----Output----- Print a single line containing the shortest palindrome that can be formed by adding characters to the start of the input string. -----Examples----- Input aacecaaa Output aaacecaaa Input abcd Output dcbabcd Input racecar Output racecar Input civic Output civic -----Explanation----- In the first example, adding \'a\' to the start transforms \\"aacecaaa\\" into the palindrome \\"aaacecaaa\\". In the second example, adding \\"dcb\\" to the start transforms \\"abcd\\" into the palindrome \\"dcbabcd\\". In the last two examples, the original strings \\"racecar\\" and \\"civic\\" are already palindromes, so they remain unchanged.","solution":"def shortest_palindrome(s): Returns the shortest palindrome that can be formed by adding characters to the start of the given string. if s == s[::-1]: return s for i in range(len(s) - 1, -1, -1): if s[:i + 1] == s[:i + 1][::-1]: return s[i + 1:][::-1] + s return s[::-1] + s"},{"question":"You are given a sequence of `n` integers where each integer represents the price of a stock on that day. Your task is to maximize profit by buying and selling the stock exactly once. You need to determine the maximum difference between the buying and selling prices, where the buying price comes before the selling price. Write a function `maxProfit(prices: List[int]) -> int` that takes a list of integers `prices` as input and returns an integer representing the maximum profit that can be achieved by buying and selling the stock exactly once. If no profit can be made, return 0. -----Input----- A single line of input with `n` integers, where `2 ≤ n ≤ 10^5` and each integer `0 ≤ price ≤ 10^4`, representing the prices of the stock on each day. -----Output----- A single integer which is the maximum profit that can be achieved. -----Example----- Input: 7 1 5 3 6 4 Output: 5 Input: 7 6 4 3 1 Output: 0 -----Explanation----- In the first example, the maximum difference between buying price and selling price is buying at 1 and selling at 6, which gives a profit of 5. In the second example, no transaction is done, thus resulting in a profit of 0.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given a list of integers, arrange the integers into the lexicographically smallest sequence possible using the following process. Starting from the initial list, select any integer in the current sequence and place it at the beginning, continuing this process until all elements have been processed. The final sequence should be the lexicographically smallest achievable sequence. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers. - The second line contains n space-separated integers, each integer is between 1 and 1000. Output: - Output n space-separated integers — the lexicographically smallest sequence possible using the described process. Examples: Input: 6 4 2 3 1 5 6 Output: 1 2 3 4 5 6 Input: 5 5 3 4 2 1 Output: 1 2 3 4 5 Explanation: In the first example, the process starts by selecting \'4\' and placing it at the beginning, then selecting \'2\' and placing it at the beginning, and so on until the list becomes 1 2 3 4 5 6, which is the lexicographically smallest sequence achievable given the process.","solution":"def smallest_lexicographical_sequence(n, nums): nums.sort() return nums"},{"question":"You are given a positive integer n. Your task is to determine whether n is a palindrome in its binary representation. A number is said to be a palindrome if it reads the same backward as forward. For example, the decimal number 5 is \'101\' in binary, which is a palindrome. Input The only line of input contains an integer n (1 ≤ n ≤ 10000). Output Output \\"Yes\\" if the binary representation of n is a palindrome. Otherwise, output \\"No\\". Examples Input 9 Output Yes Input 10 Output No","solution":"def is_binary_palindrome(n): Determines if the binary representation of a number is a palindrome. :param n: An integer (1 ≤ n ≤ 10000) :return: \\"Yes\\" if the binary representation of n is a palindrome, otherwise \\"No\\" binary_representation = bin(n)[2:] # Get binary representation and strip off the \'0b\' if binary_representation == binary_representation[::-1]: # Check if it is a palindrome return \\"Yes\\" else: return \\"No\\""},{"question":"Ariel is an engineer who loves exploring different communication protocols. She is currently working on a project that requires data serialization. To achieve optimal data transfer efficiency, she needs your help in designing a custom serialization format. Serialization is the process of converting a data structure into a sequence of bytes for storage or transmission. Ariel\'s specific requirements for serialization are as follows: - The data structure is a nested list of integers or nested lists. Each integer is guaranteed to be within the range -1000 to 1000. - The serialization format should be a string representation of the data structure that adheres to the following rules: - Lists should be enclosed in square brackets `[ ]`. - Elements within a list should be separated by commas `,`. - Nested lists should be serialized recursively following the same rules. For example, the nested list `[1, [2, [3, 4], 5], 6]` should be serialized as `\\"1,[2,[3,4],5],6\\"`. Your task is to implement a function that serializes a given nested list into a string format as specified. # Function Signature ```python def serialize(nested_list: list) -> str: pass ``` # Input - `nested_list`: A nested list of integers or nested lists of integers. The nested list can be arbitrarily deep but will contain no more than 100 integers in total. # Output - Return a string representing the serialized format of the nested list. # Example ```python assert serialize([1, [2, [3, 4], 5], 6]) == \'1,[2,[3,4],5],6\' assert serialize([[1, 2], 3, [4, [5, 6]]]) == \'[1,2],3,[4,[5,6]]\' ```","solution":"def serialize(nested_list: list) -> str: Serializes a nested list into a string format as specified. def serialize_helper(lst): serialized_elements = [] for element in lst: if isinstance(element, list): serialized_elements.append(f\\"[{serialize_helper(element)}]\\") else: serialized_elements.append(str(element)) return \\",\\".join(serialized_elements) return serialize_helper(nested_list)"},{"question":"The theme for Charlie’s Candy Carnival this year is centered around the game Color Combos! Each guest receives a string of colors represented by lowercase letters (\'a\' to \'z\'), and they need to create the longest possible consecutive sequence where every character in the sequence can be grouped into pairs of the same kind. A pair is defined as the same character appearing consecutively. For example, in the string \\"aabbcc\\", \\"aa\\", \\"bb\\", and \\"cc\\" are pairs. Charlie has asked for your help to find the maximum length of a consecutive sequence that meets the criteria. If it\'s impossible to form any valid sequence, the result should be 0. -----Input----- The input consists of a single string S of length 1 leq |S| leq 10^6 where each character is a lowercase English letter. -----Output----- Output a single integer representing the maximum length of a consecutive valid sequence. -----Examples----- Sample Input 1: aabbcc Sample Output 1: 6 Sample Input 2: abbac Sample Output 2: 2 Sample Input 3: abcde Sample Output 3: 0 -----Explanation----- In the first sample, every character is paired consecutively, so the entire string \\"aabbcc\\" is valid with a maximum length of 6. In the second sample, the longest valid sequence is \\"bb\\", which has a length of 2. In the third sample, there are no consecutive pairs, so the output is 0.","solution":"def max_len_consecutive_pairs(s): Returns the maximum length of a consecutive sequence where every character in the sequence can be grouped into pairs of the same kind. max_length = 0 current_length = 0 i = 0 while i < len(s) - 1: if s[i] == s[i + 1]: current_length += 2 i += 2 else: current_length = 0 i += 1 max_length = max(max_length, current_length) return max_length"},{"question":"The event organizers in Zyxland are preparing for a large event which will require the installation of several temporary power stations. The power grid of Zyxland is represented as n junctions connected by m bidirectional power lines. Each line has a specific capacity, which is an integer representing the maximum power it can transfer. You are given the structure of the grid, and the capacity of each line. The organizers want to ensure that they can transfer power from one junction to another with a certain minimum required capacity. Given the grid, the minimum required capacity p, and a pair of junctions s (source) and t (target), determine if there is a path from s to t such that the minimum capacity of the lines on the path is at least p. Formally, you need to determine if there exists a path from s to t such that all the power lines on this path have a capacity of at least p. Input The first line contains three integers n, m, p (1 ≤ n ≤ 100,000, 1 ≤ m ≤ 200,000, 1 ≤ p ≤ 10^9) — the number of junctions, the number of power lines, and the minimum required capacity respectively. The next m lines describe the power lines. Each line contains three integers ai, bi, ci (1 ≤ ai, bi ≤ n, 1 ≤ ci ≤ 10^9, ai ≠ bi) — the junctions connected by the power line and its capacity. The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t) — the source and target junctions. Output Print \\"YES\\" if there is a path from s to t such that all power lines on the path have a capacity of at least p. Otherwise, print \\"NO\\". Examples Input 6 7 4 1 2 5 2 3 4 3 4 8 4 5 6 5 6 3 1 3 10 3 6 2 1 6 Output NO Input 4 4 2 1 2 3 2 3 4 3 4 1 1 4 2 1 4 Output YES Note In the first example, the valid paths from junction 1 to junction 6 either have power lines with capacities less than 4 or do not form a continuous path with the required minimum capacity of 4. In the second example, there exists a path from junction 1 to junction 4 through junctions 2 and 3 with all power lines having a capacity of at least 2.","solution":"from collections import defaultdict, deque def can_transfer_power(n, m, p, lines, s, t): def bfs(source, target): visited = set() queue = deque([source]) while queue: node = queue.popleft() if node == target: return True for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False adj_list = defaultdict(list) for ai, bi, ci in lines: if ci >= p: adj_list[ai].append(bi) adj_list[bi].append(ai) return \\"YES\\" if bfs(s, t) else \\"NO\\""},{"question":"There are n mountains in a landscape, each with a certain height. A hiker wants to choose a subset of these mountains to climb, such that the difference between the highest and the lowest heights in the chosen subset is minimized. Additionally, the hiker wants the number of mountains in this subset to be as large as possible. Write a program to determine the minimum difference between the highest and lowest mountain heights in the largest possible subset of mountains. -----Input----- The first line of the input contains an integer n (1 le n le 10^5) — the number of mountains. The second line of the input contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the mountains. -----Output----- Print a single integer — the minimum difference between the highest and lowest mountain heights in the largest possible subset of mountains. -----Examples----- Input 5 1 5 3 4 6 Output 3 Input 8 10 20 30 40 50 60 70 80 Output 10 Input 6 8 1 1 8 3 3 Output 0","solution":"def min_diff_largest_subset(n, heights): Returns the minimum difference between the highest and the lowest mountain heights in the largest possible subset of mountains. if n == 1: return 0 heights.sort() min_diff = float(\'inf\') for i in range(1, n): min_diff = min(min_diff, heights[i] - heights[i - 1]) return min_diff"},{"question":"You are given a tree consisting of n nodes. Each node has an integer value assigned to it. Your task is to implement a function that takes the tree and an integer k as input and returns the number of paths in the tree where the sum of the values of the nodes on the path is equal to k. A path is defined as any sequence of nodes from some starting node to any node in the tree, where consecutive nodes in the sequence are connected by edges. The path does not need to go through the root. Function Signature: ```python def count_paths_equal_to_k(root: TreeNode, k: int) -> int: ``` # Input - `root`: A TreeNode object representing the root of the tree. Each TreeNode object has the following properties: - `val`: an integer value assigned to the node. - `left`: a TreeNode object representing the left child of the node. - `right`: a TreeNode object representing the right child of the node. - `k`: an integer (−10^5 ≤ k ≤ 10^5) representing the target sum. # Output - An integer representing the number of paths where the sum of the values is equal to k. # Example Example 1 Input: ```python root = TreeNode(10) root.left = TreeNode(5) root.right = TreeNode(-3) root.left.left = TreeNode(3) root.left.right = TreeNode(2) root.right.right = TreeNode(11) root.left.left.left = TreeNode(3) root.left.left.right = TreeNode(-2) root.left.right.right = TreeNode(1) k = 8 print(count_paths_equal_to_k(root, k)) ``` Output: ``` 3 ``` Explanation: The paths that sum to 8 are: 1. 5 -> 3 2. 5 -> 2 -> 1 3. 10 -> -3 -> 11 Example 2 Input: ```python root = TreeNode(1) root.left = TreeNode(-2) root.right = TreeNode(-3) root.left.left = TreeNode(1) root.left.right = TreeNode(3) root.left.left.left = TreeNode(-1) root.right.left = TreeNode(-2) k = -1 print(count_paths_equal_to_k(root, k)) ``` Output: ``` 4 ``` Explanation: The paths that sum to -1 are: 1. 1 -> -2 -> 1 -> -1 2. -2 -> 1 3. 1 -> -3 -> -2 4. -3 -> -2 # Constraints - The number of nodes in the tree is in the range [0, 10000]. - The value of each node is an integer in the range [−1000, 1000].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_paths_equal_to_k(root: TreeNode, k: int) -> int: from collections import defaultdict def dfs(node, current_sum): if not node: return 0 current_sum += node.val path_count = prefix_sum[current_sum - k] prefix_sum[current_sum] += 1 path_count += dfs(node.left, current_sum) path_count += dfs(node.right, current_sum) prefix_sum[current_sum] -= 1 return path_count prefix_sum = defaultdict(int) prefix_sum[0] = 1 return dfs(root, 0)"},{"question":"Write a function called `alternating_sort` that takes a list of integers as input and returns a new list where the elements are sorted such that the first element is the smallest, the second element is the largest, the third element is the second smallest, and so on. For example: ```python alternating_sort([5, 3, 1, 4, 2]) == [1, 5, 2, 4, 3] alternating_sort([8, 3, 7, 6, 2, 4, 5, 1]) == [1, 8, 2, 7, 3, 6, 4, 5] alternating_sort([10, 9, 8, 7]) == [7, 10, 8, 9] alternating_sort([1]) == [1] ``` Your function should handle an list of integers and return the correctly sorted list following the alternating smallest-largest pattern.","solution":"def alternating_sort(lst): Given a list of integers, return a new list where the elements are sorted such that the first element is the smallest, the second element is the largest, the third element is the second smallest, and so on. if not lst: return [] sorted_lst = sorted(lst) result = [] left = 0 right = len(sorted_lst) - 1 while left <= right: if left <= right: result.append(sorted_lst[left]) left += 1 if left <= right: result.append(sorted_lst[right]) right -= 1 return result"},{"question":"You are given a sequence of N integers and a set of Q queries. Each query consists of two integers L and R representing a subarray of the given sequence. For each query, you need to determine the sum of the distinct elements in the subarray from index L to index R (inclusive). ------ Input ------ The first line of the input contains a single integer T — the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and Q. The second line contains N space-separated integers representing the sequence. The next Q lines each contain two space-separated integers L and R describing one query. ------ Output ------ For each query, print a single line containing one integer — the sum of the distinct elements in the specified subarray. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N 1 ≤ text{sequence}[i] ≤ 10^6 the sum of N over all test cases does not exceed 10^6 the sum of Q over all test cases does not exceed 10^6 ------ Sample Input ------ 1 5 3 1 2 3 2 1 1 3 2 5 1 5 ------ Sample Output ------ 6 6 6 ------ Explanation ------ Example case 1: - For the first query with L = 1 and R = 3, the subarray is [1, 2, 3]. The distinct elements are {1, 2, 3}, and their sum is 6. - For the second query with L = 2 and R = 5, the subarray is [2, 3, 2, 1]. The distinct elements are {1, 2, 3}, and their sum is 6. - For the third query with L = 1 and R = 5, the subarray is [1, 2, 3, 2, 1]. The distinct elements are {1, 2, 3}, and their sum is 6.","solution":"def solve_queries(T, test_cases): results = [] for i in range(T): N, Q, sequence, queries = test_cases[i] for (L, R) in queries: subarray = sequence[L-1:R] distinct_sum = sum(set(subarray)) results.append(distinct_sum) return results # Example Usage T = 1 test_cases = [ (5, 3, [1, 2, 3, 2, 1], [(1, 3), (2, 5), (1, 5)]) ] print(solve_queries(T, test_cases)) # Output: [6, 6, 6]"},{"question":"You are given a grid of n times m cells. Each cell in the grid can either be land or water. You need to determine the size of the largest island in the grid. An island is composed of adjacent lands connected horizontally or vertically. The size of an island is the number of cells it contains. Write a function that takes a grid as input and returns the size of the largest island. For example, in the grid below: texttt{ [ begin{array}{cccccc} 1 & 1 & 0 & 0 & 0 & 0 0 & 1 & 0 & 0 & 1 & 1 0 & 0 & 0 & 1 & 1 & 1 0 & 0 & 0 & 0 & 0 & 0 0 & 0 & 1 & 1 & 1 & 0 0 & 0 & 1 & 0 & 0 & 0 end{array} ] } The largest island has a size of 5. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. The next n lines each contain m integers, where each integer is either 0 or 1. 0 represents water and 1 represents land. -----Output----- Print one integer, the size of the largest island. -----Example----- Input: 4 5 1 1 0 0 0 0 1 0 1 1 0 0 0 1 1 0 0 1 1 1 Output: 5 Input: 3 3 1 0 0 0 1 0 0 0 1 Output: 1","solution":"def largest_island(grid): n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark the cell as visited size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_island_size = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_island_size = max(max_island_size, dfs(i, j)) return max_island_size"},{"question":"Given an integer X (1 ≤ X ≤ 1000), determine if X is a semi-prime number. A semi-prime number is a number that is the product of two prime numbers. Input The input contains a single integer, X. Output Output \\"YES\\" if the number is a semi-prime, otherwise output \\"NO\\". Examples Input 15 Output YES Input 10 Output YES Input 8 Output NO Input 49 Output YES","solution":"def is_semi_prime(X): Returns \\"YES\\" if X is a semi-prime number, otherwise returns \\"NO\\". def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True for i in range(2, X): if X % i == 0: if is_prime(i) and is_prime(X // i): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of integers, you need to partition the array into two subarrays such that the difference between the sum of elements in the two subarrays is minimized. Your task is to write a function `min_partition_diff(nums: List[int]) -> int` that takes an array of integers and returns the minimum possible difference between the sums of the two subarrays. -----Input----- The input consists of a single list `nums` of length `n` (1 le n le 100). Each element in the array is an integer in the range [-10^3, 10^3]. -----Output----- Return a single integer which is the minimum possible difference between the sums of the two subarrays. -----Examples----- Input [1, 6, 11, 5] Output 1 Input [3, 1, 4, 2, 2] Output 0","solution":"from typing import List def min_partition_diff(nums: List[int]) -> int: Returns the minimum possible difference between the sums of the two subarrays. total_sum = sum(nums) n = len(nums) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if nums[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: return total_sum - 2 * j"},{"question":"In computer science, string manipulation and operations are ubiquitous, and understanding them is paramount. Given a string, a substring is defined as a contiguous sequence of characters within the string. Two substrings are considered different if they start or end at a different index. You are given a string `s`, your task is to count the number of unique substrings that can be formed from `s`. -----Input----- The only line contains a single string `s` (1 ≤ |s| ≤ 1000), where `|s|` denotes the length of the string. The string contains only lowercase English letters. -----Output----- Print a single integer — the number of unique substrings that can be formed from the given string `s`. -----Examples----- Input abc Output 6 Input aaa Output 3 Explanation: In the first example, the distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". In the second example, the distinct substrings are \\"a\\", \\"aa\\", and \\"aaa\\".","solution":"def count_unique_substrings(s): Return the number of unique substrings that can be formed from the given string `s`. if not s: return 0 unique_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Write a function that takes a list of integers and an integer k as input, and returns the maximum sum of k consecutive elements in the list. Example: Input ```python arr = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 ``` Output ```python 39 # Explanation: The maximum sum of 4 consecutive elements is 10 + 23 + 3 + 1 = 37 ``` If there are fewer than k elements in the list, the function should return 0. ```python def max_sum_of_consecutive_numbers(arr, k): # Your code here # Sample usage print(max_sum_of_consecutive_numbers([1, 4, 2, 10, 23, 3, 1, 0, 20], 4)) # Output should be 39 ```","solution":"def max_sum_of_consecutive_numbers(arr, k): if len(arr) < k: return 0 # Calculate the sum of the first \'k\' elements max_sum = sum(arr[:k]) current_sum = max_sum # Use a sliding window approach to find the maximum sum of \'k\' consecutive elements for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given n distinct integers and you need to find the minimum number of operations required to make all the elements in the array equal. In one operation, you can choose any element and increase or decrease it by 1. For example, consider the array `[3, 1, 4]`. One way to make all elements equal is: - Increment 1 to 2, then increment 2 to 3 (2 operations). - Decrement 4 to 3 (1 operation). Therefore, the total number of operations required is 3. -----Input----- - The first line contains a single integer n (1 leq n leq 100) — the number of elements in the array. - The second line contains n distinct integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) — the elements of the array. -----Output----- - Output a single integer — the minimum number of operations required to make all elements of the array equal. -----Example----- Input 3 3 1 4 Output 3 -----Note----- In the first example, you can make the elements equal by converting them all to any of the initial values or any median value. The number of operations is minimized when converting all elements to the median value. In this case, converting all elements to 3 requires 3 operations.","solution":"def min_operations_to_equal_elements(n, arr): Function to compute the minimum number of operations required to make all elements of the array equal. Args: n: int : number of elements in the array arr: list of int : the elements of the array Returns: int: minimum number of operations required # Sort the array to find the median arr.sort() # Find the median element median = arr[n // 2] # Compute the total number of operations required to make all elements equal to the median operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Samantha is organizing a quiz competition, and she wants to generate unique question IDs for each of the participants. A question ID is a string of exactly 8 characters, consisting of uppercase English letters (\'A\'-\'Z\') and digits (\'0\'-\'9\'). A question ID is considered valid if the sum of its ASCII values is divisible by a given integer k. Given the value of k and the number of participants n, help Samantha generate n distinct valid question IDs. Input The input consists of a single line containing two integers k and n (1 ≤ k ≤ 1000, 1 ≤ n ≤ 10^5). Output Print n lines. Each line must contain exactly one valid question ID string. All IDs must be distinct. If there are more than n distinct valid question IDs, you can print any n of them. It is guaranteed that at least n distinct valid question IDs exist. The IDs can be printed in any order. Examples Input 10 3 Output AAAAAAA0 AAAAAAA5 AAAAAAB0 Input 7 5 Output AAAAAAAH AAAAAAA8 AAAAAAAG AAAAAAB2 AAAAAAY8","solution":"import random import string def generate_unique_question_ids(k, n): Generates n distinct valid question ID strings such that the sum of ASCII values of the characters in each string is divisible by k. Parameters: k (int): The divisor for the sum of ASCII values. n (int): The number of unique question IDs to generate. Returns: list: A list of n distinct valid question ID strings. def is_valid_id(question_id): return sum(ord(c) for c in question_id) % k == 0 valid_ids = set() while len(valid_ids) < n: # Randomly generate an 8-character string question_id = \'\'.join(random.choices(string.ascii_uppercase + string.digits, k=8)) if is_valid_id(question_id): valid_ids.add(question_id) return list(valid_ids) # Example usage if __name__ == \\"__main__\\": k, n = 7, 5 ids = generate_unique_question_ids(k, n) for id in ids: print(id)"},{"question":"Write a function to determine the minimum number of coins required to make a given amount using any combination of coins with specified denominations. Assume there are infinite coins of each type. Example 1: Input: coins = [1, 2, 5] amount = 11 Output: 3 Explanation: The minimum number of coins to make 11 is 3: 11 can be made with three coins of 5 + 5 + 1. Example 2: Input: coins = [2] amount = 3 Output: -1 Explanation: It\'s not possible to make 3 with only coins of 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minCoins()` which takes a list of integers `coins` and an integer `amount` and returns the integer result of the minimum number of coins needed, or `-1` if it\'s not possible to make the given amount. Expected Time Complexity: O(amount * n) Expected Auxiliary Space: O(amount) Constraints: 1 ≤ coins.length ≤ 12 1 ≤ coins[i] ≤ 2^31 - 1 0 ≤ amount ≤ 10^4","solution":"def minCoins(coins, amount): Returns the minimum number of coins required to make up the given amount using any combination of the coins. If it\'s not possible, returns -1. if amount == 0: return 0 # Initialize the array to store the minimum coins for each amount dp = [float(\'inf\')] * (amount + 1) # Base case: no coins are needed to make 0 amount dp[0] = 0 # Iterate over each coin and update the array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If dp[amount] is still infinity, it means it\'s not possible to form the amount with given coins return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"You are given a sequence consisting of n integers a1, a2, ..., an. Define the prefix product of index k for this sequence as the product of all elements from the start of the sequence up to and including index k. Similarly, define the suffix product of index k as the product of all elements from index k to the end of the sequence. Your task is to find an index i (1 ≤ i ≤ n) such that the prefix product up to index i-1 is equal to the suffix product from index i+1. If there are multiple such indices, return the smallest one. If no such index exists, return -1. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output Print the smallest index i such that the prefix product up to index i-1 is equal to the suffix product from index i+1, or -1 if no such index exists. Examples Input 5 1 2 1 1 2 Output 3 Input 4 3 6 2 9 Output -1 Note In the first example, when i = 3, the prefix product up to index 2 is 1 * 2 = 2, and the suffix product from index 4 is 1 * 2 = 2. In the second example, no such index exists.","solution":"def find_special_index(n, sequence): if n == 1: return 1 if sequence[0] == 1 else -1 prefix_product = [1] * n suffix_product = [1] * n # Building prefix product array for i in range(1, n): prefix_product[i] = prefix_product[i - 1] * sequence[i - 1] # Building suffix product array for i in range(n - 2, -1, -1): suffix_product[i] = suffix_product[i + 1] * sequence[i + 1] # Finding the special index for i in range(n): if prefix_product[i] == suffix_product[i]: return i + 1 return -1"},{"question":"Financial analysts at ABC Corp need a program to calculate cumulative sums from a list of daily profits. A cumulative sum on a given day is defined as the total sum of profits from the first day up to that day. Write a function to generate a list containing these cumulative sums. Input The input consists of a single line containing space-separated integers representing daily profits where each integer p (−105 ≤ p ≤ 105) is the profit for a single day. Output A single line output which contains space-separated integers representing the cumulative sums for each day. Each cumulative sum should be in the same position as the corresponding input day. Examples Input 10 20 30 Output 10 30 60 Input -5 10 -15 20 Output -5 5 -10 10 Input 1 1 1 1 1 Output 1 2 3 4 5","solution":"def cumulative_sums(profits): Returns a list of cumulative sums from a list of daily profits. :param profits: List of integers representing daily profits :return: List containing the cumulative sums cumulative_sum = [] current_sum = 0 for profit in profits: current_sum += profit cumulative_sum.append(current_sum) return cumulative_sum # Function to format the output space-separated as required def format_output(cumulative_sums): return \' \'.join(map(str, cumulative_sums)) # Sample usage input_profits = [10, 20, 30] cumulative_sum_result = cumulative_sums(input_profits) print(format_output(cumulative_sum_result)) # Output: \\"10 30 60\\""},{"question":"Write a function `reverseWords` that takes a string as input and returns a string with the words in reverse order. Example: ```\\"python coding challenges\\" -> \\"challenges coding python\\"```","solution":"def reverseWords(s): Reverses the order of words in a given string s. return \' \'.join(s.split()[::-1])"},{"question":"A company is planning its annual holiday party and is distributing gifts to its employees. Each employee will receive one gift. The company has a list of possible gifts indexed from 1 to p, each with a price associated with it. The employees are also indexed from 1 to e, and each employee has a maximum budget indicating the highest price they can accept for a gift. You are asked to determine the maximum number of different employees that can receive gifts such that the price of each gift does not exceed the employee\'s budget. Note that each gift can be given to only one employee. -----Input----- The first line contains two integers e and p, separated by space — the number of employees and the number of different gifts, respectively (1 ≤ e, p ≤ 100,000). The second line contains e integers separated by spaces — the maximum budget of each employee (1 leq budget_i leq 10^9). The third line contains p integers separated by spaces — the price of each gift (1 leq price_j leq 10^9). -----Output----- Output the maximum number of different employees that can receive gifts such that each gift is given to only one employee and the price of the gift does not exceed the employee\'s budget. -----Examples----- Input 3 3 100 200 300 150 200 250 Output 2 Input 4 3 100 200 300 400 350 100 200 Output 3 Input 5 5 200 300 400 500 600 100 100 100 100 100 Output 5 -----Note----- In the first test, the most efficient way to distribute the gifts is to give the second gift (priced at 200) to the second employee (budget 200) and the third gift (priced at 250) to the third employee (budget 300). The first gift (priced at 150) cannot be given to the first employee (budget 100). Therefore, the maximum number of different employees that can receive gifts is 2. In the second test, the optimal distribution is to give the third gift (priced at 200) to the second employee (budget 200), the first gift (priced at 350) to the fourth employee (budget 400), and the second gift (priced at 100) to the first employee (budget 100). Therefore, 3 different employees can receive gifts. In the third test, all gifts can be distributed since each gift priced at 100 falls within the budgets of all employees. Therefore, the maximum number of different employees that can receive gifts is 5.","solution":"def max_employees_with_gifts(e, p, budgets, prices): Returns the maximum number of different employees that can receive gifts such that the price of each gift does not exceed the employee\'s budget. budgets.sort() prices.sort() # Initialize pointers for both budgets and prices i = j = count = 0 while i < e and j < p: if prices[j] <= budgets[i]: count += 1 j += 1 # Move the budget pointer regardless of match i += 1 return count"},{"question":"Write a function `fibonacciSum` that calculates the sum of the first `n` numbers in the Fibonacci sequence. ```racket In Racket, the function is called fibonacci-sum. (fibonacci-sum 5) ; returns 7 because the first 5 Fibonacci numbers are 0, 1, 1, 2, 3, and their sum is 7 (fibonacci-sum 10) ; returns 88 because the first 10 Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and their sum is 88 ```","solution":"def fibonacciSum(n): Returns the sum of the first n numbers in the Fibonacci sequence. if n <= 0: return 0 fib = [0, 1] while len(fib) < n: fib.append(fib[-1] + fib[-2]) return sum(fib[:n])"},{"question":"A fisherman is catching fish. He can catch M types of fish. Each type of fish i has a weight W_i and has a value V_i. The fisherman wants to maximize the total value of the fish he catches, but he cannot carry more than a weight of C in his basket. Each type of fish can be caught multiple times. Determine the maximum value the fisherman can carry without exceeding the weight limit. -----Constraints----- - 1 leq M leq 100 - 1 leq C leq 10^4 - 1 leq W_i leq 10^2 - 1 leq V_i leq 10^2 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: C M W_1 V_1 : W_M V_M -----Output----- Print the maximum value the fisherman can carry without exceeding the weight limit. -----Sample Input----- 10 3 2 3 3 4 4 5 -----Sample Output----- 15 First, he catches five of the first type of fish, each of weight 2 and value 3, which totals to a weight of 10 and value of 15. Thus, the maximum value he can carry is 15.","solution":"def max_fish_value(C, M, fish_data): Returns the maximum value of fish that can be carried within the weight limit C. Parameters: C (int): Maximum weight capacity of the fisherman\'s basket. M (int): Number of types of fish. fish_data (list of tuples): Each tuple contains (weight, value) for each type of fish. Returns: int: Maximum value of fish that can be carried. # DP array to store the maximum value for each weight up to C dp = [0] * (C + 1) # Iterate over each fish for weight, value in fish_data: for current_weight in range(weight, C + 1): dp[current_weight] = max(dp[current_weight], dp[current_weight - weight] + value) return dp[C]"},{"question":"You are given an array of integers representing the daily temperature readings of a city over a span of N days. The task is to determine the length of the longest contiguous subarray where the temperature strictly increases each day. # Constraints - 1 leq N leq 10^5 - -10^4 leq temperature[i] leq 10^4 # Input The input is given from Standard Input in the following format: ``` N temperature_1 temperature_2 ... temperature_N ``` # Output Print a single integer representing the length of the longest contiguous subarray where the temperature strictly increases each day. # Sample Input ``` 10 1 2 3 2 3 4 5 1 2 3 ``` # Sample Output ``` 4 ``` # Explanation The longest contiguous subarray where the temperature strictly increases is [2, 3, 4, 5], which has a length of 4.","solution":"def longest_increasing_subarray_length(temperatures): Returns the length of the longest contiguous subarray with strictly increasing temperature readings. Parameters: temperatures (list): A list of integers representing daily temperatures. Returns: int: The length of the longest contiguous subarray with strictly increasing temperatures. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Alice is organizing a rally in CityLand, which is structured as a series of cities connected by one-way roads, forming a directed acyclic graph (DAG). CityLand has `n` cities numbered from `1` to `n` and `m` directed roads. Alice wants to find out how many ways there are to travel between select pairs of cities such that the travel follows the direction of the roads. Alice has `q` queries where each query consists of two cities, `a` and `b`. For each query, she needs to determine the number of distinct paths from city `a` to city `b`. Write a program that processes these queries efficiently. Input - The first line contains two integers `n` and `m` denoting the number of cities and the number of roads, respectively. - The next `m` lines contain two integers `u` and `v` denoting a directed road from city `u` to city `v`. - The next line contains an integer `q` denoting the number of queries. - Each of the next `q` lines contains two integers `a` and `b` indicating a query to find the number of distinct paths from city `a` to city `b`. Output - For each query, print a single integer denoting the number of distinct paths from city `a` to city `b`. Constraints - `1 ≤ n, m ≤ 10^4` - `1 ≤ q ≤ 10^3` - `1 ≤ u, v, a, b ≤ n` - It is guaranteed that the graph is a directed acyclic graph (DAG). SAMPLE INPUT 5 5 1 2 2 3 3 5 1 4 4 5 2 1 5 4 5 SAMPLE OUTPUT 2 1 Explanation For the first query, Alice can travel from city 1 to city 5 through two distinct paths: {1 -> 2 -> 3 -> 5} and {1 -> 4 -> 5}. For the second query, Alice can travel from city 4 to city 5 through one path: {4 -> 5}.","solution":"from collections import defaultdict, deque def find_paths(n, edges, queries): # Build adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) memo = {} def count_paths(start, end): if start == end: return 1 if start in memo and end in memo[start]: return memo[start][end] path_count = 0 for neighbor in graph[start]: path_count += count_paths(neighbor, end) if start not in memo: memo[start] = {} memo[start][end] = path_count return path_count results = [] for a, b in queries: results.append(count_paths(a, b)) return results def read_input(): n, m = map(int, input().split()) edges = [tuple(map(int, input().split())) for _ in range(m)] q = int(input()) queries = [tuple(map(int, input().split())) for _ in range(q)] return find_paths(n, edges, queries)"},{"question":"Write a program that manages a ticket booking system for a movie theater with the following operations: * book c k: Book k tickets under the name of the customer c. If the customer already has a booking, add the booked tickets to their current total. * cancel c k: Cancel k tickets under the name of the customer c. If the number of tickets to cancel exceeds the number of tickets the customer has booked, cancel all the tickets for that customer. * check c: Check the number of tickets booked under the name of the customer c. If the customer has no bookings, return 0. * summary: Return the total number of booked tickets and the list of customers sorted in alphabetical order by name, along with their respective number of booked tickets. Constraints * The number of operations leq 100,000 * The number of tickets booked or cancelled in a single operation leq 1,000 * The name of the customer leq 100 characters long. Input In the first line, the number of operations m is given. In the following m lines, operations represented by book c k, cancel c k, check c, or summary are given. Output For each check c operation, print the number of tickets booked under the name of the customer c. For each summary operation, print the total number of booked tickets, followed by the list of customers and their respective number of booked tickets, each in a new line as \\"name: tickets\\". Example Input 10 book Alice 5 book Bob 3 check Alice cancel Alice 2 check Alice check Bob book Alice 4 summary cancel Bob 5 summary Output 5 3 3 12 Alice: 7 Bob: 3 7 Alice: 7","solution":"class TicketBookingSystem: def __init__(self): self.bookings = {} def book(self, c, k): if c in self.bookings: self.bookings[c] += k else: self.bookings[c] = k def cancel(self, c, k): if c in self.bookings: if self.bookings[c] <= k: self.bookings[c] = 0 else: self.bookings[c] -= k def check(self, c): return self.bookings.get(c, 0) def summary(self): total_tickets = sum(self.bookings.values()) sorted_customers = sorted(self.bookings.items()) summary_list = [] summary_list.append(str(total_tickets)) for customer, tickets in sorted_customers: if tickets > 0: summary_list.append(f\\"{customer}: {tickets}\\") return summary_list"},{"question":"Given an array arr of size n, you need to rearrange the array such that every second element is greater than the previous element, and every second element is smaller than the previous element. This pattern should alternate for the entire array. Specifically, for even indexed elements, they should be smaller than their next element (if it exists), and for odd indexed elements, they should be greater than their next element (if it exists). Example 1: Input: n = 6 arr[] = {3, 5, 2, 1, 6, 4} Output: 3 5 1 6 2 4 Explanation: The rearranged array should put elements in an order such that every second element is greater or smaller than its neighbors in an alternating fashion. Example 2: Input: n = 7 arr[] = {10, 20, 30, 40, 50, 60, 70} Output: 10 30 20 50 40 70 60 Explanation: The rearranged array ensures the given pattern. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rearrangeAltPattern() which takes the array arr[] and its size n as inputs and returns the array rearranged in the required pattern. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 0 <= arr[i] <= 10^6","solution":"def rearrangeAltPattern(arr, n): Rearranges the array such that every second element is greater than the previous element, and every second element is smaller than the previous element in an alternating fashion. for i in range(n - 1): # if index is even, ensure arr[i] < arr[i+1] if (i % 2 == 0 and arr[i] > arr[i+1]) or (i % 2 == 1 and arr[i] < arr[i+1]): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Given an integer n, generate the nth term of the following sequence: 2, 5, 10, 17, 26, ... The nth term of this sequence is given by the formula T_{n} = n^2 + 1. Example 1: Input: n = 1 Output: 2 Explanation: The 1st term in the sequence is 1^2 + 1 = 2. Example 2: Input: n = 2 Output: 5 Explanation: The 2nd term in the sequence is 2^2 + 1 = 5. Example 3: Input: n = 4 Output: 17 Explanation: The 4th term in the sequence is 4^2 + 1 = 17. Your Task: You don\'t need to read input or print anything. Your task is to complete the function getNthTerm() which takes an Integer n as input and returns the nth term of the sequence. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5","solution":"def getNthTerm(n): Returns the nth term of the sequence defined by T_{n} = n^2 + 1. :param n: Integer representing the position in the sequence (1-indexed) :return: Integer representing the nth term of the sequence return n ** 2 + 1"},{"question":"Given a string S. Check whether the string is a palindrome or not using a recursive approach. Example 1: Input: S = \\"madam\\" Output: Yes Example 2: Input: S = \\"hello\\" Output: No Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isPalindrome()` which takes the string S as input and returns \\"Yes\\" if the string is a palindrome and \\"No\\" if it is not using a recursive approach. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N) for the recursive stack. Constraints: 1 <= |S| <= 10^3","solution":"def isPalindrome(S): Checks if a given string S is a palindrome using a recursive approach. def check_palindrome(start, end): # Base case: if start >= end, it\'s a palindrome if start >= end: return True # Recursive case: check if characters at start and end are the same if S[start] != S[end]: return False return check_palindrome(start + 1, end - 1) # Start the recursion from the full length of the string result = check_palindrome(0, len(S) - 1) return \\"Yes\\" if result else \\"No\\""},{"question":"Two cities, Town A and Town B, are connected by a series of roads. Each road has a toll value associated with it. The road network forms a tree (an acyclic connected graph). Each city has a unique ID between 1 and n. There are q queries, each asking for the minimum toll value along the longest path between two cities in the road network. There are two types of operations: - 1 u v w: Add a new road between cities u and v with toll w. - 2 x y: Print the minimum toll value along the longest path from city x to city y. Input The first line contains three integers n, q, seed, vmax (2 ≤ n ≤ 100000, 1 ≤ q ≤ 100000, 0 ≤ seed < 109 + 7, 1 ≤ vmax ≤ 109). Initial roads are generated using the following pseudo code: def rnd(): ret = seed seed = (seed * 7 + 13) mod 1000000007 return ret for i = 1 to n-1: u = (rnd() mod i) + 1 v = i + 1 w = (rnd() mod vmax) + 1 add_road(u, v, w) The first n - 1 lines of input define the initial (tree) roads. Each of the next q lines contains one operation. Output For each operation of type 2, output a line containing the answer. Examples Input 5 3 5 10 Output 3 4 3 Input 4 2 2 7 Output 2 5 Notes In the first example, the initial roads and their tolls are: 1 - 2 with toll 3 1 - 3 with toll 3 2 - 4 with toll 1 3 - 5 with toll 4 Executed operations are: - 2 4 5: The longest path from city 4 to city 5 is 4 → 2 → 1 → 3 → 5 with toll values [1, 3, 3, 4]. The minimum toll along this path is 1. - 1 2 3 4: Add a road between city 2 and city 3 with toll 4. - 2 1 3: The longest path from city 1 to city 3 is through roads either 1 → 2 → 3 or 1 → 3. In both cases, the toll values encountered are [3] and [4], respectively. Thus, the minimum toll value is 3.","solution":"import heapq import sys from collections import defaultdict from heapq import heappush, heappop class RoadNetwork: def __init__(self, n): self.tree = defaultdict(list) self.n = n def add_road(self, u, v, w): self.tree[u].append((v, w)) self.tree[v].append((u, w)) def query(self, u, v): visited = [False] * (self.n + 1) pq = [] heappush(pq, (0, u, [])) while pq: min_toll, node, path_tolls = heappop(pq) if visited[node]: continue visited[node] = True path_tolls = path_tolls + [min_toll] if node == v: return min(path_tolls[1:]) for neighbor, toll in self.tree[node]: if not visited[neighbor]: heappush(pq, (toll, neighbor, path_tolls)) return -1 def process_queries(n, q, roads, operations): road_network = RoadNetwork(n) for u, v, w in roads: road_network.add_road(u, v, w) results = [] for op in operations: if op[0] == 1: _, u, v, w = op road_network.add_road(u, v, w) elif op[0] == 2: _, x, y = op results.append(road_network.query(x, y)) return results"},{"question":"You have been tasked with designing a system to rearrange the schedule of television shows such that the total number of overlaps between shows is minimized. Each show has a start time and an end time. Two shows overlap if one show starts before another show ends. Write a function that takes a list of shows, where each show is represented as a tuple (start_time, end_time), and rearrange them in a way that minimizes the total number of overlapping shows. Return the rearranged list of shows. -----Function Signature----- ```python def minimize_overlaps(shows: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` -----Input Format----- - A list of N shows, where each show is represented as a tuple (start_time, end_time). - 0 leq text{start_time} < text{end_time} leq 10^6 -----Output Format----- - A rearranged list of tuples representing the schedule of television shows such that the total number of overlaps is minimized. -----Constraints----- 1 leq N leq 10^4 -----Example Input----- [(1, 5), (2, 3), (4, 7), (6, 8)] -----Example Output----- [(2, 3), (1, 5), (4, 7), (6, 8)] -----Explanation----- In the example input, the original list of shows has overlaps between the following pairs: - (1, 5) and (2, 3) - (4, 7) and (6, 8) In the rearranged list, we first schedule the show (2, 3), which leaves time for (1, 5) and so on, minimizing the total overlaps. Note: The exact order might vary as long as the number of overlaps is minimized.","solution":"from typing import List, Tuple def minimize_overlaps(shows: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Rearrange shows to minimize the total number of overlapping shows. # Sort the shows by their end time; if end time is the same, by start time shows.sort(key=lambda x: (x[1], x[0])) # Initialize the solution list with the first show result = [shows[0]] # Track the end time of the last added show in the result list last_end_time = shows[0][1] # Loop over the sorted shows starting from the second one for i in range(1, len(shows)): # Only add the show if it doesn\'t overlap with the last added show if shows[i][0] >= last_end_time: result.append(shows[i]) last_end_time = shows[i][1] return result"},{"question":"A palindrome is a string that reads the same forwards and backwards. Given a string, you need to determine if it can be turned into a palindrome by rearranging its characters. If it is possible, print YES. Otherwise, print NO. -----Input----- The first line contains the single integer t (1 le t le 100) — the number of test cases. The first and only line of each test case contains a string s (1 le |s| le 100) — the string to be evaluated. The string s consists only of lowercase Latin letters. -----Output----- For each test case, if the string can be rearranged to form a palindrome, print YES. Otherwise, print NO. You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answer). -----Examples----- Input 4 aabb abc racecar aabbccdd Output YES NO YES YES -----Note----- In the first test case, the string \\"aabb\\" can be rearranged to form \\"abba\\" or \\"baab\\", both of which are palindromes. In the second test case, the string \\"abc\\" cannot be rearranged to form a palindrome. In the third test case, the string \\"racecar\\" is already a palindrome. In the fourth test case, the string \\"aabbccdd\\" can be rearranged to form \\"abcdcdba\\" or other variations that are palindromes.","solution":"def can_form_palindrome(s): Determines if the string `s` can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency return odd_count <= 1 def process_test_cases(t, test_cases): Processes multiple test cases and returns results for each case. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tom and Jerry are playing a fun dice game. The game consists of rolling a six-sided die n times. Tom wants to keep track of how many times each possible outcome (1 through 6) appears, and determine which outcome appears the most. If there is a tie between two or more outcomes, Tom wants to know the smallest die number that appears the most frequently. Can you help Tom by implementing a program that accomplishes this? -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of times the die is rolled. The second line contains n space-separated integers, each an outcome of the die roll (an integer between 1 and 6). -----Output----- Print a single integer, the face of the die that appears the most frequently. If there\'s a tie, print the smallest one. -----Examples----- Input 8 1 3 4 3 5 6 6 3 Output 3 Input 5 4 4 4 5 5 Output 4 Input 6 1 2 2 3 3 1 Output 1 -----Note----- In the first sample, the outcome \\"3\\" appears 3 times, which is the most frequent, so the answer is \\"3\\". In the second sample, both outcomes \\"4\\" and \\"5\\" appear 3 times, but since \\"4\\" is smaller, the answer is \\"4\\". In the third sample, the outcomes \\"1\\", \\"2\\", and \\"3\\" each appear 2 times, and thus the smallest outcome \\"1\\" is the answer.","solution":"def most_frequent_die_face(n, rolls): Returns the die face that appears the most frequently. If there\'s a tie, returns the smallest one. from collections import Counter # Count the frequency of each die face counter = Counter(rolls) # Find the die face with the maximum frequency # In case of tie, min selects the smallest die face most_frequent = min((face for face in counter), key=lambda face: (-counter[face], face)) return most_frequent"},{"question":"# Reverse Sum Game You are given a number `n` and a string `f` which represents a directive, either \\"sum\\" or \\"reverse\\". - If `f` is \\"sum\\", your task is to return the sum of all integers from 1 to `n`. - If `f` is \\"reverse\\", your task is to return a string which is the reverse of the digits in the number `n`. # Input - An integer `n` (1 ≤ n ≤ 10^9). - A string `f` which can be either \\"sum\\" or \\"reverse\\". # Output - If `f` is \\"sum\\", output the sum of all integers from 1 to `n`. - If `f` is \\"reverse\\", output a string which is the reverse of the digits in `n`. # Example ```python # Example 1 n = 10 f = \\"sum\\" # Output: 55 # Example 2 n = 12345 f = \\"reverse\\" # Output: \\"54321\\" ``` # Note Make sure your code handles large number efficiently and only performs the necessary operation based on the directive.","solution":"def reverse_sum_game(n, f): If f is \\"sum\\", returns the sum of all integers from 1 to n. If f is \\"reverse\\", returns the reverse of digits in n as a string. if f == \\"sum\\": return n * (n + 1) // 2 elif f == \\"reverse\\": return str(n)[::-1] else: return None"},{"question":"You are given an array of integers where each integer occurs an even number of times, except for exactly one integer which occurs an odd number of times. Your task is to identify this integer. For example, in the array [1, 2, 3, 2, 3, 1, 3], the number 3 occurs three times, which is an odd number of times, while every other number occurs an even number of times. Function Signature: ```python def find_odd_occurrence(arr: List[int]) -> int: ``` -----Input----- - A list of integers with length between 1 and 10^5. - Each integer in the array is between -10^9 and 10^9 inclusive. It is guaranteed that exactly one integer occurs an odd number of times. -----Output----- - Return the integer that occurs an odd number of times. -----Examples----- Input: [1, 2, 3, 2, 3, 1, 3] Output: 3 Input: [4, 5, 4, 5, 4] Output: 4 Input: [-1, -1, -1] Output: -1 Input: [10, 15, 10] Output: 15","solution":"from typing import List def find_odd_occurrence(arr: List[int]) -> int: Returns the integer that occurs an odd number of times in the array. result = 0 for num in arr: result ^= num return result"},{"question":"A network of cities and highways can be represented as a graph with n nodes and m edges. Each node represents a city, and each edge represents a bidirectional highway with an associated travel cost. You are starting in city 1 and want to visit city n with the least cost. However, you need to visit exactly one specified city on your way to city n. Given the costs of the highways and the required intermediate city, determine the minimum travel cost from city 1 to city n through the specified intermediate city. *Input:* The first line contains integers n, m, and k (2 leq n leq 10^5, 1 leq m leq 2 times 10^5, 2 leq k leq n) — the number of cities, the number of highways, and the index of the intermediate city. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9) — indicating that there is a highway between city u and city v with a travel cost of w. *Output:* Print the minimum travel cost to get from city 1 to city n through city k. If there is no such path, print `-1`. *Examples:* Input: 6 7 4 1 2 1 2 3 2 3 6 3 1 3 2 2 4 4 4 5 2 5 6 3 Output: 10 Input: 4 4 3 1 2 5 2 3 5 3 4 5 1 4 20 Output: 15 *Note:* In the first example, the optimal path is to travel from city 1 to city 2, then to city 4, then to city 5, and finally to city 6. The total cost is 1 + 4 + 2 + 3 = 10.","solution":"import heapq def dijkstra(start, graph, n): Uses Dijkstra\'s algorithm to find the shortest paths from a starting node to all other nodes in a graph. Returns a list of minimum distances. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def min_cost_through_intermediate(n, m, k, highways): Computes the minimum travel cost from city 1 to city n through the specified intermediate city k. graph = [[] for _ in range(n + 1)] for u, v, w in highways: graph[u].append((v, w)) graph[v].append((u, w)) # Get shortest distances from city 1 dist_from_1 = dijkstra(1, graph, n) # Get shortest distances from intermediate city k dist_from_k = dijkstra(k, graph, n) # Minimum cost to travel from city 1 to city n through city k result = dist_from_1[k] + dist_from_k[n] if result >= float(\'inf\'): return -1 return result"},{"question":"Given a string s and a target substring t, determine the minimum number of character replacements required in s such that s contains at least one occurrence of t as a substring. -----Input----- The first line contains the string s (1 ≤ |s| ≤ 100). The second line contains the target substring t (1 ≤ |t| ≤ |s|). Both strings s and t are composed of only lowercase English letters. -----Output----- Print the minimum number of character replacements required. -----Examples----- Input abcde cda Output 1 Input abcdxyz wxyz Output 1 -----Note----- In the first example, replacing the character \'b\' in s with \'d\' will yield the string \\"acdce\\", which contains \\"cda\\" as a substring. Hence, the minimum number of replacements required is 1. In the second example, replacing \'a\' with \'w\' will yield the string \\"wbcdxyz\\", which contains \\"wxyz\\" as a substring. Hence, the minimum number of replacements required is 1.","solution":"def min_replacements_to_substring(s, t): Determine the minimum number of character replacements required in s such that s contains at least one occurrence of t as a substring. min_replacements = float(\'inf\') # Iterate over each possible substring of `s` with length equal to `t` for i in range(len(s) - len(t) + 1): current_replacements = 0 # Compare the substring of s with t for j in range(len(t)): if s[i + j] != t[j]: current_replacements += 1 # Update the minimum replacements if the current one is lower min_replacements = min(min_replacements, current_replacements) return min_replacements"},{"question":"Given a list of integers, you need to reorder the list such that all even integers come before all the odd integers. Both even and odd integers should maintain their relative order in the output. For example, given the input list `[1, 3, 2, 4, 7, 6]`, the correct output would be `[2, 4, 6, 1, 3, 7]`. The order of even numbers (2, 4, 6) and odd numbers (1, 3, 7) is preserved as they appeared in the original list. Implement a function `reorder_even_before_odd(arr)` that takes a single argument: - `arr`: A list of non-negative integers (0 ≤ arr[i] ≤ 10^9 for 0 ≤ i < n) and returns a list of integers where all even integers come before all odd integers while maintaining the relative order of even and odd integers as they appeared in the input list. **Input Format** - A single integer n representing the size of the list. - A list of n integers separated by spaces. **Output Format** - A single list of integers in the desired order. **Constraints** - 1 ≤ n ≤ 10^5 **Sample Input 00** 6 1 3 2 4 7 6 **Sample Output 00** 2 4 6 1 3 7 **Sample Input 01** 4 4 2 3 1 **Sample Output 01** 4 2 3 1 **Function Signature** ```python def reorder_even_before_odd(arr: List[int]) -> List[int]: pass ```","solution":"from typing import List def reorder_even_before_odd(arr: List[int]) -> List[int]: Reorder the list such that all even integers come before all odd integers while maintaining the relative order of even and odd integers as they appeared in the original list. :param arr: A list of non-negative integers :return: A list of integers with all evens before all odds even_numbers = [num for num in arr if num % 2 == 0] odd_numbers = [num for num in arr if num % 2 != 0] return even_numbers + odd_numbers"},{"question":"Problem E: Rearrange Array to Maximize Distance Given an array of unique integers, your task is to rearrange the elements such that the minimum distance between any two adjacent elements after rearrangement is maximized. The minimum distance between two adjacent elements a and b is defined as lvert a - b rvert. Input The input consists of a single test case in the following format: n a_1 a_2 a_3 ... a_n Here, n is the number of elements in the array satisfying 2 leq n leq 10^5. Each a_i is an integer between -10^6 and 10^6, inclusive. Output Output the rearranged array such that the minimum distance between any two adjacent elements is maximized. If there are multiple solutions, any will be accepted. Example Input 5 4 3 9 1 -7 Output -7 1 9 3 4 Explanation: In this example, the rearranged array -7, 1, 9, 3, 4 maximizes the minimum distance between any two adjacent elements. The minimum distances between any two adjacent elements are lvert -7 - 1 rvert = 8, lvert 1 - 9 rvert = 8, lvert 9 - 3 rvert = 6, and lvert 3 - 4 rvert = 1. The minimum distance here is 1, and we can\'t increase it further by rearranging. Hence, this is one valid solution.","solution":"def rearrange_array(arr): arr.sort() n = len(arr) result = [0] * n left, right = 0, n-1 for i in range(n): if i % 2 == 0: result[i] = arr[left] left += 1 else: result[i] = arr[right] right -= 1 return result # Example Usage # n = 5 # arr = [4, 3, 9, 1, -7] # rearranged = rearrange_array(arr) # print(rearranged) # Example output: [-7, 4, 1, 9, 3]"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. -----Input----- The input consists of a binary tree represented as a string in the following format: \\"node_value(left_subtree)(right_subtree)\\", where \\"left_subtree\\" and \\"right_subtree\\" follow the same format. For example, the tree: ``` 1 / 2 3 / 4 5 ``` can be represented as: \\"1(2(4)(5))(3)\\" A tree with a single node: ``` 1 ``` can be represented as: \\"1\\" An empty tree is represented by an empty string: \\"\\" Note: - `node_value` is an integer. - Subtrees enclosed in parentheses may also be empty, signifying the absence of a left or right subtree. -----Output----- Return \\"Yes\\" if the tree is height-balanced and \\"No\\" otherwise. -----Examples----- **Example 1:** Input \\"1(2(4)(5))(3)\\" Output \\"Yes\\" **Example 2:** Input \\"1(2(4()()))(3())\\" Output \\"No\\" **Example 3:** Input \\"\\" Output \\"Yes\\" **Example 4:** Input \\"10(5()(7))(15(12(11)(13))(20))\\" Output \\"Yes\\"","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def parse_tree(data): def parse_helper(index): if index >= len(data) or data[index] == \')\': return None, index start = index while index < len(data) and (data[index].isdigit() or data[index] in \'-+\'): index += 1 node = Node(int(data[start:index])) if index < len(data) and data[index] == \'(\': node.left, index = parse_helper(index + 1) if index < len(data) and data[index] == \'(\': node.right, index = parse_helper(index + 1) if index < len(data) and data[index] == \')\': index += 1 return node, index if not data: return None root, _ = parse_helper(0) return root def is_balanced(root): def check_balance(node): if not node: return (True, 0) left_balanced, left_height = check_balance(node.left) right_balanced, right_height = check_balance(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 height = 1 + max(left_height, right_height) return balanced, height balanced, _ = check_balance(root) return balanced def check_height_balanced(tree_repr): root = parse_tree(tree_repr) return \\"Yes\\" if is_balanced(root) else \\"No\\""},{"question":"In a galaxy far, far away, there is an intergalactic postal service that delivers packages between various planets. Each package has a designated sender planet and a recipient planet. The postal service has a fleet of starships, each capable of carrying a certain maximum total weight of packages. Each package has a weight associated with it. The postal service uses an algorithm to distribute packages among the available starships so that each starship can carry as many packages as possible without exceeding its maximum weight capacity. The goal is to minimize the number of starships required to deliver all packages. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 10^4), where n is the number of packages and m is the number of starships. The second line contains n integers, where the i^{th} integer represents the weight of the i^{th} package. The third line contains m integers, where the j^{th} integer represents the maximum weight capacity of the j^{th} starship. -----Output----- Print a single integer representing the minimum number of starships required to carry all packages. If it is impossible to carry all packages with the given starships, print -1. -----Examples----- Sample Input 1: 5 3 5 10 3 7 8 15 10 20 Sample Output 1: 2 Sample Input 2: 4 2 2 2 2 3 3 3 Sample Output 2: -1","solution":"def min_starships_needed(n, m, package_weights, starship_caps): package_weights.sort(reverse=True) starship_caps.sort(reverse=True) used_starships = [0] * m for weight in package_weights: for i in range(m): if used_starships[i] + weight <= starship_caps[i]: used_starships[i] += weight break else: return -1 count = 0 for used in used_starships: if used > 0: count += 1 return count"},{"question":"Write a function that encodes a string using the run-length encoding (RLE) algorithm. The run-length encoding is a form of data compression where consecutive duplicate characters are replaced with a single instance of the character followed by the number of repeat occurrences. If a character appears only once, it is represented as the character itself followed by \'1\'. # Important notes: - The function should preserve the case of the characters (i.e., \'A\' and \'a\' are considered different characters). - The output should be a string. # Examples: ```python rle_encode(\\"aaabbbbcaa\\") = \\"a3b4c1a2\\" rle_encode(\\"xyz\\") = \\"x1y1z1\\" rle_encode(\\"abca\\") = \\"a1b1c1a1\\" rle_encode(\\"\\") = \\"\\" ```","solution":"def rle_encode(s: str) -> str: Encodes the input string using Run-Length Encoding (RLE) algorithm. Parameters: s (str): A string to be encoded. Returns: str: The run-length encoded string. if not s: return \\"\\" encoded_str = [] curr_char = s[0] count = 1 for char in s[1:]: if char == curr_char: count += 1 else: encoded_str.append(f\\"{curr_char}{count}\\") curr_char = char count = 1 encoded_str.append(f\\"{curr_char}{count}\\") # Don\'t forget the last run return \'\'.join(encoded_str)"},{"question":"Given a string made up of solely alphabetical characters, determine the minimum number of operations required to convert the string into a palindrome. You can only perform the following operation: select any character and replace it with another character. Input The input will consist of several test cases, each of which is a single line containing a string of up to 10^5 alphabetical characters. The end of input is denoted by a line containing a single asterisk (*) character. Output For each test case, print its case number and the minimum number of operations required to convert the string into a palindrome. Example Input abc race * Output Case 1: 2 Case 2: 1 Explanation For the first example, the string \\"abc\\" can be converted into a palindrome by changing \'a\' to \'c\' and \'b\' to \'b\' (thus the result is \\"cbc\\"), which requires 2 operations. In the second example, \\"race\\" can be converted into \\"racecar\\" by changing \'r\' to \'r,\' \'a\' to \'a,\' \'c\' to \'e,\' and the last \'e\' to \'e\' (in the middle), which requires only 1 operation.","solution":"def min_operations_to_palindrome(s): Computes the minimum number of operations required to convert the string `s` into a palindrome. n = len(s) ops = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: ops += 1 return ops def process_input(): import sys input = sys.stdin.read data = input().splitlines() case_number = 1 results = [] for line in data: if line == \'*\': break operations = min_operations_to_palindrome(line) results.append(f\\"Case {case_number}: {operations}\\") case_number += 1 return results def main(): results = process_input() for result in results: print(result)"},{"question":"You are given a binary tree rooted at node 1 with n nodes. Each edge in the tree has a weight. Your task is to process multiple queries on this tree. Each query asks you to find the maximum weight of edges on the path between two given nodes. -----Input----- The first line contains a single integer n (2 le n le 10^5) — the number of nodes in the tree. Each of the next n-1 lines contains three integers u, v, and w (1 le u, v le n; 1 le w le 10^9), where u and v are the nodes connected by an edge with weight w. The next line contains a single integer q (1 le q le 10^5) — the number of queries. Each of the next q lines contains two integers a_i and b_i (1 le a_i, b_i le n) — the nodes between which you need to find the maximum weight of the edges in the path. -----Output----- For each query, output a single integer — the maximum weight of the edges on the path between a_i and b_i. -----Examples----- Input 5 1 2 4 1 3 2 2 4 7 2 5 1 3 4 5 3 5 1 4 Output 7 4 7 -----Note----- In the first query, the path from node 4 to node 5 goes through node 2. The maximum weight of an edge along this path is 7. In the second query, the path from node 3 to node 5 goes through node 1 and node 2. The maximum weights along this path are 2 and 4, so the maximum is 4. In the third query, the path from node 1 to node 4 goes through node 2, and the maximum weight on this path is 7.","solution":"import sys from collections import defaultdict, deque sys.setrecursionlimit(200000) class LCA: def __init__(self, n, root=1): self.n = n self.log = 0 while (1 << self.log) <= n: self.log += 1 self.parent = [[-1] * (self.log) for _ in range(n+1)] self.max_edge = [[-1] * (self.log) for _ in range(n+1)] self.depth = [-1] * (n+1) self.graph = defaultdict(list) self.root = root def add_edge(self, u, v, w): self.graph[u].append((v, w)) self.graph[v].append((u, w)) def dfs(self, node, par, d, w): self.parent[node][0] = par self.max_edge[node][0] = w self.depth[node] = d for neighbor, weight in self.graph[node]: if neighbor != par: self.dfs(neighbor, node, d + 1, weight) def preprocess(self): self.dfs(self.root, -1, 0, -1) for j in range(1, self.log): for i in range(1, self.n + 1): if self.parent[i][j-1] != -1: self.parent[i][j] = self.parent[self.parent[i][j-1]][j-1] self.max_edge[i][j] = max(self.max_edge[i][j-1], self.max_edge[self.parent[i][j-1]][j-1]) def get_max_edge(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] max_w = -1 for i in range(self.log): if (diff >> i) & 1: max_w = max(max_w, self.max_edge[u][i]) u = self.parent[u][i] if u == v: return max_w for i in range(self.log - 1, -1, -1): if self.parent[u][i] != self.parent[v][i]: max_w = max(max_w, self.max_edge[u][i]) max_w = max(max_w, self.max_edge[v][i]) u = self.parent[u][i] v = self.parent[v][i] max_w = max(max_w, self.max_edge[u][0]) max_w = max(max_w, self.max_edge[v][0]) return max_w def solve(n, edges, queries): lca = LCA(n) for u, v, w in edges: lca.add_edge(u, v, w) lca.preprocess() results = [] for a, b in queries: results.append(lca.get_max_edge(a, b)) return results # Example usage n = 5 edges = [ (1, 2, 4), (1, 3, 2), (2, 4, 7), (2, 5, 1) ] queries = [ (4, 5), (3, 5), (1, 4) ] print(solve(n, edges, queries))"},{"question":"Lena is organizing a charity event and has gathered n items. Each item i has a value of v_i dollars. To maximize the fundraiser, Lena wants to divide all the items into two groups such that the total value of the items in both groups is as equal as possible. Write a program that determines the minimum difference in total value between the two groups. -----Input----- The first line contains an integer n (1 le n le 100) — the number of items. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 2000) — the value of each item. -----Output----- Output a single integer — the minimum possible difference between the total value of the two groups. -----Examples----- Input 4 1 2 3 4 Output 0 Input 3 8 3 5 Output 0 -----Note----- In the first example, Lena can divide the items into two groups as follows: {1, 4} and {2, 3}, each having a total value of 5. Thus, the minimum difference is |5 - 5| = 0. In the second example, Lena can divide the items into two groups as follows: {8} and {3, 5}, each having a total value of 8. Thus, the minimum difference is |8 - 8| = 0.","solution":"def min_difference(n, values): Returns the minimum possible difference between the total value of the two groups. total_sum = sum(values) dp = [False] * (total_sum // 2 + 1) dp[0] = True for value in values: for j in range(total_sum // 2, value - 1, -1): dp[j] |= dp[j - value] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i # Examples in the prompt print(min_difference(4, [1, 2, 3, 4])) # Output: 0 print(min_difference(3, [8, 3, 5])) # Output: 0"},{"question":"The annual hacker convention is in full swing, and one of the events is a competitive coding challenge involving bitwise operations. A team of enthusiasts is tasked with an interesting problem. In this challenge, the participants are given an array of integers and are required to find a subarray such that the bitwise AND of all the integers in that subarray is the maximum among all possible subarrays of the given array. A subarray is a contiguous portion of an array. Given an array of positive integers, determine the subarray for which the bitwise AND of its elements is maximized, and return the value of the AND operation for that subarray. Input - The first line of input contains an integer `n`, the number of elements in the array (1 ≤ n ≤ 10^5). - The second line contains `n` space-separated positive integers representing the elements of the array (1 ≤ arr[i] ≤ 10^9). Output - Print a single integer, the maximum value of the bitwise AND operation among all possible subarrays. Examples Input 5 1 2 3 4 5 Output 5 Input 4 12 15 7 9 Output 12 Input 3 1 1 1 Output 1 Note The maximum AND of subarrays in the first example occurs with the single element subarray [5], where the AND value is 5. In the second example, the subarray [12] yields the maximum AND value of 12.","solution":"def max_bitwise_and(n, arr): Finds the maximum bitwise AND value among all possible subarrays of the given array. max_and = 0 for num in arr: max_and = max(max_and, num) return max_and"},{"question":"The National Park Services need to find the largest contiguous subsequence of trees where each tree has an optimal level of sunlight exposure. Each tree in the park is represented by an array of integers, where each integer indicates the level of sunlight exposure that a tree currently receives. Your task is to find the length of the longest contiguous subsequence of trees in which each tree has exactly the optimal level of sunlight exposure specified. For simplicity, we assume the optimal level of sunlight exposure is 1. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case consists of two lines. The first line contains an integer N, the number of trees in the park. The second line contains N space-separated integers A[1], A[2], ..., A[N], where each integer represents the sunlight exposure level of a tree. -----Output----- For each test case, output a single line containing the length of the longest contiguous subsequence of trees that receive the optimal sunlight exposure level. -----Constraints----- 1 ≤ T ≤ 10000 1 ≤ N ≤ 100000 The sum of values of N in each test file does not exceed 1000000 0 ≤ A[i] ≤ 100 -----Example----- Input: 2 5 0 1 1 0 1 7 1 1 0 2 1 1 1 Output: 2 3 -----Explanation----- Case 1. In the first sequence, the longest contiguous subsequence of trees with optimal sunlight exposure levels is of length 2 (trees with indices 2 and 3). Case 2. In the second sequence, the longest contiguous subsequence of trees with optimal sunlight exposure levels is of length 3 (trees with indices 5, 6, and 7).","solution":"def longest_contiguous_optimal_subsequence(T, test_cases): Finds the length of the longest contiguous subsequence of trees with optimal sunlight exposure level (1). Parameters: T (int): Number of test cases. test_cases (list of tuples): List of test cases where each tuple contains (N (int), A (list of int)). Returns: list of int: List containing the length of the longest contiguous subsequence for each test case. results = [] optimal_level = 1 for N, A in test_cases: max_length = 0 current_length = 0 for sunlight in A: if sunlight == optimal_level: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 results.append(max_length) return results"},{"question":"You are invited to solve a coding challenge with your friend, who is also a talented coder. Let\'s see who can come up with the answer first. Given an array of n integers, find the contiguous subarray of length exactly k that has the maximum possible sum. A subarray is defined as a contiguous portion of the array. Your task is to write a program that computes this maximum sum. INPUT The input consists of two lines: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10000), where n is the number of integers in the array, and k is the length of the subarray. - The second line contains n space-separated integers representing the elements of the array (−10^5 ≤ array[i] ≤ 10^5). OUTPUT Print a single integer — the maximum possible sum of any contiguous subarray of length k. SAMPLE INPUT 8 3 1 2 5 2 8 1 5 2 SAMPLE OUTPUT 15 Explanation The subarray with the maximum sum of length 3 is [5, 2, 8], and the sum is 5 + 2 + 8 = 15.","solution":"def max_subarray_sum(n, k, array): Finds the maximum sum of any contiguous subarray of length k. Parameters: n (int): The number of elements in the array. k (int): The length of the subarray. array (List[int]): The list of integers. Returns: int: The maximum possible sum of any contiguous subarray of length k. # Calculate the sum of the first k elements max_sum = current_sum = sum(array[:k]) # Use sliding window to compute the sum of subarrays for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"In a distant land, there is a magical tree that grows a series of fruits. Each fruit is characterized by a weight and a sweetness level. The magical properties of the tree allow you to perform the following operation: You can repeatedly choose any two different fruits and merge them into a new fruit. The weights of the new fruit is the sum of the weights of the two chosen fruits, and the sweetness of the new fruit is the product of the sweetness levels of the two chosen fruits. You\'re given the initial list of fruits with their weights and sweetness levels. Your task is to determine the maximum total sweetness you can achieve by repeatedly merging fruits. Note: the total sweetness is defined as the sum of the sweetness levels of the final remaining fruits. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of fruits. The next n lines contain two integers each, w_i and s_i (1 ≤ w_i ≤ 1000, 1 ≤ s_i ≤ 1000) — the weight and sweetness of the i-th fruit. Output Print a single integer — the maximum total sweetness that can be achieved by repeatedly merging the fruits. Examples Input 3 1 3 2 1 4 2 Output 12 Explanation: Initially we have fruits with sweetness levels 3, 1, and 2. If we merge the fruits with sweetness 3 and 1, the new sweetness will be 3 * 1 = 3. We are left with fruits of sweetness levels 3 and 2, merging these gives 6 (3 * 2). Finally, adding 2 (from the last merged fruit) results in total sweetness = 3 + 2 + 6 = 12. Input 4 5 5 7 3 2 4 9 2 Output 188 Explanation: If we merge the fruits with sweetness levels 5 and 3, the new sweetness is 15. Then, if we merge the fruits with sweetness levels 4 and 2, the new sweetness is 8. Next, we can merge fruits of sweetness 15 and 8 to get 120. Finally, adding 2 (from the first remaining fruit) results in total sweetness = 15 + 8 + 120 + 45 (5*9) = 188. Note: Focus on trying different sequences of merging to maximize the final sweetness result.","solution":"def max_total_sweetness(fruits): from functools import reduce from operator import mul # Extract the sweetness levels from the fruits sweetness_levels = [s for w, s in fruits] # Function to calculate the total sweetness by multiplying all sweets total_sweetness = reduce(mul, sweetness_levels, 1) return total_sweetness # Main function to handle input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) fruits = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] result = max_total_sweetness(fruits) print(result)"},{"question":"A string S is called *balanced* if the count of opening and closing brackets in every valid prefix of S does not exceed a given limit K. You are given a string S of size N consisting only of opening and closing brackets \'(\' and \')\', and an integer K. Please determine if S is balanced. Note: A valid prefix is a prefix that doesn\'t have more closing brackets than opening brackets at any point. ------ Input Format ------ - The first line of the input contains an integer T - the number of test cases. The test cases then follow. - The first line of each test contains two integers N and K - the size of the string and the limit respectively. - The second line of each test contains a string S. ------ Output Format ------ For each test case, output on a single line YES if S is balanced, or NO otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{4} 1 ≤ K ≤ N S consists only of characters \'(\' and \')\' ----- Sample Input 1 ------ 3 6 2 (()()) 4 3 ())( 10 1 (()(()(()) ----- Sample Output 1 ------ YES NO NO ------ Explanation 1 ------ - Test case 1: Every prefix has at most 2 unmatched \'(\' or \')\' at any point. - Test case 2: The prefix \\"())\\" has excessive unmatched closing brackets. - Test case 3: The prefix \\"(()(()\\" has more than 1 unmatched \'(\'.","solution":"def is_balanced(N, K, S): balance = 0 for char in S: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: # Invalid prefix return \\"NO\\" if abs(balance) > K: return \\"NO\\" if balance == 0: return \\"YES\\" else: return \\"NO\\" def process_input(T, test_cases): results = [] for case in test_cases: N, K, S = case results.append(is_balanced(N, K, S)) return results"},{"question":"You are given an array of positive integers representing the amount of money in each house, and a robber who moves along the houses robbing them. However, the robber cannot rob two consecutive houses because it will alert the police. The task is to determine the maximum amount of money the robber can rob without robbing two consecutive houses. Write a function \'rob\' that takes an array of integers as input and returns the maximum amount of money the robber can rob. The function prototype is: ```python def rob(nums: List[int]) -> int: ``` **Example 1:** ``` Input: [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total money robbed = 1 + 3 = 4. ``` **Example 2:** ``` Input: [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1). Total money robbed = 2 + 9 + 1 = 12. ``` **Constraints:** - 0 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"from typing import List def rob(nums: List[int]) -> int: Returns the maximum amount of money the robber can rob without robbing two consecutive houses. if not nums: return 0 n = len(nums) if n == 1: return nums[0] dp = [0] * n dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1]"},{"question":"Farmer John has a series of N plants that he needs to water daily. Each plant requires a specific amount of water in liters, given by the array a_1, a_2, ..., a_N. Farmer John has an irrigation system that can provide an unlimited amount of water, but only if it\'s distributed evenly among the plants each day. This means that every plant receives the same amount of water each day. Since water resources are precious, Farmer John wants to minimize the number of days required to water all the plants such that each plant gets exactly the water it needs. Each day, the system can be configured to deliver any integer amount of water, k, where k liters are delivered to each plant uniformly. If a plant receives more water than it needs, the excess water is wasted. Determine the minimum number of days required to water all plants exactly, with each plant being watered fully on some day and not using fractional amounts. -----Input----- - The first line of input contains a single integer T, the number of test cases. The T test cases follow. - The first line of each test case contains the integer N, the number of plants. - The second line contains N integers, a_1, a_2, ..., a_N representing the amount of water each plant requires. -----Output----- For each test case, print a single line containing one integer, the minimum number of days needed to water all the plants exactly. -----Constraints----- - 1 le T le 10^3 - 1 le N le 10^5 - 1 le a_i le 10^9 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 4 10 15 20 25 3 7 14 21 -----Example Output----- 5 3 Explanation: In the first test case, the optimal water distribution can be 1 day of 10 liters, 1 day of 5 liters, and 3 additional days to meet the remaining requirements of individual plants. In the second test case, you can water all plants exactly in 3 days by configuring the system to 7 liters on each day.","solution":"import math from collections import Counter def min_watering_days(test_cases): def find_min_days(N, a): plant_counts = Counter(a) return len(plant_counts) results = [] for N, a in test_cases: results.append(find_min_days(N, a)) return results # Reading input and preparing for processing def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) a = list(map(int, data[index+1:index+1+N])) test_cases.append((N, a)) index += N + 1 results = min_watering_days(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"According to the rules of the Berland city parking system, cars can only be parked in a systematic manner to ensure maximum efficiency. The parking lot is represented as a 2D grid of dimensions m x n. A cell can be empty (represented by 0) or occupied by a car (represented by 1). To be considered orderly, every row in the parking lot grid with at least one car must have all of its cars parked in contiguous spaces without any empty spaces in between. Similarly, for each column that contains at least one car, all these cars must also be in contiguous spaces without any empty spaces in between. Determine if the given parking lot grid is orderly or not. -----Input----- The first line contains two integers, m (1 ≤ m ≤ 1000) and n (1 ≤ n ≤ 1000) — the dimensions of the parking lot grid. The next m lines each contain n integers (either 0 or 1) representing the parking lot grid. -----Output----- Print the word \\"YES\\" if the parking lot grid is orderly. Otherwise, print the word \\"NO\\". -----Examples----- Input 2 3 1 0 1 1 1 0 Output NO Input 2 4 0 1 1 0 0 0 1 1 Output YES","solution":"def is_orderly_parking(m, n, grid): Determines if the given parking lot grid is orderly according to the rules. Args: m (int): number of rows in the grid. n (int): number of columns in the grid. grid (list of list of ints): 2D grid representing the parking lot. Returns: str: \\"YES\\" if the parking lot is orderly, else \\"NO\\". # Check each row to ensure cars are parked contiguously for row in grid: found_car = False found_emptiness_after_car = False for cell in row: if cell == 1: if found_emptiness_after_car: return \\"NO\\" found_car = True elif cell == 0: if found_car: found_emptiness_after_car = True # Check each column to ensure cars are parked contiguously for col in range(n): found_car = False found_emptiness_after_car = False for row in range(m): if grid[row][col] == 1: if found_emptiness_after_car: return \\"NO\\" found_car = True elif grid[row][col] == 0: if found_car: found_emptiness_after_car = True return \\"YES\\""},{"question":"You are given a list of integers where each integer represents the amount of time required to complete a task. Your goal is to determine the minimum number of days required to complete all the tasks, with the constraint that no more than `d` hours can be spent working on tasks each day. Return the number of days required to complete all the tasks. ``` minDaysToCompleteTasks(tasks, d) minDaysToCompleteTasks([4, 3, 2, 1], 5) On the first day, complete tasks with times 4 and 1 (total of 5 hours). On the second day, complete tasks with times 3 and 2 (total of 5 hours). Therefore, the answer is 2 days. minDaysToCompleteTasks([10, 3, 7], 10) On the first day, complete the task with time 10 hours. On the second day, complete the tasks with times 3 and 7 (total of 10 hours). Therefore, the answer is 2 days. minDaysToCompleteTasks([8, 2, 2, 6, 3, 3, 2], 8) On the first day, complete tasks with times 8 hours. On the second day, complete tasks with times 6 and 2 (total of 8 hours). On the third day, complete tasks with times 3, 2 and 2 (total of 7 hours). On the fourth day, complete task with time 3 hours. Therefore, the answer is 4 days. ``` The list of tasks will contain integers in the range [1, 24]. The daily limit `d` will be an integer in the range [1, 24].","solution":"def minDaysToCompleteTasks(tasks, d): Returns the minimum number of days required to complete the tasks given the constraint that no more than d hours can be spent each day. # Sort the tasks in descending order tasks.sort(reverse=True) days = 0 while tasks: total_daily_time = 0 # Keep adding tasks to the day while the total remains within the daily limit d for i, task in enumerate(tasks): if total_daily_time + task <= d: total_daily_time += task tasks[i] = 0 # Mark this task as done # Remove completed tasks marked as 0 tasks = [task for task in tasks if task > 0] days += 1 # Increment the days count return days"},{"question":"Given a list of integers, find and return the second smallest number in the list. If the list has fewer than two unique elements, return -1. Example 1: Input: nums = [3, 1, 4, 1, 5, 9] Output: 3 Explanation: The smallest number is 1, and the second smallest number is 3. Example 2: Input: nums = [7, 7, 7] Output: -1 Explanation: There are no two unique elements in the list. Your Task: You don\'t need to read input or print anything. Your task is to complete the function secondSmallest() which takes a list of integers nums as input parameter and returns the second smallest number in the list, or -1 if it does not exist. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def second_smallest(nums): Returns the second smallest number in the list, or -1 if it does not exist. if len(nums) < 2: return -1 first = second = float(\'inf\') for num in nums: if num < first: first, second = num, first elif first < num < second: second = num return second if second != float(\'inf\') else -1"},{"question":"You are given a sequence of integers A_1, A_2, ldots, A_N. Determine the number of pairs (i, j) such that 1 leq i < j leq N and A_i + A_j is an even number. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer ― the number of eligible pairs. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - |A_i| le 10^9 for each valid i -----Subtasks----- Subtask #1 (40 points): N le 1,000 Subtask #2 (60 points): original constraints -----Example Input----- 2 3 1 2 3 4 2 4 6 8 -----Example Output----- 1 6","solution":"def count_even_sum_pairs(test_cases): results = [] for test_case in test_cases: N, A = test_case odd_count = sum(1 for x in A if x % 2 != 0) even_count = N - odd_count result = (odd_count * (odd_count - 1) // 2) + (even_count * (even_count - 1) // 2) results.append(result) return results # Handling input and output if run as a script if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) A = list(map(int, data[index + 1:index + 1 + N])) test_cases.append((N, A)) index += 1 + N results = count_even_sum_pairs(test_cases) for result in results: print(result)"},{"question":"You are given a sequence of N integers representing the scores of participants in a coding competition. Your task is to determine the k-th highest score from the unique scores set. If there are fewer than k unique scores, print \\"Not enough unique scores\\". -----Constraints----- - 2 leq N leq 1000 - 1 leq score_i leq 1000 - 1 leq k leq N -----Input----- Input is given from Standard Input in the following format: N k score_1 score_2 ... score_N -----Output----- Print the k-th highest unique score, or \\"Not enough unique scores\\". -----Sample Input 1----- 8 3 100 200 200 100 150 50 150 250 -----Sample Output 1----- 150 -----Sample Input 2----- 5 6 10 20 20 30 30 -----Sample Output 2----- Not enough unique scores","solution":"def kth_highest_unique_score(scores, k): Returns the k-th highest unique score or \'Not enough unique scores\' if there are fewer than k unique scores. unique_scores = list(set(scores)) unique_scores.sort(reverse=True) if len(unique_scores) < k: return \\"Not enough unique scores\\" else: return unique_scores[k - 1] def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) k = int(data[1]) scores = list(map(int, data[2:N+2])) result = kth_highest_unique_score(scores, k) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given a matrix of size M x N filled with non-negative integers, you need to find a path from the top-left of the matrix to the bottom-right of the matrix such that you collect the maximum sum of the elements along the path. The path can only go right or down. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers M and N. - Each of the next M lines contains N space-separated integers representing the matrix. -----Output----- For each test case, output a single line containing the maximum sum possible as described. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ M, N ≤ 100 - 0 ≤ Matrix[i][j] ≤ 100 -----Example----- Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 10 10 10 10 Output: 29 30 -----Explanation----- Example 1. The path yielding the maximum sum is 1 → 4 → 7 → 8 → 9, thus the sum is 1 + 4 + 7 + 8 + 9 = 29. Example 2. You can move down and then right to collect all the 10s in the matrix, resulting in a total sum of 10 + 10 + 10 + 10 = 30.","solution":"def max_path_sum(matrix): Given a matrix, finds the path from top-left to bottom-right with the maximum sum. The path can only go right or down. M = len(matrix) N = len(matrix[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[M-1][N-1] def max_path_sum_for_test_cases(test_cases): results = [] for test_case in test_cases: results.append(max_path_sum(test_case)) return results def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[idx].split()) idx += 1 matrix = [] for i in range(M): matrix.append(list(map(int, input_lines[idx].split()))) idx += 1 test_cases.append(matrix) return test_cases # Sample run for parsing and processing input def main(input_string): test_cases = parse_input(input_string) results = max_path_sum_for_test_cases(test_cases) for result in results: print(result)"},{"question":"You have been given a list of scores for different exams taken by students and a list of weights associated with each exam. Your task is to calculate a weighted average score for each student and determine the top three students with the highest weighted average scores. Write a function `top_three_students` that takes two parameters: 1. `scores`: a dictionary where keys are student names and values are lists of scores. 2. `weights`: a list of weights corresponding to each exam. The function should return a list of the names of the top three students with the highest weighted average scores. If there are fewer than three students, return the names of all the students sorted by their weighted average scores in descending order. **Example:** ```python scores = { \\"Alice\\": [90, 80, 70], \\"Bob\\": [85, 95, 80], \\"Charlie\\": [100, 70, 90], \\"David\\": [70, 75, 85] } weights = [0.3, 0.4, 0.3] print(top_three_students(scores, weights)) ``` **Output:** ``` [\'Bob\', \'Charlie\', \'Alice\'] ``` **Constraints:** - All input lists are non-empty and have the same length. - Weights will sum up to 1. - The names of the students are unique.","solution":"def top_three_students(scores, weights): Returns the names of the top three students with the highest weighted average scores. :param scores: A dictionary where keys are student names and values are lists of scores. :param weights: A list of weights corresponding to each exam. def calculate_weighted_average(score_list, weights): return sum(score * weight for score, weight in zip(score_list, weights)) weighted_averages = {student: calculate_weighted_average(exams, weights) for student, exams in scores.items()} sorted_students = sorted(weighted_averages, key=weighted_averages.get, reverse=True) return sorted_students[:3]"},{"question":"An entertainment company is planning to organize a concert and they have a list of performance timings. Each performance has a start time and end time. The challenge is to coordinate a schedule such that the most number of performances can be enjoyed without any overlaps. Given the start and end times of N performances, write a program to find the maximum number of performances that can be attended if only one performance can be attended at a time. The start and end times of performances are given in 24-hour format. Input: - The first line contains an integer N, the number of performances. - Each of the next N lines contains two integers Si and Ei, representing the start time and end time of the i-th performance. Output: - Print a single integer, the maximum number of performances that can be attended without any overlaps. # Constraints: - 1 ≤ N ≤ 1,000 - 0 ≤ Si < Ei ≤ 24 (Times are in integer format) # Example **Input:** 5 1 4 3 5 0 6 5 7 8 9 **Output:** 3 In this example, the maximum number of performances that can be attended is 3 (i.e., [1,4], [5,7], and [8,9]).","solution":"def max_performances(schedule): Given a list of performance timings with start and end times, returns the maximum number of non-overlapping performances that can be attended. :param schedule: a list of tuples, where each tuple contains two integers representing the start and end times of a performance. :return: an integer, the maximum number of performances that can be attended. # Sort the performances based on their end time schedule.sort(key=lambda x: x[1]) # Initialize variables max_perf = 0 last_end_time = -1 # Iterate through the sorted schedule for start, end in schedule: if start >= last_end_time: # If the current performance starts after or when the last one ends max_perf += 1 last_end_time = end return max_perf"},{"question":"A delivery service wants to optimize the time it takes to deliver packages across a city. The city is represented by an undirected graph where intersections are nodes and streets are edges. The company has multiple delivery vehicles, each starting at different locations with a full battery. The battery drains at a constant rate while traveling, and each vehicle can recharge its battery at designated charging stations. The graph edges may have varying weights that represent the travel time on each street. Charging time is not negligible and needs to be accounted for. Your task is to calculate the minimum time required for all vehicles to deliver all packages. Each vehicle can carry multiple packages, and each package has a designated drop-off node. A vehicle can reload its battery to full capacity in a constant time at any charging station. The graph contains n nodes and m edges. Each delivery vehicle has a starting node, the battery capacity it starts with, and a list of packages with destination nodes. Charging stations are a subset of the nodes. Input The first line contains integers n, m, and k (1 ≤ n ≤ 500, 1 ≤ m ≤ 2000, 1 ≤ k ≤ 10), representing the number of nodes, the number of edges, and the number of delivery vehicles respectively. The next m lines contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a bidirectional street with travel time w between intersections u and v. The next k lines each start with four integers s_i, b_i, c_i, p_i (1 ≤ s_i ≤ n, 1 ≤ b_i ≤ 1000, 0 ≤ c_i ≤ 100, 1 ≤ p_i ≤ 10), representing the starting node of the i-th vehicle, its battery capacity, the number of designated charging stations, and the number of packages the vehicle carries respectively. The line continues with c_i integers (1 ≤ ch_i ≤ n) representing the charging stations, followed by p_i integers (1 ≤ d_i ≤ n) representing the destination nodes of the packages. Output Print a single integer, the minimum time required for all vehicles to deliver all packages. Examples Input 5 6 2 1 2 2 2 3 2 3 4 2 4 5 2 1 5 10 2 4 10 1 5 1 2 1 3 3 7 1 2 4 2 3 Output 8 Explanation In the example above: - The city has 5 nodes and 6 edges. - There are 2 delivery vehicles. - The first vehicle starts at node 1, with a battery capacity of 5, 1 charging station at node 2, and 2 packages with destinations at nodes 3 and 5. - The second vehicle starts at node 3, with a battery capacity of 7, 1 charging station at node 4, and 2 packages both with destinations at node 3. - The optimal paths need to be calculated, taking into consideration the vehicles\' battery capacities and the time required to visit the charging stations and deliver all the packages. Note The challenge lies in efficiently managing the vehicles\' routes and charging schedules to minimize the total delivery time across the graph. The vehicles may need to recharge multiple times depending on the layout of the streets and the locations of the charging stations.","solution":"import heapq def calculate_min_time(n, m, k, edges, vehicles): def dijkstra(start, graph): times = {i: float(\'inf\') for i in range(1, n+1)} times[start] = 0 pq = [(0, start)] while pq: current_time, node = heapq.heappop(pq) if current_time > times[node]: continue for neighbor, weight in graph[node]: time = current_time + weight if time < times[neighbor]: times[neighbor] = time heapq.heappush(pq, (time, neighbor)) return times graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def get_vehicle_route(vehicle): start, battery_capacity, num_charging_stations, num_packages, *points = vehicle charging_stations = points[:num_charging_stations] destinations = points[num_charging_stations:] shortest_paths = {node: dijkstra(node, graph) for node in [start] + charging_stations + destinations} def get_min_travel_time(node, destination): return shortest_paths[node][destination] min_time = 0 # We simplify the travel considering a virtual unlimited battery for destination in destinations: min_time += get_min_travel_time(start, destination) start = destination return min_time total_min_time = 0 for vehicle in vehicles: total_min_time += get_vehicle_route(vehicle) return total_min_time def main(): import sys input = sys.stdin.read data = input().strip().split() idx = 0 n = int(data[idx]) idx += 1 m = int(data[idx]) idx += 1 k = int(data[idx]) idx += 1 edges = [] for _ in range(m): u = int(data[idx]) idx += 1 v = int(data[idx]) idx += 1 w = int(data[idx]) idx += 1 edges.append((u, v, w)) vehicles = [] for _ in range(k): s_i = int(data[idx]) idx += 1 b_i = int(data[idx]) idx += 1 c_i = int(data[idx]) idx += 1 p_i = int(data[idx]) idx += 1 rest = list(map(int, data[idx: idx + c_i + p_i])) idx += c_i + p_i vehicles.append([s_i, b_i, c_i, p_i] + rest) result = calculate_min_time(n, m, k, edges, vehicles) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array nums, The task is to determine if it forms an arithmetic progression when sorted in non-decreasing order. An arithmetic progression is a sequence of numbers such that the difference of any two successive members is a constant. Example 1: Input: nums = [3, 5, 1] Output: Yes Explanation: Sorting the array as [1, 3, 5], the differences 3 - 1 = 2 and 5 - 3 = 2 are constant, forming an arithmetic progression. Example 2: Input: nums = [1, 2, 4] Output: No Explanation: Sorting the array as [1, 2, 4], the differences 2 - 1 = 1 and 4 - 2 = 2 are not constant, so it does not form an arithmetic progression. Your Task: You don\'t need to read or print anything. Your task is to complete the function is_arithmetic_progression() which takes nums as input and returns \\"Yes\\" if it forms an arithmetic progression after sorting, otherwise returns \\"No\\" (Without quotes). Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints: 2 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def is_arithmetic_progression(nums): Determines if an array forms an arithmetic progression when sorted. Parameters: nums (List[int]): The array of integers to be checked. Returns: str: \\"Yes\\" if the array forms an arithmetic progression when sorted, otherwise \\"No\\". # Sort the array in non-decreasing order nums.sort() # Calculate the common difference from the first two elements diff = nums[1] - nums[0] # Check the difference between each consecutive pair of elements for i in range(2, len(nums)): if nums[i] - nums[i - 1] != diff: return \\"No\\" return \\"Yes\\""},{"question":"You are given two strings `s` and `t` of the same length. The objective is to transform the string `s` into the string `t` using a series of operations. In one operation, you can choose any character in `s` and replace it with a new character that comes lexicographically after the chosen character. Write a function `min_operations_to_transform(s, t)` that determines the minimum number of operations required to transform `s` into `t`. If it is impossible to transform `s` into `t`, return `-1`. # Function Signature ```python def min_operations_to_transform(s: str, t: str) -> int: ``` # Input - `s` (1 ≤ len(s) ≤ 1000) — The original string consisting of lowercase English letters. - `t` (1 ≤ len(t) ≤ 1000) — The target string consisting of lowercase English letters. # Output - Return the minimum number of operations required to transform `s` into `t`, or `-1` if it is impossible. # Examples Input: ```python s = \\"abc\\" t = \\"bcd\\" ``` Output: ```python 3 ``` Input: ```python s = \\"abc\\" t = \\"bac\\" ``` Output: ```python -1 ``` Input: ```python s = \\"xyz\\" t = \\"yzx\\" ``` Output: ```python 3 ``` # Explanation 1. In the first example, each character of `s` can be changed to the next character in the alphabet to match `t`. - \'a\' -> \'b\' - \'b\' -> \'c\' - \'c\' -> \'d\' 2. In the second example, the transformation is not possible because \'a\' cannot be changed to \'b\' as \'a\' appears before \'b\'. 3. In the third example: - \'x\' -> \'y\' - \'y\' -> \'z\' - \'z\' cannot be converted to \'x\', so minimal steps are adjusting the other chars first and then the leftover elements.","solution":"def min_operations_to_transform(s: str, t: str) -> int: Determines the minimum number of operations required to transform string s into string t by incrementing characters. if len(s) != len(t): return -1 operations = 0 for i in range(len(s)): if s[i] > t[i]: return -1 operations += ord(t[i]) - ord(s[i]) return operations"},{"question":"In a game of battleships, you are given a 2D grid that represents a game board. Each cell in the grid contains either a `\'.\'` representing water or a `\'B\'` representing a battleship. Battleships are represented as groups of contiguous `\'B\'` cells, horizontally or vertically (not diagonally). However, each battleship must be surrounded by water or the edges of the grid, and there must be a minimum gap of at least one cell of water between any two battleships either horizontally or vertically. Write a function `countBattleships(grid: List[List[str]]) -> int` that takes in a 2D grid and returns the number of battleships present on the board. The function should traverse the grid and count each unique battleship based on the given rules. # Example Input: ``` grid = [ [\'.\', \'B\', \'B\', \'.\'], [\'.\', \'.\', \'.\', \'B\'], [\'B\', \'.\', \'.\', \'B\'], [\'.\', \'.\', \'.\', \'.\'] ] ``` Output: `3` Explanation: There are three battleships in the input grid. 1. The first battleship is formed by the contiguous cells `(0, 1)` and `(0, 2)`. 2. The second battleship is formed by the contiguous cell `(1, 3)`. 3. The third battleship is formed by the contiguous cells `(2, 3)`. # Constraints - The grid will have at least 1 row and 1 column. - The grid will not exceed 200 rows and 200 columns. - Each cell in the grid will be either `\'.\'` or `\'B\'`. # Note - Your solution should not modify the input grid.","solution":"def countBattleships(grid): Count the number of battleships on a given grid. Args: grid (List[List[str]]): A 2D list of strings representing the game board. Returns: int: The number of battleships on the board. if not grid: return 0 rows = len(grid) cols = len(grid[0]) count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == \'B\': if i > 0 and grid[i-1][j] == \'B\': continue if j > 0 and grid[i][j-1] == \'B\': continue count += 1 return count"},{"question":"You are given an array of integers representing a list of numbers. Your task is to find the largest sum of any non-empty subarray (contiguous elements) within the array and also return the starting and ending indices of this subarray. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: (6, 3, 6) Explanation: The subarray [4,-1,2,1] has the largest sum = 6, and it starts at index 3 and ends at index 6. Example 2: Input: nums = [1] Output: (1, 0, 0) Explanation: The array itself is the largest subarray, starting and ending at index 0 with a sum of 1. Example 3: Input: nums = [5,4,-1,7,8] Output: (23, 0, 4) Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23, and it starts at index 0 and ends at index 4. Constraints: * 1 <= nums.length <= 10^4 * -10^4 <= nums[i] <= 10^4","solution":"def max_subarray(nums): Returns the largest sum of any non-empty subarray and the starting and ending indices of this subarray. if not nums: return (0, -1, -1) # if the list is empty, return a tuple that makes sense for empty input max_sum = current_sum = nums[0] start = end = temp_start = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return (max_sum, start, end)"},{"question":"You are given a list of integers. Your task is to find the sum of all prime numbers in the list. If there are no prime numbers in the list, return 0. A prime number is defined as a number greater than 1 with no positive divisors other than 1 and itself. Example 1: Input: numbers = [2, 3, 4, 5, 10] Output: 10 Explanation: The prime numbers in the list are 2, 3, and 5. Their sum is 10. Example 2: Input: numbers = [10, 15, 20] Output: 0 Explanation: There are no prime numbers in the list. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfPrimes() which takes a list of integers and returns the sum of prime numbers in the list. Expected Time Complexity: O(N * sqrt(M)) where N is the number of elements in the list and M is the maximum element in the list. Expected Auxiliary Space: O(1) Constraints: 1 <= len(numbers) <= 10^5 0 <= numbers[i] <= 10^6","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sumOfPrimes(numbers): Returns the sum of all prime numbers in the list. prime_sum = 0 for number in numbers: if is_prime(number): prime_sum += number return prime_sum"},{"question":"You are given a string s consisting of lowercase English letters. You can perform operations of two kinds: - Choose a character and remove it from the string. - Choose a character and replace it with another character from \'a\' to \'z\'. Your objective is to make all the characters in the string the same with the minimum number of operations. -----Input----- The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Each test case consists of a single line containing the string s (1 leq |s| leq 100). -----Output----- For each test case, print the minimum number of operations required to make all characters in the string the same. -----Examples----- Input 3 aaba abcde bbbbb Output 1 4 0 -----Note----- In the first case, we need only one operation: change the second \'a\' to \'b\'. Now the string becomes \\"aaaa\\". In the second case, the optimal way is to replace all characters except \'a\' with \'a\'. This requires 4 operations. In the third case, the string is already homogeneous, so no operations are needed.","solution":"def min_operations_to_make_uniform(s): Returns the minimum number of operations required to make all characters in the string s the same. max_frequency = max(s.count(char) for char in set(s)) return len(s) - max_frequency def min_operations_for_multiple_cases(test_cases): Processes multiple test cases to determine the minimum operations for each. results = [] for s in test_cases: results.append(min_operations_to_make_uniform(s)) return results"},{"question":"A kingdom is filled with numerous interconnected towns. Each pair of towns is either connected by a direct road or not. The king wants to travel from the capital city, Town 1, to his summer palace in Town n in the shortest number of steps possible. However, there\'s a twist: once he travels on a road, that road becomes enchanted and can never be used again. Help the king find the shortest possible route to his destination or determine if it\'s impossible. Input The first line contains two integers n and m (2 ≤ n ≤ 3⋅ 10^5, 0 ≤ m ≤ 3 ⋅ 10^5) — the number of towns and the number of direct roads available initially. The next m lines describe the direct roads. The i-th line contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i) — the towns connected by the i-th direct road. Each direct road is bidirectional. It is guaranteed that each unordered pair of towns is presented at most once. Output If there is a possible route, in the first line print a single integer k — the minimum number of roads the king must travel through (1 ≤ k ≤ 10^6). In the second line print k+1 integers t_0, …, t_k — the towns the king should visit in sequence. This sequence should satisfy the following: * t_0 = 1, t_k = n; * for each i from 1 to k, the road connecting t_{i - 1} to t_i should be direct at the moment the king travels along it. If no such route exists, print a single integer -1. Example Input 5 5 1 2 2 3 3 4 4 5 1 5 Output 1 1 5 Input 5 3 1 2 2 3 4 5 Output -1","solution":"from collections import deque, defaultdict def shortest_path(n, roads): adj_list = defaultdict(list) for u, v in roads: adj_list[u].append(v) adj_list[v].append(u) dist = [-1] * (n + 1) parent = [-1] * (n + 1) dist[1] = 0 q = deque([1]) while q: u = q.popleft() for v in adj_list[u]: if dist[v] == -1: dist[v] = dist[u] + 1 parent[v] = u q.append(v) if v == n: q = deque() break if dist[n] == -1: return -1, [] path = [] current = n while current != -1: path.append(current) current = parent[current] path.reverse() return dist[n], path def kingdom_path(n, m, roads): if m == 0: return -1 roads_list = [] for road in roads: u, v = map(int, road.split()) roads_list.append((u, v)) dist, path = shortest_path(n, roads_list) if dist == -1: return -1 return dist, path"},{"question":"You are participating in a programming competition and there is a problem related to finding the specific elements in an array based on given conditions. Your task is to write a program that identifies and prints elements from an array that have an exact frequency of F. -----Input:----- - The first line will contain T, the number of test cases. - Each test case begins with an integer N (the size of the array) and an integer F (the required frequency). - The second line of each test case will contain N integers, the elements of the array. -----Output:----- For each test case, print all elements that appear exactly F times in the array. Print the elements in the order they appear in the input. If no elements meet the criteria, print -1. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 200 - 1 leq a[i] leq 1000 (where a[i] represents an array element) -----Sample Input:----- 3 5 2 1 2 2 3 3 5 3 4 4 4 5 5 6 1 1 2 3 4 5 6 -----Sample Output:----- 2 3 4 1 2 3 4 5 6 -----EXPLANATION:----- - In the first test case, the elements 2 and 3 each appear exactly 2 times. - In the second test case, the element 4 appears exactly 3 times. - In the third test case, all elements appear exactly 1 time.","solution":"def find_elements_with_frequency(test_cases): results = [] for case in test_cases: N, F = case[\'N\'], case[\'F\'] arr = case[\'array\'] frequency_dict = {} for elem in arr: if elem in frequency_dict: frequency_dict[elem] += 1 else: frequency_dict[elem] = 1 result = [] for elem in arr: if frequency_dict[elem] == F: if elem not in result: result.append(elem) if result: results.append(\\" \\".join(map(str, result))) else: results.append(\\"-1\\") return results # Example Usage if __name__ == \\"__main__\\": test_cases = [ {\\"N\\": 5, \\"F\\": 2, \\"array\\": [1, 2, 2, 3, 3]}, {\\"N\\": 5, \\"F\\": 3, \\"array\\": [4, 4, 4, 5, 5]}, {\\"N\\": 6, \\"F\\": 1, \\"array\\": [1, 2, 3, 4, 5, 6]} ] output = find_elements_with_frequency(test_cases) for out in output: print(out)"},{"question":"---Reverse Sentence--- Write a function to reverse the order of words in a given sentence. Each word in the sentence is separated by a single space. The sentence does not contain leading or trailing spaces. ---Input--- A single line contains a non-empty sentence. The sentence is made up of English letters and spaces only. The length of the sentence will not exceed 10^3. ---Output--- Output the sentence with the order of words reversed. The words themselves should not be reversed. ---Examples--- Input hello world Output world hello Input Programming is fun Output fun is Programming Input Goodbye everyone Output everyone Goodbye","solution":"def reverse_sentence(sentence): Reverses the order of words in a given sentence. Args: sentence (str): A sentence to reverse. Returns: str: The sentence with the order of words reversed. # Split the sentence into words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a single string reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Problem Alice loves solving puzzles, and one day she came across an interesting problem involving numbers and operations. She wants to find the smallest positive integer that cannot be formed using the digits of a given list of integers when concatenated in any order and combined using the plus (`+`) operation. For example, if the given list of integers is `[12, 34, 56]`, Alice can create the numbers `1234 + 56`, `12 + 3456`, `1 + 23456`, etc., but she needs to find the smallest number that can\'t be generated this way. The task for you is to write a program that takes a list of integers as input and finds the smallest positive integer that cannot be formed as a sum using any concatenated combination of the elements from the list. Constraints * The input meets the following conditions: - 1 le N le 6 - Each integer in the list has no more than 3 digits and is positive. Input The input is given in the following format: * N * a_1 a_2 dots a_N The input consists of 2 lines. The first line is given the number of integers, N, in the list. The second line contains the N integers separated by spaces. Output Output the smallest positive integer that cannot be formed as a sum using any concatenated combination of the elements from the list. Examples: Input: 3 12 34 56 Output: 1 Input: 2 99 100 Output: 1 Input: 3 1 3 6 Output: 2","solution":"import itertools def smallest_number_not_formable(N, numbers): Returns the smallest positive integer that cannot be formed using concatenated digits of the given list of integers when combined with + operation. all_numbers = {0} digits_list = [str(num) for num in numbers] for i in range(1, N+1): for combination in itertools.permutations(digits_list, i): formed_num = int(\'\'.join(combination)) new_combinations = set() for existing_num in all_numbers: new_combinations.add(existing_num + formed_num) all_numbers.update(new_combinations) smallest_positive = 1 while smallest_positive in all_numbers: smallest_positive += 1 return smallest_positive"},{"question":"You are given a string ( s ) consisting of lowercase English letters. You can choose any non-negative integer ( k ) and perform the following operation exactly ( k ) times: select any character in the string and change it to any other lowercase English letter. Your task is to find the maximum possible length of a non-empty palindromic subsequence that can be obtained after performing at most ( k ) operations. -----Input----- The first line contains the string ( s ) of length ( n ) ( ( 1 le n le 100,000 ) ) consisting of lowercase English letters. The second line contains an integer ( k ) (( 0 le k le n )). -----Output----- Print the maximum possible length of a non-empty palindromic subsequence that can be obtained after performing at most ( k ) operations. -----Examples----- Input abcde 2 Output 5 Input abacaba 1 Output 7 Input abc 0 Output 1 -----Note----- In the first example, you can change the character \'b\' to \'a\' and the character \'e\' to \'d\', resulting in the string \'aadcd\', which has the palindromic subsequence \\"adasd\\" of length 5. In the second example, the string \'abacaba\' can be modified by changing one of the characters to match the other, keeping the entire string as a palindrome of length 7. In the third example, since no operations are allowed, the largest palindromic subsequence we can find is any single character, hence of length 1.","solution":"def max_palindromic_subsequence_length(s, k): Given a string \'s\' and a non-negative integer \'k\', returns the maximum possible length of a non-empty palindromic subsequence that can be obtained after performing at most \'k\' operations. # The idea here is to determine the maximum length of a palindrome we can form with at most \'k\' modifications. n = len(s) # If `k` is large enough to change more than half the characters, we can just create a palindrome of length `n` if k >= n // 2: return n # Initialize a 2D array for dynamic programming dp = [[0] * n for _ in range(n)] # Base case: single character substrings are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Fill DP table for L in range(2, n + 1): # L is the length of the current substring for i in range(n - L + 1): j = i + L - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # Get the length of the longest palindromic subsequence longest_pal_subseq = dp[0][n - 1] # We can increase it by up to 2*k return min(n, longest_pal_subseq + 2 * k)"},{"question":"Jane is learning about matrix transformations in her computer science course. One day, her professor posed an interesting problem related to symmetric matrices. A symmetric matrix is a square matrix that is equal to its transpose. In other words, a matrix A is symmetric if (A[i][j] = A[j][i]) for all valid indices i and j. Jane\'s professor gave her a matrix and asked her to make the matrix symmetric by setting any non-symmetric elements to -1. For example, if the element (A[i][j]) is not equal to (A[j][i]), both (A[i][j]) and (A[j][i]) should be set to -1. Could you help Jane by writing a program that takes a square matrix as input and outputs its symmetric version according to the professor\'s rules? Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000), the number of rows and columns of the matrix. Each of the following n lines contains n integers (A[i][j]) (1 ≤ (A[i][j]) ≤ 10^9) that represent the elements of the matrix A. Output Output the transformed symmetric matrix in the form of n lines, each containing n integers. Examples Input 3 1 2 3 2 1 4 3 5 1 Output 1 2 3 2 1 -1 3 -1 1 Input 2 5 6 6 7 Output 5 6 6 7 Note In the first sample test, the element at (2, 3) and (3, 2) should be set to -1 because they are not equal, ensuring the matrix becomes symmetric. In the second sample test, the input matrix is already symmetric, so no transformation is needed.","solution":"def make_symmetric(matrix): n = len(matrix) for i in range(n): for j in range(i+1, n): if matrix[i][j] != matrix[j][i]: matrix[i][j] = -1 matrix[j][i] = -1 return matrix # Example usage: # n = 3 # matrix = [ # [1, 2, 3], # [2, 1, 4], # [3, 5, 1] # ] # print(make_symmetric(matrix))"},{"question":"Alex is developing a new weather simulation program that requires frequent calculations of cumulative rainfall. Given an array of daily rainfall amounts, Alex needs to efficiently provide the total rainfall over any specific range of days. For example, consider the rainfall amounts over 10 days: [2, 4, 0, 3, 7, 1, 8, 9, 5, 6]. If Alex needs to know the total rainfall from day 3 to day 7, the result would be 19 (0+3+7+1+8). Function Description Complete the `cumulativeRainfall` function in the editor below. It should return a list of integers where each value corresponds to the total rainfall for a queried range of days. `cumulativeRainfall` has the following parameters: - `rainfall`: a list of integers representing the daily rainfall amounts. - `queries`: a two-dimensional list where each element is a list containing two integers, representing the start and end days (inclusive) of the queried range. Input Format - The first line contains an integer `t`, the number of test cases. - The first line of each test case contains two space-separated integers, `n` (the number of days) and `q` (the number of queries). - The next line contains `n` space-separated integers representing the rainfall amounts. - Each of the next `q` lines contains two space-separated integers representing the start and end days of the range for the query. Constraints - (1 leq n leq 100000) - (1 leq q leq 50000) - (0 leq text{rainfall}[i] leq 10000) - (1 leq text{start}, text{end} leq n) Output Format For each query, print the cumulative rainfall for the specified range (inclusive) on a new line. Sample Input 0 ``` 1 10 3 2 4 0 3 7 1 8 9 5 6 3 7 1 5 2 10 ``` Sample Output 0 ``` 19 16 43 ``` Explanation 0 First Query (3 7): The rainfall amounts from day 3 to day 7 are [0, 3, 7, 1, 8] which sum to 19. Second Query (1 5): The rainfall amounts from day 1 to day 5 are [2, 4, 0, 3, 7] which sum to 16. Third Query (2 10): The rainfall amounts from day 2 to day 10 are [4, 0, 3, 7, 1, 8, 9, 5, 6] which sum to 43.","solution":"def cumulativeRainfall(rainfall, queries): Calculate cumulative rainfall for given range of days. :param rainfall: A list of integers representing daily rainfall amounts. :param queries: A list of lists where each sub-list contains two integers representing the start and end day. :return: A list of integers where each element corresponds to the total rainfall for a queried range. # Compute prefix sums n = len(rainfall) prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + rainfall[i - 1] # Process each query and find cumulative rainfall result = [] for start, end in queries: total_rainfall = prefix_sum[end] - prefix_sum[start - 1] result.append(total_rainfall) return result"},{"question":"In a rectangular grid with dimensions n x m, a path from the top-left corner to the bottom-right corner is considered \\"special\\" if it meets the following conditions: 1. Each step in the path can only go right or down. 2. The path cannot visit the same cell more than once. 3. An additional set of restricted cells (impassable cells) are provided, and the path cannot enter those cells. Given the grid dimensions, the list of restricted cells, and the number of available paths to be calculated, determine the number of different \\"special\\" paths that meet the above conditions for each query. Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 50, 1 ≤ q ≤ 10^3) — the grid dimensions and the number of queries. Next, a single integer k (0 ≤ k ≤ 2500) represents the number of restricted cells. The following k lines each contain two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) indicating the row and column of each restricted cell. The next q lines each contain two integers sr, sc, dr, dc (1 ≤ sr, dr ≤ n, 1 ≤ sc, dc ≤ m) representing the start and destination cells for each query respectively. Output For each query, print the number of different \\"special\\" paths from (sr, sc) to (dr, dc) in a single line. Examples Input 3 3 2 1 2 2 1 1 3 3 1 2 3 3 Output 2 1 Explanation In the first example: - There\'s one obstacle at (2,2). - The path from (1,1) to (3,3) can be: 1. Down, Down, Right, Right 2. Right, Right, Down, Down In the second example: - The path from (1,2) to (3,3) can be: 1. Down, Down, Right (Note: The number of paths excludes any that would travel through the restricted cell (2,2).)","solution":"def count_special_paths(n, m, k, restricted_cells, queries): Count the number of special paths in a grid with dimensions n x m, avoiding restricted cells and conforming to the movement rules. Parameters: n (int): Number of rows. m (int): Number of columns. k (int): Number of restricted cells. restricted_cells (list of tuples): List of restricted cell coordinates (1-based indexing). queries (list of tuples): List of queries, each represented by a tuple (sr, sc, dr, dc). Returns: list of int: List of the number of special paths for each query. # Convert restricted cells into set for quick lookup restricted_set = {(x - 1, y - 1) for (x, y) in restricted_cells} def is_valid(x, y): return 0 <= x < n and 0 <= y < m and (x, y) not in restricted_set # Use dynamic programming to calculate the number of paths def num_paths(sr, sc, dr, dc): # Create dp array dp = [[0] * m for _ in range(n)] if is_valid(sr, sc): dp[sr][sc] = 1 for i in range(sr, dr + 1): for j in range(sc, dc + 1): if is_valid(i, j): if i > sr: dp[i][j] += dp[i - 1][j] if j > sc: dp[i][j] += dp[i][j - 1] return dp[dr][dc] results = [] for (sr, sc, dr, dc) in queries: results.append(num_paths(sr - 1, sc - 1, dr - 1, dc - 1)) return results"},{"question":"Alicia is working on a large distributed system composed of multiple servers. She wants to optimize the use of the network bandwidth when transferring data between servers. Each server is directly connected to several other servers, and each connection has a certain bandwidth limit. Alicia needs to find ways to optimize the routing so that the maximum data can be transferred between any two servers without exceeding the connection limits. Your task is to help Alicia by calculating the maximum bandwidth that can be routed between two given servers without overloading any single connection. Input First line: number n of servers, number m of connections (2 ≤ n ≤ 2000, 1 ≤ m ≤ 5000). Each of the next m lines describes a connection with three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 10^6), representing a connection between servers u and v with a maximum bandwidth c. The last line contains two integers s and t (1 ≤ s, t ≤ n), representing the source and destination servers for the bandwidth calculation. Output Output a single integer: the maximum bandwidth that can be routed from server s to server t without exceeding the bandwidth limits of any connections. Example Input 4 5 1 2 10 1 3 5 2 3 15 2 4 10 3 4 10 1 4 Output 15","solution":"from collections import defaultdict, deque def bfs(capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in capacity[u]: if v not in visited and capacity[u][v] > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(n, edges, source, sink): capacity = defaultdict(lambda: defaultdict(int)) for u, v, c in edges: capacity[u][v] += c capacity[v][u] += c # This initializes reverse path for undirected graph handling (flow must be able to return) parent = [-1] * (n + 1) max_flow = 0 while bfs(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_bandwidth(n, m, connections, s, t): return edmonds_karp(n, connections, s, t)"},{"question":"Implement a function `is_walk_valid` that takes a list of directions represented by strings: \\"n\\", \\"s\\", \\"e\\", and \\"w\\" (which represent north, south, east, and west respectively). The function should determine if a walk, starting from an origin point, results in returning to the origin. The walk is only valid if the starting and ending points are the same, but the length of the walk can be arbitrary. **Note**: You may assume that the walk always begins from the point (0, 0) and there is no need to handle invalid direction inputs. **Example**: ```python is_walk_valid([\\"n\\", \\"s\\", \\"e\\", \\"w\\"]) => True is_walk_valid([\\"n\\", \\"s\\", \\"n\\", \\"e\\"]) => False ``` **Hint**: - You may want to think about how the directions affect the points\' coordinates. - Consider the net effect of the movements on the position: north and south affect the y-coordinate, east and west affect the x-coordinate. Write a complete function including the function\'s signature.","solution":"def is_walk_valid(directions): Determine if a walk, starting from an origin point, results in returning to the origin. :param directions: List of direction strings (\\"n\\", \\"s\\", \\"e\\", \\"w\\") :return: True if the walk is valid (returns to origin), False otherwise x, y = 0, 0 for direction in directions: if direction == \\"n\\": y += 1 elif direction == \\"s\\": y -= 1 elif direction == \\"e\\": x += 1 elif direction == \\"w\\": x -= 1 return x == 0 and y == 0"},{"question":"# Task Given a positive integer `n`, write a function that generates all binary strings of length `n` (i.e., all possible strings consisting only of \'0\'s and \'1\'s that have exactly `n` characters). # Input/Output `[input]` integer `n` A positive integer, representing the length of binary strings to generate. `[output]` an array of strings An array containing all possible binary strings of length `n`. # Example For `n = 2`, the output should be `[\\"00\\", \\"01\\", \\"10\\", \\"11\\"]`. For `n = 3`, the output should be `[\\"000\\", \\"001\\", \\"010\\", \\"011\\", \\"100\\", \\"101\\", \\"110\\", \\"111\\"]`.","solution":"def generate_binary_strings(n): Generates all binary strings of length n. Parameters: n (int): The length of the binary strings to generate. Returns: List[str]: A list of binary strings of length n. if n == 0: return [\\"\\"] from itertools import product # Generate all possible combinations of length n using \'0\' and \'1\' return [\'\'.join(bits) for bits in product(\'01\', repeat=n)]"},{"question":"Given a string `s` of lowercase English letters, you need to find the character that appears the most frequently. If there are multiple characters with the same maximum frequency, return the lexicographically smallest one among them. -----Input----- The only line contains a string `s` (1 ≤ |s| ≤ 10^6) — the string to analyze. -----Output----- Print the character that appears the most frequently. If there is a tie, print the lexicographically smallest one. -----Examples----- Input aabbbcc Output b Input abcabcabc Output a Input zzxyxxy Output x","solution":"def most_frequent_char(s: str) -> str: Returns the character that appears most frequently in the string. If there are multiple characters with the same maximum frequency, the lexicographically smallest one is returned. from collections import Counter # Count frequency of each character char_count = Counter(s) # Find maximum frequency max_frequency = max(char_count.values()) # Find all characters with the max frequency and return the lexicographically smallest one max_chars = [char for char, count in char_count.items() if count == max_frequency] return min(max_chars)"},{"question":"You are given an array of integers of length N. Your task is to select exactly one non-empty subarray (contiguous subsequence) and perform the following operation any number of times: pick one integer from the subarray and add 1 to it. What is the maximum possible sum of the elements of the subarray after performing the operation any number of times? -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 for all 1 leq i leq N -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the maximum possible sum of the elements of the subarray after performing the operation any number of times. -----Sample Input----- 5 3 1 4 1 5 -----Sample Output----- 15 You can select the entire array [3, 1, 4, 1, 5] and add 1 repeatedly to each element to get the subarray [4, 4, 4, 4, 4], summing to 20. For example, selecting the subarray [3, 1, 4], you can add 1 repeatedly to each element to get the subarray [4, 4, 5], summing to 13, which is less than 20. Example 2: -----Sample Input----- 3 9 8 7 -----Sample Output----- 24 Selecting the entire array [9, 8, 7] results in [9, 8, 8], summing to 24.","solution":"def max_possible_sum(N, A): Given an array of integers, the objective is to select a non-empty subarray and perform an operation where one integer from the subarray is incremented by 1 any number of times to maximize the sum. The operation can be thought of as incrementing each selected subarray element infinite times. The best approach is to choose the entire array because incrementing any subarray won\'t provide a better maximum than incrementing the entire array. The maximum possible sum is effectively the sum of all elements if they were all incremented to the maximum element present in the array plus one. Parameters: N (int): The number of elements in the array. A (list of int): The array of integers. Returns: int: The maximum possible sum of the elements of the subarray after performing the operation any number of times. max_element = max(A) # Increment every element in the subarray to max_element+1 return N * (max_element + 1)"},{"question":"Given a string S consisting of lowercase letters, find the minimum number of characters to be removed from S to make each character appear an even number of times. Example 1: Input: S = \\"aabbcc\\" Output: 0 Explanation: All characters appear an even number of times. Example 2: Input: S = \\"abcde\\" Output: 3 Explanation: Remove \'a\', \'d\', and \'e\' to only have \'b\' and \'c\' which appear an even number of times. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minRemovals() which takes string S as input and returns the minimum number of characters to be removed to make each character appear an even number of times. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^{5}","solution":"def minRemovals(S): This function returns the minimum number of characters to be removed from the input string S to make each character appear an even number of times. from collections import Counter # Count occurrences of each character char_count = Counter(S) # Find characters that appear an odd number of times odd_count_chars = sum(1 for count in char_count.values() if count % 2 != 0) # To make an odd count to even, we need to remove 1 character return odd_count_chars"},{"question":"You are given two strings s and t, consisting of lowercase English letters. Your task is to find the minimum number of operations required to make string s a subsequence of string t. An operation is defined as either: 1. Removing a character from s. 2. Removing a character from t. A string s is a subsequence of a string t if s can be derived from t by deleting some or no characters without changing the order of the remaining characters. Print the minimum number of operations required. -----Input----- The first line contains a string s (1 le |s| le 1000). The second line contains a string t (1 le |t| le 1000). -----Output----- Print a single integer representing the minimum number of operations to make s a subsequence of t. -----Examples----- Input abc ahbgdc Output 0 Input axc ahbgdc Output 2 Input ace abcde Output 0 -----Note----- In the first example, s is already a subsequence of t. No operations are required. In the second example, removing \'x\' from s and \'h\' or \'d\' from t makes s a subsequence of t. In the third example, the string s is already a subsequence of t. No operations are required.","solution":"def min_operations_to_subsequence(s, t): Returns the minimum number of operations required to make string s a subsequence of string t. # Two pointers for both strings s and t i, j = 0, 0 # Traverse both strings while i < len(s) and j < len(t): if s[i] == t[j]: i += 1 j += 1 # If we traversed all characters of s, it\'s a subsequence of t if i == len(s): return 0 # Count the remaining characters in s and t that needs to be removed remaining_s = len(s) - i remaining_t = len(t) - j # Total operations is sum of remaining characters return remaining_s + remaining_t"},{"question":"Monica is organizing a collection of books in her library. There are exactly n books, each with its own unique height. She wants to find two books such that the difference in their heights is exactly d. How many such pairs of books does she have? Each book appears in the library exactly once. Pairs (a, b) and (b, a) are considered equal. Pairs (a, b), where a=b, are not allowed. -----Input----- The first line of the input contains two integers n, d (1 le n le 10^6, 1 le d le 10^9) — the number of books and the desired height difference. -----Output----- Print the number of ways to choose the pair of books satisfying the condition above. Print 0, if Monica can choose no pair of books having the desired height difference. -----Examples----- Input 5 3 Output 4 Input 8 2 Output 7 Input 10 15 Output 0 Input 1000000 5 Output 999996 -----Note----- In the first example, if the heights of the books are 1, 2, 4, 7, and 8, the pairs with a height difference of 3 are: (1, 4), (2, 5), (4, 7), and (5, 8). In the second example, any pair of consecutive numbers from 1 to 8 (i.e., pairs (1, 3), (2, 4), ..., (6, 8)) will have a height difference of 2. In the third example, with any heights, there can be no pair of books having a height difference of 15, so the answer is 0. In the fourth example, with books having unique heights from 1 to 1000000, there are 999996 ways to choose pairs with a height difference of 5. For instance, (1, 6), (2, 7), ..., (999995, 1000000).","solution":"def count_book_pairs(n, d): Returns the number of pairs of books that satisfy the height difference condition. Args: n: int - Number of books d: int - Desired height difference Returns: int - Number of pairs # Since each book has a unique height, and heights are from 1 to n in this problem, # we can directly calculate the number of pairs with difference d. if d > n - 1: return 0 # Each valid pair corresponds to substracting a number from the set {1, 2, ..., n-d} return n - d"},{"question":"You are given N tasks, and you must assign each task to exactly one worker. Each worker has a different efficiency for each task, represented by an NxN matrix `M` where `M[i][j]` is the time in minutes worker `i` needs to complete task `j`. Your goal is to minimize the total time needed to complete all tasks by finding an optimal assignment of tasks to workers. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 20) — the number of tasks and workers. The next N lines each contain N integers, with the j-th integer in the i-th line representing the time `M[i][j]` (1 ≤ M[i][j] ≤ 1000) it takes worker `i` to complete task `j`. -----Output----- Print a single integer — the minimum total time needed to complete all tasks. -----Examples----- Input 3 2 3 4 3 2 4 5 6 1 Output 7 Input 2 4 2 3 5 Output 5 -----Note----- In the first example, an optimal assignment of tasks to workers is: - Worker 0 to task 0 (2 minutes), - Worker 1 to task 1 (2 minutes), - Worker 2 to task 2 (1 minute), resulting in a total of 2 + 2 + 1 = 5 minutes. In the second example, an optimal assignment of tasks to workers is: - Worker 0 to task 1 (2 minutes), - Worker 1 to task 0 (3 minutes), resulting in a total of 2 + 3 = 5 minutes.","solution":"from itertools import permutations def minimize_total_time(N, M): Given an NxN matrix M representing the time each worker i takes to complete task j, return the minimum total time needed to complete all tasks optimally. min_time = float(\'inf\') # Generate all possible permutations of task assignments for perm in permutations(range(N)): current_time = sum(M[i][perm[i]] for i in range(N)) if current_time < min_time: min_time = current_time return min_time"},{"question":"A company\'s internal messaging system logs information about each message sent between employees, storing details such as the timestamp, sender\'s ID, receiver\'s ID, and message content. To help them analyze communication patterns, you need to write a function that processes the log data and outputs the number of unique messages sent by each employee. Your task is to implement a function that takes a list of log entries and returns a dictionary where the keys are employee IDs and the values are the number of unique messages they have sent. Function Signature: ```python def count_unique_messages(logs: List[Tuple[int, int, str]]) -> Dict[int, int]: pass ``` Input Format: - logs: a list of tuples, each containing three values: - an integer representing the sender\'s ID. - an integer representing the receiver\'s ID. - a string representing the message content. Output Format: - A dictionary where each key is a unique sender\'s ID, and the value is the count of unique messages sent by that sender. Constraints: - The number of log entries ( L ) is such that ( 1 leq L leq 10^5 ). - Sender\'s and receiver\'s IDs are integers within the range ( 1 ) to ( 10^6 ). - Messages are non-empty strings with a maximum length of ( 100 ). Example: ```python logs = [ (1, 2, \\"Hello\\"), (2, 3, \\"Hi\\"), (1, 2, \\"Hello\\"), (1, 3, \\"Good morning\\"), (2, 1, \\"Hi\\"), (3, 1, \\"Hey\\"), (1, 2, \\"What\'s up?\\") ] print(count_unique_messages(logs)) ``` Expected Output: ``` {1: 3, 2: 1, 3: 1} ``` Explanation: - Employee 1 sent 3 unique messages (\\"Hello\\", \\"Good morning\\", \\"What\'s up?\\"). - Employee 2 sent 1 unique message (\\"Hi\\"). - Employee 3 sent 1 unique message (\\"Hey\\").","solution":"from typing import List, Tuple, Dict def count_unique_messages(logs: List[Tuple[int, int, str]]) -> Dict[int, int]: message_count = {} unique_messages = {} for sender_id, receiver_id, message in logs: if sender_id not in unique_messages: unique_messages[sender_id] = set() unique_messages[sender_id].add(message) for sender_id, messages in unique_messages.items(): message_count[sender_id] = len(messages) return message_count"},{"question":"You are given two arrays of integers A and B, both of length N. You can perform the following operations on array A any number of times (including zero). 1. Select any subarray of A and replace it with its reverse. For example, if A = [1, 2, 3, 4, 5], and you select the subarray [2, 3, 4], reversing it would give you A = [1, 4, 3, 2, 5]. Determine if it\'s possible to convert array A into array B through one or more of the described operations. ------ Input Format ------ - The first line will contain an integer T, the number of test cases. - Each test case consists of three lines. - The first line of each test case contains a single integer N — the length of the arrays. - The second line contains N space-separated integers A_1, A_2, ..., A_N — the elements of array A. - The third line contains N space-separated integers B_1, B_2, ..., B_N — the elements of array B. ------ Output Format ------ For each test case, print YES if it is possible to convert A into B, otherwise print NO. Each character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yes, YeS, and yEs will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 3 cdot 10^5 1 ≤ A_i, B_i ≤ 10^9 - The sum of N over all test cases won\'t exceed 3 cdot 10^5. ----- Sample Input 1 ------ 2 5 1 2 3 4 5 5 4 3 2 1 4 1 3 2 4 1 2 3 4 ----- Sample Output 1 ------ YES YES ----- Explanation 1 ------ Test case 1: Array A can be completely reversed to match B: A = [1, 2, 3, 4, 5] to B = [5, 4, 3, 2, 1] Test case 2: Array A can be converted to B with one reverse operation on the subarray [3, 2]: A = [1, 3, 2, 4] to B = [1, 2, 3, 4]","solution":"def can_convert(A, B): Determine if array A can be transformed into array B by reversing any number of subarrays. return sorted(A) == sorted(B) def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] B = test_cases[i][2] if can_convert(A, B): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string of parentheses consisting of characters \'(\' and \')\'. A valid parentheses string is defined as follows: - An empty string is valid. - If A is a valid parentheses string, then (A) is also a valid parentheses string. - If A and B are valid parentheses strings, then AB is also a valid parentheses string. Your task is to determine whether the input string is a valid parentheses string. Input The input consists of a single string s (1 ≤ |s| ≤ 100), where |s| denotes the length of the string. Output Print \\"Yes\\" if the string is a valid parentheses string, otherwise print \\"No\\". Examples Input (()) Output Yes Input ())( Output No Input (()() Output No Note In the first example, the string \\"()\\" is valid and forms a valid parentheses string when wrapped by another pair of parentheses, making it \\"(())\\". In the second example, the string has mismatched parentheses, hence it is not valid. In the third example, the string cannot be considered valid because an opening parenthesis at the end does not have a matching closing parenthesis.","solution":"def is_valid_parentheses(s): Determines whether the input string s is a valid parentheses string. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"You are given a rectangular grid with 𝐽 rows and 𝐾 columns. Each cell in the grid is either blocked or empty. A robot starts at the top-left cell (1, 1) and needs to reach the bottom-right cell (J, K). The robot can only move right or down to an adjacent empty cell. Determine the number of distinct paths the robot can take from the start to the destination. Input The first line contains two integers, J and K (1 ≤ J, K ≤ 1000), the number of rows and columns, respectively. The next J lines contain K characters each. Each character is either \'.\' (an empty cell) or \'#\' (a blocked cell). The top-left cell and the bottom-right cell are always empty (\'.\'). Output Print the number of distinct paths from the top-left to the bottom-right cell. If there is no such path, print 0. Examples Input 3 3 . .#. ... Output 1 Input 3 3 ..# # .#. Output 0","solution":"def numDistinctPaths(J, K, grid): Determine the number of distinct paths the robot can take from the start to the bottom-right cell. # Base case check if the start or end is blocked if grid[0][0] == \'#\' or grid[J-1][K-1] == \'#\': return 0 # Create a 2D list for storing path counts dp = [[0 for _ in range(K)] for _ in range(J)] # Starting position dp[0][0] = 1 # Fill the dp array for i in range(J): for j in range(K): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[J-1][K-1]"},{"question":"You are given an undirected graph with N nodes and M edges. Your task is to determine the length of the shortest simple cycle in the graph, or to determine that no cycle exists. A simple cycle is a cycle that does not repeat any vertices except for the start and end vertex. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M denoting the number of nodes and the number of edges in the graph, respectively. The following M lines describe the edges of the graph. Each of these lines contains two space-separated integers u and v denoting an edge between nodes u and v. ------ Output ------ For each test case, print a single line containing the length of the shortest simple cycle, or print -1 if no cycle exists. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 0 ≤ M ≤ 5000 ------ Example ------ ------ Input Format ------ 2 3 3 1 2 2 3 3 1 4 3 1 2 2 3 3 4 ------ Output Format ------ 3 -1 ------ Explanation ------ In the first test case, the graph forms a triangle with nodes 1-2-3-1, which has a simple cycle of length 3. In the second test case, there is no cycle in the graph. Hence, the output is -1.","solution":"from collections import defaultdict, deque def shortest_cycle_length(N, edges): def bfs(start): dist = [-1] * N parent = [-1] * N q = deque([start]) dist[start] = 0 while q: node = q.popleft() for neighbor in graph[node]: if dist[neighbor] == -1: # Not visited dist[neighbor] = dist[node] + 1 parent[neighbor] = node q.append(neighbor) elif parent[node] != neighbor: # Found a cycle return dist[node] + dist[neighbor] + 1 return float(\'inf\') graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) shortest_cycle = float(\'inf\') for node in range(N): cycle_length = bfs(node) if cycle_length < shortest_cycle: shortest_cycle = cycle_length return -1 if shortest_cycle == float(\'inf\') else shortest_cycle def solve(T, cases): results = [] for case in cases: N, M, edges = case results.append(shortest_cycle_length(N, edges)) return results def read_input_and_solve(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 cases = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 edges = [] for _ in range(M): u, v = map(int, input_lines[index].split()) edges.append((u, v)) index += 1 cases.append((N, M, edges)) return solve(T, cases) # Example usage: # input_data = \\"2n3 3n1 2n2 3n3 1n4 3n1 2n2 3n3 4n\\" # result = read_input_and_solve(input_data) # print(\\"n\\".join(map(str, result)))"},{"question":"Max is a software developer who is working on optimizing social networking features. He needs to analyze the possible arrangements of friends at a round table. Given an integer n, which represents the number of friends, he wants to calculate the number of distinct ways to arrange these friends around the table. Two arrangements are considered the same if you can rotate one to get the other. For each query, compute and print the number of distinct circular arrangements of n friends on a new line. The result can be very large, so print the answer modulo 1000000007. Input Format The first line contains an integer, textit{q}, denoting the number of queries. Each of the textit{q} subsequent lines contains an integer denoting the value of n for a query. Constraints 1 leq q leq 10^5 1 leq n leq 10^9 Output Format For each of the textit{q} queries, print the number of distinct circular arrangements of n friends, modulo 1000000007, on a new line. Sample Input 0 3 1 3 4 Sample Output 0 1 2 6 Explanation 0 We answer the queries as follows: When n=1, there is only one way to arrange one friend around the table. Thus, we print 1. For n=3, there are 2 distinct circular arrangements. (123 and 132, since 231 is just a rotation of 123 and does not count as a distinct arrangement). For n=4, there are 6 distinct circular arrangements. The formula for the number of distinct arrangements is (n-1)!. Thus, we print the results of (n-1)!~text{mod}~1000000007 for each query.","solution":"def factorial_mod(n, mod=1000000007): Computes the factorial of (n-1) % mod. if n == 1: return 1 result = 1 for i in range(2, n): result = (result * i) % mod return result def distinct_arrangements(queries): Given a list of integers representing the number of friends for each query, returns the number of distinct circular arrangements modulo 1000000007 for each query. results = [] for n in queries: results.append(factorial_mod(n)) return results # Example for running the function: # queries = [1, 3, 4] # print(distinct_arrangements(queries))"},{"question":"You are tasked with developing a function that helps determine the smallest set of coins needed to make a given amount of change using a specified set of coin denominations. This problem can be particularly useful in retail environments where cash transactions are processed. The function should take two arguments: 1. An integer representing the `amount` of change required (always a positive number). 2. A list of integers representing the available `denominations` of coins (always a positive list of positive integers and unsorted). The function should return a list of integers representing the coins used to make the change. If it is not possible to make the exact change, the function should return an empty list. Remember to use the least number of coins possible. Examples ``` amount = 11, denominations = [1, 2, 5] Output: [5, 5, 1] or [5, 2, 2, 2] amount = 30, denominations = [25, 10, 5, 1] Output: [25, 5] or [10, 10, 10] amount = 7, denominations = [2, 4] Output: [] amount = 0, denominations = [1, 2, 5] Output: [] ```","solution":"def get_minimum_coins(amount, denominations): Returns the smallest set of coins needed to make the amount using the given denominations. If it is not possible to make the exact change, returns an empty list. if amount == 0: return [] denominations.sort(reverse=True) result = [] for coin in denominations: while amount >= coin: amount -= coin result.append(coin) if amount != 0: return [] return result"},{"question":"You are given an array of integers where each element in the array appears exactly two times, except for one element which appears exactly once. Your task is to find the element that appears only once. Write a function `findUniqueElement(arr)` that takes in an array of integers `arr` and returns the integer that appears only once. Input: - The first line contains an integer `T` - the number of test cases. - Each of the next `T` lines contains an array of integers separated by space. Output: - For each test case, output the integer that appears only once in the given array. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ |arr| ≤ 10^5 - -10^9 ≤ arr[i] ≤ 10^9 SAMPLE INPUT: 2 2 3 5 4 5 3 4 7 7 8 8 9 SAMPLE OUTPUT: 2 9","solution":"def findUniqueElement(arr): This function takes an array of integers and returns the element that appears only once. unique_element = 0 for num in arr: unique_element ^= num # Using XOR to find the unique element return unique_element"},{"question":"During a vacation trip, Jake found an old digital clock in a vintage store. The clock displays time in a 24-hour format \\"HH:MM\\" where \\"HH\\" is the hour and \\"MM\\" is the minute. Interestingly, the clock has some broken segments in its display which can be either on or off. Jake wants to know if it\'s possible to get a specific time displayed correctly using the broken clock. Given the current display of the clock with segments either on or off, and the desired time in the \\"HH:MM\\" format, help Jake determine if it\'s possible to depict the desired time with the current state of the clock\'s segments. Assume: - The clock segments can only turn off broken segments but cannot turn on any segment that is currently off. - Each digit in the time is represented by a 7-segment display. Here is the 7-segment display structure: ``` ---0--- | | 1 2 | | ---3--- | | 4 5 | | ---6--- ``` For example, using the above structure: - Digit \'8\' requires all segments (0, 1, 2, 3, 4, 5, 6) to be on. - Digit \'0\' requires segments (0, 1, 2, 4, 5, 6) to be on, except segment 3. The mapping from digits to their respective segments is as follows: ``` 0 => [0, 1, 2, 4, 5, 6] 1 => [2, 5] 2 => [0, 2, 3, 4, 6] 3 => [0, 2, 3, 5, 6] 4 => [1, 2, 3, 5] 5 => [0, 1, 3, 5, 6] 6 => [0, 1, 3, 4, 5, 6] 7 => [0, 2, 5] 8 => [0, 1, 2, 3, 4, 5, 6] 9 => [0, 1, 2, 3, 5, 6] ``` -----Input----- The first line of the input contains an integer t (1 leq t leq 100) — the number of test cases. Each test case consists of two lines. The first line is a string representing the current state of the clock where \'1\' indicates the segment is on, and \'0\' indicates the segment is off. The length of this string is always 28 (4 digits * 7 segments per digit). The second line contains a string in the \\"HH:MM\\" format — the desired time. -----Output----- For each test case, print \\"YES\\" if it\'s possible to display the desired time with the current state of the clock\'s segments, otherwise print \\"NO\\". -----Examples----- Input 2 1111111111111111111111111111 12:34 0110110110110110110110110110 23:45 Output YES NO Explanation: In the first test case, all segments are available, so it\'s always possible to display \\"12:34\\". In the second test case, upon checking the available segments, it is not possible to form \\"23:45\\" with the given broken segments.","solution":"# Function to determine if we can display the desired time with the current state of the clock\'s segments def can_display_time(current, desired): # Mapping from digit to their respective segments segments = { \'0\': [0, 1, 2, 4, 5, 6], \'1\': [2, 5], \'2\': [0, 2, 3, 4, 6], \'3\': [0, 2, 3, 5, 6], \'4\': [1, 2, 3, 5], \'5\': [0, 1, 3, 5, 6], \'6\': [0, 1, 3, 4, 5, 6], \'7\': [0, 2, 5], \'8\': [0, 1, 2, 3, 4, 5, 6], \'9\': [0, 1, 2, 3, 5, 6] } # Splitting and processing each digit from the desired time desired_time = [desired[0], desired[1], desired[3], desired[4]] for i, digit in enumerate(desired_time): digit_segments = segments[digit] start_index = i * 7 for segment in digit_segments: if current[start_index + segment] == \'0\': return \\"NO\\" return \\"YES\\" # Main function to process multiple test cases def process_test_cases(test_cases): results = [] for current, desired in test_cases: results.append(can_display_time(current, desired)) return results"},{"question":"You are given a list of meeting times with their start and end times, represented by hour-minutes pairs in 24-hour format. Write a function to merge overlapping meetings and return a list of the consolidated meeting times. # Example: Input: ``` meetings = [(\'09:00\', \'10:30\'), (\'11:00\', \'12:00\'), (\'09:15\', \'10:00\'), (\'12:30\', \'14:00\'), (\'14:00\', \'15:00\')] ``` Output: ``` merged_meetings = [(\'09:00\', \'10:30\'), (\'11:00\', \'12:00\'), (\'12:30\', \'15:00\')] ``` # Additional Example: Input: ``` meetings = [(\'08:00\', \'09:15\'), (\'09:00\', \'10:30\'), (\'10:15\', \'11:30\'), (\'11:45\', \'13:00\')] ``` Output: ``` merged_meetings = [(\'08:00\', \'11:30\'), (\'11:45\', \'13:00\')] ``` # Note: - The function should handle cases where meetings exactly overlap as well as where there is an overlap in a portion of the meeting time. - If a meeting\'s end time is exactly the same as the next meeting\'s start time, they should be merged. - The input meeting times are in 24-hour format and should be returned in the same format.","solution":"def merge_meetings(meetings): Merge overlapping meeting times. :param meetings: A list of tuples where each tuple contains the start and end time of a meeting in \'HH:MM\' format. :return: A list of tuples with consolidated meeting times. # Helper function to convert time in \'HH:MM\' format to minutes def to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes # Helper function to convert minutes back to \'HH:MM\' format def to_time(minutes): hours = minutes // 60 minutes = minutes % 60 return f\\"{hours:02d}:{minutes:02d}\\" # Convert meeting times to minutes for easier comparison and sorting meetings_in_minutes = [(to_minutes(start), to_minutes(end)) for start, end in meetings] # Sort meetings by start time (and by end time if start times are the same) meetings_in_minutes.sort() merged_meetings = [] for start, end in meetings_in_minutes: if not merged_meetings or merged_meetings[-1][1] < start: merged_meetings.append((start, end)) else: merged_meetings[-1] = (merged_meetings[-1][0], max(merged_meetings[-1][1], end)) # Convert merged meeting times back to \'HH:MM\' format return [(to_time(start), to_time(end)) for start, end in merged_meetings]"},{"question":"In data processing and analysis tasks, it is often necessary to summarize numerical data in meaningful ways. One common technique is to compute the *running average*, which provides insight into trends over time by smoothing out short-term fluctuations. You are given a list of integers representing measurements taken at regular intervals. You need to calculate the running averages at each position in the list. The running average at a position `i` is the average of the elements from the start of the list up to the position `i`. Write a function `running_average` that takes a list of integers `measurements` and returns a list of floats where each float represents the running average at that position, rounded to two decimal places. Constraints - The length of `measurements` will be between 1 and 1000. - Each element in `measurements` will be an integer in the range [-1000, 1000]. Function Signature ```python def running_average(measurements: List[int]) -> List[float]: ``` Example ```python assert running_average([2, 4, 6, 8, 10]) == [2.00, 3.00, 4.00, 5.00, 6.00] assert running_average([1, 3, 5, 7, 9]) == [1.00, 2.00, 3.00, 4.00, 5.00] ``` Explanation For the first example: - Position 0: running average is `2.00` - Position 1: running average is `(2 + 4) / 2 = 3.00` - Position 2: running average is `(2 + 4 + 6) / 3 = 4.00` - Position 3: running average is `(2 + 4 + 6 + 8) / 4 = 5.00` - Position 4: running average is `(2 + 4 + 6 + 8 + 10) / 5 = 6.00` For the second example: - Position 0: running average is `1.00` - Position 1: running average is `(1 + 3) / 2 = 2.00` - Position 2: running average is `(1 + 3 + 5) / 3 = 3.00` - Position 3: running average is `(1 + 3 + 5 + 7) / 4 = 4.00` - Position 4: running average is `(1 + 3 + 5 + 7 + 9) / 5 = 5.00` Hence, the function must return the respective running averages for the given list of measurements.","solution":"from typing import List def running_average(measurements: List[int]) -> List[float]: Given a list of integers representing measurements taken at regular intervals, this function returns a list of floats where each float represents the running average at that position. if not measurements: return [] running_sums = 0 running_averages = [] for i in range(len(measurements)): running_sums += measurements[i] running_avg = round(running_sums / (i + 1), 2) running_averages.append(running_avg) return running_averages"},{"question":"Given a binary tree, your task is to implement a function that finds the maximum depth of the binary tree. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Input You are given a binary tree in the following format: Each node of the tree will be represented as a tuple `(value, left, right)`, where `value` is the value of the node, `left` is the left child node, and `right` is the right child node. If a child node does not exist, it will be represented as `None`. For example, a tree like this: ``` 1 / 2 3 / / 4 5 6 ``` Will be represented as: ```python (1, (2, (4, None, None), None), (3, (5, None, None), (6, None, None))) ``` Output The output should be a single integer representing the maximum depth of the binary tree. Examples Input ```python (1, (2, (4, None, None), None), (3, (5, None, None), (6, None, None))) ``` Output 4 Input ```python (1, None, None) ``` Output 1 Input ```python (1, (2, (3, (4, None, None), None), None), None) ``` Output 4 Input ```python (1, (2, None, None), (3, None, None)) ``` Output 2 Note Feel free to use any language you like to solve the problem. Explanation In the first example, the tree has a maximum depth of 3 because the longest path from the root to a leaf is `1->2->4` or `1->3->5`. In the second example, the tree has a single node and thus a depth of 1. In the third example, the longest path is `1->2->3->4`, giving a depth of 4. In the fourth example, the longest path is from the root to either of the leaf nodes `2` or `3`.","solution":"def max_depth(tree): Returns the maximum depth of the binary tree. The input tree is represented as a tuple (value, left, right), where value is the node\'s value, left is the left child, and right is the right child. # If the tree is None, the depth is 0 if tree is None: return 0 # Extract the left and right subtrees _, left, right = tree # Recursively find the depth of the left and right subtrees left_depth = max_depth(left) right_depth = max_depth(right) # The depth of the tree is the greater of the two subtrees\' depths, plus one for the current node return max(left_depth, right_depth) + 1"},{"question":"# Find the Maximum Consecutive Sum John loves analyzing sequences of numbers. He\'s specifically interested in finding the maximum sum of any consecutive subarray in a given array of integers. Unfortunately, the size of the array can be quite large, and John\'s current solution is not efficient enough. Can you help John optimize his solution? Task Write a function `max_consecutive_sum(nums)` that takes a list of integers `nums` and returns the maximum sum of any consecutive subarray within `nums`. Input - a list of integers `nums` where `1 <= len(nums) <= 10^5` and `-10^5 <= nums[i] <= 10^5` Output - an integer representing the maximum sum of any consecutive subarray within the input list. Examples ```python max_consecutive_sum([1, -2, 3, 4, -1, 2, 1, -5, 4]) # Output: 9 (subarray is [3, 4, -1, 2, 1]) max_consecutive_sum([-2, -3, -1, -4]) # Output: -1 (subarray is [-1]) max_consecutive_sum([5, 4, -1, 7, 8]) # Output: 23 (subarray is [5, 4, -1, 7, 8]) ``` Note A common algorithm to solve this problem efficiently is Kadane\'s Algorithm, running in O(n) time complexity.","solution":"def max_consecutive_sum(nums): Returns the maximum sum of any consecutive subarray within nums using Kadane\'s Algorithm. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a program that counts the number of unique substrings of length K within a given string. A substring is a contiguous sequence of characters within a string. Input A single line containing an integer K followed by a string S, separated by a space. K represents the desired length of substrings and S is the input string. Output Output the number of unique substrings of length K. If K is greater than the length of the string S, output 0. Constraints 1 <= |S| <= 1000 1 <= K <= 1000 Examples Input 3 abcabc Output 3 Input 2 aabaab Output 3 Explanation In the first example, the unique substrings of length 3 in \'abcabc\' are \'abc\', \'bca\', and \'cab\'. In the second example, the unique substrings of length 2 in \'aabaab\' are \'aa\', \'ab\', and \'ba\'.","solution":"def count_unique_substrings(k, s): Returns the number of unique substrings of length k in the string s. Parameters: k (int): The length of the desired substrings. s (str): The input string. Returns: int: The number of unique substrings of length k. if k > len(s): return 0 unique_substrings = set() for i in range(len(s) - k + 1): substring = s[i:i+k] unique_substrings.add(substring) return len(unique_substrings)"},{"question":"In Farland, there are n cities connected by n - 1 roads in such a way that there is exactly one path between any two cities. Each city has a certain number of residents, and there is exactly one hospital in one of the cities. Each day, ambulances travel from the hospital to any city through the roads to provide medical services. The effectiveness of the medical response depends on minimizing the maximum distance an ambulance has to travel to any city. Given the number of residents in each city, you need to determine the best city to locate the hospital such that the maximum distance between the hospital and any city is minimized. If there are multiple cities that satisfy the condition, choose the one with the smallest index. Input The first line contains integer n (1 ≤ n ≤ 10^5) — the number of cities. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 10^9), where ri is the number of residents in the i-th city. The next n - 1 lines contain the descriptions of roads between the cities. Each line has the form ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi), where ai and bi are the numbers of the cities connected by a road. Output In a single line, print the 1-based index of the best city to locate the hospital such that the maximum distance between the hospital and any city is minimized. Examples Input 4 3 6 2 4 1 2 2 3 2 4 Output 2 Input 6 1 2 1 3 4 5 1 2 1 3 3 4 3 5 5 6 Output 3 Input 5 10 20 30 40 50 2 1 2 3 3 4 4 5 Output 3 Note In the first example, the best city to place the hospital is city 2, since it minimizes the maximum distance to any other city. In the second example, the best city to place the hospital is city 3. In the third example, the best city to place the hospital is city 3, considering the direct and minimal path to all other cities.","solution":"from collections import defaultdict, deque def farthest_node_and_dist(graph, start): visited = set() queue = deque([(start, 0)]) farthest_node, max_dist = start, 0 while queue: current, dist = queue.popleft() if dist > max_dist: farthest_node, max_dist = current, dist visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, dist + 1)) return farthest_node, max_dist def best_city_for_hospital(n, residents, roads): if n == 1: return 1 graph = defaultdict(list) for a, b in roads: graph[a].append(b) graph[b].append(a) # Step 1: Find the farthest node from an arbitrary start node (say node 1) node1, _ = farthest_node_and_dist(graph, 1) # Step 2: Then find the farthest node from node1 node2, dist = farthest_node_and_dist(graph, node1) # Step 3: Find the middle point(s) of the path between node1 and node2 path = [] visited = set() queue = deque([(node2, [node2])]) while queue: current, path_so_far = queue.popleft() if current == node1: path = path_so_far break visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, path_so_far + [neighbor])) middle_index = dist // 2 if dist % 2 == 0: best_city = min(path[middle_index], path[middle_index + 1]) else: best_city = path[middle_index] return best_city"},{"question":"Lena is a software developer who has been assigned a task to keep track of the incoming customer requests. Each customer request has a priority value associated with it. Lena needs to determine how many requests exceed a given priority threshold T. Given a list of priority values for N customer requests, output the number of requests that have a priority value greater than T. ------ Input Format ------ The first line of input contains an integer N, the number of customer requests. The second line contains N integers representing the priority values of the customer requests. The third line contains a single integer T, the priority threshold. ------ Output Format ------ Output a single integer in a single line - the number of requests that have a priority value greater than T. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ (priority value of each request) ≤ 100 1 ≤ T ≤ 100 ----- Sample Input 1 ------ 5 12 25 8 30 10 15 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ There are 5 customer requests with priorities [12, 25, 8, 30, 10]. Out of these, only the second (25) and the fourth (30) requests have a priority value greater than 15. Hence, the number of requests that exceed the threshold is 2. ----- Sample Input 2 ------ 4 50 60 70 80 65 ----- Sample Output 2 ------ 2 ----- Explanation 2 ------ There are 4 customer requests with priorities [50, 60, 70, 80]. Out of these, only the third (70) and the fourth (80) requests have a priority value greater than 65. Hence, the number of requests that exceed the threshold is 2. ----- Sample Input 3 ------ 3 20 25 25 25 ----- Sample Output 3 ------ 0 ----- Explanation 3 ------ There are 3 customer requests with priorities [20, 25, 25]. None of the requests have a priority value greater than 25. Hence, the number of requests that exceed the threshold is 0. ----- Sample Input 4 ------ 6 15 19 22 25 18 24 20 ----- Sample Output 4 ------ 3 ----- Explanation 4 ------ There are 6 customer requests with priorities [15, 19, 22, 25, 18, 24]. Out of these, the third (22), fourth (25), and sixth (24) requests have a priority value greater than 20. Hence, the number of requests that exceed the threshold is 3.","solution":"def count_requests_above_threshold(requests, threshold): Returns the number of requests with priority values greater than the given threshold. Args: requests (list of int): The priority values of the customer requests. threshold (int): The priority threshold. Returns: int: The number of requests with priority values greater than the threshold. count = 0 for priority in requests: if priority > threshold: count += 1 return count"},{"question":"Trixie is an avid solver of puzzles and loves experimenting with new challenges. She recently came across an interesting problem involving arrays and wants your help to solve it. Given an array `A` of `n` integers, she wants to determine the smallest length of a contiguous subarray such that the sum of the subarray is greater than or equal to a given integer `S`. If no such subarray exists, she needs to know as well. Your task is to help Trixie by writing a program that can find this smallest subarray length. Input: - The first line contains two integers `n` and `S` (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9). - The second line contains `n` integers, representing the array `A` (0 ≤ Ai ≤ 10^4). Output: - Output the length of the smallest contiguous subarray with a sum of at least `S`. If there is no such subarray, output `0`. Examples: Input: 8 15 1 2 3 4 5 6 7 8 Output: 2 Input: 5 100 1 2 3 4 5 Output: 0 Explanation: In the first example, the subarray [7, 8] has a sum of 15, which is ≥ 15 and is of length 2, which is the smallest possible for the given array. In the second example, no subarray can reach the sum of 100, so the output is 0.","solution":"def smallest_subarray_length(n, S, A): Returns the length of the smallest contiguous subarray whose sum is at least S. If no such subarray exists, returns 0. # Initialize variables min_len = float(\'inf\') subarray_sum = 0 start = 0 for end in range(n): subarray_sum += A[end] # While the current subarray\'s sum is greater than or equal to S while subarray_sum >= S: # Update the minimum length min_len = min(min_len, end - start + 1) # Remove the starting element to potentially find a smaller subarray subarray_sum -= A[start] start += 1 # If min_len was updated, return it. Otherwise, return 0 as no valid subarray was found. return min_len if min_len != float(\'inf\') else 0"},{"question":"Alice loves playing board games. Recently, she bought a game where she needs to find paths in a grid. The grid is represented by a 2D array of size N x M, and each cell contains an integer that represents the difficulty of the cell. The game requires Alice to find the path from the top-left corner to the bottom-right corner which has the lowest cost. The cost of a path is calculated as the sum of the difficulties of the cells in the path. Alice can only move either right or down at any point in time. She needs a program to help her find the minimum path cost. Write a program to determine the minimum cost path in the grid. Input The input consists of multiple test cases. The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers, N and M, the dimensions of the grid. - The next N lines each contain M integers, representing the difficulty of each cell in the grid. Output For each test case, output a single integer, the minimum path cost from the top-left corner to the bottom-right corner of the grid. Example Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 Output: 7 3","solution":"def min_path_cost(grid): N = len(grid) M = len(grid[0]) # Initialize dp table dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][M-1] def process_input(input_text): input_lines = input_text.strip().split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N, M = map(int, input_lines[index].split()) grid = [] for i in range(N): grid.append(list(map(int, input_lines[index + 1 + i].split()))) result = min_path_cost(grid) results.append(result) index += N + 1 return results def min_path_costs(input_text): results = process_input(input_text) for result in results: print(result)"},{"question":"Alice is developing a simple password strength checker for her application. A password is considered strong if it meets the following criteria: 1. It has at least 8 characters. 2. It contains at least one lowercase letter. 3. It contains at least one uppercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()-+ She needs a function to validate password strength according to the above rules. -----Input----- The input consists of a single line containing a string s (1 leq text{length}(s) leq 100), the password that needs to be checked. -----Output----- Output a single line with the word \\"Strong\\" if the password meets all the criteria, otherwise output \\"Weak\\". -----Examples----- Sample Input 1: Abc!1234 Sample Output 1: Strong Sample Input 2: password Sample Output 2: Weak Sample Input 3: A1! Sample Output 3: Weak","solution":"import re def check_password_strength(password): Checks if the given password is strong based on the criteria: 1. At least 8 characters. 2. At least one lowercase letter. 3. At least one uppercase letter. 4. At least one digit. 5. At least one special character from !@#%^&*()-+ :param password: The password to check :return: \\"Strong\\" if all criteria are met, otherwise \\"Weak\\" if len(password) < 8: return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[0-9]\', password): return \\"Weak\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"Weak\\" return \\"Strong\\""},{"question":"Given a sequence of integers in an array, your task is to answer multiple range queries efficiently. Each query will ask you to find the minimum value in a specified subarray. # Constraints: - The length of the array **n** will be 2 × 10⁵ at most. - Each element in the array **a[i]** will be in the range -10⁹ to 10⁹. - You will receive **q** queries (1 ≤ q ≤ 2 × 10⁵). - Each query specifies a subarray by its starting and ending indices, inclusive and 1-based. # Input Format: - The first line contains an integer **n**. - The second line contains **n** space-separated integers, representing the array **a**. - The third line contains an integer **q**. - The next **q** lines each contain two space-separated integers **l** and **r** (1 ≤ l ≤ r ≤ n), representing the start and end indices of the subarray, respectively. # Output Format: For each query, output the minimum value in the specified subarray. # Example: Input: ``` 6 1 3 -1 7 9 4 3 1 3 2 5 4 6 ``` Output: ``` -1 -1 4 ``` # Explanation: - For the first query (1, 3), the subarray is [1, 3, -1]. The minimum value is -1. - For the second query (2, 5), the subarray is [3, -1, 7, 9]. The minimum value is -1. - For the third query (4, 6), the subarray is [7, 9, 4]. The minimum value is 4. # Additional Information: - You may use data structures like Segment Tree or Sparse Table to make querying efficient. - Focus on optimizing both the space and time complexity for handling up to 2 × 10⁵ elements and queries efficiently.","solution":"import sys import math class RangeMinQuery: def __init__(self, array): n = len(array) self.n = n self.log = [0] * (n + 1) self.st = [[0] * (math.floor(math.log2(n)) + 1) for _ in range(n)] # Precompute log values for efficiency for i in range(2, n + 1): self.log[i] = self.log[i // 2] + 1 # Initialize Sparse Table for i in range(n): self.st[i][0] = array[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: self.st[i][j] = min(self.st[i][j - 1], self.st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 def query(self, L, R): j = self.log[R - L + 1] return min(self.st[L][j], self.st[R - (1 << j) + 1][j]) def process_queries(n, array, queries): rmq = RangeMinQuery(array) results = [] for l, r in queries: results.append(rmq.query(l - 1, r - 1)) return results"},{"question":"You are given two strings `s` and `t` of length `n` each consisting of lowercase Latin letters. You can choose any character in `s` and swap it with any character in `t`. Each swap operation is counted as one move. You need to determine the minimum number of swap operations required to make `s` and `t` identical, or return \\"-1\\" if it is not possible. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the strings. The second line contains a string `s` consisting of `n` lowercase Latin letters. The third line contains a string `t` consisting of `n` lowercase Latin letters. Output Print the minimum number of swap operations required, or print \\"-1\\" if it is not possible to make `s` and `t` identical. Examples Input 4 abcd cdab Output 2 Input 3 abc bca Output 2 Input 2 aa ab Output -1 Note In the first sample, you can swap: * `a` from `s` with `c` from `t` to get `cbad` and `adab` * `b` from `s` with `d` from `t` to get `cdab` and `abcd` In the second sample, you can swap: * `a` from `s` with `b` from `t` to get `bac` and `aca` * `a` from `s` with `c` from `t` to get `bca` and `aab` In the third sample, it is not possible to make `s` and `t` identical.","solution":"def min_swaps_to_identical(n, s, t): if sorted(s) != sorted(t): return -1 swaps = 0 s = list(s) t = list(t) for i in range(n): if s[i] != t[i]: index_in_t = t.index(s[i], i) t[i], t[index_in_t] = t[index_in_t], t[i] swaps += 1 return swaps"},{"question":"Alex is organizing a coding competition and has designed a scoreboard to keep track of the participants\' scores. The scoreboard starts with all scores set to zero. Throughout the competition, participants can submit solutions to problems, and each submission increases their score by a certain value. However, to keep things interesting, Alex wants to add a feature where participants can reset their scores to zero at any point in the competition. Your task is to help Alex by writing a program that handles score updates and reset operations. The program needs to process a number of operations that either update a participant\'s score or reset it to zero. Input The first line contains an integer N, the number of participants (1 ≤ N ≤ 100). The second line contains an integer M, the number of operations (1 ≤ M ≤ 1000). The next M lines describe the operations in the following format: - \\"1 X S\\" to indicate that participant X (1 ≤ X ≤ N) has submitted a solution and earned S points (1 ≤ S ≤ 100). - \\"2 X\\" to indicate that participant X has reset their score to zero. Output For each participant, the output should be the final score after all operations have been processed. Example Input: 3 5 1 1 10 1 2 20 2 1 1 3 30 1 1 40 Output: 40 20 30 Explanation: - Participant 1 initially gains 10 points, then resets to 0, and finally gains 40 points. - Participant 2 gains 20 points and does not reset. - Participant 3 gains 30 points and does not reset.","solution":"def process_operations(num_participants, num_operations, operations): scores = [0] * num_participants for operation in operations: op = operation.split() if op[0] == \\"1\\": participant = int(op[1]) - 1 score_add = int(op[2]) scores[participant] += score_add elif op[0] == \\"2\\": participant = int(op[1]) - 1 scores[participant] = 0 return scores"},{"question":"John is a software engineer who loves solving algorithmic problems. He especially enjoys writing optimized code for sorting challenges. Today, he\'s stumbled upon an interesting twist on a standard sorting problem, and he needs your help. The problem requires sorting an array of integers, but with a catch: you need to sort the absolute values of the integers while keeping the original integer values. For example, given the array [-5, -10, 1, 3, -2], the sorted output by absolute values should be [1, -2, 3, -5, -10]. Write a function that takes an integer array as input and returns a new array sorted by the absolute values of the integers while retaining their original signs. Function Signature: ```python def sort_by_absolute(arr: List[int]) -> List[int]: ``` Input: - An integer T, the number of test cases. - For each test case: - An integer N, the number of integers in the array. - An array of N integers. Output: - For each test case, return the sorted array by absolute values. Constraints: - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 100 - -1000 ≤ arr[i] ≤ 1000 Example Input: ``` 2 5 -5 -10 1 3 -2 4 2 -4 6 -3 ``` Example Output: ``` [1, -2, 3, -5, -10] [2, -3, -4, 6] ```","solution":"from typing import List def sort_by_absolute(arr: List[int]) -> List[int]: Sorts the list of integers by their absolute values while retaining the original sign. return sorted(arr, key=lambda x: abs(x))"},{"question":"Alice is an avid fan of prime numbers and enjoys experimenting with them in various ways. Recently, she came across an interesting property of numbers and decided to challenge you with a problem related to it. Given a number n, she wants to find the largest prime factor of n. A prime factor of n is a prime number that divides n without leaving a remainder. Your task is to find the largest prime factor of a given number n. Input The input consists of a single integer n (2 ≤ n ≤ 10^12). Output Output a single integer which is the largest prime factor of n. Examples Input 56 Output 7 Input 63 Output 7 Input 97 Output 97 Note In the first test case, the prime factors of 56 are 2, 2, 2, and 7. The largest prime factor is 7. In the second test case, the prime factors of 63 are 3, 3, and 7. The largest prime factor is 7. In the third test case, the number 97 itself is a prime number, hence the largest prime factor is 97.","solution":"def largest_prime_factor(n): Function to find the largest prime factor of a given number n. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True max_prime = -1 # Divide n by 2 until it becomes odd while n % 2 == 0: max_prime = 2 n //= 2 # n must be odd at this point, thus a skip of 2 is used (i.e., 3, 5, 7, 9, 11, ...) for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: # While i divides n, store i and divide n max_prime = i n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: max_prime = n return max_prime"},{"question":"Marc loves to explore new places and wants to implement a maze-solving algorithm to help him find the shortest path from the entrance to the exit of a maze. The maze is represented as a 2D grid where each cell is either passable (\'.\') or a wall (\'#\'). Marc can move up, down, left, or right but cannot move diagonally. Your task is to help Marc by writing a function that finds the shortest path from the entrance to the exit of the maze. The entrance of the maze is at the top-left corner, which is always passable, and the exit is at the bottom-right corner, which is also passable. If there is no possible path from the entrance to the exit, the function should return -1. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the maze, respectively. The next n lines each contain a string of length m consisting of the characters \'.\' and \'#\', representing the maze. -----Output----- Print the length of the shortest path from the entrance to the exit or -1 if no such path exists. -----Examples----- Input 5 5 ..... .#.#. .#.#. .#.#. ..... Output 8 Input 3 3 .#. # .#. Output -1","solution":"from collections import deque def shortest_path(maze, n, m): # Directions for moving in the maze (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Helper function to check if a position is valid and passable def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' # Queue for BFS, initialized with the entrance position and step count queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we reached the exit if x == n - 1 and y == m - 1: return dist # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If exit is not reachable return -1 # Example usage: def maze_solver(maze_str): maze_lines = maze_str.strip().split(\'n\') n, m = map(int, maze_lines[0].split()) maze = [list(line.strip()) for line in maze_lines[1:]] return shortest_path(maze, n, m)"},{"question":"In a faraway kingdom called Algorithmland, there are n fortresses connected by m bidirectional roads. The roads are known to be very old, and it is essential to occasionally close some of these roads for repairs to prevent accidents. The kingdom\'s supervisors wish to ensure that they can still send messages between all fortresses while the repairs are conducted. The kingdom\'s graph of fortresses and roads forms a connected graph. Your job is to help the supervisors by finding the minimum number of roads that need to be closed while still allowing messages to be sent between every pair of fortresses using the remaining roads. In other words, you need to ensure the graph remains connected while removing the fewest edges possible. Input The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, n - 1 ≤ m ≤ 2·10^5) — the number of fortresses and the number of roads respectively. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road connecting fortress u and fortress v. It is guaranteed that no two roads connect the same pair of fortresses, and the graph is initially connected. Output Output a single integer, the minimum number of roads that need to be removed such that the graph remains connected. Example Input 6 7 1 2 2 3 3 4 4 5 3 5 5 6 2 6 Output 2 Note In the provided example, one possible solution is to remove the roads (3, 5) and (2, 6). After removing these two roads, the remaining roads still connect all the fortresses, and therefore the graph remains connected.","solution":"def min_roads_to_remove(n, m, roads): Returns the minimum number of roads that need to be removed such that the graph remains connected. # The minimum number of roads to be removed while maintaining connectivity return m - (n - 1) # Example usage: # n = 6 # m = 7 # roads = [(1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (5, 6), (2, 6)] # Result should be 2 print(min_roads_to_remove(6, 7, [(1, 2), (2, 3), (3, 4), (4, 5), (3, 5), (5, 6), (2, 6)])) # Output: 2"},{"question":"You are given a list of strings, each containing several words separated by spaces. Your task is to implement an algorithm that will find the longest word in each string and its length. In case of a tie (multiple words with the same length), return the one that appears first in the string. Input The first line of input will contain an integer T, the number of test cases. Each of the following T lines will consist of a single string, S. Output For each test case, output the longest word in the string and its length, separated by a space. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 The string S will contain only lowercase letters and spaces. No punctuation marks will be present. SAMPLE INPUT 3 this is an example string coding is fun when it works python programming language SAMPLE OUTPUT example 7 coding 6 programming 11 Explanation In the first case, the longest word is \\"example\\" which has 7 characters. In the second case, the longest word is \\"coding\\" which has 6 characters. In the third case, the longest word is \\"programming\\" which has 11 characters.","solution":"def find_longest_word(strings): Given a list of strings, finds the longest word in each string and returns the word along with its length. Parameters: strings (list of str): A list containing the input strings. Returns: list of tuple: A list of tuples where each tuple contains the longest word in the respective input string and its length. results = [] for string in strings: words = string.split() longest_word = max(words, key=len) results.append((longest_word, len(longest_word))) return results def process_input_output(): Handles input and output for the problem. Reads input from stdin, processes it, and prints the results. import sys input = sys.stdin.read data = input().split(\'n\') T = int(data[0]) strings = data[1:T+1] results = find_longest_word(strings) for result in results: print(f\\"{result[0]} {result[1]}\\") # Example usage: # if __name__ == \\"__main__\\": # process_input_output()"},{"question":"You are managing a library\'s book borrowing system. The library has a list of books, and each book has a specific ID (a positive integer) and a borrowing interval represented as a pair of positive integers, start and end, that show the period of time (in days) a member can borrow the book. The intervals are inclusive of the start and end day. Your task is to determine the maximum number of books that can be borrowed without overlapping borrowing intervals. Overlapping intervals are defined as two books that have any day in common within their borrowing intervals. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 100 - 1 ≤ ID_i ≤ 1000 - 1 ≤ start_i < end_i ≤ 365 -----Input----- Input is given from Standard Input in the following format: ``` N ID_1 start_1 end_1 ID_2 start_2 end_2 : ID_N start_N end_N ``` -----Output----- Print the maximum number of books that can be borrowed without overlapping intervals. -----Sample Input----- 3 101 1 10 102 5 15 103 20 30 -----Sample Output----- 2 The first and the third books can be borrowed without overlapping intervals. The second book overlaps with the first one, so including it in the borrowing list would leave only one non-overlapping book. Thus, the optimal solution is to borrow the first and third books, giving a maximum of 2 books.","solution":"def max_non_overlapping_books(n, book_intervals): # Sort book intervals by end time book_intervals.sort(key=lambda x: x[2]) # Initialize counters max_books = 0 last_end_time = 0 for book_id, start, end in book_intervals: if start > last_end_time: # If current book\'s start time is greater than last chosen end time, select this book max_books += 1 last_end_time = end return max_books # Define function to parse input def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) book_intervals = [] for i in range(n): book_id = int(data[1 + 3 * i]) start = int(data[2 + 3 * i]) end = int(data[3 + 3 * i]) book_intervals.append((book_id, start, end)) return n, book_intervals"},{"question":"Given a linked list where each node contains both a unique integer value and a next pointer to the next node in the list, your task is to reverse the linked list iteratively and return the new head of the reversed list. Example 1: Input: Head of the linked list: 1 -> 2 -> 3 -> 4 -> 5 Output: Head of the reversed linked list: 5 -> 4 -> 3 -> 2 -> 1 Example 2: Input: Head of the linked list: 10 -> 20 -> 30 Output: Head of the reversed linked list: 30 -> 20 -> 10 Your Task: You don\'t need to read input or print anything. Complete the function reverseList() which takes the head of the linked list as input parameter and returns the new head of the reversed linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of nodes in the linked list ≤ 1000","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseList(head: ListNode) -> ListNode: Reverse the given linked list iteratively and return the new head. prev = None current = head while current: next_node = current.next # Remember next node current.next = prev # Reverse the link prev = current # Move prev up current = next_node # Move current up return prev # prev will be the new head at the end"},{"question":"X is solving a jigsaw puzzle with N pieces, where each piece has a unique number from 1 to N written on it. However, as X was sorting the pieces, he realized that there was one piece missing. Help X identify the missing piece. You are given N-1 integers, representing the numbers on the remaining pieces. Write a program to find the missing number. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the total number of pieces. - The second line contains N-1 space-separated integers, representing the numbers on the remaining pieces. ------ Output Format ------ For each test case, output on a new line the missing number. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ each of the N-1 integers ≤ N ----- Sample Input 1 ------ 3 5 1 2 3 5 3 1 3 4 1 2 3 ----- Sample Output 1 ------ 4 2 4 ------ Explanation 1 ------ Test case 1: The total pieces are 1, 2, 3, 4, 5. The pieces present are 1, 2, 3, and 5. Therefore, the missing piece is 4. Test case 2: The total pieces are 1, 2, 3. The pieces present are 1 and 3. Therefore, the missing piece is 2. Test case 3: The total pieces are 1, 2, 3, 4. The pieces present are 1, 2, and 3. Therefore, the missing piece is 4.","solution":"def find_missing_piece(T, test_cases): Finds the missing piece in each test case. Parameters: T : int : number of test cases test_cases : list of tuples : each tuple contains (N, pieces_list) Returns: list : list of missing pieces for each test case missing_pieces = [] for case in test_cases: N, pieces = case total_sum = sum(range(1, N + 1)) current_sum = sum(pieces) missing_pieces.append(total_sum - current_sum) return missing_pieces"},{"question":"Catherine loves playing a word guessing game with her friends. In this game, every player is given a secret word `s`, and their goal is to guess whether this word can be rearranged to form a palindrome. A string is called a palindrome if it reads the same backward as forward. Catherine needs a tool to quickly determine if the given word can be rearranged to form a palindrome. Given a string `s`, determine if it is possible to rearrange it into a palindrome. -----Input----- The input consists of a single string `s` (1 ≤ |s| ≤ 10^5), which consists of only lowercase English alphabets. -----Output----- Print \\"Yes\\" if the string `s` can be rearranged into a palindrome, and \\"No\\" otherwise. You can print each letter in arbitrary case (lower or upper). -----Examples----- Input civic Output Yes Input ivicc Output Yes Input hello Output No -----Note----- In the first example, the string \\"civic\\" is already a palindrome. In the second example, the string \\"ivicc\\" can be rearranged to \\"civic\\" which is a palindrome. In the third example, there is no way to rearrange the letters of \\"hello\\" to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Args: s (str): The input string consisting of only lowercase English alphabets. Returns: str: \\"Yes\\" if the string can be rearranged to form a palindrome, \\"No\\" otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"Yes\\" if odd_count <= 1 else \\"No\\""},{"question":"Given a string `s` consisting of lowercase alphabets, your task is to determine the frequency of the longest palindromic substring that appears in `s`. A palindromic substring is a sequence of characters that reads the same backward as forward. If there are multiple longest palindromic substrings of the same length, you only need to count the frequency of one of them. Write a function `longest_palindromic_substring_frequency(s) -> int` that takes a string `s` as input and returns an integer representing the frequency of the longest palindromic substring within `s`. -----Input----- - A single string `s` where 1 leq len(s) leq 10^5. -----Output----- - A single integer, which is the frequency of the longest palindromic substring in the string `s`. -----Examples----- Sample Input: \\"abcbaxyzcbba\\" Sample Output: 3 Sample Input: \\"forgeeksskeegfor\\" Sample Output: 2 # Explanation For the first sample input, the longest palindromic substrings are \\"abcbax\\" and \\"xabcba\\". Both have a length of 6, the frequency of either \\"abcbax\\" is 1 and \\"xabcba\\" is 2. Hence, the output is 3. For the second sample input, the longest palindromic substring is \\"geeksskeeg\\", and it appears twice in the string. -----Notes----- - Any of the longest palindromic substrings appearing in `s` should be counted. - Consider edge cases where the entire string may or may not be a palindrome.","solution":"def longest_palindromic_substring_frequency(s): def longest_palindromic_substring(s): n = len(s) if n == 0: return \\"\\" # Table to store length of all palindromic substrings. dp = [[0] * n for _ in range(n)] start, max_length = 0, 1 # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True start = i max_length = length return s[start:start + max_length] # Find the longest palindromic substring longest_palindrome = longest_palindromic_substring(s) # Count the frequency of the longest palindromic substring in the given string return s.count(longest_palindrome)"},{"question":"You are given a computer system that processes logs to keep track of various events. Each log entry has a unique timestamp (an integer) and an event type (a string). The task is to determine the most frequent event type in a given list of log entries. In case of a tie (i.e., multiple event types have the same highest frequency), return the event type that appeared first among the tied event types. -----Input----- The first line of the input contains an integer ( n ) (1 ≤ ( n ) ≤ ( 10^5 )), which represents the number of log entries. The next ( n ) lines each contain an integer ( t ) (1 ≤ ( t ) ≤ ( 10^9 )) and a string ( e ) (1 ≤ | ( e ) | ≤ 20), where ( t ) is the timestamp of the log entry and ( e ) is the event type. -----Output----- Print the most frequent event type from the log entries. If there is a tie, print the event type that appeared first among those with the highest frequency. -----Example----- Input 5 1 login 2 logout 3 login 4 download 5 login Output login Input 4 1 start 2 start 3 reboot 4 reboot Output start -----Note----- In the first example, \'login\' appears 3 times, which is more frequent than any other event type. In the second example, both \'start\' and \'reboot\' appear 2 times, but \'start\' appears first. Therefore, \'start\' is the most frequent event type according to the tie-breaking rule.","solution":"def most_frequent_event(log_entries): Determine the most frequent event type. In case of a tie, return the event type that appeared first among the tied event types. Parameters: log_entries (list): A list of tuples where each tuple contains a timestamp and an event type string. Returns: str: The most frequent event type. from collections import defaultdict event_count = defaultdict(int) first_occurrence = {} for timestamp, event in log_entries: event_count[event] += 1 if event not in first_occurrence: first_occurrence[event] = timestamp # Find the maximum frequency max_frequency = max(event_count.values()) most_frequent_events = [event for event, count in event_count.items() if count == max_frequency] # Among these most frequent events, find the one that appeared first most_frequent_event = min(most_frequent_events, key=lambda x: first_occurrence[x]) return most_frequent_event # The function can be tested with the example inputs as follows: # log_entries = [(1, \'start\'), (2, \'start\'), (3, \'reboot\'), (4, \'reboot\')] # print(most_frequent_event(log_entries)) # Output: \'start\'"},{"question":"Given a rectangular grid of size n times m and two integers a and b, you need to place a rooks (traditional chess pieces that move vertically or horizontally any number of squares) and b knights (traditional chess pieces that move in an \\"L\\" shape: two squares in one direction and then one square perpendicular) on the grid such that no two pieces can attack each other. Determine if it is possible to place all a rooks and b knights on the grid under the given constraints. -----Input----- The input consists of several test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of a single line with four integers n, m, a, and b (1 le n, m le 50; 0 le a, b le 50), representing the dimensions of the grid and the number of rooks and knights, respectively. -----Output----- For each test case, print \\"YES\\" if it is possible to place all a rooks and b knights on the grid such that no two pieces attack each other. Otherwise, print \\"NO\\". -----Examples----- Input 4 3 3 3 3 4 4 2 8 5 5 5 2 2 2 3 2 Output YES YES YES NO -----Explanation----- In the first test case, each rook can be placed on a different row and column, and the knights can be positioned such that no two knights threaten each other. In the second test case, all knights and rooks can be positioned without attacking each other due to the larger grid size. In the third test case, there is enough space to place each piece without any conflicts. In the fourth test case, it is impossible to place 3 rooks on a 2x2 grid without conflicts, hence the output is \\"NO\\".","solution":"def can_place_pieces(t, test_cases): results = [] for test_case in test_cases: n, m, a, b = test_case if a > n or a > m: results.append(\\"NO\\") elif a + b > n * m: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Chef is playing a game with his friend using a string S of length N consisting of lowercase English alphabets. They perform the following operation as many times as they like: - Choose any substring of S that is a palindrome and remove it from the string. Their goal is to determine the minimum number of operations required to make the string empty. A string is called a palindrome if it reads the same backward as it does forward. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. For each test case: - The first line contains a single integer N denoting the length of the string S. - The second line contains the string S. ------ Output ------ For each test case, output a single integer denoting the minimum number of operations required to make the string empty. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 ------ Subtasks ------ Subtask 1 (30 points) : 1 ≤ N ≤ 10 Subtask 2 (70 points) : Original constraints ------ Example ------ Input: 2 5 ababa 3 aaa Output: 1 1 ------ Explanation ------ Example case 1. We can remove the entire string \'ababa\' as it is already a palindrome. Example case 2. We can remove the entire string \'aaa\' as it is already a palindrome.","solution":"def min_operations_to_empty(s): Returns the minimum number of operations required to make the string empty by removing palindromic substrings. return 1 if s == s[::-1] else 2 def solve_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_empty(s)) return results"},{"question":"The Grimms\' Fairy Tale Forest is a magical place filled with enchanted trees. Each tree in the forest has a certain amount of magic energy. The magic energy of the forest is defined as the sum of the magic energy of all the trees in it. The wizard Malak has the ability to enhance or diminish the magic energy of any tree. However, he can only perform one operation at a time: either selecting a range of trees and increasing the energy of each tree in this range by a fixed amount, or querying the total magic energy of a specific range of trees. You are asked to implement a system that supports these two types of operations efficiently. Input The first line contains two integers n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 100000) – the number of trees in the forest and the number of operations Malak will perform. The second line contains n integers ai (1 ≤ ai ≤ 1000000000) – the initial magic energies of the trees in the forest. Each of the next q lines describes one of the following operations: - `1 l r x` – Increase the energy of each tree in the range [l, r] (1 ≤ l ≤ r ≤ n) by x (1 ≤ x ≤ 1000000). - `2 l r` – Output the total magic energy of the trees in the range [l, r] (1 ≤ l ≤ r ≤ n). Output For each operation of the second type, output a single integer – the total magic energy of the trees in the range [l, r]. Example Input 5 6 10 20 30 40 50 2 1 3 1 2 4 5 2 2 4 1 1 5 10 2 1 5 2 3 5 Output 60 95 210 175 Note In the example: - There are 5 trees initially with energies [10, 20, 30, 40, 50]. - The first query asks for the energy sum from tree 1 to tree 3, which is 10 + 20 + 30 = 60. - The second operation increases the energies of trees from 2 to 4 by 5. Updated energies are [10, 25, 35, 45, 50]. - The third query asks for the energy sum from tree 2 to tree 4, which is 25 + 35 + 45 = 105. - The fourth operation increases the energies of all trees by 10. Updated energies are [20, 35, 45, 55, 60]. - The fifth query asks for the energy sum from tree 1 to tree 5, which is 20 + 35 + 45 + 55 + 60 = 215. - The sixth query asks for the energy sum from tree 3 to tree 5, which is 45 + 55 + 60 = 160.","solution":"class FairyTaleForest: def __init__(self, n, energies): self.n = n self.energies = energies self.lazy = [0] * (n + 1) def range_update(self, l, r, value): self.lazy[l - 1] += value if r < self.n: self.lazy[r] -= value def query(self, l, r): # Update the original array with the lazy values current_lazy = 0 temp_energies = [] for i in range(self.n): current_lazy += self.lazy[i] temp_energies.append(self.energies[i] + current_lazy) return sum(temp_energies[l-1:r]) # Read input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) q = int(data[1]) energies = list(map(int, data[2:n+2])) operations = data[n+2:] forest = FairyTaleForest(n, energies) index = 0 results = [] for _ in range(q): if operations[index] == \'1\': l = int(operations[index+1]) r = int(operations[index+2]) x = int(operations[index+3]) forest.range_update(l, r, x) index += 4 elif operations[index] == \'2\': l = int(operations[index+1]) r = int(operations[index+2]) results.append(str(forest.query(l, r))) index += 3 print(\\"n\\".join(results)) if __name__ == \\"__main__\\": main()"},{"question":"Given a string of digits, identify if it forms a valid Fibonacci-like sequence. A Fibonacci-like sequence is a sequence of numbers where each number is the sum of the two preceding ones. Return `true` if the digits can form such a sequence, otherwise return `false`. **Example:** Input: `112358` Output: `true` Explanation: The sequence `1, 1, 2, 3, 5, 8` is a valid Fibonacci-like sequence. Input: `123456` Output: `false` Explanation: No Fibonacci-like sequence can be formed. **Constraints:** - The input string will have at least 3 digits and at most 15 digits.","solution":"def is_fibonacci_sequence(s: str) -> bool: Determines if the given string `s` forms a valid Fibonacci-like sequence. def is_valid_sequence(nums): for i in range(2, len(nums)): if nums[i] != nums[i-1] + nums[i-2]: return False return True def helper(s, path): if not s and len(path) >= 3: return is_valid_sequence(path) for i in range(1, len(s) + 1): num = int(s[:i]) if len(path) < 2 or (len(path) >= 2 and num == path[-1] + path[-2]): if helper(s[i:], path + [num]): return True if s[0] == \'0\': break return False return helper(s, []) # Example usages: # print(is_fibonacci_sequence(\\"112358\\")) # Expected output: True # print(is_fibonacci_sequence(\\"123456\\")) # Expected output: False"},{"question":"You are developing a file system simulator that supports basic file operations such as creating files, writing data, reading data, and deleting files. The file system should maintain information about each file such as its name, content, and the time when it was last modified. The operations supported by the file system are: 1. `CREATE filename` - Creates a new file with the given name. If a file with the same name already exists, nothing changes. 2. `WRITE filename data` - Writes the given data to the file with the given name. If the file does not exist, nothing happens. 3. `READ filename` - Reads and returns the content of the file with the given name. If the file does not exist, return \\"File not found\\". 4. `DELETE filename` - Deletes the file with the given name. If the file does not exist, nothing happens. 5. `MODTIME filename` - Returns the last modified time of the file with the given name. If the file does not exist, return \\"File not found\\". Timestamps start at 1 and increment by 1 after each operation. -----Input----- The first line of the input contains an integer n (1 leq n leq 100), which is the number of operations to perform on the file system. Each of the next n lines contains an operation in the format described above. -----Output----- Output the result of each `READ` and `MODTIME` operation in the order they appear. -----Examples----- Sample Input: 8 CREATE file1 WRITE file1 hello CREATE file2 WRITE file2 world READ file1 READ file2 MODTIME file1 DELETE file1 Sample Output: hello world 2","solution":"class FileSystem: def __init__(self): self.files = {} self.timestamp = 0 def _increment_timestamp(self): self.timestamp += 1 def _update_modtime(self, filename): self._increment_timestamp() self.files[filename][\\"modtime\\"] = self.timestamp def create(self, filename): if filename not in self.files: self.files[filename] = {\\"content\\": \\"\\", \\"modtime\\": None} self._update_modtime(filename) def write(self, filename, data): if filename in self.files: self.files[filename][\\"content\\"] = data self._update_modtime(filename) def read(self, filename): if filename in self.files: return self.files[filename][\\"content\\"] return \\"File not found\\" def delete(self, filename): if filename in self.files: del self.files[filename] def modtime(self, filename): if filename in self.files: return self.files[filename][\\"modtime\\"] return \\"File not found\\" def execute_operations(n, operations): fs = FileSystem() output = [] for operation in operations: parts = operation.split() if parts[0] == \\"CREATE\\": fs.create(parts[1]) elif parts[0] == \\"WRITE\\": filename = parts[1] data = \\" \\".join(parts[2:]) fs.write(filename, data) elif parts[0] == \\"READ\\": result = fs.read(parts[1]) output.append(result) elif parts[0] == \\"DELETE\\": fs.delete(parts[1]) elif parts[0] == \\"MODTIME\\": result = fs.modtime(parts[1]) output.append(result) return output"},{"question":"Determine the nth Fibonacci Number modulo 10^9+7. The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding numbers. Typically, it starts with 0 and 1. Example 1: Input: n = 5 Output: 5 Explanation: The first 6 Fibonacci numbers are: 0, 1, 1, 2, 3, 5, ... Example 2: Input: n = 10 Output: 55 Explanation: The first 11 Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ... Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthFibonacci() which takes an integer n and returns the nth Fibonacci number modulo 10^9+7. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^9","solution":"def mat_mult(A, B, mod=10**9+7): Matrix multiplication (modular). return [[(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod]] def mat_pow(mat, exp, mod=10**9+7): Matrix exponentiation with modular arithmetic. result = [[1, 0], [0, 1]] # Identity matrix base = mat while exp > 0: if exp % 2 == 1: result = mat_mult(result, base, mod) base = mat_mult(base, base, mod) exp //= 2 return result def nthFibonacci(n, mod=10**9+7): Determines the nth Fibonacci number modulo 10^9+7 if n <= 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = mat_pow(F, n - 1, mod) return result_matrix[0][0]"},{"question":"The city of Cryptoville is planning a festival, and they wish to decorate the streets with colored lights. There are `n` lights and `m` different colors available. Each color can only be used for a specific set of lights. The city plans to create a beautiful display by ensuring that no two adjacent lights have the same color. Given the positions of the lights and the colors that can be assigned to each light, determine if it\'s possible to assign colors to all the lights such that no two adjacent lights have the same color. If it\'s possible, print `YES`, otherwise print `NO`. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of lights and the number of colors, respectively. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000), where pi is the position of the ith light. Following m lines each contain two integers a and b (1 ≤ a, b ≤ n), representing that the lights at positions a and b cannot have the same color. Output Print `YES` if it\'s possible to assign colors to all the lights such that no two adjacent lights have the same color. Otherwise, print `NO`. Examples Input 5 3 1 2 3 4 5 1 2 2 3 3 4 4 5 5 1 Output NO Input 4 3 1 2 3 4 1 2 2 3 3 4 Output YES","solution":"def possible_to_assign_colors(n, m, lights, restrictions): from collections import defaultdict, deque graph = defaultdict(list) for a, b in restrictions: graph[a].append(b) graph[b].append(a) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return \\"NO\\" return \\"YES\\" # Example usage n, m = 5, 3 lights = [1, 2, 3, 4, 5] restrictions = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1)] print(possible_to_assign_colors(n, m, lights, restrictions)) # Output: NO n, m = 4, 3 lights = [1, 2, 3, 4] restrictions = [(1, 2), (2, 3), (3, 4)] print(possible_to_assign_colors(n, m, lights, restrictions)) # Output: YES"},{"question":"You are given a 2D grid representing a maze filled with walls (1) and paths (0). Your task is to find the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1). You can only move up, down, left, or right, and you cannot pass through walls. If there is no path, return -1. # Example 1: Input: ```python maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] ``` Output: `9` # Example 2: Input: ```python maze = [ [0, 1], [1, 0] ] ``` Output: `-1` # Function Signature ```python def shortestPath(maze: List[List[int]]) -> int: # Your code here ``` # Constraints: - `1 <= n, m <= 100` - `maze[i][j]` is either 0 or 1.","solution":"from collections import deque from typing import List def shortestPath(maze: List[List[int]]) -> int: Returns the length of the shortest path from the top-left corner to the bottom-right corner in a given 2D maze, or -1 if no path exists. The maze is represented as a grid of 0s (paths) and 1s (walls). n, m = len(maze), len(maze[0]) if maze[0][0] == 1 or maze[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n - 1 and col == m - 1: return dist for d_row, d_col in directions: new_row, new_col = row + d_row, col + d_col if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and maze[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Given a string `s`, perform the following operations based on the commands provided: 1. **add_front c**: Add character `c` to the front of the string. 2. **add_end c**: Add character `c` to the end of the string. 3. **reverse**: Reverse the string. 4. **remove_first c**: Remove the first occurrence of character `c` in the string. 5. **remove_last c**: Remove the last occurrence of character `c` in the string. 6. **replace a b**: Replace all occurrences of character `a` with character `b`. 7. **print**: Print the string. Initialize your string `s` as an empty string. You will receive an integer `n` which denotes the number of commands. Then, read `n` lines of commands where each command can be one of the seven types listed above. Iterate through each command in order and perform the corresponding operation on the string. # Input format 1. The first line contains an integer `n`, denoting the number of commands. 2. Each subsequent line contains one of the commands described above. # Constraints - The command characters will be lower-case alphabets. - At least 1 and at most 100 commands. # Output Format For each command of type **print**, print the string on a new line. # Example Input ``` 8 add_end a add_end b add_front c print reverse print replace a d print ``` Output ``` cab bac bdc ```","solution":"def process_commands(n, commands): s = \\"\\" def add_front(c): nonlocal s s = c + s def add_end(c): nonlocal s s = s + c def reverse(): nonlocal s s = s[::-1] def remove_first(c): nonlocal s s = s.replace(c, \\"\\", 1) def remove_last(c): nonlocal s reverse() s = s.replace(c, \\"\\", 1) reverse() def replace(a, b): nonlocal s s = s.replace(a, b) result = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"add_front\\": add_front(parts[1]) elif cmd == \\"add_end\\": add_end(parts[1]) elif cmd == \\"reverse\\": reverse() elif cmd == \\"remove_first\\": remove_first(parts[1]) elif cmd == \\"remove_last\\": remove_last(parts[1]) elif cmd == \\"replace\\": replace(parts[1], parts[2]) elif cmd == \\"print\\": result.append(s) return result"},{"question":"Sarah is organizing a programming contest. She has the results of the contest submitted by participants. The results are provided in an array of integers `scores` where each integer represents the score given by a participant. Each participant can provide any integer score (both positive and negative). However, the event rules provide that once the competition is over, all non-positive scores should be removed from the results. Sarah also wants to be able to quickly determine the highest score at any point after removing the non-positive scores. This process needs to be efficient because it might be executed multiple times. For ease of implementation, Sarah wants a function `final_top_scores` that receives the array `scores` and a list of `updates`. Each entry in `updates` is a tuple consisting of `(type, value)`, where `type` can be \\"add\\" or \\"query\\". If the `type` is \\"add\\", `value` is an integer score to be added to the `scores` array. If `type` is \\"query\\", `value` should be ignored and the current highest score should be returned. Implement the function `final_top_scores` that takes two lists, `scores` and `updates`, and returns a list of highest scores for each \\"query\\" type entry in the `updates` list. Example: Input: scores = [5, -1, 3, 10, -4, 0] updates = [(\\"query\\", 0), (\\"add\\", 7), (\\"query\\", 0), (\\"add\\", -2), (\\"query\\", 0)] Output: [10, 10, 10] Explanation: Initially, the valid scores are [5, 3, 10]. The highest is 10. After adding 7, the valid scores are [5, 3, 10, 7]. The highest is still 10. After adding -2, the valid scores remain [5, 3, 10, 7]. The highest is still 10. Your task: You don\'t need to read input or output anything. Implement the function `final_top_scores(scores, updates)` that returns a list of integers representing the highest scores after each query. Expected Time Complexity: O(N + M), where N is the number of initial scores and M is the number of updates. Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(scores), len(updates) ≤ 10^5 -10^9 ≤ scores[i], value ≤ 10^9","solution":"def final_top_scores(scores, updates): Returns the highest scores after each query in the updates. scores: List[int] - List of initial scores which might include non-positive values. updates: List[tuple] - List of updates, where each update is a tuple (\\"type\\", value). return: List[int] - List of highest scores after each \\"query\\" type update. # Filter out non-positive scores valid_scores = [score for score in scores if score > 0] valid_scores.sort(reverse=True) # Sort in descending order for easier max query results = [] for update in updates: operation, value = update if operation == \\"add\\": if value > 0: # insert maintaining sorted order index = 0 while index < len(valid_scores) and valid_scores[index] > value: index += 1 valid_scores.insert(index, value) elif operation == \\"query\\": if valid_scores: results.append(valid_scores[0]) else: results.append(0) # if there\'s no positive score return results"},{"question":"You are given a set of N points on a 2D plane, each represented by their coordinates (x, y). Your task is to determine the minimal bounding rectangle that can enclose all of these points. The sides of the rectangle should be parallel to the coordinate axes. Write a function `minimal_enclosing_rectangle(points)` that takes a list of tuples, where each tuple contains two integers representing the x and y coordinates of a point, and returns a list of four tuples representing the four corners of the smallest bounding rectangle. Each tuple in the output list should represent the coordinates of a corner of the rectangle in the order: bottom-left, bottom-right, top-right, and top-left. For example, given the following input: ```python points = [(1, 3), (4, 4), (2, 2), (3, 5)] ``` The function should output: ```python [(1, 2), (4, 2), (4, 5), (1, 5)] ``` # Constraints 1. The input list `points` will contain at least one point and at most 10^5 points. 2. The coordinates are integers in the range of -10^9 to 10^9. # Function Signature ```python def minimal_enclosing_rectangle(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` # Example ```python points = [(1, 3), (4, 4), (2, 2), (3, 5)] print(minimal_enclosing_rectangle(points)) # [(1, 2), (4, 2), (4, 5), (1, 5)] ```","solution":"from typing import List, Tuple def minimal_enclosing_rectangle(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Returns the coordinates of the smallest bounding rectangle that can enclose all given points. Parameters: points (List[Tuple[int, int]]): A list of tuples representing the coordinates of points. Returns: List[Tuple[int, int]]: A list of four tuples representing the four corners of the bounding rectangle. min_x = min(point[0] for point in points) max_x = max(point[0] for point in points) min_y = min(point[1] for point in points) max_y = max(point[1] for point in points) bottom_left = (min_x, min_y) bottom_right = (max_x, min_y) top_right = (max_x, max_y) top_left = (min_x, max_y) return [bottom_left, bottom_right, top_right, top_left]"},{"question":"In the kingdom of Numiland, Rey is tasked with a challenge to balance the kingdom\'s gold distribution. The kingdom is divided into n cities, connected by m bidirectional roads. Each road connects two cities and has an associated length. The distribution of gold in each city is represented by an integer, and Ray wants to balance the gold such that the absolute difference in gold between any two connected cities is minimized. Rey has a magical tool that allows him to transfer gold between two directly connected cities, but only once per road. Given a list of roads and the initial distribution of gold, help Rey discover the minimum possible absolute difference in gold between any two directly connected cities after some transfers. Input The first line of the input contains one integer t (1 ≤ t ≤ 1000) — the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 5000) — the number of cities and the number of roads respectively. The second line contains n integers g_1, g_2, ..., g_n (0 ≤ g_i ≤ 10^9), where g_i is the initial amount of gold in the i-th city. The following m lines each contain three integers u, v, and l (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ l ≤ 10^4) — describing a road between city u and city v of length l. Output For each test case, print the minimum possible absolute difference in gold between any two directly connected cities after the transfers. Example Input: 2 4 4 10 30 20 40 1 2 1 2 3 1 3 4 1 4 1 1 3 2 15 25 35 1 2 10 2 3 10 Output: 10 10 Note: In the first test case, Rey can transfer gold between cities to minimize the absolute difference. One potential way to achieve the goal is by transferring gold: - Transfer 10 gold from city 2 to city 1, making the gold distribution [20, 20, 20, 40] - Transfer 10 gold from city 4 to city 3, resulting in [20, 20, 30, 30] After these transfers, the absolute difference between any two connected cities is 10. In the second test case, Rey can transfer: - Transfer 10 gold from city 3 to city 2, making the gold distribution [15, 30, 25] After this transfer, the absolute difference between the directly connected cities is minimized to 10.","solution":"def balance_gold(t, test_cases): results = [] for case in test_cases: n, m = case[\'n\'], case[\'m\'] gold = case[\'gold\'] roads = case[\'roads\'] min_gold = min(gold) max_gold = max(gold) min_diff = max_gold - min_gold for u, v, l in roads: gu, gv = gold[u - 1], gold[v - 1] current_diff = abs(gu - gv) min_diff = min(min_diff, current_diff) results.append(min_diff) return results # Example use: t = 2 test_cases = [ { \\"n\\": 4, \\"m\\": 4, \\"gold\\": [10, 30, 20, 40], \\"roads\\": [(1, 2, 1), (2, 3, 1), (3, 4, 1), (4, 1, 1)] }, { \\"n\\": 3, \\"m\\": 2, \\"gold\\": [15, 25, 35], \\"roads\\": [(1, 2, 10), (2, 3, 10)] } ] print(balance_gold(t, test_cases)) # Output: [10, 10]"},{"question":"Given an array A of size N, where each element represents a digit (0-9). Your task is to rearrange the elements of the array to form the smallest possible number. Leading zeros are allowed only if the number is zero. Example 1: Input: A = [3, 1, 4, 1, 5, 9] Output: \\"113459\\" Explanation: Rearranging the elements in ascending order gives the smallest number. Example 2: Input: A = [0, 0, 1] Output: \\"001\\" Explanation: The smallest number that can be formed is 001. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function formSmallestNumber() that takes an array (arr) and sizeOfArray (n), and returns a string representing the smallest number. The driver code takes care of the printing. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5}","solution":"def formSmallestNumber(arr, n): Returns the smallest number that can be formed by rearranging the elements of the array. arr.sort() # Sort the array return \'\'.join(map(str, arr)) # Convert each element to string and join them"},{"question":"You are given a rectangular matrix of size n x m with positive integers. A query consists of specifying a submatrix within this matrix, and you need to determine the minimum element in that submatrix. You need to implement the following: 1. You are given the dimensions of the matrix (n and m). 2. You are given the matrix itself. 3. You are given q queries, each of which specifies the top-left and bottom-right corners of a submatrix and requires you to find the minimum element in that submatrix. Input - The first line contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 100000) — the dimensions of the matrix and the number of queries. - The next n lines contain m integers each, representing the matrix. Each integer is in the range [1, 10^9]. - The next q lines contain four integers each, x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), which represent the top-left (x1, y1) and bottom-right (x2, y2) corners of the submatrix. Output For each query, output a single integer — the minimum element in the specified submatrix. Example Input 5 5 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 1 3 3 2 2 4 4 1 3 5 5 Output 1 7 3 Note In the first query, the submatrix is: 1 2 3 6 7 8 11 12 13 The minimum element is 1. In the second query, the submatrix is: 7 8 9 12 13 14 17 18 19 The minimum element is 7. In the third query, the submatrix is: 3 4 5 8 9 10 13 14 15 18 19 20 23 24 25 The minimum element is 3.","solution":"def min_in_submatrix(n, m, matrix, queries): results = [] for x1, y1, x2, y2 in queries: min_element = float(\'inf\') for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): if matrix[i][j] < min_element: min_element = matrix[i][j] results.append(min_element) return results"},{"question":"A digital adventurer is exploring a dungeon divided into an N x N grid. Each cell in the grid contains a number that represents the amount of treasure in that cell. The adventurer starts at the top-left corner (0,0) and wants to reach the bottom-right corner (N-1,N-1) while collecting the maximum possible amount of treasure. However, the adventurer can only move right or down at each step. Given multiple test cases, your task is to determine the maximum amount of treasure the adventurer can collect for each dungeon configuration. Input The first line contains T, the number of test cases. Each test case consists of: - An integer N, the size of the grid (1 <= N <= 500). - N lines each containing N integers representing the treasure values in each cell (0 <= treasure value <= 100). Output For each test case, output a single line containing the maximum amount of treasure the adventurer can collect. SAMPLE INPUT 2 3 1 3 1 1 5 1 4 2 1 2 1 2 3 4 SAMPLE OUTPUT 12 8","solution":"def max_treasure(t, test_cases): def max_treasure_single_case(n, grid): dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[n-1][n-1] results = [] for case in test_cases: n = case[0] grid = case[1:] results.append(max_treasure_single_case(n, grid)) return results # Example usage # t = 2 # test_cases = [ # [3, [1, 3, 1], [1, 5, 1], [4, 2, 1]], # [2, [1, 2], [3, 4]] # ] # print(max_treasure(t, test_cases)) # Output should be: [12, 8]"},{"question":"You are given two binary strings s and t of equal length n (1 ≤ n ≤ 1000). You can apply the following operation any number of times (including zero): - Choose any `i` (1 le i < n) and swap s[i] with s[i+1]. Your task is to determine if it\'s possible to make string s equal to string t using the given operation any number of times. -----Input----- The first line contains an integer n (1 le n le 1000) denoting the length of the binary strings. The second line contains a binary string s of length n. The third line contains a binary string t of length n. -----Output----- Output `YES` if it\'s possible to make string s equal to string t using the given operations. Otherwise, output `NO`. -----Examples----- Input 5 11001 10110 Output YES Input 3 111 110 Output NO -----Note----- In the first example, you can move the first \'1\' in s to the third position, resulting in s being `10110`, which matches t`. In the second example, it\'s impossible to transform s into t as there is no way to obtain matching `t` by swapping adjacent characters in s`.","solution":"def can_transform(n, s, t): Determines if binary string s can be transformed into binary string t with the given operations. Parameters: n (int): Length of the strings s and t. s (str): Binary string of length n. t (str): Binary string of length n. Returns: str: \'YES\' if s can be transformed into t, otherwise \'NO\'. # Count the number of \'0\'s and \'1\'s in both strings. count_s = [s.count(\'0\'), s.count(\'1\')] count_t = [t.count(\'0\'), t.count(\'1\')] # Check if both strings have the same amount of \'0\'s and \'1\'s. if count_s == count_t: return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers and a positive integer k, you are required to find the k-th smallest integer in the array after removing all duplicate values. Input The first line contains an integer T denoting the number of test cases. Each test case consists of two parts: 1. An integer n, denoting the number of elements in the array. 2. An integer k, the position of the smallest integer to find after removing duplicates. 3. An array of n integers. Output For each test case, print the k-th smallest integer in the array after removing duplicates. If k is larger than the number of unique elements, print -1. Constraints 1 ≤ T ≤ 20 1 ≤ n ≤ 10^5 1 ≤ k ≤ n 1 ≤ elements of array ≤ 10^9 SAMPLE INPUT 2 5 3 4 2 7 2 5 6 2 1 1 2 2 3 3 SAMPLE OUTPUT 5 2 Explanation In the first test case, after removing duplicates, the array becomes [2, 4, 5, 7]. The 3rd smallest element is 5. In the second test case, after removing duplicates, the array becomes [1, 2, 3]. The 2nd smallest element is 2.","solution":"def kth_smallest_after_removing_duplicates(t, test_cases): Given an array of integers and a positive integer k, find the k-th smallest integer in the array after removing all duplicate values for each test case. Parameters: t (int): Number of test cases. test_cases (list): A list of tuples where each tuple contains: - an integer n (number of elements in the array) - an integer k (the position of the smallest integer to find) - a list of n integers Returns: list: A list with the k-th smallest integer for each test case after removing duplicates. If k is larger than the number of unique elements, return -1 for that test case. results = [] for n, k, array in test_cases: unique_elements = sorted(set(array)) if k > len(unique_elements): results.append(-1) else: results.append(unique_elements[k-1]) return results"},{"question":"You are given a sequence of integers a_1, a_2, ..., a_n (1 ≤ n ≤ 10^5, 0 ≤ a_i ≤ 10^5). Define a \\"good\\" subsegment to be any subsegment (a_l, a_{l + 1}, ..., a_r) for which the greatest common divisor (GCD) of the numbers in the subsegment is equal to 1. Your task is to determine the number of \\"good\\" subsegments in the given sequence. An integer x is called the greatest common divisor (GCD) of integers a and b if it is the greatest integer that divides both a and b. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^5) — the elements of the sequence. -----Output----- Print a single integer — the number of \\"good\\" subsegments in the given sequence. -----Examples----- Input 3 2 3 4 Output 3 Input 5 2 4 6 8 10 Output 0 Input 4 1 1 1 1 Output 10 -----Note----- In the first example, the \\"good\\" subsegments are (2, 3), (3), and (3, 4). In the second example, there are no \\"good\\" subsegments. In the third example, every possible subsegment has a GCD of 1. There are 10 such subsegments in total.","solution":"import math def is_coprime(a, b): return math.gcd(a, b) == 1 def count_good_subsegments(sequence): n = len(sequence) good_count = 0 for i in range(n): gcd = sequence[i] if gcd == 1: good_count += (n - i) continue for j in range(i + 1, n): gcd = math.gcd(gcd, sequence[j]) if gcd == 1: good_count += (n - j) break return good_count"},{"question":"Alex loves cheese, and he has a huge collection of different types of cheese. He decided to create a special ranking system for his cheeses. Each type of cheese has a unique flavor index, and Alex is curious to know the **k-th least flavorful cheese** in a specific range of his collection. For each query, Alex will specify the start and end indices of the range (both inclusive), and you need to help him find the k-th least flavorful cheese in that range. -------Input------- The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of cheese types and the number of queries. The second line contains n integers f_1, f_2, ..., f_n (1 ≤ f_i ≤ 100000), where f_i is the flavor index of the i-th cheese type in Alex\'s collection. Each of the next q lines contains three integers l, r, k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ r - l + 1) — the parameters of the query. -------Output------- For each query, print one integer — the k-th least flavorful cheese in the specified range. ------Examples------ Input 7 3 8 4 7 2 5 9 3 1 4 2 2 7 3 1 7 4 Output 4 4 5 ------Note------ Explanation of the first example. - For the first query, the range is from index 1 to 4: [8, 4, 7, 2]. The sorted version of this range is [2, 4, 7, 8]. The 2nd least flavorful cheese in this range is 4. - For the second query, the range is from index 2 to 7: [4, 7, 2, 5, 9, 3]. The sorted version of this range is [2, 3, 4, 5, 7, 9]. The 3rd least flavorful cheese in this range is 4. - For the third query, the range is from index 1 to 7: [8, 4, 7, 2, 5, 9, 3]. The sorted version of this range is [2, 3, 4, 5, 7, 8, 9]. The 4th least flavorful cheese in this range is 5.","solution":"def kth_least_flavorful_cheese(n, q, flavor_indices, queries): Returns a list of results for each query, finding the k-th least flavorful cheese in the given range. results = [] for l, r, k in queries: subrange = flavor_indices[l-1:r] subrange.sort() results.append(subrange[k-1]) return results"},{"question":"Alice is a passionate gardener who likes to arrange her plants in a straight line on a shelf. She wants to ensure that her plants follow a specific watering pattern. The pattern is represented as a sequence of integers, where each integer indicates the number of waterings needed for the corresponding plant. Alice wants to find out whether it is possible to rearrange the plants on the shelf so that the pattern is as balanced as possible. A balanced pattern means that the difference between the number of waterings needed for any two adjacent plants should be at most 1. Given a list of integers representing the initial watering requirements of the plants, write a program that determines if it\'s possible to rearrange them into a balanced pattern. Constraints * 2 ≦ number of plants ≦ 1000 * 1 ≦ watering requirements of each plant ≦ 10000 Input The input is given in the following format: n a_1 a_2 ... a_n Where n is the number of plants and a_1, a_2, ..., a_n are the watering requirements. Output Print \\"Yes\\" if it is possible to rearrange the plants into a balanced pattern, otherwise print \\"No\\". Examples Input 5 3 1 2 2 1 Output Yes Input 4 1 4 1 4 Output No","solution":"def can_balance_pattern(n, waterings): Determines if it\'s possible to rearrange the plants into a balanced pattern. Parameters: n (int): The number of plants. waterings (list): List of integers representing the watering requirements of the plants. Returns: str: \\"Yes\\" if it\'s possible to rearrange the plants into a balanced pattern, otherwise \\"No\\". waterings.sort() for i in range(n - 1): if abs(waterings[i] - waterings[i + 1]) > 1: return \\"No\\" return \\"Yes\\""},{"question":"Write a function that takes a string and an integer `N` as input and returns a new string with the characters of the original string rotated to the right by `N` positions. For example, given the string `\\"abcdef\\"` and `N = 2`, the resulting string should be `\\"efabcd\\"`. Another example, for the string `\\"hello\\"` and `N = 1`, the resulting string should be `\\"ohell\\"`. Ensure your function handles cases where `N` is greater than the length of the string and returns the original string if `N` is zero or negative. Tip: You can consider using slicing to achieve the desired result.","solution":"def rotate_string(s, N): Rotates the characters of the string `s` to the right by `N` positions. Parameters: s (str): The original string. N (int): Number of positions to rotate. Returns: str: The string after rotation. if N <= 0 or not s: return s N = N % len(s) return s[-N:] + s[:-N]"},{"question":"Given two integers M and N, determine the absolute difference between these two numbers. Output the absolute difference. -----Constraints----- - -100 leq M, N leq 100 - Both M and N are integers. -----Input----- Input is given from Standard Input in the following format: M N -----Output----- Output the absolute difference between M and N. -----Sample Input----- 7 3 -----Sample Output----- 4 The absolute difference between 7 and 3 is 4.","solution":"def absolute_difference(M, N): Returns the absolute difference between two integers M and N. return abs(M - N)"},{"question":"Write a program to determine the summation of digits of each number in a given list. The list contains numbers split over multiple lines. Your task is to compute the sum of digits for each number and print the overall sum. -----Input----- The first line of input contains an integer N (1 leq N leq 100), the number of lines to follow. Each of the next N lines contains one integer A_i (1 leq A_i leq 10^6), representing the individual numbers. -----Output----- The output should be a single integer which is the sum of all digits of all numbers provided. -----Examples----- Sample Input 1: 3 123 45 67 Sample Output 1: 28 Sample Input 2: 4 1 2 3 4 Sample Output 2: 10","solution":"def sum_of_digits(numbers): Given a list of numbers, returns the sum of the digits of each number. :param numbers: List of integers. :return: Integer representing the sum of digits of all numbers in the list. total_sum = 0 for number in numbers: total_sum += sum(int(digit) for digit in str(number)) return total_sum"},{"question":"Mark the Explorer is deep in a magical forest full of magical items. The forest is represented as a two-dimensional grid with n rows and m columns. Each cell in the grid contains a certain number of magical items. Mark can move up, down, left, or right, but he cannot move diagonally. He must start his journey from the top-left corner of the grid (1, 1) and can move to the bottom-right corner of the grid (n, m). Along the way, he can collect the magical items in each cell he visits, but each cell can only be visited once. Mark wants to collect the maximum number of magical items on his journey. Write a program to determine the maximum number of magical items Mark can collect. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m integers, where the j-th integer is the number of magical items in the cell (i, j). Each number is an integer between 0 and 105, inclusive. Output Print a single number — the maximum number of magical items Mark can collect. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Note In this example, Mark can follow this path to collect the maximum number of magical items: 1 → 2 → 3 → 6 → 9.","solution":"def max_magical_items(n, m, grid): Returns the maximum number of magical items Mark can collect. # Create a dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Initialize the starting point (top-left corner) dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) # The bottom-right corner contains the maximum number of magical items that can be collected return dp[n - 1][m - 1]"},{"question":"Given a binary tree, you are required to complete the function deepestLeavesSum() which returns the sum of the values of its deepest leaves. Deepest leaves are the leaves that are located farthest from the root of the tree. Example 1: Input: 1 / 2 3 / 4 5 6 / 7 8 Output: 15 Explanation: Leaves 7 and 8 are located deepest, and their sum is 7 + 8 = 15. Example 2: Input: 1 / 2 3 / 4 5 Output: 9 Explanation: Leaves 4 and 5 are located deepest, and their sum is 4 + 5 = 9. Your Task: You don\'t need to read input or print anything. Complete the function deepestLeavesSum() which takes the root Node of the binary tree as input and returns the sum of the deepest leaves. Constraints: 1 <= T <= 50 1 <= N <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def deepestLeavesSum(root): if not root: return 0 from collections import deque queue = deque([root]) while queue: level_sum = 0 for i in range(len(queue)): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"Given a large array of integers, you are tasked with answering multiple range query problems. Each query specifies a subarray and asks for the total number of unique elements within that subarray. Input Format The first line contains an integer, n, the number of elements in the array. The second line contains n space-separated integers representing the array elements. The third line contains an integer, q, the number of queries. The next q lines each contain two space-separated integers, l and r, representing the range [l,r] (1-indexed) for which to find the number of unique elements in that subarray. Constraints 1 leq n leq 10^5 1 leq a_i leq 10^6 for 1 leq i leq n 1 leq q leq 10^5 1 leq l leq r leq n Output Format For each query, print a single line containing the number of unique elements in the subarray defined by the range [l,r]. Sample Input 8 1 2 1 3 4 2 3 5 3 1 4 2 6 1 8 Sample Output 3 4 5 Explanation For the first query, the subarray is [1, 2, 1, 3] which contains the unique elements {1, 2, 3}. For the second query, the subarray is [2, 1, 3, 4, 2] which contains the unique elements {1, 2, 3, 4}. For the third query, the subarray is [1, 2, 1, 3, 4, 2, 3, 5] which contains the unique elements {1, 2, 3, 4, 5}.","solution":"def count_unique_elements_in_subarray(arr, queries): For each query, count the number of unique elements in the subarray specified by the query. Params: arr (list of int): the input array queries (list of tuples): list of queries where each query is a tuple (l, r) Returns: list of int: the count of unique elements for each query results = [] for l, r in queries: subarray = arr[l-1:r] unique_elements_count = len(set(subarray)) results.append(unique_elements_count) return results # Example usage: # n = 8 # arr = [1, 2, 1, 3, 4, 2, 3, 5] # q = 3 # queries = [(1, 4), (2, 6), (1, 8)] # The output should be [3, 4, 5]"},{"question":"Given a binary string, find the number of substrings that contain equal numbers of 0s and 1s. Example Input ``` s = \\"00110011\\" ``` Output ``` 6 ``` Explanation The six substrings are \\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", \\"01\\". Input ``` s = \\"10101\\" ``` Output ``` 4 ``` Explanation The four substrings are \\"10\\", \\"01\\", \\"10\\", \\"01\\". Function Description Complete the countEqualSubstrings function below. countEqualSubstrings has the following parameter(s): - string s: the binary string to check Returns int: the number of substrings with equal numbers of 0s and 1s Input Format A single line containing a binary string s. Constraints 1 leq |s| leq 10^5 Sample Input 0 ``` 00110011 ``` Sample Output 0 ``` 6 ``` Sample Input 1 ``` 10101 ``` Sample Output 1 ``` 4 ``` Explanation 0 The six substrings that contain equal numbers of 0s and 1s are: 1. \\"0011\\" – indices [0,3] 2. \\"01\\" – indices [1,2] 3. \\"1100\\" – indices [2,5] 4. \\"10\\" – indices [3,4] 5. \\"0011\\" – indices [4,7] 6. \\"01\\" – indices [5,6] Explanation 1 The four substrings that contain equal numbers of 0s and 1s are: 1. \\"10\\" – indices [0,1] 2. \\"01\\" – indices [1,2] 3. \\"10\\" – indices [2,3] 4. \\"01\\" – indices [3,4]","solution":"def countEqualSubstrings(s): Returns the number of substrings with equal numbers of 0s and 1s. count = 0 prev_run_length = 0 current_run_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_run_length += 1 else: prev_run_length = current_run_length current_run_length = 1 if prev_run_length >= current_run_length: count += 1 return count"},{"question":"A software company is developing a new feature in their application that involves converting an infix expression (a standard arithmetic expression where operators are written in-between their operands, e.g., `3 + 4 * 5`) into a postfix expression (where operators follow their operands, e.g., `3 4 5 * +`). The application requires a function to perform this conversion. Write a program to convert a given infix expression into its postfix form. # Input The first line contains a single integer `T` (1 ≤ T ≤ 100), the number of test cases. Each of the next `T` lines contains a single string representing an infix arithmetic expression. The expressions can contain the following: - Operands: single lowercase letters (`a` to `z`). - Operators: `+`, `-`, `*`, `/` (with standard precedence, i.e., `*` and `/` have higher precedence than `+` and `-` and both pairs have left-to-right associativity). - Parentheses: `(` and `)` for explicitly grouping sub-expressions. You can assume that each expression is valid and does not contain any whitespace characters. # Output For each test case, output a single line containing the postfix form of the provided infix expression. # Examples **Input** ``` 3 a+b*c (a+b)*c a+b*(c-d) ``` **Output** ``` abc*+ ab+c* abcd-*+ ``` # Note - In the first example, `a+b*c` is converted to `abc*+` where multiplication `*` has higher precedence than addition `+`. - In the second example, due to parentheses `()` around `a+b`, addition is performed before multiplication, hence the postfix form is `ab+c*`. - In the third example, the infix expression `a+b*(c-d)` converts to `abcd-*+` reflecting that the subtraction inside parentheses is performed first followed by multiplication and finally addition.","solution":"def infix_to_postfix(expression): Convert infix expression to postfix notation using the Shunting-yard algorithm. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = [] for char in expression: if char.isalpha(): # If the character is an operand (a-z) output.append(char) elif char in precedence: # If the character is an operator (+, -, *, /) while (operators and operators[-1] != \'(\' and precedence[operators[-1]] >= precedence[char]): output.append(operators.pop()) operators.append(char) elif char == \'(\': # If the character is an open parenthesis operators.append(char) elif char == \')\': # If the character is a closing parenthesis while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # Pop the \'(\' from the stack while operators: # Pop all the operators left in the stack output.append(operators.pop()) return \'\'.join(output) def convert_infix_expressions_to_postfix(T, expressions): Converts a list of infix expressions to postfix notation. results = [] for expression in expressions: results.append(infix_to_postfix(expression)) return results"},{"question":"Alex loves to grow a different kind of tree today, a balanced binary search tree (BST) from an array of integers. A BST is a binary tree in which each node has at most two children, where the left child contains only nodes with values less than the parent node, and the right child only nodes with values greater than the parent node. To ensure the tree is balanced, we build the tree from the sorted array by recursively finding the middle of the array and making it the root, then recursively doing the same for the left and right subarrays. Alex wants to know how many such balanced binary search trees can be formed from any given permutation of the same set of integers. As Alex\'s curiosity peaked, he decided to ask you for help. Will you help Alex determine the number of unique balanced BSTs that can be formed from any given sorted array? Input First line contains an integer number n ~ (1 ⩽ n ⩽ 15) — the length of the array. Second line contains n integer numbers a_1, a_2, …, a_n ~ (1 ⩽ a_i ⩽ 10^9), representing a sorted array. Output Print a single integer: the number of unique balanced BSTs that can be formed from the input array. Example Input 3 10 20 30 Output 5 Note For the input [10, 20, 30], the 5 unique balanced BSTs are: 20 20 10 30 30 / / / / / 10 30 30 10 N 20 20 10 BST2 BST3 BST4 20 BST5 30 BST1 BST5 Note: \'N\' denotes where there won\'t be any children. Alex introduced a method to count all possible unique balanced BSTs. Use that method for counting the unique trees.","solution":"from functools import lru_cache @lru_cache(None) def count_unique_bsts(n): if n <= 1: return 1 total_trees = 0 for i in range(n): left_trees = count_unique_bsts(i) right_trees = count_unique_bsts(n - 1 - i) total_trees += left_trees * right_trees return total_trees def number_of_unique_balanced_bsts(a): n = len(a) return count_unique_bsts(n) # Example usage: # input_array = [10, 20, 30] # print(number_of_unique_balanced_bsts(input_array)) # Output should be 5"},{"question":"Description You are given a sequence of integers representing the price of a certain stock on different days. You are allowed to perform at most one transaction (i.e., buy one stock and sell one stock). Your objective is to maximize the profit by choosing the best day to buy and the best day to sell the stock. If there\'s no profit to be gained, return 0. Note that you must buy the stock before you sell it, and you cannot sell the stock before you buy it. Your task is to write a program that takes the price of the stock over a series of days and calculates the maximum profit that can be achieved. Input The input consists of multiple test cases. Each test case starts with an integer N (1 ≤ N ≤ 100) representing the number of days. The next line contains N integers, where each integer represents the price of the stock on that day. The input ends with a single line containing 0. Output For each test case, output the maximum profit that can be made, in a single line. Example Input 6 7 1 5 3 6 4 5 7 6 4 3 1 4 1 2 3 4 0 Output 5 0 3","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be achieved by buying and then selling the stock. If no profit can be made, it returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: min_price = min(min_price, price) potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit def process_test_cases(input_data): This function processes multiple test cases from a given input string and returns the results as a list of integers, each representing the maximum profit for a respective test case. input_lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): N = int(input_lines[i]) if N == 0: break prices = list(map(int, input_lines[i + 1].split())) result = max_profit(prices) results.append(result) i += 2 return results"},{"question":"A biotech startup is developing a sequence generator for DNA synthesis. A DNA sequence consists of characters \'A\', \'T\', \'C\', and \'G\'. For quality control, the company needs to verify if the generated sequence adheres to a strict repeating block structure. A valid sequence can be constructed by repeating a shorter sequence (block) multiple times. For example, \\"ATGCATGC\\" is valid as it consists of the block \\"ATGC\\" repeated twice, while \\"ATGCGTAC\\" is not valid since it does not consist of any repeating block. Write a program that determines if a given DNA sequence can be constructed by repeating one of its substrings multiple times. -----Input----- The only line of the input contains a DNA sequence consisting only of characters \'A\', \'T\', \'C\', and \'G\'. The length of the sequence is between 1 and 100 inclusive. -----Output----- Output \\"YES\\" if the sequence can be constructed by repeating a substring, otherwise output \\"NO\\". -----Examples----- Input ATGCATGC Output YES Input ATGCGTAC Output NO","solution":"def is_repeating_sequence(dna_sequence): Determines if the given DNA sequence can be made by repeating a substring. :param dna_sequence: str, DNA sequence consisting only \'A\', \'T\', \'C\', \'G\' :return: str, \\"YES\\" if the sequence can be constructed by repeating a substring, otherwise \\"NO\\" n = len(dna_sequence) for i in range(1, n // 2 + 1): if n % i == 0: if dna_sequence[:i] * (n // i) == dna_sequence: return \\"YES\\" return \\"NO\\""},{"question":"Write a function that takes a string `s` and an integer `n` as input, and returns a new string with characters shifted to the right by `n` positions in a circular manner. If `n` is negative, shift the characters to the left instead. Example: Input: s = \\"abcdef\\", n = 2 Output: \\"efabcd\\" Input: s = \\"abcdef\\", n = -2 Output: \\"cdefab\\" Constraints: - The length of the string `s` will be at most 100. - The integer `n` can be any valid integer (positive, negative, or zero). Hints: - Consider using modular arithmetic to handle the wrap-around effect.","solution":"def shift_string(s, n): Shifts the characters in the string `s` to the right by `n` positions in a circular manner. If `n` is negative, shifts the characters to the left instead. Parameters: s (str): The input string. n (int): The number of positions to shift. Returns: str: The shifted string. length = len(s) if length == 0: return s n = n % length # handling larger shifts and negative shifts return s[-n:] + s[:-n]"},{"question":"In a magical forest, there are n unique types of magical creatures. Each creature has a unique strength level, which is an integer value. The creatures like to form pairs with each other, but they will only pair themselves if the absolute difference in their strength levels is less than or equal to k. Your task is to determine the maximum number of pairs that can be formed from the given list of creatures\' strength levels. Each creature can belong to at most one pair. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 100,000) — the number of creatures and the maximum allowable strength difference for pairing, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 1,000,000,000) — the strength levels of the creatures. -----Output----- Print a single integer — the maximum number of pairs that can be formed. -----Examples----- Input 5 3 1 5 3 3 2 Output 2 Input 4 1 1 2 4 5 Output 2 -----Note----- In the first example, the creatures\' strength levels are [1, 2, 3, 3, 5]. The maximum allowable strength difference for pairing is 3. The two possible pairs are (1, 2) and (3, 3). Thus, the maximum number of pairs that can be formed is 2. In the second example, the creatures\' strength levels are [1, 2, 4, 5]. The maximum allowable strength difference for pairing is 1. The two possible pairs are (1, 2) and (4, 5). Thus, the maximum number of pairs that can be formed is 2.","solution":"def max_pairs(n, k, strengths): Returns the maximum number of pairs that can be formed with the given strengths and allowable difference k. strengths.sort() i = 0 pairs = 0 while i < n - 1: if strengths[i + 1] - strengths[i] <= k: pairs += 1 i += 2 # Move to the next pair else: i += 1 # Check the next potential pair return pairs"},{"question":"You are given an n x n grid. Each cell is either empty (.) or contains a block (#). You start at the top-left cell (0, 0) and aim to reach the bottom-right cell (n-1, n-1). However, you can only move right or down, and you cannot move through cells with a block. Write a function `can_reach_end(grid)` that takes in a grid as a list of strings and returns a boolean indicating whether it is possible to reach the bottom-right cell from the top-left cell while only moving right or down. -----Input----- - An integer `n` (1 ≤ n ≤ 100), representing the dimensions of the grid. - A list of `n` strings, each of length `n`, representing the grid. Each string will contain only \'.\' or \'#\'. -----Output----- - A single boolean value: `True` if it is possible to reach the bottom-right cell from the top-left cell, otherwise `False`. -----Example----- Input: 4 .... ..#. .#.. .... Output: True Input: 3 .#. # .#. Output: False","solution":"def can_reach_end(grid): n = len(grid) if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return False def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' # Using BFS to check for reachability from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n - 1, n - 1): return True for dx, dy in [(1, 0), (0, 1)]: # move down or right nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"# Task You have a sequence of unique integers and you need to find a pair of elements whose sum is equal to a given target number. The pair should have the soonest first occurrence (least index) and within that the second occurrence if any should also have a least index. Write a function that takes a list of unique integers and a target number and returns a tuple of the two integers that sum up to the target. If such a pair does not exist, return `None`. # Input/Output `[input]` array of integers `nums` - An array of unique integers. - `2 <= nums.length <= 1000` `[input]` integer `target` - An integer which is the target sum. - `-10^6 <= target <= 10^6` `[output]` - A tuple of two integers from `nums` whose sum equals `target`, or `None` if no such pair exists. # Example For `nums = [2, 7, 11, 15]` and `target = 9`, the output should be `(2, 7)`. ``` Explanation: 2 + 7 = 9 ``` For `nums = [1, 2, 3, 4, 5]` and `target = 10`, the output should be `None`. ``` Explanation: No pairs of integers sum to 10. ``` For `nums = [10, -2, 3, 7, 5]` and `target = 8`, the output should be `(10, -2)`. ``` Explanation: 10 + (-2) = 8 ```","solution":"def find_pair_with_sum(nums, target): Finds the first pair of integers in the list nums whose sum equals the target. Args: nums (list of int): A list of unique integers. target (int): The target sum. Returns: tuple or None: A tuple containing the first pair of integers whose sum is equal to the target, or None if no such pair exists. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (complement, num) num_to_index[num] = index return None"},{"question":"Your task is to design an algorithm to find the longest alternating subsequence in a given list of integers. An alternating subsequence is a sequence derived from the original list by deleting some elements (without changing the order of the remaining elements) such that the differences between consecutive elements, when taken in absolute value, strictly alternate between being greater than and less than or equal to the previous difference or vice versa. For example, a sequence like [1, 7, 3, 5, 2, 8] can be turned into the alternating subsequence [1, 7, 3, 5] where the differences are 6, 4, and 2 respectively (6 > 4 > 2). Example 1: Input: [1, 7, 4, 9, 2, 5] Output: 6 Explanation: The longest alternating subsequence is [1, 7, 4, 9, 2, 5]. Example 2: Input: [10, 22, 9, 33, 49, 50, 31, 60] Output: 6 Explanation: The longest alternating subsequence is [10, 22, 9, 33, 50, 31]. Your Task: You don\'t need to read or print anything. Your task is to complete the function `longestAlternatingSubsequence()` which takes a list of integers as input and returns an integer, indicating the length of the longest alternating subsequence. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: 1 <= length of the list <= 1000 1 <= list[i] <= 10^4","solution":"def longestAlternatingSubsequence(arr): n = len(arr) if n == 0: return 0 up = [1] * n down = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: up[i] = max(up[i], down[j] + 1) elif arr[i] < arr[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down))"},{"question":"Flipping the Matrix You are given a 2n x 2n matrix of positive integers. You can perform the following operation any number of times: - Choose any element A[i][j] and flip it with the element located at A[2n-i-1][j], or A[i][2n-j-1], or A[2n-i-1][2n-j-1]. Your task is to maximize the sum of the elements present in the n x n sub-matrix located in the top-left corner of the 2n x 2n matrix, after performing the above operation any number of times. Input The first line contains an integer t, the number of test cases. Each test case consists of: - An integer n, the size of the sub-matrix and half of the dimension of the 2n x 2n matrix. - Followed by 2n lines, each containing 2n integers, representing the elements of the matrix. Output For each test case, output a single integer which is the maximum sum of the elements in the n x n sub-matrix located in the top-left corner of the 2n x 2n matrix. Constraints - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 100 - 1 ≤ A[i][j] ≤ 10^7 Sample Input 2 1 1 2 3 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Sample Output 4 54 Explanation For the first test case, you can swap A[0][0] (which is 1) with A[1][1] (which is 4). So the matrix becomes: 4 2 3 1 The sum of the top-left 1x1 sub-matrix is 4. For the second test case, you can swap the elements to achieve the maximum sum in the top-left 2x2 sub-matrix (several ways to do it), one of which is: 15 14 11 12 13 16 7 8 9 6 3 4 5 10 1 2 The sum of the top-left 2x2 sub-matrix is 15 + 14 + 13 + 16 = 58.","solution":"def flippingMatrix(t, cases): results = [] for case in cases: n = case[0] matrix = case[1] total = 0 # Iterate over the top-left n x n sub-matrix elements for i in range(n): for j in range(n): # Find the maximum value of the possible flips total += max( matrix[i][j], # original matrix[2*n - i - 1][j], # flip vertically matrix[i][2*n - j - 1], # flip horizontally matrix[2*n - i - 1][2*n - j - 1] # flip both ) results.append(total) return results"},{"question":"Bob, a passionate gardener, has a garden represented as a 2D grid. Each cell in the grid can either contain a plant (denoted as 1) or be empty soil (denoted as 0). Bob loves patterns, and he wants to find the largest square area in the garden where every cell within the square contains a plant. Given the grid, can you determine the size of the largest square area comprised solely of plants? **Input Format:** - The first line of input contains two integers, N and M, representing the number of rows and columns of the grid, respectively. - The next N lines each contain M integers (either 0 or 1) representing the garden grid. **Output Format:** - Output a single integer, the side length of the largest square comprising only plants. **Constraints:** - 1 ≤ N, M ≤ 1000 - The grid cells contain only 0s and 1s **Sample Input 1:** ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` **Sample Output 1:** ``` 2 ``` **Explanation:** The largest square of plants has a side length of 2, located between the 3rd and 4th rows and the 3rd and 4th columns of the grid. **Sample Input 2:** ``` 3 3 0 1 1 1 1 1 1 1 1 ``` **Sample Output 2:** ``` 2 ``` **Explanation:** The largest square of plants has a side length of 2, located between the 2nd and 3rd rows and the 1st and 2nd columns of the grid. Your task is to write a code that reads the input, processes the grid, and outputs the side length of the largest square area that contains only plants in Bob\'s garden.","solution":"def largest_square_of_plants(grid): # Getting the number of rows (N) and columns (M) N = len(grid) M = len(grid[0]) # Initializing the DP table with zeros dp = [[0] * M for _ in range(N)] max_side = 0 for i in range(N): for j in range(M): # If the cell contains a plant if grid[i][j] == 1: if i == 0 or j == 0: # If it\'s the first row or first column, the largest square is 1 dp[i][j] = 1 else: # Calculate the size of the square dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 # Update the maximum size found max_side = max(max_side, dp[i][j]) return max_side"},{"question":"**See Also** * [Collinear Points](.) --- # Overview You are given a list of points on a 2D plane. Your task is to determine whether all the given points lie on a straight line or not. # Rules Input - A list of points, where each point is represented as a tuple of two integers (x, y), indicating the point\'s coordinates on the 2D plane. - The list can contain any number of points, but always at least two. Output - Return `True` if all the points lie on a single straight line, otherwise, return `False`. # Example **Input** * `points = [(0, 0), (1, 1), (2, 2), (3, 3)]` **Result** * `True` **Input** * `points = [(0, 1), (2, 2), (3, 3)]` **Result** * `False` # Notes - To determine whether the points are collinear, you can use the slope formula. For three points (x1, y1), (x2, y2), and (x3, y3), they lie on a straight line if the slope between the first two points is the same as the slope between the second and third points. - If the points are vertically aligned (same x-coordinate), you should handle the division by zero case appropriately. - The points are processed as integer coordinates. Points might not necessarily be sorted with respect to their coordinates. # Implementation Implement the function `are_points_collinear(points)`.","solution":"from typing import List, Tuple def are_points_collinear(points: List[Tuple[int, int]]) -> bool: Determines if all given points lie on a straight line. Args: points (List[Tuple[int, int]]): List of points represented as tuples of two integers (x, y) Returns: bool: True if all points lie on a straight line, False otherwise. if len(points) < 2: return True # Less than 2 points are trivially collinear # Get the first two points to determine the reference slope (x0, y0), (x1, y1) = points[0], points[1] # We will use a cross product approach to avoid dealing with division and floating point errors. def cross_product(x0, y0, x1, y1, x2, y2): return (y1 - y0) * (x2 - x1) - (y2 - y1) * (x1 - x0) for i in range(2, len(points)): (xi, yi) = points[i] if cross_product(x0, y0, x1, y1, xi, yi) != 0: return False return True"},{"question":"Write a program to check whether a given string representing a word contains any palindromic subsequence of length 3 or more. A palindromic subsequence is a sequence of characters from the string that reads the same forward and backward, not necessarily contiguous. Your function should take a string `s` as input and return \\"Has Palindrome\\" if there is a palindromic subsequence of length 3 or more, or \\"No Palindrome\\" if there is not. Consider the following example: - For the input string \\"abdbca\\", there is a palindromic subsequence \\"aba\\", so the function should return \\"Has Palindrome\\". - For the input string \\"abcdefg\\", there are no palindromic subsequences of length 3 or more, so the function should return \\"No Palindrome\\".","solution":"def has_palindromic_subsequence(s): Returns \\"Has Palindrome\\" if there is a palindromic subsequence of length 3 or more, otherwise returns \\"No Palindrome\\". def is_palindrome(subs): return subs == subs[::-1] n = len(s) if n < 3: return \\"No Palindrome\\" # check all possible palindromic subsequences of length 3 or more for length in range(3, n+1): for start in range(n - length + 1): sub_seq = s[start:start+length] if is_palindrome(sub_seq): return \\"Has Palindrome\\" return \\"No Palindrome\\""},{"question":"Michael is organizing a book fair and he has invited several vendors. Each vendor brings a number of books and he needs to distribute them across different tables. Michael wants to ensure that each table has an equal or nearly equal number of books to keep the display balanced. To do this, he needs a program to determine the best way to distribute the books. Suppose Michael has k tables and b books. Your task is to find out the minimum possible difference between the table with the most books and the table with the fewest books after distributing all the books. For example: If Michael has 2 tables and 7 books, he could place 4 books on one table and 3 books on the other. The difference between the maximum and minimum books on any table is 1. If Michael has 4 tables and 5 books, he could place 2 books on one table and 1 book on each of the other three tables. The difference between the maximum and minimum books on any table is 1. -----Input----- The first line contains a single integer t (1 le t le 10^4)— the number of test cases. Each test case consists of two integers k and b (1 le k le 10^9, 0 le b le 10^{18}) — the number of tables and the number of books respectively. -----Output----- For each test case, print one integer — the minimum possible difference between the maximum number of books on any table and the minimum number of books on any table. -----Examples----- Input 4 2 7 4 5 3 9 5 0 Output 1 1 0 0 -----Note----- None","solution":"def min_diff_between_tables(t, test_cases): Determines the minimum possible difference between the table with the most books and the table with the fewest books after distributing all the books. :param t: Number of test cases :param test_cases: List of tuples, each containing two integers k (tables) and b (books). :return: List of integers representing the minimum possible difference for each test case result = [] for k, b in test_cases: if b == 0: result.append(0) else: # The minimum difference is either 0 (if books can be evenly distributed) # or 1 (if there\'s a remainder when books are divided by tables) if b % k == 0: result.append(0) else: result.append(1) return result"},{"question":"Smart Squirrel likes building towers out of different colored blocks. Each block has a specific color and height. Squirrel has a particular sequence in which he stacks the blocks. However, one day, he got curious about what the highest possible tower he could build using blocks of a particular color was. Help Smart Squirrel by writing a program that computes the maximum possible height of a tower built from blocks of a given color. You are given a list of blocks where each block has a color and a height. Your task is to determine the maximum possible height of a tower using blocks of a specified color. Input The first line contains two integers n and q (1 ≤ n, q ≤ 1000) — the total number of blocks and the number of queries respectively. The next n lines each contain an integer h (1 ≤ h ≤ 1000) and a string color — the height and color of the block. Each block has a unique height but possibly the same color as other blocks. The next q lines each contain a string color, representing the color for which Smart Squirrel wants to know the maximum possible tower height. Output For each query, output a single integer — the maximum possible height of a tower using blocks of the specified color. If there are no blocks of the specified color, output 0. Examples Input 5 3 10 red 15 blue 20 red 5 blue 25 green red blue yellow Output 30 20 0","solution":"def build_max_tower(n, q, blocks, queries): Returns the maximum possible height of towers for each query color. n: int - number of blocks q: int - number of queries blocks: list of tuples - each tuple contains a block\'s height and color (\'height\', \'color\') queries: list of strings - each string is a color query from collections import defaultdict # Create a dictionary to store the total heights of blocks by color color_heights = defaultdict(int) # Populate the dictionary with the blocks information for height, color in blocks: color_heights[color] += height # Process each query and return the maximum height for the given color result = [] for color in queries: result.append(color_heights.get(color, 0)) return result"},{"question":"Sam loves to collect rare coins. He organizes his coin collection in a special box where each coin has a unique value. However, Sam sometimes forgets which coins he has already collected. He wants to add a new coin to his collection but wants to ensure it\'s not already present. Write a program to help Sam determine if a coin is already in his collection. -----Constraints----- - The size of the collection N is 1 ≤ N ≤ 1000. - The values of the coins in the collection and the new coin are integers ranging from 1 to 100000. -----Input----- Input is given from Standard Input in the following format: N coin_values (space-separated integers representing the values of the coins in the collection) new_coin_value -----Output----- Print \\"YES\\" if the new coin is already in the collection, otherwise print \\"NO\\". -----Sample Input----- 5 1 2 3 4 5 3 -----Sample Output----- YES Sam already has a coin with value 3 in his collection.","solution":"def is_coin_in_collection(N, coin_values, new_coin_value): Returns \\"YES\\" if the new coin value is already in the collection, otherwise \\"NO\\". :param N: int, the size of the collection. :param coin_values: list of int, the values of the coins in the collection. :param new_coin_value: int, the value of the new coin to check. :return: str, \\"YES\\" or \\"NO\\" if new_coin_value in coin_values: return \\"YES\\" else: return \\"NO\\" # Example usage: N = 5 coin_values = [1, 2, 3, 4, 5] new_coin_value = 3 print(is_coin_in_collection(N, coin_values, new_coin_value)) # Output: YES"},{"question":"Eve is a software engineer working on a real-time messaging application. She needs to implement a system that balances message processing across multiple servers. Given that there are `n` servers and `m` messages to process, she wants to distribute the messages in such a way that no server gets overloaded. Each message has a different processing time and processing order of messages on each server should be preserved. Your task is to help Eve distribute the messages across the servers such that the difference between the maximum total processing time of any server and the minimum total processing time of any server is minimized. ----Input---- The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of servers and the number of messages respectively. The next line contains `m` integers `t1, t2, ..., tm` (1 ≤ ti ≤ 100) — the processing times of the messages. -----Output----- Print `n` blocks, each block describes the messages assigned to a specific server. In the first line of each block, print the number of messages assigned to that server. In the subsequent lines, print the indices of the messages (1-based index). For example, if the first message is assigned to server 1, the index is 1. Ensure that each message index appears exactly once in the output, and the processing order within each server should be preserved. -----Examples----- -----Example 1----- Input: 2 6 1 2 3 2 1 3 Output: 3 1 2 3 3 4 5 6 -----Example 2----- Input: 3 5 6 2 4 3 5 Output: 2 1 2 2 3 4 1 5 -----Example 3----- Input: 4 4 8 6 7 5 Output: 1 1 1 2 1 3 1 4 -----Note----- In Example 1, the messages are distributed among the servers such that both servers have messages with total processing times [1+2+3=6] each. In Example 2, the messages are distributed among the servers to achieve the minimum difference in total processing times [6+2=8], [4+3=7], and [5=5] having maximum and minimum processing times difference of 3. In Example 3, each server has exactly one message, hence the total processing time for each server is the time of the single message it processes.","solution":"def distribute_messages(n, m, t): Distributes the messages across n servers such that the difference between the maximum total processing time of any server and the minimum total processing time of any server is minimized. Args: n: Number of servers (int) m: Number of messages (int) t: List of message processing times (list of ints) Returns: A list where each element is a list of message indices assigned to that server from heapq import heappop, heappush servers = [(0, i) for i in range(n)] # (current_load, server_index) result = [[] for _ in range(n)] for i in range(m): current_load, server_index = heappop(servers) result[server_index].append(i + 1) new_load = current_load + t[i] heappush(servers, (new_load, server_index)) return result"},{"question":"Given a string s and a set of substrings dict[], the task is to form s by concatenating words from dict without reordering them. Return the minimum number of substrings needed to form s. If it\'s not possible, return -1. Example 1: Input: s = \\"leetcode\\" dict = [\\"leet\\", \\"code\\"] Output: 2 Explanation: We can form the string s = \\"leetcode\\" by concatenating \\"leet\\" and \\"code\\". Example 2: Input: s = \\"applepie\\" dict = [\\"apple\\", \\"pie\\", \\"app\\", \\"lepie\\"] Output: 2 Explanation: We can form the string s = \\"applepie\\" by concatenating \\"apple\\" and \\"pie\\". Example 3: Input: s = \\"hello\\" dict = [\\"he\\", \\"hell\\"] Output: -1 Explanation: It’s not possible to form the string s = \\"hello\\" using the given substrings. Your Task: You don\'t need to read input or print anything. Complete the function minSubstrings() which takes the string s and the array dict as input parameters and returns the minimum number of substrings required to form s. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |s| ≤ 10^3 1 ≤ |dict[i]| ≤ 10^2 1 ≤ length of dict ≤ 100","solution":"def minSubstrings(s, dict): Returns the minimum number of substrings from dict needed to form s. If it is not possible, returns -1. word_set = set(dict) n = len(s) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): for j in range(i): if s[j:i] in word_set: dp[i] = min(dp[i], dp[j] + 1) return dp[-1] if dp[-1] != float(\'inf\') else -1"},{"question":"Alice runs a company that manufactures widgets. She has a list of client orders for a particular day. Each order specifies a range of widget IDs that the client wants. Alice wants to determine how many distinct widget IDs are ordered at least once on that day. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer M denoting the number of client orders. - Each of the following M lines contains two integers L_i and R_i denoting the range of widget IDs for the i-th order (inclusive). -----Output----- For each test case, print a single line containing one integer - the number of distinct widget IDs ordered at least once. -----Constraints----- - 1 le T le 10 - 1 le M le 10^5 - 1 le L_i le R_i le 10^9 -----Example Input----- 2 3 1 5 4 8 10 12 4 1 1 2 2 3 3 1 3 -----Example Output----- 11 3 -----Explanation----- Example case 1: The ranges are [1, 5], [4, 8], and [10, 12]. Combining them gives the distinct widget IDs: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, totaling 11 distinct IDs. Example case 2: The ranges are [1, 1], [2, 2], [3, 3], and [1, 3]. The distinct widget IDs ordered are 1, 2, and 3, totaling 3 distinct IDs.","solution":"def count_distinct_widgets(T, test_cases): This function returns a list of integers where each integer represents the number of distinct widget IDs ordered at least once for each test case. :param T: Integer, the number of test cases. :param test_cases: List of tuples, where each tuple contains: - an Integer M, the number of client orders - a List of tuples [(L1, R1), (L2, R2), ..., (LM, RM)] representing the ranges of orders. :returns: List of integers, the number of distinct widget IDs for each test case. results = [] for i in range(T): M, orders = test_cases[i] unique_widgets = set() for order in orders: L, R = order unique_widgets.update(range(L, R + 1)) results.append(len(unique_widgets)) return results"},{"question":"In a distant land, there exists a magical forest represented by an n × n grid. Each cell in the grid can either be an empty cell (.) representing open ground, or a tree (#) representing an obstacle. You, the forest ranger, have the ability to perform a cutting operation to clear a path through the forest. Your power involves selecting an axis-aligned subgrid (a rectangle) within the forest and turning all cells within that subgrid to empty cells (i.e., cutting down any trees in the selected subgrid). Your goal is to find a way to clear a path from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, n). You need to determine the minimum number of cutting operations required to create such a path, or if it is impossible. Input The first line of input contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. The first line of each test case contains a single integer n denoting the dimensions of the grid (1 ≤ n ≤ 50). The next n lines each contain n characters, representing the grid, where: * \\".\\" represents an empty cell; * \\"#\\" represents a tree. Output For each test case, output a single line containing the minimum number of cutting operations needed to create a path from the top-left corner (1, 1) to the bottom-right corner (n, n), or the string \\"IMPOSSIBLE\\" if it is not possible to create such a path. Example Input 3 5 .#... .#. ... .#. ..... 4 3 .#. #.# .#. Output 1 IMPOSSIBLE 1 Explanation In the first test case, a single subgrid cutting operation clearing the entire grid can create a path. In the second test case, it is not possible to create a path since the grid is completely filled with trees. In the third test case, one cutting operation clearing the middle column can create a path from the top-left corner to the bottom-right corner.","solution":"def min_cut_operations(t, test_cases): def is_path_possible(grid, n): # BFS to check if a path exists from top-left to bottom-right from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return False results = [] for i in range(t): n = test_cases[i][0] grid = test_cases[i][1] if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': results.append(\\"IMPOSSIBLE\\") continue if n == 1: results.append(0) continue # Check if there\'s already a path if is_path_possible(grid, n): results.append(0) continue # Try cutting the entire grid to see if it can be done in one move for x in range(n): for y in range(n): cut_grid = [list(row) for row in grid] for i in range(n): for j in range(n): if x <= i <= x+n-1 and y <= j <= y+n-1: cut_grid[i][j] = \'.\' if is_path_possible(cut_grid, n): results.append(1) break else: continue break else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"The problem is to determine the minimum cost to convert a given string into a palindrome. You are given an integer array that represents the costs of deleting each character from the string. The goal is to find the minimum total cost required to make the string a palindrome by deleting characters. A string is a palindrome if it reads the same backward as forward. Input: - The first line contains an integer `T`, the number of test cases. - For each test case: - The first line contains a single integer `N`, the length of the string. - The second line contains the string of length `N`. - The third line contains `N` space-separated integers representing the cost array where the ith integer denotes the cost of deleting the ith character from the string. Output: - For each test case, print the minimum cost required to make the string a palindrome. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Cost[i] ≤ 1000 - The string consists of lowercase English letters. Sample Input: ``` 2 4 abca 1 2 3 4 5 abcba 1 2 3 4 5 ``` Sample Output: ``` 1 0 ``` Explanation: 1. For the first test case, the string \\"abca\\" can be made into a palindrome by deleting the character \'b\' with a cost of 2 or the character \'c\' with a cost of 3. Deleting the first \'a\' or the last \'a\' is not viable as that would make it impossible to form a palindrome. The minimum cost to make \\"abca\\" a palindrome is 2. 2. For the second test case, the string \\"abcba\\" is already a palindrome, so the minimum cost required is 0.","solution":"def min_cost_to_make_palindrome(T, test_cases): def calculate_min_cost(N, s, cost): dp = [[0] * N for _ in range(N)] for length in range(2, N+1): for i in range(N-length+1): j = i+length-1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] else: dp[i][j] = min(dp[i+1][j] + cost[i], dp[i][j-1] + cost[j]) return dp[0][N-1] results = [] for case in test_cases: N, s, cost = case results.append(calculate_min_cost(N, s, cost)) return results"},{"question":"You are given a grid that represents a map. Each cell in the map is either water (\'W\') or land (\'L\'). A \\"landmass\\" is defined as a contiguous group of land cells that are connected horizontally or vertically. Your task is to find the number of distinct landmasses in the grid. Input: The first line contains two space-separated integers n and m, representing the number of rows and columns in the grid respectively. The next n lines each contain m characters, representing the grid. 1 ≤ n, m ≤ 100 Output: Print the number of distinct landmasses in the grid. SAMPLE INPUT 5 5 LWWLL LWLWL WWWLL LWLWW LLLLW SAMPLE OUTPUT 4 Explanation: The 4 distinct landmasses are: 1. Contiguous \'L\'s in positions (1,1) and (2,1) 2. Contiguous \'L\'s in positions (1,4) and (1,5) 3. Contiguous \'L\' in position (2,3) 4. Contiguous \'L\'s in positions (4,1), (5,1), (5,2), (5,3), and (4,3)","solution":"def count_landmasses(n, m, grid): def dfs(x, y): # If out of bounds; or it\'s water or already visited, return. if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'L\': return # Mark the cell as visited by changing \'L\' to something else, e.g., \'#\' grid[x][y] = \'#\' # Move in four possible directions dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) landmasses = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': # found an unvisited land landmasses += 1 dfs(i, j) return landmasses"},{"question":"Problem description: You are participating in a coding contest, and in one of the rounds, you are given a unique task. The task involves working with arrays, integers, and some arithmetic operations. Specifically, you\'ll have to manipulate an array based on a set of rules and output the modified array. Problem: You are given an array of integers. Your task is to perform a series of operations on this array. The operations are of two types: 1. Adding a value to all elements in the array. 2. Multiplying all elements in the array by a value. You need to output the final state of the array after performing all the operations in the given order. Input: - The first line contains an integer N, denoting the number of elements in the array. - The second line contains N space-separated integers, representing the array. - The third line contains an integer M, denoting the number of operations. - The next M lines contain a character and an integer. The character is either \'A\' for addition or \'M\' for multiplication, followed by the integer value. Output: - Print the final modified array as a space-separated list of integers. Constraints: 1 ≤ N ≤ 10^5 1 ≤ array[i]’s value ≤ 10^3 1 ≤ M ≤ 10^5 1 ≤ operation value ≤ 10^3 Example: Input: 5 2 3 5 7 11 3 A 2 M 2 A 1 Output: 7 9 13 17 23 Explanation: - After adding 2 to each element: [4, 5, 7, 9, 13] - After multiplying each element by 2: [8, 10, 14, 18, 26] - After adding 1 to each element: [9, 11, 15, 19, 27]","solution":"def modify_array(N, array, M, operations): Modifies the array based on the operations and returns the final array. Args: N: int : Number of elements in the array. array: List[int] : List of integers representing the array. M: int : Number of operations. operations: List[Tuple[str, int]] : List of operations to be performed. Returns: List[int]: The final modified array. for op in operations: if op[0] == \'A\': array = [x + op[1] for x in array] elif op[0] == \'M\': array = [x * op[1] for x in array] return array"},{"question":"Given a string S, you need to perform the following operations: - Remove all the vowels from the string S. - Reverse the string after removing the vowels. ------ Input Format ------ - The first line contains an integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains a string S. ------ Output Format ------ For each test case, output the resultant string after performing the given operations. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 (|S| is the length of the string) The string S contains only lowercase English letters. ------ Sample Input 1 ------ 3 hello world beautiful ------ Sample Output 1 ------ llh dlrw lftb ------ Explanation 1 ------ Test Case 1: The string \\"hello\\" becomes \\"hll\\" after removing the vowels, and \\"hll\\" becomes \\"llh\\" after reversing. Test Case 2: The string \\"world\\" becomes \\"wrld\\" after removing the vowels, and \\"wrld\\" becomes \\"dlrw\\" after reversing. Test Case 3: The string \\"beautiful\\" becomes \\"btfl\\" after removing the vowels, and \\"btfl\\" becomes \\"lftb\\" after reversing.","solution":"def remove_vowels_and_reverse(s): vowels = \'aeiou\' no_vowels = \'\'.join([char for char in s if char not in vowels]) return no_vowels[::-1] def process_test_cases(test_cases): results = [] for s in test_cases: results.append(remove_vowels_and_reverse(s)) return results"},{"question":"# Task You are given a string `s` consisting only of lowercase English letters. Identify whether the string is a palindrome permutation - a string that can be rearranged to form a palindrome. # Example For `s = \\"civic\\"`, the output should be `true`. For `s = \\"ivicc\\"`, the output should be `true`. For `s = \\"hello\\"`, the output should be `false`. # Input/Output - `[input]` string `s` Constraints: `1 ≤ s.length ≤ 1000` - `[output]` a boolean value `true` if `s` is a palindrome permutation, `false` otherwise.","solution":"def is_palindrome_permutation(s): Determines if the string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if at most one character has an odd frequency in the string. :param s: A string consisting of lowercase English letters. :return: True if the string is a palindrome permutation, False otherwise. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Check the number of characters with odd frequencies odd_count = sum(1 for count in freq.values() if count % 2 != 0) # At most one character should have an odd frequency for it to be a palindrome permutation return odd_count <= 1"},{"question":"Write a function to generate the nth row of Pascal\'s Triangle, where n is a non-negative integer. Pascal\'s Triangle is a triangular array of numbers where the values in each row are the binomial coefficients for the corresponding row index. For example, the first five rows of Pascal\'s Triangle are: 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 **Function Signature:** ```python def pascal_triangle_row(n: int) -> List[int]: ``` **Input:** - An integer `n` (0 <= n <= 30) representing the row index in Pascal\'s Triangle you need to return. **Output:** - A list of integers representing the nth row of Pascal\'s Triangle. **Examples:** Example 1: ```python assert pascal_triangle_row(0) == [1] ``` Example 2: ```python assert pascal_triangle_row(3) == [1, 3, 3, 1] ``` Example 3: ```python assert pascal_triangle_row(4) == [1, 4, 6, 4, 1] ``` **Explanation:** Given a non-negative integer `n`, the function should return the nth row of Pascal\'s Triangle. The elements for each row can be calculated using binomial coefficients or by summing adjacent elements of the previous row as per Pascal\'s Triangle properties. Ensure the function handles maximum row index `n = 30` within a reasonable execution time.","solution":"from typing import List def pascal_triangle_row(n: int) -> List[int]: Returns the nth row of Pascal\'s Triangle. if n == 0: return [1] # Start with the first row row = [1] # Use the previous row to build the next row for i in range(1, n + 1): # Generate the next row based on the previous one new_row = [1] # start with 1 for j in range(1, i): new_row.append(row[j - 1] + row[j]) new_row.append(1) # end with 1 row = new_row return row"},{"question":"Write a function to find the missing number in a given sequence of integers from 1 to N. The sequence is given as an array `Arr[]` of size `N-1`. There are no duplicates in the array, and it is guaranteed that one number between 1 and N is missing from the sequence. Example 1: Input: N=5 Arr={1,2,3,5} Output: 4 Explanation: The numbers from 1 to 5 are 1, 2, 3, 4, 5. The missing number is 4. Example 2: Input: N=3 Arr={1,3} Output: 2 Explanation: The numbers from 1 to 3 are 1, 2, 3. The missing number is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMissingNumber()` which takes an integer `N` and an array `Arr` of size `N-1` as input parameters and returns the missing number. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= Arr[i] <= 10^5","solution":"def findMissingNumber(N, Arr): This function finds the missing number in the sequence from 1 to N. Parameters: N (int): The highest number in the range. Arr (list): The list containing N-1 numbers from the range 1 to N. Returns: int: The missing number from the sequence. # Calculating the expected sum of first N natural numbers using the formula: N * (N + 1) // 2 total_sum = N * (N + 1) // 2 # Calculating the sum of elements in Arr arr_sum = sum(Arr) # The missing number is the difference between the total sum and the array sum return total_sum - arr_sum"},{"question":"Given a string s and an array of queries where each query is a substring, return an array of counts where each count is the number of times the corresponding query substring appears in the string s. Example 1: Input: s = \\"ababab\\", queries = [\\"ab\\", \\"aba\\", \\"bab\\"] Output: [3, 2, 2] Explanation: The substring \\"ab\\" appears 3 times in \\"ababab\\". The substring \\"aba\\" appears 2 times in \\"ababab\\". The substring \\"bab\\" appears 2 times in \\"ababab\\". Example 2: Input: s = \\"mississippi\\", queries = [\\"is\\", \\"sip\\", \\"iss\\"] Output: [2, 1, 2] Explanation: The substring \\"is\\" appears 2 times in \\"mississippi\\". The substring \\"sip\\" appears 1 time in \\"mississippi\\". The substring \\"iss\\" appears 2 times in \\"mississippi\\". Example 3: Input: s = \\"hello\\", queries = [\\"he\\", \\"lo\\", \\"hel\\", \\"l\\"] Output: [1, 1, 1, 2] Explanation: The substring \\"he\\" appears 1 time in \\"hello\\". The substring \\"lo\\" appears 1 time in \\"hello\\". The substring \\"hel\\" appears 1 time in \\"hello\\". The substring \\"l\\" appears 2 times in \\"hello\\". Constraints: 1. 1 <= s.length <= 10^5 2. s consists of lowercase English letters. 3. 1 <= queries.length <= 10^4 4. 1 <= queries[i].length <= 10^3","solution":"def count_substrings(s, queries): Returns an array of counts where each count is the number of times the corresponding query substring appears in the string s. result = [] for query in queries: count = 0 start = 0 while start <= len(s) - len(query): pos = s.find(query, start) if pos != -1: count += 1 start = pos + 1 # move start to the next position else: break result.append(count) return result"},{"question":"Amidst a dark and stormy night, Professor Snape found himself brewing complex potions in his lab. Each potion required a specific set of ingredients, and each ingredient had a unique magical property score. By combining some of these ingredients, Snape could create potions with varying levels of magical potency. His goal was to maximize the total potency of his potions without exceeding a set limit on the number of ingredients he could use. INPUT: The first line contains the number of test cases \\"T\\". For each test case, the first line contains the number of available ingredients \\"N\\". The second line contains the maximum number of ingredients \\"K\\" that can be used to create the potion. The third line contains the magical property scores of the \\"N\\" ingredients. OUTPUT: For each test case, output the maximum total magical potency that can be achieved without using more than \\"K\\" ingredients. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 0 ≤ magical property score ≤ 10000 SAMPLE INPUT 2 5 3 2 5 7 8 10 4 2 1 4 6 3 SAMPLE OUTPUT 25 10","solution":"def max_potency_potions(T, test_cases): This function computes the maximum total magical potency that can be achieved without using more than a set limit of ingredients for multiple test cases. results = [] for i in range(T): N, K, scores = test_cases[i] # Sort scores in descending order to get the highest scores scores.sort(reverse=True) # Sum the top K scores max_potency = sum(scores[:K]) results.append(max_potency) return results"},{"question":"Given an array of positive integers representing the heights of columns, where each column is 1 unit wide, compute the maximum area of water that can be contained between any two columns. Assume that the container walls are formed by the columns at the endpoints, and the width of the container is the horizontal distance between these columns. The container cannot be tilted and water cannot spill over the top. Example Consider the following height array: < pre> [1, 8, 6, 2, 5, 4, 8, 3, 7] </pre> The maximum area is formed between the columns with heights 8 and 7, which are 7 units apart. Thus, the maximum area of water that can be contained is 7 times min(8, 7) = 49. Input - A single line containing an integer n (2 leq n leq 10^5), the number of columns. - A second line containing n positive integers separated by spaces representing the heights of the columns h_1, h_2, ..., h_n (1 leq h_i leq 10^4). Output - A single integer representing the maximum area of water that can be contained. Constraints - The input contains at least two elements. - The height of each column is a positive integer. Example 1: Input: < pre> 9 1 8 6 2 5 4 8 3 7 </pre> Output: < pre> 49 </pre> Example 2: Input: < pre> 4 1 2 4 3 </pre> Output: < pre> 4 </pre> Note Water can be contained between columns at index 1 and index 8 or between columns at index 2 and index 7. In both cases, the maximum area is calculated as 7 times min(8, 7) = 49. The function should return the maximum such volume. The approach should ensure optimal time and space complexity.","solution":"def maxArea(height): Calculate the maximum area of water that can be contained using the given heights of columns. :param height: List of integers representing the heights of columns. :return: Maximum area of water that can be contained. left = 0 # Pointer to the leftmost element right = len(height) - 1 # Pointer to the rightmost element max_area = 0 # Variable to store the maximum area while left < right: # Calculate the area with the current pair of columns width = right - left min_height = min(height[left], height[right]) current_area = width * min_height # Update the maximum area if the current area is larger max_area = max(max_area, current_area) # Move the pointer pointing to the shorter column if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"Write a function that takes a single integer `n` and returns a list of all prime numbers up to (and including) `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input: - A single integer `n` (2 ≤ n ≤ 10000). # Output: - A list of prime numbers up to `n`. # Example: ``` Input: 10 Output: [2, 3, 5, 7] Input: 15 Output: [2, 3, 5, 7, 11, 13] ``` # Note: - Utilize efficient algorithms such as the Sieve of Eratosthenes to handle the upper limit efficiently. - Ensure the function can handle the edge cases where `n` is the smallest or largest possible value within the given constraints.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 # Extracting the prime numbers primes = [i for i in range(n + 1) if sieve[i]] return primes"}]'),A={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},Y={class:"card-container"},j={key:0,class:"empty-state"},C=["disabled"],R={key:0},P={key:1};function z(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,C)):u("",!0)])}const L=d(A,[["render",z],["__scopeId","data-v-0d025f31"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/3.md","filePath":"chatai/3.md"}'),M={name:"chatai/3.md"},G=Object.assign(M,{setup(s){return(e,l)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,G as default};
